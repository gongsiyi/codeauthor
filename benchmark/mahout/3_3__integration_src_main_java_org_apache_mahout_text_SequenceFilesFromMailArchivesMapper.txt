1:d711ac1: /**
1:d711ac1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d711ac1:  * contributor license agreements.  See the NOTICE file distributed with
1:d711ac1:  * this work for additional information regarding copyright ownership.
1:d711ac1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d711ac1:  * (the "License"); you may not use this file except in compliance with
1:d711ac1:  * the License.  You may obtain a copy of the License at
3:d711ac1:  *
1:d711ac1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d711ac1:  *
1:d711ac1:  * Unless required by applicable law or agreed to in writing, software
1:d711ac1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d711ac1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d711ac1:  * See the License for the specific language governing permissions and
1:d711ac1:  * limitations under the License.
1:d711ac1:  */
26:d711ac1: 
1:d711ac1: package org.apache.mahout.text;
1:d711ac1: 
1:74078b6: import com.google.common.base.Joiner;
1:d711ac1: import com.google.common.collect.Lists;
1:864ba1a: import com.google.common.collect.Maps;
1:d711ac1: import org.apache.hadoop.conf.Configuration;
1:74078b6: import org.apache.hadoop.fs.Path;
1:74078b6: import org.apache.hadoop.io.BytesWritable;
1:d711ac1: import org.apache.hadoop.io.IntWritable;
1:74078b6: import org.apache.hadoop.io.Text;
1:d711ac1: import org.apache.hadoop.mapreduce.Mapper;
1:d711ac1: import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;
1:22533ae: import org.apache.mahout.common.HadoopUtil;
1:d711ac1: import org.apache.mahout.common.iterator.FileLineIterable;
1:d711ac1: import org.apache.mahout.utils.email.MailOptions;
1:d711ac1: import org.apache.mahout.utils.email.MailProcessor;
1:74078b6: 
1:864ba1a: import java.io.ByteArrayInputStream;
1:864ba1a: import java.io.FileNotFoundException;
1:864ba1a: import java.io.IOException;
1:864ba1a: import java.io.InputStream;
1:864ba1a: import java.nio.charset.Charset;
1:864ba1a: import java.util.Arrays;
1:864ba1a: import java.util.List;
1:864ba1a: import java.util.Map;
1:864ba1a: import java.util.regex.Matcher;
1:864ba1a: import java.util.regex.Pattern;
1:864ba1a: 
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromMailArchives.BODY_OPTION;
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromMailArchives.BODY_SEPARATOR_OPTION;
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromMailArchives.CHARSET_OPTION;
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromMailArchives.CHUNK_SIZE_OPTION;
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromMailArchives.FROM_OPTION;
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromMailArchives.KEY_PREFIX_OPTION;
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromMailArchives.QUOTED_REGEX_OPTION;
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromMailArchives.REFERENCES_OPTION;
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromMailArchives.SEPARATOR_OPTION;
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromMailArchives.STRIP_QUOTED_OPTION;
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromMailArchives.SUBJECT_OPTION;
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromMailArchives.TO_OPTION;
1:670a7d2: 
1:d711ac1: /**
1:d711ac1:  * Map Class for the SequenceFilesFromMailArchives job
1:d711ac1:  */
1:d711ac1: public class SequenceFilesFromMailArchivesMapper extends Mapper<IntWritable, BytesWritable, Text, Text> {
1:74078b6: 
1:d711ac1:   private Text outKey = new Text();
1:d711ac1:   private Text outValue = new Text();
1:74078b6: 
1:d711ac1:   private static final Pattern MESSAGE_START = Pattern.compile(
1:74078b6:     "^From \\S+@\\S.*\\d{4}$", Pattern.CASE_INSENSITIVE);
1:d711ac1:   private static final Pattern MESSAGE_ID_PREFIX = Pattern.compile(
1:74078b6:     "^message-id: <(.*)>$", Pattern.CASE_INSENSITIVE);
1:74078b6: 
1:d711ac1:   private MailOptions options;
1:74078b6: 
1:d711ac1:   @Override
1:d711ac1:   public void setup(Context context) throws IOException, InterruptedException {
1:d711ac1: 
1:74078b6:     Configuration configuration = context.getConfiguration();
1:74078b6: 
1:d711ac1:     // absorb all of the options into the MailOptions object
1:d711ac1:     this.options = new MailOptions();
1:d711ac1: 
1:74078b6:     options.setPrefix(configuration.get(KEY_PREFIX_OPTION[1], ""));
1:74078b6: 
1:74078b6:     if (!configuration.get(CHUNK_SIZE_OPTION[0], "").equals("")) {
1:74078b6:       options.setChunkSize(configuration.getInt(CHUNK_SIZE_OPTION[0], 64));
6:d711ac1:     }
1:74078b6: 
1:74078b6:     if (!configuration.get(CHARSET_OPTION[0], "").equals("")) {
1:74078b6:       Charset charset = Charset.forName(configuration.get(CHARSET_OPTION[0], "UTF-8"));
1:d711ac1:       options.setCharset(charset);
2:d711ac1:     } else {
1:d711ac1:       Charset charset = Charset.forName("UTF-8");
1:d711ac1:       options.setCharset(charset);
1:d711ac1:     }
1:74078b6: 
1:864ba1a:     List<Pattern> patterns = Lists.newArrayListWithCapacity(5);
1:d711ac1:     // patternOrder is used downstream so that we can know what order the
1:d711ac1:     // text is in instead
1:d711ac1:     // of encoding it in the string, which
1:d711ac1:     // would require more processing later to remove it pre feature
1:d711ac1:     // selection.
1:864ba1a:     Map<String, Integer> patternOrder = Maps.newHashMap();
1:d711ac1:     int order = 0;
1:74078b6:     if (!configuration.get(FROM_OPTION[1], "").equals("")) {
1:d711ac1:       patterns.add(MailProcessor.FROM_PREFIX);
1:d711ac1:       patternOrder.put(MailOptions.FROM, order++);
1:d711ac1:     }
1:d711ac1: 
1:74078b6:     if (!configuration.get(TO_OPTION[1], "").equals("")) {
1:d711ac1:       patterns.add(MailProcessor.TO_PREFIX);
1:d711ac1:       patternOrder.put(MailOptions.TO, order++);
1:d711ac1:     }
1:d711ac1: 
1:74078b6:     if (!configuration.get(REFERENCES_OPTION[1], "").equals("")) {
1:d711ac1:       patterns.add(MailProcessor.REFS_PREFIX);
1:d711ac1:       patternOrder.put(MailOptions.REFS, order++);
1:d711ac1:     }
1:74078b6: 
1:74078b6:     if (!configuration.get(SUBJECT_OPTION[1], "").equals("")) {
1:d711ac1:       patterns.add(MailProcessor.SUBJECT_PREFIX);
1:74078b6:       patternOrder.put(MailOptions.SUBJECT, order += 1);
1:d711ac1:     }
1:74078b6: 
1:74078b6:     options.setStripQuotedText(configuration.getBoolean(STRIP_QUOTED_OPTION[1], false));
1:74078b6: 
1:d711ac1:     options.setPatternsToMatch(patterns.toArray(new Pattern[patterns.size()]));
1:d711ac1:     options.setPatternOrder(patternOrder);
1:74078b6: 
1:74078b6:     options.setIncludeBody(configuration.getBoolean(BODY_OPTION[1], false));
1:74078b6: 
1:d711ac1:     options.setSeparator("\n");
1:74078b6:     if (!configuration.get(SEPARATOR_OPTION[1], "").equals("")) {
1:74078b6:       options.setSeparator(configuration.get(SEPARATOR_OPTION[1], ""));
1:d711ac1:     }
1:74078b6:     if (!configuration.get(BODY_SEPARATOR_OPTION[1], "").equals("")) {
1:74078b6:       options.setBodySeparator(configuration.get(BODY_SEPARATOR_OPTION[1], ""));
1:d711ac1:     }
1:74078b6:     if (!configuration.get(QUOTED_REGEX_OPTION[1], "").equals("")) {
1:74078b6:       options.setQuotedTextPattern(Pattern.compile(configuration.get(QUOTED_REGEX_OPTION[1], "")));
1:d711ac1:     }
1:74078b6: 
1:d711ac1:   }
1:d711ac1: 
1:74078b6:   public long parseMailboxLineByLine(String filename, InputStream mailBoxInputStream, Context context)
1:d711ac1:     throws IOException, InterruptedException {
1:d711ac1:     long messageCount = 0;
1:d711ac1:     try {
1:d711ac1:       StringBuilder contents = new StringBuilder();
1:d711ac1:       StringBuilder body = new StringBuilder();
1:d711ac1:       Matcher messageIdMatcher = MESSAGE_ID_PREFIX.matcher("");
1:d711ac1:       Matcher messageBoundaryMatcher = MESSAGE_START.matcher("");
1:d711ac1:       String[] patternResults = new String[options.getPatternsToMatch().length];
1:74078b6:       Matcher[] matches = new Matcher[options.getPatternsToMatch().length];
1:74078b6:       for (int i = 0; i < matches.length; i++) {
1:74078b6:         matches[i] = options.getPatternsToMatch()[i].matcher("");
1:d711ac1:       }
1:74078b6: 
1:d711ac1:       String messageId = null;
1:d711ac1:       boolean inBody = false;
1:d711ac1:       Pattern quotedTextPattern = options.getQuotedTextPattern();
1:74078b6: 
1:74078b6:       for (String nextLine : new FileLineIterable(mailBoxInputStream, options.getCharset(), false, filename)) {
1:d711ac1:         if (!options.isStripQuotedText() || !quotedTextPattern.matcher(nextLine).find()) {
1:74078b6:           for (int i = 0; i < matches.length; i++) {
1:74078b6:             Matcher matcher = matches[i];
1:d711ac1:             matcher.reset(nextLine);
1:d711ac1:             if (matcher.matches()) {
1:d711ac1:               patternResults[i] = matcher.group(1);
1:d711ac1:             }
1:d711ac1:           }
1:d711ac1: 
1:d711ac1:           // only start appending body content after we've seen a message ID
1:d711ac1:           if (messageId != null) {
1:d711ac1:             // first, see if we hit the end of the message
1:d711ac1:             messageBoundaryMatcher.reset(nextLine);
1:d711ac1:             if (messageBoundaryMatcher.matches()) {
1:d711ac1:               // done parsing this message ... write it out
1:d711ac1:               String key = generateKey(filename, options.getPrefix(), messageId);
1:d711ac1:               // if this ordering changes, then also change
1:d711ac1:               // FromEmailToDictionaryMapper
1:d711ac1:               writeContent(options.getSeparator(), contents, body, patternResults);
1:d711ac1: 
1:d711ac1:               this.outKey.set(key);
1:d711ac1:               this.outValue.set(contents.toString());
1:d711ac1:               context.write(this.outKey, this.outValue);
1:d711ac1:               contents.setLength(0); // reset the buffer
1:d711ac1:               body.setLength(0);
1:d711ac1:               messageId = null;
1:d711ac1:               inBody = false;
1:d711ac1:             } else {
1:d711ac1:               if (inBody && options.isIncludeBody()) {
1:d711ac1:                 if (!nextLine.isEmpty()) {
1:d711ac1:                   body.append(nextLine).append(options.getBodySeparator());
1:d711ac1:                 }
1:d711ac1:               } else {
1:d711ac1:                 // first empty line we see after reading the message Id
1:d711ac1:                 // indicates that we are in the body ...
1:d711ac1:                 inBody = nextLine.isEmpty();
1:d711ac1:               }
1:d711ac1:             }
1:d711ac1:           } else {
1:d711ac1:             if (nextLine.length() > 14) {
1:d711ac1:               messageIdMatcher.reset(nextLine);
1:d711ac1:               if (messageIdMatcher.matches()) {
1:d711ac1:                 messageId = messageIdMatcher.group(1);
1:d711ac1:                 ++messageCount;
1:d711ac1:               }
1:d711ac1:             }
1:d711ac1:           }
1:d711ac1:         }
1:d711ac1:       }
1:d711ac1:       // write the last message in the file if available
1:d711ac1:       if (messageId != null) {
1:d711ac1:         String key = generateKey(filename, options.getPrefix(), messageId);
1:d711ac1:         writeContent(options.getSeparator(), contents, body, patternResults);
1:d711ac1:         this.outKey.set(key);
1:d711ac1:         this.outValue.set(contents.toString());
1:d711ac1:         context.write(this.outKey, this.outValue);
1:d711ac1:         contents.setLength(0); // reset the buffer
1:d711ac1:       }
1:d711ac1:     } catch (FileNotFoundException ignored) {
1:d711ac1: 
1:d711ac1:     }
1:d711ac1:     return messageCount;
1:d711ac1:   }
1:74078b6: 
1:d711ac1:   protected static String generateKey(String mboxFilename, String prefix, String messageId) {
1:74078b6:     return Joiner.on(Path.SEPARATOR).join(Lists.newArrayList(prefix, mboxFilename, messageId).iterator());
1:d711ac1:   }
1:74078b6: 
1:d711ac1:   private static void writeContent(String separator, StringBuilder contents, CharSequence body, String[] matches) {
1:74078b6:     String matchesString = Joiner.on(separator).useForNull("").join(Arrays.asList(matches).iterator());
1:74078b6:     contents.append(matchesString).append(separator).append(body);
1:d711ac1:   }
1:d711ac1: 
1:d711ac1:   public void map(IntWritable key, BytesWritable value, Context context)
1:d711ac1:     throws IOException, InterruptedException {
1:d711ac1:     Configuration configuration = context.getConfiguration();
1:d711ac1:     Path filePath = ((CombineFileSplit) context.getInputSplit()).getPath(key.get());
1:22533ae:     String relativeFilePath = HadoopUtil.calcRelativeFilePath(configuration, filePath);
1:d711ac1:     ByteArrayInputStream is = new ByteArrayInputStream(value.getBytes());
1:74078b6:     parseMailboxLineByLine(relativeFilePath, is, context);
1:d711ac1:   }
1:d711ac1: }
============================================================================
author:Andrew Musselman
-------------------------------------------------------------------------------
commit:864ba1a
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Maps;
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.nio.charset.Charset;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
/////////////////////////////////////////////////////////////////////////
1:     List<Pattern> patterns = Lists.newArrayListWithCapacity(5);
1:     Map<String, Integer> patternOrder = Maps.newHashMap();
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:670a7d2
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayInputStream;
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.nio.charset.Charset;
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     List<Pattern> patterns = new ArrayList<>(5);
0:     Map<String, Integer> patternOrder = new HashMap<>();
author:smarthi
-------------------------------------------------------------------------------
commit:74078b6
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Joiner;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.BytesWritable;
1: import org.apache.hadoop.io.Text;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.nio.charset.Charset;
0: import java.util.Arrays;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import static org.apache.mahout.text.SequenceFilesFromMailArchives.BODY_OPTION;
1: import static org.apache.mahout.text.SequenceFilesFromMailArchives.BODY_SEPARATOR_OPTION;
1: import static org.apache.mahout.text.SequenceFilesFromMailArchives.CHARSET_OPTION;
1: import static org.apache.mahout.text.SequenceFilesFromMailArchives.CHUNK_SIZE_OPTION;
1: import static org.apache.mahout.text.SequenceFilesFromMailArchives.FROM_OPTION;
1: import static org.apache.mahout.text.SequenceFilesFromMailArchives.KEY_PREFIX_OPTION;
1: import static org.apache.mahout.text.SequenceFilesFromMailArchives.QUOTED_REGEX_OPTION;
1: import static org.apache.mahout.text.SequenceFilesFromMailArchives.REFERENCES_OPTION;
1: import static org.apache.mahout.text.SequenceFilesFromMailArchives.SEPARATOR_OPTION;
1: import static org.apache.mahout.text.SequenceFilesFromMailArchives.STRIP_QUOTED_OPTION;
1: import static org.apache.mahout.text.SequenceFilesFromMailArchives.SUBJECT_OPTION;
1: import static org.apache.mahout.text.SequenceFilesFromMailArchives.TO_OPTION;
1: 
1: 
1:     "^From \\S+@\\S.*\\d{4}$", Pattern.CASE_INSENSITIVE);
1:     "^message-id: <(.*)>$", Pattern.CASE_INSENSITIVE);
1: 
1:     Configuration configuration = context.getConfiguration();
1: 
1:     options.setPrefix(configuration.get(KEY_PREFIX_OPTION[1], ""));
1: 
1:     if (!configuration.get(CHUNK_SIZE_OPTION[0], "").equals("")) {
1:       options.setChunkSize(configuration.getInt(CHUNK_SIZE_OPTION[0], 64));
1: 
1:     if (!configuration.get(CHARSET_OPTION[0], "").equals("")) {
1:       Charset charset = Charset.forName(configuration.get(CHARSET_OPTION[0], "UTF-8"));
1: 
0:     Map<String, Integer> patternOrder = Maps.newHashMap();
1:     if (!configuration.get(FROM_OPTION[1], "").equals("")) {
1:     if (!configuration.get(TO_OPTION[1], "").equals("")) {
1:     if (!configuration.get(REFERENCES_OPTION[1], "").equals("")) {
1: 
1:     if (!configuration.get(SUBJECT_OPTION[1], "").equals("")) {
1:       patternOrder.put(MailOptions.SUBJECT, order += 1);
1: 
1:     options.setStripQuotedText(configuration.getBoolean(STRIP_QUOTED_OPTION[1], false));
1: 
1: 
1:     options.setIncludeBody(configuration.getBoolean(BODY_OPTION[1], false));
1: 
1:     if (!configuration.get(SEPARATOR_OPTION[1], "").equals("")) {
1:       options.setSeparator(configuration.get(SEPARATOR_OPTION[1], ""));
1:     if (!configuration.get(BODY_SEPARATOR_OPTION[1], "").equals("")) {
1:       options.setBodySeparator(configuration.get(BODY_SEPARATOR_OPTION[1], ""));
1:     if (!configuration.get(QUOTED_REGEX_OPTION[1], "").equals("")) {
1:       options.setQuotedTextPattern(Pattern.compile(configuration.get(QUOTED_REGEX_OPTION[1], "")));
1: 
1:   public long parseMailboxLineByLine(String filename, InputStream mailBoxInputStream, Context context)
/////////////////////////////////////////////////////////////////////////
1:       Matcher[] matches = new Matcher[options.getPatternsToMatch().length];
1:       for (int i = 0; i < matches.length; i++) {
1:         matches[i] = options.getPatternsToMatch()[i].matcher("");
1: 
1: 
1:       for (String nextLine : new FileLineIterable(mailBoxInputStream, options.getCharset(), false, filename)) {
1:           for (int i = 0; i < matches.length; i++) {
1:             Matcher matcher = matches[i];
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     return Joiner.on(Path.SEPARATOR).join(Lists.newArrayList(prefix, mboxFilename, messageId).iterator());
1: 
1:     String matchesString = Joiner.on(separator).useForNull("").join(Arrays.asList(matches).iterator());
1:     contents.append(matchesString).append(separator).append(body);
/////////////////////////////////////////////////////////////////////////
1:     parseMailboxLineByLine(relativeFilePath, is, context);
commit:22533ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.HadoopUtil;
/////////////////////////////////////////////////////////////////////////
1:     String relativeFilePath = HadoopUtil.calcRelativeFilePath(configuration, filePath);
commit:d711ac1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.text;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.File;
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.nio.charset.Charset;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import com.google.common.collect.Lists;
0: import com.google.common.collect.Maps;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;
1: import org.apache.mahout.common.iterator.FileLineIterable;
1: import org.apache.mahout.utils.email.MailOptions;
1: import org.apache.mahout.utils.email.MailProcessor;
0: import org.apache.hadoop.fs.FileStatus;
0: import org.apache.hadoop.fs.FileSystem;
0: import org.apache.hadoop.fs.Path;
0: import org.apache.hadoop.io.BytesWritable;
0: import org.apache.hadoop.io.Text;
1: 
1: /**
1:  * 
1:  * Map Class for the SequenceFilesFromMailArchives job
1:  * 
1:  */
1: public class SequenceFilesFromMailArchivesMapper extends Mapper<IntWritable, BytesWritable, Text, Text> {
1:   
1:   private Text outKey = new Text();
1:   private Text outValue = new Text();
1:   
1:   private static final Pattern MESSAGE_START = Pattern.compile(
0:       "^From \\S+@\\S.*\\d{4}$", Pattern.CASE_INSENSITIVE);
1:   private static final Pattern MESSAGE_ID_PREFIX = Pattern.compile(
0:       "^message-id: <(.*)>$", Pattern.CASE_INSENSITIVE);
1: 
1:   private MailOptions options;
1:   
1:   @Override
1:   public void setup(Context context) throws IOException, InterruptedException {
1: 
0:     Configuration conf = context.getConfiguration();
1:     // absorb all of the options into the MailOptions object
1:     
1:     this.options = new MailOptions();
1: 
0:     options.setPrefix(conf.get("prefix", ""));
1:     
0:     if (!conf.get("chunkSize", "").equals("")) {
0:       options.setChunkSize(conf.getInt("chunkSize", 64));
1:     }
1:     
0:     if (!conf.get("charset", "").equals("")) {
0:       Charset charset = Charset.forName(conf.get("charset", "UTF-8"));
1:       options.setCharset(charset);
1:     } else {
1:       Charset charset = Charset.forName("UTF-8");
1:       options.setCharset(charset);
1:     }
1:     
0:     List<Pattern> patterns = Lists.newArrayListWithCapacity(5);
1:     // patternOrder is used downstream so that we can know what order the
1:     // text is in instead
1:     // of encoding it in the string, which
1:     // would require more processing later to remove it pre feature
1:     // selection.
0:     Map<String,Integer> patternOrder = Maps.newHashMap();
1:     int order = 0;
1:     
0:     if (!conf.get("fromOpt", "").equals("")) {
1:       patterns.add(MailProcessor.FROM_PREFIX);
1:       patternOrder.put(MailOptions.FROM, order++);
1:     }
1: 
0:     if (!conf.get("toOpt", "").equals("")) {
1:       patterns.add(MailProcessor.TO_PREFIX);
1:       patternOrder.put(MailOptions.TO, order++);
1:     }
1: 
0:     if (!conf.get("refsOpt", "").equals("")) {
1:       patterns.add(MailProcessor.REFS_PREFIX);
1:       patternOrder.put(MailOptions.REFS, order++);
1:     }
1:     
0:     if (!conf.get("subjectOpt", "").equals("")) {
1:       patterns.add(MailProcessor.SUBJECT_PREFIX);
0:       patternOrder.put(MailOptions.SUBJECT, order++);
1:     }
1:     
0:     options.setStripQuotedText(conf.getBoolean("quotedOpt", false));
1:     
1:     options.setPatternsToMatch(patterns.toArray(new Pattern[patterns.size()]));
1:     options.setPatternOrder(patternOrder);
1:     
0:     options.setIncludeBody(conf.getBoolean("bodyOpt", false));
1:     
1:     options.setSeparator("\n");
0:     if (!conf.get("separatorOpt", "").equals("")) {
0:       options.setSeparator(conf.get("separatorOpt", ""));
1:     }
0:     if (!conf.get("bodySeparatorOpt", "").equals("")) {
0:       options.setBodySeparator(conf.get("bodySeparatorOpt", ""));
1:     }
0:     if (!conf.get("quotedRegexOpt", "").equals("")) {
0:       options.setQuotedTextPattern(Pattern.compile(conf.get("quotedRegexOpt", "")));
1:     }
1: 
1:   }
1:   
0:   public long parseMboxLineByLine(String filename, InputStream mboxInputStream, Context context)
1:     throws IOException, InterruptedException {
1:     long messageCount = 0;
1:     try {
1:       StringBuilder contents = new StringBuilder();
1:       StringBuilder body = new StringBuilder();
1:       Matcher messageIdMatcher = MESSAGE_ID_PREFIX.matcher("");
1:       Matcher messageBoundaryMatcher = MESSAGE_START.matcher("");
1:       String[] patternResults = new String[options.getPatternsToMatch().length];
0:       Matcher[] matchers = new Matcher[options.getPatternsToMatch().length];
0:       for (int i = 0; i < matchers.length; i++) {
0:         matchers[i] = options.getPatternsToMatch()[i].matcher("");
1:       }
1:       
1:       String messageId = null;
1:       boolean inBody = false;
1:       Pattern quotedTextPattern = options.getQuotedTextPattern();
1:       
0:       for (String nextLine : new FileLineIterable(mboxInputStream, options.getCharset(), false, filename)) {
1:         if (!options.isStripQuotedText() || !quotedTextPattern.matcher(nextLine).find()) {
0:           for (int i = 0; i < matchers.length; i++) {
0:             Matcher matcher = matchers[i];
1:             matcher.reset(nextLine);
1:             if (matcher.matches()) {
1:               patternResults[i] = matcher.group(1);
1:             }
1:           }
1: 
1:           // only start appending body content after we've seen a message ID
1:           if (messageId != null) {
1:             // first, see if we hit the end of the message
1:             messageBoundaryMatcher.reset(nextLine);
1:             if (messageBoundaryMatcher.matches()) {
1:               // done parsing this message ... write it out
1:               String key = generateKey(filename, options.getPrefix(), messageId);
1:               // if this ordering changes, then also change
1:               // FromEmailToDictionaryMapper
1:               writeContent(options.getSeparator(), contents, body, patternResults);
1: 
1:               this.outKey.set(key);
1:               this.outValue.set(contents.toString());
1:               context.write(this.outKey, this.outValue);
1:               contents.setLength(0); // reset the buffer
1:               body.setLength(0);
1:               messageId = null;
1:               inBody = false;
1:             } else {
1:               if (inBody && options.isIncludeBody()) {
1:                 if (!nextLine.isEmpty()) {
1:                   body.append(nextLine).append(options.getBodySeparator());
1:                 }
1:               } else {
1:                 // first empty line we see after reading the message Id
1:                 // indicates that we are in the body ...
1:                 inBody = nextLine.isEmpty();
1:               }
1:             }
1:           } else {
1:             if (nextLine.length() > 14) {
1:               messageIdMatcher.reset(nextLine);
1:               if (messageIdMatcher.matches()) {
1:                 messageId = messageIdMatcher.group(1);
1:                 ++messageCount;
1:               }
1:             }
1:           }
1:         }
1:       }
1:       // write the last message in the file if available
1:       if (messageId != null) {
1:         String key = generateKey(filename, options.getPrefix(), messageId);
1:         writeContent(options.getSeparator(), contents, body, patternResults);
1:         
1:         this.outKey.set(key);
1:         this.outValue.set(contents.toString());
1:         context.write(this.outKey, this.outValue);
1:         contents.setLength(0); // reset the buffer
1:       }
1:     } catch (FileNotFoundException ignored) {
1: 
1:     }
0:     // TODO: report exceptions and continue;
1:     return messageCount;
1:   }
1:   
1:   protected static String generateKey(String mboxFilename, String prefix, String messageId) {
0:     return prefix + File.separator + mboxFilename + File.separator + messageId;
1:   }
1:   
1:   private static void writeContent(String separator, StringBuilder contents, CharSequence body, String[] matches) {
0:     for (String match : matches) {
0:       if (match != null) {
0:         contents.append(match).append(separator);
1:       } else {
0:         contents.append("").append(separator);
1:       }
1:     }
0:     contents.append(body);
1:   }
1:   
0:   public static String calcRelativeFilePath(Configuration conf, Path filePath) throws IOException {
0:     FileSystem fs = filePath.getFileSystem(conf);
0:     FileStatus fst = fs.getFileStatus(filePath);
0:     String currentPath = fst.getPath().toString().replaceFirst("file:", "");
1: 
0:     String basePath = conf.get("baseinputpath");
0:     if (!basePath.endsWith("/")) {
0:       basePath += "/";
1:     }
0:     basePath = basePath.replaceFirst("file:", "");
0:     String[] parts = currentPath.split(basePath);
1: 
0:     String hdfsStuffRemoved = currentPath; // default value
0:     if (parts.length == 2) {
0:       hdfsStuffRemoved = parts[1];
0:     } else if (parts.length == 1) {
0:       hdfsStuffRemoved = parts[0];
1:     }
0:     return hdfsStuffRemoved;
1:   }
1: 
1:   public void map(IntWritable key, BytesWritable value, Context context)
1:     throws IOException, InterruptedException {
1:     Configuration configuration = context.getConfiguration();
1:     Path filePath = ((CombineFileSplit) context.getInputSplit()).getPath(key.get());
0:     String relativeFilePath = calcRelativeFilePath(configuration, filePath);
1:     ByteArrayInputStream is = new ByteArrayInputStream(value.getBytes());
0:     parseMboxLineByLine(relativeFilePath, is, context);
1:   }
1: }
============================================================================