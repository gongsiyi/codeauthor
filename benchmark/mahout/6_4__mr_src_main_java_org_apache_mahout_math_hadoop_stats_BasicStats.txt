2:d8e91f9: /**
1:d8e91f9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d8e91f9:  * contributor license agreements.  See the NOTICE file distributed with
1:d8e91f9:  * this work for additional information regarding copyright ownership.
1:d8e91f9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d8e91f9:  * (the "License"); you may not use this file except in compliance with
1:d8e91f9:  * the License.  You may obtain a copy of the License at
1:d8e91f9:  *
1:d8e91f9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d8e91f9:  *
1:d8e91f9:  * Unless required by applicable law or agreed to in writing, software
1:d8e91f9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d8e91f9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d8e91f9:  * See the License for the specific language governing permissions and
1:d8e91f9:  * limitations under the License.
2:d8e91f9:  */
12:d8e91f9: 
1:564c3e1: package org.apache.mahout.math.hadoop.stats;
1:d8e91f9: 
1:d8e91f9: import org.apache.hadoop.conf.Configuration;
1:d8e91f9: import org.apache.hadoop.fs.Path;
1:d8e91f9: import org.apache.hadoop.io.DoubleWritable;
1:d8e91f9: import org.apache.hadoop.io.IntWritable;
1:d8e91f9: import org.apache.hadoop.io.Writable;
1:d8e91f9: import org.apache.hadoop.mapreduce.Job;
1:d8e91f9: import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
1:d8e91f9: import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
1:d8e91f9: import org.apache.mahout.common.HadoopUtil;
1:d8e91f9: import org.apache.mahout.common.Pair;
1:d8e91f9: import org.apache.mahout.common.iterator.sequencefile.PathType;
1:d8e91f9: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;
1:d8e91f9: 
1:d8e91f9: import java.io.IOException;
1:d8e91f9: 
1:d8e91f9: /**
1:d8e91f9:  * Methods for calculating basic stats (mean, variance, stdDev, etc.) in map/reduce
1:d8e91f9:  */
1:564c3e1: public final class BasicStats {
1:d8e91f9: 
1:564c3e1:   private BasicStats() {
1:564c3e1:   }
1:d8e91f9: 
1:d8e91f9:   /**
1:d8e91f9:    * Calculate the variance of values stored as
1:d8e91f9:    *
1:d8e91f9:    * @param input    The input file containing the key and the count
1:d8e91f9:    * @param output   The output to store the intermediate values
1:d8e91f9:    * @param baseConf
1:d8e91f9:    * @return The variance (based on sample estimation)
1:d8e91f9:    */
1:d8e91f9:   public static double variance(Path input, Path output,
1:6d16230:                                 Configuration baseConf)
1:6d16230:     throws IOException, InterruptedException, ClassNotFoundException {
1:6d16230:     VarianceTotals varianceTotals = computeVarianceTotals(input, output, baseConf);
1:d8e91f9:     return varianceTotals.computeVariance();
11:d8e91f9:   }
1:d8e91f9: 
1:d8e91f9:   /**
1:d8e91f9:    * Calculate the variance by a predefined mean of values stored as
1:d8e91f9:    *
1:d8e91f9:    * @param input    The input file containing the key and the count
1:d8e91f9:    * @param output   The output to store the intermediate values
1:d8e91f9:    * @param mean The mean based on which to compute the variance
1:d8e91f9:    * @param baseConf
1:d8e91f9:    * @return The variance (based on sample estimation)
1:d8e91f9:    */
1:d8e91f9:   public static double varianceForGivenMean(Path input, Path output, double mean,
1:6d16230:                                 Configuration baseConf)
1:6d16230:     throws IOException, InterruptedException, ClassNotFoundException {
1:6d16230:     VarianceTotals varianceTotals = computeVarianceTotals(input, output, baseConf);
1:d8e91f9:     return varianceTotals.computeVarianceForGivenMean(mean);
1:d8e91f9:   }
1:d8e91f9: 
1:d8e91f9:   private static VarianceTotals computeVarianceTotals(Path input, Path output,
3:d8e91f9:                                 Configuration baseConf) throws IOException, InterruptedException,
3:d8e91f9:           ClassNotFoundException {
1:d8e91f9:     Configuration conf = new Configuration(baseConf);
1:d8e91f9:     conf.set("io.serializations",
1:d8e91f9:                     "org.apache.hadoop.io.serializer.JavaSerialization,"
1:d8e91f9:                             + "org.apache.hadoop.io.serializer.WritableSerialization");
1:4841efb:     Job job = HadoopUtil.prepareJob(input, output, SequenceFileInputFormat.class,
1:4841efb:         StandardDeviationCalculatorMapper.class, IntWritable.class, DoubleWritable.class,
1:4841efb:         StandardDeviationCalculatorReducer.class, IntWritable.class, DoubleWritable.class,
1:4841efb:         SequenceFileOutputFormat.class, conf);
1:d8e91f9:     HadoopUtil.delete(conf, output);
1:d8e91f9:     job.setCombinerClass(StandardDeviationCalculatorReducer.class);
1:7c2b664:     boolean succeeded = job.waitForCompletion(true);
1:7c2b664:     if (!succeeded) {
1:7c2b664:       throw new IllegalStateException("Job failed!");
1:7c2b664:     }
1:4841efb: 
1:d8e91f9:     // Now extract the computed sum
1:d8e91f9:     Path filesPattern = new Path(output, "part-*");
1:d8e91f9:     double sumOfSquares = 0;
1:d8e91f9:     double sum = 0;
1:d8e91f9:     double totalCount = 0;
1:87c15be:     for (Pair<Writable, Writable> record : new SequenceFileDirIterable<>(
1:d8e91f9:             filesPattern, PathType.GLOB, null, null, true, conf)) {
1:4841efb: 
1:d8e91f9:       int key = ((IntWritable) record.getFirst()).get();
1:d8e91f9:       if (key == StandardDeviationCalculatorMapper.SUM_OF_SQUARES.get()) {
1:d8e91f9:         sumOfSquares += ((DoubleWritable) record.getSecond()).get();
1:d8e91f9:       } else if (key == StandardDeviationCalculatorMapper.TOTAL_COUNT
1:d8e91f9:               .get()) {
1:d8e91f9:         totalCount += ((DoubleWritable) record.getSecond()).get();
1:d8e91f9:       } else if (key == StandardDeviationCalculatorMapper.SUM
1:d8e91f9:               .get()) {
1:d8e91f9:         sum += ((DoubleWritable) record.getSecond()).get();
1:d8e91f9:       }
1:d8e91f9:     }
1:4841efb: 
1:d8e91f9:     VarianceTotals varianceTotals = new VarianceTotals();
1:d8e91f9:     varianceTotals.setSum(sum);
1:d8e91f9:     varianceTotals.setSumOfSquares(sumOfSquares);
1:d8e91f9:     varianceTotals.setTotalCount(totalCount);
1:4841efb: 
1:d8e91f9:     return varianceTotals;
1:d8e91f9:   }
1:d8e91f9: 
1:d8e91f9:   /**
1:d8e91f9:    * Calculate the standard deviation
1:d8e91f9:    *
1:d8e91f9:    * @param input    The input file containing the key and the count
1:d8e91f9:    * @param output   The output file to write the counting results to
1:d8e91f9:    * @param baseConf The base configuration
1:d8e91f9:    * @return The standard deviation
1:d8e91f9:    */
1:d8e91f9:   public static double stdDev(Path input, Path output,
1:d8e91f9:                               Configuration baseConf) throws IOException, InterruptedException,
1:d8e91f9:           ClassNotFoundException {
1:d8e91f9:     return Math.sqrt(variance(input, output, baseConf));
1:d8e91f9:   }
1:4841efb: 
1:d8e91f9:   /**
1:d8e91f9:    * Calculate the standard deviation given a predefined mean
1:d8e91f9:    *
1:d8e91f9:    * @param input    The input file containing the key and the count
1:d8e91f9:    * @param output   The output file to write the counting results to
1:d8e91f9:    * @param mean The mean based on which to compute the standard deviation
1:d8e91f9:    * @param baseConf The base configuration
1:d8e91f9:    * @return The standard deviation
1:d8e91f9:    */
1:d8e91f9:   public static double stdDevForGivenMean(Path input, Path output, double mean,
1:d8e91f9:                               Configuration baseConf) throws IOException, InterruptedException,
1:d8e91f9:           ClassNotFoundException {
1:d8e91f9:     return Math.sqrt(varianceForGivenMean(input, output, mean, baseConf));
1:d8e91f9:   }
1:d8e91f9: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     for (Pair<Writable, Writable> record : new SequenceFileDirIterable<>(
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:                                 Configuration baseConf)
1:     throws IOException, InterruptedException, ClassNotFoundException {
1:     VarianceTotals varianceTotals = computeVarianceTotals(input, output, baseConf);
/////////////////////////////////////////////////////////////////////////
1:                                 Configuration baseConf)
1:     throws IOException, InterruptedException, ClassNotFoundException {
1:     VarianceTotals varianceTotals = computeVarianceTotals(input, output, baseConf);
commit:4841efb
/////////////////////////////////////////////////////////////////////////
0:   VarianceTotals varianceTotals = computeVarianceTotals(input, output, baseConf);
1: 
/////////////////////////////////////////////////////////////////////////
0:   VarianceTotals varianceTotals = computeVarianceTotals(input, output, baseConf);
1: 
/////////////////////////////////////////////////////////////////////////
1:     Job job = HadoopUtil.prepareJob(input, output, SequenceFileInputFormat.class,
1:         StandardDeviationCalculatorMapper.class, IntWritable.class, DoubleWritable.class,
1:         StandardDeviationCalculatorReducer.class, IntWritable.class, DoubleWritable.class,
1:         SequenceFileOutputFormat.class, conf);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:7c2b664
/////////////////////////////////////////////////////////////////////////
1:     boolean succeeded = job.waitForCompletion(true);
1:     if (!succeeded) {
1:       throw new IllegalStateException("Job failed!");
1:     }
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.stats;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public final class BasicStats {
1:   private BasicStats() {
1:   }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:d8e91f9
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.math.hadoop.stats;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.DoubleWritable;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.hadoop.mapreduce.Job;
0: import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
1: import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
0: import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
1: import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
1: import org.apache.mahout.common.HadoopUtil;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.iterator.sequencefile.PathType;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * Methods for calculating basic stats (mean, variance, stdDev, etc.) in map/reduce
1:  */
0: public class BasicStats {
1: 
1: 	/**
0: 	 * Holds the total values needed to compute mean and standard deviation
0: 	 * Provides methods for their computation
1: 	 */
0: 	public static class VarianceTotals {
0: 		private double sumOfSquares = 0;
0: 		private double sum = 0;
0: 		private double totalCount = 0;
1: 		
0: 		public double getSumOfSquares() {
0: 			return sumOfSquares;
1: 		}
0: 		public void setSumOfSquares(double sumOfSquares) {
0: 			this.sumOfSquares = sumOfSquares;
1: 		}
0: 		public double getSum() {
0: 			return sum;
1: 		}
0: 		public void setSum(double sum) {
0: 			this.sum = sum;
1: 		}
0: 		public double getTotalCount() {
0: 			return totalCount;
1: 		}
0: 		public void setTotalCount(double totalCount) {
0: 			this.totalCount = totalCount;
1: 		}
1: 		
0: 		public double computeMean() {
0: 			return sum/totalCount;
1: 		}
1: 		
0: 		public double computeVariance() {
0: 			return ((totalCount * sumOfSquares) - (sum * sum))
0:             / (totalCount * (totalCount - 1.0D));
1: 		}
1: 		
0: 		public double computeVarianceForGivenMean(double mean) {
0: 			return (sumOfSquares - totalCount*(mean * mean))
0:             / (totalCount - 1.0D);
1: 		}
1: 	}
1: 
1:   /**
1:    * Calculate the variance of values stored as
1:    *
1:    * @param input    The input file containing the key and the count
1:    * @param output   The output to store the intermediate values
1:    * @param baseConf
1:    * @return The variance (based on sample estimation)
0:    * @throws IOException
0:    * @throws InterruptedException
0:    * @throws ClassNotFoundException
1:    */
1:   public static double variance(Path input, Path output,
1:                                 Configuration baseConf) throws IOException, InterruptedException,
1:           ClassNotFoundException {
1: 
0: 	VarianceTotals varianceTotals = computeVarianceTotals(input, output, baseConf);
1:     return varianceTotals.computeVariance();
1:   }
1:   
1:   /**
1:    * Calculate the variance by a predefined mean of values stored as
1:    *
1:    * @param input    The input file containing the key and the count
1:    * @param output   The output to store the intermediate values
1:    * @param mean The mean based on which to compute the variance
1:    * @param baseConf
1:    * @return The variance (based on sample estimation)
0:    * @throws IOException
0:    * @throws InterruptedException
0:    * @throws ClassNotFoundException
1:    */
1:   public static double varianceForGivenMean(Path input, Path output, double mean,
1:                                 Configuration baseConf) throws IOException, InterruptedException,
1:           ClassNotFoundException {
1: 
0: 	VarianceTotals varianceTotals = computeVarianceTotals(input, output, baseConf);
1:     return varianceTotals.computeVarianceForGivenMean(mean);
1:   }
1:   
1:   private static VarianceTotals computeVarianceTotals(Path input, Path output,
1:                                 Configuration baseConf) throws IOException, InterruptedException,
1:           ClassNotFoundException {
1:     Configuration conf = new Configuration(baseConf);
1:     conf.set("io.serializations",
1:                     "org.apache.hadoop.io.serializer.JavaSerialization,"
1:                             + "org.apache.hadoop.io.serializer.WritableSerialization");
0:     Job job = HadoopUtil.prepareJob(input, output, SequenceFileInputFormat.class, StandardDeviationCalculatorMapper.class,
0:             IntWritable.class, DoubleWritable.class, StandardDeviationCalculatorReducer.class,
0:             IntWritable.class, DoubleWritable.class, SequenceFileOutputFormat.class, conf);
1:     HadoopUtil.delete(conf, output);
1:     job.setCombinerClass(StandardDeviationCalculatorReducer.class);
0:     job.waitForCompletion(true);
1: 
1:     // Now extract the computed sum
1:     Path filesPattern = new Path(output, "part-*");
1:     double sumOfSquares = 0;
1:     double sum = 0;
1:     double totalCount = 0;
0:     for (Pair<Writable, Writable> record : new SequenceFileDirIterable<Writable, Writable>(
1:             filesPattern, PathType.GLOB, null, null, true, conf)) {
1: 
1:       int key = ((IntWritable) record.getFirst()).get();
1:       if (key == StandardDeviationCalculatorMapper.SUM_OF_SQUARES.get()) {
1:         sumOfSquares += ((DoubleWritable) record.getSecond()).get();
1:       } else if (key == StandardDeviationCalculatorMapper.TOTAL_COUNT
1:               .get()) {
1:         totalCount += ((DoubleWritable) record.getSecond()).get();
1:       } else if (key == StandardDeviationCalculatorMapper.SUM
1:               .get()) {
1:         sum += ((DoubleWritable) record.getSecond()).get();
1:       }
1:     }
1:     
1:     VarianceTotals varianceTotals = new VarianceTotals();
1:     varianceTotals.setSum(sum);
1:     varianceTotals.setSumOfSquares(sumOfSquares);
1:     varianceTotals.setTotalCount(totalCount);
1:     
1:     return varianceTotals;
1:   }
1: 
1:   /**
1:    * Calculate the standard deviation
1:    *
1:    * @param input    The input file containing the key and the count
1:    * @param output   The output file to write the counting results to
1:    * @param baseConf The base configuration
1:    * @return The standard deviation
0:    * @throws java.io.IOException
0:    * @throws InterruptedException
0:    * @throws ClassNotFoundException
1:    */
1:   public static double stdDev(Path input, Path output,
1:                               Configuration baseConf) throws IOException, InterruptedException,
1:           ClassNotFoundException {
1:     return Math.sqrt(variance(input, output, baseConf));
1:   }
1:   
1:   /**
1:    * Calculate the standard deviation given a predefined mean
1:    *
1:    * @param input    The input file containing the key and the count
1:    * @param output   The output file to write the counting results to
1:    * @param mean The mean based on which to compute the standard deviation
1:    * @param baseConf The base configuration
1:    * @return The standard deviation
0:    * @throws java.io.IOException
0:    * @throws InterruptedException
0:    * @throws ClassNotFoundException
1:    */
1:   public static double stdDevForGivenMean(Path input, Path output, double mean,
1:                               Configuration baseConf) throws IOException, InterruptedException,
1:           ClassNotFoundException {
1:     return Math.sqrt(varianceForGivenMean(input, output, mean, baseConf));
1:   }
1: }
============================================================================