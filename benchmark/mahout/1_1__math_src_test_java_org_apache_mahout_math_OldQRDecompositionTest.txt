1:ace4c35: /*
1:ace4c35:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ace4c35:  * contributor license agreements.  See the NOTICE file distributed with
1:ace4c35:  * this work for additional information regarding copyright ownership.
1:ace4c35:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ace4c35:  * (the "License"); you may not use this file except in compliance with
1:ace4c35:  * the License.  You may obtain a copy of the License at
1:ace4c35:  *
1:ace4c35:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ace4c35:  *
1:ace4c35:  * Unless required by applicable law or agreed to in writing, software
1:ace4c35:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ace4c35:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ace4c35:  * See the License for the specific language governing permissions and
1:ace4c35:  * limitations under the License.
1:ace4c35:  */
1:ace4c35: 
1:ace4c35: package org.apache.mahout.math;
1:ace4c35: 
1:ace4c35: import org.apache.mahout.math.function.DoubleDoubleFunction;
1:ace4c35: import org.apache.mahout.math.function.Functions;
1:ace4c35: import org.junit.Test;
1:ace4c35: 
1:ace4c35: public final class OldQRDecompositionTest extends MahoutTestCase {
1:ace4c35:   @Test
1:ace4c35:   public void rank1() {
1:ace4c35:     Matrix x = new DenseMatrix(3, 3);
1:ace4c35:     x.viewRow(0).assign(new double[]{1, 2, 3});
1:ace4c35:     x.viewRow(1).assign(new double[]{2, 4, 6});
1:ace4c35:     x.viewRow(2).assign(new double[]{3, 6, 9});
1:ace4c35: 
1:ace4c35:     OldQRDecomposition qr = new OldQRDecomposition(x);
1:ace4c35:     assertFalse(qr.hasFullRank());
1:ace4c35:     assertEquals(0, new DenseVector(new double[]{3.741657, 7.483315, 11.22497}).aggregate(qr.getR().viewRow(0), Functions.PLUS, new DoubleDoubleFunction() {
1:ace4c35:       @Override
1:ace4c35:       public double apply(double arg1, double arg2) {
1:ace4c35:         return Math.abs(arg1) - Math.abs(arg2);
1:ace4c35:       }
1:ace4c35:     }), 1.0e-5);
1:ace4c35:   }
1:ace4c35: 
1:ace4c35:   @Test
1:ace4c35:   public void fullRankTall() {
1:ace4c35:     Matrix x = matrix();
1:ace4c35:     OldQRDecomposition qr = new OldQRDecomposition(x);
1:ace4c35:     assertTrue(qr.hasFullRank());
1:ace4c35:     Matrix rRef = reshape(new double[]{
1:ace4c35:             -2.99129686445138, 0, 0, 0, 0,
1:ace4c35:             -0.0282260628674372, -2.38850244769059, 0, 0, 0,
1:ace4c35:             0.733739310355871, 1.48042000631646, 2.29051263117895, 0, 0,
1:ace4c35:             -0.0394082168269326, 0.282829484207801, -0.00438521041803086, -2.90823198084203, 0,
1:ace4c35:             0.923669647838536, 1.76679276072492, 0.637690104222683, -0.225890909498753, -1.35732293800944},
1:ace4c35:             5, 5);
1:ace4c35:     Matrix r = qr.getR();
1:ace4c35:     assertEquals(rRef, r, 1.0e-8);
1:ace4c35: 
1:ace4c35:     Matrix qRef = reshape(new double[]{
1:ace4c35:             -0.165178287646573, 0.0510035857637869, 0.13985915987379, -0.120173729496501,
1:ace4c35:             -0.453198314345324, 0.644400679630493, -0.503117990820608, 0.24968739845381,
1:ace4c35:             0.323968339146224, -0.465266080134262, 0.276508948773268, -0.687909700644343,
1:ace4c35:             0.0544048888907195, -0.0166677718378263, 0.171309755790717, 0.310339001630029,
1:ace4c35:             0.674790532821663, 0.0058166082200493, -0.381707516461884, 0.300504956413142,
1:ace4c35:             -0.105751091334003, 0.410450870871096, 0.31113446615821, 0.179338172684956,
1:ace4c35:             0.361951807617901, 0.763921725548796, 0.380327892605634, -0.287274944594054,
1:ace4c35:             0.0311604042556675, 0.0386096858143961, 0.0387156960650472, -0.232975755728917,
1:ace4c35:             0.0358178276684149, 0.173105775703199, 0.327321867815603, 0.328671945345279,
1:ace4c35:             -0.36015879836344, -0.444261660176044, 0.09438499563253, 0.646216148583769
1:ace4c35:     }, 8, 5);
1:ace4c35: 
1:ace4c35:     printMatrix("qRef", qRef);
1:ace4c35: 
1:ace4c35:     Matrix q = qr.getQ();
1:ace4c35:     printMatrix("q", q);
1:ace4c35: 
1:ace4c35:     assertEquals(qRef, q, 1.0e-8);
1:ace4c35: 
1:ace4c35:     Matrix x1 = qr.solve(reshape(new double[]{
1:ace4c35:             -0.0178247686747641, 0.68631714634098, -0.335464858468858, 1.50249941751569,
1:ace4c35:             -0.669901640772149, -0.977025038942455, -1.18857546169856, -1.24792900492054
1:ace4c35:     }, 8, 1));
1:ace4c35:     Matrix xref = reshape(new double[]{
1:ace4c35:             -0.0127440093664874, 0.655825940180799, -0.100755415991702, -0.0349559562697406,
1:ace4c35:             -0.190744297762028
1:ace4c35:     }, 5, 1);
1:ace4c35: 
1:ace4c35:     printMatrix("x1", x1);
1:ace4c35:     printMatrix("xref", xref);
1:ace4c35: 
1:ace4c35:     assertEquals(xref, x1, 1.0e-8);
1:ace4c35:   }
1:ace4c35: 
1:ace4c35:   @Test
1:ace4c35:   public void fullRankWide() {
1:ace4c35:     Matrix x = matrix().transpose();
1:ace4c35:     OldQRDecomposition qr = new OldQRDecomposition(x);
1:ace4c35:     assertFalse(qr.hasFullRank());
1:ace4c35:     Matrix rActual = qr.getR();
1:ace4c35: 
1:ace4c35:     Matrix rRef = reshape(new double[]{
1:ace4c35:             -2.42812464965842, 0, 0, 0, 0,
1:ace4c35:             0.303587286111356, -2.91663643494775, 0, 0, 0,
1:ace4c35:             -0.201812474153156, -0.765485720168378, 1.09989373598954, 0, 0,
1:ace4c35:             1.47980701097885, -0.637545820524326, -1.55519859337935, 0.844655127991726, 0,
1:ace4c35:             0.0248883129453161, 0.00115010570270549, -0.236340588891252, -0.092924118200147, 1.42910099545547,
1:ace4c35:             -1.1678472412429, 0.531245845248056, 0.351978196071514, -1.03241474816555, -2.20223861735426,
1:ace4c35:             -0.887809959067632, 0.189731251982918, -0.504321849233586, 0.490484123999836, 1.21266692336743,
1:ace4c35:             -0.633888169775463, 1.04738559065986, 0.284041239547031, 0.578183510077156, -0.942314870832456
1:ace4c35:     }, 5, 8);
1:ace4c35:     printMatrix("rRef", rRef);
1:ace4c35:     printMatrix("rActual", rActual);
1:ace4c35:     assertEquals(rRef, rActual, 1.0e-8);
1:ace4c35: 
1:ace4c35:     Matrix qRef = reshape(new double[]{
1:ace4c35:             -0.203489262374627, 0.316761677948356, -0.784155643293468, 0.394321494579, -0.29641971170211,
1:ace4c35:             0.0311283614803723, -0.34755265020736, 0.137138511478328, 0.848579887681972, 0.373287266507375,
1:ace4c35:             -0.39603700561249, -0.787812566647329, -0.377864833067864, -0.275080943427399, 0.0636764674878229,
1:ace4c35:             0.0763976893309043, -0.318551137554327, 0.286407036668598, 0.206004127289883, -0.876482672226889,
1:ace4c35:             0.89159476695423, -0.238213616975551, -0.376141107880836, -0.0794701657055114, 0.0227025098210165
1:ace4c35:     }, 5, 5);
1:ace4c35: 
1:ace4c35:     Matrix q = qr.getQ();
1:ace4c35: 
1:ace4c35:     printMatrix("qRef", qRef);
1:ace4c35:     printMatrix("q", q);
1:ace4c35: 
1:ace4c35:     assertEquals(qRef, q, 1.0e-8);
1:ace4c35: 
1:ace4c35:     Matrix x1 = qr.solve(b());
1:ace4c35:     Matrix xRef = reshape(new double[]{
1:ace4c35:             -0.182580239668147, -0.437233627652114, 0.138787653097464, 0.672934739896228, -0.131420217069083, 0, 0, 0
1:ace4c35:     }, 8, 1);
1:ace4c35: 
1:ace4c35:     printMatrix("xRef", xRef);
1:ace4c35:     printMatrix("x", x1);
1:ace4c35:     assertEquals(xRef, x1, 1.0e-8);
1:ace4c35:   }
1:ace4c35: 
1:ace4c35:   private static void assertEquals(Matrix ref, Matrix actual, double epsilon) {
1:ace4c35:     assertEquals(0, ref.minus(actual).aggregate(Functions.MAX, Functions.ABS), epsilon);
1:ace4c35:   }
1:ace4c35: 
1:ace4c35:   private static void printMatrix(String name, Matrix m) {
1:ace4c35:     int rows = m.numRows();
1:ace4c35:     int columns = m.numCols();
1:ace4c35:     System.out.printf("%s - %d x %d\n", name, rows, columns);
1:ace4c35:     for (int i = 0; i < rows; i++) {
1:ace4c35:       for (int j = 0; j < columns; j++) {
1:ace4c35:         System.out.printf("%10.5f", m.get(i, j));
1:ace4c35:       }
1:ace4c35:       System.out.printf("\n");
1:ace4c35:     }
1:ace4c35:     System.out.printf("\n");
1:ace4c35:     System.out.printf("\n");
1:ace4c35:   }
1:ace4c35: 
1:ace4c35:   private static Matrix matrix() {
1:ace4c35:     double[] values = {
1:ace4c35:             0.494097293912641, -0.152566866170993, -0.418360266395271, 0.359475300232312,
1:ace4c35:             1.35565069667582, -1.92759373242903, 1.50497526839076, -0.746889132087904,
1:ace4c35:             -0.769136838293565, 1.10984954080986, -0.664389974392489, 1.6464660350229,
1:ace4c35:             -0.11715420616969, 0.0216221197371269, -0.394972730980765, -0.748293157213142,
1:ace4c35:             1.90402764664962, -0.638042862848559, -0.362336344669668, -0.418261074380526,
1:ace4c35:             -0.494211543128429, 1.38828971158414, 0.597110366867923, 1.05341387608687,
1:ace4c35:             -0.957461740877418, -2.35528802598249, -1.03171458944128, 0.644319090271635,
1:ace4c35:             -0.0569108993041965, -0.14419465550881, -0.0456801828174936,
1:ace4c35:             0.754694392571835, 0.719744008628535, -1.17873249802301, -0.155887528905918,
1:ace4c35:             -1.5159868405466, 0.0918931582603128, 1.42179027361583, -0.100495054250176,
1:ace4c35:             0.0687986548485584
1:ace4c35:     };
1:ace4c35:     return reshape(values, 8, 5);
1:ace4c35:   }
1:ace4c35: 
1:ace4c35:   private static Matrix reshape(double[] values, int rows, int columns) {
1:ace4c35:     Matrix m = new DenseMatrix(rows, columns);
1:ace4c35:     int i = 0;
1:ace4c35:     for (double v : values) {
1:ace4c35:       m.set(i % rows, i / rows, v);
1:ace4c35:       i++;
1:ace4c35:     }
1:ace4c35:     return m;
1:ace4c35:   }
1:ace4c35: 
1:ace4c35:   private static Matrix b() {
1:ace4c35:     return reshape(new double[]
1:ace4c35:         {-0.0178247686747641, 0.68631714634098, -0.335464858468858, 1.50249941751569, -0.669901640772149}, 5, 1);
1:ace4c35:   }
1:ace4c35: }
============================================================================
author:Ted Dunning
-------------------------------------------------------------------------------
commit:ace4c35
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.math.function.DoubleDoubleFunction;
1: import org.apache.mahout.math.function.Functions;
1: import org.junit.Test;
1: 
1: public final class OldQRDecompositionTest extends MahoutTestCase {
1:   @Test
1:   public void rank1() {
1:     Matrix x = new DenseMatrix(3, 3);
1:     x.viewRow(0).assign(new double[]{1, 2, 3});
1:     x.viewRow(1).assign(new double[]{2, 4, 6});
1:     x.viewRow(2).assign(new double[]{3, 6, 9});
1: 
1:     OldQRDecomposition qr = new OldQRDecomposition(x);
1:     assertFalse(qr.hasFullRank());
1:     assertEquals(0, new DenseVector(new double[]{3.741657, 7.483315, 11.22497}).aggregate(qr.getR().viewRow(0), Functions.PLUS, new DoubleDoubleFunction() {
1:       @Override
1:       public double apply(double arg1, double arg2) {
1:         return Math.abs(arg1) - Math.abs(arg2);
1:       }
1:     }), 1.0e-5);
1:   }
1: 
1:   @Test
1:   public void fullRankTall() {
1:     Matrix x = matrix();
1:     OldQRDecomposition qr = new OldQRDecomposition(x);
1:     assertTrue(qr.hasFullRank());
1:     Matrix rRef = reshape(new double[]{
1:             -2.99129686445138, 0, 0, 0, 0,
1:             -0.0282260628674372, -2.38850244769059, 0, 0, 0,
1:             0.733739310355871, 1.48042000631646, 2.29051263117895, 0, 0,
1:             -0.0394082168269326, 0.282829484207801, -0.00438521041803086, -2.90823198084203, 0,
1:             0.923669647838536, 1.76679276072492, 0.637690104222683, -0.225890909498753, -1.35732293800944},
1:             5, 5);
1:     Matrix r = qr.getR();
1:     assertEquals(rRef, r, 1.0e-8);
1: 
1:     Matrix qRef = reshape(new double[]{
1:             -0.165178287646573, 0.0510035857637869, 0.13985915987379, -0.120173729496501,
1:             -0.453198314345324, 0.644400679630493, -0.503117990820608, 0.24968739845381,
1:             0.323968339146224, -0.465266080134262, 0.276508948773268, -0.687909700644343,
1:             0.0544048888907195, -0.0166677718378263, 0.171309755790717, 0.310339001630029,
1:             0.674790532821663, 0.0058166082200493, -0.381707516461884, 0.300504956413142,
1:             -0.105751091334003, 0.410450870871096, 0.31113446615821, 0.179338172684956,
1:             0.361951807617901, 0.763921725548796, 0.380327892605634, -0.287274944594054,
1:             0.0311604042556675, 0.0386096858143961, 0.0387156960650472, -0.232975755728917,
1:             0.0358178276684149, 0.173105775703199, 0.327321867815603, 0.328671945345279,
1:             -0.36015879836344, -0.444261660176044, 0.09438499563253, 0.646216148583769
1:     }, 8, 5);
1: 
1:     printMatrix("qRef", qRef);
1: 
1:     Matrix q = qr.getQ();
1:     printMatrix("q", q);
1: 
1:     assertEquals(qRef, q, 1.0e-8);
1: 
1:     Matrix x1 = qr.solve(reshape(new double[]{
1:             -0.0178247686747641, 0.68631714634098, -0.335464858468858, 1.50249941751569,
1:             -0.669901640772149, -0.977025038942455, -1.18857546169856, -1.24792900492054
1:     }, 8, 1));
1:     Matrix xref = reshape(new double[]{
1:             -0.0127440093664874, 0.655825940180799, -0.100755415991702, -0.0349559562697406,
1:             -0.190744297762028
1:     }, 5, 1);
1: 
1:     printMatrix("x1", x1);
1:     printMatrix("xref", xref);
1: 
1:     assertEquals(xref, x1, 1.0e-8);
1:   }
1: 
1:   @Test
1:   public void fullRankWide() {
1:     Matrix x = matrix().transpose();
1:     OldQRDecomposition qr = new OldQRDecomposition(x);
1:     assertFalse(qr.hasFullRank());
1:     Matrix rActual = qr.getR();
1: 
1:     Matrix rRef = reshape(new double[]{
1:             -2.42812464965842, 0, 0, 0, 0,
1:             0.303587286111356, -2.91663643494775, 0, 0, 0,
1:             -0.201812474153156, -0.765485720168378, 1.09989373598954, 0, 0,
1:             1.47980701097885, -0.637545820524326, -1.55519859337935, 0.844655127991726, 0,
1:             0.0248883129453161, 0.00115010570270549, -0.236340588891252, -0.092924118200147, 1.42910099545547,
1:             -1.1678472412429, 0.531245845248056, 0.351978196071514, -1.03241474816555, -2.20223861735426,
1:             -0.887809959067632, 0.189731251982918, -0.504321849233586, 0.490484123999836, 1.21266692336743,
1:             -0.633888169775463, 1.04738559065986, 0.284041239547031, 0.578183510077156, -0.942314870832456
1:     }, 5, 8);
1:     printMatrix("rRef", rRef);
1:     printMatrix("rActual", rActual);
1:     assertEquals(rRef, rActual, 1.0e-8);
1: 
1:     Matrix qRef = reshape(new double[]{
1:             -0.203489262374627, 0.316761677948356, -0.784155643293468, 0.394321494579, -0.29641971170211,
1:             0.0311283614803723, -0.34755265020736, 0.137138511478328, 0.848579887681972, 0.373287266507375,
1:             -0.39603700561249, -0.787812566647329, -0.377864833067864, -0.275080943427399, 0.0636764674878229,
1:             0.0763976893309043, -0.318551137554327, 0.286407036668598, 0.206004127289883, -0.876482672226889,
1:             0.89159476695423, -0.238213616975551, -0.376141107880836, -0.0794701657055114, 0.0227025098210165
1:     }, 5, 5);
1: 
1:     Matrix q = qr.getQ();
1: 
1:     printMatrix("qRef", qRef);
1:     printMatrix("q", q);
1: 
1:     assertEquals(qRef, q, 1.0e-8);
1: 
1:     Matrix x1 = qr.solve(b());
1:     Matrix xRef = reshape(new double[]{
1:             -0.182580239668147, -0.437233627652114, 0.138787653097464, 0.672934739896228, -0.131420217069083, 0, 0, 0
1:     }, 8, 1);
1: 
1:     printMatrix("xRef", xRef);
1:     printMatrix("x", x1);
1:     assertEquals(xRef, x1, 1.0e-8);
1:   }
1: 
1:   private static void assertEquals(Matrix ref, Matrix actual, double epsilon) {
1:     assertEquals(0, ref.minus(actual).aggregate(Functions.MAX, Functions.ABS), epsilon);
1:   }
1: 
1:   private static void printMatrix(String name, Matrix m) {
1:     int rows = m.numRows();
1:     int columns = m.numCols();
1:     System.out.printf("%s - %d x %d\n", name, rows, columns);
1:     for (int i = 0; i < rows; i++) {
1:       for (int j = 0; j < columns; j++) {
1:         System.out.printf("%10.5f", m.get(i, j));
1:       }
1:       System.out.printf("\n");
1:     }
1:     System.out.printf("\n");
1:     System.out.printf("\n");
1:   }
1: 
1:   private static Matrix matrix() {
1:     double[] values = {
1:             0.494097293912641, -0.152566866170993, -0.418360266395271, 0.359475300232312,
1:             1.35565069667582, -1.92759373242903, 1.50497526839076, -0.746889132087904,
1:             -0.769136838293565, 1.10984954080986, -0.664389974392489, 1.6464660350229,
1:             -0.11715420616969, 0.0216221197371269, -0.394972730980765, -0.748293157213142,
1:             1.90402764664962, -0.638042862848559, -0.362336344669668, -0.418261074380526,
1:             -0.494211543128429, 1.38828971158414, 0.597110366867923, 1.05341387608687,
1:             -0.957461740877418, -2.35528802598249, -1.03171458944128, 0.644319090271635,
1:             -0.0569108993041965, -0.14419465550881, -0.0456801828174936,
1:             0.754694392571835, 0.719744008628535, -1.17873249802301, -0.155887528905918,
1:             -1.5159868405466, 0.0918931582603128, 1.42179027361583, -0.100495054250176,
1:             0.0687986548485584
1:     };
1:     return reshape(values, 8, 5);
1:   }
1: 
1:   private static Matrix reshape(double[] values, int rows, int columns) {
1:     Matrix m = new DenseMatrix(rows, columns);
1:     int i = 0;
1:     for (double v : values) {
1:       m.set(i % rows, i / rows, v);
1:       i++;
1:     }
1:     return m;
1:   }
1: 
1:   private static Matrix b() {
1:     return reshape(new double[]
1:         {-0.0178247686747641, 0.68631714634098, -0.335464858468858, 1.50249941751569, -0.669901640772149}, 5, 1);
1:   }
1: }
============================================================================