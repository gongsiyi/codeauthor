1:d86c967: /**
1:d86c967:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d86c967:  * contributor license agreements.  See the NOTICE file distributed with
1:d86c967:  * this work for additional information regarding copyright ownership.
1:d86c967:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d86c967:  * (the "License"); you may not use this file except in compliance with
1:d86c967:  * the License.  You may obtain a copy of the License at
1:d86c967:  *
1:d86c967:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d86c967:  *
1:d86c967:  * Unless required by applicable law or agreed to in writing, software
1:d86c967:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d86c967:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d86c967:  * See the License for the specific language governing permissions and
1:d86c967:  * limitations under the License.
1:d86c967:  */
3:d86c967: 
1:d86c967: package org.apache.mahout.cf.taste.impl.recommender;
1:d86c967: 
1:d86c967: import org.apache.mahout.cf.taste.common.TasteException;
1:a66f1a8: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:d86c967: import org.apache.mahout.cf.taste.model.DataModel;
1:d86c967: import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
1:d86c967: import org.apache.mahout.cf.taste.similarity.UserSimilarity;
1:d86c967: 
1:d86c967: /**
1:1b4e01f:  * A variant on {@link GenericUserBasedRecommender} which is appropriate for use when no notion of preference
1:1b4e01f:  * value exists in the data.
1:d86c967:  */
1:d86c967: public final class GenericBooleanPrefUserBasedRecommender extends GenericUserBasedRecommender {
1:d86c967:   
1:d86c967:   public GenericBooleanPrefUserBasedRecommender(DataModel dataModel,
1:d86c967:                                                 UserNeighborhood neighborhood,
1:d86c967:                                                 UserSimilarity similarity) {
1:d86c967:     super(dataModel, neighborhood, similarity);
2:d86c967:   }
1:d86c967:   
1:d86c967:   /**
1:1b4e01f:    * This computation is in a technical sense, wrong, since in the domain of "boolean preference users" where
1:1b4e01f:    * all preference values are 1, this method should only ever return 1.0 or NaN. This isn't terribly useful
1:1b4e01f:    * however since it means results can't be ranked by preference value (all are 1). So instead this returns a
1:1b4e01f:    * sum of similarities to any other user in the neighborhood who has also rated the item.
1:d86c967:    */
1:d86c967:   @Override
1:1b4e01f:   protected float doEstimatePreference(long theUserID, long[] theNeighborhood, long itemID) throws TasteException {
1:a66f1a8:     if (theNeighborhood.length == 0) {
1:d86c967:       return Float.NaN;
1:d86c967:     }
1:d86c967:     DataModel dataModel = getDataModel();
1:d86c967:     UserSimilarity similarity = getSimilarity();
1:d86c967:     float totalSimilarity = 0.0f;
1:d86c967:     boolean foundAPref = false;
1:a66f1a8:     for (long userID : theNeighborhood) {
1:2f0cdab:       // See GenericItemBasedRecommender.doEstimatePreference() too
1:39fe224:       if (userID != theUserID && dataModel.getPreferenceValue(userID, itemID) != null) {
1:2f0cdab:         foundAPref = true;
1:e0ec7c1:         totalSimilarity += (float) similarity.userSimilarity(theUserID, userID);
1:d86c967:       }
1:d86c967:     }
1:d86c967:     return foundAPref ? totalSimilarity : Float.NaN;
1:d86c967:   }
1:d86c967:   
1:d86c967:   @Override
1:d141c8e:   protected FastIDSet getAllOtherItems(long[] theNeighborhood, long theUserID, boolean includeKnownItems)
1:d141c8e:       throws TasteException {
1:d86c967:     DataModel dataModel = getDataModel();
1:a466432:     FastIDSet possibleItemIDs = new FastIDSet();
1:a66f1a8:     for (long userID : theNeighborhood) {
1:a466432:       possibleItemIDs.addAll(dataModel.getItemIDsFromUser(userID));
1:d86c967:     }
1:d141c8e:     if (!includeKnownItems) {
1:d141c8e:       possibleItemIDs.removeAll(dataModel.getItemIDsFromUser(theUserID));
1:d141c8e:     }
1:a466432:     return possibleItemIDs;
1:d86c967:   }
1:d86c967:   
1:d86c967:   @Override
1:d86c967:   public String toString() {
1:d86c967:     return "GenericBooleanPrefUserBasedRecommender";
1:d86c967:   }
1:d86c967:   
1:d86c967: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d141c8e
/////////////////////////////////////////////////////////////////////////
1:   protected FastIDSet getAllOtherItems(long[] theNeighborhood, long theUserID, boolean includeKnownItems)
1:       throws TasteException {
1:     if (!includeKnownItems) {
1:       possibleItemIDs.removeAll(dataModel.getItemIDsFromUser(theUserID));
1:     }
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1:         totalSimilarity += (float) similarity.userSimilarity(theUserID, userID);
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:       if (userID != theUserID && dataModel.getPreferenceValue(userID, itemID) != null) {
commit:2f0cdab
/////////////////////////////////////////////////////////////////////////
1:       // See GenericItemBasedRecommender.doEstimatePreference() too
0:       if (userID != theUserID && dataModel.getPreferenceValue(userID, itemID) != null) {
1:         foundAPref = true;
0:         totalSimilarity += similarity.userSimilarity(theUserID, userID);
commit:a466432
/////////////////////////////////////////////////////////////////////////
1:     FastIDSet possibleItemIDs = new FastIDSet();
1:       possibleItemIDs.addAll(dataModel.getItemIDsFromUser(userID));
0:     possibleItemIDs.removeAll(dataModel.getItemIDsFromUser(theUserID));
1:     return possibleItemIDs;
commit:a66f1a8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
/////////////////////////////////////////////////////////////////////////
0:   protected float doEstimatePreference(long theUserID, long[] theNeighborhood, long itemID)
1:     if (theNeighborhood.length == 0) {
1:     for (long userID : theNeighborhood) {
0:       if (userID != theUserID) {
/////////////////////////////////////////////////////////////////////////
0:   protected FastIDSet getAllOtherItems(long[] theNeighborhood, long theUserID)
0:     FastIDSet allItemIDs = new FastIDSet();
1:     for (long userID : theNeighborhood) {
commit:d86c967
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender;
1: 
1: import org.apache.mahout.cf.taste.common.TasteException;
0: import org.apache.mahout.cf.taste.impl.common.FastSet;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
1: import org.apache.mahout.cf.taste.similarity.UserSimilarity;
1: 
0: import java.util.Collection;
0: import java.util.Set;
1: 
1: /**
0:  * A variant on {@link GenericUserBasedRecommender} which is appropriate for use when no notion of
0:  * preference value exists in the data.
1:  */
1: public final class GenericBooleanPrefUserBasedRecommender extends GenericUserBasedRecommender {
1: 
1:   public GenericBooleanPrefUserBasedRecommender(DataModel dataModel,
1:                                                 UserNeighborhood neighborhood,
1:                                                 UserSimilarity similarity) {
1:     super(dataModel, neighborhood, similarity);
1:   }
1: 
1:   /**
0:    * This computation is in a technical sense, wrong, since in the domain of "boolean preference users" where all
0:    * preference values are 1, this method should only ever return 1.0 or NaN. This isn't terribly useful however since
0:    * it means results can't be ranked by preference value (all are 1). So instead this returns a sum of similarities to
0:    * any other user in the neighborhood who has also rated the item.
1:    */
1:   @Override
0:   protected float doEstimatePreference(Comparable<?> theUserID,
0:                                        Collection<Comparable<?>> theNeighborhood,
0:                                        Comparable<?> itemID)
0:       throws TasteException {
0:     if (theNeighborhood.isEmpty()) {
1:       return Float.NaN;
1:     }
1:     DataModel dataModel = getDataModel();
1:     UserSimilarity similarity = getSimilarity();
1:     float totalSimilarity = 0.0f;
1:     boolean foundAPref = false;
0:     for (Comparable<?> userID : theNeighborhood) {
0:       if (!userID.equals(theUserID)) {
0:         // See GenericItemBasedRecommender.doEstimatePreference() too
0:         if (dataModel.getPreferenceValue(userID, itemID) != null) {
0:           foundAPref = true;
0:           totalSimilarity += similarity.userSimilarity(theUserID, userID);
1:         }
1:       }
1:     }
1:     return foundAPref ? totalSimilarity : Float.NaN;
1:   }
1: 
1:   @Override
0:   protected Set<Comparable<?>> getAllOtherItems(Iterable<Comparable<?>> theNeighborhood, Comparable<?> theUserID)
0:       throws TasteException {
1:     DataModel dataModel = getDataModel();
0:     Set<Comparable<?>> allItemIDs = new FastSet<Comparable<?>>();
0:     for (Comparable<?> userID : theNeighborhood) {
0:       allItemIDs.addAll(dataModel.getItemIDsFromUser(userID));
1:     }
0:     allItemIDs.removeAll(dataModel.getItemIDsFromUser(theUserID));
0:     return allItemIDs;
1:   }
1: 
1: 
1:   @Override
1:   public String toString() {
1:     return "GenericBooleanPrefUserBasedRecommender";
1:   }
1: 
1: }
author:Robin Anil
-------------------------------------------------------------------------------
commit:1b4e01f
/////////////////////////////////////////////////////////////////////////
1:  * A variant on {@link GenericUserBasedRecommender} which is appropriate for use when no notion of preference
1:  * value exists in the data.
0:   
0:   
1:    * This computation is in a technical sense, wrong, since in the domain of "boolean preference users" where
1:    * all preference values are 1, this method should only ever return 1.0 or NaN. This isn't terribly useful
1:    * however since it means results can't be ranked by preference value (all are 1). So instead this returns a
1:    * sum of similarities to any other user in the neighborhood who has also rated the item.
1:   protected float doEstimatePreference(long theUserID, long[] theNeighborhood, long itemID) throws TasteException {
/////////////////////////////////////////////////////////////////////////
0:       if ((userID != theUserID) && (dataModel.getPreferenceValue(userID, itemID) != null)) {
0:   
0:   protected FastIDSet getAllOtherItems(long[] theNeighborhood, long theUserID) throws TasteException {
/////////////////////////////////////////////////////////////////////////
0:   
0:   
============================================================================