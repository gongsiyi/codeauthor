1:c898d27: /*
1:c898d27:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c898d27:  * contributor license agreements.  See the NOTICE file distributed with
1:c898d27:  * this work for additional information regarding copyright ownership.
1:c898d27:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c898d27:  * (the "License"); you may not use this file except in compliance with
1:c898d27:  * the License.  You may obtain a copy of the License at
1:c898d27:  *
1:c898d27:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c898d27:  *
1:c898d27:  * Unless required by applicable law or agreed to in writing, software
1:c898d27:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c898d27:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c898d27:  * See the License for the specific language governing permissions and
1:c898d27:  * limitations under the License.
1:c898d27:  */
1:c898d27: 
1:faf0b6e: package org.apache.mahout.math;
1:faf0b6e: 
1:faf0b6e: import com.google.common.base.Preconditions;
1:faf0b6e: import org.apache.mahout.math.function.Functions;
1:faf0b6e: 
1:faf0b6e: /**
1:faf0b6e:  * Cholesky decomposition shamelessly ported from JAMA.
1:b5c2879:  * <p>
1:faf0b6e:  * A Cholesky decomposition of a semi-positive definite matrix A is a lower triangular matrix L such
1:faf0b6e:  * that L L^* = A.  If A is full rank, L is unique.  If A is real, then it must be symmetric and R
1:faf0b6e:  * will also be real.
1:faf0b6e:  */
1:faf0b6e: public class CholeskyDecomposition {
1:564c3e1:   private final PivotedMatrix L;
1:13b793c:   private boolean isPositiveDefinite = true;
1:faf0b6e: 
1:faf0b6e:   public CholeskyDecomposition(Matrix a) {
1:faf0b6e:     this(a, true);
3:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e:   public CholeskyDecomposition(Matrix a, boolean pivot) {
1:faf0b6e:     int rows = a.rowSize();
1:faf0b6e:     L = new PivotedMatrix(new DenseMatrix(rows, rows));
1:faf0b6e: 
1:faf0b6e:     // must be square
1:cd167f9:     Preconditions.checkArgument(rows == a.columnSize(), "Must be a Square Matrix");
1:faf0b6e: 
1:faf0b6e:     if (pivot) {
1:faf0b6e:       decomposeWithPivoting(a);
1:faf0b6e:     } else {
1:faf0b6e:       decompose(a);
1:faf0b6e:     }
1:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e:   private void decomposeWithPivoting(Matrix a) {
1:faf0b6e:     int n = a.rowSize();
1:faf0b6e:     L.assign(a);
1:faf0b6e: 
1:faf0b6e:     // pivoted column-wise submatrix cholesky with simple pivoting
1:faf0b6e:     double uberMax = L.viewDiagonal().aggregate(Functions.MAX, Functions.ABS);
1:faf0b6e:     for (int k = 0; k < n; k++) {
1:faf0b6e:       double max = 0;
1:faf0b6e:       int pivot = k;
1:faf0b6e:       for (int j = k; j < n; j++) {
1:faf0b6e:         if (L.get(j, j) > max) {
1:faf0b6e:           max = L.get(j, j);
1:faf0b6e:           pivot = j;
1:faf0b6e:           if (uberMax < Math.abs(max)) {
1:faf0b6e:             uberMax = Math.abs(max);
1:faf0b6e:           }
1:faf0b6e:         }
1:faf0b6e:       }
1:faf0b6e:       L.swap(k, pivot);
1:faf0b6e: 
1:faf0b6e:       double akk = L.get(k, k);
1:051cbcf:       double epsilon = 1.0e-10 * Math.max(uberMax, L.viewColumn(k).aggregate(Functions.MAX, Functions.ABS));
1:faf0b6e: 
1:faf0b6e:       if (akk < -epsilon) {
1:faf0b6e:         // can't have decidedly negative element on diagonal
1:faf0b6e:         throw new IllegalArgumentException("Matrix is not positive semi-definite");
1:faf0b6e:       } else if (akk <= epsilon) {
1:faf0b6e:         // degenerate column case.  Set all to zero
1:faf0b6e:         L.viewColumn(k).assign(0);
1:faf0b6e:         isPositiveDefinite = false;
1:faf0b6e: 
1:faf0b6e:         // no need to subtract from remaining sub-matrix
1:faf0b6e:       } else {
1:faf0b6e:         // normalize column by diagonal element
1:faf0b6e:         akk = Math.sqrt(Math.max(0, akk));
1:faf0b6e:         L.viewColumn(k).viewPart(k, n - k).assign(Functions.div(akk));
1:faf0b6e:         L.viewColumn(k).viewPart(0, k).assign(0);
1:faf0b6e: 
1:faf0b6e:         // subtract off scaled version of this column to the right
1:faf0b6e:         for (int j = k + 1; j < n; j++) {
1:faf0b6e:           Vector columnJ = L.viewColumn(j).viewPart(k, n - k);
1:faf0b6e:           Vector columnK = L.viewColumn(k).viewPart(k, n - k);
1:faf0b6e:           columnJ.assign(columnK, Functions.minusMult(columnK.get(j - k)));
1:faf0b6e:         }
1:faf0b6e: 
1:faf0b6e:       }
1:faf0b6e:     }
1:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e:   private void decompose(Matrix a) {
1:faf0b6e:     int n = a.rowSize();
1:faf0b6e:     L.assign(a);
1:faf0b6e: 
1:faf0b6e:     // column-wise submatrix cholesky with simple pivoting
1:faf0b6e:     for (int k = 0; k < n; k++) {
1:faf0b6e: 
1:faf0b6e:       double akk = L.get(k, k);
1:faf0b6e: 
1:faf0b6e:       // set upper part of column to 0.
1:faf0b6e:       L.viewColumn(k).viewPart(0, k).assign(0);
1:faf0b6e: 
1:051cbcf:       double epsilon = 1.0e-10 * L.viewColumn(k).aggregate(Functions.MAX, Functions.ABS);
1:faf0b6e:       if (akk <= epsilon) {
1:faf0b6e:         // degenerate column case.  Set diagonal to 1, all others to zero
1:faf0b6e:         L.viewColumn(k).viewPart(k, n - k).assign(0);
1:faf0b6e: 
1:faf0b6e:         isPositiveDefinite = false;
1:faf0b6e: 
1:faf0b6e:         // no need to subtract from remaining sub-matrix
1:faf0b6e:       } else {
1:faf0b6e:         // normalize column by diagonal element
1:faf0b6e:         akk = Math.sqrt(Math.max(0, akk));
1:faf0b6e:         L.set(k, k, akk);
1:faf0b6e:         L.viewColumn(k).viewPart(k + 1, n - k - 1).assign(Functions.div(akk));
1:faf0b6e: 
1:faf0b6e:         // now subtract scaled version of column
1:faf0b6e:         for (int j = k + 1; j < n; j++) {
1:faf0b6e:           Vector columnJ = L.viewColumn(j).viewPart(j, n - j);
1:faf0b6e:           Vector columnK = L.viewColumn(k).viewPart(j, n - j);
1:faf0b6e:           columnJ.assign(columnK, Functions.minusMult(L.get(j, k)));
1:faf0b6e:         }
1:faf0b6e:       }
1:faf0b6e:     }
1:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e:   public boolean isPositiveDefinite() {
1:faf0b6e:     return isPositiveDefinite;
1:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e:   public Matrix getL() {
1:faf0b6e:     return L.getBase();
1:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e:   public PivotedMatrix getPermutedL() {
1:faf0b6e:     return L;
1:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e:   /**
1:faf0b6e:    * @return Returns the permutation of rows and columns that was applied to L
1:faf0b6e:    */
1:faf0b6e:   public int[] getPivot() {
1:faf0b6e:     return L.getRowPivot();
1:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e:   public int[] getInversePivot() {
1:faf0b6e:     return L.getInverseRowPivot();
1:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e:   /**
1:faf0b6e:    * Compute inv(L) * z efficiently.
2:faf0b6e:    *
2:faf0b6e:    * @param z
1:faf0b6e:    */
1:faf0b6e:   public Matrix solveLeft(Matrix z) {
1:faf0b6e:     int n = L.columnSize();
1:faf0b6e:     int nx = z.columnSize();
1:faf0b6e: 
1:faf0b6e:     Matrix X = new DenseMatrix(n, z.columnSize());
1:faf0b6e:     X.assign(z);
1:faf0b6e: 
1:faf0b6e:     // Solve L*Y = Z using back-substitution
1:faf0b6e:     // note that k and i have to go in a funny order because L is pivoted
1:faf0b6e:     for (int internalK = 0; internalK < n; internalK++) {
1:faf0b6e:       int k = L.rowUnpivot(internalK);
1:faf0b6e:       for (int j = 0; j < nx; j++) {
1:faf0b6e:         for (int internalI = 0; internalI < internalK; internalI++) {
1:faf0b6e:           int i = L.rowUnpivot(internalI);
1:faf0b6e:           X.set(k, j, X.get(k, j) - X.get(i, j) * L.get(k, i));
1:faf0b6e:         }
1:faf0b6e:         if (L.get(k, k) != 0) {
1:faf0b6e:           X.set(k, j, X.get(k, j) / L.get(k, k));
1:faf0b6e:         } else {
1:faf0b6e:           X.set(k, j, 0);
1:faf0b6e:         }
1:faf0b6e:       }
1:faf0b6e:     }
1:faf0b6e:     return X;
1:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e:   /**
1:faf0b6e:    * Compute z * inv(L') efficiently
1:faf0b6e:    */
1:faf0b6e:   public Matrix solveRight(Matrix z) {
1:faf0b6e:     int n = z.columnSize();
1:faf0b6e:     int nx = z.rowSize();
1:faf0b6e: 
1:faf0b6e:     Matrix x = new DenseMatrix(z.rowSize(), z.columnSize());
1:faf0b6e:     x.assign(z);
1:faf0b6e: 
1:faf0b6e:     // Solve Y*L' = Z using back-substitution
1:faf0b6e:     for (int internalK = 0; internalK < n; internalK++) {
1:faf0b6e:       int k = L.rowUnpivot(internalK);
1:faf0b6e:       for (int j = 0; j < nx; j++) {
1:faf0b6e:         for (int internalI = 0; internalI < k; internalI++) {
1:faf0b6e:           int i = L.rowUnpivot(internalI);
1:faf0b6e:           x.set(j, k, x.get(j, k) - x.get(j, i) * L.get(k, i));
1:faf0b6e:           if (Double.isInfinite(x.get(j, k)) || Double.isNaN(x.get(j, k))) {
1:6d16230:             throw new IllegalStateException(
1:6d16230:                 String.format("Invalid value found at %d,%d (should not be possible)", j, k));
1:faf0b6e:           }
1:faf0b6e:         }
1:faf0b6e:         if (L.get(k, k) != 0) {
1:faf0b6e:           x.set(j, k, x.get(j, k) / L.get(k, k));
1:faf0b6e:         } else {
1:faf0b6e:           x.set(j, k, 0);
1:11763fb:         }
1:faf0b6e:         if (Double.isInfinite(x.get(j, k)) || Double.isNaN(x.get(j, k))) {
1:051cbcf:           throw new IllegalStateException(String.format("Invalid value found at %d,%d (should not be possible)", j, k));
1:faf0b6e:         }
1:faf0b6e:       }
1:faf0b6e:     }
1:faf0b6e:     return x;
1:11763fb:   }
1:11763fb: 
1:faf0b6e: }
1:faf0b6e: 
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:b5c2879
/////////////////////////////////////////////////////////////////////////
1:  * <p>
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:13b793c
/////////////////////////////////////////////////////////////////////////
1:   private boolean isPositiveDefinite = true;
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(rows == a.columnSize(), "Must be a Square Matrix");
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:             throw new IllegalStateException(
1:                 String.format("Invalid value found at %d,%d (should not be possible)", j, k));
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
1:       double epsilon = 1.0e-10 * Math.max(uberMax, L.viewColumn(k).aggregate(Functions.MAX, Functions.ABS));
/////////////////////////////////////////////////////////////////////////
1:       double epsilon = 1.0e-10 * L.viewColumn(k).aggregate(Functions.MAX, Functions.ABS);
/////////////////////////////////////////////////////////////////////////
1:             throw new IllegalStateException(String.format("Invalid value found at %d,%d (should not be possible)", j, k));
/////////////////////////////////////////////////////////////////////////
0:           throw new IllegalStateException(String.format("Invalid value found at %d,%d (should not be possible)", j, k));
commit:15925a5
/////////////////////////////////////////////////////////////////////////
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:   private final PivotedMatrix L;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:11763fb
/////////////////////////////////////////////////////////////////////////
0:             throw new InvalidCholeskyState(j, k);
/////////////////////////////////////////////////////////////////////////
0:           throw new InvalidCholeskyState(j, k);
1: 
0:   private class InvalidCholeskyState extends RuntimeException {
0:     public InvalidCholeskyState(int j, int k) {
0:       super(String.format("Invalid value found at %d,%d (should not be possible)", j, k));
1:     }
1:   }
commit:c898d27
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:faf0b6e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
1: 
1: import com.google.common.base.Preconditions;
1: import org.apache.mahout.math.function.Functions;
1: 
1: /**
1:  * Cholesky decomposition shamelessly ported from JAMA.
0:  * <p/>
1:  * A Cholesky decomposition of a semi-positive definite matrix A is a lower triangular matrix L such
1:  * that L L^* = A.  If A is full rank, L is unique.  If A is real, then it must be symmetric and R
1:  * will also be real.
1:  */
1: public class CholeskyDecomposition {
0:   private PivotedMatrix L;
0:   private boolean isPositiveDefinite;
1: 
1:   public CholeskyDecomposition(Matrix a) {
1:     this(a, true);
1:   }
1: 
1:   public CholeskyDecomposition(Matrix a, boolean pivot) {
1:     int rows = a.rowSize();
1:     L = new PivotedMatrix(new DenseMatrix(rows, rows));
1: 
1:     // must be square
0:     Preconditions.checkArgument(rows == a.columnSize());
1: 
1:     if (pivot) {
1:       decomposeWithPivoting(a);
1:     } else {
1:       decompose(a);
1:     }
1:   }
1: 
1:   private void decomposeWithPivoting(Matrix a) {
1:     int n = a.rowSize();
1:     L.assign(a);
1: 
1:     // pivoted column-wise submatrix cholesky with simple pivoting
1:     double uberMax = L.viewDiagonal().aggregate(Functions.MAX, Functions.ABS);
1:     for (int k = 0; k < n; k++) {
1:       double max = 0;
1:       int pivot = k;
1:       for (int j = k; j < n; j++) {
1:         if (L.get(j, j) > max) {
1:           max = L.get(j, j);
1:           pivot = j;
1:           if (uberMax < Math.abs(max)) {
1:             uberMax = Math.abs(max);
1:           }
1:         }
1:       }
1:       L.swap(k, pivot);
1: 
1:       double akk = L.get(k, k);
0:       double epsilon = 1e-10 * Math.max(uberMax, L.viewColumn(k).aggregate(Functions.MAX, Functions.ABS));
1: 
1:       if (akk < -epsilon) {
1:         // can't have decidedly negative element on diagonal
1:         throw new IllegalArgumentException("Matrix is not positive semi-definite");
1:       } else if (akk <= epsilon) {
1:         // degenerate column case.  Set all to zero
1:         L.viewColumn(k).assign(0);
1:         isPositiveDefinite = false;
1: 
1:         // no need to subtract from remaining sub-matrix
1:       } else {
1:         // normalize column by diagonal element
1:         akk = Math.sqrt(Math.max(0, akk));
1:         L.viewColumn(k).viewPart(k, n - k).assign(Functions.div(akk));
1:         L.viewColumn(k).viewPart(0, k).assign(0);
1: 
1:         // subtract off scaled version of this column to the right
1:         for (int j = k + 1; j < n; j++) {
1:           Vector columnJ = L.viewColumn(j).viewPart(k, n - k);
1:           Vector columnK = L.viewColumn(k).viewPart(k, n - k);
1:           columnJ.assign(columnK, Functions.minusMult(columnK.get(j - k)));
1:         }
1: 
1:       }
1:     }
1:   }
1: 
1:   private void decompose(Matrix a) {
1:     int n = a.rowSize();
1:     L.assign(a);
1: 
1:     // column-wise submatrix cholesky with simple pivoting
1:     for (int k = 0; k < n; k++) {
1: 
1:       double akk = L.get(k, k);
1: 
1:       // set upper part of column to 0.
1:       L.viewColumn(k).viewPart(0, k).assign(0);
1: 
0:       double epsilon = 1e-10 * L.viewColumn(k).aggregate(Functions.MAX, Functions.ABS);
1:       if (akk <= epsilon) {
1:         // degenerate column case.  Set diagonal to 1, all others to zero
1:         L.viewColumn(k).viewPart(k, n - k).assign(0);
1: 
1:         isPositiveDefinite = false;
1: 
1:         // no need to subtract from remaining sub-matrix
1:       } else {
1:         // normalize column by diagonal element
1:         akk = Math.sqrt(Math.max(0, akk));
1:         L.set(k, k, akk);
1:         L.viewColumn(k).viewPart(k + 1, n - k - 1).assign(Functions.div(akk));
1: 
1:         // now subtract scaled version of column
1:         for (int j = k + 1; j < n; j++) {
1:           Vector columnJ = L.viewColumn(j).viewPart(j, n - j);
1:           Vector columnK = L.viewColumn(k).viewPart(j, n - j);
1:           columnJ.assign(columnK, Functions.minusMult(L.get(j, k)));
1:         }
1:       }
1:     }
1:   }
1: 
1:   public boolean isPositiveDefinite() {
1:     return isPositiveDefinite;
1:   }
1: 
1:   public Matrix getL() {
1:     return L.getBase();
1:   }
1: 
1:   public PivotedMatrix getPermutedL() {
1:     return L;
1:   }
1: 
1:   /**
1:    * @return Returns the permutation of rows and columns that was applied to L
1:    */
1:   public int[] getPivot() {
1:     return L.getRowPivot();
1:   }
1: 
1:   public int[] getInversePivot() {
1:     return L.getInverseRowPivot();
1:   }
1: 
1:   /**
1:    * Compute inv(L) * z efficiently.
1:    *
1:    * @param z
1:    */
1:   public Matrix solveLeft(Matrix z) {
1:     int n = L.columnSize();
1:     int nx = z.columnSize();
1: 
1:     Matrix X = new DenseMatrix(n, z.columnSize());
1:     X.assign(z);
1: 
1:     // Solve L*Y = Z using back-substitution
1:     // note that k and i have to go in a funny order because L is pivoted
1:     for (int internalK = 0; internalK < n; internalK++) {
1:       int k = L.rowUnpivot(internalK);
1:       for (int j = 0; j < nx; j++) {
1:         for (int internalI = 0; internalI < internalK; internalI++) {
1:           int i = L.rowUnpivot(internalI);
1:           X.set(k, j, X.get(k, j) - X.get(i, j) * L.get(k, i));
1:         }
1:         if (L.get(k, k) != 0) {
1:           X.set(k, j, X.get(k, j) / L.get(k, k));
1:         } else {
1:           X.set(k, j, 0);
1:         }
1:       }
1:     }
1:     return X;
1:   }
1: 
1:   /**
1:    * Compute z * inv(L') efficiently
1:    *
1:    * @param z
0:    * @return
1:    */
1:   public Matrix solveRight(Matrix z) {
1:     int n = z.columnSize();
1:     int nx = z.rowSize();
1: 
1:     Matrix x = new DenseMatrix(z.rowSize(), z.columnSize());
1:     x.assign(z);
1: 
1:     // Solve Y*L' = Z using back-substitution
1:     for (int internalK = 0; internalK < n; internalK++) {
1:       int k = L.rowUnpivot(internalK);
1:       for (int j = 0; j < nx; j++) {
1:         for (int internalI = 0; internalI < k; internalI++) {
1:           int i = L.rowUnpivot(internalI);
1:           x.set(j, k, x.get(j, k) - x.get(j, i) * L.get(k, i));
1:           if (Double.isInfinite(x.get(j, k)) || Double.isNaN(x.get(j, k))) {
0:             System.out.printf("bad at %d,%d\n", j, k);
1:           }
1:         }
1:         if (L.get(k, k) != 0) {
1:           x.set(j, k, x.get(j, k) / L.get(k, k));
1:         } else {
1:           x.set(j, k, 0);
1:         }
1:         if (Double.isInfinite(x.get(j, k)) || Double.isNaN(x.get(j, k))) {
0:           System.out.printf("bad at %d,%d\n", j, k);
1:         }
1:       }
1:     }
1:     return x;
1:   }
1: }
1: 
============================================================================