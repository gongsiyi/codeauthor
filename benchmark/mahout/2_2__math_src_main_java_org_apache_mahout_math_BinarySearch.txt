1:bdb1c48: /*
1:bdb1c48:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bdb1c48:  * contributor license agreements.  See the NOTICE file distributed with
1:bdb1c48:  * this work for additional information regarding copyright ownership.
1:bdb1c48:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bdb1c48:  * (the "License"); you may not use this file except in compliance with
1:bdb1c48:  * the License.  You may obtain a copy of the License at
1:bdb1c48:  *
1:bdb1c48:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bdb1c48:  *
1:bdb1c48:  * Unless required by applicable law or agreed to in writing, software
1:bdb1c48:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bdb1c48:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bdb1c48:  * See the License for the specific language governing permissions and
1:bdb1c48:  * limitations under the License.
1:bdb1c48:  */
1:bdb1c48: 
1:bdb1c48: package org.apache.mahout.math;
1:bdb1c48: 
1:bdb1c48: import java.util.Comparator;
1:bdb1c48: 
1:4ca6b86: public final class BinarySearch {
1:bdb1c48: 
1:bdb1c48:   private BinarySearch() {}
1:bdb1c48: 
1:bdb1c48:   /**
1:bdb1c48:    * Performs a binary search for the specified element in the specified
1:bdb1c48:    * ascending sorted array. Searching in an unsorted array has an undefined
1:bdb1c48:    * result. It's also undefined which element is found if there are multiple
1:bdb1c48:    * occurrences of the same element.
1:bdb1c48:    *
1:bdb1c48:    * @param array
1:bdb1c48:    *          the sorted {@code byte} array to search.
1:bdb1c48:    * @param value
1:bdb1c48:    *          the {@code byte} element to find.
1:bdb1c48:    * @param from
1:bdb1c48:    *          the first index to sort, inclusive.
1:bdb1c48:    * @param to
1:bdb1c48:    *          the last index to sort, inclusive.
1:bdb1c48:    * @return the non-negative index of the element, or a negative index which is
1:bdb1c48:    *         {@code -index - 1} where the element would be inserted.
1:bdb1c48:    */
1:bdb1c48:   public static int binarySearchFromTo(byte[] array, byte value, int from, int to) {
1:bdb1c48:     int mid = -1;
1:bdb1c48:     while (from <= to) {
1:bdb1c48:       mid = (from + to) >>> 1;
1:bdb1c48:       if (value > array[mid]) {
1:bdb1c48:         from = mid + 1;
1:bdb1c48:       } else if (value == array[mid]) {
1:bdb1c48:         return mid;
1:bdb1c48:       } else {
1:bdb1c48:         to = mid - 1;
1:bdb1c48:       }
1:bdb1c48:     }
1:bdb1c48:     if (mid < 0) {
1:bdb1c48:       return -1;
1:bdb1c48:     }
1:bdb1c48: 
1:bdb1c48:     return -mid - (value < array[mid] ? 1 : 2);
1:bdb1c48:   }
1:bdb1c48: 
1:bdb1c48:   /**
1:bdb1c48:    * Performs a binary search for the specified element in the specified
1:bdb1c48:    * ascending sorted array. Searching in an unsorted array has an undefined
1:bdb1c48:    * result. It's also undefined which element is found if there are multiple
1:bdb1c48:    * occurrences of the same element.
1:bdb1c48:    *
1:bdb1c48:    * @param array
1:bdb1c48:    *          the sorted {@code char} array to search.
1:bdb1c48:    * @param value
1:bdb1c48:    *          the {@code char} element to find.
1:bdb1c48:    * @param from
1:bdb1c48:    *          the first index to sort, inclusive.
1:bdb1c48:    * @param to
1:bdb1c48:    *          the last index to sort, inclusive.
1:bdb1c48:    * @return the non-negative index of the element, or a negative index which is
1:bdb1c48:    *         {@code -index - 1} where the element would be inserted.
1:bdb1c48:    */
1:bdb1c48:   public static int binarySearchFromTo(char[] array, char value, int from, int to) {
1:bdb1c48:     int mid = -1;
1:bdb1c48:     while (from <= to) {
1:bdb1c48:       mid = (from + to) >>> 1;
1:bdb1c48:       if (value > array[mid]) {
1:bdb1c48:         from = mid + 1;
1:bdb1c48:       } else if (value == array[mid]) {
1:bdb1c48:         return mid;
1:bdb1c48:       } else {
1:bdb1c48:         to = mid - 1;
1:bdb1c48:       }
1:bdb1c48:     }
1:bdb1c48:     if (mid < 0) {
1:bdb1c48:       return -1;
1:bdb1c48:     }
1:bdb1c48:     return -mid - (value < array[mid] ? 1 : 2);
1:bdb1c48:   }
1:bdb1c48: 
1:bdb1c48:   /**
1:bdb1c48:    * Performs a binary search for the specified element in the specified
1:bdb1c48:    * ascending sorted array. Searching in an unsorted array has an undefined
1:bdb1c48:    * result. It's also undefined which element is found if there are multiple
1:bdb1c48:    * occurrences of the same element.
1:bdb1c48:    *
1:bdb1c48:    * @param array
1:bdb1c48:    *          the sorted {@code double} array to search.
1:bdb1c48:    * @param value
1:bdb1c48:    *          the {@code double} element to find.
1:bdb1c48:    * @param from
1:bdb1c48:    *          the first index to sort, inclusive.
1:bdb1c48:    * @param to
1:bdb1c48:    *          the last index to sort, inclusive.
1:bdb1c48:    * @return the non-negative index of the element, or a negative index which is
1:bdb1c48:    *         {@code -index - 1} where the element would be inserted.
1:bdb1c48:    */
1:bdb1c48:   public static int binarySearchFromTo(double[] array, double value, int from, int to) {
1:bdb1c48:     long longBits = Double.doubleToLongBits(value);
1:bdb1c48:     int mid = -1;
1:bdb1c48:     while (from <= to) {
1:bdb1c48:       mid = (from + to) >>> 1;
1:bdb1c48:       if (lessThan(array[mid], value)) {
1:bdb1c48:         from = mid + 1;
1:bdb1c48:       } else if (longBits == Double.doubleToLongBits(array[mid])) {
1:bdb1c48:         return mid;
1:bdb1c48:       } else {
1:bdb1c48:         to = mid - 1;
1:bdb1c48:       }
1:bdb1c48:     }
1:bdb1c48:     if (mid < 0) {
1:bdb1c48:       return -1;
1:bdb1c48:     }
1:bdb1c48:     return -mid - (lessThan(value, array[mid]) ? 1 : 2);
1:bdb1c48:   }
1:bdb1c48: 
1:bdb1c48:   /**
1:bdb1c48:    * Performs a binary search for the specified element in the specified
1:bdb1c48:    * ascending sorted array. Searching in an unsorted array has an undefined
1:bdb1c48:    * result. It's also undefined which element is found if there are multiple
1:bdb1c48:    * occurrences of the same element.
1:bdb1c48:    *
1:bdb1c48:    * @param array
1:bdb1c48:    *          the sorted {@code float} array to search.
1:bdb1c48:    * @param value
1:bdb1c48:    *          the {@code float} element to find.
1:bdb1c48:    * @param from
1:bdb1c48:    *          the first index to sort, inclusive.
1:bdb1c48:    * @param to
1:bdb1c48:    *          the last index to sort, inclusive.
1:bdb1c48:    * @return the non-negative index of the element, or a negative index which is
1:bdb1c48:    *         {@code -index - 1} where the element would be inserted.
1:bdb1c48:    */
1:bdb1c48:   public static int binarySearchFromTo(float[] array, float value, int from, int to) {
1:bdb1c48:     int intBits = Float.floatToIntBits(value);
1:bdb1c48:     int mid = -1;
1:bdb1c48:     while (from <= to) {
1:bdb1c48:       mid = (from + to) >>> 1;
1:bdb1c48:       if (lessThan(array[mid], value)) {
1:bdb1c48:         from = mid + 1;
1:bdb1c48:       } else if (intBits == Float.floatToIntBits(array[mid])) {
1:bdb1c48:         return mid;
1:bdb1c48:       } else {
1:bdb1c48:         to = mid - 1;
1:bdb1c48:       }
1:bdb1c48:     }
1:bdb1c48:     if (mid < 0) {
1:bdb1c48:       return -1;
1:bdb1c48:     }
1:bdb1c48:     return -mid - (lessThan(value, array[mid]) ? 1 : 2);
1:bdb1c48:   }
1:bdb1c48: 
1:bdb1c48:   /**
1:bdb1c48:    * Performs a binary search for the specified element in the specified
1:bdb1c48:    * ascending sorted array. Searching in an unsorted array has an undefined
1:bdb1c48:    * result. It's also undefined which element is found if there are multiple
1:bdb1c48:    * occurrences of the same element.
1:bdb1c48:    *
1:bdb1c48:    * @param array
1:bdb1c48:    *          the sorted {@code int} array to search.
1:bdb1c48:    * @param value
1:bdb1c48:    *          the {@code int} element to find.
1:bdb1c48:    * @param from
1:bdb1c48:    *          the first index to sort, inclusive.
1:bdb1c48:    * @param to
1:bdb1c48:    *          the last index to sort, inclusive.
1:bdb1c48:    * @return the non-negative index of the element, or a negative index which is
1:bdb1c48:    *         {@code -index - 1} where the element would be inserted.
1:bdb1c48:    */
1:bdb1c48:   public static int binarySearchFromTo(int[] array, int value, int from, int to) {
1:bdb1c48:     int mid = -1;
1:bdb1c48:     while (from <= to) {
1:bdb1c48:       mid = (from + to) >>> 1;
1:bdb1c48:       if (value > array[mid]) {
1:bdb1c48:         from = mid + 1;
1:bdb1c48:       } else if (value == array[mid]) {
1:bdb1c48:         return mid;
1:bdb1c48:       } else {
1:bdb1c48:         to = mid - 1;
1:bdb1c48:       }
1:bdb1c48:     }
1:bdb1c48:     if (mid < 0) {
1:bdb1c48:       return -1;
1:bdb1c48:     }
1:bdb1c48:     return -mid - (value < array[mid] ? 1 : 2);
1:bdb1c48:   }
1:bdb1c48: 
1:bdb1c48:   /**
1:bdb1c48:    * Performs a binary search for the specified element in the specified
1:bdb1c48:    * ascending sorted array. Searching in an unsorted array has an undefined
1:bdb1c48:    * result. It's also undefined which element is found if there are multiple
1:bdb1c48:    * occurrences of the same element.
1:bdb1c48:    *
1:bdb1c48:    * @param array
1:bdb1c48:    *          the sorted {@code long} array to search.
1:bdb1c48:    * @param value
1:bdb1c48:    *          the {@code long} element to find.
1:bdb1c48:    * @param from
1:bdb1c48:    *          the first index to sort, inclusive.
1:bdb1c48:    * @param to
1:bdb1c48:    *          the last index to sort, inclusive.
1:bdb1c48:    * @return the non-negative index of the element, or a negative index which is
1:bdb1c48:    *         {@code -index - 1} where the element would be inserted.
1:bdb1c48:    */
1:bdb1c48:   public static int binarySearchFromTo(long[] array, long value, int from, int to) {
1:bdb1c48:     int mid = -1;
1:bdb1c48:     while (from <= to) {
1:bdb1c48:       mid = (from + to) >>> 1;
1:bdb1c48:       if (value > array[mid]) {
1:bdb1c48:         from = mid + 1;
1:bdb1c48:       } else if (value == array[mid]) {
1:bdb1c48:         return mid;
1:bdb1c48:       } else {
1:bdb1c48:         to = mid - 1;
1:bdb1c48:       }
1:bdb1c48:     }
1:bdb1c48:     if (mid < 0) {
1:bdb1c48:       return -1;
1:bdb1c48:     }
1:bdb1c48:     return -mid - (value < array[mid] ? 1 : 2);
1:bdb1c48:   }
1:bdb1c48: 
1:bdb1c48:   /**
1:bdb1c48:    * Performs a binary search for the specified element in the specified
1:bdb1c48:    * ascending sorted array. Searching in an unsorted array has an undefined
1:bdb1c48:    * result. It's also undefined which element is found if there are multiple
1:bdb1c48:    * occurrences of the same element.
1:bdb1c48:    *
1:bdb1c48:    * @param array
1:bdb1c48:    *          the sorted {@code Object} array to search.
1:bdb1c48:    * @param object
1:bdb1c48:    *          the {@code Object} element to find
1:bdb1c48:    * @param from
1:bdb1c48:    *          the first index to sort, inclusive.
1:bdb1c48:    * @param to
1:bdb1c48:    *          the last index to sort, inclusive.
1:bdb1c48:    * @return the non-negative index of the element, or a negative index which is
1:bdb1c48:    *         {@code -index - 1} where the element would be inserted.
1:bdb1c48:    *
1:bdb1c48:    */
1:bdb1c48:   public static <T extends Comparable<T>> int binarySearchFromTo(T[] array, T object, int from, int to) {
1:bdb1c48:     if (array.length == 0) {
1:bdb1c48:       return -1;
1:bdb1c48:     }
1:bdb1c48: 
1:bdb1c48:     int mid = 0;
1:bdb1c48:     int result = 0;
1:bdb1c48:     while (from <= to) {
1:bdb1c48:       mid = (from + to) >>> 1;
1:bdb1c48:       if ((result = array[mid].compareTo(object)) < 0) {
1:bdb1c48:         from = mid + 1;
1:bdb1c48:       } else if (result == 0) {
1:bdb1c48:         return mid;
1:bdb1c48:       } else {
1:bdb1c48:         to = mid - 1;
1:bdb1c48:       }
1:bdb1c48:     }
1:bdb1c48:     return -mid - (result >= 0 ? 1 : 2);
1:bdb1c48:   }
1:bdb1c48: 
1:bdb1c48:   /**
1:bdb1c48:    * Performs a binary search for the specified element in the specified
1:bdb1c48:    * ascending sorted array using the {@code Comparator} to compare elements.
1:bdb1c48:    * Searching in an unsorted array has an undefined result. It's also undefined
1:bdb1c48:    * which element is found if there are multiple occurrences of the same
1:bdb1c48:    * element.
1:bdb1c48:    *
1:bdb1c48:    * @param array
1:bdb1c48:    *          the sorted array to search
1:bdb1c48:    * @param object
1:bdb1c48:    *          the element to find
1:bdb1c48:    * @param from
1:bdb1c48:    *          the first index to sort, inclusive.
1:bdb1c48:    * @param to
1:bdb1c48:    *          the last index to sort, inclusive.
1:bdb1c48:    * @param comparator
1:bdb1c48:    *          the {@code Comparator} used to compare the elements.
1:bdb1c48:    * @return the non-negative index of the element, or a negative index which
1:bdb1c48:    */
1:bdb1c48:   public static <T> int binarySearchFromTo(T[] array, T object, int from, int to, Comparator<? super T> comparator) {
1:bdb1c48:     int mid = 0;
1:bdb1c48:     int result = 0;
1:bdb1c48:     while (from <= to) {
1:bdb1c48:       mid = (from + to) >>> 1;
1:bdb1c48:       if ((result = comparator.compare(array[mid], object)) < 0) {
1:bdb1c48:         from = mid + 1;
1:bdb1c48:       } else if (result == 0) {
1:bdb1c48:         return mid;
1:bdb1c48:       } else {
1:bdb1c48:         to = mid - 1;
1:bdb1c48:       }
1:bdb1c48:     }
1:bdb1c48:     return -mid - (result >= 0 ? 1 : 2);
1:bdb1c48:   }
1:bdb1c48: 
1:bdb1c48:   /**
1:bdb1c48:    * Performs a binary search for the specified element in the specified
1:bdb1c48:    * ascending sorted array. Searching in an unsorted array has an undefined
1:bdb1c48:    * result. It's also undefined which element is found if there are multiple
1:bdb1c48:    * occurrences of the same element.
1:bdb1c48:    *
1:bdb1c48:    * @param array
1:bdb1c48:    *          the sorted {@code short} array to search.
1:bdb1c48:    * @param value
1:bdb1c48:    *          the {@code short} element to find.
1:bdb1c48:    * @param from
1:bdb1c48:    *          the first index to sort, inclusive.
1:bdb1c48:    * @param to
1:bdb1c48:    *          the last index to sort, inclusive.
1:bdb1c48:    * @return the non-negative index of the element, or a negative index which is
1:bdb1c48:    *         {@code -index - 1} where the element would be inserted.
1:bdb1c48:    */
1:bdb1c48:   public static int binarySearchFromTo(short[] array, short value, int from, int to) {
1:bdb1c48:     int mid = -1;
1:bdb1c48:     while (from <= to) {
1:bdb1c48:       mid = (from + to) >>> 1;
1:bdb1c48:       if (value > array[mid]) {
1:bdb1c48:         from = mid + 1;
1:bdb1c48:       } else if (value == array[mid]) {
1:bdb1c48:         return mid;
1:bdb1c48:       } else {
1:bdb1c48:         to = mid - 1;
1:bdb1c48:       }
1:bdb1c48:     }
1:bdb1c48:     if (mid < 0) {
1:bdb1c48:       return -1;
1:bdb1c48:     }
1:bdb1c48:     return -mid - (value < array[mid] ? 1 : 2);
1:bdb1c48:   }
1:bdb1c48: 
1:bdb1c48:   private static boolean lessThan(double double1, double double2) {
1:bdb1c48:     // A slightly specialized version of
1:bdb1c48:     // Double.compare(double1, double2) < 0.
1:bdb1c48: 
1:bdb1c48:     // Non-zero and non-NaN checking.
1:bdb1c48:     if (double1 < double2) {
1:bdb1c48:       return true;
1:bdb1c48:     }
1:bdb1c48:     if (double1 > double2) {
1:bdb1c48:       return false;
1:bdb1c48:     }
1:bdb1c48:     if (double1 == double2 && double1 != 0.0) {
1:bdb1c48:       return false;
1:bdb1c48:     }
1:bdb1c48: 
1:bdb1c48:     // NaNs are equal to other NaNs and larger than any other double.
1:bdb1c48:     if (Double.isNaN(double1)) {
1:bdb1c48:       return false;
1:bdb1c48:     }
1:bdb1c48:     if (Double.isNaN(double2)) {
1:bdb1c48:       return true;
1:bdb1c48:     }
1:bdb1c48: 
1:bdb1c48:     // Deal with +0.0 and -0.0.
1:bdb1c48:     long d1 = Double.doubleToRawLongBits(double1);
1:bdb1c48:     long d2 = Double.doubleToRawLongBits(double2);
1:bdb1c48:     return d1 < d2;
1:bdb1c48:   }
1:bdb1c48: 
1:bdb1c48:   private static boolean lessThan(float float1, float float2) {
1:bdb1c48:     // A slightly specialized version of Float.compare(float1, float2) < 0.
1:bdb1c48: 
1:bdb1c48:     // Non-zero and non-NaN checking.
1:bdb1c48:     if (float1 < float2) {
1:bdb1c48:       return true;
1:bdb1c48:     }
1:bdb1c48:     if (float1 > float2) {
1:bdb1c48:       return false;
1:bdb1c48:     }
1:bdb1c48:     if (float1 == float2 && float1 != 0.0f) {
1:bdb1c48:       return false;
1:bdb1c48:     }
1:bdb1c48: 
1:bdb1c48:     // NaNs are equal to other NaNs and larger than any other float
1:bdb1c48:     if (Float.isNaN(float1)) {
1:bdb1c48:       return false;
1:bdb1c48:     }
1:bdb1c48:     if (Float.isNaN(float2)) {
1:bdb1c48:       return true;
1:bdb1c48:     }
1:bdb1c48: 
1:bdb1c48:     // Deal with +0.0 and -0.0
1:bdb1c48:     int f1 = Float.floatToRawIntBits(float1);
1:bdb1c48:     int f2 = Float.floatToRawIntBits(float2);
1:bdb1c48:     return f1 < f2;
1:bdb1c48:   }
1:bdb1c48: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1: public final class BinarySearch {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import java.util.Comparator;
1: 
0: public class BinarySearch {
1: 
1:   private BinarySearch() {}
1: 
1:   /**
1:    * Performs a binary search for the specified element in the specified
1:    * ascending sorted array. Searching in an unsorted array has an undefined
1:    * result. It's also undefined which element is found if there are multiple
1:    * occurrences of the same element.
1:    *
1:    * @param array
1:    *          the sorted {@code byte} array to search.
1:    * @param value
1:    *          the {@code byte} element to find.
1:    * @param from
1:    *          the first index to sort, inclusive.
1:    * @param to
1:    *          the last index to sort, inclusive.
1:    * @return the non-negative index of the element, or a negative index which is
1:    *         {@code -index - 1} where the element would be inserted.
1:    */
1:   public static int binarySearchFromTo(byte[] array, byte value, int from, int to) {
1:     int mid = -1;
1:     while (from <= to) {
1:       mid = (from + to) >>> 1;
1:       if (value > array[mid]) {
1:         from = mid + 1;
1:       } else if (value == array[mid]) {
1:         return mid;
1:       } else {
1:         to = mid - 1;
1:       }
1:     }
1:     if (mid < 0) {
1:       return -1;
1:     }
1: 
1:     return -mid - (value < array[mid] ? 1 : 2);
1:   }
1: 
1:   /**
1:    * Performs a binary search for the specified element in the specified
1:    * ascending sorted array. Searching in an unsorted array has an undefined
1:    * result. It's also undefined which element is found if there are multiple
1:    * occurrences of the same element.
1:    *
1:    * @param array
1:    *          the sorted {@code char} array to search.
1:    * @param value
1:    *          the {@code char} element to find.
1:    * @param from
1:    *          the first index to sort, inclusive.
1:    * @param to
1:    *          the last index to sort, inclusive.
1:    * @return the non-negative index of the element, or a negative index which is
1:    *         {@code -index - 1} where the element would be inserted.
1:    */
1:   public static int binarySearchFromTo(char[] array, char value, int from, int to) {
1:     int mid = -1;
1:     while (from <= to) {
1:       mid = (from + to) >>> 1;
1:       if (value > array[mid]) {
1:         from = mid + 1;
1:       } else if (value == array[mid]) {
1:         return mid;
1:       } else {
1:         to = mid - 1;
1:       }
1:     }
1:     if (mid < 0) {
1:       return -1;
1:     }
1:     return -mid - (value < array[mid] ? 1 : 2);
1:   }
1: 
1:   /**
1:    * Performs a binary search for the specified element in the specified
1:    * ascending sorted array. Searching in an unsorted array has an undefined
1:    * result. It's also undefined which element is found if there are multiple
1:    * occurrences of the same element.
1:    *
1:    * @param array
1:    *          the sorted {@code double} array to search.
1:    * @param value
1:    *          the {@code double} element to find.
1:    * @param from
1:    *          the first index to sort, inclusive.
1:    * @param to
1:    *          the last index to sort, inclusive.
1:    * @return the non-negative index of the element, or a negative index which is
1:    *         {@code -index - 1} where the element would be inserted.
1:    */
1:   public static int binarySearchFromTo(double[] array, double value, int from, int to) {
1:     long longBits = Double.doubleToLongBits(value);
1:     int mid = -1;
1:     while (from <= to) {
1:       mid = (from + to) >>> 1;
1:       if (lessThan(array[mid], value)) {
1:         from = mid + 1;
1:       } else if (longBits == Double.doubleToLongBits(array[mid])) {
1:         return mid;
1:       } else {
1:         to = mid - 1;
1:       }
1:     }
1:     if (mid < 0) {
1:       return -1;
1:     }
1:     return -mid - (lessThan(value, array[mid]) ? 1 : 2);
1:   }
1: 
1:   /**
1:    * Performs a binary search for the specified element in the specified
1:    * ascending sorted array. Searching in an unsorted array has an undefined
1:    * result. It's also undefined which element is found if there are multiple
1:    * occurrences of the same element.
1:    *
1:    * @param array
1:    *          the sorted {@code float} array to search.
1:    * @param value
1:    *          the {@code float} element to find.
1:    * @param from
1:    *          the first index to sort, inclusive.
1:    * @param to
1:    *          the last index to sort, inclusive.
1:    * @return the non-negative index of the element, or a negative index which is
1:    *         {@code -index - 1} where the element would be inserted.
1:    */
1:   public static int binarySearchFromTo(float[] array, float value, int from, int to) {
1:     int intBits = Float.floatToIntBits(value);
1:     int mid = -1;
1:     while (from <= to) {
1:       mid = (from + to) >>> 1;
1:       if (lessThan(array[mid], value)) {
1:         from = mid + 1;
1:       } else if (intBits == Float.floatToIntBits(array[mid])) {
1:         return mid;
1:       } else {
1:         to = mid - 1;
1:       }
1:     }
1:     if (mid < 0) {
1:       return -1;
1:     }
1:     return -mid - (lessThan(value, array[mid]) ? 1 : 2);
1:   }
1: 
1:   /**
1:    * Performs a binary search for the specified element in the specified
1:    * ascending sorted array. Searching in an unsorted array has an undefined
1:    * result. It's also undefined which element is found if there are multiple
1:    * occurrences of the same element.
1:    *
1:    * @param array
1:    *          the sorted {@code int} array to search.
1:    * @param value
1:    *          the {@code int} element to find.
1:    * @param from
1:    *          the first index to sort, inclusive.
1:    * @param to
1:    *          the last index to sort, inclusive.
1:    * @return the non-negative index of the element, or a negative index which is
1:    *         {@code -index - 1} where the element would be inserted.
1:    */
1:   public static int binarySearchFromTo(int[] array, int value, int from, int to) {
1:     int mid = -1;
1:     while (from <= to) {
1:       mid = (from + to) >>> 1;
1:       if (value > array[mid]) {
1:         from = mid + 1;
1:       } else if (value == array[mid]) {
1:         return mid;
1:       } else {
1:         to = mid - 1;
1:       }
1:     }
1:     if (mid < 0) {
1:       return -1;
1:     }
1:     return -mid - (value < array[mid] ? 1 : 2);
1:   }
1: 
1:   /**
1:    * Performs a binary search for the specified element in the specified
1:    * ascending sorted array. Searching in an unsorted array has an undefined
1:    * result. It's also undefined which element is found if there are multiple
1:    * occurrences of the same element.
1:    *
1:    * @param array
1:    *          the sorted {@code long} array to search.
1:    * @param value
1:    *          the {@code long} element to find.
1:    * @param from
1:    *          the first index to sort, inclusive.
1:    * @param to
1:    *          the last index to sort, inclusive.
1:    * @return the non-negative index of the element, or a negative index which is
1:    *         {@code -index - 1} where the element would be inserted.
1:    */
1:   public static int binarySearchFromTo(long[] array, long value, int from, int to) {
1:     int mid = -1;
1:     while (from <= to) {
1:       mid = (from + to) >>> 1;
1:       if (value > array[mid]) {
1:         from = mid + 1;
1:       } else if (value == array[mid]) {
1:         return mid;
1:       } else {
1:         to = mid - 1;
1:       }
1:     }
1:     if (mid < 0) {
1:       return -1;
1:     }
1:     return -mid - (value < array[mid] ? 1 : 2);
1:   }
1: 
1:   /**
1:    * Performs a binary search for the specified element in the specified
1:    * ascending sorted array. Searching in an unsorted array has an undefined
1:    * result. It's also undefined which element is found if there are multiple
1:    * occurrences of the same element.
1:    *
1:    * @param array
1:    *          the sorted {@code Object} array to search.
1:    * @param object
1:    *          the {@code Object} element to find
1:    * @param from
1:    *          the first index to sort, inclusive.
1:    * @param to
1:    *          the last index to sort, inclusive.
1:    * @return the non-negative index of the element, or a negative index which is
1:    *         {@code -index - 1} where the element would be inserted.
1:    *
1:    */
1:   public static <T extends Comparable<T>> int binarySearchFromTo(T[] array, T object, int from, int to) {
1:     if (array.length == 0) {
1:       return -1;
1:     }
1: 
1:     int mid = 0;
1:     int result = 0;
1:     while (from <= to) {
1:       mid = (from + to) >>> 1;
1:       if ((result = array[mid].compareTo(object)) < 0) {
1:         from = mid + 1;
1:       } else if (result == 0) {
1:         return mid;
1:       } else {
1:         to = mid - 1;
1:       }
1:     }
1:     return -mid - (result >= 0 ? 1 : 2);
1:   }
1: 
1:   /**
1:    * Performs a binary search for the specified element in the specified
1:    * ascending sorted array using the {@code Comparator} to compare elements.
1:    * Searching in an unsorted array has an undefined result. It's also undefined
1:    * which element is found if there are multiple occurrences of the same
1:    * element.
1:    *
1:    * @param array
1:    *          the sorted array to search
1:    * @param object
1:    *          the element to find
1:    * @param from
1:    *          the first index to sort, inclusive.
1:    * @param to
1:    *          the last index to sort, inclusive.
1:    * @param comparator
1:    *          the {@code Comparator} used to compare the elements.
1:    * @return the non-negative index of the element, or a negative index which
1:    */
1:   public static <T> int binarySearchFromTo(T[] array, T object, int from, int to, Comparator<? super T> comparator) {
1:     int mid = 0;
1:     int result = 0;
1:     while (from <= to) {
1:       mid = (from + to) >>> 1;
1:       if ((result = comparator.compare(array[mid], object)) < 0) {
1:         from = mid + 1;
1:       } else if (result == 0) {
1:         return mid;
1:       } else {
1:         to = mid - 1;
1:       }
1:     }
1:     return -mid - (result >= 0 ? 1 : 2);
1:   }
1: 
1:   /**
1:    * Performs a binary search for the specified element in the specified
1:    * ascending sorted array. Searching in an unsorted array has an undefined
1:    * result. It's also undefined which element is found if there are multiple
1:    * occurrences of the same element.
1:    *
1:    * @param array
1:    *          the sorted {@code short} array to search.
1:    * @param value
1:    *          the {@code short} element to find.
1:    * @param from
1:    *          the first index to sort, inclusive.
1:    * @param to
1:    *          the last index to sort, inclusive.
1:    * @return the non-negative index of the element, or a negative index which is
1:    *         {@code -index - 1} where the element would be inserted.
1:    */
1:   public static int binarySearchFromTo(short[] array, short value, int from, int to) {
1:     int mid = -1;
1:     while (from <= to) {
1:       mid = (from + to) >>> 1;
1:       if (value > array[mid]) {
1:         from = mid + 1;
1:       } else if (value == array[mid]) {
1:         return mid;
1:       } else {
1:         to = mid - 1;
1:       }
1:     }
1:     if (mid < 0) {
1:       return -1;
1:     }
1:     return -mid - (value < array[mid] ? 1 : 2);
1:   }
1: 
1:   private static boolean lessThan(double double1, double double2) {
1:     // A slightly specialized version of
1:     // Double.compare(double1, double2) < 0.
1: 
1:     // Non-zero and non-NaN checking.
1:     if (double1 < double2) {
1:       return true;
1:     }
1:     if (double1 > double2) {
1:       return false;
1:     }
1:     if (double1 == double2 && double1 != 0.0) {
1:       return false;
1:     }
1: 
1:     // NaNs are equal to other NaNs and larger than any other double.
1:     if (Double.isNaN(double1)) {
1:       return false;
1:     }
1:     if (Double.isNaN(double2)) {
1:       return true;
1:     }
1: 
1:     // Deal with +0.0 and -0.0.
1:     long d1 = Double.doubleToRawLongBits(double1);
1:     long d2 = Double.doubleToRawLongBits(double2);
1:     return d1 < d2;
1:   }
1: 
1:   private static boolean lessThan(float float1, float float2) {
1:     // A slightly specialized version of Float.compare(float1, float2) < 0.
1: 
1:     // Non-zero and non-NaN checking.
1:     if (float1 < float2) {
1:       return true;
1:     }
1:     if (float1 > float2) {
1:       return false;
1:     }
1:     if (float1 == float2 && float1 != 0.0f) {
1:       return false;
1:     }
1: 
1:     // NaNs are equal to other NaNs and larger than any other float
1:     if (Float.isNaN(float1)) {
1:       return false;
1:     }
1:     if (Float.isNaN(float2)) {
1:       return true;
1:     }
1: 
1:     // Deal with +0.0 and -0.0
1:     int f1 = Float.floatToRawIntBits(float1);
1:     int f2 = Float.floatToRawIntBits(float2);
1:     return f1 < f2;
1:   }
1: }
============================================================================