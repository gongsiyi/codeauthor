2:ad17b0d: /**
1:ad17b0d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ad17b0d:  * contributor license agreements.  See the NOTICE file distributed with
1:ad17b0d:  * this work for additional information regarding copyright ownership.
1:ad17b0d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ad17b0d:  * (the "License"); you may not use this file except in compliance with
1:ad17b0d:  * the License.  You may obtain a copy of the License at
1:ad17b0d:  *
1:ad17b0d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ad17b0d:  *
1:ad17b0d:  * Unless required by applicable law or agreed to in writing, software
1:ad17b0d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ad17b0d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ad17b0d:  * See the License for the specific language governing permissions and
1:ad17b0d:  * limitations under the License.
2:ad17b0d:  */
3:ad17b0d: 
1:ad17b0d: package org.apache.mahout.cf.taste.impl.common.jdbc;
1:ad17b0d: 
1:ad17b0d: import javax.sql.DataSource;
1:ad17b0d: import java.io.Closeable;
1:ad17b0d: import java.sql.Connection;
1:ad17b0d: import java.sql.PreparedStatement;
1:ad17b0d: import java.sql.ResultSet;
1:ad17b0d: import java.sql.SQLException;
1:ad17b0d: 
1:80366ee: import com.google.common.collect.AbstractIterator;
1:ad17b0d: import org.apache.mahout.common.IOUtils;
1:ad17b0d: import org.slf4j.Logger;
1:ad17b0d: import org.slf4j.LoggerFactory;
1:ad17b0d: 
1:ad17b0d: /**
1:3218e95:  * Provides an {@link java.util.Iterator} over the result of an SQL query, as an iteration over the {@link ResultSet}.
1:ad17b0d:  * While the same object will be returned from the iteration each time, it will be returned once for each row
1:ad17b0d:  * of the result.
1:ad17b0d:  */
1:80366ee: final class EachRowIterator extends AbstractIterator<ResultSet> implements Closeable {
1:ad17b0d: 
1:ad17b0d:   private static final Logger log = LoggerFactory.getLogger(EachRowIterator.class);
1:ad17b0d: 
1:ad17b0d:   private final Connection connection;
1:ad17b0d:   private final PreparedStatement statement;
1:ad17b0d:   private final ResultSet resultSet;
1:ad17b0d: 
1:ad17b0d:   EachRowIterator(DataSource dataSource, String sqlQuery) throws SQLException {
2:ad17b0d:     try {
1:ad17b0d:       connection = dataSource.getConnection();
1:ad17b0d:       statement = connection.prepareStatement(sqlQuery, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
1:ad17b0d:       statement.setFetchDirection(ResultSet.FETCH_FORWARD);
1:ad17b0d:       //statement.setFetchSize(getFetchSize());
1:ad17b0d:       log.debug("Executing SQL query: {}", sqlQuery);
1:ad17b0d:       resultSet = statement.executeQuery();
2:ad17b0d:     } catch (SQLException sqle) {
2:ad17b0d:       close();
1:ad17b0d:       throw sqle;
6:ad17b0d:     }
1:ad17b0d:   }
1:ad17b0d: 
3:ad17b0d:   @Override
1:80366ee:   protected ResultSet computeNext() {
1:80366ee:     try {
1:80366ee:       if (resultSet.next()) {
1:80366ee:         return resultSet;
1:80366ee:       } else {
1:ad17b0d:         close();
1:80366ee:         return null;
1:ad17b0d:       }
1:80366ee:     } catch (SQLException sqle) {
1:80366ee:       close();
1:80366ee:       throw new IllegalStateException(sqle);
1:ad17b0d:     }
1:ad17b0d:   }
1:ad17b0d: 
1:ad17b0d:   public void skip(int n) throws SQLException {
1:ad17b0d:     try {
1:ad17b0d:       resultSet.relative(n);
1:ad17b0d:     } catch (SQLException sqle) {
1:ad17b0d:       // Can't use relative on MySQL Connector/J; try advancing manually
1:ad17b0d:       int i = 0;
1:39fe224:       while (i < n && resultSet.next()) {
1:ad17b0d:         i++;
1:ad17b0d:       }
1:ad17b0d:     }
1:ad17b0d:   }
1:ad17b0d: 
1:ad17b0d:   @Override
1:ad17b0d:   public void close() {
1:ad17b0d:     IOUtils.quietClose(resultSet, statement, connection);
1:80366ee:     endOfData();
1:ad17b0d:   }
1:ad17b0d: 
1:ad17b0d: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:       while (i < n && resultSet.next()) {
commit:3218e95
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * Provides an {@link java.util.Iterator} over the result of an SQL query, as an iteration over the {@link ResultSet}.
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.AbstractIterator;
/////////////////////////////////////////////////////////////////////////
1: final class EachRowIterator extends AbstractIterator<ResultSet> implements Closeable {
/////////////////////////////////////////////////////////////////////////
1:   protected ResultSet computeNext() {
1:     try {
1:       if (resultSet.next()) {
1:         return resultSet;
1:       } else {
1:         return null;
1:     } catch (SQLException sqle) {
1:       close();
1:       throw new IllegalStateException(sqle);
/////////////////////////////////////////////////////////////////////////
1:     endOfData();
commit:ad17b0d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.common.jdbc;
1: 
1: import javax.sql.DataSource;
1: import java.io.Closeable;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
0: import java.util.Iterator;
0: import java.util.NoSuchElementException;
1: 
1: import org.apache.mahout.common.IOUtils;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
0:  * Provides an {@link Iterator} over the result of an SQL query, as an iteration over the {@link ResultSet}.
1:  * While the same object will be returned from the iteration each time, it will be returned once for each row
1:  * of the result.
1:  */
0: final class EachRowIterator implements Iterator<ResultSet>, Closeable {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(EachRowIterator.class);
1: 
1:   private final Connection connection;
1:   private final PreparedStatement statement;
1:   private final ResultSet resultSet;
0:   private boolean closed;
0:   private boolean available;
1: 
1:   EachRowIterator(DataSource dataSource, String sqlQuery) throws SQLException {
0:     available = false;
0:     closed = false;
1:     try {
1:       connection = dataSource.getConnection();
1:       statement = connection.prepareStatement(sqlQuery, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
1:       statement.setFetchDirection(ResultSet.FETCH_FORWARD);
1:       //statement.setFetchSize(getFetchSize());
1:       log.debug("Executing SQL query: {}", sqlQuery);
1:       resultSet = statement.executeQuery();
1:     } catch (SQLException sqle) {
1:       close();
1:       throw sqle;
1:     }
1:   }
1: 
1:   @Override
0:   public boolean hasNext() {
0:     if (!available) {
0:       if (closed) {
0:         return false;
1:       }
1:       try {
0:         available = resultSet.next();
1:       } catch (SQLException sqle) {
1:         close();
0:         throw new IllegalStateException(sqle);
1:       }
0:       if (!available) {
1:         close();
1:       }
1:     }
0:     return available;
1:   }
1: 
1:   @Override
0:   public ResultSet next() {
0:     if (!hasNext()) {
0:       throw new NoSuchElementException();
1:     }
0:     available = false;
0:     return resultSet;
1:   }
1: 
1:   public void skip(int n) throws SQLException {
1:     try {
1:       resultSet.relative(n);
1:     } catch (SQLException sqle) {
1:       // Can't use relative on MySQL Connector/J; try advancing manually
1:       int i = 0;
0:       while ((i < n) && resultSet.next()) {
1:         i++;
1:       }
1:     }
1:   }
1: 
1:   /**
0:    * @throws UnsupportedOperationException
1:    */
1:   @Override
0:   public void remove() {
0:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override
1:   public void close() {
0:     closed = true;
1:     IOUtils.quietClose(resultSet, statement, connection);
1:   }
1: 
1: }
============================================================================