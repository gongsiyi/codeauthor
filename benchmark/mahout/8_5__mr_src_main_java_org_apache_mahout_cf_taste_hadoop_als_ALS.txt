1:97f6db2: /**
1:81d64c0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:81d64c0:  * contributor license agreements.  See the NOTICE file distributed with
1:81d64c0:  * this work for additional information regarding copyright ownership.
1:81d64c0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:81d64c0:  * (the "License"); you may not use this file except in compliance with
1:81d64c0:  * the License.  You may obtain a copy of the License at
1:97f6db2:  *
1:81d64c0:  *     http://www.apache.org/licenses/LICENSE-2.0
2:81d64c0:  *
1:81d64c0:  * Unless required by applicable law or agreed to in writing, software
1:81d64c0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:81d64c0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:81d64c0:  * See the License for the specific language governing permissions and
1:81d64c0:  * limitations under the License.
1:97f6db2:  */
9:81d64c0: 
1:81d64c0: package org.apache.mahout.cf.taste.hadoop.als;
1:85f9ece: 
1:e73fdb8: import com.google.common.base.Preconditions;
1:85f9ece: import java.io.IOException;
1:85f9ece: import java.util.ArrayList;
1:85f9ece: import java.util.Iterator;
1:85f9ece: import java.util.List;
1:81d64c0: import org.apache.hadoop.conf.Configuration;
1:97f6db2: import org.apache.hadoop.fs.FileSystem;
1:97f6db2: import org.apache.hadoop.fs.LocalFileSystem;
1:81d64c0: import org.apache.hadoop.fs.Path;
1:81d64c0: import org.apache.hadoop.io.IntWritable;
1:97f6db2: import org.apache.hadoop.io.SequenceFile;
1:6d9179e: import org.apache.mahout.common.HadoopUtil;
1:81d64c0: import org.apache.mahout.common.Pair;
1:81d64c0: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1:81d64c0: import org.apache.mahout.common.iterator.sequencefile.PathType;
1:81d64c0: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;
1:564c3e1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator;
1:81d64c0: import org.apache.mahout.math.Vector;
1:81d64c0: import org.apache.mahout.math.VectorWritable;
1:63c81f1: import org.apache.mahout.math.als.AlternatingLeastSquaresSolver;
1:81d64c0: import org.apache.mahout.math.map.OpenIntObjectHashMap;
1:81d64c0: 
1:5d66758: final class ALS {
1:81d64c0: 
1:5d66758:   private ALS() {}
1:81d64c0: 
1:81d64c0:   static Vector readFirstRow(Path dir, Configuration conf) throws IOException {
1:87c15be:     Iterator<VectorWritable> iterator = new SequenceFileDirValueIterator<>(dir, PathType.LIST,
1:63c81f1:         PathFilters.partFilter(), null, true, conf);
1:564c3e1:     return iterator.hasNext() ? iterator.next().get() : null;
1:97f6db2:   }
1:97f6db2: 
1:97f6db2:   public static OpenIntObjectHashMap<Vector> readMatrixByRowsFromDistributedCache(int numEntities,
1:97f6db2:       Configuration conf) throws IOException {
1:97f6db2: 
1:97f6db2:     IntWritable rowIndex = new IntWritable();
1:97f6db2:     VectorWritable row = new VectorWritable();
1:97f6db2: 
1:97f6db2: 
1:97f6db2:     OpenIntObjectHashMap<Vector> featureMatrix = numEntities > 0
1:97f6db2:         ? new OpenIntObjectHashMap<Vector>(numEntities) : new OpenIntObjectHashMap<Vector>();
1:97f6db2: 
1:6d9179e:     Path[] cachedFiles = HadoopUtil.getCachedFiles(conf);
1:6d9179e:     LocalFileSystem localFs = FileSystem.getLocal(conf);
1:97f6db2: 
1:335a993:     for (Path cachedFile : cachedFiles) {
1:e73fdb8:       try (SequenceFile.Reader reader = new SequenceFile.Reader(localFs.getConf(), SequenceFile.Reader.file(cachedFile))) {
1:97f6db2:         while (reader.next(rowIndex, row)) {
1:97f6db2:           featureMatrix.put(rowIndex.get(), row.get());
1:97f6db2:         }
1:97f6db2:       }
1:97f6db2:     }
1:97f6db2: 
1:97f6db2:     Preconditions.checkState(!featureMatrix.isEmpty(), "Feature matrix is empty");
1:97f6db2:     return featureMatrix;
1:97f6db2:   }
1:97f6db2: 
1:97f6db2:   public static OpenIntObjectHashMap<Vector> readMatrixByRows(Path dir, Configuration conf) {
1:87c15be:     OpenIntObjectHashMap<Vector> matrix = new OpenIntObjectHashMap<>();
1:6d16230:     for (Pair<IntWritable,VectorWritable> pair
1:6d16230:         : new SequenceFileDirIterable<IntWritable,VectorWritable>(dir, PathType.LIST, PathFilters.partFilter(), conf)) {
1:81d64c0:       int rowIndex = pair.getFirst().get();
1:97f6db2:       Vector row = pair.getSecond().get();
1:81d64c0:       matrix.put(rowIndex, row);
1:97f6db2:     }
1:81d64c0:     return matrix;
1:97f6db2:   }
1:63c81f1: 
1:63c81f1:   public static Vector solveExplicit(VectorWritable ratingsWritable, OpenIntObjectHashMap<Vector> uOrM,
1:5d66758:     double lambda, int numFeatures) {
1:63c81f1:     Vector ratings = ratingsWritable.get();
1:63c81f1: 
1:85f9ece:     List<Vector> featureVectors = new ArrayList<>(ratings.getNumNondefaultElements());
1:dc62944:     for (Vector.Element e : ratings.nonZeroes()) {
1:dc62944:       int index = e.index();
1:63c81f1:       featureVectors.add(uOrM.get(index));
1:63c81f1:     }
1:63c81f1: 
1:63c81f1:     return AlternatingLeastSquaresSolver.solve(featureVectors, ratings, lambda, numFeatures);
1:63c81f1:   }
10:81d64c0: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:e73fdb8
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
/////////////////////////////////////////////////////////////////////////
1:       try (SequenceFile.Reader reader = new SequenceFile.Reader(localFs.getConf(), SequenceFile.Reader.file(cachedFile))) {
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       try (SequenceFile.Reader reader = new SequenceFile.Reader(localFs, cachedFile, conf)){
/////////////////////////////////////////////////////////////////////////
1:     List<Vector> featureVectors = new ArrayList<>(ratings.getNumNondefaultElements());
commit:87c15be
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Iterator<VectorWritable> iterator = new SequenceFileDirValueIterator<>(dir, PathType.LIST,
/////////////////////////////////////////////////////////////////////////
1:     OpenIntObjectHashMap<Vector> matrix = new OpenIntObjectHashMap<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e90d901
/////////////////////////////////////////////////////////////////////////
commit:6d9179e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.HadoopUtil;
/////////////////////////////////////////////////////////////////////////
1:     Path[] cachedFiles = HadoopUtil.getCachedFiles(conf);
1:     LocalFileSystem localFs = FileSystem.getLocal(conf);
0:     for (int n = 0; n < cachedFiles.length; n++) {
0:         reader = new SequenceFile.Reader(localFs, cachedFiles[n], conf);
commit:97f6db2
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Preconditions;
0: import com.google.common.io.Closeables;
0: import org.apache.hadoop.filecache.DistributedCache;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.LocalFileSystem;
1: import org.apache.hadoop.io.SequenceFile;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * assumes that first entry always exists
1:    *
0:    * @param vectors
1:    */
0:   public static Vector sum(Iterator<VectorWritable> vectors) {
0:     Vector sum = vectors.next().get();
0:     while (vectors.hasNext()) {
0:       sum.assign(vectors.next().get(), Functions.PLUS);
1:     }
0:     return sum;
1:   }
1:   public static OpenIntObjectHashMap<Vector> readMatrixByRowsFromDistributedCache(int numEntities,
1:       Configuration conf) throws IOException {
1: 
1:     IntWritable rowIndex = new IntWritable();
1:     VectorWritable row = new VectorWritable();
1: 
0:     LocalFileSystem localFs = FileSystem.getLocal(conf);
0:     Path[] cacheFiles = DistributedCache.getLocalCacheFiles(conf);
1: 
1:     OpenIntObjectHashMap<Vector> featureMatrix = numEntities > 0
1:         ? new OpenIntObjectHashMap<Vector>(numEntities) : new OpenIntObjectHashMap<Vector>();
1: 
0:     for (int n = 0; n < cacheFiles.length; n++) {
0:       Path localCacheFile = localFs.makeQualified(cacheFiles[n]);
1: 
0:       // fallback for local execution
0:       if (!localFs.exists(localCacheFile)) {
0:         localCacheFile = new Path(DistributedCache.getCacheFiles(conf)[n].getPath());
1:       }
1: 
0:       SequenceFile.Reader reader = null;
0:       try {
0:         reader = new SequenceFile.Reader(localFs, localCacheFile, conf);
1:         while (reader.next(rowIndex, row)) {
1:           featureMatrix.put(rowIndex.get(), row.get());
1:         }
0:       } finally {
0:         Closeables.close(reader, true);
1:       }
1:     }
1: 
1:     Preconditions.checkState(!featureMatrix.isEmpty(), "Feature matrix is empty");
1:     return featureMatrix;
1:   }
1: 
1:   public static OpenIntObjectHashMap<Vector> readMatrixByRows(Path dir, Configuration conf) {
0:     OpenIntObjectHashMap matrix = new OpenIntObjectHashMap<Vector>();
1:       Vector row = pair.getSecond().get();
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     for (Pair<IntWritable,VectorWritable> pair
1:         : new SequenceFileDirIterable<IntWritable,VectorWritable>(dir, PathType.LIST, PathFilters.partFilter(), conf)) {
commit:5d66758
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: final class ALS {
1:   private ALS() {}
/////////////////////////////////////////////////////////////////////////
1:     double lambda, int numFeatures) {
commit:63c81f1
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
0: import org.apache.hadoop.mapreduce.Mapper;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.als.AlternatingLeastSquaresSolver;
0: import java.util.List;
0: public final class ALS {
0:   private ALS() {
0:     Iterator<VectorWritable> iterator = new SequenceFileDirValueIterator<VectorWritable>(dir, PathType.LIST,
1:         PathFilters.partFilter(), null, true, conf);
0:   public static OpenIntObjectHashMap<Vector> readMatrixByRows(Path dir, Configuration conf) {
/////////////////////////////////////////////////////////////////////////
1: 
1:   public static Vector solveExplicit(VectorWritable ratingsWritable, OpenIntObjectHashMap<Vector> uOrM,
0:     double lambda, int numFeatures) throws IOException, InterruptedException {
1:     Vector ratings = ratingsWritable.get();
1: 
0:     List<Vector> featureVectors = Lists.newArrayListWithCapacity(ratings.getNumNondefaultElements());
0:     Iterator<Vector.Element> interactions = ratings.iterateNonZero();
0:     while (interactions.hasNext()) {
0:       int index = interactions.next().index();
1:       featureVectors.add(uOrM.get(index));
1:     }
1: 
1:     return AlternatingLeastSquaresSolver.solve(featureVectors, ratings, lambda, numFeatures);
1:   }
commit:08e65f6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.Matrix;
/////////////////////////////////////////////////////////////////////////
commit:81d64c0
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: 
1: package org.apache.mahout.cf.taste.hadoop.als;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1: import org.apache.mahout.common.iterator.sequencefile.PathType;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;
0: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.map.OpenIntObjectHashMap;
1: 
1: 
0: import java.io.IOException;
0: import java.text.DecimalFormat;
0: import java.text.DecimalFormatSymbols;
0: import java.util.Locale;
1: 
0: public class ALSUtils {
1: 
0:   private ALSUtils() {}
1: 
1:   static Vector readFirstRow(Path dir, Configuration conf) throws IOException {
0:     Vector v = null;
0:     for (Pair<IntWritable,VectorWritable> pair :
0:         new SequenceFileDirIterable<IntWritable,VectorWritable>(dir, PathType.LIST, PathFilters.partFilter(), conf)) {
0:       v = pair.getSecond().get();
0:       break;
1:     }
0:     return v;
1:   }
1: 
0:   static OpenIntObjectHashMap<Vector> readMatrixByRows(Path dir, Configuration conf) throws IOException {
0:     OpenIntObjectHashMap<Vector> matrix = new OpenIntObjectHashMap<Vector>();
1: 
0:     for (Pair<IntWritable,VectorWritable> pair :
0:         new SequenceFileDirIterable<IntWritable,VectorWritable>(dir, PathType.LIST, PathFilters.partFilter(), conf)) {
1:       int rowIndex = pair.getFirst().get();
0:       Vector row = pair.getSecond().get().clone();
1:       matrix.put(rowIndex, row);
1:     }
1:     return matrix;
1:   }
1: 
0:   public static String nice(Vector v) {
0:     if (!v.isSequentialAccess()) {
0:       v = new DenseVector(v);
1:     }
1: 
0:     DecimalFormat df = new DecimalFormat("0.00", DecimalFormatSymbols.getInstance(Locale.ENGLISH));
1: 
0:     StringBuilder buffer = new StringBuilder("[");
0:     String separator = "";
0:     for (Vector.Element e : v) {
0:       buffer.append(separator);
0:       if (!Double.isNaN(e.get())) {
0:         if (e.get() >= 0) {
0:           buffer.append(" ");
1:         }
0:         buffer.append(df.format(e.get()));
0:       } else {
0:         buffer.append("  -  ");
1:       }
0:       separator = "\t";
1:     }
0:     buffer.append(" ]");
0:     return buffer.toString();
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:335a993
/////////////////////////////////////////////////////////////////////////
1:     for (Path cachedFile : cachedFiles) {
0:         reader = new SequenceFile.Reader(localFs, cachedFile, conf);
/////////////////////////////////////////////////////////////////////////
0:     OpenIntObjectHashMap<Vector> matrix = new OpenIntObjectHashMap<Vector>();
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0:   private ALSUtils() {
0:   }
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
0: final class ALSUtils {
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator;
0: import java.io.IOException;
0: import java.util.Iterator;
0: 
0:   static Vector readFirstRow(Path dir, Configuration conf) throws IOException {
0:     Iterator<VectorWritable> iterator = new SequenceFileDirValueIterator<VectorWritable>(dir,
0:                                                                                          PathType.LIST,
0:                                                                                          PathFilters.partFilter(),
0:                                                                                          null,
0:                                                                                          true,
0:                                                                                          conf);
1:     return iterator.hasNext() ? iterator.next().get() : null;
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
0: public final class ALSUtils {
0:   static Vector readFirstRow(Path dir, Configuration conf) {
/////////////////////////////////////////////////////////////////////////
0:   static OpenIntObjectHashMap<Vector> readMatrixByRows(Path dir, Configuration conf) {
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:4a6453c
/////////////////////////////////////////////////////////////////////////
0:       if (!localFs.exists(localCacheFile)) {//MAHOUT-992: this seems safe
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
1:     for (Vector.Element e : ratings.nonZeroes()) {
1:       int index = e.index();
============================================================================