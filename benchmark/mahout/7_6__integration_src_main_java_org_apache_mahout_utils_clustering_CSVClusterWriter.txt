1:29a7f38: /**
1:29a7f38:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:29a7f38:  * contributor license agreements.  See the NOTICE file distributed with
1:29a7f38:  * this work for additional information regarding copyright ownership.
1:29a7f38:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:29a7f38:  * (the "License"); you may not use this file except in compliance with
1:29a7f38:  * the License.  You may obtain a copy of the License at
1:29a7f38:  *
1:29a7f38:  *     http://www.apache.org/licenses/LICENSE-2.0
1:29a7f38:  *
1:29a7f38:  * Unless required by applicable law or agreed to in writing, software
1:29a7f38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:29a7f38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:29a7f38:  * See the License for the specific language governing permissions and
1:29a7f38:  * limitations under the License.
1:29a7f38:  */
1:29a7f38: 
1:c9d49ee: package org.apache.mahout.utils.clustering;
1:29a7f38: 
1:29a7f38: import org.apache.mahout.clustering.Cluster;
1:8253491: import org.apache.mahout.clustering.classify.WeightedPropertyVectorWritable;
1:51f58b8: import org.apache.mahout.clustering.iterator.ClusterWritable;
1:b7b432c: import org.apache.mahout.common.distance.DistanceMeasure;
1:29a7f38: import org.apache.mahout.math.NamedVector;
1:29a7f38: import org.apache.mahout.math.Vector;
1:29a7f38: 
1:29a7f38: import java.io.IOException;
1:29a7f38: import java.io.Writer;
1:29a7f38: import java.util.List;
1:29a7f38: import java.util.Map;
1:4194a28: import java.util.regex.Pattern;
1:29a7f38: 
1:29a7f38: /**
1:29a7f38:  * Format is adjacency style as put forth at http://gephi.org/users/supported-graph-formats/csv-format/, the centroid
1:29a7f38:  * is the first element and all the rest of the row are the points in that cluster
1:29a7f38:  *
1:29a7f38:  **/
1:4194a28: public class CSVClusterWriter extends AbstractClusterWriter {
1:29a7f38: 
1:4194a28:   private static final Pattern VEC_PATTERN = Pattern.compile("\\{|\\:|\\,|\\}");
1:4194a28: 
1:8253491:   public CSVClusterWriter(Writer writer, Map<Integer, List<WeightedPropertyVectorWritable>> clusterIdToPoints,
1:3c22856:       DistanceMeasure measure) {
1:b7b432c:     super(writer, clusterIdToPoints, measure);
1:29a7f38:   }
1:29a7f38: 
1:29a7f38:   @Override
1:51f58b8:   public void write(ClusterWritable clusterWritable) throws IOException {
1:29a7f38:     StringBuilder line = new StringBuilder();
1:51f58b8:     Cluster cluster = clusterWritable.getValue();
1:6d16230:     line.append(cluster.getId());
1:8253491:     List<WeightedPropertyVectorWritable> points = getClusterIdToPoints().get(cluster.getId());
1:29a7f38:     if (points != null) {
1:8253491:       for (WeightedPropertyVectorWritable point : points) {
1:29a7f38:         Vector theVec = point.getVector();
1:4194a28:         line.append(',');
1:e64dd36:         if (theVec instanceof NamedVector) {
1:29a7f38:           line.append(((NamedVector)theVec).getName());
1:29a7f38:         } else {
1:29a7f38:           String vecStr = theVec.asFormatString();
1:29a7f38:           //do some basic manipulations for display
1:4194a28:           vecStr = VEC_PATTERN.matcher(vecStr).replaceAll("_");
1:29a7f38:           line.append(vecStr);
1:29a7f38:         }
1:29a7f38:       }
1:4194a28:       getWriter().append(line).append("\n");
1:29a7f38:     }
1:29a7f38:   }
1:29a7f38: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:8253491
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.classify.WeightedPropertyVectorWritable;
/////////////////////////////////////////////////////////////////////////
1:   public CSVClusterWriter(Writer writer, Map<Integer, List<WeightedPropertyVectorWritable>> clusterIdToPoints,
/////////////////////////////////////////////////////////////////////////
1:     List<WeightedPropertyVectorWritable> points = getClusterIdToPoints().get(cluster.getId());
1:       for (WeightedPropertyVectorWritable point : points) {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     line.append(cluster.getId());
commit:3c22856
/////////////////////////////////////////////////////////////////////////
0:   public CSVClusterWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints,
1:       DistanceMeasure measure) {
/////////////////////////////////////////////////////////////////////////
0:   line.append(cluster.getId());
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:         if (theVec instanceof NamedVector) {
author:pranjan
-------------------------------------------------------------------------------
commit:51f58b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.iterator.ClusterWritable;
/////////////////////////////////////////////////////////////////////////
1:   public void write(ClusterWritable clusterWritable) throws IOException {
1:     Cluster cluster = clusterWritable.getValue();
0: 	line.append(cluster.getId());
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:8d102ea
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.clustering.classify.WeightedVectorWritable;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:b7b432c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.distance.DistanceMeasure;
/////////////////////////////////////////////////////////////////////////
0:   public CSVClusterWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints, DistanceMeasure measure) {
1:     super(writer, clusterIdToPoints, measure);
commit:c9d49ee
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.clustering;
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.vectors.io;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import org.apache.mahout.clustering.Cluster;
0: import org.apache.mahout.clustering.WeightedVectorWritable;
1: import org.apache.mahout.math.NamedVector;
1: import org.apache.mahout.math.Vector;
1: 
1: import java.io.IOException;
1: import java.io.Writer;
1: import java.util.List;
1: import java.util.Map;
1: 
1: /**
1:  * Format is adjacency style as put forth at http://gephi.org/users/supported-graph-formats/csv-format/, the centroid
1:  * is the first element and all the rest of the row are the points in that cluster
1:  *
1:  **/
0: public class CSVClusterWriter extends AbstractClusterWriter implements ClusterWriter {
1: 
0:   public CSVClusterWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints) {
0:     super(writer, clusterIdToPoints);
1:   }
1: 
1:   @Override
0:   public void write(Cluster cluster) throws IOException {
1:     StringBuilder line = new StringBuilder();
0:     line.append(cluster.getId());
0:     List<WeightedVectorWritable> points = clusterIdToPoints.get(cluster.getId());
1:     if (points != null) {
0:       for (WeightedVectorWritable point : points) {
1:         Vector theVec = point.getVector();
0:         line.append(",");
0:         if (theVec instanceof NamedVector){
1:           line.append(((NamedVector)theVec).getName());
1:         } else {
1:           String vecStr = theVec.asFormatString();
1:           //do some basic manipulations for display
0:           vecStr = vecStr.replaceAll("\\{|\\:|\\,|\\}", "_");
1:           line.append(vecStr);
1:         }
1:       }
0:       writer.append(line).append("\n");
1:     }
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.vectors.io;
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Pattern;
1: public class CSVClusterWriter extends AbstractClusterWriter {
1: 
1:   private static final Pattern VEC_PATTERN = Pattern.compile("\\{|\\:|\\,|\\}");
/////////////////////////////////////////////////////////////////////////
0:     List<WeightedVectorWritable> points = getClusterIdToPoints().get(cluster.getId());
1:         line.append(',');
1:           vecStr = VEC_PATTERN.matcher(vecStr).replaceAll("_");
1:       getWriter().append(line).append("\n");
============================================================================