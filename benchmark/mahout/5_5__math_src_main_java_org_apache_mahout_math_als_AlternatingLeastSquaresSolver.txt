1:7892be3: /**
1:7892be3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7892be3:  * contributor license agreements.  See the NOTICE file distributed with
1:7892be3:  * this work for additional information regarding copyright ownership.
1:7892be3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7892be3:  * (the "License"); you may not use this file except in compliance with
1:7892be3:  * the License.  You may obtain a copy of the License at
1:7892be3:  *
1:7892be3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7892be3:  *
1:7892be3:  * Unless required by applicable law or agreed to in writing, software
1:7892be3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7892be3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7892be3:  * See the License for the specific language governing permissions and
1:7892be3:  * limitations under the License.
1:7892be3:  */
2:7892be3: 
1:7892be3: package org.apache.mahout.math.als;
1:7892be3: 
1:7892be3: import com.google.common.base.Preconditions;
1:81d64c0: import com.google.common.collect.Iterables;
1:7892be3: import org.apache.mahout.math.DenseMatrix;
1:7892be3: import org.apache.mahout.math.Matrix;
1:7892be3: import org.apache.mahout.math.QRDecomposition;
1:7892be3: import org.apache.mahout.math.Vector;
1:e5cc83d: 
1:7892be3: /**
1:6d16230:  * See
1:6d16230:  * <a href="http://www.hpl.hp.com/personal/Robert_Schreiber/papers/2008%20AAIM%20Netflix/netflix_aaim08(submitted).pdf">
1:39fe224:  * this paper.</a>
1:7892be3:  */
1:4fbfbc6: public final class AlternatingLeastSquaresSolver {
1:7892be3: 
1:5d66758:   private AlternatingLeastSquaresSolver() {}
1:7892be3: 
1:63c81f1:   //TODO make feature vectors a simple array
1:229aeff:   public static Vector solve(Iterable<Vector> featureVectors, Vector ratingVector, double lambda, int numFeatures) {
1:7892be3: 
1:cd167f9:     Preconditions.checkNotNull(featureVectors, "Feature Vectors cannot be null");
1:81d64c0:     Preconditions.checkArgument(!Iterables.isEmpty(featureVectors));
1:cd167f9:     Preconditions.checkNotNull(ratingVector, "Rating Vector cannot be null");
1:cd167f9:     Preconditions.checkArgument(ratingVector.getNumNondefaultElements() > 0, "Rating Vector cannot be empty");
1:81d64c0:     Preconditions.checkArgument(Iterables.size(featureVectors) == ratingVector.getNumNondefaultElements());
1:7892be3: 
1:7892be3:     int nui = ratingVector.getNumNondefaultElements();
1:7892be3: 
1:7892be3:     Matrix MiIi = createMiIi(featureVectors, numFeatures);
1:7892be3:     Matrix RiIiMaybeTransposed = createRiIiMaybeTransposed(ratingVector);
1:7892be3: 
1:7892be3:     /* compute Ai = MiIi * t(MiIi) + lambda * nui * E */
1:6d16230:     Matrix Ai = miTimesMiTransposePlusLambdaTimesNuiTimesE(MiIi, lambda, nui);
1:81d64c0:     /* compute Vi = MiIi * t(R(i,Ii)) */
1:7892be3:     Matrix Vi = MiIi.times(RiIiMaybeTransposed);
1:81d64c0:     /* compute Ai * ui = Vi */
1:7892be3:     return solve(Ai, Vi);
1:7892be3:   }
1:7892be3: 
1:5d66758:   private static Vector solve(Matrix Ai, Matrix Vi) {
1:528ffcd:     return new QRDecomposition(Ai).solve(Vi).viewColumn(0);
1:7892be3:   }
1:7892be3: 
1:229aeff:   static Matrix addLambdaTimesNuiTimesE(Matrix matrix, double lambda, int nui) {
1:cd167f9:     Preconditions.checkArgument(matrix.numCols() == matrix.numRows(), "Must be a Square Matrix");
1:e5cc83d:     double lambdaTimesNui = lambda * nui;
1:e5cc83d:     int numCols = matrix.numCols();
1:e5cc83d:     for (int n = 0; n < numCols; n++) {
1:e5cc83d:       matrix.setQuick(n, n, matrix.getQuick(n, n) + lambdaTimesNui);
1:7892be3:     }
1:7892be3:     return matrix;
1:7892be3:   }
1:e5cc83d: 
1:6d16230:   private static Matrix miTimesMiTransposePlusLambdaTimesNuiTimesE(Matrix MiIi, double lambda, int nui) {
1:7892be3: 
1:e5cc83d:     double lambdaTimesNui = lambda * nui;
1:e5cc83d:     int rows = MiIi.numRows();
1:e5cc83d: 
1:e5cc83d:     double[][] result = new double[rows][rows];
1:e5cc83d: 
1:e5cc83d:     for (int i = 0; i < rows; i++) {
1:e5cc83d:       for (int j = i; j < rows; j++) {
1:e5cc83d:         double dot = MiIi.viewRow(i).dot(MiIi.viewRow(j));
1:e5cc83d:         if (i != j) {
1:e5cc83d:           result[i][j] = dot;
1:e5cc83d:           result[j][i] = dot;
1:e5cc83d:         } else {
1:e5cc83d:           result[i][i] = dot + lambdaTimesNui;
1:e5cc83d:         }
1:e5cc83d:       }
1:e5cc83d:     }
1:e5cc83d:     return new DenseMatrix(result, true);
1:e5cc83d:   }
1:e5cc83d: 
1:e5cc83d: 
1:229aeff:   static Matrix createMiIi(Iterable<Vector> featureVectors, int numFeatures) {
1:e5cc83d:     double[][] MiIi =  new double[numFeatures][Iterables.size(featureVectors)];
1:81d64c0:     int n = 0;
1:81d64c0:     for (Vector featureVector : featureVectors) {
1:7892be3:       for (int m = 0; m < numFeatures; m++) {
1:e5cc83d:         MiIi[m][n] = featureVector.getQuick(m);
1:7892be3:       }
1:81d64c0:       n++;
1:7892be3:     }
1:e5cc83d:     return new DenseMatrix(MiIi, true);
1:7892be3:   }
1:7892be3: 
1:229aeff:   static Matrix createRiIiMaybeTransposed(Vector ratingVector) {
1:cd167f9:     Preconditions.checkArgument(ratingVector.isSequentialAccess(), "Ratings should be iterable in Index or Sequential Order");
1:e5cc83d: 
1:e5cc83d:     double[][] RiIiMaybeTransposed = new double[ratingVector.getNumNondefaultElements()][1];
1:7892be3:     int index = 0;
1:dc62944:     for (Vector.Element elem : ratingVector.nonZeroes()) {
1:e5cc83d:       RiIiMaybeTransposed[index++][0] = elem.get();
1:7892be3:     }
1:e5cc83d:     return new DenseMatrix(RiIiMaybeTransposed, true);
1:7892be3:   }
1:7892be3: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkNotNull(featureVectors, "Feature Vectors cannot be null");
1:     Preconditions.checkNotNull(ratingVector, "Rating Vector cannot be null");
1:     Preconditions.checkArgument(ratingVector.getNumNondefaultElements() > 0, "Rating Vector cannot be empty");
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(matrix.numCols() == matrix.numRows(), "Must be a Square Matrix");
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(ratingVector.isSequentialAccess(), "Ratings should be iterable in Index or Sequential Order");
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     for (Vector.Element elem : ratingVector.nonZeroes()) {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:  * See
1:  * <a href="http://www.hpl.hp.com/personal/Robert_Schreiber/papers/2008%20AAIM%20Netflix/netflix_aaim08(submitted).pdf">
/////////////////////////////////////////////////////////////////////////
1:     Matrix Ai = miTimesMiTransposePlusLambdaTimesNuiTimesE(MiIi, lambda, nui);
/////////////////////////////////////////////////////////////////////////
1:   private static Matrix miTimesMiTransposePlusLambdaTimesNuiTimesE(Matrix MiIi, double lambda, int nui) {
commit:5d66758
/////////////////////////////////////////////////////////////////////////
1:   private AlternatingLeastSquaresSolver() {}
/////////////////////////////////////////////////////////////////////////
1:   private static Vector solve(Matrix Ai, Matrix Vi) {
/////////////////////////////////////////////////////////////////////////
0:   private static Matrix MiTimesMiTransposePlusLambdaTimesNuiTimesE(Matrix MiIi, double lambda, int nui) {
commit:63c81f1
/////////////////////////////////////////////////////////////////////////
1:   //TODO make feature vectors a simple array
commit:e5cc83d
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:     Matrix Ai = MiTimesMiTransposePlusLambdaTimesNuiTimesE(MiIi, lambda, nui);
/////////////////////////////////////////////////////////////////////////
1:     double lambdaTimesNui = lambda * nui;
1:     int numCols = matrix.numCols();
1:     for (int n = 0; n < numCols; n++) {
1:       matrix.setQuick(n, n, matrix.getQuick(n, n) + lambdaTimesNui);
0:   static Matrix MiTimesMiTransposePlusLambdaTimesNuiTimesE(Matrix MiIi, double lambda, int nui) {
1: 
1:     double lambdaTimesNui = lambda * nui;
1:     int rows = MiIi.numRows();
1: 
1:     double[][] result = new double[rows][rows];
1: 
1:     for (int i = 0; i < rows; i++) {
1:       for (int j = i; j < rows; j++) {
1:         double dot = MiIi.viewRow(i).dot(MiIi.viewRow(j));
1:         if (i != j) {
1:           result[i][j] = dot;
1:           result[j][i] = dot;
1:         } else {
1:           result[i][i] = dot + lambdaTimesNui;
1:         }
1:       }
1:     }
1:     return new DenseMatrix(result, true);
1:   }
1: 
1: 
1:     double[][] MiIi =  new double[numFeatures][Iterables.size(featureVectors)];
1:         MiIi[m][n] = featureVector.getQuick(m);
1:     return new DenseMatrix(MiIi, true);
1: 
1:     double[][] RiIiMaybeTransposed = new double[ratingVector.getNumNondefaultElements()][1];
1:       RiIiMaybeTransposed[index++][0] = elem.get();
1:     return new DenseMatrix(RiIiMaybeTransposed, true);
commit:d317c1c
/////////////////////////////////////////////////////////////////////////
0:         MiIi.setQuick(m, n, featureVector.getQuick(m));
commit:3631151
/////////////////////////////////////////////////////////////////////////
0: public class AlternatingLeastSquaresSolver {
commit:81d64c0
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Iterables;
/////////////////////////////////////////////////////////////////////////
0:   public Vector solve(Iterable<Vector> featureVectors, Vector ratingVector, double lambda, int numFeatures) {
1:     Preconditions.checkArgument(!Iterables.isEmpty(featureVectors));
0:     Preconditions.checkNotNull(ratingVector, "rating vector cannot be null");
0:     Preconditions.checkArgument(ratingVector.getNumNondefaultElements() > 0, "Rating vector cannot be empty");
1:     Preconditions.checkArgument(Iterables.size(featureVectors) == ratingVector.getNumNondefaultElements());
/////////////////////////////////////////////////////////////////////////
1:     /* compute Vi = MiIi * t(R(i,Ii)) */
1:     /* compute Ai * ui = Vi */
0:   protected Vector solve(Matrix Ai, Matrix Vi) {
0:       matrix.setQuick(n, n, matrix.getQuick(n, n) + lambda * nui);
0:   protected Matrix createMiIi(Iterable<Vector> featureVectors, int numFeatures) {
0:     Matrix MiIi = new DenseMatrix(numFeatures, Iterables.size(featureVectors));
1:     int n = 0;
1:     for (Vector featureVector : featureVectors) {
1:       n++;
commit:c181b9f
/////////////////////////////////////////////////////////////////////////
0:     Preconditions.checkNotNull(featureVectors, "Feature vectors cannot be null");
0:     Preconditions.checkNotNull(ratingVector, "Rating vector cannot be null");
commit:7892be3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.als;
1: 
1: import com.google.common.base.Preconditions;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.QRDecomposition;
1: import org.apache.mahout.math.Vector;
1: 
0: import java.util.Iterator;
0: import java.util.List;
1: 
1: /**
0:  * {@see http://www.hpl.hp.com/personal/Robert_Schreiber/papers/2008%20AAIM%20Netflix/netflix_aaim08(submitted).pdf}
1:  */
0: public class AlternateLeastSquaresSolver {
1: 
0:   public Vector solve(List<Vector> featureVectors, Vector ratingVector, double lambda, int numFeatures) {
1: 
0:     Preconditions.checkNotNull(featureVectors);
0:     Preconditions.checkArgument(!featureVectors.isEmpty());
0:     Preconditions.checkNotNull(ratingVector);    
0:     Preconditions.checkArgument(featureVectors.size() == ratingVector.getNumNondefaultElements());
1: 
1:     int nui = ratingVector.getNumNondefaultElements();
1: 
1:     Matrix MiIi = createMiIi(featureVectors, numFeatures);
1:     Matrix RiIiMaybeTransposed = createRiIiMaybeTransposed(ratingVector);
1: 
1:     /* compute Ai = MiIi * t(MiIi) + lambda * nui * E */
0:     Matrix Ai = addLambdaTimesNuiTimesE(MiIi.times(MiIi.transpose()), lambda, nui);
0:     /* compute Vi = MIi * t(R(i,Ii)) */
1:     Matrix Vi = MiIi.times(RiIiMaybeTransposed);
0:     /* compute ui = inverse(Ai) * Vi */
1:     return solve(Ai, Vi);
1:   }
1: 
0:   Vector solve(Matrix Ai, Matrix Vi) {
0:     return new QRDecomposition(Ai).solve(Vi).getColumn(0);
1:   }
1: 
0:   protected Matrix addLambdaTimesNuiTimesE(Matrix matrix, double lambda, int nui) {
0:     Preconditions.checkArgument(matrix.numCols() == matrix.numRows());
0:     double lambdaTimesNui = lambda * nui;
0:     for (int n = 0; n < matrix.numCols(); n++) {
0:       matrix.setQuick(n, n, matrix.getQuick(n, n) + lambdaTimesNui);
1:     }
1:     return matrix;
1:   }
1: 
0:   protected Matrix createMiIi(List<Vector> featureVectors, int numFeatures) {
0:     Matrix MiIi = new DenseMatrix(numFeatures, featureVectors.size());
0:     for (int n = 0; n < featureVectors.size(); n++) {
0:       Vector featureVector = featureVectors.get(n);
1:       for (int m = 0; m < numFeatures; m++) {
0:         MiIi.setQuick(m, n, featureVector.get(m));
1:       }
1:     }
0:     return MiIi;
1:   }
1: 
0:   protected Matrix createRiIiMaybeTransposed(Vector ratingVector) {
0:     Preconditions.checkArgument(ratingVector.isSequentialAccess());
0:     Matrix RiIiMaybeTransposed = new DenseMatrix(ratingVector.getNumNondefaultElements(), 1);
0:     Iterator<Vector.Element> ratingsIterator = ratingVector.iterateNonZero();
1:     int index = 0;
0:     while (ratingsIterator.hasNext()) {
0:       Vector.Element elem = ratingsIterator.next();
0:       RiIiMaybeTransposed.setQuick(index++, 0, elem.get());
1:     }
0:     return RiIiMaybeTransposed;
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0:   private AlternatingLeastSquaresSolver() {
0:   }
0: 
1:   public static Vector solve(Iterable<Vector> featureVectors, Vector ratingVector, double lambda, int numFeatures) {
/////////////////////////////////////////////////////////////////////////
0:   static Vector solve(Matrix Ai, Matrix Vi) {
1:   static Matrix addLambdaTimesNuiTimesE(Matrix matrix, double lambda, int nui) {
/////////////////////////////////////////////////////////////////////////
1:   static Matrix createMiIi(Iterable<Vector> featureVectors, int numFeatures) {
/////////////////////////////////////////////////////////////////////////
1:   static Matrix createRiIiMaybeTransposed(Vector ratingVector) {
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: public final class AlternatingLeastSquaresSolver {
/////////////////////////////////////////////////////////////////////////
0:   Vector solve(Matrix Ai, Matrix Vi) {
0:   Matrix addLambdaTimesNuiTimesE(Matrix matrix, double lambda, int nui) {
/////////////////////////////////////////////////////////////////////////
0:   Matrix createMiIi(Iterable<Vector> featureVectors, int numFeatures) {
/////////////////////////////////////////////////////////////////////////
0:   Matrix createRiIiMaybeTransposed(Vector ratingVector) {
commit:39fe224
/////////////////////////////////////////////////////////////////////////
0:  * See <a href="http://www.hpl.hp.com/personal/Robert_Schreiber/papers/2008%20AAIM%20Netflix/netflix_aaim08(submitted).pdf">
1:  * this paper.</a>
author:Ted Dunning
-------------------------------------------------------------------------------
commit:528ffcd
/////////////////////////////////////////////////////////////////////////
1:     return new QRDecomposition(Ai).solve(Vi).viewColumn(0);
============================================================================