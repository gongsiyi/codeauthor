1:dd56a29: /**
1:dd56a29:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dd56a29:  * contributor license agreements.  See the NOTICE file distributed with
1:dd56a29:  * this work for additional information regarding copyright ownership.
1:dd56a29:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dd56a29:  * (the "License"); you may not use this file except in compliance with
1:dd56a29:  * the License.  You may obtain a copy of the License at
1:dd56a29:  *
1:dd56a29:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dd56a29:  *
1:dd56a29:  * Unless required by applicable law or agreed to in writing, software
1:dd56a29:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dd56a29:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dd56a29:  * See the License for the specific language governing permissions and
1:dd56a29:  * limitations under the License.
1:dd56a29:  */
2:dd56a29: 
1:dd56a29: package org.apache.mahout.utils.vectors.lucene;
1:dd56a29: 
1:dd56a29: import com.google.common.collect.Sets;
1:dd56a29: import com.google.common.io.Closeables;
1:dd56a29: import org.apache.hadoop.conf.Configuration;
1:dd56a29: import org.apache.hadoop.fs.FileSystem;
1:dd56a29: import org.apache.hadoop.fs.Path;
1:dd56a29: import org.apache.hadoop.io.IntWritable;
1:dd56a29: import org.apache.hadoop.io.SequenceFile;
1:dd56a29: import org.apache.hadoop.io.Text;
1:dd56a29: import org.apache.lucene.analysis.Analyzer;
1:dd56a29: import org.apache.lucene.analysis.standard.StandardAnalyzer;
1:dd56a29: import org.apache.lucene.document.Document;
1:dd56a29: import org.apache.lucene.document.Field;
1:dd56a29: import org.apache.lucene.document.FieldType;
1:4d0cd66: import org.apache.lucene.index.IndexOptions;
1:dd56a29: import org.apache.lucene.index.IndexWriter;
1:dd56a29: import org.apache.lucene.index.IndexWriterConfig;
1:dd56a29: import org.apache.lucene.store.Directory;
1:dd56a29: import org.apache.lucene.store.SimpleFSDirectory;
1:dd56a29: import org.apache.mahout.common.MahoutTestCase;
1:dd56a29: import org.junit.Before;
1:dd56a29: import org.junit.Test;
1:dd56a29: 
1:dd56a29: import java.io.File;
1:dd56a29: import java.io.IOException;
1:4d0cd66: import java.nio.file.Paths;
1:dd56a29: import java.util.Set;
1:dd56a29: 
1:dd56a29: public class DriverTest extends MahoutTestCase {
1:dd56a29: 
1:dd56a29:   private File indexDir;
1:dd56a29:   private File outputDir;
1:dd56a29:   private Configuration conf;
1:dd56a29: 
1:dd56a29:   @Before
1:dd56a29:   @Override
1:dd56a29:   public void setUp() throws Exception {
1:dd56a29:     super.setUp();
1:dd56a29:     indexDir = getTestTempDir("intermediate");
1:dd56a29:     indexDir.delete();
1:dd56a29:     outputDir = getTestTempDir("output");
1:dd56a29:     outputDir.delete();
1:dd56a29: 
1:921e201:     conf = getConfiguration();
1:dd56a29:   }
1:dd56a29: 
1:dd56a29:   private Document asDocument(String line) {
1:dd56a29:     Document doc = new Document();
1:dd56a29:     doc.add(new TextFieldWithTermVectors("text", line));
1:dd56a29:     return doc;
1:dd56a29:   }
1:dd56a29: 
1:dd56a29:   static class TextFieldWithTermVectors extends Field {
1:dd56a29: 
1:dd56a29:     public static final FieldType TYPE = new FieldType();
1:dd56a29: 
1:dd56a29:     static {
1:dd56a29:       TYPE.setOmitNorms(true);
1:4d0cd66:       TYPE.setIndexOptions(IndexOptions.DOCS_AND_FREQS);
1:dd56a29:       TYPE.setStored(true);
1:dd56a29:       TYPE.setTokenized(true);
1:dd56a29:       TYPE.setStoreTermVectors(true);
1:dd56a29:       TYPE.freeze();
1:dd56a29:     }
1:dd56a29: 
1:dd56a29:     public TextFieldWithTermVectors(String name, String value) {
1:dd56a29:       super(name, value, TYPE);
1:dd56a29:     }
1:dd56a29:   }
1:dd56a29: 
1:dd56a29:   @Test
1:dd56a29:   public void sequenceFileDictionary() throws IOException {
1:dd56a29: 
1:4d0cd66:     Directory index = new SimpleFSDirectory(Paths.get(indexDir.getAbsolutePath()));
1:4d0cd66:     Analyzer analyzer = new StandardAnalyzer();
1:4d0cd66:     IndexWriterConfig config = new IndexWriterConfig(analyzer);
1:4d0cd66:     config.setCommitOnClose(true);
1:dd56a29:     final IndexWriter writer = new IndexWriter(index, config);
1:dd56a29: 
1:dd56a29:     try {
1:dd56a29:       writer.addDocument(asDocument("One Ring to rule them all"));
1:dd56a29:       writer.addDocument(asDocument("One Ring to find them,"));
1:dd56a29:       writer.addDocument(asDocument("One Ring to bring them all"));
1:dd56a29:       writer.addDocument(asDocument("and in the darkness bind them"));
1:dd56a29:     } finally {
1:4d0cd66:       writer.close();
1:dd56a29:     }
1:dd56a29: 
1:dd56a29:     File seqDict = new File(outputDir, "dict.seq");
1:dd56a29: 
1:dd56a29:     Driver.main(new String[] {
1:dd56a29:         "--dir", indexDir.getAbsolutePath(),
1:dd56a29:         "--output", new File(outputDir, "out").getAbsolutePath(),
1:dd56a29:         "--field", "text",
1:dd56a29:         "--dictOut", new File(outputDir, "dict.txt").getAbsolutePath(),
1:dd56a29:         "--seqDictOut", seqDict.getAbsolutePath(),
1:dd56a29:     });
1:dd56a29: 
1:dd56a29:     SequenceFile.Reader reader = null;
1:dd56a29:     Set<String> indexTerms = Sets.newHashSet();
1:dd56a29:     try {
1:dd56a29:       reader = new SequenceFile.Reader(FileSystem.getLocal(conf), new Path(seqDict.getAbsolutePath()), conf);
1:dd56a29:       Text term = new Text();
1:dd56a29:       IntWritable termIndex = new IntWritable();
1:dd56a29: 
1:dd56a29:       while (reader.next(term, termIndex)) {
1:dd56a29:         indexTerms.add(term.toString());
1:dd56a29:       }
1:dd56a29:     } finally {
1:31cb292:       Closeables.close(reader, true);
1:dd56a29:     }
1:dd56a29: 
1:dd56a29:     Set<String> expectedIndexTerms = Sets.newHashSet("all", "bind", "bring", "darkness", "find", "one", "ring", "rule");
1:dd56a29: 
1:dd56a29:     // should contain the same terms as expected
1:dd56a29:     assertEquals(expectedIndexTerms.size(), Sets.union(expectedIndexTerms, indexTerms).size());
1:dd56a29:   }
1:dd56a29: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:4d0cd66
/////////////////////////////////////////////////////////////////////////
1: import org.apache.lucene.index.IndexOptions;
1: import java.nio.file.Paths;
/////////////////////////////////////////////////////////////////////////
1:       TYPE.setIndexOptions(IndexOptions.DOCS_AND_FREQS);
/////////////////////////////////////////////////////////////////////////
1:     Directory index = new SimpleFSDirectory(Paths.get(indexDir.getAbsolutePath()));
1:     Analyzer analyzer = new StandardAnalyzer();
1:     IndexWriterConfig config = new IndexWriterConfig(analyzer);
1:     config.setCommitOnClose(true);
/////////////////////////////////////////////////////////////////////////
1:       writer.close();
commit:c88c240
/////////////////////////////////////////////////////////////////////////
0:     Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_45);
0:     IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_45, analyzer);
author:frankscholten
-------------------------------------------------------------------------------
commit:2e5449f
/////////////////////////////////////////////////////////////////////////
0:     Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_46);
0:     IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_46, analyzer);
author:sslavic
-------------------------------------------------------------------------------
commit:921e201
/////////////////////////////////////////////////////////////////////////
1:     conf = getConfiguration();
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(reader, true);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:dd56a29
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.utils.vectors.lucene;
1: 
1: import com.google.common.collect.Sets;
1: import com.google.common.io.Closeables;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.Text;
1: import org.apache.lucene.analysis.Analyzer;
1: import org.apache.lucene.analysis.standard.StandardAnalyzer;
1: import org.apache.lucene.document.Document;
1: import org.apache.lucene.document.Field;
1: import org.apache.lucene.document.FieldType;
0: import org.apache.lucene.index.FieldInfo;
1: import org.apache.lucene.index.IndexWriter;
1: import org.apache.lucene.index.IndexWriterConfig;
1: import org.apache.lucene.store.Directory;
1: import org.apache.lucene.store.SimpleFSDirectory;
0: import org.apache.lucene.util.Version;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Set;
1: 
1: public class DriverTest extends MahoutTestCase {
1: 
1:   private File indexDir;
1:   private File outputDir;
1:   private Configuration conf;
1: 
1:   @Before
1:   @Override
1:   public void setUp() throws Exception {
1:     super.setUp();
1:     indexDir = getTestTempDir("intermediate");
1:     indexDir.delete();
1:     outputDir = getTestTempDir("output");
1:     outputDir.delete();
1: 
0:     conf = new Configuration();
1:   }
1: 
1:   private Document asDocument(String line) {
1:     Document doc = new Document();
1:     doc.add(new TextFieldWithTermVectors("text", line));
1:     return doc;
1:   }
1: 
1:   static class TextFieldWithTermVectors extends Field {
1: 
1:     public static final FieldType TYPE = new FieldType();
1: 
1:     static {
0:       TYPE.setIndexed(true);
1:       TYPE.setOmitNorms(true);
0:       TYPE.setIndexOptions(FieldInfo.IndexOptions.DOCS_AND_FREQS);
1:       TYPE.setStored(true);
1:       TYPE.setTokenized(true);
1:       TYPE.setStoreTermVectors(true);
1:       TYPE.freeze();
1:     }
1: 
1:     public TextFieldWithTermVectors(String name, String value) {
1:       super(name, value, TYPE);
1:     }
1:   }
1: 
1:   @Test
1:   public void sequenceFileDictionary() throws IOException {
1: 
0:     Directory index = new SimpleFSDirectory(indexDir);
0:     Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_43);
0:     IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_43, analyzer);
1:     final IndexWriter writer = new IndexWriter(index, config);
1: 
1:     try {
1:       writer.addDocument(asDocument("One Ring to rule them all"));
1:       writer.addDocument(asDocument("One Ring to find them,"));
1:       writer.addDocument(asDocument("One Ring to bring them all"));
1:       writer.addDocument(asDocument("and in the darkness bind them"));
1: 
1:     } finally {
0:       writer.close(true);
1:     }
1: 
1:     File seqDict = new File(outputDir, "dict.seq");
1: 
1:     Driver.main(new String[] {
1:         "--dir", indexDir.getAbsolutePath(),
1:         "--output", new File(outputDir, "out").getAbsolutePath(),
1:         "--field", "text",
1:         "--dictOut", new File(outputDir, "dict.txt").getAbsolutePath(),
1:         "--seqDictOut", seqDict.getAbsolutePath(),
1:     });
1: 
1:     SequenceFile.Reader reader = null;
1:     Set<String> indexTerms = Sets.newHashSet();
1:     try {
1:       reader = new SequenceFile.Reader(FileSystem.getLocal(conf), new Path(seqDict.getAbsolutePath()), conf);
1:       Text term = new Text();
1:       IntWritable termIndex = new IntWritable();
1: 
1:       while (reader.next(term, termIndex)) {
1:         indexTerms.add(term.toString());
1:       }
1:     } finally {
0:       Closeables.closeQuietly(reader);
1:     }
1: 
1:     Set<String> expectedIndexTerms = Sets.newHashSet("all", "bind", "bring", "darkness", "find", "one", "ring", "rule");
1: 
1:     // should contain the same terms as expected
1:     assertEquals(expectedIndexTerms.size(), Sets.union(expectedIndexTerms, indexTerms).size());
1:   }
1: }
============================================================================