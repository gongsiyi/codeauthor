1:f43adfe: /*
1:f43adfe:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f43adfe:  * contributor license agreements.  See the NOTICE file distributed with
1:f43adfe:  * this work for additional information regarding copyright ownership.
1:f43adfe:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f43adfe:  * (the "License"); you may not use this file except in compliance with
1:f43adfe:  * the License.  You may obtain a copy of the License at
1:f43adfe:  *
1:f43adfe:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f43adfe:  *
1:f43adfe:  * Unless required by applicable law or agreed to in writing, software
1:f43adfe:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f43adfe:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f43adfe:  * See the License for the specific language governing permissions and
1:f43adfe:  * limitations under the License.
1:f43adfe:  */
1:f43adfe: 
1:f43adfe: package org.apache.mahout.math;
1:f43adfe: 
1:f43adfe: import org.apache.mahout.math.function.Functions;
1:f43adfe: import org.apache.mahout.math.solver.EigenDecomposition;
1:f43adfe: import org.junit.Test;
1:f43adfe: 
1:f43adfe: public class DenseSymmetricTest extends MahoutTestCase {
1:f43adfe:   @Test
1:f43adfe:   public void testBasics() {
1:f43adfe:     Matrix a = new DenseSymmetricMatrix(new double[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, false);
1:f43adfe:     System.out.println(a.toString());
1:f43adfe: 
1:f43adfe:     assertEquals(0, a.viewDiagonal().minus(new DenseVector(new double[]{1, 5, 8, 10})).norm(1), 1.0e-10);
1:f43adfe:     assertEquals(0, a.viewPart(0, 3, 1, 3).viewDiagonal().minus(
1:f43adfe:         new DenseVector(new double[]{2, 6, 9})).norm(1), 1.0e-10);
1:f43adfe:     assertEquals(4, a.get(0, 3), 1.0e-10);
1:f43adfe:     System.out.println(a);
1:f43adfe: 
1:f43adfe:     Matrix m = new DenseMatrix(4, 4).assign(a);
1:f43adfe:     assertEquals(0, m.minus(a).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:f43adfe:     System.out.println(m);
1:f43adfe: 
1:f43adfe:     assertEquals(0, m.transpose().times(m).minus(a.transpose().times(a)).aggregate(
1:f43adfe:         Functions.PLUS, Functions.ABS), 1.0e-10);
1:f43adfe: 
1:f43adfe:     System.out.println(a.plus(a));
1:f43adfe:     assertEquals(0, m.plus(m).minus(a.plus(a)).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:f43adfe:   }
1:f43adfe: 
1:f43adfe:   @Test
1:f43adfe:   public void testEigen() {
1:f43adfe:     Matrix a = new DenseSymmetricMatrix(new double[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, false);
1:f43adfe:     Matrix b = new DenseMatrix(a.numRows(), a.numCols());
1:f43adfe:     b.assign(a);
1:f43adfe: 
1:f43adfe:     assertEquals(0, a.minus(b).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:f43adfe: 
1:f43adfe:     EigenDecomposition edA = new EigenDecomposition(a);
1:f43adfe:     EigenDecomposition edB = new EigenDecomposition(b);
1:f43adfe: 
1:f43adfe:     System.out.println(edA.getV());
1:f43adfe: 
1:f43adfe:     assertEquals(0, edA.getV().minus(edB.getV()).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:f43adfe:     assertEquals(0, edA.getRealEigenvalues().minus(edA.getRealEigenvalues()).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:f43adfe: 
1:f43adfe:   }
1:f43adfe: 
1:f43adfe: }
============================================================================
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:f43adfe
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.math.function.Functions;
1: import org.apache.mahout.math.solver.EigenDecomposition;
1: import org.junit.Test;
1: 
1: public class DenseSymmetricTest extends MahoutTestCase {
1:   @Test
1:   public void testBasics() {
1:     Matrix a = new DenseSymmetricMatrix(new double[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, false);
1:     System.out.println(a.toString());
1: 
1:     assertEquals(0, a.viewDiagonal().minus(new DenseVector(new double[]{1, 5, 8, 10})).norm(1), 1.0e-10);
1:     assertEquals(0, a.viewPart(0, 3, 1, 3).viewDiagonal().minus(
1:         new DenseVector(new double[]{2, 6, 9})).norm(1), 1.0e-10);
1:     assertEquals(4, a.get(0, 3), 1.0e-10);
1:     System.out.println(a);
1: 
1:     Matrix m = new DenseMatrix(4, 4).assign(a);
1:     assertEquals(0, m.minus(a).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:     System.out.println(m);
1: 
1:     assertEquals(0, m.transpose().times(m).minus(a.transpose().times(a)).aggregate(
1:         Functions.PLUS, Functions.ABS), 1.0e-10);
1: 
1:     System.out.println(a.plus(a));
1:     assertEquals(0, m.plus(m).minus(a.plus(a)).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:   }
1: 
1:   @Test
1:   public void testEigen() {
1:     Matrix a = new DenseSymmetricMatrix(new double[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, false);
1:     Matrix b = new DenseMatrix(a.numRows(), a.numCols());
1:     b.assign(a);
1: 
1:     assertEquals(0, a.minus(b).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1: 
1:     EigenDecomposition edA = new EigenDecomposition(a);
1:     EigenDecomposition edB = new EigenDecomposition(b);
1: 
1:     System.out.println(edA.getV());
1: 
1:     assertEquals(0, edA.getV().minus(edB.getV()).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:     assertEquals(0, edA.getRealEigenvalues().minus(edA.getRealEigenvalues()).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1: 
1:   }
1: 
1: }
============================================================================