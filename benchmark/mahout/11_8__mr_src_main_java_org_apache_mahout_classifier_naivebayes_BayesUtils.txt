1:e3fb0c4: /**
1:e3fb0c4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e3fb0c4:  * contributor license agreements.  See the NOTICE file distributed with
1:e3fb0c4:  * this work for additional information regarding copyright ownership.
1:e3fb0c4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e3fb0c4:  * (the "License"); you may not use this file except in compliance with
1:e3fb0c4:  * the License.  You may obtain a copy of the License at
1:e3fb0c4:  *
1:e3fb0c4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e3fb0c4:  *
1:e3fb0c4:  * Unless required by applicable law or agreed to in writing, software
1:e3fb0c4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e3fb0c4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e3fb0c4:  * See the License for the specific language governing permissions and
1:e3fb0c4:  * limitations under the License.
1:e3fb0c4:  */
4:e3fb0c4: 
1:29a7f38: package org.apache.mahout.classifier.naivebayes;
1:e3fb0c4: 
1:e73fdb8: import com.google.common.base.Preconditions;
1:e3fb0c4: import java.io.IOException;
1:3cadef9: import java.util.Collection;
1:29a7f38: import java.util.HashMap;
1:85f9ece: import java.util.HashSet;
1:e3fb0c4: import java.util.Map;
1:3cadef9: import java.util.regex.Pattern;
1:e3fb0c4: import org.apache.hadoop.conf.Configuration;
1:e3fb0c4: import org.apache.hadoop.fs.FileSystem;
1:e3fb0c4: import org.apache.hadoop.fs.Path;
1:e3fb0c4: import org.apache.hadoop.io.IntWritable;
1:e3fb0c4: import org.apache.hadoop.io.SequenceFile;
1:e3fb0c4: import org.apache.hadoop.io.Text;
1:e3fb0c4: import org.apache.hadoop.io.Writable;
1:29a7f38: import org.apache.mahout.classifier.naivebayes.training.ThetaMapper;
1:29a7f38: import org.apache.mahout.classifier.naivebayes.training.TrainNaiveBayesJob;
1:29a7f38: import org.apache.mahout.common.HadoopUtil;
1:e3fb0c4: import org.apache.mahout.common.Pair;
1:e3fb0c4: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1:e3fb0c4: import org.apache.mahout.common.iterator.sequencefile.PathType;
1:e3fb0c4: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;
1:e3fb0c4: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
1:e3fb0c4: import org.apache.mahout.math.Matrix;
1:e3fb0c4: import org.apache.mahout.math.SparseMatrix;
1:e3fb0c4: import org.apache.mahout.math.Vector;
1:e3fb0c4: import org.apache.mahout.math.VectorWritable;
1:e3fb0c4: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1:e3fb0c4: 
1:4194a28: public final class BayesUtils {
1:e3fb0c4: 
1:229aeff:   private static final Pattern SLASH = Pattern.compile("/");
1:e3fb0c4: 
1:29a7f38:   private BayesUtils() {}
1:e3fb0c4: 
1:29a7f38:   public static NaiveBayesModel readModelFromDir(Path base, Configuration conf) {
1:e3fb0c4: 
1:b59e468:     float alphaI = conf.getFloat(ThetaMapper.ALPHA_I, 1.0f);
1:9a5bab5:     boolean isComplementary = conf.getBoolean(NaiveBayesModel.COMPLEMENTARY_MODEL, true);
1:e3fb0c4: 
1:e3fb0c4:     // read feature sums and label sums
1:e3fb0c4:     Vector scoresPerLabel = null;
1:e3fb0c4:     Vector scoresPerFeature = null;
1:e3fb0c4:     for (Pair<Text,VectorWritable> record : new SequenceFileDirIterable<Text, VectorWritable>(
1:e3fb0c4:         new Path(base, TrainNaiveBayesJob.WEIGHTS), PathType.LIST, PathFilters.partFilter(), conf)) {
1:e3fb0c4:       String key = record.getFirst().toString();
1:e3fb0c4:       VectorWritable value = record.getSecond();
1:e3fb0c4:       if (key.equals(TrainNaiveBayesJob.WEIGHTS_PER_FEATURE)) {
1:e3fb0c4:         scoresPerFeature = value.get();
1:e3fb0c4:       } else if (key.equals(TrainNaiveBayesJob.WEIGHTS_PER_LABEL)) {
1:e3fb0c4:         scoresPerLabel = value.get();
1:e3fb0c4:       }
1:e3fb0c4:     }
1:fa29726: 
1:e3fb0c4:     Preconditions.checkNotNull(scoresPerFeature);
1:e3fb0c4:     Preconditions.checkNotNull(scoresPerLabel);
1:e3fb0c4: 
1:95f836b:     Matrix scoresPerLabelAndFeature = new SparseMatrix(scoresPerLabel.size(), scoresPerFeature.size());
1:e3fb0c4:     for (Pair<IntWritable,VectorWritable> entry : new SequenceFileDirIterable<IntWritable,VectorWritable>(
1:e3fb0c4:         new Path(base, TrainNaiveBayesJob.SUMMED_OBSERVATIONS), PathType.LIST, PathFilters.partFilter(), conf)) {
1:e3fb0c4:       scoresPerLabelAndFeature.assignRow(entry.getFirst().get(), entry.getSecond().get());
1:e3fb0c4:     }
1:e3fb0c4:     
1:9a5bab5:     // perLabelThetaNormalizer is only used by the complementary model, we do not instantiate it for the standard model
1:9a5bab5:     Vector perLabelThetaNormalizer = null;
1:9a5bab5:     if (isComplementary) {
1:9a5bab5:       perLabelThetaNormalizer=scoresPerLabel.like();    
1:fa29726:       for (Pair<Text,VectorWritable> entry : new SequenceFileDirIterable<Text,VectorWritable>(
1:9a5bab5:           new Path(base, TrainNaiveBayesJob.THETAS), PathType.LIST, PathFilters.partFilter(), conf)) {
1:9a5bab5:         if (entry.getFirst().toString().equals(TrainNaiveBayesJob.LABEL_THETA_NORMALIZER)) {
1:28a9e82:           perLabelThetaNormalizer = entry.getSecond().get();
1:9a5bab5:         }
1:9a5bab5:       }
1:28a9e82:       Preconditions.checkNotNull(perLabelThetaNormalizer);
1:9a5bab5:     }
1:9a5bab5:      
1:28a9e82:     return new NaiveBayesModel(scoresPerLabelAndFeature, scoresPerFeature, scoresPerLabel, perLabelThetaNormalizer,
1:9a5bab5:         alphaI, isComplementary);
1:e3fb0c4:   }
1:e3fb0c4: 
1:e3fb0c4:   /** Write the list of labels into a map file */
1:29a7f38:   public static int writeLabelIndex(Configuration conf, Iterable<String> labels, Path indexPath)
1:6d16230:     throws IOException {
1:e3fb0c4:     FileSystem fs = FileSystem.get(indexPath.toUri(), conf);
1:e3fb0c4:     int i = 0;
1:e73fdb8:     try (SequenceFile.Writer writer =
1:e73fdb8:            SequenceFile.createWriter(fs.getConf(), SequenceFile.Writer.file(indexPath),
1:e73fdb8:              SequenceFile.Writer.keyClass(Text.class), SequenceFile.Writer.valueClass(IntWritable.class))) {
1:e3fb0c4:       for (String label : labels) {
1:e3fb0c4:         writer.append(new Text(label), new IntWritable(i++));
1:e3fb0c4:       }
1:e3fb0c4:     }
1:29a7f38:     return i;
1:e3fb0c4:   }
1:e3fb0c4: 
1:4194a28:   public static int writeLabelIndex(Configuration conf, Path indexPath,
1:564c3e1:                                     Iterable<Pair<Text,IntWritable>> labels) throws IOException {
1:29a7f38:     FileSystem fs = FileSystem.get(indexPath.toUri(), conf);
1:85f9ece:     Collection<String> seen = new HashSet<>();
2:29a7f38:     int i = 0;
1:e73fdb8:     try (SequenceFile.Writer writer =
1:e73fdb8:            SequenceFile.createWriter(fs.getConf(), SequenceFile.Writer.file(indexPath),
1:e73fdb8:              SequenceFile.Writer.keyClass(Text.class), SequenceFile.Writer.valueClass(IntWritable.class))){
1:29a7f38:       for (Object label : labels) {
1:229aeff:         String theLabel = SLASH.split(((Pair<?, ?>) label).getFirst().toString())[1];
1:e64dd36:         if (!seen.contains(theLabel)) {
1:29a7f38:           writer.append(new Text(theLabel), new IntWritable(i++));
1:29a7f38:           seen.add(theLabel);
1:e3fb0c4:         }
1:e3fb0c4:       }
1:e3fb0c4:     }
1:29a7f38:     return i;
1:e3fb0c4:   }
1:e3fb0c4: 
1:4194a28:   public static Map<Integer, String> readLabelIndex(Configuration conf, Path indexPath) {
1:87c15be:     Map<Integer, String> labelMap = new HashMap<>();
1:564c3e1:     for (Pair<Text, IntWritable> pair : new SequenceFileIterable<Text, IntWritable>(indexPath, true, conf)) {
1:29a7f38:       labelMap.put(pair.getSecond().get(), pair.getFirst().toString());
1:e3fb0c4:     }
1:29a7f38:     return labelMap;
5:29a7f38:   }
1:e3fb0c4: 
1:29a7f38:   public static OpenObjectIntHashMap<String> readIndexFromCache(Configuration conf) throws IOException {
1:87c15be:     OpenObjectIntHashMap<String> index = new OpenObjectIntHashMap<>();
1:6d16230:     for (Pair<Writable,IntWritable> entry
1:6d9179e:         : new SequenceFileIterable<Writable,IntWritable>(HadoopUtil.getSingleCachedFile(conf), conf)) {
1:e3fb0c4:       index.put(entry.getFirst().toString(), entry.getSecond().get());
1:e3fb0c4:     }
1:e3fb0c4:     return index;
1:e3fb0c4:   }
1:e3fb0c4: 
1:29a7f38:   public static Map<String,Vector> readScoresFromCache(Configuration conf) throws IOException {
1:85f9ece:     Map<String,Vector> sumVectors = new HashMap<>();
1:6d16230:     for (Pair<Text,VectorWritable> entry
1:6d9179e:         : new SequenceFileDirIterable<Text,VectorWritable>(HadoopUtil.getSingleCachedFile(conf),
1:6d16230:           PathType.LIST, PathFilters.partFilter(), conf)) {
1:e3fb0c4:       sumVectors.put(entry.getFirst().toString(), entry.getSecond().get());
1:e3fb0c4:     }
1:e3fb0c4:     return sumVectors;
1:e3fb0c4:   }
1:e3fb0c4: 
1:e3fb0c4: 
1:e3fb0c4: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:e73fdb8
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
/////////////////////////////////////////////////////////////////////////
1:     try (SequenceFile.Writer writer =
1:            SequenceFile.createWriter(fs.getConf(), SequenceFile.Writer.file(indexPath),
1:              SequenceFile.Writer.keyClass(Text.class), SequenceFile.Writer.valueClass(IntWritable.class))) {
/////////////////////////////////////////////////////////////////////////
1:     try (SequenceFile.Writer writer =
1:            SequenceFile.createWriter(fs.getConf(), SequenceFile.Writer.file(indexPath),
1:              SequenceFile.Writer.keyClass(Text.class), SequenceFile.Writer.valueClass(IntWritable.class))){
commit:28a9e82
/////////////////////////////////////////////////////////////////////////
0:     Vector perLabelThetaNormalizer = scoresPerLabel.like();
1:         perLabelThetaNormalizer = entry.getSecond().get();
1:     Preconditions.checkNotNull(perLabelThetaNormalizer);
1:     return new NaiveBayesModel(scoresPerLabelAndFeature, scoresPerFeature, scoresPerLabel, perLabelThetaNormalizer,
commit:fa29726
/////////////////////////////////////////////////////////////////////////
1:      for (Pair<Text,VectorWritable> entry : new SequenceFileDirIterable<Text,VectorWritable>(
/////////////////////////////////////////////////////////////////////////
1:     
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
0: import com.google.common.base.Preconditions;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     try (SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, indexPath, Text.class, IntWritable.class)) {
/////////////////////////////////////////////////////////////////////////
1:     Collection<String> seen = new HashSet<>();
0:     try (SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, indexPath, Text.class, IntWritable.class)){
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Map<String,Vector> sumVectors = new HashMap<>();
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     Map<Integer, String> labelMap = new HashMap<>();
/////////////////////////////////////////////////////////////////////////
1:     OpenObjectIntHashMap<String> index = new OpenObjectIntHashMap<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:9a5bab5
/////////////////////////////////////////////////////////////////////////
1:     boolean isComplementary = conf.getBoolean(NaiveBayesModel.COMPLEMENTARY_MODEL, true);
/////////////////////////////////////////////////////////////////////////
1:     // perLabelThetaNormalizer is only used by the complementary model, we do not instantiate it for the standard model
1:     Vector perLabelThetaNormalizer = null;
1:     if (isComplementary) {
1:       perLabelThetaNormalizer=scoresPerLabel.like();    
0:       for (Pair<Text,VectorWritable> entry : new SequenceFileDirIterable<Text,VectorWritable>(
1:           new Path(base, TrainNaiveBayesJob.THETAS), PathType.LIST, PathFilters.partFilter(), conf)) {
1:         if (entry.getFirst().toString().equals(TrainNaiveBayesJob.LABEL_THETA_NORMALIZER)) {
0:           perLabelThetaNormalizer = entry.getSecond().get();
1:         }
1:       }
0:       Preconditions.checkNotNull(perLabelThetaNormalizer);
1:     }
1:      
1:         alphaI, isComplementary);
commit:6d9179e
/////////////////////////////////////////////////////////////////////////
1:         : new SequenceFileIterable<Writable,IntWritable>(HadoopUtil.getSingleCachedFile(conf), conf)) {
/////////////////////////////////////////////////////////////////////////
1:         : new SequenceFileDirIterable<Text,VectorWritable>(HadoopUtil.getSingleCachedFile(conf),
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     for (Pair<Writable,IntWritable> entry
0:         : new SequenceFileIterable<Writable,IntWritable>(HadoopUtil.cachedFile(conf), conf)) {
/////////////////////////////////////////////////////////////////////////
1:     for (Pair<Text,VectorWritable> entry
0:         : new SequenceFileDirIterable<Text,VectorWritable>(HadoopUtil.cachedFile(conf),
1:           PathType.LIST, PathFilters.partFilter(), conf)) {
commit:210b265
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
0:     Collection<String> seen = Sets.newHashSet();
commit:e3fb0c4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.classifier.naivebayes.training;
1: 
0: import com.google.common.base.Preconditions;
0: import com.google.common.collect.Maps;
0: import com.google.common.io.Closeables;
1: import org.apache.hadoop.conf.Configuration;
0: import org.apache.hadoop.filecache.DistributedCache;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.io.Writable;
0: import org.apache.mahout.classifier.naivebayes.NaiveBayesModel;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1: import org.apache.mahout.common.iterator.sequencefile.PathType;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.SparseMatrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1: 
1: import java.io.IOException;
0: import java.net.URI;
1: import java.util.Map;
1: 
0: public class TrainUtils {
1: 
0:   private TrainUtils() {}
1: 
0:   static NaiveBayesModel readModelFromTempDir(Path base, Configuration conf) {
1: 
1:     Vector scoresPerLabel = null;
0:     Vector perlabelThetaNormalizer = null;
1:     Vector scoresPerFeature = null;
0:     Matrix scoresPerLabelAndFeature;
0:     float alphaI;
1: 
0:     alphaI = conf.getFloat(ThetaMapper.ALPHA_I, 1.0f);
1: 
1:     // read feature sums and label sums
1:     for (Pair<Text,VectorWritable> record : new SequenceFileDirIterable<Text, VectorWritable>(
1:         new Path(base, TrainNaiveBayesJob.WEIGHTS), PathType.LIST, PathFilters.partFilter(), conf)) {
1:       String key = record.getFirst().toString();
1:       VectorWritable value = record.getSecond();
1:       if (key.equals(TrainNaiveBayesJob.WEIGHTS_PER_FEATURE)) {
1:         scoresPerFeature = value.get();
1:       } else if (key.equals(TrainNaiveBayesJob.WEIGHTS_PER_LABEL)) {
1:         scoresPerLabel = value.get();
1:       }
1:     }
1: 
1:     Preconditions.checkNotNull(scoresPerFeature);
1:     Preconditions.checkNotNull(scoresPerLabel);
1: 
0:     scoresPerLabelAndFeature = new SparseMatrix(new int[] { scoresPerLabel.size(), scoresPerFeature.size() });
1:     for (Pair<IntWritable,VectorWritable> entry : new SequenceFileDirIterable<IntWritable,VectorWritable>(
1:         new Path(base, TrainNaiveBayesJob.SUMMED_OBSERVATIONS), PathType.LIST, PathFilters.partFilter(), conf)) {
1:       scoresPerLabelAndFeature.assignRow(entry.getFirst().get(), entry.getSecond().get());
1:     }
1: 
0:     for (Pair<Text,VectorWritable> entry : new SequenceFileDirIterable<Text,VectorWritable>(
0:         new Path(base, TrainNaiveBayesJob.THETAS), PathType.LIST, PathFilters.partFilter(), conf)) {
0:       if (entry.getFirst().toString().equals(TrainNaiveBayesJob.LABEL_THETA_NORMALIZER)) {
0:         perlabelThetaNormalizer = entry.getSecond().get();
1:       }
1:     }
1: 
0:     Preconditions.checkNotNull(perlabelThetaNormalizer);
1: 
0:     return new NaiveBayesModel(scoresPerLabelAndFeature, scoresPerFeature, scoresPerLabel, perlabelThetaNormalizer,
0:         alphaI);
1:   }
1: 
0:   protected static void setSerializations(Configuration conf) {
0:     conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
0:         + "org.apache.hadoop.io.serializer.WritableSerialization");
1:   }
1: 
0:   protected static void cacheFiles(Path fileToCache, Configuration conf) {
0:     DistributedCache.setCacheFiles(new URI[] { fileToCache.toUri() }, conf);
1:   }
1: 
1:   /** Write the list of labels into a map file */
0:   protected static void writeLabelIndex(Configuration conf, Iterable<String> labels, Path indexPath)
0:       throws IOException {
1:     FileSystem fs = FileSystem.get(indexPath.toUri(), conf);
0:     SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, indexPath, Text.class, IntWritable.class);
0:     try {
1:       int i = 0;
1:       for (String label : labels) {
1:         writer.append(new Text(label), new IntWritable(i++));
1:       }
0:     } finally {
0:       Closeables.closeQuietly(writer);
1:     }
1:   }
1: 
0:   private static Path cachedFile(Configuration conf) throws IOException {
0:     return new Path(DistributedCache.getCacheFiles(conf)[0].getPath());
1:   }
1: 
0:   protected static OpenObjectIntHashMap<String> readIndexFromCache(Configuration conf) throws IOException {
0:     OpenObjectIntHashMap<String> index = new OpenObjectIntHashMap<String>();
0:     for (Pair<Writable,IntWritable> entry : new SequenceFileIterable<Writable,IntWritable>(cachedFile(conf), conf)) {
1:       index.put(entry.getFirst().toString(), entry.getSecond().get());
1:     }
1:     return index;
1:   }
1: 
0:   protected static Map<String,Vector> readScoresFromCache(Configuration conf) throws IOException {
0:     Map<String,Vector> sumVectors = Maps.newHashMap();
0:     for (Pair<Text,VectorWritable> entry : new SequenceFileDirIterable<Text,VectorWritable>(cachedFile(conf),
0:         PathType.LIST, PathFilters.partFilter(), conf)) {
1:       sumVectors.put(entry.getFirst().toString(), entry.getSecond().get());
1:     }
1:     return sumVectors;
1:   }
1: }
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, true);
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.naivebayes;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.classifier.naivebayes.training.ThetaMapper;
1: import org.apache.mahout.classifier.naivebayes.training.TrainNaiveBayesJob;
1: import org.apache.mahout.common.HadoopUtil;
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Set;
0: public class BayesUtils {
1:   private BayesUtils() {}
0: 
1:   public static NaiveBayesModel readModelFromDir(Path base, Configuration conf) {
/////////////////////////////////////////////////////////////////////////
1:   public static int writeLabelIndex(Configuration conf, Iterable<String> labels, Path indexPath)
1:     int i = 0;
1:     return i;
0:   public static int writeLabelIndex(Configuration conf, Path indexPath, SequenceFileDirIterable labels) throws IOException {
1:     FileSystem fs = FileSystem.get(indexPath.toUri(), conf);
0:     SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, indexPath, Text.class, IntWritable.class);
0:     Set<String> seen = new HashSet<String>();
1:     int i = 0;
0:     try {
1:       for (Object label : labels) {
0:         String theLabel = ((Pair) label).getFirst().toString();
0:         if (seen.contains(theLabel) == false){
1:           writer.append(new Text(theLabel), new IntWritable(i++));
1:           seen.add(theLabel);
1:         }
1:       }
0:     } finally {
0:       Closeables.closeQuietly(writer);
1:     }
1:     return i;
0:   public static Map<Integer, String> readLabelIndex(Configuration conf, Path indexPath) throws IOException {
0:     Map<Integer, String> labelMap = new HashMap<Integer, String>();
0:     SequenceFileIterable<Text, IntWritable> fileIterable = new SequenceFileIterable<Text, IntWritable>(indexPath, true, conf);
0:     for (Pair<Text, IntWritable> pair : fileIterable) {
1:       labelMap.put(pair.getSecond().get(), pair.getFirst().toString());
1:     }
1:     return labelMap;
1:   }
0: 
1:   public static OpenObjectIntHashMap<String> readIndexFromCache(Configuration conf) throws IOException {
0:     for (Pair<Writable,IntWritable> entry : new SequenceFileIterable<Writable,IntWritable>(HadoopUtil.cachedFile(conf), conf)) {
1:   public static Map<String,Vector> readScoresFromCache(Configuration conf) throws IOException {
0:     for (Pair<Text,VectorWritable> entry : new SequenceFileDirIterable<Text,VectorWritable>(HadoopUtil.cachedFile(conf),
0: 
0: 
author:Robin Anil
-------------------------------------------------------------------------------
commit:3cadef9
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: import java.util.Collection;
0: import java.util.HashMap;
0: import java.util.Map;
1: import java.util.regex.Pattern;
0: 
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Preconditions;
0: import com.google.common.collect.Maps;
0: import com.google.common.collect.Sets;
0: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:     }
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, true);
commit:d94eb39
/////////////////////////////////////////////////////////////////////////
0:     Vector perlabelThetaNormalizer = scoresPerLabel.like();
0:     /* for (Pair<Text,VectorWritable> entry : new SequenceFileDirIterable<Text,VectorWritable>(
0:     } 
0:     */
commit:a344c6b
/////////////////////////////////////////////////////////////////////////
0:         String theLabel = ((Pair<?,?>) label).getFirst().toString().split("/")[1];
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
commit:95f836b
/////////////////////////////////////////////////////////////////////////
1:     Matrix scoresPerLabelAndFeature = new SparseMatrix(scoresPerLabel.size(), scoresPerFeature.size());
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0: import java.util.regex.Pattern;
1:   private static final Pattern SLASH = Pattern.compile("/");
0: 
/////////////////////////////////////////////////////////////////////////
1:         String theLabel = SLASH.split(((Pair<?, ?>) label).getFirst().toString())[1];
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:                                     Iterable<Pair<Text,IntWritable>> labels) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     for (Pair<Text, IntWritable> pair : new SequenceFileIterable<Text, IntWritable>(indexPath, true, conf)) {
commit:4194a28
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collection;
1: public final class BayesUtils {
/////////////////////////////////////////////////////////////////////////
1:   public static int writeLabelIndex(Configuration conf, Path indexPath,
0:                                     SequenceFileDirIterable<Text, IntWritable> labels) throws IOException {
0:     Collection<String> seen = new HashSet<String>();
0:         String theLabel = ((Pair<?,?>) label).getFirst().toString();
0:         if (!seen.contains(theLabel)){
/////////////////////////////////////////////////////////////////////////
1:   public static Map<Integer, String> readLabelIndex(Configuration conf, Path indexPath) {
0:     SequenceFileIterable<Text, IntWritable> fileIterable =
0:         new SequenceFileIterable<Text, IntWritable>(indexPath, true, conf);
/////////////////////////////////////////////////////////////////////////
0:     for (Pair<Writable,IntWritable> entry :
0:          new SequenceFileIterable<Writable,IntWritable>(HadoopUtil.cachedFile(conf), conf)) {
/////////////////////////////////////////////////////////////////////////
0:     for (Pair<Text,VectorWritable> entry :
0:          new SequenceFileDirIterable<Text,VectorWritable>(HadoopUtil.cachedFile(conf),
commit:b59e468
/////////////////////////////////////////////////////////////////////////
1:     float alphaI = conf.getFloat(ThetaMapper.ALPHA_I, 1.0f);
0:     Vector scoresPerLabel = null;
0:     Vector scoresPerFeature = null;
/////////////////////////////////////////////////////////////////////////
0:     Matrix scoresPerLabelAndFeature = new SparseMatrix(new int[]{scoresPerLabel.size(), scoresPerFeature.size()});
0:     Vector perlabelThetaNormalizer = null;
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:         if (!seen.contains(theLabel)) {
============================================================================