1:d5b6b74: /**
1:d5b6b74:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d5b6b74:  * contributor license agreements.  See the NOTICE file distributed with
1:d5b6b74:  * this work for additional information regarding copyright ownership.
1:d5b6b74:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d5b6b74:  * (the "License"); you may not use this file except in compliance with
1:d5b6b74:  * the License.  You may obtain a copy of the License at
1:d5b6b74:  *
1:d5b6b74:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d5b6b74:  *
1:d5b6b74:  * Unless required by applicable law or agreed to in writing, software
1:d5b6b74:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d5b6b74:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d5b6b74:  * See the License for the specific language governing permissions and
1:d5b6b74:  * limitations under the License.
1:d5b6b74:  */
2:d5b6b74: 
1:d5b6b74: package org.apache.mahout.classifier.df.split;
1:d5b6b74: 
1:d5b6b74: import org.apache.mahout.classifier.df.data.Data;
1:d5b6b74: import org.apache.mahout.classifier.df.data.DataLoader;
1:d5b6b74: import org.apache.mahout.classifier.df.data.Dataset;
1:d5b6b74: import org.apache.mahout.classifier.df.data.DescriptorException;
1:d5b6b74: import org.apache.mahout.classifier.df.data.conditions.Condition;
1:d5b6b74: import org.apache.mahout.common.MahoutTestCase;
1:d5b6b74: import org.junit.Test;
1:1ffa3a4: @Deprecated
1:d5b6b74: public final class RegressionSplitTest extends MahoutTestCase {
1:d5b6b74: 
1:d5b6b74:   private static Data[] generateTrainingData() throws DescriptorException {
1:d5b6b74:     // Training data
1:d5b6b74:     String[] trainData = new String[20];
1:d5b6b74:     for (int i = 0; i < trainData.length; i++) {
1:d5b6b74:       if (i % 3 == 0) {
1:d5b6b74:         trainData[i] = "A," + (40 - i) + ',' + (i + 20);
1:d5b6b74:       } else if (i % 3 == 1) {
1:d5b6b74:         trainData[i] = "B," + (i + 20) + ',' + (40 - i);
1:d5b6b74:       } else {
1:d5b6b74:         trainData[i] = "C," + (i + 20) + ',' + (i + 20);
1:d5b6b74:       }
1:d5b6b74:     }
1:d5b6b74:     // Dataset
1:d5b6b74:     Dataset dataset = DataLoader.generateDataset("C N L", true, trainData);
1:d5b6b74:     Data[] datas = new Data[3];
1:d5b6b74:     datas[0] = DataLoader.loadData(dataset, trainData);
1:d5b6b74: 
1:d5b6b74:     // Training data
1:d5b6b74:     trainData = new String[20];
1:d5b6b74:     for (int i = 0; i < trainData.length; i++) {
1:d5b6b74:       if (i % 2 == 0) {
1:d5b6b74:         trainData[i] = "A," + (50 - i) + ',' + (i + 10);
1:d5b6b74:       } else {
1:d5b6b74:         trainData[i] = "B," + (i + 10) + ',' + (50 - i);
1:d5b6b74:       }
1:d5b6b74:     }
1:d5b6b74:     datas[1] = DataLoader.loadData(dataset, trainData);
1:d5b6b74: 
1:d5b6b74:     // Training data
1:d5b6b74:     trainData = new String[10];
1:d5b6b74:     for (int i = 0; i < trainData.length; i++) {
1:d5b6b74:       trainData[i] = "A," + (40 - i) + ',' + (i + 20);
1:d5b6b74:     }
1:d5b6b74:     datas[2] = DataLoader.loadData(dataset, trainData);
1:d5b6b74: 
1:d5b6b74:     return datas;
1:d5b6b74:   }
1:d5b6b74: 
1:d5b6b74:   @Test
1:d5b6b74:   public void testComputeSplit() throws DescriptorException {
1:d5b6b74:     Data[] datas = generateTrainingData();
1:d5b6b74: 
1:d5b6b74:     RegressionSplit igSplit = new RegressionSplit();
1:d5b6b74:     Split split = igSplit.computeSplit(datas[0], 1);
1:d5b6b74:     assertEquals(180.0, split.getIg(), EPSILON);
1:d5b6b74:     assertEquals(38.0, split.getSplit(), EPSILON);
1:d5b6b74:     split = igSplit.computeSplit(datas[0].subset(Condition.lesser(1, 38.0)), 1);
1:d5b6b74:     assertEquals(76.5, split.getIg(), EPSILON);
1:d5b6b74:     assertEquals(21.5, split.getSplit(), EPSILON);
1:d5b6b74: 
1:d5b6b74:     split = igSplit.computeSplit(datas[1], 0);
1:d5b6b74:     assertEquals(2205.0, split.getIg(), EPSILON);
1:d5b6b74:     assertEquals(Double.NaN, split.getSplit(), EPSILON);
1:d5b6b74:     split = igSplit.computeSplit(datas[1].subset(Condition.equals(0, 0.0)), 1);
1:d5b6b74:     assertEquals(250.0, split.getIg(), EPSILON);
1:d5b6b74:     assertEquals(41.0, split.getSplit(), EPSILON);
1:d5b6b74:   }
1:d5b6b74: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d5b6b74
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.df.split;
1: 
1: import org.apache.mahout.classifier.df.data.Data;
1: import org.apache.mahout.classifier.df.data.DataLoader;
1: import org.apache.mahout.classifier.df.data.Dataset;
1: import org.apache.mahout.classifier.df.data.DescriptorException;
1: import org.apache.mahout.classifier.df.data.conditions.Condition;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.junit.Test;
1: 
1: public final class RegressionSplitTest extends MahoutTestCase {
1: 
1:   private static Data[] generateTrainingData() throws DescriptorException {
1:     // Training data
1:     String[] trainData = new String[20];
1:     for (int i = 0; i < trainData.length; i++) {
1:       if (i % 3 == 0) {
1:         trainData[i] = "A," + (40 - i) + ',' + (i + 20);
1:       } else if (i % 3 == 1) {
1:         trainData[i] = "B," + (i + 20) + ',' + (40 - i);
1:       } else {
1:         trainData[i] = "C," + (i + 20) + ',' + (i + 20);
1:       }
1:     }
1:     // Dataset
1:     Dataset dataset = DataLoader.generateDataset("C N L", true, trainData);
1:     Data[] datas = new Data[3];
1:     datas[0] = DataLoader.loadData(dataset, trainData);
1: 
1:     // Training data
1:     trainData = new String[20];
1:     for (int i = 0; i < trainData.length; i++) {
1:       if (i % 2 == 0) {
1:         trainData[i] = "A," + (50 - i) + ',' + (i + 10);
1:       } else {
1:         trainData[i] = "B," + (i + 10) + ',' + (50 - i);
1:       }
1:     }
1:     datas[1] = DataLoader.loadData(dataset, trainData);
1: 
1:     // Training data
1:     trainData = new String[10];
1:     for (int i = 0; i < trainData.length; i++) {
1:       trainData[i] = "A," + (40 - i) + ',' + (i + 20);
1:     }
1:     datas[2] = DataLoader.loadData(dataset, trainData);
1: 
1:     return datas;
1:   }
1: 
1:   @Test
1:   public void testComputeSplit() throws DescriptorException {
1:     Data[] datas = generateTrainingData();
1: 
1:     RegressionSplit igSplit = new RegressionSplit();
1:     Split split = igSplit.computeSplit(datas[0], 1);
1:     assertEquals(180.0, split.getIg(), EPSILON);
1:     assertEquals(38.0, split.getSplit(), EPSILON);
1:     split = igSplit.computeSplit(datas[0].subset(Condition.lesser(1, 38.0)), 1);
1:     assertEquals(76.5, split.getIg(), EPSILON);
1:     assertEquals(21.5, split.getSplit(), EPSILON);
1: 
1:     split = igSplit.computeSplit(datas[1], 0);
1:     assertEquals(2205.0, split.getIg(), EPSILON);
1:     assertEquals(Double.NaN, split.getSplit(), EPSILON);
1:     split = igSplit.computeSplit(datas[1].subset(Condition.equals(0, 0.0)), 1);
1:     assertEquals(250.0, split.getIg(), EPSILON);
1:     assertEquals(41.0, split.getSplit(), EPSILON);
1:   }
1: }
============================================================================