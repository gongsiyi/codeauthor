1:3c71363: /**
1:3c71363:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3c71363:  * contributor license agreements.  See the NOTICE file distributed with
1:3c71363:  * this work for additional information regarding copyright ownership.
1:3c71363:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3c71363:  * (the "License"); you may not use this file except in compliance with
1:3c71363:  * the License.  You may obtain a copy of the License at
1:3c71363:  *
1:3c71363:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3c71363:  *
1:3c71363:  * Unless required by applicable law or agreed to in writing, software
1:3c71363:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3c71363:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c71363:  * See the License for the specific language governing permissions and
1:3c71363:  * limitations under the License.
1:3c71363:  */
1:3c71363: 
1:3c71363: package org.apache.mahout.common.distance;
1:3c71363: 
1:3c71363: import org.apache.mahout.common.MahoutTestCase;
1:3c71363: import org.apache.mahout.math.DenseVector;
1:3c71363: import org.apache.mahout.math.Vector;
1:3c71363: import org.junit.Test;
1:3c71363: 
1:3c71363: public final class TestMinkowskiMeasure extends MahoutTestCase {
1:3c71363: 
1:3c71363:   @Test
1:3c71363:   public void testMeasure() {
1:3c71363: 
1:3c71363:     DistanceMeasure minkowskiDistanceMeasure = new MinkowskiDistanceMeasure(1.5);
1:3c71363:     DistanceMeasure manhattanDistanceMeasure = new ManhattanDistanceMeasure();
1:3c71363:     DistanceMeasure euclideanDistanceMeasure = new EuclideanDistanceMeasure();
1:3c71363: 
1:3c71363:     Vector[] vectors = {
1:3c71363:         new DenseVector(new double[]{1, 0, 0, 0, 0, 0}),
1:3c71363:         new DenseVector(new double[]{1, 1, 1, 0, 0, 0}),
1:3c71363:         new DenseVector(new double[]{1, 1, 1, 1, 1, 1})
1:3c71363:     };
1:3c71363: 
1:3c71363:     double[][] minkowskiDistanceMatrix = new double[3][3];
1:3c71363:     double[][] manhattanDistanceMatrix = new double[3][3];
1:3c71363:     double[][] euclideanDistanceMatrix = new double[3][3];
1:3c71363: 
1:3c71363:     for (int a = 0; a < 3; a++) {
1:3c71363:       for (int b = 0; b < 3; b++) {
1:3c71363:         minkowskiDistanceMatrix[a][b] = minkowskiDistanceMeasure.distance(vectors[a], vectors[b]);
1:3c71363:         manhattanDistanceMatrix[a][b] = manhattanDistanceMeasure.distance(vectors[a], vectors[b]);
1:3c71363:         euclideanDistanceMatrix[a][b] = euclideanDistanceMeasure.distance(vectors[a], vectors[b]);
1:3c71363:       }
1:3c71363:     }
1:3c71363: 
1:3c71363:     for (int a = 0; a < 3; a++) {
1:3c71363:       for (int b = 0; b < 3; b++) {
1:3c71363:         assertTrue(minkowskiDistanceMatrix[a][b] <= manhattanDistanceMatrix[a][b]);
1:3c71363:         assertTrue(minkowskiDistanceMatrix[a][b] >= euclideanDistanceMatrix[a][b]);
1:3c71363:       }
1:3c71363:     }
1:3c71363: 
1:3c71363:     assertEquals(0.0, minkowskiDistanceMatrix[0][0], EPSILON);
1:3c71363:     assertTrue(minkowskiDistanceMatrix[0][0] < minkowskiDistanceMatrix[0][1]);
1:3c71363:     assertTrue(minkowskiDistanceMatrix[0][1] < minkowskiDistanceMatrix[0][2]);
1:3c71363:   }
1:3c71363: 
1:3c71363: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:3c71363
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.distance;
1: 
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: import org.junit.Test;
1: 
1: public final class TestMinkowskiMeasure extends MahoutTestCase {
1: 
1:   @Test
1:   public void testMeasure() {
1: 
1:     DistanceMeasure minkowskiDistanceMeasure = new MinkowskiDistanceMeasure(1.5);
1:     DistanceMeasure manhattanDistanceMeasure = new ManhattanDistanceMeasure();
1:     DistanceMeasure euclideanDistanceMeasure = new EuclideanDistanceMeasure();
1: 
1:     Vector[] vectors = {
1:         new DenseVector(new double[]{1, 0, 0, 0, 0, 0}),
1:         new DenseVector(new double[]{1, 1, 1, 0, 0, 0}),
1:         new DenseVector(new double[]{1, 1, 1, 1, 1, 1})
1:     };
1: 
1:     double[][] minkowskiDistanceMatrix = new double[3][3];
1:     double[][] manhattanDistanceMatrix = new double[3][3];
1:     double[][] euclideanDistanceMatrix = new double[3][3];
1: 
1:     for (int a = 0; a < 3; a++) {
1:       for (int b = 0; b < 3; b++) {
1:         minkowskiDistanceMatrix[a][b] = minkowskiDistanceMeasure.distance(vectors[a], vectors[b]);
1:         manhattanDistanceMatrix[a][b] = manhattanDistanceMeasure.distance(vectors[a], vectors[b]);
1:         euclideanDistanceMatrix[a][b] = euclideanDistanceMeasure.distance(vectors[a], vectors[b]);
1:       }
1:     }
1: 
1:     for (int a = 0; a < 3; a++) {
1:       for (int b = 0; b < 3; b++) {
1:         assertTrue(minkowskiDistanceMatrix[a][b] <= manhattanDistanceMatrix[a][b]);
1:         assertTrue(minkowskiDistanceMatrix[a][b] >= euclideanDistanceMatrix[a][b]);
1:       }
1:     }
1: 
1:     assertEquals(0.0, minkowskiDistanceMatrix[0][0], EPSILON);
1:     assertTrue(minkowskiDistanceMatrix[0][0] < minkowskiDistanceMatrix[0][1]);
1:     assertTrue(minkowskiDistanceMatrix[0][1] < minkowskiDistanceMatrix[0][2]);
1:   }
1: 
1: }
============================================================================