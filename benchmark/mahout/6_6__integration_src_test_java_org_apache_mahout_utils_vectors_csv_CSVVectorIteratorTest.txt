2:747dfa4: /**
1:747dfa4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:747dfa4:  * contributor license agreements.  See the NOTICE file distributed with
1:747dfa4:  * this work for additional information regarding copyright ownership.
1:747dfa4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:747dfa4:  * (the "License"); you may not use this file except in compliance with
1:747dfa4:  * the License.  You may obtain a copy of the License at
1:85f9ece:  * <p/>
1:85f9ece:  * http://www.apache.org/licenses/LICENSE-2.0
1:85f9ece:  * <p/>
1:747dfa4:  * Unless required by applicable law or agreed to in writing, software
1:747dfa4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:747dfa4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:747dfa4:  * See the License for the specific language governing permissions and
1:747dfa4:  * limitations under the License.
1:747dfa4:  */
5:747dfa4: 
1:747dfa4: package org.apache.mahout.utils.vectors.csv;
1:747dfa4: 
1:87d4b2e: import java.io.IOException;
1:87d4b2e: import java.io.StringReader;
1:87d4b2e: import java.io.StringWriter;
1:87d4b2e: import java.util.Iterator;
1:b381afd: 
1:b381afd: import org.apache.mahout.common.MahoutTestCase;
1:747dfa4: import org.apache.mahout.math.Vector;
1:747dfa4: import org.apache.mahout.utils.vectors.RandomVectorIterable;
1:747dfa4: import org.apache.mahout.utils.vectors.VectorHelper;
1:4641c87: import org.apache.mahout.utils.vectors.io.TextualVectorWriter;
1:747dfa4: import org.junit.Test;
1:87d4b2e: 
1:80366ee: public class CSVVectorIteratorTest extends MahoutTestCase {
1:747dfa4: 
1:747dfa4:   @Test
1:4641c87:   public void testCount() throws Exception {
1:747dfa4: 
1:747dfa4:     StringWriter sWriter = new StringWriter();
1:85f9ece:     try (TextualVectorWriter writer = new TextualVectorWriter(sWriter) {
1:a13b4b7:       @Override
1:4641c87:       public void write(Vector vector) throws IOException {
1:747dfa4:         String vecStr = VectorHelper.vectorToCSVString(vector, false);
1:4641c87:         getWriter().write(vecStr);
1:747dfa4:       }
1:85f9ece:     }) {
1:747dfa4:       Iterable<Vector> iter = new RandomVectorIterable(50);
1:d608a88:       writer.write(iter);
1:d608a88:     }
1:85f9ece: 
1:80366ee:     Iterator<Vector> csvIter = new CSVVectorIterator(new StringReader(sWriter.getBuffer().toString()));
1:747dfa4:     int count = 0;
1:80366ee:     while (csvIter.hasNext()) {
1:80366ee:       csvIter.next();
1:747dfa4:       count++;
1:747dfa4:     }
1:747dfa4:     assertEquals(50, count);
1:747dfa4:   }
1:747dfa4: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     try (TextualVectorWriter writer = new TextualVectorWriter(sWriter) {
1:     }) {
1: 
author:sslavic
-------------------------------------------------------------------------------
commit:b381afd
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.mahout.common.MahoutTestCase;
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.StringReader;
1: import java.io.StringWriter;
1: import java.util.Iterator;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, true);
commit:747dfa4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.vectors.csv;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.utils.MahoutTestCase;
1: import org.apache.mahout.utils.vectors.RandomVectorIterable;
1: import org.apache.mahout.utils.vectors.VectorHelper;
0: import org.apache.mahout.utils.vectors.io.JWriterVectorWriter;
1: import org.junit.Test;
1: 
0: import java.io.IOException;
0: import java.io.StringReader;
0: import java.io.StringWriter;
1: 
1: 
1: /**
0:  *
0:  *
0:  **/
0: public class CSVVectorIterableTest extends MahoutTestCase {
1: 
1: 
1:   @Test
0:   public void test() throws Exception {
1: 
1:     StringWriter sWriter = new StringWriter();
0:     JWriterVectorWriter jwvw = new JWriterVectorWriter(sWriter) {
1: 
0:       protected void formatVector(Vector vector) throws IOException {
1:         String vecStr = VectorHelper.vectorToCSVString(vector, false);
0:         writer.write(vecStr);
1:       }
0:     };
1:     Iterable<Vector> iter = new RandomVectorIterable(50);
0:     jwvw.write(iter);
0:     jwvw.close();
0:     CSVVectorIterable csvIter = new CSVVectorIterable(new StringReader(sWriter.getBuffer().toString()));
1:     int count = 0;
0:     for (Vector vector : csvIter) {
0:       //System.out.println("Vec: " + vector);
1:       count++;
1:     }
1:     assertEquals(50, count);
1:   }
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d608a88
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:     TextualVectorWriter writer = new TextualVectorWriter(sWriter) {
0:     try {
0:       Iterable<Vector> iter = new RandomVectorIterable(50);
1:       writer.write(iter);
0:     } finally {
0:       Closeables.closeQuietly(writer);
1:     }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:50fd693
commit:80366ee
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.vectors.csv;
0: 
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
1: public class CSVVectorIteratorTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:     Iterator<Vector> csvIter = new CSVVectorIterator(new StringReader(sWriter.getBuffer().toString()));
1:     while (csvIter.hasNext()) {
1:       csvIter.next();
commit:4641c87
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.utils.vectors.io.TextualVectorWriter;
/////////////////////////////////////////////////////////////////////////
1:   public void testCount() throws Exception {
0:     TextualVectorWriter jwvw = new TextualVectorWriter(sWriter) {
1:       public void write(Vector vector) throws IOException {
1:         getWriter().write(vecStr);
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1:       @Override
/////////////////////////////////////////////////////////////////////////
0:     Iterable<Vector> csvIter = new CSVVectorIterable(new StringReader(sWriter.getBuffer().toString()));
============================================================================