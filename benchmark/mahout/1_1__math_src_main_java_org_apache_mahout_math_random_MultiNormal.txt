1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
1:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:a07bfc3: import org.apache.mahout.common.RandomUtils;
1:a07bfc3: import org.apache.mahout.math.DenseVector;
1:a07bfc3: import org.apache.mahout.math.DiagonalMatrix;
1:a07bfc3: import org.apache.mahout.math.Matrix;
1:a07bfc3: import org.apache.mahout.math.Vector;
1:a07bfc3: import org.apache.mahout.math.function.DoubleFunction;
1:a07bfc3: 
1:a07bfc3: import java.util.Random;
1:a07bfc3: 
1:a07bfc3: /**
1:a07bfc3:  * Samples from a multi-variate normal distribution.
1:df130cb:  * <p/>
1:df130cb:  * This is done by sampling from several independent unit normal distributions to get a vector u.
1:df130cb:  * The sample value that is returned is then A u + m where A is derived from the covariance matrix
1:df130cb:  * and m is the mean of the result.
1:df130cb:  * <p/>
1:df130cb:  * If \Sigma is the desired covariance matrix, then you can use any value of A such that A' A =
1:df130cb:  * \Sigma.  The Cholesky decomposition can be used to compute A if \Sigma is positive definite.
1:df130cb:  * Slightly more expensive is to use the SVD U S V' = \Sigma and then set A = U \sqrt{S}.
1:df130cb:  *
1:df130cb:  * Useful special cases occur when \Sigma is diagonal so that A = \sqrt(\Sigma) or where \Sigma = r I.
1:df130cb:  *
1:df130cb:  * Another special case is where m = 0.
1:a07bfc3:  */
1:a07bfc3: public class MultiNormal implements Sampler<Vector> {
1:df130cb:   private final Random gen;
1:df130cb:   private final int dimension;
1:df130cb:   private final Matrix scale;
1:df130cb:   private final Vector mean;
1:a07bfc3: 
1:df130cb:   /**
1:df130cb:    * Constructs a sampler with diagonal scale matrix.
1:df130cb:    * @param diagonal The diagonal elements of the scale matrix.
1:df130cb:    */
1:df130cb:   public MultiNormal(Vector diagonal) {
1:df130cb:     this(new DiagonalMatrix(diagonal), null);
1:df130cb:   }
1:a07bfc3: 
1:df130cb:   /**
1:df130cb:    * Constructs a sampler with diagonal scale matrix and (potentially)
1:df130cb:    * non-zero mean.
1:df130cb:    * @param diagonal The scale matrix's principal diagonal.
1:df130cb:    * @param mean The desired mean.  Set to null if zero mean is desired.
1:df130cb:    */
1:df130cb:   public MultiNormal(Vector diagonal, Vector mean) {
1:df130cb:     this(new DiagonalMatrix(diagonal), mean);
1:df130cb:   }
1:a07bfc3: 
1:df130cb:   /**
1:df130cb:    * Constructs a sampler with non-trivial scale matrix and mean.
1:df130cb:    */
1:df130cb:   public MultiNormal(Matrix a, Vector mean) {
1:df130cb:     this(a, mean, a.columnSize());
1:df130cb:   }
1:a07bfc3: 
1:df130cb:   public MultiNormal(int dimension) {
1:df130cb:     this(null, null, dimension);
1:df130cb:   }
1:a07bfc3: 
1:df130cb:   public MultiNormal(double radius, Vector mean) {
1:df130cb:     this(new DiagonalMatrix(radius, mean.size()), mean);
1:df130cb:   }
1:a07bfc3: 
1:df130cb:   private MultiNormal(Matrix scale, Vector mean, int dimension) {
1:df130cb:     gen = RandomUtils.getRandom();
1:df130cb:     this.dimension = dimension;
1:df130cb:     this.scale = scale;
1:df130cb:     this.mean = mean;
1:df130cb:   }
1:a07bfc3: 
1:df130cb:   @Override
1:df130cb:   public Vector sample() {
1:df130cb:     Vector v = new DenseVector(dimension).assign(
1:df130cb:       new DoubleFunction() {
1:df130cb:         @Override
1:df130cb:         public double apply(double ignored) {
1:df130cb:           return gen.nextGaussian();
1:df130cb:         }
11:a07bfc3:       }
1:df130cb:     );
1:df130cb:     if (mean != null) {
1:df130cb:       if (scale != null) {
1:df130cb:         return scale.times(v).plus(mean);
1:df130cb:       } else {
1:df130cb:         return v.plus(mean);
1:df130cb:       }
1:df130cb:     } else {
1:df130cb:       if (scale != null) {
1:df130cb:         return scale.times(v);
1:df130cb:       } else {
1:df130cb:         return v;
1:df130cb:       }
1:df130cb:     }
1:a07bfc3:   }
1:a07bfc3: 
1:df130cb:   public Vector getScale() {
1:df130cb:     return mean;
1:df130cb:   }
1:a07bfc3: }
============================================================================
author:Ted Dunning
-------------------------------------------------------------------------------
commit:df130cb
/////////////////////////////////////////////////////////////////////////
1:  * <p/>
1:  * This is done by sampling from several independent unit normal distributions to get a vector u.
1:  * The sample value that is returned is then A u + m where A is derived from the covariance matrix
1:  * and m is the mean of the result.
1:  * <p/>
1:  * If \Sigma is the desired covariance matrix, then you can use any value of A such that A' A =
1:  * \Sigma.  The Cholesky decomposition can be used to compute A if \Sigma is positive definite.
1:  * Slightly more expensive is to use the SVD U S V' = \Sigma and then set A = U \sqrt{S}.
1:  *
1:  * Useful special cases occur when \Sigma is diagonal so that A = \sqrt(\Sigma) or where \Sigma = r I.
1:  *
1:  * Another special case is where m = 0.
1:   private final Random gen;
1:   private final int dimension;
1:   private final Matrix scale;
1:   private final Vector mean;
1:   /**
1:    * Constructs a sampler with diagonal scale matrix.
1:    * @param diagonal The diagonal elements of the scale matrix.
1:    */
1:   public MultiNormal(Vector diagonal) {
1:     this(new DiagonalMatrix(diagonal), null);
1:   }
1:   /**
1:    * Constructs a sampler with diagonal scale matrix and (potentially)
1:    * non-zero mean.
1:    * @param diagonal The scale matrix's principal diagonal.
1:    * @param mean The desired mean.  Set to null if zero mean is desired.
1:    */
1:   public MultiNormal(Vector diagonal, Vector mean) {
1:     this(new DiagonalMatrix(diagonal), mean);
1:   }
1:   /**
1:    * Constructs a sampler with non-trivial scale matrix and mean.
1:    */
1:   public MultiNormal(Matrix a, Vector mean) {
1:     this(a, mean, a.columnSize());
1:   }
1:   public MultiNormal(int dimension) {
1:     this(null, null, dimension);
1:   }
1:   public MultiNormal(double radius, Vector mean) {
1:     this(new DiagonalMatrix(radius, mean.size()), mean);
1:   }
1:   private MultiNormal(Matrix scale, Vector mean, int dimension) {
1:     gen = RandomUtils.getRandom();
1:     this.dimension = dimension;
1:     this.scale = scale;
1:     this.mean = mean;
1:   }
1:   @Override
1:   public Vector sample() {
1:     Vector v = new DenseVector(dimension).assign(
1:       new DoubleFunction() {
1:         @Override
1:         public double apply(double ignored) {
1:           return gen.nextGaussian();
1:       }
1:     );
1:     if (mean != null) {
1:       if (scale != null) {
1:         return scale.times(v).plus(mean);
1:       } else {
1:         return v.plus(mean);
1:       }
1:     } else {
1:       if (scale != null) {
1:         return scale.times(v);
1:       } else {
1:         return v;
1:       }
1:   }
1:   public Vector getScale() {
1:     return mean;
1:   }
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.DiagonalMatrix;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.DoubleFunction;
1: 
1: import java.util.Random;
1: 
1: /**
1:  * Samples from a multi-variate normal distribution.
1:  */
1: public class MultiNormal implements Sampler<Vector> {
0:     private final Random gen;
0:     private final int dimension;
0:     private final Matrix mean;
0:     private final Vector offset;
1: 
0:     public MultiNormal(Vector diagonal) {
0:         this(new DiagonalMatrix(diagonal), null);
1:     }
1: 
0:     public MultiNormal(Vector diagonal, Vector offset) {
0:         this(new DiagonalMatrix(diagonal), offset);
1:     }
1: 
0:     public MultiNormal(Matrix a, Vector offset) {
0:         this(a, offset, a.columnSize());
1:     }
1: 
0:     public MultiNormal(int dimension) {
0:         this(null, null, dimension);
1:     }
1: 
0:     public MultiNormal(double radius, Vector mean) {
0:         this(new DiagonalMatrix(radius, mean.size()), mean);
1:     }
1: 
0:     private MultiNormal(Matrix mean, Vector offset, int dimension) {
0:         gen = RandomUtils.getRandom();
0:         this.dimension = dimension;
0:         this.mean = mean;
0:         this.offset = offset;
1:     }
1: 
0:     @Override
0:     public Vector sample() {
0:         Vector v = new DenseVector(dimension).assign(
0:                 new DoubleFunction() {
0:                     @Override
0:                     public double apply(double ignored) {
0:                         return gen.nextGaussian();
1:                     }
1:                 }
0:         );
0:         if (offset != null) {
0:             return mean.times(v).plus(offset);
0:         } else {
0:             if (mean != null) {
0:                 return mean.times(v);
0:             } else {
0:                 return v;
1:             }
1:         }
1:     }
1: 
0:     public Vector getMean() {
0:         return offset;
1:     }
1: }
============================================================================