1:8c37a84: /**
1:8c37a84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6b7f601:  * contributor license agreements. See the NOTICE file distributed with this
1:6b7f601:  * work for additional information regarding copyright ownership. The ASF
1:6b7f601:  * licenses this file to You under the Apache License, Version 2.0 (the
1:6b7f601:  * "License"); you may not use this file except in compliance with the License.
1:6b7f601:  * You may obtain a copy of the License at
1:8c37a84:  *
1:6b7f601:  * http://www.apache.org/licenses/LICENSE-2.0
1:8c37a84:  *
1:8c37a84:  * Unless required by applicable law or agreed to in writing, software
1:6b7f601:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:6b7f601:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:6b7f601:  * License for the specific language governing permissions and limitations under
1:6b7f601:  * the License.
1:8c37a84:  */
1:52ce412: package org.apache.mahout.classifier.df.data;
1:e9cc323: 
1:434cdff: import org.apache.mahout.common.MahoutTestCase;
1:ff79ff4: import org.junit.Test;
1:1ffa3a4: @Deprecated
1:ff79ff4: public final class DatasetTest extends MahoutTestCase {
1:e9cc323: 
1:ff79ff4:   @Test
1:6b7f601:   public void jsonEncoding() throws DescriptorException {
1:6b7f601:     Dataset to = DataLoader.generateDataset("N C I L", true, new String[]{"1 foo 2 3", "4 bar 5 6"});
1:e9cc323: 
1:6b7f601:     // to JSON
1:91f15ec:     //assertEquals(json, to.toJSON());
1:6b7f601:     assertEquals(3, to.nbAttributes());
1:6b7f601:     assertEquals(1, to.getIgnored().length);
1:6b7f601:     assertEquals(2, to.getIgnored()[0]);
1:6b7f601:     assertEquals(2, to.getLabelId());
1:6b7f601:     assertTrue(to.isNumerical(0));
1:e9cc323: 
1:6b7f601:     // from JSON
1:91f15ec:     Dataset fromJson = Dataset.fromJSON(to.toJSON());
1:6b7f601:     assertEquals(3, fromJson.nbAttributes());
1:6b7f601:     assertEquals(1, fromJson.getIgnored().length);
1:6b7f601:     assertEquals(2, fromJson.getIgnored()[0]);
1:6b7f601:     assertTrue(fromJson.isNumerical(0));
1:6b7f601:     
1:6b7f601:     // read values for a nominal
1:91f15ec:     assertNotEquals(fromJson.valueOf(1, "bar"), fromJson.valueOf(1, "foo"));
1:44cc7b3:   }
1:44cc7b3: 
1:44cc7b3:   @Test
1:91f15ec:   public void jsonEncodingIgnoreFeatures() throws DescriptorException {;
1:44cc7b3:     Dataset to = DataLoader.generateDataset("N C I L", false, new String[]{"1 foo 2 Red", "4 bar 5 Blue"});
1:44cc7b3: 
1:44cc7b3:     // to JSON
1:91f15ec:     //assertEquals(json, to.toJSON());
1:44cc7b3:     assertEquals(3, to.nbAttributes());
1:44cc7b3:     assertEquals(1, to.getIgnored().length);
1:44cc7b3:     assertEquals(2, to.getIgnored()[0]);
1:44cc7b3:     assertEquals(2, to.getLabelId());
1:44cc7b3:     assertTrue(to.isNumerical(0));
1:91f15ec:     assertNotEquals(to.valueOf(1, "bar"), to.valueOf(1, "foo"));
1:91f15ec:     assertNotEquals(to.valueOf(2, "Red"), to.valueOf(2, "Blue"));
1:44cc7b3: 
1:44cc7b3:     // from JSON
1:91f15ec:     Dataset fromJson = Dataset.fromJSON(to.toJSON());
1:44cc7b3:     assertEquals(3, fromJson.nbAttributes());
1:44cc7b3:     assertEquals(1, fromJson.getIgnored().length);
1:44cc7b3:     assertEquals(2, fromJson.getIgnored()[0]);
1:44cc7b3:     assertTrue(fromJson.isNumerical(0));
1:6b7f601: 
1:44cc7b3:     // read values for a nominal, one before and one after the ignore feature
1:91f15ec:     assertNotEquals(fromJson.valueOf(1, "bar"), fromJson.valueOf(1, "foo"));
1:91f15ec:     assertNotEquals(fromJson.valueOf(2, "Red"), fromJson.valueOf(2, "Blue"));
3:8c37a84:   }
1:8c37a84: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
commit:44cc7b3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     Dataset fromJson = Dataset.fromJSON(json);
/////////////////////////////////////////////////////////////////////////
1:   }
1:   @Test
0:   public void jsonEncodingIgnoreFeatures() throws DescriptorException {
0:     String json = "["
0:         + "{\"values\":null,\"label\":false,\"type\":\"numerical\"},"
0:         + "{\"values\":[\"foo\",\"bar\"],\"label\":false,\"type\":\"categorical\"},"
0:         + "{\"values\":null,\"label\":false,\"type\":\"ignored\"},"
0:         + "{\"values\":[\"Blue\",\"Red\"],\"label\":true,\"type\":\"categorical\"}"
0:         + "]";
1:     Dataset to = DataLoader.generateDataset("N C I L", false, new String[]{"1 foo 2 Red", "4 bar 5 Blue"});
1: 
1:     // to JSON
0:     assertEquals(json, to.toJSON());
1:     assertEquals(3, to.nbAttributes());
1:     assertEquals(1, to.getIgnored().length);
1:     assertEquals(2, to.getIgnored()[0]);
1:     assertEquals(2, to.getLabelId());
1:     assertTrue(to.isNumerical(0));
0:     assertEquals(0, to.valueOf(1, "foo"));
0:     assertEquals(0, to.valueOf(2, "Blue"));
1: 
1:     // from JSON
0:     Dataset fromJson = Dataset.fromJSON(json);
1:     assertEquals(3, fromJson.nbAttributes());
1:     assertEquals(1, fromJson.getIgnored().length);
1:     assertEquals(2, fromJson.getIgnored()[0]);
1:     assertTrue(fromJson.isNumerical(0));
1: 
1:     // read values for a nominal, one before and one after the ignore feature
0:     assertEquals(0, fromJson.valueOf(1, "foo"));
0:     assertEquals(0, fromJson.valueOf(2, "Blue"));
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sean Owen
-------------------------------------------------------------------------------
commit:91f15ec
/////////////////////////////////////////////////////////////////////////
1:     //assertEquals(json, to.toJSON());
/////////////////////////////////////////////////////////////////////////
1:     Dataset fromJson = Dataset.fromJSON(to.toJSON());
1:     assertNotEquals(fromJson.valueOf(1, "bar"), fromJson.valueOf(1, "foo"));
1:   public void jsonEncodingIgnoreFeatures() throws DescriptorException {;
1:     //assertEquals(json, to.toJSON());
1:     assertNotEquals(to.valueOf(1, "bar"), to.valueOf(1, "foo"));
1:     assertNotEquals(to.valueOf(2, "Red"), to.valueOf(2, "Blue"));
1:     Dataset fromJson = Dataset.fromJSON(to.toJSON());
1:     assertNotEquals(fromJson.valueOf(1, "bar"), fromJson.valueOf(1, "foo"));
1:     assertNotEquals(fromJson.valueOf(2, "Red"), fromJson.valueOf(2, "Blue"));
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6b7f601
/////////////////////////////////////////////////////////////////////////
1:  * contributor license agreements. See the NOTICE file distributed with this
1:  * work for additional information regarding copyright ownership. The ASF
1:  * licenses this file to You under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:  * License for the specific language governing permissions and limitations under
1:  * the License.
1:   public void jsonEncoding() throws DescriptorException {
0:     String json = "["
0:             + "{\"values\":null,\"label\":false,\"type\":\"numerical\"},"
0:             + "{\"values\":[\"foo\",\"bar\"],\"label\":false,\"type\":\"categorical\"},"
0:             + "{\"values\":null,\"label\":false,\"type\":\"ignored\"},"
0:             + "{\"values\":null,\"label\":true,\"type\":\"numerical\"}"
0:             + "]";
1:     Dataset to = DataLoader.generateDataset("N C I L", true, new String[]{"1 foo 2 3", "4 bar 5 6"});
1:     // to JSON
0:     assertEquals(json, to.toJSON());
1:     assertEquals(3, to.nbAttributes());
1:     assertEquals(1, to.getIgnored().length);
1:     assertEquals(2, to.getIgnored()[0]);
1:     assertEquals(2, to.getLabelId());
1:     assertTrue(to.isNumerical(0));
1:     // from JSON
0:     Dataset fromJson = new Dataset().fromJSON(json);
1:     assertEquals(3, fromJson.nbAttributes());
1:     assertEquals(1, fromJson.getIgnored().length);
1:     assertEquals(2, fromJson.getIgnored()[0]);
1:     assertTrue(fromJson.isNumerical(0));
1:     
1:     // read values for a nominal
0:     assertEquals(0, fromJson.valueOf(1, "foo"));
1: 
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:e9cc323
/////////////////////////////////////////////////////////////////////////
1: 
0:       // regression
0:       byteOutStream.reset();
1:       
0:       dataset = Utils.randomData(rng, NUM_ATTRIBUTES, true, 1).getDataset();
1:       
0:       dataset.write(out);
1:       
0:       assertEquals(dataset, readDataset(byteOutStream.toByteArray()));
commit:e107bfa
/////////////////////////////////////////////////////////////////////////
0:       Dataset dataset = Utils.randomData(rng, NUM_ATTRIBUTES, false, 1).getDataset();
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
1:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
0: 
0: package org.apache.mahout.df.data;
0: 
0: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
0: import java.io.DataInput;
0: import java.io.DataInputStream;
0: import java.io.DataOutput;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.util.Random;
0: 
0: import org.apache.mahout.df.data.Dataset;
0: 
0: import junit.framework.TestCase;
0: 
0: public class DatasetTest extends TestCase {
0: 
0:   private final int nbAttributes = 10;
0: 
0:   protected Random rng;
0: 
0:   protected ByteArrayOutputStream byteOutStream;
0:   protected DataOutput out;
0: 
0:   protected Dataset readDataset(byte[] bytes) throws IOException {
0:     ByteArrayInputStream byteInStream = new ByteArrayInputStream(bytes);
0:     DataInput in = new DataInputStream(byteInStream);
0:     return Dataset.read(in);
1:   }
0: 
0:   public void testWritable() throws Exception {
0:     int n = 10;
0: 
0:     Random rng = new Random();
0:     byteOutStream = new ByteArrayOutputStream();
0:     out = new DataOutputStream(byteOutStream);
0:     
0:     for (int nloop=0; nloop< n; nloop++) {
0:       byteOutStream.reset();
0:       
0:       Dataset dataset = Utils.randomData(rng, nbAttributes, 1).dataset;
0:       
0:       dataset.write(out);
0:       
0:       assertEquals(dataset, readDataset(byteOutStream.toByteArray()));
1:     }
1:   }
0:   
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.data;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: public final class DatasetTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:   @Test
/////////////////////////////////////////////////////////////////////////
0:     for (int nloop = 0; nloop < n; nloop++) {
commit:515bac4
/////////////////////////////////////////////////////////////////////////
0:   private static final int NUM_ATTRIBUTES = 10;
/////////////////////////////////////////////////////////////////////////
0:       Dataset dataset = Utils.randomData(rng, NUM_ATTRIBUTES, 1).getDataset();
commit:18bf663
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     ByteArrayOutputStream byteOutStream = new ByteArrayOutputStream();
0:     DataOutput out = new DataOutputStream(byteOutStream);
commit:d911fce
/////////////////////////////////////////////////////////////////////////
0:   private ByteArrayOutputStream byteOutStream;
0:   private DataOutput out;
0:   private static Dataset readDataset(byte[] bytes) throws IOException {
commit:434cdff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
0: public class DatasetTest extends MahoutTestCase {
commit:acafdc0
/////////////////////////////////////////////////////////////////////////
0:       Dataset dataset = Utils.randomData(rng, nbAttributes, 1).getDataset();
commit:8547de7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.RandomUtils;
0:   private static final int nbAttributes = 10;
0:   protected static Dataset readDataset(byte[] bytes) throws IOException {
0:     Random rng = RandomUtils.getRandom();
0: 
0:     int n = 10;
============================================================================