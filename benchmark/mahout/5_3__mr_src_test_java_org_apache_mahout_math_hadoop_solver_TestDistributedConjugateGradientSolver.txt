1:e0ec7c1: /**
1:e0ec7c1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e0ec7c1:  * contributor license agreements.  See the NOTICE file distributed with
1:e0ec7c1:  * this work for additional information regarding copyright ownership.
1:e0ec7c1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e0ec7c1:  * (the "License"); you may not use this file except in compliance with
1:e0ec7c1:  * the License.  You may obtain a copy of the License at
1:e0ec7c1:  *
1:e0ec7c1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e0ec7c1:  *
1:e0ec7c1:  * Unless required by applicable law or agreed to in writing, software
1:e0ec7c1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e0ec7c1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e0ec7c1:  * See the License for the specific language governing permissions and
1:e0ec7c1:  * limitations under the License.
1:e0ec7c1:  */
1:e0ec7c1: 
1:5fc5b65: package org.apache.mahout.math.hadoop.solver;
1:5fc5b65: 
1:5fc5b65: import java.io.File;
1:5fc5b65: import java.util.Random;
1:5fc5b65: 
1:e3ec9d8: import org.apache.mahout.common.MahoutTestCase;
1:e0ec7c1: import org.apache.mahout.common.RandomUtils;
1:5fc5b65: import org.apache.mahout.math.DenseVector;
1:5fc5b65: import org.apache.mahout.math.Vector;
1:5fc5b65: import org.apache.mahout.math.hadoop.DistributedRowMatrix;
1:5fc5b65: import org.apache.mahout.math.hadoop.TestDistributedRowMatrix;
1:5fc5b65: import org.junit.Test;
1:5fc5b65: 
1:e0ec7c1: public final class TestDistributedConjugateGradientSolver extends MahoutTestCase {
1:5fc5b65: 
1:e0ec7c1:   private static Vector randomVector(int size, double entryMean) {
1:5fc5b65:     DenseVector v = new DenseVector(size);
1:e0ec7c1:     Random r = RandomUtils.getRandom();
1:5fc5b65:     
1:5fc5b65:     for (int i = 0; i < size; ++i) {
1:5fc5b65:       v.setQuick(i, r.nextGaussian() * entryMean);
1:5fc5b65:     }
1:5fc5b65:     
1:5fc5b65:     return v;
1:5fc5b65:   }
1:5fc5b65: 
1:5fc5b65:   @Test
1:5fc5b65:   public void testSolver() throws Exception {
1:5fc5b65:     File testData = getTestTempDir("testdata");
1:5fc5b65:     DistributedRowMatrix matrix = new TestDistributedRowMatrix().randomDistributedMatrix(
1:5fc5b65:         10, 10, 10, 10, 10.0, true, testData.getAbsolutePath());
1:e3ec9d8:     matrix.setConf(getConfiguration());
1:5fc5b65:     Vector vector = randomVector(matrix.numCols(), 10.0);
1:5fc5b65:     
1:5fc5b65:     DistributedConjugateGradientSolver solver = new DistributedConjugateGradientSolver();
1:5fc5b65:     Vector x = solver.solve(matrix, vector);
1:5fc5b65: 
1:5fc5b65:     Vector solvedVector = matrix.times(x);    
1:5fc5b65:     double distance = Math.sqrt(vector.getDistanceSquared(solvedVector));
1:5fc5b65:     assertEquals(0.0, distance, EPSILON);
1:5fc5b65:   }
1:5fc5b65: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1: public final class TestDistributedConjugateGradientSolver extends MahoutTestCase {
1:   private static Vector randomVector(int size, double entryMean) {
1:     Random r = RandomUtils.getRandom();
author:Isabel Drost
-------------------------------------------------------------------------------
commit:e3ec9d8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
/////////////////////////////////////////////////////////////////////////
1:     matrix.setConf(getConfiguration());
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:5fc5b65
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.solver;
1: 
1: import java.io.File;
1: import java.util.Random;
1: 
0: import org.apache.hadoop.conf.Configuration;
1: import org.apache.mahout.math.DenseVector;
0: import org.apache.mahout.math.MahoutTestCase;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.hadoop.DistributedRowMatrix;
1: import org.apache.mahout.math.hadoop.TestDistributedRowMatrix;
1: import org.junit.Test;
1: 
1: 
0: public class TestDistributedConjugateGradientSolver extends MahoutTestCase
0: {
0:   private Vector randomVector(int size, double entryMean) {
1:     DenseVector v = new DenseVector(size);
0:     Random r = new Random(1234L);
1:     
1:     for (int i = 0; i < size; ++i) {
1:       v.setQuick(i, r.nextGaussian() * entryMean);
1:     }
1:     
1:     return v;
1:   }
1: 
1:   @Test
1:   public void testSolver() throws Exception {
1:     File testData = getTestTempDir("testdata");
1:     DistributedRowMatrix matrix = new TestDistributedRowMatrix().randomDistributedMatrix(
1:         10, 10, 10, 10, 10.0, true, testData.getAbsolutePath());
0:     matrix.setConf(new Configuration());
1:     Vector vector = randomVector(matrix.numCols(), 10.0);
1:     
1:     DistributedConjugateGradientSolver solver = new DistributedConjugateGradientSolver();
1:     Vector x = solver.solve(matrix, vector);
1: 
1:     Vector solvedVector = matrix.times(x);    
1:     double distance = Math.sqrt(vector.getDistanceSquared(solvedVector));
1:     assertEquals(0.0, distance, EPSILON);
1:   }
1: }
============================================================================