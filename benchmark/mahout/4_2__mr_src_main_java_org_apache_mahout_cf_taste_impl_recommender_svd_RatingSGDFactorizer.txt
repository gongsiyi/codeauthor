1:9e1ffa4: /**
1:9e1ffa4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9e1ffa4:  * contributor license agreements.  See the NOTICE file distributed with
1:9e1ffa4:  * this work for additional information regarding copyright ownership.
1:9e1ffa4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9e1ffa4:  * (the "License"); you may not use this file except in compliance with
1:9e1ffa4:  * the License.  You may obtain a copy of the License at
1:9e1ffa4:  *
1:9e1ffa4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9e1ffa4:  *
1:9e1ffa4:  * Unless required by applicable law or agreed to in writing, software
1:9e1ffa4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9e1ffa4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9e1ffa4:  * See the License for the specific language governing permissions and
1:9e1ffa4:  * limitations under the License.
1:9e1ffa4:  */
1:9e1ffa4: 
1:9e1ffa4: package org.apache.mahout.cf.taste.impl.recommender.svd;
1:9e1ffa4: 
1:9e1ffa4: import org.apache.mahout.cf.taste.common.TasteException;
1:9e1ffa4: import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
1:9e1ffa4: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:9e1ffa4: import org.apache.mahout.cf.taste.impl.common.RunningAverage;
1:9e1ffa4: import org.apache.mahout.cf.taste.model.DataModel;
1:9e1ffa4: import org.apache.mahout.cf.taste.model.Preference;
1:9e1ffa4: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:9e1ffa4: import org.apache.mahout.common.RandomUtils;
1:8396a27: import org.apache.mahout.common.RandomWrapper;
1:9e1ffa4: 
1:9e1ffa4: /** Matrix factorization with user and item biases for rating prediction, trained with plain vanilla SGD  */
1:9e1ffa4: public class RatingSGDFactorizer extends AbstractFactorizer {
1:9e1ffa4: 
1:8396a27:   protected static final int FEATURE_OFFSET = 3;
1:9e1ffa4:   
1:9e1ffa4:   /** Multiplicative decay factor for learning_rate */
1:9e1ffa4:   protected final double learningRateDecay;
1:9e1ffa4:   /** Learning rate (step size) */
1:9e1ffa4:   protected final double learningRate;
1:9e1ffa4:   /** Parameter used to prevent overfitting. */
1:9e1ffa4:   protected final double preventOverfitting;
1:9e1ffa4:   /** Number of features used to compute this factorization */
1:9e1ffa4:   protected final int numFeatures;
1:9e1ffa4:   /** Number of iterations */
1:9e1ffa4:   private final int numIterations;
1:9e1ffa4:   /** Standard deviation for random initialization of features */
1:9e1ffa4:   protected final double randomNoise;
1:9e1ffa4:   /** User features */
1:9e1ffa4:   protected double[][] userVectors;
1:9e1ffa4:   /** Item features */
1:9e1ffa4:   protected double[][] itemVectors;
1:9e1ffa4:   protected final DataModel dataModel;
1:9e1ffa4:   private long[] cachedUserIDs;
1:9e1ffa4:   private long[] cachedItemIDs;
1:9e1ffa4: 
1:9e1ffa4:   protected double biasLearningRate = 0.5;
1:9e1ffa4:   protected double biasReg = 0.1;
1:9e1ffa4: 
1:9e1ffa4:   /** place in user vector where the bias is stored */
1:9e1ffa4:   protected static final int USER_BIAS_INDEX = 1;
1:9e1ffa4:   /** place in item vector where the bias is stored */
1:9e1ffa4:   protected static final int ITEM_BIAS_INDEX = 2;
1:9e1ffa4: 
1:9e1ffa4:   public RatingSGDFactorizer(DataModel dataModel, int numFeatures, int numIterations) throws TasteException {
1:9e1ffa4:     this(dataModel, numFeatures, 0.01, 0.1, 0.01, numIterations, 1.0);
2:9e1ffa4:   }
1:9e1ffa4: 
1:9e1ffa4:   public RatingSGDFactorizer(DataModel dataModel, int numFeatures, double learningRate, double preventOverfitting,
1:9e1ffa4:       double randomNoise, int numIterations, double learningRateDecay) throws TasteException {
1:9e1ffa4:     super(dataModel);
1:9e1ffa4:     this.dataModel = dataModel;
1:8396a27:     this.numFeatures = numFeatures + FEATURE_OFFSET;
1:9e1ffa4:     this.numIterations = numIterations;
1:9e1ffa4: 
1:9e1ffa4:     this.learningRate = learningRate;
1:9e1ffa4:     this.learningRateDecay = learningRateDecay;
1:9e1ffa4:     this.preventOverfitting = preventOverfitting;
1:9e1ffa4:     this.randomNoise = randomNoise;
1:9e1ffa4:   }
1:9e1ffa4: 
1:9e1ffa4:   protected void prepareTraining() throws TasteException {
1:8396a27:     RandomWrapper random = RandomUtils.getRandom();
1:9e1ffa4:     userVectors = new double[dataModel.getNumUsers()][numFeatures];
1:9e1ffa4:     itemVectors = new double[dataModel.getNumItems()][numFeatures];
1:9e1ffa4: 
1:9e1ffa4:     double globalAverage = getAveragePreference();
1:9e1ffa4:     for (int userIndex = 0; userIndex < userVectors.length; userIndex++) {
1:9e1ffa4:       userVectors[userIndex][0] = globalAverage;
1:9e1ffa4:       userVectors[userIndex][USER_BIAS_INDEX] = 0; // will store user bias
1:9e1ffa4:       userVectors[userIndex][ITEM_BIAS_INDEX] = 1; // corresponding item feature contains item bias
1:8396a27:       for (int feature = FEATURE_OFFSET; feature < numFeatures; feature++) {
1:9e1ffa4:         userVectors[userIndex][feature] = random.nextGaussian() * randomNoise;
1:9e1ffa4:       }
1:9e1ffa4:     }
1:9e1ffa4:     for (int itemIndex = 0; itemIndex < itemVectors.length; itemIndex++) {
1:9e1ffa4:       itemVectors[itemIndex][0] = 1; // corresponding user feature contains global average
1:9e1ffa4:       itemVectors[itemIndex][USER_BIAS_INDEX] = 1; // corresponding user feature contains user bias
1:9e1ffa4:       itemVectors[itemIndex][ITEM_BIAS_INDEX] = 0; // will store item bias
1:8396a27:       for (int feature = FEATURE_OFFSET; feature < numFeatures; feature++) {
1:9e1ffa4:         itemVectors[itemIndex][feature] = random.nextGaussian() * randomNoise;
1:9e1ffa4:       }
1:9e1ffa4:     }
1:9e1ffa4: 
1:9e1ffa4:     cachePreferences();
1:9e1ffa4:     shufflePreferences();
1:9e1ffa4:   }
1:9e1ffa4: 
1:9e1ffa4:   private int countPreferences() throws TasteException {
1:9e1ffa4:     int numPreferences = 0;
1:9e1ffa4:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:9e1ffa4:     while (userIDs.hasNext()) {
1:9e1ffa4:       PreferenceArray preferencesFromUser = dataModel.getPreferencesFromUser(userIDs.nextLong());
1:9e1ffa4:       numPreferences += preferencesFromUser.length();
1:9e1ffa4:     }
1:9e1ffa4:     return numPreferences;
1:9e1ffa4:   }
1:9e1ffa4: 
1:9e1ffa4:   private void cachePreferences() throws TasteException {
1:9e1ffa4:     int numPreferences = countPreferences();
1:9e1ffa4:     cachedUserIDs = new long[numPreferences];
1:9e1ffa4:     cachedItemIDs = new long[numPreferences];
1:9e1ffa4: 
1:9e1ffa4:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:9e1ffa4:     int index = 0;
1:9e1ffa4:     while (userIDs.hasNext()) {
1:9e1ffa4:       long userID = userIDs.nextLong();
1:9e1ffa4:       PreferenceArray preferencesFromUser = dataModel.getPreferencesFromUser(userID);
1:9e1ffa4:       for (Preference preference : preferencesFromUser) {
1:9e1ffa4:         cachedUserIDs[index] = userID;
1:9e1ffa4:         cachedItemIDs[index] = preference.getItemID();
1:9e1ffa4:         index++;
1:9e1ffa4:       }
1:9e1ffa4:     }
1:9e1ffa4:   }
1:9e1ffa4: 
1:9e1ffa4:   protected void shufflePreferences() {
1:8396a27:     RandomWrapper random = RandomUtils.getRandom();
1:9e1ffa4:     /* Durstenfeld shuffle */
1:9e1ffa4:     for (int currentPos = cachedUserIDs.length - 1; currentPos > 0; currentPos--) {
1:9e1ffa4:       int swapPos = random.nextInt(currentPos + 1);
1:9e1ffa4:       swapCachedPreferences(currentPos, swapPos);
1:9e1ffa4:     }
1:9e1ffa4:   }
1:9e1ffa4: 
1:9e1ffa4:   private void swapCachedPreferences(int posA, int posB) {
1:9e1ffa4:     long tmpUserIndex = cachedUserIDs[posA];
1:9e1ffa4:     long tmpItemIndex = cachedItemIDs[posA];
1:9e1ffa4: 
1:9e1ffa4:     cachedUserIDs[posA] = cachedUserIDs[posB];
1:9e1ffa4:     cachedItemIDs[posA] = cachedItemIDs[posB];
1:9e1ffa4: 
1:9e1ffa4:     cachedUserIDs[posB] = tmpUserIndex;
1:9e1ffa4:     cachedItemIDs[posB] = tmpItemIndex;
1:9e1ffa4:   }
1:9e1ffa4: 
1:9e1ffa4:   @Override
1:9e1ffa4:   public Factorization factorize() throws TasteException {
1:9e1ffa4:     prepareTraining();
1:9e1ffa4:     double currentLearningRate = learningRate;
1:9e1ffa4: 
1:9e1ffa4: 
1:9e1ffa4:     for (int it = 0; it < numIterations; it++) {
1:9e1ffa4:       for (int index = 0; index < cachedUserIDs.length; index++) {
1:9e1ffa4:         long userId = cachedUserIDs[index];
1:9e1ffa4:         long itemId = cachedItemIDs[index];
1:9e1ffa4:         float rating = dataModel.getPreferenceValue(userId, itemId);
1:9e1ffa4:         updateParameters(userId, itemId, rating, currentLearningRate);
1:9e1ffa4:       }
1:9e1ffa4:       currentLearningRate *= learningRateDecay;
1:9e1ffa4:     }
1:9e1ffa4:     return createFactorization(userVectors, itemVectors);
1:9e1ffa4:   }
1:9e1ffa4: 
1:9e1ffa4:   double getAveragePreference() throws TasteException {
1:9e1ffa4:     RunningAverage average = new FullRunningAverage();
1:9e1ffa4:     LongPrimitiveIterator it = dataModel.getUserIDs();
1:9e1ffa4:     while (it.hasNext()) {
1:9e1ffa4:       for (Preference pref : dataModel.getPreferencesFromUser(it.nextLong())) {
1:9e1ffa4:         average.addDatum(pref.getValue());
1:9e1ffa4:       }
1:9e1ffa4:     }
1:9e1ffa4:     return average.getAverage();
1:9e1ffa4:   }
1:9e1ffa4: 
1:8396a27:   protected void updateParameters(long userID, long itemID, float rating, double currentLearningRate) {
1:9e1ffa4:     int userIndex = userIndex(userID);
1:9e1ffa4:     int itemIndex = itemIndex(itemID);
1:9e1ffa4: 
1:9e1ffa4:     double[] userVector = userVectors[userIndex];
1:9e1ffa4:     double[] itemVector = itemVectors[itemIndex];
1:9e1ffa4:     double prediction = predictRating(userIndex, itemIndex);
1:9e1ffa4:     double err = rating - prediction;
1:9e1ffa4: 
1:9e1ffa4:     // adjust user bias
1:9e1ffa4:     userVector[USER_BIAS_INDEX] +=
1:9e1ffa4:         biasLearningRate * currentLearningRate * (err - biasReg * preventOverfitting * userVector[USER_BIAS_INDEX]);
1:9e1ffa4: 
1:9e1ffa4:     // adjust item bias
1:9e1ffa4:     itemVector[ITEM_BIAS_INDEX] +=
1:9e1ffa4:         biasLearningRate * currentLearningRate * (err - biasReg * preventOverfitting * itemVector[ITEM_BIAS_INDEX]);
1:9e1ffa4: 
1:9e1ffa4:     // adjust features
1:8396a27:     for (int feature = FEATURE_OFFSET; feature < numFeatures; feature++) {
1:9e1ffa4:       double userFeature = userVector[feature];
1:9e1ffa4:       double itemFeature = itemVector[feature];
1:9e1ffa4: 
1:9e1ffa4:       double deltaUserFeature = err * itemFeature - preventOverfitting * userFeature;
1:9e1ffa4:       userVector[feature] += currentLearningRate * deltaUserFeature;
1:9e1ffa4: 
1:9e1ffa4:       double deltaItemFeature = err * userFeature - preventOverfitting * itemFeature;
1:9e1ffa4:       itemVector[feature] += currentLearningRate * deltaItemFeature;
1:9e1ffa4:     }
1:9e1ffa4:   }
1:9e1ffa4: 
1:9e1ffa4:   private double predictRating(int userID, int itemID) {
1:9e1ffa4:     double sum = 0;
1:9e1ffa4:     for (int feature = 0; feature < numFeatures; feature++) {
1:9e1ffa4:       sum += userVectors[userID][feature] * itemVectors[itemID][feature];
1:9e1ffa4:     }
1:9e1ffa4:     return sum;
1:4841efb:   }
1:9e1ffa4: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1: }
commit:9e1ffa4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender.svd;
1: 
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.impl.common.RunningAverage;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.Preference;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.common.RandomUtils;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import java.util.Random;
1: 
1: /** Matrix factorization with user and item biases for rating prediction, trained with plain vanilla SGD  */
1: public class RatingSGDFactorizer extends AbstractFactorizer {
1: 
1:   /** Multiplicative decay factor for learning_rate */
1:   protected final double learningRateDecay;
1:   /** Learning rate (step size) */
1:   protected final double learningRate;
1:   /** Parameter used to prevent overfitting. */
1:   protected final double preventOverfitting;
1:   /** Number of features used to compute this factorization */
1:   protected final int numFeatures;
0:   protected final int featureOffset = 3;
1:   /** Number of iterations */
1:   private final int numIterations;
1:   /** Standard deviation for random initialization of features */
1:   protected final double randomNoise;
1:   /** User features */
1:   protected double[][] userVectors;
1:   /** Item features */
1:   protected double[][] itemVectors;
1:   protected final DataModel dataModel;
1:   private long[] cachedUserIDs;
1:   private long[] cachedItemIDs;
1: 
1:   protected double biasLearningRate = 0.5;
1:   protected double biasReg = 0.1;
1: 
1:   /** place in user vector where the bias is stored */
1:   protected static final int USER_BIAS_INDEX = 1;
1:   /** place in item vector where the bias is stored */
1:   protected static final int ITEM_BIAS_INDEX = 2;
1: 
1:   public RatingSGDFactorizer(DataModel dataModel, int numFeatures, int numIterations) throws TasteException {
1:     this(dataModel, numFeatures, 0.01, 0.1, 0.01, numIterations, 1.0);
1:   }
1: 
1:   public RatingSGDFactorizer(DataModel dataModel, int numFeatures, double learningRate, double preventOverfitting,
1:       double randomNoise, int numIterations, double learningRateDecay) throws TasteException {
1:     super(dataModel);
1:     this.dataModel = dataModel;
0:     this.numFeatures = numFeatures + featureOffset;
1:     this.numIterations = numIterations;
1: 
1:     this.learningRate = learningRate;
1:     this.learningRateDecay = learningRateDecay;
1:     this.preventOverfitting = preventOverfitting;
1:     this.randomNoise = randomNoise;
1:   }
1: 
1:   protected void prepareTraining() throws TasteException {
0:     Random random = RandomUtils.getRandom();
1:     userVectors = new double[dataModel.getNumUsers()][numFeatures];
1:     itemVectors = new double[dataModel.getNumItems()][numFeatures];
1: 
1:     double globalAverage = getAveragePreference();
1:     for (int userIndex = 0; userIndex < userVectors.length; userIndex++) {
1:       userVectors[userIndex][0] = globalAverage;
1:       userVectors[userIndex][USER_BIAS_INDEX] = 0; // will store user bias
1:       userVectors[userIndex][ITEM_BIAS_INDEX] = 1; // corresponding item feature contains item bias
0:       for (int feature = featureOffset; feature < numFeatures; feature++) {
1:         userVectors[userIndex][feature] = random.nextGaussian() * randomNoise;
1:       }
1:     }
1:     for (int itemIndex = 0; itemIndex < itemVectors.length; itemIndex++) {
1:       itemVectors[itemIndex][0] = 1; // corresponding user feature contains global average
1:       itemVectors[itemIndex][USER_BIAS_INDEX] = 1; // corresponding user feature contains user bias
1:       itemVectors[itemIndex][ITEM_BIAS_INDEX] = 0; // will store item bias
0:       for (int feature = featureOffset; feature < numFeatures; feature++) {
1:         itemVectors[itemIndex][feature] = random.nextGaussian() * randomNoise;
1:       }
1:     }
1: 
1:     cachePreferences();
1:     shufflePreferences();
1:   }
1: 
1:   private int countPreferences() throws TasteException {
1:     int numPreferences = 0;
1:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:     while (userIDs.hasNext()) {
1:       PreferenceArray preferencesFromUser = dataModel.getPreferencesFromUser(userIDs.nextLong());
1:       numPreferences += preferencesFromUser.length();
1:     }
1:     return numPreferences;
1:   }
1: 
1:   private void cachePreferences() throws TasteException {
1:     int numPreferences = countPreferences();
1:     cachedUserIDs = new long[numPreferences];
1:     cachedItemIDs = new long[numPreferences];
1: 
1:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:     int index = 0;
1:     while (userIDs.hasNext()) {
1:       long userID = userIDs.nextLong();
1:       PreferenceArray preferencesFromUser = dataModel.getPreferencesFromUser(userID);
1:       for (Preference preference : preferencesFromUser) {
1:         cachedUserIDs[index] = userID;
1:         cachedItemIDs[index] = preference.getItemID();
1:         index++;
1:       }
1:     }
1:   }
1: 
1:   protected void shufflePreferences() {
0:     Random random = RandomUtils.getRandom();
1:     /* Durstenfeld shuffle */
1:     for (int currentPos = cachedUserIDs.length - 1; currentPos > 0; currentPos--) {
1:       int swapPos = random.nextInt(currentPos + 1);
1:       swapCachedPreferences(currentPos, swapPos);
1:     }
1:   }
1: 
1:   private void swapCachedPreferences(int posA, int posB) {
1:     long tmpUserIndex = cachedUserIDs[posA];
1:     long tmpItemIndex = cachedItemIDs[posA];
1: 
1:     cachedUserIDs[posA] = cachedUserIDs[posB];
1:     cachedItemIDs[posA] = cachedItemIDs[posB];
1: 
1:     cachedUserIDs[posB] = tmpUserIndex;
1:     cachedItemIDs[posB] = tmpItemIndex;
1:   }
1: 
1:   @Override
1:   public Factorization factorize() throws TasteException {
1:     prepareTraining();
1:     double currentLearningRate = learningRate;
1: 
1: 
1:     for (int it = 0; it < numIterations; it++) {
1:       for (int index = 0; index < cachedUserIDs.length; index++) {
1:         long userId = cachedUserIDs[index];
1:         long itemId = cachedItemIDs[index];
1:         float rating = dataModel.getPreferenceValue(userId, itemId);
1:         updateParameters(userId, itemId, rating, currentLearningRate);
1:       }
1:       currentLearningRate *= learningRateDecay;
1:     }
1:     return createFactorization(userVectors, itemVectors);
1:   }
1: 
1:   double getAveragePreference() throws TasteException {
1:     RunningAverage average = new FullRunningAverage();
1:     LongPrimitiveIterator it = dataModel.getUserIDs();
1:     while (it.hasNext()) {
1:       for (Preference pref : dataModel.getPreferencesFromUser(it.nextLong())) {
1:         average.addDatum(pref.getValue());
1:       }
1:     }
1:     return average.getAverage();
1:   }
1: 
0:   protected void updateParameters(long userID, long itemID, float rating, double currentLearningRate)
0:       throws TasteException {
1:     int userIndex = userIndex(userID);
1:     int itemIndex = itemIndex(itemID);
1: 
1:     double[] userVector = userVectors[userIndex];
1:     double[] itemVector = itemVectors[itemIndex];
1:     double prediction = predictRating(userIndex, itemIndex);
1:     double err = rating - prediction;
1: 
1:     // adjust user bias
1:     userVector[USER_BIAS_INDEX] +=
1:         biasLearningRate * currentLearningRate * (err - biasReg * preventOverfitting * userVector[USER_BIAS_INDEX]);
1: 
1:     // adjust item bias
1:     itemVector[ITEM_BIAS_INDEX] +=
1:         biasLearningRate * currentLearningRate * (err - biasReg * preventOverfitting * itemVector[ITEM_BIAS_INDEX]);
1: 
1:     // adjust features
0:     for (int feature = featureOffset; feature < numFeatures; feature++) {
1:       double userFeature = userVector[feature];
1:       double itemFeature = itemVector[feature];
1: 
1:       double deltaUserFeature = err * itemFeature - preventOverfitting * userFeature;
1:       userVector[feature] += currentLearningRate * deltaUserFeature;
1: 
1:       double deltaItemFeature = err * userFeature - preventOverfitting * itemFeature;
1:       itemVector[feature] += currentLearningRate * deltaItemFeature;
1:     }
1:   }
1: 
1:   private double predictRating(int userID, int itemID) {
1:     double sum = 0;
1:     for (int feature = 0; feature < numFeatures; feature++) {
1:       sum += userVectors[userID][feature] * itemVectors[itemID][feature];
1:     }
1:     return sum;
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8396a27
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomWrapper;
1:   protected static final int FEATURE_OFFSET = 3;
0:   
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     this.numFeatures = numFeatures + FEATURE_OFFSET;
/////////////////////////////////////////////////////////////////////////
1:     RandomWrapper random = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
1:       for (int feature = FEATURE_OFFSET; feature < numFeatures; feature++) {
/////////////////////////////////////////////////////////////////////////
1:       for (int feature = FEATURE_OFFSET; feature < numFeatures; feature++) {
/////////////////////////////////////////////////////////////////////////
1:     RandomWrapper random = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
1:   protected void updateParameters(long userID, long itemID, float rating, double currentLearningRate) {
/////////////////////////////////////////////////////////////////////////
1:     for (int feature = FEATURE_OFFSET; feature < numFeatures; feature++) {
============================================================================