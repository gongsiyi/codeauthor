2:76e80dc: /**
1:76e80dc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:76e80dc:  * contributor license agreements.  See the NOTICE file distributed with
1:76e80dc:  * this work for additional information regarding copyright ownership.
1:76e80dc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:76e80dc:  * (the "License"); you may not use this file except in compliance with
1:76e80dc:  * the License.  You may obtain a copy of the License at
6:76e80dc:  *
1:76e80dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:76e80dc:  *
1:76e80dc:  * Unless required by applicable law or agreed to in writing, software
1:76e80dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:76e80dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:76e80dc:  * See the License for the specific language governing permissions and
1:76e80dc:  * limitations under the License.
6:76e80dc:  */
1:8d102ea: package org.apache.mahout.clustering.iterator;
8:76e80dc: 
1:76e80dc: import java.io.DataInput;
1:76e80dc: import java.io.DataOutput;
1:76e80dc: import java.io.IOException;
1:76e80dc: 
1:76e80dc: import org.apache.mahout.math.SequentialAccessSparseVector;
1:76e80dc: import org.apache.mahout.math.Vector;
1:76e80dc: 
1:d6a0833: @Deprecated
1:3eba6f2: public class CanopyClusteringPolicy extends AbstractClusteringPolicy {
1:229aeff: 
1:229aeff:   private double t1;
1:229aeff:   private double t2;
1:229aeff: 
3:76e80dc:   @Override
1:76e80dc:   public Vector select(Vector probabilities) {
1:76e80dc:     int maxValueIndex = probabilities.maxValueIndex();
1:76e80dc:     Vector weights = new SequentialAccessSparseVector(probabilities.size());
1:76e80dc:     weights.set(maxValueIndex, 1.0);
1:76e80dc:     return weights;
5:76e80dc:   }
1:229aeff: 
1:76e80dc:   @Override
1:76e80dc:   public void write(DataOutput out) throws IOException {
1:76e80dc:     out.writeDouble(t1);
1:76e80dc:     out.writeDouble(t2);
1:76e80dc:   }
1:229aeff: 
1:76e80dc:   @Override
1:76e80dc:   public void readFields(DataInput in) throws IOException {
1:76e80dc:     this.t1 = in.readDouble();
1:76e80dc:     this.t2 = in.readDouble();
1:76e80dc:   }
1:76e80dc:   
1:76e80dc: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d6a0833
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: 
1:   private double t1;
1:   private double t2;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:3eba6f2
/////////////////////////////////////////////////////////////////////////
1: public class CanopyClusteringPolicy extends AbstractClusteringPolicy {
/////////////////////////////////////////////////////////////////////////
commit:8d102ea
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.iterator;
0: import org.apache.mahout.clustering.Cluster;
0: import org.apache.mahout.clustering.classify.ClusterClassifier;
commit:76e80dc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.mahout.clustering;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
0: import java.util.List;
1: 
0: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.SequentialAccessSparseVector;
1: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.math.VectorWritable;
0: import org.apache.mahout.math.function.TimesFunction;
1: 
1: /**
0:  * This is a simple maximum likelihood clustering policy, suitable for k-means
0:  * clustering
1:  * 
1:  */
0: public class CanopyClusteringPolicy implements ClusteringPolicy {
1:   
0:   public CanopyClusteringPolicy() {
0:     super();
1:   }
1:   
0:   private double t1, t2;
1:   
0:   /*
0:    * (non-Javadoc)
1:    * 
0:    * @see
0:    * org.apache.mahout.clustering.ClusteringPolicy#select(org.apache.mahout.
0:    * math.Vector)
1:    */
1:   @Override
1:   public Vector select(Vector probabilities) {
1:     int maxValueIndex = probabilities.maxValueIndex();
1:     Vector weights = new SequentialAccessSparseVector(probabilities.size());
1:     weights.set(maxValueIndex, 1.0);
1:     return weights;
1:   }
1:   
0:   /*
0:    * (non-Javadoc)
1:    * 
0:    * @see
0:    * org.apache.mahout.clustering.ClusteringPolicy#update(org.apache.mahout.
0:    * clustering.ClusterClassifier)
1:    */
1:   @Override
0:   public void update(ClusterClassifier posterior) {
0:     // nothing to do here
1:   }
1:   
1:   @Override
0:   public Vector classify(Vector data, List<Cluster> models) {
0:     int i = 0;
0:     Vector pdfs = new DenseVector(models.size());
0:     for (Cluster model : models) {
0:       pdfs.set(i++, model.pdf(new VectorWritable(data)));
1:     }
0:     return pdfs.assign(new TimesFunction(), 1.0 / pdfs.zSum());
1:   }
1:   
0:   /*
0:    * (non-Javadoc)
1:    * 
0:    * @see org.apache.hadoop.io.Writable#write(java.io.DataOutput)
1:    */
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeDouble(t1);
1:     out.writeDouble(t2);
1:   }
1:   
0:   /*
0:    * (non-Javadoc)
1:    * 
0:    * @see org.apache.hadoop.io.Writable#readFields(java.io.DataInput)
1:    */
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     this.t1 = in.readDouble();
1:     this.t2 = in.readDouble();
1:   }
1:   
1: }
============================================================================