1:845cbcd: /**
1:845cbcd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:845cbcd:  * contributor license agreements.  See the NOTICE file distributed with
1:845cbcd:  * this work for additional information regarding copyright ownership.
1:845cbcd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:845cbcd:  * (the "License"); you may not use this file except in compliance with
1:845cbcd:  * the License.  You may obtain a copy of the License at
1:845cbcd:  *
1:845cbcd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:845cbcd:  *
1:845cbcd:  * Unless required by applicable law or agreed to in writing, software
1:845cbcd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:845cbcd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:845cbcd:  * See the License for the specific language governing permissions and
1:845cbcd:  * limitations under the License.
1:845cbcd:  */
2:845cbcd: 
1:845cbcd: package org.apache.mahout.math.hadoop.similarity.cooccurrence.measures;
1:845cbcd: 
1:845cbcd: import org.apache.mahout.math.Vector;
1:845cbcd: 
1:845cbcd: public class EuclideanDistanceSimilarity implements VectorSimilarityMeasure {
1:845cbcd: 
1:845cbcd:   @Override
1:845cbcd:   public Vector normalize(Vector vector) {
1:845cbcd:     return vector;
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Override
1:845cbcd:   public double norm(Vector vector) {
1:845cbcd:     double norm = 0;
1:dc62944:     for (Vector.Element e : vector.nonZeroes()) {
1:dc62944:       double value = e.get();
1:845cbcd:       norm += value * value;
1:845cbcd:     }
1:845cbcd:     return norm;
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Override
1:845cbcd:   public double aggregate(double valueA, double nonZeroValueB) {
1:845cbcd:     return valueA * nonZeroValueB;
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Override
1:845cbcd:   public double similarity(double dots, double normA, double normB, int numberOfColumns) {
1:570202f:     // Arg can't be negative in theory, but can in practice due to rounding, so cap it.
1:570202f:     // Also note that normA / normB are actually the squares of the norms.
1:570202f:     double euclideanDistance = Math.sqrt(Math.max(0.0, normA - 2 * dots + normB));
1:dbf9bd3:     return 1.0 / (1.0 + euclideanDistance);
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Override
1:4cad7a0:   public boolean consider(int numNonZeroEntriesA, int numNonZeroEntriesB, double maxValueA, double maxValueB,
1:4cad7a0:       double threshold) {
1:845cbcd:     return true;
1:845cbcd:   }
1:845cbcd: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     for (Vector.Element e : vector.nonZeroes()) {
1:       double value = e.get();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:570202f
/////////////////////////////////////////////////////////////////////////
1:     // Arg can't be negative in theory, but can in practice due to rounding, so cap it.
1:     // Also note that normA / normB are actually the squares of the norms.
1:     double euclideanDistance = Math.sqrt(Math.max(0.0, normA - 2 * dots + normB));
commit:dbf9bd3
/////////////////////////////////////////////////////////////////////////
1:     return 1.0 / (1.0 + euclideanDistance);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4cad7a0
/////////////////////////////////////////////////////////////////////////
1:   public boolean consider(int numNonZeroEntriesA, int numNonZeroEntriesB, double maxValueA, double maxValueB,
1:       double threshold) {
commit:4e64e04
/////////////////////////////////////////////////////////////////////////
0:   public boolean consider(int numNonZeroEntriesA, int numNonZeroEntriesB, double maxValueA, double threshold) {
commit:845cbcd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.similarity.cooccurrence.measures;
1: 
1: import org.apache.mahout.math.Vector;
1: 
0: import java.util.Iterator;
1: 
1: public class EuclideanDistanceSimilarity implements VectorSimilarityMeasure {
1: 
1:   @Override
1:   public Vector normalize(Vector vector) {
1:     return vector;
1:   }
1: 
1:   @Override
1:   public double norm(Vector vector) {
1:     double norm = 0;
0:     Iterator<Vector.Element> nonZeroElements = vector.iterateNonZero();
0:     while (nonZeroElements.hasNext()) {
0:       double value = nonZeroElements.next().get();
1:       norm += value * value;
1:     }
1:     return norm;
1:   }
1: 
1:   @Override
1:   public double aggregate(double valueA, double nonZeroValueB) {
1:     return valueA * nonZeroValueB;
1:   }
1: 
1:   @Override
1:   public double similarity(double dots, double normA, double normB, int numberOfColumns) {
0:     double euclideanDistance = Math.sqrt(normA - 2 * dots + normB);
0:     return 1.0 - 1.0 / (1.0 + euclideanDistance);
1:   }
1: 
1:   @Override
0:   public boolean consider(int numNonZeroEntriesA, int numNonZeroEntriesB, double maxValueA, double treshold) {
1:     return true;
1:   }
1: }
============================================================================