1:e55ec3c: /**
1:e55ec3c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e55ec3c:  * contributor license agreements.  See the NOTICE file distributed with
1:e55ec3c:  * this work for additional information regarding copyright ownership.
1:e55ec3c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e55ec3c:  * (the "License"); you may not use this file except in compliance with
1:e55ec3c:  * the License.  You may obtain a copy of the License at
1:e55ec3c:  *
1:e55ec3c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e55ec3c:  *
1:e55ec3c:  * Unless required by applicable law or agreed to in writing, software
1:e55ec3c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e55ec3c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e55ec3c:  * See the License for the specific language governing permissions and
1:e55ec3c:  * limitations under the License.
1:e55ec3c:  */
6:efa490c: 
1:b59e468: package org.apache.mahout.math.hadoop.similarity;
1:efa490c: 
1:efa490c: import org.apache.hadoop.conf.Configuration;
1:efa490c: import org.apache.hadoop.io.DoubleWritable;
1:efa490c: import org.apache.hadoop.io.WritableComparable;
1:efa490c: import org.apache.hadoop.mapreduce.Mapper;
1:e0ec7c1: import org.apache.mahout.common.ClassUtils;
1:efa490c: import org.apache.mahout.common.StringTuple;
1:efa490c: import org.apache.mahout.common.distance.DistanceMeasure;
1:efa490c: import org.apache.mahout.math.NamedVector;
1:efa490c: import org.apache.mahout.math.Vector;
1:efa490c: import org.apache.mahout.math.VectorWritable;
1:efa490c: 
1:efa490c: import java.io.IOException;
1:efa490c: import java.util.List;
1:efa490c: 
1:b59e468: public final class VectorDistanceMapper
1:b59e468:     extends Mapper<WritableComparable<?>, VectorWritable, StringTuple, DoubleWritable> {
1:b59e468: 
1:b59e468:   private DistanceMeasure measure;
1:b59e468:   private List<NamedVector> seedVectors;
1:9dba3cc:   private boolean usesThreshold = false;
1:9dba3cc:   private double maxDistance;
1:efa490c: 
1:efa490c:   @Override
1:b59e468:   protected void map(WritableComparable<?> key, VectorWritable value, Context context)
1:b59e468:     throws IOException, InterruptedException {
1:efa490c:     String keyName;
1:efa490c:     Vector valVec = value.get();
1:efa490c:     if (valVec instanceof NamedVector) {
1:efa490c:       keyName = ((NamedVector) valVec).getName();
7:efa490c:     } else {
1:efa490c:       keyName = key.toString();
12:efa490c:     }
1:9dba3cc:     
1:efa490c:     for (NamedVector seedVector : seedVectors) {
1:efa490c:       double distance = measure.distance(seedVector, valVec);
1:9dba3cc:       if (!usesThreshold || distance <= maxDistance) {
1:6d16230:         StringTuple outKey = new StringTuple();
1:6d16230:         outKey.add(seedVector.getName());
1:6d16230:         outKey.add(keyName);
1:6d16230:         context.write(outKey, new DoubleWritable(distance));
1:9dba3cc:       }
1:efa490c:     }
1:efa490c:   }
1:efa490c: 
1:efa490c:   @Override
1:efa490c:   protected void setup(Context context) throws IOException, InterruptedException {
1:efa490c:     super.setup(context);
1:efa490c:     Configuration conf = context.getConfiguration();
1:9dba3cc: 
1:9dba3cc:     String maxDistanceParam = conf.get(VectorDistanceSimilarityJob.MAX_DISTANCE);
1:9dba3cc:     if (maxDistanceParam != null) {
1:9dba3cc:       usesThreshold = true;
1:9dba3cc:       maxDistance = Double.parseDouble(maxDistanceParam);
1:9dba3cc:     }
1:9dba3cc:     
1:9dba3cc:     measure = ClassUtils.instantiateAs(conf.get(VectorDistanceSimilarityJob.DISTANCE_MEASURE_KEY),
1:9dba3cc:         DistanceMeasure.class);
1:e0ec7c1:     measure.configure(conf);
1:e0ec7c1:     seedVectors = SeedVectorUtil.loadSeedVectors(conf);
1:efa490c:   }
1:efa490c: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:         StringTuple outKey = new StringTuple();
1:         outKey.add(seedVector.getName());
1:         outKey.add(keyName);
1:         context.write(outKey, new DoubleWritable(distance));
commit:9dba3cc
/////////////////////////////////////////////////////////////////////////
1:   private boolean usesThreshold = false;
1:   private double maxDistance;
/////////////////////////////////////////////////////////////////////////
1:     
1:       if (!usesThreshold || distance <= maxDistance) {
0:           StringTuple outKey = new StringTuple();
0:           outKey.add(seedVector.getName());
0:           outKey.add(keyName);
0:           context.write(outKey, new DoubleWritable(distance));          
1:       }
/////////////////////////////////////////////////////////////////////////
1: 
1:     String maxDistanceParam = conf.get(VectorDistanceSimilarityJob.MAX_DISTANCE);
1:     if (maxDistanceParam != null) {
1:       usesThreshold = true;
1:       maxDistance = Double.parseDouble(maxDistanceParam);
1:     }
1:     
1:     measure = ClassUtils.instantiateAs(conf.get(VectorDistanceSimilarityJob.DISTANCE_MEASURE_KEY),
1:         DistanceMeasure.class);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.ClassUtils;
/////////////////////////////////////////////////////////////////////////
0:     measure =
0:         ClassUtils.instantiateAs(conf.get(VectorDistanceSimilarityJob.DISTANCE_MEASURE_KEY), DistanceMeasure.class);
1:     measure.configure(conf);
1:     seedVectors = SeedVectorUtil.loadSeedVectors(conf);
commit:b59e468
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.similarity;
/////////////////////////////////////////////////////////////////////////
1: public final class VectorDistanceMapper
1:     extends Mapper<WritableComparable<?>, VectorWritable, StringTuple, DoubleWritable> {
1: 
1:   private DistanceMeasure measure;
1:   private List<NamedVector> seedVectors;
1:   protected void map(WritableComparable<?> key, VectorWritable value, Context context)
1:     throws IOException, InterruptedException {
/////////////////////////////////////////////////////////////////////////
0:       seedVectors = SeedVectorUtil.loadSeedVectors(conf);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:e55ec3c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     ClassLoader ccl = Thread.currentThread().getContextClassLoader();
0:       seedVectors = new ArrayList<NamedVector>(1000);
0:       SeedVectorUtil.loadSeedVectors(conf, seedVectors);
0:     } catch (InstantiationException e) {
0:     } catch (ClassNotFoundException e) {
commit:efa490c
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.math.hadoop.similarity;
1: 
1: 
0: import com.google.common.collect.Lists;
1: import org.apache.hadoop.conf.Configuration;
0: import org.apache.hadoop.fs.FileStatus;
0: import org.apache.hadoop.fs.FileSystem;
0: import org.apache.hadoop.fs.FileUtil;
0: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.DoubleWritable;
0: import org.apache.hadoop.io.Writable;
1: import org.apache.hadoop.io.WritableComparable;
1: import org.apache.hadoop.mapreduce.Mapper;
0: import org.apache.mahout.clustering.canopy.Canopy;
0: import org.apache.mahout.clustering.kmeans.Cluster;
1: import org.apache.mahout.common.StringTuple;
1: import org.apache.mahout.common.distance.DistanceMeasure;
0: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
0: import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterable;
1: import org.apache.mahout.math.NamedVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Collection;
1: import java.util.List;
1: 
0: /**
0:  *
0:  *
0:  **/
0: public class VectorDistanceMapper extends Mapper<WritableComparable<?>, VectorWritable, StringTuple, DoubleWritable> {
0:   private transient static Logger log = LoggerFactory.getLogger(VectorDistanceMapper.class);
0:   protected DistanceMeasure measure;
0:   protected List<NamedVector> seedVectors;
1: 
1:   @Override
0:   protected void map(WritableComparable<?> key, VectorWritable value, Context context) throws IOException, InterruptedException {
1:     String keyName;
1:     Vector valVec = value.get();
1:     if (valVec instanceof NamedVector) {
1:       keyName = ((NamedVector) valVec).getName();
1:     } else {
1:       keyName = key.toString();
1:     }
1:     for (NamedVector seedVector : seedVectors) {
1:       double distance = measure.distance(seedVector, valVec);
0:       StringTuple outKey = new StringTuple();
0:       outKey.add(seedVector.getName());
0:       outKey.add(keyName);
0:       context.write(outKey, new DoubleWritable(distance));
1:     }
1:   }
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     super.setup(context);
1:     Configuration conf = context.getConfiguration();
0:     try {
0:       ClassLoader ccl = Thread.currentThread().getContextClassLoader();
0:       measure = ccl.loadClass(conf.get(VectorDistanceSimilarityJob.DISTANCE_MEASURE_KEY))
0:               .asSubclass(DistanceMeasure.class).newInstance();
0:       measure.configure(conf);
1: 
1: 
0:       String seedPathStr = conf.get(VectorDistanceSimilarityJob.SEEDS_PATH_KEY);
0:       if (seedPathStr != null && seedPathStr.length() > 0) {
1: 
0:         Path thePath = new Path(seedPathStr, "*");
0:         Collection<Path> result = Lists.newArrayList();
1: 
0:         // get all filtered file names in result list
0:         FileSystem fs = thePath.getFileSystem(conf);
0:         FileStatus[] matches = fs.listStatus(FileUtil.stat2Paths(fs.globStatus(thePath, PathFilters.partFilter())),
0:                 PathFilters.partFilter());
1: 
0:         for (FileStatus match : matches) {
0:           result.add(fs.makeQualified(match.getPath()));
1:         }
0:         seedVectors = new ArrayList<NamedVector>(100);
0:         long item = 0;
0:         for (Path seedPath : result) {
0:           for (Writable value : new SequenceFileValueIterable<Writable>(seedPath, conf)) {
0:             Class<? extends Writable> valueClass = value.getClass();
0:             if (valueClass.equals(Cluster.class)) {
0:               // get the cluster info
0:               Cluster cluster = (Cluster) value;
0:               Vector vector = cluster.getCenter();
0:               if (vector instanceof NamedVector) {
0:                 seedVectors.add((NamedVector) vector);
1:               } else {
0:                 seedVectors.add(new NamedVector(vector, cluster.getIdentifier()));
1:               }
0:             } else if (valueClass.equals(Canopy.class)) {
0:               // get the cluster info
0:               Canopy canopy = (Canopy) value;
0:               Vector vector = canopy.getCenter();
0:               if (vector instanceof NamedVector) {
0:                 seedVectors.add((NamedVector) vector);
1:               } else {
0:                 seedVectors.add(new NamedVector(vector, canopy.getIdentifier()));
1:               }
0:             } else if (valueClass.equals(Vector.class)) {
0:               Vector vector = (Vector) value;
0:               if (vector instanceof NamedVector) {
0:                 seedVectors.add((NamedVector) vector);
1:               } else {
0:                 seedVectors.add(new NamedVector(vector, seedPath + "." + item++));
1:               }
0:             } else if (valueClass.equals(VectorWritable.class) || valueClass.isInstance(VectorWritable.class)) {
0:               VectorWritable vw = (VectorWritable) value;
0:               Vector vector = vw.get();
0:               if (vector instanceof NamedVector) {
0:                 seedVectors.add((NamedVector) vector);
1:               } else {
0:                 seedVectors.add(new NamedVector(vector, seedPath + "." + item++));
1:               }
1:             } else {
0:               throw new IllegalStateException("Bad value class: " + valueClass);
1:             }
1:           }
1:         }
0:         if (seedVectors.isEmpty()) {
0:           throw new IllegalStateException("No seeds found. Check your path: " + seedPathStr);
1:         } else {
0:           log.info("Seed Vectors size: " + seedVectors.size());
1:         }
1:       }
0:     } catch (ClassNotFoundException e) {
0:       throw new IllegalStateException(e);
0:     } catch (IllegalAccessException e) {
0:       throw new IllegalStateException(e);
0:     } catch (InstantiationException e) {
0:       throw new IllegalStateException(e);
1:     }
1:   }
1: }
============================================================================