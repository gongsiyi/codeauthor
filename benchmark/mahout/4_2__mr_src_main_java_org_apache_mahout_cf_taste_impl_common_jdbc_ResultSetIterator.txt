1:ad17b0d: /**
1:ad17b0d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ad17b0d:  * contributor license agreements.  See the NOTICE file distributed with
1:ad17b0d:  * this work for additional information regarding copyright ownership.
1:ad17b0d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ad17b0d:  * (the "License"); you may not use this file except in compliance with
1:ad17b0d:  * the License.  You may obtain a copy of the License at
1:ad17b0d:  *
1:ad17b0d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ad17b0d:  *
1:ad17b0d:  * Unless required by applicable law or agreed to in writing, software
1:ad17b0d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ad17b0d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ad17b0d:  * See the License for the specific language governing permissions and
1:ad17b0d:  * limitations under the License.
1:ad17b0d:  */
1:ad17b0d: 
1:ad17b0d: package org.apache.mahout.cf.taste.impl.common.jdbc;
1:ad17b0d: 
1:ad17b0d: import javax.sql.DataSource;
1:ad17b0d: import java.sql.ResultSet;
1:ad17b0d: import java.sql.SQLException;
1:80366ee: import java.util.Iterator;
1:ad17b0d: 
1:80366ee: import com.google.common.base.Function;
1:80366ee: import com.google.common.collect.ForwardingIterator;
1:80366ee: import com.google.common.collect.Iterators;
1:ad17b0d: 
1:80366ee: public abstract class ResultSetIterator<T> extends ForwardingIterator<T> {
1:80366ee: 
1:80366ee:   private final Iterator<T> delegate;
1:80366ee:   private final EachRowIterator rowDelegate;
1:ad17b0d: 
1:ad17b0d:   protected ResultSetIterator(DataSource dataSource, String sqlQuery) throws SQLException {
1:80366ee:     this.rowDelegate = new EachRowIterator(dataSource, sqlQuery);
1:80366ee:     delegate = Iterators.transform(rowDelegate,
1:6d16230:       new Function<ResultSet, T>() {
1:6d16230:         @Override
1:6d16230:         public T apply(ResultSet from) {
1:6d16230:           try {
1:6d16230:             return parseElement(from);
1:6d16230:           } catch (SQLException sqle) {
1:6d16230:             throw new IllegalStateException(sqle);
1:6d16230:           }
1:6d16230:         }
1:6d16230:       });
1:80366ee:   }
1:ad17b0d: 
1:80366ee:   @Override
1:80366ee:   protected Iterator<T> delegate() {
1:80366ee:     return delegate;
1:80366ee:   }
1:ad17b0d: 
1:ad17b0d:   protected abstract T parseElement(ResultSet resultSet) throws SQLException;
1:ad17b0d: 
1:ad17b0d:   public void skip(int n) {
1:ad17b0d:     if (n >= 1) {
1:80366ee:       try {
1:80366ee:         rowDelegate.skip(n);
1:80366ee:       } catch (SQLException sqle) {
1:80366ee:         throw new IllegalStateException(sqle);
4:ad17b0d:       }
1:ad17b0d:     }
1:ad17b0d:   }
1:ad17b0d: 
1:ad17b0d: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:       new Function<ResultSet, T>() {
1:         @Override
1:         public T apply(ResultSet from) {
1:           try {
1:             return parseElement(from);
1:           } catch (SQLException sqle) {
1:             throw new IllegalStateException(sqle);
1:           }
1:         }
1:       });
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import com.google.common.base.Function;
1: import com.google.common.collect.ForwardingIterator;
1: import com.google.common.collect.Iterators;
1: public abstract class ResultSetIterator<T> extends ForwardingIterator<T> {
1: 
1:   private final Iterator<T> delegate;
1:   private final EachRowIterator rowDelegate;
1:     this.rowDelegate = new EachRowIterator(dataSource, sqlQuery);
1:     delegate = Iterators.transform(rowDelegate,
0:                                    new Function<ResultSet, T>() {
1:                                      @Override
0:                                      public T apply(ResultSet from) {
1:                                        try {
0:                                          return parseElement(from);
1:                                        } catch (SQLException sqle) {
1:                                          throw new IllegalStateException(sqle);
1:                                        }
1:                                      }
0:                                    });
1:   protected Iterator<T> delegate() {
1:     return delegate;
/////////////////////////////////////////////////////////////////////////
1:         rowDelegate.skip(n);
commit:ad17b0d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.common.jdbc;
1: 
1: import javax.sql.DataSource;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
0: import org.apache.mahout.common.iterator.TransformingIterator;
1: 
0: public abstract class ResultSetIterator<T> extends TransformingIterator<ResultSet,T> {
1: 
1:   protected ResultSetIterator(DataSource dataSource, String sqlQuery) throws SQLException {
0:     super(new EachRowIterator(dataSource, sqlQuery));
1:   }
1: 
0:   @Override
0:   protected final T transform(ResultSet in) {
0:     try {
0:       return parseElement(in);
0:     } catch (SQLException sqle) {
0:       throw new IllegalStateException(sqle);
1:     }
1:   }
1: 
1:   protected abstract T parseElement(ResultSet resultSet) throws SQLException;
1: 
1:   public void skip(int n) {
1:     if (n >= 1) {
0:       try {
0:         ((EachRowIterator) getDelegate()).skip(n);
0:       } catch (SQLException sqle) {
0:         throw new IllegalStateException(sqle);
1:       }
1:     }
1:   }
1: 
1: }
============================================================================