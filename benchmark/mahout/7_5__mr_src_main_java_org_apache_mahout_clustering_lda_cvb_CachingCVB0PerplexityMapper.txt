1:131eb4a: /**
1:131eb4a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:131eb4a:  * contributor license agreements.  See the NOTICE file distributed with
1:131eb4a:  * this work for additional information regarding copyright ownership.
1:131eb4a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:131eb4a:  * (the "License"); you may not use this file except in compliance with
1:131eb4a:  * the License.  You may obtain a copy of the License at
1:131eb4a:  *
1:131eb4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:131eb4a:  *
1:131eb4a:  * Unless required by applicable law or agreed to in writing, software
1:131eb4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:131eb4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:131eb4a:  * See the License for the specific language governing permissions and
1:131eb4a:  * limitations under the License.
1:131eb4a:  */
1:131eb4a: package org.apache.mahout.clustering.lda.cvb;
1:131eb4a: 
1:131eb4a: import org.apache.hadoop.conf.Configuration;
1:131eb4a: import org.apache.hadoop.fs.Path;
1:131eb4a: import org.apache.hadoop.io.DoubleWritable;
1:131eb4a: import org.apache.hadoop.io.IntWritable;
1:131eb4a: import org.apache.hadoop.mapreduce.Mapper;
1:131eb4a: import org.apache.mahout.common.MemoryUtil;
1:4fbfbc6: import org.apache.mahout.common.RandomUtils;
1:131eb4a: import org.apache.mahout.math.DenseVector;
1:131eb4a: import org.apache.mahout.math.Vector;
1:131eb4a: import org.apache.mahout.math.VectorWritable;
1:131eb4a: import org.slf4j.Logger;
1:131eb4a: import org.slf4j.LoggerFactory;
1:131eb4a: 
1:131eb4a: import java.io.IOException;
1:131eb4a: import java.util.Random;
1:131eb4a: 
1:131eb4a: public class CachingCVB0PerplexityMapper extends
1:131eb4a:     Mapper<IntWritable, VectorWritable, DoubleWritable, DoubleWritable> {
1:131eb4a:   /**
1:131eb4a:    * Hadoop counters for {@link CachingCVB0PerplexityMapper}, to aid in debugging.
1:131eb4a:    */
1:4fbfbc6:   public enum Counters {
1:4fbfbc6:     SAMPLED_DOCUMENTS
1:131eb4a:   }
1:131eb4a: 
1:4fbfbc6:   private static final Logger log = LoggerFactory.getLogger(CachingCVB0PerplexityMapper.class);
1:4fbfbc6: 
1:4fbfbc6:   private ModelTrainer modelTrainer;
1:c88c240:   private TopicModel readModel;
1:4fbfbc6:   private int maxIters;
1:4fbfbc6:   private int numTopics;
1:4fbfbc6:   private float testFraction;
1:4fbfbc6:   private Random random;
1:4fbfbc6:   private Vector topicVector;
1:4fbfbc6:   private final DoubleWritable outKey = new DoubleWritable();
1:4fbfbc6:   private final DoubleWritable outValue = new DoubleWritable();
1:131eb4a: 
1:131eb4a:   @Override
1:131eb4a:   protected void setup(Context context) throws IOException, InterruptedException {
1:131eb4a:     MemoryUtil.startMemoryLogger(5000);
1:131eb4a: 
1:131eb4a:     log.info("Retrieving configuration");
1:131eb4a:     Configuration conf = context.getConfiguration();
1:564c3e1:     float eta = conf.getFloat(CVB0Driver.TERM_TOPIC_SMOOTHING, Float.NaN);
1:564c3e1:     float alpha = conf.getFloat(CVB0Driver.DOC_TOPIC_SMOOTHING, Float.NaN);
1:131eb4a:     long seed = conf.getLong(CVB0Driver.RANDOM_SEED, 1234L);
1:4fbfbc6:     random = RandomUtils.getRandom(seed);
1:131eb4a:     numTopics = conf.getInt(CVB0Driver.NUM_TOPICS, -1);
1:131eb4a:     int numTerms = conf.getInt(CVB0Driver.NUM_TERMS, -1);
1:131eb4a:     int numUpdateThreads = conf.getInt(CVB0Driver.NUM_UPDATE_THREADS, 1);
1:131eb4a:     int numTrainThreads = conf.getInt(CVB0Driver.NUM_TRAIN_THREADS, 4);
1:131eb4a:     maxIters = conf.getInt(CVB0Driver.MAX_ITERATIONS_PER_DOC, 10);
1:564c3e1:     float modelWeight = conf.getFloat(CVB0Driver.MODEL_WEIGHT, 1.0f);
1:131eb4a:     testFraction = conf.getFloat(CVB0Driver.TEST_SET_FRACTION, 0.1f);
1:131eb4a: 
1:131eb4a:     log.info("Initializing read model");
1:131eb4a:     Path[] modelPaths = CVB0Driver.getModelPaths(conf);
1:e64dd36:     if (modelPaths != null && modelPaths.length > 0) {
1:131eb4a:       readModel = new TopicModel(conf, eta, alpha, null, numUpdateThreads, modelWeight, modelPaths);
1:131eb4a:     } else {
1:131eb4a:       log.info("No model files found");
1:4fbfbc6:       readModel = new TopicModel(numTopics, numTerms, eta, alpha, RandomUtils.getRandom(seed), null,
1:131eb4a:           numTrainThreads, modelWeight);
1:131eb4a:     }
1:131eb4a: 
1:131eb4a:     log.info("Initializing model trainer");
1:131eb4a:     modelTrainer = new ModelTrainer(readModel, null, numTrainThreads, numTopics, numTerms);
1:131eb4a: 
1:131eb4a:     log.info("Initializing topic vector");
1:131eb4a:     topicVector = new DenseVector(new double[numTopics]);
1:131eb4a:   }
1:131eb4a: 
1:131eb4a:   @Override
1:131eb4a:   protected void cleanup(Context context) throws IOException, InterruptedException {
1:c88c240:     readModel.stop();
1:131eb4a:     MemoryUtil.stopMemoryLogger();
1:131eb4a:   }
1:131eb4a: 
1:131eb4a:   @Override
1:131eb4a:   public void map(IntWritable docId, VectorWritable document, Context context)
1:6d16230:     throws IOException, InterruptedException {
1:229aeff:     if (testFraction < 1.0f && random.nextFloat() >= testFraction) {
1:131eb4a:       return;
1:131eb4a:     }
1:131eb4a:     context.getCounter(Counters.SAMPLED_DOCUMENTS).increment(1);
1:131eb4a:     outKey.set(document.get().norm(1));
1:131eb4a:     outValue.set(modelTrainer.calculatePerplexity(document.get(), topicVector.assign(1.0 / numTopics), maxIters));
1:131eb4a:     context.write(outKey, outValue);
1:131eb4a:   }
1:131eb4a: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:c88c240
/////////////////////////////////////////////////////////////////////////
1:   private TopicModel readModel;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     readModel.stop();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     throws IOException, InterruptedException {
commit:4841efb
/////////////////////////////////////////////////////////////////////////
0:       throws IOException, InterruptedException {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:     if (testFraction < 1.0f && random.nextFloat() >= testFraction) {
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:     float eta = conf.getFloat(CVB0Driver.TERM_TOPIC_SMOOTHING, Float.NaN);
1:     float alpha = conf.getFloat(CVB0Driver.DOC_TOPIC_SMOOTHING, Float.NaN);
/////////////////////////////////////////////////////////////////////////
1:     float modelWeight = conf.getFloat(CVB0Driver.MODEL_WEIGHT, 1.0f);
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1:   public enum Counters {
1:     SAMPLED_DOCUMENTS
1:   private static final Logger log = LoggerFactory.getLogger(CachingCVB0PerplexityMapper.class);
1: 
1:   private ModelTrainer modelTrainer;
1:   private int maxIters;
1:   private int numTopics;
1:   private float testFraction;
1:   private Random random;
1:   private Vector topicVector;
1:   private final DoubleWritable outKey = new DoubleWritable();
1:   private final DoubleWritable outValue = new DoubleWritable();
/////////////////////////////////////////////////////////////////////////
1:     random = RandomUtils.getRandom(seed);
/////////////////////////////////////////////////////////////////////////
1:       readModel = new TopicModel(numTopics, numTerms, eta, alpha, RandomUtils.getRandom(seed), null,
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:     if (modelPaths != null && modelPaths.length > 0) {
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:131eb4a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.clustering.lda.cvb;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.DoubleWritable;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.common.MemoryUtil;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.io.IOException;
1: import java.util.Random;
1: 
1: public class CachingCVB0PerplexityMapper extends
1:     Mapper<IntWritable, VectorWritable, DoubleWritable, DoubleWritable> {
1:   /**
1:    * Hadoop counters for {@link CachingCVB0PerplexityMapper}, to aid in debugging.
1:    */
0:   public static enum Counters {
0:     SAMPLED_DOCUMENTS;
1:   }
1: 
0:   private static Logger log = LoggerFactory.getLogger(CachingCVB0PerplexityMapper.class);
0:   protected ModelTrainer modelTrainer;
0:   protected int maxIters;
0:   protected int numTopics;
0:   protected float testFraction;
0:   protected Random random;
0:   protected Vector topicVector;
0:   protected final DoubleWritable outKey = new DoubleWritable();
0:   protected final DoubleWritable outValue = new DoubleWritable();
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     MemoryUtil.startMemoryLogger(5000);
1: 
1:     log.info("Retrieving configuration");
1:     Configuration conf = context.getConfiguration();
0:     double eta = conf.getFloat(CVB0Driver.TERM_TOPIC_SMOOTHING, Float.NaN);
0:     double alpha = conf.getFloat(CVB0Driver.DOC_TOPIC_SMOOTHING, Float.NaN);
1:     long seed = conf.getLong(CVB0Driver.RANDOM_SEED, 1234L);
0:     random = new Random(seed);
1:     numTopics = conf.getInt(CVB0Driver.NUM_TOPICS, -1);
1:     int numTerms = conf.getInt(CVB0Driver.NUM_TERMS, -1);
1:     int numUpdateThreads = conf.getInt(CVB0Driver.NUM_UPDATE_THREADS, 1);
1:     int numTrainThreads = conf.getInt(CVB0Driver.NUM_TRAIN_THREADS, 4);
1:     maxIters = conf.getInt(CVB0Driver.MAX_ITERATIONS_PER_DOC, 10);
0:     double modelWeight = conf.getFloat(CVB0Driver.MODEL_WEIGHT, 1f);
1:     testFraction = conf.getFloat(CVB0Driver.TEST_SET_FRACTION, 0.1f);
1: 
1:     log.info("Initializing read model");
0:     TopicModel readModel;
1:     Path[] modelPaths = CVB0Driver.getModelPaths(conf);
0:     if(modelPaths != null && modelPaths.length > 0) {
1:       readModel = new TopicModel(conf, eta, alpha, null, numUpdateThreads, modelWeight, modelPaths);
1:     } else {
1:       log.info("No model files found");
0:       readModel = new TopicModel(numTopics, numTerms, eta, alpha, new Random(seed), null,
1:           numTrainThreads, modelWeight);
1:     }
1: 
1:     log.info("Initializing model trainer");
1:     modelTrainer = new ModelTrainer(readModel, null, numTrainThreads, numTopics, numTerms);
1: 
1:     log.info("Initializing topic vector");
1:     topicVector = new DenseVector(new double[numTopics]);
1:   }
1: 
1:   @Override
1:   protected void cleanup(Context context) throws IOException, InterruptedException {
1:     MemoryUtil.stopMemoryLogger();
1:   }
1: 
1:   @Override
1:   public void map(IntWritable docId, VectorWritable document, Context context)
0:       throws IOException, InterruptedException{
0:     if (1 > testFraction && random.nextFloat() >= testFraction) {
1:       return;
1:     }
1:     context.getCounter(Counters.SAMPLED_DOCUMENTS).increment(1);
1:     outKey.set(document.get().norm(1));
1:     outValue.set(modelTrainer.calculatePerplexity(document.get(), topicVector.assign(1.0 / numTopics), maxIters));
1:     context.write(outKey, outValue);
1:   }
1: }
============================================================================