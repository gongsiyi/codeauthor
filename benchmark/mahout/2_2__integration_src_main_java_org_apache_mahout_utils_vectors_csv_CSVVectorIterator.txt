1:80366ee: /**
1:80366ee:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:80366ee:  * contributor license agreements.  See the NOTICE file distributed with
1:80366ee:  * this work for additional information regarding copyright ownership.
1:80366ee:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:80366ee:  * (the "License"); you may not use this file except in compliance with
1:80366ee:  * the License.  You may obtain a copy of the License at
1:80366ee:  *
1:80366ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:80366ee:  *
1:80366ee:  * Unless required by applicable law or agreed to in writing, software
1:80366ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:80366ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:80366ee:  * See the License for the specific language governing permissions and
1:80366ee:  * limitations under the License.
1:80366ee:  */
1:80366ee: 
1:80366ee: package org.apache.mahout.utils.vectors.csv;
1:80366ee: 
1:80366ee: import java.io.IOException;
1:80366ee: import java.io.Reader;
1:80366ee: 
1:80366ee: import com.google.common.collect.AbstractIterator;
1:80366ee: import org.apache.commons.csv.CSVParser;
1:80366ee: import org.apache.commons.csv.CSVStrategy;
1:80366ee: import org.apache.mahout.math.DenseVector;
1:80366ee: import org.apache.mahout.math.Vector;
1:80366ee: 
1:80366ee: /**
1:80366ee:  * Iterates a CSV file and produces {@link org.apache.mahout.math.Vector}.
1:80366ee:  * <br/>
1:3c22856:  * The Iterator returned throws {@link UnsupportedOperationException} for the {@link java.util.Iterator#remove()}
1:3c22856:  * method.
1:80366ee:  * <p/>
1:80366ee:  * Assumes DenseVector for now, but in the future may have the option of mapping columns to sparse format
1:80366ee:  * <p/>
1:80366ee:  * The Iterator is not thread-safe.
1:80366ee:  */
1:80366ee: public class CSVVectorIterator extends AbstractIterator<Vector> {
1:80366ee: 
1:80366ee:   private final CSVParser parser;
1:80366ee: 
1:80366ee:   public CSVVectorIterator(Reader reader) {
1:80366ee:     parser = new CSVParser(reader);
1:80366ee:   }
1:80366ee: 
1:80366ee:   public CSVVectorIterator(Reader reader, CSVStrategy strategy) {
1:80366ee:     parser = new CSVParser(reader, strategy);
1:80366ee:   }
1:80366ee: 
1:80366ee:   @Override
1:80366ee:   protected Vector computeNext() {
1:80366ee:     String[] line;
1:80366ee:     try {
1:80366ee:       line = parser.getLine();
1:80366ee:     } catch (IOException e) {
1:80366ee:       throw new IllegalStateException(e);
1:80366ee:     }
1:80366ee:     if (line == null) {
1:80366ee:       return endOfData();
1:80366ee:     }
1:80366ee:     Vector result = new DenseVector(line.length);
1:80366ee:     for (int i = 0; i < line.length; i++) {
1:80366ee:       result.setQuick(i, Double.parseDouble(line[i]));
1:80366ee:     }
1:80366ee:     return result;
1:80366ee:   }
1:80366ee: 
1:80366ee: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1:  * The Iterator returned throws {@link UnsupportedOperationException} for the {@link java.util.Iterator#remove()}
1:  * method.
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:50fd693
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.utils.vectors.csv;
1: 
1: import java.io.IOException;
1: import java.io.Reader;
1: 
1: import com.google.common.collect.AbstractIterator;
1: import org.apache.commons.csv.CSVParser;
1: import org.apache.commons.csv.CSVStrategy;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: 
1: /**
1:  * Iterates a CSV file and produces {@link org.apache.mahout.math.Vector}.
1:  * <br/>
0:  * The Iterator returned throws {@link UnsupportedOperationException} for the {@link java.util.Iterator#remove()} method.
1:  * <p/>
1:  * Assumes DenseVector for now, but in the future may have the option of mapping columns to sparse format
1:  * <p/>
1:  * The Iterator is not thread-safe.
1:  */
1: public class CSVVectorIterator extends AbstractIterator<Vector> {
1: 
1:   private final CSVParser parser;
1: 
1:   public CSVVectorIterator(Reader reader) {
1:     parser = new CSVParser(reader);
1:   }
1: 
1:   public CSVVectorIterator(Reader reader, CSVStrategy strategy) {
1:     parser = new CSVParser(reader, strategy);
1:   }
1: 
1:   @Override
1:   protected Vector computeNext() {
1:     String[] line;
1:     try {
1:       line = parser.getLine();
1:     } catch (IOException e) {
1:       throw new IllegalStateException(e);
1:     }
1:     if (line == null) {
1:       return endOfData();
1:     }
1:     Vector result = new DenseVector(line.length);
1:     for (int i = 0; i < line.length; i++) {
1:       result.setQuick(i, Double.parseDouble(line[i]));
1:     }
1:     return result;
1:   }
1: 
1: }
============================================================================