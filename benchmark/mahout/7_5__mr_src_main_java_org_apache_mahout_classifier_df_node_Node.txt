2:8c37a84: /**
1:8c37a84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c37a84:  * contributor license agreements.  See the NOTICE file distributed with
1:8c37a84:  * this work for additional information regarding copyright ownership.
1:8c37a84:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c37a84:  * (the "License"); you may not use this file except in compliance with
1:8c37a84:  * the License.  You may obtain a copy of the License at
4:8c37a84:  *
1:8c37a84:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8c37a84:  *
1:8c37a84:  * Unless required by applicable law or agreed to in writing, software
1:8c37a84:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c37a84:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c37a84:  * See the License for the specific language governing permissions and
1:8c37a84:  * limitations under the License.
2:8c37a84:  */
3:8c37a84: 
1:52ce412: package org.apache.mahout.classifier.df.node;
1:8c37a84: 
1:d6aba1a: import org.apache.hadoop.io.Writable;
1:d6aba1a: import org.apache.mahout.classifier.df.data.Instance;
1:d6aba1a: 
1:8c37a84: import java.io.DataInput;
1:8c37a84: import java.io.DataOutput;
1:8c37a84: import java.io.IOException;
1:8c37a84: 
1:8c37a84: /**
1:8c37a84:  * Represents an abstract node of a decision tree
1:8c37a84:  */
1:1ffa3a4: @Deprecated
1:8c37a84: public abstract class Node implements Writable {
1:8c37a84:   
1:2bc819e:   protected enum Type {
1:ad11134:     LEAF,
1:ad11134:     NUMERICAL,
1:ad11134:     CATEGORICAL
2:8c37a84:   }
1:8c37a84:   
1:8c37a84:   /**
1:8c37a84:    * predicts the label for the instance
1:8c37a84:    * 
1:8c37a84:    * @return -1 if the label cannot be predicted
1:8c37a84:    */
1:e9cc323:   public abstract double classify(Instance instance);
1:8c37a84:   
1:8c37a84:   /**
1:515bac4:    * @return the total number of nodes of the tree
1:8c37a84:    */
1:8c37a84:   public abstract long nbNodes();
1:8c37a84:   
1:8c37a84:   /**
1:515bac4:    * @return the maximum depth of the tree
1:8c37a84:    */
1:8c37a84:   public abstract long maxDepth();
1:8c37a84:   
1:2bc819e:   protected abstract Type getType();
1:8c37a84:   
1:8547de7:   public static Node read(DataInput in) throws IOException {
1:2bc819e:     Type type = Type.values()[in.readInt()];
1:8c37a84:     Node node;
1:8c37a84:     
1:8c37a84:     switch (type) {
1:8c37a84:       case LEAF:
1:8c37a84:         node = new Leaf();
2:8c37a84:         break;
1:8c37a84:       case NUMERICAL:
1:8c37a84:         node = new NumericalNode();
1:8c37a84:         break;
1:8c37a84:       case CATEGORICAL:
1:8c37a84:         node = new CategoricalNode();
1:8c37a84:         break;
1:8c37a84:       default:
1:ad11134:         throw new IllegalStateException("This implementation is not currently supported");
1:8c37a84:     }
1:8c37a84:     
1:8c37a84:     node.readFields(in);
1:8c37a84:     
1:8c37a84:     return node;
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   public final String toString() {
1:2bc819e:     return getType() + ":" + getString() + ';';
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   protected abstract String getString();
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   public final void write(DataOutput out) throws IOException {
1:2bc819e:     out.writeInt(getType().ordinal());
1:8c37a84:     writeNode(out);
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   protected abstract void writeNode(DataOutput out) throws IOException;
1:8c37a84:   
1:8c37a84: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:d6aba1a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.classifier.df.data.Instance;
1: 
commit:e9cc323
/////////////////////////////////////////////////////////////////////////
1:   public abstract double classify(Instance instance);
commit:e107bfa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.node;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
0: import org.apache.hadoop.io.Writable;
0: import org.apache.mahout.df.data.Instance;
1: 
1: /**
1:  * Represents an abstract node of a decision tree
1:  */
1: public abstract class Node implements Writable {
1: 
0:   protected final static String DELIMITER = ",";
1: 
0:   protected static enum NODE_TYPE {
0:     MOCKLEAF, LEAF, NUMERICAL, CATEGORICAL
0:   };
1: 
1:   /**
1:    * predicts the label for the instance
1:    * 
0:    * @param instance
1:    * @return -1 if the label cannot be predicted
1:    */
0:   public abstract int classify(Instance instance);
1: 
1:   /**
0:    * returns the total number of nodes of the tree
1:    * 
0:    * @return
1:    */
1:   public abstract long nbNodes();
1: 
1:   /**
0:    * returns the maximum depth of the tree
1:    * 
0:    * @return
1:    */
1:   public abstract long maxDepth();
1: 
1:   /**
0:    * converts the node implementation into an int code
1:    * 
0:    * @return
1:    */
0:   private int node2Type() {
0:     if (this instanceof MockLeaf) {
0:       return NODE_TYPE.MOCKLEAF.ordinal();
0:     } else if (this instanceof Leaf) {
0:       return NODE_TYPE.LEAF.ordinal();
0:     } else if (this instanceof NumericalNode) {
0:       return NODE_TYPE.NUMERICAL.ordinal();
0:     } else if (this instanceof CategoricalNode) {
0:       return NODE_TYPE.CATEGORICAL.ordinal();
0:     } else {
0:       throw new RuntimeException(
0:           "This implementation is not currently supported");
1:     }
1:   }
1: 
0:   public static final Node read(DataInput in) throws IOException {
0:     NODE_TYPE type = NODE_TYPE.values()[in.readInt()];
1:     Node node;
1: 
1:     switch (type) {
0:       case MOCKLEAF:
0:         node = new MockLeaf();
1:         break;
1:       case LEAF:
1:         node = new Leaf();
1:         break;
1:       case NUMERICAL:
1:         node = new NumericalNode();
1:         break;
1:       case CATEGORICAL:
1:         node = new CategoricalNode();
1:         break;
1:       default:
0:         throw new RuntimeException(
0:             "This implementation is not currently supported");
1:     }
1: 
1:     node.readFields(in);
1: 
1:     return node;
1:   }
1: 
1:   @Override
1:   public final String toString() {
0:     return node2Type() + ":" + getString() + ";";
1:   }
1: 
1:   protected abstract String getString();
1: 
1:   @Override
1:   public final void write(DataOutput out) throws IOException {
0:     out.writeInt(node2Type());
1:     writeNode(out);
1:   }
1: 
1:   protected abstract void writeNode(DataOutput out) throws IOException;
1: 
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.node;
0: import org.apache.mahout.classifier.df.data.Instance;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:515bac4
/////////////////////////////////////////////////////////////////////////
1:    * @return the total number of nodes of the tree
1:    * @return the maximum depth of the tree
commit:2bc819e
/////////////////////////////////////////////////////////////////////////
1:   protected enum Type {
/////////////////////////////////////////////////////////////////////////
1:   protected abstract Type getType();
1:     Type type = Type.values()[in.readInt()];
/////////////////////////////////////////////////////////////////////////
1:     return getType() + ":" + getString() + ';';
1:     out.writeInt(getType().ordinal());
commit:c40fd07
/////////////////////////////////////////////////////////////////////////
commit:acafdc0
/////////////////////////////////////////////////////////////////////////
0:       throw new IllegalStateException(
/////////////////////////////////////////////////////////////////////////
0:         throw new IllegalStateException(
commit:8547de7
/////////////////////////////////////////////////////////////////////////
0:   //protected static final String DELIMITER = ",";
0:   protected enum NODE_TYPE {
0:   }
/////////////////////////////////////////////////////////////////////////
1:   public static Node read(DataInput in) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:     return node2Type() + ":" + getString() + ';';
author:Robin Anil
-------------------------------------------------------------------------------
commit:ad11134
/////////////////////////////////////////////////////////////////////////
0:   
0:     MOCKLEAF,
1:     LEAF,
1:     NUMERICAL,
1:     CATEGORICAL
0:   
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   
0:   
0:     
/////////////////////////////////////////////////////////////////////////
1:         throw new IllegalStateException("This implementation is not currently supported");
0:     
0:     
0:   
0:   
0:   
0:   
0:   
============================================================================