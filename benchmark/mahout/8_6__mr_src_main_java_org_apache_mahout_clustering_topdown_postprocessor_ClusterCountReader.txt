3:9d44881: /**
1:9d44881:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9d44881:  * contributor license agreements.  See the NOTICE file distributed with
1:9d44881:  * this work for additional information regarding copyright ownership.
1:9d44881:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9d44881:  * (the "License"); you may not use this file except in compliance with
1:9d44881:  * the License.  You may obtain a copy of the License at
3:9d44881:  *
1:9d44881:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9d44881:  *
1:9d44881:  * Unless required by applicable law or agreed to in writing, software
1:9d44881:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9d44881:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9d44881:  * See the License for the specific language governing permissions and
1:9d44881:  * limitations under the License.
3:9d44881:  */
5:9d44881: 
1:9d44881: package org.apache.mahout.clustering.topdown.postprocessor;
1:9d44881: 
1:9d44881: import org.apache.hadoop.conf.Configuration;
1:9d44881: import org.apache.hadoop.fs.FileStatus;
1:9d44881: import org.apache.hadoop.fs.FileSystem;
1:9d44881: import org.apache.hadoop.fs.Path;
1:9d44881: import org.apache.hadoop.io.Writable;
1:bbf5369: import org.apache.mahout.clustering.iterator.ClusterWritable;
1:9d44881: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1:564c3e1: import org.apache.mahout.common.iterator.sequencefile.PathType;
1:564c3e1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator;
1:9d44881: 
1:bbf5369: import java.io.IOException;
1:bbf5369: import java.util.HashMap;
1:564c3e1: import java.util.Iterator;
1:bbf5369: import java.util.Map;
1:bbf5369: 
1:9d44881: /**
1:9d44881:  * Reads the number of clusters produced by the clustering algorithm.
1:9d44881:  */
1:564c3e1: public final class ClusterCountReader {
1:564c3e1: 
1:564c3e1:   private ClusterCountReader() {
1:564c3e1:   }
1:564c3e1: 
1:9d44881:   /**
1:9d44881:    * Reads the number of clusters present by reading the clusters-*-final file.
1:bbf5369:    *
1:bbf5369:    * @param clusterOutputPath The output path provided to the clustering algorithm.
1:bbf5369:    * @param conf              The hadoop configuration.
1:9d44881:    * @return the number of final clusters.
1:9d44881:    */
1:564c3e1:   public static int getNumberOfClusters(Path clusterOutputPath, Configuration conf) throws IOException {
1:564c3e1:     FileSystem fileSystem = clusterOutputPath.getFileSystem(conf);
1:6a3f566:     FileStatus[] clusterFiles = fileSystem.listStatus(clusterOutputPath, PathFilters.finalPartFilter());
1:9d44881:     int numberOfClusters = 0;
1:02ff22f:     Iterator<?> it = new SequenceFileDirValueIterator<>(clusterFiles[0].getPath(),
1:564c3e1:             PathType.LIST,
1:564c3e1:             PathFilters.partFilter(),
1:564c3e1:             null,
1:564c3e1:             true,
1:564c3e1:             conf);
1:564c3e1:     while (it.hasNext()) {
1:564c3e1:       it.next();
1:564c3e1:       numberOfClusters++;
5:9d44881:     }
1:9d44881:     return numberOfClusters;
1:4841efb:   }
1:564c3e1: 
1:bbf5369:   /**
1:bbf5369:    * Generates a list of all cluster ids by reading the clusters-*-final file.
1:bbf5369:    *
1:bbf5369:    * @param clusterOutputPath The output path provided to the clustering algorithm.
1:bbf5369:    * @param conf              The hadoop configuration.
1:bbf5369:    * @return An ArrayList containing the final cluster ids.
1:bbf5369:    */
1:58cc1ae:   public static Map<Integer, Integer> getClusterIDs(Path clusterOutputPath, Configuration conf, boolean keyIsClusterId)
1:58cc1ae:     throws IOException {
1:87c15be:     Map<Integer, Integer> clusterIds = new HashMap<>();
1:bbf5369:     FileSystem fileSystem = clusterOutputPath.getFileSystem(conf);
1:bbf5369:     FileStatus[] clusterFiles = fileSystem.listStatus(clusterOutputPath, PathFilters.finalPartFilter());
1:bbf5369:     //System.out.println("LOOK HERE: " + clusterOutputPath);
1:87c15be:     Iterator<ClusterWritable> it = new SequenceFileDirValueIterator<>(clusterFiles[0].getPath(),
1:bbf5369:             PathType.LIST,
1:bbf5369:             PathFilters.partFilter(),
1:bbf5369:             null,
1:bbf5369:             true,
1:bbf5369:             conf);
1:bbf5369:     int i = 0;
1:bbf5369:     while (it.hasNext()) {
1:335a993:       Integer key;
1:335a993:       Integer value;
1:58cc1ae:       if (keyIsClusterId) { // key is the cluster id, value is i, the index we will use
1:bbf5369:         key = it.next().getValue().getId();
1:bbf5369:         value = i;
1:bbf5369:       } else {
1:bbf5369:         key = i;
1:bbf5369:         value = it.next().getValue().getId();
1:bbf5369:       }
1:bbf5369:       clusterIds.put(key, value);
1:bbf5369:       i++;
1:bbf5369:     }
1:bbf5369:     return clusterIds;
1:bbf5369:   }
1:bbf5369: 
1:9d44881: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     Iterator<?> it = new SequenceFileDirValueIterator<>(clusterFiles[0].getPath(),
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     Map<Integer, Integer> clusterIds = new HashMap<>();
1:     Iterator<ClusterWritable> it = new SequenceFileDirValueIterator<>(clusterFiles[0].getPath(),
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:335a993
/////////////////////////////////////////////////////////////////////////
1:       Integer key;
1:       Integer value;
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import org.apache.mahout.common.iterator.sequencefile.PathType;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator;
1: public final class ClusterCountReader {
1: 
1:   private ClusterCountReader() {
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public static int getNumberOfClusters(Path clusterOutputPath, Configuration conf) throws IOException {
1:     FileSystem fileSystem = clusterOutputPath.getFileSystem(conf);
0:     FileStatus[] clusterFiles = fileSystem.listStatus(clusterOutputPath, CLUSTER_FINAL);
0:     Iterator<?> it = new SequenceFileDirValueIterator<Writable>(clusterFiles[0].getPath(),
1:                                                                 PathType.LIST,
1:                                                                 PathFilters.partFilter(),
1:                                                                 null,
1:                                                                 true,
1:                                                                 conf);
1:     while (it.hasNext()) {
1:       it.next();
1:       numberOfClusters++;
1: 
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1:   public static Map<Integer, Integer> getClusterIDs(Path clusterOutputPath, Configuration conf, boolean keyIsClusterId)
1:     throws IOException {
/////////////////////////////////////////////////////////////////////////
1:       if (keyIsClusterId) { // key is the cluster id, value is i, the index we will use
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:bbf5369
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.iterator.ClusterWritable;
1: import java.io.IOException;
1: import java.util.HashMap;
0: import java.util.Iterator;
1: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
1:    *
1:    * @param clusterOutputPath The output path provided to the clustering algorithm.
1:    * @param conf              The hadoop configuration.
/////////////////////////////////////////////////////////////////////////
1:             PathType.LIST,
1:             PathFilters.partFilter(),
1:             null,
1:             true,
1:             conf);
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Generates a list of all cluster ids by reading the clusters-*-final file.
1:    *
1:    * @param clusterOutputPath The output path provided to the clustering algorithm.
1:    * @param conf              The hadoop configuration.
1:    * @return An ArrayList containing the final cluster ids.
1:    */
0:   public static Map<Integer, Integer> getClusterIDs(Path clusterOutputPath, Configuration conf, boolean keyIsClusterId) throws IOException {
0:     Map<Integer, Integer> clusterIds = new HashMap<Integer, Integer>();
1:     FileSystem fileSystem = clusterOutputPath.getFileSystem(conf);
1:     FileStatus[] clusterFiles = fileSystem.listStatus(clusterOutputPath, PathFilters.finalPartFilter());
1:     //System.out.println("LOOK HERE: " + clusterOutputPath);
0:     Iterator<ClusterWritable> it = new SequenceFileDirValueIterator<ClusterWritable>(clusterFiles[0].getPath(),
0:             PathType.LIST,
0:             PathFilters.partFilter(),
0:             null,
0:             true,
0:             conf);
1:     int i = 0;
1:     while (it.hasNext()) {
0:       Integer key, value;
0:       if (keyIsClusterId == true) { // key is the cluster id, value is i, the index we will use
1:         key = it.next().getValue().getId();
1:         value = i;
1:       } else {
1:         key = i;
1:         value = it.next().getValue().getId();
1:       }
1:       clusterIds.put(key, value);
1:       i++;
1:     }
1:     return clusterIds;
1:   }
1: 
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:6a3f566
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     FileStatus[] clusterFiles = fileSystem.listStatus(clusterOutputPath, PathFilters.finalPartFilter());
/////////////////////////////////////////////////////////////////////////
commit:9d44881
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.clustering.topdown.postprocessor;
1: 
0: import java.io.IOException;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileStatus;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
0: import org.apache.hadoop.fs.PathFilter;
0: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.Writable;
0: import org.apache.hadoop.io.WritableComparable;
1: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1: 
1: /**
1:  * Reads the number of clusters produced by the clustering algorithm.
1:  */
0: public class ClusterCountReader {
1:   
1:   /**
1:    * Reads the number of clusters present by reading the clusters-*-final file.
1:    * 
0:    * @param clusterOutputPath
0:    *          The output path provided to the clustering algorithm.
0:    * @param conf
0:    *          The hadoop configuration.
1:    * @return the number of final clusters.
0:    * @throws IOException
0:    * @throws IllegalAccessException
0:    * @throws InstantiationException
1:    */
0:   public static int getNumberOfClusters(Path clusterOutputPath, Configuration conf) throws IOException,
0:                                                                                    InstantiationException,
0:                                                                                    IllegalAccessException {
1:     int numberOfClusters = 0;
0:     FileStatus[] partFiles = getPartFiles(clusterOutputPath, conf);
0:     for (FileStatus fileStatus : partFiles) {
0:       SequenceFile.Reader reader = new SequenceFile.Reader(FileSystem.get(conf), fileStatus.getPath(), conf);
0:       WritableComparable key = (WritableComparable) reader.getKeyClass().newInstance();
0:       Writable value = (Writable) reader.getValueClass().newInstance();
0:       while (reader.next(key, value)) {
0:         numberOfClusters++;
1:       }
0:       reader.close();
1:     }
1:     return numberOfClusters;
1:   }
1:   
1:   /**
0:    * Gets the part file of the final iteration. clusters-n-final
1:    * 
1:    */
0:   private static FileStatus[] getPartFiles(Path path, Configuration conf) throws IOException {
0:     FileSystem fileSystem = path.getFileSystem(conf);
0:     FileStatus[] clusterFiles = fileSystem.listStatus(path, CLUSTER_FINAL);
0:     FileStatus[] partFileStatuses = fileSystem
0:         .listStatus(clusterFiles[0].getPath(), PathFilters.partFilter());
0:     return partFileStatuses;
1:   }
1:   
1:   /**
0:    * Pathfilter to read the final clustering file.
1:    */
0:   private static final PathFilter CLUSTER_FINAL = new PathFilter() {
0:     @Override
0:     public boolean accept(Path path) {
0:       String name = path.getName();
0:       return name.startsWith("clusters-") && name.endsWith("-final");
1:     }
0:   };
1: }
============================================================================