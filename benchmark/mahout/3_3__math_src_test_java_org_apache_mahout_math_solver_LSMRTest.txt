1:5fc5b65: /*
1:5fc5b65:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5fc5b65:  * contributor license agreements.  See the NOTICE file distributed with
1:5fc5b65:  * this work for additional information regarding copyright ownership.
1:5fc5b65:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5fc5b65:  * (the "License"); you may not use this file except in compliance with
1:5fc5b65:  * the License.  You may obtain a copy of the License at
1:5fc5b65:  *
1:5fc5b65:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5fc5b65:  *
1:5fc5b65:  * Unless required by applicable law or agreed to in writing, software
1:5fc5b65:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5fc5b65:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5fc5b65:  * See the License for the specific language governing permissions and
1:5fc5b65:  * limitations under the License.
2:5fc5b65:  */
2:5fc5b65: 
1:5fc5b65: package org.apache.mahout.math.solver;
1:5fc5b65: 
1:5fc5b65: import org.apache.mahout.math.DenseMatrix;
1:5fc5b65: import org.apache.mahout.math.DenseVector;
1:5fc5b65: import org.apache.mahout.math.MahoutTestCase;
1:5fc5b65: import org.apache.mahout.math.Matrix;
1:ac0abc6: import org.apache.mahout.math.SingularValueDecomposition;
1:5fc5b65: import org.apache.mahout.math.Vector;
1:ac0abc6: import org.apache.mahout.math.function.Functions;
1:5fc5b65: import org.junit.Test;
1:5fc5b65: 
1:e0ec7c1: public final class LSMRTest extends MahoutTestCase {
1:5fc5b65:   @Test
1:5fc5b65:   public void basics() {
1:5fc5b65:     Matrix m = hilbert(5);
1:5fc5b65: 
1:5fc5b65:     // make sure it is the hilbert matrix we know and love
1:5fc5b65:     assertEquals(1, m.get(0, 0), 0);
1:5fc5b65:     assertEquals(0.5, m.get(0, 1), 0);
1:e0ec7c1:     assertEquals(1 / 6.0, m.get(2, 3), 1.0e-9);
1:5fc5b65: 
1:5fc5b65:     Vector x = new DenseVector(new double[]{5, -120, 630, -1120, 630});
1:5fc5b65: 
1:5fc5b65:     Vector b = new DenseVector(5);
1:5fc5b65:     b.assign(1);
1:5fc5b65: 
1:e0ec7c1:     assertEquals(0, m.times(x).minus(b).norm(2), 1.0e-9);
1:5fc5b65: 
1:5fc5b65:     LSMR r = new LSMR();
1:5fc5b65:     Vector x1 = r.solve(m, b);
1:5fc5b65: 
1:5fc5b65:     // the ideal solution is  [5  -120   630 -1120   630] but the 5x5 hilbert matrix
1:5fc5b65:     // has a condition number of almost 500,000 and the normal equation condition
1:5fc5b65:     // number is that squared.  This means that we don't get the exact answer with
1:5fc5b65:     // a fast iterative solution.
1:5fc5b65:     // Thus, we have to check the residuals rather than testing that the answer matched
1:5fc5b65:     // the ideal.
1:e0ec7c1:     assertEquals(0, m.times(x1).minus(b).norm(2), 1.0e-2);
1:e0ec7c1:     assertEquals(0, m.transpose().times(m).times(x1).minus(m.transpose().times(b)).norm(2), 1.0e-7);
1:5fc5b65: 
1:5fc5b65:     // and we need to check that the error estimates are pretty good.
1:e0ec7c1:     assertEquals(m.times(x1).minus(b).norm(2), r.getResidualNorm(), 1.0e-5);
1:e0ec7c1:     assertEquals(m.transpose().times(m).times(x1).minus(m.transpose().times(b)).norm(2), r.getNormalEquationResidual(), 1.0e-9);
1:5fc5b65:   }
1:ac0abc6:   
1:ac0abc6:   @Test
1:ac0abc6:   public void random() {
1:ac0abc6:     Matrix m = new DenseMatrix(200, 30).assign(Functions.random());
1:ac0abc6: 
1:ac0abc6:     Vector b = new DenseVector(200).assign(1);
1:ac0abc6: 
1:ac0abc6:     LSMR r = new LSMR();
1:ac0abc6:     Vector x1 = r.solve(m, b);
1:5fc5b65: 
1:ac0abc6: //    assertEquals(0, m.times(x1).minus(b).norm(2), 1.0e-2);
1:ac0abc6:     double norm = new SingularValueDecomposition(m).getS().viewDiagonal().norm(2);
1:ac0abc6:     double actual = m.transpose().times(m).times(x1).minus(m.transpose().times(b)).norm(2);
1:8396a27:     System.out.printf("%.4f\n", actual / norm * 1.0e6);
1:ac0abc6:     assertEquals(0, actual, norm * 1.0e-5);
1:ac0abc6: 
1:ac0abc6:     // and we need to check that the error estimates are pretty good.
1:ac0abc6:     assertEquals(m.times(x1).minus(b).norm(2), r.getResidualNorm(), 1.0e-5);
1:ac0abc6:     assertEquals(actual, r.getNormalEquationResidual(), 1.0e-9);
1:ac0abc6:   }
1:ac0abc6: 
1:e0ec7c1:   private static Matrix hilbert(int n) {
1:5fc5b65:     Matrix r = new DenseMatrix(n, n);
1:5fc5b65:     for (int i = 0; i < n; i++) {
1:5fc5b65:       for (int j = 0; j < n; j++) {
1:5fc5b65:         r.set(i, j, 1.0 / (i + j + 1));
1:5fc5b65:       }
1:5fc5b65:     }
1:5fc5b65:     return r;
1:5fc5b65:   }
1:5fc5b65: 
1:e0ec7c1:   /*
1:5fc5b65:   private Matrix overDetermined(int n) {
1:5fc5b65:     Random rand = RandomUtils.getRandom();
1:5fc5b65:     Matrix r = new DenseMatrix(2 * n, n);
1:5fc5b65:     for (int i = 0; i < 2 * n; i++) {
1:5fc5b65:       for (int j = 0; j < n; j++) {
1:5fc5b65:         r.set(i, j, rand.nextGaussian());
1:5fc5b65:       }
1:5fc5b65:     }
1:5fc5b65:     return r;
1:5fc5b65:   }
1:e0ec7c1:    */
1:5fc5b65: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8396a27
/////////////////////////////////////////////////////////////////////////
1:     System.out.printf("%.4f\n", actual / norm * 1.0e6);
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1: public final class LSMRTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(1 / 6.0, m.get(2, 3), 1.0e-9);
1:     assertEquals(0, m.times(x).minus(b).norm(2), 1.0e-9);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, m.times(x1).minus(b).norm(2), 1.0e-2);
1:     assertEquals(0, m.transpose().times(m).times(x1).minus(m.transpose().times(b)).norm(2), 1.0e-7);
1:     assertEquals(m.times(x1).minus(b).norm(2), r.getResidualNorm(), 1.0e-5);
1:     assertEquals(m.transpose().times(m).times(x1).minus(m.transpose().times(b)).norm(2), r.getNormalEquationResidual(), 1.0e-9);
1:   private static Matrix hilbert(int n) {
/////////////////////////////////////////////////////////////////////////
1:   /*
/////////////////////////////////////////////////////////////////////////
1:    */
author:Ted Dunning
-------------------------------------------------------------------------------
commit:ac0abc6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.SingularValueDecomposition;
1: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void random() {
1:     Matrix m = new DenseMatrix(200, 30).assign(Functions.random());
1: 
1:     Vector b = new DenseVector(200).assign(1);
1: 
1:     LSMR r = new LSMR();
1:     Vector x1 = r.solve(m, b);
1: 
1: //    assertEquals(0, m.times(x1).minus(b).norm(2), 1.0e-2);
1:     double norm = new SingularValueDecomposition(m).getS().viewDiagonal().norm(2);
1:     double actual = m.transpose().times(m).times(x1).minus(m.transpose().times(b)).norm(2);
0:     System.out.printf("%.4f\n", actual / norm * 1e6);
1:     assertEquals(0, actual, norm * 1.0e-5);
1: 
1:     // and we need to check that the error estimates are pretty good.
1:     assertEquals(m.times(x1).minus(b).norm(2), r.getResidualNorm(), 1.0e-5);
1:     assertEquals(actual, r.getNormalEquationResidual(), 1.0e-9);
1:   }
1: 
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:5fc5b65
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.solver;
1: 
0: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.MahoutTestCase;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.math.solver.LSMR;
1: import org.junit.Test;
1: 
0: import java.util.Random;
1: 
0: /**
0:  * Created by IntelliJ IDEA. User: tdunning Date: Sep 15, 2010 Time: 7:32:27 PM To change this
0:  * template use File | Settings | File Templates.
1:  */
0: public class LSMRTest extends MahoutTestCase {
1:   @Test
1:   public void basics() {
1:     Matrix m = hilbert(5);
1: 
1:     // make sure it is the hilbert matrix we know and love
1:     assertEquals(1, m.get(0, 0), 0);
1:     assertEquals(0.5, m.get(0, 1), 0);
0:     assertEquals(1 / 6.0, m.get(2, 3), 1e-9);
1: 
1:     Vector x = new DenseVector(new double[]{5, -120, 630, -1120, 630});
1: 
1:     Vector b = new DenseVector(5);
1:     b.assign(1);
1: 
0:     assertEquals(0, m.times(x).minus(b).norm(2), 1e-9);
1: 
1:     LSMR r = new LSMR();
1:     Vector x1 = r.solve(m, b);
1: 
1:     // the ideal solution is  [5  -120   630 -1120   630] but the 5x5 hilbert matrix
1:     // has a condition number of almost 500,000 and the normal equation condition
1:     // number is that squared.  This means that we don't get the exact answer with
1:     // a fast iterative solution.
1:     // Thus, we have to check the residuals rather than testing that the answer matched
1:     // the ideal.
0:     assertEquals(m.times(x1).minus(b).norm(2), 0, 1e-2);
0:     assertEquals(0, m.transpose().times(m).times(x1).minus(m.transpose().times(b)).norm(2), 1e-7);
1: 
1:     // and we need to check that the error estimates are pretty good.
0:     assertEquals(m.times(x1).minus(b).norm(2), r.getResidualNorm(), 1e-5);
0:     assertEquals(m.transpose().times(m).times(x1).minus(m.transpose().times(b)).norm(2), r.getNormalEquationResidual(), 1e-9);
1:   }
1:   
0:   private Matrix hilbert(int n) {
1:     Matrix r = new DenseMatrix(n, n);
1:     for (int i = 0; i < n; i++) {
1:       for (int j = 0; j < n; j++) {
1:         r.set(i, j, 1.0 / (i + j + 1));
1:       }
1:     }
1:     return r;
1:   }
1: 
1:   private Matrix overDetermined(int n) {
1:     Random rand = RandomUtils.getRandom();
1:     Matrix r = new DenseMatrix(2 * n, n);
1:     for (int i = 0; i < 2 * n; i++) {
1:       for (int j = 0; j < n; j++) {
1:         r.set(i, j, rand.nextGaussian());
1:       }
1:     }
1:     return r;
1:   }
1: }
============================================================================