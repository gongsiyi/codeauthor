1:3032e7b: /**
1:3032e7b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3032e7b:  * contributor license agreements.  See the NOTICE file distributed with
1:3032e7b:  * this work for additional information regarding copyright ownership.
1:3032e7b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3032e7b:  * (the "License"); you may not use this file except in compliance with
1:3032e7b:  * the License.  You may obtain a copy of the License at
1:3032e7b:  *
1:3032e7b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3032e7b:  *
1:3032e7b:  * Unless required by applicable law or agreed to in writing, software
1:3032e7b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3032e7b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3032e7b:  * See the License for the specific language governing permissions and
1:3032e7b:  * limitations under the License.
1:3032e7b:  */
1:3032e7b: 
1:3032e7b: package org.apache.mahout.math;
1:3032e7b: 
1:3032e7b: import org.apache.mahout.math.function.Functions;
1:3032e7b: import org.apache.mahout.math.function.IntIntFunction;
1:3032e7b: import org.junit.Test;
1:3032e7b: 
1:3032e7b: public class MatricesTest extends MahoutTestCase {
1:3032e7b: 
1:3032e7b:   @Test
1:3032e7b:   public void testFunctionalView() {
1:3032e7b:     Matrix m = Matrices.functionalMatrixView(5, 6, new IntIntFunction() {
1:3032e7b:       @Override
1:3032e7b:       public double apply(int row, int col) {
1:3032e7b:         assertTrue(row < 5);
1:3032e7b:         assertTrue(col < 6);
1:3032e7b:         return row + col;
1:3032e7b:       }
1:3032e7b:     });
1:3032e7b: 
1:3032e7b:     // row-wise sums are 15, 15+ 6, 15 +12, 15+18, 15+24
1:3032e7b:     // so total sum is 1/2*(15+15+24)*5 =27*5 = 135
1:3032e7b:     assertEquals(135, m.aggregate(Functions.PLUS, Functions.IDENTITY), 1e-10);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   @Test
1:3032e7b:   public void testTransposeView() {
1:3032e7b: 
1:3032e7b:     Matrix m = Matrices.gaussianView(5, 6, 1234L);
1:3032e7b:     Matrix controlM = new DenseMatrix(5, 6).assign(m);
1:3032e7b: 
1:3032e7b:     System.out.printf("M=\n%s\n", m);
1:3032e7b:     System.out.printf("controlM=\n%s\n", controlM);
1:3032e7b: 
1:3032e7b:     Matrix mtm = Matrices.transposedView(m).times(m);
1:3032e7b:     Matrix controlMtm = controlM.transpose().times(controlM);
1:3032e7b: 
1:3032e7b:     System.out.printf("M'M=\n%s\n", mtm);
1:3032e7b: 
1:3032e7b:     Matrix diff = mtm.minus(controlMtm);
1:3032e7b: 
1:3032e7b:     assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1:3032e7b: 
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   @Test
1:907781b:   public void testViewDenseSparseReporting() {
1:907781b:     Matrix m = new SparseMatrix(1000, 1000);
1:907781b:     m.set(1, 1, 33.0);
1:907781b:     Matrix mt = Matrices.transposedView(m);
1:907781b: 
1:0b564c7:     assertTrue(mt.viewColumn(0).isDense() == m.viewRow(0).isDense());
1:0b564c7:     assertTrue(mt.viewRow(0).isDense() == m.viewColumn(0).isDense());
1:907781b: 
1:907781b:     m = new DenseMatrix(10,10);
1:907781b:     m.set(1, 1, 33.0);
1:907781b:     mt = Matrices.transposedView(m);
1:907781b: 
1:907781b:     assertTrue(mt.viewColumn(0).isDense());
1:907781b:     assertTrue(mt.viewRow(0).isDense());
1:907781b:   }
1:907781b: 
1:907781b:   @Test
1:3032e7b:   public void testUniformView() {
1:3032e7b:     Matrix m1 = Matrices.uniformView(5, 6, 1234);
1:3032e7b:     Matrix m2 = Matrices.uniformView(5, 6, 1234);
1:3032e7b: 
1:3032e7b:     for (int row = 0; row < m1.numRows(); row++) {
1:3032e7b:       for (int col = 0; col < m1.numCols(); col++) {
1:3032e7b:         assertTrue(m1.getQuick(row, col) >= 0.0);
1:3032e7b:         assertTrue(m1.getQuick(row, col) < 1.0);
1:3032e7b:       }
1:3032e7b:     }
1:3032e7b: 
1:3032e7b:     Matrix diff = m1.minus(m2);
1:3032e7b: 
1:3032e7b:     assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   @Test
1:3032e7b:   public void testSymmetricUniformView() {
1:3032e7b:     Matrix m1 = Matrices.symmetricUniformView(5, 6, 1234);
1:3032e7b:     Matrix m2 = Matrices.symmetricUniformView(5, 6, 1234);
1:3032e7b: 
1:3032e7b:     for (int row = 0; row < m1.numRows(); row++) {
1:3032e7b:       for (int col = 0; col < m1.numCols(); col++) {
1:3032e7b:         assertTrue(m1.getQuick(row, col) >= -1.0);
1:3032e7b:         assertTrue(m1.getQuick(row, col) < 1.0);
1:3032e7b:       }
1:3032e7b:     }
1:3032e7b: 
1:3032e7b:     Matrix diff = m1.minus(m2);
1:3032e7b: 
1:3032e7b:     assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   @Test
1:3032e7b:   public void testGaussianView() {
1:3032e7b:     Matrix m1 = Matrices.gaussianView(5, 6, 1234);
1:3032e7b:     Matrix m2 = Matrices.gaussianView(5, 6, 1234);
1:3032e7b: 
1:3032e7b:     Matrix diff = m1.minus(m2);
1:3032e7b: 
1:3032e7b:     assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b: }
============================================================================
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:0b564c7
/////////////////////////////////////////////////////////////////////////
1:     assertTrue(mt.viewColumn(0).isDense() == m.viewRow(0).isDense());
1:     assertTrue(mt.viewRow(0).isDense() == m.viewColumn(0).isDense());
commit:907781b
/////////////////////////////////////////////////////////////////////////
1:   public void testViewDenseSparseReporting() {
1:     Matrix m = new SparseMatrix(1000, 1000);
1:     m.set(1, 1, 33.0);
1:     Matrix mt = Matrices.transposedView(m);
1: 
0:     assertTrue(!mt.viewColumn(0).isDense());
0:     assertTrue(!mt.viewRow(0).isDense());
1: 
1:     m = new DenseMatrix(10,10);
1:     m.set(1, 1, 33.0);
1:     mt = Matrices.transposedView(m);
1: 
1:     assertTrue(mt.viewColumn(0).isDense());
1:     assertTrue(mt.viewRow(0).isDense());
1:   }
1: 
1:   @Test
commit:3032e7b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.math.function.Functions;
1: import org.apache.mahout.math.function.IntIntFunction;
1: import org.junit.Test;
1: 
1: public class MatricesTest extends MahoutTestCase {
1: 
1:   @Test
1:   public void testFunctionalView() {
1:     Matrix m = Matrices.functionalMatrixView(5, 6, new IntIntFunction() {
1:       @Override
1:       public double apply(int row, int col) {
1:         assertTrue(row < 5);
1:         assertTrue(col < 6);
1:         return row + col;
1:       }
1:     });
1: 
1:     // row-wise sums are 15, 15+ 6, 15 +12, 15+18, 15+24
1:     // so total sum is 1/2*(15+15+24)*5 =27*5 = 135
1:     assertEquals(135, m.aggregate(Functions.PLUS, Functions.IDENTITY), 1e-10);
1:   }
1: 
1:   @Test
1:   public void testTransposeView() {
1: 
1:     Matrix m = Matrices.gaussianView(5, 6, 1234L);
1:     Matrix controlM = new DenseMatrix(5, 6).assign(m);
1: 
1:     System.out.printf("M=\n%s\n", m);
1:     System.out.printf("controlM=\n%s\n", controlM);
1: 
1:     Matrix mtm = Matrices.transposedView(m).times(m);
1:     Matrix controlMtm = controlM.transpose().times(controlM);
1: 
1:     System.out.printf("M'M=\n%s\n", mtm);
1: 
1:     Matrix diff = mtm.minus(controlMtm);
1: 
1:     assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1: 
1:   }
1: 
1:   @Test
1:   public void testUniformView() {
1:     Matrix m1 = Matrices.uniformView(5, 6, 1234);
1:     Matrix m2 = Matrices.uniformView(5, 6, 1234);
1: 
1:     for (int row = 0; row < m1.numRows(); row++) {
1:       for (int col = 0; col < m1.numCols(); col++) {
1:         assertTrue(m1.getQuick(row, col) >= 0.0);
1:         assertTrue(m1.getQuick(row, col) < 1.0);
1:       }
1:     }
1: 
1:     Matrix diff = m1.minus(m2);
1: 
1:     assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1:   }
1: 
1:   @Test
1:   public void testSymmetricUniformView() {
1:     Matrix m1 = Matrices.symmetricUniformView(5, 6, 1234);
1:     Matrix m2 = Matrices.symmetricUniformView(5, 6, 1234);
1: 
1:     for (int row = 0; row < m1.numRows(); row++) {
1:       for (int col = 0; col < m1.numCols(); col++) {
1:         assertTrue(m1.getQuick(row, col) >= -1.0);
1:         assertTrue(m1.getQuick(row, col) < 1.0);
1:       }
1:     }
1: 
1:     Matrix diff = m1.minus(m2);
1: 
1:     assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1:   }
1: 
1:   @Test
1:   public void testGaussianView() {
1:     Matrix m1 = Matrices.gaussianView(5, 6, 1234);
1:     Matrix m2 = Matrices.gaussianView(5, 6, 1234);
1: 
1:     Matrix diff = m1.minus(m2);
1: 
1:     assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1:   }
1: 
1: }
============================================================================