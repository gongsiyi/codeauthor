1:7aa6232: /*
1:7aa6232:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7aa6232:  * contributor license agreements.  See the NOTICE file distributed with
1:7aa6232:  * this work for additional information regarding copyright ownership.
1:7aa6232:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7aa6232:  * (the "License"); you may not use this file except in compliance with
1:7aa6232:  * the License.  You may obtain a copy of the License at
2:7aa6232:  *
1:7aa6232:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7aa6232:  *
1:7aa6232:  * Unless required by applicable law or agreed to in writing, software
1:7aa6232:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7aa6232:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7aa6232:  * See the License for the specific language governing permissions and
1:7aa6232:  * limitations under the License.
2:7aa6232:  */
1:7aa6232: 
1:7aa6232: package org.apache.mahout.classifier.sgd;
1:7aa6232: 
1:7aa6232: import org.apache.commons.cli2.CommandLine;
1:7aa6232: import org.apache.commons.cli2.Group;
1:7aa6232: import org.apache.commons.cli2.Option;
1:7aa6232: import org.apache.commons.cli2.builder.ArgumentBuilder;
1:7aa6232: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1:7aa6232: import org.apache.commons.cli2.builder.GroupBuilder;
1:7aa6232: import org.apache.commons.cli2.commandline.Parser;
1:7aa6232: import org.apache.commons.cli2.util.HelpFormatter;
1:4ef9d31: import org.apache.commons.io.Charsets;
1:4ef9d31: import org.apache.mahout.classifier.evaluation.Auc;
1:7aa6232: import org.apache.mahout.math.Matrix;
1:7aa6232: import org.apache.mahout.math.SequentialAccessSparseVector;
1:7aa6232: import org.apache.mahout.math.Vector;
1:7aa6232: 
1:7aa6232: import java.io.BufferedReader;
1:7aa6232: import java.io.File;
1:229aeff: import java.io.OutputStreamWriter;
1:a515335: import java.io.PrintWriter;
1:977cc39: import java.util.Locale;
1:c1a4188: 
1:3f1450a: public final class RunLogistic {
1:7aa6232: 
1:7aa6232:   private static String inputFile;
1:7aa6232:   private static String modelFile;
1:c1a4188:   private static boolean showAuc;
1:c1a4188:   private static boolean showScores;
1:c1a4188:   private static boolean showConfusion;
1:c1a4188: 
1:c1a4188:   private RunLogistic() {
1:c1a4188:   }
1:a515335: 
1:1ead5ae:   public static void main(String[] args) throws Exception {
1:229aeff:     mainToOutput(args, new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true));
1:a515335:   }
1:7aa6232: 
1:1ead5ae:   static void mainToOutput(String[] args, PrintWriter output) throws Exception {
1:7aa6232:     if (parseArgs(args)) {
1:7aa6232:       if (!showAuc && !showConfusion && !showScores) {
1:7aa6232:         showAuc = true;
1:7aa6232:         showConfusion = true;
2:7aa6232:       }
1:7aa6232: 
1:7aa6232:       Auc collector = new Auc();
1:7aa6232:       LogisticModelParameters lmp = LogisticModelParameters.loadFrom(new File(modelFile));
1:7aa6232: 
1:7aa6232:       CsvRecordFactory csv = lmp.getCsvRecordFactory();
1:7aa6232:       OnlineLogisticRegression lr = lmp.createRegression();
1:61ae2e7:       BufferedReader in = TrainLogistic.open(inputFile);
1:7aa6232:       String line = in.readLine();
1:7aa6232:       csv.firstLine(line);
1:7aa6232:       line = in.readLine();
1:7aa6232:       if (showScores) {
1:229aeff:         output.println("\"target\",\"model-output\",\"log-likelihood\"");
1:1ead5ae:       }
1:7aa6232:       while (line != null) {
1:7aa6232:         Vector v = new SequentialAccessSparseVector(lmp.getNumFeatures());
1:4fbfbc6:         int target = csv.processLine(line, v);
1:4fbfbc6: 
1:7aa6232:         double score = lr.classifyScalar(v);
1:7aa6232:         if (showScores) {
1:bdb1c48:           output.printf(Locale.ENGLISH, "%d,%.3f,%.6f%n", target, score, lr.logLikelihood(target, v));
1:7aa6232:         }
1:7aa6232:         collector.add(target, score);
1:7aa6232:         line = in.readLine();
1:7aa6232:       }
1:7aa6232: 
1:7aa6232:       if (showAuc) {
1:bdb1c48:         output.printf(Locale.ENGLISH, "AUC = %.2f%n", collector.auc());
1:7aa6232:       }
1:7aa6232:       if (showConfusion) {
1:7aa6232:         Matrix m = collector.confusion();
1:bdb1c48:         output.printf(Locale.ENGLISH, "confusion: [[%.1f, %.1f], [%.1f, %.1f]]%n",
1:c1a4188:           m.get(0, 0), m.get(1, 0), m.get(0, 1), m.get(1, 1));
1:7aa6232:         m = collector.entropy();
1:bdb1c48:         output.printf(Locale.ENGLISH, "entropy: [[%.1f, %.1f], [%.1f, %.1f]]%n",
1:c1a4188:           m.get(0, 0), m.get(1, 0), m.get(0, 1), m.get(1, 1));
1:7aa6232:       }
1:7aa6232:     }
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   private static boolean parseArgs(String[] args) {
1:c1a4188:     DefaultOptionBuilder builder = new DefaultOptionBuilder();
1:7aa6232: 
1:7aa6232:     Option help = builder.withLongName("help").withDescription("print this list").create();
1:7aa6232: 
1:7aa6232:     Option quiet = builder.withLongName("quiet").withDescription("be extra quiet").create();
1:7aa6232: 
1:7aa6232:     Option auc = builder.withLongName("auc").withDescription("print AUC").create();
1:7aa6232:     Option confusion = builder.withLongName("confusion").withDescription("print confusion matrix").create();
1:7aa6232: 
1:7aa6232:     Option scores = builder.withLongName("scores").withDescription("print scores").create();
1:7aa6232: 
1:7aa6232:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:c1a4188:     Option inputFileOption = builder.withLongName("input")
1:7aa6232:             .withRequired(true)
1:7aa6232:             .withArgument(argumentBuilder.withName("input").withMaximum(1).create())
1:7aa6232:             .withDescription("where to get training data")
1:7aa6232:             .create();
1:7aa6232: 
1:c1a4188:     Option modelFileOption = builder.withLongName("model")
1:7aa6232:             .withRequired(true)
1:7aa6232:             .withArgument(argumentBuilder.withName("model").withMaximum(1).create())
1:7aa6232:             .withDescription("where to get a model")
1:7aa6232:             .create();
1:7aa6232: 
1:7aa6232:     Group normalArgs = new GroupBuilder()
1:7aa6232:             .withOption(help)
1:7aa6232:             .withOption(quiet)
1:7aa6232:             .withOption(auc)
1:7aa6232:             .withOption(scores)
1:7aa6232:             .withOption(confusion)
1:c1a4188:             .withOption(inputFileOption)
1:c1a4188:             .withOption(modelFileOption)
1:7aa6232:             .create();
1:7aa6232: 
1:7aa6232:     Parser parser = new Parser();
1:7aa6232:     parser.setHelpOption(help);
1:7aa6232:     parser.setHelpTrigger("--help");
1:7aa6232:     parser.setGroup(normalArgs);
1:7aa6232:     parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
1:c1a4188:     CommandLine cmdLine = parser.parseAndHelp(args);
1:7aa6232: 
1:7aa6232:     if (cmdLine == null) {
1:7aa6232:       return false;
1:7aa6232:     }
1:7aa6232: 
1:c1a4188:     inputFile = getStringArgument(cmdLine, inputFileOption);
1:c1a4188:     modelFile = getStringArgument(cmdLine, modelFileOption);
1:c1a4188:     showAuc = getBooleanArgument(cmdLine, auc);
1:c1a4188:     showScores = getBooleanArgument(cmdLine, scores);
1:c1a4188:     showConfusion = getBooleanArgument(cmdLine, confusion);
1:7aa6232: 
1:7aa6232:     return true;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   private static boolean getBooleanArgument(CommandLine cmdLine, Option option) {
1:7aa6232:     return cmdLine.hasOption(option);
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   private static String getStringArgument(CommandLine cmdLine, Option inputFile) {
1:7aa6232:     return (String) cmdLine.getValue(inputFile);
1:7aa6232:   }
1:7aa6232: 
1:7aa6232: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
1: import org.apache.mahout.classifier.evaluation.Auc;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1:           output.printf(Locale.ENGLISH, "%d,%.3f,%.6f%n", target, score, lr.logLikelihood(target, v));
1:         output.printf(Locale.ENGLISH, "AUC = %.2f%n", collector.auc());
1:         output.printf(Locale.ENGLISH, "confusion: [[%.1f, %.1f], [%.1f, %.1f]]%n",
1:         output.printf(Locale.ENGLISH, "entropy: [[%.1f, %.1f], [%.1f, %.1f]]%n",
commit:977cc39
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
0:         output.printf(Locale.ENGLISH, "\"%s\",\"%s\",\"%s\"\n", "target", "model-output", "log-likelihood");
0:           output.printf(Locale.ENGLISH, "%d,%.3f,%.6f\n", target, score, lr.logLikelihood(target, v));
0:         output.printf(Locale.ENGLISH, "AUC = %.2f\n", collector.auc());
0:         output.printf(Locale.ENGLISH, "confusion: [[%.1f, %.1f], [%.1f, %.1f]]\n",
0:         output.printf(Locale.ENGLISH, "entropy: [[%.1f, %.1f], [%.1f, %.1f]]\n",
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
1: import java.io.OutputStreamWriter;
/////////////////////////////////////////////////////////////////////////
1:     mainToOutput(args, new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true));
/////////////////////////////////////////////////////////////////////////
1:         output.println("\"target\",\"model-output\",\"log-likelihood\"");
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         int target = csv.processLine(line, v);
1: 
commit:23722bc
/////////////////////////////////////////////////////////////////////////
0:     mainToOutput(args, new PrintWriter(System.out, true));
commit:a515335
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintWriter;
/////////////////////////////////////////////////////////////////////////
0:     mainToOutput(args, new PrintWriter(System.out));
1:   }
1: 
0:   static void mainToOutput(String[] args, PrintWriter output) throws IOException {
commit:61ae2e7
/////////////////////////////////////////////////////////////////////////
1:       BufferedReader in = TrainLogistic.open(inputFile);
commit:3f1450a
/////////////////////////////////////////////////////////////////////////
1: public final class RunLogistic {
commit:c1a4188
/////////////////////////////////////////////////////////////////////////
1: 
1:   private static boolean showAuc;
1:   private static boolean showScores;
1:   private static boolean showConfusion;
1: 
1:   private RunLogistic() {
1:   }
/////////////////////////////////////////////////////////////////////////
0:         System.out.printf("confusion: [[%.1f, %.1f], [%.1f, %.1f]]\n",
1:             m.get(0, 0), m.get(1, 0), m.get(0, 1), m.get(1, 1));
0:         System.out.printf("entropy: [[%.1f, %.1f], [%.1f, %.1f]]\n",
1:             m.get(0, 0), m.get(1, 0), m.get(0, 1), m.get(1, 1));
1:     DefaultOptionBuilder builder = new DefaultOptionBuilder();
/////////////////////////////////////////////////////////////////////////
1:     Option inputFileOption = builder.withLongName("input")
1:     Option modelFileOption = builder.withLongName("model")
/////////////////////////////////////////////////////////////////////////
1:             .withOption(inputFileOption)
1:             .withOption(modelFileOption)
/////////////////////////////////////////////////////////////////////////
1:     CommandLine cmdLine = parser.parseAndHelp(args);
1:     inputFile = getStringArgument(cmdLine, inputFileOption);
1:     modelFile = getStringArgument(cmdLine, modelFileOption);
1:     showAuc = getBooleanArgument(cmdLine, auc);
1:     showScores = getBooleanArgument(cmdLine, scores);
1:     showConfusion = getBooleanArgument(cmdLine, confusion);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:1ead5ae
/////////////////////////////////////////////////////////////////////////
1:   public static void main(String[] args) throws Exception {
1:   static void mainToOutput(String[] args, PrintWriter output) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:       int lineCount = 0;
0:         int target = 0;
0:         try {
0:           target = csv.processLine(line, v);
0:         } catch (Exception e) {
0:           System.out.println("Exception at line " + lineCount);
0:           throw e;
1:         }
0:         lineCount++;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:ebaa95d
/////////////////////////////////////////////////////////////////////////
0: import java.io.PrintStream;
/////////////////////////////////////////////////////////////////////////
0:   static PrintStream output = System.out;
/////////////////////////////////////////////////////////////////////////
0:         output.printf("\"%s\",\"%s\",\"%s\"\n", "target", "model-output", "log-likelihood");
0:           output.printf("%d,%.3f,%.6f\n", target, score, lr.logLikelihood(target, v));
0:         output.printf("AUC = %.2f\n", collector.auc());
0:         output.printf("confusion: [[%.1f, %.1f], [%.1f, %.1f]]\n",
0:           m.get(0, 0), m.get(1, 0), m.get(0, 1), m.get(1, 1));
0:         output.printf("entropy: [[%.1f, %.1f], [%.1f, %.1f]]\n",
0:           m.get(0, 0), m.get(1, 0), m.get(0, 1), m.get(1, 1));
commit:7aa6232
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
1: import org.apache.commons.cli2.CommandLine;
1: import org.apache.commons.cli2.Group;
1: import org.apache.commons.cli2.Option;
1: import org.apache.commons.cli2.builder.ArgumentBuilder;
1: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1: import org.apache.commons.cli2.builder.GroupBuilder;
1: import org.apache.commons.cli2.commandline.Parser;
1: import org.apache.commons.cli2.util.HelpFormatter;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.SequentialAccessSparseVector;
1: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.classifier.evaluation.Auc;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
0: import java.io.IOException;
1: 
0: /**
1:  *
1:  */
0: public class RunLogistic {
0:   private static final Logger log = LoggerFactory.getLogger(RunLogistic.class);
1:   private static String inputFile;
1:   private static String modelFile;
0:   private static boolean showAuc = false;
0:   private static boolean showScores = false;
0:   private static boolean showConfusion = false;
1: 
0:   public static void main(String[] args) throws IOException {
1:     if (parseArgs(args)) {
1:       if (!showAuc && !showConfusion && !showScores) {
1:         showAuc = true;
1:         showConfusion = true;
1:       }
1: 
1:       Auc collector = new Auc();
1:       LogisticModelParameters lmp = LogisticModelParameters.loadFrom(new File(modelFile));
1: 
1:       CsvRecordFactory csv = lmp.getCsvRecordFactory();
1:       OnlineLogisticRegression lr = lmp.createRegression();
0:       BufferedReader in = TrainLogistic.InputOpener.open(inputFile);
1:       String line = in.readLine();
1:       csv.firstLine(line);
1:       line = in.readLine();
1:       if (showScores) {
0:         System.out.printf("\"%s\",\"%s\",\"%s\"\n", "target", "model-output", "log-likelihood");
1:       }
1:       while (line != null) {
1:         Vector v = new SequentialAccessSparseVector(lmp.getNumFeatures());
0:         int target = csv.processLine(line, v);
1:         double score = lr.classifyScalar(v);
1:         if (showScores) {
0:           System.out.printf("%d,%.3f,%.6f\n", target, score, lr.logLikelihood(target, v));
1:         }
1:         collector.add(target, score);
1:         line = in.readLine();
1:       }
1: 
1:       if (showAuc) {
0:         System.out.printf("AUC = %.2f\n", collector.auc());
1:       }
1:       if (showConfusion) {
1:         Matrix m = collector.confusion();
0:         System.out.printf("confusion: [[%.1f, %.1f], [%.1f, %.1f]]\n", m.get(0, 0), m.get(1, 0), m.get(0, 1), m.get(1, 1));
1:         m = collector.entropy();
0:         System.out.printf("entropy: [[%.1f, %.1f], [%.1f, %.1f]]\n", m.get(0, 0), m.get(1, 0), m.get(0, 1), m.get(1, 1));
1:       }
1:     }
1:   }
1: 
1:   private static boolean parseArgs(String[] args) {
0:         DefaultOptionBuilder builder = new DefaultOptionBuilder();
1: 
1:     Option help = builder.withLongName("help").withDescription("print this list").create();
1: 
1:     Option quiet = builder.withLongName("quiet").withDescription("be extra quiet").create();
1: 
1:     Option auc = builder.withLongName("auc").withDescription("print AUC").create();
1:     Option confusion = builder.withLongName("confusion").withDescription("print confusion matrix").create();
1: 
1:     Option scores = builder.withLongName("scores").withDescription("print scores").create();
1: 
1:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
0:     Option inputFile = builder.withLongName("input")
1:             .withRequired(true)
1:             .withArgument(argumentBuilder.withName("input").withMaximum(1).create())
1:             .withDescription("where to get training data")
1:             .create();
1: 
0:     Option modelFile = builder.withLongName("model")
1:             .withRequired(true)
1:             .withArgument(argumentBuilder.withName("model").withMaximum(1).create())
1:             .withDescription("where to get a model")
1:             .create();
1: 
1:     Group normalArgs = new GroupBuilder()
1:             .withOption(help)
1:             .withOption(quiet)
1:             .withOption(auc)
1:             .withOption(scores)
1:             .withOption(confusion)
0:             .withOption(inputFile)
0:             .withOption(modelFile)
1:             .create();
1: 
1:     Parser parser = new Parser();
1:     parser.setHelpOption(help);
1:     parser.setHelpTrigger("--help");
1:     parser.setGroup(normalArgs);
1:     parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
0:     CommandLine cmdLine;
0:     cmdLine = parser.parseAndHelp(args);
1: 
1:     if (cmdLine == null) {
1:       return false;
1:     }
1: 
0:     RunLogistic.inputFile = getStringArgument(cmdLine, inputFile);
0:     RunLogistic.modelFile = getStringArgument(cmdLine, modelFile);
0:     RunLogistic.showAuc = getBooleanArgument(cmdLine, auc);
0:     RunLogistic.showScores = getBooleanArgument(cmdLine, scores);
0:     RunLogistic.showConfusion = getBooleanArgument(cmdLine, confusion);
1: 
1:     return true;
1:   }
1: 
1:   private static boolean getBooleanArgument(CommandLine cmdLine, Option option) {
1:     return cmdLine.hasOption(option);
1:   }
1: 
1:   private static String getStringArgument(CommandLine cmdLine, Option inputFile) {
1:     return (String) cmdLine.getValue(inputFile);
1:   }
1: 
1: }
commit:f4c8f73
commit:91456bb
============================================================================