1:d317c1c: /**
1:d317c1c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d317c1c:  * contributor license agreements.  See the NOTICE file distributed with
1:d317c1c:  * this work for additional information regarding copyright ownership.
1:d317c1c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d317c1c:  * (the "License"); you may not use this file except in compliance with
1:d317c1c:  * the License.  You may obtain a copy of the License at
1:d317c1c:  *
1:d317c1c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d317c1c:  *
1:d317c1c:  * Unless required by applicable law or agreed to in writing, software
1:d317c1c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d317c1c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d317c1c:  * See the License for the specific language governing permissions and
1:d317c1c:  * limitations under the License.
1:d317c1c:  */
3:d317c1c: 
1:d317c1c: package org.apache.mahout.cf.taste.hadoop.example.als.netflix;
1:d317c1c: 
1:d317c1c: import com.google.common.base.Preconditions;
1:4ef9d31: import org.apache.commons.io.Charsets;
1:d317c1c: import org.apache.hadoop.conf.Configuration;
1:d317c1c: import org.apache.hadoop.fs.FileSystem;
1:d317c1c: import org.apache.hadoop.fs.Path;
1:d317c1c: import org.apache.mahout.cf.taste.impl.model.GenericPreference;
1:d317c1c: import org.apache.mahout.cf.taste.model.Preference;
1:d317c1c: import org.apache.mahout.common.iterator.FileLineIterable;
1:d317c1c: import org.apache.mahout.common.iterator.FileLineIterator;
1:d317c1c: import org.slf4j.Logger;
1:d317c1c: import org.slf4j.LoggerFactory;
1:d317c1c: 
1:4ef9d31: import java.io.BufferedWriter;
1:4ef9d31: import java.io.File;
1:4ef9d31: import java.io.IOException;
1:4ef9d31: import java.io.OutputStreamWriter;
1:4ef9d31: import java.util.ArrayList;
1:4ef9d31: import java.util.List;
1:4ef9d31: import java.util.regex.Pattern;
1:4ef9d31: 
1:d317c1c: /** converts the raw files provided by netflix to an appropriate input format */
1:4fbfbc6: public final class NetflixDatasetConverter {
1:87d4b2e: 
1:d317c1c:   private static final Logger log = LoggerFactory.getLogger(NetflixDatasetConverter.class);
1:d317c1c: 
1:d317c1c:   private static final Pattern SEPARATOR = Pattern.compile(",");
1:d317c1c:   private static final String MOVIE_DENOTER = ":";
1:d317c1c:   private static final String TAB = "\t";
1:d317c1c:   private static final String NEWLINE = "\n";
1:d317c1c: 
1:4fbfbc6:   private NetflixDatasetConverter() {
1:4fbfbc6:   }
1:d317c1c: 
1:d317c1c:   public static void main(String[] args) throws IOException {
1:d317c1c: 
1:d317c1c:     if (args.length != 4) {
1:6d16230:       System.err.println("Usage: NetflixDatasetConverter /path/to/training_set/ /path/to/qualifying.txt "
1:6d16230:           + "/path/to/judging.txt /path/to/destination");
1:d317c1c:       return;
1:d317c1c:     }
1:d317c1c: 
1:d317c1c:     String trainingDataDir = args[0];
1:d317c1c:     String qualifyingTxt = args[1];
1:d317c1c:     String judgingTxt = args[2];
1:d317c1c:     Path outputPath = new Path(args[3]);
1:d317c1c: 
1:d317c1c:     Configuration conf = new Configuration();
1:d317c1c:     FileSystem fs = FileSystem.get(outputPath.toUri(), conf);
1:d317c1c: 
1:4ef9d31:     Preconditions.checkArgument(trainingDataDir != null, "Training Data location needs to be specified");
1:d317c1c:     log.info("Creating training set at {}/trainingSet/ratings.tsv ...", outputPath);
1:4ef9d31:     try (BufferedWriter writer =
1:4ef9d31:              new BufferedWriter(
1:4ef9d31:                  new OutputStreamWriter(
1:4ef9d31:                      fs.create(new Path(outputPath, "trainingSet/ratings.tsv")), Charsets.UTF_8))){
1:d317c1c: 
1:d317c1c:       int ratingsProcessed = 0;
1:d317c1c:       for (File movieRatings : new File(trainingDataDir).listFiles()) {
1:4ef9d31:         try (FileLineIterator lines = new FileLineIterator(movieRatings)) {
1:d317c1c:           boolean firstLineRead = false;
1:d317c1c:           String movieID = null;
1:d317c1c:           while (lines.hasNext()) {
1:d317c1c:             String line = lines.next();
1:4fbfbc6:             if (firstLineRead) {
1:d317c1c:               String[] tokens = SEPARATOR.split(line);
1:d317c1c:               String userID = tokens[0];
1:d317c1c:               String rating = tokens[1];
1:d317c1c:               writer.write(userID + TAB + movieID + TAB + rating + NEWLINE);
1:d317c1c:               ratingsProcessed++;
1:d317c1c:               if (ratingsProcessed % 1000000 == 0) {
1:d317c1c:                 log.info("{} ratings processed...", ratingsProcessed);
1:d317c1c:               }
1:d317c1c:             } else {
1:d317c1c:               movieID = line.replaceAll(MOVIE_DENOTER, "");
1:d317c1c:               firstLineRead = true;
1:d317c1c:             }
1:d317c1c:           }
1:d317c1c:         }
1:4ef9d31: 
1:d317c1c:       }
1:d317c1c:       log.info("{} ratings processed. done.", ratingsProcessed);
1:d317c1c:     }
1:d317c1c: 
1:d317c1c:     log.info("Reading probes...");
1:4ef9d31:     List<Preference> probes = new ArrayList<>(2817131);
1:d317c1c:     long currentMovieID = -1;
1:d317c1c:     for (String line : new FileLineIterable(new File(qualifyingTxt))) {
1:d317c1c:       if (line.contains(MOVIE_DENOTER)) {
1:d317c1c:         currentMovieID = Long.parseLong(line.replaceAll(MOVIE_DENOTER, ""));
1:d317c1c:       } else {
1:d317c1c:         long userID = Long.parseLong(SEPARATOR.split(line)[0]);
1:d317c1c:         probes.add(new GenericPreference(userID, currentMovieID, 0));
1:d317c1c:       }
1:d317c1c:     }
1:d317c1c:     log.info("{} probes read...", probes.size());
1:d317c1c: 
1:d317c1c:     log.info("Reading ratings, creating probe set at {}/probeSet/ratings.tsv ...", outputPath);
1:4ef9d31:     try (BufferedWriter writer =
1:4ef9d31:              new BufferedWriter(new OutputStreamWriter(
1:4ef9d31:                  fs.create(new Path(outputPath, "probeSet/ratings.tsv")), Charsets.UTF_8))){
1:d317c1c:       int ratingsProcessed = 0;
1:d317c1c:       for (String line : new FileLineIterable(new File(judgingTxt))) {
1:d317c1c:         if (line.contains(MOVIE_DENOTER)) {
1:d317c1c:           currentMovieID = Long.parseLong(line.replaceAll(MOVIE_DENOTER, ""));
1:d317c1c:         } else {
1:d317c1c:           float rating = Float.parseFloat(SEPARATOR.split(line)[0]);
1:d317c1c:           Preference pref = probes.get(ratingsProcessed);
1:d317c1c:           Preconditions.checkState(pref.getItemID() == currentMovieID);
1:d317c1c:           ratingsProcessed++;
1:d317c1c:           writer.write(pref.getUserID() + TAB + pref.getItemID() + TAB + rating + NEWLINE);
1:d317c1c:           if (ratingsProcessed % 1000000 == 0) {
1:d317c1c:             log.info("{} ratings processed...", ratingsProcessed);
1:d317c1c:           }
1:d317c1c:         }
1:d317c1c:       }
1:d317c1c:       log.info("{} ratings processed. done.", ratingsProcessed);
1:d317c1c:     }
1:d317c1c:   }
1:d317c1c: 
1:d317c1c: 
1:d317c1c: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedWriter;
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.OutputStreamWriter;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.regex.Pattern;
1: 
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(trainingDataDir != null, "Training Data location needs to be specified");
1:     try (BufferedWriter writer =
1:              new BufferedWriter(
1:                  new OutputStreamWriter(
1:                      fs.create(new Path(outputPath, "trainingSet/ratings.tsv")), Charsets.UTF_8))){
1:         try (FileLineIterator lines = new FileLineIterator(movieRatings)) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     List<Preference> probes = new ArrayList<>(2817131);
/////////////////////////////////////////////////////////////////////////
1:     try (BufferedWriter writer =
1:              new BufferedWriter(new OutputStreamWriter(
1:                  fs.create(new Path(outputPath, "probeSet/ratings.tsv")), Charsets.UTF_8))){
/////////////////////////////////////////////////////////////////////////
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
0: import java.io.BufferedWriter;
0: import java.io.File;
0: import java.io.IOException;
0: import java.io.OutputStreamWriter;
0: import java.util.List;
0: import java.util.regex.Pattern;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:           Closeables.close(lines, true);
0:       Closeables.close(writer, true);
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, true);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:       System.err.println("Usage: NetflixDatasetConverter /path/to/training_set/ /path/to/qualifying.txt "
1:           + "/path/to/judging.txt /path/to/destination");
commit:d317c1c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.hadoop.example.als.netflix;
1: 
0: import com.google.common.base.Charsets;
1: import com.google.common.base.Preconditions;
0: import com.google.common.collect.Lists;
0: import com.google.common.io.Closeables;
1: import org.apache.hadoop.conf.Configuration;
0: import org.apache.hadoop.fs.FSDataOutputStream;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.mahout.cf.taste.impl.model.GenericPreference;
1: import org.apache.mahout.cf.taste.model.Preference;
1: import org.apache.mahout.common.iterator.FileLineIterable;
1: import org.apache.mahout.common.iterator.FileLineIterator;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import java.io.BufferedWriter;
0: import java.io.File;
0: import java.io.IOException;
0: import java.io.OutputStreamWriter;
0: import java.util.List;
0: import java.util.regex.Pattern;
1: 
1: /** converts the raw files provided by netflix to an appropriate input format */
0: public class NetflixDatasetConverter {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(NetflixDatasetConverter.class);
1: 
1:   private static final Pattern SEPARATOR = Pattern.compile(",");
1:   private static final String MOVIE_DENOTER = ":";
1:   private static final String TAB = "\t";
1:   private static final String NEWLINE = "\n";
1: 
1:   public static void main(String[] args) throws IOException {
1: 
1:     if (args.length != 4) {
0:       System.err.println("Usage: NetflixDatasetConverter /path/to/training_set/ /path/to/qualifying.txt " +
0:           "/path/to/judging.txt /path/to/destination");
1:       return;
1:     }
1: 
1:     String trainingDataDir = args[0];
1:     String qualifyingTxt = args[1];
1:     String judgingTxt = args[2];
1:     Path outputPath = new Path(args[3]);
1: 
1:     Configuration conf = new Configuration();
1:     FileSystem fs = FileSystem.get(outputPath.toUri(), conf);
1: 
1:     log.info("Creating training set at {}/trainingSet/ratings.tsv ...", outputPath);
0:     BufferedWriter writer  = null;
0:     try {
0:       FSDataOutputStream outputStream = fs.create(new Path(outputPath, "trainingSet/ratings.tsv"));
0:       writer = new BufferedWriter(new OutputStreamWriter(outputStream, Charsets.UTF_8));
1: 
1:       int ratingsProcessed = 0;
1:       for (File movieRatings : new File(trainingDataDir).listFiles()) {
1:         boolean firstLineRead = false;
1:         String movieID = null;
0:         FileLineIterator lines = null;
0:         try  {
0:           lines = new FileLineIterator(movieRatings);
1:           while (lines.hasNext()) {
1:             String line = lines.next();
0:             if (!firstLineRead) {
1:               movieID = line.replaceAll(MOVIE_DENOTER, "");
1:               firstLineRead = true;
1:             } else {
1:               String[] tokens = SEPARATOR.split(line);
1:               String userID = tokens[0];
1:               String rating = tokens[1];
1:               writer.write(userID + TAB + movieID + TAB + rating + NEWLINE);
1:               ratingsProcessed++;
1:               if (ratingsProcessed % 1000000 == 0) {
1:                 log.info("{} ratings processed...", ratingsProcessed);
1:               }
1:             }
1:           }
0:         } finally {
0:           Closeables.closeQuietly(lines);
1:         }
1:       }
1:       log.info("{} ratings processed. done.", ratingsProcessed);
0:     } finally {
0:       Closeables.closeQuietly(writer);
1:     }
1: 
1:     log.info("Reading probes...");
0:     List<Preference> probes = Lists.newArrayListWithExpectedSize(2817131);
1:     long currentMovieID = -1;
1:     for (String line : new FileLineIterable(new File(qualifyingTxt))) {
1:       if (line.contains(MOVIE_DENOTER)) {
1:         currentMovieID = Long.parseLong(line.replaceAll(MOVIE_DENOTER, ""));
1:       } else {
1:         long userID = Long.parseLong(SEPARATOR.split(line)[0]);
1:         probes.add(new GenericPreference(userID, currentMovieID, 0));
1:       }
1:     }
1:     log.info("{} probes read...", probes.size());
1: 
1:     log.info("Reading ratings, creating probe set at {}/probeSet/ratings.tsv ...", outputPath);
0:     writer = null;
0:     try {
0:       FSDataOutputStream outputStream = fs.create(new Path(outputPath, "probeSet/ratings.tsv"));
0:       writer = new BufferedWriter(new OutputStreamWriter(outputStream, Charsets.UTF_8));
1: 
1:       int ratingsProcessed = 0;
1:       for (String line : new FileLineIterable(new File(judgingTxt))) {
1:         if (line.contains(MOVIE_DENOTER)) {
1:           currentMovieID = Long.parseLong(line.replaceAll(MOVIE_DENOTER, ""));
1:         } else {
1:           float rating = Float.parseFloat(SEPARATOR.split(line)[0]);
1:           Preference pref = probes.get(ratingsProcessed);
1:           Preconditions.checkState(pref.getItemID() == currentMovieID);
1:           ratingsProcessed++;
1:           writer.write(pref.getUserID() + TAB + pref.getItemID() + TAB + rating + NEWLINE);
1:           if (ratingsProcessed % 1000000 == 0) {
1:             log.info("{} ratings processed...", ratingsProcessed);
1:           }
1:         }
1:       }
1:       log.info("{} ratings processed. done.", ratingsProcessed);
0:     } finally {
0:       Closeables.closeQuietly(writer);
1:     }
1:   }
1: 
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: public final class NetflixDatasetConverter {
/////////////////////////////////////////////////////////////////////////
1:   private NetflixDatasetConverter() {
1:   }
0: 
/////////////////////////////////////////////////////////////////////////
0:           boolean firstLineRead = false;
0:           String movieID = null;
1:             if (firstLineRead) {
/////////////////////////////////////////////////////////////////////////
0:             } else {
0:               movieID = line.replaceAll(MOVIE_DENOTER, "");
0:               firstLineRead = true;
============================================================================