1:bb54d45: /*
1:bb54d45:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bb54d45:  * contributor license agreements.  See the NOTICE file distributed with
1:bb54d45:  * this work for additional information regarding copyright ownership.
1:bb54d45:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bb54d45:  * (the "License"); you may not use this file except in compliance with
1:bb54d45:  * the License.  You may obtain a copy of the License at
1:bb54d45:  *
1:bb54d45:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bb54d45:  *
1:bb54d45:  * Unless required by applicable law or agreed to in writing, software
1:bb54d45:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bb54d45:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bb54d45:  * See the License for the specific language governing permissions and
1:bb54d45:  * limitations under the License.
1:bb54d45:  */
1:bb54d45: 
1:bb54d45: package org.apache.mahout.classifier.sgd;
1:bb54d45: 
1:bb54d45: import com.google.common.base.Joiner;
1:bb54d45: import com.google.common.base.Splitter;
1:bb54d45: import com.google.common.collect.Lists;
1:d608a88: import com.google.common.io.Closeables;
1:f3a9cc1: import com.google.common.io.Files;
1:4ef9d31: import org.apache.commons.io.Charsets;
1:58fd277: import org.apache.mahout.common.RandomUtils;
1:bb54d45: import org.apache.mahout.math.DenseVector;
1:bb54d45: import org.apache.mahout.math.Vector;
1:bb54d45: import org.apache.mahout.math.list.IntArrayList;
1:bb54d45: import org.apache.mahout.math.stats.OnlineSummarizer;
1:bb54d45: import org.apache.mahout.vectorizer.encoders.ConstantValueEncoder;
1:bb54d45: import org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;
1:58cc1ae: import org.slf4j.Logger;
1:58cc1ae: import org.slf4j.LoggerFactory;
1:bb54d45: 
1:bb54d45: import java.io.BufferedReader;
1:3a1adb7: import java.io.Closeable;
1:bb54d45: import java.io.File;
1:bb54d45: import java.io.FileInputStream;
1:229aeff: import java.io.FileOutputStream;
1:bb54d45: import java.io.IOException;
1:bb54d45: import java.io.InputStream;
1:229aeff: import java.io.OutputStreamWriter;
1:bb54d45: import java.io.PrintWriter;
1:bb54d45: import java.nio.ByteBuffer;
1:4ef9d31: import java.util.ArrayList;
1:bb54d45: import java.util.List;
1:bb54d45: import java.util.Random;
1:bb54d45: 
1:bb54d45: /**
1:86b3d61:  * Shows how different encoding choices can make big speed differences.
1:86b3d61:  * <p/>
1:86b3d61:  * Run with command line options --generate 1000000 test.csv to generate a million data lines in
1:86b3d61:  * test.csv.
1:86b3d61:  * <p/>
1:86b3d61:  * Run with command line options --parser test.csv to time how long it takes to parse and encode
1:86b3d61:  * those million data points
1:86b3d61:  * <p/>
1:86b3d61:  * Run with command line options --fast test.csv to time how long it takes to parse and encode those
1:86b3d61:  * million data points using byte-level parsing and direct value encoding.
1:86b3d61:  * <p/>
1:86b3d61:  * This doesn't demonstrate text encoding which is subject to somewhat different tricks.  The basic
1:86b3d61:  * idea of caching hash locations and byte level parsing still very much applies to text, however.
1:bb54d45:  */
1:d61a0ee: public final class SimpleCsvExamples {
1:58fd277: 
1:82fb401:   public static final char SEPARATOR_CHAR = '\t';
1:bb54d45:   private static final int FIELDS = 100;
1:58fd277: 
1:58cc1ae:   private static final Logger log = LoggerFactory.getLogger(SimpleCsvExamples.class);
1:58cc1ae: 
1:58cc1ae:   private SimpleCsvExamples() {}
1:bb54d45: 
1:bb54d45:   public static void main(String[] args) throws IOException {
1:bb54d45:     FeatureVectorEncoder[] encoder = new FeatureVectorEncoder[FIELDS];
3:bb54d45:     for (int i = 0; i < FIELDS; i++) {
1:bb54d45:       encoder[i] = new ConstantValueEncoder("v" + 1);
1:58fd277:     }
1:3a1adb7: 
1:bb54d45:     OnlineSummarizer[] s = new OnlineSummarizer[FIELDS];
1:bb54d45:     for (int i = 0; i < FIELDS; i++) {
1:bb54d45:       s[i] = new OnlineSummarizer();
2:bb54d45:     }
1:bb54d45:     long t0 = System.currentTimeMillis();
1:bb54d45:     Vector v = new DenseVector(1000);
1:39fe224:     if ("--generate".equals(args[0])) {
1:4ef9d31:       try (PrintWriter out =
1:4ef9d31:                new PrintWriter(new OutputStreamWriter(new FileOutputStream(new File(args[2])), Charsets.UTF_8))) {
1:3a1adb7:         int n = Integer.parseInt(args[1]);
1:3a1adb7:         for (int i = 0; i < n; i++) {
1:3a1adb7:           Line x = Line.generate();
1:3a1adb7:           out.println(x);
1:3a1adb7:         }
1:bb54d45:       }
1:bb54d45:     } else if ("--parse".equals(args[0])) {
1:4ef9d31:       try (BufferedReader in = Files.newReader(new File(args[1]), Charsets.UTF_8)){
1:3a1adb7:         String line = in.readLine();
1:3a1adb7:         while (line != null) {
1:3a1adb7:           v.assign(0);
1:3a1adb7:           Line x = new Line(line);
1:3a1adb7:           for (int i = 0; i < FIELDS; i++) {
1:3a1adb7:             s[i].add(x.getDouble(i));
1:3a1adb7:             encoder[i].addToVector(x.get(i), v);
1:3a1adb7:           }
1:3a1adb7:           line = in.readLine();
1:bb54d45:         }
1:bb54d45:       }
1:bb54d45:       String separator = "";
1:bb54d45:       for (int i = 0; i < FIELDS; i++) {
1:bb54d45:         System.out.printf("%s%.3f", separator, s[i].getMean());
1:bb54d45:         separator = ",";
1:bb54d45:       }
1:bb54d45:     } else if ("--fast".equals(args[0])) {
1:4ef9d31:       try (FastLineReader in = new FastLineReader(new FileInputStream(args[1]))){
1:3a1adb7:         FastLine line = in.read();
1:3a1adb7:         while (line != null) {
1:3a1adb7:           v.assign(0);
1:3a1adb7:           for (int i = 0; i < FIELDS; i++) {
1:3a1adb7:             double z = line.getDouble(i);
1:3a1adb7:             s[i].add(z);
1:3a1adb7:             encoder[i].addToVector((byte[]) null, z, v);
1:3a1adb7:           }
1:3a1adb7:           line = in.read();
1:bb54d45:         }
1:bb54d45:       }
1:4ef9d31: 
1:bb54d45:       String separator = "";
1:bb54d45:       for (int i = 0; i < FIELDS; i++) {
1:bb54d45:         System.out.printf("%s%.3f", separator, s[i].getMean());
1:bb54d45:         separator = ",";
1:bb54d45:       }
1:bb54d45:     }
1:bdb1c48:     System.out.printf("\nElapsed time = %.3f%n", (System.currentTimeMillis() - t0) / 1000.0);
1:bb54d45:   }
1:bb54d45: 
1:bb54d45: 
1:d61a0ee:   private static final class Line {
1:82fb401:     private static final Splitter ON_TABS = Splitter.on(SEPARATOR_CHAR).trimResults();
1:82fb401:     public static final Joiner WITH_COMMAS = Joiner.on(SEPARATOR_CHAR);
1:bb54d45: 
1:6d16230:     public static final Random RAND = RandomUtils.getRandom();
1:bb54d45: 
1:58fd277:     private final List<String> data;
1:bb54d45: 
1:58fd277:     private Line(CharSequence line) {
1:d61a0ee:       data = Lists.newArrayList(ON_TABS.split(line));
1:bb54d45:     }
1:bb54d45: 
1:58fd277:     private Line() {
1:4ef9d31:       data = new ArrayList<>();
1:bb54d45:     }
1:bb54d45: 
1:bb54d45:     public double getDouble(int field) {
1:bb54d45:       return Double.parseDouble(data.get(field));
1:bb54d45:     }
1:bb54d45: 
1:bb54d45:     /**
1:bb54d45:      * Generate a random line with 20 fields each with integer values.
1:bb54d45:      *
1:bb54d45:      * @return A new line with data.
1:bb54d45:      */
1:bb54d45:     public static Line generate() {
1:bb54d45:       Line r = new Line();
1:bb54d45:       for (int i = 0; i < FIELDS; i++) {
1:bb54d45:         double mean = ((i + 1) * 257) % 50 + 1;
1:bb54d45:         r.data.add(Integer.toString(randomValue(mean)));
1:bb54d45:       }
1:bb54d45:       return r;
1:bb54d45:     }
1:bb54d45: 
1:bb54d45:     /**
1:bb54d45:      * Returns a random exponentially distributed integer with a particular mean value.  This is
1:bb54d45:      * just a way to create more small numbers than big numbers.
1:bb54d45:      *
1:4ef9d31:      * @param mean mean of the distribution
1:4ef9d31:      * @return random exponentially distributed integer with the specific mean
1:bb54d45:      */
1:bb54d45:     private static int randomValue(double mean) {
1:6d16230:       return (int) (-mean * Math.log1p(-RAND.nextDouble()));
1:bb54d45:     }
1:bb54d45: 
1:3a1adb7:     @Override
1:bb54d45:     public String toString() {
1:d61a0ee:       return WITH_COMMAS.join(data);
1:3a1adb7:     }
1:bb54d45: 
1:bb54d45:     public String get(int field) {
1:bb54d45:       return data.get(field);
1:bb54d45:     }
1:bb54d45:   }
1:bb54d45: 
1:d61a0ee:   private static final class FastLine {
1:bb54d45: 
1:58fd277:     private final ByteBuffer base;
1:58fd277:     private final IntArrayList start = new IntArrayList();
1:58fd277:     private final IntArrayList length = new IntArrayList();
1:bb54d45: 
1:58fd277:     private FastLine(ByteBuffer base) {
1:bb54d45:       this.base = base;
1:bb54d45:     }
1:bb54d45: 
1:bb54d45:     public static FastLine read(ByteBuffer buf) {
1:bb54d45:       FastLine r = new FastLine(buf);
1:bb54d45:       r.start.add(buf.position());
1:bb54d45:       int offset = buf.position();
1:bb54d45:       while (offset < buf.limit()) {
1:bb54d45:         int ch = buf.get();
1:afc8abb:         offset = buf.position();
1:bb54d45:         switch (ch) {
1:bb54d45:           case '\n':
1:bb54d45:             r.length.add(offset - r.start.get(r.length.size()) - 1);
1:bb54d45:             return r;
1:bb54d45:           case SEPARATOR_CHAR:
1:bb54d45:             r.length.add(offset - r.start.get(r.length.size()) - 1);
1:bb54d45:             r.start.add(offset);
1:bb54d45:             break;
1:bb54d45:           default:
1:bb54d45:             // nothing to do for now
1:bb54d45:         }
1:bb54d45:       }
1:bb54d45:       throw new IllegalArgumentException("Not enough bytes in buffer");
1:bb54d45:     }
1:bb54d45: 
1:bb54d45:     public double getDouble(int field) {
1:bb54d45:       int offset = start.get(field);
1:bb54d45:       int size = length.get(field);
1:bb54d45:       switch (size) {
1:bb54d45:         case 1:
1:bb54d45:           return base.get(offset) - '0';
1:bb54d45:         case 2:
1:bb54d45:           return (base.get(offset) - '0') * 10 + base.get(offset + 1) - '0';
1:bb54d45:         default:
1:bb54d45:           double r = 0;
1:bb54d45:           for (int i = 0; i < size; i++) {
1:afc8abb:             r = 10 * r + base.get(offset + i) - '0';
1:bb54d45:           }
1:bb54d45:           return r;
1:bb54d45:       }
1:bb54d45:     }
1:bb54d45:   }
1:bb54d45: 
1:39fe224:   private static final class FastLineReader implements Closeable {
1:58fd277:     private final InputStream in;
1:58fd277:     private final ByteBuffer buf = ByteBuffer.allocate(100000);
1:bb54d45: 
1:58fd277:     private FastLineReader(InputStream in) throws IOException {
1:bb54d45:       this.in = in;
1:bb54d45:       buf.limit(0);
1:bb54d45:       fillBuffer();
1:bb54d45:     }
1:bb54d45: 
1:bb54d45:     public FastLine read() throws IOException {
1:bb54d45:       fillBuffer();
1:bb54d45:       if (buf.remaining() > 0) {
1:bb54d45:         return FastLine.read(buf);
2:bb54d45:       } else {
1:bb54d45:         return null;
1:bb54d45:       }
1:bb54d45:     }
1:bb54d45: 
1:bb54d45:     private void fillBuffer() throws IOException {
1:bb54d45:       if (buf.remaining() < 10000) {
1:bb54d45:         buf.compact();
1:bb54d45:         int n = in.read(buf.array(), buf.position(), buf.remaining());
1:58fd277:         if (n == -1) {
1:58fd277:           buf.flip();
1:58fd277:         } else {
1:bb54d45:           buf.limit(buf.position() + n);
1:bb54d45:           buf.position(0);
1:bb54d45:         }
1:bb54d45:       }
1:bb54d45:     }
1:bb54d45: 
1:bb54d45:     @Override
1:96117d3:     public void close() {
1:31cb292:       try {
1:31cb292:         Closeables.close(in, true);
1:31cb292:       } catch (IOException e) {
1:58cc1ae:         log.error(e.getMessage(), e);
1:31cb292:       }
1:bb54d45:     }
1:bb54d45:   }
1:bb54d45: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:       try (PrintWriter out =
1:                new PrintWriter(new OutputStreamWriter(new FileOutputStream(new File(args[2])), Charsets.UTF_8))) {
1:       try (BufferedReader in = Files.newReader(new File(args[1]), Charsets.UTF_8)){
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       try (FastLineReader in = new FastLineReader(new FileInputStream(args[1]))){
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:       data = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:      * @param mean mean of the distribution
1:      * @return random exponentially distributed integer with the specific mean
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:   private static final Logger log = LoggerFactory.getLogger(SimpleCsvExamples.class);
1: 
1:   private SimpleCsvExamples() {}
/////////////////////////////////////////////////////////////////////////
1:         log.error(e.getMessage(), e);
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1:     System.out.printf("\nElapsed time = %.3f%n", (System.currentTimeMillis() - t0) / 1000.0);
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     public static final Random RAND = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
1:       return (int) (-mean * Math.log1p(-RAND.nextDouble()));
commit:346c98c
/////////////////////////////////////////////////////////////////////////
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0:         Closeables.closeQuietly(out);
/////////////////////////////////////////////////////////////////////////
0:         Closeables.closeQuietly(in);
/////////////////////////////////////////////////////////////////////////
0:         Closeables.closeQuietly(in);
commit:d608a88
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:       Closeables.closeQuietly(in);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:         Closeables.close(out, false);
/////////////////////////////////////////////////////////////////////////
1:         Closeables.close(in, true);
/////////////////////////////////////////////////////////////////////////
0:         Closeables.close(in, true);
/////////////////////////////////////////////////////////////////////////
1:       try {
0:         Closeables.close(in, true);
1:       } catch (IOException e) {
0:         //nothing
1:       }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileOutputStream;
1: import java.io.OutputStreamWriter;
/////////////////////////////////////////////////////////////////////////
0:       PrintWriter out =
0:           new PrintWriter(new OutputStreamWriter(new FileOutputStream(new File(args[2])), Charsets.UTF_8));
commit:971a56d
/////////////////////////////////////////////////////////////////////////
0:       return (int) (-mean * Math.log1p(-rand.nextDouble()));
commit:82fb401
/////////////////////////////////////////////////////////////////////////
1:   public static final char SEPARATOR_CHAR = '\t';
/////////////////////////////////////////////////////////////////////////
1:     private static final Splitter ON_TABS = Splitter.on(SEPARATOR_CHAR).trimResults();
1:     public static final Joiner WITH_COMMAS = Joiner.on(SEPARATOR_CHAR);
commit:96117d3
/////////////////////////////////////////////////////////////////////////
1:     public void close() {
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:     if ("--generate".equals(args[0])) {
/////////////////////////////////////////////////////////////////////////
1:   private static final class FastLineReader implements Closeable {
commit:afc8abb
/////////////////////////////////////////////////////////////////////////
1:         offset = buf.position();
/////////////////////////////////////////////////////////////////////////
1:             r = 10 * r + base.get(offset + i) - '0';
commit:f3a9cc1
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Files;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       BufferedReader in = Files.newReader(new File(args[1]), Charsets.UTF_8);
commit:80366ee
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:           new InputStreamReader(new FileInputStream(new File(args[1])), Charsets.UTF_8));
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
1: public final class SimpleCsvExamples {
/////////////////////////////////////////////////////////////////////////
1:   private static final class Line {
0:     private static final Splitter ON_TABS = Splitter.on(SEPARATOR).trimResults();
0:     public static final Joiner WITH_COMMAS = Joiner.on(SEPARATOR);
1:       data = Lists.newArrayList(ON_TABS.split(line));
/////////////////////////////////////////////////////////////////////////
1:       return WITH_COMMAS.join(data);
/////////////////////////////////////////////////////////////////////////
1:   private static final class FastLine {
/////////////////////////////////////////////////////////////////////////
0:   private static final
0:   class FastLineReader implements Closeable {
commit:3a1adb7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.IOUtils;
/////////////////////////////////////////////////////////////////////////
1: import java.io.Closeable;
/////////////////////////////////////////////////////////////////////////
0:       try {
1:         int n = Integer.parseInt(args[1]);
1:         for (int i = 0; i < n; i++) {
1:           Line x = Line.generate();
1:           out.println(x);
1:         }
0:       } finally {
0:         IOUtils.quietClose(out);
0:       try {
1:         String line = in.readLine();
1:         while (line != null) {
1:           v.assign(0);
1:           Line x = new Line(line);
1:           for (int i = 0; i < FIELDS; i++) {
1:             s[i].add(x.getDouble(i));
1:             encoder[i].addToVector(x.get(i), v);
1:           }
1:           line = in.readLine();
0:       } finally {
0:         IOUtils.quietClose(in);
/////////////////////////////////////////////////////////////////////////
0:       try {
1:         FastLine line = in.read();
1:         while (line != null) {
1:           v.assign(0);
1:           for (int i = 0; i < FIELDS; i++) {
1:             double z = line.getDouble(i);
1:             s[i].add(z);
1:             encoder[i].addToVector((byte[]) null, z, v);
1:           }
1:           line = in.read();
0:       } finally {
0:         IOUtils.quietClose(in);
/////////////////////////////////////////////////////////////////////////
0:   private static class FastLineReader implements Closeable {
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
0:     public void close() throws IOException {
0:       in.close();
1:     }
commit:ad8b61d
/////////////////////////////////////////////////////////////////////////
0: import java.io.InputStreamReader;
0: import java.nio.charset.Charset;
/////////////////////////////////////////////////////////////////////////
0:       BufferedReader in = new BufferedReader(
0:           new InputStreamReader(new FileInputStream(new File(args[1])), Charset.forName("UTF-8")));
commit:58fd277
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1: 
0:   private SimpleCsvExamples() {
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     public static final Random rand = RandomUtils.getRandom();
1:     private final List<String> data;
1:     private Line(CharSequence line) {
1:     private Line() {
/////////////////////////////////////////////////////////////////////////
1:     private final ByteBuffer base;
1:     private final IntArrayList start = new IntArrayList();
1:     private final IntArrayList length = new IntArrayList();
1:     private FastLine(ByteBuffer base) {
/////////////////////////////////////////////////////////////////////////
1:     private final InputStream in;
1:     private final ByteBuffer buf = ByteBuffer.allocate(100000);
1:     private FastLineReader(InputStream in) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:         if (n == -1) {
1:           buf.flip();
1:         } else {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:5ea5a26
/////////////////////////////////////////////////////////////////////////
0: public class SimpleCsvExamples {
commit:86b3d61
/////////////////////////////////////////////////////////////////////////
1:  * Shows how different encoding choices can make big speed differences.
1:  * <p/>
1:  * Run with command line options --generate 1000000 test.csv to generate a million data lines in
1:  * test.csv.
1:  * <p/>
1:  * Run with command line options --parser test.csv to time how long it takes to parse and encode
1:  * those million data points
1:  * <p/>
1:  * Run with command line options --fast test.csv to time how long it takes to parse and encode those
1:  * million data points using byte-level parsing and direct value encoding.
1:  * <p/>
1:  * This doesn't demonstrate text encoding which is subject to somewhat different tricks.  The basic
1:  * idea of caching hash locations and byte level parsing still very much applies to text, however.
/////////////////////////////////////////////////////////////////////////
0:           encoder[i].addToVector((byte[]) null, z, v);
commit:bb54d45
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
1: import com.google.common.base.Joiner;
1: import com.google.common.base.Splitter;
1: import com.google.common.collect.Lists;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.list.IntArrayList;
1: import org.apache.mahout.math.stats.OnlineSummarizer;
1: import org.apache.mahout.vectorizer.encoders.ConstantValueEncoder;
1: import org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.FileInputStream;
0: import java.io.FileReader;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.PrintWriter;
1: import java.nio.ByteBuffer;
1: import java.util.List;
1: import java.util.Random;
1: 
1: /**
0:  * Created by IntelliJ IDEA. User: tdunning Date: Oct 24, 2010 Time: 7:45:24 PM To change this
0:  * template use File | Settings | File Templates.
1:  */
0: public class SimpleCsv {
0:   public static final int SEPARATOR_CHAR = '\t';
0:   public static final String SEPARATOR = "\t";
1:   private static final int FIELDS = 100;
1: 
1:   public static void main(String[] args) throws IOException {
1:     FeatureVectorEncoder[] encoder = new FeatureVectorEncoder[FIELDS];
1:     for (int i = 0; i < FIELDS; i++) {
1:       encoder[i] = new ConstantValueEncoder("v" + 1);
1:     }
1: 
1:     OnlineSummarizer[] s = new OnlineSummarizer[FIELDS];
1:     for (int i = 0; i < FIELDS; i++) {
1:       s[i] = new OnlineSummarizer();
1:     }
1:     long t0 = System.currentTimeMillis();
1:     Vector v = new DenseVector(1000);
0:     if (args[0].equals("--generate")) {
0:       PrintWriter out = new PrintWriter(new File(args[2]));
0:       int n = Integer.parseInt(args[1]);
0:       for (int i = 0; i < n; i++) {
0:         Line x = Line.generate();
0:         out.println(x);
1:       }
0:       out.close();
1:     } else if ("--parse".equals(args[0])) {
0:       BufferedReader in = new BufferedReader(new FileReader(args[1]));
0:       String line = in.readLine();
0:       while (line != null) {
0:         v.assign(0);
0:         Line x = new Line(line);
1:         for (int i = 0; i < FIELDS; i++) {
0:           s[i].add(x.getDouble(i));
0:           encoder[i].addToVector(x.get(i), v);
1:         }
0:         line = in.readLine();
1:       }
1:       String separator = "";
1:       for (int i = 0; i < FIELDS; i++) {
1:         System.out.printf("%s%.3f", separator, s[i].getMean());
1:         separator = ",";
1:       }
1:     } else if ("--fast".equals(args[0])) {
0:       FastLineReader in = new FastLineReader(new FileInputStream(args[1]));
0:       FastLine line = in.read();
0:       while (line != null) {
0:         v.assign(0);
1:         for (int i = 0; i < FIELDS; i++) {
0:           double z = line.getDouble(i);
0:           s[i].add(z);
0: //          encoder[i].addToVector((byte[]) null, z, v);
1:         }
0:         line = in.read();
1:       }
1:       String separator = "";
1:       for (int i = 0; i < FIELDS; i++) {
1:         System.out.printf("%s%.3f", separator, s[i].getMean());
1:         separator = ",";
1:       }
1:     }
0:     System.out.printf("\nElapsed time = %.3f\n", (System.currentTimeMillis() - t0) / 1000.0);
1:   }
1: 
1: 
0:   private static class Line {
0:     private static final Splitter onTabs = Splitter.on(SEPARATOR).trimResults();
0:     public static final Joiner withCommas = Joiner.on(SEPARATOR);
1: 
0:     public static final Random rand = new Random(1);
1: 
0:     private List<String> data;
1: 
0:     private Line(String line) {
0:       data = Lists.newArrayList(onTabs.split(line));
1:     }
1: 
0:     public Line() {
0:       data = Lists.newArrayList();
1:     }
1: 
1:     public double getDouble(int field) {
1:       return Double.parseDouble(data.get(field));
1:     }
1: 
1:     /**
1:      * Generate a random line with 20 fields each with integer values.
1:      *
1:      * @return A new line with data.
1:      */
1:     public static Line generate() {
1:       Line r = new Line();
1:       for (int i = 0; i < FIELDS; i++) {
1:         double mean = ((i + 1) * 257) % 50 + 1;
1:         r.data.add(Integer.toString(randomValue(mean)));
1:       }
1:       return r;
1:     }
1: 
1:     /**
1:      * Returns a random exponentially distributed integer with a particular mean value.  This is
1:      * just a way to create more small numbers than big numbers.
1:      *
0:      * @param mean
0:      * @return
1:      */
1:     private static int randomValue(double mean) {
0:       return (int) (-mean * Math.log(1 - rand.nextDouble()));
1:     }
1: 
1:     @Override
1:     public String toString() {
0:       return withCommas.join(data);
1:     }
1: 
1:     public String get(int field) {
1:       return data.get(field);
1:     }
1:   }
1: 
0:   private static class FastLine {
1: 
0:     private ByteBuffer base;
0:     private IntArrayList start = new IntArrayList();
0:     private IntArrayList length = new IntArrayList();
1: 
0:     public FastLine(ByteBuffer base) {
1:       this.base = base;
1:     }
1: 
1:     public static FastLine read(ByteBuffer buf) {
1:       FastLine r = new FastLine(buf);
1:       r.start.add(buf.position());
1:       int offset = buf.position();
1:       while (offset < buf.limit()) {
1:         int ch = buf.get();
1:         switch (ch) {
1:           case '\n':
1:             r.length.add(offset - r.start.get(r.length.size()) - 1);
1:             return r;
1:           case SEPARATOR_CHAR:
1:             r.length.add(offset - r.start.get(r.length.size()) - 1);
1:             r.start.add(offset);
1:             break;
1:           default:
1:             // nothing to do for now
1:         }
1:       }
1:       throw new IllegalArgumentException("Not enough bytes in buffer");
1:     }
1: 
1:     public double getDouble(int field) {
1:       int offset = start.get(field);
1:       int size = length.get(field);
1:       switch (size) {
1:         case 1:
1:           return base.get(offset) - '0';
1:         case 2:
1:           return (base.get(offset) - '0') * 10 + base.get(offset + 1) - '0';
1:         default:
1:           double r = 0;
1:           for (int i = 0; i < size; i++) {
0:             r = 10 * r + base.get(offset + i);
1:           }
1:           return r;
1:       }
1:     }
1:   }
1: 
0:   private static class FastLineReader {
0:     private InputStream in;
0:     private ByteBuffer buf = ByteBuffer.allocate(100000);
1: 
0:     public FastLineReader(InputStream in) throws IOException {
1:       this.in = in;
1:       buf.limit(0);
1:       fillBuffer();
1:     }
1: 
1:     public FastLine read() throws IOException {
1:       fillBuffer();
1:       if (buf.remaining() > 0) {
1:         return FastLine.read(buf);
1:       } else {
1:         return null;
1:       }
1:     }
1: 
1:     private void fillBuffer() throws IOException {
1:       if (buf.remaining() < 10000) {
1:         buf.compact();
1:         int n = in.read(buf.array(), buf.position(), buf.remaining());
0:         if (n != -1) {
1:           buf.limit(buf.position() + n);
1:           buf.position(0);
1:         } else {
0:           buf.flip();
1:         }
1:       }
1:     }
1:   }
1: }
============================================================================