2:e23728d: /**
1:e23728d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e23728d:  * contributor license agreements.  See the NOTICE file distributed with
1:e23728d:  * this work for additional information regarding copyright ownership.
1:e23728d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e23728d:  * (the "License"); you may not use this file except in compliance with
1:e23728d:  * the License.  You may obtain a copy of the License at
1:e23728d:  *
1:e23728d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e23728d:  *
1:e23728d:  * Unless required by applicable law or agreed to in writing, software
1:e23728d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e23728d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e23728d:  * See the License for the specific language governing permissions and
1:e23728d:  * limitations under the License.
2:e23728d:  */
2:e23728d: 
1:e23728d: package org.apache.mahout.cf.taste.impl.similarity.jdbc;
1:e23728d: 
1:e23728d: import org.apache.mahout.cf.taste.common.Refreshable;
1:e23728d: import org.apache.mahout.cf.taste.common.TasteException;
1:e23728d: import org.apache.mahout.cf.taste.impl.common.jdbc.AbstractJDBCComponent;
1:ad17b0d: import org.apache.mahout.cf.taste.impl.common.jdbc.ResultSetIterator;
1:e23728d: import org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource;
1:e23728d: import org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity;
1:e23728d: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1:e23728d: import org.slf4j.Logger;
1:e23728d: import org.slf4j.LoggerFactory;
1:e23728d: 
1:e23728d: import javax.sql.DataSource;
1:e23728d: import java.sql.ResultSet;
1:e23728d: import java.sql.SQLException;
1:e23728d: import java.util.Collection;
1:e23728d: import java.util.Iterator;
1:e23728d: import java.util.concurrent.locks.ReentrantLock;
1:e23728d: 
1:e23728d: /**
1:e23728d:  * loads all similarities from the database into RAM
1:e23728d:  */
1:e23728d: abstract class AbstractJDBCInMemoryItemSimilarity extends AbstractJDBCComponent implements ItemSimilarity {
1:e23728d: 
1:e23728d:   private ItemSimilarity delegate;
1:e23728d: 
1:e23728d:   private final DataSource dataSource;
1:e23728d:   private final String getAllItemSimilaritiesSQL;
1:e23728d:   private final ReentrantLock reloadLock;
1:e23728d: 
1:e23728d:   private static final Logger log = LoggerFactory.getLogger(AbstractJDBCInMemoryItemSimilarity.class);
1:e23728d: 
1:208aa07:   AbstractJDBCInMemoryItemSimilarity(DataSource dataSource, String getAllItemSimilaritiesSQL) {
1:e23728d: 
1:e23728d:     AbstractJDBCComponent.checkNotNullAndLog("getAllItemSimilaritiesSQL", getAllItemSimilaritiesSQL);
1:e23728d: 
1:e23728d:     if (!(dataSource instanceof ConnectionPoolDataSource)) {
1:3218e95:       log.warn("You are not using ConnectionPoolDataSource. Make sure your DataSource pools connections "
1:3218e95:                + "to the database itself, or database performance will be severely reduced.");
9:e23728d:     }
1:e23728d: 
1:e23728d:     this.dataSource = dataSource;
1:e23728d:     this.getAllItemSimilaritiesSQL = getAllItemSimilaritiesSQL;
1:e23728d:     this.reloadLock = new ReentrantLock();
1:e23728d: 
1:e23728d:     reload();
1:e23728d:   }
1:e23728d: 
3:e23728d:   @Override
1:e23728d:   public double itemSimilarity(long itemID1, long itemID2) throws TasteException {
1:e23728d:     return delegate.itemSimilarity(itemID1, itemID2);
1:e23728d:   }
1:e23728d: 
1:e23728d:   @Override
1:e23728d:   public double[] itemSimilarities(long itemID1, long[] itemID2s) throws TasteException {
1:e23728d:     return delegate.itemSimilarities(itemID1, itemID2s);
1:e23728d:   }
1:e23728d: 
1:e23728d:   @Override
1:e23728d:   public long[] allSimilarItemIDs(long itemID) throws TasteException {
1:e23728d:     return delegate.allSimilarItemIDs(itemID);
1:e23728d:   }
1:e23728d: 
1:e23728d:   @Override
1:e23728d:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:e23728d:     log.debug("Reloading...");
1:e23728d:     reload();
1:e23728d:   }
1:e23728d: 
1:e23728d:   protected void reload() {
1:e23728d:     if (reloadLock.tryLock()) {
3:e23728d:       try {
1:3218e95:         delegate = new GenericItemSimilarity(new JDBCSimilaritiesIterable(dataSource, getAllItemSimilaritiesSQL));
1:e23728d:       } finally {
1:e23728d:         reloadLock.unlock();
1:e23728d:       }
1:e23728d:     }
1:e23728d:   }
1:e23728d: 
1:3c22856:   private static final class JDBCSimilaritiesIterable implements Iterable<GenericItemSimilarity.ItemItemSimilarity> {
1:e23728d: 
1:3218e95:     private final DataSource dataSource;
1:3218e95:     private final String getAllItemSimilaritiesSQL;
1:e23728d: 
1:3218e95:     private JDBCSimilaritiesIterable(DataSource dataSource, String getAllItemSimilaritiesSQL) {
1:3218e95:       this.dataSource = dataSource;
1:3218e95:       this.getAllItemSimilaritiesSQL = getAllItemSimilaritiesSQL;
1:e23728d:     }
1:e23728d: 
1:e23728d:     @Override
1:e23728d:     public Iterator<GenericItemSimilarity.ItemItemSimilarity> iterator() {
1:e23728d:       try {
1:3218e95:         return new JDBCSimilaritiesIterator(dataSource, getAllItemSimilaritiesSQL);
1:e23728d:       } catch (SQLException sqle) {
1:ad17b0d:         throw new IllegalStateException(sqle);
1:e23728d:       }
1:e23728d:     }
1:e23728d:   }
1:e23728d: 
1:3218e95:   private static final class JDBCSimilaritiesIterator
1:3218e95:       extends ResultSetIterator<GenericItemSimilarity.ItemItemSimilarity> {
1:e23728d: 
1:3218e95:     private JDBCSimilaritiesIterator(DataSource dataSource, String getAllItemSimilaritiesSQL) throws SQLException {
1:ad17b0d:       super(dataSource, getAllItemSimilaritiesSQL);
1:e23728d:     }
1:e23728d: 
1:e23728d:     @Override
1:ad17b0d:     protected GenericItemSimilarity.ItemItemSimilarity parseElement(ResultSet resultSet) throws SQLException {
1:ad17b0d:       return new GenericItemSimilarity.ItemItemSimilarity(resultSet.getLong(1),
1:ad17b0d:                                                           resultSet.getLong(2),
1:ad17b0d:                                                           resultSet.getDouble(3));
1:e23728d:     }
1:e23728d:   }
1:e23728d: 
1:e23728d: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1:   private static final class JDBCSimilaritiesIterable implements Iterable<GenericItemSimilarity.ItemItemSimilarity> {
commit:e23728d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.similarity.jdbc;
1: 
1: import org.apache.mahout.cf.taste.common.Refreshable;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.jdbc.AbstractJDBCComponent;
1: import org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource;
1: import org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity;
1: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
0: import org.apache.mahout.common.IOUtils;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.sql.DataSource;
0: import java.sql.Connection;
0: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.concurrent.locks.ReentrantLock;
1: 
1: /**
1:  * loads all similarities from the database into RAM
1:  */
1: abstract class AbstractJDBCInMemoryItemSimilarity extends AbstractJDBCComponent implements ItemSimilarity {
1: 
1:   private ItemSimilarity delegate;
1: 
1:   private final DataSource dataSource;
1:   private final String getAllItemSimilaritiesSQL;
1:   private final ReentrantLock reloadLock;
1: 
1:   private static final Logger log = LoggerFactory.getLogger(AbstractJDBCInMemoryItemSimilarity.class);
1: 
0:   public AbstractJDBCInMemoryItemSimilarity(DataSource dataSource, String getAllItemSimilaritiesSQL) {
1: 
1:     AbstractJDBCComponent.checkNotNullAndLog("getAllItemSimilaritiesSQL", getAllItemSimilaritiesSQL);
1: 
1:     if (!(dataSource instanceof ConnectionPoolDataSource)) {
0:       log.warn("You are not using ConnectionPoolDataSource. Make sure your DataSource pools connections " +
0:           "to the database itself, or database performance will be severely reduced.");
1:     }
1: 
1:     this.dataSource = dataSource;
1:     this.getAllItemSimilaritiesSQL = getAllItemSimilaritiesSQL;
1:     this.reloadLock = new ReentrantLock();
1: 
1:     reload();
1:   }
1: 
1:   @Override
1:   public double itemSimilarity(long itemID1, long itemID2) throws TasteException {
1:     return delegate.itemSimilarity(itemID1, itemID2);
1:   }
1: 
1:   @Override
1:   public double[] itemSimilarities(long itemID1, long[] itemID2s) throws TasteException {
1:     return delegate.itemSimilarities(itemID1, itemID2s);
1:   }
1: 
1:   @Override
1:   public long[] allSimilarItemIDs(long itemID) throws TasteException {
1:     return delegate.allSimilarItemIDs(itemID);
1:   }
1: 
1:   @Override
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:     log.debug("Reloading...");
1:     reload();
1:   }
1: 
1:   protected void reload() {
1:     if (reloadLock.tryLock()) {
1:       try {
0:         delegate = new GenericItemSimilarity(new JDBCSimilaritiesIterable());
1:       } finally {
1:         reloadLock.unlock();
1:       }
1:     }
1:   }
1: 
0:   class JDBCSimilaritiesIterable implements Iterable<GenericItemSimilarity.ItemItemSimilarity> {
1:     @Override
1:     public Iterator<GenericItemSimilarity.ItemItemSimilarity> iterator() {
0:       return new JDBCSimilaritiesIterator();
1:     }
1:   }
1: 
0:   private class JDBCSimilaritiesIterator implements Iterator<GenericItemSimilarity.ItemItemSimilarity> {
1: 
0:     private final Connection connection;
0:     private final PreparedStatement statement;
0:     private final ResultSet resultSet;
0:     private boolean closed;
1: 
0:     private JDBCSimilaritiesIterator() {
1:       try {
0:         connection = dataSource.getConnection();
0:         statement = connection.prepareStatement(getAllItemSimilaritiesSQL, ResultSet.TYPE_FORWARD_ONLY,
0:             ResultSet.CONCUR_READ_ONLY);
0:         statement.setFetchDirection(ResultSet.FETCH_FORWARD);
0:         statement.setFetchSize(getFetchSize());
0:         log.debug("Executing SQL query: {}", getAllItemSimilaritiesSQL);
0:         resultSet = statement.executeQuery();
0:         boolean anyResults = resultSet.next();
0:         if (!anyResults) {
0:           close();
1:         }
0:       } catch (SQLException e) {
0:         close();
0:         throw new IllegalStateException("Unable to read similarities!", e);
1:       }
1:     }
1: 
1:     @Override
0:     public boolean hasNext() {
0:       boolean nextExists = false;
0:       if (!closed) {
1:         try {
0:           if (resultSet.isAfterLast()) {
0:             close();
0:           } else {
0:             nextExists = true;
1:           }
1:         } catch (SQLException sqle) {
0:           log.warn("Unexpected exception while accessing ResultSet; continuing...", sqle);
0:           close();
1:         }
1:       }
0:       return nextExists;
1:     }
1: 
1:     @Override
0:     public GenericItemSimilarity.ItemItemSimilarity next() {
1:       try {
0:         GenericItemSimilarity.ItemItemSimilarity similarity = new GenericItemSimilarity.ItemItemSimilarity(
0:             resultSet.getLong(1), resultSet.getLong(2), resultSet.getDouble(3));
0:         resultSet.next();
0:         return similarity;
0:       } catch (SQLException e) {
0:         // No good way to handle this since we can't throw an exception
0:         log.warn("Exception while iterating", e);
0:         close();
0:         throw new IllegalStateException("Unable to read similarities!", e);
1:       }
1:     }
1: 
1:     /**
0:      * @throws UnsupportedOperationException
1:      */
1:     @Override
0:     public void remove() {
0:       throw new UnsupportedOperationException();
1:     }
1: 
0:     private void close() {
0:       if (!closed) {
0:         closed = true;
0:         IOUtils.quietClose(resultSet, statement, connection);
1:       }
1:     }
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:50fd693
commit:3218e95
/////////////////////////////////////////////////////////////////////////
1:       log.warn("You are not using ConnectionPoolDataSource. Make sure your DataSource pools connections "
1:                + "to the database itself, or database performance will be severely reduced.");
/////////////////////////////////////////////////////////////////////////
1:         delegate = new GenericItemSimilarity(new JDBCSimilaritiesIterable(dataSource, getAllItemSimilaritiesSQL));
0:   private static class JDBCSimilaritiesIterable implements Iterable<GenericItemSimilarity.ItemItemSimilarity> {
0: 
1:     private final DataSource dataSource;
1:     private final String getAllItemSimilaritiesSQL;
0: 
1:     private JDBCSimilaritiesIterable(DataSource dataSource, String getAllItemSimilaritiesSQL) {
1:       this.dataSource = dataSource;
1:       this.getAllItemSimilaritiesSQL = getAllItemSimilaritiesSQL;
0:     }
0: 
1:         return new JDBCSimilaritiesIterator(dataSource, getAllItemSimilaritiesSQL);
1:   private static final class JDBCSimilaritiesIterator
1:       extends ResultSetIterator<GenericItemSimilarity.ItemItemSimilarity> {
1:     private JDBCSimilaritiesIterator(DataSource dataSource, String getAllItemSimilaritiesSQL) throws SQLException {
commit:ad17b0d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.common.jdbc.ResultSetIterator;
/////////////////////////////////////////////////////////////////////////
0:   private class JDBCSimilaritiesIterable implements Iterable<GenericItemSimilarity.ItemItemSimilarity> {
0:       try {
0:         return new JDBCSimilaritiesIterator();
0:       } catch (SQLException sqle) {
1:         throw new IllegalStateException(sqle);
0:       }
0:   private class JDBCSimilaritiesIterator extends ResultSetIterator<GenericItemSimilarity.ItemItemSimilarity> {
0:     private JDBCSimilaritiesIterator() throws SQLException {
1:       super(dataSource, getAllItemSimilaritiesSQL);
1:     protected GenericItemSimilarity.ItemItemSimilarity parseElement(ResultSet resultSet) throws SQLException {
1:       return new GenericItemSimilarity.ItemItemSimilarity(resultSet.getLong(1),
1:                                                           resultSet.getLong(2),
1:                                                           resultSet.getDouble(3));
commit:208aa07
/////////////////////////////////////////////////////////////////////////
0: import java.util.NoSuchElementException;
/////////////////////////////////////////////////////////////////////////
1:   AbstractJDBCInMemoryItemSimilarity(DataSource dataSource, String getAllItemSimilaritiesSQL) {
/////////////////////////////////////////////////////////////////////////
0:       if (!hasNext()) {
0:         throw new NoSuchElementException();
0:       }
============================================================================