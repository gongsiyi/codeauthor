1:8c37a84: /**
1:8c37a84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c37a84:  * contributor license agreements.  See the NOTICE file distributed with
1:8c37a84:  * this work for additional information regarding copyright ownership.
1:8c37a84:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c37a84:  * (the "License"); you may not use this file except in compliance with
1:8c37a84:  * the License.  You may obtain a copy of the License at
1:8c37a84:  *
1:8c37a84:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8c37a84:  *
1:8c37a84:  * Unless required by applicable law or agreed to in writing, software
1:8c37a84:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c37a84:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c37a84:  * See the License for the specific language governing permissions and
1:8c37a84:  * limitations under the License.
1:8c37a84:  */
7:8c37a84: 
1:52ce412: package org.apache.mahout.classifier.df.node;
1:df73dbc: 
1:8c37a84: import java.io.ByteArrayInputStream;
1:8c37a84: import java.io.ByteArrayOutputStream;
1:8c37a84: import java.io.DataInput;
1:8c37a84: import java.io.DataInputStream;
1:8c37a84: import java.io.DataOutput;
1:8c37a84: import java.io.DataOutputStream;
1:8c37a84: import java.io.IOException;
1:8c37a84: import java.util.Random;
1:8c37a84: 
1:434cdff: import org.apache.mahout.common.MahoutTestCase;
1:8547de7: import org.apache.mahout.common.RandomUtils;
1:ff79ff4: import org.junit.Before;
1:ff79ff4: import org.junit.Test;
1:1ffa3a4: @Deprecated
1:ff79ff4: public final class NodeTest extends MahoutTestCase {
1:8c37a84: 
1:8547de7:   private Random rng;
1:8c37a84: 
1:8547de7:   private ByteArrayOutputStream byteOutStream;
1:8547de7:   private DataOutput out;
1:8c37a84:   
1:8c37a84:   @Override
1:ff79ff4:   @Before
1:ff79ff4:   public void setUp() throws Exception {
1:c40fd07:     super.setUp();
1:8547de7:     rng = RandomUtils.getRandom();
1:c40fd07: 
1:8c37a84:     byteOutStream = new ByteArrayOutputStream();
1:8c37a84:     out = new DataOutputStream(byteOutStream);
1:8c37a84:   }
1:8c37a84: 
1:8c37a84:   /**
1:8c37a84:    * Test method for
1:52ce412:    * {@link org.apache.mahout.classifier.df.node.Node#read(java.io.DataInput)}.
1:8c37a84:    */
1:ff79ff4:   @Test
1:8c37a84:   public void testReadTree() throws Exception {
1:8c37a84:     Node node1 = new CategoricalNode(rng.nextInt(), 
1:8c37a84:         new double[] { rng.nextDouble(), rng.nextDouble() }, 
1:e9cc323:         new Node[] { new Leaf(rng.nextDouble()), new Leaf(rng.nextDouble()) });
1:8c37a84:     Node node2 = new NumericalNode(rng.nextInt(), rng.nextDouble(), 
1:e9cc323:         new Leaf(rng.nextDouble()), new Leaf(rng.nextDouble()));
1:8c37a84:     
1:8c37a84:     Node root = new CategoricalNode(rng.nextInt(), 
1:8c37a84:         new double[] { rng.nextDouble(), rng.nextDouble(), rng.nextDouble() }, 
1:e9cc323:         new Node[] { node1, node2, new Leaf(rng.nextDouble()) });
1:8c37a84: 
1:8c37a84:     // write the node to a DataOutput
1:8c37a84:     root.write(out);
1:8c37a84:     
1:8c37a84:     // read the node back
1:8c37a84:     assertEquals(root, readNode());
1:8c37a84:   }
1:8c37a84: 
1:d911fce:   Node readNode() throws IOException {
1:8c37a84:     ByteArrayInputStream byteInStream = new ByteArrayInputStream(byteOutStream.toByteArray());
1:8c37a84:     DataInput in = new DataInputStream(byteInStream);
1:8c37a84:     return Node.read(in);
1:8c37a84:   }
1:ff79ff4: 
1:ff79ff4:   @Test
1:8c37a84:   public void testReadLeaf() throws Exception {
1:8c37a84: 
1:e9cc323:     Node leaf = new Leaf(rng.nextDouble());
1:8c37a84:     leaf.write(out);
1:8c37a84:     assertEquals(leaf, readNode());
1:8c37a84:   }
1:8c37a84: 
1:ff79ff4:   @Test
1:8c37a84:   public void testParseNumerical() throws Exception {
1:8c37a84: 
1:ff79ff4:     Node node = new NumericalNode(rng.nextInt(), rng.nextDouble(), new Leaf(rng
1:e9cc323:         .nextInt()), new Leaf(rng.nextDouble()));
1:8c37a84:     node.write(out);
1:8c37a84:     assertEquals(node, readNode());
1:8c37a84:   }
1:8c37a84: 
1:10c535c:   @Test
1:8c37a84:   public void testCategoricalNode() throws Exception {
1:8c37a84: 
1:ff79ff4:     Node node = new CategoricalNode(rng.nextInt(), new double[]{rng.nextDouble(),
1:8547de7:         rng.nextDouble(), rng.nextDouble()}, new Node[]{
1:e9cc323:         new Leaf(rng.nextDouble()), new Leaf(rng.nextDouble()),
1:e9cc323:         new Leaf(rng.nextDouble())});
1:8547de7: 
1:8c37a84:     node.write(out);
1:8c37a84:     assertEquals(node, readNode());
1:8c37a84:   }
1:8c37a84: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1:   @Test
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.junit.Test;
1: public final class NodeTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:   @Before
1:   public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:   @Test
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Test
0:     Node leaf = new Leaf(rng.nextInt());
1:   @Test
1:     Node node = new NumericalNode(rng.nextInt(), rng.nextDouble(), new Leaf(rng
/////////////////////////////////////////////////////////////////////////
1:     Node node = new CategoricalNode(rng.nextInt(), new double[]{rng.nextDouble(),
commit:d911fce
/////////////////////////////////////////////////////////////////////////
1:   Node readNode() throws IOException {
commit:434cdff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
0: public class NodeTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
commit:c40fd07
/////////////////////////////////////////////////////////////////////////
1:     super.setUp();
1: 
commit:8547de7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
1:   private Random rng;
1:   private ByteArrayOutputStream byteOutStream;
1:   private DataOutput out;
1:     rng = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
0:     Leaf leaf = new Leaf(rng.nextInt());
0:     NumericalNode node = new NumericalNode(rng.nextInt(), rng.nextDouble(), new Leaf(rng
0:     CategoricalNode node = new CategoricalNode(rng.nextInt(), new double[]{rng.nextDouble(),
1:         rng.nextDouble(), rng.nextDouble()}, new Node[]{
0:         new Leaf(rng.nextInt())});
1: 
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:e9cc323
/////////////////////////////////////////////////////////////////////////
1:         new Node[] { new Leaf(rng.nextDouble()), new Leaf(rng.nextDouble()) });
1:         new Leaf(rng.nextDouble()), new Leaf(rng.nextDouble()));
1:         new Node[] { node1, node2, new Leaf(rng.nextDouble()) });
/////////////////////////////////////////////////////////////////////////
1:     Node leaf = new Leaf(rng.nextDouble());
/////////////////////////////////////////////////////////////////////////
1:         .nextInt()), new Leaf(rng.nextDouble()));
/////////////////////////////////////////////////////////////////////////
1:         new Leaf(rng.nextDouble()), new Leaf(rng.nextDouble()),
1:         new Leaf(rng.nextDouble())});
commit:df73dbc
/////////////////////////////////////////////////////////////////////////
0:     RandomUtils.useTestSeed();
1:     
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.node;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInput;
1: import java.io.DataInputStream;
1: import java.io.DataOutput;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.util.Random;
1: 
0: import org.apache.mahout.df.node.CategoricalNode;
0: import org.apache.mahout.df.node.Leaf;
0: import org.apache.mahout.df.node.Node;
0: import org.apache.mahout.df.node.NumericalNode;
1: 
0: import junit.framework.TestCase;
1: 
0: public class NodeTest extends TestCase {
1: 
0:   protected Random rng;
1: 
0:   protected ByteArrayOutputStream byteOutStream;
0:   protected DataOutput out;
1:   
1:   @Override
0:   protected void setUp() throws Exception {
0:     rng = new Random();
1: 
1:     byteOutStream = new ByteArrayOutputStream();
1:     out = new DataOutputStream(byteOutStream);
1:   }
1: 
1:   /**
1:    * Test method for
0:    * {@link org.apache.mahout.df.node.Node#read(java.io.DataInput)}.
1:    */
1:   public void testReadTree() throws Exception {
1:     Node node1 = new CategoricalNode(rng.nextInt(), 
1:         new double[] { rng.nextDouble(), rng.nextDouble() }, 
0:         new Node[] { new Leaf(rng.nextInt()), new Leaf(rng.nextInt()) });
1:     Node node2 = new NumericalNode(rng.nextInt(), rng.nextDouble(), 
0:         new Leaf(rng.nextInt()), new Leaf(rng.nextInt()));
1:     
1:     Node root = new CategoricalNode(rng.nextInt(), 
1:         new double[] { rng.nextDouble(), rng.nextDouble(), rng.nextDouble() }, 
0:         new Node[] { node1, node2, new Leaf(rng.nextInt()) });
1: 
1:     // write the node to a DataOutput
1:     root.write(out);
1:     
1:     // read the node back
1:     assertEquals(root, readNode());
1:   }
1: 
0:   protected Node readNode() throws IOException {
1:     ByteArrayInputStream byteInStream = new ByteArrayInputStream(byteOutStream.toByteArray());
1:     DataInput in = new DataInputStream(byteInStream);
1:     return Node.read(in);
1:   }
1:   
1:   public void testReadLeaf() throws Exception {
0:     Leaf leaf;
1: 
0:     leaf = new Leaf(rng.nextInt());
1:     leaf.write(out);
1:     assertEquals(leaf, readNode());
1:   }
1: 
1:   public void testParseNumerical() throws Exception {
0:     NumericalNode node;
1: 
0:     node = new NumericalNode(rng.nextInt(), rng.nextDouble(), new Leaf(rng
0:         .nextInt()), new Leaf(rng.nextInt()));
1:     node.write(out);
1:     assertEquals(node, readNode());
1:   }
1: 
1:   public void testCategoricalNode() throws Exception {
0:     CategoricalNode node;
1: 
0:     node = new CategoricalNode(rng.nextInt(), new double[] { rng.nextDouble(),
0:         rng.nextDouble(), rng.nextDouble() }, new Node[] {
0:         new Leaf(rng.nextInt()), new Leaf(rng.nextInt()),
0:         new Leaf(rng.nextInt()) });
1:     
1:     node.write(out);
1:     assertEquals(node, readNode());
1:   }
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.node;
/////////////////////////////////////////////////////////////////////////
1:    * {@link org.apache.mahout.classifier.df.node.Node#read(java.io.DataInput)}.
============================================================================