1:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
1:f870a63:  */
5:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings;
1:f870a63: 
1:4ef9d31: import org.apache.hadoop.conf.Configuration;
1:4ef9d31: import org.apache.hadoop.fs.FSDataInputStream;
1:4ef9d31: import org.apache.hadoop.fs.FileSystem;
1:4ef9d31: import org.apache.hadoop.fs.Path;
1:4ef9d31: import org.apache.hadoop.io.IOUtils;
1:4ef9d31: import org.apache.hadoop.io.IntWritable;
1:4ef9d31: import org.apache.hadoop.io.LongWritable;
1:4ef9d31: import org.apache.hadoop.io.SequenceFile;
1:4ef9d31: import org.apache.hadoop.io.Text;
1:4ef9d31: import org.apache.hadoop.io.Writable;
1:4ef9d31: import org.apache.hadoop.util.ReflectionUtils;
1:4ef9d31: import org.apache.mahout.h2obindings.drm.H2ODrm;
1:4ef9d31: import org.apache.mahout.math.DenseVector;
1:4ef9d31: import org.apache.mahout.math.SequentialAccessSparseVector;
1:4ef9d31: import org.apache.mahout.math.Vector;
1:4ef9d31: import org.apache.mahout.math.VectorWritable;
1:4ef9d31: import water.Futures;
1:f870a63: import water.fvec.Frame;
1:f870a63: import water.fvec.Vec;
1:f870a63: import water.parser.ValueString;
1:f870a63: import water.util.FrameUtils;
1:f870a63: 
1:4ef9d31: import java.io.File;
1:4ef9d31: import java.io.IOException;
1:4ef9d31: import java.net.URI;
1:f870a63: 
1:2d1b0bf: /**
1:2d1b0bf:  * SequenceFile I/O class (on HDFS)
1:2d1b0bf:  */
1:f870a63: public class H2OHdfs {
1:2d1b0bf:   /**
1:2d1b0bf:    * Predicate to check if a given filename is a SequenceFile.
1:2d1b0bf:    *
1:2d1b0bf:    * Inspect the first three bytes to determine the format of the file.
1:2d1b0bf:    *
1:2d1b0bf:    * @param filename Name of the file to check.
1:2d1b0bf:    * @return True if file is of SequenceFile format.
1:2d1b0bf:    */
1:c964986:   public static boolean isSeqfile(String filename) {
1:f870a63:     try {
1:f870a63:       Configuration conf = new Configuration();
1:4ef9d31:       Path path = new Path(filename);
1:4ef9d31:       FileSystem fs = FileSystem.get(URI.create(filename), conf);
1:f870a63:       FSDataInputStream fin = fs.open(path);
1:f870a63:       byte seq[] = new byte[3];
1:f870a63: 
1:f870a63:       fin.read(seq);
1:f870a63:       fin.close();
1:f870a63: 
1:4ef9d31:       return seq[0] == 'S' && seq[1] == 'E' && seq[2] == 'Q';
1:4ef9d31:     } catch (IOException e) {
2:f870a63:       return false;
2:f870a63:     }
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   /**
1:2d1b0bf:    * Create DRM from SequenceFile.
1:2d1b0bf:    *
1:2d1b0bf:    * Create a Mahout DRM backed on H2O from the specified SequenceFile.
1:2d1b0bf:    *
1:2d1b0bf:    * @param filename Name of the sequence file.
1:2d1b0bf:    * @param parMin Minimum number of data partitions in the DRM.
1:2d1b0bf:    * @return DRM object created.
1:2d1b0bf:    */
1:c964986:   public static H2ODrm drmFromFile(String filename, int parMin) {
1:f870a63:     try {
1:c964986:       if (isSeqfile(filename)) {
1:c964986:         return drmFromSeqfile(filename, parMin);
2:f870a63:       } else {
1:f870a63:         return new H2ODrm(FrameUtils.parseFrame(null,new File(filename)));
1:f870a63:       }
1:4ef9d31:     } catch (IOException e) {
1:f870a63:       return null;
1:f870a63:     }
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   /**
1:2d1b0bf:    * Internal method called from <code>drmFromFile</code> if format verified.
1:2d1b0bf:    */
1:c964986:   public static H2ODrm drmFromSeqfile(String filename, int parMin) {
1:f870a63:     long rows = 0;
1:f870a63:     int cols = 0;
1:f870a63:     Frame frame = null;
1:f870a63:     Vec labels = null;
1:f870a63: 
1:f870a63:     SequenceFile.Reader reader = null;
1:f870a63:     try {
1:f870a63:       Configuration conf = new Configuration();
1:4ef9d31:       Path path = new Path(filename);
1:4ef9d31:       FileSystem fs = FileSystem.get(URI.create(filename), conf);
1:f870a63:       Vec.Writer writers[];
1:f870a63:       Vec.Writer labelwriter = null;
1:2d1b0bf:       boolean isIntKey = false, isLongKey = false, isStringKey = false;
1:f870a63: 
1:f870a63:       reader = new SequenceFile.Reader(fs, path, conf);
1:f870a63: 
1:f870a63:       if (reader.getValueClass() != VectorWritable.class) {
1:f870a63:         System.out.println("ValueClass in file " + filename +
1:f870a63:                            "must be VectorWritable, but found " +
1:f870a63:                            reader.getValueClassName());
1:f870a63:         return null;
1:f870a63:       }
1:f870a63: 
1:f870a63:       Writable key = (Writable)
1:f870a63:         ReflectionUtils.newInstance(reader.getKeyClass(), conf);
1:f870a63:       VectorWritable value = (VectorWritable)
1:f870a63:         ReflectionUtils.newInstance(reader.getValueClass(), conf);
1:f870a63: 
1:f870a63:       long start = reader.getPosition();
1:f870a63: 
1:f870a63:       if (reader.getKeyClass() == Text.class) {
1:2d1b0bf:         isStringKey = true;
1:f870a63:       } else if (reader.getKeyClass() == LongWritable.class) {
1:2d1b0bf:         isLongKey = true;
1:f870a63:       } else {
1:2d1b0bf:         isIntKey = true;
1:f870a63:       }
1:f870a63: 
1:f870a63:       while (reader.next(key, value)) {
1:f870a63:         if (cols == 0) {
1:f870a63:           Vector v = value.get();
1:f870a63:           cols = Math.max(v.size(), cols);
1:f870a63:         }
1:2d1b0bf:         if (isLongKey) {
1:f870a63:           rows = Math.max(((LongWritable)(key)).get()+1, rows);
1:f870a63:         }
1:2d1b0bf:         if (isIntKey) {
1:f870a63:           rows = Math.max(((IntWritable)(key)).get()+1, rows);
1:f870a63:         }
1:2d1b0bf:         if (isStringKey) {
1:f870a63:           rows++;
1:f870a63:         }
1:f870a63:       }
1:f870a63:       reader.seek(start);
1:f870a63: 
1:c964986:       frame = H2OHelper.emptyFrame(rows, cols, parMin, -1);
1:f870a63:       writers = new Vec.Writer[cols];
1:f870a63:       for (int i = 0; i < writers.length; i++) {
1:f870a63:         writers[i] = frame.vecs()[i].open();
1:f870a63:       }
1:f870a63: 
1:f870a63:       if (reader.getKeyClass() == Text.class) {
1:5197ac9:         labels = H2OHelper.makeEmptyStrVec(frame.anyVec());
1:f870a63:         labelwriter = labels.open();
1:f870a63:       }
1:f870a63: 
1:f870a63:       long r = 0;
1:f870a63:       while (reader.next(key, value)) {
1:f870a63:         Vector v = value.get();
1:2d1b0bf:         if (isLongKey) {
1:f870a63:           r = ((LongWritable)(key)).get();
1:f870a63:         }
1:2d1b0bf:         if (isIntKey) {
1:f870a63:           r = ((IntWritable)(key)).get();
1:f870a63:         }
1:f870a63:         for (int c = 0; c < v.size(); c++) {
1:f870a63:           writers[c].set(r, v.getQuick(c));
1:f870a63:         }
1:f870a63:         if (labels != null) {
1:4ef9d31:           labelwriter.set(r, (key).toString());
1:f870a63:         }
1:2d1b0bf:         if (isStringKey) {
1:f870a63:           r++;
1:f870a63:         }
1:f870a63:       }
1:f870a63: 
1:f870a63:       Futures fus = new Futures();
1:f870a63:       for (Vec.Writer w : writers) {
1:f870a63:         w.close(fus);
1:f870a63:       }
1:f870a63:       if (labelwriter != null) {
1:f870a63:         labelwriter.close(fus);
1:f870a63:       }
1:f870a63:       fus.blockForPending();
3:f870a63:     } catch (java.io.IOException e) {
1:f870a63:       return null;
1:f870a63:     } finally {
1:f870a63:       IOUtils.closeStream(reader);
1:f870a63:     }
1:f870a63:     return new H2ODrm(frame, labels);
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   /**
1:2d1b0bf:    * Create SequenceFile on HDFS from DRM object.
1:2d1b0bf:    *
1:2d1b0bf:    * @param filename Filename to create and store DRM data in.
1:2d1b0bf:    * @param drm DRM object storing Matrix data in memory.
1:2d1b0bf:    */
1:2d1b0bf:   public static void drmToFile(String filename, H2ODrm drm) throws java.io.IOException {
1:2d1b0bf:     Frame frame = drm.frame;
1:2d1b0bf:     Vec labels = drm.keys;
1:f870a63:     Configuration conf = new Configuration();
1:4ef9d31:     Path path = new Path(filename);
1:4ef9d31:     FileSystem fs = FileSystem.get(URI.create(filename), conf);
1:4ef9d31:     SequenceFile.Writer writer;
1:2d1b0bf:     boolean isSparse = H2OHelper.isSparse(frame);
1:f870a63:     ValueString vstr = new ValueString();
1:f870a63: 
1:f870a63:     if (labels != null) {
1:f870a63:       writer = SequenceFile.createWriter(fs, conf, path, Text.class, VectorWritable.class);
1:f870a63:     } else {
1:f870a63:       writer = SequenceFile.createWriter(fs, conf, path, IntWritable.class, VectorWritable.class);
1:f870a63:     }
1:f870a63: 
1:f870a63:     for (long r = 0; r < frame.anyVec().length(); r++) {
1:4ef9d31:       Vector v;
1:2d1b0bf:       if (isSparse) {
1:f870a63:         v = new SequentialAccessSparseVector(frame.numCols());
1:f870a63:       } else {
1:f870a63:         v = new DenseVector(frame.numCols());
1:f870a63:       }
1:f870a63: 
1:f870a63:       for (int c = 0; c < frame.numCols(); c++) {
1:f870a63:         v.setQuick(c, frame.vecs()[c].at(r));
1:f870a63:       }
1:f870a63: 
1:f870a63:       if (labels != null) {
1:f870a63:         writer.append(new Text(labels.atStr(vstr, r).toString()), new VectorWritable(v));
1:f870a63:       } else {
1:f870a63:         writer.append(new IntWritable((int)r), new VectorWritable(v));
1:f870a63:       }
1:f870a63:     }
1:f870a63: 
1:f870a63:     writer.close();
1:f870a63:   }
1:f870a63: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FSDataInputStream;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IOUtils;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.hadoop.util.ReflectionUtils;
1: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.SequentialAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import water.Futures;
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
1:       Path path = new Path(filename);
1:       FileSystem fs = FileSystem.get(URI.create(filename), conf);
1:       return seq[0] == 'S' && seq[1] == 'E' && seq[2] == 'Q';
1:     } catch (IOException e) {
/////////////////////////////////////////////////////////////////////////
1:     } catch (IOException e) {
/////////////////////////////////////////////////////////////////////////
1:       Path path = new Path(filename);
1:       FileSystem fs = FileSystem.get(URI.create(filename), conf);
/////////////////////////////////////////////////////////////////////////
1:           labelwriter.set(r, (key).toString());
/////////////////////////////////////////////////////////////////////////
1:     Path path = new Path(filename);
1:     FileSystem fs = FileSystem.get(URI.create(filename), conf);
1:     SequenceFile.Writer writer;
/////////////////////////////////////////////////////////////////////////
1:       Vector v;
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:5197ac9
/////////////////////////////////////////////////////////////////////////
1:         labels = H2OHelper.makeEmptyStrVec(frame.anyVec());
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * SequenceFile I/O class (on HDFS)
1:  */
1:   /**
1:    * Predicate to check if a given filename is a SequenceFile.
1:    *
1:    * Inspect the first three bytes to determine the format of the file.
1:    *
1:    * @param filename Name of the file to check.
1:    * @return True if file is of SequenceFile format.
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Create DRM from SequenceFile.
1:    *
1:    * Create a Mahout DRM backed on H2O from the specified SequenceFile.
1:    *
1:    * @param filename Name of the sequence file.
1:    * @param parMin Minimum number of data partitions in the DRM.
1:    * @return DRM object created.
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Internal method called from <code>drmFromFile</code> if format verified.
1:    */
/////////////////////////////////////////////////////////////////////////
1:       boolean isIntKey = false, isLongKey = false, isStringKey = false;
/////////////////////////////////////////////////////////////////////////
1:         isStringKey = true;
1:         isLongKey = true;
1:         isIntKey = true;
/////////////////////////////////////////////////////////////////////////
1:         if (isLongKey) {
1:         if (isIntKey) {
1:         if (isStringKey) {
/////////////////////////////////////////////////////////////////////////
1:         if (isLongKey) {
1:         if (isIntKey) {
/////////////////////////////////////////////////////////////////////////
1:         if (isStringKey) {
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Create SequenceFile on HDFS from DRM object.
1:    *
1:    * @param filename Filename to create and store DRM data in.
1:    * @param drm DRM object storing Matrix data in memory.
1:    */
1:   public static void drmToFile(String filename, H2ODrm drm) throws java.io.IOException {
1:     Frame frame = drm.frame;
1:     Vec labels = drm.keys;
1:     boolean isSparse = H2OHelper.isSparse(frame);
/////////////////////////////////////////////////////////////////////////
1:       if (isSparse) {
commit:c964986
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public static boolean isSeqfile(String filename) {
/////////////////////////////////////////////////////////////////////////
1:   public static H2ODrm drmFromFile(String filename, int parMin) {
1:       if (isSeqfile(filename)) {
1:         return drmFromSeqfile(filename, parMin);
/////////////////////////////////////////////////////////////////////////
1:   public static H2ODrm drmFromSeqfile(String filename, int parMin) {
/////////////////////////////////////////////////////////////////////////
1:       frame = H2OHelper.emptyFrame(rows, cols, parMin, -1);
/////////////////////////////////////////////////////////////////////////
0:   public static void drmToFile(String filename, H2ODrm Drm) throws java.io.IOException {
/////////////////////////////////////////////////////////////////////////
0:     boolean is_sparse = H2OHelper.isSparse(frame);
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings;
1: 
0: import java.io.IOException;
0: import java.io.File;
0: import java.net.URI;
1: 
1: import water.fvec.Frame;
1: import water.fvec.Vec;
0: import water.Futures;
1: import water.parser.ValueString;
1: import water.util.FrameUtils;
1: 
0: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.math.DenseVector;
0: import org.apache.mahout.math.SequentialAccessSparseVector;
0: import org.apache.mahout.math.VectorWritable;
0: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: 
0: import org.apache.hadoop.conf.Configuration;
0: import org.apache.hadoop.fs.FileSystem;
0: import org.apache.hadoop.fs.Path;
0: import org.apache.hadoop.fs.FSDataInputStream;
0: import org.apache.hadoop.io.IOUtils;
0: import org.apache.hadoop.io.SequenceFile;
0: import org.apache.hadoop.io.Writable;
0: import org.apache.hadoop.io.IntWritable;
0: import org.apache.hadoop.io.LongWritable;
0: import org.apache.hadoop.io.Text;
0: import org.apache.hadoop.util.ReflectionUtils;
1: 
1: 
1: 
1: public class H2OHdfs {
0:   public static boolean is_seqfile(String filename) {
1:     try {
0:       String uri = filename;
1:       Configuration conf = new Configuration();
0:       Path path = new Path(uri);
0:       FileSystem fs = FileSystem.get(URI.create(uri), conf);
1:       FSDataInputStream fin = fs.open(path);
1:       byte seq[] = new byte[3];
1: 
1:       fin.read(seq);
1:       fin.close();
1: 
0:       if (seq[0] == 'S' && seq[1] == 'E' && seq[2] == 'Q') {
0:         return true;
1:       } else {
1:         return false;
1:       }
1:     } catch (java.io.IOException e) {
1:       return false;
1:     }
1:   }
1: 
0:   public static H2ODrm drm_from_file(String filename, int parMin) {
1:     try {
0:       if (is_seqfile(filename)) {
0:         return drm_from_seqfile(filename, parMin);
1:       } else {
1:         return new H2ODrm(FrameUtils.parseFrame(null,new File(filename)));
1:       }
1:     } catch (java.io.IOException e) {
1:       return null;
1:     }
1:   }
1: 
0:   public static H2ODrm drm_from_seqfile(String filename, int parMin) {
1:     long rows = 0;
1:     int cols = 0;
1:     Frame frame = null;
1:     Vec labels = null;
1: 
1:     SequenceFile.Reader reader = null;
1:     try {
0:       String uri = filename;
1:       Configuration conf = new Configuration();
0:       Path path = new Path(uri);
0:       FileSystem fs = FileSystem.get(URI.create(uri), conf);
1:       Vec.Writer writers[];
1:       Vec.Writer labelwriter = null;
0:       boolean is_int_key = false, is_long_key = false, is_string_key = false;
1: 
1:       reader = new SequenceFile.Reader(fs, path, conf);
1: 
1:       if (reader.getValueClass() != VectorWritable.class) {
1:         System.out.println("ValueClass in file " + filename +
1:                            "must be VectorWritable, but found " +
1:                            reader.getValueClassName());
1:         return null;
1:       }
1: 
1:       Writable key = (Writable)
1:         ReflectionUtils.newInstance(reader.getKeyClass(), conf);
1:       VectorWritable value = (VectorWritable)
1:         ReflectionUtils.newInstance(reader.getValueClass(), conf);
1: 
1:       long start = reader.getPosition();
1: 
1:       if (reader.getKeyClass() == Text.class) {
0:         is_string_key = true;
1:       } else if (reader.getKeyClass() == LongWritable.class) {
0:         is_long_key = true;
1:       } else {
0:         is_int_key = true;
1:       }
1: 
1:       while (reader.next(key, value)) {
1:         if (cols == 0) {
1:           Vector v = value.get();
1:           cols = Math.max(v.size(), cols);
1:         }
0:         if (is_long_key) {
1:           rows = Math.max(((LongWritable)(key)).get()+1, rows);
1:         }
0:         if (is_int_key) {
1:           rows = Math.max(((IntWritable)(key)).get()+1, rows);
1:         }
0:         if (is_string_key) {
1:           rows++;
1:         }
1:       }
1:       reader.seek(start);
1: 
0:       frame = H2OHelper.empty_frame(rows, cols, parMin, -1);
1:       writers = new Vec.Writer[cols];
1:       for (int i = 0; i < writers.length; i++) {
1:         writers[i] = frame.vecs()[i].open();
1:       }
1: 
1:       if (reader.getKeyClass() == Text.class) {
0:         labels = frame.anyVec().makeZero();
1:         labelwriter = labels.open();
1:       }
1: 
1:       long r = 0;
1:       while (reader.next(key, value)) {
1:         Vector v = value.get();
0:         if (is_long_key) {
1:           r = ((LongWritable)(key)).get();
1:         }
0:         if (is_int_key) {
1:           r = ((IntWritable)(key)).get();
1:         }
1:         for (int c = 0; c < v.size(); c++) {
1:           writers[c].set(r, v.getQuick(c));
1:         }
1:         if (labels != null) {
0:           labelwriter.set(r, ((Text)key).toString());
1:         }
0:         if (is_string_key) {
1:           r++;
1:         }
1:       }
1: 
1:       Futures fus = new Futures();
1:       for (Vec.Writer w : writers) {
1:         w.close(fus);
1:       }
1:       if (labelwriter != null) {
1:         labelwriter.close(fus);
1:       }
1:       fus.blockForPending();
1:     } catch (java.io.IOException e) {
1:       return null;
1:     } finally {
1:       IOUtils.closeStream(reader);
1:     }
1:     return new H2ODrm(frame, labels);
1:   }
1: 
0:   public static void drm_to_file(String filename, H2ODrm Drm) throws java.io.IOException {
0:     Frame frame = Drm.frame;
0:     Vec labels = Drm.keys;
0:     String uri = filename;
1:     Configuration conf = new Configuration();
0:     Path path = new Path(uri);
0:     FileSystem fs = FileSystem.get(URI.create(uri), conf);
0:     SequenceFile.Writer writer = null;
0:     boolean is_sparse = H2OHelper.is_sparse(frame);
1:     ValueString vstr = new ValueString();
1: 
1:     if (labels != null) {
1:       writer = SequenceFile.createWriter(fs, conf, path, Text.class, VectorWritable.class);
1:     } else {
1:       writer = SequenceFile.createWriter(fs, conf, path, IntWritable.class, VectorWritable.class);
1:     }
1: 
1:     for (long r = 0; r < frame.anyVec().length(); r++) {
0:       Vector v = null;
0:       if (is_sparse) {
1:         v = new SequentialAccessSparseVector(frame.numCols());
1:       } else {
1:         v = new DenseVector(frame.numCols());
1:       }
1: 
1:       for (int c = 0; c < frame.numCols(); c++) {
1:         v.setQuick(c, frame.vecs()[c].at(r));
1:       }
1: 
1:       if (labels != null) {
1:         writer.append(new Text(labels.atStr(vstr, r).toString()), new VectorWritable(v));
1:       } else {
1:         writer.append(new IntWritable((int)r), new VectorWritable(v));
1:       }
1:     }
1: 
1:     writer.close();
1:   }
1: }
============================================================================