1:507af7a: /**
1:507af7a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:507af7a:  * contributor license agreements.  See the NOTICE file distributed with
1:507af7a:  * this work for additional information regarding copyright ownership.
1:507af7a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:507af7a:  * (the "License"); you may not use this file except in compliance with
1:507af7a:  * the License.  You may obtain a copy of the License at
1:507af7a:  *
1:507af7a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:507af7a:  *
1:507af7a:  * Unless required by applicable law or agreed to in writing, software
1:507af7a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:507af7a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:507af7a:  * See the License for the specific language governing permissions and
1:507af7a:  * limitations under the License.
1:507af7a:  */
1:507af7a: 
1:507af7a: package org.apache.mahout.cf.taste.impl.model.jdbc;
1:507af7a: 
1:507af7a: import com.google.common.base.Preconditions;
1:507af7a: import org.apache.mahout.cf.taste.common.TasteException;
1:507af7a: import org.apache.mahout.cf.taste.impl.common.jdbc.AbstractJDBCComponent;
1:507af7a: import org.apache.mahout.common.IOUtils;
1:507af7a: import org.slf4j.Logger;
1:507af7a: import org.slf4j.LoggerFactory;
1:507af7a: 
1:507af7a: import javax.sql.DataSource;
1:507af7a: import java.sql.Connection;
1:507af7a: import java.sql.PreparedStatement;
1:507af7a: import java.sql.ResultSet;
1:507af7a: import java.sql.SQLException;
1:507af7a: 
1:507af7a: /**
1:507af7a:  * <p>
1:507af7a:  * A {@link org.apache.mahout.cf.taste.model.JDBCDataModel} backed by a SQL92 compatible database and
1:507af7a:  * accessed via JDBC. It should work with most JDBC databases, although not optimized for performance.
1:507af7a:  * By default, this class assumes that there is a {@link javax.sql.DataSource} available under the JNDI name
1:507af7a:  * "jdbc/taste", which gives access to a database with a "taste_preferences" table with the following schema:
1:507af7a:  * </p>
1:507af7a:  *
1:507af7a:  * <p>
1:507af7a:  *
1:507af7a:  * <pre>
1:507af7a:  * CREATE TABLE taste_preferences (
1:507af7a:  *   user_id BIGINT NOT NULL,
1:507af7a:  *   item_id BIGINT NOT NULL,
1:507af7a:  *   preference REAL NOT NULL,
1:507af7a:  *   PRIMARY KEY (user_id, item_id)
1:507af7a:  * )
1:507af7a:  * CREATE INDEX taste_preferences_user_id_index ON taste_preferences (user_id);
1:507af7a:  * CREATE INDEX taste_preferences_item_id_index ON taste_preferences (item_id);
1:507af7a:  * </pre>
1:507af7a:  *
1:507af7a:  * </p>
1:507af7a:  *
1:507af7a:  * @see SQL92BooleanPrefJDBCDataModel
1:507af7a:  */
1:507af7a: public class SQL92JDBCDataModel extends AbstractJDBCDataModel {
1:507af7a: 
1:507af7a:   private static final Logger log = LoggerFactory.getLogger(SQL92JDBCDataModel.class);
1:507af7a: 
1:507af7a:   private final String updatePreferenceSQL;
1:507af7a:   private final String verifyPreferenceSQL;
1:507af7a: 
1:507af7a:   /**
1:507af7a:    * <p>
1:507af7a:    * Creates a  using the default {@link javax.sql.DataSource} (named
1:507af7a:    * {@link #DEFAULT_DATASOURCE_NAME} and default table/column names.
1:507af7a:    * </p>
1:507af7a:    *
1:507af7a:    * @throws org.apache.mahout.cf.taste.common.TasteException
1:507af7a:    *           if {@link javax.sql.DataSource} can't be found
1:507af7a:    */
1:507af7a:   public SQL92JDBCDataModel() throws TasteException {
1:507af7a:     this(DEFAULT_DATASOURCE_NAME);
1:507af7a:   }
1:507af7a: 
1:507af7a:   /**
1:507af7a:    * <p>
1:507af7a:    * Creates a  using the default {@link javax.sql.DataSource} found under the given name, and
1:507af7a:    * using default table/column names.
1:507af7a:    * </p>
1:507af7a:    *
1:507af7a:    * @param dataSourceName
1:507af7a:    *          name of {@link javax.sql.DataSource} to look up
1:507af7a:    * @throws org.apache.mahout.cf.taste.common.TasteException
1:507af7a:    *           if {@link javax.sql.DataSource} can't be found
1:507af7a:    */
1:507af7a:   public SQL92JDBCDataModel(String dataSourceName) throws TasteException {
1:507af7a:     this(AbstractJDBCComponent.lookupDataSource(dataSourceName),
1:507af7a:          DEFAULT_PREFERENCE_TABLE,
1:507af7a:          DEFAULT_USER_ID_COLUMN,
1:507af7a:          DEFAULT_ITEM_ID_COLUMN,
1:507af7a:          DEFAULT_PREFERENCE_COLUMN,
1:507af7a:          DEFAULT_PREFERENCE_TIME_COLUMN);
1:507af7a:   }
1:507af7a: 
1:507af7a:   /**
1:507af7a:    * <p>
1:507af7a:    * Creates a  using the given {@link javax.sql.DataSource} and default table/column names.
1:507af7a:    * </p>
1:507af7a:    *
1:507af7a:    * @param dataSource
1:507af7a:    *          {@link javax.sql.DataSource} to use
1:507af7a:    */
1:507af7a:   public SQL92JDBCDataModel(DataSource dataSource) {
1:507af7a:     this(dataSource,
1:507af7a:          DEFAULT_PREFERENCE_TABLE,
1:507af7a:          DEFAULT_USER_ID_COLUMN,
1:507af7a:          DEFAULT_ITEM_ID_COLUMN,
1:507af7a:          DEFAULT_PREFERENCE_COLUMN,
1:507af7a:          DEFAULT_PREFERENCE_TIME_COLUMN);
1:507af7a:   }
1:507af7a: 
1:507af7a:   /**
1:507af7a:    * <p>
1:507af7a:    * Creates a  using the given {@link javax.sql.DataSource} and default table/column names.
1:507af7a:    * </p>
1:507af7a:    *
1:507af7a:    * @param dataSource
1:507af7a:    *          {@link javax.sql.DataSource} to use
1:507af7a:    * @param preferenceTable
1:507af7a:    *          name of table containing preference data
1:507af7a:    * @param userIDColumn
1:507af7a:    *          user ID column name
1:507af7a:    * @param itemIDColumn
1:507af7a:    *          item ID column name
1:507af7a:    * @param preferenceColumn
1:507af7a:    *          preference column name
1:507af7a:    * @param timestampColumn timestamp column name (may be null)
1:507af7a:    */
1:507af7a:   public SQL92JDBCDataModel(DataSource dataSource,
1:507af7a:                                  String preferenceTable,
1:507af7a:                                  String userIDColumn,
1:507af7a:                                  String itemIDColumn,
1:507af7a:                                  String preferenceColumn,
1:507af7a:                                  String timestampColumn) {
1:507af7a:     super(dataSource, preferenceTable, userIDColumn, itemIDColumn, preferenceColumn,
1:507af7a:         // getPreferenceSQL
1:507af7a:         "SELECT " + preferenceColumn + " FROM " + preferenceTable + " WHERE " + userIDColumn + "=? AND "
1:507af7a:             + itemIDColumn + "=?",
1:507af7a:         // getPreferenceTimeSQL
1:507af7a:         "SELECT " + timestampColumn + " FROM " + preferenceTable + " WHERE " + userIDColumn + "=? AND "
1:507af7a:             + itemIDColumn + "=?",
1:507af7a:         // getUserSQL
1:507af7a:         "SELECT DISTINCT " + userIDColumn + ", " + itemIDColumn + ", " + preferenceColumn + " FROM " + preferenceTable
1:507af7a:             + " WHERE " + userIDColumn + "=? ORDER BY " + itemIDColumn,
1:507af7a:         // getAllUsersSQL
1:507af7a:         "SELECT DISTINCT " + userIDColumn + ", " + itemIDColumn + ", " + preferenceColumn + " FROM " + preferenceTable
1:507af7a:             + " ORDER BY " + userIDColumn + ", " + itemIDColumn,
1:507af7a:         // getNumItemsSQL
1:507af7a:         "SELECT COUNT(DISTINCT " + itemIDColumn + ") FROM " + preferenceTable,
1:507af7a:         // getNumUsersSQL
1:507af7a:         "SELECT COUNT(DISTINCT " + userIDColumn + ") FROM " + preferenceTable,
1:507af7a:         // setPreferenceSQL
1:507af7a:         "INSERT INTO " + preferenceTable + '(' + userIDColumn + ',' + itemIDColumn + ',' + preferenceColumn
1:507af7a:             + ") VALUES (?,?,?)",
1:507af7a:         // removePreference SQL
1:507af7a:         "DELETE FROM " + preferenceTable + " WHERE " + userIDColumn + "=? AND " + itemIDColumn + "=?",
1:507af7a:         // getUsersSQL
1:507af7a:         "SELECT DISTINCT " + userIDColumn + " FROM " + preferenceTable + " ORDER BY " + userIDColumn,
1:507af7a:         // getItemsSQL
1:507af7a:         "SELECT DISTINCT " + itemIDColumn + " FROM " + preferenceTable + " ORDER BY " + itemIDColumn,
1:507af7a:         // getPrefsForItemSQL
1:507af7a:         "SELECT DISTINCT " + userIDColumn + ", " + itemIDColumn + ", " + preferenceColumn + " FROM " + preferenceTable
1:507af7a:             + " WHERE " + itemIDColumn + "=? ORDER BY " + userIDColumn,
1:507af7a:         // getNumPreferenceForItemSQL
1:507af7a:         "SELECT COUNT(1) FROM " + preferenceTable + " WHERE " + itemIDColumn + "=?",
1:507af7a:         // getNumPreferenceForItemsSQL
1:507af7a:         "SELECT COUNT(1) FROM " + preferenceTable + " tp1 JOIN " + preferenceTable + " tp2 " + "USING ("
1:507af7a:             + userIDColumn + ") WHERE tp1." + itemIDColumn + "=? and tp2." + itemIDColumn + "=?",
1:507af7a:         // getMaxPreferenceSQL
1:507af7a:         "SELECT MAX(" + preferenceColumn + ") FROM " + preferenceTable,
1:507af7a:         // getMinPreferenceSQL
1:507af7a:         "SELECT MIN(" + preferenceColumn + ") FROM " + preferenceTable);
1:507af7a: 
1:507af7a:     updatePreferenceSQL = "UPDATE " + preferenceTable + " SET " + preferenceColumn + "=? WHERE " + userIDColumn
1:507af7a:         + "=? AND " + itemIDColumn + "=?";
1:507af7a:     verifyPreferenceSQL = "SELECT " + preferenceColumn + " FROM " + preferenceTable + " WHERE " + userIDColumn
1:507af7a:         + "=? AND " + itemIDColumn + "=?";
1:507af7a:   }
1:507af7a: 
1:507af7a:   protected String getUpdatePreferenceSQL() {
1:507af7a:     return updatePreferenceSQL;
1:507af7a:   }
1:507af7a: 
1:507af7a:   protected String getVerifyPreferenceSQL() {
1:507af7a:     return verifyPreferenceSQL;
1:507af7a:   }
1:507af7a: 
1:507af7a:   /**
1:507af7a:    * Override since SQL92 doesn't have the same non-standard capability that MySQL has, to optionally
1:507af7a:    * insert or update in one statement.
1:507af7a:    */
1:507af7a:   @Override
1:507af7a:   public void setPreference(long userID, long itemID, float value) throws TasteException {
1:507af7a:     Preconditions.checkArgument(!Float.isNaN(value), "NaN value");
1:507af7a:     log.debug("Setting preference for user {}, item {}", userID, itemID);
1:507af7a: 
1:507af7a:     String setPreferenceSQL = getSetPreferenceSQL();
1:507af7a: 
1:507af7a:     Connection conn = null;
1:507af7a:     PreparedStatement stmt1 = null;
1:507af7a:     PreparedStatement stmt2 = null;
1:507af7a:     PreparedStatement stmt3 = null;
1:bdb1c48:     ResultSet rs = null;
1:507af7a:     try {
1:507af7a:       conn = getDataSource().getConnection();
1:507af7a: 
1:507af7a:       stmt1 = conn.prepareStatement(verifyPreferenceSQL, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
1:507af7a:       setLongParameter(stmt1, 1, userID);
1:507af7a:       setLongParameter(stmt1, 2, itemID);
1:bdb1c48:       rs = stmt1.executeQuery();
1:507af7a: 
1:507af7a:       // test if the record exists already.
1:507af7a:       if (rs.first()) {
1:507af7a:         // then we update the record.
1:507af7a:         stmt2 = conn.prepareStatement(updatePreferenceSQL);
1:507af7a:         stmt2.setDouble(1, value);
1:507af7a:         setLongParameter(stmt2, 2, userID);
1:507af7a:         setLongParameter(stmt2, 3, itemID);
1:507af7a: 
1:507af7a:         log.debug("Executing SQL update: {}", updatePreferenceSQL);
1:507af7a:         stmt2.executeUpdate();
1:507af7a: 
1:507af7a:       } else {
1:507af7a:         // we'll insert the record
1:507af7a:         stmt3 = conn.prepareStatement(setPreferenceSQL);
1:507af7a:         setLongParameter(stmt3, 1, userID);
1:507af7a:         setLongParameter(stmt3, 2, itemID);
1:507af7a:         stmt3.setDouble(3, value);
1:507af7a: 
1:507af7a:         log.debug("Executing SQL update: {}", setPreferenceSQL);
1:507af7a:         stmt3.executeUpdate();
1:507af7a:       }
1:507af7a:     } catch (SQLException sqle) {
1:507af7a:       log.warn("Exception while setting preference", sqle);
1:507af7a:       throw new TasteException(sqle);
1:507af7a:     } finally {
1:bdb1c48:       IOUtils.quietClose(rs);
1:507af7a:       IOUtils.quietClose(stmt1);
1:507af7a:       IOUtils.quietClose(stmt2);
1:507af7a:       IOUtils.quietClose(stmt3);
1:507af7a:       IOUtils.quietClose(conn);
1:507af7a:     }
1:507af7a:   }
1:507af7a: 
1:507af7a: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1:     ResultSet rs = null;
1:       rs = stmt1.executeQuery();
/////////////////////////////////////////////////////////////////////////
1:       IOUtils.quietClose(rs);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:507af7a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.model.jdbc;
1: 
1: import com.google.common.base.Preconditions;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.jdbc.AbstractJDBCComponent;
1: import org.apache.mahout.common.IOUtils;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.sql.DataSource;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: /**
1:  * <p>
1:  * A {@link org.apache.mahout.cf.taste.model.JDBCDataModel} backed by a SQL92 compatible database and
1:  * accessed via JDBC. It should work with most JDBC databases, although not optimized for performance.
1:  * By default, this class assumes that there is a {@link javax.sql.DataSource} available under the JNDI name
1:  * "jdbc/taste", which gives access to a database with a "taste_preferences" table with the following schema:
1:  * </p>
1:  *
1:  * <p>
1:  *
1:  * <pre>
1:  * CREATE TABLE taste_preferences (
1:  *   user_id BIGINT NOT NULL,
1:  *   item_id BIGINT NOT NULL,
1:  *   preference REAL NOT NULL,
1:  *   PRIMARY KEY (user_id, item_id)
1:  * )
1:  * CREATE INDEX taste_preferences_user_id_index ON taste_preferences (user_id);
1:  * CREATE INDEX taste_preferences_item_id_index ON taste_preferences (item_id);
1:  * </pre>
1:  *
1:  * </p>
1:  *
1:  * @see SQL92BooleanPrefJDBCDataModel
1:  */
1: public class SQL92JDBCDataModel extends AbstractJDBCDataModel {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(SQL92JDBCDataModel.class);
1: 
1:   private final String updatePreferenceSQL;
1:   private final String verifyPreferenceSQL;
1: 
1:   /**
1:    * <p>
1:    * Creates a  using the default {@link javax.sql.DataSource} (named
1:    * {@link #DEFAULT_DATASOURCE_NAME} and default table/column names.
1:    * </p>
1:    *
1:    * @throws org.apache.mahout.cf.taste.common.TasteException
1:    *           if {@link javax.sql.DataSource} can't be found
1:    */
1:   public SQL92JDBCDataModel() throws TasteException {
1:     this(DEFAULT_DATASOURCE_NAME);
1:   }
1: 
1:   /**
1:    * <p>
1:    * Creates a  using the default {@link javax.sql.DataSource} found under the given name, and
1:    * using default table/column names.
1:    * </p>
1:    *
1:    * @param dataSourceName
1:    *          name of {@link javax.sql.DataSource} to look up
1:    * @throws org.apache.mahout.cf.taste.common.TasteException
1:    *           if {@link javax.sql.DataSource} can't be found
1:    */
1:   public SQL92JDBCDataModel(String dataSourceName) throws TasteException {
1:     this(AbstractJDBCComponent.lookupDataSource(dataSourceName),
1:          DEFAULT_PREFERENCE_TABLE,
1:          DEFAULT_USER_ID_COLUMN,
1:          DEFAULT_ITEM_ID_COLUMN,
1:          DEFAULT_PREFERENCE_COLUMN,
1:          DEFAULT_PREFERENCE_TIME_COLUMN);
1:   }
1: 
1:   /**
1:    * <p>
1:    * Creates a  using the given {@link javax.sql.DataSource} and default table/column names.
1:    * </p>
1:    *
1:    * @param dataSource
1:    *          {@link javax.sql.DataSource} to use
1:    */
1:   public SQL92JDBCDataModel(DataSource dataSource) {
1:     this(dataSource,
1:          DEFAULT_PREFERENCE_TABLE,
1:          DEFAULT_USER_ID_COLUMN,
1:          DEFAULT_ITEM_ID_COLUMN,
1:          DEFAULT_PREFERENCE_COLUMN,
1:          DEFAULT_PREFERENCE_TIME_COLUMN);
1:   }
1: 
1:   /**
1:    * <p>
1:    * Creates a  using the given {@link javax.sql.DataSource} and default table/column names.
1:    * </p>
1:    *
1:    * @param dataSource
1:    *          {@link javax.sql.DataSource} to use
1:    * @param preferenceTable
1:    *          name of table containing preference data
1:    * @param userIDColumn
1:    *          user ID column name
1:    * @param itemIDColumn
1:    *          item ID column name
1:    * @param preferenceColumn
1:    *          preference column name
1:    * @param timestampColumn timestamp column name (may be null)
1:    */
1:   public SQL92JDBCDataModel(DataSource dataSource,
1:                                  String preferenceTable,
1:                                  String userIDColumn,
1:                                  String itemIDColumn,
1:                                  String preferenceColumn,
1:                                  String timestampColumn) {
1:     super(dataSource, preferenceTable, userIDColumn, itemIDColumn, preferenceColumn,
1:         // getPreferenceSQL
1:         "SELECT " + preferenceColumn + " FROM " + preferenceTable + " WHERE " + userIDColumn + "=? AND "
1:             + itemIDColumn + "=?",
1:         // getPreferenceTimeSQL
1:         "SELECT " + timestampColumn + " FROM " + preferenceTable + " WHERE " + userIDColumn + "=? AND "
1:             + itemIDColumn + "=?",
1:         // getUserSQL
1:         "SELECT DISTINCT " + userIDColumn + ", " + itemIDColumn + ", " + preferenceColumn + " FROM " + preferenceTable
1:             + " WHERE " + userIDColumn + "=? ORDER BY " + itemIDColumn,
1:         // getAllUsersSQL
1:         "SELECT DISTINCT " + userIDColumn + ", " + itemIDColumn + ", " + preferenceColumn + " FROM " + preferenceTable
1:             + " ORDER BY " + userIDColumn + ", " + itemIDColumn,
1:         // getNumItemsSQL
1:         "SELECT COUNT(DISTINCT " + itemIDColumn + ") FROM " + preferenceTable,
1:         // getNumUsersSQL
1:         "SELECT COUNT(DISTINCT " + userIDColumn + ") FROM " + preferenceTable,
1:         // setPreferenceSQL
1:         "INSERT INTO " + preferenceTable + '(' + userIDColumn + ',' + itemIDColumn + ',' + preferenceColumn
1:             + ") VALUES (?,?,?)",
1:         // removePreference SQL
1:         "DELETE FROM " + preferenceTable + " WHERE " + userIDColumn + "=? AND " + itemIDColumn + "=?",
1:         // getUsersSQL
1:         "SELECT DISTINCT " + userIDColumn + " FROM " + preferenceTable + " ORDER BY " + userIDColumn,
1:         // getItemsSQL
1:         "SELECT DISTINCT " + itemIDColumn + " FROM " + preferenceTable + " ORDER BY " + itemIDColumn,
1:         // getPrefsForItemSQL
1:         "SELECT DISTINCT " + userIDColumn + ", " + itemIDColumn + ", " + preferenceColumn + " FROM " + preferenceTable
1:             + " WHERE " + itemIDColumn + "=? ORDER BY " + userIDColumn,
1:         // getNumPreferenceForItemSQL
1:         "SELECT COUNT(1) FROM " + preferenceTable + " WHERE " + itemIDColumn + "=?",
1:         // getNumPreferenceForItemsSQL
1:         "SELECT COUNT(1) FROM " + preferenceTable + " tp1 JOIN " + preferenceTable + " tp2 " + "USING ("
1:             + userIDColumn + ") WHERE tp1." + itemIDColumn + "=? and tp2." + itemIDColumn + "=?",
1:         // getMaxPreferenceSQL
1:         "SELECT MAX(" + preferenceColumn + ") FROM " + preferenceTable,
1:         // getMinPreferenceSQL
1:         "SELECT MIN(" + preferenceColumn + ") FROM " + preferenceTable);
1: 
1:     updatePreferenceSQL = "UPDATE " + preferenceTable + " SET " + preferenceColumn + "=? WHERE " + userIDColumn
1:         + "=? AND " + itemIDColumn + "=?";
1:     verifyPreferenceSQL = "SELECT " + preferenceColumn + " FROM " + preferenceTable + " WHERE " + userIDColumn
1:         + "=? AND " + itemIDColumn + "=?";
1:   }
1: 
1:   protected String getUpdatePreferenceSQL() {
1:     return updatePreferenceSQL;
1:   }
1: 
1:   protected String getVerifyPreferenceSQL() {
1:     return verifyPreferenceSQL;
1:   }
1: 
1:   /**
1:    * Override since SQL92 doesn't have the same non-standard capability that MySQL has, to optionally
1:    * insert or update in one statement.
1:    */
1:   @Override
1:   public void setPreference(long userID, long itemID, float value) throws TasteException {
1:     Preconditions.checkArgument(!Float.isNaN(value), "NaN value");
1:     log.debug("Setting preference for user {}, item {}", userID, itemID);
1: 
1:     String setPreferenceSQL = getSetPreferenceSQL();
1: 
1:     Connection conn = null;
1:     PreparedStatement stmt1 = null;
1:     PreparedStatement stmt2 = null;
1:     PreparedStatement stmt3 = null;
1:     try {
1:       conn = getDataSource().getConnection();
1: 
1:       stmt1 = conn.prepareStatement(verifyPreferenceSQL, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
1:       setLongParameter(stmt1, 1, userID);
1:       setLongParameter(stmt1, 2, itemID);
0:       ResultSet rs = stmt1.executeQuery();
1: 
1:       // test if the record exists already.
1:       if (rs.first()) {
1:         // then we update the record.
1:         stmt2 = conn.prepareStatement(updatePreferenceSQL);
1:         stmt2.setDouble(1, value);
1:         setLongParameter(stmt2, 2, userID);
1:         setLongParameter(stmt2, 3, itemID);
1: 
1:         log.debug("Executing SQL update: {}", updatePreferenceSQL);
1:         stmt2.executeUpdate();
1: 
1:       } else {
1:         // we'll insert the record
1:         stmt3 = conn.prepareStatement(setPreferenceSQL);
1:         setLongParameter(stmt3, 1, userID);
1:         setLongParameter(stmt3, 2, itemID);
1:         stmt3.setDouble(3, value);
1: 
1:         log.debug("Executing SQL update: {}", setPreferenceSQL);
1:         stmt3.executeUpdate();
1:       }
1:     } catch (SQLException sqle) {
1:       log.warn("Exception while setting preference", sqle);
1:       throw new TasteException(sqle);
1:     } finally {
1:       IOUtils.quietClose(stmt1);
1:       IOUtils.quietClose(stmt2);
1:       IOUtils.quietClose(stmt3);
1:       IOUtils.quietClose(conn);
1:     }
1:   }
1: 
1: }
============================================================================