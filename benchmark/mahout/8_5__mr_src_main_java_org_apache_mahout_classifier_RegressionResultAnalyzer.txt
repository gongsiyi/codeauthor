1:e9cc323: /**
1:e9cc323:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e9cc323:  * contributor license agreements.  See the NOTICE file distributed with
1:e9cc323:  * this work for additional information regarding copyright ownership.
1:e9cc323:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e9cc323:  * (the "License"); you may not use this file except in compliance with
1:e9cc323:  * the License.  You may obtain a copy of the License at
1:e9cc323:  *
1:e9cc323:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e9cc323:  *
1:e9cc323:  * Unless required by applicable law or agreed to in writing, software
1:e9cc323:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e9cc323:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e9cc323:  * See the License for the specific language governing permissions and
1:e9cc323:  * limitations under the License.
1:e9cc323:  */
5:e9cc323: 
1:e9cc323: package org.apache.mahout.classifier;
1:e9cc323: 
1:e9cc323: import java.text.DecimalFormat;
1:e9cc323: import java.text.NumberFormat;
1:85f9ece: import java.util.ArrayList;
1:e9cc323: import java.util.List;
1:35e0258: import java.util.Locale;
1:e9cc323: 
1:67a531e: import org.apache.commons.lang3.StringUtils;
1:e9cc323: 
1:e9cc323: /**
1:e9cc323:  * ResultAnalyzer captures the classification statistics and displays in a tabular manner
1:e9cc323:  */
1:e9cc323: public class RegressionResultAnalyzer {
1:e9cc323: 
1:e9cc323:   private static class Result {
1:051cbcf:     private final double actual;
1:051cbcf:     private final double result;
1:e9cc323:     Result(double actual, double result) {
1:e9cc323:       this.actual = actual;
1:e9cc323:       this.result = result;
2:e9cc323:     }
1:051cbcf:     double getActual() {
1:051cbcf:       return actual;
1:051cbcf:     }
1:051cbcf:     double getResult() {
1:051cbcf:       return result;
1:051cbcf:     }
1:e9cc323:   }
1:e9cc323:   
1:e9cc323:   private List<Result> results;
1:e9cc323:   
1:e9cc323:   /**
1:e9cc323:    * 
1:e9cc323:    * @param actual
1:e9cc323:    *          The actual answer
1:e9cc323:    * @param result
1:e9cc323:    *          The regression result
1:e9cc323:    */
1:e9cc323:   public void addInstance(double actual, double result) {
1:564c3e1:     if (results == null) {
1:85f9ece:       results = new ArrayList<>();
1:564c3e1:     }
1:e9cc323:     results.add(new Result(actual, result));
1:e9cc323:   }
1:e9cc323: 
1:e9cc323:   /**
1:e9cc323:    * 
1:e9cc323:    * @param results
1:e9cc323:    *          The results table
1:e9cc323:    */
1:e9cc323:   public void setInstances(double[][] results) {
1:e9cc323:     for (double[] res : results) {
1:e9cc323:       addInstance(res[0], res[1]);
1:e9cc323:     }
1:e9cc323:   }
1:e9cc323: 
1:e9cc323:   @Override
1:e9cc323:   public String toString() {
1:564c3e1:     double sumActual = 0.0;
1:564c3e1:     double sumActualSquared = 0.0;
1:564c3e1:     double sumResult = 0.0;
1:564c3e1:     double sumResultSquared = 0.0;
1:1608f61:     double sumActualResult = 0.0;
1:564c3e1:     double sumAbsolute = 0.0;
1:564c3e1:     double sumAbsoluteSquared = 0.0;
1:1608f61:     int predictable = 0;
1:1608f61:     int unpredictable = 0;
1:e9cc323: 
1:e9cc323:     for (Result res : results) {
1:051cbcf:       double actual = res.getActual();
1:051cbcf:       double result = res.getResult();
1:1608f61:       if (Double.isNaN(result)) {
1:1608f61:         unpredictable++;
1:1608f61:       } else {
1:1608f61:         sumActual += actual;
1:1608f61:         sumActualSquared += actual * actual;
1:1608f61:         sumResult += result;
1:1608f61:         sumResultSquared += result * result;
1:1608f61:         sumActualResult += actual * result;
1:1608f61:         double absolute = Math.abs(actual - result);
1:1608f61:         sumAbsolute += absolute;
1:1608f61:         sumAbsoluteSquared += absolute * absolute;
1:1608f61:         predictable++;
1:1608f61:       }
1:e9cc323:     }
1:e9cc323: 
1:e9cc323:     StringBuilder returnString = new StringBuilder();
1:e9cc323:     
1:e9cc323:     returnString.append("=======================================================\n");
1:e9cc323:     returnString.append("Summary\n");
1:e9cc323:     returnString.append("-------------------------------------------------------\n");
1:1608f61:     
1:1608f61:     if (predictable > 0) {
1:1608f61:       double varActual = sumActualSquared - sumActual * sumActual / predictable;
1:1608f61:       double varResult = sumResultSquared - sumResult * sumResult / predictable;
1:1608f61:       double varCo = sumActualResult - sumActual * sumResult /  predictable;
1:1608f61:   
1:1608f61:       double correlation;
1:1608f61:       if (varActual * varResult <= 0) {
1:1608f61:         correlation = 0.0;
1:1608f61:       } else {
1:1608f61:         correlation = varCo / Math.sqrt(varActual * varResult);
1:1608f61:       }
1:35e0258: 
1:35e0258:       Locale.setDefault(Locale.US);
1:1608f61:       NumberFormat decimalFormatter = new DecimalFormat("0.####");
1:1608f61:       
1:1608f61:       returnString.append(StringUtils.rightPad("Correlation coefficient", 40)).append(": ").append(
1:1608f61:         StringUtils.leftPad(decimalFormatter.format(correlation), 10)).append('\n');
1:1608f61:       returnString.append(StringUtils.rightPad("Mean absolute error", 40)).append(": ").append(
1:1608f61:         StringUtils.leftPad(decimalFormatter.format(sumAbsolute / predictable), 10)).append('\n');
1:1608f61:       returnString.append(StringUtils.rightPad("Root mean squared error", 40)).append(": ").append(
1:1608f61:         StringUtils.leftPad(decimalFormatter.format(Math.sqrt(sumAbsoluteSquared / predictable)),
1:1608f61:           10)).append('\n');
1:1608f61:     }
1:1608f61:     returnString.append(StringUtils.rightPad("Predictable Instances", 40)).append(": ").append(
1:1608f61:       StringUtils.leftPad(Integer.toString(predictable), 10)).append('\n');
1:1608f61:     returnString.append(StringUtils.rightPad("Unpredictable Instances", 40)).append(": ").append(
1:1608f61:       StringUtils.leftPad(Integer.toString(unpredictable), 10)).append('\n');
1:e9cc323:     returnString.append(StringUtils.rightPad("Total Regressed Instances", 40)).append(": ").append(
1:e9cc323:       StringUtils.leftPad(Integer.toString(results.size()), 10)).append('\n');
1:e9cc323:     returnString.append('\n');
1:e9cc323: 
1:e9cc323:     return returnString.toString();
1:e9cc323:   }
1:e9cc323: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:       results = new ArrayList<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:67a531e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.StringUtils;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:       results = Lists.newArrayList();
commit:35e0258
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
1: 
1:       Locale.setDefault(Locale.US);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1608f61
/////////////////////////////////////////////////////////////////////////
1:     double sumActualResult = 0.0;
1:     int predictable = 0;
1:     int unpredictable = 0;
1:       if (Double.isNaN(result)) {
1:         unpredictable++;
1:       } else {
1:         sumActual += actual;
1:         sumActualSquared += actual * actual;
1:         sumResult += result;
1:         sumResultSquared += result * result;
1:         sumActualResult += actual * result;
1:         double absolute = Math.abs(actual - result);
1:         sumAbsolute += absolute;
1:         sumAbsoluteSquared += absolute * absolute;
1:         predictable++;
1:       }
/////////////////////////////////////////////////////////////////////////
1:     if (predictable > 0) {
1:       double varActual = sumActualSquared - sumActual * sumActual / predictable;
1:       double varResult = sumResultSquared - sumResult * sumResult / predictable;
1:       double varCo = sumActualResult - sumActual * sumResult /  predictable;
1:   
1:       double correlation;
1:       if (varActual * varResult <= 0) {
1:         correlation = 0.0;
1:       } else {
1:         correlation = varCo / Math.sqrt(varActual * varResult);
1:       }
1:   
1:       NumberFormat decimalFormatter = new DecimalFormat("0.####");
1:       
1:       returnString.append(StringUtils.rightPad("Correlation coefficient", 40)).append(": ").append(
1:         StringUtils.leftPad(decimalFormatter.format(correlation), 10)).append('\n');
1:       returnString.append(StringUtils.rightPad("Mean absolute error", 40)).append(": ").append(
1:         StringUtils.leftPad(decimalFormatter.format(sumAbsolute / predictable), 10)).append('\n');
1:       returnString.append(StringUtils.rightPad("Root mean squared error", 40)).append(": ").append(
1:         StringUtils.leftPad(decimalFormatter.format(Math.sqrt(sumAbsoluteSquared / predictable)),
1:           10)).append('\n');
1:     }
1:     returnString.append(StringUtils.rightPad("Predictable Instances", 40)).append(": ").append(
1:       StringUtils.leftPad(Integer.toString(predictable), 10)).append('\n');
1:     returnString.append(StringUtils.rightPad("Unpredictable Instances", 40)).append(": ").append(
1:       StringUtils.leftPad(Integer.toString(unpredictable), 10)).append('\n');
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
1:     private final double actual;
1:     private final double result;
1:     double getActual() {
1:       return actual;
1:     }
1:     double getResult() {
1:       return result;
1:     }
/////////////////////////////////////////////////////////////////////////
1:       double actual = res.getActual();
1:       double result = res.getResult();
0:       sumActual += actual;
0:       sumActualSquared += actual * actual;
0:       sumResult += result;
0:       sumResultSquared += result * result;
0:       double absolute = Math.abs(actual - result);
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
0:     final double actual;
0:     final double result;
/////////////////////////////////////////////////////////////////////////
1:     if (results == null) {
0:       results = new ArrayList<Result>();
1:     }
/////////////////////////////////////////////////////////////////////////
1:     double sumActual = 0.0;
1:     double sumActualSquared = 0.0;
1:     double sumResult = 0.0;
1:     double sumResultSquared = 0.0;
1:     double sumAbsolute = 0.0;
1:     double sumAbsoluteSquared = 0.0;
/////////////////////////////////////////////////////////////////////////
0:     double correlation;
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:e9cc323
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier;
1: 
1: import java.text.DecimalFormat;
1: import java.text.NumberFormat;
0: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.apache.commons.lang.StringUtils;
1: 
1: /**
1:  * ResultAnalyzer captures the classification statistics and displays in a tabular manner
1:  */
1: public class RegressionResultAnalyzer {
1: 
1:   private static class Result {
0:     double actual;
0:     double result;
1:     Result(double actual, double result) {
1:       this.actual = actual;
1:       this.result = result;
1:     }
1:   }
1:   
1:   private List<Result> results;
1:   
1:   /**
1:    * 
1:    * @param actual
1:    *          The actual answer
1:    * @param result
1:    *          The regression result
1:    */
1:   public void addInstance(double actual, double result) {
0:     if (results == null) results = new ArrayList<Result>();
1:     results.add(new Result(actual, result));
1:   }
1: 
1:   /**
1:    * 
1:    * @param results
1:    *          The results table
1:    */
1:   public void setInstances(double[][] results) {
1:     for (double[] res : results) {
1:       addInstance(res[0], res[1]);
1:     }
1:   }
1: 
1:   @Override
1:   public String toString() {
0:     double sumActual = 0;
0:     double sumActualSquared = 0;
0:     double sumResult = 0;
0:     double sumResultSquared = 0;
0:     double sumAbsolute = 0;
0:     double sumAbsoluteSquared = 0;
1: 
1:     for (Result res : results) {
0:       sumActual += res.actual;
0:       sumActualSquared += res.actual * res.actual;
0:       sumResult += res.result;
0:       sumResultSquared += res.result * res.result;
0:       double absolute = Math.abs(res.actual - res.result);
0:       sumAbsolute += absolute;
0:       sumAbsoluteSquared += absolute * absolute;
1:     }
1:     
0:     double correlation = 0;
0:     double varActual = sumActualSquared - sumActual * sumActual / results.size();
0:     double varResult = sumResultSquared - sumResult * sumResult / results.size();
0:     double varAbsolute = sumResultSquared - sumActual * sumResult /  results.size();
1: 
0:     if (varActual * varResult <= 0) {
0:       correlation = 0.0;
0:     } else {
0:       correlation = varAbsolute / Math.sqrt(varActual * varResult);
1:     }
1: 
1:     StringBuilder returnString = new StringBuilder();
1:     
1:     returnString.append("=======================================================\n");
1:     returnString.append("Summary\n");
1:     returnString.append("-------------------------------------------------------\n");
1: 
0:     NumberFormat decimalFormatter = new DecimalFormat("0.####");
1:     
0:     returnString.append(StringUtils.rightPad("Correlation coefficient", 40)).append(": ").append(
0:       StringUtils.leftPad(decimalFormatter.format(correlation), 10)).append('\n');
0:     returnString.append(StringUtils.rightPad("Mean absolute error", 40)).append(": ").append(
0:       StringUtils.leftPad(decimalFormatter.format(sumAbsolute / results.size()), 10)).append('\n');
0:     returnString.append(StringUtils.rightPad("Root mean squared error", 40)).append(": ").append(
0:       StringUtils.leftPad(decimalFormatter.format(Math.sqrt(sumAbsoluteSquared / results.size())),
0:         10)).append('\n');
1:     returnString.append(StringUtils.rightPad("Total Regressed Instances", 40)).append(": ").append(
1:       StringUtils.leftPad(Integer.toString(results.size()), 10)).append('\n');
1:     returnString.append('\n');
1: 
1:     return returnString.toString();
1:   }
1: }
============================================================================