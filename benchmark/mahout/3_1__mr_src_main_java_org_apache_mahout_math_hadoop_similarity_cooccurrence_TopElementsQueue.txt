1:d95bdda: /*
1:d95bdda:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d95bdda:  * contributor license agreements.  See the NOTICE file distributed with
1:d95bdda:  * this work for additional information regarding copyright ownership.
1:d95bdda:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d95bdda:  * (the "License"); you may not use this file except in compliance with
1:d95bdda:  * the License.  You may obtain a copy of the License at
1:d95bdda:  *
1:d95bdda:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d95bdda:  *
1:d95bdda:  * Unless required by applicable law or agreed to in writing, software
1:d95bdda:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d95bdda:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d95bdda:  * See the License for the specific language governing permissions and
1:d95bdda:  * limitations under the License.
1:d95bdda:  */
1:d95bdda: 
1:d95bdda: package org.apache.mahout.math.hadoop.similarity.cooccurrence;
1:d95bdda: 
1:d95bdda: import com.google.common.collect.Lists;
1:d95bdda: import org.apache.lucene.util.PriorityQueue;
1:d95bdda: 
1:d95bdda: import java.util.Collections;
1:d95bdda: import java.util.List;
1:d95bdda: 
1:d95bdda: public class TopElementsQueue extends PriorityQueue<MutableElement> {
1:d95bdda: 
1:d95bdda:   private final int maxSize;
1:d95bdda: 
1:d95bdda:   private static final int SENTINEL_INDEX = Integer.MIN_VALUE;
1:d95bdda: 
1:d95bdda:   public TopElementsQueue(int maxSize) {
1:d95bdda:     super(maxSize);
1:d95bdda:     this.maxSize = maxSize;
1:d95bdda:   }
1:d95bdda: 
1:d95bdda:   public List<MutableElement> getTopElements() {
1:d95bdda:     List<MutableElement> topElements = Lists.newArrayListWithCapacity(maxSize);
1:d95bdda:     while (size() > 0) {
1:d95bdda:       MutableElement top = pop();
1:d95bdda:       // filter out "sentinel" objects necessary for maintaining an efficient priority queue
1:d95bdda:       if (top.index() != SENTINEL_INDEX) {
1:d95bdda:         topElements.add(top);
1:d95bdda:       }
1:d95bdda:     }
1:d95bdda:     Collections.reverse(topElements);
1:d95bdda:     return topElements;
1:d95bdda:   }
1:d95bdda: 
1:d95bdda:   @Override
1:d95bdda:   protected MutableElement getSentinelObject() {
1:d95bdda:     return new MutableElement(SENTINEL_INDEX, Double.MIN_VALUE);
1:d95bdda:   }
1:d95bdda: 
1:d95bdda:   @Override
1:d95bdda:   protected boolean lessThan(MutableElement e1, MutableElement e2) {
1:d95bdda:     return e1.get() < e2.get();
1:d95bdda:   }
1:d95bdda: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d95bdda
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.similarity.cooccurrence;
1: 
1: import com.google.common.collect.Lists;
1: import org.apache.lucene.util.PriorityQueue;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: 
1: public class TopElementsQueue extends PriorityQueue<MutableElement> {
1: 
1:   private final int maxSize;
1: 
1:   private static final int SENTINEL_INDEX = Integer.MIN_VALUE;
1: 
1:   public TopElementsQueue(int maxSize) {
1:     super(maxSize);
1:     this.maxSize = maxSize;
1:   }
1: 
1:   public List<MutableElement> getTopElements() {
1:     List<MutableElement> topElements = Lists.newArrayListWithCapacity(maxSize);
1:     while (size() > 0) {
1:       MutableElement top = pop();
1:       // filter out "sentinel" objects necessary for maintaining an efficient priority queue
1:       if (top.index() != SENTINEL_INDEX) {
1:         topElements.add(top);
1:       }
1:     }
1:     Collections.reverse(topElements);
1:     return topElements;
1:   }
1: 
1:   @Override
1:   protected MutableElement getSentinelObject() {
1:     return new MutableElement(SENTINEL_INDEX, Double.MIN_VALUE);
1:   }
1: 
1:   @Override
1:   protected boolean lessThan(MutableElement e1, MutableElement e2) {
1:     return e1.get() < e2.get();
1:   }
1: }
============================================================================