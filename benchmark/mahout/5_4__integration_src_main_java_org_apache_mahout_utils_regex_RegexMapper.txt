1:4fbfbc6: /*
1:2e4d306:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2e4d306:  * contributor license agreements.  See the NOTICE file distributed with
1:2e4d306:  * this work for additional information regarding copyright ownership.
1:2e4d306:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2e4d306:  * (the "License"); you may not use this file except in compliance with
1:2e4d306:  * the License.  You may obtain a copy of the License at
3:2e4d306:  *
1:2e4d306:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e4d306:  *
1:2e4d306:  * Unless required by applicable law or agreed to in writing, software
1:2e4d306:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e4d306:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e4d306:  * See the License for the specific language governing permissions and
1:2e4d306:  * limitations under the License.
1:2e4d306:  */
4:2e4d306: 
1:4fbfbc6: package org.apache.mahout.utils.regex;
1:4fbfbc6: 
1:85f9ece: import java.io.IOException;
1:85f9ece: import java.util.ArrayList;
1:85f9ece: import java.util.List;
1:85f9ece: import java.util.regex.Pattern;
1:85f9ece: 
1:2e4d306: import org.apache.hadoop.conf.Configuration;
1:2e4d306: import org.apache.hadoop.io.LongWritable;
1:2e4d306: import org.apache.hadoop.io.Text;
1:2e4d306: import org.apache.hadoop.mapreduce.Mapper;
1:2e4d306: import org.apache.lucene.analysis.Analyzer;
1:2e4d306: import org.apache.mahout.common.ClassUtils;
1:2e4d306: 
1:2e4d306: public class RegexMapper extends Mapper<LongWritable, Text, LongWritable, Text> {
1:4fbfbc6: 
1:2e4d306:   public static final String REGEX = "regex";
1:2e4d306:   public static final String GROUP_MATCHERS = "regex.groups";
1:2e4d306:   public static final String TRANSFORMER_CLASS = "transformer.class";
1:2e4d306:   public static final String FORMATTER_CLASS = "formatter.class";
1:2e4d306: 
1:2e4d306:   private Pattern regex;
1:2e4d306:   private List<Integer> groupsToKeep;
1:2e4d306:   private RegexTransformer transformer = RegexUtils.IDENTITY_TRANSFORMER;
1:2e4d306:   private RegexFormatter formatter = RegexUtils.IDENTITY_FORMATTER;
1:2e4d306:   public static final String ANALYZER_NAME = "analyzerName";
1:2e4d306: 
1:2e4d306: 
1:2e4d306:   @Override
1:2e4d306:   protected void setup(Context context) throws IOException, InterruptedException {
1:85f9ece:     groupsToKeep = new ArrayList<>();
1:2e4d306:     Configuration config = context.getConfiguration();
1:2e4d306:     String regexStr = config.get(REGEX);
1:2e4d306:     regex = Pattern.compile(regexStr);
1:2e4d306:     String[] groups = config.getStrings(GROUP_MATCHERS);
1:2e4d306:     if (groups != null) {
1:4fbfbc6:       for (String group : groups) {
1:4fbfbc6:         groupsToKeep.add(Integer.parseInt(group));
1:2e4d306:       }
1:2e4d306:     }
1:2e4d306: 
1:3c22856:     transformer = ClassUtils.instantiateAs(config.get(TRANSFORMER_CLASS, IdentityTransformer.class.getName()),
1:3c22856:         RegexTransformer.class);
1:2e4d306:     String analyzerName = config.get(ANALYZER_NAME);
1:2e4d306:     if (analyzerName != null && transformer instanceof AnalyzerTransformer) {
1:2e4d306:       Analyzer analyzer = ClassUtils.instantiateAs(analyzerName, Analyzer.class);
1:2e4d306:       ((AnalyzerTransformer)transformer).setAnalyzer(analyzer);
1:2e4d306:     }
1:2e4d306: 
1:3c22856:     formatter = ClassUtils.instantiateAs(config.get(FORMATTER_CLASS, IdentityFormatter.class.getName()),
1:3c22856:         RegexFormatter.class);
1:2e4d306:   }
1:2e4d306: 
1:2e4d306: 
1:2e4d306:   @Override
1:2e4d306:   protected void map(LongWritable key, Text text, Context context) throws IOException, InterruptedException {
1:2e4d306:     String result = RegexUtils.extract(text.toString(), regex, groupsToKeep, " ", transformer);
1:85f9ece:     if (!result.isEmpty()) {
1:2e4d306:       String format = formatter.format(result);
1:2e4d306:       context.write(key, new Text(format));
1:2e4d306:     }
1:2e4d306:   }
1:2e4d306: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.regex.Pattern;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     groupsToKeep = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:     if (!result.isEmpty()) {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1:     transformer = ClassUtils.instantiateAs(config.get(TRANSFORMER_CLASS, IdentityTransformer.class.getName()),
1:         RegexTransformer.class);
1:     formatter = ClassUtils.instantiateAs(config.get(FORMATTER_CLASS, IdentityFormatter.class.getName()),
1:         RegexFormatter.class);
commit:210b265
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     groupsToKeep = Lists.newArrayList();
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.regex;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:       for (String group : groups) {
1:         groupsToKeep.add(Integer.parseInt(group));
/////////////////////////////////////////////////////////////////////////
0:     if (result != null && !result.isEmpty()) {
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:2e4d306
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.regex;
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.lucene.analysis.Analyzer;
1: import org.apache.mahout.common.ClassUtils;
1: 
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.regex.Pattern;
1: 
1: 
0: /**
1:  *
1:  *
0:  **/
1: public class RegexMapper extends Mapper<LongWritable, Text, LongWritable, Text> {
1:   public static final String REGEX = "regex";
1:   public static final String GROUP_MATCHERS = "regex.groups";
1:   public static final String TRANSFORMER_CLASS = "transformer.class";
1:   public static final String FORMATTER_CLASS = "formatter.class";
1: 
1:   private Pattern regex;
1:   private List<Integer> groupsToKeep;
1:   private RegexTransformer transformer = RegexUtils.IDENTITY_TRANSFORMER;
1:   private RegexFormatter formatter = RegexUtils.IDENTITY_FORMATTER;
1:   public static final String ANALYZER_NAME = "analyzerName";
1: 
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
0:     groupsToKeep = new ArrayList<Integer>();
1:     Configuration config = context.getConfiguration();
1:     String regexStr = config.get(REGEX);
1:     regex = Pattern.compile(regexStr);
1:     String[] groups = config.getStrings(GROUP_MATCHERS);
1:     if (groups != null) {
0:       for (int i = 0; i < groups.length; i++) {
0:         groupsToKeep.add(Integer.parseInt(groups[i]));
1:       }
1:     }
1: 
0:     transformer = ClassUtils.instantiateAs(config.get(TRANSFORMER_CLASS, IdentityTransformer.class.getName()), RegexTransformer.class);
1:     String analyzerName = config.get(ANALYZER_NAME);
1:     if (analyzerName != null && transformer instanceof AnalyzerTransformer) {
1:       Analyzer analyzer = ClassUtils.instantiateAs(analyzerName, Analyzer.class);
1:       ((AnalyzerTransformer)transformer).setAnalyzer(analyzer);
1:     }
1: 
0:     formatter = ClassUtils.instantiateAs(config.get(FORMATTER_CLASS, IdentityFormatter.class.getName()), RegexFormatter.class);
1: 
1:   }
1: 
1: 
1:   @Override
1:   protected void map(LongWritable key, Text text, Context context) throws IOException, InterruptedException {
1:     String result = RegexUtils.extract(text.toString(), regex, groupsToKeep, " ", transformer);
0:     if (result != null && result.length() > 0) {
1:       String format = formatter.format(result);
1:       context.write(key, new Text(format));
1:     }
1:   }
1: }
============================================================================