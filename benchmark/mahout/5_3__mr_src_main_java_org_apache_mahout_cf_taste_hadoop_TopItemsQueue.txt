1:8a8e10d: /**
1:8a8e10d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8a8e10d:  * contributor license agreements.  See the NOTICE file distributed with
1:8a8e10d:  * this work for additional information regarding copyright ownership.
1:8a8e10d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8a8e10d:  * (the "License"); you may not use this file except in compliance with
1:8a8e10d:  * the License.  You may obtain a copy of the License at
1:8a8e10d:  *
1:8a8e10d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8a8e10d:  *
1:8a8e10d:  * Unless required by applicable law or agreed to in writing, software
1:8a8e10d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8a8e10d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a8e10d:  * See the License for the specific language governing permissions and
1:8a8e10d:  * limitations under the License.
1:8a8e10d:  */
2:8a8e10d: 
1:d95bdda: package org.apache.mahout.cf.taste.hadoop;
1:8a8e10d: 
1:85f9ece: import java.util.ArrayList;
1:8a8e10d: import java.util.Collections;
1:8a8e10d: import java.util.List;
1:8a8e10d: 
1:85f9ece: import org.apache.lucene.util.PriorityQueue;
1:85f9ece: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:85f9ece: 
1:d95bdda: public class TopItemsQueue extends PriorityQueue<MutableRecommendedItem> {
1:8a8e10d: 
1:5d66758:   private static final long SENTINEL_ID = Long.MIN_VALUE;
1:8a8e10d: 
1:8a8e10d:   private final int maxSize;
1:8a8e10d: 
1:d95bdda:   public TopItemsQueue(int maxSize) {
1:8a8e10d:     super(maxSize);
1:8a8e10d:     this.maxSize = maxSize;
1:8a8e10d:   }
1:8a8e10d: 
1:8a8e10d:   public List<RecommendedItem> getTopItems() {
1:85f9ece:     List<RecommendedItem> recommendedItems = new ArrayList<>(maxSize);
1:8a8e10d:     while (size() > 0) {
1:8a8e10d:       MutableRecommendedItem topItem = pop();
1:8a8e10d:       // filter out "sentinel" objects necessary for maintaining an efficient priority queue
1:10c535c:       if (topItem.getItemID() != SENTINEL_ID) {
1:8a8e10d:         recommendedItems.add(topItem);
1:8a8e10d:       }
1:8a8e10d:     }
1:8a8e10d:     Collections.reverse(recommendedItems);
1:8a8e10d:     return recommendedItems;
1:8a8e10d:   }
1:8a8e10d: 
1:8a8e10d:   @Override
1:8a8e10d:   protected boolean lessThan(MutableRecommendedItem one, MutableRecommendedItem two) {
1:8a8e10d:     return one.getValue() < two.getValue();
1:8a8e10d:   }
1:8a8e10d: 
1:8a8e10d:   @Override
1:8a8e10d:   protected MutableRecommendedItem getSentinelObject() {
1:d95bdda:     return new MutableRecommendedItem(SENTINEL_ID, Float.MIN_VALUE);
1:8a8e10d:   }
1:8a8e10d: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import org.apache.lucene.util.PriorityQueue;
1: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1: 
/////////////////////////////////////////////////////////////////////////
1:     List<RecommendedItem> recommendedItems = new ArrayList<>(maxSize);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d95bdda
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.cf.taste.hadoop;
/////////////////////////////////////////////////////////////////////////
1: public class TopItemsQueue extends PriorityQueue<MutableRecommendedItem> {
1:   public TopItemsQueue(int maxSize) {
/////////////////////////////////////////////////////////////////////////
1:     return new MutableRecommendedItem(SENTINEL_ID, Float.MIN_VALUE);
commit:5d66758
/////////////////////////////////////////////////////////////////////////
1:   private static final long SENTINEL_ID = Long.MIN_VALUE;
commit:8a8e10d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.cf.taste.hadoop.als;
1: 
0: import com.google.common.collect.Lists;
0: import org.apache.lucene.util.PriorityQueue;
0: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: 
0: public class TopItemQueue extends PriorityQueue<MutableRecommendedItem> {
1: 
0:   public static final long SENTINEL_ID = Long.MIN_VALUE;
1: 
1:   private final int maxSize;
1: 
0:   public TopItemQueue(int maxSize) {
1:     super(maxSize);
1:     this.maxSize = maxSize;
1:   }
1: 
1:   public List<RecommendedItem> getTopItems() {
0:     List<RecommendedItem> recommendedItems = Lists.newArrayListWithCapacity(maxSize);
1:     while (size() > 0) {
1:       MutableRecommendedItem topItem = pop();
1:       // filter out "sentinel" objects necessary for maintaining an efficient priority queue
0:       if (topItem.getItemID() != TopItemQueue.SENTINEL_ID) {
1:         recommendedItems.add(topItem);
1:       }
1:     }
1:     Collections.reverse(recommendedItems);
1:     return recommendedItems;
1:   }
1: 
1:   @Override
1:   protected boolean lessThan(MutableRecommendedItem one, MutableRecommendedItem two) {
1:     return one.getValue() < two.getValue();
1:   }
1: 
1:   @Override
1:   protected MutableRecommendedItem getSentinelObject() {
0:     MutableRecommendedItem sentinel =  new MutableRecommendedItem();
0:     sentinel.set(SENTINEL_ID, Float.MIN_VALUE);
0:     return sentinel;
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1:       if (topItem.getItemID() != SENTINEL_ID) {
============================================================================