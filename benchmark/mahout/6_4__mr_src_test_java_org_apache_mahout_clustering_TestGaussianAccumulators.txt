2:3c9538a: /**
1:3c9538a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3c9538a:  * contributor license agreements.  See the NOTICE file distributed with
1:3c9538a:  * this work for additional information regarding copyright ownership.
1:3c9538a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3c9538a:  * (the "License"); you may not use this file except in compliance with
1:3c9538a:  * the License.  You may obtain a copy of the License at
3:3c9538a:  *
1:3c9538a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3c9538a:  *
1:3c9538a:  * Unless required by applicable law or agreed to in writing, software
1:3c9538a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3c9538a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c9538a:  * See the License for the specific language governing permissions and
1:3c9538a:  * limitations under the License.
2:3c9538a:  */
1:3c9538a: package org.apache.mahout.clustering;
3:3c9538a: 
1:049e7dc: import java.util.Collection;
1:3c9538a: 
1:74f849b: import com.google.common.collect.Lists;
1:3c9538a: import org.apache.mahout.common.MahoutTestCase;
1:3c9538a: import org.apache.mahout.math.DenseVector;
1:b588af3: import org.apache.mahout.math.Vector;
1:3c9538a: import org.apache.mahout.math.VectorWritable;
1:528ffcd: import org.apache.mahout.math.function.Functions;
1:b588af3: import org.apache.mahout.math.function.SquareRootFunction;
1:3c9538a: import org.junit.Before;
1:3c9538a: import org.junit.Test;
1:3c9538a: import org.slf4j.Logger;
1:3c9538a: import org.slf4j.LoggerFactory;
1:3c9538a: 
1:049e7dc: public final class TestGaussianAccumulators extends MahoutTestCase {
1:3c9538a: 
1:3c9538a:   private static final Logger log = LoggerFactory.getLogger(TestGaussianAccumulators.class);
1:3c9538a: 
1:74f849b:   private Collection<VectorWritable> sampleData = Lists.newArrayList();
1:b588af3:   private int sampleN;
1:b588af3:   private Vector sampleMean;
1:b588af3:   private Vector sampleStd;
1:b588af3: 
1:049e7dc:   @Override
1:3c9538a:   @Before
1:3c9538a:   public void setUp() throws Exception {
1:3c9538a:     super.setUp();
1:74f849b:     sampleData = Lists.newArrayList();
1:3c9538a:     generateSamples();
1:b588af3:     sampleN = 0;
1:b588af3:     Vector sum = new DenseVector(2);
1:b588af3:     for (VectorWritable v : sampleData) {
1:528ffcd:       sum.assign(v.get(), Functions.PLUS);
1:b588af3:       sampleN++;
2:3c9538a:     }
1:b588af3:     sampleMean = sum.divide(sampleN);
1:b588af3: 
1:d61a0ee:     Vector sampleVar = new DenseVector(2);
1:b588af3:     for (VectorWritable v : sampleData) {
1:b588af3:       Vector delta = v.get().minus(sampleMean);
1:528ffcd:       sampleVar.assign(delta.times(delta), Functions.PLUS);
1:b588af3:     }
1:b588af3:     sampleVar = sampleVar.divide(sampleN - 1);
1:b588af3:     sampleStd = sampleVar.clone();
1:b588af3:     sampleStd.assign(new SquareRootFunction());
1:b588af3:     log.info("Observing {} samples m=[{}, {}] sd=[{}, {}]",
1:8396a27:              sampleN, sampleMean.get(0), sampleMean.get(1), sampleStd.get(0), sampleStd.get(1));
1:3c9538a:   }
1:3c9538a: 
1:3c9538a:   /**
2:3c9538a:    * Generate random samples and add them to the sampleData
1:b60c909:    *
2:3c9538a:    * @param num
2:3c9538a:    *          int number of samples to generate
2:3c9538a:    * @param mx
2:3c9538a:    *          double x-value of the sample mean
2:3c9538a:    * @param my
2:3c9538a:    *          double y-value of the sample mean
1:3c9538a:    * @param sdx
1:3c9538a:    *          double x-value standard deviation of the samples
1:3c9538a:    * @param sdy
1:3c9538a:    *          double y-value standard deviation of the samples
1:3c9538a:    */
1:049e7dc:   private void generate2dSamples(int num, double mx, double my, double sdx, double sdy) {
1:8396a27:     log.info("Generating {} samples m=[{}, {}] sd=[{}, {}]", num, mx, my, sdx, sdy);
2:3c9538a:     for (int i = 0; i < num; i++) {
1:3c9538a:       sampleData.add(new VectorWritable(new DenseVector(new double[] { UncommonDistributions.rNorm(mx, sdx),
1:3c9538a:           UncommonDistributions.rNorm(my, sdy) })));
1:3c9538a:     }
1:3c9538a:   }
1:3c9538a: 
1:049e7dc:   private void generateSamples() {
1:b588af3:     generate2dSamples(50000, 1, 2, 3, 4);
1:3c9538a:   }
1:3c9538a: 
1:3c9538a:   @Test
1:3c9538a:   public void testAccumulatorNoSamples() {
1:3c9538a:     GaussianAccumulator accumulator0 = new RunningSumsGaussianAccumulator();
1:3c9538a:     GaussianAccumulator accumulator1 = new OnlineGaussianAccumulator();
1:3c9538a:     accumulator0.compute();
1:3c9538a:     accumulator1.compute();
1:3c9538a:     assertEquals("N", accumulator0.getN(), accumulator1.getN(), EPSILON);
1:3c9538a:     assertEquals("Means", accumulator0.getMean(), accumulator1.getMean());
1:3c9538a:     assertEquals("Avg Stds", accumulator0.getAverageStd(), accumulator1.getAverageStd(), EPSILON);
1:3c9538a:   }
1:3c9538a: 
1:3c9538a:   @Test
1:b588af3:   public void testAccumulatorOneSample() {
1:b588af3:     GaussianAccumulator accumulator0 = new RunningSumsGaussianAccumulator();
1:b588af3:     GaussianAccumulator accumulator1 = new OnlineGaussianAccumulator();
1:b588af3:     Vector sample = new DenseVector(2);
1:b588af3:     accumulator0.observe(sample, 1.0);
1:b588af3:     accumulator1.observe(sample, 1.0);
1:b588af3:     accumulator0.compute();
1:b588af3:     accumulator1.compute();
1:b588af3:     assertEquals("N", accumulator0.getN(), accumulator1.getN(), EPSILON);
1:b588af3:     assertEquals("Means", accumulator0.getMean(), accumulator1.getMean());
1:b588af3:     assertEquals("Avg Stds", accumulator0.getAverageStd(), accumulator1.getAverageStd(), EPSILON);
1:b588af3:   }
1:b588af3: 
1:b588af3:   @Test
1:b588af3:   public void testOLAccumulatorResults() {
1:b588af3:     GaussianAccumulator accumulator = new OnlineGaussianAccumulator();
1:b588af3:     for (VectorWritable vw : sampleData) {
1:b588af3:       accumulator.observe(vw.get(), 1.0);
1:b588af3:     }
1:b588af3:     accumulator.compute();
1:d61a0ee:     log.info("OL Observed {} samples m=[{}, {}] sd=[{}, {}]",
1:8396a27:              accumulator.getN(),
1:8396a27:              accumulator.getMean().get(0),
1:8396a27:              accumulator.getMean().get(1),
1:8396a27:              accumulator.getStd().get(0),
1:8396a27:              accumulator.getStd().get(1));
1:b588af3:     assertEquals("OL N", sampleN, accumulator.getN(), EPSILON);
1:b588af3:     assertEquals("OL Mean", sampleMean.zSum(), accumulator.getMean().zSum(), EPSILON);
1:b588af3:     assertEquals("OL Std", sampleStd.zSum(), accumulator.getStd().zSum(), EPSILON);
1:b588af3:   }
1:b588af3: 
1:b588af3:   @Test
1:b588af3:   public void testRSAccumulatorResults() {
1:b588af3:     GaussianAccumulator accumulator = new RunningSumsGaussianAccumulator();
1:b588af3:     for (VectorWritable vw : sampleData) {
1:b588af3:       accumulator.observe(vw.get(), 1.0);
1:b588af3:     }
1:b588af3:     accumulator.compute();
1:d61a0ee:     log.info("RS Observed {} samples m=[{}, {}] sd=[{}, {}]",
1:8396a27:              (int) accumulator.getN(),
1:8396a27:              accumulator.getMean().get(0),
1:8396a27:              accumulator.getMean().get(1),
1:8396a27:              accumulator.getStd().get(0),
1:8396a27:              accumulator.getStd().get(1));
1:b588af3:     assertEquals("OL N", sampleN, accumulator.getN(), EPSILON);
1:b588af3:     assertEquals("OL Mean", sampleMean.zSum(), accumulator.getMean().zSum(), EPSILON);
1:b588af3:     assertEquals("OL Std", sampleStd.zSum(), accumulator.getStd().zSum(), 0.0001);
1:b588af3:   }
1:b588af3: 
1:b588af3:   @Test
1:b588af3:   public void testAccumulatorWeightedResults() {
1:3c9538a:     GaussianAccumulator accumulator0 = new RunningSumsGaussianAccumulator();
1:3c9538a:     GaussianAccumulator accumulator1 = new OnlineGaussianAccumulator();
1:3c9538a:     for (VectorWritable vw : sampleData) {
1:b588af3:       accumulator0.observe(vw.get(), 0.5);
1:b588af3:       accumulator1.observe(vw.get(), 0.5);
1:3c9538a:     }
1:3c9538a:     accumulator0.compute();
1:3c9538a:     accumulator1.compute();
1:3c9538a:     assertEquals("N", accumulator0.getN(), accumulator1.getN(), EPSILON);
1:3c9538a:     assertEquals("Means", accumulator0.getMean().zSum(), accumulator1.getMean().zSum(), EPSILON);
1:b588af3:     assertEquals("Stds", accumulator0.getStd().zSum(), accumulator1.getStd().zSum(), 0.001);
1:b588af3:     assertEquals("Variance", accumulator0.getVariance().zSum(), accumulator1.getVariance().zSum(), 0.01);
1:b588af3:   }
1:b588af3: 
1:b588af3:   @Test
1:b588af3:   public void testAccumulatorWeightedResults2() {
1:b588af3:     GaussianAccumulator accumulator0 = new RunningSumsGaussianAccumulator();
1:b588af3:     GaussianAccumulator accumulator1 = new OnlineGaussianAccumulator();
1:b588af3:     for (VectorWritable vw : sampleData) {
1:b588af3:       accumulator0.observe(vw.get(), 1.5);
1:b588af3:       accumulator1.observe(vw.get(), 1.5);
1:b588af3:     }
1:b588af3:     accumulator0.compute();
1:b588af3:     accumulator1.compute();
1:b588af3:     assertEquals("N", accumulator0.getN(), accumulator1.getN(), EPSILON);
1:b588af3:     assertEquals("Means", accumulator0.getMean().zSum(), accumulator1.getMean().zSum(), EPSILON);
1:b588af3:     assertEquals("Stds", accumulator0.getStd().zSum(), accumulator1.getStd().zSum(), 0.001);
1:b588af3:     assertEquals("Variance", accumulator0.getVariance().zSum(), accumulator1.getVariance().zSum(), 0.01);
1:3c9538a:   }
1:3c9538a: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:    *
commit:74f849b
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:   private Collection<VectorWritable> sampleData = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:     sampleData = Lists.newArrayList();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8396a27
/////////////////////////////////////////////////////////////////////////
1:              sampleN, sampleMean.get(0), sampleMean.get(1), sampleStd.get(0), sampleStd.get(1));
/////////////////////////////////////////////////////////////////////////
1:     log.info("Generating {} samples m=[{}, {}] sd=[{}, {}]", num, mx, my, sdx, sdy);
/////////////////////////////////////////////////////////////////////////
1:              accumulator.getN(),
1:              accumulator.getMean().get(0),
1:              accumulator.getMean().get(1),
1:              accumulator.getStd().get(0),
1:              accumulator.getStd().get(1));
/////////////////////////////////////////////////////////////////////////
1:              (int) accumulator.getN(),
1:              accumulator.getMean().get(0),
1:              accumulator.getMean().get(1),
1:              accumulator.getStd().get(0),
1:              accumulator.getStd().get(1));
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Vector sampleVar = new DenseVector(2);
/////////////////////////////////////////////////////////////////////////
1:     log.info("OL Observed {} samples m=[{}, {}] sd=[{}, {}]",
0:              new Object[] {
0:                  accumulator.getN(),
0:                  accumulator.getMean().get(0),
0:                  accumulator.getMean().get(1),
0:                  accumulator.getStd().get(0),
0:                  accumulator.getStd().get(1)
0:              });
/////////////////////////////////////////////////////////////////////////
1:     log.info("RS Observed {} samples m=[{}, {}] sd=[{}, {}]",
0:              new Object[] {
0:                  (int) accumulator.getN(),
0:                  accumulator.getMean().get(0),
0:                  accumulator.getMean().get(1),
0:                  accumulator.getStd().get(0),
0:                  accumulator.getStd().get(1)
0:              });
commit:b588af3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.SquareRootFunction;
/////////////////////////////////////////////////////////////////////////
0:   private Collection<VectorWritable> sampleData = new ArrayList<VectorWritable>();
1:   private int sampleN;
1:   private Vector sampleMean;
1:   private Vector sampleStd;
0:   private Vector sampleVar;
1: 
1:     sampleN = 0;
1:     Vector sum = new DenseVector(2);
1:     for (VectorWritable v : sampleData) {
0:       v.get().addTo(sum);
1:       sampleN++;
1:     sampleMean = sum.divide(sampleN);
1: 
0:     sampleVar = new DenseVector(2);
1:     for (VectorWritable v : sampleData) {
1:       Vector delta = v.get().minus(sampleMean);
0:       delta.times(delta).addTo(sampleVar);
1:     }
1:     sampleVar = sampleVar.divide(sampleN - 1);
1:     sampleStd = sampleVar.clone();
1:     sampleStd.assign(new SquareRootFunction());
1:     log.info("Observing {} samples m=[{}, {}] sd=[{}, {}]",
0:              new Object[] { sampleN, sampleMean.get(0), sampleMean.get(1), sampleStd.get(0), sampleStd.get(1) });
/////////////////////////////////////////////////////////////////////////
1:     generate2dSamples(50000, 1, 2, 3, 4);
/////////////////////////////////////////////////////////////////////////
1:   public void testAccumulatorOneSample() {
1:     GaussianAccumulator accumulator0 = new RunningSumsGaussianAccumulator();
1:     GaussianAccumulator accumulator1 = new OnlineGaussianAccumulator();
1:     Vector sample = new DenseVector(2);
1:     accumulator0.observe(sample, 1.0);
1:     accumulator1.observe(sample, 1.0);
1:     accumulator0.compute();
1:     accumulator1.compute();
1:     assertEquals("N", accumulator0.getN(), accumulator1.getN(), EPSILON);
1:     assertEquals("Means", accumulator0.getMean(), accumulator1.getMean());
1:     assertEquals("Avg Stds", accumulator0.getAverageStd(), accumulator1.getAverageStd(), EPSILON);
1:   }
1: 
1:   @Test
1:   public void testOLAccumulatorResults() {
1:     GaussianAccumulator accumulator = new OnlineGaussianAccumulator();
1:     for (VectorWritable vw : sampleData) {
1:       accumulator.observe(vw.get(), 1.0);
1:     }
1:     accumulator.compute();
0:     log.info("OL Observed {} samples m=[{}, {}] sd=[{}, {}]", new Object[] { accumulator.getN(), accumulator.getMean().get(0),
0:         accumulator.getMean().get(1), accumulator.getStd().get(0), accumulator.getStd().get(1) });
1:     assertEquals("OL N", sampleN, accumulator.getN(), EPSILON);
1:     assertEquals("OL Mean", sampleMean.zSum(), accumulator.getMean().zSum(), EPSILON);
1:     assertEquals("OL Std", sampleStd.zSum(), accumulator.getStd().zSum(), EPSILON);
1:   }
1: 
1:   @Test
1:   public void testRSAccumulatorResults() {
1:     GaussianAccumulator accumulator = new RunningSumsGaussianAccumulator();
1:     for (VectorWritable vw : sampleData) {
1:       accumulator.observe(vw.get(), 1.0);
1:     }
1:     accumulator.compute();
0:     log.info("RS Observed {} samples m=[{}, {}] sd=[{}, {}]", new Object[] { (int) accumulator.getN(),
0:         accumulator.getMean().get(0), accumulator.getMean().get(1), accumulator.getStd().get(0), accumulator.getStd().get(1) });
1:     assertEquals("OL N", sampleN, accumulator.getN(), EPSILON);
1:     assertEquals("OL Mean", sampleMean.zSum(), accumulator.getMean().zSum(), EPSILON);
1:     assertEquals("OL Std", sampleStd.zSum(), accumulator.getStd().zSum(), 0.0001);
1:   }
1: 
1:   @Test
1:   public void testAccumulatorWeightedResults() {
1:       accumulator0.observe(vw.get(), 0.5);
1:       accumulator1.observe(vw.get(), 0.5);
1:     assertEquals("Stds", accumulator0.getStd().zSum(), accumulator1.getStd().zSum(), 0.001);
1:     assertEquals("Variance", accumulator0.getVariance().zSum(), accumulator1.getVariance().zSum(), 0.01);
1:   }
1: 
1:   @Test
1:   public void testAccumulatorWeightedResults2() {
1:     GaussianAccumulator accumulator0 = new RunningSumsGaussianAccumulator();
1:     GaussianAccumulator accumulator1 = new OnlineGaussianAccumulator();
1:     for (VectorWritable vw : sampleData) {
1:       accumulator0.observe(vw.get(), 1.5);
1:       accumulator1.observe(vw.get(), 1.5);
1:     }
1:     accumulator0.compute();
1:     accumulator1.compute();
1:     assertEquals("N", accumulator0.getN(), accumulator1.getN(), EPSILON);
1:     assertEquals("Means", accumulator0.getMean().zSum(), accumulator1.getMean().zSum(), EPSILON);
1:     assertEquals("Stds", accumulator0.getStd().zSum(), accumulator1.getStd().zSum(), 0.001);
1:     assertEquals("Variance", accumulator0.getVariance().zSum(), accumulator1.getVariance().zSum(), 0.01);
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1: public final class TestGaussianAccumulators extends MahoutTestCase {
0:   private Collection<VectorWritable> sampleData = new ArrayList<VectorWritable>();
1:   @Override
/////////////////////////////////////////////////////////////////////////
0:   private void generateSamples(int num, double mx, double my, double sd) {
/////////////////////////////////////////////////////////////////////////
1:   private void generate2dSamples(int num, double mx, double my, double sdx, double sdy) {
/////////////////////////////////////////////////////////////////////////
1:   private void generateSamples() {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:528ffcd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1:       sum.assign(v.get(), Functions.PLUS);
/////////////////////////////////////////////////////////////////////////
1:       sampleVar.assign(delta.times(delta), Functions.PLUS);
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:237bcbd
/////////////////////////////////////////////////////////////////////////
0:       accumulator0.observe(vw.get());
0:       accumulator1.observe(vw.get());
commit:76059d4
/////////////////////////////////////////////////////////////////////////
0:     sampleData = new ArrayList<VectorWritable>();
/////////////////////////////////////////////////////////////////////////
0:     assertEquals("Variance", accumulator0.getVariance().zSum(), accumulator1.getVariance().zSum(), 0.1);
commit:3c9538a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.clustering;
1: 
0: import java.util.ArrayList;
0: import java.util.List;
1: 
0: import org.apache.mahout.clustering.dirichlet.UncommonDistributions;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class TestGaussianAccumulators extends MahoutTestCase {
1: 
0:   private static List<VectorWritable> sampleData = new ArrayList<VectorWritable>();
1: 
1:   private static final Logger log = LoggerFactory.getLogger(TestGaussianAccumulators.class);
1: 
1:   @Before
1:   public void setUp() throws Exception {
1:     super.setUp();
1:     generateSamples();
1:   }
1: 
1:   /**
1:    * Generate random samples and add them to the sampleData
1:    * 
1:    * @param num
1:    *          int number of samples to generate
1:    * @param mx
1:    *          double x-value of the sample mean
1:    * @param my
1:    *          double y-value of the sample mean
0:    * @param sd
0:    *          double standard deviation of the samples
0:    * @throws Exception 
1:    */
0:   public static void generateSamples(int num, double mx, double my, double sd) throws Exception {
0:     log.info("Generating {} samples m=[{}, {}] sd={}", new Object[] { num, mx, my, sd });
1:     for (int i = 0; i < num; i++) {
0:       sampleData.add(new VectorWritable(new DenseVector(new double[] { UncommonDistributions.rNorm(mx, sd),
0:           UncommonDistributions.rNorm(my, sd) })));
1:     }
1:   }
1: 
1:   /**
1:    * Generate random samples and add them to the sampleData
1:    * 
1:    * @param num
1:    *          int number of samples to generate
1:    * @param mx
1:    *          double x-value of the sample mean
1:    * @param my
1:    *          double y-value of the sample mean
1:    * @param sdx
1:    *          double x-value standard deviation of the samples
1:    * @param sdy
1:    *          double y-value standard deviation of the samples
1:    */
0:   public static void generate2dSamples(int num, double mx, double my, double sdx, double sdy) {
0:     log.info("Generating {} samples m=[{}, {}] sd=[{}, {}]", new Object[] { num, mx, my, sdx, sdy });
1:     for (int i = 0; i < num; i++) {
1:       sampleData.add(new VectorWritable(new DenseVector(new double[] { UncommonDistributions.rNorm(mx, sdx),
1:           UncommonDistributions.rNorm(my, sdy) })));
1:     }
1:   }
1: 
0:   private void generateSamples() throws Exception {
0:     generate2dSamples(500, 1, 2, 3, 4);
1:   }
1: 
1:   @Test
1:   public void testAccumulatorNoSamples() {
1:     GaussianAccumulator accumulator0 = new RunningSumsGaussianAccumulator();
1:     GaussianAccumulator accumulator1 = new OnlineGaussianAccumulator();
1:     accumulator0.compute();
1:     accumulator1.compute();
1:     assertEquals("N", accumulator0.getN(), accumulator1.getN(), EPSILON);
1:     assertEquals("Means", accumulator0.getMean(), accumulator1.getMean());
1:     assertEquals("Avg Stds", accumulator0.getAverageStd(), accumulator1.getAverageStd(), EPSILON);
1:   }
1: 
1:   @Test
0:   public void testAccumulatorResults() {
1:     GaussianAccumulator accumulator0 = new RunningSumsGaussianAccumulator();
1:     GaussianAccumulator accumulator1 = new OnlineGaussianAccumulator();
1:     for (VectorWritable vw : sampleData) {
0:       accumulator0.observe(vw.get(), 1);
0:       accumulator1.observe(vw.get(), 1);
1:     }
1:     accumulator0.compute();
1:     accumulator1.compute();
1:     assertEquals("N", accumulator0.getN(), accumulator1.getN(), EPSILON);
1:     assertEquals("Means", accumulator0.getMean().zSum(), accumulator1.getMean().zSum(), EPSILON);
0:     assertEquals("Stds", accumulator0.getStd().zSum(), accumulator1.getStd().zSum(), 0.01);
0:     //assertEquals("Variance", accumulator0.getVariance().zSum(), accumulator1.getVariance().zSum(), 1.6);
1:   }
1: }
============================================================================