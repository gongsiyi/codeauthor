1:172bb3b: /**
1:172bb3b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:172bb3b:  * contributor license agreements.  See the NOTICE file distributed with
1:172bb3b:  * this work for additional information regarding copyright ownership.
1:172bb3b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:172bb3b:  * (the "License"); you may not use this file except in compliance with
1:172bb3b:  * the License.  You may obtain a copy of the License at
3:172bb3b:  *
1:172bb3b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3eba6f2:  *
1:172bb3b:  * Unless required by applicable law or agreed to in writing, software
1:172bb3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:172bb3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:172bb3b:  * See the License for the specific language governing permissions and
1:172bb3b:  * limitations under the License.
1:a28cf1d:  */
1:8d102ea: package org.apache.mahout.clustering.iterator;
1:a28cf1d: 
1:a28cf1d: import java.io.DataInput;
1:a28cf1d: import java.io.DataOutput;
1:a28cf1d: import java.io.IOException;
1:1ac30a4: 
1:8d102ea: import org.apache.mahout.clustering.Cluster;
1:8d102ea: import org.apache.mahout.clustering.classify.ClusterClassifier;
1:1ac30a4: 
1:172bb3b: /**
1:172bb3b:  * This is a simple maximum likelihood clustering policy, suitable for k-means
1:172bb3b:  * clustering
1:3eba6f2:  * 
1:a28cf1d:  */
1:3eba6f2: public class KMeansClusteringPolicy extends AbstractClusteringPolicy {
1:1ac30a4:   
1:1ac30a4:   public KMeansClusteringPolicy() {
1:1ac30a4:   }
1:3eba6f2:   
1:1ac30a4:   public KMeansClusteringPolicy(double convergenceDelta) {
1:1ac30a4:     this.convergenceDelta = convergenceDelta;
1:1ac30a4:   }
1:76e80dc:   
1:3eba6f2:   private double convergenceDelta = 0.001;
1:229aeff: 
1:76e80dc:   @Override
1:a28cf1d:   public void write(DataOutput out) throws IOException {
1:1ac30a4:     out.writeDouble(convergenceDelta);
1:76e80dc:   }
1:229aeff: 
2:a28cf1d:   @Override
1:a28cf1d:   public void readFields(DataInput in) throws IOException {
1:1ac30a4:     this.convergenceDelta = in.readDouble();
1:76e80dc:   }
1:3eba6f2:   
1:3eba6f2:   @Override
1:3eba6f2:   public void close(ClusterClassifier posterior) {
1:3eba6f2:     boolean allConverged = true;
1:3eba6f2:     for (Cluster cluster : posterior.getModels()) {
1:3eba6f2:       org.apache.mahout.clustering.kmeans.Kluster kluster = (org.apache.mahout.clustering.kmeans.Kluster) cluster;
1:3eba6f2:       boolean converged = kluster.calculateConvergence(convergenceDelta);
1:3eba6f2:       allConverged = allConverged && converged;
1:3eba6f2:       cluster.computeParameters();
1:3eba6f2:     }
1:3eba6f2:     
1:3eba6f2:   }
1:3eba6f2:   
2:a28cf1d: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:3eba6f2
/////////////////////////////////////////////////////////////////////////
1: public class KMeansClusteringPolicy extends AbstractClusteringPolicy {
1:   
1:   private double convergenceDelta = 0.001;
0:   /*
0:    * (non-Javadoc)
1:    * 
1:   
0:   /*
0:    * (non-Javadoc)
1:    * 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void close(ClusterClassifier posterior) {
1:     boolean allConverged = true;
1:     for (Cluster cluster : posterior.getModels()) {
1:       org.apache.mahout.clustering.kmeans.Kluster kluster = (org.apache.mahout.clustering.kmeans.Kluster) cluster;
1:       boolean converged = kluster.calculateConvergence(convergenceDelta);
1:       allConverged = allConverged && converged;
1:       cluster.computeParameters();
1:     }
1:     
1:   }
1:   
commit:8d102ea
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.iterator;
1: import org.apache.mahout.clustering.Cluster;
1: import org.apache.mahout.clustering.classify.ClusterClassifier;
commit:76e80dc
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
0: import org.apache.mahout.math.DenseVector;
0: import org.apache.mahout.math.VectorWritable;
0: import org.apache.mahout.math.function.TimesFunction;
/////////////////////////////////////////////////////////////////////////
0:   private double convergenceDelta = 0.05;
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public Vector classify(Vector data, List<Cluster> models) {
0:     int i = 0;
0:     Vector pdfs = new DenseVector(models.size());
0:     for (Cluster model : models) {
0:       pdfs.set(i++, model.pdf(new VectorWritable(data)));
1:     }
0:     return pdfs.assign(new TimesFunction(), 1.0 / pdfs.zSum());
1:   }
1: 
commit:1ac30a4
/////////////////////////////////////////////////////////////////////////
1:   public KMeansClusteringPolicy() {
0:     super();
1:   }
1: 
1:   public KMeansClusteringPolicy(double convergenceDelta) {
0:     super();
1:     this.convergenceDelta = convergenceDelta;
1:   }
1: 
0:   private double convergenceDelta;
1:   
/////////////////////////////////////////////////////////////////////////
1:     out.writeDouble(convergenceDelta);
/////////////////////////////////////////////////////////////////////////
1:     this.convergenceDelta = in.readDouble();
commit:a28cf1d
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
0: 
0:   /* (non-Javadoc)
0:    * @see org.apache.hadoop.io.Writable#write(java.io.DataOutput)
1:    */
1:   @Override
1:   public void write(DataOutput out) throws IOException {
0:     // nothing to do here
1:   }
0: 
0:   /* (non-Javadoc)
0:    * @see org.apache.hadoop.io.Writable#readFields(java.io.DataInput)
1:    */
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
0:     // nothing to do here
1:   }
commit:933e22a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.SequentialAccessSparseVector;
/////////////////////////////////////////////////////////////////////////
0:   public Vector select(Vector probabilities) {
0:     int maxValueIndex = probabilities.maxValueIndex();
0:     Vector weights = new SequentialAccessSparseVector(probabilities.size());
0:     weights.set(maxValueIndex, 1.0);
0:     return weights;
commit:172bb3b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
0: package org.apache.mahout.clustering;
0: 
0: import org.apache.mahout.math.Vector;
0: 
1: /**
1:  * This is a simple maximum likelihood clustering policy, suitable for k-means
1:  * clustering
1:  * 
0:  */
0: public class KMeansClusteringPolicy implements ClusteringPolicy {
0:   
0:   /* (non-Javadoc)
0:    * @see org.apache.mahout.clustering.ClusteringPolicy#select(org.apache.mahout.math.Vector)
0:    */
0:   @Override
0:   public int select(Vector pdfs) {
0:     return pdfs.maxValueIndex();
0:   }
0:   
0:   /* (non-Javadoc)
0:    * @see org.apache.mahout.clustering.ClusteringPolicy#update(org.apache.mahout.clustering.ClusterClassifier)
0:    */
0:   @Override
0:   public void update(ClusterClassifier posterior) {
0:     // nothing to do here
0:   }
0:   
0: }
============================================================================