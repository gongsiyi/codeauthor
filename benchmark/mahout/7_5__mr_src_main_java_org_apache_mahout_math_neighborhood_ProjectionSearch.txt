1:8649ac2: /*
1:8649ac2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8649ac2:  * contributor license agreements.  See the NOTICE file distributed with
1:8649ac2:  * this work for additional information regarding copyright ownership.
1:8649ac2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8649ac2:  * (the "License"); you may not use this file except in compliance with
1:8649ac2:  * the License.  You may obtain a copy of the License at
1:8649ac2:  *
1:8649ac2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8649ac2:  *
1:8649ac2:  * Unless required by applicable law or agreed to in writing, software
1:8649ac2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8649ac2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8649ac2:  * See the License for the specific language governing permissions and
1:8649ac2:  * limitations under the License.
1:8649ac2:  */
1:8649ac2: 
1:8649ac2: package org.apache.mahout.math.neighborhood;
1:8649ac2: 
1:8649ac2: import java.util.Collections;
1:8649ac2: import java.util.Iterator;
1:8649ac2: import java.util.List;
1:8649ac2: import java.util.Set;
1:8649ac2: 
1:8649ac2: import com.google.common.base.Preconditions;
1:8649ac2: import com.google.common.collect.AbstractIterator;
1:8649ac2: import com.google.common.collect.BoundType;
1:8649ac2: import com.google.common.collect.Iterables;
1:8649ac2: import com.google.common.collect.Lists;
1:8649ac2: import com.google.common.collect.Sets;
1:8649ac2: import com.google.common.collect.TreeMultiset;
1:8649ac2: import org.apache.mahout.math.random.RandomProjector;
1:8649ac2: import org.apache.mahout.common.distance.DistanceMeasure;
1:8649ac2: import org.apache.mahout.math.Matrix;
1:8649ac2: import org.apache.mahout.math.Vector;
1:8649ac2: import org.apache.mahout.math.random.WeightedThing;
1:8649ac2: 
1:8649ac2: /**
1:8649ac2:  * Does approximate nearest neighbor dudes search by projecting the data.
1:8649ac2:  */
1:335a993: public class ProjectionSearch extends UpdatableSearcher {
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * A lists of tree sets containing the scalar projections of each vector.
1:8649ac2:    * The elements in a TreeMultiset are WeightedThing<Integer>, where the weight is the scalar
1:8649ac2:    * projection of the vector at the index pointed to by the Integer from the referenceVectors list
1:8649ac2:    * on the basis vector whose index is the same as the index of the TreeSet in the List.
1:8649ac2:    */
1:8649ac2:   private List<TreeMultiset<WeightedThing<Vector>>> scalarProjections;
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * The list of random normalized projection vectors forming a basis.
1:8649ac2:    * The TreeSet of scalar projections at index i in scalarProjections corresponds to the vector
1:8649ac2:    * at index i from basisVectors.
1:8649ac2:    */
1:8649ac2:   private Matrix basisMatrix;
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * The number of elements to consider on both sides in the ball around the vector found by the
1:8649ac2:    * search in a TreeSet from scalarProjections.
1:8649ac2:    */
1:4ca6b86:   private final int searchSize;
1:8649ac2: 
1:4ca6b86:   private final int numProjections;
1:8649ac2:   private boolean initialized = false;
1:8649ac2: 
1:8649ac2:   private void initialize(int numDimensions) {
1:8649ac2:     if (initialized) {
1:8649ac2:       return;
1:8649ac2:     }
1:8649ac2:     initialized = true;
1:8649ac2:     basisMatrix = RandomProjector.generateBasisNormal(numProjections, numDimensions);
1:8649ac2:     scalarProjections = Lists.newArrayList();
1:8649ac2:     for (int i = 0; i < numProjections; ++i) {
1:8649ac2:       scalarProjections.add(TreeMultiset.<WeightedThing<Vector>>create());
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   public ProjectionSearch(DistanceMeasure distanceMeasure, int numProjections,  int searchSize) {
1:8649ac2:     super(distanceMeasure);
1:8649ac2:     Preconditions.checkArgument(numProjections > 0 && numProjections < 100,
1:cd167f9:         "Unreasonable value for number of projections. Must be: 0 < numProjections < 100");
1:8649ac2: 
1:8649ac2:     this.searchSize = searchSize;
1:8649ac2:     this.numProjections = numProjections;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Adds a WeightedVector into the set of projections for later searching.
1:8649ac2:    * @param vector  The WeightedVector to add.
1:8649ac2:    */
1:8649ac2:   @Override
1:8649ac2:   public void add(Vector vector) {
1:8649ac2:     initialize(vector.size());
1:8649ac2:     Vector projection = basisMatrix.times(vector);
1:8649ac2:     // Add the the new vector and the projected distance to each set separately.
1:8649ac2:     int i = 0;
1:8649ac2:     for (TreeMultiset<WeightedThing<Vector>> s : scalarProjections) {
1:87c15be:       s.add(new WeightedThing<>(vector, projection.get(i++)));
1:8649ac2:     }
1:8649ac2:     int numVectors = scalarProjections.get(0).size();
1:8649ac2:     for (TreeMultiset<WeightedThing<Vector>> s : scalarProjections) {
1:58cc1ae:       Preconditions.checkArgument(s.size() == numVectors, "Number of vectors in projection sets "
1:58cc1ae:           + "differ");
1:8649ac2:       double firstWeight = s.firstEntry().getElement().getWeight();
1:8649ac2:       for (WeightedThing<Vector> w : s) {
1:58cc1ae:         Preconditions.checkArgument(firstWeight <= w.getWeight(), "Weights not in non-decreasing "
1:58cc1ae:             + "order");
1:8649ac2:         firstWeight = w.getWeight();
1:8649ac2:       }
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Returns the number of scalarProjections that we can search
1:8649ac2:    * @return  The number of scalarProjections added to the search so far.
1:8649ac2:    */
1:4ca6b86:   @Override
1:8649ac2:   public int size() {
1:8649ac2:     if (scalarProjections == null) {
1:8649ac2:       return 0;
1:8649ac2:     }
1:8649ac2:     return scalarProjections.get(0).size();
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Searches for the query vector returning the closest limit referenceVectors.
1:8649ac2:    *
1:8649ac2:    * @param query the vector to search for.
1:8649ac2:    * @param limit the number of results to return.
1:8649ac2:    * @return a list of Vectors wrapped in WeightedThings where the "thing"'s weight is the
1:8649ac2:    * distance.
1:8649ac2:    */
1:4ca6b86:   @Override
1:4ca6b86:   public List<WeightedThing<Vector>> search(Vector query, int limit) {
1:8649ac2:     Set<Vector> candidates = Sets.newHashSet();
1:8649ac2: 
1:8649ac2:     Iterator<? extends Vector> projections = basisMatrix.iterator();
1:8649ac2:     for (TreeMultiset<WeightedThing<Vector>> v : scalarProjections) {
1:8649ac2:       Vector basisVector = projections.next();
1:87c15be:       WeightedThing<Vector> projectedQuery = new WeightedThing<>(query,
1:8649ac2:           query.dot(basisVector));
1:8649ac2:       for (WeightedThing<Vector> candidate : Iterables.concat(
1:8649ac2:           Iterables.limit(v.tailMultiset(projectedQuery, BoundType.CLOSED), searchSize),
1:8649ac2:           Iterables.limit(v.headMultiset(projectedQuery, BoundType.OPEN).descendingMultiset(), searchSize))) {
1:8649ac2:         candidates.add(candidate.getValue());
1:8649ac2:       }
1:8649ac2:     }
1:8649ac2: 
1:8649ac2:     // If searchSize * scalarProjections.size() is small enough not to cause much memory pressure,
1:8649ac2:     // this is probably just as fast as a priority queue here.
1:8649ac2:     List<WeightedThing<Vector>> top = Lists.newArrayList();
1:8649ac2:     for (Vector candidate : candidates) {
1:87c15be:       top.add(new WeightedThing<>(candidate, distanceMeasure.distance(query, candidate)));
1:8649ac2:     }
1:8649ac2:     Collections.sort(top);
1:8649ac2:     return top.subList(0, Math.min(limit, top.size()));
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Returns the closest vector to the query.
1:8649ac2:    * When only one the nearest vector is needed, use this method, NOT search(query, limit) because
1:8649ac2:    * it's faster (less overhead).
1:8649ac2:    *
1:8649ac2:    * @param query the vector to search for
1:8649ac2:    * @param differentThanQuery if true, returns the closest vector different than the query (this
1:8649ac2:    *                           only matters if the query is among the searched vectors), otherwise,
1:8649ac2:    *                           returns the closest vector to the query (even the same vector).
1:8649ac2:    * @return the weighted vector closest to the query
1:8649ac2:    */
1:8649ac2:   @Override
1:8649ac2:   public WeightedThing<Vector> searchFirst(Vector query, boolean differentThanQuery) {
1:8649ac2:     double bestDistance = Double.POSITIVE_INFINITY;
1:8649ac2:     Vector bestVector = null;
1:8649ac2: 
1:8649ac2:     Iterator<? extends Vector> projections = basisMatrix.iterator();
1:8649ac2:     for (TreeMultiset<WeightedThing<Vector>> v : scalarProjections) {
1:8649ac2:       Vector basisVector = projections.next();
1:87c15be:       WeightedThing<Vector> projectedQuery = new WeightedThing<>(query, query.dot(basisVector));
1:8649ac2:       for (WeightedThing<Vector> candidate : Iterables.concat(
1:8649ac2:           Iterables.limit(v.tailMultiset(projectedQuery, BoundType.CLOSED), searchSize),
1:8649ac2:           Iterables.limit(v.headMultiset(projectedQuery, BoundType.OPEN).descendingMultiset(), searchSize))) {
1:8649ac2:         double distance = distanceMeasure.distance(query, candidate.getValue());
1:8649ac2:         if (distance < bestDistance && (!differentThanQuery || !candidate.getValue().equals(query))) {
1:8649ac2:           bestDistance = distance;
1:8649ac2:           bestVector = candidate.getValue();
1:8649ac2:         }
1:8649ac2:       }
1:8649ac2:     }
1:8649ac2: 
1:87c15be:     return new WeightedThing<>(bestVector, bestDistance);
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Override
1:8649ac2:   public Iterator<Vector> iterator() {
1:8649ac2:     return new AbstractIterator<Vector>() {
1:4ca6b86:       private final Iterator<WeightedThing<Vector>> projected = scalarProjections.get(0).iterator();
1:8649ac2:       @Override
1:8649ac2:       protected Vector computeNext() {
1:8649ac2:         if (!projected.hasNext()) {
1:8649ac2:           return endOfData();
1:8649ac2:         }
1:8649ac2:         return projected.next().getValue();
1:8649ac2:       }
1:8649ac2:     };
1:8649ac2:   }
1:8649ac2: 
1:4ca6b86:   @Override
1:8649ac2:   public boolean remove(Vector vector, double epsilon) {
1:8649ac2:     WeightedThing<Vector> toRemove = searchFirst(vector, false);
1:8649ac2:     if (toRemove.getWeight() < epsilon) {
1:8649ac2:       Iterator<? extends Vector> basisVectors = basisMatrix.iterator();
1:8649ac2:       for (TreeMultiset<WeightedThing<Vector>> projection : scalarProjections) {
1:87c15be:         if (!projection.remove(new WeightedThing<>(vector, vector.dot(basisVectors.next())))) {
1:8649ac2:           throw new RuntimeException("Internal inconsistency in ProjectionSearch");
1:8649ac2:         }
1:8649ac2:       }
1:8649ac2:       return true;
1:8649ac2:     } else {
1:8649ac2:       return false;
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Override
1:8649ac2:   public void clear() {
1:8649ac2:     if (scalarProjections == null) {
1:8649ac2:       return;
1:8649ac2:     }
1:8649ac2:     for (TreeMultiset<WeightedThing<Vector>> set : scalarProjections) {
1:8649ac2:       set.clear();
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:       s.add(new WeightedThing<>(vector, projection.get(i++)));
/////////////////////////////////////////////////////////////////////////
1:       WeightedThing<Vector> projectedQuery = new WeightedThing<>(query,
/////////////////////////////////////////////////////////////////////////
1:       top.add(new WeightedThing<>(candidate, distanceMeasure.distance(query, candidate)));
/////////////////////////////////////////////////////////////////////////
1:       WeightedThing<Vector> projectedQuery = new WeightedThing<>(query, query.dot(basisVector));
/////////////////////////////////////////////////////////////////////////
1:     return new WeightedThing<>(bestVector, bestDistance);
/////////////////////////////////////////////////////////////////////////
1:         if (!projection.remove(new WeightedThing<>(vector, vector.dot(basisVectors.next())))) {
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:         "Unreasonable value for number of projections. Must be: 0 < numProjections < 100");
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:335a993
/////////////////////////////////////////////////////////////////////////
1: public class ProjectionSearch extends UpdatableSearcher {
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:   private final int searchSize;
1:   private final int numProjections;
/////////////////////////////////////////////////////////////////////////
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public List<WeightedThing<Vector>> search(Vector query, int limit) {
/////////////////////////////////////////////////////////////////////////
1:       private final Iterator<WeightedThing<Vector>> projected = scalarProjections.get(0).iterator();
/////////////////////////////////////////////////////////////////////////
1:   @Override
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1:       Preconditions.checkArgument(s.size() == numVectors, "Number of vectors in projection sets "
1:           + "differ");
1:         Preconditions.checkArgument(firstWeight <= w.getWeight(), "Weights not in non-decreasing "
1:             + "order");
author:dfilimon
-------------------------------------------------------------------------------
commit:8649ac2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.neighborhood;
1: 
1: import java.util.Collections;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import com.google.common.base.Preconditions;
1: import com.google.common.collect.AbstractIterator;
1: import com.google.common.collect.BoundType;
1: import com.google.common.collect.Iterables;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Sets;
1: import com.google.common.collect.TreeMultiset;
1: import org.apache.mahout.math.random.RandomProjector;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.random.WeightedThing;
1: 
1: /**
1:  * Does approximate nearest neighbor dudes search by projecting the data.
1:  */
0: public class ProjectionSearch extends UpdatableSearcher implements Iterable<Vector> {
1: 
1:   /**
1:    * A lists of tree sets containing the scalar projections of each vector.
1:    * The elements in a TreeMultiset are WeightedThing<Integer>, where the weight is the scalar
1:    * projection of the vector at the index pointed to by the Integer from the referenceVectors list
1:    * on the basis vector whose index is the same as the index of the TreeSet in the List.
1:    */
1:   private List<TreeMultiset<WeightedThing<Vector>>> scalarProjections;
1: 
1:   /**
1:    * The list of random normalized projection vectors forming a basis.
1:    * The TreeSet of scalar projections at index i in scalarProjections corresponds to the vector
1:    * at index i from basisVectors.
1:    */
1:   private Matrix basisMatrix;
1: 
1:   /**
1:    * The number of elements to consider on both sides in the ball around the vector found by the
1:    * search in a TreeSet from scalarProjections.
1:    */
0:   private int searchSize;
1: 
0:   private int numProjections;
1:   private boolean initialized = false;
1: 
1:   private void initialize(int numDimensions) {
1:     if (initialized) {
1:       return;
1:     }
1:     initialized = true;
1:     basisMatrix = RandomProjector.generateBasisNormal(numProjections, numDimensions);
1:     scalarProjections = Lists.newArrayList();
1:     for (int i = 0; i < numProjections; ++i) {
1:       scalarProjections.add(TreeMultiset.<WeightedThing<Vector>>create());
1:     }
1:   }
1: 
1:   public ProjectionSearch(DistanceMeasure distanceMeasure, int numProjections,  int searchSize) {
1:     super(distanceMeasure);
1:     Preconditions.checkArgument(numProjections > 0 && numProjections < 100,
0:         "Unreasonable value for number of projections");
1: 
1:     this.searchSize = searchSize;
1:     this.numProjections = numProjections;
1:   }
1: 
1:   /**
1:    * Adds a WeightedVector into the set of projections for later searching.
1:    * @param vector  The WeightedVector to add.
1:    */
1:   @Override
1:   public void add(Vector vector) {
1:     initialize(vector.size());
1:     Vector projection = basisMatrix.times(vector);
1:     // Add the the new vector and the projected distance to each set separately.
1:     int i = 0;
1:     for (TreeMultiset<WeightedThing<Vector>> s : scalarProjections) {
0:       s.add(new WeightedThing<Vector>(vector, projection.get(i++)));
1:     }
1:     int numVectors = scalarProjections.get(0).size();
1:     for (TreeMultiset<WeightedThing<Vector>> s : scalarProjections) {
0:       Preconditions.checkArgument(s.size() == numVectors, "Number of vectors in projection sets " +
0:           "differ");
1:       double firstWeight = s.firstEntry().getElement().getWeight();
1:       for (WeightedThing<Vector> w : s) {
0:         Preconditions.checkArgument(firstWeight <= w.getWeight(), "Weights not in non-decreasing " +
0:             "order");
1:         firstWeight = w.getWeight();
1:       }
1:     }
1:   }
1: 
1:   /**
1:    * Returns the number of scalarProjections that we can search
1:    * @return  The number of scalarProjections added to the search so far.
1:    */
1:   public int size() {
1:     if (scalarProjections == null) {
1:       return 0;
1:     }
1:     return scalarProjections.get(0).size();
1:   }
1: 
1:   /**
1:    * Searches for the query vector returning the closest limit referenceVectors.
1:    *
1:    * @param query the vector to search for.
1:    * @param limit the number of results to return.
1:    * @return a list of Vectors wrapped in WeightedThings where the "thing"'s weight is the
1:    * distance.
1:    */
0:   public List<WeightedThing<Vector>> search(final Vector query, int limit) {
1:     Set<Vector> candidates = Sets.newHashSet();
1: 
1:     Iterator<? extends Vector> projections = basisMatrix.iterator();
1:     for (TreeMultiset<WeightedThing<Vector>> v : scalarProjections) {
1:       Vector basisVector = projections.next();
0:       WeightedThing<Vector> projectedQuery = new WeightedThing<Vector>(query,
1:           query.dot(basisVector));
1:       for (WeightedThing<Vector> candidate : Iterables.concat(
1:           Iterables.limit(v.tailMultiset(projectedQuery, BoundType.CLOSED), searchSize),
1:           Iterables.limit(v.headMultiset(projectedQuery, BoundType.OPEN).descendingMultiset(), searchSize))) {
1:         candidates.add(candidate.getValue());
1:       }
1:     }
1: 
1:     // If searchSize * scalarProjections.size() is small enough not to cause much memory pressure,
1:     // this is probably just as fast as a priority queue here.
1:     List<WeightedThing<Vector>> top = Lists.newArrayList();
1:     for (Vector candidate : candidates) {
0:       top.add(new WeightedThing<Vector>(candidate, distanceMeasure.distance(query, candidate)));
1:     }
1:     Collections.sort(top);
1:     return top.subList(0, Math.min(limit, top.size()));
1:   }
1: 
1:   /**
1:    * Returns the closest vector to the query.
1:    * When only one the nearest vector is needed, use this method, NOT search(query, limit) because
1:    * it's faster (less overhead).
1:    *
1:    * @param query the vector to search for
1:    * @param differentThanQuery if true, returns the closest vector different than the query (this
1:    *                           only matters if the query is among the searched vectors), otherwise,
1:    *                           returns the closest vector to the query (even the same vector).
1:    * @return the weighted vector closest to the query
1:    */
1:   @Override
1:   public WeightedThing<Vector> searchFirst(Vector query, boolean differentThanQuery) {
1:     double bestDistance = Double.POSITIVE_INFINITY;
1:     Vector bestVector = null;
1: 
1:     Iterator<? extends Vector> projections = basisMatrix.iterator();
1:     for (TreeMultiset<WeightedThing<Vector>> v : scalarProjections) {
1:       Vector basisVector = projections.next();
0:       WeightedThing<Vector> projectedQuery = new WeightedThing<Vector>(query, query.dot(basisVector));
1:       for (WeightedThing<Vector> candidate : Iterables.concat(
1:           Iterables.limit(v.tailMultiset(projectedQuery, BoundType.CLOSED), searchSize),
1:           Iterables.limit(v.headMultiset(projectedQuery, BoundType.OPEN).descendingMultiset(), searchSize))) {
1:         double distance = distanceMeasure.distance(query, candidate.getValue());
1:         if (distance < bestDistance && (!differentThanQuery || !candidate.getValue().equals(query))) {
1:           bestDistance = distance;
1:           bestVector = candidate.getValue();
1:         }
1:       }
1:     }
1: 
0:     return new WeightedThing<Vector>(bestVector, bestDistance);
1:   }
1: 
1:   @Override
1:   public Iterator<Vector> iterator() {
1:     return new AbstractIterator<Vector>() {
0:       private Iterator<WeightedThing<Vector>> projected = scalarProjections.get(0).iterator();
1:       @Override
1:       protected Vector computeNext() {
1:         if (!projected.hasNext()) {
1:           return endOfData();
1:         }
1:         return projected.next().getValue();
1:       }
1:     };
1:   }
1: 
1:   public boolean remove(Vector vector, double epsilon) {
1:     WeightedThing<Vector> toRemove = searchFirst(vector, false);
1:     if (toRemove.getWeight() < epsilon) {
1:       Iterator<? extends Vector> basisVectors = basisMatrix.iterator();
1:       for (TreeMultiset<WeightedThing<Vector>> projection : scalarProjections) {
0:         if (!projection.remove(new WeightedThing<Vector>(vector, vector.dot(basisVectors.next())))) {
1:           throw new RuntimeException("Internal inconsistency in ProjectionSearch");
1:         }
1:       }
1:       return true;
1:     } else {
1:       return false;
1:     }
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     if (scalarProjections == null) {
1:       return;
1:     }
1:     for (TreeMultiset<WeightedThing<Vector>> set : scalarProjections) {
1:       set.clear();
1:     }
1:   }
1: }
============================================================================