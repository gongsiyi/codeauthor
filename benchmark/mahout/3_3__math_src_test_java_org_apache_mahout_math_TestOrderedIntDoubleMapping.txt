1:40aa3e8: /**
1:40aa3e8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:40aa3e8:  * contributor license agreements.  See the NOTICE file distributed with
1:40aa3e8:  * this work for additional information regarding copyright ownership.
1:40aa3e8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:40aa3e8:  * (the "License"); you may not use this file except in compliance with
1:40aa3e8:  * the License.  You may obtain a copy of the License at
1:40aa3e8:  *
1:40aa3e8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:40aa3e8:  *
1:40aa3e8:  * Unless required by applicable law or agreed to in writing, software
1:40aa3e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:40aa3e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40aa3e8:  * See the License for the specific language governing permissions and
1:40aa3e8:  * limitations under the License.
1:40aa3e8:  */
1:40aa3e8: 
1:a435efb: package org.apache.mahout.math;
1:40aa3e8: 
1:ff79ff4: import org.junit.Test;
1:40aa3e8: 
1:ff79ff4: public final class TestOrderedIntDoubleMapping extends MahoutTestCase {
1:ff79ff4: 
1:ff79ff4:   @Test
1:40aa3e8:   public void testGetSet() {
1:40aa3e8: 
1:40aa3e8:     OrderedIntDoubleMapping mapping = new OrderedIntDoubleMapping(1);
1:40aa3e8: 
1:40aa3e8:     assertEquals(0, mapping.getNumMappings());
1:ff79ff4:     assertEquals(0.0, mapping.get(0), EPSILON);
1:ff79ff4:     assertEquals(0.0, mapping.get(1), EPSILON);
1:40aa3e8: 
1:40aa3e8:     mapping.set(0, 1.1);
1:40aa3e8:     assertEquals(1, mapping.getNumMappings());
1:ff79ff4:     assertEquals(1.1, mapping.get(0), EPSILON);
1:ff79ff4:     assertEquals(0.0, mapping.get(1), EPSILON);
1:40aa3e8: 
1:40aa3e8:     mapping.set(5, 6.6);
1:40aa3e8:     assertEquals(2, mapping.getNumMappings());
1:ff79ff4:     assertEquals(1.1, mapping.get(0), EPSILON);
1:ff79ff4:     assertEquals(0.0, mapping.get(1), EPSILON);
1:ff79ff4:     assertEquals(6.6, mapping.get(5), EPSILON);
1:ff79ff4:     assertEquals(0.0, mapping.get(6), EPSILON);
1:40aa3e8: 
1:40aa3e8:     mapping.set(0, 0.0);
1:40aa3e8:     assertEquals(1, mapping.getNumMappings());
1:ff79ff4:     assertEquals(0.0, mapping.get(0), EPSILON);
1:ff79ff4:     assertEquals(0.0, mapping.get(1), EPSILON);
1:ff79ff4:     assertEquals(6.6, mapping.get(5), EPSILON);
1:40aa3e8: 
1:40aa3e8:     mapping.set(5, 0.0);
1:40aa3e8:     assertEquals(0, mapping.getNumMappings());
1:ff79ff4:     assertEquals(0.0, mapping.get(0), EPSILON);
1:ff79ff4:     assertEquals(0.0, mapping.get(1), EPSILON);
1:ff79ff4:     assertEquals(0.0, mapping.get(5), EPSILON);
1:40aa3e8:   }
1:40aa3e8: 
1:ff79ff4:   @Test
1:11a21dc:   public void testClone() throws Exception {
1:11a21dc:     OrderedIntDoubleMapping mapping = new OrderedIntDoubleMapping(1);
1:11a21dc:     mapping.set(0, 1.1);
1:11a21dc:     mapping.set(5, 6.6);
1:254af09:     OrderedIntDoubleMapping clone = mapping.clone();
1:11a21dc:     assertEquals(2, clone.getNumMappings());
1:ff79ff4:     assertEquals(1.1, clone.get(0), EPSILON);
1:ff79ff4:     assertEquals(0.0, clone.get(1), EPSILON);
1:ff79ff4:     assertEquals(6.6, clone.get(5), EPSILON);
1:ff79ff4:     assertEquals(0.0, clone.get(6), EPSILON);
1:40aa3e8:   }
1:40aa3e8: 
1:a23d87a:   @Test
1:a23d87a:   public void testAddDefaultElements() {
1:a23d87a:     OrderedIntDoubleMapping mapping = new OrderedIntDoubleMapping(false);
1:a23d87a:     mapping.set(1, 1.1);
1:a23d87a:     assertEquals(1, mapping.getNumMappings());
1:a23d87a:     mapping.set(2, 0);
1:a23d87a:     assertEquals(2, mapping.getNumMappings());
1:a23d87a:     mapping.set(0, 0);
1:a23d87a:     assertEquals(3, mapping.getNumMappings());
1:a23d87a:   }
1:a23d87a: 
1:a23d87a:   @Test
1:a23d87a:   public void testMerge() {
1:a23d87a:     OrderedIntDoubleMapping mappingOne = new OrderedIntDoubleMapping(false);
1:a23d87a:     mappingOne.set(0, 0);
1:a23d87a:     mappingOne.set(2, 2);
1:a23d87a:     mappingOne.set(4, 4);
1:a23d87a:     mappingOne.set(10, 10);
1:a23d87a: 
1:a23d87a:     OrderedIntDoubleMapping mappingTwo = new OrderedIntDoubleMapping();
1:a23d87a:     mappingTwo.set(1, 1);
1:a23d87a:     mappingTwo.set(3, 3);
1:a23d87a:     mappingTwo.set(5, 5);
1:a23d87a:     mappingTwo.set(10, 20);
1:a23d87a: 
1:a23d87a:     mappingOne.merge(mappingTwo);
1:a23d87a: 
1:a23d87a:     assertEquals(7, mappingOne.getNumMappings());
1:a23d87a:     for (int i = 0; i < 6; ++i) {
1:a23d87a:       assertEquals(i, mappingOne.get(i), i);
1:a23d87a:     }
1:a23d87a:     assertEquals(20, mappingOne.get(10), 0);
1:a23d87a:   }
1:11a21dc: }
============================================================================
author:dfilimon
-------------------------------------------------------------------------------
commit:a23d87a
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testAddDefaultElements() {
1:     OrderedIntDoubleMapping mapping = new OrderedIntDoubleMapping(false);
1:     mapping.set(1, 1.1);
1:     assertEquals(1, mapping.getNumMappings());
1:     mapping.set(2, 0);
1:     assertEquals(2, mapping.getNumMappings());
1:     mapping.set(0, 0);
1:     assertEquals(3, mapping.getNumMappings());
1:   }
1: 
1:   @Test
1:   public void testMerge() {
1:     OrderedIntDoubleMapping mappingOne = new OrderedIntDoubleMapping(false);
1:     mappingOne.set(0, 0);
1:     mappingOne.set(2, 2);
1:     mappingOne.set(4, 4);
1:     mappingOne.set(10, 10);
1: 
1:     OrderedIntDoubleMapping mappingTwo = new OrderedIntDoubleMapping();
1:     mappingTwo.set(1, 1);
1:     mappingTwo.set(3, 3);
1:     mappingTwo.set(5, 5);
1:     mappingTwo.set(10, 20);
1: 
1:     mappingOne.merge(mappingTwo);
1: 
1:     assertEquals(7, mappingOne.getNumMappings());
1:     for (int i = 0; i < 6; ++i) {
1:       assertEquals(i, mappingOne.get(i), i);
1:     }
1:     assertEquals(20, mappingOne.get(10), 0);
1:   }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: public final class TestOrderedIntDoubleMapping extends MahoutTestCase {
1: 
1:   @Test
1:     assertEquals(0.0, mapping.get(0), EPSILON);
1:     assertEquals(0.0, mapping.get(1), EPSILON);
1:     assertEquals(1.1, mapping.get(0), EPSILON);
1:     assertEquals(0.0, mapping.get(1), EPSILON);
1:     assertEquals(1.1, mapping.get(0), EPSILON);
1:     assertEquals(0.0, mapping.get(1), EPSILON);
1:     assertEquals(6.6, mapping.get(5), EPSILON);
1:     assertEquals(0.0, mapping.get(6), EPSILON);
1:     assertEquals(0.0, mapping.get(0), EPSILON);
1:     assertEquals(0.0, mapping.get(1), EPSILON);
1:     assertEquals(6.6, mapping.get(5), EPSILON);
1:     assertEquals(0.0, mapping.get(0), EPSILON);
1:     assertEquals(0.0, mapping.get(1), EPSILON);
1:     assertEquals(0.0, mapping.get(5), EPSILON);
1:   @Test
1:     assertEquals(1.1, clone.get(0), EPSILON);
1:     assertEquals(0.0, clone.get(1), EPSILON);
1:     assertEquals(6.6, clone.get(5), EPSILON);
1:     assertEquals(0.0, clone.get(6), EPSILON);
commit:16937e1
commit:434cdff
/////////////////////////////////////////////////////////////////////////
commit:254af09
/////////////////////////////////////////////////////////////////////////
1:     OrderedIntDoubleMapping clone = mapping.clone();
commit:40aa3e8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.matrix;
1: 
0: import junit.framework.TestCase;
1: 
0: public class TestOrderedIntDoubleMapping extends TestCase {
1: 
1:   public void testGetSet() {
1: 
1:     OrderedIntDoubleMapping mapping = new OrderedIntDoubleMapping(1);
1: 
1:     assertEquals(0, mapping.getNumMappings());
0:     assertEquals(0.0, mapping.get(0));
0:     assertEquals(0.0, mapping.get(1));
1: 
1:     mapping.set(0, 1.1);
1:     assertEquals(1, mapping.getNumMappings());
0:     assertEquals(1.1, mapping.get(0));
0:     assertEquals(0.0, mapping.get(1));
1: 
1:     mapping.set(5, 6.6);
1:     assertEquals(2, mapping.getNumMappings());
0:     assertEquals(1.1, mapping.get(0));
0:     assertEquals(0.0, mapping.get(1));
0:     assertEquals(6.6, mapping.get(5));
0:     assertEquals(0.0, mapping.get(6));
1: 
1:     mapping.set(0, 0.0);
1:     assertEquals(1, mapping.getNumMappings());
0:     assertEquals(0.0, mapping.get(0));
0:     assertEquals(0.0, mapping.get(1));
0:     assertEquals(6.6, mapping.get(5));
1: 
1:     mapping.set(5, 0.0);
1:     assertEquals(0, mapping.getNumMappings());
0:     assertEquals(0.0, mapping.get(0));
0:     assertEquals(0.0, mapping.get(1));
0:     assertEquals(0.0, mapping.get(5));
1:   }
1: 
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:a435efb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
0: 
0: import org.apache.mahout.math.OrderedIntDoubleMapping;
commit:bd5593f
commit:11a21dc
/////////////////////////////////////////////////////////////////////////
1:   public void testClone() throws Exception {
1:     OrderedIntDoubleMapping mapping = new OrderedIntDoubleMapping(1);
1:     mapping.set(0, 1.1);
1:     mapping.set(5, 6.6);
0:     OrderedIntDoubleMapping clone = (OrderedIntDoubleMapping) mapping.clone();
1:     assertEquals(2, clone.getNumMappings());
0:     assertEquals(1.1, clone.get(0));
0:     assertEquals(0.0, clone.get(1));
0:     assertEquals(6.6, clone.get(5));
0:     assertEquals(0.0, clone.get(6));
1:   }
0: 
============================================================================