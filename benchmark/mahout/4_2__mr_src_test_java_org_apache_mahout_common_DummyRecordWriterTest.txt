1:125d2e3: /*
1:125d2e3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:125d2e3:  * contributor license agreements.  See the NOTICE file distributed with
1:125d2e3:  * this work for additional information regarding copyright ownership.
1:125d2e3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:125d2e3:  * (the "License"); you may not use this file except in compliance with
1:125d2e3:  * the License.  You may obtain a copy of the License at
1:125d2e3:  *
1:125d2e3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:125d2e3:  *
1:125d2e3:  * Unless required by applicable law or agreed to in writing, software
1:125d2e3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:125d2e3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:125d2e3:  * See the License for the specific language governing permissions and
1:125d2e3:  * limitations under the License.
1:125d2e3:  */
1:125d2e3: 
1:125d2e3: package org.apache.mahout.common;
1:125d2e3: 
1:125d2e3: import org.apache.hadoop.io.IntWritable;
1:125d2e3: import org.apache.mahout.math.DenseVector;
1:125d2e3: import org.apache.mahout.math.VectorWritable;
1:125d2e3: import org.junit.Assert;
1:125d2e3: import org.junit.Test;
1:125d2e3: 
1:125d2e3: public class DummyRecordWriterTest {
1:125d2e3: 
1:125d2e3:   @Test
1:125d2e3:   public void testWrite() {
1:125d2e3:     DummyRecordWriter<IntWritable, VectorWritable> writer = 
1:02ff22f:         new DummyRecordWriter<>();
1:125d2e3:     IntWritable reusableIntWritable = new IntWritable();
1:125d2e3:     VectorWritable reusableVectorWritable = new VectorWritable();
1:125d2e3:     reusableIntWritable.set(0);
1:125d2e3:     reusableVectorWritable.set(new DenseVector(new double[] { 1, 2, 3 }));
1:125d2e3:     writer.write(reusableIntWritable, reusableVectorWritable);
1:125d2e3:     reusableIntWritable.set(1);
1:125d2e3:     reusableVectorWritable.set(new DenseVector(new double[] { 4, 5, 6 }));
1:125d2e3:     writer.write(reusableIntWritable, reusableVectorWritable);
1:125d2e3: 
1:125d2e3:     Assert.assertEquals(
1:125d2e3:         "The writer must remember the two keys that is written to it", 2,
1:125d2e3:         writer.getKeys().size());
1:125d2e3:   }
1:125d2e3: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:         new DummyRecordWriter<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:125d2e3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common;
1: 
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class DummyRecordWriterTest {
1: 
1:   @Test
1:   public void testWrite() {
1:     DummyRecordWriter<IntWritable, VectorWritable> writer = 
0:         new DummyRecordWriter<IntWritable, VectorWritable>();
1:     IntWritable reusableIntWritable = new IntWritable();
1:     VectorWritable reusableVectorWritable = new VectorWritable();
1:     reusableIntWritable.set(0);
1:     reusableVectorWritable.set(new DenseVector(new double[] { 1, 2, 3 }));
1:     writer.write(reusableIntWritable, reusableVectorWritable);
1:     reusableIntWritable.set(1);
1:     reusableVectorWritable.set(new DenseVector(new double[] { 4, 5, 6 }));
1:     writer.write(reusableIntWritable, reusableVectorWritable);
1: 
1:     Assert.assertEquals(
1:         "The writer must remember the two keys that is written to it", 2,
1:         writer.getKeys().size());
1:   }
1: }
============================================================================