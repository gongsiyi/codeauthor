1:8974838: /**
1:8974838:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8974838:  * contributor license agreements.  See the NOTICE file distributed with
1:8974838:  * this work for additional information regarding copyright ownership.
1:8974838:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8974838:  * (the "License"); you may not use this file except in compliance with
1:8974838:  * the License.  You may obtain a copy of the License at
2:8974838:  *
1:8974838:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8974838:  *
1:8974838:  * Unless required by applicable law or agreed to in writing, software
1:8974838:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8974838:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8974838:  * See the License for the specific language governing permissions and
1:8974838:  * limitations under the License.
1:8974838:  */
2:8974838: 
1:8974838: package org.apache.mahout.cf.taste.impl.model.jdbc;
1:8974838: 
1:8974838: import com.google.common.base.Preconditions;
1:8974838: import org.apache.mahout.cf.taste.common.TasteException;
1:8974838: import org.apache.mahout.common.IOUtils;
1:8974838: import org.slf4j.Logger;
1:8974838: import org.slf4j.LoggerFactory;
1:8974838: 
1:8974838: import javax.sql.DataSource;
1:8974838: import java.sql.Connection;
1:8974838: import java.sql.PreparedStatement;
1:8974838: import java.sql.SQLException;
1:8974838: 
1:8974838: /**
1:8974838:  * <p>
1:8974838:  * A {@link org.apache.mahout.cf.taste.model.JDBCDataModel} backed by a PostgreSQL database and
1:8974838:  * accessed via JDBC. It may work with other JDBC databases. By default, this class
1:8974838:  * assumes that there is a {@link javax.sql.DataSource} available under the JNDI name
1:8974838:  * "jdbc/taste", which gives access to a database with a "taste_preferences" table with the following schema:
1:8974838:  * </p>
1:8974838:  *
1:8974838:  * <p>
1:8974838:  *
1:8974838:  * <pre>
1:8974838:  * CREATE TABLE taste_preferences (
1:8974838:  *   user_id BIGINT NOT NULL,
1:8974838:  *   item_id BIGINT NOT NULL,
1:8974838:  *   preference REAL NOT NULL,
1:8974838:  *   PRIMARY KEY (user_id, item_id)
1:8974838:  * )
1:8974838:  * CREATE INDEX taste_preferences_user_id_index ON taste_preferences (user_id);
1:8974838:  * CREATE INDEX taste_preferences_item_id_index ON taste_preferences (item_id);
1:8974838:  * </pre>
1:8974838:  *
1:8974838:  * </p>
1:8974838:  *
1:507af7a:  * @see PostgreSQLJDBCDataModel
1:8974838:  */
1:507af7a: public class PostgreSQLJDBCDataModel extends SQL92JDBCDataModel {
1:8974838: 
1:8974838:   private static final Logger log = LoggerFactory.getLogger(PostgreSQLJDBCDataModel.class);
1:8974838: 
1:507af7a:   private static final String POSTGRESQL_DUPLICATE_KEY_STATE = "23505"; // this is brittle...
1:8974838: 
1:8974838:   /**
1:8974838:    * <p>
1:8974838:    * Creates a  using the default {@link javax.sql.DataSource} (named
1:8974838:    * {@link #DEFAULT_DATASOURCE_NAME} and default table/column names.
1:8974838:    * </p>
1:8974838:    *
1:8974838:    * @throws org.apache.mahout.cf.taste.common.TasteException
1:507af7a:    *          if {@link javax.sql.DataSource} can't be found
1:8974838:    */
1:8974838:   public PostgreSQLJDBCDataModel() throws TasteException {
1:8974838:   }
1:8974838: 
1:8974838:   /**
1:8974838:    * <p>
1:8974838:    * Creates a  using the default {@link javax.sql.DataSource} found under the given name, and
1:8974838:    * using default table/column names.
1:8974838:    * </p>
1:8974838:    *
1:507af7a:    * @param dataSourceName name of {@link javax.sql.DataSource} to look up
1:8974838:    * @throws org.apache.mahout.cf.taste.common.TasteException
1:507af7a:    *          if {@link javax.sql.DataSource} can't be found
1:8974838:    */
1:8974838:   public PostgreSQLJDBCDataModel(String dataSourceName) throws TasteException {
1:507af7a:     super(dataSourceName);
1:8974838:   }
1:8974838: 
1:8974838:   /**
1:8974838:    * <p>
1:8974838:    * Creates a  using the given {@link javax.sql.DataSource} and default table/column names.
1:8974838:    * </p>
1:8974838:    *
1:507af7a:    * @param dataSource {@link javax.sql.DataSource} to use
1:8974838:    */
1:8974838:   public PostgreSQLJDBCDataModel(DataSource dataSource) {
1:507af7a:     super(dataSource);
1:8974838:   }
1:8974838: 
1:8974838:   /**
1:8974838:    * <p>
1:8974838:    * Creates a  using the given {@link javax.sql.DataSource} and default table/column names.
1:8974838:    * </p>
1:8974838:    *
1:507af7a:    * @param dataSource       {@link javax.sql.DataSource} to use
1:507af7a:    * @param preferenceTable  name of table containing preference data
1:507af7a:    * @param userIDColumn     user ID column name
1:507af7a:    * @param itemIDColumn     item ID column name
1:507af7a:    * @param preferenceColumn preference column name
1:507af7a:    * @param timestampColumn  timestamp column name (may be null)
1:8974838:    */
1:8974838:   public PostgreSQLJDBCDataModel(DataSource dataSource,
1:8974838:                                  String preferenceTable,
1:8974838:                                  String userIDColumn,
1:8974838:                                  String itemIDColumn,
1:8974838:                                  String preferenceColumn,
1:8974838:                                  String timestampColumn) {
1:507af7a:     super(dataSource, preferenceTable, userIDColumn, itemIDColumn, preferenceColumn, timestampColumn);
1:8974838:   }
1:8974838: 
1:8974838:   /**
1:8974838:    * Override since PostgreSQL doesn't have the same non-standard capability that MySQL has, to optionally
1:8974838:    * insert or update in one statement.
1:8974838:    */
1:8974838:   @Override
1:8974838:   public void setPreference(long userID, long itemID, float value) throws TasteException {
1:a25bab2:     Preconditions.checkArgument(!Float.isNaN(value), "NaN value");
1:8974838: 
1:8974838:     log.debug("Setting preference for user {}, item {}", userID, itemID);
1:8974838: 
1:8974838:     String setPreferenceSQL = getSetPreferenceSQL();
1:8974838: 
1:8974838:     Connection conn = null;
1:8974838:     PreparedStatement stmt1 = null;
1:8974838:     PreparedStatement stmt2 = null;
1:8974838:     try {
1:8974838:       conn = getDataSource().getConnection();
1:8974838: 
1:8974838:       stmt1 = conn.prepareStatement(setPreferenceSQL);
1:8974838:       setLongParameter(stmt1, 1, userID);
1:8974838:       setLongParameter(stmt1, 2, itemID);
1:8974838:       stmt1.setDouble(3, value);
1:8974838: 
1:8974838:       log.debug("Executing SQL update: {}", setPreferenceSQL);
1:8974838:       try {
1:d61a0ee:         stmt1.executeUpdate();
1:8974838:       } catch (SQLException sqle) {
1:8974838:         if (!POSTGRESQL_DUPLICATE_KEY_STATE.equals(sqle.getSQLState())) {
1:8974838:           throw sqle;
1:8974838:         }
1:8974838:       }
1:8974838: 
1:8974838:       // Continue with update; just found the key already exists
1:8974838: 
1:507af7a:       stmt2 = conn.prepareStatement(getUpdatePreferenceSQL());
1:8974838:       stmt2.setDouble(1, value);
1:8974838:       setLongParameter(stmt2, 2, userID);
1:8974838:       setLongParameter(stmt2, 3, itemID);
1:8974838: 
1:507af7a:       log.debug("Executing SQL update: {}", getUpdatePreferenceSQL());
1:8974838:       stmt2.executeUpdate();
1:8974838: 
1:8974838:     } catch (SQLException sqle) {
1:8974838:       log.warn("Exception while setting preference", sqle);
1:8974838:       throw new TasteException(sqle);
1:8974838:     } finally {
1:8974838:       IOUtils.quietClose(null, stmt1, null);
1:8974838:       IOUtils.quietClose(null, stmt2, null);
1:8974838:       IOUtils.quietClose(null, null, conn);
1:8974838:     }
1:8974838:   }
1:8974838:   
1:8974838: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:507af7a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * @see PostgreSQLJDBCDataModel
1: public class PostgreSQLJDBCDataModel extends SQL92JDBCDataModel {
1:   private static final String POSTGRESQL_DUPLICATE_KEY_STATE = "23505"; // this is brittle...
/////////////////////////////////////////////////////////////////////////
1:    *          if {@link javax.sql.DataSource} can't be found
/////////////////////////////////////////////////////////////////////////
1:    * @param dataSourceName name of {@link javax.sql.DataSource} to look up
1:    *          if {@link javax.sql.DataSource} can't be found
1:     super(dataSourceName);
/////////////////////////////////////////////////////////////////////////
1:    * @param dataSource {@link javax.sql.DataSource} to use
1:     super(dataSource);
/////////////////////////////////////////////////////////////////////////
1:    * @param dataSource       {@link javax.sql.DataSource} to use
1:    * @param preferenceTable  name of table containing preference data
1:    * @param userIDColumn     user ID column name
1:    * @param itemIDColumn     item ID column name
1:    * @param preferenceColumn preference column name
1:    * @param timestampColumn  timestamp column name (may be null)
/////////////////////////////////////////////////////////////////////////
1:     super(dataSource, preferenceTable, userIDColumn, itemIDColumn, preferenceColumn, timestampColumn);
/////////////////////////////////////////////////////////////////////////
1:       stmt2 = conn.prepareStatement(getUpdatePreferenceSQL());
1:       log.debug("Executing SQL update: {}", getUpdatePreferenceSQL());
commit:50fd693
commit:a25bab2
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(!Float.isNaN(value), "NaN value");
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
1:         stmt1.executeUpdate();
commit:8974838
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.model.jdbc;
1: 
1: import com.google.common.base.Preconditions;
1: import org.apache.mahout.cf.taste.common.TasteException;
0: import org.apache.mahout.cf.taste.impl.common.jdbc.AbstractJDBCComponent;
1: import org.apache.mahout.common.IOUtils;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.sql.DataSource;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: 
1: /**
1:  * <p>
1:  * A {@link org.apache.mahout.cf.taste.model.JDBCDataModel} backed by a PostgreSQL database and
1:  * accessed via JDBC. It may work with other JDBC databases. By default, this class
1:  * assumes that there is a {@link javax.sql.DataSource} available under the JNDI name
1:  * "jdbc/taste", which gives access to a database with a "taste_preferences" table with the following schema:
1:  * </p>
1:  *
1:  * <p>
1:  *
1:  * <pre>
1:  * CREATE TABLE taste_preferences (
1:  *   user_id BIGINT NOT NULL,
1:  *   item_id BIGINT NOT NULL,
1:  *   preference REAL NOT NULL,
1:  *   PRIMARY KEY (user_id, item_id)
1:  * )
1:  * CREATE INDEX taste_preferences_user_id_index ON taste_preferences (user_id);
1:  * CREATE INDEX taste_preferences_item_id_index ON taste_preferences (item_id);
1:  * </pre>
1:  *
1:  * </p>
1:  *
0:  * <p>See {@link MySQLJDBCDataModel} which is largely identical.</p>
1:  *
0:  * @see MySQLJDBCDataModel
1:  */
0: public class PostgreSQLJDBCDataModel extends AbstractJDBCDataModel {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(PostgreSQLJDBCDataModel.class);
0:   private static final String POSTGRESQL_DUPLICATE_KEY_STATE = "23505"; // this is brittle...
1: 
0:   private final String updatePreferenceSQL;
1: 
1:   /**
1:    * <p>
1:    * Creates a  using the default {@link javax.sql.DataSource} (named
1:    * {@link #DEFAULT_DATASOURCE_NAME} and default table/column names.
1:    * </p>
1:    *
1:    * @throws org.apache.mahout.cf.taste.common.TasteException
0:    *           if {@link javax.sql.DataSource} can't be found
1:    */
1:   public PostgreSQLJDBCDataModel() throws TasteException {
0:     this(DEFAULT_DATASOURCE_NAME);
1:   }
1: 
1:   /**
1:    * <p>
1:    * Creates a  using the default {@link javax.sql.DataSource} found under the given name, and
1:    * using default table/column names.
1:    * </p>
1:    *
0:    * @param dataSourceName
0:    *          name of {@link javax.sql.DataSource} to look up
1:    * @throws org.apache.mahout.cf.taste.common.TasteException
0:    *           if {@link javax.sql.DataSource} can't be found
1:    */
1:   public PostgreSQLJDBCDataModel(String dataSourceName) throws TasteException {
0:     this(AbstractJDBCComponent.lookupDataSource(dataSourceName),
0:          DEFAULT_PREFERENCE_TABLE,
0:          DEFAULT_USER_ID_COLUMN,
0:          DEFAULT_ITEM_ID_COLUMN,
0:          DEFAULT_PREFERENCE_COLUMN,
0:          DEFAULT_PREFERENCE_TIME_COLUMN);
1:   }
1: 
1:   /**
1:    * <p>
1:    * Creates a  using the given {@link javax.sql.DataSource} and default table/column names.
1:    * </p>
1:    *
0:    * @param dataSource
0:    *          {@link javax.sql.DataSource} to use
1:    */
1:   public PostgreSQLJDBCDataModel(DataSource dataSource) {
0:     this(dataSource,
0:          DEFAULT_PREFERENCE_TABLE,
0:          DEFAULT_USER_ID_COLUMN,
0:          DEFAULT_ITEM_ID_COLUMN,
0:          DEFAULT_PREFERENCE_COLUMN,
0:          DEFAULT_PREFERENCE_TIME_COLUMN);
1:   }
1: 
1:   /**
1:    * <p>
1:    * Creates a  using the given {@link javax.sql.DataSource} and default table/column names.
1:    * </p>
1:    *
0:    * @param dataSource
0:    *          {@link javax.sql.DataSource} to use
0:    * @param preferenceTable
0:    *          name of table containing preference data
0:    * @param userIDColumn
0:    *          user ID column name
0:    * @param itemIDColumn
0:    *          item ID column name
0:    * @param preferenceColumn
0:    *          preference column name
0:    * @param timestampColumn timestamp column name (may be null)
1:    */
1:   public PostgreSQLJDBCDataModel(DataSource dataSource,
1:                                  String preferenceTable,
1:                                  String userIDColumn,
1:                                  String itemIDColumn,
1:                                  String preferenceColumn,
1:                                  String timestampColumn) {
0:     super(dataSource, preferenceTable, userIDColumn, itemIDColumn, preferenceColumn,
0:         // getPreferenceSQL
0:         "SELECT " + preferenceColumn + " FROM " + preferenceTable + " WHERE " + userIDColumn + "=? AND "
0:             + itemIDColumn + "=?",
0:         // getPreferenceTimeSQL
0:         "SELECT " + timestampColumn + " FROM " + preferenceTable + " WHERE " + userIDColumn + "=? AND "
0:             + itemIDColumn + "=?",
0:         // getUserSQL
0:         "SELECT DISTINCT " + userIDColumn + ", " + itemIDColumn + ", " + preferenceColumn + " FROM " + preferenceTable
0:             + " WHERE " + userIDColumn + "=? ORDER BY " + itemIDColumn,
0:         // getAllUsersSQL
0:         "SELECT DISTINCT " + userIDColumn + ", " + itemIDColumn + ", " + preferenceColumn + " FROM " + preferenceTable
0:             + " ORDER BY " + userIDColumn + ", " + itemIDColumn,
0:         // getNumItemsSQL
0:         "SELECT COUNT(DISTINCT " + itemIDColumn + ") FROM " + preferenceTable,
0:         // getNumUsersSQL
0:         "SELECT COUNT(DISTINCT " + userIDColumn + ") FROM " + preferenceTable,
0:         // setPreferenceSQL
0:         "INSERT INTO " + preferenceTable + '(' + userIDColumn + ',' + itemIDColumn + ',' + preferenceColumn
0:             + ") VALUES (?,?,?)",
0:         // removePreference SQL
0:         "DELETE FROM " + preferenceTable + " WHERE " + userIDColumn + "=? AND " + itemIDColumn + "=?",
0:         // getUsersSQL
0:         "SELECT DISTINCT " + userIDColumn + " FROM " + preferenceTable + " ORDER BY " + userIDColumn,
0:         // getItemsSQL
0:         "SELECT DISTINCT " + itemIDColumn + " FROM " + preferenceTable + " ORDER BY " + itemIDColumn,
0:         // getPrefsForItemSQL
0:         "SELECT DISTINCT " + userIDColumn + ", " + itemIDColumn + ", " + preferenceColumn + " FROM " + preferenceTable
0:             + " WHERE " + itemIDColumn + "=? ORDER BY " + userIDColumn,
0:         // getNumPreferenceForItemSQL
0:         "SELECT COUNT(1) FROM " + preferenceTable + " WHERE " + itemIDColumn + "=?",
0:         // getNumPreferenceForItemsSQL
0:         "SELECT COUNT(1) FROM " + preferenceTable + " tp1 JOIN " + preferenceTable + " tp2 " + "USING ("
0:             + userIDColumn + ") WHERE tp1." + itemIDColumn + "=? and tp2." + itemIDColumn + "=?",
0:         "SELECT MAX(" + preferenceColumn + ") FROM " + preferenceTable,
0:         "SELECT MIN(" + preferenceColumn + ") FROM " + preferenceTable);
1: 
0:     updatePreferenceSQL = "UPDATE " + preferenceTable + " SET " + preferenceColumn + "=? WHERE " + userIDColumn
0:         + "=? AND " + itemIDColumn + "=?";
1:   }
1: 
1:   /**
1:    * Override since PostgreSQL doesn't have the same non-standard capability that MySQL has, to optionally
1:    * insert or update in one statement.
1:    */
1:   @Override
1:   public void setPreference(long userID, long itemID, float value) throws TasteException {
0:     Preconditions.checkArgument(!Float.isNaN(value), "Invalid value: " + value);
1: 
1:     log.debug("Setting preference for user {}, item {}", userID, itemID);
1: 
1:     String setPreferenceSQL = getSetPreferenceSQL();
1: 
1:     Connection conn = null;
1:     PreparedStatement stmt1 = null;
1:     PreparedStatement stmt2 = null;
1:     try {
1:       conn = getDataSource().getConnection();
1: 
1:       stmt1 = conn.prepareStatement(setPreferenceSQL);
1:       setLongParameter(stmt1, 1, userID);
1:       setLongParameter(stmt1, 2, itemID);
1:       stmt1.setDouble(3, value);
1: 
1:       log.debug("Executing SQL update: {}", setPreferenceSQL);
1:       try {
0:       stmt1.executeUpdate();
1:       } catch (SQLException sqle) {
1:         if (!POSTGRESQL_DUPLICATE_KEY_STATE.equals(sqle.getSQLState())) {
1:           throw sqle;
1:         }
1:       }
1: 
1:       // Continue with update; just found the key already exists
1: 
0:       stmt2 = conn.prepareStatement(updatePreferenceSQL);
1:       stmt2.setDouble(1, value);
1:       setLongParameter(stmt2, 2, userID);
1:       setLongParameter(stmt2, 3, itemID);
1: 
0:       log.debug("Executing SQL update: {}", updatePreferenceSQL);
1:       stmt2.executeUpdate();
1: 
1:     } catch (SQLException sqle) {
1:       log.warn("Exception while setting preference", sqle);
1:       throw new TasteException(sqle);
1:     } finally {
1:       IOUtils.quietClose(null, stmt1, null);
1:       IOUtils.quietClose(null, stmt2, null);
1:       IOUtils.quietClose(null, null, conn);
1:     }
1:   }
1:   
1: }
============================================================================