1:1d6dc49: /**
1:1d6dc49:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1d6dc49:  * contributor license agreements.  See the NOTICE file distributed with
1:1d6dc49:  * this work for additional information regarding copyright ownership.
1:1d6dc49:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1d6dc49:  * (the "License"); you may not use this file except in compliance with
1:1d6dc49:  * the License.  You may obtain a copy of the License at
1:1d6dc49:  *
1:1d6dc49:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1d6dc49:  *
1:1d6dc49:  * Unless required by applicable law or agreed to in writing, software
1:1d6dc49:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1d6dc49:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1d6dc49:  * See the License for the specific language governing permissions and
1:1d6dc49:  * limitations under the License.
1:1d6dc49:  */
1:1d6dc49: 
1:1d6dc49: package org.apache.mahout.clustering.streaming.mapreduce;
1:1d6dc49: 
1:1d6dc49: import org.apache.hadoop.io.Writable;
1:1d6dc49: import org.apache.mahout.math.Centroid;
1:1d6dc49: import org.apache.mahout.math.Vector;
1:1d6dc49: import org.apache.mahout.math.VectorWritable;
1:1d6dc49: 
1:1d6dc49: import java.io.DataInput;
1:1d6dc49: import java.io.DataOutput;
1:1d6dc49: import java.io.IOException;
1:1d6dc49: 
1:1d6dc49: public class CentroidWritable implements Writable {
1:1d6dc49:   private Centroid centroid = null;
1:1d6dc49: 
1:1d6dc49:   public CentroidWritable() {}
1:1d6dc49: 
1:1d6dc49:   public CentroidWritable(Centroid centroid) {
1:1d6dc49:     this.centroid = centroid;
1:1d6dc49:   }
1:1d6dc49: 
1:1d6dc49:   public Centroid getCentroid() {
1:1d6dc49:     return centroid;
1:1d6dc49:   }
1:1d6dc49: 
1:1d6dc49:   @Override
1:1d6dc49:   public void write(DataOutput dataOutput) throws IOException {
1:1d6dc49:     dataOutput.writeInt(centroid.getIndex());
1:1d6dc49:     dataOutput.writeDouble(centroid.getWeight());
1:1d6dc49:     VectorWritable.writeVector(dataOutput, centroid.getVector());
1:1d6dc49:   }
1:1d6dc49: 
1:1d6dc49:   @Override
1:1d6dc49:   public void readFields(DataInput dataInput) throws IOException {
1:1d6dc49:     if (centroid == null) {
1:1d6dc49:       centroid = read(dataInput);
1:1d6dc49:       return;
1:1d6dc49:     }
1:1d6dc49:     centroid.setIndex(dataInput.readInt());
1:1d6dc49:     centroid.setWeight(dataInput.readDouble());
1:1d6dc49:     centroid.assign(VectorWritable.readVector(dataInput));
1:1d6dc49:   }
1:1d6dc49: 
1:1d6dc49:   public static Centroid read(DataInput dataInput) throws IOException {
1:1d6dc49:     int index = dataInput.readInt();
1:1d6dc49:     double weight = dataInput.readDouble();
1:1d6dc49:     Vector v = VectorWritable.readVector(dataInput);
1:1d6dc49:     return new Centroid(index, v, weight);
1:1d6dc49:   }
1:1d6dc49: 
1:1d6dc49:   @Override
1:1d6dc49:   public boolean equals(Object o) {
1:1d6dc49:     if (this == o) {
1:1d6dc49:       return true;
1:1d6dc49:     }
1:1d6dc49:     if (!(o instanceof CentroidWritable)) {
1:1d6dc49:       return false;
1:1d6dc49:     }
1:1d6dc49:     CentroidWritable writable = (CentroidWritable) o;
1:1d6dc49:     return centroid.equals(writable.centroid);
1:1d6dc49:   }
1:1d6dc49: 
1:1d6dc49:   @Override
1:1d6dc49:   public int hashCode() {
1:1d6dc49:     return centroid.hashCode();
1:1d6dc49:   }
1:1d6dc49: 
1:1d6dc49:   @Override
1:1d6dc49:   public String toString() {
1:1d6dc49:     return centroid.toString();
1:1d6dc49:   }
1:1d6dc49: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:dfilimon
-------------------------------------------------------------------------------
commit:1d6dc49
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.clustering.streaming.mapreduce;
1: 
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.math.Centroid;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: public class CentroidWritable implements Writable {
1:   private Centroid centroid = null;
1: 
1:   public CentroidWritable() {}
1: 
1:   public CentroidWritable(Centroid centroid) {
1:     this.centroid = centroid;
1:   }
1: 
1:   public Centroid getCentroid() {
1:     return centroid;
1:   }
1: 
1:   @Override
1:   public void write(DataOutput dataOutput) throws IOException {
1:     dataOutput.writeInt(centroid.getIndex());
1:     dataOutput.writeDouble(centroid.getWeight());
1:     VectorWritable.writeVector(dataOutput, centroid.getVector());
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput dataInput) throws IOException {
1:     if (centroid == null) {
1:       centroid = read(dataInput);
1:       return;
1:     }
1:     centroid.setIndex(dataInput.readInt());
1:     centroid.setWeight(dataInput.readDouble());
1:     centroid.assign(VectorWritable.readVector(dataInput));
1:   }
1: 
1:   public static Centroid read(DataInput dataInput) throws IOException {
1:     int index = dataInput.readInt();
1:     double weight = dataInput.readDouble();
1:     Vector v = VectorWritable.readVector(dataInput);
1:     return new Centroid(index, v, weight);
1:   }
1: 
1:   @Override
1:   public boolean equals(Object o) {
1:     if (this == o) {
1:       return true;
1:     }
1:     if (!(o instanceof CentroidWritable)) {
1:       return false;
1:     }
1:     CentroidWritable writable = (CentroidWritable) o;
1:     return centroid.equals(writable.centroid);
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return centroid.hashCode();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     return centroid.toString();
1:   }
1: }
============================================================================