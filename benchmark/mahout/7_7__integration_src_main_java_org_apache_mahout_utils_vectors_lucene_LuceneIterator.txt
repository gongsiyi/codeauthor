2:d023fad: /**
1:d023fad:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d023fad:  * contributor license agreements.  See the NOTICE file distributed with
1:d023fad:  * this work for additional information regarding copyright ownership.
1:d023fad:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d023fad:  * (the "License"); you may not use this file except in compliance with
1:d023fad:  * the License.  You may obtain a copy of the License at
1:d023fad:  *
1:d023fad:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d023fad:  *
1:d023fad:  * Unless required by applicable law or agreed to in writing, software
1:d023fad:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d023fad:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d023fad:  * See the License for the specific language governing permissions and
1:d023fad:  * limitations under the License.
1:d023fad:  */
1:a3b9379: 
1:d023fad: package org.apache.mahout.utils.vectors.lucene;
1:a581a13: 
1:85f9ece: import java.io.IOException;
1:85f9ece: import java.util.Set;
1:85f9ece: import java.util.TreeSet;
1:85f9ece: 
1:d023fad: import com.google.common.base.Preconditions;
1:d023fad: import org.apache.lucene.index.IndexReader;
1:6a4942c: import org.apache.mahout.utils.vectors.TermInfo;
1:6a4942c: import org.apache.mahout.vectorizer.Weight;
1:6ad3e13: 
1:d023fad: /**
1:3c22856:  * An {@link java.util.Iterator} over {@link org.apache.mahout.math.Vector}s that uses a Lucene index as the source
1:3c22856:  * for creating the {@link org.apache.mahout.math.Vector}s. The field used to create the vectors currently must have
1:3c22856:  * term vectors stored for it.
1:d023fad:  */
1:10740e3: public class LuceneIterator extends AbstractLuceneIterator {
1:6d16230: 
1:6d16230:   protected final Set<String> idFieldSelector;
1:6d16230:   protected final String idField;
11:d023fad: 
1:10740e3:     /**
1:d023fad:    * Produce a LuceneIterable that can create the Vector plus normalize it.
1:d023fad:    *
1:80366ee:    * @param indexReader {@link IndexReader} to read the documents from.
1:6a4942c:    * @param idField     field containing the id. May be null.
1:6a4942c:    * @param field       field to use for the Vector
1:cd167f9:    * @param termInfo    termInfo
1:fc6c6f3:    * @param weight      weight
1:cd167f9:    * @param normPower   the normalization value. Must be non-negative, or {@link LuceneIterable#NO_NORMALIZING}
1:d023fad:    */
1:cd167f9:   public LuceneIterator(IndexReader indexReader, String idField, String field, TermInfo termInfo, Weight weight,
1:10c535c:                         double normPower) {
1:cd167f9:     this(indexReader, idField, field, termInfo, weight, normPower, 0.0);
1:a3b9379:   }
1:3f2d65a: 
1:a581a13:   /**
1:fc6c6f3:    * @param indexReader {@link IndexReader} to read the documents from.
1:fc6c6f3:    * @param idField    field containing the id. May be null.
1:fc6c6f3:    * @param field      field to use for the Vector
1:cd167f9:    * @param termInfo   termInfo
1:fc6c6f3:    * @param weight     weight
1:cd167f9:    * @param normPower  the normalization value. Must be non-negative, or {@link LuceneIterable#NO_NORMALIZING}
1:a581a13:    * @param maxPercentErrorDocs most documents that will be tolerated without a term freq vector. In [0,1].
1:3c22856:    * @see #LuceneIterator(org.apache.lucene.index.IndexReader, String, String, org.apache.mahout.utils.vectors.TermInfo,
1:3c22856:    * org.apache.mahout.vectorizer.Weight, double)
1:a581a13:    */
1:a581a13:   public LuceneIterator(IndexReader indexReader,
1:a581a13:                         String idField,
1:a581a13:                         String field,
1:cd167f9:                         TermInfo termInfo,
2:6a4942c:                         Weight weight,
1:a581a13:                         double normPower,
1:10c535c:                         double maxPercentErrorDocs) {
1:cd167f9:       super(termInfo, normPower, indexReader, weight, maxPercentErrorDocs, field);
1:10740e3:       // term docs(null) is a better way of iterating all the docs in Lucene
1:d023fad:     Preconditions.checkArgument(normPower == LuceneIterable.NO_NORMALIZING || normPower >= 0,
1:cd167f9:         "normPower must be non-negative or -1, but normPower = " + normPower);
1:cd167f9:     Preconditions.checkArgument(maxPercentErrorDocs >= 0.0 && maxPercentErrorDocs <= 1.0,
1:cd167f9:         "Must be: 0.0 <= maxPercentErrorDocs <= 1.0");
1:10740e3:     this.idField = idField;
1:10740e3:     if (idField != null) {
1:85f9ece:       idFieldSelector = new TreeSet<>();
1:6a4942c:       idFieldSelector.add(idField);
2:a3b9379:     } else {
1:6d16230:       /*The field in the index  containing the index. If null, then the Lucene internal doc id is used
1:6d16230:       which is prone to error if the underlying index changes*/
1:6d16230:       idFieldSelector = null;
1:6d16230:     }
1:a3b9379:   }
1:d023fad: 
1:6d16230:   @Override
1:6d16230:   protected String getVectorName(int documentIndex) throws IOException {
1:6d16230:     String name;
1:6d16230:     if (idField != null) {
1:6d16230:       name = indexReader.document(documentIndex, idFieldSelector).get(idField);
1:6d16230:     } else {
1:6d16230:       name = String.valueOf(documentIndex);
1:10740e3:     }
1:6d16230:     return name;
1:6d16230:   }
2:3f2d65a: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.Set;
1: import java.util.TreeSet;
1: 
/////////////////////////////////////////////////////////////////////////
1:       idFieldSelector = new TreeSet<>();
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
1:    * @param termInfo    termInfo
1:    * @param normPower   the normalization value. Must be non-negative, or {@link LuceneIterable#NO_NORMALIZING}
1:   public LuceneIterator(IndexReader indexReader, String idField, String field, TermInfo termInfo, Weight weight,
1:     this(indexReader, idField, field, termInfo, weight, normPower, 0.0);
1:    * @param termInfo   termInfo
1:    * @param normPower  the normalization value. Must be non-negative, or {@link LuceneIterable#NO_NORMALIZING}
/////////////////////////////////////////////////////////////////////////
1:                         TermInfo termInfo,
1:       super(termInfo, normPower, indexReader, weight, maxPercentErrorDocs, field);
1:         "normPower must be non-negative or -1, but normPower = " + normPower);
1:     Preconditions.checkArgument(maxPercentErrorDocs >= 0.0 && maxPercentErrorDocs <= 1.0,
1:         "Must be: 0.0 <= maxPercentErrorDocs <= 1.0");
0:       idFieldSelector = Sets.newTreeSet();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1: 
1:   protected final Set<String> idFieldSelector;
1:   protected final String idField;
/////////////////////////////////////////////////////////////////////////
0:   public LuceneIterator(IndexReader indexReader, String idField, String field, TermInfo terminfo, Weight weight,
/////////////////////////////////////////////////////////////////////////
1:       /*The field in the index  containing the index. If null, then the Lucene internal doc id is used
1:       which is prone to error if the underlying index changes*/
1:       idFieldSelector = null;
1:     }
1:   @Override
1:   protected String getVectorName(int documentIndex) throws IOException {
1:     String name;
1:     if (idField != null) {
1:       name = indexReader.document(documentIndex, idFieldSelector).get(idField);
1:     } else {
1:       name = String.valueOf(documentIndex);
1:     return name;
1:   }
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1:  * An {@link java.util.Iterator} over {@link org.apache.mahout.math.Vector}s that uses a Lucene index as the source
1:  * for creating the {@link org.apache.mahout.math.Vector}s. The field used to create the vectors currently must have
1:  * term vectors stored for it.
/////////////////////////////////////////////////////////////////////////
1:    * @see #LuceneIterator(org.apache.lucene.index.IndexReader, String, String, org.apache.mahout.utils.vectors.TermInfo,
1:    * org.apache.mahout.vectorizer.Weight, double)
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a3b9379
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.utils.Bump125;
/////////////////////////////////////////////////////////////////////////
1: 
0:   private int numErrorDocs = 0;
0:   private int maxErrorDocs = 0;
0:   private Bump125 bump = new Bump125();
0:   private long nextLogRecord = bump.increment();
0:   private int skippedErrorMessages = 0;
/////////////////////////////////////////////////////////////////////////
0:     this(indexReader, idField, field, mapper, normPower, 0.0);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         numErrorDocs++;
0:         if (numErrorDocs >= maxErrorDocs) {
0:         if (numErrorDocs >= nextLogRecord) {
0:           if (skippedErrorMessages == 0) {
0:             log.warn("{} does not have a term vector for {}", indexReader.document(doc).get(idField), field);
1:           } else {
0:             log.warn("{} documents do not have a term vector for {}", numErrorDocs, field);
1:           }
0:           nextLogRecord = bump.increment();
0:           skippedErrorMessages = 0;
1:         } else {
0:           skippedErrorMessages++;
1:         }
author:Benson Margulies
-------------------------------------------------------------------------------
commit:10740e3
/////////////////////////////////////////////////////////////////////////
1: public class LuceneIterator extends AbstractLuceneIterator {
0:     protected final Set<String> idFieldSelector;
0:     protected final String idField;
1:     /**
/////////////////////////////////////////////////////////////////////////
0:       super(terminfo, normPower, indexReader, weight, maxPercentErrorDocs, field);
1:       // term docs(null) is a better way of iterating all the docs in Lucene
1:     this.idField = idField;
0:                                                           null, then the Lucene
0:                                                           internal doc id is used
0:                                                           which is prone to error
0:                                                           if the underlying index
0:                                                           changes*/
1:       }
0:     @Override
0:     protected String getVectorName(int documentIndex) throws IOException {
0:         String name;
1:         if (idField != null) {
0:             name = indexReader.document(documentIndex, idFieldSelector).get(idField);
0:         } else {
0:             name = String.valueOf(documentIndex);
0:         return name;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
0:   private final Weight weight;
/////////////////////////////////////////////////////////////////////////
1:                         double normPower) {
/////////////////////////////////////////////////////////////////////////
1:                         double maxPercentErrorDocs) {
commit:3f2d65a
/////////////////////////////////////////////////////////////////////////
0:       int doc;
0:       TermFreqVector termFreqVector;
0:       do {
0:         if (!termDocs.next()) {
0:           return endOfData();
1: 
0:         doc = termDocs.doc();
0:         termFreqVector = indexReader.getTermFreqVector(doc, field);
0:         if (termFreqVector == null) {
0:           numErrorDocs++;
0:           if (numErrorDocs >= maxErrorDocs) {
0:             log.error("There are too many documents that do not have a term vector for {}", field);
0:             throw new IllegalStateException("There are too many documents that do not have a term vector for " + field);
0:           if (numErrorDocs >= nextLogRecord) {
0:             if (skippedErrorMessages == 0) {
0:               log.warn("{} does not have a term vector for {}", indexReader.document(doc).get(idField), field);
0:             } else {
0:               log.warn("{} documents do not have a term vector for {}", numErrorDocs, field);
1:             }
0:             nextLogRecord = bump.increment();
0:             skippedErrorMessages = 0;
0:           } else {
0:             skippedErrorMessages++;
1:           }
0:       } while (termFreqVector == null);
commit:50fd693
commit:15712a6
/////////////////////////////////////////////////////////////////////////
0:   private final Bump125 bump = new Bump125();
commit:a581a13
/////////////////////////////////////////////////////////////////////////
0:   private int numErrorDocs;
0:   private int maxErrorDocs;
/////////////////////////////////////////////////////////////////////////
0:     this(indexReader, idField, field, mapper, normPower, 1.0);
0:   }
1: 
1:   /**
0:    * @see #LuceneIterator(IndexReader, String, String, VectorMapper, double)
1:    * @param maxPercentErrorDocs most documents that will be tolerated without a term freq vector. In [0,1].
1:    */
1:   public LuceneIterator(IndexReader indexReader,
1:                         String idField,
1:                         String field,
0:                         VectorMapper mapper,
1:                         double normPower,
0:                         double maxPercentErrorDocs) throws IOException {
0:     Preconditions.checkArgument(maxPercentErrorDocs >= 0.0 && maxPercentErrorDocs <= 1.0);
/////////////////////////////////////////////////////////////////////////
0:     this.maxErrorDocs = (int) (maxPercentErrorDocs * indexReader.numDocs());
0:     this.numErrorDocs = 0;
/////////////////////////////////////////////////////////////////////////
0:         if (++numErrorDocs >= maxErrorDocs) {
0:           log.error("There are too many documents that do not have a term vector for {}", field);
0:           throw new IllegalStateException("There are too many documents that do not have a term vector for " + field);
0:         }
0:         log.warn("{} does not have a term vector for {}", indexReader.document(doc).get(idField), field);
commit:6ad3e13
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:   private static final Logger log = LoggerFactory.getLogger(LuceneIterator.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:         log.warn(indexReader.document(doc).get(idField) + " does not have a term vector for " + field);
0:         computeNext();
commit:80366ee
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.AbstractIterator;
/////////////////////////////////////////////////////////////////////////
0: public final class LuceneIterator extends AbstractIterator<Vector> {
/////////////////////////////////////////////////////////////////////////
1:    * @param indexReader {@link IndexReader} to read the documents from.
/////////////////////////////////////////////////////////////////////////
0:   protected Vector computeNext() {
0:     try {
0:       if (!termDocs.next()) {
0:         return endOfData();
0:       int doc = termDocs.doc();
0:       TermFreqVector termFreqVector = indexReader.getTermFreqVector(doc, field);
0:       if (termFreqVector == null) {
0:         throw new IllegalStateException("Field '" + field + "' does not have term vectors");
0:       }
0:       indexReader.getTermFreqVector(doc, field, mapper);
0:       mapper.setDocumentNumber(doc);
0:       Vector result = mapper.getVector();
0:       if (result == null) {
0:         // TODO is this right? last version would produce null in the iteration in this case, though it
0:         // seems like that may not be desirable
0:         return null;
0:       }
0:       String name;
0:       if (idField != null) {
0:         name = indexReader.document(doc, idFieldSelector).get(idField);
0:       } else {
0:         name = String.valueOf(doc);
0:       }
0:       if (normPower == LuceneIterable.NO_NORMALIZING) {
0:         result = new NamedVector(result, name);
0:       } else {
0:         result = new NamedVector(result.normalize(normPower), name);
0:       }
0:       return result;
0:     } catch (IOException ioe) {
0:       throw new IllegalStateException(ioe);
0:     }
commit:d023fad
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.utils.vectors.lucene;
1: 
0: import java.io.IOException;
0: import java.util.Collections;
0: import java.util.Iterator;
0: import java.util.NoSuchElementException;
1: 
1: import com.google.common.base.Preconditions;
0: import org.apache.lucene.document.FieldSelector;
0: import org.apache.lucene.document.SetBasedFieldSelector;
1: import org.apache.lucene.index.IndexReader;
0: import org.apache.lucene.index.TermDocs;
0: import org.apache.lucene.index.TermFreqVector;
0: import org.apache.mahout.math.NamedVector;
0: import org.apache.mahout.math.Vector;
1: 
1: /**
0:  * An {@link Iterator} over {@link Vector}s that uses a Lucene index as the source for creating the
0:  * {@link Vector}s. The field used to create the vectors currently must have term vectors stored for it.
1:  */
0: public final class LuceneIterator implements Iterator<Vector> {
1: 
0:   private final IndexReader indexReader;
0:   private final String field;
0:   private final String idField;
0:   private final FieldSelector idFieldSelector;
0:   private final VectorMapper mapper;
0:   private final double normPower;
0:   private final TermDocs termDocs;
0:   private Vector current;
0:   private boolean available;
1: 
1:   /**
1:    * Produce a LuceneIterable that can create the Vector plus normalize it.
1:    *
0:    * @param indexReader {@link org.apache.lucene.index.IndexReader} to read the documents from.
0:    * @param idField field containing the id. May be null.
0:    * @param field  field to use for the Vector
0:    * @param mapper {@link VectorMapper} for creating {@link Vector}s from Lucene's TermVectors.
0:    * @param normPower the normalization value. Must be nonnegative, or {@link LuceneIterable#NO_NORMALIZING}
1:    */
0:   public LuceneIterator(IndexReader indexReader,
0:                         String idField,
0:                         String field,
0:                         VectorMapper mapper,
0:                         double normPower) throws IOException {
0:     // term docs(null) is a better way of iterating all the docs in Lucene
1:     Preconditions.checkArgument(normPower == LuceneIterable.NO_NORMALIZING || normPower >= 0,
0:                                 "If specified normPower must be nonnegative", normPower);
0:     idFieldSelector = new SetBasedFieldSelector(Collections.singleton(idField), Collections.<String>emptySet());
0:     this.indexReader = indexReader;
0:     this.idField = idField;
0:     this.field = field;
0:     this.mapper = mapper;
0:     this.normPower = normPower;
0:     // term docs(null) is a better way of iterating all the docs in Lucene
0:     this.termDocs = indexReader.termDocs(null);
0:     current = null;
0:     available = false;
0:   }
1: 
0:   private void readVector() throws IOException {
0:     available = termDocs.next();
0:     if (!available) {
0:       current = null;
0:       return;
0:     }
0:     int doc = termDocs.doc();
0:     TermFreqVector termFreqVector = indexReader.getTermFreqVector(doc, field);
0:     if (termFreqVector == null) {
0:       throw new IllegalStateException("Field '" + field + "' does not have term vectors");
0:     }
1: 
0:     indexReader.getTermFreqVector(doc, field, mapper);
0:     mapper.setDocumentNumber(doc);
0:     Vector result = mapper.getVector();
0:     if (result == null) {
0:       // TODO is this right? last version would produce null in the iteration in this case, though it
0:       // seems like that may not be desirable
0:       current = null;
0:       return;
0:     }
0:     String name;
0:     if (idField != null) {
0:       name = indexReader.document(doc, idFieldSelector).get(idField);
0:     } else {
0:       name = String.valueOf(doc);
0:     }
0:     if (normPower == LuceneIterable.NO_NORMALIZING) {
0:       result = new NamedVector(result, name);
0:     } else {
0:       result = new NamedVector(result.normalize(normPower), name);
0:     }
0:     current = result;
0:   }
1: 
0:   @Override
0:   public boolean hasNext() {
0:     if (!available) {
0:       try {
0:         readVector();
0:       } catch (IOException e) {
0:         throw new IllegalStateException(e);
0:       }
0:     }
0:     return available;
0:   }
1: 
0:   @Override
0:   public Vector next() {
0:     if (!hasNext()) {
0:       throw new NoSuchElementException();
0:     }
0:     Vector next = current;
0:     current = null;
0:     available = false;
0:     return next;
0:   }
1: 
0:   @Override
0:   public void remove() {
0:     throw new UnsupportedOperationException();
0:   }
1: 
0: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:fc6c6f3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   private int nextDocId;
/////////////////////////////////////////////////////////////////////////
0:    * @param terminfo    terminfo
1:    * @param weight      weight
0:    * @throws java.io.IOException - {@link java.io.IOException}
/////////////////////////////////////////////////////////////////////////
1:    * @param indexReader {@link IndexReader} to read the documents from.
1:    * @param idField    field containing the id. May be null.
1:    * @param field      field to use for the Vector
0:    * @param terminfo   terminfo
1:    * @param weight     weight
0:    * @param normPower  the normalization value. Must be nonnegative, or {@link LuceneIterable#NO_NORMALIZING}
0:    * @throws java.io.IOException - {@link java.io.IOException}
/////////////////////////////////////////////////////////////////////////
0:       idFieldSelector = new TreeSet<String>();
/////////////////////////////////////////////////////////////////////////
0:     this.nextDocId = 0;
/////////////////////////////////////////////////////////////////////////
0:         doc = this.nextDocId;
0:         nextDocId++;
commit:6a4942c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.lucene.index.DocsEnum;
0: import org.apache.lucene.index.Terms;
0: import org.apache.lucene.index.TermsEnum;
0: import org.apache.lucene.util.BytesRef;
1: import org.apache.mahout.utils.vectors.TermInfo;
1: import org.apache.mahout.vectorizer.Weight;
0: import java.io.IOException;
0: import java.util.Iterator;
0: import java.util.Set;
0: import java.util.TreeSet;
0: 
/////////////////////////////////////////////////////////////////////////
0:   private final Set<String> idFieldSelector;
0:   private final TermInfo terminfo;
0:   private DocsEnum termDocs = null;
0: 
0: 
0:   private int nextDocid;
0: 
0:   private Weight weight;
1:    * @param idField     field containing the id. May be null.
1:    * @param field       field to use for the Vector
0:    * @param normPower   the normalization value. Must be nonnegative, or {@link LuceneIterable#NO_NORMALIZING}
0:                         TermInfo terminfo,
1:                         Weight weight,
0:     this(indexReader, idField, field, terminfo, weight, normPower, 0.0);
0:    * @see #LuceneIterator(org.apache.lucene.index.IndexReader, String, String, org.apache.mahout.utils.vectors.TermInfo, org.apache.mahout.vectorizer.Weight, double)
0:                         TermInfo terminfo,
1:                         Weight weight,
0:             "If specified normPower must be nonnegative", normPower);
0:     if (idField != null) {
0:       idFieldSelector = new TreeSet();
1:       idFieldSelector.add(idField);
0:     } else {
0:       idFieldSelector = null; /*The field in the index  containing the index.  If
0:                                                       null, then the Lucene
0:                                                       internal doc id is used
0:                                                       which is prone to error
0:                                                       if the underlying index
0:                                                       changes*/
0: 
0:     }
0:     this.terminfo = terminfo;
0:     this.weight = weight;
0:     this.nextDocid = 0;
/////////////////////////////////////////////////////////////////////////
0:       Terms termFreqVector;
0:         doc = this.nextDocid;
0:         nextDocid++;
0: 
0:         if (doc >= indexReader.maxDoc()) {
0:         termFreqVector = indexReader.getTermVector(doc, field);
/////////////////////////////////////////////////////////////////////////
0: 
0:       TermsEnum te = termFreqVector.iterator(null);
0:       BytesRef term;
0:       TFDFMapper mapper = new TFDFMapper(indexReader.numDocs(), weight, this.terminfo);
0:       mapper.setExpectations(field, termFreqVector.size());
0:       while ((term = te.next()) != null) {
0:         mapper.map(term, (int) te.totalTermFreq());
0:       }
============================================================================