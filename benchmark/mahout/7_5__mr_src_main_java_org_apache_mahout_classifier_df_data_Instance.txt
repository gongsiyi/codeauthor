2:8c37a84: /**
1:8c37a84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c37a84:  * contributor license agreements.  See the NOTICE file distributed with
1:8c37a84:  * this work for additional information regarding copyright ownership.
1:8c37a84:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c37a84:  * (the "License"); you may not use this file except in compliance with
1:8c37a84:  * the License.  You may obtain a copy of the License at
2:8c37a84:  *
1:8c37a84:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8c37a84:  *
1:8c37a84:  * Unless required by applicable law or agreed to in writing, software
1:8c37a84:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c37a84:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c37a84:  * See the License for the specific language governing permissions and
1:8c37a84:  * limitations under the License.
2:8c37a84:  */
4:8c37a84: 
1:52ce412: package org.apache.mahout.classifier.df.data;
1:8c37a84: 
1:a435efb: import org.apache.mahout.math.Vector;
1:8c37a84: 
1:8c37a84: /**
1:8c37a84:  * Represents one data instance.
1:8c37a84:  */
1:1ffa3a4: @Deprecated
1:8c37a84: public class Instance {
1:8c37a84:   
1:8c37a84:   /** attributes, except LABEL and IGNORED */
1:8547de7:   private final Vector attrs;
1:8c37a84:   
1:083eb98:   public Instance(Vector attrs) {
1:8c37a84:     this.attrs = attrs;
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   /**
1:8c37a84:    * Return the attribute at the specified position
1:8c37a84:    * 
1:8c37a84:    * @param index
1:ad11134:    *          position of the attribute to retrieve
1:8c37a84:    * @return value of the attribute
1:8c37a84:    */
1:8c37a84:   public double get(int index) {
1:8c37a84:     return attrs.getQuick(index);
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   /**
1:8c37a84:    * Set the value at the given index
1:8c37a84:    * 
1:ad11134:    * @param value
1:ad11134:    *          a double value to set
1:8c37a84:    */
1:8c37a84:   public void set(int index, double value) {
1:8c37a84:     attrs.set(index, value);
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   public boolean equals(Object obj) {
1:ad11134:     if (this == obj) {
1:8c37a84:       return true;
1:8547de7:     }
1:4194a28:     if (!(obj instanceof Instance)) {
1:8c37a84:       return false;
1:8c37a84:     }
1:8c37a84:     
1:ad11134:     Instance instance = (Instance) obj;
1:8c37a84:     
1:083eb98:     return /*id == instance.id &&*/ attrs.equals(instance.attrs);
1:8c37a84:     
1:8c37a84:   }
1:8c37a84:   
1:8547de7:   @Override
1:8547de7:   public int hashCode() {
1:083eb98:     return /*id +*/ attrs.hashCode();
1:ad11134:   }
1:ad11134: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:e9cc323
/////////////////////////////////////////////////////////////////////////
commit:083eb98
/////////////////////////////////////////////////////////////////////////
1:   public Instance(Vector attrs) {
/////////////////////////////////////////////////////////////////////////
1:     return /*id == instance.id &&*/ attrs.equals(instance.attrs);
1:     return /*id +*/ attrs.hashCode();
commit:e107bfa
/////////////////////////////////////////////////////////////////////////
0:   public Instance(int id, Vector attrs) {
/////////////////////////////////////////////////////////////////////////
0:     return id == instance.id && attrs.equals(instance.attrs);
0:     return id + attrs.hashCode();
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.data;
1: 
0: import org.apache.mahout.matrix.Vector;
1: 
1: /**
1:  * Represents one data instance.
1:  */
1: public class Instance {
1: 
0:   /** instance unique id */
0:   public final int id;
1: 
1:   /** attributes, except LABEL and IGNORED */
0:   protected final Vector attrs;
1: 
1:   /**
0:    * instance label code.<br>
0:    * use Dataset.labels to get the real label value
1:    * 
1:    */
0:   public final int label;
1: 
0:   public Instance(int id, Vector attrs, int label) {
0:     this.id = id;
1:     this.attrs = attrs;
0:     this.label = label;
1:   }
1: 
1:   /**
1:    * Return the attribute at the specified position
1:    * 
0:    * @param index position of the attribute to retrieve
1:    * @return value of the attribute
1:    */
1:   public double get(int index) {
1:     return attrs.getQuick(index);
1:   }
1: 
1:   /**
1:    * Set the value at the given index
1:    * 
1:    * @param index
0:    * @param value a double value to set
1:    */
1:   public void set(int index, double value) {
1:     attrs.set(index, value);
1:   }
1: 
1:   @Override
1:   public boolean equals(Object obj) {
0:     if (this == obj)
1:       return true;
0:     if (obj == null || !(obj instanceof Instance))
1:       return false;
1:     
0:     Instance instance = (Instance)obj;
1:     
0:     return id == instance.id && label == instance.label && attrs.equals(instance.attrs);
1:     
1:   }
1:   
1:   
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.data;
commit:a435efb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.Vector;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:     if (!(obj instanceof Instance)) {
commit:39fe224
/////////////////////////////////////////////////////////////////////////
0:     if (obj == null || !(obj instanceof Instance)) {
0:     return id == instance.id && label == instance.label && attrs.equals(instance.attrs);
commit:f824f90
commit:8547de7
/////////////////////////////////////////////////////////////////////////
1:   private final Vector attrs;
/////////////////////////////////////////////////////////////////////////
0: 
1:   @Override
1:   public int hashCode() {
0:     return id + label + attrs.hashCode();
1:   }
author:Robin Anil
-------------------------------------------------------------------------------
commit:ad11134
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   
0:   
0:   
0:    * @param index
1:    *          position of the attribute to retrieve
0:   
1:    * @param value
1:    *          a double value to set
0:   
1:     if (this == obj) {
1:     }
0:     if ((obj == null) || !(obj instanceof Instance)) {
1:     }
1:     Instance instance = (Instance) obj;
0:     return (id == instance.id) && (label == instance.label) && attrs.equals(instance.attrs);
0:   
============================================================================