2:29a7f38: /**
1:29a7f38:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:29a7f38:  * contributor license agreements.  See the NOTICE file distributed with
1:29a7f38:  * this work for additional information regarding copyright ownership.
1:29a7f38:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:29a7f38:  * (the "License"); you may not use this file except in compliance with
1:29a7f38:  * the License.  You may obtain a copy of the License at
3:29a7f38:  *
1:29a7f38:  *     http://www.apache.org/licenses/LICENSE-2.0
1:29a7f38:  *
1:29a7f38:  * Unless required by applicable law or agreed to in writing, software
1:29a7f38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:29a7f38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:29a7f38:  * See the License for the specific language governing permissions and
1:29a7f38:  * limitations under the License.
1:29a7f38:  */
1:29a7f38: 
1:4194a28: package org.apache.mahout.cf.taste.example.email;
1:29a7f38: 
1:67a531e: import org.apache.commons.lang3.StringUtils;
1:29a7f38: import org.apache.hadoop.conf.Configuration;
1:05cf634: import org.apache.hadoop.io.LongWritable;
1:29a7f38: import org.apache.hadoop.io.Text;
1:29a7f38: import org.apache.hadoop.mapreduce.Mapper;
1:29a7f38: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1:29a7f38: import org.slf4j.Logger;
1:29a7f38: import org.slf4j.LoggerFactory;
1:29a7f38: 
1:29a7f38: import java.io.IOException;
1:4194a28: 
1:05cf634: public final class MailToRecMapper extends Mapper<Text, Text, Text, LongWritable> {
1:29a7f38: 
1:4194a28:   private static final Logger log = LoggerFactory.getLogger(MailToRecMapper.class);
1:4194a28: 
1:87c15be:   private final OpenObjectIntHashMap<String> fromDictionary = new OpenObjectIntHashMap<>();
1:87c15be:   private final OpenObjectIntHashMap<String> msgIdDictionary = new OpenObjectIntHashMap<>();
1:29a7f38:   private String separator = "\n";
1:4194a28:   private int fromIdx;
1:4194a28:   private int refsIdx;
1:29a7f38: 
1:29a7f38:   public enum Counters {
1:29a7f38:     REFERENCE, ORIGINAL
1:29a7f38:   }
1:29a7f38: 
1:29a7f38:   @Override
1:29a7f38:   protected void setup(Context context) throws IOException, InterruptedException {
1:4194a28:     super.setup(context);
1:29a7f38:     Configuration conf = context.getConfiguration();
1:29a7f38:     String fromPrefix = conf.get(EmailUtility.FROM_PREFIX);
1:29a7f38:     String msgPrefix = conf.get(EmailUtility.MSG_IDS_PREFIX);
1:3b9f635:     fromIdx = conf.getInt(EmailUtility.FROM_INDEX, 0);
1:3b9f635:     refsIdx = conf.getInt(EmailUtility.REFS_INDEX, 1);
1:29a7f38:     EmailUtility.loadDictionaries(conf, fromPrefix, fromDictionary, msgPrefix, msgIdDictionary);
1:29a7f38:     log.info("From Dictionary size: {} Msg Id Dictionary size: {}", fromDictionary.size(), msgIdDictionary.size());
1:29a7f38:     separator = context.getConfiguration().get(EmailUtility.SEPARATOR);
1:29a7f38:   }
1:29a7f38: 
1:29a7f38:   @Override
1:29a7f38:   protected void map(Text key, Text value, Context context) throws IOException, InterruptedException {
1:29a7f38: 
1:29a7f38:     int msgIdKey = Integer.MIN_VALUE;
1:29a7f38: 
1:29a7f38: 
1:29a7f38:     int fromKey = Integer.MIN_VALUE;
1:29a7f38:     String valStr = value.toString();
1:29a7f38:     String[] splits = StringUtils.splitByWholeSeparatorPreserveAllTokens(valStr, separator);
1:29a7f38: 
1:29a7f38:     if (splits != null && splits.length > 0) {
1:e64dd36:       if (splits.length > refsIdx) {
1:3b9f635:         String from = EmailUtility.cleanUpEmailAddress(splits[fromIdx]);
1:3b9f635:         fromKey = fromDictionary.get(from);
1:3b9f635:       }
1:29a7f38:       //get the references
1:3b9f635:       if (splits.length > refsIdx) {
1:3b9f635:         String[] theRefs = EmailUtility.parseReferences(splits[refsIdx]);
1:29a7f38:         if (theRefs != null && theRefs.length > 0) {
1:29a7f38:           //we have a reference, the first one is the original message id, so map to that one if it exists
1:29a7f38:           msgIdKey = msgIdDictionary.get(theRefs[0]);
1:29a7f38:           context.getCounter(Counters.REFERENCE).increment(1);
1:29a7f38:         }
1:29a7f38:       }
1:29a7f38:     }
1:3c22856:     //we don't have any references, so use the msg id
1:3c22856:     if (msgIdKey == Integer.MIN_VALUE) {
1:29a7f38:       //get the msg id and the from and output the associated ids
1:29a7f38:       String keyStr = key.toString();
1:4194a28:       int idx = keyStr.lastIndexOf('/');
1:29a7f38:       if (idx != -1) {
1:4194a28:         String msgId = keyStr.substring(idx + 1);
1:29a7f38:         msgIdKey = msgIdDictionary.get(msgId);
1:29a7f38:         context.getCounter(Counters.ORIGINAL).increment(1);
1:29a7f38:       }
1:29a7f38:     }
1:29a7f38: 
1:29a7f38:     if (msgIdKey != Integer.MIN_VALUE && fromKey != Integer.MIN_VALUE) {
1:05cf634:       context.write(new Text(fromKey + "," + msgIdKey), new LongWritable(1));
1:29a7f38:     }
1:29a7f38:   }
1:29a7f38: 
1:29a7f38: 
1:29a7f38: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:   private final OpenObjectIntHashMap<String> fromDictionary = new OpenObjectIntHashMap<>();
1:   private final OpenObjectIntHashMap<String> msgIdDictionary = new OpenObjectIntHashMap<>();
author:smarthi
-------------------------------------------------------------------------------
commit:67a531e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.StringUtils;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1:     //we don't have any references, so use the msg id
1:     if (msgIdKey == Integer.MIN_VALUE) {
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:       if (splits.length > refsIdx) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
commit:4194a28
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.cf.taste.example.email;
0: public final class MailToRecMapper extends Mapper<Text, Text, NullWritable, Text> {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(MailToRecMapper.class);
1: 
0:   private final OpenObjectIntHashMap<String> fromDictionary = new OpenObjectIntHashMap<String>();
0:   private final OpenObjectIntHashMap<String> msgIdDictionary = new OpenObjectIntHashMap<String>();
1:   private int fromIdx;
1:   private int refsIdx;
/////////////////////////////////////////////////////////////////////////
1:     super.setup(context);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       int idx = keyStr.lastIndexOf('/');
1:         String msgId = keyStr.substring(idx + 1);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:05cf634
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.LongWritable;
/////////////////////////////////////////////////////////////////////////
1: public final class MailToRecMapper extends Mapper<Text, Text, Text, LongWritable> {
/////////////////////////////////////////////////////////////////////////
1:       context.write(new Text(fromKey + "," + msgIdKey), new LongWritable(1));
commit:3b9f635
/////////////////////////////////////////////////////////////////////////
0:   protected int fromIdx;
0:   protected int refsIdx;
/////////////////////////////////////////////////////////////////////////
1:     fromIdx = conf.getInt(EmailUtility.FROM_INDEX, 0);
1:     refsIdx = conf.getInt(EmailUtility.REFS_INDEX, 1);
/////////////////////////////////////////////////////////////////////////
0:       if (splits.length > refsIdx){
1:         String from = EmailUtility.cleanUpEmailAddress(splits[fromIdx]);
1:         fromKey = fromDictionary.get(from);
1:       }
1:       if (splits.length > refsIdx) {
1:         String[] theRefs = EmailUtility.parseReferences(splits[refsIdx]);
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.cf.taste.example.email;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
0: import org.apache.commons.lang.StringUtils;
1: import org.apache.hadoop.conf.Configuration;
0: import org.apache.hadoop.io.NullWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
0: import org.apache.mahout.math.VarIntWritable;
1: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  *
1:  *
0:  **/
0: public class MailToRecMapper extends
0:         Mapper<Text, Text, NullWritable, Text> {
0:   private transient static Logger log = LoggerFactory.getLogger(MailToRecMapper.class);
0:   private OpenObjectIntHashMap<String> fromDictionary = new OpenObjectIntHashMap<String>();
0:   private OpenObjectIntHashMap<String> msgIdDictionary = new OpenObjectIntHashMap<String>();
1:   private String separator = "\n";
1: 
1:   public enum Counters {
1:     REFERENCE, ORIGINAL
1:   }
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     Configuration conf = context.getConfiguration();
1:     String fromPrefix = conf.get(EmailUtility.FROM_PREFIX);
1:     String msgPrefix = conf.get(EmailUtility.MSG_IDS_PREFIX);
1:     EmailUtility.loadDictionaries(conf, fromPrefix, fromDictionary, msgPrefix, msgIdDictionary);
1:     log.info("From Dictionary size: {} Msg Id Dictionary size: {}", fromDictionary.size(), msgIdDictionary.size());
1:     separator = context.getConfiguration().get(EmailUtility.SEPARATOR);
1:   }
1: 
1:   @Override
1:   protected void map(Text key, Text value, Context context) throws IOException, InterruptedException {
1: 
0:     String msgId = null;
1:     int msgIdKey = Integer.MIN_VALUE;
1: 
1: 
1:     int fromKey = Integer.MIN_VALUE;
1:     String valStr = value.toString();
1:     String[] splits = StringUtils.splitByWholeSeparatorPreserveAllTokens(valStr, separator);
0:     //format is:  from, to, refs, subject, body
1: 
1:     if (splits != null && splits.length > 0) {
0:       String from = EmailUtility.cleanUpEmailAddress(splits[0]);
0:       fromKey = fromDictionary.get(from);
1:       //get the references
0:       if (splits.length > 2) {
0:         String[] theRefs = EmailUtility.parseReferences(splits[2]);
1:         if (theRefs != null && theRefs.length > 0) {
1:           //we have a reference, the first one is the original message id, so map to that one if it exists
1:           msgIdKey = msgIdDictionary.get(theRefs[0]);
1:           context.getCounter(Counters.REFERENCE).increment(1);
1:         }
1:       }
1:     }
0:     if (msgIdKey == Integer.MIN_VALUE) {//we don't have any references, so use the msg id
1:       //get the msg id and the from and output the associated ids
1:       String keyStr = key.toString();
0:       int idx = keyStr.lastIndexOf("/");
1:       if (idx != -1) {
0:         msgId = keyStr.substring(idx + 1);
1:         msgIdKey = msgIdDictionary.get(msgId);
1:         context.getCounter(Counters.ORIGINAL).increment(1);
1:       }
1:     }
1: 
1:     if (msgIdKey != Integer.MIN_VALUE && fromKey != Integer.MIN_VALUE) {
0:       context.write(null, new Text(fromKey + "," + msgIdKey + ",1"));
1:     }
1:   }
1: 
1: 
1: }
============================================================================