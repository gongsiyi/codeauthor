1:d25dd20: /**
1:d25dd20:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d25dd20:  * contributor license agreements.  See the NOTICE file distributed with
1:d25dd20:  * this work for additional information regarding copyright ownership.
1:d25dd20:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d25dd20:  * (the "License"); you may not use this file except in compliance with
1:d25dd20:  * the License.  You may obtain a copy of the License at
1:d25dd20:  *
1:d25dd20:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d25dd20:  *
1:d25dd20:  * Unless required by applicable law or agreed to in writing, software
1:d25dd20:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d25dd20:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d25dd20:  * See the License for the specific language governing permissions and
1:d25dd20:  * limitations under the License.
1:d25dd20:  */
1:d25dd20: 
1:d25dd20: package org.apache.mahout.cf.taste.example.kddcup.track2;
1:d25dd20: 
1:d25dd20: import java.io.File;
1:d25dd20: import java.io.IOException;
1:d25dd20: import java.util.Collection;
1:d25dd20: 
1:d25dd20: import org.apache.mahout.cf.taste.common.Refreshable;
1:d25dd20: import org.apache.mahout.cf.taste.example.kddcup.KDDCupDataModel;
1:d25dd20: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:d25dd20: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:e23728d: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:d25dd20: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1:a13b4b7: import org.apache.mahout.common.iterator.FileLineIterable;
1:d25dd20: 
1:d25dd20: final class TrackItemSimilarity implements ItemSimilarity {
1:d25dd20: 
1:d25dd20:   private final FastByIDMap<TrackData> trackData;
1:d25dd20: 
1:d25dd20:   TrackItemSimilarity(File dataFileDirectory) throws IOException {
1:87c15be:     trackData = new FastByIDMap<>();
1:d25dd20:     for (String line : new FileLineIterable(KDDCupDataModel.getTrackFile(dataFileDirectory))) {
1:d25dd20:       TrackData trackDatum = new TrackData(line);
1:d25dd20:       trackData.put(trackDatum.getTrackID(), trackDatum);
1:d25dd20:     }
1:d25dd20:   }
1:d25dd20: 
1:d25dd20:   @Override
1:d25dd20:   public double itemSimilarity(long itemID1, long itemID2) {
1:d25dd20:     if (itemID1 == itemID2) {
1:d25dd20:       return 1.0;
1:d25dd20:     }
1:d25dd20:     TrackData data1 = trackData.get(itemID1);
1:d25dd20:     TrackData data2 = trackData.get(itemID2);
1:d25dd20:     if (data1 == null || data2 == null) {
1:d25dd20:       return 0.0;
1:d25dd20:     }
1:d25dd20: 
1:d25dd20:     // Arbitrarily decide that same album means "very similar"
1:d25dd20:     if (data1.getAlbumID() != TrackData.NO_VALUE_ID && data1.getAlbumID() == data2.getAlbumID()) {
1:d25dd20:       return 0.9;
1:d25dd20:     }
1:d25dd20:     // ... and same artist means "fairly similar"
1:d25dd20:     if (data1.getArtistID() != TrackData.NO_VALUE_ID && data1.getArtistID() == data2.getArtistID()) {
1:d25dd20:       return 0.7;
1:d25dd20:     }
1:d25dd20: 
1:d25dd20:     // Tanimoto coefficient similarity based on genre, but maximum value of 0.25
1:d25dd20:     FastIDSet genres1 = data1.getGenreIDs();
1:d25dd20:     FastIDSet genres2 = data2.getGenreIDs();
1:d25dd20:     if (genres1 == null || genres2 == null) {
1:d25dd20:       return 0.0;
1:d25dd20:     }
1:d25dd20:     int intersectionSize = genres1.intersectionSize(genres2);
1:d25dd20:     if (intersectionSize == 0) {
1:d25dd20:       return 0.0;
1:d25dd20:     }
1:d25dd20:     int unionSize = genres1.size() + genres2.size() - intersectionSize;
1:4ca6b86:     return intersectionSize / (4.0 * unionSize);
1:d25dd20:   }
1:d25dd20: 
1:d25dd20:   @Override
1:d25dd20:   public double[] itemSimilarities(long itemID1, long[] itemID2s) {
1:d25dd20:     int length = itemID2s.length;
1:d25dd20:     double[] result = new double[length];
1:d25dd20:     for (int i = 0; i < length; i++) {
1:d25dd20:       result[i] = itemSimilarity(itemID1, itemID2s[i]);
1:d25dd20:     }
1:d25dd20:     return result;
1:d25dd20:   }
1:d25dd20: 
1:d25dd20:   @Override
1:208aa07:   public long[] allSimilarItemIDs(long itemID) {
1:e23728d:     FastIDSet allSimilarItemIDs = new FastIDSet();
1:e23728d:     LongPrimitiveIterator allItemIDs = trackData.keySetIterator();
1:e23728d:     while (allItemIDs.hasNext()) {
1:e23728d:       long possiblySimilarItemID = allItemIDs.nextLong();
1:e23728d:       if (!Double.isNaN(itemSimilarity(itemID, possiblySimilarItemID))) {
1:e23728d:         allSimilarItemIDs.add(possiblySimilarItemID);
1:e23728d:       }
1:e23728d:     }
1:e23728d:     return allSimilarItemIDs.toArray();
1:e23728d:   }
1:e23728d: 
1:e23728d:   @Override
1:d25dd20:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:d25dd20:     // do nothing
1:d25dd20:   }
1:d25dd20: 
1:d25dd20: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     trackData = new FastByIDMap<>();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:     return intersectionSize / (4.0 * unionSize);
commit:208aa07
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public long[] allSimilarItemIDs(long itemID) {
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.iterator.FileLineIterable;
commit:17988ce
/////////////////////////////////////////////////////////////////////////
commit:d25dd20
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup.track2;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Collection;
1: 
1: import org.apache.mahout.cf.taste.common.Refreshable;
0: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.example.kddcup.KDDCupDataModel;
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
0: import org.apache.mahout.common.FileLineIterable;
1: 
1: final class TrackItemSimilarity implements ItemSimilarity {
1: 
1:   private final FastByIDMap<TrackData> trackData;
1: 
1:   TrackItemSimilarity(File dataFileDirectory) throws IOException {
0:     trackData = new FastByIDMap<TrackData>();
1:     for (String line : new FileLineIterable(KDDCupDataModel.getTrackFile(dataFileDirectory))) {
1:       TrackData trackDatum = new TrackData(line);
1:       trackData.put(trackDatum.getTrackID(), trackDatum);
1:     }
1:   }
1: 
1:   @Override
1:   public double itemSimilarity(long itemID1, long itemID2) {
1:     if (itemID1 == itemID2) {
1:       return 1.0;
1:     }
1:     TrackData data1 = trackData.get(itemID1);
1:     TrackData data2 = trackData.get(itemID2);
1:     if (data1 == null || data2 == null) {
1:       return 0.0;
1:     }
1: 
1:     // Arbitrarily decide that same album means "very similar"
1:     if (data1.getAlbumID() != TrackData.NO_VALUE_ID && data1.getAlbumID() == data2.getAlbumID()) {
1:       return 0.9;
1:     }
1:     // ... and same artist means "fairly similar"
1:     if (data1.getArtistID() != TrackData.NO_VALUE_ID && data1.getArtistID() == data2.getArtistID()) {
1:       return 0.7;
1:     }
1: 
1:     // Tanimoto coefficient similarity based on genre, but maximum value of 0.25
1:     FastIDSet genres1 = data1.getGenreIDs();
1:     FastIDSet genres2 = data2.getGenreIDs();
1:     if (genres1 == null || genres2 == null) {
1:       return 0.0;
1:     }
1:     int intersectionSize = genres1.intersectionSize(genres2);
1:     if (intersectionSize == 0) {
1:       return 0.0;
1:     }
1:     int unionSize = genres1.size() + genres2.size() - intersectionSize;
0:     return (double) intersectionSize / (4.0 * unionSize);
1:   }
1: 
1:   @Override
1:   public double[] itemSimilarities(long itemID1, long[] itemID2s) {
1:     int length = itemID2s.length;
1:     double[] result = new double[length];
1:     for (int i = 0; i < length; i++) {
1:       result[i] = itemSimilarity(itemID1, itemID2s[i]);
1:     }
1:     return result;
1:   }
1: 
1:   @Override
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:     // do nothing
1:   }
1: 
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e23728d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
/////////////////////////////////////////////////////////////////////////
0:   public long[] allSimilarItemIDs(long itemID) throws TasteException {
1:     FastIDSet allSimilarItemIDs = new FastIDSet();
1:     LongPrimitiveIterator allItemIDs = trackData.keySetIterator();
1:     while (allItemIDs.hasNext()) {
1:       long possiblySimilarItemID = allItemIDs.nextLong();
1:       if (!Double.isNaN(itemSimilarity(itemID, possiblySimilarItemID))) {
1:         allSimilarItemIDs.add(possiblySimilarItemID);
1:       }
1:     }
1:     return allSimilarItemIDs.toArray();
1:   }
1: 
1:   @Override
============================================================================