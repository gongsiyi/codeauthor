1:3c9538a: /**
1:3c9538a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3c9538a:  * contributor license agreements.  See the NOTICE file distributed with
1:3c9538a:  * this work for additional information regarding copyright ownership.
1:3c9538a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3c9538a:  * (the "License"); you may not use this file except in compliance with
1:3c9538a:  * the License.  You may obtain a copy of the License at
1:3c9538a:  *
1:3c9538a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3c9538a:  *
1:3c9538a:  * Unless required by applicable law or agreed to in writing, software
1:3c9538a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3c9538a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c9538a:  * See the License for the specific language governing permissions and
1:3c9538a:  * limitations under the License.
1:3c9538a:  */
1:3c9538a: package org.apache.mahout.clustering;
4:3c9538a: 
1:3c9538a: import org.apache.mahout.math.Vector;
1:528ffcd: import org.apache.mahout.math.function.Functions;
1:3c9538a: import org.apache.mahout.math.function.SquareRootFunction;
1:3c9538a: 
1:3c9538a: /**
1:3c9538a:  * An online Gaussian accumulator that uses a running power sums approach as reported 
1:3c9538a:  * on http://en.wikipedia.org/wiki/Standard_deviation
1:3c9538a:  * Suffers from overflow, underflow and roundoff error but has minimal observe-time overhead
1:3c9538a:  */
1:3c9538a: public class RunningSumsGaussianAccumulator implements GaussianAccumulator {
1:3c9538a: 
1:d61a0ee:   private double s0;
1:3c9538a:   private Vector s1;
1:3c9538a:   private Vector s2;
1:3c9538a:   private Vector mean;
1:3c9538a:   private Vector std;
1:3c9538a: 
1:3c9538a:   @Override
1:3c9538a:   public double getN() {
1:3c9538a:     return s0;
1:3c9538a:   }
1:3c9538a: 
1:3c9538a:   @Override
1:3c9538a:   public Vector getMean() {
1:3c9538a:     return mean;
1:3c9538a:   }
1:3c9538a: 
1:3c9538a:   @Override
1:3c9538a:   public Vector getStd() {
1:3c9538a:     return std;
1:3c9538a:   }
1:3c9538a: 
1:3c9538a:   @Override
1:3c9538a:   public double getAverageStd() {
1:b588af3:     if (s0 == 0.0) {
1:b588af3:       return 0.0;
1:3c9538a:     } else {
1:3c9538a:       return std.zSum() / std.size();
1:3c9538a:     }
1:3c9538a:   }
1:3c9538a: 
1:3c9538a:   @Override
1:3c9538a:   public Vector getVariance() {
1:3c9538a:     return std.times(std);
1:3c9538a:   }
1:3c9538a: 
1:3c9538a:   @Override
1:b588af3:   public void observe(Vector x, double weight) {
1:b588af3:     s0 += weight;
1:b588af3:     Vector weightedX = x.times(weight);
1:3c9538a:     if (s1 == null) {
1:b588af3:       s1 = weightedX;
1:3c9538a:     } else {
1:528ffcd:       s1.assign(weightedX, Functions.PLUS);
1:3c9538a:     }
1:b588af3:     Vector x2 = x.times(x).times(weight);
1:3c9538a:     if (s2 == null) {
1:3c9538a:       s2 = x2;
1:3c9538a:     } else {
1:528ffcd:       s2.assign(x2, Functions.PLUS);
1:3c9538a:     }
1:3c9538a:   }
1:3c9538a: 
1:3c9538a:   @Override
1:3c9538a:   public void compute() {
1:b588af3:     if (s0 != 0.0) {
1:b588af3:       mean = s1.divide(s0);
1:b588af3:       std = s2.times(s0).minus(s1.times(s1)).assign(new SquareRootFunction()).divide(s0);
1:3c9538a:     }
1:3c9538a:   }
1:3c9538a: 
1:3c9538a: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Ted Dunning
-------------------------------------------------------------------------------
commit:528ffcd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1:       s1.assign(weightedX, Functions.PLUS);
1:       s2.assign(x2, Functions.PLUS);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
1:   private double s0;
commit:b588af3
/////////////////////////////////////////////////////////////////////////
0:   private double s0 = 0.0;
/////////////////////////////////////////////////////////////////////////
1:     if (s0 == 0.0) {
1:       return 0.0;
/////////////////////////////////////////////////////////////////////////
1:   public void observe(Vector x, double weight) {
1:     s0 += weight;
1:     Vector weightedX = x.times(weight);
1:       s1 = weightedX;
0:       weightedX.addTo(s1);
1:     Vector x2 = x.times(x).times(weight);
/////////////////////////////////////////////////////////////////////////
1:     if (s0 != 0.0) {
1:       mean = s1.divide(s0);
1:       std = s2.times(s0).minus(s1.times(s1)).assign(new SquareRootFunction()).divide(s0);
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:237bcbd
/////////////////////////////////////////////////////////////////////////
0:   public void observe(Vector x) {
0:     s0++;
0:       s1 = x.clone();
0:       x.addTo(s1);
0:     Vector x2 = x.times(x);
commit:3c9538a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.clustering;
1: 
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.SquareRootFunction;
1: 
1: /**
1:  * An online Gaussian accumulator that uses a running power sums approach as reported 
1:  * on http://en.wikipedia.org/wiki/Standard_deviation
1:  * Suffers from overflow, underflow and roundoff error but has minimal observe-time overhead
1:  */
1: public class RunningSumsGaussianAccumulator implements GaussianAccumulator {
0:   private double s0 = 0;
1: 
1:   private Vector s1;
1: 
1:   private Vector s2;
1: 
1:   private Vector mean;
1: 
1:   private Vector std;
1: 
1:   @Override
1:   public double getN() {
1:     return s0;
1:   }
1: 
1:   @Override
1:   public Vector getMean() {
1:     return mean;
1:   }
1: 
1:   @Override
1:   public Vector getStd() {
1:     return std;
1:   }
1: 
1:   @Override
1:   public double getAverageStd() {
0:     if (s0 == 0) {
0:       return 0;
1:     } else {
1:       return std.zSum() / std.size();
1:     }
1:   }
1: 
1:   @Override
1:   public Vector getVariance() {
1:     return std.times(std);
1:   }
1: 
1:   @Override
0:   public void observe(Vector x, double weight) {
0:     s0 += weight;
0:     Vector weightedX = x.times(weight);
1:     if (s1 == null) {
0:       s1 = weightedX;
1:     } else {
0:       weightedX.addTo(s1);
1:     }
0:     Vector x2 = x.times(x).times(weight);
1:     if (s2 == null) {
1:       s2 = x2;
1:     } else {
0:       x2.addTo(s2);
1:     }
1:   }
1: 
1:   @Override
1:   public void compute() {
0:     if (s0 == 0) {
0:       return;
1:     }
0:     mean = s1.divide(s0);
0:     std = s2.times(s0).minus(s1.times(s1)).assign(new SquareRootFunction()).divide(s0);
1:   }
1: 
1: }
============================================================================