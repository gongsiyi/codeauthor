1:c7435d3: /*
1:c7435d3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c7435d3:  * contributor license agreements.  See the NOTICE file distributed with
1:c7435d3:  * this work for additional information regarding copyright ownership.
1:c7435d3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c7435d3:  * (the "License"); you may not use this file except in compliance with
1:c7435d3:  * the License.  You may obtain a copy of the License at
1:407cfd3:  *
1:c7435d3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:407cfd3:  *
1:c7435d3:  * Unless required by applicable law or agreed to in writing, software
1:c7435d3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c7435d3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c7435d3:  * See the License for the specific language governing permissions and
1:c7435d3:  * limitations under the License.
2:407cfd3:  */
1:5528154: 
1:5a7067b: package org.apache.mahout.vectorizer.encoders;
1:9109586: 
1:9109586: import java.util.Locale;
1:864ba1a: 
1:c7435d3: import org.apache.mahout.math.Vector;
1:a551b15: 
1:864ba1a: import com.google.common.base.Charsets;
1:864ba1a: 
1:c7435d3: public class InteractionValueEncoder extends FeatureVectorEncoder {
1:8a99d75:   private final FeatureVectorEncoder firstEncoder;
1:8a99d75:   private final FeatureVectorEncoder secondEncoder;
1:6fca24e: 
1:c96fa14:   public InteractionValueEncoder(String name, FeatureVectorEncoder encoderOne, FeatureVectorEncoder encoderTwo) {
1:c96fa14:     super(name, 2);
1:c96fa14:     firstEncoder = encoderOne;
1:c96fa14:     secondEncoder = encoderTwo;
1:c96fa14:   }
1:a8b77cb: 
1:d457f73:   /**
1:d457f73:    * Adds a value to a vector.
1:d457f73:    *
1:407cfd3:    * @param originalForm The original form of the first value as a string.
1:c96fa14:    * @param data          The vector to which the value should be added.
1:d457f73:    */
1:407cfd3:   @Override
1:407cfd3:   public void addToVector(String originalForm, double w, Vector data) {
1:69ba194:     throw new UnsupportedOperationException("addToVector is not supported for InteractionVectorEncoder");
1:fbf804b:   }
1:fbf804b: 
1:fbf804b:   /**
1:fbf804b:    * Adds a value to a vector. (Unsupported)
1:fbf804b:    *
1:fbf804b:    * @param originalForm The original form of the first value as a byte array.
1:fbf804b:    * @param data          The vector to which the value should be added.
1:fbf804b:    */
1:fbf804b:   @Override
1:fbf804b:   public void addToVector(byte[] originalForm, double w, Vector data) {
1:69ba194:     throw new UnsupportedOperationException("addToVector is not supported for InteractionVectorEncoder");
1:c96fa14:   }
1:7c6f529: 
1:c96fa14:   /**
1:c96fa14:    * Adds a value to a vector.
1:c96fa14:    *
1:fbf804b:    * @param original1 The original form of the first value as a string.
1:fbf804b:    * @param original2 The original form of the second value as a string.
1:f02c4bc:    * @param weight        How much to weight this interaction
1:c96fa14:    * @param data          The vector to which the value should be added.
1:c96fa14:    */
1:fbf804b:   public void addInteractionToVector(String original1, String original2, double weight, Vector data) {
1:fbf804b:     byte[] originalForm1 = bytesForString(original1);
1:fbf804b:     byte[] originalForm2 = bytesForString(original2);
1:fbf804b:     addInteractionToVector(originalForm1, originalForm2, weight, data);
1:fbf804b:   }
1:fbf804b: 
1:fbf804b:   /**
1:fbf804b:    * Adds a value to a vector.
1:fbf804b:    *
1:fbf804b:    * @param originalForm1 The original form of the first value as a byte array.
1:fbf804b:    * @param originalForm2 The original form of the second value as a byte array.
1:fbf804b:    * @param weight        How much to weight this interaction
1:fbf804b:    * @param data          The vector to which the value should be added.
1:fbf804b:    */
1:fbf804b:   public void addInteractionToVector(byte[] originalForm1, byte[] originalForm2, double weight, Vector data) {
1:c96fa14:     String name = getName();
1:c96fa14:     double w = getWeight(originalForm1, originalForm2, weight);
1:7c6f529:     for (int i = 0; i < probes(); i++) {
1:61ae2e7:       Iterable<Integer> jValues =
1:61ae2e7:           secondEncoder.hashesForProbe(originalForm2, data.size(), name, i % secondEncoder.getProbes());
1:61ae2e7:       for (Integer k : firstEncoder.hashesForProbe(originalForm1, data.size(), name, i % firstEncoder.getProbes())) {
1:61ae2e7:         for (Integer j : jValues) {
1:f02c4bc:           int n = (k + j) % data.size();
1:61ae2e7:           if (isTraceEnabled()) {
1:9109586:             trace(String.format("%s:%s", new String(originalForm1, Charsets.UTF_8), new String(originalForm2,
1:864ba1a: 		Charsets.UTF_8)), n);
1:fbf804b:           }
1:7c6f529:           data.set(n, data.get(n) + w);
1:7c6f529:         }
1:c96fa14:       }
1:c96fa14:     }
1:c96fa14:   }
1:c96fa14: 
1:7c6f529:   private int probes() {
1:7c6f529:     return getProbes();
1:7c6f529:   }
1:7c6f529: 
1:fbf804b:   protected double getWeight(byte[] originalForm1, byte[] originalForm2, double w) {
1:7c6f529:     return firstEncoder.getWeight(originalForm1, 1.0) * secondEncoder.getWeight(originalForm2, 1.0) * w;
1:7c6f529:   }
1:7c6f529: 
3:407cfd3:   /**
1:c96fa14:    * Converts a value into a form that would help a human understand the internals of how the value
1:c96fa14:    * is being interpreted.  For text-like things, this is likely to be a list of the terms found with
1:c96fa14:    * associated weights (if any).
1:407cfd3:    *
1:407cfd3:    * @param originalForm The original form of the value as a string.
1:407cfd3:    * @return A string that a human can read.
1:407cfd3:    */
1:407cfd3:   @Override
1:407cfd3:   public String asString(String originalForm) {
1:6fca24e:     return String.format(Locale.ENGLISH, "%s:%s", getName(), originalForm);
1:7c6f529:   }
1:c96fa14: 
1:c96fa14:   @Override
1:fbf804b:   protected int hashForProbe(byte[] originalForm, int dataSize, String name, int probe) {
1:f02c4bc:     return hash(name, probe, dataSize);
1:c96fa14:   }
1:669b7ed: }
1:5528154: 
11:c7435d3: 
============================================================================
author:Andrew Musselman
-------------------------------------------------------------------------------
commit:864ba1a
/////////////////////////////////////////////////////////////////////////
1: 
1: import com.google.common.base.Charsets;
1: 
/////////////////////////////////////////////////////////////////////////
1: 		Charsets.UTF_8)), n);
commit:a551b15
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
1: 
/////////////////////////////////////////////////////////////////////////
0: 		Charsets.UTF_8)), n);
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:670a7d2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.io.Charsets;
/////////////////////////////////////////////////////////////////////////
0:                 Charsets.UTF_8)), n);
commit:4cff542
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.io.Charsets;
/////////////////////////////////////////////////////////////////////////
0:                 Charsets.UTF_8)), n);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:9109586
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
1: 
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
1:             trace(String.format("%s:%s", new String(originalForm1, Charsets.UTF_8), new String(originalForm2,
0: 		Charsets.UTF_8)), n);
author:Robin Anil
-------------------------------------------------------------------------------
commit:5a7067b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.vectorizer.encoders;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:69ba194
/////////////////////////////////////////////////////////////////////////
1:     throw new UnsupportedOperationException("addToVector is not supported for InteractionVectorEncoder");
/////////////////////////////////////////////////////////////////////////
1:     throw new UnsupportedOperationException("addToVector is not supported for InteractionVectorEncoder");
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:             trace(String.format("%s:%s", Arrays.toString(originalForm1), Arrays.toString(originalForm2)), n);
commit:61ae2e7
/////////////////////////////////////////////////////////////////////////
1:       Iterable<Integer> jValues =
1:           secondEncoder.hashesForProbe(originalForm2, data.size(), name, i % secondEncoder.getProbes());
1:       for (Integer k : firstEncoder.hashesForProbe(originalForm1, data.size(), name, i % firstEncoder.getProbes())) {
1:         for (Integer j : jValues) {
1:           if (isTraceEnabled()) {
commit:8a99d75
/////////////////////////////////////////////////////////////////////////
1:   private final FeatureVectorEncoder firstEncoder;
1:   private final FeatureVectorEncoder secondEncoder;
commit:6fca24e
/////////////////////////////////////////////////////////////////////////
0: import java.util.Locale;
1: 
0:   private final String name1;
0:   private final String name2;
0:     super(name1 + ':' + name2, 2);
/////////////////////////////////////////////////////////////////////////
0:       trace(String.format(Locale.ENGLISH, "%s:%s", originalForm1, originalForm2), n);
/////////////////////////////////////////////////////////////////////////
1:     return String.format(Locale.ENGLISH, "%s:%s", getName(), originalForm);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:fbf804b
/////////////////////////////////////////////////////////////////////////
0:     throw new IllegalArgumentException("addToVector is not supported for InteractionVectorEncoder");
1:   }
1: 
1:   /**
1:    * Adds a value to a vector. (Unsupported)
1:    *
1:    * @param originalForm The original form of the first value as a byte array.
1:    * @param data          The vector to which the value should be added.
1:    */
1:   @Override
1:   public void addToVector(byte[] originalForm, double w, Vector data) {
0:     throw new IllegalArgumentException("addToVector is not supported for InteractionVectorEncoder");
1:    * @param original1 The original form of the first value as a string.
1:    * @param original2 The original form of the second value as a string.
1:   public void addInteractionToVector(String original1, String original2, double weight, Vector data) {
1:     byte[] originalForm1 = bytesForString(original1);
1:     byte[] originalForm2 = bytesForString(original2);
1:     addInteractionToVector(originalForm1, originalForm2, weight, data);
1:   }
1: 
1:   /**
1:    * Adds a value to a vector.
1:    *
1:    * @param originalForm1 The original form of the first value as a byte array.
1:    * @param originalForm2 The original form of the second value as a byte array.
1:    * @param weight        How much to weight this interaction
1:    * @param data          The vector to which the value should be added.
1:    */
1:   public void addInteractionToVector(byte[] originalForm1, byte[] originalForm2, double weight, Vector data) {
0:       Iterable<Integer> jValues = secondEncoder.hashesForProbe(originalForm2, data.size(), name, i % secondEncoder.getProbes());
0:       for(Integer k : firstEncoder.hashesForProbe(originalForm1, data.size(), name, i % firstEncoder.getProbes())){
0:           if(isTraceEnabled()){
0:             trace(String.format("%s:%s", originalForm1, originalForm2), n);            
1:           }
/////////////////////////////////////////////////////////////////////////
1:   protected double getWeight(byte[] originalForm1, byte[] originalForm2, double w) {
/////////////////////////////////////////////////////////////////////////
1:   protected int hashForProbe(byte[] originalForm, int dataSize, String name, int probe) {
commit:a8b77cb
/////////////////////////////////////////////////////////////////////////
0: import java.util.Locale;
1: 
0:   private FeatureVectorEncoder firstEncoder;
0:   private FeatureVectorEncoder secondEncoder;
/////////////////////////////////////////////////////////////////////////
0:     return String.format(Locale.ENGLISH, "%s:%s", getName(), originalForm);
commit:f02c4bc
/////////////////////////////////////////////////////////////////////////
0:   private static FeatureVectorEncoder firstEncoder;
0:   private static FeatureVectorEncoder secondEncoder;
/////////////////////////////////////////////////////////////////////////
1:    * @param weight        How much to weight this interaction
0:       Iterable<Integer> jValues = secondEncoder.hashesForProbe(originalForm2, data.size(), name, i);
0:       for(Integer k : firstEncoder.hashesForProbe(originalForm1, data.size(), name, i)){
0:         for(Integer j : jValues) {
1:           int n = (k + j) % data.size();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   protected int hashForProbe(String originalForm, int dataSize, String name, int probe) {
1:     return hash(name, probe, dataSize);
commit:7c6f529
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.iterator.ArrayIterator;
0: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < probes(); i++) {
0:       for(Integer k : firstEncoder.hashesForProbe(originalForm1, data, name, i)){
0:         for(Integer j : secondEncoder.hashesForProbe(originalForm2, data, name, i)){
0:           int n = linearDoubleHash(hash1(k,name,i,data),hash2(k,name,i,data),j,data.size());
0:           trace(String.format("%s:%s", originalForm1, originalForm2), n);
1:           data.set(n, data.get(n) + w);
1:         }
1:   private int probes() {
1:     return getProbes();
1:   }
1: 
1:     return firstEncoder.getWeight(originalForm1, 1.0) * secondEncoder.getWeight(originalForm2, 1.0) * w;
1:   }
1: 
0:   private int linearDoubleHash(int h1, int h2, int j, int modulus){
0:    int n = (h1 + (j+1)*h2) % modulus;
0:    if(n < 0){
0:     n = n+modulus;
1:    }
0:    return n;
/////////////////////////////////////////////////////////////////////////
0:   protected int hash1(int value, String name, int i, Vector data){
0:     return hash(name, i+value+INTERACTION_VALUE_HASH_SEED_1, data.size());
0:   protected int hash2(int value, String name, int i, Vector data){
0:     return hash(name, i+value+INTERACTION_VALUE_HASH_SEED_2, data.size());
1: 
commit:c96fa14
/////////////////////////////////////////////////////////////////////////
0:   protected static FeatureVectorEncoder firstEncoder;
0:   protected static FeatureVectorEncoder secondEncoder;
1:   public InteractionValueEncoder(String name, FeatureVectorEncoder encoderOne, FeatureVectorEncoder encoderTwo) {
1:     super(name, 2);
1:     firstEncoder = encoderOne;
1:     secondEncoder = encoderTwo;
1:   }
1:    * @param data          The vector to which the value should be added.
1:   /**
1:    * Adds a value to a vector.
1:    *
0:    * @param originalForm1 The original form of the first value as a string.
0:    * @param originalForm2 The original form of the second value as a string.
1:    * @param data          The vector to which the value should be added.
1:    */
0:   public void addInteractionToVector(String originalForm1, String originalForm2, double weight, Vector data) {
0:     int probes = getProbes();
1:     String name = getName();
1:     double w = getWeight(originalForm1, originalForm2, weight);
0:     for (int i = 0; i < probes; i++) {
0:       int h1 = firstEncoder.hashForProbe(originalForm1, data, name, i);
0:       int h2 = secondEncoder.hashForProbe(originalForm1, data, name, i);
0:       int j =  firstEncoder.hashForProbe(originalForm2, data, name, i);
0:       int n = (h1 + (j+1)*h2) % data.size();
0:       if(n < 0){
0:         n = n+data.size();
1:       }
0:       trace(String.format("%s:%s", originalForm1, originalForm2), n);
0:       data.set(n, data.get(n) + w);
1:     }
1:   }
1: 
0:   protected double getWeight(String originalForm1, String originalForm2, double w) {
0:     return firstEncoder.getWeight(originalForm1, 1.0) * secondEncoder.getWeight(originalForm2,1.0) * w;
1:   }
1:    * Converts a value into a form that would help a human understand the internals of how the value
1:    * is being interpreted.  For text-like things, this is likely to be a list of the terms found with
1:    * associated weights (if any).
0:     return String.format("%s:%s", getName(), originalForm);
1:   }
1: 
1:   @Override
0:   protected int hashForProbe(String originalForm, Vector data, String name, int i) {
0:     return hash(name, i, data.size());
0:     return hash(term1, term2, probe+INTERACTION_VALUE_HASH_SEED_1,numFeatures);
0:     return hash(term1, term2, probe+INTERACTION_VALUE_HASH_SEED_2,numFeatures);
commit:669b7ed
/////////////////////////////////////////////////////////////////////////
0:     public InteractionValueEncoder(String name) {
0:        super(name, 2);
1:      }
/////////////////////////////////////////////////////////////////////////
0:          if(n < 0){
0:              n = n+data.size();
0:          }
commit:d457f73
/////////////////////////////////////////////////////////////////////////
1:      /**
1:       * Adds a value to a vector.
1:       *
0:       * @param originalForm1 The original form of the first value as a string.
0:       * @param originalForm2 The original form of the second value as a string.
0:       * @param data          The vector to which the value should be added.
1:       */
0:      public void addInteractionToVector(String originalForm1, String originalForm2, Vector data) {
0:        int probes = getProbes();
0:        String name = getName();
0:        for (int i = 0; i < probes; i++) {
0:          int h1 = hash1(name, originalForm1, i, data.size());
0:          int h2 = hash2(name, originalForm1, i, data.size());
0:          int j =  hash1(name, originalForm2, i, data.size());
0:          int n = (h1 + (j+1)*h2) % data.size();
0:          trace(String.format("%s:%s", originalForm1, originalForm2), n);
0:          data.set(n, data.get(n) + 1);
0:        }
0:      }
commit:5528154
/////////////////////////////////////////////////////////////////////////
0:   protected InteractionValueEncoder(String name) {
0:     super(name, 2);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   public void addInteractionToVector(String originalForm1, String originalForm2, Vector data) {
0:     String name = getName();
0:       int h1 = hash1(name, originalForm1, i, data.size());
0:       int h2 = hash2(name, originalForm1, i, data.size());
0:       int j = hash1(name, originalForm2, i, data.size());
0:       int n = (h1 + j * h2) % data.size();
0:       trace(String.format("%s:%s", originalForm1, originalForm2), n);
/////////////////////////////////////////////////////////////////////////
1: 
0:   protected int hash1(String term1, String term2, int probe, int numFeatures) {
0:     return hash(term1, term2, probe + INTERACTION_VALUE_HASH_SEED_1, numFeatures);
0:   }
1: 
0:   protected int hash2(String term1, String term2, int probe, int numFeatures) {
0:     return hash(term1, term2, probe + INTERACTION_VALUE_HASH_SEED_2, numFeatures);
0:   }
commit:407cfd3
/////////////////////////////////////////////////////////////////////////
0:   protected static final int INTERACTION_VALUE_HASH_SEED_1 = 100;
0:   protected static final int INTERACTION_VALUE_HASH_SEED_2 = 200;
0:   private String name1;
0:   private String name2;
0:   protected InteractionValueEncoder(String name1, String name2) {
0:     super(name1 + ":" + name2, 2);
0:     this.name1 = name1;
0:     this.name2 = name2;
0:   }
1:   /**
0:    * Adds a value to a vector.
1:    *
1:    * @param originalForm The original form of the first value as a string.
0:    * @param data         The vector to which the value should be added.
1:    */
1:   @Override
1:   public void addToVector(String originalForm, double w, Vector data) {
0:     throw new UnsupportedOperationException("Must have two arguments to encode interaction");
0:   }
1:   /**
0:    * Adds a value to a vector.
1:    *
0:    * @param originalForm1 The original form of the first value as a string.
0:    * @param originalForm2 The original form of the second value as a string.
0:    * @param data          The vector to which the value should be added.
1:    */
0:   public void addToVector(String originalForm1, String originalForm2, Vector data) {
0:     int probes = getProbes();
0:     String name = getName();
0:     for (int i = 0; i < probes; i++) {
0:       int n = hash(name1, originalForm1, name2, originalForm2, i, data.size());
0:       trace(String.format("%s:%s", originalForm1, originalForm2), n);
0:       data.set(n, data.get(n) + 1);
0:     }
0:   }
1:   /**
0:    * Converts a value into a form that would help a human understand the internals of how the
0:    * value is being interpreted.  For text-like things, this is likely to be a list of the terms
0:    * found with associated weights (if any).
1:    *
1:    * @param originalForm The original form of the value as a string.
1:    * @return A string that a human can read.
1:    */
1:   @Override
1:   public String asString(String originalForm) {
0:     return String.format("%s:%s", getName(), originalForm);
0:   }
commit:c7435d3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: 
0: package org.apache.mahout.vectors;
1: 
1: import org.apache.mahout.math.Vector;
1: 
1: public class InteractionValueEncoder extends FeatureVectorEncoder {
1: 
0:     protected static final int INTERACTION_VALUE_HASH_SEED_1 = 100;
0:     protected static final int INTERACTION_VALUE_HASH_SEED_2 = 200;
1: 
0:     protected InteractionValueEncoder(String name) {
0:        super(name, 2);
0:      }
1: 
0:       /**
0:       * Adds a value to a vector.
0:       *
0:       * @param originalForm The original form of the first value as a string.
0:       * @param data          The vector to which the value should be added.
0:       */
0:      @Override
0:      public void addToVector(String originalForm, double w, Vector data) {
0:      }
1: 
0:      /**
0:       * Adds a value to a vector.
0:       *
0:       * @param originalForm1 The original form of the first value as a string.
0:       * @param originalForm2 The original form of the second value as a string.
0:       * @param data          The vector to which the value should be added.
0:       */
0:      public void addInteractionToVector(String originalForm1, String originalForm2, Vector data) {
0:        int probes = getProbes();
0:        String name = getName();
0:        for (int i = 0; i < probes; i++) {
0:          int h1 = hash1(name, originalForm1, i, data.size());
0:          int h2 = hash2(name, originalForm1, i, data.size());
0:          int j =  hash1(name, originalForm2, i, data.size());
0:          int n = (h1 + j*h2) % data.size();
0:          trace(String.format("%s:%s", originalForm1, originalForm2), n);
0:          data.set(n, data.get(n) + 1);
0:        }
0:      }
1: 
0:     /**
0:       * Converts a value into a form that would help a human understand the internals of how the value
0:       * is being interpreted.  For text-like things, this is likely to be a list of the terms found with
0:       * associated weights (if any).
0:       *
0:       * @param originalForm The original form of the value as a string.
0:       * @return A string that a human can read.
0:       */
0:      @Override
0:      public String asString(String originalForm) {
0:        return String.format("%s:%s", getName(), originalForm);
0:      }
1: 
0:      protected int hash1(String term1, String term2, int probe, int numFeatures) {
0:        return hash(term1, term2, probe+INTERACTION_VALUE_HASH_SEED_1,numFeatures);
0:      }
1: 
0:      protected int hash2(String term1, String term2, int probe, int numFeatures) {
0:        return hash(term1, term2, probe+INTERACTION_VALUE_HASH_SEED_2,numFeatures);
0:      }
0: }
1: 
============================================================================