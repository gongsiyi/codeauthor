1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
1:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:a07bfc3: import org.apache.mahout.common.RandomUtils;
1:a07bfc3: 
1:a07bfc3: import java.util.Random;
1:a07bfc3: 
1:8b6a26a: public final class Normal extends AbstractSamplerFunction {
1:6d16230:   private final Random rand = RandomUtils.getRandom();
1:6d16230:   private double mean = 0;
1:6d16230:   private double sd = 1;
1:a07bfc3: 
1:6d16230:   public Normal() {}
1:a07bfc3: 
1:6d16230:   public Normal(double mean, double sd) {
1:6d16230:     this.mean = mean;
1:6d16230:     this.sd = sd;
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   @Override
1:6d16230:   public Double sample() {
1:6d16230:     return rand.nextGaussian() * sd + mean;
1:6d16230:   }
4:a07bfc3: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:   private final Random rand = RandomUtils.getRandom();
1:   private double mean = 0;
1:   private double sd = 1;
1:   public Normal() {}
1:   public Normal(double mean, double sd) {
1:     this.mean = mean;
1:     this.sd = sd;
1:   }
1:   @Override
1:   public Double sample() {
1:     return rand.nextGaussian() * sd + mean;
1:   }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: public final class Normal extends AbstractSamplerFunction {
/////////////////////////////////////////////////////////////////////////
0:     @Override
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: 
1: import java.util.Random;
1: 
0: public class Normal extends AbstractSamplerFunction {
0:     private final Random rand = RandomUtils.getRandom();
0:     private double mean = 0;
0:     private double sd = 1;
1: 
0:     public Normal() {
1:     }
1: 
0:     public Normal(double mean, double sd) {
0:         this.mean = mean;
0:         this.sd = sd;
1:     }
1: 
0:     public Double sample() {
0:         return rand.nextGaussian() * sd + mean;
1:     }
1: }
============================================================================