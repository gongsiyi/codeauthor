1:bb54d45: /*
1:bb54d45:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bb54d45:  * contributor license agreements.  See the NOTICE file distributed with
1:bb54d45:  * this work for additional information regarding copyright ownership.
1:bb54d45:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bb54d45:  * (the "License"); you may not use this file except in compliance with
1:bb54d45:  * the License.  You may obtain a copy of the License at
1:bb54d45:  *
1:bb54d45:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bb54d45:  *
1:bb54d45:  * Unless required by applicable law or agreed to in writing, software
1:bb54d45:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bb54d45:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bb54d45:  * See the License for the specific language governing permissions and
1:bb54d45:  * limitations under the License.
1:bb54d45:  */
1:bb54d45: 
1:bb54d45: package org.apache.mahout.vectorizer.encoders;
1:bb54d45: 
1:3a16b20: import org.apache.mahout.math.MurmurHash;
1:3a16b20: 
1:bb54d45: /**
1:bb54d45:  * Provides basic hashing semantics for encoders where the probe locations
1:bb54d45:  * depend only on the name of the variable.
1:bb54d45:  */
1:bb54d45: public abstract class CachingValueEncoder extends FeatureVectorEncoder {
1:bb54d45:   private int[] cachedProbes;
1:bb54d45: 
1:939ac30:   protected CachingValueEncoder(String name, int seed) {
1:bb54d45:     super(name);
1:bb54d45:     cacheProbeLocations(seed);
1:bb54d45:   }
1:bb54d45: 
1:bb54d45:   /**
1:bb54d45:    * Sets the number of locations in the feature vector that a value should be in.
1:bb54d45:    * This causes the cached probe locations to be recomputed.
1:bb54d45:    *
1:bb54d45:    * @param probes Number of locations to increment.
1:bb54d45:    */
1:bb54d45:   @Override
1:bb54d45:   public void setProbes(int probes) {
1:bb54d45:     super.setProbes(probes);
1:697a8d7:     cacheProbeLocations(getSeed());
1:bb54d45:   }
1:bb54d45: 
1:697a8d7:   protected abstract int getSeed();
1:697a8d7: 
1:bb54d45:   private void cacheProbeLocations(int seed) {
1:bb54d45:     cachedProbes = new int[getProbes()];
1:bb54d45:     for (int i = 0; i < getProbes(); i++) {
1:bb54d45:       // note that the modulo operation is deferred
1:bb54d45:       cachedProbes[i] = (int) MurmurHash.hash64A(bytesForString(getName()), seed + i);
1:bb54d45:     }
1:bb54d45:   }
1:bb54d45: 
1:bb54d45:   @Override
1:bb54d45:   protected int hashForProbe(byte[] originalForm, int dataSize, String name, int probe) {
1:bb54d45:     int h = cachedProbes[probe] % dataSize;
1:bb54d45:     if (h < 0) {
1:bb54d45:       h += dataSize;
1:bb54d45:     }
1:bb54d45:     return h;
1:bb54d45:   }
1:bb54d45: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Ted Dunning
-------------------------------------------------------------------------------
commit:3a16b20
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.MurmurHash;
1: 
commit:697a8d7
/////////////////////////////////////////////////////////////////////////
1:     cacheProbeLocations(getSeed());
1:   protected abstract int getSeed();
1: 
commit:bb54d45
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.vectorizer.encoders;
1: 
1: /**
1:  * Provides basic hashing semantics for encoders where the probe locations
1:  * depend only on the name of the variable.
1:  */
1: public abstract class CachingValueEncoder extends FeatureVectorEncoder {
1:   private int[] cachedProbes;
1: 
0:   public CachingValueEncoder(String name, int seed) {
1:     super(name);
1:     cacheProbeLocations(seed);
1:   }
1: 
1:   /**
1:    * Sets the number of locations in the feature vector that a value should be in.
1:    * This causes the cached probe locations to be recomputed.
1:    *
1:    * @param probes Number of locations to increment.
1:    */
1:   @Override
1:   public void setProbes(int probes) {
1:     super.setProbes(probes);
0:     cacheProbeLocations(CONTINUOUS_VALUE_HASH_SEED);
1:   }
1: 
1:   private void cacheProbeLocations(int seed) {
1:     cachedProbes = new int[getProbes()];
1:     for (int i = 0; i < getProbes(); i++) {
1:       // note that the modulo operation is deferred
1:       cachedProbes[i] = (int) MurmurHash.hash64A(bytesForString(getName()), seed + i);
1:     }
1:   }
1: 
1:   @Override
1:   protected int hashForProbe(byte[] originalForm, int dataSize, String name, int probe) {
1:     int h = cachedProbes[probe] % dataSize;
1:     if (h < 0) {
1:       h += dataSize;
1:     }
1:     return h;
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:939ac30
/////////////////////////////////////////////////////////////////////////
1:   protected CachingValueEncoder(String name, int seed) {
============================================================================