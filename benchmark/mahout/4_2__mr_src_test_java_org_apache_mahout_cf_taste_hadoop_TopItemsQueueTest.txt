1:8a8e10d: /**
1:8a8e10d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8a8e10d:  * contributor license agreements.  See the NOTICE file distributed with
1:8a8e10d:  * this work for additional information regarding copyright ownership.
1:8a8e10d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8a8e10d:  * (the "License"); you may not use this file except in compliance with
1:8a8e10d:  * the License.  You may obtain a copy of the License at
1:8a8e10d:  *
1:8a8e10d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8a8e10d:  *
1:8a8e10d:  * Unless required by applicable law or agreed to in writing, software
1:8a8e10d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8a8e10d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a8e10d:  * See the License for the specific language governing permissions and
1:8a8e10d:  * limitations under the License.
1:8a8e10d:  */
1:8a8e10d: 
1:d95bdda: package org.apache.mahout.cf.taste.hadoop;
1:8a8e10d: 
1:8a8e10d: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1:8a8e10d: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:10c535c: import org.apache.mahout.common.MahoutTestCase;
1:8a8e10d: import org.junit.Test;
1:8a8e10d: 
1:8a8e10d: import java.util.List;
1:8a8e10d: 
1:d95bdda: public class TopItemsQueueTest extends TasteTestCase {
1:8a8e10d: 
1:8a8e10d:   @Test
1:8a8e10d:   public void topK() {
1:8a8e10d: 
1:10c535c:     float[] ratings = {0.5f, 0.6f, 0.7f, 2.0f, 0.0f};
1:8a8e10d: 
1:8a8e10d:     List<RecommendedItem> topItems = findTop(ratings, 2);
1:8a8e10d: 
1:8a8e10d:     assertEquals(2, topItems.size());
1:10c535c:     assertEquals(3L, topItems.get(0).getItemID());
1:10c535c:     assertEquals(2.0f, topItems.get(0).getValue(), MahoutTestCase.EPSILON);
1:10c535c:     assertEquals(2L, topItems.get(1).getItemID());
1:10c535c:     assertEquals(0.7f, topItems.get(1).getValue(), MahoutTestCase.EPSILON);
1:8a8e10d:   }
1:8a8e10d: 
1:8a8e10d:   @Test
1:8a8e10d:   public void topKInputSmallerThanK() {
1:8a8e10d: 
1:10c535c:     float[] ratings = {0.7f, 2.0f};
1:8a8e10d: 
1:8a8e10d:     List<RecommendedItem> topItems = findTop(ratings, 3);
1:8a8e10d: 
1:8a8e10d:     assertEquals(2, topItems.size());
1:10c535c:     assertEquals(1L, topItems.get(0).getItemID());
1:10c535c:     assertEquals(2.0f, topItems.get(0).getValue(), MahoutTestCase.EPSILON);
1:10c535c:     assertEquals(0L, topItems.get(1).getItemID());
1:10c535c:     assertEquals(0.7f, topItems.get(1).getValue(), MahoutTestCase.EPSILON);
1:8a8e10d:   }
1:8a8e10d: 
1:8a8e10d: 
1:10c535c:   private static List<RecommendedItem> findTop(float[] ratings, int k) {
1:d95bdda:     TopItemsQueue queue = new TopItemsQueue(k);
1:8a8e10d: 
1:8a8e10d:     for (int item = 0; item < ratings.length; item++) {
1:8a8e10d:       MutableRecommendedItem top = queue.top();
1:8a8e10d:       if (ratings[item] > top.getValue()) {
1:8a8e10d:         top.set(item, ratings[item]);
1:8a8e10d:         queue.updateTop();
1:8a8e10d:       }
1:8a8e10d:     }
1:8a8e10d: 
1:8a8e10d:     return queue.getTopItems();
1:8a8e10d:   }
1:8a8e10d: 
1:8a8e10d: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
commit:d95bdda
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.cf.taste.hadoop;
0: import org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem;
0: import org.apache.mahout.cf.taste.hadoop.TopItemsQueue;
/////////////////////////////////////////////////////////////////////////
1: public class TopItemsQueueTest extends TasteTestCase {
/////////////////////////////////////////////////////////////////////////
1:     TopItemsQueue queue = new TopItemsQueue(k);
commit:8a8e10d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.cf.taste.hadoop.als;
1: 
1: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1: import org.junit.Test;
1: 
1: import java.util.List;
1: 
0: public class TopItemQueueTest extends TasteTestCase {
1: 
1:   @Test
1:   public void topK() {
1: 
0:     float[] ratings = { .5f, .6f, .7f, 2f, 0f };
1: 
1:     List<RecommendedItem> topItems = findTop(ratings, 2);
1: 
1:     assertEquals(2, topItems.size());
0:     assertEquals(3l, topItems.get(0).getItemID());
0:     assertEquals(2f, topItems.get(0).getValue(), TasteTestCase.EPSILON);
0:     assertEquals(2l, topItems.get(1).getItemID());
0:     assertEquals(.7f, topItems.get(1).getValue(), TasteTestCase.EPSILON);
1:   }
1: 
1:   @Test
1:   public void topKInputSmallerThanK() {
1: 
0:     float[] ratings = {.7f, 2f};
1: 
1:     List<RecommendedItem> topItems = findTop(ratings, 3);
1: 
1:     assertEquals(2, topItems.size());
0:     assertEquals(1l, topItems.get(0).getItemID());
0:     assertEquals(2f, topItems.get(0).getValue(), TasteTestCase.EPSILON);
0:     assertEquals(0l, topItems.get(1).getItemID());
0:     assertEquals(.7f, topItems.get(1).getValue(), TasteTestCase.EPSILON);
1:   }
1: 
1: 
0:   private List<RecommendedItem> findTop(float[] ratings, int k) {
0:     TopItemQueue queue = new TopItemQueue(k);
1: 
1:     for (int item = 0; item < ratings.length; item++) {
1:       MutableRecommendedItem top = queue.top();
1:       if (ratings[item] > top.getValue()) {
1:         top.set(item, ratings[item]);
1:         queue.updateTop();
1:       }
1:     }
1: 
1:     return queue.getTopItems();
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
/////////////////////////////////////////////////////////////////////////
1:     float[] ratings = {0.5f, 0.6f, 0.7f, 2.0f, 0.0f};
1:     assertEquals(3L, topItems.get(0).getItemID());
1:     assertEquals(2.0f, topItems.get(0).getValue(), MahoutTestCase.EPSILON);
1:     assertEquals(2L, topItems.get(1).getItemID());
1:     assertEquals(0.7f, topItems.get(1).getValue(), MahoutTestCase.EPSILON);
1:     float[] ratings = {0.7f, 2.0f};
1:     assertEquals(1L, topItems.get(0).getItemID());
1:     assertEquals(2.0f, topItems.get(0).getValue(), MahoutTestCase.EPSILON);
1:     assertEquals(0L, topItems.get(1).getItemID());
1:     assertEquals(0.7f, topItems.get(1).getValue(), MahoutTestCase.EPSILON);
1:   private static List<RecommendedItem> findTop(float[] ratings, int k) {
============================================================================