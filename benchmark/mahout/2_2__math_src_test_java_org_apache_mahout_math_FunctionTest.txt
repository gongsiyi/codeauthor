1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:f95d551: package org.apache.mahout.math;
1:f95d551: 
1:f95d551: import java.lang.reflect.Field;
1:f95d551: import java.lang.reflect.Modifier;
1:f95d551: import java.util.Collection;
1:f95d551: import java.util.List;
1:f95d551: import java.util.Random;
1:f95d551: 
1:f95d551: import com.google.common.collect.Lists;
1:f95d551: import org.apache.mahout.common.RandomUtils;
1:f95d551: import org.apache.mahout.math.function.DoubleDoubleFunction;
1:f95d551: import org.apache.mahout.math.function.Functions;
1:f95d551: import org.apache.mahout.math.jet.math.Constants;
1:f95d551: import org.junit.Test;
1:f95d551: import org.junit.runner.RunWith;
1:f95d551: import org.junit.runners.Parameterized;
1:f95d551: 
1:f95d551: import static org.junit.Assert.assertEquals;
1:f95d551: 
1:f95d551: @RunWith(Parameterized.class)
1:f95d551: public class FunctionTest {
1:f95d551:   private static final int NUM_POINTS = 100;
1:f95d551: 
1:f95d551:   private final Random random = RandomUtils.getRandom();
1:f95d551: 
1:f95d551:   private DoubleDoubleFunction function;
1:f95d551:   private String functionName;
1:f95d551: 
1:f95d551:   @Parameterized.Parameters
1:f95d551:   public static Collection<Object[]> generateData() {
1:f95d551:     List<Object[]> data = Lists.newArrayList();
1:f95d551:     for (Field field : Functions.class.getDeclaredFields()) {
1:f95d551:       if (field.getType().isAssignableFrom(DoubleDoubleFunction.class)
1:f95d551:           && Modifier.isStatic(field.getModifiers())
1:f95d551:           && !field.getName().equals("SECOND_LEFT_ZERO")) {
1:f95d551:         try {
1:f95d551:           data.add(new Object[] {field.get(null), field.getName()});
1:f95d551:         } catch (IllegalAccessException e) {
1:f95d551:           System.out.printf("Couldn't access Functions field %s\n", field.getName());
1:f95d551:         }
1:f95d551:       }
1:f95d551:     }
1:f95d551:     return data;
1:f95d551:   }
1:f95d551: 
1:f95d551:   public FunctionTest(DoubleDoubleFunction function, String functionName) {
1:f95d551:     this.function = function;
1:f95d551:     this.functionName = functionName;
1:f95d551:   }
1:f95d551: 
1:f95d551:   @Test
1:f95d551:   public void testIsLikeRightPlus() {
1:f95d551:     if (!function.isLikeRightPlus()) {
1:f95d551:       return;
1:f95d551:     }
1:f95d551:     for (int i = 0; i < NUM_POINTS; ++i) {
1:f95d551:       double x = random.nextDouble();
1:f95d551:       assertEquals(functionName, x, function.apply(x, 0), 0);
1:f95d551:     }
1:f95d551:   }
1:f95d551: 
1:f95d551:   @Test
1:f95d551:   public void testIsLikeLeftMult() {
1:f95d551:     if (!function.isLikeLeftMult()) {
1:f95d551:       return;
1:f95d551:     }
1:f95d551:     for (int i = 0; i < NUM_POINTS; ++i) {
1:f95d551:       double y = random.nextDouble();
1:f95d551:       assertEquals(functionName, 0, function.apply(0, y), 0);
1:f95d551:     }
1:f95d551:   }
1:f95d551: 
1:f95d551:   @Test
1:f95d551:   public void testIsLikeRightMult() {
1:f95d551:     if (!function.isLikeRightMult()) {
1:f95d551:       return;
1:f95d551:     }
1:f95d551:     for (int i = 0; i < NUM_POINTS; ++i) {
1:f95d551:       double x = random.nextDouble();
1:f95d551:       assertEquals(functionName, 0, function.apply(x, 0), 0);
1:f95d551:     }
1:f95d551:   }
1:f95d551: 
1:f95d551:   @Test
1:f95d551:   public void testIsCommutative() {
1:f95d551:     if (!function.isCommutative()) {
1:f95d551:       return;
1:f95d551:     }
1:f95d551:     for (int i = 0; i < NUM_POINTS; ++i) {
1:f95d551:       double x = random.nextDouble();
1:f95d551:       double y = random.nextDouble();
1:f95d551:       assertEquals(functionName, function.apply(x, y), function.apply(y, x), Constants.EPSILON);
1:f95d551:     }
1:f95d551:   }
1:f95d551: 
1:f95d551:   @Test
1:f95d551:   public void testIsAssociative() {
1:f95d551:     if (!function.isAssociative()) {
1:f95d551:       return;
1:f95d551:     }
1:f95d551:     for (int i = 0; i < NUM_POINTS; ++i) {
1:f95d551:       double x = random.nextDouble();
1:f95d551:       double y = random.nextDouble();
1:f95d551:       double z = random.nextDouble();
1:f95d551:       assertEquals(functionName, function.apply(x, function.apply(y, z)), function.apply(function.apply(x, y), z),
1:f95d551:           Constants.EPSILON);
1:f95d551:     }
1:f95d551:   }
1:f95d551: 
1:f95d551:   @Test
1:f95d551:   public void testIsDensifying() {
1:f95d551:     if (!function.isDensifying()) {
1:f95d551:       assertEquals(functionName, 0, function.apply(0, 0), 0);
1:f95d551:     }
1:f95d551:   }
1:f95d551: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
author:dfilimon
-------------------------------------------------------------------------------
commit:f95d551
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
1: 
1: import java.lang.reflect.Field;
1: import java.lang.reflect.Modifier;
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Random;
1: 
1: import com.google.common.collect.Lists;
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.function.DoubleDoubleFunction;
1: import org.apache.mahout.math.function.Functions;
1: import org.apache.mahout.math.jet.math.Constants;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: @RunWith(Parameterized.class)
1: public class FunctionTest {
1:   private static final int NUM_POINTS = 100;
1: 
1:   private final Random random = RandomUtils.getRandom();
1: 
1:   private DoubleDoubleFunction function;
1:   private String functionName;
1: 
1:   @Parameterized.Parameters
1:   public static Collection<Object[]> generateData() {
1:     List<Object[]> data = Lists.newArrayList();
1:     for (Field field : Functions.class.getDeclaredFields()) {
1:       if (field.getType().isAssignableFrom(DoubleDoubleFunction.class)
1:           && Modifier.isStatic(field.getModifiers())
1:           && !field.getName().equals("SECOND_LEFT_ZERO")) {
1:         try {
1:           data.add(new Object[] {field.get(null), field.getName()});
1:         } catch (IllegalAccessException e) {
1:           System.out.printf("Couldn't access Functions field %s\n", field.getName());
1:         }
1:       }
1:     }
1:     return data;
1:   }
1: 
1:   public FunctionTest(DoubleDoubleFunction function, String functionName) {
1:     this.function = function;
1:     this.functionName = functionName;
1:   }
1: 
1:   @Test
1:   public void testIsLikeRightPlus() {
1:     if (!function.isLikeRightPlus()) {
1:       return;
1:     }
1:     for (int i = 0; i < NUM_POINTS; ++i) {
1:       double x = random.nextDouble();
1:       assertEquals(functionName, x, function.apply(x, 0), 0);
1:     }
1:   }
1: 
1:   @Test
1:   public void testIsLikeLeftMult() {
1:     if (!function.isLikeLeftMult()) {
1:       return;
1:     }
1:     for (int i = 0; i < NUM_POINTS; ++i) {
1:       double y = random.nextDouble();
1:       assertEquals(functionName, 0, function.apply(0, y), 0);
1:     }
1:   }
1: 
1:   @Test
1:   public void testIsLikeRightMult() {
1:     if (!function.isLikeRightMult()) {
1:       return;
1:     }
1:     for (int i = 0; i < NUM_POINTS; ++i) {
1:       double x = random.nextDouble();
1:       assertEquals(functionName, 0, function.apply(x, 0), 0);
1:     }
1:   }
1: 
1:   @Test
1:   public void testIsCommutative() {
1:     if (!function.isCommutative()) {
1:       return;
1:     }
1:     for (int i = 0; i < NUM_POINTS; ++i) {
1:       double x = random.nextDouble();
1:       double y = random.nextDouble();
1:       assertEquals(functionName, function.apply(x, y), function.apply(y, x), Constants.EPSILON);
1:     }
1:   }
1: 
1:   @Test
1:   public void testIsAssociative() {
1:     if (!function.isAssociative()) {
1:       return;
1:     }
1:     for (int i = 0; i < NUM_POINTS; ++i) {
1:       double x = random.nextDouble();
1:       double y = random.nextDouble();
1:       double z = random.nextDouble();
1:       assertEquals(functionName, function.apply(x, function.apply(y, z)), function.apply(function.apply(x, y), z),
1:           Constants.EPSILON);
1:     }
1:   }
1: 
1:   @Test
1:   public void testIsDensifying() {
1:     if (!function.isDensifying()) {
1:       assertEquals(functionName, 0, function.apply(0, 0), 0);
1:     }
1:   }
1: }
============================================================================