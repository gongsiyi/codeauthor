1:27d33a2: /**
1:27d33a2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:27d33a2:  * contributor license agreements.  See the NOTICE file distributed with
1:27d33a2:  * this work for additional information regarding copyright ownership.
1:27d33a2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:27d33a2:  * (the "License"); you may not use this file except in compliance with
1:27d33a2:  * the License.  You may obtain a copy of the License at
1:27d33a2:  *
1:27d33a2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:27d33a2:  *
1:27d33a2:  * Unless required by applicable law or agreed to in writing, software
1:27d33a2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27d33a2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27d33a2:  * See the License for the specific language governing permissions and
1:27d33a2:  * limitations under the License.
1:27d33a2:  */
2:27d33a2: 
1:27d33a2: package org.apache.mahout.classifier.sequencelearning.hmm;
1:27d33a2: 
1:27d33a2: import java.util.Arrays;
1:d53cf4a: import java.util.List;
1:27d33a2: 
1:27d33a2: import org.apache.mahout.math.DenseMatrix;
1:27d33a2: import org.apache.mahout.math.DenseVector;
1:27d33a2: import org.apache.mahout.math.Matrix;
1:27d33a2: import org.apache.mahout.math.Vector;
1:27d33a2: import org.junit.Test;
1:27d33a2: 
1:27d33a2: public class HMMUtilsTest extends HMMTestBase {
1:27d33a2: 
1:d53cf4a:   private Matrix legal22;
1:d53cf4a:   private Matrix legal23;
1:d53cf4a:   private Matrix legal33;
1:d53cf4a:   private Vector legal2;
1:d53cf4a:   private Matrix illegal22;
1:27d33a2: 
1:d53cf4a:   @Override
1:27d33a2:   public void setUp() throws Exception {
1:27d33a2:     super.setUp();
1:d53cf4a:     legal22 = new DenseMatrix(new double[][]{{0.5, 0.5}, {0.3, 0.7}});
1:d53cf4a:     legal23 = new DenseMatrix(new double[][]{{0.2, 0.2, 0.6},
1:27d33a2:         {0.3, 0.3, 0.4}});
1:d53cf4a:     legal33 = new DenseMatrix(new double[][]{{0.1, 0.1, 0.8},
1:27d33a2:         {0.1, 0.2, 0.7}, {0.2, 0.3, 0.5}});
1:27d33a2:     legal2 = new DenseVector(new double[]{0.4, 0.6});
1:d53cf4a:     illegal22 = new DenseMatrix(new double[][]{{1, 2}, {3, 4}});
1:d53cf4a:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testValidatorLegal() {
1:d53cf4a:     HmmUtils.validate(new HmmModel(legal22, legal23, legal2));
2:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testValidatorDimensionError() {
1:27d33a2:     try {
1:d53cf4a:       HmmUtils.validate(new HmmModel(legal33, legal23, legal2));
1:27d33a2:     } catch (IllegalArgumentException e) {
1:27d33a2:       // success
1:27d33a2:       return;
1:27d33a2:     }
1:d53cf4a:     fail();
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testValidatorIllegelMatrixError() {
1:27d33a2:     try {
1:d53cf4a:       HmmUtils.validate(new HmmModel(illegal22, legal23, legal2));
1:27d33a2:     } catch (IllegalArgumentException e) {
1:27d33a2:       // success
1:27d33a2:       return;
1:27d33a2:     }
1:d53cf4a:     fail();
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testEncodeStateSequence() {
1:27d33a2:     String[] hiddenSequence = {"H1", "H2", "H0", "H3", "H4"};
1:27d33a2:     String[] outputSequence = {"O1", "O2", "O4", "O0"};
1:27d33a2:     // test encoding the hidden Sequence
1:d53cf4a:     int[] hiddenSequenceEnc = HmmUtils.encodeStateSequence(getModel(), Arrays
1:27d33a2:         .asList(hiddenSequence), false, -1);
1:d53cf4a:     int[] outputSequenceEnc = HmmUtils.encodeStateSequence(getModel(), Arrays
1:27d33a2:         .asList(outputSequence), true, -1);
1:27d33a2:     // expected state sequences
1:27d33a2:     int[] hiddenSequenceExp = {1, 2, 0, 3, -1};
1:27d33a2:     int[] outputSequenceExp = {1, 2, -1, 0};
1:27d33a2:     // compare
1:d53cf4a:     for (int i = 0; i < hiddenSequenceEnc.length; ++i) {
1:d53cf4a:       assertEquals(hiddenSequenceExp[i], hiddenSequenceEnc[i]);
1:d53cf4a:     }
1:d53cf4a:     for (int i = 0; i < outputSequenceEnc.length; ++i) {
1:d53cf4a:       assertEquals(outputSequenceExp[i], outputSequenceEnc[i]);
1:d53cf4a:     }
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testDecodeStateSequence() {
1:27d33a2:     int[] hiddenSequence = {1, 2, 0, 3, 10};
1:27d33a2:     int[] outputSequence = {1, 2, 10, 0};
1:27d33a2:     // test encoding the hidden Sequence
1:d53cf4a:     List<String> hiddenSequenceDec = HmmUtils.decodeStateSequence(
1:d53cf4a:         getModel(), hiddenSequence, false, "unknown");
1:d53cf4a:     List<String> outputSequenceDec = HmmUtils.decodeStateSequence(
1:d53cf4a:         getModel(), outputSequence, true, "unknown");
1:27d33a2:     // expected state sequences
1:27d33a2:     String[] hiddenSequenceExp = {"H1", "H2", "H0", "H3", "unknown"};
1:27d33a2:     String[] outputSequenceExp = {"O1", "O2", "unknown", "O0"};
1:27d33a2:     // compare
1:d53cf4a:     for (int i = 0; i < hiddenSequenceExp.length; ++i) {
1:d53cf4a:       assertEquals(hiddenSequenceExp[i], hiddenSequenceDec.get(i));
1:d53cf4a:     }
1:d53cf4a:     for (int i = 0; i < outputSequenceExp.length; ++i) {
1:d53cf4a:       assertEquals(outputSequenceExp[i], outputSequenceDec.get(i));
1:d53cf4a:     }
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testNormalizeModel() {
1:27d33a2:     DenseVector ip = new DenseVector(new double[]{10, 20});
1:27d33a2:     DenseMatrix tr = new DenseMatrix(new double[][]{{10, 10}, {20, 25}});
1:27d33a2:     DenseMatrix em = new DenseMatrix(new double[][]{{5, 7}, {10, 15}});
1:27d33a2:     HmmModel model = new HmmModel(tr, em, ip);
1:27d33a2:     HmmUtils.normalizeModel(model);
1:27d33a2:     // the model should be valid now
1:27d33a2:     HmmUtils.validate(model);
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testTruncateModel() {
1:27d33a2:     DenseVector ip = new DenseVector(new double[]{0.0001, 0.0001, 0.9998});
1:27d33a2:     DenseMatrix tr = new DenseMatrix(new double[][]{
1:27d33a2:         {0.9998, 0.0001, 0.0001}, {0.0001, 0.9998, 0.0001},
1:27d33a2:         {0.0001, 0.0001, 0.9998}});
1:27d33a2:     DenseMatrix em = new DenseMatrix(new double[][]{
1:27d33a2:         {0.9998, 0.0001, 0.0001}, {0.0001, 0.9998, 0.0001},
1:27d33a2:         {0.0001, 0.0001, 0.9998}});
1:27d33a2:     HmmModel model = new HmmModel(tr, em, ip);
1:27d33a2:     // now truncate the model
1:27d33a2:     HmmModel sparseModel = HmmUtils.truncateModel(model, 0.01);
1:27d33a2:     // first make sure this is a valid model
1:27d33a2:     HmmUtils.validate(sparseModel);
1:27d33a2:     // now check whether the values are as expected
1:27d33a2:     Vector sparse_ip = sparseModel.getInitialProbabilities();
1:27d33a2:     Matrix sparse_tr = sparseModel.getTransitionMatrix();
1:27d33a2:     Matrix sparse_em = sparseModel.getEmissionMatrix();
1:27d33a2:     for (int i = 0; i < sparseModel.getNrOfHiddenStates(); ++i) {
1:4194a28:       assertEquals(i == 2 ? 1.0 : 0.0, sparse_ip.getQuick(i), EPSILON);
1:27d33a2:       for (int j = 0; j < sparseModel.getNrOfHiddenStates(); ++j) {
1:27d33a2:         if (i == j) {
1:d53cf4a:           assertEquals(1.0, sparse_tr.getQuick(i, j), EPSILON);
1:d53cf4a:           assertEquals(1.0, sparse_em.getQuick(i, j), EPSILON);
1:d53cf4a:         } else {
1:d53cf4a:           assertEquals(0.0, sparse_tr.getQuick(i, j), EPSILON);
1:d53cf4a:           assertEquals(0.0, sparse_em.getQuick(i, j), EPSILON);
1:27d33a2:         }
1:27d33a2:       }
1:27d33a2:     }
1:27d33a2:   }
1:27d33a2: 
1:27d33a2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:       assertEquals(i == 2 ? 1.0 : 0.0, sparse_ip.getQuick(i), EPSILON);
commit:d53cf4a
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:   private Matrix legal22;
1:   private Matrix legal23;
1:   private Matrix legal33;
1:   private Vector legal2;
1:   private Matrix illegal22;
1:   @Override
1:     legal22 = new DenseMatrix(new double[][]{{0.5, 0.5}, {0.3, 0.7}});
1:     legal23 = new DenseMatrix(new double[][]{{0.2, 0.2, 0.6},
1:     legal33 = new DenseMatrix(new double[][]{{0.1, 0.1, 0.8},
1:     illegal22 = new DenseMatrix(new double[][]{{1, 2}, {3, 4}});
1:     HmmUtils.validate(new HmmModel(legal22, legal23, legal2));
1:       HmmUtils.validate(new HmmModel(legal33, legal23, legal2));
1:     fail();
1:       HmmUtils.validate(new HmmModel(illegal22, legal23, legal2));
1:     fail();
/////////////////////////////////////////////////////////////////////////
1:     int[] hiddenSequenceEnc = HmmUtils.encodeStateSequence(getModel(), Arrays
1:     int[] outputSequenceEnc = HmmUtils.encodeStateSequence(getModel(), Arrays
1:     for (int i = 0; i < hiddenSequenceEnc.length; ++i) {
1:       assertEquals(hiddenSequenceExp[i], hiddenSequenceEnc[i]);
1:     }
1:     for (int i = 0; i < outputSequenceEnc.length; ++i) {
1:       assertEquals(outputSequenceExp[i], outputSequenceEnc[i]);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     List<String> hiddenSequenceDec = HmmUtils.decodeStateSequence(
1:         getModel(), hiddenSequence, false, "unknown");
1:     List<String> outputSequenceDec = HmmUtils.decodeStateSequence(
1:         getModel(), outputSequence, true, "unknown");
1:     for (int i = 0; i < hiddenSequenceExp.length; ++i) {
1:       assertEquals(hiddenSequenceExp[i], hiddenSequenceDec.get(i));
1:     }
1:     for (int i = 0; i < outputSequenceExp.length; ++i) {
1:       assertEquals(outputSequenceExp[i], outputSequenceDec.get(i));
1:     }
/////////////////////////////////////////////////////////////////////////
0:       if (i == 2) {
0:         assertEquals(1.0, sparse_ip.getQuick(i), EPSILON);
1:       } else {
0:         assertEquals(0.0, sparse_ip.getQuick(i), EPSILON);
1:       }
1:           assertEquals(1.0, sparse_tr.getQuick(i, j), EPSILON);
1:           assertEquals(1.0, sparse_em.getQuick(i, j), EPSILON);
1:           assertEquals(0.0, sparse_tr.getQuick(i, j), EPSILON);
1:           assertEquals(0.0, sparse_em.getQuick(i, j), EPSILON);
author:Isabel Drost
-------------------------------------------------------------------------------
commit:27d33a2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sequencelearning.hmm;
1: 
1: import java.util.Arrays;
1: 
0: import junit.framework.Assert;
1: 
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.junit.Test;
1: 
1: public class HMMUtilsTest extends HMMTestBase {
1: 
0:   Matrix legal2_2;
0:   Matrix legal2_3;
0:   Matrix legal3_3;
0:   Vector legal2;
0:   Matrix illegal2_2;
1: 
1:   public void setUp() throws Exception {
1:     super.setUp();
0:     legal2_2 = new DenseMatrix(new double[][]{{0.5, 0.5}, {0.3, 0.7}});
0:     legal2_3 = new DenseMatrix(new double[][]{{0.2, 0.2, 0.6},
1:         {0.3, 0.3, 0.4}});
0:     legal3_3 = new DenseMatrix(new double[][]{{0.1, 0.1, 0.8},
1:         {0.1, 0.2, 0.7}, {0.2, 0.3, 0.5}});
1:     legal2 = new DenseVector(new double[]{0.4, 0.6});
0:     illegal2_2 = new DenseMatrix(new double[][]{{1, 2}, {3, 4}});
1:   }
1: 
1:   @Test
1:   public void testValidatorLegal() {
0:     HmmUtils.validate(new HmmModel(legal2_2, legal2_3, legal2));
1:   }
1: 
1:   @Test
1:   public void testValidatorDimensionError() {
1:     try {
0:       HmmUtils.validate(new HmmModel(legal3_3, legal2_3, legal2));
1:     } catch (IllegalArgumentException e) {
1:       // success
1:       return;
1:     }
0:     Assert.fail();
1:   }
1: 
1:   @Test
1:   public void testValidatorIllegelMatrixError() {
1:     try {
0:       HmmUtils.validate(new HmmModel(illegal2_2, legal2_3, legal2));
1:     } catch (IllegalArgumentException e) {
1:       // success
1:       return;
1:     }
0:     Assert.fail();
1:   }
1: 
1:   @Test
1:   public void testEncodeStateSequence() {
1:     String[] hiddenSequence = {"H1", "H2", "H0", "H3", "H4"};
1:     String[] outputSequence = {"O1", "O2", "O4", "O0"};
1:     // test encoding the hidden Sequence
0:     int[] hiddenSequenceEnc = HmmUtils.encodeStateSequence(model, Arrays
1:         .asList(hiddenSequence), false, -1);
0:     int[] outputSequenceEnc = HmmUtils.encodeStateSequence(model, Arrays
1:         .asList(outputSequence), true, -1);
1:     // expected state sequences
1:     int[] hiddenSequenceExp = {1, 2, 0, 3, -1};
1:     int[] outputSequenceExp = {1, 2, -1, 0};
1:     // compare
0:     for (int i = 0; i < hiddenSequenceEnc.length; ++i)
0:       Assert.assertEquals(hiddenSequenceExp[i], hiddenSequenceEnc[i]);
0:     for (int i = 0; i < outputSequenceEnc.length; ++i)
0:       Assert.assertEquals(outputSequenceExp[i], outputSequenceEnc[i]);
1:   }
1: 
1:   @Test
1:   public void testDecodeStateSequence() {
1:     int[] hiddenSequence = {1, 2, 0, 3, 10};
1:     int[] outputSequence = {1, 2, 10, 0};
1:     // test encoding the hidden Sequence
0:     java.util.Vector<String> hiddenSequenceDec = HmmUtils.decodeStateSequence(
0:         model, hiddenSequence, false, "unknown");
0:     java.util.Vector<String> outputSequenceDec = HmmUtils.decodeStateSequence(
0:         model, outputSequence, true, "unknown");
1:     // expected state sequences
1:     String[] hiddenSequenceExp = {"H1", "H2", "H0", "H3", "unknown"};
1:     String[] outputSequenceExp = {"O1", "O2", "unknown", "O0"};
1:     // compare
0:     for (int i = 0; i < hiddenSequenceExp.length; ++i)
0:       Assert.assertEquals(hiddenSequenceExp[i], hiddenSequenceDec.get(i));
0:     for (int i = 0; i < outputSequenceExp.length; ++i)
0:       Assert.assertEquals(outputSequenceExp[i], outputSequenceDec.get(i));
1:   }
1: 
1:   @Test
1:   public void testNormalizeModel() {
1:     DenseVector ip = new DenseVector(new double[]{10, 20});
1:     DenseMatrix tr = new DenseMatrix(new double[][]{{10, 10}, {20, 25}});
1:     DenseMatrix em = new DenseMatrix(new double[][]{{5, 7}, {10, 15}});
1:     HmmModel model = new HmmModel(tr, em, ip);
1:     HmmUtils.normalizeModel(model);
1:     // the model should be valid now
1:     HmmUtils.validate(model);
1:   }
1: 
1:   @Test
1:   public void testTruncateModel() {
1:     DenseVector ip = new DenseVector(new double[]{0.0001, 0.0001, 0.9998});
1:     DenseMatrix tr = new DenseMatrix(new double[][]{
1:         {0.9998, 0.0001, 0.0001}, {0.0001, 0.9998, 0.0001},
1:         {0.0001, 0.0001, 0.9998}});
1:     DenseMatrix em = new DenseMatrix(new double[][]{
1:         {0.9998, 0.0001, 0.0001}, {0.0001, 0.9998, 0.0001},
1:         {0.0001, 0.0001, 0.9998}});
1:     HmmModel model = new HmmModel(tr, em, ip);
1:     // now truncate the model
1:     HmmModel sparseModel = HmmUtils.truncateModel(model, 0.01);
1:     // first make sure this is a valid model
1:     HmmUtils.validate(sparseModel);
1:     // now check whether the values are as expected
1:     Vector sparse_ip = sparseModel.getInitialProbabilities();
1:     Matrix sparse_tr = sparseModel.getTransitionMatrix();
1:     Matrix sparse_em = sparseModel.getEmissionMatrix();
1:     for (int i = 0; i < sparseModel.getNrOfHiddenStates(); ++i) {
0:       if (i == 2)
0:         Assert.assertEquals(1.0, sparse_ip.getQuick(i));
0:       else
0:         Assert.assertEquals(0.0, sparse_ip.getQuick(i));
1:       for (int j = 0; j < sparseModel.getNrOfHiddenStates(); ++j) {
1:         if (i == j) {
0:           Assert.assertEquals(1.0, sparse_tr.getQuick(i, j));
0:           Assert.assertEquals(1.0, sparse_em.getQuick(i, j));
0:         } else {
0:           Assert.assertEquals(0.0, sparse_tr.getQuick(i, j));
0:           Assert.assertEquals(0.0, sparse_em.getQuick(i, j));
1:         }
1:       }
1:     }
1:   }
1: 
1: }
============================================================================