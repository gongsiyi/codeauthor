1:1499411: /*
1:1499411:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1499411:  * contributor license agreements.  See the NOTICE file distributed with
1:1499411:  * this work for additional information regarding copyright ownership.
1:1499411:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1499411:  * (the "License"); you may not use this file except in compliance with
1:1499411:  * the License.  You may obtain a copy of the License at
1:1499411:  *
1:1499411:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1499411:  *
1:1499411:  * Unless required by applicable law or agreed to in writing, software
1:1499411:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1499411:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1499411:  * See the License for the specific language governing permissions and
1:1499411:  * limitations under the License.
1:1499411:  */
1:1499411: 
1:ffc7fab: package org.apache.mahout.math.hadoop.stochasticsvd;
1:ffc7fab: 
1:ffc7fab: import java.io.IOException;
1:ffc7fab: import java.util.Random;
1:ffc7fab: 
1:ffc7fab: import org.apache.hadoop.conf.Configuration;
1:ffc7fab: import org.apache.hadoop.fs.FileSystem;
1:ffc7fab: import org.apache.hadoop.fs.Path;
1:ffc7fab: import org.apache.hadoop.io.IntWritable;
1:ffc7fab: import org.apache.hadoop.io.SequenceFile;
1:1499411: import org.apache.hadoop.io.Writable;
1:921e201: import org.apache.mahout.common.MahoutTestCase;
1:4fbfbc6: import org.apache.mahout.common.RandomUtils;
1:ffc7fab: import org.apache.mahout.math.DenseMatrix;
1:ffc7fab: import org.apache.mahout.math.DenseVector;
1:ffc7fab: import org.apache.mahout.math.Matrix;
1:5a2250c: import org.apache.mahout.math.RandomAccessSparseVector;
1:ffc7fab: import org.apache.mahout.math.Vector;
1:ffc7fab: import org.apache.mahout.math.VectorWritable;
1:5a2250c: import org.apache.mahout.math.hadoop.stochasticsvd.qr.GramSchmidt;
1:ffc7fab: 
1:10c535c: public final class SSVDTestsHelper {
1:ffc7fab: 
1:1499411:   private SSVDTestsHelper() {
1:1499411:   }
1:1499411: 
1:ffc7fab:   static void generateDenseInput(Path outputPath,
1:ffc7fab:                                  FileSystem dfs,
1:ffc7fab:                                  Vector svalues,
1:ffc7fab:                                  int m,
1:ffc7fab:                                  int n) throws IOException {
1:ffc7fab:     generateDenseInput(outputPath, dfs, svalues, m, n, 0);
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   /**
1:ffc7fab:    * Generate some randome but meaningful input with singular value ratios of n,
1:ffc7fab:    * n-1...1
1:ffc7fab:    * 
1:ffc7fab:    * @param outputPath
1:ffc7fab:    */
1:ffc7fab: 
1:ffc7fab:   static void generateDenseInput(Path outputPath,
1:ffc7fab:                                  FileSystem dfs,
1:ffc7fab:                                  Vector svalues,
1:ffc7fab:                                  int m,
1:ffc7fab:                                  int n,
1:ffc7fab:                                  int startRowKey) throws IOException {
1:ffc7fab: 
1:4fbfbc6:     Random rnd = RandomUtils.getRandom();
1:ffc7fab: 
1:ffc7fab:     int svCnt = svalues.size();
1:ffc7fab:     Matrix v = generateDenseOrthonormalRandom(n, svCnt, rnd);
1:ffc7fab:     Matrix u = generateDenseOrthonormalRandom(m, svCnt, rnd);
1:ffc7fab: 
1:ffc7fab:     // apply singular values
1:ffc7fab:     Matrix mx = m > n ? v : u;
1:1499411:     for (int i = 0; i < svCnt; i++) {
1:ffc7fab:       mx.assignColumn(i, mx.viewColumn(i).times(svalues.getQuick(i)));
1:1499411:     }
1:ffc7fab: 
1:ffc7fab:     SequenceFile.Writer w =
1:ffc7fab:       SequenceFile.createWriter(dfs,
1:ffc7fab:                                 dfs.getConf(),
1:ffc7fab:                                 outputPath,
1:ffc7fab:                                 IntWritable.class,
1:ffc7fab:                                 VectorWritable.class);
1:ffc7fab:     try {
1:ffc7fab: 
1:ffc7fab:       Vector outV = new DenseVector(n);
1:1499411:       Writable vw = new VectorWritable(outV);
1:ffc7fab:       IntWritable iw = new IntWritable();
1:ffc7fab: 
1:ffc7fab:       for (int i = 0; i < m; i++) {
1:ffc7fab:         iw.set(startRowKey + i);
1:1499411:         for (int j = 0; j < n; j++) {
1:ffc7fab:           outV.setQuick(j, u.viewRow(i).dot(v.viewRow(j)));
1:1499411:         }
1:ffc7fab:         w.append(iw, vw);
1:ffc7fab:       }
1:ffc7fab: 
1:ffc7fab:     } finally {
1:ffc7fab:       w.close();
1:ffc7fab:     }
1:ffc7fab: 
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   static Matrix generateDenseOrthonormalRandom(int m, int n, Random rnd) {
1:1499411:     Matrix result = new DenseMatrix(m, n);
1:ffc7fab:     for (int j = 0; j < n; j++) {
1:ffc7fab:       for (int i = 0; i < m; i++) {
1:ffc7fab:         result.setQuick(i, j, rnd.nextDouble() - 0.5);
1:ffc7fab:       }
1:ffc7fab:     }
1:5a2250c:     GramSchmidt.orthonormalizeColumns(result);
1:175701c:     SSVDCommonTest.assertOrthonormality(result, false, 1.0e-10);
1:ffc7fab:     return result;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   // do not use. for internal consumption only.
1:ffc7fab:   public static void main(String[] args) throws Exception {
1:ffc7fab:     // create 1Gb input for distributed tests.
1:921e201:     MahoutTestCase ca = new MahoutTestCase();
1:921e201:     Configuration conf = ca.getConfiguration();
1:ffc7fab:     FileSystem dfs = FileSystem.getLocal(conf);
1:ffc7fab:     Path outputDir=new Path("/tmp/DRM");
1:ffc7fab:     dfs.mkdirs(outputDir);
1:5a2250c: //    for ( int i = 1; i <= 10; i++ ) {
1:5a2250c: //      generateDenseInput(new Path(outputDir,String.format("part-%05d",i)),dfs,
1:5a2250c: //                         new DenseVector ( new double[] {
1:5a2250c: //                             15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0.8,0.3,0.1,0.01
1:5a2250c: //                         }),1200,10000,(i-1)*1200);
1:5a2250c: //    }
1:5a2250c:     
1:5a2250c:     /*
1:5a2250c:      *  create 2Gb sparse 4.5 m x 4.5m input . (similar to wikipedia graph).
1:5a2250c:      *  
1:5a2250c:      *  In order to get at 2Gb, we need to generate ~ 40 non-zero items per row average.
1:5a2250c:      *   
1:5a2250c:      */
1:5a2250c:     
1:5a2250c:     outputDir = new Path("/tmp/DRM-sparse");
1:051cbcf:     Random rnd = RandomUtils.getRandom();
1:5a2250c: 
1:5a2250c:     SequenceFile.Writer w =
1:5a2250c:       SequenceFile.createWriter(dfs,
1:5a2250c:                                 dfs.getConf(),
1:5a2250c:                                 new Path(outputDir, "sparse.seq"),
1:5a2250c:                                 IntWritable.class,
1:5a2250c:                                 VectorWritable.class);
1:5a2250c: 
1:5a2250c:     try {
1:5a2250c: 
1:5a2250c:       IntWritable iw = new IntWritable();
1:5a2250c:       VectorWritable vw = new VectorWritable();
1:564c3e1:       int avgNZero = 40;
1:564c3e1:       int n = 4500000;
1:5a2250c:       for (int i = 1; i < n; i++) {
1:564c3e1:         Vector vector = new RandomAccessSparseVector(n);
1:5a2250c:         double nz = Math.round(avgNZero * (rnd.nextGaussian() + 1));
1:564c3e1:         if (nz < 0) {
1:5a2250c:           nz = 0;
1:564c3e1:         }
1:564c3e1:         for (int j = 1; j < nz; j++) {
1:5a2250c:           vector.set(rnd.nextInt(n), rnd.nextGaussian() * 25 + 3);
1:564c3e1:         }
1:5a2250c:         iw.set(i);
1:5a2250c:         vw.set(vector);
1:5a2250c:         w.append(iw, vw);
1:5a2250c:       }
1:5a2250c:     } finally {
1:5a2250c:       w.close();
1:ffc7fab:     }
1:ffc7fab:     
1:ffc7fab:   }
1:ffc7fab: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:sslavic
-------------------------------------------------------------------------------
commit:921e201
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
/////////////////////////////////////////////////////////////////////////
1:     MahoutTestCase ca = new MahoutTestCase();
1:     Configuration conf = ca.getConfiguration();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1: public final class SSVDTestsHelper {
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
1:     Random rnd = RandomUtils.getRandom();
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       int avgNZero = 40;
1:       int n = 4500000;
1:         Vector vector = new RandomAccessSparseVector(n);
1:         if (nz < 0) {
1:         }
1:         for (int j = 1; j < nz; j++) {
1:         }
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1:     Random rnd = RandomUtils.getRandom();
commit:1499411
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.Writable;
/////////////////////////////////////////////////////////////////////////
1:   private SSVDTestsHelper() {
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < svCnt; i++) {
1:     }
/////////////////////////////////////////////////////////////////////////
1:       Writable vw = new VectorWritable(outV);
1:         for (int j = 0; j < n; j++) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:     Matrix result = new DenseMatrix(m, n);
0:     SSVDPrototypeTest.assertOrthonormality(result, false, 1.0e-10);
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:175701c
/////////////////////////////////////////////////////////////////////////
1:     SSVDCommonTest.assertOrthonormality(result, false, 1.0e-10);
commit:5a2250c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.hadoop.stochasticsvd.qr.GramSchmidt;
/////////////////////////////////////////////////////////////////////////
1:     GramSchmidt.orthonormalizeColumns(result);
/////////////////////////////////////////////////////////////////////////
1: //    for ( int i = 1; i <= 10; i++ ) {
1: //      generateDenseInput(new Path(outputDir,String.format("part-%05d",i)),dfs,
1: //                         new DenseVector ( new double[] {
1: //                             15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0.8,0.3,0.1,0.01
1: //                         }),1200,10000,(i-1)*1200);
1: //    }
1:     
1:     /*
1:      *  create 2Gb sparse 4.5 m x 4.5m input . (similar to wikipedia graph).
1:      *  
1:      *  In order to get at 2Gb, we need to generate ~ 40 non-zero items per row average.
1:      *   
1:      */
1:     
1:     outputDir = new Path("/tmp/DRM-sparse");
0:     int n = 4500000;
0:     int avgNZero = 40;
0:     Random rnd = new Random();
1: 
1:     SequenceFile.Writer w =
1:       SequenceFile.createWriter(dfs,
1:                                 dfs.getConf(),
1:                                 new Path(outputDir, "sparse.seq"),
1:                                 IntWritable.class,
1:                                 VectorWritable.class);
1: 
1:     try {
1: 
1:       IntWritable iw = new IntWritable();
1:       VectorWritable vw = new VectorWritable();
1:       for (int i = 1; i < n; i++) {
0:         RandomAccessSparseVector vector = new RandomAccessSparseVector(n);
1:         double nz = Math.round(avgNZero * (rnd.nextGaussian() + 1));
0:         if (nz < 0)
1:           nz = 0;
0:         for (int j = 1; j < nz; j++)
1:           vector.set(rnd.nextInt(n), rnd.nextGaussian() * 25 + 3);
1:         iw.set(i);
1:         vw.set(vector);
1:         w.append(iw, vw);
1:       }
1:     } finally {
1:       w.close();
commit:ffc7fab
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.stochasticsvd;
1: 
1: import java.io.IOException;
1: import java.util.Random;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
0: import org.apache.mahout.math.hadoop.stochasticsvd.qr.GrammSchmidt;
1: 
0: public class SSVDTestsHelper {
1: 
1:   static void generateDenseInput(Path outputPath,
1:                                  FileSystem dfs,
1:                                  Vector svalues,
1:                                  int m,
1:                                  int n) throws IOException {
1:     generateDenseInput(outputPath, dfs, svalues, m, n, 0);
1:   }
1: 
1:   /**
1:    * Generate some randome but meaningful input with singular value ratios of n,
1:    * n-1...1
1:    * 
1:    * @param outputPath
1:    */
1: 
1:   static void generateDenseInput(Path outputPath,
1:                                  FileSystem dfs,
1:                                  Vector svalues,
1:                                  int m,
1:                                  int n,
1:                                  int startRowKey) throws IOException {
1: 
0:     Random rnd = new Random();
1: 
1:     int svCnt = svalues.size();
1:     Matrix v = generateDenseOrthonormalRandom(n, svCnt, rnd);
1:     Matrix u = generateDenseOrthonormalRandom(m, svCnt, rnd);
1: 
1:     // apply singular values
1:     Matrix mx = m > n ? v : u;
0:     for (int i = 0; i < svCnt; i++)
1:       mx.assignColumn(i, mx.viewColumn(i).times(svalues.getQuick(i)));
1: 
1:     SequenceFile.Writer w =
1:       SequenceFile.createWriter(dfs,
1:                                 dfs.getConf(),
1:                                 outputPath,
1:                                 IntWritable.class,
1:                                 VectorWritable.class);
1:     try {
1: 
1:       Vector outV = new DenseVector(n);
0:       VectorWritable vw = new VectorWritable(outV);
1:       IntWritable iw = new IntWritable();
1: 
1:       for (int i = 0; i < m; i++) {
1:         iw.set(startRowKey + i);
0:         for (int j = 0; j < n; j++)
1:           outV.setQuick(j, u.viewRow(i).dot(v.viewRow(j)));
1:         w.append(iw, vw);
1:       }
1: 
1:     } finally {
1:       w.close();
1:     }
1: 
1:   }
1: 
1:   static Matrix generateDenseOrthonormalRandom(int m, int n, Random rnd) {
0:     DenseMatrix result = new DenseMatrix(m, n);
1:     for (int j = 0; j < n; j++) {
1:       for (int i = 0; i < m; i++) {
1:         result.setQuick(i, j, rnd.nextDouble() - 0.5);
1:       }
1:     }
0:     GrammSchmidt.orthonormalizeColumns(result);
0:     SSVDPrototypeTest.assertOrthonormality(result, false, 1E-10);
1:     return result;
1:   }
1: 
1:   // do not use. for internal consumption only.
1:   public static void main(String[] args) throws Exception {
1:     // create 1Gb input for distributed tests.
0:     Configuration conf = new Configuration();
1:     FileSystem dfs = FileSystem.getLocal(conf);
1:     Path outputDir=new Path("/tmp/DRM");
1:     dfs.mkdirs(outputDir);
0:     for ( int i = 1; i <= 10; i++ ) {
0:       generateDenseInput(new Path(outputDir,String.format("part-%05d",i)),dfs,
0:                          new DenseVector ( new double[] {
0:                              15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0.8,0.3,0.1,0.01
0:                          }),1200,10000,(i-1)*1200);
1:     }
1:     
1:   }
1: }
============================================================================