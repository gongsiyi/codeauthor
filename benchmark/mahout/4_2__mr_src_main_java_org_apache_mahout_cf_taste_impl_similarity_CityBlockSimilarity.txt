1:a116dc7: /**
1:a116dc7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a116dc7:  * contributor license agreements.  See the NOTICE file distributed with
1:a116dc7:  * this work for additional information regarding copyright ownership.
1:a116dc7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a116dc7:  * (the "License"); you may not use this file except in compliance with
1:a116dc7:  * the License.  You may obtain a copy of the License at
1:a116dc7:  *
1:a116dc7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a116dc7:  *
1:a116dc7:  * Unless required by applicable law or agreed to in writing, software
1:a116dc7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a116dc7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a116dc7:  * See the License for the specific language governing permissions and
1:a116dc7:  * limitations under the License.
1:a116dc7:  */
1:a116dc7: package org.apache.mahout.cf.taste.impl.similarity;
2:a116dc7: 
1:a116dc7: import java.util.Collection;
1:a116dc7: 
1:a116dc7: import org.apache.mahout.cf.taste.common.Refreshable;
1:a116dc7: import org.apache.mahout.cf.taste.common.TasteException;
1:a116dc7: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:a116dc7: import org.apache.mahout.cf.taste.impl.common.RefreshHelper;
1:a116dc7: import org.apache.mahout.cf.taste.model.DataModel;
1:a116dc7: import org.apache.mahout.cf.taste.similarity.PreferenceInferrer;
1:a116dc7: import org.apache.mahout.cf.taste.similarity.UserSimilarity;
1:a116dc7: 
1:a116dc7: /**
1:a116dc7:  * Implementation of City Block distance (also known as Manhattan distance) - the absolute value of the difference of
1:a116dc7:  * each direction is summed.  The resulting unbounded distance is then mapped between 0 and 1.
1:a116dc7:  */
1:e23728d: public final class CityBlockSimilarity extends AbstractItemSimilarity implements UserSimilarity {
1:a116dc7: 
1:a116dc7:   public CityBlockSimilarity(DataModel dataModel) {
1:e23728d:     super(dataModel);
1:a116dc7:   }
1:a116dc7: 
1:a116dc7:   /**
1:a116dc7:    * @throws UnsupportedOperationException
1:a116dc7:    */
1:a116dc7:   @Override
1:a116dc7:   public void setPreferenceInferrer(PreferenceInferrer inferrer) {
1:a116dc7:     throw new UnsupportedOperationException();
1:a116dc7:   }
1:a116dc7: 
1:a116dc7:   @Override
1:a116dc7:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:4841efb:     Collection<Refreshable> refreshed = RefreshHelper.buildRefreshed(alreadyRefreshed);
1:4841efb:     RefreshHelper.maybeRefresh(refreshed, getDataModel());
1:a116dc7:   }
1:a116dc7: 
1:a116dc7:   @Override
1:a116dc7:   public double itemSimilarity(long itemID1, long itemID2) throws TasteException {
1:208aa07:     DataModel dataModel = getDataModel();
1:a116dc7:     int preferring1 = dataModel.getNumUsersWithPreferenceFor(itemID1);
1:a116dc7:     int preferring2 = dataModel.getNumUsersWithPreferenceFor(itemID2);
1:a116dc7:     int intersection = dataModel.getNumUsersWithPreferenceFor(itemID1, itemID2);
1:a116dc7:     return doSimilarity(preferring1, preferring2, intersection);
1:a116dc7:   }
1:a116dc7: 
1:a116dc7:   @Override
1:a116dc7:   public double[] itemSimilarities(long itemID1, long[] itemID2s) throws TasteException {
1:208aa07:     DataModel dataModel = getDataModel();
1:a116dc7:     int preferring1 = dataModel.getNumUsersWithPreferenceFor(itemID1);
1:a116dc7:     double[] distance = new double[itemID2s.length];
1:a116dc7:     for (int i = 0; i < itemID2s.length; ++i) {
1:a116dc7:       int preferring2 = dataModel.getNumUsersWithPreferenceFor(itemID2s[i]);
1:a116dc7:       int intersection = dataModel.getNumUsersWithPreferenceFor(itemID1, itemID2s[i]);
1:a116dc7:       distance[i] = doSimilarity(preferring1, preferring2, intersection);
1:a116dc7:     }
1:a116dc7:     return distance;
1:a116dc7:   }
1:a116dc7: 
1:a116dc7:   @Override
1:a116dc7:   public double userSimilarity(long userID1, long userID2) throws TasteException {
1:208aa07:     DataModel dataModel = getDataModel();
1:a116dc7:     FastIDSet prefs1 = dataModel.getItemIDsFromUser(userID1);
1:a116dc7:     FastIDSet prefs2 = dataModel.getItemIDsFromUser(userID2);
1:a116dc7:     int prefs1Size = prefs1.size();
1:a116dc7:     int prefs2Size = prefs2.size();
1:a116dc7:     int intersectionSize = prefs1Size < prefs2Size ? prefs2.intersectionSize(prefs1) : prefs1.intersectionSize(prefs2);
1:a116dc7:     return doSimilarity(prefs1Size, prefs2Size, intersectionSize);
1:a116dc7:   }
1:a116dc7: 
1:a116dc7:   /**
1:a116dc7:    * Calculate City Block Distance from total non-zero values and intersections and map to a similarity value.
1:a116dc7:    *
1:a116dc7:    * @param pref1        number of non-zero values in left vector
1:a116dc7:    * @param pref2        number of non-zero values in right vector
1:a116dc7:    * @param intersection number of overlapping non-zero values
1:a116dc7:    */
1:a116dc7:   private static double doSimilarity(int pref1, int pref2, int intersection) {
1:a116dc7:     int distance = pref1 + pref2 - 2 * intersection;
1:a116dc7:     return 1.0 / (1.0 + distance);
1:a116dc7:   }
1:a116dc7: 
1:a116dc7: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1:     Collection<Refreshable> refreshed = RefreshHelper.buildRefreshed(alreadyRefreshed);
1:     RefreshHelper.maybeRefresh(refreshed, getDataModel());
commit:e23728d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public final class CityBlockSimilarity extends AbstractItemSimilarity implements UserSimilarity {
1:     super(dataModel);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:208aa07
/////////////////////////////////////////////////////////////////////////
0:     RefreshHelper.maybeRefresh(alreadyRefreshed, getDataModel());
1:     DataModel dataModel = getDataModel();
/////////////////////////////////////////////////////////////////////////
1:     DataModel dataModel = getDataModel();
/////////////////////////////////////////////////////////////////////////
1:     DataModel dataModel = getDataModel();
commit:a116dc7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.cf.taste.impl.similarity;
1: 
1: import java.util.Collection;
1: 
1: import org.apache.mahout.cf.taste.common.Refreshable;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: import org.apache.mahout.cf.taste.impl.common.RefreshHelper;
1: import org.apache.mahout.cf.taste.model.DataModel;
0: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1: import org.apache.mahout.cf.taste.similarity.PreferenceInferrer;
1: import org.apache.mahout.cf.taste.similarity.UserSimilarity;
1: 
1: /**
1:  * Implementation of City Block distance (also known as Manhattan distance) - the absolute value of the difference of
1:  * each direction is summed.  The resulting unbounded distance is then mapped between 0 and 1.
1:  */
0: public final class CityBlockSimilarity implements UserSimilarity, ItemSimilarity {
1: 
0:   private final DataModel dataModel;
1: 
1:   public CityBlockSimilarity(DataModel dataModel) {
0:     this.dataModel = dataModel;
1:   }
1: 
1:   /**
1:    * @throws UnsupportedOperationException
1:    */
1:   @Override
1:   public void setPreferenceInferrer(PreferenceInferrer inferrer) {
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
0:     alreadyRefreshed = RefreshHelper.buildRefreshed(alreadyRefreshed);
0:     RefreshHelper.maybeRefresh(alreadyRefreshed, dataModel);
1:   }
1: 
1:   @Override
1:   public double itemSimilarity(long itemID1, long itemID2) throws TasteException {
1:     int preferring1 = dataModel.getNumUsersWithPreferenceFor(itemID1);
1:     int preferring2 = dataModel.getNumUsersWithPreferenceFor(itemID2);
1:     int intersection = dataModel.getNumUsersWithPreferenceFor(itemID1, itemID2);
1:     return doSimilarity(preferring1, preferring2, intersection);
1:   }
1: 
1:   @Override
1:   public double[] itemSimilarities(long itemID1, long[] itemID2s) throws TasteException {
1:     int preferring1 = dataModel.getNumUsersWithPreferenceFor(itemID1);
1:     double[] distance = new double[itemID2s.length];
1:     for (int i = 0; i < itemID2s.length; ++i) {
1:       int preferring2 = dataModel.getNumUsersWithPreferenceFor(itemID2s[i]);
1:       int intersection = dataModel.getNumUsersWithPreferenceFor(itemID1, itemID2s[i]);
1:       distance[i] = doSimilarity(preferring1, preferring2, intersection);
1:     }
1:     return distance;
1:   }
1: 
1:   @Override
1:   public double userSimilarity(long userID1, long userID2) throws TasteException {
1:     FastIDSet prefs1 = dataModel.getItemIDsFromUser(userID1);
1:     FastIDSet prefs2 = dataModel.getItemIDsFromUser(userID2);
1:     int prefs1Size = prefs1.size();
1:     int prefs2Size = prefs2.size();
1:     int intersectionSize = prefs1Size < prefs2Size ? prefs2.intersectionSize(prefs1) : prefs1.intersectionSize(prefs2);
1:     return doSimilarity(prefs1Size, prefs2Size, intersectionSize);
1:   }
1: 
1:   /**
1:    * Calculate City Block Distance from total non-zero values and intersections and map to a similarity value.
1:    *
1:    * @param pref1        number of non-zero values in left vector
1:    * @param pref2        number of non-zero values in right vector
1:    * @param intersection number of overlapping non-zero values
1:    */
1:   private static double doSimilarity(int pref1, int pref2, int intersection) {
1:     int distance = pref1 + pref2 - 2 * intersection;
1:     return 1.0 / (1.0 + distance);
1:   }
1: 
1: }
============================================================================