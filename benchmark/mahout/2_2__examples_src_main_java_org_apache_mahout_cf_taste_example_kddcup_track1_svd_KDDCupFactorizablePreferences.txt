1:c439f53: /**
1:c439f53:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c439f53:  * contributor license agreements.  See the NOTICE file distributed with
1:c439f53:  * this work for additional information regarding copyright ownership.
1:c439f53:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c439f53:  * (the "License"); you may not use this file except in compliance with
1:c439f53:  * the License.  You may obtain a copy of the License at
1:c439f53:  *
1:c439f53:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c439f53:  *
1:c439f53:  * Unless required by applicable law or agreed to in writing, software
1:c439f53:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c439f53:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c439f53:  * See the License for the specific language governing permissions and
1:c439f53:  * limitations under the License.
1:c439f53:  */
9:c439f53: 
1:c439f53: package org.apache.mahout.cf.taste.example.kddcup.track1.svd;
1:c439f53: 
1:80366ee: import com.google.common.base.Function;
1:80366ee: import com.google.common.collect.Iterables;
1:80366ee: import org.apache.mahout.cf.taste.example.kddcup.DataFileIterable;
1:80366ee: import org.apache.mahout.cf.taste.impl.common.AbstractLongPrimitiveIterator;
1:c439f53: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:c439f53: import org.apache.mahout.cf.taste.model.Preference;
1:80366ee: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:80366ee: import org.apache.mahout.common.Pair;
1:c439f53: 
1:c439f53: import java.io.File;
1:c439f53: 
1:c439f53: public class KDDCupFactorizablePreferences implements FactorizablePreferences {
1:c439f53: 
1:c439f53:   private final File dataFile;
1:c439f53: 
1:c439f53:   public KDDCupFactorizablePreferences(File dataFile) {
1:c439f53:     this.dataFile = dataFile;
11:c439f53:   }
1:c439f53: 
6:c439f53:   @Override
1:c439f53:   public LongPrimitiveIterator getUserIDs() {
1:c439f53:     return new FixedSizeLongIterator(numUsers());
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public LongPrimitiveIterator getItemIDs() {
1:c439f53:     return new FixedSizeLongIterator(numItems());
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public Iterable<Preference> getPreferences() {
1:80366ee:     Iterable<Iterable<Preference>> prefIterators =
1:80366ee:         Iterables.transform(new DataFileIterable(dataFile),
1:6d16230:           new Function<Pair<PreferenceArray,long[]>,Iterable<Preference>>() {
1:6d16230:             @Override
1:6d16230:             public Iterable<Preference> apply(Pair<PreferenceArray,long[]> from) {
1:6d16230:               return from.getFirst();
1:6d16230:             }
1:6d16230:           });
1:80366ee:     return Iterables.concat(prefIterators);
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public float getMinPreference() {
1:c439f53:     return 0;
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public float getMaxPreference() {
1:c439f53:     return 100;
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public int numUsers() {
1:c439f53:     return 1000990;
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public int numItems() {
1:c439f53:     return 624961;
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public int numPreferences() {
1:c439f53:     return 252800275;
1:c439f53:   }
1:c439f53: 
1:80366ee:   static class FixedSizeLongIterator extends AbstractLongPrimitiveIterator {
1:c439f53: 
1:c439f53:     private long currentValue;
1:c439f53:     private final long maximum;
1:c439f53: 
1:80366ee:     FixedSizeLongIterator(long maximum) {
1:c439f53:       this.maximum = maximum;
1:c439f53:       currentValue = 0;
1:c439f53:     }
1:c439f53: 
1:c439f53:     @Override
1:c439f53:     public long nextLong() {
1:c439f53:       return currentValue++;
1:c439f53:     }
1:c439f53: 
1:c439f53:     @Override
1:c439f53:     public long peek() {
1:c439f53:       return currentValue;
1:c439f53:     }
1:c439f53: 
1:c439f53:     @Override
1:c439f53:     public void skip(int n) {
1:c439f53:       currentValue += n;
1:c439f53:     }
1:c439f53: 
1:c439f53:     @Override
2:c439f53:     public boolean hasNext() {
1:c439f53:       return currentValue < maximum;
1:c439f53:     }
1:c439f53: 
1:c439f53:     @Override
2:c439f53:     public void remove() {
2:c439f53:       throw new UnsupportedOperationException();
1:c439f53:     }
1:c439f53:   }
1:c439f53: 
1:c439f53: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:           new Function<Pair<PreferenceArray,long[]>,Iterable<Preference>>() {
1:             @Override
1:             public Iterable<Preference> apply(Pair<PreferenceArray,long[]> from) {
1:               return from.getFirst();
1:             }
1:           });
commit:c439f53
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup.track1.svd;
1: 
0: import org.apache.mahout.cf.taste.example.kddcup.DataFileIterator;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.model.Preference;
1: 
1: import java.io.File;
0: import java.io.IOException;
0: import java.util.Iterator;
1: 
1: public class KDDCupFactorizablePreferences implements FactorizablePreferences {
1: 
1:   private final File dataFile;
1: 
1:   public KDDCupFactorizablePreferences(File dataFile) {
1:     this.dataFile = dataFile;
1:   }
1: 
1:   @Override
1:   public LongPrimitiveIterator getUserIDs() {
1:     return new FixedSizeLongIterator(numUsers());
1:   }
1: 
1:   @Override
1:   public LongPrimitiveIterator getItemIDs() {
1:     return new FixedSizeLongIterator(numItems());
1:   }
1: 
1:   @Override
1:   public Iterable<Preference> getPreferences() {
0:     return new Iterable<Preference>() {
1:       @Override
0:       public Iterator<Preference> iterator() {
0:         try {
0:           return new DataFilePreferencesIterator(new DataFileIterator(dataFile));
0:         } catch (IOException e) {
0:           throw new IllegalStateException("Cannot iterate over datafile!", e);
1:         }
1:       }
0:     };
1:   }
1: 
1:   @Override
1:   public float getMinPreference() {
1:     return 0;
1:   }
1: 
1:   @Override
1:   public float getMaxPreference() {
1:     return 100;
1:   }
1: 
1:   @Override
1:   public int numUsers() {
1:     return 1000990;
1:   }
1: 
1:   @Override
1:   public int numItems() {
1:     return 624961;
1:   }
1: 
1:   @Override
1:   public int numPreferences() {
1:     return 252800275;
1:   }
1: 
0:   static class DataFilePreferencesIterator implements Iterator<Preference> {
1: 
0:     private final DataFileIterator dataFileIterator;
1: 
0:     Iterator<Preference> currentUserPrefsIterator;
1: 
0:     public DataFilePreferencesIterator(DataFileIterator dataFileIterator) {
0:       this.dataFileIterator = dataFileIterator;
1:     }
1: 
1:     @Override
1:     public boolean hasNext() {
0:       if (currentUserPrefsIterator != null && currentUserPrefsIterator.hasNext()) {
0:         return true;
0:       } else {
0:         return dataFileIterator.hasNext();
1:       }
1:     }
1: 
1:     @Override
0:     public Preference next() {
0:       if (currentUserPrefsIterator == null || !currentUserPrefsIterator.hasNext()) {
0:         currentUserPrefsIterator = dataFileIterator.next().getFirst().iterator();
1:       }
0:       return currentUserPrefsIterator.next();
1:     }
1: 
1:     @Override
1:     public void remove() {
1:       throw new UnsupportedOperationException();
1:     }
1:   }
1: 
0:   static class FixedSizeLongIterator implements LongPrimitiveIterator {
1: 
1:     private long currentValue;
1:     private final long maximum;
1: 
0:     public FixedSizeLongIterator(long maximum) {
1:       this.maximum = maximum;
1:       currentValue = 0;
1:     }
1: 
1:     @Override
1:     public long nextLong() {
1:       return currentValue++;
1:     }
1: 
1:     @Override
1:     public long peek() {
1:       return currentValue;
1:     }
1: 
1:     @Override
1:     public void skip(int n) {
1:       currentValue += n;
1:     }
1: 
1:     @Override
1:     public boolean hasNext() {
1:       return currentValue < maximum;
1:     }
1: 
1:     @Override
0:     public Long next() {
0:       return ++currentValue;
1:     }
1: 
1:     @Override
1:     public void remove() {
1:       throw new UnsupportedOperationException();
1:     }
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Function;
1: import com.google.common.collect.Iterables;
1: import org.apache.mahout.cf.taste.example.kddcup.DataFileIterable;
1: import org.apache.mahout.cf.taste.impl.common.AbstractLongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.common.Pair;
/////////////////////////////////////////////////////////////////////////
1:     Iterable<Iterable<Preference>> prefIterators =
1:         Iterables.transform(new DataFileIterable(dataFile),
0:                             new Function<Pair<PreferenceArray,long[]>,Iterable<Preference>>() {
0:                               @Override
0:                               public Iterable<Preference> apply(Pair<PreferenceArray,long[]> from) {
0:                                 return from.getFirst();
0:                               }
0:                             });
1:     return Iterables.concat(prefIterators);
/////////////////////////////////////////////////////////////////////////
1:   static class FixedSizeLongIterator extends AbstractLongPrimitiveIterator {
1:     FixedSizeLongIterator(long maximum) {
/////////////////////////////////////////////////////////////////////////
============================================================================