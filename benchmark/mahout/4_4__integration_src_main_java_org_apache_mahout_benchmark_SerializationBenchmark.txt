1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:812d0ba: package org.apache.mahout.benchmark;
3:812d0ba: 
1:812d0ba: import org.apache.hadoop.conf.Configuration;
1:812d0ba: import org.apache.hadoop.fs.FileSystem;
1:812d0ba: import org.apache.hadoop.fs.Path;
1:812d0ba: import org.apache.hadoop.io.IntWritable;
1:812d0ba: import org.apache.hadoop.io.SequenceFile;
1:812d0ba: import org.apache.hadoop.io.Writable;
1:812d0ba: import org.apache.mahout.common.TimingStatistics;
1:812d0ba: import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;
1:812d0ba: import org.apache.mahout.math.VectorWritable;
1:812d0ba: 
1:85f9ece: import java.io.IOException;
1:85f9ece: 
1:87d4b2e: import static org.apache.mahout.benchmark.VectorBenchmarks.DENSE_VECTOR;
1:87d4b2e: import static org.apache.mahout.benchmark.VectorBenchmarks.RAND_SPARSE_VECTOR;
1:87d4b2e: import static org.apache.mahout.benchmark.VectorBenchmarks.SEQ_SPARSE_VECTOR;
1:812d0ba: 
1:812d0ba: public class SerializationBenchmark {
1:812d0ba:   public static final String SERIALIZE = "Serialize";
1:812d0ba:   public static final String DESERIALIZE = "Deserialize";
1:812d0ba:   private final VectorBenchmarks mark;
1:812d0ba: 
1:812d0ba:   public SerializationBenchmark(VectorBenchmarks mark) {
1:812d0ba:     this.mark = mark;
1:812d0ba:   }
1:812d0ba: 
1:812d0ba:   public void benchmark() throws IOException {
1:812d0ba:     serializeBenchmark();
1:812d0ba:     deserializeBenchmark();
1:812d0ba:   }
1:812d0ba: 
1:812d0ba:   public void serializeBenchmark() throws IOException {
1:812d0ba:     Configuration conf = new Configuration();
1:812d0ba:     FileSystem fs = FileSystem.get(conf);
1:812d0ba: 
1:812d0ba:     Writable one = new IntWritable(0);
1:812d0ba:     VectorWritable vec = new VectorWritable();
1:812d0ba:     TimingStatistics stats = new TimingStatistics();
1:812d0ba: 
1:85f9ece:     try (SequenceFile.Writer writer =
1:85f9ece:              new SequenceFile.Writer(fs, conf, new Path("/tmp/dense-vector"),
1:85f9ece:                  IntWritable.class, VectorWritable.class)){
1:812d0ba:       for (int i = 0; i < mark.loop; i++) {
1:812d0ba:         TimingStatistics.Call call = stats.newCall(mark.leadTimeUsec);
1:812d0ba:         vec.set(mark.vectors[0][mark.vIndex(i)]);
1:812d0ba:         writer.append(one, vec);
1:812d0ba:         if (call.end(mark.maxTimeUsec)) {
1:812d0ba:           break;
1:812d0ba:         }
1:812d0ba:       }
1:812d0ba:     }
1:812d0ba:     mark.printStats(stats, SERIALIZE, DENSE_VECTOR);
1:812d0ba: 
1:812d0ba:     stats = new TimingStatistics();
1:85f9ece:     try (SequenceFile.Writer writer =
1:85f9ece:              new SequenceFile.Writer(fs, conf,
1:85f9ece:                  new Path("/tmp/randsparse-vector"), IntWritable.class, VectorWritable.class)){
1:812d0ba:       for (int i = 0; i < mark.loop; i++) {
1:812d0ba:         TimingStatistics.Call call = stats.newCall(mark.leadTimeUsec);
1:812d0ba:         vec.set(mark.vectors[1][mark.vIndex(i)]);
1:812d0ba:         writer.append(one, vec);
1:812d0ba:         if (call.end(mark.maxTimeUsec)) {
1:812d0ba:           break;
1:812d0ba:         }
1:812d0ba:       }
1:812d0ba:     }
1:812d0ba:     mark.printStats(stats, SERIALIZE, RAND_SPARSE_VECTOR);
1:812d0ba: 
1:812d0ba:     stats = new TimingStatistics();
1:85f9ece:     try (SequenceFile.Writer writer =
1:85f9ece:              new SequenceFile.Writer(fs, conf,
1:85f9ece:                  new Path("/tmp/seqsparse-vector"), IntWritable.class, VectorWritable.class)) {
1:812d0ba:       for (int i = 0; i < mark.loop; i++) {
1:812d0ba:         TimingStatistics.Call call = stats.newCall(mark.leadTimeUsec);
1:812d0ba:         vec.set(mark.vectors[2][mark.vIndex(i)]);
1:812d0ba:         writer.append(one, vec);
1:812d0ba:         if (call.end(mark.maxTimeUsec)) {
1:812d0ba:           break;
1:812d0ba:         }
1:812d0ba:       }
1:812d0ba:     }
1:812d0ba:     mark.printStats(stats, SERIALIZE, SEQ_SPARSE_VECTOR);
1:812d0ba: 
1:812d0ba:   }
1:812d0ba: 
1:812d0ba:   public void deserializeBenchmark() throws IOException {
1:812d0ba:     doDeserializeBenchmark(DENSE_VECTOR, "/tmp/dense-vector");
1:812d0ba:     doDeserializeBenchmark(RAND_SPARSE_VECTOR, "/tmp/randsparse-vector");
1:812d0ba:     doDeserializeBenchmark(SEQ_SPARSE_VECTOR, "/tmp/seqsparse-vector");
1:812d0ba:   }
1:812d0ba: 
1:812d0ba:   private void doDeserializeBenchmark(String name, String pathString) throws IOException {
1:812d0ba:     TimingStatistics stats = new TimingStatistics();
1:812d0ba:     TimingStatistics.Call call = stats.newCall(mark.leadTimeUsec);
1:85f9ece:     SequenceFileValueIterator<Writable> iterator = new SequenceFileValueIterator<>(new Path(pathString), true,
1:812d0ba:         new Configuration());
1:812d0ba:     while (iterator.hasNext()) {
1:812d0ba:       iterator.next();
1:812d0ba:       call.end();
1:812d0ba:       call = stats.newCall(mark.leadTimeUsec);
1:812d0ba:     }
1:812d0ba:     iterator.close();
1:812d0ba:     mark.printStats(stats, DESERIALIZE, name);
1:812d0ba:   }
1:812d0ba: 
1:812d0ba: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1:     try (SequenceFile.Writer writer =
1:              new SequenceFile.Writer(fs, conf, new Path("/tmp/dense-vector"),
1:                  IntWritable.class, VectorWritable.class)){
/////////////////////////////////////////////////////////////////////////
1:     try (SequenceFile.Writer writer =
1:              new SequenceFile.Writer(fs, conf,
1:                  new Path("/tmp/randsparse-vector"), IntWritable.class, VectorWritable.class)){
/////////////////////////////////////////////////////////////////////////
1:     try (SequenceFile.Writer writer =
1:              new SequenceFile.Writer(fs, conf,
1:                  new Path("/tmp/seqsparse-vector"), IntWritable.class, VectorWritable.class)) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     SequenceFileValueIterator<Writable> iterator = new SequenceFileValueIterator<>(new Path(pathString), true,
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.mahout.benchmark.VectorBenchmarks.DENSE_VECTOR;
1: import static org.apache.mahout.benchmark.VectorBenchmarks.RAND_SPARSE_VECTOR;
1: import static org.apache.mahout.benchmark.VectorBenchmarks.SEQ_SPARSE_VECTOR;
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
author:Robin Anil
-------------------------------------------------------------------------------
commit:812d0ba
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.benchmark;
1: 
0: import static org.apache.mahout.benchmark.VectorBenchmarks.DENSE_VECTOR;
0: import static org.apache.mahout.benchmark.VectorBenchmarks.RAND_SPARSE_VECTOR;
0: import static org.apache.mahout.benchmark.VectorBenchmarks.SEQ_SPARSE_VECTOR;
1: 
0: import java.io.IOException;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.common.TimingStatistics;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;
1: import org.apache.mahout.math.VectorWritable;
1: 
0: import com.google.common.io.Closeables;
1: 
1: public class SerializationBenchmark {
1:   public static final String SERIALIZE = "Serialize";
1:   public static final String DESERIALIZE = "Deserialize";
1:   private final VectorBenchmarks mark;
1: 
1:   public SerializationBenchmark(VectorBenchmarks mark) {
1:     this.mark = mark;
1:   }
1: 
1:   public void benchmark() throws IOException {
1:     serializeBenchmark();
1:     deserializeBenchmark();
1:   }
1: 
1:   public void serializeBenchmark() throws IOException {
1:     Configuration conf = new Configuration();
1:     FileSystem fs = FileSystem.get(conf);
0:     SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, new Path("/tmp/dense-vector"), IntWritable.class,
0:         VectorWritable.class);
1: 
1:     Writable one = new IntWritable(0);
1:     VectorWritable vec = new VectorWritable();
1:     TimingStatistics stats = new TimingStatistics();
1: 
0:     try {
1:       for (int i = 0; i < mark.loop; i++) {
1:         TimingStatistics.Call call = stats.newCall(mark.leadTimeUsec);
1:         vec.set(mark.vectors[0][mark.vIndex(i)]);
1:         writer.append(one, vec);
1:         if (call.end(mark.maxTimeUsec)) {
1:           break;
1:         }
1:       }
0:     } finally {
0:       Closeables.close(writer, true);
1:     }
1:     mark.printStats(stats, SERIALIZE, DENSE_VECTOR);
1: 
0:     writer = new SequenceFile.Writer(fs, conf, new Path("/tmp/randsparse-vector"), IntWritable.class,
0:         VectorWritable.class);
1:     stats = new TimingStatistics();
0:     try {
1:       for (int i = 0; i < mark.loop; i++) {
1:         TimingStatistics.Call call = stats.newCall(mark.leadTimeUsec);
1:         vec.set(mark.vectors[1][mark.vIndex(i)]);
1:         writer.append(one, vec);
1:         if (call.end(mark.maxTimeUsec)) {
1:           break;
1:         }
1:       }
0:     } finally {
0:       Closeables.close(writer, true);
1:     }
1:     mark.printStats(stats, SERIALIZE, RAND_SPARSE_VECTOR);
1: 
0:     writer = new SequenceFile.Writer(fs, conf, new Path("/tmp/seqsparse-vector"), IntWritable.class,
0:         VectorWritable.class);
1:     stats = new TimingStatistics();
0:     try {
1:       for (int i = 0; i < mark.loop; i++) {
1:         TimingStatistics.Call call = stats.newCall(mark.leadTimeUsec);
1:         vec.set(mark.vectors[2][mark.vIndex(i)]);
1:         writer.append(one, vec);
1:         if (call.end(mark.maxTimeUsec)) {
1:           break;
1:         }
1:       }
0:     } finally {
0:       Closeables.close(writer, true);
1:     }
1:     mark.printStats(stats, SERIALIZE, SEQ_SPARSE_VECTOR);
1: 
1:   }
1: 
1:   public void deserializeBenchmark() throws IOException {
1:     doDeserializeBenchmark(DENSE_VECTOR, "/tmp/dense-vector");
1:     doDeserializeBenchmark(RAND_SPARSE_VECTOR, "/tmp/randsparse-vector");
1:     doDeserializeBenchmark(SEQ_SPARSE_VECTOR, "/tmp/seqsparse-vector");
1:   }
1: 
1:   private void doDeserializeBenchmark(String name, String pathString) throws IOException {
1:     TimingStatistics stats = new TimingStatistics();
1:     TimingStatistics.Call call = stats.newCall(mark.leadTimeUsec);
0:     SequenceFileValueIterator<Writable> iterator = new SequenceFileValueIterator<Writable>(new Path(pathString), true,
1:         new Configuration());
1:     while (iterator.hasNext()) {
1:       iterator.next();
1:       call.end();
1:       call = stats.newCall(mark.leadTimeUsec);
1:     }
1:     iterator.close();
1:     mark.printStats(stats, DESERIALIZE, name);
1:   }
1: 
1: }
============================================================================