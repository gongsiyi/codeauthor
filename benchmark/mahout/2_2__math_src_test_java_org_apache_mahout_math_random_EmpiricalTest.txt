1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
2:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:a07bfc3: import com.google.common.collect.Lists;
1:a07bfc3: import org.apache.mahout.common.RandomUtils;
1:8b6a26a: import org.apache.mahout.math.MahoutTestCase;
1:a07bfc3: import org.junit.Assert;
1:a07bfc3: import org.junit.Test;
1:a07bfc3: 
1:a07bfc3: import java.util.Collections;
1:a07bfc3: import java.util.List;
1:a07bfc3: 
1:8b6a26a: public class EmpiricalTest extends MahoutTestCase {
1:a07bfc3:     @Test
1:a07bfc3:     public void testSimpleDist() {
1:a07bfc3:         RandomUtils.useTestSeed();
1:a07bfc3: 
1:a07bfc3:         Empirical z = new Empirical(true, true, 3, 0, 1, 0.5, 2, 1, 3.0);
1:a07bfc3:         List<Double> r = Lists.newArrayList();
1:a07bfc3:         for (int i = 0; i < 10001; i++) {
1:a07bfc3:             r.add(z.sample());
1:a07bfc3:         }
1:a07bfc3:         Collections.sort(r);
1:a07bfc3:         assertEquals(2.0, r.get(5000), 0.15);
1:a07bfc3:     }
1:a07bfc3: 
1:a07bfc3:     @Test
1:a07bfc3:     public void testZeros() {
1:a07bfc3:         Empirical z = new Empirical(true, true, 3, 0, 1, 0.5, 2, 1, 3.0);
1:8b6a26a:         assertEquals(-16.52, z.sample(0), 1.0e-2);
1:8b6a26a:         assertEquals(20.47, z.sample(1), 1.0e-2);
1:a07bfc3:     }
1:a07bfc3: 
1:a07bfc3:     @Test
1:a07bfc3:     public void testBadArguments() {
1:a07bfc3:         try {
1:a07bfc3:             new Empirical(true, false, 20, 0, 1, 0.5, 2, 0.9, 9, 0.99, 10.0);
1:a07bfc3:             Assert.fail("Should have caught that");
1:a07bfc3:         } catch (IllegalArgumentException e) {
1:a07bfc3:         }
1:a07bfc3:         try {
1:a07bfc3:             new Empirical(false, true, 20, 0.1, 1, 0.5, 2, 0.9, 9, 1, 10.0);
1:a07bfc3:             Assert.fail("Should have caught that");
1:a07bfc3:         } catch (IllegalArgumentException e) {
1:a07bfc3:         }
1:a07bfc3:         try {
1:a07bfc3:             new Empirical(true, true, 20, -0.1, 1, 0.5, 2, 0.9, 9, 1, 10.0);
1:a07bfc3:             Assert.fail("Should have caught that");
1:a07bfc3:         } catch (IllegalArgumentException e) {
1:a07bfc3:         }
1:a07bfc3:         try {
1:a07bfc3:             new Empirical(true, true, 20, 0, 1, 0.5, 2, 0.9, 9, 1.2, 10.0);
1:a07bfc3:             Assert.fail("Should have caught that");
1:a07bfc3:         } catch (IllegalArgumentException e) {
1:a07bfc3:         }
1:a07bfc3:         try {
1:a07bfc3:             new Empirical(true, true, 20, 0, 1, 0.5, 2, 0.4, 9, 1, 10.0);
1:a07bfc3:             Assert.fail("Should have caught that");
1:a07bfc3:         } catch (IllegalArgumentException e) {
1:a07bfc3:         }
1:a07bfc3:     }
1:a07bfc3: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.MahoutTestCase;
1: public class EmpiricalTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(-16.52, z.sample(0), 1.0e-2);
1:         assertEquals(20.47, z.sample(1), 1.0e-2);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: import com.google.common.collect.Lists;
1: import org.apache.mahout.common.RandomUtils;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
0: public class EmpiricalTest {
1:     @Test
1:     public void testSimpleDist() {
1:         RandomUtils.useTestSeed();
1: 
1:         Empirical z = new Empirical(true, true, 3, 0, 1, 0.5, 2, 1, 3.0);
1:         List<Double> r = Lists.newArrayList();
1:         for (int i = 0; i < 10001; i++) {
1:             r.add(z.sample());
1:         }
1:         Collections.sort(r);
1:         assertEquals(2.0, r.get(5000), 0.15);
1:     }
1: 
1:     @Test
1:     public void testZeros() {
1:         Empirical z = new Empirical(true, true, 3, 0, 1, 0.5, 2, 1, 3.0);
0:         assertEquals(-16.52, z.sample(0), 1e-2);
0:         assertEquals(20.47, z.sample(1), 1e-2);
1:     }
1: 
1:     @Test
1:     public void testBadArguments() {
1:         try {
1:             new Empirical(true, false, 20, 0, 1, 0.5, 2, 0.9, 9, 0.99, 10.0);
1:             Assert.fail("Should have caught that");
1:         } catch (IllegalArgumentException e) {
1:         }
1:         try {
1:             new Empirical(false, true, 20, 0.1, 1, 0.5, 2, 0.9, 9, 1, 10.0);
1:             Assert.fail("Should have caught that");
1:         } catch (IllegalArgumentException e) {
1:         }
1:         try {
1:             new Empirical(true, true, 20, -0.1, 1, 0.5, 2, 0.9, 9, 1, 10.0);
1:             Assert.fail("Should have caught that");
1:         } catch (IllegalArgumentException e) {
1:         }
1:         try {
1:             new Empirical(true, true, 20, 0, 1, 0.5, 2, 0.9, 9, 1.2, 10.0);
1:             Assert.fail("Should have caught that");
1:         } catch (IllegalArgumentException e) {
1:         }
1:         try {
1:             new Empirical(true, true, 20, 0, 1, 0.5, 2, 0.4, 9, 1, 10.0);
1:             Assert.fail("Should have caught that");
1:         } catch (IllegalArgumentException e) {
1:         }
1:     }
1: }
============================================================================