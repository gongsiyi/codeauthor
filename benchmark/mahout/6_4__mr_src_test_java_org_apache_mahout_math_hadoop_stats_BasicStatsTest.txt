1:d8e91f9: package org.apache.mahout.math.hadoop.stats;
2:d8e91f9: /**
1:d8e91f9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d8e91f9:  * contributor license agreements.  See the NOTICE file distributed with
1:d8e91f9:  * this work for additional information regarding copyright ownership.
1:d8e91f9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d8e91f9:  * (the "License"); you may not use this file except in compliance with
1:d8e91f9:  * the License.  You may obtain a copy of the License at
3:d8e91f9:  *
1:d8e91f9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d8e91f9:  *
1:d8e91f9:  * Unless required by applicable law or agreed to in writing, software
1:d8e91f9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d8e91f9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d8e91f9:  * See the License for the specific language governing permissions and
1:d8e91f9:  * limitations under the License.
1:d8e91f9:  */
1:d8e91f9: 
1:d8e91f9: 
1:d8e91f9: import org.apache.hadoop.conf.Configuration;
1:d8e91f9: import org.apache.hadoop.fs.FileSystem;
1:d8e91f9: import org.apache.hadoop.fs.Path;
1:d8e91f9: import org.apache.hadoop.io.DoubleWritable;
1:d8e91f9: import org.apache.hadoop.io.IntWritable;
1:d8e91f9: import org.apache.hadoop.io.SequenceFile;
1:d8e91f9: import org.apache.mahout.common.MahoutTestCase;
1:051cbcf: import org.apache.mahout.common.RandomUtils;
1:d8e91f9: import org.apache.mahout.math.jet.random.Normal;
1:d8e91f9: import org.junit.Before;
1:d8e91f9: import org.junit.Test;
1:d8e91f9: 
1:d8e91f9: import java.util.Random;
1:d8e91f9: 
1:564c3e1: public final class BasicStatsTest extends MahoutTestCase {
1:d8e91f9: 
1:d8e91f9:   private Configuration conf;
1:d8e91f9: 
1:d8e91f9:   @Override
1:d8e91f9:   @Before
1:d8e91f9:   public void setUp() throws Exception {
1:d8e91f9:     super.setUp();
1:e3ec9d8:     conf = getConfiguration();
1:d8e91f9:   }
1:d8e91f9: 
1:d8e91f9:   @Test
1:d8e91f9:   public void testVar() throws Exception {
1:d8e91f9:     Path input = getTestTempFilePath("stdDev/counts.file");
1:d8e91f9:     Path output = getTestTempFilePath("stdDev/output.file");
1:d8e91f9:     
1:d8e91f9:     produceTestData(input);
1:d8e91f9:     
1:d8e91f9:     double v = BasicStats.variance(input, output, conf);
1:d8e91f9:     assertEquals(2.44, v, 0.01);
1:d8e91f9:   }
1:d8e91f9: 
1:d8e91f9: 
1:d8e91f9:   @Test
1:d8e91f9:   public void testStdDev() throws Exception {
1:d8e91f9:     Path input = getTestTempFilePath("stdDev/counts.file");
1:d8e91f9:     Path output = getTestTempFilePath("stdDev/output.file");
1:d8e91f9:     
1:d8e91f9:     produceTestData(input);
1:d8e91f9:     
1:d8e91f9:     double v = BasicStats.stdDev(input, output, conf);
1:44459bd:     assertEquals(1.56, v, 0.01); //sample std dev is 1.563, std. dev from a discrete set is 1.48
1:d8e91f9: 
1:d8e91f9:   }
1:d8e91f9:   
1:d8e91f9:   @Test
1:d8e91f9:   public void testStdDevForGivenMean() throws Exception {
1:d8e91f9:     Path input = getTestTempFilePath("stdDev/counts.file");
1:d8e91f9:     Path output = getTestTempFilePath("stdDev/output.file");
1:d8e91f9:     
1:d8e91f9:     produceTestData(input);
1:d8e91f9:     
1:d8e91f9:     double v = BasicStats.stdDevForGivenMean(input, output, 0.0D, conf);
1:44459bd:     assertEquals(10.65, v, 0.01); //sample std dev is 10.65
1:d8e91f9: 
1:d8e91f9:   }
1:d8e91f9:   
1:d8e91f9:   private void produceTestData(Path input) throws Exception {
1:1de8cec: 	  FileSystem fs = FileSystem.get(input.toUri(), conf);
1:d8e91f9:     SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, input, IntWritable.class, DoubleWritable.class);
1:564c3e1:     //Random random = new MersenneTwisterRNG();
1:d8e91f9:     /*Normal normal = new Normal(5, 3, random);
1:e64dd36:     for (int i = 0; i < 10000; i++) {
1:d8e91f9:       writer.append(new IntWritable(i), new DoubleWritable((long)normal.nextDouble()));
1:d8e91f9:     }*/
1:d8e91f9:     int i = 0;
1:d8e91f9:     writer.append(new IntWritable(i++), new DoubleWritable(7));
1:d8e91f9:     writer.append(new IntWritable(i++), new DoubleWritable(9));
1:d8e91f9:     writer.append(new IntWritable(i++), new DoubleWritable(9));
1:d8e91f9:     writer.append(new IntWritable(i++), new DoubleWritable(10));
1:d8e91f9:     writer.append(new IntWritable(i++), new DoubleWritable(10));
1:d8e91f9:     writer.append(new IntWritable(i++), new DoubleWritable(10));
1:d8e91f9:     writer.append(new IntWritable(i++), new DoubleWritable(10));
1:d8e91f9:     writer.append(new IntWritable(i++), new DoubleWritable(11));
1:d8e91f9:     writer.append(new IntWritable(i++), new DoubleWritable(11));
1:d8e91f9:     writer.append(new IntWritable(i++), new DoubleWritable(13));
1:d8e91f9:     writer.close();
1:d8e91f9:   }
1:d8e91f9: 
1:d8e91f9:   //Not entirely sure on this test
1:d8e91f9:   @Test
1:d8e91f9:   public void testStdDev2() throws Exception {
1:d8e91f9:     Path input = getTestTempFilePath("stdDev/counts.file");
1:d8e91f9:     Path output = getTestTempFilePath("stdDev/output.file");
1:1de8cec:     FileSystem fs = FileSystem.get(input.toUri(), conf);
1:d8e91f9:     SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, input, IntWritable.class,
1:d8e91f9:             DoubleWritable.class);
1:051cbcf:     Random random = RandomUtils.getRandom();
1:d8e91f9:     Normal normal = new Normal(5, 3, random);
1:d8e91f9:     for (int i = 0; i < 1000000; i++) {
1:d8e91f9:       writer.append(new IntWritable(i), new DoubleWritable((long) normal.nextInt()));
1:d8e91f9:     }
1:d8e91f9:     writer.close();
1:d8e91f9:     double v = BasicStats.stdDev(input, output, conf);
1:d8e91f9:     assertEquals(3, v, 0.02);
1:d8e91f9:   }
1:d8e91f9: 
1:d8e91f9: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Isabel Drost
-------------------------------------------------------------------------------
commit:e3ec9d8
/////////////////////////////////////////////////////////////////////////
1:     conf = getConfiguration();
author:tcp
-------------------------------------------------------------------------------
commit:44459bd
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(1.56, v, 0.01); //sample std dev is 1.563, std. dev from a discrete set is 1.48
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(10.65, v, 0.01); //sample std dev is 10.65
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < 10000; i++) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1de8cec
/////////////////////////////////////////////////////////////////////////
1: 	  FileSystem fs = FileSystem.get(input.toUri(), conf);
/////////////////////////////////////////////////////////////////////////
1:     FileSystem fs = FileSystem.get(input.toUri(), conf);
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1:     Random random = RandomUtils.getRandom();
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1: public final class BasicStatsTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:     //Random random = new MersenneTwisterRNG();
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:d8e91f9
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.stats;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.DoubleWritable;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.jet.random.Normal;
1: import org.junit.Before;
1: import org.junit.Test;
0: import org.uncommons.maths.random.MersenneTwisterRNG;
1: 
1: import java.util.Random;
1: 
1: /**
1:  *
1:  *
0:  **/
0: public class BasicStatsTest extends MahoutTestCase {
1: 
1:   private Configuration conf;
1: 
1:   @Override
1:   @Before
1:   public void setUp() throws Exception {
1:     super.setUp();
0:     conf = new Configuration();
1:   }
1: 
1:   @Test
1:   public void testVar() throws Exception {
1:     Path input = getTestTempFilePath("stdDev/counts.file");
1:     Path output = getTestTempFilePath("stdDev/output.file");
1:     
1:     produceTestData(input);
1:     
1:     double v = BasicStats.variance(input, output, conf);
1:     assertEquals(2.44, v, 0.01);
1:   }
1: 
1: 
1:   @Test
1:   public void testStdDev() throws Exception {
1:     Path input = getTestTempFilePath("stdDev/counts.file");
1:     Path output = getTestTempFilePath("stdDev/output.file");
1:     
1:     produceTestData(input);
1:     
1:     double v = BasicStats.stdDev(input, output, conf);
0:     assertEquals(1.56, v, 0.01);//sample std dev is 1.563, std. dev from a discrete set is 1.48
1: 
1:   }
1:   
1:   @Test
1:   public void testStdDevForGivenMean() throws Exception {
1:     Path input = getTestTempFilePath("stdDev/counts.file");
1:     Path output = getTestTempFilePath("stdDev/output.file");
1:     
1:     produceTestData(input);
1:     
1:     double v = BasicStats.stdDevForGivenMean(input, output, 0.0D, conf);
0:     assertEquals(10.65, v, 0.01);//sample std dev is 10.65
1: 
1:   }
1:   
1:   private void produceTestData(Path input) throws Exception {
0: 	FileSystem fs = FileSystem.get(conf);
1:     SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, input, IntWritable.class, DoubleWritable.class);
0:     Random random = new MersenneTwisterRNG();
1:     /*Normal normal = new Normal(5, 3, random);
0:     for (int i = 0; i < 10000; i++){
1:       writer.append(new IntWritable(i), new DoubleWritable((long)normal.nextDouble()));
1:     }*/
1:     int i = 0;
1:     writer.append(new IntWritable(i++), new DoubleWritable(7));
1:     writer.append(new IntWritable(i++), new DoubleWritable(9));
1:     writer.append(new IntWritable(i++), new DoubleWritable(9));
1:     writer.append(new IntWritable(i++), new DoubleWritable(10));
1:     writer.append(new IntWritable(i++), new DoubleWritable(10));
1:     writer.append(new IntWritable(i++), new DoubleWritable(10));
1:     writer.append(new IntWritable(i++), new DoubleWritable(10));
1:     writer.append(new IntWritable(i++), new DoubleWritable(11));
1:     writer.append(new IntWritable(i++), new DoubleWritable(11));
1:     writer.append(new IntWritable(i++), new DoubleWritable(13));
1:     writer.close();
1:   }
1: 
1:   //Not entirely sure on this test
1:   @Test
1:   public void testStdDev2() throws Exception {
1:     Path input = getTestTempFilePath("stdDev/counts.file");
1:     Path output = getTestTempFilePath("stdDev/output.file");
0:     FileSystem fs = FileSystem.get(conf);
1:     SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, input, IntWritable.class,
1:             DoubleWritable.class);
0:     Random random = new MersenneTwisterRNG();
1:     Normal normal = new Normal(5, 3, random);
1:     for (int i = 0; i < 1000000; i++) {
1:       writer.append(new IntWritable(i), new DoubleWritable((long) normal.nextInt()));
1:     }
1:     writer.close();
1:     double v = BasicStats.stdDev(input, output, conf);
1:     assertEquals(3, v, 0.02);
1:   }
1: 
1: }
============================================================================