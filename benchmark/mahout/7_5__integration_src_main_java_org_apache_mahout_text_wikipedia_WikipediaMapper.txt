1:9a15cb8: /*
1:9a15cb8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9a15cb8:  * contributor license agreements.  See the NOTICE file distributed with
1:9a15cb8:  * this work for additional information regarding copyright ownership.
1:9a15cb8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9a15cb8:  * (the "License"); you may not use this file except in compliance with
1:9a15cb8:  * the License.  You may obtain a copy of the License at
1:9a15cb8:  *
1:9a15cb8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9a15cb8:  *
1:9a15cb8:  * Unless required by applicable law or agreed to in writing, software
1:9a15cb8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9a15cb8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9a15cb8:  * See the License for the specific language governing permissions and
1:9a15cb8:  * limitations under the License.
1:9a15cb8:  */
2:9a15cb8: 
1:9a15cb8: package org.apache.mahout.text.wikipedia;
1:9a15cb8: 
1:9a15cb8: import java.io.IOException;
1:85f9ece: import java.util.HashSet;
1:9a15cb8: import java.util.Locale;
1:9a15cb8: import java.util.Set;
1:9a15cb8: import java.util.regex.Matcher;
1:9a15cb8: import java.util.regex.Pattern;
1:9a15cb8: 
1:67a531e: import org.apache.commons.lang3.StringEscapeUtils;
1:9a15cb8: import org.apache.hadoop.conf.Configuration;
1:9a15cb8: import org.apache.hadoop.io.DefaultStringifier;
1:9a15cb8: import org.apache.hadoop.io.LongWritable;
1:9a15cb8: import org.apache.hadoop.io.Text;
1:9a15cb8: import org.apache.hadoop.mapreduce.Mapper;
1:9a15cb8: import org.apache.hadoop.util.GenericsUtil;
1:9a15cb8: import org.slf4j.Logger;
1:9a15cb8: import org.slf4j.LoggerFactory;
1:9a15cb8: 
1:9a15cb8: /**
1:9a15cb8:  * Maps over Wikipedia xml format and output all document having the category listed in the input category
1:9a15cb8:  * file
1:9a15cb8:  * 
1:9a15cb8:  */
1:9a15cb8: public class WikipediaMapper extends Mapper<LongWritable, Text, Text, Text> {
1:9a15cb8: 
1:9a15cb8:   private static final Logger log = LoggerFactory.getLogger(WikipediaMapper.class);
1:9a15cb8: 
1:9a15cb8:   private static final Pattern SPACE_NON_ALPHA_PATTERN = Pattern.compile("[\\s]");
1:9a15cb8: 
1:9a15cb8:   private static final String START_DOC = "<text xml:space=\"preserve\">";
1:9a15cb8: 
1:9a15cb8:   private static final String END_DOC = "</text>";
1:9a15cb8: 
1:9a15cb8:   private static final Pattern TITLE = Pattern.compile("<title>(.*)<\\/title>");
1:9a15cb8: 
1:9a15cb8:   private static final String REDIRECT = "<redirect />";
1:9a15cb8: 
1:9a15cb8:   private Set<String> inputCategories;
1:9a15cb8: 
1:9a15cb8:   private boolean exactMatchOnly;
1:9a15cb8: 
1:9a15cb8:   private boolean all;
1:9a15cb8: 
1:6dd0c92:   private boolean removeLabels;
1:6dd0c92: 
1:9a15cb8:   @Override
1:9a15cb8:   protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
1:9a15cb8: 
1:9a15cb8:     String content = value.toString();
1:9a15cb8:     if (content.contains(REDIRECT)) {
1:9a15cb8:       return;
2:9a15cb8:     }
1:9a15cb8:     String document;
1:9a15cb8:     String title;
1:9a15cb8:     try {
1:9a15cb8:       document = getDocument(content);
1:9a15cb8:       title = getTitle(content);
1:9a15cb8:     } catch (RuntimeException e) {
1:9a15cb8:       // TODO: reporter.getCounter("Wikipedia", "Parse errors").increment(1);
1:9a15cb8:       return;
1:9a15cb8:     }
1:9a15cb8: 
1:6dd0c92:     String catMatch = findMatchingCategory(document);
1:9a15cb8:     if (!all) {
1:9a15cb8:       if ("Unknown".equals(catMatch)) {
1:9a15cb8:         return;
1:9a15cb8:       }
1:9a15cb8:     }
1:d3c09ba: 
1:6dd0c92:     document = StringEscapeUtils.unescapeHtml4(document);    
1:6dd0c92:     if (removeLabels) {
1:6dd0c92:       document = removeCategoriesFromText(document);
1:6dd0c92:       // Reject documents with malformed tags
1:6dd0c92:       if (document == null) {
1:6dd0c92:         return;
1:6dd0c92:       }
1:6dd0c92:     }
1:6dd0c92: 
1:6dd0c92:     // write out in Bayes input style: key: /Category/document_name
1:d3c09ba:     String category = "/" + catMatch.toLowerCase(Locale.ENGLISH) + "/" +
1:d3c09ba:         SPACE_NON_ALPHA_PATTERN.matcher(title).replaceAll("_");
1:d3c09ba: 
1:d3c09ba:     context.write(new Text(category), new Text(document));
1:9a15cb8:   }
1:9a15cb8: 
1:9a15cb8:   @Override
1:9a15cb8:   protected void setup(Context context) throws IOException, InterruptedException {
1:9a15cb8:     super.setup(context);
1:9a15cb8:     Configuration conf = context.getConfiguration();
1:d3c09ba:  
1:85f9ece:     Set<String> newCategories = new HashSet<>();
1:d3c09ba:     DefaultStringifier<Set<String>> setStringifier =
1:85f9ece:           new DefaultStringifier<>(conf, GenericsUtil.getClass(newCategories));
1:9a15cb8: 
1:d3c09ba:     String categoriesStr = conf.get("wikipedia.categories");
1:d3c09ba:     inputCategories = setStringifier.fromString(categoriesStr);
1:9a15cb8:     exactMatchOnly = conf.getBoolean("exact.match.only", false);
1:6dd0c92:     all = conf.getBoolean("all.files", false);
1:6dd0c92:     removeLabels = conf.getBoolean("remove.labels",false);
1:6dd0c92:     log.info("Configure: Input Categories size: {} All: {} Exact Match: {} Remove Labels from Text: {}",
1:6dd0c92:             inputCategories.size(), all, exactMatchOnly, removeLabels);
1:9a15cb8:   }
1:9a15cb8: 
1:9a15cb8:   private static String getDocument(String xml) {
1:9a15cb8:     int start = xml.indexOf(START_DOC) + START_DOC.length();
1:9a15cb8:     int end = xml.indexOf(END_DOC, start);
1:9a15cb8:     return xml.substring(start, end);
1:9a15cb8:   }
1:9a15cb8: 
1:9a15cb8:   private static String getTitle(CharSequence xml) {
1:9a15cb8:     Matcher m = TITLE.matcher(xml);
1:9a15cb8:     return m.find() ? m.group(1) : "";
1:9a15cb8:   }
1:9a15cb8: 
1:9a15cb8:   private String findMatchingCategory(String document) {
1:9a15cb8:     int startIndex = 0;
1:9a15cb8:     int categoryIndex;
1:9a15cb8:     while ((categoryIndex = document.indexOf("[[Category:", startIndex)) != -1) {
1:9a15cb8:       categoryIndex += 11;
1:9a15cb8:       int endIndex = document.indexOf("]]", categoryIndex);
1:9a15cb8:       if (endIndex >= document.length() || endIndex < 0) {
1:9a15cb8:         break;
1:9a15cb8:       }
1:9a15cb8:       String category = document.substring(categoryIndex, endIndex).toLowerCase(Locale.ENGLISH).trim();
1:9a15cb8:       if (exactMatchOnly && inputCategories.contains(category)) {
1:d3c09ba:         return category.toLowerCase(Locale.ENGLISH);
1:9a15cb8:       }
1:9a15cb8:       if (!exactMatchOnly) {
1:9a15cb8:         for (String inputCategory : inputCategories) {
1:9a15cb8:           if (category.contains(inputCategory)) { // we have an inexact match
1:d3c09ba:             return inputCategory.toLowerCase(Locale.ENGLISH);
1:9a15cb8:           }
1:9a15cb8:         }
1:9a15cb8:       }
1:9a15cb8:       startIndex = endIndex;
1:9a15cb8:     }
1:9a15cb8:     return "Unknown";
1:9a15cb8:   }
1:6dd0c92: 
1:6dd0c92:   private String removeCategoriesFromText(String document) {
1:6dd0c92:     int startIndex = 0;
1:6dd0c92:     int categoryIndex;
1:6dd0c92:     try {
1:6dd0c92:       while ((categoryIndex = document.indexOf("[[Category:", startIndex)) != -1) {
1:6dd0c92:         int endIndex = document.indexOf("]]", categoryIndex);
1:6dd0c92:         if (endIndex >= document.length() || endIndex < 0) {
1:6dd0c92:           break;
1:6dd0c92:         }
1:6dd0c92:         document = document.replace(document.substring(categoryIndex, endIndex + 2), "");
1:6dd0c92:         if (categoryIndex < document.length()) {
1:6dd0c92:           startIndex = categoryIndex;
1:6dd0c92:         } else {
1:6dd0c92:           break;
1:6dd0c92:         }
1:6dd0c92:       }
1:6dd0c92:     } catch(StringIndexOutOfBoundsException e) {
1:6dd0c92:       return null;
1:6dd0c92:     }
1:6dd0c92:     return document;
1:6dd0c92:   }
1:9a15cb8: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
1:     Set<String> newCategories = new HashSet<>();
1:           new DefaultStringifier<>(conf, GenericsUtil.getClass(newCategories));
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:6dd0c92
/////////////////////////////////////////////////////////////////////////
1:   private boolean removeLabels;
1: 
/////////////////////////////////////////////////////////////////////////
1:     String catMatch = findMatchingCategory(document);
1:     document = StringEscapeUtils.unescapeHtml4(document);    
1:     if (removeLabels) {
1:       document = removeCategoriesFromText(document);
1:       // Reject documents with malformed tags
1:       if (document == null) {
1:         return;
1:       }
1:     }
1: 
1:     // write out in Bayes input style: key: /Category/document_name
/////////////////////////////////////////////////////////////////////////
1:     all = conf.getBoolean("all.files", false);
1:     removeLabels = conf.getBoolean("remove.labels",false);
1:     log.info("Configure: Input Categories size: {} All: {} Exact Match: {} Remove Labels from Text: {}",
1:             inputCategories.size(), all, exactMatchOnly, removeLabels);
/////////////////////////////////////////////////////////////////////////
1: 
1:   private String removeCategoriesFromText(String document) {
1:     int startIndex = 0;
1:     int categoryIndex;
1:     try {
1:       while ((categoryIndex = document.indexOf("[[Category:", startIndex)) != -1) {
1:         int endIndex = document.indexOf("]]", categoryIndex);
1:         if (endIndex >= document.length() || endIndex < 0) {
1:           break;
1:         }
1:         document = document.replace(document.substring(categoryIndex, endIndex + 2), "");
1:         if (categoryIndex < document.length()) {
1:           startIndex = categoryIndex;
1:         } else {
1:           break;
1:         }
1:       }
1:     } catch(StringIndexOutOfBoundsException e) {
1:       return null;
1:     }
1:     return document;
1:   }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d3c09ba
/////////////////////////////////////////////////////////////////////////
0:     String catMatch = findMatchingCategory(document);
0:     document = StringEscapeUtils.unescapeHtml4(document);    
0:     // write out in Bayes input style: key: /Category/document_name
1: 
1:     String category = "/" + catMatch.toLowerCase(Locale.ENGLISH) + "/" +
1:         SPACE_NON_ALPHA_PATTERN.matcher(title).replaceAll("_");
1: 
1:     context.write(new Text(category), new Text(document));
1:  
0:     Set<String> newCategories = Sets.newHashSet();
1:     DefaultStringifier<Set<String>> setStringifier =
1:     String categoriesStr = conf.get("wikipedia.categories");
1:     inputCategories = setStringifier.fromString(categoriesStr);
/////////////////////////////////////////////////////////////////////////
1:         return category.toLowerCase(Locale.ENGLISH);
1:             return inputCategory.toLowerCase(Locale.ENGLISH);
commit:210b265
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
0:       Set<String> newCategories = Sets.newHashSet();
author:smarthi
-------------------------------------------------------------------------------
commit:67a531e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.StringEscapeUtils;
/////////////////////////////////////////////////////////////////////////
0:     document = StringEscapeUtils.unescapeHtml4(document);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8396a27
/////////////////////////////////////////////////////////////////////////
0:              inputCategories.size(), all, exactMatchOnly);
author:Robin Anil
-------------------------------------------------------------------------------
commit:9a15cb8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.text.wikipedia;
1: 
1: import java.io.IOException;
0: import java.util.HashSet;
1: import java.util.Locale;
1: import java.util.Set;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
0: import org.apache.commons.lang.StringEscapeUtils;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.DefaultStringifier;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.hadoop.util.GenericsUtil;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Maps over Wikipedia xml format and output all document having the category listed in the input category
1:  * file
1:  * 
1:  */
1: public class WikipediaMapper extends Mapper<LongWritable, Text, Text, Text> {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(WikipediaMapper.class);
1: 
1:   private static final Pattern SPACE_NON_ALPHA_PATTERN = Pattern.compile("[\\s]");
1: 
1:   private static final String START_DOC = "<text xml:space=\"preserve\">";
1: 
1:   private static final String END_DOC = "</text>";
1: 
1:   private static final Pattern TITLE = Pattern.compile("<title>(.*)<\\/title>");
1: 
1:   private static final String REDIRECT = "<redirect />";
1: 
1:   private Set<String> inputCategories;
1: 
1:   private boolean exactMatchOnly;
1: 
1:   private boolean all;
1: 
1:   @Override
1:   protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
1: 
1:     String content = value.toString();
1:     if (content.contains(REDIRECT)) {
1:       return;
1:     }
1:     String document;
1:     String title;
1:     try {
1:       document = getDocument(content);
1:       title = getTitle(content);
1:     } catch (RuntimeException e) {
1:       // TODO: reporter.getCounter("Wikipedia", "Parse errors").increment(1);
1:       return;
1:     }
1: 
1:     if (!all) {
0:       String catMatch = findMatchingCategory(document);
1:       if ("Unknown".equals(catMatch)) {
1:         return;
1:       }
1:     }
0:     document = StringEscapeUtils.unescapeHtml(document);
0:     context.write(new Text(SPACE_NON_ALPHA_PATTERN.matcher(title).replaceAll("_")), new Text(document));
1:   }
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     super.setup(context);
1:     Configuration conf = context.getConfiguration();
0:     if (inputCategories == null) {
0:       Set<String> newCategories = new HashSet<String>();
1: 
0:       DefaultStringifier<Set<String>> setStringifier =
0:           new DefaultStringifier<Set<String>>(conf, GenericsUtil.getClass(newCategories));
1: 
0:       String categoriesStr = conf.get("wikipedia.categories", setStringifier.toString(newCategories));
0:       inputCategories = setStringifier.fromString(categoriesStr);
1:     }
1:     exactMatchOnly = conf.getBoolean("exact.match.only", false);
0:     all = conf.getBoolean("all.files", true);
0:     log.info("Configure: Input Categories size: {} All: {} Exact Match: {}",
0:              new Object[] {inputCategories.size(), all, exactMatchOnly});
1:   }
1: 
1:   private static String getDocument(String xml) {
1:     int start = xml.indexOf(START_DOC) + START_DOC.length();
1:     int end = xml.indexOf(END_DOC, start);
1:     return xml.substring(start, end);
1:   }
1: 
1:   private static String getTitle(CharSequence xml) {
1:     Matcher m = TITLE.matcher(xml);
1:     return m.find() ? m.group(1) : "";
1:   }
1: 
1:   private String findMatchingCategory(String document) {
1:     int startIndex = 0;
1:     int categoryIndex;
1:     while ((categoryIndex = document.indexOf("[[Category:", startIndex)) != -1) {
1:       categoryIndex += 11;
1:       int endIndex = document.indexOf("]]", categoryIndex);
1:       if (endIndex >= document.length() || endIndex < 0) {
1:         break;
1:       }
1:       String category = document.substring(categoryIndex, endIndex).toLowerCase(Locale.ENGLISH).trim();
1:       if (exactMatchOnly && inputCategories.contains(category)) {
0:         return category;
1:       }
1:       if (!exactMatchOnly) {
1:         for (String inputCategory : inputCategories) {
1:           if (category.contains(inputCategory)) { // we have an inexact match
0:             return inputCategory;
1:           }
1:         }
1:       }
1:       startIndex = endIndex;
1:     }
1:     return "Unknown";
1:   }
1: }
============================================================================