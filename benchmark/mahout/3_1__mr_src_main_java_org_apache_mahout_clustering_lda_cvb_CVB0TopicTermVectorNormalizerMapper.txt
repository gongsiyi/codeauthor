1:131eb4a: /**
1:131eb4a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:131eb4a:  * contributor license agreements.  See the NOTICE file distributed with
1:131eb4a:  * this work for additional information regarding copyright ownership.
1:131eb4a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:131eb4a:  * (the "License"); you may not use this file except in compliance with
1:131eb4a:  * the License.  You may obtain a copy of the License at
1:131eb4a:  *
1:131eb4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:131eb4a:  *
1:131eb4a:  * Unless required by applicable law or agreed to in writing, software
1:131eb4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:131eb4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:131eb4a:  * See the License for the specific language governing permissions and
1:131eb4a:  * limitations under the License.
1:131eb4a:  */
1:131eb4a: package org.apache.mahout.clustering.lda.cvb;
1:131eb4a: 
1:131eb4a: import org.apache.hadoop.io.IntWritable;
1:131eb4a: import org.apache.hadoop.mapreduce.Mapper;
1:131eb4a: import org.apache.mahout.math.VectorWritable;
1:131eb4a: import org.apache.mahout.math.function.Functions;
1:131eb4a: 
1:131eb4a: import java.io.IOException;
1:131eb4a: 
1:131eb4a: /**
1:131eb4a:  * Performs L1 normalization of input vectors.
1:131eb4a:  */
1:131eb4a: public class CVB0TopicTermVectorNormalizerMapper extends
1:131eb4a:     Mapper<IntWritable, VectorWritable, IntWritable, VectorWritable> {
1:131eb4a: 
1:131eb4a:   @Override
1:131eb4a:   protected void map(IntWritable key, VectorWritable value, Context context) throws IOException,
1:131eb4a:       InterruptedException {
1:131eb4a:     value.get().assign(Functions.div(value.get().norm(1.0)));
1:131eb4a:     context.write(key, value);
1:131eb4a:   }
1:131eb4a: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:131eb4a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.clustering.lda.cvb;
1: 
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.function.Functions;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * Performs L1 normalization of input vectors.
1:  */
1: public class CVB0TopicTermVectorNormalizerMapper extends
1:     Mapper<IntWritable, VectorWritable, IntWritable, VectorWritable> {
1: 
1:   @Override
1:   protected void map(IntWritable key, VectorWritable value, Context context) throws IOException,
1:       InterruptedException {
1:     value.get().assign(Functions.div(value.get().norm(1.0)));
1:     context.write(key, value);
1:   }
1: }
============================================================================