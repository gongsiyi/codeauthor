1:10c535c: /*
1:aebdfaf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:aebdfaf:  * contributor license agreements.  See the NOTICE file distributed with
1:aebdfaf:  * this work for additional information regarding copyright ownership.
1:aebdfaf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:aebdfaf:  * (the "License"); you may not use this file except in compliance with
1:aebdfaf:  * the License.  You may obtain a copy of the License at
1:aebdfaf:  *
1:aebdfaf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:aebdfaf:  *
1:aebdfaf:  * Unless required by applicable law or agreed to in writing, software
1:aebdfaf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:aebdfaf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aebdfaf:  * See the License for the specific language governing permissions and
1:aebdfaf:  * limitations under the License.
1:aebdfaf:  */
6:aebdfaf: 
1:aebdfaf: package org.apache.mahout.math;
1:aebdfaf: 
1:aebdfaf: import java.io.File;
1:aebdfaf: import java.io.IOException;
1:aebdfaf: import java.util.Random;
1:10c535c: 
1:0a0fddf: import org.apache.mahout.common.RandomUtils;
1:0a0fddf: import org.junit.Test;
1:0a0fddf: 
1:8b6a26a: public class FileBasedSparseBinaryMatrixTest extends MahoutTestCase {
1:0a0fddf: 
1:0a0fddf:   /*
1:aebdfaf:   // 10 million rows x 40 columns x 8 bytes = 3.2GB of data
1:aebdfaf:   // we need >2GB to stress the file based matrix implementation
1:aebdfaf:   private static final int ROWS = 10 * 1000 * 1000;
1:aebdfaf:   private static final int COLUMNS = 1000;
1:aebdfaf: 
1:10c535c:   @Test
1:aebdfaf:   public void testBigMatrix() throws IOException {
1:aebdfaf:     // only run this test if -DrunSlowTests is used.  Also requires 4GB or more of heap.
1:10c535c:     // assumeNotNull(System.getProperty("runSlowTests"));
1:aebdfaf: 
1:aebdfaf:     Matrix m0 = new SparseRowMatrix(ROWS, COLUMNS);
1:8b6a26a:     Random gen = RandomUtils.getRandom();
1:aebdfaf:     for (int i = 0; i < 1000; i++) {
1:aebdfaf:       m0.set(gen.nextInt(ROWS), gen.nextInt(COLUMNS), matrixValue(i));
1:aebdfaf:     }
1:8b6a26a:     File f = File.createTempFile("foo", ".m");
1:aebdfaf:     f.deleteOnExit();
1:aebdfaf:     System.out.printf("Starting to write to %s\n", f.getAbsolutePath());
1:aebdfaf:     FileBasedSparseBinaryMatrix.writeMatrix(f, m0);
1:aebdfaf:     System.out.printf("done\n");
1:8b6a26a:     System.out.printf("File is %.1f MB\n", f.length() / 1.0e6);
1:aebdfaf: 
1:aebdfaf:     FileBasedSparseBinaryMatrix m1 = new FileBasedSparseBinaryMatrix(ROWS, COLUMNS);
1:aebdfaf:     System.out.printf("Starting read\n");
1:aebdfaf:     m1.setData(f, false);
1:8b6a26a:     gen = RandomUtils.getRandom();
1:aebdfaf:     for (int i = 0; i < 1000; i++) {
1:aebdfaf:       assertEquals(matrixValue(i), m1.get(gen.nextInt(ROWS), gen.nextInt(COLUMNS)), 0.0);
1:aebdfaf:     }
1:aebdfaf:     System.out.printf("done\n");
1:aebdfaf:   }
1:aebdfaf: 
1:8b6a26a:   private static int matrixValue(int i) {
1:aebdfaf:     return (i * 88513) % 10000;
1:aebdfaf:   }
1:10c535c:    */
1:aebdfaf: 
2:aebdfaf:   @Test
1:aebdfaf:   public void testSetData() throws IOException {
1:8b6a26a: 
1:f689fad:     File f = File.createTempFile("matrix", ".m", getTestTempDir());
1:aebdfaf:     f.deleteOnExit();
1:aebdfaf: 
1:aebdfaf:     Random gen = RandomUtils.getRandom();
1:8b6a26a:     Matrix m0 = new SparseRowMatrix(10, 21);
1:aebdfaf:     for (MatrixSlice row : m0) {
1:aebdfaf:       int len = (int) Math.ceil(-15 * Math.log(1 - gen.nextDouble()));
1:aebdfaf:       for (int i = 0; i < len; i++) {
1:8b6a26a:         row.vector().set(gen.nextInt(21), 1);
1:aebdfaf:       }
1:aebdfaf:     }
1:aebdfaf:     FileBasedSparseBinaryMatrix.writeMatrix(f, m0);
1:aebdfaf: 
1:8b6a26a:     FileBasedSparseBinaryMatrix m = new FileBasedSparseBinaryMatrix(10, 21);
1:bdb1c48:     m.setData(f);
1:aebdfaf: 
1:aebdfaf:     for (MatrixSlice row : m) {
1:8b6a26a:       Vector diff = row.vector().minus(m0.viewRow(row.index()));
1:8b6a26a:       double error = diff.norm(1);
1:8b6a26a:       if (error > 1.0e-14) {
1:aebdfaf:         System.out.printf("%s\n", diff);
1:aebdfaf:       }
1:8b6a26a:       assertEquals(0, error, 1.0e-14);
1:aebdfaf:     }
1:aebdfaf:   }
1:aebdfaf: }
============================================================================
author:akm
-------------------------------------------------------------------------------
commit:f689fad
/////////////////////////////////////////////////////////////////////////
1:     File f = File.createTempFile("matrix", ".m", getTestTempDir());
author:Robin Anil
-------------------------------------------------------------------------------
commit:0a0fddf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
1: import org.junit.Test;
1: 
1: 
1:   /*
/////////////////////////////////////////////////////////////////////////
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1:     m.setData(f);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1:   
1:   /*  
1:   @Test
1:     // assumeNotNull(System.getProperty("runSlowTests"));
/////////////////////////////////////////////////////////////////////////
1:    */
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: public class FileBasedSparseBinaryMatrixTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:     Random gen = RandomUtils.getRandom();
1:     File f = File.createTempFile("foo", ".m");
1:     System.out.printf("File is %.1f MB\n", f.length() / 1.0e6);
1:     gen = RandomUtils.getRandom();
1:   private static int matrixValue(int i) {
1: 
1:     Matrix m0 = new SparseRowMatrix(10, 21);
1:         row.vector().set(gen.nextInt(21), 1);
1:     FileBasedSparseBinaryMatrix m = new FileBasedSparseBinaryMatrix(10, 21);
1:       Vector diff = row.vector().minus(m0.viewRow(row.index()));
1:       double error = diff.norm(1);
1:       if (error > 1.0e-14) {
1:       assertEquals(0, error, 1.0e-14);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:500d981
/////////////////////////////////////////////////////////////////////////
0:   // @Test
commit:aebdfaf
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
0: import org.apache.mahout.common.RandomUtils;
0: import org.apache.mahout.math.function.DoubleFunction;
0: import org.apache.mahout.math.function.Functions;
0: import org.apache.mahout.math.random.MultiNormal;
0: import org.junit.Test;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Random;
1: 
0: import static junit.framework.Assert.assertEquals;
0: import static org.junit.Assume.assumeNotNull;
1: 
0: public class FileBasedSparseBinaryMatrixTest {
1:   // 10 million rows x 40 columns x 8 bytes = 3.2GB of data
1:   // we need >2GB to stress the file based matrix implementation
1:   private static final int ROWS = 10 * 1000 * 1000;
1:   private static final int COLUMNS = 1000;
1: 
1:   @Test
1:   public void testBigMatrix() throws IOException {
1:     // only run this test if -DrunSlowTests is used.  Also requires 4GB or more of heap.
0: //    assumeNotNull(System.getProperty("runSlowTests"));
1: 
1:     Matrix m0 = new SparseRowMatrix(ROWS, COLUMNS);
0:     Random gen = new Random(1);
1:     for (int i = 0; i < 1000; i++) {
1:       m0.set(gen.nextInt(ROWS), gen.nextInt(COLUMNS), matrixValue(i));
1:     }
0:     final File f = File.createTempFile("foo", ".m");
1:     f.deleteOnExit();
1:     System.out.printf("Starting to write to %s\n", f.getAbsolutePath());
1:     FileBasedSparseBinaryMatrix.writeMatrix(f, m0);
1:     System.out.printf("done\n");
0:     System.out.printf("File is %.1f MB\n", f.length() / 1e6);
1: 
1:     FileBasedSparseBinaryMatrix m1 = new FileBasedSparseBinaryMatrix(ROWS, COLUMNS);
1:     System.out.printf("Starting read\n");
1:     m1.setData(f, false);
0:     gen = new Random(1);
1:     for (int i = 0; i < 1000; i++) {
1:       assertEquals(matrixValue(i), m1.get(gen.nextInt(ROWS), gen.nextInt(COLUMNS)), 0.0);
1:     }
1:     System.out.printf("done\n");
1:   }
1: 
0:   private int matrixValue(int i) {
1:     return (i * 88513) % 10000;
1:   }
1: 
1:   @Test
1:   public void testSetData() throws IOException {
0:     final int ROWS = 10;
0:     final int COLS = 21;
0:     File f = File.createTempFile("matrix", ".m");
1:     f.deleteOnExit();
1: 
1:     Random gen = RandomUtils.getRandom();
0:     Matrix m0 = new SparseRowMatrix(ROWS, COLS);
1:     for (MatrixSlice row : m0) {
1:       int len = (int) Math.ceil(-15 * Math.log(1 - gen.nextDouble()));
1:       for (int i = 0; i < len; i++) {
0:         row.vector().set(gen.nextInt(COLS), 1);
1:       }
1:     }
1:     FileBasedSparseBinaryMatrix.writeMatrix(f, m0);
1: 
0:     FileBasedSparseBinaryMatrix m = new FileBasedSparseBinaryMatrix(ROWS, COLS);
0:     m.setData(f, true);
1: 
1:     for (MatrixSlice row : m) {
0:       final Vector diff = row.vector().minus(m0.viewRow(row.index()));
0:       final double error = diff.norm(1);
0:       if (error > 1e-14) {
1:         System.out.printf("%s\n", diff);
1:       }
0:       assertEquals(0, error, 1e-14);
1:     }
1:   }
1: 
1: 
1: }
============================================================================