1:a64100d: /*
1:a64100d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a64100d:  * contributor license agreements.  See the NOTICE file distributed with
1:a64100d:  * this work for additional information regarding copyright ownership.
1:a64100d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a64100d:  * (the "License"); you may not use this file except in compliance with
1:a64100d:  * the License.  You may obtain a copy of the License at
1:a64100d:  *
1:a64100d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a64100d:  *
1:a64100d:  * Unless required by applicable law or agreed to in writing, software
1:a64100d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a64100d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a64100d:  * See the License for the specific language governing permissions and
1:a64100d:  * limitations under the License.
1:a64100d:  */
6:a64100d: 
1:a64100d: package org.apache.mahout.classifier.sgd.bankmarketing;
1:a64100d: 
1:a64100d: import org.apache.mahout.math.RandomAccessSparseVector;
1:a64100d: import org.apache.mahout.math.Vector;
1:a64100d: import org.apache.mahout.vectorizer.encoders.ConstantValueEncoder;
1:a64100d: import org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;
1:a64100d: import org.apache.mahout.vectorizer.encoders.StaticWordValueEncoder;
1:a64100d: 
1:a64100d: import java.util.Iterator;
1:4ef9d31: import java.util.LinkedHashMap;
1:a64100d: import java.util.Map;
1:a64100d: 
1:a64100d: public class TelephoneCall {
1:a64100d:   public static final int FEATURES = 100;
1:a64100d:   private static final ConstantValueEncoder interceptEncoder = new ConstantValueEncoder("intercept");
1:a64100d:   private static final FeatureVectorEncoder featureEncoder = new StaticWordValueEncoder("feature");
1:a64100d: 
1:a64100d:   private RandomAccessSparseVector vector;
1:a64100d: 
1:4ef9d31:   private Map<String, String> fields = new LinkedHashMap<>();
1:a64100d: 
1:a64100d:   public TelephoneCall(Iterable<String> fieldNames, Iterable<String> values) {
1:a64100d:     vector = new RandomAccessSparseVector(FEATURES);
1:a64100d:     Iterator<String> value = values.iterator();
1:a64100d:     interceptEncoder.addToVector("1", vector);
1:a64100d:     for (String name : fieldNames) {
1:a64100d:       String fieldValue = value.next();
1:a64100d:       fields.put(name, fieldValue);
1:a64100d: 
1:4ef9d31:       switch (name) {
1:4ef9d31:         case "age": {
1:4ef9d31:           double v = Double.parseDouble(fieldValue);
1:4ef9d31:           featureEncoder.addToVector(name, Math.log(v), vector);
1:4ef9d31:           break;
1:a64100d:         }
1:4ef9d31:         case "balance": {
1:4ef9d31:           double v;
1:4ef9d31:           v = Double.parseDouble(fieldValue);
1:4ef9d31:           if (v < -2000) {
1:4ef9d31:             v = -2000;
1:4ef9d31:           }
1:4ef9d31:           featureEncoder.addToVector(name, Math.log(v + 2001) - 8, vector);
1:4ef9d31:           break;
1:4ef9d31:         }
1:4ef9d31:         case "duration": {
1:4ef9d31:           double v;
1:4ef9d31:           v = Double.parseDouble(fieldValue);
1:4ef9d31:           featureEncoder.addToVector(name, Math.log(v + 1) - 5, vector);
1:4ef9d31:           break;
1:4ef9d31:         }
1:4ef9d31:         case "pdays": {
1:4ef9d31:           double v;
1:4ef9d31:           v = Double.parseDouble(fieldValue);
1:4ef9d31:           featureEncoder.addToVector(name, Math.log(v + 2), vector);
1:4ef9d31:           break;
1:4ef9d31:         }
1:4ef9d31:         case "job":
1:4ef9d31:         case "marital":
1:4ef9d31:         case "education":
1:4ef9d31:         case "default":
1:4ef9d31:         case "housing":
1:4ef9d31:         case "loan":
1:4ef9d31:         case "contact":
1:4ef9d31:         case "campaign":
1:4ef9d31:         case "previous":
1:4ef9d31:         case "poutcome":
1:4ef9d31:           featureEncoder.addToVector(name + ":" + fieldValue, 1, vector);
1:4ef9d31:           break;
1:4ef9d31:         case "day":
1:4ef9d31:         case "month":
1:4ef9d31:         case "y":
1:4ef9d31:           // ignore these for vectorizing
1:4ef9d31:           break;
1:4ef9d31:         default:
1:4ef9d31:           throw new IllegalArgumentException(String.format("Bad field name: %s", name));
1:a64100d:       }
1:a64100d:     }
1:a64100d:   }
1:a64100d: 
1:a64100d:   public Vector asVector() {
1:a64100d:     return vector;
1:a64100d:   }
1:a64100d: 
1:a64100d:   public int getTarget() {
1:a64100d:     return fields.get("y").equals("no") ? 0 : 1;
1:a64100d:   }
1:a64100d: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedHashMap;
/////////////////////////////////////////////////////////////////////////
1:   private Map<String, String> fields = new LinkedHashMap<>();
/////////////////////////////////////////////////////////////////////////
1:       switch (name) {
1:         case "age": {
1:           double v = Double.parseDouble(fieldValue);
1:           featureEncoder.addToVector(name, Math.log(v), vector);
1:           break;
1:         case "balance": {
1:           double v;
1:           v = Double.parseDouble(fieldValue);
1:           if (v < -2000) {
1:             v = -2000;
1:           }
1:           featureEncoder.addToVector(name, Math.log(v + 2001) - 8, vector);
1:           break;
1:         }
1:         case "duration": {
1:           double v;
1:           v = Double.parseDouble(fieldValue);
1:           featureEncoder.addToVector(name, Math.log(v + 1) - 5, vector);
1:           break;
1:         }
1:         case "pdays": {
1:           double v;
1:           v = Double.parseDouble(fieldValue);
1:           featureEncoder.addToVector(name, Math.log(v + 2), vector);
1:           break;
1:         }
1:         case "job":
1:         case "marital":
1:         case "education":
1:         case "default":
1:         case "housing":
1:         case "loan":
1:         case "contact":
1:         case "campaign":
1:         case "previous":
1:         case "poutcome":
1:           featureEncoder.addToVector(name + ":" + fieldValue, 1, vector);
1:           break;
1:         case "day":
1:         case "month":
1:         case "y":
1:           // ignore these for vectorizing
1:           break;
1:         default:
1:           throw new IllegalArgumentException(String.format("Bad field name: %s", name));
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:f789bd0
/////////////////////////////////////////////////////////////////////////
0:       } else if (name.equals("job") || name.equals("marital") || name.equals("education") || name.equals("default") ||
0:                  name.equals("housing") || name.equals("loan") || name.equals("contact") || name.equals("campaign") ||
0:                  name.equals("previous") || name.equals("poutcome")) {
author:frankscholten
-------------------------------------------------------------------------------
commit:a64100d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd.bankmarketing;
1: 
0: import com.google.common.collect.Maps;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.vectorizer.encoders.ConstantValueEncoder;
1: import org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;
1: import org.apache.mahout.vectorizer.encoders.StaticWordValueEncoder;
1: 
1: import java.util.Iterator;
1: import java.util.Map;
1: 
1: public class TelephoneCall {
1:   public static final int FEATURES = 100;
1:   private static final ConstantValueEncoder interceptEncoder = new ConstantValueEncoder("intercept");
1:   private static final FeatureVectorEncoder featureEncoder = new StaticWordValueEncoder("feature");
1: 
1:   private RandomAccessSparseVector vector;
1: 
0:   private Map<String, String> fields = Maps.newLinkedHashMap();
1: 
1:   public TelephoneCall(Iterable<String> fieldNames, Iterable<String> values) {
1:     vector = new RandomAccessSparseVector(FEATURES);
1:     Iterator<String> value = values.iterator();
1:     interceptEncoder.addToVector("1", vector);
1:     for (String name : fieldNames) {
1:       String fieldValue = value.next();
1:       fields.put(name, fieldValue);
1: 
0:       if (name.equals("age")) {
0:         double v = Double.parseDouble(fieldValue);
0:         featureEncoder.addToVector(name, Math.log(v), vector);
1: 
0:       } else if (name.equals("balance")) {
0:         double v;
0:         v = Double.parseDouble(fieldValue);
0:         if (v < -2000) {
0:           v = -2000;
1:         }
0:         featureEncoder.addToVector(name, Math.log(v + 2001) - 8, vector);
1: 
0:       } else if (name.equals("duration")) {
0:         double v;
0:         v = Double.parseDouble(fieldValue);
0:         featureEncoder.addToVector(name, Math.log(v + 1) - 5, vector);
1: 
0:       } else if (name.equals("pdays")) {
0:         double v;
0:         v = Double.parseDouble(fieldValue);
0:         featureEncoder.addToVector(name, Math.log(v + 2), vector);
1: 
0:       } else if (name.equals("job") || name.equals("marital") || name.equals("education") || name.equals("default") || name.equals("housing") || name.equals("loan") || name.equals("contact") || name.equals("campaign") || name.equals("previous") || name.equals("poutcome")) {
0:         featureEncoder.addToVector(name + ":" + fieldValue, 1, vector);
1: 
0:       } else if (name.equals("day") || name.equals("month") || name.equals("y")) {
0:         // ignore these for vectorizing
0:       } else {
0:         throw new IllegalArgumentException(String.format("Bad field name: %s", name));
1:       }
1:     }
1:   }
1: 
1:   public Vector asVector() {
1:     return vector;
1:   }
1: 
1:   public int getTarget() {
1:     return fields.get("y").equals("no") ? 0 : 1;
1:   }
1: }
============================================================================