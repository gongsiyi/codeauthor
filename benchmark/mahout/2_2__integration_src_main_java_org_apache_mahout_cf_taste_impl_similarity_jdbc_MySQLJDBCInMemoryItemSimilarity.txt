1:e23728d: /**
1:e23728d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e23728d:  * contributor license agreements.  See the NOTICE file distributed with
1:e23728d:  * this work for additional information regarding copyright ownership.
1:e23728d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e23728d:  * (the "License"); you may not use this file except in compliance with
1:e23728d:  * the License.  You may obtain a copy of the License at
1:e23728d:  *
1:e23728d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e23728d:  *
1:e23728d:  * Unless required by applicable law or agreed to in writing, software
1:e23728d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e23728d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e23728d:  * See the License for the specific language governing permissions and
1:e23728d:  * limitations under the License.
1:e23728d:  */
3:e23728d: 
1:e23728d: package org.apache.mahout.cf.taste.impl.similarity.jdbc;
1:e23728d: 
1:e23728d: import org.apache.mahout.cf.taste.common.TasteException;
1:e23728d: 
1:e23728d: import javax.sql.DataSource;
1:e23728d: 
1:cb14323: public class MySQLJDBCInMemoryItemSimilarity extends SQL92JDBCInMemoryItemSimilarity {
1:e23728d: 
1:e23728d:   public MySQLJDBCInMemoryItemSimilarity() throws TasteException {
1:e23728d:   }
1:e23728d: 
1:e23728d:   public MySQLJDBCInMemoryItemSimilarity(String dataSourceName) throws TasteException {
1:cb14323:     super(dataSourceName);
1:e23728d:   }
1:e23728d: 
1:e23728d:   public MySQLJDBCInMemoryItemSimilarity(DataSource dataSource) {
1:cb14323:     super(dataSource);
1:e23728d:   }
1:e23728d: 
1:e23728d:   public MySQLJDBCInMemoryItemSimilarity(DataSource dataSource, String getAllItemSimilaritiesSQL) {
1:e23728d:     super(dataSource, getAllItemSimilaritiesSQL);
1:e23728d:   }
1:e23728d: 
1:e23728d:   @Override
1:e23728d:   protected int getFetchSize() {
1:e23728d:     // Need to return this for MySQL Connector/J to make it use streaming mode
1:e23728d:     return Integer.MIN_VALUE;
1:e23728d:   }
1:cb14323: 
1:e23728d: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:cb14323
/////////////////////////////////////////////////////////////////////////
1: public class MySQLJDBCInMemoryItemSimilarity extends SQL92JDBCInMemoryItemSimilarity {
1:     super(dataSourceName);
1:     super(dataSource);
/////////////////////////////////////////////////////////////////////////
1: 
commit:50fd693
commit:3218e95
/////////////////////////////////////////////////////////////////////////
0:       "SELECT " + AbstractJDBCItemSimilarity.DEFAULT_ITEM_A_ID_COLUMN + ", "
0:       + AbstractJDBCItemSimilarity.DEFAULT_ITEM_B_ID_COLUMN + ", "
0:       + AbstractJDBCItemSimilarity.DEFAULT_SIMILARITY_COLUMN + " FROM "
0:       + AbstractJDBCItemSimilarity.DEFAULT_SIMILARITY_TABLE;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e23728d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.similarity.jdbc;
1: 
1: import org.apache.mahout.cf.taste.common.TasteException;
0: import org.apache.mahout.cf.taste.impl.common.jdbc.AbstractJDBCComponent;
1: 
1: import javax.sql.DataSource;
1: 
0: public class MySQLJDBCInMemoryItemSimilarity extends AbstractJDBCInMemoryItemSimilarity {
1: 
0:   static final String DEFAULT_GET_ALL_ITEMSIMILARITIES_SQL =
0:       "SELECT " + AbstractJDBCItemSimilarity.DEFAULT_ITEM_A_ID_COLUMN + ", " +
0:         AbstractJDBCItemSimilarity.DEFAULT_ITEM_B_ID_COLUMN + ", " +
0:         AbstractJDBCItemSimilarity.DEFAULT_SIMILARITY_COLUMN + " FROM " +
0:         AbstractJDBCItemSimilarity.DEFAULT_SIMILARITY_TABLE;
1: 
1: 
1:   public MySQLJDBCInMemoryItemSimilarity() throws TasteException {
0:     this(AbstractJDBCComponent.lookupDataSource(AbstractJDBCComponent.DEFAULT_DATASOURCE_NAME),
0:         DEFAULT_GET_ALL_ITEMSIMILARITIES_SQL);
1:   }
1: 
1:   public MySQLJDBCInMemoryItemSimilarity(String dataSourceName) throws TasteException {
0:     this(AbstractJDBCComponent.lookupDataSource(dataSourceName), DEFAULT_GET_ALL_ITEMSIMILARITIES_SQL);
1:   }
1: 
1:   public MySQLJDBCInMemoryItemSimilarity(DataSource dataSource) {
0:     this(dataSource, DEFAULT_GET_ALL_ITEMSIMILARITIES_SQL);
1:   }
1: 
1:   public MySQLJDBCInMemoryItemSimilarity(DataSource dataSource, String getAllItemSimilaritiesSQL) {
1:     super(dataSource, getAllItemSimilaritiesSQL);
1:   }
1: 
1:   @Override
1:   protected int getFetchSize() {
1:     // Need to return this for MySQL Connector/J to make it use streaming mode
1:     return Integer.MIN_VALUE;
1:   }
1: }
============================================================================