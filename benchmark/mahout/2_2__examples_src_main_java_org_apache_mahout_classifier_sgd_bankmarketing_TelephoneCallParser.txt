1:a64100d: /*
1:a64100d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a64100d:  * contributor license agreements.  See the NOTICE file distributed with
1:a64100d:  * this work for additional information regarding copyright ownership.
1:a64100d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a64100d:  * (the "License"); you may not use this file except in compliance with
1:a64100d:  * the License.  You may obtain a copy of the License at
1:a64100d:  *
1:a64100d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a64100d:  *
1:a64100d:  * Unless required by applicable law or agreed to in writing, software
1:a64100d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a64100d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a64100d:  * See the License for the specific language governing permissions and
1:a64100d:  * limitations under the License.
2:a64100d:  */
1:a64100d: 
1:a64100d: package org.apache.mahout.classifier.sgd.bankmarketing;
1:a64100d: 
1:a64100d: import com.google.common.base.CharMatcher;
1:a64100d: import com.google.common.base.Splitter;
1:a64100d: import com.google.common.collect.AbstractIterator;
1:a64100d: import com.google.common.io.Resources;
1:a64100d: 
1:a64100d: import java.io.BufferedReader;
1:a64100d: import java.io.IOException;
1:a64100d: import java.io.InputStreamReader;
1:a64100d: import java.util.Iterator;
1:a64100d: 
1:f789bd0: /** Parses semi-colon separated data as TelephoneCalls  */
1:a64100d: public class TelephoneCallParser implements Iterable<TelephoneCall> {
1:a64100d: 
1:f789bd0:   private final Splitter onSemi = Splitter.on(";").trimResults(CharMatcher.anyOf("\" ;"));
1:f789bd0:   private String resourceName;
1:a64100d: 
1:f789bd0:   public TelephoneCallParser(String resourceName) throws IOException {
1:f789bd0:     this.resourceName = resourceName;
1:f789bd0:   }
1:a64100d: 
1:f789bd0:   @Override
1:f789bd0:   public Iterator<TelephoneCall> iterator() {
1:f789bd0:     try {
1:f789bd0:       return new AbstractIterator<TelephoneCall>() {
1:f789bd0:         BufferedReader input =
1:f789bd0:             new BufferedReader(new InputStreamReader(Resources.getResource(resourceName).openStream()));
1:f789bd0:         Iterable<String> fieldNames = onSemi.split(input.readLine());
1:a64100d: 
1:f789bd0:           @Override
1:f789bd0:           protected TelephoneCall computeNext() {
1:f789bd0:             try {
1:f789bd0:               String line = input.readLine();
1:f789bd0:               if (line == null) {
1:f789bd0:                 return endOfData();
1:f789bd0:               }
1:f789bd0: 
1:f789bd0:               return new TelephoneCall(fieldNames, onSemi.split(line));
1:f789bd0:             } catch (IOException e) {
1:f789bd0:               throw new RuntimeException("Error reading data", e);
1:f789bd0:             }
1:f789bd0:           }
1:f789bd0:         };
1:f789bd0:       } catch (IOException e) {
1:f789bd0:         throw new RuntimeException("Error reading data", e);
1:f789bd0:       }
1:f789bd0:   }
7:a64100d: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:f789bd0
/////////////////////////////////////////////////////////////////////////
1: /** Parses semi-colon separated data as TelephoneCalls  */
1:   private final Splitter onSemi = Splitter.on(";").trimResults(CharMatcher.anyOf("\" ;"));
1:   private String resourceName;
1:   public TelephoneCallParser(String resourceName) throws IOException {
1:     this.resourceName = resourceName;
1:   }
1:   @Override
1:   public Iterator<TelephoneCall> iterator() {
1:     try {
1:       return new AbstractIterator<TelephoneCall>() {
1:         BufferedReader input =
1:             new BufferedReader(new InputStreamReader(Resources.getResource(resourceName).openStream()));
1:         Iterable<String> fieldNames = onSemi.split(input.readLine());
1:           @Override
1:           protected TelephoneCall computeNext() {
1:             try {
1:               String line = input.readLine();
1:               if (line == null) {
1:                 return endOfData();
1:               }
1: 
1:               return new TelephoneCall(fieldNames, onSemi.split(line));
1:             } catch (IOException e) {
1:               throw new RuntimeException("Error reading data", e);
1:             }
1:           }
1:         };
1:       } catch (IOException e) {
1:         throw new RuntimeException("Error reading data", e);
1:       }
1:   }
author:frankscholten
-------------------------------------------------------------------------------
commit:a64100d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd.bankmarketing;
1: 
1: import com.google.common.base.CharMatcher;
1: import com.google.common.base.Splitter;
1: import com.google.common.collect.AbstractIterator;
1: import com.google.common.io.Resources;
1: 
1: import java.io.BufferedReader;
1: import java.io.IOException;
1: import java.io.InputStreamReader;
1: import java.util.Iterator;
1: 
0: /**
0:  * Parses semi-colon separated data as TelephoneCall's
1:  */
1: public class TelephoneCallParser implements Iterable<TelephoneCall> {
0:     private final Splitter onSemi = Splitter.on(";").trimResults(CharMatcher.anyOf("\" ;"));
0:     private String resourceName;
1: 
0:     public TelephoneCallParser(String resourceName) throws IOException {
0:         this.resourceName = resourceName;
1:     }
1: 
0:     @Override
0:     public Iterator<TelephoneCall> iterator() {
0:         try {
0:             return new AbstractIterator<TelephoneCall>() {
0:                 BufferedReader input = new BufferedReader(new InputStreamReader(Resources.getResource(resourceName).openStream()));
0:                 Iterable<String> fieldNames = onSemi.split(input.readLine());
1: 
0:                 @Override
0:                 protected TelephoneCall computeNext() {
0:                     try {
0:                         String line = input.readLine();
0:                         if (line == null) {
0:                             return endOfData();
1:                         }
1: 
0:                         return new TelephoneCall(fieldNames, onSemi.split(line));
0:                     } catch (IOException e) {
0:                         throw new RuntimeException("Error reading data", e);
1:                     }
1:                 }
0:             };
0:         } catch (IOException e) {
0:             throw new RuntimeException("Error reading data", e);
1:         }
1:     }
1: }
============================================================================