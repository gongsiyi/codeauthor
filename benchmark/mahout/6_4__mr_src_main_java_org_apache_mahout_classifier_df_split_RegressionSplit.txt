2:e9cc323: /**
1:e9cc323:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e9cc323:  * contributor license agreements.  See the NOTICE file distributed with
1:e9cc323:  * this work for additional information regarding copyright ownership.
1:e9cc323:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e9cc323:  * (the "License"); you may not use this file except in compliance with
1:e9cc323:  * the License.  You may obtain a copy of the License at
2:e9cc323:  *
1:e9cc323:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e9cc323:  *
1:e9cc323:  * Unless required by applicable law or agreed to in writing, software
1:e9cc323:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e9cc323:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e9cc323:  * See the License for the specific language governing permissions and
1:e9cc323:  * limitations under the License.
2:e9cc323:  */
5:e9cc323: 
1:e9cc323: package org.apache.mahout.classifier.df.split;
1:e9cc323: 
1:d5b6b74: import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
1:e9cc323: import org.apache.mahout.classifier.df.data.Data;
1:e9cc323: import org.apache.mahout.classifier.df.data.Instance;
1:e9cc323: 
1:229aeff: import java.io.Serializable;
1:d6aba1a: import java.util.Arrays;
1:229aeff: import java.util.Comparator;
1:d6aba1a: 
1:e9cc323: /**
1:d5b6b74:  * Regression problem implementation of IgSplit. This class can be used when the criterion variable is the numerical
1:d5b6b74:  * attribute.
1:e9cc323:  */
1:1ffa3a4: @Deprecated
1:e9cc323: public class RegressionSplit extends IgSplit {
1:e9cc323:   
1:e9cc323:   /**
1:e9cc323:    * Comparator for Instance sort
1:e9cc323:    */
1:229aeff:   private static class InstanceComparator implements Comparator<Instance>, Serializable {
1:e9cc323:     private final int attr;
1:e9cc323: 
1:564c3e1:     InstanceComparator(int attr) {
1:e9cc323:       this.attr = attr;
5:e9cc323:     }
1:e9cc323:     
1:e9cc323:     @Override
1:e9cc323:     public int compare(Instance arg0, Instance arg1) {
1:e9cc323:       return Double.compare(arg0.get(attr), arg1.get(attr));
1:e9cc323:     }
1:e9cc323:   }
1:e9cc323:   
1:e9cc323:   @Override
1:e9cc323:   public Split computeSplit(Data data, int attr) {
1:e9cc323:     if (data.getDataset().isNumerical(attr)) {
1:e9cc323:       return numericalSplit(data, attr);
1:e9cc323:     } else {
1:e9cc323:       return categoricalSplit(data, attr);
1:e9cc323:     }
1:e9cc323:   }
1:e9cc323:   
1:e9cc323:   /**
1:e9cc323:    * Computes the split for a CATEGORICAL attribute
1:e9cc323:    */
1:e9cc323:   private static Split categoricalSplit(Data data, int attr) {
1:d5b6b74:     FullRunningAverage[] ra = new FullRunningAverage[data.getDataset().nbValues(attr)];
1:d5b6b74:     double[] sk = new double[data.getDataset().nbValues(attr)];
1:d5b6b74:     for (int i = 0; i < ra.length; i++) {
1:d5b6b74:       ra[i] = new FullRunningAverage();
1:d5b6b74:     }
1:d5b6b74:     FullRunningAverage totalRa = new FullRunningAverage();
1:d5b6b74:     double totalSk = 0.0;
1:e9cc323: 
1:e9cc323:     for (int i = 0; i < data.size(); i++) {
1:d5b6b74:       // computes the variance
1:e9cc323:       Instance instance = data.get(i);
1:e9cc323:       int value = (int) instance.get(attr);
1:d5b6b74:       double xk = data.getDataset().getLabel(instance);
1:d5b6b74:       if (ra[value].getCount() == 0) {
1:d5b6b74:         ra[value].addDatum(xk);
1:d5b6b74:         sk[value] = 0.0;
1:d5b6b74:       } else {
1:d5b6b74:         double mk = ra[value].getAverage();
1:d5b6b74:         ra[value].addDatum(xk);
1:d5b6b74:         sk[value] += (xk - mk) * (xk - ra[value].getAverage());
1:d5b6b74:       }
1:e9cc323: 
1:d5b6b74:       // total variance
1:d5b6b74:       if (i == 0) {
1:d5b6b74:         totalRa.addDatum(xk);
1:d5b6b74:         totalSk = 0.0;
1:d5b6b74:       } else {
1:d5b6b74:         double mk = totalRa.getAverage();
1:d5b6b74:         totalRa.addDatum(xk);
1:d5b6b74:         totalSk += (xk - mk) * (xk - totalRa.getAverage());
1:d5b6b74:       }
1:e9cc323:     }
1:d5b6b74: 
1:d5b6b74:     // computes the variance gain
1:d5b6b74:     double ig = totalSk;
1:210b265:     for (double aSk : sk) {
1:210b265:       ig -= aSk;
1:d5b6b74:     }
1:e9cc323: 
1:e9cc323:     return new Split(attr, ig);
1:e9cc323:   }
1:e9cc323:   
1:e9cc323:   /**
1:e9cc323:    * Computes the best split for a NUMERICAL attribute
1:e9cc323:    */
1:d5b6b74:   private static Split numericalSplit(Data data, int attr) {
1:d5b6b74:     FullRunningAverage[] ra = new FullRunningAverage[2];
1:d5b6b74:     for (int i = 0; i < ra.length; i++) {
1:d5b6b74:       ra[i] = new FullRunningAverage();
1:d5b6b74:     }
1:e9cc323: 
1:e9cc323:     // Instance sort
1:e9cc323:     Instance[] instances = new Instance[data.size()];
1:e9cc323:     for (int i = 0; i < data.size(); i++) {
1:e9cc323:       instances[i] = data.get(i);
1:e9cc323:     }
1:e9cc323:     Arrays.sort(instances, new InstanceComparator(attr));
1:e9cc323: 
1:335a993:     double[] sk = new double[2];
1:e9cc323:     for (Instance instance : instances) {
1:d5b6b74:       double xk = data.getDataset().getLabel(instance);
1:d5b6b74:       if (ra[1].getCount() == 0) {
1:d5b6b74:         ra[1].addDatum(xk);
1:d5b6b74:         sk[1] = 0.0;
1:d5b6b74:       } else {
1:d5b6b74:         double mk = ra[1].getAverage();
1:d5b6b74:         ra[1].addDatum(xk);
1:d5b6b74:         sk[1] += (xk - mk) * (xk - ra[1].getAverage());
1:d5b6b74:       }
1:e9cc323:     }
1:d5b6b74:     double totalSk = sk[1];
1:e9cc323: 
1:e9cc323:     // find the best split point
1:564c3e1:     double split = Double.NaN;
1:d5b6b74:     double preSplit = Double.NaN;
1:d5b6b74:     double bestVal = Double.MAX_VALUE;
1:d5b6b74:     double bestSk = 0.0;
1:d5b6b74: 
1:d5b6b74:     // computes total variance
1:e9cc323:     for (Instance instance : instances) {
1:d5b6b74:       double xk = data.getDataset().getLabel(instance);
1:d5b6b74: 
1:d5b6b74:       if (instance.get(attr) > preSplit) {
1:d5b6b74:         double curVal = sk[0] / ra[0].getCount() + sk[1] / ra[1].getCount();
1:e9cc323:         if (curVal < bestVal) {
1:e9cc323:           bestVal = curVal;
1:d5b6b74:           bestSk = sk[0] + sk[1];
1:d5b6b74:           split = (instance.get(attr) + preSplit) / 2.0;
1:e9cc323:         }
1:e9cc323:       }
1:e9cc323: 
1:d5b6b74:       // computes the variance
1:d5b6b74:       if (ra[0].getCount() == 0) {
1:d5b6b74:         ra[0].addDatum(xk);
1:d5b6b74:         sk[0] = 0.0;
1:d5b6b74:       } else {
1:d5b6b74:         double mk = ra[0].getAverage();
1:d5b6b74:         ra[0].addDatum(xk);
1:d5b6b74:         sk[0] += (xk - mk) * (xk - ra[0].getAverage());
1:d5b6b74:       }
1:e9cc323: 
1:d5b6b74:       double mk = ra[1].getAverage();
1:d5b6b74:       ra[1].removeDatum(xk);
1:d5b6b74:       sk[1] -= (xk - mk) * (xk - ra[1].getAverage());
1:e9cc323: 
1:d5b6b74:       preSplit = instance.get(attr);
1:e9cc323:     }
1:e9cc323: 
1:d5b6b74:     // computes the variance gain
1:d5b6b74:     double ig = totalSk - bestSk;
1:e9cc323: 
1:e9cc323:     return new Split(attr, ig, split);
1:e9cc323:   }
1:e9cc323: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:335a993
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     double[] sk = new double[2];
commit:d5b6b74
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
/////////////////////////////////////////////////////////////////////////
1:  * Regression problem implementation of IgSplit. This class can be used when the criterion variable is the numerical
1:  * attribute.
/////////////////////////////////////////////////////////////////////////
1:     FullRunningAverage[] ra = new FullRunningAverage[data.getDataset().nbValues(attr)];
1:     double[] sk = new double[data.getDataset().nbValues(attr)];
1:     for (int i = 0; i < ra.length; i++) {
1:       ra[i] = new FullRunningAverage();
1:     }
1:     FullRunningAverage totalRa = new FullRunningAverage();
1:     double totalSk = 0.0;
1:       // computes the variance
1:       double xk = data.getDataset().getLabel(instance);
1:       if (ra[value].getCount() == 0) {
1:         ra[value].addDatum(xk);
1:         sk[value] = 0.0;
1:       } else {
1:         double mk = ra[value].getAverage();
1:         ra[value].addDatum(xk);
1:         sk[value] += (xk - mk) * (xk - ra[value].getAverage());
1:       }
1:       // total variance
1:       if (i == 0) {
1:         totalRa.addDatum(xk);
1:         totalSk = 0.0;
1:       } else {
1:         double mk = totalRa.getAverage();
1:         totalRa.addDatum(xk);
1:         totalSk += (xk - mk) * (xk - totalRa.getAverage());
1:       }
1: 
1:     // computes the variance gain
1:     double ig = totalSk;
0:     for (int i = 0; i < sk.length; i++) {
0:       ig -= sk[i];
1:     }
/////////////////////////////////////////////////////////////////////////
1:   private static Split numericalSplit(Data data, int attr) {
1:     FullRunningAverage[] ra = new FullRunningAverage[2];
0:     double[] sk = new double[2];
1:     for (int i = 0; i < ra.length; i++) {
1:       ra[i] = new FullRunningAverage();
1:     }
/////////////////////////////////////////////////////////////////////////
1:       double xk = data.getDataset().getLabel(instance);
1:       if (ra[1].getCount() == 0) {
1:         ra[1].addDatum(xk);
1:         sk[1] = 0.0;
1:       } else {
1:         double mk = ra[1].getAverage();
1:         ra[1].addDatum(xk);
1:         sk[1] += (xk - mk) * (xk - ra[1].getAverage());
1:       }
1:     double totalSk = sk[1];
1:     double preSplit = Double.NaN;
1:     double bestVal = Double.MAX_VALUE;
1:     double bestSk = 0.0;
1: 
1:     // computes total variance
1:       double xk = data.getDataset().getLabel(instance);
1: 
1:       if (instance.get(attr) > preSplit) {
1:         double curVal = sk[0] / ra[0].getCount() + sk[1] / ra[1].getCount();
1:           bestSk = sk[0] + sk[1];
1:           split = (instance.get(attr) + preSplit) / 2.0;
1:       // computes the variance
1:       if (ra[0].getCount() == 0) {
1:         ra[0].addDatum(xk);
1:         sk[0] = 0.0;
1:       } else {
1:         double mk = ra[0].getAverage();
1:         ra[0].addDatum(xk);
1:         sk[0] += (xk - mk) * (xk - ra[0].getAverage());
1:       }
1:       double mk = ra[1].getAverage();
1:       ra[1].removeDatum(xk);
1:       sk[1] -= (xk - mk) * (xk - ra[1].getAverage());
1:       preSplit = instance.get(attr);
1:     // computes the variance gain
1:     double ig = totalSk - bestSk;
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: import java.util.Comparator;
/////////////////////////////////////////////////////////////////////////
1:   private static class InstanceComparator implements Comparator<Instance>, Serializable {
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
0:  * Regression problem implementation of IgSplit.
/////////////////////////////////////////////////////////////////////////
1:     InstanceComparator(int attr) {
/////////////////////////////////////////////////////////////////////////
0:   static Split numericalSplit(Data data, int attr) {
/////////////////////////////////////////////////////////////////////////
0:     double totalSum = 0.0;
0:     double totalSumSquared = 0.0;
0:     double[] sums = new double[2];
0:     double[] curSums = new double[2];
0:     double[] sumSquared = new double[2];
0:     double[] curSumSquared = new double[2];
0:     double[] counts = new double[2];
0:     double[] curCounts = new double[2];
1:     double split = Double.NaN;
0:         double curVal = variance(curSums, curSumSquared, curCounts);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
1:     for (double aSk : sk) {
1:       ig -= aSk;
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:d6aba1a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: 
/////////////////////////////////////////////////////////////////////////
0:   private static class InstanceComparator implements java.util.Comparator<Instance> {
commit:e9cc323
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.df.split;
1: 
0: import java.util.Arrays;
1: 
1: import org.apache.mahout.classifier.df.data.Data;
1: import org.apache.mahout.classifier.df.data.Instance;
1: 
1: /**
0:  * Regression problem implementation of IgSplit<br>
0:  * This class can be used when the criterion variable is the numerical attribute.
1:  */
1: public class RegressionSplit extends IgSplit {
1:   
1:   /**
1:    * Comparator for Instance sort
1:    */
0:   private static class InstanceComparator implements java.util.Comparator<Instance>{
1:     private final int attr;
1: 
0:     public InstanceComparator(int attr) {
1:       this.attr = attr;
1:     }
1:     
1:     @Override
1:     public int compare(Instance arg0, Instance arg1) {
1:       return Double.compare(arg0.get(attr), arg1.get(attr));
1:     }
1:   }
1:   
1:   @Override
1:   public Split computeSplit(Data data, int attr) {
1:     if (data.getDataset().isNumerical(attr)) {
1:       return numericalSplit(data, attr);
1:     } else {
1:       return categoricalSplit(data, attr);
1:     }
1:   }
1:   
1:   /**
1:    * Computes the split for a CATEGORICAL attribute
1:    */
1:   private static Split categoricalSplit(Data data, int attr) {
0:     double[] sums = new double[data.getDataset().nbValues(attr)];
0:     double[] sumSquared = new double[data.getDataset().nbValues(attr)];
0:     double[] counts = new double[data.getDataset().nbValues(attr)];
0:     double totalSum = 0;
0:     double totalSumSquared = 0;
1: 
0:     // sum and sum of squares
1:     for (int i = 0; i < data.size(); i++) {
1:       Instance instance = data.get(i);
1:       int value = (int) instance.get(attr);
0:       double label = data.getDataset().getLabel(instance);
0:       double square = label * label;
1: 
0:       sums[value] += label;
0:       sumSquared[value] += square;
0:       counts[value]++;
0:       totalSum += label;
0:       totalSumSquared += square;
1:     }
1:     
0:     // computes the variance
0:     double totalVar = totalSumSquared - (totalSum * totalSum) / data.size();
0:     double var = variance(sums, sumSquared, counts);
0:     double ig = totalVar - var;
1: 
1:     return new Split(attr, ig);
1:   }
1:   
1:   /**
1:    * Computes the best split for a NUMERICAL attribute
1:    */
0:   Split numericalSplit(Data data, int attr) {
0:     double[] sums = new double[2];
0:     double[] sumSquared = new double[2];
0:     double[] counts = new double[2];
0:     double totalSum = 0;
0:     double totalSumSquared = 0;
0:     double split = Double.NaN;
0:     double[] curSums = new double[2];
0:     double[] curSumSquared = new double[2];
0:     double[] curCounts = new double[2];
1: 
1:     // Instance sort
1:     Instance[] instances = new Instance[data.size()];
1:     for (int i = 0; i < data.size(); i++) {
1:       instances[i] = data.get(i);
1:     }
1:     Arrays.sort(instances, new InstanceComparator(attr));
1: 
0:     // sum and sum of squares
1:     for (Instance instance : instances) {
0:       double label = data.getDataset().getLabel(instance);
0:       totalSum += label;
0:       totalSumSquared += label * label;
1:     }
0:     sums[1] = curSums[1] = totalSum;
0:     sumSquared[1] = curSumSquared[1] = totalSumSquared;
0:     counts[1] = curCounts[1] = data.size();
1: 
1:     // find the best split point
0:     double curSplit = instances[0].get(attr);
0:     double curVal;
0:     double bestVal = Double.MAX_VALUE;
1:     for (Instance instance : instances) {
0:       if (instance.get(attr) > curSplit) {
0:         curVal = variance(curSums, curSumSquared, curCounts);
1:         if (curVal < bestVal) {
1:           bestVal = curVal;
0:           split = (instance.get(attr) + curSplit) / 2.0;
0:           for (int j = 0; j < 2; j++) {
0:             sums[j] = curSums[j];
0:             sumSquared[j] = curSumSquared[j];
0:             counts[j] = curCounts[j];
1:           }
1:         }
1:       }
1: 
0:       curSplit = instance.get(attr);
1: 
0:       double label = data.getDataset().getLabel(instance);
0:       double square = label * label;
1: 
0:       curSums[0] += label;
0:       curSumSquared[0] += square;
0:       curCounts[0]++;
1: 
0:       curSums[1] -= label;
0:       curSumSquared[1] -= square;
0:       curCounts[1]--;
1:     }
1: 
0:     // computes the variance
0:     double totalVar = totalSumSquared - (totalSum * totalSum) / data.size();
0:     double var = variance(sums, sumSquared, counts);
0:     double ig = totalVar - var;
1: 
1:     return new Split(attr, ig, split);
1:   }
1:   
1:   /**
0:    * Computes the variance
1:    * 
0:    * @param s
0:    *          data
0:    * @param ss
0:    *          squared data
0:    * @param dataSize
0:    *          numInstances
1:    */
0:   private static double variance(double[] s, double[] ss, double[] dataSize) {
0:     double var = 0;
0:     for (int i = 0; i < s.length; i++) {
0:       if (dataSize[i] > 0) {
0:         var += ss[i] - ((s[i] * s[i]) / dataSize[i]);
1:       }
1:     }
0:     return var;
1:   }
1: }
============================================================================