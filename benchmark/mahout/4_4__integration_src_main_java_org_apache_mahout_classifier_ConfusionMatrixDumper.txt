1:ca18680: /*
1:ca18680:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ca18680:  * contributor license agreements.  See the NOTICE file distributed with
1:ca18680:  * this work for additional information regarding copyright ownership.
1:ca18680:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ca18680:  * (the "License"); you may not use this file except in compliance with
1:ca18680:  * the License.  You may obtain a copy of the License at
1:ca18680:  *
1:ca18680:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ca18680:  *
1:ca18680:  * Unless required by applicable law or agreed to in writing, software
1:ca18680:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ca18680:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ca18680:  * See the License for the specific language governing permissions and
1:ca18680:  * limitations under the License.
1:ca18680:  */
4:ca18680: 
1:ca18680: package org.apache.mahout.classifier;
1:ca18680: 
1:85f9ece: import com.google.common.collect.Lists;
1:85f9ece: import org.apache.commons.io.Charsets;
1:ca18680: import org.apache.hadoop.conf.Configuration;
1:ca18680: import org.apache.hadoop.fs.FileSystem;
1:ca18680: import org.apache.hadoop.fs.Path;
1:ca18680: import org.apache.hadoop.io.SequenceFile;
1:ca18680: import org.apache.hadoop.io.Text;
1:ca18680: import org.apache.hadoop.util.ToolRunner;
1:ca18680: import org.apache.mahout.common.AbstractJob;
1:ca18680: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1:ca18680: import org.apache.mahout.math.Matrix;
1:ca18680: import org.apache.mahout.math.MatrixWritable;
1:22dc9fe: 
1:85f9ece: import java.io.File;
1:85f9ece: import java.io.FileOutputStream;
1:85f9ece: import java.io.IOException;
1:85f9ece: import java.io.OutputStream;
1:85f9ece: import java.io.PrintStream;
1:85f9ece: import java.util.Iterator;
1:85f9ece: import java.util.List;
1:85f9ece: import java.util.Map;
1:ca18680: 
1:ca18680: /**
1:22dc9fe:  * Export a ConfusionMatrix in various text formats: ToString version Grayscale HTML table Summary HTML table
1:22dc9fe:  * Table of counts all with optional HTML wrappers
1:ca18680:  * 
1:ca18680:  * Input format: Hadoop SequenceFile with Text key and MatrixWritable value, 1 pair
1:ca18680:  * 
1:22dc9fe:  * Intended to consume ConfusionMatrix SequenceFile output by Bayes TestClassifier class
1:ca18680:  */
1:ca18680: public final class ConfusionMatrixDumper extends AbstractJob {
1:229aeff: 
1:229aeff:   private static final String TAB_SEPARATOR = "|";
1:229aeff: 
1:ca18680:   // HTML wrapper - default CSS
1:22dc9fe:   private static final String HEADER = "<html>"
1:22dc9fe:                                        + "<head>\n"
1:22dc9fe:                                        + "<title>TITLE</title>\n"
1:22dc9fe:                                        + "</head>"
1:22dc9fe:                                        + "<body>\n"
1:22dc9fe:                                        + "<style type='text/css'> \n"
1:22dc9fe:                                        + "table\n"
1:22dc9fe:                                        + "{\n"
1:22dc9fe:                                        + "border:3px solid black; text-align:left;\n"
1:22dc9fe:                                        + "}\n"
1:22dc9fe:                                        + "th.normalHeader\n"
1:22dc9fe:                                        + "{\n"
1:6d16230:                                        + "border:1px solid black;border-collapse:collapse;text-align:center;"
1:6d16230:                                        + "background-color:white\n"
1:22dc9fe:                                        + "}\n"
1:22dc9fe:                                        + "th.tallHeader\n"
1:22dc9fe:                                        + "{\n"
1:6d16230:                                        + "border:1px solid black;border-collapse:collapse;text-align:center;"
1:6d16230:                                        + "background-color:white; height:6em\n"
1:22dc9fe:                                        + "}\n"
1:22dc9fe:                                        + "tr.label\n"
1:22dc9fe:                                        + "{\n"
1:6d16230:                                        + "border:1px solid black;border-collapse:collapse;text-align:center;"
1:6d16230:                                        + "background-color:white\n"
1:22dc9fe:                                        + "}\n"
1:22dc9fe:                                        + "tr.row\n"
1:22dc9fe:                                        + "{\n"
1:22dc9fe:                                        + "border:1px solid gray;text-align:center;background-color:snow\n"
1:22dc9fe:                                        + "}\n"
1:22dc9fe:                                        + "td\n"
1:22dc9fe:                                        + "{\n"
1:22dc9fe:                                        + "min-width:2em\n"
1:22dc9fe:                                        + "}\n"
1:22dc9fe:                                        + "td.cell\n"
1:22dc9fe:                                        + "{\n"
1:22dc9fe:                                        + "border:1px solid black;text-align:right;background-color:snow\n"
1:22dc9fe:                                        + "}\n"
1:22dc9fe:                                        + "td.empty\n"
1:22dc9fe:                                        + "{\n"
1:22dc9fe:                                        + "border:0px;text-align:right;background-color:snow\n"
1:22dc9fe:                                        + "}\n"
1:22dc9fe:                                        + "td.white\n"
1:22dc9fe:                                        + "{\n"
1:22dc9fe:                                        + "border:0px solid black;text-align:right;background-color:white\n"
1:22dc9fe:                                        + "}\n"
1:22dc9fe:                                        + "td.black\n"
1:22dc9fe:                                        + "{\n"
1:22dc9fe:                                        + "border:0px solid red;text-align:right;background-color:black\n"
1:22dc9fe:                                        + "}\n"
1:22dc9fe:                                        + "td.gray1\n"
1:22dc9fe:                                        + "{\n"
1:22dc9fe:                                        + "border:0px solid green;text-align:right; background-color:LightGray\n"
1:22dc9fe:                                        + "}\n" + "td.gray2\n" + "{\n"
1:22dc9fe:                                        + "border:0px solid blue;text-align:right;background-color:gray\n"
1:22dc9fe:                                        + "}\n" + "td.gray3\n" + "{\n"
1:22dc9fe:                                        + "border:0px solid red;text-align:right;background-color:DarkGray\n"
1:22dc9fe:                                        + "}\n" + "th" + "{\n" + "        text-align: center;\n"
1:22dc9fe:                                        + "        vertical-align: bottom;\n"
1:22dc9fe:                                        + "        padding-bottom: 3px;\n" + "        padding-left: 5px;\n"
1:22dc9fe:                                        + "        padding-right: 5px;\n" + "}\n" + "     .verticalText\n"
1:22dc9fe:                                        + "      {\n" + "        text-align: center;\n"
1:22dc9fe:                                        + "        vertical-align: middle;\n" + "        width: 20px;\n"
1:22dc9fe:                                        + "        margin: 0px;\n" + "        padding: 0px;\n"
1:22dc9fe:                                        + "        padding-left: 3px;\n" + "        padding-right: 3px;\n"
1:22dc9fe:                                        + "        padding-top: 10px;\n" + "        white-space: nowrap;\n"
1:22dc9fe:                                        + "        -webkit-transform: rotate(-90deg); \n"
1:22dc9fe:                                        + "        -moz-transform: rotate(-90deg);         \n" + "      };\n"
1:22dc9fe:                                        + "</style>\n";
1:ca18680:   private static final String FOOTER = "</html></body>";
1:ca18680:   
1:22dc9fe:   // CSS style names.
1:ca18680:   private static final String CSS_TABLE = "table";
1:ca18680:   private static final String CSS_LABEL = "label";
1:ca18680:   private static final String CSS_TALL_HEADER = "tall";
1:ca18680:   private static final String CSS_VERTICAL = "verticalText";
1:ca18680:   private static final String CSS_CELL = "cell";
1:ca18680:   private static final String CSS_EMPTY = "empty";
1:ca18680:   private static final String[] CSS_GRAY_CELLS = {"white", "gray1", "gray2", "gray3", "black"};
1:ca18680:   
1:ca18680:   private ConfusionMatrixDumper() {}
1:ca18680:   
1:ca18680:   public static void main(String[] args) throws Exception {
1:ca18680:     ToolRunner.run(new ConfusionMatrixDumper(), args);
1:ca18680:   }
1:ca18680:   
1:ca18680:   @Override
1:ca18680:   public int run(String[] args) throws IOException {
1:ca18680:     addInputOption();
1:ca18680:     addOption("output", "o", "Output path", null); // AbstractJob output feature requires param
1:ca18680:     addOption(DefaultOptionCreator.overwriteOption().create());
1:ca18680:     addFlag("html", null, "Create complete HTML page");
1:ca18680:     addFlag("text", null, "Dump simple text");
1:03a9492:     Map<String,List<String>> parsedArgs = parseArguments(args);
1:ca18680:     if (parsedArgs == null) {
1:ca18680:       return -1;
1:ca18680:     }
1:ca18680:     
1:ca18680:     Path inputPath = getInputPath();
1:03a9492:     String outputFile = hasOption("output") ? getOption("output") : null;
1:ca18680:     boolean text = parsedArgs.containsKey("--text");
1:ca18680:     boolean wrapHtml = parsedArgs.containsKey("--html");
1:ca18680:     PrintStream out = getPrintStream(outputFile);
1:ca18680:     if (text) {
1:ca18680:       exportText(inputPath, out);
1:ca18680:     } else {
1:ca18680:       exportTable(inputPath, out, wrapHtml);
1:ca18680:     }
1:ca18680:     out.flush();
1:ca18680:     if (out != System.out) {
1:ca18680:       out.close();
1:ca18680:     }
1:ca18680:     return 0;
1:ca18680:   }
1:ca18680:   
1:ca18680:   private static void exportText(Path inputPath, PrintStream out) throws IOException {
1:ca18680:     MatrixWritable mw = new MatrixWritable();
1:ca18680:     Text key = new Text();
1:ca18680:     readSeqFile(inputPath, key, mw);
1:ca18680:     Matrix m = mw.get();
1:ca18680:     ConfusionMatrix cm = new ConfusionMatrix(m);
1:22dc9fe:     out.println(String.format("%-40s", "Label") + TAB_SEPARATOR + String.format("%-10s", "Total")
1:22dc9fe:                 + TAB_SEPARATOR + String.format("%-10s", "Correct") + TAB_SEPARATOR
1:22dc9fe:                 + String.format("%-6s", "%") + TAB_SEPARATOR);
1:22dc9fe:     out.println(String.format("%-70s", "-").replace(' ', '-'));
1:22dc9fe:     List<String> labels = stripDefault(cm);
1:22dc9fe:     for (String label : labels) {
1:22dc9fe:       int correct = cm.getCorrect(label);
1:22dc9fe:       double accuracy = cm.getAccuracy(label);
1:22dc9fe:       int count = getCount(cm, label);
1:22dc9fe:       out.println(String.format("%-40s", label) + TAB_SEPARATOR + String.format("%-10s", count)
1:22dc9fe:                   + TAB_SEPARATOR + String.format("%-10s", correct) + TAB_SEPARATOR
1:22dc9fe:                   + String.format("%-6s", (int) Math.round(accuracy)) + TAB_SEPARATOR);
1:22dc9fe:     }
1:22dc9fe:     out.println(String.format("%-70s", "-").replace(' ', '-'));
1:ca18680:     out.println(cm.toString());
1:ca18680:   }
1:ca18680:   
1:ca18680:   private static void exportTable(Path inputPath, PrintStream out, boolean wrapHtml) throws IOException {
1:ca18680:     MatrixWritable mw = new MatrixWritable();
1:ca18680:     Text key = new Text();
1:ca18680:     readSeqFile(inputPath, key, mw);
1:ca18680:     String fileName = inputPath.getName();
1:ca18680:     fileName = fileName.substring(fileName.lastIndexOf('/') + 1, fileName.length());
1:ca18680:     Matrix m = mw.get();
1:ca18680:     ConfusionMatrix cm = new ConfusionMatrix(m);
1:ca18680:     if (wrapHtml) {
1:ca18680:       printHeader(out, fileName);
1:ca18680:     }
1:ca18680:     out.println("<p/>");
1:ca18680:     printSummaryTable(cm, out);
1:ca18680:     out.println("<p/>");
1:ca18680:     printGrayTable(cm, out);
1:ca18680:     out.println("<p/>");
1:ca18680:     printCountsTable(cm, out);
1:ca18680:     out.println("<p/>");
1:ca18680:     printTextInBox(cm, out);
1:ca18680:     out.println("<p/>");
1:ca18680:     if (wrapHtml) {
1:ca18680:       printFooter(out);
1:ca18680:     }
1:ca18680:   }
1:ca18680:   
1:ca18680:   private static List<String> stripDefault(ConfusionMatrix cm) {
1:22dc9fe:     List<String> stripped = Lists.newArrayList(cm.getLabels().iterator());
1:ca18680:     String defaultLabel = cm.getDefaultLabel();
1:ca18680:     int unclassified = cm.getTotal(defaultLabel);
1:ca18680:     if (unclassified > 0) {
1:ca18680:       return stripped;
1:ca18680:     }
1:ca18680:     stripped.remove(defaultLabel);
1:ca18680:     return stripped;
1:ca18680:   }
1:ca18680:   
1:ca18680:   // TODO: test - this should work with HDFS files
1:ca18680:   private static void readSeqFile(Path path, Text key, MatrixWritable m) throws IOException {
1:ca18680:     Configuration conf = new Configuration();
1:ca18680:     FileSystem fs = FileSystem.get(conf);
1:ca18680:     SequenceFile.Reader reader = new SequenceFile.Reader(fs, path, conf);
1:ca18680:     reader.next(key, m);
1:ca18680:   }
1:ca18680:   
1:ca18680:   // TODO: test - this might not work with HDFS files?
1:22dc9fe:   // after all, it does no seeks
1:ca18680:   private static PrintStream getPrintStream(String outputFilename) throws IOException {
1:ca18680:     if (outputFilename != null) {
1:ca18680:       File outputFile = new File(outputFilename);
1:22dc9fe:       if (outputFile.exists()) {
1:ca18680:         outputFile.delete();
1:ca18680:       }
1:ca18680:       outputFile.createNewFile();
1:ca18680:       OutputStream os = new FileOutputStream(outputFile);
1:bdb1c48:       return new PrintStream(os, false, Charsets.UTF_8.displayName());
1:ca18680:     } else {
1:ca18680:       return System.out;
1:ca18680:     }
1:ca18680:   }
1:ca18680:   
1:ca18680:   private static int getLabelTotal(ConfusionMatrix cm, String rowLabel) {
1:ca18680:     Iterator<String> iter = cm.getLabels().iterator();
1:ca18680:     int count = 0;
1:22dc9fe:     while (iter.hasNext()) {
1:ca18680:       count += cm.getCount(rowLabel, iter.next());
1:ca18680:     }
1:ca18680:     return count;
1:ca18680:   }
1:ca18680:   
1:ca18680:   // HTML generator code
1:ca18680:   
1:ca18680:   private static void printTextInBox(ConfusionMatrix cm, PrintStream out) {
1:ca18680:     out.println("<div style='width:90%;overflow:scroll;'>");
1:ca18680:     out.println("<pre>");
1:ca18680:     out.println(cm.toString());
1:ca18680:     out.println("</pre>");
1:ca18680:     out.println("</div>");
1:ca18680:   }
1:ca18680:   
1:ca18680:   public static void printSummaryTable(ConfusionMatrix cm, PrintStream out) {
1:ca18680:     format("<table class='%s'>\n", out, CSS_TABLE);
1:ca18680:     format("<tr class='%s'>", out, CSS_LABEL);
1:ca18680:     out.println("<td>Label</td><td>Total</td><td>Correct</td><td>%</td>");
1:ca18680:     out.println("</tr>");
1:ca18680:     List<String> labels = stripDefault(cm);
1:22dc9fe:     for (String label : labels) {
1:ca18680:       printSummaryRow(cm, out, label);
1:ca18680:     }
1:ca18680:     out.println("</table>");
1:ca18680:   }
1:ca18680:   
1:ca18680:   private static void printSummaryRow(ConfusionMatrix cm, PrintStream out, String label) {
1:ca18680:     format("<tr class='%s'>", out, CSS_CELL);
1:ca18680:     int correct = cm.getCorrect(label);
1:ca18680:     double accuracy = cm.getAccuracy(label);
1:ca18680:     int count = getCount(cm, label);
1:22dc9fe:     format("<td class='%s'>%s</td><td>%d</td><td>%d</td><td>%d</td>", out, CSS_CELL, label, count, correct,
1:22dc9fe:       (int) Math.round(accuracy));
1:ca18680:     out.println("</tr>");
1:ca18680:   }
1:ca18680:   
1:ca18680:   private static int getCount(ConfusionMatrix cm, String label) {
1:ca18680:     int count = 0;
1:ca18680:     for (String s : cm.getLabels()) {
1:ca18680:       count += cm.getCount(label, s);
1:ca18680:     }
1:ca18680:     return count;
1:ca18680:   }
1:ca18680:   
1:ca18680:   public static void printGrayTable(ConfusionMatrix cm, PrintStream out) {
1:ca18680:     format("<table class='%s'>\n", out, CSS_TABLE);
1:ca18680:     printCountsHeader(cm, out, true);
1:ca18680:     printGrayRows(cm, out);
1:ca18680:     out.println("</table>");
1:ca18680:   }
1:ca18680:   
1:ca18680:   /**
1:22dc9fe:    * Print each value in a four-value grayscale based on count/max. Gives a mostly white matrix with grays in
1:22dc9fe:    * misclassified, and black in diagonal. TODO: Using the sqrt(count/max) as the rating is more stringent
1:ca18680:    */
1:ca18680:   private static void printGrayRows(ConfusionMatrix cm, PrintStream out) {
1:ca18680:     List<String> labels = stripDefault(cm);
1:22dc9fe:     for (String label : labels) {
1:ca18680:       printGrayRow(cm, out, labels, label);
1:ca18680:     }
1:ca18680:   }
1:ca18680:   
1:22dc9fe:   private static void printGrayRow(ConfusionMatrix cm,
1:22dc9fe:                                    PrintStream out,
1:22dc9fe:                                    Iterable<String> labels,
1:22dc9fe:                                    String rowLabel) {
1:ca18680:     format("<tr class='%s'>", out, CSS_LABEL);
1:ca18680:     format("<td>%s</td>", out, rowLabel);
1:ca18680:     int total = getLabelTotal(cm, rowLabel);
1:22dc9fe:     for (String columnLabel : labels) {
1:ca18680:       printGrayCell(cm, out, total, rowLabel, columnLabel);
1:ca18680:     }
1:ca18680:     out.println("</tr>");
1:ca18680:   }
1:ca18680:   
1:ca18680:   // assign white/light/medium/dark to 0,1/4,1/2,3/4 of total number of inputs
1:ca18680:   // assign black to count = total, meaning complete success
1:22dc9fe:   // alternative rating is to use sqrt(total) instead of total - this is more drastic
1:ca18680:   private static void printGrayCell(ConfusionMatrix cm,
1:ca18680:                                     PrintStream out,
1:ca18680:                                     int total,
1:ca18680:                                     String rowLabel,
1:ca18680:                                     String columnLabel) {
1:ca18680:     
1:ca18680:     int count = cm.getCount(rowLabel, columnLabel);
1:ca18680:     if (count == 0) {
1:ca18680:       out.format("<td class='%s'/>", CSS_EMPTY);
1:ca18680:     } else {
1:ca18680:       // 0 is white, full is black, everything else gray
1:22dc9fe:       int rating = (int) ((count / (double) total) * 4);
1:ca18680:       String css = CSS_GRAY_CELLS[rating];
1:ca18680:       format("<td class='%s' title='%s'>%s</td>", out, css, columnLabel, count);
1:ca18680:     }
1:ca18680:   }
1:ca18680:   
1:ca18680:   public static void printCountsTable(ConfusionMatrix cm, PrintStream out) {
1:ca18680:     format("<table class='%s'>\n", out, CSS_TABLE);
1:ca18680:     printCountsHeader(cm, out, false);
1:ca18680:     printCountsRows(cm, out);
1:ca18680:     out.println("</table>");
1:ca18680:   }
1:ca18680:   
1:ca18680:   private static void printCountsRows(ConfusionMatrix cm, PrintStream out) {
1:ca18680:     List<String> labels = stripDefault(cm);
1:22dc9fe:     for (String label : labels) {
1:ca18680:       printCountsRow(cm, out, labels, label);
1:ca18680:     }
1:ca18680:   }
1:ca18680:   
1:22dc9fe:   private static void printCountsRow(ConfusionMatrix cm,
1:22dc9fe:                                      PrintStream out,
1:22dc9fe:                                      Iterable<String> labels,
1:22dc9fe:                                      String rowLabel) {
1:ca18680:     out.println("<tr>");
1:ca18680:     format("<td class='%s'>%s</td>", out, CSS_LABEL, rowLabel);
1:22dc9fe:     for (String columnLabel : labels) {
1:ca18680:       printCountsCell(cm, out, rowLabel, columnLabel);
1:ca18680:     }
1:ca18680:     out.println("</tr>");
1:ca18680:   }
1:ca18680:   
1:ca18680:   private static void printCountsCell(ConfusionMatrix cm, PrintStream out, String rowLabel, String columnLabel) {
1:ca18680:     int count = cm.getCount(rowLabel, columnLabel);
1:ca18680:     String s = count == 0 ? "" : Integer.toString(count);
1:ca18680:     format("<td class='%s' title='%s'>%s</td>", out, CSS_CELL, columnLabel, s);
1:ca18680:   }
1:ca18680:   
1:ca18680:   private static void printCountsHeader(ConfusionMatrix cm, PrintStream out, boolean vertical) {
1:ca18680:     List<String> labels = stripDefault(cm);
1:ca18680:     int longest = getLongestHeader(labels);
1:ca18680:     if (vertical) {
1:ca18680:       // do vertical - rotation is a bitch
1:bdb1c48:       out.format("<tr class='%s' style='height:%dem'><th>&nbsp;</th>%n", CSS_TALL_HEADER, longest / 2);
1:22dc9fe:       for (String label : labels) {
1:ca18680:         out.format("<th><div class='%s'>%s</div></th>", CSS_VERTICAL, label);
1:ca18680:       }
1:ca18680:       out.println("</tr>");
1:ca18680:     } else {
1:ca18680:       // header - empty cell in upper left
1:bdb1c48:       out.format("<tr class='%s'><td class='%s'></td>%n", CSS_TABLE, CSS_LABEL);
1:22dc9fe:       for (String label : labels) {
1:ca18680:         out.format("<td>%s</td>", label);
1:ca18680:       }
1:ca18680:       out.format("</tr>");
1:ca18680:     }
1:ca18680:   }
1:ca18680:   
1:ca18680:   private static int getLongestHeader(Iterable<String> labels) {
1:ca18680:     int max = 0;
1:22dc9fe:     for (String label : labels) {
1:ca18680:       max = Math.max(label.length(), max);
1:ca18680:     }
1:ca18680:     return max;
1:ca18680:   }
1:ca18680:   
1:22dc9fe:   private static void format(String format, PrintStream out, Object... args) {
1:ca18680:     String format2 = String.format(format, args);
1:ca18680:     out.println(format2);
1:ca18680:   }
1:ca18680:   
1:ca18680:   public static void printHeader(PrintStream out, CharSequence title) {
1:ca18680:     out.println(HEADER.replace("TITLE", title));
1:ca18680:   }
1:ca18680:   
1:ca18680:   public static void printFooter(PrintStream out) {
1:ca18680:     out.println(FOOTER);
1:ca18680:   }
1:ca18680:   
1:ca18680: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
1: import org.apache.commons.io.Charsets;
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.PrintStream;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
1:       return new PrintStream(os, false, Charsets.UTF_8.displayName());
/////////////////////////////////////////////////////////////////////////
1:       out.format("<tr class='%s' style='height:%dem'><th>&nbsp;</th>%n", CSS_TALL_HEADER, longest / 2);
1:       out.format("<tr class='%s'><td class='%s'></td>%n", CSS_TABLE, CSS_LABEL);
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:                                        + "border:1px solid black;border-collapse:collapse;text-align:center;"
1:                                        + "background-color:white\n"
1:                                        + "border:1px solid black;border-collapse:collapse;text-align:center;"
1:                                        + "background-color:white; height:6em\n"
1:                                        + "border:1px solid black;border-collapse:collapse;text-align:center;"
1:                                        + "background-color:white\n"
commit:3c22856
/////////////////////////////////////////////////////////////////////////
0:                                        + "border:1px solid black;border-collapse:collapse;text-align:center;" +
0:                                            "background-color:white\n"
0:                                        + "border:1px solid black;border-collapse:collapse;text-align:center;" +
0:                                            "background-color:white; height:6em\n"
0:                                        + "border:1px solid black;border-collapse:collapse;text-align:center;" +
0:                                            "background-color:white\n"
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: 
1:   private static final String TAB_SEPARATOR = "|";
1: 
/////////////////////////////////////////////////////////////////////////
commit:22dc9fe
/////////////////////////////////////////////////////////////////////////
1:  * Export a ConfusionMatrix in various text formats: ToString version Grayscale HTML table Summary HTML table
1:  * Table of counts all with optional HTML wrappers
1:  * Intended to consume ConfusionMatrix SequenceFile output by Bayes TestClassifier class
1:   
1:   private static final String HEADER = "<html>"
1:                                        + "<head>\n"
1:                                        + "<title>TITLE</title>\n"
1:                                        + "</head>"
1:                                        + "<body>\n"
1:                                        + "<style type='text/css'> \n"
1:                                        + "table\n"
1:                                        + "{\n"
1:                                        + "border:3px solid black; text-align:left;\n"
1:                                        + "}\n"
1:                                        + "th.normalHeader\n"
1:                                        + "{\n"
0:                                        + "border:1px solid black;border-collapse:collapse;text-align:center;background-color:white\n"
1:                                        + "}\n"
1:                                        + "th.tallHeader\n"
1:                                        + "{\n"
0:                                        + "border:1px solid black;border-collapse:collapse;text-align:center;background-color:white; height:6em\n"
1:                                        + "}\n"
1:                                        + "tr.label\n"
1:                                        + "{\n"
0:                                        + "border:1px solid black;border-collapse:collapse;text-align:center;background-color:white\n"
1:                                        + "}\n"
1:                                        + "tr.row\n"
1:                                        + "{\n"
1:                                        + "border:1px solid gray;text-align:center;background-color:snow\n"
1:                                        + "}\n"
1:                                        + "td\n"
1:                                        + "{\n"
1:                                        + "min-width:2em\n"
1:                                        + "}\n"
1:                                        + "td.cell\n"
1:                                        + "{\n"
1:                                        + "border:1px solid black;text-align:right;background-color:snow\n"
1:                                        + "}\n"
1:                                        + "td.empty\n"
1:                                        + "{\n"
1:                                        + "border:0px;text-align:right;background-color:snow\n"
1:                                        + "}\n"
1:                                        + "td.white\n"
1:                                        + "{\n"
1:                                        + "border:0px solid black;text-align:right;background-color:white\n"
1:                                        + "}\n"
1:                                        + "td.black\n"
1:                                        + "{\n"
1:                                        + "border:0px solid red;text-align:right;background-color:black\n"
1:                                        + "}\n"
1:                                        + "td.gray1\n"
1:                                        + "{\n"
1:                                        + "border:0px solid green;text-align:right; background-color:LightGray\n"
1:                                        + "}\n" + "td.gray2\n" + "{\n"
1:                                        + "border:0px solid blue;text-align:right;background-color:gray\n"
1:                                        + "}\n" + "td.gray3\n" + "{\n"
1:                                        + "border:0px solid red;text-align:right;background-color:DarkGray\n"
1:                                        + "}\n" + "th" + "{\n" + "        text-align: center;\n"
1:                                        + "        vertical-align: bottom;\n"
1:                                        + "        padding-bottom: 3px;\n" + "        padding-left: 5px;\n"
1:                                        + "        padding-right: 5px;\n" + "}\n" + "     .verticalText\n"
1:                                        + "      {\n" + "        text-align: center;\n"
1:                                        + "        vertical-align: middle;\n" + "        width: 20px;\n"
1:                                        + "        margin: 0px;\n" + "        padding: 0px;\n"
1:                                        + "        padding-left: 3px;\n" + "        padding-right: 3px;\n"
1:                                        + "        padding-top: 10px;\n" + "        white-space: nowrap;\n"
1:                                        + "        -webkit-transform: rotate(-90deg); \n"
1:                                        + "        -moz-transform: rotate(-90deg);         \n" + "      };\n"
1:                                        + "</style>\n";
1:   // CSS style names.
/////////////////////////////////////////////////////////////////////////
0:     Map<String,String> parsedArgs = parseArguments(args);
/////////////////////////////////////////////////////////////////////////
0:     String TAB_SEPARATOR = "|";
1:     out.println(String.format("%-40s", "Label") + TAB_SEPARATOR + String.format("%-10s", "Total")
1:                 + TAB_SEPARATOR + String.format("%-10s", "Correct") + TAB_SEPARATOR
1:                 + String.format("%-6s", "%") + TAB_SEPARATOR);
1:     out.println(String.format("%-70s", "-").replace(' ', '-'));
1:     List<String> labels = stripDefault(cm);
1:     for (String label : labels) {
1:       int correct = cm.getCorrect(label);
1:       double accuracy = cm.getAccuracy(label);
1:       int count = getCount(cm, label);
1:       out.println(String.format("%-40s", label) + TAB_SEPARATOR + String.format("%-10s", count)
1:                   + TAB_SEPARATOR + String.format("%-10s", correct) + TAB_SEPARATOR
1:                   + String.format("%-6s", (int) Math.round(accuracy)) + TAB_SEPARATOR);
1:     }
1:     out.println(String.format("%-70s", "-").replace(' ', '-'));
/////////////////////////////////////////////////////////////////////////
1:     List<String> stripped = Lists.newArrayList(cm.getLabels().iterator());
/////////////////////////////////////////////////////////////////////////
1:   // after all, it does no seeks
1:       if (outputFile.exists()) {
/////////////////////////////////////////////////////////////////////////
1:     while (iter.hasNext()) {
/////////////////////////////////////////////////////////////////////////
1:     for (String label : labels) {
/////////////////////////////////////////////////////////////////////////
1:     format("<td class='%s'>%s</td><td>%d</td><td>%d</td><td>%d</td>", out, CSS_CELL, label, count, correct,
1:       (int) Math.round(accuracy));
/////////////////////////////////////////////////////////////////////////
1:    * Print each value in a four-value grayscale based on count/max. Gives a mostly white matrix with grays in
1:    * misclassified, and black in diagonal. TODO: Using the sqrt(count/max) as the rating is more stringent
1:     for (String label : labels) {
1:   private static void printGrayRow(ConfusionMatrix cm,
1:                                    PrintStream out,
1:                                    Iterable<String> labels,
1:                                    String rowLabel) {
1:     for (String columnLabel : labels) {
/////////////////////////////////////////////////////////////////////////
1:   // alternative rating is to use sqrt(total) instead of total - this is more drastic
/////////////////////////////////////////////////////////////////////////
1:       int rating = (int) ((count / (double) total) * 4);
/////////////////////////////////////////////////////////////////////////
1:     for (String label : labels) {
1:   private static void printCountsRow(ConfusionMatrix cm,
1:                                      PrintStream out,
1:                                      Iterable<String> labels,
1:                                      String rowLabel) {
1:     for (String columnLabel : labels) {
/////////////////////////////////////////////////////////////////////////
0:       out.format("<tr class='%s' style='height:%dem'><th>&nbsp;</th>\n", CSS_TALL_HEADER, longest / 2);
1:       for (String label : labels) {
1:       for (String label : labels) {
/////////////////////////////////////////////////////////////////////////
1:     for (String label : labels) {
1:   private static void format(String format, PrintStream out, Object... args) {
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
commit:ca18680
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier;
1: 
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: import java.io.OutputStream;
0: import java.io.PrintStream;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Map;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.util.ToolRunner;
1: import org.apache.mahout.common.AbstractJob;
1: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.MatrixWritable;
1: 
0: import com.google.common.collect.Lists;
1: 
1: /**
0:  * Export a ConfusionMatrix in various text formats: 
0:  *   ToString version
0:  *   Grayscale HTML table
0:  *   Summary HTML table 
0:  *   Table of counts
0:  *   all with optional HTML wrappers
1:  * 
1:  * Input format: Hadoop SequenceFile with Text key and MatrixWritable value, 1 pair
1:  * 
0:  * Intended to consume ConfusionMatrix SequenceFile output by Bayes
0:  * TestClassifier class
1:  */
1: public final class ConfusionMatrixDumper extends AbstractJob {
1: 
1:   // HTML wrapper - default CSS
0:   private static final String HEADER = "<html>" +
0:       "<head>\n" +
0:       "<title>TITLE</title>\n" +
0:       "</head>" +
0:       "<body>\n" +
0:       "<style type='text/css'> \n" +
0:       "table\n" +
0:       "{\n" +
0:       "border:3px solid black; text-align:left;\n" +
0:       "}\n" +
0:       "th.normalHeader\n" +
0:       "{\n" +
0:       "border:1px solid black;border-collapse:collapse;text-align:center;background-color:white\n" +
0:       "}\n" +
0:       "th.tallHeader\n" +
0:       "{\n" +
0:       "border:1px solid black;border-collapse:collapse;text-align:center;background-color:white; height:6em\n" +
0:       "}\n" +
0:       "tr.label\n" +
0:       "{\n" +
0:       "border:1px solid black;border-collapse:collapse;text-align:center;background-color:white\n" +
0:       "}\n" +
0:       "tr.row\n" +
0:       "{\n" +
0:       "border:1px solid gray;text-align:center;background-color:snow\n" +
0:       "}\n" +
0:       "td\n" +
0:       "{\n" +
0:       "min-width:2em\n" +
0:       "}\n" +
0:       "td.cell\n" +
0:       "{\n" +
0:       "border:1px solid black;text-align:right;background-color:snow\n" +
0:       "}\n" +
0:       "td.empty\n" +
0:       "{\n" +
0:       "border:0px;text-align:right;background-color:snow\n" +
0:       "}\n" +
0:       "td.white\n" +
0:       "{\n" +
0:       "border:0px solid black;text-align:right;background-color:white\n" +
0:       "}\n" +
0:       "td.black\n" +
0:       "{\n" +
0:       "border:0px solid red;text-align:right;background-color:black\n" +
0:       "}\n" +
0:       "td.gray1\n" +
0:       "{\n" +
0:       "border:0px solid green;text-align:right; background-color:LightGray\n" +
0:       "}\n" +
0:       "td.gray2\n" +
0:       "{\n" +
0:       "border:0px solid blue;text-align:right;background-color:gray\n" +
0:       "}\n" +
0:       "td.gray3\n" +
0:       "{\n" +
0:       "border:0px solid red;text-align:right;background-color:DarkGray\n" +
0:       "}\n" +
0:       "th" +
0:       "{\n" +
0:       "        text-align: center;\n" +
0:       "        vertical-align: bottom;\n" +
0:       "        padding-bottom: 3px;\n" +
0:       "        padding-left: 5px;\n" +
0:       "        padding-right: 5px;\n" +
0:       "}\n" +
0:       "     .verticalText\n" +
0:       "      {\n" +
0:       "        text-align: center;\n" +
0:       "        vertical-align: middle;\n" +
0:       "        width: 20px;\n" +
0:       "        margin: 0px;\n" +
0:       "        padding: 0px;\n" +
0:       "        padding-left: 3px;\n" +
0:       "        padding-right: 3px;\n" +
0:       "        padding-top: 10px;\n" +
0:       "        white-space: nowrap;\n" +
0:       "        -webkit-transform: rotate(-90deg); \n" +
0:       "        -moz-transform: rotate(-90deg);         \n" +
0:       "      };\n" +
0:       "</style>\n";
1:   private static final String FOOTER = "</html></body>";
1:   
0:   // CSS style names. 
1:   private static final String CSS_TABLE = "table";
1:   private static final String CSS_LABEL = "label";
1:   private static final String CSS_TALL_HEADER = "tall";
1:   private static final String CSS_VERTICAL = "verticalText";
1:   private static final String CSS_CELL = "cell";
1:   private static final String CSS_EMPTY = "empty";
1:   private static final String[] CSS_GRAY_CELLS = {"white", "gray1", "gray2", "gray3", "black"};
1:   
1:   private ConfusionMatrixDumper() {}
1:   
1:   public static void main(String[] args) throws Exception {
1:     ToolRunner.run(new ConfusionMatrixDumper(), args);
1:   }
1:   
1:   @Override
1:   public int run(String[] args) throws IOException {
1:     addInputOption();
1:     addOption("output", "o", "Output path", null); // AbstractJob output feature requires param
1:     addOption(DefaultOptionCreator.overwriteOption().create());
1:     addFlag("html", null, "Create complete HTML page");
1:     addFlag("text", null, "Dump simple text");
0:     Map<String, String> parsedArgs = parseArguments(args);
1:     if (parsedArgs == null) {
1:       return -1;
1:     }
1:     
1:     Path inputPath = getInputPath();
0:     String outputFile = parsedArgs.containsKey("--output") ? parsedArgs.get("--output") : null;
1:     boolean text = parsedArgs.containsKey("--text");
1:     boolean wrapHtml = parsedArgs.containsKey("--html");
1:     PrintStream out = getPrintStream(outputFile);
1:     if (text) {
1:       exportText(inputPath, out);
1:     } else {
1:       exportTable(inputPath, out, wrapHtml);
1:     }
1:     out.flush();
1:     if (out != System.out) {
1:       out.close();
1:     }
1:     return 0;
1:   }
1:   
1:   private static void exportText(Path inputPath, PrintStream out) throws IOException {
1:     MatrixWritable mw = new MatrixWritable();
1:     Text key = new Text();
1:     readSeqFile(inputPath, key, mw);
1:     Matrix m = mw.get();
1:     ConfusionMatrix cm = new ConfusionMatrix(m);
1:     out.println(cm.toString());
1:   }
1:   
1:   private static void exportTable(Path inputPath, PrintStream out, boolean wrapHtml) throws IOException {
1:     MatrixWritable mw = new MatrixWritable();
1:     Text key = new Text();
1:     readSeqFile(inputPath, key, mw);
1:     String fileName = inputPath.getName();
1:     fileName = fileName.substring(fileName.lastIndexOf('/') + 1, fileName.length());
1:     Matrix m = mw.get();
1:     ConfusionMatrix cm = new ConfusionMatrix(m);
1:     if (wrapHtml) {
1:       printHeader(out, fileName);
1:     }
1:     out.println("<p/>");
1:     printSummaryTable(cm, out);
1:     out.println("<p/>");
1:     printGrayTable(cm, out);
1:     out.println("<p/>");
1:     printCountsTable(cm, out);
1:     out.println("<p/>");
1:     printTextInBox(cm, out);
1:     out.println("<p/>");
1:     if (wrapHtml) {
1:       printFooter(out);
1:     }
1:   }
1:   
1:   private static List<String> stripDefault(ConfusionMatrix cm) {
0:     List<String> stripped = Lists.newArrayList(cm.getLabels().iterator()); 
1:     String defaultLabel = cm.getDefaultLabel();
1:     int unclassified = cm.getTotal(defaultLabel);
1:     if (unclassified > 0) {
1:       return stripped;
1:     }
1:     stripped.remove(defaultLabel);
1:     return stripped;
1:   }
1:   
1:   // TODO: test - this should work with HDFS files
1:   private static void readSeqFile(Path path, Text key, MatrixWritable m) throws IOException {
1:     Configuration conf = new Configuration();
1:     FileSystem fs = FileSystem.get(conf);
1:     SequenceFile.Reader reader = new SequenceFile.Reader(fs, path, conf);
1:     reader.next(key, m);
1:   }
1:   
1:   // TODO: test - this might not work with HDFS files?
0:   //     after all, it does no seeks
1:   private static PrintStream getPrintStream(String outputFilename) throws IOException {
1:     if (outputFilename != null) {
1:       File outputFile = new File(outputFilename);
0:       if (outputFile.exists()) { 
1:         outputFile.delete();
1:       }
1:       outputFile.createNewFile();
1:       OutputStream os = new FileOutputStream(outputFile);
0:       return new PrintStream(os);
1:     } else {
1:       return System.out;
1:     }
1:   }
1:   
1:   private static int getLabelTotal(ConfusionMatrix cm, String rowLabel) {
1:     Iterator<String> iter = cm.getLabels().iterator();
1:     int count = 0;
0:     while(iter.hasNext()) {
1:       count += cm.getCount(rowLabel, iter.next());
1:     }
1:     return count;
1:   }
1:   
1:   // HTML generator code
1:   
1:   private static void printTextInBox(ConfusionMatrix cm, PrintStream out) {
1:     out.println("<div style='width:90%;overflow:scroll;'>");
1:     out.println("<pre>");
1:     out.println(cm.toString());
1:     out.println("</pre>");
1:     out.println("</div>");
1:   }
1:   
1:   public static void printSummaryTable(ConfusionMatrix cm, PrintStream out) {
1:     format("<table class='%s'>\n", out, CSS_TABLE);
1:     format("<tr class='%s'>", out, CSS_LABEL);
1:     out.println("<td>Label</td><td>Total</td><td>Correct</td><td>%</td>");
1:     out.println("</tr>");
1:     List<String> labels = stripDefault(cm);
0:     for(String label: labels) {
1:       printSummaryRow(cm, out, label);
1:     }
1:     out.println("</table>");
1:   }
1:   
1:   private static void printSummaryRow(ConfusionMatrix cm, PrintStream out, String label) {
1:     format("<tr class='%s'>", out, CSS_CELL);
1:     int correct = cm.getCorrect(label);
1:     double accuracy = cm.getAccuracy(label);
1:     int count = getCount(cm, label);
0:     format("<td class='%s'>%s</td><td>%d</td><td>%d</td><td>%d</td>",
0:            out, CSS_CELL, label, count, correct, (int) Math.round(accuracy));
1:     out.println("</tr>");
1:   }
1:   
1:   private static int getCount(ConfusionMatrix cm, String label) {
1:     int count = 0;
1:     for (String s : cm.getLabels()) {
1:       count += cm.getCount(label, s);
1:     }
1:     return count;
1:   }
1:   
1:   public static void printGrayTable(ConfusionMatrix cm, PrintStream out) {
1:     format("<table class='%s'>\n", out, CSS_TABLE);
1:     printCountsHeader(cm, out, true);
1:     printGrayRows(cm, out);
1:     out.println("</table>");
1:   }
1:   
1:   /**
0:    * Print each value in a four-value grayscale based on count/max. 
0:    * Gives a mostly white matrix with grays in misclassified, and black in diagonal.
0:    * TODO: Using the sqrt(count/max) as the rating is more stringent 
1:    */
1:   private static void printGrayRows(ConfusionMatrix cm, PrintStream out) {
1:     List<String> labels = stripDefault(cm);
0:     for (String label: labels) {
1:       printGrayRow(cm, out, labels, label);
1:     }
1:   }
1:   
0:   private static void printGrayRow(ConfusionMatrix cm, PrintStream out, Iterable<String> labels, String rowLabel) {
1:     format("<tr class='%s'>", out, CSS_LABEL);
1:     format("<td>%s</td>", out, rowLabel);
1:     int total = getLabelTotal(cm, rowLabel);
0:     for (String columnLabel: labels) {
1:       printGrayCell(cm, out, total, rowLabel, columnLabel);
1:     }
1:     out.println("</tr>");
1:   }
1:   
1:   // assign white/light/medium/dark to 0,1/4,1/2,3/4 of total number of inputs
1:   // assign black to count = total, meaning complete success
0:   // alternative rating is to use sqrt(total) instead of total - this is more drastic 
1:   private static void printGrayCell(ConfusionMatrix cm,
1:                                     PrintStream out,
1:                                     int total,
1:                                     String rowLabel,
1:                                     String columnLabel) {
1:     
1:     int count = cm.getCount(rowLabel, columnLabel);
1:     if (count == 0) {
1:       out.format("<td class='%s'/>", CSS_EMPTY);
1:     } else {
1:       // 0 is white, full is black, everything else gray
0:       int rating = (int) ((count/ (double) total) * 4);
1:       String css = CSS_GRAY_CELLS[rating];
1:       format("<td class='%s' title='%s'>%s</td>", out, css, columnLabel, count);
1:     }
1:   }
1:   
1:   public static void printCountsTable(ConfusionMatrix cm, PrintStream out) {
0:     int length = cm.getLabels().size();
1:     format("<table class='%s'>\n", out, CSS_TABLE);
1:     printCountsHeader(cm, out, false);
1:     printCountsRows(cm, out);
1:     out.println("</table>");
1:   }
1:   
1:   private static void printCountsRows(ConfusionMatrix cm, PrintStream out) {
1:     List<String> labels = stripDefault(cm);
0:     for(String label: labels) {
1:       printCountsRow(cm, out, labels, label);
1:     }
1:   }
1:   
0:   private static void printCountsRow(ConfusionMatrix cm, PrintStream out, Iterable<String> labels, String rowLabel) {
1:     out.println("<tr>");
1:     format("<td class='%s'>%s</td>", out, CSS_LABEL, rowLabel);
0:     for(String columnLabel: labels) {
1:       printCountsCell(cm, out, rowLabel, columnLabel);
1:     }
1:     out.println("</tr>");
1:   }
1:   
1:   private static void printCountsCell(ConfusionMatrix cm, PrintStream out, String rowLabel, String columnLabel) {
1:     int count = cm.getCount(rowLabel, columnLabel);
1:     String s = count == 0 ? "" : Integer.toString(count);
1:     format("<td class='%s' title='%s'>%s</td>", out, CSS_CELL, columnLabel, s);
1:   }
1:   
1:   private static void printCountsHeader(ConfusionMatrix cm, PrintStream out, boolean vertical) {
1:     List<String> labels = stripDefault(cm);
1:     int longest = getLongestHeader(labels);
1:     if (vertical) {
1:       // do vertical - rotation is a bitch
0:       out.format("<tr class='%s' style='height:%dem'><th>&nbsp;</th>\n", CSS_TALL_HEADER, longest/2);
0:       for(String label: labels) {
1:         out.format("<th><div class='%s'>%s</div></th>", CSS_VERTICAL, label);
1:       }
1:       out.println("</tr>");
1:     } else {
1:       // header - empty cell in upper left
0:       out.format("<tr class='%s'><td class='%s'></td>\n", CSS_TABLE, CSS_LABEL);
0:       for(String label: labels) {
1:         out.format("<td>%s</td>", label);
1:       }
1:       out.format("</tr>");
1:     }
1:   }
1:   
1:   private static int getLongestHeader(Iterable<String> labels) {
1:     int max = 0;
0:     for (String label: labels) {
1:       max = Math.max(label.length(), max);
1:     }
1:     return max;
1:   }
1:   
0:   private static void format(String format, PrintStream out, Object ... args) {
1:     String format2 = String.format(format, args);
1:     out.println(format2);
1:   }
1:   
1:   public static void printHeader(PrintStream out, CharSequence title) {
1:     out.println(HEADER.replace("TITLE", title));
1:   }
1:   
1:   public static void printFooter(PrintStream out) {
1:     out.println(FOOTER);
1:   }
1:   
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:03a9492
/////////////////////////////////////////////////////////////////////////
1:     Map<String,List<String>> parsedArgs = parseArguments(args);
1:     String outputFile = hasOption("output") ? getOption("output") : null;
============================================================================