1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
1:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:bdb1c48: import com.google.common.base.Preconditions;
1:bdb1c48: import org.apache.mahout.common.RandomUtils;
1:bdb1c48: 
1:a07bfc3: /**
1:a07bfc3:  * Handy for creating multinomial distributions of things.
1:a07bfc3:  */
1:8b6a26a: public final class WeightedThing<T> implements Comparable<WeightedThing<T>> {
1:6d16230:   private double weight;
1:6d16230:   private final T value;
1:a07bfc3: 
1:6d16230:   public WeightedThing(T thing, double weight) {
1:bdb1c48:     this.value = Preconditions.checkNotNull(thing);
1:6d16230:     this.weight = weight;
1:6d16230:   }
1:a07bfc3: 
1:8649ac2:   public WeightedThing(double weight) {
1:8649ac2:     this.value = null;
1:8649ac2:     this.weight = weight;
1:8649ac2:   }
1:8649ac2: 
1:6d16230:   public T getValue() {
1:6d16230:     return value;
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   public double getWeight() {
1:6d16230:     return weight;
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   public void setWeight(double weight) {
1:6d16230:     this.weight = weight;
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   @Override
1:6d16230:   public int compareTo(WeightedThing<T> other) {
1:6d16230:     return Double.compare(this.weight, other.weight);
1:6d16230:   }
1:bdb1c48: 
1:bdb1c48:   @Override
1:bdb1c48:   public boolean equals(Object o) {
1:bdb1c48:     if (o instanceof WeightedThing) {
1:8649ac2:       @SuppressWarnings("unchecked")
1:bdb1c48:       WeightedThing<T> other = (WeightedThing<T>) o;
1:bdb1c48:       return weight == other.weight && value.equals(other.value);
1:bdb1c48:     }
1:bdb1c48:     return false;
1:bdb1c48:   }
1:bdb1c48: 
1:bdb1c48:   @Override
1:bdb1c48:   public int hashCode() {
1:bdb1c48:     return 31 * RandomUtils.hashDouble(weight) + value.hashCode();
1:bdb1c48:   }
6:a07bfc3: }
============================================================================
author:dfilimon
-------------------------------------------------------------------------------
commit:8649ac2
/////////////////////////////////////////////////////////////////////////
1:   public WeightedThing(double weight) {
1:     this.value = null;
1:     this.weight = weight;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:       @SuppressWarnings("unchecked")
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
1: import org.apache.mahout.common.RandomUtils;
1: 
/////////////////////////////////////////////////////////////////////////
1:     this.value = Preconditions.checkNotNull(thing);
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public boolean equals(Object o) {
1:     if (o instanceof WeightedThing) {
1:       WeightedThing<T> other = (WeightedThing<T>) o;
1:       return weight == other.weight && value.equals(other.value);
1:     }
1:     return false;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return 31 * RandomUtils.hashDouble(weight) + value.hashCode();
1:   }
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:   private double weight;
1:   private final T value;
1:   public WeightedThing(T thing, double weight) {
0:     this.value = thing;
1:     this.weight = weight;
1:   }
1:   public T getValue() {
1:     return value;
1:   }
1:   public double getWeight() {
1:     return weight;
1:   }
1:   public void setWeight(double weight) {
1:     this.weight = weight;
1:   }
1:   @Override
1:   public int compareTo(WeightedThing<T> other) {
1:     return Double.compare(this.weight, other.weight);
1:   }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: public final class WeightedThing<T> implements Comparable<WeightedThing<T>> {
/////////////////////////////////////////////////////////////////////////
0:     @Override
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: /**
1:  * Handy for creating multinomial distributions of things.
1:  */
0: public class WeightedThing<T> implements Comparable<WeightedThing<T>> {
0:     private double weight;
0:     private final T value;
1: 
0:     public WeightedThing(T thing, double weight) {
0:         this.value = thing;
0:         this.weight = weight;
1:     }
1: 
0:     public T getValue() {
0:         return value;
1:     }
1: 
0:     public double getWeight() {
0:         return weight;
1:     }
1: 
0:     public void setWeight(double weight) {
0:         this.weight = weight;
1:     }
1: 
0:     public int compareTo(WeightedThing<T> other) {
0:         return Double.compare(this.weight, other.weight);
1:     }
1: }
============================================================================