1:9a15cb8: /**
1:9a15cb8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9a15cb8:  * contributor license agreements.  See the NOTICE file distributed with
1:9a15cb8:  * this work for additional information regarding copyright ownership.
1:9a15cb8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9a15cb8:  * (the "License"); you may not use this file except in compliance with
1:9a15cb8:  * the License.  You may obtain a copy of the License at
1:9a15cb8:  *
1:9a15cb8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9a15cb8:  *
1:9a15cb8:  * Unless required by applicable law or agreed to in writing, software
1:9a15cb8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9a15cb8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9a15cb8:  * See the License for the specific language governing permissions and
1:9a15cb8:  * limitations under the License.
1:9a15cb8:  */
2:9a15cb8: 
1:9a15cb8: package org.apache.mahout.text.wikipedia;
1:9a15cb8: 
1:9a15cb8: import com.google.common.io.Closeables;
1:85f9ece: import org.apache.commons.io.Charsets;
1:9a15cb8: import org.apache.hadoop.conf.Configuration;
1:9a15cb8: import org.apache.hadoop.fs.FSDataInputStream;
1:9a15cb8: import org.apache.hadoop.fs.FileSystem;
1:9a15cb8: import org.apache.hadoop.fs.Path;
1:9a15cb8: import org.apache.hadoop.io.DataOutputBuffer;
1:9a15cb8: import org.apache.hadoop.io.LongWritable;
1:9a15cb8: import org.apache.hadoop.io.Text;
1:9a15cb8: import org.apache.hadoop.mapreduce.InputSplit;
1:9a15cb8: import org.apache.hadoop.mapreduce.RecordReader;
1:9a15cb8: import org.apache.hadoop.mapreduce.TaskAttemptContext;
1:9a15cb8: import org.apache.hadoop.mapreduce.lib.input.FileSplit;
1:9a15cb8: import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
1:9a15cb8: import org.slf4j.Logger;
1:9a15cb8: import org.slf4j.LoggerFactory;
1:9a15cb8: 
1:85f9ece: import java.io.IOException;
1:85f9ece: 
1:9a15cb8: /**
1:9a15cb8:  * Reads records that are delimited by a specific begin/end tag.
1:9a15cb8:  */
1:9a15cb8: public class XmlInputFormat extends TextInputFormat {
1:9a15cb8: 
1:9a15cb8:   private static final Logger log = LoggerFactory.getLogger(XmlInputFormat.class);
1:9a15cb8: 
1:9a15cb8:   public static final String START_TAG_KEY = "xmlinput.start";
1:9a15cb8:   public static final String END_TAG_KEY = "xmlinput.end";
1:9a15cb8: 
1:9a15cb8:   @Override
1:9a15cb8:   public RecordReader<LongWritable, Text> createRecordReader(InputSplit split, TaskAttemptContext context) {
1:9a15cb8:     try {
1:9a15cb8:       return new XmlRecordReader((FileSplit) split, context.getConfiguration());
1:9a15cb8:     } catch (IOException ioe) {
1:9a15cb8:       log.warn("Error while creating XmlRecordReader", ioe);
1:9a15cb8:       return null;
1:9a15cb8:     }
1:9a15cb8:   }
1:9a15cb8: 
1:9a15cb8:   /**
1:9a15cb8:    * XMLRecordReader class to read through a given xml document to output xml blocks as records as specified
1:9a15cb8:    * by the start tag and end tag
1:9a15cb8:    * 
1:9a15cb8:    */
1:9a15cb8:   public static class XmlRecordReader extends RecordReader<LongWritable, Text> {
1:9a15cb8: 
1:9a15cb8:     private final byte[] startTag;
1:9a15cb8:     private final byte[] endTag;
1:9a15cb8:     private final long start;
1:9a15cb8:     private final long end;
1:9a15cb8:     private final FSDataInputStream fsin;
1:9a15cb8:     private final DataOutputBuffer buffer = new DataOutputBuffer();
1:9a15cb8:     private LongWritable currentKey;
1:9a15cb8:     private Text currentValue;
1:9a15cb8: 
1:9a15cb8:     public XmlRecordReader(FileSplit split, Configuration conf) throws IOException {
1:9a15cb8:       startTag = conf.get(START_TAG_KEY).getBytes(Charsets.UTF_8);
1:9a15cb8:       endTag = conf.get(END_TAG_KEY).getBytes(Charsets.UTF_8);
1:9a15cb8: 
1:9a15cb8:       // open the file and seek to the start of the split
1:9a15cb8:       start = split.getStart();
1:9a15cb8:       end = start + split.getLength();
1:9a15cb8:       Path file = split.getPath();
1:9a15cb8:       FileSystem fs = file.getFileSystem(conf);
1:9a15cb8:       fsin = fs.open(split.getPath());
1:9a15cb8:       fsin.seek(start);
1:9a15cb8:     }
1:9a15cb8: 
1:9a15cb8:     private boolean next(LongWritable key, Text value) throws IOException {
1:9a15cb8:       if (fsin.getPos() < end && readUntilMatch(startTag, false)) {
1:9a15cb8:         try {
1:9a15cb8:           buffer.write(startTag);
1:9a15cb8:           if (readUntilMatch(endTag, true)) {
1:9a15cb8:             key.set(fsin.getPos());
1:9a15cb8:             value.set(buffer.getData(), 0, buffer.getLength());
1:9a15cb8:             return true;
1:9a15cb8:           }
1:9a15cb8:         } finally {
1:9a15cb8:           buffer.reset();
1:9a15cb8:         }
1:9a15cb8:       }
1:9a15cb8:       return false;
1:9a15cb8:     }
1:9a15cb8: 
1:9a15cb8:     @Override
1:9a15cb8:     public void close() throws IOException {
1:31cb292:       Closeables.close(fsin, true);
1:9a15cb8:     }
1:9a15cb8: 
1:9a15cb8:     @Override
1:9a15cb8:     public float getProgress() throws IOException {
1:9a15cb8:       return (fsin.getPos() - start) / (float) (end - start);
1:9a15cb8:     }
1:9a15cb8: 
1:9a15cb8:     private boolean readUntilMatch(byte[] match, boolean withinBlock) throws IOException {
1:9a15cb8:       int i = 0;
1:9a15cb8:       while (true) {
1:9a15cb8:         int b = fsin.read();
1:9a15cb8:         // end of file:
1:9a15cb8:         if (b == -1) {
1:9a15cb8:           return false;
1:9a15cb8:         }
1:9a15cb8:         // save to buffer:
1:9a15cb8:         if (withinBlock) {
1:9a15cb8:           buffer.write(b);
1:9a15cb8:         }
1:9a15cb8: 
1:9a15cb8:         // check if we're matching:
1:9a15cb8:         if (b == match[i]) {
1:9a15cb8:           i++;
1:9a15cb8:           if (i >= match.length) {
1:9a15cb8:             return true;
1:9a15cb8:           }
1:9a15cb8:         } else {
1:9a15cb8:           i = 0;
1:9a15cb8:         }
1:9a15cb8:         // see if we've passed the stop point:
1:9a15cb8:         if (!withinBlock && i == 0 && fsin.getPos() >= end) {
1:9a15cb8:           return false;
1:9a15cb8:         }
1:9a15cb8:       }
1:9a15cb8:     }
1:9a15cb8: 
1:9a15cb8:     @Override
1:9a15cb8:     public LongWritable getCurrentKey() throws IOException, InterruptedException {
1:9a15cb8:       return currentKey;
1:9a15cb8:     }
1:9a15cb8: 
1:9a15cb8:     @Override
1:9a15cb8:     public Text getCurrentValue() throws IOException, InterruptedException {
1:9a15cb8:       return currentValue;
1:9a15cb8:     }
1:9a15cb8: 
1:9a15cb8:     @Override
1:9a15cb8:     public void initialize(InputSplit split, TaskAttemptContext context) throws IOException, InterruptedException {
1:9a15cb8:     }
1:9a15cb8: 
1:9a15cb8:     @Override
1:9a15cb8:     public boolean nextKeyValue() throws IOException, InterruptedException {
1:9a15cb8:       currentKey = new LongWritable();
1:9a15cb8:       currentValue = new Text();
1:9a15cb8:       return next(currentKey, currentValue);
1:9a15cb8:     }
1:9a15cb8:   }
1:9a15cb8: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(fsin, true);
author:Robin Anil
-------------------------------------------------------------------------------
commit:9a15cb8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.text.wikipedia;
1: 
0: import java.io.IOException;
1: 
0: import com.google.common.base.Charsets;
1: import com.google.common.io.Closeables;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FSDataInputStream;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.DataOutputBuffer;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.InputSplit;
1: import org.apache.hadoop.mapreduce.RecordReader;
1: import org.apache.hadoop.mapreduce.TaskAttemptContext;
1: import org.apache.hadoop.mapreduce.lib.input.FileSplit;
1: import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Reads records that are delimited by a specific begin/end tag.
1:  */
1: public class XmlInputFormat extends TextInputFormat {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(XmlInputFormat.class);
1: 
1:   public static final String START_TAG_KEY = "xmlinput.start";
1:   public static final String END_TAG_KEY = "xmlinput.end";
1: 
1:   @Override
1:   public RecordReader<LongWritable, Text> createRecordReader(InputSplit split, TaskAttemptContext context) {
1:     try {
1:       return new XmlRecordReader((FileSplit) split, context.getConfiguration());
1:     } catch (IOException ioe) {
1:       log.warn("Error while creating XmlRecordReader", ioe);
1:       return null;
1:     }
1:   }
1: 
1:   /**
1:    * XMLRecordReader class to read through a given xml document to output xml blocks as records as specified
1:    * by the start tag and end tag
1:    * 
1:    */
1:   public static class XmlRecordReader extends RecordReader<LongWritable, Text> {
1: 
1:     private final byte[] startTag;
1:     private final byte[] endTag;
1:     private final long start;
1:     private final long end;
1:     private final FSDataInputStream fsin;
1:     private final DataOutputBuffer buffer = new DataOutputBuffer();
1:     private LongWritable currentKey;
1:     private Text currentValue;
1: 
1:     public XmlRecordReader(FileSplit split, Configuration conf) throws IOException {
1:       startTag = conf.get(START_TAG_KEY).getBytes(Charsets.UTF_8);
1:       endTag = conf.get(END_TAG_KEY).getBytes(Charsets.UTF_8);
1: 
1:       // open the file and seek to the start of the split
1:       start = split.getStart();
1:       end = start + split.getLength();
1:       Path file = split.getPath();
1:       FileSystem fs = file.getFileSystem(conf);
1:       fsin = fs.open(split.getPath());
1:       fsin.seek(start);
1:     }
1: 
1:     private boolean next(LongWritable key, Text value) throws IOException {
1:       if (fsin.getPos() < end && readUntilMatch(startTag, false)) {
1:         try {
1:           buffer.write(startTag);
1:           if (readUntilMatch(endTag, true)) {
1:             key.set(fsin.getPos());
1:             value.set(buffer.getData(), 0, buffer.getLength());
1:             return true;
1:           }
1:         } finally {
1:           buffer.reset();
1:         }
1:       }
1:       return false;
1:     }
1: 
1:     @Override
1:     public void close() throws IOException {
0:       Closeables.closeQuietly(fsin);
1:     }
1: 
1:     @Override
1:     public float getProgress() throws IOException {
1:       return (fsin.getPos() - start) / (float) (end - start);
1:     }
1: 
1:     private boolean readUntilMatch(byte[] match, boolean withinBlock) throws IOException {
1:       int i = 0;
1:       while (true) {
1:         int b = fsin.read();
1:         // end of file:
1:         if (b == -1) {
1:           return false;
1:         }
1:         // save to buffer:
1:         if (withinBlock) {
1:           buffer.write(b);
1:         }
1: 
1:         // check if we're matching:
1:         if (b == match[i]) {
1:           i++;
1:           if (i >= match.length) {
1:             return true;
1:           }
1:         } else {
1:           i = 0;
1:         }
1:         // see if we've passed the stop point:
1:         if (!withinBlock && i == 0 && fsin.getPos() >= end) {
1:           return false;
1:         }
1:       }
1:     }
1: 
1:     @Override
1:     public LongWritable getCurrentKey() throws IOException, InterruptedException {
1:       return currentKey;
1:     }
1: 
1:     @Override
1:     public Text getCurrentValue() throws IOException, InterruptedException {
1:       return currentValue;
1:     }
1: 
1:     @Override
1:     public void initialize(InputSplit split, TaskAttemptContext context) throws IOException, InterruptedException {
1:     }
1: 
1:     @Override
1:     public boolean nextKeyValue() throws IOException, InterruptedException {
1:       currentKey = new LongWritable();
1:       currentValue = new Text();
1:       return next(currentKey, currentValue);
1:     }
1:   }
1: }
============================================================================