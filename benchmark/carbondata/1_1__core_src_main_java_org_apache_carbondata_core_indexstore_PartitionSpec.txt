1:8d3c774: /*
1:8d3c774:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8d3c774:  * contributor license agreements.  See the NOTICE file distributed with
1:8d3c774:  * this work for additional information regarding copyright ownership.
1:8d3c774:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8d3c774:  * (the "License"); you may not use this file except in compliance with
1:8d3c774:  * the License.  You may obtain a copy of the License at
1:8d3c774:  *
1:8d3c774:  *    http://www.apache.org/licenses/LICENSE-2.0
1:8d3c774:  *
1:8d3c774:  * Unless required by applicable law or agreed to in writing, software
1:8d3c774:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8d3c774:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d3c774:  * See the License for the specific language governing permissions and
1:8d3c774:  * limitations under the License.
1:8d3c774:  */
1:8d3c774: package org.apache.carbondata.core.indexstore;
1:8d3c774: 
1:8d3c774: import java.io.Serializable;
1:8d3c774: import java.net.URI;
1:8d3c774: import java.util.List;
1:8d3c774: import java.util.Objects;
1:8d3c774: 
1:8d3c774: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:8d3c774: 
1:8d3c774: import org.apache.hadoop.fs.Path;
1:8d3c774: 
1:8d3c774: /**
1:8d3c774:  * Holds partition information.
1:8d3c774:  */
1:8d3c774: public class PartitionSpec implements Serializable {
1:8d3c774: 
1:8d3c774:   private static final long serialVersionUID = 4828007433384867678L;
1:8d3c774: 
1:8d3c774:   /**
1:8d3c774:    * It holds the partition information in columnName=partitionValue combination.
1:8d3c774:    */
1:8d3c774:   private List<String> partitions;
1:8d3c774: 
1:8d3c774:   private transient Path locationPath;
1:8d3c774: 
1:8d3c774:   private String location;
1:8d3c774: 
1:8d3c774:   private String uuid;
1:8d3c774: 
1:8d3c774:   public PartitionSpec(List<String> partitions, String location) {
1:8d3c774:     this.partitions = partitions;
1:8d3c774:     this.locationPath = new Path(FileFactory.getUpdatedFilePath(location));
1:8d3c774:     this.location = locationPath.toString();
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   public PartitionSpec(List<String> partitions, URI location) {
1:8d3c774:     this.partitions = partitions;
1:8d3c774:     this.locationPath = new Path(FileFactory.getUpdatedFilePath(new Path(location).toString()));
1:8d3c774:     this.location = locationPath.toString();
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   public List<String> getPartitions() {
1:8d3c774:     return partitions;
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   public Path getLocation() {
1:8d3c774:     if (locationPath == null) {
1:8d3c774:       locationPath = new Path(location);
1:8d3c774:     }
1:8d3c774:     return locationPath;
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   public String getUuid() {
1:8d3c774:     return uuid;
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   public void setUuid(String uuid) {
1:8d3c774:     this.uuid = uuid;
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   @Override public boolean equals(Object o) {
1:8d3c774:     if (this == o) return true;
1:8d3c774:     if (o == null || getClass() != o.getClass()) return false;
1:8d3c774:     PartitionSpec spec = (PartitionSpec) o;
1:8d3c774:     return Objects.equals(getLocation(), spec.getLocation());
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   @Override public int hashCode() {
1:8d3c774:     return Objects.hash(locationPath);
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   @Override public String toString() {
1:8d3c774:     return "PartitionSpec{" + "partitions=" + partitions + ", locationPath=" + locationPath
1:8d3c774:         + ", location='" + location + '\'' + '}';
1:8d3c774:   }
1:8d3c774: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:8d3c774
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.indexstore;
1: 
1: import java.io.Serializable;
1: import java.net.URI;
1: import java.util.List;
1: import java.util.Objects;
1: 
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: 
1: import org.apache.hadoop.fs.Path;
1: 
1: /**
1:  * Holds partition information.
1:  */
1: public class PartitionSpec implements Serializable {
1: 
1:   private static final long serialVersionUID = 4828007433384867678L;
1: 
1:   /**
1:    * It holds the partition information in columnName=partitionValue combination.
1:    */
1:   private List<String> partitions;
1: 
1:   private transient Path locationPath;
1: 
1:   private String location;
1: 
1:   private String uuid;
1: 
1:   public PartitionSpec(List<String> partitions, String location) {
1:     this.partitions = partitions;
1:     this.locationPath = new Path(FileFactory.getUpdatedFilePath(location));
1:     this.location = locationPath.toString();
1:   }
1: 
1:   public PartitionSpec(List<String> partitions, URI location) {
1:     this.partitions = partitions;
1:     this.locationPath = new Path(FileFactory.getUpdatedFilePath(new Path(location).toString()));
1:     this.location = locationPath.toString();
1:   }
1: 
1:   public List<String> getPartitions() {
1:     return partitions;
1:   }
1: 
1:   public Path getLocation() {
1:     if (locationPath == null) {
1:       locationPath = new Path(location);
1:     }
1:     return locationPath;
1:   }
1: 
1:   public String getUuid() {
1:     return uuid;
1:   }
1: 
1:   public void setUuid(String uuid) {
1:     this.uuid = uuid;
1:   }
1: 
1:   @Override public boolean equals(Object o) {
1:     if (this == o) return true;
1:     if (o == null || getClass() != o.getClass()) return false;
1:     PartitionSpec spec = (PartitionSpec) o;
1:     return Objects.equals(getLocation(), spec.getLocation());
1:   }
1: 
1:   @Override public int hashCode() {
1:     return Objects.hash(locationPath);
1:   }
1: 
1:   @Override public String toString() {
1:     return "PartitionSpec{" + "partitions=" + partitions + ", locationPath=" + locationPath
1:         + ", location='" + location + '\'' + '}';
1:   }
1: }
============================================================================