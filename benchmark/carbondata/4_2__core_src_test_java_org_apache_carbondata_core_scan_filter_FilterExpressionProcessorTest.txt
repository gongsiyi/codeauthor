1:28c9418: package org.apache.carbondata.core.scan.filter;
1:28c9418: 
1:28c9418: import java.lang.reflect.InvocationTargetException;
1:28c9418: import java.lang.reflect.Method;
1:28c9418: import java.util.ArrayList;
1:28c9418: import java.util.List;
1:28c9418: import java.util.UUID;
1:28c9418: 
1:28c9418: import org.apache.carbondata.core.cache.dictionary.AbstractDictionaryCacheTest;
1:28c9418: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:28c9418: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:28c9418: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:28c9418: import org.apache.carbondata.core.metadata.encoder.Encoding;
1:28c9418: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:28c9418: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:28c9418: import org.apache.carbondata.core.scan.expression.ColumnExpression;
1:28c9418: import org.apache.carbondata.core.scan.expression.Expression;
1:28c9418: import org.apache.carbondata.core.scan.expression.LiteralExpression;
1:28c9418: import org.apache.carbondata.core.scan.expression.conditional.InExpression;
1:28c9418: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1:28c9418: 
1:29be1d0: import org.junit.Assert;
1:28c9418: import org.junit.Before;
1:28c9418: import org.junit.Test;
1:28c9418: 
1:28c9418: public class FilterExpressionProcessorTest extends AbstractDictionaryCacheTest {
1:28c9418: 
1:28c9418:   private ColumnSchema columnSchema;
1:28c9418: 
1:28c9418:   @Before public void setUp() throws Exception {
1:28c9418:     init();
1:28c9418:     this.databaseName = props.getProperty("database", "testSchema");
1:28c9418:     this.tableName = props.getProperty("tableName", "carbon");
1:28c9418:     this.carbonStorePath = props.getProperty("storePath", "carbonStore");
1:28c9418:     carbonTableIdentifier =
1:28c9418:         new CarbonTableIdentifier(databaseName, tableName, UUID.randomUUID().toString());
1:28c9418:     this.carbonStorePath = props.getProperty("storePath", "carbonStore");
1:28c9418:     columnSchema = new ColumnSchema();
1:28c9418:     columnSchema.setColumnName("IMEI");
1:28c9418:     columnSchema.setColumnUniqueId(UUID.randomUUID().toString());
1:28c9418:     columnSchema.setDataType(DataTypes.STRING);
1:28c9418:     columnSchema.setDimensionColumn(true);
1:28c9418:     List<Encoding> encodingList = new ArrayList<>();
1:28c9418:     encodingList.add(Encoding.IMPLICIT);
1:28c9418:     columnSchema.setEncodingList(encodingList);
1:28c9418:   }
1:28c9418: 
1:28c9418:   @Test public void testGetFilterResolverBasedOnExpressionType()
1:28c9418:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:28c9418:     CarbonColumn carbonColumn = new CarbonColumn(columnSchema, 0, 0);
1:28c9418:     ColumnExpression columnExpression = new ColumnExpression("IMEI", DataTypes.STRING);
1:28c9418:     columnExpression.setCarbonColumn(carbonColumn);
1:28c9418:     LiteralExpression literalExpression = new LiteralExpression("ImeiValue", DataTypes.STRING);
1:28c9418:     InExpression equalToExpression = new InExpression(columnExpression, literalExpression);
1:28c9418:     FilterExpressionProcessor filterExpressionProcessor = new FilterExpressionProcessor();
1:28c9418:     Method method = FilterExpressionProcessor.class
1:28c9418:         .getDeclaredMethod("getFilterResolverBasedOnExpressionType", ExpressionType.class,
1:28c9418:             boolean.class, Expression.class, AbsoluteTableIdentifier.class, Expression.class);
1:28c9418:     method.setAccessible(true);
1:28c9418:     Object result = method
1:28c9418:         .invoke(filterExpressionProcessor, ExpressionType.EQUALS, false, equalToExpression, null,
1:28c9418:             null);
1:29be1d0:     Assert.assertTrue(result.getClass().getName()
1:28c9418:         .equals("org.apache.carbondata.core.scan.filter.resolver.ConditionalFilterResolverImpl"));
1:28c9418:   }
1:28c9418: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:xuchuanyin
-------------------------------------------------------------------------------
commit:29be1d0
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(result.getClass().getName()
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:rahulforallp
-------------------------------------------------------------------------------
commit:28c9418
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.scan.filter;
1: 
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.UUID;
1: 
1: import org.apache.carbondata.core.cache.dictionary.AbstractDictionaryCacheTest;
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.metadata.encoder.Encoding;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: import org.apache.carbondata.core.scan.expression.ColumnExpression;
1: import org.apache.carbondata.core.scan.expression.Expression;
1: import org.apache.carbondata.core.scan.expression.LiteralExpression;
0: import org.apache.carbondata.core.scan.expression.conditional.EqualToExpression;
1: import org.apache.carbondata.core.scan.expression.conditional.InExpression;
1: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
0: import org.apache.carbondata.core.scan.filter.resolver.RowLevelFilterResolverImpl;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class FilterExpressionProcessorTest extends AbstractDictionaryCacheTest {
1: 
1:   private ColumnSchema columnSchema;
1: 
1:   @Before public void setUp() throws Exception {
1:     init();
1:     this.databaseName = props.getProperty("database", "testSchema");
1:     this.tableName = props.getProperty("tableName", "carbon");
1:     this.carbonStorePath = props.getProperty("storePath", "carbonStore");
1:     carbonTableIdentifier =
1:         new CarbonTableIdentifier(databaseName, tableName, UUID.randomUUID().toString());
1:     this.carbonStorePath = props.getProperty("storePath", "carbonStore");
1:     columnSchema = new ColumnSchema();
0:     columnSchema.setColumnar(true);
1:     columnSchema.setColumnName("IMEI");
1:     columnSchema.setColumnUniqueId(UUID.randomUUID().toString());
1:     columnSchema.setDataType(DataTypes.STRING);
1:     columnSchema.setDimensionColumn(true);
1:     List<Encoding> encodingList = new ArrayList<>();
1:     encodingList.add(Encoding.IMPLICIT);
1:     columnSchema.setEncodingList(encodingList);
1:   }
1: 
1:   @Test public void testGetFilterResolverBasedOnExpressionType()
1:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:     CarbonColumn carbonColumn = new CarbonColumn(columnSchema, 0, 0);
1:     ColumnExpression columnExpression = new ColumnExpression("IMEI", DataTypes.STRING);
1:     columnExpression.setCarbonColumn(carbonColumn);
1:     LiteralExpression literalExpression = new LiteralExpression("ImeiValue", DataTypes.STRING);
1:     InExpression equalToExpression = new InExpression(columnExpression, literalExpression);
1:     FilterExpressionProcessor filterExpressionProcessor = new FilterExpressionProcessor();
1:     Method method = FilterExpressionProcessor.class
1:         .getDeclaredMethod("getFilterResolverBasedOnExpressionType", ExpressionType.class,
1:             boolean.class, Expression.class, AbsoluteTableIdentifier.class, Expression.class);
1:     method.setAccessible(true);
1:     Object result = method
1:         .invoke(filterExpressionProcessor, ExpressionType.EQUALS, false, equalToExpression, null,
1:             null);
0:     assert (result.getClass().getName()
1:         .equals("org.apache.carbondata.core.scan.filter.resolver.ConditionalFilterResolverImpl"));
1:   }
1: }
============================================================================