1:5804d75: /*
1:5804d75:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5804d75:  * contributor license agreements.  See the NOTICE file distributed with
1:5804d75:  * this work for additional information regarding copyright ownership.
1:5804d75:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5804d75:  * (the "License"); you may not use this file except in compliance with
1:5804d75:  * the License.  You may obtain a copy of the License at
1:5804d75:  *
1:5804d75:  *    http://www.apache.org/licenses/LICENSE-2.0
1:5804d75:  *
1:5804d75:  * Unless required by applicable law or agreed to in writing, software
1:5804d75:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5804d75:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5804d75:  * See the License for the specific language governing permissions and
1:5804d75:  * limitations under the License.
1:5804d75:  */
1:5804d75: package org.apache.carbondata.processing.loading.jsoninput;
1:5804d75: 
1:5804d75: import java.io.BufferedReader;
1:5804d75: import java.io.IOException;
1:5804d75: import java.io.InputStream;
1:5804d75: import java.io.InputStreamReader;
1:5804d75: import java.nio.charset.Charset;
1:5804d75: 
1:5804d75: /**
1:5804d75:  * Code ported from Hydra-Spark {package com.pluralsight.hydra.hadoop.io} package
1:5804d75:  * The JsonStreamReader handles byte-by-byte reading of a JSON stream, creating
1:5804d75:  * records based on a base 'identifier'. This identifier is given at object
1:5804d75:  * creation.
1:5804d75:  */
1:5804d75: public class JsonStreamReader extends BufferedReader {
1:5804d75: 
1:5804d75:   private StringBuilder bldr = new StringBuilder();
1:5804d75: 
1:5804d75:   private String identifier = null;
1:5804d75: 
1:5804d75:   private long bytesRead = 0;
1:5804d75: 
1:5804d75:   public JsonStreamReader(String identifier, InputStream strm) {
1:5804d75:     super(new InputStreamReader(strm, Charset.defaultCharset()));
1:5804d75:     this.identifier = identifier;
1:5804d75:   }
1:5804d75: 
1:5804d75:   /**
1:5804d75:    * Advances the input stream to the next JSON record, returned a String
1:5804d75:    * object.
1:5804d75:    *
1:5804d75:    * @return A string of JSON or null
1:5804d75:    * @throws IOException If an error occurs reading from the stream
1:5804d75:    */
1:5804d75:   public String getJsonRecord() throws IOException {
1:5804d75:     bldr.delete(0, bldr.length());
1:5804d75: 
1:5804d75:     boolean foundRecord = false;
1:5804d75: 
1:5804d75:     int c = 0, numBraces = 1;
1:5804d75:     while ((c = super.read()) != -1) {
1:5804d75:       ++bytesRead;
1:5804d75:       if (!foundRecord) {
1:5804d75:         bldr.append((char) c);
1:5804d75: 
1:5804d75:         if (bldr.toString().contains(identifier)) {
1:5804d75:           forwardToBrace();
1:5804d75:           foundRecord = true;
1:5804d75: 
1:5804d75:           bldr.delete(0, bldr.length());
1:5804d75:           bldr.append('{');
1:5804d75:         }
1:5804d75:       } else {
1:5804d75:         bldr.append((char) c);
1:5804d75: 
1:5804d75:         if (c == '{') {
1:5804d75:           ++numBraces;
1:5804d75:         } else if (c == '}') {
1:5804d75:           --numBraces;
1:5804d75:         }
1:5804d75: 
1:5804d75:         if (numBraces == 0) {
1:5804d75:           break;
1:5804d75:         }
1:5804d75:       }
1:5804d75:     }
1:5804d75: 
1:5804d75:     if (foundRecord) {
1:5804d75:       return bldr.toString();
1:5804d75:     } else {
1:5804d75:       return null;
1:5804d75:     }
1:5804d75:   }
1:5804d75: 
1:5804d75:   /**
1:5804d75:    * Gets the number of bytes read by the stream reader
1:5804d75:    *
1:5804d75:    * @return The number of bytes read
1:5804d75:    */
1:5804d75:   public long getBytesRead() {
1:5804d75:     return bytesRead;
1:5804d75:   }
1:5804d75: 
1:5804d75:   private void forwardToBrace() throws IOException {
1:5804d75:     while (super.read() != '{') {
1:5804d75:     }
1:5804d75:   }
1:5804d75: }
1:5804d75: 
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:5804d75
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.processing.loading.jsoninput;
1: 
1: import java.io.BufferedReader;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.nio.charset.Charset;
1: 
1: /**
1:  * Code ported from Hydra-Spark {package com.pluralsight.hydra.hadoop.io} package
1:  * The JsonStreamReader handles byte-by-byte reading of a JSON stream, creating
1:  * records based on a base 'identifier'. This identifier is given at object
1:  * creation.
1:  */
1: public class JsonStreamReader extends BufferedReader {
1: 
1:   private StringBuilder bldr = new StringBuilder();
1: 
1:   private String identifier = null;
1: 
1:   private long bytesRead = 0;
1: 
1:   public JsonStreamReader(String identifier, InputStream strm) {
1:     super(new InputStreamReader(strm, Charset.defaultCharset()));
1:     this.identifier = identifier;
1:   }
1: 
1:   /**
1:    * Advances the input stream to the next JSON record, returned a String
1:    * object.
1:    *
1:    * @return A string of JSON or null
1:    * @throws IOException If an error occurs reading from the stream
1:    */
1:   public String getJsonRecord() throws IOException {
1:     bldr.delete(0, bldr.length());
1: 
1:     boolean foundRecord = false;
1: 
1:     int c = 0, numBraces = 1;
1:     while ((c = super.read()) != -1) {
1:       ++bytesRead;
1:       if (!foundRecord) {
1:         bldr.append((char) c);
1: 
1:         if (bldr.toString().contains(identifier)) {
1:           forwardToBrace();
1:           foundRecord = true;
1: 
1:           bldr.delete(0, bldr.length());
1:           bldr.append('{');
1:         }
1:       } else {
1:         bldr.append((char) c);
1: 
1:         if (c == '{') {
1:           ++numBraces;
1:         } else if (c == '}') {
1:           --numBraces;
1:         }
1: 
1:         if (numBraces == 0) {
1:           break;
1:         }
1:       }
1:     }
1: 
1:     if (foundRecord) {
1:       return bldr.toString();
1:     } else {
1:       return null;
1:     }
1:   }
1: 
1:   /**
1:    * Gets the number of bytes read by the stream reader
1:    *
1:    * @return The number of bytes read
1:    */
1:   public long getBytesRead() {
1:     return bytesRead;
1:   }
1: 
1:   private void forwardToBrace() throws IOException {
1:     while (super.read() != '{') {
1:     }
1:   }
1: }
1: 
============================================================================