1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
3:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
17:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.common.logging.impl;
1:cd6a4ff: 
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: import java.net.InetAddress;
1:cd6a4ff: import java.net.UnknownHostException;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.common.logging.LogService;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.hadoop.security.UserGroupInformation;
1:cd6a4ff: import org.apache.log4j.Logger;
1:cd6a4ff: import org.apache.log4j.MDC;
1:cd6a4ff: 
3:cd6a4ff: /**
1:cd6a4ff:  * Default Implementation of the <code>LogService</code>
1:cd6a4ff:  */
1:cd6a4ff: public final class StandardLogService implements LogService {
1:cd6a4ff: 
1:cd6a4ff:   private static final String PARTITION_ID = "[partitionID:";
1:cd6a4ff:   private Logger logger;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Constructor.
1:cd6a4ff:    *
1:cd6a4ff:    * @param clazzName for which the Logging is required
1:cd6a4ff:    */
1:cd6a4ff:   public StandardLogService(String clazzName) {
1:cd6a4ff:     logger = Logger.getLogger(clazzName);
9:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public StandardLogService() {
1:cd6a4ff:     this("Carbon");
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public static String getPartitionID(String tableName) {
1:cd6a4ff:     return tableName.substring(tableName.lastIndexOf('_') + 1, tableName.length());
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public static void setThreadName(String partitionID, String queryID) {
1:83f1cee:     StringBuilder b = new StringBuilder(PARTITION_ID);
1:cd6a4ff:     b.append(partitionID);
1:cd6a4ff:     if (null != queryID) {
1:cd6a4ff:       b.append(";queryID:");
1:cd6a4ff:       b.append(queryID);
1:cd6a4ff:     }
1:cd6a4ff:     b.append("]");
1:cd6a4ff:     Thread.currentThread().setName(getThreadName() + b.toString());
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private static String getThreadName() {
1:cd6a4ff:     String name = Thread.currentThread().getName();
1:cd6a4ff:     int index = name.indexOf(PARTITION_ID);
1:cd6a4ff:     if (index > -1) {
1:cd6a4ff:       name = name.substring(0, index);
1:cd6a4ff:     } else {
1:cd6a4ff:       name = '[' + name + ']';
1:cd6a4ff:     }
1:cd6a4ff:     return name.trim();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public boolean isDebugEnabled() {
1:cd6a4ff:     return logger.isDebugEnabled();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public boolean isWarnEnabled() {
1:cd6a4ff:     return logger.isEnabledFor(org.apache.log4j.Level.WARN);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void debug(String message) {
1:cd6a4ff:     if (logger.isDebugEnabled()) {
1:cd6a4ff:       logMessage(Level.DEBUG, null, message);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void error(String message) {
1:cd6a4ff:     logMessage(Level.ERROR, null, message);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void error(Throwable throwable, String message) {
1:cd6a4ff:     logMessage(Level.ERROR, throwable, message);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void error(Throwable throwable) {
1:cd6a4ff:     logMessage(Level.ERROR, throwable, "");
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void info(String message) {
1:cd6a4ff:     if (logger.isInfoEnabled()) {
1:cd6a4ff:       logMessage(Level.INFO, null, message);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Utility Method to log the the Message.
1:cd6a4ff:    */
1:cd6a4ff:   private void logMessage(Level logLevel, Throwable throwable, String message) {
1:85dd152:     try {
1:85dd152:       //Append the partition id and query id if exist
1:85dd152:       StringBuilder buff = new StringBuilder(Thread.currentThread().getName());
1:85dd152:       buff.append(" ");
1:85dd152:       buff.append(message);
1:85dd152:       message = buff.toString();
1:85dd152:       if (Level.ERROR.toString().equalsIgnoreCase(logLevel.toString())) {
1:85dd152:         logErrorMessage(throwable, message);
1:85dd152:       } else if (Level.DEBUG.toString().equalsIgnoreCase(logLevel.toString())) {
1:85dd152:         logDebugMessage(throwable, message);
1:85dd152:       } else if (Level.INFO.toString().equalsIgnoreCase(logLevel.toString())) {
1:85dd152:         logInfoMessage(throwable, message);
1:85dd152:       } else if (Level.WARN.toString().equalsIgnoreCase(logLevel.toString())) {
1:85dd152:         logWarnMessage(throwable, message);
1:85dd152:       } else if (Level.AUDIT.toString().equalsIgnoreCase(logLevel.toString())) {
1:85dd152:         audit(message);
1:85dd152:       } else if (Level.STATISTICS == logLevel) {
1:85dd152:         statistic(message);
1:cd6a4ff:       }
1:85dd152: 
1:85dd152:     } catch (Throwable t) {
1:85dd152:       logger.error(t);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:85dd152: 
1:cd6a4ff:   private void logErrorMessage(Throwable throwable, String message) {
1:cd6a4ff: 
1:cd6a4ff:     if (null == throwable) {
1:cd6a4ff:       logger.error(message);
1:cd6a4ff:     } else {
1:cd6a4ff:       logger.error(message, throwable);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private void logInfoMessage(Throwable throwable, String message) {
1:cd6a4ff: 
1:cd6a4ff:     if (null == throwable) {
1:cd6a4ff:       logger.info(message);
1:cd6a4ff:     } else {
1:cd6a4ff:       logger.info(message, throwable);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private void logDebugMessage(Throwable throwable, String message) {
1:cd6a4ff: 
1:cd6a4ff:     if (null == throwable) {
1:cd6a4ff:       logger.debug(message);
1:cd6a4ff:     } else {
1:cd6a4ff:       logger.debug(message, throwable);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private void logWarnMessage(Throwable throwable, String message) {
1:cd6a4ff: 
1:cd6a4ff:     if (null == throwable) {
1:cd6a4ff:       logger.warn(message);
1:cd6a4ff:     } else {
1:cd6a4ff:       logger.warn(message, throwable);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public boolean isInfoEnabled() {
1:cd6a4ff:     return logger.isInfoEnabled();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void warn(String message) {
1:cd6a4ff:     if (isWarnEnabled()) {
1:cd6a4ff:       logMessage(Level.WARN, null, message);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void setEventProperties(String propertyName, String propertyValue) {
1:cd6a4ff:     MDC.put(propertyName, propertyValue);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * log audit log
1:cd6a4ff:    *
1:cd6a4ff:    * @param msg audit log message
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void audit(String msg) {
1:2d01f59:     String hostName;
1:2d01f59:     String username;
1:85dd152:     try {
1:cd6a4ff:       hostName = InetAddress.getLocalHost().getHostName();
1:cd6a4ff:     } catch (UnknownHostException e) {
1:cd6a4ff:       hostName = "localhost";
1:cd6a4ff:     }
3:cd6a4ff:     try {
1:cd6a4ff:       username = UserGroupInformation.getCurrentUser().getShortUserName();
1:cd6a4ff:     } catch (IOException e) {
1:cd6a4ff:       username = "unknown";
1:cd6a4ff:     }
1:2d01f59:     String threadid = Thread.currentThread().getId() + "";
1:cd6a4ff:     logger.log(AuditLevel.AUDIT,
1:cd6a4ff:         "[" + hostName + "]" + "[" + username + "]" + "[Thread-" + threadid + "]" + msg);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public void statistic(String message) {
1:cd6a4ff:     logger.log(StatisticLevel.STATISTIC, message);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Specifies the logging level.
1:cd6a4ff:    */
1:cd6a4ff:   enum Level {
1:cd6a4ff: 
1:cd6a4ff:     NONE(0),
1:cd6a4ff:     DEBUG(1),
1:cd6a4ff:     INFO(2),
1:cd6a4ff:     STATISTICS(3),
1:cd6a4ff:     ERROR(4),
1:cd6a4ff:     AUDIT(5),
1:cd6a4ff:     WARN(6);
1:cd6a4ff: 
1:cd6a4ff:     /**
1:cd6a4ff:      * Constructor.
1:cd6a4ff:      *
1:cd6a4ff:      * @param level
1:cd6a4ff:      */
1:cd6a4ff:     Level(final int level) {
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:jackylk
-------------------------------------------------------------------------------
commit:2d01f59
/////////////////////////////////////////////////////////////////////////
1:     String hostName;
1:     String username;
1:     String threadid = Thread.currentThread().getId() + "";
commit:85dd152
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       //Append the partition id and query id if exist
1:       StringBuilder buff = new StringBuilder(Thread.currentThread().getName());
1:       buff.append(" ");
1:       buff.append(message);
1:       message = buff.toString();
1:       if (Level.ERROR.toString().equalsIgnoreCase(logLevel.toString())) {
1:         logErrorMessage(throwable, message);
1:       } else if (Level.DEBUG.toString().equalsIgnoreCase(logLevel.toString())) {
1:         logDebugMessage(throwable, message);
1:       } else if (Level.INFO.toString().equalsIgnoreCase(logLevel.toString())) {
1:         logInfoMessage(throwable, message);
1:       } else if (Level.WARN.toString().equalsIgnoreCase(logLevel.toString())) {
1:         logWarnMessage(throwable, message);
1:       } else if (Level.AUDIT.toString().equalsIgnoreCase(logLevel.toString())) {
1:         audit(message);
1:       } else if (Level.STATISTICS == logLevel) {
1:         statistic(message);
1: 
1:     } catch (Throwable t) {
1:       logger.error(t);
commit:2d01f59
/////////////////////////////////////////////////////////////////////////
0:     String hostName;
0:     String username;
0:     String threadid = Thread.currentThread().getId() + "";
commit:85dd152
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     try {
0:       //Append the partition id and query id if exist
0:       StringBuilder buff = new StringBuilder(Thread.currentThread().getName());
0:       buff.append(" ");
0:       buff.append(message);
0:       message = buff.toString();
0:       if (Level.ERROR.toString().equalsIgnoreCase(logLevel.toString())) {
0:         logErrorMessage(throwable, message);
0:       } else if (Level.DEBUG.toString().equalsIgnoreCase(logLevel.toString())) {
0:         logDebugMessage(throwable, message);
0:       } else if (Level.INFO.toString().equalsIgnoreCase(logLevel.toString())) {
0:         logInfoMessage(throwable, message);
0:       } else if (Level.WARN.toString().equalsIgnoreCase(logLevel.toString())) {
0:         logWarnMessage(throwable, message);
0:       } else if (Level.AUDIT.toString().equalsIgnoreCase(logLevel.toString())) {
0:         audit(message);
0:       } else if (Level.STATISTICS == logLevel) {
0:         statistic(message);
1: 
0:     } catch (Throwable t) {
0:       logger.error(t);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:vinodkc
-------------------------------------------------------------------------------
commit:83f1cee
/////////////////////////////////////////////////////////////////////////
1:     StringBuilder b = new StringBuilder(PARTITION_ID);
/////////////////////////////////////////////////////////////////////////
0:         StringBuilder buff = new StringBuilder(Thread.currentThread().getName());
commit:83f1cee
/////////////////////////////////////////////////////////////////////////
0:     StringBuilder b = new StringBuilder(PARTITION_ID);
/////////////////////////////////////////////////////////////////////////
0:         StringBuilder buff = new StringBuilder(Thread.currentThread().getName());
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.common.logging.impl;
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
0: import java.util.Properties;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: 
1: import org.apache.hadoop.security.UserGroupInformation;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.MDC;
1: 
1: /**
1:  * Default Implementation of the <code>LogService</code>
1:  */
1: public final class StandardLogService implements LogService {
1: 
1:   private static final String PARTITION_ID = "[partitionID:";
0:   private static final String CARBON_AUDIT_LOG_PATH = "carbon.auditlog.file.path";
0:   private static final String AUDIT_LOG_DEFAULT_PATH = "logs/CarbonAudit.log";
0:   private static final String CARBON_AUDIT_LOG_ROLLING_UP_SIZE = "carbon.auditlog.max.file.size";
0:   private static final String AUDIT_LOG_DEFAULT_ROLLING_UP_SIZE = "10MB";
0:   private static final String CARBON_AUDIT_LOG_MAX_BACKUP = "carbon.auditlog.max.backup.files";
0:   private static final String AUDIT_LOG_DEFAULT_MAX_BACKUP = "10";
0:   private static final String CARBON_AUDIT_LOG_LEVEL = "carbon.logging.level";
0:   private static final String AUDIT_LOG_DEFAULT_LEVEL = "INFO";
0:   private static boolean doLog = true;
1:   private Logger logger;
1: 
1:   /**
1:    * Constructor.
1:    *
1:    * @param clazzName for which the Logging is required
1:    */
1:   public StandardLogService(String clazzName) {
0:     String auditLogPath = AUDIT_LOG_DEFAULT_PATH;
0:     String rollupSize = AUDIT_LOG_DEFAULT_ROLLING_UP_SIZE;
0:     String maxBackup = AUDIT_LOG_DEFAULT_MAX_BACKUP;
0:     String logLevel = AUDIT_LOG_DEFAULT_LEVEL;
1: 
0:     Properties props = new Properties();
0:     Properties carbonProps = FileUtil.getCarbonProperties();
1: 
0:     if (null != carbonProps) {
0:       if (null != carbonProps.getProperty(CARBON_AUDIT_LOG_PATH)) {
0:         auditLogPath = carbonProps.getProperty(CARBON_AUDIT_LOG_PATH);
1:       }
1: 
0:       if (null != carbonProps.getProperty(CARBON_AUDIT_LOG_ROLLING_UP_SIZE)) {
0:         rollupSize = carbonProps.getProperty(CARBON_AUDIT_LOG_ROLLING_UP_SIZE);
1:       }
1: 
0:       if (null != carbonProps.getProperty(CARBON_AUDIT_LOG_MAX_BACKUP)) {
0:         maxBackup = carbonProps.getProperty(CARBON_AUDIT_LOG_MAX_BACKUP);
1:       }
1: 
0:       if (null != carbonProps.getProperty(CARBON_AUDIT_LOG_LEVEL)) {
0:         logLevel = carbonProps.getProperty(CARBON_AUDIT_LOG_LEVEL);
1:       }
1:     }
1: 
0:     props.setProperty("log4j.rootLogger", logLevel + ",stdout,AUDL");
1: 
0:     props.setProperty("log4j.appender.stdout", "org.apache.log4j.ConsoleAppender");
0:     props.setProperty("log4j.appender.stdout.layout.ConversionPattern", "%d %-5p [%c] %m%n");
0:     props.setProperty("log4j.appender.stdout.layout", "org.apache.log4j.PatternLayout");
0:     props.setProperty("log4j.appender.AUDL",
0:         "AuditExtendedRollingFileAppender");
1: 
0:     props.setProperty("log4j.appender.AUDL.File", auditLogPath);
0:     props.setProperty("log4j.appender.AUDL.threshold",
0:         "AUDIT#AuditLevel");
0:     props.setProperty("log4j.appender.AUDL.layout.ConversionPattern",
0:         "%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n");
0:     props.setProperty("log4j.appender.AUDL.layout", "org.apache.log4j.PatternLayout");
0:     props.setProperty("log4j.appender.AUDL.MaxFileSize", rollupSize);
0:     props.setProperty("log4j.appender.AUDL.MaxBackupIndex", maxBackup);
1: 
0:     props.setProperty("log4j.logger.com.huawei", logLevel + ",stdout");
0:     props.setProperty("log4j.logger.com.huawei", logLevel + ",AUDL");
1: 
1:     logger = Logger.getLogger(clazzName);
1: 
1:   }
1: 
1:   public StandardLogService() {
1:     this("Carbon");
1:   }
1: 
1:   /**
0:    * returns is DO Log
1:    *
0:    * @return the doLog
1:    */
0:   public static boolean isDoLog() {
0:     return doLog;
1:   }
1: 
1:   /**
0:    * set Do Log
1:    *
0:    * @param doLog the doLog to set
1:    */
0:   public static void setDoLog(boolean doLog) {
0:     StandardLogService.doLog = doLog;
1:   }
1: 
1:   public static String getPartitionID(String tableName) {
1:     return tableName.substring(tableName.lastIndexOf('_') + 1, tableName.length());
1:   }
1: 
1:   public static void setThreadName(String partitionID, String queryID) {
0:     StringBuffer b = new StringBuffer(PARTITION_ID);
1:     b.append(partitionID);
1:     if (null != queryID) {
1:       b.append(";queryID:");
1:       b.append(queryID);
1:     }
1:     b.append("]");
1:     Thread.currentThread().setName(getThreadName() + b.toString());
1:   }
1: 
1:   private static String getThreadName() {
1:     String name = Thread.currentThread().getName();
1:     int index = name.indexOf(PARTITION_ID);
1:     if (index > -1) {
1:       name = name.substring(0, index);
1:     } else {
1:       name = '[' + name + ']';
1:     }
1:     return name.trim();
1:   }
1: 
1:   public boolean isDebugEnabled() {
1:     return logger.isDebugEnabled();
1:   }
1: 
1:   public boolean isWarnEnabled() {
1:     return logger.isEnabledFor(org.apache.log4j.Level.WARN);
1:   }
1: 
1:   public void debug(String message) {
1:     if (logger.isDebugEnabled()) {
1:       logMessage(Level.DEBUG, null, message);
1:     }
1:   }
1: 
1:   public void error(String message) {
1:     logMessage(Level.ERROR, null, message);
1:   }
1: 
1:   public void error(Throwable throwable, String message) {
1:     logMessage(Level.ERROR, throwable, message);
1:   }
1: 
1:   public void error(Throwable throwable) {
1:     logMessage(Level.ERROR, throwable, "");
1:   }
1: 
1:   public void info(String message) {
1:     if (logger.isInfoEnabled()) {
1:       logMessage(Level.INFO, null, message);
1:     }
1:   }
1: 
1:   /**
1:    * Utility Method to log the the Message.
1:    */
1:   private void logMessage(Level logLevel, Throwable throwable, String message) {
0:     if (StandardLogService.doLog) {
1:       try {
0:         //Append the partition id and query id if exist
0:         StringBuffer buff = new StringBuffer(Thread.currentThread().getName());
0:         buff.append(" ");
0:         buff.append(message);
0:         message = buff.toString();
0:         if (Level.ERROR.toString().equalsIgnoreCase(logLevel.toString())) {
0:           logErrorMessage(throwable, message);
0:         } else if (Level.DEBUG.toString().equalsIgnoreCase(logLevel.toString())) {
0:           logDebugMessage(throwable, message);
0:         } else if (Level.INFO.toString().equalsIgnoreCase(logLevel.toString())) {
0:           logInfoMessage(throwable, message);
0:         } else if (Level.WARN.toString().equalsIgnoreCase(logLevel.toString())) {
0:           logWarnMessage(throwable, message);
0:         } else if (Level.AUDIT.toString().equalsIgnoreCase(logLevel.toString())) {
0:           audit(message);
0:         } else if (Level.STATISTICS == logLevel) {
0:           statistic(message);
1:         }
1: 
0:       } catch (Throwable t) {
0:         logger.error(t);
1:       }
1:     }
1:   }
1: 
1:   private void logErrorMessage(Throwable throwable, String message) {
1: 
1:     if (null == throwable) {
1:       logger.error(message);
1:     } else {
1:       logger.error(message, throwable);
1:     }
1:   }
1: 
1:   private void logInfoMessage(Throwable throwable, String message) {
1: 
1:     if (null == throwable) {
1:       logger.info(message);
1:     } else {
1:       logger.info(message, throwable);
1:     }
1:   }
1: 
1:   private void logDebugMessage(Throwable throwable, String message) {
1: 
1:     if (null == throwable) {
1:       logger.debug(message);
1:     } else {
1:       logger.debug(message, throwable);
1:     }
1:   }
1: 
1:   private void logWarnMessage(Throwable throwable, String message) {
1: 
1:     if (null == throwable) {
1:       logger.warn(message);
1:     } else {
1:       logger.warn(message, throwable);
1:     }
1:   }
1: 
1:   public boolean isInfoEnabled() {
1:     return logger.isInfoEnabled();
1:   }
1: 
1:   public void warn(String message) {
1:     if (isWarnEnabled()) {
1:       logMessage(Level.WARN, null, message);
1:     }
1:   }
1: 
1:   public void setEventProperties(String propertyName, String propertyValue) {
1:     MDC.put(propertyName, propertyValue);
1:   }
1: 
1:   /**
1:    * log audit log
1:    *
1:    * @param msg audit log message
1:    */
1:   @Override public void audit(String msg) {
0:     String hostName = "";
1: 
1:     try {
1:       hostName = InetAddress.getLocalHost().getHostName();
1:     } catch (UnknownHostException e) {
1:       hostName = "localhost";
1:     }
0:     String username = "unknown";
0:     String threadid = "unknown";
1:     try {
0:       threadid = Thread.currentThread().getId() + "";
1:       username = UserGroupInformation.getCurrentUser().getShortUserName();
1:     } catch (IOException e) {
1:       username = "unknown";
1:     }
1:     logger.log(AuditLevel.AUDIT,
1:         "[" + hostName + "]" + "[" + username + "]" + "[Thread-" + threadid + "]" + msg);
1:   }
1: 
1:   @Override public void statistic(String message) {
1:     logger.log(StatisticLevel.STATISTIC, message);
1:   }
1: 
1:   /**
1:    * Specifies the logging level.
1:    */
1:   enum Level {
1: 
1:     NONE(0),
1:     DEBUG(1),
1:     INFO(2),
1:     STATISTICS(3),
1:     ERROR(4),
1:     AUDIT(5),
1:     WARN(6);
1: 
1:     /**
1:      * Constructor.
1:      *
1:      * @param level
1:      */
1:     Level(final int level) {
1:     }
1:   }
1: }
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.common.logging.impl;
0: 
0: import java.io.IOException;
0: import java.net.InetAddress;
0: import java.net.UnknownHostException;
0: import java.util.Properties;
0: 
0: import org.apache.carbondata.common.logging.LogService;
0: 
0: import org.apache.hadoop.security.UserGroupInformation;
0: import org.apache.log4j.Logger;
0: import org.apache.log4j.MDC;
0: 
0: /**
0:  * Default Implementation of the <code>LogService</code>
0:  */
0: public final class StandardLogService implements LogService {
0: 
0:   private static final String PARTITION_ID = "[partitionID:";
0:   private static final String CARBON_AUDIT_LOG_PATH = "carbon.auditlog.file.path";
0:   private static final String AUDIT_LOG_DEFAULT_PATH = "logs/CarbonAudit.log";
0:   private static final String CARBON_AUDIT_LOG_ROLLING_UP_SIZE = "carbon.auditlog.max.file.size";
0:   private static final String AUDIT_LOG_DEFAULT_ROLLING_UP_SIZE = "10MB";
0:   private static final String CARBON_AUDIT_LOG_MAX_BACKUP = "carbon.auditlog.max.backup.files";
0:   private static final String AUDIT_LOG_DEFAULT_MAX_BACKUP = "10";
0:   private static final String CARBON_AUDIT_LOG_LEVEL = "carbon.logging.level";
0:   private static final String AUDIT_LOG_DEFAULT_LEVEL = "INFO";
0:   private static boolean doLog = true;
0:   private Logger logger;
0: 
0:   /**
0:    * Constructor.
0:    *
0:    * @param clazzName for which the Logging is required
0:    */
0:   public StandardLogService(String clazzName) {
0:     String auditLogPath = AUDIT_LOG_DEFAULT_PATH;
0:     String rollupSize = AUDIT_LOG_DEFAULT_ROLLING_UP_SIZE;
0:     String maxBackup = AUDIT_LOG_DEFAULT_MAX_BACKUP;
0:     String logLevel = AUDIT_LOG_DEFAULT_LEVEL;
0: 
0:     Properties props = new Properties();
0:     Properties carbonProps = FileUtil.getCarbonProperties();
0: 
0:     if (null != carbonProps) {
0:       if (null != carbonProps.getProperty(CARBON_AUDIT_LOG_PATH)) {
0:         auditLogPath = carbonProps.getProperty(CARBON_AUDIT_LOG_PATH);
0:       }
0: 
0:       if (null != carbonProps.getProperty(CARBON_AUDIT_LOG_ROLLING_UP_SIZE)) {
0:         rollupSize = carbonProps.getProperty(CARBON_AUDIT_LOG_ROLLING_UP_SIZE);
0:       }
0: 
0:       if (null != carbonProps.getProperty(CARBON_AUDIT_LOG_MAX_BACKUP)) {
0:         maxBackup = carbonProps.getProperty(CARBON_AUDIT_LOG_MAX_BACKUP);
0:       }
0: 
0:       if (null != carbonProps.getProperty(CARBON_AUDIT_LOG_LEVEL)) {
0:         logLevel = carbonProps.getProperty(CARBON_AUDIT_LOG_LEVEL);
0:       }
0:     }
0: 
0:     props.setProperty("log4j.rootLogger", logLevel + ",stdout,AUDL");
0: 
0:     props.setProperty("log4j.appender.stdout", "org.apache.log4j.ConsoleAppender");
0:     props.setProperty("log4j.appender.stdout.layout.ConversionPattern", "%d %-5p [%c] %m%n");
0:     props.setProperty("log4j.appender.stdout.layout", "org.apache.log4j.PatternLayout");
0:     props.setProperty("log4j.appender.AUDL",
0:         "AuditExtendedRollingFileAppender");
0: 
0:     props.setProperty("log4j.appender.AUDL.File", auditLogPath);
0:     props.setProperty("log4j.appender.AUDL.threshold",
0:         "AUDIT#AuditLevel");
0:     props.setProperty("log4j.appender.AUDL.layout.ConversionPattern",
0:         "%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n");
0:     props.setProperty("log4j.appender.AUDL.layout", "org.apache.log4j.PatternLayout");
0:     props.setProperty("log4j.appender.AUDL.MaxFileSize", rollupSize);
0:     props.setProperty("log4j.appender.AUDL.MaxBackupIndex", maxBackup);
0: 
0:     props.setProperty("log4j.logger.com.huawei", logLevel + ",stdout");
0:     props.setProperty("log4j.logger.com.huawei", logLevel + ",AUDL");
0: 
0:     logger = Logger.getLogger(clazzName);
0: 
0:   }
0: 
0:   public StandardLogService() {
0:     this("Carbon");
0:   }
0: 
0:   /**
0:    * returns is DO Log
0:    *
0:    * @return the doLog
0:    */
0:   public static boolean isDoLog() {
0:     return doLog;
0:   }
0: 
0:   /**
0:    * set Do Log
0:    *
0:    * @param doLog the doLog to set
0:    */
0:   public static void setDoLog(boolean doLog) {
0:     StandardLogService.doLog = doLog;
0:   }
0: 
0:   public static String getPartitionID(String tableName) {
0:     return tableName.substring(tableName.lastIndexOf('_') + 1, tableName.length());
0:   }
0: 
0:   public static void setThreadName(String partitionID, String queryID) {
0:     StringBuffer b = new StringBuffer(PARTITION_ID);
0:     b.append(partitionID);
0:     if (null != queryID) {
0:       b.append(";queryID:");
0:       b.append(queryID);
0:     }
0:     b.append("]");
0:     Thread.currentThread().setName(getThreadName() + b.toString());
0:   }
0: 
0:   private static String getThreadName() {
0:     String name = Thread.currentThread().getName();
0:     int index = name.indexOf(PARTITION_ID);
0:     if (index > -1) {
0:       name = name.substring(0, index);
0:     } else {
0:       name = '[' + name + ']';
0:     }
0:     return name.trim();
0:   }
0: 
0:   public boolean isDebugEnabled() {
0:     return logger.isDebugEnabled();
0:   }
0: 
0:   public boolean isWarnEnabled() {
0:     return logger.isEnabledFor(org.apache.log4j.Level.WARN);
0:   }
0: 
0:   public void debug(String message) {
0:     if (logger.isDebugEnabled()) {
0:       logMessage(Level.DEBUG, null, message);
0:     }
0:   }
0: 
0:   public void error(String message) {
0:     logMessage(Level.ERROR, null, message);
0:   }
0: 
0:   public void error(Throwable throwable, String message) {
0:     logMessage(Level.ERROR, throwable, message);
0:   }
0: 
0:   public void error(Throwable throwable) {
0:     logMessage(Level.ERROR, throwable, "");
0:   }
0: 
0:   public void info(String message) {
0:     if (logger.isInfoEnabled()) {
0:       logMessage(Level.INFO, null, message);
0:     }
0:   }
0: 
0:   /**
0:    * Utility Method to log the the Message.
0:    */
0:   private void logMessage(Level logLevel, Throwable throwable, String message) {
0:     if (StandardLogService.doLog) {
0:       try {
0:         //Append the partition id and query id if exist
0:         StringBuffer buff = new StringBuffer(Thread.currentThread().getName());
0:         buff.append(" ");
0:         buff.append(message);
0:         message = buff.toString();
0:         if (Level.ERROR.toString().equalsIgnoreCase(logLevel.toString())) {
0:           logErrorMessage(throwable, message);
0:         } else if (Level.DEBUG.toString().equalsIgnoreCase(logLevel.toString())) {
0:           logDebugMessage(throwable, message);
0:         } else if (Level.INFO.toString().equalsIgnoreCase(logLevel.toString())) {
0:           logInfoMessage(throwable, message);
0:         } else if (Level.WARN.toString().equalsIgnoreCase(logLevel.toString())) {
0:           logWarnMessage(throwable, message);
0:         } else if (Level.AUDIT.toString().equalsIgnoreCase(logLevel.toString())) {
0:           audit(message);
0:         } else if (Level.STATISTICS == logLevel) {
0:           statistic(message);
0:         }
0: 
0:       } catch (Throwable t) {
0:         logger.error(t);
0:       }
0:     }
0:   }
0: 
0:   private void logErrorMessage(Throwable throwable, String message) {
0: 
0:     if (null == throwable) {
0:       logger.error(message);
0:     } else {
0:       logger.error(message, throwable);
0:     }
0:   }
0: 
0:   private void logInfoMessage(Throwable throwable, String message) {
0: 
0:     if (null == throwable) {
0:       logger.info(message);
0:     } else {
0:       logger.info(message, throwable);
0:     }
0:   }
0: 
0:   private void logDebugMessage(Throwable throwable, String message) {
0: 
0:     if (null == throwable) {
0:       logger.debug(message);
0:     } else {
0:       logger.debug(message, throwable);
0:     }
0:   }
0: 
0:   private void logWarnMessage(Throwable throwable, String message) {
0: 
0:     if (null == throwable) {
0:       logger.warn(message);
0:     } else {
0:       logger.warn(message, throwable);
0:     }
0:   }
0: 
0:   public boolean isInfoEnabled() {
0:     return logger.isInfoEnabled();
0:   }
0: 
0:   public void warn(String message) {
0:     if (isWarnEnabled()) {
0:       logMessage(Level.WARN, null, message);
0:     }
0:   }
0: 
0:   public void setEventProperties(String propertyName, String propertyValue) {
0:     MDC.put(propertyName, propertyValue);
0:   }
0: 
0:   /**
0:    * log audit log
0:    *
0:    * @param msg audit log message
0:    */
0:   @Override public void audit(String msg) {
0:     String hostName = "";
0: 
0:     try {
0:       hostName = InetAddress.getLocalHost().getHostName();
0:     } catch (UnknownHostException e) {
0:       hostName = "localhost";
0:     }
0:     String username = "unknown";
0:     String threadid = "unknown";
0:     try {
0:       threadid = Thread.currentThread().getId() + "";
0:       username = UserGroupInformation.getCurrentUser().getShortUserName();
0:     } catch (IOException e) {
0:       username = "unknown";
0:     }
0:     logger.log(AuditLevel.AUDIT,
0:         "[" + hostName + "]" + "[" + username + "]" + "[Thread-" + threadid + "]" + msg);
0:   }
0: 
0:   @Override public void statistic(String message) {
0:     logger.log(StatisticLevel.STATISTIC, message);
0:   }
0: 
0:   /**
0:    * Specifies the logging level.
0:    */
0:   enum Level {
0: 
0:     NONE(0),
0:     DEBUG(1),
0:     INFO(2),
0:     STATISTICS(3),
0:     ERROR(4),
0:     AUDIT(5),
0:     WARN(6);
0: 
0:     /**
0:      * Constructor.
0:      *
0:      * @param level
0:      */
0:     Level(final int level) {
0:     }
0:   }
0: }
============================================================================