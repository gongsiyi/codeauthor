1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
2:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
4:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.keygenerator;
1:cd6a4ff: 
1:cd6a4ff: import java.io.Serializable;
1:cd6a4ff: import java.util.Comparator;
1:cd6a4ff: 
3:cd6a4ff: /**
1:cd6a4ff:  * It generates the key by using multiple keys(typically multiple dimension keys
1:cd6a4ff:  * are combined to form a single key). And it can return the individual
1:cd6a4ff:  * key(dimensional key) out of combined key.
1:cd6a4ff:  */
1:cd6a4ff: public interface KeyGenerator extends Serializable, Comparator<byte[]> {
1:cd6a4ff:   /**
1:cd6a4ff:    * It generates the single key aka byte array from multiple keys.
1:cd6a4ff:    *
1:cd6a4ff:    * @param keys
1:cd6a4ff:    * @return byte array
1:cd6a4ff:    * @throws KeyGenException
1:cd6a4ff:    */
1:cd6a4ff:   byte[] generateKey(long[] keys) throws KeyGenException;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * It generates the single key aka byte array from multiple keys.
1:cd6a4ff:    *
1:cd6a4ff:    * @param keys
2:cd6a4ff:    * @return
1:cd6a4ff:    * @throws KeyGenException
1:cd6a4ff:    */
1:cd6a4ff:   byte[] generateKey(int[] keys) throws KeyGenException;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * It gets array of keys out of single key aka byte array
1:cd6a4ff:    *
2:cd6a4ff:    * @param key
1:cd6a4ff:    * @return array of keys.
1:cd6a4ff:    */
1:cd6a4ff:   long[] getKeyArray(byte[] key);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * It gets array of keys out of single key aka byte array
1:cd6a4ff:    *
1:cd6a4ff:    * @param key
1:cd6a4ff:    * @param offset
1:cd6a4ff:    * @return array of keys.
1:cd6a4ff:    */
1:cd6a4ff:   long[] getKeyArray(byte[] key, int offset);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * It gets array of keys out of single key aka byte array
1:cd6a4ff:    *
1:cd6a4ff:    * @param key
1:cd6a4ff:    * @param maskedByteRanges
1:cd6a4ff:    * @return array of keys
1:cd6a4ff:    */
1:cd6a4ff:   long[] getKeyArray(byte[] key, int[] maskedByteRanges);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * It gets the key in the specified index from the single key aka byte array
1:cd6a4ff:    *
1:cd6a4ff:    * @param key
1:cd6a4ff:    * @param index of key.
1:cd6a4ff:    * @return key
1:cd6a4ff:    */
1:cd6a4ff:   long getKey(byte[] key, int index);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Gives the key size in number of bytes.
1:cd6a4ff:    */
1:cd6a4ff:   int getKeySizeInBytes();
1:cd6a4ff: 
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * returns key bytes offset
1:cd6a4ff:    *
2:cd6a4ff:    * @param index
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   int[] getKeyByteOffsets(int index);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * returns the dimension count
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   int getDimCount();
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:dhatchayani
-------------------------------------------------------------------------------
commit:d25fee2
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.keygenerator;
1: 
1: import java.io.Serializable;
1: import java.util.Comparator;
1: 
1: /**
1:  * It generates the key by using multiple keys(typically multiple dimension keys
1:  * are combined to form a single key). And it can return the individual
1:  * key(dimensional key) out of combined key.
1:  */
1: public interface KeyGenerator extends Serializable, Comparator<byte[]> {
1:   /**
1:    * It generates the single key aka byte array from multiple keys.
1:    *
1:    * @param keys
1:    * @return byte array
1:    * @throws KeyGenException
1:    */
1:   byte[] generateKey(long[] keys) throws KeyGenException;
1: 
1:   /**
1:    * It generates the single key aka byte array from multiple keys.
1:    *
1:    * @param keys
1:    * @return
1:    * @throws KeyGenException
1:    */
1:   byte[] generateKey(int[] keys) throws KeyGenException;
1: 
1:   /**
1:    * It gets array of keys out of single key aka byte array
1:    *
1:    * @param key
1:    * @return array of keys.
1:    */
1:   long[] getKeyArray(byte[] key);
1: 
1:   /**
1:    * It gets array of keys out of single key aka byte array
1:    *
1:    * @param key
1:    * @param offset
1:    * @return array of keys.
1:    */
1:   long[] getKeyArray(byte[] key, int offset);
1: 
1:   /**
1:    * It gets array of keys out of single key aka byte array
1:    *
1:    * @param key
1:    * @param maskedByteRanges
1:    * @return array of keys
1:    */
1:   long[] getKeyArray(byte[] key, int[] maskedByteRanges);
1: 
1:   /**
1:    * It gets the key in the specified index from the single key aka byte array
1:    *
1:    * @param key
1:    * @param index of key.
1:    * @return key
1:    */
1:   long getKey(byte[] key, int index);
1: 
1:   /**
0:    * Set any extra properties if required.
1:    */
0:   void setProperty(Object key, Object value);
1: 
1:   /**
1:    * Gives the key size in number of bytes.
1:    */
1:   int getKeySizeInBytes();
1: 
1:   /**
0:    * It gets the specified index and size from the single key aka byte aray
1:    *
1:    * @param key
1:    * @param index
0:    * @param size
1:    * @return
1:    */
0:   long[] getSubKeyArray(byte[] key, int index, int size);
1: 
1:   /**
1:    * returns key bytes offset
1:    *
1:    * @param index
1:    * @return
1:    */
1:   int[] getKeyByteOffsets(int index);
1: 
0:   int compare(byte[] key1, int offset1, int length1, byte[] key2, int offset2, int length2);
1: 
1:   /**
1:    * returns the dimension count
1:    *
1:    * @return
1:    */
1:   int getDimCount();
1: 
0:   int getStartAndEndKeySizeWithOnlyPrimitives();
1: 
0:   void setStartAndEndKeySizeWithOnlyPrimitives(int startAndEndKeySizeWithPrimitives);
1: }
============================================================================