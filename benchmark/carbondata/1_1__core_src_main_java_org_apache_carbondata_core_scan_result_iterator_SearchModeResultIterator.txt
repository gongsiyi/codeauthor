1:638ed1f: /*
1:638ed1f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:638ed1f:  * contributor license agreements.  See the NOTICE file distributed with
1:638ed1f:  * this work for additional information regarding copyright ownership.
1:638ed1f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:638ed1f:  * (the "License"); you may not use this file except in compliance with
1:638ed1f:  * the License.  You may obtain a copy of the License at
1:638ed1f:  *
1:638ed1f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:638ed1f:  *
1:638ed1f:  * Unless required by applicable law or agreed to in writing, software
1:638ed1f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:638ed1f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:638ed1f:  * See the License for the specific language governing permissions and
1:638ed1f:  * limitations under the License.
1:638ed1f:  */
1:638ed1f: package org.apache.carbondata.core.scan.result.iterator;
12:638ed1f: 
1:638ed1f: import java.util.List;
1:638ed1f: import java.util.concurrent.ExecutorService;
1:638ed1f: 
1:638ed1f: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1:638ed1f: import org.apache.carbondata.core.scan.model.QueryModel;
1:2fc0ad3: import org.apache.carbondata.core.scan.result.RowBatch;
1:638ed1f: 
1:2fc0ad3: public class SearchModeResultIterator extends AbstractSearchModeResultIterator {
1:638ed1f: 
1:638ed1f:   private final Object lock = new Object();
1:638ed1f: 
1:638ed1f:   public SearchModeResultIterator(List<BlockExecutionInfo> infos, QueryModel queryModel,
1:2fc0ad3:                                   ExecutorService execService) {
1:638ed1f:     super(infos, queryModel, execService);
8:638ed1f:   }
1:638ed1f: 
4:638ed1f:   @Override
1:2fc0ad3:   public RowBatch next() {
1:2fc0ad3:     return getBatchResult();
1:638ed1f:   }
1:638ed1f: 
1:2fc0ad3:   private RowBatch getBatchResult() {
1:2fc0ad3:     RowBatch rowBatch = new RowBatch();
1:638ed1f:     synchronized (lock) {
1:638ed1f:       if (curBlockScan.hasNext()) {
1:2fc0ad3:         List<Object[]> collectedResult = curBlockScan.next(batchSize);
1:2fc0ad3:         while (collectedResult.size() < batchSize && hasNext()) {
1:2fc0ad3:           collectedResult.addAll(curBlockScan.next(batchSize - collectedResult.size()));
1:2fc0ad3:         }
1:2fc0ad3:         rowBatch.setRows(collectedResult);
1:638ed1f:       }
1:638ed1f:     }
1:2fc0ad3:     return rowBatch;
1:638ed1f:   }
1:638ed1f: }
============================================================================
author:Manhua
-------------------------------------------------------------------------------
commit:2fc0ad3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.result.RowBatch;
1: public class SearchModeResultIterator extends AbstractSearchModeResultIterator {
1:                                   ExecutorService execService) {
1:   public RowBatch next() {
1:     return getBatchResult();
1:   private RowBatch getBatchResult() {
1:     RowBatch rowBatch = new RowBatch();
1:         List<Object[]> collectedResult = curBlockScan.next(batchSize);
1:         while (collectedResult.size() < batchSize && hasNext()) {
1:           collectedResult.addAll(curBlockScan.next(batchSize - collectedResult.size()));
1:         }
1:         rowBatch.setRows(collectedResult);
1:     return rowBatch;
commit:638ed1f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.result.iterator;
1: 
0: import java.util.ArrayList;
1: import java.util.List;
0: import java.util.concurrent.Callable;
0: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Future;
1: 
0: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1: import org.apache.carbondata.core.scan.model.QueryModel;
0: import org.apache.carbondata.core.scan.processor.BlockScan;
0: import org.apache.carbondata.core.scan.result.vector.CarbonColumnarBatch;
0: import org.apache.carbondata.core.stats.QueryStatistic;
0: import org.apache.carbondata.core.stats.QueryStatisticsConstants;
0: import org.apache.carbondata.core.stats.QueryStatisticsModel;
0: import org.apache.carbondata.core.stats.QueryStatisticsRecorder;
1: 
0: public class SearchModeResultIterator extends AbstractDetailQueryResultIterator<Object> {
1: 
1:   private final Object lock = new Object();
1: 
0:   private FileFactory.FileType fileType;
0:   private List<Future<BlockScan>> taskSubmitList;
0:   private BlockScan curBlockScan;
0:   private int nextBlockScanIndex = 0;
1: 
1:   public SearchModeResultIterator(List<BlockExecutionInfo> infos, QueryModel queryModel,
0:       ExecutorService execService) {
1:     super(infos, queryModel, execService);
0:     this.fileType = FileFactory.getFileType(queryModel.getAbsoluteTableIdentifier().getTablePath());
0:     scanAll();
1:   }
1: 
0:   private void scanAll() {
0:     taskSubmitList = new ArrayList<>(blockExecutionInfos.size());
0:     for (final BlockExecutionInfo info: blockExecutionInfos) {
0:       taskSubmitList.add(execService.submit(new Callable<BlockScan>() {
1: 
1:         @Override
0:         public BlockScan call() throws Exception {
0:           BlockScan blockScan = new BlockScan(info, FileFactory.getFileHolder(fileType),
0:               buildQueryStatiticsModel(recorder));
0:           blockScan.scan();
0:           return blockScan;
1:         }
0:       }));
1:     }
1:   }
1: 
1:   @Override
0:   public boolean hasNext() {
0:     try {
0:       while ((curBlockScan == null || !curBlockScan.hasNext()) &&
0:               nextBlockScanIndex < taskSubmitList.size()) {
0:         curBlockScan = taskSubmitList.get(nextBlockScanIndex++).get();
1:       }
0:       return curBlockScan != null && curBlockScan.hasNext();
0:     } catch (InterruptedException | ExecutionException e) {
0:       throw new RuntimeException(e);
1:     }
1:   }
1: 
1:   @Override
0:   public Object next() {
0:     throw new UnsupportedOperationException("call processNextBatch instead");
1:   }
1: 
1:   @Override
0:   public void processNextBatch(CarbonColumnarBatch columnarBatch) {
1:     synchronized (lock) {
1:       if (curBlockScan.hasNext()) {
0:         curBlockScan.processNextBatch(columnarBatch);
1:       }
1:     }
1:   }
1: 
0:   private QueryStatisticsModel buildQueryStatiticsModel(QueryStatisticsRecorder recorder) {
0:     QueryStatisticsModel queryStatisticsModel = new QueryStatisticsModel();
0:     queryStatisticsModel.setRecorder(recorder);
0:     QueryStatistic queryStatisticTotalBlocklet = new QueryStatistic();
0:     queryStatisticsModel.getStatisticsTypeAndObjMap()
0:         .put(QueryStatisticsConstants.TOTAL_BLOCKLET_NUM, queryStatisticTotalBlocklet);
0:     queryStatisticsModel.getRecorder().recordStatistics(queryStatisticTotalBlocklet);
1: 
0:     QueryStatistic queryStatisticValidScanBlocklet = new QueryStatistic();
0:     queryStatisticsModel.getStatisticsTypeAndObjMap()
0:         .put(QueryStatisticsConstants.VALID_SCAN_BLOCKLET_NUM, queryStatisticValidScanBlocklet);
0:     queryStatisticsModel.getRecorder().recordStatistics(queryStatisticValidScanBlocklet);
1: 
0:     QueryStatistic totalNumberOfPages = new QueryStatistic();
0:     queryStatisticsModel.getStatisticsTypeAndObjMap()
0:         .put(QueryStatisticsConstants.TOTAL_PAGE_SCANNED, totalNumberOfPages);
0:     queryStatisticsModel.getRecorder().recordStatistics(totalNumberOfPages);
1: 
0:     QueryStatistic validPages = new QueryStatistic();
0:     queryStatisticsModel.getStatisticsTypeAndObjMap()
0:         .put(QueryStatisticsConstants.VALID_PAGE_SCANNED, validPages);
0:     queryStatisticsModel.getRecorder().recordStatistics(validPages);
1: 
0:     QueryStatistic scannedPages = new QueryStatistic();
0:     queryStatisticsModel.getStatisticsTypeAndObjMap()
0:         .put(QueryStatisticsConstants.PAGE_SCANNED, scannedPages);
0:     queryStatisticsModel.getRecorder().recordStatistics(scannedPages);
1: 
0:     QueryStatistic scanTime = new QueryStatistic();
0:     queryStatisticsModel.getStatisticsTypeAndObjMap()
0:         .put(QueryStatisticsConstants.SCAN_BLOCKlET_TIME, scanTime);
0:     queryStatisticsModel.getRecorder().recordStatistics(scanTime);
1: 
0:     QueryStatistic readTime = new QueryStatistic();
0:     queryStatisticsModel.getStatisticsTypeAndObjMap()
0:         .put(QueryStatisticsConstants.READ_BLOCKlET_TIME, readTime);
0:     queryStatisticsModel.getRecorder().recordStatistics(readTime);
0:     return queryStatisticsModel;
1:   }
1: }
============================================================================