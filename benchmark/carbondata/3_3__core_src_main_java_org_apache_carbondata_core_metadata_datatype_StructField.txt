1:933e30c: /*
1:933e30c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:933e30c:  * contributor license agreements.  See the NOTICE file distributed with
1:933e30c:  * this work for additional information regarding copyright ownership.
1:933e30c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:933e30c:  * (the "License"); you may not use this file except in compliance with
1:933e30c:  * the License.  You may obtain a copy of the License at
1:933e30c:  *
1:933e30c:  *    http://www.apache.org/licenses/LICENSE-2.0
1:933e30c:  *
1:933e30c:  * Unless required by applicable law or agreed to in writing, software
1:933e30c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:933e30c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:933e30c:  * See the License for the specific language governing permissions and
1:933e30c:  * limitations under the License.
1:933e30c:  */
1:933e30c: 
1:933e30c: package org.apache.carbondata.core.metadata.datatype;
1:933e30c: 
1:933e30c: import java.io.Serializable;
1:b1c85fa: import java.util.List;
1:933e30c: 
1:933e30c: public class StructField implements Serializable {
1:933e30c: 
1:933e30c:   private static final long serialVersionUID = 3271726L;
1:933e30c: 
1:933e30c:   private String fieldName;
1:933e30c: 
1:933e30c:   private DataType dataType;
1:933e30c: 
1:b1c85fa:   private List<StructField> children;
1:b1c85fa: 
1:933e30c:   public StructField(String fieldName, DataType dataType) {
1:933e30c:     this.fieldName = fieldName;
1:933e30c:     this.dataType = dataType;
1:b1c85fa:     this.children = null;
1:b1c85fa:   }
1:b1c85fa: 
1:b1c85fa: 
1:b1c85fa:   public StructField(String fieldName, DataType dataType, List<StructField> children) {
1:b1c85fa:     this.fieldName = fieldName;
1:b1c85fa:     this.dataType = dataType;
1:b1c85fa:     this.children = children;
1:933e30c:   }
1:933e30c: 
1:933e30c:   public DataType getDataType() {
1:933e30c:     return dataType;
1:933e30c:   }
1:933e30c: 
1:933e30c:   public String getFieldName() {
1:933e30c:     return fieldName;
1:933e30c:   }
1:b1c85fa: 
1:b1c85fa:   public List<StructField> getChildren() {
1:b1c85fa:     return children;
1:b1c85fa:   }
1:3394128: 
1:3394128:   @Override
1:3394128:   public int hashCode() {
1:3394128:     final int prime = 31;
1:3394128:     int result = 1;
1:3394128:     result = prime * result + fieldName.hashCode();
1:3394128:     result = prime * result + dataType.hashCode();
1:3394128:     result = prime * result + ((children == null) ? 0 : children.hashCode());
1:3394128:     return result;
1:3394128:   }
1:3394128: 
1:3394128:   @Override
1:3394128:   public boolean equals(Object obj) {
1:3394128:     if (this == obj) {
1:3394128:       return true;
1:3394128:     }
1:3394128:     if (obj == null) {
1:3394128:       return false;
1:3394128:     }
1:3394128:     if (getClass() != obj.getClass()) {
1:3394128:       return false;
1:3394128:     }
1:3394128:     StructField other = (StructField) obj;
1:3394128:     if (!this.fieldName.equalsIgnoreCase(other.fieldName)) {
1:3394128:       return false;
1:3394128:     }
1:3394128:     if (!this.dataType.equals(other.dataType)) {
1:3394128:       return false;
1:3394128:     }
1:3394128:     if (children == null) {
1:3394128:       if (other.children != null) {
1:3394128:         return false;
1:3394128:       }
1:3394128:     } else if (other.children == null) {
1:3394128:       return false;
1:3394128:     } else if (!children.equals(other.children)) {
1:3394128:       return false;
1:3394128:     }
1:3394128:     return true;
1:3394128:   }
1:933e30c: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:3394128
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public int hashCode() {
1:     final int prime = 31;
1:     int result = 1;
1:     result = prime * result + fieldName.hashCode();
1:     result = prime * result + dataType.hashCode();
1:     result = prime * result + ((children == null) ? 0 : children.hashCode());
1:     return result;
1:   }
1: 
1:   @Override
1:   public boolean equals(Object obj) {
1:     if (this == obj) {
1:       return true;
1:     }
1:     if (obj == null) {
1:       return false;
1:     }
1:     if (getClass() != obj.getClass()) {
1:       return false;
1:     }
1:     StructField other = (StructField) obj;
1:     if (!this.fieldName.equalsIgnoreCase(other.fieldName)) {
1:       return false;
1:     }
1:     if (!this.dataType.equals(other.dataType)) {
1:       return false;
1:     }
1:     if (children == null) {
1:       if (other.children != null) {
1:         return false;
1:       }
1:     } else if (other.children == null) {
1:       return false;
1:     } else if (!children.equals(other.children)) {
1:       return false;
1:     }
1:     return true;
1:   }
author:sounakr
-------------------------------------------------------------------------------
commit:b1c85fa
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:   private List<StructField> children;
1: 
1:     this.children = null;
1:   }
1: 
1: 
1:   public StructField(String fieldName, DataType dataType, List<StructField> children) {
1:     this.fieldName = fieldName;
1:     this.dataType = dataType;
1:     this.children = children;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public List<StructField> getChildren() {
1:     return children;
1:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:933e30c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.datatype;
1: 
1: import java.io.Serializable;
1: 
1: public class StructField implements Serializable {
1: 
1:   private static final long serialVersionUID = 3271726L;
1: 
1:   private String fieldName;
1: 
1:   private DataType dataType;
1: 
1:   public StructField(String fieldName, DataType dataType) {
1:     this.fieldName = fieldName;
1:     this.dataType = dataType;
1:   }
1: 
1:   public DataType getDataType() {
1:     return dataType;
1:   }
1: 
1:   public String getFieldName() {
1:     return fieldName;
1:   }
1: }
============================================================================