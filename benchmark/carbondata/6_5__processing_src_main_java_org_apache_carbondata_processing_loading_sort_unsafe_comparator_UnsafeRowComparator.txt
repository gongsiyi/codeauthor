1:f1f9348: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:f1f9348:  *
1:f1f9348:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f1f9348:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:f1f9348:  */
7:f1f9348: 
1:349c59c: package org.apache.carbondata.processing.loading.sort.unsafe.comparator;
1:f1f9348: 
1:f1f9348: import java.util.Comparator;
1:f1f9348: 
1:ce09aaa: import org.apache.carbondata.core.memory.CarbonUnsafe;
1:f1f9348: import org.apache.carbondata.core.util.ByteUtil.UnsafeComparer;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.holder.UnsafeCarbonRow;
1:2b41f14: import org.apache.carbondata.processing.sort.sortdata.TableFieldStat;
1:f1f9348: 
1:f1f9348: public class UnsafeRowComparator implements Comparator<UnsafeCarbonRow> {
1:f1f9348:   private Object baseObject;
1:2b41f14:   private TableFieldStat tableFieldStat;
1:2b41f14:   private int dictSizeInMemory;
1:f1f9348: 
1:f1f9348:   public UnsafeRowComparator(UnsafeCarbonRowPage rowPage) {
1:f1f9348:     this.baseObject = rowPage.getDataBlock().getBaseObject();
1:2b41f14:     this.tableFieldStat = rowPage.getTableFieldStat();
1:18380a6:     this.dictSizeInMemory = tableFieldStat.getDictSortDimCnt() * 4;
5:f1f9348:   }
1:f1f9348: 
2:f1f9348:   /**
1:f1f9348:    * Below method will be used to compare two mdkey
1:f1f9348:    */
1:f1f9348:   public int compare(UnsafeCarbonRow rowL, UnsafeCarbonRow rowR) {
1:2b41f14:     return compare(rowL, baseObject, rowR, baseObject);
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * Below method will be used to compare two mdkey
1:f1f9348:    */
1:f1f9348:   public int compare(UnsafeCarbonRow rowL, Object baseObjectL, UnsafeCarbonRow rowR,
1:f1f9348:       Object baseObjectR) {
2:f1f9348:     int diff = 0;
2:f1f9348:     long rowA = rowL.address;
2:f1f9348:     long rowB = rowR.address;
1:2b41f14:     int sizeInDictPartA = 0;
1:f1f9348: 
1:2b41f14:     int sizeInNonDictPartA = 0;
1:2b41f14:     int sizeInDictPartB = 0;
1:2b41f14:     int sizeInNonDictPartB = 0;
1:2b41f14:     for (boolean isNoDictionary : tableFieldStat.getIsSortColNoDictFlags()) {
2:f1f9348:       if (isNoDictionary) {
1:2b41f14:         short lengthA = CarbonUnsafe.getUnsafe().getShort(baseObjectL,
1:2b41f14:             rowA + dictSizeInMemory + sizeInNonDictPartA);
1:2b41f14:         byte[] byteArr1 = new byte[lengthA];
1:2b41f14:         sizeInNonDictPartA += 2;
1:21704cf:         CarbonUnsafe.getUnsafe()
1:2b41f14:             .copyMemory(baseObjectL, rowA + dictSizeInMemory + sizeInNonDictPartA,
1:2b41f14:                 byteArr1, CarbonUnsafe.BYTE_ARRAY_OFFSET, lengthA);
1:2b41f14:         sizeInNonDictPartA += lengthA;
1:b13ead9: 
1:2b41f14:         short lengthB = CarbonUnsafe.getUnsafe().getShort(baseObjectR,
1:2b41f14:             rowB + dictSizeInMemory + sizeInNonDictPartB);
1:2b41f14:         byte[] byteArr2 = new byte[lengthB];
1:2b41f14:         sizeInNonDictPartB += 2;
1:2b41f14:         CarbonUnsafe.getUnsafe()
1:2b41f14:             .copyMemory(baseObjectR, rowB + dictSizeInMemory + sizeInNonDictPartB,
1:2b41f14:                 byteArr2, CarbonUnsafe.BYTE_ARRAY_OFFSET, lengthB);
1:2b41f14:         sizeInNonDictPartB += lengthB;
1:b13ead9: 
1:bfa306b:         int difference = UnsafeComparer.INSTANCE.compareTo(byteArr1, byteArr2);
2:f1f9348:         if (difference != 0) {
2:f1f9348:           return difference;
1:f1f9348:         }
2:f1f9348:       } else {
1:2b41f14:         int dimFieldA = CarbonUnsafe.getUnsafe().getInt(baseObjectL, rowA + sizeInDictPartA);
1:2b41f14:         sizeInDictPartA += 4;
1:2b41f14:         int dimFieldB = CarbonUnsafe.getUnsafe().getInt(baseObjectR, rowB + sizeInDictPartB);
1:2b41f14:         sizeInDictPartB += 4;
2:f1f9348:         diff = dimFieldA - dimFieldB;
2:f1f9348:         if (diff != 0) {
3:f1f9348:           return diff;
1:f1f9348:         }
1:f1f9348:       }
1:f1f9348:     }
1:f1f9348: 
1:f1f9348:     return diff;
1:f1f9348:   }
1:f1f9348: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:18380a6
/////////////////////////////////////////////////////////////////////////
1:     this.dictSizeInMemory = tableFieldStat.getDictSortDimCnt() * 4;
commit:bfa306b
/////////////////////////////////////////////////////////////////////////
0:         byte[] byteArr1 = new byte[aShort1];
0:         CarbonUnsafe.unsafe.copyMemory(baseObject, rowA + sizeA, byteArr1,
0:             CarbonUnsafe.BYTE_ARRAY_OFFSET, aShort1);
0:         sizeA += aShort1;
0:         byte[] byteArr2 = new byte[aShort2];
0:         CarbonUnsafe.unsafe.copyMemory(baseObject, rowB + sizeB, byteArr2,
0:             CarbonUnsafe.BYTE_ARRAY_OFFSET, aShort2);
0:         sizeB += aShort2;
1:         int difference = UnsafeComparer.INSTANCE.compareTo(byteArr1, byteArr2);
/////////////////////////////////////////////////////////////////////////
0:         byte[] byteArr1 = new byte[aShort1];
0:         CarbonUnsafe.unsafe
0:             .copyMemory(baseObjectL, rowA + sizeA, byteArr1, CarbonUnsafe.BYTE_ARRAY_OFFSET,
0:                 aShort1);
0:         sizeA += aShort1;
0:         byte[] byteArr2 = new byte[aShort2];
0:         CarbonUnsafe.unsafe
0:             .copyMemory(baseObjectR, rowB + sizeB, byteArr2, CarbonUnsafe.BYTE_ARRAY_OFFSET,
0:                 aShort2);
0:         sizeB += aShort2;
0:         int difference = UnsafeComparer.INSTANCE.compareTo(byteArr1, byteArr2);
commit:b13ead9
/////////////////////////////////////////////////////////////////////////
0:         int minLength = (aShort1 <= aShort2) ? aShort1 : aShort2;
0:         int difference = UnsafeComparer.INSTANCE
0:             .compareUnsafeTo(baseObject, baseObject, rowA + sizeA, rowB + sizeB, aShort1, aShort2,
0:                 minLength);
0:         sizeA += aShort1;
0:         sizeB += aShort2;
/////////////////////////////////////////////////////////////////////////
0:         int minLength = (aShort1 <= aShort2) ? aShort1 : aShort2;
1: 
0:         int difference = UnsafeComparer.INSTANCE
0:             .compareUnsafeTo(baseObjectL, baseObjectR, rowA + sizeA, rowB + sizeB, aShort1, aShort2,
0:                 minLength);
1: 
0:         sizeA += aShort1;
0:         sizeB += aShort2;
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.newflow.sort.unsafe.comparator;
1: 
1: import java.util.Comparator;
1: 
0: import org.apache.carbondata.core.unsafe.CarbonUnsafe;
1: import org.apache.carbondata.core.util.ByteUtil.UnsafeComparer;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.UnsafeCarbonRowPage;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.holder.UnsafeCarbonRow;
1: 
1: public class UnsafeRowComparator implements Comparator<UnsafeCarbonRow> {
1: 
1:   /**
0:    * noDictionaryColMaping mapping of dictionary dimensions and no dictionary dimensions.
1:    */
0:   private boolean[] noDictionaryColMaping;
1: 
1:   private Object baseObject;
1: 
1:   public UnsafeRowComparator(UnsafeCarbonRowPage rowPage) {
0:     this.noDictionaryColMaping = rowPage.getNoDictionaryDimensionMapping();
1:     this.baseObject = rowPage.getDataBlock().getBaseObject();
1:   }
1: 
1:   /**
1:    * Below method will be used to compare two mdkey
1:    */
1:   public int compare(UnsafeCarbonRow rowL, UnsafeCarbonRow rowR) {
1:     int diff = 0;
1:     long rowA = rowL.address;
1:     long rowB = rowR.address;
0:     int sizeA = 0;
0:     int sizeB = 0;
0:     for (boolean isNoDictionary : noDictionaryColMaping) {
1:       if (isNoDictionary) {
0:         short aShort1 = CarbonUnsafe.unsafe.getShort(baseObject, rowA + sizeA);
0:         byte[] byteArr1 = new byte[aShort1];
0:         sizeA += 2;
0:         CarbonUnsafe.unsafe.copyMemory(baseObject, rowA + sizeA, byteArr1,
0:             CarbonUnsafe.BYTE_ARRAY_OFFSET, aShort1);
0:         sizeA += aShort1;
1: 
0:         short aShort2 = CarbonUnsafe.unsafe.getShort(baseObject, rowB + sizeB);
0:         byte[] byteArr2 = new byte[aShort2];
0:         sizeB += 2;
0:         CarbonUnsafe.unsafe.copyMemory(baseObject, rowB + sizeB, byteArr2,
0:             CarbonUnsafe.BYTE_ARRAY_OFFSET, aShort2);
0:         sizeB += aShort2;
1: 
0:         int difference = UnsafeComparer.INSTANCE.compareTo(byteArr1, byteArr2);
1:         if (difference != 0) {
1:           return difference;
1:         }
1:       } else {
0:         int dimFieldA = CarbonUnsafe.unsafe.getInt(baseObject, rowA + sizeA);
0:         sizeA += 4;
0:         int dimFieldB = CarbonUnsafe.unsafe.getInt(baseObject, rowB + sizeB);
0:         sizeB += 4;
1:         diff = dimFieldA - dimFieldB;
1:         if (diff != 0) {
1:           return diff;
1:         }
1:       }
1:     }
1: 
1:     return diff;
1:   }
1: 
1:   /**
1:    * Below method will be used to compare two mdkey
1:    */
1:   public int compare(UnsafeCarbonRow rowL, Object baseObjectL, UnsafeCarbonRow rowR,
1:       Object baseObjectR) {
1:     int diff = 0;
1:     long rowA = rowL.address;
1:     long rowB = rowR.address;
0:     int sizeA = 0;
0:     int sizeB = 0;
0:     for (boolean isNoDictionary : noDictionaryColMaping) {
1:       if (isNoDictionary) {
0:         short aShort1 = CarbonUnsafe.unsafe.getShort(baseObjectL, rowA + sizeA);
0:         byte[] byteArr1 = new byte[aShort1];
0:         sizeA += 2;
0:         CarbonUnsafe.unsafe
0:             .copyMemory(baseObjectL, rowA + sizeA, byteArr1, CarbonUnsafe.BYTE_ARRAY_OFFSET,
0:                 aShort1);
0:         sizeA += aShort1;
1: 
0:         short aShort2 = CarbonUnsafe.unsafe.getShort(baseObjectR, rowB + sizeB);
0:         byte[] byteArr2 = new byte[aShort2];
0:         sizeB += 2;
0:         CarbonUnsafe.unsafe
0:             .copyMemory(baseObjectR, rowB + sizeB, byteArr2, CarbonUnsafe.BYTE_ARRAY_OFFSET,
0:                 aShort2);
0:         sizeB += aShort2;
1: 
0:         int difference = UnsafeComparer.INSTANCE.compareTo(byteArr1, byteArr2);
1:         if (difference != 0) {
1:           return difference;
1:         }
1:       } else {
0:         int dimFieldA = CarbonUnsafe.unsafe.getInt(baseObjectL, rowA + sizeA);
0:         sizeA += 4;
0:         int dimFieldB = CarbonUnsafe.unsafe.getInt(baseObjectR, rowB + sizeB);
0:         sizeB += 4;
1:         diff = dimFieldA - dimFieldB;
1:         if (diff != 0) {
1:           return diff;
1:         }
1:       }
1:     }
1: 
1:     return diff;
1:   }
1: }
author:xuchuanyin
-------------------------------------------------------------------------------
commit:2b41f14
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.sort.sortdata.TableFieldStat;
1:   private TableFieldStat tableFieldStat;
1:   private int dictSizeInMemory;
1:     this.tableFieldStat = rowPage.getTableFieldStat();
0:     this.dictSizeInMemory = (tableFieldStat.getDictSortDimCnt()
0:         + tableFieldStat.getDictNoSortDimCnt()) * 4;
1:     return compare(rowL, baseObject, rowR, baseObject);
/////////////////////////////////////////////////////////////////////////
1:     int sizeInDictPartA = 0;
1:     int sizeInNonDictPartA = 0;
1:     int sizeInDictPartB = 0;
1:     int sizeInNonDictPartB = 0;
1:     for (boolean isNoDictionary : tableFieldStat.getIsSortColNoDictFlags()) {
0:       if (isNoDictionary) {
1:         short lengthA = CarbonUnsafe.getUnsafe().getShort(baseObjectL,
1:             rowA + dictSizeInMemory + sizeInNonDictPartA);
1:         byte[] byteArr1 = new byte[lengthA];
1:         sizeInNonDictPartA += 2;
1:             .copyMemory(baseObjectL, rowA + dictSizeInMemory + sizeInNonDictPartA,
1:                 byteArr1, CarbonUnsafe.BYTE_ARRAY_OFFSET, lengthA);
1:         sizeInNonDictPartA += lengthA;
0: 
1:         short lengthB = CarbonUnsafe.getUnsafe().getShort(baseObjectR,
1:             rowB + dictSizeInMemory + sizeInNonDictPartB);
1:         byte[] byteArr2 = new byte[lengthB];
1:         sizeInNonDictPartB += 2;
1:         CarbonUnsafe.getUnsafe()
1:             .copyMemory(baseObjectR, rowB + dictSizeInMemory + sizeInNonDictPartB,
1:                 byteArr2, CarbonUnsafe.BYTE_ARRAY_OFFSET, lengthB);
1:         sizeInNonDictPartB += lengthB;
1:         int dimFieldA = CarbonUnsafe.getUnsafe().getInt(baseObjectL, rowA + sizeInDictPartA);
1:         sizeInDictPartA += 4;
1:         int dimFieldB = CarbonUnsafe.getUnsafe().getInt(baseObjectR, rowB + sizeInDictPartB);
1:         sizeInDictPartB += 4;
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
0: 
0:   /**
0:    * mapping of dictionary and no dictionary of sort_columns.
0:    */
0:   private boolean[] noDictionarySortColumnMaping;
0: 
0:     this.noDictionarySortColumnMaping = rowPage.getNoDictionarySortColumnMapping();
0:     int diff = 0;
0:     long rowA = rowL.address;
0:     long rowB = rowR.address;
0:     int sizeA = 0;
0:     int sizeB = 0;
0:     for (boolean isNoDictionary : noDictionarySortColumnMaping) {
0:       if (isNoDictionary) {
0:         short aShort1 = CarbonUnsafe.getUnsafe().getShort(baseObject, rowA + sizeA);
0:         byte[] byteArr1 = new byte[aShort1];
0:         sizeA += 2;
0:         CarbonUnsafe.getUnsafe().copyMemory(baseObject, rowA + sizeA, byteArr1,
0:             CarbonUnsafe.BYTE_ARRAY_OFFSET, aShort1);
0:         sizeA += aShort1;
0: 
0:         short aShort2 = CarbonUnsafe.getUnsafe().getShort(baseObject, rowB + sizeB);
0:         byte[] byteArr2 = new byte[aShort2];
0:         sizeB += 2;
0:         CarbonUnsafe.getUnsafe().copyMemory(baseObject, rowB + sizeB, byteArr2,
0:             CarbonUnsafe.BYTE_ARRAY_OFFSET, aShort2);
0:         sizeB += aShort2;
0: 
0:         int difference = UnsafeComparer.INSTANCE.compareTo(byteArr1, byteArr2);
0:         if (difference != 0) {
0:           return difference;
0:         }
0:       } else {
0:         int dimFieldA = CarbonUnsafe.getUnsafe().getInt(baseObject, rowA + sizeA);
0:         sizeA += 4;
0:         int dimFieldB = CarbonUnsafe.getUnsafe().getInt(baseObject, rowB + sizeB);
0:         sizeB += 4;
0:         diff = dimFieldA - dimFieldB;
0:         if (diff != 0) {
0:           return diff;
0:         }
0:       }
0:     }
0: 
0:     return diff;
/////////////////////////////////////////////////////////////////////////
0:     int sizeA = 0;
0:     int sizeB = 0;
0:     for (boolean isNoDictionary : noDictionarySortColumnMaping) {
0:         short aShort1 = CarbonUnsafe.getUnsafe().getShort(baseObjectL, rowA + sizeA);
0:         byte[] byteArr1 = new byte[aShort1];
0:         sizeA += 2;
0:             .copyMemory(baseObjectL, rowA + sizeA, byteArr1, CarbonUnsafe.BYTE_ARRAY_OFFSET,
0:                 aShort1);
0:         sizeA += aShort1;
0:         short aShort2 = CarbonUnsafe.getUnsafe().getShort(baseObjectR, rowB + sizeB);
0:         byte[] byteArr2 = new byte[aShort2];
0:         sizeB += 2;
0:             .copyMemory(baseObjectR, rowB + sizeB, byteArr2, CarbonUnsafe.BYTE_ARRAY_OFFSET,
0:                 aShort2);
0:         sizeB += aShort2;
0:         int dimFieldA = CarbonUnsafe.getUnsafe().getInt(baseObjectL, rowA + sizeA);
0:         sizeA += 4;
0:         int dimFieldB = CarbonUnsafe.getUnsafe().getInt(baseObjectR, rowB + sizeB);
0:         sizeB += 4;
commit:21704cf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.sort.sortdata.TableFieldStat;
0:   private TableFieldStat tableFieldStat;
0:   private int dictSizeInMemory;
0:     this.tableFieldStat = rowPage.getTableFieldStat();
0:     this.dictSizeInMemory = (tableFieldStat.getDictSortDimCnt()
0:         + tableFieldStat.getDictNoSortDimCnt()) * 4;
0:     return compare(rowL, baseObject, rowR, baseObject);
/////////////////////////////////////////////////////////////////////////
0:     int sizeInDictPartA = 0;
0:     int sizeInNonDictPartA = 0;
0:     int sizeInDictPartB = 0;
0:     int sizeInNonDictPartB = 0;
0:     for (boolean isNoDictionary : tableFieldStat.getIsSortColNoDictFlags()) {
0:       if (isNoDictionary) {
0:         short lengthA = CarbonUnsafe.getUnsafe().getShort(baseObjectL,
0:             rowA + dictSizeInMemory + sizeInNonDictPartA);
0:         byte[] byteArr1 = new byte[lengthA];
0:         sizeInNonDictPartA += 2;
0:             .copyMemory(baseObjectL, rowA + dictSizeInMemory + sizeInNonDictPartA,
0:                 byteArr1, CarbonUnsafe.BYTE_ARRAY_OFFSET, lengthA);
0:         sizeInNonDictPartA += lengthA;
0: 
0:         short lengthB = CarbonUnsafe.getUnsafe().getShort(baseObjectR,
0:             rowB + dictSizeInMemory + sizeInNonDictPartB);
0:         byte[] byteArr2 = new byte[lengthB];
0:         sizeInNonDictPartB += 2;
1:         CarbonUnsafe.getUnsafe()
0:             .copyMemory(baseObjectR, rowB + dictSizeInMemory + sizeInNonDictPartB,
0:                 byteArr2, CarbonUnsafe.BYTE_ARRAY_OFFSET, lengthB);
0:         sizeInNonDictPartB += lengthB;
0:         int dimFieldA = CarbonUnsafe.getUnsafe().getInt(baseObjectL, rowA + sizeInDictPartA);
0:         sizeInDictPartA += 4;
0:         int dimFieldB = CarbonUnsafe.getUnsafe().getInt(baseObjectR, rowB + sizeInDictPartB);
0:         sizeInDictPartB += 4;
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.sort.unsafe.comparator;
1: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1: import org.apache.carbondata.processing.loading.sort.unsafe.holder.UnsafeCarbonRow;
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
0:         short aShort1 = CarbonUnsafe.getUnsafe().getShort(baseObject, rowA + sizeA);
0:         CarbonUnsafe.getUnsafe().copyMemory(baseObject, rowA + sizeA, byteArr1,
0:         short aShort2 = CarbonUnsafe.getUnsafe().getShort(baseObject, rowB + sizeB);
0:         CarbonUnsafe.getUnsafe().copyMemory(baseObject, rowB + sizeB, byteArr2,
/////////////////////////////////////////////////////////////////////////
0:         int dimFieldA = CarbonUnsafe.getUnsafe().getInt(baseObject, rowA + sizeA);
0:         int dimFieldB = CarbonUnsafe.getUnsafe().getInt(baseObject, rowB + sizeB);
/////////////////////////////////////////////////////////////////////////
0:         short aShort1 = CarbonUnsafe.getUnsafe().getShort(baseObjectL, rowA + sizeA);
0:         CarbonUnsafe.getUnsafe()
0:         short aShort2 = CarbonUnsafe.getUnsafe().getShort(baseObjectR, rowB + sizeB);
0:         CarbonUnsafe.getUnsafe()
/////////////////////////////////////////////////////////////////////////
0:         int dimFieldA = CarbonUnsafe.getUnsafe().getInt(baseObjectL, rowA + sizeA);
0:         int dimFieldB = CarbonUnsafe.getUnsafe().getInt(baseObjectR, rowB + sizeB);
author:QiangCai
-------------------------------------------------------------------------------
commit:9f94529
/////////////////////////////////////////////////////////////////////////
0:    * mapping of dictionary and no dictionary of sort_columns.
0:   private boolean[] noDictionarySortColumnMaping;
0:     this.noDictionarySortColumnMaping = rowPage.getNoDictionarySortColumnMapping();
/////////////////////////////////////////////////////////////////////////
0:     for (boolean isNoDictionary : noDictionarySortColumnMaping) {
/////////////////////////////////////////////////////////////////////////
0:     for (boolean isNoDictionary : noDictionarySortColumnMaping) {
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.memory.CarbonUnsafe;
============================================================================