1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.core.writer.sortindex;
5:cd6a4ff: 
1:cd6a4ff: import java.io.File;
1:cd6a4ff: import java.util.ArrayList;
1:cd6a4ff: import java.util.Arrays;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: import java.util.UUID;
1:cd6a4ff: 
1:d3a09e2: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1:1155d4d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1:cd6a4ff: import org.apache.carbondata.core.reader.sortindex.CarbonDictionarySortIndexReader;
1:cd6a4ff: import org.apache.carbondata.core.reader.sortindex.CarbonDictionarySortIndexReaderImpl;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonUtil;
1:cd6a4ff: import org.apache.carbondata.core.writer.CarbonDictionaryWriter;
1:cd6a4ff: import org.apache.carbondata.core.writer.CarbonDictionaryWriterImpl;
1:d828604: 
1:cd6a4ff: import org.apache.commons.lang.ArrayUtils;
1:cd6a4ff: import org.junit.Before;
1:cd6a4ff: import org.junit.Test;
1:cd6a4ff: 
1:d828604: import static org.junit.Assert.assertEquals;
1:d828604: 
3:cd6a4ff: /**
1:cd6a4ff:  * class contains the unit test cases of the dictionary sort index & sort index inverted writing
1:cd6a4ff:  */
1:cd6a4ff: public class CarbonDictionarySortIndexWriterImplTest {
1:cd6a4ff: 
1:a65ca7c:   private String storePath;
1:d828604:   private CarbonTableIdentifier carbonTableIdentifier = null;
1:1155d4d:   private AbsoluteTableIdentifier absoluteTableIdentifier = null;
1:d828604:   private ColumnIdentifier columnIdentifier = null;
1:d828604:   private CarbonDictionaryWriter dictionaryWriter = null;
1:d828604:   private CarbonDictionarySortIndexWriter dictionarySortIndexWriter = null;
1:d828604:   private CarbonDictionarySortIndexReader carbonDictionarySortIndexReader = null;
1:cd6a4ff: 
1:cd6a4ff:   @Before public void setUp() throws Exception {
1:d828604:     storePath = "target/carbonStore";
1:d828604:     carbonTableIdentifier =
1:d828604:         new CarbonTableIdentifier("testSchema", "carbon", UUID.randomUUID().toString());
1:1155d4d:     String tablePath =
1:1155d4d:         storePath + "/" + carbonTableIdentifier.getDatabaseName() + "/" + carbonTableIdentifier
1:1155d4d:             .getTableName();
1:2fe7758:     absoluteTableIdentifier = AbsoluteTableIdentifier.from(tablePath, carbonTableIdentifier);
1:d828604:     columnIdentifier = new ColumnIdentifier("Name", null, null);
1:1155d4d:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:1155d4d:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
1:29dc302:             columnIdentifier.getDataType());
1:d828604:     dictionaryWriter =
1:1155d4d:         new CarbonDictionaryWriterImpl(dictionaryColumnUniqueIdentifier);
1:d828604:     dictionarySortIndexWriter =
1:1155d4d:         new CarbonDictionarySortIndexWriterImpl(dictionaryColumnUniqueIdentifier);
1:d828604:     carbonDictionarySortIndexReader =
1:1155d4d:         new CarbonDictionarySortIndexReaderImpl(dictionaryColumnUniqueIdentifier);
9:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * s
1:cd6a4ff:    * Method to test the write of sortIndex file.
1:cd6a4ff:    *
1:cd6a4ff:    * @throws Exception
1:cd6a4ff:    */
1:cd6a4ff:   @Test public void write() throws Exception {
1:cd6a4ff: 
1:d828604:     String metaFolderPath =
1:d828604:         storePath + File.separator + carbonTableIdentifier.getDatabaseName() + File.separator
1:d828604:             + carbonTableIdentifier.getTableName() + File.separator + "Metadata";
1:cd6a4ff:     CarbonUtil.checkAndCreateFolder(metaFolderPath);
1:d828604: 
1:cd6a4ff:     List<int[]> indexList = prepareExpectedData();
1:cd6a4ff:     int[] data = indexList.get(0);
1:d828604:     for (int i = 0; i < data.length; i++) {
1:d828604:       dictionaryWriter.write(String.valueOf(data[i]));
1:cd6a4ff:     }
1:cd6a4ff:     dictionaryWriter.close();
1:cd6a4ff:     dictionaryWriter.commit();
1:d828604: 
1:cd6a4ff:     List<Integer> sortIndex = Arrays.asList(ArrayUtils.toObject(indexList.get(0)));
1:cd6a4ff:     List<Integer> invertedSortIndex = Arrays.asList(ArrayUtils.toObject(indexList.get(1)));
1:cd6a4ff:     dictionarySortIndexWriter.writeSortIndex(sortIndex);
1:cd6a4ff:     dictionarySortIndexWriter.writeInvertedSortIndex(invertedSortIndex);
1:cd6a4ff:     dictionarySortIndexWriter.close();
1:d828604: 
1:cd6a4ff:     List<Integer> actualSortIndex = carbonDictionarySortIndexReader.readSortIndex();
1:cd6a4ff:     List<Integer> actualInvertedSortIndex = carbonDictionarySortIndexReader.readInvertedSortIndex();
1:cd6a4ff:     for (int i = 0; i < actualSortIndex.size(); i++) {
1:d828604:       assertEquals(sortIndex.get(i), actualSortIndex.get(i));
1:d828604:       assertEquals(invertedSortIndex.get(i), actualInvertedSortIndex.get(i));
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @throws Exception
1:cd6a4ff:    */
1:cd6a4ff:   @Test public void writingEmptyValue() throws Exception {
1:cd6a4ff: 
1:cd6a4ff:     List<Integer> sortIndex = new ArrayList<>();
1:cd6a4ff:     List<Integer> invertedSortIndex = new ArrayList<>();
1:cd6a4ff:     dictionarySortIndexWriter.writeSortIndex(sortIndex);
1:cd6a4ff:     dictionarySortIndexWriter.writeInvertedSortIndex(invertedSortIndex);
1:cd6a4ff:     dictionarySortIndexWriter.close();
1:cd6a4ff:     List<Integer> actualSortIndex = carbonDictionarySortIndexReader.readSortIndex();
1:cd6a4ff:     List<Integer> actualInvertedSortIndex = carbonDictionarySortIndexReader.readInvertedSortIndex();
1:cd6a4ff:     for (int i = 0; i < actualSortIndex.size(); i++) {
1:d828604:       assertEquals(sortIndex.get(i), actualSortIndex.get(i));
1:d828604:       assertEquals(invertedSortIndex.get(i), actualInvertedSortIndex.get(i));
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private List<int[]> prepareExpectedData() {
1:cd6a4ff:     List<int[]> indexList = new ArrayList<>(2);
1:cd6a4ff:     int[] sortIndex = { 0, 3, 2, 4, 1 };
1:cd6a4ff:     int[] sortIndexInverted = { 0, 2, 4, 1, 2 };
1:cd6a4ff:     indexList.add(0, sortIndex);
1:cd6a4ff:     indexList.add(1, sortIndexInverted);
1:cd6a4ff:     return indexList;
1:d828604:   }
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:manishgupta88
-------------------------------------------------------------------------------
commit:29dc302
/////////////////////////////////////////////////////////////////////////
1:             columnIdentifier.getDataType());
author:Jacky Li
-------------------------------------------------------------------------------
commit:2fe7758
/////////////////////////////////////////////////////////////////////////
1:     absoluteTableIdentifier = AbsoluteTableIdentifier.from(tablePath, carbonTableIdentifier);
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
1:   private AbsoluteTableIdentifier absoluteTableIdentifier = null;
/////////////////////////////////////////////////////////////////////////
1:     String tablePath =
1:         storePath + "/" + carbonTableIdentifier.getDatabaseName() + "/" + carbonTableIdentifier
1:             .getTableName();
0:     absoluteTableIdentifier = new AbsoluteTableIdentifier(tablePath, carbonTableIdentifier);
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
0:             columnIdentifier.getDataType(),
0:             CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier));
1:         new CarbonDictionaryWriterImpl(dictionaryColumnUniqueIdentifier);
1:         new CarbonDictionarySortIndexWriterImpl(dictionaryColumnUniqueIdentifier);
1:         new CarbonDictionarySortIndexReaderImpl(dictionaryColumnUniqueIdentifier);
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
/////////////////////////////////////////////////////////////////////////
0:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier = new DictionaryColumnUniqueIdentifier(carbonTableIdentifier, columnIdentifier, columnIdentifier.getDataType(),
0:         CarbonStorePath.getCarbonTablePath(storePath, carbonTableIdentifier));
0:         new CarbonDictionaryWriterImpl(storePath, carbonTableIdentifier, dictionaryColumnUniqueIdentifier);
0:         new CarbonDictionarySortIndexWriterImpl(carbonTableIdentifier, dictionaryColumnUniqueIdentifier, storePath);
0:         new CarbonDictionarySortIndexReaderImpl(carbonTableIdentifier, dictionaryColumnUniqueIdentifier, storePath);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.metadata.ColumnIdentifier;
author:Geetika gupta
-------------------------------------------------------------------------------
commit:d828604
/////////////////////////////////////////////////////////////////////////
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1:   private CarbonTableIdentifier carbonTableIdentifier = null;
1:   private ColumnIdentifier columnIdentifier = null;
1:   private CarbonDictionaryWriter dictionaryWriter = null;
1:   private CarbonDictionarySortIndexWriter dictionarySortIndexWriter = null;
1:   private CarbonDictionarySortIndexReader carbonDictionarySortIndexReader = null;
1:     storePath = "target/carbonStore";
1:     carbonTableIdentifier =
1:         new CarbonTableIdentifier("testSchema", "carbon", UUID.randomUUID().toString());
1:     columnIdentifier = new ColumnIdentifier("Name", null, null);
1:     dictionaryWriter =
0:         new CarbonDictionaryWriterImpl(storePath, carbonTableIdentifier, columnIdentifier);
1:     dictionarySortIndexWriter =
0:         new CarbonDictionarySortIndexWriterImpl(carbonTableIdentifier, columnIdentifier, storePath);
1:     carbonDictionarySortIndexReader =
0:         new CarbonDictionarySortIndexReaderImpl(carbonTableIdentifier, columnIdentifier, storePath);
/////////////////////////////////////////////////////////////////////////
1:     String metaFolderPath =
1:         storePath + File.separator + carbonTableIdentifier.getDatabaseName() + File.separator
1:             + carbonTableIdentifier.getTableName() + File.separator + "Metadata";
1: 
1:     for (int i = 0; i < data.length; i++) {
1:       dictionaryWriter.write(String.valueOf(data[i]));
1: 
1: 
1:       assertEquals(sortIndex.get(i), actualSortIndex.get(i));
1:       assertEquals(invertedSortIndex.get(i), actualInvertedSortIndex.get(i));
/////////////////////////////////////////////////////////////////////////
1:       assertEquals(sortIndex.get(i), actualSortIndex.get(i));
1:       assertEquals(invertedSortIndex.get(i), actualInvertedSortIndex.get(i));
/////////////////////////////////////////////////////////////////////////
1: }
author:hexiaoqiao
-------------------------------------------------------------------------------
commit:a65ca7c
/////////////////////////////////////////////////////////////////////////
1:   private String storePath;
0:       storePath = "target/carbonStore";
/////////////////////////////////////////////////////////////////////////
0:     String metaFolderPath =storePath+File.separator+carbonTableIdentifier.getDatabaseName()+File.separator+carbonTableIdentifier.getTableName()+File.separator+"Metadata";
0:     CarbonDictionaryWriter dictionaryWriter = new CarbonDictionaryWriterImpl(storePath,
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     FileFactory.FileType fileType = FileFactory.getFileType(this.storePath);
0:     CarbonFile carbonFile = FileFactory.getCarbonFile(this.storePath, fileType);
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.writer.sortindex;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.UUID;
1: 
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.datastorage.store.filesystem.CarbonFile;
0: import org.apache.carbondata.core.datastorage.store.impl.FileFactory;
1: import org.apache.carbondata.core.reader.sortindex.CarbonDictionarySortIndexReader;
1: import org.apache.carbondata.core.reader.sortindex.CarbonDictionarySortIndexReaderImpl;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.apache.carbondata.core.writer.CarbonDictionaryWriter;
1: import org.apache.carbondata.core.writer.CarbonDictionaryWriterImpl;
1: import org.apache.commons.lang.ArrayUtils;
0: import org.junit.After;
0: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * class contains the unit test cases of the dictionary sort index & sort index inverted writing
1:  */
1: public class CarbonDictionarySortIndexWriterImplTest {
1: 
0:   private String hdfsStorePath;
1: 
1:   @Before public void setUp() throws Exception {
0:     hdfsStorePath = "target/carbonStore";
1:   }
1: 
0:   @After public void tearDown() throws Exception {
1: 
0:     //deleteStorePath();
1:   }
1: 
1:   /**
1:    * s
1:    * Method to test the write of sortIndex file.
1:    *
1:    * @throws Exception
1:    */
1:   @Test public void write() throws Exception {
0:     String storePath = hdfsStorePath;
0:     CarbonTableIdentifier carbonTableIdentifier = new CarbonTableIdentifier("testSchema", "carbon", UUID.randomUUID().toString());
0:     ColumnIdentifier columnIdentifier = new ColumnIdentifier("Name", null, null);
1: 
0:     String metaFolderPath =hdfsStorePath+File.separator+carbonTableIdentifier.getDatabaseName()+File.separator+carbonTableIdentifier.getTableName()+File.separator+"Metadata";
1:     CarbonUtil.checkAndCreateFolder(metaFolderPath);
0:     CarbonDictionaryWriter dictionaryWriter = new CarbonDictionaryWriterImpl(hdfsStorePath,
0:     	       carbonTableIdentifier, columnIdentifier);
0:     CarbonDictionarySortIndexWriter dictionarySortIndexWriter =
0:         new CarbonDictionarySortIndexWriterImpl(carbonTableIdentifier, columnIdentifier, storePath);
1:     List<int[]> indexList = prepareExpectedData();
1:     int[] data = indexList.get(0);
0:     for(int i=0;i<data.length;i++) {
0:     	dictionaryWriter.write(String.valueOf(data[i]));
1:     }
1:     dictionaryWriter.close();
1:     dictionaryWriter.commit();
1:     
1:     List<Integer> sortIndex = Arrays.asList(ArrayUtils.toObject(indexList.get(0)));
1:     List<Integer> invertedSortIndex = Arrays.asList(ArrayUtils.toObject(indexList.get(1)));
1:     dictionarySortIndexWriter.writeSortIndex(sortIndex);
1:     dictionarySortIndexWriter.writeInvertedSortIndex(invertedSortIndex);
1:     dictionarySortIndexWriter.close();
0:     CarbonDictionarySortIndexReader carbonDictionarySortIndexReader =
0:         new CarbonDictionarySortIndexReaderImpl(carbonTableIdentifier, columnIdentifier, storePath);
1:     List<Integer> actualSortIndex = carbonDictionarySortIndexReader.readSortIndex();
1:     List<Integer> actualInvertedSortIndex = carbonDictionarySortIndexReader.readInvertedSortIndex();
1:     for (int i = 0; i < actualSortIndex.size(); i++) {
0:       Assert.assertEquals(sortIndex.get(i), actualSortIndex.get(i));
0:       Assert.assertEquals(invertedSortIndex.get(i), actualInvertedSortIndex.get(i));
1:     }
1: 
1:   }
1: 
1:   /**
1:    * @throws Exception
1:    */
1:   @Test public void writingEmptyValue() throws Exception {
0:     String storePath = hdfsStorePath;
0:     CarbonTableIdentifier carbonTableIdentifier = new CarbonTableIdentifier("testSchema", "carbon", UUID.randomUUID().toString());
0:     ColumnIdentifier columnIdentifier = new ColumnIdentifier("Name", null, null);
1: 
0:     CarbonDictionarySortIndexWriter dictionarySortIndexWriter =
0:         new CarbonDictionarySortIndexWriterImpl(carbonTableIdentifier, columnIdentifier, storePath);
1:     List<Integer> sortIndex = new ArrayList<>();
1:     List<Integer> invertedSortIndex = new ArrayList<>();
1:     dictionarySortIndexWriter.writeSortIndex(sortIndex);
1:     dictionarySortIndexWriter.writeInvertedSortIndex(invertedSortIndex);
1:     dictionarySortIndexWriter.close();
0:     CarbonDictionarySortIndexReader carbonDictionarySortIndexReader =
0:         new CarbonDictionarySortIndexReaderImpl(carbonTableIdentifier, columnIdentifier, storePath);
1:     List<Integer> actualSortIndex = carbonDictionarySortIndexReader.readSortIndex();
1:     List<Integer> actualInvertedSortIndex = carbonDictionarySortIndexReader.readInvertedSortIndex();
1:     for (int i = 0; i < actualSortIndex.size(); i++) {
0:       Assert.assertEquals(sortIndex.get(i), actualSortIndex.get(i));
0:       Assert.assertEquals(invertedSortIndex.get(i), actualInvertedSortIndex.get(i));
1:     }
1: 
1:   }
1: 
1:   private List<int[]> prepareExpectedData() {
1:     List<int[]> indexList = new ArrayList<>(2);
1:     int[] sortIndex = { 0, 3, 2, 4, 1 };
1:     int[] sortIndexInverted = { 0, 2, 4, 1, 2 };
1:     indexList.add(0, sortIndex);
1:     indexList.add(1, sortIndexInverted);
1:     return indexList;
1:   }
1: 
1:   /**
0:    * this method will delete the store path
1:    */
0:   private void deleteStorePath() {
0:     FileFactory.FileType fileType = FileFactory.getFileType(this.hdfsStorePath);
0:     CarbonFile carbonFile = FileFactory.getCarbonFile(this.hdfsStorePath, fileType);
0:     deleteRecursiveSilent(carbonFile);
1:   }
1: 
1:   /**
0:    * this method will delete the folders recursively
1:    */
0:   private static void deleteRecursiveSilent(CarbonFile f) {
0:     if (f.isDirectory()) {
0:       if (f.listFiles() != null) {
0:         for (CarbonFile c : f.listFiles()) {
0:           deleteRecursiveSilent(c);
1:         }
1:       }
1:     }
0:     if (f.exists() && !f.delete()) {
0:       return;
1:     }
1:   }
1: }
============================================================================