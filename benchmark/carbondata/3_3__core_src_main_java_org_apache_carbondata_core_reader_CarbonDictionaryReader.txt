1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.reader;
1:cd6a4ff: 
1:cd6a4ff: import java.io.Closeable;
1:cd6a4ff: import java.io.IOException;
1:7e0584e: import java.util.Iterator;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * dictionary reader interface which declares methods for
1:cd6a4ff:  * reading carbon dictionary files
1:cd6a4ff:  */
1:cd6a4ff: public interface CarbonDictionaryReader extends Closeable {
1:cd6a4ff:   /**
1:cd6a4ff:    * This method should be used when complete dictionary data needs to be read.
1:cd6a4ff:    * Applicable scenarios :
1:cd6a4ff:    * 1. Global dictionary generation in case of incremental load
1:cd6a4ff:    * 2. Reading dictionary file on first time query
1:cd6a4ff:    * 3. Loading a dictionary column in memory based on query requirement.
1:cd6a4ff:    * This is a case where carbon column cache feature is enabled in which a
1:cd6a4ff:    * column dictionary is read if it is present in the query.
1:cd6a4ff:    *
2:cd6a4ff:    * @return list of byte array. Each byte array is unique dictionary value
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   List<byte[]> read() throws IOException;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method should be used when data has to be read from a given offset.
1:cd6a4ff:    * Applicable scenarios :
1:cd6a4ff:    * 1. Incremental data load. If column dictionary is already loaded in memory
1:cd6a4ff:    * and incremental load is done, then for the new query only new dictionary data
1:cd6a4ff:    * has to be read form memory.
1:cd6a4ff:    *
1:cd6a4ff:    * @param startOffset start offset of dictionary file
1:cd6a4ff:    * @return list of byte array. Each byte array is unique dictionary value
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   List<byte[]> read(long startOffset) throws IOException;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will be used to read data between given start and end offset.
1:cd6a4ff:    * Applicable scenarios:
1:cd6a4ff:    * 1. Truncate operation. If there is any inconsistency while writing the dictionary file
1:cd6a4ff:    * then we can give the start and end offset till where the data has to be retained.
1:cd6a4ff:    *
1:cd6a4ff:    * @param startOffset start offset of dictionary file
1:cd6a4ff:    * @param endOffset   end offset of dictionary file
1:7e0584e:    * @return iterator over byte array. Each byte array is unique dictionary value
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:7e0584e:   Iterator<byte[]> read(long startOffset, long endOffset) throws IOException;
1:cd6a4ff: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:manishgupt88
-------------------------------------------------------------------------------
commit:7e0584e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1:    * @return iterator over byte array. Each byte array is unique dictionary value
1:   Iterator<byte[]> read(long startOffset, long endOffset) throws IOException;
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.reader;
1: 
1: import java.io.Closeable;
1: import java.io.IOException;
1: import java.util.List;
1: 
1: /**
1:  * dictionary reader interface which declares methods for
1:  * reading carbon dictionary files
1:  */
1: public interface CarbonDictionaryReader extends Closeable {
1:   /**
1:    * This method should be used when complete dictionary data needs to be read.
1:    * Applicable scenarios :
1:    * 1. Global dictionary generation in case of incremental load
1:    * 2. Reading dictionary file on first time query
1:    * 3. Loading a dictionary column in memory based on query requirement.
1:    * This is a case where carbon column cache feature is enabled in which a
1:    * column dictionary is read if it is present in the query.
1:    *
1:    * @return list of byte array. Each byte array is unique dictionary value
1:    * @throws IOException if an I/O error occurs
1:    */
1:   List<byte[]> read() throws IOException;
1: 
1:   /**
1:    * This method should be used when data has to be read from a given offset.
1:    * Applicable scenarios :
1:    * 1. Incremental data load. If column dictionary is already loaded in memory
1:    * and incremental load is done, then for the new query only new dictionary data
1:    * has to be read form memory.
1:    *
1:    * @param startOffset start offset of dictionary file
1:    * @return list of byte array. Each byte array is unique dictionary value
1:    * @throws IOException if an I/O error occurs
1:    */
1:   List<byte[]> read(long startOffset) throws IOException;
1: 
1:   /**
1:    * This method will be used to read data between given start and end offset.
1:    * Applicable scenarios:
1:    * 1. Truncate operation. If there is any inconsistency while writing the dictionary file
1:    * then we can give the start and end offset till where the data has to be retained.
1:    *
1:    * @param startOffset start offset of dictionary file
1:    * @param endOffset   end offset of dictionary file
1:    * @return list of byte array. Each byte array is unique dictionary value
1:    * @throws IOException if an I/O error occurs
1:    */
0:   List<byte[]> read(long startOffset, long endOffset) throws IOException;
1: }
============================================================================