1:e710339: /*
1:e710339:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e710339:  * contributor license agreements.  See the NOTICE file distributed with
1:e710339:  * this work for additional information regarding copyright ownership.
1:e710339:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e710339:  * (the "License"); you may not use this file except in compliance with
1:e710339:  * the License.  You may obtain a copy of the License at
1:e710339:  *
1:e710339:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e710339:  *
1:e710339:  * Unless required by applicable law or agreed to in writing, software
1:e710339:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e710339:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e710339:  * See the License for the specific language governing permissions and
1:e710339:  * limitations under the License.
1:e710339:  */
1:e710339: package org.apache.carbondata.core.localdictionary;
1:e710339: 
1:e710339: import java.io.IOException;
1:3a4b881: import java.nio.ByteBuffer;
1:e710339: import java.util.BitSet;
1:e710339: 
1:3a4b881: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:e710339: import org.apache.carbondata.core.datastore.ColumnType;
1:e710339: import org.apache.carbondata.core.datastore.TableSpec;
1:e710339: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1:e710339: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:e710339: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1:8f08c4a: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:e710339: import org.apache.carbondata.core.datastore.page.encoding.compress.DirectCompressCodec;
1:e710339: import org.apache.carbondata.core.datastore.page.statistics.DummyStatsCollector;
1:e710339: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1:e710339: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1:e710339: import org.apache.carbondata.core.memory.MemoryException;
1:e710339: import org.apache.carbondata.core.metadata.datatype.DataType;
1:e710339: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:e710339: import org.apache.carbondata.format.LocalDictionaryChunk;
1:e710339: 
1:e710339: /**
1:e710339:  * Class to maintain page level dictionary. It will store all unique dictionary values
1:e710339:  * used in a page. This is required while writing blocklet level dictionary in carbondata
1:e710339:  * file
1:e710339:  */
1:e710339: public class PageLevelDictionary {
1:e710339: 
1:e710339:   /**
1:e710339:    * dictionary generator to generate dictionary values for page data
1:e710339:    */
1:e710339:   private LocalDictionaryGenerator localDictionaryGenerator;
1:e710339: 
1:e710339:   /**
1:e710339:    * set of dictionary surrogate key in this page
1:e710339:    */
1:e710339:   private BitSet usedDictionaryValues;
1:e710339: 
1:e710339:   private String columnName;
1:e710339: 
1:e710339:   private DataType dataType;
1:3a4b881: 
1:43285bb:   private boolean isComplexTypePrimitive;
1:8f08c4a:   // compressor to be used for the dictionary. The compressor is the same as column compressor.
1:8f08c4a:   private String columnCompressor;
1:e710339: 
1:e710339:   public PageLevelDictionary(LocalDictionaryGenerator localDictionaryGenerator, String columnName,
1:8f08c4a:       DataType dataType, boolean isComplexTypePrimitive, String columnCompressor) {
1:e710339:     this.localDictionaryGenerator = localDictionaryGenerator;
1:e710339:     this.usedDictionaryValues = new BitSet();
1:e710339:     this.columnName = columnName;
1:e710339:     this.dataType = dataType;
1:3a4b881:     this.isComplexTypePrimitive = isComplexTypePrimitive;
1:8f08c4a:     this.columnCompressor = columnCompressor;
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to get the dictionary value
1:e710339:    *
1:e710339:    * @param data column data
1:e710339:    * @return dictionary value
1:e710339:    * @throws DictionaryThresholdReachedException when threshold crossed for column
1:e710339:    */
1:e710339:   public int getDictionaryValue(byte[] data) throws DictionaryThresholdReachedException {
1:e710339:     int dictionaryValue = localDictionaryGenerator.generateDictionary(data);
1:e710339:     this.usedDictionaryValues.set(dictionaryValue);
1:e710339:     return dictionaryValue;
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Method to merge the dictionary value across pages
1:e710339:    *
1:e710339:    * @param pageLevelDictionary other page level dictionary
1:e710339:    */
1:e710339:   public void mergerDictionaryValues(PageLevelDictionary pageLevelDictionary) {
1:334e647:     usedDictionaryValues.or(pageLevelDictionary.usedDictionaryValues);
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to get the local dictionary chunk for writing
1:e710339:    * @TODO Support for numeric data type dictionary exclude columns
1:e710339:    * @return encoded local dictionary chunk
1:e710339:    * @throws MemoryException
1:e710339:    * in case of problem in encoding
1:e710339:    * @throws IOException
1:e710339:    * in case of problem in encoding
1:e710339:    */
1:e710339:   public LocalDictionaryChunk getLocalDictionaryChunkForBlocklet()
1:e710339:       throws MemoryException, IOException {
1:e710339:     // TODO support for actual data type dictionary ColumnSPEC
1:e710339:     ColumnType columnType = ColumnType.PLAIN_VALUE;
1:3a4b881:     boolean isVarcharType = false;
1:3a4b881:     int lvSize = CarbonCommonConstants.SHORT_SIZE_IN_BYTE;
1:e710339:     if (DataTypes.VARCHAR == dataType) {
1:e710339:       columnType = ColumnType.PLAIN_LONG_VALUE;
1:3a4b881:       lvSize = CarbonCommonConstants.INT_SIZE_IN_BYTE;
1:3a4b881:       isVarcharType = true;
1:e710339:     }
1:e710339:     TableSpec.ColumnSpec spec =
1:e710339:         TableSpec.ColumnSpec.newInstance(columnName, DataTypes.BYTE_ARRAY, columnType);
1:8f08c4a:     ColumnPage dictionaryColumnPage = ColumnPage.newPage(
1:8f08c4a:         new ColumnPageEncoderMeta(spec, DataTypes.BYTE_ARRAY, columnCompressor),
1:8f08c4a:         usedDictionaryValues.cardinality());
1:e710339:     // TODO support data type specific stats collector for numeric data types
1:e710339:     dictionaryColumnPage.setStatsCollector(new DummyStatsCollector());
1:e710339:     int rowId = 0;
1:3a4b881:     ByteBuffer byteBuffer = null;
1:e710339:     for (int i = usedDictionaryValues.nextSetBit(0);
1:e710339:          i >= 0; i = usedDictionaryValues.nextSetBit(i + 1)) {
1:3a4b881:       if (!isComplexTypePrimitive) {
1:3a4b881:         dictionaryColumnPage
1:3a4b881:             .putData(rowId++, localDictionaryGenerator.getDictionaryKeyBasedOnValue(i));
1:3a4b881:       } else {
1:3a4b881:         byte[] dictionaryKeyBasedOnValue = localDictionaryGenerator.getDictionaryKeyBasedOnValue(i);
1:3a4b881:         byteBuffer = ByteBuffer.allocate(lvSize + dictionaryKeyBasedOnValue.length);
1:3a4b881:         if (!isVarcharType) {
1:3a4b881:           byteBuffer.putShort((short) dictionaryKeyBasedOnValue.length);
1:3a4b881:         } else {
1:3a4b881:           byteBuffer.putInt(dictionaryKeyBasedOnValue.length);
1:3a4b881:         }
1:3a4b881:         byteBuffer.put(dictionaryKeyBasedOnValue);
1:3a4b881:         dictionaryColumnPage.putData(rowId++, byteBuffer.array());
1:3a4b881:       }
1:e710339:     }
1:e710339:     // creating a encoder
1:e710339:     ColumnPageEncoder encoder = new DirectCompressCodec(DataTypes.BYTE_ARRAY).createEncoder(null);
1:e710339:     // get encoded dictionary values
1:e710339:     LocalDictionaryChunk localDictionaryChunk = encoder.encodeDictionary(dictionaryColumnPage);
1:e710339:     // set compressed dictionary values
1:8f08c4a:     localDictionaryChunk.setDictionary_values(
1:8f08c4a:         CompressorFactory.getInstance().getCompressor(columnCompressor).compressByte(
1:8f08c4a:             usedDictionaryValues.toByteArray()));
1:e710339:     // free the dictionary page memory
1:e710339:     dictionaryColumnPage.freeMemory();
1:e710339:     return localDictionaryChunk;
1:e710339:   }
1:e710339: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
/////////////////////////////////////////////////////////////////////////
1:   // compressor to be used for the dictionary. The compressor is the same as column compressor.
1:   private String columnCompressor;
1:       DataType dataType, boolean isComplexTypePrimitive, String columnCompressor) {
1:     this.columnCompressor = columnCompressor;
/////////////////////////////////////////////////////////////////////////
1:     ColumnPage dictionaryColumnPage = ColumnPage.newPage(
1:         new ColumnPageEncoderMeta(spec, DataTypes.BYTE_ARRAY, columnCompressor),
1:         usedDictionaryValues.cardinality());
/////////////////////////////////////////////////////////////////////////
1:     localDictionaryChunk.setDictionary_values(
1:         CompressorFactory.getInstance().getCompressor(columnCompressor).compressByte(
1:             usedDictionaryValues.toByteArray()));
author:kumarvishal09
-------------------------------------------------------------------------------
commit:43285bb
/////////////////////////////////////////////////////////////////////////
1:   private boolean isComplexTypePrimitive;
commit:3a4b881
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
/////////////////////////////////////////////////////////////////////////
0:   private  boolean isComplexTypePrimitive;
1: 
0:       DataType dataType, boolean isComplexTypePrimitive) {
1:     this.isComplexTypePrimitive = isComplexTypePrimitive;
/////////////////////////////////////////////////////////////////////////
1:     boolean isVarcharType = false;
1:     int lvSize = CarbonCommonConstants.SHORT_SIZE_IN_BYTE;
1:       lvSize = CarbonCommonConstants.INT_SIZE_IN_BYTE;
1:       isVarcharType = true;
/////////////////////////////////////////////////////////////////////////
1:     ByteBuffer byteBuffer = null;
1:       if (!isComplexTypePrimitive) {
1:         dictionaryColumnPage
1:             .putData(rowId++, localDictionaryGenerator.getDictionaryKeyBasedOnValue(i));
1:       } else {
1:         byte[] dictionaryKeyBasedOnValue = localDictionaryGenerator.getDictionaryKeyBasedOnValue(i);
1:         byteBuffer = ByteBuffer.allocate(lvSize + dictionaryKeyBasedOnValue.length);
1:         if (!isVarcharType) {
1:           byteBuffer.putShort((short) dictionaryKeyBasedOnValue.length);
1:         } else {
1:           byteBuffer.putInt(dictionaryKeyBasedOnValue.length);
1:         }
1:         byteBuffer.put(dictionaryKeyBasedOnValue);
1:         dictionaryColumnPage.putData(rowId++, byteBuffer.array());
1:       }
commit:334e647
/////////////////////////////////////////////////////////////////////////
1:     usedDictionaryValues.or(pageLevelDictionary.usedDictionaryValues);
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.localdictionary;
1: 
1: import java.io.IOException;
1: import java.util.BitSet;
1: 
1: import org.apache.carbondata.core.datastore.ColumnType;
1: import org.apache.carbondata.core.datastore.TableSpec;
1: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1: import org.apache.carbondata.core.datastore.page.encoding.compress.DirectCompressCodec;
1: import org.apache.carbondata.core.datastore.page.statistics.DummyStatsCollector;
1: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.format.LocalDictionaryChunk;
1: 
1: /**
1:  * Class to maintain page level dictionary. It will store all unique dictionary values
1:  * used in a page. This is required while writing blocklet level dictionary in carbondata
1:  * file
1:  */
1: public class PageLevelDictionary {
1: 
1:   /**
1:    * dictionary generator to generate dictionary values for page data
1:    */
1:   private LocalDictionaryGenerator localDictionaryGenerator;
1: 
1:   /**
1:    * set of dictionary surrogate key in this page
1:    */
1:   private BitSet usedDictionaryValues;
1: 
1:   private String columnName;
1: 
1:   private DataType dataType;
1: 
1:   public PageLevelDictionary(LocalDictionaryGenerator localDictionaryGenerator, String columnName,
0:       DataType dataType) {
1:     this.localDictionaryGenerator = localDictionaryGenerator;
1:     this.usedDictionaryValues = new BitSet();
1:     this.columnName = columnName;
1:     this.dataType = dataType;
1:   }
1: 
1:   /**
1:    * Below method will be used to get the dictionary value
1:    *
1:    * @param data column data
1:    * @return dictionary value
1:    * @throws DictionaryThresholdReachedException when threshold crossed for column
1:    */
1:   public int getDictionaryValue(byte[] data) throws DictionaryThresholdReachedException {
1:     int dictionaryValue = localDictionaryGenerator.generateDictionary(data);
1:     this.usedDictionaryValues.set(dictionaryValue);
1:     return dictionaryValue;
1:   }
1: 
1:   /**
1:    * Method to merge the dictionary value across pages
1:    *
1:    * @param pageLevelDictionary other page level dictionary
1:    */
1:   public void mergerDictionaryValues(PageLevelDictionary pageLevelDictionary) {
0:     usedDictionaryValues.and(pageLevelDictionary.usedDictionaryValues);
1:   }
1: 
1:   /**
1:    * Below method will be used to get the local dictionary chunk for writing
1:    * @TODO Support for numeric data type dictionary exclude columns
1:    * @return encoded local dictionary chunk
1:    * @throws MemoryException
1:    * in case of problem in encoding
1:    * @throws IOException
1:    * in case of problem in encoding
1:    */
1:   public LocalDictionaryChunk getLocalDictionaryChunkForBlocklet()
1:       throws MemoryException, IOException {
1:     // TODO support for actual data type dictionary ColumnSPEC
1:     ColumnType columnType = ColumnType.PLAIN_VALUE;
1:     if (DataTypes.VARCHAR == dataType) {
1:       columnType = ColumnType.PLAIN_LONG_VALUE;
1:     }
1:     TableSpec.ColumnSpec spec =
1:         TableSpec.ColumnSpec.newInstance(columnName, DataTypes.BYTE_ARRAY, columnType);
0:     ColumnPage dictionaryColumnPage =
0:         ColumnPage.newPage(spec, DataTypes.BYTE_ARRAY, usedDictionaryValues.cardinality());
1:     // TODO support data type specific stats collector for numeric data types
1:     dictionaryColumnPage.setStatsCollector(new DummyStatsCollector());
1:     int rowId = 0;
1:     for (int i = usedDictionaryValues.nextSetBit(0);
1:          i >= 0; i = usedDictionaryValues.nextSetBit(i + 1)) {
0:       dictionaryColumnPage
0:           .putData(rowId++, localDictionaryGenerator.getDictionaryKeyBasedOnValue(i));
1:     }
1:     // creating a encoder
1:     ColumnPageEncoder encoder = new DirectCompressCodec(DataTypes.BYTE_ARRAY).createEncoder(null);
1:     // get encoded dictionary values
1:     LocalDictionaryChunk localDictionaryChunk = encoder.encodeDictionary(dictionaryColumnPage);
1:     // set compressed dictionary values
0:     localDictionaryChunk.setDictionary_values(CompressorFactory.getInstance().getCompressor()
0:         .compressByte(usedDictionaryValues.toByteArray()));
1:     // free the dictionary page memory
1:     dictionaryColumnPage.freeMemory();
1:     return localDictionaryChunk;
1:   }
1: }
============================================================================