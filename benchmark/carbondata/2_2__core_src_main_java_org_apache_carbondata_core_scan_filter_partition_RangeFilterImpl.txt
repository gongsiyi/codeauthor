1:cdde3dd: /*
1:cdde3dd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdde3dd:  * contributor license agreements.  See the NOTICE file distributed with
1:cdde3dd:  * this work for additional information regarding copyright ownership.
1:cdde3dd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdde3dd:  * (the "License"); you may not use this file except in compliance with
1:cdde3dd:  * the License.  You may obtain a copy of the License at
1:cdde3dd:  *
1:cdde3dd:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cdde3dd:  *
1:cdde3dd:  * Unless required by applicable law or agreed to in writing, software
1:cdde3dd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdde3dd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdde3dd:  * See the License for the specific language governing permissions and
1:cdde3dd:  * limitations under the License.
1:cdde3dd:  */
1:cdde3dd: 
1:cdde3dd: package org.apache.carbondata.core.scan.filter.partition;
1:cdde3dd: 
1:71934e9: import java.text.SimpleDateFormat;
1:cdde3dd: import java.util.BitSet;
1:cdde3dd: 
1:71934e9: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:cdde3dd: import org.apache.carbondata.core.metadata.schema.PartitionInfo;
1:cdde3dd: import org.apache.carbondata.core.scan.expression.LiteralExpression;
1:cdde3dd: import org.apache.carbondata.core.scan.partition.ListPartitioner;
1:cdde3dd: import org.apache.carbondata.core.scan.partition.PartitionUtil;
1:cdde3dd: import org.apache.carbondata.core.scan.partition.Partitioner;
1:cdde3dd: import org.apache.carbondata.core.scan.partition.RangePartitioner;
1:de5346f: import org.apache.carbondata.core.util.ByteUtil;
1:71934e9: import org.apache.carbondata.core.util.CarbonProperties;
1:cdde3dd: 
1:cdde3dd: /**
1:cdde3dd:  * the implement of Range filter(include <=, <, >=, >)
1:cdde3dd:  */
1:cdde3dd: public class RangeFilterImpl implements PartitionFilterIntf {
1:cdde3dd: 
1:cdde3dd:   private LiteralExpression literal;
1:cdde3dd:   private boolean isGreaterThan;
1:cdde3dd:   private boolean isEqualTo;
1:cdde3dd:   private PartitionInfo partitionInfo;
1:cdde3dd: 
1:cdde3dd:   public RangeFilterImpl(LiteralExpression literal, boolean isGreaterThan, boolean isEqualTo,
1:cdde3dd:       PartitionInfo partitionInfo) {
1:cdde3dd:     this.literal = literal;
1:cdde3dd:     this.isGreaterThan = isGreaterThan;
1:cdde3dd:     this.isEqualTo = isEqualTo;
1:cdde3dd:     this.partitionInfo = partitionInfo;
1:cdde3dd:   }
1:cdde3dd: 
1:cdde3dd:   @Override public BitSet applyFilter(Partitioner partitioner) {
1:cdde3dd: 
1:71934e9:     SimpleDateFormat timestampFormatter = new SimpleDateFormat(CarbonProperties.getInstance()
1:71934e9:         .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:71934e9:             CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
1:71934e9: 
1:71934e9:     SimpleDateFormat dateFormatter = new SimpleDateFormat(CarbonProperties.getInstance()
1:71934e9:         .getProperty(CarbonCommonConstants.CARBON_DATE_FORMAT,
1:71934e9:             CarbonCommonConstants.CARBON_DATE_DEFAULT_FORMAT));
1:71934e9: 
1:cdde3dd:     switch (partitionInfo.getPartitionType()) {
1:cdde3dd:       case LIST:
1:cdde3dd:         Object filterValueOfList = PartitionUtil.getDataBasedOnDataTypeForFilter(
1:cdde3dd:             literal.getLiteralExpValue().toString(),
1:cdde3dd:             partitionInfo.getColumnSchemaList().get(0).getDataType());
1:c7aba5e:         if (filterValueOfList instanceof String) {
1:c7aba5e:           filterValueOfList = ByteUtil.toBytes((String)filterValueOfList);
1:c7aba5e:         }
1:cdde3dd:         return PartitionFilterUtil.getPartitionMapForRangeFilter(partitionInfo,
1:71934e9:             (ListPartitioner) partitioner, filterValueOfList, isGreaterThan, isEqualTo,
1:71934e9:             timestampFormatter, dateFormatter);
1:cdde3dd:       case RANGE:
1:cdde3dd:         Object filterValueOfRange = PartitionUtil.getDataBasedOnDataTypeForFilter(
1:cdde3dd:             literal.getLiteralExpValue().toString(),
1:cdde3dd:             partitionInfo.getColumnSchemaList().get(0).getDataType());
1:de5346f:         if (filterValueOfRange instanceof String) {
1:de5346f:           filterValueOfRange = ByteUtil.toBytes((String)filterValueOfRange);
1:de5346f:         }
1:cdde3dd:         return PartitionFilterUtil.getPartitionMapForRangeFilter(partitionInfo,
1:71934e9:             (RangePartitioner) partitioner, filterValueOfRange, isGreaterThan, isEqualTo,
1:71934e9:             timestampFormatter, dateFormatter);
1:cdde3dd:       default:
1:cdde3dd:         return PartitionUtil.generateBitSetBySize(partitioner.numPartitions(), true);
1:cdde3dd:     }
1:cdde3dd:   }
1:cdde3dd: 
1:cdde3dd: }
============================================================================
author:lionelcao
-------------------------------------------------------------------------------
commit:c7aba5e
/////////////////////////////////////////////////////////////////////////
1:         if (filterValueOfList instanceof String) {
1:           filterValueOfList = ByteUtil.toBytes((String)filterValueOfList);
1:         }
author:QiangCai
-------------------------------------------------------------------------------
commit:71934e9
/////////////////////////////////////////////////////////////////////////
1: import java.text.SimpleDateFormat;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
1:     SimpleDateFormat timestampFormatter = new SimpleDateFormat(CarbonProperties.getInstance()
1:         .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:             CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
1: 
1:     SimpleDateFormat dateFormatter = new SimpleDateFormat(CarbonProperties.getInstance()
1:         .getProperty(CarbonCommonConstants.CARBON_DATE_FORMAT,
1:             CarbonCommonConstants.CARBON_DATE_DEFAULT_FORMAT));
1: 
1:             (ListPartitioner) partitioner, filterValueOfList, isGreaterThan, isEqualTo,
1:             timestampFormatter, dateFormatter);
/////////////////////////////////////////////////////////////////////////
1:             (RangePartitioner) partitioner, filterValueOfRange, isGreaterThan, isEqualTo,
1:             timestampFormatter, dateFormatter);
commit:de5346f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.ByteUtil;
/////////////////////////////////////////////////////////////////////////
1:         if (filterValueOfRange instanceof String) {
1:           filterValueOfRange = ByteUtil.toBytes((String)filterValueOfRange);
1:         }
commit:cdde3dd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.filter.partition;
1: 
1: import java.util.BitSet;
1: 
1: import org.apache.carbondata.core.metadata.schema.PartitionInfo;
1: import org.apache.carbondata.core.scan.expression.LiteralExpression;
1: import org.apache.carbondata.core.scan.partition.ListPartitioner;
1: import org.apache.carbondata.core.scan.partition.PartitionUtil;
1: import org.apache.carbondata.core.scan.partition.Partitioner;
1: import org.apache.carbondata.core.scan.partition.RangePartitioner;
1: 
1: /**
1:  * the implement of Range filter(include <=, <, >=, >)
1:  */
1: public class RangeFilterImpl implements PartitionFilterIntf {
1: 
1:   private LiteralExpression literal;
1:   private boolean isGreaterThan;
1:   private boolean isEqualTo;
1:   private PartitionInfo partitionInfo;
1: 
1:   public RangeFilterImpl(LiteralExpression literal, boolean isGreaterThan, boolean isEqualTo,
1:       PartitionInfo partitionInfo) {
1:     this.literal = literal;
1:     this.isGreaterThan = isGreaterThan;
1:     this.isEqualTo = isEqualTo;
1:     this.partitionInfo = partitionInfo;
1:   }
1: 
1:   @Override public BitSet applyFilter(Partitioner partitioner) {
1: 
1:     switch (partitionInfo.getPartitionType()) {
1:       case LIST:
1:         Object filterValueOfList = PartitionUtil.getDataBasedOnDataTypeForFilter(
1:             literal.getLiteralExpValue().toString(),
1:             partitionInfo.getColumnSchemaList().get(0).getDataType());
1:         return PartitionFilterUtil.getPartitionMapForRangeFilter(partitionInfo,
0:             (ListPartitioner) partitioner, filterValueOfList, isGreaterThan, isEqualTo);
1:       case RANGE:
1:         Object filterValueOfRange = PartitionUtil.getDataBasedOnDataTypeForFilter(
1:             literal.getLiteralExpValue().toString(),
1:             partitionInfo.getColumnSchemaList().get(0).getDataType());
1:         return PartitionFilterUtil.getPartitionMapForRangeFilter(partitionInfo,
0:             (RangePartitioner) partitioner, filterValueOfRange, isGreaterThan, isEqualTo);
1:       default:
1:         return PartitionUtil.generateBitSetBySize(partitioner.numPartitions(), true);
1:     }
1:   }
1: 
1: }
============================================================================