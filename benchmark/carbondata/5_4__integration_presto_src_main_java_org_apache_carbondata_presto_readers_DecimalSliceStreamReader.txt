1:531dcd2: /*
1:531dcd2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:531dcd2:  * contributor license agreements.  See the NOTICE file distributed with
1:531dcd2:  * this work for additional information regarding copyright ownership.
1:531dcd2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:531dcd2:  * (the "License"); you may not use this file except in compliance with
1:531dcd2:  * the License.  You may obtain a copy of the License at
1:531dcd2:  *
1:531dcd2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:531dcd2:  *
1:531dcd2:  * Unless required by applicable law or agreed to in writing, software
1:531dcd2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:531dcd2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:531dcd2:  * See the License for the specific language governing permissions and
1:531dcd2:  * limitations under the License.
6:531dcd2:  */
14:531dcd2: 
1:531dcd2: package org.apache.carbondata.presto.readers;
1:1551a7c: 
1:531dcd2: import java.math.BigDecimal;
1:531dcd2: import java.math.BigInteger;
1:6add19a: import java.util.Objects;
1:1551a7c: 
1:d4a1577: import static java.math.RoundingMode.HALF_UP;
1:d4a1577: 
1:6add19a: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1:6add19a: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:a4c2ef5: import org.apache.carbondata.core.scan.result.vector.impl.CarbonColumnVectorImpl;
1:6add19a: import org.apache.carbondata.core.util.DataTypeUtil;
1:531dcd2: 
1:531dcd2: import com.facebook.presto.spi.block.Block;
1:531dcd2: import com.facebook.presto.spi.block.BlockBuilder;
1:531dcd2: import com.facebook.presto.spi.block.BlockBuilderStatus;
1:531dcd2: import com.facebook.presto.spi.type.DecimalType;
1:531dcd2: import com.facebook.presto.spi.type.Decimals;
1:531dcd2: import com.facebook.presto.spi.type.Type;
1:531dcd2: import io.airlift.slice.Slice;
1:531dcd2: 
1:531dcd2: import static com.facebook.presto.spi.type.Decimals.encodeUnscaledValue;
1:531dcd2: import static com.facebook.presto.spi.type.Decimals.isShortDecimal;
1:531dcd2: import static com.facebook.presto.spi.type.Decimals.rescale;
1:531dcd2: import static com.google.common.base.Preconditions.checkArgument;
1:531dcd2: import static com.google.common.base.Preconditions.checkState;
1:531dcd2: import static io.airlift.slice.Slices.utf8Slice;
1:d4a1577: 
1:531dcd2: 
6:531dcd2: /**
1:531dcd2:  * Reader for DecimalValues
1:531dcd2:  */
1:a4c2ef5: public class DecimalSliceStreamReader extends CarbonColumnVectorImpl
1:a4c2ef5:     implements PrestoVectorBlockBuilder {
1:531dcd2: 
1:531dcd2:   private final char[] buffer = new char[100];
1:a4c2ef5:   protected int batchSize;
1:a4c2ef5:   protected Type type;
1:a4c2ef5:   protected BlockBuilder builder;
1:a4c2ef5:   private Dictionary dictionary;
1:531dcd2: 
1:a4c2ef5:   public DecimalSliceStreamReader(int batchSize,
1:a4c2ef5:       org.apache.carbondata.core.metadata.datatype.DecimalType dataType, Dictionary dictionary) {
1:a4c2ef5:     super(batchSize, dataType);
1:a4c2ef5:     this.type = DecimalType.createDecimalType(dataType.getPrecision(), dataType.getScale());
1:a4c2ef5:     this.batchSize = batchSize;
1:a4c2ef5:     this.builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:6add19a:     this.dictionary = dictionary;
1:01b48fc:   }
1:01b48fc: 
1:a4c2ef5:   @Override public Block buildBlock() {
1:531dcd2:     return builder.build();
1:01b48fc:   }
1:1551a7c: 
1:a4c2ef5:   @Override public void setBatchSize(int batchSize) {
1:a4c2ef5:     this.batchSize = batchSize;
1:a4c2ef5:   }
1:a4c2ef5: 
1:a4c2ef5:   @Override public void putInt(int rowId, int value) {
1:a4c2ef5:     DecimalType decimalType = (DecimalType) type;
1:a4c2ef5:     Object data = DataTypeUtil.getDataBasedOnDataType(dictionary.getDictionaryValueForKey(value),
1:a4c2ef5:         DataTypes.createDecimalType(decimalType.getPrecision(), decimalType.getScale()));
1:a4c2ef5:     if (Objects.isNull(data)) {
1:a4c2ef5:       builder.appendNull();
1:a4c2ef5:     } else {
1:a4c2ef5:       decimalBlockWriter((BigDecimal) data);
1:a4c2ef5:     }
1:a4c2ef5:   }
1:a4c2ef5: 
1:a4c2ef5:   @Override public void putDecimal(int rowId, BigDecimal value, int precision) {
1:a4c2ef5:     decimalBlockWriter(value);
1:a4c2ef5:   }
1:a4c2ef5: 
1:a4c2ef5:   @Override public void putNull(int rowId) {
1:a4c2ef5:     builder.appendNull();
1:a4c2ef5:   }
1:a4c2ef5: 
1:a4c2ef5:   @Override public void reset() {
1:a4c2ef5:     builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:a4c2ef5:   }
1:a4c2ef5: 
1:a4c2ef5:   private void decimalBlockWriter(BigDecimal value) {
1:a4c2ef5:     if (isShortDecimal(type)) {
1:a4c2ef5:       long rescaledDecimal = Decimals.rescale(value.unscaledValue().longValue(), value.scale(),
1:a4c2ef5:           ((DecimalType) type).getScale());
1:a4c2ef5:       type.writeLong(builder, rescaledDecimal);
1:a4c2ef5:     } else {
1:a4c2ef5:       Slice slice = getSlice(value, type);
1:a4c2ef5:       type.writeSlice(builder, parseSlice((DecimalType) type, slice, slice.length()));
1:a4c2ef5:     }
1:a4c2ef5:   }
1:a4c2ef5: 
1:531dcd2:   private Slice getSlice(Object value, Type type) {
1:531dcd2:     if (type instanceof DecimalType) {
1:531dcd2:       DecimalType actual = (DecimalType) type;
1:531dcd2:       BigDecimal bigDecimalValue = (BigDecimal) value;
2:01b48fc:       if (isShortDecimal(type)) {
1:531dcd2:         return utf8Slice(value.toString());
1:01b48fc:       } else {
1:531dcd2:         if (bigDecimalValue.scale() > actual.getScale()) {
1:531dcd2:           BigInteger unscaledDecimal =
1:531dcd2:               rescale(bigDecimalValue.unscaledValue(), bigDecimalValue.scale(),
1:531dcd2:                   bigDecimalValue.scale());
1:531dcd2:           Slice decimalSlice = Decimals.encodeUnscaledValue(unscaledDecimal);
1:531dcd2:           return utf8Slice(Decimals.toString(decimalSlice, actual.getScale()));
1:01b48fc:         } else {
1:531dcd2:           BigInteger unscaledDecimal =
1:531dcd2:               rescale(bigDecimalValue.unscaledValue(), bigDecimalValue.scale(), actual.getScale());
1:531dcd2:           Slice decimalSlice = Decimals.encodeUnscaledValue(unscaledDecimal);
1:531dcd2:           return utf8Slice(Decimals.toString(decimalSlice, actual.getScale()));
1:01b48fc:         }
1:01b48fc:       }
1:01b48fc:     } else {
1:531dcd2:       return utf8Slice(value.toString());
1:01b48fc:     }
1:01b48fc:   }
1:01b48fc: 
1:a4c2ef5:   private Slice parseSlice(DecimalType type, Slice slice, int length) {
1:a4c2ef5:     BigDecimal decimal = parseBigDecimal(type, slice, length);
1:531dcd2:     return encodeUnscaledValue(decimal.unscaledValue());
1:1551a7c:   }
1:1551a7c: 
1:a4c2ef5:   private BigDecimal parseBigDecimal(DecimalType type, Slice slice, int length) {
1:a4c2ef5:     int offset = 0;
1:531dcd2:     checkArgument(length < buffer.length);
1:531dcd2:     for (int i = 0; i < length; i++) {
1:531dcd2:       buffer[i] = (char) slice.getByte(offset + i);
6:1551a7c:     }
1:531dcd2:     BigDecimal decimal = new BigDecimal(buffer, 0, length);
1:531dcd2:     checkState(decimal.scale() <= type.getScale(),
1:531dcd2:         "Read decimal value scale larger than column scale");
1:531dcd2:     decimal = decimal.setScale(type.getScale(), HALF_UP);
1:531dcd2:     checkState(decimal.precision() <= type.getPrecision(),
1:531dcd2:         "Read decimal precision larger than column precision");
1:531dcd2:     return decimal;
1:1551a7c:   }
1:1551a7c: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:d4a1577
/////////////////////////////////////////////////////////////////////////
1: import static java.math.RoundingMode.HALF_UP;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:sv71294
-------------------------------------------------------------------------------
commit:a4c2ef5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.result.vector.impl.CarbonColumnVectorImpl;
/////////////////////////////////////////////////////////////////////////
1: public class DecimalSliceStreamReader extends CarbonColumnVectorImpl
1:     implements PrestoVectorBlockBuilder {
1:   protected int batchSize;
1:   protected Type type;
1:   protected BlockBuilder builder;
1:   private Dictionary dictionary;
1:   public DecimalSliceStreamReader(int batchSize,
1:       org.apache.carbondata.core.metadata.datatype.DecimalType dataType, Dictionary dictionary) {
1:     super(batchSize, dataType);
1:     this.type = DecimalType.createDecimalType(dataType.getPrecision(), dataType.getScale());
1:     this.batchSize = batchSize;
1:     this.builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:   @Override public Block buildBlock() {
1:   @Override public void setBatchSize(int batchSize) {
1:     this.batchSize = batchSize;
1:   }
1: 
1:   @Override public void putInt(int rowId, int value) {
1:     DecimalType decimalType = (DecimalType) type;
1:     Object data = DataTypeUtil.getDataBasedOnDataType(dictionary.getDictionaryValueForKey(value),
1:         DataTypes.createDecimalType(decimalType.getPrecision(), decimalType.getScale()));
1:     if (Objects.isNull(data)) {
1:       builder.appendNull();
1:     } else {
1:       decimalBlockWriter((BigDecimal) data);
1:     }
1:   }
1: 
1:   @Override public void putDecimal(int rowId, BigDecimal value, int precision) {
1:     decimalBlockWriter(value);
1:   }
1: 
1:   @Override public void putNull(int rowId) {
1:     builder.appendNull();
1:   }
1: 
1:   @Override public void reset() {
1:     builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:   }
1: 
1:   private void decimalBlockWriter(BigDecimal value) {
1:     if (isShortDecimal(type)) {
1:       long rescaledDecimal = Decimals.rescale(value.unscaledValue().longValue(), value.scale(),
1:           ((DecimalType) type).getScale());
1:       type.writeLong(builder, rescaledDecimal);
1:     } else {
1:       Slice slice = getSlice(value, type);
1:       type.writeSlice(builder, parseSlice((DecimalType) type, slice, slice.length()));
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   private Slice parseSlice(DecimalType type, Slice slice, int length) {
1:     BigDecimal decimal = parseBigDecimal(type, slice, length);
1:   private BigDecimal parseBigDecimal(DecimalType type, Slice slice, int length) {
1:     int offset = 0;
/////////////////////////////////////////////////////////////////////////
author:Bhavya
-------------------------------------------------------------------------------
commit:01b48fc
/////////////////////////////////////////////////////////////////////////
0:   public Block readBlock(Type type) throws IOException {
0:     if (isVectorReader) {
0:         if (isDictionary) {
1:           if (isShortDecimal(type)) {
0:             populateShortDictionaryVector(type, numberOfRows, builder);
0:             populateLongDictionaryVector(type, numberOfRows, builder);
1:           }
1:         } else {
0:           if (columnVector.anyNullsSet()) {
0:             handleNullInVector(type, numberOfRows, builder);
1:           } else {
1:             if (isShortDecimal(type)) {
0:               populateShortDecimalVector(type, numberOfRows, builder);
1:             } else {
0:               populateLongDecimalVector(type, numberOfRows, builder);
1:             }
0:         for (int i = 0; i < numberOfRows; i++) {
/////////////////////////////////////////////////////////////////////////
0:     for (int i = 0; i < numberOfRows; i++) {
0:       BigDecimal decimalValue = (BigDecimal) columnVector.getData(i);
0:       long rescaledDecimal = Decimals
0:           .rescale(decimalValue.unscaledValue().longValue(), decimalValue.scale(),
0:               decimalType.getScale());
0:       type.writeLong(builder, rescaledDecimal);
1:     }
1:   }
0:   private void populateLongDecimalVector(Type type, int numberOfRows, BlockBuilder builder) {
0:     for (int i = 0; i < numberOfRows; i++) {
0:       Slice slice = getSlice((columnVector.getData(i)), type);
0:       type.writeSlice(builder, parseSlice((DecimalType) type, slice, 0, slice.length()));
1:     }
1:   }
1: 
0:   private void populateShortDictionaryVector(Type type, int numberOfRows, BlockBuilder builder) {
0:     DecimalType decimalType = (DecimalType) type;
0:     for (int i = 0; i < numberOfRows; i++) {
0:       int value = (int) columnVector.getData(i);
0:       Object data = DataTypeUtil.getDataBasedOnDataType(dictionary.getDictionaryValueForKey(value),
0:           DataTypes.createDecimalType(decimalType.getPrecision(), decimalType.getScale()));
0:       if (Objects.isNull(data)) {
0:         builder.appendNull();
0:       } else {
0:         BigDecimal decimalValue = (BigDecimal) data;
0:         long rescaledDecimal = Decimals
0:             .rescale(decimalValue.unscaledValue().longValue(), decimalValue.scale(),
0:                 decimalType.getScale());
0:   private void populateLongDictionaryVector(Type type, int numberOfRows, BlockBuilder builder) {
0:     DecimalType decimalType = (DecimalType) type;
0:     for (int i = 0; i < numberOfRows; i++) {
0:       int value = (int) columnVector.getData(i);
0:       Object data = DataTypeUtil.getDataBasedOnDataType(dictionary.getDictionaryValueForKey(value),
0:           DataTypes.createDecimalType(decimalType.getPrecision(), decimalType.getScale()));
0:       if (Objects.isNull(data)) {
0:         builder.appendNull();
0:       } else {
0:         BigDecimal decimalValue = (BigDecimal) data;
0:         Slice slice = getSlice(decimalValue, type);
1: 
commit:e5e74fc
/////////////////////////////////////////////////////////////////////////
0:           BigDecimal decimalValue = (BigDecimal)columnVector.getData(i);
0:               getSlice(columnVector.getData(i), type);
/////////////////////////////////////////////////////////////////////////
0:       BigDecimal decimalValue = (BigDecimal)columnVector.getData(i);
/////////////////////////////////////////////////////////////////////////
0:       Slice slice = getSlice((BigDecimal)columnVector.getData(i), type);
commit:ccb6560
/////////////////////////////////////////////////////////////////////////
0:           BigDecimal decimalValue = columnVector.getDecimal(i, precision, scale).toJavaBigDecimal();
0:           long rescaledDecimal = Decimals.rescale(decimalValue.unscaledValue().longValue(),
0:               decimalValue.scale(), scale);
commit:1551a7c
/////////////////////////////////////////////////////////////////////////
0:         if(columnVector.anyNullsSet())
0:         {
0:           handleNullInVector(type, numberOfRows, builder, scale, precision);
0:         } else {
0:           if(isShortDecimal(type)) {
0:             populateShortDecimalVector(type, numberOfRows, builder, scale, precision);
0:             populateLongDecimalVector(type, numberOfRows, builder, scale, precision);
1:    }
/////////////////////////////////////////////////////////////////////////
1: 
0:   private void handleNullInVector(Type type, int numberOfRows, BlockBuilder builder, int scale,
0:       int precision) {
0:     for (int i = 0; i < numberOfRows; i++) {
0:       if (columnVector.isNullAt(i)) {
0:         builder.appendNull();
0:       } else {
0:         if (isShortDecimal(type)) {
0:           long rescaledDecimal = Decimals
0:               .rescale(columnVector.getDecimal(i, precision, scale).toLong(),
0:                   columnVector.getDecimal(i, precision, scale).scale(), scale);
0:           type.writeLong(builder, rescaledDecimal);
0:         } else {
0:           Slice slice =
0:               getSlice(columnVector.getDecimal(i, precision, scale).toJavaBigDecimal(), type);
0:           type.writeSlice(builder, parseSlice((DecimalType) type, slice, 0, slice.length()));
1:         }
1:       }
1:     }
1:   }
1: 
0:   private void populateShortDecimalVector(Type type, int numberOfRows, BlockBuilder builder,
0:       int scale, int precision) {
0:     for (int i = 0; i < numberOfRows; i++) {
0:       BigDecimal decimalValue = columnVector.getDecimal(i, precision, scale).toJavaBigDecimal();
0:       long rescaledDecimal = Decimals.rescale(decimalValue.unscaledValue().longValue(),
0:           decimalValue.scale(), scale);
0:       type.writeLong(builder, rescaledDecimal);
1:     }
1:   }
1: 
0:   private void populateLongDecimalVector(Type type, int numberOfRows, BlockBuilder builder,
0:       int scale, int precision) {
0:     for (int i = 0; i < numberOfRows; i++) {
0:       Slice slice = getSlice(columnVector.getDecimal(i, precision, scale).toJavaBigDecimal(), type);
0:       type.writeSlice(builder, parseSlice((DecimalType) type, slice, 0, slice.length()));
1:     }
1:   }
1: 
commit:531dcd2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto.readers;
1: 
0: import java.io.IOException;
1: import java.math.BigDecimal;
1: import java.math.BigInteger;
1: 
1: import com.facebook.presto.spi.block.Block;
1: import com.facebook.presto.spi.block.BlockBuilder;
1: import com.facebook.presto.spi.block.BlockBuilderStatus;
1: import com.facebook.presto.spi.type.DecimalType;
1: import com.facebook.presto.spi.type.Decimals;
1: import com.facebook.presto.spi.type.Type;
1: import io.airlift.slice.Slice;
1: 
1: import static com.facebook.presto.spi.type.Decimals.encodeUnscaledValue;
1: import static com.facebook.presto.spi.type.Decimals.isShortDecimal;
1: import static com.facebook.presto.spi.type.Decimals.rescale;
1: import static com.google.common.base.Preconditions.checkArgument;
1: import static com.google.common.base.Preconditions.checkState;
1: import static io.airlift.slice.Slices.utf8Slice;
0: import static java.math.RoundingMode.HALF_UP;
1: 
1: /**
1:  * Reader for DecimalValues
1:  */
0: public class DecimalSliceStreamReader  extends AbstractStreamReader {
1: 
1: 
1:   private final char[] buffer = new char[100];
1: 
0:   public DecimalSliceStreamReader() {
1: 
0:   }
1: 
1:   /**
0:    * Create Block for DecimalType
0:    * @param type
0:    * @return
0:    * @throws IOException
1:    */
0:   public Block readBlock(Type type)
0:       throws IOException
0:   {
0:     int numberOfRows = 0;
0:     BlockBuilder builder = null;
0:     if(isVectorReader) {
0:       numberOfRows = batchSize;
0:       builder = type.createBlockBuilder(new BlockBuilderStatus(), numberOfRows);
0:       int scale = ((DecimalType)type).getScale();
0:       int precision = ((DecimalType)type).getPrecision();
0:       if (columnVector != null) {
0:         for(int i = 0; i < numberOfRows ; i++ ){
0:           if(columnVector.isNullAt(i)) {
0:             builder.appendNull();
0:           } else {
0:             Slice slice =
0:                 getSlice(columnVector.getDecimal(i, precision, scale).toJavaBigDecimal(), type);
0:             if (isShortDecimal(type)) {
0:               type.writeLong(builder, parseLong((DecimalType) type, slice, 0, slice.length()));
0:             } else {
0:               type.writeSlice(builder, parseSlice((DecimalType) type, slice, 0, slice.length()));
0:             }
0:           }
0:         }
0:       }
1: 
0:     } else {
0:       if (streamData != null) {
0:         numberOfRows = streamData.length;
0:         builder = type.createBlockBuilder(new BlockBuilderStatus(), numberOfRows);
0:         for(int i = 0; i < numberOfRows ; i++ ){
0:           Slice slice = getSlice(streamData[i], type);
0:           if (isShortDecimal(type)) {
0:             type.writeLong(builder, parseLong((DecimalType) type, slice, 0, slice.length()));
0:           } else {
0:             type.writeSlice(builder, parseSlice((DecimalType) type, slice, 0, slice.length()));
0:           }
0:         }
0:       }
0:     }
1: 
1:     return builder.build();
0:   }
1: 
1:   /**
0:    * Function to getSlice from Decimal Object
0:    * @param value
0:    * @param type
0:    * @return
1:    */
1:   private Slice getSlice(Object value, Type type) {
1:     if (type instanceof DecimalType) {
1:       DecimalType actual = (DecimalType) type;
1:       BigDecimal bigDecimalValue = (BigDecimal) value;
0:       if (isShortDecimal(type)) {
1:         return utf8Slice(value.toString());
0:       } else {
1:         if (bigDecimalValue.scale() > actual.getScale()) {
1:           BigInteger unscaledDecimal =
1:               rescale(bigDecimalValue.unscaledValue(), bigDecimalValue.scale(),
1:                   bigDecimalValue.scale());
1:           Slice decimalSlice = Decimals.encodeUnscaledValue(unscaledDecimal);
1:           return utf8Slice(Decimals.toString(decimalSlice, actual.getScale()));
0:         } else {
1:           BigInteger unscaledDecimal =
1:               rescale(bigDecimalValue.unscaledValue(), bigDecimalValue.scale(), actual.getScale());
1:           Slice decimalSlice = Decimals.encodeUnscaledValue(unscaledDecimal);
1:           return utf8Slice(Decimals.toString(decimalSlice, actual.getScale()));
1: 
0:         }
1: 
0:       }
0:     } else {
1:       return utf8Slice(value.toString());
0:     }
0:   }
1: 
1:   /**
0:    * Function to parse ShortDecimalType as it is internally treated as Long
0:    * @param type
0:    * @param slice
0:    * @param offset
0:    * @param length
0:    * @return
1:    */
0:   private long parseLong(DecimalType type, Slice slice, int offset, int length) {
0:     BigDecimal decimal = parseBigDecimal(type, slice, offset, length);
0:     return decimal.unscaledValue().longValue();
0:   }
1: 
1:   /**
0:    * Function for parsing the Slice
0:    * @param type
0:    * @param slice
0:    * @param offset
0:    * @param length
0:    * @return
1:    */
0:   private Slice parseSlice(DecimalType type, Slice slice, int offset, int length) {
0:     BigDecimal decimal = parseBigDecimal(type, slice, offset, length);
1:     return encodeUnscaledValue(decimal.unscaledValue());
0:   }
1: 
1:   /**
0:    * Function for parsing the BigDecimal
0:    * @param type
0:    * @param slice
0:    * @param offset
0:    * @param length
0:    * @return
1:    */
0:   private BigDecimal parseBigDecimal(DecimalType type, Slice slice, int offset, int length) {
1:     checkArgument(length < buffer.length);
1:     for (int i = 0; i < length; i++) {
1:       buffer[i] = (char) slice.getByte(offset + i);
0:     }
1:     BigDecimal decimal = new BigDecimal(buffer, 0, length);
1:     checkState(decimal.scale() <= type.getScale(),
1:         "Read decimal value scale larger than column scale");
1:     decimal = decimal.setScale(type.getScale(), HALF_UP);
1:     checkState(decimal.precision() <= type.getPrecision(),
1:         "Read decimal precision larger than column precision");
1:     return decimal;
1: 
0:   }
0: }
author:anubhav100
-------------------------------------------------------------------------------
commit:6add19a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Objects;
0: 
1: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.util.DataTypeUtil;
/////////////////////////////////////////////////////////////////////////
0:   private Dictionary dictionary;
0:   private boolean isDictionary;
0: 
/////////////////////////////////////////////////////////////////////////
0:   public DecimalSliceStreamReader(boolean isDictionary, Dictionary dictionary) {
1:     this.dictionary = dictionary;
0:     this.isDictionary = isDictionary;
0:   }
0: 
/////////////////////////////////////////////////////////////////////////
0:           handleNullInVector(type, numberOfRows, builder);
0:             populateShortDecimalVector(type, numberOfRows, builder);
0:             populateLongDecimalVector(type, numberOfRows, builder);
0:       }
/////////////////////////////////////////////////////////////////////////
0:   private void handleNullInVector(Type type, int numberOfRows, BlockBuilder builder) {
/////////////////////////////////////////////////////////////////////////
0:               decimalValue.scale(),((DecimalType) type).getScale());
0:           Slice slice = getSlice(columnVector.getData(i), type);
0:   private void populateShortDecimalVector(Type type, int numberOfRows, BlockBuilder builder) {
0:     DecimalType decimalType = (DecimalType) type;
0: 
0:     if (isDictionary) {
0:       for (int i = 0; i < numberOfRows; i++) {
0:         int value = (int)columnVector.getData(i);
0:         Object data = DataTypeUtil
0:             .getDataBasedOnDataType(dictionary.getDictionaryValueForKey(value), DataTypes.createDecimalType(decimalType.getPrecision(), decimalType.getScale()));
0:         if(Objects.isNull(data)) {
0:           builder.appendNull();
0:         } else {
0:           BigDecimal decimalValue = (BigDecimal) data;
0:           long rescaledDecimal =
0:               Decimals.rescale(decimalValue.unscaledValue().longValue(), decimalValue.scale(),decimalType.getScale());
0:           type.writeLong(builder, rescaledDecimal);
0:         }
0:       }
0:     } else {
0:       for (int i = 0; i < numberOfRows; i++) {
0:         BigDecimal decimalValue = (BigDecimal) columnVector.getData(i);
0:         long rescaledDecimal =
0:             Decimals.rescale(decimalValue.unscaledValue().longValue(), decimalValue.scale(),decimalType.getScale());
0:         type.writeLong(builder, rescaledDecimal);
0:       }
0:   private void populateLongDecimalVector(Type type, int numberOfRows, BlockBuilder builder) {
0:     if (isDictionary) {
0:       for (int i = 0; i < numberOfRows; i++) {
0:         int value = (int) columnVector.getData(i);
0:         DecimalType decimalType = (DecimalType) type;
0:         Object data = DataTypeUtil
0:             .getDataBasedOnDataType(dictionary.getDictionaryValueForKey(value), DataTypes.createDecimalType(decimalType.getPrecision(), decimalType.getScale()));
0:         if(Objects.isNull(data)) {
0:           builder.appendNull();
0:         } else {
0:           BigDecimal decimalValue = (BigDecimal) data;
0:           Slice slice = getSlice(decimalValue, type);
0:           type.writeSlice(builder, parseSlice((DecimalType) type, slice, 0, slice.length()));
0:         }
0:       }
0:     } else {
0:       for (int i = 0; i < numberOfRows; i++) {
0:         Slice slice = getSlice((columnVector.getData(i)), type);
0:         type.writeSlice(builder, parseSlice((DecimalType) type, slice, 0, slice.length()));
0:       }
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:590bbb9
/////////////////////////////////////////////////////////////////////////
0:     if (builder == null) {
0:       return null;
0:     }
============================================================================