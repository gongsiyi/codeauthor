1:f1f9348: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:f1f9348:  *
1:f1f9348:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f1f9348:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:f1f9348:  */
1:349c59c: package org.apache.carbondata.processing.loading.sort.unsafe.holder;
2:f1f9348: 
1:f1f9348: import org.apache.carbondata.common.logging.LogService;
1:f1f9348: import org.apache.carbondata.common.logging.LogServiceFactory;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.comparator.UnsafeRowComparator;
1:f1f9348: 
1:f1f9348: /**
1:f1f9348:  * It is used for merging unsafe inmemory intermediate data
1:f1f9348:  */
1:f1f9348: public class UnsafeInmemoryMergeHolder implements Comparable<UnsafeInmemoryMergeHolder> {
1:f1f9348: 
1:f1f9348:   private static final LogService LOGGER =
1:f1f9348:       LogServiceFactory.getLogService(UnsafeInmemoryMergeHolder.class.getName());
1:f1f9348: 
1:f1f9348:   private int counter;
1:f1f9348: 
1:f1f9348:   private int actualSize;
1:f1f9348: 
1:f1f9348:   private UnsafeCarbonRowPage rowPage;
1:f1f9348: 
1:f1f9348:   private UnsafeCarbonRowForMerge currentRow;
1:f1f9348: 
1:f1f9348:   private long address;
1:f1f9348: 
1:f1f9348:   private UnsafeRowComparator comparator;
1:f1f9348: 
1:f1f9348:   private Object baseObject;
1:f1f9348: 
1:bfa306b:   private byte index;
1:bfa306b: 
1:f1f9348:   public UnsafeInmemoryMergeHolder(UnsafeCarbonRowPage rowPage, byte index) {
1:f1f9348:     this.actualSize = rowPage.getBuffer().getActualSize();
1:f1f9348:     this.rowPage = rowPage;
1:873c3de:     LOGGER.info("Processing unsafe inmemory rows page with size : " + actualSize);
1:f1f9348:     this.comparator = new UnsafeRowComparator(rowPage);
1:f1f9348:     this.baseObject = rowPage.getDataBlock().getBaseObject();
1:f1f9348:     currentRow = new UnsafeCarbonRowForMerge();
1:bfa306b:     this.index = index;
2:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public boolean hasNext() {
1:f1f9348:     if (counter < actualSize) {
1:f1f9348:       return true;
1:f1f9348:     }
1:f1f9348:     return false;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public void readRow() {
1:f1f9348:     address = rowPage.getBuffer().get(counter);
1:bfa306b:     currentRow = new UnsafeCarbonRowForMerge();
1:f1f9348:     currentRow.address = address + rowPage.getDataBlock().getBaseOffset();
1:bfa306b:     currentRow.index = index;
1:f1f9348:     counter++;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public UnsafeCarbonRowForMerge getRow() {
1:f1f9348:     return currentRow;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   @Override public int compareTo(UnsafeInmemoryMergeHolder o) {
1:f1f9348:     return comparator.compare(currentRow, baseObject, o.getRow(), o.getBaseObject());
1:f1f9348:   }
1:f1f9348: 
1:06b0d08:   @Override public boolean equals(Object obj) {
1:06b0d08:     if (this == obj) {
1:06b0d08:       return true;
1:06b0d08:     }
1:06b0d08: 
1:06b0d08:     if (!(obj instanceof UnsafeInmemoryMergeHolder)) {
1:06b0d08:       return false;
1:06b0d08:     }
1:06b0d08: 
1:06b0d08:     UnsafeInmemoryMergeHolder o = (UnsafeInmemoryMergeHolder)obj;
1:06b0d08:     return this == o;
1:06b0d08:   }
1:06b0d08: 
1:06b0d08:   @Override public int hashCode() {
1:06b0d08:     return super.hashCode();
1:06b0d08:   }
1:06b0d08: 
1:f1f9348:   public Object getBaseObject() {
1:f1f9348:     return baseObject;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public void close() {
1:f1f9348:     rowPage.freeMemory();
1:f1f9348:   }
1:f1f9348: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:873c3de
/////////////////////////////////////////////////////////////////////////
1:     LOGGER.info("Processing unsafe inmemory rows page with size : " + actualSize);
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.sort.unsafe.holder;
1: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1: import org.apache.carbondata.processing.loading.sort.unsafe.comparator.UnsafeRowComparator;
author:Raghunandan S
-------------------------------------------------------------------------------
commit:06b0d08
/////////////////////////////////////////////////////////////////////////
1:   @Override public boolean equals(Object obj) {
1:     if (this == obj) {
1:       return true;
1:     }
1: 
1:     if (!(obj instanceof UnsafeInmemoryMergeHolder)) {
1:       return false;
1:     }
1: 
1:     UnsafeInmemoryMergeHolder o = (UnsafeInmemoryMergeHolder)obj;
1:     return this == o;
1:   }
1: 
1:   @Override public int hashCode() {
1:     return super.hashCode();
1:   }
1: 
author:ravipesala
-------------------------------------------------------------------------------
commit:bfa306b
/////////////////////////////////////////////////////////////////////////
1:   private byte index;
1: 
/////////////////////////////////////////////////////////////////////////
1:     this.index = index;
/////////////////////////////////////////////////////////////////////////
1:     currentRow = new UnsafeCarbonRowForMerge();
1:     currentRow.index = index;
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.sort.unsafe.holder;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.UnsafeCarbonRowPage;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.comparator.UnsafeRowComparator;
1: 
1: /**
1:  * It is used for merging unsafe inmemory intermediate data
1:  */
1: public class UnsafeInmemoryMergeHolder implements Comparable<UnsafeInmemoryMergeHolder> {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(UnsafeInmemoryMergeHolder.class.getName());
1: 
1:   private int counter;
1: 
1:   private int actualSize;
1: 
1:   private UnsafeCarbonRowPage rowPage;
1: 
1:   private UnsafeCarbonRowForMerge currentRow;
1: 
1:   private long address;
1: 
1:   private UnsafeRowComparator comparator;
1: 
1:   private Object baseObject;
1: 
1:   public UnsafeInmemoryMergeHolder(UnsafeCarbonRowPage rowPage, byte index) {
1:     this.actualSize = rowPage.getBuffer().getActualSize();
1:     this.rowPage = rowPage;
0:     LOGGER.audit("Processing unsafe inmemory rows page with size : " + actualSize);
1:     this.comparator = new UnsafeRowComparator(rowPage);
1:     this.baseObject = rowPage.getDataBlock().getBaseObject();
1:     currentRow = new UnsafeCarbonRowForMerge();
0:     currentRow.index = index;
1:   }
1: 
1:   public boolean hasNext() {
1:     if (counter < actualSize) {
1:       return true;
1:     }
1:     return false;
1:   }
1: 
1:   public void readRow() {
1:     address = rowPage.getBuffer().get(counter);
1:     currentRow.address = address + rowPage.getDataBlock().getBaseOffset();
1:     counter++;
1:   }
1: 
1:   public UnsafeCarbonRowForMerge getRow() {
1:     return currentRow;
1:   }
1: 
1:   @Override public int compareTo(UnsafeInmemoryMergeHolder o) {
1:     return comparator.compare(currentRow, baseObject, o.getRow(), o.getBaseObject());
1:   }
1: 
0:   public int numberOfRows() {
0:     return actualSize;
1:   }
1: 
1:   public Object getBaseObject() {
1:     return baseObject;
1:   }
1: 
1:   public void close() {
1:     rowPage.freeMemory();
1:   }
1: }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:3fe6903
/////////////////////////////////////////////////////////////////////////
============================================================================