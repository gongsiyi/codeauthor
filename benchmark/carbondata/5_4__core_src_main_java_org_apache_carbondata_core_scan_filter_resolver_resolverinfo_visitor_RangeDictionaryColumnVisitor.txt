1:c2e4eb2: /*
1:c2e4eb2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c2e4eb2:  * contributor license agreements.  See the NOTICE file distributed with
1:c2e4eb2:  * this work for additional information regarding copyright ownership.
1:c2e4eb2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c2e4eb2:  * (the "License"); you may not use this file except in compliance with
1:c2e4eb2:  * the License.  You may obtain a copy of the License at
1:c2e4eb2:  *
1:c2e4eb2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:c2e4eb2:  *
1:c2e4eb2:  * Unless required by applicable law or agreed to in writing, software
1:c2e4eb2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c2e4eb2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c2e4eb2:  * See the License for the specific language governing permissions and
1:c2e4eb2:  * limitations under the License.
1:c2e4eb2:  */
1:c2e4eb2: 
1:c2e4eb2: package org.apache.carbondata.core.scan.filter.resolver.resolverinfo.visitor;
1:c2e4eb2: 
1:c2e4eb2: import java.io.IOException;
1:c2e4eb2: import java.util.Collections;
1:c2e4eb2: 
1:c2e4eb2: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1:266c473: import org.apache.carbondata.core.scan.filter.ColumnFilterInfo;
1:c2e4eb2: import org.apache.carbondata.core.scan.filter.FilterUtil;
1:c2e4eb2: import org.apache.carbondata.core.scan.filter.resolver.metadata.FilterResolverMetadata;
1:266c473: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.ColumnResolvedFilterInfo;
1:c2e4eb2: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;
1:c2e4eb2: 
1:c2e4eb2: public class RangeDictionaryColumnVisitor extends DictionaryColumnVisitor
1:c2e4eb2:     implements ResolvedFilterInfoVisitorIntf {
1:c2e4eb2:   /**
1:c2e4eb2:    * This Visitor method is used to populate the visitableObj with direct dictionary filter details
1:c2e4eb2:    * where the filters values will be resolve using dictionary cache.
1:c2e4eb2:    *
1:c2e4eb2:    * @param visitableObj
1:c2e4eb2:    * @param metadata
1:c2e4eb2:    * @throws FilterUnsupportedException,if exception occurs while evaluating
1:c2e4eb2:    *                                       filter models.
1:c2e4eb2:    * @throws IOException
1:c2e4eb2:    * @throws FilterUnsupportedException
1:c2e4eb2:    */
1:266c473:   public void populateFilterResolvedInfo(ColumnResolvedFilterInfo visitableObj,
1:c2e4eb2:       FilterResolverMetadata metadata) throws FilterUnsupportedException, IOException {
1:bb0b347:     if (visitableObj instanceof DimColumnResolvedFilterInfo) {
1:d3a09e2:       DimColumnResolvedFilterInfo resolveDimension = (DimColumnResolvedFilterInfo) visitableObj;
1:d3a09e2:       ColumnFilterInfo resolvedFilterObject = null;
1:d3a09e2:       resolvedFilterObject = FilterUtil
1:d3a09e2:           .getFilterListForAllValues(metadata.getTableIdentifier(), metadata.getExpression(),
1:2c0fa10:               metadata.getColumnExpression(), metadata.isIncludeFilter(), true);
1:c2e4eb2: 
1:d3a09e2:       if (!metadata.isIncludeFilter() && null != resolvedFilterObject) {
1:d3a09e2:         // Adding default surrogate key of null member inorder to not display the same while
1:d3a09e2:         // displaying the report as per hive compatibility.
1:d2319f0:         if (!resolvedFilterObject.getExcludeFilterList()
1:d2319f0:             .contains(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY)) {
1:d2319f0:           resolvedFilterObject.getExcludeFilterList()
1:d2319f0:               .add(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY);
1:d2319f0:           Collections.sort(resolvedFilterObject.getFilterList());
1:d2319f0:         }
1:bb0b347:       }
1:d3a09e2:       resolveDimension.setFilterValues(resolvedFilterObject);
1:500654e:     }
2:c2e4eb2:   }
1:c2e4eb2: }
============================================================================
author:dhatchayani
-------------------------------------------------------------------------------
commit:2c0fa10
/////////////////////////////////////////////////////////////////////////
1:               metadata.getColumnExpression(), metadata.isIncludeFilter(), true);
commit:d2319f0
/////////////////////////////////////////////////////////////////////////
0:               metadata.getTableProvider(), true);
1:         if (!resolvedFilterObject.getExcludeFilterList()
1:             .contains(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY)) {
1:           resolvedFilterObject.getExcludeFilterList()
1:               .add(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY);
1:           Collections.sort(resolvedFilterObject.getFilterList());
1:         }
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
1:     DimColumnResolvedFilterInfo resolveDimension = (DimColumnResolvedFilterInfo) visitableObj;
1:     ColumnFilterInfo resolvedFilterObject = null;
0:     List<String> evaluateResultListFinal;
1:     resolvedFilterObject = FilterUtil
1:         .getFilterListForAllValues(metadata.getTableIdentifier(), metadata.getExpression(),
0:             metadata.getColumnExpression(), metadata.isIncludeFilter(),
0:             metadata.getTableProvider());
1:     if (!metadata.isIncludeFilter() && null != resolvedFilterObject) {
1:       // Adding default surrogate key of null member inorder to not display the same while
1:       // displaying the report as per hive compatibility.
0:       resolvedFilterObject.getFilterList()
0:           .add(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY);
0:       Collections.sort(resolvedFilterObject.getFilterList());
1:     resolveDimension.setFilterValues(resolvedFilterObject);
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Raghunandan S
-------------------------------------------------------------------------------
commit:bb0b347
/////////////////////////////////////////////////////////////////////////
1:     if (visitableObj instanceof DimColumnResolvedFilterInfo) {
0:       DimColumnResolvedFilterInfo resolveDimension = (DimColumnResolvedFilterInfo) visitableObj;
0:       ColumnFilterInfo resolvedFilterObject = null;
0:       List<String> evaluateResultListFinal;
0:       resolvedFilterObject = FilterUtil
0:           .getFilterListForAllValues(metadata.getTableIdentifier(), metadata.getExpression(),
0:               metadata.getColumnExpression(), metadata.isIncludeFilter(),
0:               metadata.getTableProvider());
0:       if (!metadata.isIncludeFilter() && null != resolvedFilterObject) {
0:         // Adding default surrogate key of null member inorder to not display the same while
0:         // displaying the report as per hive compatibility.
0:         resolvedFilterObject.getFilterList()
0:             .add(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY);
0:         Collections.sort(resolvedFilterObject.getFilterList());
1:       }
0:       resolveDimension.setFilterValues(resolvedFilterObject);
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
0:     if (visitableObj instanceof DimColumnResolvedFilterInfo) {
0:       DimColumnResolvedFilterInfo resolveDimension = (DimColumnResolvedFilterInfo) visitableObj;
0:       ColumnFilterInfo resolvedFilterObject = null;
0:       List<String> evaluateResultListFinal;
0:       resolvedFilterObject = FilterUtil
0:           .getFilterListForAllValues(metadata.getTableIdentifier(), metadata.getExpression(),
0:               metadata.getColumnExpression(), metadata.isIncludeFilter());
0:       if (!metadata.isIncludeFilter() && null != resolvedFilterObject) {
0:         // Adding default surrogate key of null member inorder to not display the same while
0:         // displaying the report as per hive compatibility.
0:         resolvedFilterObject.getFilterList()
0:             .add(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY);
0:         Collections.sort(resolvedFilterObject.getFilterList());
1:       }
0:       resolveDimension.setFilterValues(resolvedFilterObject);
author:sounakr
-------------------------------------------------------------------------------
commit:266c473
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.filter.ColumnFilterInfo;
1: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.ColumnResolvedFilterInfo;
/////////////////////////////////////////////////////////////////////////
1:   public void populateFilterResolvedInfo(ColumnResolvedFilterInfo visitableObj,
0:     DimColumnResolvedFilterInfo resolveDimension = (DimColumnResolvedFilterInfo) visitableObj;
0:     ColumnFilterInfo resolvedFilterObject = null;
/////////////////////////////////////////////////////////////////////////
0:     resolveDimension.setFilterValues(resolvedFilterObject);
commit:c2e4eb2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.filter.resolver.resolverinfo.visitor;
1: 
1: import java.io.IOException;
1: import java.util.Collections;
0: import java.util.List;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
0: import org.apache.carbondata.core.scan.filter.DimColumnFilterInfo;
1: import org.apache.carbondata.core.scan.filter.FilterUtil;
1: import org.apache.carbondata.core.scan.filter.resolver.metadata.FilterResolverMetadata;
1: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;
1: 
1: public class RangeDictionaryColumnVisitor extends DictionaryColumnVisitor
1:     implements ResolvedFilterInfoVisitorIntf {
1:   /**
1:    * This Visitor method is used to populate the visitableObj with direct dictionary filter details
1:    * where the filters values will be resolve using dictionary cache.
1:    *
1:    * @param visitableObj
1:    * @param metadata
1:    * @throws FilterUnsupportedException,if exception occurs while evaluating
1:    *                                       filter models.
1:    * @throws IOException
1:    * @throws FilterUnsupportedException
1:    */
0:   public void populateFilterResolvedInfo(DimColumnResolvedFilterInfo visitableObj,
1:       FilterResolverMetadata metadata) throws FilterUnsupportedException, IOException {
0:     DimColumnFilterInfo resolvedFilterObject = null;
0:     List<String> evaluateResultListFinal;
0:     resolvedFilterObject = FilterUtil
0:         .getFilterListForAllValues(metadata.getTableIdentifier(), metadata.getExpression(),
0:             metadata.getColumnExpression(), metadata.isIncludeFilter());
1: 
0:     if (!metadata.isIncludeFilter() && null != resolvedFilterObject) {
0:       // Adding default surrogate key of null member inorder to not display the same while
0:       // displaying the report as per hive compatibility.
0:       resolvedFilterObject.getFilterList()
0:           .add(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY);
0:       Collections.sort(resolvedFilterObject.getFilterList());
1:     }
0:     visitableObj.setFilterValues(resolvedFilterObject);
1:   }
1: }
============================================================================