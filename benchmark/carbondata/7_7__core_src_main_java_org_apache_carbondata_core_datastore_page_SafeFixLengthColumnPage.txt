1:7359601: /*
1:7359601:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7359601:  * contributor license agreements.  See the NOTICE file distributed with
1:7359601:  * this work for additional information regarding copyright ownership.
1:7359601:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7359601:  * (the "License"); you may not use this file except in compliance with
1:7359601:  * the License.  You may obtain a copy of the License at
1:7359601:  *
1:7359601:  *    http://www.apache.org/licenses/LICENSE-2.0
1:7359601:  *
1:7359601:  * Unless required by applicable law or agreed to in writing, software
1:7359601:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7359601:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7359601:  * See the License for the specific language governing permissions and
1:7359601:  * limitations under the License.
1:7359601:  */
2:7359601: 
1:7359601: package org.apache.carbondata.core.datastore.page;
1:7359601: 
1:43285bb: import java.io.ByteArrayOutputStream;
1:43285bb: import java.io.DataOutputStream;
1:6297ea0: import java.io.IOException;
1:7359601: import java.math.BigDecimal;
1:7359601: 
1:8f08c4a: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:7359601: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:7d386a4: import org.apache.carbondata.core.util.ByteUtil;
1:7359601: 
1:7359601: /**
1:7359601:  * Represent a columnar data in one page for one column.
1:7359601:  */
1:7359601: public class SafeFixLengthColumnPage extends ColumnPage {
1:7359601: 
1:7359601:   // Only one of following fields will be used
1:7359601:   private byte[] byteData;
1:7359601:   private short[] shortData;
1:7359601:   private int[] intData;
1:7359601:   private long[] longData;
1:7359601:   private float[] floatData;
1:7359601:   private double[] doubleData;
1:7d386a4:   private byte[] shortIntData;
1:6297ea0:   private byte[][] fixedLengthdata;
1:6297ea0: 
1:438b442:   // total number of entries in array
1:438b442:   private int arrayElementCount = 0;
1:7359601: 
1:8f08c4a:   SafeFixLengthColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize) {
1:8f08c4a:     super(columnPageEncoderMeta, pageSize);
1:6297ea0:     this.fixedLengthdata = new byte[pageSize][];
1:6297ea0:   }
1:6297ea0: 
1:7359601:   /**
1:7359601:    * Set byte value at rowId
1:7359601:    */
1:9e064ee:   @Override
1:7359601:   public void putByte(int rowId, byte value) {
1:438b442:     ensureArraySize(rowId, DataTypes.BYTE);
1:7359601:     byteData[rowId] = value;
1:438b442:     arrayElementCount++;
8:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Set short value at rowId
1:7359601:    */
1:e6a4f64:   @Override
1:7359601:   public void putShort(int rowId, short value) {
1:438b442:     ensureArraySize(rowId, DataTypes.SHORT);
1:7359601:     shortData[rowId] = value;
1:438b442:     arrayElementCount++;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Set integer value at rowId
1:7359601:    */
4:7359601:   @Override
1:7359601:   public void putInt(int rowId, int value) {
1:438b442:     ensureArraySize(rowId, DataTypes.INT);
1:7359601:     intData[rowId] = value;
1:438b442:     arrayElementCount++;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Set long value at rowId
1:7359601:    */
1:7359601:   @Override
1:7359601:   public void putLong(int rowId, long value) {
1:438b442:     ensureArraySize(rowId, DataTypes.LONG);
1:7359601:     longData[rowId] = value;
1:438b442:     arrayElementCount++;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Set double value at rowId
1:7359601:    */
1:7359601:   @Override
1:7359601:   public void putDouble(int rowId, double value) {
1:438b442:     ensureArraySize(rowId, DataTypes.DOUBLE);
1:7359601:     doubleData[rowId] = value;
1:438b442:     arrayElementCount++;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Set string value at rowId
1:7359601:    */
1:7359601:   @Override
1:7359601:   public void putBytes(int rowId, byte[] bytes) {
1:43285bb:     ensureArraySize(rowId, DataTypes.BYTE_ARRAY);
1:6297ea0:     this.fixedLengthdata[rowId] = bytes;
1:43285bb:     arrayElementCount++;
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:7d386a4:   public void putShortInt(int rowId, int value) {
1:438b442:     ensureArraySize(rowId, DataTypes.SHORT_INT);
1:7d386a4:     byte[] converted = ByteUtil.to3Bytes(value);
1:7d386a4:     System.arraycopy(converted, 0, shortIntData, rowId * 3, 3);
1:438b442:     arrayElementCount++;
1:7d386a4:   }
1:7d386a4: 
1:7d386a4:   @Override
1:7359601:   public void putBytes(int rowId, byte[] bytes, int offset, int length) {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:9e064ee:   public void putDecimal(int rowId, BigDecimal decimal) {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:9e064ee:   }
1:9e064ee: 
1:9e064ee:   @Override
1:9e064ee:   public byte[] getDecimalPage() {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:9e064ee:   }
1:9e064ee: 
1:7359601:   /**
1:7359601:    * Get byte value at rowId
1:7359601:    */
1:7359601:   @Override
1:7359601:   public byte getByte(int rowId) {
1:7359601:     return byteData[rowId];
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Get short value at rowId
1:7359601:    */
1:7359601:   @Override
1:7359601:   public short getShort(int rowId) {
1:7359601:     return shortData[rowId];
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7d386a4:    * Get short int value at rowId
1:7d386a4:    */
1:7d386a4:   @Override
1:7d386a4:   public int getShortInt(int rowId) {
1:7d386a4:     return ByteUtil.valueOf3Bytes(shortIntData, rowId * 3);
1:7d386a4:   }
1:7d386a4: 
1:7d386a4:   /**
1:7359601:    * Get int value at rowId
1:7359601:    */
1:7359601:   @Override
1:7359601:   public int getInt(int rowId) {
1:7359601:     return intData[rowId];
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Get long value at rowId
1:7359601:    */
1:7359601:   @Override
1:7359601:   public long getLong(int rowId) {
1:7359601:     return longData[rowId];
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Get float value at rowId
1:7359601:    */
1:7359601:   @Override
1:7359601:   public float getFloat(int rowId) {
1:7359601:     return floatData[rowId];
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Get double value at rowId
1:7359601:    */
1:7359601:   @Override
1:7359601:   public double getDouble(int rowId) {
1:7359601:     return doubleData[rowId];
1:7359601:   }
1:7359601: 
1:6f20437:   @Override public BigDecimal getDecimal(int rowId) {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:e6a4f64:   public byte[] getBytes(int rowId) {
1:6297ea0:     return this.fixedLengthdata[rowId];
1:e6a4f64:   }
1:e6a4f64: 
1:7359601:   /**
1:7359601:    * Get byte value page
1:7359601:    */
1:7359601:   @Override
1:7359601:   public byte[] getBytePage() {
1:7359601:     return byteData;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7d386a4:    * Get short value page
1:7d386a4:    */
1:7d386a4:   @Override
1:7359601:   public short[] getShortPage() {
1:7359601:     return shortData;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Get short value page
1:7359601:    */
1:7359601:   @Override
1:7d386a4:   public byte[] getShortIntPage() {
1:7d386a4:     return shortIntData;
1:7d386a4:   }
1:7d386a4: 
1:7d386a4:   /**
1:7359601:    * Get int value page
1:7359601:    */
1:7359601:   @Override
1:7359601:   public int[] getIntPage() {
1:7359601:     return intData;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Get long value page
1:7359601:    */
1:7359601:   @Override
1:7359601:   public long[] getLongPage() {
1:7359601:     return longData;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Get float value page
1:7359601:    */
1:7359601:   @Override
1:7359601:   public float[] getFloatPage() {
1:7359601:     return floatData;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Get double value page
1:7359601:    */
1:7359601:   @Override
1:7359601:   public double[] getDoublePage() {
1:7359601:     return doubleData;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Get string page
1:7359601:    */
1:43285bb:   @Override public byte[][] getByteArrayPage() {
1:43285bb:     byte[][] data = new byte[arrayElementCount][];
1:43285bb:     for (int i = 0; i < arrayElementCount; i++) {
1:43285bb:       data[i] = fixedLengthdata[i];
1:43285bb:     }
1:43285bb:     return data;
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:6297ea0:   public byte[] getLVFlattenedBytePage() throws IOException {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6297ea0:   }
1:6297ea0: 
1:6297ea0:   @Override
1:43285bb:   public byte[] getComplexChildrenLVFlattenedBytePage() throws IOException {
1:43285bb:     ByteArrayOutputStream stream = new ByteArrayOutputStream();
1:43285bb:     DataOutputStream out = new DataOutputStream(stream);
1:43285bb:     for (int i = 0; i < arrayElementCount; i++) {
1:43285bb:       out.write(fixedLengthdata[i]);
1:43285bb:     }
1:43285bb:     return stream.toByteArray();
1:7359601:   }
1:7359601: 
1:6297ea0:   @Override
1:6297ea0:   public byte[] getComplexParentFlattenedBytePage() throws IOException {
2:6297ea0:     throw new UnsupportedOperationException("internal error");
1:6297ea0:   }
1:6297ea0: 
1:7359601:   /**
1:7359601:    * Set byte values to page
1:7359601:    */
1:7359601:   @Override
1:7359601:   public void setBytePage(byte[] byteData) {
1:7359601:     this.byteData = byteData;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7d386a4:    * Set short values to page
1:7d386a4:    */
1:7d386a4:   @Override
1:7359601:   public void setShortPage(short[] shortData) {
1:7359601:     this.shortData = shortData;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Set short values to page
1:7359601:    */
1:7359601:   @Override
1:7d386a4:   public void setShortIntPage(byte[] shortIntData) {
1:7d386a4:     this.shortIntData = shortIntData;
1:7d386a4:   }
1:7d386a4: 
1:7d386a4:   /**
1:7359601:    * Set int values to page
1:7359601:    */
1:438b442:   @Override public void setIntPage(int[] intData) {
1:7359601:     this.intData = intData;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Set long values to page
1:7359601:    */
1:7359601:   @Override
1:7359601:   public void setLongPage(long[] longData) {
1:7359601:     this.longData = longData;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Set float values to page
1:7359601:    */
1:7359601:   @Override
1:7359601:   public void setFloatPage(float[] floatData) {
1:7359601:     this.floatData = floatData;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Set double value to page
1:7359601:    */
1:7359601:   @Override
1:7359601:   public void setDoublePage(double[] doubleData) {
1:7359601:     this.doubleData = doubleData;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * Set decimal values to page
1:7359601:    */
1:7359601:   @Override
1:7359601:   public void setByteArrayPage(byte[][] byteArray) {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:7359601:   public void freeMemory() {
1:dded5d5:     byteData = null;
1:dded5d5:     shortData = null;
1:dded5d5:     intData = null;
1:dded5d5:     longData = null;
1:dded5d5:     floatData = null;
1:dded5d5:     doubleData = null;
1:dded5d5:     shortIntData = null;
1:43285bb:     fixedLengthdata = null;
1:7359601:   }
1:7359601: 
1:7359601:   /**
1:7359601:    * apply encoding to page data
1:7359601:    * @param codec type of transformation
1:7359601:    */
1:7359601:   @Override
1:e6a4f64:   public void convertValue(ColumnPageValueConverter codec) {
1:8f08c4a:     if (columnPageEncoderMeta.getStoreDataType() == DataTypes.BYTE) {
1:438b442:       for (int i = 0; i < arrayElementCount; i++) {
1:956833e:         codec.encode(i, byteData[i]);
1:956833e:       }
1:8f08c4a:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.SHORT) {
1:438b442:       for (int i = 0; i < arrayElementCount; i++) {
1:956833e:         codec.encode(i, shortData[i]);
1:956833e:       }
1:8f08c4a:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.INT) {
1:438b442:       for (int i = 0; i < arrayElementCount; i++) {
1:956833e:         codec.encode(i, intData[i]);
1:956833e:       }
1:8f08c4a:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.LONG) {
1:438b442:       for (int i = 0; i < arrayElementCount; i++) {
1:956833e:         codec.encode(i, longData[i]);
1:956833e:       }
1:8f08c4a:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.FLOAT) {
1:438b442:       for (int i = 0; i < arrayElementCount; i++) {
1:956833e:         codec.encode(i, floatData[i]);
1:956833e:       }
1:8f08c4a:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.DOUBLE) {
1:438b442:       for (int i = 0; i < arrayElementCount; i++) {
1:956833e:         codec.encode(i, doubleData[i]);
1:7359601:       }
1:956833e:     } else {
1:8f08c4a:       throw new UnsupportedOperationException("not support value conversion on "
1:8f08c4a:           + columnPageEncoderMeta.getStoreDataType() + " page");
1:7359601:     }
1:7359601:   }
1:7359601: 
1:8925947:   private void ensureArraySize(int requestSize, DataType dataType) {
1:438b442:     if (dataType == DataTypes.BYTE) {
1:438b442:       if (requestSize >= byteData.length) {
1:43285bb:         byte[] newArray = new byte[arrayElementCount * 2];
1:438b442:         System.arraycopy(byteData, 0, newArray, 0, arrayElementCount);
1:438b442:         byteData = newArray;
1:438b442:       }
1:438b442:     } else if (dataType == DataTypes.SHORT) {
1:438b442:       if (requestSize >= shortData.length) {
1:43285bb:         short[] newArray = new short[arrayElementCount * 2];
1:438b442:         System.arraycopy(shortData, 0, newArray, 0, arrayElementCount);
1:438b442:         shortData = newArray;
1:438b442:       }
1:438b442:     } else if (dataType == DataTypes.SHORT_INT) {
1:438b442:       if (requestSize >= shortIntData.length / 3) {
1:43285bb:         byte[] newArray = new byte[arrayElementCount * 6];
1:438b442:         System.arraycopy(shortIntData, 0, newArray, 0, arrayElementCount * 3);
1:438b442:         shortIntData = newArray;
1:438b442:       }
1:438b442:     } else if (dataType == DataTypes.INT) {
1:438b442:       if (requestSize >= intData.length) {
1:43285bb:         int[] newArray = new int[arrayElementCount * 2];
1:438b442:         System.arraycopy(intData, 0, newArray, 0, arrayElementCount);
1:438b442:         intData = newArray;
1:438b442:       }
1:438b442:     } else if (dataType == DataTypes.LONG) {
1:438b442:       if (requestSize >= longData.length) {
1:43285bb:         long[] newArray = new long[arrayElementCount * 2];
1:438b442:         System.arraycopy(longData, 0, newArray, 0, arrayElementCount);
1:438b442:         longData = newArray;
1:438b442:       }
1:438b442:     } else if (dataType == DataTypes.FLOAT) {
1:438b442:       if (requestSize >= floatData.length) {
1:43285bb:         float[] newArray = new float[arrayElementCount * 2];
1:438b442:         System.arraycopy(floatData, 0, newArray, 0, arrayElementCount);
1:438b442:         floatData = newArray;
1:438b442:       }
1:438b442:     } else if (dataType == DataTypes.DOUBLE) {
1:438b442:       if (requestSize >= doubleData.length) {
1:43285bb:         double[] newArray = new double[arrayElementCount * 2];
1:438b442:         System.arraycopy(doubleData, 0, newArray, 0, arrayElementCount);
1:438b442:         doubleData = newArray;
1:438b442:       }
1:43285bb:     } else if (dataType == DataTypes.BYTE_ARRAY) {
1:43285bb:       if (requestSize >= fixedLengthdata.length) {
1:43285bb:         byte[][] newArray = new byte[arrayElementCount * 2][];
1:43285bb:         int index = 0;
1:43285bb:         for (byte[] data : fixedLengthdata) {
1:43285bb:           newArray[index++] = data;
1:43285bb:         }
1:43285bb:         fixedLengthdata = newArray;
1:43285bb:       }
1:438b442:     } else {
1:438b442:       throw new UnsupportedOperationException(
1:438b442:           "not support value conversion on " + dataType + " page");
1:438b442:     }
1:438b442:   }
1:8925947:   public int getActualRowCount() {
1:8925947:     return arrayElementCount;
1:8925947:   }
1:8925947: 
1:956833e: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
/////////////////////////////////////////////////////////////////////////
1:   SafeFixLengthColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize) {
1:     super(columnPageEncoderMeta, pageSize);
/////////////////////////////////////////////////////////////////////////
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
/////////////////////////////////////////////////////////////////////////
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
/////////////////////////////////////////////////////////////////////////
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
/////////////////////////////////////////////////////////////////////////
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
/////////////////////////////////////////////////////////////////////////
1:     if (columnPageEncoderMeta.getStoreDataType() == DataTypes.BYTE) {
1:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.SHORT) {
1:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.INT) {
1:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.LONG) {
1:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.FLOAT) {
1:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.DOUBLE) {
1:       throw new UnsupportedOperationException("not support value conversion on "
1:           + columnPageEncoderMeta.getStoreDataType() + " page");
author:kumarvishal09
-------------------------------------------------------------------------------
commit:43285bb
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     ensureArraySize(rowId, DataTypes.BYTE_ARRAY);
1:     arrayElementCount++;
/////////////////////////////////////////////////////////////////////////
1:   @Override public byte[][] getByteArrayPage() {
1:     byte[][] data = new byte[arrayElementCount][];
1:     for (int i = 0; i < arrayElementCount; i++) {
1:       data[i] = fixedLengthdata[i];
1:     }
1:     return data;
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getComplexChildrenLVFlattenedBytePage() throws IOException {
1:     ByteArrayOutputStream stream = new ByteArrayOutputStream();
1:     DataOutputStream out = new DataOutputStream(stream);
1:     for (int i = 0; i < arrayElementCount; i++) {
1:       out.write(fixedLengthdata[i]);
1:     }
1:     return stream.toByteArray();
/////////////////////////////////////////////////////////////////////////
1:     fixedLengthdata = null;
/////////////////////////////////////////////////////////////////////////
1:         byte[] newArray = new byte[arrayElementCount * 2];
1:         short[] newArray = new short[arrayElementCount * 2];
1:         byte[] newArray = new byte[arrayElementCount * 6];
1:         int[] newArray = new int[arrayElementCount * 2];
1:         long[] newArray = new long[arrayElementCount * 2];
1:         float[] newArray = new float[arrayElementCount * 2];
1:         double[] newArray = new double[arrayElementCount * 2];
1:     } else if (dataType == DataTypes.BYTE_ARRAY) {
1:       if (requestSize >= fixedLengthdata.length) {
1:         byte[][] newArray = new byte[arrayElementCount * 2][];
1:         int index = 0;
1:         for (byte[] data : fixedLengthdata) {
1:           newArray[index++] = data;
1:         }
1:         fixedLengthdata = newArray;
1:       }
commit:8925947
/////////////////////////////////////////////////////////////////////////
1:   private void ensureArraySize(int requestSize, DataType dataType) {
/////////////////////////////////////////////////////////////////////////
1:   public int getActualRowCount() {
1:     return arrayElementCount;
1:   }
1: 
commit:6297ea0
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:   private byte[][] fixedLengthdata;
1: 
0:   SafeFixLengthColumnPage(TableSpec.ColumnSpec columnSpec, DataType dataType, int pageSize,
0:       int eachRowSize) {
0:     super(columnSpec, dataType, pageSize);
1:     this.fixedLengthdata = new byte[pageSize][];
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     this.fixedLengthdata[rowId] = bytes;
/////////////////////////////////////////////////////////////////////////
1:     return this.fixedLengthdata[rowId];
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getLVFlattenedBytePage() throws IOException {
1:   @Override
0:   public byte[] getComplexChildrenLVFlattenedBytePage() {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public byte[] getComplexParentFlattenedBytePage() throws IOException {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:438b442
/////////////////////////////////////////////////////////////////////////
1:   // total number of entries in array
1:   private int arrayElementCount = 0;
0:     this.fixedLengthdata = new byte[pageSize][];
/////////////////////////////////////////////////////////////////////////
1:     ensureArraySize(rowId, DataTypes.BYTE);
1:     arrayElementCount++;
/////////////////////////////////////////////////////////////////////////
1:     ensureArraySize(rowId, DataTypes.SHORT);
1:     arrayElementCount++;
/////////////////////////////////////////////////////////////////////////
1:     ensureArraySize(rowId, DataTypes.INT);
1:     arrayElementCount++;
/////////////////////////////////////////////////////////////////////////
1:     ensureArraySize(rowId, DataTypes.LONG);
1:     arrayElementCount++;
/////////////////////////////////////////////////////////////////////////
1:     ensureArraySize(rowId, DataTypes.DOUBLE);
1:     arrayElementCount++;
/////////////////////////////////////////////////////////////////////////
1:     ensureArraySize(rowId, DataTypes.SHORT_INT);
1:     arrayElementCount++;
/////////////////////////////////////////////////////////////////////////
1:   @Override public void setIntPage(int[] intData) {
/////////////////////////////////////////////////////////////////////////
1:       for (int i = 0; i < arrayElementCount; i++) {
1:       for (int i = 0; i < arrayElementCount; i++) {
1:       for (int i = 0; i < arrayElementCount; i++) {
1:       for (int i = 0; i < arrayElementCount; i++) {
1:       for (int i = 0; i < arrayElementCount; i++) {
1:       for (int i = 0; i < arrayElementCount; i++) {
/////////////////////////////////////////////////////////////////////////
0:   protected void ensureArraySize(int requestSize, DataType dataType) {
1:     if (dataType == DataTypes.BYTE) {
1:       if (requestSize >= byteData.length) {
0:         byte[] newArray = new byte[arrayElementCount + 16];
1:         System.arraycopy(byteData, 0, newArray, 0, arrayElementCount);
1:         byteData = newArray;
1:       }
1:     } else if (dataType == DataTypes.SHORT) {
1:       if (requestSize >= shortData.length) {
0:         short[] newArray = new short[arrayElementCount + 16];
1:         System.arraycopy(shortData, 0, newArray, 0, arrayElementCount);
1:         shortData = newArray;
1:       }
1:     } else if (dataType == DataTypes.SHORT_INT) {
1:       if (requestSize >= shortIntData.length / 3) {
0:         byte[] newArray = new byte[(arrayElementCount * 3) + (16 * 3)];
1:         System.arraycopy(shortIntData, 0, newArray, 0, arrayElementCount * 3);
1:         shortIntData = newArray;
1:       }
1:     } else if (dataType == DataTypes.INT) {
1:       if (requestSize >= intData.length) {
0:         int[] newArray = new int[arrayElementCount + 16];
1:         System.arraycopy(intData, 0, newArray, 0, arrayElementCount);
1:         intData = newArray;
1:       }
1:     } else if (dataType == DataTypes.LONG) {
1:       if (requestSize >= longData.length) {
0:         long[] newArray = new long[arrayElementCount + 16];
1:         System.arraycopy(longData, 0, newArray, 0, arrayElementCount);
1:         longData = newArray;
1:       }
1:     } else if (dataType == DataTypes.FLOAT) {
1:       if (requestSize >= floatData.length) {
0:         float[] newArray = new float[arrayElementCount + 16];
1:         System.arraycopy(floatData, 0, newArray, 0, arrayElementCount);
1:         floatData = newArray;
1:       }
1:     } else if (dataType == DataTypes.DOUBLE) {
1:       if (requestSize >= doubleData.length) {
0:         double[] newArray = new double[arrayElementCount + 16];
1:         System.arraycopy(doubleData, 0, newArray, 0, arrayElementCount);
1:         doubleData = newArray;
1:       }
1:     } else {
1:       throw new UnsupportedOperationException(
1:           "not support value conversion on " + dataType + " page");
1:     }
1:   }
author:ravipesala
-------------------------------------------------------------------------------
commit:dded5d5
/////////////////////////////////////////////////////////////////////////
1:     byteData = null;
1:     shortData = null;
1:     intData = null;
1:     longData = null;
1:     floatData = null;
1:     doubleData = null;
1:     shortIntData = null;
commit:9e064ee
/////////////////////////////////////////////////////////////////////////
0:   SafeFixLengthColumnPage(DataType dataType, int pageSize, int scale, int precision) {
0:     super(dataType, pageSize, scale, precision);
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void putDecimal(int rowId, BigDecimal decimal) {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public byte[] getDecimalPage() {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
0:     if (dataType == DataTypes.BYTE) {
0:       for (int i = 0; i < pageSize; i++) {
1:         codec.encode(i, byteData[i]);
1:       }
0:     } else if (dataType == DataTypes.SHORT) {
0:       for (int i = 0; i < pageSize; i++) {
1:         codec.encode(i, shortData[i]);
1:       }
0:     } else if (dataType == DataTypes.INT) {
0:       for (int i = 0; i < pageSize; i++) {
1:         codec.encode(i, intData[i]);
1:       }
0:     } else if (dataType == DataTypes.LONG) {
0:       for (int i = 0; i < pageSize; i++) {
1:         codec.encode(i, longData[i]);
1:       }
0:     } else if (dataType == DataTypes.FLOAT) {
0:       for (int i = 0; i < pageSize; i++) {
1:         codec.encode(i, floatData[i]);
1:       }
0:     } else if (dataType == DataTypes.DOUBLE) {
0:       for (int i = 0; i < pageSize; i++) {
1:         codec.encode(i, doubleData[i]);
1:       }
1:     } else {
0:       throw new UnsupportedOperationException("not support value conversion on " +
0:           dataType + " page");
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.TableSpec;
/////////////////////////////////////////////////////////////////////////
0:   SafeFixLengthColumnPage(TableSpec.ColumnSpec columnSpec, DataType dataType, int pageSize) {
0:     super(columnSpec, dataType, pageSize);
/////////////////////////////////////////////////////////////////////////
0:   public byte[] getLVFlattenedBytePage() {
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public byte[] getBytes(int rowId) {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public void convertValue(ColumnPageValueConverter codec) {
/////////////////////////////////////////////////////////////////////////
0:         throw new UnsupportedOperationException("not support value conversion on " +
0:             dataType + " page");
author:manishgupta88
-------------------------------------------------------------------------------
commit:6f20437
/////////////////////////////////////////////////////////////////////////
1:   @Override public BigDecimal getDecimal(int rowId) {
author:jackylk
-------------------------------------------------------------------------------
commit:7d386a4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.ByteUtil;
/////////////////////////////////////////////////////////////////////////
1:   private byte[] shortIntData;
0:   SafeFixLengthColumnPage(DataType dataType, int pageSize) {
/////////////////////////////////////////////////////////////////////////
1:   public void putShortInt(int rowId, int value) {
1:     byte[] converted = ByteUtil.to3Bytes(value);
1:     System.arraycopy(converted, 0, shortIntData, rowId * 3, 3);
1:   }
1: 
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:    * Get short int value at rowId
1:    */
1:   @Override
1:   public int getShortInt(int rowId) {
1:     return ByteUtil.valueOf3Bytes(shortIntData, rowId * 3);
1:   }
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:    * Get short value page
1:    */
1:   @Override
1:   public byte[] getShortIntPage() {
1:     return shortIntData;
1:   }
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:    * Set short values to page
1:    */
1:   @Override
1:   public void setShortIntPage(byte[] shortIntData) {
1:     this.shortIntData = shortIntData;
1:   }
1: 
1:   /**
commit:7359601
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page;
1: 
1: import java.math.BigDecimal;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: 
1: /**
1:  * Represent a columnar data in one page for one column.
1:  */
1: public class SafeFixLengthColumnPage extends ColumnPage {
1: 
1:   // Only one of following fields will be used
1:   private byte[] byteData;
1:   private short[] shortData;
1:   private int[] intData;
1:   private long[] longData;
1:   private float[] floatData;
1:   private double[] doubleData;
1: 
0:   public SafeFixLengthColumnPage(DataType dataType, int pageSize) {
0:     super(dataType, pageSize);
1:   }
1: 
1:   /**
1:    * Set byte value at rowId
1:    */
1:   @Override
1:   public void putByte(int rowId, byte value) {
1:     byteData[rowId] = value;
1:   }
1: 
1:   /**
1:    * Set short value at rowId
1:    */
1:   @Override
1:   public void putShort(int rowId, short value) {
1:     shortData[rowId] = value;
1:   }
1: 
1:   /**
1:    * Set integer value at rowId
1:    */
1:   @Override
1:   public void putInt(int rowId, int value) {
1:     intData[rowId] = value;
1:   }
1: 
1:   /**
1:    * Set long value at rowId
1:    */
1:   @Override
1:   public void putLong(int rowId, long value) {
1:     longData[rowId] = value;
1:   }
1: 
1:   /**
1:    * Set double value at rowId
1:    */
1:   @Override
1:   public void putDouble(int rowId, double value) {
1:     doubleData[rowId] = value;
1:   }
1: 
1:   /**
1:    * Set string value at rowId
1:    */
1:   @Override
1:   public void putBytes(int rowId, byte[] bytes) {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public void putBytes(int rowId, byte[] bytes, int offset, int length) {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   /**
1:    * Get byte value at rowId
1:    */
1:   @Override
1:   public byte getByte(int rowId) {
1:     return byteData[rowId];
1:   }
1: 
1:   /**
1:    * Get short value at rowId
1:    */
1:   @Override
1:   public short getShort(int rowId) {
1:     return shortData[rowId];
1:   }
1: 
1:   /**
1:    * Get int value at rowId
1:    */
1:   @Override
1:   public int getInt(int rowId) {
1:     return intData[rowId];
1:   }
1: 
1:   /**
1:    * Get long value at rowId
1:    */
1:   @Override
1:   public long getLong(int rowId) {
1:     return longData[rowId];
1:   }
1: 
1:   /**
1:    * Get float value at rowId
1:    */
1:   @Override
1:   public float getFloat(int rowId) {
1:     return floatData[rowId];
1:   }
1: 
1:   /**
1:    * Get double value at rowId
1:    */
1:   @Override
1:   public double getDouble(int rowId) {
1:     return doubleData[rowId];
1:   }
1: 
1:   @Override
0:   public BigDecimal getDecimal(int rowId) {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   /**
1:    * Get byte value page
1:    */
1:   @Override
1:   public byte[] getBytePage() {
1:     return byteData;
1:   }
1: 
1:   /**
1:    * Get short value page
1:    */
1:   @Override
1:   public short[] getShortPage() {
1:     return shortData;
1:   }
1: 
1:   /**
1:    * Get int value page
1:    */
1:   @Override
1:   public int[] getIntPage() {
1:     return intData;
1:   }
1: 
1:   /**
1:    * Get long value page
1:    */
1:   @Override
1:   public long[] getLongPage() {
1:     return longData;
1:   }
1: 
1:   /**
1:    * Get float value page
1:    */
1:   @Override
1:   public float[] getFloatPage() {
1:     return floatData;
1:   }
1: 
1:   /**
1:    * Get double value page
1:    */
1:   @Override
1:   public double[] getDoublePage() {
1:     return doubleData;
1:   }
1: 
1:   /**
1:    * Get string page
1:    */
1:   @Override
0:   public byte[][] getByteArrayPage() {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
0:   public byte[] getFlattenedBytePage() {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   /**
1:    * Set byte values to page
1:    */
1:   @Override
1:   public void setBytePage(byte[] byteData) {
1:     this.byteData = byteData;
1:   }
1: 
1:   /**
1:    * Set short values to page
1:    */
1:   @Override
1:   public void setShortPage(short[] shortData) {
1:     this.shortData = shortData;
1:   }
1: 
1:   /**
1:    * Set int values to page
1:    */
1:   @Override
0:   public void setIntPage(int[] intData) {
1:     this.intData = intData;
1:   }
1: 
1:   /**
1:    * Set long values to page
1:    */
1:   @Override
1:   public void setLongPage(long[] longData) {
1:     this.longData = longData;
1:   }
1: 
1:   /**
1:    * Set float values to page
1:    */
1:   @Override
1:   public void setFloatPage(float[] floatData) {
1:     this.floatData = floatData;
1:   }
1: 
1:   /**
1:    * Set double value to page
1:    */
1:   @Override
1:   public void setDoublePage(double[] doubleData) {
1:     this.doubleData = doubleData;
1:   }
1: 
1:   /**
1:    * Set decimal values to page
1:    */
1:   @Override
1:   public void setByteArrayPage(byte[][] byteArray) {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public void freeMemory() {
1:   }
1: 
1:   /**
1:    * apply encoding to page data
1:    * @param codec type of transformation
1:    */
1:   @Override
0:   public void encode(PrimitiveCodec codec) {
0:     switch (dataType) {
0:       case BYTE:
0:         for (int i = 0; i < pageSize; i++) {
0:           codec.encode(i, byteData[i]);
1:         }
0:         break;
0:       case SHORT:
0:         for (int i = 0; i < pageSize; i++) {
0:           codec.encode(i, shortData[i]);
1:         }
0:         break;
0:       case INT:
0:         for (int i = 0; i < pageSize; i++) {
0:           codec.encode(i, intData[i]);
1:         }
0:         break;
0:       case LONG:
0:         for (int i = 0; i < pageSize; i++) {
0:           codec.encode(i, longData[i]);
1:         }
0:         break;
0:       case FLOAT:
0:         for (int i = 0; i < pageSize; i++) {
0:           codec.encode(i, floatData[i]);
1:         }
0:         break;
0:       case DOUBLE:
0:         for (int i = 0; i < pageSize; i++) {
0:           codec.encode(i, doubleData[i]);
1:         }
0:         break;
0:       default:
0:         throw new UnsupportedOperationException("not support encode on " + dataType + " page");
1:     }
1:   }
1: 
1: }
============================================================================