1:104412e: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:104412e:  *
1:104412e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:104412e:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:104412e:  */
1:104412e: 
1:104412e: package org.apache.carbondata.core.reader;
1:104412e: 
1:104412e: import java.io.IOException;
1:104412e: 
1:104412e: import org.apache.carbondata.core.reader.CarbonIndexFileReader;
1:104412e: import org.apache.carbondata.core.reader.ThriftReader;
1:104412e: import org.apache.carbondata.format.IndexHeader;
1:104412e: 
1:104412e: import mockit.Mock;
1:104412e: import mockit.MockUp;
1:104412e: import org.apache.thrift.TBase;
1:104412e: import org.junit.AfterClass;
1:104412e: import org.junit.BeforeClass;
1:104412e: import org.junit.Test;
1:104412e: 
1:104412e: import static junit.framework.TestCase.assertNotNull;
1:104412e: import static org.junit.Assert.assertTrue;
1:104412e: 
1:104412e: public class CarbonIndexFileReaderTest {
1:104412e:   private static CarbonIndexFileReader carbonIndexFileReader = null;
1:104412e: 
1:104412e:   @BeforeClass public static void setUp() throws IOException {
1:104412e:     carbonIndexFileReader = new CarbonIndexFileReader();
1:104412e:     new MockUp<ThriftReader>() {
1:104412e:       @Mock public void open() throws IOException {
1:104412e: 
1:104412e:       }
1:104412e: 
1:104412e:     };
1:104412e:     carbonIndexFileReader.openThriftReader("TestFile.Carbon");
1:104412e:   }
1:104412e: 
1:104412e:   @AfterClass public static void cleanUp() {
1:104412e:     carbonIndexFileReader.closeThriftReader();
1:104412e:   }
1:104412e: 
1:104412e:   @Test public void testreadIndexHeader() throws IOException {
1:104412e:     new MockUp<ThriftReader>() {
1:104412e:       @Mock public TBase read(ThriftReader.TBaseCreator creator) throws IOException {
1:104412e:         return new IndexHeader();
1:104412e: 
1:104412e:       }
1:104412e: 
1:104412e:     };
1:104412e: 
1:104412e:     assertNotNull(carbonIndexFileReader.readIndexHeader());
1:104412e:   }
1:104412e: 
1:104412e:   @Test public void testHasNext() throws IOException {
1:104412e:     new MockUp<ThriftReader>() {
1:104412e:       @Mock public boolean hasNext() throws IOException {
1:104412e: 
1:104412e:         return true;
1:104412e: 
1:104412e:       }
1:104412e: 
1:104412e:     };
1:104412e:     assertTrue(carbonIndexFileReader.hasNext());
1:104412e:   }
1:104412e: 
1:104412e:   @Test public void testReadBlockInfo() throws IOException {
1:104412e:     new MockUp<ThriftReader>() {
1:104412e:       @Mock public TBase read(ThriftReader.TBaseCreator creator) throws IOException {
1:104412e:         return new org.apache.carbondata.format.BlockIndex();
1:104412e: 
1:104412e:       }
1:104412e: 
1:104412e:     };
1:104412e:     assertNotNull(carbonIndexFileReader.readBlockIndexInfo());
1:104412e:   }
1:104412e: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:anubhav100
-------------------------------------------------------------------------------
commit:104412e
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.reader;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.core.reader.CarbonIndexFileReader;
1: import org.apache.carbondata.core.reader.ThriftReader;
1: import org.apache.carbondata.format.IndexHeader;
1: 
1: import mockit.Mock;
1: import mockit.MockUp;
1: import org.apache.thrift.TBase;
1: import org.junit.AfterClass;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static junit.framework.TestCase.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class CarbonIndexFileReaderTest {
1:   private static CarbonIndexFileReader carbonIndexFileReader = null;
1: 
1:   @BeforeClass public static void setUp() throws IOException {
1:     carbonIndexFileReader = new CarbonIndexFileReader();
1:     new MockUp<ThriftReader>() {
1:       @Mock public void open() throws IOException {
1: 
1:       }
1: 
1:     };
1:     carbonIndexFileReader.openThriftReader("TestFile.Carbon");
1:   }
1: 
1:   @AfterClass public static void cleanUp() {
1:     carbonIndexFileReader.closeThriftReader();
1:   }
1: 
1:   @Test public void testreadIndexHeader() throws IOException {
1:     new MockUp<ThriftReader>() {
1:       @Mock public TBase read(ThriftReader.TBaseCreator creator) throws IOException {
1:         return new IndexHeader();
1: 
1:       }
1: 
1:     };
1: 
1:     assertNotNull(carbonIndexFileReader.readIndexHeader());
1:   }
1: 
1:   @Test public void testHasNext() throws IOException {
1:     new MockUp<ThriftReader>() {
1:       @Mock public boolean hasNext() throws IOException {
1: 
1:         return true;
1: 
1:       }
1: 
1:     };
1:     assertTrue(carbonIndexFileReader.hasNext());
1:   }
1: 
1:   @Test public void testReadBlockInfo() throws IOException {
1:     new MockUp<ThriftReader>() {
1:       @Mock public TBase read(ThriftReader.TBaseCreator creator) throws IOException {
1:         return new org.apache.carbondata.format.BlockIndex();
1: 
1:       }
1: 
1:     };
1:     assertNotNull(carbonIndexFileReader.readBlockIndexInfo());
1:   }
1: }
============================================================================