1:484a409: /*
1:484a409:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:484a409:  * contributor license agreements.  See the NOTICE file distributed with
1:484a409:  * this work for additional information regarding copyright ownership.
1:484a409:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:484a409:  * (the "License"); you may not use this file except in compliance with
1:484a409:  * the License.  You may obtain a copy of the License at
1:484a409:  *
1:484a409:  *    http://www.apache.org/licenses/LICENSE-2.0
1:484a409:  *
1:484a409:  * Unless required by applicable law or agreed to in writing, software
1:484a409:  * distributed under the License is distributed on an "AS IS" BASIS,
1:484a409:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:484a409:  * See the License for the specific language governing permissions and
1:484a409:  * limitations under the License.
1:484a409:  */
1:484a409: package org.apache.carbondata.core.datastore;
1:484a409: 
1:484a409: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:484a409: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:484a409: import org.apache.carbondata.core.datastore.impl.FileFactory.*;
1:484a409: 
1:484a409: import org.junit.AfterClass;
1:484a409: import org.junit.BeforeClass;
1:484a409: import org.junit.Test;
1:484a409: 
1:484a409: 
1:484a409: import java.io.DataInputStream;
1:484a409: import java.io.FileOutputStream;
1:484a409: import java.io.File;
1:484a409: import java.io.Writer;
1:484a409: import java.io.BufferedReader;
1:484a409: import java.io.InputStreamReader;
1:484a409: import java.io.OutputStreamWriter;
1:484a409: import java.nio.charset.Charset;
1:484a409: import java.util.zip.GZIPOutputStream;
1:484a409: 
1:484a409: import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
1:484a409: import static junit.framework.TestCase.assertTrue;
1:484a409: 
1:484a409: 
1:484a409: public class CompressdFileTest
1:484a409: {
1:484a409:   @BeforeClass public static void setUp() throws Exception  {
1:484a409:     String path = "../core/src/test/resources/testFile";
1:484a409:     String content = "hello world";
1:484a409: 
1:484a409:     makeGzipFile(path, content);
1:484a409:     makeBzip2File(path, content);
1:484a409: 
1:484a409:   }
1:484a409: 
1:484a409:   private static void makeGzipFile (String path, String content) throws Exception {
1:484a409:     path = path + ".gz";
1:484a409:     FileOutputStream output = new FileOutputStream(path);
1:484a409:     try {
1:484a409:       Writer writer = new OutputStreamWriter(new GZIPOutputStream(output),
1:484a409:           "UTF-8");
1:484a409:       try {
1:484a409:         writer.write(content);
1:484a409:       } finally {
1:484a409:         writer.close();
1:484a409:       }
1:484a409:     } finally {
1:484a409:       output.close();
1:484a409:   }
1:484a409: }
1:484a409: 
1:484a409:   private static void makeBzip2File (String path, String content) throws Exception {
1:484a409:     path = path + ".bz2";
1:484a409:     FileOutputStream output = new FileOutputStream(path);
1:484a409:     try {
1:484a409:       Writer writer = new OutputStreamWriter(new BZip2CompressorOutputStream(output),
1:484a409:           "UTF-8");
1:484a409:       try {
1:484a409:         writer.write(content);
1:484a409:       } finally {
1:484a409:         writer.close();
1:484a409:       }
1:484a409:     } finally {
1:484a409:       output.close();
1:484a409:     }
1:484a409:   }
1:484a409: 
1:484a409:   @Test public void testReadGzFile() throws Exception {
1:484a409:     assertTrue(readCompressed("../core/src/test/resources/testFile.gz").equals("hello world"));
1:484a409:   }
1:484a409: 
1:484a409:   @Test public void testReadBzip2File() throws Exception {
1:484a409:     assertTrue(readCompressed("../core/src/test/resources/testFile.bz2").equals("hello world"));
1:484a409:   }
1:484a409: 
1:484a409:   private static String readCompressed(String path) throws Exception {
1:484a409:       DataInputStream fileReader = null;
1:484a409:       BufferedReader bufferedReader = null;
1:484a409:       String readLine = null;
1:484a409: 
1:484a409:       try {
1:484a409:         fileReader =
1:484a409:             FileFactory.getDataInputStream(path, FileType.HDFS);
1:484a409:         bufferedReader = new BufferedReader(new InputStreamReader(fileReader,
1:484a409:             Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
1:484a409:         readLine = bufferedReader.readLine();
1:484a409:       } finally {
1:484a409:         if (null != fileReader) {
1:484a409:           fileReader.close();
1:484a409:         }
1:484a409: 
1:484a409:         if (null != bufferedReader) {
1:484a409:           bufferedReader.close();
1:484a409:         }
1:484a409:       }
1:484a409:       return readLine;
1:484a409:   }
1:484a409: 
1:484a409:   @AfterClass public static void testCleanUp() {
1:484a409:     new File("../core/src/test/resources/testFile.gz").deleteOnExit();
1:484a409:     new File("../core/src/test/resources/testFile.bz2").deleteOnExit();
1:484a409:   }
1:484a409: }
============================================================================
author:ranmx
-------------------------------------------------------------------------------
commit:484a409
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datastore;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.datastore.impl.FileFactory.*;
1: 
1: import org.junit.AfterClass;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: 
1: import java.io.DataInputStream;
1: import java.io.FileOutputStream;
1: import java.io.File;
1: import java.io.Writer;
1: import java.io.BufferedReader;
1: import java.io.InputStreamReader;
1: import java.io.OutputStreamWriter;
1: import java.nio.charset.Charset;
1: import java.util.zip.GZIPOutputStream;
1: 
1: import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
1: import static junit.framework.TestCase.assertTrue;
1: 
1: 
1: public class CompressdFileTest
1: {
1:   @BeforeClass public static void setUp() throws Exception  {
1:     String path = "../core/src/test/resources/testFile";
1:     String content = "hello world";
1: 
1:     makeGzipFile(path, content);
1:     makeBzip2File(path, content);
1: 
1:   }
1: 
1:   private static void makeGzipFile (String path, String content) throws Exception {
1:     path = path + ".gz";
1:     FileOutputStream output = new FileOutputStream(path);
1:     try {
1:       Writer writer = new OutputStreamWriter(new GZIPOutputStream(output),
1:           "UTF-8");
1:       try {
1:         writer.write(content);
1:       } finally {
1:         writer.close();
1:       }
1:     } finally {
1:       output.close();
1:   }
1: }
1: 
1:   private static void makeBzip2File (String path, String content) throws Exception {
1:     path = path + ".bz2";
1:     FileOutputStream output = new FileOutputStream(path);
1:     try {
1:       Writer writer = new OutputStreamWriter(new BZip2CompressorOutputStream(output),
1:           "UTF-8");
1:       try {
1:         writer.write(content);
1:       } finally {
1:         writer.close();
1:       }
1:     } finally {
1:       output.close();
1:     }
1:   }
1: 
1:   @Test public void testReadGzFile() throws Exception {
1:     assertTrue(readCompressed("../core/src/test/resources/testFile.gz").equals("hello world"));
1:   }
1: 
1:   @Test public void testReadBzip2File() throws Exception {
1:     assertTrue(readCompressed("../core/src/test/resources/testFile.bz2").equals("hello world"));
1:   }
1: 
1:   private static String readCompressed(String path) throws Exception {
1:       DataInputStream fileReader = null;
1:       BufferedReader bufferedReader = null;
1:       String readLine = null;
1: 
1:       try {
1:         fileReader =
1:             FileFactory.getDataInputStream(path, FileType.HDFS);
1:         bufferedReader = new BufferedReader(new InputStreamReader(fileReader,
1:             Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
1:         readLine = bufferedReader.readLine();
1:       } finally {
1:         if (null != fileReader) {
1:           fileReader.close();
1:         }
1: 
1:         if (null != bufferedReader) {
1:           bufferedReader.close();
1:         }
1:       }
1:       return readLine;
1:   }
1: 
1:   @AfterClass public static void testCleanUp() {
1:     new File("../core/src/test/resources/testFile.gz").deleteOnExit();
1:     new File("../core/src/test/resources/testFile.bz2").deleteOnExit();
1:   }
1: }
============================================================================