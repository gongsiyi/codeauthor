1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:cd6a4ff: 
1:cd6a4ff: import java.io.File;
1:cd6a4ff: import java.io.FileInputStream;
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: import java.io.InputStream;
1:cd6a4ff: import java.net.URI;
1:cd6a4ff: import java.net.URISyntaxException;
1:4d882df: import java.net.URL;
1:cd6a4ff: import java.nio.charset.Charset;
1:cd6a4ff: import java.util.ArrayList;
1:cd6a4ff: import java.util.Arrays;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: import java.util.Properties;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.cache.Cache;
1:1155d4d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:ce09aaa: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:ce09aaa: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1:ce09aaa: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonUtil;
1:cd6a4ff: import org.apache.carbondata.core.writer.CarbonDictionaryWriter;
1:cd6a4ff: import org.apache.carbondata.core.writer.CarbonDictionaryWriterImpl;
1:cd6a4ff: 
1:cd6a4ff: public class AbstractDictionaryCacheTest {
1:cd6a4ff: 
1:cd6a4ff:   protected static final String PROPERTY_FILE_NAME = "carbonTest.properties";
1:cd6a4ff: 
1:cd6a4ff:   protected CarbonTableIdentifier carbonTableIdentifier;
1:1155d4d: 
1:bf6c471:   protected AbsoluteTableIdentifier identifier;
1:cd6a4ff: 
1:cd6a4ff:   protected String databaseName;
1:cd6a4ff: 
1:cd6a4ff:   protected String tableName;
1:cd6a4ff: 
1:cd6a4ff:   protected String carbonStorePath;
1:cd6a4ff: 
1:cd6a4ff:   protected Properties props;
1:cd6a4ff: 
1:cd6a4ff:   protected List<String> dataSet1;
1:cd6a4ff: 
1:cd6a4ff:   protected List<String> dataSet2;
1:cd6a4ff: 
1:cd6a4ff:   protected List<String> dataSet3;
1:cd6a4ff: 
1:cd6a4ff:   protected String[] columnIdentifiers;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * this method will delete the folders recursively
1:cd6a4ff:    *
1:cd6a4ff:    * @param f
1:cd6a4ff:    */
1:cd6a4ff:   protected static void deleteRecursiveSilent(CarbonFile f) {
1:cd6a4ff:     if (f.isDirectory()) {
1:cd6a4ff:       if (f.listFiles() != null) {
1:cd6a4ff:         for (CarbonFile c : f.listFiles()) {
1:cd6a4ff:           deleteRecursiveSilent(c);
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     if (f.exists() && !f.delete()) {
1:cd6a4ff:       return;
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * prepare the dataset required for running test cases
1:cd6a4ff:    */
1:cd6a4ff:   protected void prepareDataSet() {
1:f911403:     dataSet1 = Arrays.asList("a", "b", "c");
1:f911403:     dataSet2 = Arrays.asList("d", "e", "f");
1:f911403:     dataSet3 = Arrays.asList("b", "c", "a", "d");
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will remove the column identifiers from lru cache
1:cd6a4ff:    */
1:cd6a4ff:   protected void removeKeyFromLRUCache(Cache cacheObject) {
1:cd6a4ff:     for (int i = 0; i < columnIdentifiers.length; i++) {
2:cd6a4ff:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:cd6a4ff:           createDictionaryColumnUniqueIdentifier(columnIdentifiers[i]);
1:cd6a4ff:       cacheObject.invalidate(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   protected DictionaryColumnUniqueIdentifier createDictionaryColumnUniqueIdentifier(
1:cd6a4ff:       String columnId) {
1:956833e: 	ColumnIdentifier columnIdentifier = new ColumnIdentifier(columnId, null, DataTypes.STRING);
1:bf6c471:     return new DictionaryColumnUniqueIdentifier(identifier, columnIdentifier,
1:29dc302:         DataTypes.STRING);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * this method will delete the store path
1:cd6a4ff:    */
1:cd6a4ff:   protected void deleteStorePath() {
1:cd6a4ff:     FileFactory.FileType fileType = FileFactory.getFileType(this.carbonStorePath);
1:cd6a4ff:     CarbonFile carbonFile = FileFactory.getCarbonFile(this.carbonStorePath, fileType);
1:cd6a4ff:     deleteRecursiveSilent(carbonFile);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * write dictionary data
1:cd6a4ff:    *
1:cd6a4ff:    * @param data
1:cd6a4ff:    * @throws IOException
1:cd6a4ff:    */
1:cd6a4ff:   protected void prepareWriterAndWriteData(List<String> data, String columnId)
1:cd6a4ff:       throws IOException {
1:cd6a4ff: 	ColumnIdentifier columnIdentifier = new ColumnIdentifier(columnId, null, null);
1:d3a09e2:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:bf6c471:         new DictionaryColumnUniqueIdentifier(identifier, columnIdentifier,
1:29dc302:             columnIdentifier.getDataType());
1:cd6a4ff:     CarbonDictionaryWriter carbonDictionaryWriter =
1:1155d4d:         new CarbonDictionaryWriterImpl(dictionaryColumnUniqueIdentifier);
1:bf6c471:     CarbonUtil.checkAndCreateFolder(CarbonTablePath.getMetadataPath(identifier.getTablePath()));
1:cd6a4ff:     List<byte[]> valueList = convertStringListToByteArray(data);
1:cd6a4ff:     try {
1:cd6a4ff:       carbonDictionaryWriter.write(valueList);
1:cd6a4ff:     } finally {
1:cd6a4ff:       carbonDictionaryWriter.close();
1:cd6a4ff:       carbonDictionaryWriter.commit();
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * this method will convert list of string to list of byte array
1:cd6a4ff:    */
1:cd6a4ff:   protected List<byte[]> convertStringListToByteArray(List<String> valueList) {
1:cd6a4ff:     List<byte[]> byteArrayList = new ArrayList<>(valueList.size());
1:cd6a4ff:     for (String value : valueList) {
1:cd6a4ff:       byteArrayList.add(value.getBytes(Charset.defaultCharset()));
1:cd6a4ff:     }
1:cd6a4ff:     return byteArrayList;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * this method will read the property file for required details
1:cd6a4ff:    * like dbName, tableName, etc
1:cd6a4ff:    */
1:cd6a4ff:   protected void init() {
1:cd6a4ff:     InputStream in = null;
1:cd6a4ff:     props = new Properties();
1:cd6a4ff:     try {
1:4d882df:       URL url = getClass().getClassLoader().getResource(PROPERTY_FILE_NAME);
1:4d882df:       if (null != url){
1:4d882df: 
1:4d882df:         URI uri = url.toURI();
1:4d882df:         File file = new File(uri);
1:4d882df:         in = new FileInputStream(file);
1:4d882df:         props.load(in);
1:4d882df:       }
1:cd6a4ff:     } catch (IOException e) {
1:cd6a4ff:       e.printStackTrace();
1:cd6a4ff:     } catch (URISyntaxException e) {
1:cd6a4ff:       e.printStackTrace();
1:cd6a4ff:     } finally {
1:cd6a4ff:       CarbonUtil.closeStreams(in);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:     dataSet1 = Arrays.asList("a", "b", "c");
1:     dataSet2 = Arrays.asList("d", "e", "f");
1:     dataSet3 = Arrays.asList("b", "c", "a", "d");
author:Jacky Li
-------------------------------------------------------------------------------
commit:bf6c471
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   protected AbsoluteTableIdentifier identifier;
/////////////////////////////////////////////////////////////////////////
1:     return new DictionaryColumnUniqueIdentifier(identifier, columnIdentifier,
/////////////////////////////////////////////////////////////////////////
1:         new DictionaryColumnUniqueIdentifier(identifier, columnIdentifier,
1:     CarbonUtil.checkAndCreateFolder(CarbonTablePath.getMetadataPath(identifier.getTablePath()));
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1: 	ColumnIdentifier columnIdentifier = new ColumnIdentifier(columnId, null, DataTypes.STRING);
0:         DataTypes.STRING,
author:manishgupta88
-------------------------------------------------------------------------------
commit:29dc302
/////////////////////////////////////////////////////////////////////////
1:         DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:             columnIdentifier.getDataType());
author:xubo245
-------------------------------------------------------------------------------
commit:e2a2d99
/////////////////////////////////////////////////////////////////////////
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:   protected AbsoluteTableIdentifier absoluteTableIdentifier;
1: 
/////////////////////////////////////////////////////////////////////////
0:     return new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
0:         CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier));
/////////////////////////////////////////////////////////////////////////
0:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
0:             CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier));
1:         new CarbonDictionaryWriterImpl(dictionaryColumnUniqueIdentifier);
0:         CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier);
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
0:         DataType.STRING,
0:         CarbonStorePath.getCarbonTablePath(carbonStorePath, carbonTableIdentifier));
/////////////////////////////////////////////////////////////////////////
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
0:         new DictionaryColumnUniqueIdentifier(carbonTableIdentifier, columnIdentifier,
0:             columnIdentifier.getDataType(),
0:             CarbonStorePath.getCarbonTablePath(carbonStorePath, carbonTableIdentifier));
0:         new CarbonDictionaryWriterImpl(carbonStorePath, carbonTableIdentifier, dictionaryColumnUniqueIdentifier);
author:QiangCai
-------------------------------------------------------------------------------
commit:81149f6
/////////////////////////////////////////////////////////////////////////
0:     return new DictionaryColumnUniqueIdentifier(carbonTableIdentifier, columnIdentifier,
0:         DataType.STRING);
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.metadata.ColumnIdentifier;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
author:vincentchenfei
-------------------------------------------------------------------------------
commit:4d882df
/////////////////////////////////////////////////////////////////////////
1: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
1:       URL url = getClass().getClassLoader().getResource(PROPERTY_FILE_NAME);
1:       if (null != url){
1: 
1:         URI uri = url.toURI();
1:         File file = new File(uri);
1:         in = new FileInputStream(file);
1:         props.load(in);
1:       }
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.nio.charset.Charset;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Properties;
1: 
1: import org.apache.carbondata.core.cache.Cache;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
0: import org.apache.carbondata.core.carbon.path.CarbonStorePath;
0: import org.apache.carbondata.core.carbon.path.CarbonTablePath;
0: import org.apache.carbondata.core.datastorage.store.filesystem.CarbonFile;
0: import org.apache.carbondata.core.datastorage.store.impl.FileFactory;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.apache.carbondata.core.writer.CarbonDictionaryWriter;
1: import org.apache.carbondata.core.writer.CarbonDictionaryWriterImpl;
1: 
1: public class AbstractDictionaryCacheTest {
1: 
1:   protected static final String PROPERTY_FILE_NAME = "carbonTest.properties";
1: 
1:   protected CarbonTableIdentifier carbonTableIdentifier;
1: 
1:   protected String databaseName;
1: 
1:   protected String tableName;
1: 
1:   protected String carbonStorePath;
1: 
1:   protected Properties props;
1: 
1:   protected List<String> dataSet1;
1: 
1:   protected List<String> dataSet2;
1: 
1:   protected List<String> dataSet3;
1: 
1:   protected String[] columnIdentifiers;
1: 
1:   /**
1:    * this method will delete the folders recursively
1:    *
1:    * @param f
1:    */
1:   protected static void deleteRecursiveSilent(CarbonFile f) {
1:     if (f.isDirectory()) {
1:       if (f.listFiles() != null) {
1:         for (CarbonFile c : f.listFiles()) {
1:           deleteRecursiveSilent(c);
1:         }
1:       }
1:     }
1:     if (f.exists() && !f.delete()) {
1:       return;
1:     }
1:   }
1: 
1:   /**
1:    * prepare the dataset required for running test cases
1:    */
1:   protected void prepareDataSet() {
0:     dataSet1 = Arrays.asList(new String[] { "a", "b", "c" });
0:     dataSet2 = Arrays.asList(new String[] { "d", "e", "f" });
0:     dataSet3 = Arrays.asList(new String[] { "b", "c", "a", "d" });
1:   }
1: 
1:   /**
1:    * This method will remove the column identifiers from lru cache
1:    */
1:   protected void removeKeyFromLRUCache(Cache cacheObject) {
1:     for (int i = 0; i < columnIdentifiers.length; i++) {
1:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:           createDictionaryColumnUniqueIdentifier(columnIdentifiers[i]);
1:       cacheObject.invalidate(dictionaryColumnUniqueIdentifier);
1:     }
1:   }
1: 
1:   protected DictionaryColumnUniqueIdentifier createDictionaryColumnUniqueIdentifier(
1:       String columnId) {
0: 	ColumnIdentifier columnIdentifier = new ColumnIdentifier(columnId, null, DataType.STRING);
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
0:         new DictionaryColumnUniqueIdentifier(carbonTableIdentifier, columnIdentifier,
0:             DataType.STRING);
0:     return dictionaryColumnUniqueIdentifier;
1:   }
1: 
1:   /**
1:    * this method will delete the store path
1:    */
1:   protected void deleteStorePath() {
1:     FileFactory.FileType fileType = FileFactory.getFileType(this.carbonStorePath);
1:     CarbonFile carbonFile = FileFactory.getCarbonFile(this.carbonStorePath, fileType);
1:     deleteRecursiveSilent(carbonFile);
1:   }
1: 
1:   /**
1:    * write dictionary data
1:    *
1:    * @param data
1:    * @throws IOException
1:    */
1:   protected void prepareWriterAndWriteData(List<String> data, String columnId)
1:       throws IOException {
1: 	ColumnIdentifier columnIdentifier = new ColumnIdentifier(columnId, null, null);
1:     CarbonDictionaryWriter carbonDictionaryWriter =
0:         new CarbonDictionaryWriterImpl(carbonStorePath, carbonTableIdentifier, columnIdentifier);
0:     CarbonTablePath carbonTablePath =
0:         CarbonStorePath.getCarbonTablePath(carbonStorePath, carbonTableIdentifier);
0:     CarbonUtil.checkAndCreateFolder(carbonTablePath.getMetadataDirectoryPath());
1:     List<byte[]> valueList = convertStringListToByteArray(data);
1:     try {
1:       carbonDictionaryWriter.write(valueList);
1:     } finally {
1:       carbonDictionaryWriter.close();
1:       carbonDictionaryWriter.commit();
1:     }
1:   }
1: 
1:   /**
1:    * this method will convert list of string to list of byte array
1:    */
1:   protected List<byte[]> convertStringListToByteArray(List<String> valueList) {
1:     List<byte[]> byteArrayList = new ArrayList<>(valueList.size());
1:     for (String value : valueList) {
1:       byteArrayList.add(value.getBytes(Charset.defaultCharset()));
1:     }
1:     return byteArrayList;
1:   }
1: 
1:   /**
1:    * this method will read the property file for required details
1:    * like dbName, tableName, etc
1:    */
1:   protected void init() {
1:     InputStream in = null;
1:     props = new Properties();
1:     try {
0:       URI uri = getClass().getClassLoader().getResource(PROPERTY_FILE_NAME).toURI();
0:       File file = new File(uri);
0:       in = new FileInputStream(file);
0:       props.load(in);
1:     } catch (IOException e) {
1:       e.printStackTrace();
1:     } catch (URISyntaxException e) {
1:       e.printStackTrace();
1:     } finally {
1:       CarbonUtil.closeStreams(in);
1:     }
1:   }
1: }
============================================================================