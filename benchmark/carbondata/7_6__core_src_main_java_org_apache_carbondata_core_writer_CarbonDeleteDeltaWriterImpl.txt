1:3e045d8: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
3:3e045d8:  *
1:3e045d8:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3e045d8:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:3e045d8:  */
4:3e045d8: 
1:3e045d8: package org.apache.carbondata.core.writer;
1:3e045d8: 
1:002279e: import java.io.BufferedWriter;
1:002279e: import java.io.DataOutputStream;
1:002279e: import java.io.IOException;
1:002279e: import java.io.OutputStreamWriter;
1:002279e: 
1:3e045d8: import org.apache.carbondata.common.logging.LogService;
1:3e045d8: import org.apache.carbondata.common.logging.LogServiceFactory;
1:3e045d8: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:ce09aaa: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:ce09aaa: import org.apache.carbondata.core.mutate.DeleteDeltaBlockDetails;
1:3e045d8: 
1:002279e: import com.google.gson.Gson;
1:3e045d8: 
2:3e045d8: /**
1:3e045d8:  * This class is responsible for writing the delete delta file
1:3e045d8:  */
1:3e045d8: public class CarbonDeleteDeltaWriterImpl implements CarbonDeleteDeltaWriter {
1:3e045d8: 
1:3e045d8:   /**
1:3e045d8:    * LOGGER
1:3e045d8:    */
1:3e045d8:   private static final LogService LOGGER =
1:3e045d8:       LogServiceFactory.getLogService(CarbonDeleteDeltaWriterImpl.class.getName());
1:3e045d8: 
1:3e045d8:   private String filePath;
1:3e045d8: 
1:3e045d8:   private FileFactory.FileType fileType;
1:3e045d8: 
1:3e045d8:   private DataOutputStream dataOutStream = null;
1:3e045d8: 
1:3e045d8:   /**
1:3e045d8:    * @param filePath
1:3e045d8:    * @param fileType
1:3e045d8:    */
1:3e045d8:   public CarbonDeleteDeltaWriterImpl(String filePath, FileFactory.FileType fileType) {
1:3e045d8:     this.filePath = filePath;
1:3e045d8:     this.fileType = fileType;
1:3e045d8: 
6:3e045d8:   }
1:3e045d8: 
1:3e045d8:   /**
1:3e045d8:    * This method will write the deleted records data in the json format.
1:3e045d8:    * @param deleteDeltaBlockDetails
1:3e045d8:    * @throws IOException
1:3e045d8:    */
1:3e045d8:   @Override public void write(DeleteDeltaBlockDetails deleteDeltaBlockDetails) throws IOException {
2:3e045d8:     BufferedWriter brWriter = null;
2:3e045d8:     try {
2:3e045d8:       FileFactory.createNewFile(filePath, fileType);
2:3e045d8:       dataOutStream = FileFactory.getDataOutputStream(filePath, fileType);
1:3e045d8:       Gson gsonObjectToWrite = new Gson();
2:3e045d8:       brWriter = new BufferedWriter(new OutputStreamWriter(dataOutStream,
1:2f0959a:           CarbonCommonConstants.DEFAULT_CHARSET));
1:3e045d8:       String deletedData = gsonObjectToWrite.toJson(deleteDeltaBlockDetails);
1:3e045d8:       brWriter.write(deletedData);
2:3e045d8:     } catch (IOException ioe) {
2:3e045d8:       LOGGER.error("Error message: " + ioe.getLocalizedMessage());
1:1849358:       throw ioe;
2:3e045d8:     } finally {
1:1849358:       if (null != brWriter) {
2:3e045d8:         brWriter.flush();
1:3e045d8:       }
2:3e045d8:       if (null != dataOutStream) {
2:3e045d8:         dataOutStream.flush();
1:3e045d8:       }
1:1849358:       if (null != brWriter) {
1:1849358:         brWriter.close();
1:1849358:       }
1:1849358:     }
1:1849358: 
1:3e045d8:   }
1:3e045d8: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
commit:002279e
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedWriter;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.io.OutputStreamWriter;
1: 
/////////////////////////////////////////////////////////////////////////
1: import com.google.gson.Gson;
author:BJangir
-------------------------------------------------------------------------------
commit:1849358
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       throw ioe;
/////////////////////////////////////////////////////////////////////////
1:       if (null != brWriter) {
1:         brWriter.close();
1:       }
1: 
/////////////////////////////////////////////////////////////////////////
0:       throw ioe;
/////////////////////////////////////////////////////////////////////////
1:       if (null != brWriter) {
0:         brWriter.close();
1:       }
author:Jacky Li
-------------------------------------------------------------------------------
commit:2f0959a
/////////////////////////////////////////////////////////////////////////
1:           CarbonCommonConstants.DEFAULT_CHARSET));
/////////////////////////////////////////////////////////////////////////
0:           CarbonCommonConstants.DEFAULT_CHARSET));
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.mutate.DeleteDeltaBlockDetails;
author:ravikiran
-------------------------------------------------------------------------------
commit:9b8090b
/////////////////////////////////////////////////////////////////////////
author:ManoharVanam
-------------------------------------------------------------------------------
commit:3e045d8
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.writer;
1: 
0: import com.google.gson.Gson;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.datastorage.store.impl.FileFactory;
0: import org.apache.carbondata.core.update.DeleteDeltaBlockDetails;
0: import org.apache.carbondata.core.util.CarbonUtil;
1: 
0: import java.io.BufferedWriter;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.io.OutputStreamWriter;
1: 
1: /**
1:  * This class is responsible for writing the delete delta file
1:  */
1: public class CarbonDeleteDeltaWriterImpl implements CarbonDeleteDeltaWriter {
1: 
1:   /**
1:    * LOGGER
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(CarbonDeleteDeltaWriterImpl.class.getName());
1: 
1:   private String filePath;
1: 
1:   private FileFactory.FileType fileType;
1: 
1:   private DataOutputStream dataOutStream = null;
1: 
1:   /**
0:    * Constructor
1:    *
1:    * @param filePath
1:    * @param fileType
1:    */
1:   public CarbonDeleteDeltaWriterImpl(String filePath, FileFactory.FileType fileType) {
1:     this.filePath = filePath;
1:     this.fileType = fileType;
1: 
1:   }
1: 
1:   /**
0:    * This method will write the deleted records data in to disk.
1:    *
0:    * @param value deleted records
0:    * @throws IOException if an I/O error occurs
1:    */
0:   @Override public void write(String value) throws IOException {
1:     BufferedWriter brWriter = null;
1:     try {
1:       FileFactory.createNewFile(filePath, fileType);
1:       dataOutStream = FileFactory.getDataOutputStream(filePath, fileType);
1:       brWriter = new BufferedWriter(new OutputStreamWriter(dataOutStream,
0:           CarbonCommonConstants.CARBON_DEFAULT_STREAM_ENCODEFORMAT));
0:       brWriter.write(value);
1:     } catch (IOException ioe) {
1:       LOGGER.error("Error message: " + ioe.getLocalizedMessage());
1:     } finally {
0:       if (null != brWriter) {
1:         brWriter.flush();
1:       }
1:       if (null != dataOutStream) {
1:         dataOutStream.flush();
1:       }
0:       CarbonUtil.closeStreams(brWriter, dataOutStream);
1:     }
1: 
1:   }
1: 
1:   /**
1:    * This method will write the deleted records data in the json format.
1:    * @param deleteDeltaBlockDetails
1:    * @throws IOException
1:    */
1:   @Override public void write(DeleteDeltaBlockDetails deleteDeltaBlockDetails) throws IOException {
1:     BufferedWriter brWriter = null;
1:     try {
1:       FileFactory.createNewFile(filePath, fileType);
1:       dataOutStream = FileFactory.getDataOutputStream(filePath, fileType);
1:       Gson gsonObjectToWrite = new Gson();
1:       brWriter = new BufferedWriter(new OutputStreamWriter(dataOutStream,
0:           CarbonCommonConstants.CARBON_DEFAULT_STREAM_ENCODEFORMAT));
1:       String deletedData = gsonObjectToWrite.toJson(deleteDeltaBlockDetails);
1:       brWriter.write(deletedData);
1:     } catch (IOException ioe) {
1:       LOGGER.error("Error message: " + ioe.getLocalizedMessage());
1:     } finally {
0:       if (null != brWriter) {
1:         brWriter.flush();
1:       }
1:       if (null != dataOutStream) {
1:         dataOutStream.flush();
1:       }
0:       CarbonUtil.closeStreams(brWriter, dataOutStream);
1:     }
1: 
1:   }
1: }
============================================================================