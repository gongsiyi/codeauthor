1:b681244: /*
1:b681244:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b681244:  * contributor license agreements.  See the NOTICE file distributed with
1:b681244:  * this work for additional information regarding copyright ownership.
1:b681244:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b681244:  * (the "License"); you may not use this file except in compliance with
1:b681244:  * the License.  You may obtain a copy of the License at
1:b681244:  *
1:b681244:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b681244:  *
1:b681244:  * Unless required by applicable law or agreed to in writing, software
1:b681244:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b681244:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b681244:  * See the License for the specific language governing permissions and
1:b681244:  * limitations under the License.
1:b681244:  */
1:b681244: package org.apache.carbondata.core.indexstore.row;
1:b681244: 
1:cc0e6f1: import org.apache.carbondata.core.indexstore.schema.CarbonRowSchema;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:b681244: 
1:b681244: /**
1:b681244:  * Data map row.
1:b681244:  */
1:b681244: public class DataMapRowImpl extends DataMapRow {
1:b681244: 
1:b681244:   private Object[] data;
1:b681244: 
1:41b0074:   private int totalLengthInBytes;
1:41b0074: 
1:cc0e6f1:   public DataMapRowImpl(CarbonRowSchema[] schemas) {
1:b681244:     super(schemas);
1:b681244:     this.data = new Object[schemas.length];
1:b681244:   }
1:b681244: 
1:b681244:   @Override public byte[] getByteArray(int ordinal) {
1:b681244:     return (byte[]) data[ordinal];
1:b681244:   }
1:b681244: 
1:79feac9:   @Override public int getLengthInBytes(int ordinal) {
1:79feac9:     return ((byte[]) data[ordinal]).length;
1:79feac9:   }
1:79feac9: 
1:b681244:   @Override public DataMapRow getRow(int ordinal) {
1:b681244:     return (DataMapRow) data[ordinal];
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setByteArray(byte[] byteArray, int ordinal) {
1:956833e:     assert (schemas[ordinal].getDataType() == DataTypes.BYTE_ARRAY);
1:b681244:     data[ordinal] = byteArray;
1:b681244:   }
1:b681244: 
1:b681244:   @Override public int getInt(int ordinal) {
1:b681244:     return (Integer) data[ordinal];
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setInt(int value, int ordinal) {
1:956833e:     assert (schemas[ordinal].getDataType() == DataTypes.INT);
1:b681244:     data[ordinal] = value;
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setByte(byte value, int ordinal) {
1:956833e:     assert (schemas[ordinal].getDataType() == DataTypes.BYTE);
1:b681244:     data[ordinal] = value;
1:b681244:   }
1:b681244: 
1:b681244:   @Override public byte getByte(int ordinal) {
1:b681244:     return (Byte) data[ordinal];
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setShort(short value, int ordinal) {
1:956833e:     assert (schemas[ordinal].getDataType() == DataTypes.SHORT);
1:b681244:     data[ordinal] = value;
1:b681244:   }
1:b681244: 
1:b681244:   @Override public short getShort(int ordinal) {
1:b681244:     return (Short) data[ordinal];
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setLong(long value, int ordinal) {
1:956833e:     assert (schemas[ordinal].getDataType() == DataTypes.LONG);
1:b681244:     data[ordinal] = value;
1:b681244:   }
1:b681244: 
1:b681244:   @Override public long getLong(int ordinal) {
1:b681244:     return (Long) data[ordinal];
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setFloat(float value, int ordinal) {
1:956833e:     assert (schemas[ordinal].getDataType() == DataTypes.FLOAT);
1:b681244:     data[ordinal] = value;
1:b681244:   }
1:b681244: 
1:b681244:   @Override public float getFloat(int ordinal) {
1:b681244:     return (Float) data[ordinal];
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setDouble(double value, int ordinal) {
1:956833e:     assert (schemas[ordinal].getDataType() == DataTypes.DOUBLE);
1:b681244:     data[ordinal] = value;
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setRow(DataMapRow row, int ordinal) {
1:933e30c:     assert (DataTypes.isStructType(schemas[ordinal].getDataType()));
1:b681244:     data[ordinal] = row;
1:b681244:   }
1:b681244: 
1:b681244:   @Override public double getDouble(int ordinal) {
1:b681244:     return (Double) data[ordinal];
1:b681244:   }
1:b681244: 
1:41b0074:   public void setTotalLengthInBytes(int totalLengthInBytes) {
1:41b0074:     this.totalLengthInBytes = totalLengthInBytes;
1:41b0074:   }
1:41b0074: 
1:41b0074:   @Override public int getTotalSizeInBytes() {
1:41b0074:     if (totalLengthInBytes > 0) {
1:41b0074:       return totalLengthInBytes;
1:41b0074:     } else {
1:41b0074:       return super.getTotalSizeInBytes();
1:41b0074:     }
1:41b0074:   }
1:b681244: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:41b0074
/////////////////////////////////////////////////////////////////////////
1:   private int totalLengthInBytes;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public void setTotalLengthInBytes(int totalLengthInBytes) {
1:     this.totalLengthInBytes = totalLengthInBytes;
1:   }
1: 
1:   @Override public int getTotalSizeInBytes() {
1:     if (totalLengthInBytes > 0) {
1:       return totalLengthInBytes;
1:     } else {
1:       return super.getTotalSizeInBytes();
1:     }
1:   }
commit:b681244
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.indexstore.row;
1: 
0: import org.apache.carbondata.core.indexstore.schema.DataMapSchema;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
1: 
1: /**
1:  * Data map row.
1:  */
1: public class DataMapRowImpl extends DataMapRow {
1: 
1:   private Object[] data;
1: 
0:   public DataMapRowImpl(DataMapSchema[] schemas) {
1:     super(schemas);
1:     this.data = new Object[schemas.length];
1:   }
1: 
1:   @Override public byte[] getByteArray(int ordinal) {
1:     return (byte[]) data[ordinal];
1:   }
1: 
1:   @Override public DataMapRow getRow(int ordinal) {
1:     return (DataMapRow) data[ordinal];
1:   }
1: 
1:   @Override public void setByteArray(byte[] byteArray, int ordinal) {
0:     assert (schemas[ordinal].getDataType() == DataType.BYTE_ARRAY);
1:     data[ordinal] = byteArray;
1:   }
1: 
1:   @Override public int getInt(int ordinal) {
1:     return (Integer) data[ordinal];
1:   }
1: 
1:   @Override public void setInt(int value, int ordinal) {
0:     assert (schemas[ordinal].getDataType() == DataType.INT);
1:     data[ordinal] = value;
1:   }
1: 
1:   @Override public void setByte(byte value, int ordinal) {
0:     assert (schemas[ordinal].getDataType() == DataType.BYTE);
1:     data[ordinal] = value;
1:   }
1: 
1:   @Override public byte getByte(int ordinal) {
1:     return (Byte) data[ordinal];
1:   }
1: 
1:   @Override public void setShort(short value, int ordinal) {
0:     assert (schemas[ordinal].getDataType() == DataType.SHORT);
1:     data[ordinal] = value;
1:   }
1: 
1:   @Override public short getShort(int ordinal) {
1:     return (Short) data[ordinal];
1:   }
1: 
1:   @Override public void setLong(long value, int ordinal) {
0:     assert (schemas[ordinal].getDataType() == DataType.LONG);
1:     data[ordinal] = value;
1:   }
1: 
1:   @Override public long getLong(int ordinal) {
1:     return (Long) data[ordinal];
1:   }
1: 
1:   @Override public void setFloat(float value, int ordinal) {
0:     assert (schemas[ordinal].getDataType() == DataType.FLOAT);
1:     data[ordinal] = value;
1:   }
1: 
1:   @Override public float getFloat(int ordinal) {
1:     return (Float) data[ordinal];
1:   }
1: 
1:   @Override public void setDouble(double value, int ordinal) {
0:     assert (schemas[ordinal].getDataType() == DataType.DOUBLE);
1:     data[ordinal] = value;
1:   }
1: 
1:   @Override public void setRow(DataMapRow row, int ordinal) {
0:     assert (schemas[ordinal].getDataType() == DataType.STRUCT);
1:     data[ordinal] = row;
1:   }
1: 
1:   @Override public double getDouble(int ordinal) {
1:     return (Double) data[ordinal];
1:   }
1: 
1: }
author:kunal642
-------------------------------------------------------------------------------
commit:cc0e6f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.indexstore.schema.CarbonRowSchema;
/////////////////////////////////////////////////////////////////////////
1:   public DataMapRowImpl(CarbonRowSchema[] schemas) {
author:Jacky Li
-------------------------------------------------------------------------------
commit:933e30c
/////////////////////////////////////////////////////////////////////////
1:     assert (DataTypes.isStructType(schemas[ordinal].getDataType()));
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     assert (schemas[ordinal].getDataType() == DataTypes.BYTE_ARRAY);
/////////////////////////////////////////////////////////////////////////
1:     assert (schemas[ordinal].getDataType() == DataTypes.INT);
1:     assert (schemas[ordinal].getDataType() == DataTypes.BYTE);
/////////////////////////////////////////////////////////////////////////
1:     assert (schemas[ordinal].getDataType() == DataTypes.SHORT);
/////////////////////////////////////////////////////////////////////////
1:     assert (schemas[ordinal].getDataType() == DataTypes.LONG);
/////////////////////////////////////////////////////////////////////////
1:     assert (schemas[ordinal].getDataType() == DataTypes.FLOAT);
/////////////////////////////////////////////////////////////////////////
1:     assert (schemas[ordinal].getDataType() == DataTypes.DOUBLE);
0:     assert (schemas[ordinal].getDataType() == DataTypes.STRUCT);
author:Raghunandan S
-------------------------------------------------------------------------------
commit:79feac9
/////////////////////////////////////////////////////////////////////////
1:   @Override public int getLengthInBytes(int ordinal) {
1:     return ((byte[]) data[ordinal]).length;
1:   }
1: 
============================================================================