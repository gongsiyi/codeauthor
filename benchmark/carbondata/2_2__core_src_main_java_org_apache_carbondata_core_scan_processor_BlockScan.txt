1:638ed1f: /*
1:638ed1f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:638ed1f:  * contributor license agreements.  See the NOTICE file distributed with
1:638ed1f:  * this work for additional information regarding copyright ownership.
1:638ed1f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:638ed1f:  * (the "License"); you may not use this file except in compliance with
1:638ed1f:  * the License.  You may obtain a copy of the License at
1:638ed1f:  *
1:638ed1f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:638ed1f:  *
1:638ed1f:  * Unless required by applicable law or agreed to in writing, software
1:638ed1f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:638ed1f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:638ed1f:  * See the License for the specific language governing permissions and
1:638ed1f:  * limitations under the License.
1:638ed1f:  */
1:638ed1f: package org.apache.carbondata.core.scan.processor;
1:638ed1f: 
1:638ed1f: import java.util.LinkedList;
1:638ed1f: import java.util.List;
1:638ed1f: 
1:638ed1f: import org.apache.carbondata.core.datastore.DataRefNode;
1:638ed1f: import org.apache.carbondata.core.datastore.FileReader;
1:638ed1f: import org.apache.carbondata.core.scan.collector.ResultCollectorFactory;
1:638ed1f: import org.apache.carbondata.core.scan.collector.ScannedResultCollector;
1:638ed1f: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1:638ed1f: import org.apache.carbondata.core.scan.result.BlockletScannedResult;
1:638ed1f: import org.apache.carbondata.core.scan.result.vector.CarbonColumnarBatch;
1:638ed1f: import org.apache.carbondata.core.scan.scanner.BlockletScanner;
1:638ed1f: import org.apache.carbondata.core.scan.scanner.impl.BlockletFilterScanner;
1:638ed1f: import org.apache.carbondata.core.scan.scanner.impl.BlockletFullScanner;
1:638ed1f: import org.apache.carbondata.core.stats.QueryStatisticsModel;
1:638ed1f: 
1:638ed1f: public class BlockScan {
1:638ed1f:   private BlockExecutionInfo blockExecutionInfo;
1:638ed1f:   private FileReader fileReader;
1:638ed1f:   private BlockletScanner blockletScanner;
1:638ed1f:   private BlockletIterator blockletIterator;
1:638ed1f:   private ScannedResultCollector scannerResultAggregator;
1:638ed1f: 
1:638ed1f:   private List<BlockletScannedResult> scannedResults = new LinkedList<>();
1:638ed1f:   private int nextResultIndex = 0;
1:638ed1f:   private BlockletScannedResult curResult;
1:638ed1f: 
1:638ed1f:   public BlockScan(BlockExecutionInfo blockExecutionInfo, FileReader fileReader,
1:638ed1f:       QueryStatisticsModel queryStatisticsModel) {
1:638ed1f:     this.blockExecutionInfo = blockExecutionInfo;
1:26607fb:     this.blockExecutionInfo.setQueryStatisticsModel(queryStatisticsModel);
1:638ed1f:     this.fileReader = fileReader;
1:638ed1f:     this.blockletIterator = new BlockletIterator(blockExecutionInfo.getFirstDataBlock(),
1:638ed1f:         blockExecutionInfo.getNumberOfBlockToScan());
1:638ed1f:     if (blockExecutionInfo.getFilterExecuterTree() != null) {
1:638ed1f:       blockletScanner = new BlockletFilterScanner(blockExecutionInfo, queryStatisticsModel);
1:638ed1f:     } else {
1:638ed1f:       blockletScanner = new BlockletFullScanner(blockExecutionInfo, queryStatisticsModel);
1:638ed1f:     }
1:638ed1f:     this.scannerResultAggregator =
1:638ed1f:         ResultCollectorFactory.getScannedResultCollector(blockExecutionInfo);
1:638ed1f:   }
1:638ed1f: 
1:638ed1f:   public void scan() throws Exception {
1:638ed1f:     BlockletScannedResult blockletScannedResult = null;
1:638ed1f:     while (blockletIterator.hasNext()) {
1:638ed1f:       DataRefNode dataBlock = blockletIterator.next();
1:638ed1f:       if (dataBlock.getColumnsMaxValue() == null || blockletScanner.isScanRequired(dataBlock)) {
1:638ed1f:         RawBlockletColumnChunks rawBlockletColumnChunks =  RawBlockletColumnChunks.newInstance(
1:638ed1f:             blockExecutionInfo.getTotalNumberDimensionToRead(),
1:638ed1f:             blockExecutionInfo.getTotalNumberOfMeasureToRead(), fileReader, dataBlock);
1:638ed1f:         blockletScanner.readBlocklet(rawBlockletColumnChunks);
1:638ed1f:         blockletScannedResult = blockletScanner.scanBlocklet(rawBlockletColumnChunks);
1:638ed1f:         if (blockletScannedResult != null && blockletScannedResult.hasNext()) {
1:638ed1f:           scannedResults.add(blockletScannedResult);
1:638ed1f:         }
1:638ed1f:       }
1:638ed1f:     }
1:638ed1f:     fileReader.finish();
1:638ed1f:   }
1:638ed1f: 
1:638ed1f:   public boolean hasNext() {
1:638ed1f:     if (curResult != null && curResult.hasNext()) {
1:638ed1f:       return true;
1:638ed1f:     } else {
1:638ed1f:       if (null != curResult) {
1:638ed1f:         curResult.freeMemory();
1:638ed1f:       }
1:638ed1f:       if (nextResultIndex < scannedResults.size()) {
1:638ed1f:         curResult = scannedResults.get(nextResultIndex++);
1:638ed1f:         return true;
1:638ed1f:       } else {
1:638ed1f:         return false;
1:638ed1f:       }
1:638ed1f:     }
1:638ed1f:   }
1:638ed1f: 
1:638ed1f:   public void processNextBatch(CarbonColumnarBatch columnarBatch) {
1:638ed1f:     this.scannerResultAggregator.collectResultInColumnarBatch(curResult, columnarBatch);
1:638ed1f:   }
1:638ed1f: 
1:2fc0ad3:   public List<Object[]> next(int size) {
1:2fc0ad3:     return this.scannerResultAggregator.collectResultInRow(curResult, size);
1:2fc0ad3:   }
1:2fc0ad3: 
1:638ed1f: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:26607fb
/////////////////////////////////////////////////////////////////////////
1:     this.blockExecutionInfo.setQueryStatisticsModel(queryStatisticsModel);
author:Manhua
-------------------------------------------------------------------------------
commit:2fc0ad3
/////////////////////////////////////////////////////////////////////////
1:   public List<Object[]> next(int size) {
1:     return this.scannerResultAggregator.collectResultInRow(curResult, size);
1:   }
1: 
commit:638ed1f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.processor;
1: 
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.datastore.DataRefNode;
1: import org.apache.carbondata.core.datastore.FileReader;
1: import org.apache.carbondata.core.scan.collector.ResultCollectorFactory;
1: import org.apache.carbondata.core.scan.collector.ScannedResultCollector;
1: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1: import org.apache.carbondata.core.scan.result.BlockletScannedResult;
1: import org.apache.carbondata.core.scan.result.vector.CarbonColumnarBatch;
1: import org.apache.carbondata.core.scan.scanner.BlockletScanner;
1: import org.apache.carbondata.core.scan.scanner.impl.BlockletFilterScanner;
1: import org.apache.carbondata.core.scan.scanner.impl.BlockletFullScanner;
1: import org.apache.carbondata.core.stats.QueryStatisticsModel;
1: 
1: public class BlockScan {
1:   private BlockExecutionInfo blockExecutionInfo;
1:   private FileReader fileReader;
1:   private BlockletScanner blockletScanner;
1:   private BlockletIterator blockletIterator;
1:   private ScannedResultCollector scannerResultAggregator;
1: 
1:   private List<BlockletScannedResult> scannedResults = new LinkedList<>();
1:   private int nextResultIndex = 0;
1:   private BlockletScannedResult curResult;
1: 
1:   public BlockScan(BlockExecutionInfo blockExecutionInfo, FileReader fileReader,
1:       QueryStatisticsModel queryStatisticsModel) {
1:     this.blockExecutionInfo = blockExecutionInfo;
1:     this.fileReader = fileReader;
1:     this.blockletIterator = new BlockletIterator(blockExecutionInfo.getFirstDataBlock(),
1:         blockExecutionInfo.getNumberOfBlockToScan());
1:     if (blockExecutionInfo.getFilterExecuterTree() != null) {
1:       blockletScanner = new BlockletFilterScanner(blockExecutionInfo, queryStatisticsModel);
1:     } else {
1:       blockletScanner = new BlockletFullScanner(blockExecutionInfo, queryStatisticsModel);
1:     }
1:     this.scannerResultAggregator =
1:         ResultCollectorFactory.getScannedResultCollector(blockExecutionInfo);
1:   }
1: 
1:   public void scan() throws Exception {
1:     BlockletScannedResult blockletScannedResult = null;
1:     while (blockletIterator.hasNext()) {
1:       DataRefNode dataBlock = blockletIterator.next();
1:       if (dataBlock.getColumnsMaxValue() == null || blockletScanner.isScanRequired(dataBlock)) {
1:         RawBlockletColumnChunks rawBlockletColumnChunks =  RawBlockletColumnChunks.newInstance(
1:             blockExecutionInfo.getTotalNumberDimensionToRead(),
1:             blockExecutionInfo.getTotalNumberOfMeasureToRead(), fileReader, dataBlock);
1:         blockletScanner.readBlocklet(rawBlockletColumnChunks);
1:         blockletScannedResult = blockletScanner.scanBlocklet(rawBlockletColumnChunks);
1:         if (blockletScannedResult != null && blockletScannedResult.hasNext()) {
1:           scannedResults.add(blockletScannedResult);
1:         }
1:       }
1:     }
1:     fileReader.finish();
1:   }
1: 
1:   public boolean hasNext() {
1:     if (curResult != null && curResult.hasNext()) {
1:       return true;
1:     } else {
1:       if (null != curResult) {
1:         curResult.freeMemory();
1:       }
1:       if (nextResultIndex < scannedResults.size()) {
1:         curResult = scannedResults.get(nextResultIndex++);
1:         return true;
1:       } else {
1:         return false;
1:       }
1:     }
1:   }
1: 
1:   public void processNextBatch(CarbonColumnarBatch columnarBatch) {
1:     this.scannerResultAggregator.collectResultInColumnarBatch(curResult, columnarBatch);
1:   }
1: 
1: }
============================================================================