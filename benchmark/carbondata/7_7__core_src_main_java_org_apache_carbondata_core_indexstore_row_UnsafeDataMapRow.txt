1:b681244: /*
1:b681244:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b681244:  * contributor license agreements.  See the NOTICE file distributed with
1:b681244:  * this work for additional information regarding copyright ownership.
1:b681244:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b681244:  * (the "License"); you may not use this file except in compliance with
1:b681244:  * the License.  You may obtain a copy of the License at
1:b681244:  *
1:b681244:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b681244:  *
1:b681244:  * Unless required by applicable law or agreed to in writing, software
1:b681244:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b681244:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b681244:  * See the License for the specific language governing permissions and
1:b681244:  * limitations under the License.
1:b681244:  */
1:b681244: 
1:b681244: package org.apache.carbondata.core.indexstore.row;
1:b681244: 
1:cc0e6f1: import org.apache.carbondata.core.indexstore.schema.CarbonRowSchema;
1:b681244: import org.apache.carbondata.core.memory.MemoryBlock;
1:41b0074: import org.apache.carbondata.core.metadata.datatype.DataType;
1:41b0074: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:b681244: 
1:b681244: import static org.apache.carbondata.core.memory.CarbonUnsafe.BYTE_ARRAY_OFFSET;
1:500654e: import static org.apache.carbondata.core.memory.CarbonUnsafe.getUnsafe;
1:b681244: 
1:b681244: /**
1:b681244:  * Unsafe implementation of data map row.
1:b681244:  */
1:b681244: public class UnsafeDataMapRow extends DataMapRow {
1:b681244: 
1:531ecdf:   private static final long serialVersionUID = -1156704133552046321L;
1:531ecdf: 
1:531ecdf:   // As it is an unsafe memory block it is not recommended to serialize.
1:531ecdf:   // If at all required to be serialized then override writeObject methods
1:531ecdf:   // to which should take care of clearing the unsafe memory post serialization
1:531ecdf:   private transient MemoryBlock block;
1:b681244: 
1:b681244:   private int pointer;
1:b681244: 
1:cc0e6f1:   public UnsafeDataMapRow(CarbonRowSchema[] schemas, MemoryBlock block, int pointer) {
1:b681244:     super(schemas);
1:b681244:     this.block = block;
1:b681244:     this.pointer = pointer;
1:b681244:   }
1:b681244: 
1:b681244:   @Override public byte[] getByteArray(int ordinal) {
1:b681244:     int length;
1:b681244:     int position = getPosition(ordinal);
1:b681244:     switch (schemas[ordinal].getSchemaType()) {
1:dc53dee:       case VARIABLE_SHORT:
1:dc53dee:         length = getUnsafe().getShort(block.getBaseObject(),
1:dc53dee:             block.getBaseOffset() + pointer + position);
1:b681244:         position += 2;
1:dc53dee:         break;
1:dc53dee:       case VARIABLE_INT:
1:dc53dee:         length = getUnsafe().getInt(block.getBaseObject(),
1:dc53dee:             block.getBaseOffset() + pointer + position);
1:dc53dee:         position += 4;
1:dc53dee:         break;
1:b681244:       default:
1:b681244:         length = schemas[ordinal].getLength();
1:b681244:     }
1:b681244:     byte[] data = new byte[length];
1:500654e:     getUnsafe().copyMemory(block.getBaseObject(), block.getBaseOffset() + pointer + position, data,
1:b681244:         BYTE_ARRAY_OFFSET, data.length);
1:b681244:     return data;
1:b681244:   }
1:b681244: 
1:79feac9:   @Override public int getLengthInBytes(int ordinal) {
1:79feac9:     int length;
1:79feac9:     int position = getPosition(ordinal);
1:79feac9:     switch (schemas[ordinal].getSchemaType()) {
1:dc53dee:       case VARIABLE_SHORT:
1:dc53dee:         length = getUnsafe().getShort(block.getBaseObject(),
1:dc53dee:             block.getBaseOffset() + pointer + position);
1:b681244:         break;
1:dc53dee:       case VARIABLE_INT:
1:dc53dee:         length = getUnsafe().getInt(block.getBaseObject(),
1:dc53dee:             block.getBaseOffset() + pointer + position);
1:79feac9:         break;
1:79feac9:       default:
1:79feac9:         length = schemas[ordinal].getLength();
1:79feac9:     }
1:79feac9:     return length;
1:79feac9:   }
1:79feac9: 
1:79feac9:   private int getLengthInBytes(int ordinal, int position) {
1:79feac9:     int length;
1:79feac9:     switch (schemas[ordinal].getSchemaType()) {
1:dc53dee:       case VARIABLE_SHORT:
1:dc53dee:         length = getUnsafe().getShort(block.getBaseObject(),
1:dc53dee:             block.getBaseOffset() + pointer + position);
1:dc53dee:         break;
1:dc53dee:       case VARIABLE_INT:
1:dc53dee:         length = getUnsafe().getInt(block.getBaseObject(),
1:dc53dee:             block.getBaseOffset() + pointer + position);
1:79feac9:         break;
1:79feac9:       default:
1:79feac9:         length = schemas[ordinal].getLength();
1:79feac9:     }
1:79feac9:     return length;
1:79feac9:   }
1:79feac9: 
1:b681244:   @Override public DataMapRow getRow(int ordinal) {
1:cc0e6f1:     CarbonRowSchema[] childSchemas =
1:cc0e6f1:         ((CarbonRowSchema.StructCarbonRowSchema) schemas[ordinal]).getChildSchemas();
1:b681244:     return new UnsafeDataMapRow(childSchemas, block, pointer + getPosition(ordinal));
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setByteArray(byte[] byteArray, int ordinal) {
1:b681244:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:b681244:   }
1:b681244: 
1:b681244:   @Override public int getInt(int ordinal) {
1:500654e:     return getUnsafe()
1:b681244:         .getInt(block.getBaseObject(), block.getBaseOffset() + pointer + getPosition(ordinal));
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setInt(int value, int ordinal) {
1:b681244:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setByte(byte value, int ordinal) {
1:b681244:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:b681244:   }
1:b681244: 
1:b681244:   @Override public byte getByte(int ordinal) {
1:500654e:     return getUnsafe()
1:b681244:         .getByte(block.getBaseObject(), block.getBaseOffset() + pointer + getPosition(ordinal));
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setShort(short value, int ordinal) {
1:b681244:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:b681244:   }
1:b681244: 
1:b681244:   @Override public short getShort(int ordinal) {
1:500654e:     return getUnsafe()
1:b681244:         .getShort(block.getBaseObject(), block.getBaseOffset() + pointer + getPosition(ordinal));
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setLong(long value, int ordinal) {
1:b681244:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:b681244:   }
1:b681244: 
1:b681244:   @Override public long getLong(int ordinal) {
1:500654e:     return getUnsafe()
1:b681244:         .getLong(block.getBaseObject(), block.getBaseOffset() + pointer + getPosition(ordinal));
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setFloat(float value, int ordinal) {
1:b681244:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:b681244:   }
1:b681244: 
1:b681244:   @Override public float getFloat(int ordinal) {
1:500654e:     return getUnsafe()
1:b681244:         .getFloat(block.getBaseObject(), block.getBaseOffset() + pointer + getPosition(ordinal));
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setDouble(double value, int ordinal) {
1:b681244:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:b681244:   }
1:b681244: 
1:b681244:   @Override public double getDouble(int ordinal) {
1:500654e:     return getUnsafe()
1:b681244:         .getDouble(block.getBaseObject(), block.getBaseOffset() + pointer + getPosition(ordinal));
1:b681244:   }
1:b681244: 
1:b681244:   @Override public void setRow(DataMapRow row, int ordinal) {
1:b681244:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:b681244:   }
1:b681244: 
1:41b0074:   /**
1:41b0074:    * Convert unsafe to safe row.
1:41b0074:    *
1:41b0074:    * @return
1:41b0074:    */
1:41b0074:   public DataMapRow convertToSafeRow() {
1:41b0074:     DataMapRowImpl row = new DataMapRowImpl(schemas);
1:41b0074:     int runningLength = 0;
1:41b0074:     for (int i = 0; i < schemas.length; i++) {
1:41b0074:       CarbonRowSchema schema = schemas[i];
1:41b0074:       switch (schema.getSchemaType()) {
1:41b0074:         case FIXED:
1:41b0074:           DataType dataType = schema.getDataType();
1:41b0074:           if (dataType == DataTypes.BYTE) {
1:41b0074:             row.setByte(
1:41b0074:                 getUnsafe().getByte(
3:41b0074:                     block.getBaseObject(),
1:41b0074:                     block.getBaseOffset() + pointer + runningLength),
1:41b0074:                 i);
1:41b0074:             runningLength += schema.getLength();
1:41b0074:           } else if (dataType == DataTypes.SHORT) {
1:41b0074:             row.setShort(
1:41b0074:                 getUnsafe().getShort(
1:41b0074:                     block.getBaseObject(),
1:41b0074:                     block.getBaseOffset() + pointer + runningLength),
1:41b0074:                 i);
1:41b0074:             runningLength += schema.getLength();
1:41b0074:           } else if (dataType == DataTypes.INT) {
1:41b0074:             row.setInt(
1:41b0074:                 getUnsafe().getInt(
1:41b0074:                     block.getBaseObject(),
1:41b0074:                     block.getBaseOffset() + pointer + runningLength),
1:41b0074:                 i);
1:41b0074:             runningLength += schema.getLength();
1:41b0074:           } else if (dataType == DataTypes.LONG) {
1:41b0074:             row.setLong(
1:41b0074:                 getUnsafe().getLong(
1:41b0074:                     block.getBaseObject(),
1:41b0074:                     block.getBaseOffset() + pointer + runningLength),
1:41b0074:                 i);
1:41b0074:             runningLength += schema.getLength();
1:41b0074:           } else if (dataType == DataTypes.FLOAT) {
1:41b0074:             row.setFloat(
1:41b0074:                 getUnsafe().getFloat(block.getBaseObject(),
1:41b0074:                     block.getBaseOffset() + pointer + runningLength),
1:41b0074:                 i);
1:41b0074:             runningLength += schema.getLength();
1:41b0074:           } else if (dataType == DataTypes.DOUBLE) {
1:41b0074:             row.setDouble(
1:41b0074:                 getUnsafe().getDouble(block.getBaseObject(),
1:41b0074:                     block.getBaseOffset() + pointer + runningLength),
1:41b0074:                 i);
1:41b0074:             runningLength += schema.getLength();
1:41b0074:           } else if (dataType == DataTypes.BYTE_ARRAY) {
1:41b0074:             byte[] data = new byte[schema.getLength()];
2:41b0074:             getUnsafe().copyMemory(
1:41b0074:                 block.getBaseObject(),
1:41b0074:                 block.getBaseOffset() + pointer + runningLength,
1:6118711:                 data,
2:41b0074:                 BYTE_ARRAY_OFFSET,
2:41b0074:                 data.length);
1:41b0074:             row.setByteArray(data, i);
1:41b0074:             runningLength += data.length;
1:41b0074:           } else {
1:41b0074:             throw new UnsupportedOperationException(
1:41b0074:                 "unsupported data type for unsafe storage: " + schema.getDataType());
1:41b0074:           }
1:41b0074:           break;
1:dc53dee:         case VARIABLE_SHORT:
1:dc53dee:           int length = getUnsafe()
1:dc53dee:               .getShort(block.getBaseObject(), block.getBaseOffset() + pointer + runningLength);
1:41b0074:           runningLength += 2;
1:41b0074:           byte[] data = new byte[length];
1:dc53dee:           getUnsafe().copyMemory(block.getBaseObject(),
1:41b0074:               block.getBaseOffset() + pointer + runningLength,
1:dc53dee:               data, BYTE_ARRAY_OFFSET, data.length);
1:41b0074:           runningLength += data.length;
1:41b0074:           row.setByteArray(data, i);
1:41b0074:           break;
1:dc53dee:         case VARIABLE_INT:
1:dc53dee:           int length2 = getUnsafe()
1:dc53dee:               .getInt(block.getBaseObject(), block.getBaseOffset() + pointer + runningLength);
1:dc53dee:           runningLength += 4;
1:dc53dee:           byte[] data2 = new byte[length2];
1:dc53dee:           getUnsafe().copyMemory(block.getBaseObject(),
1:dc53dee:               block.getBaseOffset() + pointer + runningLength,
1:dc53dee:               data2, BYTE_ARRAY_OFFSET, data2.length);
1:dc53dee:           runningLength += data2.length;
1:dc53dee:           row.setByteArray(data2, i);
1:dc53dee:           break;
1:41b0074:         case STRUCT:
1:41b0074:           DataMapRow structRow = ((UnsafeDataMapRow) getRow(i)).convertToSafeRow();
1:41b0074:           row.setRow(structRow, i);
1:41b0074:           runningLength += structRow.getTotalSizeInBytes();
1:41b0074:           break;
1:41b0074:         default:
1:41b0074:           throw new UnsupportedOperationException(
1:41b0074:               "unsupported data type for unsafe storage: " + schema.getDataType());
1:41b0074:       }
1:41b0074:     }
1:41b0074:     row.setTotalLengthInBytes(runningLength);
1:41b0074: 
1:41b0074:     return row;
1:41b0074:   }
1:41b0074: 
1:79feac9:   private int getSizeInBytes(int ordinal, int position) {
1:79feac9:     switch (schemas[ordinal].getSchemaType()) {
1:79feac9:       case FIXED:
1:79feac9:         return schemas[ordinal].getLength();
1:dc53dee:       case VARIABLE_SHORT:
1:79feac9:         return getLengthInBytes(ordinal, position) + 2;
1:dc53dee:       case VARIABLE_INT:
1:dc53dee:         return getLengthInBytes(ordinal, position) + 4;
1:79feac9:       case STRUCT:
1:79feac9:         return getRow(ordinal).getTotalSizeInBytes();
1:79feac9:       default:
1:79feac9:         throw new UnsupportedOperationException("wrong type");
1:79feac9:     }
1:79feac9:   }
1:79feac9: 
1:b681244:   private int getPosition(int ordinal) {
1:b681244:     int position = 0;
1:b681244:     for (int i = 0; i < ordinal; i++) {
1:79feac9:       position += getSizeInBytes(i, position);
1:b681244:     }
1:b681244:     return position;
1:b681244:   }
1:b681244: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:6118711
/////////////////////////////////////////////////////////////////////////
1:                 data,
author:xuchuanyin
-------------------------------------------------------------------------------
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1:       case VARIABLE_SHORT:
1:         length = getUnsafe().getShort(block.getBaseObject(),
1:             block.getBaseOffset() + pointer + position);
1:       case VARIABLE_INT:
1:         length = getUnsafe().getInt(block.getBaseObject(),
1:             block.getBaseOffset() + pointer + position);
1:         position += 4;
1:         break;
/////////////////////////////////////////////////////////////////////////
1:       case VARIABLE_SHORT:
1:         length = getUnsafe().getShort(block.getBaseObject(),
1:             block.getBaseOffset() + pointer + position);
1:         break;
1:       case VARIABLE_INT:
1:         length = getUnsafe().getInt(block.getBaseObject(),
1:             block.getBaseOffset() + pointer + position);
/////////////////////////////////////////////////////////////////////////
1:       case VARIABLE_SHORT:
1:         length = getUnsafe().getShort(block.getBaseObject(),
1:             block.getBaseOffset() + pointer + position);
1:         break;
1:       case VARIABLE_INT:
1:         length = getUnsafe().getInt(block.getBaseObject(),
1:             block.getBaseOffset() + pointer + position);
/////////////////////////////////////////////////////////////////////////
1:         case VARIABLE_SHORT:
1:           int length = getUnsafe()
1:               .getShort(block.getBaseObject(), block.getBaseOffset() + pointer + runningLength);
1:           getUnsafe().copyMemory(block.getBaseObject(),
1:               data, BYTE_ARRAY_OFFSET, data.length);
1:         case VARIABLE_INT:
1:           int length2 = getUnsafe()
1:               .getInt(block.getBaseObject(), block.getBaseOffset() + pointer + runningLength);
1:           runningLength += 4;
1:           byte[] data2 = new byte[length2];
1:           getUnsafe().copyMemory(block.getBaseObject(),
1:               block.getBaseOffset() + pointer + runningLength,
1:               data2, BYTE_ARRAY_OFFSET, data2.length);
1:           runningLength += data2.length;
1:           row.setByteArray(data2, i);
1:           break;
/////////////////////////////////////////////////////////////////////////
1:       case VARIABLE_SHORT:
1:       case VARIABLE_INT:
1:         return getLengthInBytes(ordinal, position) + 4;
author:dhatchayani
-------------------------------------------------------------------------------
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1:   private static final long serialVersionUID = -1156704133552046321L;
1: 
1:   // As it is an unsafe memory block it is not recommended to serialize.
1:   // If at all required to be serialized then override writeObject methods
1:   // to which should take care of clearing the unsafe memory post serialization
1:   private transient MemoryBlock block;
author:ravipesala
-------------------------------------------------------------------------------
commit:41b0074
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Convert unsafe to safe row.
1:    *
1:    * @return
1:    */
1:   public DataMapRow convertToSafeRow() {
1:     DataMapRowImpl row = new DataMapRowImpl(schemas);
1:     int runningLength = 0;
1:     for (int i = 0; i < schemas.length; i++) {
1:       CarbonRowSchema schema = schemas[i];
1:       switch (schema.getSchemaType()) {
1:         case FIXED:
1:           DataType dataType = schema.getDataType();
1:           if (dataType == DataTypes.BYTE) {
1:             row.setByte(
1:                 getUnsafe().getByte(
1:                     block.getBaseObject(),
1:                     block.getBaseOffset() + pointer + runningLength),
1:                 i);
1:             runningLength += schema.getLength();
1:           } else if (dataType == DataTypes.SHORT) {
1:             row.setShort(
1:                 getUnsafe().getShort(
1:                     block.getBaseObject(),
1:                     block.getBaseOffset() + pointer + runningLength),
1:                 i);
1:             runningLength += schema.getLength();
1:           } else if (dataType == DataTypes.INT) {
1:             row.setInt(
1:                 getUnsafe().getInt(
1:                     block.getBaseObject(),
1:                     block.getBaseOffset() + pointer + runningLength),
1:                 i);
1:             runningLength += schema.getLength();
1:           } else if (dataType == DataTypes.LONG) {
1:             row.setLong(
1:                 getUnsafe().getLong(
1:                     block.getBaseObject(),
1:                     block.getBaseOffset() + pointer + runningLength),
1:                 i);
1:             runningLength += schema.getLength();
1:           } else if (dataType == DataTypes.FLOAT) {
1:             row.setFloat(
1:                 getUnsafe().getFloat(block.getBaseObject(),
1:                     block.getBaseOffset() + pointer + runningLength),
1:                 i);
1:             runningLength += schema.getLength();
1:           } else if (dataType == DataTypes.DOUBLE) {
1:             row.setDouble(
1:                 getUnsafe().getDouble(block.getBaseObject(),
1:                     block.getBaseOffset() + pointer + runningLength),
1:                 i);
1:             runningLength += schema.getLength();
1:           } else if (dataType == DataTypes.BYTE_ARRAY) {
1:             byte[] data = new byte[schema.getLength()];
1:             getUnsafe().copyMemory(
1:                 block.getBaseObject(),
1:                 block.getBaseOffset() + pointer + runningLength,
0:                     data,
1:                 BYTE_ARRAY_OFFSET,
1:                 data.length);
1:             row.setByteArray(data, i);
1:             runningLength += data.length;
1:           } else {
1:             throw new UnsupportedOperationException(
1:                 "unsupported data type for unsafe storage: " + schema.getDataType());
1:           }
1:           break;
0:         case VARIABLE:
0:           short length = getUnsafe().getShort(
1:               block.getBaseObject(),
0:               block.getBaseOffset() + pointer + runningLength);
1:           runningLength += 2;
1:           byte[] data = new byte[length];
1:           getUnsafe().copyMemory(
1:               block.getBaseObject(),
1:               block.getBaseOffset() + pointer + runningLength,
0:                   data,
1:               BYTE_ARRAY_OFFSET,
1:               data.length);
1:           runningLength += data.length;
1:           row.setByteArray(data, i);
1:           break;
1:         case STRUCT:
1:           DataMapRow structRow = ((UnsafeDataMapRow) getRow(i)).convertToSafeRow();
1:           row.setRow(structRow, i);
1:           runningLength += structRow.getTotalSizeInBytes();
1:           break;
1:         default:
1:           throw new UnsupportedOperationException(
1:               "unsupported data type for unsafe storage: " + schema.getDataType());
1:       }
1:     }
1:     row.setTotalLengthInBytes(runningLength);
1: 
1:     return row;
1:   }
1: 
commit:b681244
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.indexstore.row;
1: 
0: import org.apache.carbondata.core.indexstore.schema.DataMapSchema;
1: import org.apache.carbondata.core.memory.MemoryBlock;
1: 
1: import static org.apache.carbondata.core.memory.CarbonUnsafe.BYTE_ARRAY_OFFSET;
0: import static org.apache.carbondata.core.memory.CarbonUnsafe.unsafe;
1: 
1: /**
1:  * Unsafe implementation of data map row.
1:  */
1: public class UnsafeDataMapRow extends DataMapRow {
1: 
0:   private MemoryBlock block;
1: 
1:   private int pointer;
1: 
0:   public UnsafeDataMapRow(DataMapSchema[] schemas, MemoryBlock block, int pointer) {
1:     super(schemas);
1:     this.block = block;
1:     this.pointer = pointer;
1:   }
1: 
1:   @Override public byte[] getByteArray(int ordinal) {
1:     int length;
1:     int position = getPosition(ordinal);
1:     switch (schemas[ordinal].getSchemaType()) {
0:       case VARIABLE:
0:         length = unsafe.getShort(block.getBaseObject(), block.getBaseOffset() + pointer + position);
1:         position += 2;
1:         break;
1:       default:
1:         length = schemas[ordinal].getLength();
1:     }
1:     byte[] data = new byte[length];
0:     unsafe.copyMemory(block.getBaseObject(), block.getBaseOffset() + pointer + position, data,
1:         BYTE_ARRAY_OFFSET, data.length);
1:     return data;
1:   }
1: 
1:   @Override public DataMapRow getRow(int ordinal) {
0:     DataMapSchema[] childSchemas =
0:         ((DataMapSchema.StructDataMapSchema) schemas[ordinal]).getChildSchemas();
1:     return new UnsafeDataMapRow(childSchemas, block, pointer + getPosition(ordinal));
1:   }
1: 
1:   @Override public void setByteArray(byte[] byteArray, int ordinal) {
1:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:   }
1: 
1:   @Override public int getInt(int ordinal) {
0:     return unsafe
1:         .getInt(block.getBaseObject(), block.getBaseOffset() + pointer + getPosition(ordinal));
1:   }
1: 
1:   @Override public void setInt(int value, int ordinal) {
1:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:   }
1: 
1:   @Override public void setByte(byte value, int ordinal) {
1:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:   }
1: 
1:   @Override public byte getByte(int ordinal) {
0:     return unsafe
1:         .getByte(block.getBaseObject(), block.getBaseOffset() + pointer + getPosition(ordinal));
1:   }
1: 
1:   @Override public void setShort(short value, int ordinal) {
1:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:   }
1: 
1:   @Override public short getShort(int ordinal) {
0:     return unsafe
1:         .getShort(block.getBaseObject(), block.getBaseOffset() + pointer + getPosition(ordinal));
1:   }
1: 
1:   @Override public void setLong(long value, int ordinal) {
1:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:   }
1: 
1:   @Override public long getLong(int ordinal) {
0:     return unsafe
1:         .getLong(block.getBaseObject(), block.getBaseOffset() + pointer + getPosition(ordinal));
1:   }
1: 
1:   @Override public void setFloat(float value, int ordinal) {
1:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:   }
1: 
1:   @Override public float getFloat(int ordinal) {
0:     return unsafe
1:         .getFloat(block.getBaseObject(), block.getBaseOffset() + pointer + getPosition(ordinal));
1:   }
1: 
1:   @Override public void setDouble(double value, int ordinal) {
1:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:   }
1: 
1:   @Override public double getDouble(int ordinal) {
0:     return unsafe
1:         .getDouble(block.getBaseObject(), block.getBaseOffset() + pointer + getPosition(ordinal));
1:   }
1: 
1:   @Override public void setRow(DataMapRow row, int ordinal) {
1:     throw new UnsupportedOperationException("Not supported to set on unsafe row");
1:   }
1: 
1:   private int getPosition(int ordinal) {
1:     int position = 0;
1:     for (int i = 0; i < ordinal; i++) {
0:       position += getSizeInBytes(i);
1:     }
1:     return position;
1:   }
1: }
author:kunal642
-------------------------------------------------------------------------------
commit:cc0e6f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.indexstore.schema.CarbonRowSchema;
/////////////////////////////////////////////////////////////////////////
1:   public UnsafeDataMapRow(CarbonRowSchema[] schemas, MemoryBlock block, int pointer) {
/////////////////////////////////////////////////////////////////////////
1:     CarbonRowSchema[] childSchemas =
1:         ((CarbonRowSchema.StructCarbonRowSchema) schemas[ordinal]).getChildSchemas();
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.core.memory.CarbonUnsafe.getUnsafe;
/////////////////////////////////////////////////////////////////////////
0:         length =
0:             getUnsafe().getShort(block.getBaseObject(), block.getBaseOffset() + pointer + position);
1:     getUnsafe().copyMemory(block.getBaseObject(), block.getBaseOffset() + pointer + position, data,
/////////////////////////////////////////////////////////////////////////
0:         length =
0:             getUnsafe().getShort(block.getBaseObject(), block.getBaseOffset() + pointer + position);
/////////////////////////////////////////////////////////////////////////
0:         length =
0:             getUnsafe().getShort(block.getBaseObject(), block.getBaseOffset() + pointer + position);
/////////////////////////////////////////////////////////////////////////
1:     return getUnsafe()
/////////////////////////////////////////////////////////////////////////
1:     return getUnsafe()
/////////////////////////////////////////////////////////////////////////
1:     return getUnsafe()
/////////////////////////////////////////////////////////////////////////
1:     return getUnsafe()
/////////////////////////////////////////////////////////////////////////
1:     return getUnsafe()
/////////////////////////////////////////////////////////////////////////
1:     return getUnsafe()
author:Raghunandan S
-------------------------------------------------------------------------------
commit:79feac9
/////////////////////////////////////////////////////////////////////////
1:   @Override public int getLengthInBytes(int ordinal) {
1:     int length;
1:     int position = getPosition(ordinal);
1:     switch (schemas[ordinal].getSchemaType()) {
0:       case VARIABLE:
0:         length = unsafe.getShort(block.getBaseObject(), block.getBaseOffset() + pointer + position);
1:         break;
1:       default:
1:         length = schemas[ordinal].getLength();
1:     }
1:     return length;
1:   }
1: 
1:   private int getLengthInBytes(int ordinal, int position) {
1:     int length;
1:     switch (schemas[ordinal].getSchemaType()) {
0:       case VARIABLE:
0:         length = unsafe.getShort(block.getBaseObject(), block.getBaseOffset() + pointer + position);
1:         break;
1:       default:
1:         length = schemas[ordinal].getLength();
1:     }
1:     return length;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   private int getSizeInBytes(int ordinal, int position) {
1:     switch (schemas[ordinal].getSchemaType()) {
1:       case FIXED:
1:         return schemas[ordinal].getLength();
0:       case VARIABLE:
1:         return getLengthInBytes(ordinal, position) + 2;
1:       case STRUCT:
1:         return getRow(ordinal).getTotalSizeInBytes();
1:       default:
1:         throw new UnsupportedOperationException("wrong type");
1:     }
1:   }
1: 
1:       position += getSizeInBytes(i, position);
============================================================================