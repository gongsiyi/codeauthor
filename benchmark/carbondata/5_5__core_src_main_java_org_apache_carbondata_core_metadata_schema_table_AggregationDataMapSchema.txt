1:e4f2843: /*
1:e4f2843:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e4f2843:  * contributor license agreements.  See the NOTICE file distributed with
1:e4f2843:  * this work for additional information regarding copyright ownership.
1:e4f2843:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e4f2843:  * (the "License"); you may not use this file except in compliance with
1:e4f2843:  * the License.  You may obtain a copy of the License at
1:e4f2843:  *
1:e4f2843:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e4f2843:  *
1:e4f2843:  * Unless required by applicable law or agreed to in writing, software
1:e4f2843:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e4f2843:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e4f2843:  * See the License for the specific language governing permissions and
1:e4f2843:  * limitations under the License.
2:e4f2843:  */
3:e4f2843: 
1:e4f2843: package org.apache.carbondata.core.metadata.schema.table;
1:e4f2843: 
1:e4f2843: import java.util.HashMap;
1:e4f2843: import java.util.HashSet;
1:e4f2843: import java.util.Iterator;
1:e4f2843: import java.util.List;
1:e4f2843: import java.util.Map;
1:e4f2843: import java.util.Set;
1:e4f2843: 
1:03a735b: import org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider;
1:e4f2843: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:e4f2843: import org.apache.carbondata.core.metadata.schema.table.column.ParentColumnTableRelation;
1:e2a79ee: import org.apache.carbondata.core.preagg.TimeSeriesFunctionEnum;
1:e4f2843: 
2:e4f2843: /**
1:e4f2843:  * data map schema class for pre aggregation
1:e4f2843:  */
1:e4f2843: public class AggregationDataMapSchema extends DataMapSchema {
1:e4f2843: 
1:e4f2843:   /**
1:e4f2843:    * map of parent column name to set of child column column without
1:e4f2843:    * aggregation function
1:e4f2843:    */
1:e4f2843:   private Map<String, Set<ColumnSchema>> parentToNonAggChildMapping;
1:e4f2843: 
1:e4f2843:   /**
1:e4f2843:    * map of parent column name to set of child columns column with
1:e4f2843:    * aggregation function
1:e4f2843:    */
1:e4f2843:   private Map<String, Set<ColumnSchema>> parentToAggChildMapping;
1:e4f2843: 
1:e4f2843:   /**
1:e4f2843:    * map of parent column name to set of aggregation function applied in
1:e4f2843:    * in parent column
1:e4f2843:    */
1:e4f2843:   private Map<String, Set<String>> parentColumnToAggregationsMapping;
1:e4f2843: 
1:e2a79ee:   /**
1:e2a79ee:    * whether its a timeseries data map
1:e2a79ee:    */
1:e2a79ee:   private boolean isTimeseriesDataMap;
1:e2a79ee: 
1:e2a79ee:   /**
1:e2a79ee:    * below ordinal will be used during sorting the data map
1:e2a79ee:    * to support rollup for loading
1:e2a79ee:    */
1:e2a79ee:   private int ordinal = Integer.MAX_VALUE;
1:e2a79ee: 
1:c70e73f:   private Set aggExpToColumnMapping;
1:c70e73f: 
1:d23f7fa:   AggregationDataMapSchema(String dataMapName, String className) {
1:e4f2843:     super(dataMapName, className);
3:e4f2843:   }
1:e4f2843: 
1:e4f2843:   public void setChildSchema(TableSchema childSchema) {
1:e4f2843:     super.setChildSchema(childSchema);
1:e4f2843:     List<ColumnSchema> listOfColumns = getChildSchema().getListOfColumns();
1:e4f2843:     fillNonAggFunctionColumns(listOfColumns);
1:e4f2843:     fillAggFunctionColumns(listOfColumns);
1:e4f2843:     fillParentNameToAggregationMapping(listOfColumns);
1:e4f2843:   }
1:e4f2843: 
1:e4f2843:   /**
1:e2a79ee:    * Below method will be used to get the columns on which aggregate function
1:e2a79ee:    * and time series function is not applied
1:e2a79ee:    * @param columnName
1:e2a79ee:    *                parent column name
1:e2a79ee:    * @return child column schema
1:e2a79ee:    */
1:e2a79ee:   public ColumnSchema getNonAggNonTimeseriesChildColBasedByParent(String columnName) {
1:e2a79ee:     Set<ColumnSchema> columnSchemas = parentToNonAggChildMapping.get(columnName);
1:e2a79ee:     if (null != columnSchemas) {
1:e2a79ee:       Iterator<ColumnSchema> iterator = columnSchemas.iterator();
1:e2a79ee:       while (iterator.hasNext()) {
1:e2a79ee:         ColumnSchema next = iterator.next();
1:e2a79ee:         if ((null == next.getAggFunction() || next.getAggFunction().isEmpty()) && null == next
1:e2a79ee:             .getTimeSeriesFunction() || next.getTimeSeriesFunction().isEmpty()) {
1:e2a79ee:           return next;
1:e2a79ee:         }
1:e2a79ee:       }
1:e2a79ee:     }
1:e2a79ee:     return null;
1:e2a79ee:   }
1:e2a79ee: 
1:e2a79ee:   /**
1:e4f2843:    * Below method will be used to get the columns on which aggregate function is not applied
1:e4f2843:    * @param columnName
1:e4f2843:    *                parent column name
1:e4f2843:    * @return child column schema
1:e4f2843:    */
1:e4f2843:   public ColumnSchema getNonAggChildColBasedByParent(String columnName) {
1:e4f2843:     Set<ColumnSchema> columnSchemas = parentToNonAggChildMapping.get(columnName);
1:e4f2843:     if (null != columnSchemas) {
1:e4f2843:       Iterator<ColumnSchema> iterator = columnSchemas.iterator();
1:e4f2843:       while (iterator.hasNext()) {
1:e4f2843:         ColumnSchema next = iterator.next();
1:e2a79ee:         if ((null == next.getAggFunction() || next.getAggFunction().isEmpty())) {
1:e2a79ee:           return next;
1:e2a79ee:         }
1:e2a79ee:       }
1:e2a79ee:     }
1:e2a79ee:     return null;
1:e2a79ee:   }
1:e2a79ee: 
1:e2a79ee:   /**
1:e2a79ee:    * Below method will be used to get the columns on which aggregate function is not applied
1:e2a79ee:    *
1:e2a79ee:    * @param columnName parent column name
1:e2a79ee:    * @return child column schema
1:e2a79ee:    */
1:e2a79ee:   public ColumnSchema getTimeseriesChildColBasedByParent(String columnName,
1:e2a79ee:       String timeseriesFunction) {
1:e2a79ee:     Set<ColumnSchema> columnSchemas = parentToNonAggChildMapping.get(columnName);
1:e2a79ee:     if (null != columnSchemas) {
1:e2a79ee:       Iterator<ColumnSchema> iterator = columnSchemas.iterator();
1:e2a79ee:       while (iterator.hasNext()) {
1:e2a79ee:         ColumnSchema next = iterator.next();
1:e2a79ee:         if (timeseriesFunction.equals(next.getTimeSeriesFunction())) {
1:e4f2843:           return next;
1:e4f2843:         }
1:e4f2843:       }
1:e4f2843:     }
1:e4f2843:     return null;
1:e4f2843:   }
1:e4f2843: 
1:e4f2843:   /**
1:e2a79ee:    * Below method will be used to get the column schema based on parent column name
1:e2a79ee:    * @param columName
1:e2a79ee:    *                parent column name
1:e4f2843:    * @return child column schema
1:e4f2843:    */
1:e4f2843:   public ColumnSchema getChildColByParentColName(String columName) {
1:e4f2843:     List<ColumnSchema> listOfColumns = childSchema.getListOfColumns();
1:e4f2843:     for (ColumnSchema columnSchema : listOfColumns) {
1:e4f2843:       List<ParentColumnTableRelation> parentColumnTableRelations =
1:e4f2843:           columnSchema.getParentColumnTableRelations();
1:f70e6d7:       if (null != parentColumnTableRelations && parentColumnTableRelations.size() == 1
1:4c692d1:           && parentColumnTableRelations.get(0).getColumnName().equalsIgnoreCase(columName) &&
1:91911af:           columnSchema.getColumnName().endsWith(columName)) {
1:e4f2843:         return columnSchema;
1:e4f2843:       }
1:e4f2843:     }
1:e4f2843:     return null;
1:e4f2843:   }
1:e4f2843: 
1:e4f2843:   /**
1:e4f2843:    * Below method will be used to get the child column schema based on parent name and aggregate
1:e4f2843:    * function applied on column
1:e4f2843:    * @param columnName
1:e4f2843:    *                  parent column name
2:e4f2843:    * @param aggFunction
1:e4f2843:    *                  aggregate function applied
1:e4f2843:    * @return child column schema
1:e4f2843:    */
1:e4f2843:   public ColumnSchema getAggChildColByParent(String columnName,
1:e4f2843:       String aggFunction) {
1:e4f2843:     Set<ColumnSchema> columnSchemas = parentToAggChildMapping.get(columnName);
1:e4f2843:     if (null != columnSchemas) {
1:e4f2843:       Iterator<ColumnSchema> iterator = columnSchemas.iterator();
1:e4f2843:       while (iterator.hasNext()) {
1:e4f2843:         ColumnSchema next = iterator.next();
1:e4f2843:         if (null != next.getAggFunction() && next.getAggFunction().equalsIgnoreCase(aggFunction)) {
1:e4f2843:           return next;
1:e4f2843:         }
1:e4f2843:       }
1:e4f2843:     }
1:e4f2843:     return null;
1:e4f2843:   }
1:e4f2843: 
1:e4f2843:   /**
1:e4f2843:    * Below method will be used to get the column schema based on parent column name
1:e4f2843:    * @param columName
1:e4f2843:    *                parent column name
1:e2a79ee:    * @param timeseriesFunction
1:e2a79ee:    *                timeseries function applied on column
1:e2a79ee:    * @return child column schema
1:e2a79ee:    */
1:e2a79ee:   public ColumnSchema getTimeseriesChildColByParent(String columName, String timeseriesFunction) {
1:e2a79ee:     List<ColumnSchema> listOfColumns = childSchema.getListOfColumns();
1:e2a79ee:     for (ColumnSchema columnSchema : listOfColumns) {
1:e2a79ee:       List<ParentColumnTableRelation> parentColumnTableRelations =
1:e2a79ee:           columnSchema.getParentColumnTableRelations();
1:e2a79ee:       if (null != parentColumnTableRelations && parentColumnTableRelations.size() == 1
1:4c692d1:           && parentColumnTableRelations.get(0).getColumnName().equalsIgnoreCase(columName)
1:e2a79ee:           && timeseriesFunction.equalsIgnoreCase(columnSchema.getTimeSeriesFunction())) {
1:e2a79ee:         return columnSchema;
1:e2a79ee:       }
1:e2a79ee:     }
1:e2a79ee:     return null;
1:e2a79ee:   }
1:e2a79ee: 
1:e2a79ee:   /**
1:e4f2843:    * Method to prepare mapping of parent to list of aggregation function applied on that column
1:e4f2843:    * @param listOfColumns
1:e4f2843:    *        child column schema list
1:e4f2843:    */
1:e4f2843:   private void fillParentNameToAggregationMapping(List<ColumnSchema> listOfColumns) {
1:e4f2843:     parentColumnToAggregationsMapping = new HashMap<>();
1:e4f2843:     for (ColumnSchema column : listOfColumns) {
1:e4f2843:       if (null != column.getAggFunction() && !column.getAggFunction().isEmpty()) {
1:e4f2843:         List<ParentColumnTableRelation> parentColumnTableRelations =
1:e4f2843:             column.getParentColumnTableRelations();
1:e4f2843:         if (null != parentColumnTableRelations && parentColumnTableRelations.size() == 1) {
1:e4f2843:           String columnName = column.getParentColumnTableRelations().get(0).getColumnName();
1:e4f2843:           Set<String> aggFunctions = parentColumnToAggregationsMapping.get(columnName);
1:e4f2843:           if (null == aggFunctions) {
1:e4f2843:             aggFunctions = new HashSet<>();
1:e4f2843:             parentColumnToAggregationsMapping.put(columnName, aggFunctions);
1:e4f2843:           }
1:e4f2843:           aggFunctions.add(column.getAggFunction());
1:e4f2843:         }
1:e4f2843:       }
1:e4f2843:     }
1:e4f2843:   }
1:e4f2843: 
1:e4f2843:   /**
1:e4f2843:    * Below method will be used prepare mapping between parent column to non aggregation function
1:e4f2843:    * columns
1:e4f2843:    * @param listOfColumns
1:e4f2843:    *                    list of child columns
1:e4f2843:    */
1:e4f2843:   private void fillNonAggFunctionColumns(List<ColumnSchema> listOfColumns) {
1:e4f2843:     parentToNonAggChildMapping = new HashMap<>();
1:e4f2843:     for (ColumnSchema column : listOfColumns) {
1:e2a79ee:       if (!isTimeseriesDataMap) {
1:e2a79ee:         isTimeseriesDataMap =
1:e2a79ee:             null != column.getTimeSeriesFunction() && !column.getTimeSeriesFunction().isEmpty();
1:e2a79ee:         if (isTimeseriesDataMap) {
1:e2a79ee:           this.ordinal =
1:e2a79ee:               TimeSeriesFunctionEnum.valueOf(column.getTimeSeriesFunction().toUpperCase())
1:e2a79ee:                   .getOrdinal();
1:e2a79ee:         }
1:e2a79ee:       }
1:e4f2843:       if (null == column.getAggFunction() || column.getAggFunction().isEmpty()) {
1:e4f2843:         fillMappingDetails(column, parentToNonAggChildMapping);
1:e4f2843:       }
1:e4f2843:     }
1:e4f2843:   }
1:e4f2843: 
1:e4f2843:   private void fillMappingDetails(ColumnSchema column,
1:e4f2843:       Map<String, Set<ColumnSchema>> map) {
1:e4f2843:     List<ParentColumnTableRelation> parentColumnTableRelations =
1:e4f2843:         column.getParentColumnTableRelations();
1:e4f2843:     if (null != parentColumnTableRelations && parentColumnTableRelations.size() == 1) {
1:e4f2843:       String columnName = column.getParentColumnTableRelations().get(0).getColumnName();
1:e4f2843:       Set<ColumnSchema> columnSchemas = map.get(columnName);
1:e4f2843:       if (null == columnSchemas) {
1:e4f2843:         columnSchemas = new HashSet<>();
1:e4f2843:         map.put(columnName, columnSchemas);
1:e4f2843:       }
1:e4f2843:       columnSchemas.add(column);
1:e4f2843:     }
1:e4f2843:   }
1:e4f2843: 
1:e4f2843:   /**
1:e4f2843:    * Below method will be used to fill parent to list of aggregation column mapping
1:e4f2843:    * @param listOfColumns
1:e4f2843:    *        list of child columns
1:e4f2843:    */
1:e4f2843:   private void fillAggFunctionColumns(List<ColumnSchema> listOfColumns) {
1:e4f2843:     parentToAggChildMapping = new HashMap<>();
1:e4f2843:     for (ColumnSchema column : listOfColumns) {
1:e4f2843:       if (null != column.getAggFunction() && !column.getAggFunction().isEmpty()) {
1:e4f2843:         fillMappingDetails(column, parentToAggChildMapping);
1:e4f2843:       }
1:e4f2843:     }
1:e4f2843:   }
1:e4f2843: 
1:e2a79ee:   public boolean isTimeseriesDataMap() {
1:e2a79ee:     return isTimeseriesDataMap;
1:e2a79ee:   }
1:e2a79ee: 
1:e2a79ee:   /**
1:e2a79ee:    * Below method is to support rollup during loading the data in pre aggregate table
1:e2a79ee:    * In case of timeseries year level table data loading can be done using month level table or any
1:e2a79ee:    * time series level below year level for example day,hour minute, second.
1:e2a79ee:    * @TODO need to handle for pre aggregate table without timeseries
1:e2a79ee:    *
1:e2a79ee:    * @param aggregationDataMapSchema
1:e2a79ee:    * @return whether aggregation data map can be selected or not
1:e2a79ee:    */
1:e2a79ee:   public boolean canSelectForRollup(AggregationDataMapSchema aggregationDataMapSchema) {
1:e2a79ee:     List<ColumnSchema> listOfColumns = childSchema.getListOfColumns();
1:e2a79ee:     for (ColumnSchema column : listOfColumns) {
1:e2a79ee:       List<ParentColumnTableRelation> parentColumnTableRelations =
1:e2a79ee:           column.getParentColumnTableRelations();
1:e2a79ee:       //@TODO handle scenario when aggregate datamap columns is derive from multiple column
1:e2a79ee:       // which is not supported currently
1:e2a79ee:       if (null != parentColumnTableRelations && parentColumnTableRelations.size() == 1) {
1:e2a79ee:         if (null != column.getAggFunction() && !column.getAggFunction().isEmpty()) {
1:e2a79ee:           if (null == aggregationDataMapSchema
1:e2a79ee:               .getAggChildColByParent(parentColumnTableRelations.get(0).getColumnName(),
1:e2a79ee:                   column.getAggFunction())) {
1:e2a79ee:             return false;
1:e2a79ee:           }
1:adb8c13:         } else {
1:e2a79ee:           if (null == aggregationDataMapSchema.getNonAggChildColBasedByParent(
1:e2a79ee:               parentColumnTableRelations.get(0).getColumnName())) {
1:e2a79ee:             return false;
1:e2a79ee:           }
1:e2a79ee:         }
1:e2a79ee:       } else {
1:adb8c13:         // in case of any expression one column can be derived from multiple column
1:adb8c13:         // in that case we cannot do rollup so hit the maintable
1:adb8c13:         return false;
1:e2a79ee:       }
1:e2a79ee:     }
1:e2a79ee:     return true;
1:e2a79ee:   }
1:e2a79ee: 
1:e2a79ee:   public int getOrdinal() {
1:e2a79ee:     return ordinal;
1:e2a79ee:   }
1:c70e73f: 
1:c70e73f:   /**
1:c70e73f:    * Below method will be used to get the aggregation column based on index
1:c70e73f:    * It will return the first aggregation column found based on index
1:c70e73f:    * @param searchStartIndex
1:c70e73f:    *  start index
1:c70e73f:    * @param sortedColumnSchema
1:c70e73f:    * list of sorted table columns
1:c70e73f:    * @return found column list
1:c70e73f:    *
1:c70e73f:    */
1:c70e73f:   public ColumnSchema getAggColumnBasedOnIndex(int searchStartIndex,
1:c70e73f:       List<ColumnSchema> sortedColumnSchema) {
1:c70e73f:     ColumnSchema columnSchema = null;
1:c70e73f:     for (int i = searchStartIndex; i < sortedColumnSchema.size(); i++) {
1:c70e73f:       if (!sortedColumnSchema.get(i).getAggFunction().isEmpty()) {
1:c70e73f:         columnSchema = sortedColumnSchema.get(i);
1:c70e73f:         break;
1:c70e73f:       }
1:c70e73f:     }
1:c70e73f:     return columnSchema;
1:c70e73f:   }
1:c70e73f: 
1:c70e73f:   public synchronized Set getAggExpToColumnMapping() {
1:c70e73f:     return aggExpToColumnMapping;
1:c70e73f:   }
1:c70e73f: 
1:c70e73f:   public synchronized void setAggExpToColumnMapping(Set aggExpToColumnMapping) {
1:c70e73f:     if (null == this.aggExpToColumnMapping) {
1:c70e73f:       this.aggExpToColumnMapping = aggExpToColumnMapping;
1:c70e73f:     }
1:c70e73f:   }
1:5f2a748: 
1:03a735b:   public DataMapClassProvider getProvider() {
1:03a735b:     return isTimeseriesDataMap ?
1:03a735b:         DataMapClassProvider.TIMESERIES : DataMapClassProvider.PREAGGREGATE;
1:03a735b:   }
1:03a735b: 
1:5f2a748:   @Override public boolean equals(Object o) {
1:5f2a748:     if (this == o) return true;
1:5f2a748:     if (o == null || getClass() != o.getClass()) return false;
1:5f2a748:     if (!super.equals(o)) return false;
1:5f2a748:     AggregationDataMapSchema that = (AggregationDataMapSchema) o;
1:5f2a748:     return that == this;
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   @Override public int hashCode() {
1:5f2a748:     return super.hashCode();
1:5f2a748:   }
1:e4f2843: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:4c692d1
/////////////////////////////////////////////////////////////////////////
1:           && parentColumnTableRelations.get(0).getColumnName().equalsIgnoreCase(columName) &&
/////////////////////////////////////////////////////////////////////////
1:           && parentColumnTableRelations.get(0).getColumnName().equalsIgnoreCase(columName)
commit:5f2a748
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override public boolean equals(Object o) {
1:     if (this == o) return true;
1:     if (o == null || getClass() != o.getClass()) return false;
1:     if (!super.equals(o)) return false;
1:     AggregationDataMapSchema that = (AggregationDataMapSchema) o;
1:     return that == this;
1:   }
1: 
1:   @Override public int hashCode() {
1:     return super.hashCode();
1:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:03a735b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider;
/////////////////////////////////////////////////////////////////////////
1:   public DataMapClassProvider getProvider() {
1:     return isTimeseriesDataMap ?
1:         DataMapClassProvider.TIMESERIES : DataMapClassProvider.PREAGGREGATE;
1:   }
1: 
author:QiangCai
-------------------------------------------------------------------------------
commit:d23f7fa
/////////////////////////////////////////////////////////////////////////
1:   AggregationDataMapSchema(String dataMapName, String className) {
author:Geetika Gupta
-------------------------------------------------------------------------------
commit:91911af
/////////////////////////////////////////////////////////////////////////
0:           && parentColumnTableRelations.get(0).getColumnName().equals(columName) &&
1:           columnSchema.getColumnName().endsWith(columName)) {
author:kumarvishal
-------------------------------------------------------------------------------
commit:c70e73f
/////////////////////////////////////////////////////////////////////////
1:   private Set aggExpToColumnMapping;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Below method will be used to get the aggregation column based on index
1:    * It will return the first aggregation column found based on index
1:    * @param searchStartIndex
1:    *  start index
1:    * @param sortedColumnSchema
1:    * list of sorted table columns
1:    * @return found column list
1:    *
1:    */
1:   public ColumnSchema getAggColumnBasedOnIndex(int searchStartIndex,
1:       List<ColumnSchema> sortedColumnSchema) {
1:     ColumnSchema columnSchema = null;
1:     for (int i = searchStartIndex; i < sortedColumnSchema.size(); i++) {
1:       if (!sortedColumnSchema.get(i).getAggFunction().isEmpty()) {
1:         columnSchema = sortedColumnSchema.get(i);
1:         break;
1:       }
1:     }
1:     return columnSchema;
1:   }
1: 
1:   public synchronized Set getAggExpToColumnMapping() {
1:     return aggExpToColumnMapping;
1:   }
1: 
1:   public synchronized void setAggExpToColumnMapping(Set aggExpToColumnMapping) {
1:     if (null == this.aggExpToColumnMapping) {
1:       this.aggExpToColumnMapping = aggExpToColumnMapping;
1:     }
1:   }
commit:adb8c13
/////////////////////////////////////////////////////////////////////////
1:       } else {
1:         // in case of any expression one column can be derived from multiple column
1:         // in that case we cannot do rollup so hit the maintable
1:         return false;
commit:e2a79ee
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.preagg.TimeSeriesFunctionEnum;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * whether its a timeseries data map
1:    */
1:   private boolean isTimeseriesDataMap;
1: 
1:   /**
1:    * below ordinal will be used during sorting the data map
1:    * to support rollup for loading
1:    */
1:   private int ordinal = Integer.MAX_VALUE;
1: 
/////////////////////////////////////////////////////////////////////////
1:    * Below method will be used to get the columns on which aggregate function
1:    * and time series function is not applied
1:    * @param columnName
1:    *                parent column name
1:    * @return child column schema
1:    */
1:   public ColumnSchema getNonAggNonTimeseriesChildColBasedByParent(String columnName) {
1:     Set<ColumnSchema> columnSchemas = parentToNonAggChildMapping.get(columnName);
1:     if (null != columnSchemas) {
1:       Iterator<ColumnSchema> iterator = columnSchemas.iterator();
1:       while (iterator.hasNext()) {
1:         ColumnSchema next = iterator.next();
1:         if ((null == next.getAggFunction() || next.getAggFunction().isEmpty()) && null == next
1:             .getTimeSeriesFunction() || next.getTimeSeriesFunction().isEmpty()) {
1:           return next;
1:         }
1:       }
1:     }
1:     return null;
1:   }
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:         if ((null == next.getAggFunction() || next.getAggFunction().isEmpty())) {
1:           return next;
1:         }
1:       }
1:     }
1:     return null;
1:   }
1: 
1:   /**
1:    * Below method will be used to get the columns on which aggregate function is not applied
1:    *
1:    * @param columnName parent column name
1:    * @return child column schema
1:    */
1:   public ColumnSchema getTimeseriesChildColBasedByParent(String columnName,
1:       String timeseriesFunction) {
1:     Set<ColumnSchema> columnSchemas = parentToNonAggChildMapping.get(columnName);
1:     if (null != columnSchemas) {
1:       Iterator<ColumnSchema> iterator = columnSchemas.iterator();
1:       while (iterator.hasNext()) {
1:         ColumnSchema next = iterator.next();
1:         if (timeseriesFunction.equals(next.getTimeSeriesFunction())) {
/////////////////////////////////////////////////////////////////////////
1:    * Below method will be used to get the column schema based on parent column name
1:    * @param columName
1:    *                parent column name
1:    * @param timeseriesFunction
1:    *                timeseries function applied on column
1:    * @return child column schema
1:    */
1:   public ColumnSchema getTimeseriesChildColByParent(String columName, String timeseriesFunction) {
1:     List<ColumnSchema> listOfColumns = childSchema.getListOfColumns();
1:     for (ColumnSchema columnSchema : listOfColumns) {
1:       List<ParentColumnTableRelation> parentColumnTableRelations =
1:           columnSchema.getParentColumnTableRelations();
1:       if (null != parentColumnTableRelations && parentColumnTableRelations.size() == 1
0:           && parentColumnTableRelations.get(0).getColumnName().equals(columName)
1:           && timeseriesFunction.equalsIgnoreCase(columnSchema.getTimeSeriesFunction())) {
1:         return columnSchema;
1:       }
1:     }
1:     return null;
1:   }
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:       if (!isTimeseriesDataMap) {
1:         isTimeseriesDataMap =
1:             null != column.getTimeSeriesFunction() && !column.getTimeSeriesFunction().isEmpty();
1:         if (isTimeseriesDataMap) {
1:           this.ordinal =
1:               TimeSeriesFunctionEnum.valueOf(column.getTimeSeriesFunction().toUpperCase())
1:                   .getOrdinal();
1:         }
1:       }
/////////////////////////////////////////////////////////////////////////
1:   public boolean isTimeseriesDataMap() {
1:     return isTimeseriesDataMap;
1:   }
1: 
1:   /**
1:    * Below method is to support rollup during loading the data in pre aggregate table
1:    * In case of timeseries year level table data loading can be done using month level table or any
1:    * time series level below year level for example day,hour minute, second.
1:    * @TODO need to handle for pre aggregate table without timeseries
1:    *
1:    * @param aggregationDataMapSchema
1:    * @return whether aggregation data map can be selected or not
1:    */
1:   public boolean canSelectForRollup(AggregationDataMapSchema aggregationDataMapSchema) {
1:     List<ColumnSchema> listOfColumns = childSchema.getListOfColumns();
1:     for (ColumnSchema column : listOfColumns) {
1:       List<ParentColumnTableRelation> parentColumnTableRelations =
1:           column.getParentColumnTableRelations();
1:       //@TODO handle scenario when aggregate datamap columns is derive from multiple column
1:       // which is not supported currently
1:       if (null != parentColumnTableRelations && parentColumnTableRelations.size() == 1) {
1:         if (null != column.getAggFunction() && !column.getAggFunction().isEmpty()) {
1:           if (null == aggregationDataMapSchema
1:               .getAggChildColByParent(parentColumnTableRelations.get(0).getColumnName(),
1:                   column.getAggFunction())) {
1:             return false;
1:           }
1:         } else {
1:           if (null == aggregationDataMapSchema.getNonAggChildColBasedByParent(
1:               parentColumnTableRelations.get(0).getColumnName())) {
1:             return false;
1:           }
1:         }
1:       }
1:     }
1:     return true;
1:   }
1: 
1:   public int getOrdinal() {
1:     return ordinal;
1:   }
commit:f70e6d7
/////////////////////////////////////////////////////////////////////////
1:       if (null != parentColumnTableRelations && parentColumnTableRelations.size() == 1
0:           && parentColumnTableRelations.get(0).getColumnName().equals(columName)) {
commit:e4f2843
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.schema.table;
1: 
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: import org.apache.carbondata.core.metadata.schema.table.column.ParentColumnTableRelation;
1: 
1: /**
1:  * data map schema class for pre aggregation
1:  */
1: public class AggregationDataMapSchema extends DataMapSchema {
1: 
1:   /**
1:    * map of parent column name to set of child column column without
1:    * aggregation function
1:    */
1:   private Map<String, Set<ColumnSchema>> parentToNonAggChildMapping;
1: 
1:   /**
1:    * map of parent column name to set of child columns column with
1:    * aggregation function
1:    */
1:   private Map<String, Set<ColumnSchema>> parentToAggChildMapping;
1: 
1:   /**
1:    * map of parent column name to set of aggregation function applied in
1:    * in parent column
1:    */
1:   private Map<String, Set<String>> parentColumnToAggregationsMapping;
1: 
0:   public AggregationDataMapSchema(String dataMapName, String className) {
1:     super(dataMapName, className);
1:   }
1: 
1:   public void setChildSchema(TableSchema childSchema) {
1:     super.setChildSchema(childSchema);
1:     List<ColumnSchema> listOfColumns = getChildSchema().getListOfColumns();
1:     fillNonAggFunctionColumns(listOfColumns);
1:     fillAggFunctionColumns(listOfColumns);
1:     fillParentNameToAggregationMapping(listOfColumns);
1:   }
1: 
1:   /**
1:    * Below method will be used to get the columns on which aggregate function is not applied
1:    * @param columnName
1:    *                parent column name
1:    * @return child column schema
1:    */
1:   public ColumnSchema getNonAggChildColBasedByParent(String columnName) {
1:     Set<ColumnSchema> columnSchemas = parentToNonAggChildMapping.get(columnName);
1:     if (null != columnSchemas) {
1:       Iterator<ColumnSchema> iterator = columnSchemas.iterator();
1:       while (iterator.hasNext()) {
1:         ColumnSchema next = iterator.next();
0:         if (null == next.getAggFunction() || next.getAggFunction().isEmpty()) {
1:           return next;
1:         }
1:       }
1:     }
1:     return null;
1:   }
1: 
1:   /**
1:    * Below method will be used to get the column schema based on parent column name
1:    * @param columName
1:    *                parent column name
1:    * @return child column schema
1:    */
1:   public ColumnSchema getChildColByParentColName(String columName) {
1:     List<ColumnSchema> listOfColumns = childSchema.getListOfColumns();
1:     for (ColumnSchema columnSchema : listOfColumns) {
1:       List<ParentColumnTableRelation> parentColumnTableRelations =
1:           columnSchema.getParentColumnTableRelations();
0:       if (parentColumnTableRelations.get(0).getColumnName().equals(columName)) {
1:         return columnSchema;
1:       }
1:     }
1:     return null;
1:   }
1: 
1:   /**
1:    * Below method will be used to get the child column schema based on parent name and aggregate
1:    * function applied on column
1:    * @param columnName
1:    *                  parent column name
1:    * @param aggFunction
1:    *                  aggregate function applied
1:    * @return child column schema
1:    */
1:   public ColumnSchema getAggChildColByParent(String columnName,
1:       String aggFunction) {
1:     Set<ColumnSchema> columnSchemas = parentToAggChildMapping.get(columnName);
1:     if (null != columnSchemas) {
1:       Iterator<ColumnSchema> iterator = columnSchemas.iterator();
1:       while (iterator.hasNext()) {
1:         ColumnSchema next = iterator.next();
1:         if (null != next.getAggFunction() && next.getAggFunction().equalsIgnoreCase(aggFunction)) {
1:           return next;
1:         }
1:       }
1:     }
1:     return null;
1:   }
1: 
1:   /**
0:    * Below method is to check if parent column with matching aggregate function
0:    * @param parentColumnName
0:    *                    parent column name
1:    * @param aggFunction
0:    *                    aggregate function
0:    * @return is matching
1:    */
0:   public boolean isColumnWithAggFunctionExists(String parentColumnName, String aggFunction) {
0:     Set<String> aggFunctions = parentColumnToAggregationsMapping.get(parentColumnName);
0:     if (null != aggFunctions && aggFunctions.contains(aggFunction)) {
0:       return true;
1:     }
0:     return false;
1:   }
1: 
1: 
1:   /**
1:    * Method to prepare mapping of parent to list of aggregation function applied on that column
1:    * @param listOfColumns
1:    *        child column schema list
1:    */
1:   private void fillParentNameToAggregationMapping(List<ColumnSchema> listOfColumns) {
1:     parentColumnToAggregationsMapping = new HashMap<>();
1:     for (ColumnSchema column : listOfColumns) {
1:       if (null != column.getAggFunction() && !column.getAggFunction().isEmpty()) {
1:         List<ParentColumnTableRelation> parentColumnTableRelations =
1:             column.getParentColumnTableRelations();
1:         if (null != parentColumnTableRelations && parentColumnTableRelations.size() == 1) {
1:           String columnName = column.getParentColumnTableRelations().get(0).getColumnName();
1:           Set<String> aggFunctions = parentColumnToAggregationsMapping.get(columnName);
1:           if (null == aggFunctions) {
1:             aggFunctions = new HashSet<>();
1:             parentColumnToAggregationsMapping.put(columnName, aggFunctions);
1:           }
1:           aggFunctions.add(column.getAggFunction());
1:         }
1:       }
1:     }
1:   }
1: 
1:   /**
1:    * Below method will be used prepare mapping between parent column to non aggregation function
1:    * columns
1:    * @param listOfColumns
1:    *                    list of child columns
1:    */
1:   private void fillNonAggFunctionColumns(List<ColumnSchema> listOfColumns) {
1:     parentToNonAggChildMapping = new HashMap<>();
1:     for (ColumnSchema column : listOfColumns) {
1:       if (null == column.getAggFunction() || column.getAggFunction().isEmpty()) {
1:         fillMappingDetails(column, parentToNonAggChildMapping);
1:       }
1:     }
1:   }
1: 
1:   private void fillMappingDetails(ColumnSchema column,
1:       Map<String, Set<ColumnSchema>> map) {
1:     List<ParentColumnTableRelation> parentColumnTableRelations =
1:         column.getParentColumnTableRelations();
1:     if (null != parentColumnTableRelations && parentColumnTableRelations.size() == 1) {
1:       String columnName = column.getParentColumnTableRelations().get(0).getColumnName();
1:       Set<ColumnSchema> columnSchemas = map.get(columnName);
1:       if (null == columnSchemas) {
1:         columnSchemas = new HashSet<>();
1:         map.put(columnName, columnSchemas);
1:       }
1:       columnSchemas.add(column);
1:     }
1:   }
1: 
1:   /**
1:    * Below method will be used to fill parent to list of aggregation column mapping
1:    * @param listOfColumns
1:    *        list of child columns
1:    */
1:   private void fillAggFunctionColumns(List<ColumnSchema> listOfColumns) {
1:     parentToAggChildMapping = new HashMap<>();
1:     for (ColumnSchema column : listOfColumns) {
1:       if (null != column.getAggFunction() && !column.getAggFunction().isEmpty()) {
1:         fillMappingDetails(column, parentToAggChildMapping);
1:       }
1:     }
1:   }
1: 
1: }
============================================================================