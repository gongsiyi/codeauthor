1:9fba684: /*
1:9fba684:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9fba684:  * contributor license agreements.  See the NOTICE file distributed with
1:9fba684:  * this work for additional information regarding copyright ownership.
1:9fba684:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9fba684:  * (the "License"); you may not use this file except in compliance with
1:9fba684:  * the License.  You may obtain a copy of the License at
1:9fba684:  *
1:9fba684:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9fba684:  *
1:9fba684:  * Unless required by applicable law or agreed to in writing, software
1:9fba684:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9fba684:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9fba684:  * See the License for the specific language governing permissions and
1:9fba684:  * limitations under the License.
1:9fba684:  */
1:9fba684: package org.apache.carbondata.core.datamap.status;
1:9fba684: 
1:9fba684: import java.io.IOException;
1:9fba684: import java.util.ArrayList;
1:747be9b: import java.util.HashMap;
1:9fba684: import java.util.List;
1:747be9b: import java.util.Map;
1:9fba684: 
1:5f2a748: import org.apache.carbondata.common.exceptions.sql.NoSuchDataMapException;
1:9fba684: import org.apache.carbondata.core.datamap.DataMapStoreManager;
1:9fba684: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:9fba684: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:9fba684: 
1:9fba684: /**
1:9fba684:  * Maintains the status of each datamap. As per the status query will decide whether to hit datamap
1:9fba684:  * or not.
1:9fba684:  */
1:9fba684: public class DataMapStatusManager {
1:9fba684: 
1:9fba684:   // Create private constructor to not allow create instance of it
1:9fba684:   private DataMapStatusManager() {
1:9fba684: 
1:9fba684:   }
1:9fba684: 
1:9fba684:   /**
1:9fba684:    * TODO Use factory when we have more storage providers
1:9fba684:    */
1:9fba684:   private static DataMapStatusStorageProvider storageProvider =
1:9fba684:       new DiskBasedDataMapStatusProvider();
1:9fba684: 
1:9fba684:   /**
1:9fba684:    * Reads all datamap status file
1:9fba684:    * @return
1:9fba684:    * @throws IOException
1:9fba684:    */
1:9fba684:   public static DataMapStatusDetail[] readDataMapStatusDetails() throws IOException {
1:9fba684:     return storageProvider.getDataMapStatusDetails();
1:9fba684:   }
1:9fba684: 
1:2881c6b:   /**
1:2881c6b:    * Get enabled datamap status details
1:2881c6b:    * @return
1:2881c6b:    * @throws IOException
1:2881c6b:    */
1:2881c6b:   public static DataMapStatusDetail[] getEnabledDataMapStatusDetails() throws IOException {
1:2881c6b:     DataMapStatusDetail[] dataMapStatusDetails = storageProvider.getDataMapStatusDetails();
1:2881c6b:     List<DataMapStatusDetail> statusDetailList = new ArrayList<>();
1:2881c6b:     for (DataMapStatusDetail statusDetail : dataMapStatusDetails) {
1:2881c6b:       if (statusDetail.getStatus() == DataMapStatus.ENABLED) {
1:2881c6b:         statusDetailList.add(statusDetail);
1:2881c6b:       }
1:2881c6b:     }
1:2881c6b:     return statusDetailList.toArray(new DataMapStatusDetail[statusDetailList.size()]);
1:2881c6b:   }
1:2881c6b: 
1:747be9b:   public static Map<String, DataMapStatusDetail> readDataMapStatusMap() throws IOException {
1:747be9b:     DataMapStatusDetail[] details = storageProvider.getDataMapStatusDetails();
1:747be9b:     Map<String, DataMapStatusDetail> map = new HashMap<>(details.length);
1:747be9b:     for (DataMapStatusDetail detail : details) {
1:747be9b:       map.put(detail.getDataMapName(), detail);
1:9fba684:     }
1:747be9b:     return map;
1:9fba684:   }
1:9fba684: 
1:9db662a:   public static void disableDataMap(String dataMapName) throws IOException, NoSuchDataMapException {
1:5f2a748:     DataMapSchema dataMapSchema = getDataMapSchema(dataMapName);
1:9fba684:     if (dataMapSchema != null) {
1:f2bb9f4:       List<DataMapSchema> list = new ArrayList<>();
1:9fba684:       list.add(dataMapSchema);
1:f2bb9f4:       storageProvider.updateDataMapStatus(list, DataMapStatus.DISABLED);
1:9fba684:     }
1:9fba684:   }
1:9fba684: 
1:747be9b:   /**
1:747be9b:    * This method will disable all lazy (DEFERRED REBUILD) datamap in the given table
1:747be9b:    */
1:747be9b:   public static void disableAllLazyDataMaps(CarbonTable table) throws IOException {
3:9fba684:     List<DataMapSchema> allDataMapSchemas =
1:5f2a748:         DataMapStoreManager.getInstance().getDataMapSchemasOfTable(table);
1:747be9b:     List<DataMapSchema> dataMapToBeDisabled = new ArrayList<>(allDataMapSchemas.size());
1:747be9b:     for (DataMapSchema dataMap : allDataMapSchemas) {
1:0ab03f2:       // TODO all non datamaps like MV is now supports only lazy. Once the support is made the
1:0ab03f2:       // following check can be removed.
1:0ab03f2:       if (dataMap.isLazy() || !dataMap.isIndexDataMap()) {
1:747be9b:         dataMapToBeDisabled.add(dataMap);
1:9fba684:       }
1:9fba684:     }
1:747be9b:     storageProvider.updateDataMapStatus(dataMapToBeDisabled, DataMapStatus.DISABLED);
1:9fba684:   }
1:9fba684: 
1:5f2a748:   public static void enableDataMap(String dataMapName) throws IOException, NoSuchDataMapException {
1:5f2a748:     DataMapSchema dataMapSchema = getDataMapSchema(dataMapName);
1:9fba684:     if (dataMapSchema != null) {
1:f2bb9f4:       List<DataMapSchema> list = new ArrayList<>();
1:9fba684:       list.add(dataMapSchema);
1:f2bb9f4:       storageProvider.updateDataMapStatus(list, DataMapStatus.ENABLED);
1:9fba684:     }
1:9fba684:   }
1:9fba684: 
1:5f2a748:   public static void dropDataMap(String dataMapName) throws IOException, NoSuchDataMapException {
1:5f2a748:     DataMapSchema dataMapSchema = getDataMapSchema(dataMapName);
1:9fba684:     if (dataMapSchema != null) {
1:f2bb9f4:       List<DataMapSchema> list = new ArrayList<>();
1:9fba684:       list.add(dataMapSchema);
1:f2bb9f4:       storageProvider.updateDataMapStatus(list, DataMapStatus.DROPPED);
1:9fba684:     }
1:9fba684:   }
1:9fba684: 
1:5f2a748:   private static DataMapSchema getDataMapSchema(String dataMapName)
1:5f2a748:       throws IOException, NoSuchDataMapException {
1:5f2a748:     return DataMapStoreManager.getInstance().getDataMapSchema(dataMapName);
1:9fba684:   }
1:9fba684: 
1:9fba684: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:0ab03f2
/////////////////////////////////////////////////////////////////////////
1:       // TODO all non datamaps like MV is now supports only lazy. Once the support is made the
1:       // following check can be removed.
1:       if (dataMap.isLazy() || !dataMap.isIndexDataMap()) {
commit:2881c6b
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Get enabled datamap status details
1:    * @return
1:    * @throws IOException
1:    */
1:   public static DataMapStatusDetail[] getEnabledDataMapStatusDetails() throws IOException {
1:     DataMapStatusDetail[] dataMapStatusDetails = storageProvider.getDataMapStatusDetails();
1:     List<DataMapStatusDetail> statusDetailList = new ArrayList<>();
1:     for (DataMapStatusDetail statusDetail : dataMapStatusDetails) {
1:       if (statusDetail.getStatus() == DataMapStatus.ENABLED) {
1:         statusDetailList.add(statusDetail);
1:       }
1:     }
1:     return statusDetailList.toArray(new DataMapStatusDetail[statusDetailList.size()]);
1:   }
1: 
commit:f2bb9f4
/////////////////////////////////////////////////////////////////////////
1:       List<DataMapSchema> list = new ArrayList<>();
1:       storageProvider.updateDataMapStatus(list, DataMapStatus.DISABLED);
/////////////////////////////////////////////////////////////////////////
1:       List<DataMapSchema> list = new ArrayList<>();
1:       storageProvider.updateDataMapStatus(list, DataMapStatus.ENABLED);
/////////////////////////////////////////////////////////////////////////
1:       List<DataMapSchema> list = new ArrayList<>();
1:       storageProvider.updateDataMapStatus(list, DataMapStatus.DROPPED);
commit:5f2a748
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.exceptions.sql.NoSuchDataMapException;
/////////////////////////////////////////////////////////////////////////
1:     DataMapSchema dataMapSchema = getDataMapSchema(dataMapName);
/////////////////////////////////////////////////////////////////////////
1:         DataMapStoreManager.getInstance().getDataMapSchemasOfTable(table);
1:   public static void enableDataMap(String dataMapName) throws IOException, NoSuchDataMapException {
1:     DataMapSchema dataMapSchema = getDataMapSchema(dataMapName);
/////////////////////////////////////////////////////////////////////////
0:         DataMapStoreManager.getInstance().getDataMapSchemasOfTable(table);
1:   public static void dropDataMap(String dataMapName) throws IOException, NoSuchDataMapException {
1:     DataMapSchema dataMapSchema = getDataMapSchema(dataMapName);
/////////////////////////////////////////////////////////////////////////
1:   private static DataMapSchema getDataMapSchema(String dataMapName)
1:       throws IOException, NoSuchDataMapException {
1:     return DataMapStoreManager.getInstance().getDataMapSchema(dataMapName);
commit:9fba684
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datamap.status;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.datamap.DataMapStoreManager;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1: 
1: /**
1:  * Maintains the status of each datamap. As per the status query will decide whether to hit datamap
1:  * or not.
1:  */
1: public class DataMapStatusManager {
1: 
1:   // Create private constructor to not allow create instance of it
1:   private DataMapStatusManager() {
1: 
1:   }
1: 
1:   /**
1:    * TODO Use factory when we have more storage providers
1:    */
1:   private static DataMapStatusStorageProvider storageProvider =
1:       new DiskBasedDataMapStatusProvider();
1: 
1:   /**
1:    * Reads all datamap status file
1:    * @return
1:    * @throws IOException
1:    */
1:   public static DataMapStatusDetail[] readDataMapStatusDetails() throws IOException {
1:     return storageProvider.getDataMapStatusDetails();
1:   }
1: 
0:   public static void disableDataMap(String dataMapName) throws Exception {
0:     DataMapSchema dataMapSchema = validateDataMap(dataMapName, false);
0:     List<DataMapSchema> list = new ArrayList<>();
1:     if (dataMapSchema != null) {
1:       list.add(dataMapSchema);
1:     }
0:     storageProvider.updateDataMapStatus(list, DataMapStatus.DISABLED);
1:   }
1: 
0:   public static void disableDataMapsOfTable(CarbonTable table) throws IOException {
1:     List<DataMapSchema> allDataMapSchemas =
0:         DataMapStoreManager.getInstance().getAllDataMapSchemas(table);
0:     storageProvider.updateDataMapStatus(allDataMapSchemas, DataMapStatus.DISABLED);
1:   }
1: 
0:   public static void enableDataMap(String dataMapName) throws IOException {
0:     DataMapSchema dataMapSchema = validateDataMap(dataMapName, false);
0:     List<DataMapSchema> list = new ArrayList<>();
1:     if (dataMapSchema != null) {
1:       list.add(dataMapSchema);
1:     }
0:     storageProvider.updateDataMapStatus(list, DataMapStatus.ENABLED);
1:   }
1: 
0:   public static void enableDataMapsOfTable(CarbonTable table) throws IOException {
1:     List<DataMapSchema> allDataMapSchemas =
0:         DataMapStoreManager.getInstance().getAllDataMapSchemas(table);
0:     storageProvider.updateDataMapStatus(allDataMapSchemas, DataMapStatus.ENABLED);
1:   }
1: 
0:   public static void dropDataMap(String dataMapName) throws IOException {
0:     DataMapSchema dataMapSchema = validateDataMap(dataMapName, false);
0:     List<DataMapSchema> list = new ArrayList<>();
1:     if (dataMapSchema != null) {
1:       list.add(dataMapSchema);
1:     }
0:     storageProvider.updateDataMapStatus(list, DataMapStatus.DROPPED);
1:   }
1: 
0:   private static DataMapSchema validateDataMap(String dataMapName, boolean valdate) {
1:     List<DataMapSchema> allDataMapSchemas =
0:         DataMapStoreManager.getInstance().getAllDataMapSchemas();
0:     DataMapSchema dataMapSchema = null;
0:     for (DataMapSchema schema : allDataMapSchemas) {
0:       if (schema.getDataMapName().equalsIgnoreCase(dataMapName)) {
0:         dataMapSchema = schema;
1:       }
1:     }
0:     if (dataMapSchema == null && valdate) {
0:       throw new UnsupportedOperationException("Cannot be disabled non exist datamap");
0:     } else {
0:       return dataMapSchema;
1:     }
1:   }
1: 
1: }
author:Jacky Li
-------------------------------------------------------------------------------
commit:747be9b
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:   public static Map<String, DataMapStatusDetail> readDataMapStatusMap() throws IOException {
1:     DataMapStatusDetail[] details = storageProvider.getDataMapStatusDetails();
1:     Map<String, DataMapStatusDetail> map = new HashMap<>(details.length);
1:     for (DataMapStatusDetail detail : details) {
1:       map.put(detail.getDataMapName(), detail);
0:     }
1:     return map;
0:   }
0: 
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * This method will disable all lazy (DEFERRED REBUILD) datamap in the given table
1:    */
1:   public static void disableAllLazyDataMaps(CarbonTable table) throws IOException {
1:     List<DataMapSchema> dataMapToBeDisabled = new ArrayList<>(allDataMapSchemas.size());
1:     for (DataMapSchema dataMap : allDataMapSchemas) {
0:       if (dataMap.isLazy()) {
1:         dataMapToBeDisabled.add(dataMap);
0:       }
0:     }
1:     storageProvider.updateDataMapStatus(dataMapToBeDisabled, DataMapStatus.DISABLED);
/////////////////////////////////////////////////////////////////////////
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1:   public static void disableDataMap(String dataMapName) throws IOException, NoSuchDataMapException {
============================================================================