1:6b3b16c: /*
1:6b3b16c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6b3b16c:  * contributor license agreements.  See the NOTICE file distributed with
1:6b3b16c:  * this work for additional information regarding copyright ownership.
1:6b3b16c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6b3b16c:  * (the "License"); you may not use this file except in compliance with
1:6b3b16c:  * the License.  You may obtain a copy of the License at
1:6b3b16c:  *
1:6b3b16c:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6b3b16c:  *
1:6b3b16c:  * Unless required by applicable law or agreed to in writing, software
1:6b3b16c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6b3b16c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6b3b16c:  * See the License for the specific language governing permissions and
1:6b3b16c:  * limitations under the License.
1:6b3b16c:  */
1:266c473: 
1:6b3b16c: package org.apache.carbondata.core.scan.filter.executer;
2:6b3b16c: 
1:6b3b16c: import java.nio.charset.Charset;
1:6b3b16c: import java.util.List;
1:6b3b16c: 
1:6b3b16c: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:b52f157: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryGenerator;
1:b52f157: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryKeyGeneratorFactory;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:6b3b16c: import org.apache.carbondata.core.metadata.encoder.Encoding;
1:6b3b16c: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:266c473: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
1:b52f157: import org.apache.carbondata.core.scan.executor.util.RestructureUtil;
1:266c473: import org.apache.carbondata.core.scan.filter.ColumnFilterInfo;
1:6b3b16c: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;
1:266c473: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.MeasureColumnResolvedFilterInfo;
1:6b3b16c: import org.apache.carbondata.core.util.ByteUtil;
1:4e83509: import org.apache.carbondata.core.util.comparator.Comparator;
1:4e83509: import org.apache.carbondata.core.util.comparator.SerializableComparator;
1:6b3b16c: 
1:6b3b16c: /**
1:6b3b16c:  * Abstract class for restructure
1:6b3b16c:  */
1:6b3b16c: public abstract class RestructureEvaluatorImpl implements FilterExecuter {
1:6b3b16c: 
1:6b3b16c:   /**
1:6b3b16c:    * This method will check whether a default value for the non-existing column is present
1:6b3b16c:    * in the filter values list
1:6b3b16c:    *
1:6b3b16c:    * @param dimColumnEvaluatorInfo
1:6b3b16c:    * @return
1:6b3b16c:    */
1:6b3b16c:   protected boolean isDimensionDefaultValuePresentInFilterValues(
1:6b3b16c:       DimColumnResolvedFilterInfo dimColumnEvaluatorInfo) {
1:6b3b16c:     boolean isDefaultValuePresentInFilterValues = false;
1:266c473:     ColumnFilterInfo filterValues = dimColumnEvaluatorInfo.getFilterValues();
1:6b3b16c:     CarbonDimension dimension = dimColumnEvaluatorInfo.getDimension();
1:6b3b16c:     byte[] defaultValue = dimension.getDefaultValue();
1:6b3b16c:     if (!dimension.hasEncoding(Encoding.DICTIONARY)) {
1:6b3b16c:       // for no dictionary cases
1:6b3b16c:       // 3 cases: is NUll, is Not Null and filter on default value of newly added column
1:956833e:       if (null == defaultValue && dimension.getDataType() == DataTypes.STRING) {
1:6b3b16c:         // default value for case where user gives is Null condition
1:6b3b16c:         defaultValue = CarbonCommonConstants.MEMBER_DEFAULT_VAL
1:6b3b16c:             .getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:36ceb59:       } else if (null == defaultValue) {
1:36ceb59:         defaultValue = CarbonCommonConstants.EMPTY_BYTE_ARRAY;
1:6b3b16c:       }
1:6b3b16c:       List<byte[]> noDictionaryFilterValuesList = filterValues.getNoDictionaryFilterValuesList();
1:6b3b16c:       for (byte[] filterValue : noDictionaryFilterValuesList) {
1:266c473:         int compare = ByteUtil.UnsafeComparer.INSTANCE.compareTo(defaultValue, filterValue);
1:6b3b16c:         if (compare == 0) {
1:6b3b16c:           isDefaultValuePresentInFilterValues = true;
1:6b3b16c:           break;
1:6b3b16c:         }
1:6b3b16c:       }
1:6b3b16c:     } else {
1:6b3b16c:       // for dictionary and direct dictionary cases
1:6b3b16c:       // 3 cases: is NUll, is Not Null and filter on default value of newly added column
1:6b3b16c:       int defaultSurrogateValueToCompare = CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY;
1:6b3b16c:       if (null != defaultValue) {
1:b52f157:         if (dimension.hasEncoding(Encoding.DIRECT_DICTIONARY)) {
1:b52f157:           DirectDictionaryGenerator directDictionaryGenerator = DirectDictionaryKeyGeneratorFactory
1:b52f157:               .getDirectDictionaryGenerator(dimension.getDataType());
1:b52f157:           if (directDictionaryGenerator != null) {
1:b52f157:             String value =
1:b52f157:                 new String(defaultValue, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:b52f157:             defaultSurrogateValueToCompare = Integer.parseInt(value);
1:b52f157:           }
1:b52f157:         } else {
1:b52f157:           defaultSurrogateValueToCompare++;
1:b52f157:         }
1:6b3b16c:       }
1:d2319f0:       List<Integer> filterList = null;
1:d2319f0:       if (filterValues.isIncludeFilter() && !filterValues.isOptimized()) {
1:d2319f0:         filterList = filterValues.getFilterList();
1:d2319f0:       } else {
1:d2319f0:         filterList = filterValues.getExcludeFilterList();
1:d2319f0:       }
1:6b3b16c:       for (Integer filterValue : filterList) {
1:6b3b16c:         if (defaultSurrogateValueToCompare == filterValue) {
1:6b3b16c:           isDefaultValuePresentInFilterValues = true;
1:6b3b16c:           break;
1:6b3b16c:         }
1:6b3b16c:       }
1:6b3b16c:     }
1:6b3b16c:     return isDefaultValuePresentInFilterValues;
1:6b3b16c:   }
1:4e83509: 
1:266c473:   /**
1:266c473:    * This method will check whether a default value for the non-existing column is present
1:266c473:    * in the filter values list
1:266c473:    *
1:266c473:    * @param measureColumnResolvedFilterInfo
1:266c473:    * @return
1:266c473:    */
1:266c473:   protected boolean isMeasureDefaultValuePresentInFilterValues(
1:266c473:       MeasureColumnResolvedFilterInfo measureColumnResolvedFilterInfo) {
1:266c473:     boolean isDefaultValuePresentInFilterValues = false;
1:266c473:     ColumnFilterInfo filterValues = measureColumnResolvedFilterInfo.getFilterValues();
1:266c473:     CarbonMeasure measure = measureColumnResolvedFilterInfo.getMeasure();
1:4e83509:     SerializableComparator comparator =
1:4e83509:         Comparator.getComparatorByDataTypeForMeasure(measure.getDataType());
1:4e83509:     Object defaultValue = null;
1:4e83509:     if (null != measure.getDefaultValue()) {
1:266c473:       // default value for case where user gives is Null condition
1:b52f157:       defaultValue = RestructureUtil
1:b52f157:           .getMeasureDefaultValue(measure.getColumnSchema(), measure.getDefaultValue());
1:266c473:     }
1:4e83509:     List<Object> measureFilterValuesList = filterValues.getMeasuresFilterValuesList();
1:4e83509:     for (Object filterValue : measureFilterValuesList) {
1:4e83509:       int compare = comparator.compare(defaultValue, filterValue);
1:266c473:       if (compare == 0) {
1:266c473:         isDefaultValuePresentInFilterValues = true;
1:266c473:         break;
1:266c473:       }
1:266c473:     }
1:266c473:     return isDefaultValuePresentInFilterValues;
1:266c473:   }
1:6b3b16c: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
author:Jatin
-------------------------------------------------------------------------------
commit:b52f157
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryGenerator;
1: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryKeyGeneratorFactory;
1: import org.apache.carbondata.core.scan.executor.util.RestructureUtil;
/////////////////////////////////////////////////////////////////////////
1:         if (dimension.hasEncoding(Encoding.DIRECT_DICTIONARY)) {
1:           DirectDictionaryGenerator directDictionaryGenerator = DirectDictionaryKeyGeneratorFactory
1:               .getDirectDictionaryGenerator(dimension.getDataType());
1:           if (directDictionaryGenerator != null) {
1:             String value =
1:                 new String(defaultValue, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:             defaultSurrogateValueToCompare = Integer.parseInt(value);
1:           }
1:         } else {
1:           defaultSurrogateValueToCompare++;
1:         }
/////////////////////////////////////////////////////////////////////////
1:       defaultValue = RestructureUtil
1:           .getMeasureDefaultValue(measure.getColumnSchema(), measure.getDefaultValue());
author:dhatchayani
-------------------------------------------------------------------------------
commit:d2319f0
/////////////////////////////////////////////////////////////////////////
1:       List<Integer> filterList = null;
1:       if (filterValues.isIncludeFilter() && !filterValues.isOptimized()) {
1:         filterList = filterValues.getFilterList();
1:       } else {
1:         filterList = filterValues.getExcludeFilterList();
1:       }
commit:36ceb59
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.datatype.DataType;
/////////////////////////////////////////////////////////////////////////
0:       if (null == defaultValue && dimension.getDataType() == DataType.STRING) {
1:       } else if (null == defaultValue) {
1:         defaultValue = CarbonCommonConstants.EMPTY_BYTE_ARRAY;
author:Jacky Li
-------------------------------------------------------------------------------
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:       if (null == defaultValue && dimension.getDataType() == DataTypes.STRING) {
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:4e83509
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.util.DataTypeUtil;
1: import org.apache.carbondata.core.util.comparator.Comparator;
1: import org.apache.carbondata.core.util.comparator.SerializableComparator;
/////////////////////////////////////////////////////////////////////////
1:     SerializableComparator comparator =
1:         Comparator.getComparatorByDataTypeForMeasure(measure.getDataType());
1:     Object defaultValue = null;
1:     if (null != measure.getDefaultValue()) {
0:       defaultValue = DataTypeUtil
0:           .getMeasureObjectFromDataType(measure.getDefaultValue(), measure.getDataType());
1:     List<Object> measureFilterValuesList = filterValues.getMeasuresFilterValuesList();
1:     for (Object filterValue : measureFilterValuesList) {
1:       int compare = comparator.compare(defaultValue, filterValue);
/////////////////////////////////////////////////////////////////////////
1: 
author:sounakr
-------------------------------------------------------------------------------
commit:266c473
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
1: import org.apache.carbondata.core.scan.filter.ColumnFilterInfo;
1: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.MeasureColumnResolvedFilterInfo;
/////////////////////////////////////////////////////////////////////////
1:     ColumnFilterInfo filterValues = dimColumnEvaluatorInfo.getFilterValues();
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * This method will check whether a default value for the non-existing column is present
1:    * in the filter values list
1:    *
1:    * @param measureColumnResolvedFilterInfo
1:    * @return
1:    */
1:   protected boolean isMeasureDefaultValuePresentInFilterValues(
1:       MeasureColumnResolvedFilterInfo measureColumnResolvedFilterInfo) {
1:     boolean isDefaultValuePresentInFilterValues = false;
1:     ColumnFilterInfo filterValues = measureColumnResolvedFilterInfo.getFilterValues();
1:     CarbonMeasure measure = measureColumnResolvedFilterInfo.getMeasure();
0:     byte[] defaultValue = measure.getDefaultValue();
0:     if (null == defaultValue) {
1:       // default value for case where user gives is Null condition
0:       defaultValue = new byte[0];
1:     }
0:     List<byte[]> measureFilterValuesList = filterValues.getMeasuresFilterValuesList();
0:     for (byte[] filterValue : measureFilterValuesList) {
1:       int compare = ByteUtil.UnsafeComparer.INSTANCE.compareTo(defaultValue, filterValue);
1:       if (compare == 0) {
1:         isDefaultValuePresentInFilterValues = true;
1:         break;
1:       }
1:     }
1:     return isDefaultValuePresentInFilterValues;
1:   }
author:manishgupta88
-------------------------------------------------------------------------------
commit:6b3b16c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.filter.executer;
1: 
1: import java.nio.charset.Charset;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.metadata.encoder.Encoding;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
0: import org.apache.carbondata.core.scan.filter.DimColumnFilterInfo;
1: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: /**
1:  * Abstract class for restructure
1:  */
1: public abstract class RestructureEvaluatorImpl implements FilterExecuter {
1: 
1:   /**
1:    * This method will check whether a default value for the non-existing column is present
1:    * in the filter values list
1:    *
1:    * @param dimColumnEvaluatorInfo
1:    * @return
1:    */
1:   protected boolean isDimensionDefaultValuePresentInFilterValues(
1:       DimColumnResolvedFilterInfo dimColumnEvaluatorInfo) {
1:     boolean isDefaultValuePresentInFilterValues = false;
0:     DimColumnFilterInfo filterValues = dimColumnEvaluatorInfo.getFilterValues();
1:     CarbonDimension dimension = dimColumnEvaluatorInfo.getDimension();
1:     byte[] defaultValue = dimension.getDefaultValue();
1:     if (!dimension.hasEncoding(Encoding.DICTIONARY)) {
1:       // for no dictionary cases
1:       // 3 cases: is NUll, is Not Null and filter on default value of newly added column
0:       if (null == defaultValue) {
1:         // default value for case where user gives is Null condition
1:         defaultValue = CarbonCommonConstants.MEMBER_DEFAULT_VAL
1:             .getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:       }
1:       List<byte[]> noDictionaryFilterValuesList = filterValues.getNoDictionaryFilterValuesList();
1:       for (byte[] filterValue : noDictionaryFilterValuesList) {
0:         int compare = ByteUtil.UnsafeComparer.INSTANCE.compareTo(defaultValue, filterValue);
1:         if (compare == 0) {
1:           isDefaultValuePresentInFilterValues = true;
1:           break;
1:         }
1:       }
1:     } else {
1:       // for dictionary and direct dictionary cases
1:       // 3 cases: is NUll, is Not Null and filter on default value of newly added column
1:       int defaultSurrogateValueToCompare = CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY;
1:       if (null != defaultValue) {
0:         defaultSurrogateValueToCompare++;
1:       }
0:       List<Integer> filterList = filterValues.getFilterList();
1:       for (Integer filterValue : filterList) {
1:         if (defaultSurrogateValueToCompare == filterValue) {
1:           isDefaultValuePresentInFilterValues = true;
1:           break;
1:         }
1:       }
1:     }
1:     return isDefaultValuePresentInFilterValues;
1:   }
1: }
============================================================================