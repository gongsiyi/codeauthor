1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.keygenerator.mdkey;
1:cd6a4ff: 
1:cd6a4ff: import java.io.Serializable;
1:cd6a4ff: import java.util.Arrays;
1:cd6a4ff: 
1:cd6a4ff: public class Bits implements Serializable {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Bits MAX_LENGTH
1:cd6a4ff:    */
1:cd6a4ff:   private static final int MAX_LENGTH = 63;
1:cd6a4ff:   private static final int LONG_LENGTH = 64;
1:cd6a4ff:   /**
1:cd6a4ff:    * serialVersionUID.
1:cd6a4ff:    */
1:cd6a4ff:   private static final long serialVersionUID = 1555114921503304849L;
1:cd6a4ff:   /**
1:cd6a4ff:    * LONG_MAX.
1:cd6a4ff:    */
1:cd6a4ff:   private static final long LONG_MAX = 0x7fffffffffffffffL;
1:cd6a4ff:   /**
1:cd6a4ff:    * length.
1:cd6a4ff:    */
1:cd6a4ff:   private int length = 100;
1:cd6a4ff:   /**
1:cd6a4ff:    * lens.
1:cd6a4ff:    */
1:cd6a4ff:   private int[] lens;
1:cd6a4ff:   /**
1:cd6a4ff:    * wsize.
1:cd6a4ff:    */
1:cd6a4ff:   private int wsize;
1:cd6a4ff:   /**
1:cd6a4ff:    * byteSize.
1:cd6a4ff:    */
1:cd6a4ff:   private int byteSize;
1:cd6a4ff: 
1:cd6a4ff:   public Bits(int[] lens) {
1:cd6a4ff:     this.lens = lens;
1:cd6a4ff:     this.length = getTotalLength(lens);
1:cd6a4ff: 
1:cd6a4ff:     wsize = length / LONG_LENGTH;
1:cd6a4ff:     byteSize = length / 8;
1:cd6a4ff: 
1:cd6a4ff:     if (length % LONG_LENGTH != 0) {
1:cd6a4ff:       wsize++;
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     if (length % 8 != 0) {
1:cd6a4ff:       byteSize++;
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public int getByteSize() {
1:cd6a4ff:     return byteSize;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private int getTotalLength(int[] lens) {
1:cd6a4ff:     int tLen = 0;
1:cd6a4ff:     for (int len : lens) {
1:cd6a4ff:       tLen += len;
1:cd6a4ff:     }
1:cd6a4ff:     return tLen;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public int getDimCount() {
1:cd6a4ff:     return lens.length;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Return the start and end Byte offsets of dimension in the MDKey. int []
1:cd6a4ff:    * {start, end}
1:cd6a4ff:    */
1:cd6a4ff:   public int[] getKeyByteOffsets(int index) {
1:cd6a4ff: 
1:81149f6:     int priorLen = length % 8 == 0 ? 0 : (8 - length % 8);
1:cd6a4ff:     int start = 0;
1:cd6a4ff:     int end = 0;
1:cd6a4ff: 
1:cd6a4ff:     // Calculate prior length for all previous keys
1:cd6a4ff:     for (int i = 0; i < index; i++) {
1:cd6a4ff:       priorLen += lens[i];
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     // Start
1:cd6a4ff:     start = priorLen / 8;
1:cd6a4ff: 
1:cd6a4ff:     int tillKeyLength = priorLen + lens[index];
1:cd6a4ff: 
1:cd6a4ff:     // End key
1:cd6a4ff:     end = (tillKeyLength) / 8;
1:cd6a4ff: 
1:cd6a4ff:     // Consider if end is the last bit. No need to include the next byte.
1:cd6a4ff:     if (tillKeyLength % 8 == 0) {
1:cd6a4ff:       end--;
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     return new int[] { start, end };
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   protected long[] get(long[] keys) {
1:cd6a4ff:     long[] words = new long[wsize];
1:cd6a4ff:     int ll = 0;
1:9f94529:     int minLength = Math.min(lens.length, keys.length);
1:9f94529:     for (int i = minLength - 1; i >= 0; i--) {
1:cd6a4ff: 
1:cd6a4ff:       long val = keys[i];
1:cd6a4ff: 
1:cd6a4ff:       int idx = ll >> 6;// divide by 64 to get the new word index
1:cd6a4ff:       int position = ll & 0x3f;// to ignore sign bit and consider the remaining
1:cd6a4ff:       val = val & (LONG_MAX >> (MAX_LENGTH - lens[i]));// To control the
1:cd6a4ff:       // logic so that
1:cd6a4ff:       // any val do not
1:cd6a4ff:       // exceed the
1:cd6a4ff:       // cardinality
1:cd6a4ff:       long mask = (val << position);
1:cd6a4ff:       long word = words[idx];
1:cd6a4ff:       words[idx] = (word | mask);
1:cd6a4ff:       ll += lens[i];
1:cd6a4ff: 
1:cd6a4ff:       int nextIndex = ll >> 6;// This is divide by 64
1:cd6a4ff: 
1:cd6a4ff:       if (nextIndex != idx) {
1:cd6a4ff:         int consideredBits = lens[i] - ll & 0x3f;
1:cd6a4ff:         if (consideredBits < lens[i]) //Check for spill over only if all the bits are not considered
1:cd6a4ff:         {
1:cd6a4ff:           mask = (val >> (lens[i] - ll & 0x3f));//& (0x7fffffffffffffffL >> (0x3f-pos));
1:cd6a4ff:           word = words[nextIndex];
1:cd6a4ff:           words[nextIndex] = (word | mask);
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff: 
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     return words;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   protected long[] get(int[] keys) {
1:cd6a4ff:     long[] words = new long[wsize];
1:cd6a4ff:     int ll = 0;
1:9f94529:     int minLength = Math.min(lens.length, keys.length);
1:9f94529:     for (int i = minLength - 1; i >= 0; i--) {
1:cd6a4ff: 
1:cd6a4ff:       long val = keys[i];
1:cd6a4ff: 
1:cd6a4ff:       int index = ll >> 6;// divide by 64 to get the new word index
1:cd6a4ff:       int pos = ll & 0x3f;// to ignore sign bit and consider the remaining
1:cd6a4ff:       val = val & (LONG_MAX >> (MAX_LENGTH - lens[i]));// To control the
1:cd6a4ff:       // logic so that
1:cd6a4ff:       // any val do not
1:cd6a4ff:       // exceed the
1:cd6a4ff:       // cardinality
1:cd6a4ff:       long mask = (val << pos);
1:cd6a4ff:       long word = words[index];
1:cd6a4ff:       words[index] = (word | mask);
1:cd6a4ff:       ll += lens[i];
1:cd6a4ff: 
1:cd6a4ff:       int nextIndex = ll >> 6;// This is divide by 64
1:cd6a4ff: 
1:cd6a4ff:       if (nextIndex != index) {
1:cd6a4ff:         int consideredBits = lens[i] - ll & 0x3f;
1:cd6a4ff:         if (consideredBits < lens[i]) //Check for spill over only if all the bits are not considered
1:cd6a4ff:         {
1:cd6a4ff:           // Check for spill over
1:cd6a4ff:           mask = (val >> (lens[i] - ll & 0x3f));
1:cd6a4ff:           word = words[nextIndex];
1:cd6a4ff:           words[nextIndex] = (word | mask);
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff: 
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     return words;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private long[] getArray(long[] words) {
1:cd6a4ff:     long[] vals = new long[lens.length];
1:cd6a4ff:     int ll = 0;
3:cd6a4ff:     for (int i = lens.length - 1; i >= 0; i--) {
1:cd6a4ff: 
1:cd6a4ff:       int index = ll >> 6;
1:cd6a4ff:       int pos = ll & 0x3f;
1:cd6a4ff:       long val = words[index];
1:cd6a4ff:       long mask = (LONG_MAX >>> (MAX_LENGTH - lens[i]));
1:cd6a4ff:       mask = mask << pos;
1:cd6a4ff:       vals[i] = (val & mask);
1:cd6a4ff:       vals[i] >>>= pos;
1:cd6a4ff:       ll += lens[i];
1:cd6a4ff: 
1:cd6a4ff:       int nextIndex = ll >> 6;
1:cd6a4ff:       if (nextIndex != index) {
1:cd6a4ff:         pos = ll & 0x3f;
1:cd6a4ff:         if (pos != 0) // Number of bits pending for current key is zero, no spill over
1:cd6a4ff:         {
1:cd6a4ff:           mask = (LONG_MAX >>> (MAX_LENGTH - pos));
1:cd6a4ff:           val = words[nextIndex];
1:cd6a4ff:           vals[i] = vals[i] | ((val & mask) << (lens[i] - pos));
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     return vals;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public byte[] getBytes(long[] keys) {
1:cd6a4ff: 
1:cd6a4ff:     long[] words = get(keys);
1:cd6a4ff: 
1:cd6a4ff:     return getBytesVal(words);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private byte[] getBytesVal(long[] words) {
1:cd6a4ff:     int length = 8;
1:cd6a4ff:     byte[] bytes = new byte[byteSize];
1:cd6a4ff: 
1:cd6a4ff:     int l = byteSize - 1;
1:cd6a4ff:     for (int i = 0; i < words.length; i++) {
1:cd6a4ff:       long val = words[i];
1:cd6a4ff: 
1:cd6a4ff:       for (int j = length - 1; j > 0 && l > 0; j--) {
1:cd6a4ff:         bytes[l] = (byte) val;
1:cd6a4ff:         val >>>= 8;
1:cd6a4ff:         l--;
1:cd6a4ff:       }
1:cd6a4ff:       bytes[l] = (byte) val;
1:cd6a4ff:       l--;
1:cd6a4ff:     }
1:cd6a4ff:     return bytes;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public byte[] getBytes(int[] keys) {
1:cd6a4ff: 
1:cd6a4ff:     long[] words = get(keys);
1:cd6a4ff: 
1:cd6a4ff:     return getBytesVal(words);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public long[] getKeyArray(byte[] key, int offset) {
1:cd6a4ff: 
1:cd6a4ff:     int length = 8;
1:cd6a4ff:     int ls = byteSize;
1:cd6a4ff:     long[] words = new long[wsize];
1:cd6a4ff:     for (int i = 0; i < words.length; i++) {
1:cd6a4ff:       long l = 0;
1:cd6a4ff:       ls -= 8;
1:cd6a4ff:       int m = 0;
1:cd6a4ff:       if (ls < 0) {
1:cd6a4ff:         m = ls + length;
1:cd6a4ff:         ls = 0;
1:cd6a4ff:       } else {
1:cd6a4ff:         m = ls + 8;
1:cd6a4ff:       }
1:cd6a4ff:       for (int j = ls; j < m; j++) {
1:cd6a4ff:         l <<= 8;
1:cd6a4ff:         l ^= key[j + offset] & 0xFF;
1:cd6a4ff:       }
1:cd6a4ff:       words[i] = l;
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     return getArray(words);
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public long[] getKeyArray(byte[] key, int[] maskByteRanges) {
1:cd6a4ff: 
1:cd6a4ff:     int length = 8;
1:cd6a4ff:     int ls = byteSize;
1:cd6a4ff:     long[] words = new long[wsize];
1:cd6a4ff:     for (int i = 0; i < words.length; i++) {
1:cd6a4ff:       long l = 0;
1:cd6a4ff:       ls -= 8;
1:cd6a4ff:       int m2 = 0;
1:cd6a4ff:       if (ls < 0) {
1:cd6a4ff:         m2 = ls + length;
1:cd6a4ff:         ls = 0;
1:cd6a4ff:       } else {
1:cd6a4ff:         m2 = ls + 8;
1:cd6a4ff:       }
1:cd6a4ff:       if (maskByteRanges == null) {
1:cd6a4ff:         for (int j = ls; j < m2; j++) {
1:cd6a4ff:           l <<= 8;
1:cd6a4ff:           l ^= key[j] & 0xFF;
1:cd6a4ff:         }
1:cd6a4ff:       } else {
1:cd6a4ff:         for (int j = ls; j < m2; j++) {
1:cd6a4ff:           l <<= 8;
1:cd6a4ff:           if (maskByteRanges[j] != -1) {
1:cd6a4ff:             l ^= key[maskByteRanges[j]] & 0xFF;
1:cd6a4ff:           }
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff:       words[i] = l;
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     return getArray(words);
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public boolean equals(Object obj) {
1:cd6a4ff:     if (obj instanceof Bits) {
1:cd6a4ff:       Bits other = (Bits) obj;
1:cd6a4ff:       return Arrays.equals(lens, other.lens);
1:cd6a4ff:     }
1:cd6a4ff:     return false;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public int hashCode() {
1:cd6a4ff:     return Arrays.hashCode(lens);
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:81149f6
/////////////////////////////////////////////////////////////////////////
1:     int priorLen = length % 8 == 0 ? 0 : (8 - length % 8);
commit:9f94529
/////////////////////////////////////////////////////////////////////////
1:     int minLength = Math.min(lens.length, keys.length);
1:     for (int i = minLength - 1; i >= 0; i--) {
/////////////////////////////////////////////////////////////////////////
1:     int minLength = Math.min(lens.length, keys.length);
1:     for (int i = minLength - 1; i >= 0; i--) {
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.keygenerator.mdkey;
1: 
1: import java.io.Serializable;
1: import java.util.Arrays;
1: 
1: public class Bits implements Serializable {
1: 
1:   /**
1:    * Bits MAX_LENGTH
1:    */
1:   private static final int MAX_LENGTH = 63;
1:   private static final int LONG_LENGTH = 64;
1:   /**
1:    * serialVersionUID.
1:    */
1:   private static final long serialVersionUID = 1555114921503304849L;
1:   /**
1:    * LONG_MAX.
1:    */
1:   private static final long LONG_MAX = 0x7fffffffffffffffL;
1:   /**
1:    * length.
1:    */
1:   private int length = 100;
1:   /**
1:    * lens.
1:    */
1:   private int[] lens;
1:   /**
1:    * wsize.
1:    */
1:   private int wsize;
1:   /**
1:    * byteSize.
1:    */
1:   private int byteSize;
1: 
1:   public Bits(int[] lens) {
1:     this.lens = lens;
1:     this.length = getTotalLength(lens);
1: 
1:     wsize = length / LONG_LENGTH;
1:     byteSize = length / 8;
1: 
1:     if (length % LONG_LENGTH != 0) {
1:       wsize++;
1:     }
1: 
1:     if (length % 8 != 0) {
1:       byteSize++;
1:     }
1:   }
1: 
1:   public int getByteSize() {
1:     return byteSize;
1:   }
1: 
1:   private int getTotalLength(int[] lens) {
1:     int tLen = 0;
1:     for (int len : lens) {
1:       tLen += len;
1:     }
1:     return tLen;
1:   }
1: 
1:   public int getDimCount() {
1:     return lens.length;
1:   }
1: 
1:   /**
1:    * Return the start and end Byte offsets of dimension in the MDKey. int []
1:    * {start, end}
1:    */
1:   public int[] getKeyByteOffsets(int index) {
0:     int prefixPaddingBits = length % 8 == 0 ? 0 : (8 - length % 8);
1: 
0:     int priorLen = prefixPaddingBits;
1:     int start = 0;
1:     int end = 0;
1: 
1:     // Calculate prior length for all previous keys
1:     for (int i = 0; i < index; i++) {
1:       priorLen += lens[i];
1:     }
1: 
1:     // Start
1:     start = priorLen / 8;
1: 
1:     int tillKeyLength = priorLen + lens[index];
1: 
1:     // End key
1:     end = (tillKeyLength) / 8;
1: 
1:     // Consider if end is the last bit. No need to include the next byte.
1:     if (tillKeyLength % 8 == 0) {
1:       end--;
1:     }
1: 
1:     return new int[] { start, end };
1:   }
1: 
1:   protected long[] get(long[] keys) {
1:     long[] words = new long[wsize];
1:     int ll = 0;
1:     for (int i = lens.length - 1; i >= 0; i--) {
1: 
1:       long val = keys[i];
1: 
1:       int idx = ll >> 6;// divide by 64 to get the new word index
1:       int position = ll & 0x3f;// to ignore sign bit and consider the remaining
1:       val = val & (LONG_MAX >> (MAX_LENGTH - lens[i]));// To control the
1:       // logic so that
1:       // any val do not
1:       // exceed the
1:       // cardinality
1:       long mask = (val << position);
1:       long word = words[idx];
1:       words[idx] = (word | mask);
1:       ll += lens[i];
1: 
1:       int nextIndex = ll >> 6;// This is divide by 64
1: 
1:       if (nextIndex != idx) {
1:         int consideredBits = lens[i] - ll & 0x3f;
1:         if (consideredBits < lens[i]) //Check for spill over only if all the bits are not considered
1:         {
1:           mask = (val >> (lens[i] - ll & 0x3f));//& (0x7fffffffffffffffL >> (0x3f-pos));
1:           word = words[nextIndex];
1:           words[nextIndex] = (word | mask);
1:         }
1:       }
1: 
1:     }
1: 
1:     return words;
1:   }
1: 
1:   protected long[] get(int[] keys) {
1:     long[] words = new long[wsize];
1:     int ll = 0;
1:     for (int i = lens.length - 1; i >= 0; i--) {
1: 
1:       long val = keys[i];
1: 
1:       int index = ll >> 6;// divide by 64 to get the new word index
1:       int pos = ll & 0x3f;// to ignore sign bit and consider the remaining
1:       val = val & (LONG_MAX >> (MAX_LENGTH - lens[i]));// To control the
1:       // logic so that
1:       // any val do not
1:       // exceed the
1:       // cardinality
1:       long mask = (val << pos);
1:       long word = words[index];
1:       words[index] = (word | mask);
1:       ll += lens[i];
1: 
1:       int nextIndex = ll >> 6;// This is divide by 64
1: 
1:       if (nextIndex != index) {
1:         int consideredBits = lens[i] - ll & 0x3f;
1:         if (consideredBits < lens[i]) //Check for spill over only if all the bits are not considered
1:         {
1:           // Check for spill over
1:           mask = (val >> (lens[i] - ll & 0x3f));
1:           word = words[nextIndex];
1:           words[nextIndex] = (word | mask);
1:         }
1:       }
1: 
1:     }
1: 
1:     return words;
1:   }
1: 
1:   private long[] getArray(long[] words) {
1:     long[] vals = new long[lens.length];
1:     int ll = 0;
1:     for (int i = lens.length - 1; i >= 0; i--) {
1: 
1:       int index = ll >> 6;
1:       int pos = ll & 0x3f;
1:       long val = words[index];
1:       long mask = (LONG_MAX >>> (MAX_LENGTH - lens[i]));
1:       mask = mask << pos;
1:       vals[i] = (val & mask);
1:       vals[i] >>>= pos;
1:       ll += lens[i];
1: 
1:       int nextIndex = ll >> 6;
1:       if (nextIndex != index) {
1:         pos = ll & 0x3f;
1:         if (pos != 0) // Number of bits pending for current key is zero, no spill over
1:         {
1:           mask = (LONG_MAX >>> (MAX_LENGTH - pos));
1:           val = words[nextIndex];
1:           vals[i] = vals[i] | ((val & mask) << (lens[i] - pos));
1:         }
1:       }
1:     }
1:     return vals;
1:   }
1: 
1:   public byte[] getBytes(long[] keys) {
1: 
1:     long[] words = get(keys);
1: 
1:     return getBytesVal(words);
1:   }
1: 
1:   private byte[] getBytesVal(long[] words) {
1:     int length = 8;
1:     byte[] bytes = new byte[byteSize];
1: 
1:     int l = byteSize - 1;
1:     for (int i = 0; i < words.length; i++) {
1:       long val = words[i];
1: 
1:       for (int j = length - 1; j > 0 && l > 0; j--) {
1:         bytes[l] = (byte) val;
1:         val >>>= 8;
1:         l--;
1:       }
1:       bytes[l] = (byte) val;
1:       l--;
1:     }
1:     return bytes;
1:   }
1: 
1:   public byte[] getBytes(int[] keys) {
1: 
1:     long[] words = get(keys);
1: 
1:     return getBytesVal(words);
1:   }
1: 
1:   public long[] getKeyArray(byte[] key, int offset) {
1: 
1:     int length = 8;
1:     int ls = byteSize;
1:     long[] words = new long[wsize];
1:     for (int i = 0; i < words.length; i++) {
1:       long l = 0;
1:       ls -= 8;
1:       int m = 0;
1:       if (ls < 0) {
1:         m = ls + length;
1:         ls = 0;
1:       } else {
1:         m = ls + 8;
1:       }
1:       for (int j = ls; j < m; j++) {
1:         l <<= 8;
1:         l ^= key[j + offset] & 0xFF;
1:       }
1:       words[i] = l;
1:     }
1: 
1:     return getArray(words);
1: 
1:   }
1: 
1:   public long[] getKeyArray(byte[] key, int[] maskByteRanges) {
1: 
1:     int length = 8;
1:     int ls = byteSize;
1:     long[] words = new long[wsize];
1:     for (int i = 0; i < words.length; i++) {
1:       long l = 0;
1:       ls -= 8;
1:       int m2 = 0;
1:       if (ls < 0) {
1:         m2 = ls + length;
1:         ls = 0;
1:       } else {
1:         m2 = ls + 8;
1:       }
1:       if (maskByteRanges == null) {
1:         for (int j = ls; j < m2; j++) {
1:           l <<= 8;
1:           l ^= key[j] & 0xFF;
1:         }
1:       } else {
1:         for (int j = ls; j < m2; j++) {
1:           l <<= 8;
1:           if (maskByteRanges[j] != -1) {
1:             l ^= key[maskByteRanges[j]] & 0xFF;
1:           }
1:         }
1:       }
1:       words[i] = l;
1:     }
1: 
1:     return getArray(words);
1: 
1:   }
1: 
1:   @Override public boolean equals(Object obj) {
1:     if (obj instanceof Bits) {
1:       Bits other = (Bits) obj;
1:       return Arrays.equals(lens, other.lens);
1:     }
1:     return false;
1:   }
1: 
1:   @Override public int hashCode() {
1:     return Arrays.hashCode(lens);
1:   }
1: }
============================================================================