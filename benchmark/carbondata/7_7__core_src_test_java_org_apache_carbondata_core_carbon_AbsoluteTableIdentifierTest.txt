1:3f23733: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:3f23733:  *
1:3f23733:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3f23733:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:3f23733:  */
1:3f23733: 
1:3f23733: package org.apache.carbondata.core.carbon;
1:3f23733: 
1:cb10d03: import java.util.UUID;
1:cb10d03: 
1:ce09aaa: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:ce09aaa: 
1:29be1d0: import org.junit.Assert;
1:3f23733: import org.junit.BeforeClass;
1:3f23733: import org.junit.Test;
1:3f23733: 
1:3f23733: import static junit.framework.TestCase.assertEquals;
1:3f23733: 
1:3f23733: public class AbsoluteTableIdentifierTest {
1:3f23733:   static AbsoluteTableIdentifier absoluteTableIdentifier;
1:3f23733:   static AbsoluteTableIdentifier absoluteTableIdentifier1;
1:3f23733:   static AbsoluteTableIdentifier absoluteTableIdentifier2;
1:3f23733:   static AbsoluteTableIdentifier absoluteTableIdentifier3;
1:3f23733:   static AbsoluteTableIdentifier absoluteTableIdentifier4;
1:3f23733: 
1:3f23733:   @BeforeClass public static void setup() {
1:2fe7758:     absoluteTableIdentifier = AbsoluteTableIdentifier.from("storePath/databaseName/tableName",
1:3f23733:         new CarbonTableIdentifier("databaseName", "tableName", "tableId"));
1:2fe7758:     absoluteTableIdentifier1 = AbsoluteTableIdentifier.from("dummy", null);
1:2fe7758:     absoluteTableIdentifier2 = AbsoluteTableIdentifier.from("dumgfhmy", null);
1:3f23733:     absoluteTableIdentifier3 =
1:2fe7758:         AbsoluteTableIdentifier.from("duhgmmy/dumy/dmy/",
1:1155d4d:             new CarbonTableIdentifier("dummy", "dumy", "dmy"));
1:2fe7758:     absoluteTableIdentifier4 = AbsoluteTableIdentifier.from("storePath/databaseName/tableName",
1:3f23733:         new CarbonTableIdentifier("databaseName", "tableName", "tableId"));
2:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestWithSameInstance() {
1:3f23733:     Boolean res = absoluteTableIdentifier.equals("wrong data");
1:29be1d0:     Assert.assertTrue(!res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestWithNullObject() {
1:3f23733:     Boolean res = absoluteTableIdentifier.equals(null);
1:29be1d0:     Assert.assertTrue(!res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestWithotherObject() {
1:3f23733:     Boolean res = absoluteTableIdentifier1.equals(absoluteTableIdentifier);
1:29be1d0:     Assert.assertTrue(!res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestWithSameObj() {
1:3f23733:     Boolean res = absoluteTableIdentifier.equals(absoluteTableIdentifier);
1:29be1d0:     Assert.assertTrue(res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestWithNullColumnIdentifier() {
1:3f23733:     Boolean res = absoluteTableIdentifier1.equals(absoluteTableIdentifier2);
1:29be1d0:     Assert.assertTrue(!res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestWithEqualColumnIdentifier() {
1:3f23733:     Boolean res = absoluteTableIdentifier3.equals(absoluteTableIdentifier4);
1:29be1d0:     Assert.assertTrue(!res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestWithEqualAbsoluteTableIdentifier() {
1:3f23733:     Boolean res = absoluteTableIdentifier.equals(absoluteTableIdentifier4);
1:29be1d0:     Assert.assertTrue(res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void hashCodeTest() {
1:3f23733:     int res = absoluteTableIdentifier4.hashCode();
1:1155d4d:     int expectedResult = 233212069;
1:3f23733:     assertEquals(res, expectedResult);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void gettablePathTest() {
1:3f23733:     String res = absoluteTableIdentifier4.getTablePath();
1:29be1d0:     Assert.assertTrue(res.equals("storePath/databaseName/tableName"));
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void fromTablePathTest() {
2:3f23733:     AbsoluteTableIdentifier absoluteTableIdentifierTest =
1:cb10d03:         AbsoluteTableIdentifier.from("storePath/databaseName/tableName", "databaseName", "tableName",
1:cb10d03:             UUID.randomUUID().toString());
1:29be1d0:     Assert.assertTrue(absoluteTableIdentifierTest.getTablePath()
1:1155d4d:         .equals(absoluteTableIdentifier4.getTablePath()));
1:3f23733:   }
1:3f23733: 
1:1155d4d: //  @Test(expected = IllegalArgumentException.class) public void fromTablePathWithExceptionTest() {
1:1155d4d: //    AbsoluteTableIdentifier absoluteTableIdentifierTest =
1:1155d4d: //        AbsoluteTableIdentifier.fromTablePath("storePath/databaseName");
1:1155d4d: //  }
1:3f23733: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:cb10d03
/////////////////////////////////////////////////////////////////////////
1: import java.util.UUID;
1: 
/////////////////////////////////////////////////////////////////////////
1:         AbsoluteTableIdentifier.from("storePath/databaseName/tableName", "databaseName", "tableName",
1:             UUID.randomUUID().toString());
author:xuchuanyin
-------------------------------------------------------------------------------
commit:29be1d0
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(!res);
1:     Assert.assertTrue(!res);
1:     Assert.assertTrue(!res);
1:     Assert.assertTrue(res);
1:     Assert.assertTrue(!res);
1:     Assert.assertTrue(!res);
1:     Assert.assertTrue(res);
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(res.equals("storePath/databaseName/tableName"));
1:     Assert.assertTrue(absoluteTableIdentifierTest.getTablePath()
author:Jacky Li
-------------------------------------------------------------------------------
commit:2fe7758
/////////////////////////////////////////////////////////////////////////
1:     absoluteTableIdentifier = AbsoluteTableIdentifier.from("storePath/databaseName/tableName",
1:     absoluteTableIdentifier1 = AbsoluteTableIdentifier.from("dummy", null);
1:     absoluteTableIdentifier2 = AbsoluteTableIdentifier.from("dumgfhmy", null);
1:         AbsoluteTableIdentifier.from("duhgmmy/dumy/dmy/",
1:     absoluteTableIdentifier4 = AbsoluteTableIdentifier.from("storePath/databaseName/tableName",
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
0:     absoluteTableIdentifier = new AbsoluteTableIdentifier("storePath/databaseName/tableName",
0:         new AbsoluteTableIdentifier("duhgmmy/dumy/dmy/",
1:             new CarbonTableIdentifier("dummy", "dumy", "dmy"));
0:     absoluteTableIdentifier4 = new AbsoluteTableIdentifier("storePath/databaseName/tableName",
/////////////////////////////////////////////////////////////////////////
1:     int expectedResult = 233212069;
/////////////////////////////////////////////////////////////////////////
0:         AbsoluteTableIdentifier.from("storePath/databaseName/tableName", "databaseName", "tableName");
0:     assert (absoluteTableIdentifierTest.getTablePath()
1:         .equals(absoluteTableIdentifier4.getTablePath()));
1: //  @Test(expected = IllegalArgumentException.class) public void fromTablePathWithExceptionTest() {
1: //    AbsoluteTableIdentifier absoluteTableIdentifierTest =
1: //        AbsoluteTableIdentifier.fromTablePath("storePath/databaseName");
1: //  }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: 
author:rahulforallp
-------------------------------------------------------------------------------
commit:3f23733
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.carbon;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static junit.framework.TestCase.assertEquals;
1: 
1: public class AbsoluteTableIdentifierTest {
1:   static AbsoluteTableIdentifier absoluteTableIdentifier;
1:   static AbsoluteTableIdentifier absoluteTableIdentifier1;
1:   static AbsoluteTableIdentifier absoluteTableIdentifier2;
1:   static AbsoluteTableIdentifier absoluteTableIdentifier3;
1:   static AbsoluteTableIdentifier absoluteTableIdentifier4;
1: 
1:   @BeforeClass public static void setup() {
0:     absoluteTableIdentifier = new AbsoluteTableIdentifier("storePath",
1:         new CarbonTableIdentifier("databaseName", "tableName", "tableId"));
0:     absoluteTableIdentifier1 = new AbsoluteTableIdentifier("dummy", null);
0:     absoluteTableIdentifier2 = new AbsoluteTableIdentifier("dumgfhmy", null);
1:     absoluteTableIdentifier3 =
0:         new AbsoluteTableIdentifier("duhgmmy", new CarbonTableIdentifier("dummy", "dumy", "dmy"));
0:     absoluteTableIdentifier4 = new AbsoluteTableIdentifier("storePath",
1:         new CarbonTableIdentifier("databaseName", "tableName", "tableId"));
1:   }
1: 
1:   @Test public void equalsTestWithSameInstance() {
1:     Boolean res = absoluteTableIdentifier.equals("wrong data");
0:     assert (!res);
1:   }
1: 
1:   @Test public void equalsTestWithNullObject() {
1:     Boolean res = absoluteTableIdentifier.equals(null);
0:     assert (!res);
1:   }
1: 
1:   @Test public void equalsTestWithotherObject() {
1:     Boolean res = absoluteTableIdentifier1.equals(absoluteTableIdentifier);
0:     assert (!res);
1:   }
1: 
1:   @Test public void equalsTestWithSameObj() {
1:     Boolean res = absoluteTableIdentifier.equals(absoluteTableIdentifier);
0:     assert (res);
1:   }
1: 
1:   @Test public void equalsTestWithNullColumnIdentifier() {
1:     Boolean res = absoluteTableIdentifier1.equals(absoluteTableIdentifier2);
0:     assert (!res);
1:   }
1: 
1:   @Test public void equalsTestWithEqualColumnIdentifier() {
1:     Boolean res = absoluteTableIdentifier3.equals(absoluteTableIdentifier4);
0:     assert (!res);
1:   }
1: 
1:   @Test public void equalsTestWithEqualAbsoluteTableIdentifier() {
1:     Boolean res = absoluteTableIdentifier.equals(absoluteTableIdentifier4);
0:     assert (res);
1:   }
1: 
1:   @Test public void hashCodeTest() {
1:     int res = absoluteTableIdentifier4.hashCode();
0:     int expectedResult = 804398706;
1:     assertEquals(res, expectedResult);
1:   }
1: 
1:   @Test public void gettablePathTest() {
1:     String res = absoluteTableIdentifier4.getTablePath();
0:     assert (res.equals("storePath/databaseName/tableName"));
1:   }
1: 
1:   @Test public void fromTablePathTest() {
1:     AbsoluteTableIdentifier absoluteTableIdentifierTest =
0:         AbsoluteTableIdentifier.fromTablePath("storePath/databaseName/tableName");
0:     assert (absoluteTableIdentifierTest.getStorePath()
0:         .equals(absoluteTableIdentifier4.getStorePath()));
1:   }
1: 
0:   @Test(expected = IllegalArgumentException.class) public void fromTablePathWithExceptionTest() {
1:     AbsoluteTableIdentifier absoluteTableIdentifierTest =
0:         AbsoluteTableIdentifier.fromTablePath("storePath/databaseName");
1:   }
1: }
============================================================================