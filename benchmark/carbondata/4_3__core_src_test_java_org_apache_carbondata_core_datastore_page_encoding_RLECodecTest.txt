1:379d4f6: /*
1:379d4f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:379d4f6:  * contributor license agreements.  See the NOTICE file distributed with
1:379d4f6:  * this work for additional information regarding copyright ownership.
1:379d4f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:379d4f6:  * (the "License"); you may not use this file except in compliance with
1:379d4f6:  * the License.  You may obtain a copy of the License at
1:379d4f6:  *
1:379d4f6:  *    http://www.apache.org/licenses/LICENSE-2.0
1:379d4f6:  *
1:379d4f6:  * Unless required by applicable law or agreed to in writing, software
1:379d4f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:379d4f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:379d4f6:  * See the License for the specific language governing permissions and
1:379d4f6:  * limitations under the License.
1:379d4f6:  */
1:379d4f6: package org.apache.carbondata.core.datastore.page.encoding;
1:379d4f6: 
1:379d4f6: import java.io.ByteArrayOutputStream;
1:379d4f6: import java.io.DataOutputStream;
1:379d4f6: import java.io.IOException;
1:379d4f6: 
1:8c1ddbf: import org.apache.carbondata.core.datastore.ColumnType;
1:8c1ddbf: import org.apache.carbondata.core.datastore.TableSpec;
1:379d4f6: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.rle.RLECodec;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.rle.RLEEncoderMeta;
1:379d4f6: import org.apache.carbondata.core.datastore.page.statistics.PrimitivePageStatsCollector;
1:379d4f6: import org.apache.carbondata.core.memory.MemoryException;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:379d4f6: 
1:379d4f6: import org.junit.AfterClass;
1:379d4f6: import org.junit.BeforeClass;
1:379d4f6: import org.junit.Test;
1:379d4f6: 
1:379d4f6: import static org.junit.Assert.assertEquals;
1:379d4f6: 
1:f911403: public class RLECodecTest {
1:379d4f6: 
1:379d4f6:   static class TestData {
1:379d4f6:     private byte[] inputByteData;
1:379d4f6:     private ColumnPage inputBytePage;
1:379d4f6:     private byte[] expectedEncodedByteData;
1:379d4f6: 
1:379d4f6:     TestData(byte[] inputByteData, byte[] expectedEncodedByteData) throws IOException, MemoryException {
1:379d4f6:       this.inputByteData = inputByteData;
1:8c1ddbf:       inputBytePage = ColumnPage.newPage(
1:8f08c4a:           new ColumnPageEncoderMeta(
1:8f08c4a:               TableSpec.ColumnSpec.newInstance("test", DataTypes.BYTE, ColumnType.MEASURE),
1:8f08c4a:               DataTypes.BYTE, "snappy"),
1:8f08c4a:           inputByteData.length);
1:f209e8e:       inputBytePage.setStatsCollector(PrimitivePageStatsCollector.newInstance(DataTypes.BYTE));
1:379d4f6:       for (int i = 0; i < inputByteData.length; i++) {
1:379d4f6:         inputBytePage.putData(i, inputByteData[i]);
1:379d4f6:       }
1:379d4f6:       this.expectedEncodedByteData = expectedEncodedByteData;
1:379d4f6:     }
1:379d4f6: 
1:379d4f6:   }
1:379d4f6: 
1:379d4f6:   private static TestData data1;
1:379d4f6:   private static TestData data2;
1:379d4f6:   private static TestData data3;
1:379d4f6: 
1:379d4f6:   @BeforeClass public static void setUp() throws IOException, MemoryException {
1:379d4f6:     setUpData1();
1:379d4f6:     setUpData2();
1:379d4f6:     setUpData3();
1:379d4f6:   }
1:379d4f6: 
1:379d4f6:   private static void setUpData1() throws IOException, MemoryException {
1:379d4f6:     byte[] inputData = new byte[]{10, 10, 3, 4, 5, 6, 7, 7, 7, 7};
1:379d4f6:     ByteArrayOutputStream bao = new ByteArrayOutputStream();
1:379d4f6:     DataOutputStream stream = new DataOutputStream(bao);
1:379d4f6:     stream.writeShort(2);
1:379d4f6:     stream.writeByte(10);
1:379d4f6:     stream.writeShort(5|0x8000);
1:379d4f6:     stream.writeByte(3);
1:379d4f6:     stream.writeByte(4);
1:379d4f6:     stream.writeByte(5);
1:379d4f6:     stream.writeByte(6);
1:379d4f6:     stream.writeByte(7);
1:379d4f6:     stream.writeShort(3);
1:379d4f6:     stream.writeByte(7);
1:379d4f6:     byte[] expectedEncodedByteData = bao.toByteArray();
1:379d4f6:     data1 = new TestData(
1:379d4f6:         inputData,
1:379d4f6:         expectedEncodedByteData);
1:379d4f6:   }
1:379d4f6: 
1:379d4f6:   private static void setUpData2() throws IOException, MemoryException {
1:379d4f6:     byte[] inputData = new byte[]{1, 2, 3, 4, 5, 6};
1:379d4f6:     ByteArrayOutputStream bao = new ByteArrayOutputStream();
1:379d4f6:     DataOutputStream stream = new DataOutputStream(bao);
1:379d4f6:     stream.writeShort(6|0x8000);
1:379d4f6:     stream.writeByte(1);
1:379d4f6:     stream.writeByte(2);
1:379d4f6:     stream.writeByte(3);
1:379d4f6:     stream.writeByte(4);
1:379d4f6:     stream.writeByte(5);
1:379d4f6:     stream.writeByte(6);
1:379d4f6:     byte[] expectedEncodedByteData = bao.toByteArray();
1:379d4f6:     data2 = new TestData(
1:379d4f6:         inputData,
1:379d4f6:         expectedEncodedByteData);
1:379d4f6:   }
1:379d4f6: 
1:379d4f6:   private static void setUpData3() throws IOException, MemoryException {
1:379d4f6:     byte[] inputData = new byte[]{10, 10, 10, 10, 10, 10};
1:379d4f6:     ByteArrayOutputStream bao = new ByteArrayOutputStream();
1:379d4f6:     DataOutputStream stream = new DataOutputStream(bao);
1:379d4f6:     stream.writeShort(6);
1:379d4f6:     stream.writeByte(10);
1:379d4f6:     byte[] expectedEncodedByteData = bao.toByteArray();
1:379d4f6:     data3 = new TestData(
1:379d4f6:         inputData,
1:379d4f6:         expectedEncodedByteData);
1:379d4f6:   }
1:379d4f6: 
1:379d4f6:   private void testBytePageEncode(ColumnPage inputPage, byte[] expectedEncodedBytes)
1:379d4f6:       throws IOException, MemoryException {
1:e6a4f64:     RLECodec codec = new RLECodec();
1:e6a4f64:     ColumnPageEncoder encoder = codec.createEncoder(null);
1:e6a4f64:     EncodedColumnPage result = encoder.encode(inputPage);
1:e6a4f64:     byte[] encoded = result.getEncodedData().array();
1:379d4f6:     assertEquals(expectedEncodedBytes.length, encoded.length);
1:379d4f6:     for (int i = 0; i < encoded.length; i++) {
1:379d4f6:       assertEquals(expectedEncodedBytes[i], encoded[i]);
1:379d4f6:     }
1:379d4f6:   }
1:379d4f6: 
1:379d4f6:   private void testBytePageDecode(byte[] inputBytes, byte[] expectedDecodedBytes) throws IOException, MemoryException {
1:e6a4f64:     RLECodec codec = new RLECodec();
1:8c1ddbf:     RLEEncoderMeta meta = new RLEEncoderMeta(
1:f209e8e:         TableSpec.ColumnSpec.newInstance("test", DataTypes.BYTE, ColumnType.MEASURE),
1:8f08c4a:         DataTypes.BYTE, expectedDecodedBytes.length, null, "snappy");
1:e6a4f64:     ColumnPageDecoder decoder = codec.createDecoder(meta);
1:e6a4f64:     ColumnPage page = decoder.decode(inputBytes, 0, inputBytes.length);
1:379d4f6:     byte[] decoded = page.getBytePage();
1:379d4f6:     assertEquals(expectedDecodedBytes.length, decoded.length);
1:379d4f6:     for (int i = 0; i < decoded.length; i++) {
1:379d4f6:       assertEquals(expectedDecodedBytes[i], decoded[i]);
1:379d4f6:     }
1:379d4f6:   }
1:379d4f6: 
1:379d4f6:   @Test public void testBytePageEncode() throws MemoryException, IOException {
1:379d4f6:     testBytePageEncode(data1.inputBytePage, data1.expectedEncodedByteData);
1:379d4f6:     testBytePageEncode(data2.inputBytePage, data2.expectedEncodedByteData);
1:379d4f6:     testBytePageEncode(data3.inputBytePage, data3.expectedEncodedByteData);
1:379d4f6:   }
1:379d4f6: 
1:379d4f6:   @Test public void testBytePageDecode() throws IOException, MemoryException {
1:379d4f6:     testBytePageDecode(data1.expectedEncodedByteData, data1.inputByteData);
1:379d4f6:     testBytePageDecode(data2.expectedEncodedByteData, data2.inputByteData);
1:379d4f6:     testBytePageDecode(data3.expectedEncodedByteData, data3.inputByteData);
1:379d4f6:   }
1:379d4f6: 
1:379d4f6:   @AfterClass public static void tearDown() {
1:379d4f6:   }
1:379d4f6: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:           new ColumnPageEncoderMeta(
1:               TableSpec.ColumnSpec.newInstance("test", DataTypes.BYTE, ColumnType.MEASURE),
1:               DataTypes.BYTE, "snappy"),
1:           inputByteData.length);
/////////////////////////////////////////////////////////////////////////
1:         DataTypes.BYTE, expectedDecodedBytes.length, null, "snappy");
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1: public class RLECodecTest {
author:xubo245
-------------------------------------------------------------------------------
commit:e2a2d99
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
1:           TableSpec.ColumnSpec.newInstance("test", DataTypes.BYTE, ColumnType.MEASURE),
1:       inputBytePage.setStatsCollector(PrimitivePageStatsCollector.newInstance(DataTypes.BYTE));
/////////////////////////////////////////////////////////////////////////
0:         TableSpec.ColumnSpec.newInstance("test", DataTypes.BYTE, ColumnType.MEASURE),
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
0:           new TableSpec.ColumnSpec("test", DataTypes.BYTE, ColumnType.MEASURE),
0:           DataTypes.BYTE, inputByteData.length);
0:       inputBytePage.setStatsCollector(PrimitivePageStatsCollector.newInstance(DataTypes.BYTE, 0, 0));
/////////////////////////////////////////////////////////////////////////
0:         new TableSpec.ColumnSpec("test", DataTypes.BYTE, ColumnType.MEASURE),
0:         DataTypes.BYTE, expectedDecodedBytes.length, null);
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.ColumnType;
1: import org.apache.carbondata.core.datastore.TableSpec;
/////////////////////////////////////////////////////////////////////////
1:       inputBytePage = ColumnPage.newPage(
0:           new TableSpec.ColumnSpec("test", DataType.BYTE, ColumnType.MEASURE),
0:           DataType.BYTE, inputByteData.length);
/////////////////////////////////////////////////////////////////////////
1:     RLEEncoderMeta meta = new RLEEncoderMeta(
0:         new TableSpec.ColumnSpec("test", DataType.BYTE, ColumnType.MEASURE),
0:         DataType.BYTE, expectedDecodedBytes.length, null);
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.encoding.rle.RLECodec;
1: import org.apache.carbondata.core.datastore.page.encoding.rle.RLEEncoderMeta;
/////////////////////////////////////////////////////////////////////////
0:       inputBytePage.setStatsCollector(PrimitivePageStatsCollector.newInstance(DataType.BYTE, 0, 0));
/////////////////////////////////////////////////////////////////////////
1:     RLECodec codec = new RLECodec();
1:     ColumnPageEncoder encoder = codec.createEncoder(null);
1:     EncodedColumnPage result = encoder.encode(inputPage);
1:     byte[] encoded = result.getEncodedData().array();
/////////////////////////////////////////////////////////////////////////
1:     RLECodec codec = new RLECodec();
0:     RLEEncoderMeta meta = new RLEEncoderMeta(DataType.BYTE, expectedDecodedBytes.length, null);
1:     ColumnPageDecoder decoder = codec.createDecoder(meta);
1:     ColumnPage page = decoder.decode(inputBytes, 0, inputBytes.length);
commit:379d4f6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datastore.page.encoding;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
1: import org.apache.carbondata.core.datastore.page.statistics.PrimitivePageStatsCollector;
1: import org.apache.carbondata.core.memory.MemoryException;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
1: 
1: import org.junit.AfterClass;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
0: public class RLECodecSuite {
1: 
1:   static class TestData {
1:     private byte[] inputByteData;
1:     private ColumnPage inputBytePage;
1:     private byte[] expectedEncodedByteData;
1: 
1:     TestData(byte[] inputByteData, byte[] expectedEncodedByteData) throws IOException, MemoryException {
1:       this.inputByteData = inputByteData;
0:       inputBytePage = ColumnPage.newPage(DataType.BYTE, inputByteData.length);
0:       inputBytePage.setStatsCollector(PrimitivePageStatsCollector.newInstance(DataType.BYTE, inputByteData.length, 0, 0));
1:       for (int i = 0; i < inputByteData.length; i++) {
1:         inputBytePage.putData(i, inputByteData[i]);
1:       }
1:       this.expectedEncodedByteData = expectedEncodedByteData;
1:     }
1: 
1:   }
1: 
1:   private static TestData data1;
1:   private static TestData data2;
1:   private static TestData data3;
1: 
1:   @BeforeClass public static void setUp() throws IOException, MemoryException {
1:     setUpData1();
1:     setUpData2();
1:     setUpData3();
1:   }
1: 
1:   private static void setUpData1() throws IOException, MemoryException {
1:     byte[] inputData = new byte[]{10, 10, 3, 4, 5, 6, 7, 7, 7, 7};
1:     ByteArrayOutputStream bao = new ByteArrayOutputStream();
1:     DataOutputStream stream = new DataOutputStream(bao);
1:     stream.writeShort(2);
1:     stream.writeByte(10);
1:     stream.writeShort(5|0x8000);
1:     stream.writeByte(3);
1:     stream.writeByte(4);
1:     stream.writeByte(5);
1:     stream.writeByte(6);
1:     stream.writeByte(7);
1:     stream.writeShort(3);
1:     stream.writeByte(7);
1:     byte[] expectedEncodedByteData = bao.toByteArray();
1:     data1 = new TestData(
1:         inputData,
1:         expectedEncodedByteData);
1:   }
1: 
1:   private static void setUpData2() throws IOException, MemoryException {
1:     byte[] inputData = new byte[]{1, 2, 3, 4, 5, 6};
1:     ByteArrayOutputStream bao = new ByteArrayOutputStream();
1:     DataOutputStream stream = new DataOutputStream(bao);
1:     stream.writeShort(6|0x8000);
1:     stream.writeByte(1);
1:     stream.writeByte(2);
1:     stream.writeByte(3);
1:     stream.writeByte(4);
1:     stream.writeByte(5);
1:     stream.writeByte(6);
1:     byte[] expectedEncodedByteData = bao.toByteArray();
1:     data2 = new TestData(
1:         inputData,
1:         expectedEncodedByteData);
1:   }
1: 
1:   private static void setUpData3() throws IOException, MemoryException {
1:     byte[] inputData = new byte[]{10, 10, 10, 10, 10, 10};
1:     ByteArrayOutputStream bao = new ByteArrayOutputStream();
1:     DataOutputStream stream = new DataOutputStream(bao);
1:     stream.writeShort(6);
1:     stream.writeByte(10);
1:     byte[] expectedEncodedByteData = bao.toByteArray();
1:     data3 = new TestData(
1:         inputData,
1:         expectedEncodedByteData);
1:   }
1: 
1:   private void testBytePageEncode(ColumnPage inputPage, byte[] expectedEncodedBytes)
1:       throws IOException, MemoryException {
0:     RLECodec codec = new RLECodec(DataType.BYTE, inputPage.getPageSize());
0:     EncodedColumnPage out = codec.encode(inputPage);
0:     byte[] encoded = out.getEncodedData();
1:     assertEquals(expectedEncodedBytes.length, encoded.length);
1:     for (int i = 0; i < encoded.length; i++) {
1:       assertEquals(expectedEncodedBytes[i], encoded[i]);
1:     }
1:   }
1: 
1:   private void testBytePageDecode(byte[] inputBytes, byte[] expectedDecodedBytes) throws IOException, MemoryException {
0:     RLECodec codec = new RLECodec(DataType.BYTE, expectedDecodedBytes.length);
0:     ColumnPage page = codec.decode(inputBytes, 0, inputBytes.length);
1:     byte[] decoded = page.getBytePage();
1:     assertEquals(expectedDecodedBytes.length, decoded.length);
1:     for (int i = 0; i < decoded.length; i++) {
1:       assertEquals(expectedDecodedBytes[i], decoded[i]);
1:     }
1:   }
1: 
1:   @Test public void testBytePageEncode() throws MemoryException, IOException {
1:     testBytePageEncode(data1.inputBytePage, data1.expectedEncodedByteData);
1:     testBytePageEncode(data2.inputBytePage, data2.expectedEncodedByteData);
1:     testBytePageEncode(data3.inputBytePage, data3.expectedEncodedByteData);
1:   }
1: 
1:   @Test public void testBytePageDecode() throws IOException, MemoryException {
1:     testBytePageDecode(data1.expectedEncodedByteData, data1.inputByteData);
1:     testBytePageDecode(data2.expectedEncodedByteData, data2.inputByteData);
1:     testBytePageDecode(data3.expectedEncodedByteData, data3.inputByteData);
1:   }
1: 
1:   @AfterClass public static void tearDown() {
1:   }
1: }
============================================================================