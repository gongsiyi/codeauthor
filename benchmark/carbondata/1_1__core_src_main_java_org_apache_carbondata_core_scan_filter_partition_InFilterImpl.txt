1:cdde3dd: /*
1:cdde3dd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdde3dd:  * contributor license agreements.  See the NOTICE file distributed with
1:cdde3dd:  * this work for additional information regarding copyright ownership.
1:cdde3dd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdde3dd:  * (the "License"); you may not use this file except in compliance with
1:cdde3dd:  * the License.  You may obtain a copy of the License at
1:cdde3dd:  *
1:cdde3dd:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cdde3dd:  *
1:cdde3dd:  * Unless required by applicable law or agreed to in writing, software
1:cdde3dd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdde3dd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdde3dd:  * See the License for the specific language governing permissions and
1:cdde3dd:  * limitations under the License.
1:cdde3dd:  */
1:cdde3dd: 
1:cdde3dd: package org.apache.carbondata.core.scan.filter.partition;
1:cdde3dd: 
1:cdde3dd: import java.util.BitSet;
1:cdde3dd: 
1:cdde3dd: import org.apache.carbondata.core.metadata.schema.PartitionInfo;
1:de5346f: import org.apache.carbondata.core.metadata.schema.partition.PartitionType;
1:cdde3dd: import org.apache.carbondata.core.scan.expression.Expression;
1:cdde3dd: import org.apache.carbondata.core.scan.expression.LiteralExpression;
1:cdde3dd: import org.apache.carbondata.core.scan.expression.conditional.InExpression;
1:cdde3dd: import org.apache.carbondata.core.scan.expression.conditional.ListExpression;
1:cdde3dd: import org.apache.carbondata.core.scan.partition.PartitionUtil;
1:cdde3dd: import org.apache.carbondata.core.scan.partition.Partitioner;
1:de5346f: import org.apache.carbondata.core.util.ByteUtil;
1:cdde3dd: 
1:cdde3dd: /**
1:cdde3dd:  * the implement of In filter
1:cdde3dd:  */
1:cdde3dd: public class InFilterImpl implements PartitionFilterIntf {
1:cdde3dd: 
1:cdde3dd:   private InExpression in;
1:cdde3dd:   private PartitionInfo partitionInfo;
1:cdde3dd: 
1:cdde3dd:   public InFilterImpl(InExpression in, PartitionInfo partitionInfo) {
1:cdde3dd:     this.in = in;
1:cdde3dd:     this.partitionInfo = partitionInfo;
1:cdde3dd:   }
1:cdde3dd: 
1:cdde3dd:   @Override public BitSet applyFilter(Partitioner partitioner) {
1:cdde3dd:     BitSet partitionMap = PartitionUtil.generateBitSetBySize(partitioner.numPartitions(), false);
1:cdde3dd:     ListExpression list = (ListExpression) in.getRight();
1:cdde3dd:     for (Expression expr : list.getChildren()) {
1:cdde3dd:       LiteralExpression literal = (LiteralExpression) expr;
1:cdde3dd:       Object value = PartitionUtil.getDataBasedOnDataTypeForFilter(
1:cdde3dd:           literal.getLiteralExpValue().toString(),
1:cdde3dd:           partitionInfo.getColumnSchemaList().get(0).getDataType());
1:de5346f:       if (PartitionType.RANGE == partitionInfo.getPartitionType() && value instanceof String) {
1:de5346f:         value = ByteUtil.toBytes((String)value);
1:de5346f:       }
1:cdde3dd:       partitionMap.set(partitioner.getPartition(value));
1:cdde3dd:     }
1:cdde3dd:     return partitionMap;
1:cdde3dd:   }
1:cdde3dd: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:de5346f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.partition.PartitionType;
1: import org.apache.carbondata.core.util.ByteUtil;
/////////////////////////////////////////////////////////////////////////
1:       if (PartitionType.RANGE == partitionInfo.getPartitionType() && value instanceof String) {
1:         value = ByteUtil.toBytes((String)value);
1:       }
commit:cdde3dd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.filter.partition;
1: 
1: import java.util.BitSet;
1: 
1: import org.apache.carbondata.core.metadata.schema.PartitionInfo;
1: import org.apache.carbondata.core.scan.expression.Expression;
1: import org.apache.carbondata.core.scan.expression.LiteralExpression;
1: import org.apache.carbondata.core.scan.expression.conditional.InExpression;
1: import org.apache.carbondata.core.scan.expression.conditional.ListExpression;
1: import org.apache.carbondata.core.scan.partition.PartitionUtil;
1: import org.apache.carbondata.core.scan.partition.Partitioner;
1: 
1: /**
1:  * the implement of In filter
1:  */
1: public class InFilterImpl implements PartitionFilterIntf {
1: 
1:   private InExpression in;
1:   private PartitionInfo partitionInfo;
1: 
1:   public InFilterImpl(InExpression in, PartitionInfo partitionInfo) {
1:     this.in = in;
1:     this.partitionInfo = partitionInfo;
1:   }
1: 
1:   @Override public BitSet applyFilter(Partitioner partitioner) {
1:     BitSet partitionMap = PartitionUtil.generateBitSetBySize(partitioner.numPartitions(), false);
1:     ListExpression list = (ListExpression) in.getRight();
1:     for (Expression expr : list.getChildren()) {
1:       LiteralExpression literal = (LiteralExpression) expr;
1:       Object value = PartitionUtil.getDataBasedOnDataTypeForFilter(
1:           literal.getLiteralExpValue().toString(),
1:           partitionInfo.getColumnSchemaList().get(0).getDataType());
1:       partitionMap.set(partitioner.getPartition(value));
1:     }
1:     return partitionMap;
1:   }
1: }
============================================================================