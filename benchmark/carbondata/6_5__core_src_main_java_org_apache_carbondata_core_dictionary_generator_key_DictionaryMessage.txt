1:87dade7: /*
1:87dade7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:87dade7:  * contributor license agreements.  See the NOTICE file distributed with
1:87dade7:  * this work for additional information regarding copyright ownership.
1:87dade7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:87dade7:  * (the "License"); you may not use this file except in compliance with
1:87dade7:  * the License.  You may obtain a copy of the License at
1:87dade7:  *
1:87dade7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:87dade7:  *
1:87dade7:  * Unless required by applicable law or agreed to in writing, software
1:87dade7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:87dade7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:87dade7:  * See the License for the specific language governing permissions and
1:87dade7:  * limitations under the License.
1:87dade7:  */
1:87dade7: package org.apache.carbondata.core.dictionary.generator.key;
4:87dade7: 
1:2b66476: import java.nio.charset.Charset;
1:2b66476: 
1:87dade7: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:87dade7: 
1:87dade7: import io.netty.buffer.ByteBuf;
1:87dade7: 
1:87dade7: /**
1:87dade7:  * Dictionary key to generate dictionary
1:87dade7:  */
1:87dade7: public class DictionaryMessage {
1:87dade7: 
1:87dade7:   /**
1:ee5f65f:    * tableUniqueId
1:87dade7:    */
1:ee5f65f:   private String tableUniqueId;
1:87dade7: 
1:87dade7:   /**
1:87dade7:    * columnName
1:87dade7:    */
1:87dade7:   private String columnName;
1:87dade7: 
1:87dade7:   /**
1:87dade7:    * message data
1:87dade7:    */
1:87dade7:   private String data;
1:87dade7: 
1:87dade7:   /**
1:87dade7:    * Dictionary Value
1:87dade7:    */
1:87dade7:   private int dictionaryValue = CarbonCommonConstants.INVALID_SURROGATE_KEY;
1:87dade7: 
1:87dade7:   /**
1:87dade7:    * message type
1:87dade7:    */
1:87dade7:   private DictionaryMessageType type;
1:87dade7: 
1:4daf063:   public void readSkipLength(ByteBuf byteBuf) {
1:4daf063: 
1:4daf063:     byte[] tableBytes = new byte[byteBuf.readInt()];
1:4daf063:     byteBuf.readBytes(tableBytes);
1:4daf063:     tableUniqueId = new String(tableBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:4daf063: 
1:4daf063:     byte[] colBytes = new byte[byteBuf.readInt()];
1:4daf063:     byteBuf.readBytes(colBytes);
1:4daf063:     columnName = new String(colBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:4daf063: 
1:4daf063:     byte typeByte = byteBuf.readByte();
1:4daf063:     type = getKeyType(typeByte);
1:4daf063: 
1:4daf063:     byte dataType = byteBuf.readByte();
1:4daf063:     if (dataType == 0) {
1:4daf063:       dictionaryValue = byteBuf.readInt();
1:4daf063:     } else {
1:4daf063:       byte[] dataBytes = new byte[byteBuf.readInt()];
1:4daf063:       byteBuf.readBytes(dataBytes);
1:4daf063:       data = new String(dataBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:4daf063:     }
1:4daf063:   }
1:4daf063: 
1:4daf063:   public void readFullLength(ByteBuf byteBuf) {
1:4daf063: 
1:4daf063:     byteBuf.readShort();
1:ee5f65f:     byte[] tableIdBytes = new byte[byteBuf.readInt()];
1:ee5f65f:     byteBuf.readBytes(tableIdBytes);
1:1852e13:     tableUniqueId =
1:1852e13:         new String(tableIdBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:87dade7: 
1:87dade7:     byte[] colBytes = new byte[byteBuf.readInt()];
1:87dade7:     byteBuf.readBytes(colBytes);
1:2b66476:     columnName = new String(colBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:87dade7: 
1:87dade7:     byte typeByte = byteBuf.readByte();
1:87dade7:     type = getKeyType(typeByte);
1:87dade7: 
1:87dade7:     byte dataType = byteBuf.readByte();
1:87dade7:     if (dataType == 0) {
1:87dade7:       dictionaryValue = byteBuf.readInt();
1:87dade7:     } else {
1:87dade7:       byte[] dataBytes = new byte[byteBuf.readInt()];
1:87dade7:       byteBuf.readBytes(dataBytes);
1:2b66476:       data = new String(dataBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
4:87dade7:     }
1:87dade7:   }
1:87dade7: 
1:87dade7:   public void writeData(ByteBuf byteBuf) {
1:6a9c79c:     int startIndex = byteBuf.writerIndex();
1:6a9c79c:     // Just reserve the bytes to add length of header at last.
1:6a9c79c:     byteBuf.writeShort(Short.MAX_VALUE);
1:6a9c79c: 
1:1852e13:     byte[] tableIdBytes =
1:1852e13:         tableUniqueId.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:ee5f65f:     byteBuf.writeInt(tableIdBytes.length);
1:ee5f65f:     byteBuf.writeBytes(tableIdBytes);
1:87dade7: 
1:2b66476:     byte[] colBytes = columnName.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:87dade7:     byteBuf.writeInt(colBytes.length);
1:87dade7:     byteBuf.writeBytes(colBytes);
1:87dade7: 
1:87dade7:     byteBuf.writeByte(type.getType());
1:87dade7: 
1:87dade7:     if (dictionaryValue > 0) {
1:87dade7:       byteBuf.writeByte(0);
1:87dade7:       byteBuf.writeInt(dictionaryValue);
1:87dade7:     } else {
1:87dade7:       byteBuf.writeByte(1);
1:2b66476:       byte[] dataBytes = data.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:87dade7:       byteBuf.writeInt(dataBytes.length);
1:87dade7:       byteBuf.writeBytes(dataBytes);
1:87dade7:     }
1:6a9c79c:     int endIndex = byteBuf.writerIndex();
1:6a9c79c:     // Add the length of message at the starting.it is required while decoding as in TCP protocol
1:6a9c79c:     // it not guarantee that we receive all data in one packet, so we need to wait to receive all
1:6a9c79c:     // packets before proceeding to process the message.Based on the length it waits.
1:6a9c79c:     byteBuf.setShort(startIndex, endIndex - startIndex - 2);
1:87dade7:   }
1:4daf063: 
1:87dade7: 
1:87dade7:   private DictionaryMessageType getKeyType(byte type) {
1:87dade7:     switch (type) {
1:6a9c79c:       case 2:
1:87dade7:         return DictionaryMessageType.SIZE;
1:ee5f65f:       case 3:
1:ee5f65f:         return DictionaryMessageType.WRITE_TABLE_DICTIONARY;
1:87dade7:       default:
2:87dade7:         return DictionaryMessageType.DICT_GENERATION;
1:87dade7:     }
1:87dade7:   }
1:87dade7: 
1:87dade7:   public String getColumnName() {
1:87dade7:     return columnName;
1:87dade7:   }
1:87dade7: 
1:87dade7:   public String getData() {
1:87dade7:     return data;
1:87dade7:   }
1:87dade7: 
1:87dade7:   public void setData(String data) {
1:87dade7:     this.data = data;
1:87dade7:   }
1:87dade7: 
1:87dade7:   public DictionaryMessageType getType() {
1:87dade7:     return type;
1:87dade7:   }
1:87dade7: 
1:87dade7:   public void setType(DictionaryMessageType type) {
1:87dade7:     this.type = type;
1:87dade7:   }
1:87dade7: 
1:87dade7:   public void setColumnName(String columnName) {
1:87dade7:     this.columnName = columnName;
1:87dade7:   }
1:87dade7: 
1:87dade7:   public int getDictionaryValue() {
1:87dade7:     return dictionaryValue;
1:87dade7:   }
1:87dade7: 
1:87dade7:   public void setDictionaryValue(int dictionaryValue) {
1:87dade7:     this.dictionaryValue = dictionaryValue;
1:87dade7:   }
1:ee5f65f: 
1:ee5f65f:   public String getTableUniqueId() {
1:ee5f65f:     return tableUniqueId;
1:ee5f65f:   }
1:ee5f65f: 
1:ee5f65f:   public void setTableUniqueId(String tableUniqueId) {
1:ee5f65f:     this.tableUniqueId = tableUniqueId;
1:ee5f65f:   }
1:87dade7: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1:   public void readSkipLength(ByteBuf byteBuf) {
1: 
1:     byte[] tableBytes = new byte[byteBuf.readInt()];
1:     byteBuf.readBytes(tableBytes);
1:     tableUniqueId = new String(tableBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1: 
1:     byte[] colBytes = new byte[byteBuf.readInt()];
1:     byteBuf.readBytes(colBytes);
1:     columnName = new String(colBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1: 
1:     byte typeByte = byteBuf.readByte();
1:     type = getKeyType(typeByte);
1: 
1:     byte dataType = byteBuf.readByte();
1:     if (dataType == 0) {
1:       dictionaryValue = byteBuf.readInt();
1:     } else {
1:       byte[] dataBytes = new byte[byteBuf.readInt()];
1:       byteBuf.readBytes(dataBytes);
1:       data = new String(dataBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:     }
1:   }
1: 
1:   public void readFullLength(ByteBuf byteBuf) {
1: 
1:     byteBuf.readShort();
/////////////////////////////////////////////////////////////////////////
1: 
author:Raghunandan S
-------------------------------------------------------------------------------
commit:1852e13
/////////////////////////////////////////////////////////////////////////
1:     tableUniqueId =
1:         new String(tableIdBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
/////////////////////////////////////////////////////////////////////////
1:     byte[] tableIdBytes =
1:         tableUniqueId.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
author:kunal642
-------------------------------------------------------------------------------
commit:ee5f65f
/////////////////////////////////////////////////////////////////////////
1:    * tableUniqueId
1:   private String tableUniqueId;
/////////////////////////////////////////////////////////////////////////
1:     byte[] tableIdBytes = new byte[byteBuf.readInt()];
1:     byteBuf.readBytes(tableIdBytes);
0:     tableUniqueId = new String(tableIdBytes);
/////////////////////////////////////////////////////////////////////////
0:     byte[] tableIdBytes = tableUniqueId.getBytes();
1:     byteBuf.writeInt(tableIdBytes.length);
1:     byteBuf.writeBytes(tableIdBytes);
/////////////////////////////////////////////////////////////////////////
1:       case 3:
1:         return DictionaryMessageType.WRITE_TABLE_DICTIONARY;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public String getTableUniqueId() {
1:     return tableUniqueId;
1:   }
1: 
1:   public void setTableUniqueId(String tableUniqueId) {
1:     this.tableUniqueId = tableUniqueId;
1:   }
1: 
author:manishgupta88
-------------------------------------------------------------------------------
commit:2b66476
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.Charset;
1: 
/////////////////////////////////////////////////////////////////////////
0:     tableUniqueName =
0:         new String(tableBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:     columnName = new String(colBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
/////////////////////////////////////////////////////////////////////////
1:       data = new String(dataBytes, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
/////////////////////////////////////////////////////////////////////////
0:     byte[] tableBytes =
0:         tableUniqueName.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:     byte[] colBytes = columnName.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
/////////////////////////////////////////////////////////////////////////
1:       byte[] dataBytes = data.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
author:ravipesala
-------------------------------------------------------------------------------
commit:6a9c79c
/////////////////////////////////////////////////////////////////////////
1:     int startIndex = byteBuf.writerIndex();
1:     // Just reserve the bytes to add length of header at last.
1:     byteBuf.writeShort(Short.MAX_VALUE);
1: 
/////////////////////////////////////////////////////////////////////////
1:     int endIndex = byteBuf.writerIndex();
1:     // Add the length of message at the starting.it is required while decoding as in TCP protocol
1:     // it not guarantee that we receive all data in one packet, so we need to wait to receive all
1:     // packets before proceeding to process the message.Based on the length it waits.
1:     byteBuf.setShort(startIndex, endIndex - startIndex - 2);
0:       case 1:
1:       case 2:
0:       case 3:
0:       case 4:
/////////////////////////////////////////////////////////////////////////
0:     return "DictionaryKey{ columnName='" + columnName + '\'' + ", data='" + data + '\''
0:         + ", dictionaryValue=" + dictionaryValue + ", type=" + type + '}';
commit:87dade7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.dictionary.generator.key;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: 
1: import io.netty.buffer.ByteBuf;
1: 
1: /**
1:  * Dictionary key to generate dictionary
1:  */
1: public class DictionaryMessage {
1: 
1:   /**
0:    * tableUniqueName
1:    */
0:   private String tableUniqueName;
1: 
1:   /**
1:    * columnName
1:    */
1:   private String columnName;
1: 
1:   /**
1:    * message data
1:    */
1:   private String data;
1: 
1:   /**
1:    * Dictionary Value
1:    */
1:   private int dictionaryValue = CarbonCommonConstants.INVALID_SURROGATE_KEY;
1: 
1:   /**
1:    * message type
1:    */
1:   private DictionaryMessageType type;
1: 
0:   public void readData(ByteBuf byteBuf) {
0:     byte[] tableBytes = new byte[byteBuf.readInt()];
0:     byteBuf.readBytes(tableBytes);
0:     tableUniqueName = new String(tableBytes);
1: 
1:     byte[] colBytes = new byte[byteBuf.readInt()];
1:     byteBuf.readBytes(colBytes);
0:     columnName = new String(colBytes);
1: 
1:     byte typeByte = byteBuf.readByte();
1:     type = getKeyType(typeByte);
1: 
1:     byte dataType = byteBuf.readByte();
1:     if (dataType == 0) {
1:       dictionaryValue = byteBuf.readInt();
1:     } else {
1:       byte[] dataBytes = new byte[byteBuf.readInt()];
1:       byteBuf.readBytes(dataBytes);
0:       data = new String(dataBytes);
1:     }
1:   }
1: 
1:   public void writeData(ByteBuf byteBuf) {
0:     byte[] tableBytes = tableUniqueName.getBytes();
0:     byteBuf.writeInt(tableBytes.length);
0:     byteBuf.writeBytes(tableBytes);
1: 
0:     byte[] colBytes = columnName.getBytes();
1:     byteBuf.writeInt(colBytes.length);
1:     byteBuf.writeBytes(colBytes);
1: 
1:     byteBuf.writeByte(type.getType());
1: 
1:     if (dictionaryValue > 0) {
1:       byteBuf.writeByte(0);
1:       byteBuf.writeInt(dictionaryValue);
1:     } else {
1:       byteBuf.writeByte(1);
0:       byte[] dataBytes = data.getBytes();
1:       byteBuf.writeInt(dataBytes.length);
1:       byteBuf.writeBytes(dataBytes);
1:     }
1:   }
1: 
1:   private DictionaryMessageType getKeyType(byte type) {
1:     switch (type) {
0:       case 1 :
1:         return DictionaryMessageType.DICT_GENERATION;
0:       case 2 :
0:         return DictionaryMessageType.TABLE_INTIALIZATION;
0:       case 3 :
1:         return DictionaryMessageType.SIZE;
0:       case 4 :
0:         return DictionaryMessageType.WRITE_DICTIONARY;
1:       default:
1:         return DictionaryMessageType.DICT_GENERATION;
1:     }
1:   }
1: 
0:   public String getTableUniqueName() {
0:     return tableUniqueName;
1:   }
1: 
1:   public String getColumnName() {
1:     return columnName;
1:   }
1: 
1:   public String getData() {
1:     return data;
1:   }
1: 
1:   public void setData(String data) {
1:     this.data = data;
1:   }
1: 
1:   public DictionaryMessageType getType() {
1:     return type;
1:   }
1: 
1:   public void setType(DictionaryMessageType type) {
1:     this.type = type;
1:   }
1: 
0:   public void setTableUniqueName(String tableUniqueName) {
0:     this.tableUniqueName = tableUniqueName;
1:   }
1: 
1:   public void setColumnName(String columnName) {
1:     this.columnName = columnName;
1:   }
1: 
1:   public int getDictionaryValue() {
1:     return dictionaryValue;
1:   }
1: 
1:   public void setDictionaryValue(int dictionaryValue) {
1:     this.dictionaryValue = dictionaryValue;
1:   }
1: 
0:   @Override public String toString() {
0:     return "DictionaryKey{ columnName='"
0:         + columnName + '\'' + ", data='" + data + '\'' + ", dictionaryValue=" + dictionaryValue
0:         + ", type=" + type + '}';
1:   }
1: }
============================================================================