1:bbb1092: /*
1:bbb1092:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbb1092:  * contributor license agreements.  See the NOTICE file distributed with
1:bbb1092:  * this work for additional information regarding copyright ownership.
1:bbb1092:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbb1092:  * (the "License"); you may not use this file except in compliance with
1:bbb1092:  * the License.  You may obtain a copy of the License at
1:bbb1092:  *
1:bbb1092:  *    http://www.apache.org/licenses/LICENSE-2.0
1:bbb1092:  *
1:bbb1092:  * Unless required by applicable law or agreed to in writing, software
1:bbb1092:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbb1092:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbb1092:  * See the License for the specific language governing permissions and
1:bbb1092:  * limitations under the License.
1:bbb1092:  */
1:bbb1092: 
1:5eb476f: package org.apache.carbondata.core.scan.expression;
1:bbb1092: 
1:bbb1092: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:5eb476f: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:bbb1092: import org.apache.carbondata.core.scan.expression.Expression;
1:bbb1092: import org.apache.carbondata.core.scan.expression.ExpressionResult;
1:bbb1092: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1:bbb1092: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1:bbb1092: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1:bbb1092: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1:bbb1092: 
1:bbb1092: @InterfaceAudience.Internal
1:bbb1092: public class MatchExpression extends Expression {
1:bbb1092:   private String queryString;
1:5cad92f:   private int maxDoc;
1:bbb1092: 
1:5cad92f:   public MatchExpression(String queryString) {
1:bbb1092:     this.queryString = queryString;
1:5cad92f:     this.maxDoc = -1;
1:bbb1092:   }
1:bbb1092: 
1:5cad92f:   public MatchExpression(String queryString, int maxDoc) {
1:5cad92f:     this.queryString = queryString;
1:5cad92f:     this.maxDoc = maxDoc;
1:5cad92f:   }
1:5cad92f: 
1:5cad92f:   public int getMaxDoc() {
1:5cad92f:     return maxDoc;
1:fae457a:   }
1:fae457a: 
1:bbb1092:   @Override
1:bbb1092:   public ExpressionResult evaluate(RowIntf value)
1:bbb1092:       throws FilterUnsupportedException, FilterIllegalMemberException {
1:5eb476f:     return new ExpressionResult(DataTypes.BOOLEAN,true);
1:bbb1092:   }
1:bbb1092: 
1:bbb1092:   @Override
1:bbb1092:   public ExpressionType getFilterExpressionType() {
1:bbb1092:     return ExpressionType.TEXT_MATCH;
1:bbb1092:   }
1:bbb1092: 
1:bbb1092:   @Override
1:bbb1092:   public void findAndSetChild(Expression oldExpr, Expression newExpr) {
1:bbb1092: 
1:bbb1092:   }
1:bbb1092: 
1:bbb1092:   @Override
1:bbb1092:   public String getString() {
1:bbb1092:     return queryString;
1:bbb1092:   }
1:d5bec4d: 
1:d5bec4d:   @Override
1:d5bec4d:   public String getStatement() {
1:03a735b:     return "TEXT_MATCH('" + queryString + "')";
1:bbb1092:   }
1:d5bec4d: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:5cad92f
/////////////////////////////////////////////////////////////////////////
1:   private int maxDoc;
1:   public MatchExpression(String queryString) {
1:     this.maxDoc = -1;
1:   public MatchExpression(String queryString, int maxDoc) {
1:     this.queryString = queryString;
1:     this.maxDoc = maxDoc;
1:   }
1: 
1:   public int getMaxDoc() {
1:     return maxDoc;
commit:5eb476f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.scan.expression;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     return new ExpressionResult(DataTypes.BOOLEAN,true);
author:Jacky Li
-------------------------------------------------------------------------------
commit:03a735b
/////////////////////////////////////////////////////////////////////////
1:     return "TEXT_MATCH('" + queryString + "')";
commit:bbb1092
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.carbondata.datamap.expression;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.core.scan.expression.Expression;
1: import org.apache.carbondata.core.scan.expression.ExpressionResult;
1: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1: 
1: @InterfaceAudience.Internal
1: public class MatchExpression extends Expression {
1:   private String queryString;
1: 
0:   public MatchExpression(String queryString) {
1:     this.queryString = queryString;
1:   }
1: 
1:   @Override
1:   public ExpressionResult evaluate(RowIntf value)
1:       throws FilterUnsupportedException, FilterIllegalMemberException {
0:     return null;
1:   }
1: 
1:   @Override
1:   public ExpressionType getFilterExpressionType() {
1:     return ExpressionType.TEXT_MATCH;
1:   }
1: 
1:   @Override
1:   public void findAndSetChild(Expression oldExpr, Expression newExpr) {
1: 
1:   }
1: 
1:   @Override
1:   public String getString() {
1:     return queryString;
1:   }
1: }
author:Indhumathi27
-------------------------------------------------------------------------------
commit:fae457a
/////////////////////////////////////////////////////////////////////////
0:   public static String maxDoc;
0:   public MatchExpression(String queryString, String maxDoc) {
0:     setMaxDoc(maxDoc);
1:   }
1: 
0:   private void setMaxDoc(String maxDoc) {
0:     MatchExpression.maxDoc = maxDoc;
author:QiangCai
-------------------------------------------------------------------------------
commit:d5bec4d
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public String getStatement() {
0:     return queryString;
1:   }
============================================================================