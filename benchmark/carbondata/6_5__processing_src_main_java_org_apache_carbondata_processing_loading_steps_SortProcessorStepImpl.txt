1:9aee980: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:9aee980:  *
1:9aee980:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9aee980:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:9aee980:  */
1:349c59c: package org.apache.carbondata.processing.loading.steps;
3:9aee980: 
1:eaadc88: import java.io.IOException;
1:9aee980: import java.util.Iterator;
1:9aee980: 
1:349c59c: import org.apache.carbondata.processing.loading.AbstractDataLoadProcessorStep;
1:349c59c: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1:349c59c: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1:349c59c: import org.apache.carbondata.processing.loading.row.CarbonRowBatch;
1:349c59c: import org.apache.carbondata.processing.loading.sort.Sorter;
1:349c59c: import org.apache.carbondata.processing.loading.sort.SorterFactory;
1:349c59c: import org.apache.carbondata.processing.sort.sortdata.SortParameters;
1:9aee980: 
1:9aee980: /**
1:9aee980:  * It sorts the data and write them to intermediate temp files. These files will be further read
1:9aee980:  * by next step for writing to carbondata files.
1:9aee980:  */
1:9aee980: public class SortProcessorStepImpl extends AbstractDataLoadProcessorStep {
1:9aee980: 
1:9aee980:   private Sorter sorter;
1:9aee980: 
1:9aee980:   public SortProcessorStepImpl(CarbonDataLoadConfiguration configuration,
1:9aee980:       AbstractDataLoadProcessorStep child) {
1:9aee980:     super(configuration, child);
1:cbf8797:   }
1:9aee980: 
3:9aee980:   @Override
1:eaadc88:   public void initialize() throws IOException {
1:2b66476:     super.initialize();
1:496cde4:     child.initialize();
1:9aee980:     SortParameters sortParameters = SortParameters.createSortParameters(configuration);
1:f82b10b:     sorter = SorterFactory.createSorter(configuration, rowCounter);
1:9aee980:     sorter.initialize(sortParameters);
1:cbf8797:   }
1:9aee980: 
1:9aee980:   @Override
1:9aee980:   public Iterator<CarbonRowBatch>[] execute() throws CarbonDataLoadingException {
1:9aee980:     final Iterator<CarbonRowBatch>[] iterators = child.execute();
1:81149f6:     return sorter.sort(iterators);
5:9aee980:   }
1:9aee980: 
1:9aee980:   @Override
1:9aee980:   public void close() {
1:30f575f:     if (!closed) {
1:30f575f:       super.close();
1:87dade7:       if (sorter != null) {
1:87dade7:         sorter.close();
1:87dade7:       }
1:30f575f:     }
1:9aee980:   }
1:9aee980: 
1:30f575f:   @Override protected String getStepName() {
1:30f575f:     return "Sort Processor";
1:30f575f:   }
1:9aee980: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.steps;
1: import org.apache.carbondata.processing.loading.AbstractDataLoadProcessorStep;
1: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
0: import org.apache.carbondata.processing.loading.DataField;
1: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1: import org.apache.carbondata.processing.loading.row.CarbonRowBatch;
1: import org.apache.carbondata.processing.loading.sort.Sorter;
1: import org.apache.carbondata.processing.loading.sort.SorterFactory;
1: import org.apache.carbondata.processing.sort.sortdata.SortParameters;
author:manishgupta88
-------------------------------------------------------------------------------
commit:2b66476
/////////////////////////////////////////////////////////////////////////
1:     super.initialize();
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.row.CarbonRow;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:   public void initialize() throws IOException {
author:QiangCai
-------------------------------------------------------------------------------
commit:81149f6
/////////////////////////////////////////////////////////////////////////
1:     return sorter.sort(iterators);
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:f82b10b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.newflow.sort.SorterFactory;
/////////////////////////////////////////////////////////////////////////
1:     sorter = SorterFactory.createSorter(configuration, rowCounter);
commit:b13ead9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.newflow.sort.impl.UnsafeBatchParallelReadMergeSorterImpl;
/////////////////////////////////////////////////////////////////////////
0:     boolean batchSort = Boolean.parseBoolean(CarbonProperties.getInstance()
0:         .getProperty(CarbonCommonConstants.LOAD_USE_BATCH_SORT,
0:             CarbonCommonConstants.LOAD_USE_BATCH_SORT_DEFAULT));
0:     if (batchSort) {
0:       sorter = new UnsafeBatchParallelReadMergeSorterImpl(rowCounter);
0:     } else if (offheapsort) {
/////////////////////////////////////////////////////////////////////////
commit:87dade7
/////////////////////////////////////////////////////////////////////////
1:       if (sorter != null) {
1:         sorter.close();
1:       }
commit:30f575f
/////////////////////////////////////////////////////////////////////////
0:       sorter = new UnsafeParallelReadMergeSorterImpl(rowCounter);
0:       sorter = new ParallelReadMergeSorterImpl(rowCounter);
0:       sorter = new ParallelReadMergeSorterWithBucketingImpl(rowCounter,
/////////////////////////////////////////////////////////////////////////
1:     if (!closed) {
1:       super.close();
0:       sorter.close();
1:     }
1:   @Override protected String getStepName() {
1:     return "Sort Processor";
1:   }
commit:cbf8797
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.newflow.sort.impl.ParallelReadMergeSorterWithBucketingImpl;
/////////////////////////////////////////////////////////////////////////
0:     } else {
0:       sorter = new ParallelReadMergeSorterImpl(child.getOutput());
1:     }
0:     if (configuration.getBucketingInfo() != null) {
0:       sorter = new ParallelReadMergeSorterWithBucketingImpl(child.getOutput(),
0:           configuration.getBucketingInfo());
0:     } else {
0:       sorter = new ParallelReadMergeSorterImpl(child.getOutput());
1:     }
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.newflow.sort.impl.UnsafeParallelReadMergeSorterImpl;
/////////////////////////////////////////////////////////////////////////
0:     boolean offheapsort = Boolean.parseBoolean(CarbonProperties.getInstance()
0:         .getProperty(CarbonCommonConstants.ENABLE_UNSAFE_SORT,
0:             CarbonCommonConstants.ENABLE_UNSAFE_SORT_DEFAULT));
0:     if (offheapsort) {
0:       sorter = new UnsafeParallelReadMergeSorterImpl(child.getOutput());
0:     } else sorter = new ParallelReadMergeSorterImpl(child.getOutput());
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1:     child.initialize();
commit:9aee980
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.steps;
1: 
1: import java.util.Iterator;
1: 
0: import org.apache.carbondata.processing.newflow.AbstractDataLoadProcessorStep;
0: import org.apache.carbondata.processing.newflow.CarbonDataLoadConfiguration;
0: import org.apache.carbondata.processing.newflow.DataField;
0: import org.apache.carbondata.processing.newflow.exception.CarbonDataLoadingException;
0: import org.apache.carbondata.processing.newflow.row.CarbonRow;
0: import org.apache.carbondata.processing.newflow.row.CarbonRowBatch;
0: import org.apache.carbondata.processing.newflow.sort.Sorter;
0: import org.apache.carbondata.processing.newflow.sort.impl.ParallelReadMergeSorterImpl;
0: import org.apache.carbondata.processing.sortandgroupby.sortdata.SortParameters;
1: 
1: /**
1:  * It sorts the data and write them to intermediate temp files. These files will be further read
1:  * by next step for writing to carbondata files.
1:  */
1: public class SortProcessorStepImpl extends AbstractDataLoadProcessorStep {
1: 
1:   private Sorter sorter;
1: 
1:   public SortProcessorStepImpl(CarbonDataLoadConfiguration configuration,
1:       AbstractDataLoadProcessorStep child) {
1:     super(configuration, child);
1:   }
1: 
1:   @Override
0:   public DataField[] getOutput() {
0:     return child.getOutput();
1:   }
1: 
1:   @Override
0:   public void initialize() throws CarbonDataLoadingException {
1:     SortParameters sortParameters = SortParameters.createSortParameters(configuration);
0:     sorter = new ParallelReadMergeSorterImpl(child.getOutput());
1:     sorter.initialize(sortParameters);
1:   }
1: 
1:   @Override
1:   public Iterator<CarbonRowBatch>[] execute() throws CarbonDataLoadingException {
1:     final Iterator<CarbonRowBatch>[] iterators = child.execute();
0:     Iterator<CarbonRowBatch>[] sortedIterators = sorter.sort(iterators);
0:     child.close();
0:     return sortedIterators;
1:   }
1: 
1:   @Override
0:   protected CarbonRow processRow(CarbonRow row) {
0:     return null;
1:   }
1: 
1:   @Override
1:   public void close() {
0:     sorter.close();
1:   }
1: 
1: }
============================================================================