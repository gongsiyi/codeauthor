1:0bbfa85: /*
1:0bbfa85:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0bbfa85:  * contributor license agreements.  See the NOTICE file distributed with
1:0bbfa85:  * this work for additional information regarding copyright ownership.
1:0bbfa85:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0bbfa85:  * (the "License"); you may not use this file except in compliance with
1:0bbfa85:  * the License.  You may obtain a copy of the License at
1:0bbfa85:  *
1:0bbfa85:  *    http://www.apache.org/licenses/LICENSE-2.0
1:0bbfa85:  *
1:0bbfa85:  * Unless required by applicable law or agreed to in writing, software
1:0bbfa85:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0bbfa85:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0bbfa85:  * See the License for the specific language governing permissions and
1:0bbfa85:  * limitations under the License.
1:0bbfa85:  */
1:0bbfa85: 
1:0bbfa85: package org.apache.carbondata.core.scan.filter.executer;
1:0bbfa85: 
1:0bbfa85: import java.io.IOException;
1:0bbfa85: import java.util.BitSet;
1:0bbfa85: 
1:0bbfa85: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1:0bbfa85: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1:0bbfa85: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;
1:daa6465: import org.apache.carbondata.core.scan.processor.RawBlockletColumnChunks;
1:0bbfa85: import org.apache.carbondata.core.util.BitSetGroup;
1:0bbfa85: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:0bbfa85: 
1:0bbfa85: /**
1:0bbfa85:  * This class will implement the blocklet and block pruning logic based
1:0bbfa85:  * on the implicit column filter values
1:0bbfa85:  */
1:0bbfa85: public class ImplicitIncludeFilterExecutorImpl
1:0bbfa85:     implements FilterExecuter, ImplicitColumnFilterExecutor {
1:0bbfa85: 
1:0bbfa85:   private final DimColumnResolvedFilterInfo dimColumnEvaluatorInfo;
1:0bbfa85: 
1:0bbfa85:   public ImplicitIncludeFilterExecutorImpl(DimColumnResolvedFilterInfo dimColumnEvaluatorInfo) {
1:0bbfa85:     this.dimColumnEvaluatorInfo = dimColumnEvaluatorInfo;
2:0bbfa85:   }
1:0bbfa85: 
1:0bbfa85:   @Override
1:daa6465:   public BitSetGroup applyFilter(RawBlockletColumnChunks rawBlockletColumnChunks,
1:daa6465:       boolean useBitsetPipeline) {
1:daa6465:     BitSetGroup bitSetGroup = new BitSetGroup(
1:daa6465:         rawBlockletColumnChunks.getDataBlock().numberOfPages());
1:daa6465:     for (int i = 0; i < rawBlockletColumnChunks.getDataBlock().numberOfPages(); i++) {
1:0bbfa85:       bitSetGroup.setBitSet(
1:daa6465:           setBitSetForCompleteDimensionData(
1:daa6465:               rawBlockletColumnChunks.getDataBlock().getPageRowCount(i)), i);
1:0bbfa85:     }
1:0bbfa85:     return bitSetGroup;
1:0bbfa85:   }
1:0bbfa85: 
1:daa6465:   @Override
1:daa6465:   public boolean applyFilter(RowIntf value, int dimOrdinalMax)
1:0bbfa85:       throws FilterUnsupportedException, IOException {
1:0bbfa85:     return false;
1:0bbfa85:   }
1:0bbfa85: 
1:daa6465:   @Override
1:daa6465:   public BitSet isScanRequired(byte[][] blockMaxValue, byte[][] blockMinValue) {
1:0bbfa85:     return null;
1:0bbfa85:   }
1:0bbfa85: 
1:daa6465:   @Override
1:daa6465:   public void readColumnChunks(RawBlockletColumnChunks rawBlockletColumnChunks) throws IOException {
1:0bbfa85: 
1:0bbfa85:   }
1:0bbfa85: 
1:0bbfa85:   @Override
1:0bbfa85:   public BitSet isFilterValuesPresentInBlockOrBlocklet(byte[][] maxValue, byte[][] minValue,
1:0bbfa85:       String uniqueBlockPath) {
1:0bbfa85:     BitSet bitSet = new BitSet(1);
1:0bbfa85:     boolean isScanRequired = false;
1:0bbfa85:     String shortBlockId = CarbonTablePath.getShortBlockId(uniqueBlockPath);
1:d1d726a:     if (uniqueBlockPath.endsWith(".carbondata")) {
1:d1d726a:       if (dimColumnEvaluatorInfo.getFilterValues().getImplicitDriverColumnFilterList()
1:d1d726a:           .contains(shortBlockId)) {
1:d1d726a:         isScanRequired = true;
1:d1d726a:       }
1:d1d726a:     } else if (dimColumnEvaluatorInfo.getFilterValues().getImplicitColumnFilterList()
2:0bbfa85:         .contains(shortBlockId)) {
2:0bbfa85:       isScanRequired = true;
1:0bbfa85:     }
1:0bbfa85:     if (isScanRequired) {
1:0bbfa85:       bitSet.set(0);
1:0bbfa85:     }
1:0bbfa85:     return bitSet;
1:0bbfa85:   }
1:0bbfa85: 
1:0bbfa85:   /**
1:0bbfa85:    * For implicit column filtering, complete data need to be selected. As it is a special case
1:0bbfa85:    * no data need to be discarded, implicit filtering is only for slecting block and blocklets
1:0bbfa85:    *
1:0bbfa85:    * @param numberOfRows
1:0bbfa85:    * @return
1:0bbfa85:    */
1:0bbfa85:   private BitSet setBitSetForCompleteDimensionData(int numberOfRows) {
1:0bbfa85:     BitSet bitSet = new BitSet();
1:0bbfa85:     bitSet.set(0, numberOfRows, true);
1:0bbfa85:     return bitSet;
1:0bbfa85:   }
1:0bbfa85: 
1:0bbfa85:   @Override
1:0bbfa85:   public Boolean isFilterValuesPresentInAbstractIndex(byte[][] maxValue, byte[][] minValue) {
1:0bbfa85:     return true;
1:0bbfa85:   }
1:0bbfa85: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.processor.RawBlockletColumnChunks;
/////////////////////////////////////////////////////////////////////////
1:   public BitSetGroup applyFilter(RawBlockletColumnChunks rawBlockletColumnChunks,
1:       boolean useBitsetPipeline) {
1:     BitSetGroup bitSetGroup = new BitSetGroup(
1:         rawBlockletColumnChunks.getDataBlock().numberOfPages());
1:     for (int i = 0; i < rawBlockletColumnChunks.getDataBlock().numberOfPages(); i++) {
1:           setBitSetForCompleteDimensionData(
1:               rawBlockletColumnChunks.getDataBlock().getPageRowCount(i)), i);
1:   @Override
1:   public boolean applyFilter(RowIntf value, int dimOrdinalMax)
1:   @Override
1:   public BitSet isScanRequired(byte[][] blockMaxValue, byte[][] blockMinValue) {
1:   @Override
1:   public void readColumnChunks(RawBlockletColumnChunks rawBlockletColumnChunks) throws IOException {
author:manishgupta88
-------------------------------------------------------------------------------
commit:d1d726a
/////////////////////////////////////////////////////////////////////////
1:     if (uniqueBlockPath.endsWith(".carbondata")) {
1:       if (dimColumnEvaluatorInfo.getFilterValues().getImplicitDriverColumnFilterList()
1:           .contains(shortBlockId)) {
1:         isScanRequired = true;
1:       }
1:     } else if (dimColumnEvaluatorInfo.getFilterValues().getImplicitColumnFilterList()
commit:0bbfa85
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.filter.executer;
1: 
1: import java.io.IOException;
1: import java.util.BitSet;
1: 
1: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;
0: import org.apache.carbondata.core.scan.processor.BlocksChunkHolder;
1: import org.apache.carbondata.core.util.BitSetGroup;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: 
1: /**
1:  * This class will implement the blocklet and block pruning logic based
1:  * on the implicit column filter values
1:  */
1: public class ImplicitIncludeFilterExecutorImpl
1:     implements FilterExecuter, ImplicitColumnFilterExecutor {
1: 
1:   private final DimColumnResolvedFilterInfo dimColumnEvaluatorInfo;
1: 
1:   public ImplicitIncludeFilterExecutorImpl(DimColumnResolvedFilterInfo dimColumnEvaluatorInfo) {
1:     this.dimColumnEvaluatorInfo = dimColumnEvaluatorInfo;
1:   }
1: 
1:   @Override
0:   public BitSetGroup applyFilter(BlocksChunkHolder blockChunkHolder, boolean useBitsetPipeline)
0:       throws FilterUnsupportedException {
0:     BitSetGroup bitSetGroup = new BitSetGroup(blockChunkHolder.getDataBlock().numberOfPages());
0:     for (int i = 0; i < blockChunkHolder.getDataBlock().numberOfPages(); i++) {
1:       bitSetGroup.setBitSet(
0:           setBitSetForCompleteDimensionData(blockChunkHolder.getDataBlock().getPageRowCount(i)), i);
1:     }
1:     return bitSetGroup;
1:   }
1: 
0:   @Override public boolean applyFilter(RowIntf value, int dimOrdinalMax)
1:       throws FilterUnsupportedException, IOException {
1:     return false;
1:   }
1: 
0:   @Override public BitSet isScanRequired(byte[][] blockMaxValue, byte[][] blockMinValue) {
1:     return null;
1:   }
1: 
0:   @Override public void readBlocks(BlocksChunkHolder blockChunkHolder) throws IOException {
1: 
1:   }
1: 
1:   @Override
1:   public BitSet isFilterValuesPresentInBlockOrBlocklet(byte[][] maxValue, byte[][] minValue,
1:       String uniqueBlockPath) {
1:     BitSet bitSet = new BitSet(1);
1:     boolean isScanRequired = false;
1:     String shortBlockId = CarbonTablePath.getShortBlockId(uniqueBlockPath);
0:     if (uniqueBlockPath.endsWith(".carbondata")) {
0:       if (dimColumnEvaluatorInfo.getFilterValues().getImplicitDriverColumnFilterList()
1:           .contains(shortBlockId)) {
1:         isScanRequired = true;
1:       }
0:     } else if (dimColumnEvaluatorInfo.getFilterValues().getImplicitColumnFilterList()
1:         .contains(shortBlockId)) {
1:       isScanRequired = true;
1:     }
1:     if (isScanRequired) {
1:       bitSet.set(0);
1:     }
1:     return bitSet;
1:   }
1: 
1:   /**
1:    * For implicit column filtering, complete data need to be selected. As it is a special case
1:    * no data need to be discarded, implicit filtering is only for slecting block and blocklets
1:    *
1:    * @param numberOfRows
1:    * @return
1:    */
1:   private BitSet setBitSetForCompleteDimensionData(int numberOfRows) {
1:     BitSet bitSet = new BitSet();
1:     bitSet.set(0, numberOfRows, true);
1:     return bitSet;
1:   }
1: 
1:   @Override
1:   public Boolean isFilterValuesPresentInAbstractIndex(byte[][] maxValue, byte[][] minValue) {
1:     return true;
1:   }
1: }
author:rahulforallp
-------------------------------------------------------------------------------
commit:aee5213
/////////////////////////////////////////////////////////////////////////
0:     if (dimColumnEvaluatorInfo.getFilterValues().getImplicitColumnFilterList()
============================================================================