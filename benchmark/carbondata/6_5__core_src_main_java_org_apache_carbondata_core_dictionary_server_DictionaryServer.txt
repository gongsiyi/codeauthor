1:05b2654: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:8815dd5:  *
1:05b2654:  *    http://www.apache.org/licenses/LICENSE-2.0
1:8815dd5:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:8815dd5:  */
1:4daf063: 
1:05b2654: package org.apache.carbondata.core.dictionary.server;
1:8815dd5: 
1:ee5f65f: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:8815dd5: 
1:4daf063: public interface DictionaryServer {
1:8815dd5: 
1:f911403:   void startServer();
1:8815dd5: 
1:f911403:   void bindToPort();
1:8815dd5: 
1:f911403:   void shutdown()throws Exception;
1:8815dd5: 
1:f911403:   String getHost();
1:8815dd5: 
1:f911403:   int getPort();
1:87dade7: 
1:f911403:   String getSecretKey();
1:87dade7: 
1:f911403:   boolean isEncryptSecureServer();
12:05b2654: 
1:f911403:   void writeTableDictionary(String uniqueTableName) throws Exception;
1:05b2654: 
1:f911403:   void initializeDictionaryGenerator(CarbonTable carbonTable) throws Exception;
1:4daf063: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:   void startServer();
1:   void bindToPort();
1:   void shutdown()throws Exception;
1:   String getHost();
1:   int getPort();
1:   String getSecretKey();
1:   boolean isEncryptSecureServer();
1:   void writeTableDictionary(String uniqueTableName) throws Exception;
1:   void initializeDictionaryGenerator(CarbonTable carbonTable) throws Exception;
commit:500654e
/////////////////////////////////////////////////////////////////////////
0:   private static volatile DictionaryServer INSTANCE = null;
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: 
1: public interface DictionaryServer {
0:   public void startServer();
0:   public void bindToPort();
0:   public void shutdown()throws Exception;
0:   public String getHost();
0:   public int getPort();
0:   public String getSecretKey();
0:   public boolean isEncryptSecureServer();
0:   public void writeTableDictionary(String uniqueTableName) throws Exception;
0:   public void initializeDictionaryGenerator(CarbonTable carbonTable) throws Exception;
1: }
author:kunal642
-------------------------------------------------------------------------------
commit:ee5f65f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
/////////////////////////////////////////////////////////////////////////
0:   public static DictionaryServer getInstance(int port, CarbonTable carbonTable) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     INSTANCE.initializeDictionaryGenerator(carbonTable);
/////////////////////////////////////////////////////////////////////////
0:   public void initializeDictionaryGenerator(CarbonTable carbonTable) throws Exception {
0:     dictionaryServerHandler.initializeTable(carbonTable);
0:   public void writeTableDictionary(String tableId) throws Exception {
0:     key.setTableUniqueId(tableId);
commit:51d32b2
/////////////////////////////////////////////////////////////////////////
0:     LOGGER.info("Shutting down dictionary server");
commit:8815dd5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
0:   private int port;
0:   private static Object lock = new Object();
0:   private static DictionaryServer INSTANCE = null;
1: 
0:   private DictionaryServer(int port) {
0:     startServer(port);
0:   }
1: 
0:   public static DictionaryServer getInstance(int port) {
0:     if (INSTANCE == null) {
0:       synchronized (lock) {
0:         if (INSTANCE == null) {
0:           INSTANCE = new DictionaryServer(port);
0:         }
0:       }
0:     }
0:     return INSTANCE;
0:   }
0:   private void startServer(int port) {
0:     String workerThreads = CarbonProperties.getInstance()
0:         .getProperty(CarbonCommonConstants.DICTIONARY_WORKER_THREADS,
0:             CarbonCommonConstants.DICTIONARY_WORKER_THREADS_DEFAULT);
0:     boss = new NioEventLoopGroup(1);
0:     worker = new NioEventLoopGroup(Integer.parseInt(workerThreads));
0:     bindToPort(port);
0:   }
0:   /**
0:    * Binds dictionary server to an available port.
1:    *
0:    * @param port
1:    */
0:   private void bindToPort(int port) {
0:     long start = System.currentTimeMillis();
0:     // Configure the server.
0:     int i = 0;
0:     while (i < 10) {
0:       int newPort = port + i;
0:       try {
0:         ServerBootstrap bootstrap = new ServerBootstrap();
0:         bootstrap.group(boss, worker);
0:         bootstrap.channel(NioServerSocketChannel.class);
0:         bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {
0:           @Override public void initChannel(SocketChannel ch) throws Exception {
0:             ChannelPipeline pipeline = ch.pipeline();
0:             pipeline
0:                 .addLast("LengthDecoder",
0:                     new LengthFieldBasedFrameDecoder(1048576, 0,
0:                         2, 0, 2));
0:             pipeline.addLast("DictionaryServerHandler", dictionaryServerHandler);
0:           }
0:         });
0:         bootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);
0:         bootstrap.bind(newPort).sync();
0:         LOGGER.audit("Dictionary Server started, Time spent " + (System.currentTimeMillis() - start)
0:             + " Listening on port " + newPort);
0:         this.port = newPort;
0:         break;
0:       } catch (Exception e) {
0:         LOGGER.error(e, "Dictionary Server Failed to bind to port:");
0:         if (i == 9) {
0:           throw new RuntimeException("Dictionary Server Could not bind to any port");
0:       }
0:       i++;
1:    *
0:    * @return Port on which the DictionaryServer has started.
1:    */
0:   public int getPort() {
0:     return port;
0:   }
1: 
0:   /**
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:   /**
0:    *  Write Dictionary for one table.
0:    * @throws Exception
0:    */
1: 
0:   public void writeTableDictionary(String uniqueTableName) throws Exception {
0:     DictionaryMessage key = new DictionaryMessage();
0:     key.setTableUniqueName(uniqueTableName);
0:     key.setType(DictionaryMessageType.WRITE_TABLE_DICTIONARY);
0:     dictionaryServerHandler.processMessage(key);
0:   }
author:ravipesala
-------------------------------------------------------------------------------
commit:6a9c79c
/////////////////////////////////////////////////////////////////////////
0: import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
/////////////////////////////////////////////////////////////////////////
0:           // Based on length provided at header, it collects all packets
0:           pipeline.addLast("LengthDecoder", new LengthFieldBasedFrameDecoder(1048576, 0, 2, 0, 2));
commit:87dade7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
0: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessageType;
0: import io.netty.bootstrap.ServerBootstrap;
0: import io.netty.channel.ChannelInitializer;
0: import io.netty.channel.ChannelOption;
0: import io.netty.channel.ChannelPipeline;
0: import io.netty.channel.EventLoopGroup;
0: import io.netty.channel.nio.NioEventLoopGroup;
0: import io.netty.channel.socket.SocketChannel;
0: import io.netty.channel.socket.nio.NioServerSocketChannel;
/////////////////////////////////////////////////////////////////////////
0:   private EventLoopGroup boss;
0:   private EventLoopGroup worker;
1: 
/////////////////////////////////////////////////////////////////////////
0:     long start = System.currentTimeMillis();
0:     boss = new NioEventLoopGroup();
0:     worker = new NioEventLoopGroup();
0:     // Configure the server.
0:     try {
0:       ServerBootstrap bootstrap = new ServerBootstrap();
0:       bootstrap.group(boss, worker);
0:       bootstrap.channel(NioServerSocketChannel.class);
0:       bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {
0:         @Override public void initChannel(SocketChannel ch) throws Exception {
0:           ChannelPipeline pipeline = ch.pipeline();
0:           pipeline.addLast("DictionaryServerHandler", dictionaryServerHandler);
0:         }
0:       });
0:       bootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);
0:       bootstrap.bind(port).sync();
0:       LOGGER.info("Dictionary Server started, Time spent " + (System.currentTimeMillis() - start)
0:           + " Listening on port " + port);
0:     } catch (Exception e) {
0:       LOGGER.error(e, "Dictionary Server Start Failed");
0:       throw new RuntimeException(e);
0:     }
/////////////////////////////////////////////////////////////////////////
0:     worker.shutdownGracefully();
0:     boss.shutdownGracefully();
0:     // Wait until all threads are terminated.
0:     boss.terminationFuture().sync();
0:     worker.terminationFuture().sync();
0:   }
1: 
0:   /**
0:    * Write dictionary to the store.
0:    * @throws Exception
0:    */
0:   public void writeDictionary() throws Exception {
0:     DictionaryMessage key = new DictionaryMessage();
0:     key.setType(DictionaryMessageType.WRITE_DICTIONARY);
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
1: package org.apache.carbondata.core.dictionary.server;
1: 
0: import java.net.InetSocketAddress;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
1: 
0: import org.apache.carbondata.common.logging.LogService;
0: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.dictionary.generator.key.DictionaryKey;
1: 
0: import org.jboss.netty.bootstrap.ServerBootstrap;
0: import org.jboss.netty.channel.ChannelPipeline;
0: import org.jboss.netty.channel.ChannelPipelineFactory;
0: import org.jboss.netty.channel.Channels;
0: import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;
0: import org.jboss.netty.handler.codec.serialization.ClassResolvers;
0: import org.jboss.netty.handler.codec.serialization.ObjectDecoder;
0: import org.jboss.netty.handler.codec.serialization.ObjectEncoder;
1: 
1: 
0: /**
0:  * Dictionary Server to generate dictionary keys.
0:  */
0: public class DictionaryServer {
1: 
0:   private static final LogService LOGGER =
0:           LogServiceFactory.getLogService(DictionaryServer.class.getName());
1: 
0:   private ServerBootstrap bootstrap;
1: 
0:   private DictionaryServerHandler dictionaryServerHandler;
1: 
0:   /**
0:    * start dictionary server
0:    *
0:    * @param port
0:    * @throws Exception
0:    */
0:   public void startServer(int port) throws Exception {
0:     bootstrap = new ServerBootstrap();
0:     dictionaryServerHandler = new DictionaryServerHandler();
1: 
0:     ExecutorService boss = Executors.newCachedThreadPool();
0:     ExecutorService worker = Executors.newCachedThreadPool();
1: 
0:     bootstrap.setFactory(new NioServerSocketChannelFactory(boss, worker));
1: 
0:     bootstrap.setPipelineFactory(new ChannelPipelineFactory() {
0:       @Override
0:       public ChannelPipeline getPipeline() throws Exception {
0:         ChannelPipeline pipeline = Channels.pipeline();
0:         pipeline.addLast("ObjectDecoder", new ObjectDecoder(ClassResolvers.cacheDisabled(
0:             getClass().getClassLoader())));
0:         pipeline.addLast("ObjectEncoder", new ObjectEncoder());
0:         pipeline.addLast("DictionaryServerHandler", dictionaryServerHandler);
0:         return pipeline;
0:       }
0:     });
0:     bootstrap.bind(new InetSocketAddress(port));
0:     LOGGER.audit("Server Start!");
0:   }
1: 
0:   /**
0:    * shutdown dictionary server
0:    *
0:    * @throws Exception
0:    */
0:   public void shutdown() throws Exception {
0:     DictionaryKey key = new DictionaryKey();
0:     key.setType("WRITE_DICTIONARY");
0:     dictionaryServerHandler.processMessage(key);
0:     bootstrap.releaseExternalResources();
0:     bootstrap.shutdown();
0:   }
0: }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
0:   public void startServer(int port) {
============================================================================