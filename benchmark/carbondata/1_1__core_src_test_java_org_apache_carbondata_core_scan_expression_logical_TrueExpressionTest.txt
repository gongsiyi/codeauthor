1:f911403: /*
1:f911403:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f911403:  * contributor license agreements.  See the NOTICE file distributed with
1:f911403:  * this work for additional information regarding copyright ownership.
1:f911403:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f911403:  * (the "License"); you may not use this file except in compliance with
1:f911403:  * the License.  You may obtain a copy of the License at
1:f911403:  *
1:f911403:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f911403:  *
1:f911403:  * Unless required by applicable law or agreed to in writing, software
1:f911403:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f911403:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f911403:  * See the License for the specific language governing permissions and
1:f911403:  * limitations under the License.
1:f911403:  */
1:f911403: 
1:f911403: package org.apache.carbondata.core.scan.expression.logical;
1:f911403: 
1:f911403: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:f911403: import org.apache.carbondata.core.scan.expression.ColumnExpression;
1:f911403: import org.apache.carbondata.core.scan.expression.ExpressionResult;
1:f911403: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1:f911403: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1:f911403: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1:f911403: import org.apache.carbondata.core.scan.filter.intf.RowImpl;
1:f911403: import org.junit.Before;
1:f911403: import org.junit.Test;
1:f911403: 
1:f911403: import static org.junit.Assert.assertEquals;
1:f911403: 
1:f911403: public class TrueExpressionTest {
1:f911403:   private TrueExpression trueExpression;
1:f911403: 
1:f911403:   @Before public void setUp() {
1:f911403:     ColumnExpression columnExpression = new ColumnExpression("IMEI", DataTypes.BOOLEAN);
1:f911403:     trueExpression = new TrueExpression(columnExpression);
1:f911403:   }
1:f911403: 
1:f911403:   @Test public void testEvaluate() throws FilterUnsupportedException, FilterIllegalMemberException {
1:f911403:     RowImpl rowImpl = new RowImpl();
1:f911403:     rowImpl.setValues(new Boolean[] { true });
1:f911403:     ExpressionResult actualValue = trueExpression.evaluate(rowImpl);
1:f911403:     assertEquals(new ExpressionResult(DataTypes.BOOLEAN, true), actualValue);
1:f911403:   }
1:f911403: 
1:f911403:   @Test public void testGetString() {
1:f911403:     String actualValue = trueExpression.getString();
1:f911403:     String expectedValue = "True(ColumnExpression(IMEI)";
1:f911403:     assertEquals(expectedValue, actualValue);
1:f911403:   }
1:f911403: 
1:f911403:   @Test public void testFilterExpressionType() {
1:f911403:     ExpressionType actualValue = trueExpression.getFilterExpressionType();
1:f911403:     assertEquals(ExpressionType.TRUE, actualValue);
1:f911403:   }
1:f911403: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.expression.logical;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.scan.expression.ColumnExpression;
1: import org.apache.carbondata.core.scan.expression.ExpressionResult;
1: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1: import org.apache.carbondata.core.scan.filter.intf.RowImpl;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class TrueExpressionTest {
1:   private TrueExpression trueExpression;
1: 
1:   @Before public void setUp() {
1:     ColumnExpression columnExpression = new ColumnExpression("IMEI", DataTypes.BOOLEAN);
1:     trueExpression = new TrueExpression(columnExpression);
1:   }
1: 
1:   @Test public void testEvaluate() throws FilterUnsupportedException, FilterIllegalMemberException {
1:     RowImpl rowImpl = new RowImpl();
1:     rowImpl.setValues(new Boolean[] { true });
1:     ExpressionResult actualValue = trueExpression.evaluate(rowImpl);
1:     assertEquals(new ExpressionResult(DataTypes.BOOLEAN, true), actualValue);
1:   }
1: 
1:   @Test public void testGetString() {
1:     String actualValue = trueExpression.getString();
1:     String expectedValue = "True(ColumnExpression(IMEI)";
1:     assertEquals(expectedValue, actualValue);
1:   }
1: 
1:   @Test public void testFilterExpressionType() {
1:     ExpressionType actualValue = trueExpression.getFilterExpressionType();
1:     assertEquals(ExpressionType.TRUE, actualValue);
1:   }
1: }
============================================================================