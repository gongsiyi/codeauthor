1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
6:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.keygenerator.mdkey;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * It compresses the data as per max cardinality. It takes only the required bits for each key.
1:cd6a4ff:  */
1:cd6a4ff: public class NumberCompressor {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Bits MAX_LENGTH
1:cd6a4ff:    */
1:cd6a4ff:   private static final int MAX_LENGTH = 63;
1:cd6a4ff: 
1:cd6a4ff:   private static final int LONG_LENGTH = 64;
1:cd6a4ff: 
1:cd6a4ff:   private static final int BYTE_LENGTH = 8;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * LONG_MAX.
1:cd6a4ff:    */
1:cd6a4ff:   private static final long LONG_MAX = 0x7fffffffffffffffL;
1:cd6a4ff: 
1:cd6a4ff:   private byte bitsLength;
1:cd6a4ff: 
1:5ef67ac:   public NumberCompressor(int cardinality) {
1:5ef67ac:     bitsLength = (byte) Long.toBinaryString(cardinality).length();
6:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public byte[] compress(int[] keys) {
1:cd6a4ff:     int[] sizes = getWordsAndByteSize(keys.length);
1:cd6a4ff:     long[] words = get(keys, sizes[0]);
1:cd6a4ff: 
1:cd6a4ff:     return getByteValues(sizes, words);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private byte[] getByteValues(int[] sizes, long[] words) {
1:cd6a4ff:     byte[] bytes = new byte[sizes[1]];
1:cd6a4ff: 
1:cd6a4ff:     int l = sizes[1] - 1;
1:cd6a4ff:     for (int i = 0; i < words.length; i++) {
1:cd6a4ff:       long val = words[i];
1:cd6a4ff: 
1:cd6a4ff:       for (int j = BYTE_LENGTH - 1; j > 0 && l > 0; j--) {
1:cd6a4ff:         bytes[l] = (byte) val;
1:cd6a4ff:         val >>>= 8;
1:cd6a4ff:         l--;
1:cd6a4ff:       }
1:cd6a4ff:       bytes[l] = (byte) val;
1:cd6a4ff:       l--;
1:cd6a4ff:     }
1:cd6a4ff:     return bytes;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   protected long[] get(int[] keys, int wsize) {
2:cd6a4ff:     long[] words = new long[wsize];
2:cd6a4ff:     int ll = 0;
1:cd6a4ff:     int index = 0;
1:cd6a4ff:     int pos = 0;
1:cd6a4ff:     int nextIndex = 0;
1:cd6a4ff:     for (int i = keys.length - 1; i >= 0; i--) {
1:cd6a4ff: 
1:cd6a4ff:       long val = keys[i];
1:cd6a4ff: 
1:cd6a4ff:       index = ll >> 6;// divide by 64 to get the new word index
1:cd6a4ff:       pos = ll & 0x3f;// to ignore sign bit and consider the remaining
1:cd6a4ff:       //            val = val & controlBits;
1:cd6a4ff:       long mask = (val << pos);
1:cd6a4ff:       long word = words[index];
1:cd6a4ff:       words[index] = (word | mask);
2:cd6a4ff:       ll += bitsLength;
1:cd6a4ff: 
1:cd6a4ff:       nextIndex = ll >> 6;// This is divide by 64
1:cd6a4ff: 
2:cd6a4ff:       if (nextIndex != index) {
2:cd6a4ff:         int consideredBits = bitsLength - ll & 0x3f;
2:cd6a4ff:         if (consideredBits < bitsLength) // Check for spill over only if
2:cd6a4ff:         // all the bits are not
2:cd6a4ff:         // considered
2:cd6a4ff:         {
2:cd6a4ff:           // Check for spill over
1:cd6a4ff:           mask = (val >> (bitsLength - ll & 0x3f));
1:cd6a4ff:           words[nextIndex] |= mask;
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff: 
1:cd6a4ff:     }
2:cd6a4ff:     return words;
1:cd6a4ff:   }
1:cd6a4ff: 
1:8d9babe:   public int[] unCompress(byte[] key, int offset, int length) {
1:81149f6:     int arrayLength = (length * BYTE_LENGTH) / bitsLength;
1:81149f6:     long[] words = new long[getWordsSizeFromBytesSize(length)];
1:81149f6:     unCompressVal(key, length, words, offset);
1:cd6a4ff:     return getArray(words, arrayLength);
1:cd6a4ff:   }
1:cd6a4ff: 
1:8d9babe:   private void unCompressVal(byte[] key, int ls, long[] words, int offset) {
1:cd6a4ff:     for (int i = 0; i < words.length; i++) {
1:cd6a4ff:       long l = 0;
1:cd6a4ff:       ls -= BYTE_LENGTH;
1:cd6a4ff:       int m = 0;
1:cd6a4ff:       if (ls < 0) {
1:cd6a4ff:         m = ls + BYTE_LENGTH;
1:cd6a4ff:         ls = 0;
1:cd6a4ff:       } else {
1:cd6a4ff:         m = ls + BYTE_LENGTH;
1:cd6a4ff:       }
1:cd6a4ff:       for (int j = ls; j < m; j++) {
1:cd6a4ff:         l <<= BYTE_LENGTH;
1:256dbed:         l ^= key[offset + j] & 0xFF;
1:cd6a4ff:       }
1:cd6a4ff:       words[i] = l;
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private int[] getArray(long[] words, int arrayLength) {
1:cd6a4ff:     int[] vals = new int[arrayLength];
1:cd6a4ff:     int ll = 0;
1:cd6a4ff:     long globalMask = LONG_MAX >>> (MAX_LENGTH - bitsLength);
1:cd6a4ff:     for (int i = arrayLength - 1; i >= 0; i--) {
1:cd6a4ff: 
1:cd6a4ff:       int index = ll >> 6;
1:cd6a4ff:       int pos = ll & 0x3f;
1:cd6a4ff:       long val = words[index];
1:cd6a4ff:       long mask = globalMask << pos;
1:cd6a4ff:       long value = (val & mask) >>> pos;
1:cd6a4ff:       ll += bitsLength;
1:cd6a4ff: 
1:cd6a4ff:       int nextIndex = ll >> 6;
1:cd6a4ff:       if (nextIndex != index) {
1:cd6a4ff:         pos = ll & 0x3f;
1:cd6a4ff:         if (pos != 0) // Number of bits pending for current key is zero, no spill over
1:cd6a4ff:         {
1:cd6a4ff:           mask = (LONG_MAX >>> (MAX_LENGTH - pos));
1:cd6a4ff:           val = words[nextIndex];
1:cd6a4ff:           value = value | ((val & mask) << (bitsLength - pos));
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff:       vals[i] = (int) value;
1:cd6a4ff:     }
1:cd6a4ff:     return vals;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private int[] getWordsAndByteSize(int arrayLength) {
1:cd6a4ff:     int length = arrayLength * bitsLength;
1:cd6a4ff:     int wsize = length / LONG_LENGTH;
1:cd6a4ff:     int byteSize = length / BYTE_LENGTH;
1:cd6a4ff: 
1:cd6a4ff:     if (length % LONG_LENGTH != 0) {
1:cd6a4ff:       wsize++;
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     if (length % BYTE_LENGTH != 0) {
1:cd6a4ff:       byteSize++;
1:cd6a4ff:     }
1:cd6a4ff:     return new int[] { wsize, byteSize };
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private int getWordsSizeFromBytesSize(int byteSize) {
1:cd6a4ff:     int wsize = byteSize / BYTE_LENGTH;
1:cd6a4ff:     if (byteSize % BYTE_LENGTH != 0) {
1:cd6a4ff:       wsize++;
1:cd6a4ff:     }
1:cd6a4ff:     return wsize;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:81149f6
/////////////////////////////////////////////////////////////////////////
1:     int arrayLength = (length * BYTE_LENGTH) / bitsLength;
1:     long[] words = new long[getWordsSizeFromBytesSize(length)];
1:     unCompressVal(key, length, words, offset);
commit:256dbed
/////////////////////////////////////////////////////////////////////////
1:         l ^= key[offset + j] & 0xFF;
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:kumarvishal
-------------------------------------------------------------------------------
commit:8d9babe
/////////////////////////////////////////////////////////////////////////
1:   public int[] unCompress(byte[] key, int offset, int length) {
0:     int ls = length;
0:     unCompressVal(key, ls, words, offset);
1:   private void unCompressVal(byte[] key, int ls, long[] words, int offset) {
/////////////////////////////////////////////////////////////////////////
0:         l ^= key[offset+j] & 0xFF;
author:Anurag
-------------------------------------------------------------------------------
commit:5ef67ac
/////////////////////////////////////////////////////////////////////////
1:   public NumberCompressor(int cardinality) {
1:     bitsLength = (byte) Long.toBinaryString(cardinality).length();
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.keygenerator.mdkey;
1: 
1: /**
1:  * It compresses the data as per max cardinality. It takes only the required bits for each key.
1:  */
1: public class NumberCompressor {
1: 
1:   /**
1:    * Bits MAX_LENGTH
1:    */
1:   private static final int MAX_LENGTH = 63;
1: 
1:   private static final int LONG_LENGTH = 64;
1: 
1:   private static final int BYTE_LENGTH = 8;
1: 
1:   /**
1:    * LONG_MAX.
1:    */
1:   private static final long LONG_MAX = 0x7fffffffffffffffL;
1: 
1:   private byte bitsLength;
1: 
0:   public NumberCompressor(int cardinaity) {
0:     bitsLength = (byte) Long.toBinaryString(cardinaity).length();
1:   }
1: 
1:   public byte[] compress(int[] keys) {
1:     int[] sizes = getWordsAndByteSize(keys.length);
1:     long[] words = get(keys, sizes[0]);
1: 
1:     return getByteValues(sizes, words);
1:   }
1: 
1:   private byte[] getByteValues(int[] sizes, long[] words) {
1:     byte[] bytes = new byte[sizes[1]];
1: 
1:     int l = sizes[1] - 1;
1:     for (int i = 0; i < words.length; i++) {
1:       long val = words[i];
1: 
1:       for (int j = BYTE_LENGTH - 1; j > 0 && l > 0; j--) {
1:         bytes[l] = (byte) val;
1:         val >>>= 8;
1:         l--;
1:       }
1:       bytes[l] = (byte) val;
1:       l--;
1:     }
1:     return bytes;
1:   }
1: 
1:   protected long[] get(int[] keys, int wsize) {
1:     long[] words = new long[wsize];
1:     int ll = 0;
1:     int index = 0;
1:     int pos = 0;
1:     int nextIndex = 0;
1:     for (int i = keys.length - 1; i >= 0; i--) {
1: 
1:       long val = keys[i];
1: 
1:       index = ll >> 6;// divide by 64 to get the new word index
1:       pos = ll & 0x3f;// to ignore sign bit and consider the remaining
1:       //            val = val & controlBits;
1:       long mask = (val << pos);
1:       long word = words[index];
1:       words[index] = (word | mask);
1:       ll += bitsLength;
1: 
1:       nextIndex = ll >> 6;// This is divide by 64
1: 
1:       if (nextIndex != index) {
1:         int consideredBits = bitsLength - ll & 0x3f;
1:         if (consideredBits < bitsLength) // Check for spill over only if
1:         // all the bits are not
1:         // considered
1:         {
1:           // Check for spill over
1:           mask = (val >> (bitsLength - ll & 0x3f));
1:           words[nextIndex] |= mask;
1:         }
1:       }
1: 
1:     }
1:     return words;
1:   }
1: 
0:   protected long[] get(byte[] keys, int wsize) {
1:     long[] words = new long[wsize];
1:     int ll = 0;
0:     long val = 0L;
0:     for (int i = keys.length - 1; i >= 0; ) {
1: 
0:       int size = i;
0:       val = 0L;
0:       for (int j = i + 1; j <= size; ) {
0:         val <<= BYTE_LENGTH;
0:         val ^= keys[j++] & 0xFF;
0:         i--;
1:       }
0:       int index = ll >> 6;// divide by 64 to get the new word index
0:       words[index] |= (val << (ll & 0x3f));
1:       ll += bitsLength;
1: 
0:       int nextIndex = ll >> 6;// This is divide by 64
1: 
1:       if (nextIndex != index) {
1:         int consideredBits = bitsLength - ll & 0x3f;
1:         if (consideredBits < bitsLength) // Check for spill over only if
1:         // all the bits are not
1:         // considered
1:         {
1:           // Check for spill over
0:           words[nextIndex] |= (val >> (bitsLength - ll & 0x3f));
1:         }
1:       }
1: 
1:     }
1:     return words;
1:   }
1: 
0:   public int[] unCompress(byte[] key) {
0:     int ls = key.length;
0:     int arrayLength = (ls * BYTE_LENGTH) / bitsLength;
0:     long[] words = new long[getWordsSizeFromBytesSize(ls)];
0:     unCompressVal(key, ls, words);
1:     return getArray(words, arrayLength);
1:   }
1: 
0:   private void unCompressVal(byte[] key, int ls, long[] words) {
1:     for (int i = 0; i < words.length; i++) {
1:       long l = 0;
1:       ls -= BYTE_LENGTH;
1:       int m = 0;
1:       if (ls < 0) {
1:         m = ls + BYTE_LENGTH;
1:         ls = 0;
1:       } else {
1:         m = ls + BYTE_LENGTH;
1:       }
1:       for (int j = ls; j < m; j++) {
1:         l <<= BYTE_LENGTH;
0:         l ^= key[j] & 0xFF;
1:       }
1:       words[i] = l;
1:     }
1:   }
1: 
1:   private int[] getArray(long[] words, int arrayLength) {
1:     int[] vals = new int[arrayLength];
1:     int ll = 0;
1:     long globalMask = LONG_MAX >>> (MAX_LENGTH - bitsLength);
1:     for (int i = arrayLength - 1; i >= 0; i--) {
1: 
1:       int index = ll >> 6;
1:       int pos = ll & 0x3f;
1:       long val = words[index];
1:       long mask = globalMask << pos;
1:       long value = (val & mask) >>> pos;
1:       ll += bitsLength;
1: 
1:       int nextIndex = ll >> 6;
1:       if (nextIndex != index) {
1:         pos = ll & 0x3f;
1:         if (pos != 0) // Number of bits pending for current key is zero, no spill over
1:         {
1:           mask = (LONG_MAX >>> (MAX_LENGTH - pos));
1:           val = words[nextIndex];
1:           value = value | ((val & mask) << (bitsLength - pos));
1:         }
1:       }
1:       vals[i] = (int) value;
1:     }
1:     return vals;
1:   }
1: 
1:   private int[] getWordsAndByteSize(int arrayLength) {
1:     int length = arrayLength * bitsLength;
1:     int wsize = length / LONG_LENGTH;
1:     int byteSize = length / BYTE_LENGTH;
1: 
1:     if (length % LONG_LENGTH != 0) {
1:       wsize++;
1:     }
1: 
1:     if (length % BYTE_LENGTH != 0) {
1:       byteSize++;
1:     }
1:     return new int[] { wsize, byteSize };
1:   }
1: 
1:   private int getWordsSizeFromBytesSize(int byteSize) {
1:     int wsize = byteSize / BYTE_LENGTH;
1:     if (byteSize % BYTE_LENGTH != 0) {
1:       wsize++;
1:     }
1:     return wsize;
1:   }
1: 
1: }
============================================================================