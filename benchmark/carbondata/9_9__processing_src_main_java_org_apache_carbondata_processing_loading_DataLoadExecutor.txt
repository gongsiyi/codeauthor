1:496cde4: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
2:41347d8:  *
1:41347d8:  *    http://www.apache.org/licenses/LICENSE-2.0
1:917dae9:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:496cde4:  */
1:41347d8: 
1:349c59c: package org.apache.carbondata.processing.loading;
4:496cde4: 
1:63434fa: import org.apache.carbondata.common.CarbonIterator;
1:496cde4: import org.apache.carbondata.common.logging.LogService;
1:496cde4: import org.apache.carbondata.common.logging.LogServiceFactory;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:349c59c: import org.apache.carbondata.processing.loading.exception.BadRecordFoundException;
1:349c59c: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1:349c59c: import org.apache.carbondata.processing.loading.exception.NoRetryException;
1:349c59c: import org.apache.carbondata.processing.loading.model.CarbonLoadModel;
1:837fdd2: import org.apache.carbondata.processing.util.CarbonBadRecordUtil;
1:496cde4: 
1:917dae9: /**
1:496cde4:  * It executes the data load.
1:917dae9:  */
1:496cde4: public class DataLoadExecutor {
1:496cde4: 
1:496cde4:   private static final LogService LOGGER =
1:496cde4:       LogServiceFactory.getLogService(DataLoadExecutor.class.getName());
1:496cde4: 
1:df22368:   private AbstractDataLoadProcessorStep loadProcessorStep;
1:df22368: 
1:df22368:   private boolean isClosed;
1:df22368: 
1:ded8b41:   public void execute(CarbonLoadModel loadModel, String[] storeLocation,
1:63434fa:       CarbonIterator<Object[]>[] inputIterators) throws Exception {
1:496cde4:     try {
1:496cde4:       loadProcessorStep =
1:496cde4:           new DataLoadProcessBuilder().build(loadModel, storeLocation, inputIterators);
1:496cde4:       // 1. initialize
1:496cde4:       loadProcessorStep.initialize();
1:496cde4:       LOGGER.info("Data Loading is started for table " + loadModel.getTableName());
1:496cde4:       // 2. execute the step
1:496cde4:       loadProcessorStep.execute();
1:917dae9:       // check and remove any bad record key from bad record entry logger static map
1:837fdd2:       if (CarbonBadRecordUtil.hasBadRecord(loadModel)) {
1:733968b:         LOGGER.error("Data Load is partially success for table " + loadModel.getTableName());
1:917dae9:       } else {
1:917dae9:         LOGGER.info("Data loading is successful for table " + loadModel.getTableName());
1:917dae9:       }
1:496cde4:     } catch (CarbonDataLoadingException e) {
1:2e04c35:       if (e instanceof BadRecordFoundException) {
1:2e04c35:         throw new NoRetryException(e.getMessage());
1:2e04c35:       } else {
1:2e04c35:         throw e;
1:2e04c35:       }
1:496cde4:     } catch (Exception e) {
1:496cde4:       LOGGER.error(e, "Data Loading failed for table " + loadModel.getTableName());
1:496cde4:       throw new CarbonDataLoadingException(
1:496cde4:           "Data Loading failed for table " + loadModel.getTableName(), e);
1:917dae9:     }
3:496cde4:   }
1:917dae9: 
1:917dae9:   /**
1:917dae9:    * This method will remove any bad record key from the map entry
1:917dae9:    *
2:917dae9:    * @param carbonTableIdentifier
1:917dae9:    * @return
1:917dae9:    */
1:917dae9:   private boolean badRecordFound(CarbonTableIdentifier carbonTableIdentifier) {
2:917dae9:     String badRecordLoggerKey = carbonTableIdentifier.getBadRecordLoggerKey();
1:917dae9:     boolean badRecordKeyFound = false;
1:917dae9:     if (null != BadRecordsLogger.hasBadRecord(badRecordLoggerKey)) {
1:917dae9:       badRecordKeyFound = true;
1:496cde4:     }
1:917dae9:     return badRecordKeyFound;
1:917dae9:   }
1:df22368: 
1:df22368:   /**
1:df22368:    * Method to clean all the resource
1:df22368:    */
1:df22368:   public void close() {
1:df22368:     if (!isClosed && loadProcessorStep != null) {
1:df22368:       loadProcessorStep.close();
1:df22368:     }
1:df22368:     isClosed = true;
1:df22368:   }
1:496cde4: }
============================================================================
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:837fdd2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.util.CarbonBadRecordUtil;
/////////////////////////////////////////////////////////////////////////
1:       if (CarbonBadRecordUtil.hasBadRecord(loadModel)) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:733968b
/////////////////////////////////////////////////////////////////////////
1:       LOGGER.error("Data Load is partially success for table " + loadModel.getTableName());
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading;
1: import org.apache.carbondata.processing.loading.exception.BadRecordFoundException;
1: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1: import org.apache.carbondata.processing.loading.exception.NoRetryException;
1: import org.apache.carbondata.processing.loading.model.CarbonLoadModel;
author:kunal642
-------------------------------------------------------------------------------
commit:2e04c35
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.newflow.exception.BadRecordFoundException;
0: import org.apache.carbondata.processing.newflow.exception.NoRetryException;
/////////////////////////////////////////////////////////////////////////
1:       if (e instanceof BadRecordFoundException) {
1:         throw new NoRetryException(e.getMessage());
1:       } else {
1:         throw e;
1:       }
author:xuchuanyin
-------------------------------------------------------------------------------
commit:ded8b41
/////////////////////////////////////////////////////////////////////////
1:   public void execute(CarbonLoadModel loadModel, String[] storeLocation,
author:kumarvishal
-------------------------------------------------------------------------------
commit:df22368
/////////////////////////////////////////////////////////////////////////
1:   private AbstractDataLoadProcessorStep loadProcessorStep;
1: 
1:   private boolean isClosed;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Method to clean all the resource
1:    */
1:   public void close() {
1:     if (!isClosed && loadProcessorStep != null) {
1:       loadProcessorStep.close();
1:     }
1:     isClosed = true;
1:   }
author:manishgupta88
-------------------------------------------------------------------------------
commit:917dae9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       // check and remove any bad record key from bad record entry logger static map
0:       if (badRecordFound(
0:           loadModel.getCarbonDataLoadSchema().getCarbonTable().getCarbonTableIdentifier())) {
0:         LOGGER.error("Data Load is partially success for table " + loadModel.getTableName());
1:       } else {
1:         LOGGER.info("Data loading is successful for table " + loadModel.getTableName());
1:       }
/////////////////////////////////////////////////////////////////////////
0:       removeBadRecordKey(
0:           loadModel.getCarbonDataLoadSchema().getCarbonTable().getCarbonTableIdentifier());
1:   }
1:   /**
1:    * This method will remove any bad record key from the map entry
1:    *
1:    * @param carbonTableIdentifier
1:    * @return
1:    */
1:   private boolean badRecordFound(CarbonTableIdentifier carbonTableIdentifier) {
1:     String badRecordLoggerKey = carbonTableIdentifier.getBadRecordLoggerKey();
1:     boolean badRecordKeyFound = false;
1:     if (null != BadRecordsLogger.hasBadRecord(badRecordLoggerKey)) {
1:       badRecordKeyFound = true;
1:     return badRecordKeyFound;
1:   }
1: 
1:   /**
0:    * This method will remove the bad record key from bad record logger
1:    *
1:    * @param carbonTableIdentifier
1:    */
0:   private void removeBadRecordKey(CarbonTableIdentifier carbonTableIdentifier) {
1:     String badRecordLoggerKey = carbonTableIdentifier.getBadRecordLoggerKey();
0:     BadRecordsLogger.removeBadRecordKey(badRecordLoggerKey);
author:QiangCai
-------------------------------------------------------------------------------
commit:256dbed
/////////////////////////////////////////////////////////////////////////
0:       LOGGER.info("Data loading is successful for table " + loadModel.getTableName());
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: 
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
author:ravipesala
-------------------------------------------------------------------------------
commit:63434fa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.CarbonIterator;
/////////////////////////////////////////////////////////////////////////
1:       CarbonIterator<Object[]>[] inputIterators) throws Exception {
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow;
1: 
0: import java.util.Iterator;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.processing.model.CarbonLoadModel;
0: import org.apache.carbondata.processing.newflow.exception.BadRecordFoundException;
0: import org.apache.carbondata.processing.newflow.exception.CarbonDataLoadingException;
0: import org.apache.carbondata.processing.surrogatekeysgenerator.csvbased.BadRecordsLogger;
1: 
0: /**
1:  * It executes the data load.
1:  */
1: public class DataLoadExecutor {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(DataLoadExecutor.class.getName());
1: 
0:   public void execute(CarbonLoadModel loadModel, String storeLocation,
0:       Iterator<Object[]>[] inputIterators) throws Exception {
0:     AbstractDataLoadProcessorStep loadProcessorStep = null;
1:     try {
1: 
1:       loadProcessorStep =
1:           new DataLoadProcessBuilder().build(loadModel, storeLocation, inputIterators);
1:       // 1. initialize
1:       loadProcessorStep.initialize();
1:       LOGGER.info("Data Loading is started for table " + loadModel.getTableName());
1:       // 2. execute the step
1:       loadProcessorStep.execute();
1:     } catch (CarbonDataLoadingException e) {
0:       throw e;
1:     } catch (Exception e) {
1:       LOGGER.error(e, "Data Loading failed for table " + loadModel.getTableName());
1:       throw new CarbonDataLoadingException(
1:           "Data Loading failed for table " + loadModel.getTableName(), e);
0:     } finally {
0:       if (loadProcessorStep != null) {
0:         // 3. Close the step
0:         loadProcessorStep.close();
1:       }
1:     }
1: 
0:     String key =
0:         new CarbonTableIdentifier(loadModel.getDatabaseName(), loadModel.getTableName(), null)
0:             .getBadRecordLoggerKey();
0:     if (null != BadRecordsLogger.hasBadRecord(key)) {
0:       LOGGER.error("Data Load is partcially success for table " + loadModel.getTableName());
0:       throw new BadRecordFoundException("Bad records found during load");
0:     } else {
0:       LOGGER.info("Data loading is successful for table "+loadModel.getTableName());
1:     }
1:   }
1: }
============================================================================