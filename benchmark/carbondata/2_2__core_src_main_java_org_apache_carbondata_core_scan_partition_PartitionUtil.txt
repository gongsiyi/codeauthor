1:b6b93f0: /*
1:b6b93f0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b6b93f0:  * contributor license agreements.  See the NOTICE file distributed with
1:b6b93f0:  * this work for additional information regarding copyright ownership.
1:b6b93f0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b6b93f0:  * (the "License"); you may not use this file except in compliance with
1:b6b93f0:  * the License.  You may obtain a copy of the License at
1:b6b93f0:  *
1:b6b93f0:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b6b93f0:  *
1:b6b93f0:  * Unless required by applicable law or agreed to in writing, software
1:b6b93f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b6b93f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b6b93f0:  * See the License for the specific language governing permissions and
1:b6b93f0:  * limitations under the License.
1:b6b93f0:  */
4:b6b93f0: 
1:b6b93f0: package org.apache.carbondata.core.scan.partition;
1:b6b93f0: 
1:b6b93f0: import java.math.BigDecimal;
1:b6b93f0: import java.text.DateFormat;
1:b6b93f0: import java.util.BitSet;
1:b6b93f0: 
1:b6b93f0: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:b6b93f0: import org.apache.carbondata.core.metadata.schema.PartitionInfo;
1:b6b93f0: 
1:b6b93f0: import org.apache.commons.lang.StringUtils;
1:b6b93f0: 
1:b6b93f0: public class PartitionUtil {
1:b6b93f0: 
1:b6b93f0:   public static Partitioner getPartitioner(PartitionInfo partitionInfo) {
1:b6b93f0:     switch (partitionInfo.getPartitionType()) {
1:b6b93f0:       case HASH:
1:b6b93f0:         return new HashPartitioner(partitionInfo.getNumPartitions());
1:b6b93f0:       case LIST:
1:b6b93f0:         return new ListPartitioner(partitionInfo);
1:b6b93f0:       case RANGE:
1:b6b93f0:         return new RangePartitioner(partitionInfo);
1:cdde3dd:       default:
1:b6b93f0:         throw new UnsupportedOperationException(
1:b6b93f0:             "unsupport partition type: " + partitionInfo.getPartitionType().name());
3:b6b93f0:     }
1:b6b93f0:   }
1:b6b93f0: 
1:71934e9:   public static Object getDataBasedOnDataType(String data, DataType actualDataType,
1:71934e9:       DateFormat timestampFormatter, DateFormat dateFormatter) {
1:b6b93f0:     if (data == null) {
1:b6b93f0:       return null;
1:cdde3dd:     }
1:956833e:     if (actualDataType != DataTypes.STRING && StringUtils.isEmpty(data)) {
1:b6b93f0:       return null;
1:b6b93f0:     }
1:b6b93f0:     try {
1:956833e:       if (actualDataType == DataTypes.STRING) {
1:956833e:         return data;
1:956833e:       } else if (actualDataType == DataTypes.INT) {
1:956833e:         return Integer.parseInt(data);
1:956833e:       } else if (actualDataType == DataTypes.SHORT) {
1:956833e:         return Short.parseShort(data);
1:956833e:       } else if (actualDataType == DataTypes.DOUBLE) {
1:956833e:         return Double.parseDouble(data);
1:956833e:       } else if (actualDataType == DataTypes.LONG) {
1:956833e:         return Long.parseLong(data);
1:956833e:       } else if (actualDataType == DataTypes.DATE) {
1:956833e:         return dateFormatter.parse(data).getTime();
1:956833e:       } else if (actualDataType == DataTypes.TIMESTAMP) {
1:956833e:         return timestampFormatter.parse(data).getTime();
1:f209e8e:       } else if (DataTypes.isDecimal(actualDataType)) {
1:956833e:         return new BigDecimal(data);
1:956833e:       } else {
1:956833e:         return data;
1:b6b93f0:       }
1:b6b93f0:     } catch (Exception ex) {
1:b6b93f0:       return null;
1:b6b93f0:     }
1:b6b93f0:   }
1:b6b93f0: 
1:cdde3dd:   /**
1:cdde3dd:    * convert the string value of partition filter to the Object
1:cdde3dd:    * @param data
1:cdde3dd:    * @param actualDataType
1:cdde3dd:    * @return
1:cdde3dd:    */
1:cdde3dd:   public static Object getDataBasedOnDataTypeForFilter(String data, DataType actualDataType) {
1:cdde3dd:     if (data == null) {
1:cdde3dd:       return null;
1:cdde3dd:     }
1:956833e:     if (actualDataType != DataTypes.STRING && StringUtils.isEmpty(data)) {
1:cdde3dd:       return null;
1:cdde3dd:     }
1:cdde3dd:     try {
1:956833e:       if (actualDataType == DataTypes.STRING) {
1:956833e:         return data;
1:956833e:       } else if (actualDataType == DataTypes.INT) {
1:956833e:         return Integer.parseInt(data);
1:956833e:       } else if (actualDataType == DataTypes.SHORT) {
1:956833e:         return Short.parseShort(data);
1:956833e:       } else if (actualDataType == DataTypes.DOUBLE) {
1:956833e:         return Double.parseDouble(data);
1:956833e:       } else if (actualDataType == DataTypes.LONG) {
1:956833e:         return Long.parseLong(data);
1:956833e:       } else if (actualDataType == DataTypes.DATE || actualDataType == DataTypes.TIMESTAMP) {
1:956833e:         return Long.parseLong(data) / 1000;
1:f209e8e:       } else if (DataTypes.isDecimal(actualDataType)) {
1:956833e:         return new BigDecimal(data);
1:956833e:       } else {
1:956833e:         return data;
1:cdde3dd:       }
1:cdde3dd:     } catch (Exception ex) {
1:cdde3dd:       return null;
1:cdde3dd:     }
1:b6b93f0:   }
1:cdde3dd: 
1:cdde3dd:   /**
1:cdde3dd:    * generate a BitSet by size
1:cdde3dd:    * @param size
1:cdde3dd:    * @param initValue true: initialize all bits to true
1:cdde3dd:    * @return
1:cdde3dd:    */
1:cdde3dd:   public static BitSet generateBitSetBySize(int size, boolean initValue) {
1:b6b93f0:     BitSet bitSet = new BitSet(size);
1:cdde3dd:     if (initValue) {
1:b6b93f0:       bitSet.set(0, size);
1:b6b93f0:     }
1:b6b93f0:     return bitSet;
1:b6b93f0:   }
1:b6b93f0: 
1:b6b93f0: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
1:       } else if (DataTypes.isDecimal(actualDataType)) {
/////////////////////////////////////////////////////////////////////////
1:       } else if (DataTypes.isDecimal(actualDataType)) {
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     if (actualDataType != DataTypes.STRING && StringUtils.isEmpty(data)) {
1:       if (actualDataType == DataTypes.STRING) {
1:         return data;
1:       } else if (actualDataType == DataTypes.INT) {
1:         return Integer.parseInt(data);
1:       } else if (actualDataType == DataTypes.SHORT) {
1:         return Short.parseShort(data);
1:       } else if (actualDataType == DataTypes.DOUBLE) {
1:         return Double.parseDouble(data);
1:       } else if (actualDataType == DataTypes.LONG) {
1:         return Long.parseLong(data);
1:       } else if (actualDataType == DataTypes.DATE) {
1:         return dateFormatter.parse(data).getTime();
1:       } else if (actualDataType == DataTypes.TIMESTAMP) {
1:         return timestampFormatter.parse(data).getTime();
0:       } else if (actualDataType == DataTypes.DECIMAL) {
1:         return new BigDecimal(data);
1:       } else {
1:         return data;
/////////////////////////////////////////////////////////////////////////
1:     if (actualDataType != DataTypes.STRING && StringUtils.isEmpty(data)) {
1:       if (actualDataType == DataTypes.STRING) {
1:         return data;
1:       } else if (actualDataType == DataTypes.INT) {
1:         return Integer.parseInt(data);
1:       } else if (actualDataType == DataTypes.SHORT) {
1:         return Short.parseShort(data);
1:       } else if (actualDataType == DataTypes.DOUBLE) {
1:         return Double.parseDouble(data);
1:       } else if (actualDataType == DataTypes.LONG) {
1:         return Long.parseLong(data);
1:       } else if (actualDataType == DataTypes.DATE || actualDataType == DataTypes.TIMESTAMP) {
1:         return Long.parseLong(data) / 1000;
0:       } else if (actualDataType == DataTypes.DECIMAL) {
1:         return new BigDecimal(data);
1:       } else {
1:         return data;
author:QiangCai
-------------------------------------------------------------------------------
commit:71934e9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public static Object getDataBasedOnDataType(String data, DataType actualDataType,
1:       DateFormat timestampFormatter, DateFormat dateFormatter) {
/////////////////////////////////////////////////////////////////////////
0:           return dateFormatter.parse(data).getTime();
0:           return timestampFormatter.parse(data).getTime();
commit:cdde3dd
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * convert the string value of partition filter to the Object
1:    * @param data
1:    * @param actualDataType
1:    * @return
1:    */
1:   public static Object getDataBasedOnDataTypeForFilter(String data, DataType actualDataType) {
1:     if (data == null) {
1:       return null;
1:     }
0:     if (actualDataType != DataType.STRING && StringUtils.isEmpty(data)) {
1:       return null;
1:     }
1:     try {
0:       switch (actualDataType) {
0:         case STRING:
0:           return data;
0:         case INT:
0:           return Integer.parseInt(data);
0:         case SHORT:
0:           return Short.parseShort(data);
0:         case DOUBLE:
0:           return Double.parseDouble(data);
0:         case LONG:
0:           return Long.parseLong(data);
0:         case DATE:
0:         case TIMESTAMP:
0:           return Long.parseLong(data) / 1000;
0:         case DECIMAL:
0:           return new BigDecimal(data);
1:         default:
0:           return data;
1:       }
1:     } catch (Exception ex) {
1:       return null;
1:     }
1:   }
1: 
1:   /**
1:    * generate a BitSet by size
1:    * @param size
1:    * @param initValue true: initialize all bits to true
1:    * @return
1:    */
1:   public static BitSet generateBitSetBySize(int size, boolean initValue) {
1:     if (initValue) {
commit:b6b93f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.partition;
1: 
1: import java.math.BigDecimal;
1: import java.text.DateFormat;
0: import java.text.SimpleDateFormat;
1: import java.util.BitSet;
1: 
0: import org.apache.carbondata.common.logging.LogService;
0: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.schema.PartitionInfo;
0: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: import org.apache.commons.lang.StringUtils;
1: 
1: public class PartitionUtil {
1: 
0:   private static LogService LOGGER = LogServiceFactory.getLogService(PartitionUtil.class.getName());
1: 
0:   private static final ThreadLocal<DateFormat> timestampFormatter = new ThreadLocal<DateFormat>() {
0:     @Override protected DateFormat initialValue() {
0:       return new SimpleDateFormat(CarbonProperties.getInstance()
0:           .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
0:               CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
1:     }
0:   };
1: 
0:   private static final ThreadLocal<DateFormat> dateFormatter = new ThreadLocal<DateFormat>() {
0:     @Override protected DateFormat initialValue() {
0:       return new SimpleDateFormat(CarbonProperties.getInstance()
0:           .getProperty(CarbonCommonConstants.CARBON_DATE_FORMAT,
0:               CarbonCommonConstants.CARBON_DATE_DEFAULT_FORMAT));
1:     }
0:   };
1: 
1:   public static Partitioner getPartitioner(PartitionInfo partitionInfo) {
1:     switch (partitionInfo.getPartitionType()) {
1:       case HASH:
1:         return new HashPartitioner(partitionInfo.getNumPartitions());
1:       case LIST:
1:         return new ListPartitioner(partitionInfo);
1:       case RANGE:
1:         return new RangePartitioner(partitionInfo);
0:       default:
1:         throw new UnsupportedOperationException(
1:             "unsupport partition type: " + partitionInfo.getPartitionType().name());
1:     }
1:   }
1: 
0:   public static Object getDataBasedOnDataType(String data, DataType actualDataType) {
1:     if (data == null) {
1:       return null;
1:     }
0:     if (actualDataType != DataType.STRING && StringUtils.isEmpty(data)) {
1:       return null;
1:     }
1:     try {
0:       switch (actualDataType) {
0:         case STRING:
0:           return data;
0:         case INT:
0:           return Integer.parseInt(data);
0:         case SHORT:
0:           return Short.parseShort(data);
0:         case DOUBLE:
0:           return Double.parseDouble(data);
0:         case LONG:
0:           return Long.parseLong(data);
0:         case DATE:
0:           return PartitionUtil.dateFormatter.get().parse(data).getTime();
0:         case TIMESTAMP:
0:           return PartitionUtil.timestampFormatter.get().parse(data).getTime();
0:         case DECIMAL:
0:           return new BigDecimal(data);
0:         default:
0:           return data;
1:       }
1:     } catch (Exception ex) {
1:       return null;
1:     }
1:   }
1: 
0:   public static BitSet generateBitSetBySize(int size, boolean isContainAll) {
1:     BitSet bitSet = new BitSet(size);
0:     if (isContainAll) {
1:       bitSet.set(0, size);
1:     }
1:     return bitSet;
1:   }
1: 
1: }
============================================================================