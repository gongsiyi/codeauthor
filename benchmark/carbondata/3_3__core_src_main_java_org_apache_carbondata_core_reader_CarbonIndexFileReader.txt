1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.core.reader;
1:cd6a4ff: 
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.format.BlockIndex;
1:cd6a4ff: import org.apache.carbondata.format.IndexHeader;
1:cd6a4ff: 
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:cd6a4ff: import org.apache.thrift.TBase;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * Reader class which will be used to read the index file
1:cd6a4ff:  */
1:cd6a4ff: public class CarbonIndexFileReader {
1:cd6a4ff: 
1:8f1a029:   private Configuration configuration;
1:8f1a029: 
1:8f1a029:   public CarbonIndexFileReader() {
1:8f1a029: 
1:8f1a029:   }
1:8f1a029: 
1:8f1a029:   public CarbonIndexFileReader(Configuration configuration) {
1:8f1a029:     this.configuration = configuration;
1:8f1a029:   }
1:cd6a4ff:   /**
1:cd6a4ff:    * reader
1:cd6a4ff:    */
1:cd6a4ff:   private ThriftReader thriftReader;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Below method will be used to read the index header
1:cd6a4ff:    *
1:cd6a4ff:    * @return index header
1:cd6a4ff:    * @throws IOException if any problem  while reader the header
1:cd6a4ff:    */
1:cd6a4ff:   public IndexHeader readIndexHeader() throws IOException {
1:81149f6:     return (IndexHeader) thriftReader.read(new ThriftReader.TBaseCreator() {
1:cd6a4ff:       @Override public TBase create() {
1:cd6a4ff:         return new IndexHeader();
1:cd6a4ff:       }
1:cd6a4ff:     });
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Below method will be used to close the reader
1:cd6a4ff:    */
1:cd6a4ff:   public void closeThriftReader() {
1:cd6a4ff:     thriftReader.close();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Below method will be used to read the block index from fie
1:cd6a4ff:    *
1:cd6a4ff:    * @return block index info
1:cd6a4ff:    * @throws IOException if problem while reading the block index
1:cd6a4ff:    */
1:cd6a4ff:   public BlockIndex readBlockIndexInfo() throws IOException {
1:81149f6:     return (BlockIndex) thriftReader.read(new ThriftReader.TBaseCreator() {
1:cd6a4ff:       @Override public TBase create() {
1:cd6a4ff:         return new BlockIndex();
1:cd6a4ff:       }
1:cd6a4ff:     });
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:0586146:    * Open the thrift reader
1:0586146:    *
1:cd6a4ff:    * @param filePath
1:cd6a4ff:    * @throws IOException
1:cd6a4ff:    */
1:cd6a4ff:   public void openThriftReader(String filePath) throws IOException {
1:8f1a029:     thriftReader = new ThriftReader(filePath, configuration);
1:cd6a4ff:     thriftReader.open();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Open the thrift reader
1:cd6a4ff:    *
1:0586146:    * @param fileData
1:0586146:    * @throws IOException
1:0586146:    */
1:0586146:   public void openThriftReader(byte[] fileData) throws IOException {
1:0586146:     thriftReader = new ThriftReader(fileData);
1:0586146:   }
1:0586146: 
1:0586146:   /**
1:cd6a4ff:    * check if any more object is present
1:cd6a4ff:    *
1:cd6a4ff:    * @return true if any more object can be read
1:cd6a4ff:    * @throws IOException
1:cd6a4ff:    */
1:cd6a4ff:   public boolean hasNext() throws IOException {
1:cd6a4ff:     return thriftReader.hasNext();
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
/////////////////////////////////////////////////////////////////////////
1:   private Configuration configuration;
1: 
1:   public CarbonIndexFileReader() {
1: 
1:   }
1: 
1:   public CarbonIndexFileReader(Configuration configuration) {
1:     this.configuration = configuration;
1:   }
/////////////////////////////////////////////////////////////////////////
1:     thriftReader = new ThriftReader(filePath, configuration);
author:ravipesala
-------------------------------------------------------------------------------
commit:0586146
/////////////////////////////////////////////////////////////////////////
1:    * Open the thrift reader
1:    *
1:    * @param fileData
1:    * @throws IOException
1:    */
1:   public void openThriftReader(byte[] fileData) throws IOException {
1:     thriftReader = new ThriftReader(fileData);
1:   }
1: 
1:   /**
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.reader;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.format.BlockIndex;
1: import org.apache.carbondata.format.IndexHeader;
1: 
1: import org.apache.thrift.TBase;
1: 
1: /**
1:  * Reader class which will be used to read the index file
1:  */
1: public class CarbonIndexFileReader {
1: 
1:   /**
1:    * reader
1:    */
1:   private ThriftReader thriftReader;
1: 
1:   /**
1:    * Below method will be used to read the index header
1:    *
1:    * @return index header
1:    * @throws IOException if any problem  while reader the header
1:    */
1:   public IndexHeader readIndexHeader() throws IOException {
0:     IndexHeader indexHeader = (IndexHeader) thriftReader.read(new ThriftReader.TBaseCreator() {
1:       @Override public TBase create() {
1:         return new IndexHeader();
1:       }
1:     });
0:     return indexHeader;
1:   }
1: 
1:   /**
1:    * Below method will be used to close the reader
1:    */
1:   public void closeThriftReader() {
1:     thriftReader.close();
1:   }
1: 
1:   /**
1:    * Below method will be used to read the block index from fie
1:    *
1:    * @return block index info
1:    * @throws IOException if problem while reading the block index
1:    */
1:   public BlockIndex readBlockIndexInfo() throws IOException {
0:     BlockIndex blockInfo = (BlockIndex) thriftReader.read(new ThriftReader.TBaseCreator() {
1:       @Override public TBase create() {
1:         return new BlockIndex();
1:       }
1:     });
0:     return blockInfo;
1:   }
1: 
1:   /**
1:    * Open the thrift reader
1:    *
1:    * @param filePath
1:    * @throws IOException
1:    */
1:   public void openThriftReader(String filePath) throws IOException {
0:     thriftReader = new ThriftReader(filePath);
1:     thriftReader.open();
1:   }
1: 
1:   /**
1:    * check if any more object is present
1:    *
1:    * @return true if any more object can be read
1:    * @throws IOException
1:    */
1:   public boolean hasNext() throws IOException {
1:     return thriftReader.hasNext();
1:   }
1: }
author:QiangCai
-------------------------------------------------------------------------------
commit:81149f6
/////////////////////////////////////////////////////////////////////////
1:     return (IndexHeader) thriftReader.read(new ThriftReader.TBaseCreator() {
/////////////////////////////////////////////////////////////////////////
1:     return (BlockIndex) thriftReader.read(new ThriftReader.TBaseCreator() {
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
============================================================================