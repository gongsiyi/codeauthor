1:496cde4: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:496cde4:  *
1:496cde4:  *    http://www.apache.org/licenses/LICENSE-2.0
1:496cde4:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:496cde4:  */
1:349c59c: package org.apache.carbondata.processing.sort.sortdata;
3:496cde4: 
1:31011fc: import java.io.Serializable;
1:496cde4: import java.util.Comparator;
1:496cde4: 
1:496cde4: /**
1:496cde4:  * This class is used as comparator for comparing dims which are non high cardinality dims.
1:496cde4:  * Here the dims will be in form of int[] (surrogates) so directly comparing the integers.
1:496cde4:  */
1:31011fc: public class NewRowComparatorForNormalDims implements Comparator<Object[]>, Serializable {
1:31011fc:   private static final long serialVersionUID = -1749874611112709432L;
1:31011fc: 
1:496cde4:   /**
1:496cde4:    * dimension count
1:496cde4:    */
1:9f94529:   private int numberOfSortColumns;
1:496cde4: 
1:496cde4:   /**
1:2b41f14:    * NewRowComparatorForNormalDims Constructor
1:496cde4:    *
1:9f94529:    * @param numberOfSortColumns
1:496cde4:    */
1:9f94529:   public NewRowComparatorForNormalDims(int numberOfSortColumns) {
1:9f94529:     this.numberOfSortColumns = numberOfSortColumns;
1:496cde4:   }
1:496cde4: 
1:496cde4:   /**
1:496cde4:    * Below method will be used to compare two surrogate keys
1:496cde4:    *
1:496cde4:    * @see Comparator#compare(Object, Object)
1:496cde4:    */
1:496cde4:   public int compare(Object[] rowA, Object[] rowB) {
1:496cde4:     int diff = 0;
1:8d8b589: 
1:9f94529:     for (int i = 0; i < numberOfSortColumns; i++) {
1:496cde4:       int dimFieldA = (int)rowA[i];
1:496cde4:       int dimFieldB = (int)rowB[i];
1:496cde4:       diff = dimFieldA - dimFieldB;
1:496cde4:       if (diff != 0) {
1:496cde4:         return diff;
1:496cde4:       }
1:496cde4:     }
1:496cde4:     return diff;
1:496cde4:   }
1:496cde4: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:31011fc
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: public class NewRowComparatorForNormalDims implements Comparator<Object[]>, Serializable {
1:   private static final long serialVersionUID = -1749874611112709432L;
1: 
commit:2b41f14
/////////////////////////////////////////////////////////////////////////
1:    * NewRowComparatorForNormalDims Constructor
/////////////////////////////////////////////////////////////////////////
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
0:    * RowComparatorForNormalDims Constructor
/////////////////////////////////////////////////////////////////////////
1: 
commit:21704cf
/////////////////////////////////////////////////////////////////////////
0:    * NewRowComparatorForNormalDims Constructor
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.sort.sortdata;
author:QiangCai
-------------------------------------------------------------------------------
commit:9f94529
/////////////////////////////////////////////////////////////////////////
1:   private int numberOfSortColumns;
1:    * @param numberOfSortColumns
1:   public NewRowComparatorForNormalDims(int numberOfSortColumns) {
1:     this.numberOfSortColumns = numberOfSortColumns;
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < numberOfSortColumns; i++) {
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.sortandgroupby.sortdata;
1: 
1: import java.util.Comparator;
1: 
1: /**
1:  * This class is used as comparator for comparing dims which are non high cardinality dims.
1:  * Here the dims will be in form of int[] (surrogates) so directly comparing the integers.
1:  */
0: public class NewRowComparatorForNormalDims implements Comparator<Object[]> {
1:   /**
1:    * dimension count
1:    */
0:   private int dimensionCount;
1: 
1:   /**
0:    * RowComparatorForNormalDims Constructor
1:    *
0:    * @param dimensionCount
1:    */
0:   public NewRowComparatorForNormalDims(int dimensionCount) {
0:     this.dimensionCount = dimensionCount;
1:   }
1: 
1:   /**
1:    * Below method will be used to compare two surrogate keys
1:    *
1:    * @see Comparator#compare(Object, Object)
1:    */
1:   public int compare(Object[] rowA, Object[] rowB) {
1:     int diff = 0;
1: 
0:     for (int i = 0; i < dimensionCount; i++) {
1: 
1:       int dimFieldA = (int)rowA[i];
1:       int dimFieldB = (int)rowB[i];
1:       diff = dimFieldA - dimFieldB;
1:       if (diff != 0) {
1:         return diff;
1:       }
1:     }
1:     return diff;
1:   }
1: }
============================================================================