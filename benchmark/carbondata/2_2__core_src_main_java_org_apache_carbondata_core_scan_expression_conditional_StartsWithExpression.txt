1:56330ae: /*
1:56330ae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:56330ae:  * contributor license agreements.  See the NOTICE file distributed with
1:56330ae:  * this work for additional information regarding copyright ownership.
1:56330ae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:56330ae:  * (the "License"); you may not use this file except in compliance with
1:56330ae:  * the License.  You may obtain a copy of the License at
1:56330ae:  *
1:56330ae:  *    http://www.apache.org/licenses/LICENSE-2.0
1:56330ae:  *
1:56330ae:  * Unless required by applicable law or agreed to in writing, software
1:56330ae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:56330ae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:56330ae:  * See the License for the specific language governing permissions and
1:56330ae:  * limitations under the License.
1:56330ae:  */
1:56330ae: 
1:56330ae: package org.apache.carbondata.core.scan.expression.conditional;
1:56330ae: 
1:56330ae: import org.apache.carbondata.core.metadata.datatype.DataType;
1:56330ae: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:56330ae: import org.apache.carbondata.core.scan.expression.Expression;
1:56330ae: import org.apache.carbondata.core.scan.expression.ExpressionResult;
1:56330ae: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1:56330ae: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1:56330ae: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1:56330ae: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1:56330ae: 
1:56330ae: public class StartsWithExpression extends BinaryConditionalExpression {
1:56330ae:   private static final long serialVersionUID = -5319109756575539219L;
1:56330ae: 
1:56330ae:   public StartsWithExpression(Expression left, Expression right) {
1:56330ae:     super(left, right);
1:56330ae:   }
1:56330ae: 
1:d5bec4d:   @Override
1:d5bec4d:   public ExpressionResult evaluate(RowIntf value)
1:56330ae:       throws FilterUnsupportedException, FilterIllegalMemberException {
1:56330ae:     ExpressionResult exprLeftRes = left.evaluate(value);
1:56330ae:     ExpressionResult exprRightRes = right.evaluate(value);
1:56330ae:     ExpressionResult val1 = exprLeftRes;
1:56330ae:     if (exprLeftRes.isNull() || exprRightRes.isNull()) {
1:56330ae:       exprLeftRes.set(DataTypes.BOOLEAN, false);
1:56330ae:       return exprLeftRes;
1:56330ae:     }
1:56330ae:     if (exprLeftRes.getDataType() != exprRightRes.getDataType()) {
1:56330ae:       if (exprLeftRes.getDataType().getPrecedenceOrder() < exprRightRes.getDataType()
1:56330ae:           .getPrecedenceOrder()) {
1:56330ae:         val1 = exprRightRes;
1:56330ae:       }
1:56330ae: 
1:56330ae:     }
1:56330ae:     boolean result = false;
1:56330ae:     DataType dataType = val1.getDataType();
1:56330ae:     if (dataType == DataTypes.STRING) {
1:56330ae:       result = exprLeftRes.getString().startsWith(exprRightRes.getString());
1:56330ae:     } else {
1:56330ae:       throw new FilterUnsupportedException(
1:56330ae:           "DataType: " + val1.getDataType() + " not supported for the filter expression");
1:56330ae:     }
1:56330ae:     val1.set(DataTypes.BOOLEAN, result);
1:56330ae:     return val1;
1:56330ae:   }
1:56330ae: 
1:d5bec4d:   @Override
1:d5bec4d:   public ExpressionType getFilterExpressionType() {
1:56330ae:     return ExpressionType.STARTSWITH;
1:56330ae:   }
1:56330ae: 
1:d5bec4d:   @Override
1:d5bec4d:   public String getString() {
1:56330ae:     return "StartsWith(" + left.getString() + ',' + right.getString() + ')';
1:56330ae:   }
1:56330ae: 
1:d5bec4d:   @Override
1:d5bec4d:   public String getStatement() {
1:d5bec4d:     return left.getStatement() + " like '" + right.getStatement() + "%'";
1:d5bec4d:   }
1:56330ae: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:d5bec4d
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public ExpressionResult evaluate(RowIntf value)
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public ExpressionType getFilterExpressionType() {
1:   @Override
1:   public String getString() {
1:   @Override
1:   public String getStatement() {
1:     return left.getStatement() + " like '" + right.getStatement() + "%'";
1:   }
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:56330ae
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.expression.conditional;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.scan.expression.Expression;
1: import org.apache.carbondata.core.scan.expression.ExpressionResult;
1: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1: 
1: public class StartsWithExpression extends BinaryConditionalExpression {
1:   private static final long serialVersionUID = -5319109756575539219L;
1: 
1:   public StartsWithExpression(Expression left, Expression right) {
1:     super(left, right);
1:   }
1: 
0:   @Override public ExpressionResult evaluate(RowIntf value)
1:       throws FilterUnsupportedException, FilterIllegalMemberException {
1:     ExpressionResult exprLeftRes = left.evaluate(value);
1:     ExpressionResult exprRightRes = right.evaluate(value);
1:     ExpressionResult val1 = exprLeftRes;
1:     if (exprLeftRes.isNull() || exprRightRes.isNull()) {
1:       exprLeftRes.set(DataTypes.BOOLEAN, false);
1:       return exprLeftRes;
1:     }
1:     if (exprLeftRes.getDataType() != exprRightRes.getDataType()) {
1:       if (exprLeftRes.getDataType().getPrecedenceOrder() < exprRightRes.getDataType()
1:           .getPrecedenceOrder()) {
1:         val1 = exprRightRes;
1:       }
1: 
1:     }
1:     boolean result = false;
1:     DataType dataType = val1.getDataType();
1:     if (dataType == DataTypes.STRING) {
1:       result = exprLeftRes.getString().startsWith(exprRightRes.getString());
1:     } else {
1:       throw new FilterUnsupportedException(
1:           "DataType: " + val1.getDataType() + " not supported for the filter expression");
1:     }
1:     val1.set(DataTypes.BOOLEAN, result);
1:     return val1;
1:   }
1: 
0:   @Override public ExpressionType getFilterExpressionType() {
1:     return ExpressionType.STARTSWITH;
1:   }
1: 
0:   @Override public String getString() {
1:     return "StartsWith(" + left.getString() + ',' + right.getString() + ')';
1:   }
1: 
1: }
============================================================================