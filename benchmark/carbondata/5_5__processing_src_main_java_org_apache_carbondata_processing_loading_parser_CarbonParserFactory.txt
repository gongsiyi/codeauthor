1:f63b1ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:f63b1ff:  *
1:f63b1ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f63b1ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:f63b1ff:  */
1:349c59c: package org.apache.carbondata.processing.loading.parser;
1:f63b1ff: 
1:f63b1ff: import java.util.List;
1:f63b1ff: 
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:349c59c: import org.apache.carbondata.processing.loading.parser.impl.ArrayParserImpl;
1:349c59c: import org.apache.carbondata.processing.loading.parser.impl.PrimitiveParserImpl;
1:349c59c: import org.apache.carbondata.processing.loading.parser.impl.StructParserImpl;
1:f63b1ff: 
1:f63b1ff: public final class CarbonParserFactory {
1:f63b1ff: 
1:f63b1ff:   /**
1:f63b1ff:    * Create parser for the carbon column.
1:496cde4:    *
1:f63b1ff:    * @param carbonColumn
1:f63b1ff:    * @param complexDelimiters
1:f63b1ff:    * @return
1:f63b1ff:    */
1:496cde4:   public static GenericParser createParser(CarbonColumn carbonColumn, String[] complexDelimiters,
1:496cde4:       String nullFormat) {
1:496cde4:     return createParser(carbonColumn, complexDelimiters, nullFormat, 0);
3:f63b1ff:   }
1:f63b1ff: 
1:f63b1ff:   /**
1:f63b1ff:    * This method may be called recursively if the carbon column is complex type.
1:496cde4:    *
1:f63b1ff:    * @param carbonColumn
1:f63b1ff:    * @param complexDelimiters, these delimiters which are used to separate the complex data types.
1:496cde4:    * @param depth              It is like depth of tree, if column has children then depth is 1,
1:496cde4:    *                           And depth becomes 2 if children has children.
1:496cde4:    *                           This depth is used select the complex
1:496cde4:    *                           delimiters
1:f63b1ff:    * @return GenericParser
1:f63b1ff:    */
1:f63b1ff:   private static GenericParser createParser(CarbonColumn carbonColumn, String[] complexDelimiters,
1:496cde4:       String nullFormat, int depth) {
1:956833e:     DataType dataType = carbonColumn.getDataType();
1:fb6dffe:     if (DataTypes.isArrayType(dataType) || DataTypes.isMapType(dataType)) {
1:956833e:       List<CarbonDimension> listOfChildDimensions =
1:956833e:           ((CarbonDimension) carbonColumn).getListOfChildDimensions();
1:956833e:       // Create array parser with complex delimiter
1:956833e:       ArrayParserImpl arrayParser = new ArrayParserImpl(complexDelimiters[depth], nullFormat);
1:956833e:       for (CarbonDimension dimension : listOfChildDimensions) {
1:956833e:         arrayParser.addChildren(createParser(dimension, complexDelimiters, nullFormat, depth + 1));
1:956833e:       }
1:956833e:       return arrayParser;
1:933e30c:     } else if (DataTypes.isStructType(dataType)) {
1:956833e:       List<CarbonDimension> dimensions =
1:956833e:           ((CarbonDimension) carbonColumn).getListOfChildDimensions();
1:956833e:       // Create struct parser with complex delimiter
1:956833e:       StructParserImpl parser = new StructParserImpl(complexDelimiters[depth], nullFormat);
1:956833e:       for (CarbonDimension dimension : dimensions) {
1:956833e:         parser.addChildren(createParser(dimension, complexDelimiters, nullFormat, depth + 1));
1:956833e:       }
1:956833e:       return parser;
1:956833e:     } else {
1:956833e:       return new PrimitiveParserImpl();
1:f63b1ff:     }
1:f63b1ff:   }
1:f63b1ff: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:fb6dffe
/////////////////////////////////////////////////////////////////////////
1:     if (DataTypes.isArrayType(dataType) || DataTypes.isMapType(dataType)) {
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:933e30c
/////////////////////////////////////////////////////////////////////////
0:     if (DataTypes.isArrayType(dataType)) {
/////////////////////////////////////////////////////////////////////////
1:     } else if (DataTypes.isStructType(dataType)) {
/////////////////////////////////////////////////////////////////////////
0:     } else if (DataTypes.isMapType(dataType)) {
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     DataType dataType = carbonColumn.getDataType();
0:     if (dataType == DataTypes.ARRAY) {
1:       List<CarbonDimension> listOfChildDimensions =
1:           ((CarbonDimension) carbonColumn).getListOfChildDimensions();
1:       // Create array parser with complex delimiter
1:       ArrayParserImpl arrayParser = new ArrayParserImpl(complexDelimiters[depth], nullFormat);
1:       for (CarbonDimension dimension : listOfChildDimensions) {
1:         arrayParser.addChildren(createParser(dimension, complexDelimiters, nullFormat, depth + 1));
1:       }
1:       return arrayParser;
0:     } else if (dataType == DataTypes.STRUCT) {
1:       List<CarbonDimension> dimensions =
1:           ((CarbonDimension) carbonColumn).getListOfChildDimensions();
1:       // Create struct parser with complex delimiter
1:       StructParserImpl parser = new StructParserImpl(complexDelimiters[depth], nullFormat);
1:       for (CarbonDimension dimension : dimensions) {
1:         parser.addChildren(createParser(dimension, complexDelimiters, nullFormat, depth + 1));
1:       }
1:       return parser;
0:     } else if (dataType == DataTypes.MAP) {
0:       throw new UnsupportedOperationException("Complex type Map is not supported yet");
1:     } else {
1:       return new PrimitiveParserImpl();
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.parser;
1: import org.apache.carbondata.processing.loading.parser.impl.ArrayParserImpl;
1: import org.apache.carbondata.processing.loading.parser.impl.PrimitiveParserImpl;
1: import org.apache.carbondata.processing.loading.parser.impl.StructParserImpl;
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
author:ravipesala
-------------------------------------------------------------------------------
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1:    *
1:   public static GenericParser createParser(CarbonColumn carbonColumn, String[] complexDelimiters,
1:       String nullFormat) {
1:     return createParser(carbonColumn, complexDelimiters, nullFormat, 0);
1:    *
1:    * @param depth              It is like depth of tree, if column has children then depth is 1,
1:    *                           And depth becomes 2 if children has children.
1:    *                           This depth is used select the complex
1:    *                           delimiters
1:       String nullFormat, int depth) {
0:         ArrayParserImpl arrayParser = new ArrayParserImpl(complexDelimiters[depth], nullFormat);
0:           arrayParser
0:               .addChildren(createParser(dimension, complexDelimiters, nullFormat, depth + 1));
0:         StructParserImpl parser = new StructParserImpl(complexDelimiters[depth], nullFormat);
0:           parser.addChildren(createParser(dimension, complexDelimiters, nullFormat, depth + 1));
commit:f63b1ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.parser;
1: 
1: import java.util.List;
1: 
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonColumn;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonDimension;
0: import org.apache.carbondata.processing.newflow.parser.impl.ArrayParserImpl;
0: import org.apache.carbondata.processing.newflow.parser.impl.PrimitiveParserImpl;
0: import org.apache.carbondata.processing.newflow.parser.impl.StructParserImpl;
1: 
1: public final class CarbonParserFactory {
1: 
1:   /**
1:    * Create parser for the carbon column.
1:    * @param carbonColumn
1:    * @param complexDelimiters
1:    * @return
1:    */
0:   public static GenericParser createParser(CarbonColumn carbonColumn, String[] complexDelimiters) {
0:     return createParser(carbonColumn, complexDelimiters, 0);
1:   }
1: 
1:   /**
1:    * This method may be called recursively if the carbon column is complex type.
1:    * @param carbonColumn
1:    * @param complexDelimiters, these delimiters which are used to separate the complex data types.
0:    * @param depth It is like depth of tree, if column has children then depth is 1, And depth
0:    *              becomes 2 if children has children. This depth is used select the complex
0:    *              delimiters
1:    * @return GenericParser
1:    */
1:   private static GenericParser createParser(CarbonColumn carbonColumn, String[] complexDelimiters,
0:       int depth) {
0:     switch (carbonColumn.getDataType()) {
0:       case ARRAY:
0:         List<CarbonDimension> listOfChildDimensions =
0:             ((CarbonDimension) carbonColumn).getListOfChildDimensions();
0:         // Create array parser with complex delimiter
0:         ArrayParserImpl arrayParser = new ArrayParserImpl(complexDelimiters[depth]);
0:         for (CarbonDimension dimension : listOfChildDimensions) {
0:           arrayParser.addChildren(createParser(dimension, complexDelimiters, depth + 1));
1:         }
0:         return arrayParser;
0:       case STRUCT:
0:         List<CarbonDimension> dimensions =
0:             ((CarbonDimension) carbonColumn).getListOfChildDimensions();
0:         // Create struct parser with complex delimiter
0:         StructParserImpl parser = new StructParserImpl(complexDelimiters[depth]);
0:         for (CarbonDimension dimension : dimensions) {
0:           parser.addChildren(createParser(dimension, complexDelimiters, depth + 1));
1:         }
0:         return parser;
0:       case MAP:
0:         throw new UnsupportedOperationException("Complex type Map is not supported yet");
0:       default:
0:         return new PrimitiveParserImpl();
1:     }
1:   }
1: }
============================================================================