1:5ef67ac: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:5ef67ac:  *
1:5ef67ac:  *    http://www.apache.org/licenses/LICENSE-2.0
1:5ef67ac:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:5ef67ac:  */
2:5ef67ac: 
1:5ef67ac: package org.apache.carbondata.core.keygenerator.mdkey;
1:5ef67ac: 
1:5ef67ac: import static org.hamcrest.CoreMatchers.equalTo;
1:5ef67ac: import static org.hamcrest.MatcherAssert.assertThat;
1:5ef67ac: import static org.hamcrest.core.Is.is;
1:5ef67ac: 
1:8d9babe: import org.junit.Test;
1:8d9babe: 
1:5ef67ac: public class NumberCompressorUnitTest {
1:5ef67ac: 
1:5ef67ac:   private NumberCompressor numberCompressor;
1:5ef67ac: 
1:5ef67ac:   @Test public void testCompress() throws Exception {
1:5ef67ac:     int cardinality = 10;
1:5ef67ac:     numberCompressor = new NumberCompressor(cardinality);
1:5ef67ac:     byte[] expected_result = new byte[] { 2, 86, 115 };
1:5ef67ac:     int[] keys = new int[] { 2, 5, 6, 7, 3 };
1:5ef67ac:     byte[] result = numberCompressor.compress(keys);
1:5ef67ac:     assertThat(result, is(equalTo(expected_result)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetWithIntKeysAndSameIndexes() throws Exception {
1:5ef67ac:     int cardinality = 10;
1:5ef67ac:     numberCompressor = new NumberCompressor(cardinality);
1:5ef67ac:     long[] expected_result = new long[] { 153203, 0 };
1:5ef67ac:     int[] keys = new int[] { 2, 5, 6, 7, 3 };
1:5ef67ac:     int size = 2;
1:5ef67ac:     long[] result = numberCompressor.get(keys, size);
1:5ef67ac:     assertThat(result, is(equalTo(expected_result)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetWithIntKeysAndDifferentIndexes() throws Exception {
1:5ef67ac:     int cardinality = 10;
1:5ef67ac:     numberCompressor = new NumberCompressor(cardinality);
1:5ef67ac:     long[] expected_result = new long[] { 2695178248884938548L, 0 };
1:5ef67ac:     int[] keys = new int[] { 2, 5, 6, 7, 3, 2, 5, 6, 7, 3, 2, 5, 6, 7, 3, 4 };
1:5ef67ac:     int size = 2;
1:5ef67ac:     long[] result = numberCompressor.get(keys, size);
1:5ef67ac:     assertThat(result, is(equalTo(expected_result)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetWithIntKeysAndDifferentIndexesAndConsideredBitsLessThanBitsLength()
1:5ef67ac:       throws Exception {
1:5ef67ac:     int cardinality = 1000;
1:5ef67ac:     numberCompressor = new NumberCompressor(cardinality);
1:5ef67ac:     long[] expected_result = new long[] { 2311479113337014277L, 0 };
1:5ef67ac:     int[] keys = new int[] { 2, 5, 6, 7, 3, 2, 5 };
1:5ef67ac:     int size = 2;
1:5ef67ac:     long[] result = numberCompressor.get(keys, size);
1:5ef67ac:     assertThat(result, is(equalTo(expected_result)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testUnCompress() throws Exception {
1:5ef67ac:     int cardinality = 10;
1:5ef67ac:     numberCompressor = new NumberCompressor(cardinality);
1:5ef67ac:     int[] expected_result = new int[] { 6, 4, 0, 2 };
1:5ef67ac:     byte[] keys = new byte[] { 100, 2 };
1:8d9babe:     int[] result = numberCompressor.unCompress(keys, 0, keys.length);
1:5ef67ac:     assertThat(result, is(equalTo(expected_result)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testUnCompressWithTenKeys() throws Exception {
1:5ef67ac:     int cardinality = 10;
1:5ef67ac:     numberCompressor = new NumberCompressor(cardinality);
1:5ef67ac:     int[] expected_result =
1:5ef67ac:         new int[] { 0, 10, 0, 2, 0, 10, 0, 2, 0, 10, 0, 2, 0, 10, 0, 2, 0, 10, 0, 2 };
1:5ef67ac:     byte[] keys = new byte[] { 10, 2, 10, 2, 10, 2, 10, 2, 10, 2 };
1:8d9babe:     int[] result = numberCompressor.unCompress(keys, 0, keys.length);
1:5ef67ac:     System.out.println(result);
1:5ef67ac:     assertThat(result, is(equalTo(expected_result)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testUnCompressWithPOSGreaterThanZero() throws Exception {
1:5ef67ac:     int cardinality = 100;
1:5ef67ac:     numberCompressor = new NumberCompressor(cardinality);
1:5ef67ac:     int[] expected_result = new int[] { 16, 4, 10, 1, 2, 64, 32, 80, 8, 20, 11 };
1:5ef67ac:     byte[] keys = new byte[] { 100, 2, 10, 2, 10, 2, 10, 2, 10, 11 };
1:8d9babe:     int[] result = numberCompressor.unCompress(keys, 0, keys.length);
1:5ef67ac:     assertThat(result, is(equalTo(expected_result)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testCompressWithWordsSizeFromBytesSize() throws Exception {
1:5ef67ac:     int cardinality = 10;
1:5ef67ac:     numberCompressor = new NumberCompressor(cardinality);
1:5ef67ac:     byte[] expected_result = new byte[] { 2, 86, 115, 37, 103, 50, 86, 115, 86 };
1:5ef67ac:     int[] keys = new int[] { 2, 5, 6, 7, 3, 2, 5, 6, 7, 3, 2, 5, 6, 7, 3, 5, 6 };
1:5ef67ac:     byte[] result = numberCompressor.compress(keys);
1:5ef67ac:     assertThat(result, is(equalTo(expected_result)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testCompressWithIntMaxValue() throws Exception {
1:5ef67ac:     int cardinality = 10;
1:5ef67ac:     numberCompressor = new NumberCompressor(cardinality);
1:5ef67ac:     byte[] expected_result = new byte[] { -35, -52, -52 };
1:5ef67ac:     int[] keys = new int[] { 214748364, 5456, 214748364, 214748364, 214748364 };
1:5ef67ac:     byte[] result = numberCompressor.compress(keys);
1:5ef67ac:     assertThat(result, is(equalTo(expected_result)));
1:5ef67ac:   }
1:5ef67ac: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:kumarvishal
-------------------------------------------------------------------------------
commit:8d9babe
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: 
/////////////////////////////////////////////////////////////////////////
1:     int[] result = numberCompressor.unCompress(keys, 0, keys.length);
/////////////////////////////////////////////////////////////////////////
1:     int[] result = numberCompressor.unCompress(keys, 0, keys.length);
/////////////////////////////////////////////////////////////////////////
1:     int[] result = numberCompressor.unCompress(keys, 0, keys.length);
author:Anurag
-------------------------------------------------------------------------------
commit:5ef67ac
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.keygenerator.mdkey;
1: 
0: import org.junit.Test;
1: 
0: import static junit.framework.Assert.assertEquals;
1: import static org.hamcrest.CoreMatchers.equalTo;
1: import static org.hamcrest.MatcherAssert.assertThat;
1: import static org.hamcrest.core.Is.is;
1: 
1: public class NumberCompressorUnitTest {
1: 
1:   private NumberCompressor numberCompressor;
1: 
1:   @Test public void testCompress() throws Exception {
1:     int cardinality = 10;
1:     numberCompressor = new NumberCompressor(cardinality);
1:     byte[] expected_result = new byte[] { 2, 86, 115 };
1:     int[] keys = new int[] { 2, 5, 6, 7, 3 };
1:     byte[] result = numberCompressor.compress(keys);
1:     assertThat(result, is(equalTo(expected_result)));
1:   }
1: 
1:   @Test public void testGetWithIntKeysAndSameIndexes() throws Exception {
1:     int cardinality = 10;
1:     numberCompressor = new NumberCompressor(cardinality);
1:     long[] expected_result = new long[] { 153203, 0 };
1:     int[] keys = new int[] { 2, 5, 6, 7, 3 };
1:     int size = 2;
1:     long[] result = numberCompressor.get(keys, size);
1:     assertThat(result, is(equalTo(expected_result)));
1:   }
1: 
1:   @Test public void testGetWithIntKeysAndDifferentIndexes() throws Exception {
1:     int cardinality = 10;
1:     numberCompressor = new NumberCompressor(cardinality);
1:     long[] expected_result = new long[] { 2695178248884938548L, 0 };
1:     int[] keys = new int[] { 2, 5, 6, 7, 3, 2, 5, 6, 7, 3, 2, 5, 6, 7, 3, 4 };
1:     int size = 2;
1:     long[] result = numberCompressor.get(keys, size);
1:     assertThat(result, is(equalTo(expected_result)));
1:   }
1: 
1:   @Test public void testGetWithIntKeysAndDifferentIndexesAndConsideredBitsLessThanBitsLength()
1:       throws Exception {
1:     int cardinality = 1000;
1:     numberCompressor = new NumberCompressor(cardinality);
1:     long[] expected_result = new long[] { 2311479113337014277L, 0 };
1:     int[] keys = new int[] { 2, 5, 6, 7, 3, 2, 5 };
1:     int size = 2;
1:     long[] result = numberCompressor.get(keys, size);
1:     assertThat(result, is(equalTo(expected_result)));
1:   }
1: 
1:   @Test public void testUnCompress() throws Exception {
1:     int cardinality = 10;
1:     numberCompressor = new NumberCompressor(cardinality);
1:     int[] expected_result = new int[] { 6, 4, 0, 2 };
1:     byte[] keys = new byte[] { 100, 2 };
0:     int[] result = numberCompressor.unCompress(keys);
1:     assertThat(result, is(equalTo(expected_result)));
1:   }
1: 
1:   @Test public void testUnCompressWithTenKeys() throws Exception {
1:     int cardinality = 10;
1:     numberCompressor = new NumberCompressor(cardinality);
1:     int[] expected_result =
1:         new int[] { 0, 10, 0, 2, 0, 10, 0, 2, 0, 10, 0, 2, 0, 10, 0, 2, 0, 10, 0, 2 };
1:     byte[] keys = new byte[] { 10, 2, 10, 2, 10, 2, 10, 2, 10, 2 };
0:     int[] result = numberCompressor.unCompress(keys);
1:     System.out.println(result);
1:     assertThat(result, is(equalTo(expected_result)));
1:   }
1: 
1:   @Test public void testUnCompressWithPOSGreaterThanZero() throws Exception {
1:     int cardinality = 100;
1:     numberCompressor = new NumberCompressor(cardinality);
1:     int[] expected_result = new int[] { 16, 4, 10, 1, 2, 64, 32, 80, 8, 20, 11 };
1:     byte[] keys = new byte[] { 100, 2, 10, 2, 10, 2, 10, 2, 10, 11 };
0:     int[] result = numberCompressor.unCompress(keys);
1:     assertThat(result, is(equalTo(expected_result)));
1:   }
1: 
1:   @Test public void testCompressWithWordsSizeFromBytesSize() throws Exception {
1:     int cardinality = 10;
1:     numberCompressor = new NumberCompressor(cardinality);
1:     byte[] expected_result = new byte[] { 2, 86, 115, 37, 103, 50, 86, 115, 86 };
1:     int[] keys = new int[] { 2, 5, 6, 7, 3, 2, 5, 6, 7, 3, 2, 5, 6, 7, 3, 5, 6 };
1:     byte[] result = numberCompressor.compress(keys);
1:     assertThat(result, is(equalTo(expected_result)));
1:   }
1: 
1:   @Test public void testCompressWithIntMaxValue() throws Exception {
1:     int cardinality = 10;
1:     numberCompressor = new NumberCompressor(cardinality);
1:     byte[] expected_result = new byte[] { -35, -52, -52 };
1:     int[] keys = new int[] { 214748364, 5456, 214748364, 214748364, 214748364 };
1:     byte[] result = numberCompressor.compress(keys);
1:     assertThat(result, is(equalTo(expected_result)));
1:   }
1: }
============================================================================