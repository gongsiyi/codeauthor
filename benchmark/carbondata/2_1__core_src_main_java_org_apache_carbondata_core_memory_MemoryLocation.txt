1:f1f9348: /*
1:f1f9348:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f1f9348:  * contributor license agreements.  See the NOTICE file distributed with
1:f1f9348:  * this work for additional information regarding copyright ownership.
1:f1f9348:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f1f9348:  * (the "License"); you may not use this file except in compliance with
1:f1f9348:  * the License.  You may obtain a copy of the License at
1:f1f9348:  *
1:f1f9348:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f1f9348:  *
1:f1f9348:  * Unless required by applicable law or agreed to in writing, software
1:f1f9348:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f1f9348:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f1f9348:  * See the License for the specific language governing permissions and
1:f1f9348:  * limitations under the License.
1:f1f9348:  */
3:f1f9348: 
1:f1f9348: package org.apache.carbondata.core.memory;
1:f1f9348: 
1:f1f9348: import javax.annotation.Nullable;
1:f1f9348: 
1:f1f9348: /**
1:f1f9348:  * Code ported from Apache Spark {org.apache.spark.unsafe.memory} package
1:f1f9348:  * A memory location. Tracked either by a memory address (with off-heap allocation),
1:f1f9348:  * or by an offset from a JVM object (in-heap allocation).
1:f1f9348:  */
1:f1f9348: public class MemoryLocation {
1:f1f9348: 
1:f1f9348:   @Nullable
1:f1f9348:   Object obj;
1:f1f9348: 
1:f1f9348:   long offset;
1:f1f9348: 
1:f1f9348:   public MemoryLocation(@Nullable Object obj, long offset) {
1:f1f9348:     this.obj = obj;
1:f1f9348:     this.offset = offset;
3:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public final Object getBaseObject() {
1:f1f9348:     return obj;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public final long getBaseOffset() {
1:f1f9348:     return offset;
1:f1f9348:   }
1:f1f9348: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.memory;
1: 
1: import javax.annotation.Nullable;
1: 
1: /**
1:  * Code ported from Apache Spark {org.apache.spark.unsafe.memory} package
1:  * A memory location. Tracked either by a memory address (with off-heap allocation),
1:  * or by an offset from a JVM object (in-heap allocation).
1:  */
1: public class MemoryLocation {
1: 
1:   @Nullable
1:   Object obj;
1: 
1:   long offset;
1: 
1:   public MemoryLocation(@Nullable Object obj, long offset) {
1:     this.obj = obj;
1:     this.offset = offset;
1:   }
1: 
0:   public MemoryLocation() {
0:     this(null, 0);
1:   }
1: 
0:   public void setObjAndOffset(Object newObj, long newOffset) {
0:     this.obj = newObj;
0:     this.offset = newOffset;
1:   }
1: 
1:   public final Object getBaseObject() {
1:     return obj;
1:   }
1: 
1:   public final long getBaseOffset() {
1:     return offset;
1:   }
1: }
============================================================================