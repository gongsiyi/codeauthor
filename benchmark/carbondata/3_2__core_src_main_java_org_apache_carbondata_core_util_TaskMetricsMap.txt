1:e3f98fa: /*
1:e3f98fa:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e3f98fa:  * contributor license agreements.  See the NOTICE file distributed with
1:e3f98fa:  * this work for additional information regarding copyright ownership.
1:e3f98fa:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e3f98fa:  * (the "License"); you may not use this file except in compliance with
1:e3f98fa:  * the License.  You may obtain a copy of the License at
1:e3f98fa:  *
1:e3f98fa:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e3f98fa:  *
1:e3f98fa:  * Unless required by applicable law or agreed to in writing, software
1:e3f98fa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e3f98fa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e3f98fa:  * See the License for the specific language governing permissions and
1:e3f98fa:  * limitations under the License.
1:e3f98fa:  */
2:e3f98fa: 
1:e3f98fa: package org.apache.carbondata.core.util;
1:e3f98fa: 
1:e3f98fa: import java.lang.reflect.Method;
1:e3f98fa: import java.util.List;
1:e3f98fa: import java.util.Map;
1:e3f98fa: import java.util.concurrent.ConcurrentHashMap;
1:e3f98fa: import java.util.concurrent.CopyOnWriteArrayList;
1:e3f98fa: 
1:e3f98fa: import org.apache.carbondata.common.logging.LogService;
1:e3f98fa: import org.apache.carbondata.common.logging.LogServiceFactory;
1:e3f98fa: 
1:e3f98fa: import org.apache.hadoop.fs.FileSystem;
1:e3f98fa: 
1:e3f98fa: /**
1:e3f98fa:  * This class maintains task level metrics info for all spawned child threads and parent task thread
1:e3f98fa:  */
1:e3f98fa: public class TaskMetricsMap {
1:e3f98fa: 
1:e3f98fa:   private static final LogService LOGGER =
1:e3f98fa:       LogServiceFactory.getLogService(TaskMetricsMap.class.getName());
1:e3f98fa: 
1:e3f98fa:   public static final InheritableThreadLocal<Long> threadLocal = new InheritableThreadLocal<>();
1:e3f98fa:   /**
1:e3f98fa:    * In this map we are maintaining all spawned child threads callback info for each parent thread
1:e3f98fa:    * here key = parent thread id & values =  list of spawned child threads callbacks
1:e3f98fa:    */
1:bb0b347:   public static final Map<Long, List<CarbonFSBytesReadOnThreadCallback>> metricMap =
1:e3f98fa:       new ConcurrentHashMap<>();
1:e3f98fa: 
1:bb0b347:   public static final TaskMetricsMap taskMetricsMap = new TaskMetricsMap();
1:e3f98fa: 
1:e3f98fa:   public static TaskMetricsMap getInstance() {
1:e3f98fa:     return taskMetricsMap;
2:e3f98fa:   }
1:e3f98fa: 
1:e3f98fa:   /**
1:e3f98fa:    * registers current thread callback using parent thread id
1:e3f98fa:    *
1:e3f98fa:    * @return
1:e3f98fa:    */
1:e3f98fa:   public void registerThreadCallback() {
1:e3f98fa:     // parent thread id should not be null as we are setting the same for all RDDs
1:e3f98fa:     if (null != threadLocal.get()) {
1:e3f98fa:       long parentThreadId = threadLocal.get();
1:e3f98fa:       new CarbonFSBytesReadOnThreadCallback(parentThreadId);
1:e3f98fa:     }
1:e3f98fa:   }
1:e3f98fa: 
1:e3f98fa:   /**
1:e3f98fa:    * removes parent thread entry from map.
1:e3f98fa:    *
1:e3f98fa:    * @param threadId
1:e3f98fa:    */
1:e3f98fa:   public void removeEntry(long threadId) {
1:e3f98fa:     metricMap.remove(threadId);
1:e3f98fa:   }
1:e3f98fa: 
1:e3f98fa:   /**
1:e3f98fa:    * returns all spawned child threads callback list of given parent thread
1:e3f98fa:    *
1:e3f98fa:    * @param threadId
1:e3f98fa:    * @return
1:e3f98fa:    */
1:e3f98fa:   public List<CarbonFSBytesReadOnThreadCallback> getCallbackList(long threadId) {
1:e3f98fa:     return metricMap.get(threadId);
1:e3f98fa:   }
1:e3f98fa: 
1:e3f98fa:   public boolean isCallbackEmpty(long threadId) {
1:e3f98fa:     List<CarbonFSBytesReadOnThreadCallback> callbackList = getCallbackList(threadId);
1:e3f98fa:     if (null == callbackList) {
1:e3f98fa:       return true;
1:e3f98fa:     }
1:e3f98fa:     return callbackList.isEmpty();
1:e3f98fa:   }
1:e3f98fa: 
1:e3f98fa:   /**
1:e3f98fa:    * This function updates read bytes of given thread
1:e3f98fa:    * After completing the task, each spawned child thread should update current read bytes,
1:e3f98fa:    * by calling this function.
1:e3f98fa:    *
1:e3f98fa:    * @param callbackThreadId
1:e3f98fa:    */
1:e3f98fa:   public void updateReadBytes(long callbackThreadId) {
1:e3f98fa:     // parent thread id should not be null as we are setting the same for all RDDs
1:e3f98fa:     if (null != threadLocal.get()) {
1:e3f98fa:       long parentThreadId = threadLocal.get();
1:e3f98fa:       List<CarbonFSBytesReadOnThreadCallback> callbackList = getCallbackList(parentThreadId);
1:e3f98fa:       if (null != callbackList) {
1:e3f98fa:         for (CarbonFSBytesReadOnThreadCallback callback : callbackList) {
1:e3f98fa:           if (callback.threadId == callbackThreadId) {
1:e3f98fa:             callback.updatedReadBytes += callback.readbytes();
1:e3f98fa:             break;
1:e3f98fa:           }
1:e3f98fa:         }
1:e3f98fa:       }
1:e3f98fa:     }
1:e3f98fa:   }
1:e3f98fa: 
1:e3f98fa:   /**
1:e3f98fa:    * returns total task read bytes, by summing all parent & spawned threads readbytes
1:e3f98fa:    *
1:e3f98fa:    * @param threadName
1:e3f98fa:    * @return
1:e3f98fa:    */
1:e3f98fa:   public long getReadBytesSum(long threadName) {
1:e3f98fa:     List<CarbonFSBytesReadOnThreadCallback> callbacks = getCallbackList(threadName);
1:e3f98fa:     long sum = 0;
1:e3f98fa:     if (null != callbacks) {
1:e3f98fa:       for (CarbonFSBytesReadOnThreadCallback callback : callbacks) {
1:e3f98fa:         sum += callback.getReadBytes();
1:e3f98fa:       }
1:e3f98fa:     }
1:e3f98fa:     return sum;
1:e3f98fa:   }
1:e3f98fa: 
1:e3f98fa:   /**
1:e3f98fa:    * adds spawaned thread callback entry in metricmap using parentThreadId
1:e3f98fa:    *
1:e3f98fa:    * @param parentThreadId
1:e3f98fa:    * @param callback
1:e3f98fa:    */
1:e3f98fa:   private void addEntry(long parentThreadId, CarbonFSBytesReadOnThreadCallback callback) {
1:e3f98fa:     List<CarbonFSBytesReadOnThreadCallback> callbackList = getCallbackList(parentThreadId);
1:e3f98fa:     if (null == callbackList) {
1:e3f98fa:       //create new list
1:e3f98fa:       List<CarbonFSBytesReadOnThreadCallback> list = new CopyOnWriteArrayList<>();
1:e3f98fa:       list.add(callback);
1:e3f98fa:       metricMap.put(parentThreadId, list);
1:e3f98fa:     } else {
1:e3f98fa:       // add to existing list
1:e3f98fa:       callbackList.add(callback);
1:e3f98fa:     }
1:e3f98fa:   }
1:e3f98fa: 
1:e3f98fa:   /**
1:e3f98fa:    * This class maintains getReadBytes info of each thread
1:e3f98fa:    */
1:e3f98fa:   class CarbonFSBytesReadOnThreadCallback {
1:e3f98fa:     long baseline = 0;
1:e3f98fa:     long updatedReadBytes = 0;
1:e3f98fa:     long threadId = Thread.currentThread().getId();
1:e3f98fa: 
1:e3f98fa:     CarbonFSBytesReadOnThreadCallback(long parentThread) {
1:e3f98fa:       // reads current thread readBytes
1:e3f98fa:       this.baseline = readbytes();
1:e3f98fa:       addEntry(parentThread, this);
1:e3f98fa:     }
1:e3f98fa: 
1:e3f98fa:     /**
1:e3f98fa:      * returns current thread readbytes from FileSystem Statistics
1:e3f98fa:      *
1:e3f98fa:      * @return
1:e3f98fa:      */
1:e3f98fa:     public long readbytes() {
1:e3f98fa:       List<FileSystem.Statistics> statisticsList = FileSystem.getAllStatistics();
1:e3f98fa:       long sum = 0;
1:e3f98fa:       try {
1:e3f98fa:         for (FileSystem.Statistics statistics : statisticsList) {
1:e3f98fa:           Class statisticsClass = Class.forName(statistics.getClass().getName());
1:e3f98fa:           Method getThreadStatisticsMethod =
1:e3f98fa:               statisticsClass.getDeclaredMethod("getThreadStatistics");
1:e3f98fa:           Class statisticsDataClass =
1:e3f98fa:               Class.forName("org.apache.hadoop.fs.FileSystem$Statistics$StatisticsData");
1:e3f98fa:           Method getBytesReadMethod = statisticsDataClass.getDeclaredMethod("getBytesRead");
1:e3f98fa:           sum += (Long) getBytesReadMethod
1:e3f98fa:               .invoke(statisticsDataClass.cast(getThreadStatisticsMethod.invoke(statistics, null)),
1:e3f98fa:                   null);
1:e3f98fa:         }
1:e3f98fa:       } catch (Exception ex) {
1:e3f98fa:         LOGGER.debug(ex.getLocalizedMessage());
1:e3f98fa:       }
1:e3f98fa:       return sum;
1:e3f98fa:     }
1:e3f98fa: 
1:e3f98fa:     /**
1:e3f98fa:      * After completing task, each child thread should update corresponding
1:e3f98fa:      * read bytes using updatedReadBytes method.
1:e3f98fa:      * if updatedReadBytes > 0 then return updatedReadBytes (i.e thread read bytes).
1:e3f98fa:      *
1:e3f98fa:      * @return
1:e3f98fa:      */
1:e3f98fa:     public long getReadBytes() {
1:e3f98fa:       return updatedReadBytes - baseline;
1:e3f98fa:     }
1:e3f98fa:   }
1:e3f98fa: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:Raghunandan S
-------------------------------------------------------------------------------
commit:bb0b347
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<Long, List<CarbonFSBytesReadOnThreadCallback>> metricMap =
1:   public static final TaskMetricsMap taskMetricsMap = new TaskMetricsMap();
author:Manohar
-------------------------------------------------------------------------------
commit:e3f98fa
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.util;
1: 
1: import java.lang.reflect.Method;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: 
1: import org.apache.hadoop.fs.FileSystem;
1: 
1: /**
1:  * This class maintains task level metrics info for all spawned child threads and parent task thread
1:  */
1: public class TaskMetricsMap {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(TaskMetricsMap.class.getName());
1: 
1:   public static final InheritableThreadLocal<Long> threadLocal = new InheritableThreadLocal<>();
1:   /**
1:    * In this map we are maintaining all spawned child threads callback info for each parent thread
1:    * here key = parent thread id & values =  list of spawned child threads callbacks
1:    */
0:   public static Map<Long, List<CarbonFSBytesReadOnThreadCallback>> metricMap =
1:       new ConcurrentHashMap<>();
1: 
0:   public static TaskMetricsMap taskMetricsMap = new TaskMetricsMap();
1: 
1:   public static TaskMetricsMap getInstance() {
1:     return taskMetricsMap;
1:   }
1: 
1:   /**
1:    * registers current thread callback using parent thread id
1:    *
1:    * @return
1:    */
1:   public void registerThreadCallback() {
1:     // parent thread id should not be null as we are setting the same for all RDDs
1:     if (null != threadLocal.get()) {
1:       long parentThreadId = threadLocal.get();
1:       new CarbonFSBytesReadOnThreadCallback(parentThreadId);
1:     }
1:   }
1: 
1:   /**
1:    * removes parent thread entry from map.
1:    *
1:    * @param threadId
1:    */
1:   public void removeEntry(long threadId) {
1:     metricMap.remove(threadId);
1:   }
1: 
1:   /**
1:    * returns all spawned child threads callback list of given parent thread
1:    *
1:    * @param threadId
1:    * @return
1:    */
1:   public List<CarbonFSBytesReadOnThreadCallback> getCallbackList(long threadId) {
1:     return metricMap.get(threadId);
1:   }
1: 
1:   public boolean isCallbackEmpty(long threadId) {
1:     List<CarbonFSBytesReadOnThreadCallback> callbackList = getCallbackList(threadId);
1:     if (null == callbackList) {
1:       return true;
1:     }
1:     return callbackList.isEmpty();
1:   }
1: 
1:   /**
1:    * This function updates read bytes of given thread
1:    * After completing the task, each spawned child thread should update current read bytes,
1:    * by calling this function.
1:    *
1:    * @param callbackThreadId
1:    */
1:   public void updateReadBytes(long callbackThreadId) {
1:     // parent thread id should not be null as we are setting the same for all RDDs
1:     if (null != threadLocal.get()) {
1:       long parentThreadId = threadLocal.get();
1:       List<CarbonFSBytesReadOnThreadCallback> callbackList = getCallbackList(parentThreadId);
1:       if (null != callbackList) {
1:         for (CarbonFSBytesReadOnThreadCallback callback : callbackList) {
1:           if (callback.threadId == callbackThreadId) {
1:             callback.updatedReadBytes += callback.readbytes();
1:             break;
1:           }
1:         }
1:       }
1:     }
1:   }
1: 
1:   /**
1:    * returns total task read bytes, by summing all parent & spawned threads readbytes
1:    *
1:    * @param threadName
1:    * @return
1:    */
1:   public long getReadBytesSum(long threadName) {
1:     List<CarbonFSBytesReadOnThreadCallback> callbacks = getCallbackList(threadName);
1:     long sum = 0;
1:     if (null != callbacks) {
1:       for (CarbonFSBytesReadOnThreadCallback callback : callbacks) {
1:         sum += callback.getReadBytes();
1:       }
1:     }
1:     return sum;
1:   }
1: 
0:   public void clear() {
0:     metricMap.clear();
1:   }
1: 
1:   /**
1:    * adds spawaned thread callback entry in metricmap using parentThreadId
1:    *
1:    * @param parentThreadId
1:    * @param callback
1:    */
1:   private void addEntry(long parentThreadId, CarbonFSBytesReadOnThreadCallback callback) {
1:     List<CarbonFSBytesReadOnThreadCallback> callbackList = getCallbackList(parentThreadId);
1:     if (null == callbackList) {
1:       //create new list
1:       List<CarbonFSBytesReadOnThreadCallback> list = new CopyOnWriteArrayList<>();
1:       list.add(callback);
1:       metricMap.put(parentThreadId, list);
1:     } else {
1:       // add to existing list
1:       callbackList.add(callback);
1:     }
1:   }
1: 
1:   /**
1:    * This class maintains getReadBytes info of each thread
1:    */
1:   class CarbonFSBytesReadOnThreadCallback {
1:     long baseline = 0;
1:     long updatedReadBytes = 0;
1:     long threadId = Thread.currentThread().getId();
1: 
1:     CarbonFSBytesReadOnThreadCallback(long parentThread) {
1:       // reads current thread readBytes
1:       this.baseline = readbytes();
1:       addEntry(parentThread, this);
1:     }
1: 
1:     /**
1:      * returns current thread readbytes from FileSystem Statistics
1:      *
1:      * @return
1:      */
1:     public long readbytes() {
1:       List<FileSystem.Statistics> statisticsList = FileSystem.getAllStatistics();
1:       long sum = 0;
1:       try {
1:         for (FileSystem.Statistics statistics : statisticsList) {
1:           Class statisticsClass = Class.forName(statistics.getClass().getName());
1:           Method getThreadStatisticsMethod =
1:               statisticsClass.getDeclaredMethod("getThreadStatistics");
1:           Class statisticsDataClass =
1:               Class.forName("org.apache.hadoop.fs.FileSystem$Statistics$StatisticsData");
1:           Method getBytesReadMethod = statisticsDataClass.getDeclaredMethod("getBytesRead");
1:           sum += (Long) getBytesReadMethod
1:               .invoke(statisticsDataClass.cast(getThreadStatisticsMethod.invoke(statistics, null)),
1:                   null);
1:         }
1:       } catch (Exception ex) {
1:         LOGGER.debug(ex.getLocalizedMessage());
1:       }
1:       return sum;
1:     }
1: 
1:     /**
1:      * After completing task, each child thread should update corresponding
1:      * read bytes using updatedReadBytes method.
1:      * if updatedReadBytes > 0 then return updatedReadBytes (i.e thread read bytes).
1:      *
1:      * @return
1:      */
1:     public long getReadBytes() {
1:       return updatedReadBytes - baseline;
1:     }
1:   }
1: }
============================================================================