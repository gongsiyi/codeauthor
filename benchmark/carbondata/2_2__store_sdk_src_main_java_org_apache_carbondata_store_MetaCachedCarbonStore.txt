1:cfb8ed9: /*
1:cfb8ed9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cfb8ed9:  * contributor license agreements.  See the NOTICE file distributed with
1:cfb8ed9:  * this work for additional information regarding copyright ownership.
1:cfb8ed9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cfb8ed9:  * (the "License"); you may not use this file except in compliance with
1:cfb8ed9:  * the License.  You may obtain a copy of the License at
1:cfb8ed9:  *
1:cfb8ed9:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cfb8ed9:  *
1:cfb8ed9:  * Unless required by applicable law or agreed to in writing, software
1:cfb8ed9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cfb8ed9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cfb8ed9:  * See the License for the specific language governing permissions and
1:cfb8ed9:  * limitations under the License.
1:cfb8ed9:  */
1:cfb8ed9: 
1:cfb8ed9: package org.apache.carbondata.store;
1:cfb8ed9: 
1:cfb8ed9: import java.io.IOException;
1:cfb8ed9: import java.util.HashMap;
1:cfb8ed9: import java.util.Map;
1:cfb8ed9: 
1:cfb8ed9: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:e740182: import org.apache.carbondata.core.metadata.converter.SchemaConverter;
1:e740182: import org.apache.carbondata.core.metadata.converter.ThriftWrapperSchemaConverterImpl;
1:cfb8ed9: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:cfb8ed9: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
1:e740182: import org.apache.carbondata.core.util.CarbonUtil;
1:cfb8ed9: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:cfb8ed9: 
1:cfb8ed9: /**
1:cfb8ed9:  * A CarbonStore base class that caches CarbonTable object
1:cfb8ed9:  */
1:cfb8ed9: @InterfaceAudience.Internal
1:cfb8ed9: abstract class MetaCachedCarbonStore implements CarbonStore {
1:cfb8ed9: 
1:cfb8ed9:   // mapping of table path to CarbonTable object
1:cfb8ed9:   private Map<String, CarbonTable> cache = new HashMap<>();
1:cfb8ed9: 
1:cfb8ed9:   CarbonTable getTable(String path) throws IOException {
1:cfb8ed9:     if (cache.containsKey(path)) {
1:cfb8ed9:       return cache.get(path);
1:cfb8ed9:     }
1:e740182:     org.apache.carbondata.format.TableInfo tableInfo = CarbonUtil
1:e740182:         .readSchemaFile(CarbonTablePath.getSchemaFilePath(path));
1:e740182:     SchemaConverter schemaConverter = new ThriftWrapperSchemaConverterImpl();
1:e740182:     TableInfo tableInfo1 = schemaConverter.fromExternalToWrapperTableInfo(tableInfo, "", "", "");
1:e740182:     tableInfo1.setTablePath(path);
1:e740182:     CarbonTable table = CarbonTable.buildFromTableInfo(tableInfo1);
1:cfb8ed9:     cache.put(path, table);
1:cfb8ed9:     return table;
1:cfb8ed9:   }
1:cfb8ed9: 
1:cfb8ed9:   @Override
1:cfb8ed9:   public void close() throws IOException {
1:cfb8ed9:     cache.clear();
1:cfb8ed9:   }
1:cfb8ed9: }
============================================================================
author:xubo245
-------------------------------------------------------------------------------
commit:e740182
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.converter.SchemaConverter;
1: import org.apache.carbondata.core.metadata.converter.ThriftWrapperSchemaConverterImpl;
1: import org.apache.carbondata.core.util.CarbonUtil;
/////////////////////////////////////////////////////////////////////////
1:     org.apache.carbondata.format.TableInfo tableInfo = CarbonUtil
1:         .readSchemaFile(CarbonTablePath.getSchemaFilePath(path));
1:     SchemaConverter schemaConverter = new ThriftWrapperSchemaConverterImpl();
1:     TableInfo tableInfo1 = schemaConverter.fromExternalToWrapperTableInfo(tableInfo, "", "", "");
1:     tableInfo1.setTablePath(path);
1:     CarbonTable table = CarbonTable.buildFromTableInfo(tableInfo1);
author:Jacky Li
-------------------------------------------------------------------------------
commit:cfb8ed9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.store;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
0: import org.apache.carbondata.sdk.file.CarbonReader;
1: 
1: /**
1:  * A CarbonStore base class that caches CarbonTable object
1:  */
1: @InterfaceAudience.Internal
1: abstract class MetaCachedCarbonStore implements CarbonStore {
1: 
1:   // mapping of table path to CarbonTable object
1:   private Map<String, CarbonTable> cache = new HashMap<>();
1: 
1:   CarbonTable getTable(String path) throws IOException {
1:     if (cache.containsKey(path)) {
1:       return cache.get(path);
1:     }
0:     TableInfo schema = CarbonReader.readSchemaFile(CarbonTablePath.getSchemaFilePath(path));
0:     schema.setTablePath(path);
0:     CarbonTable table = CarbonTable.buildFromTableInfo(schema);
1:     cache.put(path, table);
1:     return table;
1:   }
1: 
1:   @Override
1:   public void close() throws IOException {
1:     cache.clear();
1:   }
1: }
============================================================================