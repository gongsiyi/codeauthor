1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
2:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
4:cd6a4ff:  */
4:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:cd6a4ff: 
1:cd6a4ff: import java.util.List;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.cache.Cacheable;
1:cd6a4ff: 
4:cd6a4ff: /**
1:cd6a4ff:  * An interface which holds dictionary information like end offset,
1:cd6a4ff:  * file timestamp for one column
1:377dee9:  */
1:cd6a4ff: public interface DictionaryInfo extends Cacheable, Dictionary {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will increment the access count for a column by 1
1:cd6a4ff:    * whenever a column is getting used in query or incremental data load
1:cd6a4ff:    */
1:cd6a4ff:   void incrementAccessCount();
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will update the end offset of file everytime a file is read
1:7e0584e:    *
1:cd6a4ff:    * @param offsetTillFileIsRead
1:cd6a4ff:    */
1:cd6a4ff:   void setOffsetTillFileIsRead(long offsetTillFileIsRead);
1:377dee9: 
1:377dee9:   /**
1:377dee9:    * offset till the file is read
1:377dee9:    * @return
1:377dee9:    */
1:377dee9:   long getOffsetTillFileIsRead();
1:377dee9: 
1:377dee9:   /**
1:377dee9:    * the memory size of this object after loaded into memory
1:377dee9:    * @param memorySize
1:377dee9:    */
1:377dee9:   void setMemorySize(long memorySize);
1:377dee9: 
1:377dee9:   /**
1:cd6a4ff:    * This method will update the timestamp of a file if a file is modified
1:cd6a4ff:    * like in case of incremental load
1:cd6a4ff:    *
1:cd6a4ff:    * @param fileTimeStamp
1:377dee9:    */
1:cd6a4ff:   void setFileTimeStamp(long fileTimeStamp);
1:377dee9: 
1:377dee9:   /**
1:cd6a4ff:    * This method will add a new dictionary chunk to existing list of dictionary chunks
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryChunk
1:cd6a4ff:    */
1:cd6a4ff:   void addDictionaryChunk(List<byte[]> dictionaryChunk);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:7e0584e:    * This method will return the size of of last dictionary chunk so that only that many
1:7e0584e:    * values are read from the dictionary reader
1:7e0584e:    *
1:7e0584e:    * @return size of last dictionary chunk
1:7e0584e:    */
1:7e0584e:   int getSizeOfLastDictionaryChunk();
1:7e0584e: 
1:7e0584e:   /**
1:cd6a4ff:    * This method will set the sort order index of a dictionary column.
1:cd6a4ff:    * Sort order index if the index of dictionary values after they are sorted.
1:cd6a4ff:    *
1:cd6a4ff:    * @param sortOrderIndex
1:7e0584e:    */
1:cd6a4ff:   void setSortOrderIndex(List<Integer> sortOrderIndex);
1:7e0584e: 
1:7e0584e:   /**
1:cd6a4ff:    * This method will set the sort reverse index of a dictionary column.
1:cd6a4ff:    * Sort reverse index is the index of dictionary values before they are sorted.
1:cd6a4ff:    *
1:cd6a4ff:    * @param sortReverseOrderIndex
1:cd6a4ff:    */
1:cd6a4ff:   void setSortReverseOrderIndex(List<Integer> sortReverseOrderIndex);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * dictionary metadata file length which will be set whenever we reload dictionary
1:cd6a4ff:    * data from disk
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryMetaFileLength length of dictionary metadata file
1:cd6a4ff:    */
1:cd6a4ff:   void setDictionaryMetaFileLength(long dictionaryMetaFileLength);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Dictionary meta file offset which will be read to check whether length of dictionary
1:cd6a4ff:    * meta file has been modified
1:cd6a4ff:    *
1:377dee9:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   long getDictionaryMetaFileLength();
1:cd6a4ff: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:377dee9
/////////////////////////////////////////////////////////////////////////
1:    * offset till the file is read
1:    * @return
1:    */
1:   long getOffsetTillFileIsRead();
1: 
1:   /**
1:    * the memory size of this object after loaded into memory
1:    * @param memorySize
1:    */
1:   void setMemorySize(long memorySize);
1: 
1:   /**
commit:377dee9
/////////////////////////////////////////////////////////////////////////
0:    * offset till the file is read
1:    * @return
1:    */
0:   long getOffsetTillFileIsRead();
1: 
1:   /**
0:    * the memory size of this object after loaded into memory
0:    * @param memorySize
1:    */
0:   void setMemorySize(long memorySize);
1: 
1:   /**
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:manishgupt88
-------------------------------------------------------------------------------
commit:7e0584e
/////////////////////////////////////////////////////////////////////////
1:    * This method will return the size of of last dictionary chunk so that only that many
1:    * values are read from the dictionary reader
1:    *
1:    * @return size of last dictionary chunk
1:    */
1:   int getSizeOfLastDictionaryChunk();
1: 
1:   /**
commit:7e0584e
/////////////////////////////////////////////////////////////////////////
0:    * This method will return the size of of last dictionary chunk so that only that many
0:    * values are read from the dictionary reader
1:    *
0:    * @return size of last dictionary chunk
1:    */
0:   int getSizeOfLastDictionaryChunk();
1: 
1:   /**
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.cache.Cacheable;
1: 
1: /**
1:  * An interface which holds dictionary information like end offset,
1:  * file timestamp for one column
1:  */
1: public interface DictionaryInfo extends Cacheable, Dictionary {
1: 
1:   /**
1:    * This method will increment the access count for a column by 1
1:    * whenever a column is getting used in query or incremental data load
1:    */
1:   void incrementAccessCount();
1: 
1:   /**
1:    * This method will update the end offset of file everytime a file is read
1:    *
1:    * @param offsetTillFileIsRead
1:    */
1:   void setOffsetTillFileIsRead(long offsetTillFileIsRead);
1: 
1:   /**
1:    * This method will update the timestamp of a file if a file is modified
1:    * like in case of incremental load
1:    *
1:    * @param fileTimeStamp
1:    */
1:   void setFileTimeStamp(long fileTimeStamp);
1: 
1:   /**
1:    * This method will add a new dictionary chunk to existing list of dictionary chunks
1:    *
1:    * @param dictionaryChunk
1:    */
1:   void addDictionaryChunk(List<byte[]> dictionaryChunk);
1: 
1:   /**
1:    * This method will set the sort order index of a dictionary column.
1:    * Sort order index if the index of dictionary values after they are sorted.
1:    *
1:    * @param sortOrderIndex
1:    */
1:   void setSortOrderIndex(List<Integer> sortOrderIndex);
1: 
1:   /**
1:    * This method will set the sort reverse index of a dictionary column.
1:    * Sort reverse index is the index of dictionary values before they are sorted.
1:    *
1:    * @param sortReverseOrderIndex
1:    */
1:   void setSortReverseOrderIndex(List<Integer> sortReverseOrderIndex);
1: 
1:   /**
1:    * dictionary metadata file length which will be set whenever we reload dictionary
1:    * data from disk
1:    *
1:    * @param dictionaryMetaFileLength length of dictionary metadata file
1:    */
1:   void setDictionaryMetaFileLength(long dictionaryMetaFileLength);
1: 
1:   /**
1:    * Dictionary meta file offset which will be read to check whether length of dictionary
1:    * meta file has been modified
1:    *
0:    * @return
1:    */
1:   long getDictionaryMetaFileLength();
1: }
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.core.cache.dictionary;
0: 
0: import java.util.List;
0: 
0: import org.apache.carbondata.core.cache.Cacheable;
0: 
0: /**
0:  * An interface which holds dictionary information like end offset,
0:  * file timestamp for one column
0:  */
0: public interface DictionaryInfo extends Cacheable, Dictionary {
0: 
0:   /**
0:    * This method will increment the access count for a column by 1
0:    * whenever a column is getting used in query or incremental data load
0:    */
0:   void incrementAccessCount();
0: 
0:   /**
0:    * This method will update the end offset of file everytime a file is read
0:    *
0:    * @param offsetTillFileIsRead
0:    */
0:   void setOffsetTillFileIsRead(long offsetTillFileIsRead);
0: 
0:   /**
0:    * This method will update the timestamp of a file if a file is modified
0:    * like in case of incremental load
0:    *
0:    * @param fileTimeStamp
0:    */
0:   void setFileTimeStamp(long fileTimeStamp);
0: 
0:   /**
0:    * This method will add a new dictionary chunk to existing list of dictionary chunks
0:    *
0:    * @param dictionaryChunk
0:    */
0:   void addDictionaryChunk(List<byte[]> dictionaryChunk);
0: 
0:   /**
0:    * This method will set the sort order index of a dictionary column.
0:    * Sort order index if the index of dictionary values after they are sorted.
0:    *
0:    * @param sortOrderIndex
0:    */
0:   void setSortOrderIndex(List<Integer> sortOrderIndex);
0: 
0:   /**
0:    * This method will set the sort reverse index of a dictionary column.
0:    * Sort reverse index is the index of dictionary values before they are sorted.
0:    *
0:    * @param sortReverseOrderIndex
0:    */
0:   void setSortReverseOrderIndex(List<Integer> sortReverseOrderIndex);
0: 
0:   /**
0:    * dictionary metadata file length which will be set whenever we reload dictionary
0:    * data from disk
0:    *
0:    * @param dictionaryMetaFileLength length of dictionary metadata file
0:    */
0:   void setDictionaryMetaFileLength(long dictionaryMetaFileLength);
0: 
0:   /**
0:    * Dictionary meta file offset which will be read to check whether length of dictionary
0:    * meta file has been modified
0:    *
0:    * @return
0:    */
0:   long getDictionaryMetaFileLength();
0: }
============================================================================