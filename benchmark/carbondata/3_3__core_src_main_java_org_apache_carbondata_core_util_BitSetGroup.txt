1:72cb415: /*
1:72cb415:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72cb415:  * contributor license agreements.  See the NOTICE file distributed with
1:72cb415:  * this work for additional information regarding copyright ownership.
1:72cb415:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72cb415:  * (the "License"); you may not use this file except in compliance with
1:72cb415:  * the License.  You may obtain a copy of the License at
1:72cb415:  *
1:72cb415:  *    http://www.apache.org/licenses/LICENSE-2.0
1:72cb415:  *
1:72cb415:  * Unless required by applicable law or agreed to in writing, software
1:72cb415:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72cb415:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72cb415:  * See the License for the specific language governing permissions and
1:72cb415:  * limitations under the License.
1:72cb415:  */
1:72cb415: package org.apache.carbondata.core.util;
1:72cb415: 
1:72cb415: import java.util.BitSet;
1:72cb415: 
1:72cb415: /**
1:72cb415:  * Maintains the group of bitsets.
1:72cb415:  * Each filter executor returns BitSetGroup after filtering the data.
1:72cb415:  */
1:72cb415: public class BitSetGroup {
1:72cb415: 
1:72cb415:   private BitSet[] bitSets;
1:72cb415: 
1:72cb415:   public BitSetGroup(int groupSize) {
1:72cb415:     bitSets = new BitSet[groupSize];
1:72cb415:   }
1:72cb415: 
1:72cb415:   public void setBitSet(BitSet bitSet, int index) {
1:72cb415:     assert index < bitSets.length;
1:72cb415:     bitSets[index] = bitSet;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public BitSet getBitSet(int index) {
1:72cb415:     assert index < bitSets.length;
1:72cb415:     return bitSets[index];
1:72cb415:   }
1:72cb415: 
1:72cb415:   public boolean isEmpty() {
1:72cb415:     for (BitSet bitSet : bitSets) {
1:72cb415:       if (bitSet != null && !bitSet.isEmpty()) {
1:72cb415:         return false;
1:72cb415:       }
1:72cb415:     }
1:72cb415:     return true;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public void and(BitSetGroup group) {
1:72cb415:     int i = 0;
1:72cb415:     for (BitSet bitSet : bitSets) {
1:2cf1104:       BitSet otherSet = group.getBitSet(i);
1:72cb415:       if (bitSet != null && otherSet != null) {
1:72cb415:         bitSet.and(otherSet);
1:2cf1104:       } else {
1:2cf1104:         bitSets[i] = null;
1:72cb415:       }
1:72cb415:       i++;
1:72cb415:     }
1:72cb415:   }
1:72cb415: 
1:72cb415:   public void or(BitSetGroup group) {
1:72cb415:     int i = 0;
1:72cb415:     for (BitSet bitSet : bitSets) {
1:2cf1104:       BitSet otherSet = group.getBitSet(i);
1:72cb415:       if (bitSet != null && otherSet != null) {
1:72cb415:         bitSet.or(otherSet);
1:72cb415:       }
1:72cb415:       // if it is null and other set is not null then replace it.
1:72cb415:       if (bitSet == null && otherSet != null) {
1:72cb415:         bitSets[i] = otherSet;
1:72cb415:       }
1:72cb415:       i++;
1:72cb415:     }
1:72cb415:   }
1:72cb415: 
1:72cb415:   public int getNumberOfPages() {
1:72cb415:     return bitSets.length;
1:72cb415:   }
1:72cb415: 
1:1f3efe3:   /**
1:1f3efe3:    * @return return the valid pages
1:1f3efe3:    */
1:1f3efe3:   public int getValidPages() {
1:1f3efe3:     int numberOfPages = 0;
1:1f3efe3:     for (int i = 0; i < bitSets.length; i++) {
1:ded5507:       numberOfPages += (bitSets[i] != null && !bitSets[i].isEmpty()) ? 1 : 0;
1:ded5507:     }
1:ded5507:     return numberOfPages;
1:ded5507:   }
1:ded5507: 
1:ded5507:   /**
1:ded5507:    * @return return the valid pages
1:ded5507:    */
1:ded5507:   public int getScannedPages() {
1:ded5507:     int numberOfPages = 0;
1:ded5507:     for (int i = 0; i < bitSets.length; i++) {
1:ded5507:       numberOfPages += bitSets[i] == null ? 0 : 1;
1:1f3efe3:     }
1:1f3efe3:     return numberOfPages;
1:1f3efe3:   }
1:72cb415: }
============================================================================
author:akashrn5
-------------------------------------------------------------------------------
commit:ded5507
/////////////////////////////////////////////////////////////////////////
1:       numberOfPages += (bitSets[i] != null && !bitSets[i].isEmpty()) ? 1 : 0;
1:     }
1:     return numberOfPages;
1:   }
1: 
1:   /**
1:    * @return return the valid pages
1:    */
1:   public int getScannedPages() {
1:     int numberOfPages = 0;
1:     for (int i = 0; i < bitSets.length; i++) {
1:       numberOfPages += bitSets[i] == null ? 0 : 1;
author:kumarvishal
-------------------------------------------------------------------------------
commit:1f3efe3
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * @return return the valid pages
1:    */
1:   public int getValidPages() {
1:     int numberOfPages = 0;
1:     for (int i = 0; i < bitSets.length; i++) {
0:       numberOfPages += (bitSets[i] == null || bitSets[i].isEmpty()) ? 0 : 1;
1:     }
1:     return numberOfPages;
1:   }
commit:2cf1104
/////////////////////////////////////////////////////////////////////////
1:       BitSet otherSet = group.getBitSet(i);
1:       } else {
1:         bitSets[i] = null;
/////////////////////////////////////////////////////////////////////////
1:       BitSet otherSet = group.getBitSet(i);
author:ravipesala
-------------------------------------------------------------------------------
commit:72cb415
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.util;
1: 
1: import java.util.BitSet;
1: 
1: /**
1:  * Maintains the group of bitsets.
1:  * Each filter executor returns BitSetGroup after filtering the data.
1:  */
1: public class BitSetGroup {
1: 
1:   private BitSet[] bitSets;
1: 
1:   public BitSetGroup(int groupSize) {
1:     bitSets = new BitSet[groupSize];
1:   }
1: 
1:   public void setBitSet(BitSet bitSet, int index) {
1:     assert index < bitSets.length;
1:     bitSets[index] = bitSet;
1:   }
1: 
1:   public BitSet getBitSet(int index) {
1:     assert index < bitSets.length;
1:     return bitSets[index];
1:   }
1: 
1:   public boolean isEmpty() {
1:     for (BitSet bitSet : bitSets) {
1:       if (bitSet != null && !bitSet.isEmpty()) {
1:         return false;
1:       }
1:     }
1:     return true;
1:   }
1: 
1:   public void and(BitSetGroup group) {
1:     int i = 0;
1:     for (BitSet bitSet : bitSets) {
0:       BitSet otherSet  = group.getBitSet(i);
1:       if (bitSet != null && otherSet != null) {
1:         bitSet.and(otherSet);
1:       }
1:       i++;
1:     }
1:   }
1: 
1:   public void or(BitSetGroup group) {
1:     int i = 0;
1:     for (BitSet bitSet : bitSets) {
0:       BitSet otherSet  = group.getBitSet(i);
1:       if (bitSet != null && otherSet != null) {
1:         bitSet.or(otherSet);
1:       }
1:       // if it is null and other set is not null then replace it.
1:       if (bitSet == null && otherSet != null) {
1:         bitSets[i] = otherSet;
1:       }
1:       i++;
1:     }
1:   }
1: 
1:   public int getNumberOfPages() {
1:     return bitSets.length;
1:   }
1: 
1: }
============================================================================