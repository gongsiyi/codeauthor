1:280a400: /*
1:280a400:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:280a400:  * contributor license agreements.  See the NOTICE file distributed with
1:280a400:  * this work for additional information regarding copyright ownership.
1:280a400:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:280a400:  * (the "License"); you may not use this file except in compliance with
1:280a400:  * the License.  You may obtain a copy of the License at
1:280a400:  *
1:280a400:  *    http://www.apache.org/licenses/LICENSE-2.0
1:280a400:  *
1:280a400:  * Unless required by applicable law or agreed to in writing, software
1:280a400:  * distributed under the License is distributed on an "AS IS" BASIS,
1:280a400:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:280a400:  * See the License for the specific language governing permissions and
1:280a400:  * limitations under the License.
1:280a400:  */
1:280a400: package org.apache.carbondata.core.readcommitter;
1:280a400: 
1:280a400: import java.io.IOException;
1:280a400: import java.util.Map;
1:280a400: 
1:280a400: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:280a400: import org.apache.carbondata.common.annotations.InterfaceStability;
1:280a400: import org.apache.carbondata.core.datamap.Segment;
1:280a400: import org.apache.carbondata.core.indexstore.blockletindex.SegmentIndexFileStore;
1:280a400: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:280a400: import org.apache.carbondata.core.metadata.SegmentFileStore;
1:f1a6c7c: import org.apache.carbondata.core.mutate.UpdateVO;
1:280a400: import org.apache.carbondata.core.statusmanager.LoadMetadataDetails;
1:f1a6c7c: import org.apache.carbondata.core.statusmanager.SegmentRefreshInfo;
1:280a400: import org.apache.carbondata.core.statusmanager.SegmentStatusManager;
1:280a400: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:280a400: 
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:8f1a029: 
1:280a400: /**
1:280a400:  * ReadCommittedScope for the managed carbon table
1:280a400:  */
1:280a400: @InterfaceAudience.Internal
1:280a400: @InterfaceStability.Stable
1:280a400: public class TableStatusReadCommittedScope implements ReadCommittedScope {
1:c58eb43: 
1:8f1a029:   private static final long serialVersionUID = 2324397174595872738L;
1:280a400:   private LoadMetadataDetails[] loadMetadataDetails;
1:c58eb43: 
1:280a400:   private AbsoluteTableIdentifier identifier;
1:280a400: 
1:8f1a029:   private transient Configuration configuration;
1:8f1a029: 
1:8f1a029:   public TableStatusReadCommittedScope(AbsoluteTableIdentifier identifier,
1:8f1a029:       Configuration configuration) throws IOException {
1:280a400:     this.identifier = identifier;
1:8f1a029:     this.configuration = configuration;
1:280a400:     takeCarbonIndexFileSnapShot();
1:280a400:   }
1:280a400: 
1:c58eb43:   public TableStatusReadCommittedScope(AbsoluteTableIdentifier identifier,
1:8f1a029:       LoadMetadataDetails[] loadMetadataDetails, Configuration configuration) throws IOException {
1:c58eb43:     this.identifier = identifier;
1:8f1a029:     this.configuration = configuration;
1:c58eb43:     this.loadMetadataDetails = loadMetadataDetails;
1:c58eb43:   }
1:c58eb43: 
1:280a400:   @Override public LoadMetadataDetails[] getSegmentList() throws IOException {
1:280a400:     try {
1:280a400:       if (loadMetadataDetails == null) {
1:280a400:         takeCarbonIndexFileSnapShot();
1:280a400:       }
1:280a400:       return loadMetadataDetails;
1:280a400: 
1:280a400:     } catch (IOException ex) {
1:280a400:       throw new IOException("Problem encountered while reading the Table Status file.", ex);
1:280a400:     }
1:280a400:   }
1:280a400: 
1:280a400:   @Override public Map<String, String> getCommittedIndexFile(Segment segment) throws IOException {
1:280a400:     Map<String, String> indexFiles;
1:280a400:     if (segment.getSegmentFileName() == null) {
1:280a400:       String path =
1:280a400:           CarbonTablePath.getSegmentPath(identifier.getTablePath(), segment.getSegmentNo());
1:531ecdf:       indexFiles = new SegmentIndexFileStore().getMergeOrIndexFilesFromSegment(path);
1:280a400:     } else {
1:280a400:       SegmentFileStore fileStore =
1:280a400:           new SegmentFileStore(identifier.getTablePath(), segment.getSegmentFileName());
1:531ecdf:       indexFiles = fileStore.getIndexOrMergeFiles();
1:280a400:     }
1:280a400:     return indexFiles;
1:280a400:   }
1:280a400: 
1:b338459:   public SegmentRefreshInfo getCommittedSegmentRefreshInfo(Segment segment, UpdateVO updateVo)
1:f1a6c7c:       throws IOException {
1:f1a6c7c:     SegmentRefreshInfo segmentRefreshInfo;
1:f1a6c7c:     if (updateVo != null) {
1:f1a6c7c:       segmentRefreshInfo = new SegmentRefreshInfo(updateVo.getCreatedOrUpdatedTimeStamp(), 0);
1:f1a6c7c:     } else {
1:f1a6c7c:       segmentRefreshInfo = new SegmentRefreshInfo(0L, 0);
1:f1a6c7c:     }
1:f1a6c7c:     return segmentRefreshInfo;
1:f1a6c7c:   }
1:f1a6c7c: 
1:280a400:   @Override public void takeCarbonIndexFileSnapShot() throws IOException {
1:280a400:     // Only Segment Information is updated.
1:280a400:     // File information will be fetched on the fly according to the fecthed segment info.
1:280a400:     this.loadMetadataDetails = SegmentStatusManager
1:280a400:         .readTableStatusFile(CarbonTablePath.getTableStatusFilePath(identifier.getTablePath()));
1:280a400:   }
1:280a400: 
1:8f1a029:   @Override public Configuration getConfiguration() {
1:8f1a029:     return configuration;
1:8f1a029:   }
1:8f1a029: 
1:8f1a029:   @Override public void setConfiguration(Configuration configuration) {
1:8f1a029:     this.configuration = configuration;
1:8f1a029:   }
1:280a400: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
1: 
/////////////////////////////////////////////////////////////////////////
1:   private static final long serialVersionUID = 2324397174595872738L;
1:   private transient Configuration configuration;
1: 
1:   public TableStatusReadCommittedScope(AbsoluteTableIdentifier identifier,
1:       Configuration configuration) throws IOException {
1:     this.configuration = configuration;
1:       LoadMetadataDetails[] loadMetadataDetails, Configuration configuration) throws IOException {
1:     this.configuration = configuration;
/////////////////////////////////////////////////////////////////////////
1:   @Override public Configuration getConfiguration() {
1:     return configuration;
1:   }
1: 
1:   @Override public void setConfiguration(Configuration configuration) {
1:     this.configuration = configuration;
1:   }
author:xubo245
-------------------------------------------------------------------------------
commit:b338459
/////////////////////////////////////////////////////////////////////////
1:   public SegmentRefreshInfo getCommittedSegmentRefreshInfo(Segment segment, UpdateVO updateVo)
author:rahulforallp
-------------------------------------------------------------------------------
commit:f1a6c7c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.mutate.UpdateVO;
1: import org.apache.carbondata.core.statusmanager.SegmentRefreshInfo;
/////////////////////////////////////////////////////////////////////////
0:   public SegmentRefreshInfo getCommitedSegmentRefreshInfo(Segment segment, UpdateVO updateVo)
1:       throws IOException {
1:     SegmentRefreshInfo segmentRefreshInfo;
1:     if (updateVo != null) {
1:       segmentRefreshInfo = new SegmentRefreshInfo(updateVo.getCreatedOrUpdatedTimeStamp(), 0);
1:     } else {
1:       segmentRefreshInfo = new SegmentRefreshInfo(0L, 0);
1:     }
1:     return segmentRefreshInfo;
1:   }
1: 
author:dhatchayani
-------------------------------------------------------------------------------
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1:       indexFiles = new SegmentIndexFileStore().getMergeOrIndexFilesFromSegment(path);
1:       indexFiles = fileStore.getIndexOrMergeFiles();
author:sounakr
-------------------------------------------------------------------------------
commit:c58eb43
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:   public TableStatusReadCommittedScope(AbsoluteTableIdentifier identifier,
0:       LoadMetadataDetails[] loadMetadataDetails) throws IOException {
1:     this.identifier = identifier;
1:     this.loadMetadataDetails = loadMetadataDetails;
1:   }
1: 
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:280a400
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.readcommitter;
1: 
1: import java.io.IOException;
1: import java.util.Map;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.annotations.InterfaceStability;
1: import org.apache.carbondata.core.datamap.Segment;
1: import org.apache.carbondata.core.indexstore.blockletindex.SegmentIndexFileStore;
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.metadata.SegmentFileStore;
1: import org.apache.carbondata.core.statusmanager.LoadMetadataDetails;
1: import org.apache.carbondata.core.statusmanager.SegmentStatusManager;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: 
1: /**
1:  * ReadCommittedScope for the managed carbon table
1:  */
1: @InterfaceAudience.Internal
1: @InterfaceStability.Stable
1: public class TableStatusReadCommittedScope implements ReadCommittedScope {
1:   private LoadMetadataDetails[] loadMetadataDetails;
1:   private AbsoluteTableIdentifier identifier;
1: 
0:   public TableStatusReadCommittedScope(AbsoluteTableIdentifier identifier) throws IOException {
1:     this.identifier = identifier;
1:     takeCarbonIndexFileSnapShot();
1:   }
1: 
1:   @Override public LoadMetadataDetails[] getSegmentList() throws IOException {
1:     try {
1:       if (loadMetadataDetails == null) {
1:         takeCarbonIndexFileSnapShot();
1:       }
1:       return loadMetadataDetails;
1: 
1:     } catch (IOException ex) {
1:       throw new IOException("Problem encountered while reading the Table Status file.", ex);
1:     }
1:   }
1: 
1:   @Override public Map<String, String> getCommittedIndexFile(Segment segment) throws IOException {
1:     Map<String, String> indexFiles;
1:     if (segment.getSegmentFileName() == null) {
1:       String path =
1:           CarbonTablePath.getSegmentPath(identifier.getTablePath(), segment.getSegmentNo());
0:       indexFiles = new SegmentIndexFileStore().getIndexFilesFromSegment(path);
1:     } else {
1:       SegmentFileStore fileStore =
1:           new SegmentFileStore(identifier.getTablePath(), segment.getSegmentFileName());
0:       indexFiles = fileStore.getIndexFiles();
1:     }
1:     return indexFiles;
1:   }
1: 
1:   @Override public void takeCarbonIndexFileSnapShot() throws IOException {
1:     // Only Segment Information is updated.
1:     // File information will be fetched on the fly according to the fecthed segment info.
1:     this.loadMetadataDetails = SegmentStatusManager
1:         .readTableStatusFile(CarbonTablePath.getTableStatusFilePath(identifier.getTablePath()));
1:   }
1: 
1: }
============================================================================