1:e4f2843: /*
1:e4f2843:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e4f2843:  * contributor license agreements.  See the NOTICE file distributed with
1:e4f2843:  * this work for additional information regarding copyright ownership.
1:e4f2843:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e4f2843:  * (the "License"); you may not use this file except in compliance with
1:e4f2843:  * the License.  You may obtain a copy of the License at
1:e4f2843:  *
1:e4f2843:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e4f2843:  *
1:e4f2843:  * Unless required by applicable law or agreed to in writing, software
1:e4f2843:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e4f2843:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e4f2843:  * See the License for the specific language governing permissions and
1:e4f2843:  * limitations under the License.
1:e4f2843:  */
1:e4f2843: package org.apache.carbondata.core.preagg;
1:e4f2843: 
1:e4f2843: import java.util.ArrayList;
1:e4f2843: import java.util.List;
1:e4f2843: 
1:e4f2843: import org.apache.carbondata.core.metadata.schema.table.AggregationDataMapSchema;
1:e4f2843: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:e4f2843: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:e4f2843: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:e4f2843: 
1:e4f2843: /**
1:e4f2843:  * Below class will be used to select the aggregate table based
1:e4f2843:  * query plan. Rules for selecting the aggregate table is below:
1:e4f2843:  * 1. Select all aggregate table based on projection
1:e4f2843:  * 2. select aggregate table based on filter exp,
1:e4f2843:  * 2. select if aggregate tables based on aggregate columns
1:e4f2843:  */
1:e4f2843: public class AggregateTableSelector {
1:e4f2843: 
1:e4f2843:   /**
1:e4f2843:    * current query plan
1:e4f2843:    */
1:c70e73f:   private AggregateQueryPlan aggregateQueryPlan;
1:e4f2843: 
1:e4f2843:   /**
1:e4f2843:    * parent table
1:e4f2843:    */
1:e4f2843:   private CarbonTable parentTable;
1:e4f2843: 
1:c70e73f:   public AggregateTableSelector(AggregateQueryPlan aggregateQueryPlan, CarbonTable parentTable) {
1:c70e73f:     this.aggregateQueryPlan = aggregateQueryPlan;
1:e4f2843:     this.parentTable = parentTable;
6:e4f2843:   }
1:e4f2843: 
1:e4f2843:   /**
1:e4f2843:    * Below method will be used to select pre aggregate tables based on query plan
1:e4f2843:    * Rules for selecting the aggregate table is below:
1:e4f2843:    * 1. Select all aggregate table based on projection
1:e4f2843:    * 2. select aggregate table based on filter exp,
1:e4f2843:    * 2. select if aggregate tables based on aggregate columns
1:e4f2843:    *
1:e4f2843:    * @return selected pre aggregate table schema
1:e4f2843:    */
1:e4f2843:   public List<DataMapSchema> selectPreAggDataMapSchema() {
1:c70e73f:     List<QueryColumn> projectionColumn = aggregateQueryPlan.getProjectionColumn();
1:c70e73f:     List<QueryColumn> filterColumns = aggregateQueryPlan.getFilterColumns();
1:e4f2843:     List<DataMapSchema> dataMapSchemaList = parentTable.getTableInfo().getDataMapSchemaList();
1:e4f2843:     List<DataMapSchema> selectedDataMapSchema = new ArrayList<>();
1:e4f2843:     boolean isMatch;
1:e4f2843:     // match projection columns
1:e4f2843:     if (null != projectionColumn && !projectionColumn.isEmpty()) {
1:e4f2843:       for (DataMapSchema dmSchema : dataMapSchemaList) {
2:e4f2843:         AggregationDataMapSchema aggregationDataMapSchema = (AggregationDataMapSchema) dmSchema;
2:e4f2843:         isMatch = true;
1:e4f2843:         for (QueryColumn queryColumn : projectionColumn) {
1:e2a79ee:           ColumnSchema columnSchemaByParentName =
1:e2a79ee:               getColumnSchema(queryColumn, aggregationDataMapSchema);
1:e4f2843:           if (null == columnSchemaByParentName) {
2:e4f2843:             isMatch = false;
1:c70e73f:             break;
1:e4f2843:           }
1:e4f2843:         }
2:e4f2843:         if (isMatch) {
2:e4f2843:           selectedDataMapSchema.add(dmSchema);
1:e4f2843:         }
1:e4f2843:       }
1:e4f2843:       // if projection column is present but selected table list size is zero then
1:e4f2843:       if (selectedDataMapSchema.size() == 0) {
1:e4f2843:         return selectedDataMapSchema;
1:e4f2843:       }
1:e4f2843:     }
1:e2a79ee: 
1:e4f2843:     // match filter columns
1:e4f2843:     if (null != filterColumns && !filterColumns.isEmpty()) {
2:e4f2843:       List<DataMapSchema> dmSchemaToIterate =
2:e4f2843:           selectedDataMapSchema.isEmpty() ? dataMapSchemaList : selectedDataMapSchema;
2:e4f2843:       selectedDataMapSchema = new ArrayList<>();
2:e4f2843:       for (DataMapSchema dmSchema : dmSchemaToIterate) {
1:e4f2843:         isMatch = true;
1:e4f2843:         for (QueryColumn queryColumn : filterColumns) {
1:e4f2843:           AggregationDataMapSchema aggregationDataMapSchema = (AggregationDataMapSchema) dmSchema;
1:e2a79ee:           ColumnSchema columnSchemaByParentName =
1:e2a79ee:               getColumnSchema(queryColumn, aggregationDataMapSchema);
1:e4f2843:           if (null == columnSchemaByParentName) {
1:e4f2843:             isMatch = false;
1:c70e73f:             break;
1:e4f2843:           }
1:e4f2843:         }
1:e4f2843:         if (isMatch) {
1:e4f2843:           selectedDataMapSchema.add(dmSchema);
1:e4f2843:         }
1:e4f2843:       }
1:e4f2843:       // if filter column is present and selection size is zero then return
1:e4f2843:       if (selectedDataMapSchema.size() == 0) {
1:e4f2843:         return selectedDataMapSchema;
1:e4f2843:       }
1:e4f2843:     }
1:e4f2843:     return selectedDataMapSchema;
1:e4f2843:   }
1:e4f2843: 
1:e2a79ee:   /**
1:e2a79ee:    * Below method will be used to get column schema for projection and
1:e2a79ee:    * filter query column
1:e2a79ee:    *
1:e2a79ee:    * @param queryColumn              query column
1:e2a79ee:    * @param aggregationDataMapSchema selected data map schema
1:e2a79ee:    * @return column schema
1:e2a79ee:    */
1:e2a79ee:   private ColumnSchema getColumnSchema(QueryColumn queryColumn,
1:e2a79ee:       AggregationDataMapSchema aggregationDataMapSchema) {
1:e2a79ee:     ColumnSchema columnSchemaByParentName = null;
1:e2a79ee:     if (!queryColumn.getTimeseriesFunction().isEmpty()) {
1:e2a79ee:       columnSchemaByParentName = aggregationDataMapSchema
1:e2a79ee:           .getTimeseriesChildColBasedByParent(queryColumn.getColumnSchema().getColumnName(),
1:e2a79ee:               queryColumn.getTimeseriesFunction());
1:e2a79ee:     } else {
1:e2a79ee:       columnSchemaByParentName = aggregationDataMapSchema
1:e2a79ee:           .getNonAggNonTimeseriesChildColBasedByParent(
1:e2a79ee:               queryColumn.getColumnSchema().getColumnName());
1:e2a79ee:     }
1:e2a79ee:     return columnSchemaByParentName;
1:e2a79ee:   }
1:e4f2843: }
============================================================================
author:kumarvishal
-------------------------------------------------------------------------------
commit:c70e73f
/////////////////////////////////////////////////////////////////////////
1:   private AggregateQueryPlan aggregateQueryPlan;
1:   public AggregateTableSelector(AggregateQueryPlan aggregateQueryPlan, CarbonTable parentTable) {
1:     this.aggregateQueryPlan = aggregateQueryPlan;
/////////////////////////////////////////////////////////////////////////
1:     List<QueryColumn> projectionColumn = aggregateQueryPlan.getProjectionColumn();
1:     List<QueryColumn> filterColumns = aggregateQueryPlan.getFilterColumns();
/////////////////////////////////////////////////////////////////////////
1:             break;
/////////////////////////////////////////////////////////////////////////
1:             break;
/////////////////////////////////////////////////////////////////////////
commit:e2a79ee
/////////////////////////////////////////////////////////////////////////
1:           ColumnSchema columnSchemaByParentName =
1:               getColumnSchema(queryColumn, aggregationDataMapSchema);
/////////////////////////////////////////////////////////////////////////
1:           ColumnSchema columnSchemaByParentName =
1:               getColumnSchema(queryColumn, aggregationDataMapSchema);
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Below method will be used to get column schema for projection and
1:    * filter query column
1:    *
1:    * @param queryColumn              query column
1:    * @param aggregationDataMapSchema selected data map schema
1:    * @return column schema
1:    */
1:   private ColumnSchema getColumnSchema(QueryColumn queryColumn,
1:       AggregationDataMapSchema aggregationDataMapSchema) {
1:     ColumnSchema columnSchemaByParentName = null;
1:     if (!queryColumn.getTimeseriesFunction().isEmpty()) {
1:       columnSchemaByParentName = aggregationDataMapSchema
1:           .getTimeseriesChildColBasedByParent(queryColumn.getColumnSchema().getColumnName(),
1:               queryColumn.getTimeseriesFunction());
1:     } else {
1:       columnSchemaByParentName = aggregationDataMapSchema
1:           .getNonAggNonTimeseriesChildColBasedByParent(
1:               queryColumn.getColumnSchema().getColumnName());
1:     }
1:     return columnSchemaByParentName;
1:   }
commit:e4f2843
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.preagg;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.metadata.schema.table.AggregationDataMapSchema;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: 
1: /**
1:  * Below class will be used to select the aggregate table based
1:  * query plan. Rules for selecting the aggregate table is below:
1:  * 1. Select all aggregate table based on projection
1:  * 2. select aggregate table based on filter exp,
1:  * 2. select if aggregate tables based on aggregate columns
1:  */
1: public class AggregateTableSelector {
1: 
1:   /**
1:    * current query plan
1:    */
0:   private QueryPlan queryPlan;
1: 
1:   /**
1:    * parent table
1:    */
1:   private CarbonTable parentTable;
1: 
0:   public AggregateTableSelector(QueryPlan queryPlan, CarbonTable parentTable) {
0:     this.queryPlan = queryPlan;
1:     this.parentTable = parentTable;
1:   }
1: 
1:   /**
1:    * Below method will be used to select pre aggregate tables based on query plan
1:    * Rules for selecting the aggregate table is below:
1:    * 1. Select all aggregate table based on projection
1:    * 2. select aggregate table based on filter exp,
1:    * 2. select if aggregate tables based on aggregate columns
1:    *
1:    * @return selected pre aggregate table schema
1:    */
1:   public List<DataMapSchema> selectPreAggDataMapSchema() {
0:     List<QueryColumn> projectionColumn = queryPlan.getProjectionColumn();
0:     List<QueryColumn> aggColumns = queryPlan.getAggregationColumns();
0:     List<QueryColumn> filterColumns = queryPlan.getFilterColumns();
1:     List<DataMapSchema> dataMapSchemaList = parentTable.getTableInfo().getDataMapSchemaList();
1:     List<DataMapSchema> selectedDataMapSchema = new ArrayList<>();
1:     boolean isMatch;
1:     // match projection columns
1:     if (null != projectionColumn && !projectionColumn.isEmpty()) {
1:       for (DataMapSchema dmSchema : dataMapSchemaList) {
1:         AggregationDataMapSchema aggregationDataMapSchema = (AggregationDataMapSchema) dmSchema;
1:         isMatch = true;
1:         for (QueryColumn queryColumn : projectionColumn) {
0:           ColumnSchema columnSchemaByParentName = aggregationDataMapSchema
0:               .getNonAggChildColBasedByParent(queryColumn.getColumnSchema().getColumnName());
1:           if (null == columnSchemaByParentName) {
1:             isMatch = false;
1:           }
1:         }
1:         if (isMatch) {
1:           selectedDataMapSchema.add(dmSchema);
1:         }
1:       }
1:       // if projection column is present but selected table list size is zero then
1:       if (selectedDataMapSchema.size() == 0) {
1:         return selectedDataMapSchema;
1:       }
1:     }
1: 
1:     // match filter columns
1:     if (null != filterColumns && !filterColumns.isEmpty()) {
1:       List<DataMapSchema> dmSchemaToIterate =
1:           selectedDataMapSchema.isEmpty() ? dataMapSchemaList : selectedDataMapSchema;
1:       selectedDataMapSchema = new ArrayList<>();
1:       for (DataMapSchema dmSchema : dmSchemaToIterate) {
1:         isMatch = true;
1:         for (QueryColumn queryColumn : filterColumns) {
1:           AggregationDataMapSchema aggregationDataMapSchema = (AggregationDataMapSchema) dmSchema;
0:           ColumnSchema columnSchemaByParentName = aggregationDataMapSchema
0:               .getNonAggChildColBasedByParent(queryColumn.getColumnSchema().getColumnName());
1:           if (null == columnSchemaByParentName) {
1:             isMatch = false;
1:           }
1:         }
1:         if (isMatch) {
1:           selectedDataMapSchema.add(dmSchema);
1:         }
1:       }
1:       // if filter column is present and selection size is zero then return
1:       if (selectedDataMapSchema.size() == 0) {
1:         return selectedDataMapSchema;
1:       }
1:     }
0:     // match aggregation columns
0:     if (null != aggColumns && !aggColumns.isEmpty()) {
1:       List<DataMapSchema> dmSchemaToIterate =
1:           selectedDataMapSchema.isEmpty() ? dataMapSchemaList : selectedDataMapSchema;
1:       selectedDataMapSchema = new ArrayList<>();
1:       for (DataMapSchema dmSchema : dmSchemaToIterate) {
1:         isMatch = true;
0:         for (QueryColumn queryColumn : aggColumns) {
1:           AggregationDataMapSchema aggregationDataMapSchema = (AggregationDataMapSchema) dmSchema;
0:           if (!aggregationDataMapSchema
0:               .isColumnWithAggFunctionExists(queryColumn.getColumnSchema().getColumnName(),
0:                   queryColumn.getAggFunction())) {
1:             isMatch = false;
1:           }
1:         }
1:         if (isMatch) {
1:           selectedDataMapSchema.add(dmSchema);
1:         }
1:       }
1:     }
1:     return selectedDataMapSchema;
1:   }
1: }
============================================================================