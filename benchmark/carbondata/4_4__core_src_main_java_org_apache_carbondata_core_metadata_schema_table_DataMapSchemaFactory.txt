1:e4f2843: /*
1:e4f2843:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e4f2843:  * contributor license agreements.  See the NOTICE file distributed with
1:e4f2843:  * this work for additional information regarding copyright ownership.
1:e4f2843:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e4f2843:  * (the "License"); you may not use this file except in compliance with
1:e4f2843:  * the License.  You may obtain a copy of the License at
1:e4f2843:  *
1:e4f2843:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e4f2843:  *
1:e4f2843:  * Unless required by applicable law or agreed to in writing, software
1:e4f2843:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e4f2843:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e4f2843:  * See the License for the specific language governing permissions and
1:e4f2843:  * limitations under the License.
1:e4f2843:  */
1:e4f2843: package org.apache.carbondata.core.metadata.schema.table;
1:e4f2843: 
1:05086e5: import org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider;
1:e4f2843: 
1:e4f2843: public class DataMapSchemaFactory {
1:e4f2843:   public static final DataMapSchemaFactory INSTANCE = new DataMapSchemaFactory();
1:e4f2843: 
1:e4f2843:   /**
1:e4f2843:    * Below class will be used to get data map schema object
1:e4f2843:    * based on class name
1:89a12af:    * @param providerName
1:e4f2843:    * @return data map schema
1:e4f2843:    */
1:89a12af:   public DataMapSchema getDataMapSchema(String dataMapName, String providerName) {
1:ce2d1a3:     if (providerName.equalsIgnoreCase(DataMapClassProvider.PREAGGREGATE.toString()) || providerName
1:ce2d1a3:         .equalsIgnoreCase(DataMapClassProvider.PREAGGREGATE.getClassName())) {
1:89a12af:       return new AggregationDataMapSchema(dataMapName, providerName);
1:ce2d1a3:     } else if (providerName.equalsIgnoreCase(DataMapClassProvider.TIMESERIES.toString())
1:ce2d1a3:         || providerName.equalsIgnoreCase(DataMapClassProvider.TIMESERIES.getClassName())) {
1:89a12af:       return new AggregationDataMapSchema(dataMapName, providerName);
1:46d9bf9:     } else {
1:89a12af:       return new DataMapSchema(dataMapName, providerName);
1:e4f2843:     }
1:e4f2843:   }
1:e4f2843: }
============================================================================
author:Indhumathi27
-------------------------------------------------------------------------------
commit:ce2d1a3
/////////////////////////////////////////////////////////////////////////
1:     if (providerName.equalsIgnoreCase(DataMapClassProvider.PREAGGREGATE.toString()) || providerName
1:         .equalsIgnoreCase(DataMapClassProvider.PREAGGREGATE.getClassName())) {
1:     } else if (providerName.equalsIgnoreCase(DataMapClassProvider.TIMESERIES.toString())
1:         || providerName.equalsIgnoreCase(DataMapClassProvider.TIMESERIES.getClassName())) {
author:ravipesala
-------------------------------------------------------------------------------
commit:05086e5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider;
/////////////////////////////////////////////////////////////////////////
0:     if (providerName.equalsIgnoreCase(DataMapClassProvider.PREAGGREGATE.toString())) {
0:     } else if (providerName.equalsIgnoreCase(DataMapClassProvider.TIMESERIES.toString())) {
commit:46d9bf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.schema.datamap.DataMapProvider;
/////////////////////////////////////////////////////////////////////////
0:     if (DataMapProvider.PREAGGREGATE.getClassName().equals(className) ||
0:         DataMapProvider.TIMESERIES.getClassName().equals(className)) {
0:       return new AggregationDataMapSchema(dataMapName, className);
1:     } else {
0:       return new DataMapSchema(dataMapName, className);
author:Jacky Li
-------------------------------------------------------------------------------
commit:89a12af
/////////////////////////////////////////////////////////////////////////
1:    * @param providerName
1:   public DataMapSchema getDataMapSchema(String dataMapName, String providerName) {
0:     if (providerName.equalsIgnoreCase(DataMapProvider.PREAGGREGATE.toString())) {
1:       return new AggregationDataMapSchema(dataMapName, providerName);
0:     } else if (providerName.equalsIgnoreCase(DataMapProvider.TIMESERIES.toString())) {
1:       return new AggregationDataMapSchema(dataMapName, providerName);
1:       return new DataMapSchema(dataMapName, providerName);
author:kumarvishal
-------------------------------------------------------------------------------
commit:e4f2843
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.metadata.schema.table;
1: 
0: import static org.apache.carbondata.core.constants.CarbonCommonConstants.AGGREGATIONDATAMAPSCHEMA;
1: 
1: public class DataMapSchemaFactory {
1:   public static final DataMapSchemaFactory INSTANCE = new DataMapSchemaFactory();
1: 
1:   /**
1:    * Below class will be used to get data map schema object
1:    * based on class name
0:    * @param className
1:    * @return data map schema
1:    */
0:   public DataMapSchema getDataMapSchema(String dataMapName, String className) {
0:     switch (className) {
0:       case AGGREGATIONDATAMAPSCHEMA:
0:         return new AggregationDataMapSchema(dataMapName, className);
0:       default:
0:         return new DataMapSchema(dataMapName, className);
1:     }
1:   }
1: }
============================================================================