1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
3:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
5:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.core.util;
5:cd6a4ff: 
1:cd6a4ff: import junit.framework.TestCase;
1:f012f5b: 
1:0312e9d: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:cd6a4ff: import org.apache.carbondata.core.util.ByteUtil.UnsafeComparer;
1:f012f5b: 
1:cd6a4ff: import org.junit.Before;
1:cd6a4ff: import org.junit.Test;
1:cd6a4ff: 
1:cd6a4ff: import java.nio.ByteBuffer;
1:cd6a4ff: import java.nio.charset.Charset;
1:cd6a4ff: 
5:cd6a4ff: /**
1:cd6a4ff:  * This test will test the functionality of the Byte Util
1:cd6a4ff:  * for the comparision of 2 byte buffers
1:cd6a4ff:  */
1:cd6a4ff: public class ByteUtilTest extends TestCase {
1:cd6a4ff: 
1:f012f5b:   String dimensionValue1 = "aaaaaaaa1235";
1:f012f5b:   String dimensionValue2 = "aaaaaaaa1234";
1:f012f5b:   private ByteBuffer buff1;
1:f012f5b:   private ByteBuffer buff2;
1:cd6a4ff: 
1:f012f5b:   /**
1:f012f5b:    * This method will form one single byte [] for all the high card dims.
1:f012f5b:    *
1:f012f5b:    * @param byteBufferArr ByteBuffer array
1:f012f5b:    * @return byte array
1:f012f5b:    */
1:f012f5b:   public static byte[] packByteBufferIntoSingleByteArray(ByteBuffer[] byteBufferArr) {
1:f012f5b:     // for empty array means there is no data to remove dictionary.
1:f012f5b:     if (null == byteBufferArr || byteBufferArr.length == 0) {
1:f012f5b:       return null;
1:f012f5b:     }
1:f012f5b:     int noOfCol = byteBufferArr.length;
1:f012f5b:     short toDetermineLengthOfByteArr = 2;
1:f012f5b:     short offsetLen = (short) (noOfCol * 2 + toDetermineLengthOfByteArr);
1:f012f5b:     int totalBytes = calculateTotalBytes(byteBufferArr) + offsetLen;
1:cd6a4ff: 
1:f012f5b:     ByteBuffer buffer = ByteBuffer.allocate(totalBytes);
1:cd6a4ff: 
1:f012f5b:     // write the length of the byte [] as first short
1:f012f5b:     buffer.putShort((short) (totalBytes - toDetermineLengthOfByteArr));
1:f012f5b:     // writing the offset of the first element.
1:f012f5b:     buffer.putShort(offsetLen);
1:cd6a4ff: 
1:f012f5b:     // prepare index for byte []
1:f012f5b:     for (int index = 0; index < byteBufferArr.length - 1; index++) {
1:f012f5b:       ByteBuffer individualCol = byteBufferArr[index];
1:f012f5b:       // short lengthOfbytes = individualCol.getShort();
1:f012f5b:       int noOfBytes = individualCol.capacity();
1:cd6a4ff: 
1:f012f5b:       buffer.putShort((short) (offsetLen + noOfBytes));
1:f012f5b:       offsetLen += noOfBytes;
1:f012f5b:       individualCol.rewind();
10:cd6a4ff:     }
1:cd6a4ff: 
1:f012f5b:     // put actual data.
1:f012f5b:     for (int index = 0; index < byteBufferArr.length; index++) {
1:f012f5b:       ByteBuffer individualCol = byteBufferArr[index];
1:f012f5b:       buffer.put(individualCol.array());
1:cd6a4ff:     }
1:cd6a4ff: 
1:f012f5b:     buffer.rewind();
1:f012f5b:     return buffer.array();
1:f012f5b: 
1:f012f5b:   }
1:cd6a4ff: 
1:f012f5b:   /**
1:f012f5b:    * To calculate the total bytes in byte Buffer[].
1:f012f5b:    *
1:f012f5b:    * @param byteBufferArr
1:f012f5b:    * @return
1:f012f5b:    */
1:f012f5b:   private static int calculateTotalBytes(ByteBuffer[] byteBufferArr) {
1:f012f5b:     int total = 0;
1:f012f5b:     for (int index = 0; index < byteBufferArr.length; index++) {
1:f012f5b:       total += byteBufferArr[index].capacity();
1:cd6a4ff:     }
1:f012f5b:     return total;
1:f012f5b:   }
1:cd6a4ff: 
1:f012f5b:   /**
1:f012f5b:    * @throws Exception
1:f012f5b:    */
1:f012f5b:   @Before
1:f012f5b:   public void setUp() throws Exception {
1:cd6a4ff: 
1:f012f5b:   }
1:cd6a4ff: 
1:f012f5b:   @Test
1:f012f5b:   public void testLessThan() {
1:f012f5b:     dimensionValue1 = "aaaaa6aa1235";
1:f012f5b:     dimensionValue2 = "aaaaa5aa1234";
1:cd6a4ff: 
1:f012f5b:     prepareBuffers();
1:f012f5b:     assertFalse(UnsafeComparer.INSTANCE.compareTo(buff1, buff2) < 0);
1:f012f5b:   }
1:cd6a4ff: 
1:f012f5b:   @Test
1:f012f5b:   public void testIntConversion() {
1:f012f5b:     byte[] data = new byte[4];
1:f012f5b:     ByteUtil.setInt(data, 0, 968);
1:f012f5b:     assertEquals(ByteUtil.toInt(data, 0), 968);
1:f012f5b:   }
1:cd6a4ff: 
1:f012f5b:   @Test
1:f012f5b:   public void testEqualToCase() {
1:f012f5b:     dimensionValue1 = "aaaaaaaa1234";
1:f012f5b:     dimensionValue2 = "aaaaaaaa1234";
1:cd6a4ff: 
1:f012f5b:     prepareBuffers();
1:f012f5b:     assertTrue(UnsafeComparer.INSTANCE.compareTo(buff1, buff2) == 0);
1:f012f5b:   }
1:cd6a4ff: 
1:f012f5b:   @Test
1:f012f5b:   public void testLessThanInBoundaryCondition() {
1:f012f5b:     dimensionValue1 = "aaaaaaaa12341";
1:f012f5b:     dimensionValue2 = "aaaaaaaa12344";
1:cd6a4ff: 
1:f012f5b:     prepareBuffers();
1:f012f5b:     assertTrue(UnsafeComparer.INSTANCE.compareTo(buff1, buff2) < 0);
1:f012f5b:   }
1:cd6a4ff: 
1:f012f5b:   /**
1:f012f5b:    * This will prepare the byte buffers in the required format for comparision.
1:f012f5b:    */
1:f012f5b:   private void prepareBuffers() {
1:f012f5b:     ByteBuffer[] out1 = new ByteBuffer[1];
1:f012f5b:     ByteBuffer buffer = ByteBuffer.allocate(dimensionValue1.length());
1:f012f5b:     buffer.put(dimensionValue1.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
1:f012f5b:     buffer.rewind();
1:f012f5b:     out1[0] = buffer;
1:cd6a4ff: 
1:f012f5b:     ByteBuffer[] out2 = new ByteBuffer[1];
1:cd6a4ff: 
1:f012f5b:     ByteBuffer buffer2 = ByteBuffer.allocate(dimensionValue2.length());
1:f012f5b:     buffer2.put(dimensionValue2.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
1:f012f5b:     buffer2.rewind();
1:f012f5b:     out2[0] = buffer2;
1:cd6a4ff: 
1:f012f5b:     byte[] arr1 = packByteBufferIntoSingleByteArray(out1);
1:f012f5b:     byte[] arr2 = packByteBufferIntoSingleByteArray(out2);
1:cd6a4ff: 
1:f012f5b:     buff1 = ByteBuffer.wrap(arr1);
1:f012f5b: 
1:f012f5b:     buff1.position(4);
1:f012f5b:     buff1.limit(buff1.position() + dimensionValue1.length());
1:f012f5b: 
1:f012f5b:     buff2 = ByteBuffer.wrap(arr2);
1:f012f5b:     buff2.position(4);
1:f012f5b:     buff2.limit(buff2.position() + dimensionValue2.length());
1:f012f5b:   }
1:f012f5b: 
1:f012f5b:   @Test
1:f012f5b:   public void testToBytes() {
1:f012f5b:     assertTrue(ByteUtil.toBoolean(ByteUtil.toBytes(true)));
1:f012f5b:     assertFalse(ByteUtil.toBoolean(ByteUtil.toBytes(false)));
1:f012f5b: 
1:f012f5b:     assertEquals(Short.MAX_VALUE,
1:f012f5b:         ByteUtil.toShort(ByteUtil.toBytes(Short.MAX_VALUE), 0, 2));
1:f012f5b:     assertEquals((short) (Short.MAX_VALUE / 2),
1:f012f5b:         ByteUtil.toShort(ByteUtil.toBytes((short) (Short.MAX_VALUE / 2)), 0, 2));
1:f012f5b:     assertEquals((short) 0,
1:f012f5b:         ByteUtil.toShort(ByteUtil.toBytes((short) 0), 0, 2));
1:f012f5b:     assertEquals((short) (Short.MIN_VALUE / 2),
1:f012f5b:         ByteUtil.toShort(ByteUtil.toBytes((short) (Short.MIN_VALUE / 2)), 0, 2));
1:f012f5b:     assertEquals(Short.MIN_VALUE,
1:f012f5b:         ByteUtil.toShort(ByteUtil.toBytes(Short.MIN_VALUE), 0, 2));
1:f012f5b: 
1:f012f5b:     assertEquals(Integer.MAX_VALUE,
1:f012f5b:         ByteUtil.toInt(ByteUtil.toBytes(Integer.MAX_VALUE), 0, 4));
1:f012f5b:     assertEquals(Integer.MAX_VALUE / 2,
1:f012f5b:         ByteUtil.toInt(ByteUtil.toBytes(Integer.MAX_VALUE / 2), 0, 4));
1:f012f5b:     assertEquals(0,
1:f012f5b:         ByteUtil.toInt(ByteUtil.toBytes(0), 0, 4));
1:f012f5b:     assertEquals(Integer.MIN_VALUE / 2,
1:f012f5b:         ByteUtil.toInt(ByteUtil.toBytes(Integer.MIN_VALUE / 2), 0, 4));
1:f012f5b:     assertEquals(Integer.MIN_VALUE,
1:f012f5b:         ByteUtil.toInt(ByteUtil.toBytes(Integer.MIN_VALUE), 0, 4));
1:f012f5b: 
1:f012f5b:     assertEquals(Long.MAX_VALUE,
1:f012f5b:         ByteUtil.toLong(ByteUtil.toBytes(Long.MAX_VALUE), 0, 8));
1:f012f5b:     assertEquals(Long.MAX_VALUE / 2,
1:f012f5b:         ByteUtil.toLong(ByteUtil.toBytes(Long.MAX_VALUE / 2), 0, 8));
1:f012f5b:     assertEquals(0L,
1:f012f5b:         ByteUtil.toLong(ByteUtil.toBytes(0L), 0, 8));
1:f012f5b:     assertEquals(Long.MIN_VALUE / 2,
1:f012f5b:         ByteUtil.toLong(ByteUtil.toBytes(Long.MIN_VALUE / 2), 0, 8));
1:f012f5b:     assertEquals(Long.MIN_VALUE,
1:f012f5b:         ByteUtil.toLong(ByteUtil.toBytes(Long.MIN_VALUE), 0, 8));
1:f012f5b: 
1:f012f5b:     assertEquals(Double.MAX_VALUE,
1:f012f5b:         ByteUtil.toDouble(ByteUtil.toBytes(Double.MAX_VALUE), 0, 8));
1:f012f5b:     assertEquals(Double.MAX_VALUE / 2,
1:f012f5b:         ByteUtil.toDouble(ByteUtil.toBytes(Double.MAX_VALUE / 2), 0, 8));
1:f012f5b:     assertEquals((double) 0,
1:f012f5b:         ByteUtil.toDouble(ByteUtil.toBytes((double) 0), 0, 8));
1:f012f5b:     assertEquals(Double.MIN_VALUE / 2,
1:f012f5b:         ByteUtil.toDouble(ByteUtil.toBytes(Double.MIN_VALUE / 2), 0, 8));
1:f012f5b:     assertEquals(Double.MIN_VALUE,
1:f012f5b:         ByteUtil.toDouble(ByteUtil.toBytes(Double.MIN_VALUE), 0, 8));
1:f012f5b:   }
1:f012f5b: 
1:f012f5b:   @Test
1:f012f5b:   public void testToXorBytes() {
1:f012f5b:     assertEquals(Short.MAX_VALUE,
1:f012f5b:         ByteUtil.toXorShort(ByteUtil.toXorBytes(Short.MAX_VALUE), 0, 2));
1:f012f5b:     assertEquals((short) (Short.MAX_VALUE / 2),
1:f012f5b:         ByteUtil.toXorShort(ByteUtil.toXorBytes((short) (Short.MAX_VALUE / 2)), 0, 2));
1:f012f5b:     assertEquals((short) 0,
1:f012f5b:         ByteUtil.toXorShort(ByteUtil.toXorBytes((short) 0), 0, 2));
1:f012f5b:     assertEquals((short) (Short.MIN_VALUE / 2),
1:f012f5b:         ByteUtil.toXorShort(ByteUtil.toXorBytes((short) (Short.MIN_VALUE / 2)), 0, 2));
1:f012f5b:     assertEquals(Short.MIN_VALUE,
1:f012f5b:         ByteUtil.toXorShort(ByteUtil.toXorBytes(Short.MIN_VALUE), 0, 2));
1:f012f5b: 
1:f012f5b:     assertEquals(Integer.MAX_VALUE,
1:f012f5b:         ByteUtil.toXorInt(ByteUtil.toXorBytes(Integer.MAX_VALUE), 0, 4));
1:f012f5b:     assertEquals(Integer.MAX_VALUE / 2,
1:f012f5b:         ByteUtil.toXorInt(ByteUtil.toXorBytes(Integer.MAX_VALUE / 2), 0, 4));
1:f012f5b:     assertEquals(0,
1:f012f5b:         ByteUtil.toXorInt(ByteUtil.toXorBytes(0), 0, 4));
1:f012f5b:     assertEquals(Integer.MIN_VALUE / 2,
1:f012f5b:         ByteUtil.toXorInt(ByteUtil.toXorBytes(Integer.MIN_VALUE / 2), 0, 4));
1:f012f5b:     assertEquals(Integer.MIN_VALUE,
1:f012f5b:         ByteUtil.toXorInt(ByteUtil.toXorBytes(Integer.MIN_VALUE), 0, 4));
1:f012f5b: 
1:f012f5b:     assertEquals(Long.MAX_VALUE,
1:f012f5b:         ByteUtil.toXorLong(ByteUtil.toXorBytes(Long.MAX_VALUE), 0, 8));
1:f012f5b:     assertEquals(Long.MAX_VALUE / 2,
1:f012f5b:         ByteUtil.toXorLong(ByteUtil.toXorBytes(Long.MAX_VALUE / 2), 0, 8));
1:f012f5b:     assertEquals(0L,
1:f012f5b:         ByteUtil.toXorLong(ByteUtil.toXorBytes(0L), 0, 8));
1:f012f5b:     assertEquals(Long.MIN_VALUE / 2,
1:f012f5b:         ByteUtil.toXorLong(ByteUtil.toXorBytes(Long.MIN_VALUE / 2), 0, 8));
1:f012f5b:     assertEquals(Long.MIN_VALUE,
1:f012f5b:         ByteUtil.toXorLong(ByteUtil.toXorBytes(Long.MIN_VALUE), 0, 8));
1:f012f5b: 
1:f012f5b:     assertEquals(Double.MAX_VALUE,
1:f012f5b:         ByteUtil.toXorDouble(ByteUtil.toXorBytes(Double.MAX_VALUE), 0, 8));
1:f012f5b:     assertEquals(Double.MAX_VALUE / 2,
1:f012f5b:         ByteUtil.toXorDouble(ByteUtil.toXorBytes(Double.MAX_VALUE / 2), 0, 8));
1:f012f5b:     assertEquals((double) 0,
1:f012f5b:         ByteUtil.toXorDouble(ByteUtil.toXorBytes((double) 0), 0, 8));
1:f012f5b:     assertEquals(Double.MIN_VALUE / 2,
1:f012f5b:         ByteUtil.toXorDouble(ByteUtil.toXorBytes(Double.MIN_VALUE / 2), 0, 8));
1:f012f5b:     assertEquals(Double.MIN_VALUE,
1:f012f5b:         ByteUtil.toXorDouble(ByteUtil.toXorBytes(Double.MIN_VALUE), 0, 8));
1:f012f5b:   }
1:cd6a4ff: 
1:ceb7c8d: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:f012f5b
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:   String dimensionValue1 = "aaaaaaaa1235";
1:   String dimensionValue2 = "aaaaaaaa1234";
1:   private ByteBuffer buff1;
1:   private ByteBuffer buff2;
1:   /**
1:    * This method will form one single byte [] for all the high card dims.
1:    *
1:    * @param byteBufferArr ByteBuffer array
1:    * @return byte array
1:    */
1:   public static byte[] packByteBufferIntoSingleByteArray(ByteBuffer[] byteBufferArr) {
1:     // for empty array means there is no data to remove dictionary.
1:     if (null == byteBufferArr || byteBufferArr.length == 0) {
1:       return null;
1:     }
1:     int noOfCol = byteBufferArr.length;
1:     short toDetermineLengthOfByteArr = 2;
1:     short offsetLen = (short) (noOfCol * 2 + toDetermineLengthOfByteArr);
1:     int totalBytes = calculateTotalBytes(byteBufferArr) + offsetLen;
1:     ByteBuffer buffer = ByteBuffer.allocate(totalBytes);
1:     // write the length of the byte [] as first short
1:     buffer.putShort((short) (totalBytes - toDetermineLengthOfByteArr));
1:     // writing the offset of the first element.
1:     buffer.putShort(offsetLen);
1:     // prepare index for byte []
1:     for (int index = 0; index < byteBufferArr.length - 1; index++) {
1:       ByteBuffer individualCol = byteBufferArr[index];
1:       // short lengthOfbytes = individualCol.getShort();
1:       int noOfBytes = individualCol.capacity();
1:       buffer.putShort((short) (offsetLen + noOfBytes));
1:       offsetLen += noOfBytes;
1:       individualCol.rewind();
1:     // put actual data.
1:     for (int index = 0; index < byteBufferArr.length; index++) {
1:       ByteBuffer individualCol = byteBufferArr[index];
1:       buffer.put(individualCol.array());
1:     buffer.rewind();
1:     return buffer.array();
1:   }
1: 
1:   /**
1:    * To calculate the total bytes in byte Buffer[].
1:    *
1:    * @param byteBufferArr
1:    * @return
1:    */
1:   private static int calculateTotalBytes(ByteBuffer[] byteBufferArr) {
1:     int total = 0;
1:     for (int index = 0; index < byteBufferArr.length; index++) {
1:       total += byteBufferArr[index].capacity();
1:     return total;
1:   }
1:   /**
1:    * @throws Exception
1:    */
1:   @Before
1:   public void setUp() throws Exception {
1:   }
1:   @Test
1:   public void testLessThan() {
1:     dimensionValue1 = "aaaaa6aa1235";
1:     dimensionValue2 = "aaaaa5aa1234";
1:     prepareBuffers();
1:     assertFalse(UnsafeComparer.INSTANCE.compareTo(buff1, buff2) < 0);
1:   }
1:   @Test
1:   public void testIntConversion() {
1:     byte[] data = new byte[4];
1:     ByteUtil.setInt(data, 0, 968);
1:     assertEquals(ByteUtil.toInt(data, 0), 968);
1:   }
1:   @Test
1:   public void testEqualToCase() {
1:     dimensionValue1 = "aaaaaaaa1234";
1:     dimensionValue2 = "aaaaaaaa1234";
1:     prepareBuffers();
1:     assertTrue(UnsafeComparer.INSTANCE.compareTo(buff1, buff2) == 0);
1:   }
1:   @Test
1:   public void testLessThanInBoundaryCondition() {
1:     dimensionValue1 = "aaaaaaaa12341";
1:     dimensionValue2 = "aaaaaaaa12344";
1:     prepareBuffers();
1:     assertTrue(UnsafeComparer.INSTANCE.compareTo(buff1, buff2) < 0);
1:   }
1:   /**
1:    * This will prepare the byte buffers in the required format for comparision.
1:    */
1:   private void prepareBuffers() {
1:     ByteBuffer[] out1 = new ByteBuffer[1];
1:     ByteBuffer buffer = ByteBuffer.allocate(dimensionValue1.length());
1:     buffer.put(dimensionValue1.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
1:     buffer.rewind();
1:     out1[0] = buffer;
1:     ByteBuffer[] out2 = new ByteBuffer[1];
1:     ByteBuffer buffer2 = ByteBuffer.allocate(dimensionValue2.length());
1:     buffer2.put(dimensionValue2.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
1:     buffer2.rewind();
1:     out2[0] = buffer2;
1:     byte[] arr1 = packByteBufferIntoSingleByteArray(out1);
1:     byte[] arr2 = packByteBufferIntoSingleByteArray(out2);
1:     buff1 = ByteBuffer.wrap(arr1);
1: 
1:     buff1.position(4);
1:     buff1.limit(buff1.position() + dimensionValue1.length());
1: 
1:     buff2 = ByteBuffer.wrap(arr2);
1:     buff2.position(4);
1:     buff2.limit(buff2.position() + dimensionValue2.length());
1:   }
1: 
1:   @Test
1:   public void testToBytes() {
1:     assertTrue(ByteUtil.toBoolean(ByteUtil.toBytes(true)));
1:     assertFalse(ByteUtil.toBoolean(ByteUtil.toBytes(false)));
1: 
1:     assertEquals(Short.MAX_VALUE,
1:         ByteUtil.toShort(ByteUtil.toBytes(Short.MAX_VALUE), 0, 2));
1:     assertEquals((short) (Short.MAX_VALUE / 2),
1:         ByteUtil.toShort(ByteUtil.toBytes((short) (Short.MAX_VALUE / 2)), 0, 2));
1:     assertEquals((short) 0,
1:         ByteUtil.toShort(ByteUtil.toBytes((short) 0), 0, 2));
1:     assertEquals((short) (Short.MIN_VALUE / 2),
1:         ByteUtil.toShort(ByteUtil.toBytes((short) (Short.MIN_VALUE / 2)), 0, 2));
1:     assertEquals(Short.MIN_VALUE,
1:         ByteUtil.toShort(ByteUtil.toBytes(Short.MIN_VALUE), 0, 2));
1: 
1:     assertEquals(Integer.MAX_VALUE,
1:         ByteUtil.toInt(ByteUtil.toBytes(Integer.MAX_VALUE), 0, 4));
1:     assertEquals(Integer.MAX_VALUE / 2,
1:         ByteUtil.toInt(ByteUtil.toBytes(Integer.MAX_VALUE / 2), 0, 4));
1:     assertEquals(0,
1:         ByteUtil.toInt(ByteUtil.toBytes(0), 0, 4));
1:     assertEquals(Integer.MIN_VALUE / 2,
1:         ByteUtil.toInt(ByteUtil.toBytes(Integer.MIN_VALUE / 2), 0, 4));
1:     assertEquals(Integer.MIN_VALUE,
1:         ByteUtil.toInt(ByteUtil.toBytes(Integer.MIN_VALUE), 0, 4));
1: 
1:     assertEquals(Long.MAX_VALUE,
1:         ByteUtil.toLong(ByteUtil.toBytes(Long.MAX_VALUE), 0, 8));
1:     assertEquals(Long.MAX_VALUE / 2,
1:         ByteUtil.toLong(ByteUtil.toBytes(Long.MAX_VALUE / 2), 0, 8));
1:     assertEquals(0L,
1:         ByteUtil.toLong(ByteUtil.toBytes(0L), 0, 8));
1:     assertEquals(Long.MIN_VALUE / 2,
1:         ByteUtil.toLong(ByteUtil.toBytes(Long.MIN_VALUE / 2), 0, 8));
1:     assertEquals(Long.MIN_VALUE,
1:         ByteUtil.toLong(ByteUtil.toBytes(Long.MIN_VALUE), 0, 8));
1: 
1:     assertEquals(Double.MAX_VALUE,
1:         ByteUtil.toDouble(ByteUtil.toBytes(Double.MAX_VALUE), 0, 8));
1:     assertEquals(Double.MAX_VALUE / 2,
1:         ByteUtil.toDouble(ByteUtil.toBytes(Double.MAX_VALUE / 2), 0, 8));
1:     assertEquals((double) 0,
1:         ByteUtil.toDouble(ByteUtil.toBytes((double) 0), 0, 8));
1:     assertEquals(Double.MIN_VALUE / 2,
1:         ByteUtil.toDouble(ByteUtil.toBytes(Double.MIN_VALUE / 2), 0, 8));
1:     assertEquals(Double.MIN_VALUE,
1:         ByteUtil.toDouble(ByteUtil.toBytes(Double.MIN_VALUE), 0, 8));
1:   }
1: 
1:   @Test
1:   public void testToXorBytes() {
1:     assertEquals(Short.MAX_VALUE,
1:         ByteUtil.toXorShort(ByteUtil.toXorBytes(Short.MAX_VALUE), 0, 2));
1:     assertEquals((short) (Short.MAX_VALUE / 2),
1:         ByteUtil.toXorShort(ByteUtil.toXorBytes((short) (Short.MAX_VALUE / 2)), 0, 2));
1:     assertEquals((short) 0,
1:         ByteUtil.toXorShort(ByteUtil.toXorBytes((short) 0), 0, 2));
1:     assertEquals((short) (Short.MIN_VALUE / 2),
1:         ByteUtil.toXorShort(ByteUtil.toXorBytes((short) (Short.MIN_VALUE / 2)), 0, 2));
1:     assertEquals(Short.MIN_VALUE,
1:         ByteUtil.toXorShort(ByteUtil.toXorBytes(Short.MIN_VALUE), 0, 2));
1: 
1:     assertEquals(Integer.MAX_VALUE,
1:         ByteUtil.toXorInt(ByteUtil.toXorBytes(Integer.MAX_VALUE), 0, 4));
1:     assertEquals(Integer.MAX_VALUE / 2,
1:         ByteUtil.toXorInt(ByteUtil.toXorBytes(Integer.MAX_VALUE / 2), 0, 4));
1:     assertEquals(0,
1:         ByteUtil.toXorInt(ByteUtil.toXorBytes(0), 0, 4));
1:     assertEquals(Integer.MIN_VALUE / 2,
1:         ByteUtil.toXorInt(ByteUtil.toXorBytes(Integer.MIN_VALUE / 2), 0, 4));
1:     assertEquals(Integer.MIN_VALUE,
1:         ByteUtil.toXorInt(ByteUtil.toXorBytes(Integer.MIN_VALUE), 0, 4));
1: 
1:     assertEquals(Long.MAX_VALUE,
1:         ByteUtil.toXorLong(ByteUtil.toXorBytes(Long.MAX_VALUE), 0, 8));
1:     assertEquals(Long.MAX_VALUE / 2,
1:         ByteUtil.toXorLong(ByteUtil.toXorBytes(Long.MAX_VALUE / 2), 0, 8));
1:     assertEquals(0L,
1:         ByteUtil.toXorLong(ByteUtil.toXorBytes(0L), 0, 8));
1:     assertEquals(Long.MIN_VALUE / 2,
1:         ByteUtil.toXorLong(ByteUtil.toXorBytes(Long.MIN_VALUE / 2), 0, 8));
1:     assertEquals(Long.MIN_VALUE,
1:         ByteUtil.toXorLong(ByteUtil.toXorBytes(Long.MIN_VALUE), 0, 8));
1: 
1:     assertEquals(Double.MAX_VALUE,
1:         ByteUtil.toXorDouble(ByteUtil.toXorBytes(Double.MAX_VALUE), 0, 8));
1:     assertEquals(Double.MAX_VALUE / 2,
1:         ByteUtil.toXorDouble(ByteUtil.toXorBytes(Double.MAX_VALUE / 2), 0, 8));
1:     assertEquals((double) 0,
1:         ByteUtil.toXorDouble(ByteUtil.toXorBytes((double) 0), 0, 8));
1:     assertEquals(Double.MIN_VALUE / 2,
1:         ByteUtil.toXorDouble(ByteUtil.toXorBytes(Double.MIN_VALUE / 2), 0, 8));
1:     assertEquals(Double.MIN_VALUE,
1:         ByteUtil.toXorDouble(ByteUtil.toXorBytes(Double.MIN_VALUE), 0, 8));
1:   }
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:kumarvishal09
-------------------------------------------------------------------------------
commit:ceb7c8d
/////////////////////////////////////////////////////////////////////////
0:     @Test
0:     public void testIntConversion() {
0:         byte[] data = new byte[4];
0:         ByteUtil.setInt(data, 0, 968);
0:         assertEquals(ByteUtil.toInt(data, 0), 968);
1:     }
author:foryou2030
-------------------------------------------------------------------------------
commit:0312e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
/////////////////////////////////////////////////////////////////////////
0:         buffer.put(dimensionValue1.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
/////////////////////////////////////////////////////////////////////////
0:         buffer2.put(dimensionValue2.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.util;
1: 
1: import junit.framework.TestCase;
1: import org.apache.carbondata.core.util.ByteUtil.UnsafeComparer;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import java.nio.ByteBuffer;
1: import java.nio.charset.Charset;
1: 
1: 
1: /**
1:  * This test will test the functionality of the Byte Util
1:  * for the comparision of 2 byte buffers
1:  */
1: public class ByteUtilTest extends TestCase {
1: 
0:     String dimensionValue1 = "aaaaaaaa1235";
0:     String dimensionValue2 = "aaaaaaaa1234";
0:     private ByteBuffer buff1;
0:     private ByteBuffer buff2;
1: 
1:     /**
0:      * This method will form one single byte [] for all the high card dims.
1:      *
0:      * @param byteBufferArr
0:      * @return
1:      */
0:     public static byte[] packByteBufferIntoSingleByteArray(
0:             ByteBuffer[] byteBufferArr) {
0:         // for empty array means there is no data to remove dictionary.
0:         if (null == byteBufferArr || byteBufferArr.length == 0) {
0:             return null;
1:         }
0:         int noOfCol = byteBufferArr.length;
0:         short toDetermineLengthOfByteArr = 2;
0:         short offsetLen = (short) (noOfCol * 2 + toDetermineLengthOfByteArr);
0:         int totalBytes = calculateTotalBytes(byteBufferArr) + offsetLen;
1: 
0:         ByteBuffer buffer = ByteBuffer.allocate(totalBytes);
1: 
0:         // write the length of the byte [] as first short
0:         buffer.putShort((short) (totalBytes - toDetermineLengthOfByteArr));
0:         // writing the offset of the first element.
0:         buffer.putShort(offsetLen);
1: 
0:         // prepare index for byte []
0:         for (int index = 0; index < byteBufferArr.length - 1; index++) {
0:             ByteBuffer individualCol = byteBufferArr[index];
0:             // short lengthOfbytes = individualCol.getShort();
0:             int noOfBytes = individualCol.capacity();
1: 
0:             buffer.putShort((short) (offsetLen + noOfBytes));
0:             offsetLen += noOfBytes;
0:             individualCol.rewind();
1:         }
1: 
0:         // put actual data.
0:         for (int index = 0; index < byteBufferArr.length; index++) {
0:             ByteBuffer individualCol = byteBufferArr[index];
0:             buffer.put(individualCol.array());
1:         }
1: 
0:         buffer.rewind();
0:         return buffer.array();
1: 
1:     }
1: 
1:     /**
0:      * To calculate the total bytes in byte Buffer[].
1:      *
0:      * @param byteBufferArr
0:      * @return
1:      */
0:     private static int calculateTotalBytes(ByteBuffer[] byteBufferArr) {
0:         int total = 0;
0:         for (int index = 0; index < byteBufferArr.length; index++) {
0:             total += byteBufferArr[index].capacity();
1:         }
0:         return total;
1:     }
1: 
1:     /**
0:      * @throws Exception
1:      */
0:     @Before
0:     public void setUp() throws Exception {
1: 
1:     }
1: 
0:     @Test
0:     public void testLessThan() {
0:         dimensionValue1 = "aaaaa6aa1235";
0:         dimensionValue2 = "aaaaa5aa1234";
1: 
0:         prepareBuffers();
0:         assertFalse(UnsafeComparer.INSTANCE.compareTo(buff1, buff2) < 0);
1:     }
1: 
0:     @Test
0:     public void testEqualToCase() {
0:         dimensionValue1 = "aaaaaaaa1234";
0:         dimensionValue2 = "aaaaaaaa1234";
1: 
0:         prepareBuffers();
0:         assertTrue(UnsafeComparer.INSTANCE.compareTo(buff1, buff2) == 0);
1:     }
1: 
0:     @Test
0:     public void testLessThanInBoundaryCondition() {
0:         dimensionValue1 = "aaaaaaaa12341";
0:         dimensionValue2 = "aaaaaaaa12344";
1: 
0:         prepareBuffers();
0:         assertTrue(UnsafeComparer.INSTANCE.compareTo(buff1, buff2) < 0);
1:     }
1: 
1:     /**
0:      * This will prepare the byte buffers in the required format for comparision.
1:      */
0:     private void prepareBuffers() {
0:         ByteBuffer[] out1 = new ByteBuffer[1];
0:         ByteBuffer buffer = ByteBuffer.allocate(dimensionValue1.length());
0:         buffer.put(dimensionValue1.getBytes(Charset.forName("UTF-8")));
0:         buffer.rewind();
0:         out1[0] = buffer;
1: 
1: 
0:         ByteBuffer[] out2 = new ByteBuffer[1];
1: 
0:         ByteBuffer buffer2 = ByteBuffer.allocate(dimensionValue2.length());
0:         buffer2.put(dimensionValue2.getBytes(Charset.forName("UTF-8")));
0:         buffer2.rewind();
0:         out2[0] = buffer2;
1: 
0:         byte[] arr1 = packByteBufferIntoSingleByteArray(out1);
0:         byte[] arr2 = packByteBufferIntoSingleByteArray(out2);
1: 
0:         buff1 = ByteBuffer.wrap(arr1);
1: 
0:         buff1.position(4);
0:         buff1.limit(buff1.position() + dimensionValue1.length());
1: 
0:         buff2 = ByteBuffer.wrap(arr2);
0:         buff2.position(4);
0:         buff2.limit(buff2.position() + dimensionValue2.length());
1:     }
1: 
1: }
============================================================================