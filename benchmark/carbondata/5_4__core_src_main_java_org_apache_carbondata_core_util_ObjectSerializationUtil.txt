1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:2018048: package org.apache.carbondata.core.util;
1:cd6a4ff: 
1:7504a5c: import java.io.ByteArrayInputStream;
1:7504a5c: import java.io.ByteArrayOutputStream;
1:7504a5c: import java.io.IOException;
1:7504a5c: import java.io.ObjectInputStream;
1:7504a5c: import java.io.ObjectOutputStream;
1:cd6a4ff: import java.util.zip.GZIPInputStream;
1:cd6a4ff: import java.util.zip.GZIPOutputStream;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.commons.logging.Log;
1:cd6a4ff: import org.apache.commons.logging.LogFactory;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * It provides methods to convert object to Base64 string and vice versa.
1:cd6a4ff:  */
1:cd6a4ff: public class ObjectSerializationUtil {
1:cd6a4ff: 
1:cd6a4ff:   private static final Log LOG = LogFactory.getLog(ObjectSerializationUtil.class);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Convert object to Base64 String
1:cd6a4ff:    *
1:cd6a4ff:    * @param obj Object to be serialized
1:cd6a4ff:    * @return serialized string
1:cd6a4ff:    * @throws IOException
1:cd6a4ff:    */
1:cd6a4ff:   public static String convertObjectToString(Object obj) throws IOException {
1:cd6a4ff:     ByteArrayOutputStream baos = null;
1:cd6a4ff:     GZIPOutputStream gos = null;
1:cd6a4ff:     ObjectOutputStream oos = null;
1:cd6a4ff: 
1:cd6a4ff:     try {
1:cd6a4ff:       baos = new ByteArrayOutputStream();
1:cd6a4ff:       gos = new GZIPOutputStream(baos);
1:cd6a4ff:       oos = new ObjectOutputStream(gos);
1:cd6a4ff:       oos.writeObject(obj);
1:cd6a4ff:     } finally {
1:cd6a4ff:       try {
1:cd6a4ff:         if (oos != null) {
1:cd6a4ff:           oos.close();
1:cd6a4ff:         }
1:cd6a4ff:         if (gos != null) {
1:cd6a4ff:           gos.close();
1:cd6a4ff:         }
1:cd6a4ff:         if (baos != null) {
1:cd6a4ff:           baos.close();
1:cd6a4ff:         }
1:cd6a4ff:       } catch (IOException e) {
1:cd6a4ff:         LOG.error(e);
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff: 
1:7504a5c:     return CarbonUtil.encodeToString(baos.toByteArray());
1:cd6a4ff:   }
1:cd6a4ff: 
1:a3a12f0: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Converts Base64 string to object.
1:cd6a4ff:    *
1:cd6a4ff:    * @param objectString serialized object in string format
1:cd6a4ff:    * @return Object after convert string to object
1:cd6a4ff:    * @throws IOException
1:cd6a4ff:    */
1:cd6a4ff:   public static Object convertStringToObject(String objectString) throws IOException {
1:cd6a4ff:     if (objectString == null) {
1:cd6a4ff:       return null;
1:cd6a4ff:     }
1:cd6a4ff: 
1:7504a5c:     byte[] bytes = CarbonUtil.decodeStringToBytes(objectString);
1:cd6a4ff: 
1:cd6a4ff:     ByteArrayInputStream bais = null;
1:cd6a4ff:     GZIPInputStream gis = null;
1:cd6a4ff:     ObjectInputStream ois = null;
1:cd6a4ff: 
1:cd6a4ff:     try {
1:cd6a4ff:       bais = new ByteArrayInputStream(bytes);
1:cd6a4ff:       gis = new GZIPInputStream(bais);
1:cd6a4ff:       ois = new ObjectInputStream(gis);
1:cd6a4ff:       return ois.readObject();
1:cd6a4ff:     } catch (ClassNotFoundException e) {
1:cd6a4ff:       throw new IOException("Could not read object", e);
1:cd6a4ff:     } finally {
1:cd6a4ff:       try {
1:cd6a4ff:         if (ois != null) {
1:cd6a4ff:           ois.close();
1:cd6a4ff:         }
1:cd6a4ff:         if (gis != null) {
1:cd6a4ff:           gis.close();
1:cd6a4ff:         }
1:cd6a4ff:         if (bais != null) {
1:cd6a4ff:           bais.close();
1:cd6a4ff:         }
1:cd6a4ff:       } catch (IOException e) {
1:cd6a4ff:         LOG.error(e);
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:   }
1:a3a12f0: 
1:cd6a4ff: }
============================================================================
author:akashrn5
-------------------------------------------------------------------------------
commit:2018048
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.util;
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:7504a5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
0: import org.apache.carbondata.core.util.CarbonUtil;
/////////////////////////////////////////////////////////////////////////
1:     return CarbonUtil.encodeToString(baos.toByteArray());
/////////////////////////////////////////////////////////////////////////
1:     byte[] bytes = CarbonUtil.decodeStringToBytes(objectString);
/////////////////////////////////////////////////////////////////////////
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.hadoop.util;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
0: import java.io.IOException;
0: import java.io.ObjectInputStream;
0: import java.io.ObjectOutputStream;
1: import java.util.zip.GZIPInputStream;
1: import java.util.zip.GZIPOutputStream;
1: 
0: import org.apache.commons.codec.binary.Base64;
1: import org.apache.commons.logging.Log;
1: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * It provides methods to convert object to Base64 string and vice versa.
1:  */
1: public class ObjectSerializationUtil {
1: 
1:   private static final Log LOG = LogFactory.getLog(ObjectSerializationUtil.class);
1: 
1:   /**
1:    * Convert object to Base64 String
1:    *
1:    * @param obj Object to be serialized
1:    * @return serialized string
1:    * @throws IOException
1:    */
1:   public static String convertObjectToString(Object obj) throws IOException {
1:     ByteArrayOutputStream baos = null;
1:     GZIPOutputStream gos = null;
1:     ObjectOutputStream oos = null;
1: 
1:     try {
1:       baos = new ByteArrayOutputStream();
1:       gos = new GZIPOutputStream(baos);
1:       oos = new ObjectOutputStream(gos);
1:       oos.writeObject(obj);
1:     } finally {
1:       try {
1:         if (oos != null) {
1:           oos.close();
1:         }
1:         if (gos != null) {
1:           gos.close();
1:         }
1:         if (baos != null) {
1:           baos.close();
1:         }
1:       } catch (IOException e) {
1:         LOG.error(e);
1:       }
1:     }
1: 
0:     return new String(Base64.encodeBase64(baos.toByteArray()), "UTF-8");
1:   }
1: 
1:   /**
1:    * Converts Base64 string to object.
1:    *
1:    * @param objectString serialized object in string format
1:    * @return Object after convert string to object
1:    * @throws IOException
1:    */
1:   public static Object convertStringToObject(String objectString) throws IOException {
1:     if (objectString == null) {
1:       return null;
1:     }
1: 
0:     byte[] bytes = Base64.decodeBase64(objectString.getBytes("UTF-8"));
1: 
1:     ByteArrayInputStream bais = null;
1:     GZIPInputStream gis = null;
1:     ObjectInputStream ois = null;
1: 
1:     try {
1:       bais = new ByteArrayInputStream(bytes);
1:       gis = new GZIPInputStream(bais);
1:       ois = new ObjectInputStream(gis);
1:       return ois.readObject();
1:     } catch (ClassNotFoundException e) {
1:       throw new IOException("Could not read object", e);
1:     } finally {
1:       try {
1:         if (ois != null) {
1:           ois.close();
1:         }
1:         if (gis != null) {
1:           gis.close();
1:         }
1:         if (bais != null) {
1:           bais.close();
1:         }
1:       } catch (IOException e) {
1:         LOG.error(e);
1:       }
1:     }
1:   }
1: }
author:jackylk
-------------------------------------------------------------------------------
commit:a3a12f0
/////////////////////////////////////////////////////////////////////////
0: import java.io.*;
/////////////////////////////////////////////////////////////////////////
0:     return encodeToString(baos.toByteArray());
0:   }
1: 
0:   public static String encodeToString(byte[] bytes) throws UnsupportedEncodingException {
0:     return new String(Base64.encodeBase64(bytes),
/////////////////////////////////////////////////////////////////////////
0:     byte[] bytes = decodeStringToBytes(objectString);
/////////////////////////////////////////////////////////////////////////
1: 
0:   public static byte[] decodeStringToBytes(String objectString)
0:     throws UnsupportedEncodingException {
0:     return Base64.decodeBase64(objectString.getBytes(CarbonCommonConstants.DEFAULT_CHARSET));
0:   }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:foryou2030
-------------------------------------------------------------------------------
commit:0312e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: 
/////////////////////////////////////////////////////////////////////////
0:     return new String(Base64.encodeBase64(baos.toByteArray()),
0:             CarbonCommonConstants.DEFAULT_CHARSET);
/////////////////////////////////////////////////////////////////////////
0:     byte[] bytes =
0:             Base64.decodeBase64(objectString.getBytes(CarbonCommonConstants.DEFAULT_CHARSET));
============================================================================