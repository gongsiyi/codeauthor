1:3d1d1ce: /*
1:3d1d1ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3d1d1ce:  * contributor license agreements.  See the NOTICE file distributed with
1:3d1d1ce:  * this work for additional information regarding copyright ownership.
1:3d1d1ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3d1d1ce:  * (the "License"); you may not use this file except in compliance with
1:3d1d1ce:  * the License.  You may obtain a copy of the License at
1:3d1d1ce:  *
1:3d1d1ce:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3d1d1ce:  *
1:3d1d1ce:  * Unless required by applicable law or agreed to in writing, software
1:3d1d1ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3d1d1ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3d1d1ce:  * See the License for the specific language governing permissions and
1:3d1d1ce:  * limitations under the License.
1:3d1d1ce:  */
1:3d1d1ce: package org.apache.carbondata.core.metadata.schema.table.column;
1:3d1d1ce: 
1:3d1d1ce: import java.io.DataInput;
1:3d1d1ce: import java.io.DataOutput;
1:3d1d1ce: import java.io.IOException;
1:3d1d1ce: import java.io.Serializable;
1:3d1d1ce: 
1:3d1d1ce: import org.apache.carbondata.core.metadata.schema.table.RelationIdentifier;
1:3d1d1ce: import org.apache.carbondata.core.metadata.schema.table.Writable;
1:3d1d1ce: 
1:3d1d1ce: /**
1:3d1d1ce:  * To maintain the relation of child column to parent table column
1:3d1d1ce:  */
1:3d1d1ce: public class ParentColumnTableRelation implements Serializable, Writable {
1:3d1d1ce: 
1:f7f516e:   private static final long serialVersionUID = 1321746085997166646L;
1:f7f516e: 
1:3d1d1ce:   private RelationIdentifier relationIdentifier;
1:3d1d1ce:   /**
1:3d1d1ce:    * parent column id
1:3d1d1ce:    */
1:3d1d1ce:   private String columnId;
1:3d1d1ce: 
1:3d1d1ce:   private String columnName;
1:3d1d1ce: 
1:3d1d1ce:   public ParentColumnTableRelation(RelationIdentifier relationIdentifier, String columId,
1:3d1d1ce:       String columnName) {
1:3d1d1ce:     this.relationIdentifier = relationIdentifier;
1:3d1d1ce:     this.columnId = columId;
1:3d1d1ce:     this.columnName = columnName;
1:3d1d1ce:   }
1:3d1d1ce: 
1:3d1d1ce:   public RelationIdentifier getRelationIdentifier() {
1:3d1d1ce:     return relationIdentifier;
1:3d1d1ce:   }
1:3d1d1ce: 
1:3d1d1ce:   public String getColumnId() {
1:3d1d1ce:     return columnId;
1:3d1d1ce:   }
1:3d1d1ce: 
1:3d1d1ce:   public String getColumnName() {
1:3d1d1ce:     return columnName;
1:3d1d1ce:   }
1:3d1d1ce: 
1:3d1d1ce:   @Override public void write(DataOutput out) throws IOException {
1:3d1d1ce:     relationIdentifier.write(out);
1:3d1d1ce:     out.writeUTF(columnId);
1:3d1d1ce:     out.writeUTF(columnName);
1:3d1d1ce:   }
1:3d1d1ce: 
1:3d1d1ce:   @Override public void readFields(DataInput in) throws IOException {
1:3d1d1ce:     this.relationIdentifier = new RelationIdentifier(null, null, null);
1:3d1d1ce:     relationIdentifier.readFields(in);
1:3d1d1ce:     this.columnId = in.readUTF();
1:3d1d1ce:     this.columnName = in.readUTF();
1:3d1d1ce:   }
1:3d1d1ce: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:f7f516e
/////////////////////////////////////////////////////////////////////////
1:   private static final long serialVersionUID = 1321746085997166646L;
1: 
author:kumarvishal
-------------------------------------------------------------------------------
commit:3d1d1ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.metadata.schema.table.column;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.io.Serializable;
1: 
1: import org.apache.carbondata.core.metadata.schema.table.RelationIdentifier;
1: import org.apache.carbondata.core.metadata.schema.table.Writable;
1: 
1: /**
1:  * To maintain the relation of child column to parent table column
1:  */
1: public class ParentColumnTableRelation implements Serializable, Writable {
1: 
1:   private RelationIdentifier relationIdentifier;
1:   /**
1:    * parent column id
1:    */
1:   private String columnId;
1: 
1:   private String columnName;
1: 
1:   public ParentColumnTableRelation(RelationIdentifier relationIdentifier, String columId,
1:       String columnName) {
1:     this.relationIdentifier = relationIdentifier;
1:     this.columnId = columId;
1:     this.columnName = columnName;
1:   }
1: 
1:   public RelationIdentifier getRelationIdentifier() {
1:     return relationIdentifier;
1:   }
1: 
1:   public String getColumnId() {
1:     return columnId;
1:   }
1: 
1:   public String getColumnName() {
1:     return columnName;
1:   }
1: 
1:   @Override public void write(DataOutput out) throws IOException {
1:     relationIdentifier.write(out);
1:     out.writeUTF(columnId);
1:     out.writeUTF(columnName);
1:   }
1: 
1:   @Override public void readFields(DataInput in) throws IOException {
1:     this.relationIdentifier = new RelationIdentifier(null, null, null);
1:     relationIdentifier.readFields(in);
1:     this.columnId = in.readUTF();
1:     this.columnName = in.readUTF();
1:   }
1: }
============================================================================