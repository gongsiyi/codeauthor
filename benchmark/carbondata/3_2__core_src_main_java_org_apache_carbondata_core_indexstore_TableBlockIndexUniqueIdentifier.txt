1:b681244: /*
1:b681244:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b681244:  * contributor license agreements.  See the NOTICE file distributed with
1:b681244:  * this work for additional information regarding copyright ownership.
1:b681244:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b681244:  * (the "License"); you may not use this file except in compliance with
1:b681244:  * the License.  You may obtain a copy of the License at
3:b681244:  *
1:b681244:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b681244:  *
1:b681244:  * Unless required by applicable law or agreed to in writing, software
1:b681244:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b681244:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b681244:  * See the License for the specific language governing permissions and
1:b681244:  * limitations under the License.
4:b681244:  */
6:b681244: 
1:b681244: package org.apache.carbondata.core.indexstore;
1:b681244: 
1:531ecdf: import java.io.Serializable;
1:8d3c774: import java.util.Objects;
1:8d3c774: 
1:b681244: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:b681244: 
4:b681244: /**
1:8d3c774:  * Class holds the indexFile information to uniquely identitify the carbon index
1:b681244:  */
1:531ecdf: public class TableBlockIndexUniqueIdentifier implements Serializable {
1:531ecdf: 
1:531ecdf:   private static final long serialVersionUID = 5808112137916196344L;
1:8d3c774: 
1:8d3c774:   private String indexFilePath;
1:8d3c774: 
1:8d3c774:   private String indexFileName;
1:8d3c774: 
1:8d3c774:   private String mergeIndexFileName;
1:b681244: 
1:b681244:   private String segmentId;
1:b681244: 
1:8d3c774:   public TableBlockIndexUniqueIdentifier(String indexFilePath, String indexFileName,
1:8d3c774:       String mergeIndexFileName, String segmentId) {
1:8d3c774:     this.indexFilePath = indexFilePath;
1:8d3c774:     this.indexFileName = indexFileName;
1:8d3c774:     this.mergeIndexFileName = mergeIndexFileName;
1:b681244:     this.segmentId = segmentId;
5:b681244:   }
1:b681244: 
1:b681244:   /**
1:b681244:    * method returns the id to uniquely identify a key
1:b681244:    *
2:b681244:    * @return
1:b681244:    */
1:b681244:   public String getUniqueTableSegmentIdentifier() {
1:8d3c774:     return indexFilePath + CarbonCommonConstants.FILE_SEPARATOR + indexFileName;
1:b681244:   }
1:b681244: 
1:8d3c774:   public String getIndexFilePath() {
1:8d3c774:     return indexFilePath;
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   public String getIndexFileName() {
1:8d3c774:     return indexFileName;
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   public String getMergeIndexFileName() {
1:8d3c774:     return mergeIndexFileName;
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   public String getSegmentId() {
1:8d3c774:     return segmentId;
1:b681244:   }
1:b681244: 
1:b681244:   @Override public boolean equals(Object o) {
1:b681244:     if (this == o) return true;
1:b681244:     if (o == null || getClass() != o.getClass()) return false;
1:b681244:     TableBlockIndexUniqueIdentifier that = (TableBlockIndexUniqueIdentifier) o;
1:8d3c774:     return Objects.equals(indexFilePath, that.indexFilePath) && Objects
1:8d3c774:         .equals(indexFileName, that.indexFileName) && Objects
1:8d3c774:         .equals(mergeIndexFileName, that.mergeIndexFileName);
1:b681244:   }
1:b681244: 
1:b681244:   @Override public int hashCode() {
1:8d3c774:     return Objects.hash(indexFilePath, indexFileName, mergeIndexFileName);
1:b681244:   }
1:b681244: }
============================================================================
author:dhatchayani
-------------------------------------------------------------------------------
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
1: public class TableBlockIndexUniqueIdentifier implements Serializable {
1: 
1:   private static final long serialVersionUID = 5808112137916196344L;
author:ravipesala
-------------------------------------------------------------------------------
commit:8d3c774
/////////////////////////////////////////////////////////////////////////
1: import java.util.Objects;
1: 
1:  * Class holds the indexFile information to uniquely identitify the carbon index
1: 
1:   private String indexFilePath;
1: 
1:   private String indexFileName;
1: 
1:   private String mergeIndexFileName;
1:   public TableBlockIndexUniqueIdentifier(String indexFilePath, String indexFileName,
1:       String mergeIndexFileName, String segmentId) {
1:     this.indexFilePath = indexFilePath;
1:     this.indexFileName = indexFileName;
1:     this.mergeIndexFileName = mergeIndexFileName;
/////////////////////////////////////////////////////////////////////////
1:     return indexFilePath + CarbonCommonConstants.FILE_SEPARATOR + indexFileName;
1:   public String getIndexFilePath() {
1:     return indexFilePath;
1:   }
1: 
1:   public String getIndexFileName() {
1:     return indexFileName;
1:   }
1: 
1:   public String getMergeIndexFileName() {
1:     return mergeIndexFileName;
1:   }
1: 
1:   public String getSegmentId() {
1:     return segmentId;
1:     return Objects.equals(indexFilePath, that.indexFilePath) && Objects
1:         .equals(indexFileName, that.indexFileName) && Objects
1:         .equals(mergeIndexFileName, that.mergeIndexFileName);
1:     return Objects.hash(indexFilePath, indexFileName, mergeIndexFileName);
commit:b681244
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.indexstore;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: 
1: /**
0:  * Class holds the absoluteTableIdentifier and segmentId to uniquely identify a segment
1:  */
0: public class TableBlockIndexUniqueIdentifier {
1:   /**
0:    * table fully qualified identifier
1:    */
0:   private AbsoluteTableIdentifier absoluteTableIdentifier;
1: 
1:   private String segmentId;
1: 
0:   private String carbonIndexFileName;
1: 
1:   /**
0:    * Constructor to initialize the class instance
1:    *
0:    * @param absoluteTableIdentifier
0:    * @param segmentId
1:    */
0:   public TableBlockIndexUniqueIdentifier(AbsoluteTableIdentifier absoluteTableIdentifier,
0:       String segmentId, String carbonIndexFileName) {
0:     this.absoluteTableIdentifier = absoluteTableIdentifier;
1:     this.segmentId = segmentId;
0:     this.carbonIndexFileName = carbonIndexFileName;
1:   }
1: 
1:   /**
0:    * returns AbsoluteTableIdentifier
1:    *
1:    * @return
1:    */
0:   public AbsoluteTableIdentifier getAbsoluteTableIdentifier() {
0:     return absoluteTableIdentifier;
1:   }
1: 
0:   public String getSegmentId() {
0:     return segmentId;
1:   }
1: 
1:   /**
1:    * method returns the id to uniquely identify a key
1:    *
1:    * @return
1:    */
1:   public String getUniqueTableSegmentIdentifier() {
0:     CarbonTableIdentifier carbonTableIdentifier =
0:         absoluteTableIdentifier.getCarbonTableIdentifier();
0:     return carbonTableIdentifier.getDatabaseName() + CarbonCommonConstants.FILE_SEPARATOR
0:         + carbonTableIdentifier.getTableName() + CarbonCommonConstants.UNDERSCORE
0:         + carbonTableIdentifier.getTableId() + CarbonCommonConstants.FILE_SEPARATOR + segmentId
0:         + CarbonCommonConstants.FILE_SEPARATOR + carbonIndexFileName;
1:   }
1: 
0:   public String getFilePath() {
0:     return absoluteTableIdentifier.getTablePath() + "/Fact/Part0/Segment_" + segmentId + "/"
0:         + carbonIndexFileName;
1:   }
1: 
1:   @Override public boolean equals(Object o) {
1:     if (this == o) return true;
1:     if (o == null || getClass() != o.getClass()) return false;
1: 
1:     TableBlockIndexUniqueIdentifier that = (TableBlockIndexUniqueIdentifier) o;
1: 
0:     if (!absoluteTableIdentifier.equals(that.absoluteTableIdentifier)) {
0:       return false;
1:     }
0:     if (!segmentId.equals(that.segmentId)) {
0:       return false;
1:     }
0:     return carbonIndexFileName.equals(that.carbonIndexFileName);
1:   }
1: 
1:   @Override public int hashCode() {
0:     int result = absoluteTableIdentifier.hashCode();
0:     result = 31 * result + segmentId.hashCode();
0:     result = 31 * result + carbonIndexFileName.hashCode();
0:     return result;
1:   }
1: }
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:28f78b2
/////////////////////////////////////////////////////////////////////////
0: 
0:   public String getCarbonIndexFileName() {
0:     return carbonIndexFileName;
0:   }
============================================================================