1:1a35cfb: /*
1:1a35cfb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a35cfb:  * contributor license agreements.  See the NOTICE file distributed with
1:1a35cfb:  * this work for additional information regarding copyright ownership.
1:1a35cfb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a35cfb:  * (the "License"); you may not use this file except in compliance with
1:1a35cfb:  * the License.  You may obtain a copy of the License at
1:1a35cfb:  *
1:1a35cfb:  *    http://www.apache.org/licenses/LICENSE-2.0
1:1a35cfb:  *
1:1a35cfb:  * Unless required by applicable law or agreed to in writing, software
1:1a35cfb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a35cfb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a35cfb:  * See the License for the specific language governing permissions and
1:1a35cfb:  * limitations under the License.
1:1a35cfb:  */
1:1a35cfb: 
1:1a35cfb: package org.apache.carbondata.core;
1:1a35cfb: 
1:1a35cfb: import java.lang.reflect.InvocationTargetException;
1:1a35cfb: import java.lang.reflect.Method;
1:1a35cfb: 
1:1a35cfb: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:1a35cfb: import org.apache.carbondata.core.util.CarbonProperties;
1:1a35cfb: 
1:1a35cfb: import junit.framework.TestCase;
1:d8bafa3: import org.junit.Assert;
1:1a35cfb: import org.junit.Test;
1:1a35cfb: 
1:1a35cfb: /**
1:1a35cfb:  * Method to test the carbon common constant configurations.
1:1a35cfb:  */
1:1a35cfb: public class CarbonPropertiesValidationTest extends TestCase {
1:1a35cfb: 
1:1a35cfb:   CarbonProperties carbonProperties;
1:1a35cfb: 
1:1a35cfb:   @Override public void setUp() throws Exception {
1:1a35cfb:     carbonProperties = CarbonProperties.getInstance();
1:1a35cfb:   }
1:1a35cfb: 
1:1a35cfb:   @Test public void testvalidateLockType()
2:1a35cfb:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:1a35cfb:     Method validateMethodType = carbonProperties.getClass().getDeclaredMethod("validateLockType");
2:1a35cfb:     validateMethodType.setAccessible(true);
1:1a35cfb:     carbonProperties.addProperty(CarbonCommonConstants.LOCK_TYPE, "xyz");
1:1a35cfb:     String valueBeforeValidation = carbonProperties.getProperty(CarbonCommonConstants.LOCK_TYPE);
2:1a35cfb:     validateMethodType.invoke(carbonProperties);
1:1a35cfb:     String valueAfterValidation = carbonProperties.getProperty(CarbonCommonConstants.LOCK_TYPE);
8:1a35cfb:     assertTrue(!valueBeforeValidation.equals(valueAfterValidation));
1:1a35cfb:     assertTrue(CarbonCommonConstants.CARBON_LOCK_TYPE_LOCAL.equalsIgnoreCase(valueAfterValidation));
1:1a35cfb:   }
1:1a35cfb: 
1:1a35cfb:   @Test public void testValidateEnableUnsafeSort()
1:1a35cfb:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
2:1a35cfb:     Method validateMethodType =
1:1a35cfb:         carbonProperties.getClass().getDeclaredMethod("validateEnableUnsafeSort");
1:1a35cfb:     validateMethodType.setAccessible(true);
1:1a35cfb:     carbonProperties.addProperty(CarbonCommonConstants.ENABLE_UNSAFE_SORT, "xyz");
2:1a35cfb:     String valueBeforeValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.ENABLE_UNSAFE_SORT);
1:1a35cfb:     validateMethodType.invoke(carbonProperties);
2:1a35cfb:     String valueAfterValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.ENABLE_UNSAFE_SORT);
1:bcf3ca3:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:1a35cfb:     assertTrue(
1:1a35cfb:         CarbonCommonConstants.ENABLE_UNSAFE_SORT_DEFAULT.equalsIgnoreCase(valueAfterValidation));
1:1a35cfb:   }
1:1a35cfb: 
1:d8bafa3:   @Test public void testValidateEnableOffHeapSort()
1:d8bafa3:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:d8bafa3:     Method validateMethodType =
1:d8bafa3:         carbonProperties.getClass().getDeclaredMethod("validateEnableOffHeapSort");
1:d8bafa3:     validateMethodType.setAccessible(true);
1:d8bafa3:     carbonProperties.addProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT, "True");
1:d8bafa3:     assert (carbonProperties.getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT)
1:d8bafa3:         .equalsIgnoreCase("true"));
1:d8bafa3:     carbonProperties.addProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT, "false");
1:d8bafa3:     assert (carbonProperties.getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT)
1:d8bafa3:         .equalsIgnoreCase("false"));
1:d8bafa3:     carbonProperties.addProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT, "xyz");
1:d8bafa3:     assert (carbonProperties.getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT)
1:d8bafa3:         .equalsIgnoreCase("true"));
1:d8bafa3:     String valueBeforeValidation =
1:d8bafa3:         carbonProperties.getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT);
1:d8bafa3:     validateMethodType.invoke(carbonProperties);
1:d8bafa3:     String valueAfterValidation =
1:d8bafa3:         carbonProperties.getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT);
1:d8bafa3:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:d8bafa3:     assertTrue(
1:d8bafa3:         CarbonCommonConstants.ENABLE_OFFHEAP_SORT_DEFAULT.equalsIgnoreCase(valueAfterValidation));
1:d8bafa3:   }
1:d8bafa3: 
1:1a35cfb:   @Test public void testValidateCustomBlockDistribution()
1:1a35cfb:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:1a35cfb:     Method validateMethodType =
1:1a35cfb:         carbonProperties.getClass().getDeclaredMethod("validateCustomBlockDistribution");
1:1a35cfb:     validateMethodType.setAccessible(true);
1:1a35cfb:     carbonProperties.addProperty(CarbonCommonConstants.CARBON_CUSTOM_BLOCK_DISTRIBUTION, "xyz");
1:1a35cfb:     String valueBeforeValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_CUSTOM_BLOCK_DISTRIBUTION);
1:1a35cfb:     validateMethodType.invoke(carbonProperties);
1:1a35cfb:     String valueAfterValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_CUSTOM_BLOCK_DISTRIBUTION);
1:bcf3ca3:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:b4dc866:     assertTrue("false"
2:1a35cfb:         .equalsIgnoreCase(valueAfterValidation));
1:1a35cfb:   }
1:1a35cfb: 
1:1a35cfb:   @Test public void testValidateEnableVectorReader()
1:1a35cfb:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:1a35cfb:     Method validateMethodType =
1:1a35cfb:         carbonProperties.getClass().getDeclaredMethod("validateEnableVectorReader");
1:1a35cfb:     validateMethodType.setAccessible(true);
1:1a35cfb:     carbonProperties.addProperty(CarbonCommonConstants.ENABLE_VECTOR_READER, "xyz");
1:1a35cfb:     String valueBeforeValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.ENABLE_VECTOR_READER);
1:1a35cfb:     validateMethodType.invoke(carbonProperties);
1:1a35cfb:     String valueAfterValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.ENABLE_VECTOR_READER);
1:bcf3ca3:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:1a35cfb:     assertTrue(
1:1a35cfb:         CarbonCommonConstants.ENABLE_VECTOR_READER_DEFAULT.equalsIgnoreCase(valueAfterValidation));
1:1a35cfb:   }
1:1a35cfb: 
1:1a35cfb:   @Test public void testValidateCarbonCSVReadBufferSizeByte()
1:1a35cfb:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:1a35cfb:     Method validateMethodType =
1:1a35cfb:         carbonProperties.getClass().getDeclaredMethod("validateCarbonCSVReadBufferSizeByte");
1:1a35cfb:     validateMethodType.setAccessible(true);
1:1a35cfb:     carbonProperties.addProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE, "xyz");
1:1a35cfb:     String valueBeforeValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:1a35cfb:     validateMethodType.invoke(carbonProperties);
1:1a35cfb:     String valueAfterValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:bcf3ca3:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:1a35cfb:     assertTrue(
1:1a35cfb:         CarbonCommonConstants.CSV_READ_BUFFER_SIZE_DEFAULT.equalsIgnoreCase(valueAfterValidation));
1:1a35cfb:   }
1:1a35cfb: 
1:1a35cfb:   @Test public void testValidateCarbonCSVReadBufferSizeByteRange()
1:1a35cfb:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:1a35cfb:     Method validateMethodType =
1:1a35cfb:         carbonProperties.getClass().getDeclaredMethod("validateCarbonCSVReadBufferSizeByte");
1:1a35cfb:     validateMethodType.setAccessible(true);
1:1a35cfb:     carbonProperties.addProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE, "10485761");
1:1a35cfb:     String valueBeforeValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:1a35cfb:     validateMethodType.invoke(carbonProperties);
1:1a35cfb:     String valueAfterValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:bcf3ca3:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:1a35cfb:     assertTrue(
1:1a35cfb:         CarbonCommonConstants.CSV_READ_BUFFER_SIZE_DEFAULT.equalsIgnoreCase(valueAfterValidation));
1:1a35cfb:     carbonProperties.addProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE, "10240");
1:1a35cfb:     valueBeforeValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:1a35cfb:     validateMethodType.invoke(carbonProperties);
1:1a35cfb:     valueAfterValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:bcf3ca3:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:1a35cfb:     carbonProperties.addProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE, "10239");
1:1a35cfb:     valueBeforeValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:1a35cfb:     validateMethodType.invoke(carbonProperties);
1:1a35cfb:     valueAfterValidation =
1:1a35cfb:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:1a35cfb:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:1a35cfb:     assertTrue(
1:1a35cfb:         CarbonCommonConstants.CSV_READ_BUFFER_SIZE_DEFAULT.equalsIgnoreCase(valueAfterValidation));
1:1a35cfb:   }
1:1a35cfb: 
1:0f407de:   @Test public void testValidateHandoffSize() {
1:0f407de:     assertEquals(CarbonCommonConstants.HANDOFF_SIZE_DEFAULT, carbonProperties.getHandoffSize());
1:0f407de:     long newSize = 1024L * 1024 * 100;
1:0f407de:     carbonProperties.addProperty(CarbonCommonConstants.HANDOFF_SIZE, "" + newSize);
1:0f407de:     assertEquals(newSize, carbonProperties.getHandoffSize());
1:1a35cfb:   }
1:bcf3ca3: 
1:bcf3ca3:   @Test public void testValidateTimeStampFormat()
1:bcf3ca3:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:bcf3ca3:     Method validateMethodType = carbonProperties.getClass()
1:bcf3ca3:         .getDeclaredMethod("validateTimeFormatKey", new Class[] { String.class, String.class });
1:bcf3ca3:     validateMethodType.setAccessible(true);
1:bcf3ca3:     carbonProperties.addProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT, "agdgaJIASDG667");
1:bcf3ca3:     String valueBeforeValidation =
1:bcf3ca3:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT);
1:bcf3ca3:     validateMethodType.invoke(carbonProperties, CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:bcf3ca3:         CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT);
1:bcf3ca3:     String valueAfterValidation =
1:bcf3ca3:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT);
1:bcf3ca3:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:bcf3ca3:     assertTrue(CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT
1:bcf3ca3:         .equalsIgnoreCase(valueAfterValidation));
1:bcf3ca3:     carbonProperties.addProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:bcf3ca3:         "yyyy-MM-dd hh:mm:ss");
1:bcf3ca3:     validateMethodType.invoke(carbonProperties, CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:bcf3ca3:         CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT);
1:bcf3ca3:     assertEquals("yyyy-MM-dd hh:mm:ss",
1:bcf3ca3:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT));
1:bcf3ca3:   }
1:bcf3ca3: 
1:bcf3ca3:   @Test public void testValidateSortFileWriteBufferSize()
1:bcf3ca3:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:bcf3ca3:     Method validateMethodType =
1:bcf3ca3:         carbonProperties.getClass().getDeclaredMethod("validateSortFileWriteBufferSize");
1:bcf3ca3:     validateMethodType.setAccessible(true);
1:bcf3ca3:     carbonProperties.addProperty(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE, "test");
1:bcf3ca3:     String valueBeforeValidation =
1:bcf3ca3:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE);
1:bcf3ca3:     validateMethodType.invoke(carbonProperties);
1:bcf3ca3:     String valueAfterValidation =
1:bcf3ca3:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE);
1:bcf3ca3:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:bcf3ca3:     assertTrue(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE_DEFAULT_VALUE
1:bcf3ca3:         .equalsIgnoreCase(valueAfterValidation));
1:bcf3ca3:   }
1:bcf3ca3:   @Test public void testValidateSortIntermediateFilesLimit()
1:bcf3ca3:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:bcf3ca3:     Method validateMethodType =
1:bcf3ca3:         carbonProperties.getClass().getDeclaredMethod("validateSortIntermediateFilesLimit");
1:bcf3ca3:     validateMethodType.setAccessible(true);
1:bcf3ca3:     carbonProperties.addProperty(CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT, "test");
1:bcf3ca3:     String valueBeforeValidation =
1:bcf3ca3:         carbonProperties.getProperty(CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT);
1:bcf3ca3:     validateMethodType.invoke(carbonProperties);
1:bcf3ca3:     String valueAfterValidation =
1:bcf3ca3:         carbonProperties.getProperty(CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT);
1:bcf3ca3:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:bcf3ca3:     assertTrue(CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT_DEFAULT_VALUE
1:bcf3ca3:         .equalsIgnoreCase(valueAfterValidation));
1:bcf3ca3:   }
1:473bd31: 
1:473bd31:   @Test public void testValidateDynamicSchedulerTimeOut() {
1:473bd31:     carbonProperties
1:473bd31:         .addProperty(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT, "2");
1:473bd31:     String valueAfterValidation = carbonProperties
1:473bd31:         .getProperty(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT);
1:473bd31:     assertTrue(valueAfterValidation
1:473bd31:         .equals(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT_DEFAULT));
1:473bd31:     carbonProperties
1:473bd31:         .addProperty(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT, "16");
1:473bd31:     valueAfterValidation = carbonProperties
1:473bd31:         .getProperty(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT);
1:473bd31:     assertTrue(valueAfterValidation
1:473bd31:         .equals(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT_DEFAULT));
1:473bd31:     carbonProperties
1:473bd31:         .addProperty(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT, "15");
1:473bd31:     valueAfterValidation = carbonProperties
1:473bd31:         .getProperty(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT);
1:473bd31:     assertTrue(valueAfterValidation
1:473bd31:         .equals("15"));
1:473bd31: 
1:473bd31:   }
1:473bd31:   @Test public void testValidateSchedulerMinRegisteredRatio() {
1:473bd31:     carbonProperties
1:473bd31:         .addProperty(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO, "0.0");
1:473bd31:     String valueAfterValidation = carbonProperties
1:473bd31:         .getProperty(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO);
1:473bd31:     assertTrue(valueAfterValidation
1:473bd31:         .equals(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO_DEFAULT));
1:473bd31:     carbonProperties
1:473bd31:         .addProperty(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO, "-0.1");
1:473bd31:     valueAfterValidation = carbonProperties
1:473bd31:         .getProperty(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO);
1:473bd31:     assertTrue(valueAfterValidation
1:473bd31:         .equals(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO_DEFAULT));
1:473bd31:     carbonProperties
1:473bd31:         .addProperty(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO, "0.1");
1:473bd31:     valueAfterValidation = carbonProperties
1:473bd31:         .getProperty(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO);
1:473bd31:     assertTrue(valueAfterValidation.equals("0.1"));
1:473bd31:   }
1:473bd31: 
1:1a35cfb: }
============================================================================
author:xubo245
-------------------------------------------------------------------------------
commit:d8bafa3
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1:   @Test public void testValidateEnableOffHeapSort()
1:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:     Method validateMethodType =
1:         carbonProperties.getClass().getDeclaredMethod("validateEnableOffHeapSort");
1:     validateMethodType.setAccessible(true);
1:     carbonProperties.addProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT, "True");
1:     assert (carbonProperties.getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT)
1:         .equalsIgnoreCase("true"));
1:     carbonProperties.addProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT, "false");
1:     assert (carbonProperties.getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT)
1:         .equalsIgnoreCase("false"));
1:     carbonProperties.addProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT, "xyz");
1:     assert (carbonProperties.getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT)
1:         .equalsIgnoreCase("true"));
1:     String valueBeforeValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT);
1:     validateMethodType.invoke(carbonProperties);
1:     String valueAfterValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT);
1:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:     assertTrue(
1:         CarbonCommonConstants.ENABLE_OFFHEAP_SORT_DEFAULT.equalsIgnoreCase(valueAfterValidation));
1:   }
1: 
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:473bd31
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Test public void testValidateDynamicSchedulerTimeOut() {
1:     carbonProperties
1:         .addProperty(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT, "2");
1:     String valueAfterValidation = carbonProperties
1:         .getProperty(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT);
1:     assertTrue(valueAfterValidation
1:         .equals(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT_DEFAULT));
1:     carbonProperties
1:         .addProperty(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT, "16");
1:     valueAfterValidation = carbonProperties
1:         .getProperty(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT);
1:     assertTrue(valueAfterValidation
1:         .equals(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT_DEFAULT));
1:     carbonProperties
1:         .addProperty(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT, "15");
1:     valueAfterValidation = carbonProperties
1:         .getProperty(CarbonCommonConstants.CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT);
1:     assertTrue(valueAfterValidation
1:         .equals("15"));
1: 
1:   }
1:   @Test public void testValidateSchedulerMinRegisteredRatio() {
1:     carbonProperties
1:         .addProperty(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO, "0.0");
1:     String valueAfterValidation = carbonProperties
1:         .getProperty(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO);
1:     assertTrue(valueAfterValidation
1:         .equals(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO_DEFAULT));
1:     carbonProperties
1:         .addProperty(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO, "-0.1");
1:     valueAfterValidation = carbonProperties
1:         .getProperty(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO);
1:     assertTrue(valueAfterValidation
1:         .equals(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO_DEFAULT));
1:     carbonProperties
1:         .addProperty(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO, "0.1");
1:     valueAfterValidation = carbonProperties
1:         .getProperty(CarbonCommonConstants.CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO);
1:     assertTrue(valueAfterValidation.equals("0.1"));
1:   }
1: 
commit:bcf3ca3
/////////////////////////////////////////////////////////////////////////
1:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
/////////////////////////////////////////////////////////////////////////
1:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
/////////////////////////////////////////////////////////////////////////
1:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
/////////////////////////////////////////////////////////////////////////
1:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
/////////////////////////////////////////////////////////////////////////
1:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
/////////////////////////////////////////////////////////////////////////
1:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Test public void testValidateTimeStampFormat()
1:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:     Method validateMethodType = carbonProperties.getClass()
1:         .getDeclaredMethod("validateTimeFormatKey", new Class[] { String.class, String.class });
1:     validateMethodType.setAccessible(true);
1:     carbonProperties.addProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT, "agdgaJIASDG667");
1:     String valueBeforeValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT);
1:     validateMethodType.invoke(carbonProperties, CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:         CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT);
1:     String valueAfterValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT);
1:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:     assertTrue(CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT
1:         .equalsIgnoreCase(valueAfterValidation));
1:     carbonProperties.addProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:         "yyyy-MM-dd hh:mm:ss");
1:     validateMethodType.invoke(carbonProperties, CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:         CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT);
1:     assertEquals("yyyy-MM-dd hh:mm:ss",
1:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT));
1:   }
1: 
1:   @Test public void testValidateSortFileWriteBufferSize()
1:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:     Method validateMethodType =
1:         carbonProperties.getClass().getDeclaredMethod("validateSortFileWriteBufferSize");
1:     validateMethodType.setAccessible(true);
1:     carbonProperties.addProperty(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE, "test");
1:     String valueBeforeValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE);
1:     validateMethodType.invoke(carbonProperties);
1:     String valueAfterValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE);
1:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:     assertTrue(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE_DEFAULT_VALUE
1:         .equalsIgnoreCase(valueAfterValidation));
1:   }
1:   @Test public void testValidateSortIntermediateFilesLimit()
1:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:     Method validateMethodType =
1:         carbonProperties.getClass().getDeclaredMethod("validateSortIntermediateFilesLimit");
1:     validateMethodType.setAccessible(true);
1:     carbonProperties.addProperty(CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT, "test");
1:     String valueBeforeValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT);
1:     validateMethodType.invoke(carbonProperties);
1:     String valueAfterValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT);
1:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:     assertTrue(CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT_DEFAULT_VALUE
1:         .equalsIgnoreCase(valueAfterValidation));
1:   }
commit:1a35cfb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core;
1: 
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
0: import org.apache.carbondata.core.util.CarbonProperty;
1: 
1: import junit.framework.TestCase;
1: import org.junit.Test;
1: 
1: /**
1:  * Method to test the carbon common constant configurations.
1:  */
1: public class CarbonPropertiesValidationTest extends TestCase {
1: 
1:   CarbonProperties carbonProperties;
1: 
1:   @Override public void setUp() throws Exception {
1:     carbonProperties = CarbonProperties.getInstance();
1:   }
1: 
1:   @Test public void testvalidateLockType()
1:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:     Method validateMethodType = carbonProperties.getClass().getDeclaredMethod("validateLockType");
1:     validateMethodType.setAccessible(true);
1:     carbonProperties.addProperty(CarbonCommonConstants.LOCK_TYPE, "xyz");
1:     String valueBeforeValidation = carbonProperties.getProperty(CarbonCommonConstants.LOCK_TYPE);
1:     validateMethodType.invoke(carbonProperties);
1:     String valueAfterValidation = carbonProperties.getProperty(CarbonCommonConstants.LOCK_TYPE);
1:     assertTrue(!valueBeforeValidation.equals(valueAfterValidation));
1:     assertTrue(CarbonCommonConstants.CARBON_LOCK_TYPE_LOCAL.equalsIgnoreCase(valueAfterValidation));
1:   }
1: 
1:   @Test public void testValidateEnableUnsafeSort()
1:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:     Method validateMethodType =
1:         carbonProperties.getClass().getDeclaredMethod("validateEnableUnsafeSort");
1:     validateMethodType.setAccessible(true);
1:     carbonProperties.addProperty(CarbonCommonConstants.ENABLE_UNSAFE_SORT, "xyz");
1:     String valueBeforeValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.ENABLE_UNSAFE_SORT);
1:     validateMethodType.invoke(carbonProperties);
1:     String valueAfterValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.ENABLE_UNSAFE_SORT);
1:     assertTrue(!valueBeforeValidation.equals(valueAfterValidation));
1:     assertTrue(
1:         CarbonCommonConstants.ENABLE_UNSAFE_SORT_DEFAULT.equalsIgnoreCase(valueAfterValidation));
1:   }
1: 
1:   @Test public void testValidateCustomBlockDistribution()
1:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:     Method validateMethodType =
1:         carbonProperties.getClass().getDeclaredMethod("validateCustomBlockDistribution");
1:     validateMethodType.setAccessible(true);
1:     carbonProperties.addProperty(CarbonCommonConstants.CARBON_CUSTOM_BLOCK_DISTRIBUTION, "xyz");
1:     String valueBeforeValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_CUSTOM_BLOCK_DISTRIBUTION);
1:     validateMethodType.invoke(carbonProperties);
1:     String valueAfterValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CARBON_CUSTOM_BLOCK_DISTRIBUTION);
1:     assertTrue(!valueBeforeValidation.equals(valueAfterValidation));
0:     assertTrue(CarbonCommonConstants.CARBON_CUSTOM_BLOCK_DISTRIBUTION_DEFAULT
1:         .equalsIgnoreCase(valueAfterValidation));
1:   }
1: 
1:   @Test public void testValidateEnableVectorReader()
1:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:     Method validateMethodType =
1:         carbonProperties.getClass().getDeclaredMethod("validateEnableVectorReader");
1:     validateMethodType.setAccessible(true);
1:     carbonProperties.addProperty(CarbonCommonConstants.ENABLE_VECTOR_READER, "xyz");
1:     String valueBeforeValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.ENABLE_VECTOR_READER);
1:     validateMethodType.invoke(carbonProperties);
1:     String valueAfterValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.ENABLE_VECTOR_READER);
1:     assertTrue(!valueBeforeValidation.equals(valueAfterValidation));
1:     assertTrue(
1:         CarbonCommonConstants.ENABLE_VECTOR_READER_DEFAULT.equalsIgnoreCase(valueAfterValidation));
1:   }
1: 
1:   @Test public void testValidateCarbonCSVReadBufferSizeByte()
1:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:     Method validateMethodType =
1:         carbonProperties.getClass().getDeclaredMethod("validateCarbonCSVReadBufferSizeByte");
1:     validateMethodType.setAccessible(true);
1:     carbonProperties.addProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE, "xyz");
1:     String valueBeforeValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:     validateMethodType.invoke(carbonProperties);
1:     String valueAfterValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:     assertTrue(!valueBeforeValidation.equals(valueAfterValidation));
1:     assertTrue(
1:         CarbonCommonConstants.CSV_READ_BUFFER_SIZE_DEFAULT.equalsIgnoreCase(valueAfterValidation));
1:   }
1: 
1:   @Test public void testValidateCarbonCSVReadBufferSizeByteRange()
1:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:     Method validateMethodType =
1:         carbonProperties.getClass().getDeclaredMethod("validateCarbonCSVReadBufferSizeByte");
1:     validateMethodType.setAccessible(true);
1:     carbonProperties.addProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE, "10485761");
1:     String valueBeforeValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:     validateMethodType.invoke(carbonProperties);
1:     String valueAfterValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:     assertTrue(!valueBeforeValidation.equals(valueAfterValidation));
1:     assertTrue(
1:         CarbonCommonConstants.CSV_READ_BUFFER_SIZE_DEFAULT.equalsIgnoreCase(valueAfterValidation));
1:     carbonProperties.addProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE, "10240");
1:     valueBeforeValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:     validateMethodType.invoke(carbonProperties);
1:     valueAfterValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:     assertTrue(valueBeforeValidation.equals(valueAfterValidation));
1:     carbonProperties.addProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE, "10239");
1:     valueBeforeValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:     validateMethodType.invoke(carbonProperties);
1:     valueAfterValidation =
1:         carbonProperties.getProperty(CarbonCommonConstants.CSV_READ_BUFFER_SIZE);
1:     assertTrue(!valueBeforeValidation.equals(valueAfterValidation));
1:     assertTrue(
1:         CarbonCommonConstants.CSV_READ_BUFFER_SIZE_DEFAULT.equalsIgnoreCase(valueAfterValidation));
1:   }
1: 
0:   @Test public void testValidateHighCardinalityIdentify()
1:       throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
1:     Method validateMethodType =
0:         carbonProperties.getClass().getDeclaredMethod("validateHighCardinalityIdentify");
1:     validateMethodType.setAccessible(true);
0:     carbonProperties.addProperty(CarbonCommonConstants.HIGH_CARDINALITY_IDENTIFY_ENABLE, "xyz");
1:     String valueBeforeValidation =
0:         carbonProperties.getProperty(CarbonCommonConstants.HIGH_CARDINALITY_IDENTIFY_ENABLE);
1:     validateMethodType.invoke(carbonProperties);
1:     String valueAfterValidation =
0:         carbonProperties.getProperty(CarbonCommonConstants.HIGH_CARDINALITY_IDENTIFY_ENABLE);
1:     assertTrue(!valueBeforeValidation.equals(valueAfterValidation));
0:     assertTrue(CarbonCommonConstants.HIGH_CARDINALITY_IDENTIFY_ENABLE_DEFAULT
1:         .equalsIgnoreCase(valueAfterValidation));
1:   }
1: }
author:ravipesala
-------------------------------------------------------------------------------
commit:b4dc866
/////////////////////////////////////////////////////////////////////////
1:     assertTrue("false"
author:QiangCai
-------------------------------------------------------------------------------
commit:0f407de
/////////////////////////////////////////////////////////////////////////
0: 
1:   @Test public void testValidateHandoffSize() {
1:     assertEquals(CarbonCommonConstants.HANDOFF_SIZE_DEFAULT, carbonProperties.getHandoffSize());
1:     long newSize = 1024L * 1024 * 100;
1:     carbonProperties.addProperty(CarbonCommonConstants.HANDOFF_SIZE, "" + newSize);
1:     assertEquals(newSize, carbonProperties.getHandoffSize());
0:   }
author:Raghunandan S
-------------------------------------------------------------------------------
commit:06ddd82
/////////////////////////////////////////////////////////////////////////
============================================================================