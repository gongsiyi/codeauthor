1:496cde4: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:496cde4:  *
1:496cde4:  *    http://www.apache.org/licenses/LICENSE-2.0
1:496cde4:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:496cde4:  */
1:349c59c: package org.apache.carbondata.processing.loading.converter;
1:496cde4: 
1:4a79a86: import java.util.HashMap;
1:4a79a86: import java.util.Map;
1:4a79a86: 
1:496cde4: /**
1:496cde4:  * It is holder for reason of bad records.
1:496cde4:  */
1:496cde4: public class BadRecordLogHolder {
1:496cde4: 
1:4a79a86:   /**
1:4a79a86:    * this map will hold the bad record unified message for columns
1:4a79a86:    */
1:4a79a86:   private Map<String, String> columnMessageMap = new HashMap<>();
1:4a79a86: 
1:496cde4:   private String reason;
1:496cde4: 
1:496cde4:   private boolean badRecordAdded;
1:496cde4: 
1:3251c89:   private boolean isLogged;
1:3251c89: 
1:496cde4:   public String getReason() {
1:496cde4:     return reason;
1:496cde4:   }
1:496cde4: 
1:496cde4:   public void setReason(String reason) {
1:496cde4:     this.reason = reason;
1:496cde4:     badRecordAdded = true;
1:496cde4:   }
1:496cde4: 
1:496cde4:   public boolean isBadRecordNotAdded() {
1:496cde4:     return badRecordAdded;
1:496cde4:   }
1:496cde4: 
1:496cde4:   public void clear() {
1:496cde4:     this.badRecordAdded = false;
1:496cde4:   }
1:3251c89: 
1:3251c89:   public boolean isLogged() {
1:3251c89:     return isLogged;
1:3251c89:   }
1:3251c89: 
1:3251c89:   public void setLogged(boolean logged) {
1:3251c89:     isLogged = logged;
1:3251c89:   }
1:4a79a86: 
1:4a79a86:   public Map<String, String> getColumnMessageMap() {
1:4a79a86:     return columnMessageMap;
1:4a79a86:   }
1:4a79a86: 
1:4a79a86:   /**
1:4a79a86:    * this method will clear the map entries
1:4a79a86:    */
1:4a79a86:   public void finish() {
1:4a79a86:     if (null != columnMessageMap) {
1:4a79a86:       columnMessageMap.clear();
1:4a79a86:     }
1:4a79a86:   }
1:496cde4: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.converter;
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:4a79a86
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1:   /**
1:    * this map will hold the bad record unified message for columns
1:    */
1:   private Map<String, String> columnMessageMap = new HashMap<>();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public Map<String, String> getColumnMessageMap() {
1:     return columnMessageMap;
1:   }
1: 
1:   /**
1:    * this method will clear the map entries
1:    */
1:   public void finish() {
1:     if (null != columnMessageMap) {
1:       columnMessageMap.clear();
1:     }
1:   }
commit:3251c89
/////////////////////////////////////////////////////////////////////////
1:   private boolean isLogged;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public boolean isLogged() {
1:     return isLogged;
1:   }
1: 
1:   public void setLogged(boolean logged) {
1:     isLogged = logged;
1:   }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.converter;
1: 
1: /**
1:  * It is holder for reason of bad records.
1:  */
1: public class BadRecordLogHolder {
1: 
1:   private String reason;
1: 
1:   private boolean badRecordAdded;
1: 
1:   public String getReason() {
1:     return reason;
1:   }
1: 
1:   public void setReason(String reason) {
1:     this.reason = reason;
1:     badRecordAdded = true;
1:   }
1: 
1:   public boolean isBadRecordNotAdded() {
1:     return badRecordAdded;
1:   }
1: 
1:   public void clear() {
1:     this.badRecordAdded = false;
1:   }
1: }
============================================================================