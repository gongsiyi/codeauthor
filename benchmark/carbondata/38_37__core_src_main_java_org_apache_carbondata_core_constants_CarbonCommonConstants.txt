1:05b2654: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:36ceb59: 
1:cd6a4ff: package org.apache.carbondata.core.constants;
1:376d69f: 
1:72cb415: import java.nio.charset.Charset;
1:72cb415: 
1:3ff574d: import org.apache.carbondata.common.annotations.InterfaceStability;
1:39644b5: import org.apache.carbondata.core.util.CarbonProperty;
1:cd6a4ff: 
1:cd6a4ff: public final class CarbonCommonConstants {
1:ff7793b:   /**
1:d2319f0:    * surrogate value of null
1:ff7793b:    */
1:d2319f0:   public static final int DICT_VALUE_NULL = 1;
1:ff7793b:   /**
1:cd7c210:    * surrogate value of null for direct dictionary
1:d2319f0:    */
1:cd7c210:   public static final int DIRECT_DICT_VALUE_NULL = 1;
1:d2319f0:   /**
1:cd6a4ff:    * integer size in bytes
1:cd7c210:    */
1:cd6a4ff:   public static final int INT_SIZE_IN_BYTE = 4;
1:36ceb59:   /**
1:cd6a4ff:    * short size in bytes
1:d14c403:    */
1:cd6a4ff:   public static final int SHORT_SIZE_IN_BYTE = 2;
1:cd7c210:   /**
1:cd6a4ff:    * DOUBLE size in bytes
1:cd6a4ff:    */
1:cd6a4ff:   public static final int DOUBLE_SIZE_IN_BYTE = 8;
1:7f3c374:   /**
1:cd6a4ff:    * LONG size in bytes
1:cd6a4ff:    */
1:cd6a4ff:   public static final int LONG_SIZE_IN_BYTE = 8;
1:8100d94:   /**
1:cd6a4ff:    * byte to KB conversion factor
1:cd6a4ff:    */
1:cd6a4ff:   public static final int BYTE_TO_KB_CONVERSION_FACTOR = 1024;
1:f1f9348:   /**
1:cd6a4ff:    * BYTE_ENCODING
1:cd6a4ff:    */
1:cd6a4ff:   public static final String BYTE_ENCODING = "ISO-8859-1";
1:f63b1ff:   /**
1:cd6a4ff:    * measure meta data file name
1:cd6a4ff:    */
1:cd6a4ff:   public static final String MEASURE_METADATA_FILE_NAME = "/msrMetaData_";
1:ff7793b: 
1:cd6a4ff:   /**
1:fd0bdf6:    * set the segment ids to query from the table
1:cd6a4ff:    */
1:fd0bdf6:   public static final String CARBON_INPUT_SEGMENTS = "carbon.input.segments.";
1:f1f9348: 
1:cd6a4ff:   /**
1:b08ef00:    * key prefix for set command. 'carbon.datamap.visible.dbName.tableName.dmName = false' means
1:b08ef00:    * that the query on 'dbName.table' will not use the datamap 'dmName'
1:b08ef00:    */
1:b08ef00:   @InterfaceStability.Unstable
1:b08ef00:   public static final String CARBON_DATAMAP_VISIBLE = "carbon.datamap.visible.";
1:b08ef00: 
1:b08ef00:   /**
1:cc0e6f1:    * Fetch and validate the segments.
1:cc0e6f1:    * Used for aggregate table load as segment validation is not required.
1:cc0e6f1:    */
1:cc0e6f1:   public static final String VALIDATE_CARBON_INPUT_SEGMENTS = "validate.carbon.input.segments.";
1:cc0e6f1: 
1:cc0e6f1:   /**
1:5ae596b:    * Whether load/insert command is fired internally or by the user.
1:5ae596b:    * Used to block load/insert on pre-aggregate if fired by user
1:5ae596b:    */
1:5ae596b:   public static final String IS_INTERNAL_LOAD_CALL = "is.internal.load.call";
1:5ae596b: 
1:5ae596b:   /**
1:cd6a4ff:    * location of the carbon member, hierarchy and fact files
1:cd6a4ff:    */
1:285ce72:   @CarbonProperty
1:cd6a4ff:   public static final String STORE_LOCATION = "carbon.storelocation";
1:d14c403:   /**
1:cd6a4ff:    * blocklet size in carbon file
1:cd6a4ff:    */
1:cd6a4ff:   public static final String BLOCKLET_SIZE = "carbon.blocklet.size";
1:cd6a4ff:   /**
1:cd6a4ff:    * carbon sort size
1:cd6a4ff:    */
1:67a8a37:   @Deprecated
1:d14c403:   @CarbonProperty
1:cd6a4ff:   public static final String SORT_SIZE = "carbon.sort.size";
1:cd6a4ff:   /**
1:cd6a4ff:    * CARDINALITY_INCREMENT_DEFAULT_VALUE
1:cd6a4ff:    */
1:cd6a4ff:   public static final int CARDINALITY_INCREMENT_VALUE_DEFAULT_VAL = 10;
1:cd6a4ff:   /**
1:cd6a4ff:    * default blocklet size
1:cd6a4ff:    */
1:cd6a4ff:   public static final String BLOCKLET_SIZE_DEFAULT_VAL = "120000";
1:cd6a4ff:   /**
1:cd6a4ff:    * min blocklet size
1:cd6a4ff:    */
1:2cf1104:   public static final int BLOCKLET_SIZE_MIN_VAL = 2000;
1:cd6a4ff:   /**
1:cd6a4ff:    * max blocklet size
1:cd6a4ff:    */
1:cd6a4ff:   public static final int BLOCKLET_SIZE_MAX_VAL = 12000000;
1:cd6a4ff:   /**
1:cd61beb:    * default block size in MB
1:cd6a4ff:    */
1:793d690:   public static final String BLOCK_SIZE_DEFAULT_VAL = "1024";
1:cd6a4ff:   /**
1:cd61beb:    * min block size in MB
1:cd6a4ff:    */
1:793d690:   public static final int BLOCK_SIZE_MIN_VAL = 1;
1:cd6a4ff:   /**
1:cd61beb:    * max block size in MB
1:cd6a4ff:    */
1:793d690:   public static final int BLOCK_SIZE_MAX_VAL = 2048;
1:cd6a4ff:   /**
1:cd6a4ff:    * default value of number of cores to be used
1:cd6a4ff:    */
1:cd6a4ff:   public static final String NUM_CORES_DEFAULT_VAL = "2";
1:cd6a4ff:   /**
1:cd6a4ff:    * default carbon sort size
1:cd6a4ff:    */
1:cd6a4ff:   public static final String SORT_SIZE_DEFAULT_VAL = "100000";
1:cd6a4ff:   /**
1:cd6a4ff:    * min carbon sort size
1:cd6a4ff:    */
1:cd6a4ff:   public static final int SORT_SIZE_MIN_VAL = 1000;
1:cd6a4ff:   /**
1:cd6a4ff:    * carbon properties file path
1:cd6a4ff:    */
1:cd6a4ff:   public static final String CARBON_PROPERTIES_FILE_PATH = "../../../conf/carbon.properties";
1:cd6a4ff:   /**
1:cd6a4ff:    * CARBON_DDL_BASE_HDFS_URL
1:cd6a4ff:    */
1:7f3c374:   @CarbonProperty
1:cd6a4ff:   public static final String CARBON_DDL_BASE_HDFS_URL = "carbon.ddl.base.hdfs.url";
1:cd6a4ff:   /**
1:cd6a4ff:    * Load Folder Name
1:cd6a4ff:    */
1:cd6a4ff:   public static final String LOAD_FOLDER = "Segment_";
1:733bb51: 
1:8e75531:   public static final String HDFSURL_PREFIX = "hdfs://";
1:733bb51: 
1:733bb51:   public static final String LOCAL_FILE_PREFIX = "file://";
1:733bb51: 
1:d024b9f:   public static final String VIEWFSURL_PREFIX = "viewfs://";
1:d14c403: 
1:1a35cfb:   public static final String ALLUXIOURL_PREFIX = "alluxio://";
1:733bb51: 
1:733bb51:   public static final String S3_PREFIX = "s3://";
1:733bb51: 
1:733bb51:   public static final String S3N_PREFIX = "s3n://";
1:733bb51: 
1:733bb51:   public static final String S3A_PREFIX = "s3a://";
1:cd6a4ff:   /**
1:5ab0957:    * Access Key for s3n
1:cd6a4ff:    */
1:5ab0957:   public static final String S3N_ACCESS_KEY = "fs.s3n.awsAccessKeyId";
1:cd6a4ff:   /**
1:5ab0957:    * Secret Key for s3n
1:cd6a4ff:    */
1:5ab0957:   public static final String S3N_SECRET_KEY = "fs.s3n.awsSecretAccessKey";
1:cd6a4ff:   /**
1:5ab0957:    * Access Key for s3
1:cd6a4ff:    */
1:5ab0957:   public static final String S3_ACCESS_KEY = "fs.s3.awsAccessKeyId";
1:cd6a4ff:   /**
1:5ab0957:    * Secret Key for s3
1:cd6a4ff:    */
1:5ab0957:   public static final String S3_SECRET_KEY = "fs.s3.awsSecretAccessKey";
1:733bb51: 
1:cd6a4ff:   /**
1:8e75531:    * FS_DEFAULT_FS
1:cd6a4ff:    */
1:b338459:   @CarbonProperty
1:8e75531:   public static final String FS_DEFAULT_FS = "fs.defaultFS";
1:cd6a4ff:   /**
1:cd6a4ff:    * BYTEBUFFER_SIZE
1:cd6a4ff:    */
1:7d5a031: 
1:cd6a4ff:   public static final int BYTEBUFFER_SIZE = 24 * 1024;
1:cd6a4ff:   /**
1:cd6a4ff:    * Average constant
1:cd6a4ff:    */
1:cd6a4ff:   public static final String AVERAGE = "avg";
1:cd6a4ff:   /**
2:cd6a4ff:    * Count constant
1:cd6a4ff:    */
1:cd6a4ff:   public static final String COUNT = "count";
1:cd6a4ff:   /**
1:cd6a4ff:    * SUM
1:cd6a4ff:    */
1:cd6a4ff:   public static final String SUM = "sum";
1:cd6a4ff:   /**
1:cd6a4ff:    * DUMMY aggregation function
1:cd6a4ff:    */
1:cd6a4ff:   public static final String DUMMY = "dummy";
1:cd6a4ff:   /**
1:cd6a4ff:    * MEMBER_DEFAULT_VAL
1:cd6a4ff:    */
1:cd6a4ff:   public static final String MEMBER_DEFAULT_VAL = "@NU#LL$!";
1:7d5a031: 
1:376d69f:   /**
1:2b66476:    * default charset to be used for reading and writing
1:2b66476:    */
1:2b66476:   public static final String DEFAULT_CHARSET = "UTF-8";
1:2b66476: 
1:2b66476:   /**
1:376d69f:    * MEMBER_DEFAULT_VAL_ARRAY
1:b282e50:    */
1:2b66476:   public static final byte[] MEMBER_DEFAULT_VAL_ARRAY =
1:2b66476:       MEMBER_DEFAULT_VAL.getBytes(Charset.forName(DEFAULT_CHARSET));
1:b282e50: 
1:b282e50:   /**
1:0e1d37e:    * Bytes for string 0, it is used in codegen in case of null values.
1:0e1d37e:    */
1:500654e:   public static final byte[] ZERO_BYTE_ARRAY = "0".getBytes(Charset.forName(DEFAULT_CHARSET));
1:0e1d37e: 
1:0e1d37e:   /**
1:36ceb59:    * Empty byte array
1:36ceb59:    */
1:36ceb59:   public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
1:36ceb59: 
1:cd6a4ff:   /**
1:cd6a4ff:    * FILE STATUS IN-PROGRESS
1:376d69f:    */
1:cd6a4ff:   public static final String FILE_INPROGRESS_STATUS = ".inprogress";
1:cd6a4ff:   /**
1:cd6a4ff:    * CARBON_BADRECORDS_LOCATION
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String CARBON_BADRECORDS_LOC = "carbon.badRecords.location";
1:cd6a4ff:   /**
1:cd6a4ff:    * CARBON_BADRECORDS_LOCATION_DEFAULT
1:cd6a4ff:    */
1:39644b5:   public static final String CARBON_BADRECORDS_LOC_DEFAULT_VAL = "";
1:cd6a4ff:   /**
1:cd6a4ff:    * HIERARCHY_FILE_EXTENSION
1:cd6a4ff:    */
1:cd6a4ff:   public static final String HIERARCHY_FILE_EXTENSION = ".hierarchy";
1:cd6a4ff:   /**
1:cd6a4ff:    * SORT_TEMP_FILE_LOCATION
1:cd6a4ff:    */
1:cd6a4ff:   public static final String SORT_TEMP_FILE_LOCATION = "sortrowtmp";
1:cd6a4ff:   /**
1:cd6a4ff:    * CARBON_RESULT_SIZE_DEFAULT
1:cd6a4ff:    */
1:cd6a4ff:   public static final String LEVEL_FILE_EXTENSION = ".level";
1:cd6a4ff:   /**
1:cd6a4ff:    * FACT_FILE_EXT
1:cd6a4ff:    */
1:cd6a4ff:   public static final String FACT_FILE_EXT = ".carbondata";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:3e045d8:    * DELETE_DELTA_FILE_EXT
1:cd6a4ff:    */
1:3e045d8:   public static final String DELETE_DELTA_FILE_EXT = ".deletedelta";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:3e045d8:    * UPDATE_DELTA_FILE_EXT
1:cd6a4ff:    */
1:3e045d8:   public static final String UPDATE_DELTA_FILE_EXT = FACT_FILE_EXT;
1:cd6a4ff:   /**
1:cd6a4ff:    * MEASUREMETADATA_FILE_EXT
1:cd6a4ff:    */
1:cd6a4ff:   public static final String MEASUREMETADATA_FILE_EXT = ".msrmetadata";
1:cd6a4ff:   /**
1:cd6a4ff:    * Comment for <code>TYPE_MYSQL</code>
1:cd6a4ff:    */
1:cd6a4ff:   public static final String TYPE_MYSQL = "MYSQL";
1:cd6a4ff:   /**
1:cd6a4ff:    * Comment for <code>TYPE_MSSQL</code>
1:cd6a4ff:    */
1:cd6a4ff:   public static final String TYPE_MSSQL = "MSSQL";
1:cd6a4ff:   /**
1:cd6a4ff:    * Comment for <code>TYPE_ORACLE</code>
1:cd6a4ff:    */
1:cd6a4ff:   public static final String TYPE_ORACLE = "ORACLE";
1:cd6a4ff:   /**
1:cd6a4ff:    * Comment for <code>TYPE_SYBASE</code>
1:cd6a4ff:    */
1:cd6a4ff:   public static final String TYPE_SYBASE = "SYBASE";
1:cd6a4ff:   /**
1:cd6a4ff:    * SORT_INTERMEDIATE_FILES_LIMIT
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String SORT_INTERMEDIATE_FILES_LIMIT = "carbon.sort.intermediate.files.limit";
1:cd6a4ff:   /**
1:cd6a4ff:    * SORT_INTERMEDIATE_FILES_LIMIT_DEFAULT_VALUE
1:cd6a4ff:    */
1:cd6a4ff:   public static final String SORT_INTERMEDIATE_FILES_LIMIT_DEFAULT_VALUE = "20";
1:b338459: 
1:bcf3ca3:   public static final int SORT_INTERMEDIATE_FILES_LIMIT_MIN = 2;
1:bcf3ca3: 
1:bcf3ca3:   public static final int SORT_INTERMEDIATE_FILES_LIMIT_MAX = 50;
1:cd6a4ff:   /**
1:9e11e13:    * BAD_RECORD_KEY_VALUE
1:cd6a4ff:    */
1:9e11e13:   public static final String BAD_RECORD_KEY = "BADRECORD";
1:cd6a4ff:   /**
1:cd6a4ff:    * MERGERD_EXTENSION
1:cd6a4ff:    */
1:cd6a4ff:   public static final String MERGERD_EXTENSION = ".merge";
1:cd6a4ff:   /**
1:cd6a4ff:    * SORT_FILE_WRITE_BUFFER_SIZE
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String CARBON_SORT_FILE_WRITE_BUFFER_SIZE =
1:cd6a4ff:       "carbon.sort.file.write.buffer.size";
1:bcf3ca3:   public static final int CARBON_SORT_FILE_WRITE_BUFFER_SIZE_MIN = 10240;
1:bcf3ca3:   public static final int CARBON_SORT_FILE_WRITE_BUFFER_SIZE_MAX = 10485760;
1:cd6a4ff:   /**
1:cd6a4ff:    * SORT_FILE_WRITE_BUFFER_SIZE_DEFAULT_VALUE
1:cd6a4ff:    */
1:c5aba5f:   public static final String CARBON_SORT_FILE_WRITE_BUFFER_SIZE_DEFAULT_VALUE = "16384";
1:cd6a4ff:   /**
1:cd6a4ff:    * Number of cores to be used while loading
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String NUM_CORES_LOADING = "carbon.number.of.cores.while.loading";
1:cd6a4ff:   /**
1:cd6a4ff:    * Number of cores to be used while compacting
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String NUM_CORES_COMPACTING = "carbon.number.of.cores.while.compacting";
1:cd6a4ff:   /**
1:874764f:    * Number of cores to be used while alter partition
1:cd6a4ff:    */
1:874764f:   public static final String NUM_CORES_ALT_PARTITION = "carbon.number.of.cores.while.altPartition";
1:cd6a4ff:   /**
1:cd6a4ff:    * Default value of number of cores to be used for block sort
1:cd6a4ff:    */
1:cd6a4ff:   public static final String NUM_CORES_BLOCK_SORT_DEFAULT_VAL = "7";
1:cd6a4ff:   /**
1:cd6a4ff:    * Max value of number of cores to be used for block sort
1:cd6a4ff:    */
1:cd6a4ff:   public static final int NUM_CORES_BLOCK_SORT_MAX_VAL = 12;
1:cd6a4ff:   /**
1:cd6a4ff:    * Min value of number of cores to be used for block sort
1:cd6a4ff:    */
1:cd6a4ff:   public static final int NUM_CORES_BLOCK_SORT_MIN_VAL = 1;
1:cd6a4ff:   /**
1:cd6a4ff:    * CSV_READ_BUFFER_SIZE
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String CSV_READ_BUFFER_SIZE = "carbon.csv.read.buffersize.byte";
1:cd6a4ff:   /**
1:cd6a4ff:    * CSV_READ_BUFFER_SIZE
1:cd6a4ff:    */
1:cd6a4ff:   public static final String CSV_READ_BUFFER_SIZE_DEFAULT = "50000";
1:cd6a4ff:   /**
1:1a35cfb:    * min value for csv read buffer size
1:cd6a4ff:    */
1:1a35cfb:   public static final int CSV_READ_BUFFER_SIZE_MIN = 10240; //10 kb
1:cd6a4ff:   /**
1:1a35cfb:    * max value for csv read buffer size
1:cd6a4ff:    */
1:1a35cfb:   public static final int CSV_READ_BUFFER_SIZE_MAX = 10485760; // 10 mb
1:bcf3ca3: 
1:cd6a4ff:   /**
1:cd6a4ff:    * CSV_READ_COPIES
1:cd6a4ff:    */
1:cd6a4ff:   public static final String DEFAULT_NUMBER_CORES = "2";
1:cd6a4ff:   /**
1:cd6a4ff:    * CSV_FILE_EXTENSION
1:cd6a4ff:    */
1:cd6a4ff:   public static final String CSV_FILE_EXTENSION = ".csv";
1:1a35cfb: 
1:cd6a4ff:   /**
1:781a66c:    * LOG_FILE_EXTENSION
1:cd6a4ff:    */
1:781a66c:   public static final String LOG_FILE_EXTENSION = ".log";
1:1a35cfb: 
1:cd6a4ff:   /**
1:cd6a4ff:    * COLON_SPC_CHARACTER
1:cd6a4ff:    */
1:cd6a4ff:   public static final String COLON_SPC_CHARACTER = ":!@#COLON#@!:";
1:cd6a4ff:   /**
1:cd6a4ff:    * HASH_SPC_CHARATER
1:cd6a4ff:    */
1:cd6a4ff:   public static final String HASH_SPC_CHARACTER = "#!@:HASH:@!#";
1:cd6a4ff:   /**
1:cd6a4ff:    * SEMICOLON_SPC_CHARATER
1:cd6a4ff:    */
1:cd6a4ff:   public static final String SEMICOLON_SPC_CHARACTER = ";#!@:SEMIC:@!#;";
1:cd6a4ff:   /**
1:cd6a4ff:    * AMPERSAND_SPC_CHARATER
1:cd6a4ff:    */
1:cd6a4ff:   public static final String AMPERSAND_SPC_CHARACTER = "&#!@:AMPER:@!#&";
1:cd6a4ff:   /**
1:cd6a4ff:    * ATTHERATE_SPC_CHARATER
1:cd6a4ff:    */
1:cd6a4ff:   public static final String COMA_SPC_CHARACTER = ",#!:COMA:!#,";
1:cd6a4ff:   /**
1:cd6a4ff:    * HYPHEN_SPC_CHARACTER
1:cd6a4ff:    */
1:cd6a4ff:   public static final String HYPHEN_SPC_CHARACTER = "-#!:HYPHEN:!#-";
1:cd6a4ff:   /**
1:cd6a4ff:    * SORT_TEMP_FILE_EXT
1:cd6a4ff:    */
1:cd6a4ff:   public static final String SORT_TEMP_FILE_EXT = ".sorttemp";
1:cd6a4ff:   /**
1:cd6a4ff:    * CARBON_MERGE_SORT_READER_THREAD
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String CARBON_MERGE_SORT_READER_THREAD = "carbon.merge.sort.reader.thread";
1:cd6a4ff:   /**
1:cd6a4ff:    * CARBON_MERGE_SORT_READER_THREAD_DEFAULTVALUE
1:cd6a4ff:    */
1:cd6a4ff:   public static final String CARBON_MERGE_SORT_READER_THREAD_DEFAULTVALUE = "3";
1:cd6a4ff:   /**
1:cd6a4ff:    * DEFAULT_COLLECTION_SIZE
1:cd6a4ff:    */
1:cd6a4ff:   public static final int DEFAULT_COLLECTION_SIZE = 16;
1:cd6a4ff:   /**
2:cd6a4ff:    * CARBON_TIMESTAMP_DEFAULT_FORMAT
1:cd6a4ff:    */
1:cd6a4ff:   public static final String CARBON_TIMESTAMP_DEFAULT_FORMAT = "yyyy-MM-dd HH:mm:ss";
1:cd6a4ff:   /**
1:374b00f:    * Property for specifying the format of TIMESTAMP data type column.
1:374b00f:    * e.g. yyyy/MM/dd HH:mm:ss, or using CARBON_TIMESTAMP_DEFAULT_FORMAT
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String CARBON_TIMESTAMP_FORMAT = "carbon.timestamp.format";
1:39644b5: 
1:cd6a4ff:   /**
2:ea04fce:    * CARBON_DATE_DEFAULT_FORMAT
1:cd6a4ff:    */
1:ea04fce:   public static final String CARBON_DATE_DEFAULT_FORMAT = "yyyy-MM-dd";
1:cd6a4ff:   /**
1:374b00f:    * Property for specifying the format of DATE data type column.
1:374b00f:    * e.g. yyyy/MM/dd , or using CARBON_DATE_DEFAULT_FORMAT
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:ea04fce:   public static final String CARBON_DATE_FORMAT = "carbon.date.format";
1:cd6a4ff:   /**
1:cd6a4ff:    * DIMENSION_SPLIT_VALUE_IN_COLUMNAR_DEFAULTVALUE
1:cd6a4ff:    */
1:cd6a4ff:   public static final String DIMENSION_SPLIT_VALUE_IN_COLUMNAR_DEFAULTVALUE = "1";
1:cd6a4ff:   /**
1:cd6a4ff:    * IS_FULLY_FILLED_BITS_DEFAULT_VALUE
1:cd6a4ff:    */
1:cd6a4ff:   public static final String IS_FULLY_FILLED_BITS_DEFAULT_VALUE = "true";
1:cd6a4ff:   /**
1:395f4a6:    * ENABLE_QUERY_STATISTICS
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:395f4a6:   public static final String ENABLE_QUERY_STATISTICS = "enable.query.statistics";
1:cd6a4ff:   /**
1:395f4a6:    * ENABLE_QUERY_STATISTICS_DEFAULT
1:cd6a4ff:    */
1:395f4a6:   public static final String ENABLE_QUERY_STATISTICS_DEFAULT = "false";
1:cd6a4ff:   /**
1:cd6a4ff:    * TIME_STAT_UTIL_TYPE
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String ENABLE_DATA_LOADING_STATISTICS = "enable.data.loading.statistics";
1:cd6a4ff:   /**
1:cd6a4ff:    * TIME_STAT_UTIL_TYPE_DEFAULT
1:cd6a4ff:    */
1:cd6a4ff:   public static final String ENABLE_DATA_LOADING_STATISTICS_DEFAULT = "false";
1:cd6a4ff:   /**
1:cd6a4ff:    * CONSTANT_SIZE_TEN
1:cd6a4ff:    */
1:cd6a4ff:   public static final int CONSTANT_SIZE_TEN = 10;
1:cd6a4ff:   /**
1:cd6a4ff:    * LEVEL_METADATA_FILE
1:cd6a4ff:    */
1:cd6a4ff:   public static final String LEVEL_METADATA_FILE = "levelmetadata_";
1:39644b5: 
1:cd6a4ff:   /**
1:cd6a4ff:    * COMMA
1:cd6a4ff:    */
1:cd6a4ff:   public static final String COMMA = ",";
1:cd6a4ff:   /**
1:cd6a4ff:    * UNDERSCORE
1:cd6a4ff:    */
1:cd6a4ff:   public static final String UNDERSCORE = "_";
1:cd6a4ff:   /**
1:2ee7775:    * DASH
1:2ee7775:    */
1:2ee7775:   public static final String DASH = "-";
1:2ee7775:   /**
1:cd6a4ff:    * POINT
1:cd6a4ff:    */
1:cd6a4ff:   public static final String POINT = ".";
1:cd6a4ff:   /**
1:fc1d620:    * Windows File separator
1:cd6a4ff:    */
1:fc1d620:   public static final String WINDOWS_FILE_SEPARATOR = "\\";
1:cd6a4ff:   /**
1:cd6a4ff:    * File separator
1:cd6a4ff:    */
1:cd6a4ff:   public static final String FILE_SEPARATOR = "/";
1:cd6a4ff:   /**
1:cd6a4ff:    * MAX_QUERY_EXECUTION_TIME
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String MAX_QUERY_EXECUTION_TIME = "max.query.execution.time";
1:cd6a4ff:   /**
1:cd6a4ff:    * CARBON_TIMESTAMP
1:cd6a4ff:    */
1:cd6a4ff:   public static final String CARBON_TIMESTAMP = "dd-MM-yyyy HH:mm:ss";
1:781a66c: 
1:cd6a4ff:   /**
1:3e045d8:    * CARBON_TIMESTAMP
1:cd6a4ff:    */
1:3e045d8:   public static final String CARBON_TIMESTAMP_MILLIS = "dd-MM-yyyy HH:mm:ss:SSS";
1:cd6a4ff:   /**
1:7dcc2e7:    * NUMBER_OF_TRIES_FOR_LOAD_METADATA_LOCK.
1:7dcc2e7:    *
1:7dcc2e7:    * Because we want concurrent loads to be completed even if they have to wait for the lock
1:7dcc2e7:    * therefore taking the default as 100.
1:7dcc2e7:    *
1:7dcc2e7:    * Example: Concurrent loads will use this to wait to acquire the table status lock.
1:cd6a4ff:    */
1:7dcc2e7:   public static final int NUMBER_OF_TRIES_FOR_CONCURRENT_LOCK_DEFAULT = 100;
1:cd6a4ff:   /**
1:cd6a4ff:    * MAX_TIMEOUT_FOR_LOAD_METADATA_LOCK
1:7dcc2e7:    *
1:7dcc2e7:    * * Example: Concurrent loads will use this to wait to acquire the table status lock.
1:cd6a4ff:    */
1:7dcc2e7:   public static final int MAX_TIMEOUT_FOR_CONCURRENT_LOCK_DEFAULT = 1;
1:cd6a4ff:   /**
2:cd6a4ff:    * NUMBER_OF_TRIES_FOR_LOAD_METADATA_LOCK
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:7dcc2e7:   public static final String NUMBER_OF_TRIES_FOR_CONCURRENT_LOCK =
1:7dcc2e7:       "carbon.concurrent.lock.retries";
1:cd6a4ff:   /**
1:cd6a4ff:    * MAX_TIMEOUT_FOR_LOAD_METADATA_LOCK
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:7dcc2e7:   public static final String MAX_TIMEOUT_FOR_CONCURRENT_LOCK =
1:7dcc2e7:       "carbon.concurrent.lock.retry.timeout.sec";
1:7dcc2e7: 
1:7dcc2e7:   /**
1:7dcc2e7:    * NUMBER_OF_TRIES_FOR_CARBON_LOCK
1:7dcc2e7:    */
1:7dcc2e7:   public static final int NUMBER_OF_TRIES_FOR_CARBON_LOCK_DEFAULT = 3;
1:7dcc2e7:   /**
1:7dcc2e7:    * MAX_TIMEOUT_FOR_CARBON_LOCK
1:7dcc2e7:    */
1:7dcc2e7:   public static final int MAX_TIMEOUT_FOR_CARBON_LOCK_DEFAULT = 5;
1:7dcc2e7:   /**
1:7dcc2e7:    * NUMBER_OF_TRIES_FOR_CARBON_LOCK
1:7dcc2e7:    */
1:7dcc2e7:   @CarbonProperty
1:7dcc2e7:   public static final String NUMBER_OF_TRIES_FOR_CARBON_LOCK =
1:7dcc2e7:       "carbon.lock.retries";
1:7dcc2e7:   /**
1:7dcc2e7:    * MAX_TIMEOUT_FOR_CARBON_LOCK
1:7dcc2e7:    */
1:7dcc2e7:   @CarbonProperty
1:7dcc2e7:   public static final String MAX_TIMEOUT_FOR_CARBON_LOCK =
1:7dcc2e7:       "carbon.lock.retry.timeout.sec";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:25b4ba2:    * compressor for writing/reading carbondata file
1:cd6a4ff:    */
1:25b4ba2:   public static final String COMPRESSOR = "carbon.column.compressor";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:25b4ba2:    * default compressor is snappy
1:cd6a4ff:    */
1:25b4ba2:   public static final String DEFAULT_COMPRESSOR = "snappy";
1:781a66c: 
1:cd6a4ff:   public static final String STRING = "String";
1:cd6a4ff: 
1:cd6a4ff:   public static final String SHORT = "Short";
1:cd6a4ff:   public static final String TIMESTAMP = "Timestamp";
1:956833e:   public static final String ARRAY = "array";
1:956833e:   public static final String STRUCT = "struct";
1:fb6dffe:   public static final String MAP = "map";
1:cd6a4ff:   public static final String FROM = "from";
1:cd6a4ff:   /**
1:cd6a4ff:    * FACT_UPDATE_EXTENSION.
1:cd6a4ff:    */
1:cd6a4ff:   public static final String FACT_UPDATE_EXTENSION = ".carbondata_update";
1:cd6a4ff:   public static final String FACT_DELETE_EXTENSION = "_delete";
1:cd6a4ff:   /**
1:cd6a4ff:    * MARKED_FOR_UPDATION
1:cd6a4ff:    */
1:cd6a4ff:   public static final String FACT_FILE_UPDATED = "update";
1:cd6a4ff:   /**
1:cd6a4ff:    * MAX_QUERY_EXECUTION_TIME
1:cd6a4ff:    */
1:cd6a4ff:   public static final int DEFAULT_MAX_QUERY_EXECUTION_TIME = 60;
1:cd6a4ff:   /**
1:3e045d8:    * TABLE UPDATE STATUS FILENAME
1:cd6a4ff:    */
1:3e045d8:   public static final String TABLEUPDATESTATUS_FILENAME = "tableupdatestatus";
1:cd6a4ff:   /**
1:72cb415:    * The batch size of records which returns to client.
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String DETAIL_QUERY_BATCH_SIZE = "carbon.detail.batch.size";
1:72cb415: 
1:72cb415:   public static final int DETAIL_QUERY_BATCH_SIZE_DEFAULT = 100;
1:cd6a4ff:   /**
1:cd6a4ff:    * SPILL_OVER_DISK_PATH
1:cd6a4ff:    */
1:cd6a4ff:   public static final String SCHEMAS_MODIFIED_TIME_FILE = "modifiedTime.mdt";
1:cd6a4ff:   public static final String DEFAULT_INVISIBLE_DUMMY_MEASURE = "default_dummy_measure";
1:ff84a2e:   public static final String CARBON_IMPLICIT_COLUMN_POSITIONID = "positionId";
1:ff84a2e:   public static final String CARBON_IMPLICIT_COLUMN_TUPLEID = "tupleId";
1:dd42277:   public static final String CARBON_IMPLICIT_COLUMN_SEGMENTID = "segId";
1:cd6a4ff:   /**
1:b6ab4ef:    * max driver lru cache size upto which lru cache will be loaded in memory
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:b6ab4ef:   public static final String CARBON_MAX_DRIVER_LRU_CACHE_SIZE = "carbon.max.driver.lru.cache.size";
1:ff84a2e:   public static final String POSITION_REFERENCE = "positionReference";
1:cd6a4ff:   /**
1:ff84a2e:    * implicit column which will be added to each carbon table
1:cd6a4ff:    */
1:ff84a2e:   public static final String POSITION_ID = "positionId";
1:cd6a4ff:   /**
1:b6ab4ef:    * max executor lru cache size upto which lru cache will be loaded in memory
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:b6ab4ef:   public static final String CARBON_MAX_EXECUTOR_LRU_CACHE_SIZE =
1:b6ab4ef:       "carbon.max.executor.lru.cache.size";
1:cd6a4ff:   /**
1:b6ab4ef:    * max lru cache size default value in MB
1:cd6a4ff:    */
1:b6ab4ef:   public static final String CARBON_MAX_LRU_CACHE_SIZE_DEFAULT = "-1";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * CARBON_PREFETCH_BUFFERSIZE
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:c5aba5f:   public static final String CARBON_PREFETCH_BUFFERSIZE = "carbon.prefetch.buffersize";
1:cd6a4ff:   /**
1:c5aba5f:    * CARBON_PREFETCH_BUFFERSIZE DEFAULT VALUE
1:cd6a4ff:    */
1:c5aba5f:   public static final String CARBON_PREFETCH_BUFFERSIZE_DEFAULT = "1000";
1:cd6a4ff:   /**
1:cd6a4ff:    * CARBON_PREFETCH_IN_MERGE
1:cd6a4ff:    */
1:cd6a4ff:   public static final boolean CARBON_PREFETCH_IN_MERGE_VALUE = false;
1:cd6a4ff:   /**
1:cd6a4ff:    * TEMPWRITEFILEEXTENSION
1:cd6a4ff:    */
1:cd6a4ff:   public static final String TEMPWRITEFILEEXTENSION = ".write";
1:cd6a4ff:   /**
1:cd6a4ff:    * ENABLE_AUTO_LOAD_MERGE
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String ENABLE_AUTO_LOAD_MERGE = "carbon.enable.auto.load.merge";
1:cd6a4ff:   /**
1:cd6a4ff:    * DEFAULT_ENABLE_AUTO_LOAD_MERGE
1:cd6a4ff:    */
1:cd6a4ff:   public static final String DEFAULT_ENABLE_AUTO_LOAD_MERGE = "false";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:60dfdd3:    * DEFAULT_FLAT_FOLDER
1:60dfdd3:    */
1:60dfdd3:   public static final String DEFAULT_FLAT_FOLDER = "false";
1:60dfdd3: 
1:60dfdd3:   /**
1:cd6a4ff:    * ZOOKEEPER_ENABLE_LOCK if this is set to true then zookeeper will be used to handle locking
1:cd6a4ff:    * mechanism of carbon
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String LOCK_TYPE = "carbon.lock.type";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cb10d03:    * Specifies the path where the lock files have to be created.
1:cb10d03:    * By default, lock files are created in table path.
1:cb10d03:    */
1:cb10d03:   @CarbonProperty
1:cb10d03:   public static final String LOCK_PATH = "carbon.lock.path";
1:cb10d03: 
1:cb10d03:   /**
1:cd6a4ff:    * ZOOKEEPER_ENABLE_DEFAULT the default value for zookeeper will be true for carbon
1:cd6a4ff:    */
1:cd6a4ff:   public static final String LOCK_TYPE_DEFAULT = "LOCALLOCK";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * ZOOKEEPER_LOCATION this is the location in zookeeper file system where locks are created.
1:cd6a4ff:    * mechanism of carbon
1:cd6a4ff:    */
1:cd6a4ff:   public static final String ZOOKEEPER_LOCATION = "/CarbonLocks";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * maximum dictionary chunk size that can be kept in memory while writing dictionary file
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String DICTIONARY_ONE_CHUNK_SIZE = "carbon.dictionary.chunk.size";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:8815dd5:    *  Dictionary Server Worker Threads
1:8815dd5:    */
1:39644b5:   @CarbonProperty
1:8815dd5:   public static final String DICTIONARY_WORKER_THREADS = "dictionary.worker.threads";
1:8815dd5: 
1:8815dd5:   /**
1:8815dd5:    *  Dictionary Server Worker Threads
1:8815dd5:    */
1:8815dd5:   public static final String DICTIONARY_WORKER_THREADS_DEFAULT = "1";
1:8815dd5: 
1:8815dd5:   /**
1:cd6a4ff:    * dictionary chunk default size
1:cd6a4ff:    */
1:cd6a4ff:   public static final String DICTIONARY_ONE_CHUNK_SIZE_DEFAULT = "10000";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * xxhash algorithm property for hashmap
1:cd6a4ff:    */
1:cd6a4ff:   public static final String ENABLE_XXHASH = "carbon.enableXXHash";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * xxhash algorithm property for hashmap. Default value false
1:cd6a4ff:    */
1:cd6a4ff:   public static final String ENABLE_XXHASH_DEFAULT = "true";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:72cb415:    * default charset class to be used for reading and writing
1:72cb415:    */
1:72cb415:   public static final Charset DEFAULT_CHARSET_CLASS = Charset.forName(DEFAULT_CHARSET);
1:72cb415: 
1:72cb415:   /**
1:cd6a4ff:    * surrogate key that will be sent whenever in the dictionary chunks
1:cd6a4ff:    * a valid surrogate key is not found for a given dictionary value
1:cd6a4ff:    */
1:cd6a4ff:   public static final int INVALID_SURROGATE_KEY = -1;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * surrogate key for MEMBER_DEFAULT_VAL
1:cd6a4ff:    */
1:cd6a4ff:   public static final int MEMBER_DEFAULT_VAL_SURROGATE_KEY = 1;
1:cd6a4ff: 
1:cd6a4ff:   public static final String INVALID_SEGMENT_ID = "-1";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:40c31e8:    * default load time of the segment
1:cd6a4ff:    */
1:40c31e8:   public static final long SEGMENT_LOAD_TIME_DEFAULT = -1;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Size of Major Compaction in MBs
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:f1c6ddd:   public static final String CARBON_MAJOR_COMPACTION_SIZE = "carbon.major.compaction.size";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * By default size of major compaction in MBs.
1:cd6a4ff:    */
1:f1c6ddd:   public static final String DEFAULT_CARBON_MAJOR_COMPACTION_SIZE = "1024";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This property is used to tell how many segments to be preserved from merging.
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final java.lang.String PRESERVE_LATEST_SEGMENTS_NUMBER =
1:cd6a4ff:       "carbon.numberof.preserve.segments";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * If preserve property is enabled then 2 segments will be preserved.
1:cd6a4ff:    */
1:cd6a4ff:   public static final String DEFAULT_PRESERVE_LATEST_SEGMENTS_NUMBER = "0";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This property will determine the loads of how many days can be compacted.
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final java.lang.String DAYS_ALLOWED_TO_COMPACT = "carbon.allowed.compaction.days";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Default value of 1 day loads can be compacted
1:cd6a4ff:    */
1:cd6a4ff:   public static final String DEFAULT_DAYS_ALLOWED_TO_COMPACT = "0";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * space reserved for writing block meta data in carbon data file
1:cd6a4ff:    */
1:cd6a4ff:   public static final String CARBON_BLOCK_META_RESERVED_SPACE =
1:cd6a4ff:       "carbon.block.meta.size.reserved.percentage";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * default value for space reserved for writing block meta data in carbon data file
1:cd6a4ff:    */
1:cd6a4ff:   public static final String CARBON_BLOCK_META_RESERVED_SPACE_DEFAULT = "10";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * property to enable min max during filter query
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String CARBON_QUERY_MIN_MAX_ENABLED = "carbon.enableMinMax";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * default value to enable min or max during filter query execution
1:cd6a4ff:    */
1:cd6a4ff:   public static final String MIN_MAX_DEFAULT_VALUE = "true";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * this variable is to enable/disable prefetch of data during merge sort while
1:cd6a4ff:    * reading data from sort temp files
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String CARBON_MERGE_SORT_PREFETCH = "carbon.merge.sort.prefetch";
1:cd6a4ff:   public static final String CARBON_MERGE_SORT_PREFETCH_DEFAULT = "true";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:ab76347:    * If we are executing insert into query from source table using select statement
1:ab76347:    * & loading the same source table concurrently, when select happens on source table
1:ab76347:    * during the data load , it gets new record for which dictionary is not generated,
1:ab76347:    * So there will be inconsistency. To avoid this condition we can persist the dataframe
1:ab76347:    * into MEMORY_AND_DISK and perform insert into operation. By default this value
1:ab76347:    * will be false because no need to persist the dataframe in all cases. If user want
1:ab76347:    * to run load and insert queries on source table concurrently then user can enable this flag
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:181f0ac:   @InterfaceStability.Evolving
1:ab76347:   public static final String CARBON_INSERT_PERSIST_ENABLED = "carbon.insert.persist.enable";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:ab76347:    * by default rdd will not be persisted in the insert case.
1:cd6a4ff: 
1:cd6a4ff:    */
1:ab76347:   public static final String CARBON_INSERT_PERSIST_ENABLED_DEFAULT = "false";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:181f0ac:    * Which storage level to persist dataset when insert into data
1:181f0ac:    * with 'carbon.insert.persist.enable'='true'
1:cd6a4ff:    */
1:181f0ac:   @CarbonProperty
1:181f0ac:   @InterfaceStability.Evolving
1:181f0ac:   public static final String CARBON_INSERT_STORAGE_LEVEL =
1:181f0ac:       "carbon.insert.storage.level";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:181f0ac:    * The default value(MEMORY_AND_DISK) is the same as the default storage level of Dataset.
1:181f0ac:    * Unlike `RDD.cache()`, the default storage level is set to be `MEMORY_AND_DISK` because
1:181f0ac:    * recomputing the in-memory columnar representation of the underlying table is expensive.
1:181f0ac:    *
1:181f0ac:    * if user's executor has less memory, set the CARBON_INSERT_STORAGE_LEVEL
1:181f0ac:    * to MEMORY_AND_DISK_SER or other storage level to correspond to different environment.
1:181f0ac:    * You can get more recommendations about storage level in spark website:
1:181f0ac:    * http://spark.apache.org/docs/latest/rdd-programming-guide.html#rdd-persistence.
1:cd6a4ff:    */
1:181f0ac:   public static final String CARBON_INSERT_STORAGE_LEVEL_DEFAULT = "MEMORY_AND_DISK";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:2cf1104:    * default name of data base
1:cd6a4ff:    */
1:cd6a4ff:   public static final String DATABASE_DEFAULT_NAME = "default";
1:cd6a4ff: 
1:cd6a4ff:   public static final String DICTIONARY_EXCLUDE = "dictionary_exclude";
1:cd6a4ff:   public static final String DICTIONARY_INCLUDE = "dictionary_include";
1:dc53dee:   public static final String LONG_STRING_COLUMNS = "long_string_columns";
1:be20fef: 
1:be20fef:   /**
1:be20fef:    * Table property to enable or disable local dictionary generation
1:be20fef:    */
1:be20fef:   public static final String LOCAL_DICTIONARY_ENABLE = "local_dictionary_enable";
1:be20fef: 
1:be20fef:   /**
1:be20fef:    * default value for local dictionary generation
1:be20fef:    */
1:34ca021:   public static final String LOCAL_DICTIONARY_ENABLE_DEFAULT = "false";
1:be20fef: 
1:be20fef:   /**
1:7843845:    * System property to enable or disable local dictionary generation
1:7843845:    */
1:7843845:   public static final String LOCAL_DICTIONARY_SYSTEM_ENABLE = "carbon.local.dictionary.enable";
1:7843845: 
1:7843845:   /**
1:2ccdbb7:    * System property to enable or disable decoder based local dictionary fallback
1:2ccdbb7:    */
1:2ccdbb7:   public static final String LOCAL_DICTIONARY_DECODER_BASED_FALLBACK =
1:2ccdbb7:       "carbon.local.dictionary.decoder.fallback";
1:2ccdbb7: 
1:2ccdbb7:   /**
1:2ccdbb7:    * System property to enable or disable decoder based local dictionary fallback default value
1:2ccdbb7:    */
1:2ccdbb7:   public static final String LOCAL_DICTIONARY_DECODER_BASED_FALLBACK_DEFAULT = "true";
1:2ccdbb7:   /**
1:be20fef:    * Threshold value for local dictionary
1:be20fef:    */
1:be20fef:   public static final String LOCAL_DICTIONARY_THRESHOLD = "local_dictionary_threshold";
1:be20fef: 
1:be20fef:   /**
1:be20fef:    * default value for local dictionary
1:be20fef:    */
1:b0d24ea:   public static final String LOCAL_DICTIONARY_THRESHOLD_DEFAULT = "10000";
1:be20fef: 
1:be20fef:   /**
1:3a4b881:    * max dictionary threshold
1:3a4b881:    */
1:3a4b881:   public static final int LOCAL_DICTIONARY_MAX = 100000;
1:3a4b881: 
1:29dc302:   /**
1:3a4b881:    * min dictionary threshold
1:3a4b881:    */
1:3a4b881:   public static final int LOCAL_DICTIONARY_MIN = 1000;
1:3a4b881: 
1:3a4b881:   /**
1:be20fef:    * Table property to specify the columns for which local dictionary needs to be generated.
1:be20fef:    */
1:be20fef:   public static final String LOCAL_DICTIONARY_INCLUDE = "local_dictionary_include";
1:be20fef: 
1:be20fef:   /**
1:be20fef:    * Table property to specify the columns for which local dictionary should not be to be generated.
1:be20fef:    */
1:be20fef:   public static final String LOCAL_DICTIONARY_EXCLUDE = "local_dictionary_exclude";
1:be20fef: 
1:3a4b881:   /**
1:29dc302:    * key for dictionary path
1:29dc302:    */
1:29dc302:   public static final String DICTIONARY_PATH = "dictionary_path";
1:9f94529:   public static final String SORT_COLUMNS = "sort_columns";
1:dae342b:   public static final String PARTITION_TYPE = "partition_type";
1:dae342b:   public static final String NUM_PARTITIONS = "num_partitions";
1:dae342b:   public static final String RANGE_INFO = "range_info";
1:dae342b:   public static final String LIST_INFO = "list_info";
1:cd6a4ff:   public static final String COLUMN_PROPERTIES = "columnproperties";
1:cd61beb:   // table block size in MB
1:793d690:   public static final String TABLE_BLOCKSIZE = "table_blocksize";
1:526e3bf:   // table blocklet size in MB
1:526e3bf:   public static final String TABLE_BLOCKLET_SIZE = "table_blocklet_size";
1:96a75b3:   // set in column level to disable inverted index
1:96a75b3:   public static final String NO_INVERTED_INDEX = "no_inverted_index";
1:f1c6ddd:   // table property name of major compaction size
1:f1c6ddd:   public static final String TABLE_MAJOR_COMPACTION_SIZE = "major_compaction_size";
1:f1c6ddd:   // table property name of auto load merge
1:f1c6ddd:   public static final String TABLE_AUTO_LOAD_MERGE = "auto_load_merge";
1:f1c6ddd:   // table property name of compaction level threshold
1:f1c6ddd:   public static final String TABLE_COMPACTION_LEVEL_THRESHOLD = "compaction_level_threshold";
1:f1c6ddd:   // table property name of preserve segments numbers while compaction
1:f1c6ddd:   public static final String TABLE_COMPACTION_PRESERVE_SEGMENTS = "compaction_preserve_segments";
1:f1c6ddd:   // table property name of allowed compaction days while compaction
1:f1c6ddd:   public static final String TABLE_ALLOWED_COMPACTION_DAYS = "allowed_compaction_days";
1:60dfdd3:   // Flat folder support on table. when it is true all carbondata files store directly under table
1:60dfdd3:   // path instead of sub folders.
1:60dfdd3:   public static final String FLAT_FOLDER = "flat_folder";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * 16 mb size
1:cd6a4ff:    */
1:256dbed:   public static final long CARBON_16MB = 16 * 1024 * 1024;
1:cd6a4ff:   /**
1:cd6a4ff:    * 256 mb size
1:cd6a4ff:    */
1:256dbed:   public static final long CARBON_256MB = 256 * 1024 * 1024;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * ZOOKEEPERLOCK TYPE
1:cd6a4ff:    */
1:2cf1104:   public static final String CARBON_LOCK_TYPE_ZOOKEEPER = "ZOOKEEPERLOCK";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * LOCALLOCK TYPE
1:cd6a4ff:    */
1:2cf1104:   public static final String CARBON_LOCK_TYPE_LOCAL = "LOCALLOCK";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * HDFSLOCK TYPE
1:cd6a4ff:    */
1:2cf1104:   public static final String CARBON_LOCK_TYPE_HDFS = "HDFSLOCK";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:5ab0957:    * S3LOCK TYPE
1:cd6a4ff:    */
1:5ab0957:   public static final String CARBON_LOCK_TYPE_S3 = "S3LOCK";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Invalid filter member log string
1:cd6a4ff:    */
1:2cf1104:   public static final String FILTER_INVALID_MEMBER =
1:2cf1104:       " Invalid Record(s) are present while filter evaluation. ";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Number of unmerged segments to be merged.
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:cd6a4ff:   public static final String COMPACTION_SEGMENT_LEVEL_THRESHOLD =
1:cd6a4ff:       "carbon.compaction.level.threshold";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Default count for Number of segments to be merged in levels is 4,3
1:cd6a4ff:    */
1:cd6a4ff:   public static final String DEFAULT_SEGMENT_LEVEL_THRESHOLD = "4,3";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:3e045d8:    * Number of Update Delta files which is the Threshold for IUD compaction.
1:3e045d8:    * Only accepted Range is 0 - 10000. Outside this range system will pick default value.
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:3e045d8:   public static final String UPDATE_DELTAFILE_COUNT_THRESHOLD_IUD_COMPACTION =
1:2cf1104:       "carbon.horizontal.update.compaction.threshold";
1:cd6a4ff:   /**
1:3e045d8:    * Default count of segments which act as a threshold for IUD compaction merge.
1:cd6a4ff:    */
1:3e045d8:   public static final String DEFAULT_UPDATE_DELTAFILE_COUNT_THRESHOLD_IUD_COMPACTION = "1";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:3e045d8:    * Number of Delete Delta files which is the Threshold for IUD compaction.
1:3e045d8:    * Only accepted Range is 0 - 10000. Outside this range system will pick default value.
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:2cf1104:   public static final String DELETE_DELTAFILE_COUNT_THRESHOLD_IUD_COMPACTION =
1:3e045d8:       "carbon.horizontal.delete.compaction.threshold";
1:cd6a4ff:   /**
1:3e045d8:    * Default count of segments which act as a threshold for IUD compaction merge.
1:cd6a4ff:    */
1:3e045d8:   public static final String DEFAULT_DELETE_DELTAFILE_COUNT_THRESHOLD_IUD_COMPACTION = "1";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * default location of the carbon metastore db
1:cd6a4ff:    */
1:cd6a4ff:   public static final String METASTORE_LOCATION_DEFAULT_VAL = "../carbon.metastore";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * hive connection url
1:cd6a4ff:    */
1:cd6a4ff:   public static final String HIVE_CONNECTION_URL = "javax.jdo.option.ConnectionURL";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * If the level 2 compaction is done in minor then new compacted segment will end with .2
1:cd6a4ff:    */
1:d25fee2:   public static final String LEVEL2_COMPACTION_INDEX = ".2";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Indicates compaction
1:cd6a4ff:    */
1:d25fee2:   public static final String COMPACTION_KEY_WORD = "COMPACTION";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:874764f:    * Indicates alter partition
1:cd6a4ff:    */
1:7ef9164:   public static final String ALTER_PARTITION_KEY_WORD = "ALTER_PARTITION";
1:181f0ac: 
1:cd6a4ff:   /**
1:cd6a4ff:    * hdfs temporary directory key
1:cd6a4ff:    */
1:cd6a4ff:   public static final String HDFS_TEMP_LOCATION = "hadoop.tmp.dir";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * zookeeper url key
1:cd6a4ff:    */
1:cd6a4ff:   public static final String ZOOKEEPER_URL = "spark.deploy.zookeeper.url";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:ffbb359:    * File created in case of minor compaction request
1:cd6a4ff:    */
1:d25fee2:   public static final String minorCompactionRequiredFile = "compactionRequired_minor";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:ffbb359:    * File created in case of major compaction request
1:cd6a4ff:    */
1:d25fee2:   public static final String majorCompactionRequiredFile = "compactionRequired_major";
1:cd6a4ff: 
1:cd6a4ff:   /**
1:9702f7a:    * @Deprecated : This property has been deprecated.
1:ffbb359:    * Property for enabling system level compaction lock.1 compaction can run at once.
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:d25fee2:   public static final String ENABLE_CONCURRENT_COMPACTION = "carbon.concurrent.compaction";
1:181f0ac: 
1:cd6a4ff:   /**
1:ffbb359:    * Default value of Property for enabling system level compaction lock.1 compaction can run
1:ffbb359:    * at once.
1:cd6a4ff:    */
1:d25fee2:   public static final String DEFAULT_ENABLE_CONCURRENT_COMPACTION = "true";
1:fe1b0f0: 
1:cd6a4ff:   /**
1:ffbb359:    * Compaction system level lock folder.
1:cd6a4ff:    */
1:d25fee2:   public static final String SYSTEM_LEVEL_COMPACTION_LOCK_FOLDER = "SystemCompactionLock";
1:fe1b0f0: 
1:cd6a4ff:   /**
1:f63b1ff:    * This batch size is used to send rows from load step to another step in batches.
1:f63b1ff:    */
1:f63b1ff:   public static final String DATA_LOAD_BATCH_SIZE = "DATA_LOAD_BATCH_SIZE";
1:f63b1ff: 
1:f63b1ff:   /**
1:f63b1ff:    * Default size of data load batch size.
1:f63b1ff:    */
1:f63b1ff:   public static final String DATA_LOAD_BATCH_SIZE_DEFAULT = "1000";
1:cd6a4ff:   /**
1:d54dc64:    * carbon data file version property
1:cd6a4ff:    */
1:d54dc64:   public static final String CARBON_DATA_FILE_VERSION = "carbon.data.file.version";
1:f63b1ff: 
1:002279e:   /**
1:9326cfd:    * Index file name will end with this extension when update.
1:cd6a4ff:    */
1:3e045d8:   public static final String UPDATE_INDEX_FILE_EXT = ".carbonindex";
1:5ab0957: 
1:cd6a4ff:   /**
1:3e045d8:    * Key word for true
1:cd6a4ff:    */
1:3e045d8:   public static final String KEYWORD_TRUE = "TRUE";
1:349be00: 
1:cd6a4ff:   /**
1:3e045d8:    * Key word for false
1:cd6a4ff:    */
1:3e045d8:   public static final String KEYWORD_FALSE = "FALSE";
1:349be00: 
1:cd6a4ff:   /**
1:3e045d8:    * hyphen
1:cd6a4ff:    */
1:3e045d8:   public static final String HYPHEN = "-";
1:27ec651: 
1:cd6a4ff:   /**
1:3e045d8:    * columns which gets updated in update will have header ends with this extension.
1:cd6a4ff:    */
1:d25fee2:   public static final String UPDATED_COL_EXTENSION = "-updatedColumn";
1:49763b7: 
1:cd6a4ff:   /**
1:3e045d8:    * appending the key to differentiate the update flow with insert flow.
1:cd6a4ff:    */
1:d25fee2:   public static final String RDDUTIL_UPDATE_KEY = "UPDATE_";
1:e4f2843: 
1:cd6a4ff:   /**
1:3e045d8:    * to determine to use the rdd persist or not.
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:181f0ac:   @InterfaceStability.Evolving
1:d25fee2:   public static final String isPersistEnabled = "carbon.update.persist.enable";
1:ea04fce: 
1:cd6a4ff:   /**
1:3e045d8:    * for enabling or disabling Horizontal Compaction.
1:cd6a4ff:    */
1:39644b5:   @CarbonProperty
1:d25fee2:   public static final String isHorizontalCompactionEnabled = "carbon.horizontal.compaction.enable";
1:8d9babe: 
1:cd6a4ff:   /**
1:3e045d8:    * Default value for HorizontalCompaction is true.
1:cd6a4ff:    */
1:d25fee2:   public static final String defaultIsHorizontalCompactionEnabled = "true";
1:e1f217a: 
1:cd6a4ff:   /**
1:3e045d8:    * by default rdd will be persisted in the update case.
1:cd6a4ff:    */
1:d25fee2:   public static final String defaultValueIsPersistEnabled = "true";
1:e1f217a: 
1:cd6a4ff:   /**
1:0ab928e:    * Which storage level to persist dataset when updating data
1:0ab928e:    * with 'carbon.update.persist.enable'='true'
1:cd6a4ff:    */
1:0ab928e:   @CarbonProperty
1:181f0ac:   @InterfaceStability.Evolving
1:0ab928e:   public static final String CARBON_UPDATE_STORAGE_LEVEL =
1:0ab928e:       "carbon.update.storage.level";
1:0ab928e: 
1:cd6a4ff:   /**
1:0ab928e:    * The default value(MEMORY_AND_DISK) is the same as the default storage level of Dataset.
1:0ab928e:    * Unlike `RDD.cache()`, the default storage level is set to be `MEMORY_AND_DISK` because
1:0ab928e:    * recomputing the in-memory columnar representation of the underlying table is expensive.
1:0ab928e:    *
1:0ab928e:    * if user's executor has less memory, set the CARBON_UPDATE_STORAGE_LEVEL
1:0ab928e:    * to MEMORY_AND_DISK_SER or other storage level to correspond to different environment.
1:0ab928e:    * You can get more recommendations about storage level in spark website:
1:0ab928e:    * http://spark.apache.org/docs/latest/rdd-programming-guide.html#rdd-persistence.
1:cd6a4ff:    */
1:0ab928e:   public static final String CARBON_UPDATE_STORAGE_LEVEL_DEFAULT = "MEMORY_AND_DISK";
1:0ab928e: 
1:cd6a4ff:   /**
1:d54dc64:    * current data file version
1:cd6a4ff:    */
1:2cf1104:   public static final String CARBON_DATA_FILE_DEFAULT_VERSION = "V3";
1:2cf1104: 
1:cd6a4ff:   /**
1:d54dc64:    * data file version header
1:cd6a4ff:    */
1:d54dc64:   public static final String CARBON_DATA_VERSION_HEADER = "CARBONDATAVERSION#";
1:cd6a4ff:   /**
1:5f1abef:    * Maximum no of column supported
1:cd6a4ff:    */
1:d25fee2:   public static final int DEFAULT_MAX_NUMBER_OF_COLUMNS = 20000;
1:ab76347: 
1:ab76347: 
1:cd6a4ff:   /**
1:be600bc:    * to enable unsafe column page
1:cd6a4ff:    */
1:be600bc:   public static final String ENABLE_UNSAFE_COLUMN_PAGE = "enable.unsafe.columnpage";
1:ab76347: 
1:cd6a4ff:   /**
1:be600bc:    * default value of ENABLE_UNSAFE_COLUMN_PAGE
1:cd6a4ff:    */
1:be600bc:   public static final String ENABLE_UNSAFE_COLUMN_PAGE_DEFAULT = "true";
1:7250ff1: 
1:cd6a4ff:   /**
1:f1f9348:    * to enable offheap sort
1:f1f9348:    */
1:39644b5:   @CarbonProperty
1:f1f9348:   public static final String ENABLE_UNSAFE_SORT = "enable.unsafe.sort";
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * to enable offheap sort
1:f1f9348:    */
1:be600bc:   public static final String ENABLE_UNSAFE_SORT_DEFAULT = "true";
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * to enable offheap sort
1:f1f9348:    */
1:39644b5:   @CarbonProperty
1:f1f9348:   public static final String ENABLE_OFFHEAP_SORT = "enable.offheap.sort";
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * to enable offheap sort
1:f1f9348:    */
1:f1f9348:   public static final String ENABLE_OFFHEAP_SORT_DEFAULT = "true";
1:39644b5:   @CarbonProperty
1:f1f9348:   public static final String ENABLE_INMEMORY_MERGE_SORT = "enable.inmemory.merge.sort";
1:f1f9348: 
1:bfa306b:   public static final String ENABLE_INMEMORY_MERGE_SORT_DEFAULT = "false";
1:f1f9348:   public static final String OFFHEAP_SORT_CHUNK_SIZE_IN_MB = "offheap.sort.chunk.size.inmb";
1:f1f9348: 
1:f1f9348:   public static final String OFFHEAP_SORT_CHUNK_SIZE_IN_MB_DEFAULT = "64";
1:f1f9348:   public static final String IN_MEMORY_FOR_SORT_DATA_IN_MB = "sort.inmemory.size.inmb";
1:f1f9348:   public static final String IN_MEMORY_FOR_SORT_DATA_IN_MB_DEFAULT = "1024";
1:f1f9348: 
1:39644b5:   @CarbonProperty
1:df22368:   public static final String UNSAFE_WORKING_MEMORY_IN_MB = "carbon.unsafe.working.memory.in.mb";
1:df22368:   public static final String UNSAFE_WORKING_MEMORY_IN_MB_DEFAULT = "512";
1:a2928e3: 
1:a2928e3:   @CarbonProperty
1:a2928e3:   public static final String UNSAFE_DRIVER_WORKING_MEMORY_IN_MB =
1:a2928e3:       "carbon.unsafe.driver.working.memory.in.mb";
1:b13ead9:   /**
1:b13ead9:    * Sorts the data in batches and writes the batch data to store with index file.
1:b13ead9:    */
1:39644b5:   @CarbonProperty
1:3807b2f:   public static final String LOAD_SORT_SCOPE = "carbon.load.sort.scope";
1:b13ead9: 
1:b13ead9:   /**
1:3807b2f:    * If set to BATCH_SORT, the sorting scope is smaller and more index tree will be created,
1:b13ead9:    * thus loading is faster but query maybe slower.
1:3807b2f:    * If set to LOCAL_SORT, the sorting scope is bigger and one index tree per data node will be
1:3807b2f:    * created, thus loading is slower but query is faster.
1:82741c1:    * If set to GLOBAL_SORT, the sorting scope is bigger and one index tree per task will be
1:82741c1:    * created, thus loading is slower but query is faster.
1:b13ead9:    */
1:3807b2f:   public static final String LOAD_SORT_SCOPE_DEFAULT = "LOCAL_SORT";
1:b13ead9: 
1:b13ead9:   /**
1:b13ead9:    * Size of batch data to keep in memory, as a thumb rule it supposed
1:b13ead9:    * to be less than 45% of sort.inmemory.size.inmb otherwise it may spill intermediate data to disk
1:b13ead9:    */
1:39644b5:   @CarbonProperty
1:b13ead9:   public static final String LOAD_BATCH_SORT_SIZE_INMB = "carbon.load.batch.sort.size.inmb";
1:39644b5:   public static final String LOAD_BATCH_SORT_SIZE_INMB_DEFAULT = "0";
1:39644b5:   @CarbonProperty
1:cd6a4ff:   /**
1:82741c1:    * The Number of partitions to use when shuffling data for sort. If user don't configurate or
1:82741c1:    * configurate it less than 1, it uses the number of map tasks as reduce tasks. In general, we
1:82741c1:    * recommend 2-3 tasks per CPU core in your cluster.
1:cd6a4ff:    */
1:82741c1:   public static final String LOAD_GLOBAL_SORT_PARTITIONS = "carbon.load.global.sort.partitions";
1:b13ead9: 
1:82741c1:   public static final String LOAD_GLOBAL_SORT_PARTITIONS_DEFAULT = "0";
1:39644b5:   @CarbonProperty
1:376d69f:   public static final String ENABLE_VECTOR_READER = "carbon.enable.vector.reader";
1:376d69f: 
1:00e902c:   public static final String ENABLE_VECTOR_READER_DEFAULT = "true";
1:376d69f: 
1:589f126:   /*
1:05b2654:    * carbon dictionary server port
1:05b2654:    */
1:39644b5:   @CarbonProperty
1:05b2654:   public static final String DICTIONARY_SERVER_PORT = "carbon.dictionary.server.port";
1:05b2654: 
1:05b2654:   /**
1:05b2654:    * Default carbon dictionary server port
1:05b2654:    */
1:05b2654:   public static final String DICTIONARY_SERVER_PORT_DEFAULT = "2030";
1:05b2654: 
1:cd6a4ff:   /**
1:b6ab4ef:    * property to set is IS_DRIVER_INSTANCE
1:181f0ac:    */
1:39644b5:   @CarbonProperty
1:b6ab4ef:   public static final String IS_DRIVER_INSTANCE = "is.driver.instance";
1:f1f9348: 
1:cd6a4ff:   /**
1:8d9babe:    * property for enabling unsafe based query processing
1:181f0ac:    */
1:39644b5:   @CarbonProperty
1:8d9babe:   public static final String ENABLE_UNSAFE_IN_QUERY_EXECUTION = "enable.unsafe.in.query.processing";
1:f1f9348: 
1:cd6a4ff:   /**
1:8d9babe:    * default property of unsafe processing
1:0ab928e:    */
1:be600bc:   public static final String ENABLE_UNSAFE_IN_QUERY_EXECUTION_DEFAULTVALUE = "true";
1:f1f9348: 
1:cd6a4ff:   /**
1:8100d94:    * whether to prefetch data while loading.
1:8100d94:    */
1:39644b5:   @CarbonProperty
1:8100d94:   public static final String USE_PREFETCH_WHILE_LOADING = "carbon.loading.prefetch";
1:8100d94: 
1:8100d94:   /**
1:8100d94:    * default value for prefetch data while loading.
1:8100d94:    */
1:8100d94:   public static final String USE_PREFETCH_WHILE_LOADING_DEFAULT = "false";
1:8100d94: 
1:9f99dfb:   public static final String MINOR = "minor";
1:8d9babe: 
1:9f99dfb:   public static final String MAJOR = "major";
1:9587515: 
1:39644b5:   @CarbonProperty
1:fc3b616:   public static final String CARBON_CUSTOM_BLOCK_DISTRIBUTION = "carbon.custom.block.distribution";
1:8d9babe: 
1:70256e7:   public static final int DICTIONARY_DEFAULT_CARDINALITY = 1;
1:39644b5:   @CarbonProperty
1:35739e5:   public static final String SPARK_SCHEMA_STRING_LENGTH_THRESHOLD =
1:35739e5:       "spark.sql.sources.schemaStringLengthThreshold";
1:70256e7: 
1:35739e5:   public static final int SPARK_SCHEMA_STRING_LENGTH_THRESHOLD_DEFAULT = 4000;
1:6ae1f1b: 
1:39644b5:   @CarbonProperty
1:3251c89:   public static final String CARBON_BAD_RECORDS_ACTION = "carbon.bad.records.action";
1:3251c89: 
1:6ae1f1b:   /**
1:6ae1f1b:    * FAIL action will fail the load in case of bad records in loading data
1:6ae1f1b:    */
1:6ae1f1b:   public static final String CARBON_BAD_RECORDS_ACTION_DEFAULT = "FAIL";
1:3251c89: 
1:9a8fac3:   public static final String ENABLE_HIVE_SCHEMA_META_STORE = "spark.carbon.hive.schema.store";
1:9a8fac3: 
1:9a8fac3:   public static final String ENABLE_HIVE_SCHEMA_META_STORE_DEFAULT = "false";
1:9a8fac3: 
1:181f0ac:   /**
1:aadbd5c:    * There is more often that in production uses different drivers for load and queries. So in case
1:aadbd5c:    * of load driver user should set this property to enable loader specific clean up.
1:0ab928e:    */
1:aadbd5c:   public static final String DATA_MANAGEMENT_DRIVER = "spark.carbon.datamanagement.driver";
1:8d9babe: 
1:6a185b8:   public static final String DATA_MANAGEMENT_DRIVER_DEFAULT = "true";
1:8d9babe: 
1:7250ff1:   public static final String CARBON_SESSIONSTATE_CLASSNAME = "spark.carbon.sessionstate.classname";
1:f5cdd5c: 
1:181f0ac:   /**
1:0c200d8:    * This property will be used to configure the sqlastbuilder class.
1:b338459:    */
1:0c200d8:   public static final String CARBON_SQLASTBUILDER_CLASSNAME =
1:0c200d8:       "spark.carbon.sqlastbuilder.classname";
1:0c200d8: 
1:39644b5:   @CarbonProperty
1:285ce72:   public static final String CARBON_LEASE_RECOVERY_RETRY_COUNT =
1:285ce72:       "carbon.lease.recovery.retry.count";
1:285ce72:   @CarbonProperty
1:285ce72:   public static final String CARBON_LEASE_RECOVERY_RETRY_INTERVAL =
1:285ce72:       "carbon.lease.recovery.retry.interval";
1:285ce72: 
1:39644b5:   @CarbonProperty
1:4daf063:   public static final String CARBON_SECURE_DICTIONARY_SERVER =
1:4daf063:       "carbon.secure.dictionary.server";
1:694ee77: 
1:4daf063:   public static final String CARBON_SECURE_DICTIONARY_SERVER_DEFAULT = "true";
1:0f407de: 
1:ded8b41:   /**
1:ded8b41:    * whether to use multi directories when loading data,
1:ded8b41:    * the main purpose is to avoid single-disk-hot-spot
1:ded8b41:    */
1:ded8b41:   @CarbonProperty
1:ded8b41:   public static final String CARBON_USE_MULTI_TEMP_DIR = "carbon.use.multiple.temp.dir";
1:ded8b41: 
1:ded8b41:   /**
1:ded8b41:    * default value for multi temp dir
1:ded8b41:    */
1:ded8b41:   public static final String CARBON_USE_MULTI_TEMP_DIR_DEFAULT = "false";
1:ded8b41: 
1:0ab928e:   /**
1:c100251:    * name of compressor to compress sort temp files
1:c100251:    */
1:c100251:   @CarbonProperty
1:c100251:   public static final String CARBON_SORT_TEMP_COMPRESSOR = "carbon.sort.temp.compressor";
1:c100251: 
1:c100251:   /**
1:ece0672:    * The optional values are 'SNAPPY','GZIP','BZIP2','LZ4','ZSTD'.
1:c100251:    * By default, empty means that Carbondata will not compress the sort temp files.
1:c100251:    */
1:c100251:   public static final String CARBON_SORT_TEMP_COMPRESSOR_DEFAULT = "";
1:c100251:   /**
1:0be69cd:    * Which storage level to persist rdd when sort_scope=global_sort
1:0be69cd:    */
1:0be69cd:   @CarbonProperty
1:181f0ac:   @InterfaceStability.Evolving
1:0be69cd:   public static final String CARBON_GLOBAL_SORT_RDD_STORAGE_LEVEL =
1:0be69cd:       "carbon.global.sort.rdd.storage.level";
1:0be69cd: 
1:0ab928e:   /**
1:0be69cd:    * The default value(MEMORY_ONLY) is designed for executors with big memory, if user's executor
1:0be69cd:    * has less memory, set the CARBON_GLOBAL_SORT_RDD_STORAGE_LEVEL to MEMORY_AND_DISK_SER or
1:0be69cd:    * other storage level to correspond to different environment.
1:0be69cd:    * You can get more recommendations about storage level in spark website:
1:0be69cd:    * http://spark.apache.org/docs/latest/rdd-programming-guide.html#rdd-persistence.
1:0be69cd:    */
1:0be69cd:   public static final String CARBON_GLOBAL_SORT_RDD_STORAGE_LEVEL_DEFAULT = "MEMORY_ONLY";
1:0be69cd: 
1:2ee7775:   /**
1:2ee7775:    * property for configuring parallelism per segment when doing an update. Increase this
1:2ee7775:    * value will avoid data screw problem for a large segment.
1:2ee7775:    * Refer to CARBONDATA-1373 for more details.
1:2ee7775:    */
1:2ee7775:   @CarbonProperty
1:2ee7775:   public static final String CARBON_UPDATE_SEGMENT_PARALLELISM =
1:2ee7775:       "carbon.update.segment.parallelism";
1:2ee7775: 
1:2ee7775:   /**
1:2ee7775:    * In default we will not optimize the update
1:2ee7775:    */
1:2ee7775:   public static final String CARBON_UPDATE_SEGMENT_PARALLELISM_DEFAULT = "1";
1:2ee7775: 
1:1e21cd1:   public static final String USE_DISTRIBUTED_DATAMAP = "carbon.enable.distributed.datamap";
1:0f407de: 
1:1e21cd1:   public static final String USE_DISTRIBUTED_DATAMAP_DEFAULT = "false";
1:0f407de: 
1:b4dc866:   /**
1:b4dc866:    * This property defines how the tasks are splitted/combined and launch spark tasks during query
1:b4dc866:    */
1:b4dc866:   @CarbonProperty
1:b4dc866:   public static final String CARBON_TASK_DISTRIBUTION = "carbon.task.distribution";
1:40c31e8: 
1:b4dc866:   /**
1:b4dc866:    * It combines the available blocks as per the maximum available tasks in the cluster.
1:b4dc866:    */
1:b4dc866:   public static final String CARBON_TASK_DISTRIBUTION_CUSTOM = "custom";
1:b4dc866: 
1:b4dc866:   /**
1:b4dc866:    * It creates the splits as per the number of blocks/carbondata files available for query.
1:b4dc866:    */
1:b4dc866:   public static final String CARBON_TASK_DISTRIBUTION_BLOCK = "block";
1:b4dc866: 
1:b4dc866:   /**
1:b4dc866:    * It creates the splits as per the number of blocklets available for query.
1:b4dc866:    */
1:b4dc866:   public static final String CARBON_TASK_DISTRIBUTION_BLOCKLET = "blocklet";
1:b4dc866: 
1:b4dc866:   /**
1:b4dc866:    * It merges all the small files and create tasks as per the configurable partition size.
1:b4dc866:    */
1:b4dc866:   public static final String CARBON_TASK_DISTRIBUTION_MERGE_FILES = "merge_small_files";
1:b4dc866: 
1:b4dc866:   /**
1:b4dc866:    * Default task distribution.
1:b4dc866:    */
1:b4dc866:   public static final String CARBON_TASK_DISTRIBUTION_DEFAULT = CARBON_TASK_DISTRIBUTION_BLOCK;
1:b4dc866: 
1:b4dc866: 
1:0be69cd:   /**
1:1155d4d:    * The property to configure the mdt file folder path, earlier it was pointing to the
1:1155d4d:    * fixed carbon store path. This is needed in case of the federation setup when user removes
1:1155d4d:    * the fixedtorepath namesevice
1:0c200d8:    */
1:1155d4d:   @CarbonProperty
1:1155d4d:   public static final String CARBON_UPDATE_SYNC_FOLDER = "carbon.update.sync.folder";
1:1155d4d: 
1:1155d4d:   public static final String CARBON_UPDATE_SYNC_FOLDER_DEFAULT = "/tmp/carbondata";
1:d7393da: 
1:0be69cd:   /**
1:75e0bd4:    * this will be used to pass bitset value in filter to another filter for
1:75e0bd4:    * faster execution of filter query
1:473bd31:    */
1:75e0bd4:   public static final String BITSET_PIPE_LINE = "carbon.use.bitset.pipe.line";
1:75e0bd4: 
1:2c09554:   /**
1:4673113:    * this will be used to provide comment for table
1:473bd31:    */
1:4673113:   public static final String TABLE_COMMENT = "comment";
1:d7393da: 
1:0c200d8:   /**
1:30457c4:    * this will be used to provide comment for table
1:30457c4:    */
1:30457c4:   public static final String COLUMN_COMMENT = "comment";
1:30457c4: 
1:75e0bd4:   public static final String BITSET_PIPE_LINE_DEFAULT = "true";
1:0586146: 
1:e26cccc:   /*
1:589f126:    * The total size of carbon data
1:589f126:    */
1:589f126:   public static final String CARBON_TOTAL_DATA_SIZE = "datasize";
1:589f126: 
1:589f126:   /**
1:589f126:    * The total size of carbon index
1:589f126:    */
1:589f126:   public static final String CARBON_TOTAL_INDEX_SIZE = "indexsize";
1:589f126: 
1:589f126:   /**
1:589f126:    * ENABLE_CALCULATE_DATA_INDEX_SIZE
1:589f126:    */
1:589f126:   @CarbonProperty public static final String ENABLE_CALCULATE_SIZE = "carbon.enable.calculate.size";
1:589f126: 
1:589f126:   /**
1:589f126:    * DEFAULT_ENABLE_CALCULATE_DATA_INDEX_SIZE
1:589f126:    */
1:67a8a37:   public static final String DEFAULT_ENABLE_CALCULATE_SIZE = "true";
1:589f126: 
1:589f126:   public static final String TABLE_DATA_SIZE = "Table Data Size";
1:589f126: 
1:589f126:   public static final String TABLE_INDEX_SIZE = "Table Index Size";
1:589f126: 
1:589f126:   public static final String LAST_UPDATE_TIME = "Last Update Time";
1:589f126: 
1:40f0608:   /**
1:40f0608:    * this will be used to skip / ignore empty lines while loading
1:40f0608:    */
1:40f0608:   @CarbonProperty public static final String CARBON_SKIP_EMPTY_LINE = "carbon.skip.empty.line";
1:40f0608: 
1:40f0608:   public static final String CARBON_SKIP_EMPTY_LINE_DEFAULT = "false";
1:0586146:   /**
1:2c09554:    * Configures the parser/writer to limit the length of displayed contents being parsed/written
1:2c09554:    * in the exception message when an error occurs.
1:2c09554:    * Here {@code 0} means no exceptions will include the content being manipulated in their
1:2c09554:    * attributes.
1:0586146:    */
1:2c09554:   public static final int CARBON_ERROR_CONTENT_LENGTH = 0;
1:40f0608: 
1:473bd31:   /**
1:0f407de:    * if the byte size of streaming segment reach this value,
1:0f407de:    * the system will create a new stream segment
1:2c09554:    */
1:67a8a37:   @CarbonProperty
1:0f407de:   public static final String HANDOFF_SIZE = "carbon.streaming.segment.max.size";
1:0586146: 
1:30457c4:   /**
1:a51ad30:    * enable auto handoff streaming segment
1:1155d4d:    */
1:67a8a37:   @CarbonProperty
1:a51ad30:   public static final String ENABLE_AUTO_HANDOFF = "carbon.streaming.auto.handoff.enabled";
1:75e0bd4: 
1:a51ad30:   public static final String ENABLE_AUTO_HANDOFF_DEFAULT = "true";
1:a51ad30: 
1:1155d4d:   /**
1:0f407de:    * the min handoff size of streaming segment, the unit is byte
1:1a35cfb:    */
1:0f407de:   public static final long HANDOFF_SIZE_MIN = 1024L * 1024 * 64;
1:a51ad30: 
1:1a35cfb:   /**
1:0f407de:    * the default handoff size of streaming segment, the unit is byte
2:1a35cfb:    */
1:0f407de:   public static final long HANDOFF_SIZE_DEFAULT = 1024L * 1024 * 1024;
1:49763b7: 
1:473bd31:   /**
1:473bd31:    * minimum required registered resource for starting block distribution
1:473bd31:    */
1:473bd31:   @CarbonProperty
1:473bd31:   public static final String CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO =
1:473bd31:       "carbon.scheduler.minregisteredresourcesratio";
1:473bd31:   /**
1:473bd31:    * default minimum required registered resource for starting block distribution
1:473bd31:    */
1:473bd31:   public static final String CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO_DEFAULT = "0.8d";
1:473bd31:   /**
1:473bd31:    * minimum required registered resource for starting block distribution
1:473bd31:    */
1:473bd31:   public static final double CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO_MIN = 0.1d;
1:473bd31:   /**
1:473bd31:    * max minimum required registered resource for starting block distribution
1:473bd31:    */
1:473bd31:   public static final double CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO_MAX = 1.0d;
1:473bd31: 
1:473bd31:   /**
1:473bd31:    * To define how much time scheduler should wait for the
1:473bd31:    * resource in dynamic allocation.
1:473bd31:    */
1:473bd31:   public static final String CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT =
1:473bd31:       "carbon.dynamicallocation.schedulertimeout";
1:473bd31: 
1:473bd31:   /**
1:473bd31:    * default scheduler wait time
1:473bd31:    */
1:473bd31:   public static final String CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT_DEFAULT = "5";
1:473bd31: 
1:473bd31:   /**
1:ff7793b:    * default value for executor start up waiting time out
1:ff7793b:    */
1:473bd31:   public static final int CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT_MIN = 5;
1:ff7793b: 
1:ff7793b:   /**
1:ff7793b:    * Max value. If value configured by user is more than this than this value will value will be
1:ff7793b:    * considered
1:ff7793b:    */
1:473bd31:   public static final int CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT_MAX = 15;
1:ff7793b: 
1:ff7793b:   /**
1:ff7793b:    * time for which thread will sleep and check again if the requested number of executors
1:ff7793b:    * have been started
1:ff7793b:    */
1:473bd31:   public static final int CARBON_DYNAMIC_ALLOCATION_SCHEDULER_THREAD_SLEEP_TIME = 250;
1:ff7793b: 
1:473bd31:   /**
1:7f3c374:    * It allows queries on hive metastore directly along with filter information, otherwise first
1:7f3c374:    * fetches all partitions from hive and apply filters on it.
1:7f3c374:    */
1:7f3c374:   public static final String CARBON_READ_PARTITION_HIVE_DIRECT =
1:7f3c374:       "carbon.read.partition.hive.direct";
1:7f3c374:   public static final String CARBON_READ_PARTITION_HIVE_DIRECT_DEFAULT = "true";
1:7f3c374: 
1:943588d:   // As Short data type is used for storing the length of a column during data processing hence
1:943588d:   // the maximum characters that can be supported should be less than Short max value
1:943588d:   public static final int MAX_CHARS_PER_COLUMN_DEFAULT = 32000;
1:dc53dee:   // todo: use infinity first, will switch later
1:dc53dee:   public static final int MAX_CHARS_PER_COLUMN_INFINITY = -1;
1:943588d: 
1:d509f17:   /**
1:d509f17:    * Enabling page level reader for compaction reduces the memory usage while compacting more
1:d509f17:    * number of segments. It allows reading only page by page instead of reaing whole blocklet to
1:d509f17:    * memory.
1:d509f17:    */
1:d509f17:   @CarbonProperty
1:26607fb:   @InterfaceStability.Evolving
1:d509f17:   public static final String CARBON_ENABLE_PAGE_LEVEL_READER_IN_COMPACTION =
1:d509f17:       "carbon.enable.page.level.reader.in.compaction";
1:d509f17: 
1:26607fb:   // Note: If this property is set to true it can impact compaction performance as IO will increase
1:26607fb:   public static final String CARBON_ENABLE_PAGE_LEVEL_READER_IN_COMPACTION_DEFAULT = "false";
1:d509f17: 
1:39644b5:   @CarbonProperty
1:27ec651:   public static final String IN_MEMORY_STORAGE_FOR_SORTED_DATA_IN_MB =
1:27ec651:       "carbon.sort.storage.inmemory.size.inmb";
1:27ec651:   public static final String IN_MEMORY_STORAGE_FOR_SORTED_DATA_IN_MB_DEFAULT = "512";
1:473bd31: 
1:39644b5:   @CarbonProperty
1:349be00:   public static final String SUPPORT_DIRECT_QUERY_ON_DATAMAP =
1:349be00:       "carbon.query.directQueryOnDataMap.enabled";
1:349be00:   public static final String SUPPORT_DIRECT_QUERY_ON_DATAMAP_DEFAULTVALUE = "false";
1:473bd31: 
1:39644b5:   @CarbonProperty
1:349be00:   public static final String VALIDATE_DIRECT_QUERY_ON_DATAMAP =
1:349be00:       "carbon.query.validate.directqueryondatamap";
1:349be00:   public static final String VALIDATE_DIRECT_QUERY_ON_DATAMAP_DEFAULTVALUE = "true";
1:473bd31: 
1:d0858b7:   /**
1:d0858b7:    * If the heap memory allocations of the given size is greater or equal than this value,
1:d0858b7:    * it should go through the pooling mechanism.
1:d0858b7:    * But if set this size to -1, it should not go through the pooling mechanism.
1:d0858b7:    * Default value is 1048576(1MB, the same as Spark).
1:d0858b7:    * Unit: byte.
1:d0858b7:    */
1:d0858b7:   @CarbonProperty
1:d0858b7:   public static final String CARBON_HEAP_MEMORY_POOLING_THRESHOLD_BYTES =
1:d0858b7:       "carbon.heap.memory.pooling.threshold.bytes";
1:d0858b7:   public static final String CARBON_HEAP_MEMORY_POOLING_THRESHOLD_BYTES_DEFAULT = "1048576";
1:d0858b7: 
1:ac30e3e:   @CarbonProperty
1:ac30e3e:   public static final String CARBON_SHOW_DATAMAPS = "carbon.query.show.datamaps";
1:ac30e3e: 
1:ac30e3e:   public static final String CARBON_SHOW_DATAMAPS_DEFAULT = "true";
1:ac30e3e: 
1:0609fc5:   /**
1:0609fc5:    * Currently the segment lock files are not deleted immediately when unlock,
1:0609fc5:    * this value indicates the number of hours the segment lock files will be preserved.
1:0609fc5:    */
1:0609fc5:   @CarbonProperty
1:0609fc5:   public static final String CARBON_SEGMENT_LOCK_FILES_PRESERVE_HOURS =
1:0609fc5:       "carbon.segment.lock.files.preserve.hours";
1:0609fc5: 
1:0609fc5:   // default value is 2 days
1:0609fc5:   public static final String CARBON_SEGMENT_LOCK_FILES_PRESERVE_HOURS_DEFAULT = "48";
1:0609fc5: 
1:72f50b5:   /**
1:72f50b5:    * The number of invisible segment info which will be preserved in tablestatus file,
1:72f50b5:    * if it exceeds this value, they will be removed and write to tablestatus.history file.
1:72f50b5:    */
1:72f50b5:   @CarbonProperty
1:72f50b5:   public static final String CARBON_INVISIBLE_SEGMENTS_PRESERVE_COUNT =
1:72f50b5:       "carbon.invisible.segments.preserve.count";
1:72f50b5: 
1:72f50b5:   /**
1:72f50b5:    * default value is 200, it means that it will preserve 200 invisible segment info
1:72f50b5:    * in tablestatus file.
1:72f50b5:    * The size of one segment info is about 500 bytes, so the size of tablestatus file
1:72f50b5:    * will remain at 100KB.
1:72f50b5:    */
1:72f50b5:   public static final String CARBON_INVISIBLE_SEGMENTS_PRESERVE_COUNT_DEFAULT = "200";
1:72f50b5: 
1:05086e5:   /**
1:05086e5:    * System older location to store system level data like datamap schema and status files.
1:05086e5:    */
1:05086e5:   public static final String CARBON_SYSTEM_FOLDER_LOCATION = "carbon.system.folder.location";
1:638ed1f: 
1:3ff574d:   /**
1:3ff574d:    * If set to true, will use CarbonReader to do distributed scan directly instead of using
1:3ff574d:    * compute framework like spark, thus avoiding limitation of compute framework like SQL
1:3ff574d:    * optimizer and task scheduling overhead.
1:3ff574d:    */
1:638ed1f:   @CarbonProperty
1:3ff574d:   @InterfaceStability.Unstable
1:3ff574d:   public static final String CARBON_SEARCH_MODE_ENABLE = "carbon.search.enabled";
1:05086e5: 
1:638ed1f:   public static final String CARBON_SEARCH_MODE_ENABLE_DEFAULT = "false";
1:638ed1f: 
1:638ed1f:   /**
1:b338459:    * It's timeout threshold of carbon search query
1:638ed1f:    */
1:638ed1f:   @CarbonProperty
1:3ff574d:   @InterfaceStability.Unstable
1:b338459:   public static final String CARBON_SEARCH_QUERY_TIMEOUT = "carbon.search.query.timeout";
1:638ed1f: 
1:b338459:   /**
1:b338459:    * Default value is 10 seconds
1:b338459:    */
1:b338459:   public static final String CARBON_SEARCH_QUERY_TIMEOUT_DEFAULT = "10s";
1:638ed1f: 
1:b338459:   /**
1:2f85381:    * The size of thread pool used for reading files in Work for search mode. By default,
1:2f85381:    * it is number of cores in Worker
1:473bd31:    */
2:39644b5:   @CarbonProperty
1:b338459:   @InterfaceStability.Unstable
1:3ff574d:   public static final String CARBON_SEARCH_MODE_SCAN_THREAD = "carbon.search.scan.thread";
1:b338459: 
1:3ff574d:   /**
1:d113933:    * In search mode, Master will listen on this port for worker registration.
1:d113933:    * If Master failed to start service with this port, it will try to increment the port number
1:d113933:    * and try to bind again, until it is success
1:3ff574d:    */
1:2f85381:   @CarbonProperty
1:2f85381:   @InterfaceStability.Unstable
1:3ff574d:   public static final String CARBON_SEARCH_MODE_MASTER_PORT = "carbon.search.master.port";
1:3ff574d: 
1:3ff574d:   public static final String CARBON_SEARCH_MODE_MASTER_PORT_DEFAULT = "10020";
1:3ff574d: 
1:3ff574d:   /**
1:3ff574d:    * In search mode, Worker will listen on this port for master request like searching.
1:3ff574d:    * If Worker failed to start service with this port, it will try to increment the port number
1:3ff574d:    * and try to bind again, until it is success
1:3ff574d:    */
1:3ff574d:   @CarbonProperty
1:3ff574d:   @InterfaceStability.Unstable
1:3ff574d:   public static final String CARBON_SEARCH_MODE_WORKER_PORT = "carbon.search.worker.port";
1:3ff574d: 
1:3ff574d:   public static final String CARBON_SEARCH_MODE_WORKER_PORT_DEFAULT = "10021";
1:3ff574d: 
1:2f85381:   /**
1:2f85381:    * If number of search request sent to Worker exceed this limit, Master will reschedule
1:2f85381:    * the request to another worker. In such case, locality will be lost in HDFS scenario, but
1:2f85381:    * it is fine for S3 scenario.
1:2f85381:    *
1:2f85381:    * If user does not set this value, by default it is 10 * number of cores in Worker
1:2f85381:    */
1:2f85381:   @CarbonProperty
1:2f85381:   @InterfaceStability.Unstable
1:2f85381:   public static final String CARBON_SEARCH_MODE_WORKER_WORKLOAD_LIMIT =
1:2f85381:       "carbon.search.worker.workload.limit";
1:3ff574d: 
1:cd6a4ff:   /*
1:e26cccc:    * whether to enable prefetch for rowbatch to enhance row reconstruction during compaction
1:e26cccc:    */
1:e26cccc:   @CarbonProperty
1:e26cccc:   public static final String CARBON_COMPACTION_PREFETCH_ENABLE =
1:e26cccc:       "carbon.compaction.prefetch.enable";
1:e26cccc:   public static final String CARBON_COMPACTION_PREFETCH_ENABLE_DEFAULT = "false";
1:e26cccc: 
1:860e144:   /**
1:860e144:    * compression mode used by lucene for index writing, this conf will be passed to lucene writer
1:860e144:    * while writing index files.
1:860e144:    */
1:860e144:   public static final String CARBON_LUCENE_COMPRESSION_MODE = "carbon.lucene.compression.mode";
1:860e144: 
1:860e144:   /**
1:860e144:    * default lucene index compression mode, in this mode writing speed will be less and speed is
1:860e144:    * given priority, another mode is compression mode, where the index size is given importance to
1:860e144:    * make it less and not the index writing speed.
1:860e144:    */
1:860e144:   public static final String CARBON_LUCENE_COMPRESSION_MODE_DEFAULT = "speed";
1:860e144: 
1:9db662a:   /**
1:9db662a:    * DMPROPERTY for Index DataMap, like lucene, bloomfilter DataMap,
1:9db662a:    * to indicate a list of column name to be indexed
1:9db662a:    */
1:9db662a:   public static final String INDEX_COLUMNS = "INDEX_COLUMNS";
1:9db662a: 
1:531ecdf:   // Property to enable parallel datamap loading for a table
1:531ecdf:   public static final String CARBON_LOAD_DATAMAPS_PARALLEL = "carbon.load.datamaps.parallel.";
1:531ecdf: 
1:d14c403:   /**
1:d14c403:    * default value in size for cache size of bloom filter datamap.
1:d14c403:    */
1:d14c403:   public static final String CARBON_QUERY_DATAMAP_BLOOM_CACHE_SIZE_DEFAULT_VAL = "512";
1:d14c403: 
1:07a77fa:   // by default lucene will not store or create index for stop words like "is","the", if this
1:07a77fa:   // property is set to true lucene will index for stop words also and gives result for the filter
1:07a77fa:   // with stop words(example: TEXT_MATCH('description':'the'))
1:07a77fa:   public static final String CARBON_LUCENE_INDEX_STOP_WORDS = "carbon.lucene.index.stop.words";
1:07a77fa: 
1:07a77fa:   public static final String CARBON_LUCENE_INDEX_STOP_WORDS_DEFAULT = "false";
1:07a77fa: 
1:685087e:   /**
1:685087e:    * The node loads the smallest amount of data
1:685087e:    */
1:685087e:   @CarbonProperty
1:685087e:   public static final String CARBON_LOAD_MIN_SIZE_INMB = "load_min_size_inmb";
1:685087e:   public static final String CARBON_LOAD_MIN_NODE_SIZE_INMB_DEFAULT = "256";
1:685087e: 
1:685087e:   /**
1:685087e:    *  the node minimum load data default value
1:685087e:    */
1:685087e:   public static final int CARBON_LOAD_MIN_SIZE_DEFAULT = 256;
1:a0350e1:   /**
1:a0350e1:    * property to be specified for caching min/max of required columns
1:a0350e1:    */
1:a0350e1:   public static final String COLUMN_META_CACHE = "column_meta_cache";
1:a0350e1:   /**
1:a0350e1:    * property to be specified for caching level (Block/Blocket)
1:a0350e1:    */
1:a0350e1:   public static final String CACHE_LEVEL = "cache_level";
1:a0350e1:   /**
1:a0350e1:    * default value for cache level
1:a0350e1:    */
1:a0350e1:   public static final String CACHE_LEVEL_DEFAULT_VALUE = "BLOCK";
1:685087e: 
1:7341907:   /**
1:7341907:    * It is internal configuration and used only for test purpose.
1:7341907:    * It will merge the carbon index files with in the segment to single segment.
1:7341907:    */
1:7341907:   @CarbonProperty
1:7341907:   public static final String CARBON_MERGE_INDEX_IN_SEGMENT =
1:7341907:       "carbon.merge.index.in.segment";
1:7341907: 
1:7341907:   public static final String CARBON_MERGE_INDEX_IN_SEGMENT_DEFAULT = "true";
1:7341907: 
1:43285bb:   public static final short LOCAL_DICT_ENCODED_BYTEARRAY_SIZE = 3;
1:43285bb: 
1:cd6a4ff:   private CarbonCommonConstants() {
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:akashrn5
-------------------------------------------------------------------------------
commit:2ccdbb7
/////////////////////////////////////////////////////////////////////////
1:    * System property to enable or disable decoder based local dictionary fallback
1:    */
1:   public static final String LOCAL_DICTIONARY_DECODER_BASED_FALLBACK =
1:       "carbon.local.dictionary.decoder.fallback";
1: 
1:   /**
1:    * System property to enable or disable decoder based local dictionary fallback default value
1:    */
1:   public static final String LOCAL_DICTIONARY_DECODER_BASED_FALLBACK_DEFAULT = "true";
1:   /**
commit:7843845
/////////////////////////////////////////////////////////////////////////
1:    * System property to enable or disable local dictionary generation
1:    */
1:   public static final String LOCAL_DICTIONARY_SYSTEM_ENABLE = "carbon.local.dictionary.enable";
1: 
1:   /**
commit:34ca021
/////////////////////////////////////////////////////////////////////////
1:   public static final String LOCAL_DICTIONARY_ENABLE_DEFAULT = "false";
commit:b0d24ea
/////////////////////////////////////////////////////////////////////////
1:   public static final String LOCAL_DICTIONARY_THRESHOLD_DEFAULT = "10000";
commit:be20fef
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Table property to enable or disable local dictionary generation
1:    */
1:   public static final String LOCAL_DICTIONARY_ENABLE = "local_dictionary_enable";
1: 
1:   /**
1:    * default value for local dictionary generation
1:    */
0:   public static final String LOCAL_DICTIONARY_ENABLE_DEFAULT = "true";
1: 
1:   /**
1:    * Threshold value for local dictionary
1:    */
1:   public static final String LOCAL_DICTIONARY_THRESHOLD = "local_dictionary_threshold";
1: 
1:   /**
1:    * default value for local dictionary
1:    */
0:   public static final String LOCAL_DICTIONARY_THRESHOLD_DEFAULT = "1000";
1: 
1:   /**
1:    * Table property to specify the columns for which local dictionary needs to be generated.
1:    */
1:   public static final String LOCAL_DICTIONARY_INCLUDE = "local_dictionary_include";
1: 
1:   /**
1:    * Table property to specify the columns for which local dictionary should not be to be generated.
1:    */
1:   public static final String LOCAL_DICTIONARY_EXCLUDE = "local_dictionary_exclude";
1: 
commit:07a77fa
/////////////////////////////////////////////////////////////////////////
1:   // by default lucene will not store or create index for stop words like "is","the", if this
1:   // property is set to true lucene will index for stop words also and gives result for the filter
1:   // with stop words(example: TEXT_MATCH('description':'the'))
1:   public static final String CARBON_LUCENE_INDEX_STOP_WORDS = "carbon.lucene.index.stop.words";
1: 
1:   public static final String CARBON_LUCENE_INDEX_STOP_WORDS_DEFAULT = "false";
1: 
commit:860e144
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * compression mode used by lucene for index writing, this conf will be passed to lucene writer
1:    * while writing index files.
1:    */
1:   public static final String CARBON_LUCENE_COMPRESSION_MODE = "carbon.lucene.compression.mode";
1: 
1:   /**
1:    * default lucene index compression mode, in this mode writing speed will be less and speed is
1:    * given priority, another mode is compression mode, where the index size is given importance to
1:    * make it less and not the index writing speed.
1:    */
1:   public static final String CARBON_LUCENE_COMPRESSION_MODE_DEFAULT = "speed";
1: 
commit:ac30e3e
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   public static final String CARBON_SHOW_DATAMAPS = "carbon.query.show.datamaps";
1: 
1:   public static final String CARBON_SHOW_DATAMAPS_DEFAULT = "true";
1: 
commit:6a185b8
/////////////////////////////////////////////////////////////////////////
1:   public static final String DATA_MANAGEMENT_DRIVER_DEFAULT = "true";
commit:589f126
/////////////////////////////////////////////////////////////////////////
1:   /*
1:    * The total size of carbon data
1:    */
1:   public static final String CARBON_TOTAL_DATA_SIZE = "datasize";
1: 
1:   /**
1:    * The total size of carbon index
1:    */
1:   public static final String CARBON_TOTAL_INDEX_SIZE = "indexsize";
1: 
1:   /**
1:    * ENABLE_CALCULATE_DATA_INDEX_SIZE
1:    */
1:   @CarbonProperty public static final String ENABLE_CALCULATE_SIZE = "carbon.enable.calculate.size";
1: 
1:   /**
1:    * DEFAULT_ENABLE_CALCULATE_DATA_INDEX_SIZE
1:    */
0:   @CarbonProperty public static final String DEFAULT_ENABLE_CALCULATE_SIZE = "true";
1: 
1:   public static final String TABLE_DATA_SIZE = "Table Data Size";
1: 
1:   public static final String TABLE_INDEX_SIZE = "Table Index Size";
1: 
1:   public static final String LAST_UPDATE_TIME = "Last Update Time";
1: 
author:Raghunandan S
-------------------------------------------------------------------------------
commit:67a8a37
/////////////////////////////////////////////////////////////////////////
1:   @Deprecated
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public static final String DEFAULT_ENABLE_CALCULATE_SIZE = "true";
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:   public static final String ALTER_PARTITION_KEY_WORD = "ALTER_PARTITION";
author:Jacky Li
-------------------------------------------------------------------------------
commit:526e3bf
/////////////////////////////////////////////////////////////////////////
1:   // table blocklet size in MB
1:   public static final String TABLE_BLOCKLET_SIZE = "table_blocklet_size";
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * DMPROPERTY for Index DataMap, like lucene, bloomfilter DataMap,
1:    * to indicate a list of column name to be indexed
1:    */
1:   public static final String INDEX_COLUMNS = "INDEX_COLUMNS";
1: 
commit:d113933
/////////////////////////////////////////////////////////////////////////
1:    * In search mode, Master will listen on this port for worker registration.
1:    * If Master failed to start service with this port, it will try to increment the port number
1:    * and try to bind again, until it is success
commit:2f85381
/////////////////////////////////////////////////////////////////////////
1:    * The size of thread pool used for reading files in Work for search mode. By default,
1:    * it is number of cores in Worker
1:   @CarbonProperty
1:   @InterfaceStability.Unstable
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * If number of search request sent to Worker exceed this limit, Master will reschedule
1:    * the request to another worker. In such case, locality will be lost in HDFS scenario, but
1:    * it is fine for S3 scenario.
1:    *
1:    * If user does not set this value, by default it is 10 * number of cores in Worker
1:    */
1:   @CarbonProperty
1:   @InterfaceStability.Unstable
1:   public static final String CARBON_SEARCH_MODE_WORKER_WORKLOAD_LIMIT =
1:       "carbon.search.worker.workload.limit";
commit:3ff574d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.annotations.InterfaceStability;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * If set to true, will use CarbonReader to do distributed scan directly instead of using
1:    * compute framework like spark, thus avoiding limitation of compute framework like SQL
1:    * optimizer and task scheduling overhead.
1:    */
1:   @InterfaceStability.Unstable
1:   public static final String CARBON_SEARCH_MODE_ENABLE = "carbon.search.enabled";
/////////////////////////////////////////////////////////////////////////
1:   @InterfaceStability.Unstable
1:   public static final String CARBON_SEARCH_MODE_SCAN_THREAD = "carbon.search.scan.thread";
1:   /**
0:    * In search mode, Master will listen on this port for worker registration
1:    */
1:   public static final String CARBON_SEARCH_MODE_MASTER_PORT = "carbon.search.master.port";
1: 
1:   public static final String CARBON_SEARCH_MODE_MASTER_PORT_DEFAULT = "10020";
1: 
1:   /**
1:    * In search mode, Worker will listen on this port for master request like searching.
1:    * If Worker failed to start service with this port, it will try to increment the port number
1:    * and try to bind again, until it is success
1:    */
1:   @CarbonProperty
1:   @InterfaceStability.Unstable
1:   public static final String CARBON_SEARCH_MODE_WORKER_PORT = "carbon.search.worker.port";
1: 
1:   public static final String CARBON_SEARCH_MODE_WORKER_PORT_DEFAULT = "10021";
1: 
1: 
commit:733bb51
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:   public static final String LOCAL_FILE_PREFIX = "file://";
1: 
1: 
1:   public static final String S3_PREFIX = "s3://";
1: 
1:   public static final String S3N_PREFIX = "s3n://";
1: 
1:   public static final String S3A_PREFIX = "s3a://";
1: 
/////////////////////////////////////////////////////////////////////////
commit:2f0959a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:956833e
/////////////////////////////////////////////////////////////////////////
1:   public static final String ARRAY = "array";
1:   public static final String STRUCT = "struct";
commit:0e1d37e
/////////////////////////////////////////////////////////////////////////
1:    * Bytes for string 0, it is used in codegen in case of null values.
1:    */
0:   public static final byte[] ZERO_BYTE_ARRAY = "0".getBytes();
1: 
1:   /**
author:manishgupta88
-------------------------------------------------------------------------------
commit:fb6dffe
/////////////////////////////////////////////////////////////////////////
1:   public static final String MAP = "map";
commit:a2928e3
/////////////////////////////////////////////////////////////////////////
1: 
1:   @CarbonProperty
1:   public static final String UNSAFE_DRIVER_WORKING_MEMORY_IN_MB =
1:       "carbon.unsafe.driver.working.memory.in.mb";
commit:a0350e1
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * property to be specified for caching min/max of required columns
1:    */
1:   public static final String COLUMN_META_CACHE = "column_meta_cache";
1:   /**
1:    * property to be specified for caching level (Block/Blocket)
1:    */
1:   public static final String CACHE_LEVEL = "cache_level";
1:   /**
1:    * default value for cache level
1:    */
1:   public static final String CACHE_LEVEL_DEFAULT_VALUE = "BLOCK";
commit:26607fb
/////////////////////////////////////////////////////////////////////////
1:   @InterfaceStability.Evolving
1:   // Note: If this property is set to true it can impact compaction performance as IO will increase
1:   public static final String CARBON_ENABLE_PAGE_LEVEL_READER_IN_COMPACTION_DEFAULT = "false";
commit:29dc302
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * key for dictionary path
1:    */
1:   public static final String DICTIONARY_PATH = "dictionary_path";
commit:2b66476
/////////////////////////////////////////////////////////////////////////
1:    * default charset to be used for reading and writing
1:    */
1:   public static final String DEFAULT_CHARSET = "UTF-8";
1: 
1:   /**
1:   public static final byte[] MEMBER_DEFAULT_VAL_ARRAY =
1:       MEMBER_DEFAULT_VAL.getBytes(Charset.forName(DEFAULT_CHARSET));
/////////////////////////////////////////////////////////////////////////
commit:285ce72
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   public static final String CARBON_LEASE_RECOVERY_RETRY_COUNT =
1:       "carbon.lease.recovery.retry.count";
1:   @CarbonProperty
1:   public static final String CARBON_LEASE_RECOVERY_RETRY_INTERVAL =
1:       "carbon.lease.recovery.retry.interval";
1: 
commit:83aae94
/////////////////////////////////////////////////////////////////////////
commit:70256e7
/////////////////////////////////////////////////////////////////////////
1:   public static final int DICTIONARY_DEFAULT_CARDINALITY = 1;
1: 
commit:ff7793b
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * Maximum waiting time (in seconds) for a query for requested executors to be started
1:    */
0:   public static final String CARBON_EXECUTOR_STARTUP_TIMEOUT =
0:       "carbon.max.executor.startup.timeout";
1: 
1:   /**
1:    * default value for executor start up waiting time out
1:    */
0:   public static final String CARBON_EXECUTOR_WAITING_TIMEOUT_DEFAULT = "5";
1: 
1:   /**
1:    * Max value. If value configured by user is more than this than this value will value will be
1:    * considered
1:    */
0:   public static final int CARBON_EXECUTOR_WAITING_TIMEOUT_MAX = 60;
1: 
1:   /**
1:    * time for which thread will sleep and check again if the requested number of executors
1:    * have been started
1:    */
0:   public static final int CARBON_EXECUTOR_STARTUP_THREAD_SLEEP_TIME = 250;
1: 
author:kumarvishal09
-------------------------------------------------------------------------------
commit:43285bb
/////////////////////////////////////////////////////////////////////////
1:   public static final short LOCAL_DICT_ENCODED_BYTEARRAY_SIZE = 3;
1: 
commit:3a4b881
/////////////////////////////////////////////////////////////////////////
1:    * max dictionary threshold
1:    */
1:   public static final int LOCAL_DICTIONARY_MAX = 100000;
1: 
1:   /**
1:    * min dictionary threshold
1:    */
1:   public static final int LOCAL_DICTIONARY_MIN = 1000;
1: 
1:   /**
author:dhatchayani
-------------------------------------------------------------------------------
commit:7341907
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * It is internal configuration and used only for test purpose.
1:    * It will merge the carbon index files with in the segment to single segment.
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_MERGE_INDEX_IN_SEGMENT =
1:       "carbon.merge.index.in.segment";
1: 
1:   public static final String CARBON_MERGE_INDEX_IN_SEGMENT_DEFAULT = "true";
1: 
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1:   // Property to enable parallel datamap loading for a table
1:   public static final String CARBON_LOAD_DATAMAPS_PARALLEL = "carbon.load.datamaps.parallel.";
1: 
commit:f5cdd5c
/////////////////////////////////////////////////////////////////////////
0:   public static final String CARBON_COMMON_LISTENER_REGISTER_CLASSNAME =
0:       "spark.carbon.common.listener.register.classname";
1: 
commit:54a381c
/////////////////////////////////////////////////////////////////////////
commit:943588d
/////////////////////////////////////////////////////////////////////////
1:   // As Short data type is used for storing the length of a column during data processing hence
1:   // the maximum characters that can be supported should be less than Short max value
1:   public static final int MAX_CHARS_PER_COLUMN_DEFAULT = 32000;
1: 
commit:6ae1f1b
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * FAIL action will fail the load in case of bad records in loading data
1:    */
1:   public static final String CARBON_BAD_RECORDS_ACTION_DEFAULT = "FAIL";
commit:40f0608
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * this will be used to skip / ignore empty lines while loading
1:    */
1:   @CarbonProperty public static final String CARBON_SKIP_EMPTY_LINE = "carbon.skip.empty.line";
1: 
1:   public static final String CARBON_SKIP_EMPTY_LINE_DEFAULT = "false";
1: 
commit:d2319f0
/////////////////////////////////////////////////////////////////////////
1:    * surrogate value of null
1:    */
1:   public static final int DICT_VALUE_NULL = 1;
1:   /**
commit:36ceb59
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Empty byte array
1:    */
1:   public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
1: 
commit:d25fee2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public static final String LEVEL2_COMPACTION_INDEX = ".2";
1:   public static final String COMPACTION_KEY_WORD = "COMPACTION";
/////////////////////////////////////////////////////////////////////////
1:   public static final String minorCompactionRequiredFile = "compactionRequired_minor";
1:   public static final String majorCompactionRequiredFile = "compactionRequired_major";
1:   public static final String ENABLE_CONCURRENT_COMPACTION = "carbon.concurrent.compaction";
1:   public static final String DEFAULT_ENABLE_CONCURRENT_COMPACTION = "true";
1:   public static final String SYSTEM_LEVEL_COMPACTION_LOCK_FOLDER = "SystemCompactionLock";
/////////////////////////////////////////////////////////////////////////
1:   public static final String UPDATED_COL_EXTENSION = "-updatedColumn";
1:   public static final String RDDUTIL_UPDATE_KEY = "UPDATE_";
1:   public static final String isPersistEnabled = "carbon.update.persist.enable";
1:   public static final String isHorizontalCompactionEnabled = "carbon.horizontal.compaction.enable";
1:   public static final String defaultIsHorizontalCompactionEnabled = "true";
1:   public static final String defaultValueIsPersistEnabled = "true";
/////////////////////////////////////////////////////////////////////////
1:   public static final int DEFAULT_MAX_NUMBER_OF_COLUMNS = 20000;
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
commit:500654e
/////////////////////////////////////////////////////////////////////////
1:   public static final byte[] ZERO_BYTE_ARRAY = "0".getBytes(Charset.forName(DEFAULT_CHARSET));
commit:002279e
/////////////////////////////////////////////////////////////////////////
1:   /**
author:kunal642
-------------------------------------------------------------------------------
commit:cb10d03
/////////////////////////////////////////////////////////////////////////
1:    * Specifies the path where the lock files have to be created.
1:    * By default, lock files are created in table path.
1:    */
1:   @CarbonProperty
1:   public static final String LOCK_PATH = "carbon.lock.path";
1: 
1:   /**
commit:7dcc2e7
/////////////////////////////////////////////////////////////////////////
1:    * NUMBER_OF_TRIES_FOR_LOAD_METADATA_LOCK.
1:    *
1:    * Because we want concurrent loads to be completed even if they have to wait for the lock
1:    * therefore taking the default as 100.
1:    *
1:    * Example: Concurrent loads will use this to wait to acquire the table status lock.
1:   public static final int NUMBER_OF_TRIES_FOR_CONCURRENT_LOCK_DEFAULT = 100;
1:    *
1:    * * Example: Concurrent loads will use this to wait to acquire the table status lock.
1:   public static final int MAX_TIMEOUT_FOR_CONCURRENT_LOCK_DEFAULT = 1;
1:   public static final String NUMBER_OF_TRIES_FOR_CONCURRENT_LOCK =
1:       "carbon.concurrent.lock.retries";
1:   public static final String MAX_TIMEOUT_FOR_CONCURRENT_LOCK =
1:       "carbon.concurrent.lock.retry.timeout.sec";
1: 
1:   /**
1:    * NUMBER_OF_TRIES_FOR_CARBON_LOCK
1:    */
1:   public static final int NUMBER_OF_TRIES_FOR_CARBON_LOCK_DEFAULT = 3;
1:   /**
1:    * MAX_TIMEOUT_FOR_CARBON_LOCK
1:    */
1:   public static final int MAX_TIMEOUT_FOR_CARBON_LOCK_DEFAULT = 5;
1:   /**
1:    * NUMBER_OF_TRIES_FOR_CARBON_LOCK
1:    */
1:   @CarbonProperty
1:   public static final String NUMBER_OF_TRIES_FOR_CARBON_LOCK =
1:       "carbon.lock.retries";
1:   /**
1:    * MAX_TIMEOUT_FOR_CARBON_LOCK
1:    */
1:   @CarbonProperty
1:   public static final String MAX_TIMEOUT_FOR_CARBON_LOCK =
1:       "carbon.lock.retry.timeout.sec";
commit:5ae596b
/////////////////////////////////////////////////////////////////////////
1:    * Whether load/insert command is fired internally or by the user.
1:    * Used to block load/insert on pre-aggregate if fired by user
1:    */
1:   public static final String IS_INTERNAL_LOAD_CALL = "is.internal.load.call";
1: 
1:   /**
commit:cc0e6f1
/////////////////////////////////////////////////////////////////////////
1:    * Fetch and validate the segments.
1:    * Used for aggregate table load as segment validation is not required.
1:    */
1:   public static final String VALIDATE_CARBON_INPUT_SEGMENTS = "validate.carbon.input.segments.";
1: 
1:   /**
commit:8815dd5
/////////////////////////////////////////////////////////////////////////
1:    *  Dictionary Server Worker Threads
1:    */
1:   public static final String DICTIONARY_WORKER_THREADS = "dictionary.worker.threads";
1: 
1:   /**
1:    *  Dictionary Server Worker Threads
1:    */
1:   public static final String DICTIONARY_WORKER_THREADS_DEFAULT = "1";
1: 
1:   /**
author:xuchuanyin
-------------------------------------------------------------------------------
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1:    * surrogate value of null for direct dictionary
1:    */
1:   public static final int DIRECT_DICT_VALUE_NULL = 1;
1:   /**
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1:   public static final String LONG_STRING_COLUMNS = "long_string_columns";
/////////////////////////////////////////////////////////////////////////
1:   // todo: use infinity first, will switch later
1:   public static final int MAX_CHARS_PER_COLUMN_INFINITY = -1;
commit:d14c403
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * Cache size in MB for bloom filter datamap. It is an integer and should be greater than 0
0:    * and it will be used during query.
1:    */
1:   @CarbonProperty
0:   public static final String CARBON_QUERY_DATAMAP_BLOOM_CACHE_SIZE =
0:       "carbon.query.datamap.bloom.cache.size";
1: 
1:   /**
1:    * default value in size for cache size of bloom filter datamap.
1:    */
1:   public static final String CARBON_QUERY_DATAMAP_BLOOM_CACHE_SIZE_DEFAULT_VAL = "512";
1: 
commit:b08ef00
/////////////////////////////////////////////////////////////////////////
1:    * key prefix for set command. 'carbon.datamap.visible.dbName.tableName.dmName = false' means
1:    * that the query on 'dbName.table' will not use the datamap 'dmName'
1:    */
1:   @InterfaceStability.Unstable
1:   public static final String CARBON_DATAMAP_VISIBLE = "carbon.datamap.visible.";
1: 
1:   /**
commit:e26cccc
/////////////////////////////////////////////////////////////////////////
1:   /*
1:    * whether to enable prefetch for rowbatch to enhance row reconstruction during compaction
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_COMPACTION_PREFETCH_ENABLE =
1:       "carbon.compaction.prefetch.enable";
1:   public static final String CARBON_COMPACTION_PREFETCH_ENABLE_DEFAULT = "false";
1: 
commit:c100251
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:    * name of compressor to compress sort temp files
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_SORT_TEMP_COMPRESSOR = "carbon.sort.temp.compressor";
1: 
1:   /**
0:    * The optional values are 'SNAPPY','GZIP','BZIP2','LZ4'.
1:    * By default, empty means that Carbondata will not compress the sort temp files.
1:    */
1:   public static final String CARBON_SORT_TEMP_COMPRESSOR_DEFAULT = "";
1:   /**
commit:2ee7775
/////////////////////////////////////////////////////////////////////////
1:    * DASH
1:    */
1:   public static final String DASH = "-";
1:   /**
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * property for configuring parallelism per segment when doing an update. Increase this
1:    * value will avoid data screw problem for a large segment.
1:    * Refer to CARBONDATA-1373 for more details.
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_UPDATE_SEGMENT_PARALLELISM =
1:       "carbon.update.segment.parallelism";
1: 
1:   /**
1:    * In default we will not optimize the update
1:    */
1:   public static final String CARBON_UPDATE_SEGMENT_PARALLELISM_DEFAULT = "1";
1: 
commit:ded8b41
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * whether to use multi directories when loading data,
1:    * the main purpose is to avoid single-disk-hot-spot
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_USE_MULTI_TEMP_DIR = "carbon.use.multiple.temp.dir";
1: 
1:   /**
1:    * default value for multi temp dir
1:    */
1:   public static final String CARBON_USE_MULTI_TEMP_DIR_DEFAULT = "false";
1: 
author:Manhua
-------------------------------------------------------------------------------
commit:ece0672
/////////////////////////////////////////////////////////////////////////
1:    * The optional values are 'SNAPPY','GZIP','BZIP2','LZ4','ZSTD'.
commit:5204818
/////////////////////////////////////////////////////////////////////////
0:    * Thread size of static ExecutorService in each Node when using search mode.
0:    * Default value is -1, it means that Executors.newCachedThreadPool() will be used to
0:    * maximize utilization. If thread numbers has to be limited, set it a positive Integer
0:    * will call Executors.newFixedThreadPool(int nThreads) instead
0:   public static final String CARBON_SEARCH_MODE_SCAN_THREAD = "carbon.search.mode.scan.thread";
0:   public static final String CARBON_SEARCH_MODE_SCAN_THREAD_DEFAULT = "-1";
commit:638ed1f
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
0:   public static final String CARBON_SEARCH_MODE_ENABLE = "carbon.search.mode.enable";
1: 
1:   public static final String CARBON_SEARCH_MODE_ENABLE_DEFAULT = "false";
1: 
1:   /**
0:    * Num of threads used in query executor when using search mode.
1:    */
1:   @CarbonProperty
0:   public static final String CARBON_SEARCH_MODE_THREAD = "carbon.search.mode.thread";
1: 
0:   public static final String CARBON_SEARCH_MODE_THREAD_DEFAULT = "3";
1: 
author:ravipesala
-------------------------------------------------------------------------------
commit:60dfdd3
/////////////////////////////////////////////////////////////////////////
1:    * DEFAULT_FLAT_FOLDER
1:    */
1:   public static final String DEFAULT_FLAT_FOLDER = "false";
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:   // Flat folder support on table. when it is true all carbondata files store directly under table
1:   // path instead of sub folders.
1:   public static final String FLAT_FOLDER = "flat_folder";
commit:05086e5
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * System older location to store system level data like datamap schema and status files.
1:    */
1:   public static final String CARBON_SYSTEM_FOLDER_LOCATION = "carbon.system.folder.location";
1: 
commit:c125f0c
/////////////////////////////////////////////////////////////////////////
commit:46d9bf9
/////////////////////////////////////////////////////////////////////////
commit:d509f17
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Enabling page level reader for compaction reduces the memory usage while compacting more
1:    * number of segments. It allows reading only page by page instead of reaing whole blocklet to
1:    * memory.
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_ENABLE_PAGE_LEVEL_READER_IN_COMPACTION =
1:       "carbon.enable.page.level.reader.in.compaction";
1: 
0:   public static final String CARBON_ENABLE_PAGE_LEVEL_READER_IN_COMPACTION_DEFAULT = "true";
1: 
commit:b4dc866
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * This property defines how the tasks are splitted/combined and launch spark tasks during query
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_TASK_DISTRIBUTION = "carbon.task.distribution";
1:   /**
1:    * It combines the available blocks as per the maximum available tasks in the cluster.
1:    */
1:   public static final String CARBON_TASK_DISTRIBUTION_CUSTOM = "custom";
1: 
1:   /**
1:    * It creates the splits as per the number of blocks/carbondata files available for query.
1:    */
1:   public static final String CARBON_TASK_DISTRIBUTION_BLOCK = "block";
1: 
1:   /**
1:    * It creates the splits as per the number of blocklets available for query.
1:    */
1:   public static final String CARBON_TASK_DISTRIBUTION_BLOCKLET = "blocklet";
1: 
1:   /**
1:    * It merges all the small files and create tasks as per the configurable partition size.
1:    */
1:   public static final String CARBON_TASK_DISTRIBUTION_MERGE_FILES = "merge_small_files";
1: 
1:   /**
1:    * Default task distribution.
1:    */
1:   public static final String CARBON_TASK_DISTRIBUTION_DEFAULT = CARBON_TASK_DISTRIBUTION_BLOCK;
1: 
1: 
commit:7f3c374
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * It allows queries on hive metastore directly along with filter information, otherwise first
1:    * fetches all partitions from hive and apply filters on it.
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_READ_PARTITION_HIVE_DIRECT =
1:       "carbon.read.partition.hive.direct";
1:   public static final String CARBON_READ_PARTITION_HIVE_DIRECT_DEFAULT = "true";
1: 
commit:0586146
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * It is internal configuration and used only for test purpose.
0:    * It will merge the carbon index files with in the segment to single segment.
1:    */
0:   public static final String CARBON_MERGE_INDEX_IN_SEGMENT = "carbon.merge.index.in.segment";
1: 
0:   public static final String CARBON_MERGE_INDEX_IN_SEGMENT_DEFAULT = "true";
1: 
commit:1462495
/////////////////////////////////////////////////////////////////////////
commit:9a8fac3
/////////////////////////////////////////////////////////////////////////
1:   public static final String ENABLE_HIVE_SCHEMA_META_STORE = "spark.carbon.hive.schema.store";
1: 
1:   public static final String ENABLE_HIVE_SCHEMA_META_STORE_DEFAULT = "false";
1: 
commit:3807b2f
/////////////////////////////////////////////////////////////////////////
1:   public static final String LOAD_SORT_SCOPE = "carbon.load.sort.scope";
1:    * If set to BATCH_SORT, the sorting scope is smaller and more index tree will be created,
1:    * If set to LOCAL_SORT, the sorting scope is bigger and one index tree per data node will be
1:    * created, thus loading is slower but query is faster.
1:   public static final String LOAD_SORT_SCOPE_DEFAULT = "LOCAL_SORT";
commit:bfa306b
/////////////////////////////////////////////////////////////////////////
1:   public static final String ENABLE_INMEMORY_MERGE_SORT_DEFAULT = "false";
commit:e6b6090
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:b13ead9
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Sorts the data in batches and writes the batch data to store with index file.
1:    */
0:   public static final String LOAD_USE_BATCH_SORT = "carbon.load.use.batch.sort";
1: 
1:   /**
0:    * If set to true, the sorting scope is smaller and more index tree will be created,
1:    * thus loading is faster but query maybe slower.
0:    * If set to false, the sorting scope is bigger and one index tree per data node will be created,
0:    * thus loading is slower but query is faster.
1:    */
0:   public static final String LOAD_USE_BATCH_SORT_DEFAULT = "false";
1: 
1:   /**
1:    * Size of batch data to keep in memory, as a thumb rule it supposed
1:    * to be less than 45% of sort.inmemory.size.inmb otherwise it may spill intermediate data to disk
1:    */
1:   public static final String LOAD_BATCH_SORT_SIZE_INMB = "carbon.load.batch.sort.size.inmb";
1: 
commit:b282e50
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
0:    * Bytes for string 0, it is used in codegen in case of null values.
1:    */
0:   public static final byte[] ZERO_BYTE_ARRAY = "0".getBytes();
commit:72cb415
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.Charset;
1: 
/////////////////////////////////////////////////////////////////////////
1:    * The batch size of records which returns to client.
1: 
1:   public static final int DETAIL_QUERY_BATCH_SIZE_DEFAULT = 100;
/////////////////////////////////////////////////////////////////////////
1:    * default charset class to be used for reading and writing
1:    */
1:   public static final Charset DEFAULT_CHARSET_CLASS = Charset.forName(DEFAULT_CHARSET);
1: 
1:   /**
commit:7d5a031
/////////////////////////////////////////////////////////////////////////
0:   public static final String USE_KETTLE = "use_kettle";
1: 
0:   public static final String USE_KETTLE_DEFAULT = "false";
1: 
commit:9587515
/////////////////////////////////////////////////////////////////////////
0:   public static final String LOCAL_FILE_PREFIX = "file://";
1: 
commit:8100d94
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * whether to prefetch data while loading.
1:    */
1:   public static final String USE_PREFETCH_WHILE_LOADING = "carbon.loading.prefetch";
1: 
1:   /**
1:    * default value for prefetch data while loading.
1:    */
1:   public static final String USE_PREFETCH_WHILE_LOADING_DEFAULT = "false";
1: 
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1:   /*
1:    * carbon dictionary server port
1:    */
1:   public static final String DICTIONARY_SERVER_PORT = "carbon.dictionary.server.port";
1: 
1:   /**
1:    * Default carbon dictionary server port
1:    */
1:   public static final String DICTIONARY_SERVER_PORT_DEFAULT = "2030";
1: 
commit:376d69f
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * MEMBER_DEFAULT_VAL_ARRAY
1:    */
0:   public static final byte[] MEMBER_DEFAULT_VAL_ARRAY = MEMBER_DEFAULT_VAL.getBytes();
/////////////////////////////////////////////////////////////////////////
1:   public static final String ENABLE_VECTOR_READER = "carbon.enable.vector.reader";
1: 
0:   public static final String ENABLE_VECTOR_READER_DEFAULT = "false";
1: 
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * to enable offheap sort
1:    */
1:   public static final String ENABLE_UNSAFE_SORT = "enable.unsafe.sort";
1: 
1:   /**
1:    * to enable offheap sort
1:    */
0:   public static final String ENABLE_UNSAFE_SORT_DEFAULT = "false";
1: 
1:   /**
1:    * to enable offheap sort
1:    */
1:   public static final String ENABLE_OFFHEAP_SORT = "enable.offheap.sort";
1: 
1:   /**
1:    * to enable offheap sort
1:    */
1:   public static final String ENABLE_OFFHEAP_SORT_DEFAULT = "true";
1: 
1:   public static final String ENABLE_INMEMORY_MERGE_SORT = "enable.inmemory.merge.sort";
1: 
0:   public static final String ENABLE_INMEMORY_MERGE_SORT_DEFAULT = "true";
1: 
1:   public static final String OFFHEAP_SORT_CHUNK_SIZE_IN_MB = "offheap.sort.chunk.size.inmb";
1: 
1:   public static final String OFFHEAP_SORT_CHUNK_SIZE_IN_MB_DEFAULT = "64";
1: 
1:   public static final String IN_MEMORY_FOR_SORT_DATA_IN_MB = "sort.inmemory.size.inmb";
1: 
1:   public static final String IN_MEMORY_FOR_SORT_DATA_IN_MB_DEFAULT = "1024";
1: 
commit:f63b1ff
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * This batch size is used to send rows from load step to another step in batches.
1:    */
1:   public static final String DATA_LOAD_BATCH_SIZE = "DATA_LOAD_BATCH_SIZE";
1: 
1:   /**
1:    * Default size of data load batch size.
1:    */
1:   public static final String DATA_LOAD_BATCH_SIZE_DEFAULT = "1000";
1: 
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.constants;
1: 
1: public final class CarbonCommonConstants {
1:   /**
1:    * integer size in bytes
1:    */
1:   public static final int INT_SIZE_IN_BYTE = 4;
1:   /**
1:    * short size in bytes
1:    */
1:   public static final int SHORT_SIZE_IN_BYTE = 2;
1:   /**
1:    * DOUBLE size in bytes
1:    */
1:   public static final int DOUBLE_SIZE_IN_BYTE = 8;
1:   /**
1:    * LONG size in bytes
1:    */
1:   public static final int LONG_SIZE_IN_BYTE = 8;
1:   /**
1:    * byte to KB conversion factor
1:    */
1:   public static final int BYTE_TO_KB_CONVERSION_FACTOR = 1024;
1:   /**
1:    * BYTE_ENCODING
1:    */
1:   public static final String BYTE_ENCODING = "ISO-8859-1";
1:   /**
1:    * measure meta data file name
1:    */
1:   public static final String MEASURE_METADATA_FILE_NAME = "/msrMetaData_";
1:   /**
1:    * location of the carbon member, hierarchy and fact files
1:    */
1:   public static final String STORE_LOCATION = "carbon.storelocation";
1:   /**
1:    * blocklet size in carbon file
1:    */
1:   public static final String BLOCKLET_SIZE = "carbon.blocklet.size";
1:   /**
0:    * TODO: max number of blocklets written in a single file?
1:    */
0:   public static final String MAX_FILE_SIZE = "carbon.max.file.size";
1:   /**
0:    * Number of cores to be used
1:    */
0:   public static final String NUM_CORES = "carbon.number.of.cores";
1:   /**
1:    * carbon sort size
1:    */
1:   public static final String SORT_SIZE = "carbon.sort.size";
1:   /**
0:    * default location of the carbon member, hierarchy and fact files
1:    */
0:   public static final String STORE_LOCATION_DEFAULT_VAL = "../carbon.store";
1:   /**
0:    * the folder name of kettle home path
1:    */
0:   public static final String KETTLE_HOME_NAME = "carbonplugins";
1:   /**
1:    * CARDINALITY_INCREMENT_DEFAULT_VALUE
1:    */
1:   public static final int CARDINALITY_INCREMENT_VALUE_DEFAULT_VAL = 10;
1:   /**
1:    * default blocklet size
1:    */
1:   public static final String BLOCKLET_SIZE_DEFAULT_VAL = "120000";
1:   /**
1:    * min blocklet size
1:    */
0:   public static final int BLOCKLET_SIZE_MIN_VAL = 50;
1:   /**
1:    * max blocklet size
1:    */
1:   public static final int BLOCKLET_SIZE_MAX_VAL = 12000000;
1:   /**
0:    * TODO: default value of max number of blocklet written in a single file?
1:    */
0:   public static final String MAX_FILE_SIZE_DEFAULT_VAL = "1024";
1:   /**
0:    * TODO: min value of max number of blocklets written in a single file?
1:    */
0:   public static final int MAX_FILE_SIZE_DEFAULT_VAL_MIN_VAL = 1;
1:   /**
0:    * max allowed block size for a file. If block size is greater than this value
0:    * then the value is reset to default block size for a file
1:    */
0:   public static final int MAX_FILE_SIZE_DEFAULT_VAL_MAX_VAL = 2048;
1:   /**
1:    * default value of number of cores to be used
1:    */
1:   public static final String NUM_CORES_DEFAULT_VAL = "2";
1:   /**
0:    * min value of number of cores to be used
1:    */
0:   public static final int NUM_CORES_MIN_VAL = 1;
1:   /**
0:    * max value of number of cores to be used
1:    */
0:   public static final int NUM_CORES_MAX_VAL = 32;
1:   /**
1:    * default carbon sort size
1:    */
1:   public static final String SORT_SIZE_DEFAULT_VAL = "100000";
1:   /**
1:    * min carbon sort size
1:    */
1:   public static final int SORT_SIZE_MIN_VAL = 1000;
1:   /**
1:    * carbon properties file path
1:    */
1:   public static final String CARBON_PROPERTIES_FILE_PATH = "../../../conf/carbon.properties";
1:   /**
1:    * CARBON_DDL_BASE_HDFS_URL
1:    */
1:   public static final String CARBON_DDL_BASE_HDFS_URL = "carbon.ddl.base.hdfs.url";
1:   /**
0:    * Slice Meta data file.
1:    */
0:   public static final String SLICE_METADATA_FILENAME = "sliceMetaData";
1:   /**
1:    * Load Folder Name
1:    */
1:   public static final String LOAD_FOLDER = "Segment_";
1:   /**
0:    * RESTructure Folder
1:    */
0:   public static final String RESTRUCTRE_FOLDER = "RS_";
1:   /**
1:    * BYTEBUFFER_SIZE
1:    */
1: 
1:   public static final int BYTEBUFFER_SIZE = 24 * 1024;
1:   /**
1:    * Average constant
1:    */
1:   public static final String AVERAGE = "avg";
1:   /**
1:    * Count constant
1:    */
1:   public static final String COUNT = "count";
1:   /**
1:    * Count constant
1:    */
0:   public static final String COUNT_STAR = "countstar";
1:   /**
0:    * Max constant
1:    */
0:   public static final String MAX = "max";
1:   /**
0:    * Min constant
1:    */
0:   public static final String MIN = "min";
1:   /**
0:    * distinct count
1:    */
0:   public static final String DISTINCT_COUNT = "distinct-count";
1:   /**
0:    * CUSTOM
1:    */
0:   public static final String CUSTOM = "custom";
1:   /**
1:    * SUM
1:    */
1:   public static final String SUM = "sum";
1:   /**
1:    * DUMMY aggregation function
1:    */
1:   public static final String DUMMY = "dummy";
1:   /**
1:    * MEMBER_DEFAULT_VAL
1:    */
1:   public static final String MEMBER_DEFAULT_VAL = "@NU#LL$!";
1:   /**
0:    * BLANK_LINE_FLAG
1:    */
0:   public static final String BLANK_LINE_FLAG = "@NU#LL$!BLANKLINE";
1:   /**
1:    * FILE STATUS IN-PROGRESS
1:    */
1:   public static final String FILE_INPROGRESS_STATUS = ".inprogress";
1:   /**
1:    * CARBON_BADRECORDS_LOCATION
1:    */
1:   public static final String CARBON_BADRECORDS_LOC = "carbon.badRecords.location";
1:   /**
1:    * CARBON_BADRECORDS_LOCATION_DEFAULT
1:    */
0:   public static final String CARBON_BADRECORDS_LOC_DEFAULT_VAL =
0:       "../unibi-solutions/system/carbon/badRecords";
1:   /**
1:    * HIERARCHY_FILE_EXTENSION
1:    */
1:   public static final String HIERARCHY_FILE_EXTENSION = ".hierarchy";
1:   /**
1:    * SORT_TEMP_FILE_LOCATION
1:    */
1:   public static final String SORT_TEMP_FILE_LOCATION = "sortrowtmp";
1:   /**
1:    * CARBON_RESULT_SIZE_DEFAULT
1:    */
1:   public static final String LEVEL_FILE_EXTENSION = ".level";
1:   /**
1:    * FACT_FILE_EXT
1:    */
1:   public static final String FACT_FILE_EXT = ".carbondata";
1:   /**
1:    * MEASUREMETADATA_FILE_EXT
1:    */
1:   public static final String MEASUREMETADATA_FILE_EXT = ".msrmetadata";
1:   /**
0:    * GRAPH_ROWSET_SIZE
1:    */
0:   public static final String GRAPH_ROWSET_SIZE = "carbon.graph.rowset.size";
1:   /**
0:    * GRAPH_ROWSET_SIZE_DEFAULT
1:    */
0:   public static final String GRAPH_ROWSET_SIZE_DEFAULT = "500";
1:   /**
1:    * Comment for <code>TYPE_MYSQL</code>
1:    */
1:   public static final String TYPE_MYSQL = "MYSQL";
1:   /**
1:    * Comment for <code>TYPE_MSSQL</code>
1:    */
1:   public static final String TYPE_MSSQL = "MSSQL";
1:   /**
1:    * Comment for <code>TYPE_ORACLE</code>
1:    */
1:   public static final String TYPE_ORACLE = "ORACLE";
1:   /**
1:    * Comment for <code>TYPE_SYBASE</code>
1:    */
1:   public static final String TYPE_SYBASE = "SYBASE";
1:   /**
1:    * SORT_INTERMEDIATE_FILES_LIMIT
1:    */
1:   public static final String SORT_INTERMEDIATE_FILES_LIMIT = "carbon.sort.intermediate.files.limit";
1:   /**
1:    * SORT_INTERMEDIATE_FILES_LIMIT_DEFAULT_VALUE
1:    */
1:   public static final String SORT_INTERMEDIATE_FILES_LIMIT_DEFAULT_VALUE = "20";
1:   /**
1:    * MERGERD_EXTENSION
1:    */
1:   public static final String MERGERD_EXTENSION = ".merge";
1:   /**
0:    * SORT_FILE_BUFFER_SIZE
1:    */
0:   public static final String SORT_FILE_BUFFER_SIZE = "carbon.sort.file.buffer.size";
1:   /**
0:    * no.of records after which counter to be printed
1:    */
0:   public static final String DATA_LOAD_LOG_COUNTER = "carbon.load.log.counter";
1:   /**
0:    * DATA_LOAD_LOG_COUNTER_DEFAULT_COUNTER
1:    */
0:   public static final String DATA_LOAD_LOG_COUNTER_DEFAULT_COUNTER = "500000";
1:   /**
1:    * SORT_FILE_WRITE_BUFFER_SIZE
1:    */
1:   public static final String CARBON_SORT_FILE_WRITE_BUFFER_SIZE =
1:       "carbon.sort.file.write.buffer.size";
1:   /**
1:    * SORT_FILE_WRITE_BUFFER_SIZE_DEFAULT_VALUE
1:    */
0:   public static final String CARBON_SORT_FILE_WRITE_BUFFER_SIZE_DEFAULT_VALUE = "50000";
1:   /**
1:    * Number of cores to be used while loading
1:    */
1:   public static final String NUM_CORES_LOADING = "carbon.number.of.cores.while.loading";
1:   /**
1:    * Number of cores to be used while compacting
1:    */
1:   public static final String NUM_CORES_COMPACTING = "carbon.number.of.cores.while.compacting";
1:   /**
0:    * Number of cores to be used for block sort
1:    */
0:   public static final String NUM_CORES_BLOCK_SORT = "carbon.number.of.cores.block.sort";
1:   /**
1:    * Default value of number of cores to be used for block sort
1:    */
1:   public static final String NUM_CORES_BLOCK_SORT_DEFAULT_VAL = "7";
1:   /**
1:    * Max value of number of cores to be used for block sort
1:    */
1:   public static final int NUM_CORES_BLOCK_SORT_MAX_VAL = 12;
1:   /**
1:    * Min value of number of cores to be used for block sort
1:    */
1:   public static final int NUM_CORES_BLOCK_SORT_MIN_VAL = 1;
1:   /**
1:    * CSV_READ_BUFFER_SIZE
1:    */
1:   public static final String CSV_READ_BUFFER_SIZE = "carbon.csv.read.buffersize.byte";
1:   /**
1:    * CSV_READ_BUFFER_SIZE
1:    */
1:   public static final String CSV_READ_BUFFER_SIZE_DEFAULT = "50000";
1:   /**
1:    * CSV_READ_COPIES
1:    */
1:   public static final String DEFAULT_NUMBER_CORES = "2";
1:   /**
1:    * CSV_FILE_EXTENSION
1:    */
1:   public static final String CSV_FILE_EXTENSION = ".csv";
1:   /**
1:    * COLON_SPC_CHARACTER
1:    */
1:   public static final String COLON_SPC_CHARACTER = ":!@#COLON#@!:";
1:   /**
1:    * HASH_SPC_CHARATER
1:    */
1:   public static final String HASH_SPC_CHARACTER = "#!@:HASH:@!#";
1:   /**
1:    * SEMICOLON_SPC_CHARATER
1:    */
1:   public static final String SEMICOLON_SPC_CHARACTER = ";#!@:SEMIC:@!#;";
1:   /**
1:    * AMPERSAND_SPC_CHARATER
1:    */
1:   public static final String AMPERSAND_SPC_CHARACTER = "&#!@:AMPER:@!#&";
1:   /**
1:    * ATTHERATE_SPC_CHARATER
1:    */
1:   public static final String COMA_SPC_CHARACTER = ",#!:COMA:!#,";
1:   /**
1:    * HYPHEN_SPC_CHARACTER
1:    */
1:   public static final String HYPHEN_SPC_CHARACTER = "-#!:HYPHEN:!#-";
1:   /**
0:    * CARBON_DECIMAL_POINTERS_DEFAULT
1:    */
0:   public static final byte CARBON_DECIMAL_POINTERS_DEFAULT = 5;
1:   /**
1:    * SORT_TEMP_FILE_EXT
1:    */
1:   public static final String SORT_TEMP_FILE_EXT = ".sorttemp";
1:   /**
1:    * CARBON_MERGE_SORT_READER_THREAD
1:    */
1:   public static final String CARBON_MERGE_SORT_READER_THREAD = "carbon.merge.sort.reader.thread";
1:   /**
1:    * CARBON_MERGE_SORT_READER_THREAD_DEFAULTVALUE
1:    */
1:   public static final String CARBON_MERGE_SORT_READER_THREAD_DEFAULTVALUE = "3";
1:   /**
0:    * IS_SORT_TEMP_FILE_COMPRESSION_ENABLED
1:    */
0:   public static final String IS_SORT_TEMP_FILE_COMPRESSION_ENABLED =
0:       "carbon.is.sort.temp.file.compression.enabled";
1:   /**
0:    * IS_SORT_TEMP_FILE_COMPRESSION_ENABLED_DEFAULTVALUE
1:    */
0:   public static final String IS_SORT_TEMP_FILE_COMPRESSION_ENABLED_DEFAULTVALUE = "false";
1:   /**
0:    * SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION
1:    */
0:   public static final String SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION =
0:       "carbon.sort.temp.file.no.of.records.for.compression";
1:   /**
0:    * SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE
1:    */
0:   public static final String SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE = "50";
1:   /**
1:    * DEFAULT_COLLECTION_SIZE
1:    */
1:   public static final int DEFAULT_COLLECTION_SIZE = 16;
1:   /**
1:    * CARBON_TIMESTAMP_DEFAULT_FORMAT
1:    */
1:   public static final String CARBON_TIMESTAMP_DEFAULT_FORMAT = "yyyy-MM-dd HH:mm:ss";
1:   /**
1:    * CARBON_TIMESTAMP_DEFAULT_FORMAT
1:    */
1:   public static final String CARBON_TIMESTAMP_FORMAT = "carbon.timestamp.format";
1:   /**
0:    * STORE_LOCATION_HDFS
1:    */
0:   public static final String STORE_LOCATION_HDFS = "carbon.storelocation.hdfs";
1:   /**
0:    * STORE_LOCATION_TEMP_PATH
1:    */
0:   public static final String STORE_LOCATION_TEMP_PATH = "carbon.tempstore.location";
1:   /**
0:    * IS_COLUMNAR_STORAGE_DEFAULTVALUE
1:    */
0:   public static final String IS_COLUMNAR_STORAGE_DEFAULTVALUE = "true";
1:   /**
1:    * DIMENSION_SPLIT_VALUE_IN_COLUMNAR_DEFAULTVALUE
1:    */
1:   public static final String DIMENSION_SPLIT_VALUE_IN_COLUMNAR_DEFAULTVALUE = "1";
1:   /**
1:    * IS_FULLY_FILLED_BITS_DEFAULT_VALUE
1:    */
1:   public static final String IS_FULLY_FILLED_BITS_DEFAULT_VALUE = "true";
1:   /**
0:    * IS_INT_BASED_INDEXER
1:    */
0:   public static final String AGGREAGATE_COLUMNAR_KEY_BLOCK = "aggregate.columnar.keyblock";
1:   /**
0:    * IS_INT_BASED_INDEXER_DEFAULTVALUE
1:    */
0:   public static final String AGGREAGATE_COLUMNAR_KEY_BLOCK_DEFAULTVALUE = "true";
1:   /**
1:    * TIME_STAT_UTIL_TYPE
1:    */
1:   public static final String ENABLE_DATA_LOADING_STATISTICS = "enable.data.loading.statistics";
1:   /**
1:    * TIME_STAT_UTIL_TYPE_DEFAULT
1:    */
1:   public static final String ENABLE_DATA_LOADING_STATISTICS_DEFAULT = "false";
1:   /**
0:    * IS_INT_BASED_INDEXER
1:    */
0:   public static final String HIGH_CARDINALITY_VALUE = "high.cardinality.value";
1:   /**
0:    * IS_INT_BASED_INDEXER_DEFAULTVALUE
1:    */
0:   public static final String HIGH_CARDINALITY_VALUE_DEFAULTVALUE = "100000";
1:   /**
1:    * CONSTANT_SIZE_TEN
1:    */
1:   public static final int CONSTANT_SIZE_TEN = 10;
1:   /**
1:    * LEVEL_METADATA_FILE
1:    */
1:   public static final String LEVEL_METADATA_FILE = "levelmetadata_";
0:   public static final String ENABLE_BASE64_ENCODING = "enable.base64.encoding";
0:   public static final String ENABLE_BASE64_ENCODING_DEFAULT = "false";
1:   /**
0:    * LOAD_STATUS SUCCESS
1:    */
0:   public static final String STORE_LOADSTATUS_SUCCESS = "Success";
1:   /**
0:    * LOAD_STATUS FAILURE
1:    */
0:   public static final String STORE_LOADSTATUS_FAILURE = "Failure";
1:   /**
0:    * LOAD_STATUS PARTIAL_SUCCESS
1:    */
0:   public static final String STORE_LOADSTATUS_PARTIAL_SUCCESS = "Partial Success";
1:   /**
0:    * LOAD_STATUS
1:    */
0:   public static final String CARBON_METADATA_EXTENSION = ".metadata";
1:   /**
0:    * LOAD_STATUS
1:    */
0:   public static final String CARBON_DEFAULT_STREAM_ENCODEFORMAT = "UTF-8";
1:   /**
0:    * AGGREGATE_TABLE_START_TAG
1:    */
0:   public static final String AGGREGATE_TABLE_START_TAG = "agg";
1:   /**
1:    * COMMA
1:    */
1:   public static final String COMMA = ",";
1:   /**
1:    * UNDERSCORE
1:    */
1:   public static final String UNDERSCORE = "_";
1:   /**
1:    * POINT
1:    */
1:   public static final String POINT = ".";
1:   /**
1:    * File separator
1:    */
1:   public static final String FILE_SEPARATOR = "/";
1:   /**
1:    * MAX_QUERY_EXECUTION_TIME
1:    */
1:   public static final String MAX_QUERY_EXECUTION_TIME = "max.query.execution.time";
1:   /**
1:    * CARBON_TIMESTAMP
1:    */
1:   public static final String CARBON_TIMESTAMP = "dd-MM-yyyy HH:mm:ss";
1:   /**
0:    * METADATA_LOCK
1:    */
0:   public static final String METADATA_LOCK = "meta.lock";
1:   /**
1:    * NUMBER_OF_TRIES_FOR_LOAD_METADATA_LOCK
1:    */
0:   public static final int NUMBER_OF_TRIES_FOR_LOAD_METADATA_LOCK_DEFAULT = 3;
1:   /**
1:    * MAX_TIMEOUT_FOR_LOAD_METADATA_LOCK
1:    */
0:   public static final int MAX_TIMEOUT_FOR_LOAD_METADATA_LOCK_DEFAULT = 5;
1:   /**
1:    * NUMBER_OF_TRIES_FOR_LOAD_METADATA_LOCK
1:    */
0:   public static final String NUMBER_OF_TRIES_FOR_LOAD_METADATA_LOCK =
0:       "carbon.load.metadata.lock.retries";
1:   /**
1:    * MAX_TIMEOUT_FOR_LOAD_METADATA_LOCK
1:    */
0:   public static final String MAX_TIMEOUT_FOR_LOAD_METADATA_LOCK =
0:       "carbon.load.metadata.lock.retry.timeout.sec";
1:   /**
0:    * MARKED_FOR_DELETION
1:    */
0:   public static final String MARKED_FOR_DELETE = "Marked for Delete";
0:   public static final String MARKED_FOR_UPDATE = "Marked for Update";
0:   public static final String STRING_TYPE = "StringType";
0:   public static final String INTEGER_TYPE = "IntegerType";
0:   public static final String LONG_TYPE = "LongType";
0:   public static final String DOUBLE_TYPE = "DoubleType";
0:   public static final String FLOAT_TYPE = "FloatType";
0:   public static final String DATE_TYPE = "DateType";
0:   public static final String BOOLEAN_TYPE = "BooleanType";
0:   public static final String TIMESTAMP_TYPE = "TimestampType";
0:   public static final String BYTE_TYPE = "ByteType";
0:   public static final String SHORT_TYPE = "ShortType";
0:   public static final String BINARY_TYPE = "BinaryType";
0:   public static final String DECIMAL_TYPE = "DecimalType";
1:   public static final String STRING = "String";
0:   public static final String COLUMNAR = "columnar";
1: 
0:   public static final String INTEGER = "Integer";
1:   public static final String SHORT = "Short";
0:   public static final String NUMERIC = "Numeric";
1:   public static final String TIMESTAMP = "Timestamp";
0:   public static final String ARRAY = "ARRAY";
0:   public static final String STRUCT = "STRUCT";
0:   public static final String INCLUDE = "include";
1:   public static final String FROM = "from";
0:   public static final String WITH = "with";
1:   /**
1:    * FACT_UPDATE_EXTENSION.
1:    */
1:   public static final String FACT_UPDATE_EXTENSION = ".carbondata_update";
1:   public static final String FACT_DELETE_EXTENSION = "_delete";
1:   /**
1:    * MARKED_FOR_UPDATION
1:    */
1:   public static final String FACT_FILE_UPDATED = "update";
1:   /**
1:    * MAX_QUERY_EXECUTION_TIME
1:    */
1:   public static final int DEFAULT_MAX_QUERY_EXECUTION_TIME = 60;
1:   /**
0:    * LOADMETADATA_FILENAME
1:    */
0:   public static final String LOADMETADATA_FILENAME = "tablestatus";
0:   public static final String SUM_DISTINCT = "sum-distinct";
1:   /**
0:    * INMEMORY_REOCRD_SIZE
1:    */
0:   public static final String INMEMORY_REOCRD_SIZE = "carbon.inmemory.record.size";
0:   public static final int INMEMORY_REOCRD_SIZE_DEFAULT = 240000;
1: 
1:   /**
0:    * INMEMORY_REOCRD_SIZE
1:    */
1:   public static final String DETAIL_QUERY_BATCH_SIZE = "carbon.detail.batch.size";
0:   public static final int DETAIL_QUERY_BATCH_SIZE_DEFAULT = 10000;
1:   /**
1:    * SPILL_OVER_DISK_PATH
1:    */
1:   public static final String SCHEMAS_MODIFIED_TIME_FILE = "modifiedTime.mdt";
1:   public static final String DEFAULT_INVISIBLE_DUMMY_MEASURE = "default_dummy_measure";
1:   /**
0:    * max level cache size upto which level cache will be loaded in memory
1:    */
0:   public static final String CARBON_MAX_LEVEL_CACHE_SIZE = "carbon.max.level.cache.size";
1:   /**
0:    * max level cache size default value in GB
1:    */
0:   public static final String CARBON_MAX_LEVEL_CACHE_SIZE_DEFAULT = "-1";
1:   /**
0:    * DOUBLE_VALUE_MEASURE
1:    */
0:   public static final char SUM_COUNT_VALUE_MEASURE = 'n';
1:   /**
0:    * BYTE_VALUE_MEASURE
1:    */
0:   public static final char BYTE_VALUE_MEASURE = 'c';
1:   /**
0:    * BIG_DECIMAL_MEASURE
1:    */
0:   public static final char BIG_DECIMAL_MEASURE = 'b';
1: 
1:   /**
0:    * BIG_INT_MEASURE
1:    */
0:   public static final char BIG_INT_MEASURE = 'l';
1: 
1:   /**
0:    * This determines the size of array to be processed in data load steps. one
0:    * for dimensions , one of ignore dictionary dimensions , one for measures.
1:    */
0:   public static final int ARRAYSIZE = 3;
1:   /**
1:    * CARBON_PREFETCH_BUFFERSIZE
1:    */
0:   public static final int CARBON_PREFETCH_BUFFERSIZE = 20000;
1:   /**
1:    * CARBON_PREFETCH_IN_MERGE
1:    */
1:   public static final boolean CARBON_PREFETCH_IN_MERGE_VALUE = false;
1:   /**
1:    * TEMPWRITEFILEEXTENSION
1:    */
1:   public static final String TEMPWRITEFILEEXTENSION = ".write";
1:   /**
1:    * ENABLE_AUTO_LOAD_MERGE
1:    */
1:   public static final String ENABLE_AUTO_LOAD_MERGE = "carbon.enable.auto.load.merge";
1:   /**
1:    * DEFAULT_ENABLE_AUTO_LOAD_MERGE
1:    */
1:   public static final String DEFAULT_ENABLE_AUTO_LOAD_MERGE = "false";
1: 
1:   /**
1:    * ZOOKEEPER_ENABLE_LOCK if this is set to true then zookeeper will be used to handle locking
1:    * mechanism of carbon
1:    */
1:   public static final String LOCK_TYPE = "carbon.lock.type";
1: 
1:   /**
1:    * ZOOKEEPER_ENABLE_DEFAULT the default value for zookeeper will be true for carbon
1:    */
1:   public static final String LOCK_TYPE_DEFAULT = "LOCALLOCK";
1: 
1:   /**
1:    * ZOOKEEPER_LOCATION this is the location in zookeeper file system where locks are created.
1:    * mechanism of carbon
1:    */
1:   public static final String ZOOKEEPER_LOCATION = "/CarbonLocks";
1: 
1:   /**
1:    * maximum dictionary chunk size that can be kept in memory while writing dictionary file
1:    */
1:   public static final String DICTIONARY_ONE_CHUNK_SIZE = "carbon.dictionary.chunk.size";
1: 
1:   /**
1:    * dictionary chunk default size
1:    */
1:   public static final String DICTIONARY_ONE_CHUNK_SIZE_DEFAULT = "10000";
1: 
1:   /**
1:    * xxhash algorithm property for hashmap
1:    */
1:   public static final String ENABLE_XXHASH = "carbon.enableXXHash";
1: 
1:   /**
1:    * xxhash algorithm property for hashmap. Default value false
1:    */
1:   public static final String ENABLE_XXHASH_DEFAULT = "true";
1: 
1:   /**
0:    * default charset to be used for reading and writing
1:    */
0:   public static final String DEFAULT_CHARSET = "UTF-8";
1: 
1:   /**
1:    * surrogate key that will be sent whenever in the dictionary chunks
1:    * a valid surrogate key is not found for a given dictionary value
1:    */
1:   public static final int INVALID_SURROGATE_KEY = -1;
1: 
1:   /**
1:    * surrogate key for MEMBER_DEFAULT_VAL
1:    */
1:   public static final int MEMBER_DEFAULT_VAL_SURROGATE_KEY = 1;
1: 
1:   public static final String INVALID_SEGMENT_ID = "-1";
1: 
1:   /**
1:    * Size of Major Compaction in MBs
1:    */
0:   public static final String MAJOR_COMPACTION_SIZE = "carbon.major.compaction.size";
1: 
1:   /**
1:    * By default size of major compaction in MBs.
1:    */
0:   public static final String DEFAULT_MAJOR_COMPACTION_SIZE = "1024";
1: 
1:   /**
1:    * This property is used to tell how many segments to be preserved from merging.
1:    */
1:   public static final java.lang.String PRESERVE_LATEST_SEGMENTS_NUMBER =
1:       "carbon.numberof.preserve.segments";
1: 
1:   /**
1:    * If preserve property is enabled then 2 segments will be preserved.
1:    */
1:   public static final String DEFAULT_PRESERVE_LATEST_SEGMENTS_NUMBER = "0";
1: 
1:   /**
1:    * This property will determine the loads of how many days can be compacted.
1:    */
1:   public static final java.lang.String DAYS_ALLOWED_TO_COMPACT = "carbon.allowed.compaction.days";
1: 
1:   /**
1:    * Default value of 1 day loads can be compacted
1:    */
1:   public static final String DEFAULT_DAYS_ALLOWED_TO_COMPACT = "0";
1: 
1:   /**
1:    * space reserved for writing block meta data in carbon data file
1:    */
1:   public static final String CARBON_BLOCK_META_RESERVED_SPACE =
1:       "carbon.block.meta.size.reserved.percentage";
1: 
1:   /**
1:    * default value for space reserved for writing block meta data in carbon data file
1:    */
1:   public static final String CARBON_BLOCK_META_RESERVED_SPACE_DEFAULT = "10";
1: 
1:   /**
1:    * property to enable min max during filter query
1:    */
1:   public static final String CARBON_QUERY_MIN_MAX_ENABLED = "carbon.enableMinMax";
1: 
1:   /**
1:    * default value to enable min or max during filter query execution
1:    */
1:   public static final String MIN_MAX_DEFAULT_VALUE = "true";
1: 
1:   /**
1:    * this variable is to enable/disable prefetch of data during merge sort while
1:    * reading data from sort temp files
1:    */
1:   public static final String CARBON_MERGE_SORT_PREFETCH = "carbon.merge.sort.prefetch";
1:   public static final String CARBON_MERGE_SORT_PREFETCH_DEFAULT = "true";
1: 
1:   /**
0:    *  default name of data base
1:    */
1:   public static final String DATABASE_DEFAULT_NAME = "default";
1: 
0:   // tblproperties
0:   public static final String COLUMN_GROUPS = "column_groups";
1:   public static final String DICTIONARY_EXCLUDE = "dictionary_exclude";
1:   public static final String DICTIONARY_INCLUDE = "dictionary_include";
0:   public static final String PARTITIONCLASS = "partitionclass";
0:   public static final String PARTITIONCOUNT = "partitioncount";
1:   public static final String COLUMN_PROPERTIES = "columnproperties";
1: 
1:   /**
0:    * this variable is to enable/disable identify high cardinality during first data loading
1:    */
0:   public static final String HIGH_CARDINALITY_IDENTIFY_ENABLE =
0:       "high.cardinality.identify.enable";
0:   public static final String HIGH_CARDINALITY_IDENTIFY_ENABLE_DEFAULT = "true";
1: 
1:   /**
0:    * threshold of high cardinality
1:    */
0:   public static final String HIGH_CARDINALITY_THRESHOLD = "high.cardinality.threshold";
0:   public static final String HIGH_CARDINALITY_THRESHOLD_DEFAULT = "1000000";
0:   public static final int HIGH_CARDINALITY_THRESHOLD_MIN = 10000;
1: 
1:   /**
0:    * percentage of cardinality in row count
1:    */
0:   public static final String HIGH_CARDINALITY_IN_ROW_COUNT_PERCENTAGE =
0:       "high.cardinality.row.count.percentage";
0:   public static final String HIGH_CARDINALITY_IN_ROW_COUNT_PERCENTAGE_DEFAULT = "80";
1: 
1:   /**
1:    * 16 mb size
1:    */
0:   public static final long CARBON_16MB = 16*1024*1024;
1:   /**
1:    * 256 mb size
1:    */
0:   public static final long CARBON_256MB = 256*1024*1024;
1: 
1:   /**
0:    * Data type String.
1:    */
0:   public static final String DATATYPE_STRING = "STRING";
1: 
1:   /**
0:    * SEGMENT_COMPACTED is property to indicate whether seg is compacted or not.
1:    */
0:   public static final String SEGMENT_COMPACTED = "Compacted";
1: 
1:   /**
0:    * property for number of core to load the blocks in driver
1:    */
0:   public static final String NUMBER_OF_CORE_TO_LOAD_DRIVER_SEGMENT =
0:       "no.of.cores.to.load.blocks.in.driver";
1:   /**
0:    * default number of cores
1:    */
0:   public static final int NUMBER_OF_CORE_TO_LOAD_DRIVER_SEGMENT_DEFAULT_VALUE = 10;
1: 
1:   /**
1:    * ZOOKEEPERLOCK TYPE
1:    */
0:   public static final String CARBON_LOCK_TYPE_ZOOKEEPER =
0:       "ZOOKEEPERLOCK";
1: 
1:   /**
1:    * LOCALLOCK TYPE
1:    */
0:   public static final String CARBON_LOCK_TYPE_LOCAL =
0:       "LOCALLOCK";
1: 
1:   /**
1:    * HDFSLOCK TYPE
1:    */
0:   public static final String CARBON_LOCK_TYPE_HDFS =
0:       "HDFSLOCK";
1: 
1:   /**
0:    * Lock file in zoo keeper will be of this name.
1:    */
0:   public static final String ZOOKEEPER_LOCK = "zookeeperLock";
1: 
1:   /**
1:    * Invalid filter member log string
1:    */
0:   public static final String FILTER_INVALID_MEMBER = " Invalid Record(s) are present "
0:                                                      + "while filter evaluation. ";
1: 
1:   /**
1:    * Number of unmerged segments to be merged.
1:    */
1:   public static final String COMPACTION_SEGMENT_LEVEL_THRESHOLD =
1:       "carbon.compaction.level.threshold";
1: 
1:   /**
1:    * Default count for Number of segments to be merged in levels is 4,3
1:    */
1:   public static final String DEFAULT_SEGMENT_LEVEL_THRESHOLD = "4,3";
1: 
1:   /**
1:    * default location of the carbon metastore db
1:    */
1:   public static final String METASTORE_LOCATION_DEFAULT_VAL = "../carbon.metastore";
1: 
1:   /**
1:    * hive connection url
1:    */
1:   public static final String HIVE_CONNECTION_URL = "javax.jdo.option.ConnectionURL";
1: 
1:   /**
0:    * Rocord size in case of compaction.
1:    */
0:   public static final int COMPACTION_INMEMORY_RECORD_SIZE = 120000;
1: 
1:   /**
1:    * If the level 2 compaction is done in minor then new compacted segment will end with .2
1:    */
0:   public static String LEVEL2_COMPACTION_INDEX = ".2";
1: 
1:   /**
1:    * Indicates compaction
1:    */
0:   public static String COMPACTION_KEY_WORD = "COMPACTION";
1: 
1:   /**
1:    * hdfs temporary directory key
1:    */
1:   public static final String HDFS_TEMP_LOCATION = "hadoop.tmp.dir";
1: 
1:   /**
1:    * zookeeper url key
1:    */
1:   public static final String ZOOKEEPER_URL = "spark.deploy.zookeeper.url";
1: 
1:   private CarbonCommonConstants() {
1:   }
1: }
1: 
1: 
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:181f0ac
/////////////////////////////////////////////////////////////////////////
1:   @InterfaceStability.Evolving
/////////////////////////////////////////////////////////////////////////
1:    * Which storage level to persist dataset when insert into data
1:    * with 'carbon.insert.persist.enable'='true'
1:    */
1:   @CarbonProperty
1:   @InterfaceStability.Evolving
1:   public static final String CARBON_INSERT_STORAGE_LEVEL =
1:       "carbon.insert.storage.level";
1: 
1:   /**
1:    * The default value(MEMORY_AND_DISK) is the same as the default storage level of Dataset.
1:    * Unlike `RDD.cache()`, the default storage level is set to be `MEMORY_AND_DISK` because
1:    * recomputing the in-memory columnar representation of the underlying table is expensive.
1:    *
1:    * if user's executor has less memory, set the CARBON_INSERT_STORAGE_LEVEL
1:    * to MEMORY_AND_DISK_SER or other storage level to correspond to different environment.
1:    * You can get more recommendations about storage level in spark website:
1:    * http://spark.apache.org/docs/latest/rdd-programming-guide.html#rdd-persistence.
1:    */
1:   public static final String CARBON_INSERT_STORAGE_LEVEL_DEFAULT = "MEMORY_AND_DISK";
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:   @InterfaceStability.Evolving
/////////////////////////////////////////////////////////////////////////
1:   @InterfaceStability.Evolving
/////////////////////////////////////////////////////////////////////////
1:   @InterfaceStability.Evolving
commit:72f50b5
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * The number of invisible segment info which will be preserved in tablestatus file,
1:    * if it exceeds this value, they will be removed and write to tablestatus.history file.
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_INVISIBLE_SEGMENTS_PRESERVE_COUNT =
1:       "carbon.invisible.segments.preserve.count";
1: 
1:   /**
1:    * default value is 200, it means that it will preserve 200 invisible segment info
1:    * in tablestatus file.
1:    * The size of one segment info is about 500 bytes, so the size of tablestatus file
1:    * will remain at 100KB.
1:    */
1:   public static final String CARBON_INVISIBLE_SEGMENTS_PRESERVE_COUNT_DEFAULT = "200";
1: 
commit:0609fc5
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Currently the segment lock files are not deleted immediately when unlock,
1:    * this value indicates the number of hours the segment lock files will be preserved.
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_SEGMENT_LOCK_FILES_PRESERVE_HOURS =
1:       "carbon.segment.lock.files.preserve.hours";
1: 
1:   // default value is 2 days
1:   public static final String CARBON_SEGMENT_LOCK_FILES_PRESERVE_HOURS_DEFAULT = "48";
1: 
commit:d0858b7
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * If the heap memory allocations of the given size is greater or equal than this value,
1:    * it should go through the pooling mechanism.
1:    * But if set this size to -1, it should not go through the pooling mechanism.
1:    * Default value is 1048576(1MB, the same as Spark).
1:    * Unit: byte.
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_HEAP_MEMORY_POOLING_THRESHOLD_BYTES =
1:       "carbon.heap.memory.pooling.threshold.bytes";
1:   public static final String CARBON_HEAP_MEMORY_POOLING_THRESHOLD_BYTES_DEFAULT = "1048576";
1: 
commit:0ab928e
/////////////////////////////////////////////////////////////////////////
1:    * Which storage level to persist dataset when updating data
1:    * with 'carbon.update.persist.enable'='true'
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_UPDATE_STORAGE_LEVEL =
1:       "carbon.update.storage.level";
1: 
1:   /**
1:    * The default value(MEMORY_AND_DISK) is the same as the default storage level of Dataset.
1:    * Unlike `RDD.cache()`, the default storage level is set to be `MEMORY_AND_DISK` because
1:    * recomputing the in-memory columnar representation of the underlying table is expensive.
1:    *
1:    * if user's executor has less memory, set the CARBON_UPDATE_STORAGE_LEVEL
1:    * to MEMORY_AND_DISK_SER or other storage level to correspond to different environment.
1:    * You can get more recommendations about storage level in spark website:
1:    * http://spark.apache.org/docs/latest/rdd-programming-guide.html#rdd-persistence.
1:    */
1:   public static final String CARBON_UPDATE_STORAGE_LEVEL_DEFAULT = "MEMORY_AND_DISK";
1: 
1:   /**
commit:0be69cd
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Which storage level to persist rdd when sort_scope=global_sort
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_GLOBAL_SORT_RDD_STORAGE_LEVEL =
1:       "carbon.global.sort.rdd.storage.level";
1: 
1:   /**
1:    * The default value(MEMORY_ONLY) is designed for executors with big memory, if user's executor
1:    * has less memory, set the CARBON_GLOBAL_SORT_RDD_STORAGE_LEVEL to MEMORY_AND_DISK_SER or
1:    * other storage level to correspond to different environment.
1:    * You can get more recommendations about storage level in spark website:
1:    * http://spark.apache.org/docs/latest/rdd-programming-guide.html#rdd-persistence.
1:    */
1:   public static final String CARBON_GLOBAL_SORT_RDD_STORAGE_LEVEL_DEFAULT = "MEMORY_ONLY";
1: 
author:ndwangsen
-------------------------------------------------------------------------------
commit:685087e
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * The node loads the smallest amount of data
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_LOAD_MIN_SIZE_INMB = "load_min_size_inmb";
1:   public static final String CARBON_LOAD_MIN_NODE_SIZE_INMB_DEFAULT = "256";
1: 
1:   /**
1:    *  the node minimum load data default value
1:    */
1:   public static final int CARBON_LOAD_MIN_SIZE_DEFAULT = 256;
1: 
author:xubo245
-------------------------------------------------------------------------------
commit:b338459
/////////////////////////////////////////////////////////////////////////
1:    * It's timeout threshold of carbon search query
1:    */
1:   @CarbonProperty
1:   @InterfaceStability.Unstable
1:   public static final String CARBON_SEARCH_QUERY_TIMEOUT = "carbon.search.query.timeout";
1: 
1:   /**
1:    * Default value is 10 seconds
1:    */
1:   public static final String CARBON_SEARCH_QUERY_TIMEOUT_DEFAULT = "10s";
1: 
1:   /**
commit:181c280
/////////////////////////////////////////////////////////////////////////
commit:9326cfd
/////////////////////////////////////////////////////////////////////////
1:    * Index file name will end with this extension when update.
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:2c09554
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Configures the parser/writer to limit the length of displayed contents being parsed/written
1:    * in the exception message when an error occurs.
1:    * Here {@code 0} means no exceptions will include the content being manipulated in their
1:    * attributes.
1:    */
1:   public static final int CARBON_ERROR_CONTENT_LENGTH = 0;
commit:0c200d8
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * This property will be used to configure the sqlastbuilder class.
1:    */
1:   public static final String CARBON_SQLASTBUILDER_CLASSNAME =
1:       "spark.carbon.sqlastbuilder.classname";
1: 
commit:be600bc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:    * to enable unsafe column page
1:   public static final String ENABLE_UNSAFE_COLUMN_PAGE = "enable.unsafe.columnpage";
1:    * default value of ENABLE_UNSAFE_COLUMN_PAGE
1:   public static final String ENABLE_UNSAFE_COLUMN_PAGE_DEFAULT = "true";
/////////////////////////////////////////////////////////////////////////
1:   public static final String ENABLE_UNSAFE_SORT_DEFAULT = "true";
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public static final String ENABLE_UNSAFE_IN_QUERY_EXECUTION_DEFAULTVALUE = "true";
commit:473bd31
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:    * minimum required registered resource for starting block distribution
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO =
1:       "carbon.scheduler.minregisteredresourcesratio";
1:   /**
1:    * default minimum required registered resource for starting block distribution
1:    */
1:   public static final String CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO_DEFAULT = "0.8d";
1:   /**
1:    * minimum required registered resource for starting block distribution
1:    */
1:   public static final double CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO_MIN = 0.1d;
1:   /**
1:    * max minimum required registered resource for starting block distribution
1:    */
1:   public static final double CARBON_SCHEDULER_MIN_REGISTERED_RESOURCES_RATIO_MAX = 1.0d;
1: 
1:   /**
1:    * To define how much time scheduler should wait for the
1:    * resource in dynamic allocation.
1:    */
1:   public static final String CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT =
1:       "carbon.dynamicallocation.schedulertimeout";
1: 
1:   /**
1:    * default scheduler wait time
1:    */
1:   public static final String CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT_DEFAULT = "5";
1: 
1:   /**
0:    * default value for executor start up waiting time out
1:    */
1:   public static final int CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT_MIN = 5;
1: 
1:   /**
0:    * Max value. If value configured by user is more than this than this value will value will be
0:    * considered
1:    */
1:   public static final int CARBON_DYNAMIC_ALLOCATION_SCHEDULER_TIMEOUT_MAX = 15;
1: 
1:   /**
0:    * time for which thread will sleep and check again if the requested number of executors
0:    * have been started
1:    */
1:   public static final int CARBON_DYNAMIC_ALLOCATION_SCHEDULER_THREAD_SLEEP_TIME = 250;
1: 
1:   /**
commit:bcf3ca3
/////////////////////////////////////////////////////////////////////////
1: 
1:   public static final int SORT_INTERMEDIATE_FILES_LIMIT_MIN = 2;
1: 
1:   public static final int SORT_INTERMEDIATE_FILES_LIMIT_MAX = 50;
/////////////////////////////////////////////////////////////////////////
1:   public static final int CARBON_SORT_FILE_WRITE_BUFFER_SIZE_MIN = 10240;
1:   public static final int CARBON_SORT_FILE_WRITE_BUFFER_SIZE_MAX = 10485760;
commit:30457c4
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * this will be used to provide comment for table
1:    */
1:   public static final String COLUMN_COMMENT = "comment";
1: 
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * The property to configure the mdt file folder path, earlier it was pointing to the
1:    * fixed carbon store path. This is needed in case of the federation setup when user removes
1:    * the fixedtorepath namesevice
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_UPDATE_SYNC_FOLDER = "carbon.update.sync.folder";
1: 
1:   public static final String CARBON_UPDATE_SYNC_FOLDER_DEFAULT = "/tmp/carbondata";
commit:1a35cfb
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
0:    * ALLUXIO_PREFIX
1:    */
1:   public static final String ALLUXIOURL_PREFIX = "alluxio://";
/////////////////////////////////////////////////////////////////////////
1:    * min value for csv read buffer size
1:    */
1:   public static final int CSV_READ_BUFFER_SIZE_MIN = 10240; //10 kb
0:   /**
1:    * max value for csv read buffer size
1:    */
1:   public static final int CSV_READ_BUFFER_SIZE_MAX = 10485760; // 10 mb
1: 
0:   /**
commit:39644b5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.CarbonProperty;
1: 
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   @CarbonProperty
1:   @CarbonProperty
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   public static final String CARBON_BADRECORDS_LOC_DEFAULT_VAL = "";
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   @CarbonProperty
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   @CarbonProperty
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   @CarbonProperty
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   @CarbonProperty
0:    * percentage of cardinality in row count
0:    */
1:   @CarbonProperty
0:   public static final String HIGH_CARDINALITY_IN_ROW_COUNT_PERCENTAGE =
0:       "high.cardinality.row.count.percentage";
0:   public static final String HIGH_CARDINALITY_IN_ROW_COUNT_PERCENTAGE_DEFAULT = "80";
1: 
0:   /**
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
1:   @CarbonProperty
1:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
0:   @CarbonProperty
0:   @CarbonProperty
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
0:   @CarbonProperty
0:   public static final String LOAD_USE_BATCH_SORT = "carbon.load.use.batch.sort";
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
1:   public static final String LOAD_BATCH_SORT_SIZE_INMB_DEFAULT = "0";
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
0:   @CarbonProperty
0:   @CarbonProperty
commit:3251c89
/////////////////////////////////////////////////////////////////////////
0:   public static final String CARBON_BADRECORDS_LOC_DEFAULT_VAL = "/tmp/carbon/badRecords";
/////////////////////////////////////////////////////////////////////////
1:   public static final String CARBON_BAD_RECORDS_ACTION = "carbon.bad.records.action";
1: 
0:   public static final String CARBON_BAD_RECORDS_ACTION_DEFAULT = "FORCE";
1: 
commit:fc3b616
/////////////////////////////////////////////////////////////////////////
1:   public static final String CARBON_CUSTOM_BLOCK_DISTRIBUTION = "carbon.custom.block.distribution";
0:   public static final String CARBON_CUSTOM_BLOCK_DISTRIBUTION_DEFAULT = "false";
commit:b6ab4ef
/////////////////////////////////////////////////////////////////////////
1:    * max driver lru cache size upto which lru cache will be loaded in memory
1:   public static final String CARBON_MAX_DRIVER_LRU_CACHE_SIZE = "carbon.max.driver.lru.cache.size";
1:    * max executor lru cache size upto which lru cache will be loaded in memory
1:   public static final String CARBON_MAX_EXECUTOR_LRU_CACHE_SIZE =
1:       "carbon.max.executor.lru.cache.size";
0:   /**
1:    * max lru cache size default value in MB
0:    */
1:   public static final String CARBON_MAX_LRU_CACHE_SIZE_DEFAULT = "-1";
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * property to set is IS_DRIVER_INSTANCE
0:    */
1:   public static final String IS_DRIVER_INSTANCE = "is.driver.instance";
commit:781a66c
/////////////////////////////////////////////////////////////////////////
1: 
0:   /**
1:    * LOG_FILE_EXTENSION
0:    */
1:   public static final String LOG_FILE_EXTENSION = ".log";
1: 
commit:fe1b0f0
/////////////////////////////////////////////////////////////////////////
0:   /**
0:    * configure the minimum blocklet size eligible for blocklet distribution
0:    */
0:   public static final String CARBON_BLOCKLETDISTRIBUTION_MIN_REQUIRED_SIZE =
0:       "carbon.blockletdistribution.min.blocklet.size";
1: 
0:   /**
0:    * default blocklet size eligible for blocklet distribution
0:    */
0:   public static final int DEFAULT_CARBON_BLOCKLETDISTRIBUTION_MIN_REQUIRED_SIZE = 2;
1: 
author:SangeetaGulia
-------------------------------------------------------------------------------
commit:5ab0957
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * Access Key for s3n
0:    */
1:   public static final String S3N_ACCESS_KEY = "fs.s3n.awsAccessKeyId";
0:   /**
1:    * Secret Key for s3n
0:    */
1:   public static final String S3N_SECRET_KEY = "fs.s3n.awsSecretAccessKey";
0:   /**
1:    * Access Key for s3
0:    */
1:   public static final String S3_ACCESS_KEY = "fs.s3.awsAccessKeyId";
0:   /**
1:    * Secret Key for s3
0:    */
1:   public static final String S3_SECRET_KEY = "fs.s3.awsSecretAccessKey";
/////////////////////////////////////////////////////////////////////////
1:    * S3LOCK TYPE
0:    */
1:   public static final String CARBON_LOCK_TYPE_S3 = "S3LOCK";
1: 
0:   /**
author:kumarvishal
-------------------------------------------------------------------------------
commit:349be00
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
1:   public static final String SUPPORT_DIRECT_QUERY_ON_DATAMAP =
1:       "carbon.query.directQueryOnDataMap.enabled";
1:   public static final String SUPPORT_DIRECT_QUERY_ON_DATAMAP_DEFAULTVALUE = "false";
1: 
0:   @CarbonProperty
1:   public static final String VALIDATE_DIRECT_QUERY_ON_DATAMAP =
1:       "carbon.query.validate.directqueryondatamap";
1:   public static final String VALIDATE_DIRECT_QUERY_ON_DATAMAP_DEFAULTVALUE = "true";
1: 
commit:27ec651
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
1:   public static final String IN_MEMORY_STORAGE_FOR_SORTED_DATA_IN_MB =
1:       "carbon.sort.storage.inmemory.size.inmb";
1:   public static final String IN_MEMORY_STORAGE_FOR_SORTED_DATA_IN_MB_DEFAULT = "512";
1: 
commit:49763b7
/////////////////////////////////////////////////////////////////////////
0:   public static final String TIMESERIES_EVENTTIME = "timeseries.eventtime";
1: 
0:   public static final String TIMESERIES_HIERARCHY = "timeseries.hierarchy";
1: 
commit:e4f2843
/////////////////////////////////////////////////////////////////////////
0:   public static final String AGGREGATIONDATAMAPSCHEMA = "AggregateDataMapHandler";
1: 
commit:75e0bd4
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * this will be used to pass bitset value in filter to another filter for
1:    * faster execution of filter query
0:    */
0:   @CarbonProperty
1:   public static final String BITSET_PIPE_LINE = "carbon.use.bitset.pipe.line";
1: 
1:   public static final String BITSET_PIPE_LINE_DEFAULT = "true";
1: 
commit:df22368
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
1:   public static final String UNSAFE_WORKING_MEMORY_IN_MB = "carbon.unsafe.working.memory.in.mb";
1:   public static final String UNSAFE_WORKING_MEMORY_IN_MB_DEFAULT = "512";
commit:2cf1104
/////////////////////////////////////////////////////////////////////////
1:   public static final int BLOCKLET_SIZE_MIN_VAL = 2000;
/////////////////////////////////////////////////////////////////////////
1:    * default name of data base
/////////////////////////////////////////////////////////////////////////
0:   public static final String HIGH_CARDINALITY_IDENTIFY_ENABLE = "high.cardinality.identify.enable";
/////////////////////////////////////////////////////////////////////////
1:   public static final String CARBON_LOCK_TYPE_ZOOKEEPER = "ZOOKEEPERLOCK";
1:   public static final String CARBON_LOCK_TYPE_LOCAL = "LOCALLOCK";
1:   public static final String CARBON_LOCK_TYPE_HDFS = "HDFSLOCK";
1:   public static final String FILTER_INVALID_MEMBER =
1:       " Invalid Record(s) are present while filter evaluation. ";
/////////////////////////////////////////////////////////////////////////
1:       "carbon.horizontal.update.compaction.threshold";
1:   public static final String DELETE_DELTAFILE_COUNT_THRESHOLD_IUD_COMPACTION =
/////////////////////////////////////////////////////////////////////////
0:   public static String ENABLE_CONCURRENT_COMPACTION = "carbon.concurrent.compaction";
/////////////////////////////////////////////////////////////////////////
1:   public static final String CARBON_DATA_FILE_DEFAULT_VERSION = "V3";
1: 
/////////////////////////////////////////////////////////////////////////
commit:f94bae5
/////////////////////////////////////////////////////////////////////////
0:   public static final char BIG_INT_MEASURE = 'd';
commit:ea04fce
/////////////////////////////////////////////////////////////////////////
1: 
0:   /**
1:    * CARBON_DATE_DEFAULT_FORMAT
0:    */
1:   public static final String CARBON_DATE_DEFAULT_FORMAT = "yyyy-MM-dd";
0:   /**
1:    * CARBON_DATE_DEFAULT_FORMAT
0:    */
1:   public static final String CARBON_DATE_FORMAT = "carbon.date.format";
commit:8d9babe
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * property for enabling unsafe based query processing
0:    */
1:   public static final String ENABLE_UNSAFE_IN_QUERY_EXECUTION = "enable.unsafe.in.query.processing";
1: 
0:   /**
1:    * default property of unsafe processing
0:    */
0:   public static final String ENABLE_UNSAFE_IN_QUERY_EXECUTION_DEFAULTVALUE = "false";
1: 
0:   /**
0:    * property for offheap based processing
0:    */
0:   public static final String USE_OFFHEAP_IN_QUERY_PROCSSING = "use.offheap.in.query.processing";
1: 
0:   /**
0:    * default value of offheap based processing
0:    */
0:   public static final String USE_OFFHEAP_IN_QUERY_PROCSSING_DEFAULT = "true";
1: 
commit:d54dc64
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * carbon data file version property
0:    */
1:   public static final String CARBON_DATA_FILE_VERSION = "carbon.data.file.version";
0:   /**
1:    * current data file version
0:    */
0:   public static final short CARBON_DATA_FILE_DEFAULT_VERSION = 2;
0:   /**
0:    * number of column data will read in IO operation
0:    * during query execution
0:    */
0:   public static final short NUMBER_OF_COLUMN_READ_IN_IO = 10;
0:   /**
1:    * data file version header
0:    */
1:   public static final String CARBON_DATA_VERSION_HEADER = "CARBONDATAVERSION#";
commit:041dab0
/////////////////////////////////////////////////////////////////////////
0:   public static String ENABLE_BLOCKLET_DISTRIBUTION_DEFAULTVALUE = "false";
commit:e1f217a
/////////////////////////////////////////////////////////////////////////
0:   /**
0:    * to enable blocklet distribution
0:    */
0:   public static String ENABLE_BLOCKLET_DISTRIBUTION = "enable.blocklet.distribution";
1: 
0:   /**
0:    * to enable blocklet distribution default value
0:    */
0:   public static String ENABLE_BLOCKLET_DISTRIBUTION_DEFAULTVALUE = "true";
1: 
author:Manohar
-------------------------------------------------------------------------------
commit:ab76347
/////////////////////////////////////////////////////////////////////////
1:    * If we are executing insert into query from source table using select statement
1:    * & loading the same source table concurrently, when select happens on source table
1:    * during the data load , it gets new record for which dictionary is not generated,
1:    * So there will be inconsistency. To avoid this condition we can persist the dataframe
1:    * into MEMORY_AND_DISK and perform insert into operation. By default this value
1:    * will be false because no need to persist the dataframe in all cases. If user want
1:    * to run load and insert queries on source table concurrently then user can enable this flag
0:    */
0:   @CarbonProperty
1:   public static final String CARBON_INSERT_PERSIST_ENABLED = "carbon.insert.persist.enable";
1: 
0:   /**
1:    * by default rdd will not be persisted in the insert case.
1: 
0:    */
1:   public static final String CARBON_INSERT_PERSIST_ENABLED_DEFAULT = "false";
1: 
0:   /**
commit:7250ff1
/////////////////////////////////////////////////////////////////////////
1:   public static final String CARBON_SESSIONSTATE_CLASSNAME = "spark.carbon.sessionstate.classname";
1: 
author:QiangCai
-------------------------------------------------------------------------------
commit:a51ad30
/////////////////////////////////////////////////////////////////////////
1:    * enable auto handoff streaming segment
0:    */
1:   public static final String ENABLE_AUTO_HANDOFF = "carbon.streaming.auto.handoff.enabled";
1: 
1:   public static final String ENABLE_AUTO_HANDOFF_DEFAULT = "true";
1: 
0:   /**
commit:694ee77
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
0:   public static final String CARBON_COMBINE_SMALL_INPUT_FILES = "carbon.mergeSmallFileRead.enable";
0:   public static final String CARBON_COMBINE_SMALL_INPUT_FILES_DEFAULT = "false";
1: 
commit:0f407de
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * if the byte size of streaming segment reach this value,
1:    * the system will create a new stream segment
0:    */
1:   public static final String HANDOFF_SIZE = "carbon.streaming.segment.max.size";
1: 
0:   /**
1:    * the min handoff size of streaming segment, the unit is byte
0:    */
1:   public static final long HANDOFF_SIZE_MIN = 1024L * 1024 * 64;
1: 
0:   /**
1:    * the default handoff size of streaming segment, the unit is byte
0:    */
1:   public static final long HANDOFF_SIZE_DEFAULT = 1024L * 1024 * 1024;
1: 
commit:40c31e8
/////////////////////////////////////////////////////////////////////////
1:    * default load time of the segment
0:    */
1:   public static final long SEGMENT_LOAD_TIME_DEFAULT = -1;
1: 
0:   /**
commit:d7393da
/////////////////////////////////////////////////////////////////////////
1: 
0:   /**
0:    * STORE_LOADSTATUS_STREAMING
0:    */
0:   public static final String STORE_LOADSTATUS_STREAMING = "Streaming";
1: 
0:   /**
0:    * STORE_LOADSTATUS_STREAMING
0:    */
0:   public static final String STORE_LOADSTATUS_STREAMING_FINISH = "Streaming Finish";
commit:0158968
/////////////////////////////////////////////////////////////////////////
commit:9f94529
/////////////////////////////////////////////////////////////////////////
1:   public static final String SORT_COLUMNS = "sort_columns";
commit:c5aba5f
/////////////////////////////////////////////////////////////////////////
1:   public static final String CARBON_SORT_FILE_WRITE_BUFFER_SIZE_DEFAULT_VALUE = "16384";
/////////////////////////////////////////////////////////////////////////
0: 
1:   public static final String CARBON_PREFETCH_BUFFERSIZE = "carbon.prefetch.buffersize";
0:   /**
1:    * CARBON_PREFETCH_BUFFERSIZE DEFAULT VALUE
0:    */
1:   public static final String CARBON_PREFETCH_BUFFERSIZE_DEFAULT = "1000";
commit:256dbed
/////////////////////////////////////////////////////////////////////////
1:   public static final long CARBON_16MB = 16 * 1024 * 1024;
1:   public static final long CARBON_256MB = 256 * 1024 * 1024;
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Jin Zhou
-------------------------------------------------------------------------------
commit:f1c6ddd
/////////////////////////////////////////////////////////////////////////
1:   public static final String CARBON_MAJOR_COMPACTION_SIZE = "carbon.major.compaction.size";
1:   public static final String DEFAULT_CARBON_MAJOR_COMPACTION_SIZE = "1024";
/////////////////////////////////////////////////////////////////////////
1:   // table property name of major compaction size
1:   public static final String TABLE_MAJOR_COMPACTION_SIZE = "major_compaction_size";
1:   // table property name of auto load merge
1:   public static final String TABLE_AUTO_LOAD_MERGE = "auto_load_merge";
1:   // table property name of compaction level threshold
1:   public static final String TABLE_COMPACTION_LEVEL_THRESHOLD = "compaction_level_threshold";
1:   // table property name of preserve segments numbers while compaction
1:   public static final String TABLE_COMPACTION_PRESERVE_SEGMENTS = "compaction_preserve_segments";
1:   // table property name of allowed compaction days while compaction
1:   public static final String TABLE_ALLOWED_COMPACTION_DAYS = "allowed_compaction_days";
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
0:   @CarbonProperty
1:   public static final String CARBON_SECURE_DICTIONARY_SERVER =
1:       "carbon.secure.dictionary.server";
0: 
1:   public static final String CARBON_SECURE_DICTIONARY_SERVER_DEFAULT = "true";
0: 
author:rahulforallp
-------------------------------------------------------------------------------
commit:fd0bdf6
/////////////////////////////////////////////////////////////////////////
0: 
0:   /**
1:    * set the segment ids to query from the table
0:    */
1:   public static final String CARBON_INPUT_SEGMENTS = "carbon.input.segments.";
0: 
author:Pawan Malwal
-------------------------------------------------------------------------------
commit:4673113
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * this will be used to provide comment for table
0:    */
1:   public static final String TABLE_COMMENT = "comment";
0: 
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:133b303
/////////////////////////////////////////////////////////////////////////
0: 
commit:dd42277
/////////////////////////////////////////////////////////////////////////
1:   public static final String CARBON_IMPLICIT_COLUMN_SEGMENTID = "segId";
commit:887310f
/////////////////////////////////////////////////////////////////////////
0:   public static final String CARBON_USE_BLOCKLET_DISTRIBUTION = "carbon.blocklet.distribution";
0: 
0:   public static final String CARBON_USE_BLOCKLET_DISTRIBUTION_DEFAULT = "true";
0: 
commit:1e21cd1
/////////////////////////////////////////////////////////////////////////
1:   public static final String USE_DISTRIBUTED_DATAMAP = "carbon.enable.distributed.datamap";
0: 
1:   public static final String USE_DISTRIBUTED_DATAMAP_DEFAULT = "false";
0: 
commit:aadbd5c
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * There is more often that in production uses different drivers for load and queries. So in case
1:    * of load driver user should set this property to enable loader specific clean up.
0:    */
1:   public static final String DATA_MANAGEMENT_DRIVER = "spark.carbon.datamanagement.driver";
0: 
0:   public static final String DATA_MANAGEMENT_DRIVER_DEFAULT = "false";
0: 
commit:c3b2666
/////////////////////////////////////////////////////////////////////////
author:lionelcao
-------------------------------------------------------------------------------
commit:874764f
/////////////////////////////////////////////////////////////////////////
1:    * Number of cores to be used while alter partition
0:    */
1:   public static final String NUM_CORES_ALT_PARTITION = "carbon.number.of.cores.while.altPartition";
0:   /**
/////////////////////////////////////////////////////////////////////////
1:    * Indicates alter partition
0:    */
0:   public static String ALTER_PARTITION_KEY_WORD = "ALTER_PARTITION";
0: 
0:   /**
commit:dae342b
/////////////////////////////////////////////////////////////////////////
1:   public static final String PARTITION_TYPE = "partition_type";
1:   public static final String NUM_PARTITIONS = "num_partitions";
1:   public static final String RANGE_INFO = "range_info";
1:   public static final String LIST_INFO = "list_info";
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
commit:7359601
/////////////////////////////////////////////////////////////////////////
0:    * to enable unsafe column page in write step
0:    */
0:   public static final String ENABLE_UNSAFE_COLUMN_PAGE_LOADING = "enable.unsafe.columnpage";
0: 
0:   /**
0:    * default value of ENABLE_UNSAFE_COLUMN_PAGE_LOADING
0:    */
0:   public static final String ENABLE_UNSAFE_COLUMN_PAGE_LOADING_DEFAULT = "false";
0: 
0:   /**
commit:98df130
/////////////////////////////////////////////////////////////////////////
commit:8cca0af
/////////////////////////////////////////////////////////////////////////
0:   public static final char DOUBLE_MEASURE = 'n';
commit:00e902c
/////////////////////////////////////////////////////////////////////////
1:   public static final String ENABLE_VECTOR_READER_DEFAULT = "true";
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:25b4ba2
/////////////////////////////////////////////////////////////////////////
0: 
0:   /**
1:    * compressor for writing/reading carbondata file
0:    */
1:   public static final String COMPRESSOR = "carbon.column.compressor";
0: 
0:   /**
1:    * default compressor is snappy
0:    */
1:   public static final String DEFAULT_COMPRESSOR = "snappy";
0: 
commit:0ef3fb8
/////////////////////////////////////////////////////////////////////////
0:   public static final String CARBON_DATA_FILE_DEFAULT_VERSION = "V2";
author:Yadong Qi
-------------------------------------------------------------------------------
commit:82741c1
/////////////////////////////////////////////////////////////////////////
1:    * If set to GLOBAL_SORT, the sorting scope is bigger and one index tree per task will be
1:    * created, thus loading is slower but query is faster.
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * The Number of partitions to use when shuffling data for sort. If user don't configurate or
1:    * configurate it less than 1, it uses the number of map tasks as reduce tasks. In general, we
1:    * recommend 2-3 tasks per CPU core in your cluster.
0:    */
1:   public static final String LOAD_GLOBAL_SORT_PARTITIONS = "carbon.load.global.sort.partitions";
0: 
1:   public static final String LOAD_GLOBAL_SORT_PARTITIONS_DEFAULT = "0";
0: 
author:nareshpr
-------------------------------------------------------------------------------
commit:35739e5
/////////////////////////////////////////////////////////////////////////
1:   public static final String SPARK_SCHEMA_STRING_LENGTH_THRESHOLD =
1:       "spark.sql.sources.schemaStringLengthThreshold";
0: 
1:   public static final int SPARK_SCHEMA_STRING_LENGTH_THRESHOLD_DEFAULT = 4000;
0: 
commit:ff84a2e
/////////////////////////////////////////////////////////////////////////
1:   public static final String CARBON_IMPLICIT_COLUMN_POSITIONID = "positionId";
1:   public static final String CARBON_IMPLICIT_COLUMN_TUPLEID = "tupleId";
1:   public static final String POSITION_REFERENCE = "positionReference";
0:   /**
1:    * implicit column which will be added to each carbon table
0:    */
1:   public static final String POSITION_ID = "positionId";
0:   /**
0:    * max driver lru cache size upto which lru cache will be loaded in memory
0:    */
0:   public static final String CARBON_MAX_LEVEL_CACHE_SIZE = "carbon.max.level.cache.size";
author:akash
-------------------------------------------------------------------------------
commit:9e11e13
/////////////////////////////////////////////////////////////////////////
1:    * BAD_RECORD_KEY_VALUE
0:    */
1:   public static final String BAD_RECORD_KEY = "BADRECORD";
0:   /**
author:chenliang613
-------------------------------------------------------------------------------
commit:374b00f
/////////////////////////////////////////////////////////////////////////
1:    * Property for specifying the format of TIMESTAMP data type column.
1:    * e.g. yyyy/MM/dd HH:mm:ss, or using CARBON_TIMESTAMP_DEFAULT_FORMAT
/////////////////////////////////////////////////////////////////////////
1:    * Property for specifying the format of DATE data type column.
1:    * e.g. yyyy/MM/dd , or using CARBON_DATE_DEFAULT_FORMAT
author:Zhangshunyu
-------------------------------------------------------------------------------
commit:96a75b3
/////////////////////////////////////////////////////////////////////////
1:   // set in column level to disable inverted index
1:   public static final String NO_INVERTED_INDEX = "no_inverted_index";
commit:793d690
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
1:   public static final String BLOCK_SIZE_DEFAULT_VAL = "1024";
0: 
1:   public static final int BLOCK_SIZE_MIN_VAL = 1;
0: 
1:   public static final int BLOCK_SIZE_MAX_VAL = 2048;
/////////////////////////////////////////////////////////////////////////
1:   public static final String TABLE_BLOCKSIZE = "table_blocksize";
commit:8e75531
/////////////////////////////////////////////////////////////////////////
0:    * HDFSURL_PREFIX
0:    */
1:   public static final String HDFSURL_PREFIX = "hdfs://";
0:   /**
1:    * FS_DEFAULT_FS
0:    */
1:   public static final String FS_DEFAULT_FS = "fs.defaultFS";
0:   /**
author:hexiaoqiao
-------------------------------------------------------------------------------
commit:d024b9f
/////////////////////////////////////////////////////////////////////////
0:    * VIEWFSURL_PREFIX
0:    */
1:   public static final String VIEWFSURL_PREFIX = "viewfs://";
0:   /**
author:ravikiran
-------------------------------------------------------------------------------
commit:9f99dfb
/////////////////////////////////////////////////////////////////////////
1:   public static final String MINOR = "minor";
0: 
1:   public static final String MAJOR = "major";
0: 
commit:8dda2a8
/////////////////////////////////////////////////////////////////////////
0: 
0:   /**
0:    * maximum length of column
0:    */
0:   public static final int DEFAULT_COLUMN_LENGTH = 100000;
0: 
commit:9702f7a
/////////////////////////////////////////////////////////////////////////
1:    * @Deprecated : This property has been deprecated.
/////////////////////////////////////////////////////////////////////////
0:   public static String DEFAULT_ENABLE_CONCURRENT_COMPACTION = "true";
commit:ffbb359
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * File created in case of minor compaction request
0:    */
0:   public static String minorCompactionRequiredFile = "compactionRequired_minor";
0: 
0:   /**
1:    * File created in case of major compaction request
0:    */
0:   public static String majorCompactionRequiredFile = "compactionRequired_major";
0: 
0:   /**
1:    * Property for enabling system level compaction lock.1 compaction can run at once.
0:    */
0:   public static String ENABLE_CONCURRENT_COMPACTION =
0:       "carbon.concurrent.compaction";
0: 
0:   /**
1:    * Default value of Property for enabling system level compaction lock.1 compaction can run
1:    * at once.
0:    */
0:   public static String DEFAULT_ENABLE_CONCURRENT_COMPACTION = "false";
0: 
0:   /**
1:    * Compaction system level lock folder.
0:    */
0:   public static String SYSTEM_LEVEL_COMPACTION_LOCK_FOLDER = "SystemCompactionLock";
0: 
author:ManoharVanam
-------------------------------------------------------------------------------
commit:3e045d8
/////////////////////////////////////////////////////////////////////////
0: 
0:   /**
1:    * DELETE_DELTA_FILE_EXT
0:    */
1:   public static final String DELETE_DELTA_FILE_EXT = ".deletedelta";
0: 
0:   /**
1:    * UPDATE_DELTA_FILE_EXT
0:    */
1:   public static final String UPDATE_DELTA_FILE_EXT = FACT_FILE_EXT;
/////////////////////////////////////////////////////////////////////////
0:    * LOAD_STATUS UPDATE
0:    */
0:   public static final String STORE_LOADSTATUS_UPDATE = "Update";
0:   /**
/////////////////////////////////////////////////////////////////////////
0:    * LOAD_STATUS
0:    */
0:   public static final String CARBON_DEFAULT_STREAM_ENCODEFORMAT = "UTF-8";
0:   /**
/////////////////////////////////////////////////////////////////////////
0: 
0:   /**
1:    * CARBON_TIMESTAMP
0:    */
1:   public static final String CARBON_TIMESTAMP_MILLIS = "dd-MM-yyyy HH:mm:ss:SSS";
/////////////////////////////////////////////////////////////////////////
0:   public static final String FACT_UPDATE_EXTENSION = ".carbondata_update";
/////////////////////////////////////////////////////////////////////////
1:    * TABLE UPDATE STATUS FILENAME
0:    */
1:   public static final String TABLEUPDATESTATUS_FILENAME = "tableupdatestatus";
0:   /**
/////////////////////////////////////////////////////////////////////////
0:    * COMPACTED is property to indicate whether seg is compacted or not.
0:   public static final String COMPACTED = "Compacted";
/////////////////////////////////////////////////////////////////////////
1:    * Number of Update Delta files which is the Threshold for IUD compaction.
1:    * Only accepted Range is 0 - 10000. Outside this range system will pick default value.
0:    */
1:   public static final String UPDATE_DELTAFILE_COUNT_THRESHOLD_IUD_COMPACTION =
0:           "carbon.horizontal.update.compaction.threshold";
0:   /**
1:    * Default count of segments which act as a threshold for IUD compaction merge.
0:    */
1:   public static final String DEFAULT_UPDATE_DELTAFILE_COUNT_THRESHOLD_IUD_COMPACTION = "1";
0: 
0: 
0:   /**
1:    * Number of Delete Delta files which is the Threshold for IUD compaction.
1:    * Only accepted Range is 0 - 10000. Outside this range system will pick default value.
0:    */
0:   public static final String DELETE_DELTAFILE_COUNT_THRESHOLD_IUD_COMPACTION  =
1:       "carbon.horizontal.delete.compaction.threshold";
0:   /**
1:    * Default count of segments which act as a threshold for IUD compaction merge.
0:    */
1:   public static final String DEFAULT_DELETE_DELTAFILE_COUNT_THRESHOLD_IUD_COMPACTION = "1";
0: 
0: 
0:   /**
/////////////////////////////////////////////////////////////////////////
0: 
0:  /**
0:    * property to set is IS_DRIVER_INSTANCE
0:    */
1:   public static final String UPDATE_INDEX_FILE_EXT = ".carbonindex";
0: 
0:   /**
1:    * Key word for true
0:    */
1:   public static final String KEYWORD_TRUE = "TRUE";
0: 
0:   /**
1:    * Key word for false
0:    */
1:   public static final String KEYWORD_FALSE = "FALSE";
0: 
0:   /**
1:    * hyphen
0:    */
1:   public static final String HYPHEN = "-";
0: 
0:   /**
1:    * columns which gets updated in update will have header ends with this extension.
0:    */
0:   public static String UPDATED_COL_EXTENSION = "-updatedColumn";
0: 
0:   /**
1:    * appending the key to differentiate the update flow with insert flow.
0:    */
0:   public static String RDDUTIL_UPDATE_KEY = "UPDATE_";
0: 
0:   /**
1:    * to determine to use the rdd persist or not.
0:    */
0:   public static String isPersistEnabled = "carbon.update.persist.enable";
0: 
0:   /**
1:    * for enabling or disabling Horizontal Compaction.
0:    */
0:   public static String isHorizontalCompactionEnabled = "carbon.horizontal.compaction.enable";
0: 
0:   /**
1:    * Default value for HorizontalCompaction is true.
0:    */
0:   public static String defaultIsHorizontalCompactionEnabled = "true";
0: 
0:   /**
1:    * by default rdd will be persisted in the update case.
0:    */
0:   public static String defaultValueIsPersistEnabled = "true";
0: 
author:Jay357089
-------------------------------------------------------------------------------
commit:fc1d620
/////////////////////////////////////////////////////////////////////////
1:    * Windows File separator
0:    */
1:   public static final String WINDOWS_FILE_SEPARATOR = "\\";
0:   /**
commit:cd61beb
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * default block size in MB
0:    */
0:   /**
1:    * min block size in MB
0:    */
0:   /**
1:    * max block size in MB
0:    */
/////////////////////////////////////////////////////////////////////////
1:   // table block size in MB
author:qiuheng
-------------------------------------------------------------------------------
commit:0df4c8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:ashok.blend
-------------------------------------------------------------------------------
commit:5f1abef
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * Maximum no of column supported
0:    */
0:   public static int DEFAULT_MAX_NUMBER_OF_COLUMNS = 20000;
0: 
0:   /**
0:    * maximum length of column
0:    */
0:   public static final int DEFAULT_COLUMN_LENGTH = 100000;
author:foryou2030
-------------------------------------------------------------------------------
commit:395f4a6
/////////////////////////////////////////////////////////////////////////
1:    * ENABLE_QUERY_STATISTICS
0:    */
1:   public static final String ENABLE_QUERY_STATISTICS = "enable.query.statistics";
0:   /**
1:    * ENABLE_QUERY_STATISTICS_DEFAULT
0:    */
1:   public static final String ENABLE_QUERY_STATISTICS_DEFAULT = "false";
0:   /**
commit:fa722bd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:40595a9
/////////////////////////////////////////////////////////////////////////
commit:6187b13
/////////////////////////////////////////////////////////////////////////
0:    * DEFAULT_COLUMN_NAME
0:   public static final String DEFAULT_COLUMN_NAME = "@NU#LL$!COLUMN";
============================================================================