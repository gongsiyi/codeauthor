1:03a735b: /*
1:03a735b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:03a735b:  * contributor license agreements.  See the NOTICE file distributed with
1:03a735b:  * this work for additional information regarding copyright ownership.
1:03a735b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:03a735b:  * (the "License"); you may not use this file except in compliance with
1:03a735b:  * the License.  You may obtain a copy of the License at
1:03a735b:  *
1:03a735b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:03a735b:  *
1:03a735b:  * Unless required by applicable law or agreed to in writing, software
1:03a735b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:03a735b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:03a735b:  * See the License for the specific language governing permissions and
1:03a735b:  * limitations under the License.
1:03a735b:  */
1:03a735b: 
1:03a735b: package org.apache.carbondata.core.profiler;
1:03a735b: 
1:03a735b: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:c0de9f1: import org.apache.carbondata.core.datamap.dev.expr.DataMapWrapperSimpleInfo;
1:03a735b: 
1:03a735b: /**
1:03a735b:  * Used for EXPLAIN command
1:03a735b:  */
1:03a735b: @InterfaceAudience.Internal
1:03a735b: public class TablePruningInfo {
1:03a735b: 
1:22958d9:   private int totalBlocks;
1:03a735b:   private int totalBlocklets;
1:03a735b:   private String filterStatement;
1:3cbabcd:   private boolean showPruningInfo;
1:03a735b: 
1:22958d9:   private int numBlocksAfterDefaultPruning;
1:3cbabcd:   private int numBlockletsAfterDefaultPruning = 0;
1:03a735b: 
1:c0de9f1:   private DataMapWrapperSimpleInfo cgDataMap;
1:22958d9:   private int numBlocksAfterCGPruning;
1:03a735b:   private int numBlockletsAfterCGPruning;
1:03a735b: 
1:c0de9f1:   private DataMapWrapperSimpleInfo fgDataMap;
1:22958d9:   private int numBlocksAfterFGPruning;
1:03a735b:   private int numBlockletsAfterFGPruning;
1:03a735b: 
1:22958d9:   void addTotalBlocks(int numBlocks) {
1:22958d9:     this.totalBlocks += numBlocks;
1:22958d9:   }
1:22958d9: 
1:03a735b:   void addTotalBlocklets(int numBlocklets) {
1:03a735b:     this.totalBlocklets += numBlocklets;
3:03a735b:   }
1:03a735b: 
1:03a735b:   void setFilterStatement(String filterStatement) {
1:03a735b:     this.filterStatement = filterStatement;
1:03a735b:   }
1:03a735b: 
1:3cbabcd:   void setShowPruningInfo(boolean showPruningInfo) {
1:3cbabcd:     this.showPruningInfo = showPruningInfo;
1:3cbabcd:   }
1:3cbabcd: 
1:22958d9:   void setNumBlocksAfterDefaultPruning(int numBlocks) {
1:22958d9:     this.numBlocksAfterDefaultPruning = numBlocks;
1:22958d9:   }
1:22958d9: 
1:22958d9:   /**
1:22958d9:    * To get blocklet number no matter what cache level(block/blocklet) it is,
1:22958d9:    * we accumulate blocklet number in default datamap instead of setting it
1:22958d9:    * in CarbonInputFormat
1:22958d9:    */
1:3cbabcd:   void addNumBlockletsAfterDefaultPruning(int numBlocklets) {
1:3cbabcd:     this.numBlockletsAfterDefaultPruning += numBlocklets;
1:03a735b:   }
1:03a735b: 
1:c0de9f1:   void setNumBlockletsAfterCGPruning(DataMapWrapperSimpleInfo dataMapWrapperSimpleInfo,
1:22958d9:       int numBlocklets, int numBlocks) {
1:c0de9f1:     this.cgDataMap = dataMapWrapperSimpleInfo;
1:22958d9:     this.numBlocksAfterCGPruning = numBlocks;
1:03a735b:     this.numBlockletsAfterCGPruning = numBlocklets;
1:03a735b:   }
1:03a735b: 
1:c0de9f1:   void setNumBlockletsAfterFGPruning(DataMapWrapperSimpleInfo dataMapWrapperSimpleInfo,
1:22958d9:       int numBlocklets, int numBlocks) {
1:c0de9f1:     this.fgDataMap = dataMapWrapperSimpleInfo;
1:22958d9:     this.numBlocksAfterFGPruning = numBlocks;
1:03a735b:     this.numBlockletsAfterFGPruning = numBlocklets;
1:03a735b:   }
1:03a735b: 
1:03a735b:   @Override
1:03a735b:   public String toString() {
1:3cbabcd:     if (showPruningInfo) {
1:3cbabcd:       StringBuilder builder = new StringBuilder();
1:3cbabcd:       builder
1:22958d9:           .append(" - total: ").append(totalBlocks).append(" blocks, ")
1:22958d9:           .append(totalBlocklets).append(" blocklets").append("\n")
1:3cbabcd:           .append(" - filter: ").append(filterStatement).append("\n");
1:22958d9:       int skipBlocks = totalBlocks - numBlocksAfterDefaultPruning;
1:03a735b:       int skipBlocklets = totalBlocklets - numBlockletsAfterDefaultPruning;
4:03a735b:       builder
1:03a735b:           .append(" - pruned by Main DataMap").append("\n")
1:22958d9:           .append("    - skipped: ").append(skipBlocks).append(" blocks, ")
1:22958d9:           .append(skipBlocklets).append(" blocklets").append("\n");
1:3cbabcd:       if (cgDataMap != null) {
1:22958d9:         skipBlocks = numBlocksAfterDefaultPruning - numBlocksAfterCGPruning;
1:3cbabcd:         skipBlocklets = numBlockletsAfterDefaultPruning - numBlockletsAfterCGPruning;
1:3cbabcd:         builder
1:3cbabcd:             .append(" - pruned by CG DataMap").append("\n")
1:3cbabcd:             .append("    - name: ").append(cgDataMap.getDataMapWrapperName()).append("\n")
1:3cbabcd:             .append("    - provider: ").append(cgDataMap.getDataMapWrapperProvider()).append("\n")
1:22958d9:             .append("    - skipped: ").append(skipBlocks).append(" blocks, ")
1:22958d9:             .append(skipBlocklets).append(" blocklets").append("\n");;
1:03a735b:       }
1:3cbabcd:       if (fgDataMap != null) {
1:3cbabcd:         if (numBlockletsAfterCGPruning != 0) {
1:22958d9:           skipBlocks = numBlocksAfterCGPruning - numBlocksAfterFGPruning;
1:3cbabcd:           skipBlocklets = numBlockletsAfterCGPruning - numBlockletsAfterFGPruning;
1:3cbabcd:         } else {
1:22958d9:           skipBlocks = numBlocksAfterDefaultPruning - numBlocksAfterFGPruning;
1:3cbabcd:           skipBlocklets = numBlockletsAfterDefaultPruning - numBlockletsAfterFGPruning;
1:3cbabcd:         }
1:3cbabcd:         builder
1:3cbabcd:             .append(" - pruned by FG DataMap").append("\n")
1:3cbabcd:             .append("    - name: ").append(fgDataMap.getDataMapWrapperName()).append("\n")
1:3cbabcd:             .append("    - provider: ").append(fgDataMap.getDataMapWrapperProvider()).append("\n")
1:22958d9:             .append("    - skipped: ").append(skipBlocks).append(" blocks, ")
1:22958d9:             .append(skipBlocklets).append(" blocklets").append("\n");;
1:3cbabcd:       }
1:3cbabcd:       return builder.toString();
1:3cbabcd:     } else {
1:3cbabcd:       return "";
1:03a735b:     }
1:03a735b:   }
1:03a735b: }
============================================================================
author:Manhua
-------------------------------------------------------------------------------
commit:22958d9
/////////////////////////////////////////////////////////////////////////
1:   private int totalBlocks;
1:   private int numBlocksAfterDefaultPruning;
1:   private int numBlocksAfterCGPruning;
1:   private int numBlocksAfterFGPruning;
1:   void addTotalBlocks(int numBlocks) {
1:     this.totalBlocks += numBlocks;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   void setNumBlocksAfterDefaultPruning(int numBlocks) {
1:     this.numBlocksAfterDefaultPruning = numBlocks;
1:   }
1: 
1:   /**
1:    * To get blocklet number no matter what cache level(block/blocklet) it is,
1:    * we accumulate blocklet number in default datamap instead of setting it
1:    * in CarbonInputFormat
1:    */
1:       int numBlocklets, int numBlocks) {
1:     this.numBlocksAfterCGPruning = numBlocks;
1:       int numBlocklets, int numBlocks) {
1:     this.numBlocksAfterFGPruning = numBlocks;
/////////////////////////////////////////////////////////////////////////
1:           .append(" - total: ").append(totalBlocks).append(" blocks, ")
1:           .append(totalBlocklets).append(" blocklets").append("\n")
1:       int skipBlocks = totalBlocks - numBlocksAfterDefaultPruning;
1:           .append("    - skipped: ").append(skipBlocks).append(" blocks, ")
1:           .append(skipBlocklets).append(" blocklets").append("\n");
1:         skipBlocks = numBlocksAfterDefaultPruning - numBlocksAfterCGPruning;
1:             .append("    - skipped: ").append(skipBlocks).append(" blocks, ")
1:             .append(skipBlocklets).append(" blocklets").append("\n");;
1:           skipBlocks = numBlocksAfterCGPruning - numBlocksAfterFGPruning;
1:           skipBlocks = numBlocksAfterDefaultPruning - numBlocksAfterFGPruning;
1:             .append("    - skipped: ").append(skipBlocks).append(" blocks, ")
1:             .append(skipBlocklets).append(" blocklets").append("\n");;
commit:3cbabcd
/////////////////////////////////////////////////////////////////////////
1:   private boolean showPruningInfo;
1:   private int numBlockletsAfterDefaultPruning = 0;
/////////////////////////////////////////////////////////////////////////
1:   void setShowPruningInfo(boolean showPruningInfo) {
1:     this.showPruningInfo = showPruningInfo;
1:   }
1: 
1:   void addNumBlockletsAfterDefaultPruning(int numBlocklets) {
1:     this.numBlockletsAfterDefaultPruning += numBlocklets;
/////////////////////////////////////////////////////////////////////////
1:     if (showPruningInfo) {
1:       StringBuilder builder = new StringBuilder();
1:       builder
0:           .append(" - total blocklets: ").append(totalBlocklets).append("\n")
1:           .append(" - filter: ").append(filterStatement).append("\n");
1:       if (cgDataMap != null) {
1:         skipBlocklets = numBlockletsAfterDefaultPruning - numBlockletsAfterCGPruning;
1:         builder
1:             .append(" - pruned by CG DataMap").append("\n")
1:             .append("    - name: ").append(cgDataMap.getDataMapWrapperName()).append("\n")
1:             .append("    - provider: ").append(cgDataMap.getDataMapWrapperProvider()).append("\n")
0:             .append("    - skipped blocklets: ").append(skipBlocklets).append("\n");
1:       if (fgDataMap != null) {
1:         if (numBlockletsAfterCGPruning != 0) {
1:           skipBlocklets = numBlockletsAfterCGPruning - numBlockletsAfterFGPruning;
1:         } else {
1:           skipBlocklets = numBlockletsAfterDefaultPruning - numBlockletsAfterFGPruning;
1:         }
1:         builder
1:             .append(" - pruned by FG DataMap").append("\n")
1:             .append("    - name: ").append(fgDataMap.getDataMapWrapperName()).append("\n")
1:             .append("    - provider: ").append(fgDataMap.getDataMapWrapperProvider()).append("\n")
0:             .append("    - skipped blocklets: ").append(skipBlocklets).append("\n");
1:       }
1:       return builder.toString();
1:     } else {
1:       return "";
author:xuchuanyin
-------------------------------------------------------------------------------
commit:c0de9f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.dev.expr.DataMapWrapperSimpleInfo;
/////////////////////////////////////////////////////////////////////////
0:   private DataMapWrapperSimpleInfo defaultDataMap;
1:   private DataMapWrapperSimpleInfo cgDataMap;
1:   private DataMapWrapperSimpleInfo fgDataMap;
/////////////////////////////////////////////////////////////////////////
0:   void setNumBlockletsAfterDefaultPruning(DataMapWrapperSimpleInfo dataMapWrapperSimpleInfo,
0:       int numBlocklets) {
0:     this.defaultDataMap = dataMapWrapperSimpleInfo;
1:   void setNumBlockletsAfterCGPruning(DataMapWrapperSimpleInfo dataMapWrapperSimpleInfo,
0:       int numBlocklets) {
1:     this.cgDataMap = dataMapWrapperSimpleInfo;
1:   void setNumBlockletsAfterFGPruning(DataMapWrapperSimpleInfo dataMapWrapperSimpleInfo,
0:       int numBlocklets) {
1:     this.fgDataMap = dataMapWrapperSimpleInfo;
/////////////////////////////////////////////////////////////////////////
0:           .append("    - name: ").append(cgDataMap.getDataMapWrapperName()).append("\n")
0:           .append("    - provider: ").append(cgDataMap.getDataMapWrapperProvider()).append("\n")
/////////////////////////////////////////////////////////////////////////
0:           .append("    - name: ").append(fgDataMap.getDataMapWrapperName()).append("\n")
0:           .append("    - provider: ").append(fgDataMap.getDataMapWrapperProvider()).append("\n")
author:Jacky Li
-------------------------------------------------------------------------------
commit:03a735b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.profiler;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
0: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1: 
1: /**
1:  * Used for EXPLAIN command
1:  */
1: @InterfaceAudience.Internal
1: public class TablePruningInfo {
1: 
1:   private int totalBlocklets;
1:   private String filterStatement;
1: 
0:   private DataMapSchema defaultDataMap;
0:   private int numBlockletsAfterDefaultPruning;
1: 
0:   private DataMapSchema cgDataMap;
1:   private int numBlockletsAfterCGPruning;
1: 
0:   private DataMapSchema fgDataMap;
1:   private int numBlockletsAfterFGPruning;
1: 
1:   void addTotalBlocklets(int numBlocklets) {
1:     this.totalBlocklets += numBlocklets;
1:   }
1: 
1:   void setFilterStatement(String filterStatement) {
1:     this.filterStatement = filterStatement;
1:   }
1: 
0:   void setNumBlockletsAfterDefaultPruning(DataMapSchema dataMapSchema, int numBlocklets) {
0:     this.defaultDataMap = dataMapSchema;
0:     this.numBlockletsAfterDefaultPruning = numBlocklets;
1:   }
1: 
0:   void setNumBlockletsAfterCGPruning(DataMapSchema dataMapSchema, int numBlocklets) {
0:     this.cgDataMap = dataMapSchema;
1:     this.numBlockletsAfterCGPruning = numBlocklets;
1:   }
1: 
0:   void setNumBlockletsAfterFGPruning(DataMapSchema dataMapSchema, int numBlocklets) {
0:     this.fgDataMap = dataMapSchema;
1:     this.numBlockletsAfterFGPruning = numBlocklets;
1:   }
1: 
1:   @Override
1:   public String toString() {
0:     StringBuilder builder = new StringBuilder();
1:     builder
0:         .append(" - total blocklets: ").append(totalBlocklets).append("\n")
0:         .append(" - filter: ").append(filterStatement).append("\n");
0:     if (defaultDataMap != null) {
1:       int skipBlocklets = totalBlocklets - numBlockletsAfterDefaultPruning;
1:       builder
1:           .append(" - pruned by Main DataMap").append("\n")
0:           .append("    - skipped blocklets: ").append(skipBlocklets).append("\n");
1:     }
0:     if (cgDataMap != null) {
0:       int skipBlocklets = numBlockletsAfterDefaultPruning - numBlockletsAfterCGPruning;
1:       builder
0:           .append(" - pruned by CG DataMap").append("\n")
0:           .append("    - name: ").append(cgDataMap.getDataMapName()).append("\n")
0:           .append("    - provider: ").append(cgDataMap.getProviderName()).append("\n")
0:           .append("    - skipped blocklets: ").append(skipBlocklets).append("\n");
1:     }
0:     if (fgDataMap != null) {
0:       int skipBlocklets;
0:       if (numBlockletsAfterCGPruning != 0) {
0:         skipBlocklets = numBlockletsAfterCGPruning - numBlockletsAfterFGPruning;
0:       } else {
0:         skipBlocklets = numBlockletsAfterDefaultPruning - numBlockletsAfterFGPruning;
1:       }
1:       builder
0:           .append(" - pruned by FG DataMap").append("\n")
0:           .append("    - name: ").append(fgDataMap.getDataMapName()).append("\n")
0:           .append("    - provider: ").append(fgDataMap.getProviderName()).append("\n")
0:           .append("    - skipped blocklets: ").append(skipBlocklets).append("\n");
1:     }
0:     return builder.toString();
1:   }
1: }
============================================================================