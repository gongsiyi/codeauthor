1:72cb415: /*
1:72cb415:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72cb415:  * contributor license agreements.  See the NOTICE file distributed with
1:72cb415:  * this work for additional information regarding copyright ownership.
1:72cb415:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72cb415:  * (the "License"); you may not use this file except in compliance with
1:72cb415:  * the License.  You may obtain a copy of the License at
1:72cb415:  *
1:72cb415:  *    http://www.apache.org/licenses/LICENSE-2.0
1:72cb415:  *
1:72cb415:  * Unless required by applicable law or agreed to in writing, software
1:72cb415:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72cb415:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72cb415:  * See the License for the specific language governing permissions and
1:72cb415:  * limitations under the License.
1:72cb415:  */
1:72cb415: package org.apache.carbondata.core.datastore.chunk;
2:72cb415: 
1:72cb415: import java.nio.ByteBuffer;
1:72cb415: 
1:2cf1104: import org.apache.carbondata.format.DataChunk3;
1:72cb415: 
1:72cb415: /**
1:72cb415:  * It contains group of uncompressed blocklets on one column.
1:72cb415:  */
1:72cb415: public abstract class AbstractRawColumnChunk {
1:72cb415: 
1:72cb415:   private byte[][] minValues;
1:72cb415: 
1:72cb415:   private byte[][] maxValues;
1:72cb415: 
1:72cb415:   protected ByteBuffer rawData;
1:72cb415: 
1:72cb415:   private int[] offsets;
1:72cb415: 
1:72cb415:   private int[] rowCount;
1:72cb415: 
1:72cb415:   protected int pagesCount;
1:72cb415: 
1:8c1ddbf:   protected int columnIndex;
1:72cb415: 
1:d509f17:   private long offSet;
1:72cb415: 
1:72cb415:   protected int length;
1:72cb415: 
1:e6a4f64:   private DataChunk3 dataChunkV3;
1:72cb415: 
1:d509f17:   public AbstractRawColumnChunk(int columnIndex, ByteBuffer rawData, long offSet, int length) {
1:8c1ddbf:     this.columnIndex = columnIndex;
2:72cb415:     this.rawData = rawData;
1:72cb415:     this.offSet = offSet;
1:72cb415:     this.length = length;
2:72cb415:   }
1:72cb415: 
1:72cb415:   public byte[][] getMinValues() {
1:72cb415:     return minValues;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public void setMinValues(byte[][] minValues) {
1:72cb415:     this.minValues = minValues;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public byte[][] getMaxValues() {
1:72cb415:     return maxValues;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public void setMaxValues(byte[][] maxValues) {
1:72cb415:     this.maxValues = maxValues;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public ByteBuffer getRawData() {
1:72cb415:     return rawData;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public int[] getOffsets() {
1:72cb415:     return offsets;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public void setOffsets(int[] offsets) {
1:72cb415:     this.offsets = offsets;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public int getPagesCount() {
1:72cb415:     return pagesCount;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public void setPagesCount(int pagesCount) {
1:72cb415:     this.pagesCount = pagesCount;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public int[] getRowCount() {
1:72cb415:     return rowCount;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public void setRowCount(int[] rowCount) {
1:72cb415:     this.rowCount = rowCount;
1:72cb415:   }
1:72cb415: 
1:4c9bed8:   public void freeMemory() {
1:4c9bed8:     rawData = null;
1:4c9bed8:   }
1:72cb415: 
1:8c1ddbf:   public int getColumnIndex() {
1:8c1ddbf:     return columnIndex;
1:72cb415:   }
1:72cb415: 
1:d509f17:   public long getOffSet() {
1:72cb415:     return offSet;
1:72cb415:   }
1:72cb415: 
1:72cb415:   public int getLength() {
1:72cb415:     return length;
1:72cb415:   }
1:72cb415: 
1:2cf1104:   public DataChunk3 getDataChunkV3() {
1:2cf1104:     return dataChunkV3;
1:72cb415:   }
1:72cb415: 
1:2cf1104:   public void setDataChunkV3(DataChunk3 dataChunkV3) {
1:2cf1104:     this.dataChunkV3 = dataChunkV3;
1:72cb415:   }
1:72cb415: 
1:72cb415: }
============================================================================
author:Jin Zhou
-------------------------------------------------------------------------------
commit:4c9bed8
/////////////////////////////////////////////////////////////////////////
1:   public void freeMemory() {
1:     rawData = null;
1:   }
author:ravipesala
-------------------------------------------------------------------------------
commit:d509f17
/////////////////////////////////////////////////////////////////////////
1:   private long offSet;
1:   public AbstractRawColumnChunk(int columnIndex, ByteBuffer rawData, long offSet, int length) {
/////////////////////////////////////////////////////////////////////////
1:   public long getOffSet() {
commit:72cb415
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datastore.chunk;
1: 
1: import java.nio.ByteBuffer;
1: 
1: 
1: /**
1:  * It contains group of uncompressed blocklets on one column.
1:  */
1: public abstract class AbstractRawColumnChunk {
1: 
1:   private byte[][] minValues;
1: 
1:   private byte[][] maxValues;
1: 
1:   protected ByteBuffer rawData;
1: 
0:   private int[] lengths;
1: 
1:   private int[] offsets;
1: 
1:   private int[] rowCount;
1: 
1:   protected int pagesCount;
1: 
0:   protected int blockletId;
1: 
0:   protected int offSet;
1: 
1:   protected int length;
1: 
0:   public AbstractRawColumnChunk(int blockletId, ByteBuffer rawData, int offSet, int length) {
0:     this.blockletId = blockletId;
1:     this.rawData = rawData;
1:     this.offSet = offSet;
1:     this.length = length;
1:   }
1: 
1:   public byte[][] getMinValues() {
1:     return minValues;
1:   }
1: 
1:   public void setMinValues(byte[][] minValues) {
1:     this.minValues = minValues;
1:   }
1: 
1:   public byte[][] getMaxValues() {
1:     return maxValues;
1:   }
1: 
1:   public void setMaxValues(byte[][] maxValues) {
1:     this.maxValues = maxValues;
1:   }
1: 
1:   public ByteBuffer getRawData() {
1:     return rawData;
1:   }
1: 
0:   public void setRawData(ByteBuffer rawData) {
1:     this.rawData = rawData;
1:   }
1: 
0:   public int[] getLengths() {
0:     return lengths;
1:   }
1: 
0:   public void setLengths(int[] lengths) {
0:     this.lengths = lengths;
1:   }
1: 
1:   public int[] getOffsets() {
1:     return offsets;
1:   }
1: 
1:   public void setOffsets(int[] offsets) {
1:     this.offsets = offsets;
1:   }
1: 
1:   public int getPagesCount() {
1:     return pagesCount;
1:   }
1: 
1:   public void setPagesCount(int pagesCount) {
1:     this.pagesCount = pagesCount;
1:   }
1: 
1:   public int[] getRowCount() {
1:     return rowCount;
1:   }
1: 
1:   public void setRowCount(int[] rowCount) {
1:     this.rowCount = rowCount;
1:   }
1: 
0:   public abstract void freeMemory();
1: 
0:   public int getBlockletId() {
0:     return blockletId;
1:   }
1: 
0:   public int getOffSet() {
1:     return offSet;
1:   }
1: 
1:   public int getLength() {
1:     return length;
1:   }
1: 
1: }
author:Jacky Li
-------------------------------------------------------------------------------
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
1:   protected int columnIndex;
/////////////////////////////////////////////////////////////////////////
0:   public AbstractRawColumnChunk(int columnIndex, ByteBuffer rawData, int offSet, int length) {
1:     this.columnIndex = columnIndex;
/////////////////////////////////////////////////////////////////////////
1:   public int getColumnIndex() {
1:     return columnIndex;
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   private int offSet;
1:   private DataChunk3 dataChunkV3;
/////////////////////////////////////////////////////////////////////////
author:kumarvishal
-------------------------------------------------------------------------------
commit:2cf1104
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.format.DataChunk3;
/////////////////////////////////////////////////////////////////////////
0:   protected DataChunk3 dataChunkV3;
0: 
/////////////////////////////////////////////////////////////////////////
1:   public DataChunk3 getDataChunkV3() {
1:     return dataChunkV3;
0:   }
0: 
1:   public void setDataChunkV3(DataChunk3 dataChunkV3) {
1:     this.dataChunkV3 = dataChunkV3;
0:   }
0: 
============================================================================