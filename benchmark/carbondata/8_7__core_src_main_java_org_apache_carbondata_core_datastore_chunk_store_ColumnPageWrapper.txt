1:e6a4f64: /*
1:e6a4f64:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e6a4f64:  * contributor license agreements.  See the NOTICE file distributed with
1:e6a4f64:  * this work for additional information regarding copyright ownership.
1:e6a4f64:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e6a4f64:  * (the "License"); you may not use this file except in compliance with
1:e6a4f64:  * the License.  You may obtain a copy of the License at
1:e6a4f64:  *
1:e6a4f64:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e6a4f64:  *
1:e6a4f64:  * Unless required by applicable law or agreed to in writing, software
1:e6a4f64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6a4f64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6a4f64:  * See the License for the specific language governing permissions and
1:e6a4f64:  * limitations under the License.
1:e6a4f64:  */
3:e6a4f64: 
1:e6a4f64: package org.apache.carbondata.core.datastore.chunk.store;
1:438b442: 
1:e6a4f64: 
1:438b442: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:438b442: import org.apache.carbondata.core.datastore.ColumnType;
1:daa6465: import org.apache.carbondata.core.datastore.chunk.DimensionColumnPage;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:438b442: import org.apache.carbondata.core.metadata.datatype.DataType;
1:438b442: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:3a4b881: import org.apache.carbondata.core.scan.result.vector.CarbonDictionary;
1:e6a4f64: import org.apache.carbondata.core.scan.result.vector.ColumnVectorInfo;
1:438b442: import org.apache.carbondata.core.util.ByteUtil;
1:3a4b881: import org.apache.carbondata.core.util.CarbonUtil;
1:438b442: 
1:e6a4f64: 
1:daa6465: public class ColumnPageWrapper implements DimensionColumnPage {
1:e6a4f64: 
1:e6a4f64:   private ColumnPage columnPage;
1:e6a4f64: 
1:3a4b881:   private CarbonDictionary localDictionary;
1:3a4b881: 
1:438b442:   private boolean isAdaptiveComplexPrimitivePage;
1:438b442: 
1:438b442:   public ColumnPageWrapper(ColumnPage columnPage, CarbonDictionary localDictionary,
1:438b442:       boolean isAdaptiveComplexPrimitivePage) {
1:e6a4f64:     this.columnPage = columnPage;
1:3a4b881:     this.localDictionary = localDictionary;
1:438b442:     this.isAdaptiveComplexPrimitivePage = isAdaptiveComplexPrimitivePage;
1:438b442: 
2:e6a4f64:   }
1:e6a4f64: 
4:e6a4f64:   @Override
1:f911403:   public int fillRawData(int rowId, int offset, byte[] data) {
1:daa6465:     throw new UnsupportedOperationException("internal error");
1:3a4b881:   }
1:daa6465: 
1:daa6465:   @Override
1:f911403:   public int fillSurrogateKey(int rowId, int chunkIndex, int[] outputSurrogateKey) {
2:e6a4f64:     throw new UnsupportedOperationException("internal error");
1:daa6465:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:f911403:   public int fillVector(ColumnVectorInfo[] vectorInfo, int chunkIndex) {
1:e6a4f64:     throw new UnsupportedOperationException("internal error");
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:f911403:   public int fillVector(int[] filteredRowId, ColumnVectorInfo[] vectorInfo, int chunkIndex) {
1:e6a4f64:     throw new UnsupportedOperationException("internal error");
1:e6a4f64:   }
1:e6a4f64: 
1:438b442:   @Override public byte[] getChunkData(int rowId) {
1:438b442:     ColumnType columnType = columnPage.getColumnSpec().getColumnType();
1:438b442:     DataType srcDataType = columnPage.getColumnSpec().getSchemaDataType();
1:438b442:     DataType targetDataType = columnPage.getDataType();
1:3a4b881:     if (null != localDictionary) {
1:438b442:       return localDictionary
1:438b442:           .getDictionaryValue(CarbonUtil.getSurrogateInternal(columnPage.getBytes(rowId), 0, 3));
1:438b442:     } else if (columnType == ColumnType.COMPLEX_PRIMITIVE && this.isAdaptiveComplexPrimitive()) {
1:438b442:       if (columnPage.getNullBits().get(rowId)) {
1:438b442:         // if this row is null, return default null represent in byte array
1:438b442:         return CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY;
1:438b442:       }
1:438b442:       if (srcDataType == DataTypes.DOUBLE || srcDataType == DataTypes.FLOAT) {
1:438b442:         double doubleData = columnPage.getDouble(rowId);
1:438b442:         if (srcDataType == DataTypes.FLOAT) {
1:438b442:           float out = (float) doubleData;
1:f012f5b:           return ByteUtil.toXorBytes(out);
1:438b442:         } else {
1:f012f5b:           return ByteUtil.toXorBytes(doubleData);
1:438b442:         }
1:438b442:       } else if (DataTypes.isDecimal(srcDataType)) {
1:438b442:         throw new RuntimeException("unsupported type: " + srcDataType);
1:438b442:       } else if ((srcDataType == DataTypes.BYTE) || (srcDataType == DataTypes.BOOLEAN) || (
1:438b442:           srcDataType == DataTypes.SHORT) || (srcDataType == DataTypes.SHORT_INT) || (srcDataType
1:438b442:           == DataTypes.INT) || (srcDataType == DataTypes.LONG) || (srcDataType
1:438b442:           == DataTypes.TIMESTAMP)) {
1:438b442:         long longData = columnPage.getLong(rowId);
1:438b442:         if ((srcDataType == DataTypes.BYTE)) {
1:438b442:           byte out = (byte) longData;
1:f012f5b:           return ByteUtil.toXorBytes(out);
1:438b442:         } else if (srcDataType == DataTypes.BOOLEAN) {
1:438b442:           byte out = (byte) longData;
1:438b442:           return ByteUtil.toBytes(ByteUtil.toBoolean(out));
1:438b442:         } else if (srcDataType == DataTypes.SHORT) {
1:438b442:           short out = (short) longData;
1:f012f5b:           return ByteUtil.toXorBytes(out);
1:438b442:         } else if (srcDataType == DataTypes.SHORT_INT) {
1:438b442:           int out = (int) longData;
1:f012f5b:           return ByteUtil.toXorBytes(out);
1:438b442:         } else if (srcDataType == DataTypes.INT) {
1:438b442:           int out = (int) longData;
1:f012f5b:           return ByteUtil.toXorBytes(out);
1:438b442:         } else {
1:438b442:           // timestamp and long
1:f012f5b:           return ByteUtil.toXorBytes(longData);
1:438b442:         }
1:438b442:       } else if ((targetDataType == DataTypes.STRING) || (targetDataType == DataTypes.VARCHAR) || (
1:438b442:           targetDataType == DataTypes.BYTE_ARRAY)) {
1:438b442:         return columnPage.getBytes(rowId);
1:438b442:       } else {
1:438b442:         throw new RuntimeException("unsupported type: " + targetDataType);
1:438b442:       }
1:438b442:     } else if ((columnType == ColumnType.COMPLEX_PRIMITIVE) && !this.isAdaptiveComplexPrimitive()) {
1:438b442:       if ((srcDataType == DataTypes.BYTE) || (srcDataType == DataTypes.BOOLEAN)) {
1:438b442:         byte[] out = new byte[1];
1:438b442:         out[0] = (columnPage.getByte(rowId));
1:438b442:         return out;
1:438b442:       } else if (srcDataType == DataTypes.BYTE_ARRAY) {
1:438b442:         return columnPage.getBytes(rowId);
1:06d38ff:       }  else if (srcDataType == DataTypes.DOUBLE) {
1:f012f5b:         return ByteUtil.toXorBytes(columnPage.getDouble(rowId));
1:438b442:       } else {
1:438b442:         throw new RuntimeException("unsupported type: " + targetDataType);
1:438b442:       }
1:438b442:     } else {
1:438b442:       return columnPage.getBytes(rowId);
1:e6a4f64:     }
1:e6a4f64:   }
1:438b442: 
1:e6a4f64: 
1:e6a4f64:   @Override
1:e6a4f64:   public int getInvertedIndex(int rowId) {
1:e6a4f64:     throw new UnsupportedOperationException("internal error");
1:e6a4f64:   }
1:e6a4f64: 
1:438b442:   @Override
1:438b442:   public int getInvertedReverseIndex(int rowId) {
1:e6a4f64:     throw new UnsupportedOperationException("internal error");
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:e6a4f64:   public boolean isNoDicitionaryColumn() {
1:e6a4f64:     return true;
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:e6a4f64:   public boolean isExplicitSorted() {
1:e6a4f64:     return false;
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:daa6465:   public int compareTo(int rowId, byte[] compareValue) {
1:e6a4f64:     throw new UnsupportedOperationException("internal error");
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:e6a4f64:   public void freeMemory() {
1:f2e898a:     if (null != columnPage) {
1:f2e898a:       columnPage.freeMemory();
1:f2e898a:       columnPage = null;
1:f2e898a:     }
1:e6a4f64:   }
1:e6a4f64: 
1:438b442:   public boolean isAdaptiveComplexPrimitive() {
1:438b442:     return isAdaptiveComplexPrimitivePage;
1:438b442:   }
1:438b442: 
1:e6a4f64: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:f012f5b
/////////////////////////////////////////////////////////////////////////
1:           return ByteUtil.toXorBytes(out);
1:           return ByteUtil.toXorBytes(doubleData);
/////////////////////////////////////////////////////////////////////////
1:           return ByteUtil.toXorBytes(out);
1:           return ByteUtil.toXorBytes(out);
1:           return ByteUtil.toXorBytes(out);
1:           return ByteUtil.toXorBytes(out);
1:           return ByteUtil.toXorBytes(longData);
/////////////////////////////////////////////////////////////////////////
1:         return ByteUtil.toXorBytes(columnPage.getDouble(rowId));
author:dhatchayani
-------------------------------------------------------------------------------
commit:f2e898a
/////////////////////////////////////////////////////////////////////////
1:     if (null != columnPage) {
1:       columnPage.freeMemory();
1:       columnPage = null;
1:     }
author:Indhumathi27
-------------------------------------------------------------------------------
commit:06d38ff
/////////////////////////////////////////////////////////////////////////
1:       }  else if (srcDataType == DataTypes.DOUBLE) {
0:         return ByteUtil.toBytes(columnPage.getDouble(rowId));
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public int fillRawData(int rowId, int offset, byte[] data) {
1:   public int fillSurrogateKey(int rowId, int chunkIndex, int[] outputSurrogateKey) {
1:   public int fillVector(ColumnVectorInfo[] vectorInfo, int chunkIndex) {
1:   public int fillVector(int[] filteredRowId, ColumnVectorInfo[] vectorInfo, int chunkIndex) {
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:438b442
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.ColumnType;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
1:   private boolean isAdaptiveComplexPrimitivePage;
1: 
1:   public ColumnPageWrapper(ColumnPage columnPage, CarbonDictionary localDictionary,
1:       boolean isAdaptiveComplexPrimitivePage) {
1:     this.isAdaptiveComplexPrimitivePage = isAdaptiveComplexPrimitivePage;
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override public byte[] getChunkData(int rowId) {
1:     ColumnType columnType = columnPage.getColumnSpec().getColumnType();
1:     DataType srcDataType = columnPage.getColumnSpec().getSchemaDataType();
1:     DataType targetDataType = columnPage.getDataType();
1:       return localDictionary
1:           .getDictionaryValue(CarbonUtil.getSurrogateInternal(columnPage.getBytes(rowId), 0, 3));
1:     } else if (columnType == ColumnType.COMPLEX_PRIMITIVE && this.isAdaptiveComplexPrimitive()) {
1:       if (columnPage.getNullBits().get(rowId)) {
1:         // if this row is null, return default null represent in byte array
1:         return CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY;
1:       }
1:       if (srcDataType == DataTypes.DOUBLE || srcDataType == DataTypes.FLOAT) {
1:         double doubleData = columnPage.getDouble(rowId);
1:         if (srcDataType == DataTypes.FLOAT) {
1:           float out = (float) doubleData;
0:           return ByteUtil.toBytes(out);
1:         } else {
0:           return ByteUtil.toBytes(doubleData);
1:         }
1:       } else if (DataTypes.isDecimal(srcDataType)) {
1:         throw new RuntimeException("unsupported type: " + srcDataType);
1:       } else if ((srcDataType == DataTypes.BYTE) || (srcDataType == DataTypes.BOOLEAN) || (
1:           srcDataType == DataTypes.SHORT) || (srcDataType == DataTypes.SHORT_INT) || (srcDataType
1:           == DataTypes.INT) || (srcDataType == DataTypes.LONG) || (srcDataType
1:           == DataTypes.TIMESTAMP)) {
1:         long longData = columnPage.getLong(rowId);
1:         if ((srcDataType == DataTypes.BYTE)) {
1:           byte out = (byte) longData;
0:           return ByteUtil.toBytes(out);
1:         } else if (srcDataType == DataTypes.BOOLEAN) {
1:           byte out = (byte) longData;
1:           return ByteUtil.toBytes(ByteUtil.toBoolean(out));
1:         } else if (srcDataType == DataTypes.SHORT) {
1:           short out = (short) longData;
0:           return ByteUtil.toBytes(out);
1:         } else if (srcDataType == DataTypes.SHORT_INT) {
1:           int out = (int) longData;
0:           return ByteUtil.toBytes(out);
1:         } else if (srcDataType == DataTypes.INT) {
1:           int out = (int) longData;
0:           return ByteUtil.toBytes(out);
1:         } else {
1:           // timestamp and long
0:           return ByteUtil.toBytes(longData);
1:         }
1:       } else if ((targetDataType == DataTypes.STRING) || (targetDataType == DataTypes.VARCHAR) || (
1:           targetDataType == DataTypes.BYTE_ARRAY)) {
1:         return columnPage.getBytes(rowId);
1:       } else {
1:         throw new RuntimeException("unsupported type: " + targetDataType);
1:       }
1:     } else if ((columnType == ColumnType.COMPLEX_PRIMITIVE) && !this.isAdaptiveComplexPrimitive()) {
1:       if ((srcDataType == DataTypes.BYTE) || (srcDataType == DataTypes.BOOLEAN)) {
1:         byte[] out = new byte[1];
1:         out[0] = (columnPage.getByte(rowId));
1:         return out;
1:       } else if (srcDataType == DataTypes.BYTE_ARRAY) {
1:         return columnPage.getBytes(rowId);
1:       } else {
1:         throw new RuntimeException("unsupported type: " + targetDataType);
1:       }
1:     } else {
1:       return columnPage.getBytes(rowId);
1: 
1:   @Override
1:   public int getInvertedReverseIndex(int rowId) {
/////////////////////////////////////////////////////////////////////////
1:   public boolean isAdaptiveComplexPrimitive() {
1:     return isAdaptiveComplexPrimitivePage;
1:   }
1: 
author:kumarvishal09
-------------------------------------------------------------------------------
commit:3a4b881
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.result.vector.CarbonDictionary;
1: import org.apache.carbondata.core.util.CarbonUtil;
1:   private CarbonDictionary localDictionary;
1: 
0:   public ColumnPageWrapper(ColumnPage columnPage, CarbonDictionary localDictionary) {
1:     this.localDictionary = localDictionary;
/////////////////////////////////////////////////////////////////////////
1:     if (null != localDictionary) {
0:       return localDictionary.getDictionaryValue(CarbonUtil
0:           .getSurrogateInternal(columnPage.getBytes(rowId), 0, 3));
1:     }
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.chunk.DimensionColumnPage;
1: public class ColumnPageWrapper implements DimensionColumnPage {
0:   public ColumnPageWrapper(ColumnPage columnPage) {
0:   public int fillRawData(int rowId, int offset, byte[] data, KeyStructureInfo restructuringInfo) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
0:   public int fillSurrogateKey(int rowId, int chunkIndex, int[] outputSurrogateKey,
0:   public int fillVector(ColumnVectorInfo[] vectorInfo, int chunkIndex,
0:   public int fillVector(int[] filteredRowId, ColumnVectorInfo[] vectorInfo, int chunkIndex,
0:   public byte[] getChunkData(int rowId) {
0:     return columnPage.getBytes(rowId);
/////////////////////////////////////////////////////////////////////////
0:   @Override public int getInvertedReverseIndex(int rowId) {
/////////////////////////////////////////////////////////////////////////
1:   public int compareTo(int rowId, byte[] compareValue) {
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
0:   private int columnValueSize;
0:   public ColumnPageWrapper(ColumnPage columnPage, int columnValueSize) {
0:     this.columnValueSize = columnValueSize;
/////////////////////////////////////////////////////////////////////////
0:     return columnValueSize;
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.chunk.store;
1: 
0: import org.apache.carbondata.core.datastore.chunk.DimensionColumnDataChunk;
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
0: import org.apache.carbondata.core.scan.executor.infos.KeyStructureInfo;
1: import org.apache.carbondata.core.scan.result.vector.ColumnVectorInfo;
1: 
0: public class ColumnPageWrapper implements DimensionColumnDataChunk {
1: 
1:   private ColumnPage columnPage;
1: 
0:   public ColumnPageWrapper(ColumnPage columnPage) {
1:     this.columnPage = columnPage;
1:   }
1: 
1:   @Override
0:   public int fillChunkData(byte[] data, int offset, int columnIndex,
0:       KeyStructureInfo restructuringInfo) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
0:   public int fillConvertedChunkData(int rowId, int columnIndex, int[] row,
0:       KeyStructureInfo restructuringInfo) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
0:   public int fillConvertedChunkData(ColumnVectorInfo[] vectorInfo, int column,
0:       KeyStructureInfo restructuringInfo) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
0:   public int fillConvertedChunkData(int[] rowMapping, ColumnVectorInfo[] vectorInfo, int column,
0:       KeyStructureInfo restructuringInfo) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
0:   public byte[] getChunkData(int columnIndex) {
0:     return columnPage.getBytes(columnIndex);
1:   }
1: 
1:   @Override
1:   public int getInvertedIndex(int rowId) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public boolean isNoDicitionaryColumn() {
1:     return true;
1:   }
1: 
1:   @Override
0:   public int getColumnValueSize() {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public boolean isExplicitSorted() {
1:     return false;
1:   }
1: 
1:   @Override
0:   public int compareTo(int index, byte[] compareValue) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void freeMemory() {
1: 
1:   }
1: 
1: }
author:kumarvishal
-------------------------------------------------------------------------------
commit:75e0bd4
/////////////////////////////////////////////////////////////////////////
0:   @Override public int getInvertedReverseIndex(int invertedIndex) {
0:     throw new UnsupportedOperationException("internal error");
0:   }
0: 
============================================================================