1:6828c4f: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:6828c4f:  *
1:6828c4f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6828c4f:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:6828c4f:  */
1:6828c4f: package org.apache.carbondata.core.cache.dictionary;
1:6828c4f: 
1:6828c4f: import java.io.IOException;
1:6828c4f: import java.nio.ByteBuffer;
1:6828c4f: import java.util.Arrays;
1:6828c4f: import java.util.HashMap;
1:6828c4f: import java.util.Iterator;
1:6828c4f: import java.util.List;
1:6828c4f: import java.util.Map;
1:6828c4f: 
1:1155d4d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:6828c4f: import org.apache.carbondata.core.reader.CarbonDictionaryReaderImpl;
1:6828c4f: import org.apache.carbondata.core.reader.sortindex.CarbonDictionarySortIndexReaderImpl;
1:6828c4f: import org.apache.carbondata.format.ColumnDictionaryChunk;
1:6828c4f: 
1:6828c4f: import mockit.Mock;
1:6828c4f: import mockit.MockUp;
1:6828c4f: import org.junit.BeforeClass;
1:6828c4f: import org.junit.Test;
1:6828c4f: 
1:6828c4f: import static org.junit.Assert.assertEquals;
1:6828c4f: 
1:6828c4f: public class DictionaryCacheLoaderImplTest {
1:6828c4f: 
1:6828c4f:   private static DictionaryCacheLoaderImpl dictionaryCacheLoader;
1:6828c4f:   private static DictionaryInfo dictionaryInfo;
1:6828c4f:   private static ColumnIdentifier columnIdentifier;
1:d3a09e2:   private static DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
1:6828c4f: 
1:6828c4f:   @BeforeClass public static void setUp() {
1:6828c4f:     CarbonTableIdentifier carbonTableIdentifier = new CarbonTableIdentifier("db", "table1", "1");
1:2fe7758:     AbsoluteTableIdentifier absoluteTableIdentifier = AbsoluteTableIdentifier.from("/tmp",
1:1155d4d:         carbonTableIdentifier);
1:d3a09e2:     Map<String, String> columnProperties = new HashMap<>();
1:d3a09e2:     columnProperties.put("prop1", "value1");
1:d3a09e2:     columnProperties.put("prop2", "value2");
1:956833e:     columnIdentifier = new ColumnIdentifier("1", columnProperties, DataTypes.STRING);
1:d3a09e2:     dictionaryColumnUniqueIdentifier =
1:1155d4d:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
1:29dc302:             columnIdentifier.getDataType());
1:1155d4d:     dictionaryCacheLoader = new DictionaryCacheLoaderImpl(dictionaryColumnUniqueIdentifier);
1:956833e:     dictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:6828c4f:     new MockUp<CarbonDictionaryReaderImpl>() {
1:6828c4f:       @Mock @SuppressWarnings("unused") Iterator<byte[]> read(long startOffset, long endOffset)
1:6828c4f:           throws IOException {
1:6828c4f:         ColumnDictionaryChunk columnDictionaryChunk = new ColumnDictionaryChunk();
1:6828c4f:         ByteBuffer byteBuffer1 = ByteBuffer.wrap("c".getBytes());
1:6828c4f:         ByteBuffer byteBuffer2 = ByteBuffer.wrap("d".getBytes());
1:6828c4f:         columnDictionaryChunk.setValues(Arrays.asList(byteBuffer1, byteBuffer2));
1:6828c4f:         return new ColumnDictionaryChunkIterator(Arrays.asList(columnDictionaryChunk));
1:6828c4f:       }
1:6828c4f:     };
1:6828c4f: 
1:6828c4f:     new MockUp<CarbonDictionarySortIndexReaderImpl>() {
1:6828c4f:       @Mock @SuppressWarnings("unused") List<Integer> readSortIndex() throws IOException {
1:6828c4f:         return Arrays.asList(1, 2);
1:6828c4f:       }
1:6828c4f: 
1:6828c4f:       @Mock @SuppressWarnings("unused") List<Integer> readInvertedSortIndex() throws IOException {
1:6828c4f:         return Arrays.asList(1, 2);
1:6828c4f:       }
1:6828c4f:     };
1:6828c4f:   }
1:6828c4f: 
1:6828c4f:   @Test public void testToLoad() throws IOException {
1:6828c4f:     new MockUp<ColumnDictionaryInfo>() {
1:6828c4f:       @Mock @SuppressWarnings("unused") int getSizeOfLastDictionaryChunk() {
1:6828c4f:         return 9999;
1:6828c4f:       }
1:6828c4f:     };
1:daa6465:     dictionaryCacheLoader.load(dictionaryInfo, 0L, 2L, true);
1:6828c4f:     assertEquals(dictionaryInfo.getDictionaryChunks().getSize(), 4);
1:6828c4f:   }
1:6828c4f: 
1:6828c4f:   @Test public void testToLoadWithsizeOfOneDictionaryChunkLessThanZero() throws IOException {
1:6828c4f:     new MockUp<ColumnDictionaryInfo>() {
1:6828c4f:       @Mock @SuppressWarnings("unused") int getSizeOfLastDictionaryChunk() {
1:6828c4f:         return 10000;
1:6828c4f:       }
1:6828c4f:     };
1:daa6465:     dictionaryCacheLoader.load(dictionaryInfo, 0L, 2L, true);
1:6828c4f:     assertEquals(dictionaryInfo.getDictionaryChunks().getSize(), 2);
1:6828c4f:   }
1:6828c4f: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1:     dictionaryCacheLoader.load(dictionaryInfo, 0L, 2L, true);
/////////////////////////////////////////////////////////////////////////
1:     dictionaryCacheLoader.load(dictionaryInfo, 0L, 2L, true);
commit:2fe7758
/////////////////////////////////////////////////////////////////////////
1:     AbsoluteTableIdentifier absoluteTableIdentifier = AbsoluteTableIdentifier.from("/tmp",
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     columnIdentifier = new ColumnIdentifier("1", columnProperties, DataTypes.STRING);
1:     dictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:manishgupta88
-------------------------------------------------------------------------------
commit:29dc302
/////////////////////////////////////////////////////////////////////////
1:             columnIdentifier.getDataType());
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:     AbsoluteTableIdentifier absoluteTableIdentifier = new AbsoluteTableIdentifier("/tmp",
1:         carbonTableIdentifier);
1:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
0:             columnIdentifier.getDataType(), CarbonStorePath.getCarbonTablePath("/tmp",
0:             carbonTableIdentifier));
1:     dictionaryCacheLoader = new DictionaryCacheLoaderImpl(dictionaryColumnUniqueIdentifier);
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
/////////////////////////////////////////////////////////////////////////
1:   private static DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
1:     Map<String, String> columnProperties = new HashMap<>();
1:     columnProperties.put("prop1", "value1");
1:     columnProperties.put("prop2", "value2");
0:     columnIdentifier = new ColumnIdentifier("1", columnProperties, DataType.STRING);
1:     dictionaryColumnUniqueIdentifier =
0:         new DictionaryColumnUniqueIdentifier(carbonTableIdentifier, columnIdentifier,
0:             columnIdentifier.getDataType(), CarbonStorePath.getCarbonTablePath("/tmp", carbonTableIdentifier));
0:     dictionaryCacheLoader = new DictionaryCacheLoaderImpl(carbonTableIdentifier, "/tmp/",
0:         dictionaryColumnUniqueIdentifier);
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.metadata.ColumnIdentifier;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
author:kunal642
-------------------------------------------------------------------------------
commit:6828c4f
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
1: import org.apache.carbondata.core.reader.CarbonDictionaryReaderImpl;
1: import org.apache.carbondata.core.reader.sortindex.CarbonDictionarySortIndexReaderImpl;
1: import org.apache.carbondata.format.ColumnDictionaryChunk;
1: 
1: import mockit.Mock;
1: import mockit.MockUp;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class DictionaryCacheLoaderImplTest {
1: 
1:   private static DictionaryCacheLoaderImpl dictionaryCacheLoader;
1:   private static DictionaryInfo dictionaryInfo;
1:   private static ColumnIdentifier columnIdentifier;
1: 
1:   @BeforeClass public static void setUp() {
1:     CarbonTableIdentifier carbonTableIdentifier = new CarbonTableIdentifier("db", "table1", "1");
0:     dictionaryCacheLoader = new DictionaryCacheLoaderImpl(carbonTableIdentifier, "/tmp/");
0:     dictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1:     new MockUp<CarbonDictionaryReaderImpl>() {
1:       @Mock @SuppressWarnings("unused") Iterator<byte[]> read(long startOffset, long endOffset)
1:           throws IOException {
1:         ColumnDictionaryChunk columnDictionaryChunk = new ColumnDictionaryChunk();
1:         ByteBuffer byteBuffer1 = ByteBuffer.wrap("c".getBytes());
1:         ByteBuffer byteBuffer2 = ByteBuffer.wrap("d".getBytes());
1:         columnDictionaryChunk.setValues(Arrays.asList(byteBuffer1, byteBuffer2));
1:         return new ColumnDictionaryChunkIterator(Arrays.asList(columnDictionaryChunk));
1:       }
1:     };
1: 
1:     new MockUp<CarbonDictionarySortIndexReaderImpl>() {
1:       @Mock @SuppressWarnings("unused") List<Integer> readSortIndex() throws IOException {
1:         return Arrays.asList(1, 2);
1:       }
1: 
1:       @Mock @SuppressWarnings("unused") List<Integer> readInvertedSortIndex() throws IOException {
1:         return Arrays.asList(1, 2);
1:       }
1:     };
0:     Map<String, String> columnProperties = new HashMap<>();
0:     columnProperties.put("prop1", "value1");
0:     columnProperties.put("prop2", "value2");
0:     columnIdentifier = new ColumnIdentifier("1", columnProperties, DataType.STRING);
1:   }
1: 
1:   @Test public void testToLoad() throws IOException {
1:     new MockUp<ColumnDictionaryInfo>() {
1:       @Mock @SuppressWarnings("unused") int getSizeOfLastDictionaryChunk() {
1:         return 9999;
1:       }
1:     };
0:     dictionaryCacheLoader.load(dictionaryInfo, columnIdentifier, 0L, 2L, true);
1:     assertEquals(dictionaryInfo.getDictionaryChunks().getSize(), 4);
1:   }
1: 
1:   @Test public void testToLoadWithsizeOfOneDictionaryChunkLessThanZero() throws IOException {
1:     new MockUp<ColumnDictionaryInfo>() {
1:       @Mock @SuppressWarnings("unused") int getSizeOfLastDictionaryChunk() {
1:         return 10000;
1:       }
1:     };
0:     dictionaryCacheLoader.load(dictionaryInfo, columnIdentifier, 0L, 2L, true);
1:     assertEquals(dictionaryInfo.getDictionaryChunks().getSize(), 2);
1:   }
1: }
============================================================================