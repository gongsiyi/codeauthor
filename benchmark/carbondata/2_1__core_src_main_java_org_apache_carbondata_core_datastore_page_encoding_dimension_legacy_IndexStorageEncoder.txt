1:e6a4f64: /*
1:e6a4f64:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e6a4f64:  * contributor license agreements.  See the NOTICE file distributed with
1:e6a4f64:  * this work for additional information regarding copyright ownership.
1:e6a4f64:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e6a4f64:  * (the "License"); you may not use this file except in compliance with
1:e6a4f64:  * the License.  You may obtain a copy of the License at
1:e6a4f64:  *
1:e6a4f64:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e6a4f64:  *
1:e6a4f64:  * Unless required by applicable law or agreed to in writing, software
1:e6a4f64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6a4f64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6a4f64:  * See the License for the specific language governing permissions and
1:e6a4f64:  * limitations under the License.
1:e6a4f64:  */
1:e6a4f64: 
1:e6a4f64: package org.apache.carbondata.core.datastore.page.encoding.dimension.legacy;
1:e6a4f64: 
1:e6a4f64: import java.io.ByteArrayOutputStream;
1:e6a4f64: import java.io.DataOutputStream;
1:e6a4f64: import java.io.IOException;
1:e6a4f64: 
1:e6a4f64: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:e6a4f64: import org.apache.carbondata.core.datastore.columnar.IndexStorage;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:e6a4f64: import org.apache.carbondata.core.memory.MemoryException;
1:e6a4f64: import org.apache.carbondata.format.DataChunk2;
1:e6a4f64: import org.apache.carbondata.format.SortState;
1:e6a4f64: 
1:e6a4f64: public abstract class IndexStorageEncoder extends ColumnPageEncoder {
1:e6a4f64:   IndexStorage indexStorage;
1:e6a4f64:   byte[] compressedDataPage;
1:e6a4f64: 
1:e6a4f64:   abstract void encodeIndexStorage(ColumnPage inputPage);
1:e6a4f64: 
1:e6a4f64:   @Override
1:e6a4f64:   protected byte[] encodeData(ColumnPage input) throws MemoryException, IOException {
1:e6a4f64:     encodeIndexStorage(input);
1:e6a4f64:     ByteArrayOutputStream stream = new ByteArrayOutputStream();
1:e6a4f64:     DataOutputStream out = new DataOutputStream(stream);
1:e6a4f64:     out.write(compressedDataPage);
1:e6a4f64:     if (indexStorage.getRowIdPageLengthInBytes() > 0) {
1:e6a4f64:       out.writeInt(indexStorage.getRowIdPageLengthInBytes());
1:e6a4f64:       short[] rowIdPage = (short[])indexStorage.getRowIdPage();
1:e6a4f64:       for (short rowId : rowIdPage) {
1:e6a4f64:         out.writeShort(rowId);
1:e6a4f64:       }
1:e6a4f64:       if (indexStorage.getRowIdRlePageLengthInBytes() > 0) {
1:e6a4f64:         short[] rowIdRlePage = (short[])indexStorage.getRowIdRlePage();
1:e6a4f64:         for (short rowIdRle : rowIdRlePage) {
1:e6a4f64:           out.writeShort(rowIdRle);
1:e6a4f64:         }
1:e6a4f64:       }
1:e6a4f64:     }
1:e6a4f64:     if (indexStorage.getDataRlePageLengthInBytes() > 0) {
1:e6a4f64:       short[] dataRlePage = (short[])indexStorage.getDataRlePage();
1:e6a4f64:       for (short dataRle : dataRlePage) {
1:e6a4f64:         out.writeShort(dataRle);
1:e6a4f64:       }
1:e6a4f64:     }
1:e6a4f64:     return stream.toByteArray();
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:e6a4f64:   protected ColumnPageEncoderMeta getEncoderMeta(ColumnPage inputPage) {
1:e6a4f64:     return null;
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:e6a4f64:   protected void fillLegacyFields(DataChunk2 dataChunk)
1:e6a4f64:       throws IOException {
1:e6a4f64:     SortState sort = (indexStorage.getRowIdPageLengthInBytes() > 0) ?
1:e6a4f64:         SortState.SORT_EXPLICIT : SortState.SORT_NATIVE;
1:e6a4f64:     dataChunk.setSort_state(sort);
1:e6a4f64:     if (indexStorage.getRowIdPageLengthInBytes() > 0) {
1:e6a4f64:       int rowIdPageLength = CarbonCommonConstants.INT_SIZE_IN_BYTE +
1:e6a4f64:           indexStorage.getRowIdPageLengthInBytes() +
1:e6a4f64:           indexStorage.getRowIdRlePageLengthInBytes();
1:e6a4f64:       dataChunk.setRowid_page_length(rowIdPageLength);
1:e6a4f64:     }
1:e6a4f64:     if (indexStorage.getDataRlePageLengthInBytes() > 0) {
1:e6a4f64:       dataChunk.setRle_page_length(indexStorage.getDataRlePageLengthInBytes());
1:e6a4f64:     }
1:e6a4f64:     dataChunk.setData_page_length(compressedDataPage.length);
1:e6a4f64:   }
1:e6a4f64: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.encoding.dimension.legacy;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.columnar.IndexStorage;
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.format.DataChunk2;
1: import org.apache.carbondata.format.SortState;
1: 
1: public abstract class IndexStorageEncoder extends ColumnPageEncoder {
1:   IndexStorage indexStorage;
1:   byte[] compressedDataPage;
1: 
1:   abstract void encodeIndexStorage(ColumnPage inputPage);
1: 
1:   @Override
1:   protected byte[] encodeData(ColumnPage input) throws MemoryException, IOException {
0:     assert (indexStorage == null);
0:     assert (compressedDataPage == null);
1:     encodeIndexStorage(input);
0:     assert (indexStorage != null);
0:     assert (compressedDataPage != null);
1:     ByteArrayOutputStream stream = new ByteArrayOutputStream();
1:     DataOutputStream out = new DataOutputStream(stream);
1:     out.write(compressedDataPage);
1:     if (indexStorage.getRowIdPageLengthInBytes() > 0) {
1:       out.writeInt(indexStorage.getRowIdPageLengthInBytes());
1:       short[] rowIdPage = (short[])indexStorage.getRowIdPage();
1:       for (short rowId : rowIdPage) {
1:         out.writeShort(rowId);
1:       }
1:       if (indexStorage.getRowIdRlePageLengthInBytes() > 0) {
1:         short[] rowIdRlePage = (short[])indexStorage.getRowIdRlePage();
1:         for (short rowIdRle : rowIdRlePage) {
1:           out.writeShort(rowIdRle);
1:         }
1:       }
1:     }
1:     if (indexStorage.getDataRlePageLengthInBytes() > 0) {
1:       short[] dataRlePage = (short[])indexStorage.getDataRlePage();
1:       for (short dataRle : dataRlePage) {
1:         out.writeShort(dataRle);
1:       }
1:     }
1:     return stream.toByteArray();
1:   }
1: 
1:   @Override
1:   protected ColumnPageEncoderMeta getEncoderMeta(ColumnPage inputPage) {
1:     return null;
1:   }
1: 
1:   @Override
1:   protected void fillLegacyFields(DataChunk2 dataChunk)
1:       throws IOException {
1:     SortState sort = (indexStorage.getRowIdPageLengthInBytes() > 0) ?
1:         SortState.SORT_EXPLICIT : SortState.SORT_NATIVE;
1:     dataChunk.setSort_state(sort);
1:     if (indexStorage.getRowIdPageLengthInBytes() > 0) {
1:       int rowIdPageLength = CarbonCommonConstants.INT_SIZE_IN_BYTE +
1:           indexStorage.getRowIdPageLengthInBytes() +
1:           indexStorage.getRowIdRlePageLengthInBytes();
1:       dataChunk.setRowid_page_length(rowIdPageLength);
1:     }
1:     if (indexStorage.getDataRlePageLengthInBytes() > 0) {
1:       dataChunk.setRle_page_length(indexStorage.getDataRlePageLengthInBytes());
1:     }
1:     dataChunk.setData_page_length(compressedDataPage.length);
1:   }
1: }
============================================================================