1:e710339: /*
1:e710339:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e710339:  * contributor license agreements.  See the NOTICE file distributed with
1:e710339:  * this work for additional information regarding copyright ownership.
1:e710339:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e710339:  * (the "License"); you may not use this file except in compliance with
1:e710339:  * the License.  You may obtain a copy of the License at
1:e710339:  *
1:e710339:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e710339:  *
1:e710339:  * Unless required by applicable law or agreed to in writing, software
1:e710339:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e710339:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e710339:  * See the License for the specific language governing permissions and
1:e710339:  * limitations under the License.
1:e710339:  */
1:e710339: package org.apache.carbondata.core.datastore.blocklet;
1:e710339: 
1:e710339: import java.util.ArrayList;
1:e710339: import java.util.List;
1:2ccdbb7: import java.util.Map;
1:e710339: import java.util.concurrent.ExecutorService;
1:e710339: 
1:e710339: import org.apache.carbondata.core.datastore.page.EncodedTablePage;
1:e710339: import org.apache.carbondata.core.datastore.page.key.TablePageKey;
1:2ccdbb7: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1:e710339: 
1:e710339: /**
1:e710339:  * Holds the blocklet level data and metadata to be written in carbondata file
1:e710339:  * For dimension pages it will check if all the pages are not encoded with dictionary
1:e710339:  * then it will encode those pages for that column again
1:e710339:  */
1:e710339: public class EncodedBlocklet {
1:e710339: 
1:e710339:   /**
1:e710339:    * number of rows in a blocklet
1:e710339:    */
1:e710339:   private int blockletSize;
1:e710339: 
1:e710339:   /**
1:e710339:    * list of page metadata
1:e710339:    */
1:e710339:   private List<TablePageKey> pageMetadataList;
1:e710339: 
1:e710339:   /**
1:e710339:    * maintains encoded dimension data for each column
1:e710339:    */
1:e710339:   private List<BlockletEncodedColumnPage> encodedDimensionColumnPages;
1:e710339: 
1:e710339:   /**
1:e710339:    * maintains encoded measure data for each column
1:e710339:    */
1:e710339:   private List<BlockletEncodedColumnPage> encodedMeasureColumnPages;
1:e710339: 
1:e710339:   /**
1:e710339:    * fallback executor service, will used to re-encode column pages
1:e710339:    */
1:e710339:   private ExecutorService executorService;
1:e710339: 
1:e710339:   /**
1:e710339:    * number of pages in a blocklet
1:e710339:    */
1:e710339:   private int numberOfPages;
1:e710339: 
1:2ccdbb7:   /**
1:2ccdbb7:    * is decoder based fallback is enabled or not
1:2ccdbb7:    */
1:2ccdbb7:   private boolean isDecoderBasedFallBackEnabled;
1:2ccdbb7: 
1:2ccdbb7:   /**
1:2ccdbb7:    * local dictionary generator map of all local dictionary columns
1:2ccdbb7:    */
1:2ccdbb7:   private Map<String, LocalDictionaryGenerator> localDictionaryGeneratorMap;
1:2ccdbb7: 
1:2ccdbb7:   public EncodedBlocklet(ExecutorService executorService, boolean isDecoderBasedFallBackEnabled,
1:2ccdbb7:       Map<String, LocalDictionaryGenerator> localDictionaryGeneratorMap) {
1:e710339:     this.executorService = executorService;
1:2ccdbb7:     this.isDecoderBasedFallBackEnabled = isDecoderBasedFallBackEnabled;
1:2ccdbb7:     this.localDictionaryGeneratorMap = localDictionaryGeneratorMap;
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to add page metadata details
1:e710339:    *
1:e710339:    * @param encodedTablePage
1:e710339:    * encoded table page
1:e710339:    */
1:e710339:   private void addPageMetadata(EncodedTablePage encodedTablePage) {
1:e710339:     // for first table page create new list
1:e710339:     if (null == pageMetadataList) {
1:e710339:       pageMetadataList = new ArrayList<>();
1:e710339:     }
1:e710339:     // update details
1:e710339:     blockletSize += encodedTablePage.getPageSize();
1:e710339:     pageMetadataList.add(encodedTablePage.getPageKey());
1:e710339:     this.numberOfPages++;
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to add measure column pages
1:e710339:    *
1:e710339:    * @param encodedTablePage
1:e710339:    * encoded table page
1:e710339:    */
1:e710339:   private void addEncodedMeasurePage(EncodedTablePage encodedTablePage) {
1:e710339:     // for first page create new list
1:e710339:     if (null == encodedMeasureColumnPages) {
1:e710339:       encodedMeasureColumnPages = new ArrayList<>();
1:e710339:       // adding measure pages
1:e710339:       for (int i = 0; i < encodedTablePage.getNumMeasures(); i++) {
1:2ccdbb7:         BlockletEncodedColumnPage blockletEncodedColumnPage =
1:2ccdbb7:             new BlockletEncodedColumnPage(null, false, null);
1:2ccdbb7:         blockletEncodedColumnPage.addEncodedColumnPage(encodedTablePage.getMeasure(i));
1:e710339:         encodedMeasureColumnPages.add(blockletEncodedColumnPage);
1:e710339:       }
1:e710339:     } else {
1:e710339:       for (int i = 0; i < encodedTablePage.getNumMeasures(); i++) {
1:2ccdbb7:         encodedMeasureColumnPages.get(i).addEncodedColumnPage(encodedTablePage.getMeasure(i));
1:e710339:       }
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to add dimension column pages
1:e710339:    *
1:e710339:    * @param encodedTablePage
1:e710339:    * encoded table page
1:e710339:    */
1:e710339:   private void addEncodedDimensionPage(EncodedTablePage encodedTablePage) {
1:e710339:     // for first page create new list
1:e710339:     if (null == encodedDimensionColumnPages) {
1:e710339:       encodedDimensionColumnPages = new ArrayList<>();
1:e710339:       // adding measure pages
1:e710339:       for (int i = 0; i < encodedTablePage.getNumDimensions(); i++) {
1:e710339:         BlockletEncodedColumnPage blockletEncodedColumnPage =
1:2ccdbb7:             new BlockletEncodedColumnPage(executorService, isDecoderBasedFallBackEnabled,
1:2ccdbb7:                 localDictionaryGeneratorMap.get(
1:2ccdbb7:                     encodedTablePage.getDimension(i).getActualPage().getColumnSpec()
1:2ccdbb7:                         .getFieldName()));
1:2ccdbb7:         blockletEncodedColumnPage.addEncodedColumnPage(encodedTablePage.getDimension(i));
1:e710339:         encodedDimensionColumnPages.add(blockletEncodedColumnPage);
1:e710339:       }
1:e710339:     } else {
1:e710339:       for (int i = 0; i < encodedTablePage.getNumDimensions(); i++) {
1:2ccdbb7:         encodedDimensionColumnPages.get(i).addEncodedColumnPage(encodedTablePage.getDimension(i));
1:e710339:       }
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Use to add table pages
1:e710339:    *
1:e710339:    * @param encodedTablePage
1:e710339:    * encoded table page
1:e710339:    */
1:e710339:   public void addEncodedTablePage(EncodedTablePage encodedTablePage) {
1:e710339:     addPageMetadata(encodedTablePage);
1:e710339:     addEncodedDimensionPage(encodedTablePage);
1:e710339:     addEncodedMeasurePage(encodedTablePage);
1:e710339:   }
1:e710339: 
1:e710339:   public int getBlockletSize() {
1:e710339:     return blockletSize;
1:e710339:   }
1:e710339: 
1:e710339:   public List<TablePageKey> getPageMetadataList() {
1:e710339:     return pageMetadataList;
1:e710339:   }
1:e710339: 
1:e710339:   public List<BlockletEncodedColumnPage> getEncodedDimensionColumnPages() {
1:e710339:     return encodedDimensionColumnPages;
1:e710339:   }
1:e710339: 
1:e710339:   public List<BlockletEncodedColumnPage> getEncodedMeasureColumnPages() {
1:e710339:     return encodedMeasureColumnPages;
1:e710339:   }
1:e710339: 
1:e710339:   public int getNumberOfDimension() {
1:e710339:     return encodedDimensionColumnPages.size();
1:e710339:   }
1:e710339: 
1:e710339:   public int getNumberOfMeasure() {
1:e710339:     return encodedMeasureColumnPages.size();
1:e710339:   }
1:e710339: 
1:e710339:   public int getNumberOfPages() {
1:e710339:     return this.numberOfPages;
1:e710339:   }
1:e710339: 
1:e710339:   public void clear() {
1:e710339:     this.numberOfPages = 0;
1:e710339:     this.encodedDimensionColumnPages = null;
1:e710339:     this.blockletSize = 0;
1:e710339:     this.encodedMeasureColumnPages = null;
1:e710339:     this.pageMetadataList = null;
1:e710339:   }
1:e710339: }
============================================================================
author:akashrn5
-------------------------------------------------------------------------------
commit:2ccdbb7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * is decoder based fallback is enabled or not
1:    */
1:   private boolean isDecoderBasedFallBackEnabled;
1: 
1:   /**
1:    * local dictionary generator map of all local dictionary columns
1:    */
1:   private Map<String, LocalDictionaryGenerator> localDictionaryGeneratorMap;
1: 
1:   public EncodedBlocklet(ExecutorService executorService, boolean isDecoderBasedFallBackEnabled,
1:       Map<String, LocalDictionaryGenerator> localDictionaryGeneratorMap) {
1:     this.isDecoderBasedFallBackEnabled = isDecoderBasedFallBackEnabled;
1:     this.localDictionaryGeneratorMap = localDictionaryGeneratorMap;
/////////////////////////////////////////////////////////////////////////
1:         BlockletEncodedColumnPage blockletEncodedColumnPage =
1:             new BlockletEncodedColumnPage(null, false, null);
1:         blockletEncodedColumnPage.addEncodedColumnPage(encodedTablePage.getMeasure(i));
1:         encodedMeasureColumnPages.get(i).addEncodedColumnPage(encodedTablePage.getMeasure(i));
/////////////////////////////////////////////////////////////////////////
1:             new BlockletEncodedColumnPage(executorService, isDecoderBasedFallBackEnabled,
1:                 localDictionaryGeneratorMap.get(
1:                     encodedTablePage.getDimension(i).getActualPage().getColumnSpec()
1:                         .getFieldName()));
1:         blockletEncodedColumnPage.addEncodedColumnPage(encodedTablePage.getDimension(i));
1:         encodedDimensionColumnPages.get(i).addEncodedColumnPage(encodedTablePage.getDimension(i));
author:kumarvishal09
-------------------------------------------------------------------------------
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datastore.blocklet;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: 
1: import org.apache.carbondata.core.datastore.page.EncodedTablePage;
1: import org.apache.carbondata.core.datastore.page.key.TablePageKey;
1: 
1: /**
1:  * Holds the blocklet level data and metadata to be written in carbondata file
1:  * For dimension pages it will check if all the pages are not encoded with dictionary
1:  * then it will encode those pages for that column again
1:  */
1: public class EncodedBlocklet {
1: 
1:   /**
1:    * number of rows in a blocklet
1:    */
1:   private int blockletSize;
1: 
1:   /**
1:    * list of page metadata
1:    */
1:   private List<TablePageKey> pageMetadataList;
1: 
1:   /**
1:    * maintains encoded dimension data for each column
1:    */
1:   private List<BlockletEncodedColumnPage> encodedDimensionColumnPages;
1: 
1:   /**
1:    * maintains encoded measure data for each column
1:    */
1:   private List<BlockletEncodedColumnPage> encodedMeasureColumnPages;
1: 
1:   /**
1:    * fallback executor service, will used to re-encode column pages
1:    */
1:   private ExecutorService executorService;
1: 
1:   /**
1:    * number of pages in a blocklet
1:    */
1:   private int numberOfPages;
1: 
0:   public EncodedBlocklet(ExecutorService executorService) {
1:     this.executorService = executorService;
1:   }
1: 
1:   /**
1:    * Below method will be used to add page metadata details
1:    *
1:    * @param encodedTablePage
1:    * encoded table page
1:    */
1:   private void addPageMetadata(EncodedTablePage encodedTablePage) {
1:     // for first table page create new list
1:     if (null == pageMetadataList) {
1:       pageMetadataList = new ArrayList<>();
1:     }
1:     // update details
1:     blockletSize += encodedTablePage.getPageSize();
1:     pageMetadataList.add(encodedTablePage.getPageKey());
1:     this.numberOfPages++;
1:   }
1: 
1:   /**
1:    * Below method will be used to add measure column pages
1:    *
1:    * @param encodedTablePage
1:    * encoded table page
1:    */
1:   private void addEncodedMeasurePage(EncodedTablePage encodedTablePage) {
1:     // for first page create new list
1:     if (null == encodedMeasureColumnPages) {
1:       encodedMeasureColumnPages = new ArrayList<>();
1:       // adding measure pages
1:       for (int i = 0; i < encodedTablePage.getNumMeasures(); i++) {
0:         BlockletEncodedColumnPage blockletEncodedColumnPage = new BlockletEncodedColumnPage(null);
0:         blockletEncodedColumnPage.addEncodedColumnColumnPage(encodedTablePage.getMeasure(i));
1:         encodedMeasureColumnPages.add(blockletEncodedColumnPage);
1:       }
1:     } else {
1:       for (int i = 0; i < encodedTablePage.getNumMeasures(); i++) {
0:         encodedMeasureColumnPages.get(i).addEncodedColumnColumnPage(encodedTablePage.getMeasure(i));
1:       }
1:     }
1:   }
1: 
1:   /**
1:    * Below method will be used to add dimension column pages
1:    *
1:    * @param encodedTablePage
1:    * encoded table page
1:    */
1:   private void addEncodedDimensionPage(EncodedTablePage encodedTablePage) {
1:     // for first page create new list
1:     if (null == encodedDimensionColumnPages) {
1:       encodedDimensionColumnPages = new ArrayList<>();
1:       // adding measure pages
1:       for (int i = 0; i < encodedTablePage.getNumDimensions(); i++) {
1:         BlockletEncodedColumnPage blockletEncodedColumnPage =
0:             new BlockletEncodedColumnPage(executorService);
0:         blockletEncodedColumnPage.addEncodedColumnColumnPage(encodedTablePage.getDimension(i));
1:         encodedDimensionColumnPages.add(blockletEncodedColumnPage);
1:       }
1:     } else {
1:       for (int i = 0; i < encodedTablePage.getNumDimensions(); i++) {
0:         encodedDimensionColumnPages.get(i)
0:             .addEncodedColumnColumnPage(encodedTablePage.getDimension(i));
1:       }
1:     }
1:   }
1: 
1:   /**
1:    * Use to add table pages
1:    *
1:    * @param encodedTablePage
1:    * encoded table page
1:    */
1:   public void addEncodedTablePage(EncodedTablePage encodedTablePage) {
1:     addPageMetadata(encodedTablePage);
1:     addEncodedDimensionPage(encodedTablePage);
1:     addEncodedMeasurePage(encodedTablePage);
1:   }
1: 
1:   public int getBlockletSize() {
1:     return blockletSize;
1:   }
1: 
1:   public List<TablePageKey> getPageMetadataList() {
1:     return pageMetadataList;
1:   }
1: 
1:   public List<BlockletEncodedColumnPage> getEncodedDimensionColumnPages() {
1:     return encodedDimensionColumnPages;
1:   }
1: 
1:   public List<BlockletEncodedColumnPage> getEncodedMeasureColumnPages() {
1:     return encodedMeasureColumnPages;
1:   }
1: 
1:   public int getNumberOfDimension() {
1:     return encodedDimensionColumnPages.size();
1:   }
1: 
1:   public int getNumberOfMeasure() {
1:     return encodedMeasureColumnPages.size();
1:   }
1: 
1:   public int getNumberOfPages() {
1:     return this.numberOfPages;
1:   }
1: 
1:   public void clear() {
1:     this.numberOfPages = 0;
1:     this.encodedDimensionColumnPages = null;
1:     this.blockletSize = 0;
1:     this.encodedMeasureColumnPages = null;
1:     this.pageMetadataList = null;
1:   }
1: }
============================================================================