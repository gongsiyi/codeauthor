1:e710339: /*
1:e710339:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e710339:  * contributor license agreements.  See the NOTICE file distributed with
1:e710339:  * this work for additional information regarding copyright ownership.
1:e710339:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e710339:  * (the "License"); you may not use this file except in compliance with
1:e710339:  * the License.  You may obtain a copy of the License at
1:e710339:  *
1:e710339:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e710339:  *
1:e710339:  * Unless required by applicable law or agreed to in writing, software
1:e710339:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e710339:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e710339:  * See the License for the specific language governing permissions and
1:e710339:  * limitations under the License.
1:e710339:  */
1:e710339: package org.apache.carbondata.core.localdictionary.dictionaryholder;
1:e710339: 
1:e710339: import java.util.Map;
1:e710339: import java.util.concurrent.ConcurrentHashMap;
1:e710339: 
1:e710339: import org.apache.carbondata.core.cache.dictionary.DictionaryByteArrayWrapper;
1:e710339: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1:e710339: 
1:e710339: /**
1:e710339:  * Map based dictionary holder class, it will use map to hold
1:e710339:  * the dictionary key and its value
1:e710339:  */
1:e710339: public class MapBasedDictionaryStore implements DictionaryStore {
1:e710339: 
1:e710339:   /**
1:e710339:    * use to assign dictionary value to new key
1:e710339:    */
1:e710339:   private int lastAssignValue;
1:e710339: 
1:e710339:   /**
1:e710339:    * to maintain dictionary key value
1:e710339:    */
1:e710339:   private final Map<DictionaryByteArrayWrapper, Integer> dictionary;
1:e710339: 
1:e710339:   /**
1:e710339:    * maintaining array for reverse lookup
1:e710339:    * otherwise iterating everytime in map for reverse lookup will be slowdown the performance
1:e710339:    * It will only maintain the reference
1:e710339:    */
1:e710339:   private DictionaryByteArrayWrapper[] referenceDictionaryArray;
1:e710339: 
1:e710339:   /**
1:e710339:    * dictionary threshold to check if threshold is reached
1:e710339:    */
1:e710339:   private int dictionaryThreshold;
1:e710339: 
1:e710339:   /**
1:e710339:    * for checking threshold is reached or not
1:e710339:    */
1:e710339:   private boolean isThresholdReached;
1:e710339: 
1:005db3f:   /**
1:005db3f:    * current datasize
1:005db3f:    */
1:005db3f:   private long currentSize;
1:005db3f: 
1:e710339:   public MapBasedDictionaryStore(int dictionaryThreshold) {
1:e710339:     this.dictionaryThreshold = dictionaryThreshold;
1:e710339:     this.dictionary = new ConcurrentHashMap<>();
1:e710339:     this.referenceDictionaryArray = new DictionaryByteArrayWrapper[dictionaryThreshold];
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to add dictionary value to dictionary holder
1:e710339:    * if it is already present in the holder then it will return exiting dictionary value.
1:e710339:    *
1:e710339:    * @param data dictionary key
1:e710339:    * @return dictionary value
1:e710339:    */
1:e710339:   @Override public int putIfAbsent(byte[] data) throws DictionaryThresholdReachedException {
1:e710339:     // check if threshold has already reached
1:e710339:     checkIfThresholdReached();
1:e710339:     DictionaryByteArrayWrapper key = new DictionaryByteArrayWrapper(data);
1:e710339:     // get the dictionary value
1:e710339:     Integer value = dictionary.get(key);
1:e710339:     // if value is null then dictionary is not present in store
1:e710339:     if (null == value) {
1:e710339:       // aquire the lock
1:e710339:       synchronized (dictionary) {
1:e710339:         // check threshold
1:e710339:         checkIfThresholdReached();
1:e710339:         // get the value again as other thread might have added
1:e710339:         value = dictionary.get(key);
1:e710339:         // double chekcing
1:e710339:         if (null == value) {
1:e710339:           // increment the value
1:e710339:           value = ++lastAssignValue;
1:005db3f:           currentSize += data.length;
1:e710339:           // if new value is greater than threshold
1:005db3f:           if (value > dictionaryThreshold || currentSize >= Integer.MAX_VALUE) {
1:e710339:             // set the threshold boolean to true
1:e710339:             isThresholdReached = true;
1:e710339:             // throw exception
1:e710339:             checkIfThresholdReached();
1:e710339:           }
1:e710339:           // add to reference array
1:e710339:           // position is -1 as dictionary value starts from 1
1:e710339:           this.referenceDictionaryArray[value - 1] = key;
1:e710339:           dictionary.put(key, value);
1:e710339:         }
1:e710339:       }
1:e710339:     }
1:e710339:     return value;
1:e710339:   }
1:e710339: 
1:e710339:   private void checkIfThresholdReached() throws DictionaryThresholdReachedException {
1:e710339:     if (isThresholdReached) {
1:005db3f:       if (currentSize >= Integer.MAX_VALUE) {
1:005db3f:         throw new DictionaryThresholdReachedException(
1:005db3f:             "Unable to generate dictionary. Dictionary Size crossed 2GB limit");
1:005db3f:       } else {
1:005db3f:         throw new DictionaryThresholdReachedException(
1:005db3f:             "Unable to generate dictionary value. Dictionary threshold reached");
1:005db3f:       }
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method to get the current size of dictionary
1:e710339:    *
1:e710339:    * @return
1:e710339:    */
1:e710339:   @Override public boolean isThresholdReached() {
1:e710339:     return isThresholdReached;
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to get the dictionary key based on value
1:e710339:    *
1:e710339:    * @param value dictionary value
1:e710339:    *              Caller will take of passing proper value
1:e710339:    * @return dictionary key based on value
1:e710339:    */
1:e710339:   @Override public byte[] getDictionaryKeyBasedOnValue(int value) {
1:e710339:     assert referenceDictionaryArray != null;
1:e710339:     // reference array index will be -1 of the value as dictionary value starts from 1
1:e710339:     return referenceDictionaryArray[value - 1].getData();
1:e710339:   }
1:e710339: }
============================================================================
author:BJangir
-------------------------------------------------------------------------------
commit:005db3f
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * current datasize
1:    */
1:   private long currentSize;
1: 
/////////////////////////////////////////////////////////////////////////
1:           currentSize += data.length;
1:           if (value > dictionaryThreshold || currentSize >= Integer.MAX_VALUE) {
/////////////////////////////////////////////////////////////////////////
1:       if (currentSize >= Integer.MAX_VALUE) {
1:         throw new DictionaryThresholdReachedException(
1:             "Unable to generate dictionary. Dictionary Size crossed 2GB limit");
1:       } else {
1:         throw new DictionaryThresholdReachedException(
1:             "Unable to generate dictionary value. Dictionary threshold reached");
1:       }
author:kumarvishal09
-------------------------------------------------------------------------------
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.localdictionary.dictionaryholder;
1: 
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.carbondata.core.cache.dictionary.DictionaryByteArrayWrapper;
1: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1: 
1: /**
1:  * Map based dictionary holder class, it will use map to hold
1:  * the dictionary key and its value
1:  */
1: public class MapBasedDictionaryStore implements DictionaryStore {
1: 
1:   /**
1:    * use to assign dictionary value to new key
1:    */
1:   private int lastAssignValue;
1: 
1:   /**
1:    * to maintain dictionary key value
1:    */
1:   private final Map<DictionaryByteArrayWrapper, Integer> dictionary;
1: 
1:   /**
1:    * maintaining array for reverse lookup
1:    * otherwise iterating everytime in map for reverse lookup will be slowdown the performance
1:    * It will only maintain the reference
1:    */
1:   private DictionaryByteArrayWrapper[] referenceDictionaryArray;
1: 
1:   /**
1:    * dictionary threshold to check if threshold is reached
1:    */
1:   private int dictionaryThreshold;
1: 
1:   /**
1:    * for checking threshold is reached or not
1:    */
1:   private boolean isThresholdReached;
1: 
1:   public MapBasedDictionaryStore(int dictionaryThreshold) {
1:     this.dictionaryThreshold = dictionaryThreshold;
1:     this.dictionary = new ConcurrentHashMap<>();
1:     this.referenceDictionaryArray = new DictionaryByteArrayWrapper[dictionaryThreshold];
1:   }
1: 
1:   /**
1:    * Below method will be used to add dictionary value to dictionary holder
1:    * if it is already present in the holder then it will return exiting dictionary value.
1:    *
1:    * @param data dictionary key
1:    * @return dictionary value
1:    */
1:   @Override public int putIfAbsent(byte[] data) throws DictionaryThresholdReachedException {
1:     // check if threshold has already reached
1:     checkIfThresholdReached();
1:     DictionaryByteArrayWrapper key = new DictionaryByteArrayWrapper(data);
1:     // get the dictionary value
1:     Integer value = dictionary.get(key);
1:     // if value is null then dictionary is not present in store
1:     if (null == value) {
1:       // aquire the lock
1:       synchronized (dictionary) {
1:         // check threshold
1:         checkIfThresholdReached();
1:         // get the value again as other thread might have added
1:         value = dictionary.get(key);
1:         // double chekcing
1:         if (null == value) {
1:           // increment the value
1:           value = ++lastAssignValue;
1:           // if new value is greater than threshold
0:           if (value > dictionaryThreshold) {
0:             // clear the dictionary
0:             dictionary.clear();
0:             referenceDictionaryArray = null;
1:             // set the threshold boolean to true
1:             isThresholdReached = true;
1:             // throw exception
1:             checkIfThresholdReached();
1:           }
1:           // add to reference array
1:           // position is -1 as dictionary value starts from 1
1:           this.referenceDictionaryArray[value - 1] = key;
1:           dictionary.put(key, value);
1:         }
1:       }
1:     }
1:     return value;
1:   }
1: 
1:   private void checkIfThresholdReached() throws DictionaryThresholdReachedException {
1:     if (isThresholdReached) {
0:       throw new DictionaryThresholdReachedException(
0:           "Unable to generate dictionary value. Dictionary threshold reached");
1:     }
1:   }
1: 
1:   /**
1:    * Below method to get the current size of dictionary
1:    *
1:    * @return
1:    */
1:   @Override public boolean isThresholdReached() {
1:     return isThresholdReached;
1:   }
1: 
1:   /**
1:    * Below method will be used to get the dictionary key based on value
1:    *
1:    * @param value dictionary value
1:    *              Caller will take of passing proper value
1:    * @return dictionary key based on value
1:    */
1:   @Override public byte[] getDictionaryKeyBasedOnValue(int value) {
1:     assert referenceDictionaryArray != null;
1:     // reference array index will be -1 of the value as dictionary value starts from 1
1:     return referenceDictionaryArray[value - 1].getData();
1:   }
1: }
============================================================================