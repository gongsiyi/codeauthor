1:05086e5: /*
1:05086e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:05086e5:  * contributor license agreements.  See the NOTICE file distributed with
1:05086e5:  * this work for additional information regarding copyright ownership.
1:05086e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:05086e5:  * (the "License"); you may not use this file except in compliance with
1:05086e5:  * the License.  You may obtain a copy of the License at
1:05086e5:  *
1:05086e5:  *    http://www.apache.org/licenses/LICENSE-2.0
1:05086e5:  *
1:05086e5:  * Unless required by applicable law or agreed to in writing, software
1:05086e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:05086e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:05086e5:  * See the License for the specific language governing permissions and
1:05086e5:  * limitations under the License.
1:05086e5:  */
1:05086e5: 
1:05086e5: package org.apache.carbondata.core.metadata.schema.table;
1:05086e5: 
1:05086e5: import java.io.IOException;
1:05086e5: import java.util.List;
1:05086e5: 
1:05086e5: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:5f2a748: import org.apache.carbondata.common.exceptions.sql.NoSuchDataMapException;
1:05086e5: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:05086e5: 
1:05086e5: /**
1:05086e5:  *It is used to save/retreive/drop datamap schema from storage medium like disk or DB.
1:05086e5:  * Here dataMapName must be unique across whole store.
1:05086e5:  *
1:05086e5:  * @since 1.4.0
1:05086e5:  */
1:05086e5: @InterfaceAudience.Internal
1:05086e5: public interface DataMapSchemaStorageProvider {
1:05086e5: 
1:05086e5:   /**
1:05086e5:    * Save the schema to storage medium.
1:05086e5:    * @param dataMapSchema
1:05086e5:    */
1:05086e5:   void saveSchema(DataMapSchema dataMapSchema) throws IOException;
1:05086e5: 
1:05086e5:   /**
1:05086e5:    * Retrieve the schema by using dataMapName.
1:05086e5:    * @param dataMapName
1:05086e5:    */
1:5f2a748:   DataMapSchema retrieveSchema(String dataMapName) throws IOException, NoSuchDataMapException;
1:05086e5: 
1:05086e5:   /**
1:5f2a748:    * Retrieve schemas of the given table.
1:5f2a748:    * @param table
1:05086e5:    * @return
1:05086e5:    * @throws IOException
1:05086e5:    */
1:5f2a748:   List<DataMapSchema> retrieveSchemas(CarbonTable table) throws IOException;
1:05086e5: 
1:05086e5:   /**
1:5f2a748:    * Retrieve all datamap schemas from store.
1:05086e5:    * @return
1:05086e5:    * @throws IOException
1:05086e5:    */
1:05086e5:   List<DataMapSchema> retrieveAllSchemas() throws IOException;
1:05086e5: 
1:05086e5:   /**
1:05086e5:    * Drop the schema from the storage by using dataMapName.
1:05086e5:    * @param dataMapName
1:05086e5:    */
1:5f2a748:   void dropSchema(String dataMapName) throws IOException;
1:05086e5: 
1:05086e5: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:5f2a748
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.exceptions.sql.NoSuchDataMapException;
/////////////////////////////////////////////////////////////////////////
1:   DataMapSchema retrieveSchema(String dataMapName) throws IOException, NoSuchDataMapException;
1:    * Retrieve schemas of the given table.
1:    * @param table
1:   List<DataMapSchema> retrieveSchemas(CarbonTable table) throws IOException;
1:    * Retrieve all datamap schemas from store.
/////////////////////////////////////////////////////////////////////////
1:   void dropSchema(String dataMapName) throws IOException;
commit:05086e5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.schema.table;
1: 
1: import java.io.IOException;
1: import java.util.List;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1: 
1: /**
1:  *It is used to save/retreive/drop datamap schema from storage medium like disk or DB.
1:  * Here dataMapName must be unique across whole store.
1:  *
1:  * @since 1.4.0
1:  */
1: @InterfaceAudience.Internal
1: public interface DataMapSchemaStorageProvider {
1: 
1:   /**
1:    * Save the schema to storage medium.
1:    * @param dataMapSchema
1:    */
1:   void saveSchema(DataMapSchema dataMapSchema) throws IOException;
1: 
1:   /**
1:    * Retrieve the schema by using dataMapName.
1:    * @param dataMapName
1:    */
0:   DataMapSchema retrieveSchema(String dataMapName) throws IOException;
1: 
1:   /**
0:    * Retrieve schemas by using the list of datamap names
0:    * @param dataMapNames
1:    * @return
1:    * @throws IOException
1:    */
0:   List<DataMapSchema> retrieveSchemas(List<String> dataMapNames) throws IOException;
1: 
1:   /**
0:    * Retrieve all schemas
1:    * @return
1:    * @throws IOException
1:    */
1:   List<DataMapSchema> retrieveAllSchemas() throws IOException;
1: 
1:   /**
1:    * Drop the schema from the storage by using dataMapName.
1:    * @param dataMapName
1:    */
0:   void dropSchema(String dataMapName) throws IOException;
1: 
1: }
author:akashrn5
-------------------------------------------------------------------------------
commit:860e144
/////////////////////////////////////////////////////////////////////////
0:   void dropSchema(String dataMapName, String tableName, String dataMapProviderName)
0:       throws IOException;
============================================================================