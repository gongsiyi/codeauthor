1:779fd08: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:779fd08:  *
1:779fd08:  *    http://www.apache.org/licenses/LICENSE-2.0
1:779fd08:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:779fd08:  */
1:779fd08: 
1:349c59c: package org.apache.carbondata.processing.loading.row;
1:779fd08: 
1:06b0d08: import java.util.NoSuchElementException;
1:06b0d08: 
1:b13ead9: import org.apache.carbondata.common.CarbonIterator;
1:dc83b2a: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:06b0d08: 
1:2ebfab1: import org.apache.commons.lang.ArrayUtils;
1:779fd08: 
1:779fd08: /**
1:779fd08:  * Batch of rows.
1:779fd08:  */
1:b13ead9: public class CarbonRowBatch extends CarbonIterator<CarbonRow> {
1:779fd08: 
1:c5aba5f:   private CarbonRow[] rowBatch;
1:779fd08: 
1:c5aba5f:   private int size = 0;
2:c5aba5f: 
1:c5aba5f:   private int index = 0;
1:c5aba5f: 
1:c5aba5f:   public CarbonRowBatch(int batchSize) {
1:c5aba5f:     this.rowBatch = new CarbonRow[batchSize];
1:c5aba5f:   }
1:c5aba5f: 
1:779fd08:   public void addRow(CarbonRow carbonRow) {
1:c5aba5f:     rowBatch[size++] = carbonRow;
1:779fd08:   }
1:779fd08: 
1:30f575f:   public int getSize() {
1:c5aba5f:     return size;
1:30f575f:   }
1:779fd08: 
1:c5aba5f:   @Override public boolean hasNext() {
1:c5aba5f:     return index < size;
1:779fd08:   }
1:779fd08: 
1:06b0d08:   @Override
1:06b0d08:   public CarbonRow next() throws NoSuchElementException {
1:06b0d08:     if (hasNext()) {
1:06b0d08:       return rowBatch[index++];
1:06b0d08:     }
1:06b0d08:     throw new NoSuchElementException("no more elements to iterate");
1:779fd08:   }
1:c5aba5f: 
1:c5aba5f:   @Override public void remove() {
1:2ebfab1:     rowBatch = (CarbonRow[]) ArrayUtils.remove(rowBatch, index - 1);
1:2ebfab1:     --size;
1:2ebfab1:     --index;
1:c5aba5f:   }
1:95b9208: 
1:95b9208:   /**
1:95b9208:    * set previous row, this can be used to set value for the RowBatch after iterating it. The
1:95b9208:    * `index` here is `index-1` because after we iterate this value, the `index` has increased by 1.
1:95b9208:    * @param row row
1:95b9208:    */
1:95b9208:   public void setPreviousRow(CarbonRow row) {
1:95b9208:     if (index == 0) {
1:95b9208:       throw new RuntimeException("Unable to set a row in RowBatch before index 0");
1:95b9208:     }
1:95b9208:     rowBatch[index - 1] = row;
1:95b9208:   }
1:95b9208: 
1:95b9208:   /**
1:95b9208:    * rewind to the head, this can be used for reuse the origin batch instead of generating a new one
1:95b9208:    */
1:95b9208:   public void rewind() {
1:95b9208:     index = 0;
1:95b9208:   }
1:c5aba5f: }
============================================================================
author:Geetika Gupta
-------------------------------------------------------------------------------
commit:2ebfab1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang.ArrayUtils;
/////////////////////////////////////////////////////////////////////////
1:     rowBatch = (CarbonRow[]) ArrayUtils.remove(rowBatch, index - 1);
1:     --size;
1:     --index;
author:xuchuanyin
-------------------------------------------------------------------------------
commit:95b9208
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * set previous row, this can be used to set value for the RowBatch after iterating it. The
1:    * `index` here is `index-1` because after we iterate this value, the `index` has increased by 1.
1:    * @param row row
1:    */
1:   public void setPreviousRow(CarbonRow row) {
1:     if (index == 0) {
1:       throw new RuntimeException("Unable to set a row in RowBatch before index 0");
1:     }
1:     rowBatch[index - 1] = row;
1:   }
1: 
1:   /**
1:    * rewind to the head, this can be used for reuse the origin batch instead of generating a new one
1:    */
1:   public void rewind() {
1:     index = 0;
1:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.row;
author:Raghunandan S
-------------------------------------------------------------------------------
commit:06b0d08
/////////////////////////////////////////////////////////////////////////
1: import java.util.NoSuchElementException;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public CarbonRow next() throws NoSuchElementException {
1:     if (hasNext()) {
1:       return rowBatch[index++];
1:     }
1:     throw new NoSuchElementException("no more elements to iterate");
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
author:ravipesala
-------------------------------------------------------------------------------
commit:b13ead9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.CarbonIterator;
1: public class CarbonRowBatch extends CarbonIterator<CarbonRow> {
commit:30f575f
/////////////////////////////////////////////////////////////////////////
1:   public int getSize() {
0:     return rowBatch.size();
1:   }
commit:779fd08
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.newflow.row;
1: 
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.List;
1: 
1: /**
1:  * Batch of rows.
1:  */
0: public class CarbonRowBatch {
1: 
0:   private List<CarbonRow> rowBatch = new ArrayList<>();
1: 
1:   public void addRow(CarbonRow carbonRow) {
0:     rowBatch.add(carbonRow);
1:   }
1: 
0:   public Iterator<CarbonRow> getBatchIterator() {
0:     return rowBatch.iterator();
1:   }
1: 
1: 
1: }
author:QiangCai
-------------------------------------------------------------------------------
commit:c5aba5f
/////////////////////////////////////////////////////////////////////////
0: public class CarbonRowBatch implements Iterator<CarbonRow> {
1:   private CarbonRow[] rowBatch;
1:   private int size = 0;
1: 
1:   private int index = 0;
1: 
1:   public CarbonRowBatch(int batchSize) {
1:     this.rowBatch = new CarbonRow[batchSize];
0:   public void addRow(CarbonRow carbonRow) {
1:     rowBatch[size++] = carbonRow;
1:     return size;
1:   @Override public boolean hasNext() {
1:     return index < size;
1:   }
1: 
0:   @Override public CarbonRow next() {
0:     return rowBatch[index++];
1:   }
1: 
1:   @Override public void remove() {
1: 
1:   }
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
============================================================================