1:05b2654: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
3:05b2654:  *
1:05b2654:  *    http://www.apache.org/licenses/LICENSE-2.0
1:05b2654:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
5:05b2654:  */
1:4daf063: 
1:05b2654: package org.apache.carbondata.core.dictionary.client;
7:05b2654: 
1:87dade7: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:05b2654: 
1:4daf063: public interface DictionaryClient {
1:05b2654: 
1:f911403:   void startClient(String secretKey, String address, int port, boolean encryptSecureServer);
1:05b2654: 
1:f911403:   void shutDown();
1:05b2654: 
1:f911403:   DictionaryMessage getDictionary(DictionaryMessage key);
1:87dade7: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:   void startClient(String secretKey, String address, int port, boolean encryptSecureServer);
1:   void shutDown();
1:   DictionaryMessage getDictionary(DictionaryMessage key);
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: 
1: public interface DictionaryClient {
0:   public void startClient(String secretKey, String address, int port, boolean encryptSecureServer);
0:   public void shutDown();
0:   public DictionaryMessage getDictionary(DictionaryMessage key);
author:kunal642
-------------------------------------------------------------------------------
commit:8815dd5
/////////////////////////////////////////////////////////////////////////
0:     LOGGER.audit("Starting client on " + address + " " + port);
0:     // Create an Event with 1 thread.
0:     workerGroup = new NioEventLoopGroup(1);
/////////////////////////////////////////////////////////////////////////
0:                 .addLast("LengthDecoder",
0:                     new LengthFieldBasedFrameDecoder(1048576, 0,
0:                         2, 0, 2));
author:ravipesala
-------------------------------------------------------------------------------
commit:6a9c79c
/////////////////////////////////////////////////////////////////////////
0: import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
/////////////////////////////////////////////////////////////////////////
0:             // Based on length provided at header, it collects all packets
0:             pipeline
0:                 .addLast("LengthDecoder", new LengthFieldBasedFrameDecoder(1048576, 0, 2, 0, 2));
commit:87dade7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
0: import io.netty.bootstrap.Bootstrap;
0: import io.netty.channel.ChannelInitializer;
0: import io.netty.channel.ChannelPipeline;
0: import io.netty.channel.nio.NioEventLoopGroup;
0: import io.netty.channel.socket.SocketChannel;
0: import io.netty.channel.socket.nio.NioSocketChannel;
/////////////////////////////////////////////////////////////////////////
0:   private NioEventLoopGroup workerGroup;
/////////////////////////////////////////////////////////////////////////
0:     long start = System.currentTimeMillis();
0:     workerGroup = new NioEventLoopGroup();
0:     Bootstrap clientBootstrap = new Bootstrap();
0:     clientBootstrap.group(workerGroup).channel(NioSocketChannel.class)
0:         .handler(new ChannelInitializer<SocketChannel>() {
0:           @Override public void initChannel(SocketChannel ch) throws Exception {
0:             ChannelPipeline pipeline = ch.pipeline();
0:             pipeline.addLast("DictionaryClientHandler", dictionaryClientHandler);
1:           }
0:         });
0:     LOGGER.info(
0:         "Dictionary client Started, Total time spent : " + (System.currentTimeMillis() - start));
/////////////////////////////////////////////////////////////////////////
0:   public DictionaryMessage getDictionary(DictionaryMessage key) {
/////////////////////////////////////////////////////////////////////////
0:     workerGroup.shutdownGracefully();
0:     try {
0:       workerGroup.terminationFuture().sync();
0:     } catch (InterruptedException e) {
0:       LOGGER.error(e);
0:     }
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.dictionary.client;
1: 
0: import java.net.InetSocketAddress;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
1: 
0: import org.apache.carbondata.common.logging.LogService;
0: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.dictionary.generator.key.DictionaryKey;
1: 
0: import org.jboss.netty.bootstrap.ClientBootstrap;
0: import org.jboss.netty.channel.*;
0: import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;
0: import org.jboss.netty.handler.codec.serialization.ClassResolvers;
0: import org.jboss.netty.handler.codec.serialization.ObjectDecoder;
0: import org.jboss.netty.handler.codec.serialization.ObjectEncoder;
1: 
1: 
0: /**
0:  * Dictionary client to connect to Dictionary server and generate dictionary values
1:  */
0: public class DictionaryClient {
1: 
0:   private static final LogService LOGGER =
0:           LogServiceFactory.getLogService(DictionaryClient.class.getName());
1: 
0:   private DictionaryClientHandler dictionaryClientHandler = new DictionaryClientHandler();
1: 
0:   private ClientBootstrap clientBootstrap;
1: 
0:   /**
0:    * start dictionary client
1:    *
0:    * @param address
0:    * @param port
1:    */
0:   public void startClient(String address, int port) {
0:     clientBootstrap = new ClientBootstrap();
0:     ExecutorService boss = Executors.newCachedThreadPool();
0:     ExecutorService worker = Executors.newCachedThreadPool();
0:     clientBootstrap.setFactory(new NioClientSocketChannelFactory(boss, worker));
0:     clientBootstrap.setPipelineFactory(new ChannelPipelineFactory() {
0:       @Override
0:       public ChannelPipeline getPipeline() throws Exception {
0:         ChannelPipeline pipeline = Channels.pipeline();
0:         pipeline.addLast("ObjectEncoder", new ObjectEncoder());
0:         pipeline.addLast("ObjectDecoder", new ObjectDecoder(ClassResolvers.cacheDisabled(
0:             getClass().getClassLoader())));
0:         pipeline.addLast("DictionaryClientHandler", dictionaryClientHandler);
0:         return pipeline;
0:       }
0:     });
0:     clientBootstrap.connect(new InetSocketAddress(address, port));
0:     LOGGER.audit("Client Start!");
0:   }
1: 
0:   /**
0:    * for client request
1:    *
0:    * @param key
0:    * @return
1:    */
0:   public DictionaryKey getDictionary(DictionaryKey key) {
0:     return dictionaryClientHandler.getDictionary(key);
0:   }
1: 
0:   /**
0:    * shutdown dictionary client
1:    */
0:   public void shutDown() {
0:     clientBootstrap.releaseExternalResources();
0:     clientBootstrap.shutdown();
0:   }
0: }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.jboss.netty.channel.ChannelPipeline;
0: import org.jboss.netty.channel.ChannelPipelineFactory;
0: import org.jboss.netty.channel.Channels;
============================================================================