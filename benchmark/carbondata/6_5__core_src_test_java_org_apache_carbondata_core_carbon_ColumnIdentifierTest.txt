1:3f23733: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:3f23733:  *
1:3f23733:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3f23733:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:3f23733:  */
1:3f23733: package org.apache.carbondata.core.carbon;
1:3f23733: 
1:ce09aaa: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:3f23733: 
1:29be1d0: import org.junit.Assert;
1:3f23733: import org.junit.BeforeClass;
1:3f23733: import org.junit.Test;
1:3f23733: 
1:3f23733: import java.util.HashMap;
1:3f23733: import java.util.Map;
1:3f23733: 
1:3f23733: import static junit.framework.TestCase.assertEquals;
1:3f23733: 
1:3f23733: public class ColumnIdentifierTest {
1:3f23733: 
1:3f23733:   static ColumnIdentifier columnIdentifier;
1:3f23733:   static Map<String, String> columnProperties;
1:3f23733: 
1:3f23733:   @BeforeClass public static void setup() {
1:3f23733:     columnProperties = new HashMap<String, String>();
1:3f23733:     columnProperties.put("key", "value");
1:956833e:     columnIdentifier = new ColumnIdentifier("columnId", columnProperties, DataTypes.INT);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void hashCodeTest() {
1:3f23733:     int res = columnIdentifier.hashCode();
1:3f23733:     int expectedResult = -623419600;
1:3f23733:     assertEquals(res, expectedResult);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestwithSameObject() {
1:3f23733:     Boolean res = columnIdentifier.equals(columnIdentifier);
1:29be1d0:     Assert.assertTrue(res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestwithSimilarObject() {
1:3f23733:     ColumnIdentifier columnIdentifierTest =
1:956833e:         new ColumnIdentifier("columnId", columnProperties, DataTypes.INT);
1:3f23733:     Boolean res = columnIdentifier.equals(columnIdentifierTest);
1:29be1d0:     Assert.assertTrue(res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestwithNullObject() {
1:3f23733:     Boolean res = columnIdentifier.equals(null);
1:29be1d0:     Assert.assertTrue(!res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestwithStringObject() {
1:3f23733:     Boolean res = columnIdentifier.equals("String Object");
1:29be1d0:     Assert.assertTrue(!res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestwithNullColumnId() {
1:3f23733:     ColumnIdentifier columnIdentifierTest =
1:956833e:         new ColumnIdentifier(null, columnProperties, DataTypes.INT);
1:3f23733:     Boolean res = columnIdentifierTest.equals(columnIdentifier);
1:29be1d0:     Assert.assertTrue(!res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void equalsTestwithDiffColumnId() {
1:3f23733:     ColumnIdentifier columnIdentifierTest =
1:956833e:         new ColumnIdentifier("diffColumnId", columnProperties, DataTypes.INT);
1:3f23733:     Boolean res = columnIdentifierTest.equals(columnIdentifier);
1:29be1d0:     Assert.assertTrue(!res);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void toStringTest() {
1:3f23733:     String res = columnIdentifier.toString();
1:29be1d0:     Assert.assertTrue(res.equals("ColumnIdentifier [columnId=columnId]"));
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void getColumnPropertyTest() {
1:3f23733:     ColumnIdentifier columnIdentifierTest =
1:956833e:         new ColumnIdentifier("diffColumnId", null, DataTypes.INT);
1:3f23733:     String res = columnIdentifierTest.getColumnProperty("key");
1:3f23733:     assertEquals(res, null);
1:3f23733:   }
1:3f23733: 
1:3f23733:   @Test public void getColumnPropertyTestwithNull() {
1:29be1d0:     Assert.assertTrue(columnIdentifier.getColumnProperty("key").equals("value"));
1:3f23733:   }
1:3f23733: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:29be1d0
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(res);
1:     Assert.assertTrue(res);
1:     Assert.assertTrue(!res);
1:     Assert.assertTrue(!res);
1:     Assert.assertTrue(!res);
1:     Assert.assertTrue(!res);
1:     Assert.assertTrue(res.equals("ColumnIdentifier [columnId=columnId]"));
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(columnIdentifier.getColumnProperty("key").equals("value"));
author:xubo245
-------------------------------------------------------------------------------
commit:e2a2d99
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     columnIdentifier = new ColumnIdentifier("columnId", columnProperties, DataTypes.INT);
/////////////////////////////////////////////////////////////////////////
1:         new ColumnIdentifier("columnId", columnProperties, DataTypes.INT);
/////////////////////////////////////////////////////////////////////////
1:         new ColumnIdentifier(null, columnProperties, DataTypes.INT);
1:         new ColumnIdentifier("diffColumnId", columnProperties, DataTypes.INT);
/////////////////////////////////////////////////////////////////////////
1:         new ColumnIdentifier("diffColumnId", null, DataTypes.INT);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.ColumnIdentifier;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
author:rahulforallp
-------------------------------------------------------------------------------
commit:3f23733
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.carbon;
1: 
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import static junit.framework.TestCase.assertEquals;
1: 
1: public class ColumnIdentifierTest {
1: 
1:   static ColumnIdentifier columnIdentifier;
1:   static Map<String, String> columnProperties;
1: 
1:   @BeforeClass public static void setup() {
1:     columnProperties = new HashMap<String, String>();
1:     columnProperties.put("key", "value");
0:     columnIdentifier = new ColumnIdentifier("columnId", columnProperties, DataType.INT);
1:   }
1: 
1:   @Test public void hashCodeTest() {
1:     int res = columnIdentifier.hashCode();
1:     int expectedResult = -623419600;
1:     assertEquals(res, expectedResult);
1:   }
1: 
1:   @Test public void equalsTestwithSameObject() {
1:     Boolean res = columnIdentifier.equals(columnIdentifier);
0:     assert (res);
1:   }
1: 
1:   @Test public void equalsTestwithSimilarObject() {
1:     ColumnIdentifier columnIdentifierTest =
0:         new ColumnIdentifier("columnId", columnProperties, DataType.INT);
1:     Boolean res = columnIdentifier.equals(columnIdentifierTest);
0:     assert (res);
1:   }
1: 
1:   @Test public void equalsTestwithNullObject() {
1:     Boolean res = columnIdentifier.equals(null);
0:     assert (!res);
1:   }
1: 
1:   @Test public void equalsTestwithStringObject() {
1:     Boolean res = columnIdentifier.equals("String Object");
0:     assert (!res);
1:   }
1: 
1:   @Test public void equalsTestwithNullColumnId() {
1:     ColumnIdentifier columnIdentifierTest =
0:         new ColumnIdentifier(null, columnProperties, DataType.INT);
1:     Boolean res = columnIdentifierTest.equals(columnIdentifier);
0:     assert (!res);
1:   }
1: 
1:   @Test public void equalsTestwithDiffColumnId() {
1:     ColumnIdentifier columnIdentifierTest =
0:         new ColumnIdentifier("diffColumnId", columnProperties, DataType.INT);
1:     Boolean res = columnIdentifierTest.equals(columnIdentifier);
0:     assert (!res);
1:   }
1: 
1:   @Test public void toStringTest() {
1:     String res = columnIdentifier.toString();
0:     assert (res.equals("ColumnIdentifier [columnId=columnId]"));
1:   }
1: 
1:   @Test public void getColumnPropertyTest() {
1:     ColumnIdentifier columnIdentifierTest =
0:         new ColumnIdentifier("diffColumnId", null, DataType.INT);
1:     String res = columnIdentifierTest.getColumnProperty("key");
1:     assertEquals(res, null);
1:   }
1: 
1:   @Test public void getColumnPropertyTestwithNull() {
0:     assert (columnIdentifier.getColumnProperty("key").equals("value"));
1:   }
1: }
============================================================================