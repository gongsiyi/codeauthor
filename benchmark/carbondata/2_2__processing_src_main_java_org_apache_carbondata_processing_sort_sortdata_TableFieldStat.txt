1:2b41f14: /*
1:2b41f14:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2b41f14:  * contributor license agreements.  See the NOTICE file distributed with
1:2b41f14:  * this work for additional information regarding copyright ownership.
1:2b41f14:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2b41f14:  * (the "License"); you may not use this file except in compliance with
1:2b41f14:  * the License.  You may obtain a copy of the License at
1:2b41f14:  *
1:2b41f14:  *    http://www.apache.org/licenses/LICENSE-2.0
1:2b41f14:  *
1:2b41f14:  * Unless required by applicable law or agreed to in writing, software
1:2b41f14:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2b41f14:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2b41f14:  * See the License for the specific language governing permissions and
1:2b41f14:  * limitations under the License.
1:2b41f14:  */
1:2b41f14: 
1:2b41f14: package org.apache.carbondata.processing.sort.sortdata;
1:2b41f14: 
1:2b41f14: import java.io.Serializable;
1:2b41f14: import java.util.Objects;
1:2b41f14: 
1:2b41f14: import org.apache.carbondata.core.metadata.datatype.DataType;
1:2b41f14: 
1:2b41f14: /**
1:2b41f14:  * This class is used to hold field information for a table during data loading. These information
1:2b41f14:  * will be used to convert/construct/destruct row in sort process step. Because complex field is
1:2b41f14:  * processed the same as no-dict-no-sort-simple-dimension, so we treat them as the same and use
1:2b41f14:  * `no-dict-no-sort-dim` related variable to represent them in this class.
1:2b41f14:  */
1:2b41f14: public class TableFieldStat implements Serializable {
1:2b41f14:   private static final long serialVersionUID = 201712070950L;
1:2b41f14:   private int dictSortDimCnt = 0;
1:2b41f14:   private int dictNoSortDimCnt = 0;
1:2b41f14:   private int noDictSortDimCnt = 0;
1:11fb422:   // for columns that are no_dict_dim and no_sort_dim, except complex/varchar dims
1:2b41f14:   private int noDictNoSortDimCnt = 0;
1:11fb422:   // for columns that are complex data type
1:11fb422:   private int complexDimCnt = 0;
1:dc53dee:   // for columns that are varchar data type
1:dc53dee:   private int varcharDimCnt = 0;
1:2b41f14:   // whether sort column is of dictionary type or not
1:2b41f14:   private boolean[] isSortColNoDictFlags;
1:dc53dee:   private boolean[] isVarcharDimFlags;
1:2b41f14:   private int measureCnt;
1:2b41f14:   private DataType[] measureDataType;
1:2b41f14: 
1:2b41f14:   // indices for dict & sort dimension columns
1:2b41f14:   private int[] dictSortDimIdx;
1:2b41f14:   // indices for dict & no-sort dimension columns
1:2b41f14:   private int[] dictNoSortDimIdx;
1:2b41f14:   // indices for no-dict & sort dimension columns
1:2b41f14:   private int[] noDictSortDimIdx;
1:11fb422:   // indices for no-dict & no-sort dimension columns, excluding complex/varchar columns
1:2b41f14:   private int[] noDictNoSortDimIdx;
1:dc53dee:   // indices for varchar dimension columns
1:dc53dee:   private int[] varcharDimIdx;
1:11fb422:   // indices for varchar dimension columns
1:11fb422:   private int [] complexDimIdx;
1:2b41f14:   // indices for measure columns
1:2b41f14:   private int[] measureIdx;
1:2b41f14: 
1:2b41f14:   public TableFieldStat(SortParameters sortParameters) {
1:2b41f14:     int noDictDimCnt = sortParameters.getNoDictionaryCount();
1:2b41f14:     int dictDimCnt = sortParameters.getDimColCount() - noDictDimCnt;
1:11fb422:     this.complexDimCnt = sortParameters.getComplexDimColCount();
1:2b41f14:     this.isSortColNoDictFlags = sortParameters.getNoDictionarySortColumn();
1:dc53dee:     this.isVarcharDimFlags = sortParameters.getIsVarcharDimensionColumn();
1:2b41f14:     int sortColCnt = isSortColNoDictFlags.length;
1:2b41f14:     for (boolean flag : isSortColNoDictFlags) {
1:2b41f14:       if (flag) {
1:2b41f14:         noDictSortDimCnt++;
1:2b41f14:       } else {
1:2b41f14:         dictSortDimCnt++;
1:2b41f14:       }
1:2b41f14:     }
1:2b41f14:     this.measureCnt = sortParameters.getMeasureColCount();
1:2b41f14:     this.measureDataType = sortParameters.getMeasureDataType();
1:2b41f14: 
1:dc53dee:     for (boolean flag : isVarcharDimFlags) {
1:dc53dee:       if (flag) {
1:dc53dee:         varcharDimCnt++;
1:dc53dee:       }
1:dc53dee:     }
1:dc53dee: 
1:2b41f14:     // be careful that the default value is 0
1:2b41f14:     this.dictSortDimIdx = new int[dictSortDimCnt];
1:2b41f14:     this.dictNoSortDimIdx = new int[dictDimCnt - dictSortDimCnt];
1:2b41f14:     this.noDictSortDimIdx = new int[noDictSortDimCnt];
1:11fb422:     this.noDictNoSortDimIdx = new int[noDictDimCnt - noDictSortDimCnt - varcharDimCnt];
1:11fb422:     this.complexDimIdx = new int[complexDimCnt];
1:dc53dee:     this.varcharDimIdx = new int[varcharDimCnt];
1:2b41f14:     this.measureIdx = new int[measureCnt];
1:2b41f14: 
1:2b41f14:     int tmpNoDictSortCnt = 0;
1:2b41f14:     int tmpNoDictNoSortCnt = 0;
1:2b41f14:     int tmpDictSortCnt = 0;
1:2b41f14:     int tmpDictNoSortCnt = 0;
1:dc53dee:     int tmpVarcharCnt = 0;
1:2b41f14:     boolean[] isDimNoDictFlags = sortParameters.getNoDictionaryDimnesionColumn();
1:2b41f14: 
1:2b41f14:     for (int i = 0; i < isDimNoDictFlags.length; i++) {
1:2b41f14:       if (isDimNoDictFlags[i]) {
1:dc53dee:         if (isVarcharDimFlags[i]) {
1:dc53dee:           varcharDimIdx[tmpVarcharCnt++] = i;
1:dc53dee:         } else if (i < sortColCnt && isSortColNoDictFlags[i]) {
1:2b41f14:           noDictSortDimIdx[tmpNoDictSortCnt++] = i;
1:2b41f14:         } else {
1:2b41f14:           noDictNoSortDimIdx[tmpNoDictNoSortCnt++] = i;
1:2b41f14:         }
1:2b41f14:       } else {
1:2b41f14:         if (i < sortColCnt && !isSortColNoDictFlags[i]) {
1:2b41f14:           dictSortDimIdx[tmpDictSortCnt++] = i;
1:2b41f14:         } else {
1:2b41f14:           dictNoSortDimIdx[tmpDictNoSortCnt++] = i;
1:2b41f14:         }
1:2b41f14:       }
1:2b41f14:     }
1:2b41f14:     dictNoSortDimCnt = tmpDictNoSortCnt;
1:11fb422:     noDictNoSortDimCnt = tmpNoDictNoSortCnt;
1:2b41f14: 
1:2b41f14:     int base = isDimNoDictFlags.length;
1:11fb422:     // indices for complex dimension columns
1:2b41f14:     for (int i = 0; i < complexDimCnt; i++) {
1:11fb422:       complexDimIdx[i] = base + i;
1:2b41f14:     }
1:2b41f14: 
1:2b41f14:     base += complexDimCnt;
1:2b41f14:     // indices for measure columns
1:2b41f14:     for (int i = 0; i < measureCnt; i++) {
1:2b41f14:       measureIdx[i] = base + i;
1:2b41f14:     }
1:2b41f14:   }
1:2b41f14: 
1:2b41f14:   public int getDictSortDimCnt() {
1:2b41f14:     return dictSortDimCnt;
1:2b41f14:   }
1:2b41f14: 
1:2b41f14:   public int getDictNoSortDimCnt() {
1:2b41f14:     return dictNoSortDimCnt;
1:2b41f14:   }
1:2b41f14: 
1:2b41f14:   public int getNoDictSortDimCnt() {
1:2b41f14:     return noDictSortDimCnt;
1:2b41f14:   }
1:2b41f14: 
1:2b41f14:   public int getNoDictNoSortDimCnt() {
1:2b41f14:     return noDictNoSortDimCnt;
1:2b41f14:   }
1:2b41f14: 
1:11fb422:   public int getComplexDimCnt() {
1:11fb422:     return complexDimCnt;
1:11fb422:   }
1:11fb422: 
1:dc53dee:   public int getVarcharDimCnt() {
1:dc53dee:     return varcharDimCnt;
1:dc53dee:   }
1:dc53dee: 
1:2b41f14:   public boolean[] getIsSortColNoDictFlags() {
1:2b41f14:     return isSortColNoDictFlags;
1:2b41f14:   }
1:2b41f14: 
1:dc53dee:   public boolean[] getIsVarcharDimFlags() {
1:dc53dee:     return isVarcharDimFlags;
1:dc53dee:   }
1:dc53dee: 
1:2b41f14:   public int getMeasureCnt() {
1:2b41f14:     return measureCnt;
1:2b41f14:   }
1:2b41f14: 
1:2b41f14:   public DataType[] getMeasureDataType() {
1:2b41f14:     return measureDataType;
1:2b41f14:   }
1:2b41f14: 
1:2b41f14:   public int[] getDictSortDimIdx() {
1:2b41f14:     return dictSortDimIdx;
1:2b41f14:   }
1:2b41f14: 
1:2b41f14:   public int[] getDictNoSortDimIdx() {
1:2b41f14:     return dictNoSortDimIdx;
1:2b41f14:   }
1:2b41f14: 
1:2b41f14:   public int[] getNoDictSortDimIdx() {
1:2b41f14:     return noDictSortDimIdx;
1:2b41f14:   }
1:2b41f14: 
1:2b41f14:   public int[] getNoDictNoSortDimIdx() {
1:2b41f14:     return noDictNoSortDimIdx;
1:2b41f14:   }
1:2b41f14: 
1:11fb422:   public int[] getComplexDimIdx() {
1:11fb422:     return complexDimIdx;
1:11fb422:   }
1:11fb422: 
1:dc53dee:   public int[] getVarcharDimIdx() {
1:dc53dee:     return varcharDimIdx;
1:dc53dee:   }
1:dc53dee: 
1:2b41f14:   public int[] getMeasureIdx() {
1:2b41f14:     return measureIdx;
1:2b41f14:   }
1:2b41f14: 
1:2b41f14:   @Override public boolean equals(Object o) {
1:2b41f14:     if (this == o) return true;
1:2b41f14:     if (!(o instanceof TableFieldStat)) return false;
1:2b41f14:     TableFieldStat that = (TableFieldStat) o;
1:2b41f14:     return dictSortDimCnt == that.dictSortDimCnt
1:2b41f14:         && dictNoSortDimCnt == that.dictNoSortDimCnt
1:2b41f14:         && noDictSortDimCnt == that.noDictSortDimCnt
1:2b41f14:         && noDictNoSortDimCnt == that.noDictNoSortDimCnt
1:11fb422:         && complexDimCnt == that.complexDimCnt
1:dc53dee:         && varcharDimCnt == that.varcharDimCnt
1:2b41f14:         && measureCnt == that.measureCnt;
1:2b41f14:   }
1:2b41f14: 
1:2b41f14:   @Override public int hashCode() {
1:2b41f14:     return Objects.hash(dictSortDimCnt, dictNoSortDimCnt, noDictSortDimCnt,
1:11fb422:         noDictNoSortDimCnt, complexDimCnt, varcharDimCnt, measureCnt);
1:2b41f14:   }
1:2b41f14: }
============================================================================
author:Manhua
-------------------------------------------------------------------------------
commit:11fb422
/////////////////////////////////////////////////////////////////////////
1:   // for columns that are no_dict_dim and no_sort_dim, except complex/varchar dims
1:   // for columns that are complex data type
1:   private int complexDimCnt = 0;
/////////////////////////////////////////////////////////////////////////
1:   // indices for no-dict & no-sort dimension columns, excluding complex/varchar columns
1:   // indices for varchar dimension columns
1:   private int [] complexDimIdx;
1:     this.complexDimCnt = sortParameters.getComplexDimColCount();
/////////////////////////////////////////////////////////////////////////
1:     this.noDictNoSortDimIdx = new int[noDictDimCnt - noDictSortDimCnt - varcharDimCnt];
1:     this.complexDimIdx = new int[complexDimCnt];
/////////////////////////////////////////////////////////////////////////
1:     noDictNoSortDimCnt = tmpNoDictNoSortCnt;
1:     // indices for complex dimension columns
1:       complexDimIdx[i] = base + i;
/////////////////////////////////////////////////////////////////////////
1:   public int getComplexDimCnt() {
1:     return complexDimCnt;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public int[] getComplexDimIdx() {
1:     return complexDimIdx;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:         && complexDimCnt == that.complexDimCnt
1:         noDictNoSortDimCnt, complexDimCnt, varcharDimCnt, measureCnt);
author:xuchuanyin
-------------------------------------------------------------------------------
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
0:   // for columns that are no_dict_dim and no_sort_dim and complex, except the varchar dims
1:   // for columns that are varchar data type
1:   private int varcharDimCnt = 0;
1:   private boolean[] isVarcharDimFlags;
/////////////////////////////////////////////////////////////////////////
1:   // indices for varchar dimension columns
1:   private int[] varcharDimIdx;
/////////////////////////////////////////////////////////////////////////
1:     this.isVarcharDimFlags = sortParameters.getIsVarcharDimensionColumn();
/////////////////////////////////////////////////////////////////////////
1:     for (boolean flag : isVarcharDimFlags) {
1:       if (flag) {
1:         varcharDimCnt++;
1:       }
1:     }
1: 
0:     this.noDictNoSortDimIdx = new int[noDictDimCnt + complexDimCnt - noDictSortDimCnt
0:         - varcharDimCnt];
1:     this.varcharDimIdx = new int[varcharDimCnt];
1:     int tmpVarcharCnt = 0;
1:         if (isVarcharDimFlags[i]) {
1:           varcharDimIdx[tmpVarcharCnt++] = i;
1:         } else if (i < sortColCnt && isSortColNoDictFlags[i]) {
/////////////////////////////////////////////////////////////////////////
1:   public int getVarcharDimCnt() {
1:     return varcharDimCnt;
1:   }
1: 
1:   public boolean[] getIsVarcharDimFlags() {
1:     return isVarcharDimFlags;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public int[] getVarcharDimIdx() {
1:     return varcharDimIdx;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:         && varcharDimCnt == that.varcharDimCnt
0:         noDictNoSortDimCnt, varcharDimCnt, measureCnt);
commit:2b41f14
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.sort.sortdata;
1: 
1: import java.io.Serializable;
1: import java.util.Objects;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: 
1: /**
1:  * This class is used to hold field information for a table during data loading. These information
1:  * will be used to convert/construct/destruct row in sort process step. Because complex field is
1:  * processed the same as no-dict-no-sort-simple-dimension, so we treat them as the same and use
1:  * `no-dict-no-sort-dim` related variable to represent them in this class.
1:  */
1: public class TableFieldStat implements Serializable {
1:   private static final long serialVersionUID = 201712070950L;
1:   private int dictSortDimCnt = 0;
1:   private int dictNoSortDimCnt = 0;
1:   private int noDictSortDimCnt = 0;
1:   private int noDictNoSortDimCnt = 0;
1:   // whether sort column is of dictionary type or not
1:   private boolean[] isSortColNoDictFlags;
1:   private int measureCnt;
1:   private DataType[] measureDataType;
1: 
1:   // indices for dict & sort dimension columns
1:   private int[] dictSortDimIdx;
1:   // indices for dict & no-sort dimension columns
1:   private int[] dictNoSortDimIdx;
1:   // indices for no-dict & sort dimension columns
1:   private int[] noDictSortDimIdx;
0:   // indices for no-dict & no-sort dimension columns, including complex columns
1:   private int[] noDictNoSortDimIdx;
1:   // indices for measure columns
1:   private int[] measureIdx;
1: 
1:   public TableFieldStat(SortParameters sortParameters) {
1:     int noDictDimCnt = sortParameters.getNoDictionaryCount();
0:     int complexDimCnt = sortParameters.getComplexDimColCount();
1:     int dictDimCnt = sortParameters.getDimColCount() - noDictDimCnt;
1:     this.isSortColNoDictFlags = sortParameters.getNoDictionarySortColumn();
1:     int sortColCnt = isSortColNoDictFlags.length;
1:     for (boolean flag : isSortColNoDictFlags) {
1:       if (flag) {
1:         noDictSortDimCnt++;
1:       } else {
1:         dictSortDimCnt++;
1:       }
1:     }
1:     this.measureCnt = sortParameters.getMeasureColCount();
1:     this.measureDataType = sortParameters.getMeasureDataType();
1: 
1:     // be careful that the default value is 0
1:     this.dictSortDimIdx = new int[dictSortDimCnt];
1:     this.dictNoSortDimIdx = new int[dictDimCnt - dictSortDimCnt];
1:     this.noDictSortDimIdx = new int[noDictSortDimCnt];
0:     this.noDictNoSortDimIdx = new int[noDictDimCnt + complexDimCnt - noDictSortDimCnt];
1:     this.measureIdx = new int[measureCnt];
1: 
1:     int tmpNoDictSortCnt = 0;
1:     int tmpNoDictNoSortCnt = 0;
1:     int tmpDictSortCnt = 0;
1:     int tmpDictNoSortCnt = 0;
1:     boolean[] isDimNoDictFlags = sortParameters.getNoDictionaryDimnesionColumn();
1: 
1:     for (int i = 0; i < isDimNoDictFlags.length; i++) {
1:       if (isDimNoDictFlags[i]) {
0:         if (i < sortColCnt && isSortColNoDictFlags[i]) {
1:           noDictSortDimIdx[tmpNoDictSortCnt++] = i;
1:         } else {
1:           noDictNoSortDimIdx[tmpNoDictNoSortCnt++] = i;
1:         }
1:       } else {
1:         if (i < sortColCnt && !isSortColNoDictFlags[i]) {
1:           dictSortDimIdx[tmpDictSortCnt++] = i;
1:         } else {
1:           dictNoSortDimIdx[tmpDictNoSortCnt++] = i;
1:         }
1:       }
1:     }
1:     dictNoSortDimCnt = tmpDictNoSortCnt;
1: 
1:     int base = isDimNoDictFlags.length;
0:     // adding complex dimension columns
1:     for (int i = 0; i < complexDimCnt; i++) {
0:       noDictNoSortDimIdx[tmpNoDictNoSortCnt++] = base + i;
1:     }
0:     noDictNoSortDimCnt = tmpNoDictNoSortCnt;
1: 
1:     base += complexDimCnt;
1:     // indices for measure columns
1:     for (int i = 0; i < measureCnt; i++) {
1:       measureIdx[i] = base + i;
1:     }
1:   }
1: 
1:   public int getDictSortDimCnt() {
1:     return dictSortDimCnt;
1:   }
1: 
1:   public int getDictNoSortDimCnt() {
1:     return dictNoSortDimCnt;
1:   }
1: 
1:   public int getNoDictSortDimCnt() {
1:     return noDictSortDimCnt;
1:   }
1: 
1:   public int getNoDictNoSortDimCnt() {
1:     return noDictNoSortDimCnt;
1:   }
1: 
1:   public boolean[] getIsSortColNoDictFlags() {
1:     return isSortColNoDictFlags;
1:   }
1: 
1:   public int getMeasureCnt() {
1:     return measureCnt;
1:   }
1: 
1:   public DataType[] getMeasureDataType() {
1:     return measureDataType;
1:   }
1: 
1:   public int[] getDictSortDimIdx() {
1:     return dictSortDimIdx;
1:   }
1: 
1:   public int[] getDictNoSortDimIdx() {
1:     return dictNoSortDimIdx;
1:   }
1: 
1:   public int[] getNoDictSortDimIdx() {
1:     return noDictSortDimIdx;
1:   }
1: 
1:   public int[] getNoDictNoSortDimIdx() {
1:     return noDictNoSortDimIdx;
1:   }
1: 
1:   public int[] getMeasureIdx() {
1:     return measureIdx;
1:   }
1: 
1:   @Override public boolean equals(Object o) {
1:     if (this == o) return true;
1:     if (!(o instanceof TableFieldStat)) return false;
1:     TableFieldStat that = (TableFieldStat) o;
1:     return dictSortDimCnt == that.dictSortDimCnt
1:         && dictNoSortDimCnt == that.dictNoSortDimCnt
1:         && noDictSortDimCnt == that.noDictSortDimCnt
1:         && noDictNoSortDimCnt == that.noDictNoSortDimCnt
1:         && measureCnt == that.measureCnt;
1:   }
1: 
1:   @Override public int hashCode() {
1:     return Objects.hash(dictSortDimCnt, dictNoSortDimCnt, noDictSortDimCnt,
0:         noDictNoSortDimCnt, measureCnt);
1:   }
1: }
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
commit:21704cf
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.carbondata.processing.sort.sortdata;
0: 
0: import java.io.Serializable;
0: import java.util.Objects;
0: 
0: import org.apache.carbondata.core.metadata.datatype.DataType;
0: 
0: /**
0:  * This class is used to hold field information for a table during data loading. These information
0:  * will be used to convert/construct/destruct row in sort process step. Because complex field is
0:  * processed the same as no-dict-no-sort-simple-dimension, so we treat them as the same and use
0:  * `no-dict-no-sort-dim` related variable to represent them in this class.
0:  */
0: public class TableFieldStat implements Serializable {
0:   private static final long serialVersionUID = 201712070950L;
0:   private int dictSortDimCnt = 0;
0:   private int dictNoSortDimCnt = 0;
0:   private int noDictSortDimCnt = 0;
0:   private int noDictNoSortDimCnt = 0;
0:   // whether sort column is of dictionary type or not
0:   private boolean[] isSortColNoDictFlags;
0:   private int measureCnt;
0:   private DataType[] measureDataType;
0: 
0:   // indices for dict & sort dimension columns
0:   private int[] dictSortDimIdx;
0:   // indices for dict & no-sort dimension columns
0:   private int[] dictNoSortDimIdx;
0:   // indices for no-dict & sort dimension columns
0:   private int[] noDictSortDimIdx;
0:   // indices for no-dict & no-sort dimension columns, including complex columns
0:   private int[] noDictNoSortDimIdx;
0:   // indices for measure columns
0:   private int[] measureIdx;
0: 
0:   public TableFieldStat(SortParameters sortParameters) {
0:     int noDictDimCnt = sortParameters.getNoDictionaryCount();
0:     int complexDimCnt = sortParameters.getComplexDimColCount();
0:     int dictDimCnt = sortParameters.getDimColCount() - noDictDimCnt;
0:     this.isSortColNoDictFlags = sortParameters.getNoDictionarySortColumn();
0:     int sortColCnt = isSortColNoDictFlags.length;
0:     for (boolean flag : isSortColNoDictFlags) {
0:       if (flag) {
0:         noDictSortDimCnt++;
0:       } else {
0:         dictSortDimCnt++;
0:       }
0:     }
0:     this.measureCnt = sortParameters.getMeasureColCount();
0:     this.measureDataType = sortParameters.getMeasureDataType();
0: 
0:     // be careful that the default value is 0
0:     this.dictSortDimIdx = new int[dictSortDimCnt];
0:     this.dictNoSortDimIdx = new int[dictDimCnt - dictSortDimCnt];
0:     this.noDictSortDimIdx = new int[noDictSortDimCnt];
0:     this.noDictNoSortDimIdx = new int[noDictDimCnt + complexDimCnt - noDictSortDimCnt];
0:     this.measureIdx = new int[measureCnt];
0: 
0:     int tmpNoDictSortCnt = 0;
0:     int tmpNoDictNoSortCnt = 0;
0:     int tmpDictSortCnt = 0;
0:     int tmpDictNoSortCnt = 0;
0:     boolean[] isDimNoDictFlags = sortParameters.getNoDictionaryDimnesionColumn();
0: 
0:     for (int i = 0; i < isDimNoDictFlags.length; i++) {
0:       if (isDimNoDictFlags[i]) {
0:         if (i < sortColCnt && isSortColNoDictFlags[i]) {
0:           noDictSortDimIdx[tmpNoDictSortCnt++] = i;
0:         } else {
0:           noDictNoSortDimIdx[tmpNoDictNoSortCnt++] = i;
0:         }
0:       } else {
0:         if (i < sortColCnt && !isSortColNoDictFlags[i]) {
0:           dictSortDimIdx[tmpDictSortCnt++] = i;
0:         } else {
0:           dictNoSortDimIdx[tmpDictNoSortCnt++] = i;
0:         }
0:       }
0:     }
0:     dictNoSortDimCnt = tmpDictNoSortCnt;
0: 
0:     int base = isDimNoDictFlags.length;
0:     // adding complex dimension columns
0:     for (int i = 0; i < complexDimCnt; i++) {
0:       noDictNoSortDimIdx[tmpNoDictNoSortCnt++] = base + i;
0:     }
0:     noDictNoSortDimCnt = tmpNoDictNoSortCnt;
0: 
0:     base += complexDimCnt;
0:     // indices for measure columns
0:     for (int i = 0; i < measureCnt; i++) {
0:       measureIdx[i] = base + i;
0:     }
0:   }
0: 
0:   public int getDictSortDimCnt() {
0:     return dictSortDimCnt;
0:   }
0: 
0:   public int getDictNoSortDimCnt() {
0:     return dictNoSortDimCnt;
0:   }
0: 
0:   public int getNoDictSortDimCnt() {
0:     return noDictSortDimCnt;
0:   }
0: 
0:   public int getNoDictNoSortDimCnt() {
0:     return noDictNoSortDimCnt;
0:   }
0: 
0:   public boolean[] getIsSortColNoDictFlags() {
0:     return isSortColNoDictFlags;
0:   }
0: 
0:   public int getMeasureCnt() {
0:     return measureCnt;
0:   }
0: 
0:   public DataType[] getMeasureDataType() {
0:     return measureDataType;
0:   }
0: 
0:   public int[] getDictSortDimIdx() {
0:     return dictSortDimIdx;
0:   }
0: 
0:   public int[] getDictNoSortDimIdx() {
0:     return dictNoSortDimIdx;
0:   }
0: 
0:   public int[] getNoDictSortDimIdx() {
0:     return noDictSortDimIdx;
0:   }
0: 
0:   public int[] getNoDictNoSortDimIdx() {
0:     return noDictNoSortDimIdx;
0:   }
0: 
0:   public int[] getMeasureIdx() {
0:     return measureIdx;
0:   }
0: 
0:   @Override public boolean equals(Object o) {
0:     if (this == o) return true;
0:     if (!(o instanceof TableFieldStat)) return false;
0:     TableFieldStat that = (TableFieldStat) o;
0:     return dictSortDimCnt == that.dictSortDimCnt
0:         && dictNoSortDimCnt == that.dictNoSortDimCnt
0:         && noDictSortDimCnt == that.noDictSortDimCnt
0:         && noDictNoSortDimCnt == that.noDictNoSortDimCnt
0:         && measureCnt == that.measureCnt;
0:   }
0: 
0:   @Override public int hashCode() {
0:     return Objects.hash(dictSortDimCnt, dictNoSortDimCnt, noDictSortDimCnt,
0:         noDictNoSortDimCnt, measureCnt);
0:   }
0: }
============================================================================