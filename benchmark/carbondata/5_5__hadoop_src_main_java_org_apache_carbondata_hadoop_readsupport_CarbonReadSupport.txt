1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.hadoop.readsupport;
1:cd6a4ff: 
1:eaadc88: import java.io.IOException;
1:eaadc88: 
1:29dc302: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:cd6a4ff: 
1:cd6a4ff: /**
1:d6ceb1d:  * This is the interface to convert data reading from RecordReader to row representation.
1:cd6a4ff:  */
1:cd6a4ff: public interface CarbonReadSupport<T> {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:d6ceb1d:    * Initialization if needed based on the projected column list
1:cd6a4ff:    *
1:d6ceb1d:    * @param carbonColumns column list
1:29dc302:    * @param carbonTable table identifier
1:cd6a4ff:    */
1:29dc302:   void initialize(CarbonColumn[] carbonColumns, CarbonTable carbonTable) throws IOException;
1:cd6a4ff: 
1:d6ceb1d:   /**
1:d6ceb1d:    * convert column data back to row representation
1:d6ceb1d:    * @param data column data
1:d6ceb1d:    */
1:eaadc88:   T readRow(Object[] data);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:d6ceb1d:    * cleanup step if necessary
1:cd6a4ff:    */
1:cd6a4ff:   void close();
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:29dc302
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
/////////////////////////////////////////////////////////////////////////
1:    * @param carbonTable table identifier
1:   void initialize(CarbonColumn[] carbonColumns, CarbonTable carbonTable) throws IOException;
author:Jihong Ma
-------------------------------------------------------------------------------
commit:d6ceb1d
/////////////////////////////////////////////////////////////////////////
1:  * This is the interface to convert data reading from RecordReader to row representation.
1:    * Initialization if needed based on the projected column list
1:    * @param carbonColumns column list
0:    * @param absoluteTableIdentifier table identifier
1:   /**
1:    * convert column data back to row representation
1:    * @param data column data
1:    */
1:    * cleanup step if necessary
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
0:   void initialize(CarbonColumn[] carbonColumns,
0:       AbsoluteTableIdentifier absoluteTableIdentifier) throws IOException;
1:   T readRow(Object[] data);
commit:5f6a56c
/////////////////////////////////////////////////////////////////////////
0:   public void initialize(CarbonColumn[] carbonColumns,
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.hadoop.readsupport;
1: 
0: import org.apache.carbondata.core.carbon.AbsoluteTableIdentifier;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonColumn;
1: 
1: /**
0:  * It converts to the desired class while reading the rows from RecordReader
1:  */
1: public interface CarbonReadSupport<T> {
1: 
1:   /**
0:    * It can use [{@link CarbonColumn}] array to create its own schema to create its row.
1:    *
0:    * @param carbonColumns
1:    */
0:   public void intialize(CarbonColumn[] carbonColumns,
0:       AbsoluteTableIdentifier absoluteTableIdentifier);
1: 
0:   public T readRow(Object[] data);
1: 
1:   /**
0:    * This method will be used to clear the dictionary cache and update access count for each
0:    * column involved which will be used during eviction of columns from LRU cache if memory
0:    * reaches threshold
1:    */
1:   void close();
1: 
1: }
============================================================================