1:2cf1104: /*
1:2cf1104:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2cf1104:  * contributor license agreements.  See the NOTICE file distributed with
1:2cf1104:  * this work for additional information regarding copyright ownership.
1:2cf1104:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2cf1104:  * (the "License"); you may not use this file except in compliance with
1:2cf1104:  * the License.  You may obtain a copy of the License at
1:2cf1104:  *
1:2cf1104:  *    http://www.apache.org/licenses/LICENSE-2.0
1:2cf1104:  *
1:2cf1104:  * Unless required by applicable law or agreed to in writing, software
1:2cf1104:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2cf1104:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2cf1104:  * See the License for the specific language governing permissions and
1:2cf1104:  * limitations under the License.
1:2cf1104:  */
1:2cf1104: package org.apache.carbondata.core.datastore.columnar;
6:2cf1104: 
1:2cf1104: import java.util.ArrayList;
1:2cf1104: import java.util.Arrays;
1:2cf1104: import java.util.List;
1:2cf1104: 
1:2cf1104: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:2cf1104: import org.apache.carbondata.core.util.ByteUtil;
1:2cf1104: 
1:2cf1104: public class BlockIndexerStorageForShort implements IndexStorage<short[]> {
1:2cf1104: 
1:2cf1104:   private boolean alreadySorted;
1:2cf1104: 
1:6a09ee8:   private short[] rowIdPage;
1:2cf1104: 
1:6a09ee8:   private short[] rowIdRlePage;
1:2cf1104: 
1:6a09ee8:   private byte[][] dataPage;
1:2cf1104: 
1:6a09ee8:   private short[] dataRlePage;
1:2cf1104: 
1:6a09ee8:   public BlockIndexerStorageForShort(byte[][] dataPage, boolean rleOnData,
1:2cf1104:       boolean isNoDictionary, boolean isSortRequired) {
1:6a09ee8:     ColumnWithRowId<Short>[] dataWithRowId = createColumnWithRowId(dataPage, isNoDictionary);
1:2cf1104:     if (isSortRequired) {
1:6a09ee8:       Arrays.sort(dataWithRowId);
4:2cf1104:     }
1:6a09ee8:     short[] rowIds = extractDataAndReturnRowId(dataWithRowId, dataPage);
1:6a09ee8:     rleEncodeOnRowId(rowIds);
1:6a09ee8:     if (rleOnData) {
1:6a09ee8:       rleEncodeOnData(dataWithRowId);
1:2cf1104:     }
1:2cf1104:   }
1:2cf1104: 
1:2cf1104:   /**
1:6a09ee8:    * Create an object with each column array and respective rowId
1:2cf1104:    *
1:2cf1104:    * @return
1:2cf1104:    */
1:6a09ee8:   private ColumnWithRowId<Short>[] createColumnWithRowId(byte[][] dataPage,
1:2cf1104:       boolean isNoDictionary) {
1:6a09ee8:     ColumnWithRowId<Short>[] columnWithIndexs = new ColumnWithRowId[dataPage.length];
1:2cf1104:     if (isNoDictionary) {
1:2cf1104:       for (short i = 0; i < columnWithIndexs.length; i++) {
1:6a09ee8:         columnWithIndexs[i] = new ColumnWithRowIdForHighCard<>(dataPage[i], i);
1:2cf1104:       }
2:2cf1104:     } else {
1:2cf1104:       for (short i = 0; i < columnWithIndexs.length; i++) {
1:6a09ee8:         columnWithIndexs[i] = new ColumnWithRowId<>(dataPage[i], i);
1:2cf1104:       }
1:2cf1104:     }
1:2cf1104:     return columnWithIndexs;
1:2cf1104:   }
1:2cf1104: 
1:6a09ee8:   private short[] extractDataAndReturnRowId(ColumnWithRowId<Short>[] dataWithRowId,
1:6a09ee8:       byte[][] dataPage) {
1:6a09ee8:     short[] indexes = new short[dataWithRowId.length];
1:2cf1104:     for (int i = 0; i < indexes.length; i++) {
1:6a09ee8:       indexes[i] = dataWithRowId[i].getIndex();
1:6a09ee8:       dataPage[i] = dataWithRowId[i].getColumn();
1:2cf1104:     }
1:6a09ee8:     this.dataPage = dataPage;
1:2cf1104:     return indexes;
1:2cf1104:   }
1:2cf1104: 
1:2cf1104:   /**
1:2cf1104:    * It compresses depends up on the sequence numbers.
1:2cf1104:    * [1,2,3,4,6,8,10,11,12,13] is translated to [1,4,6,8,10,13] and [0,6]. In
1:2cf1104:    * first array the start and end of sequential numbers and second array
1:2cf1104:    * keeps the indexes of where sequential numbers starts. If there is no
1:2cf1104:    * sequential numbers then the same array it returns with empty second
1:2cf1104:    * array.
1:2cf1104:    *
1:6a09ee8:    * @param rowIds
1:2cf1104:    */
1:6a09ee8:   private void rleEncodeOnRowId(short[] rowIds) {
1:2cf1104:     List<Short> list = new ArrayList<Short>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:2cf1104:     List<Short> map = new ArrayList<Short>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:2cf1104:     int k = 0;
1:2cf1104:     int i = 1;
1:6a09ee8:     for (; i < rowIds.length; i++) {
1:6a09ee8:       if (rowIds[i] - rowIds[i - 1] == 1) {
1:2cf1104:         k++;
1:2cf1104:       } else {
1:2cf1104:         if (k > 0) {
1:2cf1104:           map.add(((short) list.size()));
1:6a09ee8:           list.add(rowIds[i - k - 1]);
1:6a09ee8:           list.add(rowIds[i - 1]);
1:2cf1104:         } else {
1:6a09ee8:           list.add(rowIds[i - 1]);
1:2cf1104:         }
1:2cf1104:         k = 0;
1:2cf1104:       }
1:2cf1104:     }
1:2cf1104:     if (k > 0) {
1:2cf1104:       map.add(((short) list.size()));
1:6a09ee8:       list.add(rowIds[i - k - 1]);
1:6a09ee8:       list.add(rowIds[i - 1]);
1:2cf1104:     } else {
1:6a09ee8:       list.add(rowIds[i - 1]);
1:2cf1104:     }
1:500654e:     int compressionPercentage = (((list.size() + map.size()) * 100) / rowIds.length);
1:2cf1104:     if (compressionPercentage > 70) {
1:6a09ee8:       rowIdPage = rowIds;
1:2cf1104:     } else {
1:6a09ee8:       rowIdPage = convertToArray(list);
1:2cf1104:     }
1:6a09ee8:     if (rowIds.length == rowIdPage.length) {
1:6a09ee8:       rowIdRlePage = new short[0];
1:2cf1104:     } else {
1:6a09ee8:       rowIdRlePage = convertToArray(map);
1:2cf1104:     }
1:6a09ee8:     if (rowIdPage.length == 2 && rowIdRlePage.length == 1) {
1:2cf1104:       alreadySorted = true;
1:2cf1104:     }
1:2cf1104:   }
1:2cf1104: 
1:2cf1104:   private short[] convertToArray(List<Short> list) {
1:2cf1104:     short[] shortArray = new short[list.size()];
1:2cf1104:     for (int i = 0; i < shortArray.length; i++) {
1:2cf1104:       shortArray[i] = list.get(i);
1:2cf1104:     }
1:2cf1104:     return shortArray;
1:2cf1104:   }
1:2cf1104: 
1:2cf1104:   /**
1:2cf1104:    * @return the alreadySorted
1:2cf1104:    */
1:2cf1104:   public boolean isAlreadySorted() {
1:2cf1104:     return alreadySorted;
1:2cf1104:   }
1:2cf1104: 
1:2cf1104:   /**
1:6a09ee8:    * @return the rowIdPage
1:2cf1104:    */
1:6a09ee8:   public short[] getRowIdPage() {
1:6a09ee8:     return rowIdPage;
1:2cf1104:   }
1:2cf1104: 
1:bc3e684:   @Override
1:bc3e684:   public int getRowIdPageLengthInBytes() {
1:bc3e684:     if (rowIdPage != null) {
1:bc3e684:       return rowIdPage.length * 2;
1:bc3e684:     } else {
1:bc3e684:       return 0;
1:bc3e684:     }
1:bc3e684:   }
1:bc3e684: 
1:2cf1104:   /**
1:6a09ee8:    * @return the rowIdRlePage
1:2cf1104:    */
1:6a09ee8:   public short[] getRowIdRlePage() {
1:6a09ee8:     return rowIdRlePage;
1:2cf1104:   }
1:2cf1104: 
1:bc3e684:   @Override
1:bc3e684:   public int getRowIdRlePageLengthInBytes() {
1:bc3e684:     if (rowIdRlePage != null) {
1:bc3e684:       return rowIdRlePage.length * 2;
1:bc3e684:     } else {
1:bc3e684:       return 0;
1:bc3e684:     }
1:bc3e684:   }
1:bc3e684: 
1:2cf1104:   /**
1:6a09ee8:    * @return the dataPage
1:2cf1104:    */
1:6a09ee8:   public byte[][] getDataPage() {
1:6a09ee8:     return dataPage;
1:2cf1104:   }
1:2cf1104: 
1:6a09ee8:   private void rleEncodeOnData(ColumnWithRowId<Short>[] dataWithRowId) {
1:6a09ee8:     byte[] prvKey = dataWithRowId[0].getColumn();
1:6a09ee8:     List<ColumnWithRowId> list = new ArrayList<>(dataWithRowId.length / 2);
1:6a09ee8:     list.add(dataWithRowId[0]);
1:2cf1104:     short counter = 1;
1:2cf1104:     short start = 0;
1:2cf1104:     List<Short> map = new ArrayList<Short>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:6a09ee8:     for (int i = 1; i < dataWithRowId.length; i++) {
1:6a09ee8:       if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(prvKey, dataWithRowId[i].getColumn()) != 0) {
1:6a09ee8:         prvKey = dataWithRowId[i].getColumn();
1:6a09ee8:         list.add(dataWithRowId[i]);
1:2cf1104:         map.add(start);
1:2cf1104:         map.add(counter);
1:2cf1104:         start += counter;
1:2cf1104:         counter = 1;
1:2cf1104:         continue;
1:2cf1104:       }
1:2cf1104:       counter++;
1:2cf1104:     }
1:2cf1104:     map.add(start);
1:2cf1104:     map.add(counter);
1:7a0fcb2:     // if rle is index size is more than 70% then rle wont give any benefit
1:7a0fcb2:     // so better to avoid rle index and write data as it is
1:6a09ee8:     boolean useRle = (((list.size() + map.size()) * 100) / dataWithRowId.length) < 70;
1:7a0fcb2:     if (useRle) {
1:6a09ee8:       this.dataPage = convertToDataPage(list);
1:6a09ee8:       dataRlePage = convertToArray(map);
1:7a0fcb2:     } else {
1:6a09ee8:       this.dataPage = convertToDataPage(dataWithRowId);
1:6a09ee8:       dataRlePage = new short[0];
1:2cf1104:     }
1:2cf1104:   }
1:2cf1104: 
1:6a09ee8:   private byte[][] convertToDataPage(ColumnWithRowId[] indexes) {
1:7a0fcb2:     byte[][] shortArray = new byte[indexes.length][];
1:7a0fcb2:     for (int i = 0; i < shortArray.length; i++) {
1:7a0fcb2:       shortArray[i] = indexes[i].getColumn();
1:7a0fcb2:     }
1:7a0fcb2:     return shortArray;
1:7a0fcb2:   }
1:7a0fcb2: 
1:6a09ee8:   private byte[][] convertToDataPage(List<ColumnWithRowId> list) {
1:2cf1104:     byte[][] shortArray = new byte[list.size()][];
1:2cf1104:     for (int i = 0; i < shortArray.length; i++) {
1:2cf1104:       shortArray[i] = list.get(i).getColumn();
1:2cf1104:     }
1:2cf1104:     return shortArray;
1:2cf1104:   }
1:2cf1104: 
1:6a09ee8:   public short[] getDataRlePage() {
1:6a09ee8:     return dataRlePage;
1:2cf1104:   }
1:bc3e684: 
1:bc3e684:   @Override
1:bc3e684:   public int getDataRlePageLengthInBytes() {
1:bc3e684:     if (dataRlePage != null) {
1:bc3e684:       return dataRlePage.length * 2;
1:bc3e684:     } else {
1:bc3e684:       return 0;
1:bc3e684:     }
1:bc3e684:   }
1:2cf1104: }
============================================================================
author:kumarvishal09
-------------------------------------------------------------------------------
commit:334e647
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1:     int compressionPercentage = (((list.size() + map.size()) * 100) / rowIds.length);
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public int getRowIdPageLengthInBytes() {
1:     if (rowIdPage != null) {
1:       return rowIdPage.length * 2;
1:     } else {
1:       return 0;
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public int getRowIdRlePageLengthInBytes() {
1:     if (rowIdRlePage != null) {
1:       return rowIdRlePage.length * 2;
1:     } else {
1:       return 0;
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public int getDataRlePageLengthInBytes() {
1:     if (dataRlePage != null) {
1:       return dataRlePage.length * 2;
1:     } else {
1:       return 0;
1:     }
1:   }
1: 
commit:6a09ee8
/////////////////////////////////////////////////////////////////////////
1:   private short[] rowIdPage;
1:   private short[] rowIdRlePage;
1:   private byte[][] dataPage;
1:   private short[] dataRlePage;
1:   public BlockIndexerStorageForShort(byte[][] dataPage, boolean rleOnData,
1:     ColumnWithRowId<Short>[] dataWithRowId = createColumnWithRowId(dataPage, isNoDictionary);
1:       Arrays.sort(dataWithRowId);
1:     short[] rowIds = extractDataAndReturnRowId(dataWithRowId, dataPage);
1:     rleEncodeOnRowId(rowIds);
1:     if (rleOnData) {
1:       rleEncodeOnData(dataWithRowId);
1:    * Create an object with each column array and respective rowId
1:   private ColumnWithRowId<Short>[] createColumnWithRowId(byte[][] dataPage,
1:     ColumnWithRowId<Short>[] columnWithIndexs = new ColumnWithRowId[dataPage.length];
1:         columnWithIndexs[i] = new ColumnWithRowIdForHighCard<>(dataPage[i], i);
1:         columnWithIndexs[i] = new ColumnWithRowId<>(dataPage[i], i);
1:   private short[] extractDataAndReturnRowId(ColumnWithRowId<Short>[] dataWithRowId,
1:       byte[][] dataPage) {
1:     short[] indexes = new short[dataWithRowId.length];
1:       indexes[i] = dataWithRowId[i].getIndex();
1:       dataPage[i] = dataWithRowId[i].getColumn();
1:     this.dataPage = dataPage;
/////////////////////////////////////////////////////////////////////////
1:    * @param rowIds
1:   private void rleEncodeOnRowId(short[] rowIds) {
1:     for (; i < rowIds.length; i++) {
1:       if (rowIds[i] - rowIds[i - 1] == 1) {
1:           list.add(rowIds[i - k - 1]);
1:           list.add(rowIds[i - 1]);
1:           list.add(rowIds[i - 1]);
1:       list.add(rowIds[i - k - 1]);
1:       list.add(rowIds[i - 1]);
1:       list.add(rowIds[i - 1]);
0:     double compressionPercentage = (((list.size() + map.size()) * 100) / rowIds.length);
1:       rowIdPage = rowIds;
1:       rowIdPage = convertToArray(list);
1:     if (rowIds.length == rowIdPage.length) {
1:       rowIdRlePage = new short[0];
1:       rowIdRlePage = convertToArray(map);
1:     if (rowIdPage.length == 2 && rowIdRlePage.length == 1) {
/////////////////////////////////////////////////////////////////////////
1:    * @return the rowIdPage
1:   public short[] getRowIdPage() {
1:     return rowIdPage;
1:    * @return the rowIdRlePage
1:   public short[] getRowIdRlePage() {
1:     return rowIdRlePage;
1:    * @return the dataPage
1:   public byte[][] getDataPage() {
1:     return dataPage;
1:   private void rleEncodeOnData(ColumnWithRowId<Short>[] dataWithRowId) {
1:     byte[] prvKey = dataWithRowId[0].getColumn();
1:     List<ColumnWithRowId> list = new ArrayList<>(dataWithRowId.length / 2);
1:     list.add(dataWithRowId[0]);
1:     for (int i = 1; i < dataWithRowId.length; i++) {
1:       if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(prvKey, dataWithRowId[i].getColumn()) != 0) {
1:         prvKey = dataWithRowId[i].getColumn();
1:         list.add(dataWithRowId[i]);
/////////////////////////////////////////////////////////////////////////
1:     boolean useRle = (((list.size() + map.size()) * 100) / dataWithRowId.length) < 70;
1:       this.dataPage = convertToDataPage(list);
1:       dataRlePage = convertToArray(map);
1:       this.dataPage = convertToDataPage(dataWithRowId);
1:       dataRlePage = new short[0];
1:   private byte[][] convertToDataPage(ColumnWithRowId[] indexes) {
/////////////////////////////////////////////////////////////////////////
1:   private byte[][] convertToDataPage(List<ColumnWithRowId> list) {
/////////////////////////////////////////////////////////////////////////
1:   public short[] getDataRlePage() {
1:     return dataRlePage;
/////////////////////////////////////////////////////////////////////////
0:     return dataPage[0];
0:     return dataPage[dataPage.length - 1];
commit:353272e
/////////////////////////////////////////////////////////////////////////
0:   private void compressMyOwnWay(short[] indexes) {
author:kumarvishal
-------------------------------------------------------------------------------
commit:7a0fcb2
/////////////////////////////////////////////////////////////////////////
0:     List<ColumnWithShortIndex> list = new ArrayList<ColumnWithShortIndex>(indexes.length / 2);
/////////////////////////////////////////////////////////////////////////
1:     // if rle is index size is more than 70% then rle wont give any benefit
1:     // so better to avoid rle index and write data as it is
0:     boolean useRle = (((list.size() + map.size()) * 100) / indexes.length) < 70;
1:     if (useRle) {
0:       this.keyBlock = convertToKeyArray(list);
1:     } else {
0:       this.keyBlock = convertToKeyArray(indexes);
0:       dataIndexMap = new short[0];
0:   private byte[][] convertToKeyArray(ColumnWithShortIndex[] indexes) {
1:     byte[][] shortArray = new byte[indexes.length][];
1:     for (int i = 0; i < shortArray.length; i++) {
1:       shortArray[i] = indexes[i].getColumn();
0:       totalSize += shortArray[i].length;
1:     }
1:     return shortArray;
1:   }
1: 
commit:2cf1104
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datastore.columnar;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: public class BlockIndexerStorageForShort implements IndexStorage<short[]> {
1: 
1:   private boolean alreadySorted;
1: 
0:   private short[] dataAfterComp;
1: 
0:   private short[] indexMap;
1: 
0:   private byte[][] keyBlock;
1: 
0:   private short[] dataIndexMap;
1: 
0:   private int totalSize;
1: 
0:   public BlockIndexerStorageForShort(byte[][] keyBlock, boolean compressData,
1:       boolean isNoDictionary, boolean isSortRequired) {
0:     ColumnWithShortIndex[] columnWithIndexs = createColumnWithIndexArray(keyBlock, isNoDictionary);
1:     if (isSortRequired) {
0:       Arrays.sort(columnWithIndexs);
1:     }
0:     compressMyOwnWay(extractDataAndReturnIndexes(columnWithIndexs, keyBlock));
0:     if (compressData) {
0:       compressDataMyOwnWay(columnWithIndexs);
1:     }
1:   }
1: 
1:   /**
0:    * Create an object with each column array and respective index
1:    *
1:    * @return
1:    */
0:   private ColumnWithShortIndex[] createColumnWithIndexArray(byte[][] keyBlock,
1:       boolean isNoDictionary) {
0:     ColumnWithShortIndex[] columnWithIndexs;
1:     if (isNoDictionary) {
0:       columnWithIndexs = new ColumnWithShortIndex[keyBlock.length];
1:       for (short i = 0; i < columnWithIndexs.length; i++) {
0:         columnWithIndexs[i] = new ColumnWithShortIndexForNoDictionay(keyBlock[i], i);
1:       }
1:     } else {
0:       columnWithIndexs = new ColumnWithShortIndex[keyBlock.length];
1:       for (short i = 0; i < columnWithIndexs.length; i++) {
0:         columnWithIndexs[i] = new ColumnWithShortIndex(keyBlock[i], i);
1:       }
1:     }
1:     return columnWithIndexs;
1:   }
1: 
0:   private short[] extractDataAndReturnIndexes(ColumnWithShortIndex[] columnWithIndexs,
0:       byte[][] keyBlock) {
0:     short[] indexes = new short[columnWithIndexs.length];
1:     for (int i = 0; i < indexes.length; i++) {
0:       indexes[i] = columnWithIndexs[i].getIndex();
0:       keyBlock[i] = columnWithIndexs[i].getColumn();
1:     }
0:     this.keyBlock = keyBlock;
1:     return indexes;
1:   }
1: 
1:   /**
1:    * It compresses depends up on the sequence numbers.
1:    * [1,2,3,4,6,8,10,11,12,13] is translated to [1,4,6,8,10,13] and [0,6]. In
1:    * first array the start and end of sequential numbers and second array
1:    * keeps the indexes of where sequential numbers starts. If there is no
1:    * sequential numbers then the same array it returns with empty second
1:    * array.
1:    *
0:    * @param indexes
1:    */
0:   public void compressMyOwnWay(short[] indexes) {
1:     List<Short> list = new ArrayList<Short>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:     List<Short> map = new ArrayList<Short>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:     int k = 0;
1:     int i = 1;
0:     for (; i < indexes.length; i++) {
0:       if (indexes[i] - indexes[i - 1] == 1) {
1:         k++;
1:       } else {
1:         if (k > 0) {
1:           map.add(((short) list.size()));
0:           list.add(indexes[i - k - 1]);
0:           list.add(indexes[i - 1]);
1:         } else {
0:           list.add(indexes[i - 1]);
1:         }
1:         k = 0;
1:       }
1:     }
1:     if (k > 0) {
1:       map.add(((short) list.size()));
0:       list.add(indexes[i - k - 1]);
0:       list.add(indexes[i - 1]);
1:     } else {
0:       list.add(indexes[i - 1]);
1:     }
0:     double compressionPercentage = (((list.size() + map.size()) * 100) / indexes.length);
1:     if (compressionPercentage > 70) {
0:       dataAfterComp = indexes;
1:     } else {
0:       dataAfterComp = convertToArray(list);
1:     }
0:     if (indexes.length == dataAfterComp.length) {
0:       indexMap = new short[0];
1:     } else {
0:       indexMap = convertToArray(map);
1:     }
0:     if (dataAfterComp.length == 2 && indexMap.length == 1) {
1:       alreadySorted = true;
1:     }
1:   }
1: 
1:   private short[] convertToArray(List<Short> list) {
1:     short[] shortArray = new short[list.size()];
1:     for (int i = 0; i < shortArray.length; i++) {
1:       shortArray[i] = list.get(i);
1:     }
1:     return shortArray;
1:   }
1: 
1:   /**
1:    * @return the alreadySorted
1:    */
1:   public boolean isAlreadySorted() {
1:     return alreadySorted;
1:   }
1: 
1:   /**
0:    * @return the dataAfterComp
1:    */
0:   public short[] getDataAfterComp() {
0:     return dataAfterComp;
1:   }
1: 
1:   /**
0:    * @return the indexMap
1:    */
0:   public short[] getIndexMap() {
0:     return indexMap;
1:   }
1: 
1:   /**
0:    * @return the keyBlock
1:    */
0:   public byte[][] getKeyBlock() {
0:     return keyBlock;
1:   }
1: 
0:   private void compressDataMyOwnWay(ColumnWithShortIndex[] indexes) {
0:     byte[] prvKey = indexes[0].getColumn();
0:     List<ColumnWithShortIndex> list =
0:         new ArrayList<ColumnWithShortIndex>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
0:     list.add(indexes[0]);
1:     short counter = 1;
1:     short start = 0;
1:     List<Short> map = new ArrayList<Short>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
0:     for (int i = 1; i < indexes.length; i++) {
0:       if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(prvKey, indexes[i].getColumn()) != 0) {
0:         prvKey = indexes[i].getColumn();
0:         list.add(indexes[i]);
1:         map.add(start);
1:         map.add(counter);
1:         start += counter;
1:         counter = 1;
1:         continue;
1:       }
1:       counter++;
1:     }
1:     map.add(start);
1:     map.add(counter);
0:     this.keyBlock = convertToKeyArray(list);
0:     if (indexes.length == keyBlock.length) {
0:       dataIndexMap = new short[0];
1:     } else {
0:       dataIndexMap = convertToArray(map);
1:     }
1:   }
1: 
0:   private byte[][] convertToKeyArray(List<ColumnWithShortIndex> list) {
1:     byte[][] shortArray = new byte[list.size()][];
1:     for (int i = 0; i < shortArray.length; i++) {
1:       shortArray[i] = list.get(i).getColumn();
0:       totalSize += shortArray[i].length;
1:     }
1:     return shortArray;
1:   }
1: 
0:   @Override public short[] getDataIndexMap() {
0:     return dataIndexMap;
1:   }
1: 
0:   @Override public int getTotalSize() {
0:     return totalSize;
1:   }
1: 
0:   @Override public byte[] getMin() {
0:     return keyBlock[0];
1:   }
1: 
0:   @Override public byte[] getMax() {
0:     return keyBlock[keyBlock.length - 1];
1:   }
1: 
1: }
============================================================================