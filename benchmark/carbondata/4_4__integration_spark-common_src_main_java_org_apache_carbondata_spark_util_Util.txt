1:f63b1ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:f63b1ff:  *
1:f63b1ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f63b1ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:f63b1ff:  */
1:f63b1ff: 
1:349c59c: package org.apache.carbondata.spark.util;
1:11a795c: 
1:347b8e1: import java.util.ArrayList;
1:11a795c: import java.util.List;
1:11a795c: 
1:347b8e1: import org.apache.carbondata.core.metadata.datatype.DataType;
1:347b8e1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:560bfbe: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:347b8e1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:11a795c: import org.apache.carbondata.hadoop.CarbonInputSplit;
1:11a795c: 
1:349c59c: import org.apache.spark.SparkConf;
1:347b8e1: import org.apache.spark.sql.types.DataTypes;
1:347b8e1: import org.apache.spark.sql.types.DecimalType;
1:347b8e1: import org.apache.spark.sql.types.Metadata;
1:347b8e1: import org.apache.spark.sql.types.StructField;
1:347b8e1: import org.apache.spark.sql.types.StructType;
1:347b8e1: import org.apache.spark.sql.util.CarbonMetastoreTypes;
1:347b8e1: import org.apache.spark.sql.util.SparkTypeConverter;
1:349c59c: import org.apache.spark.util.Utils;
1:349c59c: 
1:349c59c: public class Util {
1:f63b1ff:   /**
1:349c59c:    * return the Array of available local-dirs
1:f63b1ff:    */
1:349c59c:   public static String[] getConfiguredLocalDirs(SparkConf conf) {
1:349c59c:     return Utils.getConfiguredLocalDirs(conf);
1:349c59c:   }
1:f63b1ff: 
1:f63b1ff:   /**
1:11a795c:    * Method to check whether there exists any block which does not contain the blocklet info
1:11a795c:    *
1:11a795c:    * @param splitList
1:11a795c:    * @return
1:f63b1ff:    */
1:11a795c:   public static boolean isBlockWithoutBlockletInfoExists(List<CarbonInputSplit> splitList) {
1:11a795c:     for (CarbonInputSplit inputSplit : splitList) {
1:11a795c:       if (null == inputSplit.getDetailInfo().getBlockletInfo()) {
1:11a795c:         return true;
1:f63b1ff:       }
1:11a795c:     }
1:11a795c:     return false;
1:11a795c:   }
1:347b8e1: 
1:347b8e1:   private static org.apache.spark.sql.types.DataType convertCarbonToSparkDataType(
1:347b8e1:       DataType carbonDataType) {
1:347b8e1:     if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.STRING) {
1:347b8e1:       return DataTypes.StringType;
1:347b8e1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.SHORT) {
1:347b8e1:       return DataTypes.ShortType;
1:347b8e1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.INT) {
1:347b8e1:       return DataTypes.IntegerType;
1:347b8e1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.LONG) {
1:347b8e1:       return DataTypes.LongType;
1:347b8e1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.DOUBLE) {
1:347b8e1:       return DataTypes.DoubleType;
1:347b8e1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.BOOLEAN) {
1:347b8e1:       return DataTypes.BooleanType;
1:347b8e1:     } else if (org.apache.carbondata.core.metadata.datatype.DataTypes.isDecimal(carbonDataType)) {
1:347b8e1:       return DataTypes.createDecimalType();
1:347b8e1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.TIMESTAMP) {
1:347b8e1:       return DataTypes.TimestampType;
1:347b8e1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.DATE) {
1:347b8e1:       return DataTypes.DateType;
1:347b8e1:     } else {
1:347b8e1:       return null;
1:347b8e1:     }
1:347b8e1:   }
1:347b8e1: 
1:560bfbe:   public static StructType convertToSparkSchema(CarbonTable table) {
1:560bfbe:     List<CarbonColumn> columns = table.getCreateOrderColumn(table.getTableName());
1:560bfbe:     ColumnSchema[] schema = new ColumnSchema[columns.size()];
1:560bfbe:     int i = 0;
1:560bfbe:     for (CarbonColumn column : columns) {
1:560bfbe:       schema[i++] = column.getColumnSchema();
1:560bfbe:     }
1:560bfbe:     return convertToSparkSchema(table, schema);
1:560bfbe:   }
1:560bfbe: 
1:347b8e1:   public static StructType convertToSparkSchema(CarbonTable table, ColumnSchema[] carbonColumns) {
1:347b8e1:     List<StructField> fields = new ArrayList<>(carbonColumns.length);
1:347b8e1:     for (int i = 0; i < carbonColumns.length; i++) {
1:347b8e1:       ColumnSchema carbonColumn = carbonColumns[i];
1:347b8e1:       DataType dataType = carbonColumn.getDataType();
1:347b8e1:       if (org.apache.carbondata.core.metadata.datatype.DataTypes.isDecimal(dataType)) {
1:347b8e1:         fields.add(new StructField(carbonColumn.getColumnName(),
1:347b8e1:             new DecimalType(carbonColumn.getPrecision(), carbonColumn.getScale()),
1:347b8e1:             true, Metadata.empty()));
1:347b8e1:       } else if (org.apache.carbondata.core.metadata.datatype.DataTypes.isStructType(dataType)) {
1:347b8e1:         fields.add(
1:347b8e1:             new StructField(
1:347b8e1:                 carbonColumn.getColumnName(),
1:347b8e1:                 CarbonMetastoreTypes.toDataType(
1:347b8e1:                     String.format("struct<%s>",
1:347b8e1:                         SparkTypeConverter.getStructChildren(table, carbonColumn.getColumnName()))),
1:347b8e1:                 true,
1:347b8e1:                 Metadata.empty()));
1:347b8e1:       } else if (org.apache.carbondata.core.metadata.datatype.DataTypes.isArrayType(dataType)) {
1:347b8e1:         fields.add(
1:347b8e1:             new StructField(
1:347b8e1:                 carbonColumn.getColumnName(),
1:347b8e1:                 CarbonMetastoreTypes.toDataType(
1:347b8e1:                     String.format("array<%s>",
1:347b8e1:                         SparkTypeConverter.getArrayChildren(
1:347b8e1:                             table,
1:347b8e1:                             carbonColumn.getColumnName()))),
1:347b8e1:                 true,
1:347b8e1:                 Metadata.empty()));
1:347b8e1:       } else {
1:347b8e1:         fields.add(new StructField(carbonColumn.getColumnName(),
1:347b8e1:             convertCarbonToSparkDataType(carbonColumn.getDataType()), true, Metadata.empty()));
1:347b8e1:       }
1:347b8e1:     }
1:347b8e1:     return new StructType(fields.toArray(new StructField[0]));
1:347b8e1:   }
1:11a795c: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:560bfbe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
/////////////////////////////////////////////////////////////////////////
1:   public static StructType convertToSparkSchema(CarbonTable table) {
1:     List<CarbonColumn> columns = table.getCreateOrderColumn(table.getTableName());
1:     ColumnSchema[] schema = new ColumnSchema[columns.size()];
1:     int i = 0;
1:     for (CarbonColumn column : columns) {
1:       schema[i++] = column.getColumnSchema();
1:     }
1:     return convertToSparkSchema(table, schema);
1:   }
1: 
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.spark.util;
1: import org.apache.spark.SparkConf;
1: import org.apache.spark.util.Utils;
1: 
1: public class Util {
1:    * return the Array of available local-dirs
1:   public static String[] getConfiguredLocalDirs(SparkConf conf) {
1:     return Utils.getConfiguredLocalDirs(conf);
1:   }
author:ravipesala
-------------------------------------------------------------------------------
commit:347b8e1
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: import org.apache.spark.sql.types.DataTypes;
1: import org.apache.spark.sql.types.DecimalType;
1: import org.apache.spark.sql.types.Metadata;
1: import org.apache.spark.sql.types.StructField;
1: import org.apache.spark.sql.types.StructType;
1: import org.apache.spark.sql.util.CarbonMetastoreTypes;
1: import org.apache.spark.sql.util.SparkTypeConverter;
/////////////////////////////////////////////////////////////////////////
1: 
1:   private static org.apache.spark.sql.types.DataType convertCarbonToSparkDataType(
1:       DataType carbonDataType) {
1:     if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.STRING) {
1:       return DataTypes.StringType;
1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.SHORT) {
1:       return DataTypes.ShortType;
1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.INT) {
1:       return DataTypes.IntegerType;
1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.LONG) {
1:       return DataTypes.LongType;
1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.DOUBLE) {
1:       return DataTypes.DoubleType;
1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.BOOLEAN) {
1:       return DataTypes.BooleanType;
1:     } else if (org.apache.carbondata.core.metadata.datatype.DataTypes.isDecimal(carbonDataType)) {
1:       return DataTypes.createDecimalType();
1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.TIMESTAMP) {
1:       return DataTypes.TimestampType;
1:     } else if (carbonDataType == org.apache.carbondata.core.metadata.datatype.DataTypes.DATE) {
1:       return DataTypes.DateType;
1:     } else {
1:       return null;
1:     }
1:   }
1: 
1:   public static StructType convertToSparkSchema(CarbonTable table, ColumnSchema[] carbonColumns) {
1:     List<StructField> fields = new ArrayList<>(carbonColumns.length);
1:     for (int i = 0; i < carbonColumns.length; i++) {
1:       ColumnSchema carbonColumn = carbonColumns[i];
1:       DataType dataType = carbonColumn.getDataType();
1:       if (org.apache.carbondata.core.metadata.datatype.DataTypes.isDecimal(dataType)) {
1:         fields.add(new StructField(carbonColumn.getColumnName(),
1:             new DecimalType(carbonColumn.getPrecision(), carbonColumn.getScale()),
1:             true, Metadata.empty()));
1:       } else if (org.apache.carbondata.core.metadata.datatype.DataTypes.isStructType(dataType)) {
1:         fields.add(
1:             new StructField(
1:                 carbonColumn.getColumnName(),
1:                 CarbonMetastoreTypes.toDataType(
1:                     String.format("struct<%s>",
1:                         SparkTypeConverter.getStructChildren(table, carbonColumn.getColumnName()))),
1:                 true,
1:                 Metadata.empty()));
1:       } else if (org.apache.carbondata.core.metadata.datatype.DataTypes.isArrayType(dataType)) {
1:         fields.add(
1:             new StructField(
1:                 carbonColumn.getColumnName(),
1:                 CarbonMetastoreTypes.toDataType(
1:                     String.format("array<%s>",
1:                         SparkTypeConverter.getArrayChildren(
1:                             table,
1:                             carbonColumn.getColumnName()))),
1:                 true,
1:                 Metadata.empty()));
1:       } else {
1:         fields.add(new StructField(carbonColumn.getColumnName(),
1:             convertCarbonToSparkDataType(carbonColumn.getDataType()), true, Metadata.empty()));
1:       }
1:     }
1:     return new StructType(fields.toArray(new StructField[0]));
1:   }
commit:f63b1ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.parser;
1: 
1: /**
0:  * It parses data string as per complex data type.
1:  */
0: public interface ComplexParser<E> extends GenericParser<E> {
1: 
1:   /**
0:    * Children to this parser.
0:    * @param parser
1:    */
0:   void addChildren(GenericParser parser);
1: }
author:m00258959
-------------------------------------------------------------------------------
commit:11a795c
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
1: import org.apache.carbondata.hadoop.CarbonInputSplit;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:   /**
1:    * Method to check whether there exists any block which does not contain the blocklet info
1:    *
1:    * @param splitList
1:    * @return
0:    */
1:   public static boolean isBlockWithoutBlockletInfoExists(List<CarbonInputSplit> splitList) {
1:     for (CarbonInputSplit inputSplit : splitList) {
1:       if (null == inputSplit.getDetailInfo().getBlockletInfo()) {
1:         return true;
1:       }
1:     }
1:     return false;
1:   }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
============================================================================