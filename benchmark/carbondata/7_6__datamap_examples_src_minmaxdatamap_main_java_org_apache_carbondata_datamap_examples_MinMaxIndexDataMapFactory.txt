1:ca7e2e3: /*
1:ca7e2e3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ca7e2e3:  * contributor license agreements.  See the NOTICE file distributed with
1:ca7e2e3:  * this work for additional information regarding copyright ownership.
1:ca7e2e3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ca7e2e3:  * (the "License"); you may not use this file except in compliance with
1:ca7e2e3:  * the License.  You may obtain a copy of the License at
1:ca7e2e3:  *
1:ca7e2e3:  *    http://www.apache.org/licenses/LICENSE-2.0
1:ca7e2e3:  *
1:ca7e2e3:  * Unless required by applicable law or agreed to in writing, software
1:ca7e2e3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ca7e2e3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ca7e2e3:  * See the License for the specific language governing permissions and
1:ca7e2e3:  * limitations under the License.
1:ca7e2e3:  */
5:ca7e2e3: 
1:ca7e2e3: package org.apache.carbondata.datamap.examples;
1:ca7e2e3: 
1:ca7e2e3: import java.io.IOException;
1:ca7e2e3: import java.util.ArrayList;
1:ca7e2e3: import java.util.List;
1:ca7e2e3: 
1:ecd6c0c: import org.apache.carbondata.common.logging.LogService;
1:ecd6c0c: import org.apache.carbondata.common.logging.LogServiceFactory;
1:ca7e2e3: import org.apache.carbondata.core.datamap.DataMapDistributable;
1:ca7e2e3: import org.apache.carbondata.core.datamap.DataMapMeta;
1:d35fbaf: import org.apache.carbondata.core.datamap.Segment;
1:747be9b: import org.apache.carbondata.core.datamap.dev.DataMapBuilder;
1:d35fbaf: import org.apache.carbondata.core.datamap.dev.DataMapModel;
1:fc2a7eb: import org.apache.carbondata.core.datamap.dev.DataMapWriter;
1:fc2a7eb: import org.apache.carbondata.core.datamap.dev.cgdatamap.CoarseGrainDataMap;
1:fc2a7eb: import org.apache.carbondata.core.datamap.dev.cgdatamap.CoarseGrainDataMapFactory;
1:cd7c210: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1:5229443: import org.apache.carbondata.core.features.TableOperation;
1:ca7e2e3: import org.apache.carbondata.core.memory.MemoryException;
1:ca7e2e3: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ecd6c0c: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:56330ae: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:ecd6c0c: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:d35fbaf: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1:d35fbaf: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:d35fbaf: import org.apache.carbondata.events.Event;
1:ca7e2e3: 
1:ecd6c0c: import org.apache.commons.lang3.StringUtils;
1:ecd6c0c: 
1:ca7e2e3: /**
1:ca7e2e3:  * Min Max DataMap Factory
1:ca7e2e3:  */
1:fc2a7eb: public class MinMaxIndexDataMapFactory extends CoarseGrainDataMapFactory {
1:ecd6c0c:   private static final LogService LOGGER = LogServiceFactory.getLogService(
1:ecd6c0c:       MinMaxIndexDataMapFactory.class.getName());
1:ecd6c0c:   private DataMapMeta dataMapMeta;
1:ecd6c0c:   private String dataMapName;
1:ca7e2e3:   private AbsoluteTableIdentifier identifier;
1:ecd6c0c: 
1:747be9b:   public MinMaxIndexDataMapFactory(CarbonTable carbonTable, DataMapSchema dataMapSchema) {
1:747be9b:     super(carbonTable, dataMapSchema);
1:9db662a: 
1:ecd6c0c:     // this is an example for datamap, we can choose the columns and operations that
1:ecd6c0c:     // will be supported by this datamap. Furthermore, we can add cache-support for this datamap.
1:ecd6c0c: 
1:ecd6c0c:     // columns that will be indexed
1:747be9b:     List<CarbonColumn> allColumns = getCarbonTable().getCreateOrderColumn(identifier.getTableName());
1:ecd6c0c: 
1:ecd6c0c:     // operations that will be supported on the indexed columns
1:ecd6c0c:     List<ExpressionType> optOperations = new ArrayList<>();
1:ecd6c0c:     optOperations.add(ExpressionType.EQUALS);
1:ecd6c0c:     optOperations.add(ExpressionType.GREATERTHAN);
1:ecd6c0c:     optOperations.add(ExpressionType.GREATERTHAN_EQUALTO);
1:ecd6c0c:     optOperations.add(ExpressionType.LESSTHAN);
1:ecd6c0c:     optOperations.add(ExpressionType.LESSTHAN_EQUALTO);
1:ecd6c0c:     optOperations.add(ExpressionType.NOT_EQUALS);
1:ecd6c0c:     LOGGER.error("MinMaxDataMap support operations: " + StringUtils.join(optOperations, ", "));
1:9db662a:     this.dataMapMeta = new DataMapMeta(allColumns, optOperations);
1:ecd6c0c:   }
1:ca7e2e3: 
1:ca7e2e3:   /**
1:ca7e2e3:    * createWriter will return the MinMaxDataWriter.
2:d35fbaf:    *
1:d35fbaf:    * @param segment
1:9db662a:    * @param shardName
1:ca7e2e3:    * @return
1:ca7e2e3:    */
1:747be9b:   @Override
1:cd7c210:   public DataMapWriter createWriter(Segment segment, String shardName,
1:cd7c210:       SegmentProperties segmentProperties) {
1:747be9b:     return new MinMaxDataWriter(getCarbonTable(), getDataMapSchema(), segment, shardName,
1:9db662a:         dataMapMeta.getIndexedColumns());
1:ecd6c0c:   }
1:9db662a: 
1:747be9b:   @Override
1:cd7c210:   public DataMapBuilder createBuilder(Segment segment, String shardName,
1:cd7c210:       SegmentProperties segmentProperties) throws IOException {
2:ca7e2e3:     return null;
1:9db662a:   }
1:ca7e2e3: 
1:ca7e2e3:   /**
1:ca7e2e3:    * getDataMaps Factory method Initializes the Min Max Data Map and returns.
1:d35fbaf:    *
1:d35fbaf:    * @param segment
1:ca7e2e3:    * @return
1:ca7e2e3:    * @throws IOException
1:ca7e2e3:    */
5:ca7e2e3:   @Override
1:c58eb43:   public List<CoarseGrainDataMap> getDataMaps(Segment segment)
1:9db662a:       throws IOException {
1:fc2a7eb:     List<CoarseGrainDataMap> dataMapList = new ArrayList<>();
1:89a12af:     // Form a dataMap of Type MinMaxIndexDataMap.
1:89a12af:     MinMaxIndexDataMap dataMap = new MinMaxIndexDataMap();
1:ca7e2e3:     try {
1:d35fbaf:       dataMap.init(new DataMapModel(
1:ecd6c0c:           MinMaxDataWriter.genDataMapStorePath(
1:ecd6c0c:               CarbonTablePath.getSegmentPath(
1:ecd6c0c:                   identifier.getTablePath(), segment.getSegmentNo()),
1:ecd6c0c:               dataMapName)));
1:ca7e2e3:     } catch (MemoryException ex) {
1:d35fbaf:       throw new IOException(ex);
1:9db662a:     }
1:ca7e2e3:     dataMapList.add(dataMap);
1:ca7e2e3:     return dataMapList;
4:ca7e2e3:   }
1:ca7e2e3: 
1:ca7e2e3:   /**
1:d35fbaf:    * @param segment
1:ca7e2e3:    * @return
1:ca7e2e3:    */
1:d35fbaf:   @Override public List<DataMapDistributable> toDistributable(Segment segment) {
1:9db662a:     return null;
1:ca7e2e3:   }
1:ca7e2e3: 
1:ca7e2e3:   /**
1:ca7e2e3:    * Clear the DataMap.
1:ca7e2e3:    *
1:d35fbaf:    * @param segment
1:ca7e2e3:    */
1:d35fbaf:   @Override public void clear(Segment segment) {
1:ca7e2e3:   }
1:ca7e2e3: 
1:ca7e2e3:   /**
1:ca7e2e3:    * Clearing the data map.
1:ca7e2e3:    */
1:d35fbaf:   @Override public void clear() {
1:ca7e2e3:   }
1:ca7e2e3: 
1:fc2a7eb:   @Override public List<CoarseGrainDataMap> getDataMaps(DataMapDistributable distributable)
2:d35fbaf:       throws IOException {
1:c58eb43:     return getDataMaps(distributable.getSegment());
1:ca7e2e3:   }
1:ca7e2e3: 
1:d35fbaf:   @Override public void fireEvent(Event event) {
1:ca7e2e3: 
1:ca7e2e3:   }
1:ca7e2e3: 
1:d35fbaf:   @Override public DataMapMeta getMeta() {
1:ecd6c0c:     return this.dataMapMeta;
1:d8562e5:   }
1:d8562e5: 
1:d8562e5:   @Override
1:1fd3703:   public void deleteDatamapData(Segment segment) throws IOException {
1:d8562e5: 
1:ca7e2e3:   }
1:860e144: 
1:860e144:   @Override public void deleteDatamapData() {
1:5229443: 
1:860e144:   }
1:860e144: 
1:5229443:   @Override public boolean willBecomeStale(TableOperation operation) {
1:5229443:     return false;
1:5229443:   }
1:ca7e2e3: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:1fd3703
/////////////////////////////////////////////////////////////////////////
1:   public void deleteDatamapData(Segment segment) throws IOException {
commit:d8562e5
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public void deleteDatamapData(Segment segment) {
1: 
1:   }
1: 
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.block.SegmentProperties;
/////////////////////////////////////////////////////////////////////////
1:   public DataMapWriter createWriter(Segment segment, String shardName,
1:       SegmentProperties segmentProperties) {
1:   public DataMapBuilder createBuilder(Segment segment, String shardName,
1:       SegmentProperties segmentProperties) throws IOException {
commit:ecd6c0c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonMetadata;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
0: import org.apache.commons.collections.CollectionUtils;
0: import org.apache.commons.collections.Transformer;
1: import org.apache.commons.lang3.StringUtils;
1: 
1:   private static final LogService LOGGER = LogServiceFactory.getLogService(
1:       MinMaxIndexDataMapFactory.class.getName());
1:   private DataMapMeta dataMapMeta;
1:   private String dataMapName;
1:   // this is an example for datamap, we can choose the columns and operations that
1:   // will be supported by this datamap. Furthermore, we can add cache-support for this datamap.
0:   @Override public void init(AbsoluteTableIdentifier identifier, DataMapSchema dataMapSchema)
0:       throws IOException, MalformedDataMapCommandException {
0:     this.dataMapName = dataMapSchema.getDataMapName();
1: 
0:     String tableUniqueName = identifier.getCarbonTableIdentifier().getTableUniqueName();
0:     CarbonTable carbonTable = CarbonMetadata.getInstance().getCarbonTable(tableUniqueName);
0:     if (null == carbonTable) {
0:       throw new IOException("Failed to get carbon table with name " + tableUniqueName);
1:     }
1: 
1:     // columns that will be indexed
0:     List<CarbonColumn> allColumns = carbonTable.getCreateOrderColumn(identifier.getTableName());
0:     List<String> minMaxCols = (List) CollectionUtils.collect(allColumns, new Transformer() {
0:       @Override public Object transform(Object o) {
0:         return ((CarbonColumn) o).getColName();
1:       }
0:     });
0:     LOGGER.info("MinMaxDataMap support index columns: " + StringUtils.join(minMaxCols, ", "));
1: 
1:     // operations that will be supported on the indexed columns
1:     List<ExpressionType> optOperations = new ArrayList<>();
1:     optOperations.add(ExpressionType.EQUALS);
1:     optOperations.add(ExpressionType.GREATERTHAN);
1:     optOperations.add(ExpressionType.GREATERTHAN_EQUALTO);
1:     optOperations.add(ExpressionType.LESSTHAN);
1:     optOperations.add(ExpressionType.LESSTHAN_EQUALTO);
1:     optOperations.add(ExpressionType.NOT_EQUALS);
1:     LOGGER.error("MinMaxDataMap support operations: " + StringUtils.join(optOperations, ", "));
0:     this.dataMapMeta = new DataMapMeta(minMaxCols, optOperations);
/////////////////////////////////////////////////////////////////////////
0:     return new MinMaxDataWriter(identifier, dataMapName, segment, writeDirectoryPath);
/////////////////////////////////////////////////////////////////////////
1:           MinMaxDataWriter.genDataMapStorePath(
1:               CarbonTablePath.getSegmentPath(
1:                   identifier.getTablePath(), segment.getSegmentNo()),
1:               dataMapName)));
/////////////////////////////////////////////////////////////////////////
0:     return getDataMaps(distributable.getSegment(), readCommittedScope);
/////////////////////////////////////////////////////////////////////////
1:     return this.dataMapMeta;
commit:5397c05
/////////////////////////////////////////////////////////////////////////
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
0:   @Override public AbstractDataMapWriter createWriter(Segment segment, String writeDirectoryPath) {
0:     return new MinMaxDataWriter(identifier, segment, writeDirectoryPath);
author:Jacky Li
-------------------------------------------------------------------------------
commit:747be9b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.dev.DataMapBuilder;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public MinMaxIndexDataMapFactory(CarbonTable carbonTable, DataMapSchema dataMapSchema) {
1:     super(carbonTable, dataMapSchema);
0:     // this is an example for datamap, we can choose the columns and operations that
0:     // will be supported by this datamap. Furthermore, we can add cache-support for this datamap.
1:     List<CarbonColumn> allColumns = getCarbonTable().getCreateOrderColumn(identifier.getTableName());
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public DataMapWriter createWriter(Segment segment, String shardName) {
1:     return new MinMaxDataWriter(getCarbonTable(), getDataMapSchema(), segment, shardName,
1:   @Override
0:   public DataMapBuilder createBuilder(Segment segment, String shardName)
commit:9db662a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datamap.dev.DataMapRefresher;
/////////////////////////////////////////////////////////////////////////
0:   private DataMapSchema dataMapSchema;
0:   public MinMaxIndexDataMapFactory(CarbonTable carbonTable) {
0:     super(carbonTable);
1:   }
1: 
0:   @Override public void init(DataMapSchema dataMapSchema)
0:     this.dataMapSchema = dataMapSchema;
/////////////////////////////////////////////////////////////////////////
1:     this.dataMapMeta = new DataMapMeta(allColumns, optOperations);
1:    * @param shardName
0:   @Override public DataMapWriter createWriter(Segment segment, String shardName) {
0:     return new MinMaxDataWriter(carbonTable, dataMapSchema, segment, shardName,
1:         dataMapMeta.getIndexedColumns());
1:   }
1: 
0:   @Override public DataMapRefresher createRefresher(Segment segment, String shardName)
1:       throws IOException {
1:     return null;
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.dev.DataMapWriter;
1: import org.apache.carbondata.core.datamap.dev.cgdatamap.CoarseGrainDataMap;
1: import org.apache.carbondata.core.datamap.dev.cgdatamap.CoarseGrainDataMapFactory;
/////////////////////////////////////////////////////////////////////////
1: public class MinMaxIndexDataMapFactory extends CoarseGrainDataMapFactory {
/////////////////////////////////////////////////////////////////////////
0:   @Override public DataMapWriter createWriter(Segment segment, String writeDirectoryPath) {
/////////////////////////////////////////////////////////////////////////
0:   @Override public List<CoarseGrainDataMap> getDataMaps(Segment segment)
1:     List<CoarseGrainDataMap> dataMapList = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:   @Override public List<CoarseGrainDataMap> getDataMaps(DataMapDistributable distributable)
commit:89a12af
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datamap.dev.cgdatamap.AbstractCoarseGrainIndexDataMap;
0: import org.apache.carbondata.core.datamap.dev.cgdatamap.AbstractCoarseGrainIndexDataMapFactory;
/////////////////////////////////////////////////////////////////////////
0: public class MinMaxIndexDataMapFactory extends AbstractCoarseGrainIndexDataMapFactory {
/////////////////////////////////////////////////////////////////////////
0:   @Override public List<AbstractCoarseGrainIndexDataMap> getDataMaps(Segment segment)
0:     List<AbstractCoarseGrainIndexDataMap> dataMapList = new ArrayList<>();
1:     // Form a dataMap of Type MinMaxIndexDataMap.
1:     MinMaxIndexDataMap dataMap = new MinMaxIndexDataMap();
/////////////////////////////////////////////////////////////////////////
0:   @Override public List<AbstractCoarseGrainIndexDataMap> getDataMaps(DataMapDistributable distributable)
author:akashrn5
-------------------------------------------------------------------------------
commit:5229443
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.features.TableOperation;
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override public boolean willBecomeStale(TableOperation operation) {
1:     return false;
1:   }
commit:860e144
/////////////////////////////////////////////////////////////////////////
0:   @Override public void init(CarbonTable carbonTable, DataMapSchema dataMapSchema)
0:     this.identifier = carbonTable.getAbsoluteTableIdentifier();
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override public void deleteDatamapData() {
1: 
1:   }
author:sounakr
-------------------------------------------------------------------------------
commit:c58eb43
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public List<CoarseGrainDataMap> getDataMaps(Segment segment)
/////////////////////////////////////////////////////////////////////////
0:   @Override public List<CoarseGrainDataMap> getDataMaps(DataMapDistributable distributable)
1:     return getDataMaps(distributable.getSegment());
commit:ca7e2e3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.datamap.examples;
1: 
0: import java.io.File;
1: import java.io.IOException;
1: import java.util.ArrayList;
0: import java.util.Arrays;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.datamap.DataMapDistributable;
1: import org.apache.carbondata.core.datamap.DataMapMeta;
0: import org.apache.carbondata.core.datamap.dev.DataMap;
0: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
0: import org.apache.carbondata.core.datamap.dev.DataMapWriter;
0: import org.apache.carbondata.core.events.ChangeEvent;
0: import org.apache.carbondata.core.indexstore.schema.FilterType;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: 
1: 
1: /**
1:  * Min Max DataMap Factory
1:  */
0: public class MinMaxDataMapFactory implements DataMapFactory {
1: 
1:   private AbsoluteTableIdentifier identifier;
1: 
1:   @Override
0:   public void init(AbsoluteTableIdentifier identifier, String dataMapName) {
0:     this.identifier = identifier;
1:   }
1: 
1:   /**
1:    * createWriter will return the MinMaxDataWriter.
0:    * @param segmentId
1:    * @return
1:    */
1:   @Override
0:   public DataMapWriter createWriter(String segmentId) {
0:     return new MinMaxDataWriter();
1:   }
1: 
1:   /**
1:    * getDataMaps Factory method Initializes the Min Max Data Map and returns.
0:    * @param segmentId
1:    * @return
1:    * @throws IOException
1:    */
0:   @Override public List<DataMap> getDataMaps(String segmentId) throws IOException {
0:     List<DataMap> dataMapList = new ArrayList<>();
0:     // Form a dataMap of Type MinMaxDataMap.
0:     MinMaxDataMap dataMap = new MinMaxDataMap();
1:     try {
0:       dataMap.init(identifier.getTablePath() + "/Fact/Part0/Segment_" + segmentId + File.separator);
1:     } catch (MemoryException ex) {
1: 
1:     }
1:     dataMapList.add(dataMap);
1:     return dataMapList;
1:   }
1: 
1:   /**
1:    *
0:    * @param segmentId
1:    * @return
1:    */
0:   @Override public List<DataMapDistributable> toDistributable(String segmentId) {
1:     return null;
1:   }
1: 
1:   /**
1:    * Clear the DataMap.
0:    * @param segmentId
1:    */
0:   @Override public void clear(String segmentId) {
1:   }
1: 
1:   /**
1:    * Clearing the data map.
1:    */
1:   @Override
0:   public void clear() {
1:   }
1: 
0:   @Override public DataMap getDataMap(DataMapDistributable distributable) {
1:     return null;
1:   }
1: 
1:   @Override
0:   public void fireEvent(ChangeEvent event) {
1: 
1:   }
1: 
1:   @Override
0:   public DataMapMeta getMeta() {
0:     return new DataMapMeta(new ArrayList<String>(Arrays.asList("c2")), FilterType.EQUALTO);
1:   }
1: }
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:280a400
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.readcommitter.ReadCommittedScope;
/////////////////////////////////////////////////////////////////////////
0:    * @param readCommittedScope
0:   @Override
0:   public List<CoarseGrainDataMap> getDataMaps(Segment segment,
0:       ReadCommittedScope readCommittedScope)
/////////////////////////////////////////////////////////////////////////
0:   @Override public List<CoarseGrainDataMap> getDataMaps(DataMapDistributable distributable,
0:       ReadCommittedScope readCommittedScope)
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:56330ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
/////////////////////////////////////////////////////////////////////////
0:   @Override public void init(AbsoluteTableIdentifier identifier, DataMapSchema dataMapSchema) {
author:ravipesala
-------------------------------------------------------------------------------
commit:d35fbaf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.Segment;
0: import org.apache.carbondata.core.datamap.dev.AbstractDataMapWriter;
1: import org.apache.carbondata.core.datamap.dev.DataMapModel;
0: import org.apache.carbondata.core.datamap.dev.cgdatamap.AbstractCoarseGrainDataMap;
0: import org.apache.carbondata.core.datamap.dev.cgdatamap.AbstractCoarseGrainDataMapFactory;
1: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: import org.apache.carbondata.events.Event;
0: public class MinMaxDataMapFactory extends AbstractCoarseGrainDataMapFactory {
0:   @Override public void init(AbsoluteTableIdentifier identifier, String dataMapName) {
1:    *
1:    * @param segment
0:   @Override public AbstractDataMapWriter createWriter(Segment segment) {
0:     return new MinMaxDataWriter(identifier, segment.getSegmentNo(),
0:         CarbonTablePath.getSegmentPath(identifier.getTablePath(), segment.getSegmentNo()));
1:    *
1:    * @param segment
0:   @Override public List<AbstractCoarseGrainDataMap> getDataMaps(Segment segment)
1:       throws IOException {
0:     List<AbstractCoarseGrainDataMap> dataMapList = new ArrayList<>();
1:       dataMap.init(new DataMapModel(
0:           CarbonTablePath.getSegmentPath(identifier.getTablePath(), segment.getSegmentNo())));
1:       throw new IOException(ex);
1:    * @param segment
1:   @Override public List<DataMapDistributable> toDistributable(Segment segment) {
1:    *
1:    * @param segment
1:   @Override public void clear(Segment segment) {
1:   @Override public void clear() {
0:   @Override public List<AbstractCoarseGrainDataMap> getDataMaps(DataMapDistributable distributable)
1:       throws IOException {
1:   @Override public void fireEvent(Event event) {
1:   @Override public DataMapMeta getMeta() {
0:     return new DataMapMeta(new ArrayList<String>(Arrays.asList("c2")),
0:         new ArrayList<ExpressionType>());
============================================================================