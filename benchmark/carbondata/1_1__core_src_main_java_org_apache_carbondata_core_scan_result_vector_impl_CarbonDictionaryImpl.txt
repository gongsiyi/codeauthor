1:3a4b881: /*
1:3a4b881:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3a4b881:  * contributor license agreements.  See the NOTICE file distributed with
1:3a4b881:  * this work for additional information regarding copyright ownership.
1:3a4b881:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3a4b881:  * (the "License"); you may not use this file except in compliance with
1:3a4b881:  * the License.  You may obtain a copy of the License at
1:3a4b881:  *
1:3a4b881:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3a4b881:  *
1:3a4b881:  * Unless required by applicable law or agreed to in writing, software
1:3a4b881:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3a4b881:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3a4b881:  * See the License for the specific language governing permissions and
1:3a4b881:  * limitations under the License.
1:3a4b881:  */
1:3a4b881: package org.apache.carbondata.core.scan.result.vector.impl;
1:3a4b881: 
1:3a4b881: import org.apache.carbondata.core.scan.result.vector.CarbonDictionary;
1:3a4b881: 
1:3a4b881: public class CarbonDictionaryImpl implements CarbonDictionary {
1:3a4b881: 
1:3a4b881:   private byte[][] dictionary;
1:3a4b881: 
1:3a4b881:   private int actualSize;
1:3a4b881: 
1:3a4b881:   private boolean isDictUsed;
1:3a4b881: 
1:3a4b881:   public CarbonDictionaryImpl(byte[][] dictionary, int actualSize) {
1:3a4b881:     this.dictionary = dictionary;
1:3a4b881:     this.actualSize = actualSize;
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public int getDictionaryActualSize() {
1:3a4b881:     return actualSize;
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public int getDictionarySize() {
1:3a4b881:     return this.dictionary.length;
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public boolean isDictionaryUsed() {
1:3a4b881:     return this.isDictUsed;
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public void setDictionaryUsed() {
1:3a4b881:     this.isDictUsed = true;
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public byte[] getDictionaryValue(int index) {
1:3a4b881:     return dictionary[index];
1:3a4b881:   }
1:3a4b881: 
1:3a4b881: }
============================================================================
author:kumarvishal09
-------------------------------------------------------------------------------
commit:3a4b881
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.result.vector.impl;
1: 
1: import org.apache.carbondata.core.scan.result.vector.CarbonDictionary;
1: 
1: public class CarbonDictionaryImpl implements CarbonDictionary {
1: 
1:   private byte[][] dictionary;
1: 
1:   private int actualSize;
1: 
1:   private boolean isDictUsed;
1: 
1:   public CarbonDictionaryImpl(byte[][] dictionary, int actualSize) {
1:     this.dictionary = dictionary;
1:     this.actualSize = actualSize;
1:   }
1: 
1:   @Override public int getDictionaryActualSize() {
1:     return actualSize;
1:   }
1: 
1:   @Override public int getDictionarySize() {
1:     return this.dictionary.length;
1:   }
1: 
1:   @Override public boolean isDictionaryUsed() {
1:     return this.isDictUsed;
1:   }
1: 
1:   @Override public void setDictionaryUsed() {
1:     this.isDictUsed = true;
1:   }
1: 
1:   @Override public byte[] getDictionaryValue(int index) {
1:     return dictionary[index];
1:   }
1: 
1: }
============================================================================