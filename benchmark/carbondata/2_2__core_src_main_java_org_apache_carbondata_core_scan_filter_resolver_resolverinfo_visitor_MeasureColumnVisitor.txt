1:266c473: /*
1:266c473:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:266c473:  * contributor license agreements.  See the NOTICE file distributed with
1:266c473:  * this work for additional information regarding copyright ownership.
1:266c473:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:266c473:  * (the "License"); you may not use this file except in compliance with
1:266c473:  * the License.  You may obtain a copy of the License at
1:266c473:  *
1:266c473:  *    http://www.apache.org/licenses/LICENSE-2.0
1:266c473:  *
1:266c473:  * Unless required by applicable law or agreed to in writing, software
1:266c473:  * distributed under the License is distributed on an "AS IS" BASIS,
1:266c473:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:266c473:  * See the License for the specific language governing permissions and
1:266c473:  * limitations under the License.
1:266c473:  */
1:266c473: package org.apache.carbondata.core.scan.filter.resolver.resolverinfo.visitor;
1:266c473: 
1:266c473: import java.util.ArrayList;
1:266c473: import java.util.List;
1:266c473: 
1:266c473: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:266c473: import org.apache.carbondata.core.scan.expression.conditional.EqualToExpression;
1:266c473: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1:266c473: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1:266c473: import org.apache.carbondata.core.scan.filter.ColumnFilterInfo;
1:266c473: import org.apache.carbondata.core.scan.filter.FilterUtil;
1:266c473: import org.apache.carbondata.core.scan.filter.resolver.metadata.FilterResolverMetadata;
1:266c473: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.ColumnResolvedFilterInfo;
1:266c473: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.MeasureColumnResolvedFilterInfo;
1:266c473: 
1:266c473: public class MeasureColumnVisitor implements ResolvedFilterInfoVisitorIntf {
1:266c473: 
1:266c473:   /**
1:266c473:    * Visitor Method will update the filter related details in visitableObj, For no dictionary
1:266c473:    * type columns the filter members will resolved directly, no need to look up in dictionary
1:266c473:    * since it will not be part of dictionary, directly the actual data can be converted as
1:266c473:    * byte[] and can be set. this type of encoding is effective when the particular column
1:266c473:    * is having very high cardinality.
1:266c473:    *
1:266c473:    * @param visitableObj
1:266c473:    * @param metadata
1:266c473:    * @throws FilterUnsupportedException,if exception occurs while evaluating
1:266c473:    *                                       filter models.
1:266c473:    */
1:266c473:   public void populateFilterResolvedInfo(ColumnResolvedFilterInfo visitableObj,
1:266c473:       FilterResolverMetadata metadata) throws FilterUnsupportedException {
1:500654e:     if (visitableObj instanceof MeasureColumnResolvedFilterInfo) {
1:500654e:       MeasureColumnResolvedFilterInfo resolveDimension =
1:500654e:           (MeasureColumnResolvedFilterInfo) visitableObj;
1:500654e:       ColumnFilterInfo resolvedFilterObject = null;
1:500654e:       List<String> evaluateResultListFinal = new ArrayList<>(1);
1:500654e:       try {
1:500654e:         // handling for is null case scenarios
1:500654e:         if (metadata.getExpression() instanceof EqualToExpression) {
1:500654e:           EqualToExpression expression = (EqualToExpression) metadata.getExpression();
1:500654e:           if (expression.isNull) {
1:500654e:             evaluateResultListFinal = new ArrayList<>(1);
1:500654e:             evaluateResultListFinal.add(CarbonCommonConstants.MEMBER_DEFAULT_VAL);
1:500654e:           }
1:500654e:         } else {
1:500654e:           evaluateResultListFinal = metadata.getExpression().evaluate(null).getListAsString();
1:500654e:         }
1:500654e:         // Adding default  null member inorder to not display the same while
1:500654e:         // displaying the report as per hive compatibility.
1:500654e:         if (!metadata.isIncludeFilter() && !evaluateResultListFinal
1:500654e:             .contains(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {
2:266c473:           evaluateResultListFinal.add(CarbonCommonConstants.MEMBER_DEFAULT_VAL);
2:266c473:         }
1:500654e:       } catch (FilterIllegalMemberException e) {
1:500654e:         throw new FilterUnsupportedException(e);
1:266c473:       }
1:500654e:       resolvedFilterObject = FilterUtil
1:500654e:           .getMeasureValKeyMemberForFilter(evaluateResultListFinal, metadata.isIncludeFilter(),
1:500654e:               metadata.getColumnExpression().getDataType(), resolveDimension.getMeasure());
1:500654e:       resolveDimension.setFilterValues(resolvedFilterObject);
1:266c473:     }
1:266c473:   }
1:266c473: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1:     if (visitableObj instanceof MeasureColumnResolvedFilterInfo) {
1:       MeasureColumnResolvedFilterInfo resolveDimension =
1:           (MeasureColumnResolvedFilterInfo) visitableObj;
1:       ColumnFilterInfo resolvedFilterObject = null;
1:       List<String> evaluateResultListFinal = new ArrayList<>(1);
1:       try {
1:         // handling for is null case scenarios
1:         if (metadata.getExpression() instanceof EqualToExpression) {
1:           EqualToExpression expression = (EqualToExpression) metadata.getExpression();
1:           if (expression.isNull) {
1:             evaluateResultListFinal = new ArrayList<>(1);
1:             evaluateResultListFinal.add(CarbonCommonConstants.MEMBER_DEFAULT_VAL);
1:           }
1:         } else {
1:           evaluateResultListFinal = metadata.getExpression().evaluate(null).getListAsString();
1:         }
1:         // Adding default  null member inorder to not display the same while
1:         // displaying the report as per hive compatibility.
1:         if (!metadata.isIncludeFilter() && !evaluateResultListFinal
1:             .contains(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {
1:       } catch (FilterIllegalMemberException e) {
1:         throw new FilterUnsupportedException(e);
1:       resolvedFilterObject = FilterUtil
1:           .getMeasureValKeyMemberForFilter(evaluateResultListFinal, metadata.isIncludeFilter(),
1:               metadata.getColumnExpression().getDataType(), resolveDimension.getMeasure());
1:       resolveDimension.setFilterValues(resolvedFilterObject);
author:sounakr
-------------------------------------------------------------------------------
commit:266c473
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.filter.resolver.resolverinfo.visitor;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.scan.expression.conditional.EqualToExpression;
1: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1: import org.apache.carbondata.core.scan.filter.ColumnFilterInfo;
1: import org.apache.carbondata.core.scan.filter.FilterUtil;
1: import org.apache.carbondata.core.scan.filter.resolver.metadata.FilterResolverMetadata;
1: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.ColumnResolvedFilterInfo;
1: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.MeasureColumnResolvedFilterInfo;
1: 
1: public class MeasureColumnVisitor implements ResolvedFilterInfoVisitorIntf {
1: 
1:   /**
1:    * Visitor Method will update the filter related details in visitableObj, For no dictionary
1:    * type columns the filter members will resolved directly, no need to look up in dictionary
1:    * since it will not be part of dictionary, directly the actual data can be converted as
1:    * byte[] and can be set. this type of encoding is effective when the particular column
1:    * is having very high cardinality.
1:    *
1:    * @param visitableObj
1:    * @param metadata
1:    * @throws FilterUnsupportedException,if exception occurs while evaluating
1:    *                                       filter models.
1:    */
1:   public void populateFilterResolvedInfo(ColumnResolvedFilterInfo visitableObj,
1:       FilterResolverMetadata metadata) throws FilterUnsupportedException {
0:     MeasureColumnResolvedFilterInfo resolveDimension =
0:         (MeasureColumnResolvedFilterInfo) visitableObj;
0:     ColumnFilterInfo resolvedFilterObject = null;
0:     List<String> evaluateResultListFinal = null;
0:     try {
0:       // handling for is null case scenarios
0:       if (metadata.getExpression() instanceof EqualToExpression) {
0:         EqualToExpression expression = (EqualToExpression) metadata.getExpression();
0:         if (expression.isNull) {
0:           evaluateResultListFinal = new ArrayList<>(1);
1:           evaluateResultListFinal.add(CarbonCommonConstants.MEMBER_DEFAULT_VAL);
1:         }
0:       } else {
0:         evaluateResultListFinal = metadata.getExpression().evaluate(null).getListAsString();
1:       }
0:       // Adding default  null member inorder to not display the same while
0:       // displaying the report as per hive compatibility.
0:       if (!metadata.isIncludeFilter() && !evaluateResultListFinal
0:           .contains(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {
1:         evaluateResultListFinal.add(CarbonCommonConstants.MEMBER_DEFAULT_VAL);
1:       }
0:     } catch (FilterIllegalMemberException e) {
0:       throw new FilterUnsupportedException(e);
1:     }
0:     resolvedFilterObject = FilterUtil
0:         .getMeasureValKeyMemberForFilter(evaluateResultListFinal, metadata.isIncludeFilter(),
0:             metadata.getColumnExpression().getDataType(), resolveDimension.getMeasure());
0:     resolveDimension.setFilterValues(resolvedFilterObject);
1:   }
1: }
============================================================================