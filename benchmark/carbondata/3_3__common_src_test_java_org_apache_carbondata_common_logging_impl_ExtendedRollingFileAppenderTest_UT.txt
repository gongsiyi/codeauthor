1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.common.logging.impl;
1:cd6a4ff: 
1:5b51d48: import org.junit.Assert;
1:cd6a4ff: import mockit.Deencapsulation;
1:cd6a4ff: import org.apache.log4j.Logger;
1:cd6a4ff: import org.apache.log4j.spi.LoggingEvent;
1:cd6a4ff: import org.junit.After;
1:cd6a4ff: import org.junit.Before;
1:cd6a4ff: import org.junit.Test;
1:cd6a4ff: 
1:cd6a4ff: public class ExtendedRollingFileAppenderTest_UT {
1:cd6a4ff: 
1:cd6a4ff:   private ExtendedRollingFileAppender rAppender = null;
1:cd6a4ff: 
1:cd6a4ff:   @Before public void setUp() throws Exception {
1:cd6a4ff:     rAppender = new ExtendedRollingFileAppender();
1:cd6a4ff:     Deencapsulation.setField(rAppender, "fileName", "dummy.log");
1:cd6a4ff:     Deencapsulation.setField(rAppender, "maxBackupIndex", 1);
1:cd6a4ff:     Deencapsulation.setField(rAppender, "maxFileSize", 1000L);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @After public void tearDown() throws Exception {
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testRollOver() {
1:cd6a4ff:     rAppender.rollOver();
1:cd6a4ff:     rAppender.rollOver();
1:cd6a4ff:     rAppender.rollOver();
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testCleanLogs() {
1:cd6a4ff:     final String startName = "dummy";
1:cd6a4ff:     final String folderPath = "./";
1:cd6a4ff:     int maxBackupIndex = 1;
1:cd6a4ff: 
1:cd6a4ff:     Deencapsulation.invoke(rAppender, "cleanLogs", startName, folderPath, maxBackupIndex);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testSubAppendLoggingEvent() {
1:cd6a4ff:     Logger logger = Logger.getLogger(this.getClass());
1:cd6a4ff:     LoggingEvent event = new LoggingEvent(null, logger, 0L, AuditLevel.DEBUG, null, null);
1:cd6a4ff: 
1:cd6a4ff:     try {
1:cd6a4ff:       rAppender.subAppend(event);
1:cd6a4ff:     } catch (Exception e) {
1:cd6a4ff:       //
1:cd6a4ff:     }
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:aniket
-------------------------------------------------------------------------------
commit:5b51d48
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
commit:5b51d48
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Assert;
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.common.logging.impl;
1: 
0: import junit.framework.Assert;
1: import mockit.Deencapsulation;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class ExtendedRollingFileAppenderTest_UT {
1: 
1:   private ExtendedRollingFileAppender rAppender = null;
1: 
1:   @Before public void setUp() throws Exception {
1:     rAppender = new ExtendedRollingFileAppender();
1:     Deencapsulation.setField(rAppender, "fileName", "dummy.log");
1:     Deencapsulation.setField(rAppender, "maxBackupIndex", 1);
1:     Deencapsulation.setField(rAppender, "maxFileSize", 1000L);
1:   }
1: 
1:   @After public void tearDown() throws Exception {
1:   }
1: 
1:   @Test public void testRollOver() {
1:     rAppender.rollOver();
1:     rAppender.rollOver();
1:     rAppender.rollOver();
1:     Assert.assertTrue(true);
1:   }
1: 
1:   @Test public void testCleanLogs() {
1:     final String startName = "dummy";
1:     final String folderPath = "./";
1:     int maxBackupIndex = 1;
1: 
1:     Deencapsulation.invoke(rAppender, "cleanLogs", startName, folderPath, maxBackupIndex);
1:   }
1: 
1:   @Test public void testSubAppendLoggingEvent() {
1:     Logger logger = Logger.getLogger(this.getClass());
1:     LoggingEvent event = new LoggingEvent(null, logger, 0L, AuditLevel.DEBUG, null, null);
1: 
1:     try {
1:       rAppender.subAppend(event);
1:     } catch (Exception e) {
1:       //
1:     }
1:     Assert.assertTrue(true);
1:   }
1: 
1: }
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.common.logging.impl;
0: 
0: import junit.framework.Assert;
0: import mockit.Deencapsulation;
0: import org.apache.log4j.Logger;
0: import org.apache.log4j.spi.LoggingEvent;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: 
0: public class ExtendedRollingFileAppenderTest_UT {
0: 
0:   private ExtendedRollingFileAppender rAppender = null;
0: 
0:   @Before public void setUp() throws Exception {
0:     rAppender = new ExtendedRollingFileAppender();
0:     Deencapsulation.setField(rAppender, "fileName", "dummy.log");
0:     Deencapsulation.setField(rAppender, "maxBackupIndex", 1);
0:     Deencapsulation.setField(rAppender, "maxFileSize", 1000L);
0:   }
0: 
0:   @After public void tearDown() throws Exception {
0:   }
0: 
0:   @Test public void testRollOver() {
0:     rAppender.rollOver();
0:     rAppender.rollOver();
0:     rAppender.rollOver();
0:     Assert.assertTrue(true);
0:   }
0: 
0:   @Test public void testCleanLogs() {
0:     final String startName = "dummy";
0:     final String folderPath = "./";
0:     int maxBackupIndex = 1;
0: 
0:     Deencapsulation.invoke(rAppender, "cleanLogs", startName, folderPath, maxBackupIndex);
0:   }
0: 
0:   @Test public void testSubAppendLoggingEvent() {
0:     Logger logger = Logger.getLogger(this.getClass());
0:     LoggingEvent event = new LoggingEvent(null, logger, 0L, AuditLevel.DEBUG, null, null);
0: 
0:     try {
0:       rAppender.subAppend(event);
0:     } catch (Exception e) {
0:       //
0:     }
0:     Assert.assertTrue(true);
0:   }
0: 
0: }
============================================================================