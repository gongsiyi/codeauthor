1:2fc0ad3: /*
1:2fc0ad3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2fc0ad3:  * contributor license agreements.  See the NOTICE file distributed with
1:2fc0ad3:  * this work for additional information regarding copyright ownership.
1:2fc0ad3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2fc0ad3:  * (the "License"); you may not use this file except in compliance with
1:2fc0ad3:  * the License.  You may obtain a copy of the License at
1:2fc0ad3:  *
1:2fc0ad3:  *    http://www.apache.org/licenses/LICENSE-2.0
1:2fc0ad3:  *
1:2fc0ad3:  * Unless required by applicable law or agreed to in writing, software
1:2fc0ad3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2fc0ad3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2fc0ad3:  * See the License for the specific language governing permissions and
1:2fc0ad3:  * limitations under the License.
1:2fc0ad3:  */
1:2fc0ad3: package org.apache.carbondata.core.scan.result.iterator;
1:2fc0ad3: 
1:2fc0ad3: import java.util.ArrayList;
1:2fc0ad3: import java.util.List;
1:2fc0ad3: import java.util.concurrent.Callable;
1:2fc0ad3: import java.util.concurrent.ExecutionException;
1:2fc0ad3: import java.util.concurrent.ExecutorService;
1:2fc0ad3: import java.util.concurrent.Future;
1:2fc0ad3: 
1:2fc0ad3: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:2fc0ad3: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1:2fc0ad3: import org.apache.carbondata.core.scan.model.QueryModel;
1:2fc0ad3: import org.apache.carbondata.core.scan.processor.BlockScan;
1:2fc0ad3: import org.apache.carbondata.core.stats.QueryStatistic;
1:2fc0ad3: import org.apache.carbondata.core.stats.QueryStatisticsConstants;
1:2fc0ad3: import org.apache.carbondata.core.stats.QueryStatisticsModel;
1:2fc0ad3: import org.apache.carbondata.core.stats.QueryStatisticsRecorder;
1:2fc0ad3: 
1:2fc0ad3: public abstract class AbstractSearchModeResultIterator
1:2fc0ad3:         extends AbstractDetailQueryResultIterator<Object> {
1:2fc0ad3: 
1:2fc0ad3:   private FileFactory.FileType fileType;
1:2fc0ad3:   private List<Future<BlockScan>> taskSubmitList;
1:2fc0ad3:   protected BlockScan curBlockScan;
1:2fc0ad3:   private int nextBlockScanIndex = 0;
1:2fc0ad3: 
1:2fc0ad3:   public AbstractSearchModeResultIterator(List<BlockExecutionInfo> infos, QueryModel queryModel,
1:2fc0ad3:                                           ExecutorService execService) {
1:2fc0ad3:     super(infos, queryModel, execService);
1:2fc0ad3:     this.fileType = FileFactory.getFileType(queryModel.getAbsoluteTableIdentifier().getTablePath());
1:2fc0ad3:     scanAll();
1:2fc0ad3:   }
1:2fc0ad3: 
1:2fc0ad3:   private void scanAll() {
1:2fc0ad3:     taskSubmitList = new ArrayList<>(blockExecutionInfos.size());
1:2fc0ad3:     for (final BlockExecutionInfo info: blockExecutionInfos) {
1:2fc0ad3:       taskSubmitList.add(execService.submit(new Callable<BlockScan>() {
1:2fc0ad3: 
1:2fc0ad3:         @Override
1:2fc0ad3:         public BlockScan call() throws Exception {
1:2fc0ad3:           BlockScan blockScan = new BlockScan(info, FileFactory.getFileHolder(fileType),
1:2fc0ad3:               buildQueryStatiticsModel(recorder));
1:2fc0ad3:           blockScan.scan();
1:2fc0ad3:           return blockScan;
1:2fc0ad3:         }
1:2fc0ad3:       }));
1:2fc0ad3:     }
1:2fc0ad3:   }
1:2fc0ad3: 
1:2fc0ad3:   @Override
1:2fc0ad3:   public boolean hasNext() {
1:2fc0ad3:     try {
1:2fc0ad3:       while ((curBlockScan == null || !curBlockScan.hasNext()) &&
1:2fc0ad3:               nextBlockScanIndex < taskSubmitList.size()) {
1:2fc0ad3:         curBlockScan = taskSubmitList.get(nextBlockScanIndex++).get();
1:2fc0ad3:       }
1:2fc0ad3:       return curBlockScan != null && curBlockScan.hasNext();
1:2fc0ad3:     } catch (InterruptedException | ExecutionException e) {
1:2fc0ad3:       throw new RuntimeException(e);
1:2fc0ad3:     }
1:2fc0ad3:   }
1:2fc0ad3: 
1:2fc0ad3:   private QueryStatisticsModel buildQueryStatiticsModel(QueryStatisticsRecorder recorder) {
1:2fc0ad3:     QueryStatisticsModel queryStatisticsModel = new QueryStatisticsModel();
1:2fc0ad3:     queryStatisticsModel.setRecorder(recorder);
1:2fc0ad3:     QueryStatistic queryStatisticTotalBlocklet = new QueryStatistic();
1:2fc0ad3:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:2fc0ad3:         .put(QueryStatisticsConstants.TOTAL_BLOCKLET_NUM, queryStatisticTotalBlocklet);
1:2fc0ad3:     queryStatisticsModel.getRecorder().recordStatistics(queryStatisticTotalBlocklet);
1:2fc0ad3: 
1:2fc0ad3:     QueryStatistic queryStatisticValidScanBlocklet = new QueryStatistic();
1:2fc0ad3:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:2fc0ad3:         .put(QueryStatisticsConstants.VALID_SCAN_BLOCKLET_NUM, queryStatisticValidScanBlocklet);
1:2fc0ad3:     queryStatisticsModel.getRecorder().recordStatistics(queryStatisticValidScanBlocklet);
1:2fc0ad3: 
1:2fc0ad3:     QueryStatistic totalNumberOfPages = new QueryStatistic();
1:2fc0ad3:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:2fc0ad3:         .put(QueryStatisticsConstants.TOTAL_PAGE_SCANNED, totalNumberOfPages);
1:2fc0ad3:     queryStatisticsModel.getRecorder().recordStatistics(totalNumberOfPages);
1:2fc0ad3: 
1:2fc0ad3:     QueryStatistic validPages = new QueryStatistic();
1:2fc0ad3:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:2fc0ad3:         .put(QueryStatisticsConstants.VALID_PAGE_SCANNED, validPages);
1:2fc0ad3:     queryStatisticsModel.getRecorder().recordStatistics(validPages);
1:2fc0ad3: 
1:2fc0ad3:     QueryStatistic scannedPages = new QueryStatistic();
1:2fc0ad3:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:2fc0ad3:         .put(QueryStatisticsConstants.PAGE_SCANNED, scannedPages);
1:2fc0ad3:     queryStatisticsModel.getRecorder().recordStatistics(scannedPages);
1:2fc0ad3: 
1:2fc0ad3:     QueryStatistic scanTime = new QueryStatistic();
1:2fc0ad3:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:2fc0ad3:         .put(QueryStatisticsConstants.SCAN_BLOCKlET_TIME, scanTime);
1:2fc0ad3:     queryStatisticsModel.getRecorder().recordStatistics(scanTime);
1:2fc0ad3: 
1:2fc0ad3:     QueryStatistic readTime = new QueryStatistic();
1:2fc0ad3:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:2fc0ad3:         .put(QueryStatisticsConstants.READ_BLOCKlET_TIME, readTime);
1:2fc0ad3:     queryStatisticsModel.getRecorder().recordStatistics(readTime);
1:26607fb: 
1:26607fb:     // dimension filling time
1:26607fb:     QueryStatistic keyColumnFilingTime = new QueryStatistic();
1:26607fb:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:26607fb:         .put(QueryStatisticsConstants.KEY_COLUMN_FILLING_TIME, keyColumnFilingTime);
1:26607fb:     queryStatisticsModel.getRecorder().recordStatistics(keyColumnFilingTime);
1:26607fb:     // measure filling time
1:26607fb:     QueryStatistic measureFilingTime = new QueryStatistic();
1:26607fb:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:26607fb:         .put(QueryStatisticsConstants.MEASURE_FILLING_TIME, measureFilingTime);
1:26607fb:     queryStatisticsModel.getRecorder().recordStatistics(measureFilingTime);
1:26607fb:     // page Io Time
1:26607fb:     QueryStatistic pageUncompressTime = new QueryStatistic();
1:26607fb:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:26607fb:         .put(QueryStatisticsConstants.PAGE_UNCOMPRESS_TIME, pageUncompressTime);
1:26607fb:     queryStatisticsModel.getRecorder().recordStatistics(pageUncompressTime);
1:26607fb:     // result preparation time
1:26607fb:     QueryStatistic resultPreparationTime = new QueryStatistic();
1:26607fb:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:26607fb:         .put(QueryStatisticsConstants.RESULT_PREP_TIME, resultPreparationTime);
1:26607fb:     queryStatisticsModel.getRecorder().recordStatistics(resultPreparationTime);
1:2fc0ad3:     return queryStatisticsModel;
1:2fc0ad3:   }
1:2fc0ad3: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:26607fb
/////////////////////////////////////////////////////////////////////////
1: 
1:     // dimension filling time
1:     QueryStatistic keyColumnFilingTime = new QueryStatistic();
1:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:         .put(QueryStatisticsConstants.KEY_COLUMN_FILLING_TIME, keyColumnFilingTime);
1:     queryStatisticsModel.getRecorder().recordStatistics(keyColumnFilingTime);
1:     // measure filling time
1:     QueryStatistic measureFilingTime = new QueryStatistic();
1:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:         .put(QueryStatisticsConstants.MEASURE_FILLING_TIME, measureFilingTime);
1:     queryStatisticsModel.getRecorder().recordStatistics(measureFilingTime);
1:     // page Io Time
1:     QueryStatistic pageUncompressTime = new QueryStatistic();
1:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:         .put(QueryStatisticsConstants.PAGE_UNCOMPRESS_TIME, pageUncompressTime);
1:     queryStatisticsModel.getRecorder().recordStatistics(pageUncompressTime);
1:     // result preparation time
1:     QueryStatistic resultPreparationTime = new QueryStatistic();
1:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:         .put(QueryStatisticsConstants.RESULT_PREP_TIME, resultPreparationTime);
1:     queryStatisticsModel.getRecorder().recordStatistics(resultPreparationTime);
author:Manhua
-------------------------------------------------------------------------------
commit:2fc0ad3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.result.iterator;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Future;
1: 
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1: import org.apache.carbondata.core.scan.model.QueryModel;
1: import org.apache.carbondata.core.scan.processor.BlockScan;
1: import org.apache.carbondata.core.stats.QueryStatistic;
1: import org.apache.carbondata.core.stats.QueryStatisticsConstants;
1: import org.apache.carbondata.core.stats.QueryStatisticsModel;
1: import org.apache.carbondata.core.stats.QueryStatisticsRecorder;
1: 
1: public abstract class AbstractSearchModeResultIterator
1:         extends AbstractDetailQueryResultIterator<Object> {
1: 
1:   private FileFactory.FileType fileType;
1:   private List<Future<BlockScan>> taskSubmitList;
1:   protected BlockScan curBlockScan;
1:   private int nextBlockScanIndex = 0;
1: 
1:   public AbstractSearchModeResultIterator(List<BlockExecutionInfo> infos, QueryModel queryModel,
1:                                           ExecutorService execService) {
1:     super(infos, queryModel, execService);
1:     this.fileType = FileFactory.getFileType(queryModel.getAbsoluteTableIdentifier().getTablePath());
1:     scanAll();
1:   }
1: 
1:   private void scanAll() {
1:     taskSubmitList = new ArrayList<>(blockExecutionInfos.size());
1:     for (final BlockExecutionInfo info: blockExecutionInfos) {
1:       taskSubmitList.add(execService.submit(new Callable<BlockScan>() {
1: 
1:         @Override
1:         public BlockScan call() throws Exception {
1:           BlockScan blockScan = new BlockScan(info, FileFactory.getFileHolder(fileType),
1:               buildQueryStatiticsModel(recorder));
1:           blockScan.scan();
1:           return blockScan;
1:         }
1:       }));
1:     }
1:   }
1: 
1:   @Override
1:   public boolean hasNext() {
1:     try {
1:       while ((curBlockScan == null || !curBlockScan.hasNext()) &&
1:               nextBlockScanIndex < taskSubmitList.size()) {
1:         curBlockScan = taskSubmitList.get(nextBlockScanIndex++).get();
1:       }
1:       return curBlockScan != null && curBlockScan.hasNext();
1:     } catch (InterruptedException | ExecutionException e) {
1:       throw new RuntimeException(e);
1:     }
1:   }
1: 
1:   private QueryStatisticsModel buildQueryStatiticsModel(QueryStatisticsRecorder recorder) {
1:     QueryStatisticsModel queryStatisticsModel = new QueryStatisticsModel();
1:     queryStatisticsModel.setRecorder(recorder);
1:     QueryStatistic queryStatisticTotalBlocklet = new QueryStatistic();
1:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:         .put(QueryStatisticsConstants.TOTAL_BLOCKLET_NUM, queryStatisticTotalBlocklet);
1:     queryStatisticsModel.getRecorder().recordStatistics(queryStatisticTotalBlocklet);
1: 
1:     QueryStatistic queryStatisticValidScanBlocklet = new QueryStatistic();
1:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:         .put(QueryStatisticsConstants.VALID_SCAN_BLOCKLET_NUM, queryStatisticValidScanBlocklet);
1:     queryStatisticsModel.getRecorder().recordStatistics(queryStatisticValidScanBlocklet);
1: 
1:     QueryStatistic totalNumberOfPages = new QueryStatistic();
1:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:         .put(QueryStatisticsConstants.TOTAL_PAGE_SCANNED, totalNumberOfPages);
1:     queryStatisticsModel.getRecorder().recordStatistics(totalNumberOfPages);
1: 
1:     QueryStatistic validPages = new QueryStatistic();
1:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:         .put(QueryStatisticsConstants.VALID_PAGE_SCANNED, validPages);
1:     queryStatisticsModel.getRecorder().recordStatistics(validPages);
1: 
1:     QueryStatistic scannedPages = new QueryStatistic();
1:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:         .put(QueryStatisticsConstants.PAGE_SCANNED, scannedPages);
1:     queryStatisticsModel.getRecorder().recordStatistics(scannedPages);
1: 
1:     QueryStatistic scanTime = new QueryStatistic();
1:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:         .put(QueryStatisticsConstants.SCAN_BLOCKlET_TIME, scanTime);
1:     queryStatisticsModel.getRecorder().recordStatistics(scanTime);
1: 
1:     QueryStatistic readTime = new QueryStatistic();
1:     queryStatisticsModel.getStatisticsTypeAndObjMap()
1:         .put(QueryStatisticsConstants.READ_BLOCKlET_TIME, readTime);
1:     queryStatisticsModel.getRecorder().recordStatistics(readTime);
1:     return queryStatisticsModel;
1:   }
1: }
============================================================================