1:c2e4eb2: /*
1:c2e4eb2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c2e4eb2:  * contributor license agreements.  See the NOTICE file distributed with
1:c2e4eb2:  * this work for additional information regarding copyright ownership.
1:c2e4eb2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c2e4eb2:  * (the "License"); you may not use this file except in compliance with
1:c2e4eb2:  * the License.  You may obtain a copy of the License at
1:c2e4eb2:  *
1:c2e4eb2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:c2e4eb2:  *
1:c2e4eb2:  * Unless required by applicable law or agreed to in writing, software
1:c2e4eb2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c2e4eb2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c2e4eb2:  * See the License for the specific language governing permissions and
1:c2e4eb2:  * limitations under the License.
1:c2e4eb2:  */
1:c2e4eb2: 
1:c2e4eb2: package org.apache.carbondata.core.scan.expression.logical;
1:c2e4eb2: 
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.Expression;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.ExpressionResult;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.LiteralExpression;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.conditional.BinaryConditionalExpression;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1:c2e4eb2: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1:c2e4eb2: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1:c2e4eb2: 
1:c2e4eb2: /**
1:c2e4eb2:  * This class will form an expression whose evaluation will be always true.
1:c2e4eb2:  */
1:c2e4eb2: public class TrueExpression extends BinaryConditionalExpression {
1:c2e4eb2: 
1:c2e4eb2: 
1:c2e4eb2:   private static final long serialVersionUID = -8390184061336799370L;
1:c2e4eb2: 
1:c2e4eb2:   public TrueExpression(Expression child1) {
1:c2e4eb2:     super(child1, new LiteralExpression(null,null));
1:c2e4eb2:   }
1:c2e4eb2: 
1:c2e4eb2:   /**
1:c2e4eb2:    * This method will always return false, mainly used in the filter expressions
1:c2e4eb2:    * which are illogical.
1:c2e4eb2:    * eg: columnName NOT IN('Java',NULL)
1:c2e4eb2:    * @param value
1:c2e4eb2:    * @return
1:c2e4eb2:    * @throws FilterUnsupportedException
1:c2e4eb2:    * @throws FilterIllegalMemberException
1:c2e4eb2:    */
1:d5bec4d:   @Override
1:d5bec4d:   public ExpressionResult evaluate(RowIntf value)
1:c2e4eb2:       throws FilterUnsupportedException, FilterIllegalMemberException {
1:956833e:     return new ExpressionResult(DataTypes.BOOLEAN,true);
1:c2e4eb2:   }
1:c2e4eb2: 
1:c2e4eb2:   /**
1:c2e4eb2:    * This method will return the expression types
1:c2e4eb2:    * @return
1:c2e4eb2:    */
2:d5bec4d:   @Override
1:d5bec4d:   public ExpressionType getFilterExpressionType() {
1:c2e4eb2:     return ExpressionType.TRUE;
1:c2e4eb2:   }
1:f911403:   @Override public String getString() {
1:f911403:     return "True(" + (null == left ? null : left.getString());
1:c2e4eb2:   }
1:d5bec4d: 
1:d5bec4d:   @Override
1:d5bec4d:   public String getStatement() {
1:d5bec4d:     return "true";
1:d5bec4d:   }
1:c2e4eb2: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:   @Override public String getString() {
1:     return "True(" + (null == left ? null : left.getString());
author:QiangCai
-------------------------------------------------------------------------------
commit:d5bec4d
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public ExpressionResult evaluate(RowIntf value)
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public ExpressionType getFilterExpressionType() {
1:   @Override
0:   public String getString() {
1: 
1:   @Override
1:   public String getStatement() {
1:     return "true";
1:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     return new ExpressionResult(DataTypes.BOOLEAN,true);
author:sounakr
-------------------------------------------------------------------------------
commit:c2e4eb2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.expression.logical;
1: 
0: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.scan.expression.Expression;
1: import org.apache.carbondata.core.scan.expression.ExpressionResult;
1: import org.apache.carbondata.core.scan.expression.LiteralExpression;
1: import org.apache.carbondata.core.scan.expression.conditional.BinaryConditionalExpression;
1: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1: 
1: /**
1:  * This class will form an expression whose evaluation will be always true.
1:  */
1: public class TrueExpression extends BinaryConditionalExpression {
1: 
1: 
1:   private static final long serialVersionUID = -8390184061336799370L;
1: 
1:   public TrueExpression(Expression child1) {
1:     super(child1, new LiteralExpression(null,null));
1:   }
1: 
1:   /**
1:    * This method will always return false, mainly used in the filter expressions
1:    * which are illogical.
1:    * eg: columnName NOT IN('Java',NULL)
1:    * @param value
1:    * @return
1:    * @throws FilterUnsupportedException
1:    * @throws FilterIllegalMemberException
1:    */
0:   @Override public ExpressionResult evaluate(RowIntf value)
1:       throws FilterUnsupportedException, FilterIllegalMemberException {
0:     return new ExpressionResult(DataType.BOOLEAN,true);
1:   }
1: 
1:   /**
1:    * This method will return the expression types
1:    * @return
1:    */
0:   @Override public ExpressionType getFilterExpressionType() {
1:     return ExpressionType.TRUE;
1:   }
0:   @Override public String getString() {
0:     return null;
1:   }
1: }
============================================================================