1:5f68a79: /*
1:5f68a79:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5f68a79:  * contributor license agreements.  See the NOTICE file distributed with
1:5f68a79:  * this work for additional information regarding copyright ownership.
1:5f68a79:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5f68a79:  * (the "License"); you may not use this file except in compliance with
1:5f68a79:  * the License.  You may obtain a copy of the License at
1:5f68a79:  *
1:5f68a79:  *    http://www.apache.org/licenses/LICENSE-2.0
1:5f68a79:  *
1:5f68a79:  * Unless required by applicable law or agreed to in writing, software
1:5f68a79:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5f68a79:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5f68a79:  * See the License for the specific language governing permissions and
1:5f68a79:  * limitations under the License.
1:5f68a79:  */
1:5f68a79: 
1:5f68a79: package org.apache.carbondata.core.indexstore;
1:5f68a79: 
1:5f68a79: import java.io.Serializable;
1:5f68a79: 
1:8f1a029: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:5f68a79: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:5f68a79: 
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:8f1a029: 
1:5f68a79: /**
1:5f68a79:  * Class holds reference to TableBlockIndexUniqueIdentifier and carbonTable related info
1:5f68a79:  * This is just a wrapper passed between methods like a context, This object must never be cached.
1:5f68a79:  *
1:5f68a79:  */
1:5f68a79: public class TableBlockIndexUniqueIdentifierWrapper implements Serializable {
1:5f68a79: 
1:5f68a79:   private static final long serialVersionUID = 1L;
1:5f68a79: 
1:5f68a79:   // holds the reference to tableBlockIndexUniqueIdentifier
1:5f68a79:   private TableBlockIndexUniqueIdentifier tableBlockIndexUniqueIdentifier;
1:5f68a79: 
1:5f68a79:   // holds the reference to CarbonTable
1:5f68a79:   private CarbonTable carbonTable;
1:8f1a029: 
1:8f1a029:   private transient Configuration configuration;
1:bd02656:   /**
1:bd02656:    * flag to specify whether to load table block metadata in unsafe or safe. Default value is true
1:bd02656:    */
1:bd02656:   private boolean addTableBlockToUnsafe = true;
1:5f68a79: 
1:5f68a79:   public TableBlockIndexUniqueIdentifierWrapper(
1:5f68a79:       TableBlockIndexUniqueIdentifier tableBlockIndexUniqueIdentifier, CarbonTable carbonTable) {
1:5f68a79:     this.tableBlockIndexUniqueIdentifier = tableBlockIndexUniqueIdentifier;
1:5f68a79:     this.carbonTable = carbonTable;
1:8f1a029:     this.configuration = FileFactory.getConfiguration();
1:8f1a029:   }
1:8f1a029: 
1:8f1a029:   public TableBlockIndexUniqueIdentifierWrapper(
1:8f1a029:       TableBlockIndexUniqueIdentifier tableBlockIndexUniqueIdentifier, CarbonTable carbonTable,
1:8f1a029:       Configuration configuration) {
1:8f1a029:     this.tableBlockIndexUniqueIdentifier = tableBlockIndexUniqueIdentifier;
1:8f1a029:     this.carbonTable = carbonTable;
1:8f1a029:     this.configuration = configuration;
1:5f68a79:   }
1:5f68a79: 
1:bd02656:   // Note: The constructor is getting used in extensions with other functionalities.
1:bd02656:   // Kindly do not remove
1:bd02656:   public TableBlockIndexUniqueIdentifierWrapper(
1:bd02656:       TableBlockIndexUniqueIdentifier tableBlockIndexUniqueIdentifier, CarbonTable carbonTable,
1:bd02656:       boolean addTableBlockToUnsafe) {
1:bd02656:     this(tableBlockIndexUniqueIdentifier, carbonTable);
1:bd02656:     this.addTableBlockToUnsafe = addTableBlockToUnsafe;
1:8f1a029:     this.configuration = FileFactory.getConfiguration();
1:bd02656:   }
1:bd02656: 
1:bd02656: 
1:5f68a79:   public TableBlockIndexUniqueIdentifier getTableBlockIndexUniqueIdentifier() {
1:5f68a79:     return tableBlockIndexUniqueIdentifier;
1:5f68a79:   }
1:5f68a79: 
1:5f68a79:   public CarbonTable getCarbonTable() {
1:5f68a79:     return carbonTable;
1:5f68a79:   }
1:bd02656: 
1:bd02656:   public boolean isAddTableBlockToUnsafe() {
1:bd02656:     return addTableBlockToUnsafe;
1:bd02656:   }
1:8f1a029: 
1:8f1a029:   public Configuration getConfiguration() {
1:8f1a029:     return configuration;
1:8f1a029:   }
1:5f68a79: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.hadoop.conf.Configuration;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   private transient Configuration configuration;
/////////////////////////////////////////////////////////////////////////
1:     this.configuration = FileFactory.getConfiguration();
1:   }
1: 
1:   public TableBlockIndexUniqueIdentifierWrapper(
1:       TableBlockIndexUniqueIdentifier tableBlockIndexUniqueIdentifier, CarbonTable carbonTable,
1:       Configuration configuration) {
1:     this.tableBlockIndexUniqueIdentifier = tableBlockIndexUniqueIdentifier;
1:     this.carbonTable = carbonTable;
1:     this.configuration = configuration;
/////////////////////////////////////////////////////////////////////////
1:     this.configuration = FileFactory.getConfiguration();
/////////////////////////////////////////////////////////////////////////
1: 
1:   public Configuration getConfiguration() {
1:     return configuration;
1:   }
author:manishgupta88
-------------------------------------------------------------------------------
commit:bd02656
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * flag to specify whether to load table block metadata in unsafe or safe. Default value is true
1:    */
1:   private boolean addTableBlockToUnsafe = true;
/////////////////////////////////////////////////////////////////////////
1:   // Note: The constructor is getting used in extensions with other functionalities.
1:   // Kindly do not remove
1:   public TableBlockIndexUniqueIdentifierWrapper(
1:       TableBlockIndexUniqueIdentifier tableBlockIndexUniqueIdentifier, CarbonTable carbonTable,
1:       boolean addTableBlockToUnsafe) {
1:     this(tableBlockIndexUniqueIdentifier, carbonTable);
1:     this.addTableBlockToUnsafe = addTableBlockToUnsafe;
1:   }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public boolean isAddTableBlockToUnsafe() {
1:     return addTableBlockToUnsafe;
1:   }
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:5f68a79
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.indexstore;
1: 
1: import java.io.Serializable;
1: 
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: 
1: /**
1:  * Class holds reference to TableBlockIndexUniqueIdentifier and carbonTable related info
1:  * This is just a wrapper passed between methods like a context, This object must never be cached.
1:  *
1:  */
1: public class TableBlockIndexUniqueIdentifierWrapper implements Serializable {
1: 
1:   private static final long serialVersionUID = 1L;
1: 
1:   // holds the reference to tableBlockIndexUniqueIdentifier
1:   private TableBlockIndexUniqueIdentifier tableBlockIndexUniqueIdentifier;
1: 
1:   // holds the reference to CarbonTable
1:   private CarbonTable carbonTable;
1: 
1:   public TableBlockIndexUniqueIdentifierWrapper(
1:       TableBlockIndexUniqueIdentifier tableBlockIndexUniqueIdentifier, CarbonTable carbonTable) {
1:     this.tableBlockIndexUniqueIdentifier = tableBlockIndexUniqueIdentifier;
1:     this.carbonTable = carbonTable;
1:   }
1: 
1:   public TableBlockIndexUniqueIdentifier getTableBlockIndexUniqueIdentifier() {
1:     return tableBlockIndexUniqueIdentifier;
1:   }
1: 
1:   public CarbonTable getCarbonTable() {
1:     return carbonTable;
1:   }
1: }
============================================================================