1:70256e7: /*
1:70256e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:70256e7:  * contributor license agreements.  See the NOTICE file distributed with
1:70256e7:  * this work for additional information regarding copyright ownership.
1:70256e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:70256e7:  * (the "License"); you may not use this file except in compliance with
1:70256e7:  * the License.  You may obtain a copy of the License at
1:70256e7:  *
1:70256e7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:70256e7:  *
1:70256e7:  * Unless required by applicable law or agreed to in writing, software
1:70256e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:70256e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:70256e7:  * See the License for the specific language governing permissions and
1:70256e7:  * limitations under the License.
1:70256e7:  */
1:70256e7: package org.apache.carbondata.core.scan.collector;
1:70256e7: 
1:70256e7: import org.apache.carbondata.common.logging.LogService;
1:70256e7: import org.apache.carbondata.common.logging.LogServiceFactory;
1:81038f5: import org.apache.carbondata.core.scan.collector.impl.*;
1:70256e7: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1:70256e7: 
1:70256e7: /**
1:70256e7:  * This class will provide the result collector instance based on the required type
1:70256e7:  */
1:70256e7: public class ResultCollectorFactory {
1:70256e7: 
1:70256e7:   /**
1:70256e7:    * logger of result collector factory
1:70256e7:    */
1:70256e7:   private static final LogService LOGGER =
1:70256e7:       LogServiceFactory.getLogService(ResultCollectorFactory.class.getName());
1:70256e7: 
1:70256e7:   /**
1:70256e7:    * This method will create result collector based on the given type
1:70256e7:    *
1:70256e7:    * @param blockExecutionInfo
1:70256e7:    * @return
1:70256e7:    */
1:70256e7:   public static AbstractScannedResultCollector getScannedResultCollector(
1:70256e7:       BlockExecutionInfo blockExecutionInfo) {
1:70256e7:     AbstractScannedResultCollector scannerResultAggregator = null;
1:70256e7:     if (blockExecutionInfo.isRawRecordDetailQuery()) {
1:70256e7:       if (blockExecutionInfo.isRestructuredBlock()) {
1:81038f5:         if (blockExecutionInfo.isRequiredRowId()) {
1:81038f5:           LOGGER.info("RowId Restructure based raw ollector is used to scan and collect the data");
1:81038f5:           scannerResultAggregator = new RowIdRestructureBasedRawResultCollector(blockExecutionInfo);
1:81038f5:         } else {
1:81038f5:           LOGGER.info("Restructure based raw collector is used to scan and collect the data");
1:81038f5:           scannerResultAggregator = new RestructureBasedRawResultCollector(blockExecutionInfo);
1:81038f5:         }
1:70256e7:       } else {
1:81038f5:         if (blockExecutionInfo.isRequiredRowId()) {
1:81038f5:           LOGGER.info("RowId based raw collector is used to scan and collect the data");
1:81038f5:           scannerResultAggregator = new RowIdRawBasedResultCollector(blockExecutionInfo);
1:81038f5:         } else {
1:81038f5:           LOGGER.info("Row based raw collector is used to scan and collect the data");
1:81038f5:           scannerResultAggregator = new RawBasedResultCollector(blockExecutionInfo);
1:81038f5:         }
1:70256e7:       }
1:70256e7:     } else if (blockExecutionInfo.isVectorBatchCollector()) {
1:70256e7:       if (blockExecutionInfo.isRestructuredBlock()) {
1:70256e7:         LOGGER.info("Restructure dictionary vector collector is used to scan and collect the data");
1:70256e7:         scannerResultAggregator = new RestructureBasedVectorResultCollector(blockExecutionInfo);
1:70256e7:       } else {
1:70256e7:         LOGGER.info("Vector based dictionary collector is used to scan and collect the data");
1:70256e7:         scannerResultAggregator = new DictionaryBasedVectorResultCollector(blockExecutionInfo);
1:70256e7:       }
1:70256e7:     } else {
1:70256e7:       if (blockExecutionInfo.isRestructuredBlock()) {
1:70256e7:         LOGGER.info("Restructure based dictionary collector is used to scan and collect the data");
1:70256e7:         scannerResultAggregator = new RestructureBasedDictionaryResultCollector(blockExecutionInfo);
1:5c483f3:       } else if (blockExecutionInfo.isRequiredRowId()) {
1:21c5fb1:         LOGGER.info("RowId based dictionary collector is used to scan and collect the data");
1:21c5fb1:         scannerResultAggregator = new RowIdBasedResultCollector(blockExecutionInfo);
1:70256e7:       } else {
1:70256e7:         LOGGER.info("Row based dictionary collector is used to scan and collect the data");
1:70256e7:         scannerResultAggregator = new DictionaryBasedResultCollector(blockExecutionInfo);
1:70256e7:       }
1:70256e7:     }
1:70256e7:     return scannerResultAggregator;
1:70256e7:   }
1:f911403: 
1:f911403:   private ResultCollectorFactory() {
1:f911403:   }
1:70256e7: }
============================================================================
author:Manhua
-------------------------------------------------------------------------------
commit:81038f5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.collector.impl.*;
/////////////////////////////////////////////////////////////////////////
1:         if (blockExecutionInfo.isRequiredRowId()) {
1:           LOGGER.info("RowId Restructure based raw ollector is used to scan and collect the data");
1:           scannerResultAggregator = new RowIdRestructureBasedRawResultCollector(blockExecutionInfo);
1:         } else {
1:           LOGGER.info("Restructure based raw collector is used to scan and collect the data");
1:           scannerResultAggregator = new RestructureBasedRawResultCollector(blockExecutionInfo);
1:         }
1:         if (blockExecutionInfo.isRequiredRowId()) {
1:           LOGGER.info("RowId based raw collector is used to scan and collect the data");
1:           scannerResultAggregator = new RowIdRawBasedResultCollector(blockExecutionInfo);
1:         } else {
1:           LOGGER.info("Row based raw collector is used to scan and collect the data");
1:           scannerResultAggregator = new RawBasedResultCollector(blockExecutionInfo);
1:         }
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1: 
1:   private ResultCollectorFactory() {
1:   }
author:xuchuanyin
-------------------------------------------------------------------------------
commit:5c483f3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.scan.collector.impl.RowIdRawBasedResultCollector;
/////////////////////////////////////////////////////////////////////////
1:       } else if (blockExecutionInfo.isRequiredRowId()) {
0:         LOGGER.info("RowId based raw collector is used to scan and collect the data");
0:         scannerResultAggregator = new RowIdRawBasedResultCollector(blockExecutionInfo);
author:QiangCai
-------------------------------------------------------------------------------
commit:21c5fb1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.scan.collector.impl.RowIdBasedResultCollector;
/////////////////////////////////////////////////////////////////////////
0:       } else if (blockExecutionInfo.isRequiredRowId()) {
1:         LOGGER.info("RowId based dictionary collector is used to scan and collect the data");
1:         scannerResultAggregator = new RowIdBasedResultCollector(blockExecutionInfo);
author:manishgupta88
-------------------------------------------------------------------------------
commit:70256e7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.collector;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.scan.collector.impl.AbstractScannedResultCollector;
0: import org.apache.carbondata.core.scan.collector.impl.DictionaryBasedResultCollector;
0: import org.apache.carbondata.core.scan.collector.impl.DictionaryBasedVectorResultCollector;
0: import org.apache.carbondata.core.scan.collector.impl.RawBasedResultCollector;
0: import org.apache.carbondata.core.scan.collector.impl.RestructureBasedDictionaryResultCollector;
0: import org.apache.carbondata.core.scan.collector.impl.RestructureBasedRawResultCollector;
0: import org.apache.carbondata.core.scan.collector.impl.RestructureBasedVectorResultCollector;
1: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1: 
1: /**
1:  * This class will provide the result collector instance based on the required type
1:  */
1: public class ResultCollectorFactory {
1: 
1:   /**
1:    * logger of result collector factory
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(ResultCollectorFactory.class.getName());
1: 
1:   /**
1:    * This method will create result collector based on the given type
1:    *
1:    * @param blockExecutionInfo
1:    * @return
1:    */
1:   public static AbstractScannedResultCollector getScannedResultCollector(
1:       BlockExecutionInfo blockExecutionInfo) {
1:     AbstractScannedResultCollector scannerResultAggregator = null;
1:     if (blockExecutionInfo.isRawRecordDetailQuery()) {
1:       if (blockExecutionInfo.isRestructuredBlock()) {
0:         LOGGER.info("Restructure based raw collector is used to scan and collect the data");
0:         scannerResultAggregator = new RestructureBasedRawResultCollector(blockExecutionInfo);
1:       } else {
0:         LOGGER.info("Row based raw collector is used to scan and collect the data");
0:         scannerResultAggregator = new RawBasedResultCollector(blockExecutionInfo);
1:       }
1:     } else if (blockExecutionInfo.isVectorBatchCollector()) {
1:       if (blockExecutionInfo.isRestructuredBlock()) {
1:         LOGGER.info("Restructure dictionary vector collector is used to scan and collect the data");
1:         scannerResultAggregator = new RestructureBasedVectorResultCollector(blockExecutionInfo);
1:       } else {
1:         LOGGER.info("Vector based dictionary collector is used to scan and collect the data");
1:         scannerResultAggregator = new DictionaryBasedVectorResultCollector(blockExecutionInfo);
1:       }
1:     } else {
1:       if (blockExecutionInfo.isRestructuredBlock()) {
1:         LOGGER.info("Restructure based dictionary collector is used to scan and collect the data");
1:         scannerResultAggregator = new RestructureBasedDictionaryResultCollector(blockExecutionInfo);
1:       } else {
1:         LOGGER.info("Row based dictionary collector is used to scan and collect the data");
1:         scannerResultAggregator = new DictionaryBasedResultCollector(blockExecutionInfo);
1:       }
1:     }
1:     return scannerResultAggregator;
1:   }
1: }
============================================================================