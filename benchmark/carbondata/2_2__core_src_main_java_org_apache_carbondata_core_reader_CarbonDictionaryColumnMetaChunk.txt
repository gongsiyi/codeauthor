1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.reader;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * A wrapper class for thrift class ColumnDictionaryChunkMeta which will
1:cd6a4ff:  * contain data like min and max surrogate key, start and end offset, chunk count
1:cd6a4ff:  */
1:cd6a4ff: public class CarbonDictionaryColumnMetaChunk {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Minimum value surrogate key for a segment
1:cd6a4ff:    */
1:cd6a4ff:   private int min_surrogate_key;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Max value of surrogate key for a segment
1:cd6a4ff:    */
1:cd6a4ff:   private int max_surrogate_key;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * start offset of dictionary chunk in dictionary file for a segment
1:cd6a4ff:    */
1:cd6a4ff:   private long start_offset;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * end offset of dictionary chunk in dictionary file for a segment
1:cd6a4ff:    */
1:cd6a4ff:   private long end_offset;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * count of dictionary chunks for a segment
1:cd6a4ff:    */
1:cd6a4ff:   private int chunk_count;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * constructor
1:cd6a4ff:    *
1:cd6a4ff:    * @param min_surrogate_key Minimum value surrogate key for a segment
1:cd6a4ff:    * @param max_surrogate_key Maximum value surrogate key for a segment
1:cd6a4ff:    * @param start_offset      start offset of dictionary chunk in dictionary file for a segment
1:cd6a4ff:    * @param end_offset        end offset of dictionary chunk in dictionary file for a segment
1:cd6a4ff:    * @param chunk_count       count of dictionary chunks for a segment
1:cd6a4ff:    */
1:cd6a4ff:   public CarbonDictionaryColumnMetaChunk(int min_surrogate_key, int max_surrogate_key,
1:cd6a4ff:       long start_offset, long end_offset, int chunk_count) {
1:cd6a4ff:     this.min_surrogate_key = min_surrogate_key;
1:cd6a4ff:     this.max_surrogate_key = max_surrogate_key;
1:cd6a4ff:     this.start_offset = start_offset;
1:cd6a4ff:     this.end_offset = end_offset;
1:cd6a4ff:     this.chunk_count = chunk_count;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @return min surrogate key
1:cd6a4ff:    */
1:cd6a4ff:   public int getMin_surrogate_key() {
1:cd6a4ff:     return min_surrogate_key;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @return max surrogate key
1:cd6a4ff:    */
1:cd6a4ff:   public int getMax_surrogate_key() {
1:cd6a4ff:     return max_surrogate_key;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @return start offset
1:cd6a4ff:    */
1:cd6a4ff:   public long getStart_offset() {
1:cd6a4ff:     return start_offset;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @return end offset
1:cd6a4ff:    */
1:cd6a4ff:   public long getEnd_offset() {
1:cd6a4ff:     return end_offset;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @return chunk count
1:cd6a4ff:    */
1:cd6a4ff:   public int getChunk_count() {
1:cd6a4ff:     return chunk_count;
1:cd6a4ff:   }
1:cd6a4ff: }
1:cd6a4ff: 
1:cd6a4ff: 
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.reader;
1: 
1: /**
1:  * A wrapper class for thrift class ColumnDictionaryChunkMeta which will
1:  * contain data like min and max surrogate key, start and end offset, chunk count
1:  */
1: public class CarbonDictionaryColumnMetaChunk {
1: 
1:   /**
1:    * Minimum value surrogate key for a segment
1:    */
1:   private int min_surrogate_key;
1: 
1:   /**
1:    * Max value of surrogate key for a segment
1:    */
1:   private int max_surrogate_key;
1: 
1:   /**
1:    * start offset of dictionary chunk in dictionary file for a segment
1:    */
1:   private long start_offset;
1: 
1:   /**
1:    * end offset of dictionary chunk in dictionary file for a segment
1:    */
1:   private long end_offset;
1: 
1:   /**
1:    * count of dictionary chunks for a segment
1:    */
1:   private int chunk_count;
1: 
1:   /**
1:    * constructor
1:    *
1:    * @param min_surrogate_key Minimum value surrogate key for a segment
1:    * @param max_surrogate_key Maximum value surrogate key for a segment
1:    * @param start_offset      start offset of dictionary chunk in dictionary file for a segment
1:    * @param end_offset        end offset of dictionary chunk in dictionary file for a segment
1:    * @param chunk_count       count of dictionary chunks for a segment
1:    */
1:   public CarbonDictionaryColumnMetaChunk(int min_surrogate_key, int max_surrogate_key,
1:       long start_offset, long end_offset, int chunk_count) {
1:     this.min_surrogate_key = min_surrogate_key;
1:     this.max_surrogate_key = max_surrogate_key;
1:     this.start_offset = start_offset;
1:     this.end_offset = end_offset;
1:     this.chunk_count = chunk_count;
1:   }
1: 
1:   /**
1:    * @return min surrogate key
1:    */
1:   public int getMin_surrogate_key() {
1:     return min_surrogate_key;
1:   }
1: 
1:   /**
1:    * @return max surrogate key
1:    */
1:   public int getMax_surrogate_key() {
1:     return max_surrogate_key;
1:   }
1: 
1:   /**
1:    * @return start offset
1:    */
1:   public long getStart_offset() {
1:     return start_offset;
1:   }
1: 
1:   /**
1:    * @return end offset
1:    */
1:   public long getEnd_offset() {
1:     return end_offset;
1:   }
1: 
1:   /**
1:    * @return chunk count
1:    */
1:   public int getChunk_count() {
1:     return chunk_count;
1:   }
1: }
1: 
1: 
============================================================================