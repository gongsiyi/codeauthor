1:edaaccb: /*
1:edaaccb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:edaaccb:  * contributor license agreements.  See the NOTICE file distributed with
1:edaaccb:  * this work for additional information regarding copyright ownership.
1:edaaccb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:edaaccb:  * (the "License"); you may not use this file except in compliance with
1:edaaccb:  * the License.  You may obtain a copy of the License at
1:edaaccb:  *
1:edaaccb:  *    http://www.apache.org/licenses/LICENSE-2.0
1:edaaccb:  *
1:edaaccb:  * Unless required by applicable law or agreed to in writing, software
1:edaaccb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:edaaccb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:edaaccb:  * See the License for the specific language governing permissions and
1:edaaccb:  * limitations under the License.
1:edaaccb:  */
3:edaaccb: 
1:edaaccb: package org.apache.carbondata.core.dictionary.client;
1:edaaccb: 
1:edaaccb: import java.io.File;
1:edaaccb: import java.util.Arrays;
1:f66b8a1: import java.util.concurrent.LinkedBlockingQueue;
1:f66b8a1: import java.util.concurrent.TimeUnit;
1:edaaccb: 
1:edaaccb: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:edaaccb: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:edaaccb: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessageType;
1:edaaccb: import org.apache.carbondata.core.dictionary.server.DictionaryServer;
1:4daf063: import org.apache.carbondata.core.dictionary.server.NonSecureDictionaryServer;
1:edaaccb: import org.apache.carbondata.core.metadata.CarbonMetadata;
1:df27831: import org.apache.carbondata.core.metadata.datatype.DataType;
1:df27831: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:edaaccb: import org.apache.carbondata.core.metadata.encoder.Encoding;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.TableSchema;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:edaaccb: import org.apache.carbondata.core.util.CarbonProperties;
1:edaaccb: 
1:f66b8a1: import mockit.Mock;
1:f66b8a1: import mockit.MockUp;
1:edaaccb: import org.junit.After;
1:edaaccb: import org.junit.Assert;
1:ee5f65f: import org.junit.BeforeClass;
1:edaaccb: import org.junit.Test;
1:edaaccb: 
1:edaaccb: /**
1:edaaccb:  * Test class to test dictionary client functionality.
1:edaaccb:  */
1:edaaccb: public class DictionaryClientTest {
1:edaaccb: 
1:ee5f65f:   private static ColumnSchema empColumnSchema;
1:ee5f65f:   private static CarbonDimension empDimension;
1:ee5f65f:   private static ColumnSchema ageColumnSchema;
1:ee5f65f:   private static CarbonDimension ageDimension;
1:ee5f65f:   private static TableSchema tableSchema;
1:ee5f65f:   private static TableInfo tableInfo;
1:ee5f65f:   private static String storePath;
1:ee5f65f:   private static DictionaryServer server;
1:4daf063:   private static String host;
1:edaaccb: 
1:ee5f65f:   @BeforeClass public static void setUp() throws Exception {
1:edaaccb:     // enable lru cache by setting cache size
1:edaaccb:     CarbonProperties.getInstance()
1:edaaccb:         .addProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE, "10");
1:edaaccb: 
1:edaaccb:     // Create two column schemas and dimensions for the table
1:edaaccb:     empColumnSchema = new ColumnSchema();
1:edaaccb:     empColumnSchema.setColumnName("empNameCol");
1:edaaccb:     empColumnSchema.setColumnUniqueId("empNameCol");
1:edaaccb:     empColumnSchema.setDimensionColumn(true);
1:df27831:     empColumnSchema.setDataType(DataTypes.STRING);
1:edaaccb:     empColumnSchema.setEncodingList(Arrays.asList(Encoding.DICTIONARY));
1:f911403:     empDimension = new CarbonDimension(empColumnSchema, 0, 0, 0, 0);
1:edaaccb: 
1:edaaccb:     ageColumnSchema = new ColumnSchema();
1:ee5f65f:     ageColumnSchema.setColumnName("ageNameCol");
1:df27831:     ageColumnSchema.setDataType(DataTypes.SHORT_INT);
1:ee5f65f:     ageColumnSchema.setColumnUniqueId("ageNameCol");
1:edaaccb:     ageColumnSchema.setDimensionColumn(true);
1:edaaccb:     ageColumnSchema.setEncodingList(Arrays.asList(Encoding.DICTIONARY));
1:f911403:     ageDimension = new CarbonDimension(ageColumnSchema, 0, 0, 0, 0);
1:edaaccb: 
1:edaaccb:     // Create a Table
1:edaaccb:     tableSchema = new TableSchema();
1:edaaccb:     tableSchema.setTableName("TestTable");
1:ee5f65f:     tableSchema.setTableId("1");
1:edaaccb:     tableSchema.setListOfColumns(Arrays.asList(empColumnSchema, ageColumnSchema));
1:edaaccb:     CarbonMetadata metadata = CarbonMetadata.getInstance();
1:edaaccb: 
1:edaaccb:     tableInfo = new TableInfo();
1:edaaccb:     tableInfo.setFactTable(tableSchema);
1:edaaccb:     tableInfo.setTableUniqueName("TestTable");
1:edaaccb:     tableInfo.setDatabaseName("test");
1:edaaccb:     storePath = System.getProperty("java.io.tmpdir") + "/tmp";
1:1155d4d:     tableInfo.setTablePath(storePath + "/" + "test" + "/" + "TestTable");
1:ac5aee1:     CarbonTable carbonTable = CarbonTable.buildFromTableInfo(tableInfo);
1:edaaccb: 
1:edaaccb:     // Add the created table to metadata
1:edaaccb:     metadata.addCarbonTable(carbonTable);
1:edaaccb: 
1:edaaccb:     // Start the server for testing the client
1:4daf063:     server = NonSecureDictionaryServer.getInstance(5678, carbonTable);
1:4daf063:     host = server.getHost();
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void testClient() throws Exception {
1:4daf063:     NonSecureDictionaryClient client = new NonSecureDictionaryClient();
1:4daf063:     client.startClient(null, host, 5678, false);
1:edaaccb: 
1:edaaccb:     Thread.sleep(1000);
1:edaaccb:     // Create a dictionary key
1:edaaccb:     DictionaryMessage empKey = new DictionaryMessage();
1:edaaccb:     empKey.setColumnName(empColumnSchema.getColumnName());
1:edaaccb:     empKey.setData("FirstKey");
1:edaaccb: 
1:edaaccb:     // Test dictionary initialization call
1:6a9c79c:     int count = 2;
1:edaaccb:     // Test dictionary generation
1:6a9c79c:     for (; count <= 10000; count++) {
1:edaaccb:       empKey.setType(DictionaryMessageType.DICT_GENERATION);
1:ee5f65f:       empKey.setTableUniqueId("1");
1:edaaccb:       empKey.setData("FirstKey" + count);
1:edaaccb:       DictionaryMessage val = client.getDictionary(empKey);
1:edaaccb:       Assert.assertEquals(count, val.getDictionaryValue());
1:edaaccb:     }
1:6a9c79c: 
1:6a9c79c:     // Test dictionary generation with big messages
1:6a9c79c:     for (; count <= 10010; count++) {
1:6a9c79c:       empKey.setType(DictionaryMessageType.DICT_GENERATION);
1:6a9c79c:       empKey.setData(
1:6a9c79c:           "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:6a9c79c:               + count);
1:6a9c79c:       DictionaryMessage val = client.getDictionary(empKey);
1:6a9c79c:       Assert.assertEquals(count, val.getDictionaryValue());
1:6a9c79c:     }
1:edaaccb:     // Test size function
1:edaaccb:     empKey.setType(DictionaryMessageType.SIZE);
1:edaaccb:     DictionaryMessage val = client.getDictionary(empKey);
1:6a9c79c:     Assert.assertEquals(10010, val.getDictionaryValue());
1:edaaccb: 
1:edaaccb: 
1:edaaccb:     client.shutDown();
1:edaaccb: 
1:edaaccb:     // Shutdown the server
1:edaaccb:   }
1:edaaccb: 
1:f66b8a1:   @Test public void testToCheckIfCorrectTimeOutExceptionMessageIsThrown() {
1:f66b8a1:     new MockUp<LinkedBlockingQueue<DictionaryMessage>>() {
1:f66b8a1:       @SuppressWarnings("unused")
1:f66b8a1:       @Mock
1:f66b8a1:       DictionaryMessage poll(long timeout, TimeUnit unit) throws InterruptedException {
1:f66b8a1:         return null;
1:f66b8a1:       }
1:f66b8a1:     };
1:f66b8a1:     try {
1:f66b8a1:       testClient();
1:f66b8a1:       Assert.fail();
1:f66b8a1:     } catch (Exception e) {
1:f66b8a1:       Assert.assertFalse(e.getMessage().contains("data"));
1:f66b8a1:     }
1:f66b8a1:   }
1:f66b8a1: 
1:edaaccb:   @After public void tearDown() {
1:edaaccb:     // Cleanup created files
1:edaaccb:     CarbonMetadata.getInstance().removeTable(tableInfo.getTableUniqueName());
1:edaaccb:     cleanUpDirectory(new File(storePath));
1:edaaccb:   }
1:edaaccb: 
1:ee5f65f:   private static void cleanUpDirectory(File path) {
1:edaaccb:     File[] files = path.listFiles();
1:edaaccb:     if (null == files) {
1:edaaccb:       return;
1:edaaccb:     }
1:edaaccb:     for (File file : files) {
1:edaaccb:       if (file.isDirectory()) cleanUpDirectory(file);
1:edaaccb:       else file.delete();
1:edaaccb:     }
1:edaaccb:     path.delete();
1:edaaccb:   }
1:edaaccb: 
1:edaaccb: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:     empDimension = new CarbonDimension(empColumnSchema, 0, 0, 0, 0);
/////////////////////////////////////////////////////////////////////////
1:     ageDimension = new CarbonDimension(ageColumnSchema, 0, 0, 0, 0);
author:kunal642
-------------------------------------------------------------------------------
commit:df27831
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     empColumnSchema.setDataType(DataTypes.STRING);
1:     ageColumnSchema.setDataType(DataTypes.SHORT_INT);
commit:ee5f65f
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1:   private static ColumnSchema empColumnSchema;
1:   private static CarbonDimension empDimension;
1:   private static ColumnSchema ageColumnSchema;
1:   private static CarbonDimension ageDimension;
1:   private static TableSchema tableSchema;
1:   private static TableInfo tableInfo;
1:   private static String storePath;
1:   private static DictionaryServer server;
1:   @BeforeClass public static void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     ageColumnSchema.setColumnName("ageNameCol");
1:     ageColumnSchema.setColumnUniqueId("ageNameCol");
/////////////////////////////////////////////////////////////////////////
1:     tableSchema.setTableId("1");
/////////////////////////////////////////////////////////////////////////
0:     server = DictionaryServer.getInstance(5678, carbonTable);
/////////////////////////////////////////////////////////////////////////
1:       empKey.setTableUniqueId("1");
/////////////////////////////////////////////////////////////////////////
1:   private static void cleanUpDirectory(File path) {
commit:f66b8a1
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1: import mockit.Mock;
1: import mockit.MockUp;
/////////////////////////////////////////////////////////////////////////
1:   @Test public void testToCheckIfCorrectTimeOutExceptionMessageIsThrown() {
1:     new MockUp<LinkedBlockingQueue<DictionaryMessage>>() {
1:       @SuppressWarnings("unused")
1:       @Mock
1:       DictionaryMessage poll(long timeout, TimeUnit unit) throws InterruptedException {
1:         return null;
1:       }
1:     };
1:     try {
1:       testClient();
1:       Assert.fail();
1:     } catch (Exception e) {
1:       Assert.assertFalse(e.getMessage().contains("data"));
1:     }
1:   }
1: 
commit:8815dd5
/////////////////////////////////////////////////////////////////////////
0:     server = DictionaryServer.getInstance(5678);
/////////////////////////////////////////////////////////////////////////
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.dictionary.server.NonSecureDictionaryServer;
/////////////////////////////////////////////////////////////////////////
1:   private static String host;
/////////////////////////////////////////////////////////////////////////
1:     server = NonSecureDictionaryServer.getInstance(5678, carbonTable);
1:     host = server.getHost();
1:     NonSecureDictionaryClient client = new NonSecureDictionaryClient();
1:     client.startClient(null, host, 5678, false);
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1:     tableInfo.setTablePath(storePath + "/" + "test" + "/" + "TestTable");
author:jackylk
-------------------------------------------------------------------------------
commit:ac5aee1
/////////////////////////////////////////////////////////////////////////
1:     CarbonTable carbonTable = CarbonTable.buildFromTableInfo(tableInfo);
author:ravipesala
-------------------------------------------------------------------------------
commit:6a9c79c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     int count = 2;
1:     for (; count <= 10000; count++) {
1: 
1:     // Test dictionary generation with big messages
1:     for (; count <= 10010; count++) {
1:       empKey.setType(DictionaryMessageType.DICT_GENERATION);
1:       empKey.setData(
1:           "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + "FirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKeyFirstKey"
1:               + count);
1:       DictionaryMessage val = client.getDictionary(empKey);
1:       Assert.assertEquals(count, val.getDictionaryValue());
1:     }
1:     Assert.assertEquals(10010, val.getDictionaryValue());
author:Vimal-Das
-------------------------------------------------------------------------------
commit:edaaccb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.dictionary.client;
1: 
1: import java.io.File;
1: import java.util.Arrays;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessageType;
1: import org.apache.carbondata.core.dictionary.server.DictionaryServer;
1: import org.apache.carbondata.core.metadata.CarbonMetadata;
1: import org.apache.carbondata.core.metadata.encoder.Encoding;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
1: import org.apache.carbondata.core.metadata.schema.table.TableSchema;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: import org.junit.After;
1: import org.junit.Assert;
0: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import static org.junit.Assert.assertTrue;
1: 
1: /**
1:  * Test class to test dictionary client functionality.
1:  */
1: public class DictionaryClientTest {
1: 
0:   private ColumnSchema empColumnSchema;
0:   private CarbonDimension empDimension;
0:   private ColumnSchema ageColumnSchema;
0:   private CarbonDimension ageDimension;
0:   private TableSchema tableSchema;
0:   private TableInfo tableInfo;
0:   private String storePath;
0:   private DictionaryServer server;
1: 
0:   @Before public void setUp() throws Exception {
1:     // enable lru cache by setting cache size
1:     CarbonProperties.getInstance()
1:         .addProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE, "10");
1: 
1:     // Create two column schemas and dimensions for the table
1:     empColumnSchema = new ColumnSchema();
1:     empColumnSchema.setColumnName("empNameCol");
1:     empColumnSchema.setColumnUniqueId("empNameCol");
1:     empColumnSchema.setDimensionColumn(true);
1:     empColumnSchema.setEncodingList(Arrays.asList(Encoding.DICTIONARY));
0:     empDimension = new CarbonDimension(empColumnSchema, 0, 0, 0, 0, 0);
1: 
1:     ageColumnSchema = new ColumnSchema();
0:     ageColumnSchema.setColumnName("empNameCol");
0:     ageColumnSchema.setColumnUniqueId("empNameCol");
1:     ageColumnSchema.setDimensionColumn(true);
1:     ageColumnSchema.setEncodingList(Arrays.asList(Encoding.DICTIONARY));
0:     ageDimension = new CarbonDimension(ageColumnSchema, 0, 0, 0, 0, 0);
1: 
1:     // Create a Table
1:     tableSchema = new TableSchema();
1:     tableSchema.setTableName("TestTable");
1:     tableSchema.setListOfColumns(Arrays.asList(empColumnSchema, ageColumnSchema));
1:     CarbonMetadata metadata = CarbonMetadata.getInstance();
1: 
1:     tableInfo = new TableInfo();
1:     tableInfo.setFactTable(tableSchema);
1:     tableInfo.setTableUniqueName("TestTable");
1:     tableInfo.setDatabaseName("test");
1:     storePath = System.getProperty("java.io.tmpdir") + "/tmp";
0:     tableInfo.setStorePath(storePath);
0:     CarbonTable carbonTable = new CarbonTable();
0:     carbonTable.loadCarbonTable(tableInfo);
1: 
1:     // Add the created table to metadata
1:     metadata.addCarbonTable(carbonTable);
1: 
1:     // Start the server for testing the client
0:     server = new DictionaryServer();
0:     server.startServer(5678);
1:   }
1: 
1:   @Test public void testClient() throws Exception {
0:     DictionaryClient client = new DictionaryClient();
0:     client.startClient("localhost", 5678);
1: 
1:     Thread.sleep(1000);
1:     // Create a dictionary key
1:     DictionaryMessage empKey = new DictionaryMessage();
0:     empKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     empKey.setColumnName(empColumnSchema.getColumnName());
1:     empKey.setData("FirstKey");
1: 
1:     // Test dictionary initialization call
0:     empKey.setType(DictionaryMessageType.TABLE_INTIALIZATION);
0:     client.getDictionary(empKey);
1: 
1:     // Test dictionary generation
0:     for (int count = 2; count <= 10000; count++) {
1:       empKey.setType(DictionaryMessageType.DICT_GENERATION);
1:       empKey.setData("FirstKey" + count);
1:       DictionaryMessage val = client.getDictionary(empKey);
1:       Assert.assertEquals(count, val.getDictionaryValue());
1:     }
1:     // Test size function
1:     empKey.setType(DictionaryMessageType.SIZE);
1:     DictionaryMessage val = client.getDictionary(empKey);
0:     Assert.assertEquals(10000, val.getDictionaryValue());
1: 
1: 
1:     client.shutDown();
1: 
1:     // Shutdown the server
0:     server.shutdown();
1:   }
1: 
1:   @After public void tearDown() {
1:     // Cleanup created files
1:     CarbonMetadata.getInstance().removeTable(tableInfo.getTableUniqueName());
1:     cleanUpDirectory(new File(storePath));
1:   }
1: 
0:   private void cleanUpDirectory(File path) {
1:     File[] files = path.listFiles();
1:     if (null == files) {
1:       return;
1:     }
1:     for (File file : files) {
1:       if (file.isDirectory()) cleanUpDirectory(file);
1:       else file.delete();
1:     }
1:     path.delete();
1:   }
1: 
1: }
============================================================================