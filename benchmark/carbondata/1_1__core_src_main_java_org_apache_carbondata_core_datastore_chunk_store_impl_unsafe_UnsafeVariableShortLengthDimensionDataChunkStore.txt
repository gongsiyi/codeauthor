1:dc53dee: /*
1:dc53dee:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dc53dee:  * contributor license agreements.  See the NOTICE file distributed with
1:dc53dee:  * this work for additional information regarding copyright ownership.
1:dc53dee:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dc53dee:  * (the "License"); you may not use this file except in compliance with
1:dc53dee:  * the License.  You may obtain a copy of the License at
1:dc53dee:  *
1:dc53dee:  *    http://www.apache.org/licenses/LICENSE-2.0
1:dc53dee:  *
1:dc53dee:  * Unless required by applicable law or agreed to in writing, software
1:dc53dee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc53dee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc53dee:  * See the License for the specific language governing permissions and
1:dc53dee:  * limitations under the License.
1:dc53dee:  */
1:dc53dee: 
1:dc53dee: package org.apache.carbondata.core.datastore.chunk.store.impl.unsafe;
1:dc53dee: 
1:dc53dee: import java.nio.ByteBuffer;
1:dc53dee: 
1:dc53dee: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:dc53dee: 
1:dc53dee: /**
1:dc53dee:  * Below class is responsible to store variable length dimension data chunk in
1:dc53dee:  * memory Memory occupied can be on heap or offheap using unsafe interface
1:dc53dee:  */
1:dc53dee: public class UnsafeVariableShortLengthDimensionDataChunkStore
1:dc53dee:     extends UnsafeVariableLengthDimensionDataChunkStore {
1:dc53dee:   public UnsafeVariableShortLengthDimensionDataChunkStore(long totalSize, boolean isInvertedIdex,
1:dc53dee:       int numberOfRows) {
1:dc53dee:     super(totalSize, isInvertedIdex, numberOfRows);
1:dc53dee:   }
1:dc53dee: 
1:dc53dee:   @Override
1:dc53dee:   protected int getLengthSize() {
1:dc53dee:     return CarbonCommonConstants.SHORT_SIZE_IN_BYTE;
1:dc53dee:   }
1:dc53dee: 
1:dc53dee:   @Override
1:dc53dee:   protected int getLengthFromBuffer(ByteBuffer byteBuffer) {
1:dc53dee:     return byteBuffer.getShort();
1:dc53dee:   }
1:dc53dee: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.chunk.store.impl.unsafe;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: 
1: /**
1:  * Below class is responsible to store variable length dimension data chunk in
1:  * memory Memory occupied can be on heap or offheap using unsafe interface
1:  */
1: public class UnsafeVariableShortLengthDimensionDataChunkStore
1:     extends UnsafeVariableLengthDimensionDataChunkStore {
1:   public UnsafeVariableShortLengthDimensionDataChunkStore(long totalSize, boolean isInvertedIdex,
1:       int numberOfRows) {
1:     super(totalSize, isInvertedIdex, numberOfRows);
1:   }
1: 
1:   @Override
1:   protected int getLengthSize() {
1:     return CarbonCommonConstants.SHORT_SIZE_IN_BYTE;
1:   }
1: 
1:   @Override
1:   protected int getLengthFromBuffer(ByteBuffer byteBuffer) {
1:     return byteBuffer.getShort();
1:   }
1: }
============================================================================