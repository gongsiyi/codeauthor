1:d5396b1: /*
1:d5396b1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d5396b1:  * contributor license agreements.  See the NOTICE file distributed with
1:d5396b1:  * this work for additional information regarding copyright ownership.
1:d5396b1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d5396b1:  * (the "License"); you may not use this file except in compliance with
1:d5396b1:  * the License.  You may obtain a copy of the License at
1:d5396b1:  *
1:d5396b1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d5396b1:  *
1:d5396b1:  * Unless required by applicable law or agreed to in writing, software
1:d5396b1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d5396b1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d5396b1:  * See the License for the specific language governing permissions and
1:d5396b1:  * limitations under the License.
1:d5396b1:  */
1:d5396b1: 
1:d5396b1: package org.apache.carbondata.processing.loading.partition.impl;
1:d5396b1: 
1:d5396b1: import java.util.Comparator;
1:d5396b1: 
1:d5396b1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:d5396b1: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:d5396b1: import org.apache.carbondata.core.util.ByteUtil.UnsafeComparer;
1:d5396b1: 
1:d5396b1: /**
1:d5396b1:  * comparator for the converted row. The row has not been rearranged as 3-parted yet.
1:d5396b1:  */
1:d5396b1: @InterfaceAudience.Internal
1:d5396b1: public class RawRowComparator implements Comparator<CarbonRow> {
1:d5396b1:   private int[] sortColumnIndices;
1:d5396b1:   private boolean[] isSortColumnNoDict;
1:d5396b1: 
1:d5396b1:   public RawRowComparator(int[] sortColumnIndices, boolean[] isSortColumnNoDict) {
1:d5396b1:     this.sortColumnIndices = sortColumnIndices;
1:d5396b1:     this.isSortColumnNoDict = isSortColumnNoDict;
1:d5396b1:   }
1:d5396b1: 
1:d5396b1:   @Override
1:d5396b1:   public int compare(CarbonRow o1, CarbonRow o2) {
1:d5396b1:     int diff = 0;
1:d5396b1:     int i = 0;
1:d5396b1:     for (int colIdx : sortColumnIndices) {
1:d5396b1:       if (isSortColumnNoDict[i]) {
1:d5396b1:         byte[] colA = (byte[]) o1.getObject(colIdx);
1:d5396b1:         byte[] colB = (byte[]) o2.getObject(colIdx);
1:d5396b1:         diff = UnsafeComparer.INSTANCE.compareTo(colA, colB);
1:d5396b1:         if (diff != 0) {
1:d5396b1:           return diff;
1:d5396b1:         }
1:d5396b1:       } else {
1:d5396b1:         int colA = (int) o1.getObject(colIdx);
1:d5396b1:         int colB = (int) o2.getObject(colIdx);
1:d5396b1:         diff = colA - colB;
1:d5396b1:         if (diff != 0) {
1:d5396b1:           return diff;
1:d5396b1:         }
1:d5396b1:       }
1:d5396b1:       i++;
1:d5396b1:     }
1:d5396b1:     return diff;
1:d5396b1:   }
1:d5396b1: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:d5396b1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.loading.partition.impl;
1: 
1: import java.util.Comparator;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
1: import org.apache.carbondata.core.util.ByteUtil.UnsafeComparer;
1: 
1: /**
1:  * comparator for the converted row. The row has not been rearranged as 3-parted yet.
1:  */
1: @InterfaceAudience.Internal
1: public class RawRowComparator implements Comparator<CarbonRow> {
1:   private int[] sortColumnIndices;
1:   private boolean[] isSortColumnNoDict;
1: 
1:   public RawRowComparator(int[] sortColumnIndices, boolean[] isSortColumnNoDict) {
1:     this.sortColumnIndices = sortColumnIndices;
1:     this.isSortColumnNoDict = isSortColumnNoDict;
1:   }
1: 
1:   @Override
1:   public int compare(CarbonRow o1, CarbonRow o2) {
1:     int diff = 0;
1:     int i = 0;
1:     for (int colIdx : sortColumnIndices) {
1:       if (isSortColumnNoDict[i]) {
1:         byte[] colA = (byte[]) o1.getObject(colIdx);
1:         byte[] colB = (byte[]) o2.getObject(colIdx);
1:         diff = UnsafeComparer.INSTANCE.compareTo(colA, colB);
1:         if (diff != 0) {
1:           return diff;
1:         }
1:       } else {
1:         int colA = (int) o1.getObject(colIdx);
1:         int colB = (int) o2.getObject(colIdx);
1:         diff = colA - colB;
1:         if (diff != 0) {
1:           return diff;
1:         }
1:       }
1:       i++;
1:     }
1:     return diff;
1:   }
1: }
============================================================================