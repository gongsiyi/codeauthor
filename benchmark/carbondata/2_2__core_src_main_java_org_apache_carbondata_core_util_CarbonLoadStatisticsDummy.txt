1:cd6a4ff: /*
1:cd6a4ff:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cd6a4ff:  * contributor license agreements.  See the NOTICE file distributed with
1:cd6a4ff:  * this work for additional information regarding copyright ownership.
1:cd6a4ff:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cd6a4ff:  * (the "License"); you may not use this file except in compliance with
1:cd6a4ff:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:cd6a4ff:  * Unless required by applicable law or agreed to in writing, software
1:cd6a4ff:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cd6a4ff:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cd6a4ff:  * See the License for the specific language governing permissions and
1:cd6a4ff:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.util;
1:cd6a4ff: 
1:cd6a4ff: public class CarbonLoadStatisticsDummy implements LoadStatistics {
1:cd6a4ff:   private CarbonLoadStatisticsDummy() {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private static CarbonLoadStatisticsDummy carbonLoadStatisticsDummyInstance =
1:cd6a4ff:       new CarbonLoadStatisticsDummy();
1:cd6a4ff: 
1:cd6a4ff:   public static CarbonLoadStatisticsDummy getInstance() {
1:cd6a4ff:     return carbonLoadStatisticsDummyInstance;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:e8da880:   public void initPartitionInfo(String PartitionId) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void recordDicShuffleAndWriteTime() {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void recordLoadCsvfilesToDfTime() {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void recordDictionaryValuesTotalTime(String partitionID,
1:cd6a4ff:       Long dictionaryValuesTotalTimeTimePoint) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void recordCsvInputStepTime(String partitionID, Long csvInputStepTimePoint) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void recordLruCacheLoadTime(double lruCacheLoadTime) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void recordGeneratingDictionaryValuesTime(String partitionID,
1:cd6a4ff:       Long generatingDictionaryValuesTimePoint) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void recordSortRowsStepTotalTime(String partitionID, Long sortRowsStepTotalTimePoint) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void recordMdkGenerateTotalTime(String partitionID, Long mdkGenerateTotalTimePoint) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void recordDictionaryValue2MdkAdd2FileTime(String partitionID,
1:cd6a4ff:       Long dictionaryValue2MdkAdd2FileTimePoint) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void recordTotalRecords(long totalRecords) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void recordHostBlockMap(String host, Integer numBlocks) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void recordPartitionBlockMap(String partitionID, Integer numBlocks) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override
1:cd6a4ff:   public void printStatisticsInfo(String partitionID) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:xubo245
-------------------------------------------------------------------------------
commit:e8da880
/////////////////////////////////////////////////////////////////////////
1:   public void initPartitionInfo(String PartitionId) {
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.util;
1: 
1: public class CarbonLoadStatisticsDummy implements LoadStatistics {
1:   private CarbonLoadStatisticsDummy() {
1: 
1:   }
1: 
1:   private static CarbonLoadStatisticsDummy carbonLoadStatisticsDummyInstance =
1:       new CarbonLoadStatisticsDummy();
1: 
1:   public static CarbonLoadStatisticsDummy getInstance() {
1:     return carbonLoadStatisticsDummyInstance;
1:   }
1: 
1:   @Override
0:   public void  initPartitonInfo(String PartitionId) {
1: 
1:   }
1: 
1:   @Override
1:   public void recordDicShuffleAndWriteTime() {
1: 
1:   }
1: 
1:   @Override
1:   public void recordLoadCsvfilesToDfTime() {
1: 
1:   }
1: 
1:   @Override
1:   public void recordDictionaryValuesTotalTime(String partitionID,
1:       Long dictionaryValuesTotalTimeTimePoint) {
1: 
1:   }
1: 
1:   @Override
1:   public void recordCsvInputStepTime(String partitionID, Long csvInputStepTimePoint) {
1: 
1:   }
1: 
1:   @Override
1:   public void recordLruCacheLoadTime(double lruCacheLoadTime) {
1: 
1:   }
1: 
1:   @Override
1:   public void recordGeneratingDictionaryValuesTime(String partitionID,
1:       Long generatingDictionaryValuesTimePoint) {
1: 
1:   }
1: 
1:   @Override
1:   public void recordSortRowsStepTotalTime(String partitionID, Long sortRowsStepTotalTimePoint) {
1: 
1:   }
1: 
1:   @Override
1:   public void recordMdkGenerateTotalTime(String partitionID, Long mdkGenerateTotalTimePoint) {
1: 
1:   }
1: 
1:   @Override
1:   public void recordDictionaryValue2MdkAdd2FileTime(String partitionID,
1:       Long dictionaryValue2MdkAdd2FileTimePoint) {
1: 
1:   }
1: 
1:   @Override
1:   public void recordTotalRecords(long totalRecords) {
1: 
1:   }
1: 
1:   @Override
1:   public void recordHostBlockMap(String host, Integer numBlocks) {
1: 
1:   }
1: 
1:   @Override
1:   public void recordPartitionBlockMap(String partitionID, Integer numBlocks) {
1: 
1:   }
1: 
1:   @Override
1:   public void printStatisticsInfo(String partitionID) {
1: 
1:   }
1: }
============================================================================