1:4daf063: /*
1:4daf063:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4daf063:  * contributor license agreements.  See the NOTICE file distributed with
1:4daf063:  * this work for additional information regarding copyright ownership.
1:4daf063:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4daf063:  * (the "License"); you may not use this file except in compliance with
1:4daf063:  * the License.  You may obtain a copy of the License at
1:4daf063:  *
1:4daf063:  *    http://www.apache.org/licenses/LICENSE-2.0
1:4daf063:  *
1:4daf063:  * Unless required by applicable law or agreed to in writing, software
1:4daf063:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4daf063:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4daf063:  * See the License for the specific language governing permissions and
1:4daf063:  * limitations under the License.
1:4daf063:  */
1:4daf063: package org.apache.carbondata.spark.dictionary.server;
1:4daf063: 
1:cfdde37: import java.io.IOException;
1:cfdde37: import java.security.PrivilegedExceptionAction;
1:cfdde37: 
1:4daf063: import org.apache.carbondata.common.logging.LogService;
1:4daf063: import org.apache.carbondata.common.logging.LogServiceFactory;
1:4daf063: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:4daf063: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:4daf063: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessageType;
1:4daf063: import org.apache.carbondata.core.dictionary.server.DictionaryServer;
1:4daf063: import org.apache.carbondata.core.dictionary.service.AbstractDictionaryServer;
1:4daf063: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:4daf063: import org.apache.carbondata.core.util.CarbonProperties;
1:4daf063: 
1:4daf063: import com.google.common.collect.Lists;
1:4daf063: import io.netty.channel.EventLoopGroup;
1:4daf063: import io.netty.channel.nio.NioEventLoopGroup;
1:cfdde37: import org.apache.hadoop.security.UserGroupInformation;
1:4daf063: import org.apache.spark.SecurityManager;
1:4daf063: import org.apache.spark.SparkConf;
1:4daf063: import org.apache.spark.network.TransportContext;
1:4daf063: import org.apache.spark.network.netty.SparkTransportConf;
1:4daf063: import org.apache.spark.network.sasl.SaslServerBootstrap;
1:4daf063: import org.apache.spark.network.server.TransportServerBootstrap;
1:4daf063: import org.apache.spark.network.util.TransportConf;
1:4daf063: import scala.Some;
1:4daf063: 
1:4daf063: /**
1:4daf063:  * Dictionary Server to generate dictionary keys.
1:4daf063:  */
1:4daf063: public class SecureDictionaryServer extends AbstractDictionaryServer implements DictionaryServer  {
1:4daf063: 
1:4daf063:   private static final LogService LOGGER =
1:4daf063:       LogServiceFactory.getLogService(SecureDictionaryServer.class.getName());
1:4daf063: 
1:4daf063:   private SecureDictionaryServerHandler secureDictionaryServerHandler;
1:4daf063: 
1:4daf063:   private EventLoopGroup boss;
1:4daf063:   private EventLoopGroup worker;
1:4daf063:   private int port;
1:4daf063:   private String host;
1:4daf063:   private SparkConf conf;
1:4daf063:   private String secretKey = null;
1:4daf063:   private boolean encryptSecureServer;
1:4daf063:   private static Object lock = new Object();
1:4daf063:   private static SecureDictionaryServer INSTANCE = null;
1:4daf063: 
1:4daf063:   private SecureDictionaryServer(SparkConf conf, String host, int port) {
1:4daf063:     this.conf = conf;
1:4daf063:     this.host = host;
1:4daf063:     this.port = port;
1:cfdde37:     try {
1:cfdde37:       UserGroupInformation.getLoginUser().doAs(new PrivilegedExceptionAction<Void>() {
1:cfdde37:         @Override public Void run() throws Exception {
1:cfdde37:           startServer();
1:cfdde37:           return null;
1:cfdde37:         }
1:cfdde37:       });
1:cfdde37:     } catch (IOException io) {
1:cfdde37:       LOGGER.error(io, "Failed to start Dictionary Server in secure mode");
1:cfdde37:     } catch (InterruptedException ie) {
1:cfdde37:       LOGGER.error(ie, "Failed to start Dictionary Server in secure mode");
1:cfdde37:     }
1:4daf063:   }
1:4daf063: 
1:4daf063:   public static synchronized DictionaryServer getInstance(SparkConf conf, String host, int port,
1:4daf063:       CarbonTable carbonTable) throws Exception {
1:4daf063:     if (INSTANCE == null) {
1:4daf063:       INSTANCE = new SecureDictionaryServer(conf, host, port);
1:4daf063:     }
1:4daf063:     INSTANCE.initializeDictionaryGenerator(carbonTable);
1:4daf063:     return INSTANCE;
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * start dictionary server
1:4daf063:    *
1:4daf063:    */
1:4daf063:   @Override
1:4daf063:   public void startServer() {
1:4daf063:     LOGGER.info("Starting Dictionary Server in Secure Mode");
1:4daf063:     secureDictionaryServerHandler = new SecureDictionaryServerHandler();
1:4daf063:     String workerThreads = CarbonProperties.getInstance()
1:4daf063:         .getProperty(CarbonCommonConstants.DICTIONARY_WORKER_THREADS,
1:4daf063:             CarbonCommonConstants.DICTIONARY_WORKER_THREADS_DEFAULT);
1:4daf063:     boss = new NioEventLoopGroup(1);
1:4daf063:     worker = new NioEventLoopGroup(Integer.parseInt(workerThreads));
1:4daf063:     // Configure the server.
1:4daf063:     bindToPort();
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * Binds dictionary server to an available port.
1:4daf063:    *
1:4daf063:    */
1:4daf063:   @Override
1:4daf063:   public void bindToPort() {
1:4daf063:     long start = System.currentTimeMillis();
1:4daf063:     // Configure the server.
1:4daf063:     int i = 0;
1:4daf063:     while (i < 10) {
1:4daf063:       int newPort = port + i;
1:4daf063:       try {
1:4daf063:         SecurityManager securityManager;
1:4daf063:         SparkConf conf = this.conf.clone();
1:4daf063:         conf.setAppName("Carbon Dictionary Server");
1:4daf063: 
1:4daf063:         // As spark.network.sasl.serverAlwaysEncrypt is not exposed parameter
1:4daf063:         // set it explicitly so that Dictionary Server and Client communication
1:4daf063:         // occurs encrypted. The below parameter can be removed once spark Documents it.
1:4daf063:         // conf.set("spark.network.sasl.serverAlwaysEncrypt", "true");
1:4daf063:         conf.set("spark.authenticate.enableSaslEncryption", "true");
1:4daf063: 
1:4daf063:         if (conf.get("spark.authenticate.enableSaslEncryption", "false").equalsIgnoreCase("true")) {
1:4daf063:           setEncryptSecureServer(true);
1:4daf063:         } else {
1:4daf063:           setEncryptSecureServer(false);
1:4daf063:         }
1:4daf063: 
1:4daf063:         TransportConf transportConf =
1:4daf063:             SparkTransportConf.fromSparkConf(conf, "Carbon Dictionary Server", 0);
1:4daf063:         securityManager = new SecurityManager(conf, Some.<byte[]>empty());
1:4daf063:         secretKey = securityManager.getSecretKey();
1:4daf063:         TransportContext context =
1:4daf063:             new TransportContext(transportConf, secureDictionaryServerHandler);
1:4daf063:         TransportServerBootstrap bootstrap =
1:4daf063:             new SaslServerBootstrap(transportConf, securityManager);
1:4daf063:         String host = findLocalIpAddress(LOGGER);
1:7ef9164:         context.createServer(host, port, Lists.<TransportServerBootstrap>newArrayList(bootstrap));
1:4daf063:         LOGGER.audit("Dictionary Server started, Time spent " + (System.currentTimeMillis() - start)
1:4daf063:             + " Listening on port " + newPort);
1:4daf063:         this.port = newPort;
1:4daf063:         this.host = host;
1:4daf063:         break;
1:4daf063:       } catch (Exception e) {
1:4daf063:         LOGGER.error(e, "Dictionary Server Failed to bind to port:");
1:4daf063:         if (i == 9) {
1:4daf063:           throw new RuntimeException("Dictionary Server Could not bind to any port");
1:4daf063:         }
1:4daf063:       }
1:4daf063:       i++;
1:4daf063:     }
1:4daf063:   }
1:4daf063: 
1:4daf063:   private void setEncryptSecureServer(boolean encryptSecureServer) {
1:4daf063:     this.encryptSecureServer = encryptSecureServer;
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * @return Port on which the SecureDictionaryServer has started.
1:4daf063:    */
1:4daf063:   @Override
1:4daf063:   public int getPort() {
1:4daf063:     return port;
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * @return IP address on which the SecureDictionaryServer has Started.
1:4daf063:    */
1:4daf063:   @Override
1:4daf063:   public String getHost() {
1:4daf063:     return host;
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * @return Secret Key of Dictionary Server.
1:4daf063:    */
1:4daf063:   @Override
1:4daf063:   public String getSecretKey() {
1:4daf063:     return secretKey;
1:4daf063:   }
1:4daf063: 
1:4daf063:   @Override public boolean isEncryptSecureServer() {
1:4daf063:     return encryptSecureServer;
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * shutdown dictionary server
1:4daf063:    *
1:4daf063:    * @throws Exception
1:4daf063:    */
1:4daf063:   @Override
1:4daf063:   public void shutdown() throws Exception {
1:4daf063:     LOGGER.info("Shutting down dictionary server");
1:cfdde37:     try {
1:cfdde37:       UserGroupInformation.getLoginUser().doAs(new PrivilegedExceptionAction<Void>() {
1:cfdde37:         @Override public Void run() throws Exception {
1:cfdde37:           worker.shutdownGracefully();
1:cfdde37:           boss.shutdownGracefully();
1:cfdde37:           return null;
1:cfdde37:         }
1:cfdde37:       });
1:cfdde37:     } catch (IOException io) {
1:cfdde37:       LOGGER.error(io, "Failed to stop Dictionary Server in secure mode");
1:cfdde37:     } catch (InterruptedException ie) {
1:cfdde37:       LOGGER.error(ie, "Failed to stop Dictionary Server in secure mode");
1:cfdde37:     }
1:4daf063:   }
1:4daf063: 
1:4daf063:   public void initializeDictionaryGenerator(CarbonTable carbonTable) throws Exception {
1:4daf063:     secureDictionaryServerHandler.initializeTable(carbonTable);
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * Write Dictionary for one table.
1:4daf063:    *
1:4daf063:    * @throws Exception
1:4daf063:    */
1:4daf063: 
1:4daf063:   @Override
1:4daf063:   public void writeTableDictionary(String uniqueTableName) throws Exception {
1:4daf063:     DictionaryMessage key = new DictionaryMessage();
1:4daf063:     key.setTableUniqueId(uniqueTableName);
1:4daf063:     key.setType(DictionaryMessageType.WRITE_TABLE_DICTIONARY);
1:4daf063:     secureDictionaryServerHandler.processMessage(key);
1:4daf063:   }
1:4daf063: 
1:4daf063: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         context.createServer(host, port, Lists.<TransportServerBootstrap>newArrayList(bootstrap));
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:cfdde37
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.security.PrivilegedExceptionAction;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.security.UserGroupInformation;
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       UserGroupInformation.getLoginUser().doAs(new PrivilegedExceptionAction<Void>() {
1:         @Override public Void run() throws Exception {
1:           startServer();
1:           return null;
1:         }
1:       });
1:     } catch (IOException io) {
1:       LOGGER.error(io, "Failed to start Dictionary Server in secure mode");
1:     } catch (InterruptedException ie) {
1:       LOGGER.error(ie, "Failed to start Dictionary Server in secure mode");
1:     }
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       UserGroupInformation.getLoginUser().doAs(new PrivilegedExceptionAction<Void>() {
1:         @Override public Void run() throws Exception {
1:           worker.shutdownGracefully();
1:           boss.shutdownGracefully();
1:           return null;
1:         }
1:       });
1:     } catch (IOException io) {
1:       LOGGER.error(io, "Failed to stop Dictionary Server in secure mode");
1:     } catch (InterruptedException ie) {
1:       LOGGER.error(ie, "Failed to stop Dictionary Server in secure mode");
1:     }
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.spark.dictionary.server;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessageType;
1: import org.apache.carbondata.core.dictionary.server.DictionaryServer;
1: import org.apache.carbondata.core.dictionary.service.AbstractDictionaryServer;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: import com.google.common.collect.Lists;
1: import io.netty.channel.EventLoopGroup;
1: import io.netty.channel.nio.NioEventLoopGroup;
1: import org.apache.spark.SecurityManager;
1: import org.apache.spark.SparkConf;
1: import org.apache.spark.network.TransportContext;
1: import org.apache.spark.network.netty.SparkTransportConf;
1: import org.apache.spark.network.sasl.SaslServerBootstrap;
0: import org.apache.spark.network.server.TransportServer;
1: import org.apache.spark.network.server.TransportServerBootstrap;
1: import org.apache.spark.network.util.TransportConf;
1: import scala.Some;
1: 
1: /**
1:  * Dictionary Server to generate dictionary keys.
1:  */
1: public class SecureDictionaryServer extends AbstractDictionaryServer implements DictionaryServer  {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(SecureDictionaryServer.class.getName());
1: 
1:   private SecureDictionaryServerHandler secureDictionaryServerHandler;
1: 
1:   private EventLoopGroup boss;
1:   private EventLoopGroup worker;
1:   private int port;
1:   private String host;
1:   private SparkConf conf;
1:   private String secretKey = null;
1:   private boolean encryptSecureServer;
1:   private static Object lock = new Object();
1:   private static SecureDictionaryServer INSTANCE = null;
1: 
1:   private SecureDictionaryServer(SparkConf conf, String host, int port) {
1:     this.conf = conf;
1:     this.host = host;
1:     this.port = port;
0:     startServer();
1:   }
1: 
1:   public static synchronized DictionaryServer getInstance(SparkConf conf, String host, int port,
1:       CarbonTable carbonTable) throws Exception {
1:     if (INSTANCE == null) {
1:       INSTANCE = new SecureDictionaryServer(conf, host, port);
1:     }
1:     INSTANCE.initializeDictionaryGenerator(carbonTable);
1:     return INSTANCE;
1:   }
1: 
1:   /**
1:    * start dictionary server
1:    *
1:    */
1:   @Override
1:   public void startServer() {
1:     LOGGER.info("Starting Dictionary Server in Secure Mode");
1:     secureDictionaryServerHandler = new SecureDictionaryServerHandler();
1:     String workerThreads = CarbonProperties.getInstance()
1:         .getProperty(CarbonCommonConstants.DICTIONARY_WORKER_THREADS,
1:             CarbonCommonConstants.DICTIONARY_WORKER_THREADS_DEFAULT);
1:     boss = new NioEventLoopGroup(1);
1:     worker = new NioEventLoopGroup(Integer.parseInt(workerThreads));
1:     // Configure the server.
1:     bindToPort();
1:   }
1: 
1:   /**
1:    * Binds dictionary server to an available port.
1:    *
1:    */
1:   @Override
1:   public void bindToPort() {
1:     long start = System.currentTimeMillis();
1:     // Configure the server.
1:     int i = 0;
1:     while (i < 10) {
1:       int newPort = port + i;
1:       try {
1:         SecurityManager securityManager;
1:         SparkConf conf = this.conf.clone();
1:         conf.setAppName("Carbon Dictionary Server");
1: 
1:         // As spark.network.sasl.serverAlwaysEncrypt is not exposed parameter
1:         // set it explicitly so that Dictionary Server and Client communication
1:         // occurs encrypted. The below parameter can be removed once spark Documents it.
1:         // conf.set("spark.network.sasl.serverAlwaysEncrypt", "true");
1:         conf.set("spark.authenticate.enableSaslEncryption", "true");
1: 
1:         if (conf.get("spark.authenticate.enableSaslEncryption", "false").equalsIgnoreCase("true")) {
1:           setEncryptSecureServer(true);
1:         } else {
1:           setEncryptSecureServer(false);
1:         }
1: 
1:         TransportConf transportConf =
1:             SparkTransportConf.fromSparkConf(conf, "Carbon Dictionary Server", 0);
1:         securityManager = new SecurityManager(conf, Some.<byte[]>empty());
1:         secretKey = securityManager.getSecretKey();
1:         TransportContext context =
1:             new TransportContext(transportConf, secureDictionaryServerHandler);
1:         TransportServerBootstrap bootstrap =
1:             new SaslServerBootstrap(transportConf, securityManager);
1:         String host = findLocalIpAddress(LOGGER);
0:         TransportServer transportServer = context
0:             .createServer(host, port, Lists.<TransportServerBootstrap>newArrayList(bootstrap));
1:         LOGGER.audit("Dictionary Server started, Time spent " + (System.currentTimeMillis() - start)
1:             + " Listening on port " + newPort);
1:         this.port = newPort;
1:         this.host = host;
1:         break;
1:       } catch (Exception e) {
1:         LOGGER.error(e, "Dictionary Server Failed to bind to port:");
1:         if (i == 9) {
1:           throw new RuntimeException("Dictionary Server Could not bind to any port");
1:         }
1:       }
1:       i++;
1:     }
1:   }
1: 
1:   private void setEncryptSecureServer(boolean encryptSecureServer) {
1:     this.encryptSecureServer = encryptSecureServer;
1:   }
1: 
1:   /**
1:    * @return Port on which the SecureDictionaryServer has started.
1:    */
1:   @Override
1:   public int getPort() {
1:     return port;
1:   }
1: 
1:   /**
1:    * @return IP address on which the SecureDictionaryServer has Started.
1:    */
1:   @Override
1:   public String getHost() {
1:     return host;
1:   }
1: 
1:   /**
1:    * @return Secret Key of Dictionary Server.
1:    */
1:   @Override
1:   public String getSecretKey() {
1:     return secretKey;
1:   }
1: 
1:   @Override public boolean isEncryptSecureServer() {
1:     return encryptSecureServer;
1:   }
1: 
1:   /**
1:    * shutdown dictionary server
1:    *
1:    * @throws Exception
1:    */
1:   @Override
1:   public void shutdown() throws Exception {
1:     LOGGER.info("Shutting down dictionary server");
0:     worker.shutdownGracefully();
0:     boss.shutdownGracefully();
1:   }
1: 
1:   public void initializeDictionaryGenerator(CarbonTable carbonTable) throws Exception {
1:     secureDictionaryServerHandler.initializeTable(carbonTable);
1:   }
1: 
1:   /**
1:    * Write Dictionary for one table.
1:    *
1:    * @throws Exception
1:    */
1: 
1:   @Override
1:   public void writeTableDictionary(String uniqueTableName) throws Exception {
1:     DictionaryMessage key = new DictionaryMessage();
1:     key.setTableUniqueId(uniqueTableName);
1:     key.setType(DictionaryMessageType.WRITE_TABLE_DICTIONARY);
1:     secureDictionaryServerHandler.processMessage(key);
1:   }
1: 
1: }
============================================================================