1:9a423c2: /*
1:9a423c2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9a423c2:  * contributor license agreements.  See the NOTICE file distributed with
1:9a423c2:  * this work for additional information regarding copyright ownership.
1:9a423c2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9a423c2:  * (the "License"); you may not use this file except in compliance with
1:9a423c2:  * the License.  You may obtain a copy of the License at
1:9a423c2:  *
1:9a423c2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9a423c2:  *
1:9a423c2:  * Unless required by applicable law or agreed to in writing, software
1:9a423c2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9a423c2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9a423c2:  * See the License for the specific language governing permissions and
1:9a423c2:  * limitations under the License.
1:9a423c2:  */
1:9a423c2: package org.apache.carbondata.processing.util;
1:9a423c2: 
1:9a423c2: import java.util.ArrayList;
1:9a423c2: import java.util.List;
1:9a423c2: import java.util.Map;
1:9a423c2: 
1:9a423c2: import org.apache.carbondata.common.logging.LogService;
1:9a423c2: import org.apache.carbondata.common.logging.LogServiceFactory;
1:9a423c2: import org.apache.carbondata.core.datastore.block.Distributable;
1:9a423c2: import org.apache.carbondata.core.datastore.block.TableBlockInfo;
1:9a423c2: import org.apache.carbondata.core.metadata.ColumnarFormatVersion;
1:9a423c2: 
1:9a423c2: import org.apache.commons.lang3.StringUtils;
1:9a423c2: import org.junit.Assert;
1:9a423c2: import org.junit.Test;
1:9a423c2: 
1:9a423c2: public class CarbonLoaderUtilTest {
1:9a423c2:   private final static LogService LOGGER
1:9a423c2:       = LogServiceFactory.getLogService(CarbonLoaderUtilTest.class.getName());
1:9a423c2: 
1:9a423c2:   private List<Distributable> generateBlocks() {
1:9a423c2:     List<Distributable> blockInfos = new ArrayList<>();
1:9a423c2:     String filePath = "/fakepath";
1:9a423c2:     String blockId = "1";
1:9a423c2: 
1:9a423c2:     String[] locations = new String[] { "host2", "host3" };
1:9a423c2:     ColumnarFormatVersion version = ColumnarFormatVersion.V1;
1:9a423c2: 
1:9a423c2:     TableBlockInfo tableBlockInfo1 = new TableBlockInfo(filePath + "_a", 0,
1:9a423c2:         blockId, locations, 30 * 1024 * 1024, version, null);
1:9a423c2:     blockInfos.add(tableBlockInfo1);
1:9a423c2: 
1:9a423c2:     TableBlockInfo tableBlockInfo2 = new TableBlockInfo(filePath + "_b", 0,
1:9a423c2:         blockId, locations, 40 * 1024 * 1024, version, null);
1:9a423c2:     blockInfos.add(tableBlockInfo2);
1:685087e: 
1:9a423c2:     TableBlockInfo tableBlockInfo3 = new TableBlockInfo(filePath + "_c", 0,
1:9a423c2:         blockId, locations, 20 * 1024 * 1024, version, null);
1:9a423c2:     blockInfos.add(tableBlockInfo3);
1:9a423c2: 
1:9a423c2:     TableBlockInfo tableBlockInfo4 = new TableBlockInfo(filePath + "_d", 0,
1:9a423c2:         blockId, locations, 1, version, null);
1:9a423c2:     blockInfos.add(tableBlockInfo4);
1:9a423c2: 
1:9a423c2:     TableBlockInfo tableBlockInfo5 = new TableBlockInfo(filePath + "_e", 0,
1:9a423c2:         blockId, locations, 1, version, null);
1:9a423c2:     blockInfos.add(tableBlockInfo5);
1:9a423c2: 
1:9a423c2:     TableBlockInfo tableBlockInfo6 = new TableBlockInfo(filePath + "_f", 0,
1:9a423c2:         blockId, locations, 1, version, null);
1:9a423c2:     blockInfos.add(tableBlockInfo6);
1:9a423c2: 
1:9a423c2:     TableBlockInfo tableBlockInfo7 = new TableBlockInfo(filePath + "_g", 0,
1:9a423c2:         blockId, locations, 1, version, null);
1:9a423c2:     blockInfos.add(tableBlockInfo7);
1:9a423c2:     return blockInfos;
1:9a423c2:   }
1:685087e: 
1:685087e:   private List<Distributable> generateBlocks2() {
1:685087e:     List<Distributable> blockInfos = new ArrayList<>();
1:685087e:     String filePath = "/fakepath";
1:685087e:     String blockId = "1";
1:685087e: 
1:685087e:     String[] locations = new String[] { "host2", "host3" };
1:685087e:     ColumnarFormatVersion version = ColumnarFormatVersion.V1;
1:685087e: 
1:685087e:     TableBlockInfo tableBlockInfo1 = new TableBlockInfo(filePath + "_a", 0,
1:685087e:             blockId, locations, 30 * 1024 * 1024, version, null);
1:685087e:     blockInfos.add(tableBlockInfo1);
1:685087e: 
1:685087e:     TableBlockInfo tableBlockInfo2 = new TableBlockInfo(filePath + "_b", 0,
1:685087e:             blockId, locations, 30 * 1024 * 1024, version, null);
1:685087e:     blockInfos.add(tableBlockInfo2);
1:685087e: 
1:685087e:     TableBlockInfo tableBlockInfo3 = new TableBlockInfo(filePath + "_c", 0,
1:685087e:             blockId, locations, 30 * 1024 * 1024, version, null);
1:685087e:     blockInfos.add(tableBlockInfo3);
1:9a423c2: 
1:685087e:     return blockInfos;
1:685087e:   }
1:9a423c2: 
1:9a423c2:   private List<String> generateExecutors() {
1:9a423c2:     List<String> activeNodes = new ArrayList<>();
1:9a423c2:     activeNodes.add("host1");
1:9a423c2:     activeNodes.add("host2");
1:9a423c2:     activeNodes.add("host3");
1:9a423c2:     return activeNodes;
1:9a423c2:   }
1:9a423c2: 
1:685087e:   @Test
1:9a423c2:   public void testNodeBlockMappingByDataSize() throws Exception {
1:9a423c2:     List<Distributable> blockInfos = generateBlocks();
1:9a423c2:     List<String> activeNodes = generateExecutors();
1:9a423c2: 
1:9a423c2:     // the blocks are assigned by size, so the number of block for each node are different
1:685087e:     Map<String, List<Distributable>> nodeMappingBySize = CarbonLoaderUtil
1:685087e:         .nodeBlockMapping(blockInfos, -1, activeNodes,
1:685087e:             CarbonLoaderUtil.BlockAssignmentStrategy.BLOCK_SIZE_FIRST, null);
1:9a423c2:     LOGGER.info(convertMapListAsString(nodeMappingBySize));
1:9a423c2:     Assert.assertEquals(3, nodeMappingBySize.size());
1:9a423c2:     for (Map.Entry<String, List<Distributable>> entry : nodeMappingBySize.entrySet()) {
1:9a423c2:       if (entry.getValue().size() == 1) {
1:9a423c2:         // only contains the biggest block
1:9a423c2:         Assert.assertEquals(40 * 1024 * 1024L,
1:9a423c2:             ((TableBlockInfo) entry.getValue().get(0)).getBlockLength());
1:9a423c2:       } else {
1:9a423c2:         Assert.assertTrue(entry.getValue().size() > 1);
1:9a423c2:       }
1:9a423c2:     }
1:9a423c2: 
1:9a423c2:     // the blocks are assigned by number, so the number of blocks for each node are nearly the same
1:685087e:     Map<String, List<Distributable>> nodeMappingByNum = CarbonLoaderUtil
1:685087e:         .nodeBlockMapping(blockInfos, -1, activeNodes,
1:685087e:             CarbonLoaderUtil.BlockAssignmentStrategy.BLOCK_NUM_FIRST, null);
1:9a423c2:     LOGGER.info(convertMapListAsString(nodeMappingByNum));
1:9a423c2:     Assert.assertEquals(3, nodeMappingBySize.size());
1:9a423c2:     for (Map.Entry<String, List<Distributable>> entry : nodeMappingByNum.entrySet()) {
1:9a423c2:       Assert.assertTrue(entry.getValue().size() == blockInfos.size() / 3
1:9a423c2:           || entry.getValue().size() == blockInfos.size() / 3 + 1);
1:9a423c2:     }
1:9a423c2:   }
1:9a423c2: 
1:9a423c2:   @Test
1:685087e:   public void testNodeBlockMappingByNodeRandom() throws Exception {
1:685087e:     List<Distributable> blockInfos = generateBlocks2();
1:685087e:     List<String> activeNodes = generateExecutors();
1:685087e: 
1:685087e:     // the blocks are assigned by node as random, The node loads the smallest amount of data by user specified
1:685087e:     Map<String, List<Distributable>> nodeMappingByRandom = CarbonLoaderUtil
1:685087e:         .nodeBlockMapping(blockInfos, -1, activeNodes,
1:685087e:             CarbonLoaderUtil.BlockAssignmentStrategy.NODE_MIN_SIZE_FIRST, "90");
1:685087e:     LOGGER.info(convertMapListAsString(nodeMappingByRandom));
1:685087e:     Assert.assertEquals(1, nodeMappingByRandom.size());
1:685087e:     for (Map.Entry<String, List<Distributable>> entry : nodeMappingByRandom.entrySet()) {
1:685087e:       Assert.assertTrue(entry.getValue().size() == blockInfos.size());
1:685087e:     }
1:685087e:   }
1:685087e: 
1:9a423c2:   private <K, T> String convertMapListAsString(Map<K, List<T>> mapList) {
1:9a423c2:     StringBuffer sb = new StringBuffer();
1:9a423c2:     for (Map.Entry<K, List<T>> entry : mapList.entrySet()) {
1:9a423c2:       String key = entry.getKey().toString();
1:9a423c2:       String value = StringUtils.join(entry.getValue(), ", ");
1:9a423c2:       sb.append(key).append(" -- ").append(value).append(System.lineSeparator());
1:9a423c2:     }
1:9a423c2:     return sb.toString();
1:9a423c2:   }
1:9a423c2: }
============================================================================
author:ndwangsen
-------------------------------------------------------------------------------
commit:685087e
/////////////////////////////////////////////////////////////////////////
1:   private List<Distributable> generateBlocks2() {
1:     List<Distributable> blockInfos = new ArrayList<>();
1:     String filePath = "/fakepath";
1:     String blockId = "1";
1: 
1:     String[] locations = new String[] { "host2", "host3" };
1:     ColumnarFormatVersion version = ColumnarFormatVersion.V1;
1: 
1:     TableBlockInfo tableBlockInfo1 = new TableBlockInfo(filePath + "_a", 0,
1:             blockId, locations, 30 * 1024 * 1024, version, null);
1:     blockInfos.add(tableBlockInfo1);
1: 
1:     TableBlockInfo tableBlockInfo2 = new TableBlockInfo(filePath + "_b", 0,
1:             blockId, locations, 30 * 1024 * 1024, version, null);
1:     blockInfos.add(tableBlockInfo2);
1: 
1:     TableBlockInfo tableBlockInfo3 = new TableBlockInfo(filePath + "_c", 0,
1:             blockId, locations, 30 * 1024 * 1024, version, null);
1:     blockInfos.add(tableBlockInfo3);
1: 
1:     return blockInfos;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     Map<String, List<Distributable>> nodeMappingBySize = CarbonLoaderUtil
1:         .nodeBlockMapping(blockInfos, -1, activeNodes,
1:             CarbonLoaderUtil.BlockAssignmentStrategy.BLOCK_SIZE_FIRST, null);
/////////////////////////////////////////////////////////////////////////
1:     Map<String, List<Distributable>> nodeMappingByNum = CarbonLoaderUtil
1:         .nodeBlockMapping(blockInfos, -1, activeNodes,
1:             CarbonLoaderUtil.BlockAssignmentStrategy.BLOCK_NUM_FIRST, null);
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testNodeBlockMappingByNodeRandom() throws Exception {
1:     List<Distributable> blockInfos = generateBlocks2();
1:     List<String> activeNodes = generateExecutors();
1: 
1:     // the blocks are assigned by node as random, The node loads the smallest amount of data by user specified
1:     Map<String, List<Distributable>> nodeMappingByRandom = CarbonLoaderUtil
1:         .nodeBlockMapping(blockInfos, -1, activeNodes,
1:             CarbonLoaderUtil.BlockAssignmentStrategy.NODE_MIN_SIZE_FIRST, "90");
1:     LOGGER.info(convertMapListAsString(nodeMappingByRandom));
1:     Assert.assertEquals(1, nodeMappingByRandom.size());
1:     for (Map.Entry<String, List<Distributable>> entry : nodeMappingByRandom.entrySet()) {
1:       Assert.assertTrue(entry.getValue().size() == blockInfos.size());
1:     }
1:   }
1: 
author:xuchuanyin
-------------------------------------------------------------------------------
commit:9a423c2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.processing.util;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.datastore.block.Distributable;
1: import org.apache.carbondata.core.datastore.block.TableBlockInfo;
1: import org.apache.carbondata.core.metadata.ColumnarFormatVersion;
1: 
1: import org.apache.commons.lang3.StringUtils;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class CarbonLoaderUtilTest {
1:   private final static LogService LOGGER
1:       = LogServiceFactory.getLogService(CarbonLoaderUtilTest.class.getName());
1: 
1:   private List<Distributable> generateBlocks() {
1:     List<Distributable> blockInfos = new ArrayList<>();
1:     String filePath = "/fakepath";
1:     String blockId = "1";
1: 
1:     String[] locations = new String[] { "host2", "host3" };
1:     ColumnarFormatVersion version = ColumnarFormatVersion.V1;
1: 
1:     TableBlockInfo tableBlockInfo1 = new TableBlockInfo(filePath + "_a", 0,
1:         blockId, locations, 30 * 1024 * 1024, version, null);
1:     blockInfos.add(tableBlockInfo1);
1: 
1:     TableBlockInfo tableBlockInfo2 = new TableBlockInfo(filePath + "_b", 0,
1:         blockId, locations, 40 * 1024 * 1024, version, null);
1:     blockInfos.add(tableBlockInfo2);
1: 
1:     TableBlockInfo tableBlockInfo3 = new TableBlockInfo(filePath + "_c", 0,
1:         blockId, locations, 20 * 1024 * 1024, version, null);
1:     blockInfos.add(tableBlockInfo3);
1: 
1:     TableBlockInfo tableBlockInfo4 = new TableBlockInfo(filePath + "_d", 0,
1:         blockId, locations, 1, version, null);
1:     blockInfos.add(tableBlockInfo4);
1: 
1:     TableBlockInfo tableBlockInfo5 = new TableBlockInfo(filePath + "_e", 0,
1:         blockId, locations, 1, version, null);
1:     blockInfos.add(tableBlockInfo5);
1: 
1:     TableBlockInfo tableBlockInfo6 = new TableBlockInfo(filePath + "_f", 0,
1:         blockId, locations, 1, version, null);
1:     blockInfos.add(tableBlockInfo6);
1: 
1:     TableBlockInfo tableBlockInfo7 = new TableBlockInfo(filePath + "_g", 0,
1:         blockId, locations, 1, version, null);
1:     blockInfos.add(tableBlockInfo7);
1:     return blockInfos;
1:   }
1: 
1:   private List<String> generateExecutors() {
1:     List<String> activeNodes = new ArrayList<>();
1:     activeNodes.add("host1");
1:     activeNodes.add("host2");
1:     activeNodes.add("host3");
1:     return activeNodes;
1:   }
1: 
1:   @Test
1:   public void testNodeBlockMappingByDataSize() throws Exception {
1:     List<Distributable> blockInfos = generateBlocks();
1:     List<String> activeNodes = generateExecutors();
1: 
1:     // the blocks are assigned by size, so the number of block for each node are different
0:     Map<String, List<Distributable>> nodeMappingBySize =
0:         CarbonLoaderUtil.nodeBlockMapping(blockInfos, -1, activeNodes,
0:             CarbonLoaderUtil.BlockAssignmentStrategy.BLOCK_SIZE_FIRST);
1:     LOGGER.info(convertMapListAsString(nodeMappingBySize));
1:     Assert.assertEquals(3, nodeMappingBySize.size());
1:     for (Map.Entry<String, List<Distributable>> entry : nodeMappingBySize.entrySet()) {
1:       if (entry.getValue().size() == 1) {
1:         // only contains the biggest block
1:         Assert.assertEquals(40 * 1024 * 1024L,
1:             ((TableBlockInfo) entry.getValue().get(0)).getBlockLength());
1:       } else {
1:         Assert.assertTrue(entry.getValue().size() > 1);
1:       }
1:     }
1: 
1:     // the blocks are assigned by number, so the number of blocks for each node are nearly the same
0:     Map<String, List<Distributable>> nodeMappingByNum =
0:         CarbonLoaderUtil.nodeBlockMapping(blockInfos, -1, activeNodes,
0:             CarbonLoaderUtil.BlockAssignmentStrategy.BLOCK_NUM_FIRST);
1:     LOGGER.info(convertMapListAsString(nodeMappingByNum));
1:     Assert.assertEquals(3, nodeMappingBySize.size());
1:     for (Map.Entry<String, List<Distributable>> entry : nodeMappingByNum.entrySet()) {
1:       Assert.assertTrue(entry.getValue().size() == blockInfos.size() / 3
1:           || entry.getValue().size() == blockInfos.size() / 3 + 1);
1:     }
1:   }
1: 
1:   private <K, T> String convertMapListAsString(Map<K, List<T>> mapList) {
1:     StringBuffer sb = new StringBuffer();
1:     for (Map.Entry<K, List<T>> entry : mapList.entrySet()) {
1:       String key = entry.getKey().toString();
1:       String value = StringUtils.join(entry.getValue(), ", ");
1:       sb.append(key).append(" -- ").append(value).append(System.lineSeparator());
1:     }
1:     return sb.toString();
1:   }
1: }
============================================================================