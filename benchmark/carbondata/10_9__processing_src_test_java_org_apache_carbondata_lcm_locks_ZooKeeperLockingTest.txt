1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.lcm.locks;
1:1155d4d: 
1:1155d4d: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:1155d4d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonProperties;
1:ce09aaa: import org.apache.carbondata.core.locks.LockUsage;
1:ce09aaa: import org.apache.carbondata.core.locks.ZooKeeperLocking;
1:ce09aaa: import org.apache.carbondata.core.locks.ZookeeperInit;
1:cd6a4ff: import org.apache.zookeeper.server.ServerConfig;
1:cd6a4ff: import org.apache.zookeeper.server.ZooKeeperServerMain;
1:cd6a4ff: import org.apache.zookeeper.server.quorum.QuorumPeerConfig;
1:cd6a4ff: import org.junit.After;
1:cd6a4ff: import org.junit.Assert;
1:cd6a4ff: import org.junit.Before;
1:590bbb9: import org.junit.Ignore;
5:cd6a4ff: 
1:0d42f52: import java.io.File;
1:0d42f52: import java.io.IOException;
1:0d42f52: import java.net.ServerSocket;
1:0d42f52: import java.util.Properties;
1:cb10d03: import java.util.UUID;
1:0d42f52: 
1:cd6a4ff: /**
1:6650c63:  * ZooKeeperLocking Test cases
1:cd6a4ff:  */
1:cd6a4ff: public class ZooKeeperLockingTest {
1:cd6a4ff: 
1:cd6a4ff:   int freePort;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @throws java.lang.Exception
1:cd6a4ff:    */
1:cd6a4ff:   @Before public void setUp() throws Exception {
1:cd6a4ff:     Properties startupProperties = new Properties();
1:cd6a4ff:     startupProperties.setProperty("dataDir", (new File("./target").getAbsolutePath()));
1:cd6a4ff:     startupProperties.setProperty("dataLogDir", (new File("./target").getAbsolutePath()));
1:cd6a4ff:     freePort = findFreePort();
1:cd6a4ff:     startupProperties.setProperty("clientPort", "" + freePort);
1:cd6a4ff:     QuorumPeerConfig quorumConfiguration = new QuorumPeerConfig();
1:cd6a4ff:     try {
1:cd6a4ff:       quorumConfiguration.parseProperties(startupProperties);
1:cd6a4ff:     } catch (Exception e) {
1:cd6a4ff:       throw new RuntimeException(e);
2:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     final ZooKeeperServerMain zooKeeperServer = new ZooKeeperServerMain();
1:cd6a4ff:     final ServerConfig configuration = new ServerConfig();
1:cd6a4ff:     configuration.readFrom(quorumConfiguration);
1:cd6a4ff:     new Thread() {
1:cd6a4ff:       public void run() {
1:cd6a4ff:         try {
1:cd6a4ff:           zooKeeperServer.runFromConfig(configuration);
1:cd6a4ff:         } catch (IOException e) {
1:cd6a4ff:           System.out.println("ZooKeeper failure");
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff:     }.start();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @throws java.lang.Exception
1:cd6a4ff:    */
1:cd6a4ff:   @After public void tearDown() throws Exception {
1:cd6a4ff:   }
1:cd6a4ff: 
1:590bbb9:   @Ignore public void testZooKeeperLockingByTryingToAcquire2Locks()
1:cd6a4ff:       throws IllegalArgumentException, IllegalAccessException, NoSuchFieldException,
1:cd6a4ff:       SecurityException {
1:cd6a4ff: 
1:ab9a4fc: //    final CarbonProperties cp = CarbonProperties.getInstance();
1:ab9a4fc: //    new NonStrictExpectations(cp) {
1:ab9a4fc: //      {
1:ab9a4fc: //        cp.getProperty("/CarbonLocks");
1:ab9a4fc: //        result = "/carbontests";
1:ab9a4fc: //        cp.getProperty("spark.deploy.zookeeper.url");
1:ab9a4fc: //        result = "127.0.0.1:" + freePort;
1:ab9a4fc: //      }
1:ab9a4fc: //    };
1:cd6a4ff: 
1:cd6a4ff:     ZookeeperInit zki = ZookeeperInit.getInstance("127.0.0.1:" + freePort);
1:cd6a4ff: 
1:1155d4d:     AbsoluteTableIdentifier tableIdentifier = AbsoluteTableIdentifier
1:1155d4d:         .from(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.STORE_LOCATION),
1:cb10d03:             "dbName", "tableName", UUID.randomUUID().toString());
1:cd6a4ff:     ZooKeeperLocking zkl =
1:cd6a4ff:         new ZooKeeperLocking(tableIdentifier,
1:cd6a4ff:             LockUsage.METADATA_LOCK);
1:cd6a4ff:     Assert.assertTrue(zkl.lock());
1:cd6a4ff: 
1:cd6a4ff:     ZooKeeperLocking zk2 = new ZooKeeperLocking(
1:cd6a4ff:     		tableIdentifier, LockUsage.METADATA_LOCK);
1:cd6a4ff:     Assert.assertTrue(!zk2.lock());
1:cd6a4ff: 
1:cd6a4ff:     Assert.assertTrue(zkl.unlock());
1:cd6a4ff:     Assert.assertTrue(zk2.lock());
1:cd6a4ff:     Assert.assertTrue(zk2.unlock());
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * For finding the free port available.
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   private static int findFreePort() {
1:cd6a4ff:     ServerSocket socket = null;
1:cd6a4ff:     try {
1:cd6a4ff:       socket = new ServerSocket(0);
1:cd6a4ff:       socket.setReuseAddress(true);
1:cd6a4ff:       int port = socket.getLocalPort();
1:cd6a4ff:       try {
1:cd6a4ff:         socket.close();
1:cd6a4ff:       } catch (IOException e) {
1:cd6a4ff:         // Ignore IOException on close()
1:cd6a4ff:       }
1:cd6a4ff:       return port;
1:cd6a4ff:     } catch (Exception e) {
1:cd6a4ff:       // Ignore
1:cd6a4ff:     } finally {
1:cd6a4ff:       if (socket != null) {
1:cd6a4ff:         try {
1:cd6a4ff:           socket.close();
1:cd6a4ff:         } catch (IOException e) {
1:cd6a4ff:           throw new RuntimeException(e);
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     return 2181;
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:cb10d03
/////////////////////////////////////////////////////////////////////////
1: import java.util.UUID;
/////////////////////////////////////////////////////////////////////////
1:             "dbName", "tableName", UUID.randomUUID().toString());
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
1:     AbsoluteTableIdentifier tableIdentifier = AbsoluteTableIdentifier
1:         .from(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.STORE_LOCATION),
0:             "dbName", "tableName");
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:590bbb9
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1:   @Ignore public void testZooKeeperLockingByTryingToAcquire2Locks()
author:Raghunandan S
-------------------------------------------------------------------------------
commit:ab9a4fc
/////////////////////////////////////////////////////////////////////////
1: //    final CarbonProperties cp = CarbonProperties.getInstance();
1: //    new NonStrictExpectations(cp) {
1: //      {
1: //        cp.getProperty("/CarbonLocks");
1: //        result = "/carbontests";
1: //        cp.getProperty("spark.deploy.zookeeper.url");
1: //        result = "127.0.0.1:" + freePort;
1: //      }
1: //    };
author:Manohar
-------------------------------------------------------------------------------
commit:6650c63
/////////////////////////////////////////////////////////////////////////
1:  * ZooKeeperLocking Test cases
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.locks.LockUsage;
1: import org.apache.carbondata.core.locks.ZooKeeperLocking;
1: import org.apache.carbondata.core.locks.ZookeeperInit;
author:ravikiran23
-------------------------------------------------------------------------------
commit:0d42f52
/////////////////////////////////////////////////////////////////////////
0: import mockit.NonStrictExpectations;
0: import org.apache.carbondata.locks.LockUsage;
0: import org.apache.carbondata.locks.ZooKeeperLocking;
0: import org.apache.carbondata.locks.ZookeeperInit;
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.ServerSocket;
1: import java.util.Properties;
1: 
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.lcm.locks;
1: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.net.ServerSocket;
0: import java.util.Properties;
1: 
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
0: import mockit.NonStrictExpectations;
1: 
1: import org.apache.zookeeper.server.ServerConfig;
1: import org.apache.zookeeper.server.ZooKeeperServerMain;
1: import org.apache.zookeeper.server.quorum.QuorumPeerConfig;
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
0: import org.junit.Test;
1: 
1: /**
0:  * @author Administrator
1:  */
1: public class ZooKeeperLockingTest {
1: 
1:   int freePort;
1: 
1:   /**
1:    * @throws java.lang.Exception
1:    */
1:   @Before public void setUp() throws Exception {
1:     Properties startupProperties = new Properties();
1:     startupProperties.setProperty("dataDir", (new File("./target").getAbsolutePath()));
1:     startupProperties.setProperty("dataLogDir", (new File("./target").getAbsolutePath()));
1:     freePort = findFreePort();
1:     startupProperties.setProperty("clientPort", "" + freePort);
1:     QuorumPeerConfig quorumConfiguration = new QuorumPeerConfig();
1:     try {
1:       quorumConfiguration.parseProperties(startupProperties);
1:     } catch (Exception e) {
1:       throw new RuntimeException(e);
1:     }
1: 
1:     final ZooKeeperServerMain zooKeeperServer = new ZooKeeperServerMain();
1:     final ServerConfig configuration = new ServerConfig();
1:     configuration.readFrom(quorumConfiguration);
1:     new Thread() {
1:       public void run() {
1:         try {
1:           zooKeeperServer.runFromConfig(configuration);
1:         } catch (IOException e) {
1:           System.out.println("ZooKeeper failure");
1:         }
1:       }
1:     }.start();
1:   }
1: 
1:   /**
1:    * @throws java.lang.Exception
1:    */
1:   @After public void tearDown() throws Exception {
1:   }
1: 
0:   @Test public void testZooKeeperLockingByTryingToAcquire2Locks()
1:       throws IllegalArgumentException, IllegalAccessException, NoSuchFieldException,
1:       SecurityException {
1: 
0:     final CarbonProperties cp = CarbonProperties.getInstance();
0:     new NonStrictExpectations(cp) {
0:       {
0:         cp.getProperty("/CarbonLocks");
0:         result = "/carbontests";
0:         cp.getProperty("spark.deploy.zookeeper.url");
0:         result = "127.0.0.1:" + freePort;
1:       }
0:     };
1: 
1:     ZookeeperInit zki = ZookeeperInit.getInstance("127.0.0.1:" + freePort);
1: 
0:     CarbonTableIdentifier tableIdentifier = new CarbonTableIdentifier("dbName", "tableName", "tableId");
1:     ZooKeeperLocking zkl =
1:         new ZooKeeperLocking(tableIdentifier,
1:             LockUsage.METADATA_LOCK);
1:     Assert.assertTrue(zkl.lock());
1: 
1:     ZooKeeperLocking zk2 = new ZooKeeperLocking(
1:     		tableIdentifier, LockUsage.METADATA_LOCK);
1:     Assert.assertTrue(!zk2.lock());
1: 
1:     Assert.assertTrue(zkl.unlock());
1:     Assert.assertTrue(zk2.lock());
1:     Assert.assertTrue(zk2.unlock());
1:   }
1: 
1:   /**
1:    * For finding the free port available.
1:    *
1:    * @return
1:    */
1:   private static int findFreePort() {
1:     ServerSocket socket = null;
1:     try {
1:       socket = new ServerSocket(0);
1:       socket.setReuseAddress(true);
1:       int port = socket.getLocalPort();
1:       try {
1:         socket.close();
1:       } catch (IOException e) {
1:         // Ignore IOException on close()
1:       }
1:       return port;
1:     } catch (Exception e) {
1:       // Ignore
1:     } finally {
1:       if (socket != null) {
1:         try {
1:           socket.close();
1:         } catch (IOException e) {
1:           throw new RuntimeException(e);
1:         }
1:       }
1:     }
1:     return 2181;
1:   }
1: }
============================================================================