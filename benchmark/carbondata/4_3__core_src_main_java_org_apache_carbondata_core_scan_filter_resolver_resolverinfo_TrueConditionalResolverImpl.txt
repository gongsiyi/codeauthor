1:c2e4eb2: /*
1:c2e4eb2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c2e4eb2:  * contributor license agreements.  See the NOTICE file distributed with
1:c2e4eb2:  * this work for additional information regarding copyright ownership.
1:c2e4eb2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c2e4eb2:  * (the "License"); you may not use this file except in compliance with
1:c2e4eb2:  * the License.  You may obtain a copy of the License at
2:c2e4eb2:  *
1:c2e4eb2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:c2e4eb2:  *
1:c2e4eb2:  * Unless required by applicable law or agreed to in writing, software
1:c2e4eb2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c2e4eb2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c2e4eb2:  * See the License for the specific language governing permissions and
1:c2e4eb2:  * limitations under the License.
2:c2e4eb2:  */
3:c2e4eb2: 
1:c2e4eb2: package org.apache.carbondata.core.scan.filter.resolver.resolverinfo;
1:c2e4eb2: 
1:c2e4eb2: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.Expression;
1:c2e4eb2: import org.apache.carbondata.core.scan.filter.intf.FilterExecuterType;
1:c2e4eb2: import org.apache.carbondata.core.scan.filter.resolver.ConditionalFilterResolverImpl;
1:c2e4eb2: 
1:c2e4eb2: /* The expression with If TRUE will be resolved setting all bits to TRUE. */
1:c2e4eb2: 
1:c2e4eb2: public class TrueConditionalResolverImpl extends ConditionalFilterResolverImpl {
1:c2e4eb2: 
1:c2e4eb2:   public TrueConditionalResolverImpl(Expression exp, boolean isExpressionResolve,
1:daa6465:       boolean isIncludeFilter) {
1:c2e4eb2: 
1:daa6465:     super(exp, isExpressionResolve, isIncludeFilter, false);
2:c2e4eb2:   }
1:c2e4eb2: 
1:2c0fa10:   @Override public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier) {
1:c2e4eb2:   }
1:c2e4eb2: 
2:c2e4eb2:   /**
1:c2e4eb2:    * This method will provide the executer type to the callee inorder to identify
1:c2e4eb2:    * the executer type for the filter resolution, Row level filter executer is a
1:c2e4eb2:    * special executer since it get all the rows of the specified filter dimension
1:c2e4eb2:    * and will be send to the spark for processing
1:c2e4eb2:    */
1:c2e4eb2:   @Override public FilterExecuterType getFilterExecuterType() {
1:c2e4eb2:     return FilterExecuterType.TRUE;
1:c2e4eb2:   }
1:c2e4eb2: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:dhatchayani
-------------------------------------------------------------------------------
commit:2c0fa10
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   @Override public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier) {
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.scan.filter.TableProvider;
/////////////////////////////////////////////////////////////////////////
0:   @Override public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier,
0:       TableProvider tableProvider) {
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1:       boolean isIncludeFilter) {
1:     super(exp, isExpressionResolve, isIncludeFilter, false);
/////////////////////////////////////////////////////////////////////////
author:sounakr
-------------------------------------------------------------------------------
commit:266c473
/////////////////////////////////////////////////////////////////////////
0:     super(exp, isExpressionResolve, isIncludeFilter, tableIdentifier, false);
commit:c2e4eb2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.filter.resolver.resolverinfo;
1: 
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.scan.expression.Expression;
1: import org.apache.carbondata.core.scan.filter.intf.FilterExecuterType;
1: import org.apache.carbondata.core.scan.filter.resolver.ConditionalFilterResolverImpl;
1: 
1: /* The expression with If TRUE will be resolved setting all bits to TRUE. */
1: 
1: public class TrueConditionalResolverImpl extends ConditionalFilterResolverImpl {
1: 
1:   public TrueConditionalResolverImpl(Expression exp, boolean isExpressionResolve,
0:       boolean isIncludeFilter, AbsoluteTableIdentifier tableIdentifier) {
1: 
0:     super(exp, isExpressionResolve, isIncludeFilter, tableIdentifier);
1:   }
1: 
0:   @Override
0:   public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier) {
1:   }
1: 
1:   /**
1:    * This method will provide the executer type to the callee inorder to identify
1:    * the executer type for the filter resolution, Row level filter executer is a
1:    * special executer since it get all the rows of the specified filter dimension
1:    * and will be send to the spark for processing
1:    */
1:   @Override public FilterExecuterType getFilterExecuterType() {
1:     return FilterExecuterType.TRUE;
1:   }
1: 
1:   /**
0:    * Method will the read filter expression corresponding to the resolver.
0:    * This method is required in row level executer inorder to evaluate the filter
0:    * expression against spark, as mentioned above row level is a special type
0:    * filter resolver.
1:    *
0:    * @return Expression
1:    */
0:   public Expression getFilterExpresion() {
0:     return exp;
1:   }
1: 
1: }
============================================================================