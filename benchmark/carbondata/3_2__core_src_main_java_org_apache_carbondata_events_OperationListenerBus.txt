1:4aa0f49: /*
1:4aa0f49:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4aa0f49:  * contributor license agreements.  See the NOTICE file distributed with
1:4aa0f49:  * this work for additional information regarding copyright ownership.
1:4aa0f49:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4aa0f49:  * (the "License"); you may not use this file except in compliance with
1:4aa0f49:  * the License.  You may obtain a copy of the License at
4:4aa0f49:  *
1:4aa0f49:  *    http://www.apache.org/licenses/LICENSE-2.0
1:4aa0f49:  *
1:4aa0f49:  * Unless required by applicable law or agreed to in writing, software
1:4aa0f49:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4aa0f49:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4aa0f49:  * See the License for the specific language governing permissions and
1:4aa0f49:  * limitations under the License.
4:4aa0f49:  */
4:4aa0f49: 
1:4aa0f49: package org.apache.carbondata.events;
1:4aa0f49: 
1:4aa0f49: import java.util.List;
1:4aa0f49: import java.util.Map;
1:4aa0f49: import java.util.concurrent.ConcurrentHashMap;
1:4aa0f49: import java.util.concurrent.CopyOnWriteArrayList;
1:4aa0f49: 
1:4aa0f49: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:4aa0f49: 
4:4aa0f49: /**
1:4aa0f49:  * An event bus which posts events to its listeners.
1:4aa0f49:  */
1:4aa0f49: public class OperationListenerBus {
1:4aa0f49: 
1:4aa0f49:   /**
1:4aa0f49:    * singleton instance
1:4aa0f49:    */
1:4aa0f49:   private static final OperationListenerBus INSTANCE = new OperationListenerBus();
1:4aa0f49: 
1:4aa0f49:   /**
1:4aa0f49:    * Event map to hold all listeners corresponding to an event
1:4aa0f49:    */
1:937868d:   protected Map<String, CopyOnWriteArrayList<OperationEventListener>> eventMap =
1:4aa0f49:       new ConcurrentHashMap<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:4aa0f49: 
1:4aa0f49:   /**
1:4aa0f49:    * @return
1:4aa0f49:    */
1:4aa0f49:   public static OperationListenerBus getInstance() {
1:4aa0f49:     return INSTANCE;
5:4aa0f49:   }
1:4aa0f49: 
1:4aa0f49:   /**
1:4aa0f49:    * Add a listener to listen events. This method is thread-safe and can be called in any thread.
1:4aa0f49:    *
1:4aa0f49:    * @param eventClass
2:4aa0f49:    * @param operationEventListener
1:4aa0f49:    */
1:cc0e6f1:   public OperationListenerBus addListener(Class<? extends Event> eventClass,
1:4aa0f49:       OperationEventListener operationEventListener) {
1:4aa0f49: 
1:4aa0f49:     String eventType = eventClass.getName();
1:937868d:     CopyOnWriteArrayList<OperationEventListener> operationEventListeners = eventMap.get(eventType);
1:4aa0f49:     if (null == operationEventListeners) {
1:4aa0f49:       operationEventListeners = new CopyOnWriteArrayList<>();
1:4aa0f49:       eventMap.put(eventType, operationEventListeners);
1:4aa0f49:     }
1:937868d:     // addIfAbsent will only add the listener if it is not already present in the List.
1:937868d:     operationEventListeners.addIfAbsent(operationEventListener);
1:cc0e6f1:     return INSTANCE;
1:4aa0f49:   }
1:4aa0f49: 
1:4aa0f49:   /**
2:4aa0f49:    * Notify all registered listeners on occurrence of an event
1:4aa0f49:    *
2:4aa0f49:    * @param event
1:4aa0f49:    * @param operationContext
1:4aa0f49:    */
1:4aa0f49:   public void fireEvent(Event event, OperationContext operationContext) throws Exception {
1:4aa0f49:     if (operationContext == null) {
1:4aa0f49:       throw new Exception("OperationContext cannot be null");
1:4aa0f49:     }
1:4aa0f49:     List<OperationEventListener> operationEventListeners = eventMap.get(event.getEventType());
2:4aa0f49:     if (null != operationEventListeners) {
1:4aa0f49:       for (OperationEventListener operationEventListener : operationEventListeners) {
1:4aa0f49:         operationEventListener.onEvent(event, operationContext);
1:4aa0f49:       }
1:4aa0f49:     }
1:4aa0f49:   }
1:4aa0f49: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:kunal642
-------------------------------------------------------------------------------
commit:937868d
/////////////////////////////////////////////////////////////////////////
1:   protected Map<String, CopyOnWriteArrayList<OperationEventListener>> eventMap =
/////////////////////////////////////////////////////////////////////////
1:     CopyOnWriteArrayList<OperationEventListener> operationEventListeners = eventMap.get(eventType);
1:     // addIfAbsent will only add the listener if it is not already present in the List.
1:     operationEventListeners.addIfAbsent(operationEventListener);
commit:cc0e6f1
/////////////////////////////////////////////////////////////////////////
1:   public OperationListenerBus addListener(Class<? extends Event> eventClass,
/////////////////////////////////////////////////////////////////////////
1:     return INSTANCE;
author:rahulforallp
-------------------------------------------------------------------------------
commit:4aa0f49
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.events;
1: 
1: import java.util.List;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: 
1: /**
1:  * An event bus which posts events to its listeners.
1:  */
1: public class OperationListenerBus {
1: 
1:   /**
1:    * singleton instance
1:    */
1:   private static final OperationListenerBus INSTANCE = new OperationListenerBus();
1: 
1:   /**
1:    * Event map to hold all listeners corresponding to an event
1:    */
0:   protected Map<String, List<OperationEventListener>> eventMap =
1:       new ConcurrentHashMap<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1: 
1:   /**
1:    * @return
1:    */
1:   public static OperationListenerBus getInstance() {
1:     return INSTANCE;
1:   }
1: 
1:   /**
1:    * Add a listener to listen events. This method is thread-safe and can be called in any thread.
1:    *
1:    * @param eventClass
1:    * @param operationEventListener
1:    */
0:   public void addListener(Class<? extends Event> eventClass,
1:       OperationEventListener operationEventListener) {
1: 
1:     String eventType = eventClass.getName();
0:     List<OperationEventListener> operationEventListeners = eventMap.get(eventType);
1:     if (null == operationEventListeners) {
1:       operationEventListeners = new CopyOnWriteArrayList<>();
1:       eventMap.put(eventType, operationEventListeners);
1:     }
0:     operationEventListeners.add(operationEventListener);
1:   }
1: 
1:   /**
0:    * Removes a given map from the event. This method is thread-safe and can be called
0:    * in any thread.
1:    *
0:    * @param eventType
1:    */
0:   public void removeEvent(String eventType) {
0:     eventMap.remove(eventType);
1:   }
1: 
1:   /**
0:    * Removes a given listener for an event. This method is thread-safe and can be called
0:    * in any thread.
1:    *
0:    * @param eventType
1:    * @param operationEventListener
1:    */
0:   public void removeListener(String eventType, OperationEventListener operationEventListener) {
0:     List<OperationEventListener> operationEventListeners = eventMap.get(eventType);
1:     if (null != operationEventListeners) {
0:       operationEventListeners.remove(operationEventListener);
1:     }
1:   }
1: 
1:   /**
1:    * Notify all registered listeners on occurrence of an event
0:    * Should be used for stateless events which cannot be mapped to a operation
1:    *
1:    * @param event
1:    */
0:   public void fireEvent(Event event) throws Exception {
0:     fireEvent(event, new OperationContext());
1:   }
1: 
1:   /**
1:    * Notify all registered listeners on occurrence of an event
1:    *
1:    * @param event
1:    * @param operationContext
1:    */
1:   public void fireEvent(Event event, OperationContext operationContext) throws Exception {
1:     if (operationContext == null) {
1:       throw new Exception("OperationContext cannot be null");
1:     }
1:     List<OperationEventListener> operationEventListeners = eventMap.get(event.getEventType());
1:     if (null != operationEventListeners) {
1:       for (OperationEventListener operationEventListener : operationEventListeners) {
1:         operationEventListener.onEvent(event, operationContext);
1:       }
1:     }
1:   }
1: }
============================================================================