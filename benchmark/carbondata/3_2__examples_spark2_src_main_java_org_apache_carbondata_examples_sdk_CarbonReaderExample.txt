1:f7c0670: /*
1:f7c0670:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f7c0670:  * contributor license agreements.  See the NOTICE file distributed with
1:f7c0670:  * this work for additional information regarding copyright ownership.
1:f7c0670:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f7c0670:  * (the "License"); you may not use this file except in compliance with
1:f7c0670:  * the License.  You may obtain a copy of the License at
1:f7c0670:  *
1:f7c0670:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f7c0670:  *
1:f7c0670:  * Unless required by applicable law or agreed to in writing, software
1:f7c0670:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f7c0670:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f7c0670:  * See the License for the specific language governing permissions and
1:f7c0670:  * limitations under the License.
1:f7c0670:  */
2:f7c0670: 
1:f7c0670: package org.apache.carbondata.examples.sdk;
1:f7c0670: 
1:f7c0670: import java.io.File;
1:56bf4e4: import java.io.FilenameFilter;
1:56bf4e4: import java.sql.Date;
1:56bf4e4: import java.sql.Timestamp;
1:f7c0670: 
1:f7c0670: import org.apache.commons.io.FileUtils;
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:f7c0670: 
1:f7c0670: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:f7c0670: import org.apache.carbondata.sdk.file.CarbonReader;
1:56bf4e4: import org.apache.carbondata.sdk.file.CarbonSchemaReader;
1:f7c0670: import org.apache.carbondata.sdk.file.CarbonWriter;
1:f7c0670: import org.apache.carbondata.sdk.file.Field;
1:f7c0670: import org.apache.carbondata.sdk.file.Schema;
1:f7c0670: 
1:f7c0670: /**
1:f7c0670:  * Example fo CarbonReader with close method
1:f7c0670:  * After readNextRow of CarbonReader, User should close the reader,
1:f7c0670:  * otherwise main will continue run some time
1:f7c0670:  */
1:f7c0670: public class CarbonReaderExample {
1:f7c0670:     public static void main(String[] args) {
1:f7c0670:         String path = "./testWriteFiles";
1:f7c0670:         try {
1:f7c0670:             FileUtils.deleteDirectory(new File(path));
1:f7c0670: 
1:56bf4e4:             Field[] fields = new Field[9];
1:56bf4e4:             fields[0] = new Field("stringField", DataTypes.STRING);
1:56bf4e4:             fields[1] = new Field("shortField", DataTypes.SHORT);
1:56bf4e4:             fields[2] = new Field("intField", DataTypes.INT);
1:56bf4e4:             fields[3] = new Field("longField", DataTypes.LONG);
1:56bf4e4:             fields[4] = new Field("doubleField", DataTypes.DOUBLE);
1:56bf4e4:             fields[5] = new Field("boolField", DataTypes.BOOLEAN);
1:56bf4e4:             fields[6] = new Field("dateField", DataTypes.DATE);
1:56bf4e4:             fields[7] = new Field("timeField", DataTypes.TIMESTAMP);
1:56bf4e4:             fields[8] = new Field("decimalField", DataTypes.createDecimalType(8, 2));
1:f7c0670: 
1:f7c0670:             CarbonWriter writer = CarbonWriter.builder()
1:56bf4e4:                 .outputPath(path)
1:8f1a029:                 .buildWriterForCSVInput(new Schema(fields), new Configuration(false));
1:f7c0670: 
1:f7c0670:             for (int i = 0; i < 10; i++) {
1:56bf4e4:                 String[] row2 = new String[]{
1:56bf4e4:                     "robot" + (i % 10),
1:56bf4e4:                     String.valueOf(i),
1:56bf4e4:                     String.valueOf(i),
1:56bf4e4:                     String.valueOf(Long.MAX_VALUE - i),
1:56bf4e4:                     String.valueOf((double) i / 2),
1:56bf4e4:                     String.valueOf(true),
1:56bf4e4:                     "2019-03-02",
1:56bf4e4:                     "2019-02-12 03:03:34",
1:56bf4e4:                     "12.345"
1:56bf4e4:                 };
1:56bf4e4:                 writer.write(row2);
1:f7c0670:             }
1:f7c0670:             writer.close();
1:f7c0670: 
1:56bf4e4:             File[] dataFiles = new File(path).listFiles(new FilenameFilter() {
1:56bf4e4:                 @Override
1:56bf4e4:                 public boolean accept(File dir, String name) {
1:56bf4e4:                     if (name == null) {
1:56bf4e4:                         return false;
1:56bf4e4:                     }
1:56bf4e4:                     return name.endsWith("carbonindex");
1:56bf4e4:                 }
1:56bf4e4:             });
1:56bf4e4:             if (dataFiles == null || dataFiles.length < 1) {
1:56bf4e4:                 throw new RuntimeException("Carbon index file not exists.");
1:56bf4e4:             }
1:56bf4e4:             Schema schema = CarbonSchemaReader
1:56bf4e4:                 .readSchemaInIndexFile(dataFiles[0].getAbsolutePath())
1:56bf4e4:                 .asOriginOrder();
1:56bf4e4:             // Transform the schema
1:56bf4e4:             String[] strings = new String[schema.getFields().length];
1:56bf4e4:             for (int i = 0; i < schema.getFields().length; i++) {
1:56bf4e4:                 strings[i] = (schema.getFields())[i].getFieldName();
1:56bf4e4:             }
1:56bf4e4: 
1:f7c0670:             // Read data
1:f7c0670:             CarbonReader reader = CarbonReader
1:56bf4e4:                 .builder(path, "_temp")
1:56bf4e4:                 .projection(strings)
1:8f1a029:                 .build(new Configuration(false));
1:f7c0670: 
1:f7c0670:             System.out.println("\nData:");
1:56bf4e4:             long day = 24L * 3600 * 1000;
1:56bf4e4:             int i = 0;
1:f7c0670:             while (reader.hasNext()) {
1:f7c0670:                 Object[] row = (Object[]) reader.readNextRow();
1:56bf4e4:                 System.out.println(String.format("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t",
1:56bf4e4:                     i, row[0], row[1], row[2], row[3], row[4], row[5],
1:56bf4e4:                     new Date((day * ((int) row[6]))), new Timestamp((long) row[7] / 1000), row[8]
1:56bf4e4:                 ));
1:56bf4e4:                 i++;
1:56bf4e4:             }
1:56bf4e4:             System.out.println("\nFinished");
1:56bf4e4: 
1:56bf4e4:             // Read data
1:56bf4e4:             CarbonReader reader2 = CarbonReader
1:56bf4e4:                 .builder(path, "_temp")
1:8f1a029:                 .build(new Configuration(false));
1:56bf4e4: 
1:56bf4e4:             System.out.println("\nData:");
1:56bf4e4:             i = 0;
1:56bf4e4:             while (reader2.hasNext()) {
1:56bf4e4:               Object[] row = (Object[]) reader2.readNextRow();
1:56bf4e4:               System.out.println(String.format("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t",
1:56bf4e4:                   i, row[0], new Date((day * ((int) row[1]))), new Timestamp((long) row[2] / 1000),
1:56bf4e4:                   row[3], row[4], row[5], row[6], row[7], row[8]
1:56bf4e4:               ));
1:56bf4e4:               i++;
1:f7c0670:             }
1:f7c0670:             System.out.println("\nFinished");
1:f7c0670:             reader.close();
1:f7c0670:             FileUtils.deleteDirectory(new File(path));
1:56bf4e4:         } catch (Throwable e) {
1:f7c0670:             e.printStackTrace();
1:56bf4e4:             System.out.println(e.getMessage());
1:f7c0670:         }
1:f7c0670:     }
1:f7c0670: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
/////////////////////////////////////////////////////////////////////////
1:                 .buildWriterForCSVInput(new Schema(fields), new Configuration(false));
/////////////////////////////////////////////////////////////////////////
1:                 .build(new Configuration(false));
/////////////////////////////////////////////////////////////////////////
1:                 .build(new Configuration(false));
commit:26eb2d0
/////////////////////////////////////////////////////////////////////////
0:                     .buildWriterForCSVInput(new Schema(fields));
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:5f68a79
/////////////////////////////////////////////////////////////////////////
commit:74770aa
/////////////////////////////////////////////////////////////////////////
author:xubo245
-------------------------------------------------------------------------------
commit:56bf4e4
/////////////////////////////////////////////////////////////////////////
1: import java.io.FilenameFilter;
1: import java.sql.Date;
1: import java.sql.Timestamp;
1: import org.apache.carbondata.sdk.file.CarbonSchemaReader;
/////////////////////////////////////////////////////////////////////////
1:             Field[] fields = new Field[9];
1:             fields[0] = new Field("stringField", DataTypes.STRING);
1:             fields[1] = new Field("shortField", DataTypes.SHORT);
1:             fields[2] = new Field("intField", DataTypes.INT);
1:             fields[3] = new Field("longField", DataTypes.LONG);
1:             fields[4] = new Field("doubleField", DataTypes.DOUBLE);
1:             fields[5] = new Field("boolField", DataTypes.BOOLEAN);
1:             fields[6] = new Field("dateField", DataTypes.DATE);
1:             fields[7] = new Field("timeField", DataTypes.TIMESTAMP);
1:             fields[8] = new Field("decimalField", DataTypes.createDecimalType(8, 2));
1:                 .outputPath(path)
0:                 .buildWriterForCSVInput(new Schema(fields));
1:                 String[] row2 = new String[]{
1:                     "robot" + (i % 10),
1:                     String.valueOf(i),
1:                     String.valueOf(i),
1:                     String.valueOf(Long.MAX_VALUE - i),
1:                     String.valueOf((double) i / 2),
1:                     String.valueOf(true),
1:                     "2019-03-02",
1:                     "2019-02-12 03:03:34",
1:                     "12.345"
1:                 };
1:                 writer.write(row2);
1:             File[] dataFiles = new File(path).listFiles(new FilenameFilter() {
1:                 @Override
1:                 public boolean accept(File dir, String name) {
1:                     if (name == null) {
1:                         return false;
1:                     }
1:                     return name.endsWith("carbonindex");
1:                 }
1:             });
1:             if (dataFiles == null || dataFiles.length < 1) {
1:                 throw new RuntimeException("Carbon index file not exists.");
1:             }
1:             Schema schema = CarbonSchemaReader
1:                 .readSchemaInIndexFile(dataFiles[0].getAbsolutePath())
1:                 .asOriginOrder();
1:             // Transform the schema
1:             String[] strings = new String[schema.getFields().length];
1:             for (int i = 0; i < schema.getFields().length; i++) {
1:                 strings[i] = (schema.getFields())[i].getFieldName();
1:             }
1: 
1:                 .builder(path, "_temp")
1:                 .projection(strings)
0:                 .build();
1:             long day = 24L * 3600 * 1000;
1:             int i = 0;
1:                 System.out.println(String.format("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t",
1:                     i, row[0], row[1], row[2], row[3], row[4], row[5],
1:                     new Date((day * ((int) row[6]))), new Timestamp((long) row[7] / 1000), row[8]
1:                 ));
1:                 i++;
1:             }
1:             System.out.println("\nFinished");
1: 
1:             // Read data
1:             CarbonReader reader2 = CarbonReader
1:                 .builder(path, "_temp")
0:                 .projectAllColumns()
0:                 .build();
1: 
1:             System.out.println("\nData:");
1:             i = 0;
1:             while (reader2.hasNext()) {
1:               Object[] row = (Object[]) reader2.readNextRow();
1:               System.out.println(String.format("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t",
1:                   i, row[0], new Date((day * ((int) row[1]))), new Timestamp((long) row[2] / 1000),
1:                   row[3], row[4], row[5], row[6], row[7], row[8]
1:               ));
1:               i++;
1:         } catch (Throwable e) {
1:             System.out.println(e.getMessage());
commit:f7c0670
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.examples.sdk;
1: 
1: import java.io.File;
1: 
1: import org.apache.commons.io.FileUtils;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.sdk.file.CarbonReader;
1: import org.apache.carbondata.sdk.file.CarbonWriter;
1: import org.apache.carbondata.sdk.file.Field;
1: import org.apache.carbondata.sdk.file.Schema;
1: 
1: 
1: /**
1:  * Example fo CarbonReader with close method
1:  * After readNextRow of CarbonReader, User should close the reader,
1:  * otherwise main will continue run some time
1:  */
1: public class CarbonReaderExample {
1:     public static void main(String[] args) {
1:         String path = "./testWriteFiles";
1:         try {
1:             FileUtils.deleteDirectory(new File(path));
1: 
0:             Field[] fields = new Field[2];
0:             fields[0] = new Field("name", DataTypes.STRING);
0:             fields[1] = new Field("age", DataTypes.INT);
1: 
1:             CarbonWriter writer = CarbonWriter.builder()
0:                     .withSchema(new Schema(fields))
0:                     .isTransactionalTable(true)
0:                     .outputPath(path)
0:                     .persistSchemaFile(true)
0:                     .buildWriterForCSVInput();
1: 
1:             for (int i = 0; i < 10; i++) {
0:                 writer.write(new String[]{"robot" + (i % 10), String.valueOf(i)});
1:             }
1:             writer.close();
1: 
1:             // Read data
1:             CarbonReader reader = CarbonReader
0:                     .builder(path, "_temp")
0:                     .projection(new String[]{"name", "age"})
0:                     .build();
1: 
1:             System.out.println("\nData:");
1:             while (reader.hasNext()) {
1:                 Object[] row = (Object[]) reader.readNextRow();
0:                 System.out.println(row[0] + " " + row[1]);
1:             }
1:             System.out.println("\nFinished");
1:             reader.close();
1:             FileUtils.deleteDirectory(new File(path));
0:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:     }
1: }
============================================================================