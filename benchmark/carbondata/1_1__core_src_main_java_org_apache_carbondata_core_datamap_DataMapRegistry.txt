1:89a12af: /*
1:89a12af:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:89a12af:  * contributor license agreements.  See the NOTICE file distributed with
1:89a12af:  * this work for additional information regarding copyright ownership.
1:89a12af:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:89a12af:  * (the "License"); you may not use this file except in compliance with
1:89a12af:  * the License.  You may obtain a copy of the License at
1:89a12af:  *
1:89a12af:  *    http://www.apache.org/licenses/LICENSE-2.0
1:89a12af:  *
1:89a12af:  * Unless required by applicable law or agreed to in writing, software
1:89a12af:  * distributed under the License is distributed on an "AS IS" BASIS,
1:89a12af:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:89a12af:  * See the License for the specific language governing permissions and
1:89a12af:  * limitations under the License.
1:89a12af:  */
1:89a12af: 
1:89a12af: package org.apache.carbondata.core.datamap;
1:89a12af: 
1:9db662a: import java.lang.reflect.InvocationTargetException;
1:89a12af: import java.util.Map;
1:89a12af: import java.util.Objects;
1:89a12af: import java.util.concurrent.ConcurrentHashMap;
1:89a12af: 
1:fc2a7eb: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:fc2a7eb: import org.apache.carbondata.common.annotations.InterfaceStability;
1:9db662a: import org.apache.carbondata.common.exceptions.MetadataProcessException;
1:9db662a: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1:9db662a: import org.apache.carbondata.core.datamap.dev.DataMap;
1:9db662a: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
1:9db662a: import org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:fc2a7eb: 
1:fc2a7eb: /**
1:fc2a7eb:  * Developer can register a datamap implementation with a short name.
1:fc2a7eb:  * After registration, user can use short name to create the datamap, like
1:fc2a7eb:  * <p>
1:fc2a7eb:  * {@code
1:fc2a7eb:  *  CREATE DATAMAP dm ON TABLE table
1:fc2a7eb:  *  USING 'short-name-of-the-datamap'
1:fc2a7eb:  * }
1:fc2a7eb:  * otherwise, user should use the class name of the datamap implementation to create the datamap
1:9db662a:  * (subclass of {@link DataMapFactory})
1:fc2a7eb:  * <p>
1:fc2a7eb:  * {@code
1:fc2a7eb:  *  CREATE DATAMAP dm ON TABLE table
1:fc2a7eb:  *  USING 'class-name-of-the-datamap'
1:fc2a7eb:  * }
1:fc2a7eb:  */
1:fc2a7eb: @InterfaceAudience.Developer("DataMap")
1:fc2a7eb: @InterfaceStability.Evolving
1:89a12af: public class DataMapRegistry {
1:89a12af:   private static Map<String, String> shortNameToClassName = new ConcurrentHashMap<>();
1:89a12af: 
1:9db662a:   private static void registerDataMap(String datamapClassName, String shortName) {
1:89a12af:     Objects.requireNonNull(datamapClassName);
1:89a12af:     Objects.requireNonNull(shortName);
1:89a12af:     shortNameToClassName.put(shortName, datamapClassName);
1:89a12af:   }
1:89a12af: 
1:9db662a:   private static String getDataMapClassName(String shortName) {
1:89a12af:     Objects.requireNonNull(shortName);
1:89a12af:     return shortNameToClassName.get(shortName);
1:89a12af:   }
1:9db662a: 
1:9db662a:   public static DataMapFactory<? extends DataMap> getDataMapFactoryByShortName(
1:9db662a:       CarbonTable table, DataMapSchema dataMapSchema) throws MalformedDataMapCommandException {
1:9db662a:     String providerName = dataMapSchema.getProviderName();
1:9db662a:     try {
1:9db662a:       registerDataMap(
1:9db662a:           DataMapClassProvider.getDataMapProviderOnName(providerName).getClassName(),
1:9db662a:           DataMapClassProvider.getDataMapProviderOnName(providerName).getShortName());
1:9db662a:     } catch (UnsupportedOperationException ex) {
1:9db662a:       throw new MalformedDataMapCommandException("DataMap '" + providerName + "' not found", ex);
1:9db662a:     }
1:9db662a:     DataMapFactory<? extends DataMap> dataMapFactory;
1:9db662a:     String className = getDataMapClassName(providerName.toLowerCase());
1:9db662a:     if (className != null) {
1:9db662a:       try {
1:9db662a:         dataMapFactory = (DataMapFactory<? extends DataMap>)
1:9db662a:             Class.forName(className).getConstructors()[0].newInstance(table, dataMapSchema);
1:9db662a:       } catch (ClassNotFoundException ex) {
1:9db662a:         throw new MalformedDataMapCommandException("DataMap '" + providerName + "' not found", ex);
1:9db662a:       } catch (InvocationTargetException ex) {
1:9db662a:         throw new MalformedDataMapCommandException(ex.getTargetException().getMessage());
1:9db662a:       } catch (InstantiationException | IllegalAccessException | IllegalArgumentException ex) {
1:9db662a:         throw new MetadataProcessException(
1:9db662a:             "failed to create DataMap '" + providerName + "': " + ex.getMessage(), ex);
1:9db662a:       }
1:9db662a:     } else {
1:9db662a:       throw new MalformedDataMapCommandException("DataMap '" + providerName + "' not found");
1:9db662a:     }
1:9db662a:     return dataMapFactory;
1:9db662a:   }
1:89a12af: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationTargetException;
1: import org.apache.carbondata.common.exceptions.MetadataProcessException;
1: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1: import org.apache.carbondata.core.datamap.dev.DataMap;
1: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
1: import org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
/////////////////////////////////////////////////////////////////////////
1:  * (subclass of {@link DataMapFactory})
/////////////////////////////////////////////////////////////////////////
1:   private static void registerDataMap(String datamapClassName, String shortName) {
1:   private static String getDataMapClassName(String shortName) {
1: 
1:   public static DataMapFactory<? extends DataMap> getDataMapFactoryByShortName(
1:       CarbonTable table, DataMapSchema dataMapSchema) throws MalformedDataMapCommandException {
1:     String providerName = dataMapSchema.getProviderName();
1:     try {
1:       registerDataMap(
1:           DataMapClassProvider.getDataMapProviderOnName(providerName).getClassName(),
1:           DataMapClassProvider.getDataMapProviderOnName(providerName).getShortName());
1:     } catch (UnsupportedOperationException ex) {
1:       throw new MalformedDataMapCommandException("DataMap '" + providerName + "' not found", ex);
1:     }
1:     DataMapFactory<? extends DataMap> dataMapFactory;
1:     String className = getDataMapClassName(providerName.toLowerCase());
1:     if (className != null) {
1:       try {
1:         dataMapFactory = (DataMapFactory<? extends DataMap>)
1:             Class.forName(className).getConstructors()[0].newInstance(table, dataMapSchema);
1:       } catch (ClassNotFoundException ex) {
1:         throw new MalformedDataMapCommandException("DataMap '" + providerName + "' not found", ex);
1:       } catch (InvocationTargetException ex) {
1:         throw new MalformedDataMapCommandException(ex.getTargetException().getMessage());
1:       } catch (InstantiationException | IllegalAccessException | IllegalArgumentException ex) {
1:         throw new MetadataProcessException(
1:             "failed to create DataMap '" + providerName + "': " + ex.getMessage(), ex);
1:       }
1:     } else {
1:       throw new MalformedDataMapCommandException("DataMap '" + providerName + "' not found");
1:     }
1:     return dataMapFactory;
1:   }
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.annotations.InterfaceStability;
1: 
1: /**
1:  * Developer can register a datamap implementation with a short name.
1:  * After registration, user can use short name to create the datamap, like
1:  * <p>
1:  * {@code
1:  *  CREATE DATAMAP dm ON TABLE table
1:  *  USING 'short-name-of-the-datamap'
1:  * }
1:  * otherwise, user should use the class name of the datamap implementation to create the datamap
0:  * (subclass of {@link org.apache.carbondata.core.datamap.dev.DataMapFactory})
1:  * <p>
1:  * {@code
1:  *  CREATE DATAMAP dm ON TABLE table
1:  *  USING 'class-name-of-the-datamap'
1:  * }
1:  */
1: @InterfaceAudience.Developer("DataMap")
1: @InterfaceStability.Evolving
commit:89a12af
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datamap;
1: 
1: import java.util.Map;
1: import java.util.Objects;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: public class DataMapRegistry {
1:   private static Map<String, String> shortNameToClassName = new ConcurrentHashMap<>();
1: 
0:   public static void registerDataMap(String datamapClassName, String shortName) {
1:     Objects.requireNonNull(datamapClassName);
1:     Objects.requireNonNull(shortName);
1:     shortNameToClassName.put(shortName, datamapClassName);
1:   }
1: 
0:   public static String getDataMapClassName(String shortName) {
1:     Objects.requireNonNull(shortName);
1:     return shortNameToClassName.get(shortName);
1:   }
1: }
============================================================================