1:e740182: /*
1:e740182:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e740182:  * contributor license agreements.  See the NOTICE file distributed with
1:e740182:  * this work for additional information regarding copyright ownership.
1:e740182:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e740182:  * (the "License"); you may not use this file except in compliance with
1:e740182:  * the License.  You may obtain a copy of the License at
1:e740182:  *
1:e740182:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e740182:  *
1:e740182:  * Unless required by applicable law or agreed to in writing, software
1:e740182:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e740182:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e740182:  * See the License for the specific language governing permissions and
1:e740182:  * limitations under the License.
1:e740182:  */
1:e740182: 
1:e740182: package org.apache.carbondata.sdk.file;
1:e740182: 
1:e740182: import java.io.DataInputStream;
1:e740182: import java.io.IOException;
1:e740182: import java.util.ArrayList;
1:e740182: import java.util.List;
1:e740182: 
1:e740182: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1:e740182: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:e740182: import org.apache.carbondata.core.metadata.converter.SchemaConverter;
1:e740182: import org.apache.carbondata.core.metadata.converter.ThriftWrapperSchemaConverterImpl;
1:e740182: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:e740182: import org.apache.carbondata.core.reader.CarbonHeaderReader;
1:e740182: import org.apache.carbondata.core.reader.CarbonIndexFileReader;
1:e740182: import org.apache.carbondata.core.util.CarbonUtil;
1:e740182: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:e740182: 
1:e740182: import static org.apache.carbondata.core.util.CarbonUtil.thriftColumnSchemaToWrapperColumnSchema;
1:e740182: 
1:e740182: /**
1:e740182:  * Schema reader for carbon files, including carbondata file, carbonindex file, and schema file
1:e740182:  */
1:e740182: public class CarbonSchemaReader {
1:e740182: 
1:e740182:   /**
1:e740182:    * Read schema file and return the schema
1:e740182:    *
1:e740182:    * @param schemaFilePath complete path including schema file name
1:e740182:    * @return schema object
1:e740182:    * @throws IOException
1:e740182:    */
1:e740182:   public static Schema readSchemaInSchemaFile(String schemaFilePath) throws IOException {
1:e740182:     org.apache.carbondata.format.TableInfo tableInfo = CarbonUtil.readSchemaFile(schemaFilePath);
1:e740182:     SchemaConverter schemaConverter = new ThriftWrapperSchemaConverterImpl();
1:e740182:     List<ColumnSchema> schemaList = schemaConverter
1:e740182:         .fromExternalToWrapperTableInfo(tableInfo, "", "", "")
1:e740182:         .getFactTable()
1:e740182:         .getListOfColumns();
1:e740182:     return new Schema(schemaList);
1:e740182:   }
1:e740182: 
1:e740182:   /**
1:e740182:    * Read carbondata file and return the schema
1:e740182:    *
1:e740182:    * @param dataFilePath complete path including carbondata file name
1:e740182:    * @return Schema object
1:e740182:    * @throws IOException
1:e740182:    */
1:e740182:   public static Schema readSchemaInDataFile(String dataFilePath) throws IOException {
1:e740182:     CarbonHeaderReader reader = new CarbonHeaderReader(dataFilePath);
1:e740182:     return new Schema(reader.readSchema());
1:e740182:   }
1:e740182: 
1:e740182:   /**
1:e740182:    * Read carbonindex file and return the schema
1:e740182:    *
1:e740182:    * @param indexFilePath complete path including index file name
1:e740182:    * @return schema object
1:e740182:    * @throws IOException
1:e740182:    */
1:e740182:   public static Schema readSchemaInIndexFile(String indexFilePath) throws IOException {
1:e740182:     CarbonFile indexFile =
1:e740182:         FileFactory.getCarbonFile(indexFilePath, FileFactory.getFileType(indexFilePath));
1:e740182:     if (!indexFile.getName().endsWith(CarbonTablePath.INDEX_FILE_EXT)) {
1:e740182:       throw new IOException("Not an index file name");
1:e740182:     }
1:e740182:     // read schema from the first index file
1:e740182:     DataInputStream dataInputStream =
1:e740182:         FileFactory.getDataInputStream(indexFilePath, FileFactory.getFileType(indexFilePath));
1:e740182:     byte[] bytes = new byte[(int) indexFile.getSize()];
1:e740182:     try {
1:e740182:       //get the file in byte buffer
1:e740182:       dataInputStream.readFully(bytes);
1:e740182:       CarbonIndexFileReader indexReader = new CarbonIndexFileReader();
1:e740182:       // read from byte buffer.
1:e740182:       indexReader.openThriftReader(bytes);
1:e740182:       // get the index header
1:e740182:       org.apache.carbondata.format.IndexHeader readIndexHeader = indexReader.readIndexHeader();
1:e740182:       List<ColumnSchema> columnSchemaList = new ArrayList<ColumnSchema>();
1:e740182:       List<org.apache.carbondata.format.ColumnSchema> table_columns =
1:e740182:           readIndexHeader.getTable_columns();
1:e740182:       for (org.apache.carbondata.format.ColumnSchema columnSchema : table_columns) {
1:e740182:         columnSchemaList.add(thriftColumnSchemaToWrapperColumnSchema(columnSchema));
1:e740182:       }
1:e740182:       return new Schema(columnSchemaList);
1:e740182:     } finally {
1:e740182:       dataInputStream.close();
1:e740182:     }
1:e740182:   }
1:e740182: 
1:e740182: }
============================================================================
author:xubo245
-------------------------------------------------------------------------------
commit:e740182
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.sdk.file;
1: 
1: import java.io.DataInputStream;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.metadata.converter.SchemaConverter;
1: import org.apache.carbondata.core.metadata.converter.ThriftWrapperSchemaConverterImpl;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: import org.apache.carbondata.core.reader.CarbonHeaderReader;
1: import org.apache.carbondata.core.reader.CarbonIndexFileReader;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: 
1: import static org.apache.carbondata.core.util.CarbonUtil.thriftColumnSchemaToWrapperColumnSchema;
1: 
1: /**
1:  * Schema reader for carbon files, including carbondata file, carbonindex file, and schema file
1:  */
1: public class CarbonSchemaReader {
1: 
1:   /**
1:    * Read schema file and return the schema
1:    *
1:    * @param schemaFilePath complete path including schema file name
1:    * @return schema object
1:    * @throws IOException
1:    */
1:   public static Schema readSchemaInSchemaFile(String schemaFilePath) throws IOException {
1:     org.apache.carbondata.format.TableInfo tableInfo = CarbonUtil.readSchemaFile(schemaFilePath);
1:     SchemaConverter schemaConverter = new ThriftWrapperSchemaConverterImpl();
1:     List<ColumnSchema> schemaList = schemaConverter
1:         .fromExternalToWrapperTableInfo(tableInfo, "", "", "")
1:         .getFactTable()
1:         .getListOfColumns();
1:     return new Schema(schemaList);
1:   }
1: 
1:   /**
1:    * Read carbondata file and return the schema
1:    *
1:    * @param dataFilePath complete path including carbondata file name
1:    * @return Schema object
1:    * @throws IOException
1:    */
1:   public static Schema readSchemaInDataFile(String dataFilePath) throws IOException {
1:     CarbonHeaderReader reader = new CarbonHeaderReader(dataFilePath);
1:     return new Schema(reader.readSchema());
1:   }
1: 
1:   /**
1:    * Read carbonindex file and return the schema
1:    *
1:    * @param indexFilePath complete path including index file name
1:    * @return schema object
1:    * @throws IOException
1:    */
1:   public static Schema readSchemaInIndexFile(String indexFilePath) throws IOException {
1:     CarbonFile indexFile =
1:         FileFactory.getCarbonFile(indexFilePath, FileFactory.getFileType(indexFilePath));
1:     if (!indexFile.getName().endsWith(CarbonTablePath.INDEX_FILE_EXT)) {
1:       throw new IOException("Not an index file name");
1:     }
1:     // read schema from the first index file
1:     DataInputStream dataInputStream =
1:         FileFactory.getDataInputStream(indexFilePath, FileFactory.getFileType(indexFilePath));
1:     byte[] bytes = new byte[(int) indexFile.getSize()];
1:     try {
1:       //get the file in byte buffer
1:       dataInputStream.readFully(bytes);
1:       CarbonIndexFileReader indexReader = new CarbonIndexFileReader();
1:       // read from byte buffer.
1:       indexReader.openThriftReader(bytes);
1:       // get the index header
1:       org.apache.carbondata.format.IndexHeader readIndexHeader = indexReader.readIndexHeader();
1:       List<ColumnSchema> columnSchemaList = new ArrayList<ColumnSchema>();
1:       List<org.apache.carbondata.format.ColumnSchema> table_columns =
1:           readIndexHeader.getTable_columns();
1:       for (org.apache.carbondata.format.ColumnSchema columnSchema : table_columns) {
1:         columnSchemaList.add(thriftColumnSchemaToWrapperColumnSchema(columnSchema));
1:       }
1:       return new Schema(columnSchemaList);
1:     } finally {
1:       dataInputStream.close();
1:     }
1:   }
1: 
1: }
============================================================================