1:1d827c7: /*
1:1d827c7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1d827c7:  * contributor license agreements.  See the NOTICE file distributed with
1:1d827c7:  * this work for additional information regarding copyright ownership.
1:1d827c7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1d827c7:  * (the "License"); you may not use this file except in compliance with
1:1d827c7:  * the License.  You may obtain a copy of the License at
1:1d827c7:  *
1:1d827c7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:1d827c7:  *
1:1d827c7:  * Unless required by applicable law or agreed to in writing, software
1:1d827c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1d827c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1d827c7:  * See the License for the specific language governing permissions and
1:1d827c7:  * limitations under the License.
2:1d827c7:  */
1:1d827c7: 
1:1d827c7: package org.apache.carbondata.sdk.file;
1:1d827c7: 
1:1d827c7: import java.io.File;
1:1d827c7: import java.io.FileFilter;
1:1d827c7: import java.io.IOException;
1:526e3bf: import java.nio.ByteBuffer;
1:526e3bf: import java.util.LinkedList;
1:526e3bf: import java.util.List;
1:1d827c7: 
1:9a25dc6: import org.apache.carbondata.common.exceptions.sql.InvalidLoadOptionException;
1:1d827c7: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:526e3bf: import org.apache.carbondata.core.datastore.FileReader;
1:526e3bf: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1:526e3bf: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:1d827c7: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:bea277f: import org.apache.carbondata.core.metadata.schema.table.DiskBasedDMSchemaStorageProvider;
1:526e3bf: import org.apache.carbondata.core.reader.CarbonFooterReaderV3;
1:bea277f: import org.apache.carbondata.core.util.CarbonProperties;
1:1d827c7: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:526e3bf: import org.apache.carbondata.format.FileFooter3;
1:1d827c7: 
1:1d827c7: import org.apache.commons.io.FileUtils;
1:cf55028: import org.junit.After;
1:1d827c7: import org.junit.Assert;
1:cf55028: import org.junit.Before;
1:1d827c7: import org.junit.Test;
1:1d827c7: 
1:6cb6f83: /**
1:1d827c7:  * Test suite for {@link CSVCarbonWriter}
1:6cb6f83:  */
1:e39b0a1: public class CSVCarbonWriterTest {
1:1d827c7: 
1:cf55028:   @Before
1:cf55028:   public void cleanFile() {
1:bea277f:     String path = null;
1:bea277f:     try {
1:bea277f:       path = new File(CSVCarbonWriterTest.class.getResource("/").getPath() + "../")
1:bea277f:           .getCanonicalPath().replaceAll("\\\\", "/");
1:1d827c7:     } catch (IOException e) {
1:bea277f:       assert (false);
4:1d827c7:     }
1:bea277f:     CarbonProperties.getInstance()
1:bea277f:         .addProperty(CarbonCommonConstants.CARBON_SYSTEM_FOLDER_LOCATION, path);
1:cf55028:     assert (TestUtil.cleanMdtFile());
1:6cb6f83:   }
1:6cb6f83: 
1:cf55028:   @After
1:cf55028:   public void verifyDMFile() {
1:cf55028:     assert (!TestUtil.verifyMdtFile());
1:6cb6f83:   }
1:6cb6f83: 
1:1d827c7:   @Test
1:1d827c7:   public void testWriteFiles() throws IOException {
1:df5d7a9:     String path = "./testWriteFiles";
1:df5d7a9:     FileUtils.deleteDirectory(new File(path));
1:df5d7a9: 
1:df5d7a9:     Field[] fields = new Field[2];
1:df5d7a9:     fields[0] = new Field("name", DataTypes.STRING);
1:df5d7a9:     fields[1] = new Field("age", DataTypes.INT);
1:df5d7a9: 
1:f910cfa:     TestUtil.writeFilesAndVerify(new Schema(fields), path);
1:df5d7a9: 
1:df5d7a9:     FileUtils.deleteDirectory(new File(path));
1:df5d7a9:   }
1:df5d7a9: 
1:df5d7a9:   @Test
1:1d827c7:   public void testWriteFilesJsonSchema() throws IOException {
1:1d827c7:     String path = "./testWriteFilesJsonSchema";
1:1d827c7:     FileUtils.deleteDirectory(new File(path));
1:df5d7a9: 
1:1d827c7:     String schema = new StringBuilder()
1:1d827c7:         .append("[ \n")
1:1d827c7:         .append("   {\"name\":\"string\"},\n")
1:1d827c7:         .append("   {\"age\":\"int\"},\n")
1:1d827c7:         .append("   {\"height\":\"double\"}\n")
1:1d827c7:         .append("]")
1:1d827c7:         .toString();
1:df5d7a9: 
1:f910cfa:     TestUtil.writeFilesAndVerify(Schema.parseJson(schema), path);
1:df5d7a9: 
1:1d827c7:     FileUtils.deleteDirectory(new File(path));
1:df5d7a9:   }
1:1d827c7: 
1:1d827c7:   @Test
1:6cb6f83:   public void testAllPrimitiveDataType() throws IOException {
1:1613471:     // TODO: write all data type and read by CarbonRecordReader to verify the content
1:6cb6f83:     String path = "./testWriteFiles";
1:6cb6f83:     FileUtils.deleteDirectory(new File(path));
1:6cb6f83: 
1:6cb6f83:     Field[] fields = new Field[9];
1:6cb6f83:     fields[0] = new Field("stringField", DataTypes.STRING);
1:6cb6f83:     fields[1] = new Field("intField", DataTypes.INT);
1:6cb6f83:     fields[2] = new Field("shortField", DataTypes.SHORT);
1:6cb6f83:     fields[3] = new Field("longField", DataTypes.LONG);
1:6cb6f83:     fields[4] = new Field("doubleField", DataTypes.DOUBLE);
1:6cb6f83:     fields[5] = new Field("boolField", DataTypes.BOOLEAN);
1:6cb6f83:     fields[6] = new Field("dateField", DataTypes.DATE);
1:6cb6f83:     fields[7] = new Field("timeField", DataTypes.TIMESTAMP);
1:6cb6f83:     fields[8] = new Field("decimalField", DataTypes.createDecimalType(8, 2));
1:6cb6f83: 
1:6cb6f83:     try {
1:6cb6f83:       CarbonWriterBuilder builder = CarbonWriter.builder()
1:b7b8073:           .isTransactionalTable(true)
1:6cb6f83:           .outputPath(path);
1:6cb6f83: 
1:8f1a029:       CarbonWriter writer = builder.buildWriterForCSVInput(new Schema(fields), TestUtil.configuration);
1:6cb6f83: 
1:6cb6f83:       for (int i = 0; i < 100; i++) {
1:6cb6f83:         String[] row = new String[]{
1:6cb6f83:             "robot" + (i % 10),
1:6cb6f83:             String.valueOf(i),
1:6cb6f83:             String.valueOf(i),
1:6cb6f83:             String.valueOf(Long.MAX_VALUE - i),
1:6cb6f83:             String.valueOf((double) i / 2),
1:6cb6f83:             String.valueOf(true),
1:6cb6f83:             "2019-03-02",
1:6cb6f83:             "2019-02-12 03:03:34"
1:6cb6f83:         };
1:6cb6f83:         writer.write(row);
1:df5d7a9:       }
1:6cb6f83:       writer.close();
1:6cb6f83:     } catch (Exception e) {
1:6cb6f83:       e.printStackTrace();
1:6cb6f83:       Assert.fail(e.getMessage());
1:6cb6f83:     }
1:6cb6f83: 
1:6cb6f83:     File segmentFolder = new File(CarbonTablePath.getSegmentPath(path, "null"));
1:6cb6f83:     Assert.assertTrue(segmentFolder.exists());
1:1d827c7: 
1:6cb6f83:     File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
1:6cb6f83:       @Override public boolean accept(File pathname) {
1:6cb6f83:         return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
1:6cb6f83:       }
1:df5d7a9:     });
1:6cb6f83:     Assert.assertNotNull(dataFiles);
1:6cb6f83:     Assert.assertTrue(dataFiles.length > 0);
1:6cb6f83: 
1:6cb6f83:     FileUtils.deleteDirectory(new File(path));
1:6cb6f83:   }
1:6cb6f83: 
1:1d827c7:   @Test
1:6cb6f83:   public void test2Blocklet() throws IOException {
1:6cb6f83:     String path = "./testWriteFiles";
1:6cb6f83:     FileUtils.deleteDirectory(new File(path));
1:6cb6f83: 
1:6cb6f83:     Field[] fields = new Field[2];
1:6cb6f83:     fields[0] = new Field("name", DataTypes.STRING);
1:6cb6f83:     fields[1] = new Field("age", DataTypes.INT);
1:6cb6f83: 
1:4b8dc0a:     TestUtil.writeFilesAndVerify(1000 * 1000, new Schema(fields), path, null, false, 1, 100, false);
1:6cb6f83: 
1:6cb6f83:     // TODO: implement reader to verify the number of blocklet in the file
1:6cb6f83: 
1:6cb6f83:     FileUtils.deleteDirectory(new File(path));
1:6cb6f83:   }
1:6cb6f83: 
1:1d827c7:   @Test
1:6cb6f83:   public void test2Block() throws IOException {
1:6cb6f83:     String path = "./testWriteFiles";
1:6cb6f83:     FileUtils.deleteDirectory(new File(path));
1:6cb6f83: 
1:6cb6f83:     Field[] fields = new Field[2];
1:6cb6f83:     fields[0] = new Field("name", DataTypes.STRING);
1:6cb6f83:     fields[1] = new Field("age", DataTypes.INT);
1:6cb6f83: 
1:4b8dc0a:     TestUtil.writeFilesAndVerify(1000 * 1000, new Schema(fields), path, null, false, 2, 2, true);
1:6cb6f83: 
1:6cb6f83:     File segmentFolder = new File(CarbonTablePath.getSegmentPath(path, "null"));
1:6cb6f83:     File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
1:6cb6f83:       @Override public boolean accept(File pathname) {
1:6cb6f83:         return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
1:6cb6f83:       }
1:6cb6f83:     });
1:6cb6f83:     Assert.assertNotNull(dataFiles);
1:6cb6f83:     Assert.assertEquals(2, dataFiles.length);
1:6cb6f83: 
1:6cb6f83:     FileUtils.deleteDirectory(new File(path));
1:6cb6f83:   }
1:6cb6f83: 
1:1d827c7:   @Test
1:6cb6f83:   public void testSortColumns() throws IOException {
1:6cb6f83:     String path = "./testWriteFiles";
1:6cb6f83:     FileUtils.deleteDirectory(new File(path));
1:6cb6f83: 
1:6cb6f83:     Field[] fields = new Field[2];
1:6cb6f83:     fields[0] = new Field("name", DataTypes.STRING);
1:6cb6f83:     fields[1] = new Field("age", DataTypes.INT);
1:6cb6f83: 
1:f910cfa:     TestUtil.writeFilesAndVerify(new Schema(fields), path, new String[]{"name"});
1:6cb6f83: 
1:6cb6f83:     // TODO: implement reader and verify the data is sorted
1:6cb6f83: 
1:6cb6f83:     FileUtils.deleteDirectory(new File(path));
1:6cb6f83:   }
1:1d827c7: 
1:1d827c7:   @Test
1:1d827c7:   public void testPartitionOutput() {
1:1d827c7:     // TODO: test write data with partition
1:6cb6f83:   }
1:1d827c7: 
1:1d827c7:   @Test
1:6cb6f83:   public void testSchemaPersistence() throws IOException {
1:6cb6f83:     String path = "./testWriteFiles";
1:6cb6f83:     FileUtils.deleteDirectory(new File(path));
1:6cb6f83: 
1:6cb6f83:     Field[] fields = new Field[2];
1:6cb6f83:     fields[0] = new Field("name", DataTypes.STRING);
1:6cb6f83:     fields[1] = new Field("age", DataTypes.INT);
1:6cb6f83: 
1:92d9b92:     TestUtil.writeFilesAndVerify(100, new Schema(fields), path, true);
1:6cb6f83: 
1:6cb6f83:     String schemaFile = CarbonTablePath.getSchemaFilePath(path);
1:6cb6f83:     Assert.assertTrue(new File(schemaFile).exists());
1:6cb6f83: 
1:6cb6f83:     FileUtils.deleteDirectory(new File(path));
1:6cb6f83:   }
1:1d827c7: 
1:3ea2a1d:   @Test(expected = IOException.class)
1:3ea2a1d:   public void testWhenWriterthrowsError() throws IOException{
1:3ea2a1d:     CarbonWriter carbonWriter = null;
1:1d827c7:     String path = "./testWriteFiles";
1:1d827c7: 
1:1d827c7:     FileUtils.deleteDirectory(new File(path));
1:1d827c7:     Field[] fields = new Field[2];
1:1d827c7:     fields[0] = new Field("name", DataTypes.STRING);
1:1d827c7:     fields[1] = new Field("age", DataTypes.INT);
1:6cb6f83:     try {
1:3ea2a1d:       carbonWriter = CarbonWriter.builder().isTransactionalTable(false).
1:8f1a029:           outputPath(path).buildWriterForCSVInput(new Schema(fields), TestUtil.configuration);
1:3ea2a1d:     } catch (InvalidLoadOptionException e) {
1:1d827c7:       e.printStackTrace();
1:3ea2a1d:       Assert.assertTrue(false);
1:1d827c7:     }
1:3ea2a1d:     carbonWriter.write("babu,1");
1:3ea2a1d:     carbonWriter.close();
1:1d827c7: 
1:1d827c7:   }
1:1d827c7:   @Test
1:3ea2a1d:   public void testWrongSchemaFieldsValidation() throws IOException{
1:3ea2a1d:     CarbonWriter carbonWriter = null;
2:3ea2a1d:     String path = "./testWriteFiles";
1:1d827c7: 
1:1d827c7:     FileUtils.deleteDirectory(new File(path));
1:3ea2a1d:     Field[] fields = new Field[3]; // supply 3 size fields but actual Field array value given is 2
2:3ea2a1d:     fields[0] = new Field("name", DataTypes.STRING);
2:3ea2a1d:     fields[1] = new Field("age", DataTypes.INT);
1:1d827c7:     try {
1:3ea2a1d:       carbonWriter = CarbonWriter.builder().isTransactionalTable(false).
1:8f1a029:           outputPath(path).buildWriterForCSVInput(new Schema(fields), TestUtil.configuration);
1:3ea2a1d:     } catch (InvalidLoadOptionException e) {
2:3ea2a1d:       e.printStackTrace();
1:3ea2a1d:       Assert.assertTrue(false);
1:1d827c7:     }
1:3ea2a1d:     carbonWriter.write(new String[]{"babu","1"});
1:3ea2a1d:     carbonWriter.close();
1:1d827c7: 
1:1d827c7:   }
1:1d827c7: 
1:1613471:   @Test
1:1613471:   public void testTaskNo() throws IOException {
1:1d827c7:     // TODO: write all data type and read by CarbonRecordReader to verify the content
1:1613471:     String path = "./testWriteFiles";
1:1613471:     FileUtils.deleteDirectory(new File(path));
1:1d827c7: 
1:1613471:     Field[] fields = new Field[2];
1:1613471:     fields[0] = new Field("stringField", DataTypes.STRING);
1:1613471:     fields[1] = new Field("intField", DataTypes.INT);
1:1d827c7: 
1:1d827c7: 
1:1613471:     try {
1:6cb6f83:       CarbonWriterBuilder builder = CarbonWriter.builder()
1:fc4b7f9:           .isTransactionalTable(true).taskNo(5)
1:6cb6f83:           .outputPath(path);
1:1d827c7: 
1:8f1a029:       CarbonWriter writer = builder.buildWriterForCSVInput(new Schema(fields), TestUtil.configuration);
1:1d827c7: 
1:1613471:       for (int i = 0; i < 2; i++) {
1:1613471:         String[] row = new String[]{
1:1613471:             "robot" + (i % 10),
1:1613471:             String.valueOf(i)
1:1613471:         };
1:1613471:         writer.write(row);
1:1d827c7:       }
1:1d827c7:       writer.close();
1:1d827c7: 
1:1d827c7:       File segmentFolder = new File(CarbonTablePath.getSegmentPath(path, "null"));
1:1d827c7:       Assert.assertTrue(segmentFolder.exists());
1:1d827c7: 
1:1d827c7:       File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
1:1d827c7:         @Override public boolean accept(File pathname) {
1:1d827c7:           return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
1:1d827c7:         }
1:6cb6f83:       });
1:1d827c7:       Assert.assertNotNull(dataFiles);
1:6cb6f83:       Assert.assertTrue(dataFiles.length > 0);
1:1613471:       String taskNo = CarbonTablePath.DataFileUtil.getTaskNo(dataFiles[0].getName());
1:1613471:       long taskID = CarbonTablePath.DataFileUtil.getTaskIdFromTaskNo(taskNo);
1:1613471:       Assert.assertEquals("Task Id is not matched", taskID, 5);
1:89cfd8e:     } catch (Exception e) {
1:1613471:       e.printStackTrace();
1:1d827c7:       Assert.fail(e.getMessage());
1:526e3bf:     } finally {
1:1613471:       FileUtils.deleteDirectory(new File(path));
1:1d827c7:     }
1:1d827c7:   }
1:1d827c7: 
1:526e3bf:   // validate number of blocklets in one block
1:526e3bf:   @Test
1:526e3bf:   public void testBlocklet() throws IOException {
1:526e3bf:     String path = "./testWriteFiles";
1:526e3bf:     FileUtils.deleteDirectory(new File(path));
1:526e3bf: 
1:526e3bf:     Field[] fields = new Field[2];
1:526e3bf:     fields[0] = new Field("name", DataTypes.STRING);
1:526e3bf:     fields[1] = new Field("age", DataTypes.INT);
1:526e3bf: 
1:526e3bf:     TestUtil.writeFilesAndVerify(1000000, new Schema(fields), path, new String[]{"name"},
1:526e3bf:         true, 3, 8, false);
1:526e3bf: 
1:526e3bf:     // read footer and verify number of blocklets
1:526e3bf:     CarbonFile folder = FileFactory.getCarbonFile(path);
1:526e3bf:     List<CarbonFile> files = folder.listFiles(true);
1:526e3bf:     List<CarbonFile> dataFiles = new LinkedList<>();
1:526e3bf:     for (CarbonFile file : files) {
1:526e3bf:       if (file.getName().endsWith(CarbonTablePath.CARBON_DATA_EXT)) {
1:526e3bf:         dataFiles.add(file);
1:526e3bf:       }
1:526e3bf:     }
1:526e3bf:     for (CarbonFile dataFile : dataFiles) {
1:526e3bf:       FileReader fileReader = FileFactory.getFileHolder(FileFactory.getFileType(dataFile.getPath()));
1:526e3bf:       ByteBuffer buffer = fileReader.readByteBuffer(FileFactory.getUpdatedFilePath(
1:526e3bf:           dataFile.getPath()), dataFile.getSize() - 8, 8);
1:526e3bf:       CarbonFooterReaderV3 footerReader =
1:526e3bf:           new CarbonFooterReaderV3(dataFile.getAbsolutePath(), buffer.getLong());
1:526e3bf:       FileFooter3 footer = footerReader.readFooterVersion3();
1:526e3bf:       Assert.assertEquals(2, footer.blocklet_index_list.size());
1:526e3bf:       Assert.assertEquals(2, footer.blocklet_info_list3.size());
1:526e3bf:     }
1:526e3bf:     FileUtils.deleteDirectory(new File(path));
1:526e3bf:   }
1:526e3bf: 
1:1d827c7: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1:       CarbonWriter writer = builder.buildWriterForCSVInput(new Schema(fields), TestUtil.configuration);
/////////////////////////////////////////////////////////////////////////
1:           outputPath(path).buildWriterForCSVInput(new Schema(fields), TestUtil.configuration);
/////////////////////////////////////////////////////////////////////////
1:           outputPath(path).buildWriterForCSVInput(new Schema(fields), TestUtil.configuration);
/////////////////////////////////////////////////////////////////////////
1:       CarbonWriter writer = builder.buildWriterForCSVInput(new Schema(fields), TestUtil.configuration);
commit:26eb2d0
/////////////////////////////////////////////////////////////////////////
0:       CarbonWriter writer = builder.buildWriterForCSVInput(new Schema(fields));
/////////////////////////////////////////////////////////////////////////
0:           outputPath(path).buildWriterForCSVInput(new Schema(fields));
/////////////////////////////////////////////////////////////////////////
0:           outputPath(path).buildWriterForCSVInput(new Schema(fields));
/////////////////////////////////////////////////////////////////////////
0:       CarbonWriter writer = builder.buildWriterForCSVInput(new Schema(fields));
author:Jacky Li
-------------------------------------------------------------------------------
commit:526e3bf
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import java.util.LinkedList;
1: import java.util.List;
1: import org.apache.carbondata.core.datastore.FileReader;
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.reader.CarbonFooterReaderV3;
1: import org.apache.carbondata.format.FileFooter3;
/////////////////////////////////////////////////////////////////////////
1:     } finally {
1:   // validate number of blocklets in one block
1:   @Test
1:   public void testBlocklet() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
1:     TestUtil.writeFilesAndVerify(1000000, new Schema(fields), path, new String[]{"name"},
1:         true, 3, 8, false);
1: 
1:     // read footer and verify number of blocklets
1:     CarbonFile folder = FileFactory.getCarbonFile(path);
1:     List<CarbonFile> files = folder.listFiles(true);
1:     List<CarbonFile> dataFiles = new LinkedList<>();
1:     for (CarbonFile file : files) {
1:       if (file.getName().endsWith(CarbonTablePath.CARBON_DATA_EXT)) {
1:         dataFiles.add(file);
1:       }
1:     }
1:     for (CarbonFile dataFile : dataFiles) {
1:       FileReader fileReader = FileFactory.getFileHolder(FileFactory.getFileType(dataFile.getPath()));
1:       ByteBuffer buffer = fileReader.readByteBuffer(FileFactory.getUpdatedFilePath(
1:           dataFile.getPath()), dataFile.getSize() - 8, 8);
1:       CarbonFooterReaderV3 footerReader =
1:           new CarbonFooterReaderV3(dataFile.getAbsolutePath(), buffer.getLong());
1:       FileFooter3 footer = footerReader.readFooterVersion3();
1:       Assert.assertEquals(2, footer.blocklet_index_list.size());
1:       Assert.assertEquals(2, footer.blocklet_info_list3.size());
1:     }
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
commit:f910cfa
/////////////////////////////////////////////////////////////////////////
1:     TestUtil.writeFilesAndVerify(new Schema(fields), path);
/////////////////////////////////////////////////////////////////////////
1:     TestUtil.writeFilesAndVerify(Schema.parseJson(schema), path);
/////////////////////////////////////////////////////////////////////////
0:     TestUtil.writeFilesAndVerify(1000 * 1000, new Schema(fields), path, null, false, 1, 100);
/////////////////////////////////////////////////////////////////////////
0:     TestUtil.writeFilesAndVerify(1000 * 1000, new Schema(fields), path, null, false, 2, 2);
/////////////////////////////////////////////////////////////////////////
1:     TestUtil.writeFilesAndVerify(new Schema(fields), path, new String[]{"name"});
/////////////////////////////////////////////////////////////////////////
0:     TestUtil.writeFilesAndVerify(new Schema(fields), path, true);
commit:df5d7a9
/////////////////////////////////////////////////////////////////////////
0: import java.io.FilenameFilter;
0: import org.apache.carbondata.common.Strings;
0: import org.apache.carbondata.core.scan.expression.logical.TrueExpression;
/////////////////////////////////////////////////////////////////////////
0:   public void testWriteAndReadFiles() throws IOException, InterruptedException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
0:     writeFilesAndVerify(new Schema(fields), path, true);
1: 
0:     File[] files = new File(path + "/Fact/Part0/Segment_null/").listFiles(new FilenameFilter() {
0:       @Override public boolean accept(File dir, String name) {
0:         return name.endsWith("carbondata");
1:       }
1:     });
1: 
0:     CarbonReader reader = CarbonReader.builder(path)
0:         .projection(new String[]{"name", "age"}).build();
1: 
0:     int i = 0;
0:     while (reader.hasNext()) {
0:       Object[] row = (Object[])reader.readNextRow();
0:       Assert.assertEquals("robot" + (i % 10), row[0]);
0:       Assert.assertEquals(i, row[1]);
0:       i++;
1:     }
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
1:   @Test
commit:e39b0a1
/////////////////////////////////////////////////////////////////////////
1: public class CSVCarbonWriterTest {
commit:6cb6f83
/////////////////////////////////////////////////////////////////////////
0:     writeFilesAndVerify(schema, path, null);
1:   }
0:   private void writeFilesAndVerify(Schema schema, String path, String[] sortColumns) {
0:     writeFilesAndVerify(100, schema, path, sortColumns, false, -1, -1);
1:   }
1: 
0:   private void writeFilesAndVerify(Schema schema, String path, boolean persistSchema) {
0:     writeFilesAndVerify(100, schema, path, null, persistSchema, -1, -1);
1:   }
1: 
1:   /**
0:    * Invoke CarbonWriter API to write carbon files and assert the file is rewritten
0:    * @param rows number of rows to write
0:    * @param schema schema of the file
0:    * @param path local write path
0:    * @param sortColumns sort columns
0:    * @param persistSchema true if want to persist schema file
0:    * @param blockletSize blockletSize in the file, -1 for default size
0:    * @param blockSize blockSize in the file, -1 for default size
1:    */
0:   private void writeFilesAndVerify(int rows, Schema schema, String path, String[] sortColumns,
0:       boolean persistSchema, int blockletSize, int blockSize) {
1:     try {
1:       CarbonWriterBuilder builder = CarbonWriter.builder()
0:           .withSchema(schema)
1:           .outputPath(path);
0:       if (sortColumns != null) {
0:         builder = builder.sortBy(sortColumns);
1:       }
0:       if (persistSchema) {
0:         builder = builder.persistSchemaFile(true);
1:       }
0:       if (blockletSize != -1) {
0:         builder = builder.withBlockletSize(blockletSize);
1:       }
0:       if (blockSize != -1) {
0:         builder = builder.withBlockSize(blockSize);
1:       }
1: 
0:       CarbonWriter writer = builder.buildWriterForCSVInput();
1: 
0:       for (int i = 0; i < rows; i++) {
0:         writer.write(new String[]{"robot" + (i % 10), String.valueOf(i), String.valueOf((double) i / 2)});
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(dataFiles.length > 0);
1:   public void testAllPrimitiveDataType() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[9];
1:     fields[0] = new Field("stringField", DataTypes.STRING);
1:     fields[1] = new Field("intField", DataTypes.INT);
1:     fields[2] = new Field("shortField", DataTypes.SHORT);
1:     fields[3] = new Field("longField", DataTypes.LONG);
1:     fields[4] = new Field("doubleField", DataTypes.DOUBLE);
1:     fields[5] = new Field("boolField", DataTypes.BOOLEAN);
1:     fields[6] = new Field("dateField", DataTypes.DATE);
1:     fields[7] = new Field("timeField", DataTypes.TIMESTAMP);
1:     fields[8] = new Field("decimalField", DataTypes.createDecimalType(8, 2));
1: 
1:     try {
1:       CarbonWriterBuilder builder = CarbonWriter.builder()
0:           .withSchema(new Schema(fields))
1:           .outputPath(path);
1: 
0:       CarbonWriter writer = builder.buildWriterForCSVInput();
1: 
1:       for (int i = 0; i < 100; i++) {
1:         String[] row = new String[]{
1:             "robot" + (i % 10),
1:             String.valueOf(i),
1:             String.valueOf(i),
1:             String.valueOf(Long.MAX_VALUE - i),
1:             String.valueOf((double) i / 2),
1:             String.valueOf(true),
1:             "2019-03-02",
1:             "2019-02-12 03:03:34"
1:         };
1:         writer.write(row);
1:       }
1:       writer.close();
1:     } catch (Exception e) {
1:       e.printStackTrace();
1:       Assert.fail(e.getMessage());
1:     }
1: 
1:     File segmentFolder = new File(CarbonTablePath.getSegmentPath(path, "null"));
1:     Assert.assertTrue(segmentFolder.exists());
1: 
1:     File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
1:       @Override public boolean accept(File pathname) {
1:         return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
1:       }
1:     });
1:     Assert.assertNotNull(dataFiles);
1:     Assert.assertTrue(dataFiles.length > 0);
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   public void test2Blocklet() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
0:     writeFilesAndVerify(1000 * 1000, new Schema(fields), path, null, false, 1, 100);
1: 
1:     // TODO: implement reader to verify the number of blocklet in the file
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   public void test2Block() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
0:     writeFilesAndVerify(1000 * 1000, new Schema(fields), path, null, false, 2, 2);
1: 
1:     File segmentFolder = new File(CarbonTablePath.getSegmentPath(path, "null"));
1:     File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
1:       @Override public boolean accept(File pathname) {
1:         return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
1:       }
1:     });
1:     Assert.assertNotNull(dataFiles);
1:     Assert.assertEquals(2, dataFiles.length);
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   public void testSortColumns() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
0:     writeFilesAndVerify(new Schema(fields), path, new String[]{"name"});
1: 
1:     // TODO: implement reader and verify the data is sorted
1: 
1:     FileUtils.deleteDirectory(new File(path));
/////////////////////////////////////////////////////////////////////////
1:   public void testSchemaPersistence() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
0:     writeFilesAndVerify(new Schema(fields), path, true);
1: 
1:     String schemaFile = CarbonTablePath.getSchemaFilePath(path);
1:     Assert.assertTrue(new File(schemaFile).exists());
1: 
1:     FileUtils.deleteDirectory(new File(path));
commit:89cfd8e
/////////////////////////////////////////////////////////////////////////
1:     } catch (Exception e) {
commit:1d827c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.sdk.file;
1: 
1: import java.io.File;
1: import java.io.FileFilter;
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: 
1: import org.apache.commons.io.FileUtils;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
0: /**
1:  * Test suite for {@link CSVCarbonWriter}
1:  */
0: public class CSVCarbonWriterSuite {
1: 
1:   @Test
1:   public void testWriteFiles() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
0:     writeFilesAndVerify(new Schema(fields), path);
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
1:   @Test
1:   public void testWriteFilesJsonSchema() throws IOException {
1:     String path = "./testWriteFilesJsonSchema";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     String schema = new StringBuilder()
1:         .append("[ \n")
1:         .append("   {\"name\":\"string\"},\n")
1:         .append("   {\"age\":\"int\"},\n")
1:         .append("   {\"height\":\"double\"}\n")
1:         .append("]")
1:         .toString();
1: 
0:     writeFilesAndVerify(Schema.parseJson(schema), path);
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
0:   private void writeFilesAndVerify(Schema schema, String path) {
1:     try {
0:       CarbonWriter writer = CarbonWriter.builder()
0:           .withSchema(schema)
0:           .outputPath(path)
0:           .buildWriterForCSVInput();
1: 
0:       for (int i = 0; i < 100; i++) {
0:         writer.write(new String[]{"robot" + i, String.valueOf(i), String.valueOf((double) i / 2)});
1:       }
1:       writer.close();
1:     } catch (IOException e) {
1:       e.printStackTrace();
1:       Assert.fail(e.getMessage());
1:     }
1: 
1:     File segmentFolder = new File(CarbonTablePath.getSegmentPath(path, "null"));
1:     Assert.assertTrue(segmentFolder.exists());
1: 
1:     File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
1:       @Override public boolean accept(File pathname) {
1:         return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
1:       }
0:     });
1:     Assert.assertNotNull(dataFiles);
0:     Assert.assertEquals(1, dataFiles.length);
1:   }
1: 
1:   @Test
0:   public void testAllPrimitiveDataType() {
1:     // TODO: write all data type and read by CarbonRecordReader to verify the content
1:   }
1: 
1:   @Test
0:   public void test2Blocklet() {
0:     // TODO: write data with more than one blocklet
1:   }
1: 
1:   @Test
0:   public void test2Block() {
0:     // TODO: write data with more than one block
1:   }
1: 
1:   @Test
0:   public void testSortColumns() {
0:     // TODO: test sort column
1:   }
1: 
1:   @Test
1:   public void testPartitionOutput() {
1:     // TODO: test write data with partition
1:   }
1: 
1:   @Test
0:   public void testSchemaPersistence() {
0:     // TODO: verify schema file is persisted in specified location
1:   }
1: 
1: }
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:bea277f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.DiskBasedDMSchemaStorageProvider;
1: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
1:     String path = null;
1:     try {
1:       path = new File(CSVCarbonWriterTest.class.getResource("/").getPath() + "../")
1:           .getCanonicalPath().replaceAll("\\\\", "/");
0:     } catch (IOException e) {
1:       assert (false);
0:     }
1:     CarbonProperties.getInstance()
1:         .addProperty(CarbonCommonConstants.CARBON_SYSTEM_FOLDER_LOCATION, path);
author:rahulforallp
-------------------------------------------------------------------------------
commit:92d9b92
/////////////////////////////////////////////////////////////////////////
1:     TestUtil.writeFilesAndVerify(100, new Schema(fields), path, true);
commit:fc4b7f9
/////////////////////////////////////////////////////////////////////////
1:           .isTransactionalTable(true).taskNo(5)
author:xubo245
-------------------------------------------------------------------------------
commit:cf55028
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
1:   @Before
1:   public void cleanFile() {
1:     assert (TestUtil.cleanMdtFile());
0:   }
0: 
1:   @After
1:   public void verifyDMFile() {
1:     assert (!TestUtil.verifyMdtFile());
0:   }
0: 
author:sounakr
-------------------------------------------------------------------------------
commit:4b8dc0a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     TestUtil.writeFilesAndVerify(1000 * 1000, new Schema(fields), path, null, false, 1, 100, false);
/////////////////////////////////////////////////////////////////////////
1:     TestUtil.writeFilesAndVerify(1000 * 1000, new Schema(fields), path, null, false, 2, 2, true);
commit:b7b8073
/////////////////////////////////////////////////////////////////////////
1:           .isTransactionalTable(true)
commit:9a25dc6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.exceptions.sql.InvalidLoadOptionException;
/////////////////////////////////////////////////////////////////////////
0:     } catch (IOException e) {
0:     } catch (InvalidLoadOptionException l) {
0:       l.printStackTrace();
0:       Assert.fail(l.getMessage());
author:BJangir
-------------------------------------------------------------------------------
commit:1613471
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
1:   @Test
1:   public void testTaskNo() throws IOException {
1:     // TODO: write all data type and read by CarbonRecordReader to verify the content
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
0: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("stringField", DataTypes.STRING);
1:     fields[1] = new Field("intField", DataTypes.INT);
0: 
0: 
1:     try {
0:       CarbonWriterBuilder builder = CarbonWriter.builder()
0:           .withSchema(new Schema(fields))
0:           .isTransactionalTable(true).taskNo("5")
0:           .outputPath(path);
0: 
0:       CarbonWriter writer = builder.buildWriterForCSVInput();
0: 
1:       for (int i = 0; i < 2; i++) {
1:         String[] row = new String[]{
1:             "robot" + (i % 10),
1:             String.valueOf(i)
1:         };
1:         writer.write(row);
0:       }
0:       writer.close();
0: 
0:       File segmentFolder = new File(CarbonTablePath.getSegmentPath(path, "null"));
0:       Assert.assertTrue(segmentFolder.exists());
0: 
0:       File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
0:         @Override public boolean accept(File pathname) {
0:           return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
0:         }
0:       });
0:       Assert.assertNotNull(dataFiles);
0:       Assert.assertTrue(dataFiles.length > 0);
1:       String taskNo = CarbonTablePath.DataFileUtil.getTaskNo(dataFiles[0].getName());
1:       long taskID = CarbonTablePath.DataFileUtil.getTaskIdFromTaskNo(taskNo);
1:       Assert.assertEquals("Task Id is not matched", taskID, 5);
0:     } catch (Exception e) {
1:       e.printStackTrace();
0:       Assert.fail(e.getMessage());
0:     }
0:   finally {
1:       FileUtils.deleteDirectory(new File(path));
0:     }
0:   }
0: 
commit:3ea2a1d
/////////////////////////////////////////////////////////////////////////
0: 
1:   @Test(expected = IOException.class)
1:   public void testWhenWriterthrowsError() throws IOException{
1:     CarbonWriter carbonWriter = null;
1:     String path = "./testWriteFiles";
0: 
0:     FileUtils.deleteDirectory(new File(path));
0:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
0:     try {
1:       carbonWriter = CarbonWriter.builder().isTransactionalTable(false).
0:           outputPath(path).withSchema(new Schema(fields)).buildWriterForCSVInput();
1:     } catch (InvalidLoadOptionException e) {
1:       e.printStackTrace();
1:       Assert.assertTrue(false);
0:     }
1:     carbonWriter.write("babu,1");
1:     carbonWriter.close();
0: 
0:   }
0:   @Test
1:   public void testWrongSchemaFieldsValidation() throws IOException{
1:     CarbonWriter carbonWriter = null;
1:     String path = "./testWriteFiles";
0: 
0:     FileUtils.deleteDirectory(new File(path));
1:     Field[] fields = new Field[3]; // supply 3 size fields but actual Field array value given is 2
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
0:     try {
1:       carbonWriter = CarbonWriter.builder().isTransactionalTable(false).
0:           outputPath(path).withSchema(new Schema(fields)).buildWriterForCSVInput();
1:     } catch (InvalidLoadOptionException e) {
1:       e.printStackTrace();
1:       Assert.assertTrue(false);
0:     }
1:     carbonWriter.write(new String[]{"babu","1"});
1:     carbonWriter.close();
0: 
0:   }
============================================================================