1:f1f9348: /*
1:f1f9348:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f1f9348:  * contributor license agreements.  See the NOTICE file distributed with
1:f1f9348:  * this work for additional information regarding copyright ownership.
1:f1f9348:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f1f9348:  * (the "License"); you may not use this file except in compliance with
1:f1f9348:  * the License.  You may obtain a copy of the License at
1:f1f9348:  *
1:f1f9348:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f1f9348:  *
1:f1f9348:  * Unless required by applicable law or agreed to in writing, software
1:f1f9348:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f1f9348:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f1f9348:  * See the License for the specific language governing permissions and
1:f1f9348:  * limitations under the License.
1:f1f9348:  */
2:f1f9348: 
1:f1f9348: package org.apache.carbondata.core.memory;
1:f1f9348: 
1:f1f9348: import java.lang.ref.WeakReference;
1:f1f9348: import java.util.HashMap;
1:f1f9348: import java.util.LinkedList;
1:f1f9348: import java.util.Map;
1:002279e: import javax.annotation.concurrent.GuardedBy;
1:f1f9348: 
1:d0858b7: import org.apache.carbondata.core.util.CarbonProperties;
1:d0858b7: 
1:f1f9348: /**
1:f1f9348:  * Code ported from Apache Spark {org.apache.spark.unsafe.memory} package
1:f1f9348:  * A simple {@link MemoryAllocator} that can allocate up to 16GB using a JVM long primitive array.
1:f1f9348:  */
1:f1f9348: public class HeapMemoryAllocator implements MemoryAllocator {
1:f1f9348: 
1:d0858b7:   @GuardedBy("this") private final Map<Long, LinkedList<WeakReference<long[]>>>
1:f1f9348:       bufferPoolsBySize = new HashMap<>();
1:f1f9348: 
1:d0858b7:   private int poolingThresholdBytes;
1:d0858b7:   private boolean shouldPooling = true;
1:d0858b7: 
1:d0858b7:   public HeapMemoryAllocator() {
1:d0858b7:     poolingThresholdBytes = CarbonProperties.getInstance().getHeapMemoryPoolingThresholdBytes();
1:d0858b7:     // if set 'poolingThresholdBytes' to -1, it should not go through the pooling mechanism.
1:d0858b7:     if (poolingThresholdBytes == -1) {
1:d0858b7:       shouldPooling = false;
1:d0858b7:     }
1:d0858b7:   }
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * Returns true if allocations of the given size should go through the pooling mechanism and
1:f1f9348:    * false otherwise.
1:f1f9348:    */
1:f1f9348:   private boolean shouldPool(long size) {
1:f1f9348:     // Very small allocations are less likely to benefit from pooling.
1:d0858b7:     return shouldPooling && (size >= poolingThresholdBytes);
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   @Override public MemoryBlock allocate(long size) throws OutOfMemoryError {
1:d0858b7:     int numWords = (int) ((size + 7) / 8);
1:d0858b7:     long alignedSize = numWords * 8L;
1:d0858b7:     assert (alignedSize >= size);
1:d0858b7:     if (shouldPool(alignedSize)) {
1:f1f9348:       synchronized (this) {
1:d0858b7:         final LinkedList<WeakReference<long[]>> pool = bufferPoolsBySize.get(alignedSize);
1:f1f9348:         if (pool != null) {
1:f1f9348:           while (!pool.isEmpty()) {
1:d0858b7:             final WeakReference<long[]> arrayReference = pool.pop();
1:d0858b7:             final long[] array = arrayReference.get();
1:d0858b7:             if (array != null) {
1:d0858b7:               assert (array.length * 8L >= size);
1:d0858b7:               MemoryBlock memory = new MemoryBlock(array, CarbonUnsafe.LONG_ARRAY_OFFSET, size);
1:2892326:               // reuse this MemoryBlock
1:2892326:               memory.setFreedStatus(false);
1:f1f9348:               return memory;
1:f1f9348:             }
1:f1f9348:           }
1:d0858b7:           bufferPoolsBySize.remove(alignedSize);
1:f1f9348:         }
1:f1f9348:       }
1:f1f9348:     }
1:d0858b7:     long[] array = new long[numWords];
1:f1f9348:     return new MemoryBlock(array, CarbonUnsafe.LONG_ARRAY_OFFSET, size);
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   @Override public void free(MemoryBlock memory) {
1:f1f9348:     final long size = memory.size();
1:d0858b7: 
1:d0858b7:     // As an additional layer of defense against use-after-free bugs, we mutate the
1:d0858b7:     // MemoryBlock to null out its reference to the long[] array.
1:d0858b7:     long[] array = (long[]) memory.obj;
1:d0858b7: 
1:d0858b7:     long alignedSize = ((size + 7) / 8) * 8;
1:d0858b7:     if (shouldPool(alignedSize)) {
1:f1f9348:       synchronized (this) {
1:d0858b7:         LinkedList<WeakReference<long[]>> pool = bufferPoolsBySize.get(alignedSize);
1:f1f9348:         if (pool == null) {
1:f1f9348:           pool = new LinkedList<>();
1:d0858b7:           bufferPoolsBySize.put(alignedSize, pool);
1:f1f9348:         }
1:d0858b7:         pool.add(new WeakReference<>(array));
1:f1f9348:       }
1:f1f9348:     }
1:2892326:     memory.setFreedStatus(true);
1:f1f9348:   }
1:f1f9348: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
commit:002279e
/////////////////////////////////////////////////////////////////////////
1: import javax.annotation.concurrent.GuardedBy;
author:xuchuanyin
-------------------------------------------------------------------------------
commit:4589ac5
/////////////////////////////////////////////////////////////////////////
0: import javax.annotation.concurrent.GuardedBy;
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
0: import javax.annotation.concurrent.GuardedBy;
commit:956833e
/////////////////////////////////////////////////////////////////////////
0: import javax.annotation.concurrent.GuardedBy;
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:d0858b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1:   @GuardedBy("this") private final Map<Long, LinkedList<WeakReference<long[]>>>
1:   private int poolingThresholdBytes;
1:   private boolean shouldPooling = true;
1: 
1:   public HeapMemoryAllocator() {
1:     poolingThresholdBytes = CarbonProperties.getInstance().getHeapMemoryPoolingThresholdBytes();
1:     // if set 'poolingThresholdBytes' to -1, it should not go through the pooling mechanism.
1:     if (poolingThresholdBytes == -1) {
1:       shouldPooling = false;
1:     }
1:   }
/////////////////////////////////////////////////////////////////////////
1:     return shouldPooling && (size >= poolingThresholdBytes);
1:     int numWords = (int) ((size + 7) / 8);
1:     long alignedSize = numWords * 8L;
1:     assert (alignedSize >= size);
1:     if (shouldPool(alignedSize)) {
1:         final LinkedList<WeakReference<long[]>> pool = bufferPoolsBySize.get(alignedSize);
1:             final WeakReference<long[]> arrayReference = pool.pop();
1:             final long[] array = arrayReference.get();
1:             if (array != null) {
1:               assert (array.length * 8L >= size);
1:               MemoryBlock memory = new MemoryBlock(array, CarbonUnsafe.LONG_ARRAY_OFFSET, size);
1:           bufferPoolsBySize.remove(alignedSize);
1:     long[] array = new long[numWords];
1: 
1:     // As an additional layer of defense against use-after-free bugs, we mutate the
1:     // MemoryBlock to null out its reference to the long[] array.
1:     long[] array = (long[]) memory.obj;
0:     memory.setObjAndOffset(null, 0);
1: 
1:     long alignedSize = ((size + 7) / 8) * 8;
1:     if (shouldPool(alignedSize)) {
1:         LinkedList<WeakReference<long[]>> pool = bufferPoolsBySize.get(alignedSize);
1:           bufferPoolsBySize.put(alignedSize, pool);
1:         pool.add(new WeakReference<>(array));
commit:2892326
/////////////////////////////////////////////////////////////////////////
1:               // reuse this MemoryBlock
1:               memory.setFreedStatus(false);
/////////////////////////////////////////////////////////////////////////
1:     memory.setFreedStatus(true);
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
0: import javax.annotation.concurrent.GuardedBy;
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.memory;
1: 
0: import javax.annotation.concurrent.GuardedBy;
1: import java.lang.ref.WeakReference;
1: import java.util.HashMap;
1: import java.util.LinkedList;
1: import java.util.Map;
1: 
0: import org.apache.carbondata.core.unsafe.CarbonUnsafe;
1: 
1: /**
1:  * Code ported from Apache Spark {org.apache.spark.unsafe.memory} package
1:  * A simple {@link MemoryAllocator} that can allocate up to 16GB using a JVM long primitive array.
1:  */
1: public class HeapMemoryAllocator implements MemoryAllocator {
1: 
0:   @GuardedBy("this") private final Map<Long, LinkedList<WeakReference<MemoryBlock>>>
1:       bufferPoolsBySize = new HashMap<>();
1: 
0:   private static final int POOLING_THRESHOLD_BYTES = 1024 * 1024;
1: 
1:   /**
1:    * Returns true if allocations of the given size should go through the pooling mechanism and
1:    * false otherwise.
1:    */
1:   private boolean shouldPool(long size) {
1:     // Very small allocations are less likely to benefit from pooling.
0:     return size >= POOLING_THRESHOLD_BYTES;
1:   }
1: 
1:   @Override public MemoryBlock allocate(long size) throws OutOfMemoryError {
0:     if (shouldPool(size)) {
1:       synchronized (this) {
0:         final LinkedList<WeakReference<MemoryBlock>> pool = bufferPoolsBySize.get(size);
1:         if (pool != null) {
1:           while (!pool.isEmpty()) {
0:             final WeakReference<MemoryBlock> blockReference = pool.pop();
0:             final MemoryBlock memory = blockReference.get();
0:             if (memory != null) {
0:               assert (memory.size() == size);
1:               return memory;
1:             }
1:           }
0:           bufferPoolsBySize.remove(size);
1:         }
1:       }
1:     }
0:     long[] array = new long[(int) ((size + 7) / 8)];
1:     return new MemoryBlock(array, CarbonUnsafe.LONG_ARRAY_OFFSET, size);
1:   }
1: 
1:   @Override public void free(MemoryBlock memory) {
1:     final long size = memory.size();
0:     if (shouldPool(size)) {
1:       synchronized (this) {
0:         LinkedList<WeakReference<MemoryBlock>> pool = bufferPoolsBySize.get(size);
1:         if (pool == null) {
1:           pool = new LinkedList<>();
0:           bufferPoolsBySize.put(size, pool);
1:         }
0:         pool.add(new WeakReference<>(memory));
1:       }
0:     } else {
0:       // Do nothing
1:     }
1:   }
1: }
============================================================================