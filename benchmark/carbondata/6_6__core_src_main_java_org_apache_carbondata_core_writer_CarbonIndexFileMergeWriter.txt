1:0586146: /*
1:0586146:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0586146:  * contributor license agreements.  See the NOTICE file distributed with
1:0586146:  * this work for additional information regarding copyright ownership.
1:0586146:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0586146:  * (the "License"); you may not use this file except in compliance with
1:0586146:  * the License.  You may obtain a copy of the License at
2:0586146:  *
1:0586146:  *    http://www.apache.org/licenses/LICENSE-2.0
1:0586146:  *
1:0586146:  * Unless required by applicable law or agreed to in writing, software
1:0586146:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0586146:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0586146:  * See the License for the specific language governing permissions and
1:0586146:  * limitations under the License.
2:0586146:  */
1:0586146: package org.apache.carbondata.core.writer;
1:74f5d67: 
1:0586146: import java.io.IOException;
1:74f5d67: import java.io.Serializable;
1:0586146: import java.nio.ByteBuffer;
1:0586146: import java.util.ArrayList;
1:74f5d67: import java.util.HashMap;
1:22d5035: import java.util.HashSet;
1:0586146: import java.util.List;
1:0586146: import java.util.Map;
1:74f5d67: 
1:74f5d67: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:74f5d67: import org.apache.carbondata.core.datamap.Segment;
1:0586146: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1:8f1a029: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:17d0731: import org.apache.carbondata.core.fileoperations.FileWriteOperation;
1:0586146: import org.apache.carbondata.core.indexstore.blockletindex.SegmentIndexFileStore;
1:74f5d67: import org.apache.carbondata.core.metadata.SegmentFileStore;
1:7e0803f: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:74f5d67: import org.apache.carbondata.core.statusmanager.SegmentStatus;
1:0586146: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:0586146: import org.apache.carbondata.format.MergedBlockIndex;
1:0586146: import org.apache.carbondata.format.MergedBlockIndexHeader;
1:74f5d67: 
1:74f5d67: import org.apache.hadoop.fs.Path;
1:74f5d67: 
1:0586146: public class CarbonIndexFileMergeWriter {
4:0586146: 
2:0586146:   /**
1:7e0803f:    * table handle
1:7e0803f:    */
1:7e0803f:   private CarbonTable table;
1:7e0803f: 
1:7e0803f:   /**
1:0586146:    * thrift writer object
1:0586146:    */
1:0586146:   private ThriftWriter thriftWriter;
1:0586146: 
1:7e0803f:   public CarbonIndexFileMergeWriter(CarbonTable table) {
1:7e0803f:     this.table = table;
1:7e0803f:   }
1:7e0803f: 
1:0586146:   /**
1:9659edc:    * Merge all the carbonindex files of segment to a  merged file
1:74f5d67:    * @param tablePath
1:9659edc:    * @param indexFileNamesTobeAdded while merging it comsiders only these files.
1:9659edc:    *                                If null then consider all
1:e820006:    * @param readFileFooterFromCarbonDataFile flag to read file footer information from carbondata
1:e820006:    *                                         file. This will used in case of upgrade from version
1:e820006:    *                                         which do not store the blocklet info to current version
1:e820006:    * @throws IOException
1:e820006:    */
1:7e0803f:   private String mergeCarbonIndexFilesOfSegment(String segmentId,
1:74f5d67:       String tablePath, List<String> indexFileNamesTobeAdded,
1:6c5abdd:       boolean readFileFooterFromCarbonDataFile, String uuid) throws IOException {
1:74f5d67:     Segment segment = Segment.getSegment(segmentId, tablePath);
1:74f5d67:     String segmentPath = CarbonTablePath.getSegmentPath(tablePath, segmentId);
1:74f5d67:     CarbonFile[] indexFiles;
1:74f5d67:     SegmentFileStore sfs = null;
1:74f5d67:     if (segment != null && segment.getSegmentFileName() != null) {
1:74f5d67:       sfs = new SegmentFileStore(tablePath, segment.getSegmentFileName());
1:74f5d67:       List<CarbonFile> indexCarbonFiles = sfs.getIndexCarbonFiles();
1:74f5d67:       indexFiles = indexCarbonFiles.toArray(new CarbonFile[indexCarbonFiles.size()]);
1:74f5d67:     } else {
1:8f1a029:       indexFiles =
1:8f1a029:           SegmentIndexFileStore.getCarbonIndexFiles(segmentPath, FileFactory.getConfiguration());
1:e820006:     }
1:9659edc:     if (isCarbonIndexFilePresent(indexFiles) || indexFileNamesTobeAdded != null) {
1:74f5d67:       if (sfs == null) {
1:df8f067:         return writeMergeIndexFileBasedOnSegmentFolder(indexFileNamesTobeAdded,
1:df8f067:             readFileFooterFromCarbonDataFile, segmentPath, indexFiles, segmentId);
1:74f5d67:       } else {
1:7e0803f:         return writeMergeIndexFileBasedOnSegmentFile(
1:6c5abdd:             segmentId, indexFileNamesTobeAdded, sfs, indexFiles, uuid);
1:e820006:       }
1:74f5d67:     }
1:74f5d67:     return null;
1:74f5d67:   }
1:e820006: 
1:7e0803f:   private String writeMergeIndexFileBasedOnSegmentFolder(List<String> indexFileNamesTobeAdded,
1:df8f067:       boolean readFileFooterFromCarbonDataFile, String segmentPath, CarbonFile[] indexFiles,
1:df8f067:       String segmentId) throws IOException {
1:74f5d67:     SegmentIndexFileStore fileStore = new SegmentIndexFileStore();
1:e820006:     if (readFileFooterFromCarbonDataFile) {
1:e820006:       // this case will be used in case of upgrade where old store will not have the blocklet
1:e820006:       // info in the index file and therefore blocklet info need to be read from the file footer
1:e820006:       // in the carbondata file
1:e820006:       fileStore.readAllIndexAndFillBolckletInfo(segmentPath);
1:e820006:     } else {
1:e820006:       fileStore.readAllIIndexOfSegment(segmentPath);
1:e820006:     }
1:74f5d67:     Map<String, byte[]> indexMap = fileStore.getCarbonIndexMap();
1:df8f067:     writeMergeIndexFile(indexFileNamesTobeAdded, segmentPath, indexMap, segmentId);
1:74f5d67:     for (CarbonFile indexFile : indexFiles) {
1:74f5d67:       indexFile.delete();
1:74f5d67:     }
1:74f5d67:     return null;
1:74f5d67:   }
1:e820006: 
1:6c5abdd:   private String writeMergeIndexFileBasedOnSegmentFile(String segmentId,
1:6c5abdd:       List<String> indexFileNamesTobeAdded, SegmentFileStore segmentFileStore,
1:6c5abdd:       CarbonFile[] indexFiles, String uuid) throws IOException {
1:74f5d67:     SegmentIndexFileStore fileStore = new SegmentIndexFileStore();
1:74f5d67:     fileStore
1:eb604fd:         .readAllIIndexOfSegment(segmentFileStore.getSegmentFile(), segmentFileStore.getTablePath(),
1:eb604fd:             SegmentStatus.SUCCESS, true);
1:74f5d67:     Map<String, byte[]> indexMap = fileStore.getCarbonIndexMapWithFullPath();
1:74f5d67:     Map<String, Map<String, byte[]>> indexLocationMap = new HashMap<>();
1:74f5d67:     for (Map.Entry<String, byte[]> entry: indexMap.entrySet()) {
1:74f5d67:       Path path = new Path(entry.getKey());
1:74f5d67:       Map<String, byte[]> map = indexLocationMap.get(path.getParent().toString());
1:74f5d67:       if (map == null) {
1:74f5d67:         map = new HashMap<>();
1:74f5d67:         indexLocationMap.put(path.getParent().toString(), map);
1:74f5d67:       }
1:74f5d67:       map.put(path.getName(), entry.getValue());
1:74f5d67:     }
1:74f5d67:     for (Map.Entry<String, Map<String, byte[]>> entry : indexLocationMap.entrySet()) {
1:74f5d67:       String mergeIndexFile =
1:df8f067:           writeMergeIndexFile(indexFileNamesTobeAdded, entry.getKey(), entry.getValue(), segmentId);
1:eb604fd:       for (Map.Entry<String, SegmentFileStore.FolderDetails> segentry : segmentFileStore
1:eb604fd:           .getLocationMap().entrySet()) {
1:74f5d67:         String location = segentry.getKey();
1:74f5d67:         if (segentry.getValue().isRelative()) {
1:eb604fd:           location =
1:eb604fd:               segmentFileStore.getTablePath() + CarbonCommonConstants.FILE_SEPARATOR + location;
1:74f5d67:         }
1:74f5d67:         if (new Path(entry.getKey()).equals(new Path(location))) {
1:74f5d67:           segentry.getValue().setMergeFileName(mergeIndexFile);
1:22d5035:           segentry.getValue().setFiles(new HashSet<String>());
1:74f5d67:           break;
1:74f5d67:         }
1:74f5d67:       }
1:74f5d67:     }
1:6c5abdd:     String newSegmentFileName = SegmentFileStore.genSegmentFileName(segmentId, uuid)
1:6c5abdd:         + CarbonTablePath.SEGMENT_EXT;
1:7e0803f:     String path = CarbonTablePath.getSegmentFilesLocation(table.getTablePath())
1:7e0803f:         + CarbonCommonConstants.FILE_SEPARATOR + newSegmentFileName;
1:eb604fd:     SegmentFileStore.writeSegmentFile(segmentFileStore.getSegmentFile(), path);
1:a26be1b:     SegmentFileStore.updateSegmentFile(table, segmentId, newSegmentFileName,
1:eb604fd:         table.getCarbonTableIdentifier().getTableId(), segmentFileStore);
1:7e0803f: 
1:74f5d67:     for (CarbonFile file : indexFiles) {
1:7e0803f:       file.delete();
1:74f5d67:     }
1:7e0803f: 
1:6c5abdd:     return uuid;
1:74f5d67:   }
1:74f5d67: 
1:74f5d67:   private String writeMergeIndexFile(List<String> indexFileNamesTobeAdded, String segmentPath,
1:df8f067:       Map<String, byte[]> indexMap, String segment_id) throws IOException {
1:74f5d67:     MergedBlockIndexHeader indexHeader = new MergedBlockIndexHeader();
1:74f5d67:     MergedBlockIndex mergedBlockIndex = new MergedBlockIndex();
1:74f5d67:     List<String> fileNames = new ArrayList<>(indexMap.size());
1:74f5d67:     List<ByteBuffer> data = new ArrayList<>(indexMap.size());
1:74f5d67:     for (Map.Entry<String, byte[]> entry : indexMap.entrySet()) {
1:74f5d67:       if (indexFileNamesTobeAdded == null ||
1:74f5d67:           indexFileNamesTobeAdded.contains(entry.getKey())) {
1:74f5d67:         fileNames.add(entry.getKey());
1:74f5d67:         data.add(ByteBuffer.wrap(entry.getValue()));
1:74f5d67:       }
1:74f5d67:     }
1:74f5d67:     if (fileNames.size() > 0) {
1:df8f067:       String mergeIndexName =
1:df8f067:           segment_id + '_' + System.currentTimeMillis() + CarbonTablePath.MERGE_INDEX_FILE_EXT;
1:74f5d67:       openThriftWriter(segmentPath + "/" + mergeIndexName);
1:74f5d67:       indexHeader.setFile_names(fileNames);
1:74f5d67:       mergedBlockIndex.setFileData(data);
1:74f5d67:       writeMergedBlockIndexHeader(indexHeader);
1:74f5d67:       writeMergedBlockIndex(mergedBlockIndex);
1:74f5d67:       close();
1:74f5d67:       return mergeIndexName;
1:74f5d67:     }
1:74f5d67:     return null;
1:74f5d67:   }
1:74f5d67: 
1:e820006:   /**
1:e820006:    * Merge all the carbonindex files of segment to a  merged file
1:e820006:    *
2:74f5d67:    * @param segmentId
1:9659edc:    * @throws IOException
1:9659edc:    */
1:6c5abdd:   public String mergeCarbonIndexFilesOfSegment(String segmentId, String uuid,
1:74f5d67:       String tablePath) throws IOException {
1:6c5abdd:     return mergeCarbonIndexFilesOfSegment(segmentId, tablePath, null, false, uuid);
1:9659edc:   }
1:9659edc: 
1:e820006:   /**
1:e820006:    * Merge all the carbonindex files of segment to a  merged file
1:74f5d67:    *
1:74f5d67:    * @param segmentId
1:e820006:    * @param readFileFooterFromCarbonDataFile
1:e820006:    * @throws IOException
1:e820006:    */
1:7e0803f:   public String mergeCarbonIndexFilesOfSegment(String segmentId,
1:6c5abdd:       String tablePath, boolean readFileFooterFromCarbonDataFile, String uuid) throws IOException {
1:74f5d67:     return mergeCarbonIndexFilesOfSegment(segmentId, tablePath, null,
1:6c5abdd:         readFileFooterFromCarbonDataFile, uuid);
1:9659edc:   }
1:0586146: 
1:17d0731:   private boolean isCarbonIndexFilePresent(CarbonFile[] indexFiles) {
1:17d0731:     for (CarbonFile file : indexFiles) {
1:17d0731:       if (file.getName().endsWith(CarbonTablePath.INDEX_FILE_EXT)) {
1:17d0731:         return true;
1:9659edc:       }
1:17d0731:     }
1:17d0731:     return false;
1:17d0731:   }
1:0586146: 
1:9659edc:   /**
1:0586146:    * It writes thrift object to file
1:74f5d67:    *
2:0586146:    * @throws IOException
1:0586146:    */
1:0586146:   private void writeMergedBlockIndexHeader(MergedBlockIndexHeader indexObject) throws IOException {
1:0586146:     thriftWriter.write(indexObject);
1:17d0731:   }
1:0586146: 
1:0586146:   /**
1:0586146:    * It writes thrift object to file
1:0586146:    *
1:0586146:    * @throws IOException
1:0586146:    */
1:0586146:   private void writeMergedBlockIndex(MergedBlockIndex indexObject) throws IOException {
1:0586146:     thriftWriter.write(indexObject);
7:0586146:   }
1:0586146: 
1:0586146:   /**
1:0586146:    * Below method will be used to open the thrift writer
1:0586146:    *
1:0586146:    * @param filePath file path where data need to be written
1:0586146:    * @throws IOException throws io exception in case of any failure
1:0586146:    */
1:0586146:   private void openThriftWriter(String filePath) throws IOException {
1:0586146:     // create thrift writer instance
1:0586146:     thriftWriter = new ThriftWriter(filePath, false);
1:0586146:     // open the file stream
1:17d0731:     thriftWriter.open(FileWriteOperation.OVERWRITE);
1:0586146:   }
1:0586146: 
1:0586146:   /**
1:0586146:    * Below method will be used to close the thrift object
1:0586146:    */
1:0586146:   private void close() throws IOException {
1:0586146:     thriftWriter.close();
1:0586146:   }
1:0586146: 
1:74f5d67:   public static class SegmentIndexFIleMergeStatus implements Serializable {
1:74f5d67: 
1:74f5d67:     private SegmentFileStore.SegmentFile segmentFile;
1:74f5d67: 
1:74f5d67:     private List<String> filesTobeDeleted;
1:74f5d67: 
1:74f5d67:     public SegmentIndexFIleMergeStatus(SegmentFileStore.SegmentFile segmentFile,
1:74f5d67:         List<String> filesTobeDeleted) {
1:74f5d67:       this.segmentFile = segmentFile;
1:74f5d67:       this.filesTobeDeleted = filesTobeDeleted;
1:74f5d67:     }
1:74f5d67: 
1:74f5d67:     public SegmentFileStore.SegmentFile getSegmentFile() {
1:74f5d67:       return segmentFile;
1:74f5d67:     }
1:74f5d67: 
1:74f5d67:     public List<String> getFilesTobeDeleted() {
1:74f5d67:       return filesTobeDeleted;
1:74f5d67:     }
1:74f5d67:   }
1:0586146: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
/////////////////////////////////////////////////////////////////////////
1:       indexFiles =
1:           SegmentIndexFileStore.getCarbonIndexFiles(segmentPath, FileFactory.getConfiguration());
commit:cb10d03
/////////////////////////////////////////////////////////////////////////
0:     SegmentFileStore.updateSegmentFile(table.getTablePath(), segmentId, newSegmentFileName,
0:         table.getCarbonTableIdentifier().getTableId());
commit:cc0e6f1
/////////////////////////////////////////////////////////////////////////
0:     if (indexFiles != null && indexFiles.length > 0) {
author:manishgupta88
-------------------------------------------------------------------------------
commit:a26be1b
/////////////////////////////////////////////////////////////////////////
1:     SegmentFileStore.updateSegmentFile(table, segmentId, newSegmentFileName,
commit:e820006
/////////////////////////////////////////////////////////////////////////
1:    * @param readFileFooterFromCarbonDataFile flag to read file footer information from carbondata
1:    *                                         file. This will used in case of upgrade from version
1:    *                                         which do not store the blocklet info to current version
0:   private void mergeCarbonIndexFilesOfSegment(String segmentPath,
0:       List<String> indexFileNamesTobeAdded, boolean readFileFooterFromCarbonDataFile)
0:       throws IOException {
1:       if (readFileFooterFromCarbonDataFile) {
1:         // this case will be used in case of upgrade where old store will not have the blocklet
1:         // info in the index file and therefore blocklet info need to be read from the file footer
1:         // in the carbondata file
1:         fileStore.readAllIndexAndFillBolckletInfo(segmentPath);
1:       } else {
1:         fileStore.readAllIIndexOfSegment(segmentPath);
1:       }
/////////////////////////////////////////////////////////////////////////
1:    *
0:    * @param segmentPath
0:    * @param indexFileNamesTobeAdded
1:    * @throws IOException
1:    */
0:   public void mergeCarbonIndexFilesOfSegment(String segmentPath,
0:       List<String> indexFileNamesTobeAdded) throws IOException {
0:     mergeCarbonIndexFilesOfSegment(segmentPath, indexFileNamesTobeAdded, false);
1:   }
1: 
1:   /**
1:    * Merge all the carbonindex files of segment to a  merged file
0:     mergeCarbonIndexFilesOfSegment(segmentPath, null, false);
1:   }
1: 
1:   /**
1:    * Merge all the carbonindex files of segment to a  merged file
0:    * @param segmentPath
1:    * @param readFileFooterFromCarbonDataFile
1:    * @throws IOException
1:    */
0:   public void mergeCarbonIndexFilesOfSegment(String segmentPath,
0:       boolean readFileFooterFromCarbonDataFile) throws IOException {
0:     mergeCarbonIndexFilesOfSegment(segmentPath, null, readFileFooterFromCarbonDataFile);
author:dhatchayani
-------------------------------------------------------------------------------
commit:6c5abdd
/////////////////////////////////////////////////////////////////////////
1:       boolean readFileFooterFromCarbonDataFile, String uuid) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:             segmentId, indexFileNamesTobeAdded, sfs, indexFiles, uuid);
/////////////////////////////////////////////////////////////////////////
1:   private String writeMergeIndexFileBasedOnSegmentFile(String segmentId,
1:       List<String> indexFileNamesTobeAdded, SegmentFileStore segmentFileStore,
1:       CarbonFile[] indexFiles, String uuid) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     String newSegmentFileName = SegmentFileStore.genSegmentFileName(segmentId, uuid)
1:         + CarbonTablePath.SEGMENT_EXT;
/////////////////////////////////////////////////////////////////////////
1:     return uuid;
/////////////////////////////////////////////////////////////////////////
1:   public String mergeCarbonIndexFilesOfSegment(String segmentId, String uuid,
1:     return mergeCarbonIndexFilesOfSegment(segmentId, tablePath, null, false, uuid);
/////////////////////////////////////////////////////////////////////////
1:       String tablePath, boolean readFileFooterFromCarbonDataFile, String uuid) throws IOException {
1:         readFileFooterFromCarbonDataFile, uuid);
commit:eb604fd
/////////////////////////////////////////////////////////////////////////
0:       SegmentFileStore segmentFileStore, CarbonFile[] indexFiles) throws IOException {
1:         .readAllIIndexOfSegment(segmentFileStore.getSegmentFile(), segmentFileStore.getTablePath(),
1:             SegmentStatus.SUCCESS, true);
/////////////////////////////////////////////////////////////////////////
1:       for (Map.Entry<String, SegmentFileStore.FolderDetails> segentry : segmentFileStore
1:           .getLocationMap().entrySet()) {
1:           location =
1:               segmentFileStore.getTablePath() + CarbonCommonConstants.FILE_SEPARATOR + location;
/////////////////////////////////////////////////////////////////////////
1:     SegmentFileStore.writeSegmentFile(segmentFileStore.getSegmentFile(), path);
1:         table.getCarbonTableIdentifier().getTableId(), segmentFileStore);
commit:22d5035
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
1:           segentry.getValue().setFiles(new HashSet<String>());
author:Jatin
-------------------------------------------------------------------------------
commit:df8f067
/////////////////////////////////////////////////////////////////////////
1:         return writeMergeIndexFileBasedOnSegmentFolder(indexFileNamesTobeAdded,
1:             readFileFooterFromCarbonDataFile, segmentPath, indexFiles, segmentId);
/////////////////////////////////////////////////////////////////////////
1:       boolean readFileFooterFromCarbonDataFile, String segmentPath, CarbonFile[] indexFiles,
1:       String segmentId) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     writeMergeIndexFile(indexFileNamesTobeAdded, segmentPath, indexMap, segmentId);
/////////////////////////////////////////////////////////////////////////
1:           writeMergeIndexFile(indexFileNamesTobeAdded, entry.getKey(), entry.getValue(), segmentId);
/////////////////////////////////////////////////////////////////////////
1:       Map<String, byte[]> indexMap, String segment_id) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:       String mergeIndexName =
1:           segment_id + '_' + System.currentTimeMillis() + CarbonTablePath.MERGE_INDEX_FILE_EXT;
author:Jacky Li
-------------------------------------------------------------------------------
commit:7e0803f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
/////////////////////////////////////////////////////////////////////////
1:    * table handle
1:    */
1:   private CarbonTable table;
1: 
1:   /**
1:   public CarbonIndexFileMergeWriter(CarbonTable table) {
1:     this.table = table;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   private String mergeCarbonIndexFilesOfSegment(String segmentId,
/////////////////////////////////////////////////////////////////////////
0:         return writeMergeIndexFileBasedOnSegmentFolder(
0:             indexFileNamesTobeAdded, readFileFooterFromCarbonDataFile, segmentPath, indexFiles);
1:         return writeMergeIndexFileBasedOnSegmentFile(
0:             segmentId, indexFileNamesTobeAdded, sfs, indexFiles);
1:   private String writeMergeIndexFileBasedOnSegmentFolder(List<String> indexFileNamesTobeAdded,
/////////////////////////////////////////////////////////////////////////
0:   private String writeMergeIndexFileBasedOnSegmentFile(
0:       String segmentId,
0:       List<String> indexFileNamesTobeAdded,
/////////////////////////////////////////////////////////////////////////
0:     String uniqueId = String.valueOf(System.currentTimeMillis());
0:     String newSegmentFileName =
0:         SegmentFileStore.genSegmentFileName(segmentId, String.valueOf(uniqueId))
0:             + CarbonTablePath.SEGMENT_EXT;
1:     String path = CarbonTablePath.getSegmentFilesLocation(table.getTablePath())
1:         + CarbonCommonConstants.FILE_SEPARATOR + newSegmentFileName;
0:     SegmentFileStore.writeSegmentFile(sfs.getSegmentFile(), path);
0:     SegmentFileStore.updateSegmentFile(table.getTablePath(), segmentId, newSegmentFileName);
1: 
1:       file.delete();
1: 
0:     return uniqueId;
/////////////////////////////////////////////////////////////////////////
1:   public String mergeCarbonIndexFilesOfSegment(String segmentId,
/////////////////////////////////////////////////////////////////////////
0:   public String mergeCarbonIndexFilesOfSegment(String segmentId,
/////////////////////////////////////////////////////////////////////////
0:   public String mergeCarbonIndexFilesOfSegment(String segmentId,
author:ravipesala
-------------------------------------------------------------------------------
commit:74f5d67
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: import java.util.HashMap;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datamap.Segment;
1: import org.apache.carbondata.core.metadata.SegmentFileStore;
1: import org.apache.carbondata.core.statusmanager.SegmentStatus;
1: import org.apache.hadoop.fs.Path;
1: 
/////////////////////////////////////////////////////////////////////////
1:    * @param tablePath
/////////////////////////////////////////////////////////////////////////
0:   private SegmentIndexFIleMergeStatus mergeCarbonIndexFilesOfSegment(String segmentId,
1:       String tablePath, List<String> indexFileNamesTobeAdded,
0:       boolean readFileFooterFromCarbonDataFile) throws IOException {
1:     Segment segment = Segment.getSegment(segmentId, tablePath);
1:     String segmentPath = CarbonTablePath.getSegmentPath(tablePath, segmentId);
1:     CarbonFile[] indexFiles;
1:     SegmentFileStore sfs = null;
1:     if (segment != null && segment.getSegmentFileName() != null) {
1:       sfs = new SegmentFileStore(tablePath, segment.getSegmentFileName());
1:       List<CarbonFile> indexCarbonFiles = sfs.getIndexCarbonFiles();
1:       indexFiles = indexCarbonFiles.toArray(new CarbonFile[indexCarbonFiles.size()]);
1:     } else {
0:       indexFiles = SegmentIndexFileStore.getCarbonIndexFiles(segmentPath);
1:     }
1:       if (sfs == null) {
0:         return mergeNormalSegment(indexFileNamesTobeAdded, readFileFooterFromCarbonDataFile,
0:             segmentPath, indexFiles);
0:         return mergePartitionSegment(indexFileNamesTobeAdded, sfs, indexFiles);
1:     return null;
1:   }
1: 
1: 
0:   private SegmentIndexFIleMergeStatus mergeNormalSegment(List<String> indexFileNamesTobeAdded,
0:       boolean readFileFooterFromCarbonDataFile, String segmentPath, CarbonFile[] indexFiles)
0:       throws IOException {
1:     SegmentIndexFileStore fileStore = new SegmentIndexFileStore();
0:     if (readFileFooterFromCarbonDataFile) {
0:       // this case will be used in case of upgrade where old store will not have the blocklet
0:       // info in the index file and therefore blocklet info need to be read from the file footer
0:       // in the carbondata file
0:       fileStore.readAllIndexAndFillBolckletInfo(segmentPath);
1:     } else {
0:       fileStore.readAllIIndexOfSegment(segmentPath);
1:     }
1:     Map<String, byte[]> indexMap = fileStore.getCarbonIndexMap();
0:     writeMergeIndexFile(indexFileNamesTobeAdded, segmentPath, indexMap);
1:     for (CarbonFile indexFile : indexFiles) {
1:       indexFile.delete();
1:     }
1:     return null;
1:   }
1: 
0:   private SegmentIndexFIleMergeStatus mergePartitionSegment(List<String> indexFileNamesTobeAdded,
0:       SegmentFileStore sfs, CarbonFile[] indexFiles) throws IOException {
1:     SegmentIndexFileStore fileStore = new SegmentIndexFileStore();
1:     fileStore
0:         .readAllIIndexOfSegment(sfs.getSegmentFile(), sfs.getTablePath(), SegmentStatus.SUCCESS,
0:             true);
1:     Map<String, byte[]> indexMap = fileStore.getCarbonIndexMapWithFullPath();
1:     Map<String, Map<String, byte[]>> indexLocationMap = new HashMap<>();
1:     for (Map.Entry<String, byte[]> entry: indexMap.entrySet()) {
1:       Path path = new Path(entry.getKey());
1:       Map<String, byte[]> map = indexLocationMap.get(path.getParent().toString());
1:       if (map == null) {
1:         map = new HashMap<>();
1:         indexLocationMap.put(path.getParent().toString(), map);
1:       }
1:       map.put(path.getName(), entry.getValue());
1:     }
1:     for (Map.Entry<String, Map<String, byte[]>> entry : indexLocationMap.entrySet()) {
1:       String mergeIndexFile =
0:           writeMergeIndexFile(indexFileNamesTobeAdded, entry.getKey(), entry.getValue());
0:       for (Map.Entry<String, SegmentFileStore.FolderDetails> segentry : sfs.getLocationMap()
0:           .entrySet()) {
1:         String location = segentry.getKey();
1:         if (segentry.getValue().isRelative()) {
0:           location = sfs.getTablePath() + CarbonCommonConstants.FILE_SEPARATOR + location;
1:         }
1:         if (new Path(entry.getKey()).equals(new Path(location))) {
1:           segentry.getValue().setMergeFileName(mergeIndexFile);
1:           break;
1:         }
1:       }
1:     }
1: 
0:     List<String> filesTobeDeleted = new ArrayList<>();
1:     for (CarbonFile file : indexFiles) {
0:       filesTobeDeleted.add(file.getAbsolutePath());
1:     }
0:     return new SegmentIndexFIleMergeStatus(sfs.getSegmentFile(), filesTobeDeleted);
1:   }
1: 
1:   private String writeMergeIndexFile(List<String> indexFileNamesTobeAdded, String segmentPath,
0:       Map<String, byte[]> indexMap) throws IOException {
1:     MergedBlockIndexHeader indexHeader = new MergedBlockIndexHeader();
1:     MergedBlockIndex mergedBlockIndex = new MergedBlockIndex();
1:     List<String> fileNames = new ArrayList<>(indexMap.size());
1:     List<ByteBuffer> data = new ArrayList<>(indexMap.size());
1:     for (Map.Entry<String, byte[]> entry : indexMap.entrySet()) {
1:       if (indexFileNamesTobeAdded == null ||
1:           indexFileNamesTobeAdded.contains(entry.getKey())) {
1:         fileNames.add(entry.getKey());
1:         data.add(ByteBuffer.wrap(entry.getValue()));
1:       }
1:     }
1:     if (fileNames.size() > 0) {
0:       String mergeIndexName = System.currentTimeMillis() + CarbonTablePath.MERGE_INDEX_FILE_EXT;
1:       openThriftWriter(segmentPath + "/" + mergeIndexName);
1:       indexHeader.setFile_names(fileNames);
1:       mergedBlockIndex.setFileData(data);
1:       writeMergedBlockIndexHeader(indexHeader);
1:       writeMergedBlockIndex(mergedBlockIndex);
1:       close();
1:       return mergeIndexName;
1:     }
1:     return null;
1:    * @param segmentId
0:   public SegmentIndexFIleMergeStatus mergeCarbonIndexFilesOfSegment(String segmentId,
0:       String tablePath, List<String> indexFileNamesTobeAdded) throws IOException {
0:     return mergeCarbonIndexFilesOfSegment(segmentId, tablePath, indexFileNamesTobeAdded, false);
1:    *
1:    * @param segmentId
0:   public SegmentIndexFIleMergeStatus mergeCarbonIndexFilesOfSegment(String segmentId,
1:       String tablePath) throws IOException {
0:     return mergeCarbonIndexFilesOfSegment(segmentId, tablePath, null, false);
1:    *
1:    * @param segmentId
0:   public SegmentIndexFIleMergeStatus mergeCarbonIndexFilesOfSegment(String segmentId,
0:       String tablePath, boolean readFileFooterFromCarbonDataFile) throws IOException {
1:     return mergeCarbonIndexFilesOfSegment(segmentId, tablePath, null,
0:         readFileFooterFromCarbonDataFile);
/////////////////////////////////////////////////////////////////////////
1:   public static class SegmentIndexFIleMergeStatus implements Serializable {
1: 
1:     private SegmentFileStore.SegmentFile segmentFile;
1: 
1:     private List<String> filesTobeDeleted;
1: 
1:     public SegmentIndexFIleMergeStatus(SegmentFileStore.SegmentFile segmentFile,
1:         List<String> filesTobeDeleted) {
1:       this.segmentFile = segmentFile;
1:       this.filesTobeDeleted = filesTobeDeleted;
1:     }
1: 
1:     public SegmentFileStore.SegmentFile getSegmentFile() {
1:       return segmentFile;
1:     }
1: 
1:     public List<String> getFilesTobeDeleted() {
1:       return filesTobeDeleted;
1:     }
1:   }
commit:9659edc
/////////////////////////////////////////////////////////////////////////
1:    * @param indexFileNamesTobeAdded while merging it comsiders only these files.
1:    *                                If null then consider all
0:   public void mergeCarbonIndexFilesOfSegment(
0:       String segmentPath,
0:       List<String> indexFileNamesTobeAdded) throws IOException {
1:     if (isCarbonIndexFilePresent(indexFiles) || indexFileNamesTobeAdded != null) {
0:         if (indexFileNamesTobeAdded == null ||
0:             indexFileNamesTobeAdded.contains(entry.getKey())) {
0:           fileNames.add(entry.getKey());
0:           data.add(ByteBuffer.wrap(entry.getValue()));
1:         }
0:       if (fileNames.size() > 0) {
0:         openThriftWriter(
0:             segmentPath + "/" + System.currentTimeMillis() + CarbonTablePath.MERGE_INDEX_FILE_EXT);
0:         indexHeader.setFile_names(fileNames);
0:         mergedBlockIndex.setFileData(data);
0:         writeMergedBlockIndexHeader(indexHeader);
0:         writeMergedBlockIndex(mergedBlockIndex);
0:         close();
1:       }
1:   /**
1:    * Merge all the carbonindex files of segment to a  merged file
0:    * @param segmentPath
1:    * @throws IOException
1:    */
0:   public void mergeCarbonIndexFilesOfSegment(String segmentPath) throws IOException {
0:     mergeCarbonIndexFilesOfSegment(segmentPath, null);
1:   }
1: 
commit:17d0731
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.fileoperations.FileWriteOperation;
/////////////////////////////////////////////////////////////////////////
0:     CarbonFile[] indexFiles = SegmentIndexFileStore.getCarbonIndexFiles(segmentPath);
0:     if (isCarbonIndexFilePresent(indexFiles)) {
0:       openThriftWriter(
0:           segmentPath + "/" +
0:               System.currentTimeMillis() + CarbonTablePath.MERGE_INDEX_FILE_EXT);
/////////////////////////////////////////////////////////////////////////
1:   }
1:   private boolean isCarbonIndexFilePresent(CarbonFile[] indexFiles) {
1:     for (CarbonFile file : indexFiles) {
1:       if (file.getName().endsWith(CarbonTablePath.INDEX_FILE_EXT)) {
1:         return true;
1:       }
1:     }
1:     return false;
/////////////////////////////////////////////////////////////////////////
1:     thriftWriter.open(FileWriteOperation.OVERWRITE);
commit:0586146
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.writer;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
0: import org.apache.carbondata.core.datastore.filesystem.CarbonFileFilter;
0: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.indexstore.blockletindex.SegmentIndexFileStore;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: import org.apache.carbondata.format.MergedBlockIndex;
1: import org.apache.carbondata.format.MergedBlockIndexHeader;
1: 
1: public class CarbonIndexFileMergeWriter {
1: 
1:   /**
1:    * thrift writer object
1:    */
1:   private ThriftWriter thriftWriter;
1: 
1:   /**
0:    * Merge all the carbonindex files of segment to a  merged file
0:    * @param segmentPath
1:    * @throws IOException
1:    */
0:   public void mergeCarbonIndexFilesOfSegment(String segmentPath) throws IOException {
0:     CarbonFile carbonFile = FileFactory.getCarbonFile(segmentPath);
0:     CarbonFile[] indexFiles = carbonFile.listFiles(new CarbonFileFilter() {
0:       @Override public boolean accept(CarbonFile file) {
0:         return file.getName().endsWith(CarbonTablePath.INDEX_FILE_EXT);
1:       }
0:     });
0:     if (indexFiles.length > 0) {
0:       SegmentIndexFileStore fileStore = new SegmentIndexFileStore();
0:       fileStore.readAllIIndexOfSegment(segmentPath);
0:       openThriftWriter(segmentPath + "/" +
0:           System.currentTimeMillis() + CarbonTablePath.MERGE_INDEX_FILE_EXT);
0:       Map<String, byte[]> indexMap = fileStore.getCarbonIndexMap();
0:       MergedBlockIndexHeader indexHeader = new MergedBlockIndexHeader();
0:       MergedBlockIndex mergedBlockIndex = new MergedBlockIndex();
0:       List<String> fileNames = new ArrayList<>(indexMap.size());
0:       List<ByteBuffer> data = new ArrayList<>(indexMap.size());
0:       for (Map.Entry<String, byte[]> entry : indexMap.entrySet()) {
0:         fileNames.add(entry.getKey());
0:         data.add(ByteBuffer.wrap(entry.getValue()));
1:       }
0:       indexHeader.setFile_names(fileNames);
0:       mergedBlockIndex.setFileData(data);
0:       writeMergedBlockIndexHeader(indexHeader);
0:       writeMergedBlockIndex(mergedBlockIndex);
0:       close();
0:       for (CarbonFile indexFile : indexFiles) {
0:         indexFile.delete();
1:       }
1:     }
1: 
1:   }
1: 
1:   /**
1:    * It writes thrift object to file
1:    *
1:    * @throws IOException
1:    */
1:   private void writeMergedBlockIndexHeader(MergedBlockIndexHeader indexObject) throws IOException {
1:     thriftWriter.write(indexObject);
1:   }
1: 
1:   /**
1:    * It writes thrift object to file
1:    *
1:    * @throws IOException
1:    */
1:   private void writeMergedBlockIndex(MergedBlockIndex indexObject) throws IOException {
1:     thriftWriter.write(indexObject);
1:   }
1: 
1:   /**
1:    * Below method will be used to open the thrift writer
1:    *
1:    * @param filePath file path where data need to be written
1:    * @throws IOException throws io exception in case of any failure
1:    */
1:   private void openThriftWriter(String filePath) throws IOException {
1:     // create thrift writer instance
1:     thriftWriter = new ThriftWriter(filePath, false);
1:     // open the file stream
0:     thriftWriter.open();
1:   }
1: 
1:   /**
1:    * Below method will be used to close the thrift object
1:    */
1:   private void close() throws IOException {
1:     thriftWriter.close();
1:   }
1: 
1: }
============================================================================