1:f089287: /*
1:f089287:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f089287:  * contributor license agreements.  See the NOTICE file distributed with
1:f089287:  * this work for additional information regarding copyright ownership.
1:f089287:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f089287:  * (the "License"); you may not use this file except in compliance with
1:f089287:  * the License.  You may obtain a copy of the License at
1:f089287:  *
1:f089287:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f089287:  *
1:f089287:  * Unless required by applicable law or agreed to in writing, software
1:f089287:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f089287:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f089287:  * See the License for the specific language governing permissions and
1:f089287:  * limitations under the License.
1:f089287:  */
1:f089287: 
1:f089287: package org.apache.carbondata.processing.datamap;
1:f089287: 
1:d35fbaf: import java.io.IOException;
1:f089287: import java.util.ArrayList;
1:f089287: import java.util.List;
1:f089287: import java.util.Map;
1:f089287: import java.util.Set;
1:f089287: import java.util.concurrent.ConcurrentHashMap;
1:f089287: 
1:f089287: import org.apache.carbondata.common.logging.LogService;
1:f089287: import org.apache.carbondata.common.logging.LogServiceFactory;
1:f089287: import org.apache.carbondata.core.datamap.DataMapMeta;
1:f089287: import org.apache.carbondata.core.datamap.DataMapStoreManager;
1:8d3c774: import org.apache.carbondata.core.datamap.Segment;
1:f089287: import org.apache.carbondata.core.datamap.TableDataMap;
1:fc2a7eb: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
1:fc2a7eb: import org.apache.carbondata.core.datamap.dev.DataMapWriter;
1:cd7c210: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1:f089287: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:57b4571: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:56330ae: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:f089287: import org.apache.carbondata.processing.store.TablePage;
1:f089287: 
1:f089287: /**
1:fc2a7eb:  * It is for writing DataMap for one table
1:f089287:  */
1:f089287: public class DataMapWriterListener {
1:f089287: 
1:f089287:   private static final LogService LOG = LogServiceFactory.getLogService(
1:f089287:       DataMapWriterListener.class.getCanonicalName());
1:f089287: 
1:9db662a:   // list indexed column -> list of data map writer
1:9db662a:   private Map<List<CarbonColumn>, List<DataMapWriter>> registry = new ConcurrentHashMap<>();
1:57b4571:   // table for this listener
1:57b4571:   private CarbonTableIdentifier tblIdentifier;
1:57b4571: 
1:57b4571:   public CarbonTableIdentifier getTblIdentifier() {
1:57b4571:     return tblIdentifier;
1:57b4571:   }
1:f089287: 
1:f089287:   /**
1:f089287:    * register all datamap writer for specified table and segment
1:f089287:    */
1:cd7c210:   public void registerAllWriter(CarbonTable carbonTable, String segmentId,
1:cd7c210:       String taskNo, SegmentProperties segmentProperties) {
1:98c7581:     // clear cache in executor side
1:98c7581:     DataMapStoreManager.getInstance()
1:98c7581:         .clearDataMaps(carbonTable.getCarbonTableIdentifier().getTableUniqueName());
1:5f2a748:     List<TableDataMap> tableIndices;
1:5f2a748:     try {
1:5f2a748:       tableIndices = DataMapStoreManager.getInstance().getAllDataMap(carbonTable);
1:5f2a748:     } catch (IOException e) {
1:5f2a748:       LOG.error(e, "Error while retrieving datamaps");
1:5f2a748:       throw new RuntimeException(e);
1:5f2a748:     }
1:fc2a7eb:     if (tableIndices != null) {
1:57b4571:       tblIdentifier = carbonTable.getCarbonTableIdentifier();
1:fc2a7eb:       for (TableDataMap tableDataMap : tableIndices) {
1:747be9b:         // register it only if it is not lazy datamap, for lazy datamap, user
1:747be9b:         // will rebuild the datamap manually
1:747be9b:         if (!tableDataMap.getDataMapSchema().isLazy()) {
1:747be9b:           DataMapFactory factory = tableDataMap.getDataMapFactory();
1:cd7c210:           register(factory, segmentId, taskNo, segmentProperties);
1:747be9b:         }
1:f089287:       }
1:f089287:     }
1:f089287:   }
1:f089287: 
1:f089287:   /**
1:fc2a7eb:    * Register a DataMapWriter
1:f089287:    */
1:cd7c210:   private void register(DataMapFactory factory, String segmentId,
1:cd7c210:       String taskNo, SegmentProperties segmentProperties) {
1:f089287:     assert (factory != null);
1:f089287:     assert (segmentId != null);
1:f089287:     DataMapMeta meta = factory.getMeta();
1:f089287:     if (meta == null) {
1:f089287:       // if data map does not have meta, no need to register
1:f089287:       return;
1:f089287:     }
1:9db662a:     List<CarbonColumn> columns = factory.getMeta().getIndexedColumns();
1:fc2a7eb:     List<DataMapWriter> writers = registry.get(columns);
1:9db662a:     DataMapWriter writer = null;
1:9db662a:     try {
1:cd7c210:       writer = factory.createWriter(new Segment(segmentId), taskNo, segmentProperties);
1:9db662a:     } catch (IOException e) {
1:9db662a:       LOG.error("Failed to create DataMapWriter: " + e.getMessage());
1:9db662a:       throw new DataMapWriterException(e);
1:9db662a:     }
1:f089287:     if (writers != null) {
1:f089287:       writers.add(writer);
1:f089287:     } else {
1:f089287:       writers = new ArrayList<>();
1:f089287:       writers.add(writer);
1:f089287:       registry.put(columns, writers);
1:f089287:     }
1:fc2a7eb:     LOG.info("DataMapWriter " + writer + " added");
1:f089287:   }
1:f089287: 
1:9db662a:   public void onBlockStart(String blockId) throws IOException {
1:fc2a7eb:     for (List<DataMapWriter> writers : registry.values()) {
1:fc2a7eb:       for (DataMapWriter writer : writers) {
1:d35fbaf:         writer.onBlockStart(blockId);
1:f089287:       }
1:f089287:     }
1:f089287:   }
1:f089287: 
1:bbb1092:   public void onBlockEnd(String blockId) throws IOException {
1:fc2a7eb:     for (List<DataMapWriter> writers : registry.values()) {
1:fc2a7eb:       for (DataMapWriter writer : writers) {
1:f089287:         writer.onBlockEnd(blockId);
1:f089287:       }
1:f089287:     }
1:f089287:   }
1:f089287: 
1:9db662a:   public void onBlockletStart(int blockletId) throws IOException {
1:fc2a7eb:     for (List<DataMapWriter> writers : registry.values()) {
1:fc2a7eb:       for (DataMapWriter writer : writers) {
1:f089287:         writer.onBlockletStart(blockletId);
1:f089287:       }
1:f089287:     }
1:f089287:   }
1:f089287: 
1:9db662a:   public void onBlockletEnd(int blockletId) throws IOException {
1:fc2a7eb:     for (List<DataMapWriter> writers : registry.values()) {
1:fc2a7eb:       for (DataMapWriter writer : writers) {
1:f089287:         writer.onBlockletEnd(blockletId);
1:f089287:       }
1:f089287:     }
1:f089287:   }
1:f089287: 
1:f089287:   /**
1:f089287:    * Pick corresponding column pages and add to all registered datamap
1:f089287:    *
1:f089287:    * @param pageId     sequence number of page, start from 0
1:f089287:    * @param tablePage  page data
1:f089287:    */
1:bbb1092:   public void onPageAdded(int blockletId, int pageId, TablePage tablePage) throws IOException {
1:9db662a:     Set<Map.Entry<List<CarbonColumn>, List<DataMapWriter>>> entries = registry.entrySet();
1:9db662a:     for (Map.Entry<List<CarbonColumn>, List<DataMapWriter>> entry : entries) {
1:9db662a:       List<CarbonColumn> indexedColumns = entry.getKey();
1:f089287:       ColumnPage[] pages = new ColumnPage[indexedColumns.size()];
1:f089287:       for (int i = 0; i < indexedColumns.size(); i++) {
1:9db662a:         pages[i] = tablePage.getColumnPage(indexedColumns.get(i).getColName());
1:f089287:       }
1:fc2a7eb:       List<DataMapWriter> writers = entry.getValue();
1:9db662a:       int pageSize = pages[0].getPageSize();
1:9db662a: 
1:fc2a7eb:       for (DataMapWriter writer : writers) {
1:9db662a:         writer.onPageAdded(blockletId, pageId, pageSize, pages);
1:f089287:       }
1:f089287:     }
1:f089287:   }
1:f089287: 
1:d35fbaf:   /**
1:d35fbaf:    * Finish all datamap writers
1:d35fbaf:    */
1:d35fbaf:   public void finish() throws IOException {
1:fc2a7eb:     for (List<DataMapWriter> writers : registry.values()) {
1:fc2a7eb:       for (DataMapWriter writer : writers) {
1:d35fbaf:         writer.finish();
1:d35fbaf:       }
1:d35fbaf:     }
1:60dfdd3:     registry.clear();
1:d35fbaf:   }
1:d35fbaf: 
1:f089287: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:98c7581
/////////////////////////////////////////////////////////////////////////
1:     // clear cache in executor side
1:     DataMapStoreManager.getInstance()
1:         .clearDataMaps(carbonTable.getCarbonTableIdentifier().getTableUniqueName());
commit:57b4571
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
/////////////////////////////////////////////////////////////////////////
1:   // table for this listener
1:   private CarbonTableIdentifier tblIdentifier;
1: 
1:   public CarbonTableIdentifier getTblIdentifier() {
1:     return tblIdentifier;
1:   }
/////////////////////////////////////////////////////////////////////////
1:       tblIdentifier = carbonTable.getCarbonTableIdentifier();
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.block.SegmentProperties;
/////////////////////////////////////////////////////////////////////////
1:   public void registerAllWriter(CarbonTable carbonTable, String segmentId,
1:       String taskNo, SegmentProperties segmentProperties) {
/////////////////////////////////////////////////////////////////////////
1:           register(factory, segmentId, taskNo, segmentProperties);
/////////////////////////////////////////////////////////////////////////
1:   private void register(DataMapFactory factory, String segmentId,
1:       String taskNo, SegmentProperties segmentProperties) {
/////////////////////////////////////////////////////////////////////////
1:       writer = factory.createWriter(new Segment(segmentId), taskNo, segmentProperties);
commit:859d71c
/////////////////////////////////////////////////////////////////////////
0:     AbstractDataMapWriter writer = factory.createWriter(
0:         new Segment(segmentId, null), dataWritePath);
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
0:     AbstractDataMapWriter writer = factory.createWriter(new Segment(segmentId, null), dataWritePath);
author:ravipesala
-------------------------------------------------------------------------------
commit:60dfdd3
/////////////////////////////////////////////////////////////////////////
1:     registry.clear();
commit:8b33ab2
/////////////////////////////////////////////////////////////////////////
0:   public void onBlockStart(String blockId, String blockPath, String taskName) throws IOException {
0:         writer.onBlockStart(blockId, taskName);
commit:5f2a748
/////////////////////////////////////////////////////////////////////////
1:     List<TableDataMap> tableIndices;
1:     try {
1:       tableIndices = DataMapStoreManager.getInstance().getAllDataMap(carbonTable);
1:     } catch (IOException e) {
1:       LOG.error(e, "Error while retrieving datamaps");
1:       throw new RuntimeException(e);
1:     }
commit:d35fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datamap.dev.AbstractDataMapWriter;
/////////////////////////////////////////////////////////////////////////
0:   private Map<List<String>, List<AbstractDataMapWriter>> registry = new ConcurrentHashMap<>();
0:   public void registerAllWriter(AbsoluteTableIdentifier identifier, String segmentId,
0:       String dataWritePath) {
0:         register(factory, segmentId, dataWritePath);
0:    * Register a AbstractDataMapWriter
0:   private void register(DataMapFactory factory, String segmentId, String dataWritePath) {
/////////////////////////////////////////////////////////////////////////
0:     List<AbstractDataMapWriter> writers = registry.get(columns);
0:     AbstractDataMapWriter writer = factory.createWriter(new Segment(segmentId, null));
/////////////////////////////////////////////////////////////////////////
0:     LOG.info("AbstractDataMapWriter " + writer + " added");
0:     for (List<AbstractDataMapWriter> writers : registry.values()) {
0:       for (AbstractDataMapWriter writer : writers) {
1:         writer.onBlockStart(blockId);
0:     for (List<AbstractDataMapWriter> writers : registry.values()) {
0:       for (AbstractDataMapWriter writer : writers) {
0:     for (List<AbstractDataMapWriter> writers : registry.values()) {
0:       for (AbstractDataMapWriter writer : writers) {
0:     for (List<AbstractDataMapWriter> writers : registry.values()) {
0:       for (AbstractDataMapWriter writer : writers) {
/////////////////////////////////////////////////////////////////////////
0:     Set<Map.Entry<List<String>, List<AbstractDataMapWriter>>> entries = registry.entrySet();
0:     for (Map.Entry<List<String>, List<AbstractDataMapWriter>> entry : entries) {
0:       List<AbstractDataMapWriter> writers = entry.getValue();
0:       for (AbstractDataMapWriter writer : writers) {
1:   /**
1:    * Finish all datamap writers
1:    */
1:   public void finish() throws IOException {
0:     for (List<AbstractDataMapWriter> writers : registry.values()) {
0:       for (AbstractDataMapWriter writer : writers) {
1:         writer.finish();
1:       }
1:     }
1:   }
1: 
commit:8d3c774
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.Segment;
/////////////////////////////////////////////////////////////////////////
0:     DataMapWriter writer = factory.createWriter(new Segment(segmentId, null));
author:Jacky Li
-------------------------------------------------------------------------------
commit:747be9b
/////////////////////////////////////////////////////////////////////////
1:         // register it only if it is not lazy datamap, for lazy datamap, user
1:         // will rebuild the datamap manually
1:         if (!tableDataMap.getDataMapSchema().isLazy()) {
1:           DataMapFactory factory = tableDataMap.getDataMapFactory();
0:           register(factory, segmentId, taskNo);
1:         }
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
/////////////////////////////////////////////////////////////////////////
1:   // list indexed column -> list of data map writer
1:   private Map<List<CarbonColumn>, List<DataMapWriter>> registry = new ConcurrentHashMap<>();
0:   public void registerAllWriter(CarbonTable carbonTable, String segmentId, String taskNo) {
/////////////////////////////////////////////////////////////////////////
0:         register(factory, segmentId, taskNo);
/////////////////////////////////////////////////////////////////////////
0:   private void register(DataMapFactory factory, String segmentId, String taskNo) {
/////////////////////////////////////////////////////////////////////////
1:     List<CarbonColumn> columns = factory.getMeta().getIndexedColumns();
1:     DataMapWriter writer = null;
1:     try {
0:       writer = factory.createWriter(new Segment(segmentId), taskNo);
1:     } catch (IOException e) {
1:       LOG.error("Failed to create DataMapWriter: " + e.getMessage());
1:       throw new DataMapWriterException(e);
1:     }
/////////////////////////////////////////////////////////////////////////
1:   public void onBlockStart(String blockId) throws IOException {
0:         writer.onBlockStart(blockId);
/////////////////////////////////////////////////////////////////////////
1:   public void onBlockletStart(int blockletId) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public void onBlockletEnd(int blockletId) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     Set<Map.Entry<List<CarbonColumn>, List<DataMapWriter>>> entries = registry.entrySet();
1:     for (Map.Entry<List<CarbonColumn>, List<DataMapWriter>> entry : entries) {
1:       List<CarbonColumn> indexedColumns = entry.getKey();
1:         pages[i] = tablePage.getColumnPage(indexedColumns.get(i).getColName());
1:       int pageSize = pages[0].getPageSize();
1: 
1:         writer.onPageAdded(blockletId, pageId, pageSize, pages);
commit:bbb1092
/////////////////////////////////////////////////////////////////////////
0:   public void onBlockStart(String blockId, String blockPath) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public void onBlockEnd(String blockId) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public void onPageAdded(int blockletId, int pageId, TablePage tablePage) throws IOException {
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
1: import org.apache.carbondata.core.datamap.dev.DataMapWriter;
1:  * It is for writing DataMap for one table
/////////////////////////////////////////////////////////////////////////
0:   private Map<List<String>, List<DataMapWriter>> registry = new ConcurrentHashMap<>();
0:     List<TableDataMap> tableIndices = DataMapStoreManager.getInstance().getAllDataMap(carbonTable);
1:     if (tableIndices != null) {
1:       for (TableDataMap tableDataMap : tableIndices) {
0:         DataMapFactory factory = tableDataMap.getDataMapFactory();
1:    * Register a DataMapWriter
0:   private void register(DataMapFactory factory, String segmentId, String dataWritePath) {
/////////////////////////////////////////////////////////////////////////
1:     List<DataMapWriter> writers = registry.get(columns);
0:     DataMapWriter writer = factory.createWriter(new Segment(segmentId, null), dataWritePath);
/////////////////////////////////////////////////////////////////////////
1:     LOG.info("DataMapWriter " + writer + " added");
1:     for (List<DataMapWriter> writers : registry.values()) {
1:       for (DataMapWriter writer : writers) {
1:     for (List<DataMapWriter> writers : registry.values()) {
1:       for (DataMapWriter writer : writers) {
1:     for (List<DataMapWriter> writers : registry.values()) {
1:       for (DataMapWriter writer : writers) {
1:     for (List<DataMapWriter> writers : registry.values()) {
1:       for (DataMapWriter writer : writers) {
/////////////////////////////////////////////////////////////////////////
0:     Set<Map.Entry<List<String>, List<DataMapWriter>>> entries = registry.entrySet();
0:     for (Map.Entry<List<String>, List<DataMapWriter>> entry : entries) {
1:       List<DataMapWriter> writers = entry.getValue();
1:       for (DataMapWriter writer : writers) {
/////////////////////////////////////////////////////////////////////////
1:     for (List<DataMapWriter> writers : registry.values()) {
1:       for (DataMapWriter writer : writers) {
commit:89a12af
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datamap.dev.IndexDataMapFactory;
0:  * It is for writing IndexDataMap for one table
/////////////////////////////////////////////////////////////////////////
0:         IndexDataMapFactory factory = tableDataMap.getIndexDataMapFactory();
/////////////////////////////////////////////////////////////////////////
0:   private void register(IndexDataMapFactory factory, String segmentId, String dataWritePath) {
commit:f089287
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.datamap;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.datamap.DataMapMeta;
1: import org.apache.carbondata.core.datamap.DataMapStoreManager;
1: import org.apache.carbondata.core.datamap.TableDataMap;
0: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
0: import org.apache.carbondata.core.datamap.dev.DataMapWriter;
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
0: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.processing.store.TablePage;
1: 
1: /**
0:  * It is for writing DataMap for one table
1:  */
1: public class DataMapWriterListener {
1: 
1:   private static final LogService LOG = LogServiceFactory.getLogService(
1:       DataMapWriterListener.class.getCanonicalName());
1: 
0:   // list indexed column name -> list of data map writer
0:   private Map<List<String>, List<DataMapWriter>> registry = new ConcurrentHashMap<>();
1: 
1:   /**
1:    * register all datamap writer for specified table and segment
1:    */
0:   public void registerAllWriter(AbsoluteTableIdentifier identifier, String segmentId) {
0:     List<TableDataMap> tableDataMaps = DataMapStoreManager.getInstance().getAllDataMap(identifier);
0:     if (tableDataMaps != null) {
0:       for (TableDataMap tableDataMap : tableDataMaps) {
0:         DataMapFactory factory = tableDataMap.getDataMapFactory();
0:         register(factory, segmentId);
1:       }
1:     }
1:   }
1: 
1:   /**
0:    * Register a DataMapWriter
1:    */
0:   private void register(DataMapFactory factory, String segmentId) {
1:     assert (factory != null);
1:     assert (segmentId != null);
1:     DataMapMeta meta = factory.getMeta();
1:     if (meta == null) {
1:       // if data map does not have meta, no need to register
1:       return;
1:     }
0:     List<String> columns = factory.getMeta().getIndexedColumns();
0:     List<DataMapWriter> writers = registry.get(columns);
0:     DataMapWriter writer = factory.createWriter(segmentId);
1:     if (writers != null) {
1:       writers.add(writer);
1:     } else {
1:       writers = new ArrayList<>();
1:       writers.add(writer);
1:       registry.put(columns, writers);
1:     }
0:     LOG.info("DataMapWriter " + writer + " added");
1:   }
1: 
0:   public void onBlockStart(String blockId) {
0:     for (List<DataMapWriter> writers : registry.values()) {
0:       for (DataMapWriter writer : writers) {
0:         writer.onBlockStart(blockId);
1:       }
1:     }
1:   }
1: 
0:   public void onBlockEnd(String blockId) {
0:     for (List<DataMapWriter> writers : registry.values()) {
0:       for (DataMapWriter writer : writers) {
1:         writer.onBlockEnd(blockId);
1:       }
1:     }
1:   }
1: 
0:   public void onBlockletStart(int blockletId) {
0:     for (List<DataMapWriter> writers : registry.values()) {
0:       for (DataMapWriter writer : writers) {
1:         writer.onBlockletStart(blockletId);
1:       }
1:     }
1:   }
1: 
0:   public void onBlockletEnd(int blockletId) {
0:     for (List<DataMapWriter> writers : registry.values()) {
0:       for (DataMapWriter writer : writers) {
1:         writer.onBlockletEnd(blockletId);
1:       }
1:     }
1:   }
1: 
1:   /**
1:    * Pick corresponding column pages and add to all registered datamap
1:    *
1:    * @param pageId     sequence number of page, start from 0
1:    * @param tablePage  page data
1:    */
0:   public void onPageAdded(int blockletId, int pageId, TablePage tablePage) {
0:     Set<Map.Entry<List<String>, List<DataMapWriter>>> entries = registry.entrySet();
0:     for (Map.Entry<List<String>, List<DataMapWriter>> entry : entries) {
0:       List<String> indexedColumns = entry.getKey();
1:       ColumnPage[] pages = new ColumnPage[indexedColumns.size()];
1:       for (int i = 0; i < indexedColumns.size(); i++) {
0:         pages[i] = tablePage.getColumnPage(indexedColumns.get(i));
1:       }
0:       List<DataMapWriter> writers = entry.getValue();
0:       for (DataMapWriter writer : writers) {
0:         writer.onPageAdded(blockletId, pageId, pages);
1:       }
1:     }
1:   }
1: 
1: }
author:sounakr
-------------------------------------------------------------------------------
commit:c58eb43
/////////////////////////////////////////////////////////////////////////
0:     DataMapWriter writer = factory.createWriter(new Segment(segmentId, null, null), dataWritePath);
commit:ca7e2e3
/////////////////////////////////////////////////////////////////////////
0:   public void onBlockStart(String blockId, String blockPath) {
0:         writer.onBlockStart(blockId, blockPath);
author:akashrn5
-------------------------------------------------------------------------------
commit:860e144
/////////////////////////////////////////////////////////////////////////
0:   public void onBlockStart(String blockId, String blockPath, long taskId) throws IOException {
0:         writer.onBlockStart(blockId, taskId);
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:56330ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
/////////////////////////////////////////////////////////////////////////
0:   public void registerAllWriter(CarbonTable carbonTable, String segmentId,
0:     List<TableDataMap> tableDataMaps = DataMapStoreManager.getInstance().getAllDataMap(carbonTable);
============================================================================