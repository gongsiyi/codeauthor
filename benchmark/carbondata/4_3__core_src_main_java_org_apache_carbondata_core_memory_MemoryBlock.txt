1:f1f9348: /*
1:f1f9348:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f1f9348:  * contributor license agreements.  See the NOTICE file distributed with
1:f1f9348:  * this work for additional information regarding copyright ownership.
1:f1f9348:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f1f9348:  * (the "License"); you may not use this file except in compliance with
1:f1f9348:  * the License.  You may obtain a copy of the License at
1:f1f9348:  *
1:f1f9348:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f1f9348:  *
1:f1f9348:  * Unless required by applicable law or agreed to in writing, software
1:f1f9348:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f1f9348:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f1f9348:  * See the License for the specific language governing permissions and
1:f1f9348:  * limitations under the License.
3:f1f9348:  */
4:f1f9348: 
1:f1f9348: package org.apache.carbondata.core.memory;
1:f1f9348: 
1:f1f9348: import javax.annotation.Nullable;
1:f911403: 
1:f1f9348: 
3:f1f9348: /**
1:f1f9348:  * Code ported from Apache Spark {org.apache.spark.unsafe.memory} package
1:f1f9348:  * A consecutive block of memory, starting at a {@link MemoryLocation} with a fixed size.
1:f1f9348:  */
1:f1f9348: public class MemoryBlock extends MemoryLocation {
1:f1f9348: 
1:f1f9348:   private final long length;
1:f1f9348: 
1:2892326:   /**
1:2892326:    * whether freed or not
1:2892326:    */
1:2892326:   private boolean isFreed = false;
1:2892326: 
1:f1f9348:   public MemoryBlock(@Nullable Object obj, long offset, long length) {
1:f1f9348:     super(obj, offset);
1:f1f9348:     this.length = length;
1:2892326:     this.isFreed = false;
2:f1f9348:   }
1:2892326: 
1:f1f9348:   /**
1:f1f9348:    * Returns the size of the memory block.
1:f1f9348:    */
1:f1f9348:   public long size() {
1:f1f9348:     return length;
1:f1f9348:   }
1:f1f9348: 
1:2892326:   public boolean isFreedStatus() {
1:2892326:     return this.isFreed;
1:2892326:   }
1:2892326: 
1:2892326:   public void setFreedStatus(boolean freedStatus) {
1:2892326:     this.isFreed = freedStatus;
1:2892326:   }
1:f1f9348: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
commit:500654e
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:982d03f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:2892326
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * whether freed or not
1:    */
1:   private boolean isFreed = false;
1: 
1:     this.isFreed = false;
/////////////////////////////////////////////////////////////////////////
1:   public boolean isFreedStatus() {
1:     return this.isFreed;
1:   }
1: 
1:   public void setFreedStatus(boolean freedStatus) {
1:     this.isFreed = freedStatus;
1:   }
1: 
author:ravipesala
-------------------------------------------------------------------------------
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.memory;
1: 
1: import javax.annotation.Nullable;
1: 
0: import org.apache.spark.unsafe.Platform;
1: 
1: /**
1:  * Code ported from Apache Spark {org.apache.spark.unsafe.memory} package
1:  * A consecutive block of memory, starting at a {@link MemoryLocation} with a fixed size.
1:  */
1: public class MemoryBlock extends MemoryLocation {
1: 
1:   private final long length;
1: 
1:   /**
0:    * Optional page number; used when this MemoryBlock represents a page allocated by a
0:    * TaskMemoryManager. This field is public so that it can be modified by the TaskMemoryManager,
0:    * which lives in a different package.
1:    */
0:   public int pageNumber = -1;
1: 
1:   public MemoryBlock(@Nullable Object obj, long offset, long length) {
1:     super(obj, offset);
1:     this.length = length;
1:   }
1: 
1:   /**
1:    * Returns the size of the memory block.
1:    */
1:   public long size() {
1:     return length;
1:   }
1: 
1:   /**
0:    * Creates a memory block pointing to the memory used by the long array.
1:    */
0:   public static MemoryBlock fromLongArray(final long[] array) {
0:     return new MemoryBlock(array, Platform.LONG_ARRAY_OFFSET, array.length * 8);
1:   }
1: }
============================================================================