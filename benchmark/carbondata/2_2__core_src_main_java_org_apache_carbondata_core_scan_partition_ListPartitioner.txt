1:b6b93f0: /*
1:b6b93f0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b6b93f0:  * contributor license agreements.  See the NOTICE file distributed with
1:b6b93f0:  * this work for additional information regarding copyright ownership.
1:b6b93f0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b6b93f0:  * (the "License"); you may not use this file except in compliance with
1:b6b93f0:  * the License.  You may obtain a copy of the License at
1:b6b93f0:  *
1:b6b93f0:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b6b93f0:  *
1:b6b93f0:  * Unless required by applicable law or agreed to in writing, software
1:b6b93f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b6b93f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b6b93f0:  * See the License for the specific language governing permissions and
1:b6b93f0:  * limitations under the License.
1:b6b93f0:  */
1:b6b93f0: 
1:b6b93f0: package org.apache.carbondata.core.scan.partition;
1:b6b93f0: 
1:71934e9: import java.text.SimpleDateFormat;
1:b6b93f0: import java.util.List;
1:b6b93f0: import java.util.Map;
1:b6b93f0: 
1:71934e9: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:b6b93f0: import org.apache.carbondata.core.metadata.datatype.DataType;
1:b6b93f0: import org.apache.carbondata.core.metadata.schema.PartitionInfo;
1:71934e9: import org.apache.carbondata.core.util.CarbonProperties;
1:b6b93f0: 
1:b6b93f0: /**
1:b6b93f0:  * List Partitioner
1:b6b93f0:  */
1:b6b93f0: public class ListPartitioner implements Partitioner {
1:b6b93f0: 
1:71934e9:   private SimpleDateFormat timestampFormatter = new SimpleDateFormat(CarbonProperties.getInstance()
1:71934e9:       .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:71934e9:           CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
1:71934e9: 
1:71934e9:   private SimpleDateFormat dateFormatter = new SimpleDateFormat(CarbonProperties.getInstance()
1:71934e9:       .getProperty(CarbonCommonConstants.CARBON_DATE_FORMAT,
1:71934e9:           CarbonCommonConstants.CARBON_DATE_DEFAULT_FORMAT));
1:71934e9: 
1:b6b93f0:   /**
1:6488bc0:    * Map the value of ListPartition to partition id.
1:b6b93f0:    */
1:b6b93f0:   private Map<Object, Integer> map = new java.util.HashMap<Object, Integer>();
1:b6b93f0: 
1:b6b93f0:   private int numPartitions;
1:b6b93f0: 
1:b6b93f0:   public ListPartitioner(PartitionInfo partitionInfo) {
1:b6b93f0:     List<List<String>> values = partitionInfo.getListInfo();
1:b6b93f0:     DataType partitionColumnDataType = partitionInfo.getColumnSchemaList().get(0).getDataType();
1:b6b93f0:     numPartitions = values.size();
1:b6b93f0:     for (int i = 0; i < numPartitions; i++) {
1:b6b93f0:       for (String value : values.get(i)) {
1:71934e9:         map.put(PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType,
1:6488bc0:             timestampFormatter, dateFormatter), i + 1);
1:b6b93f0:       }
1:b6b93f0:     }
1:b6b93f0:   }
1:b6b93f0: 
1:b6b93f0:   /**
1:6488bc0:    * Number of partitions
1:b6b93f0:    * add extra default partition
1:b6b93f0:    * @return
1:b6b93f0:    */
1:b6b93f0:   @Override public int numPartitions() {
1:b6b93f0:     return numPartitions + 1;
1:b6b93f0:   }
1:b6b93f0: 
1:b6b93f0:   @Override public int getPartition(Object key) {
1:b6b93f0:     Integer partition = map.get(key);
1:b6b93f0:     if (partition == null) {
1:6488bc0:       return 0;
1:b6b93f0:     }
1:b6b93f0:     return partition;
1:b6b93f0:   }
1:b6b93f0: }
============================================================================
author:lionelcao
-------------------------------------------------------------------------------
commit:6488bc0
/////////////////////////////////////////////////////////////////////////
1:    * Map the value of ListPartition to partition id.
/////////////////////////////////////////////////////////////////////////
1:             timestampFormatter, dateFormatter), i + 1);
1:    * Number of partitions
/////////////////////////////////////////////////////////////////////////
1:       return 0;
author:QiangCai
-------------------------------------------------------------------------------
commit:71934e9
/////////////////////////////////////////////////////////////////////////
1: import java.text.SimpleDateFormat;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
1:   private SimpleDateFormat timestampFormatter = new SimpleDateFormat(CarbonProperties.getInstance()
1:       .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:           CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
1: 
1:   private SimpleDateFormat dateFormatter = new SimpleDateFormat(CarbonProperties.getInstance()
1:       .getProperty(CarbonCommonConstants.CARBON_DATE_FORMAT,
1:           CarbonCommonConstants.CARBON_DATE_DEFAULT_FORMAT));
1: 
/////////////////////////////////////////////////////////////////////////
1:         map.put(PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType,
0:             timestampFormatter, dateFormatter), i);
commit:b6b93f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.partition;
1: 
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.schema.PartitionInfo;
1: 
1: /**
1:  * List Partitioner
1:  */
1: public class ListPartitioner implements Partitioner {
1: 
1:   /**
0:    * map the value of ListPartition to partition id.
1:    */
1:   private Map<Object, Integer> map = new java.util.HashMap<Object, Integer>();
1: 
1:   private int numPartitions;
1: 
1:   public ListPartitioner(PartitionInfo partitionInfo) {
1:     List<List<String>> values = partitionInfo.getListInfo();
1:     DataType partitionColumnDataType = partitionInfo.getColumnSchemaList().get(0).getDataType();
1:     numPartitions = values.size();
1:     for (int i = 0; i < numPartitions; i++) {
1:       for (String value : values.get(i)) {
0:         map.put(PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType), i);
1:       }
1:     }
1:   }
1: 
1:   /**
0:    * number of partitions
1:    * add extra default partition
1:    * @return
1:    */
1:   @Override public int numPartitions() {
1:     return numPartitions + 1;
1:   }
1: 
1:   @Override public int getPartition(Object key) {
1:     Integer partition = map.get(key);
1:     if (partition == null) {
0:       return numPartitions;
1:     }
1:     return partition;
1:   }
1: }
============================================================================