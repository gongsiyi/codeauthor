1:f63b1ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:f63b1ff:  *
1:f63b1ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f63b1ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:f63b1ff:  */
1:349c59c: package org.apache.carbondata.processing.loading.parser.impl;
1:f63b1ff: 
1:f63b1ff: import java.util.regex.Pattern;
1:f63b1ff: 
1:f63b1ff: import org.apache.carbondata.core.util.CarbonUtil;
1:349c59c: import org.apache.carbondata.processing.loading.complexobjects.ArrayObject;
1:349c59c: import org.apache.carbondata.processing.loading.parser.ComplexParser;
1:349c59c: import org.apache.carbondata.processing.loading.parser.GenericParser;
1:f63b1ff: 
1:f63b1ff: import org.apache.commons.lang.ArrayUtils;
1:f63b1ff: 
1:f63b1ff: /**
1:f63b1ff:  * It parses the string to @{@link ArrayObject} using delimiter.
1:f63b1ff:  * It is thread safe as the state of class don't change while
1:496cde4:  * calling @{@link GenericParser#parse(Object)} method
1:f63b1ff:  */
1:f63b1ff: public class ArrayParserImpl implements ComplexParser<ArrayObject> {
1:f63b1ff: 
1:f63b1ff:   private Pattern pattern;
1:f63b1ff: 
1:496cde4:   private GenericParser child;
1:f63b1ff: 
1:496cde4:   private String nullFormat;
1:496cde4: 
1:496cde4:   public ArrayParserImpl(String delimiter, String nullFormat) {
1:f63b1ff:     pattern = Pattern.compile(CarbonUtil.delimiterConverter(delimiter));
1:496cde4:     this.nullFormat = nullFormat;
1:f63b1ff:   }
1:f63b1ff: 
1:f63b1ff:   @Override
1:496cde4:   public ArrayObject parse(Object data) {
1:496cde4:     if (data != null) {
1:496cde4:       String value = data.toString();
1:496cde4:       if (!value.isEmpty() && !value.equals(nullFormat)) {
1:496cde4:         String[] split = pattern.split(value, -1);
1:496cde4:         if (ArrayUtils.isNotEmpty(split)) {
1:496cde4:           Object[] array = new Object[split.length];
1:496cde4:           for (int i = 0; i < split.length; i++) {
1:496cde4:             array[i] = child.parse(split[i]);
1:496cde4:           }
1:496cde4:           return new ArrayObject(array);
1:f63b1ff:         }
1:f63b1ff:       }
1:f63b1ff:     }
1:f63b1ff:     return null;
1:f63b1ff:   }
1:f63b1ff: 
1:f63b1ff:   @Override
1:f63b1ff:   public void addChildren(GenericParser parser) {
1:496cde4:     child = parser;
1:f63b1ff:   }
1:f63b1ff: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.parser.impl;
1: import org.apache.carbondata.processing.loading.complexobjects.ArrayObject;
1: import org.apache.carbondata.processing.loading.parser.ComplexParser;
1: import org.apache.carbondata.processing.loading.parser.GenericParser;
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:496cde4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * calling @{@link GenericParser#parse(Object)} method
1:   private GenericParser child;
1:   private String nullFormat;
1: 
1:   public ArrayParserImpl(String delimiter, String nullFormat) {
1:     this.nullFormat = nullFormat;
1:   public ArrayObject parse(Object data) {
1:     if (data != null) {
1:       String value = data.toString();
1:       if (!value.isEmpty() && !value.equals(nullFormat)) {
1:         String[] split = pattern.split(value, -1);
1:         if (ArrayUtils.isNotEmpty(split)) {
1:           Object[] array = new Object[split.length];
1:           for (int i = 0; i < split.length; i++) {
1:             array[i] = child.parse(split[i]);
1:           }
1:           return new ArrayObject(array);
/////////////////////////////////////////////////////////////////////////
1:     child = parser;
commit:f63b1ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.parser.impl;
1: 
0: import java.util.ArrayList;
0: import java.util.List;
1: import java.util.regex.Pattern;
1: 
1: import org.apache.carbondata.core.util.CarbonUtil;
0: import org.apache.carbondata.processing.newflow.complexobjects.ArrayObject;
0: import org.apache.carbondata.processing.newflow.parser.ComplexParser;
0: import org.apache.carbondata.processing.newflow.parser.GenericParser;
1: 
1: import org.apache.commons.lang.ArrayUtils;
0: import org.apache.commons.lang.StringUtils;
1: 
1: /**
1:  * It parses the string to @{@link ArrayObject} using delimiter.
1:  * It is thread safe as the state of class don't change while
0:  * calling @{@link GenericParser#parse(String)} method
1:  */
1: public class ArrayParserImpl implements ComplexParser<ArrayObject> {
1: 
1:   private Pattern pattern;
1: 
0:   private List<GenericParser> children = new ArrayList<>();
1: 
0:   public ArrayParserImpl(String delimiter) {
1:     pattern = Pattern.compile(CarbonUtil.delimiterConverter(delimiter));
1:   }
1: 
1:   @Override
0:   public ArrayObject parse(String data) {
0:     if (StringUtils.isNotEmpty(data)) {
0:       String[] split = pattern.split(data, -1);
0:       if (ArrayUtils.isNotEmpty(split)) {
0:         Object[] array = new Object[children.size()];
0:         for (int i = 0; i < children.size(); i++) {
0:           array[i] = children.get(i).parse(split[i]);
1:         }
0:         return new ArrayObject(array);
1:       }
1:     }
1:     return null;
1:   }
1: 
1:   @Override
1:   public void addChildren(GenericParser parser) {
0:     children.add(parser);
1:   }
1: }
============================================================================