1:531dcd2: /*
1:531dcd2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:531dcd2:  * contributor license agreements.  See the NOTICE file distributed with
1:531dcd2:  * this work for additional information regarding copyright ownership.
1:531dcd2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:531dcd2:  * (the "License"); you may not use this file except in compliance with
1:531dcd2:  * the License.  You may obtain a copy of the License at
1:531dcd2:  *
1:531dcd2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:531dcd2:  *
1:531dcd2:  * Unless required by applicable law or agreed to in writing, software
1:531dcd2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:531dcd2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:531dcd2:  * See the License for the specific language governing permissions and
1:531dcd2:  * limitations under the License.
2:531dcd2:  */
4:531dcd2: 
1:531dcd2: package org.apache.carbondata.presto.readers;
1:531dcd2: 
1:a4c2ef5: import org.apache.carbondata.core.metadata.datatype.DataType;
1:a4c2ef5: import org.apache.carbondata.core.scan.result.vector.impl.CarbonColumnVectorImpl;
1:531dcd2: 
1:531dcd2: import com.facebook.presto.spi.block.Block;
1:531dcd2: import com.facebook.presto.spi.block.BlockBuilder;
1:531dcd2: import com.facebook.presto.spi.block.BlockBuilderStatus;
1:a4c2ef5: import com.facebook.presto.spi.type.IntegerType;
1:531dcd2: import com.facebook.presto.spi.type.Type;
1:531dcd2: 
2:531dcd2: /**
1:531dcd2:  * Class to read the Object Stream
1:531dcd2:  */
1:a4c2ef5: public class ObjectStreamReader extends CarbonColumnVectorImpl implements PrestoVectorBlockBuilder {
1:531dcd2: 
1:a4c2ef5:   protected int batchSize;
1:531dcd2: 
1:a4c2ef5:   protected Type type = IntegerType.INTEGER;
1:531dcd2: 
1:a4c2ef5:   protected BlockBuilder builder;
1:531dcd2: 
1:a4c2ef5:   public ObjectStreamReader(int batchSize, DataType dataType) {
1:a4c2ef5:     super(batchSize, dataType);
1:a4c2ef5:     this.batchSize = batchSize;
1:a4c2ef5:     this.builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
6:531dcd2:   }
1:531dcd2: 
1:a4c2ef5:   @Override public Block buildBlock() {
1:531dcd2:     return builder.build();
1:531dcd2:   }
1:531dcd2: 
1:a4c2ef5:   @Override public void setBatchSize(int batchSize) {
1:a4c2ef5:     this.batchSize = batchSize;
1:a4c2ef5:   }
1:a4c2ef5: 
1:a4c2ef5:   @Override public void putObject(int rowId, Object value) {
1:a4c2ef5:     type.writeObject(builder, value);
1:a4c2ef5:   }
1:a4c2ef5: 
1:a4c2ef5:   @Override public void putNull(int rowId) {
1:a4c2ef5:     builder.appendNull();
1:a4c2ef5:   }
1:a4c2ef5: 
1:a4c2ef5:   @Override public void reset() {
1:a4c2ef5:     builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:a4c2ef5:   }
1:a4c2ef5: 
1:531dcd2: }
============================================================================
author:sv71294
-------------------------------------------------------------------------------
commit:a4c2ef5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.scan.result.vector.impl.CarbonColumnVectorImpl;
1: import com.facebook.presto.spi.type.IntegerType;
1: public class ObjectStreamReader extends CarbonColumnVectorImpl implements PrestoVectorBlockBuilder {
1:   protected int batchSize;
1:   protected Type type = IntegerType.INTEGER;
1:   protected BlockBuilder builder;
1:   public ObjectStreamReader(int batchSize, DataType dataType) {
1:     super(batchSize, dataType);
1:     this.batchSize = batchSize;
1:     this.builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:   @Override public Block buildBlock() {
1:   @Override public void setBatchSize(int batchSize) {
1:     this.batchSize = batchSize;
1:   }
1: 
1:   @Override public void putObject(int rowId, Object value) {
1:     type.writeObject(builder, value);
1:   }
1: 
1:   @Override public void putNull(int rowId) {
1:     builder.appendNull();
1:   }
1: 
1:   @Override public void reset() {
1:     builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:   }
1: 
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
0:   public Block readBlock(Type type) throws IOException {
0:     if (isVectorReader) {
0:         for (int i = 0; i < numberOfRows; i++) {
0:       for (int i = 0; i < numberOfRows; i++) {
0:         type.writeObject(builder, streamData[i]);
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:Bhavya
-------------------------------------------------------------------------------
commit:e5e74fc
/////////////////////////////////////////////////////////////////////////
0:           type.writeObject(builder, columnVector.getData(i));
commit:531dcd2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto.readers;
1: 
0: import java.io.IOException;
1: 
1: import com.facebook.presto.spi.block.Block;
1: import com.facebook.presto.spi.block.BlockBuilder;
1: import com.facebook.presto.spi.block.BlockBuilderStatus;
1: import com.facebook.presto.spi.type.Type;
0: import io.airlift.slice.Slice;
1: 
1: /**
1:  * Class to read the Object Stream
1:  */
0: public class ObjectStreamReader  extends AbstractStreamReader {
1: 
1: 
1: 
0:   public ObjectStreamReader() {
1: 
1:   }
1: 
1:   /**
0:    * Function to create the object Block
0:    * @param type
0:    * @return
0:    * @throws IOException
1:    */
0:   public Block readBlock(Type type)
0:       throws IOException
0:   {
0:     int numberOfRows = 0;
0:     BlockBuilder builder = null;
0:     if(isVectorReader) {
0:       numberOfRows = batchSize;
0:       builder = type.createBlockBuilder(new BlockBuilderStatus(), numberOfRows);
0:       if (columnVector != null) {
0:         for(int i = 0; i < numberOfRows ; i++ ){
0:           type.writeObject(builder, columnVector.getByte(i));
1:         }
1:       }
1: 
0:     } else {
0:       numberOfRows = streamData.length;
0:       builder = type.createBlockBuilder(new BlockBuilderStatus(), numberOfRows);
0:       if (streamData != null) {
0:         for(int i = 0; i < numberOfRows ; i++ ){
0:           type.writeObject(builder, streamData[i]);
1:         }
1:       }
1:     }
1: 
1:     return builder.build();
1: 
1:   }
1: 
1: }
============================================================================