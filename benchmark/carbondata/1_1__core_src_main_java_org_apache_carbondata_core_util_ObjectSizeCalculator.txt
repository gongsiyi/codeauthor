1:377dee9: /*
1:377dee9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:377dee9:  * contributor license agreements.  See the NOTICE file distributed with
1:377dee9:  * this work for additional information regarding copyright ownership.
1:377dee9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:377dee9:  * (the "License"); you may not use this file except in compliance with
1:377dee9:  * the License.  You may obtain a copy of the License at
1:377dee9:  *
1:377dee9:  *    http://www.apache.org/licenses/LICENSE-2.0
1:377dee9:  *
1:377dee9:  * Unless required by applicable law or agreed to in writing, software
1:377dee9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:377dee9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:377dee9:  * See the License for the specific language governing permissions and
1:377dee9:  * limitations under the License.
1:377dee9:  */
1:377dee9: 
1:377dee9: package org.apache.carbondata.core.util;
1:377dee9: 
1:377dee9: import java.lang.reflect.Method;
1:377dee9: 
1:377dee9: import org.apache.carbondata.common.logging.LogService;
1:377dee9: import org.apache.carbondata.common.logging.LogServiceFactory;
1:377dee9: 
1:377dee9: /**
1:377dee9:  * This wrapper class is created so that core doesnt have direct dependency on spark
1:377dee9:  * TODO: Need to have carbon implementation if carbon needs to be used without spark
1:377dee9:  */
1:377dee9: public final class ObjectSizeCalculator {
1:377dee9:   /**
1:377dee9:    * Logger object for the class
1:377dee9:    */
1:377dee9:   private static final LogService LOGGER =
1:377dee9:       LogServiceFactory.getLogService(ObjectSizeCalculator.class.getName());
1:377dee9: 
1:377dee9:   /**
1:377dee9:    * Class of spark to invoke
1:377dee9:    */
1:377dee9:   private static String className = "org.apache.spark.util.SizeEstimator";
1:377dee9: 
1:377dee9:   private static Method estimateMethod = null;
1:377dee9: 
1:377dee9:   private static boolean methodAccessible = true;
1:377dee9: 
1:377dee9:   /**
1:377dee9:    * Invoke the spark's implementation of Object size computation
1:377dee9:    * return the default value passed if function cannot be invoked
1:377dee9:    * @param anObject
1:377dee9:    * @param defValue
1:377dee9:    * @return
1:377dee9:    */
1:377dee9:   public static long estimate(Object anObject, long defValue) {
1:377dee9:     try {
1:377dee9:       if (methodAccessible) {
1:377dee9:         if (null == estimateMethod) {
1:377dee9:           estimateMethod = Class.forName(className).getMethod("estimate", Object.class);
1:377dee9:           estimateMethod.setAccessible(true);
1:377dee9:         }
1:377dee9:         return (Long) estimateMethod.invoke(null, anObject);
1:377dee9:       } else {
1:377dee9:         return defValue;
1:377dee9:       }
1:377dee9:     } catch (Throwable ex) {
1:377dee9:       // throwable is being caught as external interface is being invoked through reflection
1:377dee9:       // and runtime exceptions might get thrown
1:377dee9:       LOGGER.error(ex, "Could not access method SizeEstimator:estimate.Returning default value");
1:377dee9:       methodAccessible = false;
1:377dee9:       return defValue;
1:377dee9:     }
1:377dee9:   }
1:377dee9: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:377dee9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.util;
1: 
1: import java.lang.reflect.Method;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: 
1: /**
1:  * This wrapper class is created so that core doesnt have direct dependency on spark
1:  * TODO: Need to have carbon implementation if carbon needs to be used without spark
1:  */
1: public final class ObjectSizeCalculator {
1:   /**
1:    * Logger object for the class
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(ObjectSizeCalculator.class.getName());
1: 
1:   /**
1:    * Class of spark to invoke
1:    */
1:   private static String className = "org.apache.spark.util.SizeEstimator";
1: 
1:   private static Method estimateMethod = null;
1: 
1:   private static boolean methodAccessible = true;
1: 
1:   /**
1:    * Invoke the spark's implementation of Object size computation
1:    * return the default value passed if function cannot be invoked
1:    * @param anObject
1:    * @param defValue
1:    * @return
1:    */
1:   public static long estimate(Object anObject, long defValue) {
1:     try {
1:       if (methodAccessible) {
1:         if (null == estimateMethod) {
1:           estimateMethod = Class.forName(className).getMethod("estimate", Object.class);
1:           estimateMethod.setAccessible(true);
1:         }
1:         return (Long) estimateMethod.invoke(null, anObject);
1:       } else {
1:         return defValue;
1:       }
1:     } catch (Throwable ex) {
1:       // throwable is being caught as external interface is being invoked through reflection
1:       // and runtime exceptions might get thrown
1:       LOGGER.error(ex, "Could not access method SizeEstimator:estimate.Returning default value");
1:       methodAccessible = false;
1:       return defValue;
1:     }
1:   }
1: }
============================================================================