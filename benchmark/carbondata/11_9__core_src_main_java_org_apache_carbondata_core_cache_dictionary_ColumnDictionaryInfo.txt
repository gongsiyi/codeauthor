1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
3:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:cd6a4ff: 
1:cd6a4ff: import java.nio.charset.Charset;
1:cd6a4ff: import java.util.ArrayList;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: import java.util.concurrent.atomic.AtomicReference;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:ce09aaa: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:cd6a4ff: import org.apache.carbondata.core.util.ByteUtil;
1:7e0584e: import org.apache.carbondata.core.util.CarbonUtil;
1:b9db4ac: import org.apache.carbondata.core.util.DataTypeUtil;
1:cd6a4ff: /**
1:cd6a4ff:  * class that implements methods specific for dictionary data look up
1:cd6a4ff:  */
1:cd6a4ff: public class ColumnDictionaryInfo extends AbstractColumnDictionaryInfo {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * index after members are sorted
1:cd6a4ff:    */
1:cd6a4ff:   private AtomicReference<List<Integer>> sortOrderReference =
1:cd6a4ff:       new AtomicReference<List<Integer>>(new ArrayList<Integer>());
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * inverted index to retrieve the member
1:cd6a4ff:    */
1:cd6a4ff:   private AtomicReference<List<Integer>> sortReverseOrderReference =
1:cd6a4ff:       new AtomicReference<List<Integer>>(new ArrayList<Integer>());
1:cd6a4ff: 
1:cd6a4ff:   private DataType dataType;
1:cd6a4ff: 
1:cd6a4ff:   public ColumnDictionaryInfo(DataType dataType) {
1:cd6a4ff:     this.dataType = dataType;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will find and return the surrogate key for a given dictionary value
1:cd6a4ff:    * Applicable scenario:
1:cd6a4ff:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
1:cd6a4ff:    * that values have to be looked up in the existing dictionary cache.
1:cd6a4ff:    * 2. Filter scenarios where from value surrogate key has to be found.
1:cd6a4ff:    *
1:cd6a4ff:    * @param value dictionary value as byte array
1:cd6a4ff:    * @return if found returns key else 0
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int getSurrogateKey(byte[] value) {
1:cd6a4ff:     return getSurrogateKeyFromDictionaryValue(value);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will find and return the sort index for a given dictionary id.
1:cd6a4ff:    * Applicable scenarios:
1:cd6a4ff:    * 1. Used in case of order by queries when data sorting is required
1:cd6a4ff:    *
1:cd6a4ff:    * @param surrogateKey a unique ID for a dictionary value
1:cd6a4ff:    * @return if found returns key else 0
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int getSortedIndex(int surrogateKey) {
1:cd6a4ff:     if (surrogateKey > sortReverseOrderReference.get().size()
1:cd6a4ff:         || surrogateKey < MINIMUM_SURROGATE_KEY) {
2:cd6a4ff:       return -1;
1:cd6a4ff:     }
1:cd6a4ff:     // decrement surrogate key as surrogate key basically means the index in array list
1:cd6a4ff:     // because surrogate key starts from 1 and index of list from 0, so it needs to be
1:cd6a4ff:     // decremented by 1
1:cd6a4ff:     return sortReverseOrderReference.get().get(surrogateKey - 1);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will find and return the dictionary value from sorted index.
1:cd6a4ff:    * Applicable scenarios:
1:cd6a4ff:    * 1. Query final result preparation in case of order by queries:
1:cd6a4ff:    * While convert the final result which will
1:cd6a4ff:    * be surrogate key back to original dictionary values this method will be used
1:cd6a4ff:    *
1:cd6a4ff:    * @param sortedIndex sort index of dictionary value
1:cd6a4ff:    * @return value if found else null
1:cd6a4ff:    */
1:cd6a4ff:   @Override public String getDictionaryValueFromSortedIndex(int sortedIndex) {
1:cd6a4ff:     if (sortedIndex > sortReverseOrderReference.get().size()
1:cd6a4ff:         || sortedIndex < MINIMUM_SURROGATE_KEY) {
1:cd6a4ff:       return null;
1:cd6a4ff:     }
1:cd6a4ff:     // decrement surrogate key as surrogate key basically means the index in array list
1:cd6a4ff:     // because surrogate key starts from 1, sort index will start form 1 and index
1:cd6a4ff:     // of list from 0, so it needs to be decremented by 1
1:cd6a4ff:     int surrogateKey = sortOrderReference.get().get(sortedIndex - 1);
1:cd6a4ff:     return getDictionaryValueForKey(surrogateKey);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will add a new dictionary chunk to existing list of dictionary chunks
1:cd6a4ff:    *
1:7e0584e:    * @param newDictionaryChunk
1:cd6a4ff:    */
1:7e0584e:   @Override public void addDictionaryChunk(List<byte[]> newDictionaryChunk) {
1:7e0584e:     if (dictionaryChunks.size() > 0) {
1:7e0584e:       // Ensure that each time a new dictionary chunk is getting added to the
1:7e0584e:       // dictionary chunks list, equal distribution of dictionary values should
1:7e0584e:       // be there in the sublists of dictionary chunk list
1:7e0584e:       List<byte[]> lastDictionaryChunk = dictionaryChunks.get(dictionaryChunks.size() - 1);
1:7e0584e:       int dictionaryOneChunkSize = CarbonUtil.getDictionaryChunkSize();
1:7e0584e:       int differenceInLastDictionaryAndOneChunkSize =
1:7e0584e:           dictionaryOneChunkSize - lastDictionaryChunk.size();
1:7e0584e:       if (differenceInLastDictionaryAndOneChunkSize > 0) {
1:7e0584e:         // if difference is greater than new dictionary size then copy a part of list
1:7e0584e:         // else copy the complete new dictionary chunk list in the last dictionary chunk list
1:7e0584e:         if (differenceInLastDictionaryAndOneChunkSize >= newDictionaryChunk.size()) {
1:7e0584e:           lastDictionaryChunk.addAll(newDictionaryChunk);
1:cd6a4ff:         } else {
1:7e0584e:           List<byte[]> subListOfNewDictionaryChunk =
1:7e0584e:               newDictionaryChunk.subList(0, differenceInLastDictionaryAndOneChunkSize);
1:7e0584e:           lastDictionaryChunk.addAll(subListOfNewDictionaryChunk);
1:7e0584e:           List<byte[]> remainingNewDictionaryChunk = newDictionaryChunk
1:7e0584e:               .subList(differenceInLastDictionaryAndOneChunkSize, newDictionaryChunk.size());
1:7e0584e:           dictionaryChunks.add(remainingNewDictionaryChunk);
1:cd6a4ff:         }
2:7e0584e:       } else {
1:7e0584e:         dictionaryChunks.add(newDictionaryChunk);
1:cd6a4ff:       }
1:7e0584e:     } else {
1:7e0584e:       dictionaryChunks.add(newDictionaryChunk);
2:7e0584e:     }
1:7e0584e:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:7e0584e:    * This method will return the size of of last dictionary chunk so that only that many
1:7e0584e:    * values are read from the dictionary reader
1:cd6a4ff:    *
1:7e0584e:    * @return size of last dictionary chunk
1:cd6a4ff:    */
1:7e0584e:   @Override public int getSizeOfLastDictionaryChunk() {
1:7e0584e:     int lastDictionaryChunkSize = 0;
1:7e0584e:     if (dictionaryChunks.size() > 0) {
1:7e0584e:       lastDictionaryChunkSize = dictionaryChunks.get(dictionaryChunks.size() - 1).size();
1:7e0584e:     }
1:7e0584e:     return lastDictionaryChunkSize;
1:7e0584e:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will set the sort order index of a dictionary column.
1:cd6a4ff:    * Sort order index if the index of dictionary values after they are sorted.
1:cd6a4ff:    *
1:cd6a4ff:    * @param sortOrderIndex
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void setSortOrderIndex(List<Integer> sortOrderIndex) {
1:cd6a4ff:     sortOrderReference.set(sortOrderIndex);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will set the sort reverse index of a dictionary column.
1:cd6a4ff:    * Sort reverse index is the index of dictionary values before they are sorted.
1:cd6a4ff:    *
1:cd6a4ff:    * @param sortReverseOrderIndex
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void setSortReverseOrderIndex(List<Integer> sortReverseOrderIndex) {
1:cd6a4ff:     sortReverseOrderReference.set(sortReverseOrderIndex);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will apply binary search logic to find the surrogate key for the
1:cd6a4ff:    * given value
1:cd6a4ff:    *
1:cd6a4ff:    * @param key to be searched
2:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   private int getSurrogateKeyFromDictionaryValue(byte[] key) {
1:cd6a4ff:     String filterKey = new String(key, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:cd6a4ff:     int low = 0;
1:cd6a4ff:     List<Integer> sortedSurrogates = sortOrderReference.get();
1:cd6a4ff:     int high = sortedSurrogates.size() - 1;
1:cd6a4ff:     while (low <= high) {
1:cd6a4ff:       int mid = (low + high) >>> 1;
1:cd6a4ff:       int surrogateKey = sortedSurrogates.get(mid);
2:cd6a4ff:       byte[] dictionaryValue = getDictionaryBytesFromSurrogate(surrogateKey);
1:7ef9164:       if (null == dictionaryValue) {
1:7ef9164:         return CarbonCommonConstants.INVALID_SURROGATE_KEY;
1:7ef9164:       }
2:cd6a4ff:       int cmp = -1;
1:956833e:       if (this.getDataType() != DataTypes.STRING) {
1:2b66476:         cmp = compareFilterKeyWithDictionaryKey(
1:2b66476:             new String(dictionaryValue, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)),
1:2b66476:             filterKey, this.getDataType());
1:cd6a4ff: 
1:cd6a4ff:       } else {
1:cd6a4ff:         cmp = ByteUtil.UnsafeComparer.INSTANCE.compareTo(dictionaryValue, key);
1:cd6a4ff:       }
1:cd6a4ff:       if (cmp < 0) {
1:cd6a4ff:         low = mid + 1;
1:cd6a4ff:       } else if (cmp > 0) {
1:cd6a4ff:         high = mid - 1;
1:cd6a4ff:       } else {
1:cd6a4ff:         return surrogateKey; // key found
1:cd6a4ff:       }
1:cd6a4ff:     }
1:05b2654:     return CarbonCommonConstants.INVALID_SURROGATE_KEY;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will apply binary search logic to find the surrogate key for the
1:cd6a4ff:    * given value
1:cd6a4ff:    *
1:cd6a4ff:    * @param byteValuesOfFilterMembers to be searched
1:cd6a4ff:    * @param surrogates
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   public void getIncrementalSurrogateKeyFromDictionary(List<byte[]> byteValuesOfFilterMembers,
1:cd6a4ff:       List<Integer> surrogates) {
1:cd6a4ff:     List<Integer> sortedSurrogates = sortOrderReference.get();
1:cd6a4ff:     int low = 0;
1:cd6a4ff:     for (byte[] byteValueOfFilterMember : byteValuesOfFilterMembers) {
1:cd6a4ff:       String filterKey = new String(byteValueOfFilterMember,
1:cd6a4ff:           Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:cd6a4ff:       if (CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(filterKey)) {
1:cd6a4ff:         surrogates.add(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY);
1:cd6a4ff:         continue;
1:cd6a4ff:       }
1:cd6a4ff:       int high = sortedSurrogates.size() - 1;
1:cd6a4ff:       while (low <= high) {
1:cd6a4ff:         int mid = (low + high) >>> 1;
1:cd6a4ff:         int surrogateKey = sortedSurrogates.get(mid);
1:1e408c5:         int cmp =
1:1e408c5:             compareFilterValue(surrogateKey, sortedSurrogates, byteValueOfFilterMember, filterKey);
1:cd6a4ff:         if (cmp < 0) {
1:cd6a4ff:           low = mid + 1;
1:cd6a4ff:         } else if (cmp > 0) {
1:cd6a4ff:           high = mid - 1;
1:cd6a4ff:         } else {
1:cd6a4ff:           surrogates.add(surrogateKey);
1:1e408c5:           if (this.getDataType() == DataTypes.DOUBLE) {
1:1e408c5:             int tmp_mid = mid - 1;
1:1e408c5:             int tmp_low = low > 0 ? low + 1 : 0;
1:1e408c5:             while (tmp_mid >= tmp_low) {
1:1e408c5:               surrogateKey = sortedSurrogates.get(tmp_mid);
1:1e408c5:               cmp = compareFilterValue(surrogateKey, sortedSurrogates, byteValueOfFilterMember,
1:1e408c5:                   filterKey);
1:1e408c5:               if (cmp == 0) {
1:1e408c5:                 surrogates.add(surrogateKey);
1:1e408c5:               }
1:1e408c5:               tmp_mid--;
1:1e408c5:             }
1:1e408c5:           }
1:cd6a4ff:           low = mid;
1:cd6a4ff:           break;
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     //Default value has to be added
1:cd6a4ff:     if (surrogates.isEmpty()) {
1:cd6a4ff:       surrogates.add(0);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:1e408c5:   private int compareFilterValue(int surrogateKey, List<Integer> sortedSurrogates,
1:1e408c5:       byte[] byteValueOfFilterMember, String filterKey) {
1:1e408c5:     byte[] dictionaryValue = getDictionaryBytesFromSurrogate(surrogateKey);
1:1e408c5:     int cmp = -1;
1:1e408c5:     //fortify fix
1:1e408c5:     if (null == dictionaryValue) {
1:1e408c5:       cmp = -1;
1:1e408c5:     } else if (this.getDataType() != DataTypes.STRING) {
1:1e408c5:       cmp = compareFilterKeyWithDictionaryKey(
1:1e408c5:           new String(dictionaryValue, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)),
1:1e408c5:           filterKey, this.getDataType());
1:1e408c5: 
1:1e408c5:     } else {
1:1e408c5:       cmp = ByteUtil.UnsafeComparer.INSTANCE.compareTo(dictionaryValue, byteValueOfFilterMember);
1:1e408c5:     }
1:1e408c5:     return cmp;
1:1e408c5:   }
1:1e408c5: 
1:cd6a4ff:   private int compareFilterKeyWithDictionaryKey(String dictionaryVal, String memberVal,
1:cd6a4ff:       DataType dataType) {
1:cd6a4ff:     try {
1:956833e:       if (dataType == DataTypes.SHORT) {
1:956833e:         return Short.compare((Short.parseShort(dictionaryVal)), (Short.parseShort(memberVal)));
1:956833e:       } else if (dataType == DataTypes.INT) {
1:956833e:         return Integer.compare((Integer.parseInt(dictionaryVal)), (Integer.parseInt(memberVal)));
1:956833e:       } else if (dataType == DataTypes.DOUBLE) {
1:956833e:         return DataTypeUtil.compareDoubleWithNan(
1:956833e:             (Double.parseDouble(dictionaryVal)), (Double.parseDouble(memberVal)));
1:956833e:       } else if (dataType == DataTypes.LONG) {
1:956833e:         return Long.compare((Long.parseLong(dictionaryVal)), (Long.parseLong(memberVal)));
1:f209e8e:       } else if (DataTypes.isDecimal(dataType)) {
1:956833e:         java.math.BigDecimal javaDecValForDictVal = new java.math.BigDecimal(dictionaryVal);
1:956833e:         java.math.BigDecimal javaDecValForMemberVal = new java.math.BigDecimal(memberVal);
1:956833e:         return javaDecValForDictVal.compareTo(javaDecValForMemberVal);
1:956833e:       } else {
1:956833e:         return -1;
1:cd6a4ff:       }
1:cd6a4ff:     } catch (Exception e) {
1:cd6a4ff:       //In all data types excluding String data type the null member will be the highest
1:cd6a4ff:       //while doing search in dictioary when the member comparison happens with filter member
1:cd6a4ff:       //which is also null member, since the parsing fails in other data type except string
1:cd6a4ff:       //explicit comparison is required, is both are null member then system has to return 0.
1:cd6a4ff:       if (memberVal.equals(dictionaryVal)) {
2:cd6a4ff:         return 0;
1:cd6a4ff:       }
1:cd6a4ff:       return 1;
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public DataType getDataType() {
1:cd6a4ff:     return dataType;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:       if (null == dictionaryValue) {
1:         return CarbonCommonConstants.INVALID_SURROGATE_KEY;
1:       }
author:dhatchayani
-------------------------------------------------------------------------------
commit:1e408c5
/////////////////////////////////////////////////////////////////////////
1:         int cmp =
1:             compareFilterValue(surrogateKey, sortedSurrogates, byteValueOfFilterMember, filterKey);
1:           if (this.getDataType() == DataTypes.DOUBLE) {
1:             int tmp_mid = mid - 1;
1:             int tmp_low = low > 0 ? low + 1 : 0;
1:             while (tmp_mid >= tmp_low) {
1:               surrogateKey = sortedSurrogates.get(tmp_mid);
1:               cmp = compareFilterValue(surrogateKey, sortedSurrogates, byteValueOfFilterMember,
1:                   filterKey);
1:               if (cmp == 0) {
1:                 surrogates.add(surrogateKey);
1:               }
1:               tmp_mid--;
1:             }
1:           }
/////////////////////////////////////////////////////////////////////////
1:   private int compareFilterValue(int surrogateKey, List<Integer> sortedSurrogates,
1:       byte[] byteValueOfFilterMember, String filterKey) {
1:     byte[] dictionaryValue = getDictionaryBytesFromSurrogate(surrogateKey);
1:     int cmp = -1;
1:     //fortify fix
1:     if (null == dictionaryValue) {
1:       cmp = -1;
1:     } else if (this.getDataType() != DataTypes.STRING) {
1:       cmp = compareFilterKeyWithDictionaryKey(
1:           new String(dictionaryValue, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)),
1:           filterKey, this.getDataType());
1: 
1:     } else {
1:       cmp = ByteUtil.UnsafeComparer.INSTANCE.compareTo(dictionaryValue, byteValueOfFilterMember);
1:     }
1:     return cmp;
1:   }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
1:       } else if (DataTypes.isDecimal(dataType)) {
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:       if (this.getDataType() != DataTypes.STRING) {
/////////////////////////////////////////////////////////////////////////
0:         } else if (this.getDataType() != DataTypes.STRING) {
/////////////////////////////////////////////////////////////////////////
1:       if (dataType == DataTypes.SHORT) {
1:         return Short.compare((Short.parseShort(dictionaryVal)), (Short.parseShort(memberVal)));
1:       } else if (dataType == DataTypes.INT) {
1:         return Integer.compare((Integer.parseInt(dictionaryVal)), (Integer.parseInt(memberVal)));
1:       } else if (dataType == DataTypes.DOUBLE) {
1:         return DataTypeUtil.compareDoubleWithNan(
1:             (Double.parseDouble(dictionaryVal)), (Double.parseDouble(memberVal)));
1:       } else if (dataType == DataTypes.LONG) {
1:         return Long.compare((Long.parseLong(dictionaryVal)), (Long.parseLong(memberVal)));
0:       } else if (dataType == DataTypes.BOOLEAN) {
0:         return Boolean.compare(
0:             (Boolean.parseBoolean(dictionaryVal)), (Boolean.parseBoolean(memberVal)));
0:       } else if (dataType == DataTypes.DATE || dataType == DataTypes.TIMESTAMP) {
0:         String format = CarbonUtil.getFormatFromProperty(dataType);
0:         SimpleDateFormat parser = new SimpleDateFormat(format);
0:         Date dateToStr;
0:         Date dictionaryDate;
0:         dateToStr = parser.parse(memberVal);
0:         dictionaryDate = parser.parse(dictionaryVal);
0:         return dictionaryDate.compareTo(dateToStr);
0:       } else if (dataType == DataTypes.DECIMAL) {
1:         java.math.BigDecimal javaDecValForDictVal = new java.math.BigDecimal(dictionaryVal);
1:         java.math.BigDecimal javaDecValForMemberVal = new java.math.BigDecimal(memberVal);
1:         return javaDecValForDictVal.compareTo(javaDecValForMemberVal);
1:       } else {
1:         return -1;
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
author:manishgupta88
-------------------------------------------------------------------------------
commit:2b66476
/////////////////////////////////////////////////////////////////////////
1:         cmp = compareFilterKeyWithDictionaryKey(
1:             new String(dictionaryValue, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)),
1:             filterKey, this.getDataType());
/////////////////////////////////////////////////////////////////////////
0:           cmp = compareFilterKeyWithDictionaryKey(
0:               new String(dictionaryValue, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)),
0:               filterKey, this.getDataType());
author:kumarvishal
-------------------------------------------------------------------------------
commit:ea04fce
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:           String format = CarbonUtil.getFormatFromProperty(dataType);
0:           SimpleDateFormat parser = new SimpleDateFormat(format);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:d73f4bf
/////////////////////////////////////////////////////////////////////////
0:         case DATE:
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
author:ravipesala
-------------------------------------------------------------------------------
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1:     return CarbonCommonConstants.INVALID_SURROGATE_KEY;
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.nio.charset.Charset;
0: import java.text.SimpleDateFormat;
1: import java.util.ArrayList;
0: import java.util.Date;
1: import java.util.List;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.ByteUtil;
0: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: /**
1:  * class that implements methods specific for dictionary data look up
1:  */
1: public class ColumnDictionaryInfo extends AbstractColumnDictionaryInfo {
1: 
1:   /**
1:    * index after members are sorted
1:    */
1:   private AtomicReference<List<Integer>> sortOrderReference =
1:       new AtomicReference<List<Integer>>(new ArrayList<Integer>());
1: 
1:   /**
1:    * inverted index to retrieve the member
1:    */
1:   private AtomicReference<List<Integer>> sortReverseOrderReference =
1:       new AtomicReference<List<Integer>>(new ArrayList<Integer>());
1: 
1:   private DataType dataType;
1: 
1:   public ColumnDictionaryInfo(DataType dataType) {
1:     this.dataType = dataType;
1:   }
1: 
1:   /**
1:    * This method will find and return the surrogate key for a given dictionary value
1:    * Applicable scenario:
1:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
1:    * that values have to be looked up in the existing dictionary cache.
1:    * 2. Filter scenarios where from value surrogate key has to be found.
1:    *
1:    * @param value dictionary value as byte array
1:    * @return if found returns key else 0
1:    */
1:   @Override public int getSurrogateKey(byte[] value) {
1:     return getSurrogateKeyFromDictionaryValue(value);
1:   }
1: 
1:   /**
1:    * This method will find and return the sort index for a given dictionary id.
1:    * Applicable scenarios:
1:    * 1. Used in case of order by queries when data sorting is required
1:    *
1:    * @param surrogateKey a unique ID for a dictionary value
1:    * @return if found returns key else 0
1:    */
1:   @Override public int getSortedIndex(int surrogateKey) {
1:     if (surrogateKey > sortReverseOrderReference.get().size()
1:         || surrogateKey < MINIMUM_SURROGATE_KEY) {
1:       return -1;
1:     }
1:     // decrement surrogate key as surrogate key basically means the index in array list
1:     // because surrogate key starts from 1 and index of list from 0, so it needs to be
1:     // decremented by 1
1:     return sortReverseOrderReference.get().get(surrogateKey - 1);
1:   }
1: 
1:   /**
1:    * This method will find and return the dictionary value from sorted index.
1:    * Applicable scenarios:
1:    * 1. Query final result preparation in case of order by queries:
1:    * While convert the final result which will
1:    * be surrogate key back to original dictionary values this method will be used
1:    *
1:    * @param sortedIndex sort index of dictionary value
1:    * @return value if found else null
1:    */
1:   @Override public String getDictionaryValueFromSortedIndex(int sortedIndex) {
1:     if (sortedIndex > sortReverseOrderReference.get().size()
1:         || sortedIndex < MINIMUM_SURROGATE_KEY) {
1:       return null;
1:     }
1:     // decrement surrogate key as surrogate key basically means the index in array list
1:     // because surrogate key starts from 1, sort index will start form 1 and index
1:     // of list from 0, so it needs to be decremented by 1
1:     int surrogateKey = sortOrderReference.get().get(sortedIndex - 1);
1:     return getDictionaryValueForKey(surrogateKey);
1:   }
1: 
1:   /**
1:    * This method will add a new dictionary chunk to existing list of dictionary chunks
1:    *
0:    * @param dictionaryChunk
1:    */
0:   @Override public void addDictionaryChunk(List<byte[]> dictionaryChunk) {
0:     dictionaryChunks.add(dictionaryChunk);
1:   }
1: 
1:   /**
1:    * This method will set the sort order index of a dictionary column.
1:    * Sort order index if the index of dictionary values after they are sorted.
1:    *
1:    * @param sortOrderIndex
1:    */
1:   @Override public void setSortOrderIndex(List<Integer> sortOrderIndex) {
1:     sortOrderReference.set(sortOrderIndex);
1:   }
1: 
1:   /**
1:    * This method will set the sort reverse index of a dictionary column.
1:    * Sort reverse index is the index of dictionary values before they are sorted.
1:    *
1:    * @param sortReverseOrderIndex
1:    */
1:   @Override public void setSortReverseOrderIndex(List<Integer> sortReverseOrderIndex) {
1:     sortReverseOrderReference.set(sortReverseOrderIndex);
1:   }
1: 
1:   /**
1:    * This method will apply binary search logic to find the surrogate key for the
1:    * given value
1:    *
1:    * @param key to be searched
1:    * @return
1:    */
1:   private int getSurrogateKeyFromDictionaryValue(byte[] key) {
1:     String filterKey = new String(key, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:     int low = 0;
1:     List<Integer> sortedSurrogates = sortOrderReference.get();
1:     int high = sortedSurrogates.size() - 1;
1:     while (low <= high) {
1:       int mid = (low + high) >>> 1;
1:       int surrogateKey = sortedSurrogates.get(mid);
1:       byte[] dictionaryValue = getDictionaryBytesFromSurrogate(surrogateKey);
1:       int cmp = -1;
0:       if (this.getDataType() != DataType.STRING) {
0:         cmp = compareFilterKeyWithDictionaryKey(new String(dictionaryValue), filterKey,
0:             this.getDataType());
1: 
1:       } else {
1:         cmp = ByteUtil.UnsafeComparer.INSTANCE.compareTo(dictionaryValue, key);
1:       }
1:       if (cmp < 0) {
1:         low = mid + 1;
1:       } else if (cmp > 0) {
1:         high = mid - 1;
1:       } else {
1:         return surrogateKey; // key found
1:       }
1:     }
1:     return 0;
1:   }
1: 
1:   /**
1:    * This method will apply binary search logic to find the surrogate key for the
1:    * given value
1:    *
1:    * @param byteValuesOfFilterMembers to be searched
1:    * @param surrogates
1:    * @return
1:    */
1:   public void getIncrementalSurrogateKeyFromDictionary(List<byte[]> byteValuesOfFilterMembers,
1:       List<Integer> surrogates) {
1:     List<Integer> sortedSurrogates = sortOrderReference.get();
1:     int low = 0;
1:     for (byte[] byteValueOfFilterMember : byteValuesOfFilterMembers) {
1:       String filterKey = new String(byteValueOfFilterMember,
1:           Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:       if (CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(filterKey)) {
1:         surrogates.add(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY);
1:         continue;
1:       }
1:       int high = sortedSurrogates.size() - 1;
1:       while (low <= high) {
1:         int mid = (low + high) >>> 1;
1:         int surrogateKey = sortedSurrogates.get(mid);
1:         byte[] dictionaryValue = getDictionaryBytesFromSurrogate(surrogateKey);
1:         int cmp = -1;
0:         //fortify fix
0:         if (null == dictionaryValue) {
0:           cmp = -1;
0:         } else if (this.getDataType() != DataType.STRING) {
0:           cmp = compareFilterKeyWithDictionaryKey(new String(dictionaryValue), filterKey,
0:               this.getDataType());
1: 
1:         } else {
0:           cmp =
0:               ByteUtil.UnsafeComparer.INSTANCE.compareTo(dictionaryValue, byteValueOfFilterMember);
1:         }
1:         if (cmp < 0) {
1:           low = mid + 1;
1:         } else if (cmp > 0) {
1:           high = mid - 1;
1:         } else {
1: 
1:           surrogates.add(surrogateKey);
1:           low = mid;
1:           break;
1:         }
1:       }
1:     }
1:     //Default value has to be added
1:     if (surrogates.isEmpty()) {
1:       surrogates.add(0);
1:     }
1:   }
1: 
1:   private int compareFilterKeyWithDictionaryKey(String dictionaryVal, String memberVal,
1:       DataType dataType) {
1:     try {
0:       switch (dataType) {
0:         case SHORT:
0:           return Short.compare((Short.parseShort(dictionaryVal)), (Short.parseShort(memberVal)));
0:         case INT:
0:           return Integer.compare((Integer.parseInt(dictionaryVal)), (Integer.parseInt(memberVal)));
0:         case DOUBLE:
0:           return Double
0:               .compare((Double.parseDouble(dictionaryVal)), (Double.parseDouble(memberVal)));
0:         case LONG:
0:           return Long.compare((Long.parseLong(dictionaryVal)), (Long.parseLong(memberVal)));
0:         case BOOLEAN:
0:           return Boolean
0:               .compare((Boolean.parseBoolean(dictionaryVal)), (Boolean.parseBoolean(memberVal)));
0:         case TIMESTAMP:
0:           SimpleDateFormat parser = new SimpleDateFormat(CarbonProperties.getInstance()
0:               .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
0:                   CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
0:           Date dateToStr;
0:           Date dictionaryDate;
0:           dateToStr = parser.parse(memberVal);
0:           dictionaryDate = parser.parse(dictionaryVal);
0:           return dictionaryDate.compareTo(dateToStr);
0:         case DECIMAL:
0:           java.math.BigDecimal javaDecValForDictVal = new java.math.BigDecimal(dictionaryVal);
0:           java.math.BigDecimal javaDecValForMemberVal = new java.math.BigDecimal(memberVal);
0:           return javaDecValForDictVal.compareTo(javaDecValForMemberVal);
0:         default:
1:           return -1;
1:       }
1:     } catch (Exception e) {
1:       //In all data types excluding String data type the null member will be the highest
1:       //while doing search in dictioary when the member comparison happens with filter member
1:       //which is also null member, since the parsing fails in other data type except string
1:       //explicit comparison is required, is both are null member then system has to return 0.
1:       if (memberVal.equals(dictionaryVal)) {
1:         return 0;
1:       }
1:       return 1;
1:     }
1:   }
1: 
1:   /**
0:    * getDataType().
1:    *
1:    * @return
1:    */
1:   public DataType getDataType() {
1:     return dataType;
1:   }
1: 
1: }
author:sujith71955
-------------------------------------------------------------------------------
commit:b9db4ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.DataTypeUtil;
/////////////////////////////////////////////////////////////////////////
0:           return DataTypeUtil
0:               .compareDoubleWithNan((Double.parseDouble(dictionaryVal)),
0:                   (Double.parseDouble(memberVal)));
author:manishgupt88
-------------------------------------------------------------------------------
commit:7e0584e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.CarbonUtil;
/////////////////////////////////////////////////////////////////////////
1:    * @param newDictionaryChunk
1:   @Override public void addDictionaryChunk(List<byte[]> newDictionaryChunk) {
1:     if (dictionaryChunks.size() > 0) {
1:       // Ensure that each time a new dictionary chunk is getting added to the
1:       // dictionary chunks list, equal distribution of dictionary values should
1:       // be there in the sublists of dictionary chunk list
1:       List<byte[]> lastDictionaryChunk = dictionaryChunks.get(dictionaryChunks.size() - 1);
1:       int dictionaryOneChunkSize = CarbonUtil.getDictionaryChunkSize();
1:       int differenceInLastDictionaryAndOneChunkSize =
1:           dictionaryOneChunkSize - lastDictionaryChunk.size();
1:       if (differenceInLastDictionaryAndOneChunkSize > 0) {
1:         // if difference is greater than new dictionary size then copy a part of list
1:         // else copy the complete new dictionary chunk list in the last dictionary chunk list
1:         if (differenceInLastDictionaryAndOneChunkSize >= newDictionaryChunk.size()) {
1:           lastDictionaryChunk.addAll(newDictionaryChunk);
1:         } else {
1:           List<byte[]> subListOfNewDictionaryChunk =
1:               newDictionaryChunk.subList(0, differenceInLastDictionaryAndOneChunkSize);
1:           lastDictionaryChunk.addAll(subListOfNewDictionaryChunk);
1:           List<byte[]> remainingNewDictionaryChunk = newDictionaryChunk
1:               .subList(differenceInLastDictionaryAndOneChunkSize, newDictionaryChunk.size());
1:           dictionaryChunks.add(remainingNewDictionaryChunk);
1:         }
1:       } else {
1:         dictionaryChunks.add(newDictionaryChunk);
1:       }
1:     } else {
1:       dictionaryChunks.add(newDictionaryChunk);
1:     }
1:   }
0: 
0:   /**
1:    * This method will return the size of of last dictionary chunk so that only that many
1:    * values are read from the dictionary reader
0:    *
1:    * @return size of last dictionary chunk
0:    */
1:   @Override public int getSizeOfLastDictionaryChunk() {
1:     int lastDictionaryChunkSize = 0;
1:     if (dictionaryChunks.size() > 0) {
1:       lastDictionaryChunkSize = dictionaryChunks.get(dictionaryChunks.size() - 1).size();
1:     }
1:     return lastDictionaryChunkSize;
============================================================================