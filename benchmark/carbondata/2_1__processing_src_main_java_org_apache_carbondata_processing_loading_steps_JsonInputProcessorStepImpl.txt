1:5804d75: /*
1:5804d75:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5804d75:  * contributor license agreements.  See the NOTICE file distributed with
1:5804d75:  * this work for additional information regarding copyright ownership.
1:5804d75:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5804d75:  * (the "License"); you may not use this file except in compliance with
1:5804d75:  * the License.  You may obtain a copy of the License at
1:5804d75:  *
1:5804d75:  *    http://www.apache.org/licenses/LICENSE-2.0
1:5804d75:  *
1:5804d75:  * Unless required by applicable law or agreed to in writing, software
1:5804d75:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5804d75:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5804d75:  * See the License for the specific language governing permissions and
1:5804d75:  * limitations under the License.
1:5804d75:  */
1:5804d75: package org.apache.carbondata.processing.loading.steps;
2:5804d75: 
1:5804d75: import java.io.IOException;
1:5804d75: import java.util.Iterator;
1:5804d75: import java.util.List;
1:17a4b48: 
1:5804d75: import org.apache.carbondata.common.CarbonIterator;
1:5804d75: import org.apache.carbondata.core.util.CarbonProperties;
1:5804d75: import org.apache.carbondata.processing.loading.AbstractDataLoadProcessorStep;
1:5804d75: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1:5804d75: import org.apache.carbondata.processing.loading.DataField;
1:5804d75: import org.apache.carbondata.processing.loading.parser.RowParser;
1:5804d75: import org.apache.carbondata.processing.loading.parser.impl.JsonRowParser;
1:5804d75: import org.apache.carbondata.processing.loading.row.CarbonRowBatch;
1:5804d75: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1:5804d75: 
1:5804d75: /**
1:5804d75:  * It reads data from record reader and sends data to next step.
1:5804d75:  */
1:5804d75: public class JsonInputProcessorStepImpl extends AbstractDataLoadProcessorStep {
1:5804d75: 
1:5804d75:   private RowParser rowParser;
1:5804d75: 
1:5804d75:   private CarbonIterator<Object[]>[] inputIterators;
1:5804d75: 
1:94d2089:   private boolean isRawDataRequired = false;
1:5804d75: 
1:94d2089:   // cores used in SDK writer, set by the user
1:94d2089:   private short sdkWriterCores;
1:5804d75: 
1:5804d75:   public JsonInputProcessorStepImpl(CarbonDataLoadConfiguration configuration,
1:5804d75:       CarbonIterator<Object[]>[] inputIterators) {
1:5804d75:     super(configuration, null);
1:5804d75:     this.inputIterators = inputIterators;
1:94d2089:     sdkWriterCores = configuration.getWritingCoresCount();
2:5804d75:   }
1:5804d75: 
1:5804d75:   @Override public DataField[] getOutput() {
1:5804d75:     return configuration.getDataFields();
1:5804d75:   }
1:5804d75: 
1:5804d75:   @Override public void initialize() throws IOException {
1:5804d75:     super.initialize();
1:5804d75:     rowParser = new JsonRowParser(getOutput());
1:5804d75:     // if logger is enabled then raw data will be required.
1:5804d75:     this.isRawDataRequired = CarbonDataProcessorUtil.isRawDataRequired(configuration);
1:5804d75:   }
1:5804d75: 
1:5804d75:   @Override public Iterator<CarbonRowBatch>[] execute() {
1:5804d75:     int batchSize = CarbonProperties.getInstance().getBatchSize();
1:5804d75:     List<CarbonIterator<Object[]>>[] readerIterators =
1:94d2089:         CarbonDataProcessorUtil.partitionInputReaderIterators(inputIterators, sdkWriterCores);
1:5804d75:     Iterator<CarbonRowBatch>[] outIterators = new Iterator[readerIterators.length];
1:5804d75:     for (int i = 0; i < outIterators.length; i++) {
1:5804d75:       outIterators[i] =
1:5804d75:           new InputProcessorStepImpl.InputProcessorIterator(readerIterators[i], rowParser,
1:5804d75:               batchSize, false, null, rowCounter, isRawDataRequired);
1:5804d75:     }
1:5804d75:     return outIterators;
1:5804d75:   }
1:5804d75: 
1:5804d75:   @Override public void close() {
1:5804d75:     if (!closed) {
1:5804d75:       super.close();
1:5804d75:       for (CarbonIterator inputIterator : inputIterators) {
1:5804d75:         inputIterator.close();
1:5804d75:       }
1:5804d75:     }
1:5804d75:   }
1:5804d75: 
1:5804d75:   @Override protected String getStepName() {
1:5804d75:     return "Json Input Processor";
1:5804d75:   }
1:5804d75: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:94d2089
/////////////////////////////////////////////////////////////////////////
1:   private boolean isRawDataRequired = false;
1:   // cores used in SDK writer, set by the user
1:   private short sdkWriterCores;
1:     sdkWriterCores = configuration.getWritingCoresCount();
/////////////////////////////////////////////////////////////////////////
1:         CarbonDataProcessorUtil.partitionInputReaderIterators(inputIterators, sdkWriterCores);
commit:17a4b48
/////////////////////////////////////////////////////////////////////////
0:   short sdkUserCore;
1: 
0:     sdkUserCore = configuration.getWritingCoresCount();
/////////////////////////////////////////////////////////////////////////
0:         CarbonDataProcessorUtil.partitionInputReaderIterators(inputIterators, sdkUserCore);
commit:5804d75
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.processing.loading.steps;
1: 
1: import java.io.IOException;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.apache.carbondata.common.CarbonIterator;
0: import org.apache.carbondata.core.datastore.row.CarbonRow;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: import org.apache.carbondata.processing.loading.AbstractDataLoadProcessorStep;
1: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1: import org.apache.carbondata.processing.loading.DataField;
1: import org.apache.carbondata.processing.loading.parser.RowParser;
1: import org.apache.carbondata.processing.loading.parser.impl.JsonRowParser;
1: import org.apache.carbondata.processing.loading.row.CarbonRowBatch;
1: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1: 
1: /**
1:  * It reads data from record reader and sends data to next step.
1:  */
1: public class JsonInputProcessorStepImpl extends AbstractDataLoadProcessorStep {
1: 
1:   private RowParser rowParser;
1: 
1:   private CarbonIterator<Object[]>[] inputIterators;
1: 
0:   boolean isRawDataRequired = false;
1: 
1:   public JsonInputProcessorStepImpl(CarbonDataLoadConfiguration configuration,
1:       CarbonIterator<Object[]>[] inputIterators) {
1:     super(configuration, null);
1:     this.inputIterators = inputIterators;
1:   }
1: 
1:   @Override public DataField[] getOutput() {
1:     return configuration.getDataFields();
1:   }
1: 
1:   @Override public void initialize() throws IOException {
1:     super.initialize();
1:     rowParser = new JsonRowParser(getOutput());
1:     // if logger is enabled then raw data will be required.
1:     this.isRawDataRequired = CarbonDataProcessorUtil.isRawDataRequired(configuration);
1:   }
1: 
1:   @Override public Iterator<CarbonRowBatch>[] execute() {
1:     int batchSize = CarbonProperties.getInstance().getBatchSize();
1:     List<CarbonIterator<Object[]>>[] readerIterators =
0:         CarbonDataProcessorUtil.partitionInputReaderIterators(inputIterators);
1:     Iterator<CarbonRowBatch>[] outIterators = new Iterator[readerIterators.length];
1:     for (int i = 0; i < outIterators.length; i++) {
1:       outIterators[i] =
1:           new InputProcessorStepImpl.InputProcessorIterator(readerIterators[i], rowParser,
1:               batchSize, false, null, rowCounter, isRawDataRequired);
1:     }
1:     return outIterators;
1:   }
1: 
0:   @Override protected CarbonRow processRow(CarbonRow row) {
0:     return null;
1:   }
1: 
1:   @Override public void close() {
1:     if (!closed) {
1:       super.close();
1:       for (CarbonIterator inputIterator : inputIterators) {
1:         inputIterator.close();
1:       }
1:     }
1:   }
1: 
1:   @Override protected String getStepName() {
1:     return "Json Input Processor";
1:   }
1: }
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================