1:eaadc88: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:cd6a4ff:  */
7:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.keygenerator.mdkey;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1:cd6a4ff: 
1:cd6a4ff: public abstract class AbstractKeyGenerator implements KeyGenerator {
1:cd6a4ff: 
1:cd6a4ff:   private static final long serialVersionUID = -6675293078575359769L;
1:cd6a4ff: 
1:cd6a4ff:   @Override public int compare(byte[] byte1, byte[] byte2) {
1:cd6a4ff:     // Short circuit equal case
1:cd6a4ff:     if (byte1 == byte2) {
4:cd6a4ff:       return 0;
8:cd6a4ff:     }
2:cd6a4ff:     // Bring WritableComparator code local
1:cd6a4ff:     int i = 0;
1:cd6a4ff:     int j = 0;
1:cd6a4ff:     for (; i < byte1.length && j < byte2.length; i++, j++) {
1:cd6a4ff:       int a = (byte1[i] & 0xff);
1:cd6a4ff:       int b = (byte2[j] & 0xff);
2:cd6a4ff:       if (a != b) {
2:cd6a4ff:         return a - b;
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     return 0;
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:dhatchayani
-------------------------------------------------------------------------------
commit:d25fee2
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1:     /*
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.keygenerator.mdkey;
1: 
1: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1: 
1: public abstract class AbstractKeyGenerator implements KeyGenerator {
1: 
1:   private static final long serialVersionUID = -6675293078575359769L;
1: 
1:   @Override public int compare(byte[] byte1, byte[] byte2) {
1:     // Short circuit equal case
1:     if (byte1 == byte2) {
1:       return 0;
1:     }
1:     // Bring WritableComparator code local
1:     int i = 0;
1:     int j = 0;
1:     for (; i < byte1.length && j < byte2.length; i++, j++) {
1:       int a = (byte1[i] & 0xff);
1:       int b = (byte2[j] & 0xff);
1:       if (a != b) {
1:         return a - b;
1:       }
1:     }
1:     return 0;
1:   }
1: 
0:   public int compare(byte[] buffer1, int offset1, int length1, byte[] buffer2, int offset2,
0:       int length2) {
0:     length1 += offset1;
0:     length2 += offset2;
1:     // Bring WritableComparator code local
0:     for (; offset1 < length1 && offset2 < length2; offset1++, offset2++) {
0:       int a = (buffer1[offset1] & 0xff);
0:       int b = (buffer2[offset2] & 0xff);
1:       if (a != b) {
1:         return a - b;
1:       }
1:     }
1:     return 0;
1:   }
1: 
0:   @Override public void setProperty(Object key, Object value) {
0:     /**
0:      * No implementation required.
1:      */
1:   }
1: 
0:   @Override public int getKeySizeInBytes() {
1:     return 0;
1:   }
1: 
0:   @Override public int[] getKeyByteOffsets(int index) {
0:     return null;
1:   }
1: 
0:   @Override public int getDimCount() {
1:     return 0;
1:   }
1: 
1: }
============================================================================