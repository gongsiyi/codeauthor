1:77a1110: /*
1:77a1110:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:77a1110:  * contributor license agreements.  See the NOTICE file distributed with
1:77a1110:  * this work for additional information regarding copyright ownership.
1:77a1110:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:77a1110:  * (the "License"); you may not use this file except in compliance with
1:77a1110:  * the License.  You may obtain a copy of the License at
1:77a1110:  *
1:77a1110:  *    http://www.apache.org/licenses/LICENSE-2.0
1:77a1110:  *
1:77a1110:  * Unless required by applicable law or agreed to in writing, software
1:77a1110:  * distributed under the License is distributed on an "AS IS" BASIS,
1:77a1110:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:77a1110:  * See the License for the specific language governing permissions and
1:77a1110:  * limitations under the License.
1:77a1110:  */
1:77a1110: package org.apache.hadoop.util.bloom;
1:77a1110: 
1:77a1110: import java.io.DataInput;
1:77a1110: import java.io.DataOutput;
1:77a1110: import java.io.IOException;
1:047c502: import java.lang.reflect.Field;
1:77a1110: import java.util.BitSet;
1:77a1110: 
1:77a1110: import org.roaringbitmap.RoaringBitmap;
1:77a1110: 
1:77a1110: /**
1:77a1110:  * It is the extendable class to hadoop bloomfilter, it is extendable to implement compressed bloom
1:77a1110:  * and fast serialize and deserialize of bloom.
1:77a1110:  */
1:77a1110: public class CarbonBloomFilter extends BloomFilter {
1:77a1110: 
1:77a1110:   private RoaringBitmap bitmap;
1:77a1110: 
1:77a1110:   private boolean compress;
1:77a1110: 
1:047c502:   private int blockletNo;
1:047c502: 
1:7b31b91:   // used for building blocklet when query
1:7b31b91:   private String shardName;
1:7b31b91: 
1:77a1110:   public CarbonBloomFilter() {
1:77a1110:   }
1:77a1110: 
1:77a1110:   public CarbonBloomFilter(int vectorSize, int nbHash, int hashType, boolean compress) {
1:77a1110:     super(vectorSize, nbHash, hashType);
1:77a1110:     this.compress = compress;
1:77a1110:   }
1:77a1110: 
1:77a1110:   @Override
1:77a1110:   public boolean membershipTest(Key key) {
1:77a1110:     if (key == null) {
1:77a1110:       throw new NullPointerException("key cannot be null");
1:77a1110:     }
1:77a1110: 
1:77a1110:     int[] h = hash.hash(key);
1:77a1110:     hash.clear();
1:77a1110:     if (compress) {
1:77a1110:       // If it is compressed check in roaring bitmap
1:77a1110:       for (int i = 0; i < nbHash; i++) {
1:77a1110:         if (!bitmap.contains(h[i])) {
1:77a1110:           return false;
1:77a1110:         }
1:77a1110:       }
1:77a1110:     } else {
1:77a1110:       for (int i = 0; i < nbHash; i++) {
1:77a1110:         if (!bits.get(h[i])) {
1:77a1110:           return false;
1:77a1110:         }
1:77a1110:       }
1:77a1110:     }
1:77a1110:     return true;
1:77a1110:   }
1:77a1110: 
1:77a1110:   @Override
1:77a1110:   public void write(DataOutput out) throws IOException {
1:047c502:     out.writeInt(blockletNo);
1:77a1110:     out.writeInt(this.nbHash);
1:77a1110:     out.writeByte(this.hashType);
1:77a1110:     out.writeInt(this.vectorSize);
1:77a1110:     out.writeBoolean(compress);
1:047c502:     BitSet bits = getBitSet();
1:77a1110:     if (!compress) {
1:77a1110:       byte[] bytes = bits.toByteArray();
1:77a1110:       out.writeInt(bytes.length);
1:77a1110:       out.write(bytes);
1:77a1110:     } else {
1:77a1110:       RoaringBitmap bitmap = new RoaringBitmap();
1:77a1110:       int length = bits.cardinality();
1:77a1110:       int nextSetBit = bits.nextSetBit(0);
1:77a1110:       for (int i = 0; i < length; ++i) {
1:77a1110:         bitmap.add(nextSetBit);
1:77a1110:         nextSetBit = bits.nextSetBit(nextSetBit + 1);
1:77a1110:       }
1:77a1110:       bitmap.serialize(out);
1:77a1110:     }
1:77a1110:   }
1:77a1110: 
1:77a1110:   @Override
1:77a1110:   public void readFields(DataInput in) throws IOException {
1:047c502:     this.blockletNo = in.readInt();
1:77a1110:     this.nbHash = in.readInt();
1:77a1110:     this.hashType = in.readByte();
1:77a1110:     this.vectorSize = in.readInt();
1:77a1110:     this.compress = in.readBoolean();
1:77a1110:     if (!compress) {
1:77a1110:       int len = in.readInt();
1:77a1110:       byte[] bytes = new byte[len];
1:77a1110:       in.readFully(bytes);
1:047c502:       setBitSet(BitSet.valueOf(bytes));
1:77a1110:     } else {
1:77a1110:       this.bitmap = new RoaringBitmap();
1:77a1110:       bitmap.deserialize(in);
1:77a1110:     }
1:77a1110:     this.hash = new HashFunction(this.vectorSize, this.nbHash, this.hashType);
1:77a1110:   }
1:047c502: 
1:047c502:   public int getSize() {
1:047c502:     int size = 14; // size of nbHash,hashType, vectorSize, compress
1:047c502:     if (compress) {
1:047c502:       size += bitmap.getSizeInBytes();
1:047c502:     } else {
1:047c502:       try {
1:047c502:         size += getBitSet().toLongArray().length * 8;
1:047c502:       } catch (IOException e) {
1:047c502:         throw new RuntimeException(e);
1:047c502:       }
1:047c502:     }
1:047c502:     return size;
1:047c502:   }
1:047c502: 
1:047c502:   /**
1:047c502:    * Get bitset from super class using reflection, in some cases java cannot access the fields if
1:047c502:    * jars are loaded in separte class loaders.
1:047c502:    *
1:047c502:    * @return
1:047c502:    * @throws IOException
1:047c502:    */
1:047c502:   private BitSet getBitSet() throws IOException {
1:047c502:     try {
1:047c502:       Field field = BloomFilter.class.getDeclaredField("bits");
1:047c502:       field.setAccessible(true);
1:047c502:       return (BitSet)field.get(this);
1:047c502:     } catch (Exception e) {
1:047c502:       throw new IOException(e);
1:047c502:     }
1:047c502:   }
1:047c502: 
1:047c502:   /**
1:047c502:    * Set bitset from super class using reflection, in some cases java cannot access the fields if
1:047c502:    * jars are loaded in separte class loaders.
1:047c502:    * @param bitSet
1:047c502:    * @throws IOException
1:047c502:    */
1:047c502:   private void setBitSet(BitSet bitSet) throws IOException {
1:047c502:     try {
1:047c502:       Field field = BloomFilter.class.getDeclaredField("bits");
1:047c502:       field.setAccessible(true);
1:047c502:       field.set(this, bitSet);
1:047c502:     } catch (Exception e) {
1:047c502:       throw new IOException(e);
1:047c502:     }
1:047c502:   }
1:047c502: 
1:047c502:   public void setBlockletNo(int blockletNo) {
1:047c502:     this.blockletNo = blockletNo;
1:047c502:   }
1:047c502: 
1:047c502:   public int getBlockletNo() {
1:047c502:     return blockletNo;
1:047c502:   }
1:7b31b91: 
1:7b31b91:   public String getShardName() {
1:7b31b91:     return shardName;
1:7b31b91:   }
1:7b31b91: 
1:7b31b91:   public void setShardName(String shardName) {
1:7b31b91:     this.shardName = shardName;
1:7b31b91:   }
1:7b31b91: 
1:77a1110: }
============================================================================
author:Manhua
-------------------------------------------------------------------------------
commit:7b31b91
/////////////////////////////////////////////////////////////////////////
1:   // used for building blocklet when query
1:   private String shardName;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public String getShardName() {
1:     return shardName;
1:   }
1: 
1:   public void setShardName(String shardName) {
1:     this.shardName = shardName;
1:   }
1: 
author:ravipesala
-------------------------------------------------------------------------------
commit:047c502
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Field;
/////////////////////////////////////////////////////////////////////////
1:   private int blockletNo;
1: 
/////////////////////////////////////////////////////////////////////////
1:     out.writeInt(blockletNo);
1:     BitSet bits = getBitSet();
/////////////////////////////////////////////////////////////////////////
1:     this.blockletNo = in.readInt();
/////////////////////////////////////////////////////////////////////////
1:       setBitSet(BitSet.valueOf(bytes));
1: 
1:   public int getSize() {
1:     int size = 14; // size of nbHash,hashType, vectorSize, compress
1:     if (compress) {
1:       size += bitmap.getSizeInBytes();
1:     } else {
1:       try {
1:         size += getBitSet().toLongArray().length * 8;
1:       } catch (IOException e) {
1:         throw new RuntimeException(e);
1:       }
1:     }
1:     return size;
1:   }
1: 
1:   /**
1:    * Get bitset from super class using reflection, in some cases java cannot access the fields if
1:    * jars are loaded in separte class loaders.
1:    *
1:    * @return
1:    * @throws IOException
1:    */
1:   private BitSet getBitSet() throws IOException {
1:     try {
1:       Field field = BloomFilter.class.getDeclaredField("bits");
1:       field.setAccessible(true);
1:       return (BitSet)field.get(this);
1:     } catch (Exception e) {
1:       throw new IOException(e);
1:     }
1:   }
1: 
1:   /**
1:    * Set bitset from super class using reflection, in some cases java cannot access the fields if
1:    * jars are loaded in separte class loaders.
1:    * @param bitSet
1:    * @throws IOException
1:    */
1:   private void setBitSet(BitSet bitSet) throws IOException {
1:     try {
1:       Field field = BloomFilter.class.getDeclaredField("bits");
1:       field.setAccessible(true);
1:       field.set(this, bitSet);
1:     } catch (Exception e) {
1:       throw new IOException(e);
1:     }
1:   }
1: 
1:   public void setBlockletNo(int blockletNo) {
1:     this.blockletNo = blockletNo;
1:   }
1: 
1:   public int getBlockletNo() {
1:     return blockletNo;
1:   }
commit:77a1110
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.hadoop.util.bloom;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.BitSet;
1: 
1: import org.roaringbitmap.RoaringBitmap;
1: 
1: /**
1:  * It is the extendable class to hadoop bloomfilter, it is extendable to implement compressed bloom
1:  * and fast serialize and deserialize of bloom.
1:  */
1: public class CarbonBloomFilter extends BloomFilter {
1: 
1:   private RoaringBitmap bitmap;
1: 
1:   private boolean compress;
1: 
1:   public CarbonBloomFilter() {
1:   }
1: 
1:   public CarbonBloomFilter(int vectorSize, int nbHash, int hashType, boolean compress) {
1:     super(vectorSize, nbHash, hashType);
1:     this.compress = compress;
1:   }
1: 
1:   @Override
1:   public boolean membershipTest(Key key) {
1:     if (key == null) {
1:       throw new NullPointerException("key cannot be null");
1:     }
1: 
1:     int[] h = hash.hash(key);
1:     hash.clear();
1:     if (compress) {
1:       // If it is compressed check in roaring bitmap
1:       for (int i = 0; i < nbHash; i++) {
1:         if (!bitmap.contains(h[i])) {
1:           return false;
1:         }
1:       }
1:     } else {
1:       for (int i = 0; i < nbHash; i++) {
1:         if (!bits.get(h[i])) {
1:           return false;
1:         }
1:       }
1:     }
1:     return true;
1:   }
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeInt(this.nbHash);
1:     out.writeByte(this.hashType);
1:     out.writeInt(this.vectorSize);
1:     out.writeBoolean(compress);
1:     if (!compress) {
1:       byte[] bytes = bits.toByteArray();
1:       out.writeInt(bytes.length);
1:       out.write(bytes);
1:     } else {
1:       RoaringBitmap bitmap = new RoaringBitmap();
1:       int length = bits.cardinality();
1:       int nextSetBit = bits.nextSetBit(0);
1:       for (int i = 0; i < length; ++i) {
1:         bitmap.add(nextSetBit);
1:         nextSetBit = bits.nextSetBit(nextSetBit + 1);
1:       }
1:       bitmap.serialize(out);
1:     }
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     this.nbHash = in.readInt();
1:     this.hashType = in.readByte();
1:     this.vectorSize = in.readInt();
1:     this.compress = in.readBoolean();
1:     if (!compress) {
1:       int len = in.readInt();
1:       byte[] bytes = new byte[len];
1:       in.readFully(bytes);
0:       this.bits = BitSet.valueOf(bytes);
1:     } else {
1:       this.bitmap = new RoaringBitmap();
1:       bitmap.deserialize(in);
1:     }
1:     this.hash = new HashFunction(this.vectorSize, this.nbHash, this.hashType);
1:   }
1: }
============================================================================