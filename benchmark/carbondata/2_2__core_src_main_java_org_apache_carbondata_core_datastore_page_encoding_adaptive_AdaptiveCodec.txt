1:edda248: /*
1:edda248:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:edda248:  * contributor license agreements.  See the NOTICE file distributed with
1:edda248:  * this work for additional information regarding copyright ownership.
1:edda248:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:edda248:  * (the "License"); you may not use this file except in compliance with
1:edda248:  * the License.  You may obtain a copy of the License at
1:edda248:  *
1:edda248:  *    http://www.apache.org/licenses/LICENSE-2.0
1:edda248:  *
1:edda248:  * Unless required by applicable law or agreed to in writing, software
1:edda248:  * distributed under the License is distributed on an "AS IS" BASIS,
1:edda248:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:edda248:  * See the License for the specific language governing permissions and
1:edda248:  * limitations under the License.
1:edda248:  */
7:edda248: 
1:e6a4f64: package org.apache.carbondata.core.datastore.page.encoding.adaptive;
1:eadfea7: 
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageCodec;
1:bc3e684: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1:edda248: import org.apache.carbondata.core.metadata.datatype.DataType;
1:edda248: 
1:edda248: /**
1:edda248:  * Subclass of this codec depends on statistics of the column page (adaptive) to perform apply
1:edda248:  * and decode, it also employs compressor to compress the encoded data
1:edda248:  */
1:e6a4f64: public abstract class AdaptiveCodec implements ColumnPageCodec {
1:edda248: 
1:edda248:   // TODO: cache and reuse the same encoder since snappy is thread-safe
1:edda248: 
1:edda248:   // statistics of this page, can be used by subclass
1:bc3e684:   protected final SimpleStatsResult stats;
1:edda248: 
1:edda248:   // the data type used for storage
1:edda248:   protected final DataType targetDataType;
1:edda248: 
1:edda248:   // the data type specified in schema
1:edda248:   protected final DataType srcDataType;
1:edda248: 
1:e6a4f64:   protected AdaptiveCodec(DataType srcDataType, DataType targetDataType,
1:e6a4f64:       SimpleStatsResult stats) {
1:edda248:     this.stats = stats;
1:edda248:     this.srcDataType = srcDataType;
1:edda248:     this.targetDataType = targetDataType;
1:a5af0ff:   }
1:a5af0ff: 
1:892f120:   public DataType getTargetDataType() {
1:892f120:     return targetDataType;
1:892f120:   }
1:892f120: 
1:a5af0ff:   @Override
1:edda248:   public String toString() {
1:edda248:     return String.format("%s[src type: %s, target type: %s, stats(%s)]",
1:edda248:         getClass().getName(), srcDataType, targetDataType, stats);
2:edda248:   }
1:edda248: 
1:edda248:   protected String debugInfo() {
1:edda248:     return this.toString();
1:edda248:   }
1:edda248: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:892f120
/////////////////////////////////////////////////////////////////////////
1:   public DataType getTargetDataType() {
1:     return targetDataType;
1:   }
1: 
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.datastore.page.encoding.adaptive;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageCodec;
0: import org.apache.carbondata.core.datastore.page.encoding.EncodedColumnPage;
1: public abstract class AdaptiveCodec implements ColumnPageCodec {
/////////////////////////////////////////////////////////////////////////
1:   protected AdaptiveCodec(DataType srcDataType, DataType targetDataType,
1:       SimpleStatsResult stats) {
author:jackylk
-------------------------------------------------------------------------------
commit:a5af0ff
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.page.ComplexColumnPage;
/////////////////////////////////////////////////////////////////////////
0:   public EncodedColumnPage[] encodeComplexColumn(ComplexColumnPage input) {
0:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
/////////////////////////////////////////////////////////////////////////
1:   protected final SimpleStatsResult stats;
/////////////////////////////////////////////////////////////////////////
0:       SimpleStatsResult stats, Compressor compressor) {
/////////////////////////////////////////////////////////////////////////
0:   public abstract EncodedColumnPage encode(ColumnPage input) throws MemoryException, IOException;
commit:eadfea7
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
0:   public abstract byte[] encode(ColumnPage input) throws MemoryException, IOException;
commit:7359601
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.memory.MemoryException;
/////////////////////////////////////////////////////////////////////////
0:   public abstract byte[] encode(ColumnPage input) throws MemoryException;
0:   public abstract ColumnPage decode(byte[] input, int offset, int length) throws MemoryException;
commit:edda248
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.carbondata.core.datastore.page.encoding;
1: 
0: import org.apache.carbondata.core.datastore.compression.Compressor;
0: import org.apache.carbondata.core.datastore.page.ColumnPage;
0: import org.apache.carbondata.core.datastore.page.statistics.ColumnPageStatsVO;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: 
1: /**
1:  * Subclass of this codec depends on statistics of the column page (adaptive) to perform apply
1:  * and decode, it also employs compressor to compress the encoded data
1:  */
0: public abstract class AdaptiveCompressionCodec implements ColumnPageCodec {
1: 
1:   // TODO: cache and reuse the same encoder since snappy is thread-safe
1: 
0:   // compressor that can be used by subclass
0:   protected final Compressor compressor;
1: 
1:   // statistics of this page, can be used by subclass
0:   protected final ColumnPageStatsVO stats;
1: 
1:   // the data type used for storage
1:   protected final DataType targetDataType;
1: 
1:   // the data type specified in schema
1:   protected final DataType srcDataType;
1: 
0:   protected AdaptiveCompressionCodec(DataType srcDataType, DataType targetDataType,
0:       ColumnPageStatsVO stats, Compressor compressor) {
1:     this.stats = stats;
1:     this.srcDataType = srcDataType;
1:     this.targetDataType = targetDataType;
0:     this.compressor = compressor;
1:   }
1: 
0:   public abstract String getName();
1: 
0:   public abstract byte[] encode(ColumnPage input);
1: 
0:   public abstract ColumnPage decode(byte[] input, int offset, int length);
1: 
0:   @Override
1:   public String toString() {
1:     return String.format("%s[src type: %s, target type: %s, stats(%s)]",
1:         getClass().getName(), srcDataType, targetDataType, stats);
1:   }
1: 
1:   protected String debugInfo() {
1:     return this.toString();
1:   }
1: }
============================================================================