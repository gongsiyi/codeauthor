1:e710339: /*
1:e710339:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e710339:  * contributor license agreements.  See the NOTICE file distributed with
1:e710339:  * this work for additional information regarding copyright ownership.
1:e710339:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e710339:  * (the "License"); you may not use this file except in compliance with
1:e710339:  * the License.  You may obtain a copy of the License at
1:e710339:  *
1:e710339:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e710339:  *
1:e710339:  * Unless required by applicable law or agreed to in writing, software
1:e710339:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e710339:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e710339:  * See the License for the specific language governing permissions and
1:e710339:  * limitations under the License.
1:e710339:  */
1:e710339: package org.apache.carbondata.core.localdictionary.dictionaryholder;
1:e710339: 
1:e710339: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1:e710339: 
1:e710339: /**
1:e710339:  * Interface for storing the dictionary key and value.
1:e710339:  * Concrete implementation can be of map based or trie based.
1:e710339:  */
1:e710339: public interface DictionaryStore {
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to add dictionary value to dictionary holder
1:e710339:    * if it is already present in the holder then it will return exiting dictionary value.
1:e710339:    * @param key
1:e710339:    * dictionary key
1:e710339:    * @return dictionary value
1:e710339:    */
1:e710339:   int putIfAbsent(byte[] key) throws DictionaryThresholdReachedException;
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method to get the current size of dictionary
1:e710339:    * @return true if threshold of store reached
1:e710339:    */
1:e710339:   boolean isThresholdReached();
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to get the dictionary key based on value
1:e710339:    * @param value
1:e710339:    * dictionary value
1:e710339:    * @return dictionary key based on value
1:e710339:    */
1:e710339:   byte[] getDictionaryKeyBasedOnValue(int value);
1:e710339: 
1:e710339: }
============================================================================
author:kumarvishal09
-------------------------------------------------------------------------------
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.localdictionary.dictionaryholder;
1: 
1: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1: 
1: /**
1:  * Interface for storing the dictionary key and value.
1:  * Concrete implementation can be of map based or trie based.
1:  */
1: public interface DictionaryStore {
1: 
1:   /**
1:    * Below method will be used to add dictionary value to dictionary holder
1:    * if it is already present in the holder then it will return exiting dictionary value.
1:    * @param key
1:    * dictionary key
1:    * @return dictionary value
1:    */
1:   int putIfAbsent(byte[] key) throws DictionaryThresholdReachedException;
1: 
1:   /**
1:    * Below method to get the current size of dictionary
1:    * @return true if threshold of store reached
1:    */
1:   boolean isThresholdReached();
1: 
1:   /**
1:    * Below method will be used to get the dictionary key based on value
1:    * @param value
1:    * dictionary value
1:    * @return dictionary key based on value
1:    */
1:   byte[] getDictionaryKeyBasedOnValue(int value);
1: 
1: }
============================================================================