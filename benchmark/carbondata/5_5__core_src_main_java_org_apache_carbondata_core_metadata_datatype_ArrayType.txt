1:956833e: /*
1:956833e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:956833e:  * contributor license agreements.  See the NOTICE file distributed with
1:956833e:  * this work for additional information regarding copyright ownership.
1:956833e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:956833e:  * (the "License"); you may not use this file except in compliance with
1:956833e:  * the License.  You may obtain a copy of the License at
1:956833e:  *
1:956833e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:956833e:  *
1:956833e:  * Unless required by applicable law or agreed to in writing, software
1:956833e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:956833e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:956833e:  * See the License for the specific language governing permissions and
1:956833e:  * limitations under the License.
1:956833e:  */
1:78efc7f: 
1:956833e: package org.apache.carbondata.core.metadata.datatype;
1:78efc7f: 
1:956833e: public class ArrayType extends DataType {
1:b1c85fa: 
1:933e30c:   private DataType elementType;
6:956833e: 
1:933e30c:   ArrayType(DataType elementType) {
1:933e30c:     super(DataTypes.ARRAY_TYPE_ID, 9, "ARRAY", -1);
1:933e30c:     this.elementType = elementType;
4:956833e:   }
1:78efc7f: 
1:956833e:   @Override
1:956833e:   public boolean isComplexType() {
1:956833e:     return true;
1:b1c85fa:   }
1:78efc7f: 
1:7ef9164:   @Override
1:7ef9164:   public boolean equals(Object obj) {
1:7ef9164:     if (this == obj) {
1:7ef9164:       return true;
1:7ef9164:     }
1:7ef9164:     if (obj == null) {
1:7ef9164:       return false;
1:7ef9164:     }
1:3394128:     if (getClass() != obj.getClass()) {
1:7ef9164:       return false;
1:7ef9164:     }
1:3394128:     ArrayType other = (ArrayType) obj;
1:3394128:     if (!this.getName().equalsIgnoreCase(other.getName())) {
1:3394128:       return false;
1:3394128:     }
1:3394128:     if (!this.getElementType().equals(other.getElementType())) {
1:7ef9164:       return false;
1:7ef9164:     }
1:7ef9164:     return true;
1:7ef9164:   }
1:7ef9164: 
1:7ef9164:   @Override
1:7ef9164:   public int hashCode() {
1:7ef9164:     final int prime = 31;
1:7ef9164:     int result = 1;
1:7ef9164:     result = prime * result + getName().hashCode();
1:3394128:     result = prime * result + getElementType().hashCode();
1:7ef9164:     return result;
1:7ef9164:   }
1:7ef9164: 
1:b1c85fa:   public DataType getElementType() {
1:b1c85fa:     return elementType;
1:78efc7f:   }
1:3394128: 
1:78efc7f: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:3394128
/////////////////////////////////////////////////////////////////////////
1:     if (getClass() != obj.getClass()) {
1:     ArrayType other = (ArrayType) obj;
1:     if (!this.getName().equalsIgnoreCase(other.getName())) {
1:       return false;
1:     }
1:     if (!this.getElementType().equals(other.getElementType())) {
/////////////////////////////////////////////////////////////////////////
1:     result = prime * result + getElementType().hashCode();
1: 
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public boolean equals(Object obj) {
1:     if (this == obj) {
1:       return true;
1:     }
1:     if (obj == null) {
1:       return false;
1:     }
0:     if (!(obj instanceof ArrayType)) {
1:       return false;
1:     }
0:     if (!this.getName().equalsIgnoreCase(((ArrayType) obj).getName())) {
1:       return false;
1:     }
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     final int prime = 31;
1:     int result = 1;
1:     result = prime * result + getName().hashCode();
1:     return result;
1:   }
1: 
author:rahulforallp
-------------------------------------------------------------------------------
commit:78efc7f
/////////////////////////////////////////////////////////////////////////
1: 
0:   @Override public boolean equals(Object o) {
0:     if (this == o) return true;
0:     if (!(o instanceof ArrayType)) return false;
1: 
0:     ArrayType arrayType = (ArrayType) o;
1: 
0:     return elementType.equals(arrayType.elementType);
1:   }
1: 
0:   @Override public int hashCode() {
0:     return elementType.hashCode();
1:   }
author:sounakr
-------------------------------------------------------------------------------
commit:b1c85fa
/////////////////////////////////////////////////////////////////////////
1: 
1:   public DataType getElementType() {
1:     return elementType;
1:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:933e30c
/////////////////////////////////////////////////////////////////////////
1:   private DataType elementType;
1:   ArrayType(DataType elementType) {
1:     super(DataTypes.ARRAY_TYPE_ID, 9, "ARRAY", -1);
1:     this.elementType = elementType;
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.datatype;
1: 
1: public class ArrayType extends DataType {
1: 
0:   public static final DataType ARRAY = new ArrayType(DataTypes.ARRAY_TYPE_ID, 9, "ARRAY", -1);
1: 
0:   private ArrayType(int id, int precedenceOrder, String name, int sizeInBytes) {
0:     super(id, precedenceOrder, name, sizeInBytes);
1:   }
1: 
0:   // this function is needed to ensure singleton pattern while supporting java serialization
0:   private Object readResolve() {
0:     return DataTypes.ARRAY;
1:   }
1: 
1:   @Override
1:   public boolean isComplexType() {
1:     return true;
1:   }
1: }
============================================================================