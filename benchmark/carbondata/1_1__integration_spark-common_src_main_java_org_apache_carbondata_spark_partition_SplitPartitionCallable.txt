1:874764f: /*
1:874764f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:874764f:  * contributor license agreements.  See the NOTICE file distributed with
1:874764f:  * this work for additional information regarding copyright ownership.
1:874764f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:874764f:  * (the "License"); you may not use this file except in compliance with
1:874764f:  * the License.  You may obtain a copy of the License at
1:874764f:  *
1:874764f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:874764f:  *
1:874764f:  * Unless required by applicable law or agreed to in writing, software
1:874764f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:874764f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:874764f:  * See the License for the specific language governing permissions and
1:874764f:  * limitations under the License.
1:874764f:  */
1:874764f: 
1:874764f: package org.apache.carbondata.spark.partition;
1:874764f: 
1:874764f: import java.util.concurrent.Callable;
1:874764f: 
1:874764f: import org.apache.carbondata.spark.rdd.PartitionSplitter;
1:874764f: 
1:874764f: import org.apache.spark.sql.execution.command.SplitPartitionCallableModel;
1:874764f: 
1:874764f: /**
1:874764f:  * Callable class which is used to split the partition in a separate callable.
1:874764f:  */
1:874764f: public class SplitPartitionCallable implements Callable<Void> {
1:874764f: 
1:874764f:   private final SplitPartitionCallableModel splitPartitionCallableModel;
1:874764f: 
1:874764f:   public SplitPartitionCallable(SplitPartitionCallableModel splitPartitionCallableModel) {
1:874764f:     this.splitPartitionCallableModel = splitPartitionCallableModel;
1:874764f:   }
1:874764f: 
1:874764f:   @Override public Void call() {
1:874764f:     PartitionSplitter.triggerPartitionSplit(splitPartitionCallableModel);
1:874764f:     return null;
1:874764f:   }
1:874764f: }
============================================================================
author:lionelcao
-------------------------------------------------------------------------------
commit:874764f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.spark.partition;
1: 
1: import java.util.concurrent.Callable;
1: 
1: import org.apache.carbondata.spark.rdd.PartitionSplitter;
1: 
1: import org.apache.spark.sql.execution.command.SplitPartitionCallableModel;
1: 
1: /**
1:  * Callable class which is used to split the partition in a separate callable.
1:  */
1: public class SplitPartitionCallable implements Callable<Void> {
1: 
1:   private final SplitPartitionCallableModel splitPartitionCallableModel;
1: 
1:   public SplitPartitionCallable(SplitPartitionCallableModel splitPartitionCallableModel) {
1:     this.splitPartitionCallableModel = splitPartitionCallableModel;
1:   }
1: 
1:   @Override public Void call() {
1:     PartitionSplitter.triggerPartitionSplit(splitPartitionCallableModel);
1:     return null;
1:   }
1: }
============================================================================