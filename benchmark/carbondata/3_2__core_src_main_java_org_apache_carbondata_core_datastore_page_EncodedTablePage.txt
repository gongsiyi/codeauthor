1:bc3e684: /*
1:bc3e684:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bc3e684:  * contributor license agreements.  See the NOTICE file distributed with
1:bc3e684:  * this work for additional information regarding copyright ownership.
1:bc3e684:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bc3e684:  * (the "License"); you may not use this file except in compliance with
1:bc3e684:  * the License.  You may obtain a copy of the License at
1:bc3e684:  *
1:bc3e684:  *    http://www.apache.org/licenses/LICENSE-2.0
1:bc3e684:  *
1:bc3e684:  * Unless required by applicable law or agreed to in writing, software
1:bc3e684:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bc3e684:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc3e684:  * See the License for the specific language governing permissions and
1:bc3e684:  * limitations under the License.
1:bc3e684:  */
7:bc3e684: 
1:bc3e684: package org.apache.carbondata.core.datastore.page;
1:bc3e684: 
1:e6a4f64: import java.io.IOException;
1:e6a4f64: 
1:bc3e684: import org.apache.carbondata.core.datastore.page.encoding.EncodedColumnPage;
1:bc3e684: import org.apache.carbondata.core.datastore.page.key.TablePageKey;
1:bc3e684: 
1:bc3e684: /**
1:bc3e684:  * Table page that after encoding and compression.
1:bc3e684:  */
1:bc3e684: public class EncodedTablePage {
1:bc3e684: 
1:bc3e684:   // encoded data and metadata for each dimension column
1:e6a4f64:   private EncodedColumnPage[] dimensionPages;
1:bc3e684: 
1:bc3e684:   // encoded data and metadata for each measure column
1:e6a4f64:   private EncodedColumnPage[] measurePages;
1:bc3e684: 
1:bc3e684:   // key of this page
1:bc3e684:   private TablePageKey pageKey;
1:bc3e684: 
1:bc3e684:   // number of row in this page
1:bc3e684:   private int pageSize;
1:bc3e684: 
1:bc3e684:   // size in bytes of all encoded columns (including data and metadate)
1:bc3e684:   private int encodedSize;
1:bc3e684: 
1:bc3e684:   public static EncodedTablePage newInstance(int pageSize,
1:e6a4f64:       EncodedColumnPage[] dimensionPages, EncodedColumnPage[] measurePages,
1:e6a4f64:       TablePageKey tablePageKey) throws IOException {
1:e6a4f64:     return new EncodedTablePage(pageSize, dimensionPages, measurePages, tablePageKey);
9:bc3e684:   }
1:bc3e684: 
1:e6a4f64:   private EncodedTablePage(int pageSize,
1:e6a4f64:       EncodedColumnPage[] dimensionPages, EncodedColumnPage[] measurePages,
1:e6a4f64:       TablePageKey tablePageKey) throws IOException {
1:e6a4f64:     this.dimensionPages = dimensionPages;
1:e6a4f64:     this.measurePages = measurePages;
1:bc3e684:     this.pageSize = pageSize;
1:bc3e684:     this.pageKey = tablePageKey;
1:e6a4f64:     this.encodedSize = calculatePageSize(dimensionPages, measurePages);
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   // return size in bytes of this encoded page
1:e6a4f64:   private int calculatePageSize(EncodedColumnPage[] dimensionPages,
1:e6a4f64:       EncodedColumnPage[] measurePages) throws IOException {
1:bc3e684:     int size = 0;
1:e6a4f64:     for (EncodedColumnPage dimensionPage : dimensionPages) {
1:e6a4f64:       size += dimensionPage.getTotalSerializedSize();
1:bc3e684:     }
1:e6a4f64:     for (EncodedColumnPage measurePage : measurePages) {
1:e6a4f64:       size += measurePage.getTotalSerializedSize();
1:bc3e684:     }
1:bc3e684:     return size;
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public int getEncodedSize() {
1:bc3e684:     return encodedSize;
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public int getPageSize() {
1:bc3e684:     return pageSize;
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public int getNumDimensions() {
1:e6a4f64:     return dimensionPages.length;
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public int getNumMeasures() {
1:e6a4f64:     return measurePages.length;
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public TablePageKey getPageKey() {
1:bc3e684:     return pageKey;
1:bc3e684:   }
1:bc3e684: 
1:e6a4f64:   public EncodedColumnPage getDimension(int dimensionIndex) {
1:e6a4f64:     return dimensionPages[dimensionIndex];
1:bc3e684:   }
1:bc3e684: 
1:e6a4f64:   public EncodedColumnPage getMeasure(int measureIndex) {
1:e6a4f64:     return measurePages[measureIndex];
1:bc3e684:   }
1:bc3e684: 
1:e6a4f64:   public EncodedColumnPage[] getDimensions() {
1:e6a4f64:     return dimensionPages;
1:bc3e684:   }
1:bc3e684: 
1:e6a4f64:   public EncodedColumnPage[] getMeasures() {
1:e6a4f64:     return measurePages;
1:bc3e684:   }
1:bc3e684: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1:   private EncodedColumnPage[] dimensionPages;
1:   private EncodedColumnPage[] measurePages;
/////////////////////////////////////////////////////////////////////////
0:     page.dimensionPages = new EncodedColumnPage[0];
0:     page.measurePages = new EncodedColumnPage[0];
1:       EncodedColumnPage[] dimensionPages, EncodedColumnPage[] measurePages,
1:       TablePageKey tablePageKey) throws IOException {
1:     return new EncodedTablePage(pageSize, dimensionPages, measurePages, tablePageKey);
1:   private EncodedTablePage(int pageSize,
1:       EncodedColumnPage[] dimensionPages, EncodedColumnPage[] measurePages,
1:       TablePageKey tablePageKey) throws IOException {
1:     this.dimensionPages = dimensionPages;
1:     this.measurePages = measurePages;
1:     this.encodedSize = calculatePageSize(dimensionPages, measurePages);
1:   private int calculatePageSize(EncodedColumnPage[] dimensionPages,
1:       EncodedColumnPage[] measurePages) throws IOException {
1:     for (EncodedColumnPage dimensionPage : dimensionPages) {
1:       size += dimensionPage.getTotalSerializedSize();
1:     for (EncodedColumnPage measurePage : measurePages) {
1:       size += measurePage.getTotalSerializedSize();
/////////////////////////////////////////////////////////////////////////
1:     return dimensionPages.length;
1:     return measurePages.length;
1:   public EncodedColumnPage getDimension(int dimensionIndex) {
1:     return dimensionPages[dimensionIndex];
1:   public EncodedColumnPage getMeasure(int measureIndex) {
1:     return measurePages[measureIndex];
1:   public EncodedColumnPage[] getDimensions() {
1:     return dimensionPages;
1:   public EncodedColumnPage[] getMeasures() {
1:     return measurePages;
commit:f089287
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page;
1: 
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.datastore.columnar.IndexStorage;
1: import org.apache.carbondata.core.datastore.page.encoding.EncodedColumnPage;
0: import org.apache.carbondata.core.datastore.page.encoding.EncodedDimensionPage;
0: import org.apache.carbondata.core.datastore.page.encoding.EncodedMeasurePage;
1: import org.apache.carbondata.core.datastore.page.key.TablePageKey;
0: import org.apache.carbondata.core.util.CarbonUtil;
1: 
1: /**
1:  * Table page that after encoding and compression.
1:  */
1: public class EncodedTablePage {
1: 
1:   // encoded data and metadata for each dimension column
0:   private EncodedDimensionPage[] dimensions;
1: 
1:   // encoded data and metadata for each measure column
0:   private EncodedMeasurePage[] measures;
1: 
1:   // key of this page
1:   private TablePageKey pageKey;
1: 
1:   // number of row in this page
1:   private int pageSize;
1: 
0:   // true if it is last page of all input rows
0:   private boolean isLastPage;
1: 
1:   // size in bytes of all encoded columns (including data and metadate)
1:   private int encodedSize;
1: 
0:   public static EncodedTablePage newEmptyInstance() {
0:     EncodedTablePage page = new EncodedTablePage();
0:     page.pageSize = 0;
0:     page.encodedSize = 0;
0:     page.measures = new EncodedMeasurePage[0];
0:     page.dimensions = new EncodedDimensionPage[0];
0:     return page;
1:   }
1: 
1:   public static EncodedTablePage newInstance(int pageSize,
0:       EncodedDimensionPage[] dimensions, EncodedMeasurePage[] measures,
0:       TablePageKey tablePageKey) {
0:     return new EncodedTablePage(pageSize, dimensions, measures, tablePageKey);
1:   }
1: 
0:   private EncodedTablePage() {
1:   }
1: 
0:   private EncodedTablePage(int pageSize, EncodedDimensionPage[] encodedDimensions,
0:       EncodedMeasurePage[] encodedMeasures, TablePageKey tablePageKey) {
0:     this.dimensions = encodedDimensions;
0:     this.measures = encodedMeasures;
1:     this.pageSize = pageSize;
1:     this.pageKey = tablePageKey;
0:     this.encodedSize = calculatePageSize(encodedDimensions, encodedMeasures);
1:   }
1: 
1:   // return size in bytes of this encoded page
0:   private int calculatePageSize(EncodedDimensionPage[] encodedDimensions,
0:       EncodedMeasurePage[] encodedMeasures) {
1:     int size = 0;
0:     int totalEncodedDimensionDataLength = 0;
0:     int totalEncodedMeasuredDataLength = 0;
0:     // add row id index length
0:     for (EncodedDimensionPage dimension : dimensions) {
0:       IndexStorage indexStorage = dimension.getIndexStorage();
0:       if (!indexStorage.isAlreadySorted()) {
0:         size += indexStorage.getRowIdPageLengthInBytes() +
0:             indexStorage.getRowIdRlePageLengthInBytes() +
0:             CarbonCommonConstants.INT_SIZE_IN_BYTE;
1:       }
0:       if (indexStorage.getDataRlePageLengthInBytes() > 0) {
0:         size += indexStorage.getDataRlePageLengthInBytes();
1:       }
0:       totalEncodedDimensionDataLength += dimension.getEncodedData().length;
1:     }
0:     for (EncodedColumnPage measure : measures) {
0:       size += measure.getEncodedData().length;
1:     }
1: 
0:     for (EncodedDimensionPage encodedDimension : encodedDimensions) {
0:       size += CarbonUtil.getByteArray(encodedDimension.getDataChunk2()).length;
1:     }
0:     for (EncodedMeasurePage encodedMeasure : encodedMeasures) {
0:       size += CarbonUtil.getByteArray(encodedMeasure.getDataChunk2()).length;
1:     }
0:     size += totalEncodedDimensionDataLength + totalEncodedMeasuredDataLength;
1:     return size;
1:   }
1: 
1:   public int getEncodedSize() {
1:     return encodedSize;
1:   }
1: 
1:   public int getPageSize() {
1:     return pageSize;
1:   }
1: 
1:   public int getNumDimensions() {
0:     return dimensions.length;
1:   }
1: 
1:   public int getNumMeasures() {
0:     return measures.length;
1:   }
1: 
1:   public TablePageKey getPageKey() {
1:     return pageKey;
1:   }
1: 
0:   public boolean isLastPage() {
0:     return isLastPage;
1:   }
1: 
0:   public void setIsLastPage(boolean isWriteAll) {
0:     this.isLastPage = isWriteAll;
1:   }
1: 
0:   public EncodedMeasurePage getMeasure(int measureIndex) {
0:     return measures[measureIndex];
1:   }
1: 
0:   public EncodedMeasurePage[] getMeasures() {
0:     return measures;
1:   }
1: 
0:   public EncodedDimensionPage getDimension(int dimensionIndex) {
0:     return dimensions[dimensionIndex];
1:   }
1: 
0:   public EncodedDimensionPage[] getDimensions() {
0:     return dimensions;
1:   }
1: }
============================================================================