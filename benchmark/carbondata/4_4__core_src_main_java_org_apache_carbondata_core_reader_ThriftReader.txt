1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.reader;
1:cd6a4ff: 
1:0586146: import java.io.ByteArrayInputStream;
1:cd6a4ff: import java.io.DataInputStream;
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: 
1:ce09aaa: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonUtil;
1:cd6a4ff: 
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:cd6a4ff: import org.apache.thrift.TBase;
1:cd6a4ff: import org.apache.thrift.TException;
1:cd6a4ff: import org.apache.thrift.protocol.TCompactProtocol;
1:cd6a4ff: import org.apache.thrift.protocol.TProtocol;
1:cd6a4ff: import org.apache.thrift.transport.TIOStreamTransport;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * A simple class for reading Thrift objects (of a single type) from a fileName.
1:cd6a4ff:  */
1:cd6a4ff: public class ThriftReader {
1:cd6a4ff:   /**
1:cd6a4ff:    * buffer size
1:cd6a4ff:    */
1:cd6a4ff:   private static final int bufferSize = 2048;
1:cd6a4ff:   /**
1:cd6a4ff:    * File containing the objects.
1:cd6a4ff:    */
1:cd6a4ff:   private String fileName;
1:cd6a4ff:   /**
1:cd6a4ff:    * Used to create empty objects that will be initialized with values from the fileName.
1:cd6a4ff:    */
1:cd6a4ff:   private TBaseCreator creator;
1:cd6a4ff:   /**
1:cd6a4ff:    * For reading the fileName.
1:cd6a4ff:    */
1:cd6a4ff:   private DataInputStream dataInputStream;
1:cd6a4ff:   /**
1:cd6a4ff:    * For reading the binary thrift objects.
1:cd6a4ff:    */
1:cd6a4ff:   private TProtocol binaryIn;
1:cd6a4ff: 
1:8f1a029:   private Configuration configuration;
1:8f1a029: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Constructor.
1:cd6a4ff:    */
1:cd6a4ff:   public ThriftReader(String fileName, TBaseCreator creator) {
1:cd6a4ff:     this.fileName = fileName;
1:cd6a4ff:     this.creator = creator;
1:cd6a4ff:   }
1:cd6a4ff: 
1:8f1a029:   public ThriftReader(String fileName, TBaseCreator creator, Configuration configuration) {
1:8f1a029:     this.fileName = fileName;
1:8f1a029:     this.configuration = configuration;
1:8f1a029:     this.creator = creator;
1:8f1a029:   }
1:8f1a029: 
1:cd6a4ff:   /**
1:0586146:    * Constructor.
1:0586146:    */
1:cd6a4ff:   public ThriftReader(String fileName) {
1:cd6a4ff:     this.fileName = fileName;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Constructor.
1:cd6a4ff:    */
1:8f1a029:   public ThriftReader(String fileName, Configuration configuration) {
1:8f1a029:     this.fileName = fileName;
1:8f1a029:     this.configuration = configuration;
1:8f1a029:   }
1:8f1a029: 
1:8f1a029:   /**
1:8f1a029:    * Constructor.
1:8f1a029:    */
1:0586146:   public ThriftReader(byte[] fileData) {
1:0586146:     dataInputStream = new DataInputStream(new ByteArrayInputStream(fileData));
1:0586146:     binaryIn = new TCompactProtocol(new TIOStreamTransport(dataInputStream));
1:0586146:   }
1:0586146: 
1:0586146:   /**
1:cd6a4ff:    * Opens the fileName for reading.
1:cd6a4ff:    */
1:cd6a4ff:   public void open() throws IOException {
1:8f1a029:     Configuration conf = configuration != null ? configuration : FileFactory.getConfiguration();
1:cd6a4ff:     FileFactory.FileType fileType = FileFactory.getFileType(fileName);
1:8f1a029:     dataInputStream = FileFactory.getDataInputStream(fileName, fileType, bufferSize, conf);
1:cd6a4ff:     binaryIn = new TCompactProtocol(new TIOStreamTransport(dataInputStream));
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will set the position of stream from where data has to be read
1:cd6a4ff:    */
1:cd6a4ff:   public void setReadOffset(long bytesToSkip) throws IOException {
1:cd6a4ff:     if (dataInputStream.skip(bytesToSkip) != bytesToSkip) {
1:cd6a4ff:       throw new IOException("It doesn't set the offset properly");
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Checks if another objects is available by attempting to read another byte from the stream.
1:cd6a4ff:    */
1:cd6a4ff:   public boolean hasNext() throws IOException {
1:cd6a4ff:     dataInputStream.mark(1);
1:cd6a4ff:     int val = dataInputStream.read();
1:cd6a4ff:     dataInputStream.reset();
1:cd6a4ff:     return val != -1;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Reads the next object from the fileName.
1:cd6a4ff:    */
1:cd6a4ff:   public TBase read() throws IOException {
1:cd6a4ff:     TBase t = creator.create();
1:cd6a4ff:     try {
1:cd6a4ff:       t.read(binaryIn);
1:cd6a4ff:     } catch (TException e) {
1:cd6a4ff:       throw new IOException(e);
1:cd6a4ff:     }
1:cd6a4ff:     return t;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Reads the next object from the fileName.
1:cd6a4ff:    *
1:cd6a4ff:    * @param creator type of object which will be returned
1:cd6a4ff:    * @throws IOException any problem while reading
1:cd6a4ff:    */
1:cd6a4ff:   public TBase read(TBaseCreator creator) throws IOException {
1:cd6a4ff:     TBase t = creator.create();
1:cd6a4ff:     try {
1:cd6a4ff:       t.read(binaryIn);
1:cd6a4ff:     } catch (TException e) {
1:cd6a4ff:       throw new IOException(e);
1:cd6a4ff:     }
1:cd6a4ff:     return t;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Close the fileName.
1:cd6a4ff:    */
1:cd6a4ff:   public void close() {
1:cd6a4ff:     CarbonUtil.closeStreams(dataInputStream);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Thrift deserializes by taking an existing object and populating it. ThriftReader
1:cd6a4ff:    * needs a way of obtaining instances of the class to be populated and this interface
1:cd6a4ff:    * defines the mechanism by which a client provides these instances.
1:cd6a4ff:    */
1:eaadc88:   public interface TBaseCreator {
1:cd6a4ff:     TBase create();
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
/////////////////////////////////////////////////////////////////////////
1:   private Configuration configuration;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public ThriftReader(String fileName, TBaseCreator creator, Configuration configuration) {
1:     this.fileName = fileName;
1:     this.configuration = configuration;
1:     this.creator = creator;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public ThriftReader(String fileName, Configuration configuration) {
1:     this.fileName = fileName;
1:     this.configuration = configuration;
1:   }
1: 
1:   /**
1:    * Constructor.
1:    */
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = configuration != null ? configuration : FileFactory.getConfiguration();
1:     dataInputStream = FileFactory.getDataInputStream(fileName, fileType, bufferSize, conf);
author:ravipesala
-------------------------------------------------------------------------------
commit:0586146
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
1:    * Constructor.
1:    */
1:   public ThriftReader(byte[] fileData) {
1:     dataInputStream = new DataInputStream(new ByteArrayInputStream(fileData));
1:     binaryIn = new TCompactProtocol(new TIOStreamTransport(dataInputStream));
1:   }
1: 
1:   /**
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.reader;
1: 
1: import java.io.DataInputStream;
1: import java.io.IOException;
1: 
0: import org.apache.carbondata.core.datastorage.store.impl.FileFactory;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: 
1: import org.apache.thrift.TBase;
1: import org.apache.thrift.TException;
1: import org.apache.thrift.protocol.TCompactProtocol;
1: import org.apache.thrift.protocol.TProtocol;
1: import org.apache.thrift.transport.TIOStreamTransport;
1: 
1: /**
1:  * A simple class for reading Thrift objects (of a single type) from a fileName.
1:  */
1: public class ThriftReader {
1:   /**
1:    * buffer size
1:    */
1:   private static final int bufferSize = 2048;
1:   /**
1:    * File containing the objects.
1:    */
1:   private String fileName;
1:   /**
1:    * Used to create empty objects that will be initialized with values from the fileName.
1:    */
1:   private TBaseCreator creator;
1:   /**
1:    * For reading the fileName.
1:    */
1:   private DataInputStream dataInputStream;
1:   /**
1:    * For reading the binary thrift objects.
1:    */
1:   private TProtocol binaryIn;
1: 
1:   /**
1:    * Constructor.
1:    */
1:   public ThriftReader(String fileName, TBaseCreator creator) {
1:     this.fileName = fileName;
1:     this.creator = creator;
1:   }
1: 
1:   /**
1:    * Constructor.
1:    */
1:   public ThriftReader(String fileName) {
1:     this.fileName = fileName;
1:   }
1: 
1:   /**
1:    * Opens the fileName for reading.
1:    */
1:   public void open() throws IOException {
1:     FileFactory.FileType fileType = FileFactory.getFileType(fileName);
0:     dataInputStream = FileFactory.getDataInputStream(fileName, fileType, bufferSize);
1:     binaryIn = new TCompactProtocol(new TIOStreamTransport(dataInputStream));
1:   }
1: 
1:   /**
1:    * This method will set the position of stream from where data has to be read
1:    */
1:   public void setReadOffset(long bytesToSkip) throws IOException {
1:     if (dataInputStream.skip(bytesToSkip) != bytesToSkip) {
1:       throw new IOException("It doesn't set the offset properly");
1:     }
1:   }
1: 
1:   /**
1:    * Checks if another objects is available by attempting to read another byte from the stream.
1:    */
1:   public boolean hasNext() throws IOException {
1:     dataInputStream.mark(1);
1:     int val = dataInputStream.read();
1:     dataInputStream.reset();
1:     return val != -1;
1:   }
1: 
1:   /**
1:    * Reads the next object from the fileName.
1:    */
1:   public TBase read() throws IOException {
1:     TBase t = creator.create();
1:     try {
1:       t.read(binaryIn);
1:     } catch (TException e) {
1:       throw new IOException(e);
1:     }
1:     return t;
1:   }
1: 
1:   /**
1:    * Reads the next object from the fileName.
1:    *
1:    * @param creator type of object which will be returned
1:    * @throws IOException any problem while reading
1:    */
1:   public TBase read(TBaseCreator creator) throws IOException {
1:     TBase t = creator.create();
1:     try {
1:       t.read(binaryIn);
1:     } catch (TException e) {
1:       throw new IOException(e);
1:     }
1:     return t;
1:   }
1: 
1:   /**
1:    * Close the fileName.
1:    */
1:   public void close() {
1:     CarbonUtil.closeStreams(dataInputStream);
1:   }
1: 
1:   /**
1:    * Thrift deserializes by taking an existing object and populating it. ThriftReader
1:    * needs a way of obtaining instances of the class to be populated and this interface
1:    * defines the mechanism by which a client provides these instances.
1:    */
0:   public static interface TBaseCreator {
1:     TBase create();
1:   }
1: }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1:   public interface TBaseCreator {
============================================================================