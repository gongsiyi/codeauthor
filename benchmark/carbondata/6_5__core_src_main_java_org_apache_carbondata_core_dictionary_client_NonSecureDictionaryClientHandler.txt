1:05b2654: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:05b2654:  *
1:05b2654:  *    http://www.apache.org/licenses/LICENSE-2.0
1:05b2654:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:05b2654:  */
1:05b2654: package org.apache.carbondata.core.dictionary.client;
1:05b2654: 
1:05b2654: import java.util.concurrent.BlockingQueue;
1:05b2654: import java.util.concurrent.LinkedBlockingQueue;
1:87dade7: import java.util.concurrent.TimeUnit;
1:05b2654: 
1:05b2654: import org.apache.carbondata.common.logging.LogService;
1:05b2654: import org.apache.carbondata.common.logging.LogServiceFactory;
1:87dade7: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:05b2654: 
1:87dade7: import io.netty.buffer.ByteBuf;
1:87dade7: import io.netty.channel.ChannelFuture;
1:87dade7: import io.netty.channel.ChannelFutureListener;
1:87dade7: import io.netty.channel.ChannelHandlerContext;
1:87dade7: import io.netty.channel.ChannelInboundHandlerAdapter;
1:05b2654: 
1:05b2654: /**
1:05b2654:  * Client handler to get data.
1:05b2654:  */
1:4daf063: public class NonSecureDictionaryClientHandler extends ChannelInboundHandlerAdapter {
1:05b2654: 
1:05b2654:   private static final LogService LOGGER =
1:4daf063:           LogServiceFactory.getLogService(NonSecureDictionaryClientHandler.class.getName());
1:05b2654: 
1:87dade7:   private final BlockingQueue<DictionaryMessage> responseMsgQueue = new LinkedBlockingQueue<>();
1:05b2654: 
1:05b2654:   private ChannelHandlerContext ctx;
1:05b2654: 
1:87dade7:   private DictionaryChannelFutureListener channelFutureListener;
1:05b2654: 
1:05b2654:   @Override
1:87dade7:   public void channelActive(ChannelHandlerContext ctx) throws Exception {
1:05b2654:     this.ctx = ctx;
1:87dade7:     channelFutureListener = new DictionaryChannelFutureListener(ctx);
1:87dade7:     LOGGER.audit("Connected client " + ctx);
1:87dade7:     super.channelActive(ctx);
4:05b2654:   }
1:05b2654: 
1:05b2654:   @Override
1:87dade7:   public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
1:87dade7:     try {
1:87dade7:       ByteBuf data = (ByteBuf) msg;
1:87dade7:       DictionaryMessage key = new DictionaryMessage();
1:4daf063:       key.readSkipLength(data);
1:87dade7:       data.release();
1:500654e:       responseMsgQueue.add(key);
1:87dade7:     } catch (Exception e) {
1:87dade7:       LOGGER.error(e);
1:87dade7:       throw e;
1:87dade7:     }
1:05b2654:   }
1:05b2654: 
1:05b2654:   @Override
1:87dade7:   public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
1:87dade7:     LOGGER.error(cause, "exceptionCaught");
1:87dade7:     ctx.close();
1:05b2654:   }
1:05b2654: 
1:05b2654:   /**
1:05b2654:    * client send request to server
1:05b2654:    *
1:87dade7:    * @param key DictionaryMessage
1:87dade7:    * @return DictionaryMessage
1:05b2654:    */
1:87dade7:   public DictionaryMessage getDictionary(DictionaryMessage key) {
1:87dade7:     DictionaryMessage dictionaryMessage;
2:05b2654:     try {
1:87dade7:       ByteBuf buffer = ctx.alloc().buffer();
1:87dade7:       key.writeData(buffer);
1:87dade7:       ctx.writeAndFlush(buffer).addListener(channelFutureListener);
1:05b2654:     } catch (Exception e) {
1:87dade7:       LOGGER.error(e, "Error while send request to server ");
1:87dade7:       ctx.close();
1:05b2654:     }
1:05b2654:     try {
1:87dade7:       dictionaryMessage = responseMsgQueue.poll(100, TimeUnit.SECONDS);
1:87dade7:       if (dictionaryMessage == null) {
1:f66b8a1:         StringBuilder message = new StringBuilder();
1:f66b8a1:         message.append("DictionaryMessage { ColumnName: ")
1:f66b8a1:             .append(key.getColumnName())
1:f66b8a1:             .append(", DictionaryValue: ")
1:f66b8a1:             .append(key.getDictionaryValue())
1:f66b8a1:             .append(", type: ")
1:f66b8a1:             .append(key.getType());
1:f66b8a1:         throw new RuntimeException("Request timed out for key : " + message);
1:05b2654:       }
1:87dade7:       return dictionaryMessage;
1:87dade7:     } catch (Exception e) {
1:87dade7:       LOGGER.error(e);
1:87dade7:       throw new RuntimeException(e);
1:87dade7:     }
1:87dade7:   }
1:87dade7: 
1:87dade7:   private static class DictionaryChannelFutureListener implements ChannelFutureListener {
1:87dade7: 
1:87dade7:     private ChannelHandlerContext ctx;
1:87dade7: 
1:87dade7:     DictionaryChannelFutureListener(ChannelHandlerContext ctx) {
1:87dade7:       this.ctx = ctx;
1:87dade7:     }
1:87dade7: 
1:87dade7:     @Override
1:87dade7:     public void operationComplete(ChannelFuture future) throws Exception {
1:87dade7:       if (!future.isSuccess()) {
1:87dade7:         LOGGER.error(future.cause(), "Error while sending request to Dictionary Server");
1:87dade7:         ctx.close();
1:05b2654:       }
1:05b2654:     }
1:05b2654:   }
1:05b2654: }
============================================================================
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: public class NonSecureDictionaryClientHandler extends ChannelInboundHandlerAdapter {
1:           LogServiceFactory.getLogService(NonSecureDictionaryClientHandler.class.getName());
/////////////////////////////////////////////////////////////////////////
1:       key.readSkipLength(data);
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1:       responseMsgQueue.add(key);
author:kunal642
-------------------------------------------------------------------------------
commit:f66b8a1
/////////////////////////////////////////////////////////////////////////
1:         StringBuilder message = new StringBuilder();
1:         message.append("DictionaryMessage { ColumnName: ")
1:             .append(key.getColumnName())
1:             .append(", DictionaryValue: ")
1:             .append(key.getDictionaryValue())
1:             .append(", type: ")
1:             .append(key.getType());
1:         throw new RuntimeException("Request timed out for key : " + message);
author:ravipesala
-------------------------------------------------------------------------------
commit:87dade7
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1: import io.netty.buffer.ByteBuf;
1: import io.netty.channel.ChannelFuture;
1: import io.netty.channel.ChannelFutureListener;
1: import io.netty.channel.ChannelHandlerContext;
1: import io.netty.channel.ChannelInboundHandlerAdapter;
0: public class DictionaryClientHandler extends ChannelInboundHandlerAdapter {
1:   private final BlockingQueue<DictionaryMessage> responseMsgQueue = new LinkedBlockingQueue<>();
1:   private DictionaryChannelFutureListener channelFutureListener;
1:   public void channelActive(ChannelHandlerContext ctx) throws Exception {
1:     channelFutureListener = new DictionaryChannelFutureListener(ctx);
1:     LOGGER.audit("Connected client " + ctx);
1:     super.channelActive(ctx);
1:   public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
1:     try {
1:       ByteBuf data = (ByteBuf) msg;
1:       DictionaryMessage key = new DictionaryMessage();
0:       key.readData(data);
1:       data.release();
0:       responseMsgQueue.offer(key);
1:     } catch (Exception e) {
1:       LOGGER.error(e);
1:       throw e;
1:     }
1:   public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
1:     LOGGER.error(cause, "exceptionCaught");
1:     ctx.close();
1:    * @param key DictionaryMessage
1:    * @return DictionaryMessage
1:   public DictionaryMessage getDictionary(DictionaryMessage key) {
1:     DictionaryMessage dictionaryMessage;
1:       ByteBuf buffer = ctx.alloc().buffer();
1:       key.writeData(buffer);
1:       ctx.writeAndFlush(buffer).addListener(channelFutureListener);
1:       LOGGER.error(e, "Error while send request to server ");
1:       ctx.close();
1:       dictionaryMessage = responseMsgQueue.poll(100, TimeUnit.SECONDS);
1:       if (dictionaryMessage == null) {
0:         throw new RuntimeException("Request timed out for key : " + key);
1:       return dictionaryMessage;
1:     } catch (Exception e) {
1:       LOGGER.error(e);
1:       throw new RuntimeException(e);
1:     }
1:   }
1: 
1:   private static class DictionaryChannelFutureListener implements ChannelFutureListener {
1: 
1:     private ChannelHandlerContext ctx;
1: 
1:     DictionaryChannelFutureListener(ChannelHandlerContext ctx) {
1:       this.ctx = ctx;
1:     }
1: 
1:     @Override
1:     public void operationComplete(ChannelFuture future) throws Exception {
1:       if (!future.isSuccess()) {
1:         LOGGER.error(future.cause(), "Error while sending request to Dictionary Server");
1:         ctx.close();
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.dictionary.client;
1: 
0: import java.util.Map;
1: import java.util.concurrent.BlockingQueue;
0: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.LinkedBlockingQueue;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.dictionary.generator.key.DictionaryKey;
0: import org.apache.carbondata.core.dictionary.generator.key.KryoRegister;
1: 
0: import org.jboss.netty.channel.*;
1: 
1: /**
1:  * Client handler to get data.
1:  */
0: public class DictionaryClientHandler extends SimpleChannelHandler {
1: 
1:   private static final LogService LOGGER =
0:           LogServiceFactory.getLogService(DictionaryClientHandler.class.getName());
1: 
0:   final Map<String, BlockingQueue<DictionaryKey>> dictKeyQueueMap = new ConcurrentHashMap<>();
1: 
1:   private ChannelHandlerContext ctx;
1: 
0:   private Object lock = new Object();
1: 
1:   @Override
0:   public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
1:     this.ctx = ctx;
0:     LOGGER.audit("Connected " + ctx.getHandler());
0:     super.channelConnected(ctx, e);
1:   }
1: 
1:   @Override
0:   public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
0:     byte[] response = (byte[]) e.getMessage();
0:     DictionaryKey key = KryoRegister.deserialize(response);
0:     BlockingQueue<DictionaryKey> dictKeyQueue = dictKeyQueueMap.get(key.getThreadNo());
0:     dictKeyQueue.offer(key);
0:     super.messageReceived(ctx, e);
1:   }
1: 
1:   @Override
0:   public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {
0:     LOGGER.error("exceptionCaught");
0:     e.getCause().printStackTrace();
0:     ctx.getChannel().close();
1:   }
1: 
1:   /**
1:    * client send request to server
1:    *
0:    * @param key
0:    * @return
1:    */
0:   public DictionaryKey getDictionary(DictionaryKey key) {
0:     DictionaryKey dictionaryKey;
0:     BlockingQueue<DictionaryKey> dictKeyQueue = null;
1:     try {
0:       synchronized (lock) {
0:         dictKeyQueue = dictKeyQueueMap.get(key.getThreadNo());
0:         if (dictKeyQueue == null) {
0:           dictKeyQueue = new LinkedBlockingQueue<DictionaryKey>();
0:           dictKeyQueueMap.put(key.getThreadNo(), dictKeyQueue);
1:         }
1:       }
0:       byte[] serialize = KryoRegister.serialize(key);
0:       ctx.getChannel().write(serialize);
1:     } catch (Exception e) {
0:       LOGGER.error("Error while send request to server " + e.getMessage());
0:       ctx.getChannel().close();
1:     }
0:     boolean interrupted = false;
1:     try {
0:       for (; ; ) {
1:         try {
0:           dictionaryKey = dictKeyQueue.take();
0:           return dictionaryKey;
0:         } catch (InterruptedException ignore) {
0:           interrupted = true;
1:         }
1:       }
0:     } finally {
0:       if (interrupted) {
0:         Thread.currentThread().interrupt();
1:       }
1:     }
1:   }
1: }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.jboss.netty.channel.ChannelHandlerContext;
0: import org.jboss.netty.channel.ChannelStateEvent;
0: import org.jboss.netty.channel.ExceptionEvent;
0: import org.jboss.netty.channel.MessageEvent;
0: import org.jboss.netty.channel.SimpleChannelHandler;
============================================================================