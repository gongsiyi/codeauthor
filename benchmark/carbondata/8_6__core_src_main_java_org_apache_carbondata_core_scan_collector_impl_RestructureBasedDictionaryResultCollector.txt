1:70256e7: /*
1:70256e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:70256e7:  * contributor license agreements.  See the NOTICE file distributed with
1:70256e7:  * this work for additional information regarding copyright ownership.
1:70256e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:70256e7:  * (the "License"); you may not use this file except in compliance with
1:70256e7:  * the License.  You may obtain a copy of the License at
1:70256e7:  *
1:70256e7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:70256e7:  *
1:70256e7:  * Unless required by applicable law or agreed to in writing, software
1:70256e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:70256e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:70256e7:  * See the License for the specific language governing permissions and
1:70256e7:  * limitations under the License.
1:70256e7:  */
1:70256e7: package org.apache.carbondata.core.scan.collector.impl;
5:70256e7: 
1:70256e7: import java.util.ArrayList;
1:70256e7: import java.util.List;
1:70256e7: import java.util.Map;
1:70256e7: 
1:982d03f: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:70256e7: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1:8b3fa7f: import org.apache.carbondata.core.scan.executor.util.RestructureUtil;
1:70256e7: import org.apache.carbondata.core.scan.filter.GenericQueryType;
1:daa6465: import org.apache.carbondata.core.scan.model.ProjectionMeasure;
1:daa6465: import org.apache.carbondata.core.scan.result.BlockletScannedResult;
1:982d03f: import org.apache.carbondata.core.util.DataTypeUtil;
1:70256e7: 
1:70256e7: /**
1:6b3b16c:  * class for handling restructure scenarios for filling result
1:70256e7:  */
1:6b3b16c: public class RestructureBasedDictionaryResultCollector extends DictionaryBasedResultCollector {
1:70256e7: 
1:8b3fa7f:   private Object[] measureDefaultValues = null;
1:8b3fa7f: 
1:70256e7:   public RestructureBasedDictionaryResultCollector(BlockExecutionInfo blockExecutionInfos) {
1:70256e7:     super(blockExecutionInfos);
1:daa6465:     queryDimensions = executionInfo.getActualQueryDimensions();
1:daa6465:     queryMeasures = executionInfo.getActualQueryMeasures();
1:8b3fa7f:     measureDefaultValues = new Object[queryMeasures.length];
1:8b3fa7f:     fillMeasureDefaultValues();
1:542fcb9:     initDimensionAndMeasureIndexesForFillingData();
1:542fcb9:     initDimensionAndMeasureIndexesForFillingData();
1:542fcb9:     isDimensionExists = queryDimensions.length > 0;
13:70256e7:   }
1:70256e7: 
1:70256e7:   /**
1:8b3fa7f:    * Fill measure default measure columns
1:8b3fa7f:    */
1:8b3fa7f:   private void fillMeasureDefaultValues() {
1:8b3fa7f:     for (int i = 0; i < queryMeasures.length; i++) {
1:8b3fa7f:       if (!measureInfo.getMeasureExists()[i]) {
1:8b3fa7f:         measureDefaultValues[i] = RestructureUtil
1:8b3fa7f:             .getMeasureDefaultValueByType(queryMeasures[i].getMeasure().getColumnSchema(),
1:8b3fa7f:                 queryMeasures[i].getMeasure().getDefaultValue());
1:8b3fa7f:       }
1:8b3fa7f:     }
1:8b3fa7f:   }
1:8b3fa7f: 
1:8b3fa7f:   /**
1:70256e7:    * This method will add a record both key and value to list object
1:70256e7:    * it will keep track of how many record is processed, to handle limit scenario
1:70256e7:    */
1:daa6465:   @Override
1:daa6465:   public List<Object[]> collectResultInRow(BlockletScannedResult scannedResult, int batchSize) {
1:6b3b16c:     // scan the record and add to list
1:70256e7:     List<Object[]> listBasedResult = new ArrayList<>(batchSize);
1:6b3b16c:     int rowCounter = 0;
1:6b3b16c:     int[] surrogateResult;
1:9f94529:     byte[][] noDictionaryKeys;
1:6b3b16c:     byte[][] complexTypeKeyArray;
1:70256e7:     Map<Integer, GenericQueryType> comlexDimensionInfoMap =
1:daa6465:         executionInfo.getComlexDimensionInfoMap();
1:70256e7:     while (scannedResult.hasNext() && rowCounter < batchSize) {
1:6b3b16c:       Object[] row = new Object[queryDimensions.length + queryMeasures.length];
1:542fcb9:       if (isDimensionExists) {
1:70256e7:         surrogateResult = scannedResult.getDictionaryKeyIntegerArray();
1:9f94529:         noDictionaryKeys = scannedResult.getNoDictionaryKeyArray();
1:70256e7:         complexTypeKeyArray = scannedResult.getComplexTypeKeyArray();
1:70256e7:         dictionaryColumnIndex = 0;
1:70256e7:         noDictionaryColumnIndex = 0;
1:70256e7:         complexTypeColumnIndex = 0;
1:6b3b16c:         for (int i = 0; i < queryDimensions.length; i++) {
1:70256e7:           // fill default value in case the dimension does not exist in the current block
1:70256e7:           if (!dimensionInfo.getDimensionExists()[i]) {
1:70256e7:             if (dictionaryEncodingArray[i] || directDictionaryEncodingArray[i]) {
1:70256e7:               row[order[i]] = dimensionInfo.getDefaultValues()[i];
1:70256e7:               dictionaryColumnIndex++;
1:982d03f:             } else if (queryDimensions[i].getDimension().getDataType() == DataTypes.STRING) {
1:982d03f:               row[order[i]] = DataTypeUtil.getDataTypeConverter().convertFromByteToUTF8String(
1:982d03f:                   (byte[])dimensionInfo.getDefaultValues()[i]);
1:8b3fa7f:             } else {
1:70256e7:               row[order[i]] = dimensionInfo.getDefaultValues()[i];
1:70256e7:             }
1:70256e7:             continue;
1:70256e7:           }
1:6b3b16c:           fillDimensionData(scannedResult, surrogateResult, noDictionaryKeys, complexTypeKeyArray,
1:6b3b16c:               comlexDimensionInfoMap, row, i);
1:70256e7:         }
5:70256e7:       } else {
1:70256e7:         scannedResult.incrementCounter();
1:70256e7:       }
1:8a5ed81:       if (scannedResult.containsDeletedRow(scannedResult.getCurrentRowId())) {
1:70256e7:         continue;
1:70256e7:       }
1:6b3b16c:       fillMeasureData(scannedResult, row);
1:70256e7:       listBasedResult.add(row);
1:70256e7:       rowCounter++;
1:70256e7:     }
1:70256e7:     return listBasedResult;
1:70256e7:   }
1:70256e7: 
1:8b3fa7f:   protected void fillMeasureData(Object[] msrValues, int offset,
1:daa6465:       BlockletScannedResult scannedResult) {
1:8b3fa7f:     int measureExistIndex = 0;
1:8b3fa7f:     for (short i = 0; i < measureInfo.getMeasureDataTypes().length; i++) {
1:8b3fa7f:       // if measure exists is block then pass measure column
1:8b3fa7f:       // data chunk to the collector
1:8b3fa7f:       if (measureInfo.getMeasureExists()[i]) {
1:daa6465:         ProjectionMeasure queryMeasure = executionInfo.getProjectionMeasures()[measureExistIndex];
1:8b3fa7f:         msrValues[i + offset] = getMeasureData(
1:8b3fa7f:             scannedResult.getMeasureChunk(measureInfo.getMeasureOrdinals()[measureExistIndex]),
1:8b3fa7f:             scannedResult.getCurrentRowId(), queryMeasure.getMeasure());
1:8b3fa7f:         measureExistIndex++;
1:982d03f:       } else if (DataTypes.isDecimal(measureInfo.getMeasureDataTypes()[i])) {
1:8b3fa7f:         // if not then get the default value
1:982d03f:         msrValues[i + offset] = DataTypeUtil.getDataTypeConverter()
1:982d03f:             .convertFromBigDecimalToDecimal(measureDefaultValues[i]);
1:982d03f:       } else {
1:8b3fa7f:         msrValues[i + offset] = measureDefaultValues[i];
1:8b3fa7f:       }
1:8b3fa7f:     }
1:8b3fa7f:   }
1:8b3fa7f: 
1:70256e7: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:982d03f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.util.DataTypeUtil;
/////////////////////////////////////////////////////////////////////////
1:             } else if (queryDimensions[i].getDimension().getDataType() == DataTypes.STRING) {
1:               row[order[i]] = DataTypeUtil.getDataTypeConverter().convertFromByteToUTF8String(
1:                   (byte[])dimensionInfo.getDefaultValues()[i]);
/////////////////////////////////////////////////////////////////////////
1:       } else if (DataTypes.isDecimal(measureInfo.getMeasureDataTypes()[i])) {
1:         msrValues[i + offset] = DataTypeUtil.getDataTypeConverter()
1:             .convertFromBigDecimalToDecimal(measureDefaultValues[i]);
1:       } else {
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.model.ProjectionMeasure;
1: import org.apache.carbondata.core.scan.result.BlockletScannedResult;
/////////////////////////////////////////////////////////////////////////
1:     queryDimensions = executionInfo.getActualQueryDimensions();
1:     queryMeasures = executionInfo.getActualQueryMeasures();
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public List<Object[]> collectResultInRow(BlockletScannedResult scannedResult, int batchSize) {
/////////////////////////////////////////////////////////////////////////
1:         executionInfo.getComlexDimensionInfoMap();
/////////////////////////////////////////////////////////////////////////
1:       BlockletScannedResult scannedResult) {
1:         ProjectionMeasure queryMeasure = executionInfo.getProjectionMeasures()[measureExistIndex];
author:kumarvishal
-------------------------------------------------------------------------------
commit:8a5ed81
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (scannedResult.containsDeletedRow(scannedResult.getCurrentRowId())) {
author:ravikiran23
-------------------------------------------------------------------------------
commit:90000e6
/////////////////////////////////////////////////////////////////////////
0:           .contains(scannedResult.getCurrentRowId(),
0:               scannedResult.getCurrentPageCounter())) {
author:ravipesala
-------------------------------------------------------------------------------
commit:8b3fa7f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.executor.util.RestructureUtil;
0: import org.apache.carbondata.core.scan.model.QueryMeasure;
/////////////////////////////////////////////////////////////////////////
1:   private Object[] measureDefaultValues = null;
1: 
1:     measureDefaultValues = new Object[queryMeasures.length];
1:     fillMeasureDefaultValues();
1:    * Fill measure default measure columns
1:    */
1:   private void fillMeasureDefaultValues() {
1:     for (int i = 0; i < queryMeasures.length; i++) {
1:       if (!measureInfo.getMeasureExists()[i]) {
1:         measureDefaultValues[i] = RestructureUtil
1:             .getMeasureDefaultValueByType(queryMeasures[i].getMeasure().getColumnSchema(),
1:                 queryMeasures[i].getMeasure().getDefaultValue());
1:       }
1:     }
1:   }
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:   protected void fillMeasureData(Object[] msrValues, int offset,
0:       AbstractScannedResult scannedResult) {
1:     int measureExistIndex = 0;
1:     for (short i = 0; i < measureInfo.getMeasureDataTypes().length; i++) {
1:       // if measure exists is block then pass measure column
1:       // data chunk to the collector
1:       if (measureInfo.getMeasureExists()[i]) {
0:         QueryMeasure queryMeasure = tableBlockExecutionInfos.getQueryMeasures()[measureExistIndex];
1:         msrValues[i + offset] = getMeasureData(
1:             scannedResult.getMeasureChunk(measureInfo.getMeasureOrdinals()[measureExistIndex]),
1:             scannedResult.getCurrentRowId(), queryMeasure.getMeasure());
1:         measureExistIndex++;
1:       } else {
1:         // if not then get the default value
1:         msrValues[i + offset] = measureDefaultValues[i];
1:       }
1:     }
1:   }
1: 
author:QiangCai
-------------------------------------------------------------------------------
commit:9f94529
/////////////////////////////////////////////////////////////////////////
1:     byte[][] noDictionaryKeys;
/////////////////////////////////////////////////////////////////////////
1:         noDictionaryKeys = scannedResult.getNoDictionaryKeyArray();
author:thotasrinath
-------------------------------------------------------------------------------
commit:542fcb9
/////////////////////////////////////////////////////////////////////////
0:     queryDimensions = tableBlockExecutionInfos.getActualQueryDimensions();
0:     queryMeasures = tableBlockExecutionInfos.getActualQueryMeasures();
1:     initDimensionAndMeasureIndexesForFillingData();
1:     initDimensionAndMeasureIndexesForFillingData();
1:     isDimensionExists = queryDimensions.length > 0;
/////////////////////////////////////////////////////////////////////////
1:       if (isDimensionExists) {
author:mayun
-------------------------------------------------------------------------------
commit:040982b
/////////////////////////////////////////////////////////////////////////
0:           .contains(scannedResult.getCurrentRowId())) {
author:manishgupta88
-------------------------------------------------------------------------------
commit:6b3b16c
/////////////////////////////////////////////////////////////////////////
1:  * class for handling restructure scenarios for filling result
1: public class RestructureBasedDictionaryResultCollector extends DictionaryBasedResultCollector {
/////////////////////////////////////////////////////////////////////////
0:     queryDimensions = tableBlockExecutionInfos.getActualQueryDimensions();
0:     queryMeasures = tableBlockExecutionInfos.getActualQueryMeasures();
0:     initDimensionAndMeasureIndexesForFillingData();
1:     // scan the record and add to list
1:     int rowCounter = 0;
1:     int[] surrogateResult;
0:     String[] noDictionaryKeys;
1:     byte[][] complexTypeKeyArray;
0:     boolean isDimensionsExist = queryDimensions.length > 0;
1:       Object[] row = new Object[queryDimensions.length + queryMeasures.length];
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < queryDimensions.length; i++) {
/////////////////////////////////////////////////////////////////////////
1:           fillDimensionData(scannedResult, surrogateResult, noDictionaryKeys, complexTypeKeyArray,
1:               comlexDimensionInfoMap, row, i);
/////////////////////////////////////////////////////////////////////////
1:       fillMeasureData(scannedResult, row);
commit:70256e7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.collector.impl;
1: 
0: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
0: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.carbondata.core.cache.update.BlockletLevelDeleteDeltaDataCache;
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryGenerator;
0: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryKeyGeneratorFactory;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
0: import org.apache.carbondata.core.metadata.encoder.Encoding;
1: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1: import org.apache.carbondata.core.scan.filter.GenericQueryType;
0: import org.apache.carbondata.core.scan.model.QueryDimension;
0: import org.apache.carbondata.core.scan.model.QueryMeasure;
0: import org.apache.carbondata.core.scan.result.AbstractScannedResult;
0: import org.apache.carbondata.core.util.CarbonUtil;
0: import org.apache.carbondata.core.util.DataTypeUtil;
1: 
0: import org.apache.commons.lang3.ArrayUtils;
1: /**
0:  * It is not a collector it is just a scanned result holder.
1:  */
0: public class RestructureBasedDictionaryResultCollector extends AbstractScannedResultCollector {
1: 
1:   public RestructureBasedDictionaryResultCollector(BlockExecutionInfo blockExecutionInfos) {
1:     super(blockExecutionInfos);
1:   }
1: 
1:   /**
1:    * This method will add a record both key and value to list object
1:    * it will keep track of how many record is processed, to handle limit scenario
1:    */
0:   @Override public List<Object[]> collectData(AbstractScannedResult scannedResult, int batchSize) {
1: 
1:     List<Object[]> listBasedResult = new ArrayList<>(batchSize);
0:     boolean isMsrsPresent = measureInfo.getMeasureDataTypes().length > 0;
1: 
0:     QueryDimension[] queryDimensions = tableBlockExecutionInfos.getActualQueryDimensions();
0:     List<Integer> dictionaryIndexes = new ArrayList<Integer>();
0:     for (int i = 0; i < queryDimensions.length; i++) {
0:       if (queryDimensions[i].getDimension().hasEncoding(Encoding.DICTIONARY) || queryDimensions[i]
0:           .getDimension().hasEncoding(Encoding.DIRECT_DICTIONARY)) {
0:         dictionaryIndexes.add(queryDimensions[i].getDimension().getOrdinal());
1:       }
1:     }
0:     int[] primitive = ArrayUtils.toPrimitive(dictionaryIndexes.toArray(
0:         new Integer[dictionaryIndexes.size()]));
0:     Arrays.sort(primitive);
0:     int[] actualIndexInSurrogateKey = new int[dictionaryIndexes.size()];
0:     int index = 0;
0:     for (int i = 0; i < queryDimensions.length; i++) {
0:       if (queryDimensions[i].getDimension().hasEncoding(Encoding.DICTIONARY) || queryDimensions[i]
0:           .getDimension().hasEncoding(Encoding.DIRECT_DICTIONARY)) {
0:         actualIndexInSurrogateKey[index++] =
0:             Arrays.binarySearch(primitive, queryDimensions[i].getDimension().getOrdinal());
1:       }
1:     }
1: 
0:     QueryMeasure[] queryMeasures = tableBlockExecutionInfos.getActualQueryMeasures();
0:     BlockletLevelDeleteDeltaDataCache deleteDeltaDataCache =
0:         scannedResult.getDeleteDeltaDataCache();
1:     Map<Integer, GenericQueryType> comlexDimensionInfoMap =
0:         tableBlockExecutionInfos.getComlexDimensionInfoMap();
0:     boolean[] dictionaryEncodingArray = CarbonUtil.getDictionaryEncodingArray(queryDimensions);
0:     boolean[] directDictionaryEncodingArray =
0:         CarbonUtil.getDirectDictionaryEncodingArray(queryDimensions);
0:     boolean[] implictColumnArray = CarbonUtil.getImplicitColumnArray(queryDimensions);
0:     boolean[] complexDataTypeArray = CarbonUtil.getComplexDataTypeArray(queryDimensions);
0:     int dimSize = queryDimensions.length;
0:     boolean isDimensionsExist = dimSize > 0;
0:     int[] order = new int[dimSize + queryMeasures.length];
0:     for (int i = 0; i < dimSize; i++) {
0:       order[i] = queryDimensions[i].getQueryOrder();
1:     }
0:     for (int i = 0; i < queryMeasures.length; i++) {
0:       order[i + dimSize] = queryMeasures[i].getQueryOrder();
1:     }
0:     // scan the record and add to list
0:     int rowCounter = 0;
0:     int dictionaryColumnIndex = 0;
0:     int noDictionaryColumnIndex = 0;
0:     int complexTypeColumnIndex = 0;
0:     int[] surrogateResult;
0:     String[] noDictionaryKeys;
0:     byte[][] complexTypeKeyArray;
1:     while (scannedResult.hasNext() && rowCounter < batchSize) {
0:       Object[] row = new Object[dimSize + queryMeasures.length];
0:       if (isDimensionsExist) {
1:         surrogateResult = scannedResult.getDictionaryKeyIntegerArray();
0:         noDictionaryKeys = scannedResult.getNoDictionaryKeyStringArray();
1:         complexTypeKeyArray = scannedResult.getComplexTypeKeyArray();
1:         dictionaryColumnIndex = 0;
1:         noDictionaryColumnIndex = 0;
1:         complexTypeColumnIndex = 0;
0:         for (int i = 0; i < dimSize; i++) {
1:           // fill default value in case the dimension does not exist in the current block
1:           if (!dimensionInfo.getDimensionExists()[i]) {
1:             if (dictionaryEncodingArray[i] || directDictionaryEncodingArray[i]) {
1:               row[order[i]] = dimensionInfo.getDefaultValues()[i];
1:               dictionaryColumnIndex++;
1:             } else {
1:               row[order[i]] = dimensionInfo.getDefaultValues()[i];
1:             }
1:             continue;
1:           }
0:           if (!dictionaryEncodingArray[i]) {
0:             if (implictColumnArray[i]) {
0:               if (CarbonCommonConstants.CARBON_IMPLICIT_COLUMN_TUPLEID
0:                   .equals(queryDimensions[i].getDimension().getColName())) {
0:                 row[order[i]] = DataTypeUtil.getDataBasedOnDataType(
0:                     scannedResult.getBlockletId() + CarbonCommonConstants.FILE_SEPARATOR
0:                         + scannedResult.getCurrenrRowId(), DataType.STRING);
1:               } else {
0:                 row[order[i]] = DataTypeUtil
0:                     .getDataBasedOnDataType(scannedResult.getBlockletId(), DataType.STRING);
1:               }
1:             } else {
0:               row[order[i]] = DataTypeUtil
0:                   .getDataBasedOnDataType(noDictionaryKeys[noDictionaryColumnIndex++],
0:                       queryDimensions[i].getDimension().getDataType());
1:             }
0:           } else if (directDictionaryEncodingArray[i]) {
0:             DirectDictionaryGenerator directDictionaryGenerator =
0:                 DirectDictionaryKeyGeneratorFactory
0:                     .getDirectDictionaryGenerator(queryDimensions[i].getDimension().getDataType());
0:             if (directDictionaryGenerator != null) {
0:               row[order[i]] = directDictionaryGenerator.getValueFromSurrogate(
0:                   surrogateResult[actualIndexInSurrogateKey[dictionaryColumnIndex++]]);
1:             }
0:           } else if (complexDataTypeArray[i]) {
0:             row[order[i]] = comlexDimensionInfoMap
0:                 .get(queryDimensions[i].getDimension().getOrdinal())
0:                 .getDataBasedOnDataTypeFromSurrogates(
0:                     ByteBuffer.wrap(complexTypeKeyArray[complexTypeColumnIndex++]));
1:           } else {
0:             row[order[i]] = surrogateResult[actualIndexInSurrogateKey[dictionaryColumnIndex++]];
1:           }
1:         }
1: 
1:       } else {
1:         scannedResult.incrementCounter();
1:       }
0:       if (null != deleteDeltaDataCache && deleteDeltaDataCache
0:           .contains(scannedResult.getCurrenrRowId())) {
1:         continue;
1:       }
0:       if (isMsrsPresent) {
0:         Object[] msrValues = new Object[measureInfo.getMeasureDataTypes().length];
0:         fillMeasureData(msrValues, 0, scannedResult);
0:         for (int i = 0; i < msrValues.length; i++) {
0:           row[order[i + dimSize]] = msrValues[i];
1:         }
1:       }
1:       listBasedResult.add(row);
1:       rowCounter++;
1:     }
1:     return listBasedResult;
1:   }
1: 
1: }
============================================================================