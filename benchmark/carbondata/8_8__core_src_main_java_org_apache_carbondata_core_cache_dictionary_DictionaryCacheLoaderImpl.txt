1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
2:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
1:7e0584e: 
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
5:cd6a4ff: 
1:cd6a4ff: import java.io.IOException;
1:7e0584e: import java.util.ArrayList;
1:7e0584e: import java.util.Iterator;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: 
1:7e0584e: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:cd6a4ff: import org.apache.carbondata.core.reader.CarbonDictionaryReader;
1:cd6a4ff: import org.apache.carbondata.core.reader.sortindex.CarbonDictionarySortIndexReader;
1:ce09aaa: import org.apache.carbondata.core.service.CarbonCommonFactory;
1:cd6a4ff: import org.apache.carbondata.core.service.DictionaryService;
1:7e0584e: import org.apache.carbondata.core.util.CarbonUtil;
1:cd6a4ff: 
3:cd6a4ff: /**
1:cd6a4ff:  * This class is responsible for loading the dictionary data for given columns
1:cd6a4ff:  */
1:cd6a4ff: public class DictionaryCacheLoaderImpl implements DictionaryCacheLoader {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:1155d4d:    * carbon dictionary column identifier
1:cd6a4ff:    */
1:d3a09e2:   private DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
1:d3a09e2: 
1:cd6a4ff:   /**
1:1155d4d:    * @param dictionaryColumnUniqueIdentifier dictionary column identifier
1:cd6a4ff:    */
1:daa6465:   DictionaryCacheLoaderImpl(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:d3a09e2:     this.dictionaryColumnUniqueIdentifier = dictionaryColumnUniqueIdentifier;
7:cd6a4ff:   }
1:d3a09e2: 
1:7e0584e:   /**
1:cd6a4ff:    * This method will load the dictionary data for a given columnIdentifier
1:7e0584e:    *
1:cd6a4ff:    * @param dictionaryInfo             dictionary info object which will hold the required data
1:cd6a4ff:    *                                   for a given column
1:cd6a4ff:    * @param dictionaryChunkStartOffset start offset from where dictionary file has to
1:cd6a4ff:    *                                   be read
1:cd6a4ff:    * @param dictionaryChunkEndOffset   end offset till where dictionary file has to
1:cd6a4ff:    *                                   be read
1:cd6a4ff:    * @param loadSortIndex              flag to indicate whether the sort index file has to be
1:cd6a4ff:    *                                   read in memory after dictionary loading
1:cd6a4ff:    * @throws IOException
1:7e0584e:    */
1:daa6465:   @Override
1:daa6465:   public void load(DictionaryInfo dictionaryInfo, long dictionaryChunkStartOffset,
1:daa6465:       long dictionaryChunkEndOffset, boolean loadSortIndex) throws IOException {
1:7e0584e:     Iterator<byte[]> columnDictionaryChunkWrapper =
1:d3a09e2:         load(dictionaryColumnUniqueIdentifier, dictionaryChunkStartOffset,
1:d3a09e2:             dictionaryChunkEndOffset);
1:cd6a4ff:     if (loadSortIndex) {
1:d3a09e2:       readSortIndexFile(dictionaryInfo, dictionaryColumnUniqueIdentifier);
1:7e0584e:     }
1:7e0584e:     fillDictionaryValuesAndAddToDictionaryChunks(dictionaryInfo, columnDictionaryChunkWrapper);
1:7e0584e:   }
1:7e0584e: 
1:7e0584e:   /**
1:7e0584e:    * This method will fill the dictionary values according to dictionary bucket size and
1:7e0584e:    * add to the dictionary chunk list
1:7e0584e:    *
1:7e0584e:    * @param dictionaryInfo
1:7e0584e:    * @param columnDictionaryChunkWrapper
1:7e0584e:    */
1:7e0584e:   private void fillDictionaryValuesAndAddToDictionaryChunks(DictionaryInfo dictionaryInfo,
1:7e0584e:       Iterator<byte[]> columnDictionaryChunkWrapper) {
1:7e0584e:     int dictionaryChunkSize = CarbonUtil.getDictionaryChunkSize();
1:7e0584e:     int sizeOfLastDictionaryChunk = dictionaryInfo.getSizeOfLastDictionaryChunk();
1:7e0584e:     int sizeOfOneDictionaryChunk = dictionaryChunkSize - sizeOfLastDictionaryChunk;
1:9030923:     if (sizeOfOneDictionaryChunk <= 0) {
1:7e0584e:       sizeOfOneDictionaryChunk = dictionaryChunkSize;
1:7e0584e:     }
1:7e0584e:     List<List<byte[]>> dictionaryChunks =
1:7e0584e:         new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:7e0584e:     List<byte[]> oneDictionaryChunk = new ArrayList<>(sizeOfOneDictionaryChunk);
1:7e0584e:     dictionaryChunks.add(oneDictionaryChunk);
1:7e0584e:     while (columnDictionaryChunkWrapper.hasNext()) {
1:7e0584e:       oneDictionaryChunk.add(columnDictionaryChunkWrapper.next());
1:7e0584e:       if (oneDictionaryChunk.size() >= sizeOfOneDictionaryChunk) {
1:7e0584e:         sizeOfOneDictionaryChunk = dictionaryChunkSize;
1:7e0584e:         oneDictionaryChunk = new ArrayList<>(sizeOfOneDictionaryChunk);
1:7e0584e:         dictionaryChunks.add(oneDictionaryChunk);
1:7e0584e:       }
1:7e0584e:     }
1:7e0584e:     for (List<byte[]> dictionaryChunk : dictionaryChunks) {
1:9030923:       if (!dictionaryChunk.isEmpty()) {
1:9030923:         dictionaryInfo.addDictionaryChunk(dictionaryChunk);
1:9030923:       }
1:9030923:     }
1:7e0584e:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will load the dictionary data between a given start and end offset
1:cd6a4ff:    *
1:d3a09e2:    * @param dictionaryColumnUniqueIdentifier column unique identifier
1:cd6a4ff:    * @param startOffset      start offset of dictionary file
1:cd6a4ff:    * @param endOffset        end offset of dictionary file
1:7e0584e:    * @return iterator over dictionary values
1:cd6a4ff:    * @throws IOException
1:cd6a4ff:    */
1:d3a09e2:   private Iterator<byte[]> load(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier,
1:d3a09e2:       long startOffset, long endOffset) throws IOException {
1:d3a09e2:     CarbonDictionaryReader dictionaryReader = getDictionaryReader(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     try {
1:81149f6:       return dictionaryReader.read(startOffset, endOffset);
1:cd6a4ff:     } finally {
1:cd6a4ff:       dictionaryReader.close();
1:7e0584e:     }
1:7e0584e:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will read the sort index file and load into memory
1:cd6a4ff:    *
1:7e0584e:    * @param dictionaryInfo
1:d3a09e2:    * @param dictionaryColumnUniqueIdentifier
1:cd6a4ff:    * @throws IOException
1:cd6a4ff:    */
1:d3a09e2:   private void readSortIndexFile(DictionaryInfo dictionaryInfo,
1:d3a09e2:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) throws IOException {
1:d3a09e2:     CarbonDictionarySortIndexReader sortIndexReader =
1:d3a09e2:         getSortIndexReader(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     try {
1:cd6a4ff:       dictionaryInfo.setSortOrderIndex(sortIndexReader.readSortIndex());
1:cd6a4ff:       dictionaryInfo.setSortReverseOrderIndex(sortIndexReader.readInvertedSortIndex());
1:cd6a4ff:     } finally {
1:cd6a4ff:       sortIndexReader.close();
1:7e0584e:     }
1:7e0584e:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will create a dictionary reader instance to read the dictionary file
1:cd6a4ff:    *
1:d3a09e2:    * @param dictionaryColumnUniqueIdentifier unique column identifier
1:cd6a4ff:    * @return carbon dictionary reader instance
1:cd6a4ff:    */
1:d3a09e2:   private CarbonDictionaryReader getDictionaryReader(
1:1155d4d:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:cd6a4ff:     DictionaryService dictService = CarbonCommonFactory.getDictionaryService();
1:1155d4d:     return dictService.getDictionaryReader(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:d3a09e2:    * @param dictionaryColumnUniqueIdentifier unique column identifier
1:cd6a4ff:    * @return sort index reader instance
1:cd6a4ff:    */
1:d3a09e2:   private CarbonDictionarySortIndexReader getSortIndexReader(
1:1155d4d:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:cd6a4ff:     DictionaryService dictService = CarbonCommonFactory.getDictionaryService();
2:cd6a4ff:     return dictService
1:1155d4d:         .getDictionarySortIndexReader(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   DictionaryCacheLoaderImpl(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void load(DictionaryInfo dictionaryInfo, long dictionaryChunkStartOffset,
1:       long dictionaryChunkEndOffset, boolean loadSortIndex) throws IOException {
commit:daa6465
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   DictionaryCacheLoaderImpl(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   @Override
0:   public void load(DictionaryInfo dictionaryInfo, long dictionaryChunkStartOffset,
0:       long dictionaryChunkEndOffset, boolean loadSortIndex) throws IOException {
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:    * carbon dictionary column identifier
1:    * @param dictionaryColumnUniqueIdentifier dictionary column identifier
0:   public DictionaryCacheLoaderImpl(
1:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
/////////////////////////////////////////////////////////////////////////
1:     return dictService.getDictionaryReader(dictionaryColumnUniqueIdentifier);
/////////////////////////////////////////////////////////////////////////
1:         .getDictionarySortIndexReader(dictionaryColumnUniqueIdentifier);
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:    * carbon dictionary column identifier
0:    * @param dictionaryColumnUniqueIdentifier dictionary column identifier
0:   public DictionaryCacheLoaderImpl(
1:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
/////////////////////////////////////////////////////////////////////////
0:     return dictService.getDictionaryReader(dictionaryColumnUniqueIdentifier);
/////////////////////////////////////////////////////////////////////////
0:         .getDictionarySortIndexReader(dictionaryColumnUniqueIdentifier);
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
1:   private DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
1: 
/////////////////////////////////////////////////////////////////////////
0:       String carbonStorePath, DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:     this.dictionaryColumnUniqueIdentifier = dictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
1:         load(dictionaryColumnUniqueIdentifier, dictionaryChunkStartOffset,
1:             dictionaryChunkEndOffset);
1:       readSortIndexFile(dictionaryInfo, dictionaryColumnUniqueIdentifier);
/////////////////////////////////////////////////////////////////////////
1:    * @param dictionaryColumnUniqueIdentifier column unique identifier
1:   private Iterator<byte[]> load(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier,
1:       long startOffset, long endOffset) throws IOException {
1:     CarbonDictionaryReader dictionaryReader = getDictionaryReader(dictionaryColumnUniqueIdentifier);
/////////////////////////////////////////////////////////////////////////
1:    * @param dictionaryColumnUniqueIdentifier
1:   private void readSortIndexFile(DictionaryInfo dictionaryInfo,
1:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) throws IOException {
1:     CarbonDictionarySortIndexReader sortIndexReader =
1:         getSortIndexReader(dictionaryColumnUniqueIdentifier);
/////////////////////////////////////////////////////////////////////////
1:    * @param dictionaryColumnUniqueIdentifier unique column identifier
1:   private CarbonDictionaryReader getDictionaryReader(
0:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
0:     return dictService.getDictionaryReader(carbonTableIdentifier, dictionaryColumnUniqueIdentifier,
0:         carbonStorePath);
1:    * @param dictionaryColumnUniqueIdentifier unique column identifier
1:   private CarbonDictionarySortIndexReader getSortIndexReader(
0:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
0:         .getDictionarySortIndexReader(carbonTableIdentifier, dictionaryColumnUniqueIdentifier,
0:             carbonStorePath);
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
0:   private DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
1: 
/////////////////////////////////////////////////////////////////////////
0:       String carbonStorePath, DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
0:     this.dictionaryColumnUniqueIdentifier = dictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
0:         load(dictionaryColumnUniqueIdentifier, dictionaryChunkStartOffset,
0:             dictionaryChunkEndOffset);
0:       readSortIndexFile(dictionaryInfo, dictionaryColumnUniqueIdentifier);
/////////////////////////////////////////////////////////////////////////
0:    * @param dictionaryColumnUniqueIdentifier column unique identifier
0:   private Iterator<byte[]> load(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier,
0:       long startOffset, long endOffset) throws IOException {
0:     CarbonDictionaryReader dictionaryReader = getDictionaryReader(dictionaryColumnUniqueIdentifier);
/////////////////////////////////////////////////////////////////////////
0:    * @param dictionaryColumnUniqueIdentifier
0:   private void readSortIndexFile(DictionaryInfo dictionaryInfo,
0:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) throws IOException {
0:     CarbonDictionarySortIndexReader sortIndexReader =
0:         getSortIndexReader(dictionaryColumnUniqueIdentifier);
/////////////////////////////////////////////////////////////////////////
0:    * @param dictionaryColumnUniqueIdentifier unique column identifier
0:   private CarbonDictionaryReader getDictionaryReader(
0:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
0:     return dictService.getDictionaryReader(carbonTableIdentifier, dictionaryColumnUniqueIdentifier,
0:         carbonStorePath);
0:    * @param dictionaryColumnUniqueIdentifier unique column identifier
0:   private CarbonDictionarySortIndexReader getSortIndexReader(
0:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
0:         .getDictionarySortIndexReader(carbonTableIdentifier, dictionaryColumnUniqueIdentifier,
0:             carbonStorePath);
author:QiangCai
-------------------------------------------------------------------------------
commit:81149f6
/////////////////////////////////////////////////////////////////////////
1:       return dictionaryReader.read(startOffset, endOffset);
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:81149f6
/////////////////////////////////////////////////////////////////////////
0:       return dictionaryReader.read(startOffset, endOffset);
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
0: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1: import org.apache.carbondata.core.service.CarbonCommonFactory;
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
0: import org.apache.carbondata.core.metadata.ColumnIdentifier;
0: import org.apache.carbondata.core.service.CarbonCommonFactory;
author:manishgupta88
-------------------------------------------------------------------------------
commit:9030923
/////////////////////////////////////////////////////////////////////////
1:     if (sizeOfOneDictionaryChunk <= 0) {
/////////////////////////////////////////////////////////////////////////
1:       if (!dictionaryChunk.isEmpty()) {
1:         dictionaryInfo.addDictionaryChunk(dictionaryChunk);
1:       }
commit:9030923
/////////////////////////////////////////////////////////////////////////
0:     if (sizeOfOneDictionaryChunk <= 0) {
/////////////////////////////////////////////////////////////////////////
0:       if (!dictionaryChunk.isEmpty()) {
0:         dictionaryInfo.addDictionaryChunk(dictionaryChunk);
1:       }
author:manishgupt88
-------------------------------------------------------------------------------
commit:7e0584e
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonUtil;
/////////////////////////////////////////////////////////////////////////
1:     Iterator<byte[]> columnDictionaryChunkWrapper =
1:     fillDictionaryValuesAndAddToDictionaryChunks(dictionaryInfo, columnDictionaryChunkWrapper);
1:   }
1: 
1:   /**
1:    * This method will fill the dictionary values according to dictionary bucket size and
1:    * add to the dictionary chunk list
1:    *
1:    * @param dictionaryInfo
1:    * @param columnDictionaryChunkWrapper
1:    */
1:   private void fillDictionaryValuesAndAddToDictionaryChunks(DictionaryInfo dictionaryInfo,
1:       Iterator<byte[]> columnDictionaryChunkWrapper) {
1:     int dictionaryChunkSize = CarbonUtil.getDictionaryChunkSize();
1:     int sizeOfLastDictionaryChunk = dictionaryInfo.getSizeOfLastDictionaryChunk();
1:     int sizeOfOneDictionaryChunk = dictionaryChunkSize - sizeOfLastDictionaryChunk;
0:     if (sizeOfOneDictionaryChunk == 0) {
1:       sizeOfOneDictionaryChunk = dictionaryChunkSize;
1:     }
1:     List<List<byte[]>> dictionaryChunks =
1:         new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:     List<byte[]> oneDictionaryChunk = new ArrayList<>(sizeOfOneDictionaryChunk);
1:     dictionaryChunks.add(oneDictionaryChunk);
1:     while (columnDictionaryChunkWrapper.hasNext()) {
1:       oneDictionaryChunk.add(columnDictionaryChunkWrapper.next());
1:       if (oneDictionaryChunk.size() >= sizeOfOneDictionaryChunk) {
1:         sizeOfOneDictionaryChunk = dictionaryChunkSize;
1:         oneDictionaryChunk = new ArrayList<>(sizeOfOneDictionaryChunk);
1:         dictionaryChunks.add(oneDictionaryChunk);
1:       }
1:     }
1:     for (List<byte[]> dictionaryChunk : dictionaryChunks) {
0:       dictionaryInfo.addDictionaryChunk(dictionaryChunk);
1:     }
/////////////////////////////////////////////////////////////////////////
1:    * @return iterator over dictionary values
0:   private Iterator<byte[]> load(ColumnIdentifier columnIdentifier, long startOffset, long endOffset)
0:       Iterator<byte[]> columnDictionaryChunkWrapper = dictionaryReader.read(startOffset, endOffset);
0:       return columnDictionaryChunkWrapper;
commit:7e0584e
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.util.CarbonUtil;
/////////////////////////////////////////////////////////////////////////
0:     Iterator<byte[]> columnDictionaryChunkWrapper =
0:     fillDictionaryValuesAndAddToDictionaryChunks(dictionaryInfo, columnDictionaryChunkWrapper);
1:   }
1: 
1:   /**
0:    * This method will fill the dictionary values according to dictionary bucket size and
0:    * add to the dictionary chunk list
1:    *
1:    * @param dictionaryInfo
0:    * @param columnDictionaryChunkWrapper
1:    */
0:   private void fillDictionaryValuesAndAddToDictionaryChunks(DictionaryInfo dictionaryInfo,
0:       Iterator<byte[]> columnDictionaryChunkWrapper) {
0:     int dictionaryChunkSize = CarbonUtil.getDictionaryChunkSize();
0:     int sizeOfLastDictionaryChunk = dictionaryInfo.getSizeOfLastDictionaryChunk();
0:     int sizeOfOneDictionaryChunk = dictionaryChunkSize - sizeOfLastDictionaryChunk;
0:     if (sizeOfOneDictionaryChunk == 0) {
0:       sizeOfOneDictionaryChunk = dictionaryChunkSize;
1:     }
0:     List<List<byte[]>> dictionaryChunks =
0:         new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
0:     List<byte[]> oneDictionaryChunk = new ArrayList<>(sizeOfOneDictionaryChunk);
0:     dictionaryChunks.add(oneDictionaryChunk);
0:     while (columnDictionaryChunkWrapper.hasNext()) {
0:       oneDictionaryChunk.add(columnDictionaryChunkWrapper.next());
0:       if (oneDictionaryChunk.size() >= sizeOfOneDictionaryChunk) {
0:         sizeOfOneDictionaryChunk = dictionaryChunkSize;
0:         oneDictionaryChunk = new ArrayList<>(sizeOfOneDictionaryChunk);
0:         dictionaryChunks.add(oneDictionaryChunk);
1:       }
1:     }
0:     for (List<byte[]> dictionaryChunk : dictionaryChunks) {
0:       dictionaryInfo.addDictionaryChunk(dictionaryChunk);
1:     }
/////////////////////////////////////////////////////////////////////////
0:    * @return iterator over dictionary values
0:   private Iterator<byte[]> load(ColumnIdentifier columnIdentifier, long startOffset, long endOffset)
0:       Iterator<byte[]> columnDictionaryChunkWrapper = dictionaryReader.read(startOffset, endOffset);
0:       return columnDictionaryChunkWrapper;
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.io.IOException;
1: import java.util.List;
1: 
0: import org.apache.carbondata.common.factory.CarbonCommonFactory;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
1: import org.apache.carbondata.core.reader.CarbonDictionaryReader;
1: import org.apache.carbondata.core.reader.sortindex.CarbonDictionarySortIndexReader;
1: import org.apache.carbondata.core.service.DictionaryService;
1: 
1: /**
1:  * This class is responsible for loading the dictionary data for given columns
1:  */
1: public class DictionaryCacheLoaderImpl implements DictionaryCacheLoader {
1: 
1:   /**
0:    * carbon table identifier
1:    */
0:   private CarbonTableIdentifier carbonTableIdentifier;
1: 
1:   /**
0:    * carbon store path
1:    */
0:   private String carbonStorePath;
1: 
1:   /**
0:    * @param carbonTableIdentifier fully qualified table name
0:    * @param carbonStorePath       hdfs store path
1:    */
0:   public DictionaryCacheLoaderImpl(CarbonTableIdentifier carbonTableIdentifier,
0:       String carbonStorePath) {
0:     this.carbonTableIdentifier = carbonTableIdentifier;
0:     this.carbonStorePath = carbonStorePath;
1:   }
1: 
1:   /**
1:    * This method will load the dictionary data for a given columnIdentifier
1:    *
1:    * @param dictionaryInfo             dictionary info object which will hold the required data
1:    *                                   for a given column
0:    * @param columnIdentifier           column unique identifier
1:    * @param dictionaryChunkStartOffset start offset from where dictionary file has to
1:    *                                   be read
1:    * @param dictionaryChunkEndOffset   end offset till where dictionary file has to
1:    *                                   be read
1:    * @param loadSortIndex              flag to indicate whether the sort index file has to be
1:    *                                   read in memory after dictionary loading
1:    * @throws IOException
1:    */
0:   @Override public void load(DictionaryInfo dictionaryInfo, ColumnIdentifier columnIdentifier,
0:       long dictionaryChunkStartOffset, long dictionaryChunkEndOffset, boolean loadSortIndex)
0:       throws IOException {
0:     List<byte[]> dictionaryChunk =
0:         load(columnIdentifier, dictionaryChunkStartOffset, dictionaryChunkEndOffset);
1:     if (loadSortIndex) {
0:       readSortIndexFile(dictionaryInfo, columnIdentifier);
1:     }
0:     dictionaryInfo.addDictionaryChunk(dictionaryChunk);
1:   }
1: 
1:   /**
1:    * This method will load the dictionary data between a given start and end offset
1:    *
0:    * @param columnIdentifier column unique identifier
1:    * @param startOffset      start offset of dictionary file
1:    * @param endOffset        end offset of dictionary file
0:    * @return list of dictionary value
1:    * @throws IOException
1:    */
0:   private List<byte[]> load(ColumnIdentifier columnIdentifier, long startOffset, long endOffset)
0:       throws IOException {
0:     CarbonDictionaryReader dictionaryReader = getDictionaryReader(columnIdentifier);
0:     List<byte[]> dictionaryValue = null;
1:     try {
0:       dictionaryValue = dictionaryReader.read(startOffset, endOffset);
1:     } finally {
1:       dictionaryReader.close();
1:     }
0:     return dictionaryValue;
1:   }
1: 
1:   /**
1:    * This method will read the sort index file and load into memory
1:    *
0:    * @param dictionaryInfo
0:    * @param columnIdentifier
1:    * @throws IOException
1:    */
0:   private void readSortIndexFile(DictionaryInfo dictionaryInfo, ColumnIdentifier columnIdentifier)
0:       throws IOException {
0:     CarbonDictionarySortIndexReader sortIndexReader = getSortIndexReader(columnIdentifier);
1:     try {
1:       dictionaryInfo.setSortOrderIndex(sortIndexReader.readSortIndex());
1:       dictionaryInfo.setSortReverseOrderIndex(sortIndexReader.readInvertedSortIndex());
1:     } finally {
1:       sortIndexReader.close();
1:     }
1:   }
1: 
1:   /**
1:    * This method will create a dictionary reader instance to read the dictionary file
1:    *
0:    * @param columnIdentifier unique column identifier
1:    * @return carbon dictionary reader instance
1:    */
0:   private CarbonDictionaryReader getDictionaryReader(ColumnIdentifier columnIdentifier) {
1:     DictionaryService dictService = CarbonCommonFactory.getDictionaryService();
1:     return dictService
0:         .getDictionaryReader(carbonTableIdentifier, columnIdentifier, carbonStorePath);
1:   }
1: 
1:   /**
0:    * @param columnIdentifier unique column identifier
1:    * @return sort index reader instance
1:    */
0:   private CarbonDictionarySortIndexReader getSortIndexReader(ColumnIdentifier columnIdentifier) {
1:     DictionaryService dictService = CarbonCommonFactory.getDictionaryService();
1:     return dictService
0:         .getDictionarySortIndexReader(carbonTableIdentifier, columnIdentifier, carbonStorePath);
1:   }
1: }
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.core.cache.dictionary;
0: 
0: import java.io.IOException;
0: import java.util.List;
0: 
0: import org.apache.carbondata.common.factory.CarbonCommonFactory;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.reader.CarbonDictionaryReader;
0: import org.apache.carbondata.core.reader.sortindex.CarbonDictionarySortIndexReader;
0: import org.apache.carbondata.core.service.DictionaryService;
0: 
0: /**
0:  * This class is responsible for loading the dictionary data for given columns
0:  */
0: public class DictionaryCacheLoaderImpl implements DictionaryCacheLoader {
0: 
0:   /**
0:    * carbon table identifier
0:    */
0:   private CarbonTableIdentifier carbonTableIdentifier;
0: 
0:   /**
0:    * carbon store path
0:    */
0:   private String carbonStorePath;
0: 
0:   /**
0:    * @param carbonTableIdentifier fully qualified table name
0:    * @param carbonStorePath       hdfs store path
0:    */
0:   public DictionaryCacheLoaderImpl(CarbonTableIdentifier carbonTableIdentifier,
0:       String carbonStorePath) {
0:     this.carbonTableIdentifier = carbonTableIdentifier;
0:     this.carbonStorePath = carbonStorePath;
0:   }
0: 
0:   /**
0:    * This method will load the dictionary data for a given columnIdentifier
0:    *
0:    * @param dictionaryInfo             dictionary info object which will hold the required data
0:    *                                   for a given column
0:    * @param columnIdentifier           column unique identifier
0:    * @param dictionaryChunkStartOffset start offset from where dictionary file has to
0:    *                                   be read
0:    * @param dictionaryChunkEndOffset   end offset till where dictionary file has to
0:    *                                   be read
0:    * @param loadSortIndex              flag to indicate whether the sort index file has to be
0:    *                                   read in memory after dictionary loading
0:    * @throws IOException
0:    */
0:   @Override public void load(DictionaryInfo dictionaryInfo, ColumnIdentifier columnIdentifier,
0:       long dictionaryChunkStartOffset, long dictionaryChunkEndOffset, boolean loadSortIndex)
0:       throws IOException {
0:     List<byte[]> dictionaryChunk =
0:         load(columnIdentifier, dictionaryChunkStartOffset, dictionaryChunkEndOffset);
0:     if (loadSortIndex) {
0:       readSortIndexFile(dictionaryInfo, columnIdentifier);
0:     }
0:     dictionaryInfo.addDictionaryChunk(dictionaryChunk);
0:   }
0: 
0:   /**
0:    * This method will load the dictionary data between a given start and end offset
0:    *
0:    * @param columnIdentifier column unique identifier
0:    * @param startOffset      start offset of dictionary file
0:    * @param endOffset        end offset of dictionary file
0:    * @return list of dictionary value
0:    * @throws IOException
0:    */
0:   private List<byte[]> load(ColumnIdentifier columnIdentifier, long startOffset, long endOffset)
0:       throws IOException {
0:     CarbonDictionaryReader dictionaryReader = getDictionaryReader(columnIdentifier);
0:     List<byte[]> dictionaryValue = null;
0:     try {
0:       dictionaryValue = dictionaryReader.read(startOffset, endOffset);
0:     } finally {
0:       dictionaryReader.close();
0:     }
0:     return dictionaryValue;
0:   }
0: 
0:   /**
0:    * This method will read the sort index file and load into memory
0:    *
0:    * @param dictionaryInfo
0:    * @param columnIdentifier
0:    * @throws IOException
0:    */
0:   private void readSortIndexFile(DictionaryInfo dictionaryInfo, ColumnIdentifier columnIdentifier)
0:       throws IOException {
0:     CarbonDictionarySortIndexReader sortIndexReader = getSortIndexReader(columnIdentifier);
0:     try {
0:       dictionaryInfo.setSortOrderIndex(sortIndexReader.readSortIndex());
0:       dictionaryInfo.setSortReverseOrderIndex(sortIndexReader.readInvertedSortIndex());
0:     } finally {
0:       sortIndexReader.close();
0:     }
0:   }
0: 
0:   /**
0:    * This method will create a dictionary reader instance to read the dictionary file
0:    *
0:    * @param columnIdentifier unique column identifier
0:    * @return carbon dictionary reader instance
0:    */
0:   private CarbonDictionaryReader getDictionaryReader(ColumnIdentifier columnIdentifier) {
0:     DictionaryService dictService = CarbonCommonFactory.getDictionaryService();
0:     return dictService
0:         .getDictionaryReader(carbonTableIdentifier, columnIdentifier, carbonStorePath);
0:   }
0: 
0:   /**
0:    * @param columnIdentifier unique column identifier
0:    * @return sort index reader instance
0:    */
0:   private CarbonDictionarySortIndexReader getSortIndexReader(ColumnIdentifier columnIdentifier) {
0:     DictionaryService dictService = CarbonCommonFactory.getDictionaryService();
0:     return dictService
0:         .getDictionarySortIndexReader(carbonTableIdentifier, columnIdentifier, carbonStorePath);
0:   }
0: }
============================================================================