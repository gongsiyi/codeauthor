1:05b2654: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:05b2654:  *
1:05b2654:  *    http://www.apache.org/licenses/LICENSE-2.0
1:05b2654:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:05b2654:  */
1:05b2654: package org.apache.carbondata.core.dictionary.generator;
2:05b2654: 
1:05b2654: import java.util.Map;
1:05b2654: import java.util.concurrent.ConcurrentHashMap;
1:05b2654: 
1:05b2654: import org.apache.carbondata.core.devapi.DictionaryGenerationException;
1:05b2654: import org.apache.carbondata.core.devapi.DictionaryGenerator;
1:87dade7: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:05b2654: 
1:05b2654: /**
1:05b2654:  * This is the dictionary generator for all tables. It generates dictionary
1:87dade7:  * based on @{@link DictionaryMessage}.
1:05b2654:  */
1:87dade7: public class ServerDictionaryGenerator implements DictionaryGenerator<Integer, DictionaryMessage> {
1:05b2654: 
1:05b2654:   /**
1:05b2654:    * the map of tableName to TableDictionaryGenerator
1:05b2654:    */
1:05b2654:   private Map<String, TableDictionaryGenerator> tableMap = new ConcurrentHashMap<>();
1:05b2654: 
1:87dade7:   @Override
1:87dade7:   public Integer generateKey(DictionaryMessage value)
1:87dade7:       throws DictionaryGenerationException {
1:ee5f65f:     initializeGeneratorForColumn(value);
1:ee5f65f:     TableDictionaryGenerator generator = tableMap.get(value.getTableUniqueId());
1:05b2654:     return generator.generateKey(value);
3:05b2654:   }
1:8815dd5: 
1:ee5f65f:   public void initializeGeneratorForTable(CarbonTable carbonTable) {
1:05b2654:     // initialize TableDictionaryGenerator first
1:ee5f65f:     String tableId = carbonTable.getCarbonTableIdentifier().getTableId();
1:ee5f65f:     if (tableMap.get(tableId) == null) {
1:5b4cf70:       synchronized (tableMap) {
1:ee5f65f:         if (tableMap.get(tableId) == null) {
1:ee5f65f:           tableMap.put(tableId,
1:ee5f65f:               new TableDictionaryGenerator(carbonTable));
1:8815dd5:         }
1:5b4cf70:       }
1:5b4cf70:     }
1:05b2654:   }
1:05b2654: 
1:ee5f65f:   public void initializeGeneratorForColumn(DictionaryMessage key) {
1:ee5f65f:     tableMap.get(key.getTableUniqueId()).updateGenerator(key);
1:ee5f65f:   }
1:ee5f65f: 
1:87dade7:   public Integer size(DictionaryMessage key) {
1:ee5f65f:     initializeGeneratorForColumn(key);
1:ee5f65f:     TableDictionaryGenerator generator = tableMap.get(key.getTableUniqueId());
1:05b2654:     return generator.size(key);
1:05b2654:   }
1:05b2654: 
1:ee5f65f:   public void writeTableDictionaryData(String tableUniqueId) throws Exception {
1:ee5f65f:     TableDictionaryGenerator generator = tableMap.get(tableUniqueId);
1:caa9329:     if (generator != null) {
1:ee5f65f:       generator.writeDictionaryData();
1:caa9329:     }
1:ee5f65f:     // Remove dictionary generator after writing
1:ee5f65f:     tableMap.remove(tableUniqueId);
1:05b2654:   }
1:05b2654: 
1:05b2654: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:ee5f65f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     initializeGeneratorForColumn(value);
1:     TableDictionaryGenerator generator = tableMap.get(value.getTableUniqueId());
1:   public void initializeGeneratorForTable(CarbonTable carbonTable) {
1:     String tableId = carbonTable.getCarbonTableIdentifier().getTableId();
1:     if (tableMap.get(tableId) == null) {
1:         if (tableMap.get(tableId) == null) {
1:           tableMap.put(tableId,
1:               new TableDictionaryGenerator(carbonTable));
1:   public void initializeGeneratorForColumn(DictionaryMessage key) {
1:     tableMap.get(key.getTableUniqueId()).updateGenerator(key);
1:   }
1: 
1:     initializeGeneratorForColumn(key);
1:     TableDictionaryGenerator generator = tableMap.get(key.getTableUniqueId());
1:   public void writeTableDictionaryData(String tableUniqueId) throws Exception {
1:     TableDictionaryGenerator generator = tableMap.get(tableUniqueId);
1:       generator.writeDictionaryData();
1:     // Remove dictionary generator after writing
1:     tableMap.remove(tableUniqueId);
commit:caa9329
/////////////////////////////////////////////////////////////////////////
1:     if (generator != null) {
0:       generator.writeDictionaryData(tableUniqueName);
1:     }
commit:8815dd5
/////////////////////////////////////////////////////////////////////////
0:   public void writeTableDictionaryData(String tableUniqueName) throws Exception {
0:     TableDictionaryGenerator generator = tableMap.get(tableUniqueName);
0:     generator.writeDictionaryData(tableUniqueName);
1:   }
1: 
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0:     final Iterator<Map.Entry<String, TableDictionaryGenerator>> iterator =
0:         tableMap.entrySet().iterator();
0:     String tableUniqueName;
0:     TableDictionaryGenerator generator;
0:     while (iterator.hasNext()) {
0:       Map.Entry<String, TableDictionaryGenerator> entry = iterator.next();
0:       tableUniqueName = entry.getKey();
0:       generator = entry.getValue();
author:QiangCai
-------------------------------------------------------------------------------
commit:51c60fd
/////////////////////////////////////////////////////////////////////////
0:         } else {
0:           tableMap.get(key.getTableUniqueName()).updateGenerator(dimension);
commit:5b4cf70
/////////////////////////////////////////////////////////////////////////
1:       synchronized (tableMap) {
0:         if (tableMap.get(key.getTableUniqueName()) == null) {
0:           tableMap.put(key.getTableUniqueName(), new TableDictionaryGenerator(dimension));
1:         }
1:       }
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:87dade7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:  * based on @{@link DictionaryMessage}.
1: public class ServerDictionaryGenerator implements DictionaryGenerator<Integer, DictionaryMessage> {
1:   @Override
1:   public Integer generateKey(DictionaryMessage value)
1:       throws DictionaryGenerationException {
0:   public void initializeGeneratorForTable(DictionaryMessage key) {
/////////////////////////////////////////////////////////////////////////
1:   public Integer size(DictionaryMessage key) {
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.dictionary.generator;
1: 
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
0: import org.apache.carbondata.core.carbon.metadata.CarbonMetadata;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.CarbonTable;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.core.devapi.DictionaryGenerationException;
1: import org.apache.carbondata.core.devapi.DictionaryGenerator;
0: import org.apache.carbondata.core.dictionary.generator.key.DictionaryKey;
1: 
1: /**
1:  * This is the dictionary generator for all tables. It generates dictionary
0:  * based on @{@link DictionaryKey}.
1:  */
0: public class ServerDictionaryGenerator implements DictionaryGenerator<Integer, DictionaryKey> {
1: 
1:   /**
1:    * the map of tableName to TableDictionaryGenerator
1:    */
1:   private Map<String, TableDictionaryGenerator> tableMap = new ConcurrentHashMap<>();
1: 
0:   @Override public Integer generateKey(DictionaryKey value) throws DictionaryGenerationException {
0:     TableDictionaryGenerator generator = tableMap.get(value.getTableUniqueName());
0:     assert generator != null : "Table initialization for generator is not done";
1:     return generator.generateKey(value);
1:   }
1: 
0:   public void initializeGeneratorForTable(DictionaryKey key) {
0:     CarbonMetadata metadata = CarbonMetadata.getInstance();
0:     CarbonTable carbonTable = metadata.getCarbonTable(key.getTableUniqueName());
0:     CarbonDimension dimension = carbonTable.getPrimitiveDimensionByName(
0:             key.getTableUniqueName(), key.getColumnName());
1:     // initialize TableDictionaryGenerator first
0:     if (tableMap.get(key.getTableUniqueName()) == null) {
0:       tableMap.put(key.getTableUniqueName(), new TableDictionaryGenerator(dimension));
0:     } else {
0:       tableMap.get(key.getTableUniqueName()).updateGenerator(dimension);
1:     }
1:   }
1: 
0:   public Integer size(DictionaryKey key) {
0:     TableDictionaryGenerator generator = tableMap.get(key.getTableUniqueName());
0:     assert generator != null : "Table intialization for generator is not done";
1:     return generator.size(key);
1:   }
1: 
0:   public void writeDictionaryData() throws Exception {
0:     for (String tableUniqueName: tableMap.keySet()) {
0:       TableDictionaryGenerator generator = tableMap.get(tableUniqueName);
0:       ((DictionaryWriter) generator).writeDictionaryData(tableUniqueName);
1:     }
1:   }
1: 
1: }
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonMetadata;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
0: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
0:       generator.writeDictionaryData(tableUniqueName);
============================================================================