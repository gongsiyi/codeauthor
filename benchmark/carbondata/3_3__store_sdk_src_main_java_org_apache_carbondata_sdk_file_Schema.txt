1:1d827c7: /*
1:1d827c7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1d827c7:  * contributor license agreements.  See the NOTICE file distributed with
1:1d827c7:  * this work for additional information regarding copyright ownership.
1:1d827c7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1d827c7:  * (the "License"); you may not use this file except in compliance with
1:1d827c7:  * the License.  You may obtain a copy of the License at
1:1d827c7:  *
1:1d827c7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:1d827c7:  *
1:1d827c7:  * Unless required by applicable law or agreed to in writing, software
1:1d827c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1d827c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1d827c7:  * See the License for the specific language governing permissions and
1:1d827c7:  * limitations under the License.
1:1d827c7:  */
1:1d827c7: 
1:1d827c7: package org.apache.carbondata.sdk.file;
1:1d827c7: 
1:1d827c7: import java.io.IOException;
1:e740182: import java.util.Arrays;
1:e740182: import java.util.Comparator;
1:e740182: import java.util.List;
1:1d827c7: 
1:1d827c7: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:1d827c7: import org.apache.carbondata.common.annotations.InterfaceStability;
1:e740182: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:1d827c7: 
1:1d827c7: import com.google.gson.GsonBuilder;
1:1d827c7: import com.google.gson.TypeAdapter;
1:1d827c7: import com.google.gson.stream.JsonReader;
1:1d827c7: import com.google.gson.stream.JsonWriter;
1:1d827c7: 
1:1d827c7: /**
1:1d827c7:  * A schema used to write and read data files
1:1d827c7:  */
1:1d827c7: @InterfaceAudience.User
1:1d827c7: @InterfaceStability.Unstable
1:1d827c7: public class Schema {
1:1d827c7: 
1:1d827c7:   private Field[] fields;
1:1d827c7: 
1:4b98af2:   /**
1:4b98af2:    * construct a schema with fields
1:4b98af2:    * @param fields
1:4b98af2:    */
1:1d827c7:   public Schema(Field[] fields) {
1:1d827c7:     this.fields = fields;
1:1d827c7:   }
1:1d827c7: 
1:1d827c7:   /**
1:e740182:    * construct a schema with List<ColumnSchema>
1:e740182:    *
1:e740182:    * @param columnSchemaList column schema list
1:e740182:    */
1:e740182:   public Schema(List<ColumnSchema> columnSchemaList) {
1:e740182:     fields = new Field[columnSchemaList.size()];
1:e740182:     for (int i = 0; i < columnSchemaList.size(); i++) {
1:e740182:       fields[i] = new Field(columnSchemaList.get(i));
1:e740182:     }
1:e740182:   }
1:e740182: 
1:e740182:   /**
1:1d827c7:    * Create a Schema using JSON string, for example:
1:1d827c7:    * [
1:1d827c7:    *   {"name":"string"},
1:1d827c7:    *   {"age":"int"}
1:1d827c7:    * ]
1:4b98af2:    * @param json specified as string
1:4b98af2:    * @return Schema
1:1d827c7:    */
1:1d827c7:   public static Schema parseJson(String json) {
1:1d827c7:     GsonBuilder gsonBuilder = new GsonBuilder();
1:1d827c7:     gsonBuilder.registerTypeAdapter(Field.class, new TypeAdapter<Field>() {
1:1d827c7:       @Override
1:1d827c7:       public void write(JsonWriter out, Field field) throws IOException {
1:1d827c7:         // noop
1:1d827c7:       }
1:1d827c7: 
1:1d827c7:       @Override
1:1d827c7:       public Field read(JsonReader in) throws IOException {
1:1d827c7:         in.beginObject();
1:1d827c7:         Field field = new Field(in.nextName(), in.nextString());
1:1d827c7:         in.endObject();
1:1d827c7:         return field;
1:1d827c7:       }
1:1d827c7:     });
1:1d827c7: 
1:1d827c7:     Field[] fields = gsonBuilder.create().fromJson(json, Field[].class);
1:1d827c7:     return new Schema(fields);
1:1d827c7:   }
1:1d827c7: 
1:1d827c7:   public Field[] getFields() {
1:1d827c7:     return fields;
1:1d827c7:   }
1:e740182: 
1:e740182:   /**
1:e740182:    * Sort the schema order as original order
1:e740182:    *
1:e740182:    * @return Schema object
1:e740182:    */
1:e740182:   public Schema asOriginOrder() {
1:e740182:     Arrays.sort(fields, new Comparator<Field>() {
1:e740182:       @Override
1:e740182:       public int compare(Field o1, Field o2) {
1:e740182:         return Integer.compare(o1.getSchemaOrdinal(), o2.getSchemaOrdinal());
1:e740182:       }
1:e740182:     });
1:e740182:     return this;
1:e740182:   }
1:1d827c7: }
============================================================================
author:xubo245
-------------------------------------------------------------------------------
commit:e740182
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Comparator;
1: import java.util.List;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
/////////////////////////////////////////////////////////////////////////
1:    * construct a schema with List<ColumnSchema>
1:    *
1:    * @param columnSchemaList column schema list
1:    */
1:   public Schema(List<ColumnSchema> columnSchemaList) {
1:     fields = new Field[columnSchemaList.size()];
1:     for (int i = 0; i < columnSchemaList.size(); i++) {
1:       fields[i] = new Field(columnSchemaList.get(i));
1:     }
1:   }
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Sort the schema order as original order
1:    *
1:    * @return Schema object
1:    */
1:   public Schema asOriginOrder() {
1:     Arrays.sort(fields, new Comparator<Field>() {
1:       @Override
1:       public int compare(Field o1, Field o2) {
1:         return Integer.compare(o1.getSchemaOrdinal(), o2.getSchemaOrdinal());
1:       }
1:     });
1:     return this;
1:   }
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:4b98af2
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * construct a schema with fields
1:    * @param fields
1:    */
/////////////////////////////////////////////////////////////////////////
1:    * @param json specified as string
1:    * @return Schema
author:Jacky Li
-------------------------------------------------------------------------------
commit:1d827c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.sdk.file;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.annotations.InterfaceStability;
1: 
1: import com.google.gson.GsonBuilder;
1: import com.google.gson.TypeAdapter;
1: import com.google.gson.stream.JsonReader;
1: import com.google.gson.stream.JsonWriter;
1: 
1: /**
1:  * A schema used to write and read data files
1:  */
1: @InterfaceAudience.User
1: @InterfaceStability.Unstable
1: public class Schema {
1: 
1:   private Field[] fields;
1: 
1:   public Schema(Field[] fields) {
1:     this.fields = fields;
1:   }
1: 
1:   /**
1:    * Create a Schema using JSON string, for example:
1:    * [
1:    *   {"name":"string"},
1:    *   {"age":"int"}
1:    * ]
1:    */
1:   public static Schema parseJson(String json) {
1:     GsonBuilder gsonBuilder = new GsonBuilder();
1:     gsonBuilder.registerTypeAdapter(Field.class, new TypeAdapter<Field>() {
1:       @Override
1:       public void write(JsonWriter out, Field field) throws IOException {
1:         // noop
1:       }
1: 
1:       @Override
1:       public Field read(JsonReader in) throws IOException {
1:         in.beginObject();
1:         Field field = new Field(in.nextName(), in.nextString());
1:         in.endObject();
1:         return field;
1:       }
1:     });
1: 
1:     Field[] fields = gsonBuilder.create().fromJson(json, Field[].class);
1:     return new Schema(fields);
1:   }
1: 
1:   public Field[] getFields() {
1:     return fields;
1:   }
1: }
============================================================================