1:53267c8: /*
1:53267c8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:53267c8:  * contributor license agreements.  See the NOTICE file distributed with
1:53267c8:  * this work for additional information regarding copyright ownership.
1:53267c8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:53267c8:  * (the "License"); you may not use this file except in compliance with
1:53267c8:  * the License.  You may obtain a copy of the License at
1:53267c8:  *
1:53267c8:  *    http://www.apache.org/licenses/LICENSE-2.0
1:53267c8:  *
1:53267c8:  * Unless required by applicable law or agreed to in writing, software
1:53267c8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:53267c8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:53267c8:  * See the License for the specific language governing permissions and
1:53267c8:  * limitations under the License.
1:53267c8:  */
3:53267c8: 
1:53267c8: package org.apache.carbondata.presto;
1:d4a1577: import java.util.List;
1:53267c8: 
1:d4a1577: import static java.util.Objects.requireNonNull;
1:d4a1577: 
1:01b48fc: import org.apache.carbondata.presto.impl.CarbonLocalMultiBlockSplit;
1:01b48fc: 
1:53267c8: import com.facebook.presto.spi.ColumnHandle;
1:53267c8: import com.facebook.presto.spi.ConnectorSplit;
1:53267c8: import com.facebook.presto.spi.HostAddress;
1:53267c8: import com.facebook.presto.spi.SchemaTableName;
1:53267c8: import com.facebook.presto.spi.predicate.TupleDomain;
1:53267c8: import com.fasterxml.jackson.annotation.JsonCreator;
1:53267c8: import com.fasterxml.jackson.annotation.JsonProperty;
1:53267c8: import com.google.common.collect.ImmutableList;
1:53267c8: 
1:53267c8: public class CarbondataSplit implements ConnectorSplit {
1:53267c8: 
1:53267c8:   private final String connectorId;
1:53267c8:   private final SchemaTableName schemaTableName;
1:53267c8:   private final TupleDomain<ColumnHandle> constraints;
1:01b48fc:   private final CarbonLocalMultiBlockSplit localInputSplit;
1:53267c8:   private final List<CarbondataColumnConstraint> rebuildConstraints;
1:53267c8:   private final ImmutableList<HostAddress> addresses;
1:01b48fc:   private final String queryId;
1:01b48fc:   private final long index;
1:53267c8: 
1:53267c8:   @JsonCreator public CarbondataSplit(@JsonProperty("connectorId") String connectorId,
1:53267c8:       @JsonProperty("schemaTableName") SchemaTableName schemaTableName,
1:53267c8:       @JsonProperty("constraints") TupleDomain<ColumnHandle> constraints,
1:01b48fc:       @JsonProperty("localInputSplit") CarbonLocalMultiBlockSplit localInputSplit,
1:01b48fc:       @JsonProperty("rebuildConstraints") List<CarbondataColumnConstraint> rebuildConstraints,
1:01b48fc:       @JsonProperty("queryId") String queryId,
1:01b48fc:       @JsonProperty("index") long index) {
1:53267c8:     this.connectorId = requireNonNull(connectorId, "connectorId is null");
1:53267c8:     this.schemaTableName = requireNonNull(schemaTableName, "schemaTable is null");
1:53267c8:     this.constraints = requireNonNull(constraints, "constraints is null");
1:53267c8:     this.localInputSplit = requireNonNull(localInputSplit, "localInputSplit is null");
1:53267c8:     this.rebuildConstraints = requireNonNull(rebuildConstraints, "rebuildConstraints is null");
1:53267c8:     this.addresses = ImmutableList.of();
1:01b48fc:     this.queryId = queryId;
1:01b48fc:     this.index = index;
1:53267c8:   }
1:53267c8: 
1:53267c8:   @JsonProperty public String getConnectorId() {
1:53267c8:     return connectorId;
1:53267c8:   }
1:53267c8: 
1:53267c8:   @JsonProperty public SchemaTableName getSchemaTableName() {
1:53267c8:     return schemaTableName;
1:53267c8:   }
1:53267c8: 
1:53267c8:   @JsonProperty public TupleDomain<ColumnHandle> getConstraints() {
1:53267c8:     return constraints;
1:53267c8:   }
1:53267c8: 
1:01b48fc:   @JsonProperty public CarbonLocalMultiBlockSplit getLocalInputSplit() {
1:53267c8:     return localInputSplit;
1:53267c8:   }
1:53267c8: 
1:53267c8:   @JsonProperty public List<CarbondataColumnConstraint> getRebuildConstraints() {
1:53267c8:     return rebuildConstraints;
1:53267c8:   }
1:53267c8: 
1:53267c8:   @Override public boolean isRemotelyAccessible() {
1:53267c8:     return true;
1:53267c8:   }
1:53267c8: 
1:53267c8:   @Override public List<HostAddress> getAddresses() {
1:53267c8:     return addresses;
1:53267c8:   }
1:53267c8: 
1:53267c8:   @Override public Object getInfo() {
1:53267c8:     return this;
1:53267c8:   }
1:01b48fc: 
1:01b48fc:   @JsonProperty public String getQueryId() {
1:01b48fc:     return queryId;
1:01b48fc:   }
1:01b48fc: 
1:01b48fc:   @JsonProperty public long getIndex() {
1:01b48fc:     return index;
1:01b48fc:   }
1:53267c8: }
1:53267c8: 
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:d4a1577
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import static java.util.Objects.requireNonNull;
1: 
/////////////////////////////////////////////////////////////////////////
author:Bhavya
-------------------------------------------------------------------------------
commit:01b48fc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.presto.impl.CarbonLocalMultiBlockSplit;
1: 
/////////////////////////////////////////////////////////////////////////
1:   private final CarbonLocalMultiBlockSplit localInputSplit;
1:   private final String queryId;
1:   private final long index;
1:       @JsonProperty("localInputSplit") CarbonLocalMultiBlockSplit localInputSplit,
1:       @JsonProperty("rebuildConstraints") List<CarbondataColumnConstraint> rebuildConstraints,
1:       @JsonProperty("queryId") String queryId,
1:       @JsonProperty("index") long index) {
1:     this.queryId = queryId;
1:     this.index = index;
/////////////////////////////////////////////////////////////////////////
1:   @JsonProperty public CarbonLocalMultiBlockSplit getLocalInputSplit() {
/////////////////////////////////////////////////////////////////////////
1: 
1:   @JsonProperty public String getQueryId() {
1:     return queryId;
1:   }
1: 
1:   @JsonProperty public long getIndex() {
1:     return index;
1:   }
author:chenliang613
-------------------------------------------------------------------------------
commit:53267c8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto;
1: 
0: import org.apache.carbondata.presto.impl.CarbonLocalInputSplit;
1: import com.facebook.presto.spi.ColumnHandle;
1: import com.facebook.presto.spi.ConnectorSplit;
1: import com.facebook.presto.spi.HostAddress;
1: import com.facebook.presto.spi.SchemaTableName;
1: import com.facebook.presto.spi.predicate.TupleDomain;
1: import com.fasterxml.jackson.annotation.JsonCreator;
1: import com.fasterxml.jackson.annotation.JsonProperty;
1: import com.google.common.collect.ImmutableList;
1: 
0: import java.util.List;
1: 
0: import static java.util.Objects.requireNonNull;
1: 
1: public class CarbondataSplit implements ConnectorSplit {
1: 
1:   private final String connectorId;
1:   private final SchemaTableName schemaTableName;
1:   private final TupleDomain<ColumnHandle> constraints;
0:   private final CarbonLocalInputSplit localInputSplit;
1:   private final List<CarbondataColumnConstraint> rebuildConstraints;
1:   private final ImmutableList<HostAddress> addresses;
1: 
1:   @JsonCreator public CarbondataSplit(@JsonProperty("connectorId") String connectorId,
1:       @JsonProperty("schemaTableName") SchemaTableName schemaTableName,
1:       @JsonProperty("constraints") TupleDomain<ColumnHandle> constraints,
0:       @JsonProperty("localInputSplit") CarbonLocalInputSplit localInputSplit,
0:       @JsonProperty("rebuildConstraints") List<CarbondataColumnConstraint> rebuildConstraints) {
1:     this.connectorId = requireNonNull(connectorId, "connectorId is null");
1:     this.schemaTableName = requireNonNull(schemaTableName, "schemaTable is null");
1:     this.constraints = requireNonNull(constraints, "constraints is null");
1:     this.localInputSplit = requireNonNull(localInputSplit, "localInputSplit is null");
1:     this.rebuildConstraints = requireNonNull(rebuildConstraints, "rebuildConstraints is null");
1:     this.addresses = ImmutableList.of();
1:   }
1: 
1:   @JsonProperty public String getConnectorId() {
1:     return connectorId;
1:   }
1: 
1:   @JsonProperty public SchemaTableName getSchemaTableName() {
1:     return schemaTableName;
1:   }
1: 
1:   @JsonProperty public TupleDomain<ColumnHandle> getConstraints() {
1:     return constraints;
1:   }
1: 
0:   @JsonProperty public CarbonLocalInputSplit getLocalInputSplit() {
1:     return localInputSplit;
1:   }
1: 
1:   @JsonProperty public List<CarbondataColumnConstraint> getRebuildConstraints() {
1:     return rebuildConstraints;
1:   }
1: 
1:   @Override public boolean isRemotelyAccessible() {
1:     return true;
1:   }
1: 
1:   @Override public List<HostAddress> getAddresses() {
1:     return addresses;
1:   }
1: 
1:   @Override public Object getInfo() {
1:     return this;
1:   }
1: }
1: 
============================================================================