1:3169918: /*
1:3169918:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3169918:  * contributor license agreements.  See the NOTICE file distributed with
1:3169918:  * this work for additional information regarding copyright ownership.
1:3169918:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3169918:  * (the "License"); you may not use this file except in compliance with
1:3169918:  * the License.  You may obtain a copy of the License at
1:3169918:  *
1:3169918:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3169918:  *
1:3169918:  * Unless required by applicable law or agreed to in writing, software
1:3169918:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3169918:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3169918:  * See the License for the specific language governing permissions and
1:3169918:  * limitations under the License.
1:3169918:  */
1:05086e5: 
1:3169918: package org.apache.carbondata.core.metadata.schema.table;
1:1c16afa: 
1:3169918: import java.io.DataInput;
1:3169918: import java.io.DataOutput;
1:3169918: import java.io.IOException;
1:3169918: import java.io.Serializable;
1:3169918: import java.util.HashMap;
1:05086e5: import java.util.List;
1:3169918: import java.util.Map;
1:5f2a748: import java.util.Objects;
1:d23f7fa: 
1:9db662a: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1:05086e5: import org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider;
1:747be9b: import org.apache.carbondata.core.metadata.schema.datamap.DataMapProperty;
1:747be9b: 
1:9db662a: import static org.apache.carbondata.core.constants.CarbonCommonConstants.INDEX_COLUMNS;
1:05086e5: 
1:05086e5: import com.google.gson.Gson;
1:bc12de0: import com.google.gson.annotations.SerializedName;
1:9db662a: import org.apache.commons.lang.StringUtils;
6:3169918: 
1:d23f7fa: /**
1:05086e5:  * It is the new schama of datamap and it has less fields compare to {{@link DataMapSchema}}
1:3169918:  */
1:3169918: public class DataMapSchema implements Serializable, Writable {
1:3169918: 
1:05086e5:   private static final long serialVersionUID = -8394577999061329687L;
1:3169918: 
1:e4f2843:   protected String dataMapName;
1:3169918: 
1:d23f7fa:   /**
1:d23f7fa:    * There are two kind of DataMaps:
1:d23f7fa:    * 1. Index DataMap: provider name is class name of implementation class of DataMapFactory
1:05086e5:    * 2. OLAP DataMap: provider name is one of the {@link DataMapClassProvider#shortName}
1:d23f7fa:    */
1:bc12de0:   // the old version the field name for providerName was className, so to de-serialization
1:bc12de0:   // old schema provided the old field name in the alternate filed using annotation
1:bc12de0:   @SerializedName(value = "providerName", alternate = "className")
1:05086e5:   protected String providerName;
1:d23f7fa: 
1:d23f7fa:   /**
1:05086e5:    * identifiers of the mapped table
1:d23f7fa:    */
1:05086e5:   protected RelationIdentifier relationIdentifier;
1:3169918: 
1:3169918:   /**
1:05086e5:    * Query which is used to create a datamap. This is optional in case of index datamap.
1:3169918:    */
1:05086e5:   protected String ctasQuery;
1:3169918: 
1:3169918:   /**
1:3169918:    * relation properties
1:3169918:    */
1:e4f2843:   protected Map<String, String> properties;
1:3169918: 
1:d23f7fa:   /**
1:05086e5:    * Identifiers of parent tables
1:d23f7fa:    */
1:05086e5:   protected List<RelationIdentifier> parentTables;
1:05086e5: 
1:05086e5:   /**
1:05086e5:    * child table schema
1:05086e5:    */
1:05086e5:   protected TableSchema childSchema;
1:05086e5: 
1:d23f7fa:   public DataMapSchema(String dataMapName, String providerName) {
1:1c16afa:     this.dataMapName = dataMapName;
1:d23f7fa:     this.providerName = providerName;
6:3169918:   }
1:3169918: 
1:05086e5:   public DataMapSchema() {
1:1c16afa:   }
1:1c16afa: 
1:1c16afa:   public String getDataMapName() {
1:1c16afa:     return dataMapName;
1:e4f2843:   }
1:e4f2843: 
1:05086e5:   public void setDataMapName(String dataMapName) {
1:05086e5:     this.dataMapName = dataMapName;
1:05086e5:   }
1:05086e5: 
1:05086e5:   public String getProviderName() {
1:05086e5:     return providerName;
1:05086e5:   }
1:05086e5: 
1:05086e5:   public void setProviderName(String providerName) {
1:05086e5:     this.providerName = providerName;
1:05086e5:   }
1:05086e5: 
1:05086e5:   public RelationIdentifier getRelationIdentifier() {
1:05086e5:     return relationIdentifier;
1:05086e5:   }
1:05086e5: 
1:3169918:   public void setRelationIdentifier(RelationIdentifier relationIdentifier) {
1:3169918:     this.relationIdentifier = relationIdentifier;
1:3169918:   }
1:3169918: 
1:05086e5:   public String getCtasQuery() {
1:05086e5:     return ctasQuery;
1:05086e5:   }
1:05086e5: 
1:05086e5:   public void setCtasQuery(String ctasQuery) {
1:05086e5:     this.ctasQuery = ctasQuery;
1:05086e5:   }
1:05086e5: 
1:05086e5:   public Map<String, String> getProperties() {
1:05086e5:     return properties;
1:3169918:   }
1:3169918: 
1:3169918:   public void setProperties(Map<String, String> properties) {
1:3169918:     this.properties = properties;
1:1c16afa:   }
1:1c16afa: 
1:05086e5:   public void setPropertiesJson(Gson gson, String propertiesJson) {
1:05086e5:     if (propertiesJson != null) {
1:05086e5:       this.properties = gson.fromJson(propertiesJson, Map.class);
1:05086e5:     }
1:05086e5:   }
1:05086e5: 
1:05086e5:   public void setParentTables(List<RelationIdentifier> parentTables) {
1:05086e5:     this.parentTables = parentTables;
1:05086e5:   }
1:05086e5: 
1:05086e5:   public List<RelationIdentifier> getParentTables() {
1:05086e5:     return parentTables;
1:05086e5:   }
1:05086e5: 
1:05086e5:   public TableSchema getChildSchema() {
1:05086e5:     return childSchema;
1:05086e5:   }
1:05086e5: 
1:05086e5:   public void setChildSchema(TableSchema childSchema) {
1:05086e5:     this.childSchema = childSchema;
1:05086e5:   }
1:05086e5: 
1:747be9b:   /**
1:d23f7fa:    * Return true if this datamap is an Index DataMap
1:d23f7fa:    * @return
1:d23f7fa:    */
1:d23f7fa:   public boolean isIndexDataMap() {
1:05086e5:     if (providerName.equalsIgnoreCase(DataMapClassProvider.PREAGGREGATE.getShortName()) ||
1:ffddba7:         providerName.equalsIgnoreCase(DataMapClassProvider.TIMESERIES.getShortName()) ||
1:ffddba7:         providerName.equalsIgnoreCase(DataMapClassProvider.MV.getShortName()) ||
1:ffddba7:         ctasQuery != null) {
1:d23f7fa:       return false;
1:d23f7fa:     } else {
1:d23f7fa:       return true;
1:d23f7fa:     }
1:d23f7fa:   }
1:d23f7fa: 
1:9db662a:   /**
1:747be9b:    * Return true if this datamap is lazy (created with DEFERRED REBUILD syntax)
1:747be9b:    */
1:747be9b:   public boolean isLazy() {
1:747be9b:     String deferredRebuild = getProperties().get(DataMapProperty.DEFERRED_REBUILD);
1:747be9b:     return deferredRebuild != null && deferredRebuild.equalsIgnoreCase("true");
1:747be9b:   }
1:747be9b: 
1:747be9b:   @Override
1:747be9b:   public void write(DataOutput out) throws IOException {
1:1c16afa:     out.writeUTF(dataMapName);
1:d23f7fa:     out.writeUTF(providerName);
1:3169918:     boolean isRelationIdentifierExists = null != relationIdentifier;
1:3169918:     out.writeBoolean(isRelationIdentifierExists);
1:3169918:     if (isRelationIdentifierExists) {
1:3169918:       this.relationIdentifier.write(out);
1:3169918:     }
1:3169918:     boolean isChildSchemaExists = null != this.childSchema;
1:3169918:     out.writeBoolean(isChildSchemaExists);
1:3169918:     if (isChildSchemaExists) {
1:3169918:       this.childSchema.write(out);
1:3169918:     }
1:3169918:     if (properties == null) {
1:3169918:       out.writeShort(0);
1:3169918:     } else {
1:3169918:       out.writeShort(properties.size());
1:3169918:       for (Map.Entry<String, String> entry : properties.entrySet()) {
1:3169918:         out.writeUTF(entry.getKey());
1:3169918:         out.writeUTF(entry.getValue());
1:3169918:       }
1:3169918:     }
1:3169918:   }
1:3169918: 
1:747be9b:   @Override
1:747be9b:   public void readFields(DataInput in) throws IOException {
1:1c16afa:     this.dataMapName = in.readUTF();
1:d23f7fa:     this.providerName = in.readUTF();
1:e30a84c:     boolean isRelationIdentifierExists = in.readBoolean();
1:e30a84c:     if (isRelationIdentifierExists) {
1:e4f2843:       this.relationIdentifier = new RelationIdentifier(null, null, null);
1:3169918:       this.relationIdentifier.readFields(in);
1:3169918:     }
1:3169918:     boolean isChildSchemaExists = in.readBoolean();
1:3169918:     if (isChildSchemaExists) {
1:3169918:       this.childSchema = new TableSchema();
1:3169918:       this.childSchema.readFields(in);
1:3169918:     }
1:3169918: 
1:3169918:     int mapSize = in.readShort();
1:3169918:     this.properties = new HashMap<>(mapSize);
1:3169918:     for (int i = 0; i < mapSize; i++) {
1:3169918:       String key = in.readUTF();
1:3169918:       String value = in.readUTF();
1:3169918:       this.properties.put(key, value);
1:3169918:     }
1:3169918:   }
1:05086e5: 
1:3169918:   /**
1:9db662a:    * Return the list of column name
1:9db662a:    */
1:9db662a:   public String[] getIndexColumns()
1:9db662a:       throws MalformedDataMapCommandException {
1:9db662a:     String columns = getProperties().get(INDEX_COLUMNS);
1:9db662a:     if (columns == null) {
1:9db662a:       columns = getProperties().get(INDEX_COLUMNS.toLowerCase());
1:9db662a:     }
1:9db662a:     if (columns == null) {
1:9db662a:       throw new MalformedDataMapCommandException(INDEX_COLUMNS + " DMPROPERTY is required");
1:9db662a:     } else if (StringUtils.isBlank(columns)) {
1:9db662a:       throw new MalformedDataMapCommandException(INDEX_COLUMNS + " DMPROPERTY is blank");
1:9db662a:     } else {
1:9db662a:       return columns.split(",", -1);
1:9db662a:     }
1:9db662a:   }
1:9db662a: 
1:5f2a748:   @Override public boolean equals(Object o) {
1:5f2a748:     if (this == o) return true;
1:5f2a748:     if (o == null || getClass() != o.getClass()) return false;
1:5f2a748:     DataMapSchema that = (DataMapSchema) o;
1:5f2a748:     return Objects.equals(dataMapName, that.dataMapName);
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   @Override public int hashCode() {
1:5f2a748:     return Objects.hash(dataMapName);
1:5f2a748:   }
1:3169918: }
============================================================================
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:bc12de0
/////////////////////////////////////////////////////////////////////////
1: import com.google.gson.annotations.SerializedName;
/////////////////////////////////////////////////////////////////////////
1:   // the old version the field name for providerName was className, so to de-serialization
1:   // old schema provided the old field name in the alternate filed using annotation
1:   @SerializedName(value = "providerName", alternate = "className")
author:xubo245
-------------------------------------------------------------------------------
commit:e30a84c
/////////////////////////////////////////////////////////////////////////
1:     boolean isRelationIdentifierExists = in.readBoolean();
1:     if (isRelationIdentifierExists) {
author:Jacky Li
-------------------------------------------------------------------------------
commit:ffddba7
/////////////////////////////////////////////////////////////////////////
1:         providerName.equalsIgnoreCase(DataMapClassProvider.TIMESERIES.getShortName()) ||
1:         providerName.equalsIgnoreCase(DataMapClassProvider.MV.getShortName()) ||
1:         ctasQuery != null) {
commit:747be9b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.datamap.DataMapProperty;
1: 
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Return true if this datamap is lazy (created with DEFERRED REBUILD syntax)
1:    */
1:   public boolean isLazy() {
1:     String deferredRebuild = getProperties().get(DataMapProperty.DEFERRED_REBUILD);
1:     return deferredRebuild != null && deferredRebuild.equalsIgnoreCase("true");
1:   }
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.INDEX_COLUMNS;
1: import org.apache.commons.lang.StringUtils;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Return the list of column name
1:    */
1:   public String[] getIndexColumns()
1:       throws MalformedDataMapCommandException {
1:     String columns = getProperties().get(INDEX_COLUMNS);
1:     if (columns == null) {
1:       columns = getProperties().get(INDEX_COLUMNS.toLowerCase());
1:     }
1:     if (columns == null) {
1:       throw new MalformedDataMapCommandException(INDEX_COLUMNS + " DMPROPERTY is required");
1:     } else if (StringUtils.isBlank(columns)) {
1:       throw new MalformedDataMapCommandException(INDEX_COLUMNS + " DMPROPERTY is blank");
1:     } else {
1:       return columns.split(",", -1);
1:     }
1:   }
1: 
commit:89a12af
/////////////////////////////////////////////////////////////////////////
0:   // this name can be class name of the DataMapProvider implementation or short name of it
author:ravipesala
-------------------------------------------------------------------------------
commit:5f2a748
/////////////////////////////////////////////////////////////////////////
1: import java.util.Objects;
/////////////////////////////////////////////////////////////////////////
1:   @Override public boolean equals(Object o) {
1:     if (this == o) return true;
1:     if (o == null || getClass() != o.getClass()) return false;
1:     DataMapSchema that = (DataMapSchema) o;
1:     return Objects.equals(dataMapName, that.dataMapName);
1:   }
1: 
1:   @Override public int hashCode() {
1:     return Objects.hash(dataMapName);
1:   }
commit:05086e5
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider;
1: 
1: import com.google.gson.Gson;
1:  * It is the new schama of datamap and it has less fields compare to {{@link DataMapSchema}}
1:   private static final long serialVersionUID = -8394577999061329687L;
1:    * 2. OLAP DataMap: provider name is one of the {@link DataMapClassProvider#shortName}
1:   protected String providerName;
1:    * identifiers of the mapped table
1:   protected RelationIdentifier relationIdentifier;
1:    * Query which is used to create a datamap. This is optional in case of index datamap.
1:   protected String ctasQuery;
/////////////////////////////////////////////////////////////////////////
1:    * Identifiers of parent tables
1:   protected List<RelationIdentifier> parentTables;
1: 
1:   /**
1:    * child table schema
1:    */
1:   protected TableSchema childSchema;
1: 
1:   public DataMapSchema() {
1:   public void setDataMapName(String dataMapName) {
1:     this.dataMapName = dataMapName;
1:   }
1: 
1:   public String getProviderName() {
1:     return providerName;
1:   }
1: 
1:   public void setProviderName(String providerName) {
1:     this.providerName = providerName;
1:   }
1: 
1:   public RelationIdentifier getRelationIdentifier() {
1:     return relationIdentifier;
1:   }
1: 
1:   public String getCtasQuery() {
1:     return ctasQuery;
1:   }
1: 
1:   public void setCtasQuery(String ctasQuery) {
1:     this.ctasQuery = ctasQuery;
1:   }
1: 
1:   public Map<String, String> getProperties() {
1:     return properties;
1:   public void setPropertiesJson(Gson gson, String propertiesJson) {
1:     if (propertiesJson != null) {
1:       this.properties = gson.fromJson(propertiesJson, Map.class);
1:     }
1:   }
1: 
1:   public void setParentTables(List<RelationIdentifier> parentTables) {
1:     this.parentTables = parentTables;
1:   }
1: 
1:   public List<RelationIdentifier> getParentTables() {
1:     return parentTables;
1:   }
1: 
1:   public TableSchema getChildSchema() {
1:     return childSchema;
1:   }
1: 
1:   public void setChildSchema(TableSchema childSchema) {
1:     this.childSchema = childSchema;
1:   }
1: 
1:     if (providerName.equalsIgnoreCase(DataMapClassProvider.PREAGGREGATE.getShortName()) ||
0:         providerName.equalsIgnoreCase(DataMapClassProvider.TIMESERIES.getShortName())) {
/////////////////////////////////////////////////////////////////////////
1: 
commit:1c16afa
/////////////////////////////////////////////////////////////////////////
0:   private String dataMapName;
1: 
/////////////////////////////////////////////////////////////////////////
0:   public DataMapSchema() {
1:   }
1: 
0:   public DataMapSchema(String dataMapName, String className) {
1:     this.dataMapName = dataMapName;
/////////////////////////////////////////////////////////////////////////
1:   public String getDataMapName() {
1:     return dataMapName;
1:   }
1: 
1:     out.writeUTF(dataMapName);
/////////////////////////////////////////////////////////////////////////
1:     this.dataMapName = in.readUTF();
author:akashrn5
-------------------------------------------------------------------------------
commit:860e144
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:d23f7fa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.schema.datamap.DataMapProvider;
1: 
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * There are two kind of DataMaps:
1:    * 1. Index DataMap: provider name is class name of implementation class of DataMapFactory
0:    * 2. OLAP DataMap: provider name is one of the {@link DataMapProvider#shortName}
1:    */
0:   private String providerName;
1:   /**
0:    * identifier of the parent table
1:    */
0:   private RelationIdentifier relationIdentifier;
1: 
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * WARN: This constructor should be used by deserialization only
1:    */
1:   public DataMapSchema(String dataMapName, String providerName) {
1:     this.providerName = providerName;
0:   public String getProviderName() {
0:     return providerName;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Return true if this datamap is an Index DataMap
1:    * @return
1:    */
1:   public boolean isIndexDataMap() {
0:     if (providerName.equalsIgnoreCase(DataMapProvider.PREAGGREGATE.getShortName()) ||
0:         providerName.equalsIgnoreCase(DataMapProvider.TIMESERIES.getShortName())) {
1:       return false;
1:     } else {
1:       return true;
1:     }
1:   }
1: 
1:     out.writeUTF(providerName);
/////////////////////////////////////////////////////////////////////////
1:     this.providerName = in.readUTF();
author:kumarvishal
-------------------------------------------------------------------------------
commit:e4f2843
/////////////////////////////////////////////////////////////////////////
1:   protected String dataMapName;
0:   protected RelationIdentifier relationIdentifier;
0:   protected TableSchema childSchema;
1:   protected Map<String, String> properties;
/////////////////////////////////////////////////////////////////////////
0:   public String getDataMapName() {
0:     return dataMapName;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       this.relationIdentifier = new RelationIdentifier(null, null, null);
/////////////////////////////////////////////////////////////////////////
commit:3169918
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.metadata.schema.table;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.io.Serializable;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: /**
0:  * Child schema class to maintain the child table details inside parent table
1:  */
1: public class DataMapSchema implements Serializable, Writable {
1: 
0:   private String className;
1: 
0:   private RelationIdentifier relationIdentifier;
1:   /**
0:    * child table schema
1:    */
0:   private TableSchema childSchema;
1: 
1:   /**
1:    * relation properties
1:    */
0:   private Map<String, String> properties;
1: 
0:   public DataMapSchema(String className) {
0:     this.className = className;
1:   }
1: 
0:   public String getClassName() {
0:     return className;
1:   }
1: 
0:   public TableSchema getChildSchema() {
0:     return childSchema;
1:   }
1: 
0:   public RelationIdentifier getRelationIdentifier() {
0:     return relationIdentifier;
1:   }
1: 
0:   public Map<String, String> getProperties() {
0:     return properties;
1:   }
1: 
1:   public void setRelationIdentifier(RelationIdentifier relationIdentifier) {
1:     this.relationIdentifier = relationIdentifier;
1:   }
1: 
0:   public void setChildSchema(TableSchema childSchema) {
0:     this.childSchema = childSchema;
1:   }
1: 
1:   public void setProperties(Map<String, String> properties) {
1:     this.properties = properties;
1:   }
1: 
0:   @Override public void write(DataOutput out) throws IOException {
0:     out.writeUTF(className);
1:     boolean isRelationIdentifierExists = null != relationIdentifier;
1:     out.writeBoolean(isRelationIdentifierExists);
1:     if (isRelationIdentifierExists) {
1:       this.relationIdentifier.write(out);
1:     }
1:     boolean isChildSchemaExists = null != this.childSchema;
1:     out.writeBoolean(isChildSchemaExists);
1:     if (isChildSchemaExists) {
1:       this.childSchema.write(out);
1:     }
1:     if (properties == null) {
1:       out.writeShort(0);
1:     } else {
1:       out.writeShort(properties.size());
1:       for (Map.Entry<String, String> entry : properties.entrySet()) {
1:         out.writeUTF(entry.getKey());
1:         out.writeUTF(entry.getValue());
1:       }
1:     }
1:   }
1: 
0:   @Override public void readFields(DataInput in) throws IOException {
0:     this.className = in.readUTF();
0:     boolean isRelationIdnentifierExists = in.readBoolean();
0:     if (isRelationIdnentifierExists) {
0:       this.relationIdentifier = new RelationIdentifier(null, null, null);
1:       this.relationIdentifier.readFields(in);
1:     }
1:     boolean isChildSchemaExists = in.readBoolean();
1:     if (isChildSchemaExists) {
1:       this.childSchema = new TableSchema();
1:       this.childSchema.readFields(in);
1:     }
1: 
1:     int mapSize = in.readShort();
1:     this.properties = new HashMap<>(mapSize);
1:     for (int i = 0; i < mapSize; i++) {
1:       String key = in.readUTF();
1:       String value = in.readUTF();
1:       this.properties.put(key, value);
1:     }
1: 
1:   }
1: }
author:kunal642
-------------------------------------------------------------------------------
commit:cc0e6f1
/////////////////////////////////////////////////////////////////////////
0:   private static final long serialVersionUID = 6577149126264181553L;
0: 
/////////////////////////////////////////////////////////////////////////
0:       this.relationIdentifier = new RelationIdentifier();
============================================================================