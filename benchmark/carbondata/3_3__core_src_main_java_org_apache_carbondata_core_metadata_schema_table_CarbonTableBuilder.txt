1:1d827c7: /*
1:1d827c7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1d827c7:  * contributor license agreements.  See the NOTICE file distributed with
1:1d827c7:  * this work for additional information regarding copyright ownership.
1:1d827c7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1d827c7:  * (the "License"); you may not use this file except in compliance with
1:1d827c7:  * the License.  You may obtain a copy of the License at
1:1d827c7:  *
1:1d827c7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:1d827c7:  *
1:1d827c7:  * Unless required by applicable law or agreed to in writing, software
1:1d827c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1d827c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1d827c7:  * See the License for the specific language governing permissions and
1:1d827c7:  * limitations under the License.
1:1d827c7:  */
2:1d827c7: 
1:1d827c7: package org.apache.carbondata.core.metadata.schema.table;
1:1d827c7: 
1:1d827c7: import java.util.ArrayList;
1:1d827c7: import java.util.Objects;
1:1d827c7: 
1:1d827c7: /**
1:1d827c7:  * Builder for {@link CarbonTable}
1:1d827c7:  */
1:1d827c7: public class CarbonTableBuilder {
1:1d827c7: 
1:1d827c7:   private String tableName;
1:1d827c7:   private String databaseName;
1:1d827c7:   private String tablePath;
1:b7b8073:   private boolean isTransactionalTable;
1:1d827c7:   private TableSchema tableSchema;
1:1d827c7: 
1:1d827c7:   public CarbonTableBuilder tableName(String tableName) {
1:1d827c7:     this.tableName = tableName;
1:1d827c7:     return this;
1:1d827c7:   }
1:280a400: 
1:1d827c7:   public CarbonTableBuilder databaseName(String databaseName) {
1:1d827c7:     this.databaseName = databaseName;
1:280a400:     return this;
1:280a400:   }
1:280a400: 
1:1d827c7:   public CarbonTableBuilder tablePath(String tablePath) {
1:1d827c7:     Objects.requireNonNull(tablePath, "tablePath should not be null");
1:1d827c7:     this.tablePath = tablePath;
1:1d827c7:     return this;
1:1d827c7:   }
1:1d827c7: 
1:b7b8073:   public CarbonTableBuilder isTransactionalTable(boolean isTransactionalTable) {
1:b7b8073:     Objects.requireNonNull(isTransactionalTable, "Transactional Table should not be null");
1:b7b8073:     this.isTransactionalTable = isTransactionalTable;
1:1d827c7:     return this;
1:1d827c7:   }
1:1d827c7: 
1:1d827c7:   public CarbonTableBuilder tableSchema(TableSchema tableSchema) {
1:1d827c7:     Objects.requireNonNull(tableSchema, "tableSchema should not be null");
1:1d827c7:     this.tableSchema = tableSchema;
1:1d827c7:     return this;
1:1d827c7:   }
1:1d827c7: 
1:1d827c7:   public CarbonTable build() {
1:1d827c7:     Objects.requireNonNull(tablePath, "tablePath should not be null");
1:1d827c7:     Objects.requireNonNull(tableSchema, "tableSchema should not be null");
1:b7b8073:     Objects.requireNonNull(isTransactionalTable, "Transactional Table should not be null");
1:280a400: 
1:1d827c7: 
1:1d827c7:     TableInfo tableInfo = new TableInfo();
1:1d827c7:     tableInfo.setDatabaseName(databaseName);
1:1d827c7:     tableInfo.setTableUniqueName(databaseName + "_" + tableName);
1:1d827c7:     tableInfo.setFactTable(tableSchema);
1:1d827c7:     tableInfo.setTablePath(tablePath);
1:b7b8073:     tableInfo.setTransactionalTable(isTransactionalTable);
1:1d827c7:     tableInfo.setLastUpdatedTime(System.currentTimeMillis());
1:1d827c7:     tableInfo.setDataMapSchemaList(new ArrayList<DataMapSchema>(0));
1:1d827c7:     return CarbonTable.buildFromTableInfo(tableInfo);
1:1d827c7:   }
1:1d827c7: }
============================================================================
author:sounakr
-------------------------------------------------------------------------------
commit:b7b8073
/////////////////////////////////////////////////////////////////////////
1:   private boolean isTransactionalTable;
/////////////////////////////////////////////////////////////////////////
1:   public CarbonTableBuilder isTransactionalTable(boolean isTransactionalTable) {
1:     Objects.requireNonNull(isTransactionalTable, "Transactional Table should not be null");
1:     this.isTransactionalTable = isTransactionalTable;
/////////////////////////////////////////////////////////////////////////
1:     Objects.requireNonNull(isTransactionalTable, "Transactional Table should not be null");
/////////////////////////////////////////////////////////////////////////
1:     tableInfo.setTransactionalTable(isTransactionalTable);
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:280a400
/////////////////////////////////////////////////////////////////////////
0:   private boolean unManagedTable;
/////////////////////////////////////////////////////////////////////////
1: 
0:   public CarbonTableBuilder isUnManagedTable(boolean isUnManagedTable) {
0:     Objects.requireNonNull(isUnManagedTable, "UnManaged Table should not be null");
0:     this.unManagedTable = isUnManagedTable;
1:     return this;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     Objects.requireNonNull(unManagedTable, "UnManaged Table should not be null");
1: 
0:     tableInfo.setUnManagedTable(unManagedTable);
author:Jacky Li
-------------------------------------------------------------------------------
commit:1d827c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.schema.table;
1: 
1: import java.util.ArrayList;
1: import java.util.Objects;
1: 
1: /**
1:  * Builder for {@link CarbonTable}
1:  */
1: public class CarbonTableBuilder {
1: 
1:   private String tableName;
1:   private String databaseName;
1:   private String tablePath;
1:   private TableSchema tableSchema;
1: 
1:   public CarbonTableBuilder tableName(String tableName) {
0:     Objects.requireNonNull(tableName, "tableName should not be null");
1:     this.tableName = tableName;
1:     return this;
1:   }
1: 
1:   public CarbonTableBuilder databaseName(String databaseName) {
0:     Objects.requireNonNull(databaseName, "databaseName should not be null");
1:     this.databaseName = databaseName;
1:     return this;
1:   }
1: 
1:   public CarbonTableBuilder tablePath(String tablePath) {
1:     Objects.requireNonNull(tablePath, "tablePath should not be null");
1:     this.tablePath = tablePath;
1:     return this;
1:   }
1: 
1:   public CarbonTableBuilder tableSchema(TableSchema tableSchema) {
1:     Objects.requireNonNull(tableSchema, "tableSchema should not be null");
1:     this.tableSchema = tableSchema;
1:     return this;
1:   }
1: 
1:   public CarbonTable build() {
0:     Objects.requireNonNull(tableName, "tableName should not be null");
0:     Objects.requireNonNull(databaseName, "databaseName should not be null");
1:     Objects.requireNonNull(tablePath, "tablePath should not be null");
1:     Objects.requireNonNull(tableSchema, "tableSchema should not be null");
1: 
1:     TableInfo tableInfo = new TableInfo();
1:     tableInfo.setDatabaseName(databaseName);
1:     tableInfo.setTableUniqueName(databaseName + "_" + tableName);
1:     tableInfo.setFactTable(tableSchema);
1:     tableInfo.setTablePath(tablePath);
1:     tableInfo.setLastUpdatedTime(System.currentTimeMillis());
1:     tableInfo.setDataMapSchemaList(new ArrayList<DataMapSchema>(0));
1:     return CarbonTable.buildFromTableInfo(tableInfo);
1:   }
1: }
============================================================================