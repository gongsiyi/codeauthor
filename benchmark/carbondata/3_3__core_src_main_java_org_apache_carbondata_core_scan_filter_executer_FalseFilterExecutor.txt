1:e16e878: /*
1:e16e878:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e16e878:  * contributor license agreements.  See the NOTICE file distributed with
1:e16e878:  * this work for additional information regarding copyright ownership.
1:e16e878:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e16e878:  * (the "License"); you may not use this file except in compliance with
1:e16e878:  * the License.  You may obtain a copy of the License at
1:e16e878:  *
1:e16e878:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e16e878:  *
1:e16e878:  * Unless required by applicable law or agreed to in writing, software
1:e16e878:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e16e878:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e16e878:  * See the License for the specific language governing permissions and
1:e16e878:  * limitations under the License.
1:e16e878:  */
1:e16e878: package org.apache.carbondata.core.scan.filter.executer;
2:e16e878: 
1:e16e878: import java.io.IOException;
1:e16e878: import java.util.BitSet;
1:e16e878: 
1:e16e878: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1:e16e878: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1:bf6c471: import org.apache.carbondata.core.scan.processor.RawBlockletColumnChunks;
1:e16e878: import org.apache.carbondata.core.util.BitSetGroup;
1:e16e878: 
1:e16e878: /**
1:e16e878:  * API will apply filter based on resolver instance
1:e16e878:  *
1:e16e878:  * @return
1:e16e878:  * @throws FilterUnsupportedException
1:e16e878:  */
1:e16e878: public class FalseFilterExecutor implements FilterExecuter {
1:e16e878: 
1:e16e878:   @Override
1:bf6c471:   public BitSetGroup applyFilter(RawBlockletColumnChunks rawChunks, boolean useBitsetPipeline)
1:e16e878:       throws FilterUnsupportedException, IOException {
1:bf6c471:     int numberOfPages = rawChunks.getDataBlock().numberOfPages();
1:e16e878:     BitSetGroup group = new BitSetGroup(numberOfPages);
1:e16e878:     for (int i = 0; i < numberOfPages; i++) {
1:e16e878:       BitSet set = new BitSet();
1:e16e878:       group.setBitSet(set, i);
1:e16e878:     }
1:e16e878:     return group;
1:e16e878:   }
1:e16e878: 
1:21704cf:   @Override
1:21704cf:   public boolean applyFilter(RowIntf value, int dimOrdinalMax)
1:e16e878:       throws FilterUnsupportedException, IOException {
1:e16e878:     return false;
1:e16e878:   }
1:e16e878: 
1:21704cf:   @Override
1:21704cf:   public BitSet isScanRequired(byte[][] blockMaxValue, byte[][] blockMinValue) {
1:e16e878:     return new BitSet();
1:e16e878:   }
1:e16e878: 
1:21704cf:   @Override
1:21704cf:   public void readColumnChunks(RawBlockletColumnChunks blockChunkHolder) {
1:e16e878:     // Do Nothing
1:e16e878:   }
1:e16e878: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:21704cf
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public boolean applyFilter(RowIntf value, int dimOrdinalMax)
1:   @Override
1:   public BitSet isScanRequired(byte[][] blockMaxValue, byte[][] blockMinValue) {
1:   @Override
1:   public void readColumnChunks(RawBlockletColumnChunks blockChunkHolder) {
author:Jacky Li
-------------------------------------------------------------------------------
commit:bf6c471
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.processor.RawBlockletColumnChunks;
/////////////////////////////////////////////////////////////////////////
1:   public BitSetGroup applyFilter(RawBlockletColumnChunks rawChunks, boolean useBitsetPipeline)
1:     int numberOfPages = rawChunks.getDataBlock().numberOfPages();
/////////////////////////////////////////////////////////////////////////
0:   @Override public void readColumnChunks(RawBlockletColumnChunks blockChunkHolder) {
author:BJangir
-------------------------------------------------------------------------------
commit:e16e878
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.filter.executer;
1: 
1: import java.io.IOException;
1: import java.util.BitSet;
1: 
1: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
0: import org.apache.carbondata.core.scan.processor.BlocksChunkHolder;
1: import org.apache.carbondata.core.util.BitSetGroup;
1: 
1: /**
1:  * API will apply filter based on resolver instance
1:  *
1:  * @return
1:  * @throws FilterUnsupportedException
1:  */
1: public class FalseFilterExecutor implements FilterExecuter {
1: 
1:   @Override
0:   public BitSetGroup applyFilter(BlocksChunkHolder blocksChunkHolder, boolean useBitsetPipeline)
1:       throws FilterUnsupportedException, IOException {
0:     int numberOfPages = blocksChunkHolder.getDataBlock().numberOfPages();
1:     BitSetGroup group = new BitSetGroup(numberOfPages);
1:     for (int i = 0; i < numberOfPages; i++) {
1:       BitSet set = new BitSet();
1:       group.setBitSet(set, i);
1:     }
1:     return group;
1:   }
1: 
0:   @Override public boolean applyFilter(RowIntf value, int dimOrdinalMax)
1:       throws FilterUnsupportedException, IOException {
1:     return false;
1:   }
1: 
0:   @Override public BitSet isScanRequired(byte[][] blockMaxValue, byte[][] blockMinValue) {
1: 
1:     return new BitSet();
1:   }
1: 
0:   @Override public void readBlocks(BlocksChunkHolder blockChunkHolder) throws IOException {
1:     // Do Nothing
1:   }
1: }
============================================================================