1:f1f9348: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:f1f9348:  *
1:f1f9348:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f1f9348:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:f1f9348:  */
1:f1f9348: 
1:349c59c: package org.apache.carbondata.processing.loading.sort.unsafe.comparator;
1:f1f9348: 
1:f1f9348: import java.util.Comparator;
1:f1f9348: 
1:ce09aaa: import org.apache.carbondata.core.memory.CarbonUnsafe;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.holder.UnsafeCarbonRow;
1:f1f9348: 
1:2b41f14: public class UnsafeRowComparatorForNormalDims implements Comparator<UnsafeCarbonRow> {
1:f1f9348: 
1:f1f9348:   private Object baseObject;
1:f1f9348: 
1:9f94529:   private int numberOfSortColumns;
1:f1f9348: 
1:2b41f14:   public UnsafeRowComparatorForNormalDims(UnsafeCarbonRowPage rowPage) {
1:f1f9348:     this.baseObject = rowPage.getDataBlock().getBaseObject();
1:2b41f14:     this.numberOfSortColumns = rowPage.getTableFieldStat().getIsSortColNoDictFlags().length;
4:f1f9348:   }
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * Below method will be used to compare two mdkey
1:f1f9348:    */
1:f1f9348:   public int compare(UnsafeCarbonRow rowL, UnsafeCarbonRow rowR) {
1:f1f9348:     int diff = 0;
1:f1f9348:     long rowA = rowL.address;
1:f1f9348:     long rowB = rowR.address;
1:f1f9348:     int sizeA = 0;
1:f1f9348:     int sizeB = 0;
1:9f94529:     for (int i = 0; i < numberOfSortColumns; i++) {
1:500654e:       int dimFieldA = CarbonUnsafe.getUnsafe().getInt(baseObject, rowA + sizeA);
1:f1f9348:       sizeA += 4;
1:500654e:       int dimFieldB = CarbonUnsafe.getUnsafe().getInt(baseObject, rowB + sizeB);
1:f1f9348:       sizeB += 4;
1:f1f9348:       diff = dimFieldA - dimFieldB;
1:f1f9348:       if (diff != 0) {
1:f1f9348:         return diff;
1:2b41f14:       }
1:8d8b589:     }
1:f1f9348: 
1:f1f9348:     return diff;
1:21704cf:   }
1:f1f9348: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:2b41f14
/////////////////////////////////////////////////////////////////////////
1: public class UnsafeRowComparatorForNormalDims implements Comparator<UnsafeCarbonRow> {
1:   public UnsafeRowComparatorForNormalDims(UnsafeCarbonRowPage rowPage) {
1:     this.numberOfSortColumns = rowPage.getTableFieldStat().getIsSortColNoDictFlags().length;
/////////////////////////////////////////////////////////////////////////
1: }
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
0: public class UnsafeRowComparatorForNormalDIms implements Comparator<UnsafeCarbonRow> {
0:   public UnsafeRowComparatorForNormalDIms(UnsafeCarbonRowPage rowPage) {
0:     this.numberOfSortColumns = rowPage.getNoDictionarySortColumnMapping().length;
/////////////////////////////////////////////////////////////////////////
1: }
commit:21704cf
/////////////////////////////////////////////////////////////////////////
0: public class UnsafeRowComparatorForNormalDims implements Comparator<UnsafeCarbonRow> {
0:   public UnsafeRowComparatorForNormalDims(UnsafeCarbonRowPage rowPage) {
0:     this.numberOfSortColumns = rowPage.getTableFieldStat().getIsSortColNoDictFlags().length;
/////////////////////////////////////////////////////////////////////////
1: }
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.sort.unsafe.comparator;
1: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1: import org.apache.carbondata.processing.loading.sort.unsafe.holder.UnsafeCarbonRow;
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1:       int dimFieldA = CarbonUnsafe.getUnsafe().getInt(baseObject, rowA + sizeA);
1:       int dimFieldB = CarbonUnsafe.getUnsafe().getInt(baseObject, rowB + sizeB);
author:QiangCai
-------------------------------------------------------------------------------
commit:9f94529
/////////////////////////////////////////////////////////////////////////
1:   private int numberOfSortColumns;
0:   public UnsafeRowComparatorForNormalDIms(UnsafeCarbonRowPage rowPage) {
0:     this.numberOfSortColumns = rowPage.getNoDictionarySortColumnMapping().length;
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < numberOfSortColumns; i++) {
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.memory.CarbonUnsafe;
author:ravipesala
-------------------------------------------------------------------------------
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.newflow.sort.unsafe.comparator;
1: 
1: import java.util.Comparator;
1: 
0: import org.apache.carbondata.core.unsafe.CarbonUnsafe;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.UnsafeCarbonRowPage;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.holder.UnsafeCarbonRow;
1: 
0: public class UnsafeRowComparatorForNormalDIms implements Comparator<UnsafeCarbonRow> {
1: 
1:   private Object baseObject;
1: 
0:   private int dimCount;
1: 
0:   public UnsafeRowComparatorForNormalDIms(int dimCount, UnsafeCarbonRowPage rowPage) {
1:     this.baseObject = rowPage.getDataBlock().getBaseObject();
0:     this.dimCount = dimCount;
1:   }
1: 
1:   /**
1:    * Below method will be used to compare two mdkey
1:    */
1:   public int compare(UnsafeCarbonRow rowL, UnsafeCarbonRow rowR) {
1:     int diff = 0;
1:     long rowA = rowL.address;
1:     long rowB = rowR.address;
1:     int sizeA = 0;
1:     int sizeB = 0;
0:     for (int i = 0; i < dimCount; i++) {
0:       int dimFieldA = CarbonUnsafe.unsafe.getInt(baseObject, rowA + sizeA);
1:       sizeA += 4;
0:       int dimFieldB = CarbonUnsafe.unsafe.getInt(baseObject, rowB + sizeB);
1:       sizeB += 4;
1:       diff = dimFieldA - dimFieldB;
1:       if (diff != 0) {
1:         return diff;
1:       }
1:     }
1: 
1:     return diff;
1:   }
1: }
============================================================================