1:dc83b2a: /*
1:dc83b2a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dc83b2a:  * contributor license agreements.  See the NOTICE file distributed with
1:dc83b2a:  * this work for additional information regarding copyright ownership.
1:dc83b2a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dc83b2a:  * (the "License"); you may not use this file except in compliance with
1:dc83b2a:  * the License.  You may obtain a copy of the License at
1:dc83b2a:  *
1:dc83b2a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:dc83b2a:  *
1:dc83b2a:  * Unless required by applicable law or agreed to in writing, software
1:dc83b2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc83b2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc83b2a:  * See the License for the specific language governing permissions and
1:dc83b2a:  * limitations under the License.
5:dc83b2a:  */
25:dc83b2a: 
1:dc83b2a: package org.apache.carbondata.core.datastore;
1:7422690: 
1:8c1ddbf: import java.io.DataInput;
1:8c1ddbf: import java.io.DataOutput;
1:8c1ddbf: import java.io.IOException;
1:dc83b2a: import java.util.List;
1:dc83b2a: 
1:dc83b2a: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:f209e8e: import org.apache.carbondata.core.metadata.datatype.DecimalType;
1:56330ae: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:8c1ddbf: import org.apache.carbondata.core.metadata.schema.table.Writable;
1:dc83b2a: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:dc83b2a: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
1:dc83b2a: 
1:dc83b2a: public class TableSpec {
1:dc83b2a: 
1:a5af0ff:   // column spec for each dimension and measure
1:a5af0ff:   private DimensionSpec[] dimensionSpec;
1:a5af0ff:   private MeasureSpec[] measureSpec;
1:a5af0ff: 
1:a5af0ff:   // number of simple dimensions
1:a5af0ff:   private int numSimpleDimensions;
1:dc83b2a: 
1:56330ae:   private CarbonTable carbonTable;
1:56330ae: 
1:56330ae:   public TableSpec(CarbonTable carbonTable) {
1:56330ae:     this.carbonTable = carbonTable;
1:56330ae:     List<CarbonDimension> dimensions =
1:56330ae:         carbonTable.getDimensionByTableName(carbonTable.getTableName());
1:56330ae:     List<CarbonMeasure> measures =
1:56330ae:         carbonTable.getMeasureByTableName(carbonTable.getTableName());
1:a5af0ff:     // first calculate total number of columnar field considering column group and complex column
1:a5af0ff:     numSimpleDimensions = 0;
1:a5af0ff:     for (CarbonDimension dimension : dimensions) {
1:f911403:       if (!dimension.isComplex()) {
1:f911403:         numSimpleDimensions++;
1:7422690:       }
1:7422690:     }
1:a5af0ff:     dimensionSpec = new DimensionSpec[dimensions.size()];
1:a5af0ff:     measureSpec = new MeasureSpec[measures.size()];
1:a5af0ff:     addDimensions(dimensions);
1:a5af0ff:     addMeasures(measures);
1:a5af0ff:   }
1:7422690: 
1:a5af0ff:   private void addDimensions(List<CarbonDimension> dimensions) {
1:a5af0ff:     int dimIndex = 0;
1:a5af0ff:     for (int i = 0; i < dimensions.size(); i++) {
1:a5af0ff:       CarbonDimension dimension = dimensions.get(i);
1:f911403:       if (dimension.isComplex()) {
1:f911403:         DimensionSpec spec = new DimensionSpec(ColumnType.COMPLEX, dimension);
1:f911403:         dimensionSpec[dimIndex++] = spec;
1:f911403:       } else if (dimension.getDataType() == DataTypes.TIMESTAMP && !dimension
1:f911403:           .isDirectDictionaryEncoding()) {
1:f911403:         DimensionSpec spec = new DimensionSpec(ColumnType.PLAIN_VALUE, dimension);
1:f911403:         dimensionSpec[dimIndex++] = spec;
1:f911403:       } else if (dimension.isDirectDictionaryEncoding()) {
1:f911403:         DimensionSpec spec = new DimensionSpec(ColumnType.DIRECT_DICTIONARY, dimension);
1:f911403:         dimensionSpec[dimIndex++] = spec;
1:f911403:       } else if (dimension.isGlobalDictionaryEncoding()) {
1:f911403:         DimensionSpec spec = new DimensionSpec(ColumnType.GLOBAL_DICTIONARY, dimension);
1:f911403:         dimensionSpec[dimIndex++] = spec;
1:f911403:       } else {
1:f911403:         DimensionSpec spec = new DimensionSpec(ColumnType.PLAIN_VALUE, dimension);
1:f911403:         dimensionSpec[dimIndex++] = spec;
1:a5af0ff:       }
1:a5af0ff:     }
26:dc83b2a:   }
1:7422690: 
1:a5af0ff:   private void addMeasures(List<CarbonMeasure> measures) {
1:a5af0ff:     for (int i = 0; i < measures.size(); i++) {
1:a5af0ff:       CarbonMeasure measure = measures.get(i);
1:f209e8e:       measureSpec[i] = new MeasureSpec(measure.getColName(), measure.getDataType());
1:a5af0ff:     }
1:dc83b2a:   }
1:a5af0ff: 
1:a5af0ff:   public DimensionSpec getDimensionSpec(int dimensionIndex) {
1:a5af0ff:     return dimensionSpec[dimensionIndex];
1:a5af0ff:   }
1:a5af0ff: 
1:a5af0ff:   public MeasureSpec getMeasureSpec(int measureIndex) {
1:a5af0ff:     return measureSpec[measureIndex];
1:a5af0ff:   }
1:a5af0ff: 
1:a5af0ff:   public int getNumSimpleDimensions() {
1:a5af0ff:     return numSimpleDimensions;
1:a5af0ff:   }
1:a5af0ff: 
1:a5af0ff:   public int getNumDimensions() {
1:a5af0ff:     return dimensionSpec.length;
1:a5af0ff:   }
1:bc3e684: 
1:7422690:   /**
1:7422690:    * return number of measures
1:7422690:    */
1:7422690:   public int getNumMeasures() {
1:7422690:     return measureSpec.length;
1:7422690:   }
1:a5af0ff: 
1:56330ae:   public CarbonTable getCarbonTable() {
1:56330ae:     return carbonTable;
1:56330ae:   }
1:56330ae: 
1:8c1ddbf:   public static class ColumnSpec implements Writable {
1:a5af0ff:     // field name of this column
1:a5af0ff:     private String fieldName;
1:a5af0ff: 
1:a5af0ff:     // data type of this column
1:8c1ddbf:     private DataType schemaDataType;
1:8c1ddbf: 
1:8c1ddbf:     // dimension type of this dimension
1:8c1ddbf:     private ColumnType columnType;
1:8c1ddbf: 
1:8c1ddbf:     public ColumnSpec() {
1:8c1ddbf:     }
1:8c1ddbf: 
1:f209e8e:     private ColumnSpec(String fieldName, DataType schemaDataType, ColumnType columnType) {
1:8c1ddbf:       this.fieldName = fieldName;
1:8c1ddbf:       this.schemaDataType = schemaDataType;
1:8c1ddbf:       this.columnType = columnType;
1:f209e8e:     }
1:f209e8e: 
1:f209e8e:     public static ColumnSpec newInstance(String fieldName, DataType schemaDataType,
1:f209e8e:         ColumnType columnType) {
1:f209e8e:       return new ColumnSpec(fieldName, schemaDataType, columnType);
1:f209e8e:     }
1:f209e8e: 
1:f209e8e:     public static ColumnSpec newInstanceLegacy(String fieldName, DataType schemaDataType,
1:f209e8e:         ColumnType columnType) {
1:f209e8e:       // for backward compatibility as the precision and scale is not stored, the values should be
1:f209e8e:       // initialized with -1 for both precision and scale
1:f209e8e:       if (schemaDataType instanceof DecimalType) {
1:f209e8e:         ((DecimalType) schemaDataType).setPrecision(-1);
1:f209e8e:         ((DecimalType) schemaDataType).setScale(-1);
1:f209e8e:       }
1:f209e8e:       return new ColumnSpec(fieldName, schemaDataType, columnType);
1:8c1ddbf:     }
1:8c1ddbf: 
1:8c1ddbf:     public DataType getSchemaDataType() {
1:8c1ddbf:       return schemaDataType;
1:a5af0ff:     }
1:a5af0ff: 
1:a5af0ff:     public String getFieldName() {
1:a5af0ff:       return fieldName;
1:a5af0ff:     }
1:8c1ddbf: 
1:8c1ddbf:     public ColumnType getColumnType() {
1:8c1ddbf:       return columnType;
1:8c1ddbf:     }
1:8c1ddbf: 
1:8c1ddbf:     public int getScale() {
1:f209e8e:       if (DataTypes.isDecimal(schemaDataType)) {
1:f209e8e:         return ((DecimalType) schemaDataType).getScale();
1:f209e8e:       } else if (schemaDataType == DataTypes.BYTE_ARRAY) {
1:f209e8e:         return -1;
1:f209e8e:       }
1:f209e8e:       throw new UnsupportedOperationException();
1:8c1ddbf:     }
1:8c1ddbf: 
1:8c1ddbf:     public int getPrecision() {
1:f209e8e:       if (DataTypes.isDecimal(schemaDataType)) {
1:f209e8e:         return ((DecimalType) schemaDataType).getPrecision();
1:f209e8e:       } else if (schemaDataType == DataTypes.BYTE_ARRAY) {
1:f209e8e:         return -1;
1:f209e8e:       }
1:f209e8e:       throw new UnsupportedOperationException();
1:8c1ddbf:     }
1:8c1ddbf: 
1:8c1ddbf:     @Override
1:8c1ddbf:     public void write(DataOutput out) throws IOException {
1:8c1ddbf:       out.writeUTF(fieldName);
1:956833e:       out.writeByte(schemaDataType.getId());
1:8c1ddbf:       out.writeByte(columnType.ordinal());
1:f209e8e:       if (DataTypes.isDecimal(schemaDataType)) {
1:f209e8e:         DecimalType decimalType = (DecimalType) schemaDataType;
1:f209e8e:         out.writeInt(decimalType.getScale());
1:f209e8e:         out.writeInt(decimalType.getPrecision());
1:f209e8e:       } else {
1:f209e8e:         out.writeInt(-1);
1:f209e8e:         out.writeInt(-1);
1:f209e8e:       }
1:8c1ddbf:     }
1:8c1ddbf: 
1:8c1ddbf:     @Override
1:8c1ddbf:     public void readFields(DataInput in) throws IOException {
1:8c1ddbf:       this.fieldName = in.readUTF();
1:956833e:       this.schemaDataType = DataTypes.valueOf(in.readByte());
1:8c1ddbf:       this.columnType = ColumnType.valueOf(in.readByte());
1:f209e8e:       int scale = in.readInt();
1:f209e8e:       int precision = in.readInt();
1:f209e8e:       if (DataTypes.isDecimal(this.schemaDataType)) {
1:f209e8e:         DecimalType decimalType = (DecimalType) this.schemaDataType;
1:f209e8e:         decimalType.setPrecision(precision);
1:f209e8e:         decimalType.setScale(scale);
1:f209e8e:       }
1:8c1ddbf:     }
1:a5af0ff:   }
1:a5af0ff: 
1:8c1ddbf:   public class DimensionSpec extends ColumnSpec implements Writable {
1:a5af0ff: 
1:a5af0ff:     // indicate whether this dimension is in sort column
1:a5af0ff:     private boolean inSortColumns;
1:a5af0ff: 
1:a5af0ff:     // indicate whether this dimension need to do inverted index
1:a5af0ff:     private boolean doInvertedIndex;
1:a5af0ff: 
1:8c1ddbf:     DimensionSpec(ColumnType columnType, CarbonDimension dimension) {
1:f209e8e:       super(dimension.getColName(), dimension.getDataType(), columnType);
1:a5af0ff:       this.inSortColumns = dimension.isSortColumn();
1:a5af0ff:       this.doInvertedIndex = dimension.isUseInvertedIndex();
1:a5af0ff:     }
1:a5af0ff: 
1:a5af0ff:     public boolean isInSortColumns() {
1:a5af0ff:       return inSortColumns;
1:a5af0ff:     }
1:a5af0ff: 
1:a5af0ff:     public boolean isDoInvertedIndex() {
1:a5af0ff:       return doInvertedIndex;
1:a5af0ff:     }
1:8c1ddbf: 
1:8c1ddbf:     @Override
1:8c1ddbf:     public void write(DataOutput out) throws IOException {
1:8c1ddbf:       super.write(out);
1:8c1ddbf:     }
1:8c1ddbf: 
1:8c1ddbf:     @Override
1:8c1ddbf:     public void readFields(DataInput in) throws IOException {
1:8c1ddbf:       super.readFields(in);
1:8c1ddbf:     }
1:a5af0ff:   }
1:a5af0ff: 
1:8c1ddbf:   public class MeasureSpec extends ColumnSpec implements Writable {
1:a5af0ff: 
1:f209e8e:     MeasureSpec(String fieldName, DataType dataType) {
1:f209e8e:       super(fieldName, dataType, ColumnType.MEASURE);
1:a5af0ff:     }
1:a5af0ff: 
1:8c1ddbf:     @Override
1:8c1ddbf:     public void write(DataOutput out) throws IOException {
1:8c1ddbf:       super.write(out);
1:dc83b2a:     }
1:dc83b2a: 
1:8c1ddbf:     @Override
1:8c1ddbf:     public void readFields(DataInput in) throws IOException {
1:8c1ddbf:       super.readFields(in);
1:dc83b2a:     }
1:dc83b2a:   }
1:dc83b2a: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:       if (!dimension.isComplex()) {
1:         numSimpleDimensions++;
/////////////////////////////////////////////////////////////////////////
1:       if (dimension.isComplex()) {
1:         DimensionSpec spec = new DimensionSpec(ColumnType.COMPLEX, dimension);
1:         dimensionSpec[dimIndex++] = spec;
1:       } else if (dimension.getDataType() == DataTypes.TIMESTAMP && !dimension
1:           .isDirectDictionaryEncoding()) {
1:         DimensionSpec spec = new DimensionSpec(ColumnType.PLAIN_VALUE, dimension);
1:         dimensionSpec[dimIndex++] = spec;
1:       } else if (dimension.isDirectDictionaryEncoding()) {
1:         DimensionSpec spec = new DimensionSpec(ColumnType.DIRECT_DICTIONARY, dimension);
1:         dimensionSpec[dimIndex++] = spec;
1:       } else if (dimension.isGlobalDictionaryEncoding()) {
1:         DimensionSpec spec = new DimensionSpec(ColumnType.GLOBAL_DICTIONARY, dimension);
1:         dimensionSpec[dimIndex++] = spec;
1:       } else {
1:         DimensionSpec spec = new DimensionSpec(ColumnType.PLAIN_VALUE, dimension);
1:         dimensionSpec[dimIndex++] = spec;
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:56330ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
/////////////////////////////////////////////////////////////////////////
1:   private CarbonTable carbonTable;
1: 
1:   public TableSpec(CarbonTable carbonTable) {
1:     this.carbonTable = carbonTable;
1:     List<CarbonDimension> dimensions =
1:         carbonTable.getDimensionByTableName(carbonTable.getTableName());
1:     List<CarbonMeasure> measures =
1:         carbonTable.getMeasureByTableName(carbonTable.getTableName());
/////////////////////////////////////////////////////////////////////////
1:   public CarbonTable getCarbonTable() {
1:     return carbonTable;
1:   }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DecimalType;
/////////////////////////////////////////////////////////////////////////
1:       measureSpec[i] = new MeasureSpec(measure.getColName(), measure.getDataType());
/////////////////////////////////////////////////////////////////////////
1:     private ColumnSpec(String fieldName, DataType schemaDataType, ColumnType columnType) {
1:     }
1: 
1:     public static ColumnSpec newInstance(String fieldName, DataType schemaDataType,
1:         ColumnType columnType) {
1:       return new ColumnSpec(fieldName, schemaDataType, columnType);
1:     }
1: 
1:     public static ColumnSpec newInstanceLegacy(String fieldName, DataType schemaDataType,
1:         ColumnType columnType) {
1:       // for backward compatibility as the precision and scale is not stored, the values should be
1:       // initialized with -1 for both precision and scale
1:       if (schemaDataType instanceof DecimalType) {
1:         ((DecimalType) schemaDataType).setPrecision(-1);
1:         ((DecimalType) schemaDataType).setScale(-1);
1:       }
1:       return new ColumnSpec(fieldName, schemaDataType, columnType);
/////////////////////////////////////////////////////////////////////////
1:       if (DataTypes.isDecimal(schemaDataType)) {
1:         return ((DecimalType) schemaDataType).getScale();
1:       } else if (schemaDataType == DataTypes.BYTE_ARRAY) {
1:         return -1;
1:       }
1:       throw new UnsupportedOperationException();
1:       if (DataTypes.isDecimal(schemaDataType)) {
1:         return ((DecimalType) schemaDataType).getPrecision();
1:       } else if (schemaDataType == DataTypes.BYTE_ARRAY) {
1:         return -1;
1:       }
1:       throw new UnsupportedOperationException();
/////////////////////////////////////////////////////////////////////////
1:       if (DataTypes.isDecimal(schemaDataType)) {
1:         DecimalType decimalType = (DecimalType) schemaDataType;
1:         out.writeInt(decimalType.getScale());
1:         out.writeInt(decimalType.getPrecision());
1:       } else {
1:         out.writeInt(-1);
1:         out.writeInt(-1);
1:       }
/////////////////////////////////////////////////////////////////////////
1:       int scale = in.readInt();
1:       int precision = in.readInt();
1:       if (DataTypes.isDecimal(this.schemaDataType)) {
1:         DecimalType decimalType = (DecimalType) this.schemaDataType;
1:         decimalType.setPrecision(precision);
1:         decimalType.setScale(scale);
1:       }
/////////////////////////////////////////////////////////////////////////
1:       super(dimension.getColName(), dimension.getDataType(), columnType);
/////////////////////////////////////////////////////////////////////////
1:     MeasureSpec(String fieldName, DataType dataType) {
1:       super(fieldName, dataType, ColumnType.MEASURE);
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
0:         } else if (dimension.getDataType() == DataTypes.TIMESTAMP && !dimension
/////////////////////////////////////////////////////////////////////////
1:       out.writeByte(schemaDataType.getId());
/////////////////////////////////////////////////////////////////////////
1:       this.schemaDataType = DataTypes.valueOf(in.readByte());
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import org.apache.carbondata.core.metadata.schema.table.Writable;
/////////////////////////////////////////////////////////////////////////
0:           DimensionSpec spec = new DimensionSpec(ColumnType.COMPLEX, dimension);
0:           DimensionSpec spec = new DimensionSpec(ColumnType.DIRECT_DICTIONARY, dimension);
0:           DimensionSpec spec = new DimensionSpec(ColumnType.GLOBAL_DICTIONARY, dimension);
0:           DimensionSpec spec = new DimensionSpec(ColumnType.PLAIN_VALUE, dimension);
/////////////////////////////////////////////////////////////////////////
1:   public static class ColumnSpec implements Writable {
1:     private DataType schemaDataType;
1:     // dimension type of this dimension
1:     private ColumnType columnType;
1: 
0:     // scale and precision is for decimal column only
0:     // TODO: make DataType a class instead of enum
0:     private int scale;
0:     private int precision;
1: 
1:     public ColumnSpec() {
0:     public ColumnSpec(String fieldName, DataType schemaDataType, ColumnType columnType) {
0:       this(fieldName, schemaDataType, columnType, 0, 0);
1:     }
1: 
0:     public ColumnSpec(String fieldName, DataType schemaDataType, ColumnType columnType,
0:         int scale, int precision) {
1:       this.fieldName = fieldName;
1:       this.schemaDataType = schemaDataType;
1:       this.columnType = columnType;
0:       this.scale = scale;
0:       this.precision = precision;
1:     }
1: 
1:     public DataType getSchemaDataType() {
1:       return schemaDataType;
1: 
1:     public ColumnType getColumnType() {
1:       return columnType;
1:     }
1: 
1:     public int getScale() {
0:       return scale;
1:     }
1: 
1:     public int getPrecision() {
0:       return precision;
1:     }
1: 
1:     @Override
1:     public void write(DataOutput out) throws IOException {
1:       out.writeUTF(fieldName);
0:       out.writeByte(schemaDataType.ordinal());
1:       out.writeByte(columnType.ordinal());
0:       out.writeInt(scale);
0:       out.writeInt(precision);
1:     }
1: 
1:     @Override
1:     public void readFields(DataInput in) throws IOException {
1:       this.fieldName = in.readUTF();
0:       this.schemaDataType = DataType.valueOf(in.readByte());
1:       this.columnType = ColumnType.valueOf(in.readByte());
0:       this.scale = in.readInt();
0:       this.precision = in.readInt();
1:     }
1:   public class DimensionSpec extends ColumnSpec implements Writable {
/////////////////////////////////////////////////////////////////////////
1:     DimensionSpec(ColumnType columnType, CarbonDimension dimension) {
0:       super(dimension.getColName(), dimension.getDataType(), columnType, 0, 0);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void write(DataOutput out) throws IOException {
1:       super.write(out);
1:     }
1: 
1:     @Override
1:     public void readFields(DataInput in) throws IOException {
1:       super.readFields(in);
1:     }
1:   public class MeasureSpec extends ColumnSpec implements Writable {
0:       super(fieldName, dataType, ColumnType.MEASURE, scale, precision);
1:     @Override
1:     public void write(DataOutput out) throws IOException {
1:       super.write(out);
1:     @Override
1:     public void readFields(DataInput in) throws IOException {
1:       super.readFields(in);
author:manishgupta88
-------------------------------------------------------------------------------
commit:7f6b08a
/////////////////////////////////////////////////////////////////////////
0:       // for backward compatibility as the precision and scale is not stored, the values should be
0:       // initialized with -1 for both precision and scale
0:       this(fieldName, schemaDataType, columnType, -1, -1);
author:dhatchayani
-------------------------------------------------------------------------------
commit:36ceb59
/////////////////////////////////////////////////////////////////////////
0:         } else if (dimension.getDataType() == DataType.TIMESTAMP && !dimension
0:             .isDirectDictionaryEncoding()) {
0:           DimensionSpec spec = new DimensionSpec(ColumnType.PLAIN_VALUE, dimension);
0:           dimensionSpec[dimIndex++] = spec;
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7422690
/////////////////////////////////////////////////////////////////////////
0:       measureSpec[i] = new MeasureSpec(measure.getColName(), measure.getDataType(), measure
0:           .getScale(), measure.getPrecision());
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * return number of measures
1:    */
1:   public int getNumMeasures() {
1:     return measureSpec.length;
1:   }
0:   public class ColumnSpec {
/////////////////////////////////////////////////////////////////////////
0:     private int scale;
0:     private int precision;
1: 
0:     MeasureSpec(String fieldName, DataType dataType, int scale, int precision) {
0:       this.scale = scale;
0:       this.precision = precision;
1:     }
1: 
0:     public int getScale() {
0:       return scale;
1:     }
1: 
0:     public int getPrecision() {
0:       return precision;
author:jackylk
-------------------------------------------------------------------------------
commit:a5af0ff
/////////////////////////////////////////////////////////////////////////
1:   // column spec for each dimension and measure
1:   private DimensionSpec[] dimensionSpec;
1:   private MeasureSpec[] measureSpec;
1: 
1:   // number of simple dimensions
1:   private int numSimpleDimensions;
1:     // first calculate total number of columnar field considering column group and complex column
1:     numSimpleDimensions = 0;
1:     for (CarbonDimension dimension : dimensions) {
0:       if (dimension.isColumnar()) {
0:         if (!dimension.isComplex()) {
0:           numSimpleDimensions++;
0:       } else {
0:         throw new UnsupportedOperationException("column group is not supported");
1:     }
1:     dimensionSpec = new DimensionSpec[dimensions.size()];
1:     measureSpec = new MeasureSpec[measures.size()];
1:     addDimensions(dimensions);
1:     addMeasures(measures);
1:   }
1:   private void addDimensions(List<CarbonDimension> dimensions) {
1:     int dimIndex = 0;
1:     for (int i = 0; i < dimensions.size(); i++) {
1:       CarbonDimension dimension = dimensions.get(i);
0:       if (dimension.isColumnar()) {
0:         if (dimension.isComplex()) {
0:           DimensionSpec spec = new DimensionSpec(DimensionType.COMPLEX, dimension);
0:           dimensionSpec[dimIndex++] = spec;
0:         } else if (dimension.isDirectDictionaryEncoding()) {
0:           DimensionSpec spec = new DimensionSpec(DimensionType.DIRECT_DICTIONARY, dimension);
0:           dimensionSpec[dimIndex++] = spec;
0:         } else if (dimension.isGlobalDictionaryEncoding()) {
0:           DimensionSpec spec = new DimensionSpec(DimensionType.GLOBAL_DICTIONARY, dimension);
0:           dimensionSpec[dimIndex++] = spec;
0:           DimensionSpec spec = new DimensionSpec(DimensionType.PLAIN_VALUE, dimension);
0:           dimensionSpec[dimIndex++] = spec;
1:   private void addMeasures(List<CarbonMeasure> measures) {
1:     for (int i = 0; i < measures.size(); i++) {
1:       CarbonMeasure measure = measures.get(i);
0:       measureSpec[i] = new MeasureSpec(measure.getColName(), measure.getDataType());
1:   }
1:   public DimensionSpec getDimensionSpec(int dimensionIndex) {
1:     return dimensionSpec[dimensionIndex];
1:   }
1:   public MeasureSpec getMeasureSpec(int measureIndex) {
1:     return measureSpec[measureIndex];
1:   }
1: 
1:   public int getNumSimpleDimensions() {
1:     return numSimpleDimensions;
1:   }
1: 
1:   public int getNumDimensions() {
1:     return dimensionSpec.length;
1:   }
/////////////////////////////////////////////////////////////////////////
0:     }/**
0:       return measureSpec.length;
0:     }public class ColumnSpec {
1:     // field name of this column
1:     private String fieldName;
1: 
1:     // data type of this column
0:     private DataType dataType;
1: 
0:     ColumnSpec(String fieldName, DataType dataType) {
0:       this.fieldName = fieldName;
0:       this.dataType = dataType;
1:     }
1: 
0:     public DataType getDataType() {
0:       return dataType;
1:     }
1: 
1:     public String getFieldName() {
1:       return fieldName;
1:     }
1:   }
1: 
0:   public class DimensionSpec extends ColumnSpec {
1: 
0:     // dimension type of this dimension
0:     private DimensionType type;
1: 
1:     // indicate whether this dimension is in sort column
1:     private boolean inSortColumns;
1: 
1:     // indicate whether this dimension need to do inverted index
1:     private boolean doInvertedIndex;
1: 
0:     DimensionSpec(DimensionType dimensionType, CarbonDimension dimension) {
0:       super(dimension.getColName(), dimension.getDataType());
0:       this.type = dimensionType;
1:       this.inSortColumns = dimension.isSortColumn();
1:       this.doInvertedIndex = dimension.isUseInvertedIndex();
1:     }
1: 
0:     public DimensionType getDimensionType() {
0:       return type;
1:     }
1: 
1:     public boolean isInSortColumns() {
1:       return inSortColumns;
1:     }
1: 
1:     public boolean isDoInvertedIndex() {
1:       return doInvertedIndex;
1:     }
1:   }
1: 
0:   public class MeasureSpec extends ColumnSpec {
1: 
0:     MeasureSpec(String fieldName, DataType dataType) {
0:       super(fieldName, dataType);
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1: 
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore;
1: 
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
1: 
1: public class TableSpec {
1: 
0:   // contains name and type for each dimension
0:   private DimensionSpec dimensionSpec;
0:   // contains name and type for each measure
0:   private MeasureSpec measureSpec;
1: 
0:   public TableSpec(List<CarbonDimension> dimensions, List<CarbonMeasure> measures) {
0:     dimensionSpec = new DimensionSpec(dimensions);
0:     measureSpec = new MeasureSpec(measures);
1:   }
1: 
0:   public DimensionSpec getDimensionSpec() {
0:     return dimensionSpec;
1:   }
1: 
0:   public MeasureSpec getMeasureSpec() {
0:     return measureSpec;
1:   }
1: 
0:   public class DimensionSpec {
1: 
0:     // field name of each dimension, in schema order
0:     private String[] fieldName;
1: 
0:     // encoding type of each dimension, in schema order
0:     private DimensionType[] types;
1: 
0:     // number of simple dimensions
0:     private int numSimpleDimensions;
1: 
0:     // number of complex dimensions
0:     private int numComplexDimensions;
1: 
0:     // number of dimensions after complex column expansion
0:     private int numDimensionExpanded;
1: 
0:     DimensionSpec(List<CarbonDimension> dimensions) {
0:       // first calculate total number of columnar field considering column group and complex column
0:       numDimensionExpanded = 0;
0:       numSimpleDimensions = 0;
0:       numComplexDimensions = 0;
0:       boolean inColumnGroup = false;
0:       for (CarbonDimension dimension : dimensions) {
0:         if (dimension.isColumnar()) {
0:           if (inColumnGroup) {
0:             inColumnGroup = false;
1:           }
0:           if (dimension.isComplex()) {
0:             numDimensionExpanded += dimension.getNumDimensionsExpanded();
0:             numComplexDimensions++;
0:           } else {
0:             numDimensionExpanded++;
0:             numSimpleDimensions++;
1:           }
0:         } else {
0:           // column group
0:           if (!inColumnGroup) {
0:             inColumnGroup = true;
0:             numDimensionExpanded++;
0:             numSimpleDimensions++;
1:           }
1:         }
1:       }
1: 
0:       // then extract dimension name and type for each column
0:       fieldName = new String[numDimensionExpanded];
0:       types = new DimensionType[numDimensionExpanded];
0:       inColumnGroup = false;
0:       int index = 0;
0:       for (CarbonDimension dimension : dimensions) {
0:         if (dimension.isColumnar()) {
0:           if (inColumnGroup) {
0:             inColumnGroup = false;
1:           }
0:           if (dimension.isComplex()) {
0:             int count = addDimension(index, dimension);
0:             index += count;
0:           } else if (dimension.getDataType() == DataType.TIMESTAMP ||
0:                      dimension.getDataType() == DataType.DATE) {
0:             addSimpleDimension(index++, dimension.getColName(), DimensionType.DIRECT_DICTIONARY);
0:           } else if (dimension.isGlobalDictionaryEncoding()) {
0:             addSimpleDimension(index++, dimension.getColName(), DimensionType.GLOBAL_DICTIONARY);
0:           } else {
0:             addSimpleDimension(index++, dimension.getColName(), DimensionType.PLAIN_VALUE);
1:           }
0:         } else {
0:           // column group
0:           if (!inColumnGroup) {
0:             addSimpleDimension(index++, dimension.getColName(), DimensionType.COLUMN_GROUP);
0:             inColumnGroup = true;
1:           }
1:         }
1:       }
1:     }
1: 
0:     private void addSimpleDimension(int index, String name, DimensionType type) {
0:       fieldName[index] = name;
0:       types[index] = type;
1:     }
1: 
0:     // add dimension and return number of columns added
0:     private int addDimension(int index, CarbonDimension dimension) {
0:       switch (dimension.getDataType()) {
0:         case ARRAY:
0:           addSimpleDimension(index, dimension.getColName() + ".offset", DimensionType.COMPLEX);
0:           List<CarbonDimension> arrayChildren = dimension.getListOfChildDimensions();
0:           int count = 1;
0:           for (CarbonDimension child : arrayChildren) {
0:             count += addDimension(index + count, child);
1:           }
0:           return count;
0:         case STRUCT:
0:           addSimpleDimension(index, dimension.getColName() + ".empty", DimensionType.COMPLEX);
0:           List<CarbonDimension> structChildren = dimension.getListOfChildDimensions();
0:           count = 1;
0:           for (CarbonDimension child : structChildren) {
0:             count += addDimension(index + count, child);
1:           }
0:           return count;
0:         case TIMESTAMP:
0:         case DATE:
0:           addSimpleDimension(index, dimension.getColName(), DimensionType.DIRECT_DICTIONARY);
0:           return 1;
0:         default:
0:           addSimpleDimension(index, dimension.getColName(),
0:               dimension.isGlobalDictionaryEncoding() ?
0:                   DimensionType.GLOBAL_DICTIONARY : DimensionType.PLAIN_VALUE);
0:           return 1;
1:       }
1:     }
1: 
1: 
0:     /**
0:      * return the dimension type of index'th dimension. index is from 0 to numDimensions
1:      */
0:     public DimensionType getType(int index) {
0:       assert (index >= 0 && index < types.length);
0:       return types[index];
1:     }
1: 
0:     /**
0:      * return number of dimensions
1:      */
0:     public int getNumSimpleDimensions() {
0:       return numSimpleDimensions;
1:     }
1: 
0:     public int getNumComplexDimensions() {
0:       return numComplexDimensions;
1:     }
1: 
0:     public int getNumExpandedDimensions() {
0:       return numDimensionExpanded;
1:     }
1:   }
1: 
0:   public class MeasureSpec {
1: 
0:     // field name of each measure, in schema order
0:     private String[] fieldName;
1: 
0:     // data type of each measure, in schema order
0:     private DataType[] types;
1: 
0:     MeasureSpec(List<CarbonMeasure> measures) {
0:       fieldName = new String[measures.size()];
0:       types = new DataType[measures.size()];
0:       int i = 0;
0:       for (CarbonMeasure measure: measures) {
0:         add(i++, measure.getColName(), measure.getDataType());
1:       }
1:     }
1: 
0:     private void add(int index, String name, DataType type) {
0:       fieldName[index] = name;
0:       types[index] = type;
1:     }
1: 
0:     /**
0:      * return the data type of index'th measure. index is from 0 to numMeasures
1:      */
0:     public DataType getType(int index) {
0:       assert (index >= 0 && index < types.length);
0:       return types[index];
1:     }
1: 
0:     /**
0:      * return number of measures
1:      */
0:     public int getNumMeasures() {
0:       return types.length;
1:     }
1:   }
1: }
author:ravipesala
-------------------------------------------------------------------------------
commit:9e064ee
/////////////////////////////////////////////////////////////////////////
0:     private int[] scale;
0: 
0:     private int[] precision;
0: 
0:       scale = new int[measures.size()];
0:       precision = new int[measures.size()];
0:         add(i++, measure.getColName(), measure.getDataType(), measure.getScale(),
0:             measure.getPrecision());
0:     private void add(int index, String name, DataType type, int scale, int precision) {
0:       this.scale[index] = scale;
0:       this.precision[index] = precision;
/////////////////////////////////////////////////////////////////////////
0:     public int getScale(int index) {
0:       assert (index >= 0 && index < precision.length);
0:       return scale[index];
0:     }
0: 
0:     public int getPrecision(int index) {
0:       assert (index >= 0 && index < precision.length);
0:       return precision[index];
0:     }
0: 
============================================================================