1:d96f09a: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:d96f09a:  *
1:d96f09a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d96f09a:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:d96f09a:  */
3:d96f09a: 
1:349c59c: package org.apache.carbondata.processing.loading.converter.impl;
1:d96f09a: 
1:eaadc88: import java.io.IOException;
1:496cde4: import java.util.List;
1:05b2654: import java.util.Map;
1:496cde4: 
1:d96f09a: import org.apache.carbondata.core.cache.Cache;
1:ff5166e: import org.apache.carbondata.core.cache.CacheProvider;
1:ff5166e: import org.apache.carbondata.core.cache.CacheType;
1:eaadc88: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1:eaadc88: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1:496cde4: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:dc83b2a: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:d96f09a: import org.apache.carbondata.core.devapi.BiDictionary;
1:d96f09a: import org.apache.carbondata.core.devapi.DictionaryGenerationException;
1:05b2654: import org.apache.carbondata.core.dictionary.client.DictionaryClient;
1:87dade7: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:87dade7: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessageType;
1:cd7c210: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:05b2654: import org.apache.carbondata.core.util.CarbonUtil;
1:496cde4: import org.apache.carbondata.core.util.DataTypeUtil;
1:349c59c: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
1:349c59c: import org.apache.carbondata.processing.loading.dictionary.DictionaryServerClientDictionary;
1:349c59c: import org.apache.carbondata.processing.loading.dictionary.PreCreatedDictionary;
1:349c59c: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1:4a79a86: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1:d96f09a: 
1:d96f09a: public class DictionaryFieldConverterImpl extends AbstractDictionaryFieldConverterImpl {
1:ee5f65f: 
1:496cde4:   private BiDictionary<Integer, Object> dictionaryGenerator;
1:d96f09a: 
1:d96f09a:   private int index;
1:d96f09a: 
1:496cde4:   private CarbonDimension carbonDimension;
1:496cde4: 
1:496cde4:   private String nullFormat;
1:496cde4: 
1:87dade7:   private Dictionary dictionary;
1:87dade7: 
1:87dade7:   private DictionaryMessage dictionaryMessage;
1:87dade7: 
1:3bc9152:   private boolean isEmptyBadRecord;
1:3bc9152: 
1:cd7c210:   public DictionaryFieldConverterImpl(CarbonColumn carbonColumn,
1:cd7c210:       String tableId, String nullFormat, int index,
1:ff5166e:       DictionaryClient client, boolean useOnePass, Map<Object, Integer> localCache,
1:ff5166e:       boolean isEmptyBadRecord, DictionaryColumnUniqueIdentifier identifier) throws IOException {
1:d96f09a:     this.index = index;
1:cd7c210:     assert carbonColumn instanceof CarbonDimension;
1:cd7c210:     this.carbonDimension = (CarbonDimension) carbonColumn;
1:496cde4:     this.nullFormat = nullFormat;
1:3bc9152:     this.isEmptyBadRecord = isEmptyBadRecord;
1:05b2654: 
1:ff5166e:     CacheProvider cacheProvider = CacheProvider.getInstance();
1:ff5166e:     Cache<DictionaryColumnUniqueIdentifier, Dictionary> cache =
1:ff5166e:         cacheProvider.createCache(CacheType.REVERSE_DICTIONARY);
1:ff5166e: 
1:05b2654:     // if use one pass, use DictionaryServerClientDictionary
1:05b2654:     if (useOnePass) {
1:1155d4d:       if (CarbonUtil.isFileExistsForGivenColumn(identifier)) {
1:eaadc88:         dictionary = cache.get(identifier);
1:87dade7:       }
1:87dade7:       dictionaryMessage = new DictionaryMessage();
1:cd7c210:       dictionaryMessage.setColumnName(carbonColumn.getColName());
1:05b2654:       // for table initialization
1:cd7c210:       dictionaryMessage.setTableUniqueId(tableId);
1:87dade7:       dictionaryMessage.setData("0");
1:05b2654:       // for generate dictionary
1:87dade7:       dictionaryMessage.setType(DictionaryMessageType.DICT_GENERATION);
1:05b2654:       dictionaryGenerator = new DictionaryServerClientDictionary(dictionary, client,
1:87dade7:           dictionaryMessage, localCache);
1:05b2654:     } else {
1:eaadc88:       dictionary = cache.get(identifier);
1:eaadc88:       dictionaryGenerator = new PreCreatedDictionary(dictionary);
1:05b2654:     }
1:05b2654:   }
1:d96f09a: 
1:496cde4:   @Override public void convert(CarbonRow row, BadRecordLogHolder logHolder)
1:496cde4:       throws CarbonDataLoadingException {
1:05b2654:     try {
1:cd7c210:       row.update(convert(row.getString(index), logHolder), index);
1:cd7c210:     } catch (RuntimeException e) {
1:cd7c210:       throw new CarbonDataLoadingException(e);
1:cd7c210:     }
1:cd7c210:   }
1:cd7c210: 
1:cd7c210:   @Override
1:cd7c210:   public Object convert(Object value, BadRecordLogHolder logHolder)
1:cd7c210:       throws RuntimeException {
1:cd7c210:     try {
1:b41d440:       String parsedValue = null;
1:cd7c210:       String dimensionValue = (String) value;
1:3bc9152:       if (dimensionValue == null || dimensionValue.equals(nullFormat)) {
1:b41d440:         parsedValue = CarbonCommonConstants.MEMBER_DEFAULT_VAL;
1:b41d440:       } else {
1:b41d440:         parsedValue = DataTypeUtil.parseValue(dimensionValue, carbonDimension);
1:3bc9152:       }
1:3bc9152:       if (null == parsedValue) {
1:3bc9152:         if ((dimensionValue.length() > 0) || (dimensionValue.length() == 0 && isEmptyBadRecord)) {
1:4a79a86:           String message = logHolder.getColumnMessageMap().get(carbonDimension.getColName());
1:4a79a86:           if (null == message) {
1:cd7c210:             message = CarbonDataProcessorUtil
1:cd7c210:                 .prepareFailureReason(carbonDimension.getColName(), carbonDimension.getDataType());
1:4a79a86:             logHolder.getColumnMessageMap().put(carbonDimension.getColName(), message);
1:cd7c210:           }
1:cd7c210:           logHolder.setReason(message);
1:3bc9152:         }
1:cd7c210:         return CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY;
1:496cde4:       } else {
1:cd7c210:         return dictionaryGenerator.getOrGenerateKey(parsedValue);
1:496cde4:       }
1:d96f09a:     } catch (DictionaryGenerationException e) {
1:cd7c210:       throw new RuntimeException(e);
1:05b2654:     }
4:d96f09a:   }
1:d96f09a: 
1:f79b9ea:   /**
1:f79b9ea:    * Method to clear out the dictionary cache.
1:f79b9ea:    */
1:f79b9ea:   @Override public void clear() {
1:f79b9ea:     CarbonUtil.clearDictionaryCache(dictionary);
1:f79b9ea:   }
1:f79b9ea: 
2:d96f09a:   @Override
1:496cde4:   public void fillColumnCardinality(List<Integer> cardinality) {
1:496cde4:     cardinality.add(dictionaryGenerator.size());
1:d96f09a:   }
1:87dade7: 
1:d96f09a: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public DictionaryFieldConverterImpl(CarbonColumn carbonColumn,
1:       String tableId, String nullFormat, int index,
1:     assert carbonColumn instanceof CarbonDimension;
1:     this.carbonDimension = (CarbonDimension) carbonColumn;
/////////////////////////////////////////////////////////////////////////
1:       dictionaryMessage.setColumnName(carbonColumn.getColName());
1:       dictionaryMessage.setTableUniqueId(tableId);
/////////////////////////////////////////////////////////////////////////
1:       row.update(convert(row.getString(index), logHolder), index);
1:     } catch (RuntimeException e) {
1:       throw new CarbonDataLoadingException(e);
1:     }
1:   }
1: 
1:   @Override
1:   public Object convert(Object value, BadRecordLogHolder logHolder)
1:       throws RuntimeException {
1:     try {
1:       String dimensionValue = (String) value;
/////////////////////////////////////////////////////////////////////////
1:             message = CarbonDataProcessorUtil
1:                 .prepareFailureReason(carbonDimension.getColName(), carbonDimension.getDataType());
1:           }
1:           logHolder.setReason(message);
1:         return CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY;
1:         return dictionaryGenerator.getOrGenerateKey(parsedValue);
1:       throw new RuntimeException(e);
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:ff5166e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.cache.CacheProvider;
1: import org.apache.carbondata.core.cache.CacheType;
/////////////////////////////////////////////////////////////////////////
1:       DictionaryClient client, boolean useOnePass, Map<Object, Integer> localCache,
1:       boolean isEmptyBadRecord, DictionaryColumnUniqueIdentifier identifier) throws IOException {
1:     CacheProvider cacheProvider = CacheProvider.getInstance();
1:     Cache<DictionaryColumnUniqueIdentifier, Dictionary> cache =
1:         cacheProvider.createCache(CacheType.REVERSE_DICTIONARY);
1: 
author:sounakr
-------------------------------------------------------------------------------
commit:f79b9ea
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Method to clear out the dictionary cache.
1:    */
1:   @Override public void clear() {
1:     CarbonUtil.clearDictionaryCache(dictionary);
1:   }
1: 
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:       AbsoluteTableIdentifier absoluteTableIdentifier, String nullFormat, int index,
0:       DictionaryClient client, boolean useOnePass,
/////////////////////////////////////////////////////////////////////////
1:       if (CarbonUtil.isFileExistsForGivenColumn(identifier)) {
0:       dictionaryMessage
0:           .setTableUniqueId(absoluteTableIdentifier.getCarbonTableIdentifier().getTableId());
commit:4a79a86
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
/////////////////////////////////////////////////////////////////////////
1:           String message = logHolder.getColumnMessageMap().get(carbonDimension.getColName());
1:           if (null == message) {
0:             message = CarbonDataProcessorUtil
0:                 .prepareFailureReason(carbonDimension.getColName(), carbonDimension.getDataType());
1:             logHolder.getColumnMessageMap().put(carbonDimension.getColName(), message);
0:           } logHolder.setReason(message);
commit:b41d440
/////////////////////////////////////////////////////////////////////////
1:       String parsedValue = null;
1:         parsedValue = CarbonCommonConstants.MEMBER_DEFAULT_VAL;
1:       } else {
1:         parsedValue = DataTypeUtil.parseValue(dimensionValue, carbonDimension);
commit:3bc9152
/////////////////////////////////////////////////////////////////////////
1:   private boolean isEmptyBadRecord;
1: 
0:       Map<Object, Integer> localCache, boolean isEmptyBadRecord) throws IOException {
1:     this.isEmptyBadRecord = isEmptyBadRecord;
/////////////////////////////////////////////////////////////////////////
0:       String dimensionValue = row.getString(index);
1:       if (dimensionValue == null || dimensionValue.equals(nullFormat)) {
0:         dimensionValue = CarbonCommonConstants.MEMBER_DEFAULT_VAL;
1:       }
0:       String parsedValue = DataTypeUtil.parseValue(dimensionValue, carbonDimension);
1:       if (null == parsedValue) {
1:         if ((dimensionValue.length() > 0) || (dimensionValue.length() == 0 && isEmptyBadRecord)) {
0:           String dataType = carbonDimension.getDataType().getName();
0:           logHolder.setReason(
0:               "The value " + " \"" + dimensionValue + "\"" + " with column name " + carbonDimension
0:                   .getColName() + " and column data type " + dataType + " is not a valid "
0:                   + dataType + " type.");
1:         }
author:kunal642
-------------------------------------------------------------------------------
commit:cc0e6f1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       Map<Object, Integer> localCache, boolean isEmptyBadRecord,
0:       DictionaryColumnUniqueIdentifier identifier) throws IOException {
commit:ee5f65f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.common.logging.LogService;
0: import org.apache.carbondata.common.logging.LogServiceFactory;
/////////////////////////////////////////////////////////////////////////
0:   private static final LogService LOGGER =
0:       LogServiceFactory.getLogService(DictionaryFieldConverterImpl.class.getName());
1: 
/////////////////////////////////////////////////////////////////////////
0:       DictionaryClient client, boolean useOnePass, String storePath,
/////////////////////////////////////////////////////////////////////////
0:       dictionaryMessage.setTableUniqueId(carbonTableIdentifier.getTableId());
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.converter.impl;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.loading.DataField;
1: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
1: import org.apache.carbondata.processing.loading.dictionary.DictionaryServerClientDictionary;
1: import org.apache.carbondata.processing.loading.dictionary.PreCreatedDictionary;
1: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
/////////////////////////////////////////////////////////////////////////
0:             dataField.getColumn().getColumnIdentifier(), dataField.getColumn().getDataType(),
0:             CarbonStorePath.getCarbonTablePath(storePath, carbonTableIdentifier));
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             message = CarbonDataProcessorUtil.prepareFailureReason(
0:                 carbonDimension.getColName(), carbonDimension.getDataType());
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       DictionaryClient client, Boolean useOnePass, String storePath)
0:       throws IOException {
/////////////////////////////////////////////////////////////////////////
1:         dictionary = cache.get(identifier);
/////////////////////////////////////////////////////////////////////////
1:       dictionary = cache.get(identifier);
1:       dictionaryGenerator = new PreCreatedDictionary(dictionary);
author:ravipesala
-------------------------------------------------------------------------------
commit:87dade7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessageType;
/////////////////////////////////////////////////////////////////////////
1:   private Dictionary dictionary;
1: 
1:   private DictionaryMessage dictionaryMessage;
1: 
0:       DictionaryClient client, boolean useOnePass, String storePath, boolean tableInitialize,
0:       Map<Object, Integer> localCache) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:       dictionaryMessage = new DictionaryMessage();
0:       dictionaryMessage.setColumnName(dataField.getColumn().getColName());
0:       dictionaryMessage.setTableUniqueName(carbonTableIdentifier.getTableUniqueName());
0:       dictionaryMessage.setType(DictionaryMessageType.TABLE_INTIALIZATION);
1:       dictionaryMessage.setData("0");
0:       if (tableInitialize) {
0:         client.getDictionary(dictionaryMessage);
1:       }
1:       dictionaryMessage.setType(DictionaryMessageType.DICT_GENERATION);
1:           dictionaryMessage, localCache);
/////////////////////////////////////////////////////////////////////////
1: 
commit:05b2654
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
1: import java.util.Map;
0: import org.apache.carbondata.core.cache.dictionary.*;
1: import org.apache.carbondata.core.dictionary.client.DictionaryClient;
0: import org.apache.carbondata.core.dictionary.generator.key.DictionaryKey;
1: import org.apache.carbondata.core.util.CarbonUtil;
0: import org.apache.carbondata.processing.newflow.dictionary.DictionaryServerClientDictionary;
/////////////////////////////////////////////////////////////////////////
0:       CarbonTableIdentifier carbonTableIdentifier, String nullFormat, int index,
0:       DictionaryClient client, Boolean useOnePass, String storePath) {
1: 
0:     Dictionary dictionary = null;
1:     // if use one pass, use DictionaryServerClientDictionary
1:     if (useOnePass) {
0:       if (CarbonUtil.isFileExistsForGivenColumn(storePath, identifier)) {
0:         try{
0:           dictionary = cache.get(identifier);
0:         } catch (CarbonUtilException e) {
0:           LOGGER.error(e);
0:           throw new RuntimeException(e);
1:         }
1:       }
0:       String threadNo = "initial";
0:       DictionaryKey dictionaryKey = new DictionaryKey();
0:       dictionaryKey.setColumnName(dataField.getColumn().getColName());
0:       dictionaryKey.setTableUniqueName(carbonTableIdentifier.getTableUniqueName());
0:       dictionaryKey.setThreadNo(threadNo);
1:       // for table initialization
0:       dictionaryKey.setType("TABLE_INTIALIZATION");
0:       dictionaryKey.setData("0");
0:       client.getDictionary(dictionaryKey);
0:       Map<Object, Integer> localCache = new HashMap<>();
1:       // for generate dictionary
0:       dictionaryKey.setType("DICTIONARY_GENERATION");
1:       dictionaryGenerator = new DictionaryServerClientDictionary(dictionary, client,
0:               dictionaryKey, localCache);
1:     } else {
1:       try {
0:         dictionary = cache.get(identifier);
0:         dictionaryGenerator = new PreCreatedDictionary(dictionary);
0:       } catch (CarbonUtilException e) {
0:         LOGGER.error(e);
0:         throw new RuntimeException(e);
1:       }
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.DataTypeUtil;
0: import org.apache.carbondata.processing.newflow.converter.BadRecordLogHolder;
/////////////////////////////////////////////////////////////////////////
1:   private BiDictionary<Integer, Object> dictionaryGenerator;
1:   private CarbonDimension carbonDimension;
1: 
1:   private String nullFormat;
1: 
0:       CarbonTableIdentifier carbonTableIdentifier, String nullFormat, int index) {
0:     this.carbonDimension = (CarbonDimension) dataField.getColumn();
1:     this.nullFormat = nullFormat;
/////////////////////////////////////////////////////////////////////////
1:   @Override public void convert(CarbonRow row, BadRecordLogHolder logHolder)
1:       throws CarbonDataLoadingException {
0:       String parsedValue = DataTypeUtil.parseValue(row.getString(index), carbonDimension);
0:       if(null == parsedValue || parsedValue.equals(nullFormat)) {
0:         row.update(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY, index);
1:       } else {
0:         row.update(dictionaryGenerator.getOrGenerateKey(parsedValue), index);
1:       }
1:   public void fillColumnCardinality(List<Integer> cardinality) {
1:     cardinality.add(dictionaryGenerator.size());
commit:d96f09a
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.newflow.converter.impl;
1: 
0: import org.apache.carbondata.common.logging.LogService;
0: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.cache.Cache;
0: import org.apache.carbondata.core.cache.dictionary.Dictionary;
0: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
1: import org.apache.carbondata.core.devapi.BiDictionary;
1: import org.apache.carbondata.core.devapi.DictionaryGenerationException;
0: import org.apache.carbondata.core.util.CarbonUtilException;
0: import org.apache.carbondata.processing.newflow.DataField;
0: import org.apache.carbondata.processing.newflow.dictionary.PreCreatedDictionary;
0: import org.apache.carbondata.processing.newflow.exception.CarbonDataLoadingException;
0: import org.apache.carbondata.processing.newflow.row.CarbonRow;
1: 
1: public class DictionaryFieldConverterImpl extends AbstractDictionaryFieldConverterImpl {
1: 
0:   private static final LogService LOGGER =
0:       LogServiceFactory.getLogService(DictionaryFieldConverterImpl.class.getName());
1: 
0:   private BiDictionary<Integer, String> dictionaryGenerator;
1: 
1:   private int index;
1: 
0:   public DictionaryFieldConverterImpl(DataField dataField,
0:       Cache<DictionaryColumnUniqueIdentifier, Dictionary> cache,
0:       CarbonTableIdentifier carbonTableIdentifier, int index) {
1:     this.index = index;
0:     DictionaryColumnUniqueIdentifier identifier =
0:         new DictionaryColumnUniqueIdentifier(carbonTableIdentifier,
0:             dataField.getColumn().getColumnIdentifier(), dataField.getColumn().getDataType());
0:     try {
0:       Dictionary dictionary = cache.get(identifier);
0:       dictionaryGenerator = new PreCreatedDictionary(dictionary);
0:     } catch (CarbonUtilException e) {
0:       LOGGER.error(e);
0:       throw new RuntimeException(e);
1:     }
1:   }
1: 
1:   @Override
0:   public void convert(CarbonRow row) throws CarbonDataLoadingException {
0:     try {
0:       row.update(dictionaryGenerator.getOrGenerateKey(row.getString(index)), index);
1:     } catch (DictionaryGenerationException e) {
0:       throw new CarbonDataLoadingException(e);
1:     }
1:   }
1: 
1:   @Override
0:   public int getColumnCardinality() {
0:     return dictionaryGenerator.size();
1:   }
1: }
author:QiangCai
-------------------------------------------------------------------------------
commit:256dbed
/////////////////////////////////////////////////////////////////////////
0:       if (null == parsedValue || parsedValue.equals(nullFormat)) {
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
============================================================================