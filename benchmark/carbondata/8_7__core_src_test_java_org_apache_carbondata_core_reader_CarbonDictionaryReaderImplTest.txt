1:104412e: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:104412e:  *
1:104412e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:104412e:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:104412e:  */
2:104412e: 
1:104412e: package org.apache.carbondata.core.reader;
1:104412e: 
1:104412e: import java.io.IOException;
1:104412e: import java.nio.ByteBuffer;
1:104412e: import java.util.ArrayList;
1:104412e: import java.util.List;
1:104412e: import java.util.UUID;
1:104412e: 
1:d3a09e2: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1:1155d4d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1:2fe7758: import org.apache.carbondata.core.service.CarbonCommonFactory;
1:104412e: 
1:104412e: import mockit.Mock;
1:104412e: import mockit.MockUp;
1:104412e: import org.apache.thrift.TBase;
1:104412e: import org.junit.BeforeClass;
1:104412e: import org.junit.Test;
1:104412e: 
1:104412e: import static org.junit.Assert.assertTrue;
1:104412e: 
1:104412e: public class CarbonDictionaryReaderImplTest {
1:1155d4d:   private static AbsoluteTableIdentifier absoluteTableIdentifier = null;
1:104412e:   private static ColumnIdentifier columnIdentifier = null;
1:104412e: 
1:104412e:   private static CarbonDictionaryReaderImpl carbonDictionaryReaderImpl = null;
1:104412e: 
1:104412e:   @BeforeClass public static void setUp() throws Exception {
1:104412e:     columnIdentifier = new ColumnIdentifier("1", null, null);
1:1155d4d:     absoluteTableIdentifier =
1:2fe7758:         AbsoluteTableIdentifier.from("tablePath",
1:1155d4d:             new CarbonTableIdentifier("dbName", "tableName", UUID.randomUUID().toString()));
1:d3a09e2:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:1155d4d:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
1:29dc302:             columnIdentifier.getDataType());
1:104412e:     carbonDictionaryReaderImpl =
1:1155d4d:         new CarbonDictionaryReaderImpl(dictionaryColumnUniqueIdentifier);
2:104412e:   }
1:104412e: 
1:104412e:   @Test public void testRead() throws Exception {
1:104412e:     new MockUp<CarbonDictionaryMetadataReaderImpl>() {
1:104412e:       @Mock public List<CarbonDictionaryColumnMetaChunk> read() throws IOException {
1:104412e:         CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunks =
1:104412e:             new CarbonDictionaryColumnMetaChunk(1, 8, 60L, 120L, 20);
1:104412e:         List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunksList =
1:104412e:             new ArrayList<CarbonDictionaryColumnMetaChunk>();
1:104412e:         carbonDictionaryColumnMetaChunksList.add(carbonDictionaryColumnMetaChunks);
1:104412e:         return carbonDictionaryColumnMetaChunksList;
1:104412e:       }
1:104412e: 
2:104412e:     };
1:104412e: 
1:104412e:     new MockUp<ThriftReader>() {
1:104412e:       @Mock public void setReadOffset(long bytesToSkip) throws IOException {
1:104412e: 
1:104412e:       }
1:104412e: 
1:104412e:     };
1:104412e:     new MockUp<ThriftReader>() {
1:104412e:       @Mock public void open() throws IOException {
1:104412e:       }
1:104412e: 
1:104412e:     };
1:104412e:     new MockUp<ThriftReader>() {
1:104412e:       @Mock public boolean hasNext() throws IOException {
1:104412e:         return true;
1:104412e:       }
1:104412e: 
1:104412e:     };
1:104412e:     new MockUp<CarbonDictionaryColumnMetaChunk>() {
1:104412e:       @Mock public long getStart_offset() {
1:104412e:         return 0L;
1:104412e:       }
1:104412e:     };
1:104412e:     new MockUp<ThriftReader>() {
1:104412e:       @Mock public TBase read() throws IOException {
1:104412e:         List<ByteBuffer> byteBufferList = new ArrayList<ByteBuffer>();
1:104412e:         ByteBuffer buf = ByteBuffer.allocate(2);
1:104412e:         byteBufferList.add(buf);
1:104412e:         return new org.apache.carbondata.format.ColumnDictionaryChunk(byteBufferList);
1:104412e: 
1:104412e:       }
1:104412e: 
1:104412e:     };
1:104412e:     int expectedResult = 20;
1:104412e:     int actualResult = carbonDictionaryReaderImpl.read().size();
1:104412e:     assertTrue(actualResult == expectedResult);
1:104412e: 
1:104412e:   }
1:104412e: 
1:104412e: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:bf6c471
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:2fe7758
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.service.CarbonCommonFactory;
0: import org.apache.carbondata.core.service.impl.PathFactory;
/////////////////////////////////////////////////////////////////////////
1:         AbsoluteTableIdentifier.from("tablePath",
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:manishgupta88
-------------------------------------------------------------------------------
commit:29dc302
/////////////////////////////////////////////////////////////////////////
1:             columnIdentifier.getDataType());
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
1:   private static AbsoluteTableIdentifier absoluteTableIdentifier = null;
1:     absoluteTableIdentifier =
0:         new AbsoluteTableIdentifier("storePath",
1:             new CarbonTableIdentifier("dbName", "tableName", UUID.randomUUID().toString()));
1:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
0:         CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier));
1:         new CarbonDictionaryReaderImpl(dictionaryColumnUniqueIdentifier);
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
/////////////////////////////////////////////////////////////////////////
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
0:         new DictionaryColumnUniqueIdentifier(carbonTableIdentifier, columnIdentifier,
0:             columnIdentifier.getDataType(),
0:         CarbonStorePath.getCarbonTablePath("storePath", carbonTableIdentifier));
0:         new CarbonDictionaryReaderImpl("storePath", carbonTableIdentifier, dictionaryColumnUniqueIdentifier);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.service.impl.PathFactory;
0: import org.apache.carbondata.core.service.CarbonCommonFactory;
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.metadata.ColumnIdentifier;
author:anubhav100
-------------------------------------------------------------------------------
commit:104412e
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.reader;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.UUID;
1: 
0: import org.apache.carbondata.common.ext.PathFactory;
0: import org.apache.carbondata.common.factory.CarbonCommonFactory;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.reader.CarbonDictionaryColumnMetaChunk;
0: import org.apache.carbondata.core.reader.CarbonDictionaryMetadataReaderImpl;
0: import org.apache.carbondata.core.reader.CarbonDictionaryReaderImpl;
0: import org.apache.carbondata.core.reader.ThriftReader;
0: import org.apache.carbondata.core.service.PathService;
1: 
1: import mockit.Mock;
1: import mockit.MockUp;
1: import org.apache.thrift.TBase;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: public class CarbonDictionaryReaderImplTest {
0:   private static CarbonTableIdentifier carbonTableIdentifier = null;
1:   private static ColumnIdentifier columnIdentifier = null;
1: 
1:   private static CarbonDictionaryReaderImpl carbonDictionaryReaderImpl = null;
1: 
1:   @BeforeClass public static void setUp() throws Exception {
1:     columnIdentifier = new ColumnIdentifier("1", null, null);
0:     carbonTableIdentifier =
0:         new CarbonTableIdentifier("dbName", "tableName", UUID.randomUUID().toString());
1:     carbonDictionaryReaderImpl =
0:         new CarbonDictionaryReaderImpl("storePath", carbonTableIdentifier, columnIdentifier);
1:   }
1: 
1:   @Test public void testRead() throws Exception {
0:     new MockUp<CarbonCommonFactory>() {
0:       @Mock public PathService getPathService() {
1: 
0:         return new PathFactory();
1:       }
1:     };
1:     new MockUp<CarbonDictionaryMetadataReaderImpl>() {
1:       @Mock public List<CarbonDictionaryColumnMetaChunk> read() throws IOException {
1:         CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunks =
1:             new CarbonDictionaryColumnMetaChunk(1, 8, 60L, 120L, 20);
1:         List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunksList =
1:             new ArrayList<CarbonDictionaryColumnMetaChunk>();
1:         carbonDictionaryColumnMetaChunksList.add(carbonDictionaryColumnMetaChunks);
1:         return carbonDictionaryColumnMetaChunksList;
1:       }
1: 
1:     };
1: 
1:     new MockUp<ThriftReader>() {
1:       @Mock public void setReadOffset(long bytesToSkip) throws IOException {
1: 
1:       }
1: 
1:     };
1:     new MockUp<ThriftReader>() {
1:       @Mock public void open() throws IOException {
1:       }
1: 
1:     };
1:     new MockUp<ThriftReader>() {
1:       @Mock public boolean hasNext() throws IOException {
1:         return true;
1:       }
1: 
1:     };
1:     new MockUp<CarbonDictionaryColumnMetaChunk>() {
1:       @Mock public long getStart_offset() {
1:         return 0L;
1:       }
1:     };
1:     new MockUp<ThriftReader>() {
1:       @Mock public TBase read() throws IOException {
1:         List<ByteBuffer> byteBufferList = new ArrayList<ByteBuffer>();
1:         ByteBuffer buf = ByteBuffer.allocate(2);
1:         byteBufferList.add(buf);
1:         return new org.apache.carbondata.format.ColumnDictionaryChunk(byteBufferList);
1: 
1:       }
1: 
1:     };
1:     int expectedResult = 20;
1:     int actualResult = carbonDictionaryReaderImpl.read().size();
1:     assertTrue(actualResult == expectedResult);
1: 
1:   }
1: 
1: }
============================================================================