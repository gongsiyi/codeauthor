1:9fba684: /*
1:9fba684:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9fba684:  * contributor license agreements.  See the NOTICE file distributed with
1:9fba684:  * this work for additional information regarding copyright ownership.
1:9fba684:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9fba684:  * (the "License"); you may not use this file except in compliance with
1:9fba684:  * the License.  You may obtain a copy of the License at
1:9fba684:  *
1:9fba684:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9fba684:  *
1:9fba684:  * Unless required by applicable law or agreed to in writing, software
1:9fba684:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9fba684:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9fba684:  * See the License for the specific language governing permissions and
1:9fba684:  * limitations under the License.
1:9fba684:  */
1:9fba684: package org.apache.carbondata.core.datamap.status;
1:9fba684: 
1:9fba684: import java.io.IOException;
1:9fba684: import java.util.List;
1:9fba684: 
1:9fba684: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:9fba684: 
1:9fba684: /**
1:9fba684:  * It updates the datamap status to the storage. It will have 2 implementations one will be disk
1:9fba684:  * based and another would be DB based
1:9fba684:  *
1:9fba684:  * @version 1.4
1:9fba684:  */
1:9fba684: public interface DataMapStatusStorageProvider {
1:9fba684: 
1:9fba684:   /**
1:9fba684:    * It reads and returns all datamap status details from storage.
1:9fba684:    *
1:9fba684:    * @return DataMapStatusDetail[] all datamap status details
1:9fba684:    * @throws IOException
1:9fba684:    */
1:9fba684:   DataMapStatusDetail[] getDataMapStatusDetails() throws IOException;
1:9fba684: 
1:9fba684:   /**
1:9fba684:    * Update the status of the given datamaps to the passed datamap status.
1:9fba684:    *
1:9fba684:    * @param dataMapSchemas schemas of which are need to be updated in datamap status
1:9fba684:    * @param dataMapStatus  status to be updated for the datamap schemas
1:9fba684:    * @throws IOException
1:9fba684:    */
1:9fba684:   void updateDataMapStatus(List<DataMapSchema> dataMapSchemas, DataMapStatus dataMapStatus)
1:9fba684:       throws IOException;
1:9fba684: 
1:9fba684: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:9fba684
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datamap.status;
1: 
1: import java.io.IOException;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1: 
1: /**
1:  * It updates the datamap status to the storage. It will have 2 implementations one will be disk
1:  * based and another would be DB based
1:  *
1:  * @version 1.4
1:  */
1: public interface DataMapStatusStorageProvider {
1: 
1:   /**
1:    * It reads and returns all datamap status details from storage.
1:    *
1:    * @return DataMapStatusDetail[] all datamap status details
1:    * @throws IOException
1:    */
1:   DataMapStatusDetail[] getDataMapStatusDetails() throws IOException;
1: 
1:   /**
1:    * Update the status of the given datamaps to the passed datamap status.
1:    *
1:    * @param dataMapSchemas schemas of which are need to be updated in datamap status
1:    * @param dataMapStatus  status to be updated for the datamap schemas
1:    * @throws IOException
1:    */
1:   void updateDataMapStatus(List<DataMapSchema> dataMapSchemas, DataMapStatus dataMapStatus)
1:       throws IOException;
1: 
1: }
============================================================================