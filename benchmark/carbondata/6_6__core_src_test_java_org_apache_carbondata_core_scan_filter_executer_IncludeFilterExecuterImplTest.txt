1:bedaa59: /*
1:bedaa59:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bedaa59:  * contributor license agreements.  See the NOTICE file distributed with
1:bedaa59:  * this work for additional information regarding copyright ownership.
1:bedaa59:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bedaa59:  * (the "License"); you may not use this file except in compliance with
1:bedaa59:  * the License.  You may obtain a copy of the License at
1:bedaa59:  *
1:bedaa59:  *    http://www.apache.org/licenses/LICENSE-2.0
1:bedaa59:  *
1:bedaa59:  * Unless required by applicable law or agreed to in writing, software
1:bedaa59:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bedaa59:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bedaa59:  * See the License for the specific language governing permissions and
1:bedaa59:  * limitations under the License.
1:bedaa59:  */
1:bedaa59: package org.apache.carbondata.core.scan.filter.executer;
8:bedaa59: 
1:bedaa59: import java.util.BitSet;
1:bedaa59: 
1:daa6465: import org.apache.carbondata.core.datastore.chunk.DimensionColumnPage;
1:daa6465: import org.apache.carbondata.core.datastore.chunk.impl.FixedLengthDimensionColumnPage;
1:bedaa59: import org.apache.carbondata.core.util.CarbonUtil;
1:29be1d0: 
1:29be1d0: import org.junit.Assert;
1:bedaa59: import org.junit.Before;
1:bedaa59: import org.junit.Test;
1:bedaa59: 
1:bedaa59: import junit.framework.TestCase;
1:bedaa59: 
1:bedaa59: public class IncludeFilterExecuterImplTest extends TestCase {
1:bedaa59: 
1:bedaa59:   /**
1:bedaa59:    * @throws Exception
1:bedaa59:    */
1:bedaa59:   @Before
1:bedaa59:   public void setUp() throws Exception {
1:bedaa59: 
7:bedaa59:   }
1:bedaa59: 
1:daa6465:   public BitSet setFilterdIndexToBitSetNew(DimensionColumnPage dimensionColumnPage,
2:bedaa59:       int numerOfRows, byte[][] filterValues) {
2:bedaa59:     BitSet bitSet = new BitSet(numerOfRows);
1:daa6465:     if (dimensionColumnPage instanceof FixedLengthDimensionColumnPage) {
2:bedaa59:       // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
1:399e968:       if (filterValues.length > 1) {
1:399e968:         for (int i = 0; i < numerOfRows; i++) {
1:bedaa59:           int index = CarbonUtil.binarySearch(filterValues, 0, filterValues.length - 1,
1:4935cb1:               dimensionColumnPage, i);
1:bedaa59:           if (index >= 0) {
1:bedaa59:             bitSet.set(i);
1:399e968:           }
1:bedaa59:         }
1:399e968:       } else if (filterValues.length == 1) {
1:399e968:         for (int i = 0; i < numerOfRows; i++) {
1:daa6465:           if (dimensionColumnPage.compareTo(i, filterValues[0]) == 0) {
1:bedaa59:             bitSet.set(i);
1:bedaa59:           }
1:bedaa59:         }
1:bedaa59:       }
1:bedaa59:     }
2:bedaa59:     return bitSet;
1:bedaa59:   }
1:bedaa59: 
1:daa6465:   public BitSet setFilterdIndexToBitSet(DimensionColumnPage dimensionColumnPage, int numerOfRows,
1:bedaa59:       byte[][] filterValues) {
1:bedaa59:     BitSet bitSet = new BitSet(numerOfRows);
1:daa6465:     if (dimensionColumnPage instanceof FixedLengthDimensionColumnPage) {
1:bedaa59:       // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
1:bedaa59:       for (int k = 0; k < filterValues.length; k++) {
1:bedaa59:         for (int j = 0; j < numerOfRows; j++) {
1:daa6465:           if (dimensionColumnPage.compareTo(j, filterValues[k]) == 0) {
2:bedaa59:             bitSet.set(j);
1:bedaa59:           }
1:bedaa59:         }
1:bedaa59:       }
1:bedaa59:     }
1:bedaa59:     return bitSet;
1:bedaa59:   }
1:bedaa59: 
1:bedaa59:   /**
1:399e968:    * change int to byte[]
1:bedaa59:    * 
1:399e968:    * @param value
1:399e968:    * @param size
1:bedaa59:    * @return byte[]
1:bedaa59:    */
1:399e968:   private byte[] transferIntToByteArr(int value, int size) {
1:399e968:     byte[] targets = new byte[size];
1:399e968:     for (int i = 0; i < size; i++) {
1:399e968:       int data = value;
1:399e968:       for (int j = i; j < size - 1; j++) {
1:399e968:         data = data >> 8;
1:399e968:       }
1:399e968:       data = data & 0xFF;
1:399e968:       targets[i] = (byte) (data & 0xFF);
1:399e968:     }
1:bedaa59:     return targets;
1:bedaa59:   }
1:bedaa59: 
1:bedaa59:   @Test
1:bedaa59:   public void testPerformance() {
1:bedaa59: 
1:a5e3643:     // dimension's data number in a blocklet, usually default is 32000
1:a5e3643:     int dataChunkSize = 32000; 
1:399e968:     //  repeat query times in the test
1:399e968:     int queryTimes = 5;    
1:399e968:     // repeated times for a dictionary value
1:399e968:     int repeatTimes = 200;
1:399e968:     //filtered value count in a blocklet
1:399e968:     int filteredValueCnt = 800;
1:399e968:     comparePerformance(dataChunkSize, filteredValueCnt, queryTimes, repeatTimes);
1:399e968:     
1:399e968:     filteredValueCnt = 100;
1:399e968:     // set big repeat value for test dimension dictionary size is 1
1:399e968:     repeatTimes = 2000;
1:399e968:     comparePerformance(dataChunkSize, filteredValueCnt, queryTimes, repeatTimes);
1:399e968: 
1:399e968:   }
1:399e968:   
1:399e968:   /**
1:399e968:    * Tests the filterKeys.length = 0  and filterKeys.length = 1
1:399e968:    */
1:399e968:   @Test
1:399e968:   public void testBoundary() {
1:399e968: 
1:a5e3643: 	// dimension's data number in a blocklet, usually default is 32000
1:a5e3643:     int dataChunkSize = 32000; 
1:399e968:     //  repeat query times in the test
1:399e968:     int queryTimes = 5;    
1:399e968:     // repeated times for a dictionary value
1:399e968:     int repeatTimes = 20;
1:399e968:     //filtered value count in a blocklet
1:399e968:     int filteredValueCnt = 1;
1:399e968:     comparePerformance(dataChunkSize, filteredValueCnt, queryTimes, repeatTimes);
1:399e968:     
1:399e968:     filteredValueCnt = 0;
1:399e968:     comparePerformance(dataChunkSize, filteredValueCnt, queryTimes, repeatTimes);
1:399e968: 
1:399e968:   }
1:399e968: 
1:399e968:   /**
1:399e968:    * comapre result and performance
1:399e968:    * 
1:399e968:    * @param dataChunkSize dataChunk's stored data size
1:399e968:    * @param filteredValueCnt filtered dictionary value count
1:399e968:    * @param queryTimes repeat query times in the test
1:399e968:    * @param repeatTimes repeated times for a dictionary value
1:399e968:    * @return 
1:399e968:    */
1:399e968:   private void comparePerformance(int dataChunkSize, int filteredValueCnt,
1:399e968:       int queryTimes, int repeatTimes) {
1:399e968:     long start;
1:bedaa59:     long oldTime = 0;
1:bedaa59:     long newTime = 0;
1:399e968:     
1:399e968:     // used to generate filter value
1:399e968:     int baseFilteredValue = 100;
1:399e968:     // column dictionary size
1:399e968:     int dimColumnSize = 2;
1:399e968:     if ((dataChunkSize / repeatTimes) <= 255 && (baseFilteredValue+filteredValueCnt) <= 255) {
1:399e968:       dimColumnSize = 1;
1:399e968:     }
1:399e968:     System.out.println("dimColumnSize: " + dimColumnSize);
1:399e968:     
1:daa6465:     FixedLengthDimensionColumnPage dimensionColumnDataChunk;
1:bedaa59:     DimColumnExecuterFilterInfo dim = new DimColumnExecuterFilterInfo();
1:bedaa59: 
1:399e968:     byte[] dataChunk = new byte[dataChunkSize * dimColumnSize];
1:399e968:     for (int i = 0; i < dataChunkSize; i++) {
1:399e968:       if (i % repeatTimes == 0) {
1:399e968:         repeatTimes++;
1:bedaa59:       }
1:399e968:       byte[] data = transferIntToByteArr(repeatTimes, dimColumnSize);      
1:399e968:       for(int j =0 ; j< dimColumnSize;j++){      
1:399e968:         dataChunk[dimColumnSize * i + j] = data[j];
1:399e968:       }
1:bedaa59:     }
1:bedaa59: 
1:399e968:     byte[][] filterKeys = new byte[filteredValueCnt][2];
1:399e968:     for (int k = 0; k < filteredValueCnt; k++) {
1:399e968:       filterKeys[k] = transferIntToByteArr(baseFilteredValue + k, dimColumnSize);
1:bedaa59:     }
1:bedaa59:     dim.setFilterKeys(filterKeys);
1:bedaa59: 
1:daa6465:     dimensionColumnDataChunk = new FixedLengthDimensionColumnPage(dataChunk, null, null,
1:399e968:         dataChunkSize, dimColumnSize);
1:bedaa59: 
1:399e968:     // repeat query and compare 2 result between old code and new optimized code
1:399e968:     for (int j = 0; j < queryTimes; j++) {
1:bedaa59: 
1:bedaa59:       start = System.currentTimeMillis();
1:399e968:       BitSet bitOld = this.setFilterdIndexToBitSet(dimensionColumnDataChunk, dataChunkSize, filterKeys);
1:bedaa59:       oldTime = oldTime + System.currentTimeMillis() - start;
1:bedaa59: 
1:bedaa59:       start = System.currentTimeMillis();
1:f911403:       BitSet bitNew = this.setFilterdIndexToBitSetNew(dimensionColumnDataChunk, dataChunkSize,
1:bedaa59:           filterKeys);
1:bedaa59:       newTime = newTime + System.currentTimeMillis() - start;
1:bedaa59: 
1:bedaa59:       assertTrue(bitOld.equals(bitNew));
1:bedaa59:     }
1:bedaa59: 
1:399e968:     if (filteredValueCnt >= 100) {
1:29be1d0:       Assert.assertTrue(newTime <= oldTime);
1:399e968:     }
1:bedaa59: 
1:399e968:     System.out.println("old code performance time: " + oldTime + " ms");
1:399e968:     System.out.println("new code performance time: " + newTime + " ms");
1:4c48148:     System.out.println("filteredValueCnt: " + filteredValueCnt);
1:bedaa59: 
1:bedaa59:   }
1:bedaa59: 
1:bedaa59: 
1:daa6465:   private BitSet setFilterdIndexToBitSetWithColumnIndexOld(FixedLengthDimensionColumnPage dimensionColumnDataChunk,
1:bedaa59:       int numerOfRows, byte[][] filterValues) {
1:bedaa59:     BitSet bitSet = new BitSet(numerOfRows);
2:bedaa59:     int start = 0;
2:bedaa59:     int last = 0;
2:bedaa59:     int startIndex = 0;
1:bedaa59:     // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
2:bedaa59:     for (int i = 0; i < filterValues.length; i++) {
2:bedaa59:       start = CarbonUtil.getFirstIndexUsingBinarySearch(dimensionColumnDataChunk, startIndex, numerOfRows - 1,
2:bedaa59:           filterValues[i], false);
2:bedaa59:       if (start < 0) {
2:bedaa59:         continue;
1:bedaa59:       }
2:bedaa59:       bitSet.set(start);
2:bedaa59:       last = start;
2:bedaa59:       for (int j = start + 1; j < numerOfRows; j++) {
2:bedaa59:         if (dimensionColumnDataChunk.compareTo(j, filterValues[i]) == 0) {
1:bedaa59:           bitSet.set(j);
2:bedaa59:           last++;
3:bedaa59:         } else {
4:bedaa59:           break;
1:bedaa59:         }
1:bedaa59:       }
2:bedaa59:       startIndex = last;
2:bedaa59:       if (startIndex >= numerOfRows) {
1:bedaa59:         break;
1:bedaa59:       }
1:bedaa59:     }
1:bedaa59:     return bitSet;
1:bedaa59:   }
1:bedaa59: 
1:daa6465:   private BitSet setFilterdIndexToBitSetWithColumnIndexNew(FixedLengthDimensionColumnPage dimensionColumnDataChunk,
1:bedaa59:       int numerOfRows, byte[][] filterValues) {
1:bedaa59:     BitSet bitSet = new BitSet(numerOfRows);
1:bedaa59:     int startIndex = 0;
1:bedaa59:     // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
1:bedaa59:     for (int i = 0; i < filterValues.length; i++) {
1:bedaa59:       int[] rangeIndex = CarbonUtil.getRangeIndexUsingBinarySearch(dimensionColumnDataChunk, startIndex,
1:bedaa59:           numerOfRows - 1, filterValues[i]);
1:bedaa59:       for (int j = rangeIndex[0]; j <= rangeIndex[1]; j++) {
1:bedaa59: 
1:bedaa59:         bitSet.set(j);
1:bedaa59:       }
1:bedaa59: 
1:bedaa59:       if (rangeIndex[1] > -1) {
1:bedaa59:         startIndex = rangeIndex[1];
1:bedaa59:       }
1:bedaa59:     }
1:bedaa59:     return bitSet;
1:bedaa59:   }
1:bedaa59: 
1:bedaa59:   @Test
1:bedaa59:   public void testRangBinarySearch() {
1:bedaa59: 
1:bedaa59:     long oldTime = 0;
1:bedaa59:     long newTime = 0;
2:bedaa59:     long start;
1:bedaa59:     long end;
1:399e968:     
1:a5e3643:     // dimension's data number in a blocklet, usually default is 32000
1:a5e3643:     int dataChunkSize = 32000; 
1:399e968:     //  repeat query times in the test
1:399e968:     int queryTimes = 10000;    
1:399e968:     // repeated times for a dictionary value
1:399e968:     int repeatTimes = 200;
1:399e968:     //filtered value count in a blocklet
1:399e968:     int filteredValueCnt = 800;
1:399e968:     // column dictionary size
1:399e968:     int dimColumnSize = 2;
1:daa6465:     FixedLengthDimensionColumnPage dimensionColumnDataChunk;
1:bedaa59:     DimColumnExecuterFilterInfo dim = new DimColumnExecuterFilterInfo();
1:bedaa59: 
1:399e968:     byte[] dataChunk = new byte[dataChunkSize * dimColumnSize];
1:399e968:     for (int i = 0; i < dataChunkSize; i++) {
1:bedaa59: 
1:399e968:       if (i % repeatTimes == 0) {
1:399e968:         repeatTimes++;
1:bedaa59:       }
1:bedaa59: 
1:399e968:       byte[] data = transferIntToByteArr(repeatTimes, dimColumnSize);
2:bedaa59:       dataChunk[2 * i] = data[0];
2:bedaa59:       dataChunk[2 * i + 1] = data[1];
1:bedaa59: 
1:bedaa59:     }
1:bedaa59: 
1:399e968:     byte[][] filterKeys = new byte[filteredValueCnt][2];
1:399e968:     for (int k = 0; k < filteredValueCnt; k++) {
1:399e968:       filterKeys[k] = transferIntToByteArr(100 + k, dimColumnSize);
1:bedaa59:     }
1:bedaa59:     dim.setFilterKeys(filterKeys);
1:bedaa59: 
1:daa6465:     dimensionColumnDataChunk = new FixedLengthDimensionColumnPage(dataChunk, null, null,
1:399e968:         dataChunk.length / dimColumnSize, dimColumnSize);
1:bedaa59: 
1:bedaa59:     // initial to run
1:399e968:     BitSet bitOld = this.setFilterdIndexToBitSetWithColumnIndexOld(dimensionColumnDataChunk, dataChunkSize, filterKeys);
1:399e968:     BitSet bitNew = this.setFilterdIndexToBitSetWithColumnIndexNew(dimensionColumnDataChunk, dataChunkSize, filterKeys);
1:bedaa59: 
1:bedaa59:     // performance run
1:399e968:     for (int j = 0; j < queryTimes; j++) {
1:bedaa59: 
1:bedaa59:       start = System.currentTimeMillis();
1:399e968:       bitOld = this.setFilterdIndexToBitSetWithColumnIndexOld(dimensionColumnDataChunk, dataChunkSize, filterKeys);
1:bedaa59:       end = System.currentTimeMillis();
1:bedaa59:       oldTime = oldTime + end - start;
1:bedaa59: 
1:bedaa59:       start = System.currentTimeMillis();
1:399e968:       bitNew = this.setFilterdIndexToBitSetWithColumnIndexNew(dimensionColumnDataChunk, dataChunkSize, filterKeys);
1:bedaa59:       end = System.currentTimeMillis();
1:bedaa59:       newTime = newTime + end - start;
1:bedaa59: 
1:bedaa59:       assertTrue(bitOld.equals(bitNew));
1:bedaa59: 
1:bedaa59:     }
1:bedaa59: 
1:399e968:     System.out.println("old code performance time: " + oldTime + " ms");
1:399e968:     System.out.println("new code performance time: " + newTime + " ms");
1:bedaa59: 
1:bedaa59:   }
1:bedaa59: 
1:bedaa59: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:       BitSet bitNew = this.setFilterdIndexToBitSetNew(dimensionColumnDataChunk, dataChunkSize,
author:akashrn5
-------------------------------------------------------------------------------
commit:4935cb1
/////////////////////////////////////////////////////////////////////////
1:               dimensionColumnPage, i);
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.chunk.DimensionColumnPage;
1: import org.apache.carbondata.core.datastore.chunk.impl.FixedLengthDimensionColumnPage;
/////////////////////////////////////////////////////////////////////////
1:   public BitSet setFilterdIndexToBitSetNew(DimensionColumnPage dimensionColumnPage,
1:     if (dimensionColumnPage instanceof FixedLengthDimensionColumnPage) {
0:               dimensionColumnPage.getChunkData(i));
1:           if (dimensionColumnPage.compareTo(i, filterValues[0]) == 0) {
/////////////////////////////////////////////////////////////////////////
1:   public BitSet setFilterdIndexToBitSet(DimensionColumnPage dimensionColumnPage, int numerOfRows,
1:     if (dimensionColumnPage instanceof FixedLengthDimensionColumnPage) {
1:           if (dimensionColumnPage.compareTo(j, filterValues[k]) == 0) {
/////////////////////////////////////////////////////////////////////////
1:     FixedLengthDimensionColumnPage dimensionColumnDataChunk;
/////////////////////////////////////////////////////////////////////////
1:     dimensionColumnDataChunk = new FixedLengthDimensionColumnPage(dataChunk, null, null,
/////////////////////////////////////////////////////////////////////////
0:       BitSet bitNew = this.setFilterdIndexToBitSetNew((FixedLengthDimensionColumnPage) dimensionColumnDataChunk, dataChunkSize,
/////////////////////////////////////////////////////////////////////////
1:   private BitSet setFilterdIndexToBitSetWithColumnIndexOld(FixedLengthDimensionColumnPage dimensionColumnDataChunk,
/////////////////////////////////////////////////////////////////////////
1:   private BitSet setFilterdIndexToBitSetWithColumnIndexNew(FixedLengthDimensionColumnPage dimensionColumnDataChunk,
/////////////////////////////////////////////////////////////////////////
1:     FixedLengthDimensionColumnPage dimensionColumnDataChunk;
/////////////////////////////////////////////////////////////////////////
1:     dimensionColumnDataChunk = new FixedLengthDimensionColumnPage(dataChunk, null, null,
author:xuchuanyin
-------------------------------------------------------------------------------
commit:29be1d0
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1:       Assert.assertTrue(newTime <= oldTime);
author:sounakr
-------------------------------------------------------------------------------
commit:4c48148
/////////////////////////////////////////////////////////////////////////
0:       assert(newTime <= oldTime);
1:     System.out.println("filteredValueCnt: " + filteredValueCnt);
author:mayun
-------------------------------------------------------------------------------
commit:a5e3643
/////////////////////////////////////////////////////////////////////////
0:   public BitSet setFilterdIndexToBitSetNew(DimensionColumnDataChunk dimensionColumnDataChunk,
/////////////////////////////////////////////////////////////////////////
0:   public BitSet setFilterdIndexToBitSet(DimensionColumnDataChunk dimensionColumnDataChunk, int numerOfRows,
/////////////////////////////////////////////////////////////////////////
1:     // dimension's data number in a blocklet, usually default is 32000
1:     int dataChunkSize = 32000; 
/////////////////////////////////////////////////////////////////////////
1: 	// dimension's data number in a blocklet, usually default is 32000
1:     int dataChunkSize = 32000; 
/////////////////////////////////////////////////////////////////////////
1:     // dimension's data number in a blocklet, usually default is 32000
1:     int dataChunkSize = 32000; 
commit:399e968
/////////////////////////////////////////////////////////////////////////
1:       if (filterValues.length > 1) {
1:         for (int i = 0; i < numerOfRows; i++) {
1:         }
1:       } else if (filterValues.length == 1) {
1:         for (int i = 0; i < numerOfRows; i++) {
/////////////////////////////////////////////////////////////////////////
1:    * change int to byte[]
1:    * @param value
1:    * @param size
1:   private byte[] transferIntToByteArr(int value, int size) {
1:     byte[] targets = new byte[size];
1:     for (int i = 0; i < size; i++) {
1:       int data = value;
1:       for (int j = i; j < size - 1; j++) {
1:         data = data >> 8;
1:       }
1:       data = data & 0xFF;
1:       targets[i] = (byte) (data & 0xFF);
1:     }
0:     // dimension's data number in a blocklet, usually default is 120000
0:     int dataChunkSize = 120000; 
1:     //  repeat query times in the test
1:     int queryTimes = 5;    
1:     // repeated times for a dictionary value
1:     int repeatTimes = 200;
1:     //filtered value count in a blocklet
1:     int filteredValueCnt = 800;
1:     comparePerformance(dataChunkSize, filteredValueCnt, queryTimes, repeatTimes);
1:     
1:     filteredValueCnt = 100;
1:     // set big repeat value for test dimension dictionary size is 1
1:     repeatTimes = 2000;
1:     comparePerformance(dataChunkSize, filteredValueCnt, queryTimes, repeatTimes);
1: 
1:   }
1:   
1:   /**
1:    * Tests the filterKeys.length = 0  and filterKeys.length = 1
1:    */
1:   @Test
1:   public void testBoundary() {
1: 
0: 	// dimension's data number in a blocklet, usually default is 120000
0:     int dataChunkSize = 120000; 
1:     //  repeat query times in the test
1:     int queryTimes = 5;    
1:     // repeated times for a dictionary value
1:     int repeatTimes = 20;
1:     //filtered value count in a blocklet
1:     int filteredValueCnt = 1;
1:     comparePerformance(dataChunkSize, filteredValueCnt, queryTimes, repeatTimes);
1:     
1:     filteredValueCnt = 0;
1:     comparePerformance(dataChunkSize, filteredValueCnt, queryTimes, repeatTimes);
1: 
1:   }
1: 
1:   /**
1:    * comapre result and performance
1:    * 
1:    * @param dataChunkSize dataChunk's stored data size
1:    * @param filteredValueCnt filtered dictionary value count
1:    * @param queryTimes repeat query times in the test
1:    * @param repeatTimes repeated times for a dictionary value
1:    * @return 
1:    */
1:   private void comparePerformance(int dataChunkSize, int filteredValueCnt,
1:       int queryTimes, int repeatTimes) {
1:     long start;
1:     
1:     // used to generate filter value
1:     int baseFilteredValue = 100;
1:     // column dictionary size
1:     int dimColumnSize = 2;
1:     if ((dataChunkSize / repeatTimes) <= 255 && (baseFilteredValue+filteredValueCnt) <= 255) {
1:       dimColumnSize = 1;
1:     }
1:     System.out.println("dimColumnSize: " + dimColumnSize);
1:     
1:     byte[] dataChunk = new byte[dataChunkSize * dimColumnSize];
1:     for (int i = 0; i < dataChunkSize; i++) {
1:       if (i % repeatTimes == 0) {
1:         repeatTimes++;
1:       byte[] data = transferIntToByteArr(repeatTimes, dimColumnSize);      
1:       for(int j =0 ; j< dimColumnSize;j++){      
1:         dataChunk[dimColumnSize * i + j] = data[j];
1:       }
1:     byte[][] filterKeys = new byte[filteredValueCnt][2];
1:     for (int k = 0; k < filteredValueCnt; k++) {
1:       filterKeys[k] = transferIntToByteArr(baseFilteredValue + k, dimColumnSize);
1:         dataChunkSize, dimColumnSize);
1:     // repeat query and compare 2 result between old code and new optimized code
1:     for (int j = 0; j < queryTimes; j++) {
1:       BitSet bitOld = this.setFilterdIndexToBitSet(dimensionColumnDataChunk, dataChunkSize, filterKeys);
0:       BitSet bitNew = this.setFilterdIndexToBitSetNew((FixedLengthDimensionDataChunk) dimensionColumnDataChunk, dataChunkSize,
1:     if (filteredValueCnt >= 100) {
0:       assertTrue(newTime < oldTime);
1:     }
1:     System.out.println("old code performance time: " + oldTime + " ms");
1:     System.out.println("new code performance time: " + newTime + " ms");
/////////////////////////////////////////////////////////////////////////
1:     
0:     // dimension's data number in a blocklet, usually default is 120000
0:     int dataChunkSize = 120000; 
1:     //  repeat query times in the test
1:     int queryTimes = 10000;    
1:     // repeated times for a dictionary value
1:     int repeatTimes = 200;
1:     //filtered value count in a blocklet
1:     int filteredValueCnt = 800;
1:     // column dictionary size
1:     int dimColumnSize = 2;
1:     byte[] dataChunk = new byte[dataChunkSize * dimColumnSize];
1:     for (int i = 0; i < dataChunkSize; i++) {
1:       if (i % repeatTimes == 0) {
1:         repeatTimes++;
1:       byte[] data = transferIntToByteArr(repeatTimes, dimColumnSize);
1:     byte[][] filterKeys = new byte[filteredValueCnt][2];
1:     for (int k = 0; k < filteredValueCnt; k++) {
1:       filterKeys[k] = transferIntToByteArr(100 + k, dimColumnSize);
1:         dataChunk.length / dimColumnSize, dimColumnSize);
1:     BitSet bitOld = this.setFilterdIndexToBitSetWithColumnIndexOld(dimensionColumnDataChunk, dataChunkSize, filterKeys);
1:     BitSet bitNew = this.setFilterdIndexToBitSetWithColumnIndexNew(dimensionColumnDataChunk, dataChunkSize, filterKeys);
1:     for (int j = 0; j < queryTimes; j++) {
1:       bitOld = this.setFilterdIndexToBitSetWithColumnIndexOld(dimensionColumnDataChunk, dataChunkSize, filterKeys);
1:       bitNew = this.setFilterdIndexToBitSetWithColumnIndexNew(dimensionColumnDataChunk, dataChunkSize, filterKeys);
/////////////////////////////////////////////////////////////////////////
1:     System.out.println("old code performance time: " + oldTime + " ms");
1:     System.out.println("new code performance time: " + newTime + " ms");
commit:bedaa59
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.filter.executer;
1: 
1: import java.util.BitSet;
1: 
0: import org.apache.carbondata.core.datastore.chunk.DimensionColumnDataChunk;
0: import org.apache.carbondata.core.datastore.chunk.impl.FixedLengthDimensionDataChunk;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import junit.framework.TestCase;
1: 
1: public class IncludeFilterExecuterImplTest extends TestCase {
1: 
1:   /**
1:    * @throws Exception
1:    */
1:   @Before
1:   public void setUp() throws Exception {
1: 
1:   }
1: 
0:   private BitSet setFilterdIndexToBitSetNew(DimensionColumnDataChunk dimensionColumnDataChunk,
1:       int numerOfRows, byte[][] filterValues) {
1:     BitSet bitSet = new BitSet(numerOfRows);
0:     if (dimensionColumnDataChunk instanceof FixedLengthDimensionDataChunk) {
1:       // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
0:       for (int i = 0; i < numerOfRows; i++) {
1: 
0:         if (filterValues.length > 1) {
1:           int index = CarbonUtil.binarySearch(filterValues, 0, filterValues.length - 1,
0:               dimensionColumnDataChunk.getChunkData(i));
1: 
1:           if (index >= 0) {
1:             bitSet.set(i);
1:           }
0:         } else if (filterValues.length == 1) {
0:           if (dimensionColumnDataChunk.compareTo(i, filterValues[0]) == 0) {
1:             bitSet.set(i);
1:           }
1:         } else {
1:           break;
1:         }
1: 
1:       }
1:     }
1:     return bitSet;
1:   }
1: 
0:   private BitSet setFilterdIndexToBitSet(DimensionColumnDataChunk dimensionColumnDataChunk, int numerOfRows,
1:       byte[][] filterValues) {
1:     BitSet bitSet = new BitSet(numerOfRows);
0:     if (dimensionColumnDataChunk instanceof FixedLengthDimensionDataChunk) {
1:       // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
1:       for (int k = 0; k < filterValues.length; k++) {
1:         for (int j = 0; j < numerOfRows; j++) {
0:           if (dimensionColumnDataChunk.compareTo(j, filterValues[k]) == 0) {
1:             bitSet.set(j);
1:           }
1:         }
1:       }
1:     }
1:     return bitSet;
1:   }
1: 
1:   /**
0:    * short int to byte
1:    * 
0:    * @param s
0:    *          short int
1:    * @return byte[]
1:    */
0:   private byte[] unsignedShortToByte2(int s) {
0:     byte[] targets = new byte[2];
0:     targets[0] = (byte) (s >> 8 & 0xFF);
0:     targets[1] = (byte) (s & 0xFF);
1:     return targets;
1:   }
1: 
1:   @Test
1:   public void testPerformance() {
1: 
1:     long oldTime = 0;
1:     long newTime = 0;
1:     long start;
0:     int dataCnt = 120000;
0:     int filterCnt = 800;
0:     int queryCnt = 5;
0:     int repeatCnt = 20;
0:     byte[] keyWord = new byte[2];
0:     FixedLengthDimensionDataChunk dimensionColumnDataChunk;
1:     DimColumnExecuterFilterInfo dim = new DimColumnExecuterFilterInfo();
1: 
0:     byte[] dataChunk = new byte[dataCnt * keyWord.length];
0:     for (int i = 0; i < dataCnt; i++) {
1: 
0:       if (i % repeatCnt == 0) {
0:         repeatCnt++;
1:       }
1: 
0:       byte[] data = unsignedShortToByte2(repeatCnt);
1:       dataChunk[2 * i] = data[0];
1:       dataChunk[2 * i + 1] = data[1];
1: 
1:     }
1: 
0:     byte[][] filterKeys = new byte[filterCnt][2];
0:     for (int ii = 0; ii < filterCnt; ii++) {
0:       filterKeys[ii] = unsignedShortToByte2(100 + ii);
1:     }
1:     dim.setFilterKeys(filterKeys);
1: 
0:     dimensionColumnDataChunk = new FixedLengthDimensionDataChunk(dataChunk, null, null,
0:         dataChunk.length / keyWord.length, keyWord.length);
1: 
0:     for (int j = 0; j < queryCnt; j++) {
1: 
1:       start = System.currentTimeMillis();
0:       BitSet bitOld = this.setFilterdIndexToBitSet(dimensionColumnDataChunk, dataCnt, filterKeys);
1:       oldTime = oldTime + System.currentTimeMillis() - start;
1: 
1:       start = System.currentTimeMillis();
0:       BitSet bitNew = this.setFilterdIndexToBitSetNew((FixedLengthDimensionDataChunk) dimensionColumnDataChunk, dataCnt,
1:           filterKeys);
1:       newTime = newTime + System.currentTimeMillis() - start;
1: 
1:       assertTrue(bitOld.equals(bitNew));
1: 
1:     }
1: 
0:     assertTrue(newTime < oldTime);
1: 
0:     System.out.println("old code performance time: " + oldTime);
0:     System.out.println("new code performance time: " + newTime);
1: 
1:   }
1: 
0:   private BitSet setFilterdIndexToBitSetWithColumnIndex(FixedLengthDimensionDataChunk dimensionColumnDataChunk,
1:       int numerOfRows, byte[][] filterValues) {
1:     BitSet bitSet = new BitSet(numerOfRows);
1:     int start = 0;
1:     int last = 0;
1:     int startIndex = 0;
1:     // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
1:     for (int i = 0; i < filterValues.length; i++) {
1:       start = CarbonUtil.getFirstIndexUsingBinarySearch(dimensionColumnDataChunk, startIndex, numerOfRows - 1,
1:           filterValues[i], false);
1:       if (start < 0) {
1:         continue;
1:       }
1:       bitSet.set(start);
1:       last = start;
1:       for (int j = start + 1; j < numerOfRows; j++) {
1:         if (dimensionColumnDataChunk.compareTo(j, filterValues[i]) == 0) {
1:           bitSet.set(j);
1:           last++;
1:         } else {
1:           break;
1:         }
1:       }
1:       startIndex = last;
1:       if (startIndex >= numerOfRows) {
1:         break;
1:       }
1:     }
1:     return bitSet;
1:   }
1: 
0:   private BitSet setFilterdIndexToBitSetWithColumnIndexOld(FixedLengthDimensionDataChunk dimensionColumnDataChunk,
1:       int numerOfRows, byte[][] filterValues) {
1:     BitSet bitSet = new BitSet(numerOfRows);
1:     int start = 0;
1:     int last = 0;
1:     int startIndex = 0;
1:     // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
1:     for (int i = 0; i < filterValues.length; i++) {
1:       start = CarbonUtil.getFirstIndexUsingBinarySearch(dimensionColumnDataChunk, startIndex, numerOfRows - 1,
1:           filterValues[i], false);
1:       if (start < 0) {
1:         continue;
1:       }
1:       bitSet.set(start);
1:       last = start;
1:       for (int j = start + 1; j < numerOfRows; j++) {
1:         if (dimensionColumnDataChunk.compareTo(j, filterValues[i]) == 0) {
1:           bitSet.set(j);
1:           last++;
1:         } else {
1:           break;
1:         }
1:       }
1:       startIndex = last;
1:       if (startIndex >= numerOfRows) {
1:         break;
1:       }
1:     }
1:     return bitSet;
1:   }
1: 
0:   private BitSet setFilterdIndexToBitSetWithColumnIndexNew(FixedLengthDimensionDataChunk dimensionColumnDataChunk,
1:       int numerOfRows, byte[][] filterValues) {
1:     BitSet bitSet = new BitSet(numerOfRows);
1:     int startIndex = 0;
1:     // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
1:     for (int i = 0; i < filterValues.length; i++) {
1:       int[] rangeIndex = CarbonUtil.getRangeIndexUsingBinarySearch(dimensionColumnDataChunk, startIndex,
1:           numerOfRows - 1, filterValues[i]);
1:       for (int j = rangeIndex[0]; j <= rangeIndex[1]; j++) {
1: 
1:         bitSet.set(j);
1:       }
1: 
1:       if (rangeIndex[1] > -1) {
1:         startIndex = rangeIndex[1];
1:       }
1:     }
1:     return bitSet;
1:   }
1: 
1:   @Test
1:   public void testRangBinarySearch() {
1: 
1:     long oldTime = 0;
1:     long newTime = 0;
1:     long start;
1:     long end;
0:     int dataCnt = 120000;
0:     int filterCnt = 800;
0:     int queryCnt = 10000;
0:     int repeatCnt = 200;
0:     byte[] keyWord = new byte[2];
0:     FixedLengthDimensionDataChunk dimensionColumnDataChunk;
1:     DimColumnExecuterFilterInfo dim = new DimColumnExecuterFilterInfo();
1: 
0:     byte[] dataChunk = new byte[dataCnt * keyWord.length];
0:     for (int i = 0; i < dataCnt; i++) {
1: 
0:       if (i % repeatCnt == 0) {
0:         repeatCnt++;
1:       }
1: 
0:       byte[] data = unsignedShortToByte2(repeatCnt);
1:       dataChunk[2 * i] = data[0];
1:       dataChunk[2 * i + 1] = data[1];
1: 
1:     }
1: 
0:     byte[][] filterKeys = new byte[filterCnt][2];
0:     for (int ii = 0; ii < filterCnt; ii++) {
0:       filterKeys[ii] = unsignedShortToByte2(100 + ii);
1:     }
1:     dim.setFilterKeys(filterKeys);
1: 
0:     dimensionColumnDataChunk = new FixedLengthDimensionDataChunk(dataChunk, null, null,
0:         dataChunk.length / keyWord.length, keyWord.length);
1: 
1:     // initial to run
0:     BitSet bitOld = this.setFilterdIndexToBitSetWithColumnIndexOld(dimensionColumnDataChunk, dataCnt, filterKeys);
0:     BitSet bitNew = this.setFilterdIndexToBitSetWithColumnIndexNew(dimensionColumnDataChunk, dataCnt, filterKeys);
1: 
1:     // performance run
0:     for (int j = 0; j < queryCnt; j++) {
1: 
1:       start = System.currentTimeMillis();
0:       bitOld = this.setFilterdIndexToBitSetWithColumnIndexOld(dimensionColumnDataChunk, dataCnt, filterKeys);
1:       end = System.currentTimeMillis();
1:       oldTime = oldTime + end - start;
1: 
1:       start = System.currentTimeMillis();
0:       bitNew = this.setFilterdIndexToBitSetWithColumnIndexNew(dimensionColumnDataChunk, dataCnt, filterKeys);
1:       end = System.currentTimeMillis();
1:       newTime = newTime + end - start;
1: 
1:       assertTrue(bitOld.equals(bitNew));
1: 
1:     }
1: 
0:     System.out.println("old code performance time: " + oldTime);
0:     System.out.println("new code performance time: " + newTime);
1: 
1:   }
1: 
1: }
============================================================================