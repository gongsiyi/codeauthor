1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
3:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.reader;
1:cd6a4ff: 
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: import java.util.ArrayList;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: 
1:d3a09e2: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:cd6a4ff: import org.apache.carbondata.format.ColumnDictionaryChunkMeta;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.thrift.TBase;
1:cd6a4ff: 
3:cd6a4ff: /**
1:cd6a4ff:  * This class perform the functionality of reading the dictionary metadata file
1:cd6a4ff:  */
1:cd6a4ff: public class CarbonDictionaryMetadataReaderImpl implements CarbonDictionaryMetadataReader {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * column identifier
1:cd6a4ff:    */
1:d3a09e2:   protected DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * dictionary metadata file path
1:cd6a4ff:    */
1:cd6a4ff:   protected String columnDictionaryMetadataFilePath;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * dictionary metadata thrift file reader
1:cd6a4ff:    */
1:cd6a4ff:   private ThriftReader dictionaryMetadataFileReader;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Constructor
1:cd6a4ff:    *
1:1155d4d:    * @param dictionaryColumnUniqueIdentifier column unique identifier
1:cd6a4ff:    */
1:1155d4d:   public CarbonDictionaryMetadataReaderImpl(
1:d3a09e2:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:d3a09e2:     this.dictionaryColumnUniqueIdentifier = dictionaryColumnUniqueIdentifier;
1:cd6a4ff:     initFileLocation();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will be used to read complete metadata file.
1:cd6a4ff:    * Applicable scenarios:
1:cd6a4ff:    * 1. Query execution. Whenever a query is executed then to read the dictionary file
1:cd6a4ff:    * and define the query scope first dictionary metadata has to be read first.
1:cd6a4ff:    * 2. If dictionary file is read using start and end offset then using this meta list
1:cd6a4ff:    * we can count the total number of dictionary chunks present between the 2 offsets
1:cd6a4ff:    *
1:cd6a4ff:    * @return list of all dictionary meta chunks which contains information for each segment
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   @Override public List<CarbonDictionaryColumnMetaChunk> read() throws IOException {
1:cd6a4ff:     List<CarbonDictionaryColumnMetaChunk> dictionaryMetaChunks =
1:cd6a4ff:         new ArrayList<CarbonDictionaryColumnMetaChunk>(
1:cd6a4ff:             CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:cd6a4ff:     CarbonDictionaryColumnMetaChunk columnMetaChunk = null;
1:cd6a4ff:     ColumnDictionaryChunkMeta dictionaryChunkMeta = null;
1:cd6a4ff:     // open dictionary meta thrift reader
1:cd6a4ff:     openThriftReader();
1:cd6a4ff:     // read till dictionary chunk count
1:cd6a4ff:     while (dictionaryMetadataFileReader.hasNext()) {
1:cd6a4ff:       // get the thrift object for dictionary chunk
1:cd6a4ff:       dictionaryChunkMeta = (ColumnDictionaryChunkMeta) dictionaryMetadataFileReader.read();
1:cd6a4ff:       // create a new instance of chunk meta wrapper using thrift object
1:cd6a4ff:       columnMetaChunk = getNewInstanceOfCarbonDictionaryColumnMetaChunk(dictionaryChunkMeta);
1:cd6a4ff:       dictionaryMetaChunks.add(columnMetaChunk);
1:cd6a4ff:     }
1:cd6a4ff:     return dictionaryMetaChunks;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will be used to read only the last entry of dictionary meta chunk.
1:cd6a4ff:    * Applicable scenarios :
1:cd6a4ff:    * 1. Global dictionary generation for incremental load. In this case only the
1:cd6a4ff:    * last dictionary chunk meta entry has to be read to calculate min, max surrogate
1:cd6a4ff:    * key and start and end offset for the new dictionary chunk.
1:cd6a4ff:    * 2. Truncate operation. While writing dictionary file in case of incremental load
1:cd6a4ff:    * dictionary file needs to be validated for any inconsistency. Here end offset of last
1:cd6a4ff:    * dictionary chunk meta is validated with file size.
1:cd6a4ff:    *
1:cd6a4ff:    * @return last segment entry for dictionary chunk
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   @Override public CarbonDictionaryColumnMetaChunk readLastEntryOfDictionaryMetaChunk()
1:cd6a4ff:       throws IOException {
1:cd6a4ff:     ColumnDictionaryChunkMeta dictionaryChunkMeta = null;
1:cd6a4ff:     // open dictionary meta thrift reader
1:cd6a4ff:     openThriftReader();
1:cd6a4ff:     // at the completion of while loop we will get the last dictionary chunk entry
1:cd6a4ff:     while (dictionaryMetadataFileReader.hasNext()) {
1:cd6a4ff:       // get the thrift object for dictionary chunk
1:cd6a4ff:       dictionaryChunkMeta = (ColumnDictionaryChunkMeta) dictionaryMetadataFileReader.read();
1:cd6a4ff:     }
1:7ef9164:     if (null == dictionaryChunkMeta) {
1:7ef9164:       throw new IOException("Last dictionary chunk does not exist");
1:7ef9164:     }
1:cd6a4ff:     // create a new instance of chunk meta wrapper using thrift object
1:81149f6:     return getNewInstanceOfCarbonDictionaryColumnMetaChunk(dictionaryChunkMeta);
1:cd6a4ff:   }
1:cd6a4ff: 
1:377dee9:   @Override public CarbonDictionaryColumnMetaChunk readEntryOfDictionaryMetaChunk(long end_Offset)
1:377dee9:           throws IOException {
1:377dee9:     ColumnDictionaryChunkMeta dictionaryChunkMeta = null;
1:377dee9:     // open dictionary meta thrift reader
1:377dee9:     openThriftReader();
1:377dee9:     // at the completion of while loop we will get the last dictionary chunk entry
1:377dee9:     while (dictionaryMetadataFileReader.hasNext()) {
1:377dee9:       // get the thrift object for dictionary chunk
1:377dee9:       dictionaryChunkMeta = (ColumnDictionaryChunkMeta) dictionaryMetadataFileReader.read();
1:377dee9:       if (dictionaryChunkMeta.end_offset >= end_Offset) {
1:377dee9:         break;
1:377dee9:       }
1:377dee9:     }
1:7ef9164:     if (null == dictionaryChunkMeta) {
1:7ef9164:       throw new IOException("Matching dictionary chunk does not exist");
1:7ef9164:     }
1:377dee9:     // create a new instance of chunk meta wrapper using thrift object
1:377dee9:     return getNewInstanceOfCarbonDictionaryColumnMetaChunk(dictionaryChunkMeta);
1:377dee9:   }
1:377dee9: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Closes this stream and releases any system resources associated
1:cd6a4ff:    * with it. If the stream is already closed then invoking this
1:cd6a4ff:    * method has no effect.
1:cd6a4ff:    *
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void close() throws IOException {
1:cd6a4ff:     if (null != dictionaryMetadataFileReader) {
1:cd6a4ff:       dictionaryMetadataFileReader.close();
1:cd6a4ff:       dictionaryMetadataFileReader = null;
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will form the path for dictionary metadata file for a given column
1:cd6a4ff:    */
1:cd6a4ff:   protected void initFileLocation() {
1:29dc302:     this.columnDictionaryMetadataFilePath =
1:29dc302:         dictionaryColumnUniqueIdentifier.getDictionaryMetaFilePath();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will open the dictionary file stream for reading
1:cd6a4ff:    *
1:cd6a4ff:    * @throws IOException thrift reader open method throws IOException
1:cd6a4ff:    */
1:cd6a4ff:   private void openThriftReader() throws IOException {
1:cd6a4ff:     // initialise dictionary file reader which will return dictionary thrift object
1:cd6a4ff:     // dictionary thrift object contains a list of byte buffer
1:cd6a4ff:     if (null == dictionaryMetadataFileReader) {
1:cd6a4ff:       dictionaryMetadataFileReader =
1:cd6a4ff:           new ThriftReader(this.columnDictionaryMetadataFilePath, new ThriftReader.TBaseCreator() {
1:cd6a4ff:             @Override public TBase create() {
1:cd6a4ff:               return new ColumnDictionaryChunkMeta();
1:cd6a4ff:             }
1:cd6a4ff:           });
1:cd6a4ff:       // Open it
1:cd6a4ff:       dictionaryMetadataFileReader.open();
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Given a thrift object thie method will create a new wrapper class object
1:cd6a4ff:    * for dictionary chunk
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryChunkMeta reference for chunk meta thrift object
1:cd6a4ff:    * @return wrapper object of dictionary chunk meta
1:cd6a4ff:    */
1:cd6a4ff:   private CarbonDictionaryColumnMetaChunk getNewInstanceOfCarbonDictionaryColumnMetaChunk(
1:cd6a4ff:       ColumnDictionaryChunkMeta dictionaryChunkMeta) {
1:81149f6:     return new CarbonDictionaryColumnMetaChunk(dictionaryChunkMeta.getMin_surrogate_key(),
1:81149f6:         dictionaryChunkMeta.getMax_surrogate_key(), dictionaryChunkMeta.getStart_offset(),
1:81149f6:         dictionaryChunkMeta.getEnd_offset(), dictionaryChunkMeta.getChunk_count());
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:     if (null == dictionaryChunkMeta) {
1:       throw new IOException("Last dictionary chunk does not exist");
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (null == dictionaryChunkMeta) {
1:       throw new IOException("Matching dictionary chunk does not exist");
1:     }
commit:377dee9
/////////////////////////////////////////////////////////////////////////
1:   @Override public CarbonDictionaryColumnMetaChunk readEntryOfDictionaryMetaChunk(long end_Offset)
1:           throws IOException {
1:     ColumnDictionaryChunkMeta dictionaryChunkMeta = null;
1:     // open dictionary meta thrift reader
1:     openThriftReader();
1:     // at the completion of while loop we will get the last dictionary chunk entry
1:     while (dictionaryMetadataFileReader.hasNext()) {
1:       // get the thrift object for dictionary chunk
1:       dictionaryChunkMeta = (ColumnDictionaryChunkMeta) dictionaryMetadataFileReader.read();
1:       if (dictionaryChunkMeta.end_offset >= end_Offset) {
1:         break;
1:       }
1:     }
1:     // create a new instance of chunk meta wrapper using thrift object
1:     return getNewInstanceOfCarbonDictionaryColumnMetaChunk(dictionaryChunkMeta);
1:   }
1: 
author:manishgupta88
-------------------------------------------------------------------------------
commit:29dc302
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     this.columnDictionaryMetadataFilePath =
1:         dictionaryColumnUniqueIdentifier.getDictionaryMetaFilePath();
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:    * @param dictionaryColumnUniqueIdentifier column unique identifier
1:   public CarbonDictionaryMetadataReaderImpl(
/////////////////////////////////////////////////////////////////////////
0:         .getCarbonTablePath(dictionaryColumnUniqueIdentifier.getAbsoluteCarbonTableIdentifier(),
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
1:   protected DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
0:    * @param dictionaryColumnUniqueIdentifier      column unique identifier
0:       CarbonTableIdentifier carbonTableIdentifier,
1:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:     this.dictionaryColumnUniqueIdentifier = dictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
0:     CarbonTablePath carbonTablePath = pathService
0:         .getCarbonTablePath(this.storePath, carbonTableIdentifier,
0:             dictionaryColumnUniqueIdentifier);
0:     this.columnDictionaryMetadataFilePath = carbonTablePath.getDictionaryMetaFilePath(
0:         dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());
author:QiangCai
-------------------------------------------------------------------------------
commit:81149f6
/////////////////////////////////////////////////////////////////////////
1:     return getNewInstanceOfCarbonDictionaryColumnMetaChunk(dictionaryChunkMeta);
/////////////////////////////////////////////////////////////////////////
1:     return new CarbonDictionaryColumnMetaChunk(dictionaryChunkMeta.getMin_surrogate_key(),
1:         dictionaryChunkMeta.getMax_surrogate_key(), dictionaryChunkMeta.getStart_offset(),
1:         dictionaryChunkMeta.getEnd_offset(), dictionaryChunkMeta.getChunk_count());
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
0: import org.apache.carbondata.core.metadata.ColumnIdentifier;
0: import org.apache.carbondata.core.service.CarbonCommonFactory;
0: import org.apache.carbondata.core.util.path.CarbonTablePath;
author:hexiaoqiao
-------------------------------------------------------------------------------
commit:a65ca7c
/////////////////////////////////////////////////////////////////////////
0:    * carbon dictionary meta data store path
0:   protected String storePath;
/////////////////////////////////////////////////////////////////////////
0:    * @param storePath             carbon dictionary meta data store path
0:   public CarbonDictionaryMetadataReaderImpl(String storePath,
0:     this.storePath = storePath;
/////////////////////////////////////////////////////////////////////////
0:         pathService.getCarbonTablePath(this.storePath, carbonTableIdentifier);
commit:77c90b8
/////////////////////////////////////////////////////////////////////////
0:         pathService.getCarbonTablePath(this.hdfsStorePath, carbonTableIdentifier);
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.reader;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.apache.carbondata.common.factory.CarbonCommonFactory;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.carbon.path.CarbonTablePath;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.service.PathService;
1: import org.apache.carbondata.format.ColumnDictionaryChunkMeta;
1: 
1: import org.apache.thrift.TBase;
1: 
1: /**
1:  * This class perform the functionality of reading the dictionary metadata file
1:  */
1: public class CarbonDictionaryMetadataReaderImpl implements CarbonDictionaryMetadataReader {
1: 
1:   /**
0:    * carbon table identifier
1:    */
0:   protected CarbonTableIdentifier carbonTableIdentifier;
1: 
1:   /**
0:    * HDFS store path
1:    */
0:   protected String hdfsStorePath;
1: 
1:   /**
1:    * column identifier
1:    */
0:   protected ColumnIdentifier columnIdentifier;
1: 
1:   /**
1:    * dictionary metadata file path
1:    */
1:   protected String columnDictionaryMetadataFilePath;
1: 
1:   /**
1:    * dictionary metadata thrift file reader
1:    */
1:   private ThriftReader dictionaryMetadataFileReader;
1: 
1:   /**
1:    * Constructor
1:    *
0:    * @param hdfsStorePath         HDFS store path
0:    * @param carbonTableIdentifier table identifier which will give table name and database name
0:    * @param columnIdentifier      column unique identifier
1:    */
0:   public CarbonDictionaryMetadataReaderImpl(String hdfsStorePath,
0:       CarbonTableIdentifier carbonTableIdentifier, ColumnIdentifier columnIdentifier) {
0:     this.hdfsStorePath = hdfsStorePath;
0:     this.carbonTableIdentifier = carbonTableIdentifier;
0:     this.columnIdentifier = columnIdentifier;
1:     initFileLocation();
1:   }
1: 
1:   /**
1:    * This method will be used to read complete metadata file.
1:    * Applicable scenarios:
1:    * 1. Query execution. Whenever a query is executed then to read the dictionary file
1:    * and define the query scope first dictionary metadata has to be read first.
1:    * 2. If dictionary file is read using start and end offset then using this meta list
1:    * we can count the total number of dictionary chunks present between the 2 offsets
1:    *
1:    * @return list of all dictionary meta chunks which contains information for each segment
1:    * @throws IOException if an I/O error occurs
1:    */
1:   @Override public List<CarbonDictionaryColumnMetaChunk> read() throws IOException {
1:     List<CarbonDictionaryColumnMetaChunk> dictionaryMetaChunks =
1:         new ArrayList<CarbonDictionaryColumnMetaChunk>(
1:             CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:     CarbonDictionaryColumnMetaChunk columnMetaChunk = null;
1:     ColumnDictionaryChunkMeta dictionaryChunkMeta = null;
1:     // open dictionary meta thrift reader
1:     openThriftReader();
1:     // read till dictionary chunk count
1:     while (dictionaryMetadataFileReader.hasNext()) {
1:       // get the thrift object for dictionary chunk
1:       dictionaryChunkMeta = (ColumnDictionaryChunkMeta) dictionaryMetadataFileReader.read();
1:       // create a new instance of chunk meta wrapper using thrift object
1:       columnMetaChunk = getNewInstanceOfCarbonDictionaryColumnMetaChunk(dictionaryChunkMeta);
1:       dictionaryMetaChunks.add(columnMetaChunk);
1:     }
1:     return dictionaryMetaChunks;
1:   }
1: 
1:   /**
1:    * This method will be used to read only the last entry of dictionary meta chunk.
1:    * Applicable scenarios :
1:    * 1. Global dictionary generation for incremental load. In this case only the
1:    * last dictionary chunk meta entry has to be read to calculate min, max surrogate
1:    * key and start and end offset for the new dictionary chunk.
1:    * 2. Truncate operation. While writing dictionary file in case of incremental load
1:    * dictionary file needs to be validated for any inconsistency. Here end offset of last
1:    * dictionary chunk meta is validated with file size.
1:    *
1:    * @return last segment entry for dictionary chunk
1:    * @throws IOException if an I/O error occurs
1:    */
1:   @Override public CarbonDictionaryColumnMetaChunk readLastEntryOfDictionaryMetaChunk()
1:       throws IOException {
1:     ColumnDictionaryChunkMeta dictionaryChunkMeta = null;
1:     // open dictionary meta thrift reader
1:     openThriftReader();
1:     // at the completion of while loop we will get the last dictionary chunk entry
1:     while (dictionaryMetadataFileReader.hasNext()) {
1:       // get the thrift object for dictionary chunk
1:       dictionaryChunkMeta = (ColumnDictionaryChunkMeta) dictionaryMetadataFileReader.read();
1:     }
1:     // create a new instance of chunk meta wrapper using thrift object
0:     CarbonDictionaryColumnMetaChunk columnMetaChunkForLastSegment =
0:         getNewInstanceOfCarbonDictionaryColumnMetaChunk(dictionaryChunkMeta);
0:     return columnMetaChunkForLastSegment;
1:   }
1: 
1:   /**
1:    * Closes this stream and releases any system resources associated
1:    * with it. If the stream is already closed then invoking this
1:    * method has no effect.
1:    *
1:    * @throws IOException if an I/O error occurs
1:    */
1:   @Override public void close() throws IOException {
1:     if (null != dictionaryMetadataFileReader) {
1:       dictionaryMetadataFileReader.close();
1:       dictionaryMetadataFileReader = null;
1:     }
1:   }
1: 
1:   /**
1:    * This method will form the path for dictionary metadata file for a given column
1:    */
1:   protected void initFileLocation() {
0:     PathService pathService = CarbonCommonFactory.getPathService();
0:     CarbonTablePath carbonTablePath =
0:         pathService.getCarbonTablePath(columnIdentifier, this.hdfsStorePath, carbonTableIdentifier);
0:     this.columnDictionaryMetadataFilePath =
0:         carbonTablePath.getDictionaryMetaFilePath(columnIdentifier.getColumnId());
1:   }
1: 
1:   /**
1:    * This method will open the dictionary file stream for reading
1:    *
1:    * @throws IOException thrift reader open method throws IOException
1:    */
1:   private void openThriftReader() throws IOException {
1:     // initialise dictionary file reader which will return dictionary thrift object
1:     // dictionary thrift object contains a list of byte buffer
1:     if (null == dictionaryMetadataFileReader) {
1:       dictionaryMetadataFileReader =
1:           new ThriftReader(this.columnDictionaryMetadataFilePath, new ThriftReader.TBaseCreator() {
1:             @Override public TBase create() {
1:               return new ColumnDictionaryChunkMeta();
1:             }
1:           });
1:       // Open it
1:       dictionaryMetadataFileReader.open();
1:     }
1: 
1:   }
1: 
1:   /**
1:    * Given a thrift object thie method will create a new wrapper class object
1:    * for dictionary chunk
1:    *
1:    * @param dictionaryChunkMeta reference for chunk meta thrift object
1:    * @return wrapper object of dictionary chunk meta
1:    */
1:   private CarbonDictionaryColumnMetaChunk getNewInstanceOfCarbonDictionaryColumnMetaChunk(
1:       ColumnDictionaryChunkMeta dictionaryChunkMeta) {
0:     CarbonDictionaryColumnMetaChunk columnMetaChunk =
0:         new CarbonDictionaryColumnMetaChunk(dictionaryChunkMeta.getMin_surrogate_key(),
0:             dictionaryChunkMeta.getMax_surrogate_key(), dictionaryChunkMeta.getStart_offset(),
0:             dictionaryChunkMeta.getEnd_offset(), dictionaryChunkMeta.getChunk_count());
0:     return columnMetaChunk;
1:   }
1: }
============================================================================