1:a700f83: /*
1:a700f83:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a700f83:  * contributor license agreements.  See the NOTICE file distributed with
1:a700f83:  * this work for additional information regarding copyright ownership.
1:a700f83:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a700f83:  * (the "License"); you may not use this file except in compliance with
1:a700f83:  * the License.  You may obtain a copy of the License at
1:a700f83:  *
1:a700f83:  *    http://www.apache.org/licenses/LICENSE-2.0
1:a700f83:  *
1:a700f83:  * Unless required by applicable law or agreed to in writing, software
1:a700f83:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a700f83:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a700f83:  * See the License for the specific language governing permissions and
1:a700f83:  * limitations under the License.
1:a700f83:  */
1:a700f83: package org.apache.carbondata.hive;
3:a700f83: 
1:a700f83: import java.util.ArrayList;
1:a700f83: import java.util.Arrays;
1:a700f83: import java.util.List;
1:a700f83: 
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.SettableListObjectInspector;
1:a700f83: import org.apache.hadoop.io.ArrayWritable;
1:a700f83: import org.apache.hadoop.io.Writable;
1:a700f83: 
1:a700f83: /**
1:a700f83:  * The CarbonHiveArrayInspector will inspect an ArrayWritable, considering it as an Hive array.
1:a700f83:  * It can also inspect a List if Hive decides to inspect the result of an inspection.
1:a700f83:  */
1:d408a8d: class CarbonArrayInspector implements SettableListObjectInspector {
1:a700f83: 
1:d408a8d:   private final ObjectInspector arrayElementInspector;
1:a700f83: 
1:d408a8d:   CarbonArrayInspector(final ObjectInspector arrayElementInspector) {
1:a700f83:     this.arrayElementInspector = arrayElementInspector;
2:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public String getTypeName() {
1:a700f83:     return "array<" + arrayElementInspector.getTypeName() + ">";
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public Category getCategory() {
1:a700f83:     return Category.LIST;
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public ObjectInspector getListElementObjectInspector() {
1:a700f83:     return arrayElementInspector;
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public Object getListElement(final Object data, final int index) {
1:a700f83:     if (data == null) {
1:a700f83:       return null;
1:a700f83:     }
1:a700f83: 
1:a700f83:     if (data instanceof ArrayWritable) {
1:a700f83:       final Writable[] listContainer = ((ArrayWritable) data).get();
1:a700f83: 
1:a700f83:       if (listContainer == null || listContainer.length == 0) {
1:a700f83:         return null;
1:a700f83:       }
1:a700f83: 
1:a700f83:       final Writable subObj = listContainer[0];
1:a700f83: 
1:a700f83:       if (subObj == null) {
1:a700f83:         return null;
1:a700f83:       }
1:a700f83: 
1:a700f83:       if (index >= 0 && index < ((ArrayWritable) subObj).get().length) {
1:a700f83:         return ((ArrayWritable) subObj).get()[index];
1:a700f83:       } else {
1:a700f83:         return null;
1:a700f83:       }
1:a700f83:     }
1:a700f83: 
1:d408a8d:     throw new UnsupportedOperationException("Cannot inspect " + data.getClass().getCanonicalName());
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public int getListLength(final Object data) {
1:a700f83:     if (data == null) {
1:a700f83:       return -1;
1:a700f83:     }
1:a700f83: 
1:a700f83:     if (data instanceof ArrayWritable) {
1:a700f83:       final Writable[] listContainer = ((ArrayWritable) data).get();
1:a700f83: 
1:a700f83:       if (listContainer == null || listContainer.length == 0) {
1:a700f83:         return -1;
1:a700f83:       }
1:a700f83: 
1:a700f83:       final Writable subObj = listContainer[0];
1:a700f83: 
1:a700f83:       if (subObj == null) {
1:a700f83:         return 0;
1:a700f83:       }
1:a700f83: 
1:a700f83:       return ((ArrayWritable) subObj).get().length;
1:a700f83:     }
1:a700f83: 
1:d408a8d:     throw new UnsupportedOperationException("Cannot inspect " + data.getClass().getCanonicalName());
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public List<?> getList(final Object data) {
1:a700f83:     if (data == null) {
1:a700f83:       return null;
1:a700f83:     }
1:a700f83: 
1:a700f83:     if (data instanceof ArrayWritable) {
1:a700f83:       final Writable[] listContainer = ((ArrayWritable) data).get();
1:a700f83: 
1:a700f83:       if (listContainer == null || listContainer.length == 0) {
1:a700f83:         return null;
1:a700f83:       }
1:a700f83: 
1:a700f83:       final Writable subObj = listContainer[0];
1:a700f83: 
1:a700f83:       if (subObj == null) {
1:a700f83:         return null;
1:a700f83:       }
1:a700f83: 
1:a700f83:       final Writable[] array = ((ArrayWritable) subObj).get();
1:910d496:       return Arrays.asList(array);
1:a700f83:     }
1:a700f83: 
1:d408a8d:     throw new UnsupportedOperationException("Cannot inspect " + data.getClass().getCanonicalName());
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public Object create(final int size) {
1:a700f83:     final List<Object> result = Arrays.asList(new Object[size]);
1:a700f83:     for (int i = 0; i < size; ++i) {
1:a700f83:       result.add(null);
1:a700f83:     }
1:a700f83:     return result;
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public Object set(final Object list, final int index, final Object element) {
1:a700f83:     final ArrayList<Object> l = (ArrayList<Object>) list;
1:a700f83:     l.set(index, element);
2:a700f83:     return list;
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public Object resize(final Object list, final int newSize) {
1:a700f83:     final ArrayList<Object> l = (ArrayList<Object>) list;
1:a700f83:     l.ensureCapacity(newSize);
1:a700f83:     while (l.size() < newSize) {
1:a700f83:       l.add(null);
1:a700f83:     }
1:a700f83:     while (l.size() > newSize) {
1:a700f83:       l.remove(l.size() - 1);
1:a700f83:     }
1:a700f83:     return list;
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public boolean equals(final Object o) {
1:a700f83:     if (o == null || o.getClass() != getClass()) {
1:a700f83:       return false;
1:a700f83:     } else if (o == this) {
1:a700f83:       return true;
1:a700f83:     } else {
1:d408a8d:       return ((CarbonArrayInspector) o).arrayElementInspector.equals(arrayElementInspector);
1:a700f83:     }
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public int hashCode() {
1:a700f83:     int hash = 3;
1:a700f83:     hash = 29 * hash + (this.arrayElementInspector != null ?
1:d408a8d:         this.arrayElementInspector.hashCode() :
1:d408a8d:         0);
1:a700f83:     return hash;
1:a700f83:   }
1:a700f83: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:910d496
/////////////////////////////////////////////////////////////////////////
1:       return Arrays.asList(array);
author:Bhavya
-------------------------------------------------------------------------------
commit:cbe1419
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:chenliang613
-------------------------------------------------------------------------------
commit:d408a8d
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1: class CarbonArrayInspector implements SettableListObjectInspector {
1:   private final ObjectInspector arrayElementInspector;
1:   CarbonArrayInspector(final ObjectInspector arrayElementInspector) {
1:   @Override public String getTypeName() {
1:   @Override public Category getCategory() {
1:   @Override public ObjectInspector getListElementObjectInspector() {
1:   @Override public Object getListElement(final Object data, final int index) {
/////////////////////////////////////////////////////////////////////////
1:     throw new UnsupportedOperationException("Cannot inspect " + data.getClass().getCanonicalName());
1:   @Override public int getListLength(final Object data) {
/////////////////////////////////////////////////////////////////////////
1:     throw new UnsupportedOperationException("Cannot inspect " + data.getClass().getCanonicalName());
1:   @Override public List<?> getList(final Object data) {
/////////////////////////////////////////////////////////////////////////
0:       Collections.addAll(list, array);
1:     throw new UnsupportedOperationException("Cannot inspect " + data.getClass().getCanonicalName());
1:   @Override public Object create(final int size) {
/////////////////////////////////////////////////////////////////////////
1:   @Override public Object set(final Object list, final int index, final Object element) {
1:   @Override public Object resize(final Object list, final int newSize) {
/////////////////////////////////////////////////////////////////////////
1:   @Override public boolean equals(final Object o) {
1:       return ((CarbonArrayInspector) o).arrayElementInspector.equals(arrayElementInspector);
1:   @Override public int hashCode() {
1:         this.arrayElementInspector.hashCode() :
1:         0);
author:cenyuhai
-------------------------------------------------------------------------------
commit:a700f83
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.hive;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.SettableListObjectInspector;
1: import org.apache.hadoop.io.ArrayWritable;
1: import org.apache.hadoop.io.Writable;
1: 
1: /**
1:  * The CarbonHiveArrayInspector will inspect an ArrayWritable, considering it as an Hive array.
1:  * It can also inspect a List if Hive decides to inspect the result of an inspection.
1:  */
0: public class CarbonArrayInspector implements SettableListObjectInspector {
1: 
0:   private ObjectInspector arrayElementInspector;
1: 
0:   public CarbonArrayInspector(final ObjectInspector arrayElementInspector) {
1:     this.arrayElementInspector = arrayElementInspector;
1:   }
1: 
0:   @Override
0:   public String getTypeName() {
1:     return "array<" + arrayElementInspector.getTypeName() + ">";
1:   }
1: 
0:   @Override
0:   public Category getCategory() {
1:     return Category.LIST;
1:   }
1: 
0:   @Override
0:   public ObjectInspector getListElementObjectInspector() {
1:     return arrayElementInspector;
1:   }
1: 
0:   @Override
0:   public Object getListElement(final Object data, final int index) {
1:     if (data == null) {
1:       return null;
1:     }
1: 
1:     if (data instanceof ArrayWritable) {
1:       final Writable[] listContainer = ((ArrayWritable) data).get();
1: 
1:       if (listContainer == null || listContainer.length == 0) {
1:         return null;
1:       }
1: 
1:       final Writable subObj = listContainer[0];
1: 
1:       if (subObj == null) {
1:         return null;
1:       }
1: 
1:       if (index >= 0 && index < ((ArrayWritable) subObj).get().length) {
1:         return ((ArrayWritable) subObj).get()[index];
1:       } else {
1:         return null;
1:       }
1:     }
1: 
0:     throw new UnsupportedOperationException("Cannot inspect "
0:       + data.getClass().getCanonicalName());
1:   }
1: 
0:   @Override
0:   public int getListLength(final Object data) {
1:     if (data == null) {
1:       return -1;
1:     }
1: 
1:     if (data instanceof ArrayWritable) {
1:       final Writable[] listContainer = ((ArrayWritable) data).get();
1: 
1:       if (listContainer == null || listContainer.length == 0) {
1:         return -1;
1:       }
1: 
1:       final Writable subObj = listContainer[0];
1: 
1:       if (subObj == null) {
1:         return 0;
1:       }
1: 
1:       return ((ArrayWritable) subObj).get().length;
1:     }
1: 
0:     throw new UnsupportedOperationException("Cannot inspect "
0:       + data.getClass().getCanonicalName());
1:   }
1: 
0:   @Override
0:   public List<?> getList(final Object data) {
1:     if (data == null) {
1:       return null;
1:     }
1: 
1:     if (data instanceof ArrayWritable) {
1:       final Writable[] listContainer = ((ArrayWritable) data).get();
1: 
1:       if (listContainer == null || listContainer.length == 0) {
1:         return null;
1:       }
1: 
1:       final Writable subObj = listContainer[0];
1: 
1:       if (subObj == null) {
1:         return null;
1:       }
1: 
1:       final Writable[] array = ((ArrayWritable) subObj).get();
0:       final List<Writable> list = Arrays.asList(array);
1: 
0:       for (final Writable obj : array) {
0:         list.add(obj);
1:       }
1: 
1:       return list;
1:     }
1: 
0:     throw new UnsupportedOperationException("Cannot inspect "
0:       + data.getClass().getCanonicalName());
1:   }
1: 
0:   @Override
0:   public Object create(final int size) {
1:     final List<Object> result = Arrays.asList(new Object[size]);
1:     for (int i = 0; i < size; ++i) {
1:       result.add(null);
1:     }
1:     return result;
1:   }
1: 
0:   @Override
0:   public Object set(final Object list, final int index, final Object element) {
1:     final ArrayList<Object> l = (ArrayList<Object>) list;
1:     l.set(index, element);
1:     return list;
1:   }
1: 
0:   @Override
0:   public Object resize(final Object list, final int newSize) {
1:     final ArrayList<Object> l = (ArrayList<Object>) list;
1:     l.ensureCapacity(newSize);
1:     while (l.size() < newSize) {
1:       l.add(null);
1:     }
1:     while (l.size() > newSize) {
1:       l.remove(l.size() - 1);
1:     }
1:     return list;
1:   }
1: 
0:   @Override
0:   public boolean equals(final Object o) {
1:     if (o == null || o.getClass() != getClass()) {
1:       return false;
1:     } else if (o == this) {
1:       return true;
1:     } else {
0:       final ObjectInspector other = ((CarbonArrayInspector) o).arrayElementInspector;
0:       return other.equals(arrayElementInspector);
1:     }
1:   }
1: 
0:   @Override
0:   public int hashCode() {
1:     int hash = 3;
1:     hash = 29 * hash + (this.arrayElementInspector != null ?
0:       this.arrayElementInspector.hashCode() : 0);
1:     return hash;
1:   }
1: }
============================================================================