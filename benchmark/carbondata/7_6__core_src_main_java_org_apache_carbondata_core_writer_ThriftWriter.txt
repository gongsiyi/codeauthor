1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
2:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
3:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.writer;
1:cd6a4ff: 
1:cd6a4ff: import java.io.DataOutputStream;
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: 
1:ce09aaa: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:878bbd8: import org.apache.carbondata.core.fileoperations.AtomicFileOperationFactory;
1:70256e7: import org.apache.carbondata.core.fileoperations.AtomicFileOperations;
1:70256e7: import org.apache.carbondata.core.fileoperations.FileWriteOperation;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonUtil;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.thrift.TBase;
1:cd6a4ff: import org.apache.thrift.TException;
1:cd6a4ff: import org.apache.thrift.protocol.TCompactProtocol;
1:cd6a4ff: import org.apache.thrift.protocol.TProtocol;
1:cd6a4ff: import org.apache.thrift.transport.TIOStreamTransport;
1:cd6a4ff: 
3:cd6a4ff: /**
1:cd6a4ff:  * Simple class that makes it easy to write Thrift objects to disk.
1:cd6a4ff:  */
1:cd6a4ff: public class ThriftWriter {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * buffer size
1:cd6a4ff:    */
1:cd6a4ff:   private static final int bufferSize = 2048;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * File to write to.
1:cd6a4ff:    */
1:cd6a4ff:   private String fileName;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * For writing to the file.
1:cd6a4ff:    */
1:cd6a4ff:   private DataOutputStream dataOutputStream;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * For binary serialization of objects.
1:cd6a4ff:    */
1:cd6a4ff:   private TProtocol binaryOut;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:70256e7:    * Identifier for performing atomic file operations
1:70256e7:    */
1:70256e7:   private AtomicFileOperations atomicFileOperationsWriter;
1:70256e7: 
1:70256e7:   /**
1:cd6a4ff:    * flag to append to existing file
1:cd6a4ff:    */
1:cd6a4ff:   private boolean append;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Constructor.
1:cd6a4ff:    */
1:cd6a4ff:   public ThriftWriter(String fileName, boolean append) {
1:cd6a4ff:     this.fileName = fileName;
1:cd6a4ff:     this.append = append;
4:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Open the file for writing.
1:cd6a4ff:    */
1:cd6a4ff:   public void open() throws IOException {
1:70256e7:     FileFactory.FileType fileType = FileFactory.getFileType(fileName);
1:cd6a4ff:     dataOutputStream = FileFactory.getDataOutputStream(fileName, fileType, bufferSize, append);
1:cd6a4ff:     binaryOut = new TCompactProtocol(new TIOStreamTransport(dataOutputStream));
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:70256e7:    * Method for opening file writing for atomic operations
1:70256e7:    *
1:70256e7:    * @param fileWriteOperation
1:70256e7:    * @throws IOException
1:70256e7:    */
1:70256e7:   public void open(FileWriteOperation fileWriteOperation) throws IOException {
1:878bbd8:     atomicFileOperationsWriter = AtomicFileOperationFactory.getAtomicFileOperations(fileName);
1:70256e7:     dataOutputStream = atomicFileOperationsWriter.openForWrite(fileWriteOperation);
1:70256e7:     binaryOut = new TCompactProtocol(new TIOStreamTransport(dataOutputStream));
1:70256e7:   }
1:70256e7: 
1:70256e7:   /**
1:ebe987b:    * This will check whether stream and binary out is open or not.
1:ebe987b:    * @return
1:ebe987b:    */
1:ebe987b:   public boolean isOpen() {
1:ebe987b:     if (null != binaryOut && null != dataOutputStream) {
1:ebe987b:       return true;
1:ebe987b:     }
1:ebe987b:     return false;
1:ebe987b:   }
1:ebe987b: 
1:ebe987b:   /**
1:cd6a4ff:    * Write the object to disk.
1:cd6a4ff:    */
1:cd6a4ff:   public void write(TBase t) throws IOException {
1:cd6a4ff:     try {
1:cd6a4ff:       t.write(binaryOut);
1:cd6a4ff:       dataOutputStream.flush();
1:cd6a4ff:     } catch (TException e) {
1:cd6a4ff:       throw new IOException(e);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Close the file stream.
1:70256e7:    */
1:70256e7:   public void close() throws IOException {
1:70256e7:     closeAtomicFileWriter();
1:285ce72:     CarbonUtil.closeStream(dataOutputStream);
1:cd6a4ff:   }
1:70256e7: 
1:70256e7:   /**
1:70256e7:    * This method will close the atomic file operations writer
1:70256e7:    *
1:70256e7:    * @throws IOException
1:cd6a4ff:    */
1:70256e7:   private void closeAtomicFileWriter() throws IOException {
1:70256e7:     if (null != atomicFileOperationsWriter) {
1:70256e7:       atomicFileOperationsWriter.close();
1:70256e7:       // set output stream to null as atomic writer will close the data output stream internally
1:70256e7:       dataOutputStream = null;
1:70256e7:     }
1:70256e7:   }
1:cd6a4ff: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:878bbd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.fileoperations.AtomicFileOperationFactory;
/////////////////////////////////////////////////////////////////////////
1:     atomicFileOperationsWriter = AtomicFileOperationFactory.getAtomicFileOperations(fileName);
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:manishgupta88
-------------------------------------------------------------------------------
commit:285ce72
/////////////////////////////////////////////////////////////////////////
1:     CarbonUtil.closeStream(dataOutputStream);
commit:70256e7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.fileoperations.AtomicFileOperations;
0: import org.apache.carbondata.core.fileoperations.AtomicFileOperationsImpl;
1: import org.apache.carbondata.core.fileoperations.FileWriteOperation;
/////////////////////////////////////////////////////////////////////////
1:    * Identifier for performing atomic file operations
1:    */
1:   private AtomicFileOperations atomicFileOperationsWriter;
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:    * Method for opening file writing for atomic operations
1:    *
1:    * @param fileWriteOperation
1:    * @throws IOException
1:    */
1:   public void open(FileWriteOperation fileWriteOperation) throws IOException {
1:     FileFactory.FileType fileType = FileFactory.getFileType(fileName);
0:     atomicFileOperationsWriter = new AtomicFileOperationsImpl(fileName, fileType);
1:     dataOutputStream = atomicFileOperationsWriter.openForWrite(fileWriteOperation);
1:     binaryOut = new TCompactProtocol(new TIOStreamTransport(dataOutputStream));
1:   }
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:   public void close() throws IOException {
1:     closeAtomicFileWriter();
1:    * This method will close the atomic file operations writer
1:    *
1:    * @throws IOException
1:    */
1:   private void closeAtomicFileWriter() throws IOException {
1:     if (null != atomicFileOperationsWriter) {
1:       atomicFileOperationsWriter.close();
1:       // set output stream to null as atomic writer will close the data output stream internally
1:       dataOutputStream = null;
1:     }
1:   }
1: 
1:   /**
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
author:ravikiran
-------------------------------------------------------------------------------
commit:ebe987b
/////////////////////////////////////////////////////////////////////////
1:    * This will check whether stream and binary out is open or not.
1:    * @return
1:    */
1:   public boolean isOpen() {
1:     if (null != binaryOut && null != dataOutputStream) {
1:       return true;
1:     }
1:     return false;
1:   }
1: 
1:   /**
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.writer;
1: 
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
0: import org.apache.carbondata.core.datastorage.store.impl.FileFactory;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: 
0: import org.apache.hadoop.fs.FSDataOutputStream;
1: import org.apache.thrift.TBase;
1: import org.apache.thrift.TException;
1: import org.apache.thrift.protocol.TCompactProtocol;
1: import org.apache.thrift.protocol.TProtocol;
1: import org.apache.thrift.transport.TIOStreamTransport;
1: 
1: /**
1:  * Simple class that makes it easy to write Thrift objects to disk.
1:  */
1: public class ThriftWriter {
1: 
1:   /**
1:    * buffer size
1:    */
1:   private static final int bufferSize = 2048;
1: 
1:   /**
1:    * File to write to.
1:    */
1:   private String fileName;
1: 
1:   /**
1:    * For writing to the file.
1:    */
1:   private DataOutputStream dataOutputStream;
1: 
1:   /**
1:    * For binary serialization of objects.
1:    */
1:   private TProtocol binaryOut;
1: 
1:   /**
1:    * flag to append to existing file
1:    */
1:   private boolean append;
1: 
1:   /**
1:    * Constructor.
1:    */
1:   public ThriftWriter(String fileName, boolean append) {
1:     this.fileName = fileName;
1:     this.append = append;
1:   }
1: 
1:   /**
1:    * Open the file for writing.
1:    */
1:   public void open() throws IOException {
0:     FileFactory.FileType fileType = FileFactory.getFileType(fileName);
1:     dataOutputStream = FileFactory.getDataOutputStream(fileName, fileType, bufferSize, append);
1:     binaryOut = new TCompactProtocol(new TIOStreamTransport(dataOutputStream));
1:   }
1: 
1:   /**
1:    * Write the object to disk.
1:    */
1:   public void write(TBase t) throws IOException {
1:     try {
1:       t.write(binaryOut);
1:       dataOutputStream.flush();
1:     } catch (TException e) {
1:       throw new IOException(e);
1:     }
1:   }
1: 
1:   /**
0:    * Write the offset to the file
1:    *
0:    * @param offset
0:    * @throws IOException
1:    */
0:   public void writeOffset(long offset) throws IOException {
0:     dataOutputStream.writeLong(offset);
1:   }
1: 
1:   /**
1:    * Close the file stream.
1:    */
0:   public void close() {
0:     CarbonUtil.closeStreams(dataOutputStream);
1:   }
1: 
1:   /**
0:    * Flush data to HDFS file
1:    */
0:   public void sync() throws IOException {
0:     if (dataOutputStream instanceof FSDataOutputStream) {
0:       ((FSDataOutputStream) dataOutputStream).hsync();
1:     }
1:   }
1: }
============================================================================