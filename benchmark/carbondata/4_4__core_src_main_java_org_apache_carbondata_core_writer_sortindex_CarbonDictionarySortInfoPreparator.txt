1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.core.writer.sortindex;
1:cd6a4ff: 
1:cd6a4ff: import java.nio.charset.Charset;
1:cd6a4ff: import java.util.Arrays;
1:cd6a4ff: import java.util.Iterator;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1:cd6a4ff: import org.apache.carbondata.core.cache.dictionary.DictionaryChunksWrapper;
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:ce09aaa: import org.apache.carbondata.core.metadata.datatype.DataType;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.commons.lang.ArrayUtils;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * The class prepares the column sort info ie sortIndex
1:cd6a4ff:  * and inverted sort index info
1:cd6a4ff:  */
1:cd6a4ff: public class CarbonDictionarySortInfoPreparator {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method returns the column Sort Info
1:cd6a4ff:    *
1:cd6a4ff:    * @param newDistinctValues new distinct value to be added
1:cd6a4ff:    * @param dictionary        old distinct values
1:cd6a4ff:    * @param dataType          DataType of columns
1:cd6a4ff:    * @return CarbonDictionarySortInfo returns the column Sort Info
1:cd6a4ff:    */
1:cd6a4ff:   public CarbonDictionarySortInfo getDictionarySortInfo(List<String> newDistinctValues,
1:eaadc88:       Dictionary dictionary, DataType dataType) {
1:cd6a4ff:     CarbonDictionarySortModel[] dictionarySortModels =
1:cd6a4ff:         prepareDictionarySortModels(newDistinctValues, dictionary, dataType);
1:cd6a4ff:     return createColumnSortInfo(dictionarySortModels);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method prepares the sort_index and sort_index_inverted data
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionarySortModels
1:cd6a4ff:    */
1:cd6a4ff:   private CarbonDictionarySortInfo createColumnSortInfo(
1:cd6a4ff:       CarbonDictionarySortModel[] dictionarySortModels) {
1:cd6a4ff: 
1:cd6a4ff:     //Sort index after members are sorted
1:cd6a4ff:     int[] sortIndex;
1:cd6a4ff:     //inverted sort index to get the member
1:cd6a4ff:     int[] sortIndexInverted;
1:cd6a4ff: 
1:cd6a4ff:     Arrays.sort(dictionarySortModels);
1:cd6a4ff:     sortIndex = new int[dictionarySortModels.length];
1:cd6a4ff:     sortIndexInverted = new int[dictionarySortModels.length];
1:cd6a4ff: 
1:cd6a4ff:     for (int i = 0; i < dictionarySortModels.length; i++) {
1:cd6a4ff:       CarbonDictionarySortModel dictionarySortModel = dictionarySortModels[i];
1:cd6a4ff:       sortIndex[i] = dictionarySortModel.getKey();
1:cd6a4ff:       // the array index starts from 0 therefore -1 is done to avoid wastage
1:cd6a4ff:       // of 0th index in array and surrogate key starts from 1 there 1 is added to i
1:cd6a4ff:       // which is a counter starting from 0
1:cd6a4ff:       sortIndexInverted[dictionarySortModel.getKey() - 1] = i + 1;
1:cd6a4ff:     }
1:cd6a4ff:     dictionarySortModels = null;
1:cd6a4ff:     List<Integer> sortIndexList = convertToList(sortIndex);
1:cd6a4ff:     List<Integer> sortIndexInvertedList = convertToList(sortIndexInverted);
1:cd6a4ff:     return new CarbonDictionarySortInfo(sortIndexList, sortIndexInvertedList);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method converts the int[] to List<Integer>
1:cd6a4ff:    *
1:cd6a4ff:    * @param data
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   private List<Integer> convertToList(int[] data) {
1:cd6a4ff:     Integer[] wrapperType = ArrayUtils.toObject(data);
1:cd6a4ff:     return Arrays.asList(wrapperType);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method returns the array of CarbonDictionarySortModel
1:cd6a4ff:    *
1:cd6a4ff:    * @param distinctValues new distinct values
1:cd6a4ff:    * @param dictionary The wrapper wraps the list<list<bye[]>> and provide the
1:cd6a4ff:    *                   iterator to retrieve the chunks members.
1:cd6a4ff:    * @param dataType   DataType of columns
1:cd6a4ff:    * @return CarbonDictionarySortModel[] CarbonDictionarySortModel[] the model
1:cd6a4ff:    * CarbonDictionarySortModel contains the  member's surrogate and
1:cd6a4ff:    * its byte value
1:cd6a4ff:    */
1:cd6a4ff:   private CarbonDictionarySortModel[] prepareDictionarySortModels(List<String> distinctValues,
1:cd6a4ff:       Dictionary dictionary, DataType dataType) {
1:cd6a4ff:     CarbonDictionarySortModel[] dictionarySortModels = null;
1:cd6a4ff:     //The wrapper wraps the list<list<bye[]>> and provide the iterator to
1:cd6a4ff:     // retrieve the chunks members.
1:cd6a4ff:     int surrogate = 1;
1:cd6a4ff:     if (null != dictionary) {
1:cd6a4ff:       DictionaryChunksWrapper dictionaryChunksWrapper = dictionary.getDictionaryChunks();
1:cd6a4ff:       dictionarySortModels =
1:cd6a4ff:           new CarbonDictionarySortModel[dictionaryChunksWrapper.getSize() + distinctValues.size()];
1:cd6a4ff:       while (dictionaryChunksWrapper.hasNext()) {
2:cd6a4ff:         dictionarySortModels[surrogate - 1] =
1:cd6a4ff:             createDictionarySortModel(surrogate, dataType, dictionaryChunksWrapper.next());
1:cd6a4ff:         surrogate++;
1:cd6a4ff:       }
1:cd6a4ff:     } else {
1:cd6a4ff:       dictionarySortModels = new CarbonDictionarySortModel[distinctValues.size()];
1:cd6a4ff:     }
1:cd6a4ff:     // for new distinct values
1:cd6a4ff:     Iterator<String> distinctValue = distinctValues.iterator();
1:cd6a4ff:     while (distinctValue.hasNext()) {
1:2b66476:       dictionarySortModels[surrogate - 1] = createDictionarySortModel(surrogate, dataType,
1:2b66476:           distinctValue.next().getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
1:cd6a4ff:       surrogate++;
1:cd6a4ff:     }
1:cd6a4ff:     return dictionarySortModels;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    *
1:cd6a4ff:    * @param surrogate
1:cd6a4ff:    * @param dataType
1:cd6a4ff:    * @param value member value
1:cd6a4ff:    * @return CarbonDictionarySortModel
1:cd6a4ff:    */
1:cd6a4ff:   private CarbonDictionarySortModel createDictionarySortModel(int surrogate, DataType dataType,
1:cd6a4ff:       byte[] value) {
1:cd6a4ff:     String memberValue = new String(value, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:cd6a4ff:     return new CarbonDictionarySortModel(surrogate, dataType, memberValue);
1:cd6a4ff:   }
1:cd6a4ff: }
1:cd6a4ff: 
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:2b66476
/////////////////////////////////////////////////////////////////////////
1:       dictionarySortModels[surrogate - 1] = createDictionarySortModel(surrogate, dataType,
1:           distinctValue.next().getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       Dictionary dictionary, DataType dataType) {
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.writer.sortindex;
1: 
1: import java.nio.charset.Charset;
1: import java.util.Arrays;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1: import org.apache.carbondata.core.cache.dictionary.DictionaryChunksWrapper;
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.util.CarbonUtilException;
1: 
1: import org.apache.commons.lang.ArrayUtils;
1: 
1: /**
1:  * The class prepares the column sort info ie sortIndex
1:  * and inverted sort index info
1:  */
1: public class CarbonDictionarySortInfoPreparator {
1: 
1:   /**
1:    * The method returns the column Sort Info
1:    *
1:    * @param newDistinctValues new distinct value to be added
1:    * @param dictionary        old distinct values
1:    * @param dataType          DataType of columns
1:    * @return CarbonDictionarySortInfo returns the column Sort Info
0:    * @throws CarbonUtilException
1:    */
1:   public CarbonDictionarySortInfo getDictionarySortInfo(List<String> newDistinctValues,
0:       Dictionary dictionary, DataType dataType) throws CarbonUtilException {
1:     CarbonDictionarySortModel[] dictionarySortModels =
1:         prepareDictionarySortModels(newDistinctValues, dictionary, dataType);
1:     return createColumnSortInfo(dictionarySortModels);
1:   }
1: 
1:   /**
1:    * The method prepares the sort_index and sort_index_inverted data
1:    *
1:    * @param dictionarySortModels
1:    */
1:   private CarbonDictionarySortInfo createColumnSortInfo(
1:       CarbonDictionarySortModel[] dictionarySortModels) {
1: 
1:     //Sort index after members are sorted
1:     int[] sortIndex;
1:     //inverted sort index to get the member
1:     int[] sortIndexInverted;
1: 
1:     Arrays.sort(dictionarySortModels);
1:     sortIndex = new int[dictionarySortModels.length];
1:     sortIndexInverted = new int[dictionarySortModels.length];
1: 
1:     for (int i = 0; i < dictionarySortModels.length; i++) {
1:       CarbonDictionarySortModel dictionarySortModel = dictionarySortModels[i];
1:       sortIndex[i] = dictionarySortModel.getKey();
1:       // the array index starts from 0 therefore -1 is done to avoid wastage
1:       // of 0th index in array and surrogate key starts from 1 there 1 is added to i
1:       // which is a counter starting from 0
1:       sortIndexInverted[dictionarySortModel.getKey() - 1] = i + 1;
1:     }
1:     dictionarySortModels = null;
1:     List<Integer> sortIndexList = convertToList(sortIndex);
1:     List<Integer> sortIndexInvertedList = convertToList(sortIndexInverted);
1:     return new CarbonDictionarySortInfo(sortIndexList, sortIndexInvertedList);
1:   }
1: 
1:   /**
1:    * The method converts the int[] to List<Integer>
1:    *
1:    * @param data
1:    * @return
1:    */
1:   private List<Integer> convertToList(int[] data) {
1:     Integer[] wrapperType = ArrayUtils.toObject(data);
1:     return Arrays.asList(wrapperType);
1:   }
1: 
1:   /**
1:    * The method returns the array of CarbonDictionarySortModel
1:    *
1:    * @param distinctValues new distinct values
1:    * @param dictionary The wrapper wraps the list<list<bye[]>> and provide the
1:    *                   iterator to retrieve the chunks members.
1:    * @param dataType   DataType of columns
1:    * @return CarbonDictionarySortModel[] CarbonDictionarySortModel[] the model
1:    * CarbonDictionarySortModel contains the  member's surrogate and
1:    * its byte value
1:    */
1:   private CarbonDictionarySortModel[] prepareDictionarySortModels(List<String> distinctValues,
1:       Dictionary dictionary, DataType dataType) {
1:     CarbonDictionarySortModel[] dictionarySortModels = null;
1:     //The wrapper wraps the list<list<bye[]>> and provide the iterator to
1:     // retrieve the chunks members.
1:     int surrogate = 1;
1:     if (null != dictionary) {
1:       DictionaryChunksWrapper dictionaryChunksWrapper = dictionary.getDictionaryChunks();
1:       dictionarySortModels =
1:           new CarbonDictionarySortModel[dictionaryChunksWrapper.getSize() + distinctValues.size()];
1:       while (dictionaryChunksWrapper.hasNext()) {
1:         dictionarySortModels[surrogate - 1] =
1:             createDictionarySortModel(surrogate, dataType, dictionaryChunksWrapper.next());
1:         surrogate++;
1:       }
1:     } else {
1:       dictionarySortModels = new CarbonDictionarySortModel[distinctValues.size()];
1:     }
1:     // for new distinct values
1:     Iterator<String> distinctValue = distinctValues.iterator();
1:     while (distinctValue.hasNext()) {
1:       dictionarySortModels[surrogate - 1] =
0:           createDictionarySortModel(surrogate, dataType, distinctValue.next().getBytes());
1:       surrogate++;
1:     }
1:     return dictionarySortModels;
1:   }
1: 
1:   /**
1:    *
1:    * @param surrogate
1:    * @param dataType
1:    * @param value member value
1:    * @return CarbonDictionarySortModel
1:    */
1:   private CarbonDictionarySortModel createDictionarySortModel(int surrogate, DataType dataType,
1:       byte[] value) {
1:     String memberValue = new String(value, Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:     return new CarbonDictionarySortModel(surrogate, dataType, memberValue);
1:   }
1: }
1: 
============================================================================