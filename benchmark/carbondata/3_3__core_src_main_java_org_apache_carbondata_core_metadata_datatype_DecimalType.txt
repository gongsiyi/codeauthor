1:956833e: /*
1:956833e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:956833e:  * contributor license agreements.  See the NOTICE file distributed with
1:956833e:  * this work for additional information regarding copyright ownership.
1:956833e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:956833e:  * (the "License"); you may not use this file except in compliance with
1:956833e:  * the License.  You may obtain a copy of the License at
1:956833e:  *
1:956833e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:956833e:  *
1:956833e:  * Unless required by applicable law or agreed to in writing, software
1:956833e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:956833e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:956833e:  * See the License for the specific language governing permissions and
1:956833e:  * limitations under the License.
1:956833e:  */
1:956833e: 
1:956833e: package org.apache.carbondata.core.metadata.datatype;
1:956833e: 
1:956833e: public class DecimalType extends DataType {
1:956833e: 
1:f209e8e:   private int precision;
1:f209e8e:   private int scale;
1:956833e: 
1:f209e8e:   // create a decimal type object with specified precision and scale
1:f209e8e:   DecimalType(int precision, int scale) {
1:f209e8e:     super(DataTypes.DECIMAL_TYPE_ID, 8, "DECIMAL", -1);
1:f209e8e:     this.precision = precision;
1:f209e8e:     this.scale = scale;
1:7ef9164:   }
1:956833e: 
1:7ef9164:   @Override
1:7ef9164:   public boolean equals(Object obj) {
1:7ef9164:     if (this == obj) {
1:7ef9164:       return true;
1:7ef9164:     }
1:7ef9164:     if (obj == null) {
1:7ef9164:       return false;
1:7ef9164:     }
1:3394128:     if (getClass() != obj.getClass()) {
1:7ef9164:       return false;
1:7ef9164:     }
1:3394128:     DecimalType other = (DecimalType)obj;
1:3394128:     if (!this.getName().equalsIgnoreCase(other.getName())) {
1:7ef9164:       return false;
1:7ef9164:     }
1:3394128:     if (this.precision != other.precision) {
1:7ef9164:       return false;
1:7ef9164:     }
1:3394128:     if (this.scale != other.scale) {
1:7ef9164:       return false;
1:7ef9164:     }
1:7ef9164:     return true;
1:956833e:   }
1:7ef9164: 
1:7ef9164:   @Override
1:7ef9164:   public int hashCode() {
1:7ef9164:     final int prime = 31;
1:7ef9164:     int result = 1;
1:7ef9164:     result = prime * result + getName().hashCode();
1:3394128:     result = prime * result + getPrecision();
1:3394128:     result = prime * result + getScale();
1:7ef9164:     return result;
1:7ef9164:   }
1:7ef9164: 
1:f209e8e:   public int getPrecision() {
1:f209e8e:     return precision;
1:f209e8e:   }
1:f209e8e: 
1:f209e8e:   public void setPrecision(int precision) {
1:f209e8e:     this.precision = precision;
1:f209e8e:   }
1:f209e8e: 
1:f209e8e:   public int getScale() {
1:f209e8e:     return scale;
1:f209e8e:   }
1:f209e8e: 
1:f209e8e:   public void setScale(int scale) {
1:f209e8e:     this.scale = scale;
1:956833e:   }
1:956833e: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:3394128
/////////////////////////////////////////////////////////////////////////
1:     if (getClass() != obj.getClass()) {
1:     DecimalType other = (DecimalType)obj;
1:     if (!this.getName().equalsIgnoreCase(other.getName())) {
1:     if (this.precision != other.precision) {
1:     if (this.scale != other.scale) {
/////////////////////////////////////////////////////////////////////////
1:     result = prime * result + getPrecision();
1:     result = prime * result + getScale();
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public boolean equals(Object obj) {
1:     if (this == obj) {
1:       return true;
1:     }
1:     if (obj == null) {
1:       return false;
1:     }
0:     if (!(obj instanceof DecimalType)) {
1:       return false;
1:     }
0:     if (!this.getName().equalsIgnoreCase(((DecimalType) obj).getName())) {
1:       return false;
1:     }
0:     if (this.precision != ((DecimalType) obj).precision) {
1:       return false;
1:     }
0:     if (this.scale != ((DecimalType) obj).scale) {
1:       return false;
1:     }
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     final int prime = 31;
1:     int result = 1;
1:     result = prime * result + getName().hashCode();
1:     return result;
1:   }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
1:   private int precision;
1:   private int scale;
1:   // create a decimal type object with specified precision and scale
1:   DecimalType(int precision, int scale) {
1:     super(DataTypes.DECIMAL_TYPE_ID, 8, "DECIMAL", -1);
1:     this.precision = precision;
1:     this.scale = scale;
1:   public int getPrecision() {
1:     return precision;
1:   }
1: 
1:   public void setPrecision(int precision) {
1:     this.precision = precision;
1:   }
1: 
1:   public int getScale() {
1:     return scale;
1:   }
1: 
1:   public void setScale(int scale) {
1:     this.scale = scale;
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.datatype;
1: 
1: public class DecimalType extends DataType {
1: 
0:   public static final DataType DECIMAL =
0:       new DecimalType(DataTypes.DECIMAL_TYPE_ID, 8, "DECIMAL", -1);
1: 
0:   private DecimalType(int id, int precedenceOrder, String name, int sizeInBytes) {
0:     super(id, precedenceOrder, name, sizeInBytes);
1:   }
1: 
0:   // this function is needed to ensure singleton pattern while supporting java serialization
0:   private Object readResolve() {
0:     return DataTypes.DECIMAL;
1:   }
1: }
============================================================================