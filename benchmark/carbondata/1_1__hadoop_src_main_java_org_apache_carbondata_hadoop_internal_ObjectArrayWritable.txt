1:dded5d5: /*
1:dded5d5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dded5d5:  * contributor license agreements.  See the NOTICE file distributed with
1:dded5d5:  * this work for additional information regarding copyright ownership.
1:dded5d5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dded5d5:  * (the "License"); you may not use this file except in compliance with
1:dded5d5:  * the License.  You may obtain a copy of the License at
1:dded5d5:  *
1:dded5d5:  *    http://www.apache.org/licenses/LICENSE-2.0
1:dded5d5:  *
1:dded5d5:  * Unless required by applicable law or agreed to in writing, software
1:dded5d5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dded5d5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dded5d5:  * See the License for the specific language governing permissions and
1:dded5d5:  * limitations under the License.
1:dded5d5:  */
1:dded5d5: package org.apache.carbondata.hadoop.internal;
1:dded5d5: 
1:dded5d5: import java.io.DataInput;
1:dded5d5: import java.io.DataOutput;
1:dded5d5: import java.io.IOException;
1:dded5d5: import java.nio.charset.Charset;
1:dded5d5: import java.util.Arrays;
1:dded5d5: 
1:dded5d5: import org.apache.hadoop.io.Writable;
1:dded5d5: 
1:dded5d5: /**
1:dded5d5:  * A Object sequence that is usable as a key or value.
1:dded5d5:  */
1:dded5d5: public class ObjectArrayWritable implements Writable {
1:dded5d5:   private Object[] values;
1:dded5d5: 
1:dded5d5:   public void set(Object[] values) {
1:dded5d5:     this.values = values;
1:dded5d5:   }
1:dded5d5: 
1:dded5d5:   public Object[] get() {
1:dded5d5:     return values;
1:dded5d5:   }
1:dded5d5: 
1:dded5d5:   @Override
1:dded5d5:   public void readFields(DataInput in) throws IOException {
1:dded5d5:     int length = in.readInt();
1:dded5d5:     values = new Object[length];
1:dded5d5:     for (int i = 0; i < length; i++) {
1:dded5d5:       byte[] b = new byte[in.readInt()];
1:dded5d5:       in.readFully(b);
1:dded5d5:       values[i] = new String(b, Charset.defaultCharset());
1:dded5d5:     }
1:dded5d5:   }
1:dded5d5: 
1:dded5d5:   @Override
1:dded5d5:   public void write(DataOutput out) throws IOException {
1:dded5d5:     out.writeInt(values.length);                 // write values
1:dded5d5:     for (int i = 0; i < values.length; i++) {
1:dded5d5:       byte[] b = values[i].toString().getBytes(Charset.defaultCharset());
1:dded5d5:       out.writeInt(b.length);
1:dded5d5:       out.write(b);
1:dded5d5:     }
1:dded5d5:   }
1:dded5d5: 
1:dded5d5:   @Override
1:dded5d5:   public String toString() {
1:dded5d5:     return Arrays.toString(values);
1:dded5d5:   }
1:dded5d5: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:dded5d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.hadoop.internal;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.nio.charset.Charset;
1: import java.util.Arrays;
1: 
1: import org.apache.hadoop.io.Writable;
1: 
1: /**
1:  * A Object sequence that is usable as a key or value.
1:  */
1: public class ObjectArrayWritable implements Writable {
1:   private Object[] values;
1: 
1:   public void set(Object[] values) {
1:     this.values = values;
1:   }
1: 
1:   public Object[] get() {
1:     return values;
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     int length = in.readInt();
1:     values = new Object[length];
1:     for (int i = 0; i < length; i++) {
1:       byte[] b = new byte[in.readInt()];
1:       in.readFully(b);
1:       values[i] = new String(b, Charset.defaultCharset());
1:     }
1:   }
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeInt(values.length);                 // write values
1:     for (int i = 0; i < values.length; i++) {
1:       byte[] b = values[i].toString().getBytes(Charset.defaultCharset());
1:       out.writeInt(b.length);
1:       out.write(b);
1:     }
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     return Arrays.toString(values);
1:   }
1: }
============================================================================