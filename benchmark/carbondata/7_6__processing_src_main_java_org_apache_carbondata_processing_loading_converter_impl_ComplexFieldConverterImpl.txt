1:d96f09a: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:d96f09a:  *
1:d96f09a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d96f09a:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:d96f09a:  */
1:d96f09a: 
1:349c59c: package org.apache.carbondata.processing.loading.converter.impl;
1:d96f09a: 
1:496cde4: import java.io.ByteArrayOutputStream;
1:496cde4: import java.io.DataOutputStream;
1:496cde4: import java.util.List;
1:496cde4: 
1:dc83b2a: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:f089287: import org.apache.carbondata.processing.datatypes.GenericDataType;
1:349c59c: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
1:349c59c: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1:d96f09a: 
1:496cde4: public class ComplexFieldConverterImpl extends AbstractDictionaryFieldConverterImpl {
1:496cde4: 
1:496cde4:   private GenericDataType genericDataType;
1:496cde4: 
1:496cde4:   private int index;
1:496cde4: 
1:496cde4:   public ComplexFieldConverterImpl(GenericDataType genericDataType, int index) {
1:496cde4:     this.genericDataType = genericDataType;
1:496cde4:     this.index = index;
1:496cde4:   }
1:d96f09a: 
1:d96f09a:   @Override
1:496cde4:   public void convert(CarbonRow row, BadRecordLogHolder logHolder) {
1:496cde4:     Object object = row.getObject(index);
1:cd7c210:     row.update(convert(object, logHolder), index);
1:cd7c210:   }
1:cd7c210: 
1:cd7c210:   @Override
1:cd7c210:   public Object convert(Object value, BadRecordLogHolder logHolder) throws RuntimeException {
1:496cde4:     // TODO Its temporary, needs refactor here.
1:496cde4:     ByteArrayOutputStream byteArray = new ByteArrayOutputStream();
1:496cde4:     DataOutputStream dataOutputStream = new DataOutputStream(byteArray);
1:496cde4:     try {
1:cd7c210:       genericDataType.writeByteArray(value, dataOutputStream, logHolder);
1:496cde4:       dataOutputStream.close();
1:cd7c210:       return byteArray.toByteArray();
1:496cde4:     } catch (Exception e) {
1:cd7c210:       throw new CarbonDataLoadingException(value + "", e);
1:496cde4:     }
1:496cde4:   }
1:496cde4: 
1:f79b9ea:   /**
1:f79b9ea:    * Method to clear out the dictionary caches. In this instance nothing to clear.
1:f79b9ea:    */
1:f79b9ea:   @Override public void clear() {
1:f79b9ea:   }
1:f79b9ea: 
1:496cde4:   @Override public void fillColumnCardinality(List<Integer> cardinality) {
1:496cde4:     genericDataType.fillCardinality(cardinality);
1:d96f09a:   }
1:d96f09a: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1:     row.update(convert(object, logHolder), index);
1:   }
1: 
1:   @Override
1:   public Object convert(Object value, BadRecordLogHolder logHolder) throws RuntimeException {
1:       genericDataType.writeByteArray(value, dataOutputStream, logHolder);
1:       return byteArray.toByteArray();
1:       throw new CarbonDataLoadingException(value + "", e);
author:kunal642
-------------------------------------------------------------------------------
commit:6b70b7e
/////////////////////////////////////////////////////////////////////////
0:       genericDataType.writeByteArray(object, dataOutputStream, logHolder);
author:sounakr
-------------------------------------------------------------------------------
commit:f79b9ea
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Method to clear out the dictionary caches. In this instance nothing to clear.
1:    */
1:   @Override public void clear() {
1:   }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.converter.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
1: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
commit:f089287
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.datatypes.GenericDataType;
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.GenericDataType;
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
author:QiangCai
-------------------------------------------------------------------------------
commit:256dbed
/////////////////////////////////////////////////////////////////////////
0:       throw new CarbonDataLoadingException(object + "", e);
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.util.List;
1: 
0: import org.apache.carbondata.processing.datatypes.GenericDataType;
0: import org.apache.carbondata.processing.newflow.converter.BadRecordLogHolder;
0: import org.apache.carbondata.processing.newflow.exception.CarbonDataLoadingException;
1: public class ComplexFieldConverterImpl extends AbstractDictionaryFieldConverterImpl {
1: 
1:   private GenericDataType genericDataType;
1: 
1:   private int index;
1: 
1:   public ComplexFieldConverterImpl(GenericDataType genericDataType, int index) {
1:     this.genericDataType = genericDataType;
1:     this.index = index;
1:   }
1:   public void convert(CarbonRow row, BadRecordLogHolder logHolder) {
1:     Object object = row.getObject(index);
1:     // TODO Its temporary, needs refactor here.
1:     ByteArrayOutputStream byteArray = new ByteArrayOutputStream();
1:     DataOutputStream dataOutputStream = new DataOutputStream(byteArray);
1:     try {
0:       genericDataType.writeByteArray(object, dataOutputStream);
1:       dataOutputStream.close();
0:       row.update(byteArray.toByteArray(), index);
1:     } catch (Exception e) {
0:       throw new CarbonDataLoadingException(object+"", e);
1:     }
1:   }
1: 
1:   @Override public void fillColumnCardinality(List<Integer> cardinality) {
1:     genericDataType.fillCardinality(cardinality);
commit:d96f09a
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.newflow.converter.impl;
1: 
0: import org.apache.carbondata.processing.newflow.converter.FieldConverter;
0: import org.apache.carbondata.processing.newflow.row.CarbonRow;
1: 
0: public class ComplexFieldConverterImpl implements FieldConverter {
1: 
1:   @Override
0:   public void convert(CarbonRow row) {
1:   }
1: }
============================================================================