1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:cd6a4ff: 
1:eaadc88: import java.io.IOException;
1:cd6a4ff: import java.util.ArrayList;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: import java.util.concurrent.Callable;
1:377dee9: import java.util.concurrent.ConcurrentHashMap;
1:cd6a4ff: import java.util.concurrent.ExecutorService;
1:cd6a4ff: import java.util.concurrent.Executors;
1:cd6a4ff: import java.util.concurrent.Future;
1:cd6a4ff: import java.util.concurrent.TimeUnit;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.common.logging.LogService;
1:cd6a4ff: import org.apache.carbondata.common.logging.LogServiceFactory;
1:cd6a4ff: import org.apache.carbondata.core.cache.CacheType;
1:cd6a4ff: import org.apache.carbondata.core.cache.CarbonLRUCache;
1:377dee9: import org.apache.carbondata.core.reader.CarbonDictionaryColumnMetaChunk;
1:377dee9: import org.apache.carbondata.core.util.CarbonUtil;
1:377dee9: import org.apache.carbondata.core.util.ObjectSizeCalculator;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * This class implements methods to create dictionary cache which will hold
1:cd6a4ff:  * dictionary chunks for look up of surrogate keys and values
1:cd6a4ff:  */
1:cd6a4ff: public class ReverseDictionaryCache<K extends DictionaryColumnUniqueIdentifier,
1:cd6a4ff:     V extends Dictionary>
1:cd6a4ff:     extends AbstractDictionaryCache<K, V> {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Attribute for Carbon LOGGER
1:cd6a4ff:    */
1:cd6a4ff:   private static final LogService LOGGER =
1:be05695:       LogServiceFactory.getLogService(ReverseDictionaryCache.class.getName());
1:cd6a4ff: 
1:377dee9:   private static final long sizeOfEmptyDictChunks =
1:377dee9:       ObjectSizeCalculator.estimate(new ArrayList<byte[]>(CarbonUtil.getDictionaryChunkSize()), 16);
1:377dee9: 
1:377dee9:   private static final long sizeOfEmptyHashMap = ObjectSizeCalculator.estimate(new
1:377dee9:       ConcurrentHashMap<DictionaryByteArrayWrapper,
1:377dee9:           Integer>(CarbonUtil.getDictionaryChunkSize()), 16);
1:377dee9: 
1:377dee9:   private static final long sizeOfHashMapNode = ObjectSizeCalculator.estimate(new
1:377dee9:       DictionaryByteArrayWrapper(new byte[0]), 16) +
1:500654e:       ObjectSizeCalculator.estimate(0, 16);
1:377dee9: 
1:377dee9:   private static final long byteArraySize = ObjectSizeCalculator.estimate(new byte[0], 16);
1:377dee9: 
1:377dee9: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @param carbonLRUCache
1:cd6a4ff:    */
1:1155d4d:   public ReverseDictionaryCache(CarbonLRUCache carbonLRUCache) {
1:1155d4d:     super(carbonLRUCache);
2:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will get the value for the given key. If value does not exist
1:cd6a4ff:    * for the given key, it will check and load the value.
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryColumnUniqueIdentifier unique identifier which contains dbName,
1:cd6a4ff:    *                                         tableName and columnIdentifier
1:cd6a4ff:    * @return dictionary
1:eaadc88:    * @throws IOException in case memory is not sufficient to load dictionary into memory
1:cd6a4ff:    */
1:cd6a4ff:   @Override public Dictionary get(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier)
1:eaadc88:       throws IOException {
1:cd6a4ff:     return getDictionary(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will return a list of values for the given list of keys.
1:cd6a4ff:    * For each key, this method will check and load the data if required.
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryColumnUniqueIdentifiers unique identifier which contains dbName,
1:cd6a4ff:    *                                          tableName and columnIdentifier
1:cd6a4ff:    * @return list of dictionary
1:eaadc88:    * @throws IOException in case memory is not sufficient to load dictionary into memory
1:cd6a4ff:    */
1:cd6a4ff:   @Override public List<Dictionary> getAll(
1:cd6a4ff:       List<DictionaryColumnUniqueIdentifier> dictionaryColumnUniqueIdentifiers)
1:eaadc88:       throws IOException {
1:cd6a4ff:     boolean exceptionOccurredInDictionaryLoading = false;
1:cd6a4ff:     String exceptionMessage = "";
1:cd6a4ff:     List<Dictionary> reverseDictionaryObjectList =
1:cd6a4ff:         new ArrayList<Dictionary>(dictionaryColumnUniqueIdentifiers.size());
1:cd6a4ff:     List<Future<Dictionary>> taskSubmitList =
1:cd6a4ff:         new ArrayList<>(dictionaryColumnUniqueIdentifiers.size());
1:cd6a4ff:     ExecutorService executorService = Executors.newFixedThreadPool(thread_pool_size);
1:cd6a4ff:     for (final DictionaryColumnUniqueIdentifier uniqueIdent : dictionaryColumnUniqueIdentifiers) {
1:cd6a4ff:       taskSubmitList.add(executorService.submit(new Callable<Dictionary>() {
1:eaadc88:         @Override public Dictionary call() throws IOException {
1:81149f6:           return getDictionary(uniqueIdent);
1:cd6a4ff:         }
1:cd6a4ff:       }));
1:cd6a4ff:     }
1:cd6a4ff:     try {
1:cd6a4ff:       executorService.shutdown();
1:cd6a4ff:       executorService.awaitTermination(2, TimeUnit.HOURS);
1:cd6a4ff:     } catch (InterruptedException e) {
1:cd6a4ff:       LOGGER.error("Error loading the dictionary: " + e.getMessage());
1:cd6a4ff:     }
1:cd6a4ff:     for (int i = 0; i < taskSubmitList.size(); i++) {
1:cd6a4ff:       try {
1:cd6a4ff:         Dictionary columnDictionary = taskSubmitList.get(i).get();
1:cd6a4ff:         reverseDictionaryObjectList.add(columnDictionary);
1:cd6a4ff:       } catch (Throwable e) {
1:cd6a4ff:         exceptionOccurredInDictionaryLoading = true;
1:cd6a4ff:         exceptionMessage = e.getMessage();
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     if (exceptionOccurredInDictionaryLoading) {
1:cd6a4ff:       clearDictionary(reverseDictionaryObjectList);
1:cd6a4ff:       LOGGER.error(exceptionMessage);
1:eaadc88:       throw new IOException(exceptionMessage);
1:cd6a4ff:     }
1:cd6a4ff:     return reverseDictionaryObjectList;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will return the value for the given key. It will not check and load
1:cd6a4ff:    * the data for the given key
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryColumnUniqueIdentifier unique identifier which contains dbName,
1:cd6a4ff:    *                                         tableName and columnIdentifier
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   @Override public Dictionary getIfPresent(
1:cd6a4ff:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:cd6a4ff:     Dictionary reverseDictionary = null;
1:cd6a4ff:     ColumnReverseDictionaryInfo columnReverseDictionaryInfo =
1:cd6a4ff:         (ColumnReverseDictionaryInfo) carbonLRUCache.get(
1:cd6a4ff:             getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),
1:cd6a4ff:                 CacheType.REVERSE_DICTIONARY));
1:cd6a4ff:     if (null != columnReverseDictionaryInfo) {
1:cd6a4ff:       reverseDictionary = new ReverseDictionary(columnReverseDictionaryInfo);
1:cd6a4ff:       incrementDictionaryAccessCount(columnReverseDictionaryInfo);
1:cd6a4ff:     }
1:cd6a4ff:     return reverseDictionary;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will remove the cache for a given key
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryColumnUniqueIdentifier unique identifier which contains dbName,
1:cd6a4ff:    *                                         tableName and columnIdentifier
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void invalidate(
1:cd6a4ff:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:cd6a4ff:     carbonLRUCache.remove(
1:cd6a4ff:         getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),
1:cd6a4ff:             CacheType.REVERSE_DICTIONARY));
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will get the value for the given key. If value does not exist
1:cd6a4ff:    * for the given key, it will check and load the value.
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryColumnUniqueIdentifier unique identifier which contains dbName,
1:cd6a4ff:    *                                         tableName and columnIdentifier
1:cd6a4ff:    * @return dictionary
1:eaadc88:    * @throws IOException in case memory is not sufficient to load dictionary into memory
1:cd6a4ff:    */
1:cd6a4ff:   private Dictionary getDictionary(
1:cd6a4ff:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier)
1:eaadc88:       throws IOException {
1:cd6a4ff:     Dictionary reverseDictionary = null;
1:f031394:     // dictionary is only for primitive data type
1:256dbed:     assert (!dictionaryColumnUniqueIdentifier.getDataType().isComplexType());
1:cd6a4ff:     String columnIdentifier = dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId();
1:cd6a4ff:     ColumnReverseDictionaryInfo columnReverseDictionaryInfo =
1:cd6a4ff:         getColumnReverseDictionaryInfo(dictionaryColumnUniqueIdentifier, columnIdentifier);
1:cd6a4ff:     // do not load sort index file for reverse dictionary
1:cd6a4ff:     checkAndLoadDictionaryData(dictionaryColumnUniqueIdentifier, columnReverseDictionaryInfo,
1:cd6a4ff:         getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),
1:cd6a4ff:             CacheType.REVERSE_DICTIONARY), false);
1:cd6a4ff:     reverseDictionary = new ReverseDictionary(columnReverseDictionaryInfo);
1:cd6a4ff:     return reverseDictionary;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will check and create columnReverseDictionaryInfo object for the given column
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryColumnUniqueIdentifier
1:cd6a4ff:    * @param columnIdentifier
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   private ColumnReverseDictionaryInfo getColumnReverseDictionaryInfo(
1:cd6a4ff:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier, String columnIdentifier) {
1:cd6a4ff:     ColumnReverseDictionaryInfo columnReverseDictionaryInfo =
1:cd6a4ff:         (ColumnReverseDictionaryInfo) carbonLRUCache
1:cd6a4ff:             .get(getLruCacheKey(columnIdentifier, CacheType.REVERSE_DICTIONARY));
1:cd6a4ff:     if (null == columnReverseDictionaryInfo) {
1:cd6a4ff:       synchronized (dictionaryColumnUniqueIdentifier) {
1:cd6a4ff:         columnReverseDictionaryInfo = (ColumnReverseDictionaryInfo) carbonLRUCache
1:cd6a4ff:             .get(getLruCacheKey(columnIdentifier, CacheType.REVERSE_DICTIONARY));
1:cd6a4ff:         if (null == columnReverseDictionaryInfo) {
1:cd6a4ff:           columnReverseDictionaryInfo = new ColumnReverseDictionaryInfo();
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     return columnReverseDictionaryInfo;
1:cd6a4ff:   }
1:d53feef: 
1:d53feef:   @Override public void clearAccessCount(List<DictionaryColumnUniqueIdentifier> keys) {
1:d53feef:     for (DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier : keys) {
1:d53feef:       Dictionary cacheable = (Dictionary) carbonLRUCache.get(
1:d53feef:           getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),
1:d53feef:               CacheType.REVERSE_DICTIONARY));
1:d53feef:       cacheable.clear();
1:d53feef:     }
1:d53feef:   }
1:377dee9: 
1:377dee9:   @Override protected long getEstimatedDictionarySize(DictionaryInfo dictionaryInfo,
1:377dee9:       CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk,
1:377dee9:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier, boolean
1:377dee9:       readSortIndexSize) throws IOException {
1:377dee9:     // required size will be size total size of file - offset till file is
1:377dee9:     // already read
1:377dee9:     long requiredSize =
1:377dee9:         carbonDictionaryColumnMetaChunk.getEnd_offset() -
1:377dee9:             dictionaryInfo.getOffsetTillFileIsRead();
1:377dee9: 
1:377dee9:     long numOfRecords = dictionaryInfo.getOffsetTillFileIsRead() == 0 ?
1:377dee9:         carbonDictionaryColumnMetaChunk.getMax_surrogate_key() :
1:377dee9:         carbonDictionaryColumnMetaChunk.getMax_surrogate_key()
1:377dee9:             - getNumRecordsInCarbonDictionaryColumnMetaChunk(
1:377dee9:             dictionaryColumnUniqueIdentifier,
1:377dee9:             dictionaryInfo.getOffsetTillFileIsRead());
1:377dee9: 
1:377dee9:     if (numOfRecords > 0) {
1:377dee9:       long avgRecordsSize = requiredSize / numOfRecords;
1:377dee9:       long bytesPerRecord = (long)Math.ceil(avgRecordsSize / 8.0) * 8;
1:377dee9: 
1:377dee9:       requiredSize = (bytesPerRecord + byteArraySize) * numOfRecords;
1:377dee9:     }
1:377dee9: 
1:377dee9:     if (readSortIndexSize) {
1:377dee9:       // every time we are loading all the sort index files.Hence memory calculation for all
1:377dee9:       // the records
1:377dee9:       requiredSize = requiredSize + getSortIndexSize(
1:377dee9:           carbonDictionaryColumnMetaChunk.getMax_surrogate_key());
1:377dee9:     }
1:377dee9: 
1:377dee9:     requiredSize = requiredSize + (sizeOfHashMapNode * numOfRecords);
1:377dee9: 
1:377dee9:     return requiredSize + sizeOfEmptyDictChunks + sizeOfEmptyHashMap;
1:377dee9:   }
1:cd6a4ff: }
============================================================================
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1:   public ReverseDictionaryCache(CarbonLRUCache carbonLRUCache) {
1:     super(carbonLRUCache);
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1:       ObjectSizeCalculator.estimate(0, 16);
author:Raghunandan S
-------------------------------------------------------------------------------
commit:377dee9
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.reader.CarbonDictionaryColumnMetaChunk;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.apache.carbondata.core.util.ObjectSizeCalculator;
/////////////////////////////////////////////////////////////////////////
1:   private static final long sizeOfEmptyDictChunks =
1:       ObjectSizeCalculator.estimate(new ArrayList<byte[]>(CarbonUtil.getDictionaryChunkSize()), 16);
1: 
1:   private static final long sizeOfEmptyHashMap = ObjectSizeCalculator.estimate(new
1:       ConcurrentHashMap<DictionaryByteArrayWrapper,
1:           Integer>(CarbonUtil.getDictionaryChunkSize()), 16);
1: 
1:   private static final long sizeOfHashMapNode = ObjectSizeCalculator.estimate(new
1:       DictionaryByteArrayWrapper(new byte[0]), 16) +
0:       ObjectSizeCalculator.estimate(new Integer(0), 16);
1: 
1:   private static final long byteArraySize = ObjectSizeCalculator.estimate(new byte[0], 16);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override protected long getEstimatedDictionarySize(DictionaryInfo dictionaryInfo,
1:       CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk,
1:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier, boolean
1:       readSortIndexSize) throws IOException {
1:     // required size will be size total size of file - offset till file is
1:     // already read
1:     long requiredSize =
1:         carbonDictionaryColumnMetaChunk.getEnd_offset() -
1:             dictionaryInfo.getOffsetTillFileIsRead();
1: 
1:     long numOfRecords = dictionaryInfo.getOffsetTillFileIsRead() == 0 ?
1:         carbonDictionaryColumnMetaChunk.getMax_surrogate_key() :
1:         carbonDictionaryColumnMetaChunk.getMax_surrogate_key()
1:             - getNumRecordsInCarbonDictionaryColumnMetaChunk(
1:             dictionaryColumnUniqueIdentifier,
1:             dictionaryInfo.getOffsetTillFileIsRead());
1: 
1:     if (numOfRecords > 0) {
1:       long avgRecordsSize = requiredSize / numOfRecords;
1:       long bytesPerRecord = (long)Math.ceil(avgRecordsSize / 8.0) * 8;
1: 
1:       requiredSize = (bytesPerRecord + byteArraySize) * numOfRecords;
1:     }
1: 
1:     if (readSortIndexSize) {
1:       // every time we are loading all the sort index files.Hence memory calculation for all
1:       // the records
1:       requiredSize = requiredSize + getSortIndexSize(
1:           carbonDictionaryColumnMetaChunk.getMax_surrogate_key());
1:     }
1: 
1:     requiredSize = requiredSize + (sizeOfHashMapNode * numOfRecords);
1: 
1:     return requiredSize + sizeOfEmptyDictChunks + sizeOfEmptyHashMap;
1:   }
author:xuchuanyin
-------------------------------------------------------------------------------
commit:be05695
/////////////////////////////////////////////////////////////////////////
1:       LogServiceFactory.getLogService(ReverseDictionaryCache.class.getName());
author:QiangCai
-------------------------------------------------------------------------------
commit:81149f6
/////////////////////////////////////////////////////////////////////////
1:           return getDictionary(uniqueIdent);
commit:256dbed
/////////////////////////////////////////////////////////////////////////
1:     assert (!dictionaryColumnUniqueIdentifier.getDataType().isComplexType());
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:    * @throws IOException in case memory is not sufficient to load dictionary into memory
1:       throws IOException {
/////////////////////////////////////////////////////////////////////////
1:    * @throws IOException in case memory is not sufficient to load dictionary into memory
1:       throws IOException {
/////////////////////////////////////////////////////////////////////////
1:         @Override public Dictionary call() throws IOException {
/////////////////////////////////////////////////////////////////////////
1:       throw new IOException(exceptionMessage);
/////////////////////////////////////////////////////////////////////////
1:    * @throws IOException in case memory is not sufficient to load dictionary into memory
1:       throws IOException {
commit:f031394
/////////////////////////////////////////////////////////////////////////
1:     // dictionary is only for primitive data type
0:     assert(!dictionaryColumnUniqueIdentifier.getDataType().isComplexType());
author:Venkata Ramana G
-------------------------------------------------------------------------------
commit:d53feef
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override public void clearAccessCount(List<DictionaryColumnUniqueIdentifier> keys) {
1:     for (DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier : keys) {
1:       Dictionary cacheable = (Dictionary) carbonLRUCache.get(
1:           getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),
1:               CacheType.REVERSE_DICTIONARY));
1:       cacheable.clear();
1:     }
1:   }
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.cache.CacheType;
1: import org.apache.carbondata.core.cache.CarbonLRUCache;
0: import org.apache.carbondata.core.util.CarbonUtilException;
1: 
1: /**
1:  * This class implements methods to create dictionary cache which will hold
1:  * dictionary chunks for look up of surrogate keys and values
1:  */
1: public class ReverseDictionaryCache<K extends DictionaryColumnUniqueIdentifier,
1:     V extends Dictionary>
1:     extends AbstractDictionaryCache<K, V> {
1: 
1:   /**
1:    * Attribute for Carbon LOGGER
1:    */
1:   private static final LogService LOGGER =
0:       LogServiceFactory.getLogService(ForwardDictionaryCache.class.getName());
1: 
1:   /**
0:    * @param carbonStorePath
1:    * @param carbonLRUCache
1:    */
0:   public ReverseDictionaryCache(String carbonStorePath, CarbonLRUCache carbonLRUCache) {
0:     super(carbonStorePath, carbonLRUCache);
1:   }
1: 
1:   /**
1:    * This method will get the value for the given key. If value does not exist
1:    * for the given key, it will check and load the value.
1:    *
1:    * @param dictionaryColumnUniqueIdentifier unique identifier which contains dbName,
1:    *                                         tableName and columnIdentifier
1:    * @return dictionary
0:    * @throws CarbonUtilException in case memory is not sufficient to load dictionary into memory
1:    */
1:   @Override public Dictionary get(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier)
0:       throws CarbonUtilException {
1:     return getDictionary(dictionaryColumnUniqueIdentifier);
1:   }
1: 
1:   /**
1:    * This method will return a list of values for the given list of keys.
1:    * For each key, this method will check and load the data if required.
1:    *
1:    * @param dictionaryColumnUniqueIdentifiers unique identifier which contains dbName,
1:    *                                          tableName and columnIdentifier
1:    * @return list of dictionary
0:    * @throws CarbonUtilException in case memory is not sufficient to load dictionary into memory
1:    */
1:   @Override public List<Dictionary> getAll(
1:       List<DictionaryColumnUniqueIdentifier> dictionaryColumnUniqueIdentifiers)
0:       throws CarbonUtilException {
1:     boolean exceptionOccurredInDictionaryLoading = false;
1:     String exceptionMessage = "";
1:     List<Dictionary> reverseDictionaryObjectList =
1:         new ArrayList<Dictionary>(dictionaryColumnUniqueIdentifiers.size());
1:     List<Future<Dictionary>> taskSubmitList =
1:         new ArrayList<>(dictionaryColumnUniqueIdentifiers.size());
1:     ExecutorService executorService = Executors.newFixedThreadPool(thread_pool_size);
1:     for (final DictionaryColumnUniqueIdentifier uniqueIdent : dictionaryColumnUniqueIdentifiers) {
1:       taskSubmitList.add(executorService.submit(new Callable<Dictionary>() {
0:         @Override public Dictionary call() throws CarbonUtilException {
0:           Dictionary dictionary = getDictionary(uniqueIdent);
0:           return dictionary;
1:         }
1:       }));
1:     }
1:     try {
1:       executorService.shutdown();
1:       executorService.awaitTermination(2, TimeUnit.HOURS);
1:     } catch (InterruptedException e) {
1:       LOGGER.error("Error loading the dictionary: " + e.getMessage());
1:     }
1:     for (int i = 0; i < taskSubmitList.size(); i++) {
1:       try {
1:         Dictionary columnDictionary = taskSubmitList.get(i).get();
1:         reverseDictionaryObjectList.add(columnDictionary);
1:       } catch (Throwable e) {
1:         exceptionOccurredInDictionaryLoading = true;
1:         exceptionMessage = e.getMessage();
1:       }
1:     }
1:     if (exceptionOccurredInDictionaryLoading) {
1:       clearDictionary(reverseDictionaryObjectList);
1:       LOGGER.error(exceptionMessage);
0:       throw new CarbonUtilException(exceptionMessage);
1:     }
1:     return reverseDictionaryObjectList;
1:   }
1: 
1:   /**
1:    * This method will return the value for the given key. It will not check and load
1:    * the data for the given key
1:    *
1:    * @param dictionaryColumnUniqueIdentifier unique identifier which contains dbName,
1:    *                                         tableName and columnIdentifier
1:    * @return
1:    */
1:   @Override public Dictionary getIfPresent(
1:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:     Dictionary reverseDictionary = null;
1:     ColumnReverseDictionaryInfo columnReverseDictionaryInfo =
1:         (ColumnReverseDictionaryInfo) carbonLRUCache.get(
1:             getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),
1:                 CacheType.REVERSE_DICTIONARY));
1:     if (null != columnReverseDictionaryInfo) {
1:       reverseDictionary = new ReverseDictionary(columnReverseDictionaryInfo);
1:       incrementDictionaryAccessCount(columnReverseDictionaryInfo);
1:     }
1:     return reverseDictionary;
1:   }
1: 
1:   /**
1:    * This method will remove the cache for a given key
1:    *
1:    * @param dictionaryColumnUniqueIdentifier unique identifier which contains dbName,
1:    *                                         tableName and columnIdentifier
1:    */
1:   @Override public void invalidate(
1:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:     carbonLRUCache.remove(
1:         getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),
1:             CacheType.REVERSE_DICTIONARY));
1:   }
1: 
1:   /**
1:    * This method will get the value for the given key. If value does not exist
1:    * for the given key, it will check and load the value.
1:    *
1:    * @param dictionaryColumnUniqueIdentifier unique identifier which contains dbName,
1:    *                                         tableName and columnIdentifier
1:    * @return dictionary
0:    * @throws CarbonUtilException in case memory is not sufficient to load dictionary into memory
1:    */
1:   private Dictionary getDictionary(
1:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier)
0:       throws CarbonUtilException {
1:     Dictionary reverseDictionary = null;
0:     // create column dictionary info object only if dictionary and its
0:     // metadata file exists for a given column identifier
0:     if (!isFileExistsForGivenColumn(dictionaryColumnUniqueIdentifier)) {
0:       throw new CarbonUtilException(
0:           "Either dictionary or its metadata does not exist for column identifier :: "
0:               + dictionaryColumnUniqueIdentifier.getColumnIdentifier());
1:     }
1:     String columnIdentifier = dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId();
1:     ColumnReverseDictionaryInfo columnReverseDictionaryInfo =
1:         getColumnReverseDictionaryInfo(dictionaryColumnUniqueIdentifier, columnIdentifier);
1:     // do not load sort index file for reverse dictionary
1:     checkAndLoadDictionaryData(dictionaryColumnUniqueIdentifier, columnReverseDictionaryInfo,
1:         getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),
1:             CacheType.REVERSE_DICTIONARY), false);
1:     reverseDictionary = new ReverseDictionary(columnReverseDictionaryInfo);
1:     return reverseDictionary;
1:   }
1: 
1:   /**
1:    * This method will check and create columnReverseDictionaryInfo object for the given column
1:    *
1:    * @param dictionaryColumnUniqueIdentifier
1:    * @param columnIdentifier
1:    * @return
1:    */
1:   private ColumnReverseDictionaryInfo getColumnReverseDictionaryInfo(
1:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier, String columnIdentifier) {
1:     ColumnReverseDictionaryInfo columnReverseDictionaryInfo =
1:         (ColumnReverseDictionaryInfo) carbonLRUCache
1:             .get(getLruCacheKey(columnIdentifier, CacheType.REVERSE_DICTIONARY));
1:     if (null == columnReverseDictionaryInfo) {
1:       synchronized (dictionaryColumnUniqueIdentifier) {
1:         columnReverseDictionaryInfo = (ColumnReverseDictionaryInfo) carbonLRUCache
1:             .get(getLruCacheKey(columnIdentifier, CacheType.REVERSE_DICTIONARY));
1:         if (null == columnReverseDictionaryInfo) {
1:           columnReverseDictionaryInfo = new ColumnReverseDictionaryInfo();
1:         }
1:       }
1:     }
1:     return columnReverseDictionaryInfo;
1:   }
1: }
============================================================================