1:df5d7a9: /*
1:df5d7a9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:df5d7a9:  * contributor license agreements.  See the NOTICE file distributed with
1:df5d7a9:  * this work for additional information regarding copyright ownership.
1:df5d7a9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:df5d7a9:  * (the "License"); you may not use this file except in compliance with
1:df5d7a9:  * the License.  You may obtain a copy of the License at
1:f7c0670:  *
1:df5d7a9:  *    http://www.apache.org/licenses/LICENSE-2.0
2:df5d7a9:  *
1:df5d7a9:  * Unless required by applicable law or agreed to in writing, software
1:df5d7a9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:df5d7a9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:df5d7a9:  * See the License for the specific language governing permissions and
1:df5d7a9:  * limitations under the License.
4:f910cfa:  */
5:df5d7a9: 
1:df5d7a9: package org.apache.carbondata.sdk.file;
1:df5d7a9: 
1:df5d7a9: import java.io.IOException;
1:5b2b913: import java.text.SimpleDateFormat;
1:5b2b913: import java.util.Date;
1:df5d7a9: import java.util.List;
1:df5d7a9: 
1:f910cfa: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:f910cfa: import org.apache.carbondata.common.annotations.InterfaceStability;
1:92d9b92: import org.apache.carbondata.core.util.CarbonTaskInfo;
1:92d9b92: import org.apache.carbondata.core.util.ThreadLocalTaskInfo;
1:f910cfa: 
1:df5d7a9: import org.apache.hadoop.mapreduce.RecordReader;
1:8896a63: 
1:df5d7a9: 
1:f910cfa: /**
1:f910cfa:  * Reader for carbondata file
1:f910cfa:  */
1:f910cfa: @InterfaceAudience.User
1:f910cfa: @InterfaceStability.Evolving
1:df5d7a9: public class CarbonReader<T> {
1:f910cfa: 
1:df5d7a9:   private List<RecordReader<Void, T>> readers;
1:df5d7a9: 
1:df5d7a9:   private RecordReader<Void, T> currentReader;
1:df5d7a9: 
1:df5d7a9:   private int index;
1:df5d7a9: 
1:a7ac656:   private boolean initialise;
1:a7ac656: 
1:f910cfa:   /**
1:f910cfa:    * Call {@link #builder(String)} to construct an instance
1:f910cfa:    */
1:df5d7a9:   CarbonReader(List<RecordReader<Void, T>> readers) {
1:df5d7a9:     if (readers.size() == 0) {
1:df5d7a9:       throw new IllegalArgumentException("no reader");
1:f910cfa:     }
1:a7ac656:     this.initialise = true;
1:df5d7a9:     this.readers = readers;
1:df5d7a9:     this.index = 0;
1:df5d7a9:     this.currentReader = readers.get(0);
1:92d9b92:     CarbonTaskInfo carbonTaskInfo = new CarbonTaskInfo();
1:92d9b92:     carbonTaskInfo.setTaskId(System.nanoTime());
1:92d9b92:     ThreadLocalTaskInfo.setCarbonTaskInfo(carbonTaskInfo);
1:8896a63:   }
1:8896a63: 
1:8896a63:   /**
1:f910cfa:    * Return true if has next row
1:8896a63:    */
1:df5d7a9:   public boolean hasNext() throws IOException, InterruptedException {
1:a7ac656:     validateReader();
1:df5d7a9:     if (currentReader.nextKeyValue()) {
1:df5d7a9:       return true;
1:df5d7a9:     } else {
1:df5d7a9:       if (index == readers.size() - 1) {
1:df5d7a9:         // no more readers
1:df5d7a9:         return false;
1:df5d7a9:       } else {
1:df5d7a9:         index++;
1:19312ab:         // current reader is closed
1:19312ab:         currentReader.close();
1:df5d7a9:         currentReader = readers.get(index);
1:df5d7a9:         return currentReader.nextKeyValue();
1:8896a63:       }
1:8896a63:     }
1:8896a63:   }
1:a7ac656: 
1:a7ac656:   /**
1:f910cfa:    * Read and return next row object
1:f7c0670:    */
1:df5d7a9:   public T readNextRow() throws IOException, InterruptedException {
1:a7ac656:     validateReader();
1:df5d7a9:     return currentReader.getCurrentValue();
1:8896a63:   }
1:f7c0670: 
1:f7c0670:   /**
1:f910cfa:    * Return a new {@link CarbonReaderBuilder} instance
1:5b2b913:    *
1:5b2b913:    * @param tablePath table store path
1:5b2b913:    * @param tableName table name
1:5b2b913:    * @return CarbonReaderBuilder object
1:f910cfa:    */
1:280a400:   public static CarbonReaderBuilder builder(String tablePath, String tableName) {
1:280a400:     return new CarbonReaderBuilder(tablePath, tableName);
1:a7ac656:   }
1:f910cfa: 
1:f910cfa:   /**
1:5b2b913:    * Return a new {@link CarbonReaderBuilder} instance
1:5b2b913:    * Default value of table name is table + tablePath + time
1:5b2b913:    *
1:5b2b913:    * @param tablePath table path
1:5b2b913:    * @return CarbonReaderBuilder object
1:5b2b913:    */
1:5b2b913:   public static CarbonReaderBuilder builder(String tablePath) {
1:5b2b913:     String time = new SimpleDateFormat("yyyyMMddHHmmssSSS").format(new Date());
1:5b2b913:     String tableName = "UnknownTable" + time;
1:5b2b913:     return builder(tablePath, tableName);
1:5b2b913:   }
1:5b2b913: 
1:5b2b913:   /**
1:f7c0670:    * Close reader
1:8896a63:    *
1:8896a63:    * @throws IOException
1:8896a63:    */
1:f7c0670:   public void close() throws IOException {
1:a7ac656:     validateReader();
1:f7c0670:     this.currentReader.close();
1:a7ac656:     this.initialise = false;
1:8896a63:   }
1:8896a63: 
1:8896a63:   /**
1:a7ac656:    * Validate the reader
1:a7ac656:    */
1:a7ac656:   private void validateReader() {
1:a7ac656:     if (!this.initialise) {
1:a7ac656:       throw new RuntimeException(this.getClass().getSimpleName() +
1:a7ac656:           " not initialise, please create it first.");
1:a7ac656:     }
1:f7c0670:   }
1:f910cfa: }
============================================================================
author:rahul
-------------------------------------------------------------------------------
commit:19312ab
/////////////////////////////////////////////////////////////////////////
1:         // current reader is closed
1:         currentReader.close();
author:rahulforallp
-------------------------------------------------------------------------------
commit:92d9b92
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.CarbonTaskInfo;
1: import org.apache.carbondata.core.util.ThreadLocalTaskInfo;
/////////////////////////////////////////////////////////////////////////
1:     CarbonTaskInfo carbonTaskInfo = new CarbonTaskInfo();
1:     carbonTaskInfo.setTaskId(System.nanoTime());
1:     ThreadLocalTaskInfo.setCarbonTaskInfo(carbonTaskInfo);
author:xubo245
-------------------------------------------------------------------------------
commit:5b2b913
/////////////////////////////////////////////////////////////////////////
1: import java.text.SimpleDateFormat;
1: import java.util.Date;
/////////////////////////////////////////////////////////////////////////
1:    *
1:    * @param tablePath table store path
1:    * @param tableName table name
1:    * @return CarbonReaderBuilder object
1:    * Return a new {@link CarbonReaderBuilder} instance
1:    * Default value of table name is table + tablePath + time
1:    *
1:    * @param tablePath table path
1:    * @return CarbonReaderBuilder object
1:    */
1:   public static CarbonReaderBuilder builder(String tablePath) {
1:     String time = new SimpleDateFormat("yyyyMMddHHmmssSSS").format(new Date());
1:     String tableName = "UnknownTable" + time;
1:     return builder(tablePath, tableName);
1:   }
1: 
1:   /**
commit:e740182
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8896a63
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataInputStream;
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.Comparator;
0: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
0: import org.apache.carbondata.core.datastore.impl.FileFactory;
0: import org.apache.carbondata.core.reader.CarbonIndexFileReader;
0: import org.apache.carbondata.core.util.path.CarbonTablePath;
0: import static org.apache.carbondata.core.util.CarbonUtil.thriftColumnSchemaToWrapperColumnSchema;
1: 
/////////////////////////////////////////////////////////////////////////
0:    * Read carbonindex file and return the schema
1:    *
0:    * @param indexFilePath complete path including index file name
0:    * @return null, if the index file is not present in the path.
0:    * List<ColumnSchema> from the index file.
1:    * @throws IOException
1:    */
0:   public static List<ColumnSchema> readSchemaInIndexFile(String indexFilePath) throws IOException {
0:     CarbonFile indexFile =
0:         FileFactory.getCarbonFile(indexFilePath, FileFactory.getFileType(indexFilePath));
0:     if (!indexFile.getName().endsWith(CarbonTablePath.INDEX_FILE_EXT)) {
0:       throw new IOException("Not an index file name");
1:     }
0:     // read schema from the first index file
0:     DataInputStream dataInputStream =
0:         FileFactory.getDataInputStream(indexFilePath, FileFactory.getFileType(indexFilePath));
0:     byte[] bytes = new byte[(int) indexFile.getSize()];
0:     try {
0:       //get the file in byte buffer
0:       dataInputStream.readFully(bytes);
0:       CarbonIndexFileReader indexReader = new CarbonIndexFileReader();
0:       // read from byte buffer.
0:       indexReader.openThriftReader(bytes);
0:       // get the index header
0:       org.apache.carbondata.format.IndexHeader readIndexHeader = indexReader.readIndexHeader();
0:       List<ColumnSchema> columnSchemaList = new ArrayList<ColumnSchema>();
0:       List<org.apache.carbondata.format.ColumnSchema> table_columns =
0:           readIndexHeader.getTable_columns();
0:       for (org.apache.carbondata.format.ColumnSchema columnSchema : table_columns) {
0:         columnSchemaList.add(thriftColumnSchemaToWrapperColumnSchema(columnSchema));
1:       }
0:       return columnSchemaList;
0:     } finally {
0:       dataInputStream.close();
1:     }
1:   }
1: 
1:   /**
0:    * Read CarbonData file and return the user schema,
0:    * the schema order is the same as user save schema
1:    */
0:   public static List<ColumnSchema> readUserSchema(String indexFilePath) throws IOException {
0:     List<ColumnSchema> columnSchemas = readSchemaInIndexFile(indexFilePath);
0:     Collections.sort(columnSchemas, new Comparator<ColumnSchema>() {
0:       @Override
0:       public int compare(ColumnSchema o1, ColumnSchema o2) {
0:         return Integer.compare(o1.getSchemaOrdinal(), o2.getSchemaOrdinal());
1:       }
0:     });
0:     return columnSchemas;
1:   }
1: 
1:   /**
commit:ddf3e85
/////////////////////////////////////////////////////////////////////////
0:    * Read schema file and return table info object
commit:a7ac656
/////////////////////////////////////////////////////////////////////////
1:   private boolean initialise;
1: 
/////////////////////////////////////////////////////////////////////////
1:     this.initialise = true;
/////////////////////////////////////////////////////////////////////////
1:     validateReader();
/////////////////////////////////////////////////////////////////////////
1:     validateReader();
/////////////////////////////////////////////////////////////////////////
1:     validateReader();
1:     this.initialise = false;
1:   }
1: 
1:   /**
1:    * Validate the reader
1:    */
1:   private void validateReader() {
1:     if (!this.initialise) {
1:       throw new RuntimeException(this.getClass().getSimpleName() +
1:           " not initialise, please create it first.");
1:     }
commit:f7c0670
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Close reader
1:    *
0:    * @throws IOException
1:    */
1:   public void close() throws IOException {
1:     this.currentReader.close();
1:   }
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:280a400
/////////////////////////////////////////////////////////////////////////
1:   public static CarbonReaderBuilder builder(String tablePath, String tableName) {
1:     return new CarbonReaderBuilder(tablePath, tableName);
author:Jacky Li
-------------------------------------------------------------------------------
commit:f910cfa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.annotations.InterfaceStability;
0: import org.apache.carbondata.core.metadata.converter.SchemaConverter;
0: import org.apache.carbondata.core.metadata.converter.ThriftWrapperSchemaConverterImpl;
0: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
0: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
0: import org.apache.carbondata.core.reader.CarbonHeaderReader;
0: import org.apache.carbondata.core.util.CarbonUtil;
1: 
1: /**
1:  * Reader for carbondata file
1:  */
1: @InterfaceAudience.User
1: @InterfaceStability.Evolving
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Call {@link #builder(String)} to construct an instance
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Return true if has next row
1:    */
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * Read and return next row object
1:    */
0:   /**
1:    * Return a new {@link CarbonReaderBuilder} instance
1:    */
1: 
0:   /**
0:    * Read carbondata file and return the schema
1:    */
0:   public static List<ColumnSchema> readSchemaInDataFile(String dataFilePath) throws IOException {
0:     CarbonHeaderReader reader = new CarbonHeaderReader(dataFilePath);
0:     return reader.readSchema();
1:   }
1: 
0:   /**
0:    * Read schmea file and return table info object
1:    */
0:   public static TableInfo readSchemaFile(String schemaFilePath) throws IOException {
0:     org.apache.carbondata.format.TableInfo tableInfo = CarbonUtil.readSchemaFile(schemaFilePath);
0:     SchemaConverter schemaConverter = new ThriftWrapperSchemaConverterImpl();
0:     return schemaConverter.fromExternalToWrapperTableInfo(tableInfo, "", "", "");
1:   }
commit:df5d7a9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: 
1: package org.apache.carbondata.sdk.file;
1: 
1: import java.io.IOException;
1: import java.util.List;
1: 
1: import org.apache.hadoop.mapreduce.RecordReader;
1: 
1: public class CarbonReader<T> {
1: 
1:   private List<RecordReader<Void, T>> readers;
1: 
1:   private RecordReader<Void, T> currentReader;
1: 
1:   private int index;
1: 
1:   CarbonReader(List<RecordReader<Void, T>> readers) {
1:     if (readers.size() == 0) {
1:       throw new IllegalArgumentException("no reader");
0:     }
1:     this.readers = readers;
1:     this.index = 0;
1:     this.currentReader = readers.get(0);
0:   }
1: 
1:   public boolean hasNext() throws IOException, InterruptedException {
1:     if (currentReader.nextKeyValue()) {
1:       return true;
1:     } else {
1:       if (index == readers.size() - 1) {
1:         // no more readers
1:         return false;
1:       } else {
1:         index++;
1:         currentReader = readers.get(index);
1:         return currentReader.nextKeyValue();
0:       }
0:     }
0:   }
1: 
1:   public T readNextRow() throws IOException, InterruptedException {
1:     return currentReader.getCurrentValue();
0:   }
1: 
0:   public static CarbonReaderBuilder builder(String tablePath) {
0:     return new CarbonReaderBuilder(tablePath);
0:   }
0: }
============================================================================