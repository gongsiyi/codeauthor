1:d0858b7: /*
1:d0858b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d0858b7:  * contributor license agreements.  See the NOTICE file distributed with
1:d0858b7:  * this work for additional information regarding copyright ownership.
1:d0858b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d0858b7:  * (the "License"); you may not use this file except in compliance with
1:d0858b7:  * the License.  You may obtain a copy of the License at
1:d0858b7:  *
1:d0858b7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d0858b7:  *
1:d0858b7:  * Unless required by applicable law or agreed to in writing, software
1:d0858b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d0858b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d0858b7:  * See the License for the specific language governing permissions and
1:d0858b7:  * limitations under the License.
1:d0858b7:  */
1:d0858b7: 
1:d0858b7: package org.apache.carbondata.core.memory;
1:d0858b7: 
1:d0858b7: import org.junit.Assert;
1:d0858b7: import org.junit.Test;
1:d0858b7: 
1:d0858b7: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:d0858b7: import org.apache.carbondata.core.util.CarbonProperties;
1:d0858b7: 
1:d0858b7: public class MemoryAllocatorUnitTest {
1:d0858b7: 
1:d0858b7:   @Test
1:d0858b7:   public void testHeapMemoryReuse() {
1:d0858b7:     MemoryAllocator heapMem = new HeapMemoryAllocator();
1:d0858b7:     // The size is less than 1024 * 1024,
1:d0858b7:     // allocate new memory every time.
1:d0858b7:     MemoryBlock onheap1 = heapMem.allocate(513);
1:d0858b7:     Object obj1 = onheap1.getBaseObject();
1:d0858b7:     heapMem.free(onheap1);
1:d0858b7:     MemoryBlock onheap2 = heapMem.allocate(514);
1:d0858b7:     Assert.assertNotEquals(obj1, onheap2.getBaseObject());
1:d0858b7: 
1:d0858b7:     // The size is greater than 1024 * 1024,
1:d0858b7:     // reuse the previous memory which has released.
1:d0858b7:     MemoryBlock onheap3 = heapMem.allocate(1024 * 1024 + 1);
1:d0858b7:     Assert.assertEquals(onheap3.size(), 1024 * 1024 + 1);
1:d0858b7:     Object obj3 = onheap3.getBaseObject();
1:d0858b7:     heapMem.free(onheap3);
1:d0858b7:     MemoryBlock onheap4 = heapMem.allocate(1024 * 1024 + 7);
1:d0858b7:     Assert.assertEquals(onheap4.size(), 1024 * 1024 + 7);
1:d0858b7:     Assert.assertEquals(obj3, onheap4.getBaseObject());
1:d0858b7:   }
1:d0858b7: 
1:d0858b7:   @Test
1:d0858b7:   public void testHeapMemoryNotPool() {
1:d0858b7:     // not pool
1:d0858b7:     CarbonProperties.getInstance()
1:d0858b7:         .addProperty(CarbonCommonConstants.CARBON_HEAP_MEMORY_POOLING_THRESHOLD_BYTES, "-1");
1:d0858b7: 
1:d0858b7:     MemoryAllocator heapMem = new HeapMemoryAllocator();
1:d0858b7:     MemoryBlock onheap1 = heapMem.allocate(513);
1:d0858b7:     Object obj1 = onheap1.getBaseObject();
1:d0858b7:     heapMem.free(onheap1);
1:d0858b7:     MemoryBlock onheap2 = heapMem.allocate(514);
1:d0858b7:     Assert.assertNotEquals(obj1, onheap2.getBaseObject());
1:d0858b7: 
1:d0858b7:     MemoryBlock onheap3 = heapMem.allocate(1024 * 1024 + 1);
1:d0858b7:     Assert.assertEquals(onheap3.size(), 1024 * 1024 + 1);
1:d0858b7:     Object obj3 = onheap3.getBaseObject();
1:d0858b7:     heapMem.free(onheap3);
1:d0858b7:     MemoryBlock onheap4 = heapMem.allocate(1024 * 1024 + 7);
1:d0858b7:     Assert.assertEquals(onheap4.size(), 1024 * 1024 + 7);
1:d0858b7:     Assert.assertNotEquals(obj3, onheap4.getBaseObject());
1:d0858b7:   }
1:d0858b7: }
============================================================================
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:d0858b7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.memory;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: public class MemoryAllocatorUnitTest {
1: 
1:   @Test
1:   public void testHeapMemoryReuse() {
1:     MemoryAllocator heapMem = new HeapMemoryAllocator();
1:     // The size is less than 1024 * 1024,
1:     // allocate new memory every time.
1:     MemoryBlock onheap1 = heapMem.allocate(513);
1:     Object obj1 = onheap1.getBaseObject();
1:     heapMem.free(onheap1);
1:     MemoryBlock onheap2 = heapMem.allocate(514);
1:     Assert.assertNotEquals(obj1, onheap2.getBaseObject());
1: 
1:     // The size is greater than 1024 * 1024,
1:     // reuse the previous memory which has released.
1:     MemoryBlock onheap3 = heapMem.allocate(1024 * 1024 + 1);
1:     Assert.assertEquals(onheap3.size(), 1024 * 1024 + 1);
1:     Object obj3 = onheap3.getBaseObject();
1:     heapMem.free(onheap3);
1:     MemoryBlock onheap4 = heapMem.allocate(1024 * 1024 + 7);
1:     Assert.assertEquals(onheap4.size(), 1024 * 1024 + 7);
1:     Assert.assertEquals(obj3, onheap4.getBaseObject());
1:   }
1: 
1:   @Test
1:   public void testHeapMemoryNotPool() {
1:     // not pool
1:     CarbonProperties.getInstance()
1:         .addProperty(CarbonCommonConstants.CARBON_HEAP_MEMORY_POOLING_THRESHOLD_BYTES, "-1");
1: 
1:     MemoryAllocator heapMem = new HeapMemoryAllocator();
1:     MemoryBlock onheap1 = heapMem.allocate(513);
1:     Object obj1 = onheap1.getBaseObject();
1:     heapMem.free(onheap1);
1:     MemoryBlock onheap2 = heapMem.allocate(514);
1:     Assert.assertNotEquals(obj1, onheap2.getBaseObject());
1: 
1:     MemoryBlock onheap3 = heapMem.allocate(1024 * 1024 + 1);
1:     Assert.assertEquals(onheap3.size(), 1024 * 1024 + 1);
1:     Object obj3 = onheap3.getBaseObject();
1:     heapMem.free(onheap3);
1:     MemoryBlock onheap4 = heapMem.allocate(1024 * 1024 + 7);
1:     Assert.assertEquals(onheap4.size(), 1024 * 1024 + 7);
1:     Assert.assertNotEquals(obj3, onheap4.getBaseObject());
1:   }
1: }
============================================================================