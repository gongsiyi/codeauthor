1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.core.reader.sortindex;
3:cd6a4ff: 
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.common.logging.LogService;
1:cd6a4ff: import org.apache.carbondata.common.logging.LogServiceFactory;
1:d3a09e2: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1:ce09aaa: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:cd6a4ff: import org.apache.carbondata.core.reader.CarbonDictionaryColumnMetaChunk;
1:cd6a4ff: import org.apache.carbondata.core.reader.CarbonDictionaryMetadataReader;
1:cd6a4ff: import org.apache.carbondata.core.reader.CarbonDictionaryMetadataReaderImpl;
1:cd6a4ff: import org.apache.carbondata.core.reader.ThriftReader;
1:cd6a4ff: import org.apache.carbondata.format.ColumnSortInfo;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.thrift.TBase;
1:cd6a4ff: 
3:cd6a4ff: /**
1:cd6a4ff:  * Implementation for reading the dictionary sort index and inverted sort index .
1:cd6a4ff:  */
1:cd6a4ff: public class CarbonDictionarySortIndexReaderImpl implements CarbonDictionarySortIndexReader {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * column name
1:cd6a4ff:    */
1:d3a09e2:   protected DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * the path of the dictionary Sort Index file
1:cd6a4ff:    */
1:cd6a4ff:   protected String sortIndexFilePath;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Column sort info thrift instance.
1:cd6a4ff:    */
1:cd6a4ff:   ColumnSortInfo columnSortInfo = null;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Comment for <code>LOGGER</code>
1:cd6a4ff:    */
1:cd6a4ff:   private static final LogService LOGGER =
1:cd6a4ff:       LogServiceFactory.getLogService(CarbonDictionarySortIndexReaderImpl.class.getName());
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * dictionary sortIndex file Reader
1:cd6a4ff:    */
1:cd6a4ff:   private ThriftReader dictionarySortIndexThriftReader;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:d3a09e2:    * @param dictionaryColumnUniqueIdentifier column name
1:cd6a4ff:    */
1:1155d4d:   public CarbonDictionarySortIndexReaderImpl(
1:1155d4d:       final DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:d3a09e2:     this.dictionaryColumnUniqueIdentifier = dictionaryColumnUniqueIdentifier;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * method for reading the carbon dictionary sort index data
1:cd6a4ff:    * from columns sortIndex file.
1:cd6a4ff:    *
1:cd6a4ff:    * @return The method return's the list of dictionary sort Index and sort Index reverse
1:cd6a4ff:    * In case of no member for column empty list will be return
1:cd6a4ff:    * @throws IOException In case any I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   @Override public List<Integer> readSortIndex() throws IOException {
1:cd6a4ff:     if (null == columnSortInfo) {
1:cd6a4ff:       readColumnSortInfo();
1:cd6a4ff:     }
1:cd6a4ff:     return columnSortInfo.getSort_index();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * method for reading the carbon dictionary sort index data
1:cd6a4ff:    * from columns sortIndex file.
1:cd6a4ff:    * In case of no member empty list will be return
1:cd6a4ff:    *
1:cd6a4ff:    * @throws IOException In case any I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   private void readColumnSortInfo() throws IOException {
1:cd6a4ff:     init();
1:cd6a4ff:     try {
1:cd6a4ff:       columnSortInfo = (ColumnSortInfo) dictionarySortIndexThriftReader.read();
1:cd6a4ff:     } catch (IOException ie) {
1:cd6a4ff:       LOGGER.error(ie, "problem while reading the column sort info.");
1:cd6a4ff:       throw new IOException("problem while reading the column sort info.", ie);
1:cd6a4ff:     } finally {
1:cd6a4ff:       if (null != dictionarySortIndexThriftReader) {
1:cd6a4ff:         dictionarySortIndexThriftReader.close();
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * method for reading the carbon dictionary inverted sort index data
1:cd6a4ff:    * from columns sortIndex file.
1:cd6a4ff:    *
1:cd6a4ff:    * @return The method return's the list of dictionary inverted sort Index
1:cd6a4ff:    * @throws IOException In case any I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   @Override public List<Integer> readInvertedSortIndex() throws IOException {
1:cd6a4ff:     if (null == columnSortInfo) {
1:cd6a4ff:       readColumnSortInfo();
1:cd6a4ff:     }
1:cd6a4ff:     return columnSortInfo.getSort_index_inverted();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method initializes the dictionary Sort Index file path
1:cd6a4ff:    * and initialize and opens the thrift reader for dictionary sortIndex file.
1:cd6a4ff:    *
1:cd6a4ff:    * @throws IOException if any I/O errors occurs
1:cd6a4ff:    */
1:cd6a4ff:   private void init() throws IOException {
1:cd6a4ff:     initPath();
1:cd6a4ff:     openThriftReader();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   protected void initPath() {
1:cd6a4ff:     try {
1:cd6a4ff:       CarbonDictionaryColumnMetaChunk chunkMetaObjectForLastSegmentEntry =
1:cd6a4ff:           getChunkMetaObjectForLastSegmentEntry();
1:cd6a4ff:       long dictOffset = chunkMetaObjectForLastSegmentEntry.getEnd_offset();
1:29dc302:       this.sortIndexFilePath = dictionaryColumnUniqueIdentifier.getSortIndexFilePath(dictOffset);
1:cd6a4ff:       if (!FileFactory
1:cd6a4ff:           .isFileExist(this.sortIndexFilePath, FileFactory.getFileType(this.sortIndexFilePath))) {
1:29dc302:         this.sortIndexFilePath = dictionaryColumnUniqueIdentifier.getSortIndexFilePath();
1:cd6a4ff:       }
1:cd6a4ff:     } catch (IOException e) {
1:29dc302:       this.sortIndexFilePath = dictionaryColumnUniqueIdentifier.getSortIndexFilePath();
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will read the dictionary chunk metadata thrift object for last entry
1:cd6a4ff:    *
1:cd6a4ff:    * @return last entry of dictionary meta chunk
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   private CarbonDictionaryColumnMetaChunk getChunkMetaObjectForLastSegmentEntry()
1:cd6a4ff:       throws IOException {
1:cd6a4ff:     CarbonDictionaryMetadataReader columnMetadataReaderImpl = getDictionaryMetadataReader();
1:cd6a4ff:     try {
1:cd6a4ff:       // read the last segment entry for dictionary metadata
1:cd6a4ff:       return columnMetadataReaderImpl.readLastEntryOfDictionaryMetaChunk();
1:cd6a4ff:     } finally {
1:cd6a4ff:       // Close metadata reader
1:cd6a4ff:       columnMetadataReaderImpl.close();
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   protected CarbonDictionaryMetadataReader getDictionaryMetadataReader() {
1:1155d4d:     return new CarbonDictionaryMetadataReaderImpl(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will open the dictionary sort index file stream for reading
1:cd6a4ff:    *
1:cd6a4ff:    * @throws IOException in case any I/O errors occurs
1:cd6a4ff:    */
1:cd6a4ff:   private void openThriftReader() throws IOException {
1:cd6a4ff:     this.dictionarySortIndexThriftReader =
1:cd6a4ff:         new ThriftReader(this.sortIndexFilePath, new ThriftReader.TBaseCreator() {
1:cd6a4ff:           @Override public TBase create() {
1:cd6a4ff:             return new ColumnSortInfo();
1:cd6a4ff:           }
1:cd6a4ff:         });
1:cd6a4ff:     dictionarySortIndexThriftReader.open();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Closes this stream and releases any system resources associated
1:cd6a4ff:    * with it. If the stream is already closed then invoking this
1:cd6a4ff:    * method has no effect.
1:cd6a4ff:    *
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void close() throws IOException {
1:cd6a4ff:     if (null != dictionarySortIndexThriftReader) {
1:cd6a4ff:       dictionarySortIndexThriftReader.close();
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:29dc302
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       this.sortIndexFilePath = dictionaryColumnUniqueIdentifier.getSortIndexFilePath(dictOffset);
1:         this.sortIndexFilePath = dictionaryColumnUniqueIdentifier.getSortIndexFilePath();
1:       this.sortIndexFilePath = dictionaryColumnUniqueIdentifier.getSortIndexFilePath();
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public CarbonDictionarySortIndexReaderImpl(
1:       final DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
/////////////////////////////////////////////////////////////////////////
0:         .getCarbonTablePath(dictionaryColumnUniqueIdentifier.getAbsoluteCarbonTableIdentifier(),
/////////////////////////////////////////////////////////////////////////
1:     return new CarbonDictionaryMetadataReaderImpl(dictionaryColumnUniqueIdentifier);
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
1:   protected DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
0:    * @param carbonTableIdentifier            Carbon Table identifier holding the database name
0:    *                                         and table name
1:    * @param dictionaryColumnUniqueIdentifier column name
0:    * @param carbonStorePath                  carbon store path
0:       final DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier,
0:       final String carbonStorePath) {
1:     this.dictionaryColumnUniqueIdentifier = dictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
0:     CarbonTablePath carbonTablePath = pathService
0:         .getCarbonTablePath(carbonStorePath, carbonTableIdentifier,
0:             dictionaryColumnUniqueIdentifier);
0:       this.sortIndexFilePath = carbonTablePath.getSortIndexFilePath(
0:           dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(), dictOffset);
0:         this.sortIndexFilePath = carbonTablePath.getSortIndexFilePath(
0:             dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());
0:       this.sortIndexFilePath = carbonTablePath.getSortIndexFilePath(
0:           dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());
/////////////////////////////////////////////////////////////////////////
0:         dictionaryColumnUniqueIdentifier);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
0: import org.apache.carbondata.core.metadata.ColumnIdentifier;
0: import org.apache.carbondata.core.service.CarbonCommonFactory;
0: import org.apache.carbondata.core.util.path.CarbonTablePath;
author:hexiaoqiao
-------------------------------------------------------------------------------
commit:a65ca7c
/////////////////////////////////////////////////////////////////////////
0:    * store location
commit:77c90b8
/////////////////////////////////////////////////////////////////////////
0:         pathService.getCarbonTablePath(carbonStorePath, carbonTableIdentifier);
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.reader.sortindex;
1: 
1: import java.io.IOException;
1: import java.util.List;
1: 
0: import org.apache.carbondata.common.factory.CarbonCommonFactory;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.carbon.path.CarbonTablePath;
0: import org.apache.carbondata.core.datastorage.store.impl.FileFactory;
1: import org.apache.carbondata.core.reader.CarbonDictionaryColumnMetaChunk;
1: import org.apache.carbondata.core.reader.CarbonDictionaryMetadataReader;
1: import org.apache.carbondata.core.reader.CarbonDictionaryMetadataReaderImpl;
1: import org.apache.carbondata.core.reader.ThriftReader;
0: import org.apache.carbondata.core.service.PathService;
1: import org.apache.carbondata.format.ColumnSortInfo;
1: 
1: import org.apache.thrift.TBase;
1: 
1: /**
1:  * Implementation for reading the dictionary sort index and inverted sort index .
1:  */
1: public class CarbonDictionarySortIndexReaderImpl implements CarbonDictionarySortIndexReader {
1: 
1:   /**
0:    * carbonTable Identifier holding the info of databaseName and tableName
1:    */
0:   protected CarbonTableIdentifier carbonTableIdentifier;
1: 
1:   /**
1:    * column name
1:    */
0:   protected ColumnIdentifier columnIdentifier;
1: 
1:   /**
0:    * hdfs store location
1:    */
0:   protected String carbonStorePath;
1: 
1:   /**
1:    * the path of the dictionary Sort Index file
1:    */
1:   protected String sortIndexFilePath;
1: 
1:   /**
1:    * Column sort info thrift instance.
1:    */
1:   ColumnSortInfo columnSortInfo = null;
1: 
1:   /**
1:    * Comment for <code>LOGGER</code>
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(CarbonDictionarySortIndexReaderImpl.class.getName());
1: 
1:   /**
1:    * dictionary sortIndex file Reader
1:    */
1:   private ThriftReader dictionarySortIndexThriftReader;
1: 
1:   /**
0:    * @param carbonTableIdentifier Carbon Table identifier holding the database name and table name
0:    * @param columnIdentifier      column name
0:    * @param carbonStorePath       carbon store path
1:    */
0:   public CarbonDictionarySortIndexReaderImpl(final CarbonTableIdentifier carbonTableIdentifier,
0:       final ColumnIdentifier columnIdentifier, final String carbonStorePath) {
0:     this.carbonTableIdentifier = carbonTableIdentifier;
0:     this.columnIdentifier = columnIdentifier;
0:     this.carbonStorePath = carbonStorePath;
1:   }
1: 
1:   /**
1:    * method for reading the carbon dictionary sort index data
1:    * from columns sortIndex file.
1:    *
1:    * @return The method return's the list of dictionary sort Index and sort Index reverse
1:    * In case of no member for column empty list will be return
1:    * @throws IOException In case any I/O error occurs
1:    */
1:   @Override public List<Integer> readSortIndex() throws IOException {
1:     if (null == columnSortInfo) {
1:       readColumnSortInfo();
1:     }
1:     return columnSortInfo.getSort_index();
1:   }
1: 
1:   /**
1:    * method for reading the carbon dictionary sort index data
1:    * from columns sortIndex file.
1:    * In case of no member empty list will be return
1:    *
1:    * @throws IOException In case any I/O error occurs
1:    */
1:   private void readColumnSortInfo() throws IOException {
1:     init();
1:     try {
1:       columnSortInfo = (ColumnSortInfo) dictionarySortIndexThriftReader.read();
1:     } catch (IOException ie) {
1:       LOGGER.error(ie, "problem while reading the column sort info.");
1:       throw new IOException("problem while reading the column sort info.", ie);
1:     } finally {
1:       if (null != dictionarySortIndexThriftReader) {
1:         dictionarySortIndexThriftReader.close();
1:       }
1:     }
1:   }
1: 
1:   /**
1:    * method for reading the carbon dictionary inverted sort index data
1:    * from columns sortIndex file.
1:    *
1:    * @return The method return's the list of dictionary inverted sort Index
1:    * @throws IOException In case any I/O error occurs
1:    */
1:   @Override public List<Integer> readInvertedSortIndex() throws IOException {
1:     if (null == columnSortInfo) {
1:       readColumnSortInfo();
1:     }
1:     return columnSortInfo.getSort_index_inverted();
1:   }
1: 
1:   /**
1:    * The method initializes the dictionary Sort Index file path
1:    * and initialize and opens the thrift reader for dictionary sortIndex file.
1:    *
1:    * @throws IOException if any I/O errors occurs
1:    */
1:   private void init() throws IOException {
1:     initPath();
1:     openThriftReader();
1:   }
1: 
1:   protected void initPath() {
0:     PathService pathService = CarbonCommonFactory.getPathService();
0:     CarbonTablePath carbonTablePath =
0:         pathService.getCarbonTablePath(columnIdentifier, carbonStorePath, carbonTableIdentifier);
1:     try {
1:       CarbonDictionaryColumnMetaChunk chunkMetaObjectForLastSegmentEntry =
1:           getChunkMetaObjectForLastSegmentEntry();
1:       long dictOffset = chunkMetaObjectForLastSegmentEntry.getEnd_offset();
0:       this.sortIndexFilePath =
0:           carbonTablePath.getSortIndexFilePath(columnIdentifier.getColumnId(), dictOffset);
1:       if (!FileFactory
1:           .isFileExist(this.sortIndexFilePath, FileFactory.getFileType(this.sortIndexFilePath))) {
0:         this.sortIndexFilePath =
0:             carbonTablePath.getSortIndexFilePath(columnIdentifier.getColumnId());
1:       }
1:     } catch (IOException e) {
0:       this.sortIndexFilePath = carbonTablePath.getSortIndexFilePath(columnIdentifier.getColumnId());
1:     }
1: 
1:   }
1: 
1:   /**
1:    * This method will read the dictionary chunk metadata thrift object for last entry
1:    *
1:    * @return last entry of dictionary meta chunk
1:    * @throws IOException if an I/O error occurs
1:    */
1:   private CarbonDictionaryColumnMetaChunk getChunkMetaObjectForLastSegmentEntry()
1:       throws IOException {
1:     CarbonDictionaryMetadataReader columnMetadataReaderImpl = getDictionaryMetadataReader();
1:     try {
1:       // read the last segment entry for dictionary metadata
1:       return columnMetadataReaderImpl.readLastEntryOfDictionaryMetaChunk();
1:     } finally {
1:       // Close metadata reader
1:       columnMetadataReaderImpl.close();
1:     }
1:   }
1: 
1:   /**
1:    * @return
1:    */
1:   protected CarbonDictionaryMetadataReader getDictionaryMetadataReader() {
0:     return new CarbonDictionaryMetadataReaderImpl(carbonStorePath, carbonTableIdentifier,
0:         columnIdentifier);
1:   }
1: 
1:   /**
1:    * This method will open the dictionary sort index file stream for reading
1:    *
1:    * @throws IOException in case any I/O errors occurs
1:    */
1:   private void openThriftReader() throws IOException {
1:     this.dictionarySortIndexThriftReader =
1:         new ThriftReader(this.sortIndexFilePath, new ThriftReader.TBaseCreator() {
1:           @Override public TBase create() {
1:             return new ColumnSortInfo();
1:           }
1:         });
1:     dictionarySortIndexThriftReader.open();
1:   }
1: 
1:   /**
1:    * Closes this stream and releases any system resources associated
1:    * with it. If the stream is already closed then invoking this
1:    * method has no effect.
1:    *
1:    * @throws IOException if an I/O error occurs
1:    */
1:   @Override public void close() throws IOException {
1:     if (null != dictionarySortIndexThriftReader) {
1:       dictionarySortIndexThriftReader.close();
1:     }
1:   }
1: }
============================================================================