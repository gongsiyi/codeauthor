1:2cf1104: /*
1:2cf1104:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2cf1104:  * contributor license agreements.  See the NOTICE file distributed with
1:2cf1104:  * this work for additional information regarding copyright ownership.
1:2cf1104:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2cf1104:  * (the "License"); you may not use this file except in compliance with
1:2cf1104:  * the License.  You may obtain a copy of the License at
1:2cf1104:  *
1:2cf1104:  *    http://www.apache.org/licenses/LICENSE-2.0
1:2cf1104:  *
1:2cf1104:  * Unless required by applicable law or agreed to in writing, software
1:2cf1104:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2cf1104:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2cf1104:  * See the License for the specific language governing permissions and
1:2cf1104:  * limitations under the License.
1:2cf1104:  */
1:2cf1104: package org.apache.carbondata.processing.store.writer.v3;
3:2cf1104: 
1:e710339: import java.util.concurrent.ExecutorService;
1:2cf1104: 
1:2ccdbb7: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:e710339: import org.apache.carbondata.core.datastore.blocklet.EncodedBlocklet;
1:bc3e684: import org.apache.carbondata.core.datastore.page.EncodedTablePage;
1:2ccdbb7: import org.apache.carbondata.core.util.CarbonProperties;
1:2ccdbb7: import org.apache.carbondata.processing.store.CarbonFactDataHandlerModel;
1:f089287: import org.apache.carbondata.processing.store.TablePage;
1:2cf1104: 
1:f089287: public class BlockletDataHolder {
1:e710339: 
1:e710339:   /**
1:e710339:    * current data size
1:e710339:    */
1:2cf1104:   private long currentSize;
1:2cf1104: 
1:e710339:   private EncodedBlocklet encodedBlocklet;
1:e710339: 
1:2ccdbb7:   public BlockletDataHolder(ExecutorService fallbackpool, CarbonFactDataHandlerModel model) {
1:2ccdbb7:     encodedBlocklet = new EncodedBlocklet(fallbackpool, Boolean.parseBoolean(
1:2ccdbb7:         CarbonProperties.getInstance()
1:2ccdbb7:             .getProperty(CarbonCommonConstants.LOCAL_DICTIONARY_DECODER_BASED_FALLBACK,
1:2ccdbb7:                 CarbonCommonConstants.LOCAL_DICTIONARY_DECODER_BASED_FALLBACK_DEFAULT)),
1:2ccdbb7:         model.getColumnLocalDictGenMap());
7:2cf1104:   }
1:f089287: 
1:2cf1104:   public void clear() {
1:2cf1104:     currentSize = 0;
1:e710339:     encodedBlocklet.clear();
1:f089287:   }
1:2cf1104: 
1:f089287:   public void addPage(TablePage rawTablePage) {
1:f089287:     EncodedTablePage encodedTablePage = rawTablePage.getEncodedTablePage();
1:bc3e684:     currentSize += encodedTablePage.getEncodedSize();
1:e710339:     encodedBlocklet.addEncodedTablePage(encodedTablePage);
1:1fa2df9:   }
1:2cf1104: 
1:2cf1104:   public long getSize() {
1:ebf13dc:     // increasing it by 15 percent for data chunk 3 of each column each page
1:ebf13dc:     return currentSize + ((currentSize * 15) / 100);
1:2cf1104:   }
1:2cf1104: 
1:2cf1104:   public int getNumberOfPagesAdded() {
1:e710339:     return encodedBlocklet.getNumberOfPages();
1:2cf1104:   }
1:2cf1104: 
1:1fa2df9:   public int getTotalRows() {
1:e710339:     return encodedBlocklet.getBlockletSize();
1:1fa2df9:   }
1:1fa2df9: 
1:e710339:   public EncodedBlocklet getEncodedBlocklet() {
1:e710339:     return encodedBlocklet;
1:2cf1104:   }
1:2cf1104: }
============================================================================
author:akashrn5
-------------------------------------------------------------------------------
commit:2ccdbb7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: import org.apache.carbondata.processing.store.CarbonFactDataHandlerModel;
/////////////////////////////////////////////////////////////////////////
1:   public BlockletDataHolder(ExecutorService fallbackpool, CarbonFactDataHandlerModel model) {
1:     encodedBlocklet = new EncodedBlocklet(fallbackpool, Boolean.parseBoolean(
1:         CarbonProperties.getInstance()
1:             .getProperty(CarbonCommonConstants.LOCAL_DICTIONARY_DECODER_BASED_FALLBACK,
1:                 CarbonCommonConstants.LOCAL_DICTIONARY_DECODER_BASED_FALLBACK_DEFAULT)),
1:         model.getColumnLocalDictGenMap());
author:kumarvishal09
-------------------------------------------------------------------------------
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutorService;
1: import org.apache.carbondata.core.datastore.blocklet.EncodedBlocklet;
1: 
1:   /**
1:    * current data size
1:    */
1:   private EncodedBlocklet encodedBlocklet;
1: 
0:   public BlockletDataHolder(ExecutorService fallbackpool) {
0:     encodedBlocklet = new EncodedBlocklet(fallbackpool);
1:     encodedBlocklet.clear();
1:     encodedBlocklet.addEncodedTablePage(encodedTablePage);
/////////////////////////////////////////////////////////////////////////
1:     return encodedBlocklet.getNumberOfPages();
1:     return encodedBlocklet.getBlockletSize();
1:   public EncodedBlocklet getEncodedBlocklet() {
1:     return encodedBlocklet;
author:dhatchayani
-------------------------------------------------------------------------------
commit:df002af
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:f089287
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.store.TablePage;
1: public class BlockletDataHolder {
0:   private List<TablePage> rawTablePages;
0:   public BlockletDataHolder() {
0:     this.encodedTablePage = new ArrayList<>();
0:     this.rawTablePages = new ArrayList<>();
0:     rawTablePages.clear();
1:   public void addPage(TablePage rawTablePage) {
1:     EncodedTablePage encodedTablePage = rawTablePage.getEncodedTablePage();
0:     this.rawTablePages.add(rawTablePage);
/////////////////////////////////////////////////////////////////////////
1: 
0:   public List<TablePage> getRawTablePages() {
0:     return rawTablePages;
1:   }
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.EncodedTablePage;
0:   private List<EncodedTablePage> encodedTablePage;
0:     this.encodedTablePage = new ArrayList<EncodedTablePage>();
0:     encodedTablePage.clear();
0:   public void addPage(EncodedTablePage encodedTablePage) {
0:     this.encodedTablePage.add(encodedTablePage);
1:     currentSize += encodedTablePage.getEncodedSize();
/////////////////////////////////////////////////////////////////////////
0:     return encodedTablePage.size();
0:     for (EncodedTablePage nh : encodedTablePage) {
0:       rows += nh.getPageSize();
0:   public List<EncodedTablePage> getEncodedTablePages() {
0:     return encodedTablePage;
author:ravipesala
-------------------------------------------------------------------------------
commit:1fa2df9
/////////////////////////////////////////////////////////////////////////
1:   public int getTotalRows() {
0:     int rows = 0;
0:     for (NodeHolder nh : nodeHolder) {
0:       rows += nh.getEntryCount();
1:     }
0:     return rows;
1:   }
1: 
author:kumarvishal
-------------------------------------------------------------------------------
commit:ebf13dc
/////////////////////////////////////////////////////////////////////////
0:     currentSize += holder.getHolderSize();
1:     // increasing it by 15 percent for data chunk 3 of each column each page
1:     return currentSize + ((currentSize * 15) / 100);
commit:2cf1104
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.processing.store.writer.v3;
1: 
0: import java.util.ArrayList;
0: import java.util.List;
1: 
0: import org.apache.carbondata.core.util.NodeHolder;
1: 
0: public class DataWriterHolder {
0:   private List<NodeHolder> nodeHolder;
1:   private long currentSize;
1: 
0:   public DataWriterHolder() {
0:     this.nodeHolder = new ArrayList<NodeHolder>();
1:   }
1: 
1:   public void clear() {
0:     nodeHolder.clear();
1:     currentSize = 0;
1:   }
1: 
0:   public void addNodeHolder(NodeHolder holder) {
0:     this.nodeHolder.add(holder);
1: 
0:     int size = 0;
0:     // add row id index length
0:     for (int i = 0; i < holder.getKeyBlockIndexLength().length; i++) {
0:       if (!holder.getIsSortedKeyBlock()[i]) {
0:         size += holder.getKeyBlockIndexLength()[i];
1:       }
1:     }
0:     // add rle index length
0:     for (int i = 0; i < holder.getDataIndexMapLength().length; i++) {
0:       if (holder.getAggBlocks()[i]) {
0:         size += holder.getDataIndexMapLength()[i];
1:       }
1:     }
0:     currentSize +=
0:         holder.getTotalDimensionArrayLength() + holder.getTotalMeasureArrayLength() + size;
1:   }
1: 
1:   public long getSize() {
0:     return currentSize;
1:   }
1: 
1:   public int getNumberOfPagesAdded() {
0:     return nodeHolder.size();
1:   }
1: 
0:   public List<NodeHolder> getNodeHolder() {
0:     return nodeHolder;
1:   }
1: }
============================================================================