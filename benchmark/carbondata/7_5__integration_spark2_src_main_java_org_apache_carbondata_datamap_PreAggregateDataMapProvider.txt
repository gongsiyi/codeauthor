1:89a12af: /*
1:89a12af:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:89a12af:  * contributor license agreements.  See the NOTICE file distributed with
1:89a12af:  * this work for additional information regarding copyright ownership.
1:89a12af:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:89a12af:  * (the "License"); you may not use this file except in compliance with
1:89a12af:  * the License.  You may obtain a copy of the License at
1:89a12af:  *
1:89a12af:  *    http://www.apache.org/licenses/LICENSE-2.0
1:89a12af:  *
1:89a12af:  * Unless required by applicable law or agreed to in writing, software
1:89a12af:  * distributed under the License is distributed on an "AS IS" BASIS,
1:89a12af:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:89a12af:  * See the License for the specific language governing permissions and
1:89a12af:  * limitations under the License.
1:89a12af:  */
2:89a12af: 
1:89a12af: package org.apache.carbondata.datamap;
1:89a12af: 
1:747be9b: import java.util.HashMap;
1:747be9b: import java.util.Map;
1:747be9b: 
1:89a12af: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:89a12af: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1:5159abf: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:05086e5: import org.apache.carbondata.core.datamap.DataMapProvider;
1:9db662a: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
1:747be9b: import org.apache.carbondata.core.metadata.schema.datamap.DataMapProperty;
1:89a12af: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:89a12af: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:89a12af: 
1:89a12af: import org.apache.spark.sql.SparkSession;
1:89a12af: import org.apache.spark.sql.execution.command.preaaggregate.PreAggregateTableHelper;
1:89a12af: import org.apache.spark.sql.execution.command.table.CarbonDropTableCommand;
1:89a12af: import scala.Some;
1:89a12af: 
1:89a12af: @InterfaceAudience.Internal
1:9db662a: public class PreAggregateDataMapProvider extends DataMapProvider {
1:89a12af:   protected PreAggregateTableHelper helper;
1:89a12af:   protected CarbonDropTableCommand dropTableCommand;
1:05086e5:   protected SparkSession sparkSession;
1:3816e90:   private String dbName;
1:3816e90:   private String tableName;
1:89a12af: 
1:9db662a:   PreAggregateDataMapProvider(CarbonTable table, DataMapSchema schema,
1:9db662a:       SparkSession sparkSession) {
1:9db662a:     super(table, schema);
1:05086e5:     this.sparkSession = sparkSession;
1:3816e90:     this.dbName = table.getDatabaseName();
1:3816e90:     this.tableName = table.getTableName() + '_' + schema.getDataMapName();
2:89a12af:   }
1:9db662a: 
1:9db662a:   @Override
1:9db662a:   public void initMeta(String ctasSqlStatement) throws MalformedDataMapCommandException {
1:9db662a:     DataMapSchema dataMapSchema = getDataMapSchema();
1:89a12af:     validateDmProperty(dataMapSchema);
1:89a12af:     helper = new PreAggregateTableHelper(
1:9db662a:         getMainTable(), dataMapSchema.getDataMapName(), dataMapSchema.getProviderName(),
1:89a12af:         dataMapSchema.getProperties(), ctasSqlStatement, null, false);
1:89a12af:     helper.initMeta(sparkSession);
1:89a12af:   }
1:89a12af: 
1:89a12af:   private void validateDmProperty(DataMapSchema dataMapSchema)
1:89a12af:       throws MalformedDataMapCommandException {
1:89a12af:     if (!dataMapSchema.getProperties().isEmpty()) {
1:747be9b:       Map<String, String> properties = new HashMap<>(dataMapSchema.getProperties());
1:747be9b:       properties.remove(DataMapProperty.DEFERRED_REBUILD);
1:747be9b:       properties.remove(DataMapProperty.PATH);
1:747be9b:       properties.remove(DataMapProperty.PARTITIONING);
1:5159abf:       properties.remove(CarbonCommonConstants.LONG_STRING_COLUMNS);
1:747be9b:       if (properties.size() > 0) {
1:89a12af:         throw new MalformedDataMapCommandException(
1:5159abf:                 "Only 'path', 'partitioning' and 'long_string_columns' dmproperties " +
1:5159abf:                 "are allowed for this datamap");
1:89a12af:       }
1:89a12af:     }
1:89a12af:   }
1:89a12af: 
3:89a12af:   @Override
1:9db662a:   public void cleanMeta() {
1:89a12af:     dropTableCommand = new CarbonDropTableCommand(
1:89a12af:         true,
1:3816e90:         new Some<>(dbName),
1:3816e90:         tableName,
1:89a12af:         true);
1:89a12af:     dropTableCommand.processMetadata(sparkSession);
1:89a12af:   }
1:89a12af: 
1:89a12af:   @Override
1:9db662a:   public void cleanData() {
1:89a12af:     if (dropTableCommand != null) {
1:89a12af:       dropTableCommand.processData(sparkSession);
1:89a12af:     }
1:89a12af:   }
1:89a12af: 
1:89a12af:   @Override
1:9db662a:   public void rebuild() {
1:89a12af:     if (helper != null) {
1:89a12af:       helper.initData(sparkSession);
1:89a12af:     }
1:89a12af:   }
1:89a12af: 
1:89a12af:   @Override
1:9db662a:   public DataMapFactory getDataMapFactory() {
1:9db662a:     throw new UnsupportedOperationException();
1:9db662a:   }
1:abcd4f6: 
1:abcd4f6:   @Override
1:abcd4f6:   public boolean supportRebuild() {
1:abcd4f6:     return false;
1:abcd4f6:   }
1:89a12af: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:abcd4f6
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public boolean supportRebuild() {
1:     return false;
1:   }
author:praveenmeenakshi56
-------------------------------------------------------------------------------
commit:3816e90
/////////////////////////////////////////////////////////////////////////
1:   private String dbName;
1:   private String tableName;
1:     this.dbName = table.getDatabaseName();
1:     this.tableName = table.getTableName() + '_' + schema.getDataMapName();
/////////////////////////////////////////////////////////////////////////
1:         new Some<>(dbName),
1:         tableName,
commit:a9d5e9d
/////////////////////////////////////////////////////////////////////////
0:       if (dataMapSchema.getProperties().size() > 2 || (
0:               !dataMapSchema.getProperties().containsKey(DataMapProperty.PATH) &&
0:                       !dataMapSchema.getProperties().containsKey(DataMapProperty.PARTITIONING))) {
0:                 "Only 'path' and 'partitioning' dmproperties are allowed for this datamap");
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Manhua
-------------------------------------------------------------------------------
commit:5159abf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
/////////////////////////////////////////////////////////////////////////
1:       properties.remove(CarbonCommonConstants.LONG_STRING_COLUMNS);
1:                 "Only 'path', 'partitioning' and 'long_string_columns' dmproperties " +
1:                 "are allowed for this datamap");
author:Jacky Li
-------------------------------------------------------------------------------
commit:747be9b
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.carbondata.core.metadata.schema.datamap.DataMapProperty;
/////////////////////////////////////////////////////////////////////////
1:       Map<String, String> properties = new HashMap<>(dataMapSchema.getProperties());
1:       properties.remove(DataMapProperty.DEFERRED_REBUILD);
1:       properties.remove(DataMapProperty.PATH);
1:       properties.remove(DataMapProperty.PARTITIONING);
1:       if (properties.size() > 0) {
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
/////////////////////////////////////////////////////////////////////////
1: public class PreAggregateDataMapProvider extends DataMapProvider {
1:   PreAggregateDataMapProvider(CarbonTable table, DataMapSchema schema,
1:       SparkSession sparkSession) {
1:     super(table, schema);
1:   public void initMeta(String ctasSqlStatement) throws MalformedDataMapCommandException {
1:     DataMapSchema dataMapSchema = getDataMapSchema();
1:         getMainTable(), dataMapSchema.getDataMapName(), dataMapSchema.getProviderName(),
/////////////////////////////////////////////////////////////////////////
0:   public void initData() {
1:   public void cleanMeta() {
0:     DataMapSchema dataMapSchema = getDataMapSchema();
/////////////////////////////////////////////////////////////////////////
1:   public void cleanData() {
1:   public void rebuild() {
0:   @Override public void incrementalBuild(String[] segmentIds) {
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public DataMapFactory getDataMapFactory() {
1:     throw new UnsupportedOperationException();
1:   }
commit:89a12af
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.datamap;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1: 
1: import org.apache.spark.sql.SparkSession;
1: import org.apache.spark.sql.execution.command.preaaggregate.PreAggregateTableHelper;
1: import org.apache.spark.sql.execution.command.table.CarbonDropTableCommand;
1: import scala.Some;
1: 
1: @InterfaceAudience.Internal
0: public class PreAggregateDataMapProvider implements DataMapProvider {
1:   protected PreAggregateTableHelper helper;
1:   protected CarbonDropTableCommand dropTableCommand;
1: 
1:   @Override
0:   public void initMeta(CarbonTable mainTable, DataMapSchema dataMapSchema, String ctasSqlStatement,
0:       SparkSession sparkSession) throws MalformedDataMapCommandException {
1:     validateDmProperty(dataMapSchema);
1:     helper = new PreAggregateTableHelper(
0:         mainTable, dataMapSchema.getDataMapName(), dataMapSchema.getClassName(),
1:         dataMapSchema.getProperties(), ctasSqlStatement, null, false);
1:     helper.initMeta(sparkSession);
1:   }
1: 
1:   private void validateDmProperty(DataMapSchema dataMapSchema)
1:       throws MalformedDataMapCommandException {
1:     if (!dataMapSchema.getProperties().isEmpty()) {
0:       if (dataMapSchema.getProperties().size() > 1 ||
0:           !dataMapSchema.getProperties().containsKey(DataMapProperty.PATH)) {
1:         throw new MalformedDataMapCommandException(
0:             "Only 'path' dmproperty is allowed for this datamap");
1:       }
1:     }
1:   }
1: 
1:   @Override
0:   public void initData(CarbonTable mainTable, SparkSession sparkSession) {
0:     // Nothing is needed to do by default
1:   }
1: 
1:   @Override
0:   public void freeMeta(CarbonTable mainTable, DataMapSchema dataMapSchema,
0:       SparkSession sparkSession) {
1:     dropTableCommand = new CarbonDropTableCommand(
1:         true,
0:         new Some<>(dataMapSchema.getRelationIdentifier().getDatabaseName()),
0:         dataMapSchema.getRelationIdentifier().getTableName(),
1:         true);
1:     dropTableCommand.processMetadata(sparkSession);
1:   }
1: 
1:   @Override
0:   public void freeData(CarbonTable mainTable, DataMapSchema dataMapSchema,
0:       SparkSession sparkSession) {
1:     if (dropTableCommand != null) {
1:       dropTableCommand.processData(sparkSession);
1:     }
1:   }
1: 
1:   @Override
0:   public void rebuild(CarbonTable mainTable, SparkSession sparkSession) {
1:     if (helper != null) {
1:       helper.initData(sparkSession);
1:     }
1:   }
1: 
1:   @Override
0:   public void incrementalBuild(CarbonTable mainTable, String[] segmentIds,
0:       SparkSession sparkSession) {
0:     throw new UnsupportedOperationException();
1:   }
1: }
author:ravipesala
-------------------------------------------------------------------------------
commit:9fba684
/////////////////////////////////////////////////////////////////////////
0:   public void rebuild(CarbonTable mainTable, DataMapSchema dataMapSchema) {
0:   @Override public void incrementalBuild(CarbonTable mainTable, DataMapSchema dataMapSchema,
0:       String[] segmentIds) {
commit:05086e5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datamap.DataMapCatalog;
1: import org.apache.carbondata.core.datamap.DataMapProvider;
/////////////////////////////////////////////////////////////////////////
1:   protected SparkSession sparkSession;
0: 
0:   public PreAggregateDataMapProvider(SparkSession sparkSession) {
1:     this.sparkSession = sparkSession;
0:   }
0:   public void initMeta(CarbonTable mainTable, DataMapSchema dataMapSchema, String ctasSqlStatement)
0:       throws MalformedDataMapCommandException {
/////////////////////////////////////////////////////////////////////////
0:   public void initData(CarbonTable mainTable) {
0:   public void freeMeta(CarbonTable mainTable, DataMapSchema dataMapSchema) {
/////////////////////////////////////////////////////////////////////////
0:   public void freeData(CarbonTable mainTable, DataMapSchema dataMapSchema) {
0:   public void rebuild(CarbonTable mainTable) {
0:   public void incrementalBuild(CarbonTable mainTable, String[] segmentIds) {
0: 
0:   @Override public DataMapCatalog createDataMapCatalog() {
0:     // TODO manage pre-agg also with catalog.
0:     return null;
0:   }
author:QiangCai
-------------------------------------------------------------------------------
commit:d23f7fa
/////////////////////////////////////////////////////////////////////////
0:         mainTable, dataMapSchema.getDataMapName(), dataMapSchema.getProviderName(),
============================================================================