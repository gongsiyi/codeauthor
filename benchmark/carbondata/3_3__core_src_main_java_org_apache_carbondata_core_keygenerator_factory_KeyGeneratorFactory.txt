1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.keygenerator.factory;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:cd6a4ff: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1:cd6a4ff: import org.apache.carbondata.core.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonUtil;
1:cd6a4ff: 
1:cd6a4ff: public final class KeyGeneratorFactory {
1:cd6a4ff:   private KeyGeneratorFactory() {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:e8da880:   public static KeyGenerator getKeyGenerator(int[] dimension) {
1:cd6a4ff:     int[] incrementedCardinality;
1:cd6a4ff:     boolean isFullyFilled =
1:cd6a4ff:         Boolean.parseBoolean(CarbonCommonConstants.IS_FULLY_FILLED_BITS_DEFAULT_VALUE);
1:cd6a4ff:     if (!isFullyFilled) {
1:e8da880:       incrementedCardinality = CarbonUtil.getIncrementedCardinality(dimension);
1:cd6a4ff:     } else {
1:e8da880:       incrementedCardinality = CarbonUtil.getIncrementedCardinalityFullyFilled(dimension);
1:cd6a4ff:     }
1:cd6a4ff:     return new MultiDimKeyVarLengthGenerator(incrementedCardinality);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    *
1:cd6a4ff:    * @param dimCardinality : dimension cardinality
1:cd6a4ff:    * @param columnSplits : No of column in each block
1:cd6a4ff:    * @return keygenerator
1:cd6a4ff:    */
1:cd6a4ff:   public static KeyGenerator getKeyGenerator(int[] dimCardinality, int[] columnSplits) {
1:cd6a4ff:     int[] dimsBitLens = CarbonUtil.getDimensionBitLength(dimCardinality, columnSplits);
1:cd6a4ff: 
1:cd6a4ff:     return new MultiDimKeyVarLengthGenerator(dimsBitLens);
1:cd6a4ff:   }
1:cd6a4ff: }
1:cd6a4ff: 
============================================================================
author:xubo245
-------------------------------------------------------------------------------
commit:e8da880
/////////////////////////////////////////////////////////////////////////
1:   public static KeyGenerator getKeyGenerator(int[] dimension) {
1:       incrementedCardinality = CarbonUtil.getIncrementedCardinality(dimension);
1:       incrementedCardinality = CarbonUtil.getIncrementedCardinalityFullyFilled(dimension);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.keygenerator.factory;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1: import org.apache.carbondata.core.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: 
1: public final class KeyGeneratorFactory {
1:   private KeyGeneratorFactory() {
1: 
1:   }
1: 
0:   public static KeyGenerator getKeyGenerator(int[] dimesion) {
1:     int[] incrementedCardinality;
1:     boolean isFullyFilled =
1:         Boolean.parseBoolean(CarbonCommonConstants.IS_FULLY_FILLED_BITS_DEFAULT_VALUE);
1:     if (!isFullyFilled) {
0:       incrementedCardinality = CarbonUtil.getIncrementedCardinality(dimesion);
1:     } else {
0:       incrementedCardinality = CarbonUtil.getIncrementedCardinalityFullyFilled(dimesion);
1:     }
1:     return new MultiDimKeyVarLengthGenerator(incrementedCardinality);
1:   }
1: 
1:   /**
1:    *
1:    * @param dimCardinality : dimension cardinality
1:    * @param columnSplits : No of column in each block
1:    * @return keygenerator
1:    */
1:   public static KeyGenerator getKeyGenerator(int[] dimCardinality, int[] columnSplits) {
1:     int[] dimsBitLens = CarbonUtil.getDimensionBitLength(dimCardinality, columnSplits);
1: 
1:     return new MultiDimKeyVarLengthGenerator(dimsBitLens);
1:   }
1: }
1: 
============================================================================