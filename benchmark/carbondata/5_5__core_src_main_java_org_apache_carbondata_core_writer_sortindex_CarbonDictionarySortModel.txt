1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
2:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.core.writer.sortindex;
3:cd6a4ff: 
1:cd6a4ff: import java.text.ParseException;
1:cd6a4ff: import java.text.SimpleDateFormat;
1:cd6a4ff: import java.util.Date;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:ce09aaa: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:ea04fce: import org.apache.carbondata.core.util.CarbonUtil;
1:cd6a4ff: 
2:cd6a4ff: /**
1:cd6a4ff:  * Dictionary sort model class holds the member byte value and corresponding key value.
1:cd6a4ff:  */
1:cd6a4ff: public class CarbonDictionarySortModel implements Comparable<CarbonDictionarySortModel> {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Surrogate key
1:cd6a4ff:    */
1:cd6a4ff:   private int key;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * member value in bytes
1:cd6a4ff:    */
1:cd6a4ff:   private String memberValue;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * member dataType
1:cd6a4ff:    */
1:cd6a4ff:   private DataType dataType;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Constructor to init the dictionary sort model
1:cd6a4ff:    *
1:cd6a4ff:    * @param key
1:cd6a4ff:    * @param dataType
1:cd6a4ff:    * @param memberValue
1:cd6a4ff:    */
1:cd6a4ff:   public CarbonDictionarySortModel(int key, DataType dataType, String memberValue) {
1:cd6a4ff:     this.key = key;
1:cd6a4ff:     this.dataType = dataType;
1:cd6a4ff:     this.memberValue = memberValue;
8:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Compare
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int compareTo(CarbonDictionarySortModel o) {
1:956833e:     if (dataType == DataTypes.SHORT ||
1:956833e:         dataType == DataTypes.INT ||
1:956833e:         dataType == DataTypes.LONG ||
1:956833e:         dataType == DataTypes.DOUBLE) {
1:956833e:       Double d1 = null;
1:956833e:       Double d2 = null;
1:956833e:       try {
1:956833e:         d1 = new Double(memberValue);
1:956833e:       } catch (NumberFormatException e) {
1:956833e:         if (CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(o.memberValue)) {
4:cd6a4ff:           return -1;
1:cd6a4ff:         }
1:956833e:         return 1;
1:956833e:       }
1:956833e:       try {
1:956833e:         d2 = new Double(o.memberValue);
1:956833e:       } catch (NumberFormatException e) {
1:956833e:         return -1;
1:956833e:       }
1:956833e:       return d1.compareTo(d2);
1:f209e8e:     } else if (DataTypes.isDecimal(dataType)) {
1:956833e:       java.math.BigDecimal val1 = null;
1:956833e:       java.math.BigDecimal val2 = null;
1:956833e:       try {
1:956833e:         val1 = new java.math.BigDecimal(memberValue);
1:956833e:       } catch (NumberFormatException e) {
1:956833e:         if (CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(o.memberValue)) {
1:cd6a4ff:           return -1;
1:956833e:         }
1:956833e:         return 1;
1:cd6a4ff:       }
1:956833e:       try {
1:956833e:         val2 = new java.math.BigDecimal(o.memberValue);
1:956833e:       } catch (NumberFormatException e) {
1:956833e:         return -1;
1:956833e:       }
1:956833e:       return val1.compareTo(val2);
1:956833e:     } else if (dataType == DataTypes.DATE || dataType == DataTypes.TIMESTAMP) {
1:956833e:       String format = CarbonUtil.getFormatFromProperty(dataType);
1:956833e:       SimpleDateFormat parser = new SimpleDateFormat(format);
1:956833e:       Date date1 = null;
1:956833e:       Date date2 = null;
1:956833e:       try {
1:956833e:         date1 = parser.parse(memberValue);
1:956833e:       } catch (ParseException e) {
1:956833e:         if (CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(o.memberValue)) {
1:cd6a4ff:           return -1;
1:956833e:         }
1:956833e:         return 1;
1:cd6a4ff:       }
1:956833e:       try {
1:956833e:         date2 = parser.parse(o.memberValue);
1:956833e:       } catch (ParseException e) {
1:956833e:         return -1;
1:956833e:       }
1:956833e:       return date1.compareTo(date2);
1:956833e:     } else {
1:956833e:       return this.memberValue.compareTo(o.memberValue);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @see Object#hashCode()
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int hashCode() {
1:eaadc88:     return ((memberValue == null) ? 0 : memberValue.hashCode());
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @see Object#equals(Object)
1:cd6a4ff:    */
1:cd6a4ff:   @Override public boolean equals(Object obj) {
1:cd6a4ff:     if (obj instanceof CarbonDictionarySortModel) {
1:cd6a4ff:       if (this == obj) {
1:cd6a4ff:         return true;
1:cd6a4ff:       }
1:cd6a4ff:       CarbonDictionarySortModel other = (CarbonDictionarySortModel) obj;
1:cd6a4ff:       if (memberValue == null) {
1:cd6a4ff:         if (other.memberValue != null) {
1:cd6a4ff:           return false;
1:cd6a4ff:         }
1:cd6a4ff:       } else if (!this.memberValue.equals(other.memberValue)) {
1:cd6a4ff:         return false;
1:cd6a4ff:       }
1:cd6a4ff:       return true;
1:cd6a4ff:     } else {
1:cd6a4ff:       return false;
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * return the surrogate of the member
1:cd6a4ff:    *
2:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   public int getKey() {
1:cd6a4ff:     return key;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
1:     } else if (DataTypes.isDecimal(dataType)) {
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     if (dataType == DataTypes.SHORT ||
1:         dataType == DataTypes.INT ||
1:         dataType == DataTypes.LONG ||
1:         dataType == DataTypes.DOUBLE) {
1:       Double d1 = null;
1:       Double d2 = null;
1:       try {
1:         d1 = new Double(memberValue);
1:       } catch (NumberFormatException e) {
1:         if (CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(o.memberValue)) {
1:         return 1;
1:       }
1:       try {
1:         d2 = new Double(o.memberValue);
1:       } catch (NumberFormatException e) {
1:         return -1;
1:       }
1:       return d1.compareTo(d2);
0:     } else if (dataType == DataTypes.DECIMAL) {
1:       java.math.BigDecimal val1 = null;
1:       java.math.BigDecimal val2 = null;
1:       try {
1:         val1 = new java.math.BigDecimal(memberValue);
1:       } catch (NumberFormatException e) {
1:         if (CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(o.memberValue)) {
1:         return 1;
1:       }
1:       try {
1:         val2 = new java.math.BigDecimal(o.memberValue);
1:       } catch (NumberFormatException e) {
1:         return -1;
1:       }
1:       return val1.compareTo(val2);
1:     } else if (dataType == DataTypes.DATE || dataType == DataTypes.TIMESTAMP) {
1:       String format = CarbonUtil.getFormatFromProperty(dataType);
1:       SimpleDateFormat parser = new SimpleDateFormat(format);
1:       Date date1 = null;
1:       Date date2 = null;
1:       try {
1:         date1 = parser.parse(memberValue);
1:       } catch (ParseException e) {
1:         if (CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(o.memberValue)) {
1:         return 1;
1:       }
1:       try {
1:         date2 = parser.parse(o.memberValue);
1:       } catch (ParseException e) {
1:         return -1;
1:       }
1:       return date1.compareTo(date2);
1:     } else {
1:       return this.memberValue.compareTo(o.memberValue);
author:QiangCai
-------------------------------------------------------------------------------
commit:256dbed
/////////////////////////////////////////////////////////////////////////
0:         String format = CarbonUtil.getFormatFromProperty(dataType);
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:d73f4bf
/////////////////////////////////////////////////////////////////////////
0:       case DATE:
author:kumarvishal
-------------------------------------------------------------------------------
commit:ea04fce
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.CarbonUtil;
/////////////////////////////////////////////////////////////////////////
0:         String format= CarbonUtil.getFormatFromProperty(dataType);
0:         SimpleDateFormat parser = new SimpleDateFormat(format);
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1:     return ((memberValue == null) ? 0 : memberValue.hashCode());
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.writer.sortindex;
1: 
1: import java.text.ParseException;
1: import java.text.SimpleDateFormat;
1: import java.util.Date;
1: 
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: /**
1:  * Dictionary sort model class holds the member byte value and corresponding key value.
1:  */
1: public class CarbonDictionarySortModel implements Comparable<CarbonDictionarySortModel> {
1: 
1:   /**
1:    * Surrogate key
1:    */
1:   private int key;
1: 
1:   /**
1:    * member value in bytes
1:    */
1:   private String memberValue;
1: 
1:   /**
1:    * member dataType
1:    */
1:   private DataType dataType;
1: 
1:   /**
1:    * Constructor to init the dictionary sort model
1:    *
1:    * @param key
1:    * @param dataType
1:    * @param memberValue
1:    */
1:   public CarbonDictionarySortModel(int key, DataType dataType, String memberValue) {
1:     this.key = key;
1:     this.dataType = dataType;
1:     this.memberValue = memberValue;
1:   }
1: 
1:   /**
1:    * Compare
1:    */
1:   @Override public int compareTo(CarbonDictionarySortModel o) {
0:     switch (dataType) {
0:       case SHORT:
0:       case INT:
0:       case LONG:
0:       case DOUBLE:
1: 
0:         Double d1 = null;
0:         Double d2 = null;
0:         try {
0:           d1 = new Double(memberValue);
0:         } catch (NumberFormatException e) {
0:           if (CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(o.memberValue)) {
1:             return -1;
1:           }
0:           return 1;
1:         }
0:         try {
0:           d2 = new Double(o.memberValue);
0:         } catch (NumberFormatException e) {
1:           return -1;
1:         }
0:         return d1.compareTo(d2);
0:       case DECIMAL:
0:         java.math.BigDecimal val1 = null;
0:         java.math.BigDecimal val2 = null;
0:         try {
0:           val1 = new java.math.BigDecimal(memberValue);
0:         } catch (NumberFormatException e) {
0:           if (CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(o.memberValue)) {
1:             return -1;
1:           }
0:           return 1;
1:         }
0:         try {
0:           val2 = new java.math.BigDecimal(o.memberValue);
0:         } catch (NumberFormatException e) {
1:           return -1;
1:         }
0:         return val1.compareTo(val2);
0:       case TIMESTAMP:
0:         SimpleDateFormat parser = new SimpleDateFormat(CarbonProperties.getInstance()
0:             .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
0:                 CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
0:         Date date1 = null;
0:         Date date2 = null;
0:         try {
0:           date1 = parser.parse(memberValue);
0:         } catch (ParseException e) {
0:           if (CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(o.memberValue)) {
1:             return -1;
1:           }
0:           return 1;
1:         }
0:         try {
0:           date2 = parser.parse(o.memberValue);
0:         } catch (ParseException e) {
1:           return -1;
1:         }
0:         return date1.compareTo(date2);
0:       case STRING:
0:       default:
0:         return this.memberValue.compareTo(o.memberValue);
1:     }
1:   }
1: 
1:   /**
1:    * @see Object#hashCode()
1:    */
1:   @Override public int hashCode() {
0:     int result = ((memberValue == null) ? 0 : memberValue.hashCode());
0:     return result;
1:   }
1: 
1:   /**
1:    * @see Object#equals(Object)
1:    */
1:   @Override public boolean equals(Object obj) {
1:     if (obj instanceof CarbonDictionarySortModel) {
1:       if (this == obj) {
1:         return true;
1:       }
1:       CarbonDictionarySortModel other = (CarbonDictionarySortModel) obj;
1:       if (memberValue == null) {
1:         if (other.memberValue != null) {
1:           return false;
1:         }
1:       } else if (!this.memberValue.equals(other.memberValue)) {
1:         return false;
1:       }
1:       return true;
1:     } else {
1:       return false;
1:     }
1:   }
1: 
1:   /**
1:    * return the surrogate of the member
1:    *
1:    * @return
1:    */
1:   public int getKey() {
1:     return key;
1:   }
1: 
1:   /**
0:    * Returns member buye
1:    *
1:    * @return
1:    */
0:   public String getMemberValue() {
0:     return memberValue;
1:   }
1: 
1: }
============================================================================