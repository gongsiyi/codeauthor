1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:cd6a4ff: 
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: import java.util.ArrayList;
1:cd6a4ff: import java.util.Collections;
1:cd6a4ff: import java.util.HashMap;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: import java.util.Map;
1:cd6a4ff: import java.util.UUID;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.cache.Cache;
1:cd6a4ff: import org.apache.carbondata.core.cache.CacheProvider;
1:cd6a4ff: import org.apache.carbondata.core.cache.CacheType;
1:2fe7758: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:1155d4d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonProperties;
1:cd6a4ff: import org.apache.carbondata.core.writer.sortindex.CarbonDictionarySortIndexWriter;
1:cd6a4ff: import org.apache.carbondata.core.writer.sortindex.CarbonDictionarySortIndexWriterImpl;
1:2fe7758: 
1:cd6a4ff: import org.junit.After;
1:cd6a4ff: import org.junit.Before;
1:cd6a4ff: import org.junit.Test;
1:cd6a4ff: 
1:cd6a4ff: import static org.junit.Assert.assertTrue;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * Test class to test the functionality of forward dictionary cache
1:cd6a4ff:  */
1:cd6a4ff: public class ForwardDictionaryCacheTest extends AbstractDictionaryCacheTest {
1:cd6a4ff: 
1:cd6a4ff:   private Cache forwardDictionaryCache;
1:cd6a4ff: 
1:cd6a4ff:   @Before public void setUp() throws Exception {
1:cd6a4ff:     init();
1:cd6a4ff:     this.databaseName = props.getProperty("database", "testSchema");
1:cd6a4ff:     this.tableName = props.getProperty("tableName", "carbon");
1:cd6a4ff:     this.carbonStorePath = props.getProperty("storePath", "carbonStore");
1:1155d4d:     carbonTableIdentifier =
1:1155d4d:         new CarbonTableIdentifier(databaseName, tableName, UUID.randomUUID().toString());
1:bf6c471:     identifier =
1:2fe7758:         AbsoluteTableIdentifier.from(carbonStorePath + "/" + databaseName + "/" + tableName,
1:1155d4d:             carbonTableIdentifier);
1:cd6a4ff:     columnIdentifiers = new String[] { "name", "place" };
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:     prepareDataSet();
1:cd6a4ff:     createDictionaryCacheObject();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @After public void tearDown() throws Exception {
1:cd6a4ff:     carbonTableIdentifier = null;
1:bf6c471:     identifier = null;
1:cd6a4ff:     forwardDictionaryCache = null;
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private void createDictionaryCacheObject() {
1:cd6a4ff:     // enable lru cache by setting cache size
1:cd6a4ff:     CarbonProperties.getInstance()
1:b6ab4ef:         .addProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE, "10");
1:cd6a4ff:     CacheProvider cacheProvider = CacheProvider.getInstance();
1:cd6a4ff:     forwardDictionaryCache =
1:1155d4d:         cacheProvider.createCache(CacheType.FORWARD_DICTIONARY);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void get() throws Exception {
1:cd6a4ff:     // delete store path
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:     String columnIdentifier = columnIdentifiers[0];
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:cd6a4ff:     // write sort index file
1:cd6a4ff:     writeSortIndexFile(dataSet1, columnIdentifier);
1:cd6a4ff:     // create dictionary column unique identifier instance
1:cd6a4ff:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:cd6a4ff:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     // get the forward dictionary object
1:cd6a4ff:     Dictionary forwardDictionary =
1:cd6a4ff:         (Dictionary) forwardDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // forward dictionary object should not be null
1:cd6a4ff:     assertTrue(null != forwardDictionary);
1:cd6a4ff:     // compare that surrogate key for data inserted and actual data should be same
1:cd6a4ff:     compareSurrogateKeyData(dataSet1, forwardDictionary);
1:cd6a4ff:     // decrement its access count
1:cd6a4ff:     forwardDictionary.clear();
1:cd6a4ff:     // remove keys from lru cache
1:cd6a4ff:     removeKeyFromLRUCache(forwardDictionaryCache);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void getAll() throws Exception {
1:cd6a4ff:     // delete store path
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:     String columnIdentifier = columnIdentifiers[0];
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:cd6a4ff:     // write sort index file
1:cd6a4ff:     writeSortIndexFile(dataSet1, columnIdentifier);
1:cd6a4ff:     List<DictionaryColumnUniqueIdentifier> dictionaryColumnUniqueIdentifiers = new ArrayList<>(3);
1:cd6a4ff:     // create dictionary column unique identifier instance
1:cd6a4ff:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:cd6a4ff:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     dictionaryColumnUniqueIdentifiers.add(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     columnIdentifier = columnIdentifiers[1];
1:cd6a4ff:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:cd6a4ff:     // write sort index file
1:cd6a4ff:     writeSortIndexFile(dataSet1, columnIdentifier);
1:cd6a4ff:     // create dictionary column unique identifier instance
1:cd6a4ff:     dictionaryColumnUniqueIdentifier = createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     dictionaryColumnUniqueIdentifiers.add(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // get the forward dictionary object
1:cd6a4ff:     List<Dictionary> forwardDictionaryList =
1:cd6a4ff:         (List<Dictionary>) forwardDictionaryCache.getAll(dictionaryColumnUniqueIdentifiers);
1:cd6a4ff:     for (Dictionary forwardDictionary : forwardDictionaryList) {
1:cd6a4ff:       // forward dictionary object should not be null
1:cd6a4ff:       assertTrue(null != forwardDictionary);
1:cd6a4ff:       // compare that surrogate key for data inserted and actual data should be same
1:cd6a4ff:       compareSurrogateKeyData(dataSet1, forwardDictionary);
1:cd6a4ff:       // decrement its access count
1:cd6a4ff:       forwardDictionary.clear();
1:cd6a4ff:     }
1:cd6a4ff:     // remove keys from lru cache
1:cd6a4ff:     removeKeyFromLRUCache(forwardDictionaryCache);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testMultipleDictionaryChunks() throws Exception {
1:cd6a4ff:     // delete store path
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:     String columnIdentifier = columnIdentifiers[0];
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:cd6a4ff:     // write sort index file
1:cd6a4ff:     writeSortIndexFile(dataSet1, columnIdentifier);
1:cd6a4ff:     // create dictionary column unique identifier instance
1:cd6a4ff:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:cd6a4ff:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     // get the forward dictionary object
1:cd6a4ff:     Dictionary forwardDictionary =
1:cd6a4ff:         (Dictionary) forwardDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // forward dictionary object should not be null
1:cd6a4ff:     assertTrue(null != forwardDictionary);
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet2, columnIdentifier);
1:cd6a4ff:     // write sort index file
1:cd6a4ff:     List<String> allDictionaryChunkList = new ArrayList<>(6);
1:cd6a4ff:     allDictionaryChunkList.addAll(dataSet1);
1:cd6a4ff:     allDictionaryChunkList.addAll(dataSet2);
1:cd6a4ff:     writeSortIndexFile(allDictionaryChunkList, columnIdentifier);
1:cd6a4ff:     // get the forward dictionary object
1:cd6a4ff:     forwardDictionary = (Dictionary) forwardDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // forward dictionary object should not be null
1:cd6a4ff:     assertTrue(null != forwardDictionary);
1:cd6a4ff:     // prepare expected result
1:cd6a4ff:     List<String> expected = new ArrayList<>(2);
1:cd6a4ff:     expected.addAll(dataSet1);
1:cd6a4ff:     expected.addAll(dataSet2);
1:cd6a4ff:     // compare the data
1:cd6a4ff:     compareSurrogateKeyData(expected, forwardDictionary);
1:cd6a4ff:     // decrement access count
1:cd6a4ff:     forwardDictionary.clear();
1:cd6a4ff:     // remove keys from lru cache
1:cd6a4ff:     removeKeyFromLRUCache(forwardDictionaryCache);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testSortedAndInvertedSortIndex() throws Exception {
1:cd6a4ff:     // delete store path
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:     String columnIdentifier = columnIdentifiers[0];
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet3, columnIdentifier);
1:cd6a4ff:     // write sort index file
1:cd6a4ff:     writeSortIndexFile(dataSet3, columnIdentifier);
1:cd6a4ff:     // create dictionary column unique identifier instance
1:cd6a4ff:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:cd6a4ff:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     // get the forward dictionary object
1:cd6a4ff:     Dictionary forwardDictionary =
1:cd6a4ff:         (Dictionary) forwardDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // forward dictionary object should not be null
1:cd6a4ff:     assertTrue(null != forwardDictionary);
1:cd6a4ff:     // compare that surrogate key for data inserted and actual data should be same
1:cd6a4ff:     compareSurrogateKeyData(dataSet3, forwardDictionary);
1:cd6a4ff:     // compare the surrogate keys for given dictionary values
1:cd6a4ff:     compareDictionaryValueFromSortedIndex(dataSet3, forwardDictionary);
1:cd6a4ff:     // decrement its access count
1:cd6a4ff:     forwardDictionary.clear();
1:cd6a4ff:     // remove keys from lru cache
1:cd6a4ff:     removeKeyFromLRUCache(forwardDictionaryCache);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will prepare the sort index data from the given data and write
1:cd6a4ff:    * it to a sort index file
1:cd6a4ff:    *
1:cd6a4ff:    * @param data
1:086b06d:    * @param columnId
1:cd6a4ff:    * @throws IOException
1:cd6a4ff:    */
1:cd6a4ff:   private void writeSortIndexFile(List<String> data, String columnId) throws IOException {
1:cd6a4ff: 	ColumnIdentifier columnIdentifier = new ColumnIdentifier(columnId, null, null);
1:d3a09e2:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:bf6c471:         new DictionaryColumnUniqueIdentifier(identifier, columnIdentifier,
1:29dc302:             columnIdentifier.getDataType());
1:cd6a4ff:     Map<String, Integer> dataToSurrogateKeyMap = new HashMap<>(data.size());
1:cd6a4ff:     int surrogateKey = 0;
1:cd6a4ff:     List<Integer> invertedIndexList = new ArrayList<>(data.size());
1:cd6a4ff:     for (int i = 0; i < data.size(); i++) {
1:cd6a4ff:       dataToSurrogateKeyMap.put(data.get(i), ++surrogateKey);
1:cd6a4ff:     }
1:cd6a4ff:     List<String> sortedKeyList = new ArrayList<>(dataToSurrogateKeyMap.keySet());
1:cd6a4ff:     Collections.sort(sortedKeyList);
1:cd6a4ff:     List<Integer> sortedIndexList = new ArrayList<>(data.size());
1:cd6a4ff:     int[] invertedIndexArray = new int[sortedKeyList.size()];
1:cd6a4ff:     for (int i = 0; i < sortedKeyList.size(); i++) {
1:cd6a4ff:       Integer key = dataToSurrogateKeyMap.get(sortedKeyList.get(i));
1:cd6a4ff:       sortedIndexList.add(key);
1:cd6a4ff:       invertedIndexArray[--key] = i + 1;
1:cd6a4ff:     }
1:cd6a4ff:     for (int i = 0; i < invertedIndexArray.length; i++) {
1:cd6a4ff:       invertedIndexList.add(invertedIndexArray[i]);
1:cd6a4ff:     }
1:cd6a4ff:     CarbonDictionarySortIndexWriter dictionarySortIndexWriter =
1:1155d4d:         new CarbonDictionarySortIndexWriterImpl(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     try {
1:cd6a4ff:       dictionarySortIndexWriter.writeSortIndex(sortedIndexList);
1:cd6a4ff:       dictionarySortIndexWriter.writeInvertedSortIndex(invertedIndexList);
1:cd6a4ff:     } finally {
1:cd6a4ff:       dictionarySortIndexWriter.close();
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will compare the actual data with expected data
1:cd6a4ff:    *
1:cd6a4ff:    * @param data
1:cd6a4ff:    * @param forwardDictionary
1:cd6a4ff:    */
1:cd6a4ff:   private void compareSurrogateKeyData(List<String> data, Dictionary forwardDictionary) {
1:cd6a4ff:     int surrogateKey = 0;
1:cd6a4ff:     for (int i = 0; i < data.size(); i++) {
1:cd6a4ff:       surrogateKey++;
1:cd6a4ff:       String dictionaryValue = forwardDictionary.getDictionaryValueForKey(surrogateKey);
1:cd6a4ff:       assertTrue(data.get(i).equals(dictionaryValue));
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will get the dictionary value from sorted index and compare with the data set
1:cd6a4ff:    *
1:cd6a4ff:    * @param data
1:cd6a4ff:    * @param forwardDictionary
1:cd6a4ff:    */
1:cd6a4ff:   private void compareDictionaryValueFromSortedIndex(List<String> data,
1:cd6a4ff:       Dictionary forwardDictionary) {
1:cd6a4ff:     int expectedSurrogateKey = 0;
1:cd6a4ff:     for (int i = 0; i < data.size(); i++) {
1:cd6a4ff:       expectedSurrogateKey++;
1:cd6a4ff:       String expectedDictionaryValue = data.get(i);
1:cd6a4ff:       int actualSurrogateKey = forwardDictionary.getSurrogateKey(expectedDictionaryValue);
1:cd6a4ff:       assertTrue(actualSurrogateKey == expectedSurrogateKey);
1:cd6a4ff:       int sortedIndex = forwardDictionary.getSortedIndex(actualSurrogateKey);
1:cd6a4ff:       String actualDictionaryValue =
1:cd6a4ff:           forwardDictionary.getDictionaryValueFromSortedIndex(sortedIndex);
1:cd6a4ff:       assertTrue(expectedDictionaryValue.equals(actualDictionaryValue));
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:bf6c471
/////////////////////////////////////////////////////////////////////////
1:     identifier =
/////////////////////////////////////////////////////////////////////////
1:     identifier = null;
/////////////////////////////////////////////////////////////////////////
1:         new DictionaryColumnUniqueIdentifier(identifier, columnIdentifier,
commit:2fe7758
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: 
/////////////////////////////////////////////////////////////////////////
1:         AbsoluteTableIdentifier.from(carbonStorePath + "/" + databaseName + "/" + tableName,
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:manishgupta88
-------------------------------------------------------------------------------
commit:29dc302
/////////////////////////////////////////////////////////////////////////
1:             columnIdentifier.getDataType());
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
1:     carbonTableIdentifier =
1:         new CarbonTableIdentifier(databaseName, tableName, UUID.randomUUID().toString());
0:     absoluteTableIdentifier =
0:         new AbsoluteTableIdentifier(carbonStorePath + "/" + databaseName + "/" + tableName,
1:             carbonTableIdentifier);
/////////////////////////////////////////////////////////////////////////
0:     absoluteTableIdentifier = null;
/////////////////////////////////////////////////////////////////////////
1:         cacheProvider.createCache(CacheType.FORWARD_DICTIONARY);
/////////////////////////////////////////////////////////////////////////
0:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
0:             CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier));
/////////////////////////////////////////////////////////////////////////
1:         new CarbonDictionarySortIndexWriterImpl(dictionaryColumnUniqueIdentifier);
commit:b6ab4ef
/////////////////////////////////////////////////////////////////////////
1:         .addProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE, "10");
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
/////////////////////////////////////////////////////////////////////////
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
0:         new DictionaryColumnUniqueIdentifier(carbonTableIdentifier, columnIdentifier,
0:             columnIdentifier.getDataType(),
0:             CarbonStorePath.getCarbonTablePath(carbonStorePath, carbonTableIdentifier));
/////////////////////////////////////////////////////////////////////////
0:         new CarbonDictionarySortIndexWriterImpl(carbonTableIdentifier, dictionaryColumnUniqueIdentifier,
author:QiangCai
-------------------------------------------------------------------------------
commit:086b06d
/////////////////////////////////////////////////////////////////////////
1:    * @param columnId
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.metadata.ColumnIdentifier;
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.UUID;
1: 
1: import org.apache.carbondata.core.cache.Cache;
1: import org.apache.carbondata.core.cache.CacheProvider;
1: import org.apache.carbondata.core.cache.CacheType;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: import org.apache.carbondata.core.writer.sortindex.CarbonDictionarySortIndexWriter;
1: import org.apache.carbondata.core.writer.sortindex.CarbonDictionarySortIndexWriterImpl;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: /**
1:  * Test class to test the functionality of forward dictionary cache
1:  */
1: public class ForwardDictionaryCacheTest extends AbstractDictionaryCacheTest {
1: 
1:   private Cache forwardDictionaryCache;
1: 
1:   @Before public void setUp() throws Exception {
1:     init();
1:     this.databaseName = props.getProperty("database", "testSchema");
1:     this.tableName = props.getProperty("tableName", "carbon");
1:     this.carbonStorePath = props.getProperty("storePath", "carbonStore");
0:     carbonTableIdentifier = new CarbonTableIdentifier(databaseName, tableName, UUID.randomUUID().toString());
1:     columnIdentifiers = new String[] { "name", "place" };
1:     deleteStorePath();
1:     prepareDataSet();
1:     createDictionaryCacheObject();
1:   }
1: 
1:   @After public void tearDown() throws Exception {
1:     carbonTableIdentifier = null;
1:     forwardDictionaryCache = null;
1:     deleteStorePath();
1:   }
1: 
1:   private void createDictionaryCacheObject() {
1:     // enable lru cache by setting cache size
1:     CarbonProperties.getInstance()
0:         .addProperty(CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE, "10");
1:     CacheProvider cacheProvider = CacheProvider.getInstance();
1:     forwardDictionaryCache =
0:         cacheProvider.createCache(CacheType.FORWARD_DICTIONARY, this.carbonStorePath);
1:   }
1: 
1:   @Test public void get() throws Exception {
1:     // delete store path
1:     deleteStorePath();
1:     String columnIdentifier = columnIdentifiers[0];
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:     // write sort index file
1:     writeSortIndexFile(dataSet1, columnIdentifier);
1:     // create dictionary column unique identifier instance
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     // get the forward dictionary object
1:     Dictionary forwardDictionary =
1:         (Dictionary) forwardDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:     // forward dictionary object should not be null
1:     assertTrue(null != forwardDictionary);
1:     // compare that surrogate key for data inserted and actual data should be same
1:     compareSurrogateKeyData(dataSet1, forwardDictionary);
1:     // decrement its access count
1:     forwardDictionary.clear();
1:     // remove keys from lru cache
1:     removeKeyFromLRUCache(forwardDictionaryCache);
1:   }
1: 
1:   @Test public void getAll() throws Exception {
1:     // delete store path
1:     deleteStorePath();
1:     String columnIdentifier = columnIdentifiers[0];
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:     // write sort index file
1:     writeSortIndexFile(dataSet1, columnIdentifier);
1:     List<DictionaryColumnUniqueIdentifier> dictionaryColumnUniqueIdentifiers = new ArrayList<>(3);
1:     // create dictionary column unique identifier instance
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     dictionaryColumnUniqueIdentifiers.add(dictionaryColumnUniqueIdentifier);
1:     // prepare dictionary writer and write data
1:     columnIdentifier = columnIdentifiers[1];
1:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:     // write sort index file
1:     writeSortIndexFile(dataSet1, columnIdentifier);
1:     // create dictionary column unique identifier instance
1:     dictionaryColumnUniqueIdentifier = createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     dictionaryColumnUniqueIdentifiers.add(dictionaryColumnUniqueIdentifier);
1:     // get the forward dictionary object
1:     List<Dictionary> forwardDictionaryList =
1:         (List<Dictionary>) forwardDictionaryCache.getAll(dictionaryColumnUniqueIdentifiers);
1:     for (Dictionary forwardDictionary : forwardDictionaryList) {
1:       // forward dictionary object should not be null
1:       assertTrue(null != forwardDictionary);
1:       // compare that surrogate key for data inserted and actual data should be same
1:       compareSurrogateKeyData(dataSet1, forwardDictionary);
1:       // decrement its access count
1:       forwardDictionary.clear();
1:     }
1:     // remove keys from lru cache
1:     removeKeyFromLRUCache(forwardDictionaryCache);
1:   }
1: 
1:   @Test public void testMultipleDictionaryChunks() throws Exception {
1:     // delete store path
1:     deleteStorePath();
1:     String columnIdentifier = columnIdentifiers[0];
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:     // write sort index file
1:     writeSortIndexFile(dataSet1, columnIdentifier);
1:     // create dictionary column unique identifier instance
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     // get the forward dictionary object
1:     Dictionary forwardDictionary =
1:         (Dictionary) forwardDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:     // forward dictionary object should not be null
1:     assertTrue(null != forwardDictionary);
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet2, columnIdentifier);
1:     // write sort index file
1:     List<String> allDictionaryChunkList = new ArrayList<>(6);
1:     allDictionaryChunkList.addAll(dataSet1);
1:     allDictionaryChunkList.addAll(dataSet2);
1:     writeSortIndexFile(allDictionaryChunkList, columnIdentifier);
1:     // get the forward dictionary object
1:     forwardDictionary = (Dictionary) forwardDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:     // forward dictionary object should not be null
1:     assertTrue(null != forwardDictionary);
1:     // prepare expected result
1:     List<String> expected = new ArrayList<>(2);
1:     expected.addAll(dataSet1);
1:     expected.addAll(dataSet2);
1:     // compare the data
1:     compareSurrogateKeyData(expected, forwardDictionary);
1:     // decrement access count
1:     forwardDictionary.clear();
1:     // remove keys from lru cache
1:     removeKeyFromLRUCache(forwardDictionaryCache);
1:   }
1: 
1:   @Test public void testSortedAndInvertedSortIndex() throws Exception {
1:     // delete store path
1:     deleteStorePath();
1:     String columnIdentifier = columnIdentifiers[0];
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet3, columnIdentifier);
1:     // write sort index file
1:     writeSortIndexFile(dataSet3, columnIdentifier);
1:     // create dictionary column unique identifier instance
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     // get the forward dictionary object
1:     Dictionary forwardDictionary =
1:         (Dictionary) forwardDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:     // forward dictionary object should not be null
1:     assertTrue(null != forwardDictionary);
1:     // compare that surrogate key for data inserted and actual data should be same
1:     compareSurrogateKeyData(dataSet3, forwardDictionary);
1:     // compare the surrogate keys for given dictionary values
1:     compareDictionaryValueFromSortedIndex(dataSet3, forwardDictionary);
1:     // decrement its access count
1:     forwardDictionary.clear();
1:     // remove keys from lru cache
1:     removeKeyFromLRUCache(forwardDictionaryCache);
1:   }
1: 
1:   /**
1:    * This method will prepare the sort index data from the given data and write
1:    * it to a sort index file
1:    *
1:    * @param data
0:    * @param columnIdentifier
1:    * @throws IOException
1:    */
1:   private void writeSortIndexFile(List<String> data, String columnId) throws IOException {
1: 	ColumnIdentifier columnIdentifier = new ColumnIdentifier(columnId, null, null);
1:     Map<String, Integer> dataToSurrogateKeyMap = new HashMap<>(data.size());
1:     int surrogateKey = 0;
1:     List<Integer> invertedIndexList = new ArrayList<>(data.size());
1:     for (int i = 0; i < data.size(); i++) {
1:       dataToSurrogateKeyMap.put(data.get(i), ++surrogateKey);
1:     }
1:     List<String> sortedKeyList = new ArrayList<>(dataToSurrogateKeyMap.keySet());
1:     Collections.sort(sortedKeyList);
1:     List<Integer> sortedIndexList = new ArrayList<>(data.size());
1:     int[] invertedIndexArray = new int[sortedKeyList.size()];
1:     for (int i = 0; i < sortedKeyList.size(); i++) {
1:       Integer key = dataToSurrogateKeyMap.get(sortedKeyList.get(i));
1:       sortedIndexList.add(key);
1:       invertedIndexArray[--key] = i + 1;
1:     }
1:     for (int i = 0; i < invertedIndexArray.length; i++) {
1:       invertedIndexList.add(invertedIndexArray[i]);
1:     }
1:     CarbonDictionarySortIndexWriter dictionarySortIndexWriter =
0:         new CarbonDictionarySortIndexWriterImpl(carbonTableIdentifier, columnIdentifier,
0:             carbonStorePath);
1:     try {
1:       dictionarySortIndexWriter.writeSortIndex(sortedIndexList);
1:       dictionarySortIndexWriter.writeInvertedSortIndex(invertedIndexList);
1:     } finally {
1:       dictionarySortIndexWriter.close();
1:     }
1:   }
1: 
1:   /**
1:    * This method will compare the actual data with expected data
1:    *
1:    * @param data
1:    * @param forwardDictionary
1:    */
1:   private void compareSurrogateKeyData(List<String> data, Dictionary forwardDictionary) {
1:     int surrogateKey = 0;
1:     for (int i = 0; i < data.size(); i++) {
1:       surrogateKey++;
1:       String dictionaryValue = forwardDictionary.getDictionaryValueForKey(surrogateKey);
1:       assertTrue(data.get(i).equals(dictionaryValue));
1:     }
1:   }
1: 
1:   /**
1:    * This method will get the dictionary value from sorted index and compare with the data set
1:    *
1:    * @param data
1:    * @param forwardDictionary
1:    */
1:   private void compareDictionaryValueFromSortedIndex(List<String> data,
1:       Dictionary forwardDictionary) {
1:     int expectedSurrogateKey = 0;
1:     for (int i = 0; i < data.size(); i++) {
1:       expectedSurrogateKey++;
1:       String expectedDictionaryValue = data.get(i);
1:       int actualSurrogateKey = forwardDictionary.getSurrogateKey(expectedDictionaryValue);
1:       assertTrue(actualSurrogateKey == expectedSurrogateKey);
1:       int sortedIndex = forwardDictionary.getSortedIndex(actualSurrogateKey);
1:       String actualDictionaryValue =
1:           forwardDictionary.getDictionaryValueFromSortedIndex(sortedIndex);
1:       assertTrue(expectedDictionaryValue.equals(actualDictionaryValue));
1:     }
1:   }
1: }
============================================================================