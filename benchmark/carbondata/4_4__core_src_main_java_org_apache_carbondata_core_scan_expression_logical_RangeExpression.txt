1:c2e4eb2: /*
1:c2e4eb2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c2e4eb2:  * contributor license agreements.  See the NOTICE file distributed with
1:c2e4eb2:  * this work for additional information regarding copyright ownership.
1:c2e4eb2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c2e4eb2:  * (the "License"); you may not use this file except in compliance with
1:c2e4eb2:  * the License.  You may obtain a copy of the License at
1:c2e4eb2:  *
1:c2e4eb2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:c2e4eb2:  *
1:c2e4eb2:  * Unless required by applicable law or agreed to in writing, software
1:c2e4eb2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c2e4eb2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c2e4eb2:  * See the License for the specific language governing permissions and
1:c2e4eb2:  * limitations under the License.
1:c2e4eb2:  */
1:c2e4eb2: 
1:c2e4eb2: package org.apache.carbondata.core.scan.expression.logical;
1:c2e4eb2: 
1:c2e4eb2: import java.util.ArrayList;
1:c2e4eb2: import java.util.Collections;
1:c2e4eb2: import java.util.List;
1:c2e4eb2: 
1:c2e4eb2: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.Expression;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.ExpressionResult;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.LiteralExpression;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.conditional.BinaryConditionalExpression;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1:c2e4eb2: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1:c2e4eb2: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1:c2e4eb2: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1:c2e4eb2: 
1:c2e4eb2: public class RangeExpression extends BinaryConditionalExpression {
1:c2e4eb2: 
1:c2e4eb2:   private static final long serialVersionUID = 1L;
1:c2e4eb2: 
1:c2e4eb2:   public RangeExpression(Expression left, Expression right) {
1:c2e4eb2:     super(left, right);
1:c2e4eb2:   }
1:c2e4eb2: 
1:d5bec4d:   @Override
1:d5bec4d:   public ExpressionResult evaluate(RowIntf value)
1:c2e4eb2:       throws FilterUnsupportedException, FilterIllegalMemberException {
1:c2e4eb2:     ExpressionResult resultLeft = left.evaluate(value);
1:c2e4eb2:     ExpressionResult resultRight = right.evaluate(value);
1:956833e:     if (resultLeft.getDataType() == DataTypes.BOOLEAN) {
1:956833e:       resultLeft.set(DataTypes.BOOLEAN, (resultLeft.getBoolean() && resultRight.getBoolean()));
1:956833e:     } else {
1:956833e:       throw new FilterUnsupportedException(
1:956833e:           "Incompatible datatype for applying RANGE Expression Filter");
1:c2e4eb2:     }
1:c2e4eb2:     return resultLeft;
1:c2e4eb2:   }
1:c2e4eb2: 
2:d5bec4d:   @Override
1:d5bec4d:   public ExpressionType getFilterExpressionType() {
1:c2e4eb2:     return ExpressionType.RANGE;
1:c2e4eb2:   }
1:c2e4eb2: 
1:f911403:   @Override public String getString() {
1:f911403:     return "Range(" + left.getString() + ',' + right.getString() + ')';
1:c2e4eb2:   }
1:c2e4eb2: 
1:d5bec4d:   @Override
1:d5bec4d:   public String getStatement() {
1:d5bec4d:     return left.getStatement() + " between " + right.getStatement();
1:d5bec4d:   }
1:d5bec4d: 
1:d5bec4d:   @Override
1:d5bec4d:   public List<ExpressionResult> getLiterals() {
1:c2e4eb2:     List<ExpressionResult> listOfExp =
1:c2e4eb2:         new ArrayList<ExpressionResult>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:c2e4eb2:     getLiteralsResult(this, listOfExp);
1:c2e4eb2:     Collections.sort(listOfExp);
1:c2e4eb2:     return listOfExp;
1:c2e4eb2:   }
1:c2e4eb2: 
1:c2e4eb2:   private void getLiteralsResult(Expression expression, List<ExpressionResult> listOfExp) {
1:c2e4eb2:     for (Expression child : expression.getChildren()) {
1:c2e4eb2:       if (child instanceof LiteralExpression) {
1:c2e4eb2:         ExpressionResult colExp = ((LiteralExpression) child).getExpressionResult();
1:c2e4eb2:         listOfExp.add(colExp);
1:c2e4eb2:       } else {
1:c2e4eb2:         getLiteralsResult(child, listOfExp);
1:c2e4eb2:       }
1:c2e4eb2:     }
1:c2e4eb2:   }
1:c2e4eb2: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:   @Override public String getString() {
1:     return "Range(" + left.getString() + ',' + right.getString() + ')';
author:QiangCai
-------------------------------------------------------------------------------
commit:d5bec4d
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public ExpressionResult evaluate(RowIntf value)
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public ExpressionType getFilterExpressionType() {
1:   @Override
0:   public String getString() {
1:   @Override
1:   public String getStatement() {
1:     return left.getStatement() + " between " + right.getStatement();
1:   }
1: 
1:   @Override
1:   public List<ExpressionResult> getLiterals() {
author:Jacky Li
-------------------------------------------------------------------------------
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     if (resultLeft.getDataType() == DataTypes.BOOLEAN) {
1:       resultLeft.set(DataTypes.BOOLEAN, (resultLeft.getBoolean() && resultRight.getBoolean()));
1:     } else {
1:       throw new FilterUnsupportedException(
1:           "Incompatible datatype for applying RANGE Expression Filter");
author:sounakr
-------------------------------------------------------------------------------
commit:c2e4eb2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.expression.logical;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.scan.expression.Expression;
1: import org.apache.carbondata.core.scan.expression.ExpressionResult;
1: import org.apache.carbondata.core.scan.expression.LiteralExpression;
1: import org.apache.carbondata.core.scan.expression.conditional.BinaryConditionalExpression;
1: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1: import org.apache.carbondata.core.scan.filter.intf.ExpressionType;
1: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1: 
1: public class RangeExpression extends BinaryConditionalExpression {
1: 
1:   private static final long serialVersionUID = 1L;
1: 
1:   public RangeExpression(Expression left, Expression right) {
1:     super(left, right);
1:   }
1: 
0:   @Override public ExpressionResult evaluate(RowIntf value)
1:       throws FilterUnsupportedException, FilterIllegalMemberException {
1:     ExpressionResult resultLeft = left.evaluate(value);
1:     ExpressionResult resultRight = right.evaluate(value);
0:     switch (resultLeft.getDataType()) {
0:       case BOOLEAN:
0:         resultLeft.set(DataType.BOOLEAN, (resultLeft.getBoolean() && resultRight.getBoolean()));
0:         break;
0:       default:
0:         throw new FilterUnsupportedException(
0:             "Incompatible datatype for applying RANGE Expression Filter");
1:     }
1:     return resultLeft;
1:   }
1: 
0:   @Override public ExpressionType getFilterExpressionType() {
1:     return ExpressionType.RANGE;
1:   }
1: 
0:   @Override public String getString() {
0:     return null;
1:   }
1: 
0:   @Override public List<ExpressionResult> getLiterals() {
1:     List<ExpressionResult> listOfExp =
1:         new ArrayList<ExpressionResult>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:     getLiteralsResult(this, listOfExp);
1:     Collections.sort(listOfExp);
1:     return listOfExp;
1:   }
1: 
1:   private void getLiteralsResult(Expression expression, List<ExpressionResult> listOfExp) {
1:     for (Expression child : expression.getChildren()) {
1:       if (child instanceof LiteralExpression) {
1:         ExpressionResult colExp = ((LiteralExpression) child).getExpressionResult();
1:         listOfExp.add(colExp);
1:       } else {
1:         getLiteralsResult(child, listOfExp);
1:       }
1:     }
1:   }
1: }
============================================================================