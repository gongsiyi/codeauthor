1:e710339: /*
1:e710339:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e710339:  * contributor license agreements.  See the NOTICE file distributed with
1:e710339:  * this work for additional information regarding copyright ownership.
1:e710339:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e710339:  * (the "License"); you may not use this file except in compliance with
1:e710339:  * the License.  You may obtain a copy of the License at
1:e710339:  *
1:e710339:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e710339:  *
1:e710339:  * Unless required by applicable law or agreed to in writing, software
1:e710339:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e710339:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e710339:  * See the License for the specific language governing permissions and
1:e710339:  * limitations under the License.
1:e710339:  */
1:e710339: package org.apache.carbondata.core.datastore.page;
1:438b442: 
1:e710339: import java.util.concurrent.Callable;
2:e710339: 
1:e710339: import org.apache.carbondata.core.datastore.TableSpec;
1:e710339: import org.apache.carbondata.core.datastore.page.encoding.EncodedColumnPage;
1:2ccdbb7: import org.apache.carbondata.core.util.CarbonUtil;
1:e710339: 
1:e710339: /**
1:e710339:  * Below class will be used to encode column pages for which local dictionary was generated
1:e710339:  * but all the pages in blocklet was not encoded with local dictionary.
1:e710339:  * This is required as all the pages of a column in blocklet either it will be local dictionary
1:e710339:  * encoded or without local dictionary encoded.
1:e710339:  */
1:2ccdbb7: public class ActualDataBasedFallbackEncoder
1:2ccdbb7:     implements Callable<FallbackEncodedColumnPage> {
1:e710339: 
1:e710339:   /**
1:e710339:    * actual local dictionary generated column page
1:e710339:    */
1:e710339:   private EncodedColumnPage encodedColumnPage;
1:e710339: 
1:e710339:   /**
1:e710339:    * actual index in the page
1:e710339:    * this is required as in a blocklet few pages will be local dictionary
1:e710339:    * encoded and few pages will be plain text encoding
1:e710339:    * in this case local dictionary encoded page
1:e710339:    */
1:e710339:   private int pageIndex;
1:e710339: 
1:2ccdbb7:   public ActualDataBasedFallbackEncoder(EncodedColumnPage encodedColumnPage,
1:2ccdbb7:       int pageIndex) {
1:e710339:     this.encodedColumnPage = encodedColumnPage;
1:e710339:     this.pageIndex = pageIndex;
2:e710339:   }
1:e710339: 
1:e710339:   @Override public FallbackEncodedColumnPage call() throws Exception {
1:e710339:     // disable encoding using local dictionary
1:e710339:     encodedColumnPage.getActualPage().disableLocalDictEncoding();
1:e710339: 
1:e710339:     // get column spec for existing column page
1:e710339:     TableSpec.ColumnSpec columnSpec = encodedColumnPage.getActualPage().getColumnSpec();
1:2ccdbb7:     FallbackEncodedColumnPage fallbackEncodedColumnPage = CarbonUtil
1:2ccdbb7:         .getFallBackEncodedColumnPage(encodedColumnPage.getActualPage(), pageIndex, columnSpec);
1:e710339:     // here freeing the memory of raw column page as fallback is done and column page will not
1:e710339:     // be used.
1:e710339:     // This is required to free the memory once it is of no use
1:e710339:     encodedColumnPage.freeMemory();
1:e710339:     return fallbackEncodedColumnPage;
1:e710339:   }
1:e710339: }
============================================================================
author:akashrn5
-------------------------------------------------------------------------------
commit:2ccdbb7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.CarbonUtil;
/////////////////////////////////////////////////////////////////////////
1: public class ActualDataBasedFallbackEncoder
1:     implements Callable<FallbackEncodedColumnPage> {
/////////////////////////////////////////////////////////////////////////
1:   public ActualDataBasedFallbackEncoder(EncodedColumnPage encodedColumnPage,
1:       int pageIndex) {
/////////////////////////////////////////////////////////////////////////
1:     FallbackEncodedColumnPage fallbackEncodedColumnPage = CarbonUtil
1:         .getFallBackEncodedColumnPage(encodedColumnPage.getActualPage(), pageIndex, columnSpec);
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:438b442
/////////////////////////////////////////////////////////////////////////
0:         throw new RuntimeException("Unsupported DataType. Only COMPLEX_PRIMITIVE should come");
1: 
0:       case COMPLEX_PRIMITIVE:
author:kumarvishal09
-------------------------------------------------------------------------------
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datastore.page;
1: 
1: import java.util.concurrent.Callable;
1: 
1: import org.apache.carbondata.core.datastore.TableSpec;
0: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
0: import org.apache.carbondata.core.datastore.page.encoding.DefaultEncodingFactory;
1: import org.apache.carbondata.core.datastore.page.encoding.EncodedColumnPage;
1: 
1: /**
1:  * Below class will be used to encode column pages for which local dictionary was generated
1:  * but all the pages in blocklet was not encoded with local dictionary.
1:  * This is required as all the pages of a column in blocklet either it will be local dictionary
1:  * encoded or without local dictionary encoded.
1:  */
0: public class FallbackColumnPageEncoder implements Callable<FallbackEncodedColumnPage> {
1: 
1:   /**
1:    * actual local dictionary generated column page
1:    */
1:   private EncodedColumnPage encodedColumnPage;
1: 
1:   /**
1:    * actual index in the page
1:    * this is required as in a blocklet few pages will be local dictionary
1:    * encoded and few pages will be plain text encoding
1:    * in this case local dictionary encoded page
1:    */
1:   private int pageIndex;
1: 
0:   public FallbackColumnPageEncoder(EncodedColumnPage encodedColumnPage, int pageIndex) {
1:     this.encodedColumnPage = encodedColumnPage;
1:     this.pageIndex = pageIndex;
1:   }
1: 
1:   @Override public FallbackEncodedColumnPage call() throws Exception {
1:     // disable encoding using local dictionary
1:     encodedColumnPage.getActualPage().disableLocalDictEncoding();
0:     // new encoded column page
0:     EncodedColumnPage newEncodedColumnPage;
1: 
1:     // get column spec for existing column page
1:     TableSpec.ColumnSpec columnSpec = encodedColumnPage.getActualPage().getColumnSpec();
0:     switch (columnSpec.getColumnType()) {
0:       case COMPLEX_ARRAY:
0:       case COMPLEX_PRIMITIVE:
0:       case COMPLEX_STRUCT:
0:       case COMPLEX:
0:         // for complex type column
0:         newEncodedColumnPage = ColumnPageEncoder.encodedColumn(
0:             encodedColumnPage.getActualPage());
0:         break;
0:       default:
0:         // for primitive column
0:         ColumnPageEncoder columnPageEncoder = DefaultEncodingFactory.getInstance()
0:             .createEncoder(encodedColumnPage.getActualPage().getColumnSpec(),
0:                 encodedColumnPage.getActualPage());
0:         newEncodedColumnPage = columnPageEncoder.encode(encodedColumnPage.getActualPage());
1:     }
0:     FallbackEncodedColumnPage fallbackEncodedColumnPage =
0:         new FallbackEncodedColumnPage(newEncodedColumnPage, pageIndex);
1:     // here freeing the memory of raw column page as fallback is done and column page will not
1:     // be used.
1:     // This is required to free the memory once it is of no use
1:     encodedColumnPage.freeMemory();
1:     return fallbackEncodedColumnPage;
1:   }
1: }
============================================================================