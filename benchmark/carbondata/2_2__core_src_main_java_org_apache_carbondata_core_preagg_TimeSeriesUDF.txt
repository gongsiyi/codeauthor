1:49763b7: /*
1:49763b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:49763b7:  * contributor license agreements.  See the NOTICE file distributed with
1:49763b7:  * this work for additional information regarding copyright ownership.
1:49763b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:49763b7:  * (the "License"); you may not use this file except in compliance with
1:49763b7:  * the License.  You may obtain a copy of the License at
1:49763b7:  *
1:49763b7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:49763b7:  *
1:49763b7:  * Unless required by applicable law or agreed to in writing, software
1:49763b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:49763b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:49763b7:  * See the License for the specific language governing permissions and
1:49763b7:  * limitations under the License.
1:49763b7:  */
1:49763b7: package org.apache.carbondata.core.preagg;
1:49763b7: 
1:49763b7: import java.sql.Timestamp;
1:49763b7: import java.util.ArrayList;
1:49763b7: import java.util.Calendar;
1:49763b7: import java.util.GregorianCalendar;
1:49763b7: import java.util.List;
1:49763b7: 
1:49763b7: /**
1:49763b7:  * class for applying timeseries udf
1:49763b7:  */
1:49763b7: public class TimeSeriesUDF {
1:49763b7: 
1:49763b7:   public final List<String> TIMESERIES_FUNCTION = new ArrayList<>();
1:49763b7: 
1:49763b7:   // thread local for keeping calender instance
1:49763b7:   private ThreadLocal<Calendar> calanderThreadLocal = new ThreadLocal<>();
1:49763b7: 
1:49763b7:   /**
1:49763b7:    * singleton instance
1:49763b7:    */
1:49763b7:   public static final TimeSeriesUDF INSTANCE = new TimeSeriesUDF();
1:49763b7: 
1:49763b7:   private TimeSeriesUDF() {
1:49763b7:     initialize();
1:49763b7:   }
1:49763b7: 
1:49763b7:   /**
1:49763b7:    * Below method will be used to apply udf on data provided
1:49763b7:    * Method will work based on below logic.
1:49763b7:    * Data: 2016-7-23 01:01:30,10
1:49763b7:    * Year Level UDF will return: 2016-1-1 00:00:00,0
1:49763b7:    * Month Level UDF will return: 2016-7-1 00:00:00,0
1:49763b7:    * Day Level UDF will return: 2016-7-23 00:00:00,0
1:49763b7:    * Hour Level UDF will return: 2016-7-23 01:00:00,0
1:49763b7:    * Minute Level UDF will return: 2016-7-23 01:01:00,0
1:49763b7:    * Second Level UDF will return: 2016-7-23 01:01:30,0
1:49763b7:    * If function does not match with any of the above functions
1:49763b7:    * it will throw IllegalArgumentException
1:49763b7:    *
1:49763b7:    * @param data     timestamp data
1:49763b7:    * @param function time series function name
1:49763b7:    * @return data after applying udf
1:49763b7:    */
1:49763b7:   public Timestamp applyUDF(Timestamp data, String function) {
1:49763b7:     if (null == data) {
1:49763b7:       return data;
1:49763b7:     }
1:49763b7:     initialize();
1:49763b7:     Calendar calendar = calanderThreadLocal.get();
1:49763b7:     calendar.clear();
1:49763b7:     calendar.setTimeInMillis(data.getTime());
1:e2a79ee:     TimeSeriesFunctionEnum timeSeriesFunctionEnum =
1:e2a79ee:         TimeSeriesFunctionEnum.valueOf(function.toUpperCase());
1:e2a79ee:     switch (timeSeriesFunctionEnum) {
1:49763b7:       case SECOND:
1:49763b7:         calendar.set(Calendar.MILLISECOND, 0);
1:49763b7:         break;
1:49763b7:       case MINUTE:
1:49763b7:         calendar.set(Calendar.MILLISECOND, 0);
1:49763b7:         calendar.set(Calendar.SECOND, 0);
1:49763b7:         break;
1:49763b7:       case HOUR:
1:49763b7:         calendar.set(Calendar.MILLISECOND, 0);
1:49763b7:         calendar.set(Calendar.SECOND, 0);
1:49763b7:         calendar.set(Calendar.MINUTE, 0);
1:49763b7:         break;
1:49763b7:       case DAY:
1:aac7af7:         calendar.set(Calendar.HOUR_OF_DAY, 0);
1:49763b7:         calendar.set(Calendar.MINUTE, 0);
1:49763b7:         calendar.set(Calendar.SECOND, 0);
1:49763b7:         calendar.set(Calendar.MILLISECOND, 0);
1:49763b7:         break;
1:49763b7:       case MONTH:
1:49763b7:         calendar.set(Calendar.MILLISECOND, 0);
1:49763b7:         calendar.set(Calendar.SECOND, 0);
1:49763b7:         calendar.set(Calendar.MINUTE, 0);
1:49763b7:         calendar.set(Calendar.HOUR_OF_DAY, 0);
1:49763b7:         calendar.set(Calendar.DAY_OF_MONTH, 1);
1:49763b7:         break;
1:49763b7:       case YEAR:
1:49763b7:         calendar.set(Calendar.MONTH, 1);
1:49763b7:         calendar.set(Calendar.DAY_OF_YEAR, 1);
1:aac7af7:         calendar.set(Calendar.HOUR_OF_DAY, 0);
1:49763b7:         calendar.set(Calendar.MINUTE, 0);
1:49763b7:         calendar.set(Calendar.SECOND, 0);
1:49763b7:         calendar.set(Calendar.MILLISECOND, 0);
1:49763b7:         break;
1:49763b7:       default:
1:49763b7:         throw new IllegalArgumentException("Invalid timeseries function name: " + function);
1:49763b7:     }
1:49763b7:     data.setTime(calendar.getTimeInMillis());
1:49763b7:     return data;
1:49763b7:   }
1:49763b7: 
1:49763b7:   /**
1:49763b7:    * Below method will be used to initialize the thread local
1:49763b7:    */
1:7ef9164:   private void initialize() {
1:49763b7:     if (calanderThreadLocal.get() == null) {
1:49763b7:       calanderThreadLocal.set(new GregorianCalendar());
1:49763b7:     }
1:49763b7:     if (TIMESERIES_FUNCTION.isEmpty()) {
1:49763b7:       TIMESERIES_FUNCTION.add("second");
1:49763b7:       TIMESERIES_FUNCTION.add("minute");
1:49763b7:       TIMESERIES_FUNCTION.add("hour");
1:49763b7:       TIMESERIES_FUNCTION.add("day");
1:49763b7:       TIMESERIES_FUNCTION.add("month");
1:49763b7:       TIMESERIES_FUNCTION.add("year");
1:49763b7:     }
1:49763b7:   }
1:49763b7: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:   private void initialize() {
author:kumarvishal
-------------------------------------------------------------------------------
commit:aac7af7
/////////////////////////////////////////////////////////////////////////
1:         calendar.set(Calendar.HOUR_OF_DAY, 0);
1:         calendar.set(Calendar.HOUR_OF_DAY, 0);
commit:e2a79ee
/////////////////////////////////////////////////////////////////////////
1:     TimeSeriesFunctionEnum timeSeriesFunctionEnum =
1:         TimeSeriesFunctionEnum.valueOf(function.toUpperCase());
1:     switch (timeSeriesFunctionEnum) {
commit:49763b7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.preagg;
1: 
1: import java.sql.Timestamp;
1: import java.util.ArrayList;
1: import java.util.Calendar;
1: import java.util.GregorianCalendar;
1: import java.util.List;
1: 
1: /**
1:  * class for applying timeseries udf
1:  */
1: public class TimeSeriesUDF {
1: 
1:   public final List<String> TIMESERIES_FUNCTION = new ArrayList<>();
1: 
1:   // thread local for keeping calender instance
1:   private ThreadLocal<Calendar> calanderThreadLocal = new ThreadLocal<>();
1: 
1:   /**
1:    * singleton instance
1:    */
1:   public static final TimeSeriesUDF INSTANCE = new TimeSeriesUDF();
1: 
1:   private TimeSeriesUDF() {
1:     initialize();
1:   }
1: 
1:   /**
1:    * Below method will be used to apply udf on data provided
1:    * Method will work based on below logic.
1:    * Data: 2016-7-23 01:01:30,10
1:    * Year Level UDF will return: 2016-1-1 00:00:00,0
1:    * Month Level UDF will return: 2016-7-1 00:00:00,0
1:    * Day Level UDF will return: 2016-7-23 00:00:00,0
1:    * Hour Level UDF will return: 2016-7-23 01:00:00,0
1:    * Minute Level UDF will return: 2016-7-23 01:01:00,0
1:    * Second Level UDF will return: 2016-7-23 01:01:30,0
1:    * If function does not match with any of the above functions
1:    * it will throw IllegalArgumentException
1:    *
1:    * @param data     timestamp data
1:    * @param function time series function name
1:    * @return data after applying udf
1:    */
1:   public Timestamp applyUDF(Timestamp data, String function) {
1:     if (null == data) {
1:       return data;
1:     }
1:     initialize();
1:     Calendar calendar = calanderThreadLocal.get();
1:     calendar.clear();
1:     calendar.setTimeInMillis(data.getTime());
0:     TimeSeriesFunction timeSeriesFunction = TimeSeriesFunction.valueOf(function);
0:     switch (timeSeriesFunction) {
1:       case SECOND:
1:         calendar.set(Calendar.MILLISECOND, 0);
1:         break;
1:       case MINUTE:
1:         calendar.set(Calendar.MILLISECOND, 0);
1:         calendar.set(Calendar.SECOND, 0);
1:         break;
1:       case HOUR:
1:         calendar.set(Calendar.MILLISECOND, 0);
1:         calendar.set(Calendar.SECOND, 0);
1:         calendar.set(Calendar.MINUTE, 0);
1:         break;
1:       case DAY:
1:         calendar.set(Calendar.HOUR_OF_DAY, 0);
1:         calendar.set(Calendar.MINUTE, 0);
1:         calendar.set(Calendar.SECOND, 0);
1:         calendar.set(Calendar.MILLISECOND, 0);
1:         break;
1:       case MONTH:
1:         calendar.set(Calendar.MILLISECOND, 0);
1:         calendar.set(Calendar.SECOND, 0);
1:         calendar.set(Calendar.MINUTE, 0);
0:         calendar.set(Calendar.HOUR, 0);
1:         calendar.set(Calendar.DAY_OF_MONTH, 1);
1:         break;
1:       case YEAR:
1:         calendar.set(Calendar.MONTH, 1);
1:         calendar.set(Calendar.DAY_OF_YEAR, 1);
0:         calendar.set(Calendar.HOUR, 0);
1:         calendar.set(Calendar.MINUTE, 0);
1:         calendar.set(Calendar.SECOND, 0);
1:         calendar.set(Calendar.MILLISECOND, 0);
1:         break;
1:       default:
1:         throw new IllegalArgumentException("Invalid timeseries function name: " + function);
1:     }
1:     data.setTime(calendar.getTimeInMillis());
1:     return data;
1:   }
1: 
1:   /**
1:    * Below method will be used to initialize the thread local
1:    */
0:   private synchronized void initialize() {
1:     if (calanderThreadLocal.get() == null) {
1:       calanderThreadLocal.set(new GregorianCalendar());
1:     }
1:     if (TIMESERIES_FUNCTION.isEmpty()) {
1:       TIMESERIES_FUNCTION.add("second");
1:       TIMESERIES_FUNCTION.add("minute");
1:       TIMESERIES_FUNCTION.add("hour");
1:       TIMESERIES_FUNCTION.add("day");
1:       TIMESERIES_FUNCTION.add("month");
1:       TIMESERIES_FUNCTION.add("year");
1:     }
1:   }
1: }
============================================================================