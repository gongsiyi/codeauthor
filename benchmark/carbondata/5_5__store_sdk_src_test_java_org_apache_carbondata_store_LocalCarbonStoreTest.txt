1:cfb8ed9: /*
1:cfb8ed9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cfb8ed9:  * contributor license agreements.  See the NOTICE file distributed with
1:cfb8ed9:  * this work for additional information regarding copyright ownership.
1:cfb8ed9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cfb8ed9:  * (the "License"); you may not use this file except in compliance with
1:cfb8ed9:  * the License.  You may obtain a copy of the License at
1:cfb8ed9:  *
1:cfb8ed9:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cfb8ed9:  *
1:cfb8ed9:  * Unless required by applicable law or agreed to in writing, software
1:cfb8ed9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cfb8ed9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cfb8ed9:  * See the License for the specific language governing permissions and
1:cfb8ed9:  * limitations under the License.
1:cfb8ed9:  */
1:cfb8ed9: 
1:cfb8ed9: package org.apache.carbondata.store;
1:cfb8ed9: 
1:cfb8ed9: import java.io.File;
1:cfb8ed9: import java.io.IOException;
1:cfb8ed9: import java.util.Iterator;
1:cfb8ed9: 
1:bea277f: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:cfb8ed9: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:9f42fbf: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:cfb8ed9: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:bea277f: import org.apache.carbondata.core.util.CarbonProperties;
1:cfb8ed9: import org.apache.carbondata.sdk.file.Field;
1:cfb8ed9: import org.apache.carbondata.sdk.file.Schema;
1:cfb8ed9: import org.apache.carbondata.sdk.file.TestUtil;
1:cfb8ed9: 
1:cfb8ed9: import org.apache.commons.io.FileUtils;
1:cf55028: import org.junit.After;
1:cf55028: import org.junit.Before;
1:cfb8ed9: import org.junit.Test;
1:cfb8ed9: 
1:cfb8ed9: public class LocalCarbonStoreTest {
1:cf55028:   @Before
1:cf55028:   public void cleanFile() {
1:bea277f:     String path = null;
1:bea277f:     try {
1:bea277f:       path = new File(LocalCarbonStoreTest.class.getResource("/").getPath() + "../")
1:bea277f:           .getCanonicalPath().replaceAll("\\\\", "/");
1:bea277f:     } catch (IOException e) {
1:bea277f:       assert (false);
1:bea277f:     }
1:bea277f:     CarbonProperties.getInstance()
1:bea277f:         .addProperty(CarbonCommonConstants.CARBON_SYSTEM_FOLDER_LOCATION, path);
1:cf55028:     assert (TestUtil.cleanMdtFile());
1:cf55028:   }
1:cf55028: 
1:cf55028:   @After
1:cf55028:   public void verifyDMFile() {
1:cf55028:     assert (!TestUtil.verifyMdtFile());
1:cf55028:   }
1:cfb8ed9: 
1:cfb8ed9:   // TODO: complete this testcase
1:cfb8ed9:   // Currently result rows are empty, because SDK is not writing table status file
1:cfb8ed9:   // so that reader does not find any segment.
1:cfb8ed9:   // Complete this testcase after flat folder reader is done.
1:cfb8ed9:   @Test
1:cfb8ed9:   public void testWriteAndReadFiles() throws IOException {
1:cfb8ed9:     String path = "./testWriteFiles";
1:cfb8ed9:     FileUtils.deleteDirectory(new File(path));
1:cfb8ed9: 
1:cfb8ed9:     Field[] fields = new Field[2];
1:cfb8ed9:     fields[0] = new Field("name", DataTypes.STRING);
1:cfb8ed9:     fields[1] = new Field("age", DataTypes.INT);
1:cfb8ed9: 
1:92d9b92:     TestUtil.writeFilesAndVerify(100, new Schema(fields), path, true);
1:cfb8ed9: 
1:cfb8ed9:     CarbonStore store = new LocalCarbonStore();
1:9f42fbf:     Iterator<CarbonRow> rows =
1:9f42fbf:         store.scan(AbsoluteTableIdentifier.from(path, "", ""), new String[] { "name, age" }, null);
1:cfb8ed9: 
1:cfb8ed9:     while (rows.hasNext()) {
1:cfb8ed9:       CarbonRow row = rows.next();
1:cfb8ed9:       System.out.println(row.toString());
1:cfb8ed9:     }
1:cfb8ed9: 
1:cfb8ed9:     FileUtils.deleteDirectory(new File(path));
1:cfb8ed9:   }
1:cfb8ed9: 
1:cfb8ed9: }
============================================================================
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:bea277f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
1:     String path = null;
1:     try {
1:       path = new File(LocalCarbonStoreTest.class.getResource("/").getPath() + "../")
1:           .getCanonicalPath().replaceAll("\\\\", "/");
1:     } catch (IOException e) {
1:       assert (false);
1:     }
1:     CarbonProperties.getInstance()
1:         .addProperty(CarbonCommonConstants.CARBON_SYSTEM_FOLDER_LOCATION, path);
author:rahul
-------------------------------------------------------------------------------
commit:9f42fbf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
1:     Iterator<CarbonRow> rows =
1:         store.scan(AbsoluteTableIdentifier.from(path, "", ""), new String[] { "name, age" }, null);
author:rahulforallp
-------------------------------------------------------------------------------
commit:92d9b92
/////////////////////////////////////////////////////////////////////////
1:     TestUtil.writeFilesAndVerify(100, new Schema(fields), path, true);
author:xubo245
-------------------------------------------------------------------------------
commit:cf55028
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1:   @Before
1:   public void cleanFile() {
1:     assert (TestUtil.cleanMdtFile());
1:   }
1: 
1:   @After
1:   public void verifyDMFile() {
1:     assert (!TestUtil.verifyMdtFile());
1:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:cfb8ed9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.store;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Iterator;
1: 
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.sdk.file.Field;
1: import org.apache.carbondata.sdk.file.Schema;
1: import org.apache.carbondata.sdk.file.TestUtil;
1: 
1: import org.apache.commons.io.FileUtils;
1: import org.junit.Test;
1: 
1: public class LocalCarbonStoreTest {
1: 
1:   // TODO: complete this testcase
1:   // Currently result rows are empty, because SDK is not writing table status file
1:   // so that reader does not find any segment.
1:   // Complete this testcase after flat folder reader is done.
1:   @Test
1:   public void testWriteAndReadFiles() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
0:     TestUtil.writeFilesAndVerify(new Schema(fields), path, true);
1: 
1:     CarbonStore store = new LocalCarbonStore();
0:     Iterator<CarbonRow> rows = store.scan(path, new String[]{"name, age"}, null);
1: 
1:     while (rows.hasNext()) {
1:       CarbonRow row = rows.next();
1:       System.out.println(row.toString());
1:     }
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
1: }
============================================================================