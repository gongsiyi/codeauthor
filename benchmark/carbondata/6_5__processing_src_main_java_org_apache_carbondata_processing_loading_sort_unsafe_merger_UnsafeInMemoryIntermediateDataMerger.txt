1:f1f9348: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:f1f9348:  *
1:f1f9348:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f1f9348:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:f1f9348:  */
1:f1f9348: 
1:349c59c: package org.apache.carbondata.processing.loading.sort.unsafe.merger;
1:f1f9348: 
1:b439b00: import java.io.DataOutputStream;
1:b439b00: import java.io.File;
1:b439b00: import java.io.IOException;
1:f1f9348: import java.util.AbstractQueue;
1:7ef9164: import java.util.NoSuchElementException;
1:f1f9348: import java.util.PriorityQueue;
1:b439b00: import java.util.Random;
1:b439b00: import java.util.concurrent.Callable;
1:f1f9348: 
1:f1f9348: import org.apache.carbondata.common.logging.LogService;
1:f1f9348: import org.apache.carbondata.common.logging.LogServiceFactory;
1:b439b00: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:b439b00: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:b439b00: import org.apache.carbondata.core.util.CarbonUtil;
1:b439b00: import org.apache.carbondata.processing.loading.row.IntermediateSortTempRow;
1:b439b00: import org.apache.carbondata.processing.loading.sort.SortStepRowHandler;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.holder.UnsafeCarbonRowForMerge;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.holder.UnsafeInmemoryMergeHolder;
1:349c59c: import org.apache.carbondata.processing.sort.exception.CarbonSortKeyAndGroupByException;
1:b439b00: import org.apache.carbondata.processing.sort.sortdata.SortParameters;
1:f1f9348: 
1:b439b00: public class UnsafeInMemoryIntermediateDataMerger implements Callable<Void> {
1:f1f9348:   /**
1:f1f9348:    * LOGGER
1:f1f9348:    */
1:f1f9348:   private static final LogService LOGGER =
1:f1f9348:       LogServiceFactory.getLogService(UnsafeInMemoryIntermediateDataMerger.class.getName());
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * recordHolderHeap
1:f1f9348:    */
1:f1f9348:   private AbstractQueue<UnsafeInmemoryMergeHolder> recordHolderHeap;
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * fileCounter
1:f1f9348:    */
1:f1f9348:   private int holderCounter;
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * entryCount
1:f1f9348:    */
1:f1f9348:   private int entryCount;
1:f1f9348: 
1:f1f9348:   private UnsafeCarbonRowPage[] unsafeCarbonRowPages;
1:f1f9348: 
1:f1f9348:   private long[] mergedAddresses;
1:f1f9348: 
1:f1f9348:   private byte[] rowPageIndexes;
1:b439b00:   private int totalSize;
1:b439b00:   private SortParameters sortParameters;
1:b439b00:   private SortStepRowHandler sortStepRowHandler;
1:b439b00:   private boolean spillDisk;
1:b439b00:   private File outputFile;
1:b439b00:   private DataOutputStream outputStream;
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * IntermediateFileMerger Constructor
1:f1f9348:    */
1:f1f9348:   public UnsafeInMemoryIntermediateDataMerger(UnsafeCarbonRowPage[] unsafeCarbonRowPages,
1:b439b00:       int totalSize, SortParameters sortParameters, boolean spillDisk) {
1:f1f9348:     this.holderCounter = unsafeCarbonRowPages.length;
1:f1f9348:     this.unsafeCarbonRowPages = unsafeCarbonRowPages;
1:f1f9348:     this.mergedAddresses = new long[totalSize];
1:f1f9348:     this.rowPageIndexes = new byte[totalSize];
1:f1f9348:     this.entryCount = 0;
1:b439b00:     this.totalSize = totalSize;
1:b439b00:     this.sortParameters = sortParameters;
1:b439b00:     this.sortStepRowHandler = new SortStepRowHandler(sortParameters);
1:b439b00:     this.spillDisk = spillDisk;
1:f1f9348:   }
1:f1f9348: 
1:06b0d08:   @Override
1:b439b00:   public Void call() throws Exception {
1:f1f9348:     long intermediateMergeStartTime = System.currentTimeMillis();
1:f1f9348:     int holderCounterConst = holderCounter;
1:f1f9348:     try {
1:f1f9348:       startSorting();
1:b439b00:       if (spillDisk) {
1:b439b00:         initSortTempFile();
1:b439b00:         while (hasNext()) {
1:b439b00:           writeDataToFile(next());
1:b439b00:         }
1:b439b00:       } else {
1:b439b00:         while (hasNext()) {
1:b439b00:           writeDataToMemory(next());
1:b439b00:         }
1:f1f9348:       }
1:b439b00: 
1:f1f9348:       double intermediateMergeCostTime =
1:f1f9348:           (System.currentTimeMillis() - intermediateMergeStartTime) / 1000.0;
1:b439b00:       LOGGER.info("Intermediate Merge of " + holderCounterConst
1:f1f9348:           + " in-memory sort Cost Time: " + intermediateMergeCostTime + "(s)");
1:b439b00:       if (spillDisk) {
1:b439b00:         LOGGER.info("Merge and spill in-memory pages to disk, location: "
1:b439b00:             + outputFile.getAbsolutePath()
1:b439b00:             + ", file size in MB: " + outputFile.length() * 0.1 * 10 / 1024 / 1024
1:b439b00:             + ", containing rows: " + totalSize);
1:b439b00:       }
1:f1f9348:     } catch (Exception e) {
1:f1f9348:       LOGGER.error(e, "Problem while intermediate merging");
1:b439b00:       throw e;
1:b439b00:     } finally {
1:b439b00:       if (spillDisk) {
1:b439b00:         CarbonUtil.closeStreams(outputStream);
1:b439b00:         close();
1:b439b00:       }
1:f1f9348:     }
1:b439b00:     return null;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * This method will be used to get the sorted record from file
1:f1f9348:    *
1:f1f9348:    * @return sorted record sorted record
1:f1f9348:    * @throws CarbonSortKeyAndGroupByException
1:f1f9348:    */
1:f1f9348:   private UnsafeCarbonRowForMerge getSortedRecordFromMemory()
1:f1f9348:       throws CarbonSortKeyAndGroupByException {
1:f1f9348:     UnsafeCarbonRowForMerge row = null;
1:f1f9348: 
1:f1f9348:     // poll the top object from heap
1:f1f9348:     // heap maintains binary tree which is based on heap condition that will
1:f1f9348:     // be based on comparator we are passing the heap
1:f1f9348:     // when will call poll it will always delete root of the tree and then
1:f1f9348:     // it does trickel down operation complexity is log(n)
1:f1f9348:     UnsafeInmemoryMergeHolder poll = this.recordHolderHeap.poll();
1:f1f9348: 
1:f1f9348:     // get the row from chunk
1:f1f9348:     row = poll.getRow();
1:f1f9348: 
1:f1f9348:     // check if there no entry present
1:f1f9348:     if (!poll.hasNext()) {
1:f1f9348:       // change the file counter
1:f1f9348:       --this.holderCounter;
1:f1f9348: 
1:f1f9348:       // reaturn row
1:f1f9348:       return row;
1:f1f9348:     }
1:f1f9348: 
1:f1f9348:     // read new row
1:f1f9348:     poll.readRow();
1:f1f9348: 
1:f1f9348:     // add to heap
1:f1f9348:     this.recordHolderHeap.add(poll);
1:f1f9348: 
1:f1f9348:     // return row
1:f1f9348:     return row;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * Below method will be used to start storing process This method will get
1:f1f9348:    * all the temp files present in sort temp folder then it will create the
1:f1f9348:    * record holder heap and then it will read first record from each file and
1:f1f9348:    * initialize the heap
1:f1f9348:    *
1:f1f9348:    * @throws CarbonSortKeyAndGroupByException
1:f1f9348:    */
1:f1f9348:   private void startSorting() throws CarbonSortKeyAndGroupByException {
1:f1f9348:     LOGGER.info("Number of row pages in intermediate merger: " + this.holderCounter);
1:f1f9348: 
1:f1f9348:     // create record holder heap
1:f1f9348:     createRecordHolderQueue(unsafeCarbonRowPages);
1:f1f9348: 
1:f1f9348:     // iterate over file list and create chunk holder and add to heap
1:f1f9348:     LOGGER.info("Started adding first record from row page");
1:f1f9348: 
1:f1f9348:     UnsafeInmemoryMergeHolder unsafePageHolder = null;
1:f1f9348:     byte index = 0;
1:f1f9348:     for (UnsafeCarbonRowPage unsafeCarbonRowPage : unsafeCarbonRowPages) {
1:f1f9348:       // create chunk holder
1:f1f9348:       unsafePageHolder = new UnsafeInmemoryMergeHolder(unsafeCarbonRowPage, index++);
1:f1f9348: 
1:f1f9348:       // initialize
1:f1f9348:       unsafePageHolder.readRow();
1:f1f9348: 
1:f1f9348:       // add to heap
1:f1f9348:       this.recordHolderHeap.add(unsafePageHolder);
1:f1f9348:     }
1:f1f9348: 
1:f1f9348:     LOGGER.info("Heap Size" + this.recordHolderHeap.size());
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * This method will be used to create the heap which will be used to hold
1:f1f9348:    * the chunk of data
1:f1f9348:    */
1:f1f9348:   private void createRecordHolderQueue(UnsafeCarbonRowPage[] pages) {
1:f1f9348:     // creating record holder heap
1:f1f9348:     this.recordHolderHeap = new PriorityQueue<UnsafeInmemoryMergeHolder>(pages.length);
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * This method will be used to get the sorted row
1:f1f9348:    *
1:f1f9348:    * @return sorted row
1:f1f9348:    * @throws CarbonSortKeyAndGroupByException
1:f1f9348:    */
1:f1f9348:   private UnsafeCarbonRowForMerge next() throws CarbonSortKeyAndGroupByException {
1:7ef9164:     if (hasNext()) {
1:7ef9164:       return getSortedRecordFromMemory();
1:7ef9164:     } else {
1:7ef9164:       throw new NoSuchElementException("No more elements to return");
1:7ef9164:     }
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * This method will be used to check whether any more element is present or
1:f1f9348:    * not
1:f1f9348:    *
1:f1f9348:    * @return more element is present
1:f1f9348:    */
1:f1f9348:   private boolean hasNext() {
1:f1f9348:     return this.holderCounter > 0;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * Below method will be used to write data to file
1:f1f9348:    */
1:f1f9348:   private void writeDataToMemory(UnsafeCarbonRowForMerge row) {
1:f1f9348:     mergedAddresses[entryCount] = row.address;
1:f1f9348:     rowPageIndexes[entryCount] = row.index;
1:f1f9348:     entryCount++;
1:f1f9348:   }
1:f1f9348: 
1:b439b00:   private void initSortTempFile() throws IOException {
1:b439b00:     String tmpDir = sortParameters.getTempFileLocation()[
1:b439b00:         new Random().nextInt(sortParameters.getTempFileLocation().length)];
1:b439b00:     outputFile = new File(tmpDir + File.separator
1:b439b00:         + sortParameters.getTableName() + '_'
1:b439b00:         + sortParameters.getRangeId() + '_' + System.nanoTime()
1:b439b00:         + CarbonCommonConstants.SORT_TEMP_FILE_EXT);
1:b439b00:     outputStream = FileFactory.getDataOutputStream(outputFile.getPath(),
1:b439b00:         FileFactory.FileType.LOCAL, sortParameters.getFileWriteBufferSize(),
1:b439b00:         sortParameters.getSortTempCompressorName());
1:b439b00:     outputStream.writeInt(totalSize);
1:b439b00:   }
1:b439b00: 
1:b439b00:   private void writeDataToFile(UnsafeCarbonRowForMerge row) throws IOException {
1:b439b00:     IntermediateSortTempRow sortTempRow = unsafeCarbonRowPages[row.index].getRow(row.address);
1:b439b00:     sortStepRowHandler.writeIntermediateSortTempRowToOutputStream(sortTempRow, outputStream);
1:b439b00:   }
1:b439b00: 
1:f1f9348:   public int getEntryCount() {
1:f1f9348:     return entryCount;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public UnsafeCarbonRowPage[] getUnsafeCarbonRowPages() {
1:f1f9348:     return unsafeCarbonRowPages;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public long[] getMergedAddresses() {
1:f1f9348:     return mergedAddresses;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public byte[] getRowPageIndexes() {
1:f1f9348:     return rowPageIndexes;
1:f1f9348:   }
1:b439b00: 
1:b439b00:   public boolean isSpillDisk() {
1:b439b00:     return spillDisk;
1:b439b00:   }
1:b439b00: 
1:b439b00:   public void close() {
1:b439b00:     for (UnsafeCarbonRowPage rowPage : unsafeCarbonRowPages) {
1:b439b00:       rowPage.freeMemory();
1:b439b00:     }
1:b439b00:   }
1:f1f9348: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1: import java.util.NoSuchElementException;
/////////////////////////////////////////////////////////////////////////
1:     if (hasNext()) {
1:       return getSortedRecordFromMemory();
1:     } else {
1:       throw new NoSuchElementException("No more elements to return");
1:     }
commit:06b0d08
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class UnsafeInMemoryIntermediateDataMerger implements Runnable {
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public void run() {
/////////////////////////////////////////////////////////////////////////
author:xuchuanyin
-------------------------------------------------------------------------------
commit:b439b00
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataOutputStream;
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Random;
1: import java.util.concurrent.Callable;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.apache.carbondata.processing.loading.row.IntermediateSortTempRow;
1: import org.apache.carbondata.processing.loading.sort.SortStepRowHandler;
1: import org.apache.carbondata.processing.sort.sortdata.SortParameters;
1: public class UnsafeInMemoryIntermediateDataMerger implements Callable<Void> {
/////////////////////////////////////////////////////////////////////////
1:   private int totalSize;
1:   private SortParameters sortParameters;
1:   private SortStepRowHandler sortStepRowHandler;
1:   private boolean spillDisk;
1:   private File outputFile;
1:   private DataOutputStream outputStream;
1:       int totalSize, SortParameters sortParameters, boolean spillDisk) {
1:     this.totalSize = totalSize;
1:     this.sortParameters = sortParameters;
1:     this.sortStepRowHandler = new SortStepRowHandler(sortParameters);
1:     this.spillDisk = spillDisk;
1:   public Void call() throws Exception {
1:       if (spillDisk) {
1:         initSortTempFile();
1:         while (hasNext()) {
1:           writeDataToFile(next());
1:         }
1:       } else {
1:         while (hasNext()) {
1:           writeDataToMemory(next());
1:         }
1: 
1:       LOGGER.info("Intermediate Merge of " + holderCounterConst
1:       if (spillDisk) {
1:         LOGGER.info("Merge and spill in-memory pages to disk, location: "
1:             + outputFile.getAbsolutePath()
1:             + ", file size in MB: " + outputFile.length() * 0.1 * 10 / 1024 / 1024
1:             + ", containing rows: " + totalSize);
1:       }
1:       throw e;
1:     } finally {
1:       if (spillDisk) {
1:         CarbonUtil.closeStreams(outputStream);
1:         close();
1:       }
1:     return null;
/////////////////////////////////////////////////////////////////////////
1:   private void initSortTempFile() throws IOException {
1:     String tmpDir = sortParameters.getTempFileLocation()[
1:         new Random().nextInt(sortParameters.getTempFileLocation().length)];
1:     outputFile = new File(tmpDir + File.separator
1:         + sortParameters.getTableName() + '_'
1:         + sortParameters.getRangeId() + '_' + System.nanoTime()
1:         + CarbonCommonConstants.SORT_TEMP_FILE_EXT);
1:     outputStream = FileFactory.getDataOutputStream(outputFile.getPath(),
1:         FileFactory.FileType.LOCAL, sortParameters.getFileWriteBufferSize(),
1:         sortParameters.getSortTempCompressorName());
1:     outputStream.writeInt(totalSize);
1:   }
1: 
1:   private void writeDataToFile(UnsafeCarbonRowForMerge row) throws IOException {
1:     IntermediateSortTempRow sortTempRow = unsafeCarbonRowPages[row.index].getRow(row.address);
1:     sortStepRowHandler.writeIntermediateSortTempRowToOutputStream(sortTempRow, outputStream);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public boolean isSpillDisk() {
1:     return spillDisk;
1:   }
1: 
1:   public void close() {
1:     for (UnsafeCarbonRowPage rowPage : unsafeCarbonRowPages) {
1:       rowPage.freeMemory();
1:     }
1:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.sort.unsafe.merger;
1: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1: import org.apache.carbondata.processing.loading.sort.unsafe.holder.UnsafeCarbonRowForMerge;
1: import org.apache.carbondata.processing.loading.sort.unsafe.holder.UnsafeInmemoryMergeHolder;
1: import org.apache.carbondata.processing.sort.exception.CarbonSortKeyAndGroupByException;
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:3fe6903
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.newflow.sort.unsafe.merger;
1: 
1: import java.util.AbstractQueue;
1: import java.util.PriorityQueue;
0: import java.util.concurrent.Callable;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.UnsafeCarbonRowPage;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.holder.UnsafeCarbonRowForMerge;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.holder.UnsafeInmemoryMergeHolder;
0: import org.apache.carbondata.processing.sortandgroupby.exception.CarbonSortKeyAndGroupByException;
1: 
0: public class UnsafeInMemoryIntermediateDataMerger implements Callable<Void> {
1:   /**
1:    * LOGGER
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(UnsafeInMemoryIntermediateDataMerger.class.getName());
1: 
1:   /**
1:    * recordHolderHeap
1:    */
1:   private AbstractQueue<UnsafeInmemoryMergeHolder> recordHolderHeap;
1: 
1:   /**
1:    * fileCounter
1:    */
1:   private int holderCounter;
1: 
1:   /**
1:    * entryCount
1:    */
1:   private int entryCount;
1: 
1:   private UnsafeCarbonRowPage[] unsafeCarbonRowPages;
1: 
1:   private long[] mergedAddresses;
1: 
1:   private byte[] rowPageIndexes;
1: 
1:   /**
1:    * IntermediateFileMerger Constructor
1:    */
1:   public UnsafeInMemoryIntermediateDataMerger(UnsafeCarbonRowPage[] unsafeCarbonRowPages,
0:       int totalSize) {
1:     this.holderCounter = unsafeCarbonRowPages.length;
1:     this.unsafeCarbonRowPages = unsafeCarbonRowPages;
1:     this.mergedAddresses = new long[totalSize];
1:     this.rowPageIndexes = new byte[totalSize];
1:     this.entryCount = 0;
1:   }
1: 
0:   @Override public Void call() throws Exception {
1:     long intermediateMergeStartTime = System.currentTimeMillis();
1:     int holderCounterConst = holderCounter;
0:     boolean isFailed = false;
1:     try {
1:       startSorting();
0:       while (hasNext()) {
0:         writeDataToMemory(next());
1:       }
1:       double intermediateMergeCostTime =
1:           (System.currentTimeMillis() - intermediateMergeStartTime) / 1000.0;
0:       LOGGER.info("============================== Intermediate Merge of " + holderCounterConst
1:           + " in-memory sort Cost Time: " + intermediateMergeCostTime + "(s)");
1:     } catch (Exception e) {
1:       LOGGER.error(e, "Problem while intermediate merging");
1:     }
0:     return null;
1:   }
1: 
1:   /**
1:    * This method will be used to get the sorted record from file
1:    *
1:    * @return sorted record sorted record
1:    * @throws CarbonSortKeyAndGroupByException
1:    */
1:   private UnsafeCarbonRowForMerge getSortedRecordFromMemory()
1:       throws CarbonSortKeyAndGroupByException {
1:     UnsafeCarbonRowForMerge row = null;
1: 
1:     // poll the top object from heap
1:     // heap maintains binary tree which is based on heap condition that will
1:     // be based on comparator we are passing the heap
1:     // when will call poll it will always delete root of the tree and then
1:     // it does trickel down operation complexity is log(n)
1:     UnsafeInmemoryMergeHolder poll = this.recordHolderHeap.poll();
1: 
1:     // get the row from chunk
1:     row = poll.getRow();
1: 
1:     // check if there no entry present
1:     if (!poll.hasNext()) {
1:       // change the file counter
1:       --this.holderCounter;
1: 
1:       // reaturn row
1:       return row;
1:     }
1: 
1:     // read new row
1:     poll.readRow();
1: 
1:     // add to heap
1:     this.recordHolderHeap.add(poll);
1: 
1:     // return row
1:     return row;
1:   }
1: 
1:   /**
1:    * Below method will be used to start storing process This method will get
1:    * all the temp files present in sort temp folder then it will create the
1:    * record holder heap and then it will read first record from each file and
1:    * initialize the heap
1:    *
1:    * @throws CarbonSortKeyAndGroupByException
1:    */
1:   private void startSorting() throws CarbonSortKeyAndGroupByException {
1:     LOGGER.info("Number of row pages in intermediate merger: " + this.holderCounter);
1: 
1:     // create record holder heap
1:     createRecordHolderQueue(unsafeCarbonRowPages);
1: 
1:     // iterate over file list and create chunk holder and add to heap
1:     LOGGER.info("Started adding first record from row page");
1: 
1:     UnsafeInmemoryMergeHolder unsafePageHolder = null;
1:     byte index = 0;
1:     for (UnsafeCarbonRowPage unsafeCarbonRowPage : unsafeCarbonRowPages) {
1:       // create chunk holder
1:       unsafePageHolder = new UnsafeInmemoryMergeHolder(unsafeCarbonRowPage, index++);
1: 
1:       // initialize
1:       unsafePageHolder.readRow();
1: 
1:       // add to heap
1:       this.recordHolderHeap.add(unsafePageHolder);
1:     }
1: 
1:     LOGGER.info("Heap Size" + this.recordHolderHeap.size());
1:   }
1: 
1:   /**
1:    * This method will be used to create the heap which will be used to hold
1:    * the chunk of data
1:    */
1:   private void createRecordHolderQueue(UnsafeCarbonRowPage[] pages) {
1:     // creating record holder heap
1:     this.recordHolderHeap = new PriorityQueue<UnsafeInmemoryMergeHolder>(pages.length);
1:   }
1: 
1:   /**
1:    * This method will be used to get the sorted row
1:    *
1:    * @return sorted row
1:    * @throws CarbonSortKeyAndGroupByException
1:    */
1:   private UnsafeCarbonRowForMerge next() throws CarbonSortKeyAndGroupByException {
0:     return getSortedRecordFromMemory();
1:   }
1: 
1:   /**
1:    * This method will be used to check whether any more element is present or
1:    * not
1:    *
1:    * @return more element is present
1:    */
1:   private boolean hasNext() {
1:     return this.holderCounter > 0;
1:   }
1: 
1:   /**
1:    * Below method will be used to write data to file
1:    */
1:   private void writeDataToMemory(UnsafeCarbonRowForMerge row) {
1:     mergedAddresses[entryCount] = row.address;
1:     rowPageIndexes[entryCount] = row.index;
1:     entryCount++;
1:   }
1: 
1:   public int getEntryCount() {
1:     return entryCount;
1:   }
1: 
1:   public UnsafeCarbonRowPage[] getUnsafeCarbonRowPages() {
1:     return unsafeCarbonRowPages;
1:   }
1: 
1:   public long[] getMergedAddresses() {
1:     return mergedAddresses;
1:   }
1: 
1:   public byte[] getRowPageIndexes() {
1:     return rowPageIndexes;
1:   }
1: }
============================================================================