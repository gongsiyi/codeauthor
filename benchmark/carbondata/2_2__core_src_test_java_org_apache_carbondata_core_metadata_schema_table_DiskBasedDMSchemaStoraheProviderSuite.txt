1:5f2a748: /*
1:5f2a748:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5f2a748:  * contributor license agreements.  See the NOTICE file distributed with
1:5f2a748:  * this work for additional information regarding copyright ownership.
1:5f2a748:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5f2a748:  * (the "License"); you may not use this file except in compliance with
1:5f2a748:  * the License.  You may obtain a copy of the License at
1:5f2a748:  *
1:5f2a748:  *    http://www.apache.org/licenses/LICENSE-2.0
1:5f2a748:  *
1:5f2a748:  * Unless required by applicable law or agreed to in writing, software
1:5f2a748:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5f2a748:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5f2a748:  * See the License for the specific language governing permissions and
1:5f2a748:  * limitations under the License.
1:5f2a748:  */
1:5f2a748: 
1:5f2a748: package org.apache.carbondata.core.metadata.schema.table;
1:5f2a748: 
1:5f2a748: import java.io.File;
1:5f2a748: import java.io.IOException;
1:5f2a748: import java.util.ArrayList;
1:5f2a748: import java.util.List;
1:5f2a748: 
1:5f2a748: import org.apache.carbondata.common.exceptions.sql.NoSuchDataMapException;
1:5f2a748: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:5f2a748: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1:5f2a748: import org.apache.carbondata.core.datastore.filesystem.CarbonFileFilter;
1:5f2a748: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:5f2a748: import org.apache.carbondata.core.util.CarbonProperties;
1:5f2a748: 
1:5f2a748: import org.junit.AfterClass;
1:5f2a748: import org.junit.BeforeClass;
1:5f2a748: import org.junit.Test;
1:5f2a748: 
1:5f2a748: public class DiskBasedDMSchemaStoraheProviderSuite {
1:5f2a748: 
1:5f2a748:   @BeforeClass public static void setUp() throws IOException {
1:5f2a748:     String path =
1:bea277f:         new File(DiskBasedDMSchemaStoraheProviderSuite.class.getResource("/").getPath() + "../")
1:5f2a748:             .getCanonicalPath().replaceAll("\\\\", "/");
1:5f2a748: 
1:5f2a748:     CarbonProperties.getInstance()
1:5f2a748:         .addProperty(CarbonCommonConstants.CARBON_SYSTEM_FOLDER_LOCATION, path);
1:5f2a748:     FileFactory.deleteAllCarbonFilesOfDir(
1:5f2a748:         FileFactory.getCarbonFile(CarbonProperties.getInstance().getSystemFolderLocation()));
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   @AfterClass public static void tearDown() {
1:5f2a748:     FileFactory.deleteAllCarbonFilesOfDir(
1:5f2a748:         FileFactory.getCarbonFile(CarbonProperties.getInstance().getSystemFolderLocation()));
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   private DiskBasedDMSchemaStorageProvider provider = new DiskBasedDMSchemaStorageProvider(
1:5f2a748:       CarbonProperties.getInstance().getSystemFolderLocation());
1:5f2a748: 
1:5f2a748:   @Test public void testSaveSchema() throws IOException, NoSuchDataMapException {
1:5f2a748:     DataMapSchema dataMapSchema = createDataMapSchema("dm1", "table1");
1:5f2a748:     provider.saveSchema(dataMapSchema);
1:5f2a748:     CarbonFile[] schemaFilesFromLocation = getSchemaFilesFromLocation();
1:5f2a748:     assert (existsSchema(dataMapSchema, schemaFilesFromLocation));
1:5f2a748:     DataMapSchema dataMapSchema1 = provider.retrieveSchema("dm1");
1:5f2a748:     assert (dataMapSchema.getDataMapName().equals(dataMapSchema1.getDataMapName()));
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   @Test public void testDropSchema() throws IOException {
1:5f2a748:     DataMapSchema dataMapSchema = createDataMapSchema("dm2", "table1");
1:5f2a748:     provider.saveSchema(dataMapSchema);
1:5f2a748:     provider.dropSchema("dm2");
1:5f2a748:     CarbonFile[] schemaFilesFromLocation = getSchemaFilesFromLocation();
1:5f2a748:     for (CarbonFile file : schemaFilesFromLocation) {
1:5f2a748:       assert (!file.getName().contains("dm2"));
1:5f2a748:     }
1:5f2a748:     try {
1:5f2a748:       provider.retrieveSchema("dm2");
1:5f2a748:       assert (false);
1:5f2a748:     } catch (NoSuchDataMapException e) {
1:5f2a748:       // Ignore
1:5f2a748:     }
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   @Test public void testRetriveAllSchemas() throws IOException {
1:5f2a748:     DataMapSchema dataMapSchema1 = createDataMapSchema("dm3", "table1");
1:5f2a748:     DataMapSchema dataMapSchema2 = createDataMapSchema("dm4", "table1");
1:5f2a748:     DataMapSchema dataMapSchema3 = createDataMapSchema("dm5", "table1");
1:5f2a748:     provider.saveSchema(dataMapSchema1);
1:5f2a748:     provider.saveSchema(dataMapSchema2);
1:5f2a748:     provider.saveSchema(dataMapSchema3);
1:5f2a748: 
1:5f2a748:     List<DataMapSchema> dataMapSchemas = provider.retrieveAllSchemas();
1:5f2a748:     assert (existsSchema(dataMapSchema1, dataMapSchemas));
1:5f2a748:     assert (existsSchema(dataMapSchema2, dataMapSchemas));
1:5f2a748:     assert (existsSchema(dataMapSchema3, dataMapSchemas));
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   @Test public void testWithOtherProvider() throws IOException, InterruptedException {
1:5f2a748:     DataMapSchema dataMapSchema1 = createDataMapSchema("dm6", "table1");
1:5f2a748:     DataMapSchema dataMapSchema2 = createDataMapSchema("dm7", "table1");
1:5f2a748:     DataMapSchema dataMapSchema3 = createDataMapSchema("dm8", "table1");
1:5f2a748:     provider.saveSchema(dataMapSchema1);
1:5f2a748:     Thread.sleep(400);
1:5f2a748:     provider.saveSchema(dataMapSchema2);
1:5f2a748:     Thread.sleep(400);
1:5f2a748:     DiskBasedDMSchemaStorageProvider provider1 = new DiskBasedDMSchemaStorageProvider(
1:5f2a748:         CarbonProperties.getInstance().getSystemFolderLocation());
1:5f2a748:     provider1.saveSchema(dataMapSchema3);
1:5f2a748:     Thread.sleep(400);
1:5f2a748: 
1:5f2a748:     List<DataMapSchema> dataMapSchemas = provider1.retrieveAllSchemas();
1:5f2a748:     assert (existsSchema(dataMapSchema1, dataMapSchemas));
1:5f2a748:     assert (existsSchema(dataMapSchema2, dataMapSchemas));
1:5f2a748:     assert (existsSchema(dataMapSchema3, dataMapSchemas));
1:5f2a748: 
1:5f2a748:     List<DataMapSchema> dataMapSchemas1 = provider.retrieveAllSchemas();
1:5f2a748:     assert (existsSchema(dataMapSchema1, dataMapSchemas1));
1:5f2a748:     assert (existsSchema(dataMapSchema2, dataMapSchemas1));
1:5f2a748:     assert (existsSchema(dataMapSchema3, dataMapSchemas1));
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   @Test public void testDropWithOtherProvider() throws IOException, InterruptedException {
1:5f2a748:     DataMapSchema dataMapSchema1 = createDataMapSchema("dm9", "table1");
1:5f2a748:     DataMapSchema dataMapSchema2 = createDataMapSchema("dm10", "table1");
1:5f2a748:     DataMapSchema dataMapSchema3 = createDataMapSchema("dm11", "table1");
1:5f2a748:     provider.saveSchema(dataMapSchema1);
1:5f2a748:     Thread.sleep(400);
1:5f2a748:     provider.saveSchema(dataMapSchema2);
1:5f2a748:     Thread.sleep(400);
1:5f2a748:     provider.saveSchema(dataMapSchema3);
1:5f2a748:     Thread.sleep(400);
1:5f2a748: 
1:5f2a748:     DiskBasedDMSchemaStorageProvider provider1 = new DiskBasedDMSchemaStorageProvider(
1:5f2a748:         CarbonProperties.getInstance().getSystemFolderLocation());
1:5f2a748:     provider1.dropSchema(dataMapSchema3.getDataMapName());
1:5f2a748:     Thread.sleep(400);
1:5f2a748: 
1:5f2a748:     List<DataMapSchema> dataMapSchemas = provider1.retrieveAllSchemas();
1:5f2a748:     assert (existsSchema(dataMapSchema1, dataMapSchemas));
1:5f2a748:     assert (existsSchema(dataMapSchema2, dataMapSchemas));
1:5f2a748:     assert (!existsSchema(dataMapSchema3, dataMapSchemas));
1:5f2a748: 
1:5f2a748:     List<DataMapSchema> dataMapSchemas1 = provider.retrieveAllSchemas();
1:5f2a748:     assert (existsSchema(dataMapSchema1, dataMapSchemas1));
1:5f2a748:     assert (existsSchema(dataMapSchema2, dataMapSchemas1));
1:5f2a748:     assert (!existsSchema(dataMapSchema3, dataMapSchemas1));
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   private boolean existsSchema(DataMapSchema schema, List<DataMapSchema> dataMapSchemas) {
1:5f2a748:     for (DataMapSchema dataMapSchema : dataMapSchemas) {
1:5f2a748:       if (dataMapSchema.getDataMapName().equals(schema.getDataMapName())) {
1:5f2a748:         return true;
1:5f2a748:       }
1:5f2a748:     }
1:5f2a748:     return false;
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   private boolean existsSchema(DataMapSchema schema, CarbonFile[] carbonFiles) {
1:5f2a748:     for (CarbonFile dataMapSchema : carbonFiles) {
1:5f2a748:       if (dataMapSchema.getName().contains(schema.getDataMapName())) {
1:5f2a748:         return true;
1:5f2a748:       }
1:5f2a748:     }
1:5f2a748:     return false;
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   private DataMapSchema createDataMapSchema(String name, String table) {
1:5f2a748:     DataMapSchema mapSchema = new DataMapSchema(name, "index");
1:5f2a748:     RelationIdentifier identifier = new RelationIdentifier("default", table, "");
1:5f2a748: 
1:5f2a748:     ArrayList<RelationIdentifier> parentTables = new ArrayList<>();
1:5f2a748:     parentTables.add(identifier);
1:5f2a748:     mapSchema.setParentTables(parentTables);
1:5f2a748:     mapSchema.setRelationIdentifier(identifier);
1:5f2a748:     return mapSchema;
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   private CarbonFile[] getSchemaFilesFromLocation() {
1:5f2a748:     CarbonFile carbonFile =
1:5f2a748:         FileFactory.getCarbonFile(CarbonProperties.getInstance().getSystemFolderLocation());
1:5f2a748:     CarbonFile[] carbonFiles = carbonFile.listFiles(new CarbonFileFilter() {
1:5f2a748:       @Override public boolean accept(CarbonFile file) {
1:5f2a748:         return file.getName().endsWith(".dmschema");
1:5f2a748:       }
1:5f2a748:     });
1:5f2a748:     return carbonFiles;
1:5f2a748:   }
1:5f2a748: 
1:5f2a748: }
============================================================================
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:bea277f
/////////////////////////////////////////////////////////////////////////
1:         new File(DiskBasedDMSchemaStoraheProviderSuite.class.getResource("/").getPath() + "../")
author:ravipesala
-------------------------------------------------------------------------------
commit:5f2a748
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.schema.table;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.common.exceptions.sql.NoSuchDataMapException;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFileFilter;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: import org.junit.AfterClass;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: public class DiskBasedDMSchemaStoraheProviderSuite {
1: 
1:   @BeforeClass public static void setUp() throws IOException {
1:     String path =
0:         new File(DiskBasedDMSchemaStorageProvider.class.getResource("/").getPath() + "../")
1:             .getCanonicalPath().replaceAll("\\\\", "/");
1: 
1:     CarbonProperties.getInstance()
1:         .addProperty(CarbonCommonConstants.CARBON_SYSTEM_FOLDER_LOCATION, path);
1:     FileFactory.deleteAllCarbonFilesOfDir(
1:         FileFactory.getCarbonFile(CarbonProperties.getInstance().getSystemFolderLocation()));
1:   }
1: 
1:   @AfterClass public static void tearDown() {
1:     FileFactory.deleteAllCarbonFilesOfDir(
1:         FileFactory.getCarbonFile(CarbonProperties.getInstance().getSystemFolderLocation()));
1:   }
1: 
1:   private DiskBasedDMSchemaStorageProvider provider = new DiskBasedDMSchemaStorageProvider(
1:       CarbonProperties.getInstance().getSystemFolderLocation());
1: 
1:   @Test public void testSaveSchema() throws IOException, NoSuchDataMapException {
1:     DataMapSchema dataMapSchema = createDataMapSchema("dm1", "table1");
1:     provider.saveSchema(dataMapSchema);
1:     CarbonFile[] schemaFilesFromLocation = getSchemaFilesFromLocation();
1:     assert (existsSchema(dataMapSchema, schemaFilesFromLocation));
1:     DataMapSchema dataMapSchema1 = provider.retrieveSchema("dm1");
1:     assert (dataMapSchema.getDataMapName().equals(dataMapSchema1.getDataMapName()));
1:   }
1: 
1:   @Test public void testDropSchema() throws IOException {
1:     DataMapSchema dataMapSchema = createDataMapSchema("dm2", "table1");
1:     provider.saveSchema(dataMapSchema);
1:     provider.dropSchema("dm2");
1:     CarbonFile[] schemaFilesFromLocation = getSchemaFilesFromLocation();
1:     for (CarbonFile file : schemaFilesFromLocation) {
1:       assert (!file.getName().contains("dm2"));
1:     }
1:     try {
1:       provider.retrieveSchema("dm2");
1:       assert (false);
1:     } catch (NoSuchDataMapException e) {
1:       // Ignore
1:     }
1:   }
1: 
1:   @Test public void testRetriveAllSchemas() throws IOException {
1:     DataMapSchema dataMapSchema1 = createDataMapSchema("dm3", "table1");
1:     DataMapSchema dataMapSchema2 = createDataMapSchema("dm4", "table1");
1:     DataMapSchema dataMapSchema3 = createDataMapSchema("dm5", "table1");
1:     provider.saveSchema(dataMapSchema1);
1:     provider.saveSchema(dataMapSchema2);
1:     provider.saveSchema(dataMapSchema3);
1: 
1:     List<DataMapSchema> dataMapSchemas = provider.retrieveAllSchemas();
1:     assert (existsSchema(dataMapSchema1, dataMapSchemas));
1:     assert (existsSchema(dataMapSchema2, dataMapSchemas));
1:     assert (existsSchema(dataMapSchema3, dataMapSchemas));
1:   }
1: 
1:   @Test public void testWithOtherProvider() throws IOException, InterruptedException {
1:     DataMapSchema dataMapSchema1 = createDataMapSchema("dm6", "table1");
1:     DataMapSchema dataMapSchema2 = createDataMapSchema("dm7", "table1");
1:     DataMapSchema dataMapSchema3 = createDataMapSchema("dm8", "table1");
1:     provider.saveSchema(dataMapSchema1);
1:     Thread.sleep(400);
1:     provider.saveSchema(dataMapSchema2);
1:     Thread.sleep(400);
1:     DiskBasedDMSchemaStorageProvider provider1 = new DiskBasedDMSchemaStorageProvider(
1:         CarbonProperties.getInstance().getSystemFolderLocation());
1:     provider1.saveSchema(dataMapSchema3);
1:     Thread.sleep(400);
1: 
1:     List<DataMapSchema> dataMapSchemas = provider1.retrieveAllSchemas();
1:     assert (existsSchema(dataMapSchema1, dataMapSchemas));
1:     assert (existsSchema(dataMapSchema2, dataMapSchemas));
1:     assert (existsSchema(dataMapSchema3, dataMapSchemas));
1: 
1:     List<DataMapSchema> dataMapSchemas1 = provider.retrieveAllSchemas();
1:     assert (existsSchema(dataMapSchema1, dataMapSchemas1));
1:     assert (existsSchema(dataMapSchema2, dataMapSchemas1));
1:     assert (existsSchema(dataMapSchema3, dataMapSchemas1));
1:   }
1: 
1:   @Test public void testDropWithOtherProvider() throws IOException, InterruptedException {
1:     DataMapSchema dataMapSchema1 = createDataMapSchema("dm9", "table1");
1:     DataMapSchema dataMapSchema2 = createDataMapSchema("dm10", "table1");
1:     DataMapSchema dataMapSchema3 = createDataMapSchema("dm11", "table1");
1:     provider.saveSchema(dataMapSchema1);
1:     Thread.sleep(400);
1:     provider.saveSchema(dataMapSchema2);
1:     Thread.sleep(400);
1:     provider.saveSchema(dataMapSchema3);
1:     Thread.sleep(400);
1: 
1:     DiskBasedDMSchemaStorageProvider provider1 = new DiskBasedDMSchemaStorageProvider(
1:         CarbonProperties.getInstance().getSystemFolderLocation());
1:     provider1.dropSchema(dataMapSchema3.getDataMapName());
1:     Thread.sleep(400);
1: 
1:     List<DataMapSchema> dataMapSchemas = provider1.retrieveAllSchemas();
1:     assert (existsSchema(dataMapSchema1, dataMapSchemas));
1:     assert (existsSchema(dataMapSchema2, dataMapSchemas));
1:     assert (!existsSchema(dataMapSchema3, dataMapSchemas));
1: 
1:     List<DataMapSchema> dataMapSchemas1 = provider.retrieveAllSchemas();
1:     assert (existsSchema(dataMapSchema1, dataMapSchemas1));
1:     assert (existsSchema(dataMapSchema2, dataMapSchemas1));
1:     assert (!existsSchema(dataMapSchema3, dataMapSchemas1));
1:   }
1: 
1:   private boolean existsSchema(DataMapSchema schema, List<DataMapSchema> dataMapSchemas) {
1:     for (DataMapSchema dataMapSchema : dataMapSchemas) {
1:       if (dataMapSchema.getDataMapName().equals(schema.getDataMapName())) {
1:         return true;
1:       }
1:     }
1:     return false;
1:   }
1: 
1:   private boolean existsSchema(DataMapSchema schema, CarbonFile[] carbonFiles) {
1:     for (CarbonFile dataMapSchema : carbonFiles) {
1:       if (dataMapSchema.getName().contains(schema.getDataMapName())) {
1:         return true;
1:       }
1:     }
1:     return false;
1:   }
1: 
1:   private DataMapSchema createDataMapSchema(String name, String table) {
1:     DataMapSchema mapSchema = new DataMapSchema(name, "index");
1:     RelationIdentifier identifier = new RelationIdentifier("default", table, "");
1: 
1:     ArrayList<RelationIdentifier> parentTables = new ArrayList<>();
1:     parentTables.add(identifier);
1:     mapSchema.setParentTables(parentTables);
1:     mapSchema.setRelationIdentifier(identifier);
1:     return mapSchema;
1:   }
1: 
1:   private CarbonFile[] getSchemaFilesFromLocation() {
1:     CarbonFile carbonFile =
1:         FileFactory.getCarbonFile(CarbonProperties.getInstance().getSystemFolderLocation());
1:     CarbonFile[] carbonFiles = carbonFile.listFiles(new CarbonFileFilter() {
1:       @Override public boolean accept(CarbonFile file) {
1:         return file.getName().endsWith(".dmschema");
1:       }
1:     });
1:     return carbonFiles;
1:   }
1: 
1: }
============================================================================