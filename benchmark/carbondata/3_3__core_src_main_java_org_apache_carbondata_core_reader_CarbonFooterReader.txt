1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.reader;
1:cd6a4ff: 
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.format.FileFooter;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.thrift.TBase;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * Reads the metadata from fact file in org.apache.carbondata.format.FileFooter thrift object
1:cd6a4ff:  */
1:cd6a4ff: public class CarbonFooterReader {
1:cd6a4ff: 
1:cd6a4ff:   //Fact file path
1:cd6a4ff:   private String filePath;
1:cd6a4ff: 
1:cd6a4ff:   //From which offset of file this metadata should be read
1:cd6a4ff:   private long offset;
1:cd6a4ff: 
1:cd6a4ff:   public CarbonFooterReader(String filePath, long offset) {
1:cd6a4ff: 
1:cd6a4ff:     this.filePath = filePath;
1:cd6a4ff:     this.offset = offset;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * It reads the metadata in FileFooter thrift object format.
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    * @throws IOException
1:cd6a4ff:    */
1:cd6a4ff:   public FileFooter readFooter() throws IOException {
1:cd6a4ff:     ThriftReader thriftReader = openThriftReader(filePath);
1:cd6a4ff:     thriftReader.open();
1:cd6a4ff:     //Set the offset from where it should read
1:cd6a4ff:     thriftReader.setReadOffset(offset);
1:cd6a4ff:     FileFooter footer = (FileFooter) thriftReader.read();
1:cd6a4ff:     thriftReader.close();
1:cd6a4ff:     return footer;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Open the thrift reader
1:cd6a4ff:    *
1:cd6a4ff:    * @param filePath
1:cd6a4ff:    * @return
1:cd6a4ff:    * @throws IOException
1:cd6a4ff:    */
1:eaadc88:   private ThriftReader openThriftReader(String filePath) {
1:cd6a4ff: 
1:eaadc88:     return new ThriftReader(filePath, new ThriftReader.TBaseCreator() {
1:cd6a4ff:       @Override public TBase create() {
1:cd6a4ff:         return new FileFooter();
1:cd6a4ff:       }
1:cd6a4ff:     });
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1:   private ThriftReader openThriftReader(String filePath) {
1:     return new ThriftReader(filePath, new ThriftReader.TBaseCreator() {
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.reader;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.format.FileFooter;
1: 
1: import org.apache.thrift.TBase;
1: 
1: /**
1:  * Reads the metadata from fact file in org.apache.carbondata.format.FileFooter thrift object
1:  */
1: public class CarbonFooterReader {
1: 
1:   //Fact file path
1:   private String filePath;
1: 
1:   //From which offset of file this metadata should be read
1:   private long offset;
1: 
1:   public CarbonFooterReader(String filePath, long offset) {
1: 
1:     this.filePath = filePath;
1:     this.offset = offset;
1:   }
1: 
1:   /**
1:    * It reads the metadata in FileFooter thrift object format.
1:    *
1:    * @return
1:    * @throws IOException
1:    */
1:   public FileFooter readFooter() throws IOException {
1:     ThriftReader thriftReader = openThriftReader(filePath);
1:     thriftReader.open();
1:     //Set the offset from where it should read
1:     thriftReader.setReadOffset(offset);
1:     FileFooter footer = (FileFooter) thriftReader.read();
1:     thriftReader.close();
1:     return footer;
1:   }
1: 
1:   /**
1:    * Open the thrift reader
1:    *
1:    * @param filePath
1:    * @return
1:    * @throws IOException
1:    */
0:   private ThriftReader openThriftReader(String filePath) throws IOException {
1: 
0:     ThriftReader thriftReader = new ThriftReader(filePath, new ThriftReader.TBaseCreator() {
1:       @Override public TBase create() {
1:         return new FileFooter();
1:       }
1:     });
0:     return thriftReader;
1:   }
1: 
1: }
============================================================================