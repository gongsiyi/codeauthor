1:3e045d8: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
3:3e045d8:  *
1:3e045d8:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3e045d8:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:3e045d8:  */
6:3e045d8: 
1:3e045d8: package org.apache.carbondata.core.reader;
1:002279e: 
1:ce09aaa: import java.io.BufferedReader;
1:ce09aaa: import java.io.DataInputStream;
1:ce09aaa: import java.io.IOException;
1:ce09aaa: import java.io.InputStreamReader;
1:ce09aaa: import java.io.StringWriter;
1:3e045d8: 
1:3e045d8: import org.apache.carbondata.common.logging.LogService;
1:3e045d8: import org.apache.carbondata.common.logging.LogServiceFactory;
1:3e045d8: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:ce09aaa: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:878bbd8: import org.apache.carbondata.core.fileoperations.AtomicFileOperationFactory;
1:ce09aaa: import org.apache.carbondata.core.fileoperations.AtomicFileOperations;
1:ce09aaa: import org.apache.carbondata.core.mutate.DeleteDeltaBlockDetails;
1:3e045d8: import org.apache.carbondata.core.util.CarbonUtil;
1:3e045d8: 
1:002279e: import com.google.gson.Gson;
1:3e045d8: 
2:3e045d8: /**
1:3e045d8:  * This class perform the functionality of reading the delete delta file
1:3e045d8:  */
1:3e045d8: public class CarbonDeleteDeltaFileReaderImpl implements CarbonDeleteDeltaFileReader {
1:3e045d8: 
1:3e045d8:   /**
1:3e045d8:    * LOGGER
1:3e045d8:    */
1:3e045d8:   private static final LogService LOGGER =
1:3e045d8:       LogServiceFactory.getLogService(CarbonDeleteDeltaFileReaderImpl.class.getName());
1:3e045d8: 
1:3e045d8:   private String filePath;
1:3e045d8: 
1:3e045d8:   private FileFactory.FileType fileType;
1:3e045d8: 
1:9b8090b:   private DataInputStream dataInputStream = null;
1:3e045d8: 
1:9b8090b:   private InputStreamReader inputStream = null;
1:3e045d8: 
1:3e045d8:   private static final int DEFAULT_BUFFER_SIZE = 258;
1:3e045d8: 
1:3e045d8:   /**
1:3e045d8:    * @param filePath
1:3e045d8:    * @param fileType
1:3e045d8:    */
1:3e045d8:   public CarbonDeleteDeltaFileReaderImpl(String filePath, FileFactory.FileType fileType) {
1:3e045d8:     this.filePath = filePath;
1:3e045d8: 
1:3e045d8:     this.fileType = fileType;
4:3e045d8:   }
1:3e045d8: 
1:3e045d8:   /**
1:3e045d8:    * This method will be used to read complete delete delta file.
1:3e045d8:    * scenario:
1:3e045d8:    * Whenever a query is executed then read the delete delta file
1:3e045d8:    * to exclude the deleted data.
1:3e045d8:    *
1:3e045d8:    * @return All deleted records for the specified block
1:3e045d8:    * @throws IOException if an I/O error occurs
1:3e045d8:    */
1:3e045d8:   @Override public String read() throws IOException {
1:3e045d8:     // Configure Buffer based on our requirement
1:3e045d8:     char[] buffer = new char[DEFAULT_BUFFER_SIZE];
1:3e045d8:     StringWriter sw = new StringWriter();
1:3e045d8:     dataInputStream = FileFactory.getDataInputStream(filePath, fileType);
1:3e045d8:     inputStream = new InputStreamReader(dataInputStream,
1:2f0959a:         CarbonCommonConstants.DEFAULT_CHARSET);
1:3e045d8:     int n = 0;
1:3e045d8:     while (-1 != (n = inputStream.read(buffer))) {
1:3e045d8:       sw.write(buffer, 0, n);
1:3e045d8:     }
1:3e045d8:     return sw.toString();
1:3e045d8:   }
1:3e045d8: 
1:9b8090b:   /**
1:9b8090b:    * Reads delete delta file (json file) and returns DeleteDeltaBlockDetails
1:9b8090b:    * @return DeleteDeltaBlockDetails
1:9b8090b:    * @throws IOException
1:9b8090b:    */
1:3e045d8:   @Override public DeleteDeltaBlockDetails readJson() throws IOException {
1:3e045d8:     Gson gsonObjectToRead = new Gson();
2:3e045d8:     DataInputStream dataInputStream = null;
2:3e045d8:     BufferedReader buffReader = null;
1:3e045d8:     InputStreamReader inStream = null;
1:3e045d8:     DeleteDeltaBlockDetails deleteDeltaBlockDetails;
1:3e045d8:     AtomicFileOperations fileOperation =
1:878bbd8:         AtomicFileOperationFactory.getAtomicFileOperations(filePath);
2:3e045d8:     try {
1:3e045d8:       if (!FileFactory.isFileExist(filePath, FileFactory.getFileType(filePath))) {
1:3e045d8:         return new DeleteDeltaBlockDetails("");
1:3e045d8:       }
1:3e045d8:       dataInputStream = fileOperation.openForRead();
1:3e045d8:       inStream = new InputStreamReader(dataInputStream,
1:2f0959a:           CarbonCommonConstants.DEFAULT_CHARSET);
1:3e045d8:       buffReader = new BufferedReader(inStream);
1:3e045d8:       deleteDeltaBlockDetails =
1:3e045d8:           gsonObjectToRead.fromJson(buffReader, DeleteDeltaBlockDetails.class);
1:3e045d8:     } catch (IOException e) {
1:3e045d8:       return new DeleteDeltaBlockDetails("");
1:3e045d8:     } finally {
1:3e045d8:       CarbonUtil.closeStreams(buffReader, inStream, dataInputStream);
1:3e045d8:     }
1:3e045d8: 
1:3e045d8:     return deleteDeltaBlockDetails;
1:3e045d8:   }
1:3e045d8: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:878bbd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.fileoperations.AtomicFileOperationFactory;
/////////////////////////////////////////////////////////////////////////
1:         AtomicFileOperationFactory.getAtomicFileOperations(filePath);
author:Jacky Li
-------------------------------------------------------------------------------
commit:2f0959a
/////////////////////////////////////////////////////////////////////////
1:         CarbonCommonConstants.DEFAULT_CHARSET);
/////////////////////////////////////////////////////////////////////////
1:           CarbonCommonConstants.DEFAULT_CHARSET);
author:Jihong Ma
-------------------------------------------------------------------------------
commit:e5d2670
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedReader;
1: import java.io.DataInputStream;
1: import java.io.IOException;
1: import java.io.InputStreamReader;
1: import java.io.StringWriter;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.fileoperations.AtomicFileOperations;
0: import org.apache.carbondata.core.fileoperations.AtomicFileOperationsImpl;
1: import org.apache.carbondata.core.mutate.DeleteDeltaBlockDetails;
author:ravikiran
-------------------------------------------------------------------------------
commit:9b8090b
/////////////////////////////////////////////////////////////////////////
1:   private DataInputStream dataInputStream = null;
0:   private BufferedReader buffReader = null;
1:   private InputStreamReader inputStream = null;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Reads delete delta file (json file) and returns DeleteDeltaBlockDetails
1:    * @return DeleteDeltaBlockDetails
1:    * @throws IOException
1:    */
author:sraghunandan
-------------------------------------------------------------------------------
commit:002279e
/////////////////////////////////////////////////////////////////////////
0: import java.io.*;
1: 
/////////////////////////////////////////////////////////////////////////
1: import com.google.gson.Gson;
author:ManoharVanam
-------------------------------------------------------------------------------
commit:3e045d8
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.reader;
1: 
0: import com.google.gson.Gson;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.datastorage.store.impl.FileFactory;
0: import org.apache.carbondata.core.update.DeleteDeltaBlockDetails;
1: import org.apache.carbondata.core.util.CarbonUtil;
0: import org.apache.carbondata.fileoperations.AtomicFileOperations;
0: import org.apache.carbondata.fileoperations.AtomicFileOperationsImpl;
1: 
0: import java.io.*;
1: 
1: /**
1:  * This class perform the functionality of reading the delete delta file
1:  */
1: public class CarbonDeleteDeltaFileReaderImpl implements CarbonDeleteDeltaFileReader {
1: 
1:   /**
1:    * LOGGER
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(CarbonDeleteDeltaFileReaderImpl.class.getName());
1: 
1:   private String filePath;
1: 
1:   private FileFactory.FileType fileType;
1: 
1:   DataInputStream dataInputStream = null;
1: 
1:   BufferedReader buffReader = null;
1: 
0:   InputStreamReader inputStream = null;
1: 
1:   private static final int DEFAULT_BUFFER_SIZE = 258;
1: 
1:   /**
0:    * Constructor
1:    *
1:    * @param filePath
1:    * @param fileType
1:    */
1:   public CarbonDeleteDeltaFileReaderImpl(String filePath, FileFactory.FileType fileType) {
1:     this.filePath = filePath;
1: 
1:     this.fileType = fileType;
1:   }
1: 
1:   /**
1:    * This method will be used to read complete delete delta file.
1:    * scenario:
1:    * Whenever a query is executed then read the delete delta file
1:    * to exclude the deleted data.
1:    *
1:    * @return All deleted records for the specified block
1:    * @throws IOException if an I/O error occurs
1:    */
1:   @Override public String read() throws IOException {
1:     // Configure Buffer based on our requirement
1:     char[] buffer = new char[DEFAULT_BUFFER_SIZE];
1:     StringWriter sw = new StringWriter();
1:     dataInputStream = FileFactory.getDataInputStream(filePath, fileType);
1:     inputStream = new InputStreamReader(dataInputStream,
0:         CarbonCommonConstants.CARBON_DEFAULT_STREAM_ENCODEFORMAT);
0:     buffReader = new BufferedReader(inputStream);
1:     int n = 0;
1:     while (-1 != (n = inputStream.read(buffer))) {
1:       sw.write(buffer, 0, n);
1:     }
1:     return sw.toString();
1:   }
1: 
1:   @Override public DeleteDeltaBlockDetails readJson() throws IOException {
1:     Gson gsonObjectToRead = new Gson();
1:     DataInputStream dataInputStream = null;
1:     BufferedReader buffReader = null;
1:     InputStreamReader inStream = null;
1:     DeleteDeltaBlockDetails deleteDeltaBlockDetails;
1:     AtomicFileOperations fileOperation =
0:         new AtomicFileOperationsImpl(filePath, FileFactory.getFileType(filePath));
1: 
1:     try {
1:       if (!FileFactory.isFileExist(filePath, FileFactory.getFileType(filePath))) {
1:         return new DeleteDeltaBlockDetails("");
1:       }
1:       dataInputStream = fileOperation.openForRead();
1:       inStream = new InputStreamReader(dataInputStream,
0:           CarbonCommonConstants.CARBON_DEFAULT_STREAM_ENCODEFORMAT);
1:       buffReader = new BufferedReader(inStream);
1:       deleteDeltaBlockDetails =
1:           gsonObjectToRead.fromJson(buffReader, DeleteDeltaBlockDetails.class);
1:     } catch (IOException e) {
1:       return new DeleteDeltaBlockDetails("");
1:     } finally {
1:       CarbonUtil.closeStreams(buffReader, inStream, dataInputStream);
1:     }
1: 
1:     return deleteDeltaBlockDetails;
1:   }
1: 
1:   /**
0:    * Returns all deleted records from specified delete delta file
1:    *
0:    * @return
0:    * @throws IOException
1:    */
0:   public int[] getDeleteDeltaRows() throws IOException {
0:     String[] stringRows = read().split(CarbonCommonConstants.COMMA);
0:     int[] rows = new int[stringRows.length];
0:     int rowsLength = stringRows.length;
0:     for (int i = 0; i < rowsLength; i++) {
1:       try {
0:         rows[i] = Integer.parseInt(stringRows[i]);
0:       } catch (NumberFormatException nfe) {
0:         LOGGER.error("Invalid row : " + stringRows[i] + nfe.getLocalizedMessage());
0:         throw new IOException("Invalid row : " + nfe.getLocalizedMessage());
1:       }
1:     }
1: 
0:     return rows;
1:   }
1: 
1: }
============================================================================