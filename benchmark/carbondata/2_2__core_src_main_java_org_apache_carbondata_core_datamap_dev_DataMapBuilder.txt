1:9db662a: /*
1:9db662a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9db662a:  * contributor license agreements.  See the NOTICE file distributed with
1:9db662a:  * this work for additional information regarding copyright ownership.
1:9db662a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9db662a:  * (the "License"); you may not use this file except in compliance with
1:9db662a:  * the License.  You may obtain a copy of the License at
1:9db662a:  *
1:9db662a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9db662a:  *
1:9db662a:  * Unless required by applicable law or agreed to in writing, software
1:9db662a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9db662a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9db662a:  * See the License for the specific language governing permissions and
1:9db662a:  * limitations under the License.
1:9db662a:  */
1:9db662a: 
1:9db662a: package org.apache.carbondata.core.datamap.dev;
1:9db662a: 
1:9db662a: import java.io.IOException;
1:9db662a: 
1:9db662a: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:9db662a: 
1:9db662a: /**
1:747be9b:  * DataMapBuilder is used to implement REBUILD DATAMAP command, it reads all existing
1:747be9b:  * data in main table and load them into the DataMap. All existing index data will be deleted
1:747be9b:  * if there are existing data in the datamap.
1:9db662a:  */
1:9db662a: @InterfaceAudience.Developer("DataMap")
1:747be9b: public interface DataMapBuilder {
1:9db662a:   void initialize() throws IOException;
1:9db662a: 
1:9db662a:   void addRow(int blockletId, int pageId, int rowId, Object[] values) throws IOException;
1:9db662a: 
1:9db662a:   void finish() throws IOException;
1:9db662a: 
1:9db662a:   void close() throws IOException;
1:5c483f3:   /**
1:5c483f3:    * whether create index on internal carbon bytes (such as dictionary encoded) or original value
1:5c483f3:    */
1:5c483f3:   boolean isIndexForCarbonRawBytes();
1:9db662a: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:5c483f3
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * whether create index on internal carbon bytes (such as dictionary encoded) or original value
1:    */
1:   boolean isIndexForCarbonRawBytes();
author:Jacky Li
-------------------------------------------------------------------------------
commit:747be9b
/////////////////////////////////////////////////////////////////////////
1:  * DataMapBuilder is used to implement REBUILD DATAMAP command, it reads all existing
1:  * data in main table and load them into the DataMap. All existing index data will be deleted
1:  * if there are existing data in the datamap.
1: public interface DataMapBuilder {
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datamap.dev;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: 
1: /**
0:  * Interface to rebuild the datamap for main table with existing data
1:  */
1: @InterfaceAudience.Developer("DataMap")
0: public interface DataMapRefresher {
1:   void initialize() throws IOException;
1: 
1:   void addRow(int blockletId, int pageId, int rowId, Object[] values) throws IOException;
1: 
1:   void finish() throws IOException;
1: 
1:   void close() throws IOException;
1: }
============================================================================