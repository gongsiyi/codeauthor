1:aee5213: package org.apache.carbondata.core.indexstore.blockletindex;
1:aee5213: 
1:aee5213: import java.lang.reflect.Method;
1:aee5213: import java.util.BitSet;
1:aee5213: 
1:aee5213: import org.apache.carbondata.core.cache.dictionary.AbstractDictionaryCacheTest;
1:aee5213: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:aee5213: import org.apache.carbondata.core.metadata.schema.table.column.CarbonImplicitDimension;
1:aee5213: import org.apache.carbondata.core.scan.filter.executer.FilterExecuter;
1:aee5213: import org.apache.carbondata.core.scan.filter.executer.ImplicitIncludeFilterExecutorImpl;
1:aee5213: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;
1:aee5213: import org.apache.carbondata.core.util.ByteUtil;
1:aee5213: 
1:aee5213: import mockit.Mock;
1:aee5213: import mockit.MockUp;
1:aee5213: import org.junit.Before;
1:aee5213: import org.junit.Test;
1:aee5213: 
1:fc2a7eb: public class TestBlockletDataMap extends AbstractDictionaryCacheTest {
1:aee5213: 
1:aee5213:   ImplicitIncludeFilterExecutorImpl implicitIncludeFilterExecutor;
1:aee5213:   @Before public void setUp() throws Exception {
1:aee5213:     CarbonImplicitDimension carbonImplicitDimension =
1:aee5213:         new CarbonImplicitDimension(0, CarbonCommonConstants.CARBON_IMPLICIT_COLUMN_POSITIONID);
1:aee5213:     DimColumnResolvedFilterInfo dimColumnEvaluatorInfo = new DimColumnResolvedFilterInfo();
1:aee5213:     dimColumnEvaluatorInfo.setColumnIndex(0);
1:aee5213:     dimColumnEvaluatorInfo.setRowIndex(0);
1:aee5213:     dimColumnEvaluatorInfo.setDimension(carbonImplicitDimension);
1:aee5213:     dimColumnEvaluatorInfo.setDimensionExistsInCurrentSilce(false);
1:aee5213:     implicitIncludeFilterExecutor =
1:aee5213:         new ImplicitIncludeFilterExecutorImpl(dimColumnEvaluatorInfo);
1:aee5213:   }
1:aee5213: 
1:aee5213:   @Test public void testaddBlockBasedOnMinMaxValue() throws Exception {
1:aee5213: 
1:aee5213:     new MockUp<ImplicitIncludeFilterExecutorImpl>() {
1:aee5213:       @Mock BitSet isFilterValuesPresentInBlockOrBlocklet(byte[][] maxValue, byte[][] minValue,
1:aee5213:           String uniqueBlockPath) {
1:aee5213:         BitSet bitSet = new BitSet(1);
1:aee5213:         bitSet.set(8);
1:aee5213:         return bitSet;
1:aee5213:       }
1:aee5213:     };
1:aee5213: 
1:6118711:     BlockDataMap blockletDataMap = new BlockletDataMap();
1:6118711:     Method method = BlockDataMap.class
1:aee5213:         .getDeclaredMethod("addBlockBasedOnMinMaxValue", FilterExecuter.class, byte[][].class,
1:aee5213:             byte[][].class, String.class, int.class);
1:aee5213:     method.setAccessible(true);
1:aee5213: 
1:aee5213:     byte[][] minValue = { ByteUtil.toBytes("sfds") };
1:aee5213:     byte[][] maxValue = { ByteUtil.toBytes("resa") };
1:aee5213:     Object result = method
1:aee5213:         .invoke(blockletDataMap, implicitIncludeFilterExecutor, minValue, maxValue,
1:aee5213:             "/opt/store/default/carbon_table/Fact/Part0/Segment_0/part-0-0_batchno0-0-1514989110586.carbondata",
1:aee5213:             0);
1:aee5213:     assert ((boolean) result);
1:aee5213:   }
1:aee5213: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:6118711
/////////////////////////////////////////////////////////////////////////
1:     BlockDataMap blockletDataMap = new BlockletDataMap();
1:     Method method = BlockDataMap.class
author:Jacky Li
-------------------------------------------------------------------------------
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
1: public class TestBlockletDataMap extends AbstractDictionaryCacheTest {
/////////////////////////////////////////////////////////////////////////
0:     BlockletDataMap blockletDataMap = new BlockletDataMap();
0:     Method method = BlockletDataMap.class
commit:89a12af
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class TestBlockletIndexDataMap extends AbstractDictionaryCacheTest {
/////////////////////////////////////////////////////////////////////////
0:     BlockletIndexDataMap blockletDataMap = new BlockletIndexDataMap();
0:     Method method = BlockletIndexDataMap.class
author:rahulforallp
-------------------------------------------------------------------------------
commit:aee5213
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.indexstore.blockletindex;
1: 
1: import java.lang.reflect.Method;
0: import java.util.ArrayList;
1: import java.util.BitSet;
0: import java.util.List;
0: import java.util.UUID;
1: 
1: import org.apache.carbondata.core.cache.dictionary.AbstractDictionaryCacheTest;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
0: import org.apache.carbondata.core.metadata.datatype.DataTypes;
0: import org.apache.carbondata.core.metadata.encoder.Encoding;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonImplicitDimension;
0: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: import org.apache.carbondata.core.scan.filter.executer.FilterExecuter;
1: import org.apache.carbondata.core.scan.filter.executer.ImplicitIncludeFilterExecutorImpl;
1: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: import mockit.Mock;
1: import mockit.MockUp;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: public class TestBlockletDataMap extends AbstractDictionaryCacheTest {
1: 
1:   ImplicitIncludeFilterExecutorImpl implicitIncludeFilterExecutor;
1:   @Before public void setUp() throws Exception {
1:     CarbonImplicitDimension carbonImplicitDimension =
1:         new CarbonImplicitDimension(0, CarbonCommonConstants.CARBON_IMPLICIT_COLUMN_POSITIONID);
1:     DimColumnResolvedFilterInfo dimColumnEvaluatorInfo = new DimColumnResolvedFilterInfo();
1:     dimColumnEvaluatorInfo.setColumnIndex(0);
1:     dimColumnEvaluatorInfo.setRowIndex(0);
1:     dimColumnEvaluatorInfo.setDimension(carbonImplicitDimension);
1:     dimColumnEvaluatorInfo.setDimensionExistsInCurrentSilce(false);
1:     implicitIncludeFilterExecutor =
1:         new ImplicitIncludeFilterExecutorImpl(dimColumnEvaluatorInfo);
1:   }
1: 
1:   @Test public void testaddBlockBasedOnMinMaxValue() throws Exception {
1: 
1:     new MockUp<ImplicitIncludeFilterExecutorImpl>() {
1:       @Mock BitSet isFilterValuesPresentInBlockOrBlocklet(byte[][] maxValue, byte[][] minValue,
1:           String uniqueBlockPath) {
1:         BitSet bitSet = new BitSet(1);
1:         bitSet.set(8);
1:         return bitSet;
1:       }
1:     };
1: 
0:     BlockletDataMap blockletDataMap = new BlockletDataMap();
0:     Method method = BlockletDataMap.class
1:         .getDeclaredMethod("addBlockBasedOnMinMaxValue", FilterExecuter.class, byte[][].class,
1:             byte[][].class, String.class, int.class);
1:     method.setAccessible(true);
1: 
1:     byte[][] minValue = { ByteUtil.toBytes("sfds") };
1:     byte[][] maxValue = { ByteUtil.toBytes("resa") };
1:     Object result = method
1:         .invoke(blockletDataMap, implicitIncludeFilterExecutor, minValue, maxValue,
1:             "/opt/store/default/carbon_table/Fact/Part0/Segment_0/part-0-0_batchno0-0-1514989110586.carbondata",
1:             0);
1:     assert ((boolean) result);
1:   }
1: }
============================================================================