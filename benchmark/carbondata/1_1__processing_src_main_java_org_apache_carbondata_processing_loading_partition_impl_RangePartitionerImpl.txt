1:d5396b1: /*
1:d5396b1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d5396b1:  * contributor license agreements.  See the NOTICE file distributed with
1:d5396b1:  * this work for additional information regarding copyright ownership.
1:d5396b1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d5396b1:  * (the "License"); you may not use this file except in compliance with
1:d5396b1:  * the License.  You may obtain a copy of the License at
1:d5396b1:  *
1:d5396b1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d5396b1:  *
1:d5396b1:  * Unless required by applicable law or agreed to in writing, software
1:d5396b1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d5396b1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d5396b1:  * See the License for the specific language governing permissions and
1:d5396b1:  * limitations under the License.
1:d5396b1:  */
1:d5396b1: 
1:d5396b1: package org.apache.carbondata.processing.loading.partition.impl;
1:d5396b1: 
1:d5396b1: import java.util.Arrays;
1:d5396b1: import java.util.Comparator;
1:d5396b1: 
1:d5396b1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:d5396b1: import org.apache.carbondata.common.logging.LogService;
1:d5396b1: import org.apache.carbondata.common.logging.LogServiceFactory;
1:d5396b1: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:d5396b1: import org.apache.carbondata.processing.loading.partition.Partitioner;
1:d5396b1: 
1:d5396b1: @InterfaceAudience.Internal
1:d5396b1: public class RangePartitionerImpl implements Partitioner<CarbonRow> {
1:d5396b1:   private static final LogService LOGGER =
1:d5396b1:       LogServiceFactory.getLogService(RangePartitionerImpl.class.getName());
1:d5396b1:   private CarbonRow[] rangeBounds;
1:d5396b1:   private Comparator<CarbonRow> comparator;
1:d5396b1: 
1:d5396b1:   public RangePartitionerImpl(CarbonRow[] rangeBounds, Comparator<CarbonRow> comparator) {
1:d5396b1:     this.rangeBounds = rangeBounds;
1:d5396b1:     LOGGER.info("Use range partitioner to distribute data to "
1:d5396b1:         + (rangeBounds.length + 1) + " ranges.");
1:d5396b1:     this.comparator = comparator;
1:d5396b1:   }
1:d5396b1: 
1:d5396b1:   /**
1:d5396b1:    * learned from spark org.apache.spark.RangePartitioner
1:d5396b1:    *
1:d5396b1:    * @param key key
1:d5396b1:    * @return partitionId
1:d5396b1:    */
1:d5396b1:   @Override
1:d5396b1:   public int getPartition(CarbonRow key) {
1:d5396b1:     int partition = 0;
1:d5396b1:     if (rangeBounds.length <= 128) {
1:d5396b1:       // If we have less than 128 partitions naive search
1:d5396b1:       while (partition < rangeBounds.length
1:d5396b1:           && comparator.compare(key, rangeBounds[partition]) > 0) {
1:d5396b1:         partition += 1;
1:d5396b1:       }
1:d5396b1:     } else {
1:d5396b1:       // binary search. binarySearch either returns the match location or -[insertion point]-1
1:d5396b1:       partition = Arrays.binarySearch(rangeBounds, 0, rangeBounds.length, key, comparator);
1:d5396b1:       if (partition < 0) {
1:d5396b1:         partition = -partition - 1;
1:d5396b1:       }
1:d5396b1:       if (partition > rangeBounds.length) {
1:d5396b1:         partition = rangeBounds.length;
1:d5396b1:       }
1:d5396b1:     }
1:d5396b1: 
1:d5396b1:     return partition;
1:d5396b1:   }
1:d5396b1: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:d5396b1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.loading.partition.impl;
1: 
1: import java.util.Arrays;
1: import java.util.Comparator;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
1: import org.apache.carbondata.processing.loading.partition.Partitioner;
1: 
1: @InterfaceAudience.Internal
1: public class RangePartitionerImpl implements Partitioner<CarbonRow> {
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(RangePartitionerImpl.class.getName());
1:   private CarbonRow[] rangeBounds;
1:   private Comparator<CarbonRow> comparator;
1: 
1:   public RangePartitionerImpl(CarbonRow[] rangeBounds, Comparator<CarbonRow> comparator) {
1:     this.rangeBounds = rangeBounds;
1:     LOGGER.info("Use range partitioner to distribute data to "
1:         + (rangeBounds.length + 1) + " ranges.");
1:     this.comparator = comparator;
1:   }
1: 
1:   /**
1:    * learned from spark org.apache.spark.RangePartitioner
1:    *
1:    * @param key key
1:    * @return partitionId
1:    */
1:   @Override
1:   public int getPartition(CarbonRow key) {
1:     int partition = 0;
1:     if (rangeBounds.length <= 128) {
1:       // If we have less than 128 partitions naive search
1:       while (partition < rangeBounds.length
1:           && comparator.compare(key, rangeBounds[partition]) > 0) {
1:         partition += 1;
1:       }
1:     } else {
1:       // binary search. binarySearch either returns the match location or -[insertion point]-1
1:       partition = Arrays.binarySearch(rangeBounds, 0, rangeBounds.length, key, comparator);
1:       if (partition < 0) {
1:         partition = -partition - 1;
1:       }
1:       if (partition > rangeBounds.length) {
1:         partition = rangeBounds.length;
1:       }
1:     }
1: 
1:     return partition;
1:   }
1: }
============================================================================