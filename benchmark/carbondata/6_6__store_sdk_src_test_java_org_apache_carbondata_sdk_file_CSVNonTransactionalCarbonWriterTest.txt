1:280a400: /*
1:280a400:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:280a400:  * contributor license agreements.  See the NOTICE file distributed with
1:280a400:  * this work for additional information regarding copyright ownership.
1:280a400:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:280a400:  * (the "License"); you may not use this file except in compliance with
1:280a400:  * the License.  You may obtain a copy of the License at
1:280a400:  *
1:280a400:  *    http://www.apache.org/licenses/LICENSE-2.0
1:280a400:  *
1:280a400:  * Unless required by applicable law or agreed to in writing, software
1:280a400:  * distributed under the License is distributed on an "AS IS" BASIS,
1:280a400:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:280a400:  * See the License for the specific language governing permissions and
1:280a400:  * limitations under the License.
1:280a400:  */
1:280a400: 
1:280a400: package org.apache.carbondata.sdk.file;
1:280a400: 
1:280a400: import java.io.File;
1:280a400: import java.io.FileFilter;
1:280a400: import java.io.IOException;
1:280a400: 
1:280a400: import org.apache.carbondata.common.exceptions.sql.InvalidLoadOptionException;
1:280a400: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:280a400: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:bea277f: import org.apache.carbondata.core.metadata.schema.table.DiskBasedDMSchemaStorageProvider;
1:bea277f: import org.apache.carbondata.core.util.CarbonProperties;
1:280a400: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:280a400: 
1:280a400: import org.apache.commons.io.FileUtils;
1:cf55028: import org.junit.After;
1:280a400: import org.junit.Assert;
1:cf55028: import org.junit.Before;
1:280a400: import org.junit.Test;
1:280a400: 
1:280a400: /**
1:280a400:  * Test suite for {@link CSVCarbonWriter}
1:280a400:  */
1:b7b8073: public class CSVNonTransactionalCarbonWriterTest {
1:cf55028:   @Before
1:cf55028:   public void cleanFile() {
1:bea277f:     String path = null;
1:bea277f:     try {
1:bea277f:       path = new File(CSVNonTransactionalCarbonWriterTest.class.getResource("/").getPath() + "../")
1:bea277f:           .getCanonicalPath().replaceAll("\\\\", "/");
1:bea277f:     } catch (IOException e) {
1:bea277f:       assert (false);
1:bea277f:     }
1:bea277f:     CarbonProperties.getInstance()
1:bea277f:         .addProperty(CarbonCommonConstants.CARBON_SYSTEM_FOLDER_LOCATION, path);
1:cf55028:     assert (TestUtil.cleanMdtFile());
1:cf55028:   }
1:cf55028: 
1:cf55028:   @After
1:cf55028:   public void verifyDMFile() {
1:cf55028:     assert (!TestUtil.verifyMdtFile());
1:cf55028:   }
1:280a400: 
1:280a400:   @Test
1:280a400:   public void testWriteFiles() throws IOException {
1:280a400:     String path = "./testWriteFiles";
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400: 
1:280a400:     Field[] fields = new Field[2];
1:280a400:     fields[0] = new Field("name", DataTypes.STRING);
1:280a400:     fields[1] = new Field("age", DataTypes.INT);
1:280a400: 
1:280a400:     writeFilesAndVerify(new Schema(fields), path);
1:280a400: 
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400:   }
1:280a400: 
1:280a400:   @Test
1:280a400:   public void testWriteFilesJsonSchema() throws IOException {
1:280a400:     String path = "./testWriteFilesJsonSchema";
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400: 
1:280a400:     String schema = new StringBuilder()
1:280a400:         .append("[ \n")
1:280a400:         .append("   {\"name\":\"string\"},\n")
1:280a400:         .append("   {\"age\":\"int\"},\n")
1:280a400:         .append("   {\"height\":\"double\"}\n")
1:280a400:         .append("]")
1:280a400:         .toString();
1:280a400: 
1:280a400:     writeFilesAndVerify(Schema.parseJson(schema), path);
1:280a400: 
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400:   }
1:280a400: 
1:280a400:   private void writeFilesAndVerify(Schema schema, String path) {
1:280a400:     writeFilesAndVerify(schema, path, null);
1:280a400:   }
1:280a400: 
1:280a400:   private void writeFilesAndVerify(Schema schema, String path, String[] sortColumns) {
1:280a400:     writeFilesAndVerify(100, schema, path, sortColumns, false, -1, -1);
1:280a400:   }
1:280a400: 
1:280a400:   private void writeFilesAndVerify(Schema schema, String path, boolean persistSchema) {
1:280a400:     writeFilesAndVerify(100, schema, path, null, persistSchema, -1, -1);
1:280a400:   }
1:280a400: 
1:280a400:   /**
1:280a400:    * Invoke CarbonWriter API to write carbon files and assert the file is rewritten
1:280a400:    * @param rows number of rows to write
1:280a400:    * @param schema schema of the file
1:280a400:    * @param path local write path
1:280a400:    * @param sortColumns sort columns
1:280a400:    * @param persistSchema true if want to persist schema file
1:280a400:    * @param blockletSize blockletSize in the file, -1 for default size
1:280a400:    * @param blockSize blockSize in the file, -1 for default size
1:280a400:    */
1:280a400:   private void writeFilesAndVerify(int rows, Schema schema, String path, String[] sortColumns,
1:280a400:       boolean persistSchema, int blockletSize, int blockSize) {
1:280a400:     try {
1:280a400:       CarbonWriterBuilder builder = CarbonWriter.builder()
1:b7b8073:           .isTransactionalTable(false)
1:280a400:           .uniqueIdentifier(System.currentTimeMillis())
1:fc4b7f9:           .taskNo(System.nanoTime())
1:280a400:           .outputPath(path);
1:280a400:       if (sortColumns != null) {
1:280a400:         builder = builder.sortBy(sortColumns);
1:280a400:       }
1:280a400:       if (persistSchema) {
1:280a400:         builder = builder.persistSchemaFile(true);
1:280a400:       }
1:280a400:       if (blockletSize != -1) {
1:280a400:         builder = builder.withBlockletSize(blockletSize);
1:280a400:       }
1:280a400:       if (blockSize != -1) {
1:280a400:         builder = builder.withBlockSize(blockSize);
1:280a400:       }
1:280a400: 
1:8f1a029:       CarbonWriter writer = builder.buildWriterForCSVInput(schema, TestUtil.configuration);
1:280a400: 
1:280a400:       for (int i = 0; i < rows; i++) {
1:280a400:         writer.write(new String[]{"robot" + (i % 10), String.valueOf(i), String.valueOf((double) i / 2)});
1:280a400:       }
1:280a400:       writer.close();
1:280a400:     } catch (IOException e) {
1:280a400:       e.printStackTrace();
1:280a400:       Assert.fail(e.getMessage());
1:280a400:     } catch (InvalidLoadOptionException l) {
1:280a400:       l.printStackTrace();
1:280a400:       Assert.fail(l.getMessage());
1:280a400:     }
1:280a400: 
1:280a400:     File segmentFolder = new File(path);
1:280a400:     Assert.assertTrue(segmentFolder.exists());
1:280a400: 
1:280a400:     File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
1:280a400:       @Override public boolean accept(File pathname) {
1:280a400:         return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
1:280a400:       }
1:280a400:     });
1:280a400:     Assert.assertNotNull(dataFiles);
1:280a400:     Assert.assertTrue(dataFiles.length > 0);
1:280a400:   }
1:280a400:   
1:280a400: 
1:280a400:   @Test
1:280a400:   public void testAllPrimitiveDataType() throws IOException {
1:280a400:     // TODO: write all data type and read by CarbonRecordReader to verify the content
1:280a400:     String path = "./testWriteFiles";
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400: 
1:280a400:     Field[] fields = new Field[9];
1:280a400:     fields[0] = new Field("stringField", DataTypes.STRING);
1:280a400:     fields[1] = new Field("intField", DataTypes.INT);
1:280a400:     fields[2] = new Field("shortField", DataTypes.SHORT);
1:280a400:     fields[3] = new Field("longField", DataTypes.LONG);
1:280a400:     fields[4] = new Field("doubleField", DataTypes.DOUBLE);
1:280a400:     fields[5] = new Field("boolField", DataTypes.BOOLEAN);
1:280a400:     fields[6] = new Field("dateField", DataTypes.DATE);
1:280a400:     fields[7] = new Field("timeField", DataTypes.TIMESTAMP);
1:280a400:     fields[8] = new Field("decimalField", DataTypes.createDecimalType(8, 2));
1:280a400: 
1:280a400:     try {
1:280a400:       CarbonWriterBuilder builder = CarbonWriter.builder()
1:280a400:           .uniqueIdentifier(System.currentTimeMillis())
1:b7b8073:           .isTransactionalTable(false)
1:fc4b7f9:           .taskNo(System.nanoTime())
1:280a400:           .outputPath(path);
1:280a400: 
1:8f1a029:       CarbonWriter writer = builder.buildWriterForCSVInput(new Schema(fields), TestUtil.configuration);
1:280a400: 
1:280a400:       for (int i = 0; i < 100; i++) {
1:280a400:         String[] row = new String[]{
1:280a400:             "robot" + (i % 10),
1:280a400:             String.valueOf(i),
1:280a400:             String.valueOf(i),
1:280a400:             String.valueOf(Long.MAX_VALUE - i),
1:280a400:             String.valueOf((double) i / 2),
1:280a400:             String.valueOf(true),
1:280a400:             "2019-03-02",
1:280a400:             "2019-02-12 03:03:34"
1:280a400:         };
1:280a400:         writer.write(row);
1:280a400:       }
1:280a400:       writer.close();
1:280a400:     } catch (Exception e) {
1:280a400:       e.printStackTrace();
1:280a400:       Assert.fail(e.getMessage());
1:280a400:     }
1:280a400: 
1:280a400:     File segmentFolder = new File(path);
1:280a400:     Assert.assertTrue(segmentFolder.exists());
1:280a400: 
1:280a400:     File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
1:280a400:       @Override public boolean accept(File pathname) {
1:280a400:         return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
1:280a400:       }
1:280a400:     });
1:280a400:     Assert.assertNotNull(dataFiles);
1:280a400:     Assert.assertTrue(dataFiles.length > 0);
1:280a400: 
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400:   }
1:280a400: 
1:280a400:   @Test
1:280a400:   public void test2Blocklet() throws IOException {
1:280a400:     String path = "./testWriteFiles";
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400: 
1:280a400:     Field[] fields = new Field[2];
1:280a400:     fields[0] = new Field("name", DataTypes.STRING);
1:280a400:     fields[1] = new Field("age", DataTypes.INT);
1:280a400: 
1:280a400:     writeFilesAndVerify(1000 * 1000, new Schema(fields), path, null, false, 1, 100);
1:280a400: 
1:280a400:     // TODO: implement reader to verify the number of blocklet in the file
1:280a400: 
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400:   }
1:280a400: 
1:280a400:   @Test
1:280a400:   public void test2Block() throws IOException {
1:280a400:     String path = "./testWriteFiles";
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400: 
1:280a400:     Field[] fields = new Field[2];
1:280a400:     fields[0] = new Field("name", DataTypes.STRING);
1:280a400:     fields[1] = new Field("age", DataTypes.INT);
1:280a400: 
1:280a400:     writeFilesAndVerify(1000 * 1000, new Schema(fields), path, null, false, 2, 2);
1:280a400: 
1:280a400:     File segmentFolder = new File(path);
1:280a400:     File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
1:280a400:       @Override public boolean accept(File pathname) {
1:280a400:         return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
1:280a400:       }
1:280a400:     });
1:280a400:     Assert.assertNotNull(dataFiles);
1:280a400:     Assert.assertEquals(2, dataFiles.length);
1:280a400: 
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400:   }
1:280a400: 
1:280a400:   @Test
1:280a400:   public void testSortColumns() throws IOException {
1:280a400:     String path = "./testWriteFiles";
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400: 
1:280a400:     Field[] fields = new Field[2];
1:280a400:     fields[0] = new Field("name", DataTypes.STRING);
1:280a400:     fields[1] = new Field("age", DataTypes.INT);
1:280a400: 
1:280a400:     writeFilesAndVerify(new Schema(fields), path, new String[]{"name"});
1:280a400: 
1:280a400:     // TODO: implement reader and verify the data is sorted
1:280a400: 
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400:   }
1:280a400: 
1:280a400:   @Test
1:280a400:   public void testPartitionOutput() {
1:280a400:     // TODO: test write data with partition
1:280a400:   }
1:280a400: 
1:280a400:   @Test
1:280a400:   public void testSchemaPersistence() throws IOException {
1:280a400:     String path = "./testWriteFiles";
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400: 
1:280a400:     Field[] fields = new Field[2];
1:280a400:     fields[0] = new Field("name", DataTypes.STRING);
1:280a400:     fields[1] = new Field("age", DataTypes.INT);
1:280a400: 
1:280a400:     writeFilesAndVerify(new Schema(fields), path, true);
1:280a400: 
1:280a400:     String schemaFile = CarbonTablePath.getSchemaFilePath(path);
1:280a400:     Assert.assertTrue(new File(schemaFile).exists());
1:280a400: 
1:280a400:     FileUtils.deleteDirectory(new File(path));
1:280a400:   }
1:280a400: 
1:280a400: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1:       CarbonWriter writer = builder.buildWriterForCSVInput(schema, TestUtil.configuration);
/////////////////////////////////////////////////////////////////////////
1:       CarbonWriter writer = builder.buildWriterForCSVInput(new Schema(fields), TestUtil.configuration);
commit:26eb2d0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       CarbonWriter writer = builder.buildWriterForCSVInput(schema);
/////////////////////////////////////////////////////////////////////////
0:       CarbonWriter writer = builder.buildWriterForCSVInput(new Schema(fields));
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:bea277f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.DiskBasedDMSchemaStorageProvider;
1: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
1:     String path = null;
1:     try {
1:       path = new File(CSVNonTransactionalCarbonWriterTest.class.getResource("/").getPath() + "../")
1:           .getCanonicalPath().replaceAll("\\\\", "/");
1:     } catch (IOException e) {
1:       assert (false);
1:     }
1:     CarbonProperties.getInstance()
1:         .addProperty(CarbonCommonConstants.CARBON_SYSTEM_FOLDER_LOCATION, path);
author:xubo245
-------------------------------------------------------------------------------
commit:cf55028
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1:   @Before
1:   public void cleanFile() {
1:     assert (TestUtil.cleanMdtFile());
1:   }
1: 
1:   @After
1:   public void verifyDMFile() {
1:     assert (!TestUtil.verifyMdtFile());
1:   }
author:rahulforallp
-------------------------------------------------------------------------------
commit:fc4b7f9
/////////////////////////////////////////////////////////////////////////
1:           .taskNo(System.nanoTime())
/////////////////////////////////////////////////////////////////////////
1:           .taskNo(System.nanoTime())
author:sounakr
-------------------------------------------------------------------------------
commit:b7b8073
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class CSVNonTransactionalCarbonWriterTest {
/////////////////////////////////////////////////////////////////////////
1:           .isTransactionalTable(false)
0:           .taskNo(Long.toString(System.nanoTime()))
/////////////////////////////////////////////////////////////////////////
1:           .isTransactionalTable(false)
0:           .taskNo(Long.toString(System.nanoTime()))
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:280a400
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.sdk.file;
1: 
1: import java.io.File;
1: import java.io.FileFilter;
0: import java.io.FilenameFilter;
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.common.exceptions.sql.InvalidLoadOptionException;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: 
1: import org.apache.commons.io.FileUtils;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: /**
1:  * Test suite for {@link CSVCarbonWriter}
1:  */
0: public class CSVUnManagedCarbonWriterTest {
1: 
1:   @Test
1:   public void testWriteFiles() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
1:     writeFilesAndVerify(new Schema(fields), path);
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
1:   @Test
1:   public void testWriteFilesJsonSchema() throws IOException {
1:     String path = "./testWriteFilesJsonSchema";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     String schema = new StringBuilder()
1:         .append("[ \n")
1:         .append("   {\"name\":\"string\"},\n")
1:         .append("   {\"age\":\"int\"},\n")
1:         .append("   {\"height\":\"double\"}\n")
1:         .append("]")
1:         .toString();
1: 
1:     writeFilesAndVerify(Schema.parseJson(schema), path);
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
1:   private void writeFilesAndVerify(Schema schema, String path) {
1:     writeFilesAndVerify(schema, path, null);
1:   }
1: 
1:   private void writeFilesAndVerify(Schema schema, String path, String[] sortColumns) {
1:     writeFilesAndVerify(100, schema, path, sortColumns, false, -1, -1);
1:   }
1: 
1:   private void writeFilesAndVerify(Schema schema, String path, boolean persistSchema) {
1:     writeFilesAndVerify(100, schema, path, null, persistSchema, -1, -1);
1:   }
1: 
1:   /**
1:    * Invoke CarbonWriter API to write carbon files and assert the file is rewritten
1:    * @param rows number of rows to write
1:    * @param schema schema of the file
1:    * @param path local write path
1:    * @param sortColumns sort columns
1:    * @param persistSchema true if want to persist schema file
1:    * @param blockletSize blockletSize in the file, -1 for default size
1:    * @param blockSize blockSize in the file, -1 for default size
1:    */
1:   private void writeFilesAndVerify(int rows, Schema schema, String path, String[] sortColumns,
1:       boolean persistSchema, int blockletSize, int blockSize) {
1:     try {
1:       CarbonWriterBuilder builder = CarbonWriter.builder()
0:           .withSchema(schema)
0:           .unManagedTable(true)
1:           .uniqueIdentifier(System.currentTimeMillis())
1:           .outputPath(path);
1:       if (sortColumns != null) {
1:         builder = builder.sortBy(sortColumns);
1:       }
1:       if (persistSchema) {
1:         builder = builder.persistSchemaFile(true);
1:       }
1:       if (blockletSize != -1) {
1:         builder = builder.withBlockletSize(blockletSize);
1:       }
1:       if (blockSize != -1) {
1:         builder = builder.withBlockSize(blockSize);
1:       }
1: 
0:       CarbonWriter writer = builder.buildWriterForCSVInput();
1: 
1:       for (int i = 0; i < rows; i++) {
1:         writer.write(new String[]{"robot" + (i % 10), String.valueOf(i), String.valueOf((double) i / 2)});
1:       }
1:       writer.close();
1:     } catch (IOException e) {
1:       e.printStackTrace();
1:       Assert.fail(e.getMessage());
1:     } catch (InvalidLoadOptionException l) {
1:       l.printStackTrace();
1:       Assert.fail(l.getMessage());
1:     }
1: 
1:     File segmentFolder = new File(path);
1:     Assert.assertTrue(segmentFolder.exists());
1: 
1:     File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
1:       @Override public boolean accept(File pathname) {
1:         return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
1:       }
1:     });
1:     Assert.assertNotNull(dataFiles);
1:     Assert.assertTrue(dataFiles.length > 0);
1:   }
1:   
1: 
1:   @Test
1:   public void testAllPrimitiveDataType() throws IOException {
1:     // TODO: write all data type and read by CarbonRecordReader to verify the content
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[9];
1:     fields[0] = new Field("stringField", DataTypes.STRING);
1:     fields[1] = new Field("intField", DataTypes.INT);
1:     fields[2] = new Field("shortField", DataTypes.SHORT);
1:     fields[3] = new Field("longField", DataTypes.LONG);
1:     fields[4] = new Field("doubleField", DataTypes.DOUBLE);
1:     fields[5] = new Field("boolField", DataTypes.BOOLEAN);
1:     fields[6] = new Field("dateField", DataTypes.DATE);
1:     fields[7] = new Field("timeField", DataTypes.TIMESTAMP);
1:     fields[8] = new Field("decimalField", DataTypes.createDecimalType(8, 2));
1: 
1:     try {
1:       CarbonWriterBuilder builder = CarbonWriter.builder()
0:           .withSchema(new Schema(fields))
1:           .uniqueIdentifier(System.currentTimeMillis())
0:           .unManagedTable(true)
1:           .outputPath(path);
1: 
0:       CarbonWriter writer = builder.buildWriterForCSVInput();
1: 
1:       for (int i = 0; i < 100; i++) {
1:         String[] row = new String[]{
1:             "robot" + (i % 10),
1:             String.valueOf(i),
1:             String.valueOf(i),
1:             String.valueOf(Long.MAX_VALUE - i),
1:             String.valueOf((double) i / 2),
1:             String.valueOf(true),
1:             "2019-03-02",
1:             "2019-02-12 03:03:34"
1:         };
1:         writer.write(row);
1:       }
1:       writer.close();
1:     } catch (Exception e) {
1:       e.printStackTrace();
1:       Assert.fail(e.getMessage());
1:     }
1: 
1:     File segmentFolder = new File(path);
1:     Assert.assertTrue(segmentFolder.exists());
1: 
1:     File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
1:       @Override public boolean accept(File pathname) {
1:         return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
1:       }
1:     });
1:     Assert.assertNotNull(dataFiles);
1:     Assert.assertTrue(dataFiles.length > 0);
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
1:   @Test
1:   public void test2Blocklet() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
1:     writeFilesAndVerify(1000 * 1000, new Schema(fields), path, null, false, 1, 100);
1: 
1:     // TODO: implement reader to verify the number of blocklet in the file
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
1:   @Test
1:   public void test2Block() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
1:     writeFilesAndVerify(1000 * 1000, new Schema(fields), path, null, false, 2, 2);
1: 
1:     File segmentFolder = new File(path);
1:     File[] dataFiles = segmentFolder.listFiles(new FileFilter() {
1:       @Override public boolean accept(File pathname) {
1:         return pathname.getName().endsWith(CarbonCommonConstants.FACT_FILE_EXT);
1:       }
1:     });
1:     Assert.assertNotNull(dataFiles);
1:     Assert.assertEquals(2, dataFiles.length);
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
1:   @Test
1:   public void testSortColumns() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
1:     writeFilesAndVerify(new Schema(fields), path, new String[]{"name"});
1: 
1:     // TODO: implement reader and verify the data is sorted
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
1:   @Test
1:   public void testPartitionOutput() {
1:     // TODO: test write data with partition
1:   }
1: 
1:   @Test
1:   public void testSchemaPersistence() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
1:     writeFilesAndVerify(new Schema(fields), path, true);
1: 
1:     String schemaFile = CarbonTablePath.getSchemaFilePath(path);
1:     Assert.assertTrue(new File(schemaFile).exists());
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
1: }
============================================================================