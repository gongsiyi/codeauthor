1:edda248: /*
1:edda248:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:edda248:  * contributor license agreements.  See the NOTICE file distributed with
1:edda248:  * this work for additional information regarding copyright ownership.
1:edda248:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:edda248:  * (the "License"); you may not use this file except in compliance with
1:edda248:  * the License.  You may obtain a copy of the License at
1:edda248:  *
1:edda248:  *    http://www.apache.org/licenses/LICENSE-2.0
1:edda248:  *
1:edda248:  * Unless required by applicable law or agreed to in writing, software
1:edda248:  * distributed under the License is distributed on an "AS IS" BASIS,
1:edda248:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:edda248:  * See the License for the specific language governing permissions and
1:edda248:  * limitations under the License.
1:edda248:  */
1:edda248: 
1:edda248: package org.apache.carbondata.core.datastore.page;
1:edda248: 
1:6297ea0: import java.io.IOException;
1:53b92e5: import java.math.BigDecimal;
1:53b92e5: 
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:6f20437: import org.apache.carbondata.core.metadata.datatype.DecimalConverterFactory;
1:6f20437: 
1:edda248: /**
1:bc3e684:  * This is a decorator of column page, it performs decoding lazily (when caller calls getXXX
1:edda248:  * method to get the value from the page)
1:edda248:  */
1:53b92e5: public class LazyColumnPage extends ColumnPage {
1:edda248: 
1:edda248:   // decorated column page
1:edda248:   private ColumnPage columnPage;
1:edda248: 
1:edda248:   // encode that will apply to page data in getXXX
1:e6a4f64:   private ColumnPageValueConverter converter;
1:edda248: 
1:e6a4f64:   private LazyColumnPage(ColumnPage columnPage, ColumnPageValueConverter converter) {
1:8f08c4a:     super(columnPage.getColumnPageEncoderMeta(), columnPage.getPageSize());
1:edda248:     this.columnPage = columnPage;
1:e6a4f64:     this.converter = converter;
1:edda248:   }
1:edda248: 
1:e6a4f64:   public static ColumnPage newPage(ColumnPage columnPage, ColumnPageValueConverter codec) {
1:bc3e684:     return new LazyColumnPage(columnPage, codec);
1:edda248:   }
1:edda248: 
1:edda248:   @Override
1:edda248:   public String toString() {
1:e6a4f64:     return String.format("[converter: %s, data type: %s", converter, columnPage.getDataType());
1:edda248:   }
1:edda248: 
1:edda248:   @Override
1:edda248:   public long getLong(int rowId) {
1:956833e:     DataType dataType = columnPage.getDataType();
1:6abdd97:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
1:956833e:       return converter.decodeLong(columnPage.getByte(rowId));
1:956833e:     } else if (dataType == DataTypes.SHORT) {
1:956833e:       return converter.decodeLong(columnPage.getShort(rowId));
1:956833e:     } else if (dataType == DataTypes.SHORT_INT) {
1:956833e:       return converter.decodeLong(columnPage.getShortInt(rowId));
1:956833e:     } else if (dataType == DataTypes.INT) {
1:956833e:       return converter.decodeLong(columnPage.getInt(rowId));
1:956833e:     } else if (dataType == DataTypes.LONG) {
1:956833e:       return columnPage.getLong(rowId);
1:956833e:     } else {
1:956833e:       throw new RuntimeException("internal error: " + this.toString());
1:edda248:     }
1:edda248:   }
1:7359601: 
1:7359601:   @Override
1:edda248:   public double getDouble(int rowId) {
1:956833e:     DataType dataType = columnPage.getDataType();
1:6abdd97:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
1:956833e:       return converter.decodeDouble(columnPage.getByte(rowId));
1:956833e:     } else if (dataType == DataTypes.SHORT) {
1:956833e:       return converter.decodeDouble(columnPage.getShort(rowId));
1:956833e:     } else if (dataType == DataTypes.SHORT_INT) {
1:956833e:       return converter.decodeDouble(columnPage.getShortInt(rowId));
1:956833e:     } else if (dataType == DataTypes.INT) {
1:956833e:       return converter.decodeDouble(columnPage.getInt(rowId));
1:956833e:     } else if (dataType == DataTypes.LONG) {
1:956833e:       return converter.decodeDouble(columnPage.getLong(rowId));
1:956833e:     } else if (dataType == DataTypes.FLOAT) {
1:956833e:       return converter.decodeDouble(columnPage.getFloat(rowId));
1:956833e:     } else if (dataType == DataTypes.DOUBLE) {
1:956833e:       return columnPage.getDouble(rowId);
1:956833e:     } else {
1:956833e:       throw new RuntimeException("internal error: " + this.toString());
1:edda248:     }
1:edda248:   }
1:edda248: 
1:edda248:   @Override
1:53b92e5:   public float getFloat(int rowId) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public BigDecimal getDecimal(int rowId) {
1:6f20437:     DecimalConverterFactory.DecimalConverter decimalConverter =
1:6f20437:         ((DecimalColumnPage) columnPage).getDecimalConverter();
1:956833e:     DataType dataType = columnPage.getDataType();
2:956833e:     if (dataType == DataTypes.BYTE) {
1:956833e:       return decimalConverter.getDecimal(converter.decodeLong(columnPage.getByte(rowId)));
1:956833e:     } else if (dataType == DataTypes.SHORT) {
1:956833e:       return decimalConverter.getDecimal(converter.decodeLong(columnPage.getShort(rowId)));
1:956833e:     } else if (dataType == DataTypes.SHORT_INT) {
1:956833e:       return decimalConverter.getDecimal(converter.decodeLong(columnPage.getShortInt(rowId)));
1:956833e:     } else if (dataType == DataTypes.INT) {
1:956833e:       return decimalConverter.getDecimal(converter.decodeLong(columnPage.getInt(rowId)));
1:f209e8e:     } else if (dataType == DataTypes.LONG || DataTypes.isDecimal(dataType)) {
1:956833e:       return columnPage.getDecimal(rowId);
1:956833e:     } else {
1:956833e:       throw new RuntimeException("internal error: " + this.toString());
1:6f20437:     }
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:e6a4f64:   public byte[] getBytes(int rowId) {
1:e6a4f64:     return columnPage.getBytes(rowId);
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:53b92e5:   public byte[] getBytePage() {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public short[] getShortPage() {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public byte[] getShortIntPage() {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public int[] getIntPage() {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public long[] getLongPage() {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public float[] getFloatPage() {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public double[] getDoublePage() {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public byte[][] getByteArrayPage() {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:9e064ee:   public void putDecimal(int rowId, BigDecimal decimal) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:9e064ee:   public byte[] getDecimalPage() {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:6297ea0:   public byte[] getLVFlattenedBytePage() throws IOException {
1:6297ea0:     throw new UnsupportedOperationException("internal error");
1:6297ea0:   }
1:6297ea0: 
1:6297ea0:   @Override
1:6297ea0:   public byte[] getComplexChildrenLVFlattenedBytePage() {
1:6297ea0:     throw new UnsupportedOperationException("internal error");
1:6297ea0:   }
1:6297ea0: 
1:6297ea0:   @Override
1:6297ea0:   public byte[] getComplexParentFlattenedBytePage() throws IOException {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:edda248:   }
1:9e064ee: 
1:9e064ee:   @Override
1:e6a4f64:   public void convertValue(ColumnPageValueConverter codec) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:9e064ee:   }
1:9e064ee: 
1:9e064ee:   @Override
1:53b92e5:   public void setBytePage(byte[] byteData) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void setShortPage(short[] shortData) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void setShortIntPage(byte[] shortIntData) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void setIntPage(int[] intData) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void setLongPage(long[] longData) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void setFloatPage(float[] floatData) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void setDoublePage(double[] doubleData) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void setByteArrayPage(byte[][] byteArray) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:7359601:   public void freeMemory() {
1:7359601:     columnPage.freeMemory();
1:7359601:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void putByte(int rowId, byte value) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void putShort(int rowId, short value) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void putInt(int rowId, int value) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void putLong(int rowId, long value) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void putDouble(int rowId, double value) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void putBytes(int rowId, byte[] bytes) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void putShortInt(int rowId, int value) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public void putBytes(int rowId, byte[] bytes, int offset, int length) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public byte getByte(int rowId) {
1:0647348:     return columnPage.getByte(rowId);
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public short getShort(int rowId) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public int getShortInt(int rowId) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:53b92e5: 
1:53b92e5:   @Override
1:53b92e5:   public int getInt(int rowId) {
1:53b92e5:     throw new UnsupportedOperationException("internal error");
1:53b92e5:   }
1:9e064ee: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:     super(columnPage.getColumnPageEncoderMeta(), columnPage.getPageSize());
author:kumarvishal09
-------------------------------------------------------------------------------
commit:6297ea0
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getLVFlattenedBytePage() throws IOException {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public byte[] getComplexChildrenLVFlattenedBytePage() {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public byte[] getComplexParentFlattenedBytePage() throws IOException {
author:xubo245
-------------------------------------------------------------------------------
commit:0647348
/////////////////////////////////////////////////////////////////////////
1:     return columnPage.getByte(rowId);
commit:6abdd97
/////////////////////////////////////////////////////////////////////////
1:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
/////////////////////////////////////////////////////////////////////////
1:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
1:     } else if (dataType == DataTypes.LONG || DataTypes.isDecimal(dataType)) {
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     DataType dataType = columnPage.getDataType();
1:     if (dataType == DataTypes.BYTE) {
1:       return converter.decodeLong(columnPage.getByte(rowId));
1:     } else if (dataType == DataTypes.SHORT) {
1:       return converter.decodeLong(columnPage.getShort(rowId));
1:     } else if (dataType == DataTypes.SHORT_INT) {
1:       return converter.decodeLong(columnPage.getShortInt(rowId));
1:     } else if (dataType == DataTypes.INT) {
1:       return converter.decodeLong(columnPage.getInt(rowId));
1:     } else if (dataType == DataTypes.LONG) {
1:       return columnPage.getLong(rowId);
1:     } else {
1:       throw new RuntimeException("internal error: " + this.toString());
1:     DataType dataType = columnPage.getDataType();
1:     if (dataType == DataTypes.BYTE) {
1:       return converter.decodeDouble(columnPage.getByte(rowId));
1:     } else if (dataType == DataTypes.SHORT) {
1:       return converter.decodeDouble(columnPage.getShort(rowId));
1:     } else if (dataType == DataTypes.SHORT_INT) {
1:       return converter.decodeDouble(columnPage.getShortInt(rowId));
1:     } else if (dataType == DataTypes.INT) {
1:       return converter.decodeDouble(columnPage.getInt(rowId));
1:     } else if (dataType == DataTypes.LONG) {
1:       return converter.decodeDouble(columnPage.getLong(rowId));
1:     } else if (dataType == DataTypes.FLOAT) {
1:       return converter.decodeDouble(columnPage.getFloat(rowId));
1:     } else if (dataType == DataTypes.DOUBLE) {
1:       return columnPage.getDouble(rowId);
1:     } else {
1:       throw new RuntimeException("internal error: " + this.toString());
/////////////////////////////////////////////////////////////////////////
1:     DataType dataType = columnPage.getDataType();
0:     if (dataType == DataTypes.BYTE) {
1:       return decimalConverter.getDecimal(converter.decodeLong(columnPage.getByte(rowId)));
1:     } else if (dataType == DataTypes.SHORT) {
1:       return decimalConverter.getDecimal(converter.decodeLong(columnPage.getShort(rowId)));
1:     } else if (dataType == DataTypes.SHORT_INT) {
1:       return decimalConverter.getDecimal(converter.decodeLong(columnPage.getShortInt(rowId)));
1:     } else if (dataType == DataTypes.INT) {
1:       return decimalConverter.getDecimal(converter.decodeLong(columnPage.getInt(rowId)));
0:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.DECIMAL) {
1:       return columnPage.getDecimal(rowId);
1:     } else {
1:       throw new RuntimeException("internal error: " + this.toString());
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
0:     super(columnPage.getColumnSpec(), columnPage.getDataType(), columnPage.getPageSize());
/////////////////////////////////////////////////////////////////////////
0:   public byte[] getLVFlattenedBytePage() {
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1:   private ColumnPageValueConverter converter;
1:   private LazyColumnPage(ColumnPage columnPage, ColumnPageValueConverter converter) {
1:     this.converter = converter;
1:   public static ColumnPage newPage(ColumnPage columnPage, ColumnPageValueConverter codec) {
1:     return String.format("[converter: %s, data type: %s", converter, columnPage.getDataType());
0:         return converter.decodeLong(columnPage.getByte(rowId));
0:         return converter.decodeLong(columnPage.getShort(rowId));
0:         return converter.decodeLong(columnPage.getShortInt(rowId));
0:         return converter.decodeLong(columnPage.getInt(rowId));
/////////////////////////////////////////////////////////////////////////
0:         return converter.decodeDouble(columnPage.getByte(rowId));
0:         return converter.decodeDouble(columnPage.getShort(rowId));
0:         return converter.decodeDouble(columnPage.getShortInt(rowId));
0:         return converter.decodeDouble(columnPage.getInt(rowId));
0:         return converter.decodeDouble(columnPage.getLong(rowId));
0:         return converter.decodeDouble(columnPage.getFloat(rowId));
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getBytes(int rowId) {
1:     return columnPage.getBytes(rowId);
1:   }
1: 
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   public void convertValue(ColumnPageValueConverter codec) {
author:manishgupta88
-------------------------------------------------------------------------------
commit:6f20437
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DecimalConverterFactory;
1: 
/////////////////////////////////////////////////////////////////////////
1:     DecimalConverterFactory.DecimalConverter decimalConverter =
1:         ((DecimalColumnPage) columnPage).getDecimalConverter();
0:     switch (columnPage.getDataType()) {
0:       case BYTE:
0:         return decimalConverter.getDecimal(converter.decodeLong(columnPage.getByte(rowId)));
0:       case SHORT:
0:         return decimalConverter.getDecimal(converter.decodeLong(columnPage.getShort(rowId)));
0:       case SHORT_INT:
0:         return decimalConverter.getDecimal(converter.decodeLong(columnPage.getShortInt(rowId)));
0:       case INT:
0:         return decimalConverter.getDecimal(converter.decodeLong(columnPage.getInt(rowId)));
0:       case LONG:
0:       case DECIMAL:
0:         return columnPage.getDecimal(rowId);
0:       default:
0:         throw new RuntimeException("internal error: " + this.toString());
1:     }
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1:  * This is a decorator of column page, it performs decoding lazily (when caller calls getXXX
/////////////////////////////////////////////////////////////////////////
0:   public static ColumnPage newPage(ColumnPage columnPage, PrimitiveCodec codec) {
1:     return new LazyColumnPage(columnPage, codec);
/////////////////////////////////////////////////////////////////////////
0:     return columnPage.getDecimal(rowId);
commit:53b92e5
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigDecimal;
1: 
1: public class LazyColumnPage extends ColumnPage {
/////////////////////////////////////////////////////////////////////////
1:   public float getFloat(int rowId) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public BigDecimal getDecimal(int rowId) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public byte[] getBytePage() {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public short[] getShortPage() {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public byte[] getShortIntPage() {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public int[] getIntPage() {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public long[] getLongPage() {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public float[] getFloatPage() {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public double[] getDoublePage() {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public byte[][] getByteArrayPage() {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
0:   public byte[] getFlattenedBytePage() {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
0:   public void encode(PrimitiveCodec codec) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void setBytePage(byte[] byteData) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void setShortPage(short[] shortData) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void setShortIntPage(byte[] shortIntData) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void setIntPage(int[] intData) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void setLongPage(long[] longData) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void setFloatPage(float[] floatData) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void setDoublePage(double[] doubleData) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void setByteArrayPage(byte[][] byteArray) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1: 
1:   @Override
1:   public void putByte(int rowId, byte value) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void putShort(int rowId, short value) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void putInt(int rowId, int value) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void putLong(int rowId, long value) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void putDouble(int rowId, double value) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void putBytes(int rowId, byte[] bytes) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void putShortInt(int rowId, int value) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public void putBytes(int rowId, byte[] bytes, int offset, int length) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public byte getByte(int rowId) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public short getShort(int rowId) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public int getShortInt(int rowId) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public int getInt(int rowId) {
1:     throw new UnsupportedOperationException("internal error");
1:   }
commit:7d386a4
/////////////////////////////////////////////////////////////////////////
0:       case SHORT_INT:
0:         return codec.decodeLong(columnPage.getShortInt(rowId));
/////////////////////////////////////////////////////////////////////////
0:       case SHORT_INT:
0:         return codec.decodeDouble(columnPage.getShortInt(rowId));
commit:7359601
/////////////////////////////////////////////////////////////////////////
0: public class LazyColumnPage extends SafeFixLengthColumnPage {
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public void freeMemory() {
1:     columnPage.freeMemory();
1:   }
commit:edda248
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page;
1: 
1: /**
0:  * This is a decorator of column page, it performs transformation lazily (when caller calls getXXX
1:  * method to get the value from the page)
1:  */
0: public class LazyColumnPage extends ColumnPage {
1: 
1:   // decorated column page
1:   private ColumnPage columnPage;
1: 
1:   // encode that will apply to page data in getXXX
0:   private PrimitiveCodec codec;
1: 
0:   private LazyColumnPage(ColumnPage columnPage, PrimitiveCodec codec) {
0:     super(columnPage.getDataType(), columnPage.getPageSize());
1:     this.columnPage = columnPage;
0:     this.codec = codec;
1:   }
1: 
0:   public static ColumnPage newPage(ColumnPage columnPage, PrimitiveCodec transform) {
0:     return new LazyColumnPage(columnPage, transform);
1:   }
1: 
1:   @Override
1:   public String toString() {
0:     return String.format("[encode: %s, data type: %s", codec, columnPage.getDataType());
1:   }
1: 
1:   @Override
1:   public long getLong(int rowId) {
0:     switch (columnPage.getDataType()) {
0:       case BYTE:
0:         return codec.decodeLong(columnPage.getByte(rowId));
0:       case SHORT:
0:         return codec.decodeLong(columnPage.getShort(rowId));
0:       case INT:
0:         return codec.decodeLong(columnPage.getInt(rowId));
0:       case LONG:
0:         return columnPage.getLong(rowId);
0:       default:
0:         throw new RuntimeException("internal error: " + this.toString());
1:     }
1:   }
1: 
1:   @Override
1:   public double getDouble(int rowId) {
0:     switch (columnPage.getDataType()) {
0:       case BYTE:
0:         return codec.decodeDouble(columnPage.getByte(rowId));
0:       case SHORT:
0:         return codec.decodeDouble(columnPage.getShort(rowId));
0:       case INT:
0:         return codec.decodeDouble(columnPage.getInt(rowId));
0:       case LONG:
0:         return codec.decodeDouble(columnPage.getLong(rowId));
0:       case FLOAT:
0:         return codec.decodeDouble(columnPage.getFloat(rowId));
0:       case DOUBLE:
0:         return columnPage.getDouble(rowId);
0:       default:
0:         throw new RuntimeException("internal error: " + this.toString());
1:     }
1:   }
1: }
author:ravipesala
-------------------------------------------------------------------------------
commit:9e064ee
/////////////////////////////////////////////////////////////////////////
0:     super(columnPage.getDataType(), columnPage.getPageSize(), columnPage.scale,
0:         columnPage.precision);
/////////////////////////////////////////////////////////////////////////
1:   public void putDecimal(int rowId, BigDecimal decimal) {
0:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
1:   public byte[] getDecimalPage() {
0:     throw new UnsupportedOperationException("internal error");
1:   }
1: 
1:   @Override
============================================================================