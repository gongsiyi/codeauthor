1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.core.writer.sortindex;
2:cd6a4ff: 
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: import java.util.Arrays;
1:cd6a4ff: import java.util.Comparator;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.common.logging.LogService;
1:cd6a4ff: import org.apache.carbondata.common.logging.LogServiceFactory;
1:d3a09e2: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:ce09aaa: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1:ce09aaa: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonProperties;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonUtil;
1:ce09aaa: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:cd6a4ff: import org.apache.carbondata.core.writer.ThriftWriter;
1:cd6a4ff: import org.apache.carbondata.format.ColumnSortInfo;
1:cd6a4ff: 
3:cd6a4ff: /**
1:cd6a4ff:  * The class responsible for writing the dictionary/column sort index and sort index inverted data
1:cd6a4ff:  * in the thrift format
1:cd6a4ff:  */
1:cd6a4ff: public class CarbonDictionarySortIndexWriterImpl implements CarbonDictionarySortIndexWriter {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * column name
1:cd6a4ff:    */
1:d3a09e2:   protected DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Path of dictionary sort index file for which the sortIndex to be written
1:cd6a4ff:    */
1:cd6a4ff:   protected String sortIndexFilePath;
1:cd6a4ff:   /**
1:cd6a4ff:    * Instance of thrift writer to write the data
1:cd6a4ff:    */
1:cd6a4ff:   private ThriftWriter sortIndexThriftWriter;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Column sort info thrift instance.
1:cd6a4ff:    */
1:cd6a4ff:   private ColumnSortInfo columnSortInfo = new ColumnSortInfo();
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Comment for <code>LOGGER</code>
1:cd6a4ff:    */
1:cd6a4ff:   private static final LogService LOGGER =
1:cd6a4ff:       LogServiceFactory.getLogService(CarbonDictionarySortIndexWriterImpl.class.getName());
1:cd6a4ff: 
1:cd6a4ff:   /**
1:d3a09e2:    * @param dictionaryColumnUniqueIdentifier      column unique identifier
1:cd6a4ff:    */
1:1155d4d:   public CarbonDictionarySortIndexWriterImpl(
1:1155d4d:       final DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:d3a09e2:     this.dictionaryColumnUniqueIdentifier = dictionaryColumnUniqueIdentifier;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method is used populate the dictionary sortIndex data to columnSortInfo
1:cd6a4ff:    * in thrif format.
1:cd6a4ff:    *
1:cd6a4ff:    * @param sortIndexList list of sortIndex
1:cd6a4ff:    * @throws IOException In Case of any I/O errors occurs.
1:cd6a4ff:    */
1:eaadc88:   @Override public void writeSortIndex(List<Integer> sortIndexList) {
1:cd6a4ff:     columnSortInfo.setSort_index(sortIndexList);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method is used populate the dictionary Inverted sortIndex data to columnSortInfo
1:cd6a4ff:    * in thrif format.
1:cd6a4ff:    *
1:cd6a4ff:    * @param invertedSortIndexList list of  sortIndexInverted
1:cd6a4ff:    * @throws IOException In Case of any I/O errors occurs.
1:cd6a4ff:    */
1:eaadc88:   @Override public void writeInvertedSortIndex(List<Integer> invertedSortIndexList) {
1:cd6a4ff:     columnSortInfo.setSort_index_inverted(invertedSortIndexList);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Initialize the sortIndexFilePath and open writing stream
1:cd6a4ff:    * for dictionary sortIndex file thrif writer
1:cd6a4ff:    * write the column sort info to the store when both sort index  and sort index
1:cd6a4ff:    * inverted are populated.
1:cd6a4ff:    * existing sort index file has to be overwritten with new sort index data
1:cd6a4ff:    * columnSortInfo having null sortIndex and invertedSortIndex will not be written
1:cd6a4ff:    */
1:cd6a4ff:   private void writeColumnSortInfo() throws IOException {
1:cd6a4ff:     boolean isNotNull =
1:cd6a4ff:         null != columnSortInfo.getSort_index() && null != columnSortInfo.sort_index_inverted;
1:cd6a4ff:     if (isNotNull) {
1:cd6a4ff:       initPath();
1:cd6a4ff:       String folderContainingFile = CarbonTablePath.getFolderContainingFile(this.sortIndexFilePath);
1:cd6a4ff:       boolean created = CarbonUtil.checkAndCreateFolder(folderContainingFile);
1:cd6a4ff:       if (!created) {
1:cd6a4ff:         LOGGER.error("Database metadata folder creation status :: " + created);
1:cd6a4ff:         throw new IOException("Failed to created database metadata folder");
1:cd6a4ff:       }
1:cd6a4ff:       try {
1:cd6a4ff: 
1:cd6a4ff:         this.sortIndexThriftWriter = new ThriftWriter(this.sortIndexFilePath, false);
1:cd6a4ff:         this.sortIndexThriftWriter.open();
1:cd6a4ff:         sortIndexThriftWriter.write(columnSortInfo);
1:cd6a4ff:       } catch (IOException ie) {
1:cd6a4ff:         LOGGER.error(ie,
1:cd6a4ff:             "problem while writing the dictionary sort index file.");
1:cd6a4ff:         throw new IOException("problem while writing the dictionary sort index file.", ie);
1:cd6a4ff:       } finally {
1:cd6a4ff:         if (null != sortIndexThriftWriter) {
1:cd6a4ff:           this.sortIndexThriftWriter.close();
1:cd6a4ff:         }
1:cd6a4ff:         this.sortIndexFilePath = null;
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   protected void initPath() {
1:29dc302:     String dictionaryFilePath = dictionaryColumnUniqueIdentifier.getDictionaryFilePath();
1:29dc302:     long dictOffset = CarbonUtil.getFileSize(dictionaryFilePath);
1:29dc302:     this.sortIndexFilePath = dictionaryColumnUniqueIdentifier.getSortIndexFilePath(dictOffset);
1:29dc302:     cleanUpOldSortIndex(dictionaryFilePath);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * It cleans up old unused sortindex file
1:cd6a4ff:    *
1:29dc302:    * @param dictPath
1:cd6a4ff:    */
1:29dc302:   protected void cleanUpOldSortIndex(String dictPath) {
1:29dc302:     CarbonFile dictFile = FileFactory.getCarbonFile(dictPath, FileFactory.getFileType(dictPath));
1:29dc302:     CarbonFile[] files = CarbonTablePath.getSortIndexFiles(dictFile.getParentFile(),
1:d3a09e2:         dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());
1:cd6a4ff:     int maxTime;
1:cd6a4ff:     try {
1:cd6a4ff:       maxTime = Integer.parseInt(CarbonProperties.getInstance()
1:cd6a4ff:           .getProperty(CarbonCommonConstants.MAX_QUERY_EXECUTION_TIME));
1:cd6a4ff:     } catch (NumberFormatException e) {
1:cd6a4ff:       maxTime = CarbonCommonConstants.DEFAULT_MAX_QUERY_EXECUTION_TIME;
1:cd6a4ff:     }
1:cd6a4ff:     if (null != files) {
1:cd6a4ff:       Arrays.sort(files, new Comparator<CarbonFile>() {
1:cd6a4ff:         @Override public int compare(CarbonFile o1, CarbonFile o2) {
1:cd6a4ff:           return o1.getName().compareTo(o2.getName());
1:cd6a4ff:         }
1:cd6a4ff:       });
1:cd6a4ff:       for (int i = 0; i < files.length - 1; i++) {
1:cd6a4ff:         long difference = System.currentTimeMillis() - files[i].getLastModifiedTime();
1:cd6a4ff:         long minutesElapsed = (difference / (1000 * 60));
1:cd6a4ff:         if (minutesElapsed > maxTime) {
1:cd6a4ff:           if (!files[i].delete()) {
1:cd6a4ff:             LOGGER.warn("Failed to delete sortindex file." + files[i].getAbsolutePath());
1:cd6a4ff:           } else {
1:cd6a4ff:             LOGGER.info("Sort index file is deleted." + files[i].getAbsolutePath());
1:cd6a4ff:           }
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Closes this stream and releases any system resources associated
1:cd6a4ff:    * with it. If the stream is already closed then invoking this
1:cd6a4ff:    * method has no effect.
1:cd6a4ff:    *
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void close() throws IOException {
1:cd6a4ff:     writeColumnSortInfo();
1:cd6a4ff:     if (null != sortIndexThriftWriter) {
1:cd6a4ff:       sortIndexThriftWriter.close();
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:29dc302
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     String dictionaryFilePath = dictionaryColumnUniqueIdentifier.getDictionaryFilePath();
1:     long dictOffset = CarbonUtil.getFileSize(dictionaryFilePath);
1:     this.sortIndexFilePath = dictionaryColumnUniqueIdentifier.getSortIndexFilePath(dictOffset);
1:     cleanUpOldSortIndex(dictionaryFilePath);
1:    * @param dictPath
1:   protected void cleanUpOldSortIndex(String dictPath) {
1:     CarbonFile dictFile = FileFactory.getCarbonFile(dictPath, FileFactory.getFileType(dictPath));
1:     CarbonFile[] files = CarbonTablePath.getSortIndexFiles(dictFile.getParentFile(),
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public CarbonDictionarySortIndexWriterImpl(
1:       final DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
/////////////////////////////////////////////////////////////////////////
0:         .getCarbonTablePath(dictionaryColumnUniqueIdentifier.getAbsoluteCarbonTableIdentifier(),
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
1:   protected DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
1:    * @param dictionaryColumnUniqueIdentifier      column unique identifier
0:       final DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier,
0:       final String carbonStorePath) {
1:     this.dictionaryColumnUniqueIdentifier = dictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
0:         .getCarbonTablePath(carbonStorePath, carbonTableIdentifier,
0:             dictionaryColumnUniqueIdentifier);
0:     String dictionaryPath = carbonTablePath.getDictionaryFilePath(
1:         dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());
0:     this.sortIndexFilePath = carbonTablePath
0:         .getSortIndexFilePath(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),
0:             dictOffset);
/////////////////////////////////////////////////////////////////////////
0:     CarbonFile[] files = carbonTablePath.getSortIndexFiles(dictFile.getParentFile(),
0:         dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
0: import org.apache.carbondata.core.metadata.ColumnIdentifier;
0: import org.apache.carbondata.core.service.CarbonCommonFactory;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1:   @Override public void writeSortIndex(List<Integer> sortIndexList) {
/////////////////////////////////////////////////////////////////////////
1:   @Override public void writeInvertedSortIndex(List<Integer> invertedSortIndexList) {
author:hexiaoqiao
-------------------------------------------------------------------------------
commit:77c90b8
/////////////////////////////////////////////////////////////////////////
0:         .getCarbonTablePath(carbonStorePath, carbonTableIdentifier);
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.writer.sortindex;
1: 
1: import java.io.IOException;
1: import java.util.Arrays;
1: import java.util.Comparator;
1: import java.util.List;
1: 
0: import org.apache.carbondata.common.factory.CarbonCommonFactory;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.carbon.path.CarbonTablePath;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.datastorage.store.filesystem.CarbonFile;
0: import org.apache.carbondata.core.datastorage.store.impl.FileFactory;
0: import org.apache.carbondata.core.service.PathService;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.apache.carbondata.core.writer.ThriftWriter;
1: import org.apache.carbondata.format.ColumnSortInfo;
1: 
1: /**
1:  * The class responsible for writing the dictionary/column sort index and sort index inverted data
1:  * in the thrift format
1:  */
1: public class CarbonDictionarySortIndexWriterImpl implements CarbonDictionarySortIndexWriter {
1: 
1:   /**
0:    * carbonTable Identifier holding the info of databaseName and tableName
1:    */
0:   protected CarbonTableIdentifier carbonTableIdentifier;
1: 
1:   /**
1:    * column name
1:    */
0:   protected ColumnIdentifier columnIdentifier;
1: 
1:   /**
0:    * carbon store location
1:    */
0:   protected String carbonStorePath;
1:   /**
1:    * Path of dictionary sort index file for which the sortIndex to be written
1:    */
1:   protected String sortIndexFilePath;
1:   /**
1:    * Instance of thrift writer to write the data
1:    */
1:   private ThriftWriter sortIndexThriftWriter;
1: 
1:   /**
1:    * Column sort info thrift instance.
1:    */
1:   private ColumnSortInfo columnSortInfo = new ColumnSortInfo();
1: 
1:   /**
1:    * Comment for <code>LOGGER</code>
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(CarbonDictionarySortIndexWriterImpl.class.getName());
1: 
1:   /**
0:    * @param carbonStorePath       Carbon store path
0:    * @param carbonTableIdentifier table identifier which will give table name and database name
0:    * @param columnIdentifier      column unique identifier
1:    */
0:   public CarbonDictionarySortIndexWriterImpl(final CarbonTableIdentifier carbonTableIdentifier,
0:       final ColumnIdentifier columnIdentifier, final String carbonStorePath) {
0:     this.carbonTableIdentifier = carbonTableIdentifier;
0:     this.columnIdentifier = columnIdentifier;
0:     this.carbonStorePath = carbonStorePath;
1:   }
1: 
1:   /**
1:    * The method is used populate the dictionary sortIndex data to columnSortInfo
1:    * in thrif format.
1:    *
1:    * @param sortIndexList list of sortIndex
1:    * @throws IOException In Case of any I/O errors occurs.
1:    */
0:   @Override public void writeSortIndex(List<Integer> sortIndexList) throws IOException {
1:     columnSortInfo.setSort_index(sortIndexList);
1:   }
1: 
1:   /**
1:    * The method is used populate the dictionary Inverted sortIndex data to columnSortInfo
1:    * in thrif format.
1:    *
1:    * @param invertedSortIndexList list of  sortIndexInverted
1:    * @throws IOException In Case of any I/O errors occurs.
1:    */
0:   @Override public void writeInvertedSortIndex(List<Integer> invertedSortIndexList)
0:       throws IOException {
1:     columnSortInfo.setSort_index_inverted(invertedSortIndexList);
1:   }
1: 
1:   /**
1:    * Initialize the sortIndexFilePath and open writing stream
1:    * for dictionary sortIndex file thrif writer
1:    * write the column sort info to the store when both sort index  and sort index
1:    * inverted are populated.
1:    * existing sort index file has to be overwritten with new sort index data
1:    * columnSortInfo having null sortIndex and invertedSortIndex will not be written
1:    */
1:   private void writeColumnSortInfo() throws IOException {
1:     boolean isNotNull =
1:         null != columnSortInfo.getSort_index() && null != columnSortInfo.sort_index_inverted;
1:     if (isNotNull) {
1:       initPath();
1:       String folderContainingFile = CarbonTablePath.getFolderContainingFile(this.sortIndexFilePath);
1:       boolean created = CarbonUtil.checkAndCreateFolder(folderContainingFile);
1:       if (!created) {
1:         LOGGER.error("Database metadata folder creation status :: " + created);
1:         throw new IOException("Failed to created database metadata folder");
1:       }
1:       try {
1: 
1:         this.sortIndexThriftWriter = new ThriftWriter(this.sortIndexFilePath, false);
1:         this.sortIndexThriftWriter.open();
1:         sortIndexThriftWriter.write(columnSortInfo);
1:       } catch (IOException ie) {
1:         LOGGER.error(ie,
1:             "problem while writing the dictionary sort index file.");
1:         throw new IOException("problem while writing the dictionary sort index file.", ie);
1:       } finally {
1:         if (null != sortIndexThriftWriter) {
1:           this.sortIndexThriftWriter.close();
1:         }
1:         this.sortIndexFilePath = null;
1:       }
1:     }
1:   }
1: 
1:   protected void initPath() {
0:     PathService pathService = CarbonCommonFactory.getPathService();
0:     CarbonTablePath carbonTablePath = pathService
0:         .getCarbonTablePath(columnIdentifier, carbonStorePath, carbonTableIdentifier);
0:     String dictionaryPath = carbonTablePath.getDictionaryFilePath(columnIdentifier.getColumnId());
0:     long dictOffset = CarbonUtil.getFileSize(dictionaryPath);
0:     this.sortIndexFilePath =
0:         carbonTablePath.getSortIndexFilePath(columnIdentifier.getColumnId(), dictOffset);
0:     cleanUpOldSortIndex(carbonTablePath, dictionaryPath);
1:   }
1: 
1:   /**
1:    * It cleans up old unused sortindex file
1:    *
0:    * @param carbonTablePath
1:    */
0:   protected void cleanUpOldSortIndex(CarbonTablePath carbonTablePath, String dictPath) {
0:     CarbonFile dictFile =
0:         FileFactory.getCarbonFile(dictPath, FileFactory.getFileType(dictPath));
0:     CarbonFile[] files =
0:         carbonTablePath.getSortIndexFiles(dictFile.getParentFile(),
0:             columnIdentifier.getColumnId());
1:     int maxTime;
1:     try {
1:       maxTime = Integer.parseInt(CarbonProperties.getInstance()
1:           .getProperty(CarbonCommonConstants.MAX_QUERY_EXECUTION_TIME));
1:     } catch (NumberFormatException e) {
1:       maxTime = CarbonCommonConstants.DEFAULT_MAX_QUERY_EXECUTION_TIME;
1:     }
1:     if (null != files) {
1:       Arrays.sort(files, new Comparator<CarbonFile>() {
1:         @Override public int compare(CarbonFile o1, CarbonFile o2) {
1:           return o1.getName().compareTo(o2.getName());
1:         }
1:       });
1:       for (int i = 0; i < files.length - 1; i++) {
1:         long difference = System.currentTimeMillis() - files[i].getLastModifiedTime();
1:         long minutesElapsed = (difference / (1000 * 60));
1:         if (minutesElapsed > maxTime) {
1:           if (!files[i].delete()) {
1:             LOGGER.warn("Failed to delete sortindex file." + files[i].getAbsolutePath());
1:           } else {
1:             LOGGER.info("Sort index file is deleted." + files[i].getAbsolutePath());
1:           }
1:         }
1:       }
1:     }
1:   }
1: 
1:   /**
1:    * Closes this stream and releases any system resources associated
1:    * with it. If the stream is already closed then invoking this
1:    * method has no effect.
1:    *
1:    * @throws IOException if an I/O error occurs
1:    */
1:   @Override public void close() throws IOException {
1:     writeColumnSortInfo();
1:     if (null != sortIndexThriftWriter) {
1:       sortIndexThriftWriter.close();
1:     }
1:   }
1: }
============================================================================