1:d96f09a: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:d96f09a:  *
1:d96f09a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d96f09a:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:d96f09a:  */
1:349c59c: package org.apache.carbondata.processing.loading.converter.impl;
1:d96f09a: 
1:d96f09a: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:dc83b2a: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:ce09aaa: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:d96f09a: import org.apache.carbondata.core.util.DataTypeUtil;
1:349c59c: import org.apache.carbondata.processing.loading.DataField;
1:349c59c: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
1:349c59c: import org.apache.carbondata.processing.loading.converter.FieldConverter;
1:943588d: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1:4a79a86: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1:d96f09a: 
1:d96f09a: public class NonDictionaryFieldConverterImpl implements FieldConverter {
1:d96f09a: 
1:d96f09a:   private DataType dataType;
1:d96f09a: 
1:d96f09a:   private int index;
1:d96f09a: 
1:496cde4:   private String nullformat;
1:496cde4: 
1:496cde4:   private CarbonColumn column;
1:496cde4: 
1:3251c89:   private boolean isEmptyBadRecord;
1:d96f09a: 
1:36ceb59:   private DataField dataField;
1:36ceb59: 
1:3251c89:   public NonDictionaryFieldConverterImpl(DataField dataField, String nullformat, int index,
1:3251c89:       boolean isEmptyBadRecord) {
1:36ceb59:     this.dataField = dataField;
1:d96f09a:     this.dataType = dataField.getColumn().getDataType();
1:496cde4:     this.column = dataField.getColumn();
1:d96f09a:     this.index = index;
1:496cde4:     this.nullformat = nullformat;
1:3251c89:     this.isEmptyBadRecord = isEmptyBadRecord;
1:d96f09a:   }
1:d96f09a: 
1:9f94529:   @Override public void convert(CarbonRow row, BadRecordLogHolder logHolder) {
1:d96f09a:     String dimensionValue = row.getString(index);
1:cd7c210:     row.update(convert(dimensionValue, logHolder), index);
1:cd7c210:   }
1:cd7c210: 
1:cd7c210:   @Override
1:cd7c210:   public Object convert(Object value, BadRecordLogHolder logHolder)
1:cd7c210:       throws RuntimeException {
1:cd7c210:     String dimensionValue = (String) value;
1:956833e:     if (null == dimensionValue && column.getDataType() != DataTypes.STRING) {
1:496cde4:       logHolder.setReason(
1:36ceb59:           CarbonDataProcessorUtil.prepareFailureReason(column.getColName(), column.getDataType()));
1:cd7c210:       return getNullValue();
1:36ceb59:     } else if (dimensionValue == null || dimensionValue.equals(nullformat)) {
1:cd7c210:       return getNullValue();
2:9f94529:     } else {
1:85dc4ff:       String dateFormat = null;
1:85dc4ff:       if (dataType == DataTypes.DATE) {
1:85dc4ff:         dateFormat = dataField.getDateFormat();
1:85dc4ff:       } else if (dataType == DataTypes.TIMESTAMP) {
1:85dc4ff:         dateFormat = dataField.getTimestampFormat();
1:496cde4:       }
1:9f94529:       try {
1:dded5d5:         if (!dataField.isUseActualData()) {
1:cd7c210:           byte[] parsedValue = DataTypeUtil
1:dded5d5:               .getBytesBasedOnDataTypeForNoDictionaryColumn(dimensionValue, dataType, dateFormat);
2:dded5d5:           if (dataType == DataTypes.STRING
1:cd7c210:               && parsedValue.length > CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT) {
1:dc53dee:             throw new CarbonDataLoadingException(String.format(
1:dc53dee:                 "Dataload failed, String size cannot exceed %d bytes,"
1:dc53dee:                     + " please consider long string data type",
1:dc53dee:                 CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT));
1:dded5d5:           }
1:cd7c210:           return parsedValue;
1:dded5d5:         } else {
1:cd7c210:           Object parsedValue = DataTypeUtil
1:dded5d5:               .getDataDataTypeForNoDictionaryColumn(dimensionValue, dataType, dateFormat);
1:cd7c210:           if (dataType == DataTypes.STRING && parsedValue.toString().length()
1:cd7c210:               > CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT) {
1:dc53dee:             throw new CarbonDataLoadingException(String.format(
1:dc53dee:                 "Dataload failed, String size cannot exceed %d bytes,"
1:dc53dee:                     + " please consider long string data type",
1:dc53dee:                 CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT));
1:dded5d5:           }
1:cd7c210:           return parsedValue;
1:d96f09a:         }
1:770deb8:       } catch (CarbonDataLoadingException e) {
1:770deb8:         throw e;
1:9f94529:       } catch (Throwable ex) {
1:36ceb59:         if (dimensionValue.length() > 0 || (dimensionValue.length() == 0 && isEmptyBadRecord)) {
1:4a79a86:           String message = logHolder.getColumnMessageMap().get(column.getColName());
1:4a79a86:           if (null == message) {
1:4a79a86:             message = CarbonDataProcessorUtil
1:4a79a86:                 .prepareFailureReason(column.getColName(), column.getDataType());
1:4a79a86:             logHolder.getColumnMessageMap().put(column.getColName(), message);
1:d96f09a:           }
1:4a79a86:           logHolder.setReason(message);
1:d96f09a:         }
1:d96f09a:       }
1:943588d:     }
1:cd7c210:     return getNullValue();
1:36ceb59:   }
1:36ceb59: 
1:f79b9ea:   @Override public void clear() {
1:36ceb59:   }
1:f79b9ea: 
1:cd7c210:   private byte[] getNullValue() {
1:dded5d5:     if (dataField.isUseActualData()) {
1:cd7c210:       return null;
1:dded5d5:     } else if (dataType == DataTypes.STRING) {
1:cd7c210:       return CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY;
1:36ceb59:     } else {
1:cd7c210:       return CarbonCommonConstants.EMPTY_BYTE_ARRAY;
1:f79b9ea:     }
1:85dc4ff:   }
1:4a79a86: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1:     row.update(convert(dimensionValue, logHolder), index);
1:   }
1: 
1:   @Override
1:   public Object convert(Object value, BadRecordLogHolder logHolder)
1:       throws RuntimeException {
1:     String dimensionValue = (String) value;
1:       return getNullValue();
1:       return getNullValue();
/////////////////////////////////////////////////////////////////////////
1:           byte[] parsedValue = DataTypeUtil
1:               && parsedValue.length > CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT) {
1:           return parsedValue;
1:           Object parsedValue = DataTypeUtil
1:           if (dataType == DataTypes.STRING && parsedValue.toString().length()
1:               > CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT) {
1:           return parsedValue;
/////////////////////////////////////////////////////////////////////////
1:     return getNullValue();
1:   private byte[] getNullValue() {
1:       return null;
1:       return CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY;
1:       return CarbonCommonConstants.EMPTY_BYTE_ARRAY;
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1:             throw new CarbonDataLoadingException(String.format(
1:                 "Dataload failed, String size cannot exceed %d bytes,"
1:                     + " please consider long string data type",
1:                 CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT));
/////////////////////////////////////////////////////////////////////////
1:             throw new CarbonDataLoadingException(String.format(
1:                 "Dataload failed, String size cannot exceed %d bytes,"
1:                     + " please consider long string data type",
1:                 CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT));
author:ravipesala
-------------------------------------------------------------------------------
commit:dded5d5
/////////////////////////////////////////////////////////////////////////
1:         if (!dataField.isUseActualData()) {
0:           byte[] value = DataTypeUtil
1:               .getBytesBasedOnDataTypeForNoDictionaryColumn(dimensionValue, dataType, dateFormat);
1:           if (dataType == DataTypes.STRING
0:               && value.length > CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT) {
0:             throw new CarbonDataLoadingException("Dataload failed, String size cannot exceed "
0:                 + CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT + " bytes");
1:           }
0:           row.update(value, index);
1:         } else {
0:           Object value = DataTypeUtil
1:               .getDataDataTypeForNoDictionaryColumn(dimensionValue, dataType, dateFormat);
1:           if (dataType == DataTypes.STRING
0:               && value.toString().length() > CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT) {
0:             throw new CarbonDataLoadingException("Dataload failed, String size cannot exceed "
0:                 + CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT + " bytes");
1:           }
0:           row.update(value, index);
/////////////////////////////////////////////////////////////////////////
1:     if (dataField.isUseActualData()) {
0:       row.update(null, index);
1:     } else if (dataType == DataTypes.STRING) {
commit:496cde4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonColumn;
0: import org.apache.carbondata.processing.newflow.converter.BadRecordLogHolder;
/////////////////////////////////////////////////////////////////////////
1:   private String nullformat;
1: 
1:   private CarbonColumn column;
1: 
0:   public NonDictionaryFieldConverterImpl(DataField dataField, String nullformat, int index) {
1:     this.column = dataField.getColumn();
1:     this.nullformat = nullformat;
0:   public void convert(CarbonRow row, BadRecordLogHolder logHolder) {
0:     if (dimensionValue == null || dimensionValue.equals(nullformat)) {
0:       dimensionValue = CarbonCommonConstants.MEMBER_DEFAULT_VAL;
1:     }
1:         logHolder.setReason(
0:             "The value " + " \"" + dimensionValue + "\"" + " with column name " + column
0:                 .getColName() + " and column data type " + dataType + " is not a valid " + dataType
0:                 + " type.");
commit:d96f09a
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.converter.impl;
1: 
0: import java.nio.charset.Charset;
1: 
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.DataTypeUtil;
0: import org.apache.carbondata.processing.newflow.DataField;
0: import org.apache.carbondata.processing.newflow.converter.FieldConverter;
0: import org.apache.carbondata.processing.newflow.row.CarbonRow;
1: 
1: public class NonDictionaryFieldConverterImpl implements FieldConverter {
1: 
1:   private DataType dataType;
1: 
1:   private int index;
1: 
0:   public NonDictionaryFieldConverterImpl(DataField dataField, int index) {
1:     this.dataType = dataField.getColumn().getDataType();
1:     this.index = index;
1:   }
1: 
0:   @Override
0:   public void convert(CarbonRow row) {
1:     String dimensionValue = row.getString(index);
0:     if (dataType != DataType.STRING) {
0:       if (null == DataTypeUtil.normalizeIntAndLongValues(dimensionValue, dataType)) {
0:         dimensionValue = CarbonCommonConstants.MEMBER_DEFAULT_VAL;
1:       }
1:     }
0:     row.update(dimensionValue.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)),
0:         index);
1:   }
1: }
author:dhatchayani
-------------------------------------------------------------------------------
commit:770deb8
/////////////////////////////////////////////////////////////////////////
0:         if (dataType == DataTypes.STRING
0:             && value.length > CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT) {
0:           throw new CarbonDataLoadingException("Dataload failed, String size cannot exceed "
0:               + CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT + " bytes");
1:       } catch (CarbonDataLoadingException e) {
1:         throw e;
commit:943588d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
/////////////////////////////////////////////////////////////////////////
0:         byte[] value = DataTypeUtil
0:             .getBytesBasedOnDataTypeForNoDictionaryColumn(dimensionValue, dataType, dateFormat);
0:         if (dataType == DataTypes.STRING) {
0:           assert value.length <= CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT;
1:         }
0:         row.update(value, index);
0:       } catch (AssertionError ae) {
0:         throw new CarbonDataLoadingException("Dataload failed, String size cannot exceed "
0:             + CarbonCommonConstants.MAX_CHARS_PER_COLUMN_DEFAULT + " bytes");
commit:36ceb59
/////////////////////////////////////////////////////////////////////////
1:   private DataField dataField;
1: 
1:     this.dataField = dataField;
/////////////////////////////////////////////////////////////////////////
0:     if (null == dimensionValue && column.getDataType() != DataType.STRING) {
0:       logHolder.setReason(
1:           CarbonDataProcessorUtil.prepareFailureReason(column.getColName(), column.getDataType()));
0:       updateWithNullValue(row);
1:     } else if (dimensionValue == null || dimensionValue.equals(nullformat)) {
0:       updateWithNullValue(row);
0:         row.update(DataTypeUtil
0:             .getBytesBasedOnDataTypeForNoDictionaryColumn(dimensionValue, dataType,
0:                 dataField.getDateFormat()), index);
1:         if (dimensionValue.length() > 0 || (dimensionValue.length() == 0 && isEmptyBadRecord)) {
/////////////////////////////////////////////////////////////////////////
0:           updateWithNullValue(row);
0:           updateWithNullValue(row);
1: 
0:   private void updateWithNullValue(CarbonRow row) {
0:     if (dataType == DataType.STRING) {
0:       row.update(CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY, index);
1:     } else {
0:       row.update(CarbonCommonConstants.EMPTY_BYTE_ARRAY, index);
1:     }
1:   }
author:sounakr
-------------------------------------------------------------------------------
commit:f79b9ea
/////////////////////////////////////////////////////////////////////////
1:   @Override public void clear() {
1:   }
1: 
author:akashrn5
-------------------------------------------------------------------------------
commit:85dc4ff
/////////////////////////////////////////////////////////////////////////
1:       String dateFormat = null;
1:       if (dataType == DataTypes.DATE) {
1:         dateFormat = dataField.getDateFormat();
1:       } else if (dataType == DataTypes.TIMESTAMP) {
1:         dateFormat = dataField.getTimestampFormat();
1:       }
0:                 dateFormat), index);
author:Jacky Li
-------------------------------------------------------------------------------
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     if (null == dimensionValue && column.getDataType() != DataTypes.STRING) {
/////////////////////////////////////////////////////////////////////////
0:     if (dataType == DataTypes.STRING) {
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.converter.impl;
1: import org.apache.carbondata.processing.loading.DataField;
1: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
1: import org.apache.carbondata.processing.loading.converter.FieldConverter;
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
/////////////////////////////////////////////////////////////////////////
0:         row.update(
0:             DataTypeUtil.getBytesBasedOnDataTypeForNoDictionaryColumn(dimensionValue, dataType),
0:             index);
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:4a79a86
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
/////////////////////////////////////////////////////////////////////////
1:           String message = logHolder.getColumnMessageMap().get(column.getColName());
1:           if (null == message) {
1:             message = CarbonDataProcessorUtil
1:                 .prepareFailureReason(column.getColName(), column.getDataType());
1:             logHolder.getColumnMessageMap().put(column.getColName(), message);
1:           }
1:           logHolder.setReason(message);
commit:3251c89
/////////////////////////////////////////////////////////////////////////
1:   private boolean isEmptyBadRecord;
0: 
1:   public NonDictionaryFieldConverterImpl(DataField dataField, String nullformat, int index,
1:       boolean isEmptyBadRecord) {
1:     this.isEmptyBadRecord = isEmptyBadRecord;
/////////////////////////////////////////////////////////////////////////
0:         if ((dimensionValue.length() > 0) || (dimensionValue.length() == 0 && isEmptyBadRecord)) {
0:           logHolder.setReason(
0:               "The value " + " \"" + dimensionValue + "\"" + " with column name " + column
0:                   .getColName() + " and column data type " + dataType + " is not a valid "
0:                   + dataType + " type.");
0:         }
author:manishgupta88
-------------------------------------------------------------------------------
commit:89ddf5a
/////////////////////////////////////////////////////////////////////////
0:         if (dimensionValue.length() > 0 || isEmptyBadRecord) {
0:           row.update(CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY, index);
author:QiangCai
-------------------------------------------------------------------------------
commit:9f94529
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   @Override public void convert(CarbonRow row, BadRecordLogHolder logHolder) {
0:       row.update(CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY, index);
1:     } else {
1:       try {
0:         row.update(DataTypeUtil
0:             .getBytesBasedOnDataTypeForNoDictionaryColumn(dimensionValue, dataType), index);
1:       } catch (Throwable ex) {
0:         if (dimensionValue.length() != 0 || isEmptyBadRecord) {
1:         } else {
0:           row.update(new byte[0], index);
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
============================================================================