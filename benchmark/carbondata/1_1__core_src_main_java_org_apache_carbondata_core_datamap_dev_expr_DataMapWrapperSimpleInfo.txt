1:c0de9f1: /*
1:c0de9f1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c0de9f1:  * contributor license agreements.  See the NOTICE file distributed with
1:c0de9f1:  * this work for additional information regarding copyright ownership.
1:c0de9f1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c0de9f1:  * (the "License"); you may not use this file except in compliance with
1:c0de9f1:  * the License.  You may obtain a copy of the License at
1:c0de9f1:  *
1:c0de9f1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:c0de9f1:  *
1:c0de9f1:  * Unless required by applicable law or agreed to in writing, software
1:c0de9f1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c0de9f1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c0de9f1:  * See the License for the specific language governing permissions and
1:c0de9f1:  * limitations under the License.
1:c0de9f1:  */
1:c0de9f1: 
1:c0de9f1: package org.apache.carbondata.core.datamap.dev.expr;
1:c0de9f1: 
1:c0de9f1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:c0de9f1: 
1:c0de9f1: /**
1:c0de9f1:  * schema for datamap wrapper.
1:c0de9f1:  * Currently a DataMapWrapper contains more than one datamap, this class is used to describe its
1:c0de9f1:  * schema. For example a AndDataMapExprWrapper contains BloomFilter in its left and Lucene in
1:c0de9f1:  * its right, then its schema would be AND(BloomFilter, Lucene)
1:c0de9f1:  */
1:c0de9f1: public class DataMapWrapperSimpleInfo {
1:c0de9f1:   enum WrapperType {
1:c0de9f1:     PRIMITIVE,
1:c0de9f1:     AND,
1:c0de9f1:     OR
1:c0de9f1:   }
1:c0de9f1: 
1:c0de9f1:   private WrapperType wrapperType;
1:c0de9f1:   private DataMapWrapperSimpleInfo left;
1:c0de9f1:   private DataMapWrapperSimpleInfo right;
1:c0de9f1:   private DataMapSchema schema;
1:c0de9f1: 
1:c0de9f1:   private DataMapWrapperSimpleInfo(WrapperType wrapperType, DataMapWrapperSimpleInfo left,
1:c0de9f1:       DataMapWrapperSimpleInfo right) {
1:c0de9f1:     this.wrapperType = wrapperType;
1:c0de9f1:     this.left = left;
1:c0de9f1:     this.right = right;
1:c0de9f1:   }
1:c0de9f1: 
1:c0de9f1:   private DataMapWrapperSimpleInfo(DataMapSchema schema) {
1:c0de9f1:     this.wrapperType = WrapperType.PRIMITIVE;
1:c0de9f1:     this.schema = schema;
1:c0de9f1:   }
1:c0de9f1: 
1:c0de9f1:   public static DataMapWrapperSimpleInfo fromDataMapWrapper(DataMapExprWrapper dataMapExprWrapper) {
1:c0de9f1:     if (dataMapExprWrapper instanceof DataMapExprWrapperImpl) {
1:c0de9f1:       return new DataMapWrapperSimpleInfo(
1:c0de9f1:           ((DataMapExprWrapperImpl) dataMapExprWrapper).getDataMapSchema());
1:c0de9f1:     } else if (dataMapExprWrapper instanceof AndDataMapExprWrapper) {
1:c0de9f1:       return new DataMapWrapperSimpleInfo(WrapperType.AND,
1:c0de9f1:           fromDataMapWrapper(dataMapExprWrapper.getLeftDataMapWrapper()),
1:c0de9f1:           fromDataMapWrapper(dataMapExprWrapper.getRightDataMapWrapprt()));
1:c0de9f1:     } else {
1:c0de9f1:       return new DataMapWrapperSimpleInfo(WrapperType.OR,
1:c0de9f1:           fromDataMapWrapper(dataMapExprWrapper.getLeftDataMapWrapper()),
1:c0de9f1:           fromDataMapWrapper(dataMapExprWrapper.getRightDataMapWrapprt()));
1:c0de9f1:     }
1:c0de9f1:   }
1:c0de9f1: 
1:c0de9f1:   public String getDataMapWrapperName() {
1:c0de9f1:     if (WrapperType.PRIMITIVE == wrapperType) {
1:c0de9f1:       return schema.getDataMapName();
1:c0de9f1:     } else {
1:c0de9f1:       return String.format("%s(%s, %s)",
1:c0de9f1:           wrapperType, left.getDataMapWrapperName(), right.getDataMapWrapperName());
1:c0de9f1:     }
1:c0de9f1:   }
1:c0de9f1: 
1:c0de9f1:   public String getDataMapWrapperProvider() {
1:c0de9f1:     if (WrapperType.PRIMITIVE == wrapperType) {
1:c0de9f1:       return schema.getProviderName();
1:c0de9f1:     } else {
1:c0de9f1:       return String.format("%s(%s, %s)",
1:c0de9f1:           wrapperType, left.getDataMapWrapperProvider(), right.getDataMapWrapperProvider());
1:c0de9f1:     }
1:c0de9f1:   }
1:c0de9f1: 
1:c0de9f1:   @Override
1:c0de9f1:   public String toString() {
1:c0de9f1:     return "DatamapWrapperSchema: Name->" + getDataMapWrapperName()
1:c0de9f1:         + ", Provider->" + getDataMapWrapperProvider();
1:c0de9f1:   }
1:c0de9f1: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:c0de9f1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datamap.dev.expr;
1: 
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1: 
1: /**
1:  * schema for datamap wrapper.
1:  * Currently a DataMapWrapper contains more than one datamap, this class is used to describe its
1:  * schema. For example a AndDataMapExprWrapper contains BloomFilter in its left and Lucene in
1:  * its right, then its schema would be AND(BloomFilter, Lucene)
1:  */
1: public class DataMapWrapperSimpleInfo {
1:   enum WrapperType {
1:     PRIMITIVE,
1:     AND,
1:     OR
1:   }
1: 
1:   private WrapperType wrapperType;
1:   private DataMapWrapperSimpleInfo left;
1:   private DataMapWrapperSimpleInfo right;
1:   private DataMapSchema schema;
1: 
1:   private DataMapWrapperSimpleInfo(WrapperType wrapperType, DataMapWrapperSimpleInfo left,
1:       DataMapWrapperSimpleInfo right) {
1:     this.wrapperType = wrapperType;
1:     this.left = left;
1:     this.right = right;
1:   }
1: 
1:   private DataMapWrapperSimpleInfo(DataMapSchema schema) {
1:     this.wrapperType = WrapperType.PRIMITIVE;
1:     this.schema = schema;
1:   }
1: 
1:   public static DataMapWrapperSimpleInfo fromDataMapWrapper(DataMapExprWrapper dataMapExprWrapper) {
1:     if (dataMapExprWrapper instanceof DataMapExprWrapperImpl) {
1:       return new DataMapWrapperSimpleInfo(
1:           ((DataMapExprWrapperImpl) dataMapExprWrapper).getDataMapSchema());
1:     } else if (dataMapExprWrapper instanceof AndDataMapExprWrapper) {
1:       return new DataMapWrapperSimpleInfo(WrapperType.AND,
1:           fromDataMapWrapper(dataMapExprWrapper.getLeftDataMapWrapper()),
1:           fromDataMapWrapper(dataMapExprWrapper.getRightDataMapWrapprt()));
1:     } else {
1:       return new DataMapWrapperSimpleInfo(WrapperType.OR,
1:           fromDataMapWrapper(dataMapExprWrapper.getLeftDataMapWrapper()),
1:           fromDataMapWrapper(dataMapExprWrapper.getRightDataMapWrapprt()));
1:     }
1:   }
1: 
1:   public String getDataMapWrapperName() {
1:     if (WrapperType.PRIMITIVE == wrapperType) {
1:       return schema.getDataMapName();
1:     } else {
1:       return String.format("%s(%s, %s)",
1:           wrapperType, left.getDataMapWrapperName(), right.getDataMapWrapperName());
1:     }
1:   }
1: 
1:   public String getDataMapWrapperProvider() {
1:     if (WrapperType.PRIMITIVE == wrapperType) {
1:       return schema.getProviderName();
1:     } else {
1:       return String.format("%s(%s, %s)",
1:           wrapperType, left.getDataMapWrapperProvider(), right.getDataMapWrapperProvider());
1:     }
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     return "DatamapWrapperSchema: Name->" + getDataMapWrapperName()
1:         + ", Provider->" + getDataMapWrapperProvider();
1:   }
1: }
============================================================================