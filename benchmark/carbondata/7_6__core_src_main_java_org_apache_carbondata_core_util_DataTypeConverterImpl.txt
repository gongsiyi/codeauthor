1:09f7cdd: /*
1:09f7cdd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:09f7cdd:  * contributor license agreements.  See the NOTICE file distributed with
1:09f7cdd:  * this work for additional information regarding copyright ownership.
1:09f7cdd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:09f7cdd:  * (the "License"); you may not use this file except in compliance with
1:09f7cdd:  * the License.  You may obtain a copy of the License at
1:09f7cdd:  *
1:09f7cdd:  *    http://www.apache.org/licenses/LICENSE-2.0
1:09f7cdd:  *
1:09f7cdd:  * Unless required by applicable law or agreed to in writing, software
1:09f7cdd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:09f7cdd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:09f7cdd:  * See the License for the specific language governing permissions and
1:09f7cdd:  * limitations under the License.
1:09f7cdd:  */
1:09f7cdd: 
1:09f7cdd: package org.apache.carbondata.core.util;
1:09f7cdd: 
1:09f7cdd: import java.io.Serializable;
1:8d3c774: import java.math.BigDecimal;
1:09f7cdd: 
1:fdf90a4: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:c723947: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:fdf90a4: 
1:09f7cdd: public class DataTypeConverterImpl implements DataTypeConverter, Serializable {
1:09f7cdd: 
1:09f7cdd:   private static final long serialVersionUID = -1718154403432354200L;
1:09f7cdd: 
1:982d03f:   @Override
1:982d03f:   public Object convertFromStringToDecimal(Object data) {
1:8d3c774:     if (null == data) {
1:8d3c774:       return null;
1:8d3c774:     }
1:8d3c774:     if (data instanceof BigDecimal) {
1:8d3c774:       return data;
1:8d3c774:     }
1:8d3c774:     return new BigDecimal(data.toString());
1:8d3c774:   }
1:09f7cdd: 
1:982d03f:   @Override
1:982d03f:   public Object convertFromBigDecimalToDecimal(Object data) {
1:8d3c774:     if (null == data) {
1:8d3c774:       return null;
1:982d03f:     }
1:982d03f:     if (data instanceof BigDecimal) {
1:982d03f:       return data;
1:09f7cdd:     }
1:982d03f:     return new BigDecimal(data.toString());
1:09f7cdd:   }
1:09f7cdd: 
1:982d03f:   @Override public Object convertFromDecimalToBigDecimal(Object data) {
1:982d03f:     return convertFromBigDecimalToDecimal(data);
1:982d03f:   }
1:982d03f: 
1:982d03f:   @Override
1:982d03f:   public Object convertFromByteToUTF8String(byte[] data) {
1:982d03f:     if (null == data) {
1:982d03f:       return null;
1:982d03f:     }
1:982d03f:     return new String(data, CarbonCommonConstants.DEFAULT_CHARSET_CLASS);
1:982d03f:   }
1:982d03f: 
1:982d03f:   @Override
1:982d03f:   public byte[] convertFromByteToUTF8Bytes(byte[] data) {
1:982d03f:     return data;
1:982d03f:   }
1:982d03f: 
1:982d03f:   @Override
1:09f7cdd:   public byte[] convertFromStringToByte(Object data) {
1:8d3c774:     if (null == data) {
1:8d3c774:       return null;
1:8d3c774:     }
1:500654e:     return data.toString().getBytes(CarbonCommonConstants.DEFAULT_CHARSET_CLASS);
1:09f7cdd:   }
1:09f7cdd: 
1:982d03f:   @Override
1:09f7cdd:   public Object convertFromStringToUTF8String(Object data) {
1:8d3c774:     if (null == data) {
1:8d3c774:       return null;
1:8d3c774:     }
2:09f7cdd:     return data.toString();
1:09f7cdd:   }
1:982d03f: 
1:982d03f:   @Override
1:982d03f:   public Object wrapWithGenericArrayData(Object data) {
1:982d03f:     return data;
1:982d03f:   }
1:982d03f: 
1:982d03f:   @Override
1:fb6dffe:   public Object[] unwrapGenericRowToObject(Object data) {
1:fb6dffe:     Object[] splitData = (Object[]) data;
1:fb6dffe:     return splitData;
1:fb6dffe:   }
1:fb6dffe: 
1:fb6dffe:   @Override
1:982d03f:   public Object wrapWithGenericRow(Object[] fields) {
1:982d03f:     return fields;
1:982d03f:   }
1:982d03f: 
1:c723947:   @Override
1:fb6dffe:   public Object wrapWithArrayBasedMapData(Object[] keyArray, Object[] valueArray) {
1:fb6dffe:     return new Object[] { keyArray, valueArray };
1:fb6dffe:   }
1:fb6dffe: 
1:fb6dffe:   @Override
1:c723947:   public Object[] convertCarbonSchemaToSparkSchema(CarbonColumn[] carbonColumns) {
1:c723947:     throw new UnsupportedOperationException();
1:c723947:   }
1:09f7cdd: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:fb6dffe
/////////////////////////////////////////////////////////////////////////
1:   public Object[] unwrapGenericRowToObject(Object data) {
1:     Object[] splitData = (Object[]) data;
1:     return splitData;
1:   }
1: 
1:   @Override
1:   public Object wrapWithArrayBasedMapData(Object[] keyArray, Object[] valueArray) {
1:     return new Object[] { keyArray, valueArray };
1:   }
1: 
1:   @Override
author:Jacky Li
-------------------------------------------------------------------------------
commit:c723947
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public Object[] convertCarbonSchemaToSparkSchema(CarbonColumn[] carbonColumns) {
1:     throw new UnsupportedOperationException();
1:   }
commit:982d03f
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public Object convertFromStringToDecimal(Object data) {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public Object convertFromBigDecimalToDecimal(Object data) {
1:     if (data instanceof BigDecimal) {
1:       return data;
1:     }
1:     return new BigDecimal(data.toString());
1:   @Override public Object convertFromDecimalToBigDecimal(Object data) {
1:     return convertFromBigDecimalToDecimal(data);
1:   }
1: 
1:   @Override
1:   public Object convertFromByteToUTF8String(byte[] data) {
1:     if (null == data) {
1:       return null;
1:     }
1:     return new String(data, CarbonCommonConstants.DEFAULT_CHARSET_CLASS);
1:   }
1: 
1:   @Override
1:   public byte[] convertFromByteToUTF8Bytes(byte[] data) {
1:     return data;
1:   }
1: 
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @Override
1: 
1:   @Override
1:   public Object wrapWithGenericArrayData(Object data) {
1:     return data;
1:   }
1: 
1:   @Override
1:   public Object wrapWithGenericRow(Object[] fields) {
1:     return fields;
1:   }
1: 
author:ravipesala
-------------------------------------------------------------------------------
commit:8d3c774
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigDecimal;
/////////////////////////////////////////////////////////////////////////
1:     if (null == data) {
1:       return null;
1:     }
1:     if (data instanceof BigDecimal) {
1:       return data;
1:     }
1:     return new BigDecimal(data.toString());
1:     if (null == data) {
1:       return null;
1:     }
1:     if (null == data) {
1:       return null;
1:     }
1:     if (null == data) {
1:       return null;
1:     }
author:xuchuanyin
-------------------------------------------------------------------------------
commit:910d496
/////////////////////////////////////////////////////////////////////////
0:     return new java.math.BigDecimal(data.toString());
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1:     return data.toString().getBytes(CarbonCommonConstants.DEFAULT_CHARSET_CLASS);
author:lionelcao
-------------------------------------------------------------------------------
commit:fdf90a4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: 
/////////////////////////////////////////////////////////////////////////
0:     return new String((byte[]) data, CarbonCommonConstants.DEFAULT_CHARSET_CLASS);
author:chenliang613
-------------------------------------------------------------------------------
commit:09f7cdd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.util;
1: 
1: import java.io.Serializable;
1: 
1: public class DataTypeConverterImpl implements DataTypeConverter, Serializable {
1: 
1:   private static final long serialVersionUID = -1718154403432354200L;
1: 
0:   public Object convertToDecimal(Object data) {
0:     java.math.BigDecimal javaDecVal = new java.math.BigDecimal(data.toString());
0:     return javaDecVal;
1:   }
1: 
0:   public Object convertFromByteToUTF8String(Object data) {
1:     return data.toString();
1:   }
1: 
1:   public byte[] convertFromStringToByte(Object data) {
0:     return data.toString().getBytes();
1:   }
1: 
1:   public Object convertFromStringToUTF8String(Object data) {
1:     return data.toString();
1:   }
1: }
============================================================================