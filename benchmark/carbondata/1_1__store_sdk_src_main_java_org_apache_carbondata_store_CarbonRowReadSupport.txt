1:cfb8ed9: /*
1:cfb8ed9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cfb8ed9:  * contributor license agreements.  See the NOTICE file distributed with
1:cfb8ed9:  * this work for additional information regarding copyright ownership.
1:cfb8ed9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cfb8ed9:  * (the "License"); you may not use this file except in compliance with
1:cfb8ed9:  * the License.  You may obtain a copy of the License at
1:cfb8ed9:  *
1:cfb8ed9:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cfb8ed9:  *
1:cfb8ed9:  * Unless required by applicable law or agreed to in writing, software
1:cfb8ed9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cfb8ed9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cfb8ed9:  * See the License for the specific language governing permissions and
1:cfb8ed9:  * limitations under the License.
1:cfb8ed9:  */
1:cfb8ed9: 
1:cfb8ed9: package org.apache.carbondata.store;
1:cfb8ed9: 
1:cfb8ed9: import java.io.IOException;
1:cfb8ed9: 
1:cfb8ed9: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:cfb8ed9: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:cfb8ed9: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:cfb8ed9: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:cfb8ed9: import org.apache.carbondata.hadoop.readsupport.CarbonReadSupport;
1:cfb8ed9: import org.apache.carbondata.hadoop.readsupport.impl.DictionaryDecodeReadSupport;
1:cfb8ed9: 
1:cfb8ed9: /**
1:cfb8ed9:  * ReadSupport that convert row object to CarbonRow
1:cfb8ed9:  */
1:cfb8ed9: @InterfaceAudience.Internal
1:cfb8ed9: public class CarbonRowReadSupport implements CarbonReadSupport<CarbonRow> {
1:cfb8ed9:   private CarbonReadSupport<Object[]> delegate;
1:cfb8ed9: 
1:cfb8ed9:   public CarbonRowReadSupport() {
1:cfb8ed9:     this.delegate = new DictionaryDecodeReadSupport<>();
1:cfb8ed9:   }
1:cfb8ed9: 
1:cfb8ed9:   @Override public void initialize(CarbonColumn[] carbonColumns, CarbonTable carbonTable)
1:cfb8ed9:       throws IOException {
1:cfb8ed9:     delegate.initialize(carbonColumns, carbonTable);
1:cfb8ed9:   }
1:cfb8ed9: 
1:cfb8ed9:   @Override public CarbonRow readRow(Object[] data) {
1:cfb8ed9:     Object[] converted = delegate.readRow(data);
1:cfb8ed9:     return new CarbonRow(converted);
1:cfb8ed9:   }
1:cfb8ed9: 
1:cfb8ed9:   @Override public void close() {
1:cfb8ed9:     delegate.close();
1:cfb8ed9:   }
1:cfb8ed9: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:cfb8ed9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.store;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1: import org.apache.carbondata.hadoop.readsupport.CarbonReadSupport;
1: import org.apache.carbondata.hadoop.readsupport.impl.DictionaryDecodeReadSupport;
1: 
1: /**
1:  * ReadSupport that convert row object to CarbonRow
1:  */
1: @InterfaceAudience.Internal
1: public class CarbonRowReadSupport implements CarbonReadSupport<CarbonRow> {
1:   private CarbonReadSupport<Object[]> delegate;
1: 
1:   public CarbonRowReadSupport() {
1:     this.delegate = new DictionaryDecodeReadSupport<>();
1:   }
1: 
1:   @Override public void initialize(CarbonColumn[] carbonColumns, CarbonTable carbonTable)
1:       throws IOException {
1:     delegate.initialize(carbonColumns, carbonTable);
1:   }
1: 
1:   @Override public CarbonRow readRow(Object[] data) {
1:     Object[] converted = delegate.readRow(data);
1:     return new CarbonRow(converted);
1:   }
1: 
1:   @Override public void close() {
1:     delegate.close();
1:   }
1: }
============================================================================