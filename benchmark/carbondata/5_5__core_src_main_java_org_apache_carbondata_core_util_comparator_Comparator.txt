1:6488bc0: /*
1:6488bc0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6488bc0:  * contributor license agreements.  See the NOTICE file distributed with
1:6488bc0:  * this work for additional information regarding copyright ownership.
1:6488bc0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6488bc0:  * (the "License"); you may not use this file except in compliance with
1:6488bc0:  * the License.  You may obtain a copy of the License at
1:6488bc0:  *
1:6488bc0:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6488bc0:  *
1:6488bc0:  * Unless required by applicable law or agreed to in writing, software
1:6488bc0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6488bc0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6488bc0:  * See the License for the specific language governing permissions and
1:6488bc0:  * limitations under the License.
1:6488bc0:  */
1:6488bc0: 
1:6488bc0: package org.apache.carbondata.core.util.comparator;
1:6488bc0: 
1:6488bc0: import java.math.BigDecimal;
1:6488bc0: 
1:6488bc0: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:6488bc0: import org.apache.carbondata.core.util.ByteUtil;
1:6488bc0: 
1:6488bc0: public final class Comparator {
1:6488bc0: 
1:6488bc0:   public static SerializableComparator getComparator(DataType dataType) {
1:6abdd97:     if (dataType == DataTypes.BOOLEAN) {
1:6abdd97:       return new BooleanSerializableComparator();
1:6abdd97:     } else if (dataType == DataTypes.INT) {
1:956833e:       return new IntSerializableComparator();
1:956833e:     } else if (dataType == DataTypes.SHORT) {
1:956833e:       return new ShortSerializableComparator();
1:956833e:     } else if (dataType == DataTypes.DOUBLE) {
1:956833e:       return new DoubleSerializableComparator();
1:956833e:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.DATE
1:956833e:         || dataType == DataTypes.TIMESTAMP) {
1:956833e:       return new LongSerializableComparator();
1:f209e8e:     } else if (DataTypes.isDecimal(dataType)) {
1:956833e:       return new BigDecimalSerializableComparator();
1:956833e:     } else {
1:956833e:       return new ByteArraySerializableComparator();
2:6488bc0:     }
1:6488bc0:   }
1:4e83509: 
1:4e83509:   /**
1:4e83509:    * create Comparator for Measure Datatype
1:4e83509:    *
1:4e83509:    * @param dataType
1:4e83509:    * @return
1:4e83509:    */
1:4e83509:   public static SerializableComparator getComparatorByDataTypeForMeasure(DataType dataType) {
1:6abdd97:     if (dataType == DataTypes.BOOLEAN) {
1:6abdd97:       return new BooleanSerializableComparator();
1:6abdd97:     } else if (dataType == DataTypes.INT) {
1:956833e:       return new IntSerializableComparator();
1:956833e:     } else if (dataType == DataTypes.SHORT) {
1:956833e:       return new ShortSerializableComparator();
1:956833e:     } else if (dataType == DataTypes.LONG) {
1:956833e:       return new LongSerializableComparator();
1:956833e:     } else if (dataType == DataTypes.DOUBLE) {
1:956833e:       return new DoubleSerializableComparator();
1:f209e8e:     } else if (DataTypes.isDecimal(dataType)) {
1:956833e:       return new BigDecimalSerializableComparator();
1:956833e:     } else {
1:956833e:       throw new IllegalArgumentException("Unsupported data type");
1:4e83509:     }
1:4e83509:   }
1:6488bc0: }
1:6488bc0: 
1:6488bc0: class ByteArraySerializableComparator implements SerializableComparator {
1:6488bc0:   @Override public int compare(Object key1, Object key2) {
1:6488bc0:     return ByteUtil.compare((byte[]) key1, (byte[]) key2);
1:6488bc0:   }
1:6488bc0: }
1:6488bc0: 
1:6abdd97: class BooleanSerializableComparator implements SerializableComparator {
1:6abdd97:   @Override
1:6abdd97:   public int compare(Object key1, Object key2) {
1:6abdd97:     if (key1 == null && key2 == null) {
1:6abdd97:       return 0;
1:6abdd97:     } else if (key1 == null) {
1:6abdd97:       return -1;
1:6abdd97:     } else if (key2 == null) {
1:6abdd97:       return 1;
1:6abdd97:     }
1:6abdd97:     if (Boolean.compare((boolean) key1, (boolean) key2) < 0) {
1:6abdd97:       return -1;
1:6abdd97:     } else if (Boolean.compare((boolean) key1, (boolean) key2) > 0) {
1:6abdd97:       return 1;
1:6abdd97:     } else {
1:6abdd97:       return 0;
1:6abdd97:     }
1:6abdd97:   }
1:6abdd97: }
1:6abdd97: 
1:6488bc0: class IntSerializableComparator implements SerializableComparator {
1:6488bc0:   @Override public int compare(Object key1, Object key2) {
1:4e83509:     if (key1 == null && key2 == null) {
1:4e83509:       return 0;
1:4e83509:     } else if (key1 == null) {
1:4e83509:       return -1;
1:4e83509:     } else if (key2 == null) {
1:4e83509:       return 1;
1:4e83509:     }
1:6488bc0:     if ((int) key1 < (int) key2) {
2:6488bc0:       return -1;
1:6488bc0:     } else if ((int) key1 > (int) key2) {
2:6488bc0:       return 1;
2:6488bc0:     } else {
2:6488bc0:       return 0;
1:6488bc0:     }
1:6488bc0:   }
1:6488bc0: }
1:6488bc0: 
1:6488bc0: class ShortSerializableComparator implements SerializableComparator {
1:6488bc0:   @Override public int compare(Object key1, Object key2) {
1:4e83509:     if (key1 == null && key2 == null) {
1:4e83509:       return 0;
1:4e83509:     } else if (key1 == null) {
1:4e83509:       return -1;
1:4e83509:     } else if (key2 == null) {
1:4e83509:       return 1;
1:4e83509:     }
1:6488bc0:     if ((short) key1 < (short) key2) {
1:6488bc0:       return -1;
1:6488bc0:     } else if ((short) key1 > (short) key2) {
1:6488bc0:       return 1;
1:6488bc0:     } else {
1:6488bc0:       return 0;
1:6488bc0:     }
1:6488bc0:   }
1:6488bc0: }
1:6488bc0: 
1:6488bc0: class DoubleSerializableComparator implements SerializableComparator {
1:6488bc0:   @Override public int compare(Object key1, Object key2) {
1:4e83509:     if (key1 == null && key2 == null) {
1:4e83509:       return 0;
1:4e83509:     } else if (key1 == null) {
1:4e83509:       return -1;
1:4e83509:     } else if (key2 == null) {
1:4e83509:       return 1;
1:4e83509:     }
1:500654e:     return ((Double)key1).compareTo((Double)key2);
1:6488bc0:   }
1:6488bc0: }
1:6488bc0: 
1:6488bc0: class LongSerializableComparator implements SerializableComparator {
1:6488bc0:   @Override public int compare(Object key1, Object key2) {
1:4e83509:     if (key1 == null && key2 == null) {
1:4e83509:       return 0;
1:4e83509:     } else if (key1 == null) {
1:4e83509:       return -1;
1:4e83509:     } else if (key2 == null) {
1:4e83509:       return 1;
1:4e83509:     }
1:6488bc0:     if ((long) key1 < (long) key2) {
1:6488bc0:       return -1;
1:6488bc0:     } else if ((long) key1 > (long) key2) {
1:6488bc0:       return 1;
1:6488bc0:     } else {
1:6488bc0:       return 0;
1:6488bc0:     }
1:6488bc0:   }
1:6488bc0: }
1:6488bc0: 
1:6488bc0: class BigDecimalSerializableComparator implements SerializableComparator {
1:6488bc0:   @Override public int compare(Object key1, Object key2) {
1:4e83509:     if (key1 == null && key2 == null) {
1:4e83509:       return 0;
1:4e83509:     } else if (key1 == null) {
1:4e83509:       return -1;
1:4e83509:     } else if (key2 == null) {
1:4e83509:       return 1;
1:4e83509:     }
1:6488bc0:     return ((BigDecimal) key1).compareTo((BigDecimal) key2);
1:6488bc0:   }
1:6488bc0: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
1:     } else if (DataTypes.isDecimal(dataType)) {
/////////////////////////////////////////////////////////////////////////
1:     } else if (DataTypes.isDecimal(dataType)) {
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
0:     if (dataType == DataTypes.INT) {
1:       return new IntSerializableComparator();
1:     } else if (dataType == DataTypes.SHORT) {
1:       return new ShortSerializableComparator();
1:     } else if (dataType == DataTypes.DOUBLE) {
1:       return new DoubleSerializableComparator();
1:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.DATE
1:         || dataType == DataTypes.TIMESTAMP) {
1:       return new LongSerializableComparator();
0:     } else if (dataType == DataTypes.DECIMAL) {
1:       return new BigDecimalSerializableComparator();
1:     } else {
1:       return new ByteArraySerializableComparator();
/////////////////////////////////////////////////////////////////////////
0:     if (dataType == DataTypes.INT) {
1:       return new IntSerializableComparator();
1:     } else if (dataType == DataTypes.SHORT) {
1:       return new ShortSerializableComparator();
1:     } else if (dataType == DataTypes.LONG) {
1:       return new LongSerializableComparator();
1:     } else if (dataType == DataTypes.DOUBLE) {
1:       return new DoubleSerializableComparator();
0:     } else if (dataType == DataTypes.DECIMAL) {
1:       return new BigDecimalSerializableComparator();
1:     } else {
1:       throw new IllegalArgumentException("Unsupported data type");
author:xubo245
-------------------------------------------------------------------------------
commit:6abdd97
/////////////////////////////////////////////////////////////////////////
1:     if (dataType == DataTypes.BOOLEAN) {
1:       return new BooleanSerializableComparator();
1:     } else if (dataType == DataTypes.INT) {
/////////////////////////////////////////////////////////////////////////
1:     if (dataType == DataTypes.BOOLEAN) {
1:       return new BooleanSerializableComparator();
1:     } else if (dataType == DataTypes.INT) {
/////////////////////////////////////////////////////////////////////////
1: class BooleanSerializableComparator implements SerializableComparator {
1:   @Override
1:   public int compare(Object key1, Object key2) {
1:     if (key1 == null && key2 == null) {
1:       return 0;
1:     } else if (key1 == null) {
1:       return -1;
1:     } else if (key2 == null) {
1:       return 1;
1:     }
1:     if (Boolean.compare((boolean) key1, (boolean) key2) < 0) {
1:       return -1;
1:     } else if (Boolean.compare((boolean) key1, (boolean) key2) > 0) {
1:       return 1;
1:     } else {
1:       return 0;
1:     }
1:   }
1: }
1: 
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1:     return ((Double)key1).compareTo((Double)key2);
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:4e83509
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * create Comparator for Measure Datatype
1:    *
1:    * @param dataType
1:    * @return
1:    */
1:   public static SerializableComparator getComparatorByDataTypeForMeasure(DataType dataType) {
0:     switch (dataType) {
0:       case INT:
0:         return new IntSerializableComparator();
0:       case SHORT:
0:         return new ShortSerializableComparator();
0:       case LONG:
0:         return new LongSerializableComparator();
0:       case DOUBLE:
0:         return new DoubleSerializableComparator();
0:       case DECIMAL:
0:         return new BigDecimalSerializableComparator();
0:       default:
0:         throw new IllegalArgumentException("Unsupported data type");
1:     }
1:   }
/////////////////////////////////////////////////////////////////////////
1:     if (key1 == null && key2 == null) {
1:       return 0;
1:     } else if (key1 == null) {
1:       return -1;
1:     } else if (key2 == null) {
1:       return 1;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (key1 == null && key2 == null) {
1:       return 0;
1:     } else if (key1 == null) {
1:       return -1;
1:     } else if (key2 == null) {
1:       return 1;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (key1 == null && key2 == null) {
1:       return 0;
1:     } else if (key1 == null) {
1:       return -1;
1:     } else if (key2 == null) {
1:       return 1;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (key1 == null && key2 == null) {
1:       return 0;
1:     } else if (key1 == null) {
1:       return -1;
1:     } else if (key2 == null) {
1:       return 1;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (key1 == null && key2 == null) {
1:       return 0;
1:     } else if (key1 == null) {
1:       return -1;
1:     } else if (key2 == null) {
1:       return 1;
1:     }
author:lionelcao
-------------------------------------------------------------------------------
commit:6488bc0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.util.comparator;
1: 
1: import java.math.BigDecimal;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: public final class Comparator {
1: 
1:   public static SerializableComparator getComparator(DataType dataType) {
0:     switch (dataType) {
0:       case INT:
0:         return new IntSerializableComparator();
0:       case SHORT:
0:         return new ShortSerializableComparator();
0:       case DOUBLE:
0:         return new DoubleSerializableComparator();
0:       case LONG:
0:       case DATE:
0:       case TIMESTAMP:
0:         return new LongSerializableComparator();
0:       case DECIMAL:
0:         return new BigDecimalSerializableComparator();
0:       default:
0:         return new ByteArraySerializableComparator();
1:     }
1:   }
1: }
1: 
1: class ByteArraySerializableComparator implements SerializableComparator {
1:   @Override public int compare(Object key1, Object key2) {
1:     return ByteUtil.compare((byte[]) key1, (byte[]) key2);
1:   }
1: }
1: 
1: class IntSerializableComparator implements SerializableComparator {
1:   @Override public int compare(Object key1, Object key2) {
1:     if ((int) key1 < (int) key2) {
1:       return -1;
1:     } else if ((int) key1 > (int) key2) {
1:       return 1;
1:     } else {
1:       return 0;
1:     }
1:   }
1: }
1: 
1: class ShortSerializableComparator implements SerializableComparator {
1:   @Override public int compare(Object key1, Object key2) {
1:     if ((short) key1 < (short) key2) {
1:       return -1;
1:     } else if ((short) key1 > (short) key2) {
1:       return 1;
1:     } else {
1:       return 0;
1:     }
1:   }
1: }
1: 
1: class DoubleSerializableComparator implements SerializableComparator {
1:   @Override public int compare(Object key1, Object key2) {
0:     if ((double) key1 < (double) key2) {
1:       return -1;
0:     } else if ((double) key1 > (double) key2) {
1:       return 1;
1:     } else {
1:       return 0;
1:     }
1:   }
1: }
1: 
1: class LongSerializableComparator implements SerializableComparator {
1:   @Override public int compare(Object key1, Object key2) {
1:     if ((long) key1 < (long) key2) {
1:       return -1;
1:     } else if ((long) key1 > (long) key2) {
1:       return 1;
1:     } else {
1:       return 0;
1:     }
1:   }
1: }
1: 
1: class BigDecimalSerializableComparator implements SerializableComparator {
1:   @Override public int compare(Object key1, Object key2) {
1:     return ((BigDecimal) key1).compareTo((BigDecimal) key2);
1:   }
1: }
============================================================================