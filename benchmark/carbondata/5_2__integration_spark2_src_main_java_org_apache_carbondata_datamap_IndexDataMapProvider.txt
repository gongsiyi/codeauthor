1:9db662a: /*
1:9db662a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9db662a:  * contributor license agreements.  See the NOTICE file distributed with
1:9db662a:  * this work for additional information regarding copyright ownership.
1:9db662a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9db662a:  * (the "License"); you may not use this file except in compliance with
1:9db662a:  * the License.  You may obtain a copy of the License at
1:9db662a:  *
1:9db662a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9db662a:  *
1:9db662a:  * Unless required by applicable law or agreed to in writing, software
1:9db662a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9db662a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9db662a:  * See the License for the specific language governing permissions and
1:9db662a:  * limitations under the License.
1:9db662a:  */
4:9db662a: 
1:9db662a: package org.apache.carbondata.datamap;
1:9db662a: 
1:9db662a: import java.io.IOException;
1:9db662a: import java.util.ArrayList;
1:9db662a: import java.util.List;
1:9db662a: 
1:9db662a: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:9db662a: import org.apache.carbondata.common.exceptions.MetadataProcessException;
1:9db662a: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1:9db662a: import org.apache.carbondata.core.datamap.DataMapProvider;
1:9db662a: import org.apache.carbondata.core.datamap.DataMapRegistry;
1:9db662a: import org.apache.carbondata.core.datamap.DataMapStoreManager;
1:9db662a: import org.apache.carbondata.core.datamap.dev.DataMap;
1:9db662a: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.RelationIdentifier;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:9db662a: 
1:9db662a: import org.apache.spark.sql.SparkSession;
1:9db662a: 
1:9db662a: /**
1:9db662a:  * Index type DataMap, all index datamap should implement this interface.
1:9db662a:  */
1:9db662a: @InterfaceAudience.Internal
1:9db662a: public class IndexDataMapProvider extends DataMapProvider {
1:9db662a: 
1:9db662a:   private SparkSession sparkSession;
1:9db662a:   private DataMapFactory<? extends DataMap> dataMapFactory;
1:9db662a:   private List<CarbonColumn> indexedColumns;
1:9db662a: 
1:9db662a:   IndexDataMapProvider(CarbonTable table, DataMapSchema schema, SparkSession sparkSession)
1:9db662a:       throws MalformedDataMapCommandException {
1:9db662a:     super(table, schema);
1:9db662a:     this.sparkSession = sparkSession;
1:9db662a:     this.dataMapFactory = createDataMapFactory();
1:9db662a:     dataMapFactory.validate();
1:9db662a:     this.indexedColumns = table.getIndexedColumns(schema);
4:9db662a:   }
1:9db662a: 
1:9db662a:   public List<CarbonColumn> getIndexedColumns() {
1:9db662a:     return indexedColumns;
1:9db662a:   }
1:9db662a: 
4:9db662a:   @Override
1:9db662a:   public void initMeta(String ctasSqlStatement)
1:9db662a:       throws MalformedDataMapCommandException, IOException {
1:9db662a:     CarbonTable mainTable = getMainTable();
1:9db662a:     DataMapSchema dataMapSchema = getDataMapSchema();
1:9db662a:     if (mainTable == null) {
1:9db662a:       throw new MalformedDataMapCommandException(
1:9db662a:           "Parent table is required to create index datamap");
1:9db662a:     }
1:9db662a:     ArrayList<RelationIdentifier> relationIdentifiers = new ArrayList<>();
1:9db662a:     RelationIdentifier relationIdentifier =
1:9db662a:         new RelationIdentifier(mainTable.getDatabaseName(), mainTable.getTableName(),
1:9db662a:             mainTable.getTableInfo().getFactTable().getTableId());
1:9db662a:     relationIdentifiers.add(relationIdentifier);
1:9db662a:     dataMapSchema.setRelationIdentifier(relationIdentifier);
1:9db662a:     dataMapSchema.setParentTables(relationIdentifiers);
1:9db662a:     DataMapStoreManager.getInstance().registerDataMap(mainTable, dataMapSchema, dataMapFactory);
1:9db662a:     DataMapStoreManager.getInstance().saveDataMapSchema(dataMapSchema);
1:9db662a:   }
1:9db662a: 
1:9db662a:   @Override
1:9db662a:   public void cleanMeta() throws IOException {
1:9db662a:     if (getMainTable() == null) {
1:9db662a:       throw new UnsupportedOperationException("Table need to be specified in index datamaps");
1:9db662a:     }
1:9db662a:     DataMapStoreManager.getInstance().dropDataMapSchema(getDataMapSchema().getDataMapName());
1:9db662a:   }
1:9db662a: 
1:9db662a:   @Override
1:9db662a:   public void cleanData() {
1:9db662a:     CarbonTable mainTable = getMainTable();
1:9db662a:     if (mainTable == null) {
1:9db662a:       throw new UnsupportedOperationException("Table need to be specified in index datamaps");
1:9db662a:     }
1:9db662a:     DataMapStoreManager.getInstance().clearDataMap(
1:9db662a:         mainTable.getAbsoluteTableIdentifier(), getDataMapSchema().getDataMapName());
1:9db662a:   }
1:9db662a: 
1:9db662a:   @Override
1:9db662a:   public void rebuild() {
1:747be9b:     IndexDataMapRebuildRDD.rebuildDataMap(sparkSession, getMainTable(), getDataMapSchema());
1:9db662a:   }
1:9db662a: 
1:9db662a:   private DataMapFactory<? extends DataMap> createDataMapFactory()
1:9db662a:       throws MalformedDataMapCommandException {
1:9db662a:     CarbonTable mainTable = getMainTable();
1:9db662a:     DataMapSchema dataMapSchema = getDataMapSchema();
1:9db662a:     DataMapFactory<? extends DataMap> dataMapFactory;
1:9db662a:     try {
1:9db662a:       // try to create DataMapClassProvider instance by taking providerName as class name
1:9db662a:       dataMapFactory = (DataMapFactory<? extends DataMap>)
1:9db662a:           Class.forName(dataMapSchema.getProviderName()).getConstructors()[0]
1:9db662a:               .newInstance(mainTable, dataMapSchema);
1:9db662a:     } catch (ClassNotFoundException e) {
1:9db662a:       // try to create DataMapClassProvider instance by taking providerName as short name
1:9db662a:       dataMapFactory =
1:9db662a:           DataMapRegistry.getDataMapFactoryByShortName(mainTable, dataMapSchema);
1:9db662a:     } catch (Throwable e) {
1:9db662a:       throw new MetadataProcessException(
1:9db662a:           "failed to create DataMapClassProvider '" + dataMapSchema.getProviderName() + "'", e);
1:9db662a:     }
1:9db662a:     return dataMapFactory;
1:9db662a:   }
1:9db662a: 
1:9db662a:   @Override
1:9db662a:   public DataMapFactory getDataMapFactory() {
1:9db662a:     return dataMapFactory;
1:9db662a:   }
1:abcd4f6: 
1:abcd4f6:   @Override
1:abcd4f6:   public boolean supportRebuild() {
1:abcd4f6:     return dataMapFactory.supportRebuild();
1:abcd4f6:   }
1:9db662a: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:abcd4f6
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public boolean supportRebuild() {
1:     return dataMapFactory.supportRebuild();
1:   }
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:747be9b
/////////////////////////////////////////////////////////////////////////
1:     IndexDataMapRebuildRDD.rebuildDataMap(sparkSession, getMainTable(), getDataMapSchema());
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.datamap;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.exceptions.MetadataProcessException;
1: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
0: import org.apache.carbondata.core.datamap.DataMapCatalog;
1: import org.apache.carbondata.core.datamap.DataMapProvider;
1: import org.apache.carbondata.core.datamap.DataMapRegistry;
1: import org.apache.carbondata.core.datamap.DataMapStoreManager;
1: import org.apache.carbondata.core.datamap.dev.DataMap;
1: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1: import org.apache.carbondata.core.metadata.schema.table.RelationIdentifier;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1: 
1: import org.apache.spark.sql.SparkSession;
1: 
1: /**
1:  * Index type DataMap, all index datamap should implement this interface.
1:  */
1: @InterfaceAudience.Internal
1: public class IndexDataMapProvider extends DataMapProvider {
1: 
1:   private SparkSession sparkSession;
1:   private DataMapFactory<? extends DataMap> dataMapFactory;
1:   private List<CarbonColumn> indexedColumns;
1: 
1:   IndexDataMapProvider(CarbonTable table, DataMapSchema schema, SparkSession sparkSession)
1:       throws MalformedDataMapCommandException {
1:     super(table, schema);
1:     this.sparkSession = sparkSession;
1:     this.dataMapFactory = createDataMapFactory();
1:     dataMapFactory.validate();
1:     this.indexedColumns = table.getIndexedColumns(schema);
1:   }
1: 
1:   public List<CarbonColumn> getIndexedColumns() {
1:     return indexedColumns;
1:   }
1: 
1:   @Override
1:   public void initMeta(String ctasSqlStatement)
1:       throws MalformedDataMapCommandException, IOException {
1:     CarbonTable mainTable = getMainTable();
1:     DataMapSchema dataMapSchema = getDataMapSchema();
1:     if (mainTable == null) {
1:       throw new MalformedDataMapCommandException(
1:           "Parent table is required to create index datamap");
1:     }
1:     ArrayList<RelationIdentifier> relationIdentifiers = new ArrayList<>();
1:     RelationIdentifier relationIdentifier =
1:         new RelationIdentifier(mainTable.getDatabaseName(), mainTable.getTableName(),
1:             mainTable.getTableInfo().getFactTable().getTableId());
1:     relationIdentifiers.add(relationIdentifier);
1:     dataMapSchema.setRelationIdentifier(relationIdentifier);
1:     dataMapSchema.setParentTables(relationIdentifiers);
1:     DataMapStoreManager.getInstance().registerDataMap(mainTable, dataMapSchema, dataMapFactory);
1:     DataMapStoreManager.getInstance().saveDataMapSchema(dataMapSchema);
1:   }
1: 
1:   @Override
0:   public void initData() {
0:     // Nothing is needed to do by default
1:   }
1: 
1:   @Override
1:   public void cleanMeta() throws IOException {
1:     if (getMainTable() == null) {
1:       throw new UnsupportedOperationException("Table need to be specified in index datamaps");
1:     }
1:     DataMapStoreManager.getInstance().dropDataMapSchema(getDataMapSchema().getDataMapName());
1:   }
1: 
1:   @Override
1:   public void cleanData() {
1:     CarbonTable mainTable = getMainTable();
1:     if (mainTable == null) {
1:       throw new UnsupportedOperationException("Table need to be specified in index datamaps");
1:     }
1:     DataMapStoreManager.getInstance().clearDataMap(
1:         mainTable.getAbsoluteTableIdentifier(), getDataMapSchema().getDataMapName());
1:   }
1: 
1:   @Override
1:   public void rebuild() {
0:     IndexDataMapRefreshRDD.rebuildDataMap(sparkSession, getMainTable(), getDataMapSchema());
1:   }
1: 
1:   @Override
0:   public void incrementalBuild(String[] segmentIds) {
0:     throw new UnsupportedOperationException();
1:   }
1: 
1:   private DataMapFactory<? extends DataMap> createDataMapFactory()
1:       throws MalformedDataMapCommandException {
1:     CarbonTable mainTable = getMainTable();
1:     DataMapSchema dataMapSchema = getDataMapSchema();
1:     DataMapFactory<? extends DataMap> dataMapFactory;
1:     try {
1:       // try to create DataMapClassProvider instance by taking providerName as class name
1:       dataMapFactory = (DataMapFactory<? extends DataMap>)
1:           Class.forName(dataMapSchema.getProviderName()).getConstructors()[0]
1:               .newInstance(mainTable, dataMapSchema);
1:     } catch (ClassNotFoundException e) {
1:       // try to create DataMapClassProvider instance by taking providerName as short name
1:       dataMapFactory =
1:           DataMapRegistry.getDataMapFactoryByShortName(mainTable, dataMapSchema);
1:     } catch (Throwable e) {
1:       throw new MetadataProcessException(
1:           "failed to create DataMapClassProvider '" + dataMapSchema.getProviderName() + "'", e);
1:     }
1:     return dataMapFactory;
1:   }
1: 
1:   @Override
0:   public DataMapCatalog createDataMapCatalog() {
0:     // TODO create abstract class and move the default implementation there.
0:     return null;
1:   }
1: 
1:   @Override
1:   public DataMapFactory getDataMapFactory() {
1:     return dataMapFactory;
1:   }
1: }
commit:bbb1092
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: 
/////////////////////////////////////////////////////////////////////////
0:       SparkSession sparkSession) throws MalformedDataMapCommandException, IOException {
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
/////////////////////////////////////////////////////////////////////////
0:     DataMapFactory dataMapFactory = createIndexDataMapFactory(dataMapSchema);
/////////////////////////////////////////////////////////////////////////
0:   private DataMapFactory createIndexDataMapFactory(DataMapSchema dataMapSchema)
0:     DataMapFactory dataMapFactory;
0:       Class<? extends DataMapFactory> providerClass =
0:           (Class<? extends DataMapFactory>) Class.forName(dataMapSchema.getClassName());
/////////////////////////////////////////////////////////////////////////
0:   private DataMapFactory getDataMapFactoryByShortName(String providerName)
0:     DataMapFactory dataMapFactory;
0:         Class<? extends DataMapFactory> datamapClass =
0:             (Class<? extends DataMapFactory>) Class.forName(providerName);
commit:89a12af
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.carbondata.datamap;
0: 
0: import org.apache.carbondata.common.annotations.InterfaceAudience;
0: import org.apache.carbondata.common.exceptions.MetadataProcessException;
0: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
0: import org.apache.carbondata.core.datamap.DataMapRegistry;
0: import org.apache.carbondata.core.datamap.DataMapStoreManager;
0: import org.apache.carbondata.core.datamap.dev.IndexDataMapFactory;
0: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
0: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
0: import org.apache.carbondata.format.TableInfo;
0: 
0: import org.apache.spark.sql.SparkSession;
0: import org.apache.spark.sql.execution.command.preaaggregate.PreAggregateUtil;
0: 
0: @InterfaceAudience.Internal
0: public class IndexDataMapProvider implements DataMapProvider {
0: 
0:   private TableInfo originalTableInfo;
0: 
0:   @Override
0:   public void initMeta(CarbonTable mainTable, DataMapSchema dataMapSchema, String ctasSqlStatement,
0:       SparkSession sparkSession) throws MalformedDataMapCommandException {
0:     IndexDataMapFactory dataMapFactory = createIndexDataMapFactory(dataMapSchema);
0:     DataMapStoreManager.getInstance().registerDataMap(
0:         mainTable.getAbsoluteTableIdentifier(), dataMapSchema, dataMapFactory);
0:     originalTableInfo = PreAggregateUtil.updateMainTable(mainTable, dataMapSchema, sparkSession);
0:   }
0: 
0:   @Override
0:   public void initData(CarbonTable mainTable, SparkSession sparkSession) {
0:     // Nothing is needed to do by default
0:   }
0: 
0:   @Override
0:   public void freeMeta(CarbonTable mainTable, DataMapSchema dataMapSchema,
0:       SparkSession sparkSession) {
0:     PreAggregateUtil.updateSchemaInfo(mainTable, originalTableInfo, sparkSession);
0:   }
0: 
0:   @Override
0:   public void freeData(CarbonTable mainTable, DataMapSchema dataMapSchema,
0:       SparkSession sparkSession) {
0:     DataMapStoreManager.getInstance().clearDataMap(
0:         mainTable.getAbsoluteTableIdentifier(), dataMapSchema.getDataMapName());
0:   }
0: 
0:   @Override
0:   public void rebuild(CarbonTable mainTable, SparkSession sparkSession) {
0:     // Nothing is needed to do by default
0:   }
0: 
0:   @Override
0:   public void incrementalBuild(CarbonTable mainTable, String[] segmentIds,
0:       SparkSession sparkSession) {
0:     throw new UnsupportedOperationException();
0:   }
0: 
0:   private IndexDataMapFactory createIndexDataMapFactory(DataMapSchema dataMapSchema)
0:       throws MalformedDataMapCommandException {
0:     IndexDataMapFactory dataMapFactory;
0:     try {
0:       // try to create DataMapProvider instance by taking providerName as class name
0:       Class<? extends IndexDataMapFactory> providerClass =
0:           (Class<? extends IndexDataMapFactory>) Class.forName(dataMapSchema.getClassName());
0:       dataMapFactory = providerClass.newInstance();
0:     } catch (ClassNotFoundException e) {
0:       // try to create DataMapProvider instance by taking providerName as short name
0:       dataMapFactory = getDataMapFactoryByShortName(dataMapSchema.getClassName());
0:     } catch (Throwable e) {
0:       throw new MetadataProcessException(
0:           "failed to create DataMapProvider '" + dataMapSchema.getClassName() + "'", e);
0:     }
0:     return dataMapFactory;
0:   }
0: 
0:   private IndexDataMapFactory getDataMapFactoryByShortName(String providerName)
0:       throws MalformedDataMapCommandException {
0:     IndexDataMapFactory dataMapFactory;
0:     String className = DataMapRegistry.getDataMapClassName(providerName);
0:     if (className != null) {
0:       try {
0:         Class<? extends IndexDataMapFactory> datamapClass =
0:             (Class<? extends IndexDataMapFactory>) Class.forName(providerName);
0:         dataMapFactory = datamapClass.newInstance();
0:       } catch (ClassNotFoundException ex) {
0:         throw new MalformedDataMapCommandException(
0:             "DataMap '" + providerName + "' not found", ex);
0:       } catch (Throwable ex) {
0:         throw new MetadataProcessException(
0:             "failed to create DataMap '" + providerName + "'", ex);
0:       }
0:     } else {
0:       throw new MalformedDataMapCommandException(
0:           "DataMap '" + providerName + "' not found");
0:     }
0:     return dataMapFactory;
0:   }
0: }
author:ravipesala
-------------------------------------------------------------------------------
commit:05086e5
author:QiangCai
-------------------------------------------------------------------------------
commit:d23f7fa
/////////////////////////////////////////////////////////////////////////
0:           (Class<? extends DataMapFactory>) Class.forName(dataMapSchema.getProviderName());
0:       dataMapFactory = getDataMapFactoryByShortName(dataMapSchema.getProviderName());
0:           "failed to create DataMapProvider '" + dataMapSchema.getProviderName() + "'", e);
============================================================================