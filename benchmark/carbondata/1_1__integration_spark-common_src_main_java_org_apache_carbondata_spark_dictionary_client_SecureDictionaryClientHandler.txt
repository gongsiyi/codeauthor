1:4daf063: /*
1:4daf063:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4daf063:  * contributor license agreements.  See the NOTICE file distributed with
1:4daf063:  * this work for additional information regarding copyright ownership.
1:4daf063:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4daf063:  * (the "License"); you may not use this file except in compliance with
1:4daf063:  * the License.  You may obtain a copy of the License at
1:4daf063:  *
1:4daf063:  *    http://www.apache.org/licenses/LICENSE-2.0
1:4daf063:  *
1:4daf063:  * Unless required by applicable law or agreed to in writing, software
1:4daf063:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4daf063:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4daf063:  * See the License for the specific language governing permissions and
1:4daf063:  * limitations under the License.
1:4daf063:  */
1:4daf063: package org.apache.carbondata.spark.dictionary.client;
1:4daf063: 
1:4daf063: import java.nio.ByteBuffer;
1:4daf063: import java.util.concurrent.BlockingQueue;
1:4daf063: import java.util.concurrent.LinkedBlockingQueue;
1:4daf063: 
1:4daf063: import org.apache.carbondata.common.logging.LogService;
1:4daf063: import org.apache.carbondata.common.logging.LogServiceFactory;
1:4daf063: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:4daf063: 
1:4daf063: import io.netty.buffer.ByteBuf;
1:4daf063: import io.netty.buffer.ByteBufAllocator;
1:4daf063: import io.netty.buffer.Unpooled;
1:4daf063: import org.apache.spark.network.client.RpcResponseCallback;
1:4daf063: import org.apache.spark.network.client.TransportClient;
1:4daf063: import org.apache.spark.network.server.OneForOneStreamManager;
1:4daf063: import org.apache.spark.network.server.RpcHandler;
1:4daf063: import org.apache.spark.network.server.StreamManager;
1:4daf063: 
1:4daf063: /**
1:4daf063:  * Client handler to get data.
1:4daf063:  */
1:4daf063: public class SecureDictionaryClientHandler extends RpcHandler {
1:4daf063: 
1:4daf063:   private static final LogService LOGGER =
1:4daf063:       LogServiceFactory.getLogService(SecureDictionaryClientHandler.class.getName());
1:4daf063: 
1:4daf063:   private final BlockingQueue<DictionaryMessage> responseMsgQueue = new LinkedBlockingQueue<>();
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * client send request to server
1:4daf063:    *
1:4daf063:    * @param key DictionaryMessage
1:4daf063:    * @return DictionaryMessage
1:4daf063:    */
1:4daf063:   public DictionaryMessage getDictionary(DictionaryMessage key, TransportClient client) {
1:4daf063:     DictionaryMessage dictionaryMessage;
1:4daf063:     ByteBuffer resp = null;
1:4daf063:     try {
1:4daf063: 
1:4daf063:       ByteBuf buffer = ByteBufAllocator.DEFAULT.heapBuffer();
1:4daf063:       key.writeData(buffer);
1:4daf063:       resp = client.sendRpcSync(buffer.nioBuffer(), 100000);
1:4daf063:     } catch (Exception e) {
1:4daf063:       LOGGER.error(e, "Error while send request to server ");
1:4daf063:     }
1:4daf063:     try {
1:4daf063:       if (resp == null) {
1:4daf063:         StringBuilder message = new StringBuilder();
1:4daf063:         message.append("DictionaryMessage { ColumnName: ").append(key.getColumnName())
1:4daf063:             .append(", DictionaryValue: ").append(key.getDictionaryValue()).append(", type: ")
1:4daf063:             .append(key.getType()).append(" }");
1:4daf063:         throw new RuntimeException("Request timed out for key : " + message);
1:4daf063:       }
1:4daf063:       DictionaryMessage newKey = new DictionaryMessage();
1:4daf063:       ByteBuf data = Unpooled.wrappedBuffer(resp);
1:4daf063:       newKey.readFullLength(data);
1:4daf063:       data.release();
1:4daf063:       return newKey;
1:4daf063:     } catch (Exception e) {
1:4daf063:       LOGGER.error(e);
1:4daf063:       throw new RuntimeException(e);
1:4daf063:     }
1:4daf063:   }
1:4daf063: 
1:4daf063:   @Override public void receive(TransportClient transportClient, ByteBuffer byteBuffer,
1:4daf063:       RpcResponseCallback rpcResponseCallback) {
1:4daf063:     try {
1:4daf063:       ByteBuf data = Unpooled.wrappedBuffer(byteBuffer);
1:4daf063:       DictionaryMessage key = new DictionaryMessage();
1:4daf063:       key.readFullLength(data);
1:4daf063:       data.release();
1:4daf063:       if (responseMsgQueue.offer(key)) {
1:4daf063:         LOGGER.info("key: " + key + " added to queue");
1:4daf063:       } else {
1:4daf063:         LOGGER.error("Failed to add key: " + key + " to queue");
1:4daf063:       }
1:4daf063:     } catch (Exception e) {
1:4daf063:       LOGGER.error(e);
1:4daf063:       throw e;
1:4daf063:     }
1:4daf063:   }
1:4daf063: 
1:4daf063:   @Override public StreamManager getStreamManager() {
1:4daf063:     return new OneForOneStreamManager();
1:4daf063:   }
1:4daf063: 
1:4daf063: }
============================================================================
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.spark.dictionary.client;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.LinkedBlockingQueue;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1: 
1: import io.netty.buffer.ByteBuf;
1: import io.netty.buffer.ByteBufAllocator;
1: import io.netty.buffer.Unpooled;
1: import org.apache.spark.network.client.RpcResponseCallback;
1: import org.apache.spark.network.client.TransportClient;
1: import org.apache.spark.network.server.OneForOneStreamManager;
1: import org.apache.spark.network.server.RpcHandler;
1: import org.apache.spark.network.server.StreamManager;
1: 
1: /**
1:  * Client handler to get data.
1:  */
1: public class SecureDictionaryClientHandler extends RpcHandler {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(SecureDictionaryClientHandler.class.getName());
1: 
1:   private final BlockingQueue<DictionaryMessage> responseMsgQueue = new LinkedBlockingQueue<>();
1: 
1:   /**
1:    * client send request to server
1:    *
1:    * @param key DictionaryMessage
1:    * @return DictionaryMessage
1:    */
1:   public DictionaryMessage getDictionary(DictionaryMessage key, TransportClient client) {
1:     DictionaryMessage dictionaryMessage;
1:     ByteBuffer resp = null;
1:     try {
1: 
1:       ByteBuf buffer = ByteBufAllocator.DEFAULT.heapBuffer();
1:       key.writeData(buffer);
1:       resp = client.sendRpcSync(buffer.nioBuffer(), 100000);
1:     } catch (Exception e) {
1:       LOGGER.error(e, "Error while send request to server ");
1:     }
1:     try {
1:       if (resp == null) {
1:         StringBuilder message = new StringBuilder();
1:         message.append("DictionaryMessage { ColumnName: ").append(key.getColumnName())
1:             .append(", DictionaryValue: ").append(key.getDictionaryValue()).append(", type: ")
1:             .append(key.getType()).append(" }");
1:         throw new RuntimeException("Request timed out for key : " + message);
1:       }
1:       DictionaryMessage newKey = new DictionaryMessage();
1:       ByteBuf data = Unpooled.wrappedBuffer(resp);
1:       newKey.readFullLength(data);
1:       data.release();
1:       return newKey;
1:     } catch (Exception e) {
1:       LOGGER.error(e);
1:       throw new RuntimeException(e);
1:     }
1:   }
1: 
1:   @Override public void receive(TransportClient transportClient, ByteBuffer byteBuffer,
1:       RpcResponseCallback rpcResponseCallback) {
1:     try {
1:       ByteBuf data = Unpooled.wrappedBuffer(byteBuffer);
1:       DictionaryMessage key = new DictionaryMessage();
1:       key.readFullLength(data);
1:       data.release();
1:       if (responseMsgQueue.offer(key)) {
1:         LOGGER.info("key: " + key + " added to queue");
1:       } else {
1:         LOGGER.error("Failed to add key: " + key + " to queue");
1:       }
1:     } catch (Exception e) {
1:       LOGGER.error(e);
1:       throw e;
1:     }
1:   }
1: 
1:   @Override public StreamManager getStreamManager() {
1:     return new OneForOneStreamManager();
1:   }
1: 
1: }
============================================================================