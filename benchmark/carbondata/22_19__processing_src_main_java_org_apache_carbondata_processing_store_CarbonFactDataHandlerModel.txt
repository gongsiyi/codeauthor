1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
12:cd6a4ff:  */
1:a89587e: 
1:cd6a4ff: package org.apache.carbondata.processing.store;
1:cd6a4ff: 
1:496cde4: import java.util.ArrayList;
1:496cde4: import java.util.HashMap;
1:496cde4: import java.util.Iterator;
1:496cde4: import java.util.List;
1:496cde4: import java.util.Map;
1:cd6a4ff: 
1:e710339: import org.apache.carbondata.common.logging.LogService;
1:e710339: import org.apache.carbondata.common.logging.LogServiceFactory;
1:ef92abf: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:dc83b2a: import org.apache.carbondata.core.datastore.TableSpec;
1:ce09aaa: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1:ef92abf: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1:e710339: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1:1155d4d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonMetadata;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:98df130: import org.apache.carbondata.core.metadata.datatype.DataType;
1:6f1767b: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:6f1767b: import org.apache.carbondata.core.metadata.encoder.Encoding;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:6f1767b: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:6f1767b: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:cc59b24: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:e710339: import org.apache.carbondata.core.util.CarbonProperties;
1:ef92abf: import org.apache.carbondata.core.util.CarbonUtil;
1:ce09aaa: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:f089287: import org.apache.carbondata.processing.datamap.DataMapWriterListener;
1:cd6a4ff: import org.apache.carbondata.processing.datatypes.GenericDataType;
1:349c59c: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1:6f1767b: import org.apache.carbondata.processing.loading.DataField;
1:349c59c: import org.apache.carbondata.processing.loading.constants.DataLoadProcessorConstants;
1:349c59c: import org.apache.carbondata.processing.loading.model.CarbonLoadModel;
1:349c59c: import org.apache.carbondata.processing.loading.sort.SortScopeOptions;
1:ef92abf: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1:cd6a4ff: 
1:353272e: // This class contains all the data required for processing and writing the carbon data
1:353272e: // TODO: we should try to minimize this class as refactorying loading process
1:cd6a4ff: public class CarbonFactDataHandlerModel {
1:cd6a4ff: 
13:cd6a4ff:   /**
1:e710339:    * LOGGER
1:e710339:    */
1:e710339:   private static final LogService LOGGER =
1:e710339:       LogServiceFactory.getLogService(CarbonFactDataHandlerModel.class.getName());
1:e710339: 
1:e710339:   /**
1:cd6a4ff:    * dbName
1:cd6a4ff:    */
1:cd6a4ff:   private String databaseName;
1:cd6a4ff:   /**
1:cd6a4ff:    * table name
1:cd6a4ff:    */
1:cd6a4ff:   private String tableName;
1:cd6a4ff: 
1:cd61beb:   public int getBlockSizeInMB() {
1:cd61beb:     return blockSize;
9:cd6a4ff:   }
1:e710339: 
1:cd61beb:   public void setBlockSizeInMB(int blockSize) {
1:cd61beb:     this.blockSize = blockSize;
1:e710339:   }
1:cbf8797: 
1:e710339:   /**
1:cd61beb:    * table blocksize in MB
1:cd6a4ff:    */
1:cd61beb:   private int blockSize;
1:cd6a4ff:   /**
1:cd6a4ff:    * total count of measures in table
1:cd6a4ff:    */
1:cd6a4ff:   private int measureCount;
1:cd6a4ff:   /**
1:cd6a4ff:    * local store location
1:cd6a4ff:    */
1:ded8b41:   private String[] storeLocation;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:353272e:    * length of each dimension, including dictionary, nodictioncy, complex dimension
1:cd6a4ff:    */
1:cd6a4ff:   private int[] dimLens;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:353272e:    * total number of no dictionary dimension in the table
1:cd6a4ff:    */
1:cd6a4ff:   private int noDictionaryCount;
1:cd6a4ff:   /**
1:353272e:    * total number of dictionary dimension and complex dimension columns in table
1:cd6a4ff:    */
1:cd6a4ff:   private int dimensionCount;
1:cd6a4ff:   /**
1:cd6a4ff:    * map which maintains indexing of complex columns
1:cd6a4ff:    */
1:cd6a4ff:   private Map<Integer, GenericDataType> complexIndexMap;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Segment properties
1:cd6a4ff:    */
1:cd6a4ff:   private SegmentProperties segmentProperties;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * primitive dimensions cardinality
1:cd6a4ff:    */
1:cd6a4ff:   private int[] primitiveDimLens;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:98df130:    * data type of all measures in the table
1:cd6a4ff:    */
1:98df130:   private DataType[] measureDataType;
1:cd6a4ff:   /**
1:cd6a4ff:    * carbon data file attributes like task id, file stamp
1:cd6a4ff:    */
1:cd6a4ff:   private CarbonDataFileAttributes carbonDataFileAttributes;
1:cd6a4ff:   /**
1:cd6a4ff:    * carbon data directory path
1:cd6a4ff:    */
1:cd6a4ff:   private String carbonDataDirectoryPath;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * cardinality of dimension including no dictionary. no dictionary cardinality
1:cd6a4ff:    * is set to -1
1:cd6a4ff:    */
1:cd6a4ff:   private int[] colCardinality;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * wrapper column schema
1:cd6a4ff:    */
1:cd6a4ff:   private List<ColumnSchema> wrapperColumnSchema;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This is the boolean which will determine whether the data handler call is from the compaction
1:cd6a4ff:    * or not.
1:cd6a4ff:    */
1:cd6a4ff:   private boolean isCompactionFlow;
1:496cde4: 
1:cbf8797:   private int bucketId = 0;
1:cbf8797: 
1:3251c89:   private String segmentId;
1:ef92abf: 
1:496cde4:   /**
1:fc1af96:    * schema updated time stamp to be used for restructure scenarios
1:496cde4:    */
1:fc1af96:   private long schemaUpdatedTimeStamp;
1:ef92abf: 
1:b13ead9:   private int taskExtension;
1:b13ead9: 
1:353272e:   // key generator for complex dimension
1:353272e:   private KeyGenerator[] complexDimensionKeyGenerator;
1:ef92abf: 
1:dc83b2a:   private TableSpec tableSpec;
1:ef92abf: 
1:82741c1:   private SortScopeOptions.SortScope sortScope;
1:cd6a4ff: 
1:f089287:   private DataMapWriterListener dataMapWriterlistener;
1:cd6a4ff: 
1:a89587e:   private short writingCoresCount;
1:a89587e: 
1:e710339:   private Map<String, LocalDictionaryGenerator> columnLocalDictGenMap;
1:e710339: 
1:e710339:   private int numberOfCores;
1:e710339: 
1:6f1767b:   private List<Integer> varcharDimIdxInNoDict;
1:6f1767b: 
1:8f08c4a:   private String columnCompressor;
1:8f08c4a: 
1:ef92abf:   /**
1:ef92abf:    * Create the model using @{@link CarbonDataLoadConfiguration}
1:ef92abf:    */
1:ef92abf:   public static CarbonFactDataHandlerModel createCarbonFactDataHandlerModel(
1:ded8b41:       CarbonDataLoadConfiguration configuration, String[] storeLocation, int bucketId,
1:7f4bd3d:       int taskExtension, DataMapWriterListener listener) {
1:496cde4:     CarbonTableIdentifier identifier =
2:ef92abf:         configuration.getTableIdentifier().getCarbonTableIdentifier();
1:ef92abf: 
1:b13ead9:     int[] dimLensWithComplex = configuration.getCardinalityFinder().getCardinality();
1:9f94529:     if (!configuration.isSortTable()) {
1:9f94529:       for (int i = 0; i < dimLensWithComplex.length; i++) {
1:9f94529:         if (dimLensWithComplex[i] != 0) {
1:9f94529:           dimLensWithComplex[i] = Integer.MAX_VALUE;
1:ef92abf:         }
1:ef92abf:       }
1:ef92abf:     }
2:ef92abf:     CarbonTable carbonTable = CarbonMetadata.getInstance().getCarbonTable(
1:7e124f4:         identifier.getDatabaseName(), identifier.getTableName());
1:cd6a4ff: 
1:ef92abf:     List<ColumnSchema> wrapperColumnSchema = CarbonUtil
1:81149f6:         .getColumnSchemaList(carbonTable.getDimensionByTableName(identifier.getTableName()),
1:81149f6:             carbonTable.getMeasureByTableName(identifier.getTableName()));
1:ef92abf:     int[] colCardinality =
1:ef92abf:         CarbonUtil.getFormattedCardinality(dimLensWithComplex, wrapperColumnSchema);
1:cd6a4ff: 
1:ef92abf:     SegmentProperties segmentProperties =
1:ef92abf:         new SegmentProperties(wrapperColumnSchema, colCardinality);
1:ef92abf: 
1:353272e:     int[] dimLens = configuration.calcDimensionLengths();
1:cd6a4ff: 
1:ef92abf:     int dimensionCount = configuration.getDimensionCount();
1:ef92abf:     int noDictionaryCount = configuration.getNoDictionaryCount();
1:3202cf5:     int complexDimensionCount = configuration.getComplexDictionaryColumnCount() + configuration
1:3202cf5:         .getComplexNonDictionaryColumnCount();
1:ef92abf:     int measureCount = configuration.getMeasureCount();
1:ef92abf: 
1:496cde4:     int simpleDimsCount = dimensionCount - noDictionaryCount - complexDimensionCount;
1:ef92abf:     int[] simpleDimsLen = new int[simpleDimsCount];
1:ef92abf:     for (int i = 0; i < simpleDimsCount; i++) {
1:ef92abf:       simpleDimsLen[i] = dimLens[i];
1:cd6a4ff:     }
1:6f1767b: 
1:6f1767b:     // for dynamic page size in write step if varchar columns exist
1:6f1767b:     List<Integer> varcharDimIdxInNoDict = new ArrayList<>();
1:6f1767b:     for (DataField dataField : configuration.getDataFields()) {
1:6f1767b:       CarbonColumn column = dataField.getColumn();
1:6f1767b:       if (!column.isComplex() && !dataField.hasDictionaryEncoding() &&
1:6f1767b:               column.getDataType() == DataTypes.VARCHAR) {
1:6f1767b:         // ordinal is set in CarbonTable.fillDimensionsAndMeasuresForTables()
1:11fb422:         varcharDimIdxInNoDict.add(column.getOrdinal() - simpleDimsCount);
1:6f1767b:       }
1:6f1767b:     }
1:6f1767b: 
1:ef92abf:     //To Set MDKey Index of each primitive type in complex type
1:ef92abf:     int surrIndex = simpleDimsCount;
1:ef92abf:     Iterator<Map.Entry<String, GenericDataType>> complexMap =
1:3202cf5:         CarbonDataProcessorUtil.getComplexTypesMap(configuration.getDataFields(), configuration)
1:3202cf5:             .entrySet().iterator();
1:ef92abf:     Map<Integer, GenericDataType> complexIndexMap = new HashMap<>(complexDimensionCount);
1:ef92abf:     while (complexMap.hasNext()) {
1:ef92abf:       Map.Entry<String, GenericDataType> complexDataType = complexMap.next();
1:ef92abf:       complexDataType.getValue().setOutputArrayIndex(0);
1:ef92abf:       complexIndexMap.put(simpleDimsCount, complexDataType.getValue());
1:ef92abf:       simpleDimsCount++;
1:ef92abf:       List<GenericDataType> primitiveTypes = new ArrayList<GenericDataType>();
1:ef92abf:       complexDataType.getValue().getAllPrimitiveChildren(primitiveTypes);
1:ef92abf:       for (GenericDataType eachPrimitive : primitiveTypes) {
1:06d38ff:         if (eachPrimitive.getIsColumnDictionary()) {
1:06d38ff:           eachPrimitive.setSurrogateIndex(surrIndex++);
1:06d38ff:         }
1:ef92abf:       }
1:ef92abf:     }
1:ef92abf: 
1:ef92abf:     CarbonDataFileAttributes carbonDataFileAttributes =
1:4430178:         new CarbonDataFileAttributes(Long.parseLong(configuration.getTaskNo()),
1:4827315:             (Long) configuration.getDataLoadProperty(DataLoadProcessorConstants.FACT_TIME_STAMP));
1:ef92abf:     String carbonDataDirectoryPath = getCarbonDataFolderLocation(configuration);
1:ef92abf: 
1:ef92abf:     CarbonFactDataHandlerModel carbonFactDataHandlerModel = new CarbonFactDataHandlerModel();
1:fc1af96:     carbonFactDataHandlerModel.setSchemaUpdatedTimeStamp(configuration.getSchemaUpdatedTimeStamp());
1:9db662a:     carbonFactDataHandlerModel.setDatabaseName(identifier.getDatabaseName());
1:9db662a:     carbonFactDataHandlerModel.setTableName(identifier.getTableName());
1:ef92abf:     carbonFactDataHandlerModel.setMeasureCount(measureCount);
1:496cde4:     carbonFactDataHandlerModel.setStoreLocation(storeLocation);
1:ef92abf:     carbonFactDataHandlerModel.setDimLens(dimLens);
1:ef92abf:     carbonFactDataHandlerModel.setNoDictionaryCount(noDictionaryCount);
1:353272e:     carbonFactDataHandlerModel.setDimensionCount(
1:353272e:         configuration.getDimensionCount() - noDictionaryCount);
1:ef92abf:     carbonFactDataHandlerModel.setComplexIndexMap(complexIndexMap);
1:ef92abf:     carbonFactDataHandlerModel.setSegmentProperties(segmentProperties);
1:ef92abf:     carbonFactDataHandlerModel.setColCardinality(colCardinality);
1:353272e:     carbonFactDataHandlerModel.setMeasureDataType(configuration.getMeasureDataType());
1:ef92abf:     carbonFactDataHandlerModel.setWrapperColumnSchema(wrapperColumnSchema);
1:ef92abf:     carbonFactDataHandlerModel.setPrimitiveDimLens(simpleDimsLen);
1:ef92abf:     carbonFactDataHandlerModel.setCarbonDataFileAttributes(carbonDataFileAttributes);
1:cc59b24:     carbonFactDataHandlerModel.setCarbonDataDirectoryPath(carbonDataDirectoryPath);
1:cc59b24:     carbonFactDataHandlerModel.setBlockSizeInMB(carbonTable.getBlockSizeInMB());
1:353272e:     carbonFactDataHandlerModel.setComplexDimensionKeyGenerator(
1:353272e:         configuration.createKeyGeneratorForComplexDimension());
1:cbf8797:     carbonFactDataHandlerModel.bucketId = bucketId;
1:3251c89:     carbonFactDataHandlerModel.segmentId = configuration.getSegmentId();
1:b13ead9:     carbonFactDataHandlerModel.taskExtension = taskExtension;
1:dc83b2a:     carbonFactDataHandlerModel.tableSpec = configuration.getTableSpec();
1:82741c1:     carbonFactDataHandlerModel.sortScope = CarbonDataProcessorUtil.getSortScope(configuration);
1:8f08c4a:     carbonFactDataHandlerModel.columnCompressor = configuration.getColumnCompressor();
1:cd6a4ff: 
1:7f4bd3d:     if (listener == null) {
1:7f4bd3d:       listener = new DataMapWriterListener();
1:7f4bd3d:       listener.registerAllWriter(
1:7f4bd3d:           configuration.getTableSpec().getCarbonTable(),
1:7f4bd3d:           configuration.getSegmentId(),
1:7f4bd3d:           CarbonTablePath.getShardName(
1:7f4bd3d:               carbonDataFileAttributes.getTaskId(),
1:7f4bd3d:               bucketId,
1:7f4bd3d:               0,
1:60dfdd3:               String.valueOf(carbonDataFileAttributes.getFactTimeStamp()),
1:cd7c210:               configuration.getSegmentId()),
1:cd7c210:           segmentProperties);
1:7f4bd3d:     }
1:f089287:     carbonFactDataHandlerModel.dataMapWriterlistener = listener;
1:a89587e:     carbonFactDataHandlerModel.writingCoresCount = configuration.getWritingCoresCount();
1:e710339:     setNumberOfCores(carbonFactDataHandlerModel);
1:6f1767b:     carbonFactDataHandlerModel.setVarcharDimIdxInNoDict(varcharDimIdxInNoDict);
1:cc59b24:     return carbonFactDataHandlerModel;
1:ef92abf:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cc59b24:    * This method will create a model object for carbon fact data handler
1:cc59b24:    *
1:cc59b24:    * @param loadModel
1:cc59b24:    * @return
1:cd6a4ff:    */
1:cc59b24:   public static CarbonFactDataHandlerModel getCarbonFactDataHandlerModel(CarbonLoadModel loadModel,
1:cc59b24:       CarbonTable carbonTable, SegmentProperties segmentProperties, String tableName,
1:8d3c774:       String[] tempStoreLocation, String carbonDataDirectoryPath) {
1:6f1767b: 
1:6f1767b:     // for dynamic page size in write step if varchar columns exist
1:6f1767b:     List<Integer> varcharDimIdxInNoDict = new ArrayList<>();
1:6f1767b:     List<CarbonDimension> allDimensions = carbonTable.getDimensions();
1:11fb422:     int dictDimCount = allDimensions.size() - segmentProperties.getNumberOfNoDictionaryDimension()
1:11fb422:             - segmentProperties.getComplexDimensions().size();
1:6f1767b:     for (CarbonDimension dim : allDimensions) {
1:6f1767b:       if (!dim.isComplex() && !dim.hasEncoding(Encoding.DICTIONARY) &&
1:6f1767b:           dim.getDataType() == DataTypes.VARCHAR) {
1:6f1767b:         // ordinal is set in CarbonTable.fillDimensionsAndMeasuresForTables()
1:6f1767b:         varcharDimIdxInNoDict.add(dim.getOrdinal() - dictDimCount);
1:6f1767b:       }
1:6f1767b:     }
1:6f1767b: 
1:cc59b24:     CarbonFactDataHandlerModel carbonFactDataHandlerModel = new CarbonFactDataHandlerModel();
1:ebc5ee9:     carbonFactDataHandlerModel.setSchemaUpdatedTimeStamp(carbonTable.getTableLastUpdatedTime());
1:cc59b24:     carbonFactDataHandlerModel.setDatabaseName(loadModel.getDatabaseName());
1:cc59b24:     carbonFactDataHandlerModel.setTableName(tableName);
1:cc59b24:     carbonFactDataHandlerModel.setMeasureCount(segmentProperties.getMeasures().size());
1:cc59b24:     carbonFactDataHandlerModel.setStoreLocation(tempStoreLocation);
1:cc59b24:     carbonFactDataHandlerModel.setDimLens(segmentProperties.getDimColumnsCardinality());
1:cc59b24:     carbonFactDataHandlerModel.setSegmentProperties(segmentProperties);
1:b0aee53:     carbonFactDataHandlerModel.setSegmentId(loadModel.getSegmentId());
1:496cde4:     carbonFactDataHandlerModel
1:cc59b24:         .setNoDictionaryCount(segmentProperties.getNumberOfNoDictionaryDimension());
1:cc59b24:     carbonFactDataHandlerModel.setDimensionCount(
1:cc59b24:         segmentProperties.getDimensions().size() - carbonFactDataHandlerModel
1:cc59b24:             .getNoDictionaryCount());
1:cc59b24:     List<ColumnSchema> wrapperColumnSchema = CarbonUtil
1:cc59b24:         .getColumnSchemaList(carbonTable.getDimensionByTableName(tableName),
1:cc59b24:             carbonTable.getMeasureByTableName(tableName));
1:cc59b24:     carbonFactDataHandlerModel.setWrapperColumnSchema(wrapperColumnSchema);
1:cc59b24:     // get the cardinality for all all the columns including no dictionary columns
1:cc59b24:     int[] formattedCardinality = CarbonUtil
1:cc59b24:         .getFormattedCardinality(segmentProperties.getDimColumnsCardinality(), wrapperColumnSchema);
1:cc59b24:     carbonFactDataHandlerModel.setColCardinality(formattedCardinality);
1:cc59b24:     //TO-DO Need to handle complex types here .
1:cc59b24:     Map<Integer, GenericDataType> complexIndexMap =
1:cc59b24:         new HashMap<Integer, GenericDataType>(segmentProperties.getComplexDimensions().size());
1:cc59b24:     carbonFactDataHandlerModel.setComplexIndexMap(complexIndexMap);
1:4d70a21:     DataType[] measureDataTypes = new DataType[segmentProperties.getMeasures().size()];
1:cc59b24:     int i = 0;
1:cc59b24:     for (CarbonMeasure msr : segmentProperties.getMeasures()) {
1:4d70a21:       measureDataTypes[i++] = msr.getDataType();
1:ef92abf:     }
1:4d70a21:     carbonFactDataHandlerModel.setMeasureDataType(measureDataTypes);
1:877eabd:     CarbonUtil.checkAndCreateFolderWithPermission(carbonDataDirectoryPath);
1:ef92abf:     carbonFactDataHandlerModel.setCarbonDataDirectoryPath(carbonDataDirectoryPath);
1:cc59b24:     carbonFactDataHandlerModel.setPrimitiveDimLens(segmentProperties.getDimColumnsCardinality());
1:496cde4:     carbonFactDataHandlerModel.setBlockSizeInMB(carbonTable.getBlockSizeInMB());
1:8f08c4a:     carbonFactDataHandlerModel.setColumnCompressor(loadModel.getColumnCompressor());
1:ef92abf: 
1:6c5abdd:     carbonFactDataHandlerModel.tableSpec = new TableSpec(carbonTable);
1:d35fbaf:     DataMapWriterListener listener = new DataMapWriterListener();
1:d35fbaf:     listener.registerAllWriter(
1:84102a2:         carbonTable,
1:d35fbaf:         loadModel.getSegmentId(),
1:9db662a:         CarbonTablePath.getShardName(
1:9db662a:             CarbonTablePath.DataFileUtil.getTaskIdFromTaskNo(loadModel.getTaskNo()),
1:9db662a:             carbonFactDataHandlerModel.getBucketId(),
1:9db662a:             carbonFactDataHandlerModel.getTaskExtension(),
1:60dfdd3:             String.valueOf(loadModel.getFactTimeStamp()),
1:cd7c210:             loadModel.getSegmentId()),
1:cd7c210:         segmentProperties);
1:d35fbaf:     carbonFactDataHandlerModel.dataMapWriterlistener = listener;
1:e710339:     setNumberOfCores(carbonFactDataHandlerModel);
1:334e647:     carbonFactDataHandlerModel
1:334e647:         .setColumnLocalDictGenMap(CarbonUtil.getLocalDictionaryModel(carbonTable));
1:6f1767b:     carbonFactDataHandlerModel.setVarcharDimIdxInNoDict(varcharDimIdxInNoDict);
1:ef92abf:     return carbonFactDataHandlerModel;
1:cd6a4ff:   }
1:cd6a4ff: 
1:ef92abf:   /**
1:ef92abf:    * This method will get the store location for the given path, segment id and partition id
1:ef92abf:    *
1:ef92abf:    * @return data directory path
1:ef92abf:    */
1:ef92abf:   private static String getCarbonDataFolderLocation(CarbonDataLoadConfiguration configuration) {
1:877eabd:     // configuration.getDataWritePath will not be null only in case of partition
1:8d3c774:     if (configuration.getDataWritePath() != null) {
1:877eabd:       String paths = configuration.getDataWritePath();
1:877eabd:       AbsoluteTableIdentifier absoluteTableIdentifier = configuration.getTableIdentifier();
1:877eabd:       String partPath = absoluteTableIdentifier.getTablePath();
1:877eabd:       String[] dirs = paths.split(partPath);
1:877eabd:       /* it will create folder one by one and apply the permissions
1:877eabd:        else creation of folder in one go will set the permission for last directory only
1:877eabd:        e.g. paths="/home/rahul/Documents/store/carbonTable1/emp_name=rahul/loc=india/dept=rd"
1:877eabd:             So, dirs={"","/emp_name=rahul/loc=india/dept=rd"}
1:877eabd:             if (dirs.length > 1) then partDirs ={"","emp_name=rahul","loc=india","dept=rd"}
1:877eabd:             forEach partDirs partpath(say "/home/rahul/Documents/store/carbonTable1") will
1:877eabd:             be keep appending with "emp_name=rahul","loc=india","dept=rd" sequentially
1:cd6a4ff:       */
1:877eabd:       if (dirs.length > 1) {
1:877eabd:         String[] partDirs = dirs[1].split(CarbonCommonConstants.FILE_SEPARATOR);
1:877eabd:         for (String partDir : partDirs) {
1:877eabd:           if (!partDir.isEmpty()) {
1:877eabd:             partPath = partPath.concat(CarbonCommonConstants.FILE_SEPARATOR + partDir);
1:877eabd:             CarbonUtil.checkAndCreateFolderWithPermission(partPath);
1:8d3c774:           }
1:cd6a4ff:         }
1:ef92abf:       } else {
1:877eabd:         CarbonUtil.checkAndCreateFolderWithPermission(paths);
1:cd6a4ff:       }
1:877eabd:       return paths;
1:cd6a4ff:     }
1:1155d4d:     AbsoluteTableIdentifier absoluteTableIdentifier = configuration.getTableIdentifier();
1:280a400:     String carbonDataDirectoryPath;
1:b7b8073:     if (!configuration.isCarbonTransactionalTable()) {
1:280a400:       carbonDataDirectoryPath = absoluteTableIdentifier.getTablePath();
1:280a400:     } else {
1:280a400:       carbonDataDirectoryPath = CarbonTablePath
1:280a400:           .getSegmentPath(absoluteTableIdentifier.getTablePath(),
1:ef92abf:               configuration.getSegmentId() + "");
1:cd6a4ff:     }
1:8d3c774:     CarbonUtil.checkAndCreateFolder(carbonDataDirectoryPath);
1:ef92abf:     return carbonDataDirectoryPath;
1:ef92abf:   }
1:ef92abf: 
1:cd6a4ff:   public int[] getColCardinality() {
1:cd6a4ff:     return colCardinality;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void setColCardinality(int[] colCardinality) {
1:cd6a4ff:     this.colCardinality = colCardinality;
1:cd6a4ff:   }
1:cd6a4ff:   public CarbonDataFileAttributes getCarbonDataFileAttributes() {
1:cd6a4ff:     return carbonDataFileAttributes;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void setCarbonDataFileAttributes(CarbonDataFileAttributes carbonDataFileAttributes) {
1:cd6a4ff:     this.carbonDataFileAttributes = carbonDataFileAttributes;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public String getDatabaseName() {
1:cd6a4ff:     return databaseName;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void setDatabaseName(String databaseName) {
1:cd6a4ff:     this.databaseName = databaseName;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public String getTableName() {
1:cd6a4ff:     return tableName;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void setTableName(String tableName) {
1:cd6a4ff:     this.tableName = tableName;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public int getMeasureCount() {
1:cd6a4ff:     return measureCount;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void setMeasureCount(int measureCount) {
1:cd6a4ff:     this.measureCount = measureCount;
1:cd6a4ff:   }
1:cd6a4ff: 
1:ded8b41:   public String[] getStoreLocation() {
1:cd6a4ff:     return storeLocation;
1:cd6a4ff:   }
1:cd6a4ff: 
1:ded8b41:   public void setStoreLocation(String[] storeLocation) {
1:cd6a4ff:     this.storeLocation = storeLocation;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public int[] getDimLens() {
1:cd6a4ff:     return dimLens;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void setDimLens(int[] dimLens) {
1:cd6a4ff:     this.dimLens = dimLens;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public int getNoDictionaryCount() {
1:cd6a4ff:     return noDictionaryCount;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void setNoDictionaryCount(int noDictionaryCount) {
1:cd6a4ff:     this.noDictionaryCount = noDictionaryCount;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public int getDimensionCount() {
1:cd6a4ff:     return dimensionCount;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void setDimensionCount(int dimensionCount) {
1:cd6a4ff:     this.dimensionCount = dimensionCount;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public Map<Integer, GenericDataType> getComplexIndexMap() {
1:cd6a4ff:     return complexIndexMap;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void setComplexIndexMap(Map<Integer, GenericDataType> complexIndexMap) {
1:cd6a4ff:     this.complexIndexMap = complexIndexMap;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public int[] getPrimitiveDimLens() {
1:cd6a4ff:     return primitiveDimLens;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void setPrimitiveDimLens(int[] primitiveDimLens) {
1:cd6a4ff:     this.primitiveDimLens = primitiveDimLens;
1:cd6a4ff:   }
1:cd6a4ff: 
1:98df130:   public DataType[] getMeasureDataType() {
1:98df130:     return measureDataType;
1:cd6a4ff:   }
1:cd6a4ff: 
1:98df130:   public void setMeasureDataType(DataType[] measureDataType) {
1:98df130:     this.measureDataType = measureDataType;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public String getCarbonDataDirectoryPath() {
1:cd6a4ff:     return carbonDataDirectoryPath;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public void setCarbonDataDirectoryPath(String carbonDataDirectoryPath) {
1:cd6a4ff:     this.carbonDataDirectoryPath = carbonDataDirectoryPath;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * To check whether the data handler is for compaction flow or not.
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   public boolean isCompactionFlow() {
1:cd6a4ff:     return isCompactionFlow;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * If the handler is calling from the compaction flow set this to true.
1:cd6a4ff:    * @param compactionFlow
1:cd6a4ff:    */
1:cd6a4ff:   public void setCompactionFlow(boolean compactionFlow) {
1:cd6a4ff:     isCompactionFlow = compactionFlow;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    *
1:cd6a4ff:    * @return segmentProperties
1:cd6a4ff:    */
1:cd6a4ff:   public SegmentProperties getSegmentProperties() {
1:cd6a4ff:     return segmentProperties;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    *
1:cd6a4ff:    * @param segmentProperties
1:cd6a4ff:    */
1:cd6a4ff:   public void setSegmentProperties(SegmentProperties segmentProperties) {
1:cd6a4ff:     this.segmentProperties = segmentProperties;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @return wrapperColumnSchema
1:cd6a4ff:    */
1:cd6a4ff:   public List<ColumnSchema> getWrapperColumnSchema() {
1:cd6a4ff:     return wrapperColumnSchema;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:e710339:    * @param wrapperColumnSchema
1:e710339:    */
1:cd6a4ff:   public void setWrapperColumnSchema(List<ColumnSchema> wrapperColumnSchema) {
1:cd6a4ff:     this.wrapperColumnSchema = wrapperColumnSchema;
1:e710339:   }
1:496cde4: 
1:cbf8797:   public int getBucketId() {
1:cbf8797:     return bucketId;
1:e710339:   }
1:cd6a4ff: 
1:874764f:   public void setBucketId(Integer bucketId) { this.bucketId = bucketId; }
1:cd6a4ff: 
1:fc1af96:   public long getSchemaUpdatedTimeStamp() {
1:fc1af96:     return schemaUpdatedTimeStamp;
1:e710339:   }
1:cd6a4ff: 
1:fc1af96:   public void setSchemaUpdatedTimeStamp(long schemaUpdatedTimeStamp) {
1:fc1af96:     this.schemaUpdatedTimeStamp = schemaUpdatedTimeStamp;
1:e710339:   }
1:cd6a4ff: 
1:3251c89:   public String getSegmentId() {
1:3251c89:     return segmentId;
1:cbf8797:   }
1:cd6a4ff: 
1:3251c89:   public void setSegmentId(String segmentId) {
1:3251c89:     this.segmentId = segmentId;
1:496cde4:   }
1:b13ead9: 
1:b13ead9:   public int getTaskExtension() {
1:b13ead9:     return taskExtension;
1:b13ead9:   }
1:cd6a4ff: 
1:353272e:   public KeyGenerator[] getComplexDimensionKeyGenerator() {
1:353272e:     return complexDimensionKeyGenerator;
1:496cde4:   }
1:cd6a4ff: 
1:353272e:   public void setComplexDimensionKeyGenerator(KeyGenerator[] complexDimensionKeyGenerator) {
1:353272e:     this.complexDimensionKeyGenerator = complexDimensionKeyGenerator;
1:cd6a4ff:   }
1:cd6a4ff: 
1:353272e:   public KeyGenerator getMDKeyGenerator() {
1:353272e:     return segmentProperties.getDimensionKeyGenerator();
1:cd6a4ff:   }
1:cd6a4ff: 
1:353272e:   // return the number of complex columns
1:353272e:   public int getComplexColumnCount() {
1:353272e:     return complexIndexMap.size();
1:cd6a4ff:   }
1:cd6a4ff: 
1:dc83b2a:   // return the number of complex column after complex columns are expanded
1:dc83b2a:   public int getExpandedComplexColsCount() {
1:dc83b2a:     int count = 0;
1:dc83b2a:     int dictDimensionCount = getDimensionCount();
1:dc83b2a:     for (int i = 0; i < dictDimensionCount; i++) {
1:dc83b2a:       GenericDataType complexDataType = getComplexIndexMap().get(i);
1:dc83b2a:       if (complexDataType != null) {
1:dc83b2a:         count += complexDataType.getColsCount();
1:cd6a4ff:       }
1:cd6a4ff:     }
1:dc83b2a:     return count;
1:cd6a4ff:   }
1:cd6a4ff: 
1:dc83b2a:   public TableSpec getTableSpec() {
1:dc83b2a:     return tableSpec;
1:cd6a4ff:   }
1:cd6a4ff: 
1:82741c1:   public SortScopeOptions.SortScope getSortScope() {
1:82741c1:     return sortScope;
1:cd6a4ff:   }
1:cd6a4ff: 
1:a89587e:   public short getWritingCoresCount() {
1:a89587e:     return writingCoresCount;
1:a89587e:   }
1:a89587e: 
1:f089287:   public DataMapWriterListener getDataMapWriterlistener() {
1:f089287:     return dataMapWriterlistener;
1:e710339:   }
1:cd6a4ff: 
1:e710339:   public Map<String, LocalDictionaryGenerator> getColumnLocalDictGenMap() {
1:e710339:     return columnLocalDictGenMap;
1:e710339:   }
1:e710339: 
1:e710339:   public void setColumnLocalDictGenMap(
1:e710339:       Map<String, LocalDictionaryGenerator> columnLocalDictGenMap) {
1:e710339:     this.columnLocalDictGenMap = columnLocalDictGenMap;
1:e710339:   }
1:e710339: 
1:e710339:   private static void setNumberOfCores(CarbonFactDataHandlerModel model) {
1:e710339:     // in compaction flow the measure with decimal type will come as spark decimal.
1:e710339:     // need to convert it to byte array.
1:e710339:     if (model.isCompactionFlow()) {
1:e710339:       try {
1:e710339:         model.numberOfCores = Integer.parseInt(CarbonProperties.getInstance()
1:e710339:             .getProperty(CarbonCommonConstants.NUM_CORES_COMPACTING,
1:e710339:                 CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));
1:e710339:       } catch (NumberFormatException exc) {
1:e710339:         LOGGER.error("Configured value for property " + CarbonCommonConstants.NUM_CORES_COMPACTING
1:e710339:             + "is wrong.Falling back to the default value "
1:e710339:             + CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);
1:e710339:         model.numberOfCores = Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);
1:e710339:       }
1:e710339:     } else {
1:e710339:       model.numberOfCores = CarbonProperties.getInstance().getNumberOfCores();
1:e710339:     }
1:e710339: 
1:e710339:     if (model.sortScope != null && model.sortScope.equals(SortScopeOptions.SortScope.GLOBAL_SORT)) {
1:e710339:       model.numberOfCores = 1;
1:e710339:     }
1:e710339:     // Overriding it to the task specified cores.
1:e710339:     if (model.getWritingCoresCount() > 0) {
1:e710339:       model.numberOfCores = model.getWritingCoresCount();
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   public int getNumberOfCores() {
1:e710339:     return numberOfCores;
1:e710339:   }
1:6f1767b: 
1:6f1767b:   public void setVarcharDimIdxInNoDict(List<Integer> varcharDimIdxInNoDict) {
1:6f1767b:     this.varcharDimIdxInNoDict = varcharDimIdxInNoDict;
1:6f1767b:   }
1:6f1767b: 
1:6f1767b:   public List<Integer> getVarcharDimIdxInNoDict() {
1:6f1767b:     return varcharDimIdxInNoDict;
1:6f1767b:   }
1:6f1767b: 
1:8f08c4a:   public String getColumnCompressor() {
1:8f08c4a:     return columnCompressor;
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   public void setColumnCompressor(String columnCompressor) {
1:8f08c4a:     this.columnCompressor = columnCompressor;
1:8f08c4a:   }
1:cd6a4ff: }
1:9db662a: 
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:   private String columnCompressor;
1: 
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.columnCompressor = configuration.getColumnCompressor();
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.setColumnCompressor(loadModel.getColumnCompressor());
/////////////////////////////////////////////////////////////////////////
1:   public String getColumnCompressor() {
1:     return columnCompressor;
1:   }
1: 
1:   public void setColumnCompressor(String columnCompressor) {
1:     this.columnCompressor = columnCompressor;
1:   }
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1:               configuration.getSegmentId()),
1:           segmentProperties);
/////////////////////////////////////////////////////////////////////////
1:             loadModel.getSegmentId()),
1:         segmentProperties);
commit:ded8b41
/////////////////////////////////////////////////////////////////////////
1:   private String[] storeLocation;
/////////////////////////////////////////////////////////////////////////
1:       CarbonDataLoadConfiguration configuration, String[] storeLocation, int bucketId,
/////////////////////////////////////////////////////////////////////////
0:       String[] tempStoreLocation) {
/////////////////////////////////////////////////////////////////////////
1:   public String[] getStoreLocation() {
1:   public void setStoreLocation(String[] storeLocation) {
author:Manhua
-------------------------------------------------------------------------------
commit:11fb422
/////////////////////////////////////////////////////////////////////////
1:         varcharDimIdxInNoDict.add(column.getOrdinal() - simpleDimsCount);
/////////////////////////////////////////////////////////////////////////
1:     int dictDimCount = allDimensions.size() - segmentProperties.getNumberOfNoDictionaryDimension()
1:             - segmentProperties.getComplexDimensions().size();
commit:6f1767b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.metadata.encoder.Encoding;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.DataField;
/////////////////////////////////////////////////////////////////////////
1:   private List<Integer> varcharDimIdxInNoDict;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     // for dynamic page size in write step if varchar columns exist
1:     List<Integer> varcharDimIdxInNoDict = new ArrayList<>();
0:     int dictDimCount = configuration.getDimensionCount() - configuration.getNoDictionaryCount();
1:     for (DataField dataField : configuration.getDataFields()) {
1:       CarbonColumn column = dataField.getColumn();
1:       if (!column.isComplex() && !dataField.hasDictionaryEncoding() &&
1:               column.getDataType() == DataTypes.VARCHAR) {
1:         // ordinal is set in CarbonTable.fillDimensionsAndMeasuresForTables()
0:         varcharDimIdxInNoDict.add(column.getOrdinal() - dictDimCount);
1:       }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.setVarcharDimIdxInNoDict(varcharDimIdxInNoDict);
/////////////////////////////////////////////////////////////////////////
1: 
1:     // for dynamic page size in write step if varchar columns exist
1:     List<Integer> varcharDimIdxInNoDict = new ArrayList<>();
1:     List<CarbonDimension> allDimensions = carbonTable.getDimensions();
0:     int dictDimCount = allDimensions.size() - segmentProperties.getNumberOfNoDictionaryDimension();
1:     for (CarbonDimension dim : allDimensions) {
1:       if (!dim.isComplex() && !dim.hasEncoding(Encoding.DICTIONARY) &&
1:           dim.getDataType() == DataTypes.VARCHAR) {
1:         // ordinal is set in CarbonTable.fillDimensionsAndMeasuresForTables()
1:         varcharDimIdxInNoDict.add(dim.getOrdinal() - dictDimCount);
1:       }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.setVarcharDimIdxInNoDict(varcharDimIdxInNoDict);
/////////////////////////////////////////////////////////////////////////
1: 
1:   public void setVarcharDimIdxInNoDict(List<Integer> varcharDimIdxInNoDict) {
1:     this.varcharDimIdxInNoDict = varcharDimIdxInNoDict;
1:   }
1: 
1:   public List<Integer> getVarcharDimIdxInNoDict() {
1:     return varcharDimIdxInNoDict;
1:   }
1: 
commit:84102a2
/////////////////////////////////////////////////////////////////////////
1:         carbonTable,
author:Indhumathi27
-------------------------------------------------------------------------------
commit:06d38ff
/////////////////////////////////////////////////////////////////////////
1:         if (eachPrimitive.getIsColumnDictionary()) {
1:           eachPrimitive.setSurrogateIndex(surrIndex++);
1:         }
author:akashrn5
-------------------------------------------------------------------------------
commit:b0aee53
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.setSegmentId(loadModel.getSegmentId());
commit:7f4bd3d
/////////////////////////////////////////////////////////////////////////
1:       int taskExtension, DataMapWriterListener listener) {
/////////////////////////////////////////////////////////////////////////
1:     if (listener == null) {
1:       listener = new DataMapWriterListener();
1:       listener.registerAllWriter(
1:           configuration.getTableSpec().getCarbonTable(),
1:           configuration.getSegmentId(),
1:           CarbonTablePath.getShardName(
1:               carbonDataFileAttributes.getTaskId(),
1:               bucketId,
1:               0,
0:               String.valueOf(carbonDataFileAttributes.getFactTimeStamp())));
1:     }
author:dhatchayani
-------------------------------------------------------------------------------
commit:6c5abdd
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.tableSpec = new TableSpec(carbonTable);
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:kumarvishal09
-------------------------------------------------------------------------------
commit:334e647
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel
1:         .setColumnLocalDictGenMap(CarbonUtil.getLocalDictionaryModel(carbonTable));
/////////////////////////////////////////////////////////////////////////
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.localdictionary.generator.ColumnLocalDictionaryGenerator;
1: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
1:    * LOGGER
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(CarbonFactDataHandlerModel.class.getName());
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:   private Map<String, LocalDictionaryGenerator> columnLocalDictGenMap;
1: 
1:   private int numberOfCores;
1: 
/////////////////////////////////////////////////////////////////////////
0:     setLocalDictToModel(carbonTable, wrapperColumnSchema, carbonFactDataHandlerModel);
1:     setNumberOfCores(carbonFactDataHandlerModel);
/////////////////////////////////////////////////////////////////////////
0:     setLocalDictToModel(carbonTable, wrapperColumnSchema, carbonFactDataHandlerModel);
1:     setNumberOfCores(carbonFactDataHandlerModel);
/////////////////////////////////////////////////////////////////////////
1:   public Map<String, LocalDictionaryGenerator> getColumnLocalDictGenMap() {
1:     return columnLocalDictGenMap;
1:   }
1: 
1:   /**
0:    * This method prepares a map which will have column and local dictionary generator mapping for
0:    * all the local dictionary columns.
0:    * @param carbonTable
1:    * @param wrapperColumnSchema
0:    * @param carbonFactDataHandlerModel
1:    */
0:   private static void setLocalDictToModel(CarbonTable carbonTable,
0:       List<ColumnSchema> wrapperColumnSchema,
0:       CarbonFactDataHandlerModel carbonFactDataHandlerModel) {
0:     boolean islocalDictEnabled = carbonTable.isLocalDictionaryEnabled();
0:     // creates a map only if local dictionary is enabled, else map will be null
0:     Map<String, LocalDictionaryGenerator> columnLocalDictGenMap = new HashMap<>();
0:     if (islocalDictEnabled) {
0:       int localDictionaryThreshold = carbonTable.getLocalDictionaryThreshold();
0:       for (ColumnSchema columnSchema : wrapperColumnSchema) {
0:         // check whether the column is local dictionary column or not
0:         if (columnSchema.isLocalDictColumn()) {
0:           columnLocalDictGenMap.put(columnSchema.getColumnName(),
0:               new ColumnLocalDictionaryGenerator(localDictionaryThreshold));
1:         }
1:       }
1:     }
0:     if (islocalDictEnabled) {
0:       LOGGER.info("Local dictionary is enabled for table: " + carbonTable.getTableUniqueName());
0:       LOGGER.info(
0:           "Local dictionary threshold for table: " + carbonTable.getTableUniqueName() + " is: "
0:               + carbonTable.getLocalDictionaryThreshold());
0:       Iterator<Map.Entry<String, LocalDictionaryGenerator>> iterator =
0:           columnLocalDictGenMap.entrySet().iterator();
0:       StringBuilder stringBuilder = new StringBuilder();
0:       while (iterator.hasNext()) {
0:         Map.Entry<String, LocalDictionaryGenerator> next = iterator.next();
0:         stringBuilder.append(next.getKey());
0:         stringBuilder.append(',');
1:       }
0:       LOGGER.info("Local dictionary will be generated for the columns:" + stringBuilder.toString()
0:           + " for table: " + carbonTable.getTableUniqueName());
1:     }
0:     carbonFactDataHandlerModel.setColumnLocalDictGenMap(columnLocalDictGenMap);
1:   }
1: 
1:   public void setColumnLocalDictGenMap(
1:       Map<String, LocalDictionaryGenerator> columnLocalDictGenMap) {
1:     this.columnLocalDictGenMap = columnLocalDictGenMap;
1:   }
1: 
1:   private static void setNumberOfCores(CarbonFactDataHandlerModel model) {
1:     // in compaction flow the measure with decimal type will come as spark decimal.
1:     // need to convert it to byte array.
1:     if (model.isCompactionFlow()) {
1:       try {
1:         model.numberOfCores = Integer.parseInt(CarbonProperties.getInstance()
1:             .getProperty(CarbonCommonConstants.NUM_CORES_COMPACTING,
1:                 CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));
1:       } catch (NumberFormatException exc) {
1:         LOGGER.error("Configured value for property " + CarbonCommonConstants.NUM_CORES_COMPACTING
1:             + "is wrong.Falling back to the default value "
1:             + CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);
1:         model.numberOfCores = Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);
1:       }
1:     } else {
1:       model.numberOfCores = CarbonProperties.getInstance().getNumberOfCores();
1:     }
1: 
1:     if (model.sortScope != null && model.sortScope.equals(SortScopeOptions.SortScope.GLOBAL_SORT)) {
1:       model.numberOfCores = 1;
1:     }
1:     // Overriding it to the task specified cores.
1:     if (model.getWritingCoresCount() > 0) {
1:       model.numberOfCores = model.getWritingCoresCount();
1:     }
1:   }
1: 
1:   public int getNumberOfCores() {
1:     return numberOfCores;
1:   }
author:ravipesala
-------------------------------------------------------------------------------
commit:60dfdd3
/////////////////////////////////////////////////////////////////////////
1:               String.valueOf(carbonDataFileAttributes.getFactTimeStamp()),
0:               configuration.getSegmentId()));
/////////////////////////////////////////////////////////////////////////
1:             String.valueOf(loadModel.getFactTimeStamp()),
0:             loadModel.getSegmentId()));
commit:d35fbaf
/////////////////////////////////////////////////////////////////////////
0: import java.util.Random;
/////////////////////////////////////////////////////////////////////////
0:     listener.registerAllWriter(configuration.getTableIdentifier(), configuration.getSegmentId(),
0:         storeLocation[new Random().nextInt(storeLocation.length)]);
/////////////////////////////////////////////////////////////////////////
1:     DataMapWriterListener listener = new DataMapWriterListener();
1:     listener.registerAllWriter(
0:         loadModel.getCarbonDataLoadSchema().getCarbonTable().getAbsoluteTableIdentifier(),
1:         loadModel.getSegmentId(),
0:         tempStoreLocation[new Random().nextInt(tempStoreLocation.length)]);
1:     carbonFactDataHandlerModel.dataMapWriterlistener = listener;
commit:8d3c774
/////////////////////////////////////////////////////////////////////////
1:       String[] tempStoreLocation, String carbonDataDirectoryPath) {
/////////////////////////////////////////////////////////////////////////
1:     CarbonUtil.checkAndCreateFolder(carbonDataDirectoryPath);
/////////////////////////////////////////////////////////////////////////
1:     if (configuration.getDataWritePath() != null) {
0:       CarbonUtil.checkAndCreateFolder(configuration.getDataWritePath());
0:       return configuration.getDataWritePath();
1:     }
commit:a89587e
/////////////////////////////////////////////////////////////////////////
1:   private short writingCoresCount;
1: 
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.writingCoresCount = configuration.getWritingCoresCount();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:   public short getWritingCoresCount() {
1:     return writingCoresCount;
1:   }
1: 
commit:4430178
/////////////////////////////////////////////////////////////////////////
1:         new CarbonDataFileAttributes(Long.parseLong(configuration.getTaskNo()),
commit:e6b6090
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:b13ead9
/////////////////////////////////////////////////////////////////////////
1:   private int taskExtension;
1: 
0:       CarbonDataLoadConfiguration configuration, String storeLocation, int bucketId,
0:       int taskExtension) {
/////////////////////////////////////////////////////////////////////////
1:     int[] dimLensWithComplex = configuration.getCardinalityFinder().getCardinality();
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.taskExtension = taskExtension;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public int getTaskExtension() {
1:     return taskExtension;
1:   }
commit:cbf8797
/////////////////////////////////////////////////////////////////////////
1:   private int bucketId = 0;
1: 
0:       CarbonDataLoadConfiguration configuration, String storeLocation, int bucketId) {
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.bucketId = bucketId;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public int getBucketId() {
1:     return bucketId;
1:   }
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:    * To use kettle flow to load or not.
1:    */
0:   private boolean useKettle = true;
1: 
1:   /**
0:       CarbonDataLoadConfiguration configuration, String storeLocation) {
1:     CarbonTableIdentifier identifier =
0:     CarbonTableIdentifier tableIdentifier =
0:         identifier;
/////////////////////////////////////////////////////////////////////////
1:     int simpleDimsCount = dimensionCount - noDictionaryCount - complexDimensionCount;
/////////////////////////////////////////////////////////////////////////
0:         identifier.getDatabaseName());
0:         .setTableName(identifier.getTableName());
1:     carbonFactDataHandlerModel.setStoreLocation(storeLocation);
1:     carbonFactDataHandlerModel
0:         .setDimensionCount(configuration.getDimensionCount() - noDictionaryCount);
0:     carbonFactDataHandlerModel.setAggType(CarbonDataProcessorUtil
0:         .getAggType(measureCount, identifier.getDatabaseName(), identifier.getTableName()));
1:     carbonFactDataHandlerModel.setBlockSizeInMB(carbonTable.getBlockSizeInMB());
0:     carbonFactDataHandlerModel.setUseKettle(false);
/////////////////////////////////////////////////////////////////////////
0:   public boolean isUseKettle() {
0:     return useKettle;
1:   }
1: 
0:   public void setUseKettle(boolean useKettle) {
0:     this.useKettle = useKettle;
1:   }
commit:ef92abf
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.metadata.CarbonMetadata;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.CarbonTable;
0: import org.apache.carbondata.core.carbon.path.CarbonStorePath;
0: import org.apache.carbondata.core.carbon.path.CarbonTablePath;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.keygenerator.KeyGenerator;
0: import org.apache.carbondata.core.util.CarbonProperties;
1: import org.apache.carbondata.core.util.CarbonUtil;
0: import org.apache.carbondata.processing.newflow.CarbonDataLoadConfiguration;
0: import org.apache.carbondata.processing.newflow.constants.DataLoadProcessorConstants;
1: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Create the model using @{@link CarbonDataLoadConfiguration}
0:    * @param configuration
0:    * @return CarbonFactDataHandlerModel
1:    */
1:   public static CarbonFactDataHandlerModel createCarbonFactDataHandlerModel(
0:       CarbonDataLoadConfiguration configuration) {
1: 
0:     CarbonTableIdentifier tableIdentifier =
1:         configuration.getTableIdentifier().getCarbonTableIdentifier();
0:     boolean[] isUseInvertedIndex =
0:         CarbonDataProcessorUtil.getIsUseInvertedIndex(configuration.getDataFields());
1: 
0:     int[] dimLensWithComplex =
0:         (int[]) configuration.getDataLoadProperty(DataLoadProcessorConstants.DIMENSION_LENGTHS);
0:     List<Integer> dimsLenList = new ArrayList<Integer>();
0:     for (int eachDimLen : dimLensWithComplex) {
0:       if (eachDimLen != 0) dimsLenList.add(eachDimLen);
1:     }
0:     int[] dimLens = new int[dimsLenList.size()];
0:     for (int i = 0; i < dimsLenList.size(); i++) {
0:       dimLens[i] = dimsLenList.get(i);
1:     }
1: 
1:     int dimensionCount = configuration.getDimensionCount();
1:     int noDictionaryCount = configuration.getNoDictionaryCount();
0:     int complexDimensionCount = configuration.getComplexDimensionCount();
1:     int measureCount = configuration.getMeasureCount();
1: 
0:     int simpleDimsCount = dimensionCount - complexDimensionCount;
1:     int[] simpleDimsLen = new int[simpleDimsCount];
1:     for (int i = 0; i < simpleDimsCount; i++) {
1:       simpleDimsLen[i] = dimLens[i];
1:     }
1: 
1:     CarbonTable carbonTable = CarbonMetadata.getInstance().getCarbonTable(
0:         tableIdentifier.getDatabaseName() + CarbonCommonConstants.UNDERSCORE + tableIdentifier
0:             .getTableName());
1:     List<ColumnSchema> wrapperColumnSchema = CarbonUtil
0:         .getColumnSchemaList(carbonTable.getDimensionByTableName(tableIdentifier.getTableName()),
0:             carbonTable.getMeasureByTableName(tableIdentifier.getTableName()));
1:     int[] colCardinality =
1:         CarbonUtil.getFormattedCardinality(dimLensWithComplex, wrapperColumnSchema);
1:     SegmentProperties segmentProperties =
1:         new SegmentProperties(wrapperColumnSchema, colCardinality);
0:     // Actual primitive dimension used to generate start & end key
1: 
0:     KeyGenerator keyGenerator = segmentProperties.getDimensionKeyGenerator();
1: 
1:     //To Set MDKey Index of each primitive type in complex type
1:     int surrIndex = simpleDimsCount;
1:     Iterator<Map.Entry<String, GenericDataType>> complexMap =
0:         CarbonDataProcessorUtil.getComplexTypesMap(configuration.getDataFields()).entrySet()
0:             .iterator();
1:     Map<Integer, GenericDataType> complexIndexMap = new HashMap<>(complexDimensionCount);
1:     while (complexMap.hasNext()) {
1:       Map.Entry<String, GenericDataType> complexDataType = complexMap.next();
1:       complexDataType.getValue().setOutputArrayIndex(0);
1:       complexIndexMap.put(simpleDimsCount, complexDataType.getValue());
1:       simpleDimsCount++;
1:       List<GenericDataType> primitiveTypes = new ArrayList<GenericDataType>();
1:       complexDataType.getValue().getAllPrimitiveChildren(primitiveTypes);
1:       for (GenericDataType eachPrimitive : primitiveTypes) {
0:         eachPrimitive.setSurrogateIndex(surrIndex++);
1:       }
1:     }
1: 
1:     CarbonDataFileAttributes carbonDataFileAttributes =
0:         new CarbonDataFileAttributes(Integer.parseInt(configuration.getTaskNo()),
0:             (String) configuration.getDataLoadProperty(DataLoadProcessorConstants.FACT_TIME_STAMP));
1:     String carbonDataDirectoryPath = getCarbonDataFolderLocation(configuration);
1: 
1:     CarbonFactDataHandlerModel carbonFactDataHandlerModel = new CarbonFactDataHandlerModel();
0:     carbonFactDataHandlerModel.setDatabaseName(
0:         configuration.getTableIdentifier().getCarbonTableIdentifier().getDatabaseName());
0:     carbonFactDataHandlerModel
0:         .setTableName(configuration.getTableIdentifier().getCarbonTableIdentifier().getTableName());
1:     carbonFactDataHandlerModel.setMeasureCount(measureCount);
0:     carbonFactDataHandlerModel.setMdKeyLength(keyGenerator.getKeySizeInBytes());
0:     carbonFactDataHandlerModel.setStoreLocation(configuration.getTableIdentifier().getStorePath());
1:     carbonFactDataHandlerModel.setDimLens(dimLens);
1:     carbonFactDataHandlerModel.setNoDictionaryCount(noDictionaryCount);
0:     carbonFactDataHandlerModel.setDimensionCount(configuration.getDimensionCount());
1:     carbonFactDataHandlerModel.setComplexIndexMap(complexIndexMap);
1:     carbonFactDataHandlerModel.setSegmentProperties(segmentProperties);
1:     carbonFactDataHandlerModel.setColCardinality(colCardinality);
0:     carbonFactDataHandlerModel.setDataWritingRequest(true);
0:     carbonFactDataHandlerModel.setAggType(null);
0:     carbonFactDataHandlerModel.setFactDimLens(dimLens);
1:     carbonFactDataHandlerModel.setWrapperColumnSchema(wrapperColumnSchema);
1:     carbonFactDataHandlerModel.setPrimitiveDimLens(simpleDimsLen);
1:     carbonFactDataHandlerModel.setCarbonDataFileAttributes(carbonDataFileAttributes);
1:     carbonFactDataHandlerModel.setCarbonDataDirectoryPath(carbonDataDirectoryPath);
0:     carbonFactDataHandlerModel.setIsUseInvertedIndex(isUseInvertedIndex);
0:     if (noDictionaryCount > 0 || complexDimensionCount > 0) {
0:       carbonFactDataHandlerModel.setMdKeyIndex(measureCount + 1);
1:     } else {
0:       carbonFactDataHandlerModel.setMdKeyIndex(measureCount);
1:     }
1:     return carbonFactDataHandlerModel;
1:   }
1: 
1:   /**
1:    * This method will get the store location for the given path, segment id and partition id
1:    *
1:    * @return data directory path
1:    */
1:   private static String getCarbonDataFolderLocation(CarbonDataLoadConfiguration configuration) {
0:     String carbonStorePath =
0:         CarbonProperties.getInstance().getProperty(CarbonCommonConstants.STORE_LOCATION_HDFS);
0:     CarbonTableIdentifier tableIdentifier =
1:         configuration.getTableIdentifier().getCarbonTableIdentifier();
1:     CarbonTable carbonTable = CarbonMetadata.getInstance().getCarbonTable(
0:         tableIdentifier.getDatabaseName() + CarbonCommonConstants.UNDERSCORE + tableIdentifier
0:             .getTableName());
0:     CarbonTablePath carbonTablePath =
0:         CarbonStorePath.getCarbonTablePath(carbonStorePath, carbonTable.getCarbonTableIdentifier());
0:     String carbonDataDirectoryPath = carbonTablePath
0:         .getCarbonDataDirectoryPath(configuration.getPartitionId(),
1:             configuration.getSegmentId() + "");
1:     return carbonDataDirectoryPath;
1:   }
1: 
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License; Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing;
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS; WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND; either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.store;
1: 
0: import java.util.List;
0: import java.util.Map;
1: 
0: import org.apache.carbondata.core.carbon.datastore.block.SegmentProperties;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.ColumnSchema;
1: import org.apache.carbondata.processing.datatypes.GenericDataType;
1: 
1: /**
0:  * This class contains all the data required for processing and writing the carbon data
1:  */
1: public class CarbonFactDataHandlerModel {
1: 
1:   /**
1:    * dbName
1:    */
1:   private String databaseName;
1:   /**
1:    * table name
1:    */
1:   private String tableName;
1:   /**
0:    * flag to check whether to group the similar data
1:    */
0:   private boolean isGroupByEnabled;
1:   /**
1:    * total count of measures in table
1:    */
1:   private int measureCount;
1:   /**
0:    * length of mdKey
1:    */
0:   private int mdKeyLength;
1:   /**
0:    * mdKey index in one row object
1:    */
0:   private int mdKeyIndex;
1:   /**
0:    * aggregators (e,g min, amx, sum)
1:    */
0:   private String[] aggregators;
1:   /**
0:    * custom aggregator class which contains the logic of merging data
1:    */
0:   private String[] aggregatorClass;
1:   /**
1:    * local store location
1:    */
0:   private String storeLocation;
1:   /**
0:    * cardinality of all dimensions
1:    */
0:   private int[] factDimLens;
1:   /**
0:    * flag to check whether to merge data based on custom aggregator
1:    */
0:   private boolean isMergingRequestForCustomAgg;
1:   /**
0:    * flag to check whether the request is for updating a member
1:    */
0:   private boolean isUpdateMemberRequest;
1:   /**
0:    * flag to check whether use inverted index
1:    */
0:   private boolean[] isUseInvertedIndex;
1:   /**
0:    * dimension cardinality
1:    */
1:   private int[] dimLens;
1:   /**
0:    * array of fact table columns
1:    */
0:   private String[] factLevels;
1:   /**
0:    * array of aggregate levels
1:    */
0:   private String[] aggLevels;
1:   /**
0:    * flag for data writing request
1:    */
0:   private boolean isDataWritingRequest;
1:   /**
0:    * count of columns for which dictionary is not generated
1:    */
1:   private int noDictionaryCount;
1:   /**
0:    * total number of columns in table
1:    */
1:   private int dimensionCount;
1:   /**
1:    * map which maintains indexing of complex columns
1:    */
1:   private Map<Integer, GenericDataType> complexIndexMap;
1: 
1:   /**
1:    * Segment properties
1:    */
1:   private SegmentProperties segmentProperties;
1: 
1:   /**
1:    * primitive dimensions cardinality
1:    */
1:   private int[] primitiveDimLens;
1: 
1:   /**
0:    * array in which each character represents an aggregation type and
0:    * the array length will be equal to the number of measures in table
1:    */
0:   private char[] aggType;
1:   /**
1:    * carbon data file attributes like task id, file stamp
1:    */
1:   private CarbonDataFileAttributes carbonDataFileAttributes;
1:   /**
1:    * carbon data directory path
1:    */
1:   private String carbonDataDirectoryPath;
1: 
1:   /**
1:    * cardinality of dimension including no dictionary. no dictionary cardinality
1:    * is set to -1
1:    */
1:   private int[] colCardinality;
1: 
1:   /**
1:    * wrapper column schema
1:    */
1:   private List<ColumnSchema> wrapperColumnSchema;
1: 
1:   /**
1:    * This is the boolean which will determine whether the data handler call is from the compaction
1:    * or not.
1:    */
1:   private boolean isCompactionFlow;
1: 
1:   public int[] getColCardinality() {
1:     return colCardinality;
1:   }
1: 
1:   public void setColCardinality(int[] colCardinality) {
1:     this.colCardinality = colCardinality;
1:   }
1:   public CarbonDataFileAttributes getCarbonDataFileAttributes() {
1:     return carbonDataFileAttributes;
1:   }
1: 
1:   public void setCarbonDataFileAttributes(CarbonDataFileAttributes carbonDataFileAttributes) {
1:     this.carbonDataFileAttributes = carbonDataFileAttributes;
1:   }
1: 
1:   public String getDatabaseName() {
1:     return databaseName;
1:   }
1: 
1:   public void setDatabaseName(String databaseName) {
1:     this.databaseName = databaseName;
1:   }
1: 
1:   public String getTableName() {
1:     return tableName;
1:   }
1: 
1:   public void setTableName(String tableName) {
1:     this.tableName = tableName;
1:   }
1: 
0:   public boolean isGroupByEnabled() {
0:     return isGroupByEnabled;
1:   }
1: 
1:   public int getMeasureCount() {
1:     return measureCount;
1:   }
1: 
1:   public void setMeasureCount(int measureCount) {
1:     this.measureCount = measureCount;
1:   }
1: 
0:   public int getMdKeyLength() {
0:     return mdKeyLength;
1:   }
1: 
0:   public void setMdKeyLength(int mdKeyLength) {
0:     this.mdKeyLength = mdKeyLength;
1:   }
1: 
0:   public int getMdKeyIndex() {
0:     return mdKeyIndex;
1:   }
1: 
0:   public void setMdKeyIndex(int mdKeyIndex) {
0:     this.mdKeyIndex = mdKeyIndex;
1:   }
1: 
0:   public String[] getAggregators() {
0:     return aggregators;
1:   }
1: 
0:   public void setAggregators(String[] aggregators) {
0:     this.aggregators = aggregators;
1:   }
1: 
0:   public String[] getAggregatorClass() {
0:     return aggregatorClass;
1:   }
1: 
0:   public void setAggregatorClass(String[] aggregatorClass) {
0:     this.aggregatorClass = aggregatorClass;
1:   }
1: 
0:   public String getStoreLocation() {
1:     return storeLocation;
1:   }
1: 
0:   public void setStoreLocation(String storeLocation) {
1:     this.storeLocation = storeLocation;
1:   }
1: 
0:   public int[] getFactDimLens() {
0:     return factDimLens;
1:   }
1: 
0:   public void setFactDimLens(int[] factDimLens) {
0:     this.factDimLens = factDimLens;
1:   }
1: 
0:   public boolean isMergingRequestForCustomAgg() {
0:     return isMergingRequestForCustomAgg;
1:   }
1: 
0:   public void setMergingRequestForCustomAgg(boolean mergingRequestForCustomAgg) {
0:     isMergingRequestForCustomAgg = mergingRequestForCustomAgg;
1:   }
1: 
0:   public boolean isUpdateMemberRequest() {
0:     return isUpdateMemberRequest;
1:   }
1: 
1:   public int[] getDimLens() {
1:     return dimLens;
1:   }
1: 
1:   public void setDimLens(int[] dimLens) {
1:     this.dimLens = dimLens;
1:   }
1: 
0:   public String[] getFactLevels() {
0:     return factLevels;
1:   }
1: 
0:   public void setFactLevels(String[] factLevels) {
0:     this.factLevels = factLevels;
1:   }
1: 
0:   public String[] getAggLevels() {
0:     return aggLevels;
1:   }
1: 
0:   public void setAggLevels(String[] aggLevels) {
0:     this.aggLevels = aggLevels;
1:   }
1: 
0:   public boolean isDataWritingRequest() {
0:     return isDataWritingRequest;
1:   }
1: 
0:   public void setDataWritingRequest(boolean dataWritingRequest) {
0:     isDataWritingRequest = dataWritingRequest;
1:   }
1: 
1:   public int getNoDictionaryCount() {
1:     return noDictionaryCount;
1:   }
1: 
1:   public void setNoDictionaryCount(int noDictionaryCount) {
1:     this.noDictionaryCount = noDictionaryCount;
1:   }
1: 
1:   public int getDimensionCount() {
1:     return dimensionCount;
1:   }
1: 
1:   public void setDimensionCount(int dimensionCount) {
1:     this.dimensionCount = dimensionCount;
1:   }
1: 
1:   public Map<Integer, GenericDataType> getComplexIndexMap() {
1:     return complexIndexMap;
1:   }
1: 
1:   public void setComplexIndexMap(Map<Integer, GenericDataType> complexIndexMap) {
1:     this.complexIndexMap = complexIndexMap;
1:   }
1: 
1:   public int[] getPrimitiveDimLens() {
1:     return primitiveDimLens;
1:   }
1: 
1:   public void setPrimitiveDimLens(int[] primitiveDimLens) {
1:     this.primitiveDimLens = primitiveDimLens;
1:   }
1: 
0:   public char[] getAggType() {
0:     return aggType;
1:   }
1: 
0:   public void setAggType(char[] aggType) {
0:     this.aggType = aggType;
1:   }
1: 
1:   public String getCarbonDataDirectoryPath() {
1:     return carbonDataDirectoryPath;
1:   }
1: 
1:   public void setCarbonDataDirectoryPath(String carbonDataDirectoryPath) {
1:     this.carbonDataDirectoryPath = carbonDataDirectoryPath;
1:   }
1: 
1:   /**
1:    * To check whether the data handler is for compaction flow or not.
1:    * @return
1:    */
1:   public boolean isCompactionFlow() {
1:     return isCompactionFlow;
1:   }
1: 
1:   /**
1:    * If the handler is calling from the compaction flow set this to true.
1:    * @param compactionFlow
1:    */
1:   public void setCompactionFlow(boolean compactionFlow) {
1:     isCompactionFlow = compactionFlow;
1:   }
1: 
0:   public boolean[] getIsUseInvertedIndex() {
0:     return isUseInvertedIndex;
1:   }
1: 
0:   public void setIsUseInvertedIndex(boolean[] isUseInvertedIndex) {
0:     this.isUseInvertedIndex = isUseInvertedIndex;
1:   }
1:   /**
1:    *
1:    * @return segmentProperties
1:    */
1:   public SegmentProperties getSegmentProperties() {
1:     return segmentProperties;
1:   }
1: 
1:   /**
1:    *
1:    * @param segmentProperties
1:    */
1:   public void setSegmentProperties(SegmentProperties segmentProperties) {
1:     this.segmentProperties = segmentProperties;
1:   }
1: 
1:   /**
1:    * @return wrapperColumnSchema
1:    */
1:   public List<ColumnSchema> getWrapperColumnSchema() {
1:     return wrapperColumnSchema;
1:   }
1: 
1:   /**
0:    * @param wrapperColumnSchema
1:    */
1:   public void setWrapperColumnSchema(List<ColumnSchema> wrapperColumnSchema) {
1:     this.wrapperColumnSchema = wrapperColumnSchema;
1:   }
1: 
1: }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:9db662a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.setDatabaseName(identifier.getDatabaseName());
1:     carbonFactDataHandlerModel.setTableName(identifier.getTableName());
/////////////////////////////////////////////////////////////////////////
0:     listener.registerAllWriter(
0:         configuration.getTableSpec().getCarbonTable(),
0:         configuration.getSegmentId(),
1:         CarbonTablePath.getShardName(
0:             carbonDataFileAttributes.getTaskId(),
0:             bucketId,
0:             0,
0:             String.valueOf(carbonDataFileAttributes.getFactTimeStamp())));
/////////////////////////////////////////////////////////////////////////
0:         CarbonTablePath.getShardName(
1:             CarbonTablePath.DataFileUtil.getTaskIdFromTaskNo(loadModel.getTaskNo()),
1:             carbonFactDataHandlerModel.getBucketId(),
1:             carbonFactDataHandlerModel.getTaskExtension(),
0:             String.valueOf(loadModel.getFactTimeStamp())));
1: 
commit:bf6c471
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     String carbonDataDirectoryPath = CarbonTablePath
0:         .getSegmentPath(absoluteTableIdentifier.getTablePath(), configuration.getSegmentId() + "");
commit:5bedd77
/////////////////////////////////////////////////////////////////////////
0:         .getCarbonDataDirectoryPath(configuration.getSegmentId() + "");
commit:4d70a21
/////////////////////////////////////////////////////////////////////////
1:     DataType[] measureDataTypes = new DataType[segmentProperties.getMeasures().size()];
1:       measureDataTypes[i++] = msr.getDataType();
1:     carbonFactDataHandlerModel.setMeasureDataType(measureDataTypes);
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1: import org.apache.carbondata.processing.loading.constants.DataLoadProcessorConstants;
1: import org.apache.carbondata.processing.loading.model.CarbonLoadModel;
1: import org.apache.carbondata.processing.loading.sort.SortScopeOptions;
commit:f089287
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.datamap.DataMapWriterListener;
0: import org.apache.carbondata.processing.datatypes.GenericDataType;
/////////////////////////////////////////////////////////////////////////
1:   private DataMapWriterListener dataMapWriterlistener;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:     DataMapWriterListener listener = new DataMapWriterListener();
0:     listener.registerAllWriter(configuration.getTableIdentifier(), configuration.getSegmentId());
1:     carbonFactDataHandlerModel.dataMapWriterlistener = listener;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:   public DataMapWriterListener getDataMapWriterlistener() {
1:     return dataMapWriterlistener;
0:   }
author:sounakr
-------------------------------------------------------------------------------
commit:3202cf5
/////////////////////////////////////////////////////////////////////////
1:     int complexDimensionCount = configuration.getComplexDictionaryColumnCount() + configuration
1:         .getComplexNonDictionaryColumnCount();
/////////////////////////////////////////////////////////////////////////
1:         CarbonDataProcessorUtil.getComplexTypesMap(configuration.getDataFields(), configuration)
1:             .entrySet().iterator();
/////////////////////////////////////////////////////////////////////////
0: 
commit:b7b8073
/////////////////////////////////////////////////////////////////////////
1:     if (!configuration.isCarbonTransactionalTable()) {
commit:7656ad2
/////////////////////////////////////////////////////////////////////////
0:     List<CarbonDimension> dimensionByTableName = carbonTable.getDimensionByTableName(tableName);
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:280a400
/////////////////////////////////////////////////////////////////////////
1:     String carbonDataDirectoryPath;
0:     if (configuration.isCarbonUnmanagedTable()) {
1:       carbonDataDirectoryPath = absoluteTableIdentifier.getTablePath();
1:     } else {
1:       carbonDataDirectoryPath = CarbonTablePath
1:           .getSegmentPath(absoluteTableIdentifier.getTablePath(),
0:               configuration.getSegmentId() + "");
0:     }
author:rahulforallp
-------------------------------------------------------------------------------
commit:877eabd
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
/////////////////////////////////////////////////////////////////////////
1:     CarbonUtil.checkAndCreateFolderWithPermission(carbonDataDirectoryPath);
/////////////////////////////////////////////////////////////////////////
1:     // configuration.getDataWritePath will not be null only in case of partition
1:       String paths = configuration.getDataWritePath();
1:       AbsoluteTableIdentifier absoluteTableIdentifier = configuration.getTableIdentifier();
1:       String partPath = absoluteTableIdentifier.getTablePath();
1:       String[] dirs = paths.split(partPath);
1:       /* it will create folder one by one and apply the permissions
1:        else creation of folder in one go will set the permission for last directory only
1:        e.g. paths="/home/rahul/Documents/store/carbonTable1/emp_name=rahul/loc=india/dept=rd"
1:             So, dirs={"","/emp_name=rahul/loc=india/dept=rd"}
1:             if (dirs.length > 1) then partDirs ={"","emp_name=rahul","loc=india","dept=rd"}
1:             forEach partDirs partpath(say "/home/rahul/Documents/store/carbonTable1") will
1:             be keep appending with "emp_name=rahul","loc=india","dept=rd" sequentially
0:       */
1:       if (dirs.length > 1) {
1:         String[] partDirs = dirs[1].split(CarbonCommonConstants.FILE_SEPARATOR);
1:         for (String partDir : partDirs) {
1:           if (!partDir.isEmpty()) {
1:             partPath = partPath.concat(CarbonCommonConstants.FILE_SEPARATOR + partDir);
1:             CarbonUtil.checkAndCreateFolderWithPermission(partPath);
0:           }
0:         }
0:       } else {
1:         CarbonUtil.checkAndCreateFolderWithPermission(paths);
0:       }
1:       return paths;
commit:34cb551
/////////////////////////////////////////////////////////////////////////
0:         .checkAndCreateCarbonStoreLocation(carbonTable.getTablePath(), loadModel.getDatabaseName(),
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:56330ae
/////////////////////////////////////////////////////////////////////////
0:     listener.registerAllWriter(configuration.getTableSpec().getCarbonTable(),
0:         configuration.getSegmentId(), storeLocation[new Random().nextInt(storeLocation.length)]);
/////////////////////////////////////////////////////////////////////////
0:     carbonFactDataHandlerModel.tableSpec =
0:         new TableSpec(loadModel.getCarbonDataLoadSchema().getCarbonTable());
0:         loadModel.getCarbonDataLoadSchema().getCarbonTable(),
author:QiangCai
-------------------------------------------------------------------------------
commit:7e124f4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         identifier.getDatabaseName(), identifier.getTableName());
0: 
commit:81149f6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         identifier.getDatabaseName() + CarbonCommonConstants.UNDERSCORE + identifier
1:         .getColumnSchemaList(carbonTable.getDimensionByTableName(identifier.getTableName()),
1:             carbonTable.getMeasureByTableName(identifier.getTableName()));
/////////////////////////////////////////////////////////////////////////
0:     return carbonTablePath.getCarbonDataDirectoryPath(configuration.getPartitionId(),
0:         configuration.getSegmentId() + "");
commit:4827315
/////////////////////////////////////////////////////////////////////////
1:             (Long) configuration.getDataLoadProperty(DataLoadProcessorConstants.FACT_TIME_STAMP));
commit:9f94529
/////////////////////////////////////////////////////////////////////////
1:     if (!configuration.isSortTable()) {
1:       for (int i = 0; i < dimLensWithComplex.length; i++) {
1:         if (dimLensWithComplex[i] != 0) {
1:           dimLensWithComplex[i] = Integer.MAX_VALUE;
0:         }
0:       }
0:     }
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         .checkAndCreateCarbonStoreLocation(loadModel.getTablePath(), loadModel.getDatabaseName(),
/////////////////////////////////////////////////////////////////////////
1:     AbsoluteTableIdentifier absoluteTableIdentifier = configuration.getTableIdentifier();
0:     CarbonTablePath carbonTablePath = CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier);
0:     String carbonDataDirectoryPath = carbonTablePath
0:         .getCarbonDataDirectoryPath(configuration.getPartitionId(),
0:             configuration.getSegmentId() + "");
0:     CarbonUtil.checkAndCreateFolder(carbonDataDirectoryPath);
0:     return carbonDataDirectoryPath;
commit:3251c89
/////////////////////////////////////////////////////////////////////////
1:   private String segmentId;
0: 
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.segmentId = configuration.getSegmentId();
/////////////////////////////////////////////////////////////////////////
0: 
1:   public String getSegmentId() {
1:     return segmentId;
0:   }
0: 
1:   public void setSegmentId(String segmentId) {
1:     this.segmentId = segmentId;
0:   }
author:lionelcao
-------------------------------------------------------------------------------
commit:874764f
/////////////////////////////////////////////////////////////////////////
1:   public void setBucketId(Integer bucketId) { this.bucketId = bucketId; }
0: 
author:Yadong Qi
-------------------------------------------------------------------------------
commit:82741c1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.newflow.sort.SortScopeOptions;
/////////////////////////////////////////////////////////////////////////
1:   private SortScopeOptions.SortScope sortScope;
0: 
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.sortScope = CarbonDataProcessorUtil.getSortScope(configuration);
/////////////////////////////////////////////////////////////////////////
0: 
1:   public SortScopeOptions.SortScope getSortScope() {
1:     return sortScope;
0:   }
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.GenericDataType;
1: import org.apache.carbondata.core.datastore.TableSpec;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private TableSpec tableSpec;
0: 
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.tableSpec = configuration.getTableSpec();
/////////////////////////////////////////////////////////////////////////
0: 
0:     carbonFactDataHandlerModel.tableSpec = new TableSpec(
0:         segmentProperties.getDimensions(),
0:         segmentProperties.getMeasures());
/////////////////////////////////////////////////////////////////////////
0: 
1:   // return the number of complex column after complex columns are expanded
1:   public int getExpandedComplexColsCount() {
1:     int count = 0;
1:     int dictDimensionCount = getDimensionCount();
1:     for (int i = 0; i < dictDimensionCount; i++) {
1:       GenericDataType complexDataType = getComplexIndexMap().get(i);
1:       if (complexDataType != null) {
1:         count += complexDataType.getColsCount();
0:       }
0:     }
1:     return count;
0:   }
0: 
0:   public boolean isSortColumn(int columnIndex) {
0:     return columnIndex < segmentProperties.getNumberOfSortColumns();
0:   }
0: 
1:   public TableSpec getTableSpec() {
1:     return tableSpec;
0:   }
commit:353272e
/////////////////////////////////////////////////////////////////////////
1: // This class contains all the data required for processing and writing the carbon data
1: // TODO: we should try to minimize this class as refactorying loading process
/////////////////////////////////////////////////////////////////////////
0: 
1:    * length of each dimension, including dictionary, nodictioncy, complex dimension
0: 
1:    * total number of no dictionary dimension in the table
1:    * total number of dictionary dimension and complex dimension columns in table
/////////////////////////////////////////////////////////////////////////
1:   // key generator for complex dimension
1:   private KeyGenerator[] complexDimensionKeyGenerator;
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
1:     int[] dimLens = configuration.calcDimensionLengths();
0:     int dimensionCount = configuration.getDimensionCount();
0:     int noDictionaryCount = configuration.getNoDictionaryCount();
0:     int complexDimensionCount = configuration.getComplexColumnCount();
0:     int measureCount = configuration.getMeasureCount();
0: 
0:     int simpleDimsCount = dimensionCount - noDictionaryCount - complexDimensionCount;
0:     int[] simpleDimsLen = new int[simpleDimsCount];
0:     for (int i = 0; i < simpleDimsCount; i++) {
0:       simpleDimsLen[i] = dimLens[i];
0:     }
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.setDimensionCount(
1:         configuration.getDimensionCount() - noDictionaryCount);
1:     carbonFactDataHandlerModel.setMeasureDataType(configuration.getMeasureDataType());
1:     carbonFactDataHandlerModel.setComplexDimensionKeyGenerator(
1:         configuration.createKeyGeneratorForComplexDimension());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
1:   public KeyGenerator[] getComplexDimensionKeyGenerator() {
1:     return complexDimensionKeyGenerator;
0:   }
0: 
1:   public void setComplexDimensionKeyGenerator(KeyGenerator[] complexDimensionKeyGenerator) {
1:     this.complexDimensionKeyGenerator = complexDimensionKeyGenerator;
0:   }
0: 
1:   public KeyGenerator getMDKeyGenerator() {
1:     return segmentProperties.getDimensionKeyGenerator();
0:   }
0: 
1:   // return the number of complex columns
1:   public int getComplexColumnCount() {
1:     return complexIndexMap.size();
0:   }
commit:98df130
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
/////////////////////////////////////////////////////////////////////////
1:    * data type of all measures in the table
1:   private DataType[] measureDataType;
/////////////////////////////////////////////////////////////////////////
0:     carbonFactDataHandlerModel.setMeasureDataType(CarbonDataProcessorUtil
0:         .getMeasureDataType(configuration.getMeasureCount(), configuration.getMeasureFields()));
/////////////////////////////////////////////////////////////////////////
0:     DataType[] aggType = new DataType[segmentProperties.getMeasures().size()];
0:       aggType[i++] = msr.getDataType();
0:     carbonFactDataHandlerModel.setMeasureDataType(aggType);
/////////////////////////////////////////////////////////////////////////
1:   public DataType[] getMeasureDataType() {
1:     return measureDataType;
1:   public void setMeasureDataType(DataType[] measureDataType) {
1:     this.measureDataType = measureDataType;
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1: import org.apache.carbondata.core.metadata.CarbonMetadata;
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
commit:3fe6903
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Manohar
-------------------------------------------------------------------------------
commit:ebc5ee9
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.setSchemaUpdatedTimeStamp(carbonTable.getTableLastUpdatedTime());
author:manishgupta88
-------------------------------------------------------------------------------
commit:cc59b24
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
0: import org.apache.carbondata.core.util.DataTypeUtil;
0: import org.apache.carbondata.processing.model.CarbonLoadModel;
/////////////////////////////////////////////////////////////////////////
1:    * This method will create a model object for carbon fact data handler
1:    *
1:    * @param loadModel
1:    * @return
0:    */
1:   public static CarbonFactDataHandlerModel getCarbonFactDataHandlerModel(CarbonLoadModel loadModel,
1:       CarbonTable carbonTable, SegmentProperties segmentProperties, String tableName,
0:       String tempStoreLocation) {
1:     CarbonFactDataHandlerModel carbonFactDataHandlerModel = new CarbonFactDataHandlerModel();
1:     carbonFactDataHandlerModel.setDatabaseName(loadModel.getDatabaseName());
1:     carbonFactDataHandlerModel.setTableName(tableName);
1:     carbonFactDataHandlerModel.setMeasureCount(segmentProperties.getMeasures().size());
0:     carbonFactDataHandlerModel
0:         .setMdKeyLength(segmentProperties.getDimensionKeyGenerator().getKeySizeInBytes());
1:     carbonFactDataHandlerModel.setStoreLocation(tempStoreLocation);
1:     carbonFactDataHandlerModel.setDimLens(segmentProperties.getDimColumnsCardinality());
1:     carbonFactDataHandlerModel.setSegmentProperties(segmentProperties);
0:     carbonFactDataHandlerModel
1:         .setNoDictionaryCount(segmentProperties.getNumberOfNoDictionaryDimension());
1:     carbonFactDataHandlerModel.setDimensionCount(
1:         segmentProperties.getDimensions().size() - carbonFactDataHandlerModel
1:             .getNoDictionaryCount());
1:     List<ColumnSchema> wrapperColumnSchema = CarbonUtil
1:         .getColumnSchemaList(carbonTable.getDimensionByTableName(tableName),
1:             carbonTable.getMeasureByTableName(tableName));
1:     carbonFactDataHandlerModel.setWrapperColumnSchema(wrapperColumnSchema);
1:     // get the cardinality for all all the columns including no dictionary columns
1:     int[] formattedCardinality = CarbonUtil
1:         .getFormattedCardinality(segmentProperties.getDimColumnsCardinality(), wrapperColumnSchema);
1:     carbonFactDataHandlerModel.setColCardinality(formattedCardinality);
1:     //TO-DO Need to handle complex types here .
1:     Map<Integer, GenericDataType> complexIndexMap =
1:         new HashMap<Integer, GenericDataType>(segmentProperties.getComplexDimensions().size());
1:     carbonFactDataHandlerModel.setComplexIndexMap(complexIndexMap);
0:     carbonFactDataHandlerModel.setDataWritingRequest(true);
0:     char[] aggType = new char[segmentProperties.getMeasures().size()];
0:     Arrays.fill(aggType, 'n');
1:     int i = 0;
1:     for (CarbonMeasure msr : segmentProperties.getMeasures()) {
0:       aggType[i++] = DataTypeUtil.getAggType(msr.getDataType());
0:     }
0:     carbonFactDataHandlerModel.setAggType(aggType);
0:     carbonFactDataHandlerModel.setFactDimLens(segmentProperties.getDimColumnsCardinality());
0:     String carbonDataDirectoryPath = CarbonDataProcessorUtil
0:         .checkAndCreateCarbonStoreLocation(loadModel.getStorePath(), loadModel.getDatabaseName(),
0:             tableName, loadModel.getPartitionId(), loadModel.getSegmentId());
1:     carbonFactDataHandlerModel.setCarbonDataDirectoryPath(carbonDataDirectoryPath);
0:     List<CarbonDimension> dimensionByTableName =
0:         loadModel.getCarbonDataLoadSchema().getCarbonTable().getDimensionByTableName(tableName);
0:     boolean[] isUseInvertedIndexes = new boolean[dimensionByTableName.size()];
0:     int index = 0;
0:     for (CarbonDimension dimension : dimensionByTableName) {
0:       isUseInvertedIndexes[index++] = dimension.isUseInvertedIndex();
0:     }
0:     carbonFactDataHandlerModel.setIsUseInvertedIndex(isUseInvertedIndexes);
1:     carbonFactDataHandlerModel.setPrimitiveDimLens(segmentProperties.getDimColumnsCardinality());
1:     carbonFactDataHandlerModel.setBlockSizeInMB(carbonTable.getBlockSizeInMB());
0:     if (segmentProperties.getNumberOfNoDictionaryDimension() > 0
0:         || segmentProperties.getComplexDimensions().size() > 0) {
0:       carbonFactDataHandlerModel.setMdKeyIndex(segmentProperties.getMeasures().size() + 1);
0:     } else {
0:       carbonFactDataHandlerModel.setMdKeyIndex(segmentProperties.getMeasures().size());
0:     }
1:     return carbonFactDataHandlerModel;
0:   }
0: 
0:   /**
commit:fc1af96
/////////////////////////////////////////////////////////////////////////
1:    * schema updated time stamp to be used for restructure scenarios
0:    */
1:   private long schemaUpdatedTimeStamp;
0: 
0:   /**
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.setSchemaUpdatedTimeStamp(configuration.getSchemaUpdatedTimeStamp());
/////////////////////////////////////////////////////////////////////////
0: 
1:   public long getSchemaUpdatedTimeStamp() {
1:     return schemaUpdatedTimeStamp;
0:   }
0: 
1:   public void setSchemaUpdatedTimeStamp(long schemaUpdatedTimeStamp) {
1:     this.schemaUpdatedTimeStamp = schemaUpdatedTimeStamp;
0:   }
commit:70256e7
/////////////////////////////////////////////////////////////////////////
0:         .getAggType(configuration.getMeasureCount(), configuration.getMeasureFields()));
author:Jay357089
-------------------------------------------------------------------------------
commit:cd61beb
/////////////////////////////////////////////////////////////////////////
1:   public int getBlockSizeInMB() {
1:     return blockSize;
1:   public void setBlockSizeInMB(int blockSize) {
1:     this.blockSize = blockSize;
1:    * table blocksize in MB
1:   private int blockSize;
author:Zhangshunyu
-------------------------------------------------------------------------------
commit:793d690
/////////////////////////////////////////////////////////////////////////
0: 
0:   public int getBlocksize() {
0:     return blocksize;
0:   }
0: 
0:   public void setBlocksize(int blocksize) {
0:     this.blocksize = blocksize;
0:   }
0: 
0:   /**
0:    * table blocksize
0:    */
0:   private int blocksize;
============================================================================