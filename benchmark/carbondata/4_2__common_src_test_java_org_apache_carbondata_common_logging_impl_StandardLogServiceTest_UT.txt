1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
5:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.common.logging.impl;
1:cd6a4ff: 
1:cd6a4ff: import junit.framework.TestCase;
1:cd6a4ff: import mockit.Mock;
1:cd6a4ff: import mockit.MockUp;
1:cd6a4ff: import org.apache.log4j.Category;
1:cd6a4ff: import org.apache.log4j.Priority;
1:cd6a4ff: import org.junit.After;
1:cd6a4ff: import org.junit.Assert;
1:cd6a4ff: import org.junit.Before;
1:cd6a4ff: import org.junit.Test;
1:cd6a4ff: 
1:cd6a4ff: public class StandardLogServiceTest_UT extends TestCase {
1:cd6a4ff: 
1:cd6a4ff:   private StandardLogService logService = null;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @throws Exception
1:cd6a4ff:    */
1:cd6a4ff:   @Before public void setUp() throws Exception {
1:cd6a4ff: 
1:cd6a4ff:     new MockUp<Category>() {
1:cd6a4ff:       @SuppressWarnings("unused")
1:cd6a4ff:       @Mock public boolean isDebugEnabled() {
1:cd6a4ff:         return true;
3:cd6a4ff:       }
1:cd6a4ff: 
1:cd6a4ff:       @SuppressWarnings("unused")
1:cd6a4ff:       @Mock public boolean isEnabledFor(Priority level) {
1:cd6a4ff:         return true;
1:cd6a4ff:       }
1:cd6a4ff: 
1:cd6a4ff:       @SuppressWarnings("unused")
1:cd6a4ff:       @Mock public boolean isInfoEnabled() {
1:cd6a4ff:         return true;
1:cd6a4ff:       }
1:cd6a4ff:     };
1:cd6a4ff: 
1:cd6a4ff:     logService = new StandardLogService(this.getClass().getName());
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @throws Exception
1:cd6a4ff:    * @Description : tearDown
1:cd6a4ff:    */
1:cd6a4ff:   @After public void tearDown() throws Exception {
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testStandardLogService() {
1:cd6a4ff:     if (logService != null && logService instanceof StandardLogService) {
1:cd6a4ff:       Assert.assertTrue(true);
1:cd6a4ff:     } else {
1:cd6a4ff:       Assert.assertTrue(false);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testIsDebugEnabled() {
1:cd6a4ff:     Assert.assertEquals(true, logService.isDebugEnabled());
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testIsWarnEnabled() {
1:cd6a4ff:     Assert.assertEquals(true, logService.isWarnEnabled());
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testSecureLogEventObjectArray() {
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testAuditLogEventObjectArray() {
1:cd6a4ff:     logService.audit("testing");
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testDebugLogEventObjectArray() {
1:cd6a4ff:     logService.debug("testing");
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testErrorLogEventObjectArray() {
1:cd6a4ff:     logService.error("testing");
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testErrorLogEventThrowableObjectArray() {
1:cd6a4ff:     Exception exception = new Exception("test");
1:cd6a4ff:     logService.error(exception);
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testErrorLogEventThrowableMessage() {
1:cd6a4ff:     Exception exception = new Exception("test");
1:cd6a4ff:     logService.error(exception, "additional message");
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testInfoLogEventObjectArray() {
1:cd6a4ff:     logService.info("testing");
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testIsInfoEnabled() {
1:cd6a4ff:     Assert.assertEquals(true, logService.isInfoEnabled());
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testDeleteLogs() {
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testFlushLogs() {
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testSetEventProperties() {
1:cd6a4ff:     logService.setEventProperties("CLIENT_IP", "127.0.0.1");
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testAuditString() {
1:cd6a4ff:     logService.audit("audit message");
1:cd6a4ff:     Assert.assertTrue(true);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:Manohar
-------------------------------------------------------------------------------
commit:6650c63
/////////////////////////////////////////////////////////////////////////
commit:6650c63
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:85dd152
/////////////////////////////////////////////////////////////////////////
commit:85dd152
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.common.logging.impl;
1: 
1: import junit.framework.TestCase;
1: import mockit.Mock;
1: import mockit.MockUp;
1: import org.apache.log4j.Category;
1: import org.apache.log4j.Priority;
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class StandardLogServiceTest_UT extends TestCase {
1: 
1:   private StandardLogService logService = null;
1: 
1:   /**
1:    * @throws Exception
1:    */
1:   @Before public void setUp() throws Exception {
1: 
1:     new MockUp<Category>() {
1:       @SuppressWarnings("unused")
1:       @Mock public boolean isDebugEnabled() {
1:         return true;
1:       }
1: 
1:       @SuppressWarnings("unused")
1:       @Mock public boolean isEnabledFor(Priority level) {
1:         return true;
1:       }
1: 
1:       @SuppressWarnings("unused")
1:       @Mock public boolean isInfoEnabled() {
1:         return true;
1:       }
1:     };
1: 
1:     logService = new StandardLogService(this.getClass().getName());
1:   }
1: 
1:   /**
1:    * @throws Exception
0:    * @Author k00742797
1:    * @Description : tearDown
1:    */
1:   @After public void tearDown() throws Exception {
1:   }
1: 
1:   @Test public void testStandardLogService() {
1:     if (logService != null && logService instanceof StandardLogService) {
1:       Assert.assertTrue(true);
1:     } else {
1:       Assert.assertTrue(false);
1:     }
1:   }
1: 
1:   @Test public void testIsDebugEnabled() {
1:     Assert.assertEquals(true, logService.isDebugEnabled());
1:   }
1: 
1:   @Test public void testIsWarnEnabled() {
1:     Assert.assertEquals(true, logService.isWarnEnabled());
1:   }
1: 
1:   @Test public void testSecureLogEventObjectArray() {
1:     Assert.assertTrue(true);
1:   }
1: 
1:   @Test public void testAuditLogEventObjectArray() {
1:     logService.audit("testing");
1:     Assert.assertTrue(true);
1:   }
1: 
1:   @Test public void testDebugLogEventObjectArray() {
1:     logService.debug("testing");
1:     Assert.assertTrue(true);
1:   }
1: 
1:   @Test public void testErrorLogEventObjectArray() {
1:     logService.error("testing");
1:     Assert.assertTrue(true);
1:   }
1: 
1:   @Test public void testErrorLogEventThrowableObjectArray() {
1:     Exception exception = new Exception("test");
1:     logService.error(exception);
1:     Assert.assertTrue(true);
1:   }
1: 
1:   @Test public void testErrorLogEventThrowableMessage() {
1:     Exception exception = new Exception("test");
1:     logService.error(exception, "additional message");
1:     Assert.assertTrue(true);
1:   }
1: 
1:   @Test public void testInfoLogEventObjectArray() {
1:     logService.info("testing");
1:     Assert.assertTrue(true);
1:   }
1: 
1:   @Test public void testIsInfoEnabled() {
1:     Assert.assertEquals(true, logService.isInfoEnabled());
1:   }
1: 
1:   @Test public void testDeleteLogs() {
1:     Assert.assertTrue(true);
1:   }
1: 
1:   @Test public void testFlushLogs() {
1:     Assert.assertTrue(true);
1:   }
1: 
1:   @Test public void testSetEventProperties() {
1:     logService.setEventProperties("CLIENT_IP", "127.0.0.1");
1:     Assert.assertTrue(true);
1:   }
1: 
0:   @Test public void testIsDoLog() {
0:     StandardLogService.setDoLog(true);
0:     Assert.assertEquals(true, StandardLogService.isDoLog());
1: 
0:     StandardLogService.setDoLog(false);
0:     Assert.assertEquals(false, StandardLogService.isDoLog());
1: 
1:   }
1: 
0:   @Test public void testSetDoLog() {
0:     StandardLogService.setDoLog(true);
0:     Assert.assertEquals(true, StandardLogService.isDoLog());
1:   }
1: 
1:   @Test public void testAuditString() {
1:     logService.audit("audit message");
1:     Assert.assertTrue(true);
1:   }
1: 
1: }
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.common.logging.impl;
0: 
0: import junit.framework.TestCase;
0: import mockit.Mock;
0: import mockit.MockUp;
0: import org.apache.log4j.Category;
0: import org.apache.log4j.Priority;
0: import org.junit.After;
0: import org.junit.Assert;
0: import org.junit.Before;
0: import org.junit.Test;
0: 
0: public class StandardLogServiceTest_UT extends TestCase {
0: 
0:   private StandardLogService logService = null;
0: 
0:   /**
0:    * @throws Exception
0:    */
0:   @Before public void setUp() throws Exception {
0: 
0:     new MockUp<Category>() {
0:       @SuppressWarnings("unused")
0:       @Mock public boolean isDebugEnabled() {
0:         return true;
0:       }
0: 
0:       @SuppressWarnings("unused")
0:       @Mock public boolean isEnabledFor(Priority level) {
0:         return true;
0:       }
0: 
0:       @SuppressWarnings("unused")
0:       @Mock public boolean isInfoEnabled() {
0:         return true;
0:       }
0:     };
0: 
0:     logService = new StandardLogService(this.getClass().getName());
0:   }
0: 
0:   /**
0:    * @throws Exception
0:    * @Author k00742797
0:    * @Description : tearDown
0:    */
0:   @After public void tearDown() throws Exception {
0:   }
0: 
0:   @Test public void testStandardLogService() {
0:     if (logService != null && logService instanceof StandardLogService) {
0:       Assert.assertTrue(true);
0:     } else {
0:       Assert.assertTrue(false);
0:     }
0:   }
0: 
0:   @Test public void testIsDebugEnabled() {
0:     Assert.assertEquals(true, logService.isDebugEnabled());
0:   }
0: 
0:   @Test public void testIsWarnEnabled() {
0:     Assert.assertEquals(true, logService.isWarnEnabled());
0:   }
0: 
0:   @Test public void testSecureLogEventObjectArray() {
0:     Assert.assertTrue(true);
0:   }
0: 
0:   @Test public void testAuditLogEventObjectArray() {
0:     logService.audit("testing");
0:     Assert.assertTrue(true);
0:   }
0: 
0:   @Test public void testDebugLogEventObjectArray() {
0:     logService.debug("testing");
0:     Assert.assertTrue(true);
0:   }
0: 
0:   @Test public void testErrorLogEventObjectArray() {
0:     logService.error("testing");
0:     Assert.assertTrue(true);
0:   }
0: 
0:   @Test public void testErrorLogEventThrowableObjectArray() {
0:     Exception exception = new Exception("test");
0:     logService.error(exception);
0:     Assert.assertTrue(true);
0:   }
0: 
0:   @Test public void testErrorLogEventThrowableMessage() {
0:     Exception exception = new Exception("test");
0:     logService.error(exception, "additional message");
0:     Assert.assertTrue(true);
0:   }
0: 
0:   @Test public void testInfoLogEventObjectArray() {
0:     logService.info("testing");
0:     Assert.assertTrue(true);
0:   }
0: 
0:   @Test public void testIsInfoEnabled() {
0:     Assert.assertEquals(true, logService.isInfoEnabled());
0:   }
0: 
0:   @Test public void testDeleteLogs() {
0:     Assert.assertTrue(true);
0:   }
0: 
0:   @Test public void testFlushLogs() {
0:     Assert.assertTrue(true);
0:   }
0: 
0:   @Test public void testSetEventProperties() {
0:     logService.setEventProperties("CLIENT_IP", "127.0.0.1");
0:     Assert.assertTrue(true);
0:   }
0: 
0:   @Test public void testIsDoLog() {
0:     StandardLogService.setDoLog(true);
0:     Assert.assertEquals(true, StandardLogService.isDoLog());
0: 
0:     StandardLogService.setDoLog(false);
0:     Assert.assertEquals(false, StandardLogService.isDoLog());
0: 
0:   }
0: 
0:   @Test public void testSetDoLog() {
0:     StandardLogService.setDoLog(true);
0:     Assert.assertEquals(true, StandardLogService.isDoLog());
0:   }
0: 
0:   @Test public void testAuditString() {
0:     logService.audit("audit message");
0:     Assert.assertTrue(true);
0:   }
0: 
0: }
============================================================================