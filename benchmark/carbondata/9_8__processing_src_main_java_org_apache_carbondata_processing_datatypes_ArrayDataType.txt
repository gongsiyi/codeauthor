4:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
4:cd6a4ff:  */
8:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.processing.datatypes;
1:cd6a4ff: 
1:cd6a4ff: import java.io.DataOutputStream;
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: import java.nio.ByteBuffer;
1:cd6a4ff: import java.util.ArrayList;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: 
1:6297ea0: import org.apache.carbondata.core.datastore.ColumnType;
1:438b442: import org.apache.carbondata.core.datastore.row.ComplexColumnInfo;
1:496cde4: import org.apache.carbondata.core.devapi.DictionaryGenerationException;
1:cd6a4ff: import org.apache.carbondata.core.keygenerator.KeyGenException;
1:cd6a4ff: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1:438b442: import org.apache.carbondata.core.util.DataTypeUtil;
1:349c59c: import org.apache.carbondata.processing.loading.complexobjects.ArrayObject;
1:6b70b7e: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
1:cd6a4ff: 
2:cd6a4ff: /**
1:cd6a4ff:  * Array DataType stateless object used in data loading
1:cd6a4ff:  */
1:496cde4: public class ArrayDataType implements GenericDataType<ArrayObject> {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * child columns
1:cd6a4ff:    */
1:cd6a4ff:   private GenericDataType children;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * name of the column
1:cd6a4ff:    */
1:cd6a4ff:   private String name;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * column unique id
1:cd6a4ff:    */
1:cd6a4ff:   private String columnId;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * parent column name
1:cd6a4ff:    */
1:cd6a4ff:   private String parentname;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * output array index
1:cd6a4ff:    */
1:cd6a4ff:   private int outputArrayIndex;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cfbf7b6:    * Dictionary column
1:cfbf7b6:    */
1:cfbf7b6:   private boolean isDictionaryColumn;
1:cfbf7b6: 
1:cfbf7b6:   /**
1:cd6a4ff:    * current data counter
1:cd6a4ff:    */
1:cd6a4ff:   private int dataCounter;
1:cd6a4ff: 
1:e710339:   private ArrayDataType(int outputArrayIndex, int dataCounter, GenericDataType children,
1:e710339:       String name) {
1:8c1ddbf:     this.outputArrayIndex = outputArrayIndex;
1:8c1ddbf:     this.dataCounter = dataCounter;
1:8c1ddbf:     this.children = children;
1:e710339:     this.name = name;
1:8c1ddbf:   }
1:e710339: 
1:e710339: 
1:496cde4:   /**
1:cd6a4ff:    * constructor
1:cd6a4ff:    * @param name
1:cd6a4ff:    * @param parentname
1:cd6a4ff:    * @param columnId
1:cd6a4ff:    */
1:cd6a4ff:   public ArrayDataType(String name, String parentname, String columnId) {
2:cd6a4ff:     this.name = name;
1:cd6a4ff:     this.parentname = parentname;
1:cd6a4ff:     this.columnId = columnId;
1:e710339:   }
1:8c1ddbf: 
1:cfbf7b6:   /**
1:cfbf7b6:    * constructor
1:cfbf7b6:    * @param name
1:cfbf7b6:    * @param parentname
1:cfbf7b6:    * @param columnId
1:cfbf7b6:    * @param isDictionaryColumn
1:cfbf7b6:    */
1:cfbf7b6:   public ArrayDataType(String name, String parentname, String columnId,
1:cfbf7b6:       Boolean isDictionaryColumn) {
1:cfbf7b6:     this.name = name;
1:cfbf7b6:     this.parentname = parentname;
1:cfbf7b6:     this.columnId = columnId;
1:cfbf7b6:     this.isDictionaryColumn = isDictionaryColumn;
1:cfbf7b6:   }
1:cfbf7b6: 
1:cd6a4ff:   /*
1:cd6a4ff:    * to add child dimensions
1:cd6a4ff:    */
1:496cde4:   @Override
1:cd6a4ff:   public void addChildren(GenericDataType children) {
1:cd6a4ff:     if (this.getName().equals(children.getParentname())) {
1:cd6a4ff:       this.children = children;
2:cd6a4ff:     } else {
1:cd6a4ff:       this.children.addChildren(children);
7:cd6a4ff:     }
1:cd6a4ff:   }
1:8c1ddbf: 
1:cd6a4ff:   /*
1:cd6a4ff:    * return column name
1:cd6a4ff:    */
4:cd6a4ff:   @Override
1:cd6a4ff:   public String getName() {
1:cd6a4ff:     return name;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * return column unique id
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:e710339:   public String getColumnNames() {
1:cd6a4ff:     return columnId;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * set parent name
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:cd6a4ff:   public String getParentname() {
1:cd6a4ff:     return parentname;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * returns all primitive type child columns
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:cd6a4ff:   public void getAllPrimitiveChildren(List<GenericDataType> primitiveChild) {
1:cd6a4ff:     if (children instanceof PrimitiveDataType) {
1:cd6a4ff:       primitiveChild.add(children);
1:cd6a4ff:     } else {
1:cd6a4ff:       children.getAllPrimitiveChildren(primitiveChild);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * return surrogate index
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:cd6a4ff:   public int getSurrogateIndex() {
1:cd6a4ff:     return 0;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * set surrogate index
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:cd6a4ff:   public void setSurrogateIndex(int surrIndex) {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:3202cf5:   @Override public boolean getIsColumnDictionary() {
1:cfbf7b6:     return isDictionaryColumn;
1:3202cf5:   }
1:3202cf5: 
1:6b70b7e:   @Override public void writeByteArray(ArrayObject input, DataOutputStream dataOutputStream,
1:6b70b7e:       BadRecordLogHolder logHolder) throws IOException, DictionaryGenerationException {
1:496cde4:     if (input == null) {
1:496cde4:       dataOutputStream.writeInt(1);
1:6b70b7e:       children.writeByteArray(null, dataOutputStream, logHolder);
1:496cde4:     } else {
1:496cde4:       Object[] data = input.getData();
1:496cde4:       dataOutputStream.writeInt(data.length);
1:496cde4:       for (Object eachInput : data) {
1:6b70b7e:         children.writeByteArray(eachInput, dataOutputStream, logHolder);
1:496cde4:       }
1:496cde4:     }
1:496cde4:   }
1:496cde4: 
1:496cde4:   @Override
1:496cde4:   public void fillCardinality(List<Integer> dimCardWithComplex) {
1:cfbf7b6:     if (this.getIsColumnDictionary()) {
1:06d38ff:       dimCardWithComplex.add(0);
1:06d38ff:       children.fillCardinality(dimCardWithComplex);
1:496cde4:     }
1:cd6a4ff:   }
1:496cde4: 
1:cd6a4ff:   @Override
1:3202cf5:   public void parseComplexValue(ByteBuffer byteArrayInput, DataOutputStream dataOutputStream,
1:3202cf5:       KeyGenerator[] generator)
1:3202cf5:       throws IOException, KeyGenException {
1:cd6a4ff:     int dataLength = byteArrayInput.getInt();
1:cd6a4ff: 
1:cd6a4ff:     dataOutputStream.writeInt(dataLength);
1:cd6a4ff:     if (children instanceof PrimitiveDataType) {
1:06d38ff:       if (children.getIsColumnDictionary()) {
1:3202cf5:         dataOutputStream.writeInt(generator[children.getSurrogateIndex()].getKeySizeInBytes());
1:06d38ff:       }
1:3202cf5:     }
1:cd6a4ff:     for (int i = 0; i < dataLength; i++) {
1:3202cf5:       children.parseComplexValue(byteArrayInput, dataOutputStream, generator);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * get children column count
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:cd6a4ff:   public int getColsCount() {
1:cd6a4ff:     return children.getColsCount() + 1;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * set array index
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:cd6a4ff:   public void setOutputArrayIndex(int outputArrayIndex) {
1:cd6a4ff:     this.outputArrayIndex = outputArrayIndex;
1:cd6a4ff:     children.setOutputArrayIndex(outputArrayIndex + 1);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * get current max array index
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:cd6a4ff:   public int getMaxOutputArrayIndex() {
1:cd6a4ff:     int currentMax = outputArrayIndex;
1:cd6a4ff:     int childMax = children.getMaxOutputArrayIndex();
1:cd6a4ff:     if (childMax > currentMax) {
1:cd6a4ff:       currentMax = childMax;
1:cd6a4ff:     }
1:cd6a4ff:     return currentMax;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * split byte array and return metadata and primitive column data
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:cd6a4ff:   public void getColumnarDataForComplexType(List<ArrayList<byte[]>> columnsArray,
1:cd6a4ff:       ByteBuffer inputArray) {
1:cd6a4ff:     ByteBuffer b = ByteBuffer.allocate(8);
1:cd6a4ff:     int dataLength = inputArray.getInt();
1:cd6a4ff:     b.putInt(dataLength);
1:cd6a4ff:     if (dataLength == 0) {
1:cd6a4ff:       b.putInt(0);
1:cd6a4ff:     } else {
1:cd6a4ff:       b.putInt(children.getDataCounter());
1:cd6a4ff:     }
1:cd6a4ff:     columnsArray.get(this.outputArrayIndex).add(b.array());
1:cd6a4ff: 
1:cd6a4ff:     if (children instanceof PrimitiveDataType) {
1:7292869:       PrimitiveDataType child = ((PrimitiveDataType) children);
1:7292869:       if (child.getIsColumnDictionary()) {
1:7292869:         child.setKeySize(inputArray.getInt());
1:7292869:       }
1:cd6a4ff:     }
1:cd6a4ff:     for (int i = 0; i < dataLength; i++) {
1:cd6a4ff:       children.getColumnarDataForComplexType(columnsArray, inputArray);
1:cd6a4ff:     }
1:cd6a4ff:     this.dataCounter++;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * return data counter
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:cd6a4ff:   public int getDataCounter() {
1:cd6a4ff:     return this.dataCounter;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * fill agg key blocks
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:cd6a4ff:   public void fillAggKeyBlock(List<Boolean> aggKeyBlockWithComplex, boolean[] aggKeyBlock) {
1:cd6a4ff:     aggKeyBlockWithComplex.add(false);
1:cd6a4ff:     children.fillAggKeyBlock(aggKeyBlockWithComplex, aggKeyBlock);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * fill key size
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:cd6a4ff:   public void fillBlockKeySize(List<Integer> blockKeySizeWithComplex, int[] primitiveBlockKeySize) {
1:cd6a4ff:     blockKeySizeWithComplex.add(8);
1:cd6a4ff:     children.fillBlockKeySize(blockKeySizeWithComplex, primitiveBlockKeySize);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /*
1:cd6a4ff:    * fill cardinality
1:cd6a4ff:    */
1:cd6a4ff:   @Override
1:cd6a4ff:   public void fillCardinalityAfterDataLoad(List<Integer> dimCardWithComplex,
1:cd6a4ff:       int[] maxSurrogateKeyArray) {
1:496cde4:     dimCardWithComplex.add(0);
1:cd6a4ff:     children.fillCardinalityAfterDataLoad(dimCardWithComplex, maxSurrogateKeyArray);
1:8c1ddbf:   }
1:cd6a4ff: 
1:8c1ddbf:   @Override
1:8c1ddbf:   public GenericDataType<ArrayObject> deepCopy() {
1:e710339:     return new ArrayDataType(this.outputArrayIndex, this.dataCounter, this.children.deepCopy(),
1:e710339:         this.name);
1:6297ea0:   }
1:6297ea0: 
1:6297ea0:   @Override
1:438b442:   public void getComplexColumnInfo(List<ComplexColumnInfo> columnInfoList) {
1:438b442:     columnInfoList.add(
1:438b442:         new ComplexColumnInfo(ColumnType.COMPLEX_ARRAY, DataTypeUtil.valueOf("array"),
1:438b442:             name, false));
1:438b442:     children.getComplexColumnInfo(columnInfoList);
1:7292869:   }
1:cd6a4ff: }
============================================================================
author:Indhumathi27
-------------------------------------------------------------------------------
commit:cfbf7b6
/////////////////////////////////////////////////////////////////////////
1:    * Dictionary column
1:    */
1:   private boolean isDictionaryColumn;
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * constructor
1:    * @param name
1:    * @param parentname
1:    * @param columnId
1:    * @param isDictionaryColumn
1:    */
1:   public ArrayDataType(String name, String parentname, String columnId,
1:       Boolean isDictionaryColumn) {
1:     this.name = name;
1:     this.parentname = parentname;
1:     this.columnId = columnId;
1:     this.isDictionaryColumn = isDictionaryColumn;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     return isDictionaryColumn;
/////////////////////////////////////////////////////////////////////////
1:     if (this.getIsColumnDictionary()) {
commit:06d38ff
/////////////////////////////////////////////////////////////////////////
1:     if (children.getIsColumnDictionary()) {
1:       dimCardWithComplex.add(0);
1:       children.fillCardinality(dimCardWithComplex);
1:     }
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:438b442
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.row.ComplexColumnInfo;
1: import org.apache.carbondata.core.util.DataTypeUtil;
/////////////////////////////////////////////////////////////////////////
1:   public void getComplexColumnInfo(List<ComplexColumnInfo> columnInfoList) {
1:     columnInfoList.add(
1:         new ComplexColumnInfo(ColumnType.COMPLEX_ARRAY, DataTypeUtil.valueOf("array"),
1:             name, false));
1:     children.getComplexColumnInfo(columnInfoList);
author:kumarvishal09
-------------------------------------------------------------------------------
commit:e710339
/////////////////////////////////////////////////////////////////////////
1:   private ArrayDataType(int outputArrayIndex, int dataCounter, GenericDataType children,
1:       String name) {
1:     this.name = name;
/////////////////////////////////////////////////////////////////////////
1:   public String getColumnNames() {
/////////////////////////////////////////////////////////////////////////
1:     return new ArrayDataType(this.outputArrayIndex, this.dataCounter, this.children.deepCopy(),
1:         this.name);
/////////////////////////////////////////////////////////////////////////
1: 
0:   @Override public void getColumnNames(List<String> columnNameList) {
0:     columnNameList.add(name);
0:     children.getColumnNames(columnNameList);
1:   }
1: 
commit:6297ea0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.ColumnType;
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
0:   public void getChildrenType(List<ColumnType> type) {
0:     type.add(ColumnType.COMPLEX_ARRAY);
0:     children.getChildrenType(type);
1:   }
commit:7292869
/////////////////////////////////////////////////////////////////////////
1:       PrimitiveDataType child = ((PrimitiveDataType) children);
1:       if (child.getIsColumnDictionary()) {
1:         child.setKeySize(inputArray.getInt());
1:       }
/////////////////////////////////////////////////////////////////////////
1: }
author:kunal642
-------------------------------------------------------------------------------
commit:6b70b7e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
/////////////////////////////////////////////////////////////////////////
1:   @Override public void writeByteArray(ArrayObject input, DataOutputStream dataOutputStream,
1:       BadRecordLogHolder logHolder) throws IOException, DictionaryGenerationException {
1:       children.writeByteArray(null, dataOutputStream, logHolder);
1:         children.writeByteArray(eachInput, dataOutputStream, logHolder);
author:sounakr
-------------------------------------------------------------------------------
commit:3202cf5
/////////////////////////////////////////////////////////////////////////
1:   @Override public boolean getIsColumnDictionary() {
0:     return true;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public void parseComplexValue(ByteBuffer byteArrayInput, DataOutputStream dataOutputStream,
1:       KeyGenerator[] generator)
1:       throws IOException, KeyGenException {
0:       if (children.getIsColumnDictionary()) {
1:         dataOutputStream.writeInt(generator[children.getSurrogateIndex()].getKeySizeInBytes());
1:       }
1:       children.parseComplexValue(byteArrayInput, dataOutputStream, generator);
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.complexobjects.ArrayObject;
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
0:   private ArrayDataType(int outputArrayIndex, int dataCounter, GenericDataType children) {
1:     this.outputArrayIndex = outputArrayIndex;
1:     this.dataCounter = dataCounter;
1:     this.children = children;
1:   }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public GenericDataType<ArrayObject> deepCopy() {
0:     return new ArrayDataType(this.outputArrayIndex, this.dataCounter, this.children.deepCopy());
1:   }
commit:f089287
/////////////////////////////////////////////////////////////////////////
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.GenericDataType;
commit:3fe6903
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:e6b6090
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.devapi.DictionaryGenerationException;
0: import org.apache.carbondata.processing.newflow.complexobjects.ArrayObject;
/////////////////////////////////////////////////////////////////////////
1: public class ArrayDataType implements GenericDataType<ArrayObject> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public void writeByteArray(ArrayObject input, DataOutputStream dataOutputStream)
0:       throws IOException, DictionaryGenerationException {
1:     if (input == null) {
1:       dataOutputStream.writeInt(1);
0:       children.writeByteArray(null, dataOutputStream);
1:     } else {
1:       Object[] data = input.getData();
1:       dataOutputStream.writeInt(data.length);
1:       for (Object eachInput : data) {
0:         children.writeByteArray(eachInput, dataOutputStream);
1:       }
1:     }
1:   }
1: 
1:   @Override
1:   public void fillCardinality(List<Integer> dimCardWithComplex) {
1:     dimCardWithComplex.add(0);
0:     children.fillCardinality(dimCardWithComplex);
1:   }
1: 
1:   /**
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.datatypes;
1: 
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.keygenerator.KeyGenException;
1: import org.apache.carbondata.core.keygenerator.KeyGenerator;
0: import org.apache.carbondata.processing.surrogatekeysgenerator.csvbased.CarbonCSVBasedDimSurrogateKeyGen;
1: 
0: import org.pentaho.di.core.exception.KettleException;
1: 
1: /**
1:  * Array DataType stateless object used in data loading
1:  */
0: public class ArrayDataType implements GenericDataType {
1: 
1:   /**
1:    * child columns
1:    */
1:   private GenericDataType children;
1: 
1:   /**
1:    * name of the column
1:    */
1:   private String name;
1: 
1:   /**
1:    * column unique id
1:    */
1:   private String columnId;
1: 
1:   /**
1:    * parent column name
1:    */
1:   private String parentname;
1: 
1:   /**
1:    * output array index
1:    */
1:   private int outputArrayIndex;
1: 
1:   /**
1:    * current data counter
1:    */
1:   private int dataCounter;
1: 
1:   /**
1:    * constructor
1:    * @param name
1:    * @param parentname
1:    * @param columnId
1:    */
1:   public ArrayDataType(String name, String parentname, String columnId) {
1:     this.name = name;
1:     this.parentname = parentname;
1:     this.columnId = columnId;
1:   }
1: 
1:   /*
1:    * to add child dimensions
1:    */
1:   @Override
1:   public void addChildren(GenericDataType children) {
1:     if (this.getName().equals(children.getParentname())) {
1:       this.children = children;
1:     } else {
1:       this.children.addChildren(children);
1:     }
1:   }
1: 
1:   /*
1:    * return column name
1:    */
1:   @Override
1:   public String getName() {
1:     return name;
1:   }
1: 
1:   /*
1:    * return column unique id
1:    */
1:   @Override
0:   public String getColumnId() {
1:     return columnId;
1:   }
1: 
1:   /*
0:    * set column name
1:    */
1:   @Override
0:   public void setName(String name) {
1:     this.name = name;
1:   }
1: 
1:   /*
1:    * set parent name
1:    */
1:   @Override
1:   public String getParentname() {
1:     return parentname;
1:   }
1: 
1:   /*
1:    * returns all primitive type child columns
1:    */
1:   @Override
1:   public void getAllPrimitiveChildren(List<GenericDataType> primitiveChild) {
1:     if (children instanceof PrimitiveDataType) {
1:       primitiveChild.add(children);
1:     } else {
1:       children.getAllPrimitiveChildren(primitiveChild);
1:     }
1:   }
1: 
1:   /*
1:    * return surrogate index
1:    */
1:   @Override
1:   public int getSurrogateIndex() {
1:     return 0;
1:   }
1: 
1:   /*
1:    * set surrogate index
1:    */
1:   @Override
1:   public void setSurrogateIndex(int surrIndex) {
1: 
1:   }
1: 
1:   /*
0:    * parse string and generate surrogate
1:    */
1:   @Override
0:   public void parseStringAndWriteByteArray(String tableName, String inputString,
0:       String[] delimiter, int delimiterIndex, DataOutputStream dataOutputStream,
0:       CarbonCSVBasedDimSurrogateKeyGen surrogateKeyGen) throws KettleException, IOException {
1: 
0:     if (inputString == null || "null".equals(inputString) || "".equals(inputString) ||
0:         CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(inputString)) {
0:       dataOutputStream.writeInt(1);
0:       children.parseStringAndWriteByteArray(tableName,
0:           CarbonCommonConstants.MEMBER_DEFAULT_VAL, delimiter, delimiterIndex, dataOutputStream,
0:           surrogateKeyGen);
1:     } else {
0:       String[] splitInput = inputString.split(delimiter[delimiterIndex], -1);
0:       dataOutputStream.writeInt(splitInput.length);
0:       delimiterIndex =
0:           (delimiter.length - 1) == delimiterIndex ? delimiterIndex : delimiterIndex + 1;
0:       for (String eachInput : splitInput) {
0:         children.parseStringAndWriteByteArray(tableName, eachInput, delimiter, delimiterIndex,
0:             dataOutputStream, surrogateKeyGen);
1:       }
1:     }
1:   }
1: 
1:   /*
0:    * parse byte array and bit pack
1:    */
1:   @Override
0:   public void parseAndBitPack(ByteBuffer byteArrayInput, DataOutputStream dataOutputStream,
0:       KeyGenerator[] generator) throws IOException, KeyGenException {
1:     int dataLength = byteArrayInput.getInt();
1: 
1:     dataOutputStream.writeInt(dataLength);
1:     if (children instanceof PrimitiveDataType) {
0:       dataOutputStream.writeInt(generator[children.getSurrogateIndex()].getKeySizeInBytes());
1:     }
1:     for (int i = 0; i < dataLength; i++) {
0:       children.parseAndBitPack(byteArrayInput, dataOutputStream, generator);
1:     }
1: 
1:   }
1: 
1:   /*
1:    * get children column count
1:    */
1:   @Override
1:   public int getColsCount() {
1:     return children.getColsCount() + 1;
1:   }
1: 
1:   /*
1:    * set array index
1:    */
1:   @Override
1:   public void setOutputArrayIndex(int outputArrayIndex) {
1:     this.outputArrayIndex = outputArrayIndex;
1:     children.setOutputArrayIndex(outputArrayIndex + 1);
1:   }
1: 
1:   /*
1:    * get current max array index
1:    */
1:   @Override
1:   public int getMaxOutputArrayIndex() {
1:     int currentMax = outputArrayIndex;
1:     int childMax = children.getMaxOutputArrayIndex();
1:     if (childMax > currentMax) {
1:       currentMax = childMax;
1:     }
1:     return currentMax;
1:   }
1: 
1:   /*
1:    * split byte array and return metadata and primitive column data
1:    */
1:   @Override
1:   public void getColumnarDataForComplexType(List<ArrayList<byte[]>> columnsArray,
1:       ByteBuffer inputArray) {
1:     ByteBuffer b = ByteBuffer.allocate(8);
1:     int dataLength = inputArray.getInt();
1:     b.putInt(dataLength);
1:     if (dataLength == 0) {
1:       b.putInt(0);
1:     } else {
1:       b.putInt(children.getDataCounter());
1:     }
1:     columnsArray.get(this.outputArrayIndex).add(b.array());
1: 
1:     if (children instanceof PrimitiveDataType) {
0:       ((PrimitiveDataType) children).setKeySize(inputArray.getInt());
1:     }
1:     for (int i = 0; i < dataLength; i++) {
1:       children.getColumnarDataForComplexType(columnsArray, inputArray);
1:     }
1:     this.dataCounter++;
1:   }
1: 
1:   /*
1:    * return data counter
1:    */
1:   @Override
1:   public int getDataCounter() {
1:     return this.dataCounter;
1:   }
1: 
1:   /*
1:    * fill agg key blocks
1:    */
1:   @Override
1:   public void fillAggKeyBlock(List<Boolean> aggKeyBlockWithComplex, boolean[] aggKeyBlock) {
1:     aggKeyBlockWithComplex.add(false);
1:     children.fillAggKeyBlock(aggKeyBlockWithComplex, aggKeyBlock);
1:   }
1: 
1:   /*
1:    * fill key size
1:    */
1:   @Override
1:   public void fillBlockKeySize(List<Integer> blockKeySizeWithComplex, int[] primitiveBlockKeySize) {
1:     blockKeySizeWithComplex.add(8);
1:     children.fillBlockKeySize(blockKeySizeWithComplex, primitiveBlockKeySize);
1:   }
1: 
1:   /*
1:    * fill cardinality
1:    */
1:   @Override
1:   public void fillCardinalityAfterDataLoad(List<Integer> dimCardWithComplex,
1:       int[] maxSurrogateKeyArray) {
0:     dimCardWithComplex.add(0);
1:     children.fillCardinalityAfterDataLoad(dimCardWithComplex, maxSurrogateKeyArray);
1:   }
1: 
1: }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
============================================================================