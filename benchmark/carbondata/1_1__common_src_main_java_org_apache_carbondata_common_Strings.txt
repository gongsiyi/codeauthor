1:1d827c7: /*
1:1d827c7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1d827c7:  * contributor license agreements.  See the NOTICE file distributed with
1:1d827c7:  * this work for additional information regarding copyright ownership.
1:1d827c7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1d827c7:  * (the "License"); you may not use this file except in compliance with
1:1d827c7:  * the License.  You may obtain a copy of the License at
1:1d827c7:  *
1:1d827c7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:1d827c7:  *
1:1d827c7:  * Unless required by applicable law or agreed to in writing, software
1:1d827c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1d827c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1d827c7:  * See the License for the specific language governing permissions and
1:1d827c7:  * limitations under the License.
1:1d827c7:  */
1:1d827c7: 
1:1d827c7: package org.apache.carbondata.common;
1:1d827c7: 
1:1d827c7: import java.util.Objects;
1:1d827c7: 
1:89cfd8e: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:89cfd8e: 
1:e72bfd1: @InterfaceAudience.Internal
1:1d827c7: public class Strings {
1:1d827c7: 
1:1d827c7:   /**
1:1d827c7:    * Provide same function as mkString in Scala.
1:1d827c7:    * This is added to avoid JDK 8 dependency.
1:1d827c7:    */
1:1d827c7:   public static String mkString(String[] strings, String delimeter) {
1:1d827c7:     Objects.requireNonNull(strings);
1:1d827c7:     Objects.requireNonNull(delimeter);
1:1d827c7:     StringBuilder builder = new StringBuilder();
1:1d827c7:     for (int i = 0; i < strings.length; i++) {
1:1d827c7:       builder.append(strings[i]);
1:1d827c7:       if (i != strings.length - 1) {
1:1d827c7:         builder.append(delimeter);
1:1d827c7:       }
1:1d827c7:     }
1:1d827c7:     return builder.toString();
1:1d827c7:   }
1:2b70434: 
1:2b70434:   /**
1:2b70434:    * Append KB/MB/GB/TB to the input size and return
1:2b70434:    * @param size data size
1:2b70434:    * @return data size with unit
1:2b70434:    */
1:2b70434:   public static String formatSize(float size) {
1:2b70434:     long KB = 1024L;
1:2b70434:     long MB = KB << 10;
1:2b70434:     long GB = MB << 10;
1:2b70434:     long TB = GB << 10;
1:2b70434:     if (size < 0) {
1:2b70434:       return "NA";
1:2b70434:     } else if (size >= 0 && size < KB) {
1:2b70434:       return String.format("%sB", size);
1:2b70434:     } else if (size >= KB && size < MB) {
1:2b70434:       return String.format("%.2fKB", size / KB);
1:2b70434:     } else if (size >= MB && size < GB) {
1:2b70434:       return String.format("%.2fMB", size / MB);
1:2b70434:     } else if (size >= GB && size < TB) {
1:2b70434:       return String.format("%.2fGB", size / GB);
1:2b70434:     } else {
1:2b70434:       return String.format("%.2fTB", size / TB);
1:2b70434:     }
1:2b70434:   }
1:1d827c7: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:2b70434
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Append KB/MB/GB/TB to the input size and return
1:    * @param size data size
1:    * @return data size with unit
1:    */
1:   public static String formatSize(float size) {
1:     long KB = 1024L;
1:     long MB = KB << 10;
1:     long GB = MB << 10;
1:     long TB = GB << 10;
1:     if (size < 0) {
1:       return "NA";
1:     } else if (size >= 0 && size < KB) {
1:       return String.format("%sB", size);
1:     } else if (size >= KB && size < MB) {
1:       return String.format("%.2fKB", size / KB);
1:     } else if (size >= MB && size < GB) {
1:       return String.format("%.2fMB", size / MB);
1:     } else if (size >= GB && size < TB) {
1:       return String.format("%.2fGB", size / GB);
1:     } else {
1:       return String.format("%.2fTB", size / TB);
1:     }
1:   }
commit:e72bfd1
/////////////////////////////////////////////////////////////////////////
1: @InterfaceAudience.Internal
commit:89cfd8e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: 
0: @InterfaceAudience.Developer
commit:1d827c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.common;
1: 
1: import java.util.Objects;
1: 
1: public class Strings {
1: 
1:   /**
1:    * Provide same function as mkString in Scala.
1:    * This is added to avoid JDK 8 dependency.
1:    */
1:   public static String mkString(String[] strings, String delimeter) {
1:     Objects.requireNonNull(strings);
1:     Objects.requireNonNull(delimeter);
1:     StringBuilder builder = new StringBuilder();
1:     for (int i = 0; i < strings.length; i++) {
1:       builder.append(strings[i]);
1:       if (i != strings.length - 1) {
1:         builder.append(delimeter);
1:       }
1:     }
1:     return builder.toString();
1:   }
1: }
commit:2b70434
/////////////////////////////////////////////////////////////////////////
0: 
0:   /**
0:    * Append KB/MB/GB/TB to the input size and return
0:    * @param size data size
0:    * @return data size with unit
0:    */
0:   public static String formatSize(float size) {
0:     long KB = 1024L;
0:     long MB = KB << 10;
0:     long GB = MB << 10;
0:     long TB = GB << 10;
0:     if (size < 0) {
0:       return "NA";
0:     } else if (size >= 0 && size < KB) {
0:       return String.format("%sB", size);
0:     } else if (size >= KB && size < MB) {
0:       return String.format("%.2fKB", size / KB);
0:     } else if (size >= MB && size < GB) {
0:       return String.format("%.2fMB", size / MB);
0:     } else if (size >= GB && size < TB) {
0:       return String.format("%.2fGB", size / GB);
0:     } else {
0:       return String.format("%.2fTB", size / TB);
0:     }
0:   }
commit:e72bfd1
/////////////////////////////////////////////////////////////////////////
0: @InterfaceAudience.Internal
commit:89cfd8e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.common.annotations.InterfaceAudience;
0: 
0: @InterfaceAudience.Developer
commit:1d827c7
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.carbondata.common;
0: 
0: import java.util.Objects;
0: 
0: public class Strings {
0: 
0:   /**
0:    * Provide same function as mkString in Scala.
0:    * This is added to avoid JDK 8 dependency.
0:    */
0:   public static String mkString(String[] strings, String delimeter) {
0:     Objects.requireNonNull(strings);
0:     Objects.requireNonNull(delimeter);
0:     StringBuilder builder = new StringBuilder();
0:     for (int i = 0; i < strings.length; i++) {
0:       builder.append(strings[i]);
0:       if (i != strings.length - 1) {
0:         builder.append(delimeter);
0:       }
0:     }
0:     return builder.toString();
0:   }
0: }
============================================================================