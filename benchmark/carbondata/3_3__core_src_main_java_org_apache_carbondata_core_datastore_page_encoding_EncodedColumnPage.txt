1:bc3e684: /*
1:bc3e684:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bc3e684:  * contributor license agreements.  See the NOTICE file distributed with
1:bc3e684:  * this work for additional information regarding copyright ownership.
1:bc3e684:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bc3e684:  * (the "License"); you may not use this file except in compliance with
1:bc3e684:  * the License.  You may obtain a copy of the License at
1:bc3e684:  *
1:bc3e684:  *    http://www.apache.org/licenses/LICENSE-2.0
1:bc3e684:  *
1:bc3e684:  * Unless required by applicable law or agreed to in writing, software
1:bc3e684:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bc3e684:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc3e684:  * See the License for the specific language governing permissions and
1:bc3e684:  * limitations under the License.
2:bc3e684:  */
6:bc3e684: 
1:bc3e684: package org.apache.carbondata.core.datastore.page.encoding;
1:bc3e684: 
1:bc3e684: import java.nio.ByteBuffer;
1:bc3e684: 
1:e710339: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:e710339: import org.apache.carbondata.core.datastore.page.LocalDictColumnPage;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1:e710339: import org.apache.carbondata.core.localdictionary.PageLevelDictionary;
1:e6a4f64: import org.apache.carbondata.core.util.CarbonUtil;
1:bc3e684: import org.apache.carbondata.format.DataChunk2;
1:bc3e684: 
2:bc3e684: /**
1:e6a4f64:  * An column page after encoding.
1:bc3e684:  */
1:e6a4f64: public class EncodedColumnPage {
1:bc3e684: 
1:bc3e684:   // encoded and compressed column page data
1:e6a4f64:   protected final byte[] encodedData;
1:bc3e684: 
1:bc3e684:   // metadata of this page
1:e6a4f64:   private DataChunk2 pageMetadata;
1:e6a4f64: 
1:e710339:   private ColumnPage actualPage;
1:bc3e684: 
1:e6a4f64:   /**
1:e6a4f64:    * Constructor
1:e6a4f64:    * @param pageMetadata metadata of the encoded page
1:e6a4f64:    * @param encodedData encoded data for this page
1:e6a4f64:    */
1:e6a4f64:   public EncodedColumnPage(DataChunk2 pageMetadata, byte[] encodedData,
1:e710339:       ColumnPage actualPage) {
1:e6a4f64:     if (pageMetadata == null) {
1:e6a4f64:       throw new IllegalArgumentException("data chunk2 must not be null");
1:e6a4f64:     }
1:e6a4f64:     if (encodedData == null) {
1:e6a4f64:       throw new IllegalArgumentException("encoded data must not be null");
1:e6a4f64:     }
1:e6a4f64:     this.pageMetadata = pageMetadata;
1:bc3e684:     this.encodedData = encodedData;
1:e710339:     this.actualPage = actualPage;
3:bc3e684:   }
1:bc3e684: 
1:bc3e684:   /**
1:e6a4f64:    * return the encoded data as ByteBuffer
1:bc3e684:    */
1:e6a4f64:   public ByteBuffer getEncodedData() {
1:bc3e684:     return ByteBuffer.wrap(encodedData);
1:bc3e684:   }
1:bc3e684: 
1:e6a4f64:   public DataChunk2 getPageMetadata() {
1:e6a4f64:     return pageMetadata;
1:bc3e684:   }
1:bc3e684: 
1:e6a4f64:   /**
1:e6a4f64:    * Return the total size of serialized data and metadata
1:e6a4f64:    */
1:e6a4f64:   public int getTotalSerializedSize() {
1:e6a4f64:     int metadataSize = CarbonUtil.getByteArray(pageMetadata).length;
1:e6a4f64:     int dataSize = encodedData.length;
1:e6a4f64:     return metadataSize + dataSize;
1:bc3e684:   }
1:bc3e684: 
1:e6a4f64:   public SimpleStatsResult getStats() {
1:e710339:     return actualPage.getStatistics();
1:e710339:   }
1:e710339: 
1:e710339:   public ColumnPage getActualPage() {
1:e710339:     return actualPage;
1:e710339:   }
1:e710339: 
1:e710339:   public boolean isLocalDictGeneratedPage() {
1:e710339:     return actualPage.isLocalDictGeneratedPage();
1:e710339:   }
1:e710339: 
1:e710339:   public PageLevelDictionary getPageDictionary() {
1:e710339:     return actualPage.getColumnPageDictionary();
1:e710339:   }
1:e710339: 
1:e710339:   public void freeMemory() {
1:e710339:     if (actualPage instanceof LocalDictColumnPage) {
1:e710339:       LocalDictColumnPage page = (LocalDictColumnPage) actualPage;
1:e710339:       page.freeMemoryForce();
1:e710339:     }
1:bc3e684:   }
1:bc3e684: }
============================================================================
author:kumarvishal09
-------------------------------------------------------------------------------
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
1: import org.apache.carbondata.core.datastore.page.LocalDictColumnPage;
1: import org.apache.carbondata.core.localdictionary.PageLevelDictionary;
/////////////////////////////////////////////////////////////////////////
1:   private ColumnPage actualPage;
/////////////////////////////////////////////////////////////////////////
1:       ColumnPage actualPage) {
/////////////////////////////////////////////////////////////////////////
1:     this.actualPage = actualPage;
/////////////////////////////////////////////////////////////////////////
1:     return actualPage.getStatistics();
1:   }
1: 
1:   public ColumnPage getActualPage() {
1:     return actualPage;
1:   }
1: 
1:   public boolean isLocalDictGeneratedPage() {
1:     return actualPage.isLocalDictGeneratedPage();
1:   }
1: 
1:   public PageLevelDictionary getPageDictionary() {
1:     return actualPage.getColumnPageDictionary();
1:   }
1: 
1:   public void freeMemory() {
1:     if (actualPage instanceof LocalDictColumnPage) {
1:       LocalDictColumnPage page = (LocalDictColumnPage) actualPage;
1:       page.freeMemoryForce();
1:     }
author:Jacky Li
-------------------------------------------------------------------------------
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1: import org.apache.carbondata.core.util.CarbonUtil;
1:  * An column page after encoding.
1: public class EncodedColumnPage {
1:   protected final byte[] encodedData;
1:   private DataChunk2 pageMetadata;
0:   // stats of this page
0:   private SimpleStatsResult stats;
1: 
1:   /**
1:    * Constructor
1:    * @param pageMetadata metadata of the encoded page
1:    * @param encodedData encoded data for this page
1:    */
1:   public EncodedColumnPage(DataChunk2 pageMetadata, byte[] encodedData,
0:       SimpleStatsResult stats) {
1:     if (pageMetadata == null) {
1:       throw new IllegalArgumentException("data chunk2 must not be null");
1:     }
1:     if (encodedData == null) {
1:       throw new IllegalArgumentException("encoded data must not be null");
1:     }
1:     this.pageMetadata = pageMetadata;
0:     this.stats = stats;
1:    * return the encoded data as ByteBuffer
1:   public ByteBuffer getEncodedData() {
1:   public DataChunk2 getPageMetadata() {
1:     return pageMetadata;
1:   /**
1:    * Return the total size of serialized data and metadata
1:    */
1:   public int getTotalSerializedSize() {
1:     int metadataSize = CarbonUtil.getByteArray(pageMetadata).length;
1:     int dataSize = encodedData.length;
1:     return metadataSize + dataSize;
1:   public SimpleStatsResult getStats() {
0:     return stats;
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.encoding;
1: 
0: import java.io.IOException;
1: import java.nio.ByteBuffer;
0: import java.util.BitSet;
1: 
1: import org.apache.carbondata.format.DataChunk2;
1: 
1: /**
0:  * An column page after encoding and compression.
1:  */
0: public abstract class EncodedColumnPage {
1: 
0:   // number of row of this page
0:   protected int pageSize;
1: 
1:   // encoded and compressed column page data
0:   protected byte[] encodedData;
1: 
0:   protected BitSet nullBitSet;
1: 
1:   // metadata of this page
0:   protected DataChunk2 dataChunk2;
1: 
0:   EncodedColumnPage(int pageSize, byte[] encodedData) {
0:     this.pageSize = pageSize;
1:     this.encodedData = encodedData;
1:   }
1: 
0:   public abstract DataChunk2 buildDataChunk2() throws IOException;
1: 
1:   /**
0:    * return the encoded and compressed data page
1:    */
0:   public byte[] getEncodedData() {
0:     return encodedData;
1:   }
1: 
1:   /**
0:    * return the size of the s
1:    */
0:   public int getSerializedSize() {
0:     return encodedData.length;
1:   }
1: 
0:   public ByteBuffer serialize() {
1:     return ByteBuffer.wrap(encodedData);
1:   }
1: 
0:   public DataChunk2 getDataChunk2() {
0:     return dataChunk2;
1:   }
1: 
0:   public void setNullBitSet(BitSet nullBitSet) {
0:     this.nullBitSet = nullBitSet;
1:   }
1: 
0:   public BitSet getNullBitSet() {
0:     return nullBitSet;
1:   }
1: }
============================================================================