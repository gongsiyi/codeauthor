1:05b2654: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:05b2654:  *
1:05b2654:  *    http://www.apache.org/licenses/LICENSE-2.0
1:05b2654:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:05b2654:  */
1:349c59c: package org.apache.carbondata.processing.loading.dictionary;
2:05b2654: 
1:05b2654: import java.util.Map;
1:05b2654: 
1:05b2654: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1:05b2654: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:05b2654: import org.apache.carbondata.core.devapi.BiDictionary;
1:05b2654: import org.apache.carbondata.core.devapi.DictionaryGenerationException;
1:05b2654: import org.apache.carbondata.core.dictionary.client.DictionaryClient;
1:87dade7: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:87dade7: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessageType;
1:05b2654: 
1:05b2654: /**
1:05b2654:  * Dictionary implementation along with dictionary server client to get new dictionary values
1:05b2654:  */
1:05b2654: public class DictionaryServerClientDictionary implements BiDictionary<Integer, Object> {
1:05b2654: 
1:05b2654:   private Dictionary dictionary;
1:05b2654: 
1:05b2654:   private DictionaryClient client;
1:05b2654: 
1:05b2654:   private Map<Object, Integer> localCache;
1:05b2654: 
1:87dade7:   private DictionaryMessage dictionaryMessage;
1:05b2654: 
1:05b2654:   private int base;
1:05b2654: 
1:05b2654:   public DictionaryServerClientDictionary(Dictionary dictionary, DictionaryClient client,
1:87dade7:       DictionaryMessage key, Map<Object, Integer> localCache) {
1:05b2654:     this.dictionary = dictionary;
1:05b2654:     this.client = client;
1:87dade7:     this.dictionaryMessage = key;
1:05b2654:     this.localCache = localCache;
1:05b2654:     this.base = (dictionary == null ? 0 : dictionary.getDictionaryChunks().getSize() - 1);
1:05b2654:   }
1:05b2654: 
1:05b2654:   @Override public Integer getOrGenerateKey(Object value) throws DictionaryGenerationException {
1:05b2654:     Integer key = getKey(value);
1:05b2654:     if (key == null) {
1:87dade7:       dictionaryMessage.setData(value.toString());
1:87dade7:       DictionaryMessage dictionaryValue = client.getDictionary(dictionaryMessage);
1:87dade7:       key = dictionaryValue.getDictionaryValue();
1:87dade7:       synchronized (localCache) {
1:05b2654:         localCache.put(value, key);
1:05b2654:       }
1:05b2654:       return key + base;
1:05b2654:     }
1:05b2654:     return key;
1:05b2654:   }
1:05b2654: 
1:05b2654:   @Override public Integer getKey(Object value) {
1:05b2654:     Integer key = -1;
1:05b2654:     if (dictionary != null) {
1:05b2654:       key = dictionary.getSurrogateKey(value.toString());
1:05b2654:     }
1:05b2654:     if (key == CarbonCommonConstants.INVALID_SURROGATE_KEY) {
1:05b2654:       key = localCache.get(value);
1:05b2654:       if (key != null) {
1:05b2654:         return key + base;
1:05b2654:       }
1:05b2654:     }
1:05b2654:     return key;
1:05b2654:   }
1:05b2654: 
1:05b2654:   @Override public Object getValue(Integer key) {
1:05b2654:     throw new UnsupportedOperationException("Not supported here");
1:05b2654:   }
1:05b2654: 
1:05b2654:   @Override public int size() {
1:87dade7:     dictionaryMessage.setType(DictionaryMessageType.SIZE);
1:81149f6:     return client.getDictionary(dictionaryMessage).getDictionaryValue() + base;
1:05b2654:   }
1:05b2654: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.dictionary;
author:QiangCai
-------------------------------------------------------------------------------
commit:81149f6
/////////////////////////////////////////////////////////////////////////
1:     return client.getDictionary(dictionaryMessage).getDictionaryValue() + base;
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:87dade7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessageType;
/////////////////////////////////////////////////////////////////////////
1:   private DictionaryMessage dictionaryMessage;
1:       DictionaryMessage key, Map<Object, Integer> localCache) {
1:     this.dictionaryMessage = key;
/////////////////////////////////////////////////////////////////////////
1:       dictionaryMessage.setData(value.toString());
1:       DictionaryMessage dictionaryValue = client.getDictionary(dictionaryMessage);
1:       key = dictionaryValue.getDictionaryValue();
1:       synchronized (localCache) {
/////////////////////////////////////////////////////////////////////////
1:     dictionaryMessage.setType(DictionaryMessageType.SIZE);
0:     int size = client.getDictionary(dictionaryMessage).getDictionaryValue() + base;
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.dictionary;
1: 
1: import java.util.Map;
1: 
1: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.devapi.BiDictionary;
1: import org.apache.carbondata.core.devapi.DictionaryGenerationException;
1: import org.apache.carbondata.core.dictionary.client.DictionaryClient;
0: import org.apache.carbondata.core.dictionary.generator.key.DictionaryKey;
1: 
1: /**
1:  * Dictionary implementation along with dictionary server client to get new dictionary values
1:  */
1: public class DictionaryServerClientDictionary implements BiDictionary<Integer, Object> {
1: 
1:   private Dictionary dictionary;
1: 
1:   private DictionaryClient client;
1: 
1:   private Map<Object, Integer> localCache;
1: 
0:   private DictionaryKey dictionaryKey;
1: 
1:   private int base;
1: 
0:   private Object lock = new Object();
1: 
1:   public DictionaryServerClientDictionary(Dictionary dictionary, DictionaryClient client,
0:       DictionaryKey key, Map<Object, Integer> localCache) {
1:     this.dictionary = dictionary;
1:     this.client = client;
0:     this.dictionaryKey = key;
1:     this.localCache = localCache;
1:     this.base = (dictionary == null ? 0 : dictionary.getDictionaryChunks().getSize() - 1);
1:   }
1: 
1:   @Override public Integer getOrGenerateKey(Object value) throws DictionaryGenerationException {
1:     Integer key = getKey(value);
1:     if (key == null) {
0:       synchronized (lock) {
0:         dictionaryKey.setData(value);
0:         dictionaryKey.setThreadNo(Thread.currentThread().getId() + "");
0:         DictionaryKey dictionaryValue = client.getDictionary(dictionaryKey);
0:         key = (Integer) dictionaryValue.getData();
1:         localCache.put(value, key);
1:       }
1:       return key + base;
1:     }
1:     return key;
1:   }
1: 
1:   @Override public Integer getKey(Object value) {
1:     Integer key = -1;
1:     if (dictionary != null) {
1:       key = dictionary.getSurrogateKey(value.toString());
1:     }
1:     if (key == CarbonCommonConstants.INVALID_SURROGATE_KEY) {
1:       key = localCache.get(value);
1:       if (key != null) {
1:         return key + base;
1:       }
1:     }
1:     return key;
1:   }
1: 
1:   @Override public Object getValue(Integer key) {
1:     throw new UnsupportedOperationException("Not supported here");
1:   }
1: 
1:   @Override public int size() {
0:     dictionaryKey.setType("SIZE");
0:     int size = (int) client.getDictionary(dictionaryKey).getData()
0:             + base;
0:     return size;
1:   }
1: }
============================================================================