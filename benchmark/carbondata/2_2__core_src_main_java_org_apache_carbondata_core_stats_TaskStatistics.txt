1:d5bec4d: /*
1:d5bec4d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d5bec4d:  * contributor license agreements.  See the NOTICE file distributed with
1:d5bec4d:  * this work for additional information regarding copyright ownership.
1:d5bec4d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d5bec4d:  * (the "License"); you may not use this file except in compliance with
1:d5bec4d:  * the License.  You may obtain a copy of the License at
1:d5bec4d:  *
1:d5bec4d:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d5bec4d:  *
1:d5bec4d:  * Unless required by applicable law or agreed to in writing, software
1:d5bec4d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d5bec4d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d5bec4d:  * See the License for the specific language governing permissions and
1:d5bec4d:  * limitations under the License.
1:d5bec4d:  */
1:d5bec4d: 
1:d5bec4d: package org.apache.carbondata.core.stats;
1:d5bec4d: 
1:d5bec4d: import java.io.Serializable;
1:d5bec4d: import java.text.SimpleDateFormat;
1:d5bec4d: import java.util.Arrays;
1:d5bec4d: import java.util.List;
1:d5bec4d: 
1:d5bec4d: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:d5bec4d: import org.apache.carbondata.common.annotations.InterfaceStability;
1:d5bec4d: import org.apache.carbondata.core.util.CarbonUtil;
1:d5bec4d: 
1:d5bec4d: @InterfaceAudience.Developer("stats")
1:d5bec4d: @InterfaceStability.Evolving
1:d5bec4d: public class TaskStatistics implements Serializable {
1:d5bec4d: 
1:d5bec4d:   private static final Column[] columns = {
1:d5bec4d:       new Column("query_id", "query id"),
1:d5bec4d:       new Column("task_id", "spark task id"),
1:d5bec4d:       new Column("start_time", "start time"),
1:d5bec4d:       new Column("total_time", QueryStatisticsConstants.EXECUTOR_PART, true),
1:d5bec4d:       new Column("load_blocks_time", QueryStatisticsConstants.LOAD_BLOCKS_EXECUTOR, true),
1:d5bec4d:       new Column("load_dictionary_time", QueryStatisticsConstants.LOAD_DICTIONARY, true),
1:f6990d6:       new Column("carbon_scan_time", QueryStatisticsConstants.SCAN_BLOCKlET_TIME),
1:f6990d6:       new Column("carbon_IO_time", QueryStatisticsConstants.READ_BLOCKlET_TIME),
1:d5bec4d:       new Column("scan_blocks_num", QueryStatisticsConstants.SCAN_BLOCKS_NUM),
1:d5bec4d:       new Column("total_blocklets", QueryStatisticsConstants.TOTAL_BLOCKLET_NUM),
1:d5bec4d:       new Column("valid_blocklets", QueryStatisticsConstants.VALID_SCAN_BLOCKLET_NUM),
1:d5bec4d:       new Column("total_pages", QueryStatisticsConstants.TOTAL_PAGE_SCANNED),
1:d5bec4d:       new Column("scanned_pages", QueryStatisticsConstants.PAGE_SCANNED),
1:d5bec4d:       new Column("valid_pages", QueryStatisticsConstants.VALID_PAGE_SCANNED),
1:26607fb:       new Column("result_size", QueryStatisticsConstants.RESULT_SIZE),
1:26607fb:       new Column("key_column_filling_time", QueryStatisticsConstants.KEY_COLUMN_FILLING_TIME),
1:26607fb:       new Column("measure_filling_time", QueryStatisticsConstants.MEASURE_FILLING_TIME),
1:26607fb:       new Column("page_uncompress_time", QueryStatisticsConstants.PAGE_UNCOMPRESS_TIME),
1:26607fb:       new Column("result_preparation_time", QueryStatisticsConstants.RESULT_PREP_TIME)
1:d5bec4d:   };
1:d5bec4d: 
1:d5bec4d:   private static final int numOfColumns = columns.length;
1:d5bec4d: 
1:d5bec4d:   private String queryId;
1:d5bec4d: 
1:d5bec4d:   private long[] values = new long[numOfColumns];
1:d5bec4d: 
1:d5bec4d:   private long fileSize;
1:d5bec4d: 
1:d5bec4d:   private String[] files;
1:d5bec4d: 
1:d5bec4d:   TaskStatistics(String queryId, long taskId) {
1:d5bec4d:     this.queryId = queryId;
1:d5bec4d:     this.values[1] = taskId;
1:d5bec4d:   }
1:d5bec4d: 
1:d5bec4d:   public TaskStatistics(String queryId, long[] values, long fileSize, String[] files) {
1:d5bec4d:     this.queryId = queryId;
1:d5bec4d:     this.values = values;
1:d5bec4d:     this.fileSize = fileSize;
1:d5bec4d:     this.files = files;
1:d5bec4d:   }
1:d5bec4d: 
1:d5bec4d:   public TaskStatistics build(long startTime, List<QueryStatistic> queryStatistics) {
1:d5bec4d:     this.values[2] = startTime;
1:d5bec4d:     for (QueryStatistic statistic : queryStatistics) {
1:d5bec4d:       if (statistic.getMessage() != null) {
1:d5bec4d:         for (int columnIndex = 3; columnIndex <= numOfColumns - 1; columnIndex++) {
1:d5bec4d:           if (columns[columnIndex].comment.equals(statistic.getMessage())) {
1:d5bec4d:             if (columns[columnIndex].isDuration) {
1:d5bec4d:               values[columnIndex] += statistic.getTimeTaken();
1:d5bec4d:             } else {
1:d5bec4d:               values[columnIndex] += statistic.getCount();
1:d5bec4d:             }
1:d5bec4d:             break;
1:d5bec4d:           }
1:d5bec4d:         }
1:d5bec4d:       }
1:d5bec4d:     }
1:d5bec4d:     return this;
1:d5bec4d:   }
1:d5bec4d: 
1:d5bec4d:   @Override public String toString() {
1:d5bec4d:     StringBuilder builder = new StringBuilder();
1:d5bec4d:     printStatisticTable(Arrays.asList(this), builder, "");
1:d5bec4d:     return builder.toString();
1:d5bec4d:   }
1:d5bec4d: 
1:d5bec4d:   public static void printStatisticTable(List<TaskStatistics> stats, StringBuilder builder,
1:d5bec4d:       String indent) {
1:d5bec4d:     int numOfRows = stats.size();
1:d5bec4d:     int numOfColumns = columns.length;
1:d5bec4d: 
1:d5bec4d:     // header as string[]
1:d5bec4d:     String[] header = new String[numOfColumns];
1:d5bec4d:     for (int columnIndex = 0; columnIndex < numOfColumns; columnIndex++) {
1:d5bec4d:       header[columnIndex] = columns[columnIndex].name;
1:d5bec4d:     }
1:d5bec4d: 
1:d5bec4d:     // convert rows to string[][]
1:d5bec4d:     String[][] rows = new String[numOfRows][];
1:d5bec4d:     for (int rowIndex = 0; rowIndex < numOfRows; rowIndex++) {
1:d5bec4d:       rows[rowIndex] = stats.get(rowIndex).convertValueToString();
1:d5bec4d:     }
1:d5bec4d: 
1:d5bec4d:     CarbonUtil.logTable(builder, header, rows, indent);
1:d5bec4d:   }
1:d5bec4d: 
1:d5bec4d:   private String[] convertValueToString() {
1:d5bec4d:     String[] valueStrings = new String[numOfColumns];
1:d5bec4d:     valueStrings[0] = queryId;
1:d5bec4d:     for (int i = 1; i < numOfColumns; i++) {
1:d5bec4d:       if (columns[i].isDuration) {
1:d5bec4d:         valueStrings[i] = String.valueOf(values[i]) + "ms";
1:d5bec4d:       } else {
1:d5bec4d:         valueStrings[i] = String.valueOf(values[i]);
1:d5bec4d:       }
1:d5bec4d:     }
1:d5bec4d:     valueStrings[2] = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(values[2]);
1:d5bec4d:     return valueStrings;
1:d5bec4d:   }
1:d5bec4d: 
1:d5bec4d:   private static class Column {
1:d5bec4d:     String name;
1:d5bec4d:     String comment;
1:d5bec4d:     boolean isDuration;
1:d5bec4d: 
1:d5bec4d:     Column(String name, String comment) {
1:d5bec4d:       this.name = name;
1:d5bec4d:       this.comment = comment;
1:d5bec4d:       this.isDuration = false;
1:d5bec4d:     }
1:d5bec4d: 
1:d5bec4d:     Column(String name, String comment, boolean isDuration) {
1:d5bec4d:       this(name, comment);
1:d5bec4d:       this.isDuration = isDuration;
1:d5bec4d:     }
1:d5bec4d:   }
1:d5bec4d: 
1:d5bec4d:   public String getQueryId() {
1:d5bec4d:     return queryId;
1:d5bec4d:   }
1:d5bec4d: 
1:d5bec4d:   public long[] getValues() {
1:d5bec4d:     return values;
1:d5bec4d:   }
1:d5bec4d: 
1:d5bec4d:   public long getFileSize() {
1:d5bec4d:     return fileSize;
1:d5bec4d:   }
1:d5bec4d: 
1:d5bec4d:   public String[] getFiles() {
1:d5bec4d:     return files;
1:d5bec4d:   }
1:d5bec4d: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:26607fb
/////////////////////////////////////////////////////////////////////////
1:       new Column("result_size", QueryStatisticsConstants.RESULT_SIZE),
1:       new Column("key_column_filling_time", QueryStatisticsConstants.KEY_COLUMN_FILLING_TIME),
1:       new Column("measure_filling_time", QueryStatisticsConstants.MEASURE_FILLING_TIME),
1:       new Column("page_uncompress_time", QueryStatisticsConstants.PAGE_UNCOMPRESS_TIME),
1:       new Column("result_preparation_time", QueryStatisticsConstants.RESULT_PREP_TIME)
author:QiangCai
-------------------------------------------------------------------------------
commit:f6990d6
/////////////////////////////////////////////////////////////////////////
1:       new Column("carbon_scan_time", QueryStatisticsConstants.SCAN_BLOCKlET_TIME),
1:       new Column("carbon_IO_time", QueryStatisticsConstants.READ_BLOCKlET_TIME),
commit:d5bec4d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.stats;
1: 
1: import java.io.Serializable;
1: import java.text.SimpleDateFormat;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.annotations.InterfaceStability;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: 
1: @InterfaceAudience.Developer("stats")
1: @InterfaceStability.Evolving
1: public class TaskStatistics implements Serializable {
1: 
1:   private static final Column[] columns = {
1:       new Column("query_id", "query id"),
1:       new Column("task_id", "spark task id"),
1:       new Column("start_time", "start time"),
1:       new Column("total_time", QueryStatisticsConstants.EXECUTOR_PART, true),
1:       new Column("load_blocks_time", QueryStatisticsConstants.LOAD_BLOCKS_EXECUTOR, true),
1:       new Column("load_dictionary_time", QueryStatisticsConstants.LOAD_DICTIONARY, true),
0:       new Column("carbon_scan_time", QueryStatisticsConstants.SCAN_BLOCKlET_TIME, true),
0:       new Column("carbon_IO_time", QueryStatisticsConstants.READ_BLOCKlET_TIME, true),
1:       new Column("scan_blocks_num", QueryStatisticsConstants.SCAN_BLOCKS_NUM),
1:       new Column("total_blocklets", QueryStatisticsConstants.TOTAL_BLOCKLET_NUM),
1:       new Column("valid_blocklets", QueryStatisticsConstants.VALID_SCAN_BLOCKLET_NUM),
1:       new Column("total_pages", QueryStatisticsConstants.TOTAL_PAGE_SCANNED),
1:       new Column("scanned_pages", QueryStatisticsConstants.PAGE_SCANNED),
1:       new Column("valid_pages", QueryStatisticsConstants.VALID_PAGE_SCANNED),
0:       new Column("result_size", QueryStatisticsConstants.RESULT_SIZE)
1:   };
1: 
1:   private static final int numOfColumns = columns.length;
1: 
1:   private String queryId;
1: 
1:   private long[] values = new long[numOfColumns];
1: 
1:   private long fileSize;
1: 
1:   private String[] files;
1: 
1:   TaskStatistics(String queryId, long taskId) {
1:     this.queryId = queryId;
1:     this.values[1] = taskId;
1:   }
1: 
1:   public TaskStatistics(String queryId, long[] values, long fileSize, String[] files) {
1:     this.queryId = queryId;
1:     this.values = values;
1:     this.fileSize = fileSize;
1:     this.files = files;
1:   }
1: 
1:   public TaskStatistics build(long startTime, List<QueryStatistic> queryStatistics) {
1:     this.values[2] = startTime;
1:     for (QueryStatistic statistic : queryStatistics) {
1:       if (statistic.getMessage() != null) {
1:         for (int columnIndex = 3; columnIndex <= numOfColumns - 1; columnIndex++) {
1:           if (columns[columnIndex].comment.equals(statistic.getMessage())) {
1:             if (columns[columnIndex].isDuration) {
1:               values[columnIndex] += statistic.getTimeTaken();
1:             } else {
1:               values[columnIndex] += statistic.getCount();
1:             }
1:             break;
1:           }
1:         }
1:       }
1:     }
1:     return this;
1:   }
1: 
1:   @Override public String toString() {
1:     StringBuilder builder = new StringBuilder();
1:     printStatisticTable(Arrays.asList(this), builder, "");
1:     return builder.toString();
1:   }
1: 
1:   public static void printStatisticTable(List<TaskStatistics> stats, StringBuilder builder,
1:       String indent) {
1:     int numOfRows = stats.size();
1:     int numOfColumns = columns.length;
1: 
1:     // header as string[]
1:     String[] header = new String[numOfColumns];
1:     for (int columnIndex = 0; columnIndex < numOfColumns; columnIndex++) {
1:       header[columnIndex] = columns[columnIndex].name;
1:     }
1: 
1:     // convert rows to string[][]
1:     String[][] rows = new String[numOfRows][];
1:     for (int rowIndex = 0; rowIndex < numOfRows; rowIndex++) {
1:       rows[rowIndex] = stats.get(rowIndex).convertValueToString();
1:     }
1: 
1:     CarbonUtil.logTable(builder, header, rows, indent);
1:   }
1: 
1:   private String[] convertValueToString() {
1:     String[] valueStrings = new String[numOfColumns];
1:     valueStrings[0] = queryId;
1:     for (int i = 1; i < numOfColumns; i++) {
1:       if (columns[i].isDuration) {
1:         valueStrings[i] = String.valueOf(values[i]) + "ms";
1:       } else {
1:         valueStrings[i] = String.valueOf(values[i]);
1:       }
1:     }
1:     valueStrings[2] = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(values[2]);
1:     return valueStrings;
1:   }
1: 
1:   private static class Column {
1:     String name;
1:     String comment;
1:     boolean isDuration;
1: 
1:     Column(String name, String comment) {
1:       this.name = name;
1:       this.comment = comment;
1:       this.isDuration = false;
1:     }
1: 
1:     Column(String name, String comment, boolean isDuration) {
1:       this(name, comment);
1:       this.isDuration = isDuration;
1:     }
1:   }
1: 
1:   public String getQueryId() {
1:     return queryId;
1:   }
1: 
1:   public long[] getValues() {
1:     return values;
1:   }
1: 
1:   public long getFileSize() {
1:     return fileSize;
1:   }
1: 
1:   public String[] getFiles() {
1:     return files;
1:   }
1: }
============================================================================