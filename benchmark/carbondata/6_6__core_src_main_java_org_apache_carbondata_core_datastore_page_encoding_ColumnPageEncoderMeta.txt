1:e6a4f64: /*
1:e6a4f64:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e6a4f64:  * contributor license agreements.  See the NOTICE file distributed with
1:e6a4f64:  * this work for additional information regarding copyright ownership.
1:e6a4f64:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e6a4f64:  * (the "License"); you may not use this file except in compliance with
1:e6a4f64:  * the License.  You may obtain a copy of the License at
1:e6a4f64:  *
1:e6a4f64:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e6a4f64:  *
1:e6a4f64:  * Unless required by applicable law or agreed to in writing, software
1:e6a4f64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6a4f64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6a4f64:  * See the License for the specific language governing permissions and
1:e6a4f64:  * limitations under the License.
1:e6a4f64:  */
4:e6a4f64: 
1:e6a4f64: package org.apache.carbondata.core.datastore.page.encoding;
1:e6a4f64: 
1:e6a4f64: import java.io.DataInput;
1:e6a4f64: import java.io.DataOutput;
1:e6a4f64: import java.io.IOException;
1:e6a4f64: import java.math.BigDecimal;
1:e6a4f64: import java.nio.ByteBuffer;
1:e6a4f64: 
1:8c1ddbf: import org.apache.carbondata.core.datastore.TableSpec;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1:e6a4f64: import org.apache.carbondata.core.metadata.ValueEncoderMeta;
1:e6a4f64: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:f209e8e: import org.apache.carbondata.core.metadata.datatype.DecimalType;
1:e6a4f64: import org.apache.carbondata.core.metadata.schema.table.Writable;
1:e6a4f64: import org.apache.carbondata.core.util.DataTypeUtil;
1:e6a4f64: 
1:e6a4f64: /**
1:e6a4f64:  * It holds metadata for one column page
1:e6a4f64:  */
1:e6a4f64: public class ColumnPageEncoderMeta extends ValueEncoderMeta implements Writable {
1:e6a4f64: 
1:8c1ddbf:   private static final long serialVersionUID = 1905162071950251407L;
1:8c1ddbf: 
1:8c1ddbf:   // column spec of this column
1:8c1ddbf:   private transient TableSpec.ColumnSpec columnSpec;
1:8c1ddbf: 
1:8c1ddbf:   // storage data type of this column, it could be different from data type in the column spec
1:8c1ddbf:   private DataType storeDataType;
1:8c1ddbf: 
1:8f08c4a:   // compressor name for compressing and decompressing this column.
1:8f08c4a:   // Make it protected for RLEEncoderMeta
1:8f08c4a:   protected String compressorName;
1:e6a4f64: 
1:e6a4f64:   public ColumnPageEncoderMeta() {
3:e6a4f64:   }
1:e6a4f64: 
1:8c1ddbf:   public ColumnPageEncoderMeta(TableSpec.ColumnSpec columnSpec, DataType storeDataType,
1:8f08c4a:       String compressorName) {
1:8c1ddbf:     if (columnSpec == null) {
1:8c1ddbf:       throw new IllegalArgumentException("columm spec must not be null");
1:e6a4f64:     }
1:8c1ddbf:     if (storeDataType == null) {
1:8c1ddbf:       throw new IllegalArgumentException("store data type must not be null");
1:8c1ddbf:     }
1:8c1ddbf:     if (compressorName == null) {
1:8c1ddbf:       throw new IllegalArgumentException("compressor must not be null");
1:8c1ddbf:     }
1:8c1ddbf:     this.columnSpec = columnSpec;
1:8c1ddbf:     this.storeDataType = storeDataType;
1:8c1ddbf:     this.compressorName = compressorName;
1:133b303:     setType(DataType.convertType(storeDataType));
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   public ColumnPageEncoderMeta(TableSpec.ColumnSpec columnSpec, DataType storeDataType,
1:8f08c4a:       SimpleStatsResult stats, String compressorName) {
1:8f08c4a:     this(columnSpec, storeDataType, compressorName);
1:e6a4f64:     if (stats != null) {
1:4f7487d:       setDecimal(stats.getDecimalCount());
1:e6a4f64:       setMaxValue(stats.getMax());
1:e6a4f64:       setMinValue(stats.getMin());
1:e6a4f64:     }
1:e6a4f64:   }
1:e6a4f64: 
1:8c1ddbf:   public DataType getStoreDataType() {
1:8c1ddbf:     return storeDataType;
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:e6a4f64:   public void write(DataOutput out) throws IOException {
1:8c1ddbf:     columnSpec.write(out);
1:956833e:     out.writeByte(storeDataType.getId());
1:e6a4f64:     out.writeInt(getDecimal());
1:e6a4f64:     out.writeByte(getDataTypeSelected());
1:e6a4f64:     writeMinMax(out);
1:8c1ddbf:     out.writeUTF(compressorName);
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:e6a4f64:   public void readFields(DataInput in) throws IOException {
1:8c1ddbf:     columnSpec = new TableSpec.ColumnSpec();
1:8c1ddbf:     columnSpec.readFields(in);
1:956833e:     storeDataType = DataTypes.valueOf(in.readByte());
1:f209e8e:     if (DataTypes.isDecimal(storeDataType)) {
1:f209e8e:       DecimalType decimalType = (DecimalType) storeDataType;
1:f209e8e:       decimalType.setPrecision(columnSpec.getPrecision());
1:f209e8e:       decimalType.setScale(columnSpec.getScale());
1:f209e8e:     }
1:f209e8e: 
1:e6a4f64:     setDecimal(in.readInt());
1:e6a4f64:     setDataTypeSelected(in.readByte());
1:e6a4f64:     readMinMax(in);
1:8c1ddbf:     compressorName = in.readUTF();
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   private void writeMinMax(DataOutput out) throws IOException {
1:956833e:     DataType dataType = columnSpec.getSchemaDataType();
1:6abdd97:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
1:956833e:       out.writeByte((byte) getMaxValue());
1:956833e:       out.writeByte((byte) getMinValue());
1:956833e:       out.writeLong(0L); // unique value is obsoleted, maintain for compatibility
1:956833e:     } else if (dataType == DataTypes.SHORT) {
1:956833e:       out.writeShort((short) getMaxValue());
1:956833e:       out.writeShort((short) getMinValue());
1:956833e:       out.writeLong(0L); // unique value is obsoleted, maintain for compatibility
1:956833e:     } else if (dataType == DataTypes.INT) {
1:956833e:       out.writeInt((int) getMaxValue());
1:956833e:       out.writeInt((int) getMinValue());
1:956833e:       out.writeLong(0L); // unique value is obsoleted, maintain for compatibility
1:438b442:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.TIMESTAMP) {
1:956833e:       out.writeLong((Long) getMaxValue());
1:956833e:       out.writeLong((Long) getMinValue());
1:956833e:       out.writeLong(0L); // unique value is obsoleted, maintain for compatibility
1:956833e:     } else if (dataType == DataTypes.DOUBLE) {
1:956833e:       out.writeDouble((Double) getMaxValue());
1:956833e:       out.writeDouble((Double) getMinValue());
1:956833e:       out.writeDouble(0d); // unique value is obsoleted, maintain for compatibility
1:f209e8e:     } else if (DataTypes.isDecimal(dataType)) {
1:956833e:       byte[] maxAsBytes = getMaxAsBytes(columnSpec.getSchemaDataType());
1:956833e:       byte[] minAsBytes = getMinAsBytes(columnSpec.getSchemaDataType());
1:956833e:       byte[] unique = DataTypeUtil.bigDecimalToByte(BigDecimal.ZERO);
1:956833e:       out.writeShort((short) maxAsBytes.length);
1:956833e:       out.write(maxAsBytes);
1:956833e:       out.writeShort((short) minAsBytes.length);
1:956833e:       out.write(minAsBytes);
1:956833e:       // unique value is obsoleted, maintain for compatibility
1:956833e:       out.writeShort((short) unique.length);
1:956833e:       out.write(unique);
1:f209e8e:       if (DataTypes.isDecimal(dataType)) {
1:f209e8e:         DecimalType decimalType = (DecimalType) dataType;
1:f209e8e:         out.writeInt(decimalType.getScale());
1:f209e8e:         out.writeInt(decimalType.getPrecision());
1:f209e8e:       } else {
1:f209e8e:         out.writeInt(-1);
1:f209e8e:         out.writeInt(-1);
1:f209e8e:       }
1:956833e:     } else if (dataType == DataTypes.BYTE_ARRAY) {
1:956833e:       // for complex type, it will come here, ignoring stats for complex type
1:956833e:       // TODO: support stats for complex type
1:956833e:     } else {
1:956833e:       throw new IllegalArgumentException("invalid data type: " + storeDataType);
1:e6a4f64:     }
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   private void readMinMax(DataInput in) throws IOException {
1:956833e:     DataType dataType = columnSpec.getSchemaDataType();
1:6abdd97:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
1:956833e:       this.setMaxValue(in.readByte());
1:956833e:       this.setMinValue(in.readByte());
1:956833e:       in.readLong();  // for non exist value which is obsoleted, it is backward compatibility;
1:956833e:     } else if (dataType == DataTypes.SHORT) {
1:956833e:       this.setMaxValue(in.readShort());
1:956833e:       this.setMinValue(in.readShort());
1:956833e:       in.readLong();  // for non exist value which is obsoleted, it is backward compatibility;
1:956833e:     } else if (dataType == DataTypes.INT) {
1:956833e:       this.setMaxValue(in.readInt());
1:956833e:       this.setMinValue(in.readInt());
1:956833e:       in.readLong();  // for non exist value which is obsoleted, it is backward compatibility;
1:438b442:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.TIMESTAMP) {
1:956833e:       this.setMaxValue(in.readLong());
1:956833e:       this.setMinValue(in.readLong());
1:956833e:       in.readLong();  // for non exist value which is obsoleted, it is backward compatibility;
1:956833e:     } else if (dataType == DataTypes.DOUBLE) {
1:956833e:       this.setMaxValue(in.readDouble());
1:956833e:       this.setMinValue(in.readDouble());
1:956833e:       in.readDouble(); // for non exist value which is obsoleted, it is backward compatibility;
1:f209e8e:     } else if (DataTypes.isDecimal(dataType)) {
1:956833e:       byte[] max = new byte[in.readShort()];
1:956833e:       in.readFully(max);
1:956833e:       this.setMaxValue(DataTypeUtil.byteToBigDecimal(max));
1:956833e:       byte[] min = new byte[in.readShort()];
1:956833e:       in.readFully(min);
1:956833e:       this.setMinValue(DataTypeUtil.byteToBigDecimal(min));
1:956833e:       // unique value is obsoleted, maintain for compatiability
1:956833e:       short uniqueLength = in.readShort();
1:956833e:       in.readFully(new byte[uniqueLength]);
1:f209e8e:       // scale field is obsoleted. It is stored in the schema data type in columnSpec
1:f209e8e:       in.readInt();
1:f209e8e:       // precision field is obsoleted. It is stored in the schema data type in columnSpec
1:f209e8e:       in.readInt();
1:956833e:     } else if (dataType == DataTypes.BYTE_ARRAY) {
1:956833e:       // for complex type, it will come here, ignoring stats for complex type
1:956833e:       // TODO: support stats for complex type
1:956833e:     } else {
1:956833e:       throw new IllegalArgumentException("invalid data type: " + storeDataType);
1:e6a4f64:     }
1:e6a4f64:   }
1:e6a4f64: 
1:956833e:   private byte[] getMaxAsBytes(DataType dataType) {
1:6f20437:     return getValueAsBytes(getMaxValue(), dataType);
1:e6a4f64:   }
1:e6a4f64: 
1:956833e:   private byte[] getMinAsBytes(DataType dataType) {
1:6f20437:     return getValueAsBytes(getMinValue(), dataType);
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   /**
1:e6a4f64:    * convert value to byte array
1:e6a4f64:    */
1:6f20437:   private byte[] getValueAsBytes(Object value, DataType dataType) {
1:e6a4f64:     ByteBuffer b;
1:956833e:     if (dataType == DataTypes.BYTE_ARRAY) {
1:956833e:       b = ByteBuffer.allocate(8);
1:956833e:       b.putLong((byte) value);
1:956833e:       b.flip();
1:956833e:       return b.array();
1:956833e:     } else if (dataType == DataTypes.SHORT) {
1:956833e:       b = ByteBuffer.allocate(8);
1:956833e:       b.putLong((short) value);
1:956833e:       b.flip();
1:956833e:       return b.array();
1:956833e:     } else if (dataType == DataTypes.INT) {
1:956833e:       b = ByteBuffer.allocate(8);
1:956833e:       b.putLong((int) value);
1:956833e:       b.flip();
1:956833e:       return b.array();
2:956833e:     } else if (dataType == DataTypes.LONG) {
1:956833e:       b = ByteBuffer.allocate(8);
1:956833e:       b.putLong((long) value);
1:956833e:       b.flip();
1:956833e:       return b.array();
1:956833e:     } else if (dataType == DataTypes.DOUBLE) {
1:956833e:       b = ByteBuffer.allocate(8);
1:956833e:       b.putDouble((double) value);
1:956833e:       b.flip();
1:956833e:       return b.array();
1:f209e8e:     } else if (DataTypes.isDecimal(dataType)) {
1:956833e:       return DataTypeUtil.bigDecimalToByte((BigDecimal) value);
1:956833e:     } else if (dataType == DataTypes.STRING || dataType == DataTypes.TIMESTAMP
1:956833e:         || dataType == DataTypes.DATE) {
1:956833e:       return (byte[]) value;
1:956833e:     } else {
1:956833e:       throw new IllegalArgumentException("Invalid data type: " + storeDataType);
1:e6a4f64:     }
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   public int getScale() {
1:f209e8e:     if (DataTypes.isDecimal(columnSpec.getSchemaDataType())) {
1:f209e8e:       return columnSpec.getScale();
1:f209e8e:     }
1:f209e8e:     throw new UnsupportedOperationException();
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   public int getPrecision() {
1:f209e8e:     if (DataTypes.isDecimal(columnSpec.getSchemaDataType())) {
1:f209e8e:       return columnSpec.getPrecision();
1:f209e8e:     }
1:f209e8e:     throw new UnsupportedOperationException();
1:e6a4f64:   }
1:8c1ddbf: 
1:8c1ddbf:   public TableSpec.ColumnSpec getColumnSpec() {
1:8c1ddbf:     return columnSpec;
1:8c1ddbf:   }
1:8c1ddbf: 
1:8c1ddbf:   public String getCompressorName() {
1:8c1ddbf:     return compressorName;
1:8c1ddbf:   }
1:8c1ddbf: 
1:8c1ddbf:   public DataType getSchemaDataType() {
1:8c1ddbf:     return columnSpec.getSchemaDataType();
1:8c1ddbf:   }
1:e6a4f64: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:   // compressor name for compressing and decompressing this column.
1:   // Make it protected for RLEEncoderMeta
1:   protected String compressorName;
1:       String compressorName) {
/////////////////////////////////////////////////////////////////////////
1:   }
1: 
1:   public ColumnPageEncoderMeta(TableSpec.ColumnSpec columnSpec, DataType storeDataType,
1:       SimpleStatsResult stats, String compressorName) {
1:     this(columnSpec, storeDataType, compressorName);
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:438b442
/////////////////////////////////////////////////////////////////////////
1:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.TIMESTAMP) {
/////////////////////////////////////////////////////////////////////////
1:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.TIMESTAMP) {
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DecimalType;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (DataTypes.isDecimal(storeDataType)) {
1:       DecimalType decimalType = (DecimalType) storeDataType;
1:       decimalType.setPrecision(columnSpec.getPrecision());
1:       decimalType.setScale(columnSpec.getScale());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     } else if (DataTypes.isDecimal(dataType)) {
/////////////////////////////////////////////////////////////////////////
1:       if (DataTypes.isDecimal(dataType)) {
1:         DecimalType decimalType = (DecimalType) dataType;
1:         out.writeInt(decimalType.getScale());
1:         out.writeInt(decimalType.getPrecision());
1:       } else {
1:         out.writeInt(-1);
1:         out.writeInt(-1);
1:       }
/////////////////////////////////////////////////////////////////////////
1:     } else if (DataTypes.isDecimal(dataType)) {
/////////////////////////////////////////////////////////////////////////
1:       // scale field is obsoleted. It is stored in the schema data type in columnSpec
1:       in.readInt();
1:       // precision field is obsoleted. It is stored in the schema data type in columnSpec
1:       in.readInt();
/////////////////////////////////////////////////////////////////////////
1:     } else if (DataTypes.isDecimal(dataType)) {
/////////////////////////////////////////////////////////////////////////
1:     if (DataTypes.isDecimal(columnSpec.getSchemaDataType())) {
1:       return columnSpec.getScale();
1:     }
1:     throw new UnsupportedOperationException();
1:     if (DataTypes.isDecimal(columnSpec.getSchemaDataType())) {
1:       return columnSpec.getPrecision();
1:     }
1:     throw new UnsupportedOperationException();
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     out.writeByte(storeDataType.getId());
/////////////////////////////////////////////////////////////////////////
1:     storeDataType = DataTypes.valueOf(in.readByte());
/////////////////////////////////////////////////////////////////////////
1:     DataType dataType = columnSpec.getSchemaDataType();
0:     if (dataType == DataTypes.BYTE) {
1:       out.writeByte((byte) getMaxValue());
1:       out.writeByte((byte) getMinValue());
1:       out.writeLong(0L); // unique value is obsoleted, maintain for compatibility
1:     } else if (dataType == DataTypes.SHORT) {
1:       out.writeShort((short) getMaxValue());
1:       out.writeShort((short) getMinValue());
1:       out.writeLong(0L); // unique value is obsoleted, maintain for compatibility
1:     } else if (dataType == DataTypes.INT) {
1:       out.writeInt((int) getMaxValue());
1:       out.writeInt((int) getMinValue());
1:       out.writeLong(0L); // unique value is obsoleted, maintain for compatibility
1:     } else if (dataType == DataTypes.LONG) {
1:       out.writeLong((Long) getMaxValue());
1:       out.writeLong((Long) getMinValue());
1:       out.writeLong(0L); // unique value is obsoleted, maintain for compatibility
1:     } else if (dataType == DataTypes.DOUBLE) {
1:       out.writeDouble((Double) getMaxValue());
1:       out.writeDouble((Double) getMinValue());
1:       out.writeDouble(0d); // unique value is obsoleted, maintain for compatibility
0:     } else if (dataType == DataTypes.DECIMAL) {
1:       byte[] maxAsBytes = getMaxAsBytes(columnSpec.getSchemaDataType());
1:       byte[] minAsBytes = getMinAsBytes(columnSpec.getSchemaDataType());
1:       byte[] unique = DataTypeUtil.bigDecimalToByte(BigDecimal.ZERO);
1:       out.writeShort((short) maxAsBytes.length);
1:       out.write(maxAsBytes);
1:       out.writeShort((short) minAsBytes.length);
1:       out.write(minAsBytes);
1:       // unique value is obsoleted, maintain for compatibility
1:       out.writeShort((short) unique.length);
1:       out.write(unique);
0:       out.writeInt(scale);
0:       out.writeInt(precision);
1:     } else if (dataType == DataTypes.BYTE_ARRAY) {
1:       // for complex type, it will come here, ignoring stats for complex type
1:       // TODO: support stats for complex type
1:     } else {
1:       throw new IllegalArgumentException("invalid data type: " + storeDataType);
1:     DataType dataType = columnSpec.getSchemaDataType();
0:     if (dataType == DataTypes.BYTE) {
1:       this.setMaxValue(in.readByte());
1:       this.setMinValue(in.readByte());
1:       in.readLong();  // for non exist value which is obsoleted, it is backward compatibility;
1:     } else if (dataType == DataTypes.SHORT) {
1:       this.setMaxValue(in.readShort());
1:       this.setMinValue(in.readShort());
1:       in.readLong();  // for non exist value which is obsoleted, it is backward compatibility;
1:     } else if (dataType == DataTypes.INT) {
1:       this.setMaxValue(in.readInt());
1:       this.setMinValue(in.readInt());
1:       in.readLong();  // for non exist value which is obsoleted, it is backward compatibility;
1:     } else if (dataType == DataTypes.LONG) {
1:       this.setMaxValue(in.readLong());
1:       this.setMinValue(in.readLong());
1:       in.readLong();  // for non exist value which is obsoleted, it is backward compatibility;
1:     } else if (dataType == DataTypes.DOUBLE) {
1:       this.setMaxValue(in.readDouble());
1:       this.setMinValue(in.readDouble());
1:       in.readDouble(); // for non exist value which is obsoleted, it is backward compatibility;
0:     } else if (dataType == DataTypes.DECIMAL) {
1:       byte[] max = new byte[in.readShort()];
1:       in.readFully(max);
1:       this.setMaxValue(DataTypeUtil.byteToBigDecimal(max));
1:       byte[] min = new byte[in.readShort()];
1:       in.readFully(min);
1:       this.setMinValue(DataTypeUtil.byteToBigDecimal(min));
1:       // unique value is obsoleted, maintain for compatiability
1:       short uniqueLength = in.readShort();
1:       in.readFully(new byte[uniqueLength]);
0:       this.scale = in.readInt();
0:       this.precision = in.readInt();
1:     } else if (dataType == DataTypes.BYTE_ARRAY) {
1:       // for complex type, it will come here, ignoring stats for complex type
1:       // TODO: support stats for complex type
1:     } else {
1:       throw new IllegalArgumentException("invalid data type: " + storeDataType);
1:   private byte[] getMaxAsBytes(DataType dataType) {
1:   private byte[] getMinAsBytes(DataType dataType) {
/////////////////////////////////////////////////////////////////////////
1:     if (dataType == DataTypes.BYTE_ARRAY) {
1:       b = ByteBuffer.allocate(8);
1:       b.putLong((byte) value);
1:       b.flip();
1:       return b.array();
1:     } else if (dataType == DataTypes.SHORT) {
1:       b = ByteBuffer.allocate(8);
1:       b.putLong((short) value);
1:       b.flip();
1:       return b.array();
1:     } else if (dataType == DataTypes.INT) {
1:       b = ByteBuffer.allocate(8);
1:       b.putLong((int) value);
1:       b.flip();
1:       return b.array();
0:     } else if (dataType == DataTypes.LONG) {
1:       b = ByteBuffer.allocate(8);
1:       b.putLong((long) value);
1:       b.flip();
1:       return b.array();
1:     } else if (dataType == DataTypes.DOUBLE) {
1:       b = ByteBuffer.allocate(8);
1:       b.putDouble((double) value);
1:       b.flip();
1:       return b.array();
0:     } else if (dataType == DataTypes.DECIMAL) {
1:       return DataTypeUtil.bigDecimalToByte((BigDecimal) value);
1:     } else if (dataType == DataTypes.STRING || dataType == DataTypes.TIMESTAMP
1:         || dataType == DataTypes.DATE) {
1:       return (byte[]) value;
1:     } else {
1:       throw new IllegalArgumentException("Invalid data type: " + storeDataType);
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.TableSpec;
/////////////////////////////////////////////////////////////////////////
1:   private static final long serialVersionUID = 1905162071950251407L;
1: 
1:   // column spec of this column
1:   private transient TableSpec.ColumnSpec columnSpec;
1: 
1:   // storage data type of this column, it could be different from data type in the column spec
1:   private DataType storeDataType;
1: 
0:   // compressor name for compressing and decompressing this column
0:   private String compressorName;
/////////////////////////////////////////////////////////////////////////
1:   public ColumnPageEncoderMeta(TableSpec.ColumnSpec columnSpec, DataType storeDataType,
0:       SimpleStatsResult stats, String compressorName) {
1:     if (columnSpec == null) {
1:       throw new IllegalArgumentException("columm spec must not be null");
1:     if (storeDataType == null) {
1:       throw new IllegalArgumentException("store data type must not be null");
1:     }
1:     if (compressorName == null) {
1:       throw new IllegalArgumentException("compressor must not be null");
1:     }
1:     this.columnSpec = columnSpec;
1:     this.storeDataType = storeDataType;
1:     this.compressorName = compressorName;
0:     setType(convertType(storeDataType));
/////////////////////////////////////////////////////////////////////////
0:       case SHORT_INT:
/////////////////////////////////////////////////////////////////////////
1:   public DataType getStoreDataType() {
1:     return storeDataType;
1:     columnSpec.write(out);
0:     out.writeByte(storeDataType.ordinal());
1:     out.writeUTF(compressorName);
1:     columnSpec = new TableSpec.ColumnSpec();
1:     columnSpec.readFields(in);
0:     storeDataType = DataType.valueOf(in.readByte());
1:     compressorName = in.readUTF();
0:     switch (columnSpec.getSchemaDataType()) {
/////////////////////////////////////////////////////////////////////////
0:         throw new IllegalArgumentException("invalid data type: " + storeDataType);
0:     switch (columnSpec.getSchemaDataType()) {
/////////////////////////////////////////////////////////////////////////
0:         throw new IllegalArgumentException("invalid data type: " + storeDataType);
/////////////////////////////////////////////////////////////////////////
0:     switch (storeDataType) {
/////////////////////////////////////////////////////////////////////////
0:         throw new IllegalArgumentException("Invalid data type: " + storeDataType);
/////////////////////////////////////////////////////////////////////////
1: 
1:   public TableSpec.ColumnSpec getColumnSpec() {
1:     return columnSpec;
1:   }
1: 
1:   public String getCompressorName() {
1:     return compressorName;
1:   }
1: 
1:   public DataType getSchemaDataType() {
1:     return columnSpec.getSchemaDataType();
1:   }
commit:4f7487d
/////////////////////////////////////////////////////////////////////////
1:       setDecimal(stats.getDecimalCount());
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.encoding;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.math.BigDecimal;
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1: import org.apache.carbondata.core.metadata.ValueEncoderMeta;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.schema.table.Writable;
1: import org.apache.carbondata.core.util.DataTypeUtil;
1: 
1: /**
1:  * It holds metadata for one column page
1:  */
1: public class ColumnPageEncoderMeta extends ValueEncoderMeta implements Writable {
1: 
0:   // data type of this column
0:   private DataType dataType;
1: 
0:   private int scale;
0:   private int precision;
1: 
0:   public static final char BYTE_VALUE_MEASURE = 'c';
0:   public static final char SHORT_VALUE_MEASURE = 'j';
0:   public static final char INT_VALUE_MEASURE = 'k';
0:   public static final char BIG_INT_MEASURE = 'd';
0:   public static final char DOUBLE_MEASURE = 'n';
0:   public static final char BIG_DECIMAL_MEASURE = 'b';
0:   public static final char STRING = 's';
0:   public static final char TIMESTAMP = 't';
0:   public static final char DATE = 'x';
0:   public static final char BYTE_ARRAY = 'y';
1: 
1:   public ColumnPageEncoderMeta() {
1:   }
1: 
0:   public ColumnPageEncoderMeta(DataType dataType, SimpleStatsResult stats) {
0:     if (dataType == null) {
0:       throw new IllegalArgumentException("data type must not be null");
1:     }
0:     this.dataType = dataType;
0:     setType(convertType(dataType));
1:     if (stats != null) {
0:       assert (stats.getDataType() == dataType);
0:       setDecimal(stats.getDecimalPoint());
1:       setMaxValue(stats.getMax());
1:       setMinValue(stats.getMin());
0:       this.scale = stats.getScale();
0:       this.precision = stats.getPrecision();
1:     }
1:   }
1: 
0:   private char convertType(DataType type) {
0:     switch (type) {
0:       case BYTE:
0:       case SHORT:
0:       case INT:
0:       case LONG:
0:         return CarbonCommonConstants.BIG_INT_MEASURE;
0:       case DOUBLE:
0:         return CarbonCommonConstants.DOUBLE_MEASURE;
0:       case DECIMAL:
0:         return CarbonCommonConstants.BIG_DECIMAL_MEASURE;
0:       case STRING:
0:         return STRING;
0:       case TIMESTAMP:
0:         return TIMESTAMP;
0:       case DATE:
0:         return DATE;
0:       case BYTE_ARRAY:
0:         return BYTE_ARRAY;
0:       default:
0:         throw new RuntimeException("Unexpected type: " + type);
1:     }
1:   }
1: 
0:   public DataType getDataType() {
0:     return dataType;
1:   }
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
0:     out.writeByte(dataType.ordinal());
1:     out.writeInt(getDecimal());
1:     out.writeByte(getDataTypeSelected());
1:     writeMinMax(out);
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
0:     dataType = DataType.valueOf(in.readByte());
1:     setDecimal(in.readInt());
1:     setDataTypeSelected(in.readByte());
1:     readMinMax(in);
1:   }
1: 
1:   private void writeMinMax(DataOutput out) throws IOException {
0:     switch (dataType) {
0:       case BYTE:
0:         out.writeByte((byte) getMaxValue());
0:         out.writeByte((byte) getMinValue());
0:         out.writeLong(0L); // unique value is obsoleted, maintain for compatibility
0:         break;
0:       case SHORT:
0:         out.writeShort((short) getMaxValue());
0:         out.writeShort((short) getMinValue());
0:         out.writeLong(0L); // unique value is obsoleted, maintain for compatibility
0:         break;
0:       case INT:
0:         out.writeInt((int) getMaxValue());
0:         out.writeInt((int) getMinValue());
0:         out.writeLong(0L); // unique value is obsoleted, maintain for compatibility
0:         break;
0:       case LONG:
0:         out.writeLong((Long) getMaxValue());
0:         out.writeLong((Long) getMinValue());
0:         out.writeLong(0L); // unique value is obsoleted, maintain for compatibility
0:         break;
0:       case DOUBLE:
0:         out.writeDouble((Double) getMaxValue());
0:         out.writeDouble((Double) getMinValue());
0:         out.writeDouble(0d); // unique value is obsoleted, maintain for compatibility
0:         break;
0:       case DECIMAL:
0:         byte[] maxAsBytes = getMaxAsBytes();
0:         byte[] minAsBytes = getMinAsBytes();
0:         byte[] unique = DataTypeUtil.bigDecimalToByte(BigDecimal.ZERO);
0:         out.writeShort((short) maxAsBytes.length);
0:         out.write(maxAsBytes);
0:         out.writeShort((short) minAsBytes.length);
0:         out.write(minAsBytes);
0:         // unique value is obsoleted, maintain for compatibility
0:         out.writeShort((short) unique.length);
0:         out.write(unique);
0:         out.writeInt(scale);
0:         out.writeInt(precision);
0:         break;
0:       case BYTE_ARRAY:
0:         // for complex type, it will come here, ignoring stats for complex type
0:         // TODO: support stats for complex type
0:         break;
0:       default:
0:         throw new IllegalArgumentException("invalid data type: " + dataType);
1:     }
1:   }
1: 
1:   private void readMinMax(DataInput in) throws IOException {
0:     switch (dataType) {
0:       case BYTE:
0:         this.setMaxValue(in.readByte());
0:         this.setMinValue(in.readByte());
0:         in.readLong();  // for non exist value which is obsoleted, it is backward compatibility;
0:         break;
0:       case SHORT:
0:         this.setMaxValue(in.readShort());
0:         this.setMinValue(in.readShort());
0:         in.readLong();  // for non exist value which is obsoleted, it is backward compatibility;
0:         break;
0:       case INT:
0:         this.setMaxValue(in.readInt());
0:         this.setMinValue(in.readInt());
0:         in.readLong();  // for non exist value which is obsoleted, it is backward compatibility;
0:         break;
0:       case LONG:
0:         this.setMaxValue(in.readLong());
0:         this.setMinValue(in.readLong());
0:         in.readLong();  // for non exist value which is obsoleted, it is backward compatibility;
0:         break;
0:       case DOUBLE:
0:         this.setMaxValue(in.readDouble());
0:         this.setMinValue(in.readDouble());
0:         in.readDouble(); // for non exist value which is obsoleted, it is backward compatibility;
0:         break;
0:       case DECIMAL:
0:         byte[] max = new byte[in.readShort()];
0:         in.readFully(max);
0:         this.setMaxValue(DataTypeUtil.byteToBigDecimal(max));
0:         byte[] min = new byte[in.readShort()];
0:         in.readFully(min);
0:         this.setMinValue(DataTypeUtil.byteToBigDecimal(min));
0:         // unique value is obsoleted, maintain for compatiability
0:         short uniqueLength = in.readShort();
0:         in.readFully(new byte[uniqueLength]);
0:         this.scale = in.readInt();
0:         this.precision = in.readInt();
0:         break;
0:       case BYTE_ARRAY:
0:         // for complex type, it will come here, ignoring stats for complex type
0:         // TODO: support stats for complex type
0:         break;
0:       default:
0:         throw new IllegalArgumentException("invalid data type: " + dataType);
1:     }
1:   }
1: 
0:   public byte[] getMaxAsBytes() {
0:     return getValueAsBytes(getMaxValue());
1:   }
1: 
0:   public byte[] getMinAsBytes() {
0:     return getValueAsBytes(getMinValue());
1:   }
1: 
1:   /**
1:    * convert value to byte array
1:    */
0:   private byte[] getValueAsBytes(Object value) {
1:     ByteBuffer b;
0:     switch (dataType) {
0:       case BYTE:
0:         b = ByteBuffer.allocate(8);
0:         b.putLong((byte) value);
0:         b.flip();
0:         return b.array();
0:       case SHORT:
0:         b = ByteBuffer.allocate(8);
0:         b.putLong((short) value);
0:         b.flip();
0:         return b.array();
0:       case INT:
0:         b = ByteBuffer.allocate(8);
0:         b.putLong((int) value);
0:         b.flip();
0:         return b.array();
0:       case LONG:
0:         b = ByteBuffer.allocate(8);
0:         b.putLong((long) value);
0:         b.flip();
0:         return b.array();
0:       case DOUBLE:
0:         b = ByteBuffer.allocate(8);
0:         b.putDouble((double) value);
0:         b.flip();
0:         return b.array();
0:       case DECIMAL:
0:         return DataTypeUtil.bigDecimalToByte((BigDecimal)value);
0:       case STRING:
0:       case TIMESTAMP:
0:       case DATE:
0:         return (byte[]) value;
0:       default:
0:         throw new IllegalArgumentException("Invalid data type: " + dataType);
1:     }
1:   }
1: 
1:   public int getScale() {
0:     return scale;
1:   }
1: 
1:   public int getPrecision() {
0:     return precision;
1:   }
1: }
author:xubo245
-------------------------------------------------------------------------------
commit:6abdd97
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
/////////////////////////////////////////////////////////////////////////
1:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:133b303
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:     setType(DataType.convertType(storeDataType));
/////////////////////////////////////////////////////////////////////////
0: 
author:manishgupta88
-------------------------------------------------------------------------------
commit:6f20437
/////////////////////////////////////////////////////////////////////////
0:         byte[] maxAsBytes = getMaxAsBytes(columnSpec.getSchemaDataType());
0:         byte[] minAsBytes = getMinAsBytes(columnSpec.getSchemaDataType());
/////////////////////////////////////////////////////////////////////////
0:   public byte[] getMaxAsBytes(DataType dataType) {
1:     return getValueAsBytes(getMaxValue(), dataType);
0:   public byte[] getMinAsBytes(DataType dataType) {
1:     return getValueAsBytes(getMinValue(), dataType);
1:   private byte[] getValueAsBytes(Object value, DataType dataType) {
0:     switch (dataType) {
============================================================================