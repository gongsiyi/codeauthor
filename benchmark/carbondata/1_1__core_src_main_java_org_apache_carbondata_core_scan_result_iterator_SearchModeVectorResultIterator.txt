1:2fc0ad3: /*
1:2fc0ad3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2fc0ad3:  * contributor license agreements.  See the NOTICE file distributed with
1:2fc0ad3:  * this work for additional information regarding copyright ownership.
1:2fc0ad3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2fc0ad3:  * (the "License"); you may not use this file except in compliance with
1:2fc0ad3:  * the License.  You may obtain a copy of the License at
1:2fc0ad3:  *
1:2fc0ad3:  *    http://www.apache.org/licenses/LICENSE-2.0
1:2fc0ad3:  *
1:2fc0ad3:  * Unless required by applicable law or agreed to in writing, software
1:2fc0ad3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2fc0ad3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2fc0ad3:  * See the License for the specific language governing permissions and
1:2fc0ad3:  * limitations under the License.
1:2fc0ad3:  */
1:2fc0ad3: package org.apache.carbondata.core.scan.result.iterator;
1:2fc0ad3: 
1:2fc0ad3: import java.util.List;
1:2fc0ad3: import java.util.concurrent.ExecutorService;
1:2fc0ad3: 
1:2fc0ad3: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1:2fc0ad3: import org.apache.carbondata.core.scan.model.QueryModel;
1:2fc0ad3: import org.apache.carbondata.core.scan.result.vector.CarbonColumnarBatch;
1:2fc0ad3: 
1:2fc0ad3: public class SearchModeVectorResultIterator extends AbstractSearchModeResultIterator {
1:2fc0ad3: 
1:2fc0ad3:   private final Object lock = new Object();
1:2fc0ad3: 
1:2fc0ad3:   public SearchModeVectorResultIterator(List<BlockExecutionInfo> infos, QueryModel queryModel,
1:2fc0ad3:                                         ExecutorService execService) {
1:2fc0ad3:     super(infos, queryModel, execService);
1:2fc0ad3:   }
1:2fc0ad3: 
1:2fc0ad3:   @Override
1:2fc0ad3:   public Object next() {
1:2fc0ad3:     throw new UnsupportedOperationException("call processNextBatch instead");
1:2fc0ad3:   }
1:2fc0ad3: 
1:2fc0ad3:   @Override
1:2fc0ad3:   public void processNextBatch(CarbonColumnarBatch columnarBatch) {
1:2fc0ad3:     synchronized (lock) {
1:2fc0ad3:       if (curBlockScan.hasNext()) {
1:2fc0ad3:         curBlockScan.processNextBatch(columnarBatch);
1:2fc0ad3:       }
1:2fc0ad3:     }
1:2fc0ad3:   }
1:2fc0ad3: 
1:2fc0ad3: }
============================================================================
author:Manhua
-------------------------------------------------------------------------------
commit:2fc0ad3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.result.iterator;
1: 
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: 
1: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1: import org.apache.carbondata.core.scan.model.QueryModel;
1: import org.apache.carbondata.core.scan.result.vector.CarbonColumnarBatch;
1: 
1: public class SearchModeVectorResultIterator extends AbstractSearchModeResultIterator {
1: 
1:   private final Object lock = new Object();
1: 
1:   public SearchModeVectorResultIterator(List<BlockExecutionInfo> infos, QueryModel queryModel,
1:                                         ExecutorService execService) {
1:     super(infos, queryModel, execService);
1:   }
1: 
1:   @Override
1:   public Object next() {
1:     throw new UnsupportedOperationException("call processNextBatch instead");
1:   }
1: 
1:   @Override
1:   public void processNextBatch(CarbonColumnarBatch columnarBatch) {
1:     synchronized (lock) {
1:       if (curBlockScan.hasNext()) {
1:         curBlockScan.processNextBatch(columnarBatch);
1:       }
1:     }
1:   }
1: 
1: }
============================================================================