1:e16e878: /*
1:e16e878:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e16e878:  * contributor license agreements.  See the NOTICE file distributed with
1:e16e878:  * this work for additional information regarding copyright ownership.
1:e16e878:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e16e878:  * (the "License"); you may not use this file except in compliance with
1:e16e878:  * the License.  You may obtain a copy of the License at
1:e16e878:  *
1:e16e878:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e16e878:  *
1:e16e878:  * Unless required by applicable law or agreed to in writing, software
1:e16e878:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e16e878:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e16e878:  * See the License for the specific language governing permissions and
1:e16e878:  * limitations under the License.
1:e16e878:  */
1:e16e878: package org.apache.carbondata.core.scan.filter.resolver.resolverinfo;
1:e16e878: 
1:e16e878: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:e16e878: import org.apache.carbondata.core.scan.expression.Expression;
1:e16e878: import org.apache.carbondata.core.scan.filter.intf.FilterExecuterType;
1:e16e878: import org.apache.carbondata.core.scan.filter.resolver.ConditionalFilterResolverImpl;
1:e16e878: 
1:e16e878: /* The expression with If FALSE will be resolved setting empty bitset. */
1:e16e878: public class FalseConditionalResolverImpl extends ConditionalFilterResolverImpl {
1:e16e878: 
1:e16e878:   private static final long serialVersionUID = 4599541011924324041L;
1:e16e878: 
1:e16e878:   public FalseConditionalResolverImpl(Expression exp, boolean isExpressionResolve,
1:bf6c471:       boolean isIncludeFilter) {
1:bf6c471:     super(exp, isExpressionResolve, isIncludeFilter, false);
1:e16e878:   }
1:e16e878: 
1:2c0fa10:   @Override public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier) {
1:e16e878:   }
1:e16e878: 
1:e16e878:   /**
1:e16e878:    * This method will provide the executer type to the callee inorder to identify
1:e16e878:    * the executer type for the filter resolution, False Expresssion willl not execute anything.
1:e16e878:    * it will return empty bitset
1:e16e878:    */
1:e16e878:   @Override public FilterExecuterType getFilterExecuterType() {
1:e16e878:     return FilterExecuterType.FALSE;
1:e16e878:   }
1:e16e878: 
1:e16e878:   /**
1:e16e878:    * Method will the read filter expression corresponding to the resolver.
1:e16e878:    * This method is required in row level executer inorder to evaluate the filter
1:e16e878:    * expression against spark, as mentioned above row level is a special type
1:e16e878:    * filter resolver.
1:e16e878:    *
1:e16e878:    * @return Expression
1:e16e878:    */
1:e16e878:   public Expression getFilterExpresion() {
1:e16e878:     return exp;
1:e16e878:   }
1:e16e878: 
1:e16e878: }
1:e16e878: 
============================================================================
author:dhatchayani
-------------------------------------------------------------------------------
commit:2c0fa10
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   @Override public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier) {
author:Jacky Li
-------------------------------------------------------------------------------
commit:bf6c471
/////////////////////////////////////////////////////////////////////////
1:       boolean isIncludeFilter) {
1:     super(exp, isExpressionResolve, isIncludeFilter, false);
author:BJangir
-------------------------------------------------------------------------------
commit:e16e878
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.filter.resolver.resolverinfo;
1: 
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.scan.expression.Expression;
0: import org.apache.carbondata.core.scan.filter.TableProvider;
1: import org.apache.carbondata.core.scan.filter.intf.FilterExecuterType;
1: import org.apache.carbondata.core.scan.filter.resolver.ConditionalFilterResolverImpl;
1: 
1: /* The expression with If FALSE will be resolved setting empty bitset. */
1: public class FalseConditionalResolverImpl extends ConditionalFilterResolverImpl {
1: 
1:   private static final long serialVersionUID = 4599541011924324041L;
1: 
1:   public FalseConditionalResolverImpl(Expression exp, boolean isExpressionResolve,
0:       boolean isIncludeFilter, AbsoluteTableIdentifier tableIdentifier) {
0:     super(exp, isExpressionResolve, isIncludeFilter, tableIdentifier, false);
1:   }
1: 
0:   @Override public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier,
0:       TableProvider tableProvider) {
1:   }
1: 
1:   /**
1:    * This method will provide the executer type to the callee inorder to identify
1:    * the executer type for the filter resolution, False Expresssion willl not execute anything.
1:    * it will return empty bitset
1:    */
1:   @Override public FilterExecuterType getFilterExecuterType() {
1:     return FilterExecuterType.FALSE;
1:   }
1: 
1:   /**
1:    * Method will the read filter expression corresponding to the resolver.
1:    * This method is required in row level executer inorder to evaluate the filter
1:    * expression against spark, as mentioned above row level is a special type
1:    * filter resolver.
1:    *
1:    * @return Expression
1:    */
1:   public Expression getFilterExpresion() {
1:     return exp;
1:   }
1: 
1: }
1: 
============================================================================