1:4f7487d: /*
1:4f7487d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4f7487d:  * contributor license agreements.  See the NOTICE file distributed with
1:4f7487d:  * this work for additional information regarding copyright ownership.
1:4f7487d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4f7487d:  * (the "License"); you may not use this file except in compliance with
1:4f7487d:  * the License.  You may obtain a copy of the License at
1:4f7487d:  *
1:4f7487d:  *    http://www.apache.org/licenses/LICENSE-2.0
1:4f7487d:  *
1:4f7487d:  * Unless required by applicable law or agreed to in writing, software
1:4f7487d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4f7487d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4f7487d:  * See the License for the specific language governing permissions and
1:4f7487d:  * limitations under the License.
1:4f7487d:  */
2:4f7487d: 
1:4f7487d: package org.apache.carbondata.core.datastore.page.encoding.adaptive;
1:4f7487d: 
1:4f7487d: import java.io.IOException;
1:4f7487d: import java.util.ArrayList;
1:4f7487d: import java.util.List;
1:4f7487d: import java.util.Map;
1:4f7487d: 
1:4f7487d: import org.apache.carbondata.core.datastore.compression.Compressor;
1:4f7487d: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1:4f7487d: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:4f7487d: import org.apache.carbondata.core.datastore.page.ColumnPageValueConverter;
1:4f7487d: import org.apache.carbondata.core.datastore.page.LazyColumnPage;
1:4f7487d: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageDecoder;
1:4f7487d: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1:4f7487d: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:4f7487d: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1:4f7487d: import org.apache.carbondata.core.memory.MemoryException;
1:4f7487d: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:4f7487d: import org.apache.carbondata.format.Encoding;
1:4f7487d: 
1:4f7487d: /**
1:4f7487d:  * Codec for floating point (float, double) data type page.
1:4f7487d:  * This codec will upscale the diff from page max value to integer value,
1:4f7487d:  * and do type casting to make storage minimum.
1:4f7487d:  */
1:4f7487d: public class AdaptiveFloatingCodec extends AdaptiveCodec {
1:4f7487d: 
1:4f7487d:   private ColumnPage encodedPage;
1:a8b3fac:   private Double factor;
1:4f7487d: 
1:4f7487d:   public AdaptiveFloatingCodec(DataType srcDataType, DataType targetDataType,
2:4f7487d:       SimpleStatsResult stats) {
1:4f7487d:     super(srcDataType, targetDataType, stats);
1:a8b3fac:     this.factor = Math.pow(10, stats.getDecimalCount());
2:4f7487d:   }
1:4f7487d: 
1:4f7487d:   @Override
1:4f7487d:   public String getName() {
1:4f7487d:     return "AdaptiveFloatingCodec";
1:4f7487d:   }
1:4f7487d: 
1:4f7487d:   @Override
1:4f7487d:   public ColumnPageEncoder createEncoder(Map<String, String> parameter) {
1:4f7487d:     return new ColumnPageEncoder() {
1:4f7487d:       @Override
1:4f7487d:       protected byte[] encodeData(ColumnPage input) throws MemoryException, IOException {
1:4f7487d:         if (encodedPage != null) {
1:4f7487d:           throw new IllegalStateException("already encoded");
1:4f7487d:         }
1:8f08c4a:         encodedPage = ColumnPage.newPage(
1:8f08c4a:             new ColumnPageEncoderMeta(input.getColumnPageEncoderMeta().getColumnSpec(),
1:8f08c4a:                 targetDataType, input.getColumnPageEncoderMeta().getCompressorName()),
1:8c1ddbf:             input.getPageSize());
1:8f08c4a:         Compressor compressor = CompressorFactory.getInstance().getCompressor(
1:8f08c4a:             input.getColumnCompressorName());
1:4f7487d:         input.convertValue(converter);
1:4f7487d:         byte[] result = encodedPage.compress(compressor);
1:4f7487d:         encodedPage.freeMemory();
1:4f7487d:         return result;
1:4f7487d:       }
1:4f7487d: 
1:4f7487d:       @Override
1:4f7487d:       protected List<Encoding> getEncodingList() {
1:4f7487d:         List<Encoding> encodings = new ArrayList<Encoding>();
1:4f7487d:         encodings.add(Encoding.ADAPTIVE_FLOATING);
1:4f7487d:         return encodings;
1:4f7487d:       }
1:4f7487d: 
1:4f7487d:       @Override
1:4f7487d:       protected ColumnPageEncoderMeta getEncoderMeta(ColumnPage inputPage) {
1:8c1ddbf:         return new ColumnPageEncoderMeta(inputPage.getColumnSpec(), targetDataType, stats,
1:8f08c4a:             inputPage.getColumnCompressorName());
1:4f7487d:       }
1:4f7487d: 
1:4f7487d:     };
1:4f7487d:   }
1:4f7487d: 
1:4f7487d:   @Override
1:8c1ddbf:   public ColumnPageDecoder createDecoder(final ColumnPageEncoderMeta meta) {
1:4f7487d:     return new ColumnPageDecoder() {
1:4f7487d:       @Override
1:4f7487d:       public ColumnPage decode(byte[] input, int offset, int length)
1:4f7487d:           throws MemoryException, IOException {
1:43285bb:         ColumnPage page = ColumnPage.decompress(meta, input, offset, length, false);
1:4f7487d:         return LazyColumnPage.newPage(page, converter);
1:4f7487d:       }
1:43285bb: 
1:43285bb:       @Override public ColumnPage decode(byte[] input, int offset, int length, boolean isLVEncoded)
1:43285bb:           throws MemoryException, IOException {
1:43285bb:         return decode(input, offset, length);
1:43285bb:       }
1:4f7487d:     };
1:4f7487d:   }
1:4f7487d: 
1:4f7487d:   // encoded value = (10 power of decimal) * (page value)
1:4f7487d:   private ColumnPageValueConverter converter = new ColumnPageValueConverter() {
1:4f7487d:     @Override
1:4f7487d:     public void encode(int rowId, byte value) {
1:4f7487d:       // this codec is for floating point type only
3:4f7487d:       throw new RuntimeException("internal error: " + debugInfo());
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public void encode(int rowId, short value) {
1:4f7487d:       // this codec is for floating point type only
1:4f7487d:       throw new RuntimeException("internal error: " + debugInfo());
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public void encode(int rowId, int value) {
1:4f7487d:       // this codec is for floating point type only
1:4f7487d:       throw new RuntimeException("internal error: " + debugInfo());
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public void encode(int rowId, long value) {
1:4f7487d:       // this codec is for floating point type only
1:4f7487d:       throw new RuntimeException("internal error: " + debugInfo());
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public void encode(int rowId, float value) {
1:956833e:       if (targetDataType == DataTypes.BYTE) {
2:956833e:         encodedPage.putByte(rowId, (byte) (value * factor));
1:956833e:       } else if (targetDataType == DataTypes.SHORT) {
2:956833e:         encodedPage.putShort(rowId, (short) (value * factor));
1:956833e:       } else if (targetDataType == DataTypes.SHORT_INT) {
2:956833e:         encodedPage.putShortInt(rowId, (int) (value * factor));
1:956833e:       } else if (targetDataType == DataTypes.INT) {
2:956833e:         encodedPage.putInt(rowId, (int) (value * factor));
1:956833e:       } else if (targetDataType == DataTypes.LONG) {
2:956833e:         encodedPage.putLong(rowId, (long) (value * factor));
1:956833e:       } else {
1:956833e:         throw new RuntimeException("internal error: " + debugInfo());
1:4f7487d:       }
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public void encode(int rowId, double value) {
1:956833e:       if (targetDataType == DataTypes.BYTE) {
1:08b8af7:         encodedPage.putByte(rowId, (byte) Math.round(value * factor));
1:956833e:       } else if (targetDataType == DataTypes.SHORT) {
1:08b8af7:         encodedPage.putShort(rowId, (short) Math.round(value * factor));
1:956833e:       } else if (targetDataType == DataTypes.SHORT_INT) {
1:08b8af7:         encodedPage.putShortInt(rowId, (int) Math.round(value * factor));
1:956833e:       } else if (targetDataType == DataTypes.INT) {
1:08b8af7:         encodedPage.putInt(rowId, (int) Math.round(value * factor));
1:956833e:       } else if (targetDataType == DataTypes.LONG) {
1:08b8af7:         encodedPage.putLong(rowId, (long) Math.round(value * factor));
1:956833e:       } else if (targetDataType == DataTypes.DOUBLE) {
1:956833e:         encodedPage.putDouble(rowId, value);
1:956833e:       } else {
1:956833e:         throw new RuntimeException("internal error: " + debugInfo());
1:4f7487d:       }
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public long decodeLong(byte value) {
1:4f7487d:       throw new RuntimeException("internal error: " + debugInfo());
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public long decodeLong(short value) {
1:4f7487d:       throw new RuntimeException("internal error: " + debugInfo());
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public long decodeLong(int value) {
1:4f7487d:       throw new RuntimeException("internal error: " + debugInfo());
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public double decodeDouble(byte value) {
1:a8b3fac:       return value / factor;
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public double decodeDouble(short value) {
1:a8b3fac:       return value / factor;
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public double decodeDouble(int value) {
1:a8b3fac:       return value / factor;
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public double decodeDouble(long value) {
1:a8b3fac:       return value / factor;
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public double decodeDouble(float value) {
1:4f7487d:       throw new RuntimeException("internal error: " + debugInfo());
1:4f7487d:     }
1:4f7487d: 
1:4f7487d:     @Override
1:4f7487d:     public double decodeDouble(double value) {
1:4f7487d:       throw new RuntimeException("internal error: " + debugInfo());
1:4f7487d:     }
1:4f7487d:   };
1:4f7487d: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:         encodedPage = ColumnPage.newPage(
1:             new ColumnPageEncoderMeta(input.getColumnPageEncoderMeta().getColumnSpec(),
1:                 targetDataType, input.getColumnPageEncoderMeta().getCompressorName()),
1:         Compressor compressor = CompressorFactory.getInstance().getCompressor(
1:             input.getColumnCompressorName());
/////////////////////////////////////////////////////////////////////////
1:             inputPage.getColumnCompressorName());
author:kumarvishal09
-------------------------------------------------------------------------------
commit:43285bb
/////////////////////////////////////////////////////////////////////////
1:         ColumnPage page = ColumnPage.decompress(meta, input, offset, length, false);
1: 
1:       @Override public ColumnPage decode(byte[] input, int offset, int length, boolean isLVEncoded)
1:           throws MemoryException, IOException {
1:         return decode(input, offset, length);
1:       }
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:sounakr
-------------------------------------------------------------------------------
commit:08b8af7
/////////////////////////////////////////////////////////////////////////
1:         encodedPage.putByte(rowId, (byte) Math.round(value * factor));
1:         encodedPage.putShort(rowId, (short) Math.round(value * factor));
1:         encodedPage.putShortInt(rowId, (int) Math.round(value * factor));
1:         encodedPage.putInt(rowId, (int) Math.round(value * factor));
1:         encodedPage.putLong(rowId, (long) Math.round(value * factor));
author:Jacky Li
-------------------------------------------------------------------------------
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:       if (targetDataType == DataTypes.BYTE) {
1:         encodedPage.putByte(rowId, (byte) (value * factor));
1:       } else if (targetDataType == DataTypes.SHORT) {
1:         encodedPage.putShort(rowId, (short) (value * factor));
1:       } else if (targetDataType == DataTypes.SHORT_INT) {
1:         encodedPage.putShortInt(rowId, (int) (value * factor));
1:       } else if (targetDataType == DataTypes.INT) {
1:         encodedPage.putInt(rowId, (int) (value * factor));
1:       } else if (targetDataType == DataTypes.LONG) {
1:         encodedPage.putLong(rowId, (long) (value * factor));
1:       } else {
1:         throw new RuntimeException("internal error: " + debugInfo());
1:       if (targetDataType == DataTypes.BYTE) {
1:         encodedPage.putByte(rowId, (byte) (value * factor));
1:       } else if (targetDataType == DataTypes.SHORT) {
1:         encodedPage.putShort(rowId, (short) (value * factor));
1:       } else if (targetDataType == DataTypes.SHORT_INT) {
1:         encodedPage.putShortInt(rowId, (int) (value * factor));
1:       } else if (targetDataType == DataTypes.INT) {
1:         encodedPage.putInt(rowId, (int) (value * factor));
1:       } else if (targetDataType == DataTypes.LONG) {
1:         encodedPage.putLong(rowId, (long) (value * factor));
1:       } else if (targetDataType == DataTypes.DOUBLE) {
1:         encodedPage.putDouble(rowId, value);
1:       } else {
1:         throw new RuntimeException("internal error: " + debugInfo());
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
0:         encodedPage = ColumnPage.newPage(input.getColumnSpec(), targetDataType,
1:             input.getPageSize());
/////////////////////////////////////////////////////////////////////////
1:         return new ColumnPageEncoderMeta(inputPage.getColumnSpec(), targetDataType, stats,
0:             compressor.getName());
1:   public ColumnPageDecoder createDecoder(final ColumnPageEncoderMeta meta) {
0:         ColumnPage page = ColumnPage.decompress(meta, input, offset, length);
commit:892f120
/////////////////////////////////////////////////////////////////////////
0:         return new AdaptiveFloatingEncoderMeta(compressor.getName(), targetDataType, stats);
commit:4f7487d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.encoding.adaptive;
1: 
1: import java.io.IOException;
0: import java.math.BigDecimal;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.carbondata.core.datastore.compression.Compressor;
1: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
1: import org.apache.carbondata.core.datastore.page.ColumnPageValueConverter;
1: import org.apache.carbondata.core.datastore.page.LazyColumnPage;
0: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageCodec;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageDecoder;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.format.Encoding;
1: 
1: /**
1:  * Codec for floating point (float, double) data type page.
1:  * This codec will upscale the diff from page max value to integer value,
1:  * and do type casting to make storage minimum.
1:  */
1: public class AdaptiveFloatingCodec extends AdaptiveCodec {
1: 
1:   private ColumnPage encodedPage;
0:   private BigDecimal factor;
1: 
0:   public static ColumnPageCodec newInstance(DataType srcDataType, DataType targetDataType,
1:       SimpleStatsResult stats) {
0:     return new AdaptiveFloatingCodec(srcDataType, targetDataType, stats);
1:   }
1: 
1:   public AdaptiveFloatingCodec(DataType srcDataType, DataType targetDataType,
1:       SimpleStatsResult stats) {
1:     super(srcDataType, targetDataType, stats);
0:     this.factor = BigDecimal.valueOf(Math.pow(10, stats.getDecimalCount()));
1:   }
1: 
1:   @Override
1:   public String getName() {
1:     return "AdaptiveFloatingCodec";
1:   }
1: 
1:   @Override
1:   public ColumnPageEncoder createEncoder(Map<String, String> parameter) {
0:     final Compressor compressor = CompressorFactory.getInstance().getCompressor();
1:     return new ColumnPageEncoder() {
1:       @Override
1:       protected byte[] encodeData(ColumnPage input) throws MemoryException, IOException {
1:         if (encodedPage != null) {
1:           throw new IllegalStateException("already encoded");
1:         }
0:         encodedPage = ColumnPage.newPage(targetDataType, input.getPageSize());
1:         input.convertValue(converter);
1:         byte[] result = encodedPage.compress(compressor);
1:         encodedPage.freeMemory();
1:         return result;
1:       }
1: 
1:       @Override
1:       protected List<Encoding> getEncodingList() {
1:         List<Encoding> encodings = new ArrayList<Encoding>();
1:         encodings.add(Encoding.ADAPTIVE_FLOATING);
1:         return encodings;
1:       }
1: 
1:       @Override
1:       protected ColumnPageEncoderMeta getEncoderMeta(ColumnPage inputPage) {
0:         return new AdaptiveFloatingEncoderMeta(targetDataType, stats, compressor.getName());
1:       }
1: 
1:     };
1:   }
1: 
1:   @Override
0:   public ColumnPageDecoder createDecoder(ColumnPageEncoderMeta meta) {
0:     AdaptiveFloatingEncoderMeta codecMeta = (AdaptiveFloatingEncoderMeta) meta;
0:     final Compressor compressor = CompressorFactory.getInstance().getCompressor(
0:         codecMeta.getCompressorName());
0:     final DataType targetDataType = codecMeta.getTargetDataType();
1:     return new ColumnPageDecoder() {
1:       @Override
1:       public ColumnPage decode(byte[] input, int offset, int length)
1:           throws MemoryException, IOException {
0:         ColumnPage page = ColumnPage.decompress(compressor, targetDataType, input, offset, length);
1:         return LazyColumnPage.newPage(page, converter);
1:       }
1:     };
1:   }
1: 
1:   // encoded value = (10 power of decimal) * (page value)
1:   private ColumnPageValueConverter converter = new ColumnPageValueConverter() {
1:     @Override
1:     public void encode(int rowId, byte value) {
1:       // this codec is for floating point type only
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, short value) {
1:       // this codec is for floating point type only
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, int value) {
1:       // this codec is for floating point type only
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, long value) {
1:       // this codec is for floating point type only
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, float value) {
0:       switch (targetDataType) {
0:         case BYTE:
0:           encodedPage.putByte(rowId,
0:               BigDecimal.valueOf(value).multiply(factor).byteValue());
0:           break;
0:         case SHORT:
0:           encodedPage.putShort(rowId,
0:               BigDecimal.valueOf(value).multiply(factor).shortValue());
0:           break;
0:         case SHORT_INT:
0:           encodedPage.putShortInt(rowId,
0:               BigDecimal.valueOf(value).multiply(factor).intValue());
0:           break;
0:         case INT:
0:           encodedPage.putInt(rowId,
0:               BigDecimal.valueOf(value).multiply(factor).intValue());
0:           break;
0:         case LONG:
0:           encodedPage.putLong(rowId,
0:               BigDecimal.valueOf(value).multiply(factor).longValue());
0:           break;
0:         default:
1:           throw new RuntimeException("internal error: " + debugInfo());
1:       }
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, double value) {
0:       switch (targetDataType) {
0:         case BYTE:
0:           encodedPage.putByte(rowId,
0:               BigDecimal.valueOf(value).multiply(factor).byteValue());
0:           break;
0:         case SHORT:
0:           encodedPage.putShort(rowId,
0:               BigDecimal.valueOf(value).multiply(factor).shortValue());
0:           break;
0:         case SHORT_INT:
0:           encodedPage.putShortInt(rowId,
0:               BigDecimal.valueOf(value).multiply(factor).intValue());
0:           break;
0:         case INT:
0:           encodedPage.putInt(rowId,
0:               BigDecimal.valueOf(value).multiply(factor).intValue());
0:           break;
0:         case LONG:
0:           encodedPage.putLong(rowId,
0:               BigDecimal.valueOf(value).multiply(factor).longValue());
0:           break;
0:         case DOUBLE:
0:           encodedPage.putDouble(rowId, value);
0:           break;
0:         default:
1:           throw new RuntimeException("internal error: " + debugInfo());
1:       }
1:     }
1: 
1:     @Override
1:     public long decodeLong(byte value) {
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public long decodeLong(short value) {
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public long decodeLong(int value) {
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public double decodeDouble(byte value) {
0:       return BigDecimal.valueOf(value).divide(factor).doubleValue();
1:     }
1: 
1:     @Override
1:     public double decodeDouble(short value) {
0:       return BigDecimal.valueOf(value).divide(factor).doubleValue();
1:     }
1: 
1:     @Override
1:     public double decodeDouble(int value) {
0:       return BigDecimal.valueOf(value).divide(factor).doubleValue();
1:     }
1: 
1:     @Override
1:     public double decodeDouble(long value) {
0:       return BigDecimal.valueOf(value).divide(factor).doubleValue();
1:     }
1: 
1:     @Override
1:     public double decodeDouble(float value) {
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public double decodeDouble(double value) {
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1:   };
1: }
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:a8b3fac
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private Double factor;
/////////////////////////////////////////////////////////////////////////
1:     this.factor = Math.pow(10, stats.getDecimalCount());
/////////////////////////////////////////////////////////////////////////
0:     final Compressor compressor =
0:         CompressorFactory.getInstance().getCompressor(codecMeta.getCompressorName());
/////////////////////////////////////////////////////////////////////////
0:           encodedPage.putByte(rowId, (byte) (value * factor));
0:           encodedPage.putShort(rowId, (short) (value * factor));
0:           encodedPage.putShortInt(rowId, (int) (value * factor));
0:           encodedPage.putInt(rowId, (int) (value * factor));
0:           encodedPage.putLong(rowId, (long) (value * factor));
/////////////////////////////////////////////////////////////////////////
0:           encodedPage.putByte(rowId, (byte) (value * factor));
0:           encodedPage.putShort(rowId, (short) (value * factor));
0:           encodedPage.putShortInt(rowId, (int) (value * factor));
0:           encodedPage.putInt(rowId, (int) (value * factor));
0:           encodedPage.putLong(rowId, (long) (value * factor));
/////////////////////////////////////////////////////////////////////////
1:       return value / factor;
1:       return value / factor;
1:       return value / factor;
1:       return value / factor;
author:Raghunandan S
-------------------------------------------------------------------------------
commit:bb0b347
/////////////////////////////////////////////////////////////////////////
0:     assert meta instanceof AdaptiveFloatingEncoderMeta;
============================================================================