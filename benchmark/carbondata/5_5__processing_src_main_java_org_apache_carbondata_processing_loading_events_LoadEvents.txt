1:829e7aa: /*
1:829e7aa:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:829e7aa:  * contributor license agreements.  See the NOTICE file distributed with
1:829e7aa:  * this work for additional information regarding copyright ownership.
1:829e7aa:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:829e7aa:  * (the "License"); you may not use this file except in compliance with
1:829e7aa:  * the License.  You may obtain a copy of the License at
1:829e7aa:  *
1:829e7aa:  *    http://www.apache.org/licenses/LICENSE-2.0
1:829e7aa:  *
1:829e7aa:  * Unless required by applicable law or agreed to in writing, software
1:829e7aa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:829e7aa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:829e7aa:  * See the License for the specific language governing permissions and
1:829e7aa:  * limitations under the License.
2:829e7aa:  */
14:829e7aa: 
1:829e7aa: package org.apache.carbondata.processing.loading.events;
1:829e7aa: 
1:829e7aa: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:3a6136d: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:829e7aa: import org.apache.carbondata.events.Event;
1:829e7aa: import org.apache.carbondata.processing.loading.model.CarbonLoadModel;
1:829e7aa: 
1:829e7aa: public class LoadEvents {
2:829e7aa:   /**
1:829e7aa:    * Class for handling operations before start of a load process.
1:829e7aa:    * Example usage: For validation purpose
1:829e7aa:    */
1:829e7aa:   public static class LoadTablePreExecutionEvent extends Event {
2:829e7aa:     private CarbonTableIdentifier carbonTableIdentifier;
2:829e7aa:     private CarbonLoadModel carbonLoadModel;
1:829e7aa: 
1:829e7aa:     public LoadTablePreExecutionEvent(CarbonTableIdentifier carbonTableIdentifier,
1:f911403:         CarbonLoadModel carbonLoadModel) {
2:829e7aa:       this.carbonTableIdentifier = carbonTableIdentifier;
2:829e7aa:       this.carbonLoadModel = carbonLoadModel;
13:829e7aa:     }
1:d680e9c: 
2:829e7aa:     public CarbonTableIdentifier getCarbonTableIdentifier() {
2:829e7aa:       return carbonTableIdentifier;
1:829e7aa:     }
1:d680e9c: 
1:d680e9c:     public CarbonLoadModel getCarbonLoadModel() {
1:d680e9c:       return carbonLoadModel;
1:54a381c:     }
1:54a381c:   }
1:54a381c: 
1:3a6136d:   /**
1:829e7aa:    * Class for handling operations after data load completion and before final
1:829e7aa:    * commit of load operation. Example usage: For loading pre-aggregate tables
1:3a6136d:    */
1:54a381c: 
1:829e7aa:   public static class LoadTablePostExecutionEvent extends Event {
1:829e7aa:     private CarbonTableIdentifier carbonTableIdentifier;
1:d680e9c:     private CarbonLoadModel carbonLoadModel;
1:54a381c: 
1:829e7aa:     public LoadTablePostExecutionEvent(CarbonTableIdentifier carbonTableIdentifier,
2:829e7aa:         CarbonLoadModel carbonLoadModel) {
1:829e7aa:       this.carbonTableIdentifier = carbonTableIdentifier;
1:829e7aa:       this.carbonLoadModel = carbonLoadModel;
1:54a381c:     }
1:d680e9c: 
1:829e7aa:     public CarbonTableIdentifier getCarbonTableIdentifier() {
1:829e7aa:       return carbonTableIdentifier;
1:d680e9c:     }
1:829e7aa: 
2:829e7aa:     public CarbonLoadModel getCarbonLoadModel() {
2:829e7aa:       return carbonLoadModel;
1:d680e9c:     }
1:829e7aa:   }
1:829e7aa: 
1:829e7aa:   /**
1:829e7aa:    * Event for handling operations after data load completion and before final
1:829e7aa:    * commit of load operation. Example usage: For loading pre-aggregate tables
1:829e7aa:    */
1:829e7aa: 
1:829e7aa:   public static class LoadTablePreStatusUpdateEvent extends Event {
1:829e7aa:     private CarbonLoadModel carbonLoadModel;
1:829e7aa:     private CarbonTableIdentifier carbonTableIdentifier;
1:829e7aa: 
1:829e7aa:     public LoadTablePreStatusUpdateEvent(CarbonTableIdentifier carbonTableIdentifier,
1:829e7aa:         CarbonLoadModel carbonLoadModel) {
1:829e7aa:       this.carbonTableIdentifier = carbonTableIdentifier;
1:829e7aa:       this.carbonLoadModel = carbonLoadModel;
1:829e7aa:     }
1:829e7aa: 
1:829e7aa:     public CarbonLoadModel getCarbonLoadModel() {
1:829e7aa:       return carbonLoadModel;
1:829e7aa:     }
1:829e7aa: 
1:829e7aa:     public CarbonTableIdentifier getCarbonTableIdentifier() {
1:829e7aa:       return carbonTableIdentifier;
1:829e7aa:     }
1:829e7aa:   }
1:829e7aa: 
1:829e7aa:   /**
1:3a6136d:    * Load Even class will be fired from the Load and compaction class
1:3a6136d:    * to creating all the load commands for all preaggregate data map
1:829e7aa:    */
1:3a6136d:   public static class LoadMetadataEvent extends Event {
1:3a6136d:     private CarbonTable carbonTable;
1:3a6136d:     private boolean isCompaction;
1:3a6136d:     public LoadMetadataEvent(CarbonTable carbonTable, boolean isCompaction) {
1:3a6136d:       this.carbonTable = carbonTable;
1:3a6136d:       this.isCompaction = isCompaction;
1:3a6136d:     }
1:3a6136d:     public boolean isCompaction() {
1:3a6136d:       return isCompaction;
1:3a6136d:     }
1:3a6136d:     public CarbonTable getCarbonTable() {
1:3a6136d:       return carbonTable;
1:3a6136d:     }
1:3a6136d:   }
1:829e7aa: 
1:d680e9c:   public static class LoadTablePostStatusUpdateEvent extends Event {
1:829e7aa:     private CarbonLoadModel carbonLoadModel;
1:829e7aa: 
1:d680e9c:     public LoadTablePostStatusUpdateEvent(CarbonLoadModel carbonLoadModel) {
1:d680e9c:       this.carbonLoadModel = carbonLoadModel;
1:d680e9c:     }
1:d680e9c: 
1:829e7aa:     public CarbonLoadModel getCarbonLoadModel() {
1:829e7aa:       return carbonLoadModel;
1:829e7aa:     }
1:829e7aa:   }
1:829e7aa: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         CarbonLoadModel carbonLoadModel) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:dhatchayani
-------------------------------------------------------------------------------
commit:f5cdd5c
/////////////////////////////////////////////////////////////////////////
commit:54a381c
/////////////////////////////////////////////////////////////////////////
1: 
0:   public static class LoadTableMergePartitionEvent extends Event {
0:     private String segmentPath;
1: 
0:     public LoadTableMergePartitionEvent(String segmentPath) {
0:       this.segmentPath = segmentPath;
1:     }
1: 
0:     public String getSegmentPath() {
0:       return segmentPath;
1:     }
1:   }
author:kunal642
-------------------------------------------------------------------------------
commit:d680e9c
/////////////////////////////////////////////////////////////////////////
1: 
1:   public static class LoadTablePostStatusUpdateEvent extends Event {
1:     private CarbonLoadModel carbonLoadModel;
1: 
1:     public LoadTablePostStatusUpdateEvent(CarbonLoadModel carbonLoadModel) {
1:       this.carbonLoadModel = carbonLoadModel;
1:     }
1: 
1:     public CarbonLoadModel getCarbonLoadModel() {
1:       return carbonLoadModel;
1:     }
1:   }
1: 
author:kumarvishal
-------------------------------------------------------------------------------
commit:3a6136d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
/////////////////////////////////////////////////////////////////////////
1:    * Load Even class will be fired from the Load and compaction class
1:    * to creating all the load commands for all preaggregate data map
1:    */
1:   public static class LoadMetadataEvent extends Event {
1:     private CarbonTable carbonTable;
1:     private boolean isCompaction;
1:     public LoadMetadataEvent(CarbonTable carbonTable, boolean isCompaction) {
1:       this.carbonTable = carbonTable;
1:       this.isCompaction = isCompaction;
1:     }
1:     public boolean isCompaction() {
1:       return isCompaction;
1:     }
1:     public CarbonTable getCarbonTable() {
1:       return carbonTable;
1:     }
1:   }
1:   /**
author:ravipesala
-------------------------------------------------------------------------------
commit:829e7aa
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.loading.events;
1: 
0: import java.util.Map;
1: 
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.events.Event;
1: import org.apache.carbondata.processing.loading.model.CarbonLoadModel;
1: 
1: public class LoadEvents {
1:   /**
1:    * Class for handling operations before start of a load process.
1:    * Example usage: For validation purpose
1:    */
1:   public static class LoadTablePreExecutionEvent extends Event {
1:     private CarbonTableIdentifier carbonTableIdentifier;
1:     private CarbonLoadModel carbonLoadModel;
0:     private String factPath;
0:     private boolean isDataFrameDefined;
0:     private Map<String, String> optionsFinal;
0:     // userProvidedOptions are needed if we need only the load options given by user
0:     private Map<String, String> userProvidedOptions;
0:     private boolean isOverWriteTable;
1: 
1:     public LoadTablePreExecutionEvent(CarbonTableIdentifier carbonTableIdentifier,
0:         CarbonLoadModel carbonLoadModel, String factPath, boolean isDataFrameDefined,
0:         Map<String, String> optionsFinal, Map<String, String> userProvidedOptions,
0:         boolean isOverWriteTable) {
1:       this.carbonTableIdentifier = carbonTableIdentifier;
1:       this.carbonLoadModel = carbonLoadModel;
0:       this.factPath = factPath;
0:       this.isDataFrameDefined = isDataFrameDefined;
0:       this.optionsFinal = optionsFinal;
0:       this.userProvidedOptions = userProvidedOptions;
0:       this.isOverWriteTable = isOverWriteTable;
1:     }
1: 
1:     public CarbonTableIdentifier getCarbonTableIdentifier() {
1:       return carbonTableIdentifier;
1:     }
1: 
1:     public CarbonLoadModel getCarbonLoadModel() {
1:       return carbonLoadModel;
1:     }
1: 
0:     public String getFactPath() {
0:       return factPath;
1:     }
1: 
0:     public boolean isDataFrameDefined() {
0:       return isDataFrameDefined;
1:     }
1: 
0:     public Map<String, String> getOptionsFinal() {
0:       return optionsFinal;
1:     }
1: 
0:     public Map<String, String> getUserProvidedOptions() {
0:       return userProvidedOptions;
1:     }
1: 
0:     public boolean isOverWriteTable() {
0:       return isOverWriteTable;
1:     }
1:   }
1: 
1:   /**
1:    * Class for handling operations after data load completion and before final
1:    * commit of load operation. Example usage: For loading pre-aggregate tables
1:    */
1: 
1:   public static class LoadTablePostExecutionEvent extends Event {
1:     private CarbonTableIdentifier carbonTableIdentifier;
1:     private CarbonLoadModel carbonLoadModel;
1: 
1:     public LoadTablePostExecutionEvent(CarbonTableIdentifier carbonTableIdentifier,
1:         CarbonLoadModel carbonLoadModel) {
1:       this.carbonTableIdentifier = carbonTableIdentifier;
1:       this.carbonLoadModel = carbonLoadModel;
1:     }
1: 
1:     public CarbonTableIdentifier getCarbonTableIdentifier() {
1:       return carbonTableIdentifier;
1:     }
1: 
1:     public CarbonLoadModel getCarbonLoadModel() {
1:       return carbonLoadModel;
1:     }
1:   }
1: 
1:   /**
1:    * Event for handling operations after data load completion and before final
1:    * commit of load operation. Example usage: For loading pre-aggregate tables
1:    */
1: 
1:   public static class LoadTablePreStatusUpdateEvent extends Event {
1:     private CarbonLoadModel carbonLoadModel;
1:     private CarbonTableIdentifier carbonTableIdentifier;
1: 
1:     public LoadTablePreStatusUpdateEvent(CarbonTableIdentifier carbonTableIdentifier,
1:         CarbonLoadModel carbonLoadModel) {
1:       this.carbonTableIdentifier = carbonTableIdentifier;
1:       this.carbonLoadModel = carbonLoadModel;
1:     }
1: 
1:     public CarbonLoadModel getCarbonLoadModel() {
1:       return carbonLoadModel;
1:     }
1: 
1:     public CarbonTableIdentifier getCarbonTableIdentifier() {
1:       return carbonTableIdentifier;
1:     }
1:   }
1: 
1:   /**
0:    * Class for handling clean up in case of any failure and abort the operation.
1:    */
1: 
0:   public static class LoadTableAbortExecutionEvent extends Event {
1:     private CarbonTableIdentifier carbonTableIdentifier;
1:     private CarbonLoadModel carbonLoadModel;
0:     public LoadTableAbortExecutionEvent(CarbonTableIdentifier carbonTableIdentifier,
1:         CarbonLoadModel carbonLoadModel) {
1:       this.carbonTableIdentifier = carbonTableIdentifier;
1:       this.carbonLoadModel = carbonLoadModel;
1:     }
1: 
1:     public CarbonTableIdentifier getCarbonTableIdentifier() {
1:       return carbonTableIdentifier;
1:     }
1: 
1:     public CarbonLoadModel getCarbonLoadModel() {
1:       return carbonLoadModel;
1:     }
1:   }
1: }
============================================================================