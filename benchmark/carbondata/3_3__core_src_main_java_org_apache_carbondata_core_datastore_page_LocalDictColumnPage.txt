1:e710339: /*
1:e710339:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e710339:  * contributor license agreements.  See the NOTICE file distributed with
1:e710339:  * this work for additional information regarding copyright ownership.
1:e710339:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e710339:  * (the "License"); you may not use this file except in compliance with
1:e710339:  * the License.  You may obtain a copy of the License at
1:e710339:  *
1:e710339:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e710339:  *
1:e710339:  * Unless required by applicable law or agreed to in writing, software
1:e710339:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e710339:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e710339:  * See the License for the specific language governing permissions and
1:e710339:  * limitations under the License.
1:e710339:  */
1:e710339: 
1:e710339: package org.apache.carbondata.core.datastore.page;
1:e710339: 
1:e710339: import java.io.IOException;
1:e710339: import java.math.BigDecimal;
1:e710339: 
1:e710339: import org.apache.carbondata.common.logging.LogService;
1:e710339: import org.apache.carbondata.common.logging.LogServiceFactory;
1:3a4b881: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:3a4b881: import org.apache.carbondata.core.keygenerator.KeyGenException;
1:3a4b881: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1:3a4b881: import org.apache.carbondata.core.keygenerator.factory.KeyGeneratorFactory;
1:e710339: import org.apache.carbondata.core.localdictionary.PageLevelDictionary;
1:e710339: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1:e710339: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1:e710339: 
1:e710339: /**
1:e710339:  * Column page implementation for Local dictionary generated columns
1:e710339:  * Its a decorator over two column page
1:e710339:  * 1. Which will hold the actual data
1:e710339:  * 2. Which will hold the dictionary encoded data
1:e710339:  */
1:e710339: public class LocalDictColumnPage extends ColumnPage {
1:e710339: 
1:e710339:   /**
1:e710339:    * LOGGER
1:e710339:    */
1:e710339:   private static final LogService LOGGER =
1:e710339:       LogServiceFactory.getLogService(LocalDictColumnPage.class.getName());
1:e710339: 
1:e710339:   /**
1:e710339:    * to maintain page level dictionary for column page
1:e710339:    */
1:e710339:   private PageLevelDictionary pageLevelDictionary;
1:e710339: 
1:e710339:   /**
1:e710339:    * to hold the actual data of the column
1:e710339:    */
1:e710339:   private ColumnPage actualDataColumnPage;
1:e710339: 
1:e710339:   /**
1:e710339:    * to hold the dictionary encoded column page
1:e710339:    */
1:e710339:   private ColumnPage encodedDataColumnPage;
1:e710339: 
1:e710339:   /**
1:e710339:    * to check if actual column page memory is already clear
1:e710339:    */
1:e710339:   private boolean isActualPageMemoryFreed;
1:e710339: 
1:3a4b881:   private KeyGenerator keyGenerator;
1:3a4b881: 
1:3a4b881:   private int[] dummyKey;
1:2ccdbb7: 
1:2ccdbb7:   private boolean isDecoderBasedFallBackEnabled;
1:2ccdbb7: 
1:e710339:   /**
1:e710339:    * Create a new column page with input data type and page size.
1:e710339:    */
1:e710339:   protected LocalDictColumnPage(ColumnPage actualDataColumnPage, ColumnPage encodedColumnpage,
1:2ccdbb7:       LocalDictionaryGenerator localDictionaryGenerator, boolean isComplexTypePrimitive,
1:2ccdbb7:       boolean isDecoderBasedFallBackEnabled) {
1:8f08c4a:     super(actualDataColumnPage.getColumnPageEncoderMeta(), actualDataColumnPage.getPageSize());
1:e710339:     // if threshold is not reached then create page level dictionary
1:e710339:     // for encoding with local dictionary
1:e710339:     if (!localDictionaryGenerator.isThresholdReached()) {
1:e710339:       pageLevelDictionary = new PageLevelDictionary(localDictionaryGenerator,
1:3a4b881:           actualDataColumnPage.getColumnSpec().getFieldName(), actualDataColumnPage.getDataType(),
1:8f08c4a:           isComplexTypePrimitive, actualDataColumnPage.getColumnCompressorName());
1:e710339:       this.encodedDataColumnPage = encodedColumnpage;
1:3a4b881:       this.keyGenerator = KeyGeneratorFactory
1:3a4b881:           .getKeyGenerator(new int[] { CarbonCommonConstants.LOCAL_DICTIONARY_MAX + 1 });
1:3a4b881:       this.dummyKey = new int[1];
1:e710339:     } else {
1:e710339:       // else free the encoded column page memory as its of no use
1:e710339:       encodedColumnpage.freeMemory();
1:e710339:     }
1:2ccdbb7:     this.isDecoderBasedFallBackEnabled = isDecoderBasedFallBackEnabled;
1:e710339:     this.actualDataColumnPage = actualDataColumnPage;
1:e710339:   }
1:e710339: 
1:e710339:   @Override public byte[][] getByteArrayPage() {
1:e710339:     if (null != pageLevelDictionary) {
1:e710339:       return encodedDataColumnPage.getByteArrayPage();
1:e710339:     } else {
1:e710339:       return actualDataColumnPage.getByteArrayPage();
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to check whether page is local dictionary
1:e710339:    * generated or not. This will be used for while enoding the the page
1:e710339:    *
1:e710339:    * @return
1:e710339:    */
1:e710339:   public boolean isLocalDictGeneratedPage() {
1:e710339:     return null != pageLevelDictionary;
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to add column data to page
1:e710339:    *
1:e710339:    * @param rowId row number
1:e710339:    * @param bytes actual data
1:e710339:    */
1:e710339:   @Override public void putBytes(int rowId, byte[] bytes) {
1:e710339:     if (null != pageLevelDictionary) {
1:e710339:       try {
1:e710339:         actualDataColumnPage.putBytes(rowId, bytes);
1:3a4b881:         dummyKey[0] = pageLevelDictionary.getDictionaryValue(bytes);
1:3a4b881:         encodedDataColumnPage.putBytes(rowId, keyGenerator.generateKey(dummyKey));
1:e710339:       } catch (DictionaryThresholdReachedException e) {
1:36e14e5:         LOGGER.warn("Local Dictionary threshold reached for the column: " + actualDataColumnPage
1:36e14e5:             .getColumnSpec().getFieldName() + ", " + e.getMessage());
1:e710339:         pageLevelDictionary = null;
1:e710339:         encodedDataColumnPage.freeMemory();
1:e710339:         encodedDataColumnPage = null;
1:3a4b881:       } catch (KeyGenException e) {
1:3a4b881:         LOGGER.error(e, "Unable to generate key for: " + actualDataColumnPage
1:3a4b881:             .getColumnSpec().getFieldName());
1:3a4b881:         throw new RuntimeException(e);
1:e710339:       }
1:e710339:     } else {
1:e710339:       actualDataColumnPage.putBytes(rowId, bytes);
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void disableLocalDictEncoding() {
1:e710339:     pageLevelDictionary = null;
2:e710339:     freeEncodedColumnPage();
1:e710339:   }
1:e710339: 
1:e710339:   @Override public PageLevelDictionary getColumnPageDictionary() {
1:e710339:     return pageLevelDictionary;
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void setBytePage(byte[] byteData) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void setShortPage(short[] shortData) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void setShortIntPage(byte[] shortIntData) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void setIntPage(int[] intData) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void setLongPage(long[] longData) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void setFloatPage(float[] floatData) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void setDoublePage(double[] doubleData) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void setByteArrayPage(byte[][] byteArray) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void freeMemory() {
1:2ccdbb7:     // free the encoded column page as data is already encoded and it is of no use, during fallback
1:2ccdbb7:     // if goes to actual databased fallback, we need actual data and decoder based fallback we need
1:2ccdbb7:     // just the encoded data to form a new page
1:2ccdbb7:     if (null != encodedDataColumnPage) {
1:2ccdbb7:       encodedDataColumnPage.freeMemory();
1:2ccdbb7:     }
1:2ccdbb7:     if (isDecoderBasedFallBackEnabled) {
1:2ccdbb7:       actualDataColumnPage.freeMemory();
1:2ccdbb7:       isActualPageMemoryFreed = true;
1:2ccdbb7:     } else if (null == pageLevelDictionary) {
1:e710339:       actualDataColumnPage.freeMemory();
1:e710339:       isActualPageMemoryFreed = true;
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   public void freeMemoryForce() {
1:e710339:     if (!isActualPageMemoryFreed) {
1:e710339:       actualDataColumnPage.freeMemory();
1:e710339:       isActualPageMemoryFreed = true;
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   private void freeEncodedColumnPage() {
1:e710339:     if (null != encodedDataColumnPage) {
1:e710339:       encodedDataColumnPage.freeMemory();
1:e710339:       encodedDataColumnPage = null;
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void putByte(int rowId, byte value) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void putShort(int rowId, short value) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void putInt(int rowId, int value) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void putLong(int rowId, long value) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void putDouble(int rowId, double value) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void putDecimal(int rowId, BigDecimal decimal) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void putShortInt(int rowId, int value) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void putBytes(int rowId, byte[] bytes, int offset, int length) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public byte getByte(int rowId) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public short getShort(int rowId) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public int getShortInt(int rowId) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public int getInt(int rowId) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public long getLong(int rowId) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public float getFloat(int rowId) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public double getDouble(int rowId) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public BigDecimal getDecimal(int rowId) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public byte[] getBytes(int rowId) {
1:e710339:     return actualDataColumnPage.getBytes(rowId);
1:e710339:   }
1:e710339: 
1:e710339:   @Override public byte[] getBytePage() {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public short[] getShortPage() {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public byte[] getShortIntPage() {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public int[] getIntPage() {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public long[] getLongPage() {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public float[] getFloatPage() {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public double[] getDoublePage() {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public byte[] getLVFlattenedBytePage() throws IOException {
1:e710339:     if (null != encodedDataColumnPage) {
1:e710339:       return encodedDataColumnPage.getLVFlattenedBytePage();
1:e710339:     } else {
1:e710339:       return actualDataColumnPage.getLVFlattenedBytePage();
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   @Override public byte[] getComplexChildrenLVFlattenedBytePage() throws IOException {
1:e710339:     if (null != encodedDataColumnPage) {
1:e710339:       return encodedDataColumnPage.getComplexChildrenLVFlattenedBytePage();
1:e710339:     } else {
1:e710339:       return actualDataColumnPage.getComplexChildrenLVFlattenedBytePage();
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   @Override public byte[] getComplexParentFlattenedBytePage() throws IOException {
1:e710339:     if (null != encodedDataColumnPage) {
1:e710339:       return encodedDataColumnPage.getComplexParentFlattenedBytePage();
1:e710339:     } else {
1:e710339:       return actualDataColumnPage.getComplexParentFlattenedBytePage();
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   @Override public byte[] getDecimalPage() {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: 
1:e710339:   @Override public void convertValue(ColumnPageValueConverter codec) {
1:e710339:     throw new UnsupportedOperationException("Operation not supported");
1:e710339:   }
1:e710339: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:     super(actualDataColumnPage.getColumnPageEncoderMeta(), actualDataColumnPage.getPageSize());
1:           isComplexTypePrimitive, actualDataColumnPage.getColumnCompressorName());
author:akashrn5
-------------------------------------------------------------------------------
commit:2ccdbb7
/////////////////////////////////////////////////////////////////////////
1: 
1:   private boolean isDecoderBasedFallBackEnabled;
1: 
1:       LocalDictionaryGenerator localDictionaryGenerator, boolean isComplexTypePrimitive,
1:       boolean isDecoderBasedFallBackEnabled) {
/////////////////////////////////////////////////////////////////////////
1:     this.isDecoderBasedFallBackEnabled = isDecoderBasedFallBackEnabled;
/////////////////////////////////////////////////////////////////////////
1:     // free the encoded column page as data is already encoded and it is of no use, during fallback
1:     // if goes to actual databased fallback, we need actual data and decoder based fallback we need
1:     // just the encoded data to form a new page
1:     if (null != encodedDataColumnPage) {
1:       encodedDataColumnPage.freeMemory();
1:     }
1:     if (isDecoderBasedFallBackEnabled) {
1:       actualDataColumnPage.freeMemory();
1:       isActualPageMemoryFreed = true;
1:     } else if (null == pageLevelDictionary) {
/////////////////////////////////////////////////////////////////////////
commit:36e14e5
/////////////////////////////////////////////////////////////////////////
1:         LOGGER.warn("Local Dictionary threshold reached for the column: " + actualDataColumnPage
1:             .getColumnSpec().getFieldName() + ", " + e.getMessage());
author:kumarvishal09
-------------------------------------------------------------------------------
commit:3a4b881
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.keygenerator.KeyGenException;
1: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1: import org.apache.carbondata.core.keygenerator.factory.KeyGeneratorFactory;
/////////////////////////////////////////////////////////////////////////
1:   private KeyGenerator keyGenerator;
1: 
1:   private int[] dummyKey;
0:       LocalDictionaryGenerator localDictionaryGenerator, boolean isComplexTypePrimitive) {
1:           actualDataColumnPage.getColumnSpec().getFieldName(), actualDataColumnPage.getDataType(),
0:           isComplexTypePrimitive);
1:       this.keyGenerator = KeyGeneratorFactory
1:           .getKeyGenerator(new int[] { CarbonCommonConstants.LOCAL_DICTIONARY_MAX + 1 });
1:       this.dummyKey = new int[1];
/////////////////////////////////////////////////////////////////////////
1:         dummyKey[0] = pageLevelDictionary.getDictionaryValue(bytes);
1:         encodedDataColumnPage.putBytes(rowId, keyGenerator.generateKey(dummyKey));
1:       } catch (KeyGenException e) {
1:         LOGGER.error(e, "Unable to generate key for: " + actualDataColumnPage
1:             .getColumnSpec().getFieldName());
1:         throw new RuntimeException(e);
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page;
1: 
1: import java.io.IOException;
1: import java.math.BigDecimal;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.localdictionary.PageLevelDictionary;
1: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
0: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: /**
1:  * Column page implementation for Local dictionary generated columns
1:  * Its a decorator over two column page
1:  * 1. Which will hold the actual data
1:  * 2. Which will hold the dictionary encoded data
1:  */
1: public class LocalDictColumnPage extends ColumnPage {
1: 
1:   /**
1:    * LOGGER
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(LocalDictColumnPage.class.getName());
1: 
1:   /**
1:    * to maintain page level dictionary for column page
1:    */
1:   private PageLevelDictionary pageLevelDictionary;
1: 
1:   /**
1:    * to hold the actual data of the column
1:    */
1:   private ColumnPage actualDataColumnPage;
1: 
1:   /**
1:    * to hold the dictionary encoded column page
1:    */
1:   private ColumnPage encodedDataColumnPage;
1: 
1:   /**
1:    * to check if actual column page memory is already clear
1:    */
1:   private boolean isActualPageMemoryFreed;
1: 
1:   /**
1:    * Create a new column page with input data type and page size.
1:    */
1:   protected LocalDictColumnPage(ColumnPage actualDataColumnPage, ColumnPage encodedColumnpage,
0:       LocalDictionaryGenerator localDictionaryGenerator) {
0:     super(actualDataColumnPage.getColumnSpec(), actualDataColumnPage.getDataType(),
0:         actualDataColumnPage.getPageSize());
1:     // if threshold is not reached then create page level dictionary
1:     // for encoding with local dictionary
1:     if (!localDictionaryGenerator.isThresholdReached()) {
1:       pageLevelDictionary = new PageLevelDictionary(localDictionaryGenerator,
0:           actualDataColumnPage.getColumnSpec().getFieldName(), actualDataColumnPage.getDataType());
1:       this.encodedDataColumnPage = encodedColumnpage;
1:     } else {
1:       // else free the encoded column page memory as its of no use
1:       encodedColumnpage.freeMemory();
1:     }
1:     this.actualDataColumnPage = actualDataColumnPage;
1:   }
1: 
1:   @Override public byte[][] getByteArrayPage() {
1:     if (null != pageLevelDictionary) {
1:       return encodedDataColumnPage.getByteArrayPage();
1:     } else {
1:       return actualDataColumnPage.getByteArrayPage();
1:     }
1:   }
1: 
1:   /**
1:    * Below method will be used to check whether page is local dictionary
1:    * generated or not. This will be used for while enoding the the page
1:    *
1:    * @return
1:    */
1:   public boolean isLocalDictGeneratedPage() {
1:     return null != pageLevelDictionary;
1:   }
1: 
1:   /**
1:    * Below method will be used to add column data to page
1:    *
1:    * @param rowId row number
1:    * @param bytes actual data
1:    */
1:   @Override public void putBytes(int rowId, byte[] bytes) {
1:     if (null != pageLevelDictionary) {
1:       try {
1:         actualDataColumnPage.putBytes(rowId, bytes);
0:         int dictionaryValue = pageLevelDictionary.getDictionaryValue(bytes);
0:         encodedDataColumnPage.putBytes(rowId, ByteUtil.toBytes(dictionaryValue));
1:       } catch (DictionaryThresholdReachedException e) {
0:         LOGGER.error(e, "Local Dictionary threshold reached for the column: " + actualDataColumnPage
0:             .getColumnSpec().getFieldName());
1:         pageLevelDictionary = null;
1:         encodedDataColumnPage.freeMemory();
1:         encodedDataColumnPage = null;
1:       }
1:     } else {
1:       actualDataColumnPage.putBytes(rowId, bytes);
1:     }
1:   }
1: 
1:   @Override public void disableLocalDictEncoding() {
1:     pageLevelDictionary = null;
1:     freeEncodedColumnPage();
1:   }
1: 
1:   @Override public PageLevelDictionary getColumnPageDictionary() {
1:     return pageLevelDictionary;
1:   }
1: 
1:   @Override public void setBytePage(byte[] byteData) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void setShortPage(short[] shortData) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void setShortIntPage(byte[] shortIntData) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void setIntPage(int[] intData) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void setLongPage(long[] longData) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void setFloatPage(float[] floatData) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void setDoublePage(double[] doubleData) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void setByteArrayPage(byte[][] byteArray) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void freeMemory() {
0:     if (null == pageLevelDictionary) {
1:       actualDataColumnPage.freeMemory();
1:       isActualPageMemoryFreed = true;
1:     }
1:   }
1: 
1:   public void freeMemoryForce() {
1:     if (!isActualPageMemoryFreed) {
1:       actualDataColumnPage.freeMemory();
1:       isActualPageMemoryFreed = true;
1:     }
1:     freeEncodedColumnPage();
1:   }
1: 
1:   private void freeEncodedColumnPage() {
1:     if (null != encodedDataColumnPage) {
1:       encodedDataColumnPage.freeMemory();
1:       encodedDataColumnPage = null;
1:     }
1:   }
1: 
1:   @Override public void putByte(int rowId, byte value) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void putShort(int rowId, short value) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void putInt(int rowId, int value) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void putLong(int rowId, long value) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void putDouble(int rowId, double value) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void putDecimal(int rowId, BigDecimal decimal) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void putShortInt(int rowId, int value) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void putBytes(int rowId, byte[] bytes, int offset, int length) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public byte getByte(int rowId) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public short getShort(int rowId) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public int getShortInt(int rowId) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public int getInt(int rowId) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public long getLong(int rowId) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public float getFloat(int rowId) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public double getDouble(int rowId) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public BigDecimal getDecimal(int rowId) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public byte[] getBytes(int rowId) {
1:     return actualDataColumnPage.getBytes(rowId);
1:   }
1: 
1:   @Override public byte[] getBytePage() {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public short[] getShortPage() {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public byte[] getShortIntPage() {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public int[] getIntPage() {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public long[] getLongPage() {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public float[] getFloatPage() {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public double[] getDoublePage() {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public byte[] getLVFlattenedBytePage() throws IOException {
1:     if (null != encodedDataColumnPage) {
1:       return encodedDataColumnPage.getLVFlattenedBytePage();
1:     } else {
1:       return actualDataColumnPage.getLVFlattenedBytePage();
1:     }
1:   }
1: 
1:   @Override public byte[] getComplexChildrenLVFlattenedBytePage() throws IOException {
1:     if (null != encodedDataColumnPage) {
1:       return encodedDataColumnPage.getComplexChildrenLVFlattenedBytePage();
1:     } else {
1:       return actualDataColumnPage.getComplexChildrenLVFlattenedBytePage();
1:     }
1:   }
1: 
1:   @Override public byte[] getComplexParentFlattenedBytePage() throws IOException {
1:     if (null != encodedDataColumnPage) {
1:       return encodedDataColumnPage.getComplexParentFlattenedBytePage();
1:     } else {
1:       return actualDataColumnPage.getComplexParentFlattenedBytePage();
1:     }
1:   }
1: 
1:   @Override public byte[] getDecimalPage() {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public void convertValue(ColumnPageValueConverter codec) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: }
============================================================================