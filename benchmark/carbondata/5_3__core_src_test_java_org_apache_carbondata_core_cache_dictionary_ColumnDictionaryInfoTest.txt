1:f0d79e2: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:f0d79e2:  *
1:f0d79e2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f0d79e2:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:f0d79e2:  */
1:f0d79e2: package org.apache.carbondata.core.cache.dictionary;
1:f0d79e2: 
1:f0d79e2: import java.nio.charset.Charset;
1:f0d79e2: import java.util.ArrayList;
1:f0d79e2: import java.util.Arrays;
1:f0d79e2: import java.util.List;
1:f0d79e2: import java.util.concurrent.CopyOnWriteArrayList;
1:f0d79e2: 
1:f0d79e2: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:f0d79e2: import org.apache.carbondata.core.util.CarbonUtil;
1:f0d79e2: 
1:f0d79e2: import mockit.Mock;
1:f0d79e2: import mockit.MockUp;
1:f0d79e2: import org.junit.Test;
1:f0d79e2: 
1:f0d79e2: import static org.hamcrest.CoreMatchers.equalTo;
1:f0d79e2: import static org.hamcrest.CoreMatchers.hasItems;
1:f0d79e2: import static org.hamcrest.CoreMatchers.is;
1:f0d79e2: import static org.hamcrest.CoreMatchers.nullValue;
1:f0d79e2: import static org.hamcrest.MatcherAssert.assertThat;
1:f0d79e2: 
1:f0d79e2: public class ColumnDictionaryInfoTest {
1:f0d79e2: 
1:f0d79e2:   private ColumnDictionaryInfo columnDictionaryInfo;
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetIncrementalSurrogateKeyFromDictionary() {
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     List<String> evaluateResultList = Arrays.asList("china", "france");
1:f0d79e2:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 10000;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2, 3, 4, 5, 6, 7));
1:f0d79e2: 
1:f0d79e2:     List<byte[]> chunks = Arrays.asList(new byte[] { 64, 78, 85, 35, 76, 76, 36, 33 },
1:f0d79e2:         new byte[] { 98, 114, 97, 122, 105, 108 }, new byte[] { 99, 97, 110, 97, 100, 97 },
1:f0d79e2:         new byte[] { 99, 104, 105, 110, 97 }, new byte[] { 102, 114, 97, 110, 99, 101 },
1:f0d79e2:         new byte[] { 117, 107 }, new byte[] { 117, 117, 97 });
1:f0d79e2: 
1:f0d79e2:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2:     dictionaryChunks.add(chunks);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1:f0d79e2: 
1:f0d79e2:     List<Integer> surrogates = new ArrayList<>();
1:f0d79e2:     columnDictionaryInfo
1:f0d79e2:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1:f0d79e2: 
1:f0d79e2:     assertThat(surrogates.size(), is(equalTo(2)));
1:f0d79e2: 
1:f0d79e2:     List<Integer> expectedSurrogates = new ArrayList<>();
1:f0d79e2:     expectedSurrogates.add(4);
1:f0d79e2:     expectedSurrogates.add(5);
1:f0d79e2: 
1:f0d79e2:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithZeroSurrogate() {
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     List<String> evaluateResultList = Arrays.asList("china", "france");
1:f0d79e2:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 10000;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2, 3, 4, 5, 6, 7));
1:f0d79e2: 
1:f0d79e2:     List<Integer> surrogates = new ArrayList<>();
1:f0d79e2:     columnDictionaryInfo
1:f0d79e2:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1:f0d79e2: 
1:f0d79e2:     int expectedSize = 1;
1:f0d79e2:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1:f0d79e2: 
1:f0d79e2:     List<Integer> expectedSurrogates = new ArrayList<>();
1:f0d79e2:     expectedSurrogates.add(0);
1:f0d79e2: 
1:f0d79e2:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithNullValue() {
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     List<String> evaluateResultList = Arrays.asList("@NU#LL$!");
1:f0d79e2:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 10000;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(2, 3, 1));
1:f0d79e2: 
1:f0d79e2:     List<Integer> surrogates = new ArrayList<>();
1:f0d79e2:     columnDictionaryInfo
1:f0d79e2:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1:f0d79e2: 
1:f0d79e2:     int expectedSize = 1;
1:f0d79e2:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1:f0d79e2: 
1:f0d79e2:     List<Integer> expectedSurrogates = new ArrayList<>();
1:f0d79e2:     expectedSurrogates.add(1);
1:f0d79e2:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithTypeException() {
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.INT);
1:f0d79e2: 
1:f0d79e2:     List<String> evaluateResultList = Arrays.asList("china", "france");
1:f0d79e2:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 10000;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2, 3, 4, 5, 6, 7));
1:f0d79e2: 
1:f0d79e2:     List<byte[]> chunks = Arrays.asList(new byte[] { 64, 78, 85, 35, 76, 76, 36, 33 },
1:f0d79e2:         new byte[] { 98, 114, 97, 122, 105, 108 }, new byte[] { 99, 97, 110, 97, 100, 97 },
1:f0d79e2:         new byte[] { 99, 104, 105, 110, 97 }, new byte[] { 102, 114, 97, 110, 99, 101 },
1:f0d79e2:         new byte[] { 117, 107 }, new byte[] { 117, 117, 97 });
1:f0d79e2: 
1:f0d79e2:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2:     dictionaryChunks.add(chunks);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1:f0d79e2: 
1:f0d79e2:     List<Integer> surrogates = new ArrayList<>();
1:f0d79e2:     columnDictionaryInfo
1:f0d79e2:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1:f0d79e2: 
1:f0d79e2:     int expectedSize = 2;
1:f0d79e2:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1:f0d79e2: 
1:f0d79e2:     List<Integer> expectedSurrogates = new ArrayList<>();
1:f0d79e2:     expectedSurrogates.add(4);
1:f0d79e2:     expectedSurrogates.add(5);
1:f0d79e2: 
1:f0d79e2:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithDoubleType() {
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.DOUBLE);
1:f0d79e2: 
1:f0d79e2:     List<String> evaluateResultList = Arrays.asList("15999");
1:f0d79e2:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 10000;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2));
1:f0d79e2: 
1:f0d79e2:     List<byte[]> chunks = Arrays.asList(new byte[] { 49, 53, 57, 57, 57 });
1:f0d79e2: 
1:f0d79e2:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2:     dictionaryChunks.add(chunks);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1:f0d79e2: 
1:f0d79e2:     List<Integer> surrogates = new ArrayList<>();
1:f0d79e2:     columnDictionaryInfo
1:f0d79e2:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1:f0d79e2: 
1:f0d79e2:     int expectedSize = 1;
1:f0d79e2:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1:f0d79e2: 
1:f0d79e2:     List<Integer> expectedSurrogates = new ArrayList<>();
1:f0d79e2:     expectedSurrogates.add(1);
1:f0d79e2: 
1:f0d79e2:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithIntType() {
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.INT);
1:f0d79e2: 
1:f0d79e2:     List<String> evaluateResultList = Arrays.asList("998");
1:f0d79e2:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 10000;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2));
1:f0d79e2: 
1:f0d79e2:     List<byte[]> chunks = Arrays.asList(new byte[] { 57, 57, 56 });
1:f0d79e2: 
1:f0d79e2:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2:     dictionaryChunks.add(chunks);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1:f0d79e2: 
1:f0d79e2:     List<Integer> surrogates = new ArrayList<>();
1:f0d79e2:     columnDictionaryInfo
1:f0d79e2:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1:f0d79e2: 
1:f0d79e2:     int expectedSize = 1;
1:f0d79e2:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1:f0d79e2: 
1:f0d79e2:     List<Integer> expectedSurrogates = new ArrayList<>();
1:f0d79e2:     expectedSurrogates.add(1);
1:f0d79e2: 
1:f0d79e2:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithDecimalType() {
1:f209e8e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.createDefaultDecimalType());
1:f0d79e2: 
1:f0d79e2:     List<String> evaluateResultList = Arrays.asList("150011.550");
1:f0d79e2:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 10000;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(2, 3, 1));
1:f0d79e2: 
1:f0d79e2:     List<byte[]> chunks = Arrays.asList(new byte[] { 64, 78, 85, 35, 76, 76, 36, 33 },
1:f0d79e2:         new byte[] { 49, 53, 48, 48, 48, 49, 46, 50, 53, 54 },
1:f0d79e2:         new byte[] { 49, 53, 48, 48, 49, 49, 46, 53, 53, 48 });
1:f0d79e2: 
1:f0d79e2:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2:     dictionaryChunks.add(chunks);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1:f0d79e2: 
1:f0d79e2:     List<Integer> surrogates = new ArrayList<>();
1:f0d79e2:     columnDictionaryInfo
1:f0d79e2:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1:f0d79e2: 
1:f0d79e2:     int expectedSize = 1;
1:f0d79e2:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1:f0d79e2: 
1:f0d79e2:     List<Integer> expectedSurrogates = new ArrayList<>();
1:f0d79e2:     expectedSurrogates.add(3);
1:f0d79e2: 
1:f0d79e2:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithLongType() {
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.LONG);
1:f0d79e2: 
1:f0d79e2:     List<String> evaluateResultList = Arrays.asList("1500115505555");
1:f0d79e2:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 10000;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(2, 3, 1));
1:f0d79e2: 
1:f0d79e2:     List<byte[]> chunks = Arrays.asList(new byte[] { 64, 78, 85, 35, 76, 76, 36, 33 },
1:f0d79e2:         new byte[] { 49, 53, 48, 48, 48, 49, 50, 53, 54, 52, 52, 52, 52 },
1:f0d79e2:         new byte[] { 49, 53, 48, 48, 49, 49, 53, 53, 48, 53, 53, 53, 53 });
1:f0d79e2: 
1:f0d79e2:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2:     dictionaryChunks.add(chunks);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1:f0d79e2: 
1:f0d79e2:     List<Integer> surrogates = new ArrayList<>();
1:f0d79e2:     columnDictionaryInfo
1:f0d79e2:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1:f0d79e2: 
1:f0d79e2:     int expectedSize = 1;
1:f0d79e2:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1:f0d79e2: 
1:f0d79e2:     List<Integer> expectedSurrogates = new ArrayList<>();
1:f0d79e2:     expectedSurrogates.add(3);
1:f0d79e2: 
1:f0d79e2:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testAddDictionaryChunkEmpty() {
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 1;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2: 
1:f0d79e2:     List<byte[]> newDictionaryChunk = Arrays.asList(new byte[] { 1, 2, 3, 4 });
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk);
1:f0d79e2: 
1:f0d79e2:     List<List<byte[]>> expectedDictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2:     expectedDictionaryChunks.add(newDictionaryChunk);
1:f0d79e2: 
1:f0d79e2:     assertThat(columnDictionaryInfo.dictionaryChunks, is(equalTo(expectedDictionaryChunks)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testAddDictionaryChunkAppend() {
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 1;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2: 
1:f0d79e2:     List<byte[]> newDictionaryChunk1 = Arrays.asList(new byte[] { 1, 2, 3, 4 });
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk1);
1:f0d79e2: 
1:f0d79e2:     List<byte[]> newDictionaryChunk2 = Arrays.asList(new byte[] { 5, 6, 7, 8 });
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk2);
1:f0d79e2: 
1:f0d79e2:     List<List<byte[]>> expectedDictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2:     expectedDictionaryChunks.add(newDictionaryChunk1);
1:f0d79e2:     expectedDictionaryChunks.add(newDictionaryChunk2);
1:f0d79e2: 
1:f0d79e2:     assertThat(columnDictionaryInfo.dictionaryChunks, is(equalTo(expectedDictionaryChunks)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void addDictionaryChunkWithHugeChunkSize() {
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 10;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2: 
1:f0d79e2:     List<byte[]> newDictionaryChunk1 = new ArrayList<>(Arrays.asList(new byte[] { 1, 2, 3, 4 }));
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk1);
1:f0d79e2: 
1:f0d79e2:     List<byte[]> newDictionaryChunk2 = new ArrayList<>(Arrays.asList(new byte[] { 5, 6, 7, 8 }));
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk2);
1:f0d79e2: 
1:f0d79e2:     List<List<byte[]>> expectedDictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2:     expectedDictionaryChunks.add(newDictionaryChunk1);
1:f0d79e2: 
1:f0d79e2:     assertThat(columnDictionaryInfo.dictionaryChunks, is(equalTo(expectedDictionaryChunks)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void addDictionaryChunkWithSplitChunks() {
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 2;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2: 
1:f0d79e2:     List<byte[]> newDictionaryChunk1 = new ArrayList<>(Arrays.asList(new byte[] { 1, 2, 3, 4 }));
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk1);
1:f0d79e2: 
1:f0d79e2:     List<byte[]> newDictionaryChunk2 =
1:f0d79e2:         new ArrayList<>(Arrays.asList(new byte[] { 5, 6, 7 }, new byte[] { 8, 9, 10 }));
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk2);
1:f0d79e2: 
1:f0d79e2:     byte[][] expectedResult = {{ 1, 2, 3, 4 }, { 5, 6, 7 }, { 8, 9, 10 }};
1:f0d79e2:     assertThat(columnDictionaryInfo.dictionaryChunks.get(0),
1:f0d79e2:         hasItems(expectedResult[0], expectedResult[1]));
1:f0d79e2:     assertThat(columnDictionaryInfo.dictionaryChunks.get(1), hasItems(expectedResult[2]));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGtSortedIndexWithMinimumSurrogateKey() {
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortReverseOrderIndex(Arrays.asList(1, 2, 3));
1:f0d79e2: 
1:f0d79e2:     final int result = columnDictionaryInfo.getSortedIndex(0);
1:f0d79e2: 
1:f0d79e2:     int expectedResult = -1;
1:f0d79e2:     assertThat(result, is(equalTo(expectedResult)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGtSortedIndexWithMaximumSurrogateKey() {
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortReverseOrderIndex(Arrays.asList(1, 2, 3));
1:f0d79e2: 
1:f0d79e2:     final int result = columnDictionaryInfo.getSortedIndex(4);
1:f0d79e2: 
1:f0d79e2:     int expectedResult = -1;
1:f0d79e2:     assertThat(result, is(equalTo(expectedResult)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGtSortedIndexWithSurrogateKey() {
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortReverseOrderIndex(Arrays.asList(1, 2, 3));
1:f0d79e2: 
1:f0d79e2:     final int result = columnDictionaryInfo.getSortedIndex(2);
1:f0d79e2: 
1:f0d79e2:     int expectedResult = 2;
1:f0d79e2:     assertThat(result, is(equalTo(expectedResult)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetSizeOfLastDictionaryChunkWithDictionaryChunkZero() {
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     final int result = columnDictionaryInfo.getSizeOfLastDictionaryChunk();
1:f0d79e2: 
1:f0d79e2:     int expectedResult = 0;
1:f0d79e2:     assertThat(result, is(equalTo(expectedResult)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetSizeOfLastDictionaryChunk() {
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2: 
1:f0d79e2:     List<byte[]> newDictionaryChunk1 = new ArrayList<>(Arrays.asList(new byte[] { 1, 2, 3, 4 }));
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk1);
1:f0d79e2: 
1:f0d79e2:     final int result = columnDictionaryInfo.getSizeOfLastDictionaryChunk();
1:f0d79e2: 
1:f0d79e2:     int expectedResult = 1;
1:f0d79e2:     assertThat(result, is(equalTo(expectedResult)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetDictionaryValueFromSortedIndexWithMinimumSurrogateKey() {
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortReverseOrderIndex(Arrays.asList(1, 2, 3));
1:f0d79e2: 
1:f0d79e2:     final String result = columnDictionaryInfo.getDictionaryValueFromSortedIndex(0);
1:f0d79e2: 
1:f0d79e2:     assertThat(result, is(nullValue()));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetDictionaryValueFromSortedIndexWithMaximumSurrogateKey() {
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortReverseOrderIndex(Arrays.asList(1, 2, 3));
1:f0d79e2: 
1:f0d79e2:     final String result = columnDictionaryInfo.getDictionaryValueFromSortedIndex(4);
1:f0d79e2: 
1:f0d79e2:     assertThat(result, is(nullValue()));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test public void testGetDictionaryValueFromSortedIndex() {
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortReverseOrderIndex(Arrays.asList(0, 1, 2, 3));
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2, 3));
1:f0d79e2: 
1:f0d79e2:     final String result = columnDictionaryInfo.getDictionaryValueFromSortedIndex(1);
1:f0d79e2: 
1:f0d79e2:     assertThat(result, is(nullValue()));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test
1:f0d79e2:   public void testGetSurrogateKey() {
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
1:f0d79e2: 
1:f0d79e2:     byte[] value = convertListElementsIntoByteArray(Arrays.asList("china")).get(0);
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 10000;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2, 3, 4, 5, 6, 7));
1:f0d79e2: 
1:f0d79e2:     List<byte[]> chunks = Arrays.asList(new byte[] { 64, 78, 85, 35, 76, 76, 36, 33 },
1:f0d79e2:         new byte[] { 98, 114, 97, 122, 105, 108 }, new byte[] { 99, 97, 110, 97, 100, 97 },
1:f0d79e2:         new byte[] { 99, 104, 105, 110, 97 }, new byte[] { 102, 114, 97, 110, 99, 101 },
1:f0d79e2:         new byte[] { 117, 107 }, new byte[] { 117, 117, 97 });
1:f0d79e2: 
1:f0d79e2:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2:     dictionaryChunks.add(chunks);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1:f0d79e2: 
1:f0d79e2:     int result = columnDictionaryInfo.getSurrogateKey(value);
1:f0d79e2: 
1:f0d79e2:     int expectedResult = 4;
1:f0d79e2:     assertThat(result, is(equalTo(expectedResult)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   @Test
1:f0d79e2:   public void testGetSurrogateKeyWithIntType() {
1:f0d79e2: 
1:956833e:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.INT);
1:f0d79e2: 
1:f0d79e2:     byte[] value = convertListElementsIntoByteArray(Arrays.asList("998")).get(0);
1:f0d79e2: 
1:f0d79e2:     new MockUp<CarbonUtil>() {
1:f0d79e2: 
1:f0d79e2:       @Mock public int getDictionaryChunkSize() {
1:f0d79e2:         return 10000;
1:f0d79e2:       }
1:f0d79e2:     };
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2));
1:f0d79e2: 
1:f0d79e2:     List<byte[]> chunks = Arrays.asList(new byte[] { 57, 57, 56 });
1:f0d79e2: 
1:f0d79e2:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:f0d79e2:     dictionaryChunks.add(chunks);
1:f0d79e2: 
1:f0d79e2:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1:f0d79e2: 
1:f0d79e2:     int result = columnDictionaryInfo.getSurrogateKey(value);
1:f0d79e2: 
1:f0d79e2:     int expectedResult = 1;
1:f0d79e2:     assertThat(result, is(equalTo(expectedResult)));
1:f0d79e2:   }
1:f0d79e2: 
1:f0d79e2:   private List<byte[]> convertListElementsIntoByteArray(List<String> stringList) {
1:f0d79e2:     List<byte[]> byteValuesOfFilterMembers = new ArrayList<>(stringList.size());
1:f0d79e2:     for (int i = 0; i < stringList.size(); i++) {
1:f0d79e2:       byte[] keyData =
1:f0d79e2:           stringList.get(i).getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:f0d79e2:       byteValuesOfFilterMembers.add(keyData);
1:f0d79e2:     }
1:f0d79e2:     return byteValuesOfFilterMembers;
1:f0d79e2:   }
1:f0d79e2: }
============================================================================
author:xubo245
-------------------------------------------------------------------------------
commit:e2a2d99
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.datatype.DecimalType;
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.createDefaultDecimalType());
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.INT);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.DOUBLE);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.INT);
/////////////////////////////////////////////////////////////////////////
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.DECIMAL);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.LONG);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnDictionaryInfo = new ColumnDictionaryInfo(DataTypes.INT);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.datatype.DataType;
author:harmeetsingh0013
-------------------------------------------------------------------------------
commit:f0d79e2
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.nio.charset.Charset;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: 
1: import mockit.Mock;
1: import mockit.MockUp;
1: import org.junit.Test;
1: 
1: import static org.hamcrest.CoreMatchers.equalTo;
1: import static org.hamcrest.CoreMatchers.hasItems;
1: import static org.hamcrest.CoreMatchers.is;
1: import static org.hamcrest.CoreMatchers.nullValue;
1: import static org.hamcrest.MatcherAssert.assertThat;
1: 
1: public class ColumnDictionaryInfoTest {
1: 
1:   private ColumnDictionaryInfo columnDictionaryInfo;
1: 
1:   @Test public void testGetIncrementalSurrogateKeyFromDictionary() {
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     List<String> evaluateResultList = Arrays.asList("china", "france");
1:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 10000;
1:       }
1:     };
1: 
1:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2, 3, 4, 5, 6, 7));
1: 
1:     List<byte[]> chunks = Arrays.asList(new byte[] { 64, 78, 85, 35, 76, 76, 36, 33 },
1:         new byte[] { 98, 114, 97, 122, 105, 108 }, new byte[] { 99, 97, 110, 97, 100, 97 },
1:         new byte[] { 99, 104, 105, 110, 97 }, new byte[] { 102, 114, 97, 110, 99, 101 },
1:         new byte[] { 117, 107 }, new byte[] { 117, 117, 97 });
1: 
1:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:     dictionaryChunks.add(chunks);
1: 
1:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1: 
1:     List<Integer> surrogates = new ArrayList<>();
1:     columnDictionaryInfo
1:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1: 
1:     assertThat(surrogates.size(), is(equalTo(2)));
1: 
1:     List<Integer> expectedSurrogates = new ArrayList<>();
1:     expectedSurrogates.add(4);
1:     expectedSurrogates.add(5);
1: 
1:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:   }
1: 
1:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithZeroSurrogate() {
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     List<String> evaluateResultList = Arrays.asList("china", "france");
1:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 10000;
1:       }
1:     };
1: 
1:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2, 3, 4, 5, 6, 7));
1: 
1:     List<Integer> surrogates = new ArrayList<>();
1:     columnDictionaryInfo
1:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1: 
1:     int expectedSize = 1;
1:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1: 
1:     List<Integer> expectedSurrogates = new ArrayList<>();
1:     expectedSurrogates.add(0);
1: 
1:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:   }
1: 
1:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithNullValue() {
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     List<String> evaluateResultList = Arrays.asList("@NU#LL$!");
1:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 10000;
1:       }
1:     };
1: 
1:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(2, 3, 1));
1: 
1:     List<Integer> surrogates = new ArrayList<>();
1:     columnDictionaryInfo
1:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1: 
1:     int expectedSize = 1;
1:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1: 
1:     List<Integer> expectedSurrogates = new ArrayList<>();
1:     expectedSurrogates.add(1);
1:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:   }
1: 
1:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithTypeException() {
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.INT);
1: 
1:     List<String> evaluateResultList = Arrays.asList("china", "france");
1:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 10000;
1:       }
1:     };
1: 
1:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2, 3, 4, 5, 6, 7));
1: 
1:     List<byte[]> chunks = Arrays.asList(new byte[] { 64, 78, 85, 35, 76, 76, 36, 33 },
1:         new byte[] { 98, 114, 97, 122, 105, 108 }, new byte[] { 99, 97, 110, 97, 100, 97 },
1:         new byte[] { 99, 104, 105, 110, 97 }, new byte[] { 102, 114, 97, 110, 99, 101 },
1:         new byte[] { 117, 107 }, new byte[] { 117, 117, 97 });
1: 
1:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:     dictionaryChunks.add(chunks);
1: 
1:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1: 
1:     List<Integer> surrogates = new ArrayList<>();
1:     columnDictionaryInfo
1:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1: 
1:     int expectedSize = 2;
1:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1: 
1:     List<Integer> expectedSurrogates = new ArrayList<>();
1:     expectedSurrogates.add(4);
1:     expectedSurrogates.add(5);
1: 
1:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:   }
1: 
1:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithDoubleType() {
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.DOUBLE);
1: 
1:     List<String> evaluateResultList = Arrays.asList("15999");
1:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 10000;
1:       }
1:     };
1: 
1:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2));
1: 
1:     List<byte[]> chunks = Arrays.asList(new byte[] { 49, 53, 57, 57, 57 });
1: 
1:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:     dictionaryChunks.add(chunks);
1: 
1:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1: 
1:     List<Integer> surrogates = new ArrayList<>();
1:     columnDictionaryInfo
1:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1: 
1:     int expectedSize = 1;
1:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1: 
1:     List<Integer> expectedSurrogates = new ArrayList<>();
1:     expectedSurrogates.add(1);
1: 
1:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:   }
1: 
1:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithIntType() {
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.INT);
1: 
1:     List<String> evaluateResultList = Arrays.asList("998");
1:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 10000;
1:       }
1:     };
1: 
1:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2));
1: 
1:     List<byte[]> chunks = Arrays.asList(new byte[] { 57, 57, 56 });
1: 
1:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:     dictionaryChunks.add(chunks);
1: 
1:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1: 
1:     List<Integer> surrogates = new ArrayList<>();
1:     columnDictionaryInfo
1:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1: 
1:     int expectedSize = 1;
1:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1: 
1:     List<Integer> expectedSurrogates = new ArrayList<>();
1:     expectedSurrogates.add(1);
1: 
1:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:   }
1: 
1:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithDecimalType() {
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.DECIMAL);
1: 
1:     List<String> evaluateResultList = Arrays.asList("150011.550");
1:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 10000;
1:       }
1:     };
1: 
1:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(2, 3, 1));
1: 
1:     List<byte[]> chunks = Arrays.asList(new byte[] { 64, 78, 85, 35, 76, 76, 36, 33 },
1:         new byte[] { 49, 53, 48, 48, 48, 49, 46, 50, 53, 54 },
1:         new byte[] { 49, 53, 48, 48, 49, 49, 46, 53, 53, 48 });
1: 
1:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:     dictionaryChunks.add(chunks);
1: 
1:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1: 
1:     List<Integer> surrogates = new ArrayList<>();
1:     columnDictionaryInfo
1:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1: 
1:     int expectedSize = 1;
1:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1: 
1:     List<Integer> expectedSurrogates = new ArrayList<>();
1:     expectedSurrogates.add(3);
1: 
1:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:   }
1: 
1:   @Test public void testGetIncrementalSurrogateKeyFromDictionaryWithLongType() {
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.LONG);
1: 
1:     List<String> evaluateResultList = Arrays.asList("1500115505555");
1:     List<byte[]> byteValuesOfFilterMembers = convertListElementsIntoByteArray(evaluateResultList);
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 10000;
1:       }
1:     };
1: 
1:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(2, 3, 1));
1: 
1:     List<byte[]> chunks = Arrays.asList(new byte[] { 64, 78, 85, 35, 76, 76, 36, 33 },
1:         new byte[] { 49, 53, 48, 48, 48, 49, 50, 53, 54, 52, 52, 52, 52 },
1:         new byte[] { 49, 53, 48, 48, 49, 49, 53, 53, 48, 53, 53, 53, 53 });
1: 
1:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:     dictionaryChunks.add(chunks);
1: 
1:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1: 
1:     List<Integer> surrogates = new ArrayList<>();
1:     columnDictionaryInfo
1:         .getIncrementalSurrogateKeyFromDictionary(byteValuesOfFilterMembers, surrogates);
1: 
1:     int expectedSize = 1;
1:     assertThat(surrogates.size(), is(equalTo(expectedSize)));
1: 
1:     List<Integer> expectedSurrogates = new ArrayList<>();
1:     expectedSurrogates.add(3);
1: 
1:     assertThat(surrogates, is(equalTo(expectedSurrogates)));
1:   }
1: 
1:   @Test public void testAddDictionaryChunkEmpty() {
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 1;
1:       }
1:     };
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     columnDictionaryInfo.dictionaryChunks = new CopyOnWriteArrayList<>();
1: 
1:     List<byte[]> newDictionaryChunk = Arrays.asList(new byte[] { 1, 2, 3, 4 });
1: 
1:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk);
1: 
1:     List<List<byte[]>> expectedDictionaryChunks = new CopyOnWriteArrayList<>();
1:     expectedDictionaryChunks.add(newDictionaryChunk);
1: 
1:     assertThat(columnDictionaryInfo.dictionaryChunks, is(equalTo(expectedDictionaryChunks)));
1:   }
1: 
1:   @Test public void testAddDictionaryChunkAppend() {
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 1;
1:       }
1:     };
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     columnDictionaryInfo.dictionaryChunks = new CopyOnWriteArrayList<>();
1: 
1:     List<byte[]> newDictionaryChunk1 = Arrays.asList(new byte[] { 1, 2, 3, 4 });
1: 
1:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk1);
1: 
1:     List<byte[]> newDictionaryChunk2 = Arrays.asList(new byte[] { 5, 6, 7, 8 });
1: 
1:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk2);
1: 
1:     List<List<byte[]>> expectedDictionaryChunks = new CopyOnWriteArrayList<>();
1:     expectedDictionaryChunks.add(newDictionaryChunk1);
1:     expectedDictionaryChunks.add(newDictionaryChunk2);
1: 
1:     assertThat(columnDictionaryInfo.dictionaryChunks, is(equalTo(expectedDictionaryChunks)));
1:   }
1: 
1:   @Test public void addDictionaryChunkWithHugeChunkSize() {
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 10;
1:       }
1:     };
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     columnDictionaryInfo.dictionaryChunks = new CopyOnWriteArrayList<>();
1: 
1:     List<byte[]> newDictionaryChunk1 = new ArrayList<>(Arrays.asList(new byte[] { 1, 2, 3, 4 }));
1: 
1:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk1);
1: 
1:     List<byte[]> newDictionaryChunk2 = new ArrayList<>(Arrays.asList(new byte[] { 5, 6, 7, 8 }));
1: 
1:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk2);
1: 
1:     List<List<byte[]>> expectedDictionaryChunks = new CopyOnWriteArrayList<>();
1:     expectedDictionaryChunks.add(newDictionaryChunk1);
1: 
1:     assertThat(columnDictionaryInfo.dictionaryChunks, is(equalTo(expectedDictionaryChunks)));
1:   }
1: 
1:   @Test public void addDictionaryChunkWithSplitChunks() {
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 2;
1:       }
1:     };
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     columnDictionaryInfo.dictionaryChunks = new CopyOnWriteArrayList<>();
1: 
1:     List<byte[]> newDictionaryChunk1 = new ArrayList<>(Arrays.asList(new byte[] { 1, 2, 3, 4 }));
1: 
1:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk1);
1: 
1:     List<byte[]> newDictionaryChunk2 =
1:         new ArrayList<>(Arrays.asList(new byte[] { 5, 6, 7 }, new byte[] { 8, 9, 10 }));
1: 
1:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk2);
1: 
1:     byte[][] expectedResult = {{ 1, 2, 3, 4 }, { 5, 6, 7 }, { 8, 9, 10 }};
1:     assertThat(columnDictionaryInfo.dictionaryChunks.get(0),
1:         hasItems(expectedResult[0], expectedResult[1]));
1:     assertThat(columnDictionaryInfo.dictionaryChunks.get(1), hasItems(expectedResult[2]));
1:   }
1: 
1:   @Test public void testGtSortedIndexWithMinimumSurrogateKey() {
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     columnDictionaryInfo.setSortReverseOrderIndex(Arrays.asList(1, 2, 3));
1: 
1:     final int result = columnDictionaryInfo.getSortedIndex(0);
1: 
1:     int expectedResult = -1;
1:     assertThat(result, is(equalTo(expectedResult)));
1:   }
1: 
1:   @Test public void testGtSortedIndexWithMaximumSurrogateKey() {
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     columnDictionaryInfo.setSortReverseOrderIndex(Arrays.asList(1, 2, 3));
1: 
1:     final int result = columnDictionaryInfo.getSortedIndex(4);
1: 
1:     int expectedResult = -1;
1:     assertThat(result, is(equalTo(expectedResult)));
1:   }
1: 
1:   @Test public void testGtSortedIndexWithSurrogateKey() {
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     columnDictionaryInfo.setSortReverseOrderIndex(Arrays.asList(1, 2, 3));
1: 
1:     final int result = columnDictionaryInfo.getSortedIndex(2);
1: 
1:     int expectedResult = 2;
1:     assertThat(result, is(equalTo(expectedResult)));
1:   }
1: 
1:   @Test public void testGetSizeOfLastDictionaryChunkWithDictionaryChunkZero() {
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     final int result = columnDictionaryInfo.getSizeOfLastDictionaryChunk();
1: 
1:     int expectedResult = 0;
1:     assertThat(result, is(equalTo(expectedResult)));
1:   }
1: 
1:   @Test public void testGetSizeOfLastDictionaryChunk() {
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     columnDictionaryInfo.dictionaryChunks = new CopyOnWriteArrayList<>();
1: 
1:     List<byte[]> newDictionaryChunk1 = new ArrayList<>(Arrays.asList(new byte[] { 1, 2, 3, 4 }));
1: 
1:     columnDictionaryInfo.addDictionaryChunk(newDictionaryChunk1);
1: 
1:     final int result = columnDictionaryInfo.getSizeOfLastDictionaryChunk();
1: 
1:     int expectedResult = 1;
1:     assertThat(result, is(equalTo(expectedResult)));
1:   }
1: 
1:   @Test public void testGetDictionaryValueFromSortedIndexWithMinimumSurrogateKey() {
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     columnDictionaryInfo.setSortReverseOrderIndex(Arrays.asList(1, 2, 3));
1: 
1:     final String result = columnDictionaryInfo.getDictionaryValueFromSortedIndex(0);
1: 
1:     assertThat(result, is(nullValue()));
1:   }
1: 
1:   @Test public void testGetDictionaryValueFromSortedIndexWithMaximumSurrogateKey() {
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     columnDictionaryInfo.setSortReverseOrderIndex(Arrays.asList(1, 2, 3));
1: 
1:     final String result = columnDictionaryInfo.getDictionaryValueFromSortedIndex(4);
1: 
1:     assertThat(result, is(nullValue()));
1:   }
1: 
1:   @Test public void testGetDictionaryValueFromSortedIndex() {
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     columnDictionaryInfo.setSortReverseOrderIndex(Arrays.asList(0, 1, 2, 3));
1: 
1:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2, 3));
1: 
1:     final String result = columnDictionaryInfo.getDictionaryValueFromSortedIndex(1);
1: 
1:     assertThat(result, is(nullValue()));
1:   }
1: 
1:   @Test
1:   public void testGetSurrogateKey() {
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.STRING);
1: 
1:     byte[] value = convertListElementsIntoByteArray(Arrays.asList("china")).get(0);
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 10000;
1:       }
1:     };
1: 
1:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2, 3, 4, 5, 6, 7));
1: 
1:     List<byte[]> chunks = Arrays.asList(new byte[] { 64, 78, 85, 35, 76, 76, 36, 33 },
1:         new byte[] { 98, 114, 97, 122, 105, 108 }, new byte[] { 99, 97, 110, 97, 100, 97 },
1:         new byte[] { 99, 104, 105, 110, 97 }, new byte[] { 102, 114, 97, 110, 99, 101 },
1:         new byte[] { 117, 107 }, new byte[] { 117, 117, 97 });
1: 
1:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:     dictionaryChunks.add(chunks);
1: 
1:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1: 
1:     int result = columnDictionaryInfo.getSurrogateKey(value);
1: 
1:     int expectedResult = 4;
1:     assertThat(result, is(equalTo(expectedResult)));
1:   }
1: 
1:   @Test
1:   public void testGetSurrogateKeyWithIntType() {
1: 
0:     columnDictionaryInfo = new ColumnDictionaryInfo(DataType.INT);
1: 
1:     byte[] value = convertListElementsIntoByteArray(Arrays.asList("998")).get(0);
1: 
1:     new MockUp<CarbonUtil>() {
1: 
1:       @Mock public int getDictionaryChunkSize() {
1:         return 10000;
1:       }
1:     };
1: 
1:     columnDictionaryInfo.setSortOrderIndex(Arrays.asList(1, 2));
1: 
1:     List<byte[]> chunks = Arrays.asList(new byte[] { 57, 57, 56 });
1: 
1:     List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:     dictionaryChunks.add(chunks);
1: 
1:     columnDictionaryInfo.dictionaryChunks = dictionaryChunks;
1: 
1:     int result = columnDictionaryInfo.getSurrogateKey(value);
1: 
1:     int expectedResult = 1;
1:     assertThat(result, is(equalTo(expectedResult)));
1:   }
1: 
1:   private List<byte[]> convertListElementsIntoByteArray(List<String> stringList) {
1:     List<byte[]> byteValuesOfFilterMembers = new ArrayList<>(stringList.size());
1:     for (int i = 0; i < stringList.size(); i++) {
1:       byte[] keyData =
1:           stringList.get(i).getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:       byteValuesOfFilterMembers.add(keyData);
1:     }
1:     return byteValuesOfFilterMembers;
1:   }
1: }
============================================================================