1:cc288ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cc288ff:  *
1:cc288ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cc288ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cc288ff:  */
1:cc288ff: package org.apache.carbondata.core.cache.dictionary;
1:cc288ff: 
1:cc288ff: import mockit.Mock;
1:cc288ff: import mockit.MockUp;
1:cc288ff: import org.junit.BeforeClass;
1:cc288ff: import org.junit.Test;
1:cc288ff: 
1:cc288ff: import java.util.Arrays;
1:cc288ff: import java.util.List;
1:cc288ff: 
1:cc288ff: import static junit.framework.TestCase.assertEquals;
1:cc288ff: 
1:cc288ff: public class ReverseDictionaryTest {
1:cc288ff: 
1:cc288ff:   private static ReverseDictionary reverseDictionary;
1:cc288ff: 
1:cc288ff:   @BeforeClass public static void setUp() throws Exception {
1:cc288ff:     ColumnReverseDictionaryInfo columnReverseDictionaryInfo = new ColumnReverseDictionaryInfo();
1:cc288ff:     reverseDictionary = new ReverseDictionary(columnReverseDictionaryInfo);
1:cc288ff:   }
1:cc288ff: 
1:cc288ff:   @Test public void testToGetSurrogateKey() {
1:cc288ff:     new MockUp<ColumnReverseDictionaryInfo>() {
1:cc288ff:       @SuppressWarnings("unused") @Mock public int getSurrogateKey(byte[] value) {
1:cc288ff:         return 123;
1:cc288ff:       }
1:cc288ff:     };
1:cc288ff:     int surrogateKey = reverseDictionary.getSurrogateKey("123".getBytes());
1:cc288ff:     int expectedResult = 123;
1:cc288ff:     assertEquals(surrogateKey, expectedResult);
1:cc288ff:   }
1:cc288ff: 
1:cc288ff:   @Test public void testToGetDictionaryValueForKey() {
1:cc288ff:     new MockUp<ColumnReverseDictionaryInfo>() {
1:cc288ff:       @SuppressWarnings("unused") @Mock public String getDictionaryValueForKey(int surrogateKey) {
1:cc288ff:         return "123";
1:cc288ff:       }
1:cc288ff:     };
1:cc288ff:     String dictionaryValue = reverseDictionary.getDictionaryValueForKey(123);
1:cc288ff:     String expectedResult = "123";
1:cc288ff:     assertEquals(dictionaryValue, expectedResult);
1:cc288ff:   }
1:cc288ff: 
1:cc288ff:   @Test public void testToGetSortedIndex() {
1:cc288ff:     new MockUp<ColumnReverseDictionaryInfo>() {
1:cc288ff:       @SuppressWarnings("unused") @Mock public int getSortedIndex(int surrogateKey) {
1:cc288ff:         return 1;
1:cc288ff:       }
1:cc288ff:     };
1:cc288ff:     int sortedIndex = reverseDictionary.getSortedIndex(123);
1:cc288ff:     int expectedResult = 1;
1:cc288ff:     assertEquals(sortedIndex, expectedResult);
1:cc288ff:   }
1:cc288ff: 
1:cc288ff:   @Test public void testToGetDictionaryValueFromSortedIndex() {
1:cc288ff:     new MockUp<ColumnReverseDictionaryInfo>() {
1:cc288ff:       @SuppressWarnings("unused") @Mock
1:cc288ff:       public String getDictionaryValueFromSortedIndex(int sortedIndex) {
1:cc288ff:         return "A";
1:cc288ff:       }
1:cc288ff:     };
1:cc288ff:     String dictionaryValue = reverseDictionary.getDictionaryValueFromSortedIndex(123);
1:cc288ff:     String expectedResult = "A";
1:cc288ff:     assertEquals(dictionaryValue, expectedResult);
1:cc288ff:   }
1:cc288ff: 
1:cc288ff:   @Test public void testToGetDictionaryChunks() {
1:cc288ff:     new MockUp<ColumnReverseDictionaryInfo>() {
1:cc288ff:       @SuppressWarnings("unused") @Mock public DictionaryChunksWrapper getDictionaryChunks() {
1:cc288ff:         List<List<byte[]>> dictionaryChunks =
1:cc288ff:             Arrays.asList(Arrays.asList("123".getBytes()), Arrays.asList("321".getBytes()));
1:cc288ff:         return new DictionaryChunksWrapper(dictionaryChunks);
1:cc288ff:       }
1:cc288ff:     };
1:cc288ff:     DictionaryChunksWrapper dictionaryValue = reverseDictionary.getDictionaryChunks();
1:cc288ff:     int expectedResult = 2;
1:cc288ff:     assertEquals(dictionaryValue.getSize(), expectedResult);
1:cc288ff:   }
1:cc288ff: 
1:cc288ff: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:kunal642
-------------------------------------------------------------------------------
commit:cc288ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import mockit.Mock;
1: import mockit.MockUp;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import static junit.framework.TestCase.assertEquals;
1: 
1: public class ReverseDictionaryTest {
1: 
1:   private static ReverseDictionary reverseDictionary;
1: 
1:   @BeforeClass public static void setUp() throws Exception {
1:     ColumnReverseDictionaryInfo columnReverseDictionaryInfo = new ColumnReverseDictionaryInfo();
1:     reverseDictionary = new ReverseDictionary(columnReverseDictionaryInfo);
1:   }
1: 
1:   @Test public void testToGetSurrogateKey() {
1:     new MockUp<ColumnReverseDictionaryInfo>() {
1:       @SuppressWarnings("unused") @Mock public int getSurrogateKey(byte[] value) {
1:         return 123;
1:       }
1:     };
1:     int surrogateKey = reverseDictionary.getSurrogateKey("123".getBytes());
1:     int expectedResult = 123;
1:     assertEquals(surrogateKey, expectedResult);
1:   }
1: 
1:   @Test public void testToGetDictionaryValueForKey() {
1:     new MockUp<ColumnReverseDictionaryInfo>() {
1:       @SuppressWarnings("unused") @Mock public String getDictionaryValueForKey(int surrogateKey) {
1:         return "123";
1:       }
1:     };
1:     String dictionaryValue = reverseDictionary.getDictionaryValueForKey(123);
1:     String expectedResult = "123";
1:     assertEquals(dictionaryValue, expectedResult);
1:   }
1: 
1:   @Test public void testToGetSortedIndex() {
1:     new MockUp<ColumnReverseDictionaryInfo>() {
1:       @SuppressWarnings("unused") @Mock public int getSortedIndex(int surrogateKey) {
1:         return 1;
1:       }
1:     };
1:     int sortedIndex = reverseDictionary.getSortedIndex(123);
1:     int expectedResult = 1;
1:     assertEquals(sortedIndex, expectedResult);
1:   }
1: 
1:   @Test public void testToGetDictionaryValueFromSortedIndex() {
1:     new MockUp<ColumnReverseDictionaryInfo>() {
1:       @SuppressWarnings("unused") @Mock
1:       public String getDictionaryValueFromSortedIndex(int sortedIndex) {
1:         return "A";
1:       }
1:     };
1:     String dictionaryValue = reverseDictionary.getDictionaryValueFromSortedIndex(123);
1:     String expectedResult = "A";
1:     assertEquals(dictionaryValue, expectedResult);
1:   }
1: 
1:   @Test public void testToGetDictionaryChunks() {
1:     new MockUp<ColumnReverseDictionaryInfo>() {
1:       @SuppressWarnings("unused") @Mock public DictionaryChunksWrapper getDictionaryChunks() {
1:         List<List<byte[]>> dictionaryChunks =
1:             Arrays.asList(Arrays.asList("123".getBytes()), Arrays.asList("321".getBytes()));
1:         return new DictionaryChunksWrapper(dictionaryChunks);
1:       }
1:     };
1:     DictionaryChunksWrapper dictionaryValue = reverseDictionary.getDictionaryChunks();
1:     int expectedResult = 2;
1:     assertEquals(dictionaryValue.getSize(), expectedResult);
1:   }
1: 
1: }
============================================================================