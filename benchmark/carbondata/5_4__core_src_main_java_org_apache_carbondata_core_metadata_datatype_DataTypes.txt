1:956833e: /*
1:956833e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:956833e:  * contributor license agreements.  See the NOTICE file distributed with
1:956833e:  * this work for additional information regarding copyright ownership.
1:956833e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:956833e:  * (the "License"); you may not use this file except in compliance with
1:956833e:  * the License.  You may obtain a copy of the License at
1:956833e:  *
1:956833e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:956833e:  *
1:956833e:  * Unless required by applicable law or agreed to in writing, software
1:956833e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:956833e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:956833e:  * See the License for the specific language governing permissions and
1:956833e:  * limitations under the License.
1:956833e:  */
2:956833e: 
1:956833e: package org.apache.carbondata.core.metadata.datatype;
1:956833e: 
1:933e30c: import java.util.ArrayList;
1:933e30c: import java.util.List;
1:933e30c: 
1:956833e: /**
1:956833e:  * Holds all singleton object for all data type used in carbon
1:956833e:  */
1:956833e: public class DataTypes {
1:956833e: 
1:956833e:   // singleton for each data type
1:956833e:   public static final DataType STRING = StringType.STRING;
1:956833e:   public static final DataType DATE = DateType.DATE;
1:956833e:   public static final DataType TIMESTAMP = TimestampType.TIMESTAMP;
1:956833e:   public static final DataType BOOLEAN = BooleanType.BOOLEAN;
1:956833e:   public static final DataType SHORT = ShortType.SHORT;
1:956833e:   public static final DataType INT = IntType.INT;
1:956833e:   public static final DataType FLOAT = FloatType.FLOAT;
1:956833e:   public static final DataType LONG = LongType.LONG;
1:956833e:   public static final DataType DOUBLE = DoubleType.DOUBLE;
1:956833e:   public static final DataType NULL = NullType.NULL;
1:956833e:   public static final DataType BYTE = ByteType.BYTE;
1:956833e: 
1:956833e:   // internal use only, for variable length data type
1:956833e:   public static final DataType BYTE_ARRAY = ByteArrayType.BYTE_ARRAY;
1:956833e: 
1:956833e:   // internal use only, for value compression from integer/long to 3 bytes value
1:956833e:   public static final DataType SHORT_INT = ShortIntType.SHORT_INT;
1:956833e: 
1:956833e:   // Only for internal use for backward compatability. It is only used for V1 version
1:956833e:   public static final DataType LEGACY_LONG = LegacyLongType.LEGACY_LONG;
1:956833e: 
1:dc53dee:   public static final DataType VARCHAR = VarcharType.VARCHAR;
1:dc53dee: 
1:933e30c:   // these IDs are used within this package only
1:933e30c:   static final int STRING_TYPE_ID = 0;
1:933e30c:   static final int DATE_TYPE_ID = 1;
1:933e30c:   static final int TIMESTAMP_TYPE_ID = 2;
1:933e30c:   static final int BOOLEAN_TYPE_ID = 3;
1:933e30c:   static final int SHORT_TYPE_ID = 4;
1:933e30c:   static final int INT_TYPE_ID = 5;
1:933e30c:   static final int FLOAT_TYPE_ID = 6;
1:933e30c:   static final int LONG_TYPE_ID = 7;
1:933e30c:   static final int DOUBLE_TYPE_ID = 8;
1:933e30c:   static final int NULL_TYPE_ID = 9;
1:03ddcc8:   static final int BYTE_TYPE_ID = 14;
1:03ddcc8:   static final int BYTE_ARRAY_TYPE_ID = 15;
1:03ddcc8:   static final int SHORT_INT_TYPE_ID = 16;
1:03ddcc8:   static final int LEGACY_LONG_TYPE_ID = 17;
1:03ddcc8:   static final int DECIMAL_TYPE_ID = 10;
1:3202cf5:   public static final int ARRAY_TYPE_ID = 11;
1:3202cf5:   public static final int STRUCT_TYPE_ID = 12;
1:3202cf5:   public static final int MAP_TYPE_ID = 13;
1:dc53dee:   public static final int VARCHAR_TYPE_ID = 18;
1:956833e: 
1:956833e:   /**
1:956833e:    * create a DataType instance from uniqueId of the DataType
1:956833e:    */
1:956833e:   public static DataType valueOf(int id) {
1:956833e:     if (id == STRING.getId()) {
1:956833e:       return STRING;
1:956833e:     } else if (id == DATE.getId()) {
1:956833e:       return DATE;
1:956833e:     } else if (id == TIMESTAMP.getId()) {
1:956833e:       return TIMESTAMP;
1:956833e:     } else if (id == BOOLEAN.getId()) {
1:956833e:       return BOOLEAN;
1:956833e:     } else if (id == BYTE.getId()) {
1:956833e:       return BYTE;
1:956833e:     } else if (id == SHORT.getId()) {
1:956833e:       return SHORT;
1:956833e:     } else if (id == SHORT_INT.getId()) {
1:956833e:       return SHORT_INT;
1:956833e:     } else if (id == INT.getId()) {
1:956833e:       return INT;
1:956833e:     } else if (id == LONG.getId()) {
1:956833e:       return LONG;
1:956833e:     } else if (id == LEGACY_LONG.getId()) {
1:956833e:       return LEGACY_LONG;
1:956833e:     } else if (id == FLOAT.getId()) {
1:956833e:       return FLOAT;
1:956833e:     } else if (id == DOUBLE.getId()) {
1:956833e:       return DOUBLE;
1:956833e:     } else if (id == NULL.getId()) {
1:956833e:       return NULL;
1:f209e8e:     } else if (id == DECIMAL_TYPE_ID) {
1:f209e8e:       return createDefaultDecimalType();
1:933e30c:     } else if (id == ARRAY_TYPE_ID) {
1:933e30c:       return createDefaultArrayType();
1:933e30c:     } else if (id == STRUCT_TYPE_ID) {
1:933e30c:       return createDefaultStructType();
1:933e30c:     } else if (id == MAP_TYPE_ID) {
1:933e30c:       return createDefaultMapType();
1:956833e:     } else if (id == BYTE_ARRAY.getId()) {
1:956833e:       return BYTE_ARRAY;
1:dc53dee:     } else if (id == VARCHAR.getId()) {
1:dc53dee:       return VARCHAR;
1:956833e:     } else {
1:956833e:       throw new RuntimeException("create DataType with invalid id: " + id);
1:956833e:     }
1:956833e:   }
1:956833e: 
1:f209e8e:   /**
1:f209e8e:    * create a decimal type object with specified precision and scale
1:f209e8e:    */
1:f209e8e:   public static DecimalType createDecimalType(int precision, int scale) {
1:f209e8e:     return new DecimalType(precision, scale);
1:f209e8e:   }
1:f209e8e: 
1:f209e8e:   /**
1:f209e8e:    * create a decimal type object with default precision = 10 and scale = 2
1:f209e8e:    */
1:f209e8e:   public static DecimalType createDefaultDecimalType() {
1:f209e8e:     return new DecimalType(10, 2);
1:f209e8e:   }
1:f209e8e: 
1:f209e8e:   public static boolean isDecimal(DataType dataType) {
1:f209e8e:     return dataType.getId() == DECIMAL_TYPE_ID;
1:f209e8e:   }
1:f209e8e: 
1:933e30c:   /**
1:933e30c:    * create array type with specified element type
1:933e30c:    */
1:933e30c:   public static ArrayType createArrayType(DataType elementType) {
1:933e30c:     return new ArrayType(elementType);
1:933e30c:   }
1:933e30c: 
1:933e30c:   /**
1:933e30c:    * create a array type object with no child
1:933e30c:    */
1:933e30c:   public static ArrayType createDefaultArrayType() {
1:933e30c:     return new ArrayType(STRING);
1:933e30c:   }
1:933e30c: 
1:933e30c:   public static boolean isArrayType(DataType dataType) {
1:933e30c:     return dataType.getId() == ARRAY_TYPE_ID;
1:933e30c:   }
1:933e30c: 
1:933e30c:   /**
1:933e30c:    * create struct type with specified fields
1:933e30c:    */
1:933e30c:   public static StructType createStructType(List<StructField> fields) {
1:933e30c:     return new StructType(fields);
1:933e30c:   }
1:933e30c: 
1:933e30c:   /**
1:933e30c:    * create a struct type object with no field
1:933e30c:    */
1:933e30c:   public static StructType createDefaultStructType() {
1:933e30c:     return new StructType(new ArrayList<StructField>());
1:933e30c:   }
1:933e30c: 
1:933e30c:   public static boolean isStructType(DataType dataType) {
1:933e30c:     return dataType.getId() == STRUCT_TYPE_ID;
1:933e30c:   }
1:933e30c: 
1:933e30c:   /**
1:933e30c:    * create map type with specified key type and value type
1:933e30c:    */
1:933e30c:   public static MapType createMapType(DataType keyType, DataType valueType) {
1:933e30c:     return new MapType(keyType, valueType);
1:933e30c:   }
1:933e30c: 
1:933e30c:   /**
1:933e30c:    * create a map type object with no child
1:933e30c:    */
1:933e30c:   public static MapType createDefaultMapType() {
1:933e30c:     return new MapType(STRING, STRING);
1:933e30c:   }
1:933e30c: 
1:933e30c:   public static boolean isMapType(DataType dataType) {
1:933e30c:     return dataType.getId() == MAP_TYPE_ID;
1:933e30c:   }
1:933e30c: 
1:956833e: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1:   public static final DataType VARCHAR = VarcharType.VARCHAR;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public static final int VARCHAR_TYPE_ID = 18;
/////////////////////////////////////////////////////////////////////////
1:     } else if (id == VARCHAR.getId()) {
1:       return VARCHAR;
author:sounakr
-------------------------------------------------------------------------------
commit:3202cf5
/////////////////////////////////////////////////////////////////////////
1:   public static final int ARRAY_TYPE_ID = 11;
1:   public static final int STRUCT_TYPE_ID = 12;
1:   public static final int MAP_TYPE_ID = 13;
author:akashrn5
-------------------------------------------------------------------------------
commit:03ddcc8
/////////////////////////////////////////////////////////////////////////
1:   static final int BYTE_TYPE_ID = 14;
1:   static final int BYTE_ARRAY_TYPE_ID = 15;
1:   static final int SHORT_INT_TYPE_ID = 16;
1:   static final int LEGACY_LONG_TYPE_ID = 17;
1:   static final int DECIMAL_TYPE_ID = 10;
0:   static final int ARRAY_TYPE_ID = 11;
0:   static final int STRUCT_TYPE_ID = 12;
0:   static final int MAP_TYPE_ID = 13;
author:Jacky Li
-------------------------------------------------------------------------------
commit:933e30c
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
1:   // these IDs are used within this package only
1:   static final int STRING_TYPE_ID = 0;
1:   static final int DATE_TYPE_ID = 1;
1:   static final int TIMESTAMP_TYPE_ID = 2;
1:   static final int BOOLEAN_TYPE_ID = 3;
1:   static final int SHORT_TYPE_ID = 4;
1:   static final int INT_TYPE_ID = 5;
1:   static final int FLOAT_TYPE_ID = 6;
1:   static final int LONG_TYPE_ID = 7;
1:   static final int DOUBLE_TYPE_ID = 8;
1:   static final int NULL_TYPE_ID = 9;
0:   static final int BYTE_TYPE_ID = 10;
0:   static final int BYTE_ARRAY_TYPE_ID = 11;
0:   static final int SHORT_INT_TYPE_ID = 12;
0:   static final int LEGACY_LONG_TYPE_ID = 13;
0:   static final int DECIMAL_TYPE_ID = 20;
0:   static final int ARRAY_TYPE_ID = 21;
0:   static final int STRUCT_TYPE_ID = 22;
0:   static final int MAP_TYPE_ID = 23;
/////////////////////////////////////////////////////////////////////////
1:     } else if (id == ARRAY_TYPE_ID) {
1:       return createDefaultArrayType();
1:     } else if (id == STRUCT_TYPE_ID) {
1:       return createDefaultStructType();
1:     } else if (id == MAP_TYPE_ID) {
1:       return createDefaultMapType();
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * create array type with specified element type
1:    */
1:   public static ArrayType createArrayType(DataType elementType) {
1:     return new ArrayType(elementType);
1:   }
1: 
1:   /**
1:    * create a array type object with no child
1:    */
1:   public static ArrayType createDefaultArrayType() {
1:     return new ArrayType(STRING);
1:   }
1: 
1:   public static boolean isArrayType(DataType dataType) {
1:     return dataType.getId() == ARRAY_TYPE_ID;
1:   }
1: 
1:   /**
1:    * create struct type with specified fields
1:    */
1:   public static StructType createStructType(List<StructField> fields) {
1:     return new StructType(fields);
1:   }
1: 
1:   /**
1:    * create a struct type object with no field
1:    */
1:   public static StructType createDefaultStructType() {
1:     return new StructType(new ArrayList<StructField>());
1:   }
1: 
1:   public static boolean isStructType(DataType dataType) {
1:     return dataType.getId() == STRUCT_TYPE_ID;
1:   }
1: 
1:   /**
1:    * create map type with specified key type and value type
1:    */
1:   public static MapType createMapType(DataType keyType, DataType valueType) {
1:     return new MapType(keyType, valueType);
1:   }
1: 
1:   /**
1:    * create a map type object with no child
1:    */
1:   public static MapType createDefaultMapType() {
1:     return new MapType(STRING, STRING);
1:   }
1: 
1:   public static boolean isMapType(DataType dataType) {
1:     return dataType.getId() == MAP_TYPE_ID;
1:   }
1: 
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     } else if (id == DECIMAL_TYPE_ID) {
1:       return createDefaultDecimalType();
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * create a decimal type object with specified precision and scale
1:    */
1:   public static DecimalType createDecimalType(int precision, int scale) {
1:     return new DecimalType(precision, scale);
1:   }
1: 
1:   /**
1:    * create a decimal type object with default precision = 10 and scale = 2
1:    */
1:   public static DecimalType createDefaultDecimalType() {
1:     return new DecimalType(10, 2);
1:   }
1: 
1:   public static boolean isDecimal(DataType dataType) {
1:     return dataType.getId() == DECIMAL_TYPE_ID;
1:   }
1: 
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.datatype;
1: 
1: /**
1:  * Holds all singleton object for all data type used in carbon
1:  */
1: public class DataTypes {
1: 
1:   // singleton for each data type
1:   public static final DataType STRING = StringType.STRING;
1:   public static final DataType DATE = DateType.DATE;
1:   public static final DataType TIMESTAMP = TimestampType.TIMESTAMP;
1:   public static final DataType BOOLEAN = BooleanType.BOOLEAN;
1:   public static final DataType SHORT = ShortType.SHORT;
1:   public static final DataType INT = IntType.INT;
1:   public static final DataType FLOAT = FloatType.FLOAT;
1:   public static final DataType LONG = LongType.LONG;
1:   public static final DataType DOUBLE = DoubleType.DOUBLE;
1:   public static final DataType NULL = NullType.NULL;
1:   public static final DataType BYTE = ByteType.BYTE;
1: 
1:   // internal use only, for variable length data type
1:   public static final DataType BYTE_ARRAY = ByteArrayType.BYTE_ARRAY;
1: 
1:   // internal use only, for value compression from integer/long to 3 bytes value
1:   public static final DataType SHORT_INT = ShortIntType.SHORT_INT;
1: 
1:   // Only for internal use for backward compatability. It is only used for V1 version
1:   public static final DataType LEGACY_LONG = LegacyLongType.LEGACY_LONG;
1: 
0:   public static final DataType DECIMAL = DecimalType.DECIMAL;
0:   public static final DataType ARRAY = ArrayType.ARRAY;
0:   public static final DataType STRUCT = StructType.STRUCT;
0:   public static final DataType MAP = MapType.MAP;
1: 
0:   // these IDs are used within this package only
0:   static final int STRING_TYPE_ID = 0;
0:   static final int DATE_TYPE_ID = 1;
0:   static final int TIMESTAMP_TYPE_ID = 2;
0:   static final int BOOLEAN_TYPE_ID = 3;
0:   static final int SHORT_TYPE_ID = 4;
0:   static final int INT_TYPE_ID = 5;
0:   static final int FLOAT_TYPE_ID = 6;
0:   static final int LONG_TYPE_ID = 7;
0:   static final int DOUBLE_TYPE_ID = 8;
0:   static final int NULL_TYPE_ID = 9;
0:   static final int BYTE_TYPE_ID = 10;
0:   static final int BYTE_ARRAY_TYPE_ID = 11;
0:   static final int SHORT_INT_TYPE_ID = 12;
0:   static final int LEGACY_LONG_TYPE_ID = 13;
0:   static final int DECIMAL_TYPE_ID = 20;
0:   static final int ARRAY_TYPE_ID = 21;
0:   static final int STRUCT_TYPE_ID = 22;
0:   static final int MAP_TYPE_ID = 23;
1: 
1:   /**
1:    * create a DataType instance from uniqueId of the DataType
1:    */
1:   public static DataType valueOf(int id) {
1:     if (id == STRING.getId()) {
1:       return STRING;
1:     } else if (id == DATE.getId()) {
1:       return DATE;
1:     } else if (id == TIMESTAMP.getId()) {
1:       return TIMESTAMP;
1:     } else if (id == BOOLEAN.getId()) {
1:       return BOOLEAN;
1:     } else if (id == BYTE.getId()) {
1:       return BYTE;
1:     } else if (id == SHORT.getId()) {
1:       return SHORT;
1:     } else if (id == SHORT_INT.getId()) {
1:       return SHORT_INT;
1:     } else if (id == INT.getId()) {
1:       return INT;
1:     } else if (id == LONG.getId()) {
1:       return LONG;
1:     } else if (id == LEGACY_LONG.getId()) {
1:       return LEGACY_LONG;
1:     } else if (id == FLOAT.getId()) {
1:       return FLOAT;
1:     } else if (id == DOUBLE.getId()) {
1:       return DOUBLE;
1:     } else if (id == NULL.getId()) {
1:       return NULL;
0:     } else if (id == DECIMAL.getId()) {
0:       return DECIMAL;
0:     } else if (id == ARRAY.getId()) {
0:       return ARRAY;
0:     } else if (id == STRUCT.getId()) {
0:       return STRUCT;
0:     } else if (id == MAP.getId()) {
0:       return MAP;
1:     } else if (id == BYTE_ARRAY.getId()) {
1:       return BYTE_ARRAY;
1:     } else {
1:       throw new RuntimeException("create DataType with invalid id: " + id);
1:     }
1:   }
1: 
1: }
author:QiangCai
-------------------------------------------------------------------------------
commit:d7393da
/////////////////////////////////////////////////////////////////////////
0:   public static final int STRING_TYPE_ID = 0;
0:   public static final int DATE_TYPE_ID = 1;
0:   public static final int TIMESTAMP_TYPE_ID = 2;
0:   public static final int BOOLEAN_TYPE_ID = 3;
0:   public static final int SHORT_TYPE_ID = 4;
0:   public static final int INT_TYPE_ID = 5;
0:   public static final int FLOAT_TYPE_ID = 6;
0:   public static final int LONG_TYPE_ID = 7;
0:   public static final int DOUBLE_TYPE_ID = 8;
0:   public static final int NULL_TYPE_ID = 9;
0:   public static final int BYTE_TYPE_ID = 10;
0:   public static final int BYTE_ARRAY_TYPE_ID = 11;
0:   public static final int SHORT_INT_TYPE_ID = 12;
0:   public static final int LEGACY_LONG_TYPE_ID = 13;
0:   public static final int DECIMAL_TYPE_ID = 20;
0:   public static final int ARRAY_TYPE_ID = 21;
0:   public static final int STRUCT_TYPE_ID = 22;
0:   public static final int MAP_TYPE_ID = 23;
============================================================================