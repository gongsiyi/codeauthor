1:ec2d742: /*
1:ec2d742:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ec2d742:  * contributor license agreements.  See the NOTICE file distributed with
1:ec2d742:  * this work for additional information regarding copyright ownership.
1:ec2d742:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ec2d742:  * (the "License"); you may not use this file except in compliance with
1:ec2d742:  * the License.  You may obtain a copy of the License at
1:ec2d742:  *
1:ec2d742:  *    http://www.apache.org/licenses/LICENSE-2.0
1:ec2d742:  *
1:ec2d742:  * Unless required by applicable law or agreed to in writing, software
1:ec2d742:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ec2d742:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ec2d742:  * See the License for the specific language governing permissions and
1:ec2d742:  * limitations under the License.
1:ec2d742:  */
1:ec2d742: package org.apache.carbondata.hadoop;
1:ec2d742: 
1:ec2d742: import org.apache.carbondata.core.stats.QueryStatistic;
1:ec2d742: import org.apache.carbondata.core.stats.QueryStatisticsConstants;
1:ec2d742: import org.apache.carbondata.core.stats.QueryStatisticsRecorder;
1:ec2d742: 
1:ec2d742: import org.apache.hadoop.mapreduce.RecordReader;
1:ec2d742: 
1:ec2d742: /**
1:ec2d742:  * This class will have all the common methods for vector and row based reader
1:ec2d742:  */
1:ec2d742: public abstract class AbstractRecordReader<T> extends RecordReader<Void, T> {
1:ec2d742: 
1:ec2d742:   protected int rowCount = 0;
1:ec2d742: 
1:ec2d742:   /**
1:ec2d742:    * This method will log query result count and querytime
1:ec2d742:    * @param recordCount
1:ec2d742:    * @param recorder
1:ec2d742:    */
1:ec2d742:   public void logStatistics(int recordCount, QueryStatisticsRecorder recorder) {
1:ec2d742:     // result size
1:4a2d799:     if (null != recorder) {
1:4a2d799:       QueryStatistic queryStatistic = new QueryStatistic();
1:4a2d799:       queryStatistic.addCountStatistic(QueryStatisticsConstants.RESULT_SIZE, recordCount);
1:4a2d799:       recorder.recordStatistics(queryStatistic);
1:4a2d799:     }
1:ec2d742:   }
1:ec2d742: }
============================================================================
author:m00258959
-------------------------------------------------------------------------------
commit:4a2d799
/////////////////////////////////////////////////////////////////////////
1:     if (null != recorder) {
1:       QueryStatistic queryStatistic = new QueryStatistic();
1:       queryStatistic.addCountStatistic(QueryStatisticsConstants.RESULT_SIZE, recordCount);
1:       recorder.recordStatistics(queryStatistic);
1:     }
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:887310f
/////////////////////////////////////////////////////////////////////////
author:nareshpr
-------------------------------------------------------------------------------
commit:ec2d742
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.hadoop;
1: 
1: import org.apache.carbondata.core.stats.QueryStatistic;
1: import org.apache.carbondata.core.stats.QueryStatisticsConstants;
1: import org.apache.carbondata.core.stats.QueryStatisticsRecorder;
1: 
1: import org.apache.hadoop.mapreduce.RecordReader;
1: 
1: /**
1:  * This class will have all the common methods for vector and row based reader
1:  */
1: public abstract class AbstractRecordReader<T> extends RecordReader<Void, T> {
1: 
1:   protected int rowCount = 0;
1: 
1:   /**
1:    * This method will log query result count and querytime
1:    * @param recordCount
1:    * @param recorder
1:    */
1:   public void logStatistics(int recordCount, QueryStatisticsRecorder recorder) {
1:     // result size
0:     QueryStatistic queryStatistic = new QueryStatistic();
0:     queryStatistic.addCountStatistic(QueryStatisticsConstants.RESULT_SIZE, recordCount);
0:     recorder.recordStatistics(queryStatistic);
0:     // print executor query statistics for each task_id
0:     recorder.logStatisticsAsTableExecutor();
1:   }
1: }
============================================================================