1:531ecdf: /*
1:531ecdf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:531ecdf:  * contributor license agreements.  See the NOTICE file distributed with
1:531ecdf:  * this work for additional information regarding copyright ownership.
1:531ecdf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:531ecdf:  * (the "License"); you may not use this file except in compliance with
1:531ecdf:  * the License.  You may obtain a copy of the License at
1:531ecdf:  *
1:531ecdf:  *    http://www.apache.org/licenses/LICENSE-2.0
1:531ecdf:  *
1:531ecdf:  * Unless required by applicable law or agreed to in writing, software
1:531ecdf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:531ecdf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:531ecdf:  * See the License for the specific language governing permissions and
1:531ecdf:  * limitations under the License.
1:531ecdf:  */
1:531ecdf: 
1:531ecdf: package org.apache.carbondata.core.indexstore;
1:531ecdf: 
1:531ecdf: import java.io.Serializable;
1:531ecdf: import java.util.List;
1:531ecdf: 
1:531ecdf: import org.apache.carbondata.core.cache.Cacheable;
1:54dcd8d: import org.apache.carbondata.core.datamap.dev.DataMap;
1:6118711: import org.apache.carbondata.core.indexstore.blockletindex.BlockDataMap;
1:531ecdf: 
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:8f1a029: 
1:531ecdf: /**
1:531ecdf:  * A cacheable wrapper of datamaps
1:531ecdf:  */
1:531ecdf: public class BlockletDataMapIndexWrapper implements Cacheable, Serializable {
1:531ecdf: 
1:8f1a029:   private static final long serialVersionUID = -2859075086955465810L;
1:8f1a029: 
1:6118711:   private List<BlockDataMap> dataMaps;
1:531ecdf: 
1:e580d64:   private String segmentId;
1:e580d64: 
1:8f1a029:   private transient Configuration configuration;
1:8f1a029: 
1:16ed99a:   // size of the wrapper. basically the total size of the datamaps this wrapper is holding
1:16ed99a:   private long wrapperSize;
1:16ed99a: 
1:8f1a029:   public BlockletDataMapIndexWrapper(String segmentId,List<BlockDataMap> dataMaps, Configuration
1:8f1a029:       configuration) {
1:8f1a029:     this.configuration = configuration;
1:531ecdf:     this.dataMaps = dataMaps;
1:16ed99a:     this.wrapperSize = 0L;
1:e580d64:     this.segmentId = segmentId;
1:16ed99a:     // add the size of each and every datamap in this wrapper
1:6118711:     for (BlockDataMap dataMap : dataMaps) {
1:16ed99a:       this.wrapperSize += dataMap.getMemorySize();
1:16ed99a:     }
1:531ecdf:   }
1:531ecdf: 
1:531ecdf:   @Override public long getFileTimeStamp() {
2:531ecdf:     return 0;
1:531ecdf:   }
1:531ecdf: 
1:531ecdf:   @Override public int getAccessCount() {
1:531ecdf:     return 0;
1:531ecdf:   }
1:531ecdf: 
1:531ecdf:   @Override public long getMemorySize() {
1:16ed99a:     return wrapperSize;
1:531ecdf:   }
1:531ecdf: 
1:54dcd8d:   @Override public void invalidate() {
1:54dcd8d:     for (DataMap dataMap : dataMaps) {
1:54dcd8d:       dataMap.clear();
1:54dcd8d:     }
1:54dcd8d:     dataMaps = null;
1:54dcd8d:   }
1:54dcd8d: 
1:6118711:   public List<BlockDataMap> getDataMaps() {
1:531ecdf:     return dataMaps;
1:531ecdf:   }
1:e580d64: 
1:e580d64:   public String getSegmentId() {
1:e580d64:     return segmentId;
1:e580d64:   }
1:8f1a029: 
1:8f1a029:   public Configuration getConfiguration() {
1:8f1a029:     return configuration;
1:8f1a029:   }
1:531ecdf: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
1: 
1:   private static final long serialVersionUID = -2859075086955465810L;
1: 
1:   private transient Configuration configuration;
1: 
1:   public BlockletDataMapIndexWrapper(String segmentId,List<BlockDataMap> dataMaps, Configuration
1:       configuration) {
1:     this.configuration = configuration;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public Configuration getConfiguration() {
1:     return configuration;
1:   }
author:manishgupta88
-------------------------------------------------------------------------------
commit:54dcd8d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.dev.DataMap;
/////////////////////////////////////////////////////////////////////////
1:   @Override public void invalidate() {
1:     for (DataMap dataMap : dataMaps) {
1:       dataMap.clear();
1:     }
1:     dataMaps = null;
1:   }
1: 
commit:6118711
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.indexstore.blockletindex.BlockDataMap;
1:   private List<BlockDataMap> dataMaps;
0:   public BlockletDataMapIndexWrapper(List<BlockDataMap> dataMaps) {
1:     for (BlockDataMap dataMap : dataMaps) {
/////////////////////////////////////////////////////////////////////////
1:   public List<BlockDataMap> getDataMaps() {
author:rahul
-------------------------------------------------------------------------------
commit:e580d64
/////////////////////////////////////////////////////////////////////////
1:   private String segmentId;
1: 
0:   public BlockletDataMapIndexWrapper(String segmentId,List<BlockDataMap> dataMaps) {
1:     this.segmentId = segmentId;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public String getSegmentId() {
1:     return segmentId;
1:   }
author:dhatchayani
-------------------------------------------------------------------------------
commit:16ed99a
/////////////////////////////////////////////////////////////////////////
1:   // size of the wrapper. basically the total size of the datamaps this wrapper is holding
1:   private long wrapperSize;
1: 
1:     this.wrapperSize = 0L;
1:     // add the size of each and every datamap in this wrapper
0:     for (BlockletDataMap dataMap : dataMaps) {
1:       this.wrapperSize += dataMap.getMemorySize();
1:     }
/////////////////////////////////////////////////////////////////////////
1:     return wrapperSize;
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.indexstore;
1: 
1: import java.io.Serializable;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.cache.Cacheable;
0: import org.apache.carbondata.core.indexstore.blockletindex.BlockletDataMap;
1: 
1: /**
1:  * A cacheable wrapper of datamaps
1:  */
1: public class BlockletDataMapIndexWrapper implements Cacheable, Serializable {
1: 
0:   private List<BlockletDataMap> dataMaps;
1: 
0:   public BlockletDataMapIndexWrapper(List<BlockletDataMap> dataMaps) {
1:     this.dataMaps = dataMaps;
1:   }
1: 
1:   @Override public long getFileTimeStamp() {
1:     return 0;
1:   }
1: 
1:   @Override public int getAccessCount() {
1:     return 0;
1:   }
1: 
1:   @Override public long getMemorySize() {
1:     return 0;
1:   }
1: 
0:   public List<BlockletDataMap> getDataMaps() {
1:     return dataMaps;
1:   }
1: }
============================================================================