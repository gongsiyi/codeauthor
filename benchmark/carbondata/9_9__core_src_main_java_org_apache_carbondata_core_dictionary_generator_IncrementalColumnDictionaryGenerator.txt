1:05b2654: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:05b2654:  *
1:05b2654:  *    http://www.apache.org/licenses/LICENSE-2.0
1:05b2654:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:05b2654:  */
1:05b2654: package org.apache.carbondata.core.dictionary.generator;
1:05b2654: 
1:05b2654: import java.io.IOException;
1:ce09aaa: import java.util.ArrayList;
1:ce09aaa: import java.util.List;
1:ce09aaa: import java.util.Map;
1:05b2654: import java.util.concurrent.ConcurrentHashMap;
1:05b2654: 
1:05b2654: import org.apache.carbondata.common.logging.LogService;
1:05b2654: import org.apache.carbondata.common.logging.LogServiceFactory;
1:05b2654: import org.apache.carbondata.core.cache.Cache;
1:05b2654: import org.apache.carbondata.core.cache.CacheProvider;
1:05b2654: import org.apache.carbondata.core.cache.CacheType;
1:05b2654: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1:05b2654: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1:05b2654: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:05b2654: import org.apache.carbondata.core.devapi.BiDictionary;
1:05b2654: import org.apache.carbondata.core.devapi.DictionaryGenerationException;
1:05b2654: import org.apache.carbondata.core.devapi.DictionaryGenerator;
1:1155d4d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:ce09aaa: import org.apache.carbondata.core.service.CarbonCommonFactory;
1:05b2654: import org.apache.carbondata.core.service.DictionaryService;
1:05b2654: import org.apache.carbondata.core.util.CarbonUtil;
1:05b2654: import org.apache.carbondata.core.util.DataTypeUtil;
1:05b2654: import org.apache.carbondata.core.writer.CarbonDictionaryWriter;
1:05b2654: import org.apache.carbondata.core.writer.sortindex.CarbonDictionarySortIndexWriter;
1:05b2654: import org.apache.carbondata.core.writer.sortindex.CarbonDictionarySortInfo;
1:05b2654: import org.apache.carbondata.core.writer.sortindex.CarbonDictionarySortInfoPreparator;
1:05b2654: 
1:05b2654: 
1:05b2654: /**
1:05b2654:  * This generator does not maintain the whole cache of dictionary. It just maintains the cache only
1:05b2654:  * for the loading session, so what ever the dictionary values it generates in the loading session
1:05b2654:  * it keeps in cache.
1:05b2654:  */
1:05b2654: public class IncrementalColumnDictionaryGenerator implements BiDictionary<Integer, String>,
1:05b2654:         DictionaryGenerator<Integer, String>, DictionaryWriter {
1:05b2654: 
1:05b2654:   private static final LogService LOGGER =
1:05b2654:           LogServiceFactory.getLogService(IncrementalColumnDictionaryGenerator.class.getName());
1:05b2654: 
1:05b2654:   private final Object lock = new Object();
1:05b2654: 
1:05b2654:   private Map<String, Integer> incrementalCache = new ConcurrentHashMap<>();
1:05b2654: 
1:05b2654:   private Map<Integer, String> reverseIncrementalCache = new ConcurrentHashMap<>();
1:05b2654: 
1:05b2654:   private int currentDictionarySize;
1:05b2654: 
1:5b4cf70:   private int maxValue;
1:5b4cf70: 
1:05b2654:   private CarbonDimension dimension;
1:05b2654: 
1:ee5f65f:   private CarbonTable carbonTable;
1:ee5f65f: 
1:ee5f65f:   public IncrementalColumnDictionaryGenerator(CarbonDimension dimension, int maxValue,
1:ee5f65f:       CarbonTable carbonTable) {
1:ee5f65f:     this.carbonTable = carbonTable;
1:5b4cf70:     this.maxValue = maxValue;
1:05b2654:     this.currentDictionarySize = maxValue;
1:05b2654:     this.dimension = dimension;
1:05b2654:   }
1:05b2654: 
1:05b2654:   @Override public Integer getOrGenerateKey(String value) throws DictionaryGenerationException {
1:05b2654:     Integer dict = getKey(value);
1:05b2654:     if (dict == null) {
1:05b2654:       dict = generateKey(value);
1:05b2654:     }
1:05b2654:     return dict;
1:05b2654:   }
1:05b2654: 
1:05b2654:   @Override public Integer getKey(String value) {
1:05b2654:     return incrementalCache.get(value);
1:05b2654:   }
1:05b2654: 
1:05b2654:   @Override public String getValue(Integer key) {
1:05b2654:     return reverseIncrementalCache.get(key);
1:05b2654:   }
1:05b2654: 
1:05b2654:   @Override public int size() {
1:7ef9164:     synchronized (lock) {
1:7ef9164:       return currentDictionarySize;
1:7ef9164:     }
1:05b2654:   }
1:05b2654: 
1:05b2654:   @Override public Integer generateKey(String value) throws DictionaryGenerationException {
1:05b2654:     synchronized (lock) {
1:05b2654:       Integer dict = incrementalCache.get(value);
1:05b2654:       if (dict == null) {
1:05b2654:         dict = ++currentDictionarySize;
1:05b2654:         incrementalCache.put(value, dict);
1:05b2654:         reverseIncrementalCache.put(dict, value);
1:05b2654:       }
1:05b2654:       return dict;
1:05b2654:     }
1:05b2654:   }
1:05b2654: 
1:ee5f65f:   @Override public void writeDictionaryData() throws IOException {
1:05b2654:     // initialize params
1:1155d4d:     AbsoluteTableIdentifier absoluteTableIdentifier = carbonTable.getAbsoluteTableIdentifier();
1:05b2654:     ColumnIdentifier columnIdentifier = dimension.getColumnIdentifier();
1:05b2654:     DictionaryService dictionaryService = CarbonCommonFactory.getDictionaryService();
1:05b2654:     // create dictionary cache from dictionary File
1:05b2654:     DictionaryColumnUniqueIdentifier identifier =
1:29dc302:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
1:29dc302:             columnIdentifier.getDataType());
1:1155d4d:     Boolean isDictExists = CarbonUtil.isFileExistsForGivenColumn(identifier);
1:05b2654:     Dictionary dictionary = null;
1:05b2654:     long t1 = System.currentTimeMillis();
1:05b2654:     if (isDictExists) {
1:05b2654:       Cache<DictionaryColumnUniqueIdentifier, Dictionary> dictCache = CacheProvider.getInstance()
1:1155d4d:               .createCache(CacheType.REVERSE_DICTIONARY);
1:05b2654:       dictionary = dictCache.get(identifier);
1:05b2654:     }
1:05b2654:     long dictCacheTime = System.currentTimeMillis() - t1;
1:05b2654:     long t2 = System.currentTimeMillis();
1:05b2654:     // write dictionary
1:05b2654:     CarbonDictionaryWriter dictionaryWriter = null;
1:1155d4d:     dictionaryWriter = dictionaryService.getDictionaryWriter(identifier);
1:05b2654:     List<String> distinctValues = writeDictionary(dictionaryWriter, isDictExists);
1:05b2654:     long dictWriteTime = System.currentTimeMillis() - t2;
1:05b2654:     long t3 = System.currentTimeMillis();
1:05b2654:     // write sort index
1:05b2654:     if (distinctValues.size() > 0) {
1:05b2654:       writeSortIndex(distinctValues, dictionary,
1:1155d4d:               dictionaryService, absoluteTableIdentifier, columnIdentifier);
1:05b2654:     }
1:05b2654:     long sortIndexWriteTime = System.currentTimeMillis() - t3;
1:05b2654:     // update Meta Data
1:05b2654:     updateMetaData(dictionaryWriter);
1:05b2654:     LOGGER.audit("\n columnName: " + dimension.getColName() +
1:05b2654:             "\n columnId: " + dimension.getColumnId() +
1:05b2654:             "\n new distinct values count: " + distinctValues.size() +
1:05b2654:             "\n create dictionary cache: " + dictCacheTime +
1:05b2654:             "\n sort list, distinct and write: " + dictWriteTime +
1:05b2654:             "\n write sort info: " + sortIndexWriteTime);
1:f79b9ea: 
1:f79b9ea:     if (isDictExists) {
1:f79b9ea:       CarbonUtil.clearDictionaryCache(dictionary);
1:f79b9ea:     }
1:05b2654:   }
1:05b2654: 
1:05b2654:   /**
1:05b2654:    * write dictionary to file
1:05b2654:    *
1:05b2654:    * @param dictionaryWriter
1:05b2654:    * @param isDictExists
1:05b2654:    * @return
1:05b2654:    * @throws IOException
1:05b2654:    */
1:05b2654:   private List<String> writeDictionary(CarbonDictionaryWriter dictionaryWriter,
1:05b2654:                                        Boolean isDictExists) throws IOException {
1:05b2654:     List<String> distinctValues = new ArrayList<>();
1:05b2654:     try {
1:05b2654:       if (!isDictExists) {
1:05b2654:         dictionaryWriter.write(CarbonCommonConstants.MEMBER_DEFAULT_VAL);
1:05b2654:         distinctValues.add(CarbonCommonConstants.MEMBER_DEFAULT_VAL);
1:05b2654:       }
1:05b2654:       // write value to dictionary file
1:05b2654:       if (reverseIncrementalCache.size() > 0) {
1:5b4cf70:         synchronized (lock) {
1:5b4cf70:           // collect incremental dictionary
1:5b4cf70:           for (int index = maxValue + 1; index <= currentDictionarySize; index++) {
1:5b4cf70:             String value = reverseIncrementalCache.get(index);
1:5b4cf70:             String parsedValue = DataTypeUtil.normalizeColumnValueForItsDataType(value, dimension);
1:5b4cf70:             if (null != parsedValue) {
1:5b4cf70:               dictionaryWriter.write(parsedValue);
1:5b4cf70:               distinctValues.add(parsedValue);
1:5b4cf70:             }
1:05b2654:           }
1:5b4cf70:           // clear incremental dictionary to avoid write to file again
1:5b4cf70:           reverseIncrementalCache.clear();
1:5b4cf70:           incrementalCache.clear();
1:5b4cf70:           currentDictionarySize = maxValue;
1:05b2654:         }
1:05b2654:       }
1:05b2654:     } finally {
1:05b2654:       if (null != dictionaryWriter) {
1:05b2654:         dictionaryWriter.close();
1:05b2654:       }
1:05b2654:     }
1:05b2654: 
1:05b2654:     return distinctValues;
1:05b2654:   }
1:05b2654: 
1:05b2654:   /**
1:05b2654:    * write dictionary sort index to file
1:05b2654:    *
1:05b2654:    * @param distinctValues
1:05b2654:    * @param dictionary
1:05b2654:    * @param dictionaryService
1:1155d4d:    * @param absoluteTableIdentifier
1:05b2654:    * @param columnIdentifier
1:05b2654:    * @throws IOException
1:05b2654:    */
1:05b2654:   private void writeSortIndex(List<String> distinctValues,
1:05b2654:                               Dictionary dictionary,
1:05b2654:                               DictionaryService dictionaryService,
1:1155d4d:                               AbsoluteTableIdentifier absoluteTableIdentifier,
1:1155d4d:                               ColumnIdentifier columnIdentifier) throws IOException {
1:05b2654:     CarbonDictionarySortIndexWriter carbonDictionarySortIndexWriter = null;
1:d3a09e2:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:1155d4d:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
1:29dc302:             columnIdentifier.getDataType());
1:05b2654:     try {
1:05b2654:       CarbonDictionarySortInfoPreparator preparator = new CarbonDictionarySortInfoPreparator();
1:05b2654:       CarbonDictionarySortInfo dictionarySortInfo =
1:05b2654:               preparator.getDictionarySortInfo(distinctValues, dictionary,
1:05b2654:                       dimension.getDataType());
1:d3a09e2:       carbonDictionarySortIndexWriter = dictionaryService
1:1155d4d:           .getDictionarySortIndexWriter(dictionaryColumnUniqueIdentifier);
1:05b2654:       carbonDictionarySortIndexWriter.writeSortIndex(dictionarySortInfo.getSortIndex());
1:05b2654:       carbonDictionarySortIndexWriter
1:05b2654:               .writeInvertedSortIndex(dictionarySortInfo.getSortIndexInverted());
1:05b2654:     } finally {
1:05b2654:       if (null != carbonDictionarySortIndexWriter) {
1:05b2654:         carbonDictionarySortIndexWriter.close();
1:05b2654:       }
1:05b2654:     }
1:05b2654:   }
1:05b2654: 
1:05b2654:   /**
1:05b2654:    * update dictionary metadata
1:05b2654:    *
1:05b2654:    * @param dictionaryWriter
1:05b2654:    * @throws IOException
1:05b2654:    */
1:256dbed:   private void updateMetaData(CarbonDictionaryWriter dictionaryWriter) throws IOException {
1:05b2654:     if (null != dictionaryWriter) {
1:05b2654:       dictionaryWriter.commit();
1:05b2654:     }
1:05b2654:   }
1:05b2654: 
1:05b2654: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:     synchronized (lock) {
1:       return currentDictionarySize;
1:     }
author:sounakr
-------------------------------------------------------------------------------
commit:f79b9ea
/////////////////////////////////////////////////////////////////////////
1: 
1:     if (isDictExists) {
1:       CarbonUtil.clearDictionaryCache(dictionary);
1:     }
author:manishgupta88
-------------------------------------------------------------------------------
commit:29dc302
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
1:             columnIdentifier.getDataType());
/////////////////////////////////////////////////////////////////////////
1:             columnIdentifier.getDataType());
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
1:     AbsoluteTableIdentifier absoluteTableIdentifier = carbonTable.getAbsoluteTableIdentifier();
1:             new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
1:     Boolean isDictExists = CarbonUtil.isFileExistsForGivenColumn(identifier);
1:               .createCache(CacheType.REVERSE_DICTIONARY);
1:     dictionaryWriter = dictionaryService.getDictionaryWriter(identifier);
1:               dictionaryService, absoluteTableIdentifier, columnIdentifier);
/////////////////////////////////////////////////////////////////////////
1:    * @param absoluteTableIdentifier
1:                               AbsoluteTableIdentifier absoluteTableIdentifier,
1:                               ColumnIdentifier columnIdentifier) throws IOException {
0:     CarbonTablePath carbonTablePath = CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier);
0:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier,
/////////////////////////////////////////////////////////////////////////
1:           .getDictionarySortIndexWriter(dictionaryColumnUniqueIdentifier);
author:kunal642
-------------------------------------------------------------------------------
commit:ee5f65f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private CarbonTable carbonTable;
1: 
1:   public IncrementalColumnDictionaryGenerator(CarbonDimension dimension, int maxValue,
1:       CarbonTable carbonTable) {
1:     this.carbonTable = carbonTable;
/////////////////////////////////////////////////////////////////////////
1:   @Override public void writeDictionaryData() throws IOException {
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
0: import org.apache.carbondata.core.util.path.CarbonTablePath;
/////////////////////////////////////////////////////////////////////////
0:     CarbonTablePath carbonTablePath =
0:         CarbonStorePath.getCarbonTablePath(carbonTable.getAbsoluteTableIdentifier());
/////////////////////////////////////////////////////////////////////////
0:                     columnIdentifier.getDataType(), carbonTablePath);
/////////////////////////////////////////////////////////////////////////
0:             .getDictionaryWriter(tableIdentifier, identifier, storePath);
/////////////////////////////////////////////////////////////////////////
0:     CarbonTablePath carbonTablePath = CarbonStorePath
0:         .getCarbonTablePath(storePath, tableIdentifier.getDatabaseName(),
0:             tableIdentifier.getTableName());
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
0:         new DictionaryColumnUniqueIdentifier(tableIdentifier, columnIdentifier,
0:             columnIdentifier.getDataType(), carbonTablePath);
1:       carbonDictionarySortIndexWriter = dictionaryService
0:           .getDictionarySortIndexWriter(tableIdentifier, dictionaryColumnUniqueIdentifier,
0:               storePath);
author:QiangCai
-------------------------------------------------------------------------------
commit:5b4cf70
/////////////////////////////////////////////////////////////////////////
1:   private int maxValue;
1: 
1:     this.maxValue = maxValue;
/////////////////////////////////////////////////////////////////////////
1:         synchronized (lock) {
1:           // collect incremental dictionary
1:           for (int index = maxValue + 1; index <= currentDictionarySize; index++) {
1:             String value = reverseIncrementalCache.get(index);
1:             String parsedValue = DataTypeUtil.normalizeColumnValueForItsDataType(value, dimension);
1:             if (null != parsedValue) {
1:               dictionaryWriter.write(parsedValue);
1:               distinctValues.add(parsedValue);
1:             }
1:           // clear incremental dictionary to avoid write to file again
1:           reverseIncrementalCache.clear();
1:           incrementalCache.clear();
1:           currentDictionarySize = maxValue;
commit:256dbed
/////////////////////////////////////////////////////////////////////////
0:                               String storePath) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   private void updateMetaData(CarbonDictionaryWriter dictionaryWriter) throws IOException {
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonMetadata;
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.core.service.CarbonCommonFactory;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
0:   @Override public void writeDictionaryData(String tableUniqueName) throws IOException {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                               String storePath) throws IOException{
author:ravipesala
-------------------------------------------------------------------------------
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.dictionary.generator;
1: 
1: import java.io.IOException;
0: import java.util.*;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
0: import org.apache.carbondata.common.factory.CarbonCommonFactory;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.cache.Cache;
1: import org.apache.carbondata.core.cache.CacheProvider;
1: import org.apache.carbondata.core.cache.CacheType;
1: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.carbon.metadata.CarbonMetadata;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.CarbonTable;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.devapi.BiDictionary;
1: import org.apache.carbondata.core.devapi.DictionaryGenerationException;
1: import org.apache.carbondata.core.devapi.DictionaryGenerator;
1: import org.apache.carbondata.core.service.DictionaryService;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.apache.carbondata.core.util.DataTypeUtil;
1: import org.apache.carbondata.core.writer.CarbonDictionaryWriter;
1: import org.apache.carbondata.core.writer.sortindex.CarbonDictionarySortIndexWriter;
1: import org.apache.carbondata.core.writer.sortindex.CarbonDictionarySortInfo;
1: import org.apache.carbondata.core.writer.sortindex.CarbonDictionarySortInfoPreparator;
1: 
1: 
1: /**
1:  * This generator does not maintain the whole cache of dictionary. It just maintains the cache only
1:  * for the loading session, so what ever the dictionary values it generates in the loading session
1:  * it keeps in cache.
1:  */
1: public class IncrementalColumnDictionaryGenerator implements BiDictionary<Integer, String>,
1:         DictionaryGenerator<Integer, String>, DictionaryWriter {
1: 
1:   private static final LogService LOGGER =
1:           LogServiceFactory.getLogService(IncrementalColumnDictionaryGenerator.class.getName());
1: 
1:   private final Object lock = new Object();
1: 
1:   private Map<String, Integer> incrementalCache = new ConcurrentHashMap<>();
1: 
1:   private Map<Integer, String> reverseIncrementalCache = new ConcurrentHashMap<>();
1: 
1:   private int currentDictionarySize;
1: 
1:   private CarbonDimension dimension;
1: 
0:   public IncrementalColumnDictionaryGenerator(CarbonDimension dimension, int maxValue) {
1:     this.currentDictionarySize = maxValue;
1:     this.dimension = dimension;
1:   }
1: 
1:   @Override public Integer getOrGenerateKey(String value) throws DictionaryGenerationException {
1:     Integer dict = getKey(value);
1:     if (dict == null) {
1:       dict = generateKey(value);
1:     }
1:     return dict;
1:   }
1: 
1:   @Override public Integer getKey(String value) {
1:     return incrementalCache.get(value);
1:   }
1: 
1:   @Override public String getValue(Integer key) {
1:     return reverseIncrementalCache.get(key);
1:   }
1: 
1:   @Override public int size() {
0:     return currentDictionarySize;
1:   }
1: 
1:   @Override public Integer generateKey(String value) throws DictionaryGenerationException {
1:     synchronized (lock) {
1:       Integer dict = incrementalCache.get(value);
1:       if (dict == null) {
1:         dict = ++currentDictionarySize;
1:         incrementalCache.put(value, dict);
1:         reverseIncrementalCache.put(dict, value);
1:       }
1:       return dict;
1:     }
1:   }
1: 
0:   @Override public void writeDictionaryData(String tableUniqueName) throws Exception {
1:     // initialize params
0:     CarbonMetadata metadata = CarbonMetadata.getInstance();
0:     CarbonTable carbonTable = metadata.getCarbonTable(tableUniqueName);
0:     CarbonTableIdentifier tableIdentifier = carbonTable.getCarbonTableIdentifier();
1:     ColumnIdentifier columnIdentifier = dimension.getColumnIdentifier();
0:     String storePath = carbonTable.getStorePath();
1:     DictionaryService dictionaryService = CarbonCommonFactory.getDictionaryService();
1:     // create dictionary cache from dictionary File
1:     DictionaryColumnUniqueIdentifier identifier =
0:             new DictionaryColumnUniqueIdentifier(tableIdentifier, columnIdentifier,
0:                     columnIdentifier.getDataType());
0:     Boolean isDictExists = CarbonUtil.isFileExistsForGivenColumn(storePath, identifier);
1:     Dictionary dictionary = null;
1:     long t1 = System.currentTimeMillis();
1:     if (isDictExists) {
1:       Cache<DictionaryColumnUniqueIdentifier, Dictionary> dictCache = CacheProvider.getInstance()
0:               .createCache(CacheType.REVERSE_DICTIONARY, storePath);
1:       dictionary = dictCache.get(identifier);
1:     }
1:     long dictCacheTime = System.currentTimeMillis() - t1;
1:     long t2 = System.currentTimeMillis();
1:     // write dictionary
1:     CarbonDictionaryWriter dictionaryWriter = null;
0:     dictionaryWriter = dictionaryService
0:             .getDictionaryWriter(tableIdentifier, columnIdentifier, storePath);
1:     List<String> distinctValues = writeDictionary(dictionaryWriter, isDictExists);
1:     long dictWriteTime = System.currentTimeMillis() - t2;
1:     long t3 = System.currentTimeMillis();
1:     // write sort index
1:     if (distinctValues.size() > 0) {
1:       writeSortIndex(distinctValues, dictionary,
0:               dictionaryService, tableIdentifier, columnIdentifier, storePath);
1:     }
1:     long sortIndexWriteTime = System.currentTimeMillis() - t3;
1:     // update Meta Data
1:     updateMetaData(dictionaryWriter);
1:     LOGGER.audit("\n columnName: " + dimension.getColName() +
1:             "\n columnId: " + dimension.getColumnId() +
1:             "\n new distinct values count: " + distinctValues.size() +
1:             "\n create dictionary cache: " + dictCacheTime +
1:             "\n sort list, distinct and write: " + dictWriteTime +
1:             "\n write sort info: " + sortIndexWriteTime);
1:   }
1: 
1:   /**
1:    * write dictionary to file
1:    *
1:    * @param dictionaryWriter
1:    * @param isDictExists
1:    * @return
1:    * @throws IOException
1:    */
1:   private List<String> writeDictionary(CarbonDictionaryWriter dictionaryWriter,
1:                                        Boolean isDictExists) throws IOException {
1:     List<String> distinctValues = new ArrayList<>();
1:     try {
1:       if (!isDictExists) {
1:         dictionaryWriter.write(CarbonCommonConstants.MEMBER_DEFAULT_VAL);
1:         distinctValues.add(CarbonCommonConstants.MEMBER_DEFAULT_VAL);
1:       }
1:       // write value to dictionary file
1:       if (reverseIncrementalCache.size() > 0) {
0:         for (int index = 2; index < reverseIncrementalCache.size() + 2; index++) {
0:           String value = reverseIncrementalCache.get(index);
0:           String parsedValue = DataTypeUtil
0:                   .normalizeColumnValueForItsDataType(value, dimension);
0:           if (null != parsedValue) {
0:             dictionaryWriter.write(parsedValue);
0:             distinctValues.add(parsedValue);
1:           }
1:         }
1:       }
0:     } catch (IOException ex) {
0:       throw ex;
1:     } finally {
1:       if (null != dictionaryWriter) {
1:         dictionaryWriter.close();
1:       }
1:     }
1: 
1:     return distinctValues;
1:   }
1: 
1:   /**
1:    * write dictionary sort index to file
1:    *
1:    * @param distinctValues
1:    * @param dictionary
1:    * @param dictionaryService
0:    * @param tableIdentifier
1:    * @param columnIdentifier
0:    * @param storePath
1:    * @throws IOException
1:    */
1:   private void writeSortIndex(List<String> distinctValues,
1:                               Dictionary dictionary,
1:                               DictionaryService dictionaryService,
0:                               CarbonTableIdentifier tableIdentifier,
0:                               ColumnIdentifier columnIdentifier,
0:                               String storePath) throws Exception{
1:     CarbonDictionarySortIndexWriter carbonDictionarySortIndexWriter = null;
1:     try {
1:       CarbonDictionarySortInfoPreparator preparator = new CarbonDictionarySortInfoPreparator();
1:       CarbonDictionarySortInfo dictionarySortInfo =
1:               preparator.getDictionarySortInfo(distinctValues, dictionary,
1:                       dimension.getDataType());
0:       carbonDictionarySortIndexWriter =
0:               dictionaryService.getDictionarySortIndexWriter(tableIdentifier, columnIdentifier,
0:                       storePath);
1:       carbonDictionarySortIndexWriter.writeSortIndex(dictionarySortInfo.getSortIndex());
1:       carbonDictionarySortIndexWriter
1:               .writeInvertedSortIndex(dictionarySortInfo.getSortIndexInverted());
1:     } finally {
1:       if (null != carbonDictionarySortIndexWriter) {
1:         carbonDictionarySortIndexWriter.close();
1:       }
1:     }
1:   }
1: 
1:   /**
1:    * update dictionary metadata
1:    *
1:    * @param dictionaryWriter
1:    * @throws IOException
1:    */
0:   private void updateMetaData(CarbonDictionaryWriter dictionaryWriter) throws IOException{
1:     if (null != dictionaryWriter) {
1:       dictionaryWriter.commit();
1:     }
1:   }
1: 
1: }
============================================================================