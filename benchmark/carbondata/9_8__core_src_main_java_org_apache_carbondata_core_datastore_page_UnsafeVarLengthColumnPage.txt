1:7359601: /*
1:7359601:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7359601:  * contributor license agreements.  See the NOTICE file distributed with
1:7359601:  * this work for additional information regarding copyright ownership.
1:7359601:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7359601:  * (the "License"); you may not use this file except in compliance with
1:7359601:  * the License.  You may obtain a copy of the License at
1:7359601:  *
1:7359601:  *    http://www.apache.org/licenses/LICENSE-2.0
1:7359601:  *
1:7359601:  * Unless required by applicable law or agreed to in writing, software
1:7359601:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7359601:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7359601:  * See the License for the specific language governing permissions and
1:7359601:  * limitations under the License.
1:fdb672a:  */
11:7359601: 
1:7359601: package org.apache.carbondata.core.datastore.page;
1:df22368: 
1:7359601: import java.math.BigDecimal;
1:7359601: 
1:8f08c4a: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:7359601: import org.apache.carbondata.core.memory.CarbonUnsafe;
1:7359601: import org.apache.carbondata.core.memory.MemoryException;
1:7359601: import org.apache.carbondata.core.memory.UnsafeMemoryManager;
1:7359601: 
1:6f20437: /**
1:6f20437:  * This extension uses unsafe memory to store page data, for variable length data type (string)
1:6f20437:  */
1:7359601: public class UnsafeVarLengthColumnPage extends VarLengthColumnPageBase {
1:7359601: 
1:fdb672a:   /**
1:fdb672a:    * create a page
1:fdb672a:    */
1:8f08c4a:   UnsafeVarLengthColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize)
1:9e064ee:       throws MemoryException {
1:8f08c4a:     super(columnPageEncoderMeta, pageSize);
1:7359601:     capacity = (int) (pageSize * DEFAULT_ROW_SIZE * FACTOR);
1:9e064ee:     memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, (long) (capacity));
1:fdb672a:     baseAddress = memoryBlock.getBaseObject();
1:fdb672a:     baseOffset = memoryBlock.getBaseOffset();
1:fdb672a:   }
1:fdb672a: 
1:e6a4f64:   @Override
1:7359601:   public void freeMemory() {
1:7359601:     if (memoryBlock != null) {
1:df22368:       UnsafeMemoryManager.INSTANCE.freeMemory(taskId, memoryBlock);
1:7359601:       memoryBlock = null;
1:7359601:       baseAddress = null;
1:7359601:       baseOffset = 0;
1:8925947:       super.freeMemory();
5:7359601:     }
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:7359601:   public void putBytesAtRow(int rowId, byte[] bytes) {
1:fdb672a:     putBytes(rowId, bytes, 0, bytes.length);
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:7359601:   public void putBytes(int rowId, byte[] bytes, int offset, int length) {
1:fdb672a:     try {
1:fdb672a:       ensureMemory(length);
1:fdb672a:     } catch (MemoryException e) {
1:fdb672a:       throw new RuntimeException(e);
1:fdb672a:     }
1:500654e:     CarbonUnsafe.getUnsafe().copyMemory(bytes, CarbonUnsafe.BYTE_ARRAY_OFFSET + offset,
1:8925947:         baseAddress, baseOffset + rowOffset.getInt(rowId), length);
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:e6a4f64:   public void setByteArrayPage(byte[][] byteArray) {
1:e6a4f64:     if (totalLength != 0) {
1:e6a4f64:       throw new IllegalStateException("page is not empty");
1:e6a4f64:     }
1:e6a4f64:     for (int i = 0; i < byteArray.length; i++) {
1:e6a4f64:       putBytes(i, byteArray[i]);
1:e6a4f64:     }
1:e6a4f64:   }
1:e6a4f64: 
1:9e064ee:   @Override public void putDecimal(int rowId, BigDecimal decimal) {
1:6f20437: 
1:9e064ee:   }
1:9e064ee: 
1:7359601:   @Override
1:7359601:   public BigDecimal getDecimal(int rowId) {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:e6a4f64:   public byte[] getBytes(int rowId) {
1:8925947:     int length = rowOffset.getInt(rowId + 1) - rowOffset.getInt(rowId);
1:e6a4f64:     byte[] bytes = new byte[length];
1:8925947:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.getInt(rowId),
1:e6a4f64:         bytes, CarbonUnsafe.BYTE_ARRAY_OFFSET, length);
1:e6a4f64:     return bytes;
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:7359601:   public byte[][] getByteArrayPage() {
1:8925947:     byte[][] bytes = new byte[rowOffset.getActualRowCount() - 1][];
1:8925947:     for (int rowId = 0; rowId < rowOffset.getActualRowCount() - 1; rowId++) {
1:8925947:       int length = rowOffset.getInt(rowId + 1) - rowOffset.getInt(rowId);
1:7359601:       byte[] rowData = new byte[length];
1:8925947:       CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.getInt(rowId),
1:7359601:           rowData, CarbonUnsafe.BYTE_ARRAY_OFFSET, length);
1:7359601:       bytes[rowId] = rowData;
1:7359601:     }
1:7359601:     return bytes;
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:7359601:   void copyBytes(int rowId, byte[] dest, int destOffset, int length) {
1:8925947:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.getInt(rowId),
1:7359601:         dest, CarbonUnsafe.BYTE_ARRAY_OFFSET + destOffset, length);
1:7359601:   }
1:7359601: 
1:7359601: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
/////////////////////////////////////////////////////////////////////////
1:   UnsafeVarLengthColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize)
1:     super(columnPageEncoderMeta, pageSize);
/////////////////////////////////////////////////////////////////////////
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
author:kumarvishal09
-------------------------------------------------------------------------------
commit:8925947
/////////////////////////////////////////////////////////////////////////
1:       super.freeMemory();
/////////////////////////////////////////////////////////////////////////
1:         baseAddress, baseOffset + rowOffset.getInt(rowId), length);
/////////////////////////////////////////////////////////////////////////
1:     int length = rowOffset.getInt(rowId + 1) - rowOffset.getInt(rowId);
1:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.getInt(rowId),
1:     byte[][] bytes = new byte[rowOffset.getActualRowCount() - 1][];
1:     for (int rowId = 0; rowId < rowOffset.getActualRowCount() - 1; rowId++) {
1:       int length = rowOffset.getInt(rowId + 1) - rowOffset.getInt(rowId);
1:       CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.getInt(rowId),
/////////////////////////////////////////////////////////////////////////
1:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.getInt(rowId),
commit:e710339
/////////////////////////////////////////////////////////////////////////
0:         baseAddress, baseOffset + rowOffset.get(rowId), length);
/////////////////////////////////////////////////////////////////////////
0:     int length = rowOffset.get(rowId + 1) - rowOffset.get(rowId);
0:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.get(rowId),
0:     byte[][] bytes = new byte[rowOffset.size() - 1][];
0:     for (int rowId = 0; rowId < rowOffset.size() - 1; rowId++) {
0:       int length = rowOffset.get(rowId + 1) - rowOffset.get(rowId);
0:       CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.get(rowId),
/////////////////////////////////////////////////////////////////////////
0:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.get(rowId),
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:e9c24c5
/////////////////////////////////////////////////////////////////////////
author:manishgupta88
-------------------------------------------------------------------------------
commit:6f20437
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * This extension uses unsafe memory to store page data, for variable length data type (string)
1:  */
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
author:Jacky Li
-------------------------------------------------------------------------------
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.TableSpec;
/////////////////////////////////////////////////////////////////////////
0:   UnsafeVarLengthColumnPage(TableSpec.ColumnSpec columnSpec, DataType dataType, int pageSize)
0:     super(columnSpec, dataType, pageSize);
/////////////////////////////////////////////////////////////////////////
0:   UnsafeVarLengthColumnPage(TableSpec.ColumnSpec columnSpec, DataType dataType, int pageSize,
0:       int capacity) throws MemoryException {
0:     super(columnSpec, dataType, pageSize);
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void setByteArrayPage(byte[][] byteArray) {
1:     if (totalLength != 0) {
1:       throw new IllegalStateException("page is not empty");
1:     }
1:     for (int i = 0; i < byteArray.length; i++) {
1:       putBytes(i, byteArray[i]);
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getBytes(int rowId) {
0:     int length = rowOffset[rowId + 1] - rowOffset[rowId];
1:     byte[] bytes = new byte[length];
0:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset[rowId],
1:         bytes, CarbonUnsafe.BYTE_ARRAY_OFFSET, length);
1:     return bytes;
1:   }
1: 
1:   @Override
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
0:       CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset,
/////////////////////////////////////////////////////////////////////////
1:     CarbonUnsafe.getUnsafe().copyMemory(bytes, CarbonUnsafe.BYTE_ARRAY_OFFSET + offset,
/////////////////////////////////////////////////////////////////////////
0:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset[rowId],
/////////////////////////////////////////////////////////////////////////
0:       CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset[rowId],
/////////////////////////////////////////////////////////////////////////
0:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset[rowId],
author:ravipesala
-------------------------------------------------------------------------------
commit:9e064ee
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   UnsafeVarLengthColumnPage(DataType dataType, int pageSize, int scale, int precision)
1:       throws MemoryException {
0:     super(dataType, pageSize, scale, precision);
1:     memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, (long) (capacity));
/////////////////////////////////////////////////////////////////////////
0:   UnsafeVarLengthColumnPage(DataType dataType, int pageSize, int capacity,
0:       int scale, int precision) throws MemoryException {
0:     super(dataType, pageSize, scale, precision);
/////////////////////////////////////////////////////////////////////////
1:   @Override public void putDecimal(int rowId, BigDecimal decimal) {
0:     putBytes(rowId, decimalConverter.convert(decimal));
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     return decimalConverter.getDecimal(bytes);
author:kumarvishal
-------------------------------------------------------------------------------
commit:df22368
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.util.ThreadLocalTaskInfo;
/////////////////////////////////////////////////////////////////////////
0:   private final long taskId = ThreadLocalTaskInfo.getCarbonTaskInfo().getTaskId();
1: 
/////////////////////////////////////////////////////////////////////////
0:     memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, (long)(capacity));
/////////////////////////////////////////////////////////////////////////
0:     memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, (long)(capacity));
/////////////////////////////////////////////////////////////////////////
1:       UnsafeMemoryManager.INSTANCE.freeMemory(taskId, memoryBlock);
/////////////////////////////////////////////////////////////////////////
0:       MemoryBlock newBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, newSize);
0:       UnsafeMemoryManager.INSTANCE.freeMemory(taskId, memoryBlock);
author:jackylk
-------------------------------------------------------------------------------
commit:fdb672a
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * create a page
0:    * @param dataType data type
0:    * @param pageSize number of row
1:    */
/////////////////////////////////////////////////////////////////////////
0:   /**
0:    * create a page with initial capacity
0:    * @param dataType data type
0:    * @param pageSize number of row
0:    * @param capacity initial capacity of the page, in bytes
1:    */
0:   UnsafeVarLengthColumnPage(DataType dataType, int pageSize, int capacity) throws MemoryException {
0:     super(dataType, pageSize);
0:     this.capacity = capacity;
0:     memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry((long)(capacity));
1:     baseAddress = memoryBlock.getBaseObject();
1:     baseOffset = memoryBlock.getBaseOffset();
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:   /**
0:    * reallocate memory if capacity length than current size + request size
0:    */
/////////////////////////////////////////////////////////////////////////
1:     putBytes(rowId, bytes, 0, bytes.length);
1:     try {
1:       ensureMemory(length);
1:     } catch (MemoryException e) {
1:       throw new RuntimeException(e);
1:     }
commit:7359601
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: 
1: package org.apache.carbondata.core.datastore.page;
1: 
1: import java.math.BigDecimal;
1: 
1: import org.apache.carbondata.core.memory.CarbonUnsafe;
0: import org.apache.carbondata.core.memory.MemoryBlock;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.memory.UnsafeMemoryManager;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
0: import org.apache.carbondata.core.util.DataTypeUtil;
1: 
0: // This extension uses unsafe memory to store page data, for variable length data type (string,
0: // decimal)
1: public class UnsafeVarLengthColumnPage extends VarLengthColumnPageBase {
1: 
0:   // memory allocated by Unsafe
0:   private MemoryBlock memoryBlock;
1: 
0:   // base address of memoryBlock
0:   private Object baseAddress;
1: 
0:   // base offset of memoryBlock
0:   private long baseOffset;
1: 
0:   // size of the allocated memory, in bytes
0:   private int capacity;
1: 
0:   // default size for each row, grows as needed
0:   private static final int DEFAULT_ROW_SIZE = 8;
1: 
0:   private static final double FACTOR = 1.25;
1: 
0:   UnsafeVarLengthColumnPage(DataType dataType, int pageSize) throws MemoryException {
0:     super(dataType, pageSize);
1:     capacity = (int) (pageSize * DEFAULT_ROW_SIZE * FACTOR);
0:     memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry((long)(capacity));
0:     baseAddress = memoryBlock.getBaseObject();
0:     baseOffset = memoryBlock.getBaseOffset();
1:   }
1: 
1:   @Override
1:   public void freeMemory() {
1:     if (memoryBlock != null) {
0:       UnsafeMemoryManager.INSTANCE.freeMemory(memoryBlock);
1:       memoryBlock = null;
1:       baseAddress = null;
1:       baseOffset = 0;
1:     }
1:   }
1: 
0:   private void ensureMemory(int requestSize) throws MemoryException {
0:     if (totalLength + requestSize > capacity) {
0:       int newSize = 2 * capacity;
0:       MemoryBlock newBlock = UnsafeMemoryManager.allocateMemoryWithRetry(newSize);
0:       CarbonUnsafe.unsafe.copyMemory(baseAddress, baseOffset,
0:           newBlock.getBaseObject(), newBlock.getBaseOffset(), capacity);
0:       UnsafeMemoryManager.INSTANCE.freeMemory(memoryBlock);
0:       memoryBlock = newBlock;
0:       baseAddress = newBlock.getBaseObject();
0:       baseOffset = newBlock.getBaseOffset();
0:       capacity = newSize;
1:     }
1:   }
1: 
1:   @Override
1:   public void putBytesAtRow(int rowId, byte[] bytes) {
0:     try {
0:       ensureMemory(bytes.length);
0:     } catch (MemoryException e) {
0:       throw new RuntimeException(e);
1:     }
0:     CarbonUnsafe.unsafe.copyMemory(bytes, CarbonUnsafe.BYTE_ARRAY_OFFSET,
0:         baseAddress, baseOffset + rowOffset[rowId], bytes.length);
1:   }
1: 
1:   @Override
1:   public void putBytes(int rowId, byte[] bytes, int offset, int length) {
0:     CarbonUnsafe.unsafe.copyMemory(bytes, CarbonUnsafe.BYTE_ARRAY_OFFSET + offset,
0:         baseAddress, baseOffset + rowOffset[rowId], length);
1:   }
1: 
1:   @Override
1:   public BigDecimal getDecimal(int rowId) {
0:     int length = rowOffset[rowId + 1] - rowOffset[rowId];
0:     byte[] bytes = new byte[length];
0:     CarbonUnsafe.unsafe.copyMemory(baseAddress, baseOffset + rowOffset[rowId],
0:         bytes, CarbonUnsafe.BYTE_ARRAY_OFFSET, length);
1: 
0:     return DataTypeUtil.byteToBigDecimal(bytes);
1:   }
1: 
1:   @Override
1:   public byte[][] getByteArrayPage() {
0:     byte[][] bytes = new byte[pageSize][];
0:     for (int rowId = 0; rowId < pageSize; rowId++) {
0:       int length = rowOffset[rowId + 1] - rowOffset[rowId];
1:       byte[] rowData = new byte[length];
0:       CarbonUnsafe.unsafe.copyMemory(baseAddress, baseOffset + rowOffset[rowId],
1:           rowData, CarbonUnsafe.BYTE_ARRAY_OFFSET, length);
1:       bytes[rowId] = rowData;
1:     }
1:     return bytes;
1:   }
1: 
1:   @Override
1:   void copyBytes(int rowId, byte[] dest, int destOffset, int length) {
0:     CarbonUnsafe.unsafe.copyMemory(baseAddress, baseOffset + rowOffset[rowId],
1:         dest, CarbonUnsafe.BYTE_ARRAY_OFFSET + destOffset, length);
1:   }
1: 
1: }
============================================================================