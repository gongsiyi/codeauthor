1:daa6465: /*
1:daa6465:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:daa6465:  * contributor license agreements.  See the NOTICE file distributed with
1:daa6465:  * this work for additional information regarding copyright ownership.
1:daa6465:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:daa6465:  * (the "License"); you may not use this file except in compliance with
1:daa6465:  * the License.  You may obtain a copy of the License at
1:daa6465:  *
1:daa6465:  *    http://www.apache.org/licenses/LICENSE-2.0
1:daa6465:  *
1:daa6465:  * Unless required by applicable law or agreed to in writing, software
1:daa6465:  * distributed under the License is distributed on an "AS IS" BASIS,
1:daa6465:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:daa6465:  * See the License for the specific language governing permissions and
1:daa6465:  * limitations under the License.
1:daa6465:  */
1:daa6465: package org.apache.carbondata.core.scan.processor;
1:daa6465: 
1:daa6465: import org.apache.carbondata.core.datastore.DataRefNode;
1:daa6465: import org.apache.carbondata.core.datastore.FileReader;
1:daa6465: import org.apache.carbondata.core.datastore.chunk.impl.DimensionRawColumnChunk;
1:daa6465: import org.apache.carbondata.core.datastore.chunk.impl.MeasureRawColumnChunk;
1:daa6465: import org.apache.carbondata.core.util.BitSetGroup;
1:daa6465: 
1:daa6465: /**
1:daa6465:  * Contains dimension and measure raw column chunks of one blocklet
1:daa6465:  */
1:daa6465: public class RawBlockletColumnChunks {
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * dimension column data chunk
1:daa6465:    */
1:daa6465:   private DimensionRawColumnChunk[] dimensionRawColumnChunks;
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * measure column data chunk
1:daa6465:    */
1:daa6465:   private MeasureRawColumnChunk[] measureRawColumnChunks;
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * file reader which will use to read the block from file
1:daa6465:    */
1:daa6465:   private FileReader fileReader;
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * data block
1:daa6465:    */
1:daa6465:   private DataRefNode dataBlock;
1:daa6465: 
1:daa6465:   private BitSetGroup bitSetGroup;
1:daa6465: 
1:daa6465:   private RawBlockletColumnChunks() { }
1:daa6465: 
1:daa6465:   public static RawBlockletColumnChunks newInstance(int numberOfDimensionChunk,
1:daa6465:       int numberOfMeasureChunk, FileReader fileReader, DataRefNode dataBlock) {
1:daa6465:     RawBlockletColumnChunks instance = new RawBlockletColumnChunks();
1:daa6465:     instance.dimensionRawColumnChunks = new DimensionRawColumnChunk[numberOfDimensionChunk];
1:daa6465:     instance.measureRawColumnChunks = new MeasureRawColumnChunk[numberOfMeasureChunk];
1:daa6465:     instance.fileReader = fileReader;
1:daa6465:     instance.dataBlock = dataBlock;
1:daa6465:     return instance;
1:daa6465:   }
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * @return the dimensionRawColumnChunks
1:daa6465:    */
1:daa6465:   public DimensionRawColumnChunk[] getDimensionRawColumnChunks() {
1:daa6465:     return dimensionRawColumnChunks;
1:daa6465:   }
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * @param dimensionRawColumnChunks the dimensionRawColumnChunks to set
1:daa6465:    */
1:daa6465:   public void setDimensionRawColumnChunks(DimensionRawColumnChunk[] dimensionRawColumnChunks) {
1:daa6465:     this.dimensionRawColumnChunks = dimensionRawColumnChunks;
1:daa6465:   }
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * @return the measureRawColumnChunks
1:daa6465:    */
1:daa6465:   public MeasureRawColumnChunk[] getMeasureRawColumnChunks() {
1:daa6465:     return measureRawColumnChunks;
1:daa6465:   }
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * @param measureRawColumnChunks the measureRawColumnChunks to set
1:daa6465:    */
1:daa6465:   public void setMeasureRawColumnChunks(MeasureRawColumnChunk[] measureRawColumnChunks) {
1:daa6465:     this.measureRawColumnChunks = measureRawColumnChunks;
1:daa6465:   }
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * @return the fileReader
1:daa6465:    */
1:daa6465:   public FileReader getFileReader() {
1:daa6465:     return fileReader;
1:daa6465:   }
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * @return the dataBlock
1:daa6465:    */
1:daa6465:   public DataRefNode getDataBlock() {
1:daa6465:     return dataBlock;
1:daa6465:   }
1:daa6465: 
1:daa6465:   public BitSetGroup getBitSetGroup() {
1:daa6465:     return bitSetGroup;
1:daa6465:   }
1:daa6465: 
1:daa6465:   public void setBitSetGroup(BitSetGroup bitSetGroup) {
1:daa6465:     this.bitSetGroup = bitSetGroup;
1:daa6465:   }
1:daa6465: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.processor;
1: 
1: import org.apache.carbondata.core.datastore.DataRefNode;
1: import org.apache.carbondata.core.datastore.FileReader;
1: import org.apache.carbondata.core.datastore.chunk.impl.DimensionRawColumnChunk;
1: import org.apache.carbondata.core.datastore.chunk.impl.MeasureRawColumnChunk;
1: import org.apache.carbondata.core.util.BitSetGroup;
1: 
1: /**
1:  * Contains dimension and measure raw column chunks of one blocklet
1:  */
1: public class RawBlockletColumnChunks {
1: 
1:   /**
1:    * dimension column data chunk
1:    */
1:   private DimensionRawColumnChunk[] dimensionRawColumnChunks;
1: 
1:   /**
1:    * measure column data chunk
1:    */
1:   private MeasureRawColumnChunk[] measureRawColumnChunks;
1: 
1:   /**
1:    * file reader which will use to read the block from file
1:    */
1:   private FileReader fileReader;
1: 
1:   /**
1:    * data block
1:    */
1:   private DataRefNode dataBlock;
1: 
1:   private BitSetGroup bitSetGroup;
1: 
1:   private RawBlockletColumnChunks() { }
1: 
1:   public static RawBlockletColumnChunks newInstance(int numberOfDimensionChunk,
1:       int numberOfMeasureChunk, FileReader fileReader, DataRefNode dataBlock) {
1:     RawBlockletColumnChunks instance = new RawBlockletColumnChunks();
1:     instance.dimensionRawColumnChunks = new DimensionRawColumnChunk[numberOfDimensionChunk];
1:     instance.measureRawColumnChunks = new MeasureRawColumnChunk[numberOfMeasureChunk];
1:     instance.fileReader = fileReader;
1:     instance.dataBlock = dataBlock;
1:     return instance;
1:   }
1: 
1:   /**
1:    * @return the dimensionRawColumnChunks
1:    */
1:   public DimensionRawColumnChunk[] getDimensionRawColumnChunks() {
1:     return dimensionRawColumnChunks;
1:   }
1: 
1:   /**
1:    * @param dimensionRawColumnChunks the dimensionRawColumnChunks to set
1:    */
1:   public void setDimensionRawColumnChunks(DimensionRawColumnChunk[] dimensionRawColumnChunks) {
1:     this.dimensionRawColumnChunks = dimensionRawColumnChunks;
1:   }
1: 
1:   /**
1:    * @return the measureRawColumnChunks
1:    */
1:   public MeasureRawColumnChunk[] getMeasureRawColumnChunks() {
1:     return measureRawColumnChunks;
1:   }
1: 
1:   /**
1:    * @param measureRawColumnChunks the measureRawColumnChunks to set
1:    */
1:   public void setMeasureRawColumnChunks(MeasureRawColumnChunk[] measureRawColumnChunks) {
1:     this.measureRawColumnChunks = measureRawColumnChunks;
1:   }
1: 
1:   /**
1:    * @return the fileReader
1:    */
1:   public FileReader getFileReader() {
1:     return fileReader;
1:   }
1: 
1:   /**
1:    * @return the dataBlock
1:    */
1:   public DataRefNode getDataBlock() {
1:     return dataBlock;
1:   }
1: 
1:   public BitSetGroup getBitSetGroup() {
1:     return bitSetGroup;
1:   }
1: 
1:   public void setBitSetGroup(BitSetGroup bitSetGroup) {
1:     this.bitSetGroup = bitSetGroup;
1:   }
1: }
============================================================================