1:8a5ed81: /*
1:8a5ed81:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8a5ed81:  * contributor license agreements.  See the NOTICE file distributed with
1:8a5ed81:  * this work for additional information regarding copyright ownership.
1:8a5ed81:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8a5ed81:  * (the "License"); you may not use this file except in compliance with
1:8a5ed81:  * the License.  You may obtain a copy of the License at
1:8a5ed81:  *
1:8a5ed81:  *    http://www.apache.org/licenses/LICENSE-2.0
1:8a5ed81:  *
1:8a5ed81:  * Unless required by applicable law or agreed to in writing, software
1:8a5ed81:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8a5ed81:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a5ed81:  * See the License for the specific language governing permissions and
1:8a5ed81:  * limitations under the License.
1:8a5ed81:  */
1:8a5ed81: package org.apache.carbondata.core.mutate;
1:8a5ed81: 
1:8a5ed81: import java.util.BitSet;
1:8a5ed81: import java.util.Iterator;
1:8a5ed81: import java.util.Set;
1:8a5ed81: 
1:8a5ed81: /**
1:8a5ed81:  * Class which keep the information about the rows
1:8a5ed81:  * while got deleted
1:8a5ed81:  */
1:8a5ed81: public class DeleteDeltaVo {
1:8a5ed81: 
1:8a5ed81:   /**
1:8a5ed81:    * deleted rows bitset
1:8a5ed81:    */
1:8a5ed81:   private BitSet bitSet;
1:8a5ed81: 
1:8a5ed81:   public DeleteDeltaVo() {
1:8a5ed81:     bitSet = new BitSet();
1:8a5ed81:   }
1:8a5ed81: 
1:8a5ed81:   /**
1:8a5ed81:    * Below method will be used to insert the rows
1:8a5ed81:    * which are deleted
1:8a5ed81:    *
1:8a5ed81:    * @param data
1:8a5ed81:    */
1:8a5ed81:   public void insertData(Set<Integer> data) {
1:8a5ed81:     Iterator<Integer> iterator = data.iterator();
1:8a5ed81:     while (iterator.hasNext()) {
1:8a5ed81:       bitSet.set(iterator.next());
1:8a5ed81:     }
1:8a5ed81:   }
1:8a5ed81: 
1:8a5ed81:   /**
1:8a5ed81:    * below method will be used to check the row is deleted or not
1:8a5ed81:    *
1:8a5ed81:    * @param counter
1:8a5ed81:    * @return
1:8a5ed81:    */
1:8a5ed81:   public boolean containsRow(int counter) {
1:8a5ed81:     return bitSet.get(counter);
1:8a5ed81:   }
1:8a5ed81: }
============================================================================
author:kumarvishal
-------------------------------------------------------------------------------
commit:8a5ed81
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.mutate;
1: 
1: import java.util.BitSet;
1: import java.util.Iterator;
1: import java.util.Set;
1: 
1: /**
1:  * Class which keep the information about the rows
1:  * while got deleted
1:  */
1: public class DeleteDeltaVo {
1: 
1:   /**
1:    * deleted rows bitset
1:    */
1:   private BitSet bitSet;
1: 
1:   public DeleteDeltaVo() {
1:     bitSet = new BitSet();
1:   }
1: 
1:   /**
1:    * Below method will be used to insert the rows
1:    * which are deleted
1:    *
1:    * @param data
1:    */
1:   public void insertData(Set<Integer> data) {
1:     Iterator<Integer> iterator = data.iterator();
1:     while (iterator.hasNext()) {
1:       bitSet.set(iterator.next());
1:     }
1:   }
1: 
1:   /**
1:    * below method will be used to check the row is deleted or not
1:    *
1:    * @param counter
1:    * @return
1:    */
1:   public boolean containsRow(int counter) {
1:     return bitSet.get(counter);
1:   }
1: }
============================================================================