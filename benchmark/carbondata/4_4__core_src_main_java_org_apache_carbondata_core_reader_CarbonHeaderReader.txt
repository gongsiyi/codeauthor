1:b41e48f: /*
1:b41e48f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b41e48f:  * contributor license agreements.  See the NOTICE file distributed with
1:b41e48f:  * this work for additional information regarding copyright ownership.
1:b41e48f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b41e48f:  * (the "License"); you may not use this file except in compliance with
1:b41e48f:  * the License.  You may obtain a copy of the License at
1:b41e48f:  *
1:b41e48f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b41e48f:  *
1:b41e48f:  * Unless required by applicable law or agreed to in writing, software
1:b41e48f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b41e48f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b41e48f:  * See the License for the specific language governing permissions and
1:b41e48f:  * limitations under the License.
1:b41e48f:  */
1:b41e48f: package org.apache.carbondata.core.reader;
2:b41e48f: 
1:b41e48f: import java.io.IOException;
1:f910cfa: import java.util.ArrayList;
1:f910cfa: import java.util.List;
1:b41e48f: 
1:8f1a029: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:f910cfa: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:b41e48f: import org.apache.carbondata.format.FileHeader;
1:f910cfa: 
1:8896a63: import static org.apache.carbondata.core.util.CarbonUtil.thriftColumnSchemaToWrapperColumnSchema;
1:b41e48f: 
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:b41e48f: import org.apache.thrift.TBase;
1:b41e48f: 
1:b41e48f: /**
1:b41e48f:  * Below class to read file header of version3
1:b41e48f:  * carbon data file
1:b41e48f:  */
1:b41e48f: public class CarbonHeaderReader {
1:b41e48f: 
1:b41e48f:   //Fact file path
1:b41e48f:   private String filePath;
1:b41e48f: 
1:8f1a029:   private Configuration configuration;
1:8f1a029: 
1:b41e48f:   public CarbonHeaderReader(String filePath) {
1:b41e48f:     this.filePath = filePath;
1:b41e48f:   }
1:b41e48f: 
1:8f1a029:   public CarbonHeaderReader(String filePath, Configuration configuration) {
1:8f1a029:     this.filePath = filePath;
1:8f1a029:     this.configuration = configuration;
1:8f1a029:   }
1:8f1a029: 
1:f910cfa:   /**
1:b41e48f:    * It reads the metadata in FileFooter thrift object format.
1:b41e48f:    *
1:b41e48f:    * @return
1:b41e48f:    * @throws IOException
1:b41e48f:    */
1:b41e48f:   public FileHeader readHeader() throws IOException {
1:b41e48f:     ThriftReader thriftReader = openThriftReader(filePath);
1:b41e48f:     thriftReader.open();
1:b41e48f:     FileHeader header = (FileHeader) thriftReader.read();
1:b41e48f:     thriftReader.close();
1:b41e48f:     return header;
1:b41e48f:   }
1:b41e48f: 
1:b41e48f:   /**
1:b41e48f:    * Open the thrift reader
1:b41e48f:    *
1:b41e48f:    * @param filePath
1:b41e48f:    * @return
1:b41e48f:    * @throws IOException
1:b41e48f:    */
1:b41e48f:   private ThriftReader openThriftReader(String filePath) {
1:8f1a029:     Configuration conf = configuration != null ? configuration : FileFactory.getConfiguration();
1:b41e48f:     return new ThriftReader(filePath, new ThriftReader.TBaseCreator() {
1:b41e48f:       @Override public TBase create() {
1:b41e48f:         return new FileHeader();
1:b41e48f:       }
1:8f1a029:     }, conf);
1:b41e48f:   }
1:b41e48f: 
1:b41e48f:   /**
1:f910cfa:    * Read and return the schema in the header
1:f910cfa:    */
1:f910cfa:   public List<ColumnSchema> readSchema() throws IOException {
1:f910cfa:     FileHeader fileHeader = readHeader();
1:f910cfa:     List<ColumnSchema> columnSchemaList = new ArrayList<>();
1:f910cfa:     List<org.apache.carbondata.format.ColumnSchema> table_columns = fileHeader.getColumn_schema();
1:f910cfa:     for (org.apache.carbondata.format.ColumnSchema table_column : table_columns) {
1:8896a63:       ColumnSchema col = thriftColumnSchemaToWrapperColumnSchema(table_column);
1:f910cfa:       col.setColumnReferenceId(col.getColumnUniqueId());
1:f910cfa:       columnSchemaList.add(col);
1:f910cfa:     }
1:f910cfa:     return columnSchemaList;
1:f910cfa:   }
1:b41e48f: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.hadoop.conf.Configuration;
/////////////////////////////////////////////////////////////////////////
1:   private Configuration configuration;
1: 
1:   public CarbonHeaderReader(String filePath, Configuration configuration) {
1:     this.filePath = filePath;
1:     this.configuration = configuration;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = configuration != null ? configuration : FileFactory.getConfiguration();
1:     }, conf);
author:xubo245
-------------------------------------------------------------------------------
commit:8896a63
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.core.util.CarbonUtil.thriftColumnSchemaToWrapperColumnSchema;
/////////////////////////////////////////////////////////////////////////
1:       ColumnSchema col = thriftColumnSchemaToWrapperColumnSchema(table_column);
author:Jacky Li
-------------------------------------------------------------------------------
commit:f910cfa
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
0: import static org.apache.carbondata.core.util.CarbonUtil.thriftColumnSchmeaToWrapperColumnSchema;
1: 
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Read and return the schema in the header
1:    */
1:   public List<ColumnSchema> readSchema() throws IOException {
1:     FileHeader fileHeader = readHeader();
1:     List<ColumnSchema> columnSchemaList = new ArrayList<>();
1:     List<org.apache.carbondata.format.ColumnSchema> table_columns = fileHeader.getColumn_schema();
1:     for (org.apache.carbondata.format.ColumnSchema table_column : table_columns) {
0:       ColumnSchema col = thriftColumnSchmeaToWrapperColumnSchema(table_column);
1:       col.setColumnReferenceId(col.getColumnUniqueId());
1:       columnSchemaList.add(col);
1:     }
1:     return columnSchemaList;
1:   }
author:kumarvishal
-------------------------------------------------------------------------------
commit:b41e48f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.reader;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.format.FileHeader;
1: 
1: import org.apache.thrift.TBase;
1: 
1: /**
1:  * Below class to read file header of version3
1:  * carbon data file
1:  */
1: public class CarbonHeaderReader {
1: 
1:   //Fact file path
1:   private String filePath;
1: 
1:   public CarbonHeaderReader(String filePath) {
1:     this.filePath = filePath;
1:   }
1: 
1:   /**
1:    * It reads the metadata in FileFooter thrift object format.
1:    *
1:    * @return
1:    * @throws IOException
1:    */
1:   public FileHeader readHeader() throws IOException {
1:     ThriftReader thriftReader = openThriftReader(filePath);
1:     thriftReader.open();
1:     FileHeader header = (FileHeader) thriftReader.read();
1:     thriftReader.close();
1:     return header;
1:   }
1: 
1:   /**
1:    * Open the thrift reader
1:    *
1:    * @param filePath
1:    * @return
1:    * @throws IOException
1:    */
1:   private ThriftReader openThriftReader(String filePath) {
1: 
1:     return new ThriftReader(filePath, new ThriftReader.TBaseCreator() {
1:       @Override public TBase create() {
1:         return new FileHeader();
1:       }
0:     });
1:   }
1: 
1: }
============================================================================