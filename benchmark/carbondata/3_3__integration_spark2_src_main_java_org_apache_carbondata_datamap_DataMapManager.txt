1:89a12af: /*
1:89a12af:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:89a12af:  * contributor license agreements.  See the NOTICE file distributed with
1:89a12af:  * this work for additional information regarding copyright ownership.
1:89a12af:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:89a12af:  * (the "License"); you may not use this file except in compliance with
1:89a12af:  * the License.  You may obtain a copy of the License at
1:89a12af:  *
1:89a12af:  *    http://www.apache.org/licenses/LICENSE-2.0
1:89a12af:  *
1:89a12af:  * Unless required by applicable law or agreed to in writing, software
1:89a12af:  * distributed under the License is distributed on an "AS IS" BASIS,
1:89a12af:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:89a12af:  * See the License for the specific language governing permissions and
1:89a12af:  * limitations under the License.
1:89a12af:  */
1:89a12af: 
1:89a12af: package org.apache.carbondata.datamap;
1:89a12af: 
1:9db662a: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1:05086e5: import org.apache.carbondata.core.datamap.DataMapProvider;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:89a12af: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:ffddba7: import org.apache.carbondata.spark.util.CarbonScalaUtil;
1:89a12af: 
1:ffddba7: import static org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider.MV;
1:05086e5: import static org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider.PREAGGREGATE;
1:05086e5: import static org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider.TIMESERIES;
1:89a12af: 
1:05086e5: import org.apache.spark.sql.SparkSession;
1:ffddba7: 
1:05086e5: 
1:89a12af: public class DataMapManager {
1:89a12af: 
1:89a12af:   private static DataMapManager INSTANCE;
1:89a12af: 
1:89a12af:   private DataMapManager() { }
1:89a12af: 
1:89a12af:   public static synchronized DataMapManager get() {
1:89a12af:     if (INSTANCE == null) {
1:89a12af:       INSTANCE = new DataMapManager();
1:89a12af:     }
1:89a12af:     return INSTANCE;
1:89a12af:   }
1:89a12af: 
1:89a12af:   /**
1:05086e5:    * Return a DataMapClassProvider instance for specified dataMapSchema.
1:89a12af:    */
1:9db662a:   public DataMapProvider getDataMapProvider(CarbonTable mainTable, DataMapSchema dataMapSchema,
1:9db662a:       SparkSession sparkSession) throws MalformedDataMapCommandException {
1:89a12af:     DataMapProvider provider;
1:d23f7fa:     if (dataMapSchema.getProviderName().equalsIgnoreCase(PREAGGREGATE.toString())) {
1:9db662a:       provider = new PreAggregateDataMapProvider(mainTable, dataMapSchema, sparkSession);
1:d23f7fa:     } else if (dataMapSchema.getProviderName().equalsIgnoreCase(TIMESERIES.toString())) {
1:9db662a:       provider = new TimeseriesDataMapProvider(mainTable, dataMapSchema, sparkSession);
1:ffddba7:     } else if (dataMapSchema.getProviderName().equalsIgnoreCase(MV.toString())) {
1:ffddba7:       provider = (DataMapProvider) CarbonScalaUtil.createDataMapProvider(
1:ffddba7:           "org.apache.carbondata.mv.datamap.MVDataMapProvider",
1:ffddba7:               sparkSession,
1:ffddba7:               mainTable,
1:ffddba7:               dataMapSchema);
1:89a12af:     } else {
1:9db662a:       provider = new IndexDataMapProvider(mainTable, dataMapSchema, sparkSession);
1:89a12af:     }
1:89a12af:     return provider;
1:89a12af:   }
1:89a12af: 
1:89a12af: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:ffddba7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.spark.util.CarbonScalaUtil;
1: import static org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider.MV;
1: 
/////////////////////////////////////////////////////////////////////////
1:     } else if (dataMapSchema.getProviderName().equalsIgnoreCase(MV.toString())) {
1:       provider = (DataMapProvider) CarbonScalaUtil.createDataMapProvider(
1:           "org.apache.carbondata.mv.datamap.MVDataMapProvider",
1:               sparkSession,
1:               mainTable,
1:               dataMapSchema);
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
/////////////////////////////////////////////////////////////////////////
1:   public DataMapProvider getDataMapProvider(CarbonTable mainTable, DataMapSchema dataMapSchema,
1:       SparkSession sparkSession) throws MalformedDataMapCommandException {
1:       provider = new PreAggregateDataMapProvider(mainTable, dataMapSchema, sparkSession);
1:       provider = new TimeseriesDataMapProvider(mainTable, dataMapSchema, sparkSession);
1:       provider = new IndexDataMapProvider(mainTable, dataMapSchema, sparkSession);
commit:89a12af
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.datamap;
1: 
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1: 
0: import static org.apache.carbondata.core.metadata.schema.datamap.DataMapProvider.PREAGGREGATE;
0: import static org.apache.carbondata.core.metadata.schema.datamap.DataMapProvider.TIMESERIES;
1: 
1: public class DataMapManager {
1: 
1:   private static DataMapManager INSTANCE;
1: 
1:   private DataMapManager() { }
1: 
1:   public static synchronized DataMapManager get() {
1:     if (INSTANCE == null) {
1:       INSTANCE = new DataMapManager();
1:     }
1:     return INSTANCE;
1:   }
1: 
1:   /**
0:    * Return a DataMapProvider instance for specified dataMapSchema.
1:    */
0:   public DataMapProvider getDataMapProvider(DataMapSchema dataMapSchema) {
1:     DataMapProvider provider;
0:     if (dataMapSchema.getClassName().equalsIgnoreCase(PREAGGREGATE.toString())) {
0:       provider = new PreAggregateDataMapProvider();
0:     } else if (dataMapSchema.getClassName().equalsIgnoreCase(TIMESERIES.toString())) {
0:       provider = new TimeseriesDataMapProvider();
1:     } else {
0:       provider = new IndexDataMapProvider();
1:     }
1:     return provider;
1:   }
1: 
1: }
author:ravipesala
-------------------------------------------------------------------------------
commit:5f2a748
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       provider = new IndexDataMapProvider();
commit:05086e5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.DataMapProvider;
0: import org.apache.carbondata.core.datamap.IndexDataMapProvider;
0: import org.apache.carbondata.core.metadata.schema.table.DataMapSchemaStorageProvider;
0: import org.apache.carbondata.core.metadata.schema.table.DiskBasedDMSchemaStorageProvider;
0: import org.apache.carbondata.core.util.CarbonProperties;
1: import static org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider.PREAGGREGATE;
1: import static org.apache.carbondata.core.metadata.schema.datamap.DataMapClassProvider.TIMESERIES;
1: 
1: import org.apache.spark.sql.SparkSession;
/////////////////////////////////////////////////////////////////////////
1:    * Return a DataMapClassProvider instance for specified dataMapSchema.
0:   public DataMapProvider getDataMapProvider(DataMapSchema dataMapSchema,
0:       SparkSession sparkSession) {
0:       provider = new PreAggregateDataMapProvider(sparkSession);
0:       provider = new TimeseriesDataMapProvider(sparkSession);
0:       provider = new IndexDataMapProvider(getDataMapSchemaStorageProvider());
0:   private DataMapSchemaStorageProvider getDataMapSchemaStorageProvider() {
0:     return new DiskBasedDMSchemaStorageProvider(
0:         CarbonProperties.getInstance().getSystemFolderLocation());
0:   }
0: 
author:QiangCai
-------------------------------------------------------------------------------
commit:d23f7fa
/////////////////////////////////////////////////////////////////////////
1:     if (dataMapSchema.getProviderName().equalsIgnoreCase(PREAGGREGATE.toString())) {
1:     } else if (dataMapSchema.getProviderName().equalsIgnoreCase(TIMESERIES.toString())) {
============================================================================