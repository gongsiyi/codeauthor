1:5ab0957: /*
1:5ab0957:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5ab0957:  * contributor license agreements.  See the NOTICE file distributed with
1:5ab0957:  * this work for additional information regarding copyright ownership.
1:5ab0957:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5ab0957:  * (the "License"); you may not use this file except in compliance with
1:5ab0957:  * the License.  You may obtain a copy of the License at
1:5ab0957:  *
1:5ab0957:  *    http://www.apache.org/licenses/LICENSE-2.0
1:5ab0957:  *
1:5ab0957:  * Unless required by applicable law or agreed to in writing, software
1:5ab0957:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5ab0957:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5ab0957:  * See the License for the specific language governing permissions and
1:5ab0957:  * limitations under the License.
2:5ab0957:  */
1:5ab0957: 
1:5ab0957: package org.apache.carbondata.core.locks;
1:5ab0957: 
1:5ab0957: import java.io.DataOutputStream;
1:5ab0957: import java.io.IOException;
1:5ab0957: 
1:5ab0957: import org.apache.carbondata.common.logging.LogService;
1:5ab0957: import org.apache.carbondata.common.logging.LogServiceFactory;
1:5ab0957: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:5ab0957: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:0609fc5: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:5ab0957: 
2:5ab0957: /**
1:5ab0957:  * This class is used to handle the S3 File locking.
1:5ab0957:  * This is acheived using the concept of acquiring the data out stream using Append option.
1:5ab0957:  */
1:5ab0957: public class S3FileLock extends AbstractCarbonLock {
1:5ab0957: 
1:5ab0957:   private static final LogService LOGGER =
1:5ab0957:       LogServiceFactory.getLogService(S3FileLock.class.getName());
1:0609fc5: 
1:0609fc5:   /**
1:0609fc5:    * lockFileDir is the directory of the lock file.
1:0609fc5:    */
1:0609fc5:   private String lockFileDir;
1:5ab0957: 
1:5ab0957:   private DataOutputStream dataOutputStream;
1:5ab0957: 
1:5ab0957:   /**
1:5ab0957:    * @param tableIdentifier
1:5ab0957:    * @param lockFile
1:5ab0957:    */
1:5ab0957:   public S3FileLock(AbsoluteTableIdentifier tableIdentifier, String lockFile) {
1:5ab0957:     this(tableIdentifier.getTablePath(), lockFile);
3:5ab0957:   }
1:5ab0957: 
1:5ab0957:   /**
1:5ab0957:    * @param lockFileLocation
1:5ab0957:    * @param lockFile
1:5ab0957:    */
1:5ab0957:   public S3FileLock(String lockFileLocation, String lockFile) {
1:0609fc5:     this.lockFileDir = CarbonTablePath.getLockFilesDirPath(lockFileLocation);
1:0609fc5:     this.lockFilePath = CarbonTablePath.getLockFilePath(lockFileLocation, lockFile);
1:0609fc5:     LOGGER.info("S3 lock path:" + this.lockFilePath);
1:5ab0957:     initRetry();
1:5ab0957:   }
1:5ab0957: 
1:5ab0957:   /* (non-Javadoc)
1:5ab0957:    * @see org.apache.carbondata.core.locks.ICarbonLock#unlock()
1:5ab0957:    */
1:5ab0957:   @Override public boolean unlock() {
1:5ab0957:     boolean status = false;
1:5ab0957:     if (null != dataOutputStream) {
1:5ab0957:       try {
1:5ab0957:         dataOutputStream.close();
1:5ab0957:         status = true;
1:5ab0957:       } catch (IOException e) {
3:5ab0957:         status = false;
1:5ab0957:       }
1:5ab0957:     }
1:5ab0957:     return status;
1:5ab0957:   }
1:5ab0957: 
1:5ab0957:   /* (non-Javadoc)
1:5ab0957:    * @see org.apache.carbondata.core.locks.ICarbonLock#lock()
1:5ab0957:    */
1:5ab0957:   @Override public boolean lock() {
1:5ab0957:     try {
1:0609fc5:       if (!FileFactory.isFileExist(lockFileDir)) {
1:0609fc5:         FileFactory.mkdirs(lockFileDir, FileFactory.getFileType(lockFileDir));
1:0609fc5:       }
1:0609fc5:       if (!FileFactory.isFileExist(lockFilePath)) {
1:0609fc5:         FileFactory.createNewLockFile(lockFilePath, FileFactory.getFileType(lockFilePath));
1:5ab0957:       }
1:5ab0957:       dataOutputStream =
1:0609fc5:           FileFactory.getDataOutputStreamUsingAppend(lockFilePath,
1:0609fc5:               FileFactory.getFileType(lockFilePath));
1:5ab0957:       return true;
1:5ab0957:     } catch (IOException e) {
1:5ab0957:       LOGGER.error(e, e.getMessage());
1:5ab0957:       return false;
1:5ab0957:     }
1:5ab0957:   }
1:5ab0957: 
1:5ab0957: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:560bfbe
/////////////////////////////////////////////////////////////////////////
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:0609fc5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
/////////////////////////////////////////////////////////////////////////
0:    * lockFilePath is the location of the lock file.
0:   private String lockFilePath;
1: 
1:   /**
1:    * lockFileDir is the directory of the lock file.
1:    */
1:   private String lockFileDir;
/////////////////////////////////////////////////////////////////////////
1:     this.lockFileDir = CarbonTablePath.getLockFilesDirPath(lockFileLocation);
1:     this.lockFilePath = CarbonTablePath.getLockFilePath(lockFileLocation, lockFile);
1:     LOGGER.info("S3 lock path:" + this.lockFilePath);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (!FileFactory.isFileExist(lockFileDir)) {
1:         FileFactory.mkdirs(lockFileDir, FileFactory.getFileType(lockFileDir));
1:       }
1:       if (!FileFactory.isFileExist(lockFilePath)) {
1:         FileFactory.createNewLockFile(lockFilePath, FileFactory.getFileType(lockFilePath));
1:           FileFactory.getDataOutputStreamUsingAppend(lockFilePath,
1:               FileFactory.getFileType(lockFilePath));
author:SangeetaGulia
-------------------------------------------------------------------------------
commit:5ab0957
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.locks;
1: 
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: 
1: /**
1:  * This class is used to handle the S3 File locking.
1:  * This is acheived using the concept of acquiring the data out stream using Append option.
1:  */
1: public class S3FileLock extends AbstractCarbonLock {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(S3FileLock.class.getName());
1:   /**
0:    * location s3 file location
1:    */
0:   private String location;
1: 
1:   private DataOutputStream dataOutputStream;
1: 
1:   /**
1:    * @param tableIdentifier
1:    * @param lockFile
1:    */
1:   public S3FileLock(AbsoluteTableIdentifier tableIdentifier, String lockFile) {
1:     this(tableIdentifier.getTablePath(), lockFile);
1:   }
1: 
1:   /**
1:    * @param lockFileLocation
1:    * @param lockFile
1:    */
1:   public S3FileLock(String lockFileLocation, String lockFile) {
0:     this.location = lockFileLocation + CarbonCommonConstants.FILE_SEPARATOR + lockFile;
0:     LOGGER.info("S3 lock path:" + this.location);
1:     initRetry();
1:   }
1: 
1:   /* (non-Javadoc)
1:    * @see org.apache.carbondata.core.locks.ICarbonLock#unlock()
1:    */
1:   @Override public boolean unlock() {
1:     boolean status = false;
1:     if (null != dataOutputStream) {
1:       try {
1:         dataOutputStream.close();
1:         status = true;
1:       } catch (IOException e) {
1:         status = false;
0:       } finally {
0:         CarbonFile carbonFile =
0:             FileFactory.getCarbonFile(location, FileFactory.getFileType(location));
0:         if (carbonFile.exists()) {
0:           if (carbonFile.delete()) {
0:             LOGGER.info("Deleted the lock file " + location);
0:           } else {
0:             LOGGER.error("Not able to delete the lock file " + location);
1:             status = false;
1:           }
0:         } else {
0:           LOGGER.error(
0:               "Not able to delete the lock file because it is not existed in location " + location);
1:           status = false;
1:         }
1:       }
1:     }
1:     return status;
1:   }
1: 
1:   /* (non-Javadoc)
1:    * @see org.apache.carbondata.core.locks.ICarbonLock#lock()
1:    */
1:   @Override public boolean lock() {
1:     try {
0:       if (!FileFactory.isFileExist(location, FileFactory.getFileType(location))) {
0:         FileFactory.createNewLockFile(location, FileFactory.getFileType(location));
1:       }
1:       dataOutputStream =
0:           FileFactory.getDataOutputStreamUsingAppend(location, FileFactory.getFileType(location));
1:       return true;
1:     } catch (IOException e) {
1:       LOGGER.error(e, e.getMessage());
1:       return false;
1:     }
1:   }
1: 
1: }
============================================================================