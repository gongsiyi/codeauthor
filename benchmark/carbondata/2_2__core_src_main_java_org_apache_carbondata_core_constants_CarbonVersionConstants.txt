1:1799642: /*
1:1799642:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1799642:  * contributor license agreements.  See the NOTICE file distributed with
1:1799642:  * this work for additional information regarding copyright ownership.
1:1799642:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1799642:  * (the "License"); you may not use this file except in compliance with
1:1799642:  * the License.  You may obtain a copy of the License at
1:1799642:  *
1:1799642:  *    http://www.apache.org/licenses/LICENSE-2.0
1:1799642:  *
1:1799642:  * Unless required by applicable law or agreed to in writing, software
1:1799642:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1799642:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1799642:  * See the License for the specific language governing permissions and
1:1799642:  * limitations under the License.
1:1799642:  */
1:1799642: 
1:1799642: package org.apache.carbondata.core.constants;
1:1799642: 
1:1799642: import java.io.InputStream;
1:1799642: import java.util.Properties;
1:1799642: 
1:1799642: import org.apache.carbondata.common.logging.LogService;
1:1799642: import org.apache.carbondata.common.logging.LogServiceFactory;
1:1799642: 
1:1799642: public final class CarbonVersionConstants {
1:1799642: 
1:1799642:   private static final LogService LOGGER =
1:1799642:       LogServiceFactory.getLogService(CarbonVersionConstants.class.getName());
1:1799642:   /**
1:1799642:    * the file name of CarbonData version info
1:1799642:    */
1:1799642:   private static final String CARBONDATA_VERSION_INFO_FILE =
1:1799642:       "carbondata-version-info.properties";
1:1799642:   /**
1:1799642:    * current CarbonData version
1:1799642:    */
1:1799642:   public static final String CARBONDATA_VERSION;
1:1799642:   /**
1:1799642:    * which branch current version build from
1:1799642:    */
1:1799642:   public static final String CARBONDATA_BRANCH;
1:1799642:   /**
1:1799642:    * the latest commit revision which current branch point to
1:1799642:    */
1:1799642:   public static final String CARBONDATA_REVISION;
1:1799642:   /**
1:1799642:    * the date of building current version
1:1799642:    */
1:1799642:   public static final String CARBONDATA_BUILD_DATE;
1:1799642: 
1:1202e20:   /**
1:1202e20:    * number of rows per blocklet column page default value for V2 version
1:1202e20:    */
1:1202e20:   public static final int NUMBER_OF_ROWS_PER_BLOCKLET_COLUMN_PAGE_DEFAULT_V2 = 120000;
1:1202e20: 
1:1799642:   static {
1:1799642:     // create input stream for CARBONDATA_VERSION_INFO_FILE
1:1799642:     InputStream resourceStream = Thread.currentThread().getContextClassLoader()
1:1799642:         .getResourceAsStream(CARBONDATA_VERSION_INFO_FILE);
1:1799642:     Properties props = new Properties();
1:1799642:     try {
1:1799642:       // read CARBONDATA_VERSION_INFO_FILE into props
1:1799642:       props.load(resourceStream);
1:1799642:     } catch (Exception e) {
1:1799642:       LOGGER.error(e, "Error loading properties from " + CARBONDATA_VERSION_INFO_FILE);
1:1799642:     } finally {
1:1799642:       if (resourceStream != null) {
1:1799642:         try {
1:1799642:           resourceStream.close();
1:1799642:         } catch (Exception e) {
1:1799642:           LOGGER.error(e, "Error closing CarbonData build info resource stream");
1:1799642:         }
1:1799642:       }
1:1799642:     }
1:1799642:     // set the values
1:1799642:     CARBONDATA_VERSION = props.getProperty("version");
1:1799642:     CARBONDATA_BRANCH = props.getProperty("branch");
1:1799642:     CARBONDATA_REVISION = props.getProperty("revision");
1:1799642:     CARBONDATA_BUILD_DATE = props.getProperty("date");
1:1799642:   }
1:1799642: }
============================================================================
author:akashrn5
-------------------------------------------------------------------------------
commit:1202e20
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * number of rows per blocklet column page default value for V2 version
1:    */
1:   public static final int NUMBER_OF_ROWS_PER_BLOCKLET_COLUMN_PAGE_DEFAULT_V2 = 120000;
1: 
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:1799642
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.constants;
1: 
1: import java.io.InputStream;
1: import java.util.Properties;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: 
1: public final class CarbonVersionConstants {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(CarbonVersionConstants.class.getName());
1:   /**
1:    * the file name of CarbonData version info
1:    */
1:   private static final String CARBONDATA_VERSION_INFO_FILE =
1:       "carbondata-version-info.properties";
1:   /**
1:    * current CarbonData version
1:    */
1:   public static final String CARBONDATA_VERSION;
1:   /**
1:    * which branch current version build from
1:    */
1:   public static final String CARBONDATA_BRANCH;
1:   /**
1:    * the latest commit revision which current branch point to
1:    */
1:   public static final String CARBONDATA_REVISION;
1:   /**
1:    * the date of building current version
1:    */
1:   public static final String CARBONDATA_BUILD_DATE;
1: 
1:   static {
1:     // create input stream for CARBONDATA_VERSION_INFO_FILE
1:     InputStream resourceStream = Thread.currentThread().getContextClassLoader()
1:         .getResourceAsStream(CARBONDATA_VERSION_INFO_FILE);
1:     Properties props = new Properties();
1:     try {
1:       // read CARBONDATA_VERSION_INFO_FILE into props
1:       props.load(resourceStream);
1:     } catch (Exception e) {
1:       LOGGER.error(e, "Error loading properties from " + CARBONDATA_VERSION_INFO_FILE);
1:     } finally {
1:       if (resourceStream != null) {
1:         try {
1:           resourceStream.close();
1:         } catch (Exception e) {
1:           LOGGER.error(e, "Error closing CarbonData build info resource stream");
1:         }
1:       }
1:     }
1:     // set the values
1:     CARBONDATA_VERSION = props.getProperty("version");
1:     CARBONDATA_BRANCH = props.getProperty("branch");
1:     CARBONDATA_REVISION = props.getProperty("revision");
1:     CARBONDATA_BUILD_DATE = props.getProperty("date");
1:   }
1: }
============================================================================