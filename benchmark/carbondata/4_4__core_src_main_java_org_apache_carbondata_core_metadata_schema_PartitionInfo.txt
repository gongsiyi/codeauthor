1:f4d081e: /*
1:f4d081e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f4d081e:  * contributor license agreements.  See the NOTICE file distributed with
1:f4d081e:  * this work for additional information regarding copyright ownership.
1:f4d081e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f4d081e:  * (the "License"); you may not use this file except in compliance with
1:f4d081e:  * the License.  You may obtain a copy of the License at
1:f4d081e:  *
1:f4d081e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f4d081e:  *
1:f4d081e:  * Unless required by applicable law or agreed to in writing, software
1:f4d081e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f4d081e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f4d081e:  * See the License for the specific language governing permissions and
1:f4d081e:  * limitations under the License.
4:f4d081e:  */
3:f4d081e: 
1:f4d081e: package org.apache.carbondata.core.metadata.schema;
1:f4d081e: 
1:80fa37c: import java.io.DataInput;
1:80fa37c: import java.io.DataOutput;
1:80fa37c: import java.io.IOException;
1:f4d081e: import java.io.Serializable;
1:6488bc0: import java.util.ArrayList;
1:f4d081e: import java.util.List;
1:f4d081e: 
1:f4d081e: import org.apache.carbondata.core.metadata.schema.partition.PartitionType;
1:80fa37c: import org.apache.carbondata.core.metadata.schema.table.Writable;
1:f4d081e: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:f4d081e: 
4:f4d081e: /**
1:dae342b:  * Partition information of carbon partition table
1:f4d081e:  */
1:80fa37c: public class PartitionInfo implements Serializable, Writable {
1:f4d081e: 
1:d25fee2:   private static final long serialVersionUID = -0L;
1:d25fee2: 
1:f4d081e:   private List<ColumnSchema> columnSchemaList;
1:f4d081e: 
1:f4d081e:   private PartitionType partitionType;
1:f4d081e: 
1:f4d081e:   /**
1:dae342b:    * range information defined for range partition table
1:f4d081e:    */
1:f4d081e:   private List<String> rangeInfo;
1:f4d081e: 
1:f4d081e:   /**
1:dae342b:    * value list defined for list partition table
1:f4d081e:    */
1:f4d081e:   private List<List<String>> listInfo;
1:f4d081e: 
1:f4d081e:   /**
1:6488bc0:    * total count of partitions
1:f4d081e:    */
1:dae342b:   private int numPartitions;
1:f4d081e: 
1:6488bc0:   /**
1:6488bc0:    * current max partition id, increase only, will be used in alter table partition operation
1:6488bc0:    */
1:80fa37c:   private int maxPartitionId;
1:6488bc0: 
1:6488bc0:   /**
1:6488bc0:    * record the partitionId in the logical ascending order
1:6488bc0:    * initiate when table created and changed when alter table
1:6488bc0:    */
1:6488bc0:   private List<Integer> partitionIds;
1:6488bc0: 
1:80fa37c:   public PartitionInfo() {
1:80fa37c: 
1:80fa37c:   }
1:80fa37c: 
1:f4d081e:   public PartitionInfo(List<ColumnSchema> columnSchemaList, PartitionType partitionType) {
1:f4d081e:     this.columnSchemaList = columnSchemaList;
1:f4d081e:     this.partitionType = partitionType;
1:6488bc0:     this.partitionIds = new ArrayList<>();
3:f4d081e:   }
1:f4d081e: 
1:874764f:   /**
1:874764f:    * add partition means split default partition, add in last directly
1:874764f:    */
1:874764f:   public void  addPartition(int addPartitionCount) {
1:874764f:     for (int i = 0; i < addPartitionCount; i++) {
1:80fa37c:       partitionIds.add(++maxPartitionId);
1:874764f:       numPartitions++;
1:874764f:     }
1:874764f:   }
1:874764f: 
1:874764f:   /**
1:874764f:    * e.g. original partition[0,1,2,3,4,5]
1:874764f:    * split partition 2 to partition 6,7,8 (will not reuse 2)
1:874764f:    * then sourcePartitionId is 2, newPartitionNumbers is 3
1:874764f:    * @param sourcePartitionIndex
1:874764f:    * @param newPartitionNumbers
1:874764f:    */
1:874764f:   public void splitPartition(int sourcePartitionIndex, int newPartitionNumbers) {
1:874764f:     partitionIds.remove(sourcePartitionIndex);
1:874764f:     for (int i = 0; i < newPartitionNumbers; i++) {
1:80fa37c:       partitionIds.add(sourcePartitionIndex + i, ++maxPartitionId);
1:874764f:     }
1:874764f:     numPartitions = numPartitions - 1 + newPartitionNumbers;
1:874764f:   }
1:874764f: 
1:cb51b86:   public void dropPartition(int index) {
1:cb51b86:     partitionIds.remove(index);
1:cb51b86:     numPartitions--;
1:cb51b86:   }
1:cb51b86: 
1:f4d081e:   public List<ColumnSchema> getColumnSchemaList() {
1:f4d081e:     return columnSchemaList;
1:f4d081e:   }
1:f4d081e: 
1:86f6a81:   public void setColumnSchemaList(List<ColumnSchema> columnSchemaList) {
1:86f6a81:     this.columnSchemaList = columnSchemaList;
1:86f6a81:   }
1:86f6a81: 
1:f4d081e:   public PartitionType getPartitionType() {
1:f4d081e:     return partitionType;
1:f4d081e:   }
1:f4d081e: 
1:f4d081e:   public void setRangeInfo(List<String> rangeInfo) {
1:f4d081e:     this.rangeInfo = rangeInfo;
1:f4d081e:   }
1:f4d081e: 
1:f4d081e:   public List<String> getRangeInfo() {
1:f4d081e:     return rangeInfo;
1:f4d081e:   }
1:f4d081e: 
1:f4d081e:   public void setListInfo(List<List<String>> listInfo) {
1:f4d081e:     this.listInfo = listInfo;
1:f4d081e:   }
1:f4d081e: 
1:f4d081e:   public List<List<String>> getListInfo() {
1:f4d081e:     return listInfo;
1:f4d081e:   }
1:f4d081e: 
1:6488bc0:   public void initialize(int partitionNum) {
1:6488bc0:     for (int i = 0; i < partitionNum; i++) {
1:6488bc0:       partitionIds.add(i);
1:6488bc0:     }
1:80fa37c:     maxPartitionId = partitionNum - 1;
1:6488bc0:     numPartitions = partitionNum;
1:6488bc0:   }
1:6488bc0: 
1:6488bc0:   public void setNumPartitions(int numPartitions) {
1:6488bc0:     this.numPartitions = numPartitions;
1:6488bc0:   }
1:6488bc0: 
1:6488bc0:   public int getNumPartitions() {
1:6488bc0:     return numPartitions;
1:6488bc0:   }
1:6488bc0: 
1:80fa37c:   public int getMaxPartitionId() {
1:80fa37c:     return maxPartitionId;
1:6488bc0:   }
1:6488bc0: 
1:80fa37c:   public void setMaxPartitionId(int maxPartitionId) {
1:80fa37c:     this.maxPartitionId = maxPartitionId;
1:6488bc0:   }
1:6488bc0: 
1:6488bc0:   public List<Integer> getPartitionIds() {
1:6488bc0:     return partitionIds;
1:6488bc0:   }
1:6488bc0: 
1:6488bc0:   public void setPartitionIds(List<Integer> partitionIdList) {
1:6488bc0:     this.partitionIds = partitionIdList;
1:6488bc0:   }
1:6488bc0: 
1:6488bc0:   public int getPartitionId(int index) {
1:6488bc0:     return partitionIds.get(index);
1:6488bc0:   }
1:6488bc0: 
1:80fa37c:   @Override
1:80fa37c:   public void write(DataOutput output) throws IOException {
1:80fa37c:     output.writeInt(columnSchemaList.size());
1:80fa37c:     for (ColumnSchema columnSchema: columnSchemaList) {
1:80fa37c:       columnSchema.write(output);
1:80fa37c:     }
1:80fa37c:     output.writeInt(partitionType.ordinal());
1:80fa37c:     if (PartitionType.RANGE.equals(partitionType)) {
1:80fa37c:       output.writeInt(rangeInfo.size());
1:80fa37c:       for (String value: rangeInfo) {
1:80fa37c:         output.writeUTF(value);
1:80fa37c:       }
1:80fa37c:     }
1:80fa37c:     output.writeInt(partitionIds.size());
1:80fa37c:     for (Integer value: partitionIds) {
1:80fa37c:       output.writeInt(value);
1:80fa37c:     }
1:80fa37c:     if (PartitionType.LIST.equals(partitionType)) {
1:80fa37c:       output.writeInt(listInfo.size());
1:80fa37c:       for (List<String> listValue: listInfo) {
1:80fa37c:         output.writeInt(listValue.size());
1:80fa37c:         for (String value: listValue) {
1:80fa37c:           output.writeUTF(value);
1:80fa37c:         }
1:80fa37c:       }
1:80fa37c:     }
1:80fa37c:     output.writeInt(numPartitions);
1:80fa37c:     output.writeInt(maxPartitionId);
1:80fa37c:   }
1:80fa37c: 
1:80fa37c:   @Override
1:80fa37c:   public void readFields(DataInput input) throws IOException {
1:80fa37c:     int colSchemaSize = input.readInt();
1:80fa37c:     this.columnSchemaList = new ArrayList<>(colSchemaSize);
1:80fa37c:     for (int i = 0;i < colSchemaSize; i++) {
1:80fa37c:       ColumnSchema colSchema = new ColumnSchema();
1:80fa37c:       colSchema.readFields(input);
1:80fa37c:       this.columnSchemaList.add(colSchema);
1:80fa37c:     }
1:80fa37c:     this.partitionType = PartitionType.values()[input.readInt()];
1:80fa37c:     if (PartitionType.RANGE.equals(this.partitionType)) {
1:80fa37c:       int rangeSize = input.readInt();
1:80fa37c:       this.rangeInfo = new ArrayList<>(rangeSize);
1:80fa37c:       for (int i = 0; i < rangeSize; i++) {
1:80fa37c:         rangeInfo.add(input.readUTF());
1:80fa37c:       }
1:80fa37c:     }
1:80fa37c:     int partitionIdSize = input.readInt();
1:80fa37c:     partitionIds = new ArrayList<>(partitionIdSize);
1:80fa37c:     for (int i = 0; i < partitionIdSize; i++) {
1:80fa37c:       partitionIds.add(input.readInt());
1:80fa37c:     }
1:80fa37c:     if (PartitionType.LIST.equals(partitionType)) {
1:80fa37c:       int listInfoSize = input.readInt();
1:80fa37c:       int aListSize;
1:80fa37c:       this.listInfo = new ArrayList<>(listInfoSize);
1:80fa37c:       for (int i = 0; i < listInfoSize; i++) {
1:80fa37c:         aListSize = input.readInt();
1:80fa37c:         List<String> aList = new ArrayList<>(aListSize);
1:80fa37c:         for (int j = 0; j < aListSize; j++) {
1:80fa37c:           aList.add(input.readUTF());
1:80fa37c:         }
1:80fa37c:         this.listInfo.add(aList);
1:80fa37c:       }
1:80fa37c:     }
1:80fa37c: 
1:80fa37c:     numPartitions = input.readInt();
1:80fa37c:     maxPartitionId = input.readInt();
1:80fa37c:   }
1:f4d081e: }
============================================================================
author:lionelcao
-------------------------------------------------------------------------------
commit:80fa37c
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import org.apache.carbondata.core.metadata.schema.table.Writable;
1: public class PartitionInfo implements Serializable, Writable {
/////////////////////////////////////////////////////////////////////////
1:   private int maxPartitionId;
/////////////////////////////////////////////////////////////////////////
1:   public PartitionInfo() {
1: 
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:       partitionIds.add(++maxPartitionId);
/////////////////////////////////////////////////////////////////////////
1:       partitionIds.add(sourcePartitionIndex + i, ++maxPartitionId);
/////////////////////////////////////////////////////////////////////////
1:     maxPartitionId = partitionNum - 1;
/////////////////////////////////////////////////////////////////////////
1:   public int getMaxPartitionId() {
1:     return maxPartitionId;
1:   public void setMaxPartitionId(int maxPartitionId) {
1:     this.maxPartitionId = maxPartitionId;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void write(DataOutput output) throws IOException {
1:     output.writeInt(columnSchemaList.size());
1:     for (ColumnSchema columnSchema: columnSchemaList) {
1:       columnSchema.write(output);
1:     }
1:     output.writeInt(partitionType.ordinal());
1:     if (PartitionType.RANGE.equals(partitionType)) {
1:       output.writeInt(rangeInfo.size());
1:       for (String value: rangeInfo) {
1:         output.writeUTF(value);
1:       }
1:     }
1:     output.writeInt(partitionIds.size());
1:     for (Integer value: partitionIds) {
1:       output.writeInt(value);
1:     }
1:     if (PartitionType.LIST.equals(partitionType)) {
1:       output.writeInt(listInfo.size());
1:       for (List<String> listValue: listInfo) {
1:         output.writeInt(listValue.size());
1:         for (String value: listValue) {
1:           output.writeUTF(value);
1:         }
1:       }
1:     }
1:     output.writeInt(numPartitions);
1:     output.writeInt(maxPartitionId);
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput input) throws IOException {
1:     int colSchemaSize = input.readInt();
1:     this.columnSchemaList = new ArrayList<>(colSchemaSize);
1:     for (int i = 0;i < colSchemaSize; i++) {
1:       ColumnSchema colSchema = new ColumnSchema();
1:       colSchema.readFields(input);
1:       this.columnSchemaList.add(colSchema);
1:     }
1:     this.partitionType = PartitionType.values()[input.readInt()];
1:     if (PartitionType.RANGE.equals(this.partitionType)) {
1:       int rangeSize = input.readInt();
1:       this.rangeInfo = new ArrayList<>(rangeSize);
1:       for (int i = 0; i < rangeSize; i++) {
1:         rangeInfo.add(input.readUTF());
1:       }
1:     }
1:     int partitionIdSize = input.readInt();
1:     partitionIds = new ArrayList<>(partitionIdSize);
1:     for (int i = 0; i < partitionIdSize; i++) {
1:       partitionIds.add(input.readInt());
1:     }
1:     if (PartitionType.LIST.equals(partitionType)) {
1:       int listInfoSize = input.readInt();
1:       int aListSize;
1:       this.listInfo = new ArrayList<>(listInfoSize);
1:       for (int i = 0; i < listInfoSize; i++) {
1:         aListSize = input.readInt();
1:         List<String> aList = new ArrayList<>(aListSize);
1:         for (int j = 0; j < aListSize; j++) {
1:           aList.add(input.readUTF());
1:         }
1:         this.listInfo.add(aList);
1:       }
1:     }
1: 
1:     numPartitions = input.readInt();
1:     maxPartitionId = input.readInt();
1:   }
commit:cb51b86
/////////////////////////////////////////////////////////////////////////
1:   public void dropPartition(int index) {
1:     partitionIds.remove(index);
1:     numPartitions--;
1:   }
1: 
commit:874764f
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * add partition means split default partition, add in last directly
1:    */
1:   public void  addPartition(int addPartitionCount) {
1:     for (int i = 0; i < addPartitionCount; i++) {
0:       partitionIds.add(++MAX_PARTITION);
1:       numPartitions++;
1:     }
1:   }
1: 
1:   /**
1:    * e.g. original partition[0,1,2,3,4,5]
1:    * split partition 2 to partition 6,7,8 (will not reuse 2)
1:    * then sourcePartitionId is 2, newPartitionNumbers is 3
1:    * @param sourcePartitionIndex
1:    * @param newPartitionNumbers
1:    */
1:   public void splitPartition(int sourcePartitionIndex, int newPartitionNumbers) {
1:     partitionIds.remove(sourcePartitionIndex);
1:     for (int i = 0; i < newPartitionNumbers; i++) {
0:       partitionIds.add(sourcePartitionIndex + i, ++MAX_PARTITION);
1:     }
1:     numPartitions = numPartitions - 1 + newPartitionNumbers;
1:   }
1: 
commit:6488bc0
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:    * total count of partitions
1:   /**
1:    * current max partition id, increase only, will be used in alter table partition operation
1:    */
0:   private int MAX_PARTITION;
1: 
1:   /**
1:    * record the partitionId in the logical ascending order
1:    * initiate when table created and changed when alter table
1:    */
1:   private List<Integer> partitionIds;
1: 
1:     this.partitionIds = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public void initialize(int partitionNum) {
1:     for (int i = 0; i < partitionNum; i++) {
1:       partitionIds.add(i);
1:     }
0:     MAX_PARTITION = partitionNum - 1;
1:     numPartitions = partitionNum;
1:   }
1: 
1:   public void setNumPartitions(int numPartitions) {
1:     this.numPartitions = numPartitions;
1:   }
1: 
1:   public int getNumPartitions() {
1:     return numPartitions;
1:   }
1: 
0:   public int getMAX_PARTITION() {
0:     return MAX_PARTITION;
1:   }
1: 
0:   public void setMAX_PARTITION(int max_partition) {
0:     this.MAX_PARTITION = max_partition;
1:   }
1: 
1:   public List<Integer> getPartitionIds() {
1:     return partitionIds;
1:   }
1: 
1:   public void setPartitionIds(List<Integer> partitionIdList) {
1:     this.partitionIds = partitionIdList;
1:   }
1: 
1:   public int getPartitionId(int index) {
1:     return partitionIds.get(index);
1:   }
1: 
commit:dae342b
/////////////////////////////////////////////////////////////////////////
1:  * Partition information of carbon partition table
1:    * range information defined for range partition table
1:    * value list defined for list partition table
0:    * number of partitions
1:   private int numPartitions;
/////////////////////////////////////////////////////////////////////////
0:   public void setNumPartitions(int numPartitions) {
0:     this.numPartitions = numPartitions;
0:   public int getNumPartitions() {
0:     return numPartitions;
author:dhatchayani
-------------------------------------------------------------------------------
commit:d25fee2
/////////////////////////////////////////////////////////////////////////
1:   private static final long serialVersionUID = -0L;
1: 
author:QiangCai
-------------------------------------------------------------------------------
commit:86f6a81
/////////////////////////////////////////////////////////////////////////
1:   public void setColumnSchemaList(List<ColumnSchema> columnSchemaList) {
1:     this.columnSchemaList = columnSchemaList;
1:   }
1: 
author:lucao
-------------------------------------------------------------------------------
commit:f4d081e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.schema;
1: 
1: import java.io.Serializable;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.metadata.schema.partition.PartitionType;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: 
1: /**
0:  * Partition Information of carbon partition table
1:  */
0: public class PartitionInfo implements Serializable {
1: 
1:   /**
0:    * Partition columns
1:    */
1:   private List<ColumnSchema> columnSchemaList;
1: 
1:   /**
0:    * partition type
1:    */
1:   private PartitionType partitionType;
1: 
1:   /**
0:    * Range Partition definition
1:    */
1:   private List<String> rangeInfo;
1: 
1:   /**
0:    * List Partition definition
1:    */
1:   private List<List<String>> listInfo;
1: 
1:   /**
0:    * Hash Partition numbers
1:    */
0:   private int hashNumber;
1: 
1:   /**
0:    * For range partition table
0:    * @param columnSchemaList
0:    * @param partitionType
1:    */
1:   public PartitionInfo(List<ColumnSchema> columnSchemaList, PartitionType partitionType) {
1:     this.columnSchemaList = columnSchemaList;
1:     this.partitionType = partitionType;
1:   }
1: 
1:   public List<ColumnSchema> getColumnSchemaList() {
1:     return columnSchemaList;
1:   }
1: 
1:   public PartitionType getPartitionType() {
1:     return partitionType;
1:   }
1: 
0:   public void setHashNumber(int hashNumber) {
0:     this.hashNumber = hashNumber;
1:   }
1: 
0:   public int getHashNumber() {
0:     return hashNumber;
1:   }
1: 
1:   public void setRangeInfo(List<String> rangeInfo) {
1:     this.rangeInfo = rangeInfo;
1:   }
1: 
1:   public List<String> getRangeInfo() {
1:     return rangeInfo;
1:   }
1: 
1:   public void setListInfo(List<List<String>> listInfo) {
1:     this.listInfo = listInfo;
1:   }
1: 
1:   public List<List<String>> getListInfo() {
1:     return listInfo;
1:   }
1: 
1: }
============================================================================