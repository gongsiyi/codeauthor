1:d54dc64: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:d54dc64:  *
1:d54dc64:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d54dc64:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:d54dc64:  */
1:d54dc64: package org.apache.carbondata.core.util;
1:d54dc64: 
1:d54dc64: import java.io.IOException;
1:d54dc64: import java.util.ArrayList;
1:d54dc64: import java.util.List;
1:d54dc64: 
1:ce09aaa: import org.apache.carbondata.core.datastore.block.TableBlockInfo;
1:8f1a029: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:ce09aaa: import org.apache.carbondata.core.metadata.ColumnarFormatVersion;
1:ce09aaa: import org.apache.carbondata.core.metadata.blocklet.BlockletInfo;
1:ce09aaa: import org.apache.carbondata.core.metadata.blocklet.DataFileFooter;
1:ce09aaa: import org.apache.carbondata.core.metadata.blocklet.index.BlockletIndex;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:d54dc64: import org.apache.carbondata.core.reader.CarbonFooterReader;
1:d54dc64: import org.apache.carbondata.format.FileFooter;
1:d54dc64: 
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:8f1a029: 
1:d54dc64: /**
1:d54dc64:  * Below class will be used to convert the thrift object of data file
1:d54dc64:  * meta data to wrapper object for version 2 data file
1:d54dc64:  */
1:d54dc64: 
1:d54dc64: public class DataFileFooterConverter2 extends AbstractDataFileFooterConverter {
1:d54dc64: 
1:8f1a029:   public DataFileFooterConverter2(Configuration configuration) {
1:8f1a029:     super(configuration);
1:8f1a029:   }
1:8f1a029: 
1:8f1a029:   public DataFileFooterConverter2() {
1:8f1a029:     super(FileFactory.getConfiguration());
1:8f1a029:   }
1:8f1a029: 
1:d54dc64:   /**
1:d54dc64:    * Below method will be used to convert thrift file meta to wrapper file meta
1:d54dc64:    */
1:d54dc64:   @Override public DataFileFooter readDataFileFooter(TableBlockInfo tableBlockInfo)
1:d54dc64:       throws IOException {
1:d54dc64:     DataFileFooter dataFileFooter = new DataFileFooter();
1:d54dc64:     CarbonFooterReader reader =
1:d54dc64:         new CarbonFooterReader(tableBlockInfo.getFilePath(), tableBlockInfo.getBlockOffset());
1:d54dc64:     FileFooter footer = reader.readFooter();
1:0ef3fb8:     dataFileFooter.setVersionId(ColumnarFormatVersion.valueOf((short) footer.getVersion()));
1:d54dc64:     dataFileFooter.setNumberOfRows(footer.getNum_rows());
1:d54dc64:     dataFileFooter.setSegmentInfo(getSegmentInfo(footer.getSegment_info()));
1:d54dc64:     List<ColumnSchema> columnSchemaList = new ArrayList<ColumnSchema>();
1:d54dc64:     List<org.apache.carbondata.format.ColumnSchema> table_columns = footer.getTable_columns();
1:d54dc64:     for (int i = 0; i < table_columns.size(); i++) {
1:8896a63:       columnSchemaList.add(thriftColumnSchemaToWrapperColumnSchema(table_columns.get(i)));
2:d54dc64:     }
1:d54dc64:     dataFileFooter.setColumnInTable(columnSchemaList);
1:d54dc64: 
1:d54dc64:     List<org.apache.carbondata.format.BlockletIndex> leaf_node_indices_Thrift =
1:d54dc64:         footer.getBlocklet_index_list();
1:d54dc64:     List<BlockletIndex> blockletIndexList = new ArrayList<BlockletIndex>();
1:d54dc64:     for (int i = 0; i < leaf_node_indices_Thrift.size(); i++) {
1:d54dc64:       BlockletIndex blockletIndex = getBlockletIndex(leaf_node_indices_Thrift.get(i));
1:d54dc64:       blockletIndexList.add(blockletIndex);
1:d54dc64:     }
1:d54dc64:     List<org.apache.carbondata.format.BlockletInfo2> leaf_node_infos_Thrift =
1:d54dc64:         footer.getBlocklet_info_list2();
1:d54dc64:     List<BlockletInfo> blockletInfoList = new ArrayList<BlockletInfo>();
1:d54dc64:     for (int i = 0; i < leaf_node_infos_Thrift.size(); i++) {
1:d54dc64:       BlockletInfo blockletInfo = getBlockletInfo(leaf_node_infos_Thrift.get(i),
1:d54dc64:           getNumberOfDimensionColumns(columnSchemaList));
1:d54dc64:       blockletInfo.setBlockletIndex(blockletIndexList.get(i));
1:d54dc64:       blockletInfoList.add(blockletInfo);
1:d54dc64:     }
1:d54dc64:     dataFileFooter.setBlockletList(blockletInfoList);
1:d54dc64:     dataFileFooter.setBlockletIndex(getBlockletIndexForDataFileFooter(blockletIndexList));
1:d54dc64:     return dataFileFooter;
1:d54dc64:   }
1:d54dc64: 
1:d54dc64:   /**
1:d54dc64:    * Below method is to convert the blocklet info of the thrift to wrapper
1:d54dc64:    * blocklet info
1:d54dc64:    *
1:d54dc64:    * @param blockletInfoThrift blocklet info of the thrift
1:d54dc64:    * @return blocklet info wrapper
1:d54dc64:    */
1:d54dc64:   private BlockletInfo getBlockletInfo(
1:d54dc64:       org.apache.carbondata.format.BlockletInfo2 blockletInfoThrift, int numberOfDimensionColumns) {
1:d54dc64:     BlockletInfo blockletInfo = new BlockletInfo();
1:d54dc64:     List<Long> dimensionColumnChunkOffsets =
1:d54dc64:         blockletInfoThrift.getColumn_data_chunks_offsets().subList(0, numberOfDimensionColumns);
1:d54dc64:     List<Long> measureColumnChunksOffsets = blockletInfoThrift.getColumn_data_chunks_offsets()
1:d54dc64:         .subList(numberOfDimensionColumns,
1:d54dc64:             blockletInfoThrift.getColumn_data_chunks_offsets().size());
1:d54dc64:     List<Short> dimensionColumnChunkLength =
1:d54dc64:         blockletInfoThrift.getColumn_data_chunks_length().subList(0, numberOfDimensionColumns);
1:d54dc64:     List<Short> measureColumnChunksLength = blockletInfoThrift.getColumn_data_chunks_length()
1:d54dc64:         .subList(numberOfDimensionColumns,
1:d54dc64:             blockletInfoThrift.getColumn_data_chunks_offsets().size());
1:d54dc64:     blockletInfo.setDimensionChunkOffsets(dimensionColumnChunkOffsets);
1:d54dc64:     blockletInfo.setMeasureChunkOffsets(measureColumnChunksOffsets);
1:72cb415: 
1:72cb415:     List<Integer> dimensionColumnChunkLengthInteger = new ArrayList<Integer>();
1:72cb415:     List<Integer> measureColumnChunkLengthInteger = new ArrayList<Integer>();
1:72cb415:     for (int i = 0; i < dimensionColumnChunkLength.size(); i++) {
1:72cb415:       dimensionColumnChunkLengthInteger.add(dimensionColumnChunkLength.get(i).intValue());
1:72cb415:     }
1:72cb415:     for (int i = 0; i < measureColumnChunksLength.size(); i++) {
1:72cb415:       measureColumnChunkLengthInteger.add(measureColumnChunksLength.get(i).intValue());
1:72cb415:     }
1:72cb415:     blockletInfo.setDimensionChunksLength(dimensionColumnChunkLengthInteger);
1:72cb415:     blockletInfo.setMeasureChunksLength(measureColumnChunkLengthInteger);
1:d54dc64:     blockletInfo.setNumberOfRows(blockletInfoThrift.getNum_rows());
1:d54dc64:     return blockletInfo;
1:d54dc64:   }
1:d54dc64: 
1:d54dc64:   /**
1:d54dc64:    * Below method will be used to get the number of dimension column
1:d54dc64:    * in carbon column schema
1:d54dc64:    *
1:d54dc64:    * @param columnSchemaList column schema list
1:d54dc64:    * @return number of dimension column
1:d54dc64:    */
1:d54dc64:   private int getNumberOfDimensionColumns(List<ColumnSchema> columnSchemaList) {
1:d54dc64:     int numberOfDimensionColumns = 0;
1:d54dc64:     int previousColumnGroupId = -1;
1:d54dc64:     ColumnSchema columnSchema = null;
1:d54dc64:     for (int i = 0; i < columnSchemaList.size(); i++) {
1:d54dc64:       columnSchema = columnSchemaList.get(i);
1:f911403:       if (columnSchema.isDimensionColumn()) {
2:d54dc64:         numberOfDimensionColumns++;
1:d54dc64:       } else {
1:d54dc64:         break;
1:d54dc64:       }
1:d54dc64:     }
1:d54dc64:     return numberOfDimensionColumns;
1:d54dc64:   }
1:d54dc64: 
1:b681244:   @Override public List<ColumnSchema> getSchema(TableBlockInfo tableBlockInfo) throws IOException {
1:8f1a029:     return new DataFileFooterConverter(configuration).getSchema(tableBlockInfo);
1:b681244:   }
1:d54dc64: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public DataFileFooterConverter2(Configuration configuration) {
1:     super(configuration);
1:   }
1: 
1:   public DataFileFooterConverter2() {
1:     super(FileFactory.getConfiguration());
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     return new DataFileFooterConverter(configuration).getSchema(tableBlockInfo);
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:       if (columnSchema.isDimensionColumn()) {
author:xubo245
-------------------------------------------------------------------------------
commit:8896a63
/////////////////////////////////////////////////////////////////////////
1:       columnSchemaList.add(thriftColumnSchemaToWrapperColumnSchema(table_columns.get(i)));
author:akashrn5
-------------------------------------------------------------------------------
commit:1202e20
/////////////////////////////////////////////////////////////////////////
0:     return new DataFileFooterConverter().getSchema(tableBlockInfo);
author:ravipesala
-------------------------------------------------------------------------------
commit:b681244
/////////////////////////////////////////////////////////////////////////
1:   @Override public List<ColumnSchema> getSchema(TableBlockInfo tableBlockInfo) throws IOException {
0:     return null;
1:   }
commit:72cb415
/////////////////////////////////////////////////////////////////////////
1: 
1:     List<Integer> dimensionColumnChunkLengthInteger = new ArrayList<Integer>();
1:     List<Integer> measureColumnChunkLengthInteger = new ArrayList<Integer>();
1:     for (int i = 0; i < dimensionColumnChunkLength.size(); i++) {
1:       dimensionColumnChunkLengthInteger.add(dimensionColumnChunkLength.get(i).intValue());
1:     }
1:     for (int i = 0; i < measureColumnChunksLength.size(); i++) {
1:       measureColumnChunkLengthInteger.add(measureColumnChunksLength.get(i).intValue());
1:     }
1:     blockletInfo.setDimensionChunksLength(dimensionColumnChunkLengthInteger);
1:     blockletInfo.setMeasureChunksLength(measureColumnChunkLengthInteger);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.block.TableBlockInfo;
1: import org.apache.carbondata.core.metadata.ColumnarFormatVersion;
1: import org.apache.carbondata.core.metadata.blocklet.BlockletInfo;
1: import org.apache.carbondata.core.metadata.blocklet.DataFileFooter;
1: import org.apache.carbondata.core.metadata.blocklet.index.BlockletIndex;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
commit:0ef3fb8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.carbon.ColumnarFormatVersion;
/////////////////////////////////////////////////////////////////////////
1:     dataFileFooter.setVersionId(ColumnarFormatVersion.valueOf((short) footer.getVersion()));
author:kumarvishal
-------------------------------------------------------------------------------
commit:d54dc64
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.util;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.apache.carbondata.core.carbon.datastore.block.TableBlockInfo;
0: import org.apache.carbondata.core.carbon.metadata.blocklet.BlockletInfo;
0: import org.apache.carbondata.core.carbon.metadata.blocklet.DataFileFooter;
0: import org.apache.carbondata.core.carbon.metadata.blocklet.index.BlockletIndex;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.ColumnSchema;
1: import org.apache.carbondata.core.reader.CarbonFooterReader;
1: import org.apache.carbondata.format.FileFooter;
1: 
1: /**
1:  * Below class will be used to convert the thrift object of data file
1:  * meta data to wrapper object for version 2 data file
1:  */
1: 
1: public class DataFileFooterConverter2 extends AbstractDataFileFooterConverter {
1: 
1:   /**
1:    * Below method will be used to convert thrift file meta to wrapper file meta
1:    */
1:   @Override public DataFileFooter readDataFileFooter(TableBlockInfo tableBlockInfo)
1:       throws IOException {
1:     DataFileFooter dataFileFooter = new DataFileFooter();
1:     CarbonFooterReader reader =
1:         new CarbonFooterReader(tableBlockInfo.getFilePath(), tableBlockInfo.getBlockOffset());
1:     FileFooter footer = reader.readFooter();
0:     dataFileFooter.setVersionId((short) footer.getVersion());
1:     dataFileFooter.setNumberOfRows(footer.getNum_rows());
1:     dataFileFooter.setSegmentInfo(getSegmentInfo(footer.getSegment_info()));
1:     List<ColumnSchema> columnSchemaList = new ArrayList<ColumnSchema>();
1:     List<org.apache.carbondata.format.ColumnSchema> table_columns = footer.getTable_columns();
1:     for (int i = 0; i < table_columns.size(); i++) {
0:       columnSchemaList.add(thriftColumnSchmeaToWrapperColumnSchema(table_columns.get(i)));
1:     }
1:     dataFileFooter.setColumnInTable(columnSchemaList);
1: 
1:     List<org.apache.carbondata.format.BlockletIndex> leaf_node_indices_Thrift =
1:         footer.getBlocklet_index_list();
1:     List<BlockletIndex> blockletIndexList = new ArrayList<BlockletIndex>();
1:     for (int i = 0; i < leaf_node_indices_Thrift.size(); i++) {
1:       BlockletIndex blockletIndex = getBlockletIndex(leaf_node_indices_Thrift.get(i));
1:       blockletIndexList.add(blockletIndex);
1:     }
1:     List<org.apache.carbondata.format.BlockletInfo2> leaf_node_infos_Thrift =
1:         footer.getBlocklet_info_list2();
1:     List<BlockletInfo> blockletInfoList = new ArrayList<BlockletInfo>();
1:     for (int i = 0; i < leaf_node_infos_Thrift.size(); i++) {
1:       BlockletInfo blockletInfo = getBlockletInfo(leaf_node_infos_Thrift.get(i),
1:           getNumberOfDimensionColumns(columnSchemaList));
1:       blockletInfo.setBlockletIndex(blockletIndexList.get(i));
1:       blockletInfoList.add(blockletInfo);
1:     }
1:     dataFileFooter.setBlockletList(blockletInfoList);
1:     dataFileFooter.setBlockletIndex(getBlockletIndexForDataFileFooter(blockletIndexList));
1:     return dataFileFooter;
1:   }
1: 
1:   /**
1:    * Below method is to convert the blocklet info of the thrift to wrapper
1:    * blocklet info
1:    *
1:    * @param blockletInfoThrift blocklet info of the thrift
1:    * @return blocklet info wrapper
1:    */
1:   private BlockletInfo getBlockletInfo(
1:       org.apache.carbondata.format.BlockletInfo2 blockletInfoThrift, int numberOfDimensionColumns) {
1:     BlockletInfo blockletInfo = new BlockletInfo();
1:     List<Long> dimensionColumnChunkOffsets =
1:         blockletInfoThrift.getColumn_data_chunks_offsets().subList(0, numberOfDimensionColumns);
1:     List<Long> measureColumnChunksOffsets = blockletInfoThrift.getColumn_data_chunks_offsets()
1:         .subList(numberOfDimensionColumns,
1:             blockletInfoThrift.getColumn_data_chunks_offsets().size());
1:     List<Short> dimensionColumnChunkLength =
1:         blockletInfoThrift.getColumn_data_chunks_length().subList(0, numberOfDimensionColumns);
1:     List<Short> measureColumnChunksLength = blockletInfoThrift.getColumn_data_chunks_length()
1:         .subList(numberOfDimensionColumns,
1:             blockletInfoThrift.getColumn_data_chunks_offsets().size());
1:     blockletInfo.setDimensionChunkOffsets(dimensionColumnChunkOffsets);
1:     blockletInfo.setMeasureChunkOffsets(measureColumnChunksOffsets);
0:     blockletInfo.setDimensionChunksLength(dimensionColumnChunkLength);
0:     blockletInfo.setMeasureChunksLength(measureColumnChunksLength);
1:     blockletInfo.setNumberOfRows(blockletInfoThrift.getNum_rows());
1:     return blockletInfo;
1:   }
1: 
1:   /**
1:    * Below method will be used to get the number of dimension column
1:    * in carbon column schema
1:    *
1:    * @param columnSchemaList column schema list
1:    * @return number of dimension column
1:    */
1:   private int getNumberOfDimensionColumns(List<ColumnSchema> columnSchemaList) {
1:     int numberOfDimensionColumns = 0;
1:     int previousColumnGroupId = -1;
1:     ColumnSchema columnSchema = null;
1:     for (int i = 0; i < columnSchemaList.size(); i++) {
1:       columnSchema = columnSchemaList.get(i);
0:       if (columnSchema.isDimensionColumn() && columnSchema.isColumnar()) {
1:         numberOfDimensionColumns++;
0:       } else if (columnSchema.isDimensionColumn()) {
0:         if (previousColumnGroupId != columnSchema.getColumnGroupId()) {
0:           previousColumnGroupId = columnSchema.getColumnGroupId();
1:           numberOfDimensionColumns++;
1:         }
1:       } else {
1:         break;
1:       }
1:     }
1:     return numberOfDimensionColumns;
1:   }
1: 
1: }
============================================================================