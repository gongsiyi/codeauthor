1:2ccdbb7: /*
1:2ccdbb7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2ccdbb7:  * contributor license agreements.  See the NOTICE file distributed with
1:2ccdbb7:  * this work for additional information regarding copyright ownership.
1:2ccdbb7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2ccdbb7:  * (the "License"); you may not use this file except in compliance with
1:2ccdbb7:  * the License.  You may obtain a copy of the License at
1:2ccdbb7:  *
1:2ccdbb7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:2ccdbb7:  *
1:2ccdbb7:  * Unless required by applicable law or agreed to in writing, software
1:2ccdbb7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ccdbb7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ccdbb7:  * See the License for the specific language governing permissions and
1:2ccdbb7:  * limitations under the License.
1:2ccdbb7:  */
1:2ccdbb7: package org.apache.carbondata.core.datastore.page;
3:2ccdbb7: 
1:2ccdbb7: import java.nio.ByteBuffer;
1:2ccdbb7: import java.util.concurrent.Callable;
1:2ccdbb7: 
1:2ccdbb7: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:2ccdbb7: import org.apache.carbondata.core.datastore.TableSpec;
1:2ccdbb7: import org.apache.carbondata.core.datastore.columnar.UnBlockIndexer;
1:2ccdbb7: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1:2ccdbb7: import org.apache.carbondata.core.datastore.page.encoding.EncodedColumnPage;
1:2ccdbb7: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1:2ccdbb7: import org.apache.carbondata.core.keygenerator.factory.KeyGeneratorFactory;
1:2ccdbb7: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1:2ccdbb7: import org.apache.carbondata.core.util.CarbonUtil;
1:2ccdbb7: import org.apache.carbondata.format.Encoding;
1:2ccdbb7: 
1:2ccdbb7: public class DecoderBasedFallbackEncoder implements Callable<FallbackEncodedColumnPage> {
1:2ccdbb7:   /**
1:2ccdbb7:    * actual local dictionary generated column page
1:2ccdbb7:    */
1:2ccdbb7:   private EncodedColumnPage encodedColumnPage;
1:2ccdbb7: 
1:2ccdbb7:   /**
1:2ccdbb7:    * actual index in the page
1:2ccdbb7:    * this is required as in a blocklet few pages will be local dictionary
1:2ccdbb7:    * encoded and few pages will be plain text encoding
1:2ccdbb7:    * in this case local dictionary encoded page
1:2ccdbb7:    */
1:2ccdbb7:   private int pageIndex;
1:2ccdbb7: 
1:2ccdbb7:   private LocalDictionaryGenerator localDictionaryGenerator;
1:2ccdbb7: 
1:2ccdbb7:   public DecoderBasedFallbackEncoder(EncodedColumnPage encodedColumnPage, int pageIndex,
1:2ccdbb7:       LocalDictionaryGenerator localDictionaryGenerator) {
1:2ccdbb7:     this.encodedColumnPage = encodedColumnPage;
1:2ccdbb7:     this.pageIndex = pageIndex;
1:2ccdbb7:     this.localDictionaryGenerator = localDictionaryGenerator;
1:2ccdbb7:   }
1:2ccdbb7: 
1:2ccdbb7:   @Override public FallbackEncodedColumnPage call() throws Exception {
1:2ccdbb7:     int pageSize =
1:2ccdbb7:         encodedColumnPage.getActualPage().getPageSize();
1:2ccdbb7:     int offset = 0;
1:2ccdbb7:     int[] reverseInvertedIndex = new int[pageSize];
1:2ccdbb7:     for (int i = 0; i < pageSize; i++) {
1:2ccdbb7:       reverseInvertedIndex[i] = i;
1:2ccdbb7:     }
1:2ccdbb7:     int[] rlePage;
1:2ccdbb7: 
1:2ccdbb7:     // uncompress the encoded column page
1:8f08c4a:     byte[] bytes = CompressorFactory.getInstance().getCompressor(
1:8f08c4a:         encodedColumnPage.getActualPage().getColumnPageEncoderMeta().getCompressorName())
1:2ccdbb7:         .unCompressByte(encodedColumnPage.getEncodedData().array(), offset,
1:2ccdbb7:             encodedColumnPage.getPageMetadata().data_page_length);
1:2ccdbb7: 
1:2ccdbb7:     offset += encodedColumnPage.getPageMetadata().data_page_length;
1:2ccdbb7:     ByteBuffer data = ByteBuffer.wrap(encodedColumnPage.getEncodedData().array());
1:2ccdbb7: 
1:2ccdbb7:     // if encoded with inverted index, get all the inverted indexes
1:2ccdbb7:     if (CarbonUtil
1:2ccdbb7:         .hasEncoding(encodedColumnPage.getPageMetadata().encoders, Encoding.INVERTED_INDEX)) {
1:2ccdbb7:       int[] invertedIndexes = CarbonUtil
1:2ccdbb7:           .getUnCompressColumnIndex(encodedColumnPage.getPageMetadata().rowid_page_length, data,
1:2ccdbb7:               offset);
1:2ccdbb7:       offset += encodedColumnPage.getPageMetadata().rowid_page_length;
1:2ccdbb7:       // get all the reverse inverted index
1:2ccdbb7:       reverseInvertedIndex = CarbonUtil.getInvertedReverseIndex(invertedIndexes);
1:2ccdbb7:     }
1:2ccdbb7:     // if rle is applied then uncompress then actual data based on rle
1:2ccdbb7:     if (CarbonUtil.hasEncoding(encodedColumnPage.getPageMetadata().encoders, Encoding.RLE)) {
1:2ccdbb7:       rlePage =
1:2ccdbb7:           CarbonUtil.getIntArray(data, offset, encodedColumnPage.getPageMetadata().rle_page_length);
1:2ccdbb7:       // uncompress the data with rle indexes
1:2ccdbb7:       bytes = UnBlockIndexer
1:2ccdbb7:           .uncompressData(bytes, rlePage, CarbonCommonConstants.LOCAL_DICT_ENCODED_BYTEARRAY_SIZE);
1:2ccdbb7:     }
1:2ccdbb7: 
1:2ccdbb7:     // disable encoding using local dictionary
1:2ccdbb7:     encodedColumnPage.getActualPage().disableLocalDictEncoding();
1:2ccdbb7: 
1:2ccdbb7:     // create a new column page which will have actual data instead of encoded data
1:2ccdbb7:     ColumnPage actualDataColumnPage =
1:8f08c4a:         ColumnPage.newPage(encodedColumnPage.getActualPage().getColumnPageEncoderMeta(),
1:8f08c4a:             encodedColumnPage.getActualPage().getPageSize());
1:2ccdbb7: 
1:2ccdbb7:     // uncompressed data from encoded column page is dictionary data, get the dictionary data using
1:2ccdbb7:     // keygenerator
1:2ccdbb7:     KeyGenerator keyGenerator = KeyGeneratorFactory
1:2ccdbb7:         .getKeyGenerator(new int[] { CarbonCommonConstants.LOCAL_DICTIONARY_MAX + 1 });
1:2ccdbb7: 
1:2ccdbb7:     actualDataColumnPage.setStatsCollector(encodedColumnPage.getActualPage().statsCollector);
1:2ccdbb7: 
1:2ccdbb7:     // get the actual data for each dictionary data and put the actual data in new page
1:2ccdbb7:     int rowId = 0;
1:2ccdbb7:     for (int i = 0; i < pageSize; i++) {
1:2ccdbb7:       int index = reverseInvertedIndex[i] * 3;
1:2ccdbb7:       int keyArray = (int) keyGenerator.getKeyArray(bytes, index)[0];
1:2ccdbb7:       actualDataColumnPage
1:2ccdbb7:           .putBytes(rowId++, localDictionaryGenerator.getDictionaryKeyBasedOnValue(keyArray));
1:2ccdbb7:     }
1:2ccdbb7: 
1:8f08c4a:     // get column spec for existing column page
1:8f08c4a:     TableSpec.ColumnSpec columnSpec = encodedColumnPage.getActualPage().getColumnSpec();
1:2ccdbb7:     FallbackEncodedColumnPage fallBackEncodedColumnPage =
1:2ccdbb7:         CarbonUtil.getFallBackEncodedColumnPage(actualDataColumnPage, pageIndex, columnSpec);
1:2ccdbb7:     // here freeing the memory of new column page created as fallback is done and
1:2ccdbb7:     // fallBackEncodedColumnPage is created using new page of actual data
1:2ccdbb7:     // This is required to free the memory once it is of no use
1:2ccdbb7:     actualDataColumnPage.freeMemory();
1:2ccdbb7:     return fallBackEncodedColumnPage;
1:2ccdbb7:   }
1:2ccdbb7: 
1:2ccdbb7: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     byte[] bytes = CompressorFactory.getInstance().getCompressor(
1:         encodedColumnPage.getActualPage().getColumnPageEncoderMeta().getCompressorName())
/////////////////////////////////////////////////////////////////////////
1:         ColumnPage.newPage(encodedColumnPage.getActualPage().getColumnPageEncoderMeta(),
1:             encodedColumnPage.getActualPage().getPageSize());
/////////////////////////////////////////////////////////////////////////
1:     // get column spec for existing column page
1:     TableSpec.ColumnSpec columnSpec = encodedColumnPage.getActualPage().getColumnSpec();
author:akashrn5
-------------------------------------------------------------------------------
commit:2ccdbb7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datastore.page;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.concurrent.Callable;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.TableSpec;
1: import org.apache.carbondata.core.datastore.columnar.UnBlockIndexer;
1: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1: import org.apache.carbondata.core.datastore.page.encoding.EncodedColumnPage;
1: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1: import org.apache.carbondata.core.keygenerator.factory.KeyGeneratorFactory;
1: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.apache.carbondata.format.Encoding;
1: 
1: public class DecoderBasedFallbackEncoder implements Callable<FallbackEncodedColumnPage> {
1:   /**
1:    * actual local dictionary generated column page
1:    */
1:   private EncodedColumnPage encodedColumnPage;
1: 
1:   /**
1:    * actual index in the page
1:    * this is required as in a blocklet few pages will be local dictionary
1:    * encoded and few pages will be plain text encoding
1:    * in this case local dictionary encoded page
1:    */
1:   private int pageIndex;
1: 
1:   private LocalDictionaryGenerator localDictionaryGenerator;
1: 
1:   public DecoderBasedFallbackEncoder(EncodedColumnPage encodedColumnPage, int pageIndex,
1:       LocalDictionaryGenerator localDictionaryGenerator) {
1:     this.encodedColumnPage = encodedColumnPage;
1:     this.pageIndex = pageIndex;
1:     this.localDictionaryGenerator = localDictionaryGenerator;
1:   }
1: 
1:   @Override public FallbackEncodedColumnPage call() throws Exception {
1:     int pageSize =
1:         encodedColumnPage.getActualPage().getPageSize();
1:     int offset = 0;
1:     int[] reverseInvertedIndex = new int[pageSize];
1:     for (int i = 0; i < pageSize; i++) {
1:       reverseInvertedIndex[i] = i;
1:     }
1:     int[] rlePage;
1: 
1:     // uncompress the encoded column page
0:     byte[] bytes = CompressorFactory.getInstance().getCompressor()
1:         .unCompressByte(encodedColumnPage.getEncodedData().array(), offset,
1:             encodedColumnPage.getPageMetadata().data_page_length);
1: 
1:     offset += encodedColumnPage.getPageMetadata().data_page_length;
1:     ByteBuffer data = ByteBuffer.wrap(encodedColumnPage.getEncodedData().array());
1: 
1:     // if encoded with inverted index, get all the inverted indexes
1:     if (CarbonUtil
1:         .hasEncoding(encodedColumnPage.getPageMetadata().encoders, Encoding.INVERTED_INDEX)) {
1:       int[] invertedIndexes = CarbonUtil
1:           .getUnCompressColumnIndex(encodedColumnPage.getPageMetadata().rowid_page_length, data,
1:               offset);
1:       offset += encodedColumnPage.getPageMetadata().rowid_page_length;
1:       // get all the reverse inverted index
1:       reverseInvertedIndex = CarbonUtil.getInvertedReverseIndex(invertedIndexes);
1:     }
1:     // if rle is applied then uncompress then actual data based on rle
1:     if (CarbonUtil.hasEncoding(encodedColumnPage.getPageMetadata().encoders, Encoding.RLE)) {
1:       rlePage =
1:           CarbonUtil.getIntArray(data, offset, encodedColumnPage.getPageMetadata().rle_page_length);
1:       // uncompress the data with rle indexes
1:       bytes = UnBlockIndexer
1:           .uncompressData(bytes, rlePage, CarbonCommonConstants.LOCAL_DICT_ENCODED_BYTEARRAY_SIZE);
1:     }
1: 
1:     // disable encoding using local dictionary
1:     encodedColumnPage.getActualPage().disableLocalDictEncoding();
1: 
0:     // get column spec for existing column page
0:     TableSpec.ColumnSpec columnSpec = encodedColumnPage.getActualPage().getColumnSpec();
1: 
0:     // get the dataType of column
0:     DataType dataType = encodedColumnPage.getActualPage().getDataType();
1: 
1:     // create a new column page which will have actual data instead of encoded data
1:     ColumnPage actualDataColumnPage =
0:         ColumnPage.newPage(columnSpec, dataType, encodedColumnPage.getActualPage().getPageSize());
1: 
1:     // uncompressed data from encoded column page is dictionary data, get the dictionary data using
1:     // keygenerator
1:     KeyGenerator keyGenerator = KeyGeneratorFactory
1:         .getKeyGenerator(new int[] { CarbonCommonConstants.LOCAL_DICTIONARY_MAX + 1 });
1: 
1:     actualDataColumnPage.setStatsCollector(encodedColumnPage.getActualPage().statsCollector);
1: 
1:     // get the actual data for each dictionary data and put the actual data in new page
1:     int rowId = 0;
1:     for (int i = 0; i < pageSize; i++) {
1:       int index = reverseInvertedIndex[i] * 3;
1:       int keyArray = (int) keyGenerator.getKeyArray(bytes, index)[0];
1:       actualDataColumnPage
1:           .putBytes(rowId++, localDictionaryGenerator.getDictionaryKeyBasedOnValue(keyArray));
1:     }
1: 
1:     FallbackEncodedColumnPage fallBackEncodedColumnPage =
1:         CarbonUtil.getFallBackEncodedColumnPage(actualDataColumnPage, pageIndex, columnSpec);
1:     // here freeing the memory of new column page created as fallback is done and
1:     // fallBackEncodedColumnPage is created using new page of actual data
1:     // This is required to free the memory once it is of no use
1:     actualDataColumnPage.freeMemory();
1:     return fallBackEncodedColumnPage;
1:   }
1: 
1: }
============================================================================