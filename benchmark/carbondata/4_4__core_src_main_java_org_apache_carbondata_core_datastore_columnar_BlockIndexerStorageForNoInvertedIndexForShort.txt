1:b16c308: /*
1:b16c308:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b16c308:  * contributor license agreements.  See the NOTICE file distributed with
1:b16c308:  * this work for additional information regarding copyright ownership.
1:b16c308:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b16c308:  * (the "License"); you may not use this file except in compliance with
1:b16c308:  * the License.  You may obtain a copy of the License at
1:b16c308:  *
1:b16c308:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b16c308:  *
1:b16c308:  * Unless required by applicable law or agreed to in writing, software
1:b16c308:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b16c308:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b16c308:  * See the License for the specific language governing permissions and
1:b16c308:  * limitations under the License.
2:b16c308:  */
1:b16c308: package org.apache.carbondata.core.datastore.columnar;
6:b16c308: 
1:334e647: import java.util.ArrayList;
1:334e647: import java.util.List;
1:334e647: 
1:334e647: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:b16c308: import org.apache.carbondata.core.util.ByteUtil;
1:b16c308: 
2:b16c308: /**
1:b16c308:  * Below class will be used to for no inverted index
1:b16c308:  */
1:b16c308: public class BlockIndexerStorageForNoInvertedIndexForShort implements IndexStorage<short[]> {
1:b16c308: 
1:b16c308:   /**
1:b16c308:    * column data
1:b16c308:    */
1:6a09ee8:   private byte[][] dataPage;
1:b16c308: 
1:334e647:   private short[] dataRlePage;
1:b16c308: 
1:334e647:   public BlockIndexerStorageForNoInvertedIndexForShort(byte[][] dataPage, boolean applyRLE) {
1:6a09ee8:     this.dataPage = dataPage;
1:334e647:     if (applyRLE) {
1:334e647:       List<byte[]> actualDataList = new ArrayList<>();
1:334e647:       for (int i = 0; i < dataPage.length; i++) {
1:334e647:         actualDataList.add(dataPage[i]);
1:e710339:       }
1:334e647:       rleEncodeOnData(actualDataList);
1:334e647:     }
1:334e647:   }
1:334e647: 
1:334e647:   private void rleEncodeOnData(List<byte[]> actualDataList) {
1:334e647:     byte[] prvKey = actualDataList.get(0);
1:334e647:     List<byte[]> list = new ArrayList<>(actualDataList.size() / 2);
1:334e647:     list.add(actualDataList.get(0));
1:334e647:     short counter = 1;
1:334e647:     short start = 0;
1:334e647:     List<Short> map = new ArrayList<>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:334e647:     for (int i = 1; i < actualDataList.size(); i++) {
1:334e647:       if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(prvKey, actualDataList.get(i)) != 0) {
1:334e647:         prvKey = actualDataList.get(i);
1:334e647:         list.add(actualDataList.get(i));
1:334e647:         map.add(start);
1:334e647:         map.add(counter);
1:334e647:         start += counter;
1:334e647:         counter = 1;
1:334e647:         continue;
1:334e647:       }
1:334e647:       counter++;
1:334e647:     }
1:334e647:     map.add(start);
1:334e647:     map.add(counter);
1:334e647:     // if rle is index size is more than 70% then rle wont give any benefit
1:334e647:     // so better to avoid rle index and write data as it is
1:334e647:     boolean useRle = (((list.size() + map.size()) * 100) / actualDataList.size()) < 70;
1:334e647:     if (useRle) {
1:334e647:       this.dataPage = convertToDataPage(list);
1:334e647:       dataRlePage = convertToArray(map);
1:f1f0e3e:     } else {
1:334e647:       this.dataPage = convertToDataPage(actualDataList);
1:334e647:       dataRlePage = new short[0];
1:f1f0e3e:     }
1:f1f0e3e:   }
1:b16c308: 
1:334e647:   private short[] convertToArray(List<Short> list) {
1:334e647:     short[] shortArray = new short[list.size()];
1:334e647:     for (int i = 0; i < shortArray.length; i++) {
1:334e647:       shortArray[i] = list.get(i);
1:334e647:     }
1:334e647:     return shortArray;
1:334e647:   }
1:334e647: 
1:334e647:   private byte[][] convertToDataPage(List<byte[]> list) {
1:334e647:     byte[][] shortArray = new byte[list.size()][];
1:334e647:     for (int i = 0; i < shortArray.length; i++) {
1:334e647:       shortArray[i] = list.get(i);
1:334e647:     }
1:334e647:     return shortArray;
1:334e647:   }
1:334e647: 
1:6a09ee8:   public short[] getDataRlePage() {
1:334e647:     return dataRlePage;
1:f1f0e3e:   }
1:b16c308: 
1:334e647:   @Override public int getDataRlePageLengthInBytes() {
1:334e647:     if (dataRlePage != null) {
1:334e647:       return dataRlePage.length * 2;
1:334e647:     } else {
1:334e647:       return 0;
1:334e647:     }
1:f1f0e3e:   }
1:b16c308: 
1:b16c308:   /**
1:b16c308:    * no use
1:b16c308:    *
1:b16c308:    * @return
1:b16c308:    */
1:6a09ee8:   public short[] getRowIdPage() {
2:b16c308:     return new short[0];
1:bc3e684:   }
1:bc3e684: 
1:334e647:   @Override public int getRowIdPageLengthInBytes() {
1:bc3e684:     return 0;
1:bc3e684:   }
1:bc3e684: 
1:b16c308:   /**
1:b16c308:    * no use
1:b16c308:    *
1:b16c308:    * @return
1:b16c308:    */
1:6a09ee8:   public short[] getRowIdRlePage() {
1:b16c308:     return new short[0];
1:bc3e684:   }
1:bc3e684: 
1:334e647:   @Override public int getRowIdRlePageLengthInBytes() {
1:bc3e684:     return 0;
11:b16c308:   }
1:b16c308: 
1:b16c308:   /**
1:6a09ee8:    * @return the dataPage
1:b16c308:    */
1:6a09ee8:   public byte[][] getDataPage() {
1:6a09ee8:     return dataPage;
1:b16c308:   }
1:b16c308: }
============================================================================
author:kumarvishal09
-------------------------------------------------------------------------------
commit:334e647
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
/////////////////////////////////////////////////////////////////////////
1:   private short[] dataRlePage;
1:   public BlockIndexerStorageForNoInvertedIndexForShort(byte[][] dataPage, boolean applyRLE) {
1:     if (applyRLE) {
1:       List<byte[]> actualDataList = new ArrayList<>();
1:       for (int i = 0; i < dataPage.length; i++) {
1:         actualDataList.add(dataPage[i]);
1:       rleEncodeOnData(actualDataList);
1:     }
1:   }
1: 
1:   private void rleEncodeOnData(List<byte[]> actualDataList) {
1:     byte[] prvKey = actualDataList.get(0);
1:     List<byte[]> list = new ArrayList<>(actualDataList.size() / 2);
1:     list.add(actualDataList.get(0));
1:     short counter = 1;
1:     short start = 0;
1:     List<Short> map = new ArrayList<>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:     for (int i = 1; i < actualDataList.size(); i++) {
1:       if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(prvKey, actualDataList.get(i)) != 0) {
1:         prvKey = actualDataList.get(i);
1:         list.add(actualDataList.get(i));
1:         map.add(start);
1:         map.add(counter);
1:         start += counter;
1:         counter = 1;
1:         continue;
1:       }
1:       counter++;
1:     }
1:     map.add(start);
1:     map.add(counter);
1:     // if rle is index size is more than 70% then rle wont give any benefit
1:     // so better to avoid rle index and write data as it is
1:     boolean useRle = (((list.size() + map.size()) * 100) / actualDataList.size()) < 70;
1:     if (useRle) {
1:       this.dataPage = convertToDataPage(list);
1:       dataRlePage = convertToArray(map);
1:       this.dataPage = convertToDataPage(actualDataList);
1:       dataRlePage = new short[0];
1:   private short[] convertToArray(List<Short> list) {
1:     short[] shortArray = new short[list.size()];
1:     for (int i = 0; i < shortArray.length; i++) {
1:       shortArray[i] = list.get(i);
1:     }
1:     return shortArray;
1:   }
1: 
1:   private byte[][] convertToDataPage(List<byte[]> list) {
1:     byte[][] shortArray = new byte[list.size()][];
1:     for (int i = 0; i < shortArray.length; i++) {
1:       shortArray[i] = list.get(i);
1:     }
1:     return shortArray;
1:   }
1: 
1:     return dataRlePage;
1:   @Override public int getDataRlePageLengthInBytes() {
1:     if (dataRlePage != null) {
1:       return dataRlePage.length * 2;
1:     } else {
1:       return 0;
1:     }
/////////////////////////////////////////////////////////////////////////
1:   @Override public int getRowIdPageLengthInBytes() {
/////////////////////////////////////////////////////////////////////////
1:   @Override public int getRowIdRlePageLengthInBytes() {
/////////////////////////////////////////////////////////////////////////
commit:e710339
/////////////////////////////////////////////////////////////////////////
0:       boolean isNoDictonary, boolean isVarchar) {
0:     int lVFormatLength = 2;
0:     if (isVarchar) {
0:       lVFormatLength = 4;
1:     }
/////////////////////////////////////////////////////////////////////////
0:             .compareTo(min, lVFormatLength, min.length - lVFormatLength, this.dataPage[i],
0:                 lVFormatLength, this.dataPage[i].length - lVFormatLength);
0:             .compareTo(max, lVFormatLength, max.length - lVFormatLength, this.dataPage[i],
0:                 lVFormatLength, this.dataPage[i].length - lVFormatLength);
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
0:   @Override
0:   public int getDataRlePageLengthInBytes() {
1:     return 0;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:   @Override
0:   public int getRowIdPageLengthInBytes() {
1:     return 0;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:   @Override
0:   public int getRowIdRlePageLengthInBytes() {
0:     return 0;
1:   }
1: 
commit:6a09ee8
/////////////////////////////////////////////////////////////////////////
1:   private byte[][] dataPage;
/////////////////////////////////////////////////////////////////////////
0:   public BlockIndexerStorageForNoInvertedIndexForShort(byte[][] dataPage,
1:     this.dataPage = dataPage;
0:     min = this.dataPage[0];
0:     max = this.dataPage[0];
0:     totalSize += this.dataPage[0].length;
0:       for (int i = 1; i < this.dataPage.length; i++) {
0:         totalSize += this.dataPage[i].length;
0:         minCompare = ByteUtil.compare(min, this.dataPage[i]);
0:         maxCompare = ByteUtil.compare(max, this.dataPage[i]);
0:           min = this.dataPage[i];
0:           max = this.dataPage[i];
0:       for (int i = 1; i < this.dataPage.length; i++) {
0:         totalSize += this.dataPage[i].length;
0:             .compareTo(min, 2, min.length - 2, this.dataPage[i], 2, this.dataPage[i].length - 2);
0:             .compareTo(max, 2, max.length - 2, this.dataPage[i], 2, this.dataPage[i].length - 2);
0:           min = this.dataPage[i];
0:           max = this.dataPage[i];
1:   public short[] getDataRlePage() {
/////////////////////////////////////////////////////////////////////////
1:   public short[] getRowIdPage() {
/////////////////////////////////////////////////////////////////////////
1:   public short[] getRowIdRlePage() {
1:    * @return the dataPage
1:   public byte[][] getDataPage() {
1:     return dataPage;
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
0:   public BlockIndexerStorageForNoInvertedIndexForShort(byte[][] keyBlockInput,
0:       boolean isNoDictonary) {
commit:98df130
/////////////////////////////////////////////////////////////////////////
0:   public BlockIndexerStorageForNoInvertedIndexForShort(byte[][] keyBlockInput) {
author:rahulforallp
-------------------------------------------------------------------------------
commit:f1f0e3e
/////////////////////////////////////////////////////////////////////////
0:   public BlockIndexerStorageForNoInvertedIndexForShort(byte[][] keyBlockInput,boolean isNoDictonary)
0:   {
0:     if (!isNoDictonary) {
0:       for (int i = 1; i < keyBlock.length; i++) {
0:         totalSize += keyBlock[i].length;
0:         minCompare = ByteUtil.compare(min, keyBlock[i]);
0:         maxCompare = ByteUtil.compare(max, keyBlock[i]);
0:         if (minCompare > 0) {
0:           min = keyBlock[i];
1:         }
0:         if (maxCompare < 0) {
0:           max = keyBlock[i];
1:         }
1:     } else {
0:       for (int i = 1; i < keyBlock.length; i++) {
0:         totalSize += keyBlock[i].length;
0:         minCompare = ByteUtil.UnsafeComparer.INSTANCE
0:             .compareTo(min, 2, min.length - 2, keyBlock[i], 2, keyBlock[i].length - 2);
0:         maxCompare = ByteUtil.UnsafeComparer.INSTANCE
0:             .compareTo(max, 2, max.length - 2, keyBlock[i], 2, keyBlock[i].length - 2);
0:         if (minCompare > 0) {
0:           min = keyBlock[i];
1:         }
0:         if (maxCompare < 0) {
0:           max = keyBlock[i];
1:         }
author:kumarvishal
-------------------------------------------------------------------------------
commit:b16c308
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datastore.columnar;
1: 
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: /**
1:  * Below class will be used to for no inverted index
1:  */
1: public class BlockIndexerStorageForNoInvertedIndexForShort implements IndexStorage<short[]> {
1: 
1:   /**
1:    * column data
1:    */
0:   private byte[][] keyBlock;
1: 
1:   /**
0:    * total number of rows
1:    */
0:   private int totalSize;
1: 
0:   private byte[] min;
0:   private byte[] max;
1: 
0:   public BlockIndexerStorageForNoInvertedIndexForShort(byte[][] keyBlockInput,
0:       boolean isNoDictionary) {
0:     this.keyBlock = keyBlockInput;
0:     min = keyBlock[0];
0:     max = keyBlock[0];
0:     totalSize += keyBlock[0].length;
0:     int minCompare = 0;
0:     int maxCompare = 0;
0:     for (int i = 1; i < keyBlock.length; i++) {
0:       totalSize += keyBlock[i].length;
0:       minCompare = ByteUtil.compare(min, keyBlock[i]);
0:       maxCompare = ByteUtil.compare(max, keyBlock[i]);
0:       if (minCompare > 0) {
0:         min = keyBlock[i];
1:       }
0:       if (maxCompare < 0) {
0:         max = keyBlock[i];
1:       }
1:     }
1:   }
1: 
0:   @Override public short[] getDataIndexMap() {
1:     return new short[0];
1:   }
1: 
0:   @Override public int getTotalSize() {
0:     return totalSize;
1:   }
1: 
0:   @Override public boolean isAlreadySorted() {
0:     return true;
1:   }
1: 
1:   /**
1:    * no use
1:    *
1:    * @return
1:    */
0:   @Override public short[] getDataAfterComp() {
1:     return new short[0];
1:   }
1: 
1:   /**
1:    * no use
1:    *
1:    * @return
1:    */
0:   @Override public short[] getIndexMap() {
1:     return new short[0];
1:   }
1: 
1:   /**
0:    * @return the keyBlock
1:    */
0:   public byte[][] getKeyBlock() {
0:     return keyBlock;
1:   }
1: 
0:   @Override public byte[] getMin() {
0:     return min;
1:   }
1: 
0:   @Override public byte[] getMax() {
0:     return max;
1:   }
1: }
============================================================================