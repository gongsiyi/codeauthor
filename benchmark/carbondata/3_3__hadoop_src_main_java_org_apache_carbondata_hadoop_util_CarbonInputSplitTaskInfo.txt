1:49ad2bb: /*
1:49ad2bb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:49ad2bb:  * contributor license agreements.  See the NOTICE file distributed with
1:49ad2bb:  * this work for additional information regarding copyright ownership.
1:49ad2bb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:49ad2bb:  * (the "License"); you may not use this file except in compliance with
1:49ad2bb:  * the License.  You may obtain a copy of the License at
1:49ad2bb:  *
1:49ad2bb:  *    http://www.apache.org/licenses/LICENSE-2.0
1:49ad2bb:  *
1:49ad2bb:  * Unless required by applicable law or agreed to in writing, software
1:49ad2bb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:49ad2bb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:49ad2bb:  * See the License for the specific language governing permissions and
1:49ad2bb:  * limitations under the License.
1:49ad2bb:  */
1:49ad2bb: 
1:49ad2bb: package org.apache.carbondata.hadoop.util;
1:49ad2bb: 
1:49ad2bb: import java.io.IOException;
1:49ad2bb: import java.util.ArrayList;
1:49ad2bb: import java.util.Arrays;
1:49ad2bb: import java.util.HashSet;
1:49ad2bb: import java.util.List;
1:49ad2bb: import java.util.Map;
1:49ad2bb: import java.util.Objects;
1:49ad2bb: import java.util.Set;
1:49ad2bb: import java.util.TreeMap;
1:49ad2bb: 
1:49ad2bb: import org.apache.carbondata.core.datastore.block.Distributable;
1:49ad2bb: import org.apache.carbondata.hadoop.CarbonInputSplit;
1:49ad2bb: 
1:49ad2bb: public class CarbonInputSplitTaskInfo implements Distributable {
1:49ad2bb: 
1:49ad2bb:   private final List<CarbonInputSplit> carbonBlockInfoList;
1:49ad2bb: 
1:49ad2bb:   private final String taskId;
1:49ad2bb: 
1:49ad2bb:   public String getTaskId() {
1:49ad2bb:     return taskId;
1:49ad2bb:   }
1:49ad2bb: 
1:49ad2bb:   public List<CarbonInputSplit> getCarbonInputSplitList() {
1:49ad2bb:     return carbonBlockInfoList;
1:49ad2bb:   }
1:49ad2bb: 
1:49ad2bb:   public CarbonInputSplitTaskInfo(String taskId, List<CarbonInputSplit> carbonSplitListInfo) {
1:49ad2bb:     this.taskId = taskId;
1:49ad2bb:     this.carbonBlockInfoList = carbonSplitListInfo;
1:49ad2bb:   }
1:49ad2bb: 
1:49ad2bb:   @Override public String[] getLocations() {
1:49ad2bb:     Set<String> locations = new HashSet<String>();
1:49ad2bb:     for (CarbonInputSplit splitInfo : carbonBlockInfoList) {
1:49ad2bb:       try {
1:49ad2bb:         locations.addAll(Arrays.asList(splitInfo.getLocations()));
1:49ad2bb:       } catch (IOException e) {
1:49ad2bb:         throw new RuntimeException("Fail to get location of split: " + splitInfo, e);
1:49ad2bb:       }
1:49ad2bb:     }
1:49ad2bb:     locations.toArray(new String[locations.size()]);
1:49ad2bb:     List<String> nodes = CarbonInputSplitTaskInfo.maxNoNodes(carbonBlockInfoList);
1:49ad2bb:     return nodes.toArray(new String[nodes.size()]);
1:49ad2bb:   }
1:49ad2bb: 
1:49ad2bb:   @Override public int compareTo(Distributable o) {
1:49ad2bb:     return taskId.compareTo(((CarbonInputSplitTaskInfo) o).getTaskId());
1:49ad2bb:   }
1:49ad2bb: 
1:1be0778:   @Override public boolean equals(Object obj) {
1:1be0778:     if (this == obj) {
1:1be0778:       return true;
1:1be0778:     }
1:1be0778: 
1:1be0778:     if (!(obj instanceof CarbonInputSplitTaskInfo)) {
1:1be0778:       return false;
1:1be0778:     }
1:1be0778: 
1:1be0778:     CarbonInputSplitTaskInfo that = (CarbonInputSplitTaskInfo)obj;
1:1be0778:     return null != taskId ? 0 == taskId.compareTo(that.taskId) : null == that.taskId;
1:1be0778:   }
1:1be0778: 
1:1be0778:   @Override public int hashCode() {
1:1be0778:     return null != taskId ? taskId.hashCode() : 0;
1:1be0778:   }
1:1be0778: 
1:49ad2bb:   /**
1:49ad2bb:    * Finding which node has the maximum number of blocks for it.
1:49ad2bb:    *
1:086b06d:    * @param splitList
1:49ad2bb:    * @return
1:49ad2bb:    */
1:49ad2bb:   public static List<String> maxNoNodes(List<CarbonInputSplit> splitList) {
1:49ad2bb:     boolean useIndex = true;
1:49ad2bb:     Integer maxOccurence = 0;
1:49ad2bb:     String maxNode = null;
1:49ad2bb:     Map<String, Integer> nodeAndOccurenceMapping = new TreeMap<>();
1:49ad2bb: 
1:49ad2bb:     // populate the map of node and number of occurences of that node.
1:49ad2bb:     for (CarbonInputSplit split : splitList) {
1:49ad2bb:       try {
1:49ad2bb:         for (String node : split.getLocations()) {
1:49ad2bb:           Integer nodeOccurence = nodeAndOccurenceMapping.get(node);
1:49ad2bb:           if (null == nodeOccurence) {
1:49ad2bb:             nodeAndOccurenceMapping.put(node, 1);
1:49ad2bb:           } else {
1:49ad2bb:             nodeOccurence++;
1:49ad2bb:           }
1:49ad2bb:         }
1:49ad2bb:       } catch (IOException e) {
1:49ad2bb:         throw new RuntimeException("Fail to get location of split: " + split, e);
1:49ad2bb:       }
1:49ad2bb:     }
1:49ad2bb:     Integer previousValueOccurence = null;
1:49ad2bb: 
1:49ad2bb:     // check which node is occured maximum times.
1:49ad2bb:     for (Map.Entry<String, Integer> entry : nodeAndOccurenceMapping.entrySet()) {
1:49ad2bb:       // finding the maximum node.
1:49ad2bb:       if (entry.getValue() > maxOccurence) {
1:49ad2bb:         maxOccurence = entry.getValue();
1:49ad2bb:         maxNode = entry.getKey();
1:49ad2bb:       }
1:49ad2bb:       // first time scenario. initialzing the previous value.
1:49ad2bb:       if (null == previousValueOccurence) {
1:49ad2bb:         previousValueOccurence = entry.getValue();
1:49ad2bb:       } else {
1:49ad2bb:         // for the case where all the nodes have same number of blocks then
1:49ad2bb:         // we need to return complete list instead of max node.
1:49ad2bb:         if (!Objects.equals(previousValueOccurence, entry.getValue())) {
1:49ad2bb:           useIndex = false;
1:49ad2bb:         }
1:49ad2bb:       }
1:49ad2bb:     }
1:49ad2bb: 
1:49ad2bb:     // if all the nodes have equal occurence then returning the complete key set.
1:49ad2bb:     if (useIndex) {
1:49ad2bb:       return new ArrayList<>(nodeAndOccurenceMapping.keySet());
1:49ad2bb:     }
1:49ad2bb: 
1:49ad2bb:     // if any max node is found then returning the max node.
1:49ad2bb:     List<String> node = new ArrayList<>(1);
1:49ad2bb:     node.add(maxNode);
1:49ad2bb:     return node;
1:49ad2bb:   }
1:49ad2bb: 
1:49ad2bb: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:1be0778
/////////////////////////////////////////////////////////////////////////
1:   @Override public boolean equals(Object obj) {
1:     if (this == obj) {
1:       return true;
1:     }
1: 
1:     if (!(obj instanceof CarbonInputSplitTaskInfo)) {
1:       return false;
1:     }
1: 
1:     CarbonInputSplitTaskInfo that = (CarbonInputSplitTaskInfo)obj;
1:     return null != taskId ? 0 == taskId.compareTo(that.taskId) : null == that.taskId;
1:   }
1: 
1:   @Override public int hashCode() {
1:     return null != taskId ? taskId.hashCode() : 0;
1:   }
1: 
author:QiangCai
-------------------------------------------------------------------------------
commit:086b06d
/////////////////////////////////////////////////////////////////////////
1:    * @param splitList
author:sounakr
-------------------------------------------------------------------------------
commit:49ad2bb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.hadoop.util;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Objects;
1: import java.util.Set;
1: import java.util.TreeMap;
1: 
1: import org.apache.carbondata.core.datastore.block.Distributable;
1: import org.apache.carbondata.hadoop.CarbonInputSplit;
1: 
1: public class CarbonInputSplitTaskInfo implements Distributable {
1: 
1:   private final List<CarbonInputSplit> carbonBlockInfoList;
1: 
1:   private final String taskId;
1: 
1:   public String getTaskId() {
1:     return taskId;
1:   }
1: 
1:   public List<CarbonInputSplit> getCarbonInputSplitList() {
1:     return carbonBlockInfoList;
1:   }
1: 
1:   public CarbonInputSplitTaskInfo(String taskId, List<CarbonInputSplit> carbonSplitListInfo) {
1:     this.taskId = taskId;
1:     this.carbonBlockInfoList = carbonSplitListInfo;
1:   }
1: 
1:   @Override public String[] getLocations() {
1:     Set<String> locations = new HashSet<String>();
1:     for (CarbonInputSplit splitInfo : carbonBlockInfoList) {
1:       try {
1:         locations.addAll(Arrays.asList(splitInfo.getLocations()));
1:       } catch (IOException e) {
1:         throw new RuntimeException("Fail to get location of split: " + splitInfo, e);
1:       }
1:     }
1:     locations.toArray(new String[locations.size()]);
1:     List<String> nodes = CarbonInputSplitTaskInfo.maxNoNodes(carbonBlockInfoList);
1:     return nodes.toArray(new String[nodes.size()]);
1:   }
1: 
1:   @Override public int compareTo(Distributable o) {
1:     return taskId.compareTo(((CarbonInputSplitTaskInfo) o).getTaskId());
1:   }
1: 
1:   /**
1:    * Finding which node has the maximum number of blocks for it.
1:    *
0:    * @param blockList
1:    * @return
1:    */
1:   public static List<String> maxNoNodes(List<CarbonInputSplit> splitList) {
1:     boolean useIndex = true;
1:     Integer maxOccurence = 0;
1:     String maxNode = null;
1:     Map<String, Integer> nodeAndOccurenceMapping = new TreeMap<>();
1: 
1:     // populate the map of node and number of occurences of that node.
1:     for (CarbonInputSplit split : splitList) {
1:       try {
1:         for (String node : split.getLocations()) {
1:           Integer nodeOccurence = nodeAndOccurenceMapping.get(node);
1:           if (null == nodeOccurence) {
1:             nodeAndOccurenceMapping.put(node, 1);
1:           } else {
1:             nodeOccurence++;
1:           }
1:         }
1:       } catch (IOException e) {
1:         throw new RuntimeException("Fail to get location of split: " + split, e);
1:       }
1:     }
1:     Integer previousValueOccurence = null;
1: 
1:     // check which node is occured maximum times.
1:     for (Map.Entry<String, Integer> entry : nodeAndOccurenceMapping.entrySet()) {
1:       // finding the maximum node.
1:       if (entry.getValue() > maxOccurence) {
1:         maxOccurence = entry.getValue();
1:         maxNode = entry.getKey();
1:       }
1:       // first time scenario. initialzing the previous value.
1:       if (null == previousValueOccurence) {
1:         previousValueOccurence = entry.getValue();
1:       } else {
1:         // for the case where all the nodes have same number of blocks then
1:         // we need to return complete list instead of max node.
1:         if (!Objects.equals(previousValueOccurence, entry.getValue())) {
1:           useIndex = false;
1:         }
1:       }
1:     }
1: 
1:     // if all the nodes have equal occurence then returning the complete key set.
1:     if (useIndex) {
1:       return new ArrayList<>(nodeAndOccurenceMapping.keySet());
1:     }
1: 
1:     // if any max node is found then returning the max node.
1:     List<String> node = new ArrayList<>(1);
1:     node.add(maxNode);
1:     return node;
1:   }
1: 
1: }
============================================================================