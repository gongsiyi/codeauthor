1:b434346: /*
1:b434346:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b434346:  * contributor license agreements.  See the NOTICE file distributed with
1:b434346:  * this work for additional information regarding copyright ownership.
1:b434346:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b434346:  * (the "License"); you may not use this file except in compliance with
1:b434346:  * the License.  You may obtain a copy of the License at
1:b434346:  *
1:b434346:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b434346:  *
1:b434346:  * Unless required by applicable law or agreed to in writing, software
1:b434346:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b434346:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b434346:  * See the License for the specific language governing permissions and
1:b434346:  * limitations under the License.
1:b434346:  */
1:b434346: package org.apache.carbondata.core.indexstore;
3:b681244: 
1:d35fbaf: import java.io.DataInput;
1:d35fbaf: import java.io.DataOutput;
1:d35fbaf: import java.io.IOException;
1:b434346: import java.io.Serializable;
1:b681244: 
1:d35fbaf: import org.apache.carbondata.core.metadata.schema.table.Writable;
1:d35fbaf: 
1:b434346: /**
1:b434346:  * Blocklet
1:b434346:  */
1:d35fbaf: public class Blocklet implements Writable,Serializable {
1:b681244: 
1:3ff574d:   /** file path of this blocklet */
1:9db662a:   private String filePath;
1:b681244: 
1:3ff574d:   /** id to identify the blocklet inside the block (it is a sequential number) */
1:b434346:   private String blockletId;
1:b681244: 
1:f4a58c5:   /**
1:f4a58c5:    * flag to specify whether to consider blocklet Id in equals and hashcode comparison. This is
1:f4a58c5:    * because when CACHE_LEVEL='BLOCK' which is default value, the blocklet ID returned by
1:f4a58c5:    * BlockDataMap pruning will always be -1 and other datamaps will give the the correct blocklet
1:f4a58c5:    * ID. Therefore if we compare -1 with correct blocklet ID the comparison will become wrong and
1:f4a58c5:    * always false will be returned resulting in incorrect result. Default value for flag is true.
1:f4a58c5:    */
1:f4a58c5:   private boolean compareBlockletIdForObjectMatching = true;
1:f4a58c5: 
1:9db662a:   public Blocklet(String filePath, String blockletId) {
1:9db662a:     this.filePath = filePath;
1:b434346:     this.blockletId = blockletId;
1:b681244:   }
1:b681244: 
1:f4a58c5:   public Blocklet(String filePath, String blockletId, boolean compareBlockletIdForObjectMatching) {
1:f4a58c5:     this(filePath, blockletId);
1:f4a58c5:     this.compareBlockletIdForObjectMatching = compareBlockletIdForObjectMatching;
1:f4a58c5:   }
1:f4a58c5: 
1:d35fbaf:   // For serialization purpose
1:d35fbaf:   public Blocklet() {
1:b681244:   }
1:b681244: 
1:b434346:   public String getBlockletId() {
1:b434346:     return blockletId;
1:d35fbaf:   }
1:d35fbaf: 
1:9db662a:   public String getFilePath() {
1:9db662a:     return filePath;
1:b681244:   }
1:b681244: 
1:d35fbaf:   @Override public void write(DataOutput out) throws IOException {
1:9db662a:     out.writeUTF(filePath);
1:d35fbaf:     out.writeUTF(blockletId);
1:d35fbaf:   }
1:d35fbaf: 
1:d35fbaf:   @Override public void readFields(DataInput in) throws IOException {
1:9db662a:     filePath = in.readUTF();
1:d35fbaf:     blockletId = in.readUTF();
1:d35fbaf:   }
1:b681244: 
1:56330ae:   @Override public boolean equals(Object o) {
1:56330ae:     if (this == o) return true;
1:56330ae:     if (o == null || getClass() != o.getClass()) return false;
1:b681244: 
1:56330ae:     Blocklet blocklet = (Blocklet) o;
1:b681244: 
1:9db662a:     if (filePath != null ? !filePath.equals(blocklet.filePath) : blocklet.filePath != null) {
1:56330ae:       return false;
1:b681244:     }
1:f4a58c5:     if (!compareBlockletIdForObjectMatching) {
1:f4a58c5:       return true;
1:f4a58c5:     }
1:56330ae:     return blockletId != null ?
1:56330ae:         blockletId.equals(blocklet.blockletId) :
1:56330ae:         blocklet.blockletId == null;
1:b681244:   }
1:b681244: 
1:56330ae:   @Override public int hashCode() {
1:9db662a:     int result = filePath != null ? filePath.hashCode() : 0;
1:f4a58c5:     result = 31 * result;
1:f4a58c5:     if (compareBlockletIdForObjectMatching) {
1:f4a58c5:       result += blockletId != null ? blockletId.hashCode() : 0;
1:f4a58c5:     }
1:56330ae:     return result;
1:b681244:   }
1:b681244: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:f4a58c5
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * flag to specify whether to consider blocklet Id in equals and hashcode comparison. This is
1:    * because when CACHE_LEVEL='BLOCK' which is default value, the blocklet ID returned by
1:    * BlockDataMap pruning will always be -1 and other datamaps will give the the correct blocklet
1:    * ID. Therefore if we compare -1 with correct blocklet ID the comparison will become wrong and
1:    * always false will be returned resulting in incorrect result. Default value for flag is true.
1:    */
1:   private boolean compareBlockletIdForObjectMatching = true;
1: 
1:   public Blocklet(String filePath, String blockletId, boolean compareBlockletIdForObjectMatching) {
1:     this(filePath, blockletId);
1:     this.compareBlockletIdForObjectMatching = compareBlockletIdForObjectMatching;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     if (!compareBlockletIdForObjectMatching) {
1:       return true;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     result = 31 * result;
1:     if (compareBlockletIdForObjectMatching) {
1:       result += blockletId != null ? blockletId.hashCode() : 0;
1:     }
author:Jacky Li
-------------------------------------------------------------------------------
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1:   private String filePath;
1:   public Blocklet(String filePath, String blockletId) {
1:     this.filePath = filePath;
/////////////////////////////////////////////////////////////////////////
1:   public String getFilePath() {
1:     return filePath;
1:     out.writeUTF(filePath);
1:     filePath = in.readUTF();
/////////////////////////////////////////////////////////////////////////
1:     if (filePath != null ? !filePath.equals(blocklet.filePath) : blocklet.filePath != null) {
/////////////////////////////////////////////////////////////////////////
1:     int result = filePath != null ? filePath.hashCode() : 0;
commit:3ff574d
/////////////////////////////////////////////////////////////////////////
1:   /** file path of this blocklet */
1:   /** id to identify the blocklet inside the block (it is a sequential number) */
author:ravipesala
-------------------------------------------------------------------------------
commit:8b33ab2
/////////////////////////////////////////////////////////////////////////
0:   private String taskName;
0:   public Blocklet(String taskName, String blockletId) {
0:     this.taskName = taskName;
/////////////////////////////////////////////////////////////////////////
0:   public String getTaskName() {
0:     return taskName;
0:     out.writeUTF(taskName);
0:     taskName = in.readUTF();
/////////////////////////////////////////////////////////////////////////
0:     if (taskName != null ? !taskName.equals(blocklet.taskName) : blocklet.taskName != null) {
/////////////////////////////////////////////////////////////////////////
0:     int result = taskName != null ? taskName.hashCode() : 0;
commit:d35fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import org.apache.carbondata.core.metadata.schema.table.Writable;
1: 
1: public class Blocklet implements Writable,Serializable {
0:   private String blockId;
0:   public Blocklet(String blockId, String blockletId) {
0:     this.blockId = blockId;
1:   // For serialization purpose
1:   public Blocklet() {
0:   public String getBlockId() {
0:     return blockId;
1:   }
1: 
1:   @Override public void write(DataOutput out) throws IOException {
0:     out.writeUTF(blockId);
1:     out.writeUTF(blockletId);
1:   }
1: 
1:   @Override public void readFields(DataInput in) throws IOException {
0:     blockId = in.readUTF();
1:     blockletId = in.readUTF();
1:   }
commit:b681244
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: 
0: import org.apache.hadoop.fs.FileSystem;
0: import org.apache.hadoop.fs.LocatedFileStatus;
0: import org.apache.hadoop.fs.Path;
0: import org.apache.hadoop.fs.RemoteIterator;
1: 
0:   private Path path;
1: 
0:   private String segmentId;
0:   private BlockletDetailInfo detailInfo;
1: 
0:   private long length;
1: 
0:   private String[] location;
1: 
0:     this.path = new Path(path);
0:   public Path getPath() {
1: 
0:   public BlockletDetailInfo getDetailInfo() {
0:     return detailInfo;
1:   }
1: 
0:   public void setDetailInfo(BlockletDetailInfo detailInfo) {
0:     this.detailInfo = detailInfo;
1:   }
1: 
0:   public void updateLocations() throws IOException {
0:     FileSystem fs = path.getFileSystem(FileFactory.getConfiguration());
0:     RemoteIterator<LocatedFileStatus> iter = fs.listLocatedStatus(path);
0:     LocatedFileStatus fileStatus = iter.next();
0:     location = fileStatus.getBlockLocations()[0].getHosts();
0:     length = fileStatus.getLen();
1:   }
1: 
0:   public String[] getLocations() throws IOException {
0:     return location;
1:   }
1: 
0:   public long getLength() throws IOException {
0:     return length;
1:   }
1: 
0:   public String getSegmentId() {
0:     return segmentId;
1:   }
1: 
0:   public void setSegmentId(String segmentId) {
0:     this.segmentId = segmentId;
1:   }
1: 
commit:b434346
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.indexstore;
0: 
1: import java.io.Serializable;
0: 
1: /**
1:  * Blocklet
1:  */
0: public class Blocklet implements Serializable {
0: 
0:   private String path;
0: 
1:   private String blockletId;
0: 
0:   public Blocklet(String path, String blockletId) {
0:     this.path = path;
1:     this.blockletId = blockletId;
0:   }
0: 
0:   public String getPath() {
0:     return path;
0:   }
0: 
1:   public String getBlockletId() {
1:     return blockletId;
0:   }
0: }
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:56330ae
/////////////////////////////////////////////////////////////////////////
0: 
1:   @Override public boolean equals(Object o) {
1:     if (this == o) return true;
1:     if (o == null || getClass() != o.getClass()) return false;
0: 
1:     Blocklet blocklet = (Blocklet) o;
0: 
0:     if (blockId != null ? !blockId.equals(blocklet.blockId) : blocklet.blockId != null) {
1:       return false;
0:     }
1:     return blockletId != null ?
1:         blockletId.equals(blocklet.blockletId) :
1:         blocklet.blockletId == null;
0:   }
0: 
1:   @Override public int hashCode() {
0:     int result = blockId != null ? blockId.hashCode() : 0;
0:     result = 31 * result + (blockletId != null ? blockletId.hashCode() : 0);
1:     return result;
0:   }
commit:28f78b2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:1e21cd1
/////////////////////////////////////////////////////////////////////////
0:   public String getPath() {
0:     return path;
/////////////////////////////////////////////////////////////////////////
0:     Path path = new Path(this.path);
0:     FileSystem fs = path.getFileSystem(FileFactory.getConfiguration());
0:     RemoteIterator<LocatedFileStatus> iter = fs.listLocatedStatus(path);
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
0:   private String path;
/////////////////////////////////////////////////////////////////////////
0:     this.path = path;
0:     return new Path(path);
/////////////////////////////////////////////////////////////////////////
0:     Path fspath = new Path(path);
0:     FileSystem fs = fspath.getFileSystem(FileFactory.getConfiguration());
0:     RemoteIterator<LocatedFileStatus> iter = fs.listLocatedStatus(fspath);
============================================================================