1:874764f: /*
1:874764f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:874764f:  * contributor license agreements.  See the NOTICE file distributed with
1:874764f:  * this work for additional information regarding copyright ownership.
1:874764f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:874764f:  * (the "License"); you may not use this file except in compliance with
1:874764f:  * the License.  You may obtain a copy of the License at
1:874764f:  *
1:874764f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:874764f:  *
1:874764f:  * Unless required by applicable law or agreed to in writing, software
1:874764f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:874764f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:874764f:  * See the License for the specific language governing permissions and
1:874764f:  * limitations under the License.
1:874764f:  */
1:874764f: package org.apache.carbondata.core.scan.result.iterator;
2:874764f: 
1:874764f: import org.apache.carbondata.common.CarbonIterator;
1:daa6465: import org.apache.carbondata.core.scan.result.RowBatch;
1:874764f: 
1:874764f: public class PartitionSpliterRawResultIterator extends CarbonIterator<Object[]> {
1:874764f: 
1:daa6465:   private CarbonIterator<RowBatch> iterator;
1:daa6465:   private RowBatch batch;
1:874764f:   private int counter;
1:874764f: 
1:daa6465:   public PartitionSpliterRawResultIterator(CarbonIterator<RowBatch> iterator) {
1:874764f:     this.iterator = iterator;
1:874764f:   }
1:874764f: 
1:874764f:   @Override public boolean hasNext() {
1:874764f:     if (null == batch || checkBatchEnd(batch)) {
1:874764f:       if (iterator.hasNext()) {
1:874764f:         batch = iterator.next();
1:874764f:         counter = 0;
1:874764f:       } else {
1:874764f:         return false;
1:874764f:       }
1:874764f:     }
1:874764f: 
1:874764f:     return !checkBatchEnd(batch);
1:874764f:   }
1:874764f: 
1:874764f:   @Override public Object[] next() {
1:874764f:     if (batch == null) {
1:874764f:       batch = iterator.next();
1:874764f:     }
1:874764f:     if (!checkBatchEnd(batch)) {
1:874764f:       return batch.getRawRow(counter++);
1:874764f:     } else {
1:874764f:       batch = iterator.next();
1:874764f:       counter = 0;
1:874764f:     }
1:874764f:     return batch.getRawRow(counter++);
1:874764f:   }
1:874764f: 
1:874764f:   /**
1:874764f:    * To check if the batch is processed completely
1:874764f:    * @param batch
1:874764f:    * @return
1:874764f:    */
1:daa6465:   private boolean checkBatchEnd(RowBatch batch) {
1:874764f:     return !(counter < batch.getSize());
1:874764f:   }
1:874764f: 
1:874764f: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.result.RowBatch;
1:   private CarbonIterator<RowBatch> iterator;
1:   private RowBatch batch;
1:   public PartitionSpliterRawResultIterator(CarbonIterator<RowBatch> iterator) {
/////////////////////////////////////////////////////////////////////////
1:   private boolean checkBatchEnd(RowBatch batch) {
author:lionelcao
-------------------------------------------------------------------------------
commit:874764f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.result.iterator;
1: 
1: import org.apache.carbondata.common.CarbonIterator;
0: import org.apache.carbondata.common.logging.LogService;
0: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.scan.result.BatchResult;
1: 
1: public class PartitionSpliterRawResultIterator extends CarbonIterator<Object[]> {
1: 
0:   private CarbonIterator<BatchResult> iterator;
0:   private BatchResult batch;
1:   private int counter;
1: 
0:   private static final LogService LOGGER =
0:       LogServiceFactory.getLogService(PartitionSpliterRawResultIterator.class.getName());
1: 
0:   public PartitionSpliterRawResultIterator(CarbonIterator<BatchResult> iterator) {
1:     this.iterator = iterator;
1:   }
1: 
1:   @Override public boolean hasNext() {
1:     if (null == batch || checkBatchEnd(batch)) {
1:       if (iterator.hasNext()) {
1:         batch = iterator.next();
1:         counter = 0;
1:       } else {
1:         return false;
1:       }
1:     }
1: 
1:     return !checkBatchEnd(batch);
1:   }
1: 
1:   @Override public Object[] next() {
1:     if (batch == null) {
1:       batch = iterator.next();
1:     }
1:     if (!checkBatchEnd(batch)) {
1:       return batch.getRawRow(counter++);
1:     } else {
1:       batch = iterator.next();
1:       counter = 0;
1:     }
1:     return batch.getRawRow(counter++);
1:   }
1: 
1:   /**
1:    * To check if the batch is processed completely
1:    * @param batch
1:    * @return
1:    */
0:   private boolean checkBatchEnd(BatchResult batch) {
1:     return !(counter < batch.getSize());
1:   }
1: 
1: }
============================================================================