1:98df130: /*
1:98df130:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:98df130:  * contributor license agreements.  See the NOTICE file distributed with
1:98df130:  * this work for additional information regarding copyright ownership.
1:98df130:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:98df130:  * (the "License"); you may not use this file except in compliance with
1:98df130:  * the License.  You may obtain a copy of the License at
1:e710339:  *
1:98df130:  *    http://www.apache.org/licenses/LICENSE-2.0
2:98df130:  *
1:98df130:  * Unless required by applicable law or agreed to in writing, software
1:98df130:  * distributed under the License is distributed on an "AS IS" BASIS,
1:98df130:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:98df130:  * See the License for the specific language governing permissions and
1:98df130:  * limitations under the License.
1:e710339:  */
9:98df130: 
1:98df130: package org.apache.carbondata.core.datastore.page;
1:6297ea0: 
1:98df130: import java.util.List;
1:e710339: import java.util.Map;
1:6297ea0: 
1:e710339: import org.apache.carbondata.core.datastore.TableSpec;
1:8f08c4a: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:e710339: import org.apache.carbondata.core.datastore.page.statistics.DummyStatsCollector;
1:438b442: import org.apache.carbondata.core.datastore.page.statistics.PrimitivePageStatsCollector;
1:438b442: import org.apache.carbondata.core.datastore.row.ComplexColumnInfo;
1:e710339: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1:e710339: import org.apache.carbondata.core.memory.MemoryException;
1:438b442: import org.apache.carbondata.core.metadata.datatype.DataType;
1:e710339: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:438b442: import org.apache.carbondata.core.util.DataTypeUtil;
1:edda248: 
2:e710339: /**
1:e710339:  * holds the complex columndata and its children data
1:e710339:  */
1:dc83b2a: public class ComplexColumnPage {
1:dc83b2a: 
1:e710339:   /**
1:e710339:    * number of columns
1:e710339:    */
1:438b442:   private int complexColumnIndex;
1:98df130: 
1:e710339:   /**
1:e710339:    * type of each column
1:e710339:    */
1:438b442:   private List<ComplexColumnInfo> complexColumnInfoList;
1:98df130: 
1:e710339:   /**
1:e710339:    * column page for each type
1:e710339:    */
1:e710339:   private ColumnPage[] columnPages;
1:e710339: 
1:e710339:   /**
1:e710339:    * to maintain the number of record added for each type
1:e710339:    */
1:e710339:   private int[] currentRowIdList;
1:e710339: 
1:438b442:   public ComplexColumnPage(List<ComplexColumnInfo> complexColumnInfoList) {
1:438b442:     this.complexColumnIndex = complexColumnInfoList.size();
1:438b442:     this.complexColumnInfoList = complexColumnInfoList;
1:438b442:     this.columnPages = new ColumnPage[this.complexColumnIndex];
1:438b442:     this.currentRowIdList = new int[complexColumnIndex];
5:98df130:   }
1:6297ea0: 
1:e710339:   /**
1:e710339:    * below method will be used to initlize the column page of complex type
1:e710339:    * @param columnToDictMap
1:e710339:    * dictionary map
1:e710339:    * @param pageSize
1:e710339:    * number of records
1:e710339:    * @throws MemoryException
1:e710339:    * if memory is not sufficient
1:e710339:    */
1:8f08c4a:   public void initialize(Map<String, LocalDictionaryGenerator> columnToDictMap, int pageSize,
1:8f08c4a:       String columnCompressor) throws MemoryException {
1:438b442:     DataType dataType;
1:e710339:     for (int i = 0; i < this.columnPages.length; i++) {
1:438b442:       LocalDictionaryGenerator localDictionaryGenerator =
1:438b442:           columnToDictMap.get(complexColumnInfoList.get(i).getColumnNames());
1:438b442:       TableSpec.ColumnSpec spec = getColumnSpec(i, localDictionaryGenerator);
1:e710339:       if (null == localDictionaryGenerator) {
1:438b442:         dataType = complexColumnInfoList.get(i).getColumnDataTypes();
1:438b442:         if (isColumnPageBasedOnDataType(i)) {
1:438b442:           // no dictionary primitive types need adaptive encoding,
1:438b442:           // hence store as actual value instead of byte array
1:8f08c4a:           this.columnPages[i] = ColumnPage.newPage(
1:8f08c4a:               new ColumnPageEncoderMeta(spec, dataType, columnCompressor), pageSize);
1:438b442:           this.columnPages[i].setStatsCollector(PrimitivePageStatsCollector.newInstance(dataType));
1:438b442:         } else {
1:8f08c4a:           this.columnPages[i] = ColumnPage.newPage(
1:8f08c4a:               new ColumnPageEncoderMeta(spec, DataTypes.BYTE_ARRAY, columnCompressor), pageSize);
1:438b442:           this.columnPages[i].setStatsCollector(new DummyStatsCollector());
1:438b442:         }
1:e710339:       } else {
1:8f08c4a:         this.columnPages[i] = ColumnPage.newLocalDictPage(
1:8f08c4a:             new ColumnPageEncoderMeta(spec, DataTypes.BYTE_ARRAY, columnCompressor), pageSize,
1:8f08c4a:             localDictionaryGenerator, true);
2:e710339:         this.columnPages[i].setStatsCollector(new DummyStatsCollector());
1:e710339:       }
1:6297ea0:     }
1:a5af0ff:   }
1:e710339: 
1:438b442:   private TableSpec.ColumnSpec getColumnSpec(int columnPageIndex,
1:438b442:       LocalDictionaryGenerator localDictionaryGenerator) {
1:438b442:     if ((localDictionaryGenerator == null) && isColumnPageBasedOnDataType(columnPageIndex)) {
1:438b442:       return TableSpec.ColumnSpec
1:438b442:           .newInstance(complexColumnInfoList.get(columnPageIndex).getColumnNames(),
1:438b442:               complexColumnInfoList.get(columnPageIndex).getColumnDataTypes(),
1:438b442:               complexColumnInfoList.get(columnPageIndex).getComplexColumnType());
1:438b442:     } else {
1:438b442:       return TableSpec.ColumnSpec
1:438b442:           .newInstance(complexColumnInfoList.get(columnPageIndex).getColumnNames(),
1:438b442:               DataTypes.BYTE_ARRAY,
1:438b442:               complexColumnInfoList.get(columnPageIndex).getComplexColumnType());
1:438b442:     }
1:438b442:   }
1:438b442: 
1:438b442:   private boolean isColumnPageBasedOnDataType(int columnPageIndex) {
1:438b442:     DataType dataType = complexColumnInfoList.get(columnPageIndex).getColumnDataTypes();
1:438b442:     if ((complexColumnInfoList.get(columnPageIndex).isNoDictionary() &&
1:438b442:         !((DataTypes.isStructType(dataType) ||
1:438b442:             DataTypes.isArrayType(dataType) ||
1:fb6dffe:             DataTypes.isMapType(dataType) ||
1:438b442:             (dataType == DataTypes.STRING) ||
1:438b442:             (dataType == DataTypes.VARCHAR) ||
1:438b442:             (dataType == DataTypes.DATE) ||
1:438b442:             DataTypes.isDecimal(dataType))))) {
1:438b442:       // For all these above condition the ColumnPage should be Taken as BYTE_ARRAY
1:438b442:       // for all other cases make Column Page Based on each DataType.
1:438b442:       return true;
1:438b442:     } else {
1:438b442:       return false;
1:438b442:     }
1:98df130:   }
1:dc83b2a: 
1:e710339:   /**
1:438b442:    *
1:438b442:    * @return complexColumnIndex
1:e710339:    */
1:438b442:   public int getComplexColumnIndex() {
1:438b442:     return complexColumnIndex;
1:98df130:   }
1:98df130: 
1:e710339:   /**
1:e710339:    * method to add complex column data
2:e710339:    * @param depth
1:438b442:    * complexColumnIndex of column
1:e710339:    * @param dataList
1:e710339:    * dataList
1:e710339:    */
1:e710339:   public void putComplexData(int depth, List<byte[]> dataList) {
1:438b442:     assert (depth <= this.complexColumnIndex);
1:438b442:     int positionNumber = currentRowIdList[depth];
1:438b442:     for (byte[] value : dataList) {
1:438b442:       if (columnPages[depth].getDataType() != DataTypes.BYTE_ARRAY) {
1:438b442:         if ((value == null) || (value.length == 0)) {
1:438b442:           columnPages[depth].putNull(positionNumber);
1:438b442:           columnPages[depth].statsCollector.updateNull(positionNumber);
1:438b442:           columnPages[depth].nullBitSet.set(positionNumber);
1:438b442:         } else {
1:438b442:           columnPages[depth].putData(positionNumber, DataTypeUtil
1:438b442:               .getDataBasedOnDataTypeForNoDictionaryColumn(value,
1:438b442:                   columnPages[depth].getColumnSpec().getSchemaDataType(), false));
1:438b442:         }
1:438b442:       } else {
1:438b442:         columnPages[depth].putData(positionNumber, value);
1:438b442:       }
1:438b442:       positionNumber++;
1:e710339:     }
1:438b442:     currentRowIdList[depth] = positionNumber;
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * to free the used memory
1:e710339:    */
1:e710339:   public void freeMemory() {
1:438b442:     for (int i = 0; i < complexColumnIndex; i++) {
1:e710339:       columnPages[i].freeMemory();
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * return the column page
1:438b442:    * @param complexColumnIndex
1:438b442:    * complexColumnIndex of column
1:e710339:    * @return colum page
1:e710339:    */
1:438b442:   public ColumnPage getColumnPage(int complexColumnIndex) {
1:438b442:     assert (complexColumnIndex <= this.complexColumnIndex);
1:438b442:     return columnPages[complexColumnIndex];
1:e710339:   }
1:98df130: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
/////////////////////////////////////////////////////////////////////////
1:   public void initialize(Map<String, LocalDictionaryGenerator> columnToDictMap, int pageSize,
1:       String columnCompressor) throws MemoryException {
/////////////////////////////////////////////////////////////////////////
1:           this.columnPages[i] = ColumnPage.newPage(
1:               new ColumnPageEncoderMeta(spec, dataType, columnCompressor), pageSize);
1:           this.columnPages[i] = ColumnPage.newPage(
1:               new ColumnPageEncoderMeta(spec, DataTypes.BYTE_ARRAY, columnCompressor), pageSize);
1:         this.columnPages[i] = ColumnPage.newLocalDictPage(
1:             new ColumnPageEncoderMeta(spec, DataTypes.BYTE_ARRAY, columnCompressor), pageSize,
1:             localDictionaryGenerator, true);
author:manishgupta88
-------------------------------------------------------------------------------
commit:fb6dffe
/////////////////////////////////////////////////////////////////////////
1:             DataTypes.isMapType(dataType) ||
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:438b442
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.statistics.PrimitivePageStatsCollector;
1: import org.apache.carbondata.core.datastore.row.ComplexColumnInfo;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.util.DataTypeUtil;
/////////////////////////////////////////////////////////////////////////
1:   private int complexColumnIndex;
1:   private List<ComplexColumnInfo> complexColumnInfoList;
/////////////////////////////////////////////////////////////////////////
1:   public ComplexColumnPage(List<ComplexColumnInfo> complexColumnInfoList) {
1:     this.complexColumnIndex = complexColumnInfoList.size();
1:     this.complexColumnInfoList = complexColumnInfoList;
1:     this.columnPages = new ColumnPage[this.complexColumnIndex];
1:     this.currentRowIdList = new int[complexColumnIndex];
0:   public void initialize(Map<String, LocalDictionaryGenerator> columnToDictMap, int pageSize)
0:       throws MemoryException {
1:     DataType dataType;
1:       LocalDictionaryGenerator localDictionaryGenerator =
1:           columnToDictMap.get(complexColumnInfoList.get(i).getColumnNames());
1:       TableSpec.ColumnSpec spec = getColumnSpec(i, localDictionaryGenerator);
1:         dataType = complexColumnInfoList.get(i).getColumnDataTypes();
1:         if (isColumnPageBasedOnDataType(i)) {
1:           // no dictionary primitive types need adaptive encoding,
1:           // hence store as actual value instead of byte array
0:           this.columnPages[i] = ColumnPage.newPage(spec, dataType, pageSize);
1:           this.columnPages[i].setStatsCollector(PrimitivePageStatsCollector.newInstance(dataType));
1:         } else {
0:           this.columnPages[i] = ColumnPage.newPage(spec, DataTypes.BYTE_ARRAY, pageSize);
1:           this.columnPages[i].setStatsCollector(new DummyStatsCollector());
1:         }
/////////////////////////////////////////////////////////////////////////
1:   private TableSpec.ColumnSpec getColumnSpec(int columnPageIndex,
1:       LocalDictionaryGenerator localDictionaryGenerator) {
1:     if ((localDictionaryGenerator == null) && isColumnPageBasedOnDataType(columnPageIndex)) {
1:       return TableSpec.ColumnSpec
1:           .newInstance(complexColumnInfoList.get(columnPageIndex).getColumnNames(),
1:               complexColumnInfoList.get(columnPageIndex).getColumnDataTypes(),
1:               complexColumnInfoList.get(columnPageIndex).getComplexColumnType());
1:     } else {
1:       return TableSpec.ColumnSpec
1:           .newInstance(complexColumnInfoList.get(columnPageIndex).getColumnNames(),
1:               DataTypes.BYTE_ARRAY,
1:               complexColumnInfoList.get(columnPageIndex).getComplexColumnType());
1:     }
1:   }
1: 
1:   private boolean isColumnPageBasedOnDataType(int columnPageIndex) {
1:     DataType dataType = complexColumnInfoList.get(columnPageIndex).getColumnDataTypes();
1:     if ((complexColumnInfoList.get(columnPageIndex).isNoDictionary() &&
1:         !((DataTypes.isStructType(dataType) ||
1:             DataTypes.isArrayType(dataType) ||
1:             (dataType == DataTypes.STRING) ||
1:             (dataType == DataTypes.VARCHAR) ||
1:             (dataType == DataTypes.DATE) ||
1:             DataTypes.isDecimal(dataType))))) {
1:       // For all these above condition the ColumnPage should be Taken as BYTE_ARRAY
1:       // for all other cases make Column Page Based on each DataType.
1:       return true;
1:     } else {
1:       return false;
1:     }
1:    *
1:    * @return complexColumnIndex
1:   public int getComplexColumnIndex() {
1:     return complexColumnIndex;
1:    * complexColumnIndex of column
1:     assert (depth <= this.complexColumnIndex);
1:     int positionNumber = currentRowIdList[depth];
1:     for (byte[] value : dataList) {
1:       if (columnPages[depth].getDataType() != DataTypes.BYTE_ARRAY) {
1:         if ((value == null) || (value.length == 0)) {
1:           columnPages[depth].putNull(positionNumber);
1:           columnPages[depth].statsCollector.updateNull(positionNumber);
1:           columnPages[depth].nullBitSet.set(positionNumber);
1:         } else {
1:           columnPages[depth].putData(positionNumber, DataTypeUtil
1:               .getDataBasedOnDataTypeForNoDictionaryColumn(value,
1:                   columnPages[depth].getColumnSpec().getSchemaDataType(), false));
1:         }
1:       } else {
1:         columnPages[depth].putData(positionNumber, value);
1:       }
1:       positionNumber++;
1:     currentRowIdList[depth] = positionNumber;
1:     for (int i = 0; i < complexColumnIndex; i++) {
1:    * @param complexColumnIndex
1:    * complexColumnIndex of column
1:   public ColumnPage getColumnPage(int complexColumnIndex) {
1:     assert (complexColumnIndex <= this.complexColumnIndex);
1:     return columnPages[complexColumnIndex];
author:kumarvishal09
-------------------------------------------------------------------------------
commit:3a4b881
/////////////////////////////////////////////////////////////////////////
0:             .newLocalDictPage(spec, DataTypes.BYTE_ARRAY, pageSize, localDictionaryGenerator, true);
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import org.apache.carbondata.core.datastore.TableSpec;
1: import org.apache.carbondata.core.datastore.page.statistics.DummyStatsCollector;
1: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: /**
1:  * holds the complex columndata and its children data
1:  */
1:   /**
1:    * number of columns
1:    */
1:   /**
1:    * type of each column
1:    */
1:   /**
1:    * column page for each type
1:    */
1:   private ColumnPage[] columnPages;
1: 
1:   /**
1:    * to maintain the number of record added for each type
1:    */
1:   private int[] currentRowIdList;
1: 
0:   public ComplexColumnPage(List<ColumnType> complexColumnType) {
0:     this.columnPages = new ColumnPage[this.depth];
0:     this.currentRowIdList = new int[depth];
1:   /**
1:    * below method will be used to initlize the column page of complex type
1:    * @param columnToDictMap
1:    * dictionary map
0:    * @param columnNames
0:    * list of columns
1:    * @param pageSize
1:    * number of records
1:    * @throws MemoryException
1:    * if memory is not sufficient
1:    */
0:   public void initialize(Map<String, LocalDictionaryGenerator> columnToDictMap,
0:       List<String> columnNames, int pageSize) throws MemoryException {
1:     for (int i = 0; i < this.columnPages.length; i++) {
0:       LocalDictionaryGenerator localDictionaryGenerator = columnToDictMap.get(columnNames.get(i));
1:       if (null == localDictionaryGenerator) {
0:         TableSpec.ColumnSpec spec = TableSpec.ColumnSpec
0:             .newInstance(columnNames.get(i), DataTypes.BYTE_ARRAY, complexColumnType.get(i));
0:         this.columnPages[i] = ColumnPage.newPage(spec, DataTypes.BYTE_ARRAY, pageSize);
1:         this.columnPages[i].setStatsCollector(new DummyStatsCollector());
1:       } else {
0:         TableSpec.ColumnSpec spec = TableSpec.ColumnSpec
0:             .newInstance(columnNames.get(i), DataTypes.BYTE_ARRAY, complexColumnType.get(i));
0:         this.columnPages[i] = ColumnPage
0:             .newLocalDictPage(spec, DataTypes.BYTE_ARRAY, pageSize, localDictionaryGenerator);
1:         this.columnPages[i].setStatsCollector(new DummyStatsCollector());
1:     }
1:   /**
1:    *
0:    * @return depth
1:    */
1:   /**
0:    * return the type of complex column
0:    * @param isDepth
0:    * @return co plex column type
1:    */
1: 
1:   /**
1:    * method to add complex column data
1:    * @param depth
0:    * depth of column
1:    * @param dataList
1:    * dataList
1:    */
1:   public void putComplexData(int depth, List<byte[]> dataList) {
0:     assert (depth <= this.depth);
0:     int currentNumber = currentRowIdList[depth];
0:     for (int i = 0; i < dataList.size(); i++) {
0:       columnPages[depth].putData(currentNumber, dataList.get(i));
0:       currentNumber++;
1:     }
0:     currentRowIdList[depth] = currentNumber;
1:   }
1: 
1:   /**
1:    * to free the used memory
1:    */
1:   public void freeMemory() {
0:     for (int i = 0; i < depth; i++) {
1:       columnPages[i].freeMemory();
1:     }
1:   }
1: 
1:   /**
1:    * return the column page
1:    * @param depth
0:    * depth of column
1:    * @return colum page
1:    */
0:   public ColumnPage getColumnPage(int depth) {
0:     assert (depth <= this.depth);
0:     return columnPages[depth];
1:   }
commit:6297ea0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.ColumnType;
/////////////////////////////////////////////////////////////////////////
0:   private int depth;
1: 
0:   private List<ColumnType> complexColumnType;
1: 
0:   public ComplexColumnPage(int pageSize, List<ColumnType> complexColumnType) {
0:     this.depth = complexColumnType.size();
0:     this.complexColumnType = complexColumnType;
/////////////////////////////////////////////////////////////////////////
1: 
0:   public ColumnType getComplexColumnType(int isDepth) {
0:     return complexColumnType.get(isDepth);
1:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
0:       complexColumnData.add(new ArrayList<byte[]>());
author:jackylk
-------------------------------------------------------------------------------
commit:a5af0ff
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   public int getPageSize() {
0:     return pageSize;
1:   }
commit:edda248
/////////////////////////////////////////////////////////////////////////
1: 
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: public class ComplexColumnPage {
/////////////////////////////////////////////////////////////////////////
0:   private final int pageSize;
1: 
0:     this.pageSize = pageSize;
/////////////////////////////////////////////////////////////////////////
1: 
commit:98df130
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: 
1: package org.apache.carbondata.core.datastore.page;
1: 
0: import java.util.ArrayList;
0: import java.util.Iterator;
1: import java.util.List;
1: 
0: import org.apache.carbondata.common.CarbonIterator;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
1: 
0: // Represent a complex column page, e.g. Array, Struct type column
0: public class ComplexColumnPage extends ColumnPage {
1: 
0:   // Holds data for all rows in this page in columnar layout.
0:   // After the complex data expand, it is of type byte[][], the first level array in the byte[][]
0:   // representing a sub-column in the complex type, which can be retrieved by giving the depth
0:   // of the complex type.
0:   // TODO: further optimize it to make it more memory efficient
0:   private List<ArrayList<byte[]>> complexColumnData;
1: 
0:   // depth is the number of column after complex type is expanded. It is from 1 to N
0:   private final int depth;
1: 
0:   public ComplexColumnPage(int pageSize, int depth) {
0:     super(DataType.BYTE_ARRAY, pageSize);
0:     this.depth = depth;
0:     complexColumnData = new ArrayList<>(depth);
0:     for (int i = 0; i < depth; i++) {
0:       complexColumnData.add(new ArrayList<byte[]>(pageSize));
1:     }
1:   }
1: 
0:   public void putComplexData(int rowId, int depth, List<byte[]> value) {
0:     assert (depth <= this.depth);
0:     ArrayList<byte[]> subColumnPage = complexColumnData.get(depth);
0:     subColumnPage.addAll(value);
1:   }
1: 
0:   // iterate on the sub-column after complex type is expanded, return columnar page of
0:   // each sub-column
0:   public Iterator<byte[][]> iterator() {
1: 
0:     return new CarbonIterator<byte[][]>() {
0:       private int index = 0;
0:       @Override public boolean hasNext() {
0:         return index < depth;
1:       }
1: 
0:       @Override public byte[][] next() {
0:         // convert the subColumnPage from ArrayList<byte[]> to byte[][]
0:         ArrayList<byte[]> subColumnPage = complexColumnData.get(index);
0:         index++;
0:         return subColumnPage.toArray(new byte[subColumnPage.size()][]);
1:       }
0:     };
1:   }
1: 
0:   public int getDepth() {
0:     return depth;
1:   }
1: }
============================================================================