1:f911403: /*
1:f911403:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f911403:  * contributor license agreements.  See the NOTICE file distributed with
1:f911403:  * this work for additional information regarding copyright ownership.
1:f911403:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f911403:  * (the "License"); you may not use this file except in compliance with
1:f911403:  * the License.  You may obtain a copy of the License at
1:f911403:  *
1:f911403:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f911403:  *
1:f911403:  * Unless required by applicable law or agreed to in writing, software
1:f911403:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f911403:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f911403:  * See the License for the specific language governing permissions and
1:f911403:  * limitations under the License.
1:f911403:  */
1:f911403: 
1:f911403: package org.apache.carbondata.core.scan.expression.logical;
1:f911403: 
1:f911403: import mockit.Mock;
1:f911403: import mockit.MockUp;
1:f911403: 
1:f911403: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:f911403: import org.apache.carbondata.core.scan.expression.ColumnExpression;
1:f911403: import org.apache.carbondata.core.scan.expression.ExpressionResult;
1:f911403: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1:f911403: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1:f911403: import org.apache.carbondata.core.scan.filter.intf.RowImpl;
1:f911403: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1:f911403: 
1:f911403: import org.junit.Before;
1:f911403: import org.junit.Test;
1:f911403: 
1:f911403: import static junit.framework.TestCase.assertTrue;
1:f911403: import static org.junit.Assert.assertEquals;
1:f911403: 
1:f911403: public class RangeExpressionTest {
1:f911403:   private RangeExpression rangeExpression;
1:f911403: 
1:f911403:   @Before public void setUp() {
1:f911403:     ColumnExpression leftExpression = new ColumnExpression("IMEI", DataTypes.BOOLEAN);
1:f911403:     ColumnExpression rightExpression = new ColumnExpression("IMEI", DataTypes.BOOLEAN);
1:f911403:     rangeExpression = new RangeExpression(leftExpression, rightExpression);
1:f911403:   }
1:f911403: 
1:f911403:   @Test public void testGetString() {
1:f911403:     String actualValue = rangeExpression.getString();
1:f911403:     String expectedValue = "Range(ColumnExpression(IMEI),ColumnExpression(IMEI))";
1:f911403:     assertEquals(expectedValue, actualValue);
1:f911403:   }
1:f911403: 
1:f911403:   @Test public void testEvaluate() throws FilterIllegalMemberException, FilterUnsupportedException {
1:f911403:     RowImpl rowImpl = new RowImpl();
1:f911403:     rowImpl.setValues(new Boolean[] { false });
1:f911403:     final ExpressionResult expressionResult = new ExpressionResult(DataTypes.BOOLEAN, "test");
1:f911403:     new MockUp<ColumnExpression>() {
1:f911403:       @Mock public ExpressionResult evaluate(RowIntf value) {
1:f911403:         return expressionResult;
1:f911403:       }
1:f911403:     };
1:f911403: 
1:f911403:     assertTrue(rangeExpression.evaluate(rowImpl) instanceof ExpressionResult);
1:f911403:   }
1:f911403: 
1:f911403:   @Test public void testEvaluate1()
1:f911403:       throws FilterIllegalMemberException, FilterUnsupportedException {
1:f911403:     RowImpl rowImpl = new RowImpl();
1:f911403:     rowImpl.setValues(new Boolean[] { false });
1:f911403:     final ExpressionResult expressionResult = new ExpressionResult(DataTypes.BOOLEAN, "true");
1:f911403:     new MockUp<ColumnExpression>() {
1:f911403:       @Mock public ExpressionResult evaluate(RowIntf value) {
1:f911403:         return expressionResult;
1:f911403:       }
1:f911403:     };
1:f911403: 
1:f911403:     assertTrue(rangeExpression.evaluate(rowImpl) instanceof ExpressionResult);
1:f911403:   }
1:f911403: 
1:f911403:   @Test public void testEvaluate2()
1:f911403:       throws FilterIllegalMemberException, FilterUnsupportedException {
1:f911403:     RowImpl rowImpl = new RowImpl();
1:f911403:     rowImpl.setValues(new Boolean[] { false });
1:f911403:     final ExpressionResult expressionResultRight = new ExpressionResult(DataTypes.BOOLEAN, "false");
1:f911403:     final ExpressionResult expressionResultLeft = new ExpressionResult(DataTypes.BOOLEAN, "true");
1:f911403:     new MockUp<ColumnExpression>() {
1:f911403:       boolean isLeft = true;
1:f911403: 
1:f911403:       @Mock public ExpressionResult evaluate(RowIntf value) {
1:f911403:         if (isLeft) {
1:f911403:           isLeft = false;
1:f911403:           return expressionResultLeft;
1:f911403:         }
1:f911403:         return expressionResultRight;
1:f911403:       }
1:f911403:     };
1:f911403: 
1:f911403:     assertTrue(rangeExpression.evaluate(rowImpl) instanceof ExpressionResult);
1:f911403:   }
1:f911403: 
1:f911403:   @Test public void testEvaluate3()
1:f911403:       throws FilterIllegalMemberException, FilterUnsupportedException {
1:f911403:     RowImpl rowImpl = new RowImpl();
1:f911403:     rowImpl.setValues(new Boolean[] { false });
1:f911403:     final ExpressionResult expressionResultRight = new ExpressionResult(DataTypes.BOOLEAN, "false");
1:f911403:     final ExpressionResult expressionResultLeft = new ExpressionResult(DataTypes.BOOLEAN, "false");
1:f911403:     new MockUp<ColumnExpression>() {
1:f911403:       boolean isLeft = true;
1:f911403: 
1:f911403:       @Mock public ExpressionResult evaluate(RowIntf value) {
1:f911403:         if (isLeft) {
1:f911403:           isLeft = false;
1:f911403:           return expressionResultLeft;
1:f911403:         }
1:f911403:         return expressionResultRight;
1:f911403:       }
1:f911403:     };
1:f911403: 
1:f911403:     assertTrue(rangeExpression.evaluate(rowImpl) instanceof ExpressionResult);
1:f911403:   }
1:f911403: 
1:f911403:   @Test public void testEvaluate4()
1:f911403:       throws FilterIllegalMemberException, FilterUnsupportedException {
1:f911403:     RowImpl rowImpl = new RowImpl();
1:f911403:     rowImpl.setValues(new Boolean[] { false });
1:f911403:     final ExpressionResult expressionResult = new ExpressionResult(DataTypes.BOOLEAN, "false");
1:f911403:     new MockUp<ColumnExpression>() {
1:f911403:       @Mock public ExpressionResult evaluate(RowIntf value) {
1:f911403:         return expressionResult;
1:f911403:       }
1:f911403:     };
1:f911403: 
1:f911403:     assertTrue(rangeExpression.evaluate(rowImpl) instanceof ExpressionResult);
1:f911403:   }
1:f911403: 
1:f911403:   @Test(expected = Exception.class) public void testEvaluateForDefault()
1:f911403:       throws FilterUnsupportedException, FilterIllegalMemberException {
1:f911403:     RowImpl rowImpl = new RowImpl();
1:f911403:     rowImpl.setValues(new Boolean[] { true });
1:f911403:     final ExpressionResult expressionResult = new ExpressionResult(DataTypes.STRING, "test");
1:f911403:     new MockUp<ColumnExpression>() {
1:f911403:       @Mock public ExpressionResult evaluate(RowIntf value)
1:f911403:           throws FilterUnsupportedException, FilterIllegalMemberException {
1:f911403:         return expressionResult;
1:f911403:       }
1:f911403:     };
1:f911403:     rangeExpression.evaluate(rowImpl);
1:f911403:   }
1:f911403: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.expression.logical;
1: 
1: import mockit.Mock;
1: import mockit.MockUp;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.scan.expression.ColumnExpression;
1: import org.apache.carbondata.core.scan.expression.ExpressionResult;
1: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1: import org.apache.carbondata.core.scan.filter.intf.RowImpl;
1: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import static junit.framework.TestCase.assertTrue;
1: import static org.junit.Assert.assertEquals;
1: 
1: public class RangeExpressionTest {
1:   private RangeExpression rangeExpression;
1: 
1:   @Before public void setUp() {
1:     ColumnExpression leftExpression = new ColumnExpression("IMEI", DataTypes.BOOLEAN);
1:     ColumnExpression rightExpression = new ColumnExpression("IMEI", DataTypes.BOOLEAN);
1:     rangeExpression = new RangeExpression(leftExpression, rightExpression);
1:   }
1: 
1:   @Test public void testGetString() {
1:     String actualValue = rangeExpression.getString();
1:     String expectedValue = "Range(ColumnExpression(IMEI),ColumnExpression(IMEI))";
1:     assertEquals(expectedValue, actualValue);
1:   }
1: 
1:   @Test public void testEvaluate() throws FilterIllegalMemberException, FilterUnsupportedException {
1:     RowImpl rowImpl = new RowImpl();
1:     rowImpl.setValues(new Boolean[] { false });
1:     final ExpressionResult expressionResult = new ExpressionResult(DataTypes.BOOLEAN, "test");
1:     new MockUp<ColumnExpression>() {
1:       @Mock public ExpressionResult evaluate(RowIntf value) {
1:         return expressionResult;
1:       }
1:     };
1: 
1:     assertTrue(rangeExpression.evaluate(rowImpl) instanceof ExpressionResult);
1:   }
1: 
1:   @Test public void testEvaluate1()
1:       throws FilterIllegalMemberException, FilterUnsupportedException {
1:     RowImpl rowImpl = new RowImpl();
1:     rowImpl.setValues(new Boolean[] { false });
1:     final ExpressionResult expressionResult = new ExpressionResult(DataTypes.BOOLEAN, "true");
1:     new MockUp<ColumnExpression>() {
1:       @Mock public ExpressionResult evaluate(RowIntf value) {
1:         return expressionResult;
1:       }
1:     };
1: 
1:     assertTrue(rangeExpression.evaluate(rowImpl) instanceof ExpressionResult);
1:   }
1: 
1:   @Test public void testEvaluate2()
1:       throws FilterIllegalMemberException, FilterUnsupportedException {
1:     RowImpl rowImpl = new RowImpl();
1:     rowImpl.setValues(new Boolean[] { false });
1:     final ExpressionResult expressionResultRight = new ExpressionResult(DataTypes.BOOLEAN, "false");
1:     final ExpressionResult expressionResultLeft = new ExpressionResult(DataTypes.BOOLEAN, "true");
1:     new MockUp<ColumnExpression>() {
1:       boolean isLeft = true;
1: 
1:       @Mock public ExpressionResult evaluate(RowIntf value) {
1:         if (isLeft) {
1:           isLeft = false;
1:           return expressionResultLeft;
1:         }
1:         return expressionResultRight;
1:       }
1:     };
1: 
1:     assertTrue(rangeExpression.evaluate(rowImpl) instanceof ExpressionResult);
1:   }
1: 
1:   @Test public void testEvaluate3()
1:       throws FilterIllegalMemberException, FilterUnsupportedException {
1:     RowImpl rowImpl = new RowImpl();
1:     rowImpl.setValues(new Boolean[] { false });
1:     final ExpressionResult expressionResultRight = new ExpressionResult(DataTypes.BOOLEAN, "false");
1:     final ExpressionResult expressionResultLeft = new ExpressionResult(DataTypes.BOOLEAN, "false");
1:     new MockUp<ColumnExpression>() {
1:       boolean isLeft = true;
1: 
1:       @Mock public ExpressionResult evaluate(RowIntf value) {
1:         if (isLeft) {
1:           isLeft = false;
1:           return expressionResultLeft;
1:         }
1:         return expressionResultRight;
1:       }
1:     };
1: 
1:     assertTrue(rangeExpression.evaluate(rowImpl) instanceof ExpressionResult);
1:   }
1: 
1:   @Test public void testEvaluate4()
1:       throws FilterIllegalMemberException, FilterUnsupportedException {
1:     RowImpl rowImpl = new RowImpl();
1:     rowImpl.setValues(new Boolean[] { false });
1:     final ExpressionResult expressionResult = new ExpressionResult(DataTypes.BOOLEAN, "false");
1:     new MockUp<ColumnExpression>() {
1:       @Mock public ExpressionResult evaluate(RowIntf value) {
1:         return expressionResult;
1:       }
1:     };
1: 
1:     assertTrue(rangeExpression.evaluate(rowImpl) instanceof ExpressionResult);
1:   }
1: 
1:   @Test(expected = Exception.class) public void testEvaluateForDefault()
1:       throws FilterUnsupportedException, FilterIllegalMemberException {
1:     RowImpl rowImpl = new RowImpl();
1:     rowImpl.setValues(new Boolean[] { true });
1:     final ExpressionResult expressionResult = new ExpressionResult(DataTypes.STRING, "test");
1:     new MockUp<ColumnExpression>() {
1:       @Mock public ExpressionResult evaluate(RowIntf value)
1:           throws FilterUnsupportedException, FilterIllegalMemberException {
1:         return expressionResult;
1:       }
1:     };
1:     rangeExpression.evaluate(rowImpl);
1:   }
1: }
============================================================================