1:6f20437: /*
1:6f20437:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6f20437:  * contributor license agreements.  See the NOTICE file distributed with
1:6f20437:  * this work for additional information regarding copyright ownership.
1:6f20437:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6f20437:  * (the "License"); you may not use this file except in compliance with
1:6f20437:  * the License.  You may obtain a copy of the License at
1:6f20437:  *
1:6f20437:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6f20437:  *
1:6f20437:  * Unless required by applicable law or agreed to in writing, software
1:6f20437:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6f20437:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6f20437:  * See the License for the specific language governing permissions and
1:6f20437:  * limitations under the License.
1:6f20437:  */
1:6f20437: 
1:6f20437: package org.apache.carbondata.core.datastore.page;
1:6f20437: 
1:7551cc6: import java.math.BigDecimal;
1:7551cc6: 
1:8f08c4a: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:7551cc6: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:6f20437: import org.apache.carbondata.core.metadata.datatype.DecimalConverterFactory;
1:6f20437: 
1:6f20437: /**
1:6f20437:  * Represent a columnar data in one page for one column of decimal data type
1:6f20437:  */
1:6f20437: public abstract class DecimalColumnPage extends VarLengthColumnPageBase {
1:6f20437: 
1:6f20437:   /**
1:6f20437:    * decimal converter instance
1:6f20437:    */
1:6f20437:   DecimalConverterFactory.DecimalConverter decimalConverter;
1:6f20437: 
1:8f08c4a:   DecimalColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize) {
1:8f08c4a:     super(columnPageEncoderMeta, pageSize);
1:8f08c4a:     decimalConverter = DecimalConverterFactory.INSTANCE.getDecimalConverter(
1:8f08c4a:         columnPageEncoderMeta.getColumnSpec().getPrecision(),
1:8f08c4a:         columnPageEncoderMeta.getColumnSpec().getScale());
1:6f20437:   }
1:6f20437: 
1:6f20437:   public DecimalConverterFactory.DecimalConverter getDecimalConverter() {
1:6f20437:     return decimalConverter;
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public byte[] getBytePage() {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public short[] getShortPage() {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public byte[] getShortIntPage() {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public int[] getIntPage() {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public long[] getLongPage() {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public float[] getFloatPage() {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public double[] getDoublePage() {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public byte[][] getByteArrayPage() {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public float getFloat(int rowId) {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public double getDouble(int rowId) {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void putDouble(int rowId, double value) {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void setFloatPage(float[] floatData) {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void setDoublePage(double[] doubleData) {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:   }
1:6f20437: 
1:7551cc6:   // used for building datamap in loading process
1:7551cc6:   private BigDecimal getDecimalFromRawData(int rowId) {
1:7551cc6:     long value;
1:7551cc6:     switch (decimalConverter.getDecimalConverterType()) {
1:7551cc6:       case DECIMAL_INT:
1:7551cc6:         value = getInt(rowId);
1:7551cc6:         break;
1:7551cc6:       case DECIMAL_LONG:
1:7551cc6:         value = getLong(rowId);
1:7551cc6:         break;
1:7551cc6:       default:
1:7551cc6:         value = getByte(rowId);
1:7551cc6:     }
1:7551cc6:     return decimalConverter.getDecimal(value);
1:7551cc6:   }
1:7551cc6: 
1:7551cc6:   private BigDecimal getDecimalFromDecompressData(int rowId) {
1:7551cc6:     long value;
1:8f08c4a:     if (columnPageEncoderMeta.getStoreDataType() == DataTypes.BYTE) {
1:7551cc6:       value = getByte(rowId);
1:8f08c4a:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.SHORT) {
1:7551cc6:       value = getShort(rowId);
1:8f08c4a:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.SHORT_INT) {
1:7551cc6:       value = getShortInt(rowId);
1:8f08c4a:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.INT) {
1:7551cc6:       value = getInt(rowId);
1:8f08c4a:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.LONG) {
1:7551cc6:       value = getLong(rowId);
1:7551cc6:     } else {
1:7551cc6:       return decimalConverter.getDecimal(getBytes(rowId));
1:7551cc6:     }
1:7551cc6:     return decimalConverter.getDecimal(value);
1:7551cc6:   }
1:7551cc6: 
1:7551cc6:   @Override
1:7551cc6:   public BigDecimal getDecimal(int rowId) {
1:7551cc6:     // rowOffset is initialed for query in `VarLengthColumnPageBase.getDecimalColumnPage`
1:7551cc6:     // if its size is 0, we are in loading process and the data in column page is raw
1:7551cc6:     if (rowOffset.getActualRowCount() == 0) {
1:7551cc6:       return getDecimalFromRawData(rowId);
1:7551cc6:     } else {
1:7551cc6:       return getDecimalFromDecompressData(rowId);
1:7551cc6:     }
1:7551cc6:   }
1:7551cc6: 
1:6f20437: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
/////////////////////////////////////////////////////////////////////////
1:   DecimalColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize) {
1:     super(columnPageEncoderMeta, pageSize);
1:     decimalConverter = DecimalConverterFactory.INSTANCE.getDecimalConverter(
1:         columnPageEncoderMeta.getColumnSpec().getPrecision(),
1:         columnPageEncoderMeta.getColumnSpec().getScale());
/////////////////////////////////////////////////////////////////////////
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
/////////////////////////////////////////////////////////////////////////
1:     if (columnPageEncoderMeta.getStoreDataType() == DataTypes.BYTE) {
1:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.SHORT) {
1:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.SHORT_INT) {
1:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.INT) {
1:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.LONG) {
author:Manhua
-------------------------------------------------------------------------------
commit:7551cc6
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigDecimal;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:   // used for building datamap in loading process
1:   private BigDecimal getDecimalFromRawData(int rowId) {
1:     long value;
1:     switch (decimalConverter.getDecimalConverterType()) {
1:       case DECIMAL_INT:
1:         value = getInt(rowId);
1:         break;
1:       case DECIMAL_LONG:
1:         value = getLong(rowId);
1:         break;
1:       default:
1:         value = getByte(rowId);
1:     }
1:     return decimalConverter.getDecimal(value);
1:   }
1: 
1:   private BigDecimal getDecimalFromDecompressData(int rowId) {
1:     long value;
0:     if (dataType == DataTypes.BYTE) {
1:       value = getByte(rowId);
0:     } else if (dataType == DataTypes.SHORT) {
1:       value = getShort(rowId);
0:     } else if (dataType == DataTypes.SHORT_INT) {
1:       value = getShortInt(rowId);
0:     } else if (dataType == DataTypes.INT) {
1:       value = getInt(rowId);
0:     } else if (dataType == DataTypes.LONG) {
1:       value = getLong(rowId);
1:     } else {
1:       return decimalConverter.getDecimal(getBytes(rowId));
1:     }
1:     return decimalConverter.getDecimal(value);
1:   }
1: 
1:   @Override
1:   public BigDecimal getDecimal(int rowId) {
1:     // rowOffset is initialed for query in `VarLengthColumnPageBase.getDecimalColumnPage`
1:     // if its size is 0, we are in loading process and the data in column page is raw
1:     if (rowOffset.getActualRowCount() == 0) {
1:       return getDecimalFromRawData(rowId);
1:     } else {
1:       return getDecimalFromDecompressData(rowId);
1:     }
1:   }
1: 
author:manishgupta88
-------------------------------------------------------------------------------
commit:6f20437
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page;
1: 
0: import org.apache.carbondata.core.datastore.TableSpec;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DecimalConverterFactory;
1: 
1: /**
1:  * Represent a columnar data in one page for one column of decimal data type
1:  */
1: public abstract class DecimalColumnPage extends VarLengthColumnPageBase {
1: 
1:   /**
1:    * decimal converter instance
1:    */
1:   DecimalConverterFactory.DecimalConverter decimalConverter;
1: 
0:   DecimalColumnPage(TableSpec.ColumnSpec columnSpec, DataType dataType, int pageSize) {
0:     super(columnSpec, dataType, pageSize);
0:     decimalConverter = DecimalConverterFactory.INSTANCE
0:         .getDecimalConverter(columnSpec.getPrecision(), columnSpec.getScale());
1:   }
1: 
1:   public DecimalConverterFactory.DecimalConverter getDecimalConverter() {
1:     return decimalConverter;
1:   }
1: 
1:   @Override
1:   public byte[] getBytePage() {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public short[] getShortPage() {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public byte[] getShortIntPage() {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public int[] getIntPage() {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public long[] getLongPage() {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public float[] getFloatPage() {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public double[] getDoublePage() {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public byte[][] getByteArrayPage() {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public float getFloat(int rowId) {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public double getDouble(int rowId) {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public void putDouble(int rowId, double value) {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public void setFloatPage(float[] floatData) {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1:   @Override
1:   public void setDoublePage(double[] doubleData) {
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
1:   }
1: 
1: }
============================================================================