1:531dcd2: /*
1:531dcd2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:531dcd2:  * contributor license agreements.  See the NOTICE file distributed with
1:531dcd2:  * this work for additional information regarding copyright ownership.
1:531dcd2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:531dcd2:  * (the "License"); you may not use this file except in compliance with
1:531dcd2:  * the License.  You may obtain a copy of the License at
1:531dcd2:  *
1:531dcd2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:531dcd2:  *
1:531dcd2:  * Unless required by applicable law or agreed to in writing, software
1:531dcd2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:531dcd2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:531dcd2:  * See the License for the specific language governing permissions and
1:531dcd2:  * limitations under the License.
1:531dcd2:  */
3:531dcd2: 
1:531dcd2: package org.apache.carbondata.presto;
1:531dcd2: 
1:e5e74fc: import java.math.BigDecimal;
1:e5e74fc: 
1:e5e74fc: import org.apache.carbondata.core.metadata.datatype.DataType;
1:531dcd2: import org.apache.carbondata.core.scan.result.vector.CarbonColumnVector;
1:3a4b881: import org.apache.carbondata.core.scan.result.vector.CarbonDictionary;
1:e5e74fc: import org.apache.carbondata.core.scan.result.vector.impl.CarbonColumnVectorImpl;
1:982d03f: 
1:e5e74fc: public class CarbonColumnVectorWrapper implements CarbonColumnVector {
1:531dcd2: 
1:e5e74fc:   private CarbonColumnVectorImpl columnVector;
1:531dcd2: 
1:531dcd2:   private boolean[] filteredRows;
1:531dcd2: 
1:531dcd2:   private int counter;
1:531dcd2: 
1:531dcd2:   private boolean filteredRowsExist;
1:531dcd2: 
1:1f54c47:   private DataType blockDataType;
1:1f54c47: 
1:e5e74fc:   public CarbonColumnVectorWrapper(CarbonColumnVectorImpl columnVector, boolean[] filteredRows) {
1:531dcd2:     this.columnVector = columnVector;
1:531dcd2:     this.filteredRows = filteredRows;
4:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putBoolean(int rowId, boolean value) {
1:531dcd2:     if (!filteredRows[rowId]) {
1:531dcd2:       columnVector.putBoolean(counter++, value);
1:982d03f:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putFloat(int rowId, float value) {
1:531dcd2:     if (!filteredRows[rowId]) {
1:531dcd2:       columnVector.putFloat(counter++, value);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putShort(int rowId, short value) {
1:531dcd2:     if (!filteredRows[rowId]) {
1:531dcd2:       columnVector.putShort(counter++, value);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putShorts(int rowId, int count, short value) {
1:531dcd2:     if (filteredRowsExist) {
1:531dcd2:       for (int i = 0; i < count; i++) {
1:531dcd2:         if (!filteredRows[rowId]) {
1:531dcd2:           columnVector.putShort(counter++, value);
1:531dcd2:         }
1:531dcd2:         rowId++;
1:531dcd2:       }
1:982d03f:     } else {
1:531dcd2:       columnVector.putShorts(rowId, count, value);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putInt(int rowId, int value) {
1:531dcd2:     if (!filteredRows[rowId]) {
1:531dcd2:       columnVector.putInt(counter++, value);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putInts(int rowId, int count, int value) {
1:531dcd2:     if (filteredRowsExist) {
1:531dcd2:       for (int i = 0; i < count; i++) {
1:531dcd2:         if (!filteredRows[rowId]) {
1:531dcd2:           columnVector.putInt(counter++, value);
1:531dcd2:         }
1:531dcd2:         rowId++;
1:531dcd2:       }
2:531dcd2:     } else {
1:531dcd2:       columnVector.putInts(rowId, count, value);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putLong(int rowId, long value) {
1:531dcd2:     if (!filteredRows[rowId]) {
1:531dcd2:       columnVector.putLong(counter++, value);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putLongs(int rowId, int count, long value) {
1:531dcd2:     if (filteredRowsExist) {
1:531dcd2:       for (int i = 0; i < count; i++) {
1:531dcd2:         if (!filteredRows[rowId]) {
1:531dcd2:           columnVector.putLong(counter++, value);
1:531dcd2:         }
1:531dcd2:         rowId++;
1:531dcd2:       }
1:531dcd2:     } else {
1:531dcd2:       columnVector.putLongs(rowId, count, value);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:e5e74fc:   @Override public void putDecimal(int rowId, BigDecimal value, int precision) {
1:531dcd2:     if (!filteredRows[rowId]) {
1:531dcd2:       columnVector.putDecimal(counter++, value, precision);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:e5e74fc:   @Override public void putDecimals(int rowId, int count, BigDecimal value, int precision) {
1:531dcd2:     for (int i = 0; i < count; i++) {
1:531dcd2:       if (!filteredRows[rowId]) {
1:531dcd2:         columnVector.putDecimal(counter++, value, precision);
1:531dcd2:       }
1:531dcd2:       rowId++;
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putDouble(int rowId, double value) {
1:531dcd2:     if (!filteredRows[rowId]) {
1:531dcd2:       columnVector.putDouble(counter++, value);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putDoubles(int rowId, int count, double value) {
1:531dcd2:     if (filteredRowsExist) {
1:531dcd2:       for (int i = 0; i < count; i++) {
1:531dcd2:         if (!filteredRows[rowId]) {
1:531dcd2:           columnVector.putDouble(counter++, value);
1:531dcd2:         }
1:531dcd2:         rowId++;
1:531dcd2:       }
1:531dcd2:     } else {
1:531dcd2:       columnVector.putDoubles(rowId, count, value);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putBytes(int rowId, byte[] value) {
1:531dcd2:     if (!filteredRows[rowId]) {
1:e5e74fc:       columnVector.putBytes(counter++, value);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putBytes(int rowId, int count, byte[] value) {
1:531dcd2:     for (int i = 0; i < count; i++) {
1:531dcd2:       if (!filteredRows[rowId]) {
1:e5e74fc:         columnVector.putBytes(counter++, value);
1:531dcd2:       }
1:531dcd2:       rowId++;
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putBytes(int rowId, int offset, int length, byte[] value) {
1:531dcd2:     if (!filteredRows[rowId]) {
1:e5e74fc:       columnVector.putBytes(counter++, offset, length, value);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putNull(int rowId) {
1:531dcd2:     if (!filteredRows[rowId]) {
1:531dcd2:       columnVector.putNull(counter++);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putNulls(int rowId, int count) {
1:531dcd2:     if (filteredRowsExist) {
1:531dcd2:       for (int i = 0; i < count; i++) {
1:531dcd2:         if (!filteredRows[rowId]) {
1:531dcd2:           columnVector.putNull(counter++);
1:531dcd2:         }
1:531dcd2:         rowId++;
1:531dcd2:       }
1:531dcd2:     } else {
1:531dcd2:       columnVector.putNulls(rowId, count);
1:531dcd2:     }
1:531dcd2:   }
1:531dcd2: 
1:3a4b881:   @Override public void putNotNull(int rowId) {
1:3a4b881: 
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public void putNotNull(int rowId, int count) {
1:3a4b881: 
1:3a4b881:   }
1:3a4b881: 
1:531dcd2:   @Override public boolean isNull(int rowId) {
1:531dcd2:     return columnVector.isNullAt(rowId);
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void putObject(int rowId, Object obj) {
1:531dcd2:     //TODO handle complex types
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public Object getData(int rowId) {
1:531dcd2:     //TODO handle complex types
1:531dcd2:     return null;
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public void reset() {
1:531dcd2:     counter = 0;
1:531dcd2:     filteredRowsExist = false;
1:531dcd2:   }
1:531dcd2: 
1:531dcd2:   @Override public DataType getType() {
1:e5e74fc:     return columnVector.getType();
1:531dcd2:   }
1:531dcd2: 
1:1f54c47:   @Override
1:1f54c47:   public DataType getBlockDataType() {
1:1f54c47:     return blockDataType;
1:1f54c47:   }
1:1f54c47: 
1:1f54c47:   @Override
1:1f54c47:   public void setBlockDataType(DataType blockDataType) {
1:1f54c47:     this.blockDataType = blockDataType;
1:1f54c47:   }
1:1f54c47: 
1:531dcd2:   @Override public void setFilteredRowsExist(boolean filteredRowsExist) {
1:531dcd2:     this.filteredRowsExist = filteredRowsExist;
1:982d03f:   }
1:982d03f: 
1:3a4b881:   @Override public void setDictionary(CarbonDictionary dictionary) {
1:d4a1577:     this.columnVector.setDictionary(dictionary);
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public boolean hasDictionary() {
1:3a4b881:     return this.columnVector.hasDictionary();
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public CarbonColumnVector getDictionaryVector() {
1:3a4b881:     return this.columnVector;
1:3a4b881:   }
1:3a4b881: 
1:982d03f: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:d4a1577
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     this.columnVector.setDictionary(dictionary);
/////////////////////////////////////////////////////////////////////////
author:kumarvishal09
-------------------------------------------------------------------------------
commit:3a4b881
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.result.vector.CarbonDictionary;
/////////////////////////////////////////////////////////////////////////
1:   @Override public void putNotNull(int rowId) {
1: 
1:   }
1: 
1:   @Override public void putNotNull(int rowId, int count) {
1: 
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override public void setDictionary(CarbonDictionary dictionary) {
0:       this.columnVector.setDictionary(dictionary);
1:   }
1: 
1:   @Override public boolean hasDictionary() {
1:     return this.columnVector.hasDictionary();
1:   }
1: 
1:   @Override public CarbonColumnVector getDictionaryVector() {
1:     return this.columnVector;
1:   }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:982d03f
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.List;
0: import org.apache.carbondata.core.metadata.datatype.DataTypes;
0: import org.apache.carbondata.core.metadata.datatype.StructField;
0: import org.apache.spark.sql.types.ArrayType;
0: import org.apache.spark.sql.types.BooleanType;
0: import org.apache.spark.sql.types.DateType;
0: import org.apache.spark.sql.types.Decimal;
0: import org.apache.spark.sql.types.DecimalType;
0: import org.apache.spark.sql.types.DoubleType;
0: import org.apache.spark.sql.types.FloatType;
0: import org.apache.spark.sql.types.IntegerType;
0: import org.apache.spark.sql.types.LongType;
0: import org.apache.spark.sql.types.NullType;
0: import org.apache.spark.sql.types.ShortType;
0: import org.apache.spark.sql.types.StringType;
0: import org.apache.spark.sql.types.StructType;
0: import org.apache.spark.sql.types.TimestampType;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:   // TODO: this is copied from carbondata-spark-common module, use presto type instead of this
0:   private org.apache.carbondata.core.metadata.datatype.DataType
0:   convertSparkToCarbonDataType(org.apache.spark.sql.types.DataType dataType) {
0:     if (dataType instanceof StringType) {
0:       return DataTypes.STRING;
0:     } else if (dataType instanceof ShortType) {
0:       return DataTypes.SHORT;
0:     } else if (dataType instanceof IntegerType) {
0:       return DataTypes.INT;
0:     } else if (dataType instanceof LongType) {
0:       return DataTypes.LONG;
0:     } else if (dataType instanceof DoubleType) {
0:       return DataTypes.DOUBLE;
0:     } else if (dataType instanceof FloatType) {
0:       return DataTypes.FLOAT;
0:     } else if (dataType instanceof DateType) {
0:       return DataTypes.DATE;
0:     } else if (dataType instanceof BooleanType) {
0:       return DataTypes.BOOLEAN;
0:     } else if (dataType instanceof TimestampType) {
0:       return DataTypes.TIMESTAMP;
0:     } else if (dataType instanceof NullType) {
0:       return DataTypes.NULL;
0:     } else if (dataType instanceof DecimalType) {
0:       DecimalType decimal = (DecimalType) dataType;
0:       return DataTypes.createDecimalType(decimal.precision(), decimal.scale());
0:     } else if (dataType instanceof ArrayType) {
0:       org.apache.spark.sql.types.DataType elementType = ((ArrayType) dataType).elementType();
0:       return DataTypes.createArrayType(convertSparkToCarbonDataType(elementType));
0:     } else if (dataType instanceof StructType) {
0:       StructType structType = (StructType) dataType;
0:       org.apache.spark.sql.types.StructField[] fields = structType.fields();
0:       List<StructField> carbonFields = new ArrayList<>();
0:       for (org.apache.spark.sql.types.StructField field : fields) {
0:         carbonFields.add(
0:             new StructField(
0:                 field.name(),
0:                 convertSparkToCarbonDataType(field.dataType())));
1:       }
0:       return DataTypes.createStructType(carbonFields);
1:     } else {
0:       throw new UnsupportedOperationException("getting " + dataType + " from presto");
1:     }
1:   }
author:manishgupta88
-------------------------------------------------------------------------------
commit:1f54c47
/////////////////////////////////////////////////////////////////////////
1:   private DataType blockDataType;
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public DataType getBlockDataType() {
1:     return blockDataType;
1:   }
1: 
1:   @Override
1:   public void setBlockDataType(DataType blockDataType) {
1:     this.blockDataType = blockDataType;
1:   }
1: 
author:Bhavya
-------------------------------------------------------------------------------
commit:e5e74fc
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigDecimal;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.scan.result.vector.impl.CarbonColumnVectorImpl;
1: public class CarbonColumnVectorWrapper implements CarbonColumnVector {
1:   private CarbonColumnVectorImpl columnVector;
/////////////////////////////////////////////////////////////////////////
1:   public CarbonColumnVectorWrapper(CarbonColumnVectorImpl columnVector, boolean[] filteredRows) {
/////////////////////////////////////////////////////////////////////////
1:   @Override public void putDecimal(int rowId, BigDecimal value, int precision) {
1:   @Override public void putDecimals(int rowId, int count, BigDecimal value, int precision) {
/////////////////////////////////////////////////////////////////////////
1:       columnVector.putBytes(counter++, value);
1:         columnVector.putBytes(counter++, value);
/////////////////////////////////////////////////////////////////////////
1:       columnVector.putBytes(counter++, offset, length, value);
/////////////////////////////////////////////////////////////////////////
1:     return columnVector.getType();
commit:531dcd2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto;
1: 
1: import org.apache.carbondata.core.scan.result.vector.CarbonColumnVector;
1: 
0: import org.apache.spark.sql.execution.vectorized.ColumnVector;
0: import org.apache.spark.sql.types.DataType;
0: import org.apache.spark.sql.types.Decimal;
1: 
0: public class ColumnarVectorWrapper implements CarbonColumnVector {
1: 
0:   private ColumnVector columnVector;
1: 
1:   private boolean[] filteredRows;
1: 
1:   private int counter;
1: 
1:   private boolean filteredRowsExist;
1: 
0:   public ColumnarVectorWrapper(ColumnVector columnVector, boolean[] filteredRows) {
1:     this.columnVector = columnVector;
1:     this.filteredRows = filteredRows;
1:   }
1: 
1:   @Override public void putBoolean(int rowId, boolean value) {
1:     if (!filteredRows[rowId]) {
1:       columnVector.putBoolean(counter++, value);
1:     }
1:   }
1: 
1:   @Override public void putFloat(int rowId, float value) {
1:     if (!filteredRows[rowId]) {
1:       columnVector.putFloat(counter++, value);
1:     }
1:   }
1: 
1:   @Override public void putShort(int rowId, short value) {
1:     if (!filteredRows[rowId]) {
1:       columnVector.putShort(counter++, value);
1:     }
1:   }
1: 
1:   @Override public void putShorts(int rowId, int count, short value) {
1:     if (filteredRowsExist) {
1:       for (int i = 0; i < count; i++) {
1:         if (!filteredRows[rowId]) {
1:           columnVector.putShort(counter++, value);
1:         }
1:         rowId++;
1:       }
1:     } else {
1:       columnVector.putShorts(rowId, count, value);
1:     }
1:   }
1: 
1:   @Override public void putInt(int rowId, int value) {
1:     if (!filteredRows[rowId]) {
1:       columnVector.putInt(counter++, value);
1:     }
1:   }
1: 
1:   @Override public void putInts(int rowId, int count, int value) {
1:     if (filteredRowsExist) {
1:       for (int i = 0; i < count; i++) {
1:         if (!filteredRows[rowId]) {
1:           columnVector.putInt(counter++, value);
1:         }
1:         rowId++;
1:       }
1:     } else {
1:       columnVector.putInts(rowId, count, value);
1:     }
1:   }
1: 
1:   @Override public void putLong(int rowId, long value) {
1:     if (!filteredRows[rowId]) {
1:       columnVector.putLong(counter++, value);
1:     }
1:   }
1: 
1:   @Override public void putLongs(int rowId, int count, long value) {
1:     if (filteredRowsExist) {
1:       for (int i = 0; i < count; i++) {
1:         if (!filteredRows[rowId]) {
1:           columnVector.putLong(counter++, value);
1:         }
1:         rowId++;
1:       }
1:     } else {
1:       columnVector.putLongs(rowId, count, value);
1:     }
1:   }
1: 
0:   @Override public void putDecimal(int rowId, Decimal value, int precision) {
1:     if (!filteredRows[rowId]) {
1:       columnVector.putDecimal(counter++, value, precision);
1:     }
1:   }
1: 
0:   @Override public void putDecimals(int rowId, int count, Decimal value, int precision) {
1:     for (int i = 0; i < count; i++) {
1:       if (!filteredRows[rowId]) {
1:         columnVector.putDecimal(counter++, value, precision);
1:       }
1:       rowId++;
1:     }
1:   }
1: 
1:   @Override public void putDouble(int rowId, double value) {
1:     if (!filteredRows[rowId]) {
1:       columnVector.putDouble(counter++, value);
1:     }
1:   }
1: 
1:   @Override public void putDoubles(int rowId, int count, double value) {
1:     if (filteredRowsExist) {
1:       for (int i = 0; i < count; i++) {
1:         if (!filteredRows[rowId]) {
1:           columnVector.putDouble(counter++, value);
1:         }
1:         rowId++;
1:       }
1:     } else {
1:       columnVector.putDoubles(rowId, count, value);
1:     }
1:   }
1: 
1:   @Override public void putBytes(int rowId, byte[] value) {
1:     if (!filteredRows[rowId]) {
0:       columnVector.putByteArray(counter++, value);
1:     }
1:   }
1: 
1:   @Override public void putBytes(int rowId, int count, byte[] value) {
1:     for (int i = 0; i < count; i++) {
1:       if (!filteredRows[rowId]) {
0:         columnVector.putByteArray(counter++, value);
1:       }
1:       rowId++;
1:     }
1:   }
1: 
1:   @Override public void putBytes(int rowId, int offset, int length, byte[] value) {
1:     if (!filteredRows[rowId]) {
0:       columnVector.putByteArray(counter++, value, offset, length);
1:     }
1:   }
1: 
1:   @Override public void putNull(int rowId) {
1:     if (!filteredRows[rowId]) {
1:       columnVector.putNull(counter++);
1:     }
1:   }
1: 
1:   @Override public void putNulls(int rowId, int count) {
1:     if (filteredRowsExist) {
1:       for (int i = 0; i < count; i++) {
1:         if (!filteredRows[rowId]) {
1:           columnVector.putNull(counter++);
1:         }
1:         rowId++;
1:       }
1:     } else {
1:       columnVector.putNulls(rowId, count);
1:     }
1:   }
1: 
1:   @Override public boolean isNull(int rowId) {
1:     return columnVector.isNullAt(rowId);
1:   }
1: 
1:   @Override public void putObject(int rowId, Object obj) {
1:     //TODO handle complex types
1:   }
1: 
1:   @Override public Object getData(int rowId) {
1:     //TODO handle complex types
1:     return null;
1:   }
1: 
1:   @Override public void reset() {
1:     counter = 0;
1:     filteredRowsExist = false;
1:   }
1: 
1:   @Override public DataType getType() {
0:     return columnVector.dataType();
1:   }
1: 
1:   @Override public void setFilteredRowsExist(boolean filteredRowsExist) {
1:     this.filteredRowsExist = filteredRowsExist;
1:   }
1: }
============================================================================