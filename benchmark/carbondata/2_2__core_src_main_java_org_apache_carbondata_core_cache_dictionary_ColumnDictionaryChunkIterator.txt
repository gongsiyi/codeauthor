1:7e0584e: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:7e0584e:  *
1:7e0584e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:7e0584e:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:7e0584e:  */
1:7e0584e: 
1:7e0584e: package org.apache.carbondata.core.cache.dictionary;
1:7e0584e: 
1:7e0584e: import java.nio.ByteBuffer;
1:7e0584e: import java.util.List;
1:7e0584e: 
1:7e0584e: import org.apache.carbondata.common.CarbonIterator;
1:7e0584e: import org.apache.carbondata.format.ColumnDictionaryChunk;
1:7e0584e: 
1:7e0584e: /**
1:7e0584e:  * This class is a wrapper over column dictionary chunk thrift object.
1:7e0584e:  * The wrapper class wraps the list<ColumnDictionaryChunk> and provides an API
1:7e0584e:  * to fill the byte array into list
1:7e0584e:  */
1:7e0584e: public class ColumnDictionaryChunkIterator extends CarbonIterator {
1:7e0584e: 
1:7e0584e:   /**
1:7e0584e:    * list of dictionaryChunks
1:7e0584e:    */
1:7e0584e:   private List<ColumnDictionaryChunk> columnDictionaryChunks;
1:7e0584e: 
1:7e0584e:   /**
1:7e0584e:    * size of the list
1:7e0584e:    */
1:7e0584e:   private int size;
1:7e0584e: 
1:7e0584e:   /**
1:7e0584e:    * Current index of the list
1:7e0584e:    */
1:7e0584e:   private int currentSize;
1:7e0584e: 
1:7e0584e:   /**
1:7e0584e:    * variable holds the count of elements already iterated
1:7e0584e:    */
1:7e0584e:   private int iteratorIndex;
1:7e0584e: 
1:7e0584e:   /**
1:7e0584e:    * variable holds the current index of List<List<byte[]>> being traversed
1:7e0584e:    */
1:7e0584e:   private int outerIndex;
1:7e0584e: 
1:7e0584e:   /**
1:7e0584e:    * Constructor of ColumnDictionaryChunkIterator
1:7e0584e:    *
1:7e0584e:    * @param columnDictionaryChunks
1:7e0584e:    */
1:7e0584e:   public ColumnDictionaryChunkIterator(List<ColumnDictionaryChunk> columnDictionaryChunks) {
1:7e0584e:     this.columnDictionaryChunks = columnDictionaryChunks;
1:7e0584e:     for (ColumnDictionaryChunk dictionaryChunk : columnDictionaryChunks) {
1:7e0584e:       this.size += dictionaryChunk.getValues().size();
1:7e0584e:     }
1:7e0584e:   }
1:7e0584e: 
1:7e0584e:   /**
1:7e0584e:    * Returns {@code true} if the iteration has more elements.
1:7e0584e:    * (In other words, returns {@code true} if {@link #next} would
1:7e0584e:    * return an element rather than throwing an exception.)
1:7e0584e:    *
1:7e0584e:    * @return {@code true} if the iteration has more elements
1:7e0584e:    */
1:7e0584e:   @Override public boolean hasNext() {
1:7e0584e:     return (currentSize < size);
1:7e0584e:   }
1:7e0584e: 
1:7e0584e:   /**
1:7e0584e:    * Returns the next element in the iteration.
1:7e0584e:    * The method pics the next elements from the first inner list till first is not finished, pics
1:7e0584e:    * the second inner list ...
1:7e0584e:    *
1:7e0584e:    * @return the next element in the iteration
1:7e0584e:    */
1:7e0584e:   @Override public byte[] next() {
1:7e0584e:     if (iteratorIndex >= columnDictionaryChunks.get(outerIndex).getValues().size()) {
1:7e0584e:       iteratorIndex = 0;
1:7e0584e:       outerIndex++;
1:7e0584e:     }
1:7e0584e:     ByteBuffer buffer = columnDictionaryChunks.get(outerIndex).getValues().get(iteratorIndex);
1:7e0584e:     byte[] value = buffer.array();
1:7e0584e:     currentSize++;
1:7e0584e:     iteratorIndex++;
1:7e0584e:     return value;
1:7e0584e:   }
1:7e0584e: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:manishgupt88
-------------------------------------------------------------------------------
commit:7e0584e
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.List;
1: 
1: import org.apache.carbondata.common.CarbonIterator;
1: import org.apache.carbondata.format.ColumnDictionaryChunk;
1: 
1: /**
1:  * This class is a wrapper over column dictionary chunk thrift object.
1:  * The wrapper class wraps the list<ColumnDictionaryChunk> and provides an API
1:  * to fill the byte array into list
1:  */
1: public class ColumnDictionaryChunkIterator extends CarbonIterator {
1: 
1:   /**
1:    * list of dictionaryChunks
1:    */
1:   private List<ColumnDictionaryChunk> columnDictionaryChunks;
1: 
1:   /**
1:    * size of the list
1:    */
1:   private int size;
1: 
1:   /**
1:    * Current index of the list
1:    */
1:   private int currentSize;
1: 
1:   /**
1:    * variable holds the count of elements already iterated
1:    */
1:   private int iteratorIndex;
1: 
1:   /**
1:    * variable holds the current index of List<List<byte[]>> being traversed
1:    */
1:   private int outerIndex;
1: 
1:   /**
1:    * Constructor of ColumnDictionaryChunkIterator
1:    *
1:    * @param columnDictionaryChunks
1:    */
1:   public ColumnDictionaryChunkIterator(List<ColumnDictionaryChunk> columnDictionaryChunks) {
1:     this.columnDictionaryChunks = columnDictionaryChunks;
1:     for (ColumnDictionaryChunk dictionaryChunk : columnDictionaryChunks) {
1:       this.size += dictionaryChunk.getValues().size();
1:     }
1:   }
1: 
1:   /**
1:    * Returns {@code true} if the iteration has more elements.
1:    * (In other words, returns {@code true} if {@link #next} would
1:    * return an element rather than throwing an exception.)
1:    *
1:    * @return {@code true} if the iteration has more elements
1:    */
1:   @Override public boolean hasNext() {
1:     return (currentSize < size);
1:   }
1: 
1:   /**
1:    * Returns the next element in the iteration.
1:    * The method pics the next elements from the first inner list till first is not finished, pics
1:    * the second inner list ...
1:    *
1:    * @return the next element in the iteration
1:    */
1:   @Override public byte[] next() {
1:     if (iteratorIndex >= columnDictionaryChunks.get(outerIndex).getValues().size()) {
1:       iteratorIndex = 0;
1:       outerIndex++;
1:     }
1:     ByteBuffer buffer = columnDictionaryChunks.get(outerIndex).getValues().get(iteratorIndex);
1:     byte[] value = buffer.array();
1:     currentSize++;
1:     iteratorIndex++;
1:     return value;
1:   }
1: }
commit:7e0584e
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.core.cache.dictionary;
0: 
0: import java.nio.ByteBuffer;
0: import java.util.List;
0: 
0: import org.apache.carbondata.common.CarbonIterator;
0: import org.apache.carbondata.format.ColumnDictionaryChunk;
0: 
0: /**
0:  * This class is a wrapper over column dictionary chunk thrift object.
0:  * The wrapper class wraps the list<ColumnDictionaryChunk> and provides an API
0:  * to fill the byte array into list
0:  */
0: public class ColumnDictionaryChunkIterator extends CarbonIterator {
0: 
0:   /**
0:    * list of dictionaryChunks
0:    */
0:   private List<ColumnDictionaryChunk> columnDictionaryChunks;
0: 
0:   /**
0:    * size of the list
0:    */
0:   private int size;
0: 
0:   /**
0:    * Current index of the list
0:    */
0:   private int currentSize;
0: 
0:   /**
0:    * variable holds the count of elements already iterated
0:    */
0:   private int iteratorIndex;
0: 
0:   /**
0:    * variable holds the current index of List<List<byte[]>> being traversed
0:    */
0:   private int outerIndex;
0: 
0:   /**
0:    * Constructor of ColumnDictionaryChunkIterator
0:    *
0:    * @param columnDictionaryChunks
0:    */
0:   public ColumnDictionaryChunkIterator(List<ColumnDictionaryChunk> columnDictionaryChunks) {
0:     this.columnDictionaryChunks = columnDictionaryChunks;
0:     for (ColumnDictionaryChunk dictionaryChunk : columnDictionaryChunks) {
0:       this.size += dictionaryChunk.getValues().size();
0:     }
0:   }
0: 
0:   /**
0:    * Returns {@code true} if the iteration has more elements.
0:    * (In other words, returns {@code true} if {@link #next} would
0:    * return an element rather than throwing an exception.)
0:    *
0:    * @return {@code true} if the iteration has more elements
0:    */
0:   @Override public boolean hasNext() {
0:     return (currentSize < size);
0:   }
0: 
0:   /**
0:    * Returns the next element in the iteration.
0:    * The method pics the next elements from the first inner list till first is not finished, pics
0:    * the second inner list ...
0:    *
0:    * @return the next element in the iteration
0:    */
0:   @Override public byte[] next() {
0:     if (iteratorIndex >= columnDictionaryChunks.get(outerIndex).getValues().size()) {
0:       iteratorIndex = 0;
0:       outerIndex++;
0:     }
0:     ByteBuffer buffer = columnDictionaryChunks.get(outerIndex).getValues().get(iteratorIndex);
0:     byte[] value = buffer.array();
0:     currentSize++;
0:     iteratorIndex++;
0:     return value;
0:   }
0: }
============================================================================