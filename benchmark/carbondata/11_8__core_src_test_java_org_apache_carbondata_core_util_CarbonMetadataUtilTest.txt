1:707e258: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:707e258:  *
1:707e258:  *    http://www.apache.org/licenses/LICENSE-2.0
1:707e258:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:707e258:  */
1:98df130: 
1:707e258: package org.apache.carbondata.core.util;
1:bc3e684: 
1:8affab8: import java.lang.reflect.Method;
1:707e258: import java.nio.ByteBuffer;
1:707e258: import java.util.ArrayList;
1:707e258: import java.util.List;
1:dc83b2a: 
1:bc3e684: import org.apache.carbondata.core.metadata.ValueEncoderMeta;
1:8affab8: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:bc3e684: import org.apache.carbondata.core.metadata.index.BlockIndexInfo;
1:bc3e684: import org.apache.carbondata.format.BlockIndex;
1:bc3e684: import org.apache.carbondata.format.BlockletInfo;
1:bc3e684: import org.apache.carbondata.format.ColumnSchema;
1:bc3e684: import org.apache.carbondata.format.DataChunk;
1:bc3e684: import org.apache.carbondata.format.DataType;
1:bc3e684: import org.apache.carbondata.format.Encoding;
1:bc3e684: import org.apache.carbondata.format.IndexHeader;
1:bc3e684: import org.apache.carbondata.format.SegmentInfo;
1:bc3e684: 
1:bc3e684: import org.junit.BeforeClass;
1:bc3e684: import org.junit.Test;
1:bc3e684: 
1:bc3e684: import static junit.framework.TestCase.assertEquals;
1:707e258: import static org.apache.carbondata.core.util.CarbonMetadataUtil.getBlockIndexInfo;
1:bc3e684: import static org.apache.carbondata.core.util.CarbonMetadataUtil.getIndexHeader;
30:707e258: 
1:707e258: public class CarbonMetadataUtilTest {
1:707e258:   static List<ByteBuffer> byteBufferList;
1:707e258:   static byte[] byteArr;
1:707e258:   static List<ColumnSchema> columnSchemas;
1:707e258:   static List<BlockletInfo> blockletInfoList;
1:707e258:   static List<ColumnSchema> columnSchemaList;
1:707e258:   static Long[] objMaxArr;
1:707e258:   static Long[] objMinArr;
1:dc83b2a:   static int[] objDecimal;
1:707e258: 
1:707e258:   @BeforeClass public static void setUp() {
1:707e258:     objMaxArr = new Long[6];
1:707e258:     objMaxArr[0] = new Long("111111");
1:707e258:     objMaxArr[1] = new Long("121111");
1:707e258:     objMaxArr[2] = new Long("131111");
1:707e258:     objMaxArr[3] = new Long("141111");
1:707e258:     objMaxArr[4] = new Long("151111");
1:707e258:     objMaxArr[5] = new Long("161111");
1:707e258: 
1:707e258:     objMinArr = new Long[6];
1:707e258:     objMinArr[0] = new Long("119");
1:707e258:     objMinArr[1] = new Long("121");
1:707e258:     objMinArr[2] = new Long("131");
1:707e258:     objMinArr[3] = new Long("141");
1:707e258:     objMinArr[4] = new Long("151");
1:707e258:     objMinArr[5] = new Long("161");
1:707e258: 
1:dc83b2a:     objDecimal = new int[] { 0, 0, 0, 0, 0, 0 };
1:dc83b2a: 
2:707e258:     columnSchemaList = new ArrayList<>();
1:707e258:     List<Encoding> encodingList = new ArrayList<>();
1:707e258:     encodingList.add(Encoding.BIT_PACKED);
1:707e258:     encodingList.add(Encoding.DELTA);
1:707e258:     encodingList.add(Encoding.INVERTED_INDEX);
1:707e258:     encodingList.add(Encoding.DIRECT_DICTIONARY);
1:707e258: 
1:707e258:     byteArr = "412111".getBytes();
1:707e258:     byte[] byteArr1 = "321".getBytes();
1:707e258:     byte[] byteArr2 = "356".getBytes();
1:707e258: 
1:707e258:     byteBufferList = new ArrayList<>();
1:707e258:     ByteBuffer bb = ByteBuffer.allocate(byteArr.length);
1:707e258:     bb.put(byteArr);
1:707e258:     ByteBuffer bb1 = ByteBuffer.allocate(byteArr1.length);
1:707e258:     bb1.put(byteArr1);
1:707e258:     ByteBuffer bb2 = ByteBuffer.allocate(byteArr2.length);
1:707e258:     bb2.put(byteArr2);
1:707e258:     byteBufferList.add(bb);
1:707e258:     byteBufferList.add(bb1);
1:707e258:     byteBufferList.add(bb2);
1:707e258: 
1:707e258:     DataChunk dataChunk = new DataChunk();
1:707e258:     dataChunk.setEncoders(encodingList);
1:707e258:     dataChunk.setEncoder_meta(byteBufferList);
1:707e258: 
1:707e258:     List<DataChunk> dataChunkList = new ArrayList<>();
1:707e258:     dataChunkList.add(dataChunk);
1:707e258:     dataChunkList.add(dataChunk);
1:707e258: 
1:707e258:     BlockletInfo blockletInfo = new BlockletInfo();
1:707e258:     blockletInfo.setColumn_data_chunks(dataChunkList);
1:707e258:     blockletInfoList = new ArrayList<>();
1:707e258:     blockletInfoList.add(blockletInfo);
1:707e258:     blockletInfoList.add(blockletInfo);
1:707e258: 
1:e6a4f64:     ValueEncoderMeta meta = CarbonTestUtil.createValueEncoderMeta();
1:bc3e684:     meta.setDecimal(5);
1:bc3e684:     meta.setMinValue(objMinArr);
1:bc3e684:     meta.setMaxValue(objMaxArr);
1:133b303:     meta.setType(org.apache.carbondata.core.metadata.datatype.DataType.DOUBLE_MEASURE_CHAR);
1:707e258: 
1:707e258:     List<Encoding> encoders = new ArrayList<>();
1:707e258:     encoders.add(Encoding.INVERTED_INDEX);
1:707e258:     encoders.add(Encoding.BIT_PACKED);
1:707e258:     encoders.add(Encoding.DELTA);
1:707e258:     encoders.add(Encoding.DICTIONARY);
1:707e258:     encoders.add(Encoding.DIRECT_DICTIONARY);
1:707e258:     encoders.add(Encoding.RLE);
1:707e258: 
1:707e258:     ColumnSchema columnSchema = new ColumnSchema(DataType.INT, "column", "3", true, encoders, true);
1:707e258:     ColumnSchema columnSchema1 =
1:707e258:         new ColumnSchema(DataType.ARRAY, "column", "3", true, encoders, true);
1:707e258:     ColumnSchema columnSchema2 =
1:707e258:         new ColumnSchema(DataType.DECIMAL, "column", "3", true, encoders, true);
1:707e258:     ColumnSchema columnSchema3 =
1:707e258:         new ColumnSchema(DataType.DOUBLE, "column", "3", true, encoders, true);
1:707e258:     ColumnSchema columnSchema4 =
1:707e258:         new ColumnSchema(DataType.LONG, "column", "3", true, encoders, true);
1:707e258:     ColumnSchema columnSchema5 =
1:707e258:         new ColumnSchema(DataType.SHORT, "column", "3", true, encoders, true);
1:707e258:     ColumnSchema columnSchema6 =
1:707e258:         new ColumnSchema(DataType.STRUCT, "column", "3", true, encoders, true);
1:707e258:     ColumnSchema columnSchema7 =
1:707e258:         new ColumnSchema(DataType.STRING, "column", "3", true, encoders, true);
1:707e258:     columnSchemas = new ArrayList<>();
1:707e258:     columnSchemas.add(columnSchema);
1:707e258:     columnSchemas.add(columnSchema1);
1:707e258:     columnSchemas.add(columnSchema2);
1:707e258:     columnSchemas.add(columnSchema3);
1:707e258:     columnSchemas.add(columnSchema4);
1:707e258:     columnSchemas.add(columnSchema5);
1:707e258:     columnSchemas.add(columnSchema6);
1:707e258:     columnSchemas.add(columnSchema7);
4:bc3e684:   }
1:e6a4f64: 
1:707e258:   @Test public void testGetIndexHeader() {
1:707e258:     int[] columnCardinality = { 1, 2, 3, 4 };
2:707e258:     SegmentInfo segmentInfo = new SegmentInfo();
1:707e258:     segmentInfo.setNum_cols(0);
1:707e258:     segmentInfo.setColumn_cardinalities(CarbonUtil.convertToIntegerList(columnCardinality));
1:707e258:     IndexHeader indexHeader = new IndexHeader();
1:2cf1104:     indexHeader.setVersion(3);
1:707e258:     indexHeader.setSegment_info(segmentInfo);
1:707e258:     indexHeader.setTable_columns(columnSchemaList);
1:cbf8797:     indexHeader.setBucket_id(0);
1:7ed144c:     indexHeader.setSchema_time_stamp(0L);
1:7ed144c:     IndexHeader indexheaderResult = getIndexHeader(columnCardinality, columnSchemaList, 0, 0L);
1:707e258:     assertEquals(indexHeader, indexheaderResult);
1:e6a4f64:   }
1:e6a4f64: 
1:707e258:   @Test public void testGetBlockIndexInfo() throws Exception {
1:707e258:     byte[] startKey = { 1, 2, 3, 4, 5 };
1:707e258:     byte[] endKey = { 9, 3, 5, 5, 5 };
1:707e258:     byte[] byteArr = { 1, 2, 3, 4, 5 };
1:707e258:     List<ByteBuffer> minList = new ArrayList<>();
1:707e258:     minList.add(ByteBuffer.wrap(byteArr));
1:e6a4f64: 
1:707e258:     byte[] byteArr1 = { 9, 9, 8, 6, 7 };
1:707e258:     List<ByteBuffer> maxList = new ArrayList<>();
1:707e258:     maxList.add(ByteBuffer.wrap(byteArr1));
1:e6a4f64: 
1:ce09aaa:     org.apache.carbondata.core.metadata.blocklet.index.BlockletMinMaxIndex
1:707e258:         blockletMinMaxIndex =
1:ce09aaa:         new org.apache.carbondata.core.metadata.blocklet.index.BlockletMinMaxIndex(minList,
1:707e258:             maxList);
1:ce09aaa:     org.apache.carbondata.core.metadata.blocklet.index.BlockletBTreeIndex
1:707e258:         blockletBTreeIndex =
1:ce09aaa:         new org.apache.carbondata.core.metadata.blocklet.index.BlockletBTreeIndex(startKey,
1:707e258:             endKey);
1:ce09aaa:     org.apache.carbondata.core.metadata.blocklet.index.BlockletIndex blockletIndex =
1:ce09aaa:         new org.apache.carbondata.core.metadata.blocklet.index.BlockletIndex(
1:707e258:             blockletBTreeIndex, blockletMinMaxIndex);
1:bc3e684: 
1:707e258:     BlockIndexInfo blockIndexInfo = new BlockIndexInfo(1, "file", 1, blockletIndex);
1:bc3e684: 
1:707e258:     List<BlockIndexInfo> blockIndexInfoList = new ArrayList<>();
1:707e258:     blockIndexInfoList.add(blockIndexInfo);
1:707e258:     List<BlockIndex> result = getBlockIndexInfo(blockIndexInfoList);
1:707e258:     String expected = "file";
1:707e258:     assertEquals(result.get(0).file_name, expected);
1:bc3e684:   }
1:bc3e684: 
1:8affab8:   @Test public void testGetBlockletIndex() throws Exception {
1:8affab8: 
1:8affab8:     long left = Long.MAX_VALUE;
1:8affab8:     long right = 100;
1:8affab8:     ByteBuffer buffer = ByteBuffer.allocate(8);
1:8affab8:     buffer.putLong(left);
1:8affab8:     buffer.flip();
1:8affab8:     byte[] l = buffer.array().clone();
1:8affab8: 
1:8affab8:     buffer.rewind();
1:8affab8:     buffer.putLong(right);
1:8affab8:     buffer.flip();
1:8affab8:     byte[] r = buffer.array().clone();
1:8affab8: 
1:8affab8:     Method method = CarbonMetadataUtil.class
1:8affab8:         .getDeclaredMethod("compareMeasureData", l.getClass(), r.getClass(),
1:8affab8:             org.apache.carbondata.core.metadata.datatype.DataType.class);
1:8affab8:     method.setAccessible(true);
1:8affab8:     int out = (int)method.invoke(method, l, r, DataTypes.LONG);
1:8affab8:     assertEquals(1, out);
1:8affab8: 
1:8affab8:   }
1:8affab8: 
1:bc3e684: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:8affab8
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:   @Test public void testGetBlockletIndex() throws Exception {
1: 
1:     long left = Long.MAX_VALUE;
1:     long right = 100;
1:     ByteBuffer buffer = ByteBuffer.allocate(8);
1:     buffer.putLong(left);
1:     buffer.flip();
1:     byte[] l = buffer.array().clone();
1: 
1:     buffer.rewind();
1:     buffer.putLong(right);
1:     buffer.flip();
1:     byte[] r = buffer.array().clone();
1: 
1:     Method method = CarbonMetadataUtil.class
1:         .getDeclaredMethod("compareMeasureData", l.getClass(), r.getClass(),
1:             org.apache.carbondata.core.metadata.datatype.DataType.class);
1:     method.setAccessible(true);
1:     int out = (int)method.invoke(method, l, r, DataTypes.LONG);
1:     assertEquals(1, out);
1: 
1:   }
1: 
commit:cbf8797
/////////////////////////////////////////////////////////////////////////
1:     indexHeader.setBucket_id(0);
0:     IndexHeader indexheaderResult = getIndexHeader(columnCardinality, columnSchemaList, 0);
author:kumarvishal09
-------------------------------------------------------------------------------
commit:e710339
/////////////////////////////////////////////////////////////////////////
author:manishgupta88
-------------------------------------------------------------------------------
commit:7ed144c
/////////////////////////////////////////////////////////////////////////
1:     indexHeader.setSchema_time_stamp(0L);
1:     IndexHeader indexheaderResult = getIndexHeader(columnCardinality, columnSchemaList, 0, 0L);
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:Manhua
-------------------------------------------------------------------------------
commit:40c7e8e
/////////////////////////////////////////////////////////////////////////
0:     TablePageKey key = new TablePageKey(3, segmentProperties, false);
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
0:         org.apache.carbondata.core.metadata.datatype.DataTypes.BYTE));
commit:956833e
/////////////////////////////////////////////////////////////////////////
0:         org.apache.carbondata.core.metadata.datatype.DataTypes.BYTE, 0, 0));
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
/////////////////////////////////////////////////////////////////////////
0:     meta.setType(ColumnPageEncoderMeta.DOUBLE_MEASURE);
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.page.encoding.EncodedColumnPage;
0: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveEncoderMeta;
0: import org.apache.carbondata.core.datastore.page.key.TablePageKey;
0: import org.apache.carbondata.core.datastore.page.statistics.PrimitivePageStatsCollector;
0: import org.apache.carbondata.format.BlockletIndex;
0: import org.apache.carbondata.format.BlockletInfo3;
0: import org.apache.carbondata.format.DataChunk2;
0: import org.apache.carbondata.format.FileFooter3;
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.carbondata.core.util.CarbonMetadataUtil.convertFileFooterVersion3;
0: import static org.apache.carbondata.core.util.CarbonMetadataUtil.getBlockletIndex;
/////////////////////////////////////////////////////////////////////////
1:     ValueEncoderMeta meta = CarbonTestUtil.createValueEncoderMeta();
0:     meta.setType(AdaptiveEncoderMeta.DOUBLE_MEASURE);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     final EncodedColumnPage measure = new EncodedColumnPage(new DataChunk2(), new byte[]{0,1},
0:         PrimitivePageStatsCollector.newInstance(
0:         org.apache.carbondata.core.metadata.datatype.DataType.BYTE, 0, 0));
0:       public EncodedColumnPage getMeasure(int measureIndex) {
0:     new MockUp<TablePageKey>() {
0:       public byte[] serializeStartKey() {
0:         return new byte[]{1, 2};
1:       }
1: 
0:       @SuppressWarnings("unused") @Mock
0:       public byte[] serializeEndKey() {
0:         return new byte[]{1, 2};
0:     TablePageKey key = new TablePageKey(3, null, segmentProperties, false);
0:     EncodedTablePage encodedTablePage = EncodedTablePage.newInstance(3, new EncodedColumnPage[0], new EncodedColumnPage[0],
0:         key);
0:     List<EncodedTablePage> encodedTablePageList = new ArrayList<>();
0:     encodedTablePageList.add(encodedTablePage);
1: 
0:     BlockletInfo3 blockletInfoColumnar1 = new BlockletInfo3();
1: 
0:     List<BlockletInfo3> blockletInfoColumnarList = new ArrayList<>();
0:     blockletInfoColumnarList.add(blockletInfoColumnar1);
0:     BlockletIndex index = getBlockletIndex(encodedTablePageList, segmentProperties.getMeasures());
0:     List<BlockletIndex> indexList = new ArrayList<>();
0:     indexList.add(index);
1: 
0:     FileFooter3 footer = convertFileFooterVersion3(blockletInfoColumnarList,
0:         indexList,
0:         cardinality, 2);
0:     assertEquals(footer.getBlocklet_index_list(), indexList);
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:133b303
/////////////////////////////////////////////////////////////////////////
1:     meta.setType(org.apache.carbondata.core.metadata.datatype.DataType.DOUBLE_MEASURE_CHAR);
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.block.SegmentProperties;
0: import org.apache.carbondata.core.datastore.page.EncodedTablePage;
0: import org.apache.carbondata.core.datastore.page.encoding.EncodedMeasurePage;
0: import org.apache.carbondata.core.metadata.BlockletInfoColumnar;
0: import org.apache.carbondata.core.metadata.CodecMetaFactory;
0: import org.apache.carbondata.core.metadata.ColumnPageCodecMeta;
1: import org.apache.carbondata.core.metadata.ValueEncoderMeta;
1: import org.apache.carbondata.core.metadata.index.BlockIndexInfo;
1: import org.apache.carbondata.format.BlockIndex;
1: import org.apache.carbondata.format.BlockletInfo;
0: import org.apache.carbondata.format.BlockletMinMaxIndex;
1: import org.apache.carbondata.format.ColumnSchema;
1: import org.apache.carbondata.format.DataChunk;
1: import org.apache.carbondata.format.DataType;
1: import org.apache.carbondata.format.Encoding;
0: import org.apache.carbondata.format.FileFooter;
1: import org.apache.carbondata.format.IndexHeader;
1: import org.apache.carbondata.format.SegmentInfo;
1: 
0: import mockit.Mock;
0: import mockit.MockUp;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static junit.framework.TestCase.assertEquals;
1: import static org.apache.carbondata.core.util.CarbonMetadataUtil.getIndexHeader;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     ValueEncoderMeta meta = CodecMetaFactory.createMeta();
1:     meta.setDecimal(5);
1:     meta.setMinValue(objMinArr);
1:     meta.setMaxValue(objMaxArr);
0:     meta.setType(ColumnPageCodecMeta.DOUBLE_MEASURE);
/////////////////////////////////////////////////////////////////////////
0:       metas[i] = CodecMetaFactory.createMeta();
0:       metas[i].setType(ColumnPageCodecMeta.BIG_INT_MEASURE);
0:     final ValueEncoderMeta meta = CodecMetaFactory.createMeta();
1: 
0:     new MockUp<ColumnPageCodecMeta>() {
0:       @SuppressWarnings("unused") @Mock
0:       public byte[] serialize() {
0:         return new byte[]{1,2};
1:       }
0:       @SuppressWarnings("unused") @Mock
0:       public byte[] getMaxAsBytes() {
0:         return new byte[]{1,2};
1:       }
0:       @SuppressWarnings("unused") @Mock
0:       public byte[] getMinAsBytes() {
0:         return new byte[]{1,2};
1:       }
0:       @SuppressWarnings("unused") @Mock
0:       public org.apache.carbondata.core.metadata.datatype.DataType getSrcDataType() {
0:         return org.apache.carbondata.core.metadata.datatype.DataType.DOUBLE;
1:       }
0:     };
1: 
0:     new MockUp<EncodedMeasurePage>() {
0:       @SuppressWarnings("unused") @Mock
0:       public ValueEncoderMeta getMetaData() {
0:         return meta;
1:       }
0:     };
1: 
0:     final EncodedMeasurePage measure = new EncodedMeasurePage(6, new byte[]{0,1}, meta,
0:         new BitSet());
0:     new MockUp<EncodedTablePage>() {
0:       @SuppressWarnings("unused") @Mock
0:       public EncodedMeasurePage getMeasure(int measureIndex) {
0:         return measure;
1:       }
0:     };
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     EncodedTablePage encodedTablePage = EncodedTablePage.newEmptyInstance();
0:     blockletInfoColumnar.setEncodedTablePage(encodedTablePage);
/////////////////////////////////////////////////////////////////////////
0:     blockletInfoColumnar1.setEncodedTablePage(encodedTablePage);
/////////////////////////////////////////////////////////////////////////
0:     FileFooter result = convertFileFooter(blockletInfoColumnarList, cardinality, columnSchemas,
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.datastore.page.statistics.MeasurePageStatsVO;
/////////////////////////////////////////////////////////////////////////
1:   static int[] objDecimal;
/////////////////////////////////////////////////////////////////////////
1:     objDecimal = new int[] { 0, 0, 0, 0, 0, 0 };
1: 
/////////////////////////////////////////////////////////////////////////
0:     ValueEncoderMeta[] metas = new ValueEncoderMeta[6];
0:     for (int i = 0; i < metas.length; i++) {
0:       metas[i] = new ValueEncoderMeta();
0:       metas[i].setMinValue(objMinArr[i]);
0:       metas[i].setMaxValue(objMaxArr[i]);
0:       metas[i].setUniqueValue(objMinArr[i]);
0:       metas[i].setDecimal(objDecimal[i]);
0:       metas[i].setType(CarbonCommonConstants.BIG_INT_MEASURE);
0:       metas[i].setDataTypeSelected(byteArr[i]);
0:     }
1: 
0:     MeasurePageStatsVO stats = MeasurePageStatsVO.build(metas);
/////////////////////////////////////////////////////////////////////////
0:     blockletInfoColumnar.setStats(stats);
/////////////////////////////////////////////////////////////////////////
0:     blockletInfoColumnar1.setStats(stats);
commit:98df130
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.format.DataType;
1: 
/////////////////////////////////////////////////////////////////////////
0:     org.apache.carbondata.core.metadata.datatype.DataType[] dataType = {
0:         org.apache.carbondata.core.metadata.datatype.DataType.INT,
0:         org.apache.carbondata.core.metadata.datatype.DataType.INT,
0:         org.apache.carbondata.core.metadata.datatype.DataType.INT,
0:         org.apache.carbondata.core.metadata.datatype.DataType.INT,
0:         org.apache.carbondata.core.metadata.datatype.DataType.INT };
/////////////////////////////////////////////////////////////////////////
0:     writerCompressModel.setType(dataType);
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.block.SegmentProperties;
0: import org.apache.carbondata.core.metadata.index.BlockIndexInfo;
0: import org.apache.carbondata.core.datastore.compression.WriterCompressModel;
/////////////////////////////////////////////////////////////////////////
0:     org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema colSchema =
0:         new org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema();
0:     org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema colSchema1 =
0:         new org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema();
0:     List<org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema>
/////////////////////////////////////////////////////////////////////////
1:     org.apache.carbondata.core.metadata.blocklet.index.BlockletMinMaxIndex
1:         new org.apache.carbondata.core.metadata.blocklet.index.BlockletMinMaxIndex(minList,
1:     org.apache.carbondata.core.metadata.blocklet.index.BlockletBTreeIndex
1:         new org.apache.carbondata.core.metadata.blocklet.index.BlockletBTreeIndex(startKey,
1:     org.apache.carbondata.core.metadata.blocklet.index.BlockletIndex blockletIndex =
1:         new org.apache.carbondata.core.metadata.blocklet.index.BlockletIndex(
commit:360edc8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastorage.store.compression.WriterCompressModel;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     valueEncoderMeta.setMantissa(5);
/////////////////////////////////////////////////////////////////////////
0:     WriterCompressModel writerCompressModel = new WriterCompressModel();
0:     writerCompressModel.setMaxValue(objMaxArr);
0:     writerCompressModel.setMinValue(objMinArr);
0:     writerCompressModel.setDataTypeSelected(byteArr);
0:     writerCompressModel.setMantissa(intArr);
0:     writerCompressModel.setType(charArr);
0:     writerCompressModel.setUniqueValue(objMinArr);
/////////////////////////////////////////////////////////////////////////
0:     blockletInfoColumnar.setCompressionModel(writerCompressModel);
/////////////////////////////////////////////////////////////////////////
0:     blockletInfoColumnar1.setCompressionModel(writerCompressModel);
commit:0ef3fb8
/////////////////////////////////////////////////////////////////////////
0:     indexHeader.setVersion(2);
author:kumarvishal
-------------------------------------------------------------------------------
commit:2cf1104
/////////////////////////////////////////////////////////////////////////
1:     indexHeader.setVersion(3);
commit:f94bae5
/////////////////////////////////////////////////////////////////////////
0:     valueEncoderMeta.setDecimal(5);
commit:d54dc64
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     indexHeader.setVersion(CarbonCommonConstants.CARBON_DATA_FILE_DEFAULT_VERSION);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:abhishek
-------------------------------------------------------------------------------
commit:707e258
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.util;
1: 
0: import mockit.Mock;
0: import mockit.MockUp;
1: 
0: import org.apache.carbondata.core.carbon.datastore.block.SegmentProperties;
0: import org.apache.carbondata.core.carbon.metadata.blocklet.index.*;
0: import org.apache.carbondata.core.carbon.metadata.blocklet.index.BlockletIndex;
0: import org.apache.carbondata.core.carbon.metadata.index.BlockIndexInfo;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.*;
0: import org.apache.carbondata.core.datastorage.store.compression.ValueCompressionModel;
0: import org.apache.carbondata.core.metadata.BlockletInfoColumnar;
0: import org.apache.carbondata.core.metadata.ValueEncoderMeta;
0: import org.apache.carbondata.format.*;
0: import org.apache.carbondata.format.BlockletBTreeIndex;
0: import org.apache.carbondata.format.BlockletMinMaxIndex;
0: import org.apache.carbondata.format.ColumnSchema;
1: 
0: import org.junit.BeforeClass;
0: import org.junit.Test;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.ObjectInputStream;
1: import java.nio.ByteBuffer;
0: import java.nio.MappedByteBuffer;
1: import java.util.ArrayList;
0: import java.util.BitSet;
0: import java.util.HashSet;
1: import java.util.List;
0: import java.util.Set;
1: 
0: import static junit.framework.TestCase.*;
0: import static org.apache.carbondata.core.util.CarbonMetadataUtil.convertBlockletInfo;
0: import static org.apache.carbondata.core.util.CarbonMetadataUtil.getIndexHeader;
0: import static org.apache.carbondata.core.util.CarbonMetadataUtil.convertFileFooter;
1: import static org.apache.carbondata.core.util.CarbonMetadataUtil.getBlockIndexInfo;
1: 
1: public class CarbonMetadataUtilTest {
1:   static List<ByteBuffer> byteBufferList;
1:   static byte[] byteArr;
1:   static List<ColumnSchema> columnSchemas;
1:   static List<BlockletInfo> blockletInfoList;
1:   static List<ColumnSchema> columnSchemaList;
1:   static Long[] objMaxArr;
1:   static Long[] objMinArr;
1: 
1:   @BeforeClass public static void setUp() {
0:     Long lngObj = new Long("11221");
0:     byte byt = 1;
1:     objMaxArr = new Long[6];
1:     objMaxArr[0] = new Long("111111");
1:     objMaxArr[1] = new Long("121111");
1:     objMaxArr[2] = new Long("131111");
1:     objMaxArr[3] = new Long("141111");
1:     objMaxArr[4] = new Long("151111");
1:     objMaxArr[5] = new Long("161111");
1: 
1:     objMinArr = new Long[6];
1:     objMinArr[0] = new Long("119");
1:     objMinArr[1] = new Long("121");
1:     objMinArr[2] = new Long("131");
1:     objMinArr[3] = new Long("141");
1:     objMinArr[4] = new Long("151");
1:     objMinArr[5] = new Long("161");
1: 
1:     columnSchemaList = new ArrayList<>();
1:     List<Encoding> encodingList = new ArrayList<>();
1:     encodingList.add(Encoding.BIT_PACKED);
1:     encodingList.add(Encoding.DELTA);
1:     encodingList.add(Encoding.INVERTED_INDEX);
1:     encodingList.add(Encoding.DIRECT_DICTIONARY);
1: 
1:     byteArr = "412111".getBytes();
1:     byte[] byteArr1 = "321".getBytes();
1:     byte[] byteArr2 = "356".getBytes();
1: 
1:     byteBufferList = new ArrayList<>();
1:     ByteBuffer bb = ByteBuffer.allocate(byteArr.length);
1:     bb.put(byteArr);
1:     ByteBuffer bb1 = ByteBuffer.allocate(byteArr1.length);
1:     bb1.put(byteArr1);
1:     ByteBuffer bb2 = ByteBuffer.allocate(byteArr2.length);
1:     bb2.put(byteArr2);
1:     byteBufferList.add(bb);
1:     byteBufferList.add(bb1);
1:     byteBufferList.add(bb2);
1: 
1:     DataChunk dataChunk = new DataChunk();
1:     dataChunk.setEncoders(encodingList);
1:     dataChunk.setEncoder_meta(byteBufferList);
1: 
1:     List<DataChunk> dataChunkList = new ArrayList<>();
1:     dataChunkList.add(dataChunk);
1:     dataChunkList.add(dataChunk);
1: 
1:     BlockletInfo blockletInfo = new BlockletInfo();
1:     blockletInfo.setColumn_data_chunks(dataChunkList);
1:     blockletInfoList = new ArrayList<>();
1:     blockletInfoList.add(blockletInfo);
1:     blockletInfoList.add(blockletInfo);
1: 
0:     ValueEncoderMeta valueEncoderMeta = new ValueEncoderMeta();
0:     valueEncoderMeta.setDecimal(5);
0:     valueEncoderMeta.setMinValue(objMinArr);
0:     valueEncoderMeta.setMaxValue(objMaxArr);
0:     valueEncoderMeta.setUniqueValue(lngObj);
0:     valueEncoderMeta.setType('a');
0:     valueEncoderMeta.setDataTypeSelected(byt);
1: 
1:     List<Encoding> encoders = new ArrayList<>();
1:     encoders.add(Encoding.INVERTED_INDEX);
1:     encoders.add(Encoding.BIT_PACKED);
1:     encoders.add(Encoding.DELTA);
1:     encoders.add(Encoding.DICTIONARY);
1:     encoders.add(Encoding.DIRECT_DICTIONARY);
1:     encoders.add(Encoding.RLE);
1: 
1:     ColumnSchema columnSchema = new ColumnSchema(DataType.INT, "column", "3", true, encoders, true);
1:     ColumnSchema columnSchema1 =
1:         new ColumnSchema(DataType.ARRAY, "column", "3", true, encoders, true);
1:     ColumnSchema columnSchema2 =
1:         new ColumnSchema(DataType.DECIMAL, "column", "3", true, encoders, true);
1:     ColumnSchema columnSchema3 =
1:         new ColumnSchema(DataType.DOUBLE, "column", "3", true, encoders, true);
1:     ColumnSchema columnSchema4 =
1:         new ColumnSchema(DataType.LONG, "column", "3", true, encoders, true);
1:     ColumnSchema columnSchema5 =
1:         new ColumnSchema(DataType.SHORT, "column", "3", true, encoders, true);
1:     ColumnSchema columnSchema6 =
1:         new ColumnSchema(DataType.STRUCT, "column", "3", true, encoders, true);
1:     ColumnSchema columnSchema7 =
1:         new ColumnSchema(DataType.STRING, "column", "3", true, encoders, true);
1:     columnSchemas = new ArrayList<>();
1:     columnSchemas.add(columnSchema);
1:     columnSchemas.add(columnSchema1);
1:     columnSchemas.add(columnSchema2);
1:     columnSchemas.add(columnSchema3);
1:     columnSchemas.add(columnSchema4);
1:     columnSchemas.add(columnSchema5);
1:     columnSchemas.add(columnSchema6);
1:     columnSchemas.add(columnSchema7);
0:   }
1: 
1:   @Test public void testGetIndexHeader() {
1:     int[] columnCardinality = { 1, 2, 3, 4 };
1:     SegmentInfo segmentInfo = new SegmentInfo();
1:     segmentInfo.setNum_cols(0);
1:     segmentInfo.setColumn_cardinalities(CarbonUtil.convertToIntegerList(columnCardinality));
1:     IndexHeader indexHeader = new IndexHeader();
1:     indexHeader.setSegment_info(segmentInfo);
1:     indexHeader.setTable_columns(columnSchemaList);
0:     IndexHeader indexheaderResult = getIndexHeader(columnCardinality, columnSchemaList);
1:     assertEquals(indexHeader, indexheaderResult);
0:   }
1: 
0:   @Test public void testConvertFileFooter() throws Exception {
0:     int[] intArr = { 1, 2, 3, 4, 5 };
0:     boolean[] boolArr = { true, true, true, true, true };
0:     long[] longArr = { 1, 2, 3, 4, 5 };
0:     byte[][] maxByteArr = { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 2, 4 }, { 1, 2 } };
0:     int[] cardinality = { 1, 2, 3, 4, 5 };
0:     char[] charArr = { 'a', 's', 'd', 'g', 'h' };
1: 
0:     org.apache.carbondata.core.carbon.metadata.schema.table.column.ColumnSchema colSchema =
0:         new org.apache.carbondata.core.carbon.metadata.schema.table.column.ColumnSchema();
0:     org.apache.carbondata.core.carbon.metadata.schema.table.column.ColumnSchema colSchema1 =
0:         new org.apache.carbondata.core.carbon.metadata.schema.table.column.ColumnSchema();
0:     List<org.apache.carbondata.core.carbon.metadata.schema.table.column.ColumnSchema>
1:         columnSchemaList = new ArrayList<>();
0:     columnSchemaList.add(colSchema);
0:     columnSchemaList.add(colSchema1);
1: 
0:     SegmentProperties segmentProperties = new SegmentProperties(columnSchemaList, cardinality);
1: 
0:     final List<Integer> integerList = new ArrayList<>();
0:     integerList.add(new Integer("1"));
0:     integerList.add(new Integer("2"));
1: 
0:     ValueCompressionModel valueCompressionModel = new ValueCompressionModel();
0:     valueCompressionModel.setMaxValue(objMaxArr);
0:     valueCompressionModel.setMinValue(objMinArr);
0:     valueCompressionModel.setDataTypeSelected(byteArr);
0:     valueCompressionModel.setDecimal(intArr);
0:     valueCompressionModel.setType(charArr);
0:     valueCompressionModel.setUniqueValue(objMinArr);
1: 
0:     BlockletInfoColumnar blockletInfoColumnar = new BlockletInfoColumnar();
1: 
0:     BitSet[] bitSetArr = new BitSet[6];
0:     bitSetArr[0] = new BitSet();
0:     bitSetArr[1] = new BitSet();
0:     bitSetArr[2] = new BitSet();
0:     bitSetArr[3] = new BitSet();
0:     bitSetArr[4] = new BitSet();
0:     bitSetArr[5] = new BitSet();
0:     blockletInfoColumnar.setColumnMaxData(maxByteArr);
0:     blockletInfoColumnar.setColumnMinData(maxByteArr);
0:     blockletInfoColumnar.setKeyLengths(intArr);
0:     blockletInfoColumnar.setColGrpBlocks(boolArr);
0:     blockletInfoColumnar.setKeyOffSets(longArr);
0:     blockletInfoColumnar.setDataIndexMapOffsets(longArr);
0:     blockletInfoColumnar.setAggKeyBlock(boolArr);
0:     blockletInfoColumnar.setDataIndexMapLength(intArr);
0:     blockletInfoColumnar.setIsSortedKeyColumn(boolArr);
0:     blockletInfoColumnar.setKeyOffSets(longArr);
0:     blockletInfoColumnar.setMeasureLength(intArr);
0:     blockletInfoColumnar.setMeasureOffset(longArr);
0:     blockletInfoColumnar.setMeasureNullValueIndex(bitSetArr);
0:     blockletInfoColumnar.setCompressionModel(valueCompressionModel);
1: 
0:     BlockletInfoColumnar blockletInfoColumnar1 = new BlockletInfoColumnar();
0:     blockletInfoColumnar1.setColumnMaxData(maxByteArr);
0:     blockletInfoColumnar1.setColumnMinData(maxByteArr);
0:     blockletInfoColumnar1.setKeyLengths(intArr);
0:     blockletInfoColumnar1.setKeyOffSets(longArr);
0:     blockletInfoColumnar1.setDataIndexMapOffsets(longArr);
0:     blockletInfoColumnar1.setAggKeyBlock(boolArr);
0:     blockletInfoColumnar1.setDataIndexMapLength(intArr);
0:     blockletInfoColumnar1.setIsSortedKeyColumn(boolArr);
0:     blockletInfoColumnar1.setColGrpBlocks(boolArr);
0:     blockletInfoColumnar1.setKeyOffSets(longArr);
0:     blockletInfoColumnar1.setMeasureLength(intArr);
0:     blockletInfoColumnar1.setMeasureOffset(longArr);
0:     blockletInfoColumnar1.setMeasureNullValueIndex(bitSetArr);
0:     blockletInfoColumnar1.setCompressionModel(valueCompressionModel);
0:     blockletInfoColumnar1.setColGrpBlocks(boolArr);
1: 
0:     List<BlockletInfoColumnar> blockletInfoColumnarList = new ArrayList<>();
0:     blockletInfoColumnarList.add(blockletInfoColumnar);
0:     blockletInfoColumnarList.add(blockletInfoColumnar1);
1: 
0:     new MockUp<CarbonUtil>() {
0:       @SuppressWarnings("unused") @Mock public List<Integer> convertToIntegerList(int[] array) {
0:         return integerList;
0:       }
0:     };
1: 
0:     final Set<Integer> integerSet = new HashSet<>();
0:     integerSet.add(new Integer("1"));
0:     integerSet.add(new Integer("2"));
0:     new MockUp<SegmentProperties>() {
0:       @SuppressWarnings("unused") @Mock
0:       public Set<Integer> getDimensionOrdinalForBlock(int blockIndex) {
0:         return integerSet;
0:       }
0:     };
1: 
1:     SegmentInfo segmentInfo = new SegmentInfo();
0:     segmentInfo.setNum_cols(4);
0:     segmentInfo.setColumn_cardinalities(integerList);
1: 
0:     FileFooter fileFooter = new FileFooter();
0:     fileFooter.setNum_rows(4);
0:     fileFooter.setSegment_info(segmentInfo);
1: 
0:     byte[] byteMaxArr = "1".getBytes();
0:     byte[] byteMinArr = "2".getBytes();
1: 
0:     BlockletMinMaxIndex blockletMinMaxIndex = new BlockletMinMaxIndex();
0:     blockletMinMaxIndex.addToMax_values(ByteBuffer.wrap(byteMaxArr));
0:     blockletMinMaxIndex.addToMin_values(ByteBuffer.wrap(byteMinArr));
0:     FileFooter result = convertFileFooter(blockletInfoColumnarList, 4, cardinality, columnSchemas,
0:         segmentProperties);
0:     assertEquals(result.getTable_columns(), columnSchemas);
1: 
0:   }
1: 
1:   @Test public void testGetBlockIndexInfo() throws Exception {
1:     byte[] startKey = { 1, 2, 3, 4, 5 };
1:     byte[] endKey = { 9, 3, 5, 5, 5 };
1:     byte[] byteArr = { 1, 2, 3, 4, 5 };
1:     List<ByteBuffer> minList = new ArrayList<>();
1:     minList.add(ByteBuffer.wrap(byteArr));
1: 
1:     byte[] byteArr1 = { 9, 9, 8, 6, 7 };
1:     List<ByteBuffer> maxList = new ArrayList<>();
1:     maxList.add(ByteBuffer.wrap(byteArr1));
1: 
0:     org.apache.carbondata.core.carbon.metadata.blocklet.index.BlockletMinMaxIndex
1:         blockletMinMaxIndex =
0:         new org.apache.carbondata.core.carbon.metadata.blocklet.index.BlockletMinMaxIndex(minList,
1:             maxList);
0:     org.apache.carbondata.core.carbon.metadata.blocklet.index.BlockletBTreeIndex
1:         blockletBTreeIndex =
0:         new org.apache.carbondata.core.carbon.metadata.blocklet.index.BlockletBTreeIndex(startKey,
1:             endKey);
0:     org.apache.carbondata.core.carbon.metadata.blocklet.index.BlockletIndex blockletIndex =
0:         new org.apache.carbondata.core.carbon.metadata.blocklet.index.BlockletIndex(
1:             blockletBTreeIndex, blockletMinMaxIndex);
1: 
1:     BlockIndexInfo blockIndexInfo = new BlockIndexInfo(1, "file", 1, blockletIndex);
1: 
1:     List<BlockIndexInfo> blockIndexInfoList = new ArrayList<>();
1:     blockIndexInfoList.add(blockIndexInfo);
1:     List<BlockIndex> result = getBlockIndexInfo(blockIndexInfoList);
1:     String expected = "file";
1:     assertEquals(result.get(0).file_name, expected);
0:   }
1: 
0: }
============================================================================