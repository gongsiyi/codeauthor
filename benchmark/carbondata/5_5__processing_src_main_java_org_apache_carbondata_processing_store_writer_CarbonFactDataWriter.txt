1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
4:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
5:cd6a4ff:  */
7:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.processing.store.writer;
1:ebf13dc: 
1:e6a4f64: import java.io.IOException;
1:e6a4f64: 
1:dc83b2a: import org.apache.carbondata.core.datastore.exception.CarbonDataWriterException;
1:f089287: import org.apache.carbondata.processing.store.TablePage;
1:cd6a4ff: 
1:349c59c: public interface CarbonFactDataWriter {
1:cd6a4ff: 
5:cd6a4ff:   /**
1:bc3e684:    * write a encoded table page
1:f089287:    * @param tablePage
1:cd6a4ff:    */
1:e6a4f64:   void writeTablePage(TablePage tablePage) throws CarbonDataWriterException, IOException;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Below method will be used to write the leaf meta data to file
1:cd6a4ff:    *
1:cd6a4ff:    * @throws CarbonDataWriterException
1:cd6a4ff:    */
1:bc3e684:   void writeFooterToFile() throws CarbonDataWriterException;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Below method will be used to initialise the writer
1:cd6a4ff:    */
1:cd6a4ff:   void initializeWriter() throws CarbonDataWriterException;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Below method will be used to close the writer
1:cd6a4ff:    */
1:cd6a4ff:   void closeWriter() throws CarbonDataWriterException;
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: public interface CarbonFactDataWriter {
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1:   void writeTablePage(TablePage tablePage) throws CarbonDataWriterException, IOException;
/////////////////////////////////////////////////////////////////////////
commit:f089287
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.store.TablePage;
1:    * @param tablePage
0:   void writeTablePage(TablePage tablePage) throws CarbonDataWriterException;
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.page.EncodedTablePage;
1:    * write a encoded table page
0:   void writeTablePage(EncodedTablePage encodedTablePage) throws CarbonDataWriterException;
1:   void writeFooterToFile() throws CarbonDataWriterException;
commit:edda248
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.page.encoding.EncodedData;
/////////////////////////////////////////////////////////////////////////
0:   NodeHolder buildDataNodeHolder(EncodedData encoded, TablePageStatistics stats,
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.exception.CarbonDataWriterException;
0: import org.apache.carbondata.processing.store.TablePageKey;
0: import org.apache.carbondata.processing.store.TablePageStatistics;
0:    * This method will be used to create NodeHolder for a table page
0:   NodeHolder buildDataNodeHolder(Encoder.EncodedData encoded, TablePageStatistics stats,
0:       TablePageKey key) throws CarbonDataWriterException;
commit:8cca0af
/////////////////////////////////////////////////////////////////////////
0:    * @param measureArray            measure array
/////////////////////////////////////////////////////////////////////////
0:   NodeHolder buildDataNodeHolder(IndexStorage<T>[] keyStorageArray, byte[][] measureArray,
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.columnar.IndexStorage;
0: import org.apache.carbondata.core.datastore.compression.WriterCompressModel;
commit:3fe6903
/////////////////////////////////////////////////////////////////////////
commit:360edc8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastorage.store.compression.WriterCompressModel;
/////////////////////////////////////////////////////////////////////////
0:       int entryCount, byte[] startKey, byte[] endKey, WriterCompressModel compressionModel,
author:kumarvishal
-------------------------------------------------------------------------------
commit:ebf13dc
/////////////////////////////////////////////////////////////////////////
0: import java.util.BitSet;
1: 
/////////////////////////////////////////////////////////////////////////
0:       byte[] noDictionaryStartKey, byte[] noDictionaryEndKey, BitSet[] nullValueIndexBitSet)
0:       throws CarbonDataWriterException;
commit:2cf1104
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.util.NodeHolder;
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.store.writer;
1: 
0: import org.apache.carbondata.core.datastorage.store.columnar.IndexStorage;
0: import org.apache.carbondata.core.datastorage.store.compression.ValueCompressionModel;
0: import org.apache.carbondata.processing.store.writer.exception.CarbonDataWriterException;
1: 
0: public interface CarbonFactDataWriter<T> {
1: 
1:   /**
0:    * This method will be used to write leaf data to file
0:    * file format
0:    * <key><measure1><measure2>....
1:    *
0:    * @param dataArray            measure array
0:    * @param entryCount           number of entries
0:    * @param startKey             start key of leaf
0:    * @param endKey               end key of leaf
0:    * @param noDictionaryEndKey
0:    * @param noDictionaryStartKey
0:    * @throws CarbonDataWriterException throws new CarbonDataWriterException if any problem
1:    */
1: 
0:   NodeHolder buildDataNodeHolder(IndexStorage<T>[] keyStorageArray, byte[][] dataArray,
0:       int entryCount, byte[] startKey, byte[] endKey, ValueCompressionModel compressionModel,
0:       byte[] noDictionaryStartKey, byte[] noDictionaryEndKey) throws CarbonDataWriterException;
1: 
1:   /**
0:    * If node holder flag is enabled the object will be added to list
0:    * and all the blocklets will be return together. If disabled then this
0:    * method will itself will call for writing the fact data
1:    *
0:    * @param holder
1:    */
0:   void writeBlockletData(NodeHolder holder) throws CarbonDataWriterException;
1: 
1:   /**
1:    * Below method will be used to write the leaf meta data to file
1:    *
1:    * @throws CarbonDataWriterException
1:    */
0:   void writeBlockletInfoToFile() throws CarbonDataWriterException;
1: 
1:   /**
1:    * Below method will be used to initialise the writer
1:    */
1:   void initializeWriter() throws CarbonDataWriterException;
1: 
1:   /**
1:    * Below method will be used to close the writer
1:    */
1:   void closeWriter() throws CarbonDataWriterException;
1: 
1:   /**
0:    * Below method will be used to get the leaf meta data size
1:    */
0:   int getLeafMetadataSize();
1: 
1:   /**
0:    * For getting TempLocation
1:    *
0:    * @return
1:    */
0:   String getTempStoreLocation();
1: 
1:   /**
0:    * @param isNoDictionary
1:    */
0:   void setIsNoDictionary(boolean[] isNoDictionary);
1: 
1: }
============================================================================