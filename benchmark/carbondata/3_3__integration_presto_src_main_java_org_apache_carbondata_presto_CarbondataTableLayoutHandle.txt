1:53267c8: /*
1:53267c8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:53267c8:  * contributor license agreements.  See the NOTICE file distributed with
1:53267c8:  * this work for additional information regarding copyright ownership.
1:53267c8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:53267c8:  * (the "License"); you may not use this file except in compliance with
1:53267c8:  * the License.  You may obtain a copy of the License at
1:53267c8:  *
1:53267c8:  *    http://www.apache.org/licenses/LICENSE-2.0
1:53267c8:  *
1:53267c8:  * Unless required by applicable law or agreed to in writing, software
1:53267c8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:53267c8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:53267c8:  * See the License for the specific language governing permissions and
1:53267c8:  * limitations under the License.
1:53267c8:  */
2:53267c8: 
1:53267c8: package org.apache.carbondata.presto;
1:53267c8: 
1:d4a1577: import java.util.Objects;
1:d4a1577: 
1:d4a1577: import static java.util.Objects.requireNonNull;
1:d4a1577: 
1:53267c8: import com.facebook.presto.spi.ColumnHandle;
1:53267c8: import com.facebook.presto.spi.ConnectorTableLayoutHandle;
1:53267c8: import com.facebook.presto.spi.predicate.TupleDomain;
1:53267c8: import com.fasterxml.jackson.annotation.JsonCreator;
1:53267c8: import com.fasterxml.jackson.annotation.JsonProperty;
1:53267c8: 
1:ccb6560: import static com.google.common.base.MoreObjects.toStringHelper;
1:53267c8: 
1:53267c8: public class CarbondataTableLayoutHandle implements ConnectorTableLayoutHandle {
1:53267c8:   private final CarbondataTableHandle table;
1:53267c8:   private final TupleDomain<ColumnHandle> constraint;
1:53267c8: 
1:53267c8:   @JsonCreator
1:53267c8:   public CarbondataTableLayoutHandle(@JsonProperty("table") CarbondataTableHandle table,
1:53267c8:       @JsonProperty("constraint") TupleDomain<ColumnHandle> constraint) {
1:53267c8:     this.table = requireNonNull(table, "table is null");
1:53267c8:     this.constraint = requireNonNull(constraint, "constraint is null");
1:53267c8:   }
1:53267c8: 
1:53267c8:   @JsonProperty public CarbondataTableHandle getTable() {
1:53267c8:     return table;
1:53267c8:   }
1:53267c8: 
1:53267c8:   @JsonProperty public TupleDomain<ColumnHandle> getConstraint() {
1:53267c8:     return constraint;
1:53267c8:   }
1:53267c8: 
1:53267c8:   @Override public boolean equals(Object obj) {
1:53267c8:     if (this == obj) {
1:53267c8:       return true;
1:53267c8:     }
1:53267c8: 
1:53267c8:     if (obj == null || getClass() != obj.getClass()) {
1:53267c8:       return false;
1:53267c8:     }
1:53267c8: 
1:53267c8:     CarbondataTableLayoutHandle other = (CarbondataTableLayoutHandle) obj;
1:53267c8:     return Objects.equals(table, other.table) && Objects.equals(constraint, other.constraint);
1:53267c8:   }
1:53267c8: 
1:53267c8:   @Override public int hashCode() {
1:53267c8:     return Objects.hash(table, constraint);
1:53267c8:   }
1:53267c8: 
1:53267c8:   @Override public String toString() {
1:53267c8:     return toStringHelper(this).add("table", table).add("constraint", constraint).toString();
1:53267c8:   }
1:53267c8: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:d4a1577
/////////////////////////////////////////////////////////////////////////
1: import java.util.Objects;
1: 
1: import static java.util.Objects.requireNonNull;
1: 
author:Bhavya
-------------------------------------------------------------------------------
commit:ccb6560
/////////////////////////////////////////////////////////////////////////
1: import static com.google.common.base.MoreObjects.toStringHelper;
author:chenliang613
-------------------------------------------------------------------------------
commit:53267c8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto;
1: 
1: import com.facebook.presto.spi.ColumnHandle;
1: import com.facebook.presto.spi.ConnectorTableLayoutHandle;
1: import com.facebook.presto.spi.predicate.TupleDomain;
1: import com.fasterxml.jackson.annotation.JsonCreator;
1: import com.fasterxml.jackson.annotation.JsonProperty;
1: 
0: import java.util.Objects;
1: 
0: //import static com.google.common.base.MoreObjects.toStringHelper;
0: import static com.google.common.base.Objects.toStringHelper;
0: import static java.util.Objects.requireNonNull;
1: 
1: public class CarbondataTableLayoutHandle implements ConnectorTableLayoutHandle {
1:   private final CarbondataTableHandle table;
1:   private final TupleDomain<ColumnHandle> constraint;
1: 
1:   @JsonCreator
1:   public CarbondataTableLayoutHandle(@JsonProperty("table") CarbondataTableHandle table,
1:       @JsonProperty("constraint") TupleDomain<ColumnHandle> constraint) {
1:     this.table = requireNonNull(table, "table is null");
1:     this.constraint = requireNonNull(constraint, "constraint is null");
1:   }
1: 
1:   @JsonProperty public CarbondataTableHandle getTable() {
1:     return table;
1:   }
1: 
1:   @JsonProperty public TupleDomain<ColumnHandle> getConstraint() {
1:     return constraint;
1:   }
1: 
1:   @Override public boolean equals(Object obj) {
1:     if (this == obj) {
1:       return true;
1:     }
1: 
1:     if (obj == null || getClass() != obj.getClass()) {
1:       return false;
1:     }
1: 
1:     CarbondataTableLayoutHandle other = (CarbondataTableLayoutHandle) obj;
1:     return Objects.equals(table, other.table) && Objects.equals(constraint, other.constraint);
1:   }
1: 
1:   @Override public int hashCode() {
1:     return Objects.hash(table, constraint);
1:   }
1: 
1:   @Override public String toString() {
1:     return toStringHelper(this).add("table", table).add("constraint", constraint).toString();
1:   }
1: }
============================================================================