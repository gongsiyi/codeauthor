1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:d53feef:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
6:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
5:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache;
1:cd6a4ff: 
1:eaadc88: import java.io.IOException;
1:cd6a4ff: import java.util.List;
1:531ecdf: 
1:531ecdf: import org.apache.carbondata.core.memory.MemoryException;
1:531ecdf: 
3:cd6a4ff: /**
1:cd6a4ff:  * A semi-persistent mapping from keys to values. Cache entries are manually added using
1:cd6a4ff:  * #get(Key), #getAll(List<Keys>) , and are stored in the cache until
1:cd6a4ff:  * either evicted or manually invalidated.
1:cd6a4ff:  * Implementations of this interface are expected to be thread-safe, and can be safely accessed
1:cd6a4ff:  * by multiple concurrent threads.
1:d53feef:  * This class also responsible for incrementing and decrementing access count during get operation
1:cd6a4ff:  */
1:cd6a4ff: public interface Cache<K, V> {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will get the value for the given key. If value does not exist
1:cd6a4ff:    * for the given key, it will check and load the value.
1:531ecdf:    *
1:d53feef:    * Access count of Cacheable entry will be incremented
1:d53feef:    *
1:531ecdf:    * @param key
1:cd6a4ff:    * @return
1:eaadc88:    * @throws IOException in case memory is not sufficient to load data into memory
1:531ecdf:    */
1:eaadc88:   V get(K key) throws IOException;
1:d53feef: 
1:d53feef:   /**
1:cd6a4ff:    * This method will return a list of values for the given list of keys.
1:cd6a4ff:    * For each key, this method will check and load the data if required.
1:d53feef:    * Access count of Cacheable entry will be incremented
1:d53feef:    * @param keys
1:cd6a4ff:    * @return
1:eaadc88:    * @throws IOException in case memory is not sufficient to load data into memory
1:d53feef:    */
1:eaadc88:   List<V> getAll(List<K> keys) throws IOException;
1:d53feef: 
1:d53feef:   /**
1:cd6a4ff:    * This method will return the value for the given key. It will not check and load
1:cd6a4ff:    * the data for the given key
1:d53feef:    * Access count of Cacheable entry will be incremented
2:cd6a4ff:    * @param key
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   V getIfPresent(K key);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will remove the cache for a given key
1:d53feef:    *
1:cd6a4ff:    * @param key
1:cd6a4ff:    */
1:cd6a4ff:   void invalidate(K key);
1:531ecdf: 
1:531ecdf:   /**
1:531ecdf:    * This method will add the value to the cache for the given key
1:531ecdf:    *
1:531ecdf:    * @param key
1:531ecdf:    * @param value
1:531ecdf:    */
1:531ecdf:   void put(K key, V value) throws IOException, MemoryException;
1:531ecdf: 
1:531ecdf:   /**
1:d53feef:    * Access count of Cacheable entry will be decremented
1:d53feef:    *
1:d53feef:    * @param keys
1:d53feef:    */
1:d53feef:   void clearAccessCount(List<K> keys);
1:cd6a4ff: }
1:cd6a4ff: 
============================================================================
author:dhatchayani
-------------------------------------------------------------------------------
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.memory.MemoryException;
1: 
/////////////////////////////////////////////////////////////////////////
1:    * This method will add the value to the cache for the given key
1:    *
1:    * @param key
1:    * @param value
1:    */
1:   void put(K key, V value) throws IOException, MemoryException;
1: 
1:   /**
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.memory.MemoryException;
1: 
/////////////////////////////////////////////////////////////////////////
0:    * This method will add the value to the cache for the given key
1:    *
1:    * @param key
0:    * @param value
1:    */
0:   void put(K key, V value) throws IOException, MemoryException;
1: 
1:   /**
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:    * @throws IOException in case memory is not sufficient to load data into memory
1:   V get(K key) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:    * @throws IOException in case memory is not sufficient to load data into memory
1:   List<V> getAll(List<K> keys) throws IOException;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0:    * @throws IOException in case memory is not sufficient to load data into memory
0:   V get(K key) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:    * @throws IOException in case memory is not sufficient to load data into memory
0:   List<V> getAll(List<K> keys) throws IOException;
author:Venkata Ramana G
-------------------------------------------------------------------------------
commit:d53feef
/////////////////////////////////////////////////////////////////////////
1:  * This class also responsible for incrementing and decrementing access count during get operation
/////////////////////////////////////////////////////////////////////////
1:    * Access count of Cacheable entry will be incremented
1:    *
/////////////////////////////////////////////////////////////////////////
1:    * Access count of Cacheable entry will be incremented
/////////////////////////////////////////////////////////////////////////
1:    * Access count of Cacheable entry will be incremented
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Access count of Cacheable entry will be decremented
1:    *
1:    * @param keys
1:    */
1:   void clearAccessCount(List<K> keys);
commit:d53feef
/////////////////////////////////////////////////////////////////////////
0:  * This class also responsible for incrementing and decrementing access count during get operation
/////////////////////////////////////////////////////////////////////////
0:    * Access count of Cacheable entry will be incremented
1:    *
/////////////////////////////////////////////////////////////////////////
0:    * Access count of Cacheable entry will be incremented
/////////////////////////////////////////////////////////////////////////
0:    * Access count of Cacheable entry will be incremented
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
0:    * Access count of Cacheable entry will be decremented
1:    *
1:    * @param keys
1:    */
0:   void clearAccessCount(List<K> keys);
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache;
1: 
1: import java.util.List;
1: 
0: import org.apache.carbondata.core.util.CarbonUtilException;
1: 
1: /**
1:  * A semi-persistent mapping from keys to values. Cache entries are manually added using
1:  * #get(Key), #getAll(List<Keys>) , and are stored in the cache until
1:  * either evicted or manually invalidated.
1:  * Implementations of this interface are expected to be thread-safe, and can be safely accessed
1:  * by multiple concurrent threads.
1:  */
1: public interface Cache<K, V> {
1: 
1:   /**
1:    * This method will get the value for the given key. If value does not exist
1:    * for the given key, it will check and load the value.
1:    *
1:    * @param key
1:    * @return
0:    * @throws CarbonUtilException in case memory is not sufficient to load data into memory
1:    */
0:   V get(K key) throws CarbonUtilException;
1: 
1:   /**
1:    * This method will return a list of values for the given list of keys.
1:    * For each key, this method will check and load the data if required.
1:    *
0:    * @param keys
1:    * @return
0:    * @throws CarbonUtilException in case memory is not sufficient to load data into memory
1:    */
0:   List<V> getAll(List<K> keys) throws CarbonUtilException;
1: 
1:   /**
1:    * This method will return the value for the given key. It will not check and load
1:    * the data for the given key
1:    *
1:    * @param key
1:    * @return
1:    */
1:   V getIfPresent(K key);
1: 
1:   /**
1:    * This method will remove the cache for a given key
1:    *
1:    * @param key
1:    */
1:   void invalidate(K key);
1: }
1: 
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.core.cache;
0: 
0: import java.util.List;
0: 
0: import org.apache.carbondata.core.util.CarbonUtilException;
0: 
0: /**
0:  * A semi-persistent mapping from keys to values. Cache entries are manually added using
0:  * #get(Key), #getAll(List<Keys>) , and are stored in the cache until
0:  * either evicted or manually invalidated.
0:  * Implementations of this interface are expected to be thread-safe, and can be safely accessed
0:  * by multiple concurrent threads.
0:  */
0: public interface Cache<K, V> {
0: 
0:   /**
0:    * This method will get the value for the given key. If value does not exist
0:    * for the given key, it will check and load the value.
0:    *
0:    * @param key
0:    * @return
0:    * @throws CarbonUtilException in case memory is not sufficient to load data into memory
0:    */
0:   V get(K key) throws CarbonUtilException;
0: 
0:   /**
0:    * This method will return a list of values for the given list of keys.
0:    * For each key, this method will check and load the data if required.
0:    *
0:    * @param keys
0:    * @return
0:    * @throws CarbonUtilException in case memory is not sufficient to load data into memory
0:    */
0:   List<V> getAll(List<K> keys) throws CarbonUtilException;
0: 
0:   /**
0:    * This method will return the value for the given key. It will not check and load
0:    * the data for the given key
0:    *
0:    * @param key
0:    * @return
0:    */
0:   V getIfPresent(K key);
0: 
0:   /**
0:    * This method will remove the cache for a given key
0:    *
0:    * @param key
0:    */
0:   void invalidate(K key);
0: }
0: 
============================================================================