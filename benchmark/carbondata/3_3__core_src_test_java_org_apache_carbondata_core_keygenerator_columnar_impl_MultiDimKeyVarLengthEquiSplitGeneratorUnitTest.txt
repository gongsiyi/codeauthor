1:5ef67ac: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:5ef67ac:  *
1:5ef67ac:  *    http://www.apache.org/licenses/LICENSE-2.0
1:5ef67ac:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:5ef67ac:  */
1:5ef67ac: 
1:5ef67ac: package org.apache.carbondata.core.keygenerator.columnar.impl;
1:5ef67ac: 
1:5ef67ac: import org.junit.*;
1:5ef67ac: 
1:5ef67ac: import static org.hamcrest.MatcherAssert.assertThat;
1:5ef67ac: import static junit.framework.Assert.assertEquals;
1:5ef67ac: import static org.hamcrest.CoreMatchers.equalTo;
1:5ef67ac: import static org.hamcrest.core.Is.is;
1:5ef67ac: 
1:5ef67ac: import java.util.Arrays;
1:5ef67ac: 
1:5ef67ac: import org.apache.carbondata.core.keygenerator.KeyGenException;
1:5ef67ac: 
1:5ef67ac: public class MultiDimKeyVarLengthEquiSplitGeneratorUnitTest {
1:5ef67ac: 
1:5ef67ac:   static MultiDimKeyVarLengthEquiSplitGenerator multiDimKeyVarLengthEquiSplitGenerator;
1:5ef67ac: 
1:5ef67ac:   @BeforeClass public static void setup() {
1:5ef67ac:     int[] lens = new int[] { 32, 8, 16, 16, 16 };
1:5ef67ac:     byte dimensionsToSplit = 1;
1:5ef67ac:     multiDimKeyVarLengthEquiSplitGenerator =
1:5ef67ac:         new MultiDimKeyVarLengthEquiSplitGenerator(lens, dimensionsToSplit);
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testSplitKeyWithNewDimensionToSplit() {
1:5ef67ac:     int[] lens = new int[] { 24, 8, 16, 16, 16 };
1:5ef67ac:     byte dimensionsToSplit = 3;
1:5ef67ac:     MultiDimKeyVarLengthEquiSplitGenerator multiDimKeyVarLengthEquiSplitGeneratorNew =
1:5ef67ac:         new MultiDimKeyVarLengthEquiSplitGenerator(lens, dimensionsToSplit);
1:5ef67ac:     byte[][] result_value = new byte[][] { { 16, 8, 24, 46, 76, 64 }, { 80, 36, 72, 48 } };
1:5ef67ac:     byte[] key = new byte[] { 16, 8, 24, 46, 76, 64, 80, 36, 72, 48 };
1:5ef67ac:     byte[][] result = multiDimKeyVarLengthEquiSplitGeneratorNew.splitKey(key);
1:29be1d0:     Assert.assertTrue(Arrays.deepEquals(result, result_value));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testSplitKeyWithNewDimensionToSplitValue16() {
1:5ef67ac:     int[] lens = new int[] { 24, 8, 16, 16, 16 };
1:5ef67ac:     byte dimensionsToSplit = 16;
1:5ef67ac:     MultiDimKeyVarLengthEquiSplitGenerator multiDimKeyVarLengthEquiSplitGeneratorNew =
1:5ef67ac:         new MultiDimKeyVarLengthEquiSplitGenerator(lens, dimensionsToSplit);
1:5ef67ac:     byte[][] result_value = new byte[][] { { 16, 8, 24, 46, 76, 64, 80, 36, 72, 48 } };
1:5ef67ac:     byte[] key = new byte[] { 16, 8, 24, 46, 76, 64, 80, 36, 72, 48 };
1:5ef67ac:     byte[][] result = multiDimKeyVarLengthEquiSplitGeneratorNew.splitKey(key);
1:29be1d0:     Assert.assertTrue(Arrays.deepEquals(result, result_value));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testGenerateAndSplitKeyAndGetKeyArrayWithActualLogic() throws KeyGenException {
1:5ef67ac:     long[] keys = new long[] { 12253L, 48254L, 451245L, 52245L, 36458L, 48123L, 264L, 5852L, 42L };
1:5ef67ac:     long[] expected_result = { 12253, 126, 58029, 52245, 36458 };
1:5ef67ac:     byte[][] result_GenerateAndSplitKey =
1:5ef67ac:         multiDimKeyVarLengthEquiSplitGenerator.generateAndSplitKey(keys);
1:5ef67ac:     long[] result_GetKeyArray =
1:5ef67ac:         multiDimKeyVarLengthEquiSplitGenerator.getKeyArray(result_GenerateAndSplitKey);
1:5ef67ac:     assertThat(result_GetKeyArray, is(equalTo(expected_result)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testSplitKey() throws Exception {
1:5ef67ac:     byte[][] result_value =
1:5ef67ac:         new byte[][] { { 1, 102, 20, 56 }, { 64 }, { 36, 18 }, { 16, 28 }, { 98, 93 } };
1:5ef67ac:     byte[] key = new byte[] { 1, 102, 20, 56, 64, 36, 18, 16, 28, 98, 93 };
1:5ef67ac:     byte[][] result = multiDimKeyVarLengthEquiSplitGenerator.splitKey(key);
1:29be1d0:     Assert.assertTrue(Arrays.deepEquals(result, result_value));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetKeyArray() throws Exception {
1:5ef67ac:     long[] result_value = new long[] { 23467064L, 64L, 9234L, 4124L, 25181L };
1:5ef67ac:     byte[][] key = new byte[][] { { 1, 102, 20, 56, 64, 36, 18, 16, 28, 98, 93 } };
1:5ef67ac:     long[] result = multiDimKeyVarLengthEquiSplitGenerator.getKeyArray(key);
1:5ef67ac:     assertThat(result, is(equalTo(result_value)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testKeyByteArray() throws Exception {
1:5ef67ac:     byte[] result_value = new byte[] { 1, 102, 20, 56, 64, 36, 18, 16, 28, 98, 93 };
1:5ef67ac:     byte[][] key = new byte[][] { { 1, 102, 20, 56, 64, 36, 18, 16, 28, 98, 93 } };
1:5ef67ac:     byte[] result = multiDimKeyVarLengthEquiSplitGenerator.getKeyByteArray(key);
1:29be1d0:     Assert.assertTrue(Arrays.equals(result, result_value));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   /*
1:5ef67ac:    * In this test scenario We will send  blockIndexes { 0 }.
1:5ef67ac:    * Where value of blockKeySize is {4,1,2,2,2}
1:5ef67ac:    * It will add value 0f {0} indexes and will return the size which is 4.
1:5ef67ac:    *
1:5ef67ac:    * @throws Exception
1:5ef67ac:    */
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetKeySizeByBlockWithBlockIndexesLengthIsZero() throws Exception {
1:5ef67ac:     int result_value = 4;
1:5ef67ac:     int[] blockIndexes = new int[] { 0 };
1:5ef67ac:     int result = multiDimKeyVarLengthEquiSplitGenerator.getKeySizeByBlock(blockIndexes);
1:5ef67ac:     assertEquals(result_value, result);
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   /*
1:5ef67ac:    * In this test scenario We will send  blockIndexes { 0, 1, 2 }.
1:5ef67ac:    * Where value of blockKeySize is {4,1,2,2,2}
1:5ef67ac:    * It will add value 0f {0, 1, 2} indexes and will return the size which is 7.
1:5ef67ac:    *
1:5ef67ac:    * @throws Exception
1:5ef67ac:    */
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetKeySizeByBlockWithBlockIndexesLengthIsGreaterThanZero()
1:5ef67ac:       throws Exception {
1:5ef67ac:     int result_value = 7;
1:5ef67ac:     int[] blockIndexes = new int[] { 0, 1, 2 };
1:5ef67ac:     int result = multiDimKeyVarLengthEquiSplitGenerator.getKeySizeByBlock(blockIndexes);
1:5ef67ac:     assertEquals(result_value, result);
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   /*
1:5ef67ac:    * In this test scenario We will send  blockIndexes {1, 2, 7} where {7} > blockKeySize.length which is 5.
1:5ef67ac:    * Where value of blockKeySize is {4,1,2,2,2}
1:5ef67ac:    * It will add value 0f {1, 2, 7} indexes and will return the size which is 3.
1:5ef67ac:    *
1:5ef67ac:    * @throws Exception
1:5ef67ac:    */
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetKeySizeByBlockWithBlockIndexesLengthIsBlockKeySizeLength()
1:5ef67ac:       throws Exception {
1:5ef67ac:     int result_value = 3;
1:5ef67ac:     int[] blockIndexes = new int[] { 1, 2, 7 };
1:5ef67ac:     int result = multiDimKeyVarLengthEquiSplitGenerator.getKeySizeByBlock(blockIndexes);
1:5ef67ac:     assertEquals(result_value, result);
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   /*
1:5ef67ac:    * In this test scenario We will send  blockIndexes {10} where {10} > blockKeySize.length which is 5.
1:5ef67ac:    * Where value of blockKeySize is {4,1,2,2,2}
1:5ef67ac:    * It will return default value 0.
1:5ef67ac:    *
1:5ef67ac:    * @throws Exception
1:5ef67ac:    */
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetKeySizeByBlockWith() throws Exception {
1:5ef67ac:     int result_value = 0;
1:5ef67ac:     int[] key = new int[] { 10 };
1:5ef67ac:     int result = multiDimKeyVarLengthEquiSplitGenerator.getKeySizeByBlock(key);
1:5ef67ac:     assertEquals(result_value, result);
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testEqualsWithAnyObject() throws Exception {
1:5ef67ac:     Object obj = new Object();
1:5ef67ac:     boolean result = multiDimKeyVarLengthEquiSplitGenerator.equals(obj);
1:29be1d0:     Assert.assertTrue(!result);
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testEqualsWithDifferentValueMultiDimKeyVarLengthEquiSplitGeneratorObject()
1:5ef67ac:       throws Exception {
1:5ef67ac:     int[] lens = new int[] { 32, 8, 16, 16, 16 };
1:5ef67ac:     byte dimensionsToSplit = 2;
1:5ef67ac:     boolean result = multiDimKeyVarLengthEquiSplitGenerator
1:5ef67ac:         .equals(new MultiDimKeyVarLengthEquiSplitGenerator(lens, dimensionsToSplit));
1:29be1d0:     Assert.assertTrue(!result);
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testEqualsWithSameValueMultiDimKeyVarLengthEquiSplitGeneratorObject()
1:5ef67ac:       throws Exception {
1:5ef67ac:     int[] lens = new int[] { 32, 8, 16, 16, 16 };
1:5ef67ac:     byte dimensionsToSplit = 1;
1:5ef67ac:     boolean result = multiDimKeyVarLengthEquiSplitGenerator
1:5ef67ac:         .equals(new MultiDimKeyVarLengthEquiSplitGenerator(lens, dimensionsToSplit));
1:29be1d0:     Assert.assertTrue(result);
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   /**
1:5ef67ac:    * Test case for exception when Key size is less than byte key size
1:5ef67ac:    */
1:5ef67ac: 
1:5ef67ac:   @Test(expected = ArrayIndexOutOfBoundsException.class) public void testSplitKeyWithException() {
1:5ef67ac:     int[] lens = new int[] { 24, 8, 16, 16, 16 };
1:5ef67ac:     byte dimensionsToSplit = 3;
1:5ef67ac:     MultiDimKeyVarLengthEquiSplitGenerator multiDimKeyVarLengthEquiSplitGeneratorNew =
1:5ef67ac:         new MultiDimKeyVarLengthEquiSplitGenerator(lens, dimensionsToSplit);
1:5ef67ac:     byte[][] result_value = new byte[][] { { 16, 8, 24, 46, 76, 64 }, { 80, 36, 72, 48 } };
1:5ef67ac:     byte[] key = new byte[] { 16, 8, 24, 46, 76 };
1:5ef67ac:     byte[][] result = multiDimKeyVarLengthEquiSplitGeneratorNew.splitKey(key);
1:29be1d0:     Assert.assertTrue(Arrays.deepEquals(result, result_value));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:29be1d0
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(Arrays.deepEquals(result, result_value));
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(Arrays.deepEquals(result, result_value));
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(Arrays.deepEquals(result, result_value));
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(Arrays.equals(result, result_value));
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(!result);
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(!result);
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(result);
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(Arrays.deepEquals(result, result_value));
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Anurag
-------------------------------------------------------------------------------
commit:5ef67ac
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.keygenerator.columnar.impl;
1: 
1: import org.junit.*;
1: 
1: import static org.hamcrest.MatcherAssert.assertThat;
1: import static junit.framework.Assert.assertEquals;
1: import static org.hamcrest.CoreMatchers.equalTo;
1: import static org.hamcrest.core.Is.is;
1: 
1: import java.util.Arrays;
1: 
1: import org.apache.carbondata.core.keygenerator.KeyGenException;
1: 
1: public class MultiDimKeyVarLengthEquiSplitGeneratorUnitTest {
1: 
1:   static MultiDimKeyVarLengthEquiSplitGenerator multiDimKeyVarLengthEquiSplitGenerator;
1: 
1:   @BeforeClass public static void setup() {
1:     int[] lens = new int[] { 32, 8, 16, 16, 16 };
1:     byte dimensionsToSplit = 1;
1:     multiDimKeyVarLengthEquiSplitGenerator =
1:         new MultiDimKeyVarLengthEquiSplitGenerator(lens, dimensionsToSplit);
1:   }
1: 
1:   @Test public void testSplitKeyWithNewDimensionToSplit() {
1:     int[] lens = new int[] { 24, 8, 16, 16, 16 };
1:     byte dimensionsToSplit = 3;
1:     MultiDimKeyVarLengthEquiSplitGenerator multiDimKeyVarLengthEquiSplitGeneratorNew =
1:         new MultiDimKeyVarLengthEquiSplitGenerator(lens, dimensionsToSplit);
1:     byte[][] result_value = new byte[][] { { 16, 8, 24, 46, 76, 64 }, { 80, 36, 72, 48 } };
1:     byte[] key = new byte[] { 16, 8, 24, 46, 76, 64, 80, 36, 72, 48 };
1:     byte[][] result = multiDimKeyVarLengthEquiSplitGeneratorNew.splitKey(key);
0:     assert (Arrays.deepEquals(result, result_value));
1:   }
1: 
1:   @Test public void testSplitKeyWithNewDimensionToSplitValue16() {
1:     int[] lens = new int[] { 24, 8, 16, 16, 16 };
1:     byte dimensionsToSplit = 16;
1:     MultiDimKeyVarLengthEquiSplitGenerator multiDimKeyVarLengthEquiSplitGeneratorNew =
1:         new MultiDimKeyVarLengthEquiSplitGenerator(lens, dimensionsToSplit);
1:     byte[][] result_value = new byte[][] { { 16, 8, 24, 46, 76, 64, 80, 36, 72, 48 } };
1:     byte[] key = new byte[] { 16, 8, 24, 46, 76, 64, 80, 36, 72, 48 };
1:     byte[][] result = multiDimKeyVarLengthEquiSplitGeneratorNew.splitKey(key);
0:     assert (Arrays.deepEquals(result, result_value));
1:   }
1: 
1:   @Test public void testGenerateAndSplitKeyAndGetKeyArrayWithActualLogic() throws KeyGenException {
1:     long[] keys = new long[] { 12253L, 48254L, 451245L, 52245L, 36458L, 48123L, 264L, 5852L, 42L };
1:     long[] expected_result = { 12253, 126, 58029, 52245, 36458 };
1:     byte[][] result_GenerateAndSplitKey =
1:         multiDimKeyVarLengthEquiSplitGenerator.generateAndSplitKey(keys);
1:     long[] result_GetKeyArray =
1:         multiDimKeyVarLengthEquiSplitGenerator.getKeyArray(result_GenerateAndSplitKey);
1:     assertThat(result_GetKeyArray, is(equalTo(expected_result)));
1:   }
1: 
1:   @Test public void testSplitKey() throws Exception {
1:     byte[][] result_value =
1:         new byte[][] { { 1, 102, 20, 56 }, { 64 }, { 36, 18 }, { 16, 28 }, { 98, 93 } };
1:     byte[] key = new byte[] { 1, 102, 20, 56, 64, 36, 18, 16, 28, 98, 93 };
1:     byte[][] result = multiDimKeyVarLengthEquiSplitGenerator.splitKey(key);
0:     assert (Arrays.deepEquals(result, result_value));
1:   }
1: 
1:   @Test public void testGetKeyArray() throws Exception {
1:     long[] result_value = new long[] { 23467064L, 64L, 9234L, 4124L, 25181L };
1:     byte[][] key = new byte[][] { { 1, 102, 20, 56, 64, 36, 18, 16, 28, 98, 93 } };
1:     long[] result = multiDimKeyVarLengthEquiSplitGenerator.getKeyArray(key);
1:     assertThat(result, is(equalTo(result_value)));
1:   }
1: 
1:   @Test public void testKeyByteArray() throws Exception {
1:     byte[] result_value = new byte[] { 1, 102, 20, 56, 64, 36, 18, 16, 28, 98, 93 };
1:     byte[][] key = new byte[][] { { 1, 102, 20, 56, 64, 36, 18, 16, 28, 98, 93 } };
1:     byte[] result = multiDimKeyVarLengthEquiSplitGenerator.getKeyByteArray(key);
0:     assert (Arrays.equals(result, result_value));
1:   }
1: 
1:   /*
1:    * In this test scenario We will send  blockIndexes { 0 }.
1:    * Where value of blockKeySize is {4,1,2,2,2}
1:    * It will add value 0f {0} indexes and will return the size which is 4.
1:    *
1:    * @throws Exception
1:    */
1: 
1:   @Test public void testGetKeySizeByBlockWithBlockIndexesLengthIsZero() throws Exception {
1:     int result_value = 4;
1:     int[] blockIndexes = new int[] { 0 };
1:     int result = multiDimKeyVarLengthEquiSplitGenerator.getKeySizeByBlock(blockIndexes);
1:     assertEquals(result_value, result);
1:   }
1: 
1:   /*
1:    * In this test scenario We will send  blockIndexes { 0, 1, 2 }.
1:    * Where value of blockKeySize is {4,1,2,2,2}
1:    * It will add value 0f {0, 1, 2} indexes and will return the size which is 7.
1:    *
1:    * @throws Exception
1:    */
1: 
1:   @Test public void testGetKeySizeByBlockWithBlockIndexesLengthIsGreaterThanZero()
1:       throws Exception {
1:     int result_value = 7;
1:     int[] blockIndexes = new int[] { 0, 1, 2 };
1:     int result = multiDimKeyVarLengthEquiSplitGenerator.getKeySizeByBlock(blockIndexes);
1:     assertEquals(result_value, result);
1:   }
1: 
1:   /*
1:    * In this test scenario We will send  blockIndexes {1, 2, 7} where {7} > blockKeySize.length which is 5.
1:    * Where value of blockKeySize is {4,1,2,2,2}
1:    * It will add value 0f {1, 2, 7} indexes and will return the size which is 3.
1:    *
1:    * @throws Exception
1:    */
1: 
1:   @Test public void testGetKeySizeByBlockWithBlockIndexesLengthIsBlockKeySizeLength()
1:       throws Exception {
1:     int result_value = 3;
1:     int[] blockIndexes = new int[] { 1, 2, 7 };
1:     int result = multiDimKeyVarLengthEquiSplitGenerator.getKeySizeByBlock(blockIndexes);
1:     assertEquals(result_value, result);
1:   }
1: 
1:   /*
1:    * In this test scenario We will send  blockIndexes {10} where {10} > blockKeySize.length which is 5.
1:    * Where value of blockKeySize is {4,1,2,2,2}
1:    * It will return default value 0.
1:    *
1:    * @throws Exception
1:    */
1: 
1:   @Test public void testGetKeySizeByBlockWith() throws Exception {
1:     int result_value = 0;
1:     int[] key = new int[] { 10 };
1:     int result = multiDimKeyVarLengthEquiSplitGenerator.getKeySizeByBlock(key);
1:     assertEquals(result_value, result);
1:   }
1: 
1:   @Test public void testEqualsWithAnyObject() throws Exception {
1:     Object obj = new Object();
1:     boolean result = multiDimKeyVarLengthEquiSplitGenerator.equals(obj);
0:     assert (!result);
1:   }
1: 
1:   @Test public void testEqualsWithDifferentValueMultiDimKeyVarLengthEquiSplitGeneratorObject()
1:       throws Exception {
1:     int[] lens = new int[] { 32, 8, 16, 16, 16 };
1:     byte dimensionsToSplit = 2;
1:     boolean result = multiDimKeyVarLengthEquiSplitGenerator
1:         .equals(new MultiDimKeyVarLengthEquiSplitGenerator(lens, dimensionsToSplit));
0:     assert (!result);
1:   }
1: 
1:   @Test public void testEqualsWithSameValueMultiDimKeyVarLengthEquiSplitGeneratorObject()
1:       throws Exception {
1:     int[] lens = new int[] { 32, 8, 16, 16, 16 };
1:     byte dimensionsToSplit = 1;
1:     boolean result = multiDimKeyVarLengthEquiSplitGenerator
1:         .equals(new MultiDimKeyVarLengthEquiSplitGenerator(lens, dimensionsToSplit));
0:     assert (result);
1:   }
1: 
1:   /**
1:    * Test case for exception when Key size is less than byte key size
1:    */
1: 
1:   @Test(expected = ArrayIndexOutOfBoundsException.class) public void testSplitKeyWithException() {
1:     int[] lens = new int[] { 24, 8, 16, 16, 16 };
1:     byte dimensionsToSplit = 3;
1:     MultiDimKeyVarLengthEquiSplitGenerator multiDimKeyVarLengthEquiSplitGeneratorNew =
1:         new MultiDimKeyVarLengthEquiSplitGenerator(lens, dimensionsToSplit);
1:     byte[][] result_value = new byte[][] { { 16, 8, 24, 46, 76, 64 }, { 80, 36, 72, 48 } };
1:     byte[] key = new byte[] { 16, 8, 24, 46, 76 };
1:     byte[][] result = multiDimKeyVarLengthEquiSplitGeneratorNew.splitKey(key);
0:     assert (Arrays.deepEquals(result, result_value));
1:   }
1: 
1: }
============================================================================