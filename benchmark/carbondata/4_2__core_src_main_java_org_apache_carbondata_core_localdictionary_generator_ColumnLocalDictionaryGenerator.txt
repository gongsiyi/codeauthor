1:e710339: /*
1:e710339:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e710339:  * contributor license agreements.  See the NOTICE file distributed with
1:e710339:  * this work for additional information regarding copyright ownership.
1:e710339:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e710339:  * (the "License"); you may not use this file except in compliance with
1:e710339:  * the License.  You may obtain a copy of the License at
1:e710339:  *
1:e710339:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e710339:  *
1:e710339:  * Unless required by applicable law or agreed to in writing, software
1:e710339:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e710339:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e710339:  * See the License for the specific language governing permissions and
1:e710339:  * limitations under the License.
1:e710339:  */
1:e710339: package org.apache.carbondata.core.localdictionary.generator;
1:e710339: 
1:334e647: import java.nio.ByteBuffer;
1:334e647: 
1:e710339: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:e710339: import org.apache.carbondata.core.localdictionary.dictionaryholder.DictionaryStore;
1:e710339: import org.apache.carbondata.core.localdictionary.dictionaryholder.MapBasedDictionaryStore;
1:e710339: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1:e710339: 
1:e710339: /**
1:e710339:  * Class to generate local dictionary for column
1:e710339:  */
1:e710339: public class ColumnLocalDictionaryGenerator implements LocalDictionaryGenerator {
1:e710339: 
1:e710339:   /**
1:e710339:    * dictionary holder to hold dictionary values
1:e710339:    */
1:e710339:   private DictionaryStore dictionaryHolder;
1:3a4b881: 
1:334e647:   public ColumnLocalDictionaryGenerator(int threshold, int lvLength) {
1:e710339:     // adding 1 to threshold for null value
1:e710339:     int newThreshold = threshold + 1;
1:e710339:     this.dictionaryHolder = new MapBasedDictionaryStore(newThreshold);
1:334e647:     ByteBuffer byteBuffer = ByteBuffer.allocate(
1:334e647:         lvLength + CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY.length);
1:e710339: 
1:806e9b5:     if (lvLength == CarbonCommonConstants.SHORT_SIZE_IN_BYTE) {
1:806e9b5:       byteBuffer.putShort((short) CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY.length);
1:806e9b5:     } else {
1:806e9b5:       byteBuffer.putInt(CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY.length);
1:e710339:     }
1:334e647:     byteBuffer.put(CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY);
1:e710339:     // for handling null values
1:e710339:     try {
1:334e647:       dictionaryHolder.putIfAbsent(byteBuffer.array());
1:e710339:     } catch (DictionaryThresholdReachedException e) {
1:e710339:       // do nothing
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to generate dictionary
1:e710339:    * @param data
1:e710339:    * data for which dictionary needs to be generated
1:e710339:    * @return dictionary value
1:e710339:    */
1:e710339:   @Override public int generateDictionary(byte[] data) throws DictionaryThresholdReachedException {
1:3a4b881:     return this.dictionaryHolder.putIfAbsent(data);
1:3a4b881:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to check if threshold is reached
1:e710339:    * for dictionary for particular column
1:e710339:    * @return true if dictionary threshold reached for column
1:e710339:    */
1:e710339:   @Override public boolean isThresholdReached() {
1:e710339:     return this.dictionaryHolder.isThresholdReached();
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to get the dictionary key based on value
1:e710339:    * @param value
1:e710339:    * dictionary value
1:e710339:    * @return dictionary key based on value
1:e710339:    */
1:e710339:   @Override public byte[] getDictionaryKeyBasedOnValue(int value) {
1:e710339:     return this.dictionaryHolder.getDictionaryKeyBasedOnValue(value);
1:e710339:   }
1:e710339: }
============================================================================
author:BJangir
-------------------------------------------------------------------------------
commit:005db3f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:akashrn5
-------------------------------------------------------------------------------
commit:36e14e5
/////////////////////////////////////////////////////////////////////////
0:           "Unable to generate dictionary. Dictionary Size crossed 2GB limit");
author:kumarvishal09
-------------------------------------------------------------------------------
commit:3a4b881
/////////////////////////////////////////////////////////////////////////
0:   private long currentSize;
1: 
/////////////////////////////////////////////////////////////////////////
0:     currentSize += byteBuffer.array().length;
/////////////////////////////////////////////////////////////////////////
0:     currentSize += data.length;
0:     if (currentSize >= Integer.MAX_VALUE) {
0:       throw new DictionaryThresholdReachedException(
0:           "Unable to generate dictionary as Dictionary Size crossed 2GB limit");
1:     }
1:     return this.dictionaryHolder.putIfAbsent(data);
commit:334e647
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public ColumnLocalDictionaryGenerator(int threshold, int lvLength) {
1:     ByteBuffer byteBuffer = ByteBuffer.allocate(
1:         lvLength + CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY.length);
0:     byteBuffer.putShort((short)CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY.length);
1:     byteBuffer.put(CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY);
1:       dictionaryHolder.putIfAbsent(byteBuffer.array());
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.localdictionary.generator;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.localdictionary.dictionaryholder.DictionaryStore;
1: import org.apache.carbondata.core.localdictionary.dictionaryholder.MapBasedDictionaryStore;
1: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1: 
1: /**
1:  * Class to generate local dictionary for column
1:  */
1: public class ColumnLocalDictionaryGenerator implements LocalDictionaryGenerator {
1: 
1:   /**
1:    * dictionary holder to hold dictionary values
1:    */
1:   private DictionaryStore dictionaryHolder;
1: 
0:   public ColumnLocalDictionaryGenerator(int threshold) {
1:     // adding 1 to threshold for null value
1:     int newThreshold = threshold + 1;
1:     this.dictionaryHolder = new MapBasedDictionaryStore(newThreshold);
1:     // for handling null values
1:     try {
0:       dictionaryHolder.putIfAbsent(CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY);
1:     } catch (DictionaryThresholdReachedException e) {
1:       // do nothing
1:     }
1:   }
1: 
1:   /**
1:    * Below method will be used to generate dictionary
1:    * @param data
1:    * data for which dictionary needs to be generated
1:    * @return dictionary value
1:    */
1:   @Override public int generateDictionary(byte[] data) throws DictionaryThresholdReachedException {
0:     int dictionaryValue =  this.dictionaryHolder.putIfAbsent(data);
0:     return dictionaryValue;
1:   }
1: 
1:   /**
1:    * Below method will be used to check if threshold is reached
1:    * for dictionary for particular column
1:    * @return true if dictionary threshold reached for column
1:    */
1:   @Override public boolean isThresholdReached() {
1:     return this.dictionaryHolder.isThresholdReached();
1:   }
1: 
1:   /**
1:    * Below method will be used to get the dictionary key based on value
1:    * @param value
1:    * dictionary value
1:    * @return dictionary key based on value
1:    */
1:   @Override public byte[] getDictionaryKeyBasedOnValue(int value) {
1:     return this.dictionaryHolder.getDictionaryKeyBasedOnValue(value);
1:   }
1: }
author:brijoobopanna
-------------------------------------------------------------------------------
commit:806e9b5
/////////////////////////////////////////////////////////////////////////
0: 
1:     if (lvLength == CarbonCommonConstants.SHORT_SIZE_IN_BYTE) {
1:       byteBuffer.putShort((short) CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY.length);
1:     } else {
1:       byteBuffer.putInt(CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY.length);
0:     }
============================================================================