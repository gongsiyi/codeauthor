1:3a4b881: /*
1:3a4b881:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3a4b881:  * contributor license agreements.  See the NOTICE file distributed with
1:3a4b881:  * this work for additional information regarding copyright ownership.
1:3a4b881:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3a4b881:  * (the "License"); you may not use this file except in compliance with
1:3a4b881:  * the License.  You may obtain a copy of the License at
1:3a4b881:  *
1:3a4b881:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3a4b881:  *
1:3a4b881:  * Unless required by applicable law or agreed to in writing, software
1:3a4b881:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3a4b881:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3a4b881:  * See the License for the specific language governing permissions and
1:3a4b881:  * limitations under the License.
1:3a4b881:  */
1:3a4b881: package org.apache.carbondata.spark.vectorreader;
1:3a4b881: 
1:3a4b881: import org.apache.carbondata.core.scan.result.vector.CarbonDictionary;
1:3a4b881: 
1:3a4b881: import org.apache.parquet.column.Dictionary;
1:3a4b881: import org.apache.parquet.column.Encoding;
1:3a4b881: import org.apache.parquet.io.api.Binary;
1:3a4b881: 
1:3a4b881: public class CarbonDictionaryWrapper extends Dictionary {
1:3a4b881: 
1:3a4b881:   private Binary[] binaries;
1:3a4b881: 
1:347b8e1:   CarbonDictionaryWrapper(Encoding encoding, CarbonDictionary dictionary) {
1:3a4b881:     super(encoding);
1:3a4b881:     binaries = new Binary[dictionary.getDictionarySize()];
1:3a4b881:     for (int i = 0; i < binaries.length; i++) {
1:3a4b881:       binaries[i] = Binary.fromReusedByteArray(dictionary.getDictionaryValue(i));
1:3a4b881:     }
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public int getMaxId() {
1:3a4b881:     return binaries.length - 1;
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public Binary decodeToBinary(int id) {
1:3a4b881:     return binaries[id];
1:3a4b881:   }
1:3a4b881: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:347b8e1
/////////////////////////////////////////////////////////////////////////
1:   CarbonDictionaryWrapper(Encoding encoding, CarbonDictionary dictionary) {
author:kumarvishal09
-------------------------------------------------------------------------------
commit:3a4b881
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.spark.vectorreader;
1: 
1: import org.apache.carbondata.core.scan.result.vector.CarbonDictionary;
1: 
1: import org.apache.parquet.column.Dictionary;
1: import org.apache.parquet.column.Encoding;
1: import org.apache.parquet.io.api.Binary;
1: 
1: public class CarbonDictionaryWrapper extends Dictionary {
1: 
1:   private Binary[] binaries;
1: 
0:   public CarbonDictionaryWrapper(Encoding encoding, CarbonDictionary dictionary) {
1:     super(encoding);
1:     binaries = new Binary[dictionary.getDictionarySize()];
1:     for (int i = 0; i < binaries.length; i++) {
1:       binaries[i] = Binary.fromReusedByteArray(dictionary.getDictionaryValue(i));
1:     }
1:   }
1: 
1:   @Override public int getMaxId() {
1:     return binaries.length - 1;
1:   }
1: 
1:   @Override public Binary decodeToBinary(int id) {
1:     return binaries[id];
1:   }
1: }
============================================================================