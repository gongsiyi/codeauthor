1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.itests;
15:f13c6ac: 
1:c185a5a: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1:f13c6ac: import static org.junit.Assert.assertNotNull;
1:f13c6ac: 
1:f13c6ac: import org.junit.Test;
1:f13c6ac: import org.ops4j.pax.exam.Option;
1:f13c6ac: import org.osgi.framework.Bundle;
1:f13c6ac: 
1:d251156: public class BlueprintContainerTest extends AbstractBlueprintIntegrationTest {
1:f13c6ac: 
1:f13c6ac:     @Test
1:f13c6ac:     public void test() throws Exception {
1:bc2c036:     	applyCommonConfiguration(context());
1:86224ba:         Bundle bundle = context().getBundleByName("org.apache.aries.blueprint.sample");
1:f13c6ac:         assertNotNull(bundle);
1:f13c6ac:         bundle.start();
1:f13c6ac:         
1:50ee219:         // do the test
1:86224ba:         Helper.testBlueprintContainer(context(), bundle);
2:f13c6ac:     }
1:f13c6ac: 
1:d251156:     @org.ops4j.pax.exam.Configuration
1:d251156:     public Option[] configuration() {
1:d251156:         return new Option[] {
1:d251156:             baseOptions(),
1:86224ba:             Helper.blueprintBundles(),
1:c185a5a:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample", false),
1:d251156:         };
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:bc2c036
/////////////////////////////////////////////////////////////////////////
1:     	applyCommonConfiguration(context());
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c185a5a
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
/////////////////////////////////////////////////////////////////////////
1:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample", false),
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.itests;
1: 
0: import java.text.SimpleDateFormat;
0: import java.util.Currency;
0: import java.util.Hashtable;
1: 
0: import org.apache.geronimo.blueprint.sample.Bar;
0: import org.apache.geronimo.blueprint.sample.Foo;
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertSame;
0: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.fail;
0: import static org.junit.Assert.assertNull;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.mavenConfiguration;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.CoreOptions.customFramework;
1: import org.ops4j.pax.exam.Option;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.profile;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.rawPaxRunnerOption;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
0: import org.osgi.service.blueprint.container.BlueprintContainer;
0: import org.osgi.service.cm.Configuration;
0: import org.osgi.service.cm.ConfigurationAdmin;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class BlueprintContainerTest extends AbstractIntegrationTest {
1: 
1:     @Test
1:     public void test() throws Exception {
0:         // Create a config to check the property placeholder
0:         ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
0:         Configuration cf = ca.getConfiguration("blueprint-sample-placeholder", null);
0:         Hashtable props = new Hashtable();
0:         props.put("key.b", "10");
0:         cf.update(props);
1: 
0:         Bundle bundle = getInstalledBundle("org.apache.geronimo.blueprint.sample");
1:         assertNotNull(bundle);
1: 
1:         bundle.start();
1: 
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.geronimo.blueprint.sample", 5000);
0:         assertNotNull(blueprintContainer);
1: 
0:         Object obj = blueprintContainer.getComponentInstance("bar");
0:         assertNotNull(obj);
0:         assertEquals(Bar.class, obj.getClass());
0:         Bar bar = (Bar) obj;
0:         assertNotNull(bar.getContext());
0:         assertEquals("Hello FooBar", bar.getValue());
0:         assertNotNull(bar.getList());
0:         assertEquals(2, bar.getList().size());
0:         assertEquals("a list element", bar.getList().get(0));
0:         assertEquals(Integer.valueOf(5), bar.getList().get(1));
0:         obj = blueprintContainer.getComponentInstance("foo");
0:         assertNotNull(obj);
0:         assertEquals(Foo.class, obj.getClass());
0:         Foo foo = (Foo) obj;
0:         assertEquals(5, foo.getA());
0:         assertEquals(10, foo.getB());
0:         assertSame(bar, foo.getBar());
0:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
0:         assertEquals(new SimpleDateFormat("yyyy.MM.dd").parse("2009.04.17"), foo.getDate());
1: 
0:         assertTrue(foo.isInitialized());
0:         assertFalse(foo.isDestroyed());
1: 
0:         obj = getOsgiService(Foo.class, 5000);
0:         assertNotNull(obj);
0:         assertSame(foo, obj);
1: 
0:         bundle.stop();
1: 
0:         Thread.sleep(1000);
1: 
0:         try {
0:             blueprintContainer = getBlueprintContainerForBundle("org.apache.geronimo.blueprint.sample", 1);
0:             fail("BlueprintContainer should have been unregistered");
0:         } catch (Exception e) {
0:             // Expected, as the module container should have been unregistered
1:         }
1: 
0:         assertTrue(foo.isInitialized());
0:         assertTrue(foo.isDestroyed());
1:     }
1: 
0:     @org.ops4j.pax.exam.junit.Configuration
0:     public static Option[] configuration() {
0:         Option[] options = options(
0:             // Log
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:             // Felix Config Admin
0:             mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:             // Felix mvn url handler
0:             mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
1: 
0:             // this is how you set the default log level when using pax logging (logProfile)
0:             systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
0:             // Bundles
0:             mavenBundle("org.apache.geronimo.blueprint", "geronimo-blueprint"),
0:             mavenBundle("org.apache.geronimo.blueprint", "org.apache.geronimo.blueprint.sample").noStart(),
1: 
0: //            org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
1: 
0:             equinox().version("3.5.0")
0:         );
0:         return options;
1:     }
1: 
1: }
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: public class BlueprintContainerTest extends AbstractBlueprintIntegrationTest {
0:         Hashtable<String, String> props = new Hashtable<String, String>();
/////////////////////////////////////////////////////////////////////////
1:     @org.ops4j.pax.exam.Configuration
1:     public Option[] configuration() {
1:         return new Option[] {
1:             baseOptions(),
1:         };
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.itest.AbstractIntegrationTest;
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
0: 
0:         ConfigurationAdmin ca = context().getService(ConfigurationAdmin.class);
1:         Bundle bundle = context().getBundleByName("org.apache.aries.blueprint.sample");
1:         Helper.testBlueprintContainer(context(), bundle);
/////////////////////////////////////////////////////////////////////////
0:           assertNotNull(Helper.getBlueprintContainerForBundle(context(), b.getSymbolicName()));
/////////////////////////////////////////////////////////////////////////
0:       Bundle bundle = context().getBundleByName("org.apache.aries.blueprint.sample");
0:       Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
0:         return testOptions(
0:             paxLogging("INFO"),
1:             Helper.blueprintBundles(),
0:                 
commit:de6f8ca
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("We lost: "+lossage, lossage < 20000000);
commit:bdb820b
/////////////////////////////////////////////////////////////////////////
0:     @Test
commit:7257be0
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
0:     //@Test
/////////////////////////////////////////////////////////////////////////
0:     
0:     @Test
0:     public void testScheduledExecMemoryLeak() throws Exception {
0:         Fixture jar = ArchiveFixture.newJar()
0:             .manifest().symbolicName("test.bundle").end()
0:             .file("OSGI-INF/blueprint/blueprint.xml")
0:                 .line("<blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">")
0:                 .line("<reference interface=\"java.util.List\" />")
0:                 .line("</blueprint>").end().end();
0:         
0:         ByteArrayOutputStream bout = new ByteArrayOutputStream();
0:         jar.writeOut(bout);
0:         
0:         Bundle b = bundleContext.installBundle("test.bundle", new ByteArrayInputStream(bout.toByteArray()));
0:         
0:         for (int i=0; i<16; i++) System.gc();
0:         long startFreeMemory = Runtime.getRuntime().freeMemory();
0:         
0:         // 3000 iterations on a Mac 1.6 JVM leaks 30+ mb, 2000 leaks a bit more than 20, 
0:         // 10000 iterations would be close to OutOfMemory however by that stage the test runs very slowly
0:         for (int i=0; i<3000; i++) {
0:             b.start();
0:             // give the container some time to operate, otherwise it probably won't even get to create a future
0:             Thread.sleep(10);
0:             b.stop();
0:         }
0:         
0:         for (int i=0; i<16; i++) System.gc();
0:         long endFreeMemory = Runtime.getRuntime().freeMemory();
0:         
0:         long lossage = startFreeMemory - endFreeMemory;
0:         assertTrue("We lost: "+lossage, lossage < 10000000);
0:     }
/////////////////////////////////////////////////////////////////////////
0:             systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
commit:88dccd4
/////////////////////////////////////////////////////////////////////////
commit:88a0e3f
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
0: import java.io.InputStream;
0: import java.util.ArrayList;
0: import java.util.List;
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.Fixture;
/////////////////////////////////////////////////////////////////////////
0:     public void testReferenceListenerDeadlock() throws Exception {
0:         List<Bundle> bundles = new ArrayList<Bundle>();
0:         int total = 10;
0:         for (int i=0; i<total; i++) {
0:             bundles.add(bundleContext.installBundle("sample"+i, getTestBundle(i, total)));
0:         }
0:         
0:         for (Bundle b : bundles) b.start();
0:         
0:         // every blueprint container should be up
0:         for (Bundle b : bundles) {
0:           assertNotNull(getBlueprintContainerForBundle(b.getSymbolicName()));
0:         }
0:     }
0:     
0:     private InputStream getTestBundle(int no, int total) throws Exception {
0:         StringBuilder blueprint = new StringBuilder();
0:         blueprint.append("<blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">");
0:         blueprint.append("<bean id=\"listener\" class=\"org.apache.aries.blueprint.itests.comp.Listener\" />");
0:         
0:         for (int i=0; i<total; i++) {
0:             if (i==no) {
0:                 blueprint.append("<service interface=\"java.util.List\">");
0:                 blueprint.append("<service-properties><entry key=\"no\" value=\""+i+"\" /></service-properties>");
0:                 blueprint.append("<bean class=\"org.apache.aries.blueprint.itests.comp.ListFactory\" factory-method=\"create\">");
0:                 blueprint.append("<argument value=\""+i+"\" />");
0:                 blueprint.append("</bean>");
0:                 blueprint.append("</service>");
0:             } else {
0:                 blueprint.append("<reference availability=\"optional\" id=\"ref"+i+"\" interface=\"java.util.List\" filter=\"(no="+i+")\">");
0:                 blueprint.append("<reference-listener ref=\"listener\" bind-method=\"bind\" unbind-method=\"unbind\" />");
0:                 blueprint.append("</reference>");
0:             }
0:         }
0:         blueprint.append("</blueprint>");
0:         
0:         Fixture jar = ArchiveFixture.newJar()
0:             .manifest().symbolicName("sample"+no)
0:                 .attribute("Import-Package", "org.osgi.framework")
0:             .end()
0:             .binary("org/apache/aries/blueprint/itests/comp/Component.class", 
0:                     getClass().getClassLoader().getResourceAsStream(
0:                             "org/apache/aries/blueprint/itests/comp/Component.class"))
0:             .binary("org/apache/aries/blueprint/itests/comp/Listener.class",
0:                     getClass().getClassLoader().getResourceAsStream(
0:                             "org/apache/aries/blueprint/itests/comp/Listener.class"))
0:             .binary("org/apache/aries/blueprint/itests/comp/ListFactory.class",
0:                     getClass().getClassLoader().getResourceAsStream(
0:                             "org/apache/aries/blueprint/itests/comp/ListFactory.class"))
0:                             
0:             .file("OSGI-INF/blueprint/blueprint.xml", blueprint.toString())
0:             .end();
0:         
0:         ByteArrayOutputStream bout = new ByteArrayOutputStream();
0:         jar.writeOut(bout);
0:         
0:         return new ByteArrayInputStream(bout.toByteArray());
0:     }
0:     
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
commit:3ed12df
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
0:     
0:     @Test
0:     public void testDeadlock() throws Exception {
0:       bundleContext.registerService("java.util.Set",new HashSet<Object>(), null);
0:       
0:       Bundle bundle = getInstalledBundle("org.apache.aries.blueprint.sample");
0:       assertNotNull(bundle);
0: 
0:       bundle.start();
0:       
0:       getBlueprintContainerForBundle(bundleContext, "org.apache.aries.blueprint.sample",5000);
0:       
0:       // no actual assertions, we just don't want to deadlock
0:     }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:             mavenBundle("asm", "asm-all"),
commit:cdc5675
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.osgi", "org.osgi.compendium"),
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:79902ae
/////////////////////////////////////////////////////////////////////////
0:       getBlueprintContainerForBundle(bundleContext, "org.apache.aries.blueprint.sample",DEFAULT_TIMEOUT);
author:Lin Sun
-------------------------------------------------------------------------------
commit:9a14bff
/////////////////////////////////////////////////////////////////////////
0:             //org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
commit:9fa6706
/////////////////////////////////////////////////////////////////////////
0:             // org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
commit:50ee219
/////////////////////////////////////////////////////////////////////////
0:         
1:         // do the test
0:         testBlueprintContainer(bundle);
commit:2b87d24
/////////////////////////////////////////////////////////////////////////
0: 
0: import java.text.SimpleDateFormat;
0: import java.util.Currency;
0: import java.util.Hashtable;
0: 
0: import org.apache.aries.blueprint.sample.Bar;
0: import org.apache.aries.blueprint.sample.Foo;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries", "org.apache.aries.util"),
commit:f263a8e
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:440effc
/////////////////////////////////////////////////////////////////////////
0:         options = updateOptions(options);
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.itests;
0: import org.apache.aries.blueprint.sample.Bar;
0: import org.apache.aries.blueprint.sample.Foo;
commit:118f5f9
/////////////////////////////////////////////////////////////////////////
0:         Bundle bundle = getInstalledBundle("org.apache.aries.blueprint.sample");
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample", 5000);
/////////////////////////////////////////////////////////////////////////
0:             blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample", 1);
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.blueprint", "aries-blueprint"),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart(),
============================================================================