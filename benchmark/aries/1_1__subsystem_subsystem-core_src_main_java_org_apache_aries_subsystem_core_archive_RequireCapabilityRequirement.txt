1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:c1afebc: package org.apache.aries.subsystem.core.archive;
2:c1afebc: 
1:c1afebc: import java.util.Collections;
1:c1afebc: import java.util.HashMap;
1:c1afebc: import java.util.Map;
1:c1afebc: 
1:67ef08f: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
1:c1afebc: import org.osgi.resource.Namespace;
1:c1afebc: import org.osgi.resource.Resource;
1:c1afebc: 
1:c1afebc: public class RequireCapabilityRequirement extends AbstractRequirement {
1:c1afebc: 	public static final String DIRECTIVE_FILTER = Namespace.REQUIREMENT_FILTER_DIRECTIVE;
1:c1afebc: 	
1:d93afd1: 	private final Map<String, Object> attributes;
1:b365b0a: 	private final Map<String, String> directives;
1:c1afebc: 	private final String namespace;
1:c1afebc: 	private final Resource resource;
1:c1afebc: 	
1:c1afebc: 	public RequireCapabilityRequirement(RequireCapabilityHeader.Clause clause, Resource resource) {
1:c1afebc: 		namespace = clause.getNamespace();
1:d93afd1: 		attributes = new HashMap<String, Object>(clause.getAttributes().size());
1:d93afd1: 		for (Attribute attribute : clause.getAttributes()) {
1:d93afd1: 			attributes.put(attribute.getName(), attribute.getValue());
1:d93afd1: 		}
1:b365b0a: 		directives = new HashMap<String, String>(clause.getDirectives().size());
1:d93afd1: 		for (Directive directive : clause.getDirectives()) {
1:b365b0a: 			directives.put(directive.getName(), directive.getValue());
1:d93afd1: 		}
1:c1afebc: 		this.resource = resource;
2:c1afebc: 	}
1:c1afebc: 
1:c1afebc: 	@Override
1:c1afebc: 	public Map<String, Object> getAttributes() {
1:d93afd1: 		return Collections.unmodifiableMap(attributes);
1:c1afebc: 	}
1:c1afebc: 
1:c1afebc: 	@Override
1:c1afebc: 	public Map<String, String> getDirectives() {
1:c1afebc: 		return Collections.unmodifiableMap(directives);
1:c1afebc: 	}
1:c1afebc: 
1:c1afebc: 	@Override
1:c1afebc: 	public String getNamespace() {
1:c1afebc: 		return namespace;
1:c1afebc: 	}
1:c1afebc: 
1:c1afebc: 	@Override
1:c1afebc: 	public Resource getResource() {
1:c1afebc: 		return resource;
1:c1afebc: 	}
1:c1afebc: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:d93afd1
/////////////////////////////////////////////////////////////////////////
1: 	private final Map<String, Object> attributes;
1: 		attributes = new HashMap<String, Object>(clause.getAttributes().size());
1: 		for (Attribute attribute : clause.getAttributes()) {
1: 			attributes.put(attribute.getName(), attribute.getValue());
1: 		}
1: 		for (Directive directive : clause.getDirectives()) {
1: 		}
1: 		return Collections.unmodifiableMap(attributes);
commit:b365b0a
/////////////////////////////////////////////////////////////////////////
1: 	private final Map<String, String> directives;
1: 		directives = new HashMap<String, String>(clause.getDirectives().size());
0: 		for (Directive directive : clause.getDirectives())
1: 			directives.put(directive.getName(), directive.getValue());
commit:392ea23
/////////////////////////////////////////////////////////////////////////
0: 		if (filter != null)
0: 			directives.put(DIRECTIVE_FILTER, filter.getValue());
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:9789b9b
/////////////////////////////////////////////////////////////////////////
0: 		// It is legal for requirements to have no filter directive, in which 
0: 		// case the requirement would match any capability from the same 
0: 		// namespace.
0: 		if (filter == null)
0: 			filter = new FilterDirective('(' + namespace + "=*)");
0: 		directives.put(DIRECTIVE_FILTER, filter.getValue());
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
commit:35094c6
/////////////////////////////////////////////////////////////////////////
commit:c1afebc
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.apache.aries.subsystem.core.resource.AbstractRequirement;
1: import org.osgi.resource.Namespace;
1: import org.osgi.resource.Resource;
1: 
1: public class RequireCapabilityRequirement extends AbstractRequirement {
1: 	public static final String DIRECTIVE_FILTER = Namespace.REQUIREMENT_FILTER_DIRECTIVE;
1: 	
0: 	private final Map<String, String> directives = new HashMap<String, String>(1);
1: 	private final String namespace;
1: 	private final Resource resource;
1: 	
0: 	public RequireCapabilityRequirement(RequireCapabilityHeader.Clause clause) {
0: 		this(clause, null);
1: 	}
1: 	
1: 	public RequireCapabilityRequirement(RequireCapabilityHeader.Clause clause, Resource resource) {
1: 		namespace = clause.getNamespace();
0: 		Directive filter = clause.getDirective(RequireCapabilityHeader.Clause.DIRECTIVE_FILTER);
0: 		if (filter != null)
0: 			directives.put(DIRECTIVE_FILTER, filter.getValue());
1: 		this.resource = resource;
1: 	}
1: 
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
0: 		return Collections.emptyMap();
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.unmodifiableMap(directives);
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
1: 		return namespace;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================