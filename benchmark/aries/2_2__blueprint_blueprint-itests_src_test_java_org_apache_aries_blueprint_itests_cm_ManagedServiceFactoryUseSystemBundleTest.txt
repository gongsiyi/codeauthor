1:ecf9333: /**
1:ecf9333:  * Licensed to the Apache Software Foundation (ASF) under one
1:ecf9333:  * or more contributor license agreements.  See the NOTICE file
1:ecf9333:  * distributed with this work for additional information
1:ecf9333:  * regarding copyright ownership.  The ASF licenses this file
1:ecf9333:  * to you under the Apache License, Version 2.0 (the
1:ecf9333:  * "License"); you may not use this file except in compliance
1:ecf9333:  * with the License.  You may obtain a copy of the License at
1:ecf9333:  *
1:ecf9333:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ecf9333:  *
1:ecf9333:  * Unless required by applicable law or agreed to in writing,
1:ecf9333:  * software distributed under the License is distributed on an
1:ecf9333:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ecf9333:  * KIND, either express or implied.  See the License for the
1:ecf9333:  * specific language governing permissions and limitations
1:ecf9333:  * under the License.
1:ecf9333:  */
1:ecf9333: package org.apache.aries.blueprint.itests.cm;
53:ecf9333: 
1:48189a5: import static org.ops4j.pax.exam.CoreOptions.keepCaches;
1:48189a5: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1:48189a5: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:ecf9333: 
1:ecf9333: import java.util.Collection;
1:ecf9333: import java.util.Collections;
1:ecf9333: import java.util.Iterator;
1:ecf9333: import java.util.Map;
1:ecf9333: 
1:ecf9333: import org.apache.aries.blueprint.itests.Helper;
1:ecf9333: import org.junit.After;
1:ecf9333: import org.junit.Before;
1:ecf9333: import org.ops4j.pax.exam.Option;
1:ecf9333: import org.osgi.framework.BundleContext;
1:ecf9333: import org.osgi.framework.BundleException;
1:ecf9333: import org.osgi.framework.Constants;
1:ecf9333: import org.osgi.framework.ServiceEvent;
1:ecf9333: import org.osgi.framework.ServiceReference;
1:ecf9333: import org.osgi.framework.ServiceRegistration;
1:ecf9333: import org.osgi.framework.hooks.service.EventListenerHook;
1:ecf9333: import org.osgi.framework.hooks.service.FindHook;
1:ecf9333: 
1:48189a5: /**
1:48189a5:  * Shows that the cm bundle can process config even if the events are hidden from it
1:48189a5:  * when the property to use the system bundle context is set
1:48189a5:  */
1:b2c4d0c: @SuppressWarnings({"unchecked", "rawtypes"})
1:48189a5: public class ManagedServiceFactoryUseSystemBundleTest extends ManagedServiceFactoryTest {
1:2e39b46:     private static final String CM_BUNDLE = "org.apache.aries.blueprint.cm";
1:2e39b46: 
1:ecf9333:     @org.ops4j.pax.exam.Configuration
1:ecf9333:     public Option[] config() {
1:2e39b46:         return new Option[] {
1:2e39b46:             baseOptions(),
1:48189a5:             systemProperty("org.apache.aries.blueprint.use.system.context").value("true"),
1:48189a5:             Helper.blueprintBundles(), //
1:48189a5:             keepCaches(), //
1:48189a5:             streamBundle(testBundle())
1:2e39b46:         };
1:2e39b46:     }
1:2e39b46: 
1:b2c4d0c:     ServiceRegistration eventHook;
1:b2c4d0c:     ServiceRegistration findHook;
1:2e39b46: 
1:2e39b46:     @Before
1:2e39b46:     public void regiserHook() throws BundleException {
1:2e39b46:         context().getBundleByName(CM_BUNDLE).stop();
1:2e39b46:         final BundleContext systemContext = context().getBundle(Constants.SYSTEM_BUNDLE_LOCATION)
1:2e39b46:             .getBundleContext();
1:2e39b46:         eventHook = context().registerService(EventListenerHook.class, new EventListenerHook() {
1:2e39b46:             public void event(ServiceEvent event, Map contexts) {
1:2e39b46:                 if (CM_BUNDLE.equals(event.getServiceReference().getBundle().getSymbolicName())) {
1:2e39b46:                     // hide from everything but the system bundle
1:2e39b46:                     // TODO on R6 we should be able to even try hiding from the system bundle
1:2e39b46:                     // R5 it was not clear if hooks could hide from the system bundle
1:2e39b46:                     // equinox R5 does allow hiding from system bundle
1:2e39b46:                     contexts.keySet().retainAll(Collections.singleton(systemContext));
1:2e39b46:                 }
1:2e39b46:             }
1:ecf9333: 
1:2e39b46:         }, null);
1:2e39b46:         findHook = context().registerService(FindHook.class, new FindHook() {
1:2e39b46:             public void find(BundleContext context, String arg1, String arg2, boolean arg3,
1:2e39b46:                              Collection references) {
1:2e39b46:                 // hide from everything but the system bundle
1:2e39b46:                 // TODO on R6 we should be able to even try hiding from the system bundle
1:2e39b46:                 // R5 it was not clear if hooks could hide from the system bundle
1:2e39b46:                 // equinox R5 does allow hiding from system bundle
1:2e39b46:                 if (!context.equals(systemContext)) {
1:2e39b46:                     for (Iterator<ServiceReference> iReferences = references.iterator(); iReferences
1:2e39b46:                         .hasNext();) {
1:2e39b46:                         if (CM_BUNDLE.equals(iReferences.next().getBundle().getSymbolicName())) {
1:2e39b46:                             iReferences.remove();
1:2e39b46:                         }
1:2e39b46:                     }
1:2e39b46:                 }
1:2e39b46:             }
1:2e39b46: 
1:2e39b46:         }, null);
1:2e39b46:         context().getBundleByName(CM_BUNDLE).start();
1:2e39b46:     }
1:2e39b46: 
1:2e39b46:     @After
1:2e39b46:     public void unregisterHook() {
1:2e39b46:         eventHook.unregister();
1:2e39b46:         findHook.unregister();
1:2e39b46:     }
1:2e39b46: 
5:2e39b46: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:b2c4d0c
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings({"unchecked", "rawtypes"})
/////////////////////////////////////////////////////////////////////////
1:     ServiceRegistration eventHook;
1:     ServiceRegistration findHook;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:48189a5
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.keepCaches;
1: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: /**
1:  * Shows that the cm bundle can process config even if the events are hidden from it
1:  * when the property to use the system bundle context is set
1:  */
1: public class ManagedServiceFactoryUseSystemBundleTest extends ManagedServiceFactoryTest {
1:             systemProperty("org.apache.aries.blueprint.use.system.context").value("true"),
1:             Helper.blueprintBundles(), //
1:             keepCaches(), //
1:             streamBundle(testBundle())
0:     ServiceRegistration<?> eventHook;
0:     ServiceRegistration<?> findHook;
/////////////////////////////////////////////////////////////////////////
0:             @SuppressWarnings({
0:                 "unchecked", "rawtypes"
0:             })
/////////////////////////////////////////////////////////////////////////
0:             @SuppressWarnings({
0:                 "rawtypes", "unchecked"
0:             })
/////////////////////////////////////////////////////////////////////////
commit:2e39b46
/////////////////////////////////////////////////////////////////////////
0: @SuppressWarnings({
0:     "rawtypes", "unchecked"
0: })
1:     private static final String CM_BUNDLE = "org.apache.aries.blueprint.cm";
0:     private static final String TEST_BUNDLE = "org.apache.aries.blueprint.cm.test.b1";
0:     @Inject
0:     ConfigurationAdmin ca;
1: 
0:     @ProbeBuilder
0:     public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
0:         probe.setHeader(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName());
0:         probe.setHeader(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName());
0:         return probe;
1:     }
0:         InputStream testBundle = TinyBundles.bundle().add(FooInterface.class).add(Foo.class)
0:             .add(FooFactory.class)
0:             .add("OSGI-INF/blueprint/context.xml", getResource("ManagedServiceFactoryTest.xml"))
0:             .set(Constants.BUNDLE_SYMBOLICNAME, TEST_BUNDLE)
0:             .set(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName())
0:             .set(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName()).build(TinyBundles.withBnd());
1:         return new Option[] {
1:             baseOptions(),
0:             CoreOptions.systemProperty("org.apache.aries.blueprint.use.system.context").value("true"),
0:             Helper.blueprintBundles(), CoreOptions.keepCaches(), CoreOptions.streamBundle(testBundle)
1:         };
0:     ServiceRegistration eventHook;
0:     ServiceRegistration findHook;
1:     @Before
1:     public void regiserHook() throws BundleException {
1:         context().getBundleByName(CM_BUNDLE).stop();
1:         final BundleContext systemContext = context().getBundle(Constants.SYSTEM_BUNDLE_LOCATION)
1:             .getBundleContext();
1:         eventHook = context().registerService(EventListenerHook.class, new EventListenerHook() {
0:             @Override
1:             public void event(ServiceEvent event, Map contexts) {
1:                 if (CM_BUNDLE.equals(event.getServiceReference().getBundle().getSymbolicName())) {
1:                     // hide from everything but the system bundle
1:                     // TODO on R6 we should be able to even try hiding from the system bundle
1:                     // R5 it was not clear if hooks could hide from the system bundle
1:                     // equinox R5 does allow hiding from system bundle
1:                     contexts.keySet().retainAll(Collections.singleton(systemContext));
1:                 }
1:             }
1:         }, null);
1:         findHook = context().registerService(FindHook.class, new FindHook() {
0:             @Override
1:             public void find(BundleContext context, String arg1, String arg2, boolean arg3,
1:                              Collection references) {
1:                 // hide from everything but the system bundle
1:                 // TODO on R6 we should be able to even try hiding from the system bundle
1:                 // R5 it was not clear if hooks could hide from the system bundle
1:                 // equinox R5 does allow hiding from system bundle
1:                 if (!context.equals(systemContext)) {
1:                     for (Iterator<ServiceReference> iReferences = references.iterator(); iReferences
1:                         .hasNext();) {
1:                         if (CM_BUNDLE.equals(iReferences.next().getBundle().getSymbolicName())) {
1:                             iReferences.remove();
1:                         }
1:                     }
1:                 }
1:             }
1: 
1:         }, null);
1:         context().getBundleByName(CM_BUNDLE).start();
1:     }
1: 
1:     @After
1:     public void unregisterHook() {
1:         eventHook.unregister();
1:         findHook.unregister();
1:     }
0:         Hashtable<String, String> props = new Hashtable<String, String>();
1: 
0:         ServiceReference sr = getServiceRef(Foo.class, "(key=foo1)");
/////////////////////////////////////////////////////////////////////////
0:         props = new Hashtable<String, String>();
/////////////////////////////////////////////////////////////////////////
0:         Hashtable<String, String> props = new Hashtable<String, String>();
0:         ServiceReference sr = getServiceRef(Foo.class, "(key=foo2)");
0:         Foo foo = (Foo)context().getService(sr);
0:         props = new Hashtable<String, String>();
/////////////////////////////////////////////////////////////////////////
0:         Hashtable<String, String> props = new Hashtable<String, String>();
0:         ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo3)(a=5))");
0:         Foo foo = (Foo)context().getService(sr);
0:         props = new Hashtable<String, String>();
/////////////////////////////////////////////////////////////////////////
0:     @Test
0:         Hashtable<String, String> props = new Hashtable<String, String>();
0:         Hashtable<String, String> props2 = new Hashtable<String, String>();
0:         Foo foo = (Foo)context().getService(sr);
0:         Foo foo2 = (Foo)context().getService(sr2);
0:         props = new Hashtable<String, String>();
0:         props2 = new Hashtable<String, String>();
/////////////////////////////////////////////////////////////////////////
0:     @Test
0:     public void testCreateAndUpdateUsingUpdateMethod() throws Exception {
0:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory4", null);
0:         Hashtable<String, String> props = new Hashtable<String, String>();
0:         props.put("a", "5");
0:         cf.update(props);
0:         Configuration cf2 = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory4", null);
0:         Hashtable<String, String> props2 = new Hashtable<String, String>();
0:         props2.put("a", "7");
0:         cf2.update(props2);
0:         ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo4)(a=5))");
0:         ServiceReference sr2 = getServiceRef(Foo.class, "(&(key=foo4)(a=7))");
0:         Foo foo = (Foo)context().getService(sr);
0:         assertNotNull(foo);
0:         assertEquals(5, foo.getA());
0:         assertEquals("default", foo.getB());
0:         assertEquals("5", sr.getProperty("a"));
0:         assertNull(sr.getProperty("b"));
0:         Foo foo2 = (Foo)context().getService(sr2);
0:         assertNotNull(foo2);
0:         assertEquals(7, foo2.getA());
0:         assertEquals("default", foo2.getB());
0:         assertEquals("7", sr2.getProperty("a"));
0:         assertNull(sr2.getProperty("b"));
0:         props = new Hashtable<String, String>();
0:         props.put("a", "5");
0:         props.put("b", "foo");
0:         cf.update(props);
0:         props2 = new Hashtable<String, String>();
0:         props2.put("a", "7");
0:         props2.put("b", "foo2");
0:         cf2.update(props2);
0:         // Update after creation
0:         Thread.sleep(500);
0:         assertEquals(5, foo.getA());
0:         assertEquals("foo", foo.getB());
0:         // Update of service properties
0:         assertEquals("5", sr.getProperty("a"));
0:         assertEquals("foo", sr.getProperty("b"));
0:         // 2a Update after creation
0:         assertEquals(7, foo2.getA());
0:         assertEquals("foo2", foo2.getB());
0:         // 2b Update of service properties
0:         assertEquals("7", sr2.getProperty("a"));
0:         assertEquals("foo2", sr2.getProperty("b"));
1:     }
0:     @Test
0:     public void testFactoryCreation() throws Exception {
0:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory5", null);
0:         Hashtable<String, String> props = new Hashtable<String, String>();
0:         props.put("a", "5");
0:         cf.update(props);
0:         ServiceReference sr = getServiceRef(Foo.class, "(key=foo5)");
0:         Foo foo = (Foo)context().getService(sr);
0:         assertNotNull(foo);
0:         assertEquals(5, foo.getA());
0:         assertEquals("default", foo.getB());
0:         assertEquals("5", sr.getProperty("a"));
0:         assertNull(sr.getProperty("b"));
0:         props = new Hashtable<String, String>();
0:         props.put("a", "5");
0:         props.put("b", "foo");
0:         cf.update(props);
0:         Thread.sleep(500);
0:         // No update of bean after creation
0:         assertEquals(5, foo.getA());
0:         assertEquals("default", foo.getB());
1: 
0:         // Only initial update of service properties
0:         assertEquals("5", sr.getProperty("a"));
0:         assertNull(sr.getProperty("b"));
1:     }
1: 
0:     private ServiceReference getServiceRef(Class serviceInterface, String filter)
0:         throws InvalidSyntaxException {
0:         int tries = 0;
0:         do {
0:             ServiceReference[] srAr = bundleContext.getServiceReferences(serviceInterface.getName(), filter);
0:             if (srAr != null && srAr.length > 0) {
0:                 return (ServiceReference)srAr[0];
1:             }
0:             tries++;
0:             try {
0:                 Thread.sleep(100);
0:             } catch (InterruptedException e) {
0:                 // Ignore
1:             }
0:         } while (tries < 100);
0:         throw new RuntimeException("Could not find service " + serviceInterface.getName() + ", " + filter);
1:     }
commit:64a3809
/////////////////////////////////////////////////////////////////////////
0: @SuppressWarnings({"rawtypes", "unchecked"})
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   @Test
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Tom Watson
-------------------------------------------------------------------------------
commit:ecf9333
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests.cm;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertNull;
1: 
0: import java.io.InputStream;
1: import java.util.Collection;
1: import java.util.Collections;
0: import java.util.Hashtable;
1: import java.util.Iterator;
1: import java.util.Map;
1: 
0: import javax.inject.Inject;
1: 
0: import org.apache.aries.blueprint.itests.AbstractBlueprintIntegrationTest;
1: import org.apache.aries.blueprint.itests.Helper;
0: import org.apache.aries.blueprint.itests.cm.service.Foo;
0: import org.apache.aries.blueprint.itests.cm.service.FooFactory;
0: import org.apache.aries.blueprint.itests.cm.service.FooInterface;
1: import org.junit.After;
1: import org.junit.Before;
0: import org.junit.Test;
0: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.ProbeBuilder;
0: import org.ops4j.pax.exam.TestProbeBuilder;
0: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.Constants;
0: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceEvent;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.framework.hooks.service.EventListenerHook;
1: import org.osgi.framework.hooks.service.FindHook;
0: import org.osgi.service.cm.Configuration;
0: import org.osgi.service.cm.ConfigurationAdmin;
1: 
0: public class ManagedServiceFactoryUseSystemBundleTest extends AbstractBlueprintIntegrationTest {
0: 	private static final String CM_BUNDLE = "org.apache.aries.blueprint.cm";
0: 	private static final String TEST_BUNDLE = "org.apache.aries.blueprint.cm.test.b1";
0: 	@Inject
0: 	ConfigurationAdmin ca;
1: 	
0: 	@ProbeBuilder
0: 	public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
0: 		probe.setHeader(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName());
0:     	probe.setHeader(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName());
0: 		return probe;
0: 	}
1: 
1:     @org.ops4j.pax.exam.Configuration
1:     public Option[] config() {
0:     	InputStream testBundle = TinyBundles.bundle()
0:     		.add(FooInterface.class)
0:     		.add(Foo.class)
0:     		.add(FooFactory.class)
0:     		.add("OSGI-INF/blueprint/context.xml", 
0:     				getResource("ManagedServiceFactoryTest.xml"))
0:     		.set(Constants.BUNDLE_SYMBOLICNAME, TEST_BUNDLE)
0:     		.set(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName())
0:     		.set(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName())
0:     		.build(TinyBundles.withBnd());
0:     	return new Option[] {
0:     			baseOptions(),
0:                 CoreOptions.systemProperty("org.apache.aries.blueprint.use.system.context").value("true"),
0:     			Helper.blueprintBundles(),
0:     			CoreOptions.keepCaches(),
0:     			CoreOptions.streamBundle(testBundle)
0:     	};
0:     }
1: 
0: 	ServiceRegistration eventHook;
0: 	ServiceRegistration findHook;
0: 	@Before
0: 	public void regiserHook() throws BundleException {
0: 		context().getBundleByName(CM_BUNDLE).stop();
0: 		final BundleContext systemContext = context().getBundle(Constants.SYSTEM_BUNDLE_LOCATION).getBundleContext();
0: 		eventHook = context().registerService(EventListenerHook.class, new EventListenerHook() {
1: 
0: 			@Override
0: 			public void event(ServiceEvent event,
0: 					Map contexts) {
0: 				if (CM_BUNDLE.equals(event.getServiceReference().getBundle().getSymbolicName())) {
0: 					// hide from everything but the system bundle
0: 					// TODO on R6 we should be able to even try hiding from the system bundle
0: 					// R5 it was not clear if hooks could hide from the system bundle
0: 					// equinox R5 does allow hiding from system bundle
0: 					contexts.keySet().retainAll(Collections.singleton(systemContext));
0: 				}
0: 			}
1: 
0: 		}, null);
0: 		findHook = context().registerService(FindHook.class, new FindHook(){
0: 			@Override
0: 			public void find(BundleContext context, String arg1, String arg2,
0: 					boolean arg3, Collection references) {
0: 				// hide from everything but the system bundle
0: 				// TODO on R6 we should be able to even try hiding from the system bundle
0: 				// R5 it was not clear if hooks could hide from the system bundle
0: 				// equinox R5 does allow hiding from system bundle
0: 				if (!context.equals(systemContext)) {
0: 					for (Iterator<ServiceReference> iReferences = references.iterator(); iReferences.hasNext();) {
0: 						if (CM_BUNDLE.equals(iReferences.next().getBundle().getSymbolicName())) {
0: 							iReferences.remove();
0: 						}
0: 					}
0: 				}
0: 			}
1: 			
0: 		}, null);
0: 		context().getBundleByName(CM_BUNDLE).start();
0: 	}
1: 
0: 	@After
0: 	public void unregisterHook() {
0: 		eventHook.unregister();
0: 		findHook.unregister();
0: 	}
1: 
0:     @Test
0:     public void test1() throws Exception {
0:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory", null);
0:         Hashtable<String,String> props = new Hashtable<String,String>();
0:         props.put("a", "5");
0:         cf.update(props);
1:         
0: 		@SuppressWarnings("rawtypes")
0: 		ServiceReference sr = getServiceRef(Foo.class, "(key=foo1)");
0:         Foo foo = (Foo)context().getService(sr);
0:         assertNotNull(foo);
0:         assertEquals(5, foo.getA());
0:         assertEquals("default", foo.getB());
0:         assertEquals("5", sr.getProperty("a"));
0:         assertNull(sr.getProperty("b"));
1: 
0:         props = new Hashtable<String,String>();
0:         props.put("a", "5");
0:         props.put("b", "foo");
0:         cf.update(props);
0:         Thread.sleep(500);
1: 
0:         // No update of bean after creation
0:         assertEquals(5, foo.getA());
0:         assertEquals("default", foo.getB());
1: 
0:         // Only initial update of service properties
0:         assertEquals("5", sr.getProperty("a"));
0:         assertNull(sr.getProperty("b"));
0:     }
1: 
0:     @Test
0:     public void test2() throws Exception {
0:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory2", null);
0:         Hashtable<String,String> props = new Hashtable<String,String>();
0:         props.put("a", "5");
0:         cf.update(props);
1: 
0:         @SuppressWarnings("rawtypes")
0: 		ServiceReference sr = getServiceRef(Foo.class, "(key=foo2)");
0: 		Foo foo = (Foo)context().getService(sr);
0:         assertNotNull(foo);
0:         assertEquals(5, foo.getA());
0:         assertEquals("default", foo.getB());
0:         assertNull(sr.getProperty("a"));
0:         assertNull(sr.getProperty("b"));
1: 
0:         props = new Hashtable<String,String>();
0:         props.put("a", "5");
0:         props.put("b", "foo");
0:         cf.update(props);
1: 
0:         // Update after creation
0:         Thread.sleep(500);
0:         assertEquals(5, foo.getA());
0:         assertEquals("foo", foo.getB());
1: 
0:         // No update of service properties
0:         assertNull(sr.getProperty("a"));
0:         assertNull(sr.getProperty("b"));
0:     }
1: 
1: 
1: 
0:     @Test
0:     public void test3() throws Exception {
0:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory3", null);
0:         Hashtable<String,String> props = new Hashtable<String,String>();
0:         props.put("a", "5");
0:         cf.update(props);
1: 
0:         @SuppressWarnings("rawtypes")
0: 		ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo3)(a=5))");
0:         assertNotNull(sr);
0:         Foo foo = (Foo) context().getService(sr);
0:         assertNotNull(foo);
0:         assertEquals(5, foo.getA());
0:         assertEquals("default", foo.getB());
0:         assertEquals("5", sr.getProperty("a"));
0:         assertNull(sr.getProperty("b"));
1: 
0:         props = new Hashtable<String,String>();
0:         props.put("a", "5");
0:         props.put("b", "foo");
0:         cf.update(props);
1: 
0:         // Update after creation
0:         Thread.sleep(500);
0:         assertEquals(5, foo.getA());
0:         assertEquals("foo", foo.getB());
1: 
0:         // Update of service properties
0:         assertEquals("5", sr.getProperty("a"));
0:         assertEquals("foo", sr.getProperty("b"));
0:         cf.delete();
0:     }
1: 
0:     @SuppressWarnings("rawtypes")
0: 	@Test
0:     public void testCreateAndUpdate() throws Exception {
0:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory3", null);
0:         Hashtable<String,String> props = new Hashtable<String,String>();
0:         props.put("a", "5");
0:         cf.update(props);
1: 
0:         Configuration cf2 = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory3", null);
0:         Hashtable<String,String> props2 = new Hashtable<String,String>();
0:         props2.put("a", "7");
0:         cf2.update(props2);
1: 
0:         ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo3)(a=5))");
0:         ServiceReference sr2 = getServiceRef(Foo.class, "(&(key=foo3)(a=7))");
1: 
0:         Foo foo = (Foo) context().getService(sr);
0:         assertNotNull(foo);
0:         assertEquals(5, foo.getA());
0:         assertEquals("default", foo.getB());
0:         assertEquals("5", sr.getProperty("a"));
0:         assertNull(sr.getProperty("b"));
1: 
0:         Foo foo2 = (Foo) context().getService(sr2);
0:         assertNotNull(foo2);
0:         assertEquals(7, foo2.getA());
0:         assertEquals("default", foo2.getB());
0:         assertEquals("7", sr2.getProperty("a"));
0:         assertNull(sr2.getProperty("b"));
1: 
0:         props = new Hashtable<String,String>();
0:         props.put("a", "5");
0:         props.put("b", "foo");
0:         cf.update(props);
1: 
0:         props2 = new Hashtable<String,String>();
0:         props2.put("a", "7");
0:         props2.put("b", "foo2");
0:         cf2.update(props2);
1: 
0:         // Update after creation
0:         Thread.sleep(500);
0:         assertEquals(5, foo.getA());
0:         assertEquals("foo", foo.getB());
1: 
0:         // Update of service properties
0:         assertEquals("5", sr.getProperty("a"));
0:         assertEquals("foo", sr.getProperty("b"));
1: 
0:         // 2a Update after creation
0:         assertEquals(7, foo2.getA());
0:         assertEquals("foo2", foo2.getB());
1: 
0:         // 2b Update of service properties
0:         assertEquals("7", sr2.getProperty("a"));
0:         assertEquals("foo2", sr2.getProperty("b"));
0:         cf.delete();
0:         cf2.delete();
0:     }
1: 
0:   @SuppressWarnings("rawtypes")
0: @Test
0:   public void testCreateAndUpdateUsingUpdateMethod() throws Exception {
0:     Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory4", null);
0:     Hashtable<String, String> props = new Hashtable<String, String>();
0:     props.put("a", "5");
0:     cf.update(props);
1: 
0:     Configuration cf2 = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory4", null);
0:     Hashtable<String, String> props2 = new Hashtable<String, String>();
0:     props2.put("a", "7");
0:     cf2.update(props2);
1: 
0:     ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo4)(a=5))");
0:     ServiceReference sr2 = getServiceRef(Foo.class, "(&(key=foo4)(a=7))");
1: 
0:     Foo foo = (Foo) context().getService(sr);
0:     assertNotNull(foo);
0:     assertEquals(5, foo.getA());
0:     assertEquals("default", foo.getB());
0:     assertEquals("5", sr.getProperty("a"));
0:     assertNull(sr.getProperty("b"));
1: 
0:     Foo foo2 = (Foo) context().getService(sr2);
0:     assertNotNull(foo2);
0:     assertEquals(7, foo2.getA());
0:     assertEquals("default", foo2.getB());
0:     assertEquals("7", sr2.getProperty("a"));
0:     assertNull(sr2.getProperty("b"));
1: 
0:     props = new Hashtable<String, String>();
0:     props.put("a", "5");
0:     props.put("b", "foo");
0:     cf.update(props);
1: 
0:     props2 = new Hashtable<String, String>();
0:     props2.put("a", "7");
0:     props2.put("b", "foo2");
0:     cf2.update(props2);
1: 
0:     // Update after creation
0:     Thread.sleep(500);
0:     assertEquals(5, foo.getA());
0:     assertEquals("foo", foo.getB());
1: 
0:     // Update of service properties
0:     assertEquals("5", sr.getProperty("a"));
0:     assertEquals("foo", sr.getProperty("b"));
1: 
0:     // 2a Update after creation
0:     assertEquals(7, foo2.getA());
0:     assertEquals("foo2", foo2.getB());
1: 
0:     // 2b Update of service properties
0:     assertEquals("7", sr2.getProperty("a"));
0:     assertEquals("foo2", sr2.getProperty("b"));
0:   }
1:   
0:   @Test
0:   public void testFactoryCreation() throws Exception {
0:     Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory5", null);
0:     Hashtable<String, String> props = new Hashtable<String, String>();
0:     props.put("a", "5");
0:     cf.update(props);
1: 
0:     @SuppressWarnings("rawtypes")
0: 	ServiceReference sr = getServiceRef(Foo.class, "(key=foo5)");
0:     Foo foo = (Foo) context().getService(sr);
0:     assertNotNull(foo);
0:     assertEquals(5, foo.getA());
0:     assertEquals("default", foo.getB());
0:     assertEquals("5", sr.getProperty("a"));
0:     assertNull(sr.getProperty("b"));
1: 
0:     props = new Hashtable<String, String>();
0:     props.put("a", "5");
0:     props.put("b", "foo");
0:     cf.update(props);
0:     Thread.sleep(500);
1: 
0:     // No update of bean after creation
0:     assertEquals(5, foo.getA());
0:     assertEquals("default", foo.getB());
1: 
0:     // Only initial update of service properties
0:     assertEquals("5", sr.getProperty("a"));
0:     assertNull(sr.getProperty("b"));
0:   }
1:   
0: 	@SuppressWarnings("rawtypes")
0: 	private ServiceReference getServiceRef(Class serviceInterface, String filter) throws InvalidSyntaxException {
0: 		int tries = 0;
0: 		do {
0: 			 ServiceReference[] srAr = bundleContext.getServiceReferences(serviceInterface.getName(), filter);
0: 			 if (srAr != null && srAr.length > 0) {
0: 				 return (ServiceReference) srAr[0];
0: 			 }
0: 			 tries ++;
0: 			 try {
0: 				Thread.sleep(100);
0: 			} catch (InterruptedException e) {
0: 				// Ignore
0: 			}
0: 		}  while (tries < 100);
0:       throw new RuntimeException("Could not find service " + serviceInterface.getName() + ", " + filter);
0: 	}
0: }
============================================================================