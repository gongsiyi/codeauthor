1:63c266f: /**
1:63c266f:  * Licensed to the Apache Software Foundation (ASF) under one
1:63c266f:  * or more contributor license agreements.  See the NOTICE file
1:63c266f:  * distributed with this work for additional information
1:63c266f:  * regarding copyright ownership.  The ASF licenses this file
1:63c266f:  * to you under the Apache License, Version 2.0 (the
1:63c266f:  * "License"); you may not use this file except in compliance
1:63c266f:  * with the License.  You may obtain a copy of the License at
1:63c266f:  *
1:63c266f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:63c266f:  *
1:63c266f:  * Unless required by applicable law or agreed to in writing,
1:63c266f:  * software distributed under the License is distributed on an
1:63c266f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:63c266f:  * KIND, either express or implied.  See the License for the
1:63c266f:  * specific language governing permissions and limitations
1:63c266f:  * under the License.
1:63c266f:  */
1:74884c6: package org.apache.aries.quiesce.manager.itest;
1:74884c6: 
1:74884c6: import java.util.ArrayList;
1:74884c6: import java.util.List;
1:74884c6: import java.util.concurrent.ExecutorService;
1:74884c6: import java.util.concurrent.Executors;
1:2f3073f: import java.util.concurrent.ThreadFactory;
1:74884c6: 
1:74884c6: import org.apache.aries.quiesce.manager.QuiesceCallback;
1:74884c6: import org.apache.aries.quiesce.participant.QuiesceParticipant;
1:74884c6: import org.osgi.framework.Bundle;
1:74884c6: 
1:74884c6: public class MockQuiesceParticipant implements QuiesceParticipant {
1:74884c6: 
1:74884c6: 	public static final int RETURNIMMEDIATELY = 0;
1:74884c6: 	public static final int NEVERRETURN = 1;
1:74884c6: 	public static final int WAIT = 2;
1:74884c6: 	private int behaviour;
1:74884c6: 	private List<QuiesceCallback> callbacks = new ArrayList<QuiesceCallback>();
1:2f3073f: 	private ExecutorService executor = Executors.newCachedThreadPool(new ThreadFactory() {
1:2f3073f:         public Thread newThread(Runnable r) {
1:2f3073f:             Thread t = new Thread(r, "Test");
1:2f3073f:             t.setDaemon(true);
1:2f3073f:             return t;
1:2f3073f:         }
1:2f3073f:     });
1:74884c6: 	private int started = 0;
1:74884c6: 	private int finished = 0;
1:74884c6: 	
1:74884c6: 	public MockQuiesceParticipant( int i ) {
1:74884c6: 		behaviour = i;
1:74884c6: 	}
1:74884c6: 
1:74884c6: 	public void quiesce(final QuiesceCallback callback, final List<Bundle> bundlesToQuiesce) {
1:74884c6: 		Runnable command = new Runnable() {
1:74884c6: 			public void run() {
1:74884c6: 				started += 1;
1:74884c6: 				callbacks.add(callback);
1:74884c6: 				switch (behaviour) {
1:74884c6: 				case 0:
1:74884c6: 					//return immediately
1:74884c6: 					System.out.println("MockParticipant: return immediately");
1:2f3073f: 					finished += 1;
1:74884c6: 					callback.bundleQuiesced(bundlesToQuiesce.toArray(new Bundle[bundlesToQuiesce.size()]));
1:74884c6: 					callbacks.remove(callback);
1:74884c6: 					break;
1:74884c6: 				case 1:
1:74884c6: 					//just don't do anything
1:74884c6: 					System.out.println("MockParticipant: just don't do anything");
1:74884c6: 					break;
1:74884c6: 				case 2:
1:2f3073f: 					//Wait for 1s then quiesce
1:2f3073f: 					System.out.println("MockParticipant: Wait for 1s then quiesce");
1:74884c6: 					try {
1:2f3073f: 						Thread.sleep(1000);
1:74884c6: 					} catch (InterruptedException e) {
1:74884c6: 					}
1:2f3073f: 					finished += 1;
1:74884c6: 					callback.bundleQuiesced(bundlesToQuiesce.toArray(new Bundle[bundlesToQuiesce.size()]));
1:74884c6: 					callbacks.remove(callback);
1:74884c6: 					break;
1:74884c6: 				default: 
1:74884c6: 					//Unknown behaviour, don't do anything
1:74884c6: 				}
1:74884c6: 			}
1:74884c6: 		};
1:74884c6: 		executor.execute(command);
1:74884c6: 	}
1:74884c6: 
1:74884c6: 	public int getStartedCount() {
1:74884c6: 		return started;
1:74884c6: 	}
1:74884c6: 	
1:74884c6: 	public int getFinishedCount() {
1:74884c6: 		return finished;
1:74884c6: 	}
1:74884c6: 	
1:74884c6: 	public synchronized void reset() {
1:74884c6: 		started = 0;
1:74884c6: 		finished = 0;
1:74884c6: 	}
1:74884c6: 	
1:74884c6: 	
1:74884c6: }
============================================================================
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:63c266f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:426ed81
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:2f3073f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ThreadFactory;
/////////////////////////////////////////////////////////////////////////
1: 	private ExecutorService executor = Executors.newCachedThreadPool(new ThreadFactory() {
1:         public Thread newThread(Runnable r) {
1:             Thread t = new Thread(r, "Test");
1:             t.setDaemon(true);
1:             return t;
1:         }
1:     });
/////////////////////////////////////////////////////////////////////////
1: 					finished += 1;
1: 					//Wait for 1s then quiesce
1: 					System.out.println("MockParticipant: Wait for 1s then quiesce");
1: 						Thread.sleep(1000);
1: 					finished += 1;
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:74884c6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.quiesce.manager.itest;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: 
1: import org.apache.aries.quiesce.manager.QuiesceCallback;
1: import org.apache.aries.quiesce.participant.QuiesceParticipant;
1: import org.osgi.framework.Bundle;
1: 
1: public class MockQuiesceParticipant implements QuiesceParticipant {
1: 
1: 	public static final int RETURNIMMEDIATELY = 0;
1: 	public static final int NEVERRETURN = 1;
1: 	public static final int WAIT = 2;
1: 	private int behaviour;
1: 	private List<QuiesceCallback> callbacks = new ArrayList<QuiesceCallback>();
0: 	private ExecutorService executor = Executors.newCachedThreadPool();
1: 	private int started = 0;
1: 	private int finished = 0;
1: 	
1: 	public MockQuiesceParticipant( int i ) {
1: 		behaviour = i;
1: 	}
1: 
1: 	public void quiesce(final QuiesceCallback callback, final List<Bundle> bundlesToQuiesce) {
1: 		Runnable command = new Runnable() {
1: 			public void run() {
1: 				started += 1;
1: 				callbacks.add(callback);
1: 				switch (behaviour) {
1: 				case 0:
1: 					//return immediately
1: 					System.out.println("MockParticipant: return immediately");
1: 					callback.bundleQuiesced(bundlesToQuiesce.toArray(new Bundle[bundlesToQuiesce.size()]));
1: 					callbacks.remove(callback);
0: 					finished += 1;
1: 					break;
1: 				case 1:
1: 					//just don't do anything
1: 					System.out.println("MockParticipant: just don't do anything");
1: 					break;
1: 				case 2:
0: 					//Wait for 5s then quiesce
0: 					System.out.println("MockParticipant: Wait for 5s then quiesce");
1: 					try {
0: 						Thread.sleep(5000);
1: 					} catch (InterruptedException e) {
1: 					}
1: 					callback.bundleQuiesced(bundlesToQuiesce.toArray(new Bundle[bundlesToQuiesce.size()]));
1: 					callbacks.remove(callback);
0: 					finished += 1;
1: 					break;
1: 				default: 
1: 					//Unknown behaviour, don't do anything
1: 				}
1: 			}
1: 		};
1: 		executor.execute(command);
1: 	}
1: 
1: 	public int getStartedCount() {
1: 		return started;
1: 	}
1: 	
1: 	public int getFinishedCount() {
1: 		return finished;
1: 	}
1: 	
1: 	public synchronized void reset() {
1: 		started = 0;
1: 		finished = 0;
1: 	}
1: 	
1: 	
1: }
============================================================================