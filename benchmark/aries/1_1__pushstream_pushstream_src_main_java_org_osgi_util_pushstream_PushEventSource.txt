1:7fa86e8: /*
1:7fa86e8:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:7fa86e8:  * 
1:7fa86e8:  * Licensed under the Apache License, Version 2.0 (the "License");
1:7fa86e8:  * you may not use this file except in compliance with the License.
1:7fa86e8:  * You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing, software
1:7fa86e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7fa86e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7fa86e8:  * See the License for the specific language governing permissions and
1:7fa86e8:  * limitations under the License.
1:7fa86e8:  */
1:7fa86e8: 
1:7fa86e8: package org.osgi.util.pushstream;
1:7fa86e8: 
1:7fa86e8: import org.osgi.annotation.versioning.ConsumerType;
1:7fa86e8: 
1:7fa86e8: /**
1:7fa86e8:  * An event source. An event source can open a channel between a source and a
1:7fa86e8:  * consumer. Once the channel is opened (even before it returns) the source can
1:7fa86e8:  * send events to the consumer.
1:7fa86e8:  *
1:7fa86e8:  * A source should stop sending and automatically close the channel when sending
1:7fa86e8:  * an event returns a negative value, see {@link PushEventConsumer#ABORT}.
1:7fa86e8:  * Values that are larger than 0 should be treated as a request to delay the
1:7fa86e8:  * next events with those number of milliseconds.
1:7fa86e8:  * 
1:7fa86e8:  * @param <T>
1:7fa86e8:  *            The payload type
1:7fa86e8:  */
1:7fa86e8: @ConsumerType
1:7fa86e8: @FunctionalInterface
1:7fa86e8: public interface PushEventSource<T> {
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Open the asynchronous channel between the source and the consumer. The
1:7fa86e8: 	 * call returns an {@link AutoCloseable}. This can be closed, and should
1:7fa86e8: 	 * close the channel, including sending a Close event if the channel was not
1:7fa86e8: 	 * already closed. The returned object must be able to be closed multiple
1:7fa86e8: 	 * times without sending more than one Close events.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param aec the consumer (not null)
1:7fa86e8: 	 * @return a {@link AutoCloseable} that can be used to close the stream
1:7fa86e8: 	 * @throws Exception
1:7fa86e8: 	 */
1:7fa86e8: 	AutoCloseable open(PushEventConsumer< ? super T> aec) throws Exception;
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.util.pushstream;
1: 
1: import org.osgi.annotation.versioning.ConsumerType;
1: 
1: /**
1:  * An event source. An event source can open a channel between a source and a
1:  * consumer. Once the channel is opened (even before it returns) the source can
1:  * send events to the consumer.
1:  *
1:  * A source should stop sending and automatically close the channel when sending
1:  * an event returns a negative value, see {@link PushEventConsumer#ABORT}.
1:  * Values that are larger than 0 should be treated as a request to delay the
1:  * next events with those number of milliseconds.
1:  * 
1:  * @param <T>
1:  *            The payload type
1:  */
1: @ConsumerType
1: @FunctionalInterface
1: public interface PushEventSource<T> {
1: 
1: 	/**
1: 	 * Open the asynchronous channel between the source and the consumer. The
1: 	 * call returns an {@link AutoCloseable}. This can be closed, and should
1: 	 * close the channel, including sending a Close event if the channel was not
1: 	 * already closed. The returned object must be able to be closed multiple
1: 	 * times without sending more than one Close events.
1: 	 * 
1: 	 * @param aec the consumer (not null)
1: 	 * @return a {@link AutoCloseable} that can be used to close the stream
1: 	 * @throws Exception
1: 	 */
1: 	AutoCloseable open(PushEventConsumer< ? super T> aec) throws Exception;
1: }
============================================================================