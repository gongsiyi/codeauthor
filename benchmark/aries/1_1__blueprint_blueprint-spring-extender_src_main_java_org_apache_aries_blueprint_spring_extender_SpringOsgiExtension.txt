1:09b7171: /**
1:09b7171:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:09b7171:  *  contributor license agreements.  See the NOTICE file distributed with
1:09b7171:  *  this work for additional information regarding copyright ownership.
1:09b7171:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:09b7171:  *  (the "License"); you may not use this file except in compliance with
1:09b7171:  *  the License.  You may obtain a copy of the License at
1:09b7171:  *
1:09b7171:  *     http://www.apache.org/licenses/LICENSE-2.0
1:09b7171:  *
1:09b7171:  *  Unless required by applicable law or agreed to in writing, software
1:09b7171:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:09b7171:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:09b7171:  *  See the License for the specific language governing permissions and
1:09b7171:  *  limitations under the License.
1:09b7171:  */
1:09b7171: package org.apache.aries.blueprint.spring.extender;
1:09b7171: 
1:09b7171: import javax.xml.parsers.DocumentBuilder;
1:09b7171: import javax.xml.parsers.DocumentBuilderFactory;
1:09b7171: import java.io.BufferedWriter;
1:09b7171: import java.io.File;
1:09b7171: import java.io.FileOutputStream;
1:09b7171: import java.io.InputStream;
1:09b7171: import java.io.OutputStreamWriter;
1:2e9d097: import java.net.URI;
1:09b7171: import java.net.URL;
1:09b7171: import java.util.ArrayList;
1:09b7171: import java.util.Arrays;
1:09b7171: import java.util.LinkedHashSet;
1:09b7171: import java.util.List;
1:09b7171: import java.util.Set;
1:09b7171: 
1:09b7171: import org.apache.aries.blueprint.services.BlueprintExtenderService;
1:09b7171: import org.apache.felix.utils.extender.Extension;
1:09b7171: import org.osgi.framework.Bundle;
1:09b7171: import org.osgi.service.blueprint.container.BlueprintContainer;
1:09b7171: import org.slf4j.Logger;
1:09b7171: import org.slf4j.LoggerFactory;
1:09b7171: import org.w3c.dom.Attr;
1:09b7171: import org.w3c.dom.Document;
1:09b7171: import org.xml.sax.InputSource;
1:09b7171: 
1:09b7171: public class SpringOsgiExtension implements Extension {
1:09b7171: 
1:09b7171:     private static final Logger LOGGER = LoggerFactory.getLogger(SpringOsgiExtension.class);
1:09b7171: 
1:09b7171:     private final BlueprintExtenderService blueprintExtenderService;
1:09b7171:     private final Bundle bundle;
1:09b7171:     private final List<URL> paths;
1:09b7171: 
1:09b7171:     BlueprintContainer container;
1:09b7171: 
1:09b7171:     public SpringOsgiExtension(BlueprintExtenderService blueprintExtenderService, Bundle bundle, List<URL> paths) {
1:09b7171:         // TODO: parse Spring-Context header directives
1:09b7171:         // TODO:   create-asynchrously
1:09b7171:         // TODO:   wait-for-dependencies
1:09b7171:         // TODO:   timeout
1:09b7171:         // TODO:   publish-context
1:09b7171:         this.blueprintExtenderService = blueprintExtenderService;
1:09b7171:         this.bundle = bundle;
1:09b7171:         this.paths = paths;
2:09b7171:     }
1:09b7171: 
1:09b7171:     @Override
1:09b7171:     public void start() throws Exception {
1:09b7171:         List<Object> bpPaths = new ArrayList<Object>();
1:09b7171: 
1:2e9d097:         Set<URI> namespaces = new LinkedHashSet<URI>();
1:09b7171:         DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
1:09b7171:         dbf.setNamespaceAware(true);
1:09b7171:         for (URL url : paths) {
1:09b7171:             InputStream is = url.openStream();
1:09b7171:             try {
1:09b7171:                 InputSource inputSource = new InputSource(is);
1:09b7171:                 DocumentBuilder builder = dbf.newDocumentBuilder();
1:09b7171:                 Document doc = builder.parse(inputSource);
1:09b7171:                 Attr schemaLoc = doc.getDocumentElement().getAttributeNodeNS("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation");
1:09b7171:                 if (schemaLoc != null) {
1:09b7171:                     List<String> locs = new ArrayList<String>(Arrays.asList(schemaLoc.getValue().split("\\s+")));
1:09b7171:                     locs.remove("");
1:09b7171:                     for (int i = 0; i < locs.size() / 2; i++) {
1:2e9d097:                         String ns = locs.get(i * 2);
1:2e9d097:                         namespaces.add(URI.create(ns));
1:2e9d097:                         if (ns.startsWith("http://www.springframework.org/schema/osgi-compendium")) {
1:2e9d097:                             namespaces.add(URI.create(SpringOsgiCompendiumNamespaceHandler.CM_NAMESPACE));
1:2e9d097:                         }
1:09b7171:                     }
1:09b7171:                 }
1:09b7171:             } finally {
1:09b7171:                 is.close();
1:09b7171:             }
1:09b7171:         }
1:09b7171: 
1:09b7171:         File file = File.createTempFile("blueprint-spring-extender", ".xml");
1:09b7171:         BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
1:09b7171:         try {
1:09b7171:             writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
1:09b7171:             writer.write("<blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\"\n");
1:09b7171:             writer.write("\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n");
1:09b7171:             writer.write("\txmlns:bean=\"http://www.springframework.org/schema/beans\"\n");
1:09b7171:             writer.write("\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd\">\n");
1:09b7171:             for (URL url : paths) {
1:09b7171:                 writer.write("\t<bean:import resource=\"" + url.toString() + "\"/>\n");
1:09b7171:             }
1:09b7171:             writer.write("</blueprint>\n");
1:09b7171:         } finally {
1:09b7171:             writer.close();
1:09b7171:         }
1:09b7171:         LOGGER.info("Generated blueprint for bundle {}/{} at {}", bundle.getSymbolicName(), bundle.getVersion(), file);
1:09b7171:         bpPaths.add(file.toURI().toURL());
1:2e9d097:         container = blueprintExtenderService.createContainer(bundle, bpPaths, namespaces);
1:09b7171:     }
1:09b7171: 
1:09b7171:     @Override
1:09b7171:     public void destroy() throws Exception {
1:09b7171:         // Make sure the container has not been destroyed yet
1:09b7171:         if (container == blueprintExtenderService.getContainer(bundle)) {
1:09b7171:             blueprintExtenderService.destroyContainer(bundle, container);
1:09b7171:         }
1:09b7171:     }
1:09b7171: 
1:09b7171: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e9d097
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
1:         Set<URI> namespaces = new LinkedHashSet<URI>();
/////////////////////////////////////////////////////////////////////////
1:                         String ns = locs.get(i * 2);
1:                         namespaces.add(URI.create(ns));
1:                         if (ns.startsWith("http://www.springframework.org/schema/osgi-compendium")) {
1:                             namespaces.add(URI.create(SpringOsgiCompendiumNamespaceHandler.CM_NAMESPACE));
1:                         }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         container = blueprintExtenderService.createContainer(bundle, bpPaths, namespaces);
commit:09b7171
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.spring.extender;
1: 
1: import javax.xml.parsers.DocumentBuilder;
1: import javax.xml.parsers.DocumentBuilderFactory;
1: import java.io.BufferedWriter;
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.InputStream;
1: import java.io.OutputStreamWriter;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.LinkedHashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.aries.blueprint.services.BlueprintExtenderService;
1: import org.apache.felix.utils.extender.Extension;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.w3c.dom.Attr;
1: import org.w3c.dom.Document;
1: import org.xml.sax.InputSource;
1: 
1: public class SpringOsgiExtension implements Extension {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(SpringOsgiExtension.class);
1: 
1:     private final BlueprintExtenderService blueprintExtenderService;
1:     private final Bundle bundle;
1:     private final List<URL> paths;
1: 
1:     BlueprintContainer container;
1: 
1:     public SpringOsgiExtension(BlueprintExtenderService blueprintExtenderService, Bundle bundle, List<URL> paths) {
1:         // TODO: parse Spring-Context header directives
1:         // TODO:   create-asynchrously
1:         // TODO:   wait-for-dependencies
1:         // TODO:   timeout
1:         // TODO:   publish-context
1:         this.blueprintExtenderService = blueprintExtenderService;
1:         this.bundle = bundle;
1:         this.paths = paths;
1:     }
1: 
1:     @Override
1:     public void start() throws Exception {
1:         List<Object> bpPaths = new ArrayList<Object>();
1: 
0:         Set<String> namespaces = new LinkedHashSet<String>();
1:         DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
1:         dbf.setNamespaceAware(true);
1:         for (URL url : paths) {
1:             InputStream is = url.openStream();
1:             try {
1:                 InputSource inputSource = new InputSource(is);
1:                 DocumentBuilder builder = dbf.newDocumentBuilder();
1:                 Document doc = builder.parse(inputSource);
1:                 Attr schemaLoc = doc.getDocumentElement().getAttributeNodeNS("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation");
1:                 if (schemaLoc != null) {
1:                     List<String> locs = new ArrayList<String>(Arrays.asList(schemaLoc.getValue().split("\\s+")));
1:                     locs.remove("");
1:                     for (int i = 0; i < locs.size() / 2; i++) {
0:                         namespaces.add(locs.get(i * 2));
1:                     }
1:                 }
1:             } finally {
1:                 is.close();
1:             }
1:         }
1: 
1:         File file = File.createTempFile("blueprint-spring-extender", ".xml");
1:         BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
1:         try {
1:             writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
1:             writer.write("<blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\"\n");
1:             writer.write("\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n");
1:             writer.write("\txmlns:bean=\"http://www.springframework.org/schema/beans\"\n");
1:             writer.write("\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd\">\n");
0:             // TODO: improve that, this is a big hack to force the reference to namespace handlers
0:             for (String namespace : namespaces) {
0:                 writer.write("\t<bean class=\"java.lang.String\" scope=\"ns1:dummy\" xmlns:ns1=\"" + namespace + "\"/>\n");
1:             }
1:             for (URL url : paths) {
1:                 writer.write("\t<bean:import resource=\"" + url.toString() + "\"/>\n");
1:             }
1:             writer.write("</blueprint>\n");
1:         } finally {
1:             writer.close();
1:         }
1:         LOGGER.info("Generated blueprint for bundle {}/{} at {}", bundle.getSymbolicName(), bundle.getVersion(), file);
1:         bpPaths.add(file.toURI().toURL());
0:         container = blueprintExtenderService.createContainer(bundle, bpPaths);
1:     }
1: 
1:     @Override
1:     public void destroy() throws Exception {
1:         // Make sure the container has not been destroyed yet
1:         if (container == blueprintExtenderService.getContainer(bundle)) {
1:             blueprintExtenderService.destroyContainer(bundle, container);
1:         }
1:     }
1: 
1: }
============================================================================