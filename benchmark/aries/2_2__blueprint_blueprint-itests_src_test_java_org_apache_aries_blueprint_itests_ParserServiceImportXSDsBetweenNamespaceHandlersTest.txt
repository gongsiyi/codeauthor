1:b685f35: /**
1:b685f35:  * Licensed to the Apache Software Foundation (ASF) under one
1:b685f35:  * or more contributor license agreements.  See the NOTICE file
1:b685f35:  * distributed with this work for additional information
1:b685f35:  * regarding copyright ownership.  The ASF licenses this file
1:b685f35:  * to you under the Apache License, Version 2.0 (the
1:b685f35:  * "License"); you may not use this file except in compliance
1:b685f35:  * with the License.  You may obtain a copy of the License at
1:b685f35:  *
1:b685f35:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b685f35:  *
1:b685f35:  * Unless required by applicable law or agreed to in writing,
1:b685f35:  * software distributed under the License is distributed on an
1:b685f35:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b685f35:  * KIND, either express or implied.  See the License for the
1:b685f35:  * specific language governing permissions and limitations
1:b685f35:  * under the License.
1:b685f35:  */
1:b685f35: package org.apache.aries.blueprint.itests;
1:b685f35: 
1:b685f35: import static org.apache.aries.blueprint.itests.Helper.blueprintBundles;
1:b685f35: import static org.junit.Assert.assertNotNull;
1:1e0ebd4: import static org.ops4j.pax.exam.CoreOptions.keepCaches;
1:1e0ebd4: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1:1e0ebd4: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:b685f35: 
1:b685f35: import java.io.InputStream;
1:b685f35: import java.net.URL;
1:1e0ebd4: import java.util.concurrent.atomic.AtomicBoolean;
1:b685f35: 
1:b685f35: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:b685f35: import org.apache.aries.blueprint.itests.cm.handler.Aries1503aNamespaceHandler;
1:b685f35: import org.apache.aries.blueprint.itests.cm.handler.Aries1503bNamespaceHandler;
1:b685f35: import org.apache.aries.blueprint.services.ParserService;
1:b685f35: import org.junit.Test;
1:b685f35: import org.ops4j.pax.exam.Option;
1:b685f35: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:b685f35: import org.osgi.framework.Constants;
1:1e0ebd4: import org.osgi.framework.ServiceRegistration;
1:1e0ebd4: import org.osgi.service.blueprint.container.BlueprintEvent;
1:1e0ebd4: import org.osgi.service.blueprint.container.BlueprintListener;
1:b685f35: 
1:b685f35: public class ParserServiceImportXSDsBetweenNamespaceHandlersTest extends AbstractBlueprintIntegrationTest {
1:b685f35: 
1:b685f35:     private static final String NS_HANDLER_BUNDLE = "org.apache.aries.blueprint.aries1503";
1:b685f35:     private static final String NS_HANDLER2_BUNDLE = "org.apache.aries.blueprint.aries1503b";
1:b685f35:     private static final String TEST_BUNDLE = "org.apache.aries.blueprint.aries1503.test";
1:b685f35: 
1:b685f35:     @org.ops4j.pax.exam.Configuration
1:b685f35:     public Option[] config() {
1:b685f35:         return new Option[] {
1:b685f35:                 baseOptions(),
1:b685f35:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:b685f35:                 blueprintBundles(),
1:b685f35:                 keepCaches(),
1:b685f35:                 streamBundle(createAries1503aNamespaceHandlerBundle()).noStart(),
1:b685f35:                 streamBundle(createAries1503bNamespaceHandlerBundle()),
1:b685f35:                 streamBundle(createTestBundle())
1:b685f35:         };
1:b685f35:     }
1:b685f35: 
1:b685f35:     private InputStream createAries1503aNamespaceHandlerBundle() {
1:b685f35:         return TinyBundles.bundle()
1:b685f35:                 .add(Aries1503aNamespaceHandler.class)
1:b685f35:                 .add("OSGI-INF/blueprint/blueprint-aries-1503.xml", getResource("blueprint-aries-1503.xml"))
1:b685f35:                 .add("blueprint-aries-1503.xsd", getResource("blueprint-aries-1503.xsd"))
1:b685f35:                 .set(Constants.BUNDLE_SYMBOLICNAME, NS_HANDLER_BUNDLE)
1:b685f35:                 .set(Constants.EXPORT_PACKAGE, Aries1503aNamespaceHandler.class.getPackage().getName())
1:b685f35:                 .set(Constants.IMPORT_PACKAGE, "org.apache.aries.blueprint,org.apache.aries.blueprint.ext," +
1:b685f35:                         "org.apache.aries.blueprint.mutable," +
1:b685f35:                         "org.osgi.service.blueprint.reflect,org.w3c.dom")
1:b685f35:                 .build(TinyBundles.withBnd());
1:b685f35:     }
1:b685f35: 
1:b685f35:     private InputStream createAries1503bNamespaceHandlerBundle() {
1:b685f35:         return TinyBundles.bundle()
1:b685f35:                 .add(Aries1503bNamespaceHandler.class)
1:b685f35:                 // add this class too - we don't want to play with split packages, etc.
1:b685f35:                 .add(Aries1503aNamespaceHandler.class)
1:b685f35:                 .add("OSGI-INF/blueprint/blueprint-aries-1503-2.xml", getResource("blueprint-aries-1503-2.xml"))
1:b685f35:                 .add("blueprint-aries-1503-2.xsd", getResource("blueprint-aries-1503-2.xsd"))
1:b685f35:                 .add("blueprint-aries-1503.xsd", getResource("blueprint-aries-1503.xsd"))
1:b685f35:                 .set(Constants.BUNDLE_SYMBOLICNAME, NS_HANDLER2_BUNDLE)
1:b685f35:                 .set(Constants.EXPORT_PACKAGE, Aries1503bNamespaceHandler.class.getPackage().getName())
1:b685f35:                 .set(Constants.IMPORT_PACKAGE, "org.apache.aries.blueprint,org.apache.aries.blueprint.ext," +
1:b685f35:                         "org.apache.aries.blueprint.mutable," +
1:b685f35:                         "org.osgi.service.blueprint.reflect,org.w3c.dom," +
1:b685f35:                         Aries1503bNamespaceHandler.class.getPackage().getName())
1:b685f35:                 .build(TinyBundles.withBnd());
1:b685f35:     }
1:b685f35: 
1:b685f35:     private InputStream createTestBundle() {
1:b685f35:         return TinyBundles.bundle()
1:b685f35:                 .add("OSGI-INF/blueprint/ImportNamespacesTest.xml", getResource("ImportNamespacesTest.xml"))
1:b685f35:                 .set(Constants.BUNDLE_SYMBOLICNAME, TEST_BUNDLE)
1:b685f35:                 .set(Constants.IMPORT_PACKAGE, Aries1503bNamespaceHandler.class.getPackage().getName()
1:b685f35:                         + ",org.apache.aries.blueprint,org.apache.aries.blueprint.ext")
1:b685f35:                 .build(TinyBundles.withBnd());
1:b685f35:     }
1:b685f35: 
1:b685f35:     @Test
1:b685f35:     public void testXSDImports() throws Exception {
1:2ac722b:         waitForConfig();
1:b685f35:         ParserService parserService = context().getService(ParserService.class);
1:b685f35:         URL blueprintXML = context().getBundleByName(TEST_BUNDLE).getEntry("OSGI-INF/blueprint/ImportNamespacesTest.xml");
1:b685f35:         ComponentDefinitionRegistry cdr = parserService.parse(blueprintXML, context().getBundleByName(TEST_BUNDLE));
1:b685f35:         assertNotNull(cdr.getComponentDefinition("aries-1503"));
1:b685f35:     }
1:2ac722b: 
1:1e0ebd4:     private void waitForConfig() throws InterruptedException {
1:2ac722b:         final AtomicBoolean ready = new AtomicBoolean();
1:2ac722b:         @SuppressWarnings("rawtypes")
1:2ac722b:         ServiceRegistration reg = context().registerService(
1:2ac722b:                 BlueprintListener.class,
1:2ac722b:                 new BlueprintListener() {
1:2ac722b:                     @Override
1:2ac722b:                     public void blueprintEvent(BlueprintEvent event) {
1:2ac722b:                         if ("org.apache.aries.blueprint.aries1503b".equals(event.getBundle().getSymbolicName())
1:2ac722b:                                 && BlueprintEvent.CREATED == event.getType()) {
1:2ac722b:                             synchronized (ready) {
1:2ac722b:                                 ready.set(true);
1:2ac722b:                                 ready.notify();
1:2ac722b:                             }
1:2ac722b:                         }
1:2ac722b:                     }
1:2ac722b:                 },
1:2ac722b:                 null);
1:2ac722b:         try {
1:2ac722b:             synchronized (ready) {
1:2ac722b:                 if (!ready.get()) {
1:2ac722b:                     ready.wait(3000);
1:2ac722b:                 }
1:2ac722b:             }
1:2ac722b:         } finally {
1:2ac722b:             reg.unregister();
1:2ac722b:         }
1:b685f35:     }
1:b685f35: 
8:1e0ebd4: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2ac722b
/////////////////////////////////////////////////////////////////////////
1:         waitForConfig();
1: 
1:         final AtomicBoolean ready = new AtomicBoolean();
1:         @SuppressWarnings("rawtypes")
1:         ServiceRegistration reg = context().registerService(
1:                 BlueprintListener.class,
1:                 new BlueprintListener() {
1:                     @Override
1:                     public void blueprintEvent(BlueprintEvent event) {
1:                         if ("org.apache.aries.blueprint.aries1503b".equals(event.getBundle().getSymbolicName())
1:                                 && BlueprintEvent.CREATED == event.getType()) {
1:                             synchronized (ready) {
1:                                 ready.set(true);
1:                                 ready.notify();
1:                             }
1:                         }
1:                     }
1:                 },
1:                 null);
1:         try {
1:             synchronized (ready) {
1:                 if (!ready.get()) {
1:                     ready.wait(3000);
1:                 }
1:             }
1:         } finally {
1:             reg.unregister();
1:         }
commit:b685f35
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
1: import java.io.InputStream;
1: import java.net.URL;
1: 
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.apache.aries.blueprint.itests.cm.handler.Aries1503aNamespaceHandler;
1: import org.apache.aries.blueprint.itests.cm.handler.Aries1503bNamespaceHandler;
1: import org.apache.aries.blueprint.services.ParserService;
1: import org.junit.Test;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: import org.osgi.framework.Constants;
1: 
1: import static org.apache.aries.blueprint.itests.Helper.blueprintBundles;
1: import static org.junit.Assert.assertNotNull;
0: import static org.ops4j.pax.exam.CoreOptions.*;
1: 
1: public class ParserServiceImportXSDsBetweenNamespaceHandlersTest extends AbstractBlueprintIntegrationTest {
1: 
1:     private static final String NS_HANDLER_BUNDLE = "org.apache.aries.blueprint.aries1503";
1:     private static final String NS_HANDLER2_BUNDLE = "org.apache.aries.blueprint.aries1503b";
1:     private static final String TEST_BUNDLE = "org.apache.aries.blueprint.aries1503.test";
1: 
1:     @org.ops4j.pax.exam.Configuration
1:     public Option[] config() {
1:         return new Option[] {
1:                 baseOptions(),
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:                 blueprintBundles(),
1:                 keepCaches(),
1:                 streamBundle(createAries1503aNamespaceHandlerBundle()).noStart(),
1:                 streamBundle(createAries1503bNamespaceHandlerBundle()),
1:                 streamBundle(createTestBundle())
1:         };
1:     }
1: 
1:     private InputStream createAries1503aNamespaceHandlerBundle() {
1:         return TinyBundles.bundle()
1:                 .add(Aries1503aNamespaceHandler.class)
1:                 .add("OSGI-INF/blueprint/blueprint-aries-1503.xml", getResource("blueprint-aries-1503.xml"))
1:                 .add("blueprint-aries-1503.xsd", getResource("blueprint-aries-1503.xsd"))
1:                 .set(Constants.BUNDLE_SYMBOLICNAME, NS_HANDLER_BUNDLE)
1:                 .set(Constants.EXPORT_PACKAGE, Aries1503aNamespaceHandler.class.getPackage().getName())
1:                 .set(Constants.IMPORT_PACKAGE, "org.apache.aries.blueprint,org.apache.aries.blueprint.ext," +
1:                         "org.apache.aries.blueprint.mutable," +
1:                         "org.osgi.service.blueprint.reflect,org.w3c.dom")
1:                 .build(TinyBundles.withBnd());
1:     }
1: 
1:     private InputStream createAries1503bNamespaceHandlerBundle() {
1:         return TinyBundles.bundle()
1:                 .add(Aries1503bNamespaceHandler.class)
1:                 // add this class too - we don't want to play with split packages, etc.
1:                 .add(Aries1503aNamespaceHandler.class)
1:                 .add("OSGI-INF/blueprint/blueprint-aries-1503-2.xml", getResource("blueprint-aries-1503-2.xml"))
1:                 .add("blueprint-aries-1503-2.xsd", getResource("blueprint-aries-1503-2.xsd"))
1:                 .add("blueprint-aries-1503.xsd", getResource("blueprint-aries-1503.xsd"))
1:                 .set(Constants.BUNDLE_SYMBOLICNAME, NS_HANDLER2_BUNDLE)
1:                 .set(Constants.EXPORT_PACKAGE, Aries1503bNamespaceHandler.class.getPackage().getName())
1:                 .set(Constants.IMPORT_PACKAGE, "org.apache.aries.blueprint,org.apache.aries.blueprint.ext," +
1:                         "org.apache.aries.blueprint.mutable," +
1:                         "org.osgi.service.blueprint.reflect,org.w3c.dom," +
1:                         Aries1503bNamespaceHandler.class.getPackage().getName())
1:                 .build(TinyBundles.withBnd());
1:     }
1: 
1:     private InputStream createTestBundle() {
1:         return TinyBundles.bundle()
1:                 .add("OSGI-INF/blueprint/ImportNamespacesTest.xml", getResource("ImportNamespacesTest.xml"))
1:                 .set(Constants.BUNDLE_SYMBOLICNAME, TEST_BUNDLE)
1:                 .set(Constants.IMPORT_PACKAGE, Aries1503bNamespaceHandler.class.getPackage().getName()
1:                         + ",org.apache.aries.blueprint,org.apache.aries.blueprint.ext")
1:                 .build(TinyBundles.withBnd());
1:     }
1: 
1:     @Test
1:     public void testXSDImports() throws Exception {
1:         ParserService parserService = context().getService(ParserService.class);
1:         URL blueprintXML = context().getBundleByName(TEST_BUNDLE).getEntry("OSGI-INF/blueprint/ImportNamespacesTest.xml");
1:         ComponentDefinitionRegistry cdr = parserService.parse(blueprintXML, context().getBundleByName(TEST_BUNDLE));
1:         assertNotNull(cdr.getComponentDefinition("aries-1503"));
1:     }
1: 
1: }
author:John Ross
-------------------------------------------------------------------------------
commit:1e0ebd4
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.blueprint.itests.Helper.blueprintBundles;
0: import static org.junit.Assert.assertNotNull;
1: import static org.ops4j.pax.exam.CoreOptions.keepCaches;
1: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: 
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.blueprint.container.BlueprintEvent;
1: import org.osgi.service.blueprint.container.BlueprintListener;
/////////////////////////////////////////////////////////////////////////
0:     	waitForConfig();
0:     
1:     private void waitForConfig() throws InterruptedException {
0:     	final AtomicBoolean ready = new AtomicBoolean();
0:     	@SuppressWarnings("rawtypes")
0: 		ServiceRegistration reg = context().registerService(
0:     			BlueprintListener.class, 
0:     			new BlueprintListener() {
0:     				@Override
0:     				public void blueprintEvent(BlueprintEvent event) {
0:     					if ("org.apache.aries.blueprint.aries1503b".equals(event.getBundle().getSymbolicName())
0:     							&& BlueprintEvent.CREATED == event.getType()) {
0:     						synchronized (ready) {
0:     							ready.set(true);
0:     							ready.notify();
1:     						}
1:     					}
1:     				}
0:     			}, 
0:     			null);
0:     	try {
0: 	    	synchronized (ready) {
0: 	    		if (!ready.get()) {
0: 	    			ready.wait(3000);
1: 	    		}
1: 	    	}
1:     	}
0:     	finally {
0:     		reg.unregister();
1:     	}
1:     }
============================================================================