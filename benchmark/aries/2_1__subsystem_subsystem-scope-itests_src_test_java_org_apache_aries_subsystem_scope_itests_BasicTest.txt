1:e9f9bca: package org.apache.aries.subsystem.scope.itests;
1:e9f9bca: 
1:e9f9bca: import static org.junit.Assert.assertEquals;
1:e9f9bca: import static org.junit.Assert.assertNotNull;
1:e9f9bca: import static org.junit.Assert.assertNull;
1:e9f9bca: import static org.junit.Assert.assertTrue;
1:e9f9bca: 
1:e9f9bca: import java.net.URL;
1:e9f9bca: import java.util.Arrays;
1:e9f9bca: import java.util.Collection;
1:e9f9bca: 
1:e9f9bca: import org.apache.aries.subsystem.scope.InstallInfo;
1:e9f9bca: import org.apache.aries.subsystem.scope.Scope;
1:e9f9bca: import org.apache.aries.subsystem.scope.ScopeUpdate;
1:e9f9bca: import org.apache.aries.subsystem.scope.SharePolicy;
1:e9f9bca: import org.junit.Test;
1:e9f9bca: import org.osgi.framework.Bundle;
1:e9f9bca: import org.osgi.framework.BundleException;
1:e9f9bca: 
1:e9f9bca: public class BasicTest extends AbstractTest {
1:e9f9bca: 	/**
1:e9f9bca: 	 * Basic test of the initial state of the root scope.
1:e9f9bca: 	 */
1:e9f9bca: 	@Test
1:e9f9bca: 	public void testRootScopeInitialState() {
1:6f4b079: 		Scope scope = getScope();
1:e9f9bca: 		Collection<Bundle> bundles = Arrays.asList(bundleContext.getBundles());
1:e9f9bca: 		assertCollectionEquals(bundles, scope.getBundles());
1:e9f9bca: 		assertEmpty(scope.getChildren());
1:e9f9bca: 		assertEquals(0, scope.getId());
1:e9f9bca: 		assertNull(scope.getLocation());
1:e9f9bca: 		assertEquals("root", scope.getName());
1:e9f9bca: 		assertNull(scope.getParent());
1:e9f9bca: 		assertEmpty(scope.getSharePolicies(SharePolicy.TYPE_EXPORT));
1:e9f9bca: 		assertEmpty(scope.getSharePolicies(SharePolicy.TYPE_IMPORT));
1:e9f9bca: 		assertNotNull(scope.newScopeUpdate());
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	/**
1:e9f9bca: 	 * Basic test of the initial state of the root scope from another bundle.
1:e9f9bca: 	 * The root scope instance should be the same as in the previous test.
1:e9f9bca: 	 * @throws Exception
1:e9f9bca: 	 */
1:e9f9bca: 	@Test
1:e9f9bca: 	public void testRootScopeInitialStateFromOtherBundle() throws Exception {
1:e9f9bca: 		Bundle tb1 = installBundle("tb-1.jar");
1:e9f9bca: 		try {
1:e9f9bca: 			tb1.start();
1:e9f9bca: 		}
1:e9f9bca: 		catch (BundleException e) {
1:e9f9bca: 			if (e.getCause() instanceof AssertionError) {
1:e9f9bca: 				throw (AssertionError)e.getCause();
1:e9f9bca: 			}
1:e9f9bca: 			throw e;
1:e9f9bca: 		}
1:e9f9bca: 		finally {
1:e9f9bca: 			tb1.uninstall();
1:e9f9bca: 		}
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	@Test
1:e9f9bca: 	public void testInstallBundleIntoRootScope() throws Exception {
1:6f4b079: 		Scope scope = getScope();
1:e9f9bca: 		int previousSize = scope.getBundles().size();
1:e9f9bca: 		String location = getBundleLocation("tb-2.jar");
1:e9f9bca: 		URL url = new URL(location);
1:e9f9bca: 		InstallInfo tb2Info = new InstallInfo(location, url.openStream());
1:e9f9bca: 		ScopeUpdate scopeUpdate = scope.newScopeUpdate();
1:e9f9bca: 		scopeUpdate.getBundlesToInstall().add(tb2Info);
1:e9f9bca: 		assertTrue(scopeUpdate.commit());
1:e9f9bca: 		Bundle b = bundleContext.getBundle(location);
1:e9f9bca: 		assertNotNull(b);
1:e9f9bca: 		Collection<Bundle> bundles = scope.getBundles();
1:e9f9bca: 		assertEquals(previousSize + 1, bundles.size());
1:e9f9bca: 		assertTrue(bundles.contains(b));
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	@Test
1:e9f9bca: 	public void testCreateChildScope() throws Exception {
1:6f4b079: 		Scope scope = getScope();
1:e9f9bca: 		String name = "scope1";
1:e9f9bca: 		ScopeUpdate parent = scope.newScopeUpdate();
1:e9f9bca: 		ScopeUpdate child = parent.newChild(name);
1:e9f9bca: 		parent.getChildren().add(child);
1:e9f9bca: 		assertTrue(parent.commit());
1:e9f9bca: 		Collection<Scope> children = scope.getChildren();
1:e9f9bca: 		assertEquals(1, children.size());
1:e9f9bca: 		Scope feature1 = null;
1:e9f9bca: 		for (Scope s : children) {
1:e9f9bca: 			if (name.equals(s.getName())) {
1:e9f9bca: 				feature1 = s;
1:e9f9bca: 				break;
1:e9f9bca: 			}
1:e9f9bca: 		}
1:e9f9bca: 		assertNotNull(feature1);
1:e9f9bca: 		assertEmpty(feature1.getBundles());
1:e9f9bca: 		assertEmpty(feature1.getChildren());
1:e9f9bca: 		assertEquals(1, feature1.getId());
1:e9f9bca: 		assertNull(feature1.getLocation());
1:e9f9bca: 		assertEquals(name, feature1.getName());
1:e9f9bca: 		assertEquals(scope, feature1.getParent());
1:e9f9bca: 		assertEmpty(feature1.getSharePolicies(SharePolicy.TYPE_EXPORT));
1:e9f9bca: 		assertEmpty(feature1.getSharePolicies(SharePolicy.TYPE_IMPORT));
1:e9f9bca: 	}
1:e9f9bca: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:5bdb2b8
/////////////////////////////////////////////////////////////////////////
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
1: 		Scope scope = getScope();
/////////////////////////////////////////////////////////////////////////
1: 		Scope scope = getScope();
/////////////////////////////////////////////////////////////////////////
1: 		Scope scope = getScope();
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.scope.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.net.URL;
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import org.apache.aries.subsystem.scope.InstallInfo;
1: import org.apache.aries.subsystem.scope.Scope;
1: import org.apache.aries.subsystem.scope.ScopeUpdate;
1: import org.apache.aries.subsystem.scope.SharePolicy;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class BasicTest extends AbstractTest {
1: 	/**
1: 	 * Basic test of the initial state of the root scope.
1: 	 */
1: 	@Test
1: 	public void testRootScopeInitialState() {
1: 		Collection<Bundle> bundles = Arrays.asList(bundleContext.getBundles());
1: 		assertCollectionEquals(bundles, scope.getBundles());
1: 		assertEmpty(scope.getChildren());
1: 		assertEquals(0, scope.getId());
1: 		assertNull(scope.getLocation());
1: 		assertEquals("root", scope.getName());
1: 		assertNull(scope.getParent());
1: 		assertEmpty(scope.getSharePolicies(SharePolicy.TYPE_EXPORT));
1: 		assertEmpty(scope.getSharePolicies(SharePolicy.TYPE_IMPORT));
1: 		assertNotNull(scope.newScopeUpdate());
1: 	}
1: 	
1: 	/**
1: 	 * Basic test of the initial state of the root scope from another bundle.
1: 	 * The root scope instance should be the same as in the previous test.
1: 	 * @throws Exception
1: 	 */
1: 	@Test
1: 	public void testRootScopeInitialStateFromOtherBundle() throws Exception {
1: 		Bundle tb1 = installBundle("tb-1.jar");
1: 		try {
1: 			tb1.start();
1: 		}
1: 		catch (BundleException e) {
1: 			if (e.getCause() instanceof AssertionError) {
1: 				throw (AssertionError)e.getCause();
1: 			}
1: 			throw e;
1: 		}
1: 		finally {
1: 			tb1.uninstall();
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testInstallBundleIntoRootScope() throws Exception {
1: 		int previousSize = scope.getBundles().size();
1: 		String location = getBundleLocation("tb-2.jar");
1: 		URL url = new URL(location);
1: 		InstallInfo tb2Info = new InstallInfo(location, url.openStream());
1: 		ScopeUpdate scopeUpdate = scope.newScopeUpdate();
1: 		scopeUpdate.getBundlesToInstall().add(tb2Info);
1: 		assertTrue(scopeUpdate.commit());
1: 		Bundle b = bundleContext.getBundle(location);
1: 		assertNotNull(b);
1: 		Collection<Bundle> bundles = scope.getBundles();
1: 		assertEquals(previousSize + 1, bundles.size());
1: 		assertTrue(bundles.contains(b));
1: 	}
1: 	
1: 	@Test
1: 	public void testCreateChildScope() throws Exception {
1: 		String name = "scope1";
1: 		ScopeUpdate parent = scope.newScopeUpdate();
1: 		ScopeUpdate child = parent.newChild(name);
1: 		parent.getChildren().add(child);
1: 		assertTrue(parent.commit());
1: 		Collection<Scope> children = scope.getChildren();
1: 		assertEquals(1, children.size());
1: 		Scope feature1 = null;
1: 		for (Scope s : children) {
1: 			if (name.equals(s.getName())) {
1: 				feature1 = s;
1: 				break;
1: 			}
1: 		}
1: 		assertNotNull(feature1);
1: 		assertEmpty(feature1.getBundles());
1: 		assertEmpty(feature1.getChildren());
1: 		assertEquals(1, feature1.getId());
1: 		assertNull(feature1.getLocation());
1: 		assertEquals(name, feature1.getName());
1: 		assertEquals(scope, feature1.getParent());
1: 		assertEmpty(feature1.getSharePolicies(SharePolicy.TYPE_EXPORT));
1: 		assertEmpty(feature1.getSharePolicies(SharePolicy.TYPE_IMPORT));
1: 	}
1: }
============================================================================