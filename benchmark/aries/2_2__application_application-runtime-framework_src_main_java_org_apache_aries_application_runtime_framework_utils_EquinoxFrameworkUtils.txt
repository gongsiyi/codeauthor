1:06621c5: /*
1:06621c5:  * Licensed to the Apache Software Foundation (ASF) under one
1:06621c5:  * or more contributor license agreements.  See the NOTICE file
1:06621c5:  * distributed with this work for additional information
1:06621c5:  * regarding copyright ownership.  The ASF licenses this file
1:06621c5:  * to you under the Apache License, Version 2.0 (the
1:06621c5:  * "License"); you may not use this file except in compliance
1:06621c5:  * with the License.  You may obtain a copy of the License at
1:06621c5:  *
1:06621c5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:06621c5:  *
1:06621c5:  * Unless required by applicable law or agreed to in writing,
1:06621c5:  * software distributed under the License is distributed on an
1:06621c5:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:06621c5:  * KIND, either express or implied.  See the License for the
1:06621c5:  * specific language governing permissions and limitations
1:06621c5:  * under the License.
1:06621c5:  */
1:06621c5: package org.apache.aries.application.runtime.framework.utils;
1:06621c5: 
1:06621c5: import java.util.Collection;
1:06621c5: import java.util.Collections;
1:06621c5: import java.util.HashMap;
1:06621c5: import java.util.HashSet;
1:06621c5: import java.util.Map;
1:06621c5: import java.util.Set;
1:06621c5: 
1:06621c5: import org.apache.aries.application.Content;
1:910fec0: import org.apache.aries.application.utils.manifest.ContentFactory;
1:910fec0: import org.apache.aries.util.VersionRange;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;
1:06621c5: import org.osgi.framework.Bundle;
1:06621c5: import org.osgi.framework.BundleContext;
1:06621c5: import org.osgi.framework.Constants;
1:06621c5: import org.osgi.framework.Version;
1:06621c5: 
1:06621c5: public class EquinoxFrameworkUtils
1:06621c5: {
1:06621c5: 
1:06621c5:   public static Collection<Content> getExportPackages(BundleContext isolatedBundleContext)
1:06621c5:   {
1:06621c5:     Set<Content> exports = new HashSet<Content>();
1:06621c5: 
1:06621c5:     Bundle sysBundle = isolatedBundleContext.getBundle(0);
1:06621c5:     if (sysBundle != null && sysBundle.getHeaders() != null) {
1:06621c5:       String exportString = (String) sysBundle.getHeaders().get(Constants.EXPORT_PACKAGE);
1:06621c5:       if (exportString != null) {
1:de5b346:         for (NameValuePair nvp : ManifestHeaderProcessor
1:06621c5:             .parseExportString(exportString))
1:de5b346:           exports.add(ContentFactory.parseContent(nvp.getName(), nvp.getAttributes()));
1:06621c5:       }
1:06621c5:     }
1:06621c5:     return Collections.unmodifiableSet(exports);
1:06621c5:   }
1:06621c5:   
1:06621c5:   public static Collection<Content> getSystemExtraPkgs(BundleContext context)
1:06621c5:   {
1:06621c5:     Set<Content> extraPkgs = new HashSet<Content>();
1:06621c5:     
1:06621c5:       String exportString = context.getProperty(Constants.FRAMEWORK_SYSTEMPACKAGES_EXTRA);
1:06621c5:       if (exportString != null) {
1:de5b346:         for (NameValuePair nvp : ManifestHeaderProcessor
1:06621c5:             .parseExportString(exportString))
1:de5b346:           extraPkgs.add(ContentFactory.parseContent(nvp.getName(), nvp.getAttributes()));
1:06621c5:       }
1:06621c5:     
1:06621c5:     return Collections.unmodifiableSet(extraPkgs);
1:06621c5:   }
1:06621c5: 
1:06621c5:   public static Collection<Content> calculateImports(final Collection<Content> importPackage,
1:06621c5:       final Collection<Content> exportPackages)
1:06621c5:   {
1:06621c5:     Set<Content> results = new HashSet<Content>();
1:06621c5:     if (importPackage != null && !importPackage.isEmpty()) {
1:06621c5:       for (Content exportPkg : exportPackages) {
1:06621c5:         for (Content importPkg : importPackage) {
1:06621c5:           if (!(importPkg.getContentName().equals(exportPkg.getContentName())
1:06621c5:               && importPkg.getVersion().equals(exportPkg.getVersion()))) {
1:06621c5:             results.add(importPkg);
1:06621c5:           }
1:06621c5:         }
1:06621c5:       }
1:06621c5:     }
1:06621c5:     return Collections.unmodifiableSet(results);
1:06621c5:   }
1:06621c5: 
1:06621c5:   public static String contentToString(Content content)
1:06621c5:   {
1:06621c5:     StringBuffer value = new StringBuffer();
1:06621c5:     value.append(content.getContentName());
1:06621c5: 
1:06621c5:     Map<String, String> nvm = content.getNameValueMap();
1:06621c5: 
1:06621c5:     for (Map.Entry<String, String> entry : nvm.entrySet()) {
1:06621c5:       if (entry.getKey().equalsIgnoreCase(Constants.VERSION_ATTRIBUTE) || entry.getKey().equalsIgnoreCase(Constants.BUNDLE_VERSION_ATTRIBUTE)) {
1:06621c5:         value.append(";" + entry.getKey() + "=\"" + entry.getValue() + "\"");
1:06621c5:       } else {
1:06621c5:         value.append(";" + entry.getKey() + "=" + entry.getValue());
1:06621c5:       }
1:06621c5:     }
1:06621c5: 
1:06621c5:     return value.toString();
1:06621c5:   }
1:06621c5:   
1:06621c5:   /**
1:06621c5:    * Calculates which system packages should be flowed 
1:06621c5:    * to a child framework based on what packages the 
1:06621c5:    * child framework imports. Equinox will require anything imported by the 
1:06621c5:    * child framework which is available from the system bundle 
1:06621c5:    * in the parent framework to come from the system bundle 
1:06621c5:    * in the child framework. However, we don't want to flow 
1:06621c5:    * all the extra system packages by default since we want CBAs 
1:06621c5:    * which use them to explicitly import them.
1:06621c5:    * @param importPackage
1:06621c5:    * @return
1:06621c5:    * @throws CompositeBundleCalculateException 
1:06621c5:    */
1:06621c5:   public static String calculateSystemPackagesToFlow(final Collection<Content> systemExports, 
1:06621c5:       final Collection<Content> imports)
1:06621c5:   {
1:06621c5: 
1:06621c5:     // Let's always set javax.transaction as system extra packages because of the split package. 
1:06621c5:     // It is reasonable to do so because we always flow userTransaction service into child framework anyway.
1:de5b346:     Map<String, String> map = new HashMap<String, String>();
1:06621c5:     map.put(EquinoxFrameworkConstants.TRANSACTION_BUNDLE, EquinoxFrameworkConstants.TRANSACTION_BUNDLE_VERSION);
1:06621c5:     Map<String, Map<String, String>> resultMap = new HashMap<String, Map<String, String>>();
1:06621c5:     resultMap.put(EquinoxFrameworkConstants.TRANSACTION_BUNDLE, map);
1:06621c5: 
1:06621c5:     // let's go through the import list to build the resultMap
1:06621c5:     for (Content nvp : imports) {
1:06621c5:       String name = nvp.getContentName().trim();
1:06621c5:       // if it exist in the list of packages exported by the system, we need to add it to the result
1:06621c5:       if (existInExports(name, nvp.getNameValueMap(), systemExports)) {
1:06621c5:         /* We've now ensured the versions match, but not worried too 
1:06621c5:         * much about other constraints like company or any of the 
1:06621c5:         * other things which could be added to a version statement. 
1:06621c5:         * We don't want to flow system packages we don't need to, 
1:06621c5:         * but we're not in the business of provisioning, so we'll
1:06621c5:         * let OSGi decide whether every constraint is satisfied
1:06621c5:         * and resolve the bundle or not, as appropriate.
1:06621c5:         */
1:06621c5: 
1:06621c5:         for (Content nvpp : systemExports) {
1:06621c5:           if (nvpp.getContentName().trim().equals(name)) {
1:06621c5:             Map<String, String> frameworkVersion = nvpp.getNameValueMap();
1:06621c5:             resultMap.put(name, frameworkVersion);
1:06621c5:             // We don't break here since we're too lazy to check the version
1:06621c5:             // again and so we might end up flowing multiple statements for the 
1:06621c5:             // same package (but with different versions). Better this than 
1:06621c5:             // accidentally flowing the wrong version if we hit it first.
1:06621c5:           }
1:06621c5:         }
1:06621c5:       }
1:06621c5:     }
1:06621c5: 
1:06621c5:     StringBuffer result = new StringBuffer();
1:06621c5:     for (String key : resultMap.keySet()) {
1:06621c5:       result.append(getString(key, resultMap) + ",");
1:06621c5:     }
1:06621c5:     String toReturn = trimEndString(result.toString().trim(), ",");
1:06621c5: 
1:06621c5:     return toReturn;
1:06621c5: 
1:06621c5:   }
1:06621c5: 
1:06621c5:   /**
1:06621c5:    * check if the value in nvm already exist in the exports
1:06621c5:    * @param key
1:06621c5:    * @param nvm
1:06621c5:    * @param exports
1:06621c5:    * @return boolean whether the value in nvm already exist in the exports
1:06621c5:    */
1:06621c5:   private static boolean existInExports(String key, Map<String, String> nvm,
1:06621c5:       final Collection<Content> exports)
1:06621c5:   {
1:06621c5:     boolean value = false;
1:06621c5:     for (Content nvp : exports) {
1:06621c5:       if (nvp.getContentName().trim().equals(key.trim())) {
1:06621c5:         // ok key equal.  let's check the version
1:06621c5:         // if version is higher, we still want to import, for example javax.transaction;version=1.1
1:06621c5:         String vi = nvm.get(Constants.VERSION_ATTRIBUTE);
1:06621c5:         String ve = nvp.getNameValueMap().get(Constants.VERSION_ATTRIBUTE);
1:06621c5:         if (vi == null || vi.length() == 0) {
1:06621c5:           vi = "0.0.0";
1:06621c5:         }
1:06621c5: 
1:06621c5:         if (ve == null || ve.length() == 0) {
1:06621c5:           ve = "0.0.0";
1:06621c5:         }
1:06621c5: 
1:06621c5:         if (vi.indexOf(",") == -1) {
1:06621c5: 
1:06621c5:           if (new Version(vi).compareTo(new Version(ve)) <= 0) {
1:06621c5:             // we got it covered in our exports
1:06621c5:             value = true;
1:06621c5:           }
1:06621c5:         } else {
1:06621c5:           // parse vi into version range.
1:06621c5:           VersionRange vri = ManifestHeaderProcessor.parseVersionRange(vi);
1:06621c5:           Version minV = vri.getMinimumVersion();
1:06621c5:           Version maxV = vri.getMaximumVersion();
1:06621c5:           if (minV.compareTo(new Version(ve)) < 0 && maxV.compareTo(new Version(ve)) > 0) {
1:06621c5:             value = true;
1:06621c5:           } else if (minV.compareTo(new Version(ve)) == 0 && !!!vri.isMinimumExclusive()) {
1:06621c5:             value = true;
1:06621c5:           } else if (maxV.compareTo(new Version(ve)) == 0 && !!!vri.isMaximumExclusive()) {
1:06621c5:             value = true;
1:06621c5:           }
1:06621c5:         }
1:06621c5: 
1:06621c5:       }
1:06621c5:     }
1:06621c5:     
1:06621c5:     return value;
1:06621c5:   }
1:06621c5:  
1:06621c5:   private static String trimEndString(String s, String trim)
1:06621c5:   {
1:06621c5:     if (s.startsWith(trim)) {
1:06621c5:       s = s.substring(trim.length());
1:06621c5:     }
1:06621c5:     if (s.endsWith(trim)) {
1:06621c5:       s = s.substring(0, s.length() - trim.length());
1:06621c5:     }
1:06621c5:     return s;
1:06621c5:   }
1:06621c5: 
1:06621c5:   private static String getString(String key, Map<String, Map<String, String>> imports)
1:06621c5:   {
1:06621c5:     StringBuffer value = new StringBuffer();
1:06621c5:     value.append(key);
1:06621c5: 
1:06621c5:     Map<String, String> nvm = imports.get(key);
1:06621c5: 
1:06621c5:     for (Map.Entry<String, String> entry : nvm.entrySet()) {
1:06621c5:       if (entry.getKey().equalsIgnoreCase(Constants.VERSION_ATTRIBUTE) || entry.getKey().equalsIgnoreCase(Constants.BUNDLE_VERSION_ATTRIBUTE)) {
1:06621c5:         value.append(";" + entry.getKey() + "=\"" + entry.getValue() + "\"");
1:06621c5:       } else {
1:06621c5:         value.append(";" + entry.getKey() + "=" + entry.getValue());
1:06621c5:       }
1:06621c5:     }
1:06621c5: 
1:06621c5:     return value.toString();
1:06621c5:   }
1:06621c5: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:de5b346
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         for (NameValuePair nvp : ManifestHeaderProcessor
1:           exports.add(ContentFactory.parseContent(nvp.getName(), nvp.getAttributes()));
/////////////////////////////////////////////////////////////////////////
1:         for (NameValuePair nvp : ManifestHeaderProcessor
1:           extraPkgs.add(ContentFactory.parseContent(nvp.getName(), nvp.getAttributes()));
/////////////////////////////////////////////////////////////////////////
1:     Map<String, String> map = new HashMap<String, String>();
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.utils.manifest.ContentFactory;
1: import org.apache.aries.util.VersionRange;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValueMap;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;
/////////////////////////////////////////////////////////////////////////
0:           exports.add(ContentFactory.parseContent(nvp.getName(), nvp.getValue()));
/////////////////////////////////////////////////////////////////////////
0:           extraPkgs.add(ContentFactory.parseContent(nvp.getName(), nvp.getValue()));
author:Chris Wilkinson
-------------------------------------------------------------------------------
commit:06621c5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.runtime.framework.utils;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.aries.application.Content;
0: import org.apache.aries.application.VersionRange;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValuePair;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: 
1: public class EquinoxFrameworkUtils
1: {
1: 
1:   public static Collection<Content> getExportPackages(BundleContext isolatedBundleContext)
1:   {
1:     Set<Content> exports = new HashSet<Content>();
1: 
1:     Bundle sysBundle = isolatedBundleContext.getBundle(0);
1:     if (sysBundle != null && sysBundle.getHeaders() != null) {
1:       String exportString = (String) sysBundle.getHeaders().get(Constants.EXPORT_PACKAGE);
1:       if (exportString != null) {
0:         for (NameValuePair<String, NameValueMap<String, String>> nvp : ManifestHeaderProcessor
1:             .parseExportString(exportString))
0:           exports.add(ManifestHeaderProcessor.parseContent(nvp.getName(), nvp.getValue()));
1:       }
1:     }
1:     return Collections.unmodifiableSet(exports);
1:   }
1:   
1:   public static Collection<Content> getSystemExtraPkgs(BundleContext context)
1:   {
1:     Set<Content> extraPkgs = new HashSet<Content>();
1:     
1:       String exportString = context.getProperty(Constants.FRAMEWORK_SYSTEMPACKAGES_EXTRA);
1:       if (exportString != null) {
0:         for (NameValuePair<String, NameValueMap<String, String>> nvp : ManifestHeaderProcessor
1:             .parseExportString(exportString))
0:           extraPkgs.add(ManifestHeaderProcessor.parseContent(nvp.getName(), nvp.getValue()));
1:       }
1:     
1:     return Collections.unmodifiableSet(extraPkgs);
1:   }
1: 
1:   public static Collection<Content> calculateImports(final Collection<Content> importPackage,
1:       final Collection<Content> exportPackages)
1:   {
1:     Set<Content> results = new HashSet<Content>();
1:     if (importPackage != null && !importPackage.isEmpty()) {
1:       for (Content exportPkg : exportPackages) {
1:         for (Content importPkg : importPackage) {
1:           if (!(importPkg.getContentName().equals(exportPkg.getContentName())
1:               && importPkg.getVersion().equals(exportPkg.getVersion()))) {
1:             results.add(importPkg);
1:           }
1:         }
1:       }
1:     }
1:     return Collections.unmodifiableSet(results);
1:   }
1: 
1:   public static String contentToString(Content content)
1:   {
1:     StringBuffer value = new StringBuffer();
1:     value.append(content.getContentName());
1: 
1:     Map<String, String> nvm = content.getNameValueMap();
1: 
1:     for (Map.Entry<String, String> entry : nvm.entrySet()) {
1:       if (entry.getKey().equalsIgnoreCase(Constants.VERSION_ATTRIBUTE) || entry.getKey().equalsIgnoreCase(Constants.BUNDLE_VERSION_ATTRIBUTE)) {
1:         value.append(";" + entry.getKey() + "=\"" + entry.getValue() + "\"");
1:       } else {
1:         value.append(";" + entry.getKey() + "=" + entry.getValue());
1:       }
1:     }
1: 
1:     return value.toString();
1:   }
1:   
1:   /**
1:    * Calculates which system packages should be flowed 
1:    * to a child framework based on what packages the 
1:    * child framework imports. Equinox will require anything imported by the 
1:    * child framework which is available from the system bundle 
1:    * in the parent framework to come from the system bundle 
1:    * in the child framework. However, we don't want to flow 
1:    * all the extra system packages by default since we want CBAs 
1:    * which use them to explicitly import them.
1:    * @param importPackage
1:    * @return
1:    * @throws CompositeBundleCalculateException 
1:    */
1:   public static String calculateSystemPackagesToFlow(final Collection<Content> systemExports, 
1:       final Collection<Content> imports)
1:   {
1: 
1:     // Let's always set javax.transaction as system extra packages because of the split package. 
1:     // It is reasonable to do so because we always flow userTransaction service into child framework anyway.
0:     NameValueMap<String, String> map = new NameValueMap<String, String>();
1:     map.put(EquinoxFrameworkConstants.TRANSACTION_BUNDLE, EquinoxFrameworkConstants.TRANSACTION_BUNDLE_VERSION);
1:     Map<String, Map<String, String>> resultMap = new HashMap<String, Map<String, String>>();
1:     resultMap.put(EquinoxFrameworkConstants.TRANSACTION_BUNDLE, map);
1: 
1:     // let's go through the import list to build the resultMap
1:     for (Content nvp : imports) {
1:       String name = nvp.getContentName().trim();
1:       // if it exist in the list of packages exported by the system, we need to add it to the result
1:       if (existInExports(name, nvp.getNameValueMap(), systemExports)) {
1:         /* We've now ensured the versions match, but not worried too 
1:         * much about other constraints like company or any of the 
1:         * other things which could be added to a version statement. 
1:         * We don't want to flow system packages we don't need to, 
1:         * but we're not in the business of provisioning, so we'll
1:         * let OSGi decide whether every constraint is satisfied
1:         * and resolve the bundle or not, as appropriate.
1:         */
1: 
1:         for (Content nvpp : systemExports) {
1:           if (nvpp.getContentName().trim().equals(name)) {
1:             Map<String, String> frameworkVersion = nvpp.getNameValueMap();
1:             resultMap.put(name, frameworkVersion);
1:             // We don't break here since we're too lazy to check the version
1:             // again and so we might end up flowing multiple statements for the 
1:             // same package (but with different versions). Better this than 
1:             // accidentally flowing the wrong version if we hit it first.
1:           }
1:         }
1:       }
1:     }
1: 
1:     StringBuffer result = new StringBuffer();
1:     for (String key : resultMap.keySet()) {
1:       result.append(getString(key, resultMap) + ",");
1:     }
1:     String toReturn = trimEndString(result.toString().trim(), ",");
1: 
1:     return toReturn;
1: 
1:   }
1: 
1:   /**
1:    * check if the value in nvm already exist in the exports
1:    * @param key
1:    * @param nvm
1:    * @param exports
1:    * @return boolean whether the value in nvm already exist in the exports
1:    */
1:   private static boolean existInExports(String key, Map<String, String> nvm,
1:       final Collection<Content> exports)
1:   {
1:     boolean value = false;
1:     for (Content nvp : exports) {
1:       if (nvp.getContentName().trim().equals(key.trim())) {
1:         // ok key equal.  let's check the version
1:         // if version is higher, we still want to import, for example javax.transaction;version=1.1
1:         String vi = nvm.get(Constants.VERSION_ATTRIBUTE);
1:         String ve = nvp.getNameValueMap().get(Constants.VERSION_ATTRIBUTE);
1:         if (vi == null || vi.length() == 0) {
1:           vi = "0.0.0";
1:         }
1: 
1:         if (ve == null || ve.length() == 0) {
1:           ve = "0.0.0";
1:         }
1: 
1:         if (vi.indexOf(",") == -1) {
1: 
1:           if (new Version(vi).compareTo(new Version(ve)) <= 0) {
1:             // we got it covered in our exports
1:             value = true;
1:           }
1:         } else {
1:           // parse vi into version range.
1:           VersionRange vri = ManifestHeaderProcessor.parseVersionRange(vi);
1:           Version minV = vri.getMinimumVersion();
1:           Version maxV = vri.getMaximumVersion();
1:           if (minV.compareTo(new Version(ve)) < 0 && maxV.compareTo(new Version(ve)) > 0) {
1:             value = true;
1:           } else if (minV.compareTo(new Version(ve)) == 0 && !!!vri.isMinimumExclusive()) {
1:             value = true;
1:           } else if (maxV.compareTo(new Version(ve)) == 0 && !!!vri.isMaximumExclusive()) {
1:             value = true;
1:           }
1:         }
1: 
1:       }
1:     }
1:     
1:     return value;
1:   }
1:  
1:   private static String trimEndString(String s, String trim)
1:   {
1:     if (s.startsWith(trim)) {
1:       s = s.substring(trim.length());
1:     }
1:     if (s.endsWith(trim)) {
1:       s = s.substring(0, s.length() - trim.length());
1:     }
1:     return s;
1:   }
1: 
1:   private static String getString(String key, Map<String, Map<String, String>> imports)
1:   {
1:     StringBuffer value = new StringBuffer();
1:     value.append(key);
1: 
1:     Map<String, String> nvm = imports.get(key);
1: 
1:     for (Map.Entry<String, String> entry : nvm.entrySet()) {
1:       if (entry.getKey().equalsIgnoreCase(Constants.VERSION_ATTRIBUTE) || entry.getKey().equalsIgnoreCase(Constants.BUNDLE_VERSION_ATTRIBUTE)) {
1:         value.append(";" + entry.getKey() + "=\"" + entry.getValue() + "\"");
1:       } else {
1:         value.append(";" + entry.getKey() + "=" + entry.getValue());
1:       }
1:     }
1: 
1:     return value.toString();
1:   }
1: }
============================================================================