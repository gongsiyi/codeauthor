1:e22d71c: /*
1:e22d71c:  * Licensed to the Apache Software Foundation (ASF) under one
1:e22d71c:  * or more contributor license agreements.  See the NOTICE file
1:e22d71c:  * distributed with this work for additional information
1:e22d71c:  * regarding copyright ownership.  The ASF licenses this file
1:e22d71c:  * to you under the Apache License, Version 2.0 (the
1:e22d71c:  * "License"); you may not use this file except in compliance
1:e22d71c:  * with the License.  You may obtain a copy of the License at
1:e22d71c:  *
1:e22d71c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e22d71c:  *
1:e22d71c:  * Unless required by applicable law or agreed to in writing,
1:e22d71c:  * software distributed under the License is distributed on an
1:e22d71c:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:e22d71c:  * KIND, either express or implied.  See the License for the
1:e22d71c:  * specific language governing permissions and limitations
1:e22d71c:  * under the License.
1:e22d71c:  */
1:e22d71c: package org.apache.aries.application.management.spi.resolve;
1:e22d71c: 
1:e22d71c: import java.util.Collection;
1:e22d71c: 
1:e22d71c: import org.apache.aries.application.modelling.ModelledResource;
1:e22d71c: 
1:e22d71c: /**
1:e22d71c:  * This interface allows a pre resolve hook to add customizats
1:e22d71c:  * into the OBR resolve operation.
1:e22d71c:  */
1:e22d71c: public interface PreResolveHook 
1:e22d71c: {
1:e22d71c:   /**
1:e22d71c:    * Depending on the environment it may be necessary to add
1:e22d71c:    * resources to the resolve operation which you do not wish
1:e22d71c:    * to provision. These may be resources that already exist 
1:e22d71c:    * and are available, or are sourced in a different way. Any
1:e22d71c:    * resources returned by this method are resolved against, but
1:e22d71c:    * not placed in the deployment.mf. This may result in problems
1:e22d71c:    * if a fake resource is provided, but the capabilities are not
1:e22d71c:    * provided at runtime.
1:e22d71c:    * 
1:e22d71c:    * @param resources A mutable collection of ModelledResources that can have
1:e22d71c:    *                  more elements added or removed.
1:e22d71c:    */
1:e22d71c:   public void collectFakeResources(Collection<ModelledResource> resources);
1:e22d71c: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:e22d71c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.management.spi.resolve;
1: 
1: import java.util.Collection;
1: 
1: import org.apache.aries.application.modelling.ModelledResource;
1: 
1: /**
1:  * This interface allows a pre resolve hook to add customizats
1:  * into the OBR resolve operation.
1:  */
1: public interface PreResolveHook 
1: {
1:   /**
1:    * Depending on the environment it may be necessary to add
1:    * resources to the resolve operation which you do not wish
1:    * to provision. These may be resources that already exist 
1:    * and are available, or are sourced in a different way. Any
1:    * resources returned by this method are resolved against, but
1:    * not placed in the deployment.mf. This may result in problems
1:    * if a fake resource is provided, but the capabilities are not
1:    * provided at runtime.
1:    * 
1:    * @param resources A mutable collection of ModelledResources that can have
1:    *                  more elements added or removed.
1:    */
1:   public void collectFakeResources(Collection<ModelledResource> resources);
1: }
============================================================================