1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:bd2f017: package org.apache.aries.subsystem.core.internal;
3:bd2f017: 
1:bd2f017: import java.util.Collection;
1:bd2f017: import java.util.HashSet;
1:bd2f017: 
1:bd2f017: import org.osgi.framework.Version;
1:bd2f017: import org.osgi.service.subsystem.Subsystem;
1:bd2f017: 
1:bd2f017: public class TargetRegion {
1:bd2f017: 	Collection<Subsystem> region = new HashSet<Subsystem>();
1:bd2f017: 
1:5bd3bf6: 	public TargetRegion(BasicSubsystem subsystem) {
1:52b079f: 		// Find the scoped subsystem that controls the region.
1:a990e32: 		while (!subsystem.isScoped()) {
1:a990e32: 			subsystem = (BasicSubsystem) subsystem.getParents().iterator().next();
1:a990e32: 		}
1:a990e32: 		// All children of the scoped subsystem controlling the region are
1:a990e32: 		// part of the target region, even those that are scoped subsystems.
1:a990e32: 		add(subsystem.getChildren());
5:bd2f017: 	}
1:52b079f: 
1:bd2f017: 	public boolean contains(Subsystem subsystem) {
1:a990e32: 		return find(subsystem.getSymbolicName(), subsystem.getVersion()) != null;
1:bd2f017: 	}
1:bd2f017: 	
1:bd2f017: 	public Subsystem find(String symbolicName, Version version) {
2:bd2f017: 		for (Subsystem s : region) {
1:bd2f017: 			if (s.getSymbolicName().equals(symbolicName)
1:bd2f017: 					&& s.getVersion().equals(version))
1:bd2f017: 				return s;
1:bd2f017: 		}
1:bd2f017: 		return null;
1:bd2f017: 	}
1:52b079f: 	
1:a990e32: 	private void add(Collection<Subsystem> children) {
1:a990e32: 		for (Subsystem child : children) {
1:52b079f: 			region.add(child);
1:a990e32: 			if (((BasicSubsystem) child).isScoped()) {
1:a990e32: 				// Children of scoped children are not part of the target region.
1:a990e32: 				continue;
1:52b079f: 			}
1:a990e32: 			// Children of unscoped children are part of the target region.
1:a990e32: 			add(child.getChildren());
1:a990e32: 		}
1:52b079f: 	}
1:bd2f017: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1: 		while (!subsystem.isScoped()) {
1: 			subsystem = (BasicSubsystem) subsystem.getParents().iterator().next();
1: 		}
1: 		// All children of the scoped subsystem controlling the region are
1: 		// part of the target region, even those that are scoped subsystems.
1: 		add(subsystem.getChildren());
1: 		return find(subsystem.getSymbolicName(), subsystem.getVersion()) != null;
/////////////////////////////////////////////////////////////////////////
1: 	private void add(Collection<Subsystem> children) {
1: 		for (Subsystem child : children) {
1: 			if (((BasicSubsystem) child).isScoped()) {
1: 				// Children of scoped children are not part of the target region.
1: 				continue;
1: 			// Children of unscoped children are part of the target region.
1: 			add(child.getChildren());
1: 		}
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	public TargetRegion(BasicSubsystem subsystem) {
0: 		BasicSubsystem controllingScopedSubsystem = subsystem;
0: 			controllingScopedSubsystem = (BasicSubsystem)subsystem.getParents().iterator().next();
/////////////////////////////////////////////////////////////////////////
0: 	private void addChildrenToRegion(BasicSubsystem controllingScopedSubsystem) {
0: 			if (((BasicSubsystem)child).isFeature())
0: 				addFeatureDescendentsToRegion((BasicSubsystem)child);
0: 	private void addFeatureDescendentsToRegion(BasicSubsystem parent) {
0: 			if (((BasicSubsystem)child).isFeature()) {
0: 				addFeatureDescendentsToRegion((BasicSubsystem)child);
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:52b079f
/////////////////////////////////////////////////////////////////////////
0: 	public TargetRegion(AriesSubsystem subsystem) {
1: 		// Find the scoped subsystem that controls the region.
0: 		AriesSubsystem controllingScopedSubsystem = subsystem;
0: 		while (controllingScopedSubsystem.isFeature())
0: 			controllingScopedSubsystem = (AriesSubsystem)subsystem.getParents().iterator().next();
0: 		// The scoped subsystem controlling the region is part of the region.
0: 		region.add(controllingScopedSubsystem);
0: 		// All children of the scoped subsystem are part of the region. If the
0: 		// child is a feature, then all descendants of the child that are
0: 		// features and part of an unbroken line of features are part of the
0: 		// region.
0: 		addChildrenToRegion(controllingScopedSubsystem);
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	private void addChildrenToRegion(AriesSubsystem controllingScopedSubsystem) {
0: 		for (Subsystem child : controllingScopedSubsystem.getChildren()) {
0: 			// If the child is a feature, all of its children that are features
0: 			// must be added as well.
0: 			if (((AriesSubsystem)child).isFeature())
0: 				addFeatureDescendentsToRegion((AriesSubsystem)child);
1: 	
0: 	private void addFeatureDescendentsToRegion(AriesSubsystem parent) {
0: 		for (Subsystem child : parent.getChildren())
0: 			// If the descendant is not a feature, skip it.
0: 			if (((AriesSubsystem)child).isFeature()) {
1: 				region.add(child);
0: 				// All descendants that are features and part of an unbroken
0: 				// line of features must be added.
0: 				addFeatureDescendentsToRegion((AriesSubsystem)child);
1: 			}
1: 	}
commit:bd2f017
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.Collection;
1: import java.util.HashSet;
1: 
1: import org.osgi.framework.Version;
1: import org.osgi.service.subsystem.Subsystem;
0: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: public class TargetRegion {
1: 	Collection<Subsystem> region = new HashSet<Subsystem>();
1: 
0: 	public TargetRegion(AriesSubsystem target) {
0: 		region.add(target);
0: 		addToRegion(target.getChildren());
1: 	}
1: 
1: 	public boolean contains(Subsystem subsystem) {
1: 		for (Subsystem s : region) {
0: 			if (s.getSymbolicName().equals(subsystem.getSymbolicName())
0: 					&& s.getVersion().equals(subsystem.getVersion()))
0: 				return true;
1: 		}
0: 		return false;
1: 	}
1: 	
1: 	public Subsystem find(String symbolicName, Version version) {
1: 		for (Subsystem s : region) {
1: 			if (s.getSymbolicName().equals(symbolicName)
1: 					&& s.getVersion().equals(version))
1: 				return s;
1: 		}
1: 		return null;
1: 	}
1: 
0: 	private void addToRegion(Collection<Subsystem> children) {
0: 		for (Subsystem child : children) {
0: 			if (SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(child
0: 					.getSubsystemHeaders(null).get(
0: 							SubsystemConstants.SUBSYSTEM_TYPE))) {
0: 				addToRegion(child.getChildren());
1: 			}
0: 			region.add(child);
1: 		}
1: 	}
1: }
============================================================================