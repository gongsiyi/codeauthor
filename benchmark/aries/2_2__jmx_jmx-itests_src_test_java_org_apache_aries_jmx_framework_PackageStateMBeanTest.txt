1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
3:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.framework;
2:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertFalse;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:fdf3952: import static org.junit.Assert.assertNull;
1:fdf3952: import static org.junit.Assert.assertTrue;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.options;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: import java.util.Collection;
1:5040e04: import java.util.Hashtable;
1:5040e04: import java.util.Set;
1:fdf3952: 
1:fdf3952: import javax.management.ObjectName;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.AbstractIntegrationTest;
1:0a8778f: import org.junit.Before;
1:fdf3952: import org.junit.Test;
1:0a8778f: import org.ops4j.pax.exam.Configuration;
1:fdf3952: import org.ops4j.pax.exam.Option;
1:5040e04: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.jmx.framework.PackageStateMBean;
1:fdf3952: 
1:fdf3952: /**
1:bf5a863:  *
1:bf5a863:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class PackageStateMBeanTest extends AbstractIntegrationTest {
1:fdf3952: 
1:fdf3952:     @Configuration
1:0a8778f:     public Option[] configuration() {
1:0a8778f:         return options(
1:0a8778f:         		jmxRuntime(),
1:0a8778f:         		bundlea()
1:0a8778f:         		);
1:fdf3952:     }
1:fdf3952: 
1:0a8778f:     @Before
1:0a8778f:     public void doSetUp() {
1:0a8778f:         waitForMBean(PackageStateMBean.OBJECTNAME);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:5040e04:     public void testObjectName() throws Exception {
1:5040e04:         Set<ObjectName> names = mbeanServer.queryNames(new ObjectName(PackageStateMBean.OBJECTNAME + ",*"), null);
1:5040e04:         assertEquals(1, names.size());
1:5040e04:         ObjectName name = names.iterator().next();
1:5040e04:         Hashtable<String, String> props = name.getKeyPropertyList();
1:5040e04:         assertEquals(context().getProperty(Constants.FRAMEWORK_UUID), props.get("uuid"));
1:5040e04:         assertEquals(context().getBundle(0).getSymbolicName(), props.get("framework"));
1:5040e04:     }
1:5040e04: 
1:5040e04:     @Test
1:fdf3952:     public void testMBeanInterface() throws IOException {
1:fdf3952:         PackageStateMBean packagaState = getMBean(PackageStateMBean.OBJECTNAME, PackageStateMBean.class);
1:fdf3952:         assertNotNull(packagaState);
1:bf5a863: 
1:c4235e1:         long[] exportingBundles = packagaState.getExportingBundles("org.osgi.jmx.framework", "1.7.0");
1:fdf3952:         assertNotNull(exportingBundles);
1:fdf3952:         assertTrue("Should find a bundle exporting org.osgi.jmx.framework", exportingBundles.length > 0);
1:fdf3952: 
1:fdf3952:         long[] exportingBundles2 = packagaState.getExportingBundles("test", "1.0.0");
1:fdf3952:         assertNull("Shouldn't find a bundle exporting test package", exportingBundles2);
1:fdf3952: 
1:fdf3952:         long[] importingBundlesId = packagaState
1:c4235e1:                 .getImportingBundles("org.osgi.jmx.framework", "1.7.0", exportingBundles[0]);
1:fdf3952:         assertTrue("Should find bundles importing org.osgi.jmx.framework", importingBundlesId.length > 0);
1:fdf3952: 
1:fdf3952:         TabularData table = packagaState.listPackages();
1:fdf3952:         assertNotNull("TabularData containing CompositeData with packages info shouldn't be null", table);
1:fdf3952:         assertEquals("TabularData should be a type PACKAGES", PackageStateMBean.PACKAGES_TYPE, table.getTabularType());
1:0a8778f:         Collection<?> colData = table.values();
1:fdf3952:         assertNotNull("Collection of CompositeData shouldn't be null", colData);
1:fdf3952:         assertFalse("Collection of CompositeData should contain elements", colData.isEmpty());
1:fdf3952: 
1:c4235e1:         boolean isRemovalPending = packagaState.isRemovalPending("org.osgi.jmx.framework", "1.7.0", exportingBundles[0]);
1:fdf3952:         assertFalse("Should removal pending on org.osgi.jmx.framework be false", isRemovalPending);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.options;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.ops4j.pax.exam.Configuration;
/////////////////////////////////////////////////////////////////////////
1:     public Option[] configuration() {
1:         return options(
1:         		jmxRuntime(),
1:         		bundlea()
1:         		);
1:     @Before
1:     public void doSetUp() {
1:         waitForMBean(PackageStateMBean.OBJECTNAME);
/////////////////////////////////////////////////////////////////////////
1:         Collection<?> colData = table.values();
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:bf86346
/////////////////////////////////////////////////////////////////////////
0:             CoreOptions.equinox().version("3.8.0.V20120529-1548"),
commit:c4235e1
/////////////////////////////////////////////////////////////////////////
1:         long[] exportingBundles = packagaState.getExportingBundles("org.osgi.jmx.framework", "1.7.0");
/////////////////////////////////////////////////////////////////////////
1:                 .getImportingBundles("org.osgi.jmx.framework", "1.7.0", exportingBundles[0]);
/////////////////////////////////////////////////////////////////////////
1:         boolean isRemovalPending = packagaState.isRemovalPending("org.osgi.jmx.framework", "1.7.0", exportingBundles[0]);
commit:5040e04
/////////////////////////////////////////////////////////////////////////
1: import java.util.Hashtable;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Constants;
/////////////////////////////////////////////////////////////////////////
1:     public void testObjectName() throws Exception {
1:         Set<ObjectName> names = mbeanServer.queryNames(new ObjectName(PackageStateMBean.OBJECTNAME + ",*"), null);
1:         assertEquals(1, names.size());
1:         ObjectName name = names.iterator().next();
1:         Hashtable<String, String> props = name.getKeyPropertyList();
1:         assertEquals(context().getProperty(Constants.FRAMEWORK_UUID), props.get("uuid"));
1:         assertEquals(context().getBundle(0).getSymbolicName(), props.get("framework"));
1:     }
1: 
1:     @Test
commit:bf5a863
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0:             PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
0:             CoreOptions.equinox().version("3.7.0.v20110613"),
/////////////////////////////////////////////////////////////////////////
1: 
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
0: import static org.apache.aries.itest.ExtraOptions.*;
1: 
1: import java.io.IOException;
1: import java.util.Collection;
1: 
1: import javax.management.ObjectName;
1: import javax.management.openmbean.TabularData;
1: 
1: import org.apache.aries.jmx.AbstractIntegrationTest;
1: import org.junit.Test;
0: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.Configuration;
1: import org.osgi.jmx.framework.PackageStateMBean;
1: 
1: /**
1:  * 
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class PackageStateMBeanTest extends AbstractIntegrationTest {
1: 
1:     @Configuration
0:     public static Option[] configuration() {
0:         return testOptions(
0:             CoreOptions.equinox(), 
0:             paxLogging("INFO"),
0:             mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx"),
0:             mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.api"),
0:             mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.whiteboard"),
0:             mavenBundle("org.apache.aries", "org.apache.aries.util"));
1:     }
1: 
0:     @Override
0:     public void doSetUp() throws Exception {
0:         waitForMBean(new ObjectName(PackageStateMBean.OBJECTNAME));
1:     }
1: 
1:     @Test
1:     public void testMBeanInterface() throws IOException {
1:         PackageStateMBean packagaState = getMBean(PackageStateMBean.OBJECTNAME, PackageStateMBean.class);
1:         assertNotNull(packagaState);
1:         
0:         long[] exportingBundles = packagaState.getExportingBundles("org.osgi.jmx.framework", "1.5.0");
1:         assertNotNull(exportingBundles);
1:         assertTrue("Should find a bundle exporting org.osgi.jmx.framework", exportingBundles.length > 0);
1: 
1:         long[] exportingBundles2 = packagaState.getExportingBundles("test", "1.0.0");
1:         assertNull("Shouldn't find a bundle exporting test package", exportingBundles2);
1: 
1:         long[] importingBundlesId = packagaState
0:                 .getImportingBundles("org.osgi.jmx.framework", "1.5.0", exportingBundles[0]);
1:         assertTrue("Should find bundles importing org.osgi.jmx.framework", importingBundlesId.length > 0);
1: 
1:         TabularData table = packagaState.listPackages();
1:         assertNotNull("TabularData containing CompositeData with packages info shouldn't be null", table);
1:         assertEquals("TabularData should be a type PACKAGES", PackageStateMBean.PACKAGES_TYPE, table.getTabularType());
0:         Collection colData = table.values();
1:         assertNotNull("Collection of CompositeData shouldn't be null", colData);
1:         assertFalse("Collection of CompositeData should contain elements", colData.isEmpty());
1: 
0:         boolean isRemovalPending = packagaState.isRemovalPending("org.osgi.jmx.framework", "1.5.0", exportingBundles[0]);
1:         assertFalse("Should removal pending on org.osgi.jmx.framework be false", isRemovalPending);
1:     }
1: 
1: }
============================================================================