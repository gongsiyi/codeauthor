1:7c388cb: /*
1:7c388cb:  * Licensed to the Apache Software Foundation (ASF) under one
1:7c388cb:  * or more contributor license agreements.  See the NOTICE file
1:7c388cb:  * distributed with this work for additional information
1:7c388cb:  * regarding copyright ownership.  The ASF licenses this file
1:7c388cb:  * to you under the Apache License, Version 2.0 (the
1:7c388cb:  * "License"); you may not use this file except in compliance
1:7c388cb:  * with the License.  You may obtain a copy of the License at
1:7c388cb:  *
1:7c388cb:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7c388cb:  *
1:7c388cb:  * Unless required by applicable law or agreed to in writing,
1:7c388cb:  * software distributed under the License is distributed on an
1:7c388cb:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:7c388cb:  * KIND, either express or implied.  See the License for the
1:7c388cb:  * specific language governing permissions and limitations
1:7c388cb:  * under the License.
1:7c388cb:  */
1:7c388cb: package org.apache.aries.tx.control.resource.common.impl;
1:7c388cb: 
1:7c388cb: import static java.util.Optional.ofNullable;
1:7c388cb: 
1:7c388cb: import java.util.Dictionary;
1:7c388cb: import java.util.Enumeration;
1:7c388cb: import java.util.HashMap;
1:7c388cb: import java.util.Map;
1:7c388cb: import java.util.concurrent.ConcurrentHashMap;
1:7c388cb: 
1:7c388cb: import org.osgi.framework.BundleContext;
1:7c388cb: import org.osgi.service.cm.ConfigurationException;
1:7c388cb: import org.osgi.service.cm.ManagedServiceFactory;
1:7c388cb: import org.slf4j.Logger;
1:7c388cb: import org.slf4j.LoggerFactory;
1:7c388cb: 
1:7c388cb: public abstract class ConfigurationDefinedResourceFactory implements ManagedServiceFactory {
1:7c388cb: 
1:7c388cb: 	private static final Logger LOG = LoggerFactory.getLogger(ConfigurationDefinedResourceFactory.class);
1:7c388cb: 	
1:7c388cb: 	private final Map<String, LifecycleAware> managedInstances = new ConcurrentHashMap<>();
1:7c388cb: 
1:7c388cb: 	private final BundleContext context;
1:7c388cb: 
1:7c388cb: 	public ConfigurationDefinedResourceFactory(BundleContext context) {
1:7c388cb: 		this.context = context;
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	@Override
1:7c388cb: 	public void updated(String pid, Dictionary<String, ?> properties) throws ConfigurationException {
1:7c388cb: 
1:7c388cb: 		Map<String, Object> propsMap = new HashMap<>();
1:7c388cb: 
1:7c388cb: 		Enumeration<String> keys = properties.keys();
1:7c388cb: 		while (keys.hasMoreElements()) {
1:7c388cb: 			String key = keys.nextElement();
1:7c388cb: 			propsMap.put(key, properties.get(key));
1:7c388cb: 		}
1:7c388cb: 
1:7c388cb: 		try {
1:7c388cb: 			LifecycleAware existing = managedInstances.get(pid);
1:7c388cb: 			
1:7c388cb: 			LifecycleAware cdr;
1:7c388cb: 			if(existing != null) {
1:7c388cb: 				if(existing.update(propsMap)) {
1:7c388cb: 					LOG.debug("The Configuration driven resource with pid {} updated successfully", pid);
1:7c388cb: 					return;
1:7c388cb: 				}
1:7c388cb: 				closeCDR(pid, existing);
1:7c388cb: 				
1:7c388cb: 				cdr = getConfigurationDrivenResource(context, pid, propsMap);
1:7c388cb: 				if(!managedInstances.replace(pid, existing, cdr)) {
1:7c388cb: 					// We lost this race
1:7c388cb: 					return;
1:7c388cb: 				}
1:7c388cb: 			} else {
1:7c388cb: 				cdr = getConfigurationDrivenResource(context, pid, propsMap);
1:7c388cb: 				if(managedInstances.putIfAbsent(pid, cdr) != null) {
1:7c388cb: 					// We lost this race
1:7c388cb: 					return;
1:7c388cb: 				}
1:7c388cb: 			}
1:7c388cb: 			
1:7c388cb: 			cdr.start();
1:7c388cb: 		} catch (Exception e) {
1:7c388cb: 			LOG.error("The configuration driven resource for pid {} encountered a failure", pid, e);
1:7c388cb: 			
1:7c388cb: 			if(e instanceof ConfigurationException) {
1:7c388cb: 				throw (ConfigurationException) e;
1:7c388cb: 			} else {
1:7c388cb: 				throw new ConfigurationException(null, "A failure occured configuring the resource for pid " + pid, e);
1:7c388cb: 			}
1:7c388cb: 		}
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	protected abstract LifecycleAware getConfigurationDrivenResource(BundleContext context, 
1:7c388cb: 			String pid, Map<String, Object> properties) throws Exception;
1:7c388cb: 
1:7c388cb: 	public void stop() {
1:7c388cb: 		managedInstances.entrySet().forEach(e -> closeCDR(e.getKey(), e.getValue()));
1:7c388cb: 	}
1:7c388cb: 	
1:7c388cb: 	private void closeCDR(String pid, LifecycleAware cdr) {
1:7c388cb: 		try {
1:7c388cb: 			cdr.stop();
1:7c388cb: 		} catch (Exception ex) {
1:7c388cb: 			LOG.warn("There was an error stopping Configuration Driven Resource {}", pid, ex);
1:7c388cb: 		}
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	@Override
1:7c388cb: 	public void deleted(String pid) {
1:7c388cb: 		ofNullable(managedInstances.remove(pid))
1:7c388cb: 			.ifPresent(cdr -> closeCDR(pid, cdr));
1:7c388cb: 	}
1:7c388cb: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7c388cb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.resource.common.impl;
1: 
1: import static java.util.Optional.ofNullable;
1: 
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.cm.ManagedServiceFactory;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public abstract class ConfigurationDefinedResourceFactory implements ManagedServiceFactory {
1: 
1: 	private static final Logger LOG = LoggerFactory.getLogger(ConfigurationDefinedResourceFactory.class);
1: 	
1: 	private final Map<String, LifecycleAware> managedInstances = new ConcurrentHashMap<>();
1: 
1: 	private final BundleContext context;
1: 
1: 	public ConfigurationDefinedResourceFactory(BundleContext context) {
1: 		this.context = context;
1: 	}
1: 
1: 	@Override
1: 	public void updated(String pid, Dictionary<String, ?> properties) throws ConfigurationException {
1: 
1: 		Map<String, Object> propsMap = new HashMap<>();
1: 
1: 		Enumeration<String> keys = properties.keys();
1: 		while (keys.hasMoreElements()) {
1: 			String key = keys.nextElement();
1: 			propsMap.put(key, properties.get(key));
1: 		}
1: 
1: 		try {
1: 			LifecycleAware existing = managedInstances.get(pid);
1: 			
1: 			LifecycleAware cdr;
1: 			if(existing != null) {
1: 				if(existing.update(propsMap)) {
1: 					LOG.debug("The Configuration driven resource with pid {} updated successfully", pid);
1: 					return;
1: 				}
1: 				closeCDR(pid, existing);
1: 				
1: 				cdr = getConfigurationDrivenResource(context, pid, propsMap);
1: 				if(!managedInstances.replace(pid, existing, cdr)) {
1: 					// We lost this race
1: 					return;
1: 				}
1: 			} else {
1: 				cdr = getConfigurationDrivenResource(context, pid, propsMap);
1: 				if(managedInstances.putIfAbsent(pid, cdr) != null) {
1: 					// We lost this race
1: 					return;
1: 				}
1: 			}
1: 			
1: 			cdr.start();
1: 		} catch (Exception e) {
1: 			LOG.error("The configuration driven resource for pid {} encountered a failure", pid, e);
1: 			
1: 			if(e instanceof ConfigurationException) {
1: 				throw (ConfigurationException) e;
1: 			} else {
1: 				throw new ConfigurationException(null, "A failure occured configuring the resource for pid " + pid, e);
1: 			}
1: 		}
1: 	}
1: 
1: 	protected abstract LifecycleAware getConfigurationDrivenResource(BundleContext context, 
1: 			String pid, Map<String, Object> properties) throws Exception;
1: 
1: 	public void stop() {
1: 		managedInstances.entrySet().forEach(e -> closeCDR(e.getKey(), e.getValue()));
1: 	}
1: 	
1: 	private void closeCDR(String pid, LifecycleAware cdr) {
1: 		try {
1: 			cdr.stop();
1: 		} catch (Exception ex) {
1: 			LOG.warn("There was an error stopping Configuration Driven Resource {}", pid, ex);
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public void deleted(String pid) {
1: 		ofNullable(managedInstances.remove(pid))
1: 			.ifPresent(cdr -> closeCDR(pid, cdr));
1: 	}
1: }
============================================================================