1:0adda31: /*
1:0adda31:  * Licensed to the Apache Software Foundation (ASF) under one
1:0adda31:  * or more contributor license agreements.  See the NOTICE file
1:0adda31:  * distributed with this work for additional information
1:0adda31:  * regarding copyright ownership.  The ASF licenses this file
1:0adda31:  * to you under the Apache License, Version 2.0 (the
1:0adda31:  * "License"); you may not use this file except in compliance
1:0adda31:  * with the License.  You may obtain a copy of the License at
1:0adda31:  *
1:0adda31:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0adda31:  *
1:0adda31:  * Unless required by applicable law or agreed to in writing,
1:0adda31:  * software distributed under the License is distributed on an
1:0adda31:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:0adda31:  * KIND, either express or implied.  See the License for the
1:0adda31:  * specific language governing permissions and limitations
1:0adda31:  * under the License.
1:0adda31:  */
1:d80741a: package org.apache.aries.web.converter.impl;
9:0adda31: 
1:0adda31: import static org.junit.Assert.assertEquals;
1:0adda31: import static org.junit.Assert.assertTrue;
1:043e0a4: import static org.junit.Assert.fail;
1:0adda31: 
1:0adda31: import java.io.ByteArrayInputStream;
1:0adda31: import java.io.ByteArrayOutputStream;
1:d80741a: import java.io.IOException;
1:0adda31: import java.io.InputStream;
1:0adda31: import java.util.Properties;
1:0adda31: import java.util.jar.Attributes;
1:0adda31: import java.util.jar.JarInputStream;
1:0adda31: import java.util.jar.JarOutputStream;
1:0adda31: import java.util.jar.Manifest;
1:0adda31: import java.util.zip.ZipEntry;
1:0adda31: 
1:4039f5d: import org.apache.aries.web.converter.WarToWabConverter;
1:d80741a: import org.apache.aries.web.converter.WarToWabConverter.InputStreamProvider;
1:0adda31: import org.junit.Test;
1:0adda31: import org.osgi.framework.Constants;
1:0adda31: 
1:0adda31: /**
1:0adda31:  * These tests do not cover the complete functionality (as yet). Rather this gives a place for adding
1:0adda31:  * smaller tests for individual units of work that don't need to be tested by converting a whole WAR file.
1:0adda31:  */
1:0adda31: public class WabConverterTest
1:0adda31: {
1:b8849dd:   public static final String WAR_FILE_NAME_WO_SUFFIX = "test";
1:b8849dd:   public static final String WAR_FILE_NAME = WAR_FILE_NAME_WO_SUFFIX + ".war";
1:b8849dd:   
1:9af03a3:   private static final String SERVLET_IMPORTS = 
1:9af03a3:       "javax.servlet;version=2.5," +
1:9af03a3:       "javax.servlet.http;version=2.5";
1:9af03a3:   
1:9af03a3:   private static final String JSP_IMPORTS =
1:9af03a3:       "javax.servlet.jsp;version=2.1," +
1:9af03a3:       "javax.servlet.jsp.el;version=2.1," +
1:9af03a3:       "javax.servlet.jsp.tagext;version=2.1," +
1:9af03a3:       "javax.servlet.jsp.resources;version=2.1";
1:9af03a3:       
1:9af03a3:   private static final String DEFAULT_IMPORTS = 
1:9af03a3:       SERVLET_IMPORTS + "," + JSP_IMPORTS;
1:9af03a3:   
1:0adda31:   /**
1:0adda31:    * Test that we can handle a null manifest (in case a jar archive was created without manifest)
1:0adda31:    */
1:0adda31:   @Test
1:0adda31:   public void testNullManifest() throws Exception
1:0adda31:   {
1:043e0a4:     Properties properties = new Properties();
1:043e0a4:     properties.put(WarToWabConverter.WEB_CONTEXT_PATH, "/test");
1:043e0a4:     WarToWabConverterImpl sut = new WarToWabConverterImpl(makeTestFile(new byte[0]), WAR_FILE_NAME, properties);
1:0adda31:     
1:0adda31:     Manifest res = sut.updateManifest(null);
1:0adda31:     Attributes attrs = res.getMainAttributes();
1:0adda31:     
1:0adda31:     assertTrue(attrs.getValue("Import-Package").contains("javax.servlet"));
5:0adda31:   }
1:9701730:   
1:0adda31:   @Test
1:0adda31:   public void testImportPackageMerge() throws Exception
1:0adda31:   {
1:043e0a4:     Properties properties = new Properties();
1:043e0a4:     properties.put(WarToWabConverter.WEB_CONTEXT_PATH, "/test");
1:043e0a4:     WarToWabConverterImpl sut = new WarToWabConverterImpl(makeTestFile(new byte[0]), WAR_FILE_NAME, properties);
1:0adda31:     
1:0adda31:     Manifest input = new Manifest();
1:50ca3da:     input.getMainAttributes().putValue(Constants.IMPORT_PACKAGE, "com.ibm.test,javax.servlet.http");
1:0adda31:     
1:0adda31:     Manifest res = sut.updateManifest(input);
1:0adda31:     Attributes attrs = res.getMainAttributes();
1:0adda31:     
1:0adda31:     assertEquals(
1:0adda31:         "com.ibm.test,"+
1:0adda31:         "javax.servlet.http,"+
1:0adda31:         "javax.servlet;version=2.5,"+
1:9af03a3:         JSP_IMPORTS,
1:50ca3da:         attrs.getValue(Constants.IMPORT_PACKAGE));
1:0adda31:   }
1:0adda31:     
1:0adda31:   @Test
1:8d145ca:   public void testImportPackageWithAttributesMerge() throws Exception
1:8d145ca:   {
1:8d145ca:       Attributes attrs = convertWithProperties(
1:043e0a4:                 WarToWabConverter.WEB_CONTEXT_PATH, "/test",
1:8d145ca:                 Constants.IMPORT_PACKAGE, "javax.servlet.jsp; version=\"[2.0,2.1]\",javax.servlet.jsp.tagext; version=\"[2.0,2.1]\"");
1:8d145ca:       
1:50ca3da:       String actual = attrs.getValue(Constants.IMPORT_PACKAGE);
1:8d145ca:       System.out.println(actual);
1:8d145ca:       assertEquals(
1:8d145ca:            "javax.servlet.jsp; version=\"[2.0,2.1]\"," +
1:8d145ca:            "javax.servlet.jsp.tagext; version=\"[2.0,2.1]\"," +
1:8d145ca:            "javax.servlet;version=2.5," +
1:8d145ca:            "javax.servlet.http;version=2.5," +
1:9af03a3:            "javax.servlet.jsp.el;version=2.1," +
1:9af03a3:            "javax.servlet.jsp.resources;version=2.1",
1:8d145ca:           actual);
1:8d145ca:   }
1:8d145ca: 
1:8d145ca:   @Test
1:0adda31:   public void testAcceptNoManifest() throws Exception
1:0adda31:   {
1:0adda31:     final ByteArrayOutputStream bout = new ByteArrayOutputStream();
1:0adda31:     JarOutputStream out = new JarOutputStream(bout);
1:0adda31:     out.putNextEntry(new ZipEntry("random.html"));
1:0adda31:     out.write("hello world".getBytes());
1:0adda31:     out.close();
1:0adda31:     
1:d80741a:     InputStreamProvider input = makeTestFile(bout.toByteArray());
1:0adda31:     
1:0adda31:     Properties props = new Properties();
1:043e0a4:     props.put(WarToWabConverter.WEB_CONTEXT_PATH, "/test");
1:0adda31:     props.put(Constants.BUNDLE_SYMBOLICNAME, "test.bundle");
1:d80741a:     WarToWabConverterImpl sut = new WarToWabConverterImpl(input, WAR_FILE_NAME, props);
1:0adda31:     
1:9e668db:     @SuppressWarnings("resource")
1:0adda31:     Manifest m = new JarInputStream(sut.getWAB()).getManifest();
1:0adda31:     assertEquals("test.bundle", m.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLICNAME));
1:0adda31:   }
1:b8849dd:   
1:b8849dd:   @Test 
1:b8849dd:   public void testDefaultProperties() throws Exception {
1:043e0a4:     Attributes attrs = convertWithProperties(
1:043e0a4:             WarToWabConverter.WEB_CONTEXT_PATH, "/test");
1:b8849dd:     
1:b8849dd:     assertTrue(attrs.getValue(Constants.BUNDLE_SYMBOLICNAME).startsWith(WAR_FILE_NAME_WO_SUFFIX));
1:b8849dd:     assertEquals("1.0", attrs.getValue(Constants.BUNDLE_VERSION));
1:9af03a3:     assertEquals(DEFAULT_IMPORTS, attrs.getValue(Constants.IMPORT_PACKAGE));
1:9701730:     assertEquals("WEB-INF/classes",attrs.getValue(Constants.BUNDLE_CLASSPATH));
1:b8849dd:   }
1:b8849dd:   
1:b8849dd:   @Test
1:b8849dd:   public void testPropertySupport() throws Exception {
1:b8849dd:     Attributes attrs = convertWithProperties(
1:4039f5d:         WarToWabConverter.WEB_CONTEXT_PATH, "WebFiles",
1:b8849dd:         Constants.BUNDLE_VERSION, "2.0",
1:b8849dd:         Constants.IMPORT_PACKAGE, "org.apache.aries.test;version=2.5,org.apache.aries.test.eba;version=1.0");
1:b8849dd:     
1:4039f5d:     assertEquals("/WebFiles", attrs.getValue(WarToWabConverter.WEB_CONTEXT_PATH));
2:b8849dd:     assertEquals("2.0", attrs.getValue(Constants.BUNDLE_VERSION));
1:9af03a3:     assertEquals("org.apache.aries.test;version=2.5,org.apache.aries.test.eba;version=1.0," + DEFAULT_IMPORTS,
1:9af03a3:                  attrs.getValue(Constants.IMPORT_PACKAGE));
1:b8849dd:   }
1:b8849dd:   
1:b8849dd:   @Test
1:50ca3da:   public void testPropertyCaseInsensitiveSupport() throws Exception {
1:50ca3da:     Attributes attrs = convertWithProperties(
1:50ca3da:         "web-contextpath", "WebFiles",
1:50ca3da:         "bundle-VErsion", "1.0",
1:50ca3da:         "import-PACKAGE", "org.apache.aries.test;version=2.5,org.apache.aries.test.eba;version=1.0");
1:50ca3da:     
1:50ca3da:     assertEquals("/WebFiles", attrs.getValue(WarToWabConverter.WEB_CONTEXT_PATH));
1:50ca3da:     assertEquals("1.0", attrs.getValue(Constants.BUNDLE_VERSION));
1:50ca3da:     assertEquals("org.apache.aries.test;version=2.5,org.apache.aries.test.eba;version=1.0," + DEFAULT_IMPORTS,
1:50ca3da:                  attrs.getValue(Constants.IMPORT_PACKAGE));
1:50ca3da:   }
1:50ca3da:   
1:50ca3da:   @Test
1:043e0a4:   public void testBundleContextPathOverride() throws Exception {
1:b8849dd:     Manifest m = new Manifest();
1:b8849dd:     Attributes attrs = m.getMainAttributes();
1:b8849dd:     attrs.putValue(Constants.BUNDLE_SYMBOLICNAME, "org.apache.test");
1:b8849dd:     attrs.putValue(Constants.BUNDLE_VERSION, "1.0");
1:b8849dd:     attrs.putValue(Constants.IMPORT_PACKAGE, "org.apache.util,org.apache.test;version=1.0");
1:9701730:     attrs.putValue(Constants.BUNDLE_CLASSPATH, "jsp/classes");
1:b8849dd:     
1:043e0a4:     attrs = convertWithProperties(m, 
1:043e0a4:         WarToWabConverter.WEB_CONTEXT_PATH, "WebFiles");
1:043e0a4:        
1:b8849dd:     assertEquals("org.apache.test", attrs.getValue(Constants.BUNDLE_SYMBOLICNAME));
1:043e0a4:     assertEquals("1.0", attrs.getValue(Constants.BUNDLE_VERSION));
1:b8849dd:     assertTrue(attrs.getValue(Constants.IMPORT_PACKAGE).contains("org.apache.util"));
1:043e0a4:     assertTrue(attrs.getValue(Constants.IMPORT_PACKAGE).contains("org.apache.test;version=1.0"));    
1:043e0a4:     assertEquals("jsp/classes", attrs.getValue(Constants.BUNDLE_CLASSPATH));
1:043e0a4:     assertEquals("/WebFiles", attrs.getValue(WarToWabConverter.WEB_CONTEXT_PATH));
1:043e0a4:   }
1:043e0a4:   
1:043e0a4:   @Test
1:043e0a4:   public void testBundleContextPathManifestOverride() throws Exception {
1:043e0a4:     Manifest m = new Manifest();
1:043e0a4:     Attributes attrs = m.getMainAttributes();
1:043e0a4:     attrs.putValue(Constants.BUNDLE_SYMBOLICNAME, "org.apache.test");
1:043e0a4:     attrs.putValue(WarToWabConverter.WEB_CONTEXT_PATH, "test");
1:043e0a4:     attrs.putValue(Constants.BUNDLE_VERSION, "1.0");
1:043e0a4:     attrs.putValue(Constants.IMPORT_PACKAGE, "org.apache.util,org.apache.test;version=1.0");
1:043e0a4:     attrs.putValue(Constants.BUNDLE_CLASSPATH, "jsp/classes");
1:043e0a4:     
1:043e0a4:     attrs = convertWithProperties(m, 
1:043e0a4:         WarToWabConverter.WEB_CONTEXT_PATH, "WebFiles");
1:043e0a4:        
1:043e0a4:     assertEquals("org.apache.test", attrs.getValue(Constants.BUNDLE_SYMBOLICNAME));
1:043e0a4:     assertEquals("1.0", attrs.getValue(Constants.BUNDLE_VERSION));
1:043e0a4:     assertTrue(attrs.getValue(Constants.IMPORT_PACKAGE).contains("org.apache.util"));
1:043e0a4:     assertTrue(attrs.getValue(Constants.IMPORT_PACKAGE).contains("org.apache.test;version=1.0"));    
1:043e0a4:     assertEquals("jsp/classes", attrs.getValue(Constants.BUNDLE_CLASSPATH));
1:043e0a4:     assertEquals("/WebFiles", attrs.getValue(WarToWabConverter.WEB_CONTEXT_PATH));
1:043e0a4:   }
1:043e0a4:   
1:043e0a4:   @Test
1:043e0a4:   public void testBundleManifestOverride() throws Exception {
1:043e0a4:     Manifest m = new Manifest();
1:043e0a4:     Attributes attrs = m.getMainAttributes();
1:043e0a4:     attrs.putValue(Constants.BUNDLE_SYMBOLICNAME, "org.apache.test");
1:043e0a4:     attrs.putValue(WarToWabConverter.WEB_CONTEXT_PATH, "test");
1:043e0a4:     attrs.putValue(Constants.BUNDLE_VERSION, "1.0");
1:043e0a4:     attrs.putValue(Constants.IMPORT_PACKAGE, "org.apache.util,org.apache.test;version=1.0");
1:043e0a4:     attrs.putValue(Constants.BUNDLE_CLASSPATH, "jsp/classes");
1:043e0a4:     
1:043e0a4:     try {
1:043e0a4:         convertWithProperties(m, 
1:043e0a4:                 WarToWabConverter.WEB_CONTEXT_PATH, "WebFiles",
1:043e0a4:                 Constants.BUNDLE_SYMBOLICNAME, "foobar");
1:043e0a4:         fail("Conversion did not fail as expected");
1:043e0a4:     } catch (IOException e) {
1:043e0a4:         // that's expected
1:043e0a4:     }
1:b8849dd:   }
1:b8849dd:   
1:b8849dd:   private Attributes convertWithProperties(Manifest m, String ... props) throws Exception {
1:b8849dd:     Properties properties = new Properties();
1:b8849dd:     for (int i=0;i<props.length;i+=2) {
1:b8849dd:       properties.put(props[i], props[i+1]);
1:b8849dd:     }
1:b8849dd:     
1:b8849dd:     byte[] bytes = new byte[0];
1:b8849dd: 
1:b8849dd:     if (m != null) {      
1:b8849dd:       m.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1");
1:b8849dd:       final ByteArrayOutputStream bout = new ByteArrayOutputStream();
1:b8849dd:       JarOutputStream out = new JarOutputStream(bout,m);
1:b8849dd:       out.close();
1:b8849dd:       bytes = bout.toByteArray();
1:b8849dd:     }
1:b8849dd:     
1:d80741a:     WarToWabConverterImpl sut = new WarToWabConverterImpl(makeTestFile(bytes), WAR_FILE_NAME, properties);
1:b8849dd:     return sut.getWABManifest().getMainAttributes();
1:b8849dd:   }
1:b8849dd:   
1:b8849dd:   private Attributes convertWithProperties(String ... props) throws Exception {
1:b8849dd:     return convertWithProperties(null, props);
1:b8849dd:   }
1:b8849dd:   
1:b8849dd:   
1:d80741a:   private InputStreamProvider makeTestFile(final byte[] content) {
1:d80741a:     return new InputStreamProvider() {      
1:d80741a:       public InputStream getInputStream() throws IOException {
1:d80741a:         return new ByteArrayInputStream(content);
1:d80741a:       }
1:d80741a:     };
1:d80741a:   }  
1:0adda31: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:9e668db
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:50ca3da
/////////////////////////////////////////////////////////////////////////
1:     input.getMainAttributes().putValue(Constants.IMPORT_PACKAGE, "com.ibm.test,javax.servlet.http");
/////////////////////////////////////////////////////////////////////////
1:         attrs.getValue(Constants.IMPORT_PACKAGE));
/////////////////////////////////////////////////////////////////////////
1:       String actual = attrs.getValue(Constants.IMPORT_PACKAGE);
/////////////////////////////////////////////////////////////////////////
1:   public void testPropertyCaseInsensitiveSupport() throws Exception {
1:     Attributes attrs = convertWithProperties(
1:         "web-contextpath", "WebFiles",
1:         "bundle-VErsion", "1.0",
1:         "import-PACKAGE", "org.apache.aries.test;version=2.5,org.apache.aries.test.eba;version=1.0");
1:     
1:     assertEquals("/WebFiles", attrs.getValue(WarToWabConverter.WEB_CONTEXT_PATH));
1:     assertEquals("1.0", attrs.getValue(Constants.BUNDLE_VERSION));
1:     assertEquals("org.apache.aries.test;version=2.5,org.apache.aries.test.eba;version=1.0," + DEFAULT_IMPORTS,
1:                  attrs.getValue(Constants.IMPORT_PACKAGE));
1:   }
1:   
1:   @Test
commit:9af03a3
/////////////////////////////////////////////////////////////////////////
1:   private static final String SERVLET_IMPORTS = 
1:       "javax.servlet;version=2.5," +
1:       "javax.servlet.http;version=2.5";
1:   
1:   private static final String JSP_IMPORTS =
1:       "javax.servlet.jsp;version=2.1," +
1:       "javax.servlet.jsp.el;version=2.1," +
1:       "javax.servlet.jsp.tagext;version=2.1," +
1:       "javax.servlet.jsp.resources;version=2.1";
1:       
1:   private static final String DEFAULT_IMPORTS = 
1:       SERVLET_IMPORTS + "," + JSP_IMPORTS;
1:   
/////////////////////////////////////////////////////////////////////////
1:         JSP_IMPORTS,
/////////////////////////////////////////////////////////////////////////
1:            "javax.servlet.jsp.el;version=2.1," +
1:            "javax.servlet.jsp.resources;version=2.1",
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(DEFAULT_IMPORTS, attrs.getValue(Constants.IMPORT_PACKAGE));
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("org.apache.aries.test;version=2.5,org.apache.aries.test.eba;version=1.0," + DEFAULT_IMPORTS,
1:                  attrs.getValue(Constants.IMPORT_PACKAGE));
commit:043e0a4
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1:     Properties properties = new Properties();
1:     properties.put(WarToWabConverter.WEB_CONTEXT_PATH, "/test");
1:     WarToWabConverterImpl sut = new WarToWabConverterImpl(makeTestFile(new byte[0]), WAR_FILE_NAME, properties);
/////////////////////////////////////////////////////////////////////////
1:     Properties properties = new Properties();
1:     properties.put(WarToWabConverter.WEB_CONTEXT_PATH, "/test");
1:     WarToWabConverterImpl sut = new WarToWabConverterImpl(makeTestFile(new byte[0]), WAR_FILE_NAME, properties);
/////////////////////////////////////////////////////////////////////////
1:                 WarToWabConverter.WEB_CONTEXT_PATH, "/test",
/////////////////////////////////////////////////////////////////////////
1:     props.put(WarToWabConverter.WEB_CONTEXT_PATH, "/test");
/////////////////////////////////////////////////////////////////////////
1:     Attributes attrs = convertWithProperties(
1:             WarToWabConverter.WEB_CONTEXT_PATH, "/test");
/////////////////////////////////////////////////////////////////////////
1:   public void testBundleContextPathOverride() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     attrs = convertWithProperties(m, 
1:         WarToWabConverter.WEB_CONTEXT_PATH, "WebFiles");
1:        
1:     assertEquals("1.0", attrs.getValue(Constants.BUNDLE_VERSION));
1:     assertTrue(attrs.getValue(Constants.IMPORT_PACKAGE).contains("org.apache.test;version=1.0"));    
1:     assertEquals("jsp/classes", attrs.getValue(Constants.BUNDLE_CLASSPATH));
1:     assertEquals("/WebFiles", attrs.getValue(WarToWabConverter.WEB_CONTEXT_PATH));
1:   }
1:   
1:   @Test
1:   public void testBundleContextPathManifestOverride() throws Exception {
1:     Manifest m = new Manifest();
1:     Attributes attrs = m.getMainAttributes();
1:     attrs.putValue(Constants.BUNDLE_SYMBOLICNAME, "org.apache.test");
1:     attrs.putValue(WarToWabConverter.WEB_CONTEXT_PATH, "test");
1:     attrs.putValue(Constants.BUNDLE_VERSION, "1.0");
1:     attrs.putValue(Constants.IMPORT_PACKAGE, "org.apache.util,org.apache.test;version=1.0");
1:     attrs.putValue(Constants.BUNDLE_CLASSPATH, "jsp/classes");
1:     
1:     attrs = convertWithProperties(m, 
1:         WarToWabConverter.WEB_CONTEXT_PATH, "WebFiles");
1:        
1:     assertEquals("org.apache.test", attrs.getValue(Constants.BUNDLE_SYMBOLICNAME));
1:     assertEquals("1.0", attrs.getValue(Constants.BUNDLE_VERSION));
1:     assertTrue(attrs.getValue(Constants.IMPORT_PACKAGE).contains("org.apache.util"));
1:     assertTrue(attrs.getValue(Constants.IMPORT_PACKAGE).contains("org.apache.test;version=1.0"));    
1:     assertEquals("jsp/classes", attrs.getValue(Constants.BUNDLE_CLASSPATH));
1:     assertEquals("/WebFiles", attrs.getValue(WarToWabConverter.WEB_CONTEXT_PATH));
1:   }
1:   
1:   @Test
1:   public void testBundleManifestOverride() throws Exception {
1:     Manifest m = new Manifest();
1:     Attributes attrs = m.getMainAttributes();
1:     attrs.putValue(Constants.BUNDLE_SYMBOLICNAME, "org.apache.test");
1:     attrs.putValue(WarToWabConverter.WEB_CONTEXT_PATH, "test");
1:     attrs.putValue(Constants.BUNDLE_VERSION, "1.0");
1:     attrs.putValue(Constants.IMPORT_PACKAGE, "org.apache.util,org.apache.test;version=1.0");
1:     attrs.putValue(Constants.BUNDLE_CLASSPATH, "jsp/classes");
1:     
1:     try {
1:         convertWithProperties(m, 
1:                 WarToWabConverter.WEB_CONTEXT_PATH, "WebFiles",
1:                 Constants.BUNDLE_SYMBOLICNAME, "foobar");
1:         fail("Conversion did not fail as expected");
1:     } catch (IOException e) {
1:         // that's expected
1:     }
commit:b6e25a4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8d145ca
/////////////////////////////////////////////////////////////////////////
1:   public void testImportPackageWithAttributesMerge() throws Exception
1:   {
1:       Attributes attrs = convertWithProperties(
1:                 Constants.IMPORT_PACKAGE, "javax.servlet.jsp; version=\"[2.0,2.1]\",javax.servlet.jsp.tagext; version=\"[2.0,2.1]\"");
1:       
0:       String actual = attrs.getValue("Import-Package");
1:       System.out.println(actual);
1:       assertEquals(
1:            "javax.servlet.jsp; version=\"[2.0,2.1]\"," +
1:            "javax.servlet.jsp.tagext; version=\"[2.0,2.1]\"," +
1:            "javax.servlet;version=2.5," +
1:            "javax.servlet.http;version=2.5," +
0:            "javax.el;version=2.1," +
0:            "javax.servlet.jsp.el;version=2.1",
1:           actual);
1:   }
1: 
1:   @Test
commit:9701730
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("WEB-INF/classes",attrs.getValue(Constants.BUNDLE_CLASSPATH));
/////////////////////////////////////////////////////////////////////////
1:     attrs.putValue(Constants.BUNDLE_CLASSPATH, "jsp/classes");
0:         Constants.BUNDLE_CLASSPATH, "aries/generated");
0:     assertEquals("WEB-INF/classes,aries/generated,jsp/classes", attrs.getValue(Constants.BUNDLE_CLASSPATH));
commit:668dcc6
/////////////////////////////////////////////////////////////////////////
0:         WarToWabConverterImpl.WEB_CONTEXT_PATH, "WebFiles",
0:     assertEquals("/WebFiles", attrs.getValue(WarToWabConverterImpl.WEB_CONTEXT_PATH));
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:4039f5d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.web.converter.WarToWabConverter;
/////////////////////////////////////////////////////////////////////////
0:     assertEquals("/", attrs.getValue(WarToWabConverter.WEB_JSP_EXTRACT_LOCATION));    
/////////////////////////////////////////////////////////////////////////
1:         WarToWabConverter.WEB_CONTEXT_PATH, "WebFiles",
0:         WarToWabConverter.WEB_JSP_EXTRACT_LOCATION, "/jsp",
1:     assertEquals("/WebFiles", attrs.getValue(WarToWabConverter.WEB_CONTEXT_PATH));
0:     assertEquals("/jsp", attrs.getValue(WarToWabConverter.WEB_JSP_EXTRACT_LOCATION));
commit:d80741a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.web.converter.impl;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.web.converter.WarToWabConverter.InputStreamProvider;
/////////////////////////////////////////////////////////////////////////
0:     WarToWabConverterImpl sut = new WarToWabConverterImpl(makeTestFile(new byte[0]), WAR_FILE_NAME, new Properties());
/////////////////////////////////////////////////////////////////////////
0:     WarToWabConverterImpl sut = new WarToWabConverterImpl(makeTestFile(new byte[0]), WAR_FILE_NAME, new Properties());
/////////////////////////////////////////////////////////////////////////
1:     InputStreamProvider input = makeTestFile(bout.toByteArray());
1:     WarToWabConverterImpl sut = new WarToWabConverterImpl(input, WAR_FILE_NAME, props);
/////////////////////////////////////////////////////////////////////////
0:     assertEquals("/", attrs.getValue(WarToWabConverterImpl.WEB_JSP_EXTRACT_LOCATION));    
/////////////////////////////////////////////////////////////////////////
0:         WarToWabConverterImpl.WEB_CONTEXT_PATH, "../WebFiles",
0:         WarToWabConverterImpl.WEB_JSP_EXTRACT_LOCATION, "/jsp",
0:     assertEquals("../WebFiles", attrs.getValue(WarToWabConverterImpl.WEB_CONTEXT_PATH));
0:     assertEquals("/jsp", attrs.getValue(WarToWabConverterImpl.WEB_JSP_EXTRACT_LOCATION));
/////////////////////////////////////////////////////////////////////////
1:     WarToWabConverterImpl sut = new WarToWabConverterImpl(makeTestFile(bytes), WAR_FILE_NAME, properties);
/////////////////////////////////////////////////////////////////////////
1:   private InputStreamProvider makeTestFile(final byte[] content) {
1:     return new InputStreamProvider() {      
1:       public InputStream getInputStream() throws IOException {
1:         return new ByteArrayInputStream(content);
1:       }
1:     };
1:   }  
commit:b8849dd
/////////////////////////////////////////////////////////////////////////
1:   public static final String WAR_FILE_NAME_WO_SUFFIX = "test";
1:   public static final String WAR_FILE_NAME = WAR_FILE_NAME_WO_SUFFIX + ".war";
1:   
/////////////////////////////////////////////////////////////////////////
1:   @Test 
1:   public void testDefaultProperties() throws Exception {
0:     Attributes attrs = convertWithProperties();
1:     
1:     assertTrue(attrs.getValue(Constants.BUNDLE_SYMBOLICNAME).startsWith(WAR_FILE_NAME_WO_SUFFIX));
0:     assertEquals("/", attrs.getValue(WarToWabConverter.WEB_JSP_EXTRACT_LOCATION));    
1:     assertEquals("1.0", attrs.getValue(Constants.BUNDLE_VERSION));
0:     assertEquals("javax.servlet;version=2.5,javax.servlet.http;version=2.5,javax.el;version=2.1," +
0:         "javax.servlet.jsp;version=2.1,javax.servlet.jsp.el;version=2.1," +
0:         "javax.servlet.jsp.tagext;version=2.1",
0:         attrs.getValue(Constants.IMPORT_PACKAGE));
0:     assertEquals("WEB-INF/classes/",attrs.getValue(Constants.BUNDLE_CLASSPATH));
1:   }
1:   
1:   @Test
1:   public void testPropertySupport() throws Exception {
1:     Attributes attrs = convertWithProperties(
0:         WarToWabConverter.WEB_CONTEXT_PATH, "../WebFiles",
0:         WarToWabConverter.WEB_JSP_EXTRACT_LOCATION, "/jsp",
1:         Constants.BUNDLE_VERSION, "2.0",
1:         Constants.IMPORT_PACKAGE, "org.apache.aries.test;version=2.5,org.apache.aries.test.eba;version=1.0");
1:     
0:     assertEquals("../WebFiles", attrs.getValue(WarToWabConverter.WEB_CONTEXT_PATH));
0:     assertEquals("/jsp", attrs.getValue(WarToWabConverter.WEB_JSP_EXTRACT_LOCATION));
1:     assertEquals("2.0", attrs.getValue(Constants.BUNDLE_VERSION));
0:     assertEquals("org.apache.aries.test;version=2.5,org.apache.aries.test.eba;version=1.0,"+
0:         "javax.servlet;version=2.5,javax.servlet.http;version=2.5,javax.el;version=2.1," +
0:         "javax.servlet.jsp;version=2.1,javax.servlet.jsp.el;version=2.1," +
0:         "javax.servlet.jsp.tagext;version=2.1",
0:         attrs.getValue(Constants.IMPORT_PACKAGE));
1:   }
1:   
1:   @Test
0:   public void testManifestAndPropertyOverwrites() throws Exception {
1:     Manifest m = new Manifest();
1:     Attributes attrs = m.getMainAttributes();
1:     attrs.putValue(Constants.BUNDLE_SYMBOLICNAME, "org.apache.test");
1:     attrs.putValue(Constants.BUNDLE_VERSION, "1.0");
1:     attrs.putValue(Constants.IMPORT_PACKAGE, "org.apache.util,org.apache.test;version=1.0");
0:     attrs.putValue(Constants.BUNDLE_CLASSPATH, "jsp/classes/");
1:     
0:     attrs = convertWithProperties(m, Constants.BUNDLE_VERSION, "2.0",
0:         Constants.IMPORT_PACKAGE, "org.apache.wab,org.apache.test;version=2.0",
0:         Constants.BUNDLE_CLASSPATH, "aries/generated/");
1:     
1:     assertEquals("org.apache.test", attrs.getValue(Constants.BUNDLE_SYMBOLICNAME));
1:     assertEquals("2.0", attrs.getValue(Constants.BUNDLE_VERSION));
1:     assertTrue(attrs.getValue(Constants.IMPORT_PACKAGE).contains("org.apache.util"));
0:     assertTrue(attrs.getValue(Constants.IMPORT_PACKAGE).contains("org.apache.test;version=2.0"));    
0:     assertTrue(attrs.getValue(Constants.IMPORT_PACKAGE).contains("org.apache.wab"));
0:     assertEquals("WEB-INF/classes/,aries/generated/,jsp/classes/", attrs.getValue(Constants.BUNDLE_CLASSPATH));
1:   }
1:   
1:   private Attributes convertWithProperties(Manifest m, String ... props) throws Exception {
1:     Properties properties = new Properties();
1:     for (int i=0;i<props.length;i+=2) {
1:       properties.put(props[i], props[i+1]);
1:     }
1:     
1:     byte[] bytes = new byte[0];
1: 
1:     if (m != null) {      
1:       m.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1");
1:       final ByteArrayOutputStream bout = new ByteArrayOutputStream();
1:       JarOutputStream out = new JarOutputStream(bout,m);
1:       out.close();
1:       bytes = bout.toByteArray();
1:     }
1:     
0:     WarToWabConverter sut = new WarToWabConverter(makeTestFile(bytes), properties);
1:     return sut.getWABManifest().getMainAttributes();
1:   }
1:   
1:   private Attributes convertWithProperties(String ... props) throws Exception {
1:     return convertWithProperties(null, props);
1:   }
1:   
1:   
/////////////////////////////////////////////////////////////////////////
0:     public String getName() { return WAR_FILE_NAME; }
commit:0adda31
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.application.converters;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.InputStream;
1: import java.util.Properties;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarInputStream;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: import java.util.zip.ZipEntry;
1: 
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: 
1: /**
1:  * These tests do not cover the complete functionality (as yet). Rather this gives a place for adding
1:  * smaller tests for individual units of work that don't need to be tested by converting a whole WAR file.
1:  */
1: public class WabConverterTest
1: {
1:   /**
1:    * Test that we can handle a null manifest (in case a jar archive was created without manifest)
1:    */
1:   @Test
1:   public void testNullManifest() throws Exception
1:   {
0:     WarToWabConverter sut = new WarToWabConverter(makeTestFile(new byte[0]), new Properties());
1:     
1:     Manifest res = sut.updateManifest(null);
1:     Attributes attrs = res.getMainAttributes();
1:     
1:     assertTrue(attrs.getValue("Import-Package").contains("javax.servlet"));
1:   }
1:   
1:   @Test
1:   public void testImportPackageMerge() throws Exception
1:   {
0:     WarToWabConverter sut = new WarToWabConverter(makeTestFile(new byte[0]), new Properties());
1:     
1:     Manifest input = new Manifest();
0:     input.getMainAttributes().putValue("Import-Package", "com.ibm.test,javax.servlet.http");
1:     
1:     Manifest res = sut.updateManifest(input);
1:     Attributes attrs = res.getMainAttributes();
1:     
1:     assertEquals(
1:         "com.ibm.test,"+
1:         "javax.servlet.http,"+
1:         "javax.servlet;version=2.5,"+
0:         "javax.el;version=2.1,"+
0:         "javax.servlet.jsp;version=2.1,"+
0:         "javax.servlet.jsp.el;version=2.1,"+
0:         "javax.servlet.jsp.tagext;version=2.1",
0:         attrs.getValue("Import-Package"));
1:   }
1:   
1:   
1:   @Test
1:   public void testAcceptNoManifest() throws Exception
1:   {
1:     final ByteArrayOutputStream bout = new ByteArrayOutputStream();
1:     JarOutputStream out = new JarOutputStream(bout);
1:     out.putNextEntry(new ZipEntry("random.html"));
1:     out.write("hello world".getBytes());
1:     out.close();
1:     
0:     IFile input = makeTestFile(bout.toByteArray());
1:     
1:     Properties props = new Properties();
1:     props.put(Constants.BUNDLE_SYMBOLICNAME, "test.bundle");
0:     WarToWabConverter sut = new WarToWabConverter(input, props);
1:     
1:     Manifest m = new JarInputStream(sut.getWAB()).getManifest();
1:     assertEquals("test.bundle", m.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLICNAME));
1:   }
1:   
0:   private IFile makeTestFile(byte[] content) {
0:     return Skeleton.newMock(new IFileProxy(content), IFile.class);
1:   }
1:   
0:   private static class IFileProxy {
0:     private byte[] content;
1:     
0:     public IFileProxy(byte[] content) {
0:       this.content = content;
1:     }
1:     
0:     public InputStream open() {
0:       return new ByteArrayInputStream(content);
1:     }
1:     
0:     public String getName() { return "test.war"; }
1:   }
1:   
1: }
============================================================================