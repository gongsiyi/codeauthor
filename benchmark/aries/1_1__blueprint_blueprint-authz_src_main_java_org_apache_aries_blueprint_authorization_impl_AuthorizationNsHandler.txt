1:01524e7: /*
1:01524e7:  * Licensed to the Apache Software Foundation (ASF) under one
1:01524e7:  * or more contributor license agreements.  See the NOTICE file
1:01524e7:  * distributed with this work for additional information
1:01524e7:  * regarding copyright ownership.  The ASF licenses this file
1:01524e7:  * to you under the Apache License, Version 2.0 (the
1:01524e7:  * "License"); you may not use this file except in compliance
1:01524e7:  * with the License.  You may obtain a copy of the License at
1:01524e7:  *
1:01524e7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:01524e7:  *
1:01524e7:  * Unless required by applicable law or agreed to in writing,
1:01524e7:  * software distributed under the License is distributed on an
1:01524e7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:01524e7:  * KIND, either express or implied.  See the License for the
1:01524e7:  * specific language governing permissions and limitations
1:01524e7:  * under the License.
1:01524e7:  */
1:01524e7: package org.apache.aries.blueprint.authorization.impl;
2:01524e7: 
1:01524e7: import java.net.URL;
1:95766a2: import java.util.Collections;
1:01524e7: import java.util.Set;
1:01524e7: 
1:01524e7: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:01524e7: import org.apache.aries.blueprint.NamespaceHandler;
1:01524e7: import org.apache.aries.blueprint.ParserContext;
1:01524e7: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1:01524e7: import org.apache.aries.blueprint.mutable.MutablePassThroughMetadata;
1:01524e7: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:01524e7: import org.osgi.service.blueprint.reflect.Metadata;
1:01524e7: import org.w3c.dom.Element;
1:01524e7: import org.w3c.dom.Node;
1:01524e7: 
1:01524e7: public class AuthorizationNsHandler implements NamespaceHandler {
1:95766a2:     private static final String NS_AUTHZ = "http://aries.apache.org/xmlns/authorization/v1.0.0";
1:01524e7: 
1:01524e7:     private void parseElement(Element elt, ComponentMetadata cm, ParserContext pc) {
1:01524e7:         ComponentDefinitionRegistry cdr = pc.getComponentDefinitionRegistry();
1:01524e7:         
1:95766a2:         if ("enable".equals(elt.getLocalName()) && NS_AUTHZ.equals(elt.getNamespaceURI()) 
1:95766a2:             && !cdr.containsComponentDefinition(AuthorizationBeanProcessor.AUTH_PROCESSOR_BEAN_NAME)) {
1:95766a2:             cdr.registerComponentDefinition(authBeanProcessor(pc, cdr));
2:01524e7:         }
1:01524e7:     }
1:01524e7: 
1:86e60ab:     private MutableBeanMetadata authBeanProcessor(ParserContext pc, ComponentDefinitionRegistry cdr) {
1:86e60ab:         MutableBeanMetadata meta = pc.createMetadata(MutableBeanMetadata.class);
1:86e60ab:         meta.setId(AuthorizationBeanProcessor.AUTH_PROCESSOR_BEAN_NAME);
1:86e60ab:         meta.setRuntimeClass(AuthorizationBeanProcessor.class);
1:86e60ab:         meta.setProcessor(true);
1:86e60ab:         meta.addProperty("cdr", passThrough(pc, cdr));
1:86e60ab:         return meta;
1:86e60ab:     }
1:86e60ab: 
1:86e60ab:     private MutablePassThroughMetadata passThrough(ParserContext pc, Object o) {
1:86e60ab:         MutablePassThroughMetadata meta = pc.createMetadata(MutablePassThroughMetadata.class);
1:86e60ab:         meta.setObject(o);
1:86e60ab:         return meta;
1:86e60ab:     }
1:86e60ab: 
1:01524e7:     public ComponentMetadata decorate(Node node, ComponentMetadata cm, ParserContext pc) {
1:01524e7:         if (node instanceof Element) {
1:6ffc20f:             parseElement((Element)node, cm, pc);
1:01524e7:         }
1:01524e7:         return cm;
1:01524e7:     }
1:01524e7: 
1:01524e7:     public Metadata parse(Element elt, ParserContext pc) {
1:01524e7:         parseElement(elt, pc.getEnclosingComponent(), pc);
2:01524e7:         return null;
1:01524e7:     }
1:01524e7: 
1:01524e7:     public URL getSchemaLocation(String namespace) {
1:95766a2:         if (NS_AUTHZ.equals(namespace)) {
1:95766a2:             return this.getClass().getResource("/authz10.xsd");
1:95766a2:         } else {
1:95766a2:             return null;
1:95766a2:         }
1:01524e7:     }
1:01524e7: 
1:01524e7:     @SuppressWarnings("rawtypes")
1:01524e7:     public Set<Class> getManagedClasses() {
1:95766a2:         return Collections.emptySet();
1:01524e7:     }
1:01524e7: 
1:01524e7: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:95766a2
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:     private static final String NS_AUTHZ = "http://aries.apache.org/xmlns/authorization/v1.0.0";
1:         if ("enable".equals(elt.getLocalName()) && NS_AUTHZ.equals(elt.getNamespaceURI()) 
1:             && !cdr.containsComponentDefinition(AuthorizationBeanProcessor.AUTH_PROCESSOR_BEAN_NAME)) {
1:             cdr.registerComponentDefinition(authBeanProcessor(pc, cdr));
/////////////////////////////////////////////////////////////////////////
1:         if (NS_AUTHZ.equals(namespace)) {
1:             return this.getClass().getResource("/authz10.xsd");
1:         } else {
1:             return null;
1:         }
1:         return Collections.emptySet();
commit:86e60ab
/////////////////////////////////////////////////////////////////////////
0:                 cdr.registerComponentDefinition(authBeanProcessor(pc, cdr));
1:     private MutableBeanMetadata authBeanProcessor(ParserContext pc, ComponentDefinitionRegistry cdr) {
1:         MutableBeanMetadata meta = pc.createMetadata(MutableBeanMetadata.class);
1:         meta.setId(AuthorizationBeanProcessor.AUTH_PROCESSOR_BEAN_NAME);
1:         meta.setRuntimeClass(AuthorizationBeanProcessor.class);
1:         meta.setProcessor(true);
1:         meta.addProperty("cdr", passThrough(pc, cdr));
1:         return meta;
1:     }
1: 
1:     private MutablePassThroughMetadata passThrough(ParserContext pc, Object o) {
1:         MutablePassThroughMetadata meta = pc.createMetadata(MutablePassThroughMetadata.class);
1:         meta.setObject(o);
1:         return meta;
1:     }
1: 
commit:6ffc20f
/////////////////////////////////////////////////////////////////////////
1:             parseElement((Element)node, cm, pc);
commit:3f62ee0
/////////////////////////////////////////////////////////////////////////
0:             if (!cdr.containsComponentDefinition(AuthorizationBeanProcessor.AUTH_PROCESSOR_BEAN_NAME)) {
0:                 meta.setId(AuthorizationBeanProcessor.AUTH_PROCESSOR_BEAN_NAME);
0:                 meta.setRuntimeClass(AuthorizationBeanProcessor.class);
commit:01524e7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.authorization.impl;
1: 
1: import java.net.URL;
1: import java.util.Set;
1: 
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.aries.blueprint.ParserContext;
1: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1: import org.apache.aries.blueprint.mutable.MutablePassThroughMetadata;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: 
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: 
1: public class AuthorizationNsHandler implements NamespaceHandler {
1: 
1:     private void parseElement(Element elt, ComponentMetadata cm, ParserContext pc) {
1:         ComponentDefinitionRegistry cdr = pc.getComponentDefinitionRegistry();
1:         
0:         if ("enable".equals(elt.getLocalName())) {
0:             if (!cdr.containsComponentDefinition(AnnotationParser.ANNOTATION_PARSER_BEAN_NAME)) {
0:                 MutableBeanMetadata meta = pc.createMetadata(MutableBeanMetadata.class);
0:                 meta.setId(AnnotationParser.ANNOTATION_PARSER_BEAN_NAME);
0:                 meta.setRuntimeClass(AnnotationParser.class);
0:                 meta.setProcessor(true);
0:                 MutablePassThroughMetadata cdrMeta = pc.createMetadata(MutablePassThroughMetadata.class);
0:                 cdrMeta.setObject(cdr);
0:                 meta.addProperty("cdr", cdrMeta);
0:                 cdr.registerComponentDefinition(meta);
1:             }
1:         }
1:     }
1: 
1:     public ComponentMetadata decorate(Node node, ComponentMetadata cm, ParserContext pc) {
1:         if (node instanceof Element) {
0:             Element elt = (Element)node;
0:             parseElement(elt, cm, pc);
1:         }
1:         return cm;
1:     }
1: 
1:     public Metadata parse(Element elt, ParserContext pc) {
1:         parseElement(elt, pc.getEnclosingComponent(), pc);
1:         return null;
1:     }
1: 
1:     public URL getSchemaLocation(String namespace) {
0:         return this.getClass().getResource("/authz10.xsd");
1:     }
1: 
1:     @SuppressWarnings("rawtypes")
1:     public Set<Class> getManagedClasses() {
1:         return null;
1:     }
1: 
1: }
============================================================================