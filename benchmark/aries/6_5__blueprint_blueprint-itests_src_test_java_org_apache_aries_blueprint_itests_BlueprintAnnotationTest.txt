1:dd9325e: /*
1:dd9325e:  * Licensed to the Apache Software Foundation (ASF) under one
1:dd9325e:  * or more contributor license agreements.  See the NOTICE file
1:dd9325e:  * distributed with this work for additional information
1:dd9325e:  * regarding copyright ownership.  The ASF licenses this file
1:dd9325e:  * to you under the Apache License, Version 2.0 (the
1:dd9325e:  * "License"); you may not use this file except in compliance
1:dd9325e:  * with the License.  You may obtain a copy of the License at
1:dd9325e:  *
1:dd9325e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:dd9325e:  *
1:dd9325e:  * Unless required by applicable law or agreed to in writing,
1:dd9325e:  * software distributed under the License is distributed on an
1:dd9325e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:dd9325e:  * KIND, either express or implied.  See the License for the
1:dd9325e:  * specific language governing permissions and limitations
1:dd9325e:  * under the License.
1:dd9325e:  */
1:dd9325e: package org.apache.aries.blueprint.itests;
1:069f06d: 
1:c185a5a: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1:dd9325e: import static org.junit.Assert.assertEquals;
1:dd9325e: import static org.junit.Assert.assertFalse;
1:dd9325e: import static org.junit.Assert.assertNotNull;
1:dd9325e: import static org.junit.Assert.assertSame;
1:dd9325e: import static org.junit.Assert.assertTrue;
1:d251156: 
1:dd9325e: import java.text.SimpleDateFormat;
1:dd9325e: import java.util.Currency;
1:d251156: 
1:dd9325e: import org.apache.aries.blueprint.sample.Bar;
1:dd9325e: import org.apache.aries.blueprint.sample.Foo;
1:beb8062: import org.junit.Before;
1:dd9325e: import org.junit.Test;
1:dd9325e: import org.junit.runner.RunWith;
1:d251156: import org.ops4j.pax.exam.Configuration;
1:dd9325e: import org.ops4j.pax.exam.Option;
1:d251156: import org.ops4j.pax.exam.junit.PaxExam;
1:d251156: import org.osgi.framework.InvalidSyntaxException;
1:dd9325e: import org.osgi.service.blueprint.container.BlueprintContainer;
1:069f06d: 
1:d251156: @RunWith(PaxExam.class)
1:d251156: public class BlueprintAnnotationTest extends AbstractBlueprintIntegrationTest {
12:dd9325e: 
1:beb8062:     private BlueprintContainer blueprintContainer;
1:beb8062: 
1:beb8062:     @Before
1:beb8062:     public void setUp() throws InvalidSyntaxException, InterruptedException {
1:beb8062:         blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample-annotation");
1:beb8062:         assertNotNull(blueprintContainer);
1:beb8062:     }
1:beb8062: 
1:dd9325e:     @Test
1:dd9325e:     public void test() throws Exception {
1:dd9325e:         Object obj = blueprintContainer.getComponentInstance("bar");
1:dd9325e:         assertNotNull(obj);
1:dd9325e:         assertEquals(Bar.class, obj.getClass());
1:dd9325e:         Bar bar = (Bar) obj;
1:dd9325e:         assertEquals("Hello FooBar", bar.getValue());
1:dd9325e:         
1:dd9325e:         obj = blueprintContainer.getComponentInstance("foo");
1:dd9325e:         assertNotNull(obj);
1:dd9325e:         assertEquals(Foo.class, obj.getClass());
1:dd9325e:         Foo foo = (Foo) obj;
1:dd9325e:         assertEquals(5, foo.getA());
1:dd9325e:        // assertEquals(10, foo.getB());
1:dd9325e:         assertSame(bar, foo.getBar());
1:dd9325e:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1:dd9325e:         assertEquals(new SimpleDateFormat("yyyy.MM.dd").parse("2009.04.17"),
1:dd9325e:                 foo.getDate());
1:dd9325e: 
1:dd9325e:         assertTrue(foo.isInitialized());
1:dd9325e:         assertFalse(foo.isDestroyed());
1:069f06d:         
1:069f06d:         assertNotNull(blueprintContainer.getComponentInstance("fragment"));
1:069f06d:     
1:beb8062:         obj = context().getService(Foo.class, "(blueprint.annotation.sample=true)", 5000);
1:dd9325e:         assertNotNull(obj);
1:da163d0:         assertEquals(foo.toString(), obj.toString());
1:86224ba:     }
1:86224ba: 
1:beb8062:     @Test
1:beb8062:     public void testXmlConfig() {
1:beb8062:         Object obj = blueprintContainer.getComponentInstance("testXmlConfigBean");
1:beb8062:         assertNotNull(obj);
1:beb8062:         assertEquals("org.apache.aries.blueprint.sample.TestXmlConfigBean", obj.getClass().getName());
1:beb8062:     }
1:beb8062: 
1:d251156:     private BlueprintContainer getBlueprintContainerForBundle(String symbolicName) throws InvalidSyntaxException, InterruptedException {
1:d251156:         return context().getService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=" + symbolicName + ")", 15000);
1:dd9325e:     }    
1:dd9325e: 
1:d251156:     @Configuration
1:d251156:     public Option[] configuration() {
1:d251156:         return new Option[] {
1:d251156:             baseOptions(),
1:d251156:             Helper.blueprintBundles(),
1:c185a5a:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample-annotation"),
1:c185a5a:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample-fragment", false),
1:d251156:         };
1:dd9325e:     }
1:dd9325e: 
1:dd9325e: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:beb8062
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
1:     private BlueprintContainer blueprintContainer;
1: 
1:     @Before
1:     public void setUp() throws InvalidSyntaxException, InterruptedException {
1:         blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample-annotation");
1:         assertNotNull(blueprintContainer);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         obj = context().getService(Foo.class, "(blueprint.annotation.sample=true)", 5000);
1:     @Test
1:     public void testXmlConfig() {
1:         Object obj = blueprintContainer.getComponentInstance("testXmlConfigBean");
1:         assertNotNull(obj);
1:         assertEquals("org.apache.aries.blueprint.sample.TestXmlConfigBean", obj.getClass().getName());
1:     }
1: 
commit:c185a5a
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
/////////////////////////////////////////////////////////////////////////
1:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample-annotation"),
1:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample-fragment", false),
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: 
1: 
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.osgi.framework.InvalidSyntaxException;
1: @RunWith(PaxExam.class)
1: public class BlueprintAnnotationTest extends AbstractBlueprintIntegrationTest {
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample-annotation");
/////////////////////////////////////////////////////////////////////////
1:     private BlueprintContainer getBlueprintContainerForBundle(String symbolicName) throws InvalidSyntaxException, InterruptedException {
1:         return context().getService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=" + symbolicName + ")", 15000);
1:     @Configuration
1:     public Option[] configuration() {
1:         return new Option[] {
1:             baseOptions(),
1:             Helper.blueprintBundles(),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample-annotation").versionAsInProject(),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample-fragment").versionAsInProject().noStart(),
1:         };
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.itest.AbstractIntegrationTest;
0: import org.apache.aries.itest.RichBundleContext;
0: import static org.apache.aries.itest.ExtraOptions.*;
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample-annotation");
/////////////////////////////////////////////////////////////////////////
0:         obj = context().getService(Foo.class, null, 5000);
0:     private BlueprintContainer getBlueprintContainerForBundle(RichBundleContext context, String symbolicName) {
0:         return context.getService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=" + symbolicName + ")");
1:     }    
1:     
0:         return testOptions(
0:             paxLogging("DEBUG"),
/////////////////////////////////////////////////////////////////////////
commit:069f06d
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.*;
/////////////////////////////////////////////////////////////////////////
1:     
1:     
/////////////////////////////////////////////////////////////////////////
1:         
1:         assertNotNull(blueprintContainer.getComponentInstance("fragment"));
1:     
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample-fragment"),
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
author:Holly Cummins
-------------------------------------------------------------------------------
commit:da163d0
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(foo.toString(), obj.toString());
author:Lin Sun
-------------------------------------------------------------------------------
commit:dd9325e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.fail;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: 
1: import java.text.SimpleDateFormat;
1: import java.util.Currency;
0: import java.util.Hashtable;
0: import java.util.Set;
1: 
1: import org.apache.aries.blueprint.sample.Bar;
1: import org.apache.aries.blueprint.sample.Foo;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.osgi.framework.Bundle;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
0: import org.osgi.service.cm.Configuration;
0: import org.osgi.service.cm.ConfigurationAdmin;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class BlueprintAnnotationTest extends AbstractIntegrationTest {
1: 
1:     @Test
1:     public void test() throws Exception {
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle(
0:                  bundleContext, "org.apache.aries.blueprint.sample-annotation",
0:                 5000);
1: 
0:         assertNotNull(blueprintContainer);
1: 
1:         Object obj = blueprintContainer.getComponentInstance("bar");
1:         assertNotNull(obj);
1:         assertEquals(Bar.class, obj.getClass());
1:         Bar bar = (Bar) obj;
1:         assertEquals("Hello FooBar", bar.getValue());
1:         
1:         obj = blueprintContainer.getComponentInstance("foo");
1:         assertNotNull(obj);
1:         assertEquals(Foo.class, obj.getClass());
1:         Foo foo = (Foo) obj;
1:         assertEquals(5, foo.getA());
1:        // assertEquals(10, foo.getB());
1:         assertSame(bar, foo.getBar());
1:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1:         assertEquals(new SimpleDateFormat("yyyy.MM.dd").parse("2009.04.17"),
1:                 foo.getDate());
1: 
1:         assertTrue(foo.isInitialized());
1:         assertFalse(foo.isDestroyed());
1: 
0:        obj = getOsgiService(bundleContext, Foo.class, null, 5000);
1:         assertNotNull(obj);
0:         assertSame(foo, obj);
1:     }
1: 
0:     @org.ops4j.pax.exam.junit.Configuration
0:     public static Option[] configuration() {
0:         Option[] options = options(
0:             // Log
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:             // Felix Config Admin
0:             mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:             // Felix mvn url handler
0:             mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
1: 
0:             // this is how you set the default log level when using pax logging (logProfile)
0:             systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
0:             // Bundles
0:             mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:             mavenBundle("asm", "asm-all"),
0:             mavenBundle("org.apache.xbean", "xbean-finder"),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.annotation.api"),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.annotation.impl"),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample-annotation"),
0:             //mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample"),
0:             mavenBundle("org.osgi", "org.osgi.compendium"),
0:             //org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
1: 
0:             equinox().version("3.5.0")
0:         );
0:         options = updateOptions(options);
0:         return options;
1:     }
1: 
1: }
============================================================================