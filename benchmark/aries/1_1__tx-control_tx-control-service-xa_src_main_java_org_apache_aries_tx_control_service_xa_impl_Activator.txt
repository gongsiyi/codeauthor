1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:7f1e7ab:  */
1:78dd69f: package org.apache.aries.tx.control.service.xa.impl;
6:78dd69f: 
1:7f1e7ab: import static org.apache.aries.tx.control.service.xa.impl.Activator.ChangeType.RECREATE;
1:7f1e7ab: 
1:78dd69f: import java.util.Dictionary;
1:7f1e7ab: import java.util.Enumeration;
1:7f1e7ab: import java.util.HashMap;
1:78dd69f: import java.util.Hashtable;
1:7f1e7ab: import java.util.Map;
1:7f1e7ab: 
1:7f1e7ab: import org.osgi.framework.BundleActivator;
1:7f1e7ab: import org.osgi.framework.BundleContext;
1:7f1e7ab: import org.osgi.framework.Constants;
1:7f1e7ab: import org.osgi.framework.ServiceRegistration;
1:7f1e7ab: import org.osgi.service.cm.ManagedService;
1:78dd69f: import org.osgi.service.transaction.control.TransactionControl;
1:7f1e7ab: import org.slf4j.Logger;
1:7f1e7ab: import org.slf4j.LoggerFactory;
1:7f1e7ab: 
1:7f1e7ab: public class Activator implements BundleActivator {
1:7f1e7ab: 	
1:cc2f539: 	static final String PID = "org.apache.aries.tx.control.service.xa";
1:7f1e7ab: 
1:7f1e7ab: 	private static final Logger logger = LoggerFactory.getLogger(Activator.class);
1:7f1e7ab: 
1:7f1e7ab: 	private ServiceRegistration<ManagedService> msReg;
1:7f1e7ab: 	
1:7f1e7ab: 	private boolean open;
1:7f1e7ab: 
1:7f1e7ab: 	private TransactionControlImpl txControlImpl;
1:7f1e7ab: 	
1:7f1e7ab: 	private ServiceRegistration<TransactionControl> txControlReg;
1:7f1e7ab: 	
1:7f1e7ab: 	private Map<String, Object> configuration;
1:7f1e7ab: 
1:7f1e7ab: 	private BundleContext context;
1:7f1e7ab: 
1:7f1e7ab: 	@Override
1:7f1e7ab: 	public void start(BundleContext context) throws Exception {
1:7f1e7ab: 		this.context = context;
1:7f1e7ab: 		
1:7f1e7ab: 		synchronized (this) {
1:7f1e7ab: 			open = true;
1:7f1e7ab: 		}
1:7f1e7ab: 		
1:7f1e7ab: 		Dictionary<String, Object> properties = getMSProperties();
1:7f1e7ab: 		logger.info("Registering for configuration updates {}", properties);
1:7f1e7ab: 		ManagedService service = c -> configurationUpdated(c, false);
1:7f1e7ab: 		msReg = context.registerService(ManagedService.class, service, properties);
1:7f1e7ab: 		
1:7f1e7ab: 		new Thread(() -> {
1:7f1e7ab: 			try {
1:7f1e7ab: 				Thread.sleep(1000);
1:7f1e7ab: 			} catch (InterruptedException ie) {
1:7f1e7ab: 				Thread.currentThread().interrupt();
1:7f1e7ab: 			}
1:7f1e7ab: 			configurationUpdated(null, true);
1:7f1e7ab: 		}).start();
1:7f1e7ab: 	}
1:7f1e7ab: 
1:7f1e7ab: 	@Override
1:7f1e7ab: 	public void stop(BundleContext context) throws Exception {
1:7f1e7ab: 		safeUnregister(msReg);
1:7f1e7ab: 		
1:7f1e7ab: 		ServiceRegistration<TransactionControl> toUnregister;
1:7f1e7ab: 		TransactionControlImpl toClose;
1:7f1e7ab: 		synchronized (this) {
1:7f1e7ab: 			open = false;
1:7f1e7ab: 			toUnregister = txControlReg;
1:7f1e7ab: 			txControlReg = null;
1:7f1e7ab: 			toClose = txControlImpl;
1:7f1e7ab: 			txControlImpl = null;
1:7f1e7ab: 			configuration = null;
1:7f1e7ab: 		}
1:7f1e7ab: 		cleanUp(toUnregister, toClose);
1:7f1e7ab: 	}
1:7f1e7ab: 
1:7f1e7ab: 	
1:7f1e7ab: 	private void configurationUpdated(Dictionary<String, ?> config, boolean internal) {
1:7f1e7ab: 		Map<String,Object> newConfig = toMap(config);
1:7f1e7ab: 		Runnable action;
1:7f1e7ab: 		synchronized (this) {
1:7f1e7ab: 			if(!open) {
1:7f1e7ab: 				return;
1:7f1e7ab: 			}
1:7f1e7ab: 			
1:7f1e7ab: 			if(internal && configuration != null) {
1:7f1e7ab: 				// We can ignore the internal call as we've been configured;
1:7f1e7ab: 				return;
1:7f1e7ab: 			}
1:7f1e7ab: 			
1:7f1e7ab: 			ChangeType change = txControlImpl == null ? RECREATE :
1:7f1e7ab: 					txControlImpl.changed(newConfig, txControlReg == null);
1:7f1e7ab: 			switch(change) {
1:7f1e7ab: 				case NONE :
1:7f1e7ab: 					action = () -> {};
1:7f1e7ab: 					break;
1:7f1e7ab: 				case SERVICE_PROPS:
1:7f1e7ab: 					ServiceRegistration<TransactionControl> toUpdate = txControlReg;
1:7f1e7ab: 					TransactionControlImpl implToQuery = txControlImpl;
1:7f1e7ab: 					action = () -> toUpdate.setProperties(implToQuery.getProperties());
1:7f1e7ab: 					break;
1:7f1e7ab: 				case RECREATE :
1:7f1e7ab: 					ServiceRegistration<TransactionControl> toUnregister = txControlReg;
1:7f1e7ab: 					TransactionControlImpl toClose = txControlImpl;
1:7f1e7ab: 					txControlReg = null;
1:7f1e7ab: 					txControlImpl = null;
1:7f1e7ab: 					action = () -> {
1:7f1e7ab: 						
1:7f1e7ab: 							cleanUp(toUnregister, toClose);
1:7f1e7ab: 						
1:7f1e7ab: 							TransactionControlImpl impl = null;
1:7f1e7ab: 							ServiceRegistration<TransactionControl> newReg = null;
1:7f1e7ab: 							try {
1:7f1e7ab: 								impl = new TransactionControlImpl(context, newConfig);
1:7f1e7ab: 								newReg = context.registerService(TransactionControl.class, 
1:7f1e7ab: 												impl, impl.getProperties());
1:7f1e7ab: 							} catch (Exception e) {
1:7f1e7ab: 								if(newReg != null) {
1:7f1e7ab: 									safeUnregister(newReg);
1:7f1e7ab: 								} 
1:7f1e7ab: 								if (impl != null) {
1:2906477: 									impl.close();
1:7f1e7ab: 								}
1:7f1e7ab: 							}
1:7f1e7ab: 							boolean cleanUp = true;
1:7f1e7ab: 							synchronized (Activator.this) {
1:3bca813: 								if(configuration == newConfig && open) {
1:7f1e7ab: 									txControlImpl = impl;
1:7f1e7ab: 									txControlReg = newReg;
1:7f1e7ab: 									cleanUp = false;
1:7f1e7ab: 								}
1:7f1e7ab: 							}
1:7f1e7ab: 							
1:7f1e7ab: 							if(cleanUp) {
1:7f1e7ab: 								cleanUp(newReg, impl);
1:7f1e7ab: 							}
1:7f1e7ab: 						};
1:7f1e7ab: 					
1:7f1e7ab: 					break;
1:7f1e7ab: 				default :
1:7f1e7ab: 					throw new IllegalArgumentException("An unknown change occurred " + change);
1:7f1e7ab: 			}
1:7f1e7ab: 			configuration = newConfig;
1:7f1e7ab: 		}
1:7f1e7ab: 		action.run();
1:7f1e7ab: 	}
1:7f1e7ab: 
1:7f1e7ab: 	private void cleanUp(ServiceRegistration<TransactionControl> toUnregister, 
1:7f1e7ab: 			TransactionControlImpl toClose) {
1:7f1e7ab: 		safeUnregister(toUnregister);
1:7f1e7ab: 		if(toClose != null) {
1:2906477: 			toClose.close();
1:7f1e7ab: 		}
2:78dd69f: 	}
1:78dd69f: 	
1:7f1e7ab: 	private void safeUnregister(ServiceRegistration<?> reg) {
1:7f1e7ab: 		if(reg != null) {
1:7f1e7ab: 			try {
1:7f1e7ab: 				reg.unregister();
1:7f1e7ab: 			} catch (IllegalStateException ise) {
1:7f1e7ab: 				// A No Op
1:7f1e7ab: 			}
1:7f1e7ab: 		}
1:7f1e7ab: 	}
1:7f1e7ab: 
1:7f1e7ab: 	private Map<String, Object> toMap(Dictionary<String, ?> config) {
1:7f1e7ab: 		Map<String, Object> configMap = new HashMap<>();
1:7f1e7ab: 		
1:7f1e7ab: 		if(config != null) {
1:7f1e7ab: 			Enumeration<String> keys = config.keys();
1:7f1e7ab: 			while(keys.hasMoreElements()) {
1:7f1e7ab: 				String key = keys.nextElement();
1:7f1e7ab: 				configMap.put(key, config.get(key));
1:7f1e7ab: 			}
1:7f1e7ab: 		}
1:7f1e7ab: 		return configMap;
1:7f1e7ab: 	}
1:7f1e7ab: 
1:7f1e7ab: 	public static enum ChangeType {
1:7f1e7ab: 		NONE, SERVICE_PROPS, RECREATE;
1:78dd69f: 	}
1:78dd69f: 	
1:7f1e7ab: 	private Dictionary<String, Object> getMSProperties() {
1:78dd69f: 		Dictionary<String, Object> props = new Hashtable<>();
1:7f1e7ab: 		props.put(Constants.SERVICE_PID, PID);
1:7f1e7ab: 		props.put(Constants.SERVICE_DESCRIPTION, "Managed Service for the Apache Aries Transaction Control Service with XA Transactions");
1:7f1e7ab: 		props.put(Constants.SERVICE_VENDOR, "Apache Aries");
1:78dd69f: 		return props;
1:78dd69f: 	}
1:78dd69f: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:3bca813
/////////////////////////////////////////////////////////////////////////
1: 								if(configuration == newConfig && open) {
commit:2906477
/////////////////////////////////////////////////////////////////////////
1: 									impl.close();
/////////////////////////////////////////////////////////////////////////
1: 			toClose.close();
commit:cc2f539
/////////////////////////////////////////////////////////////////////////
1: 	static final String PID = "org.apache.aries.tx.control.service.xa";
commit:7f1e7ab
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.tx.control.service.xa.impl.Activator.ChangeType.RECREATE;
1: 
1: import java.util.Enumeration;
1: import java.util.HashMap;
1: import java.util.Map;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.cm.ManagedService;
0: import org.osgi.service.metatype.annotations.AttributeDefinition;
0: import org.osgi.service.metatype.annotations.ObjectClassDefinition;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: public class Activator implements BundleActivator {
0: 	private static final String PID = "org.apache.aries.tx.control.service.xa";
1: 
0: 	/**
0: 	 * This will be more useful once the OSGi converter exists, for now it just
0: 	 * generates a metatype for this service.
1: 	 */
0: 	@ObjectClassDefinition(pid=PID, description="Apache Aries Transaction Control Service (XA)")
0: 	@interface Config {
0: 		@AttributeDefinition(name="Enable recovery", required=false, description="Enable recovery")
0: 		boolean recovery_enabled() default false;
1: 
0: 		@AttributeDefinition(name="Recovery Log storage folder", required=false, description="Transaction Recovery Log directory")
0: 		boolean recovery_log_dir();
1: 		
0: 		@AttributeDefinition(name="Transaction Timeout", required=false, description="Transaction Timeout in seconds")
0: 		int transaction_timeout() default 300;
1: 	}
1: 	
1: 	private static final Logger logger = LoggerFactory.getLogger(Activator.class);
1: 
1: 	private ServiceRegistration<ManagedService> msReg;
1: 	
1: 	private boolean open;
1: 
1: 	private TransactionControlImpl txControlImpl;
1: 	
1: 	private ServiceRegistration<TransactionControl> txControlReg;
1: 	
1: 	private Map<String, Object> configuration;
1: 
1: 	private BundleContext context;
1: 
1: 	@Override
1: 	public void start(BundleContext context) throws Exception {
1: 		this.context = context;
1: 		
1: 		synchronized (this) {
1: 			open = true;
1: 		}
1: 		
1: 		Dictionary<String, Object> properties = getMSProperties();
1: 		logger.info("Registering for configuration updates {}", properties);
1: 		ManagedService service = c -> configurationUpdated(c, false);
1: 		msReg = context.registerService(ManagedService.class, service, properties);
1: 		
1: 		new Thread(() -> {
1: 			try {
1: 				Thread.sleep(1000);
1: 			} catch (InterruptedException ie) {
1: 				Thread.currentThread().interrupt();
1: 			}
1: 			configurationUpdated(null, true);
1: 		}).start();
1: 	}
1: 
1: 	@Override
1: 	public void stop(BundleContext context) throws Exception {
1: 		safeUnregister(msReg);
1: 		
1: 		ServiceRegistration<TransactionControl> toUnregister;
1: 		TransactionControlImpl toClose;
1: 		synchronized (this) {
1: 			open = false;
1: 			toUnregister = txControlReg;
1: 			txControlReg = null;
1: 			toClose = txControlImpl;
1: 			txControlImpl = null;
1: 			configuration = null;
1: 		}
1: 		cleanUp(toUnregister, toClose);
1: 	}
1: 
1: 	
1: 	private void configurationUpdated(Dictionary<String, ?> config, boolean internal) {
1: 		Map<String,Object> newConfig = toMap(config);
1: 		Runnable action;
1: 		synchronized (this) {
1: 			if(!open) {
1: 				return;
1: 			}
1: 			
1: 			if(internal && configuration != null) {
1: 				// We can ignore the internal call as we've been configured;
1: 				return;
1: 			}
1: 			
1: 			ChangeType change = txControlImpl == null ? RECREATE :
1: 					txControlImpl.changed(newConfig, txControlReg == null);
1: 			switch(change) {
1: 				case NONE :
1: 					action = () -> {};
1: 					break;
1: 				case SERVICE_PROPS:
1: 					ServiceRegistration<TransactionControl> toUpdate = txControlReg;
1: 					TransactionControlImpl implToQuery = txControlImpl;
1: 					action = () -> toUpdate.setProperties(implToQuery.getProperties());
1: 					break;
1: 				case RECREATE :
1: 					ServiceRegistration<TransactionControl> toUnregister = txControlReg;
1: 					TransactionControlImpl toClose = txControlImpl;
1: 					txControlReg = null;
1: 					txControlImpl = null;
1: 					action = () -> {
1: 						
1: 							cleanUp(toUnregister, toClose);
1: 						
1: 							TransactionControlImpl impl = null;
1: 							ServiceRegistration<TransactionControl> newReg = null;
1: 							try {
1: 								impl = new TransactionControlImpl(context, newConfig);
1: 								newReg = context.registerService(TransactionControl.class, 
1: 												impl, impl.getProperties());
1: 							} catch (Exception e) {
1: 								if(newReg != null) {
1: 									safeUnregister(newReg);
1: 								} 
1: 								if (impl != null) {
0: 									impl.destroy();
1: 								}
1: 							}
1: 							boolean cleanUp = true;
1: 							synchronized (Activator.this) {
0: 								if(configuration == newConfig) {
1: 									txControlImpl = impl;
1: 									txControlReg = newReg;
1: 									cleanUp = false;
1: 								}
1: 							}
1: 							
1: 							if(cleanUp) {
1: 								cleanUp(newReg, impl);
1: 							}
1: 						};
1: 					
1: 					break;
1: 				default :
1: 					throw new IllegalArgumentException("An unknown change occurred " + change);
1: 			}
1: 			configuration = newConfig;
1: 		}
1: 		action.run();
1: 	}
1: 
1: 	private void cleanUp(ServiceRegistration<TransactionControl> toUnregister, 
1: 			TransactionControlImpl toClose) {
1: 		safeUnregister(toUnregister);
1: 		if(toClose != null) {
0: 			toClose.destroy();
1: 	private void safeUnregister(ServiceRegistration<?> reg) {
1: 		if(reg != null) {
1: 			try {
1: 				reg.unregister();
1: 			} catch (IllegalStateException ise) {
1: 				// A No Op
1: 			}
1: 		}
1: 	}
1: 
1: 	private Map<String, Object> toMap(Dictionary<String, ?> config) {
1: 		Map<String, Object> configMap = new HashMap<>();
1: 		
1: 		if(config != null) {
1: 			Enumeration<String> keys = config.keys();
1: 			while(keys.hasMoreElements()) {
1: 				String key = keys.nextElement();
1: 				configMap.put(key, config.get(key));
1: 			}
1: 		}
1: 		return configMap;
1: 	}
1: 
1: 	public static enum ChangeType {
1: 		NONE, SERVICE_PROPS, RECREATE;
1: 	private Dictionary<String, Object> getMSProperties() {
1: 		props.put(Constants.SERVICE_PID, PID);
1: 		props.put(Constants.SERVICE_DESCRIPTION, "Managed Service for the Apache Aries Transaction Control Service with XA Transactions");
1: 		props.put(Constants.SERVICE_VENDOR, "Apache Aries");
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	protected TransactionControl getTransactionControl() {
0: 		return new TransactionControlImpl(transactionManager);
commit:78dd69f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.xa.impl;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
0: import javax.transaction.xa.XAException;
1: 
0: import org.apache.aries.tx.control.service.common.activator.AbstractActivator;
0: import org.apache.geronimo.transaction.manager.GeronimoTransactionManager;
0: import org.osgi.service.coordinator.Coordinator;
1: import org.osgi.service.transaction.control.TransactionControl;
1: 
0: public class Activator extends AbstractActivator {
1: 
0: 	private final GeronimoTransactionManager transactionManager;
1: 	
0: 	{
0: 		try {
0: 			transactionManager = new GeronimoTransactionManager();
0: 		} catch (XAException e) {
0: 			throw new RuntimeException("Unable to create the Transaction Manager");
1: 		}
1: 	}
1: 	
0: 	@Override
0: 	protected TransactionControl getTransactionControl(Coordinator c) {
0: 		return new TransactionControlImpl(transactionManager, c);
1: 	}
1: 	
0: 	@Override
0: 	protected Dictionary<String, Object> getProperties() {
1: 		Dictionary<String, Object> props = new Hashtable<>();
0: 		props.put("osgi.local.enabled", Boolean.TRUE);
0: 		props.put("osgi.xa.enabled", Boolean.TRUE);
1: 		return props;
1: 	}
1: }
============================================================================