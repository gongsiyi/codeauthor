1:da163d0: /*
1:da163d0:  * Licensed to the Apache Software Foundation (ASF) under one
1:da163d0:  * or more contributor license agreements.  See the NOTICE file
1:da163d0:  * distributed with this work for additional information
1:da163d0:  * regarding copyright ownership.  The ASF licenses this file
1:da163d0:  * to you under the Apache License, Version 2.0 (the
1:da163d0:  * "License"); you may not use this file except in compliance
1:da163d0:  * with the License.  You may obtain a copy of the License at
1:da163d0:  *
1:da163d0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:da163d0:  *
1:da163d0:  * Unless required by applicable law or agreed to in writing,
1:da163d0:  * software distributed under the License is distributed on an
1:da163d0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:da163d0:  * KIND, either express or implied.  See the License for the
1:da163d0:  * specific language governing permissions and limitations
1:da163d0:  * under the License.
1:da163d0:  */
1:da163d0: package org.apache.aries.blueprint.container;
5:da163d0: 
1:da163d0: import java.util.HashSet;
1:da163d0: import java.util.List;
1:da163d0: import java.util.Set;
1:da163d0: import java.util.concurrent.ExecutorService;
1:da163d0: import java.util.concurrent.LinkedBlockingQueue;
1:da163d0: import java.util.concurrent.RejectedExecutionException;
1:da163d0: import java.util.concurrent.ThreadFactory;
1:da163d0: import java.util.concurrent.ThreadPoolExecutor;
1:da163d0: import java.util.concurrent.TimeUnit;
1:109b82f: import java.util.concurrent.atomic.AtomicBoolean;
1:109b82f: import java.util.concurrent.atomic.AtomicInteger;
1:da163d0: 
1:da163d0: import org.apache.aries.blueprint.di.Recipe;
1:da163d0: import org.apache.aries.quiesce.manager.QuiesceCallback;
1:da163d0: import org.apache.aries.quiesce.participant.QuiesceParticipant;
1:da163d0: import org.osgi.framework.Bundle;
1:da163d0: import org.osgi.framework.BundleContext;
1:da163d0: import org.osgi.framework.ServiceReference;
1:da163d0: 
1:da163d0: public class BlueprintQuiesceParticipant implements QuiesceParticipant 
6:da163d0: {
1:0fb37ff: 	private final BundleContext ctx;
1:0fb37ff: 	private final BlueprintExtender extender;
1:da163d0: 	
1:da163d0: 	public BlueprintQuiesceParticipant(BundleContext context, BlueprintExtender extender)
1:da163d0: 	{
1:da163d0: 		this.ctx = context;
1:da163d0: 		this.extender = extender;
5:da163d0: 	}
1:da163d0: 
1:da163d0: 	/**
1:da163d0: 	 * A Threadpool for running quiesce operations
1:da163d0: 	 */
1:da163d0: 	private final ExecutorService executor = new ThreadPoolExecutor(0, 10, 10, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new ThreadFactory() 
1:da163d0: 	{
1:da163d0: 		public Thread newThread(Runnable r) 
1:da163d0: 		{
1:da163d0: 	        Thread t = new Thread(r, "Blueprint-Container-ThreadPool");
1:da163d0: 	        t.setDaemon(true);
1:da163d0: 	        return t;
1:da163d0: 		}
1:da163d0:     });
1:da163d0: 	
1:da163d0: 	public void quiesce(QuiesceCallback callback, List<Bundle> bundlesToQuiesce) 
1:da163d0: 	{
1:24455ce: 	    boolean shutdownMe = false;
1:da163d0: 		for(Bundle b : bundlesToQuiesce) 
1:da163d0: 		{
1:da163d0: 		  try 
1:da163d0: 		  {
1:da163d0: 		    executor.execute(new QuiesceBundle(callback, b, extender));
1:da163d0: 		  } 
1:da163d0: 		  catch (RejectedExecutionException re) {
1:da163d0: 		  }
1:da163d0: 		  
1:24455ce:           //If we are quiescing, then we need to quiesce this threadpool!
1:24455ce: 		  shutdownMe |= b.equals(ctx.getBundle());
1:da163d0: 		}
1:24455ce: 		
1:24455ce: 		if (shutdownMe) executor.shutdown();
1:da163d0: 	}
1:da163d0: 
1:da163d0:   /**
1:da163d0:    * A runnable Quiesce operation for a single bundle
1:da163d0:    */
1:da163d0: 	private static final class QuiesceBundle implements Runnable 
1:da163d0: 	{
1:da163d0: 		/** The bundle being quiesced */
1:da163d0: 		private final Bundle bundleToQuiesce;
1:0fb37ff: 		private final QuiesceCallback callback;
1:0fb37ff: 		private final BlueprintExtender extender;
1:da163d0: 		
1:da163d0: 		public QuiesceBundle(QuiesceCallback callback, Bundle bundleToQuiesce, 
1:da163d0: 				BlueprintExtender extender) 
1:da163d0: 		{	
1:da163d0: 			super();
1:da163d0: 			this.callback = callback;
1:da163d0: 			this.bundleToQuiesce = bundleToQuiesce;
1:da163d0: 			this.extender = extender;
1:da163d0: 		}
1:da163d0: 
1:da163d0: 		public void run() 
1:da163d0: 		{
1:da163d0: 			BlueprintContainerImpl container = extender.getBlueprintContainerImpl(bundleToQuiesce);
1:da163d0: 						
1:0fb37ff: 			// have we got an actual blueprint bundle
1:0fb37ff: 			if (container != null) {
1:0fb37ff:   			BlueprintRepository repository = container.getRepository();
1:0fb37ff:   			Set<String> names = repository.getNames();
1:0fb37ff:   			container.quiesce();
1:0fb37ff:   			
1:109b82f:   			QuiesceDelegatingCallback qdcbk = new QuiesceDelegatingCallback(callback, bundleToQuiesce);
1:0fb37ff:   			for (String name: names)
1:0fb37ff:   			{
1:0fb37ff:   				Recipe recipe = repository.getRecipe(name);
1:0fb37ff:   				if (recipe instanceof ServiceRecipe)
1:0fb37ff:   				{
1:109b82f:   					qdcbk.callCountDown.incrementAndGet();
1:109b82f:   					((ServiceRecipe)recipe).quiesce(qdcbk);
1:0fb37ff:   				}
1:0fb37ff:   			}
1:109b82f:   			//Either there were no services and we win, or there were services but they
1:109b82f:   			//have all finished and we win, or they still have tidy up to do, but we
1:109b82f:   			//end up at 0 eventually
1:109b82f:   			qdcbk.callback();
1:109b82f: 		  } else {
1:0fb37ff: 			  // for non-Blueprint bundles just call return completed
1:0fb37ff: 			  
2:0fb37ff: 			  callback.bundleQuiesced(bundleToQuiesce);
1:0fb37ff: 			}
1:da163d0: 		}
1:da163d0: 	}
1:da163d0: 	
1:da163d0:     /**
1:da163d0: 	 * A wrapper to protect our internals from the Quiesce API so that we can make it
1:da163d0: 	 * an optional dependency
1:da163d0: 	 */
1:da163d0: 	private static final class QuiesceDelegatingCallback implements DestroyCallback 
1:0fb37ff: 	{
1:da163d0: 	  
1:da163d0: 	  /** The callback to delegate to */
1:da163d0: 	  private final QuiesceCallback callback;
1:da163d0: 	
1:da163d0: 	  /** The single bundle being quiesced by this DestroyCallback */
1:da163d0: 	  private final Bundle toQuiesce;
1:109b82f: 	  /** A countdown that starts at one so it can't finish before we do! */
1:109b82f: 	  private final AtomicInteger callCountDown = new AtomicInteger(1);
1:da163d0: 	    
1:da163d0: 	  public QuiesceDelegatingCallback(QuiesceCallback cbk, Bundle b) 
1:da163d0: 	  {
1:da163d0: 	    callback = cbk;
1:da163d0: 	    toQuiesce = b;
1:da163d0: 	  }
1:da163d0: 	    
1:109b82f: 	  public void callback() 
1:da163d0: 	  {
1:109b82f: 	    if (callCountDown.decrementAndGet() == 0)
1:da163d0: 	    {
1:da163d0: 	 	  	callback.bundleQuiesced(toQuiesce);
1:da163d0: 	    }
1:da163d0: 	  }
1:da163d0: 	}
1:da163d0: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:109b82f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:   			QuiesceDelegatingCallback qdcbk = new QuiesceDelegatingCallback(callback, bundleToQuiesce);
1:   					qdcbk.callCountDown.incrementAndGet();
1:   					((ServiceRecipe)recipe).quiesce(qdcbk);
1:   			//Either there were no services and we win, or there were services but they
1:   			//have all finished and we win, or they still have tidy up to do, but we
1:   			//end up at 0 eventually
1:   			qdcbk.callback();
1: 		  } else {
/////////////////////////////////////////////////////////////////////////
1: 	  /** A countdown that starts at one so it can't finish before we do! */
1: 	  private final AtomicInteger callCountDown = new AtomicInteger(1);
1: 	  public void callback() 
1: 	    if (callCountDown.decrementAndGet() == 0)
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:24455ce
/////////////////////////////////////////////////////////////////////////
1: 	    boolean shutdownMe = false;
/////////////////////////////////////////////////////////////////////////
1:           //If we are quiescing, then we need to quiesce this threadpool!
1: 		  shutdownMe |= b.equals(ctx.getBundle());
1: 		
1: 		if (shutdownMe) executor.shutdown();
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:0fb37ff
/////////////////////////////////////////////////////////////////////////
1: 	private final BundleContext ctx;
1: 	private final BlueprintExtender extender;
/////////////////////////////////////////////////////////////////////////
1: 		private final QuiesceCallback callback;
1: 		private final BlueprintExtender extender;
/////////////////////////////////////////////////////////////////////////
1: 			// have we got an actual blueprint bundle
1: 			if (container != null) {
1:   			BlueprintRepository repository = container.getRepository();
1:   			Set<String> names = repository.getNames();
1:   			container.quiesce();
0:   			boolean hasServices = false;
1:   			
1:   			for (String name: names)
1:   			{
1:   				Recipe recipe = repository.getRecipe(name);
1:   				if (recipe instanceof ServiceRecipe)
1:   				{
0:   					hasServices = true;
0:   					((ServiceRecipe)recipe).quiesce(new QuiesceDelegatingCallback(callback, bundleToQuiesce));
1:   				}
1:   			}
0:   			//If the bundle has no services we can quiesce immediately
0:   			if (!hasServices)
1:   			{
1:   				callback.bundleQuiesced(bundleToQuiesce);
1:   			}
0: 			} else {
1: 			  // for non-Blueprint bundles just call return completed
1: 			  
1: 			  callback.bundleQuiesced(bundleToQuiesce);
/////////////////////////////////////////////////////////////////////////
0: 	  private final Set<String> services = new HashSet<String>();
author:Holly Cummins
-------------------------------------------------------------------------------
commit:da163d0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.container;
1: 
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.RejectedExecutionException;
1: import java.util.concurrent.ThreadFactory;
1: import java.util.concurrent.ThreadPoolExecutor;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.aries.blueprint.di.Recipe;
1: import org.apache.aries.quiesce.manager.QuiesceCallback;
1: import org.apache.aries.quiesce.participant.QuiesceParticipant;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: 
1: public class BlueprintQuiesceParticipant implements QuiesceParticipant 
1: {
0: 	private BundleContext ctx;
0: 	private BlueprintExtender extender;
1: 	
1: 	public BlueprintQuiesceParticipant(BundleContext context, BlueprintExtender extender)
1: 	{
1: 		this.ctx = context;
1: 		this.extender = extender;
1: 	}
1: 
1: 	/**
1: 	 * A Threadpool for running quiesce operations
1: 	 */
1: 	private final ExecutorService executor = new ThreadPoolExecutor(0, 10, 10, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new ThreadFactory() 
1: 	{
1: 		public Thread newThread(Runnable r) 
1: 		{
1: 	        Thread t = new Thread(r, "Blueprint-Container-ThreadPool");
1: 	        t.setDaemon(true);
1: 	        return t;
1: 		}
1:     });
1: 	
1: 	public void quiesce(QuiesceCallback callback, List<Bundle> bundlesToQuiesce) 
1: 	{
1: 		for(Bundle b : bundlesToQuiesce) 
1: 		{
1: 		  try 
1: 		  {
1: 		    executor.execute(new QuiesceBundle(callback, b, extender));
1: 		  } 
1: 		  catch (RejectedExecutionException re) {
1: 		  }
1: 		  
0: 		  //If we are quiescing, then we need to quiesce this threadpool!
0: 		  if(b.equals(ctx.getBundle()))
0: 		    executor.shutdown();
1: 		}
1: 	}
1: 
1:   /**
1:    * A runnable Quiesce operation for a single bundle
1:    */
1: 	private static final class QuiesceBundle implements Runnable 
1: 	{
1: 		/** The bundle being quiesced */
1: 		private final Bundle bundleToQuiesce;
0: 		private QuiesceCallback callback;
0: 		private BlueprintExtender extender;
1: 		
1: 		public QuiesceBundle(QuiesceCallback callback, Bundle bundleToQuiesce, 
1: 				BlueprintExtender extender) 
1: 		{	
1: 			super();
1: 			this.callback = callback;
1: 			this.bundleToQuiesce = bundleToQuiesce;
1: 			this.extender = extender;
1: 		}
1: 
1: 		public void run() 
1: 		{
1: 			BlueprintContainerImpl container = extender.getBlueprintContainerImpl(bundleToQuiesce);
1: 						
0: 			BlueprintRepository repository = container.getRepository();
0: 			Set<String> names = repository.getNames();
0: 			container.quiesce();
0: 			boolean hasServices = false;
1: 			
0: 			for (String name: names)
1: 			{
0: 				Recipe recipe = repository.getRecipe(name);
0: 				if (recipe instanceof ServiceRecipe)
1: 				{
0: 					hasServices = true;
0: 					((ServiceRecipe)recipe).quiesce(new QuiesceDelegatingCallback(callback, bundleToQuiesce));
1: 				}
1: 			}
0: 			//If the bundle has no services we can quiesce immediately
0: 			if (!hasServices)
1: 			{
0: 				callback.bundleQuiesced(bundleToQuiesce);
1: 			}
1: 		}
1: 	}
1: 	
1:     /**
1: 	 * A wrapper to protect our internals from the Quiesce API so that we can make it
1: 	 * an optional dependency
1: 	 */
1: 	private static final class QuiesceDelegatingCallback implements DestroyCallback 
1: 	{
1: 	  
1: 	  /** The callback to delegate to */
1: 	  private final QuiesceCallback callback;
1: 	
1: 	  /** The single bundle being quiesced by this DestroyCallback */
1: 	  private final Bundle toQuiesce;
1: 	
0: 	  private Set<String> services = new HashSet<String>();
1: 	    
1: 	  public QuiesceDelegatingCallback(QuiesceCallback cbk, Bundle b) 
1: 	  {
1: 	    callback = cbk;
1: 	    toQuiesce = b;
1: 	      
0: 	    ServiceReference[] serviceRefs = b.getRegisteredServices();
1: 	    
0: 	    for (ServiceReference ref : serviceRefs)
1: 	    {
0: 	  	  services.add(b.getBundleContext().getService(ref).toString());
1: 	    }
1: 	  }
1: 	    
0: 	  public void callback(Object key) 
1: 	  {
0: 	    if (key != null && services.remove(key.toString()) && services.isEmpty())
1: 	    {
1: 	 	  	callback.bundleQuiesced(toQuiesce);
1: 	    }
1: 	  }
1: 	}
1: }
============================================================================