1:d6eb080: /*
1:d6eb080:  * Licensed under the Apache License, Version 2.0 (the "License");
1:d6eb080:  * you may not use this file except in compliance with the License.
1:d6eb080:  * You may obtain a copy of the License at
1:d6eb080:  *
1:d6eb080:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d6eb080:  *
1:d6eb080:  * Unless required by applicable law or agreed to in writing, software
1:d6eb080:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d6eb080:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d6eb080:  * See the License for the specific language governing permissions and
1:d6eb080:  * limitations under the License.
1:d6eb080:  */
1:d6eb080: package org.apache.aries.subsystem.core.archive;
1:d6eb080: 
1:d6eb080: import java.util.Collection;
1:d6eb080: import java.util.Collections;
1:d6eb080: import java.util.HashMap;
1:d6eb080: import java.util.Map;
1:d6eb080: 
1:d6eb080: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
1:d6eb080: import org.osgi.framework.namespace.PackageNamespace;
1:d6eb080: import org.osgi.resource.Resource;
1:d6eb080: 
1:d6eb080: public class DynamicImportPackageRequirement extends AbstractRequirement {
1:d6eb080: 	public static final String DIRECTIVE_FILTER = PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE;
1:d6eb080: 	public static final String NAMESPACE = PackageNamespace.PACKAGE_NAMESPACE;
1:d6eb080: 	
1:d6eb080: 	private final Map<String, String> directives;
1:d6eb080: 	private final String packageName;
1:d6eb080: 	private final Resource resource;
1:d6eb080: 	
1:d6eb080: 	public DynamicImportPackageRequirement(String pkg, DynamicImportPackageHeader.Clause clause, Resource resource) {
1:d6eb080: 		packageName = pkg;
1:d6eb080: 		Collection<Directive> clauseDirectives = clause.getDirectives();
1:d6eb080: 		directives = new HashMap<String, String>(clauseDirectives.size() + 1);
1:d6eb080: 		for (Directive directive : clauseDirectives)
1:d6eb080: 			directives.put(directive.getName(), directive.getValue());
1:d6eb080: 		StringBuilder filter = new StringBuilder("(&(").append(NAMESPACE)
1:d6eb080: 				.append('=').append(pkg).append(')');
1:d6eb080: 		VersionRangeAttribute versionRange = clause.getVersionRangeAttribute();
1:d6eb080: 		if (versionRange != null) {
1:d6eb080: 			versionRange.appendToFilter(filter);
1:d6eb080: 		}
1:d6eb080: 		directives.put(DIRECTIVE_FILTER, filter.append(')').toString());
1:d6eb080: 		this.resource = resource;
1:d6eb080: 	}
1:d6eb080: 	
1:d6eb080: 	@Override
1:d6eb080: 	public Map<String, Object> getAttributes() {
1:d6eb080: 		return Collections.emptyMap();
1:d6eb080: 	}
1:d6eb080: 
1:d6eb080: 	@Override
1:d6eb080: 	public Map<String, String> getDirectives() {
1:d6eb080: 		return Collections.unmodifiableMap(directives);
1:d6eb080: 	}
1:d6eb080: 
1:d6eb080: 	@Override
1:d6eb080: 	public String getNamespace() {
1:d6eb080: 		return NAMESPACE;
1:d6eb080: 	}
1:d6eb080: 	
1:d6eb080: 	public String getPackageName() {
1:d6eb080: 		return packageName;
1:d6eb080: 	}
1:d6eb080: 
1:d6eb080: 	@Override
1:d6eb080: 	public Resource getResource() {
1:d6eb080: 		return resource;
1:d6eb080: 	}
1:d6eb080: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.resource.Resource;
1: 
1: public class DynamicImportPackageRequirement extends AbstractRequirement {
1: 	public static final String DIRECTIVE_FILTER = PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE;
1: 	public static final String NAMESPACE = PackageNamespace.PACKAGE_NAMESPACE;
1: 	
1: 	private final Map<String, String> directives;
1: 	private final String packageName;
1: 	private final Resource resource;
1: 	
1: 	public DynamicImportPackageRequirement(String pkg, DynamicImportPackageHeader.Clause clause, Resource resource) {
1: 		packageName = pkg;
1: 		Collection<Directive> clauseDirectives = clause.getDirectives();
1: 		directives = new HashMap<String, String>(clauseDirectives.size() + 1);
1: 		for (Directive directive : clauseDirectives)
1: 			directives.put(directive.getName(), directive.getValue());
1: 		StringBuilder filter = new StringBuilder("(&(").append(NAMESPACE)
1: 				.append('=').append(pkg).append(')');
1: 		VersionRangeAttribute versionRange = clause.getVersionRangeAttribute();
1: 		if (versionRange != null) {
1: 			versionRange.appendToFilter(filter);
1: 		}
1: 		directives.put(DIRECTIVE_FILTER, filter.append(')').toString());
1: 		this.resource = resource;
1: 	}
1: 	
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.emptyMap();
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.unmodifiableMap(directives);
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
1: 		return NAMESPACE;
1: 	}
1: 	
1: 	public String getPackageName() {
1: 		return packageName;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================