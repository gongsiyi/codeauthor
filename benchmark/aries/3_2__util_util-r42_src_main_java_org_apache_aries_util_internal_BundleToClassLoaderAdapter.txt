1:004adac: /*
1:004adac:  * Licensed to the Apache Software Foundation (ASF) under one
1:004adac:  * or more contributor license agreements.  See the NOTICE file
1:004adac:  * distributed with this work for additional information
1:004adac:  * regarding copyright ownership.  The ASF licenses this file
1:004adac:  * to you under the Apache License, Version 2.0 (the
1:004adac:  * "License"); you may not use this file except in compliance
1:004adac:  * with the License.  You may obtain a copy of the License at
1:004adac:  *
1:004adac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:004adac:  *
1:004adac:  * Unless required by applicable law or agreed to in writing,
1:004adac:  * software distributed under the License is distributed on an
1:004adac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:004adac:  * KIND, either express or implied.  See the License for the
1:004adac:  * specific language governing permissions and limitations
1:004adac:  * under the License.
1:76e1d79:  */
1:b6c4135: package org.apache.aries.util.internal;
8:004adac: 
1:004adac: import java.io.IOException;
1:004adac: import java.io.InputStream;
1:004adac: import java.net.URL;
1:2357f0e: import java.security.AccessController;
1:2357f0e: import java.security.PrivilegedAction;
1:2357f0e: import java.security.PrivilegedActionException;
1:2357f0e: import java.security.PrivilegedExceptionAction;
1:004adac: import java.util.ArrayList;
1:004adac: import java.util.Collections;
1:004adac: import java.util.Enumeration;
1:004adac: 
1:004adac: import org.osgi.framework.Bundle;
1:4c81819: import org.osgi.framework.BundleReference;
1:004adac: 
1:4c81819: public class BundleToClassLoaderAdapter extends ClassLoader implements BundleReference
1:004adac: {
1:b6c4135:   private final Bundle b;
1:2357f0e: 
1:004adac:   public BundleToClassLoaderAdapter(Bundle bundle)
1:004adac:   {
1:004adac:     b = bundle;
1:004adac:   }
1:2357f0e: 
1:b6c4135:   @Override
1:2357f0e:   public URL getResource(final String name)
1:004adac:   {
1:2357f0e:     return AccessController.doPrivileged(new PrivilegedAction<URL>() {
1:b6c4135: 	public URL run()
1:2357f0e:       {
1:2357f0e:         return b.getResource(name);
1:2357f0e:       }
1:2357f0e:     });
1:004adac:   }
1:004adac: 
1:b6c4135:   @Override
1:004adac:   public InputStream getResourceAsStream(String name)
1:004adac:   {
1:004adac:     URL url = getResource(name);
1:2357f0e: 
1:004adac:     InputStream result = null;
1:2357f0e: 
1:004adac:     if (url != null) {
1:004adac:       try {
1:004adac:         result = url.openStream();
1:004adac:       } catch (IOException e) {
1:004adac:       }
1:004adac:     }
1:2357f0e: 
1:004adac:     return result;
1:004adac:   }
1:004adac: 
1:b6c4135:   @Override
1:2357f0e:   public Enumeration<URL> getResources(final String name) throws IOException
1:004adac:   {
1:2357f0e:     Enumeration<URL> urls;
1:2357f0e:     try {
1:2357f0e:       urls = AccessController.doPrivileged(new PrivilegedExceptionAction<Enumeration<URL>>() {
1:b6c4135: 		@SuppressWarnings("unchecked")
1:2357f0e:         public Enumeration<URL> run() throws IOException
1:2357f0e:         {
1:2357f0e:           return b.getResources(name);
1:2357f0e:         }
1:2357f0e:       });
1:2357f0e:     } catch (PrivilegedActionException e) {
1:2357f0e:       Exception cause = e.getException();
1:2357f0e: 
1:2357f0e:       if (cause instanceof IOException) throw (IOException)cause;
1:2357f0e:       if (cause instanceof RuntimeException) throw (RuntimeException)cause;
1:a0ebbc7: 
1:a0ebbc7:       IOException ioe = new IOException(name);
1:a0ebbc7:       ioe.initCause(cause);
1:a0ebbc7:       throw ioe;
1:2357f0e:     }
1:2357f0e: 
1:004adac:     if (urls == null) {
1:004adac:       urls = Collections.enumeration(new ArrayList<URL>());
1:004adac:     }
1:2357f0e: 
1:004adac:     return urls;
1:004adac:   }
1:004adac: 
1:a326a17:   /*
1:a326a17:    * Notes we overwrite loadClass rather than findClass because we don't want to delegate
1:a326a17:    * to the default classloader, only the bundle.
1:a326a17:    * 
1:a326a17:    * Also note that ClassLoader#loadClass(String) by javadoc on ClassLoader delegates
1:a326a17:    * to this method, so we don't need to overwrite it separately.
1:a326a17:    * 
1:a326a17:    * (non-Javadoc)
1:a326a17:    * @see java.lang.ClassLoader#loadClass(java.lang.String, boolean)
1:a326a17:    */  
1:b6c4135:   @Override
1:a326a17:   public Class<?> loadClass(final String name, boolean resolve) throws ClassNotFoundException
1:004adac:   {
1:2357f0e:     try {
1:a326a17:       Class<?> result = AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {
1:f8e6603:         public Class<?> run() throws ClassNotFoundException
1:2357f0e:         {
1:2357f0e:           return b.loadClass(name);
1:2357f0e:         }
1:2357f0e:       });
1:a326a17:       
1:a326a17:       if (resolve) resolveClass(result);
1:a326a17:       
1:a326a17:       return result;
1:2357f0e:     } catch (PrivilegedActionException e) {
1:2357f0e:       Exception cause = e.getException();
1:2357f0e: 
1:2357f0e:       if (cause instanceof ClassNotFoundException) throw (ClassNotFoundException)cause;
1:2357f0e:       if (cause instanceof RuntimeException) throw (RuntimeException)cause;
1:2357f0e: 
1:2357f0e:       throw new ClassNotFoundException(name, cause);
1:2357f0e:     }
1:004adac:   }
1:4c81819: 
1:4c81819:   public Bundle getBundle()
1:4c81819:   {
1:4c81819:     return b;
1:4c81819:   }
1:004adac: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:f8e6603
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         public Class<?> run() throws ClassNotFoundException
/////////////////////////////////////////////////////////////////////////
commit:a326a17
/////////////////////////////////////////////////////////////////////////
1:   /*
1:    * Notes we overwrite loadClass rather than findClass because we don't want to delegate
1:    * to the default classloader, only the bundle.
1:    * 
1:    * Also note that ClassLoader#loadClass(String) by javadoc on ClassLoader delegates
1:    * to this method, so we don't need to overwrite it separately.
1:    * 
1:    * (non-Javadoc)
1:    * @see java.lang.ClassLoader#loadClass(java.lang.String, boolean)
1:    */  
1:   public Class<?> loadClass(final String name, boolean resolve) throws ClassNotFoundException
1:       Class<?> result = AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {
1:       
1:       if (resolve) resolveClass(result);
1:       
1:       return result;
commit:a0ebbc7
/////////////////////////////////////////////////////////////////////////
1: 
1:       IOException ioe = new IOException(name);
1:       ioe.initCause(cause);
1:       throw ioe;
commit:b6c4135
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.internal;
/////////////////////////////////////////////////////////////////////////
1:   private final Bundle b;
/////////////////////////////////////////////////////////////////////////
1:       @Override
1: 	public URL run()
/////////////////////////////////////////////////////////////////////////
1:         @Override
1: 		@SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1:         @Override
0: 		public Class<?> run() throws ClassNotFoundException
/////////////////////////////////////////////////////////////////////////
1:   @Override
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:76e1d79
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * @deprecated Please use AriesFrameworkUtil.getClassLoader to get a class loader for a bundle instead of this method
1:  */
0: @Deprecated
commit:2357f0e
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:   public URL getResource(final String name)
1:     return AccessController.doPrivileged(new PrivilegedAction<URL>() {
0:       public URL run()
1:       {
1:         return b.getResource(name);
1:       }
1:     });
1: 
1: 
1: 
1:   public Enumeration<URL> getResources(final String name) throws IOException
1:     Enumeration<URL> urls;
1:     try {
1:       urls = AccessController.doPrivileged(new PrivilegedExceptionAction<Enumeration<URL>>() {
0:         @SuppressWarnings("unchecked")
1:         public Enumeration<URL> run() throws IOException
1:         {
1:           return b.getResources(name);
1:         }
1:       });
1:     } catch (PrivilegedActionException e) {
1:       Exception cause = e.getException();
1: 
1:       if (cause instanceof IOException) throw (IOException)cause;
1:       if (cause instanceof RuntimeException) throw (RuntimeException)cause;
0:       throw new IOException(name, cause);
1:     }
1: 
1: 
0:   public Class<?> loadClass(final String name) throws ClassNotFoundException
1:     try {
0:       return AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {
0:         public Class<?> run() throws ClassNotFoundException
1:         {
1:           return b.loadClass(name);
1:         }
1:       });
1:     } catch (PrivilegedActionException e) {
1:       Exception cause = e.getException();
1: 
1:       if (cause instanceof ClassNotFoundException) throw (ClassNotFoundException)cause;
1:       if (cause instanceof RuntimeException) throw (RuntimeException)cause;
1: 
1:       throw new ClassNotFoundException(name, cause);
1:     }
commit:4c81819
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleReference;
1: public class BundleToClassLoaderAdapter extends ClassLoader implements BundleReference
/////////////////////////////////////////////////////////////////////////
1: 
1:   public Bundle getBundle()
1:   {
1:     return b;
1:   }
commit:004adac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
0: package org.apache.aries.util;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Enumeration;
1: 
1: import org.osgi.framework.Bundle;
1: 
0: public class BundleToClassLoaderAdapter extends ClassLoader
1: {
0:   private Bundle b;
1:   
1:   public BundleToClassLoaderAdapter(Bundle bundle)
1:   {
1:     b = bundle;
1:   }
1:   
0:   @Override
0:   public URL getResource(String name)
1:   {
0:     return b.getResource(name);
1:   }
1: 
0:   @Override
1:   public InputStream getResourceAsStream(String name)
1:   {
1:     URL url = getResource(name);
1:     
1:     InputStream result = null;
1:     
1:     if (url != null) {
1:       try {
1:         result = url.openStream();
1:       } catch (IOException e) {
0:         // TODO Auto-generated catch block
0:         e.printStackTrace();
1:       }
1:     }
1:     
1:     return result;
1:   }
1: 
0:   @Override
0:   public Enumeration<URL> getResources(String name) throws IOException
1:   {
0:     @SuppressWarnings("unchecked")
0:     Enumeration<URL> urls = b.getResources(name);
1:     
1:     if (urls == null) {
1:       urls = Collections.enumeration(new ArrayList<URL>());
1:     }
1:     
1:     return urls;
1:   }
1: 
0:   @Override
0:   public Class<?> loadClass(String name) throws ClassNotFoundException
1:   {
0:     return b.loadClass(name);
1:   }
1: }
============================================================================