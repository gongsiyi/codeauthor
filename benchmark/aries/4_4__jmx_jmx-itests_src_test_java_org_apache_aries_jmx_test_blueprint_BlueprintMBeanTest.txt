1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.test.blueprint;
1:dbf926a: 
1:fdf3952: import static org.junit.Assert.assertEquals;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.composite;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:dbf926a: 
1:dbf926a: import java.util.Arrays;
1:dbf926a: 
1:0a8778f: import javax.inject.Inject;
1:fdf3952: import javax.management.MBeanServerInvocationHandler;
1:fdf3952: import javax.management.ObjectName;
1:fdf3952: import javax.management.openmbean.TabularData;
1:dbf926a: 
1:fdf3952: import org.apache.aries.jmx.AbstractIntegrationTest;
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintStateMBean;
1:fdf3952: import org.apache.aries.jmx.test.blueprint.framework.BeanPropertyValidator;
1:fdf3952: import org.apache.aries.jmx.test.blueprint.framework.BeanValidator;
1:fdf3952: import org.apache.aries.jmx.test.blueprint.framework.BlueprintEventValidator;
1:fdf3952: import org.apache.aries.jmx.test.blueprint.framework.CollectionValidator;
1:fdf3952: import org.apache.aries.jmx.test.blueprint.framework.MapEntryValidator;
1:fdf3952: import org.apache.aries.jmx.test.blueprint.framework.RefValidator;
1:fdf3952: import org.apache.aries.jmx.test.blueprint.framework.ReferenceListValidator;
1:fdf3952: import org.apache.aries.jmx.test.blueprint.framework.ReferenceListenerValidator;
1:fdf3952: import org.apache.aries.jmx.test.blueprint.framework.ReferenceValidator;
1:fdf3952: import org.apache.aries.jmx.test.blueprint.framework.RegistrationListenerValidator;
1:fdf3952: import org.apache.aries.jmx.test.blueprint.framework.ServiceValidator;
1:fdf3952: import org.apache.aries.jmx.test.blueprint.framework.ValueValidator;
1:0a8778f: import org.junit.Before;
1:fdf3952: import org.junit.Test;
1:0a8778f: import org.ops4j.pax.exam.Configuration;
1:fdf3952: import org.ops4j.pax.exam.CoreOptions;
1:fdf3952: import org.ops4j.pax.exam.Option;
1:0a8778f: import org.ops4j.pax.exam.util.Filter;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.InvalidSyntaxException;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.service.blueprint.container.BlueprintContainer;
1:dbf926a: 
1:fdf3952: public class BlueprintMBeanTest extends AbstractIntegrationTest {
1:0a8778f: 	@Inject
1:0a8778f: 	@Filter("(osgi.blueprint.container.symbolicname=org.apache.aries.blueprint)")
1:0a8778f: 	BlueprintContainer blueprintExtender;
1:0a8778f: 	
1:0a8778f: 	@Inject
1:0a8778f: 	@Filter("(osgi.blueprint.container.symbolicname=org.apache.aries.blueprint.sample)")
1:0a8778f: 	BlueprintContainer blueprintSample;
1:0a8778f: 
1:0a8778f: 	private Bundle extender;
1:0a8778f: 	private Bundle sample;
1:dbf926a: 
1:fdf3952:     @Configuration
1:0a8778f:     public Option[] configuration() {
1:0a8778f:         return CoreOptions.options(
1:0a8778f:         		jmxRuntime(),
1:0a8778f:         		blueprint(),
1:0a8778f:         		mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.blueprint").versionAsInProject(),
1:0a8778f:         		mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").versionAsInProject()
1:fdf3952:         );
1:dbf926a:     }
1:dbf926a: 
1:0a8778f: 	protected Option blueprint() {
1:0a8778f: 		return composite(
1:fa32bea: 				mavenBundle("org.ow2.asm", "asm-debug-all").versionAsInProject(),
1:0a8778f: 				mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1:0a8778f: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:0a8778f: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.jexl.evaluator").versionAsInProject(),
1:0a8778f: 				mavenBundle("org.apache.commons", "commons-jexl").versionAsInProject()
1:0a8778f: 				);
1:0a8778f: 	}
1:0a8778f: 	
1:0a8778f: 	@Before
1:0a8778f: 	public void setup() {
1:0a8778f: 		extender = getBundleByName("org.apache.aries.blueprint");
1:0a8778f: 		sample = getBundleByName("org.apache.aries.blueprint.sample");
1:0a8778f: 	}
1:dbf926a: 
1:fdf3952:     @Test
1:0a8778f:     public void testBlueprintStateMBean() throws Exception {
1:0a8778f:         BlueprintStateMBean stateProxy = getMBean(BlueprintStateMBean.OBJECTNAME, BlueprintStateMBean.class);
1:dbf926a: 
1:fdf3952:         // test getBlueprintBundleIds
1:fdf3952:         long[] bpBundleIds = stateProxy.getBlueprintBundleIds();
1:dbf926a:         assertEquals("The blueprint bundle ids are: " + Arrays.toString(bpBundleIds), 3, bpBundleIds.length);
1:fdf3952:         // test getLastEvent
1:0a8778f:         BlueprintEventValidator sampleValidator = new BlueprintEventValidator(sample.getBundleId(), extender.getBundleId(), 2);
1:0a8778f:         sampleValidator.validate(stateProxy.getLastEvent(sample.getBundleId()));
1:fdf3952:         // test getLastEvents
1:fdf3952:         TabularData lastEvents = stateProxy.getLastEvents();
1:fdf3952:         assertEquals(BlueprintStateMBean.OSGI_BLUEPRINT_EVENTS_TYPE,lastEvents.getTabularType());
1:0a8778f:         sampleValidator.validate(lastEvents.get(new Long[]{sample.getBundleId()}));
1:0a8778f:     }
1:0a8778f:     
1:0a8778f:     @Test
1:0a8778f:     public void testBlueprintMetaDataMBean() throws Exception {
1:fdf3952:         //find the Blueprint Sample bundle's container service id
1:fdf3952:         String filter = "(&(osgi.blueprint.container.symbolicname=" // no similar one in interfaces
1:0a8778f:                 + sample.getSymbolicName() + ")(osgi.blueprint.container.version=" + sample.getVersion() + "))";
1:988cc71:         ServiceReference[] serviceReferences = null;
1:fdf3952:         try {
1:fdf3952:             serviceReferences = bundleContext.getServiceReferences(BlueprintContainer.class.getName(), filter);
1:fdf3952:         } catch (InvalidSyntaxException e) {
1:fdf3952:             throw new RuntimeException(e);
4:fdf3952:         }
1:fdf3952:         long sampleBlueprintContainerServiceId = (Long) serviceReferences[0].getProperty(Constants.SERVICE_ID);
1:dbf926a: 
2:fdf3952:         //retrieve the proxy object
1:fdf3952:         BlueprintMetadataMBean metadataProxy = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, new ObjectName(BlueprintMetadataMBean.OBJECTNAME), BlueprintMetadataMBean.class, false);
1:dbf926a: 
1:fdf3952:         // test getBlueprintContainerServiceIds
1:fdf3952:         long[] bpContainerServiceIds = metadataProxy.getBlueprintContainerServiceIds();
1:dbf926a:         assertEquals(3, bpContainerServiceIds.length);
1:dbf926a: 
1:fdf3952:         // test getBlueprintContainerServiceId
1:0a8778f:         assertEquals(sampleBlueprintContainerServiceId, metadataProxy.getBlueprintContainerServiceId(sample.getBundleId()));
1:dbf926a: 
1:fdf3952:         // test getComponentMetadata
1:fdf3952:         // bean: foo
1:fdf3952:         BeanValidator bv_foo = new BeanValidator("org.apache.aries.blueprint.sample.Foo", "init", "destroy");
1:dbf926a: 
1:0a8778f:         BeanPropertyValidator bpv_a = property("a", "5");
1:0a8778f:         BeanPropertyValidator bpv_b = property("b", "-1");
1:fdf3952:         BeanPropertyValidator bpv_bar = new BeanPropertyValidator("bar");
1:fdf3952:         bpv_bar.setObjectValueValidator(new RefValidator("bar"));
1:0a8778f:         BeanPropertyValidator bpv_currency = property("currency", "PLN");
1:0a8778f:         BeanPropertyValidator bpv_date = property("date", "2009.04.17");
1:dbf926a: 
1:fdf3952:         bv_foo.addPropertyValidators(bpv_a, bpv_b, bpv_bar, bpv_currency, bpv_date);
1:fdf3952:         bv_foo.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "foo"));
1:dbf926a: 
1:fdf3952:         // bean: bar
1:0a8778f:         BeanPropertyValidator bpv_value = property("value", "Hello FooBar");
1:fdf3952:         BeanPropertyValidator bpv_context = new BeanPropertyValidator("context");
1:fdf3952:         bpv_context.setObjectValueValidator(new RefValidator("blueprintBundleContext"));
1:dbf926a: 
1:fdf3952:         CollectionValidator cv = new CollectionValidator("java.util.List");
1:0a8778f:         cv.addCollectionValueValidators(
1:0a8778f:         		new ValueValidator("a list element"), 
1:0a8778f:         		new ValueValidator("5", "java.lang.Integer"));
1:fdf3952:         BeanPropertyValidator bpv_list = new BeanPropertyValidator("list");
1:fdf3952:         bpv_list.setObjectValueValidator(cv);
1:dbf926a: 
1:fdf3952:         BeanValidator bv_bar = new BeanValidator("org.apache.aries.blueprint.sample.Bar");
1:fdf3952:         bv_bar.addPropertyValidators(bpv_value, bpv_context, bpv_list);
1:fdf3952:         bv_bar.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "bar"));
1:dbf926a: 
1:fdf3952:         // service: ref=foo, no componentId set. So using it to test getComponentIdsByType.
1:fdf3952:         String[] serviceComponentIds = metadataProxy.getComponentIdsByType(sampleBlueprintContainerServiceId, BlueprintMetadataMBean.SERVICE_METADATA);
1:fdf3952:         assertEquals("There should be two service components in this sample", 2, serviceComponentIds.length);
1:dbf926a: 
1:fdf3952:         MapEntryValidator mev = new MapEntryValidator();
1:fdf3952:         mev.setKeyValueValidator(new ValueValidator("key"), new ValueValidator("value"));
1:dbf926a: 
1:fdf3952:         RegistrationListenerValidator rglrv = new RegistrationListenerValidator("serviceRegistered", "serviceUnregistered");
1:fdf3952:         rglrv.setListenerComponentValidator(new RefValidator("fooRegistrationListener"));
1:dbf926a: 
1:fdf3952:         ServiceValidator sv = new ServiceValidator(4);
1:fdf3952:         sv.setServiceComponentValidator(new RefValidator("foo"));
1:fdf3952:         sv.addMapEntryValidator(mev);
1:fdf3952:         sv.addRegistrationListenerValidator(rglrv);
1:fdf3952:         sv.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, serviceComponentIds[0]));
1:dbf926a: 
1:fdf3952:         // bean: fooRegistrationListener
1:fdf3952:         BeanValidator bv_fooRegistrationListener = new BeanValidator("org.apache.aries.blueprint.sample.FooRegistrationListener");
1:fdf3952:         bv_fooRegistrationListener.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "fooRegistrationListener"));
1:dbf926a: 
1:fdf3952:         // reference: ref2
1:fdf3952:         ReferenceListenerValidator rlrv_1 = new ReferenceListenerValidator("bind", "unbind");
1:fdf3952:         rlrv_1.setListenerComponentValidator(new RefValidator("bindingListener"));
1:dbf926a: 
1:fdf3952:         ReferenceValidator rv = new ReferenceValidator("org.apache.aries.blueprint.sample.InterfaceA", 100);
1:fdf3952:         rv.addReferenceListenerValidator(rlrv_1);
1:fdf3952:         rv.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "ref2"));
1:dbf926a: 
1:fdf3952:         // bean: bindingListener
1:fdf3952:         BeanValidator bv_bindingListener = new BeanValidator("org.apache.aries.blueprint.sample.BindingListener");
1:fdf3952:         bv_bindingListener.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "bindingListener"));
1:dbf926a: 
1:fdf3952:         // reference-list: ref-list
1:fdf3952:         ReferenceListenerValidator rlrv_2 = new ReferenceListenerValidator("bind", "unbind");
1:fdf3952:         rlrv_2.setListenerComponentValidator(new RefValidator("listBindingListener"));
1:dbf926a: 
1:fdf3952:         ReferenceListValidator rlv_ref_list = new ReferenceListValidator("org.apache.aries.blueprint.sample.InterfaceA");
1:fdf3952:         rlv_ref_list.addReferenceListenerValidator(rlrv_2);
1:fdf3952:         rlv_ref_list.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "ref-list"));
1:dbf926a: 
1:fdf3952:         // bean: listBindingListener
1:fdf3952:         BeanValidator bv_listBindingListener = new BeanValidator("org.apache.aries.blueprint.sample.BindingListener");
1:fdf3952:         bv_listBindingListener.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "listBindingListener"));
1:dbf926a: 
1:fdf3952:         // bean: circularReference
1:fdf3952:         ReferenceListenerValidator rlrv_3 = new ReferenceListenerValidator("bind", "unbind");
1:fdf3952:         rlrv_3.setListenerComponentValidator(new RefValidator("circularReference"));
1:dbf926a: 
1:fdf3952:         ReferenceListValidator rlv_2 = new ReferenceListValidator("org.apache.aries.blueprint.sample.InterfaceA", 2);
1:fdf3952:         rlv_2.addReferenceListenerValidator(rlrv_3);
1:dbf926a: 
1:fdf3952:         BeanPropertyValidator bpv_list_2 = new BeanPropertyValidator("list");
1:fdf3952:         bpv_list_2.setObjectValueValidator(rlv_2);
6:dbf926a: 
1:fdf3952:         BeanValidator bv_circularReference = new BeanValidator("org.apache.aries.blueprint.sample.BindingListener", "init");
1:fdf3952:         bv_circularReference.addPropertyValidators(bpv_list_2);
1:fdf3952:         bv_circularReference.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "circularReference"));
1:fdf3952:     }
1:dbf926a: 
1:0a8778f: 	private BeanPropertyValidator property(String name, String expectedValue) {
1:0a8778f: 		BeanPropertyValidator val = new BeanPropertyValidator(name);
1:0a8778f:         val.setObjectValueValidator(new ValueValidator(expectedValue));
1:0a8778f: 		return val;
1:0a8778f: 	}
1:0a8778f: 
1:fdf3952: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:fa32bea
/////////////////////////////////////////////////////////////////////////
1: 				mavenBundle("org.ow2.asm", "asm-debug-all").versionAsInProject(),
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:988cc71
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference[] serviceReferences = null;
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import javax.inject.Inject;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.util.Filter;
/////////////////////////////////////////////////////////////////////////
1: 	@Inject
1: 	@Filter("(osgi.blueprint.container.symbolicname=org.apache.aries.blueprint)")
1: 	BlueprintContainer blueprintExtender;
1: 	
1: 	@Inject
1: 	@Filter("(osgi.blueprint.container.symbolicname=org.apache.aries.blueprint.sample)")
1: 	BlueprintContainer blueprintSample;
1: 
1: 	private Bundle extender;
1: 	private Bundle sample;
1:     public Option[] configuration() {
1:         return CoreOptions.options(
1:         		jmxRuntime(),
1:         		blueprint(),
1:         		mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.blueprint").versionAsInProject(),
1:         		mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").versionAsInProject()
1: 	protected Option blueprint() {
1: 		return composite(
0: 				mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.jexl.evaluator").versionAsInProject(),
1: 				mavenBundle("org.apache.commons", "commons-jexl").versionAsInProject()
1: 				);
1: 	}
1: 	
1: 	@Before
1: 	public void setup() {
1: 		extender = getBundleByName("org.apache.aries.blueprint");
1: 		sample = getBundleByName("org.apache.aries.blueprint.sample");
1: 	}
1:     public void testBlueprintStateMBean() throws Exception {
1:         BlueprintStateMBean stateProxy = getMBean(BlueprintStateMBean.OBJECTNAME, BlueprintStateMBean.class);
1:         BlueprintEventValidator sampleValidator = new BlueprintEventValidator(sample.getBundleId(), extender.getBundleId(), 2);
1:         sampleValidator.validate(stateProxy.getLastEvent(sample.getBundleId()));
1:         sampleValidator.validate(lastEvents.get(new Long[]{sample.getBundleId()}));
1:     }
1:     
1:     @Test
1:     public void testBlueprintMetaDataMBean() throws Exception {
1:                 + sample.getSymbolicName() + ")(osgi.blueprint.container.version=" + sample.getVersion() + "))";
0:         ServiceReference<?>[] serviceReferences = null;
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(sampleBlueprintContainerServiceId, metadataProxy.getBlueprintContainerServiceId(sample.getBundleId()));
1:         BeanPropertyValidator bpv_a = property("a", "5");
1:         BeanPropertyValidator bpv_b = property("b", "-1");
1:         BeanPropertyValidator bpv_currency = property("currency", "PLN");
1:         BeanPropertyValidator bpv_date = property("date", "2009.04.17");
1:         BeanPropertyValidator bpv_value = property("value", "Hello FooBar");
1:         cv.addCollectionValueValidators(
1:         		new ValueValidator("a list element"), 
1:         		new ValueValidator("5", "java.lang.Integer"));
/////////////////////////////////////////////////////////////////////////
1: 	private BeanPropertyValidator property(String name, String expectedValue) {
1: 		BeanPropertyValidator val = new BeanPropertyValidator(name);
1:         val.setObjectValueValidator(new ValueValidator(expectedValue));
1: 		return val;
1: 	}
1: 
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:dbf926a
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public static Option[] configuration() {
0:                 CoreOptions.equinox(),
1: 
0:                 mavenBundle("org.ow2.asm", "asm-all"),
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.jexl.evaluator"),
0:                 mavenBundle("org.apache.commons", "commons-jexl"),
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample"),
1:     }
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         assertEquals("The blueprint bundle ids are: " + Arrays.toString(bpBundleIds), 3, bpBundleIds.length);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         assertEquals(3, bpContainerServiceIds.length);
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.test.blueprint;
0: 
1: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.fail;
0: 
0: import static org.apache.aries.itest.ExtraOptions.*;
0: 
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.TabularData;
0: 
1: import org.apache.aries.jmx.AbstractIntegrationTest;
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: import org.apache.aries.jmx.blueprint.BlueprintStateMBean;
1: import org.apache.aries.jmx.test.blueprint.framework.BeanPropertyValidator;
1: import org.apache.aries.jmx.test.blueprint.framework.BeanValidator;
1: import org.apache.aries.jmx.test.blueprint.framework.BlueprintEventValidator;
1: import org.apache.aries.jmx.test.blueprint.framework.CollectionValidator;
1: import org.apache.aries.jmx.test.blueprint.framework.MapEntryValidator;
1: import org.apache.aries.jmx.test.blueprint.framework.RefValidator;
1: import org.apache.aries.jmx.test.blueprint.framework.ReferenceListValidator;
1: import org.apache.aries.jmx.test.blueprint.framework.ReferenceListenerValidator;
1: import org.apache.aries.jmx.test.blueprint.framework.ReferenceValidator;
1: import org.apache.aries.jmx.test.blueprint.framework.RegistrationListenerValidator;
1: import org.apache.aries.jmx.test.blueprint.framework.ServiceValidator;
1: import org.apache.aries.jmx.test.blueprint.framework.ValueValidator;
1: import org.junit.Test;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.Configuration;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
0: 
1: public class BlueprintMBeanTest extends AbstractIntegrationTest {
0:     
1:     @Configuration
0:     public static Option[] configuration() {    
0:         return testOptions(
0:                 CoreOptions.equinox(), 
0:                 paxLogging("INFO"),
0:                 
0:                 mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:                 mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:                 mavenBundle("asm", "asm-all"),
0:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"), 
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample"), 
0:                 mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.blueprint"),
0:                 mavenBundle("org.osgi", "org.osgi.compendium")
1:         );
1:     }  
0: 
0:     @Override
0:     public void doSetUp() throws Exception {
0:         waitForMBean(new ObjectName(BlueprintStateMBean.OBJECTNAME));
0:         waitForMBean(new ObjectName(BlueprintMetadataMBean.OBJECTNAME));
0:        
0:        // Wait enough time for osgi framework and blueprint bundles to be set up
0:        System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Waiting for bundles to be set up");
0:        context().getService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=org.apache.aries.blueprint)");
0:        context().getService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=org.apache.aries.blueprint.sample)");
1:     }
0:     
1:     @Test
0:     public void BlueprintSample() throws Exception {
0:         System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Start Test Blueprint Sample");
0:         
0:         //////////////////////////////
0:         //Test BlueprintStateMBean
0:         //////////////////////////////
0:         
0:         //find the Blueprint Sample bundle id and the blueprint extender bundle id
0:         long sampleBundleId = -1;
0:         long extenderBundleId = -1;     // the blueprint extender bundle "org.apache.geronimo.blueprint.geronimo-blueprint" is also a blueprint bundle.
0:         for (Bundle bundle : bundleContext.getBundles()){
0:             if (bundle.getSymbolicName().equals("org.apache.aries.blueprint.sample")) sampleBundleId = bundle.getBundleId();
0:             if (bundle.getSymbolicName().equals("org.apache.aries.blueprint")) extenderBundleId = bundle.getBundleId();
1:         }
0:         if (-1==sampleBundleId) fail("Blueprint Sample Bundle is not found!");
0:         if (-1==extenderBundleId) fail("Blueprint Extender Bundle is not found!");
0:         
1:         //retrieve the proxy object
0:         BlueprintStateMBean stateProxy = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, new ObjectName(BlueprintStateMBean.OBJECTNAME), BlueprintStateMBean.class, false);
0:         
1:         // test getBlueprintBundleIds
1:         long[] bpBundleIds = stateProxy.getBlueprintBundleIds();
0:         assertEquals(2, bpBundleIds.length);
1:         // test getLastEvent
0:         BlueprintEventValidator sampleValidator = new BlueprintEventValidator(sampleBundleId, extenderBundleId, 2);
0:         sampleValidator.validate(stateProxy.getLastEvent(sampleBundleId));
1:         // test getLastEvents
1:         TabularData lastEvents = stateProxy.getLastEvents();
1:         assertEquals(BlueprintStateMBean.OSGI_BLUEPRINT_EVENTS_TYPE,lastEvents.getTabularType());
0:         sampleValidator.validate(lastEvents.get(new Long[]{sampleBundleId}));
0:         
0:         //////////////////////////////
0:         //Test BlueprintMetadataMBean
0:         //////////////////////////////
0:         
1:         //find the Blueprint Sample bundle's container service id
0:         Bundle sampleBundle = bundleContext.getBundle(sampleBundleId);
1:         String filter = "(&(osgi.blueprint.container.symbolicname=" // no similar one in interfaces
0:                 + sampleBundle.getSymbolicName() + ")(osgi.blueprint.container.version=" + sampleBundle.getVersion() + "))";
0:         ServiceReference[] serviceReferences = null;
1:         try {
1:             serviceReferences = bundleContext.getServiceReferences(BlueprintContainer.class.getName(), filter);
1:         } catch (InvalidSyntaxException e) {
1:             throw new RuntimeException(e);
1:         }
1:         long sampleBlueprintContainerServiceId = (Long) serviceReferences[0].getProperty(Constants.SERVICE_ID);
0:         
1:         //retrieve the proxy object
1:         BlueprintMetadataMBean metadataProxy = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, new ObjectName(BlueprintMetadataMBean.OBJECTNAME), BlueprintMetadataMBean.class, false);
0:         
1:         // test getBlueprintContainerServiceIds
1:         long[] bpContainerServiceIds = metadataProxy.getBlueprintContainerServiceIds();
0:         assertEquals(2, bpContainerServiceIds.length);
0:         
1:         // test getBlueprintContainerServiceId
0:         assertEquals(sampleBlueprintContainerServiceId, metadataProxy.getBlueprintContainerServiceId(sampleBundleId));
0:         
1:         // test getComponentMetadata
1:         // bean: foo
1:         BeanValidator bv_foo = new BeanValidator("org.apache.aries.blueprint.sample.Foo", "init", "destroy");
0:         
0:         BeanPropertyValidator bpv_a = new BeanPropertyValidator("a");
0:         bpv_a.setObjectValueValidator(new ValueValidator("5"));
0:         
0:         BeanPropertyValidator bpv_b = new BeanPropertyValidator("b");
0:         bpv_b.setObjectValueValidator(new ValueValidator("-1"));
0:         
1:         BeanPropertyValidator bpv_bar = new BeanPropertyValidator("bar");
1:         bpv_bar.setObjectValueValidator(new RefValidator("bar"));
0:         
0:         BeanPropertyValidator bpv_currency = new BeanPropertyValidator("currency");
0:         bpv_currency.setObjectValueValidator(new ValueValidator("PLN"));
0:         
0:         BeanPropertyValidator bpv_date = new BeanPropertyValidator("date");
0:         bpv_date.setObjectValueValidator(new ValueValidator("2009.04.17"));
0:         
1:         bv_foo.addPropertyValidators(bpv_a, bpv_b, bpv_bar, bpv_currency, bpv_date);
1:         bv_foo.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "foo"));
0:         
1:         // bean: bar
0:         BeanPropertyValidator bpv_value = new BeanPropertyValidator("value");
0:         bpv_value.setObjectValueValidator(new ValueValidator("Hello FooBar"));
0:         
1:         BeanPropertyValidator bpv_context = new BeanPropertyValidator("context");
1:         bpv_context.setObjectValueValidator(new RefValidator("blueprintBundleContext"));
0:         
1:         CollectionValidator cv = new CollectionValidator("java.util.List");
0:         cv.addCollectionValueValidators(new ValueValidator("a list element"), new ValueValidator("5", "java.lang.Integer"));
1:         BeanPropertyValidator bpv_list = new BeanPropertyValidator("list");
1:         bpv_list.setObjectValueValidator(cv);
0:         
1:         BeanValidator bv_bar = new BeanValidator("org.apache.aries.blueprint.sample.Bar");
1:         bv_bar.addPropertyValidators(bpv_value, bpv_context, bpv_list);
1:         bv_bar.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "bar"));
0:         
1:         // service: ref=foo, no componentId set. So using it to test getComponentIdsByType.
1:         String[] serviceComponentIds = metadataProxy.getComponentIdsByType(sampleBlueprintContainerServiceId, BlueprintMetadataMBean.SERVICE_METADATA);
1:         assertEquals("There should be two service components in this sample", 2, serviceComponentIds.length);
0:         
1:         MapEntryValidator mev = new MapEntryValidator();
1:         mev.setKeyValueValidator(new ValueValidator("key"), new ValueValidator("value"));
0:         
1:         RegistrationListenerValidator rglrv = new RegistrationListenerValidator("serviceRegistered", "serviceUnregistered");
1:         rglrv.setListenerComponentValidator(new RefValidator("fooRegistrationListener"));
0:         
1:         ServiceValidator sv = new ServiceValidator(4);
1:         sv.setServiceComponentValidator(new RefValidator("foo"));
1:         sv.addMapEntryValidator(mev);
1:         sv.addRegistrationListenerValidator(rglrv);
1:         sv.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, serviceComponentIds[0]));
0:         
1:         // bean: fooRegistrationListener
1:         BeanValidator bv_fooRegistrationListener = new BeanValidator("org.apache.aries.blueprint.sample.FooRegistrationListener");
1:         bv_fooRegistrationListener.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "fooRegistrationListener"));
0:         
1:         // reference: ref2
1:         ReferenceListenerValidator rlrv_1 = new ReferenceListenerValidator("bind", "unbind");
1:         rlrv_1.setListenerComponentValidator(new RefValidator("bindingListener"));
0:         
1:         ReferenceValidator rv = new ReferenceValidator("org.apache.aries.blueprint.sample.InterfaceA", 100);
1:         rv.addReferenceListenerValidator(rlrv_1);
1:         rv.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "ref2"));
0:         
1:         // bean: bindingListener
1:         BeanValidator bv_bindingListener = new BeanValidator("org.apache.aries.blueprint.sample.BindingListener");
1:         bv_bindingListener.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "bindingListener"));
0: 
1:         // reference-list: ref-list
1:         ReferenceListenerValidator rlrv_2 = new ReferenceListenerValidator("bind", "unbind");
1:         rlrv_2.setListenerComponentValidator(new RefValidator("listBindingListener"));
0:         
1:         ReferenceListValidator rlv_ref_list = new ReferenceListValidator("org.apache.aries.blueprint.sample.InterfaceA");
1:         rlv_ref_list.addReferenceListenerValidator(rlrv_2);
1:         rlv_ref_list.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "ref-list"));
0:         
1:         // bean: listBindingListener
1:         BeanValidator bv_listBindingListener = new BeanValidator("org.apache.aries.blueprint.sample.BindingListener");
1:         bv_listBindingListener.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "listBindingListener"));
0:                 
1:         // bean: circularReference
1:         ReferenceListenerValidator rlrv_3 = new ReferenceListenerValidator("bind", "unbind");
1:         rlrv_3.setListenerComponentValidator(new RefValidator("circularReference"));
0:         
1:         ReferenceListValidator rlv_2 = new ReferenceListValidator("org.apache.aries.blueprint.sample.InterfaceA", 2);
1:         rlv_2.addReferenceListenerValidator(rlrv_3);
0:         
1:         BeanPropertyValidator bpv_list_2 = new BeanPropertyValidator("list");
1:         bpv_list_2.setObjectValueValidator(rlv_2);
0:         
1:         BeanValidator bv_circularReference = new BeanValidator("org.apache.aries.blueprint.sample.BindingListener", "init");
1:         bv_circularReference.addPropertyValidators(bpv_list_2);
1:         bv_circularReference.validate(metadataProxy.getComponentMetadata(sampleBlueprintContainerServiceId, "circularReference"));
1:     }
0:             
1: }
============================================================================