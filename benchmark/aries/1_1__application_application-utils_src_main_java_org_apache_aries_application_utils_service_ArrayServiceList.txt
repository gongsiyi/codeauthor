1:59e7b8b: /*
1:59e7b8b:  * Licensed to the Apache Software Foundation (ASF) under one
1:59e7b8b:  * or more contributor license agreements.  See the NOTICE file
1:59e7b8b:  * distributed with this work for additional information
1:59e7b8b:  * regarding copyright ownership.  The ASF licenses this file
1:59e7b8b:  * to you under the Apache License, Version 2.0 (the
1:59e7b8b:  * "License"); you may not use this file except in compliance
1:59e7b8b:  * with the License.  You may obtain a copy of the License at
1:59e7b8b:  *
1:59e7b8b:  *   http://www.apache.org/licenses/LICENSE-2.0
1:59e7b8b:  *
1:59e7b8b:  * Unless required by applicable law or agreed to in writing,
1:59e7b8b:  * software distributed under the License is distributed on an
1:59e7b8b:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:59e7b8b:  * KIND, either express or implied.  See the License for the
1:59e7b8b:  * specific language governing permissions and limitations
1:59e7b8b:  * under the License.
1:59e7b8b:  */
1:59e7b8b: package org.apache.aries.application.utils.service;
1:59e7b8b: 
1:59e7b8b: import java.util.ArrayList;
1:59e7b8b: import java.util.Collection;
1:59e7b8b: import java.util.Iterator;
1:59e7b8b: import java.util.List;
1:59e7b8b: import java.util.ListIterator;
1:59e7b8b: 
1:59e7b8b: import org.osgi.framework.BundleContext;
1:59e7b8b: import org.osgi.framework.ServiceReference;
1:59e7b8b: 
1:59e7b8b: public class ArrayServiceList<E> implements ServiceCollection<E>, List<E>
1:59e7b8b: {
1:59e7b8b:   private List<E> list = new ArrayList<E>();
1:59e7b8b:   private List<ServiceReference> refList = new ArrayList<ServiceReference>();
1:59e7b8b:   private BundleContext context;
1:59e7b8b:   
1:59e7b8b:   public ArrayServiceList(BundleContext ctx)
1:59e7b8b:   {
1:59e7b8b:     context = ctx;
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public boolean add(E o)
1:59e7b8b:   {
1:59e7b8b:     throw new UnsupportedOperationException("The operation add is not supported. Use addService with a service reference.");
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public void add(int index, E element)
1:59e7b8b:   {
1:59e7b8b:     throw new UnsupportedOperationException("The operation add is not supported. Use addService with a service reference.");
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public boolean addAll(Collection<? extends E> c)
1:59e7b8b:   {
1:59e7b8b:     throw new UnsupportedOperationException("The operation addAll is not supported. Use addService with a service reference.");
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public boolean addAll(int index, Collection<? extends E> c)
1:59e7b8b:   {
1:59e7b8b:     throw new UnsupportedOperationException("The operation addAll is not supported. Use addService with a service reference.");
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public synchronized void clear()
1:59e7b8b:   {
1:59e7b8b:     list.clear();
1:59e7b8b:     
1:59e7b8b:     for (ServiceReference ref : refList) {
1:59e7b8b:       context.ungetService(ref);
1:59e7b8b:     }
1:59e7b8b:     
1:59e7b8b:     refList.clear();
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public boolean contains(Object o)
1:59e7b8b:   {
1:59e7b8b:     return list.contains(o);
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public boolean containsAll(Collection<?> c)
1:59e7b8b:   {
1:59e7b8b:     return list.containsAll(c);
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public E get(int index)
1:59e7b8b:   {    
1:59e7b8b:     return list.get(index);
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public int indexOf(Object o)
1:59e7b8b:   {
1:59e7b8b:     return list.indexOf(o);
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public boolean isEmpty()
1:59e7b8b:   {
1:59e7b8b:     return list.isEmpty();
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public Iterator<E> iterator()
1:59e7b8b:   {
1:59e7b8b:     return listIterator();
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public int lastIndexOf(Object o)
1:59e7b8b:   {
1:59e7b8b:     return list.lastIndexOf(o);
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public ListIterator<E> listIterator()
1:59e7b8b:   {
1:59e7b8b:     return listIterator(0);
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public ListIterator<E> listIterator(int index)
1:59e7b8b:   {
1:59e7b8b:     final ListIterator<E> it = list.listIterator(index);
1:59e7b8b:     final ListIterator<ServiceReference> refIt = refList.listIterator(index);
1:59e7b8b:     
1:59e7b8b:     ListIterator<E> result =  new ListIterator<E>() {
1:59e7b8b:       private ServiceReference current;
1:59e7b8b:       
1:59e7b8b:       public void add(E o)
1:59e7b8b:       {
1:59e7b8b:         throw new UnsupportedOperationException();
1:59e7b8b:       }
1:59e7b8b: 
1:59e7b8b:       public boolean hasNext()
1:59e7b8b:       {
1:59e7b8b:         return it.hasNext();
1:59e7b8b:       }
1:59e7b8b: 
1:59e7b8b:       public boolean hasPrevious()
1:59e7b8b:       {
1:59e7b8b:         return it.hasPrevious();
1:59e7b8b:       }
1:59e7b8b: 
1:59e7b8b:       public E next()
1:59e7b8b:       {
1:59e7b8b:         E result = it.next();
1:59e7b8b:         current = refIt.next();
1:59e7b8b:         return result;
1:59e7b8b:       }
1:59e7b8b: 
1:59e7b8b:       public int nextIndex()
1:59e7b8b:       {
1:59e7b8b:         return it.nextIndex();
1:59e7b8b:       }
1:59e7b8b: 
1:59e7b8b:       public E previous()
1:59e7b8b:       {
1:59e7b8b:         E result = it.previous();
1:59e7b8b:         current = refIt.previous();
1:59e7b8b:         return result;
1:59e7b8b:       }
1:59e7b8b: 
1:59e7b8b:       public int previousIndex()
1:59e7b8b:       {
1:59e7b8b:         return it.previousIndex();
1:59e7b8b:       }
1:59e7b8b: 
1:59e7b8b:       public void remove()
1:59e7b8b:       {
1:59e7b8b:         it.remove();
1:59e7b8b:         refIt.remove();
1:59e7b8b:         context.ungetService(current);
1:59e7b8b:       }
1:59e7b8b: 
1:59e7b8b:       public void set(E o)
1:59e7b8b:       {
1:59e7b8b:         throw new UnsupportedOperationException();
1:59e7b8b:       }
1:59e7b8b:     };
1:59e7b8b:     return result;
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public synchronized boolean remove(Object o)
1:59e7b8b:   {
1:59e7b8b:     int index = list.indexOf(o);
1:59e7b8b:     
1:59e7b8b:     ServiceReference ref = refList.remove(index);
1:59e7b8b:     
1:59e7b8b:     context.ungetService(ref);
1:59e7b8b:     return list.remove(o);
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public synchronized E remove(int index)
1:59e7b8b:   {
1:59e7b8b:     ServiceReference ref = refList.remove(index);
1:59e7b8b:     
1:59e7b8b:     context.ungetService(ref);
1:59e7b8b:     return list.remove(index);
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public synchronized boolean removeAll(Collection<?> c)
1:59e7b8b:   {boolean worked = false;
1:59e7b8b:     
1:59e7b8b:     for (Object obj : c) {
1:59e7b8b:       worked |= remove(obj);
1:59e7b8b:     }
1:59e7b8b:     return worked;
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public boolean retainAll(Collection<?> c)
1:59e7b8b:   {
1:59e7b8b:     throw new UnsupportedOperationException("The operation retainAll is not supported.");
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public E set(int index, E element)
1:59e7b8b:   {
1:59e7b8b:     throw new UnsupportedOperationException("The operation set is not supported.");
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public int size()
1:59e7b8b:   {
1:59e7b8b:     return list.size();
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public List<E> subList(int fromIndex, int toIndex)
1:59e7b8b:   {
1:59e7b8b:     throw new UnsupportedOperationException("The operation subList is not supported.");
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public Object[] toArray()
1:59e7b8b:   {
1:59e7b8b:     return list.toArray();
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public Object[] toArray(Object[] a)
1:59e7b8b:   {
1:59e7b8b:     return list.toArray(a);
1:59e7b8b:   }
1:59e7b8b: 
1:59e7b8b:   public synchronized void addService(ServiceReference ref)
1:59e7b8b:   {
1:59e7b8b:     @SuppressWarnings("unchecked")
1:59e7b8b:     E service = (E)context.getService(ref);
1:59e7b8b:     
1:59e7b8b:     if (service != null) {
1:59e7b8b:       list.add(service);
1:59e7b8b:       refList.add(ref);
1:59e7b8b:     }
1:59e7b8b:   }
1:59e7b8b: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:59e7b8b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.utils.service;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.ListIterator;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: 
1: public class ArrayServiceList<E> implements ServiceCollection<E>, List<E>
1: {
1:   private List<E> list = new ArrayList<E>();
1:   private List<ServiceReference> refList = new ArrayList<ServiceReference>();
1:   private BundleContext context;
1:   
1:   public ArrayServiceList(BundleContext ctx)
1:   {
1:     context = ctx;
1:   }
1: 
1:   public boolean add(E o)
1:   {
1:     throw new UnsupportedOperationException("The operation add is not supported. Use addService with a service reference.");
1:   }
1: 
1:   public void add(int index, E element)
1:   {
1:     throw new UnsupportedOperationException("The operation add is not supported. Use addService with a service reference.");
1:   }
1: 
1:   public boolean addAll(Collection<? extends E> c)
1:   {
1:     throw new UnsupportedOperationException("The operation addAll is not supported. Use addService with a service reference.");
1:   }
1: 
1:   public boolean addAll(int index, Collection<? extends E> c)
1:   {
1:     throw new UnsupportedOperationException("The operation addAll is not supported. Use addService with a service reference.");
1:   }
1: 
1:   public synchronized void clear()
1:   {
1:     list.clear();
1:     
1:     for (ServiceReference ref : refList) {
1:       context.ungetService(ref);
1:     }
1:     
1:     refList.clear();
1:   }
1: 
1:   public boolean contains(Object o)
1:   {
1:     return list.contains(o);
1:   }
1: 
1:   public boolean containsAll(Collection<?> c)
1:   {
1:     return list.containsAll(c);
1:   }
1: 
1:   public E get(int index)
1:   {    
1:     return list.get(index);
1:   }
1: 
1:   public int indexOf(Object o)
1:   {
1:     return list.indexOf(o);
1:   }
1: 
1:   public boolean isEmpty()
1:   {
1:     return list.isEmpty();
1:   }
1: 
1:   public Iterator<E> iterator()
1:   {
1:     return listIterator();
1:   }
1: 
1:   public int lastIndexOf(Object o)
1:   {
1:     return list.lastIndexOf(o);
1:   }
1: 
1:   public ListIterator<E> listIterator()
1:   {
1:     return listIterator(0);
1:   }
1: 
1:   public ListIterator<E> listIterator(int index)
1:   {
1:     final ListIterator<E> it = list.listIterator(index);
1:     final ListIterator<ServiceReference> refIt = refList.listIterator(index);
1:     
1:     ListIterator<E> result =  new ListIterator<E>() {
1:       private ServiceReference current;
1:       
1:       public void add(E o)
1:       {
1:         throw new UnsupportedOperationException();
1:       }
1: 
1:       public boolean hasNext()
1:       {
1:         return it.hasNext();
1:       }
1: 
1:       public boolean hasPrevious()
1:       {
1:         return it.hasPrevious();
1:       }
1: 
1:       public E next()
1:       {
1:         E result = it.next();
1:         current = refIt.next();
1:         return result;
1:       }
1: 
1:       public int nextIndex()
1:       {
1:         return it.nextIndex();
1:       }
1: 
1:       public E previous()
1:       {
1:         E result = it.previous();
1:         current = refIt.previous();
1:         return result;
1:       }
1: 
1:       public int previousIndex()
1:       {
1:         return it.previousIndex();
1:       }
1: 
1:       public void remove()
1:       {
1:         it.remove();
1:         refIt.remove();
1:         context.ungetService(current);
1:       }
1: 
1:       public void set(E o)
1:       {
1:         throw new UnsupportedOperationException();
1:       }
1:     };
1:     return result;
1:   }
1: 
1:   public synchronized boolean remove(Object o)
1:   {
1:     int index = list.indexOf(o);
1:     
1:     ServiceReference ref = refList.remove(index);
1:     
1:     context.ungetService(ref);
1:     return list.remove(o);
1:   }
1: 
1:   public synchronized E remove(int index)
1:   {
1:     ServiceReference ref = refList.remove(index);
1:     
1:     context.ungetService(ref);
1:     return list.remove(index);
1:   }
1: 
1:   public synchronized boolean removeAll(Collection<?> c)
1:   {boolean worked = false;
1:     
1:     for (Object obj : c) {
1:       worked |= remove(obj);
1:     }
1:     return worked;
1:   }
1: 
1:   public boolean retainAll(Collection<?> c)
1:   {
1:     throw new UnsupportedOperationException("The operation retainAll is not supported.");
1:   }
1: 
1:   public E set(int index, E element)
1:   {
1:     throw new UnsupportedOperationException("The operation set is not supported.");
1:   }
1: 
1:   public int size()
1:   {
1:     return list.size();
1:   }
1: 
1:   public List<E> subList(int fromIndex, int toIndex)
1:   {
1:     throw new UnsupportedOperationException("The operation subList is not supported.");
1:   }
1: 
1:   public Object[] toArray()
1:   {
1:     return list.toArray();
1:   }
1: 
1:   public Object[] toArray(Object[] a)
1:   {
1:     return list.toArray(a);
1:   }
1: 
1:   public synchronized void addService(ServiceReference ref)
1:   {
1:     @SuppressWarnings("unchecked")
1:     E service = (E)context.getService(ref);
1:     
1:     if (service != null) {
1:       list.add(service);
1:       refList.add(ref);
1:     }
1:   }
1: }
============================================================================