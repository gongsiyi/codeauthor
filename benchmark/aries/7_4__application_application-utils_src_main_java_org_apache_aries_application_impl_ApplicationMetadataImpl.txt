1:8914925: /*
1:8914925:  * Licensed to the Apache Software Foundation (ASF) under one
1:8914925:  * or more contributor license agreements.  See the NOTICE file
1:8914925:  * distributed with this work for additional information
1:8914925:  * regarding copyright ownership.  The ASF licenses this file
1:8914925:  * to you under the Apache License, Version 2.0 (the
1:8914925:  * "License"); you may not use this file except in compliance
1:8914925:  * with the License.  You may obtain a copy of the License at
1:8914925:  *
1:8914925:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8914925:  *
1:8914925:  * Unless required by applicable law or agreed to in writing,
1:8914925:  * software distributed under the License is distributed on an
1:8914925:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8914925:  * KIND, either express or implied.  See the License for the
1:8914925:  * specific language governing permissions and limitations
1:8914925:  * under the License.
1:8914925:  */
1:8914925: package org.apache.aries.application.impl;
6:8914925: 
1:0e0fd84: import java.io.File;
1:92ce70e: import java.io.FileOutputStream;
1:92ce70e: import java.io.IOException;
1:0e0fd84: import java.io.OutputStream;
1:8914925: import java.util.ArrayList;
1:9c133a0: import java.util.Collection;
1:8914925: import java.util.Collections;
1:8914925: import java.util.HashMap;
1:8914925: import java.util.List;
1:8914925: import java.util.Map;
1:8914925: import java.util.Set;
1:8914925: import java.util.Map.Entry;
1:8914925: import java.util.jar.Attributes;
1:8914925: import java.util.jar.Manifest;
1:8914925: 
1:8914925: import org.apache.aries.application.ApplicationMetadata;
1:8914925: import org.apache.aries.application.Content;
1:8914925: import org.apache.aries.application.ServiceDeclaration;
1:8914925: import org.apache.aries.application.utils.AppConstants;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:9c133a0: import org.osgi.framework.InvalidSyntaxException;
1:92ce70e: import org.osgi.framework.Version;
1:9c133a0: import org.slf4j.Logger;
1:9c133a0: import org.slf4j.LoggerFactory;
1:8914925: 
1:8914925: /**
1:8914925:  * Implementation of ApplicationMetadata and DeploymentMetadata
1:8914925:  *
1:8914925:  */
1:8914925: public final class ApplicationMetadataImpl implements ApplicationMetadata
1:8914925: {
1:9c133a0:   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.management.impl");
1:8914925:   private String appSymbolicName;
1:8914925:   private Version appVersion;
1:8914925:   private String appName;
1:8914925:   private String appScope;
1:de5b346:   private final List<Content> appContents;
1:de5b346:   private final List<ServiceDeclaration> importServices;
1:de5b346:   private final List<ServiceDeclaration> exportServices;
1:de5b346:   private final Manifest manifest;
1:de5b346:   private final List<Content> useBundle;
1:8914925:   /**
1:8914925:    * create the applicationMetadata from appManifest
1:8914925:    * @param appManifest   the Application.mf manifest
1:8914925:    */
1:8914925:   public ApplicationMetadataImpl(Manifest appManifest) {
1:8914925: 
1:8914925:     this.appContents = new ArrayList<Content>();
1:9c133a0:     this.useBundle = new ArrayList<Content>();    
1:8914925:     this.importServices = new ArrayList<ServiceDeclaration>();
1:9c133a0:     this.exportServices = new ArrayList<ServiceDeclaration>();    
1:8914925:     setup(appManifest);
1:8914925:     
1:92ce70e:     // As of 7 Jan 2010 we have no setter methods. Hence it's currently 
1:92ce70e:     // fine to keep a copy of appManifest, and to use it in the store()
1:92ce70e:     // method.
1:92ce70e:     manifest = appManifest;
4:8914925:   }
1:0e0fd84:   
1:8914925:   /**
1:8914925:    * setup the application metadata from the appManifest
1:8914925:    * @param appManifest     application.mf manifest
1:8914925:    */
1:8914925:   private void setup(Manifest appManifest) 
1:8914925:   {
1:8914925:     Map<String, String> appMap = readManifestIntoMap(appManifest);
1:0e0fd84:     
1:8914925:     // configure the appSymbolicName and appVersion
1:8914925:     this.appSymbolicName = appMap.get(AppConstants.APPLICATION_SYMBOLIC_NAME);
1:8914925:     this.appVersion = new Version(appMap.get(AppConstants.APPLICATION_VERSION));
1:8914925:     this.appName = appMap.get(AppConstants.APPLICATION_NAME);
1:8914925:     this.appScope = this.appSymbolicName + "_" + this.appVersion.toString();
1:8914925:     
1:8914925:     if (this.appSymbolicName == null || this.appVersion == null) {
1:8914925:       throw new IllegalArgumentException("Failed to create ApplicationMetadataImpl object from Manifest " + appManifest);
1:8914925:     }
1:8914925:     
1:8914925:     // configure appContents
1:9c133a0:  // use parseImportString as we don't allow appContents to be duplicate
1:8914925:     String applicationContents = appMap.get(AppConstants.APPLICATION_CONTENT);
1:de5b346:     Map<String, Map<String, String>> appContentsMap = ManifestHeaderProcessor.parseImportString(applicationContents);
1:de5b346:     for (Map.Entry<String, Map<String, String>> e : appContentsMap.entrySet()) {
1:9c133a0:       this.appContents.add(new ContentImpl(e.getKey(), e.getValue()));
1:9c133a0:     }
1:9c133a0:    
1:9c133a0:     String useBundleStr = appMap.get(AppConstants.APPLICATION_USE_BUNDLE);
1:9c133a0:     if (useBundleStr != null) {
1:de5b346:       Map<String, Map<String, String>> useBundleMap = ManifestHeaderProcessor.parseImportString(useBundleStr);
1:de5b346:     for (Map.Entry<String, Map<String, String>> e : useBundleMap.entrySet()) {
1:9c133a0:         this.useBundle.add(new ContentImpl(e.getKey(), e.getValue()));
1:9c133a0:       }
1:8914925:     }
1:8914925:     
1:9c133a0:     String allServiceImports = appMap.get(AppConstants.APPLICATION_IMPORT_SERVICE);
1:9c133a0:     List<String> serviceImports = ManifestHeaderProcessor.split(allServiceImports, ",");
1:9c133a0:     for (String s: serviceImports) { 
1:9c133a0:       try { 
1:9c133a0:         ServiceDeclaration dec = new ServiceDeclarationImpl(s);
1:9c133a0:         importServices.add(dec);
1:9c133a0:       } catch (InvalidSyntaxException ise) { 
1:9c133a0:         _logger.warn("APPUTILS0013E", new Object[] {s, appSymbolicName});
1:9c133a0:       }
1:9c133a0:     }
1:9c133a0:     
1:9c133a0:     String allServiceExports = appMap.get(AppConstants.APPLICATION_EXPORT_SERVICE);
1:9c133a0:     List<String> serviceExports = ManifestHeaderProcessor.split(allServiceExports, ",");
1:9c133a0:     for (String s: serviceExports) { 
1:9c133a0:       try { 
1:9c133a0:         ServiceDeclaration dec = new ServiceDeclarationImpl(s);
1:9c133a0:         exportServices.add(dec);
1:9c133a0:       } catch (InvalidSyntaxException ise) { 
1:9c133a0:         _logger.warn("APPUTILS0014E", new Object[] {s, appSymbolicName});
1:9c133a0:       }
1:9c133a0:     }
1:8914925:     
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * Reads a manifest's main attributes into a String->String map.
1:8914925:    * <p>
1:8914925:    * Will always return a map, empty if the manifest had no attributes.
1:8914925:    * 
1:8914925:    * @param mf The manifest to read.
1:8914925:    * @return Map of manifest main attributes.
1:8914925:    */
1:8914925:   private Map<String, String> readManifestIntoMap(Manifest mf){   
1:8914925:     HashMap<String, String> props = new HashMap<String, String>();
1:8914925:     
1:8914925:     Attributes mainAttrs = mf.getMainAttributes();
1:8914925:     if (mainAttrs!=null){
1:8914925:       Set<Entry<Object, Object>> attributeSet =  mainAttrs.entrySet(); 
1:8914925:       if (attributeSet != null){
1:8914925:         // Copy all the manifest headers across. The entry set should be a set of
1:8914925:         // Name to String mappings, by calling String.valueOf we do the conversion
1:8914925:         // to a string and we do not NPE.
1:8914925:         for (Map.Entry<Object, Object> entry : attributeSet) {
1:8914925:           props.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));
1:8914925:         }
1:8914925:       }    
1:8914925:     }
1:8914925:        
1:8914925:     return props;
1:8914925:   }  
1:8914925:     
1:3d7f5b3:   public List<Content> getApplicationContents()
1:8914925:   {
1:8914925:     return Collections.unmodifiableList(this.appContents);
1:8914925:   }
1:8914925: 
1:3d7f5b3:   public List<ServiceDeclaration> getApplicationExportServices()
1:8914925:   {
1:8914925:     return Collections.unmodifiableList(this.exportServices);
1:8914925:   }
1:8914925: 
1:3d7f5b3:   public List<ServiceDeclaration> getApplicationImportServices()
1:8914925:   {
1:8914925:     return Collections.unmodifiableList(this.importServices);
1:8914925:   }
1:8914925: 
1:3d7f5b3:   public String getApplicationSymbolicName()
1:8914925:   {
1:8914925:     return this.appSymbolicName;
1:8914925:   }
1:8914925: 
1:3d7f5b3:   public Version getApplicationVersion()
1:8914925:   {
1:8914925:     return this.appVersion;
1:8914925:   }
1:8914925: 
1:3d7f5b3:   public String getApplicationName() 
1:8914925:   {
1:8914925:     return this.appName;
1:8914925:   }
1:8914925:   
1:3d7f5b3:   public String getApplicationScope() 
1:8914925:   {
1:8914925:     return appScope;
1:8914925:   }
1:8914925:   
1:3d7f5b3:   public boolean equals(Object other)
1:8914925:   {
1:8914925:     if (other == this) return true;
1:8914925:     if (other == null) return false;
1:8914925:     if (other instanceof ApplicationMetadataImpl) {
1:8914925:       return appScope.equals(((ApplicationMetadataImpl)other).appScope);
1:8914925:     }
1:8914925:     
1:8914925:     return false;
1:8914925:   }
1:8914925:   
8:de5b346:   @Override
1:de5b346: public int hashCode()
1:8914925:   {
1:8914925:     return appScope.hashCode();
1:0e0fd84:   }
1:0e0fd84: 
1:3d7f5b3:   public void store(File f) throws IOException {
1:92ce70e:     FileOutputStream fos = new FileOutputStream (f);
1:92ce70e:     store(fos);
1:92ce70e:     fos.close();
1:0e0fd84:   }
1:0e0fd84: 
1:3d7f5b3:   public void store(OutputStream out) throws IOException {
1:92ce70e:     if (manifest != null) {
1:92ce70e:       Attributes att = manifest.getMainAttributes();
1:92ce70e:       if ((att.getValue(Attributes.Name.MANIFEST_VERSION.toString())) == null) {
1:92ce70e:         att.putValue(Attributes.Name.MANIFEST_VERSION.toString(), AppConstants.MANIFEST_VERSION);
1:92ce70e:       }
1:92ce70e:       manifest.write(out);
1:92ce70e:     }
1:8914925:   }
1:9c133a0: 
1:3d7f5b3:   public Collection<Content> getUseBundles()
1:9c133a0:   {
1:9c133a0:     return this.useBundle;
1:9c133a0:   }
1:8914925: }
============================================================================
author:J. Daniel Kulp
-------------------------------------------------------------------------------
commit:3d7f5b3
/////////////////////////////////////////////////////////////////////////
1:   public List<Content> getApplicationContents()
1:   public List<ServiceDeclaration> getApplicationExportServices()
1:   public List<ServiceDeclaration> getApplicationImportServices()
1:   public String getApplicationSymbolicName()
1:   public Version getApplicationVersion()
1:   public String getApplicationName() 
1:   public String getApplicationScope() 
1:   public boolean equals(Object other)
/////////////////////////////////////////////////////////////////////////
1:   public void store(File f) throws IOException {
1:   public void store(OutputStream out) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public Collection<Content> getUseBundles()
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:de5b346
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private final List<Content> appContents;
1:   private final List<ServiceDeclaration> importServices;
1:   private final List<ServiceDeclaration> exportServices;
1:   private final Manifest manifest;
1:   private final List<Content> useBundle;
/////////////////////////////////////////////////////////////////////////
1:     Map<String, Map<String, String>> appContentsMap = ManifestHeaderProcessor.parseImportString(applicationContents);
1:     for (Map.Entry<String, Map<String, String>> e : appContentsMap.entrySet()) {
1:       Map<String, Map<String, String>> useBundleMap = ManifestHeaderProcessor.parseImportString(useBundleStr);
1:     for (Map.Entry<String, Map<String, String>> e : useBundleMap.entrySet()) {
/////////////////////////////////////////////////////////////////////////
1:   @Override
0: public List<Content> getApplicationContents()
1:   @Override
0: public List<ServiceDeclaration> getApplicationExportServices()
1:   @Override
0: public List<ServiceDeclaration> getApplicationImportServices()
1:   @Override
0: public String getApplicationSymbolicName()
1:   @Override
0: public Version getApplicationVersion()
1:   @Override
0: public String getApplicationName() 
1:   @Override
0: public String getApplicationScope() 
1:   @Override
0: public boolean equals(Object other)
/////////////////////////////////////////////////////////////////////////
0:   @Override
1: public int hashCode()
0:   @Override
0: public void store(File f) throws IOException {
0:   @Override
0: public void store(OutputStream out) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:   @Override
0: public Collection<Content> getUseBundles()
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValueMap;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9c133a0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.management.impl");
/////////////////////////////////////////////////////////////////////////
0:   private List<Content> useBundle;
/////////////////////////////////////////////////////////////////////////
1:     this.useBundle = new ArrayList<Content>();    
1:     this.exportServices = new ArrayList<ServiceDeclaration>();    
/////////////////////////////////////////////////////////////////////////
1:  // use parseImportString as we don't allow appContents to be duplicate
0:     Map<String, NameValueMap<String, String>> appContentsMap = ManifestHeaderProcessor.parseImportString(applicationContents);
0:     for (Map.Entry<String, NameValueMap<String, String>> e : appContentsMap.entrySet()) {
1:       this.appContents.add(new ContentImpl(e.getKey(), e.getValue()));
1:     }
1:    
1:     String useBundleStr = appMap.get(AppConstants.APPLICATION_USE_BUNDLE);
1:     if (useBundleStr != null) {
0:       Map<String, NameValueMap<String, String>> useBundleMap = ManifestHeaderProcessor.parseImportString(useBundleStr);
0:     for (Map.Entry<String, NameValueMap<String, String>> e : useBundleMap.entrySet()) {
1:         this.useBundle.add(new ContentImpl(e.getKey(), e.getValue()));
1:       }
1:     String allServiceImports = appMap.get(AppConstants.APPLICATION_IMPORT_SERVICE);
1:     List<String> serviceImports = ManifestHeaderProcessor.split(allServiceImports, ",");
1:     for (String s: serviceImports) { 
1:       try { 
1:         ServiceDeclaration dec = new ServiceDeclarationImpl(s);
1:         importServices.add(dec);
1:       } catch (InvalidSyntaxException ise) { 
1:         _logger.warn("APPUTILS0013E", new Object[] {s, appSymbolicName});
1:       }
1:     }
1:     
1:     String allServiceExports = appMap.get(AppConstants.APPLICATION_EXPORT_SERVICE);
1:     List<String> serviceExports = ManifestHeaderProcessor.split(allServiceExports, ",");
1:     for (String s: serviceExports) { 
1:       try { 
1:         ServiceDeclaration dec = new ServiceDeclarationImpl(s);
1:         exportServices.add(dec);
1:       } catch (InvalidSyntaxException ise) { 
1:         _logger.warn("APPUTILS0014E", new Object[] {s, appSymbolicName});
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
0:   public Collection<Content> getUseBundles()
1:   {
1:     return this.useBundle;
1:   }
commit:92ce70e
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileOutputStream;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Version;
/////////////////////////////////////////////////////////////////////////
0:   private Manifest manifest;
/////////////////////////////////////////////////////////////////////////
1:     // As of 7 Jan 2010 we have no setter methods. Hence it's currently 
1:     // fine to keep a copy of appManifest, and to use it in the store()
1:     // method.
1:     manifest = appManifest;
/////////////////////////////////////////////////////////////////////////
0:   public void store(File f) throws IOException {
1:     FileOutputStream fos = new FileOutputStream (f);
1:     store(fos);
1:     fos.close();
0:   public void store(OutputStream out) throws IOException {
1:     if (manifest != null) {
1:       Attributes att = manifest.getMainAttributes();
1:       if ((att.getValue(Attributes.Name.MANIFEST_VERSION.toString())) == null) {
1:         att.putValue(Attributes.Name.MANIFEST_VERSION.toString(), AppConstants.MANIFEST_VERSION);
1:       }
1:       manifest.write(out);
1:     }
commit:0e0fd84
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.OutputStream;
/////////////////////////////////////////////////////////////////////////
1: 
0:   public void store(File f) {
0:     // TODO when writing AriesApplication.store()
1:     
1:   }
1: 
0:   public void store(OutputStream out) {
0:     // TODO when writing AriesApplication.store()
1:     
1:   }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.impl;
1: 
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: import java.io.OutputStream;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.Map.Entry;
1: import java.util.jar.Attributes;
1: import java.util.jar.Manifest;
1: 
1: import org.apache.aries.application.ApplicationMetadata;
1: import org.apache.aries.application.Content;
1: import org.apache.aries.application.ServiceDeclaration;
1: import org.apache.aries.application.utils.AppConstants;
0: import org.apache.aries.application.utils.manifest.ManifestProcessor;
0: import org.osgi.framework.Version;
1: 
1: /**
1:  * Implementation of ApplicationMetadata and DeploymentMetadata
1:  *
1:  */
1: public final class ApplicationMetadataImpl implements ApplicationMetadata
1: {
1:   private String appSymbolicName;
1:   private Version appVersion;
1:   private String appName;
1:   private String appScope;
0:   private List<Content> appContents;
0:   private List<ServiceDeclaration> importServices;
0:   private List<ServiceDeclaration> exportServices;
0:   private Manifest manifest;
1:   
1:   /**
1:    * create the applicationMetadata from appManifest
1:    * @param appManifest   the Application.mf manifest
1:    */
1:   public ApplicationMetadataImpl(Manifest appManifest) {
1: 
1:     this.appContents = new ArrayList<Content>();
1:     this.importServices = new ArrayList<ServiceDeclaration>();
0:     this.exportServices = new ArrayList<ServiceDeclaration>();
1:     setup(appManifest);
1:     
0:     // As of 7 Jan 2010 we have no setter methods. Hence it's currently 
0:     // fine to keep a copy of appManifest, and to use it in the store()
0:     // method.
0:     manifest = appManifest;
1:   }
1:   
1:   /**
1:    * setup the application metadata from the appManifest
1:    * @param appManifest     application.mf manifest
1:    */
1:   private void setup(Manifest appManifest) 
1:   {
1:     Map<String, String> appMap = readManifestIntoMap(appManifest);
1:     
1:     // configure the appSymbolicName and appVersion
1:     this.appSymbolicName = appMap.get(AppConstants.APPLICATION_SYMBOLIC_NAME);
1:     this.appVersion = new Version(appMap.get(AppConstants.APPLICATION_VERSION));
1:     this.appName = appMap.get(AppConstants.APPLICATION_NAME);
1:     this.appScope = this.appSymbolicName + "_" + this.appVersion.toString();
1:     
1:     if (this.appSymbolicName == null || this.appVersion == null) {
1:       throw new IllegalArgumentException("Failed to create ApplicationMetadataImpl object from Manifest " + appManifest);
1:     }
1:     
1:     // configure appContents
1:     String applicationContents = appMap.get(AppConstants.APPLICATION_CONTENT);
0:     List<String> appContentsArray = ManifestProcessor.split(applicationContents, ",");
0:     for (String content : appContentsArray) {
0:       this.appContents.add(new ContentImpl(content));
1:     }
1:     
0:     // TODO: configure importServices + exportServices
1:     
1:   }
1:   
1:   /**
1:    * Reads a manifest's main attributes into a String->String map.
1:    * <p>
1:    * Will always return a map, empty if the manifest had no attributes.
1:    * 
1:    * @param mf The manifest to read.
1:    * @return Map of manifest main attributes.
1:    */
1:   private Map<String, String> readManifestIntoMap(Manifest mf){   
1:     HashMap<String, String> props = new HashMap<String, String>();
1:     
1:     Attributes mainAttrs = mf.getMainAttributes();
1:     if (mainAttrs!=null){
1:       Set<Entry<Object, Object>> attributeSet =  mainAttrs.entrySet(); 
1:       if (attributeSet != null){
1:         // Copy all the manifest headers across. The entry set should be a set of
1:         // Name to String mappings, by calling String.valueOf we do the conversion
1:         // to a string and we do not NPE.
1:         for (Map.Entry<Object, Object> entry : attributeSet) {
1:           props.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));
1:         }
1:       }    
1:     }
1:        
1:     return props;
1:   }  
1:     
0:   public List<Content> getApplicationContents()
1:   {
1:     return Collections.unmodifiableList(this.appContents);
1:   }
1: 
0:   public List<ServiceDeclaration> getApplicationExportServices()
1:   {
1:     return Collections.unmodifiableList(this.exportServices);
1:   }
1: 
0:   public List<ServiceDeclaration> getApplicationImportServices()
1:   {
1:     return Collections.unmodifiableList(this.importServices);
1:   }
1: 
0:   public String getApplicationSymbolicName()
1:   {
1:     return this.appSymbolicName;
1:   }
1: 
0:   public Version getApplicationVersion()
1:   {
1:     return this.appVersion;
1:   }
1: 
0:   public String getApplicationName() 
1:   {
1:     return this.appName;
1:   }
1:   
0:   public String getApplicationScope() 
1:   {
1:     return appScope;
1:   }
1:   
0:   public boolean equals(Object other)
1:   {
1:     if (other == this) return true;
1:     if (other == null) return false;
1:     if (other instanceof ApplicationMetadataImpl) {
1:       return appScope.equals(((ApplicationMetadataImpl)other).appScope);
1:     }
1:     
1:     return false;
1:   }
1:   
0:   public int hashCode()
1:   {
1:     return appScope.hashCode();
1:   }
1: 
0:   public void store(File f) throws IOException {
0:     FileOutputStream fos = new FileOutputStream (f);
0:     store(fos);
0:     fos.close();
1:   }
1: 
0:   public void store(OutputStream out) throws IOException {
0:     if (manifest != null) {
0:       Attributes att = manifest.getMainAttributes();
0:       if ((att.getValue(Attributes.Name.MANIFEST_VERSION.toString())) == null) {
0:         att.putValue(Attributes.Name.MANIFEST_VERSION.toString(), AppConstants.MANIFEST_VERSION);
1:       }
0:       manifest.write(out);
1:     }
1:   }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:3162c07
/////////////////////////////////////////////////////////////////////////
0: public final class ApplicationMetadataImpl implements ApplicationMetadata
0:   private String appScope;
/////////////////////////////////////////////////////////////////////////
0:   private void setup(Manifest appManifest) 
0:   {
0:     this.appSymbolicName = appMap.get(AppConstants.APPLICATION_SYMBOLIC_NAME);
0:     this.appVersion = new Version(appMap.get(AppConstants.APPLICATION_VERSION));
0:     this.appScope = this.appSymbolicName + "_" + this.appVersion.toString();
/////////////////////////////////////////////////////////////////////////
0:   public String getApplicationName() 
0:   {
0:   public String getApplicationScope() 
0:   {
0:     return appScope;
0:   
0:   public boolean equals(Object other)
0:   {
0:     if (other == this) return true;
0:     if (other == null) return false;
0:     if (other instanceof ApplicationMetadataImpl) {
0:       return appScope.equals(((ApplicationMetadataImpl)other).appScope);
0:     }
0:     
0:     return false;
0:   }
0:   
0:   public int hashCode()
0:   {
0:     return appScope.hashCode();
0:   }
0: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:025f7a2
/////////////////////////////////////////////////////////////////////////
author:Graham Charters
-------------------------------------------------------------------------------
commit:d77c519
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.application.impl;
0: 
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.Map.Entry;
0: import java.util.jar.Attributes;
0: import java.util.jar.Manifest;
0: 
0: import org.osgi.framework.Version;
0: 
0: import org.apache.aries.application.ApplicationMetadata;
0: import org.apache.aries.application.Content;
0: import org.apache.aries.application.ServiceDeclaration;
0: import org.apache.aries.application.utils.AppConstants;
0: import org.apache.aries.application.utils.manifest.ManifestProcessor;
0: 
0: /**
0:  * Implementation of ApplicationMetadata and DeploymentMetadata
0:  *
0:  */
0: public class ApplicationMetadataImpl implements ApplicationMetadata
0: {
0:   private String appSymbolicName;
0:   private Version appVersion;
0:   private String appName;
0:   private List<Content> appContents;
0:   private List<ServiceDeclaration> importServices;
0:   private List<ServiceDeclaration> exportServices;
0:   
0:   /**
0:    * create the applicationMetadata from appManifest
0:    * @param appManifest   the Application.mf manifest
0:    */
0:   public ApplicationMetadataImpl(Manifest appManifest) {
0: 
0:     this.appContents = new ArrayList<Content>();
0:     this.importServices = new ArrayList<ServiceDeclaration>();
0:     this.exportServices = new ArrayList<ServiceDeclaration>();
0:     setup(appManifest);
0:     
0:   }
0:   
0:   /**
0:    * setup the application metadata from the appManifest
0:    * @param appManifest     application.mf manifest
0:    */
0:   private void setup(Manifest appManifest) {
0: 
0:     
0:     Map<String, String> appMap = readManifestIntoMap(appManifest);
0:     
0:     // configure the appSymbolicName and appVersion
0:     this.appSymbolicName = appMap.get(AppConstants.APPLICATION_SYMBOLIC_NAME).trim();
0:     this.appVersion = new Version(appMap.get(AppConstants.APPLICATION_VERSION).trim());
0:     this.appName = appMap.get(AppConstants.APPLICATION_NAME);
0:     
0:     if (this.appSymbolicName == null || this.appVersion == null) {
0:       throw new IllegalArgumentException("Failed to create ApplicationMetadataImpl object from Manifest " + appManifest);
0:     }
0:     
0:     // configure appContents
0:     String applicationContents = appMap.get(AppConstants.APPLICATION_CONTENT);
0:     List<String> appContentsArray = ManifestProcessor.split(applicationContents, ",");
0:     for (String content : appContentsArray) {
0:       this.appContents.add(new ContentImpl(content));
0:     }
0:     
0:     // TODO: configure importServices + exportServices
0:     
0:   }
0:   
0:   /**
0:    * Reads a manifest's main attributes into a String->String map.
0:    * <p>
0:    * Will always return a map, empty if the manifest had no attributes.
0:    * 
0:    * @param mf The manifest to read.
0:    * @return Map of manifest main attributes.
0:    */
0:   private Map<String, String> readManifestIntoMap(Manifest mf){   
0:     HashMap<String, String> props = new HashMap<String, String>();
0:     
0:     Attributes mainAttrs = mf.getMainAttributes();
0:     if (mainAttrs!=null){
0:       Set<Entry<Object, Object>> attributeSet =  mainAttrs.entrySet(); 
0:       if (attributeSet != null){
0:         // Copy all the manifest headers across. The entry set should be a set of
0:         // Name to String mappings, by calling String.valueOf we do the conversion
0:         // to a string and we do not NPE.
0:         for (Map.Entry<Object, Object> entry : attributeSet) {
0:           props.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));
0:         }
0:       }    
0:     }
0:        
0:     return props;
0:   }  
0:     
0:   @Override
0:   public List<Content> getApplicationContents()
0:   {
0:     return Collections.unmodifiableList(this.appContents);
0:   }
0: 
0:   @Override
0:   public List<ServiceDeclaration> getApplicationExportServices()
0:   {
0:     return Collections.unmodifiableList(this.exportServices);
0:   }
0: 
0:   @Override
0:   public List<ServiceDeclaration> getApplicationImportServices()
0:   {
0:     return Collections.unmodifiableList(this.importServices);
0:   }
0: 
0:   @Override
0:   public String getApplicationSymbolicName()
0:   {
0:     return this.appSymbolicName;
0:   }
0: 
0:   @Override
0:   public Version getApplicationVersion()
0:   {
0:     return this.appVersion;
0:   }
0: 
0:   @Override
0:   public String getApplicationName() {
0:     return this.appName;
0:   }
0:   
0:   @Override
0:   public String getApplicationScope() {
0:     return this.appSymbolicName + "_" + this.appVersion.toString();
0:   }
0: }
============================================================================