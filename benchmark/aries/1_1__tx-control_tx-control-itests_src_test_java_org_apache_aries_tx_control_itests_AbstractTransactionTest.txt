1:4dcd48b: /*
1:d7c375c:  * Licensed to the Apache Software Foundation (ASF) under one
1:d7c375c:  * or more contributor license agreements.  See the NOTICE file
1:d7c375c:  * distributed with this work for additional information
1:d7c375c:  * regarding copyright ownership.  The ASF licenses this file
1:d7c375c:  * to you under the Apache License, Version 2.0 (the
1:d7c375c:  * "License"); you may not use this file except in compliance
1:d7c375c:  * with the License.  You may obtain a copy of the License at
1:d7c375c:  *
1:d7c375c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d7c375c:  *
1:d7c375c:  * Unless required by applicable law or agreed to in writing,
1:d7c375c:  * software distributed under the License is distributed on an
1:d7c375c:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:d7c375c:  * KIND, either express or implied.  See the License for the
1:d7c375c:  * specific language governing permissions and limitations
1:d7c375c:  * under the License.
1:4dcd48b:  */
1:d7c375c: package org.apache.aries.tx.control.itests;
9:d7c375c: 
1:d7c375c: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:d7c375c: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:d7c375c: import static org.ops4j.pax.exam.CoreOptions.options;
1:d7c375c: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:d7c375c: import static org.ops4j.pax.exam.CoreOptions.when;
1:f92844b: 
1:f92844b: import java.io.File;
1:f92844b: import java.io.IOException;
1:d7c375c: import java.sql.Connection;
1:d7c375c: import java.sql.SQLException;
1:d7c375c: import java.sql.Statement;
1:f6f7de7: import java.util.ArrayList;
1:dff4924: import java.util.HashMap;
1:f92844b: import java.util.Hashtable;
1:f6f7de7: import java.util.List;
1:dff4924: import java.util.Map;
1:f6f7de7: import java.util.NoSuchElementException;
1:d7c375c: import java.util.Properties;
1:4dcd48b: 
1:f6f7de7: import javax.inject.Inject;
1:f6f7de7: 
1:4dcd48b: import org.h2.tools.Server;
1:d7c375c: import org.junit.After;
1:d7c375c: import org.junit.Before;
1:d7c375c: import org.junit.runner.RunWith;
1:d7c375c: import org.ops4j.pax.exam.Configuration;
1:d7c375c: import org.ops4j.pax.exam.CoreOptions;
1:d7c375c: import org.ops4j.pax.exam.Option;
1:d7c375c: import org.ops4j.pax.exam.junit.PaxExam;
1:d7c375c: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:d7c375c: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:f6f7de7: import org.osgi.framework.BundleContext;
1:f6f7de7: import org.osgi.framework.Filter;
1:f6f7de7: import org.osgi.framework.FrameworkUtil;
1:f6f7de7: import org.osgi.framework.InvalidSyntaxException;
1:f6f7de7: import org.osgi.framework.ServiceReference;
1:f92844b: import org.osgi.service.cm.ConfigurationAdmin;
1:d7c375c: import org.osgi.service.jdbc.DataSourceFactory;
1:d7c375c: import org.osgi.service.transaction.control.TransactionControl;
1:f92844b: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProvider;
1:d7c375c: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1:f6f7de7: import org.osgi.util.tracker.ServiceTracker;
1:d7c375c: 
1:7c388cb: import junit.framework.AssertionFailedError;
1:7c388cb: 
1:d7c375c: @RunWith(PaxExam.class)
1:d7c375c: @ExamReactorStrategy(PerClass.class)
1:f6f7de7: public abstract class AbstractTransactionTest {
1:f6f7de7: 	
1:2299957: 	private static final String TX_CONTROL_FILTER = "org.apache.aries.tx.control.itests.filter";
1:4dcd48b: 	private static final String REMOTE_DB_PROPERTY = "org.apache.aries.tx.control.itests.remotedb";
1:f92844b: 	private static final String CONFIGURED_PROVIDER_PROPERTY = "org.apache.aries.tx.control.itests.configured";
1:4dcd48b: 
1:f6f7de7: 	@Inject
1:f6f7de7: 	BundleContext context;
1:f6f7de7: 	
1:d7c375c: 	protected TransactionControl txControl;
1:d7c375c: 
1:d7c375c: 	protected Connection connection;
1:d7c375c: 
1:4dcd48b: 	private Server server;
1:f6f7de7: 	
1:2906477: 	protected final List<ServiceTracker<?,?>> trackers = new ArrayList<>();
1:4dcd48b: 
1:d7c375c: 	@Before
1:4dcd48b: 	public void setUp() throws Exception {
1:d7c375c: 		
1:f6f7de7: 		txControl = getService(TransactionControl.class, 
1:2299957: 				System.getProperty(TX_CONTROL_FILTER), 5000);
1:2299957: 		
1:2299957: 		Properties jdbc = new Properties();
1:f92844b: 		
1:f92844b: 		boolean external = System.getProperties().containsKey(REMOTE_DB_PROPERTY);
1:4dcd48b: 		
1:4dcd48b: 		String jdbcUrl;
1:4dcd48b: 		if(external) {
1:4dcd48b: 			server = Server.createTcpServer("-tcpPort", "0");
1:4dcd48b: 			server.start();
1:4dcd48b: 			
1:f92844b: 			jdbcUrl = "jdbc:h2:tcp://127.0.0.1:" + server.getPort() + "/" + System.getProperty(REMOTE_DB_PROPERTY);
1:4dcd48b: 		} else {
1:4dcd48b: 			jdbcUrl = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1";
1:4dcd48b: 		}
1:4dcd48b: 		
1:4dcd48b: 		jdbc.setProperty(DataSourceFactory.JDBC_URL, jdbcUrl);
1:f92844b: 		
1:2906477: 		boolean configuredProvider = isConfigured();
1:4dcd48b: 		
1:f92844b: 		connection = configuredProvider ? configuredConnection(jdbc) : programaticConnection(jdbc);
1:d7c375c: 		
1:d7c375c: 		txControl.required(() -> {
1:d7c375c: 				Statement s = connection.createStatement();
1:d7c375c: 				try {
1:d7c375c: 					s.execute("DROP TABLE TEST_TABLE");
1:d7c375c: 				} catch (SQLException sqle) {}
1:d7c375c: 				s.execute("CREATE TABLE TEST_TABLE ( message varchar(255) )");
1:d7c375c: 				return null;
1:d7c375c: 			});
1:d7c375c: 	}
1:f92844b: 
1:dff4924: 	protected Map<String, Object> resourceProviderConfig() {
1:dff4924: 		// No extra information by default
1:dff4924: 		return new HashMap<>();
1:dff4924: 	}
1:dff4924: 
1:2906477: 	public boolean isConfigured() {
1:2906477: 		return System.getProperties().containsKey(CONFIGURED_PROVIDER_PROPERTY);
1:2906477: 	}
1:2906477: 
1:2906477: 	protected <T> T getService(Class<T> clazz, long timeout) {
1:f6f7de7: 		try {
1:f6f7de7: 			return getService(clazz, null, timeout);
1:f6f7de7: 		} catch (InvalidSyntaxException e) {
1:f6f7de7: 			throw new IllegalArgumentException(e);
1:f6f7de7: 		}
1:f6f7de7: 	}
1:f6f7de7: 
1:f6f7de7: 	private <T> T getService(Class<T> clazz, String filter, long timeout) throws InvalidSyntaxException {
1:f6f7de7: 		Filter f = FrameworkUtil.createFilter(filter == null ? "(|(foo=bar)(!(foo=bar)))" : filter); 
1:f6f7de7: 		
1:f6f7de7: 		ServiceTracker<T, T> tracker = new ServiceTracker<T, T>(context, clazz, null) {
1:f6f7de7: 			@Override
1:f6f7de7: 			public T addingService(ServiceReference<T> reference) {
1:f6f7de7: 				return f.match(reference) ? super.addingService(reference) : null;
1:f6f7de7: 			}
1:f6f7de7: 		};
1:f6f7de7: 
1:f6f7de7: 		tracker.open();
1:f6f7de7: 		try {
1:f6f7de7: 			T t = tracker.waitForService(timeout);
1:f6f7de7: 			if(t == null) {
1:f6f7de7: 				throw new NoSuchElementException(clazz.getName());
1:f6f7de7: 			}
1:f6f7de7: 			return t;
1:f6f7de7: 		} catch (InterruptedException e) {
1:f6f7de7: 			throw new RuntimeException("Error waiting for service " + clazz.getName(), e);
1:f6f7de7: 		} finally {
1:f6f7de7: 			trackers.add(tracker);
1:f6f7de7: 		}
1:f6f7de7: 	}
1:f6f7de7: 	
1:f92844b: 	private Connection programaticConnection(Properties jdbc) {
1:f92844b: 		
1:f6f7de7: 		JDBCConnectionProviderFactory resourceProviderFactory = getService(JDBCConnectionProviderFactory.class, 5000);
1:f92844b: 		
1:f6f7de7: 		DataSourceFactory dsf = getService(DataSourceFactory.class, 5000);
1:f92844b: 		
1:dff4924: 		return resourceProviderFactory.getProviderFor(dsf, jdbc, resourceProviderConfig())
1:dff4924: 				.getResource(txControl);
1:f92844b: 	}
1:f92844b: 
1:f92844b: 	@SuppressWarnings({ "unchecked", "rawtypes" })
1:f92844b: 	private Connection configuredConnection(Properties jdbc) throws IOException {
1:f92844b: 		
1:2299957: 		String type = System.getProperty(CONFIGURED_PROVIDER_PROPERTY);
1:2299957: 		
1:f92844b: 		jdbc.setProperty(DataSourceFactory.OSGI_JDBC_DRIVER_CLASS, "org.h2.Driver");
1:f6f7de7: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1:f92844b: 		
1:2299957: 		String pid = "local".equals(type) ? "org.apache.aries.tx.control.jdbc.local" 
1:2299957: 				: "org.apache.aries.tx.control.jdbc.xa";
1:2299957: 		
1:2299957: 		System.out.println("Configuring connection provider with pid " + pid);
1:2299957: 		
1:dff4924: 		resourceProviderConfig().entrySet().stream()
1:dff4924: 			.forEach(e -> jdbc.put(e.getKey(), e.getValue()));
1:dff4924: 		
1:2299957: 		org.osgi.service.cm.Configuration config = cm.createFactoryConfiguration(
1:2906477: 				pid, "?");
1:f92844b: 		config.update((Hashtable)jdbc);
1:f92844b: 		
1:f6f7de7: 		return getService(JDBCConnectionProvider.class, 5000).getResource(txControl);
1:f92844b: 	}
1:d7c375c: 	
1:d7c375c: 	@After
1:d7c375c: 	public void tearDown() {
1:d7c375c: 
1:2906477: 		if(isConfigured()) {
1:f92844b: 			clearConfiguration();
1:7c388cb: 			ServiceTracker<JDBCConnectionProvider, JDBCConnectionProvider> tracker = new ServiceTracker<>(context, JDBCConnectionProvider.class, null);
1:7c388cb: 			tracker.open();
1:7c388cb: 			for(int i = 0;; i++) {
1:7c388cb: 				if(i == 10) {
1:7c388cb: 					throw new AssertionFailedError("The JDBCConnectionProvider was not unregistered");
1:7c388cb: 				}
1:7c388cb: 				
1:7c388cb: 				if(tracker.getService() == null) {
1:7c388cb: 					break;
1:7c388cb: 				} else {
1:7c388cb: 					try {
1:7c388cb: 						Thread.sleep(250);
1:7c388cb: 					} catch (InterruptedException e) {
1:7c388cb: 						// TODO Auto-generated catch block
1:7c388cb: 						e.printStackTrace();
1:7c388cb: 					}
1:7c388cb: 				}
1:7c388cb: 			}
1:7c388cb: 			tracker.close();
1:f92844b: 		}
1:f92844b: 		
1:4dcd48b: 		if(server != null) {
1:4dcd48b: 			server.stop();
1:f92844b: 		}
1:f6f7de7: 		
1:f6f7de7: 		trackers.stream().forEach(ServiceTracker::close);
1:f92844b: 
1:f92844b: 		connection = null;
1:f92844b: 	}
1:f92844b: 
1:f92844b: 	private void clearConfiguration() {
1:f6f7de7: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1:f92844b: 		org.osgi.service.cm.Configuration[] cfgs = null;
1:f92844b: 		try {
1:f92844b: 			cfgs = cm.listConfigurations(null);
1:f92844b: 		} catch (Exception e1) {
1:f92844b: 			// TODO Auto-generated catch block
1:f92844b: 			e1.printStackTrace();
1:f92844b: 		}
1:f92844b: 		
1:f92844b: 		if(cfgs != null) {
1:f92844b: 			for(org.osgi.service.cm.Configuration cfg : cfgs) {
1:f92844b: 				try {
1:f92844b: 					cfg.delete();
1:f92844b: 				} catch (Exception e) {}
1:f92844b: 			}
1:f92844b: 			try {
1:f92844b: 				Thread.sleep(250);
1:f92844b: 			} catch (InterruptedException e) {
1:f92844b: 				// TODO Auto-generated catch block
1:f92844b: 				e.printStackTrace();
1:f92844b: 			}
1:4dcd48b: 		}
1:d7c375c: 	}
1:d7c375c: 
1:4dcd48b: 	@Configuration
1:78dd69f: 	public Option[] localEmbeddedH2LocalTxConfiguration() {
1:d7c375c: 		String localRepo = System.getProperty("maven.repo.local");
1:d7c375c: 		if (localRepo == null) {
1:d7c375c: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:d7c375c: 		}
1:d7c375c: 		
1:d7c375c: 		Option testSpecificOptions = testSpecificOptions();
1:d7c375c: 		
1:d7c375c: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:d7c375c: 				when(localRepo != null)
1:d7c375c: 						.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:d7c375c: 				localTxControlService(),
1:d7c375c: 				localJdbcResourceProviderWithH2(),
1:d7c375c: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1:d7c375c: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:d7c375c: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:d7c375c: 				
1:f92844b: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1:d7c375c: 		);
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Configuration
1:78dd69f: 	public Option[] localServerH2LocalTxConfiguration() {
1:4dcd48b: 		String localRepo = System.getProperty("maven.repo.local");
1:4dcd48b: 		if (localRepo == null) {
1:4dcd48b: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:4dcd48b: 		}
1:78dd69f: 		
1:4dcd48b: 		Option testSpecificOptions = testSpecificOptions();
1:4dcd48b: 		
1:4dcd48b: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:4dcd48b: 				when(localRepo != null)
1:4dcd48b: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:4dcd48b: 				localTxControlService(),
1:4dcd48b: 				localJdbcResourceProviderWithH2(),
1:f92844b: 				systemProperty(REMOTE_DB_PROPERTY).value(getRemoteDBPath()),
1:4dcd48b: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1:4dcd48b: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:4dcd48b: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:f92844b: 				
1:f92844b: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1:4dcd48b: 				);
1:f92844b: 	}
1:f92844b: 
1:f92844b: 	@Configuration
1:78dd69f: 	public Option[] localConfigAdminDrivenH2LocalTxConfiguration() {
1:f92844b: 		String localRepo = System.getProperty("maven.repo.local");
1:f92844b: 		if (localRepo == null) {
1:f92844b: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:4dcd48b: 		}
1:f92844b: 		
1:f92844b: 		Option testSpecificOptions = testSpecificOptions();
1:4dcd48b: 		
1:f92844b: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:f92844b: 				when(localRepo != null)
1:f92844b: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:f92844b: 				localTxControlService(),
1:f92844b: 				localJdbcResourceProviderWithH2(),
1:f92844b: 				systemProperty(REMOTE_DB_PROPERTY).value(getRemoteDBPath()),
1:f92844b: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1:2299957: 				systemProperty(CONFIGURED_PROVIDER_PROPERTY).value("local"),
1:2299957: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1:2299957: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:2299957: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:2299957: 				
1:2299957: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1:2299957: 				);
1:2299957: 	}
1:2299957: 	
1:2299957: 	@Configuration
1:78dd69f: 	public Option[] localEmbeddedH2XATxConfiguration() {
1:78dd69f: 		String localRepo = System.getProperty("maven.repo.local");
1:78dd69f: 		if (localRepo == null) {
1:78dd69f: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:78dd69f: 		}
1:2299957: 		
1:78dd69f: 		Option testSpecificOptions = testSpecificOptions();
1:78dd69f: 		
1:78dd69f: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:78dd69f: 				when(localRepo != null)
1:78dd69f: 						.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:78dd69f: 				xaTxControlService(),
1:78dd69f: 				localJdbcResourceProviderWithH2(),
1:78dd69f: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1:78dd69f: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:78dd69f: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:78dd69f: 				
1:78dd69f: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1:78dd69f: 		);
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Configuration
1:78dd69f: 	public Option[] localServerH2XATxConfiguration() {
1:78dd69f: 		String localRepo = System.getProperty("maven.repo.local");
1:78dd69f: 		if (localRepo == null) {
1:78dd69f: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:78dd69f: 		}
1:78dd69f: 		
1:78dd69f: 		Option testSpecificOptions = testSpecificOptions();
1:78dd69f: 		
1:78dd69f: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:78dd69f: 				when(localRepo != null)
1:78dd69f: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:78dd69f: 				xaTxControlService(),
1:78dd69f: 				localJdbcResourceProviderWithH2(),
1:78dd69f: 				systemProperty(REMOTE_DB_PROPERTY).value(getRemoteDBPath()),
1:78dd69f: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1:78dd69f: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:78dd69f: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:78dd69f: 				
1:78dd69f: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1:78dd69f: 				);
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Configuration
1:78dd69f: 	public Option[] localConfigAdminDrivenH2XATxConfiguration() {
1:78dd69f: 		String localRepo = System.getProperty("maven.repo.local");
1:78dd69f: 		if (localRepo == null) {
1:78dd69f: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:78dd69f: 		}
1:78dd69f: 		
1:78dd69f: 		Option testSpecificOptions = testSpecificOptions();
1:78dd69f: 		
1:78dd69f: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:78dd69f: 				when(localRepo != null)
1:78dd69f: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:78dd69f: 				xaTxControlService(),
1:78dd69f: 				localJdbcResourceProviderWithH2(),
1:78dd69f: 				systemProperty(REMOTE_DB_PROPERTY).value(getRemoteDBPath()),
1:78dd69f: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1:2299957: 				systemProperty(CONFIGURED_PROVIDER_PROPERTY).value("local"),
1:78dd69f: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1:78dd69f: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:78dd69f: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:78dd69f: 				
1:78dd69f: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1:78dd69f: 				);
1:f92844b: 	}
1:f92844b: 	
1:d7c375c: 	@Configuration
1:2299957: 	public Option[] xaServerH2XATxConfiguration() {
1:2299957: 		String localRepo = System.getProperty("maven.repo.local");
1:2299957: 		if (localRepo == null) {
1:2299957: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:2299957: 		}
1:2299957: 		
1:2299957: 		Option testSpecificOptions = testSpecificOptions();
1:2299957: 		
1:2299957: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:2299957: 				when(localRepo != null)
1:2299957: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:2299957: 				xaTxControlService(),
1:2299957: 				xaJdbcResourceProviderWithH2(),
1:2299957: 				systemProperty(REMOTE_DB_PROPERTY).value(getRemoteDBPath()),
1:2299957: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1:2299957: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:2299957: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:2299957: 				
1:2299957: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1:2299957: 				);
1:2299957: 	}
1:2299957: 
1:2299957: 	@Configuration
1:2299957: 	public Option[] xaConfigAdminDrivenH2XATxConfiguration() {
1:2299957: 		String localRepo = System.getProperty("maven.repo.local");
1:2299957: 		if (localRepo == null) {
1:2299957: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:2299957: 		}
1:2299957: 		
1:2299957: 		Option testSpecificOptions = testSpecificOptions();
1:f92844b: 		
1:2299957: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:2299957: 				when(localRepo != null)
1:2299957: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:2299957: 				xaTxControlService(),
1:2299957: 				xaJdbcResourceProviderWithH2(),
1:2299957: 				systemProperty(REMOTE_DB_PROPERTY).value(getRemoteDBPath()),
1:2299957: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1:2299957: 				systemProperty(CONFIGURED_PROVIDER_PROPERTY).value("xa"),
1:f92844b: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1:f92844b: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:f92844b: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:4dcd48b: 				
1:f92844b: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1:f92844b: 				);
1:d7c375c: 	}
1:d7c375c: 
1:f92844b: 	private String getRemoteDBPath() {
1:f92844b: 		String fullResourceName = getClass().getName().replace('.', '/') + ".class";
1:f92844b: 		
1:f92844b: 		String resourcePath = getClass().getResource(getClass().getSimpleName() + ".class").getPath();
1:f92844b: 		
1:f92844b: 		File testClassesDir = new File(resourcePath.substring(0, resourcePath.length() - fullResourceName.length()));
1:f92844b: 		
1:f92844b: 		String dbPath = new File(testClassesDir.getParentFile(), "testdb/db1").getAbsolutePath();
1:f92844b: 		return dbPath;
1:f92844b: 	}
1:d7c375c: 	
1:d7c375c: 	public Option localTxControlService() {
1:d7c375c: 		return CoreOptions.composite(
1:2299957: 				systemProperty(TX_CONTROL_FILTER).value("(!(osgi.xa.enabled=*))"),
1:d7c375c: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-local").versionAsInProject());
1:d7c375c: 	}
1:d7c375c: 
1:78dd69f: 	public Option xaTxControlService() {
1:78dd69f: 		return CoreOptions.composite(
1:2299957: 				systemProperty(TX_CONTROL_FILTER).value("(osgi.xa.enabled=true)"),
1:78dd69f: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-xa").versionAsInProject());
1:78dd69f: 	}
1:78dd69f: 
1:d7c375c: 	public Option localJdbcResourceProviderWithH2() {
1:d7c375c: 		return CoreOptions.composite(
1:d7c375c: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
1:d7c375c: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jdbc-local").versionAsInProject());
1:d7c375c: 	}
1:d7c375c: 
1:2299957: 	public Option xaJdbcResourceProviderWithH2() {
1:2299957: 		return CoreOptions.composite(
1:2299957: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
1:2299957: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jdbc-xa").versionAsInProject());
1:2299957: 	}
1:2299957: 
1:d7c375c: 	protected Option testSpecificOptions() {
1:d7c375c: 		return null;
1:d7c375c: 	}
1:d7c375c: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7c388cb
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.AssertionFailedError;
1: 
/////////////////////////////////////////////////////////////////////////
1: 			ServiceTracker<JDBCConnectionProvider, JDBCConnectionProvider> tracker = new ServiceTracker<>(context, JDBCConnectionProvider.class, null);
1: 			tracker.open();
1: 			for(int i = 0;; i++) {
1: 				if(i == 10) {
1: 					throw new AssertionFailedError("The JDBCConnectionProvider was not unregistered");
1: 				}
1: 				
1: 				if(tracker.getService() == null) {
1: 					break;
1: 				} else {
1: 					try {
1: 						Thread.sleep(250);
1: 					} catch (InterruptedException e) {
1: 						// TODO Auto-generated catch block
1: 						e.printStackTrace();
1: 					}
1: 				}
1: 			}
1: 			tracker.close();
commit:dff4924
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: 	protected Map<String, Object> resourceProviderConfig() {
1: 		// No extra information by default
1: 		return new HashMap<>();
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 		return resourceProviderFactory.getProviderFor(dsf, jdbc, resourceProviderConfig())
1: 				.getResource(txControl);
/////////////////////////////////////////////////////////////////////////
1: 		resourceProviderConfig().entrySet().stream()
1: 			.forEach(e -> jdbc.put(e.getKey(), e.getValue()));
1: 		
commit:2906477
/////////////////////////////////////////////////////////////////////////
1: 	protected final List<ServiceTracker<?,?>> trackers = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1: 		boolean configuredProvider = isConfigured();
/////////////////////////////////////////////////////////////////////////
1: 	public boolean isConfigured() {
1: 		return System.getProperties().containsKey(CONFIGURED_PROVIDER_PROPERTY);
1: 	}
1: 
1: 	protected <T> T getService(Class<T> clazz, long timeout) {
/////////////////////////////////////////////////////////////////////////
1: 				pid, "?");
/////////////////////////////////////////////////////////////////////////
1: 		if(isConfigured()) {
commit:f6f7de7
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.NoSuchElementException;
1: import javax.inject.Inject;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.util.tracker.ServiceTracker;
1: public abstract class AbstractTransactionTest {
1: 	
1: 	@Inject
1: 	BundleContext context;
1: 	
1: 	
0: 	private final List<ServiceTracker<?,?>> trackers = new ArrayList<>();
1: 		txControl = getService(TransactionControl.class, 
/////////////////////////////////////////////////////////////////////////
0: 	private <T> T getService(Class<T> clazz, long timeout) {
1: 		try {
1: 			return getService(clazz, null, timeout);
1: 		} catch (InvalidSyntaxException e) {
1: 			throw new IllegalArgumentException(e);
1: 		}
1: 	}
1: 
1: 	private <T> T getService(Class<T> clazz, String filter, long timeout) throws InvalidSyntaxException {
1: 		Filter f = FrameworkUtil.createFilter(filter == null ? "(|(foo=bar)(!(foo=bar)))" : filter); 
1: 		
1: 		ServiceTracker<T, T> tracker = new ServiceTracker<T, T>(context, clazz, null) {
1: 			@Override
1: 			public T addingService(ServiceReference<T> reference) {
1: 				return f.match(reference) ? super.addingService(reference) : null;
1: 			}
1: 		};
1: 
1: 		tracker.open();
1: 		try {
1: 			T t = tracker.waitForService(timeout);
1: 			if(t == null) {
1: 				throw new NoSuchElementException(clazz.getName());
1: 			}
1: 			return t;
1: 		} catch (InterruptedException e) {
1: 			throw new RuntimeException("Error waiting for service " + clazz.getName(), e);
1: 		} finally {
1: 			trackers.add(tracker);
1: 		}
1: 	}
1: 	
1: 		JDBCConnectionProviderFactory resourceProviderFactory = getService(JDBCConnectionProviderFactory.class, 5000);
1: 		DataSourceFactory dsf = getService(DataSourceFactory.class, 5000);
/////////////////////////////////////////////////////////////////////////
1: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
/////////////////////////////////////////////////////////////////////////
1: 		return getService(JDBCConnectionProvider.class, 5000).getResource(txControl);
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		trackers.stream().forEach(ServiceTracker::close);
1: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f87416c
/////////////////////////////////////////////////////////////////////////
commit:2299957
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	private static final String TX_CONTROL_FILTER = "org.apache.aries.tx.control.itests.filter";
/////////////////////////////////////////////////////////////////////////
0: 		txControl = context().getService(TransactionControl.class, 
1: 				System.getProperty(TX_CONTROL_FILTER), 5000);
1: 		
1: 		Properties jdbc = new Properties();
/////////////////////////////////////////////////////////////////////////
0: 		boolean configuredProvider = System.getProperties().containsKey(CONFIGURED_PROVIDER_PROPERTY);
/////////////////////////////////////////////////////////////////////////
1: 		String type = System.getProperty(CONFIGURED_PROVIDER_PROPERTY);
1: 		
1: 		String pid = "local".equals(type) ? "org.apache.aries.tx.control.jdbc.local" 
1: 				: "org.apache.aries.tx.control.jdbc.xa";
1: 		
1: 		System.out.println("Configuring connection provider with pid " + pid);
1: 		
1: 		org.osgi.service.cm.Configuration config = cm.createFactoryConfiguration(
0: 				pid, null);
/////////////////////////////////////////////////////////////////////////
0: 		if(System.getProperties().containsKey(CONFIGURED_PROVIDER_PROPERTY)) {
/////////////////////////////////////////////////////////////////////////
1: 				systemProperty(CONFIGURED_PROVIDER_PROPERTY).value("local"),
/////////////////////////////////////////////////////////////////////////
1: 				systemProperty(CONFIGURED_PROVIDER_PROPERTY).value("local"),
1: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 				
1: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1: 				);
1: 	}
1: 	
1: 	@Configuration
1: 	public Option[] xaServerH2XATxConfiguration() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		
1: 		Option testSpecificOptions = testSpecificOptions();
1: 		
1: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null)
1: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				xaTxControlService(),
1: 				xaJdbcResourceProviderWithH2(),
1: 				systemProperty(REMOTE_DB_PROPERTY).value(getRemoteDBPath()),
1: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 				
1: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1: 				);
1: 	}
1: 
1: 	@Configuration
1: 	public Option[] xaConfigAdminDrivenH2XATxConfiguration() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		
1: 		Option testSpecificOptions = testSpecificOptions();
1: 		
1: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null)
1: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				xaTxControlService(),
1: 				xaJdbcResourceProviderWithH2(),
1: 				systemProperty(REMOTE_DB_PROPERTY).value(getRemoteDBPath()),
1: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1: 				systemProperty(CONFIGURED_PROVIDER_PROPERTY).value("xa"),
/////////////////////////////////////////////////////////////////////////
1: 				systemProperty(TX_CONTROL_FILTER).value("(!(osgi.xa.enabled=*))"),
1: 				systemProperty(TX_CONTROL_FILTER).value("(osgi.xa.enabled=true)"),
/////////////////////////////////////////////////////////////////////////
1: 	public Option xaJdbcResourceProviderWithH2() {
1: 		return CoreOptions.composite(
1: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jdbc-xa").versionAsInProject());
1: 	}
1: 
commit:78dd69f
/////////////////////////////////////////////////////////////////////////
1: 	public Option[] localEmbeddedH2LocalTxConfiguration() {
/////////////////////////////////////////////////////////////////////////
1: 	public Option[] localServerH2LocalTxConfiguration() {
/////////////////////////////////////////////////////////////////////////
1: 	public Option[] localConfigAdminDrivenH2LocalTxConfiguration() {
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	@Configuration
1: 	public Option[] localEmbeddedH2XATxConfiguration() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		
1: 		Option testSpecificOptions = testSpecificOptions();
1: 		
1: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null)
1: 						.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				xaTxControlService(),
1: 				localJdbcResourceProviderWithH2(),
1: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 				
1: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1: 		);
1: 	}
1: 
1: 	@Configuration
1: 	public Option[] localServerH2XATxConfiguration() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		
1: 		Option testSpecificOptions = testSpecificOptions();
1: 		
1: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null)
1: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				xaTxControlService(),
1: 				localJdbcResourceProviderWithH2(),
1: 				systemProperty(REMOTE_DB_PROPERTY).value(getRemoteDBPath()),
1: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 				
1: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1: 				);
1: 	}
1: 
1: 	@Configuration
1: 	public Option[] localConfigAdminDrivenH2XATxConfiguration() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		
1: 		Option testSpecificOptions = testSpecificOptions();
1: 		
1: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null)
1: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				xaTxControlService(),
1: 				localJdbcResourceProviderWithH2(),
1: 				systemProperty(REMOTE_DB_PROPERTY).value(getRemoteDBPath()),
1: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
0: 				systemProperty(CONFIGURED_PROVIDER_PROPERTY).value("true"),
1: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 				
1: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1: 				);
1: 	}
/////////////////////////////////////////////////////////////////////////
1: 	public Option xaTxControlService() {
1: 		return CoreOptions.composite(
0: 				mavenBundle("org.apache.felix", "org.apache.felix.coordinator").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-xa").versionAsInProject());
1: 	}
1: 
commit:f92844b
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Hashtable;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProvider;
/////////////////////////////////////////////////////////////////////////
1: 	private static final String CONFIGURED_PROVIDER_PROPERTY = "org.apache.aries.tx.control.itests.configured";
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		boolean external = System.getProperties().containsKey(REMOTE_DB_PROPERTY);
1: 			jdbcUrl = "jdbc:h2:tcp://127.0.0.1:" + server.getPort() + "/" + System.getProperty(REMOTE_DB_PROPERTY);
0: 		boolean configuredProvider = Boolean.getBoolean(CONFIGURED_PROVIDER_PROPERTY);
1: 		
1: 		connection = configuredProvider ? configuredConnection(jdbc) : programaticConnection(jdbc);
/////////////////////////////////////////////////////////////////////////
1: 
1: 	private Connection programaticConnection(Properties jdbc) {
1: 		
0: 		JDBCConnectionProviderFactory resourceProviderFactory = context()
0: 				.getService(JDBCConnectionProviderFactory.class, 5000);
1: 		
0: 		DataSourceFactory dsf = context().getService(DataSourceFactory.class, 5000);
1: 		
0: 		return resourceProviderFactory.getProviderFor(dsf, jdbc, null).getResource(txControl);
1: 	}
1: 
1: 	@SuppressWarnings({ "unchecked", "rawtypes" })
1: 	private Connection configuredConnection(Properties jdbc) throws IOException {
1: 		
1: 		jdbc.setProperty(DataSourceFactory.OSGI_JDBC_DRIVER_CLASS, "org.h2.Driver");
0: 		ConfigurationAdmin cm = context().getService(ConfigurationAdmin.class, 5000);
1: 		
0: 		org.osgi.service.cm.Configuration config = cm.createFactoryConfiguration("org.apache.aries.tx.control.jdbc.local", null);
1: 		config.update((Hashtable)jdbc);
1: 		
0: 		return context().getService(JDBCConnectionProvider.class, 5000).getResource(txControl);
1: 	}
/////////////////////////////////////////////////////////////////////////
1: 		
0: 		if(Boolean.getBoolean(CONFIGURED_PROVIDER_PROPERTY)) {
1: 			clearConfiguration();
1: 		}
1: 		
1: 
1: 		connection = null;
1: 	}
1: 
1: 	private void clearConfiguration() {
0: 		ConfigurationAdmin cm = context().getService(ConfigurationAdmin.class, 5000);
1: 		org.osgi.service.cm.Configuration[] cfgs = null;
1: 		try {
1: 			cfgs = cm.listConfigurations(null);
1: 		} catch (Exception e1) {
1: 			// TODO Auto-generated catch block
1: 			e1.printStackTrace();
1: 		}
1: 		
1: 		if(cfgs != null) {
1: 			for(org.osgi.service.cm.Configuration cfg : cfgs) {
1: 				try {
1: 					cfg.delete();
1: 				} catch (Exception e) {}
1: 			}
1: 			try {
1: 				Thread.sleep(250);
1: 			} catch (InterruptedException e) {
1: 				// TODO Auto-generated catch block
1: 				e.printStackTrace();
1: 			}
1: 		}
/////////////////////////////////////////////////////////////////////////
1: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
/////////////////////////////////////////////////////////////////////////
1: 				systemProperty(REMOTE_DB_PROPERTY).value(getRemoteDBPath()),
1: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1: 
1: 	@Configuration
0: 	public Option[] configAdminDrivenConfiguration() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		
1: 		Option testSpecificOptions = testSpecificOptions();
1: 		
1: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null)
1: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				localTxControlService(),
1: 				localJdbcResourceProviderWithH2(),
1: 				systemProperty(REMOTE_DB_PROPERTY).value(getRemoteDBPath()),
1: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
0: 				systemProperty(CONFIGURED_PROVIDER_PROPERTY).value("true"),
1: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 				
1: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1: 				);
1: 	}
1: 
1: 	private String getRemoteDBPath() {
1: 		String fullResourceName = getClass().getName().replace('.', '/') + ".class";
1: 		
1: 		String resourcePath = getClass().getResource(getClass().getSimpleName() + ".class").getPath();
1: 		
1: 		File testClassesDir = new File(resourcePath.substring(0, resourcePath.length() - fullResourceName.length()));
1: 		
1: 		String dbPath = new File(testClassesDir.getParentFile(), "testdb/db1").getAbsolutePath();
1: 		return dbPath;
1: 	}
commit:4dcd48b
/////////////////////////////////////////////////////////////////////////
1: import org.h2.tools.Server;
/////////////////////////////////////////////////////////////////////////
1: 	private static final String REMOTE_DB_PROPERTY = "org.apache.aries.tx.control.itests.remotedb";
1: 
/////////////////////////////////////////////////////////////////////////
1: 	private Server server;
1: 
1: 	public void setUp() throws Exception {
0: 		Boolean external = Boolean.parseBoolean(REMOTE_DB_PROPERTY);
1: 		
1: 		String jdbcUrl;
1: 		if(external) {
1: 			server = Server.createTcpServer("-tcpPort", "0");
1: 			server.start();
1: 			
0: 			jdbcUrl = "jdbc:h2:tcp://127.0.0.1:" + server.getPort() + "/target/test/db1";
1: 		} else {
1: 			jdbcUrl = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1";
1: 		}
1: 		
1: 		jdbc.setProperty(DataSourceFactory.JDBC_URL, jdbcUrl);
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		if(server != null) {
1: 			server.stop();
1: 		}
0: 	public Option[] localH2Configuration() {
/////////////////////////////////////////////////////////////////////////
1: 
1: 	@Configuration
0: 	public Option[] serverH2Configuration() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		
1: 		Option testSpecificOptions = testSpecificOptions();
1: 		
1: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null)
1: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				localTxControlService(),
1: 				localJdbcResourceProviderWithH2(),
0: 				systemProperty(REMOTE_DB_PROPERTY).value("true"),
1: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 				
1: 				/*
0: 				 * vmOption
0: 				 * ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0: 				 * waitForFrameworkStartup(),
1: 				 */
1: 				);
1: 	}
commit:d7c375c
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: package org.apache.aries.tx.control.itests;
1: 
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.options;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import static org.ops4j.pax.exam.CoreOptions.when;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Properties;
1: 
0: import javax.inject.Inject;
1: 
0: import org.apache.aries.itest.AbstractIntegrationTest;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
0: public abstract class AbstractTransactionTest extends AbstractIntegrationTest {
1: 
0: 	@Inject
1: 	protected TransactionControl txControl;
1: 
0: 	@Inject
0: 	JDBCConnectionProviderFactory resourceProviderFactory;
1: 	
0: 	@Inject
0: 	DataSourceFactory dsf;
1: 	
1: 	protected Connection connection;
1: 
1: 	@Before
0: 	public void setUp() {
0: 		Properties jdbc = new Properties();
1: 		
0: 		jdbc.setProperty(DataSourceFactory.JDBC_URL, "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
1: 		
0: 		connection = resourceProviderFactory.getProviderFor(dsf, jdbc, null).getResource(txControl);
1: 		
1: 		
1: 		txControl.required(() -> {
1: 				Statement s = connection.createStatement();
1: 				try {
1: 					s.execute("DROP TABLE TEST_TABLE");
1: 				} catch (SQLException sqle) {}
1: 				s.execute("CREATE TABLE TEST_TABLE ( message varchar(255) )");
1: 				return null;
1: 			});
1: 	}
1: 	
1: 	@After
1: 	public void tearDown() {
1: 
0: 		txControl.required(() -> connection.createStatement()
0: 				.execute("DROP TABLE TEST_TABLE"));
1: 
1: 	}
1: 
1: 	@Configuration
0: 	public Option[] configuration() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		
1: 		Option testSpecificOptions = testSpecificOptions();
1: 		
1: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null)
1: 						.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				localTxControlService(),
1: 				localJdbcResourceProviderWithH2(),
1: 				when(testSpecificOptions != null).useOptions(testSpecificOptions),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 				
0: 		/*
0: 		 * vmOption
0: 		 * ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0: 		 * waitForFrameworkStartup(),
0: 		 */
1: 		);
1: 	}
1: 	
1: 	public Option localTxControlService() {
1: 		return CoreOptions.composite(
0: 				mavenBundle("org.apache.felix", "org.apache.felix.coordinator").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-local").versionAsInProject());
1: 	}
1: 
1: 	public Option localJdbcResourceProviderWithH2() {
1: 		return CoreOptions.composite(
1: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jdbc-local").versionAsInProject());
1: 	}
1: 
1: 	protected Option testSpecificOptions() {
1: 		return null;
1: 	}
1: }
============================================================================