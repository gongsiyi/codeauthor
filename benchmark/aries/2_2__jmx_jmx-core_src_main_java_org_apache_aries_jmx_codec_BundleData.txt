1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
4:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
1:fdf3952: 
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleDependencies;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleExportedPackages;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleImportedPackages;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleState;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getDependentBundles;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getFragmentIds;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getHostIds;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getRegisteredServiceIds;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getServicesInUseByBundle;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.isBundlePendingRemoval;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.isBundleRequiredByOthers;
1:fdf3952: import static org.apache.aries.jmx.util.TypeUtils.toLong;
1:fdf3952: import static org.apache.aries.jmx.util.TypeUtils.toPrimitive;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.EXPORTED_PACKAGES;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.FRAGMENT;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.FRAGMENTS;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.HEADERS;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.HEADERS_TYPE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.HEADER_TYPE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.HOSTS;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.IMPORTED_PACKAGES;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.KEY;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.LAST_MODIFIED;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.LOCATION;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.PERSISTENTLY_STARTED;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.REGISTERED_SERVICES;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.REMOVAL_PENDING;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.REQUIRED;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.REQUIRED_BUNDLES;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.REQUIRING_BUNDLES;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.SERVICES_IN_USE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.START_LEVEL;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.STATE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.VALUE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.VERSION;
1:fdf3952: 
1:fdf3952: import java.util.ArrayList;
1:fdf3952: import java.util.Collection;
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.Enumeration;
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.List;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.JMRuntimeException;
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: import javax.management.openmbean.TabularDataSupport;
1:fdf3952: 
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.jmx.framework.BundleStateMBean;
1:fdf3952: import org.osgi.service.packageadmin.PackageAdmin;
1:fdf3952: import org.osgi.service.startlevel.StartLevel;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>BundleData</tt> represents BundleData Type @see {@link BundleStateMBean#BUNDLE_TYPE}. It is a codec for the
1:fdf3952:  * <code>CompositeData</code> representing an OSGi BundleData.
1:fdf3952:  * </p>
1:a928ee9:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:0a8778f: @SuppressWarnings("deprecation")
1:fdf3952: public class BundleData {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#EXPORTED_PACKAGES_ITEM
1:fdf3952:      */
1:fdf3952:     private String[] exportedPackages;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#FRAGMENT_ITEM
1:fdf3952:      */
1:fdf3952:     private boolean fragment;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#FRAGMENTS_ITEM
1:fdf3952:      */
1:fdf3952:     private long[] fragments;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#HEADER_TYPE
1:fdf3952:      */
1:fdf3952:     private List<Header> headers = new ArrayList<Header>();
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#HOSTS_ITEM
1:fdf3952:      */
1:fdf3952:     private long[] hosts;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#IDENTIFIER_ITEM
1:fdf3952:      */
1:fdf3952:     private long identifier;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#IMPORTED_PACKAGES_ITEM
1:fdf3952:      */
1:fdf3952:     private String[] importedPackages;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#LAST_MODIFIED_ITEM
1:fdf3952:      */
1:fdf3952:     private long lastModified;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#LOCATION_ITEM
1:fdf3952:      */
1:fdf3952:     private String location;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#PERSISTENTLY_STARTED_ITEM
1:fdf3952:      */
1:fdf3952:     private boolean persistentlyStarted;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#REGISTERED_SERVICES_ITEM
1:fdf3952:      */
1:fdf3952:     private long[] registeredServices;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#REMOVAL_PENDING_ITEM
1:fdf3952:      */
1:fdf3952:     private boolean removalPending;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#REQUIRED_ITEM
1:fdf3952:      */
1:fdf3952:     private boolean required;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#REQUIRED_BUNDLES_ITEM
1:fdf3952:      */
1:fdf3952:     private long[] requiredBundles;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#REQUIRING_BUNDLES_ITEM
1:fdf3952:      */
1:fdf3952:     private long[] requiringBundles;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#SERVICES_IN_USE_ITEM
1:fdf3952:      */
1:fdf3952:     private long[] servicesInUse;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#START_LEVEL_ITEM
1:fdf3952:      */
1:fdf3952:     private int bundleStartLevel;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#STATE_ITEM
1:fdf3952:      */
1:fdf3952:     private String state;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#SYMBOLIC_NAME_ITEM
1:fdf3952:      */
1:fdf3952:     private String symbolicName;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#VERSION_ITEM
1:fdf3952:      */
1:fdf3952:     private String version;
1:fdf3952: 
1:fdf3952:     private BundleData() {
1:fdf3952:         super();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BundleData(BundleContext localBundleContext, Bundle bundle, PackageAdmin packageAdmin, StartLevel startLevel) {
1:fdf3952:         if (bundle == null) {
1:fdf3952:             throw new IllegalArgumentException("Argument bundle cannot be null");
1:fdf3952:         }
1:fdf3952:         if (packageAdmin == null || startLevel == null) {
1:fdf3952:             throw new IllegalArgumentException("Arguments PackageAdmin / startLevel cannot be null");
1:fdf3952:         }
1:fdf3952:         this.exportedPackages = getBundleExportedPackages(bundle, packageAdmin);
1:fdf3952:         this.fragment = (PackageAdmin.BUNDLE_TYPE_FRAGMENT == packageAdmin.getBundleType(bundle));
1:fdf3952:         this.fragments = getFragmentIds(bundle, packageAdmin);
1:fdf3952:         Dictionary<String, String> bundleHeaders = bundle.getHeaders();
1:fdf3952:         Enumeration<String> keys = bundleHeaders.keys();
1:fdf3952:         while (keys.hasMoreElements()) {
1:fdf3952:             String key = keys.nextElement();
1:fdf3952:             headers.add(new Header(key, bundleHeaders.get(key)));
1:fdf3952:         }
1:fdf3952:         this.hosts = getHostIds(bundle, packageAdmin);
1:fdf3952:         this.identifier = bundle.getBundleId();
1:fdf3952:         this.importedPackages = getBundleImportedPackages(localBundleContext, bundle, packageAdmin);
1:fdf3952:         this.lastModified = bundle.getLastModified();
1:fdf3952:         this.location = bundle.getLocation();
1:fdf3952:         this.persistentlyStarted = startLevel.isBundlePersistentlyStarted(bundle);
1:fdf3952:         this.registeredServices = getRegisteredServiceIds(bundle);
1:fdf3952:         this.removalPending = isBundlePendingRemoval(bundle, packageAdmin);
1:fdf3952:         this.required = isBundleRequiredByOthers(bundle, packageAdmin);
1:fdf3952:         this.requiredBundles = getBundleDependencies(localBundleContext, bundle, packageAdmin);
1:fdf3952:         this.requiringBundles = getDependentBundles(bundle, packageAdmin);
1:fdf3952:         this.servicesInUse = getServicesInUseByBundle(bundle);
1:fdf3952:         this.bundleStartLevel = startLevel.getBundleStartLevel(bundle);
1:fdf3952:         this.state = getBundleState(bundle);
1:fdf3952:         this.symbolicName = bundle.getSymbolicName();
1:fdf3952:         this.version = bundle.getVersion().toString();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Returns CompositeData representing a BundleData complete state typed by {@link BundleStateMBean#BUNDLE_TYPE}
1:a928ee9:      *
1:fdf3952:      * @return
1:fdf3952:      */
1:fdf3952:     public CompositeData toCompositeData() {
1:a928ee9:         return toCompositeData(BundleStateMBean.BUNDLE_TYPE.keySet());
1:a928ee9:     }
1:a928ee9: 
1:a928ee9:     public CompositeData toCompositeData(Collection<String> itemNames) {
1:fdf3952:         Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(IDENTIFIER, this.identifier);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(EXPORTED_PACKAGES))
1:a928ee9:             items.put(EXPORTED_PACKAGES, this.exportedPackages);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(FRAGMENT))
1:a928ee9:             items.put(FRAGMENT, this.fragment);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(FRAGMENTS))
1:a928ee9:             items.put(FRAGMENTS, toLong(this.fragments));
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(HOSTS))
1:a928ee9:             items.put(HOSTS, toLong(this.hosts));
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(IMPORTED_PACKAGES))
1:a928ee9:             items.put(IMPORTED_PACKAGES, this.importedPackages);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(LAST_MODIFIED))
1:a928ee9:             items.put(LAST_MODIFIED, this.lastModified);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(LOCATION))
1:a928ee9:             items.put(LOCATION, this.location);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(PERSISTENTLY_STARTED))
1:a928ee9:             items.put(PERSISTENTLY_STARTED, this.persistentlyStarted);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(REGISTERED_SERVICES))
1:a928ee9:             items.put(REGISTERED_SERVICES, toLong(this.registeredServices));
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(REMOVAL_PENDING))
1:a928ee9:             items.put(REMOVAL_PENDING, this.removalPending);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(REQUIRED))
1:a928ee9:             items.put(REQUIRED, this.required);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(REQUIRED_BUNDLES))
1:a928ee9:             items.put(REQUIRED_BUNDLES, toLong(this.requiredBundles));
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(REQUIRING_BUNDLES))
1:a928ee9:             items.put(REQUIRING_BUNDLES, toLong(this.requiringBundles));
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(SERVICES_IN_USE))
1:a928ee9:             items.put(SERVICES_IN_USE, toLong(this.servicesInUse));
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(START_LEVEL))
1:a928ee9:             items.put(START_LEVEL, this.bundleStartLevel);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(STATE))
1:a928ee9:             items.put(STATE, this.state);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(SYMBOLIC_NAME))
1:a928ee9:             items.put(SYMBOLIC_NAME, this.symbolicName);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(VERSION))
1:a928ee9:             items.put(VERSION, this.version);
1:a928ee9: 
1:a928ee9:         if (itemNames.contains(HEADERS)) {
1:a928ee9:             TabularData headerTable = new TabularDataSupport(HEADERS_TYPE);
1:a928ee9:             for (Header header : this.headers) {
1:a928ee9:                 headerTable.put(header.toCompositeData());
1:a928ee9:             }
1:a928ee9:             items.put(HEADERS, headerTable);
1:fdf3952:         }
1:a928ee9: 
1:a928ee9:         String[] allItemNames = BUNDLE_TYPE.keySet().toArray(new String [] {});
1:a928ee9:         Object[] itemValues = new Object[allItemNames.length];
1:a928ee9:         for (int i=0; i < allItemNames.length; i++) {
1:a928ee9:             itemValues[i] = items.get(allItemNames[i]);
1:a928ee9:         }
1:a928ee9: 
1:fdf3952:         try {
1:a928ee9:             return new CompositeDataSupport(BUNDLE_TYPE, allItemNames, itemValues);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new IllegalStateException("Failed to create CompositeData for BundleData [" + this.identifier
1:fdf3952:                     + "]", e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs a <code>BundleData</code> object from the given <code>CompositeData</code>
1:a928ee9:      *
1:fdf3952:      * @param compositeData
1:fdf3952:      * @return
1:fdf3952:      * @throws IlleglArgumentException
1:fdf3952:      *             if compositeData is null or not of type {@link BundleStateMBean#BUNDLE_TYPE}
1:fdf3952:      */
2:fdf3952:     @SuppressWarnings("unchecked")
1:fdf3952:     public static BundleData from(CompositeData compositeData) throws IllegalArgumentException {
1:fdf3952:         if (compositeData == null) {
1:fdf3952:             throw new IllegalArgumentException("Argument compositeData cannot be null");
1:fdf3952:         }
1:fdf3952:         if (!compositeData.getCompositeType().equals(BUNDLE_TYPE)) {
1:fdf3952:             throw new IllegalArgumentException("Invalid CompositeType [" + compositeData.getCompositeType() + "]");
1:fdf3952:         }
1:fdf3952:         BundleData bundleData = new BundleData();
1:fdf3952:         bundleData.exportedPackages = (String[]) compositeData.get(EXPORTED_PACKAGES);
1:fdf3952:         bundleData.fragment = (Boolean) compositeData.get(FRAGMENT);
1:fdf3952:         bundleData.fragments = toPrimitive((Long[]) compositeData.get(FRAGMENTS));
1:fdf3952:         bundleData.hosts = toPrimitive((Long[]) compositeData.get(HOSTS));
1:fdf3952:         bundleData.identifier = (Long) compositeData.get(IDENTIFIER);
1:fdf3952:         bundleData.importedPackages = (String[]) compositeData.get(IMPORTED_PACKAGES);
1:fdf3952:         bundleData.lastModified = (Long) compositeData.get(LAST_MODIFIED);
1:fdf3952:         bundleData.location = (String) compositeData.get(LOCATION);
1:fdf3952:         bundleData.persistentlyStarted = (Boolean) compositeData.get(PERSISTENTLY_STARTED);
1:fdf3952:         bundleData.registeredServices = toPrimitive((Long[]) compositeData.get(REGISTERED_SERVICES));
1:fdf3952:         bundleData.removalPending = (Boolean) compositeData.get(REMOVAL_PENDING);
1:fdf3952:         bundleData.required = (Boolean) compositeData.get(REQUIRED);
1:fdf3952:         bundleData.requiredBundles = toPrimitive((Long[]) compositeData.get(REQUIRED_BUNDLES));
1:fdf3952:         bundleData.requiringBundles = toPrimitive((Long[]) compositeData.get(REQUIRING_BUNDLES));
1:fdf3952:         bundleData.servicesInUse = toPrimitive((Long[]) compositeData.get(SERVICES_IN_USE));
1:fdf3952:         bundleData.bundleStartLevel = (Integer) compositeData.get(START_LEVEL);
1:fdf3952:         bundleData.state = (String) compositeData.get(STATE);
1:fdf3952:         bundleData.symbolicName = (String) compositeData.get(SYMBOLIC_NAME);
1:fdf3952:         bundleData.version = (String) compositeData.get(VERSION);
1:fdf3952:         TabularData headerTable = (TabularData) compositeData.get(HEADERS);
1:fdf3952:         Collection<CompositeData> headerData = (Collection<CompositeData>) headerTable.values();
1:fdf3952:         for (CompositeData headerRow : headerData) {
1:fdf3952:             bundleData.headers.add(Header.from(headerRow));
1:fdf3952:         }
1:fdf3952:         return bundleData;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String[] getExportedPackages() {
1:fdf3952:         return exportedPackages;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public boolean isFragment() {
1:fdf3952:         return fragment;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long[] getFragments() {
1:fdf3952:         return fragments;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public List<Header> getHeaders() {
1:fdf3952:         return headers;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long[] getHosts() {
1:fdf3952:         return hosts;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long getIdentifier() {
1:fdf3952:         return identifier;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String[] getImportedPackages() {
1:fdf3952:         return importedPackages;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long getLastModified() {
1:fdf3952:         return lastModified;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getLocation() {
1:fdf3952:         return location;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public boolean isPersistentlyStarted() {
1:fdf3952:         return persistentlyStarted;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long[] getRegisteredServices() {
1:fdf3952:         return registeredServices;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public boolean isRemovalPending() {
1:fdf3952:         return removalPending;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public boolean isRequired() {
1:fdf3952:         return required;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long[] getRequiredBundles() {
1:fdf3952:         return requiredBundles;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long[] getRequiringBundles() {
1:fdf3952:         return requiringBundles;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long[] getServicesInUse() {
1:fdf3952:         return servicesInUse;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public int getBundleStartLevel() {
1:fdf3952:         return bundleStartLevel;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getState() {
1:fdf3952:         return state;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getSymbolicName() {
1:fdf3952:         return symbolicName;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getVersion() {
1:fdf3952:         return version;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /*
1:fdf3952:      * Represents key/value pair in BundleData headers
1:fdf3952:      */
1:fdf3952:     public static class Header {
1:fdf3952: 
1:fdf3952:         private String key;
1:fdf3952:         private String value;
1:fdf3952: 
1:fdf3952:         public String getKey() {
1:fdf3952:             return key;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         public String getValue() {
1:fdf3952:             return value;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         private Header() {
1:fdf3952:             super();
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         public Header(String key, String value) {
1:fdf3952:             this.key = key;
1:fdf3952:             this.value = value;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         public CompositeData toCompositeData() throws JMRuntimeException {
2:fdf3952:             CompositeData result = null;
1:fdf3952:             Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:             items.put(KEY, key);
1:fdf3952:             items.put(VALUE, value);
1:fdf3952:             try {
1:fdf3952:                 result = new CompositeDataSupport(HEADER_TYPE, items);
1:fdf3952:             } catch (OpenDataException e) {
1:fdf3952:                 throw new JMRuntimeException("Failed to create CompositeData for header [" + key + ":" + value + "] - "
1:fdf3952:                         + e.getMessage());
1:fdf3952:             }
2:fdf3952:             return result;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         public static Header from(CompositeData compositeData) {
1:fdf3952:             if (compositeData == null) {
1:fdf3952:                 throw new IllegalArgumentException("Argument compositeData cannot be null");
1:fdf3952:             }
1:fdf3952:             if (!compositeData.getCompositeType().equals(HEADER_TYPE)) {
1:fdf3952:                 throw new IllegalArgumentException("Invalid CompositeType [" + compositeData.getCompositeType() + "]");
1:fdf3952:             }
1:fdf3952:             Header header = new Header();
1:fdf3952:             header.key = (String) compositeData.get(KEY);
1:fdf3952:             header.value = (String) compositeData.get(VALUE);
1:fdf3952:             return header;
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings("deprecation")
/////////////////////////////////////////////////////////////////////////
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:8c01963
/////////////////////////////////////////////////////////////////////////
commit:a928ee9
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
1:         return toCompositeData(BundleStateMBean.BUNDLE_TYPE.keySet());
1:     }
1: 
1:     public CompositeData toCompositeData(Collection<String> itemNames) {
1: 
1:         if (itemNames.contains(EXPORTED_PACKAGES))
1:             items.put(EXPORTED_PACKAGES, this.exportedPackages);
1: 
1:         if (itemNames.contains(FRAGMENT))
1:             items.put(FRAGMENT, this.fragment);
1: 
1:         if (itemNames.contains(FRAGMENTS))
1:             items.put(FRAGMENTS, toLong(this.fragments));
1: 
1:         if (itemNames.contains(HOSTS))
1:             items.put(HOSTS, toLong(this.hosts));
1: 
1:         if (itemNames.contains(IMPORTED_PACKAGES))
1:             items.put(IMPORTED_PACKAGES, this.importedPackages);
1: 
1:         if (itemNames.contains(LAST_MODIFIED))
1:             items.put(LAST_MODIFIED, this.lastModified);
1: 
1:         if (itemNames.contains(LOCATION))
1:             items.put(LOCATION, this.location);
1: 
1:         if (itemNames.contains(PERSISTENTLY_STARTED))
1:             items.put(PERSISTENTLY_STARTED, this.persistentlyStarted);
1: 
1:         if (itemNames.contains(REGISTERED_SERVICES))
1:             items.put(REGISTERED_SERVICES, toLong(this.registeredServices));
1: 
1:         if (itemNames.contains(REMOVAL_PENDING))
1:             items.put(REMOVAL_PENDING, this.removalPending);
1: 
1:         if (itemNames.contains(REQUIRED))
1:             items.put(REQUIRED, this.required);
1: 
1:         if (itemNames.contains(REQUIRED_BUNDLES))
1:             items.put(REQUIRED_BUNDLES, toLong(this.requiredBundles));
1: 
1:         if (itemNames.contains(REQUIRING_BUNDLES))
1:             items.put(REQUIRING_BUNDLES, toLong(this.requiringBundles));
1: 
1:         if (itemNames.contains(SERVICES_IN_USE))
1:             items.put(SERVICES_IN_USE, toLong(this.servicesInUse));
1: 
1:         if (itemNames.contains(START_LEVEL))
1:             items.put(START_LEVEL, this.bundleStartLevel);
1: 
1:         if (itemNames.contains(STATE))
1:             items.put(STATE, this.state);
1: 
1:         if (itemNames.contains(SYMBOLIC_NAME))
1:             items.put(SYMBOLIC_NAME, this.symbolicName);
1: 
1:         if (itemNames.contains(VERSION))
1:             items.put(VERSION, this.version);
1: 
1:         if (itemNames.contains(HEADERS)) {
1:             TabularData headerTable = new TabularDataSupport(HEADERS_TYPE);
1:             for (Header header : this.headers) {
1:                 headerTable.put(header.toCompositeData());
1:             }
1:             items.put(HEADERS, headerTable);
1: 
1:         String[] allItemNames = BUNDLE_TYPE.keySet().toArray(new String [] {});
1:         Object[] itemValues = new Object[allItemNames.length];
1:         for (int i=0; i < allItemNames.length; i++) {
1:             itemValues[i] = items.get(allItemNames[i]);
1:         }
1: 
1:             return new CompositeDataSupport(BUNDLE_TYPE, allItemNames, itemValues);
0:             // return new CompositeDataSupport(BUNDLE_TYPE, items);
1:      *
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleDependencies;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleExportedPackages;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleImportedPackages;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleState;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getDependentBundles;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getFragmentIds;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getHostIds;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getRegisteredServiceIds;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getServicesInUseByBundle;
1: import static org.apache.aries.jmx.util.FrameworkUtils.isBundlePendingRemoval;
1: import static org.apache.aries.jmx.util.FrameworkUtils.isBundleRequiredByOthers;
1: import static org.apache.aries.jmx.util.TypeUtils.toLong;
1: import static org.apache.aries.jmx.util.TypeUtils.toPrimitive;
1: import static org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE;
1: import static org.osgi.jmx.framework.BundleStateMBean.EXPORTED_PACKAGES;
1: import static org.osgi.jmx.framework.BundleStateMBean.FRAGMENT;
1: import static org.osgi.jmx.framework.BundleStateMBean.FRAGMENTS;
1: import static org.osgi.jmx.framework.BundleStateMBean.HEADERS;
1: import static org.osgi.jmx.framework.BundleStateMBean.HEADERS_TYPE;
1: import static org.osgi.jmx.framework.BundleStateMBean.HEADER_TYPE;
1: import static org.osgi.jmx.framework.BundleStateMBean.HOSTS;
1: import static org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER;
1: import static org.osgi.jmx.framework.BundleStateMBean.IMPORTED_PACKAGES;
1: import static org.osgi.jmx.framework.BundleStateMBean.KEY;
1: import static org.osgi.jmx.framework.BundleStateMBean.LAST_MODIFIED;
1: import static org.osgi.jmx.framework.BundleStateMBean.LOCATION;
1: import static org.osgi.jmx.framework.BundleStateMBean.PERSISTENTLY_STARTED;
1: import static org.osgi.jmx.framework.BundleStateMBean.REGISTERED_SERVICES;
1: import static org.osgi.jmx.framework.BundleStateMBean.REMOVAL_PENDING;
1: import static org.osgi.jmx.framework.BundleStateMBean.REQUIRED;
1: import static org.osgi.jmx.framework.BundleStateMBean.REQUIRED_BUNDLES;
1: import static org.osgi.jmx.framework.BundleStateMBean.REQUIRING_BUNDLES;
1: import static org.osgi.jmx.framework.BundleStateMBean.SERVICES_IN_USE;
1: import static org.osgi.jmx.framework.BundleStateMBean.START_LEVEL;
1: import static org.osgi.jmx.framework.BundleStateMBean.STATE;
1: import static org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME;
1: import static org.osgi.jmx.framework.BundleStateMBean.VALUE;
1: import static org.osgi.jmx.framework.BundleStateMBean.VERSION;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import javax.management.JMRuntimeException;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.jmx.framework.BundleStateMBean;
1: import org.osgi.service.packageadmin.PackageAdmin;
1: import org.osgi.service.startlevel.StartLevel;
1: 
1: /**
1:  * <p>
1:  * <tt>BundleData</tt> represents BundleData Type @see {@link BundleStateMBean#BUNDLE_TYPE}. It is a codec for the
1:  * <code>CompositeData</code> representing an OSGi BundleData.
1:  * </p>
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class BundleData {
1: 
1:     /**
1:      * @see BundleStateMBean#EXPORTED_PACKAGES_ITEM
1:      */
1:     private String[] exportedPackages;
1: 
1:     /**
1:      * @see BundleStateMBean#FRAGMENT_ITEM
1:      */
1:     private boolean fragment;
1: 
1:     /**
1:      * @see BundleStateMBean#FRAGMENTS_ITEM
1:      */
1:     private long[] fragments;
1: 
1:     /**
1:      * @see BundleStateMBean#HEADER_TYPE
1:      */
1:     private List<Header> headers = new ArrayList<Header>();
1: 
1:     /**
1:      * @see BundleStateMBean#HOSTS_ITEM
1:      */
1:     private long[] hosts;
1: 
1:     /**
1:      * @see BundleStateMBean#IDENTIFIER_ITEM
1:      */
1:     private long identifier;
1: 
1:     /**
1:      * @see BundleStateMBean#IMPORTED_PACKAGES_ITEM
1:      */
1:     private String[] importedPackages;
1: 
1:     /**
1:      * @see BundleStateMBean#LAST_MODIFIED_ITEM
1:      */
1:     private long lastModified;
1: 
1:     /**
1:      * @see BundleStateMBean#LOCATION_ITEM
1:      */
1:     private String location;
1: 
1:     /**
1:      * @see BundleStateMBean#PERSISTENTLY_STARTED_ITEM
1:      */
1:     private boolean persistentlyStarted;
1: 
1:     /**
1:      * @see BundleStateMBean#REGISTERED_SERVICES_ITEM
1:      */
1:     private long[] registeredServices;
1: 
1:     /**
1:      * @see BundleStateMBean#REMOVAL_PENDING_ITEM
1:      */
1:     private boolean removalPending;
1: 
1:     /**
1:      * @see BundleStateMBean#REQUIRED_ITEM
1:      */
1:     private boolean required;
1: 
1:     /**
1:      * @see BundleStateMBean#REQUIRED_BUNDLES_ITEM
1:      */
1:     private long[] requiredBundles;
1: 
1:     /**
1:      * @see BundleStateMBean#REQUIRING_BUNDLES_ITEM
1:      */
1:     private long[] requiringBundles;
1: 
1:     /**
1:      * @see BundleStateMBean#SERVICES_IN_USE_ITEM
1:      */
1:     private long[] servicesInUse;
1: 
1:     /**
1:      * @see BundleStateMBean#START_LEVEL_ITEM
1:      */
1:     private int bundleStartLevel;
1: 
1:     /**
1:      * @see BundleStateMBean#STATE_ITEM
1:      */
1:     private String state;
1: 
1:     /**
1:      * @see BundleStateMBean#SYMBOLIC_NAME_ITEM
1:      */
1:     private String symbolicName;
1: 
1:     /**
1:      * @see BundleStateMBean#VERSION_ITEM
1:      */
1:     private String version;
1: 
1:     private BundleData() {
1:         super();
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     public BundleData(BundleContext localBundleContext, Bundle bundle, PackageAdmin packageAdmin, StartLevel startLevel) {
1:         if (bundle == null) {
1:             throw new IllegalArgumentException("Argument bundle cannot be null");
1:         }
1:         if (packageAdmin == null || startLevel == null) {
1:             throw new IllegalArgumentException("Arguments PackageAdmin / startLevel cannot be null");
1:         }
1:         this.exportedPackages = getBundleExportedPackages(bundle, packageAdmin);
1:         this.fragment = (PackageAdmin.BUNDLE_TYPE_FRAGMENT == packageAdmin.getBundleType(bundle));
1:         this.fragments = getFragmentIds(bundle, packageAdmin);
1:         Dictionary<String, String> bundleHeaders = bundle.getHeaders();
1:         Enumeration<String> keys = bundleHeaders.keys();
1:         while (keys.hasMoreElements()) {
1:             String key = keys.nextElement();
1:             headers.add(new Header(key, bundleHeaders.get(key)));
1:         }
1:         this.hosts = getHostIds(bundle, packageAdmin);
1:         this.identifier = bundle.getBundleId();
1:         this.importedPackages = getBundleImportedPackages(localBundleContext, bundle, packageAdmin);
1:         this.lastModified = bundle.getLastModified();
1:         this.location = bundle.getLocation();
1:         this.persistentlyStarted = startLevel.isBundlePersistentlyStarted(bundle);
1:         this.registeredServices = getRegisteredServiceIds(bundle);
1:         this.removalPending = isBundlePendingRemoval(bundle, packageAdmin);
1:         this.required = isBundleRequiredByOthers(bundle, packageAdmin);
1:         this.requiredBundles = getBundleDependencies(localBundleContext, bundle, packageAdmin);
1:         this.requiringBundles = getDependentBundles(bundle, packageAdmin);
1:         this.servicesInUse = getServicesInUseByBundle(bundle);
1:         this.bundleStartLevel = startLevel.getBundleStartLevel(bundle);
1:         this.state = getBundleState(bundle);
1:         this.symbolicName = bundle.getSymbolicName();
1:         this.version = bundle.getVersion().toString();
1:     }
1: 
1:     /**
1:      * Returns CompositeData representing a BundleData complete state typed by {@link BundleStateMBean#BUNDLE_TYPE}
1:      * 
1:      * @return
1:      */
1:     public CompositeData toCompositeData() {
1:         CompositeData result = null;
1:         Map<String, Object> items = new HashMap<String, Object>();
0:         items.put(EXPORTED_PACKAGES, this.exportedPackages);
0:         items.put(FRAGMENT, this.fragment);
0:         items.put(FRAGMENTS, toLong(this.fragments));
0:         items.put(HOSTS, toLong(this.hosts));
1:         items.put(IDENTIFIER, this.identifier);
0:         items.put(IMPORTED_PACKAGES, this.importedPackages);
0:         items.put(LAST_MODIFIED, this.lastModified);
0:         items.put(LOCATION, this.location);
0:         items.put(PERSISTENTLY_STARTED, this.persistentlyStarted);
0:         items.put(REGISTERED_SERVICES, toLong(this.registeredServices));
0:         items.put(REMOVAL_PENDING, this.removalPending);
0:         items.put(REQUIRED, this.required);
0:         items.put(REQUIRED_BUNDLES, toLong(this.requiredBundles));
0:         items.put(REQUIRING_BUNDLES, toLong(this.requiringBundles));
0:         items.put(SERVICES_IN_USE, toLong(this.servicesInUse));
0:         items.put(START_LEVEL, this.bundleStartLevel);
0:         items.put(STATE, this.state);
0:         items.put(SYMBOLIC_NAME, this.symbolicName);
0:         items.put(VERSION, this.version);
0:         TabularData headerTable = new TabularDataSupport(HEADERS_TYPE);
0:         for (Header header : this.headers) {
0:             headerTable.put(header.toCompositeData());
1:         }
0:         items.put(HEADERS, headerTable);
1:         try {
0:             result = new CompositeDataSupport(BUNDLE_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Failed to create CompositeData for BundleData [" + this.identifier
1:                     + "]", e);
1:         }
1:         return result;
1:     }
1: 
1:     /**
1:      * Constructs a <code>BundleData</code> object from the given <code>CompositeData</code>
1:      * 
1:      * @param compositeData
1:      * @return
1:      * @throws IlleglArgumentException
1:      *             if compositeData is null or not of type {@link BundleStateMBean#BUNDLE_TYPE}
1:      */
1:     @SuppressWarnings("unchecked")
1:     public static BundleData from(CompositeData compositeData) throws IllegalArgumentException {
1:         if (compositeData == null) {
1:             throw new IllegalArgumentException("Argument compositeData cannot be null");
1:         }
1:         if (!compositeData.getCompositeType().equals(BUNDLE_TYPE)) {
1:             throw new IllegalArgumentException("Invalid CompositeType [" + compositeData.getCompositeType() + "]");
1:         }
1:         BundleData bundleData = new BundleData();
1:         bundleData.exportedPackages = (String[]) compositeData.get(EXPORTED_PACKAGES);
1:         bundleData.fragment = (Boolean) compositeData.get(FRAGMENT);
1:         bundleData.fragments = toPrimitive((Long[]) compositeData.get(FRAGMENTS));
1:         bundleData.hosts = toPrimitive((Long[]) compositeData.get(HOSTS));
1:         bundleData.identifier = (Long) compositeData.get(IDENTIFIER);
1:         bundleData.importedPackages = (String[]) compositeData.get(IMPORTED_PACKAGES);
1:         bundleData.lastModified = (Long) compositeData.get(LAST_MODIFIED);
1:         bundleData.location = (String) compositeData.get(LOCATION);
1:         bundleData.persistentlyStarted = (Boolean) compositeData.get(PERSISTENTLY_STARTED);
1:         bundleData.registeredServices = toPrimitive((Long[]) compositeData.get(REGISTERED_SERVICES));
1:         bundleData.removalPending = (Boolean) compositeData.get(REMOVAL_PENDING);
1:         bundleData.required = (Boolean) compositeData.get(REQUIRED);
1:         bundleData.requiredBundles = toPrimitive((Long[]) compositeData.get(REQUIRED_BUNDLES));
1:         bundleData.requiringBundles = toPrimitive((Long[]) compositeData.get(REQUIRING_BUNDLES));
1:         bundleData.servicesInUse = toPrimitive((Long[]) compositeData.get(SERVICES_IN_USE));
1:         bundleData.bundleStartLevel = (Integer) compositeData.get(START_LEVEL);
1:         bundleData.state = (String) compositeData.get(STATE);
1:         bundleData.symbolicName = (String) compositeData.get(SYMBOLIC_NAME);
1:         bundleData.version = (String) compositeData.get(VERSION);
1:         TabularData headerTable = (TabularData) compositeData.get(HEADERS);
1:         Collection<CompositeData> headerData = (Collection<CompositeData>) headerTable.values();
1:         for (CompositeData headerRow : headerData) {
1:             bundleData.headers.add(Header.from(headerRow));
1:         }
1:         return bundleData;
1:     }
1: 
1:     public String[] getExportedPackages() {
1:         return exportedPackages;
1:     }
1: 
1:     public boolean isFragment() {
1:         return fragment;
1:     }
1: 
1:     public long[] getFragments() {
1:         return fragments;
1:     }
1: 
1:     public List<Header> getHeaders() {
1:         return headers;
1:     }
1: 
1:     public long[] getHosts() {
1:         return hosts;
1:     }
1: 
1:     public long getIdentifier() {
1:         return identifier;
1:     }
1: 
1:     public String[] getImportedPackages() {
1:         return importedPackages;
1:     }
1: 
1:     public long getLastModified() {
1:         return lastModified;
1:     }
1: 
1:     public String getLocation() {
1:         return location;
1:     }
1: 
1:     public boolean isPersistentlyStarted() {
1:         return persistentlyStarted;
1:     }
1: 
1:     public long[] getRegisteredServices() {
1:         return registeredServices;
1:     }
1: 
1:     public boolean isRemovalPending() {
1:         return removalPending;
1:     }
1: 
1:     public boolean isRequired() {
1:         return required;
1:     }
1: 
1:     public long[] getRequiredBundles() {
1:         return requiredBundles;
1:     }
1: 
1:     public long[] getRequiringBundles() {
1:         return requiringBundles;
1:     }
1: 
1:     public long[] getServicesInUse() {
1:         return servicesInUse;
1:     }
1: 
1:     public int getBundleStartLevel() {
1:         return bundleStartLevel;
1:     }
1: 
1:     public String getState() {
1:         return state;
1:     }
1: 
1:     public String getSymbolicName() {
1:         return symbolicName;
1:     }
1: 
1:     public String getVersion() {
1:         return version;
1:     }
1: 
1:     /*
1:      * Represents key/value pair in BundleData headers
1:      */
1:     public static class Header {
1: 
1:         private String key;
1:         private String value;
1: 
1:         public String getKey() {
1:             return key;
1:         }
1: 
1:         public String getValue() {
1:             return value;
1:         }
1: 
1:         private Header() {
1:             super();
1:         }
1: 
1:         public Header(String key, String value) {
1:             this.key = key;
1:             this.value = value;
1:         }
1: 
1:         public CompositeData toCompositeData() throws JMRuntimeException {
1:             CompositeData result = null;
1:             Map<String, Object> items = new HashMap<String, Object>();
1:             items.put(KEY, key);
1:             items.put(VALUE, value);
1:             try {
1:                 result = new CompositeDataSupport(HEADER_TYPE, items);
1:             } catch (OpenDataException e) {
1:                 throw new JMRuntimeException("Failed to create CompositeData for header [" + key + ":" + value + "] - "
1:                         + e.getMessage());
1:             }
1:             return result;
1:         }
1: 
1:         public static Header from(CompositeData compositeData) {
1:             if (compositeData == null) {
1:                 throw new IllegalArgumentException("Argument compositeData cannot be null");
1:             }
1:             if (!compositeData.getCompositeType().equals(HEADER_TYPE)) {
1:                 throw new IllegalArgumentException("Invalid CompositeType [" + compositeData.getCompositeType() + "]");
1:             }
1:             Header header = new Header();
1:             header.key = (String) compositeData.get(KEY);
1:             header.value = (String) compositeData.get(VALUE);
1:             return header;
1:         }
1:     }
1: }
============================================================================