1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.container.parser.impl;
3:2cfdf52: 
1:2cfdf52: import java.util.ArrayList;
1:2cfdf52: import java.util.Collection;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.Embeddable;
1:2cfdf52: import javax.persistence.Entity;
1:2cfdf52: import javax.persistence.MappedSuperclass;
1:2cfdf52: 
1:2cfdf52: import org.osgi.framework.Bundle;
1:2cfdf52: import org.osgi.framework.wiring.BundleWiring;
1:ec3ea65: import org.slf4j.Logger;
1:ec3ea65: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: class JPAAnnotationScanner {
1:ec3ea65:     private static final Logger LOG = LoggerFactory.getLogger(JPAAnnotationScanner.class);
1:ec3ea65:     
1:ec3ea65:     private JPAAnnotationScanner() {
1:ec3ea65:     }
1:ec3ea65:     
1:2cfdf52:     public static Collection<String> findJPAAnnotatedClasses(Bundle b) {
1:2cfdf52:         BundleWiring bw = b.adapt(BundleWiring.class);
1:2cfdf52:         Collection<String> resources = bw.listResources("/", "*.class", 
1:2cfdf52:             BundleWiring.LISTRESOURCES_LOCAL | BundleWiring.LISTRESOURCES_RECURSE);
1:2cfdf52:         
1:2cfdf52:         Collection<String> classes = new ArrayList<String>(); 
1:2cfdf52:         ClassLoader cl = new TempBundleDelegatingClassLoader(b, JPAAnnotationScanner.class.getClassLoader());
1:2cfdf52:         for(String s : resources) {
1:2cfdf52:           s = s.replace('/', '.').substring(0, s.length() - 6);
1:2cfdf52:           try {
1:2cfdf52:             Class<?> clazz = Class.forName(s, false, cl);
1:2cfdf52:             
1:2cfdf52:             if(clazz.isAnnotationPresent(Entity.class) ||
1:2cfdf52:                clazz.isAnnotationPresent(MappedSuperclass.class) ||
1:2cfdf52:                clazz.isAnnotationPresent(Embeddable.class)) {
1:2cfdf52:               classes.add(s);
1:2cfdf52:             }
1:2cfdf52:             
1:ec3ea65:           } catch (ClassNotFoundException e) {
1:ec3ea65:               logEx(e);
1:ec3ea65:           } catch (NoClassDefFoundError e) {
1:ec3ea65:               logEx(e);
1:2cfdf52:           }
1:2cfdf52:         }
1:2cfdf52:         return classes;
1:2cfdf52:       }
1:ec3ea65: 
1:ec3ea65:     private static void logEx(Throwable e) {
1:ec3ea65:         LOG.debug("Exception while scanning for JPA annotations", e);
1:ec3ea65:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JPAAnnotationScanner.class);
1:     
1:     private JPAAnnotationScanner() {
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:           } catch (ClassNotFoundException e) {
1:               logEx(e);
1:           } catch (NoClassDefFoundError e) {
1:               logEx(e);
1: 
1:     private static void logEx(Throwable e) {
1:         LOG.debug("Exception while scanning for JPA annotations", e);
1:     }
commit:4bdeaa0
/////////////////////////////////////////////////////////////////////////
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.parser.impl;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: 
1: import javax.persistence.Embeddable;
1: import javax.persistence.Entity;
1: import javax.persistence.MappedSuperclass;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.wiring.BundleWiring;
1: 
0: @SuppressWarnings("deprecation")
1: class JPAAnnotationScanner {
1:     public static Collection<String> findJPAAnnotatedClasses(Bundle b) {
1:         BundleWiring bw = b.adapt(BundleWiring.class);
1:         Collection<String> resources = bw.listResources("/", "*.class", 
1:             BundleWiring.LISTRESOURCES_LOCAL | BundleWiring.LISTRESOURCES_RECURSE);
1:         
1:         Collection<String> classes = new ArrayList<String>(); 
1:         ClassLoader cl = new TempBundleDelegatingClassLoader(b, JPAAnnotationScanner.class.getClassLoader());
1:         for(String s : resources) {
1:           s = s.replace('/', '.').substring(0, s.length() - 6);
1:           try {
1:             Class<?> clazz = Class.forName(s, false, cl);
1:             
1:             if(clazz.isAnnotationPresent(Entity.class) ||
1:                clazz.isAnnotationPresent(MappedSuperclass.class) ||
1:                clazz.isAnnotationPresent(Embeddable.class)) {
1:               classes.add(s);
1:             }
1:             
0:           } catch (ClassNotFoundException cnfe) {
1:             
0:           } catch (NoClassDefFoundError ncdfe) {
1:             
1:           }
1:         }
1:         return classes;
1:       }
1: }
============================================================================