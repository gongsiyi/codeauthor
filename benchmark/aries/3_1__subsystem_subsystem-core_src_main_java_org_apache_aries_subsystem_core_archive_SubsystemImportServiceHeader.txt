1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:124d6a3: package org.apache.aries.subsystem.core.archive;
1:097d28b: 
1:124d6a3: import java.util.ArrayList;
1:124d6a3: import java.util.Collection;
1:124d6a3: import java.util.HashMap;
1:df175a6: import java.util.List;
1:124d6a3: import java.util.Map;
20:124d6a3: 
1:2ffcfb9: import org.apache.aries.subsystem.core.capabilityset.SimpleFilter;
1:124d6a3: import org.osgi.framework.Constants;
1:b75f264: import org.osgi.resource.Requirement;
1:df175a6: import org.osgi.resource.Resource;
1:124d6a3: import org.osgi.service.subsystem.SubsystemConstants;
1:124d6a3: 
1:2ffcfb9: public class SubsystemImportServiceHeader extends AbstractClauseBasedHeader<SubsystemImportServiceHeader.Clause> implements RequirementHeader<SubsystemImportServiceHeader.Clause> {
1:2ffcfb9:     public static class Clause extends AbstractClause {
1:d93afd1:     	public static final String DIRECTIVE_CARDINALITY = CardinalityDirective.NAME;
1:d93afd1: 		public static final String DIRECTIVE_EFFECTIVE = EffectiveDirective.NAME;
1:d93afd1: 		public static final String DIRECTIVE_FILTER = FilterDirective.NAME;
1:d93afd1: 		public static final String DIRECTIVE_RESOLUTION = ResolutionDirective.NAME;
1:124d6a3: 
1:2ffcfb9: 		private static final Collection<Parameter> defaultParameters = generateDefaultParameters(
1:2ffcfb9: 				EffectiveDirective.ACTIVE,
1:d93afd1: 				ResolutionDirective.MANDATORY,
1:d93afd1: 				CardinalityDirective.SINGLE);
1:124d6a3: 
1:124d6a3: 		public Clause(String clause) {
1:2ffcfb9: 			super(
1:2ffcfb9:             		parsePath(clause, Patterns.OBJECTCLASS_OR_STAR, false), 
1:2ffcfb9:             		parseParameters(clause, false), 
1:2ffcfb9:             		defaultParameters);
1:2ffcfb9: 		}
1:2ffcfb9: 		
1:2ffcfb9: 		public Clause(String path, Map<String, Parameter> parameters, Collection<Parameter> defaultParameters) {
1:2ffcfb9: 			super(path, parameters, defaultParameters);
1:2ffcfb9: 		}
1:2ffcfb9: 
1:2ffcfb9: 		public static Clause valueOf(Requirement requirement) {
1:2ffcfb9: 			String namespace = requirement.getNamespace();
1:2ffcfb9: 			if (!SubsystemImportServiceRequirement.NAMESPACE.equals(namespace)) {
1:2ffcfb9: 				throw new IllegalArgumentException("Invalid namespace:" + namespace);
1:b75f264: 			}
1:c5864b3: 			Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1:c5864b3: 			String filter = null;
1:2ffcfb9: 			Map<String, String> directives = requirement.getDirectives();
1:2ffcfb9: 			for (Map.Entry<String, String> entry : directives.entrySet()) {
1:2ffcfb9: 				String key = entry.getKey();
1:2ffcfb9: 				if (SubsystemImportServiceRequirement.DIRECTIVE_FILTER.equals(key)) {
1:c5864b3: 					filter = entry.getValue();
1:b75f264: 				}
1:c5864b3: 				else { 
1:c5864b3: 					parameters.put(key, DirectiveFactory.createDirective(key, entry.getValue()));
1:c5864b3: 				}
1:df175a6: 			}
1:c5864b3: 			Map<String, List<SimpleFilter>> attributes = SimpleFilter.attributes(filter);
1:c5864b3: 			String path = String.valueOf(attributes.remove(Constants.OBJECTCLASS).get(0).getValue());
1:c5864b3: 			Map<String, Object> map = new HashMap<String, Object>(attributes.size());
1:c5864b3: 			for (Map.Entry<String, List<SimpleFilter>> entry : attributes.entrySet()) {
1:c5864b3: 				map.put(entry.getKey(), entry.getValue().get(0).getValue());
1:c5864b3: 			}
1:c5864b3: 			if (!map.isEmpty()) {
1:2ffcfb9: 				parameters.put(
1:2ffcfb9: 						SubsystemImportServiceRequirement.DIRECTIVE_FILTER, 
1:2ffcfb9: 						DirectiveFactory.createDirective(
1:2ffcfb9: 								SubsystemImportServiceRequirement.DIRECTIVE_FILTER,
1:c5864b3: 								SimpleFilter.convert(map).toString()));
1:097d28b: 			}
1:2ffcfb9: 			return new Clause(path, parameters, defaultParameters);
21:124d6a3: 		}
1:b75f264: 
1:35094c6: 		public SubsystemImportServiceRequirement toRequirement(Resource resource) {
1:35094c6: 			return new SubsystemImportServiceRequirement(this, resource);
1:124d6a3: 		}
1:124d6a3: 	}
1:b75f264: 
1:124d6a3: 	public static final String NAME = SubsystemConstants.SUBSYSTEM_IMPORTSERVICE;
1:b75f264: 
1:b75f264: 	public SubsystemImportServiceHeader(String value) {
1:2ffcfb9: 		super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:b75f264: 	}
1:b75f264: 
1:b75f264: 	public SubsystemImportServiceHeader(Collection<Clause> clauses) {
1:2ffcfb9: 		super(clauses);
1:124d6a3: 	}
1:df175a6: 
1:df175a6: 	@Override
1:124d6a3: 	public String getName() {
1:124d6a3: 		return NAME;
1:124d6a3: 	}
1:df175a6: 
11:124d6a3: 	@Override
1:124d6a3: 	public String getValue() {
1:124d6a3: 		return toString();
1:124d6a3: 	}
1:124d6a3: 
1:124d6a3: 	@Override
1:df175a6: 	public List<SubsystemImportServiceRequirement> toRequirements(Resource resource) {
1:df175a6: 		List<SubsystemImportServiceRequirement> requirements = new ArrayList<SubsystemImportServiceRequirement>(clauses.size());
1:df175a6: 		for (Clause clause : clauses)
1:35094c6: 			requirements.add(clause.toRequirement(resource));
1:df175a6: 		return requirements;
1:df175a6: 	}
1:124d6a3: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:d93afd1
/////////////////////////////////////////////////////////////////////////
1:     	public static final String DIRECTIVE_CARDINALITY = CardinalityDirective.NAME;
1: 		public static final String DIRECTIVE_EFFECTIVE = EffectiveDirective.NAME;
1: 		public static final String DIRECTIVE_FILTER = FilterDirective.NAME;
1: 		public static final String DIRECTIVE_RESOLUTION = ResolutionDirective.NAME;
1: 				ResolutionDirective.MANDATORY,
1: 				CardinalityDirective.SINGLE);
commit:c5864b3
/////////////////////////////////////////////////////////////////////////
1: 			Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 			String filter = null;
1: 					filter = entry.getValue();
1: 				else { 
1: 					parameters.put(key, DirectiveFactory.createDirective(key, entry.getValue()));
1: 				}
1: 			Map<String, List<SimpleFilter>> attributes = SimpleFilter.attributes(filter);
1: 			String path = String.valueOf(attributes.remove(Constants.OBJECTCLASS).get(0).getValue());
1: 			Map<String, Object> map = new HashMap<String, Object>(attributes.size());
1: 			for (Map.Entry<String, List<SimpleFilter>> entry : attributes.entrySet()) {
1: 				map.put(entry.getKey(), entry.getValue().get(0).getValue());
1: 			}
1: 			if (!map.isEmpty()) {
1: 								SimpleFilter.convert(map).toString()));
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.capabilityset.SimpleFilter;
1: public class SubsystemImportServiceHeader extends AbstractClauseBasedHeader<SubsystemImportServiceHeader.Clause> implements RequirementHeader<SubsystemImportServiceHeader.Clause> {
1:     public static class Clause extends AbstractClause {
1: 		private static final Collection<Parameter> defaultParameters = generateDefaultParameters(
1: 				EffectiveDirective.ACTIVE,
0: 				ResolutionDirective.MANDATORY);
1: 			super(
1:             		parsePath(clause, Patterns.OBJECTCLASS_OR_STAR, false), 
1:             		parseParameters(clause, false), 
1:             		defaultParameters);
1: 		}
1: 		
1: 		public Clause(String path, Map<String, Parameter> parameters, Collection<Parameter> defaultParameters) {
1: 			super(path, parameters, defaultParameters);
1: 		}
1: 
1: 		public static Clause valueOf(Requirement requirement) {
1: 			String namespace = requirement.getNamespace();
1: 			if (!SubsystemImportServiceRequirement.NAMESPACE.equals(namespace)) {
1: 				throw new IllegalArgumentException("Invalid namespace:" + namespace);
1: 			Map<String, String> directives = requirement.getDirectives();
0: 			Map<String, Parameter> parameters = new HashMap<String, Parameter>(directives.size());
1: 			for (Map.Entry<String, String> entry : directives.entrySet()) {
1: 				String key = entry.getKey();
1: 				if (SubsystemImportServiceRequirement.DIRECTIVE_FILTER.equals(key)) {
0: 					continue;
0: 				parameters.put(key, DirectiveFactory.createDirective(key, entry.getValue()));
0: 			String filter = directives.get(SubsystemImportServiceRequirement.DIRECTIVE_FILTER);
0: 			Map<String, Object> attributes = SimpleFilter.attributes(filter);
0: 			String path = String.valueOf(attributes.remove(Constants.OBJECTCLASS));
0: 			if (!attributes.isEmpty()) {
1: 				parameters.put(
1: 						SubsystemImportServiceRequirement.DIRECTIVE_FILTER, 
1: 						DirectiveFactory.createDirective(
1: 								SubsystemImportServiceRequirement.DIRECTIVE_FILTER,
0: 								SimpleFilter.convert(attributes).toString()));
1: 			return new Clause(path, parameters, defaultParameters);
1: 		super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
1: 		super(clauses);
/////////////////////////////////////////////////////////////////////////
commit:b75f264
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map.Entry;
1: import org.osgi.resource.Requirement;
/////////////////////////////////////////////////////////////////////////
0: 		public Clause(Requirement requirement) {
0: 			path = requirement.getNamespace();
0: 			for (Entry<String, String> directive : requirement.getDirectives().entrySet())
0: 				parameters.put(directive.getKey(), DirectiveFactory.createDirective(directive.getKey(), directive.getValue()));
1: 		}
1: 		
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	private static Collection<Clause> processHeader(String header) {
0: 		Matcher matcher = PATTERN.matcher(header);
0: 		Set<Clause> clauses = new HashSet<Clause>();
0: 		return clauses;
1: 	}
1: 	
0: 	private final Set<Clause> clauses;
1: 	
1: 	public SubsystemImportServiceHeader(String value) {
0: 		this(processHeader(value));
1: 	}
1: 	
1: 	public SubsystemImportServiceHeader(Collection<Clause> clauses) {
0: 		this.clauses = new HashSet<Clause>(clauses);
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:35094c6
/////////////////////////////////////////////////////////////////////////
1: 		public SubsystemImportServiceRequirement toRequirement(Resource resource) {
1: 			return new SubsystemImportServiceRequirement(this, resource);
/////////////////////////////////////////////////////////////////////////
1: 			requirements.add(clause.toRequirement(resource));
commit:df175a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import org.osgi.resource.Resource;
0: public class SubsystemImportServiceHeader implements RequirementHeader<SubsystemImportServiceHeader.Clause> {
/////////////////////////////////////////////////////////////////////////
0: 		public SubsystemImportServiceRequirement toRequirement() {
0: 			return new SubsystemImportServiceRequirement(this);
1: 		}
1: 		
/////////////////////////////////////////////////////////////////////////
1: 	public List<SubsystemImportServiceRequirement> toRequirements(Resource resource) {
1: 		List<SubsystemImportServiceRequirement> requirements = new ArrayList<SubsystemImportServiceRequirement>(clauses.size());
1: 		for (Clause clause : clauses)
0: 			requirements.add(clause.toRequirement());
1: 		return requirements;
1: 	}
1: 	
1: 	@Override
commit:097d28b
/////////////////////////////////////////////////////////////////////////
1: 		
0: 		public String getObjectClass() {
0: 			return path;
1: 		}
/////////////////////////////////////////////////////////////////////////
commit:124d6a3
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
0: import java.util.Collections;
1: import java.util.HashMap;
0: import java.util.HashSet;
1: import java.util.Map;
0: import java.util.Set;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
0: public class SubsystemImportServiceHeader implements Header<SubsystemImportServiceHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
0: 		public static final String DIRECTIVE_EFFECTIVE = Constants.EFFECTIVE_DIRECTIVE;
0: 		public static final String DIRECTIVE_FILTER = Constants.FILTER_DIRECTIVE;
0: 		public static final String DIRECTIVE_RESOLUTION = Constants.RESOLUTION_DIRECTIVE;
1: 		
0: 		private static final Pattern PATTERN_NAMESPACE = Pattern.compile('(' + Grammar.NAMESPACE + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PARAMETER = Pattern.compile('(' + Grammar.PARAMETER + ")(?=;|\\z)");
1: 		
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 			Parameter parameter = parameters.get(DIRECTIVE_EFFECTIVE);
0: 			if (parameter == null)
0: 				parameters.put(DIRECTIVE_EFFECTIVE, EffectiveDirective.ACTIVE);
0: 			parameter = parameters.get(DIRECTIVE_RESOLUTION);
0: 			if (parameter == null)
0: 				parameters.put(DIRECTIVE_RESOLUTION, ResolutionDirective.MANDATORY);
1: 		}
1: 		
0: 		private final String path;
0: 		private final Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		
1: 		public Clause(String clause) {
0: 			Matcher matcher = PATTERN_NAMESPACE.matcher(clause);
0: 			if (!matcher.find())
0: 				throw new IllegalArgumentException("Missing namespace path: " + clause);
0: 			path = matcher.group();
0: 			matcher.usePattern(PATTERN_PARAMETER);
0: 			while (matcher.find()) {
0: 				Parameter parameter = ParameterFactory.create(matcher.group());
0: 				parameters.put(parameter.getName(), parameter);
1: 			}
0: 			fillInDefaults(parameters);
1: 		}
1: 		
1: 		@Override
0: 		public Attribute getAttribute(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Attribute) {
0: 				return (Attribute)result;
1: 			}
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Attribute> getAttributes() {
0: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
0: 			for (Parameter parameter : parameters.values()) {
0: 				if (parameter instanceof Attribute) {
0: 					attributes.add((Attribute)parameter);
1: 				}
1: 			}
0: 			attributes.trimToSize();
0: 			return attributes;
1: 		}
1: 
1: 		@Override
0: 		public Directive getDirective(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Directive) {
0: 				return (Directive)result;
1: 			}
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Directive> getDirectives() {
0: 			ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
0: 			for (Parameter parameter : parameters.values()) {
0: 				if (parameter instanceof Directive) {
0: 					directives.add((Directive)parameter);
1: 				}
1: 			}
0: 			directives.trimToSize();
0: 			return directives;
1: 		}
1: 
1: 		@Override
0: 		public Parameter getParameter(String name) {
0: 			return parameters.get(name);
1: 		}
1: 
1: 		@Override
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.unmodifiableCollection(parameters.values());
1: 		}
1: 
1: 		@Override
0: 		public String getPath() {
0: 			return path;
1: 		}
1: 		
0: 		public String getServiceName() {
0: 			return path;
1: 		}
1: 		
1: 		@Override
0: 		public String toString() {
0: 			StringBuilder builder = new StringBuilder()
0: 					.append(getPath());
0: 			for (Parameter parameter : getParameters()) {
0: 				builder.append(';').append(parameter);
1: 			}
0: 			return builder.toString();
1: 		}
1: 	}
1: 	
1: 	public static final String NAME = SubsystemConstants.SUBSYSTEM_IMPORTSERVICE;
1: 	
0: 	// TODO Subsystem-ImportService currently does not have its own grammar, but it's similar to Require-Capability.
0: 	private static final Pattern PATTERN = Pattern.compile('(' + Grammar.REQUIREMENT + ")(?=,|\\z)");
1: 	
0: 	private final Set<Clause> clauses = new HashSet<Clause>();
1: 	
0: 	public SubsystemImportServiceHeader(String value) {
0: 		Matcher matcher = PATTERN.matcher(value);
0: 		while (matcher.find())
0: 			clauses.add(new Clause(matcher.group()));
0: 		if (clauses.isEmpty())
0: 			throw new IllegalArgumentException("A " + NAME + " header must have at least one clause");
1: 	}
1: 	
1: 	@Override
0: 	public Collection<SubsystemImportServiceHeader.Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
1: 	}
1: 
1: 	@Override
1: 	public String getName() {
1: 		return NAME;
1: 	}
1: 
1: 	@Override
1: 	public String getValue() {
1: 		return toString();
1: 	}
1: 	
1: 	@Override
0: 	public String toString() {
0: 		StringBuilder builder = new StringBuilder();
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause).append(',');
1: 		}
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
0: 		builder.deleteCharAt(builder.length() - 1);
0: 		return builder.toString();
1: 	}
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:6576152
/////////////////////////////////////////////////////////////////////////
0:     private static final Pattern PATTERN = Pattern.compile("(" + Grammar.SERVICE_OR_WILDCARD + ")(?=,|\\z)");
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0afdb06
/////////////////////////////////////////////////////////////////////////
0: 
0: 		private static final Pattern PATTERN_OBJECTCLASS_OR_STAR = Pattern.compile("((" + Grammar.OBJECTCLASS + ")|[*])(?=;|\\z)");
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 			Matcher matcher = PATTERN_OBJECTCLASS_OR_STAR.matcher(clause);
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:     private static final Pattern PATTERN = Pattern.compile("(" + Grammar.SUBSYSTEM_IMPORTSERVICE + ")(?=,|\\z)");
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
============================================================================