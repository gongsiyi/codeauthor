1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
2:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.permissionadmin;
13:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertArrayEquals;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.options;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.AbstractIntegrationTest;
1:fdf3952: import org.junit.Test;
1:0a8778f: import org.ops4j.pax.exam.Configuration;
1:fdf3952: import org.ops4j.pax.exam.Option;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.jmx.service.permissionadmin.PermissionAdminMBean;
1:fdf3952: import org.osgi.service.permissionadmin.PermissionAdmin;
1:fdf3952: import org.osgi.service.permissionadmin.PermissionInfo;
1:fdf3952: 
1:fdf3952: /**
1:bf5a863:  *
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class PermissionAdminMBeanTest extends AbstractIntegrationTest {
1:bf5a863: 
1:fdf3952:     @Configuration
1:0a8778f:     public Option[] configuration() {
1:0a8778f:         return options(
1:0a8778f:             jmxRuntime(),
1:0a8778f:             bundlea()
1:fdf3952:                     /* For debugging, uncomment the next two lines */
1:fdf3952: //                     vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7778"),
1:fdf3952: //                     waitForFrameworkStartup()
1:fdf3952:         );
7:fdf3952:     }
1:bf5a863: 
1:fdf3952:     @Test
1:fdf3952:     public void testMBeanInterface() throws IOException {
1:fdf3952:         PermissionAdminMBean mBean = getMBean(PermissionAdminMBean.OBJECTNAME, PermissionAdminMBean.class);
1:0a8778f:         PermissionAdmin permAdminService = context().getService(PermissionAdmin.class);
1:fdf3952:         assertNotNull(permAdminService);
1:fdf3952: 
1:fdf3952:         String[] serviceLocation = permAdminService.getLocations();
1:fdf3952:         String[] mBeanLocations = mBean.listLocations();
1:fdf3952:         assertArrayEquals(serviceLocation, mBeanLocations);
1:fdf3952: 
1:fdf3952:         PermissionInfo defPerm = new PermissionInfo("AllPermission", "*", "*");
1:fdf3952:         permAdminService.setDefaultPermissions(new PermissionInfo[]{defPerm});
1:fdf3952:         PermissionInfo[] permissions = permAdminService.getDefaultPermissions();
1:fdf3952:         assertNotNull(permissions);
1:fdf3952: 
1:fdf3952:         String[] encoded = toEncodedPerm(permissions);
1:fdf3952:         String[] mBeanDefPermissions = mBean.listDefaultPermissions();
1:fdf3952:         assertArrayEquals(encoded, mBeanDefPermissions);
1:bf5a863: 
1:fdf3952:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
1:fdf3952:         assertNotNull(a);
1:bf5a863: 
1:fdf3952:         String location = a.getLocation();
1:bf5a863: 
1:fdf3952:         PermissionInfo bundleaPerm = new PermissionInfo("ServicePermission", "ServiceA", "GET");
1:fdf3952:         mBean.setPermissions(location, new String[]{bundleaPerm.getEncoded()});
1:bf5a863: 
1:fdf3952:         String[] serviceBundleaPerm = toEncodedPerm(permAdminService.getPermissions(location));
1:fdf3952:         String[] mBeanBundleaPerm = mBean.getPermissions(location);
1:fdf3952:         assertNotNull(mBeanBundleaPerm);
1:fdf3952:         assertArrayEquals(serviceBundleaPerm, mBeanBundleaPerm);
1:bf5a863: 
1:fdf3952:         PermissionInfo defaultPerm = new PermissionInfo("AllPermission", "*", "GET");
1:fdf3952:         mBean.setDefaultPermissions(new String[]{defaultPerm.getEncoded()});
1:bf5a863: 
1:fdf3952:         String[] serviceDefaultPerm = toEncodedPerm(permAdminService.getDefaultPermissions());
1:fdf3952:         String[] mBeanDefaultPerm = mBean.listDefaultPermissions();
1:fdf3952:         assertNotNull(mBeanDefaultPerm);
1:fdf3952:         assertArrayEquals(serviceDefaultPerm, mBeanDefaultPerm);
1:bf5a863:     }
1:bf5a863: 
1:fdf3952:     private String[] toEncodedPerm(PermissionInfo[] permissions){
1:fdf3952:         assertNotNull(permissions);
1:fdf3952:         String[] encoded = new String[permissions.length];
1:fdf3952:         for (int i = 0; i < permissions.length; i++) {
1:fdf3952:             PermissionInfo info = permissions[i];
1:fdf3952:             encoded[i] = info.getEncoded();
1:bf5a863:         }
1:fdf3952:         return encoded;
1:fdf3952:     }
1:bf5a863: 
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.options;
1: import org.ops4j.pax.exam.Configuration;
/////////////////////////////////////////////////////////////////////////
1:     public Option[] configuration() {
1:         return options(
1:             jmxRuntime(),
1:             bundlea()
1:         PermissionAdmin permAdminService = context().getService(PermissionAdmin.class);
/////////////////////////////////////////////////////////////////////////
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:bf86346
/////////////////////////////////////////////////////////////////////////
0:             CoreOptions.equinox().version("3.8.0.V20120529-1548"),
commit:bf5a863
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
/////////////////////////////////////////////////////////////////////////
1:  *
1: 
0:             PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
0:             CoreOptions.equinox().version("3.7.0.v20110613"),
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         }
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.permissionadmin;
1: 
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertNotNull;
0: import static org.ops4j.pax.exam.CoreOptions.provision;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.newBundle;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.withBnd;
0: import static org.apache.aries.itest.ExtraOptions.*;
1: 
1: import java.io.IOException;
1: 
0: import javax.management.ObjectName;
1: 
1: import org.apache.aries.jmx.AbstractIntegrationTest;
1: import org.junit.Test;
0: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.Configuration;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.Constants;
0: import org.osgi.framework.ServiceReference;
1: import org.osgi.jmx.service.permissionadmin.PermissionAdminMBean;
1: import org.osgi.service.permissionadmin.PermissionAdmin;
1: import org.osgi.service.permissionadmin.PermissionInfo;
1: 
1: /**
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class PermissionAdminMBeanTest extends AbstractIntegrationTest {
1:     
1:     @Configuration
0:     public static Option[] configuration() {
0:         return testOptions(
0:             CoreOptions.equinox(),
0:             paxLogging("INFO"),
0:             mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx"),
0:             mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.api"),
0:             mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.whiteboard"),
0:             mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:             provision(newBundle()
0:                     .add(org.apache.aries.jmx.test.bundlea.Activator.class)
0:                     .add(org.apache.aries.jmx.test.bundlea.api.InterfaceA.class)
0:                     .add(org.apache.aries.jmx.test.bundlea.impl.A.class)
0:                     .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundlea")
0:                     .set(Constants.BUNDLE_VERSION, "2.0.0")
0:                     .set(Constants.IMPORT_PACKAGE,
0:                             "org.osgi.framework;version=1.5.0,org.osgi.util.tracker,org.apache.aries.jmx.test.bundleb.api;version=1.1.0;resolution:=optional")
0:                     .set(Constants.BUNDLE_ACTIVATOR,
0:                             org.apache.aries.jmx.test.bundlea.Activator.class.getName())
0:                     .build(withBnd()))
1:                     /* For debugging, uncomment the next two lines */
1: //                     vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7778"),
1: //                     waitForFrameworkStartup()
1:         );
1:     }
1:     
0:     @Override
0:     public void doSetUp() throws Exception {
0:         waitForMBean(new ObjectName(PermissionAdminMBean.OBJECTNAME));
1:     }
1: 
1:     @Test
1:     public void testMBeanInterface() throws IOException {
1:         PermissionAdminMBean mBean = getMBean(PermissionAdminMBean.OBJECTNAME, PermissionAdminMBean.class);
0:         PermissionAdmin permAdminService = getService(PermissionAdmin.class);
1:         assertNotNull(permAdminService);
1: 
1:         String[] serviceLocation = permAdminService.getLocations();
1:         String[] mBeanLocations = mBean.listLocations();
1:         assertArrayEquals(serviceLocation, mBeanLocations);
1: 
1:         PermissionInfo defPerm = new PermissionInfo("AllPermission", "*", "*");
1:         permAdminService.setDefaultPermissions(new PermissionInfo[]{defPerm});
1:         PermissionInfo[] permissions = permAdminService.getDefaultPermissions();
1:         assertNotNull(permissions);
1: 
1:         String[] encoded = toEncodedPerm(permissions);
1:         String[] mBeanDefPermissions = mBean.listDefaultPermissions();
1:         assertArrayEquals(encoded, mBeanDefPermissions);
1:         
1:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
1:         assertNotNull(a);
1:         
1:         String location = a.getLocation();
1:         
1:         PermissionInfo bundleaPerm = new PermissionInfo("ServicePermission", "ServiceA", "GET");
1:         mBean.setPermissions(location, new String[]{bundleaPerm.getEncoded()});
1:         
1:         String[] serviceBundleaPerm = toEncodedPerm(permAdminService.getPermissions(location));
1:         String[] mBeanBundleaPerm = mBean.getPermissions(location);
1:         assertNotNull(mBeanBundleaPerm);
1:         assertArrayEquals(serviceBundleaPerm, mBeanBundleaPerm);
1:         
1:         PermissionInfo defaultPerm = new PermissionInfo("AllPermission", "*", "GET");
1:         mBean.setDefaultPermissions(new String[]{defaultPerm.getEncoded()});
1:         
1:         String[] serviceDefaultPerm = toEncodedPerm(permAdminService.getDefaultPermissions());
1:         String[] mBeanDefaultPerm = mBean.listDefaultPermissions();
1:         assertNotNull(mBeanDefaultPerm);
1:         assertArrayEquals(serviceDefaultPerm, mBeanDefaultPerm);
1:     }
1:     
1:     private String[] toEncodedPerm(PermissionInfo[] permissions){
1:         assertNotNull(permissions);
1:         String[] encoded = new String[permissions.length];
1:         for (int i = 0; i < permissions.length; i++) {
1:             PermissionInfo info = permissions[i];
1:             encoded[i] = info.getEncoded();
1:         }       
1:         return encoded;
1:     }
1:     
0:     private <S> S getService(Class<S> serviceInterface){
0:         ServiceReference ref =  bundleContext.getServiceReference(serviceInterface.getName());
0:         if(ref != null){
0:             Object service = bundleContext.getService(ref);
0:             if(service != null){
0:                 return (S)service;
1:             }
1:         }     
0:         return null;
1:     }
1: }
============================================================================