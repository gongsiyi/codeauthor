1:3c38842: /*
1:3c38842:  * Licensed to the Apache Software Foundation (ASF) under one
1:3c38842:  * or more contributor license agreements.  See the NOTICE file
1:3c38842:  * distributed with this work for additional information
1:3c38842:  * regarding copyright ownership.  The ASF licenses this file
1:3c38842:  * to you under the Apache License, Version 2.0 (the
1:3c38842:  * "License"); you may not use this file except in compliance
1:3c38842:  * with the License.  You may obtain a copy of the License at
1:3c38842:  *
1:3c38842:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3c38842:  *
1:3c38842:  * Unless required by applicable law or agreed to in writing,
1:3c38842:  * software distributed under the License is distributed on an
1:3c38842:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:3c38842:  * KIND, either express or implied.  See the License for the
1:3c38842:  * specific language governing permissions and limitations
1:3c38842:  * under the License.
3:3c38842:  */
5:3c38842: 
1:c6cb34d: package org.apache.aries.util.io;
1:3c38842: 
1:3c38842: import java.io.Closeable;
1:3c38842: import java.io.File;
1:3c38842: import java.io.FileInputStream;
1:3c38842: import java.io.FileOutputStream;
1:3c38842: import java.io.IOException;
1:3c38842: import java.io.InputStream;
1:3c38842: import java.io.OutputStream;
1:3c38842: import java.util.Arrays;
1:3c38842: import java.util.Collections;
1:3c38842: import java.util.HashSet;
1:3c38842: import java.util.Set;
1:3c38842: import java.util.jar.JarOutputStream;
1:3c38842: import java.util.jar.Manifest;
1:3c38842: import java.util.zip.ZipEntry;
1:70a524b: import java.util.zip.ZipException;
1:5013877: import java.util.zip.ZipFile;
1:70a524b: import java.util.zip.ZipInputStream;
1:3c38842: import java.util.zip.ZipOutputStream;
1:3c38842: 
1:c6cb34d: import org.apache.aries.util.filesystem.IFile;
1:910fec0: import org.apache.aries.util.internal.MessageUtil;
1:3c38842: 
1:3c38842: public class IOUtils
3:3c38842: {
1:70a524b:   /**
1:3c38842:    * Copy an InputStream to an OutputStream and close the InputStream afterwards.
1:70a524b:    */
1:3c38842:   public static void copy(InputStream in, OutputStream out) throws IOException
1:3c38842:   {
1:70a524b:     try {
1:3e5f60f:       copyAndDoNotCloseInputStream(in, out);
1:70a524b:     }
1:70a524b:     finally {
1:3c38842:       close(in);
1:70a524b:     }
1:70a524b:   }
1:70a524b:   
1:5013877:   /**
1:3e5f60f:    * Copy an InputStream to an OutputStream and do not close the InputStream afterwards.
1:3e5f60f:    */
1:3e5f60f:   public static void copyAndDoNotCloseInputStream(InputStream in, OutputStream out) throws IOException
1:3e5f60f:   {
1:3e5f60f:     int len;
1:3e5f60f:     byte[] b = new byte[1024];
1:3e5f60f:     while ((len = in.read(b)) != -1)
1:3e5f60f:       out.write(b,0,len);
1:3e5f60f:   }
1:3e5f60f:   
1:3e5f60f:   /**
1:3c38842:    * Close some xStream for good :)
1:3c38842:    */
1:3c38842:   public static void close(Closeable c)
1:ffe1828:   {
3:3c38842:     try {
1:3c38842:       if (c != null)
1:3c38842:         c.close();
10:3c38842:     }
1:3e5f60f:     catch (IOException e) {
1:3e5f60f:       c = null;
1:3e5f60f:     }
1:3c38842:   }
1:3c38842:   
1:3e5f60f:   /**
1:5013877:    * A special version of close() for ZipFiles, which don't implement Closeable.
1:5013877:    * @param file the file to close. ZipFiles seem prone to file locking problems
1:5013877:    * on Windows, so to aid diagnostics we throw, not swallow, any exceptions. 
1:5013877:    */
1:5013877:   public static void close(ZipFile file) throws IOException
1:5013877:   {
1:5013877:     if (file != null) file.close();
1:5013877:   }
1:5013877:   
1:3c38842:   public static OutputStream getOutputStream(File outputDir, String relativePath) throws IOException
1:3c38842:   {
1:3c38842:     int lastSeparatorIndex = relativePath.replace(File.separatorChar,'/').lastIndexOf("/");
1:3c38842:     String dirName = null;
1:3c38842:     String fileName = null;
1:3c38842:     
1:3c38842:     File outputDirectory;
1:3c38842:     if (lastSeparatorIndex != -1)
1:3c38842:     {
1:3c38842:       dirName = relativePath.substring(0, lastSeparatorIndex);
1:3c38842:       fileName = relativePath.substring(lastSeparatorIndex + 1);
1:3e5f60f: 
1:3c38842:       outputDirectory = new File(outputDir, dirName);
1:3c38842:       
1:3e5f60f:       if (!!!outputDirectory.exists() && !!!outputDirectory.mkdirs())
1:910fec0:         throw new IOException(MessageUtil.getMessage("UTIL0015E", relativePath));
1:3c38842:     }
1:3c38842:     else
1:3c38842:     {
1:3c38842:       outputDirectory = outputDir;
1:3c38842:       fileName = relativePath;
1:70a524b:     }
1:3e5f60f:     
1:3c38842:     File outputFile = new File(outputDirectory, fileName);
1:3c38842:     return new FileOutputStream(outputFile);
1:3c38842:   }
1:70a524b:   
1:70a524b:   /**
1:3e5f60f:    * Write the given InputStream to a file given by a root directory (outputDir) and a relative directory.
1:3c38842:    * Necessary subdirectories will be created. This method will close the supplied InputStream.
1:70a524b:    */
1:3c38842:   public static void writeOut(File outputDir, String relativePath, InputStream content) throws IOException
1:70a524b:   {
1:70a524b:     OutputStream out = null;
1:3c38842:     try {
1:70a524b:       out = getOutputStream(outputDir, relativePath);
1:3c38842:       IOUtils.copy(content, out);
1:3c38842:     }
3:3c38842:     finally {
3:3c38842:       close(out);
1:3c38842:     }
1:3c38842:   }
1:3c38842:   
1:ffe1828:   /**
1:70a524b:    * Write the given InputStream to a file given by a root directory (outputDir) and a relative directory.
1:3e5f60f:    * Necessary subdirectories will be created. This method will not close the supplied InputStream.
1:3e5f60f:    */
1:3e5f60f:   public static void writeOutAndDontCloseInputStream(File outputDir, String relativePath, InputStream content) throws IOException
1:3e5f60f:   {
1:3e5f60f:     OutputStream out = null;
1:3e5f60f:     try {
1:3e5f60f:       out = getOutputStream(outputDir, relativePath);
1:3e5f60f:       IOUtils.copyAndDoNotCloseInputStream(content, out);
1:3e5f60f:     }
1:3e5f60f:     finally {
1:3e5f60f:       close(out);
1:3e5f60f:     }
1:3e5f60f:   }
1:3e5f60f:   
1:3e5f60f:    /** 
1:ffe1828:    * Zip up all contents of rootDir (recursively) into targetStream
1:ffe1828:    */
1:ffe1828:   @SuppressWarnings("unchecked")
1:ffe1828:   public static void zipUp (File rootDir, OutputStream targetStream) throws IOException
1:70a524b:   {
1:ffe1828:     ZipOutputStream out = null;
1:ffe1828:     try { 
1:ffe1828:       out = new ZipOutputStream (targetStream);
1:ffe1828:       zipUpRecursive(out, "", rootDir, (Set<String>) Collections.EMPTY_SET);
1:ffe1828:     } finally { 
1:70a524b:       close(out);
1:70a524b:     }
1:ffe1828:   }
1:ffe1828:   
1:70a524b:   /**
1:3c38842:    * Zip up all contents of rootDir (recursively) into targetFile
1:3c38842:    */
1:3e5f60f:   @SuppressWarnings("unchecked")
1:3c38842:   public static void zipUp(File rootDir, File targetFile) throws IOException
1:3c38842:   {
1:3e5f60f:     ZipOutputStream out = null; 
1:3e5f60f:     try {
1:3e5f60f:       out = new ZipOutputStream(new FileOutputStream(targetFile));
1:3e5f60f:       zipUpRecursive(out, "", rootDir, (Set<String>) Collections.EMPTY_SET);
1:3e5f60f:     }
1:3e5f60f:     finally {
1:3e5f60f:       close(out);
1:3e5f60f:     }
1:ffe1828:   }
1:3c38842:   
4:3c38842:   /**
1:3c38842:    * Jar up all the contents of rootDir (recursively) into targetFile and add the manifest
1:3c38842:    */
1:3c38842:   public static void jarUp(File rootDir, File targetFile, Manifest manifest) throws IOException
1:3c38842:   {
1:3c38842:     JarOutputStream out = null;
1:3c38842:     try {
1:3c38842:       out = new JarOutputStream(new FileOutputStream(targetFile), manifest);
1:3c38842:       zipUpRecursive(out, "", rootDir, new HashSet<String>(Arrays.asList("META-INF/MANIFEST.MF")));
1:3c38842:     }
1:3c38842:     finally {
1:ffe1828:       close(out);
1:3c38842:     }
1:3c38842:   }
1:3c38842:   
1:3c38842:   /**
1:3c38842:    * Helper method used by zipUp
1:3c38842:    */
1:3c38842:   private static void zipUpRecursive(ZipOutputStream out, String prefix, 
1:3c38842:       File directory, Set<String> filesToExclude) throws IOException
1:3c38842:   {
1:3c38842:     File[] files = directory.listFiles();
1:3c38842:     if (files != null) 
1:3c38842:     {
1:3c38842:       for (File f : files)
1:3c38842:       {        
1:3c38842:         String fileName; 
1:3c38842:         if (f.isDirectory())
1:3c38842:           fileName = prefix + f.getName() + "/";
1:3c38842:         else
1:3c38842:           fileName = prefix + f.getName();
1:3c38842:         
1:3c38842:         if (filesToExclude.contains(fileName))
1:3c38842:           continue;
1:3c38842:         
1:3c38842:         ZipEntry ze = new ZipEntry(fileName);
1:3c38842:         ze.setSize(f.length());
1:3c38842:         ze.setTime(f.lastModified());
1:3c38842:         out.putNextEntry(ze);
1:3c38842: 
1:3c38842:         if (f.isDirectory()) 
1:3c38842:           zipUpRecursive(out, fileName, f, filesToExclude);
1:3c38842:         else 
1:3c38842:         {
1:3c38842:           IOUtils.copy(new FileInputStream(f), out);
1:3c38842:         }
1:3c38842:       }
1:3c38842:     }
1:3c38842:   }
1:3c38842:   
1:3c38842:   /**
1:3c38842:    * Do rm -rf
1:3c38842:    */
1:3c38842:   public static boolean deleteRecursive(File root)
1:3c38842:   {
1:3c38842:     if (!!!root.exists())
1:3c38842:       return false;
1:3c38842:     else if (root.isFile())
1:3c38842:       return root.delete();
1:3c38842:     else {
1:3c38842:       boolean result = true;
1:3c38842:       for (File f : root.listFiles())
1:3c38842:       {
1:3c38842:         result = deleteRecursive(f) && result;
1:3c38842:       }
1:3c38842:       return root.delete() && result;
1:70a524b:     }
1:3c38842:   }
1:3c38842:   
1:3c38842:   /**
1:70a524b:    * Unpack the zip file into the outputDir
1:70a524b:    * @param zip
1:70a524b:    * @param outputDir
1:70a524b:    * @return true if the zip was expanded, false if the zip was found not to be a zip
1:70a524b:    * @throws IOException when there are unexpected issues handling the zip files.
1:70a524b:    */
1:70a524b:   public static boolean unpackZip(IFile zip, File outputDir) throws IOException{
1:70a524b:     boolean success=true;
1:70a524b:     //unpack from fileOnDisk into bundleDir.
1:70a524b:     ZipInputStream zis = null;
1:70a524b:     try{
1:70a524b:       boolean isZip = false;
1:70a524b:       ZipEntry zipEntry = null;
1:70a524b:       try {
1:70a524b:         zis = new ZipInputStream (zip.open());
1:70a524b:         zipEntry = zis.getNextEntry();
1:70a524b:         isZip = zipEntry != null; 
1:70a524b:       } catch (ZipException e) { // It's not a zip - that's ok, we'll return that below. 
1:70a524b:         isZip = false;
1:70a524b:       } catch (UnsupportedOperationException e) {  // This isn't declared, but is thrown in practice
1:70a524b:         isZip = false;                             // It's not a zip - that's ok, we'll return that below. 
1:70a524b:       }
1:70a524b:       if(isZip){
1:70a524b:         do { 
1:70a524b:           if (!zipEntry.isDirectory()) { 
1:70a524b:             writeOutAndDontCloseInputStream(outputDir, zipEntry.getName(), zis);
1:70a524b:           }
1:70a524b:           zis.closeEntry();
1:70a524b:           zipEntry = zis.getNextEntry();
1:70a524b:         } while (zipEntry != null);
1:70a524b:       }else{
1:70a524b:         success=false;
1:70a524b:       }
1:70a524b:     }finally{
1:70a524b:       IOUtils.close(zis);
1:70a524b:     }
1:70a524b:     return success;
1:3e5f60f:   }
1:70a524b:   
1:70a524b: 
1:70a524b: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.io;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.IFile;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.util.filesystem;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.internal.MessageUtil;
/////////////////////////////////////////////////////////////////////////
1:         throw new IOException(MessageUtil.getMessage("UTIL0015E", relativePath));
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:5013877
/////////////////////////////////////////////////////////////////////////
1: import java.util.zip.ZipFile;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * A special version of close() for ZipFiles, which don't implement Closeable.
1:    * @param file the file to close. ZipFiles seem prone to file locking problems
1:    * on Windows, so to aid diagnostics we throw, not swallow, any exceptions. 
1:    */
1:   public static void close(ZipFile file) throws IOException
1:   {
1:     if (file != null) file.close();
1:   }
1:   
commit:3e5f60f
/////////////////////////////////////////////////////////////////////////
1:       copyAndDoNotCloseInputStream(in, out);
/////////////////////////////////////////////////////////////////////////
1:    * Copy an InputStream to an OutputStream and do not close the InputStream afterwards.
1:    */
1:   public static void copyAndDoNotCloseInputStream(InputStream in, OutputStream out) throws IOException
1:   {
1:     int len;
1:     byte[] b = new byte[1024];
1:     while ((len = in.read(b)) != -1)
1:       out.write(b,0,len);
1:   }
1:   
1:   /**
/////////////////////////////////////////////////////////////////////////
1:     catch (IOException e) {
1:       c = null;
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
1:       if (!!!outputDirectory.exists() && !!!outputDirectory.mkdirs())
0:         throw new IOException(MessageUtil.getMessage("APPUTILS0012E", relativePath));
1:     
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Write the given InputStream to a file given by a root directory (outputDir) and a relative directory.
1:    * Necessary subdirectories will be created. This method will not close the supplied InputStream.
1:    */
1:   public static void writeOutAndDontCloseInputStream(File outputDir, String relativePath, InputStream content) throws IOException
1:   {
1:     OutputStream out = null;
1:     try {
1:       out = getOutputStream(outputDir, relativePath);
1:       IOUtils.copyAndDoNotCloseInputStream(content, out);
1:     }
1:     finally {
1:       close(out);
1:     }
1:   }
1:   
1:    /** 
/////////////////////////////////////////////////////////////////////////
1:   @SuppressWarnings("unchecked")
1:     ZipOutputStream out = null; 
1:     try {
1:       out = new ZipOutputStream(new FileOutputStream(targetFile));
1:       zipUpRecursive(out, "", rootDir, (Set<String>) Collections.EMPTY_SET);
1:     }
1:     finally {
1:       close(out);
1:     }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: }
commit:70a524b
/////////////////////////////////////////////////////////////////////////
1: import java.util.zip.ZipException;
1: import java.util.zip.ZipInputStream;
0: import org.apache.aries.application.filesystem.IFile;
/////////////////////////////////////////////////////////////////////////
0:     if (!!!outputDirectory.exists() && !!!outputDirectory.mkdirs()) {
0:         throw new IOException(MessageUtil.getMessage("APPUTILS0012E", relativePath));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * Unpack the zip file into the outputDir
1:    * @param zip
1:    * @param outputDir
1:    * @return true if the zip was expanded, false if the zip was found not to be a zip
1:    * @throws IOException when there are unexpected issues handling the zip files.
1:    */
1:   public static boolean unpackZip(IFile zip, File outputDir) throws IOException{
1:     boolean success=true;
1:     //unpack from fileOnDisk into bundleDir.
1:     ZipInputStream zis = null;
1:     try{
1:       boolean isZip = false;
1:       ZipEntry zipEntry = null;
1:       try {
1:         zis = new ZipInputStream (zip.open());
1:         zipEntry = zis.getNextEntry();
1:         isZip = zipEntry != null; 
1:       } catch (ZipException e) { // It's not a zip - that's ok, we'll return that below. 
1:         isZip = false;
1:       } catch (UnsupportedOperationException e) {  // This isn't declared, but is thrown in practice
1:         isZip = false;                             // It's not a zip - that's ok, we'll return that below. 
1:       }
1:       if(isZip){
1:         do { 
1:           if (!zipEntry.isDirectory()) { 
1:             writeOutAndDontCloseInputStream(outputDir, zipEntry.getName(), zis);
0:           } else { 
0:             File f = new File (outputDir, zipEntry.getName());
0:             if (!f.exists()) { 
0:               success &= f.mkdirs();
1:             }
1:           }
1:           zis.closeEntry();
1:           zipEntry = zis.getNextEntry();
1:         } while (zipEntry != null);
1:       }else{
1:         success=false;
1:       }
1:     }finally{
1:       IOUtils.close(zis);
1:     }
1:     return success;
1:   }
1:   
1:   /**
1:    * Write the given InputStream to a file given by a root directory (outputDir) and a relative directory.
0:    * Necessary subdirectories will be created. This method will not close the supplied InputStream.
1:    */
0:   public static void writeOutAndDontCloseInputStream(File outputDir, String relativePath, InputStream content) throws IOException
1:   {
1:     OutputStream out = null;
1:     try {
1:       out = getOutputStream(outputDir, relativePath);
0:       IOUtils.copyAndDoNotCloseInputStream(content, out);
1:     }
1:     finally {
1:       close(out);
1:     }
1:   }
1:   
1:   /**
0:    * Copy an InputStream to an OutputStream and do not close the InputStream afterwards.
1:    */
0:   public static void copyAndDoNotCloseInputStream(InputStream in, OutputStream out) throws IOException
1:   {
0:     int len;
0:     byte[] b = new byte[1024];
0:     while ((len = in.read(b)) != -1)
0:       out.write(b,0,len);
1:   }
commit:ffe1828
/////////////////////////////////////////////////////////////////////////
1:   /** 
1:    * Zip up all contents of rootDir (recursively) into targetStream
1:    */
1:   @SuppressWarnings("unchecked")
1:   public static void zipUp (File rootDir, OutputStream targetStream) throws IOException
1:   {
1:     ZipOutputStream out = null;
1:     try { 
1:       out = new ZipOutputStream (targetStream);
1:       zipUpRecursive(out, "", rootDir, (Set<String>) Collections.EMPTY_SET);
1:     } finally { 
1:       close(out);
1:     }
1:   }
1:   
0:     zipUp (rootDir, new FileOutputStream (targetFile));
commit:4febb9f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.application.utils.filesystem;
commit:3c38842
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.filesystem.utils;
1: 
1: import java.io.Closeable;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Set;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipOutputStream;
1: 
0: import org.apache.aries.application.utils.internal.MessageUtil;
1: 
1: public class IOUtils
1: {
1:   /**
1:    * Copy an InputStream to an OutputStream and close the InputStream afterwards.
1:    */
1:   public static void copy(InputStream in, OutputStream out) throws IOException
1:   {
1:     try {
0:       int len;
0:       byte[] b = new byte[1024];
0:       while ((len = in.read(b)) != -1)
0:         out.write(b,0,len);
1:     }
1:     finally {
1:       close(in);
1:     }
1:   }
1:   
1:   /**
1:    * Close some xStream for good :)
1:    */
1:   public static void close(Closeable c)
1:   {
1:     try {
1:       if (c != null)
1:         c.close();
1:     }
0:     catch (IOException e) { c=null; } //in other words do nothing in a language findbugs can understand 
1:   }
1:   
1:   public static OutputStream getOutputStream(File outputDir, String relativePath) throws IOException
1:   {
1:     int lastSeparatorIndex = relativePath.replace(File.separatorChar,'/').lastIndexOf("/");
1:     String dirName = null;
1:     String fileName = null;
1:     
1:     File outputDirectory;
1:     if (lastSeparatorIndex != -1)
1:     {
1:       dirName = relativePath.substring(0, lastSeparatorIndex);
1:       fileName = relativePath.substring(lastSeparatorIndex + 1);
1: 
1:       outputDirectory = new File(outputDir, dirName);
1:       
0:       if (!!!outputDirectory.exists() && !!!outputDirectory.mkdirs())
0:         throw new IOException(MessageUtil.getMessage("APPUTILS0012E", relativePath));
1:     }
1:     else
1:     {
1:       outputDirectory = outputDir;
1:       fileName = relativePath;
1:     }
1:     
1:     File outputFile = new File(outputDirectory, fileName);
1:     return new FileOutputStream(outputFile);
1:   }
1:   
1:   /**
0:    * Write the given InputStream to a file given by a root directory (outputDir) and a relative directory.
1:    * Necessary subdirectories will be created. This method will close the supplied InputStream.
1:    */
1:   public static void writeOut(File outputDir, String relativePath, InputStream content) throws IOException
1:   {
0:     OutputStream out = null;
1:     try {
0:       out = getOutputStream(outputDir, relativePath);
1:       IOUtils.copy(content, out);
1:     }
1:     finally {
1:       close(out);
1:     }
1:   }
1:   
1:   /**
1:    * Zip up all contents of rootDir (recursively) into targetFile
1:    */
0:   @SuppressWarnings("unchecked")
1:   public static void zipUp(File rootDir, File targetFile) throws IOException
1:   {
0:     ZipOutputStream out = null; 
1:     try {
0:       out = new ZipOutputStream(new FileOutputStream(targetFile));
0:       zipUpRecursive(out, "", rootDir, (Set<String>) Collections.EMPTY_SET);
1:     }
1:     finally {
1:       close(out);
1:     }
1:   }
1:   
1:   /**
1:    * Jar up all the contents of rootDir (recursively) into targetFile and add the manifest
1:    */
1:   public static void jarUp(File rootDir, File targetFile, Manifest manifest) throws IOException
1:   {
1:     JarOutputStream out = null;
1:     try {
1:       out = new JarOutputStream(new FileOutputStream(targetFile), manifest);
1:       zipUpRecursive(out, "", rootDir, new HashSet<String>(Arrays.asList("META-INF/MANIFEST.MF")));
1:     }
1:     finally {
1:       close(out);
1:     }
1:   }
1:   
1:   /**
1:    * Helper method used by zipUp
1:    */
1:   private static void zipUpRecursive(ZipOutputStream out, String prefix, 
1:       File directory, Set<String> filesToExclude) throws IOException
1:   {
1:     File[] files = directory.listFiles();
1:     if (files != null) 
1:     {
1:       for (File f : files)
1:       {        
1:         String fileName; 
1:         if (f.isDirectory())
1:           fileName = prefix + f.getName() + "/";
1:         else
1:           fileName = prefix + f.getName();
1:         
1:         if (filesToExclude.contains(fileName))
1:           continue;
1:         
1:         ZipEntry ze = new ZipEntry(fileName);
1:         ze.setSize(f.length());
1:         ze.setTime(f.lastModified());
1:         out.putNextEntry(ze);
1: 
1:         if (f.isDirectory()) 
1:           zipUpRecursive(out, fileName, f, filesToExclude);
1:         else 
1:         {
1:           IOUtils.copy(new FileInputStream(f), out);
1:         }
1:       }
1:     }
1:   }
1:   
1:   /**
1:    * Do rm -rf
1:    */
1:   public static boolean deleteRecursive(File root)
1:   {
1:     if (!!!root.exists())
1:       return false;
1:     else if (root.isFile())
1:       return root.delete();
1:     else {
1:       boolean result = true;
1:       for (File f : root.listFiles())
1:       {
1:         result = deleteRecursive(f) && result;
1:       }
1:       return root.delete() && result;
1:     }
1:   }
1: }
1: 
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.utils.filesystem;
0: 
0: import java.io.Closeable;
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.util.Arrays;
0: import java.util.Collections;
0: import java.util.HashSet;
0: import java.util.Set;
0: import java.util.jar.JarOutputStream;
0: import java.util.jar.Manifest;
0: import java.util.zip.ZipEntry;
0: import java.util.zip.ZipOutputStream;
0: 
0: import org.apache.aries.application.utils.internal.MessageUtil;
0: 
0: public class IOUtils
0: {
0:   /**
0:    * Copy an InputStream to an OutputStream and close the InputStream afterwards.
0:    */
0:   public static void copy(InputStream in, OutputStream out) throws IOException
0:   {
0:     try {
0:       int len;
0:       byte[] b = new byte[1024];
0:       while ((len = in.read(b)) != -1)
0:         out.write(b,0,len);
0:     }
0:     finally {
0:       close(in);
0:     }
0:   }
0:   
0:   /**
0:    * Close some xStream for good :)
0:    */
0:   public static void close(Closeable c)
0:   {
0:     try {
0:       if (c != null)
0:         c.close();
0:     }
0:     catch (IOException e) { c=null; } //in other words do nothing in a language findbugs can understand 
0:   }
0:   
0:   public static OutputStream getOutputStream(File outputDir, String relativePath) throws IOException
0:   {
0:     int lastSeparatorIndex = relativePath.replace(File.separatorChar,'/').lastIndexOf("/");
0:     String dirName = null;
0:     String fileName = null;
0:     
0:     File outputDirectory;
0:     if (lastSeparatorIndex != -1)
0:     {
0:       dirName = relativePath.substring(0, lastSeparatorIndex);
0:       fileName = relativePath.substring(lastSeparatorIndex + 1);
0: 
0:       outputDirectory = new File(outputDir, dirName);
0:       
0:       if (!!!outputDirectory.exists() && !!!outputDirectory.mkdirs())
0:         throw new IOException(MessageUtil.getMessage("APPUTILS0012E", relativePath));
0:     }
0:     else
0:     {
0:       outputDirectory = outputDir;
0:       fileName = relativePath;
0:     }
0:     
0:     File outputFile = new File(outputDirectory, fileName);
0:     return new FileOutputStream(outputFile);
0:   }
0:   
0:   /**
0:    * Write the given InputStream to a file given by a root directory (outputDir) and a relative directory.
0:    * Necessary subdirectories will be created. This method will close the supplied InputStream.
0:    */
0:   public static void writeOut(File outputDir, String relativePath, InputStream content) throws IOException
0:   {
0:     OutputStream out = null;
0:     try {
0:       out = getOutputStream(outputDir, relativePath);
0:       IOUtils.copy(content, out);
0:     }
0:     finally {
0:       close(out);
0:     }
0:   }
0:   
0:   /** 
0:    * Zip up all contents of rootDir (recursively) into targetStream
0:    */
0:   @SuppressWarnings("unchecked")
0:   public static void zipUp (File rootDir, OutputStream targetStream) throws IOException
0:   {
0:     ZipOutputStream out = null;
0:     try { 
0:       out = new ZipOutputStream (targetStream);
0:       zipUpRecursive(out, "", rootDir, (Set<String>) Collections.EMPTY_SET);
0:     } finally { 
0:       close(out);
0:     }
0:   }
0:   
0:   /**
0:    * Zip up all contents of rootDir (recursively) into targetFile
0:    */
0:   public static void zipUp(File rootDir, File targetFile) throws IOException
0:   {
0:     zipUp (rootDir, new FileOutputStream (targetFile));
0:   }
0:   
0:   /**
0:    * Jar up all the contents of rootDir (recursively) into targetFile and add the manifest
0:    */
0:   public static void jarUp(File rootDir, File targetFile, Manifest manifest) throws IOException
0:   {
0:     JarOutputStream out = null;
0:     try {
0:       out = new JarOutputStream(new FileOutputStream(targetFile), manifest);
0:       zipUpRecursive(out, "", rootDir, new HashSet<String>(Arrays.asList("META-INF/MANIFEST.MF")));
0:     }
0:     finally {
0:       close(out);
0:     }
0:   }
0:   
0:   /**
0:    * Helper method used by zipUp
0:    */
0:   private static void zipUpRecursive(ZipOutputStream out, String prefix, 
0:       File directory, Set<String> filesToExclude) throws IOException
0:   {
0:     File[] files = directory.listFiles();
0:     if (files != null) 
0:     {
0:       for (File f : files)
0:       {        
0:         String fileName; 
0:         if (f.isDirectory())
0:           fileName = prefix + f.getName() + "/";
0:         else
0:           fileName = prefix + f.getName();
0:         
0:         if (filesToExclude.contains(fileName))
0:           continue;
0:         
0:         ZipEntry ze = new ZipEntry(fileName);
0:         ze.setSize(f.length());
0:         ze.setTime(f.lastModified());
0:         out.putNextEntry(ze);
0: 
0:         if (f.isDirectory()) 
0:           zipUpRecursive(out, fileName, f, filesToExclude);
0:         else 
0:         {
0:           IOUtils.copy(new FileInputStream(f), out);
0:         }
0:       }
0:     }
0:   }
0:   
0:   /**
0:    * Do rm -rf
0:    */
0:   public static boolean deleteRecursive(File root)
0:   {
0:     if (!!!root.exists())
0:       return false;
0:     else if (root.isFile())
0:       return root.delete();
0:     else {
0:       boolean result = true;
0:       for (File f : root.listFiles())
0:       {
0:         result = deleteRecursive(f) && result;
0:       }
0:       return root.delete() && result;
0:     }
0:   }
0: }
0: 
============================================================================