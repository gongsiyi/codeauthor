1:27f3ecd: /*
1:27f3ecd:  * Licensed to the Apache Software Foundation (ASF) under one
1:27f3ecd:  * or more contributor license agreements.  See the NOTICE file
1:27f3ecd:  * distributed with this work for additional information
1:27f3ecd:  * regarding copyright ownership.  The ASF licenses this file
1:27f3ecd:  * to you under the Apache License, Version 2.0 (the
1:27f3ecd:  * "License"); you may not use this file except in compliance
1:27f3ecd:  * with the License.  You may obtain a copy of the License at
1:27f3ecd:  *
1:27f3ecd:  *   http://www.apache.org/licenses/LICENSE-2.0
1:27f3ecd:  *
1:27f3ecd:  * Unless required by applicable law or agreed to in writing,
1:27f3ecd:  * software distributed under the License is distributed on an
1:27f3ecd:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:27f3ecd:  * KIND, either express or implied.  See the License for the
1:27f3ecd:  * specific language governing permissions and limitations
1:27f3ecd:  * under the License.
1:27f3ecd:  */
4:27f3ecd: 
1:27f3ecd: package org.apache.aries.application.management.impl;
1:27f3ecd: 
1:27f3ecd: import java.io.File;
1:bbb186b: import java.io.FileNotFoundException;
1:bbb186b: import java.io.FileOutputStream;
1:bbb186b: import java.io.IOException;
1:0e0fd84: import java.io.InputStream;
1:27f3ecd: import java.io.OutputStream;
1:ba73ed7: import java.net.MalformedURLException;
1:bbb186b: import java.net.URL;
1:27f3ecd: import java.util.List;
1:0e0fd84: import java.util.Map;
1:27f3ecd: import java.util.Set;
1:27f3ecd: 
1:27f3ecd: import org.apache.aries.application.ApplicationMetadata;
1:bbb186b: import org.apache.aries.application.Content;
1:27f3ecd: import org.apache.aries.application.DeploymentMetadata;
1:27f3ecd: import org.apache.aries.application.management.AriesApplication;
1:27f3ecd: import org.apache.aries.application.management.BundleInfo;
1:89f804e: import org.apache.aries.application.management.spi.convert.BundleConversion;
1:89f804e: import org.apache.aries.application.management.spi.runtime.LocalPlatform;
1:bbb186b: import org.apache.aries.application.utils.AppConstants;
1:c6cb34d: import org.apache.aries.util.io.IOUtils;
1:20c52b6: import org.slf4j.Logger;
1:20c52b6: import org.slf4j.LoggerFactory;
1:27f3ecd: 
1:27f3ecd: public class AriesApplicationImpl implements AriesApplication {
1:27f3ecd: 
1:20c52b6:   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.management");
1:20c52b6: 
1:0f3010e:   private Set<BundleInfo> _bundleInfo;
1:0f3010e:   private ApplicationMetadata _applicationMetadata;
1:0f3010e:   private DeploymentMetadata _deploymentMetadata;
1:bbb186b:   private LocalPlatform _localPlatform;
1:0f3010e:   
1:0e0fd84:   // Placeholders for information we'll need for store()
1:9a6f681:   private Map<String, BundleConversion> _modifiedBundles = null;
1:0e0fd84:   
1:bbb186b:   public AriesApplicationImpl(ApplicationMetadata meta, Set<BundleInfo> bundleInfo,
1:bbb186b:       LocalPlatform lp) {
1:0f3010e:     _applicationMetadata = meta;
1:0f3010e:     _bundleInfo = bundleInfo;
1:0f3010e:     _deploymentMetadata = null;
1:bbb186b:     _localPlatform = lp;
1:0f3010e:     
1:0f3010e:   }
1:0f3010e:   
1:ffe1828:   public AriesApplicationImpl(ApplicationMetadata meta, DeploymentMetadata dep, 
1:ffe1828:       Set<BundleInfo> bundleInfo, LocalPlatform lp) {
1:ffe1828:     _applicationMetadata = meta;
1:ffe1828:     _bundleInfo = bundleInfo;
1:ffe1828:     _deploymentMetadata = dep;
1:ffe1828:     _localPlatform = lp;
1:ffe1828:     
1:ffe1828:   }
1:ffe1828:   
1:27f3ecd:   public ApplicationMetadata getApplicationMetadata() {
1:0f3010e:     return _applicationMetadata;
1:ffe1828:   }
1:27f3ecd: 
1:20c52b6:   public Set<BundleInfo> getBundleInfo() {
1:0f3010e:     return _bundleInfo;
1:ffe1828:   }
1:27f3ecd: 
1:27f3ecd:   public DeploymentMetadata getDeploymentMetadata() {
1:0e0fd84:     return _deploymentMetadata;
1:27f3ecd:   }
1:27f3ecd:   
1:0f3010e:   public void setDeploymentMetadata (DeploymentMetadata dm) { 
1:0f3010e:     _deploymentMetadata = dm;
1:0e0fd84:   }
1:0e0fd84: 
1:9a6f681:   public Map<String, BundleConversion> getModifiedBundles() {
1:3b38bc2:     return _modifiedBundles;
1:0f3010e:   }
1:27f3ecd: 
1:9a6f681:   public void setModifiedBundles (Map<String, BundleConversion> modifiedBundles) {
1:0e0fd84:     _modifiedBundles = modifiedBundles;
1:0e0fd84:   }
1:ffe1828:   
1:ffe1828:   public void setLocalPlatform (LocalPlatform lp) { 
1:ffe1828:     _localPlatform = lp;
1:ffe1828:   }
1:bbb186b: 
1:3b38bc2:   public boolean isResolved() {
1:3b38bc2:     return getDeploymentMetadata() != null;
1:27f3ecd:   }
1:27f3ecd: 
1:bbb186b:   public void store(File f) throws FileNotFoundException, IOException {
1:ba73ed7:     if (f.isDirectory()) {
1:ba73ed7:       storeInDirectory(f);
1:ba73ed7:     } else {
1:bbb186b:       OutputStream os = new FileOutputStream (f);
1:bbb186b:       store(os);
1:bbb186b:       os.close();
1:bbb186b:     }
1:27f3ecd:   }
1:bbb186b: 
1:ffe1828:   /**
1:ffe1828:    * Construct an eba in a temporary directory
1:ffe1828:    * Copy the eba to the target output stream 
1:ffe1828:    * Delete the temporary directory.
1:ffe1828:    * Leave target output stream open
1:ffe1828:    */
1:bbb186b:   public void store(OutputStream targetStream) throws FileNotFoundException, IOException {
1:ffe1828:  
1:bbb186b:     //
1:bbb186b:     // This code will be run on various application server platforms, each of which
1:bbb186b:     // will have its own policy about where to create temporary directories. We 
1:bbb186b:     // can't just ask the local filesystem for a temporary directory since it may
1:bbb186b:     // be quite large: the app server implementation will be better able to select
1:bbb186b:     // an appropriate location. 
1:bbb186b:     File tempDir = _localPlatform.getTemporaryDirectory();
1:ba73ed7:     storeInDirectory(tempDir);    
1:ffe1828:     // We now have an exploded eba in tempDir which we need to copy into targetStream
1:ffe1828:     IOUtils.zipUp(tempDir, targetStream);
1:ffe1828:     if (!IOUtils.deleteRecursive(tempDir))
1:ffe1828:     {
1:20c52b6:       _logger.warn("APPMANAGEMENT0001E", tempDir);
1:27f3ecd:     }
1:27f3ecd:   }
1:bbb186b: 
1:ba73ed7:   private void storeInDirectory(File dir) throws IOException, MalformedURLException {
1:bbb186b:     OutputStream out = null;
1:bbb186b:     InputStream in = null;
1:bbb186b:     try {
1:ba73ed7:       out = IOUtils.getOutputStream(dir, AppConstants.APPLICATION_MF);
1:bbb186b:       _applicationMetadata.store(out);
1:bbb186b: 
1:bbb186b:     } finally {
1:ffe1828:       IOUtils.close(out);
1:bbb186b:     }
1:e328c1b:     if (_deploymentMetadata != null) {
1:bbb186b:       try {
1:ba73ed7:         out = IOUtils.getOutputStream(dir, AppConstants.DEPLOYMENT_MF);
1:bbb186b:         _deploymentMetadata.store(out);
1:bbb186b:       } finally {
2:bbb186b:         IOUtils.close(out);
1:bbb186b:       }
1:27f3ecd:     }
1:bbb186b:     
1:bbb186b:     // Write the by-value eba files out
1:bbb186b:     for (BundleInfo bi : _bundleInfo) { 
1:bbb186b:       // bi.getLocation() will return a URL to the source bundle. It may be of the form
1:bbb186b:       // file:/path/to/my/file.jar, or
1:bbb186b:       // jar:file:/my/path/to/eba.jar!/myBundle.jar
1:bbb186b:       String bundleLocation = bi.getLocation();
1:bbb186b:       String bundleFileName = bundleLocation.substring(bundleLocation.lastIndexOf('/') + 1);
1:bbb186b:       try { 
1:ba73ed7:         out = IOUtils.getOutputStream(dir, bundleFileName);
1:bbb186b:         URL bundleURL = new URL (bundleLocation);
1:bbb186b:         InputStream is = bundleURL.openStream();
1:bbb186b:         IOUtils.copy(is, out);
1:bbb186b:       } finally { 
1:bbb186b:         IOUtils.close(out);
1:bbb186b:         IOUtils.close(in);
1:bbb186b:       }
1:bbb186b:     }
1:bbb186b: 
1:ffe1828:     // Write the migrated bundles out
1:ffe1828:     if (_modifiedBundles != null) { 
1:9a6f681:       for (Map.Entry<String, BundleConversion> modifiedBundle : _modifiedBundles.entrySet()) {
1:a66dc1e:         try { 
1:ba73ed7:           out = IOUtils.getOutputStream(dir, modifiedBundle.getKey());
1:9a6f681:           IOUtils.copy(modifiedBundle.getValue().getInputStream(), out);
1:a66dc1e:         } finally { 
1:a66dc1e:           IOUtils.close(out);
1:a66dc1e:         }
1:ffe1828:       }
1:bbb186b:     }
1:ba73ed7:   }
2:ba73ed7: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.io.IOUtils;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.filesystem.IOUtils;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.convert.BundleConversion;
1: import org.apache.aries.application.management.spi.runtime.LocalPlatform;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9a6f681
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.BundleConversion;
/////////////////////////////////////////////////////////////////////////
1:   private Map<String, BundleConversion> _modifiedBundles = null;
/////////////////////////////////////////////////////////////////////////
1:   public Map<String, BundleConversion> getModifiedBundles() {
1:   public void setModifiedBundles (Map<String, BundleConversion> modifiedBundles) {
/////////////////////////////////////////////////////////////////////////
1:       for (Map.Entry<String, BundleConversion> modifiedBundle : _modifiedBundles.entrySet()) {
1:           IOUtils.copy(modifiedBundle.getValue().getInputStream(), out);
commit:a66dc1e
/////////////////////////////////////////////////////////////////////////
0:       for (Map.Entry<String, InputStream> modifiedBundle : _modifiedBundles.entrySet()) {
1:         try { 
0:           out = IOUtils.getOutputStream(tempDir, modifiedBundle.getKey());
0:           IOUtils.copy(modifiedBundle.getValue(), out);
1:         } finally { 
1:           IOUtils.close(out);
1:         }
commit:20c52b6
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.management");
1: 
/////////////////////////////////////////////////////////////////////////
1:   public Set<BundleInfo> getBundleInfo() {
/////////////////////////////////////////////////////////////////////////
1:       _logger.warn("APPMANAGEMENT0001E", tempDir);
commit:ffe1828
/////////////////////////////////////////////////////////////////////////
1:   public AriesApplicationImpl(ApplicationMetadata meta, DeploymentMetadata dep, 
1:       Set<BundleInfo> bundleInfo, LocalPlatform lp) {
1:     _applicationMetadata = meta;
1:     _bundleInfo = bundleInfo;
1:     _deploymentMetadata = dep;
1:     _localPlatform = lp;
1:     
1:   }
1:   
/////////////////////////////////////////////////////////////////////////
1:   
1:   public void setLocalPlatform (LocalPlatform lp) { 
1:     _localPlatform = lp;
1:   }
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Construct an eba in a temporary directory
1:    * Copy the eba to the target output stream 
1:    * Delete the temporary directory.
1:    * Leave target output stream open
1:    */
1:  
/////////////////////////////////////////////////////////////////////////
1:     // Write the migrated bundles out
1:     if (_modifiedBundles != null) { 
0:       for (Map.Entry<String, InputStream> modifiedBundle : _modifiedBundles.entrySet()) { 
0:         out = IOUtils.getOutputStream(tempDir, modifiedBundle.getKey());
0:         IOUtils.copy(modifiedBundle.getValue(), out);
1:         IOUtils.close(out);
1:       }
1:     }
1:     // We now have an exploded eba in tempDir which we need to copy into targetStream
1:     IOUtils.zipUp(tempDir, targetStream);
1:     if (!IOUtils.deleteRecursive(tempDir))
1:     {
0:       // TODO: Log a warning
1:     }
commit:92ce70e
/////////////////////////////////////////////////////////////////////////
commit:bbb186b
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileNotFoundException;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.net.URL;
1: import org.apache.aries.application.Content;
0: import org.apache.aries.application.management.LocalPlatform;
1: import org.apache.aries.application.utils.AppConstants;
0: import org.apache.aries.application.utils.filesystem.IOUtils;
1:   private LocalPlatform _localPlatform;
1:   public AriesApplicationImpl(ApplicationMetadata meta, Set<BundleInfo> bundleInfo,
1:       LocalPlatform lp) {
1:     _localPlatform = lp;
/////////////////////////////////////////////////////////////////////////
0:   public void setModifiedBundles (Map<String, InputStream> modifiedBundles) {
1: 
1:   public void store(File f) throws FileNotFoundException, IOException {
1:     OutputStream os = new FileOutputStream (f);
1:     store(os);
1:     os.close();
1:   }
1: 
1:   public void store(OutputStream targetStream) throws FileNotFoundException, IOException {
0:     // Construct an eba in a temporary directory
0:     // Copy the eba to the target output stream 
0:     // Delete the temporary directory. 
1:     //
1:     // This code will be run on various application server platforms, each of which
1:     // will have its own policy about where to create temporary directories. We 
1:     // can't just ask the local filesystem for a temporary directory since it may
1:     // be quite large: the app server implementation will be better able to select
1:     // an appropriate location. 
1:     File tempDir = _localPlatform.getTemporaryDirectory();
1:     OutputStream out = null;
1:     InputStream in = null;
1:     try {
0:       out = IOUtils.getOutputStream(tempDir, AppConstants.APPLICATION_MF);
1:       _applicationMetadata.store(out);
1: 
1:     } finally {
1:       IOUtils.close(out);
1:     }
1:     try {
0:       out = IOUtils.getOutputStream(tempDir, AppConstants.DEPLOYMENT_MF);
1:       _deploymentMetadata.store(out);
1:     } finally {
1:       IOUtils.close(out);
1:     }
1:     
1:     // Write the by-value eba files out
1:     for (BundleInfo bi : _bundleInfo) { 
1:       // bi.getLocation() will return a URL to the source bundle. It may be of the form
1:       // file:/path/to/my/file.jar, or
1:       // jar:file:/my/path/to/eba.jar!/myBundle.jar
1:       String bundleLocation = bi.getLocation();
1:       String bundleFileName = bundleLocation.substring(bundleLocation.lastIndexOf('/') + 1);
1:       try { 
0:         out = IOUtils.getOutputStream(tempDir, bundleFileName);
1:         URL bundleURL = new URL (bundleLocation);
1:         InputStream is = bundleURL.openStream();
1:         IOUtils.copy(is, out);
1:       } finally { 
1:         IOUtils.close(out);
1:         IOUtils.close(in);
1:       }
1:     }
1: 
0:     // TODO: Write the migrated bundles out
1:     
1:   }
commit:0e0fd84
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:   // Placeholders for information we'll need for store()
0:   private boolean _applicationManifestChanged = false;
0:   private Map<String, InputStream> _modifiedBundles = null;
1:   
/////////////////////////////////////////////////////////////////////////
1:     return _deploymentMetadata;
/////////////////////////////////////////////////////////////////////////
0:   // When store() is called we'll need to know whether application.mf was changed, 
0:   // or any constituent .wars or .jars migrated to bundles in the course of constructing
0:   // the AriesApplication. 
0:   void setApplicationManifestChanged (boolean changed) { 
0:     _applicationManifestChanged = changed;
1:   }
1:   
0:   void setModifiedBundles (Map<String, InputStream> modifiedBundles) { 
1:     _modifiedBundles = modifiedBundles;
1:   }
commit:0f3010e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private Set<BundleInfo> _bundleInfo;
1:   private ApplicationMetadata _applicationMetadata;
1:   private DeploymentMetadata _deploymentMetadata;
1:   
0:   public AriesApplicationImpl(ApplicationMetadata meta, Set<BundleInfo> bundleInfo) {
1:     _applicationMetadata = meta;
1:     _bundleInfo = bundleInfo;
1:     _deploymentMetadata = null;
1:     
1:   }
1:     return _applicationMetadata;
1:     return _bundleInfo;
/////////////////////////////////////////////////////////////////////////
1:   
1:   public void setDeploymentMetadata (DeploymentMetadata dm) { 
1:     _deploymentMetadata = dm;
1:   }
commit:27f3ecd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.application.management.impl;
1: 
1: import java.io.File;
1: import java.io.OutputStream;
0: import java.net.URL;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.aries.application.ApplicationMetadata;
1: import org.apache.aries.application.DeploymentMetadata;
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.BundleInfo;
0: import org.osgi.framework.Bundle;
1: 
1: public class AriesApplicationImpl implements AriesApplication {
1: 
0:   public AriesApplicationImpl(ApplicationMetadata meta, List<Bundle> bundles) {}
0:   public AriesApplicationImpl () {}
1:   
1:   public ApplicationMetadata getApplicationMetadata() {
0:     // TODO Auto-generated method stub
0:     return null;
1:   }
1: 
0:   public Set<BundleInfo> getBundles() {
0:     // TODO Auto-generated method stub
0:     return null;
1:   }
1: 
1:   public DeploymentMetadata getDeploymentMetadata() {
0:     // TODO Auto-generated method stub
0:     return null;
1:   }
1: 
0:   public void store(File f) {
0:     // TODO Auto-generated method stub
1: 
1:   }
1: 
0:   public void store(OutputStream in) {
0:     // TODO Auto-generated method stub
1: 
1:   }
1: 
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:ba73ed7
/////////////////////////////////////////////////////////////////////////
1: import java.net.MalformedURLException;
/////////////////////////////////////////////////////////////////////////
1:     if (f.isDirectory()) {
1:       storeInDirectory(f);
1:     } else {
0:       OutputStream os = new FileOutputStream (f);
0:       store(os);
0:       os.close();
1:     }
/////////////////////////////////////////////////////////////////////////
1:     storeInDirectory(tempDir);    
0:     // We now have an exploded eba in tempDir which we need to copy into targetStream
0:     IOUtils.zipUp(tempDir, targetStream);
0:     if (!IOUtils.deleteRecursive(tempDir))
0:     {
0:       _logger.warn("APPMANAGEMENT0001E", tempDir);
1:     }
1:   }
0: 
1:   private void storeInDirectory(File dir) throws IOException, MalformedURLException {
1:       out = IOUtils.getOutputStream(dir, AppConstants.APPLICATION_MF);
/////////////////////////////////////////////////////////////////////////
1:         out = IOUtils.getOutputStream(dir, AppConstants.DEPLOYMENT_MF);
/////////////////////////////////////////////////////////////////////////
1:         out = IOUtils.getOutputStream(dir, bundleFileName);
/////////////////////////////////////////////////////////////////////////
1:           out = IOUtils.getOutputStream(dir, modifiedBundle.getKey());
commit:8914925
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.management.impl;
0: 
0: import java.io.File;
0: import java.io.FileNotFoundException;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.net.URL;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
0: 
0: import org.apache.aries.application.ApplicationMetadata;
0: import org.apache.aries.application.Content;
0: import org.apache.aries.application.DeploymentMetadata;
0: import org.apache.aries.application.management.AriesApplication;
0: import org.apache.aries.application.management.BundleInfo;
0: import org.apache.aries.application.management.LocalPlatform;
0: import org.apache.aries.application.utils.AppConstants;
0: import org.apache.aries.application.utils.filesystem.IOUtils;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: public class AriesApplicationImpl implements AriesApplication {
0: 
0:   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.management");
0: 
0:   private Set<BundleInfo> _bundleInfo;
0:   private ApplicationMetadata _applicationMetadata;
0:   private DeploymentMetadata _deploymentMetadata;
0:   private LocalPlatform _localPlatform;
0:   
0:   // Placeholders for information we'll need for store()
0:   private Map<String, InputStream> _modifiedBundles = null;
0:   
0:   public AriesApplicationImpl(ApplicationMetadata meta, Set<BundleInfo> bundleInfo,
0:       LocalPlatform lp) {
0:     _applicationMetadata = meta;
0:     _bundleInfo = bundleInfo;
0:     _deploymentMetadata = null;
0:     _localPlatform = lp;
0:     
0:   }
0:   
0:   public AriesApplicationImpl(ApplicationMetadata meta, DeploymentMetadata dep, 
0:       Set<BundleInfo> bundleInfo, LocalPlatform lp) {
0:     _applicationMetadata = meta;
0:     _bundleInfo = bundleInfo;
0:     _deploymentMetadata = dep;
0:     _localPlatform = lp;
0:     
0:   }
0:   
0:   public ApplicationMetadata getApplicationMetadata() {
0:     return _applicationMetadata;
0:   }
0: 
0:   public Set<BundleInfo> getBundleInfo() {
0:     return _bundleInfo;
0:   }
0: 
0:   public DeploymentMetadata getDeploymentMetadata() {
0:     return _deploymentMetadata;
0:   }
0:   
0:   public void setDeploymentMetadata (DeploymentMetadata dm) { 
0:     _deploymentMetadata = dm;
0:   }
0:   
0:   public void setModifiedBundles (Map<String, InputStream> modifiedBundles) {
0:     _modifiedBundles = modifiedBundles;
0:   }
0:   
0:   public void setLocalPlatform (LocalPlatform lp) { 
0:     _localPlatform = lp;
0:   }
0: 
0:   public void store(File f) throws FileNotFoundException, IOException {
0:     OutputStream os = new FileOutputStream (f);
0:     store(os);
0:     os.close();
0:   }
0: 
0:   /**
0:    * Construct an eba in a temporary directory
0:    * Copy the eba to the target output stream 
0:    * Delete the temporary directory.
0:    * Leave target output stream open
0:    */
0:   public void store(OutputStream targetStream) throws FileNotFoundException, IOException {
0:  
0:     //
0:     // This code will be run on various application server platforms, each of which
0:     // will have its own policy about where to create temporary directories. We 
0:     // can't just ask the local filesystem for a temporary directory since it may
0:     // be quite large: the app server implementation will be better able to select
0:     // an appropriate location. 
0:     File tempDir = _localPlatform.getTemporaryDirectory();
0:     OutputStream out = null;
0:     InputStream in = null;
0:     try {
0:       out = IOUtils.getOutputStream(tempDir, AppConstants.APPLICATION_MF);
0:       _applicationMetadata.store(out);
0: 
0:     } finally {
0:       IOUtils.close(out);
0:     }
0:     try {
0:       out = IOUtils.getOutputStream(tempDir, AppConstants.DEPLOYMENT_MF);
0:       _deploymentMetadata.store(out);
0:     } finally {
0:       IOUtils.close(out);
0:     }
0:     
0:     // Write the by-value eba files out
0:     for (BundleInfo bi : _bundleInfo) { 
0:       // bi.getLocation() will return a URL to the source bundle. It may be of the form
0:       // file:/path/to/my/file.jar, or
0:       // jar:file:/my/path/to/eba.jar!/myBundle.jar
0:       String bundleLocation = bi.getLocation();
0:       String bundleFileName = bundleLocation.substring(bundleLocation.lastIndexOf('/') + 1);
0:       try { 
0:         out = IOUtils.getOutputStream(tempDir, bundleFileName);
0:         URL bundleURL = new URL (bundleLocation);
0:         InputStream is = bundleURL.openStream();
0:         IOUtils.copy(is, out);
0:       } finally { 
0:         IOUtils.close(out);
0:         IOUtils.close(in);
0:       }
0:     }
0: 
0:     // Write the migrated bundles out
0:     if (_modifiedBundles != null) { 
0:       for (Map.Entry<String, InputStream> modifiedBundle : _modifiedBundles.entrySet()) { 
0:         out = IOUtils.getOutputStream(tempDir, modifiedBundle.getKey());
0:         IOUtils.copy(modifiedBundle.getValue(), out);
0:         IOUtils.close(out);
0:       }
0:     }
0:     
0:     // We now have an exploded eba in tempDir which we need to copy into targetStream
0:     IOUtils.zipUp(tempDir, targetStream);
0:     if (!IOUtils.deleteRecursive(tempDir))
0:     {
0:       _logger.warn("APPMANAGEMENT0001E", tempDir);
0:     }
0:   }
0: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:e328c1b
/////////////////////////////////////////////////////////////////////////
1:     if (_deploymentMetadata != null) {
0:       try {
0:         out = IOUtils.getOutputStream(tempDir, AppConstants.DEPLOYMENT_MF);
0:         _deploymentMetadata.store(out);
0:       } finally {
0:         IOUtils.close(out);
0:       }
commit:3b38bc2
/////////////////////////////////////////////////////////////////////////
0: 
0:   public Map<String, InputStream> getModifiedBundles() {
1:     return _modifiedBundles;
0:   }
0: 
/////////////////////////////////////////////////////////////////////////
1:   public boolean isResolved() {
1:     return getDeploymentMetadata() != null;
0:   }
0: 
============================================================================