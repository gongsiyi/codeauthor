1:72345ab: /*
1:72345ab:  * Licensed to the Apache Software Foundation (ASF) under one
1:72345ab:  * or more contributor license agreements.  See the NOTICE file
1:72345ab:  * distributed with this work for additional information
1:72345ab:  * regarding copyright ownership.  The ASF licenses this file
1:72345ab:  * to you under the Apache License, Version 2.0 (the
1:72345ab:  * "License"); you may not use this file except in compliance
1:72345ab:  * with the License.  You may obtain a copy of the License at
1:72345ab:  *
1:72345ab:  *   http://www.apache.org/licenses/LICENSE-2.0
1:72345ab:  *
1:72345ab:  * Unless required by applicable law or agreed to in writing,
1:72345ab:  * software distributed under the License is distributed on an
1:72345ab:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:72345ab:  * KIND, either express or implied.  See the License for the
1:72345ab:  * specific language governing permissions and limitations
1:72345ab:  * under the License.
1:72345ab:  */
1:910fec0: package org.apache.aries.util.filesystem.impl;
33:f2492f7: 
1:f2492f7: import java.io.IOException;
1:f2492f7: import java.io.InputStream;
1:f2492f7: import java.util.ArrayList;
1:f2492f7: import java.util.Collections;
1:f2492f7: import java.util.HashMap;
1:f2492f7: import java.util.Iterator;
1:f2492f7: import java.util.LinkedHashMap;
1:f2492f7: import java.util.List;
1:f2492f7: import java.util.Map;
1:f2492f7: import java.util.zip.ZipEntry;
1:72345ab: import java.util.zip.ZipFile;
1:f2492f7: import java.util.zip.ZipInputStream;
1:72345ab: 
1:8ab18a7: import org.apache.aries.util.IORuntimeException;
1:910fec0: import org.apache.aries.util.filesystem.ICloseableDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IFile;
1:c6cb34d: import org.apache.aries.util.io.IOUtils;
1:f2492f7: 
1:f2492f7: public class NestedZipDirectory extends NestedZipFile implements IDirectory {
1:72345ab: 	public NestedZipDirectory(IFile archive, ZipEntry entry, NestedZipDirectory parent, NestedCloseableDirectory cache) {
1:72345ab: 		super(archive, entry, parent, cache);
5:f2492f7: 	}
1:8ab18a7: 
1:72345ab: 	public NestedZipDirectory(IFile archive, String pathInZip, NestedZipDirectory parent, NestedCloseableDirectory cache) {
1:72345ab: 		super(archive, pathInZip, parent, cache);
1:f2492f7: 	}
1:8ab18a7: 
1:f2492f7: 	public NestedZipDirectory(IFile archive) {
1:f2492f7: 		super(archive);
1:f2492f7: 	}
1:8ab18a7: 
1:72345ab: 	public NestedZipDirectory(NestedZipDirectory other, NestedCloseableDirectory cache) {
1:72345ab: 		super(other, cache);
1:72345ab: 	}
1:8ab18a7: 
1:f2492f7: 	public IDirectory convert() {
1:f2492f7: 		return this;
1:f2492f7: 	}
1:8ab18a7: 
1:f2492f7: 	public Iterator<IFile> iterator() {
1:f2492f7: 		return listFiles().iterator();
1:f2492f7: 	}
1:8ab18a7: 
1:f2492f7: 	public List<IFile> listFiles() {
1:f2492f7: 		return listFiles(false);
1:f2492f7: 	}
1:8ab18a7: 
1:f2492f7: 	public List<IFile> listAllFiles() {
1:f2492f7: 		return listFiles(true);
1:f2492f7: 	}
1:8ab18a7: 
1:f2492f7: 	private List<IFile> listFiles(boolean includeFilesInNestedSubdirs) {
1:f2492f7: 			Map<String, ZipEntry> entriesByName = new LinkedHashMap<String, ZipEntry>();
1:72345ab: 			for (ZipEntry entry : getAllEntries()) {
1:f2492f7: 				if (ZipDirectory.isInDir(getNameInZip(), entry, includeFilesInNestedSubdirs)) {
1:f2492f7: 					entriesByName.put(entry.getName(), entry);
1:f2492f7: 				}
1:f2492f7: 			}
1:72345ab: 
1:f2492f7: 			List<IFile> files = new ArrayList<IFile>();
1:f2492f7: 			for (ZipEntry ze : entriesByName.values()) {
1:f2492f7: 				NestedZipDirectory parent = includeFilesInNestedSubdirs ? buildParent(ze, entriesByName) : this;
1:72345ab: 				if (ze.isDirectory()) files.add(new NestedZipDirectory(archive, ze, parent, cache));
1:72345ab: 				else files.add(new NestedZipFile(archive, ze, parent, cache));
1:f2492f7: 			}
1:8ab18a7: 
1:f2492f7: 			return files;
1:72345ab: 	}
1:8ab18a7: 
1:72345ab: 	private List<? extends ZipEntry> getAllEntries() {
1:72345ab: 		if (cache != null && !!!cache.isClosed()) {
1:72345ab: 			return Collections.list(cache.getZipFile().entries());
1:72345ab: 		} else {
1:72345ab: 			ZipInputStream zis = null;
1:72345ab: 			try {
1:72345ab: 				zis = new ZipInputStream(archive.open());
1:8ab18a7: 
1:72345ab: 				List<ZipEntry> result = new ArrayList<ZipEntry>();
1:72345ab: 				ZipEntry entry = zis.getNextEntry();
1:72345ab: 				while (entry != null) {
1:72345ab: 					result.add(entry);
1:72345ab: 					entry = zis.getNextEntry();
1:72345ab: 				}
1:8ab18a7: 
1:8ab18a7: 				return result;
1:72345ab: 			} catch (IOException e) {
1:8ab18a7: 				throw new IORuntimeException("IOException reading nested ZipFile", e);
1:72345ab: 			} finally {
1:72345ab: 				IOUtils.close(zis);
1:8ab18a7: 			}
1:72345ab: 		}
1:72345ab: 	}
1:8ab18a7: 
1:f2492f7: 	private NestedZipDirectory buildParent(ZipEntry entry, Map<String,ZipEntry> entries) {
1:f2492f7: 		NestedZipDirectory result = this;
1:8ab18a7: 
1:f2492f7: 		String path = entry.getName().substring(getNameInZip().length());
1:f2492f7: 		String[] segments = path.split("/");
1:8ab18a7: 
1:f2492f7: 		if (segments != null && segments.length > 1) {
1:f2492f7: 			StringBuilder entryPath = new StringBuilder(getNameInZip());
1:f2492f7: 			for (int i=0; i<segments.length-1; i++) {
1:f2492f7: 				String p = segments[i];
1:f2492f7: 				entryPath.append(p).append("/");
1:f2492f7: 				ZipEntry ze = entries.get(entryPath.toString());
1:8ab18a7: 
2:f2492f7: 				if (ze != null) {
1:72345ab: 					result = new NestedZipDirectory(archive, ze, result, cache);
2:f2492f7: 				} else {
1:72345ab: 					result = new NestedZipDirectory(archive, entryPath.toString(), result, cache);
1:f2492f7: 				}
1:f2492f7: 			}
1:f2492f7: 		}
1:72345ab: 
1:72345ab: 		return result;
1:f2492f7: 	}
1:72345ab: 
1:f2492f7: 	public IFile getFile(String name) {
1:72345ab: 		Map<String,ZipEntry> entries = new HashMap<String, ZipEntry>();
1:72345ab: 		ZipEntry ze;
1:72345ab: 
1:72345ab: 		if (cache != null && !!!cache.isClosed()) {
1:72345ab: 			ZipFile zip = cache.getZipFile();
1:72345ab: 
1:72345ab: 			String[] segments = name.split("/");
1:72345ab: 			StringBuilder path = new StringBuilder();
1:72345ab: 			for (String s : segments) {
1:72345ab: 				path.append(s).append('/');
1:72345ab: 				ZipEntry p = zip.getEntry(path.toString());
1:72345ab: 				if (p != null) entries.put(path.toString(), p);
1:72345ab: 			}
1:8ab18a7: 
1:72345ab: 			ze = zip.getEntry(name);
1:8ab18a7: 
1:72345ab: 		} else {
1:72345ab: 			ZipInputStream zis = null;
1:8ab18a7: 
1:72345ab: 			try {
1:72345ab: 				zis = new ZipInputStream(archive.open());
1:72345ab: 
1:f2492f7: 				ze = zis.getNextEntry();
1:8ab18a7: 
1:72345ab: 				while (ze != null && !!!ze.getName().equals(name)) {
1:72345ab: 					if (name.startsWith(ze.getName())) entries.put(ze.getName(), ze);
1:8ab18a7: 
1:72345ab: 					ze = zis.getNextEntry();
1:72345ab: 				}
1:72345ab: 			} catch (IOException e) {
1:8ab18a7: 				throw new IORuntimeException("IOException reading nested ZipFile", e);
1:72345ab: 			} finally {
1:72345ab: 				IOUtils.close(zis);
1:72345ab: 			}
1:f2492f7: 		}
1:8ab18a7: 
1:72345ab: 		if (ze != null) {
1:72345ab: 			NestedZipDirectory parent = buildParent(ze, entries);
1:72345ab: 			if (ze.isDirectory()) return new NestedZipDirectory(archive, ze, parent, cache);
1:72345ab: 			else return new NestedZipFile(archive, ze, parent, cache);
1:72345ab: 		} else {
1:72345ab: 			return null;
1:f2492f7: 		}
1:f2492f7: 	}
1:72345ab: 
1:72345ab: 
1:f2492f7: 	public boolean isDirectory() {
1:f2492f7: 		return true;
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	public InputStream open() throws IOException, UnsupportedOperationException {
1:f2492f7: 		throw new UnsupportedOperationException();
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	public boolean isFile() {
1:f2492f7: 		return false;
1:72345ab: 	}
1:72345ab: 
1:f2492f7: 	public boolean isRoot() {
1:f2492f7: 		return false;
1:f2492f7: 	}
1:f2492f7: 
1:72345ab: 	public ICloseableDirectory toCloseable() {
1:72345ab: 		try {
1:8ab18a7: 			return new NestedCloseableDirectory(archive, this);
1:72345ab: 		} catch (IOException e) {
1:8ab18a7: 			throw new IORuntimeException("Exception while creating extracted version of nested zip file", e);
1:8ab18a7: 		}
1:72345ab: 	}
1:f2492f7: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:8ab18a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.IORuntimeException;
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 				return result;
1: 				throw new IORuntimeException("IOException reading nested ZipFile", e);
1: 		}
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 				throw new IORuntimeException("IOException reading nested ZipFile", e);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 			return new NestedCloseableDirectory(archive, this);
1: 			throw new IORuntimeException("Exception while creating extracted version of nested zip file", e);
1: 		}
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:f8e6603
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.io.IOUtils;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.ICloseableDirectory;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
0: import org.apache.aries.util.filesystem.IOUtils;
0: 	private static final Logger logger = LoggerFactory.getLogger(NestedZipDirectory.class.getName());
commit:72345ab
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1: import java.util.zip.ZipFile;
0: import org.apache.aries.application.filesystem.ICloseableDirectory;
/////////////////////////////////////////////////////////////////////////
1: 	public NestedZipDirectory(IFile archive, ZipEntry entry, NestedZipDirectory parent, NestedCloseableDirectory cache) {
1: 		super(archive, entry, parent, cache);
1: 	public NestedZipDirectory(IFile archive, String pathInZip, NestedZipDirectory parent, NestedCloseableDirectory cache) {
1: 		super(archive, pathInZip, parent, cache);
1: 	public NestedZipDirectory(NestedZipDirectory other, NestedCloseableDirectory cache) {
1: 		super(other, cache);
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 			for (ZipEntry entry : getAllEntries()) {
1: 				if (ze.isDirectory()) files.add(new NestedZipDirectory(archive, ze, parent, cache));
1: 				else files.add(new NestedZipFile(archive, ze, parent, cache));
1: 	}
1: 	
1: 	private List<? extends ZipEntry> getAllEntries() {
1: 		if (cache != null && !!!cache.isClosed()) {
1: 			return Collections.list(cache.getZipFile().entries());
1: 		} else {
1: 			ZipInputStream zis = null;
1: 			try {
1: 				zis = new ZipInputStream(archive.open());
1: 				
1: 				List<ZipEntry> result = new ArrayList<ZipEntry>();
1: 				ZipEntry entry = zis.getNextEntry();
1: 				while (entry != null) {
1: 					result.add(entry);
1: 					entry = zis.getNextEntry();
1: 				}
1: 				
1: 				return result;				
1: 			} catch (IOException e) {
0: 				logger.error("IOException reading nested ZipFile", e);
0: 				return Collections.emptyList();
1: 			} finally {
1: 				IOUtils.close(zis);
1: 			}
1: 		}		
/////////////////////////////////////////////////////////////////////////
1: 					result = new NestedZipDirectory(archive, ze, result, cache);
1: 					result = new NestedZipDirectory(archive, entryPath.toString(), result, cache);
/////////////////////////////////////////////////////////////////////////
1: 		Map<String,ZipEntry> entries = new HashMap<String, ZipEntry>();
1: 		ZipEntry ze;
1: 
1: 		if (cache != null && !!!cache.isClosed()) {
1: 			ZipFile zip = cache.getZipFile();
1: 
1: 			String[] segments = name.split("/");
1: 			StringBuilder path = new StringBuilder();
1: 			for (String s : segments) {
1: 				path.append(s).append('/');
1: 				ZipEntry p = zip.getEntry(path.toString());
1: 				if (p != null) entries.put(path.toString(), p);
1: 			}
1: 			ze = zip.getEntry(name);
1: 		} else {
1: 			ZipInputStream zis = null;
1: 			try {
1: 				zis = new ZipInputStream(archive.open());
1: 				
1: 				while (ze != null && !!!ze.getName().equals(name)) {
1: 					if (name.startsWith(ze.getName())) entries.put(ze.getName(), ze);
1: 					
1: 					ze = zis.getNextEntry();
1: 				}
1: 			} catch (IOException e) {
0: 				logger.error("IOException reading nested ZipFile", e);
1: 			} finally {
1: 				IOUtils.close(zis);
1: 		}
1: 		
1: 		if (ze != null) {
1: 			NestedZipDirectory parent = buildParent(ze, entries);
1: 			if (ze.isDirectory()) return new NestedZipDirectory(archive, ze, parent, cache);
1: 			else return new NestedZipFile(archive, ze, parent, cache);
1: 		} else {
/////////////////////////////////////////////////////////////////////////
0: 	@Override
1: 	public ICloseableDirectory toCloseable() {
1: 		try {
0: 			return new NestedCloseableDirectory(archive, this);			
1: 		} catch (IOException e) {
0: 			logger.error("Exception while creating extracted version of nested zip file", e);
1: 			return null;
1: 		}		
1: 	}
1: 
commit:f2492f7
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.application.utils.filesystem.impl;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.LinkedHashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipInputStream;
1: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.utils.filesystem.IOUtils;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: public class NestedZipDirectory extends NestedZipFile implements IDirectory {
1: 	
0: 	private static final Logger logger = LoggerFactory.getLogger("org.apache.aries.application.utils");
1: 	
0: 	public NestedZipDirectory(IFile archive, ZipEntry entry, NestedZipDirectory parent) {
0: 		super(archive, entry, parent);
1: 	}
1: 	
0: 	public NestedZipDirectory(IFile archive, String pathInZip, NestedZipDirectory parent) {
0: 		super(archive, pathInZip, parent);
1: 	}
1: 	
1: 	public NestedZipDirectory(IFile archive) {
1: 		super(archive);
1: 	}
1: 	
0: 	@Override
1: 	public IDirectory convert() {
1: 		return this;
1: 	}
1: 
0: 	@Override
1: 	public Iterator<IFile> iterator() {
1: 		return listFiles().iterator();
1: 	}
1: 
0: 	@Override
1: 	public List<IFile> listFiles() {
1: 		return listFiles(false);
1: 	}
1: 
0: 	@Override
1: 	public List<IFile> listAllFiles() {
1: 		return listFiles(true);
1: 	}
1: 	
1: 	private List<IFile> listFiles(boolean includeFilesInNestedSubdirs) {
0: 		ZipInputStream zis = null;
1: 		
0: 		try {
0: 			zis = new ZipInputStream(archive.open());
1: 			
0: 			ZipEntry entry = zis.getNextEntry();
1: 			
1: 			Map<String, ZipEntry> entriesByName = new LinkedHashMap<String, ZipEntry>();
0: 			while (entry != null) {
1: 				if (ZipDirectory.isInDir(getNameInZip(), entry, includeFilesInNestedSubdirs)) {
1: 					entriesByName.put(entry.getName(), entry);
1: 				}
0: 				entry = zis.getNextEntry();
1: 			}
1: 
1: 			List<IFile> files = new ArrayList<IFile>();
1: 			for (ZipEntry ze : entriesByName.values()) {
1: 				NestedZipDirectory parent = includeFilesInNestedSubdirs ? buildParent(ze, entriesByName) : this;
0: 				if (ze.isDirectory()) files.add(new NestedZipDirectory(archive, ze, parent));
0: 				else files.add(new NestedZipFile(archive, ze, parent));
1: 			}
1: 			
1: 			return files;
1: 			
0: 		} catch (IOException e) {
0: 			logger.error("IOException reading nested ZipFile", e);
0: 			return Collections.emptyList();
0: 		} finally {
0: 			IOUtils.close(zis);
1: 		}
1: 	}
1: 	
1: 	private NestedZipDirectory buildParent(ZipEntry entry, Map<String,ZipEntry> entries) {
1: 		NestedZipDirectory result = this;
1: 		
1: 		String path = entry.getName().substring(getNameInZip().length());
1: 		String[] segments = path.split("/");
1: 		
1: 		if (segments != null && segments.length > 1) {
1: 			StringBuilder entryPath = new StringBuilder(getNameInZip());
1: 			for (int i=0; i<segments.length-1; i++) {
1: 				String p = segments[i];
1: 				entryPath.append(p).append("/");
1: 				ZipEntry ze = entries.get(entryPath.toString());
1: 				
1: 				if (ze != null) {
0: 					result = new NestedZipDirectory(archive, ze, result);
1: 				} else {
0: 					result = new NestedZipDirectory(archive, entryPath.toString(), result);
1: 				}
1: 			}
1: 		}
1: 		
0: 		return result;
1: 	}
1: 
0: 	@Override
1: 	public IFile getFile(String name) {
0: 		ZipInputStream zis = null;
1: 		
0: 		try {
0: 			zis = new ZipInputStream(archive.open());
1: 			
0: 			Map<String,ZipEntry> entries = new HashMap<String, ZipEntry>();
1: 			
0: 			ZipEntry ze = zis.getNextEntry();
1: 			
0: 			while (ze != null && !!!ze.getName().equals(name)) {
0: 				if (name.startsWith(ze.getName())) entries.put(ze.getName(), ze);
1: 				
1: 				ze = zis.getNextEntry();
1: 			}
1: 			
1: 			if (ze != null) {
0: 				NestedZipDirectory parent = buildParent(ze, entries);
0: 				if (ze.isDirectory()) return new NestedZipDirectory(archive, ze, parent);
0: 				else return new NestedZipFile(archive, ze, parent);
1: 			} else {
0: 				return null;
1: 			}
1: 			
0: 		} catch (IOException e) {
0: 			logger.error("IOException reading nested ZipFile", e);
0: 			return null;
0: 		} finally {
0: 			IOUtils.close(zis);
1: 		}
1: 	}
1: 
1: 	
0: 	@Override
1: 	public boolean isDirectory() {
1: 		return true;
1: 	}
1: 
0: 	@Override
1: 	public InputStream open() throws IOException, UnsupportedOperationException {
1: 		throw new UnsupportedOperationException();
1: 	}
1: 
0: 	@Override
1: 	public boolean isFile() {
1: 		return false;
1: 	}
1: 
0: 	@Override
1: 	public boolean isRoot() {
1: 		return false;
1: 	}
1: 
1: }
============================================================================