1:8ad6b99: /*
1:8ad6b99:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ad6b99:  * or more contributor license agreements.  See the NOTICE file
1:8ad6b99:  * distributed with this work for additional information
1:8ad6b99:  * regarding copyright ownership.  The ASF licenses this file
1:8ad6b99:  * to you under the Apache License, Version 2.0 (the
1:8ad6b99:  * "License"); you may not use this file except in compliance
1:8ad6b99:  * with the License.  You may obtain a copy of the License at
1:8ad6b99:  *
1:8ad6b99:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8ad6b99:  *
1:8ad6b99:  * Unless required by applicable law or agreed to in writing,
1:8ad6b99:  * software distributed under the License is distributed on an
1:8ad6b99:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8ad6b99:  * KIND, either express or implied.  See the License for the
1:8ad6b99:  * specific language governing permissions and limitations
1:8ad6b99:  * under the License.
1:8ad6b99:  */
1:8ad6b99: package org.apache.aries.subsystem.itests.defect;
1:8ad6b99: 
1:8ad6b99: import static org.junit.Assert.assertEquals;
1:8ad6b99: import static org.junit.Assert.assertNotNull;
1:8ad6b99: 
1:8ad6b99: import java.io.ByteArrayOutputStream;
1:8ad6b99: import java.io.IOException;
1:8ad6b99: import java.util.HashMap;
1:8ad6b99: import java.util.Map;
1:8ad6b99: import java.util.jar.Attributes;
1:8ad6b99: import java.util.jar.JarOutputStream;
1:8ad6b99: import java.util.jar.Manifest;
1:8ad6b99: 
1:8ad6b99: import org.apache.aries.subsystem.itests.Header;
1:8ad6b99: import org.apache.aries.subsystem.itests.SubsystemTest;
1:8ad6b99: import org.apache.aries.subsystem.itests.util.TestCapability;
1:8ad6b99: import org.apache.aries.subsystem.itests.util.TestRepository;
1:8ad6b99: import org.apache.aries.subsystem.itests.util.TestRepositoryContent;
1:8ad6b99: import org.apache.aries.subsystem.itests.util.TestRequirement;
1:8ad6b99: import org.junit.Before;
1:8ad6b99: import org.junit.Test;
1:8ad6b99: import org.osgi.framework.Bundle;
1:8ad6b99: import org.osgi.framework.Constants;
1:8ad6b99: import org.osgi.framework.Version;
1:8ad6b99: import org.osgi.framework.namespace.HostNamespace;
1:8ad6b99: import org.osgi.framework.namespace.IdentityNamespace;
1:8ad6b99: import org.osgi.framework.wiring.BundleRevision;
1:8ad6b99: import org.osgi.resource.Capability;
1:8ad6b99: import org.osgi.resource.Resource;
1:8ad6b99: import org.osgi.service.repository.Repository;
1:8ad6b99: import org.osgi.service.subsystem.Subsystem;
1:8ad6b99: import org.osgi.service.subsystem.SubsystemConstants;
1:8ad6b99: 
1:8ad6b99: /*
1:8ad6b99:  * https://issues.apache.org/jira/browse/ARIES-1368
1:9c09993:  * 
1:9c09993:  * Fragment resources receive the osgi.identity capability type of osgi.bundle but should receive osgi.fragment. 
1:9c09993:  * Also, osgi.wiring.host capabilities and requirements are not computed for bundle or fragment resources.
1:8ad6b99:  */
1:8ad6b99: public class Aries1368Test extends SubsystemTest {
1:8ad6b99:     /*
1:8ad6b99:      * Subsystem-SymbolicName: application.a.esa
1:8ad6b99:      * Subsystem-Content: bundle.a.jar;type=osgi.bundle, fragment.a.jar;type=osgi.fragment
1:8ad6b99:      * 
1:8ad6b99:      * Included in archive:
1:8ad6b99:      *      bundle.a.jar
1:8ad6b99:      *      fragment.a.jar
1:8ad6b99:      */
1:8ad6b99:     private static final String APPLICATION_A = "application.a.esa";
1:8ad6b99:     /*
1:8ad6b99:      * Subsystem-SymbolicName: application.b.esa
1:8ad6b99:      * Subsystem-Content: bundle.a.jar;type=osgi.bundle, fragment.a.jar;type=osgi.fragment
1:8ad6b99:      * 
1:8ad6b99:      * Included in archive:
1:8ad6b99:      *      bundle.a.jar
1:8ad6b99:      * 
1:8ad6b99:      * Included in remote repository:
1:8ad6b99:      *      fragment.a.jar
1:8ad6b99:      */
1:8ad6b99:     private static final String APPLICATION_B = "application.b.esa";
1:8ad6b99: 	/*
1:8ad6b99: 	 * Bundle-SymbolicName: bundle.a.jar
1:8ad6b99: 	 */
1:8ad6b99: 	private static final String BUNDLE_A = "bundle.a.jar";
1:8ad6b99: 	/*
1:8ad6b99: 	 * Bundle-SymbolicName: fragment.a.jar
1:8ad6b99: 	 * Fragment-Host: bundle.a.jar
1:8ad6b99: 	 */
1:8ad6b99: 	private static final String FRAGMENT_A = "fragment.a.jar";
1:8ad6b99: 	
1:8ad6b99: 	private static boolean createdTestFiles;
1:8ad6b99: 	
1:8ad6b99: 	@Before
1:8ad6b99: 	public void createTestFiles() throws Exception {
1:8ad6b99: 		if (createdTestFiles)
1:8ad6b99: 			return;
1:8ad6b99: 		createBundleA();
1:8ad6b99: 		createFragmentA();
1:8ad6b99: 		createApplicationA();
1:8ad6b99: 		createApplicationB();
1:8ad6b99: 		createdTestFiles = true;
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	private void createBundleA() throws IOException {
1:8ad6b99: 		createBundle(name(BUNDLE_A));
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	private void createFragmentA() throws IOException {
1:8ad6b99: 		createBundle(name(FRAGMENT_A), new Header(Constants.FRAGMENT_HOST, BUNDLE_A));
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	private void createApplicationA() throws IOException {
1:8ad6b99:         createApplicationAManifest();
1:8ad6b99:         createSubsystem(APPLICATION_A, BUNDLE_A, FRAGMENT_A);
1:8ad6b99:     }
1:8ad6b99:     
1:8ad6b99:     private void createApplicationAManifest() throws IOException {
1:8ad6b99:         Map<String, String> attributes = new HashMap<String, String>();
1:8ad6b99:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:8ad6b99:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ";type=osgi.bundle," + FRAGMENT_A + ";type=osgi.fragment");
1:8ad6b99:         createManifest(APPLICATION_A + ".mf", attributes);
1:8ad6b99:     }
1:8ad6b99:     
1:8ad6b99:     private void createApplicationB() throws IOException {
1:8ad6b99:         createApplicationBManifest();
1:8ad6b99:         createSubsystem(APPLICATION_B, BUNDLE_A);
1:8ad6b99:     }
1:8ad6b99:     
1:8ad6b99:     private void createApplicationBManifest() throws IOException {
1:8ad6b99:         Map<String, String> attributes = new HashMap<String, String>();
1:8ad6b99:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:8ad6b99:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ";type=osgi.bundle," + FRAGMENT_A + ";type=osgi.fragment");
1:8ad6b99:         createManifest(APPLICATION_B + ".mf", attributes);
1:8ad6b99:     }
1:8ad6b99:     
1:8ad6b99:     @Test
1:8ad6b99:     public void testApplicationWithFragmentInArchiveWithSubsystemContentHeaderWithType() throws Exception {
1:8ad6b99:         Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:8ad6b99:         try {
1:8ad6b99:             assertConstituents(3, applicationA);
1:8ad6b99:             startSubsystem(applicationA);
1:8ad6b99:             assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationA);
1:8ad6b99:             assertBundleState(Bundle.RESOLVED, FRAGMENT_A, applicationA);
1:8ad6b99:             Bundle bundle = context(applicationA).getBundleByName(FRAGMENT_A);
1:8ad6b99:             assertNotNull("Bundle not found: " + FRAGMENT_A, bundle);
1:8ad6b99:             Resource resource = bundle.adapt(BundleRevision.class);
1:8ad6b99:             Capability capability = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0);
1:8ad6b99:             assertEquals(
1:8ad6b99:                     "Wrong type", 
1:8ad6b99:                     IdentityNamespace.TYPE_FRAGMENT, 
1:8ad6b99:                     capability.getAttributes().get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE));
1:8ad6b99:         }
1:8ad6b99:         finally {
1:8ad6b99:             stopAndUninstallSubsystemSilently(applicationA);
1:8ad6b99:         }
1:8ad6b99:     }
1:8ad6b99:     
1:8ad6b99:     @Test
1:8ad6b99:     public void testApplicationWithFragmentInRepositoryWithSubsystemContentHeaderWithType() throws Exception {
1:8ad6b99:         Subsystem applicationB = installSubsystemFromFile(APPLICATION_B);
1:8ad6b99:         try {
1:8ad6b99:             assertConstituents(3, applicationB);
1:8ad6b99:             startSubsystem(applicationB);
1:8ad6b99:             assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationB);
1:8ad6b99:             assertBundleState(Bundle.RESOLVED, FRAGMENT_A, applicationB);
1:8ad6b99:             Bundle bundle = context(applicationB).getBundleByName(FRAGMENT_A);
1:8ad6b99:             assertNotNull("Bundle not found: " + FRAGMENT_A, bundle);
1:8ad6b99:             Resource resource = bundle.adapt(BundleRevision.class);
1:8ad6b99:             Capability capability = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0);
1:8ad6b99:             String type = String.valueOf(capability.getAttributes().get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE));
1:8ad6b99:             assertEquals("Wrong type", IdentityNamespace.TYPE_FRAGMENT, type);
1:8ad6b99:         }
1:8ad6b99:         finally {
1:8ad6b99:             stopAndUninstallSubsystemSilently(applicationB);
1:8ad6b99:         }
1:8ad6b99:     }
1:8ad6b99:     
1:8ad6b99:     private Repository createTestRepository() throws IOException {
1:8ad6b99:         return new TestRepository.Builder()
1:8ad6b99:         .resource(createTestBundleFragmentResource())
1:8ad6b99:         .build();
1:8ad6b99:     }
1:8ad6b99:     
1:8ad6b99:     private byte[] createTestBundleFragmentContent() throws IOException {
1:8ad6b99:         Manifest manifest = new Manifest();
1:8ad6b99:         manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:8ad6b99:         manifest.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, FRAGMENT_A);
1:8ad6b99:         manifest.getMainAttributes().putValue(Constants.FRAGMENT_HOST, BUNDLE_A);
1:8ad6b99:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8ad6b99:         JarOutputStream jos = new JarOutputStream(baos, manifest);
1:8ad6b99:         jos.close();
1:8ad6b99:         return baos.toByteArray();
1:8ad6b99:     }
1:8ad6b99:     
1:8ad6b99:     private Resource createTestBundleFragmentResource() throws IOException {
1:8ad6b99:         return new TestRepositoryContent.Builder()
1:8ad6b99:         .capability(
1:8ad6b99:                 new TestCapability.Builder()
1:8ad6b99:                     .namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:8ad6b99:                     .attribute(IdentityNamespace.IDENTITY_NAMESPACE, FRAGMENT_A)
1:8ad6b99:                     .attribute(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, IdentityNamespace.TYPE_FRAGMENT)
1:8ad6b99:                     .attribute(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, Version.emptyVersion))
1:8ad6b99:         .requirement(
1:8ad6b99:                 new TestRequirement.Builder()
1:8ad6b99:                     .namespace(HostNamespace.HOST_NAMESPACE)
1:8ad6b99:                     .attribute(HostNamespace.HOST_NAMESPACE, BUNDLE_A))
1:8ad6b99:         .content(createTestBundleFragmentContent())
1:8ad6b99:         .build();
1:8ad6b99:     }
1:8ad6b99:     
1:8ad6b99:     @Override
1:8ad6b99:     public void setUp() throws Exception {
1:8ad6b99:         super.setUp();
1:8ad6b99:         try {
1:8ad6b99:             serviceRegistrations.add(
1:8ad6b99:                     bundleContext.registerService(
1:8ad6b99:                             Repository.class, 
1:8ad6b99:                             createTestRepository(), 
1:8ad6b99:                             null));
1:8ad6b99:         }
1:8ad6b99:         catch (IOException e) {
1:8ad6b99:             throw new RuntimeException(e);
1:8ad6b99:         }
1:8ad6b99:     }
1:8ad6b99: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:9c09993
/////////////////////////////////////////////////////////////////////////
1:  * 
1:  * Fragment resources receive the osgi.identity capability type of osgi.bundle but should receive osgi.fragment. 
1:  * Also, osgi.wiring.host capabilities and requirements are not computed for bundle or fragment resources.
commit:8ad6b99
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: 
1: import org.apache.aries.subsystem.itests.Header;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.apache.aries.subsystem.itests.util.TestCapability;
1: import org.apache.aries.subsystem.itests.util.TestRepository;
1: import org.apache.aries.subsystem.itests.util.TestRepositoryContent;
1: import org.apache.aries.subsystem.itests.util.TestRequirement;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.namespace.HostNamespace;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.repository.Repository;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1368
1:  */
1: public class Aries1368Test extends SubsystemTest {
1:     /*
1:      * Subsystem-SymbolicName: application.a.esa
1:      * Subsystem-Content: bundle.a.jar;type=osgi.bundle, fragment.a.jar;type=osgi.fragment
1:      * 
1:      * Included in archive:
1:      *      bundle.a.jar
1:      *      fragment.a.jar
1:      */
1:     private static final String APPLICATION_A = "application.a.esa";
1:     /*
1:      * Subsystem-SymbolicName: application.b.esa
1:      * Subsystem-Content: bundle.a.jar;type=osgi.bundle, fragment.a.jar;type=osgi.fragment
1:      * 
1:      * Included in archive:
1:      *      bundle.a.jar
1:      * 
1:      * Included in remote repository:
1:      *      fragment.a.jar
1:      */
1:     private static final String APPLICATION_B = "application.b.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: fragment.a.jar
1: 	 * Fragment-Host: bundle.a.jar
1: 	 */
1: 	private static final String FRAGMENT_A = "fragment.a.jar";
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createBundleA();
1: 		createFragmentA();
1: 		createApplicationA();
1: 		createApplicationB();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A));
1: 	}
1: 	
1: 	private void createFragmentA() throws IOException {
1: 		createBundle(name(FRAGMENT_A), new Header(Constants.FRAGMENT_HOST, BUNDLE_A));
1: 	}
1: 	
1: 	private void createApplicationA() throws IOException {
1:         createApplicationAManifest();
1:         createSubsystem(APPLICATION_A, BUNDLE_A, FRAGMENT_A);
1:     }
1:     
1:     private void createApplicationAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ";type=osgi.bundle," + FRAGMENT_A + ";type=osgi.fragment");
1:         createManifest(APPLICATION_A + ".mf", attributes);
1:     }
1:     
1:     private void createApplicationB() throws IOException {
1:         createApplicationBManifest();
1:         createSubsystem(APPLICATION_B, BUNDLE_A);
1:     }
1:     
1:     private void createApplicationBManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ";type=osgi.bundle," + FRAGMENT_A + ";type=osgi.fragment");
1:         createManifest(APPLICATION_B + ".mf", attributes);
1:     }
1:     
1:     @Test
1:     public void testApplicationWithFragmentInArchiveWithSubsystemContentHeaderWithType() throws Exception {
1:         Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:         try {
1:             assertConstituents(3, applicationA);
1:             startSubsystem(applicationA);
1:             assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationA);
1:             assertBundleState(Bundle.RESOLVED, FRAGMENT_A, applicationA);
1:             Bundle bundle = context(applicationA).getBundleByName(FRAGMENT_A);
1:             assertNotNull("Bundle not found: " + FRAGMENT_A, bundle);
1:             Resource resource = bundle.adapt(BundleRevision.class);
1:             Capability capability = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0);
1:             assertEquals(
1:                     "Wrong type", 
1:                     IdentityNamespace.TYPE_FRAGMENT, 
1:                     capability.getAttributes().get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE));
1:         }
1:         finally {
1:             stopAndUninstallSubsystemSilently(applicationA);
1:         }
1:     }
1:     
1:     @Test
1:     public void testApplicationWithFragmentInRepositoryWithSubsystemContentHeaderWithType() throws Exception {
1:         Subsystem applicationB = installSubsystemFromFile(APPLICATION_B);
1:         try {
1:             assertConstituents(3, applicationB);
1:             startSubsystem(applicationB);
1:             assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationB);
1:             assertBundleState(Bundle.RESOLVED, FRAGMENT_A, applicationB);
1:             Bundle bundle = context(applicationB).getBundleByName(FRAGMENT_A);
1:             assertNotNull("Bundle not found: " + FRAGMENT_A, bundle);
1:             Resource resource = bundle.adapt(BundleRevision.class);
1:             Capability capability = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0);
1:             String type = String.valueOf(capability.getAttributes().get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE));
1:             assertEquals("Wrong type", IdentityNamespace.TYPE_FRAGMENT, type);
1:         }
1:         finally {
1:             stopAndUninstallSubsystemSilently(applicationB);
1:         }
1:     }
1:     
1:     private Repository createTestRepository() throws IOException {
1:         return new TestRepository.Builder()
1:         .resource(createTestBundleFragmentResource())
1:         .build();
1:     }
1:     
1:     private byte[] createTestBundleFragmentContent() throws IOException {
1:         Manifest manifest = new Manifest();
1:         manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:         manifest.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, FRAGMENT_A);
1:         manifest.getMainAttributes().putValue(Constants.FRAGMENT_HOST, BUNDLE_A);
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         JarOutputStream jos = new JarOutputStream(baos, manifest);
1:         jos.close();
1:         return baos.toByteArray();
1:     }
1:     
1:     private Resource createTestBundleFragmentResource() throws IOException {
1:         return new TestRepositoryContent.Builder()
1:         .capability(
1:                 new TestCapability.Builder()
1:                     .namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:                     .attribute(IdentityNamespace.IDENTITY_NAMESPACE, FRAGMENT_A)
1:                     .attribute(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, IdentityNamespace.TYPE_FRAGMENT)
1:                     .attribute(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, Version.emptyVersion))
1:         .requirement(
1:                 new TestRequirement.Builder()
1:                     .namespace(HostNamespace.HOST_NAMESPACE)
1:                     .attribute(HostNamespace.HOST_NAMESPACE, BUNDLE_A))
1:         .content(createTestBundleFragmentContent())
1:         .build();
1:     }
1:     
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setUp();
1:         try {
1:             serviceRegistrations.add(
1:                     bundleContext.registerService(
1:                             Repository.class, 
1:                             createTestRepository(), 
1:                             null));
1:         }
1:         catch (IOException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: }
============================================================================