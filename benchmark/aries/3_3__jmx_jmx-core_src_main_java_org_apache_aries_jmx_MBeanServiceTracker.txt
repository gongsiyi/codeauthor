1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx;
6:fdf3952: 
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.agent.JMXAgentContext;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.service.log.LogService;
1:fdf3952: import org.osgi.util.tracker.ServiceTracker;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>This class <tt>MBeanServiceTracker</tt> represents {@link ServiceTracker} for {@link MBeanServer}'s
1:fdf3952:  * registered as services.
1:fdf3952:  * Tracking all registered MBeanServers in ServiceRegistry.</p>
1:fdf3952:  * @see ServiceTracker
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:0a8778f: @SuppressWarnings({"rawtypes", "unchecked"})
1:fdf3952: public class MBeanServiceTracker extends ServiceTracker {
1:fdf3952: 
1:fdf3952:     private JMXAgentContext agentContext;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new MBeanServiceTracker.
1:fdf3952:      * @param agentContext agent context.
1:fdf3952:      */
1:0a8778f: 	public MBeanServiceTracker(JMXAgentContext agentContext) {
1:fdf3952:         super(agentContext.getBundleContext(), MBeanServer.class.getName(), null);
1:fdf3952:         this.agentContext = agentContext;
3:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * <p>Register MBeans using {@link JMXAgentContext#registerMBeans(MBeanServer)} 
1:fdf3952:      * when MBeanServer service is discovered</p> 
1:fdf3952:      * @see ServiceTracker#addingService(ServiceReference)
1:fdf3952:      */
1:fdf3952:     public Object addingService(final ServiceReference reference) {
1:f5398b2:         final MBeanServer mbeanServer = (MBeanServer) super.addingService(reference);
1:fdf3952:         Logger logger = agentContext.getLogger();
1:fdf3952:         logger.log(LogService.LOG_DEBUG, "Discovered MBean server " + mbeanServer);
1:f5398b2:         agentContext.registerMBeans(mbeanServer);
1:f5398b2:         return mbeanServer;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * <p>Unregister MBeans using {@link JMXAgentContext#unregisterMBeans(MBeanServer)} 
1:fdf3952:      * when MBeanServer service is removed (unregistered from ServiceRegistry) or
1:fdf3952:      * tracker is closed</p> 
1:fdf3952:      * @see ServiceTracker#removedService(ServiceReference, Object)
1:fdf3952:      */
1:fdf3952:     public void removedService(final ServiceReference reference, Object service) {
1:f5398b2:         final MBeanServer mbeanServer = (MBeanServer) service;
1:fdf3952:         Logger logger = agentContext.getLogger();
1:f5398b2:         logger.log(LogService.LOG_DEBUG, "MBean server " + mbeanServer+ " is unregistered from ServiceRegistry");
1:f5398b2:         agentContext.unregisterMBeans(mbeanServer);
1:fdf3952:         super.removedService(reference, service);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings({"rawtypes", "unchecked"})
/////////////////////////////////////////////////////////////////////////
1: 	public MBeanServiceTracker(JMXAgentContext agentContext) {
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f5398b2
/////////////////////////////////////////////////////////////////////////
1:         final MBeanServer mbeanServer = (MBeanServer) super.addingService(reference);
1:         agentContext.registerMBeans(mbeanServer);
1:         return mbeanServer;
/////////////////////////////////////////////////////////////////////////
1:         final MBeanServer mbeanServer = (MBeanServer) service;
1:         logger.log(LogService.LOG_DEBUG, "MBean server " + mbeanServer+ " is unregistered from ServiceRegistry");
1:         agentContext.unregisterMBeans(mbeanServer);
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx;
1: 
0: import java.util.concurrent.ExecutorService;
1: 
1: import javax.management.MBeanServer;
1: 
1: import org.apache.aries.jmx.agent.JMXAgentContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.log.LogService;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: /**
1:  * <p>This class <tt>MBeanServiceTracker</tt> represents {@link ServiceTracker} for {@link MBeanServer}'s
1:  * registered as services.
1:  * Tracking all registered MBeanServers in ServiceRegistry.</p>
1:  * @see ServiceTracker
1:  * @version $Rev$ $Date$
1:  */
1: public class MBeanServiceTracker extends ServiceTracker {
1: 
1:     private JMXAgentContext agentContext;
1: 
1:     /**
1:      * Constructs new MBeanServiceTracker.
1:      * @param agentContext agent context.
1:      */
0:     public MBeanServiceTracker(JMXAgentContext agentContext) {
1:         super(agentContext.getBundleContext(), MBeanServer.class.getName(), null);
1:         this.agentContext = agentContext;
1:     }
1: 
1:     /**
1:      * <p>Register MBeans using {@link JMXAgentContext#registerMBeans(MBeanServer)} 
1:      * when MBeanServer service is discovered</p> 
1:      * @see ServiceTracker#addingService(ServiceReference)
1:      */
1:     public Object addingService(final ServiceReference reference) {
0:         final MBeanServer mbeanServer = (MBeanServer) context.getService(reference);
1:         Logger logger = agentContext.getLogger();
1:         logger.log(LogService.LOG_DEBUG, "Discovered MBean server " + mbeanServer);
0:         ExecutorService executor = agentContext.getRegistrationExecutor();
0:         executor.submit(new Runnable() {
1: 
0:             public void run() {
0:                 agentContext.registerMBeans(mbeanServer);
1: 
1:             }
0:         });
1: 
0:         return super.addingService(reference);
1:     }
1: 
1:     /**
1:      * <p>Unregister MBeans using {@link JMXAgentContext#unregisterMBeans(MBeanServer)} 
1:      * when MBeanServer service is removed (unregistered from ServiceRegistry) or
1:      * tracker is closed</p> 
1:      * @see ServiceTracker#removedService(ServiceReference, Object)
1:      */
1:     public void removedService(final ServiceReference reference, Object service) {
0:         final MBeanServer mbeanServer = (MBeanServer) context.getService(reference);
1:         Logger logger = agentContext.getLogger();
0:         logger.log(LogService.LOG_DEBUG, "MBean server " + mbeanServer+ " is unregistered from SeviceRegistry");
0:         ExecutorService executor = agentContext.getRegistrationExecutor();
0:         executor.submit(new Runnable() {
1: 
0:             public void run() {
0:                 agentContext.unregisterMBeans(mbeanServer);
1:             }
0:         });
1:         super.removedService(reference, service);
1:     }
1: 
1:     
1: }
============================================================================