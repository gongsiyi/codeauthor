1:6e2d69a: /**
1:6e2d69a:  * Licensed to the Apache Software Foundation (ASF) under one
1:6e2d69a:  * or more contributor license agreements.  See the NOTICE file
1:6e2d69a:  * distributed with this work for additional information
1:6e2d69a:  * regarding copyright ownership.  The ASF licenses this file
1:6e2d69a:  * to you under the Apache License, Version 2.0 (the
1:6e2d69a:  * "License"); you may not use this file except in compliance
1:6e2d69a:  * with the License.  You may obtain a copy of the License at
1:6e2d69a:  *
1:6e2d69a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6e2d69a:  *
1:6e2d69a:  * Unless required by applicable law or agreed to in writing,
1:6e2d69a:  * software distributed under the License is distributed on an
1:6e2d69a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6e2d69a:  * KIND, either express or implied.  See the License for the
1:6e2d69a:  * specific language governing permissions and limitations
1:6e2d69a:  * under the License.
1:6e2d69a:  */
1:6e2d69a: 
1:6e2d69a: package org.apache.aries.samples.bank.biz;
1:6e2d69a: 
1:6e2d69a: import org.apache.aries.samples.bank.api.AccountService;
1:6e2d69a: import org.apache.aries.samples.bank.api.AccountServicesToOutsideWorld;
1:6e2d69a: import org.apache.aries.samples.bank.api.ChequingAccountService;
1:6e2d69a: import org.apache.aries.samples.bank.api.Constants;
1:6e2d69a: import org.apache.aries.samples.bank.api.CreditCheckService;
1:6e2d69a: import org.apache.aries.samples.bank.api.LineOfCreditAccountService;
1:6e2d69a: 
1:6e2d69a: public class AccountServicesToOutsideWorldImpl implements AccountServicesToOutsideWorld {
1:6e2d69a: 
1:6e2d69a:   private ChequingAccountService _chequingAccountService;
1:6e2d69a:   private LineOfCreditAccountService _lineOfCreditAccountService;
1:6e2d69a:   private CreditCheckService _creditCheckService;
1:6e2d69a:   private double _riskThreshold;
1:6e2d69a: 
1:6e2d69a:   public void setChequingAccountService(ChequingAccountService c) {
1:6e2d69a:     _chequingAccountService = c;
1:6e2d69a:   }
1:6e2d69a: 
1:6e2d69a:   public void setLineOfCreditAccountService(LineOfCreditAccountService l) {
1:6e2d69a:     _lineOfCreditAccountService = l;
1:6e2d69a:   }
1:6e2d69a: 
1:6e2d69a:   public void setCreditCheckService(CreditCheckService c) {
1:6e2d69a:     _creditCheckService = c;
1:6e2d69a:   }
1:6e2d69a: 
1:6e2d69a:   public void setRiskThreshold(double r) {
1:6e2d69a:     _riskThreshold = r;
1:6e2d69a:   }
1:6e2d69a: 
1:6e2d69a:   private static final int NO_ACCOUNT = -1; 
1:6e2d69a: 
1:6e2d69a:   @Override
1:6e2d69a:   public int openChequingAccount(String name, int assets, int liabilities) {
1:6e2d69a:     int accountNumber = _chequingAccountService.open(name);
1:6e2d69a:     System.out.println("AccountAccessServiceImpl.openChequingAccount(" + name + "," + assets + ","
1:6e2d69a:         + liabilities + ") = " + accountNumber);
1:6e2d69a:     return accountNumber;
1:6e2d69a:   }
1:6e2d69a: 
1:6e2d69a:   @Override
1:6e2d69a:   public int openLineOfCreditAccount(String name, int assets, int liabilities) {
1:6e2d69a:     System.out.println("AccountAccessServiceImpl.openLineOfCreditAccount(" + name + "," + assets
1:6e2d69a:         + "," + liabilities + ") riskThreshold = " + _riskThreshold);
1:6e2d69a:     double risk = _creditCheckService.risk(name, assets, liabilities);
1:6e2d69a:     int accountNumber = NO_ACCOUNT;
1:6e2d69a:     if (risk < _riskThreshold)
1:6e2d69a:       accountNumber = _lineOfCreditAccountService.open(name);
1:6e2d69a:     System.out.println("AccountAccessServiceImpl.openLineOfCreditAccount(" + name + "," + assets
1:6e2d69a:         + "," + liabilities + ") = " + accountNumber);
1:6e2d69a:     return accountNumber;
1:6e2d69a:   }
1:6e2d69a: 
1:6e2d69a:   @Override
1:6e2d69a:   public int balance(int accountNumber) {
1:6e2d69a:     int balance = accountServiceFor(accountNumber).balance(accountNumber);
1:6e2d69a:     System.out.println("AccountAccessServiceImpl.balance(" + accountNumber + ") = " + balance);
1:6e2d69a:     return balance;
1:6e2d69a:   }
1:6e2d69a: 
1:6e2d69a:   @Override
1:6e2d69a:   public void deposit(int accountNumber, int funds) {
1:6e2d69a:     accountServiceFor(accountNumber).deposit(accountNumber, funds);
1:6e2d69a:     System.out.println("AccountAccessServiceImpl.deposit(" + accountNumber + "," + funds + ")");
1:6e2d69a:   }
1:6e2d69a: 
1:6e2d69a:   @Override
1:6e2d69a:   public void withdraw(int accountNumber, int funds) {
1:6e2d69a:     accountServiceFor(accountNumber).withdraw(accountNumber, funds);
1:6e2d69a:     System.out.println("AccountAccessServiceImpl.withdraw(" + accountNumber + "," + funds + ")");
1:6e2d69a:   }
1:6e2d69a: 
1:6e2d69a:   @Override
1:6e2d69a:   public void transfer(int fromAccountNumber, int toAccountNumber, int funds) {
1:6e2d69a:     withdraw(fromAccountNumber, funds);
1:6e2d69a:     deposit(toAccountNumber, funds);
1:6e2d69a:     System.out.println("AccountAccessServiceImpl.transfer(" + fromAccountNumber + ","
1:6e2d69a:         + toAccountNumber + "," + funds + ")");
1:6e2d69a:   }
1:6e2d69a: 
1:6e2d69a:   @Override
1:6e2d69a:   public String name(int accountNumber) {
1:6e2d69a:     String result = accountServiceFor(accountNumber).name(accountNumber);
1:6e2d69a:     System.out.println("AccountServicesToOutsideWorldImpl.name(" + accountNumber + ") = " + result);
1:6e2d69a:     return result;
1:6e2d69a:   }
1:6e2d69a: 
1:6e2d69a:   private AccountService accountServiceFor(int accountNumber) {
1:6e2d69a:     if (accountNumber >= Constants.CHEQUING_ACCOUNT_BASE
1:6e2d69a:         && accountNumber <= Constants.CHEQUING_ACCOUNT_MAX)
1:6e2d69a:       return _chequingAccountService;
1:6e2d69a:     else if (accountNumber >= Constants.LINEOFCREDIT_ACCOUNT_BASE
1:6e2d69a:         && accountNumber <= Constants.LINEOFCREDIT_ACCOUNT_MAX)
1:6e2d69a:       return _lineOfCreditAccountService;
1:6e2d69a:     else
1:6e2d69a:       return null;
1:6e2d69a:   }
1:6e2d69a: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:6e2d69a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.samples.bank.biz;
1: 
1: import org.apache.aries.samples.bank.api.AccountService;
1: import org.apache.aries.samples.bank.api.AccountServicesToOutsideWorld;
1: import org.apache.aries.samples.bank.api.ChequingAccountService;
1: import org.apache.aries.samples.bank.api.Constants;
1: import org.apache.aries.samples.bank.api.CreditCheckService;
1: import org.apache.aries.samples.bank.api.LineOfCreditAccountService;
1: 
1: public class AccountServicesToOutsideWorldImpl implements AccountServicesToOutsideWorld {
1: 
1:   private ChequingAccountService _chequingAccountService;
1:   private LineOfCreditAccountService _lineOfCreditAccountService;
1:   private CreditCheckService _creditCheckService;
1:   private double _riskThreshold;
1: 
1:   public void setChequingAccountService(ChequingAccountService c) {
1:     _chequingAccountService = c;
1:   }
1: 
1:   public void setLineOfCreditAccountService(LineOfCreditAccountService l) {
1:     _lineOfCreditAccountService = l;
1:   }
1: 
1:   public void setCreditCheckService(CreditCheckService c) {
1:     _creditCheckService = c;
1:   }
1: 
1:   public void setRiskThreshold(double r) {
1:     _riskThreshold = r;
1:   }
1: 
1:   private static final int NO_ACCOUNT = -1; 
1: 
1:   @Override
1:   public int openChequingAccount(String name, int assets, int liabilities) {
1:     int accountNumber = _chequingAccountService.open(name);
1:     System.out.println("AccountAccessServiceImpl.openChequingAccount(" + name + "," + assets + ","
1:         + liabilities + ") = " + accountNumber);
1:     return accountNumber;
1:   }
1: 
1:   @Override
1:   public int openLineOfCreditAccount(String name, int assets, int liabilities) {
1:     System.out.println("AccountAccessServiceImpl.openLineOfCreditAccount(" + name + "," + assets
1:         + "," + liabilities + ") riskThreshold = " + _riskThreshold);
1:     double risk = _creditCheckService.risk(name, assets, liabilities);
1:     int accountNumber = NO_ACCOUNT;
1:     if (risk < _riskThreshold)
1:       accountNumber = _lineOfCreditAccountService.open(name);
1:     System.out.println("AccountAccessServiceImpl.openLineOfCreditAccount(" + name + "," + assets
1:         + "," + liabilities + ") = " + accountNumber);
1:     return accountNumber;
1:   }
1: 
1:   @Override
1:   public int balance(int accountNumber) {
1:     int balance = accountServiceFor(accountNumber).balance(accountNumber);
1:     System.out.println("AccountAccessServiceImpl.balance(" + accountNumber + ") = " + balance);
1:     return balance;
1:   }
1: 
1:   @Override
1:   public void deposit(int accountNumber, int funds) {
1:     accountServiceFor(accountNumber).deposit(accountNumber, funds);
1:     System.out.println("AccountAccessServiceImpl.deposit(" + accountNumber + "," + funds + ")");
1:   }
1: 
1:   @Override
1:   public void withdraw(int accountNumber, int funds) {
1:     accountServiceFor(accountNumber).withdraw(accountNumber, funds);
1:     System.out.println("AccountAccessServiceImpl.withdraw(" + accountNumber + "," + funds + ")");
1:   }
1: 
1:   @Override
1:   public void transfer(int fromAccountNumber, int toAccountNumber, int funds) {
1:     withdraw(fromAccountNumber, funds);
1:     deposit(toAccountNumber, funds);
1:     System.out.println("AccountAccessServiceImpl.transfer(" + fromAccountNumber + ","
1:         + toAccountNumber + "," + funds + ")");
1:   }
1: 
1:   @Override
1:   public String name(int accountNumber) {
1:     String result = accountServiceFor(accountNumber).name(accountNumber);
1:     System.out.println("AccountServicesToOutsideWorldImpl.name(" + accountNumber + ") = " + result);
1:     return result;
1:   }
1: 
1:   private AccountService accountServiceFor(int accountNumber) {
1:     if (accountNumber >= Constants.CHEQUING_ACCOUNT_BASE
1:         && accountNumber <= Constants.CHEQUING_ACCOUNT_MAX)
1:       return _chequingAccountService;
1:     else if (accountNumber >= Constants.LINEOFCREDIT_ACCOUNT_BASE
1:         && accountNumber <= Constants.LINEOFCREDIT_ACCOUNT_MAX)
1:       return _lineOfCreditAccountService;
1:     else
1:       return null;
1:   }
1: }
============================================================================