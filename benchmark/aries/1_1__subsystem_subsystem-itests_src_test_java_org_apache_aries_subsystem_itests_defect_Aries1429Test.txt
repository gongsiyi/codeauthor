1:7c4fef4: /*
1:7c4fef4:  * Licensed to the Apache Software Foundation (ASF) under one
1:7c4fef4:  * or more contributor license agreements.  See the NOTICE file
1:7c4fef4:  * distributed with this work for additional information
1:7c4fef4:  * regarding copyright ownership.  The ASF licenses this file
1:7c4fef4:  * to you under the Apache License, Version 2.0 (the
1:7c4fef4:  * "License"); you may not use this file except in compliance
1:7c4fef4:  * with the License.  You may obtain a copy of the License at
1:7c4fef4:  *
1:7c4fef4:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7c4fef4:  *
1:7c4fef4:  * Unless required by applicable law or agreed to in writing,
1:7c4fef4:  * software distributed under the License is distributed on an
1:7c4fef4:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7c4fef4:  * KIND, either express or implied.  See the License for the
1:7c4fef4:  * specific language governing permissions and limitations
1:7c4fef4:  * under the License.
1:7c4fef4:  */
1:7c4fef4: package org.apache.aries.subsystem.itests.defect;
5:7c4fef4: 
1:7c4fef4: import static org.junit.Assert.assertEquals;
1:7c4fef4: import static org.junit.Assert.assertNotNull;
1:7c4fef4: import static org.junit.Assert.assertNull;
1:7c4fef4: import static org.junit.Assert.assertTrue;
1:7c4fef4: import static org.junit.Assert.fail;
1:7c4fef4: 
1:7c4fef4: import java.io.IOException;
1:7c4fef4: import java.util.Collections;
1:7c4fef4: import java.util.HashMap;
1:7c4fef4: import java.util.Map;
1:7c4fef4: import java.util.concurrent.atomic.AtomicBoolean;
1:7c4fef4: import java.util.concurrent.atomic.AtomicReference;
1:7c4fef4: 
1:7c4fef4: import org.apache.aries.subsystem.AriesSubsystem;
1:7c4fef4: import org.apache.aries.subsystem.itests.SubsystemTest;
1:7c4fef4: import org.apache.aries.subsystem.itests.util.TestRequirement;
1:7c4fef4: import org.junit.Before;
1:7c4fef4: import org.junit.Test;
1:7c4fef4: import org.ops4j.pax.tinybundles.core.InnerClassStrategy;
1:7c4fef4: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:7c4fef4: import org.osgi.framework.Bundle;
1:7c4fef4: import org.osgi.framework.BundleContext;
1:7c4fef4: import org.osgi.framework.Constants;
1:7c4fef4: import org.osgi.framework.FrameworkEvent;
1:7c4fef4: import org.osgi.framework.FrameworkListener;
1:7c4fef4: import org.osgi.framework.hooks.weaving.WeavingHook;
1:7c4fef4: import org.osgi.framework.hooks.weaving.WovenClass;
1:7c4fef4: import org.osgi.framework.namespace.PackageNamespace;
1:7c4fef4: import org.osgi.resource.Requirement;
1:7c4fef4: import org.osgi.service.subsystem.Subsystem;
1:7c4fef4: import org.osgi.service.subsystem.SubsystemConstants;
1:7c4fef4: import org.osgi.service.subsystem.SubsystemException;
1:7c4fef4: 
1:7c4fef4: /*
1:7c4fef4:  * https://issues.apache.org/jira/browse/ARIES-1429
1:7c4fef4:  * 
1:7c4fef4:  * NullPointerException at org.apache.aries.subsystem.core.internal.WovenClassListener.modified 
1:7c4fef4:  * at org.apache.aries.subsystem.core.internal.RegionUpdater.addRequirements.
1:7c4fef4:  */
1:7c4fef4: public class Aries1429Test extends SubsystemTest {
1:7c4fef4: 	/*
1:7c4fef4: 	 * Subsystem-SymbolicName: application.a.esa
1:7c4fef4: 	 */
1:7c4fef4: 	private static final String APPLICATION_A = "application.a.esa";
1:7c4fef4: 	/*
1:7c4fef4: 	 * Bundle-SymbolicName: bundle.a.jar
1:7c4fef4: 	 */
1:7c4fef4: 	private static final String BUNDLE_A = "bundle.a.jar";
1:7c4fef4: 	
1:7c4fef4: 	private static boolean createdTestFiles;
1:7c4fef4: 	
1:7c4fef4: 	private void createApplicationA() throws IOException {
1:7c4fef4: 		createApplicationAManifest();
1:7c4fef4: 		createSubsystem(APPLICATION_A);
5:7c4fef4: 	}
1:7c4fef4: 	
1:7c4fef4: 	private void createApplicationAManifest() throws IOException {
1:7c4fef4: 		Map<String, String> attributes = new HashMap<String, String>();
1:7c4fef4: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:7c4fef4: 		createManifest(APPLICATION_A + ".mf", attributes);
1:7c4fef4: 	}
1:7c4fef4: 	
1:7c4fef4: 	@Before
1:7c4fef4: 	public void createTestFiles() throws Exception {
1:7c4fef4: 		if (createdTestFiles)
1:7c4fef4: 			return;
1:7c4fef4: 		createApplicationA();
1:7c4fef4: 		createdTestFiles = true;
1:7c4fef4: 	}
1:7c4fef4: 	
1:7c4fef4: 	@Test
1:7c4fef4:     public void testMissingParentChildEdgeTolerated() throws Exception {
1:7c4fef4: 		final AtomicBoolean weavingHookCalled = new AtomicBoolean();
1:7c4fef4: 		final AtomicReference<FrameworkEvent> frameworkEvent = new AtomicReference<FrameworkEvent>();
1:7c4fef4: 		bundleContext.registerService(
1:7c4fef4:     			WeavingHook.class, 
1:7c4fef4:     			new WeavingHook() {
3:7c4fef4:     				@Override
1:7c4fef4:     				public void weave(WovenClass wovenClass) {
1:7c4fef4:     					Bundle bundle = wovenClass.getBundleWiring().getBundle();
1:7c4fef4:     					if (BUNDLE_A.equals(bundle.getSymbolicName())) {
1:7c4fef4:     						wovenClass.getDynamicImports().add("com.acme.tnt");
1:7c4fef4:     						weavingHookCalled.set(true);
1:7c4fef4:     					}
1:7c4fef4:     				}
1:7c4fef4:     			}, 
1:7c4fef4:     			null);
1:7c4fef4:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:7c4fef4:     	try {
1:7c4fef4: 	    	removeConnectionWithParent(applicationA);
1:7c4fef4: 			BundleContext context = applicationA.getBundleContext();
1:7c4fef4: 			Bundle bundleA = context.installBundle(
1:7c4fef4: 					BUNDLE_A, 
1:7c4fef4: 					TinyBundles
1:7c4fef4: 							.bundle()
1:7c4fef4: 							.add(getClass().getClassLoader().loadClass("a.A"), InnerClassStrategy.NONE)
1:7c4fef4: 							.set(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_A)
1:7c4fef4: 							.build(TinyBundles.withBnd()));
1:7c4fef4: 			bundleContext.addFrameworkListener(
1:7c4fef4: 	    			new FrameworkListener() {
1:7c4fef4: 						@Override
1:7c4fef4: 						public void frameworkEvent(FrameworkEvent event) {
1:7c4fef4: 							if (FrameworkEvent.ERROR == event.getType()
1:7c4fef4: 									&& getSubsystemCoreBundle().equals(event.getBundle())) {
1:7c4fef4: 								frameworkEvent.set(event);
1:7c4fef4: 								if (event.getThrowable() != null) {
1:7c4fef4: 									event.getThrowable().printStackTrace();
1:7c4fef4: 								}
1:7c4fef4: 							}
1:7c4fef4: 						}
1:7c4fef4: 	    			});
1:7c4fef4: 			bundleA.loadClass("a.A");
1:7c4fef4: 			assertTrue("Weaving hook not called", weavingHookCalled.get());
1:7c4fef4: 			Thread.sleep(1000);
1:7c4fef4: 			assertNull("An exception was thrown", frameworkEvent.get());
1:7c4fef4:     	}
1:7c4fef4:     	finally {
1:7c4fef4:     		uninstallSubsystemSilently(applicationA);
1:7c4fef4:     	}
1:7c4fef4:     }
1:7c4fef4:     
1:7c4fef4:     @Test
1:7c4fef4:     public void testMissingParentChildEdgeNotTolerated() throws Exception {
1:7c4fef4:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:7c4fef4:     	try {
1:7c4fef4:     		removeConnectionWithParent(applicationA);
1:7c4fef4:     		try {
1:7c4fef4:     			((AriesSubsystem)applicationA).addRequirements(
1:7c4fef4:     					Collections.singletonList(
1:7c4fef4:     							(Requirement) new TestRequirement.Builder()
1:7c4fef4:     							.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:7c4fef4:     							.attribute(PackageNamespace.PACKAGE_NAMESPACE, "org.osgi.framework")
1:7c4fef4:     							.build()));
1:7c4fef4:     			fail("No exception received");
1:7c4fef4:     		}
1:7c4fef4:     		catch (SubsystemException e) {
1:7c4fef4:     			Throwable cause = e.getCause();
1:7c4fef4:     			assertNotNull("Wrong cause", cause);
1:7c4fef4:     			assertEquals("Wrong cause", IllegalStateException.class, cause.getClass());
1:7c4fef4:     		}
1:7c4fef4:     	}
1:7c4fef4:     	finally {
1:7c4fef4:     		uninstallSubsystemSilently(applicationA);
1:7c4fef4:     	}
1:7c4fef4:     }
1:7c4fef4: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2aab796
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7c4fef4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
0: import java.util.Set;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import org.apache.aries.subsystem.AriesSubsystem;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.apache.aries.subsystem.itests.util.TestRequirement;
0: import org.eclipse.equinox.region.Region;
0: import org.eclipse.equinox.region.RegionDigraph;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.ops4j.pax.tinybundles.core.InnerClassStrategy;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.BundleException;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.FrameworkEvent;
1: import org.osgi.framework.FrameworkListener;
0: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.hooks.weaving.WeavingHook;
1: import org.osgi.framework.hooks.weaving.WovenClass;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.resource.Requirement;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1429
1:  * 
1:  * NullPointerException at org.apache.aries.subsystem.core.internal.WovenClassListener.modified 
1:  * at org.apache.aries.subsystem.core.internal.RegionUpdater.addRequirements.
1:  */
1: public class Aries1429Test extends SubsystemTest {
1: 	/*
1: 	 * Subsystem-SymbolicName: application.a.esa
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	private void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A);
1: 	}
1: 	
1: 	private void createApplicationAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 	}
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createApplicationA();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	@Test
1:     public void testMissingParentChildEdgeTolerated() throws Exception {
1: 		final AtomicBoolean weavingHookCalled = new AtomicBoolean();
1: 		final AtomicReference<FrameworkEvent> frameworkEvent = new AtomicReference<FrameworkEvent>();
1: 		bundleContext.registerService(
1:     			WeavingHook.class, 
1:     			new WeavingHook() {
1:     				@Override
1:     				public void weave(WovenClass wovenClass) {
1:     					Bundle bundle = wovenClass.getBundleWiring().getBundle();
1:     					if (BUNDLE_A.equals(bundle.getSymbolicName())) {
1:     						wovenClass.getDynamicImports().add("com.acme.tnt");
1:     						weavingHookCalled.set(true);
1:     					}
1:     				}
1:     			}, 
1:     			null);
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1: 	    	removeConnectionWithParent(applicationA);
1: 			BundleContext context = applicationA.getBundleContext();
1: 			Bundle bundleA = context.installBundle(
1: 					BUNDLE_A, 
1: 					TinyBundles
1: 							.bundle()
1: 							.add(getClass().getClassLoader().loadClass("a.A"), InnerClassStrategy.NONE)
1: 							.set(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_A)
1: 							.build(TinyBundles.withBnd()));
1: 			bundleContext.addFrameworkListener(
1: 	    			new FrameworkListener() {
1: 						@Override
1: 						public void frameworkEvent(FrameworkEvent event) {
1: 							if (FrameworkEvent.ERROR == event.getType()
1: 									&& getSubsystemCoreBundle().equals(event.getBundle())) {
1: 								frameworkEvent.set(event);
1: 								if (event.getThrowable() != null) {
1: 									event.getThrowable().printStackTrace();
1: 								}
1: 							}
1: 						}
1: 	    			});
1: 			bundleA.loadClass("a.A");
1: 			assertTrue("Weaving hook not called", weavingHookCalled.get());
1: 			Thread.sleep(1000);
1: 			assertNull("An exception was thrown", frameworkEvent.get());
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1: 	
0: 	private void removeConnectionWithParent(Subsystem subsystem) throws BundleException {
0: 		Region tail = getRegion(subsystem);
0: 		RegionDigraph copy = digraph.copy();
0: 		Region tailCopy = copy.getRegion(tail.getName());
0: 		Set<Long> ids = tail.getBundleIds();
0: 		copy.removeRegion(tailCopy);
0: 		tailCopy= copy.createRegion(tailCopy.getName());
0: 		for (long id : ids) {
0: 			tailCopy.addBundle(id);
1: 		}
0: 		digraph.replace(copy);
1: 	}
1:     
1:     @Test
1:     public void testMissingParentChildEdgeNotTolerated() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		removeConnectionWithParent(applicationA);
1:     		try {
1:     			((AriesSubsystem)applicationA).addRequirements(
1:     					Collections.singletonList(
1:     							(Requirement) new TestRequirement.Builder()
1:     							.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:     							.attribute(PackageNamespace.PACKAGE_NAMESPACE, "org.osgi.framework")
1:     							.build()));
1:     			fail("No exception received");
1:     		}
1:     		catch (SubsystemException e) {
1:     			Throwable cause = e.getCause();
1:     			assertNotNull("Wrong cause", cause);
1:     			assertEquals("Wrong cause", IllegalStateException.class, cause.getClass());
1:     		}
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1:     
0:     private RegionDigraph digraph;
0:     private ServiceReference<RegionDigraph> reference;
1:     
1:     @Override
0:     public void setUp() throws Exception {
0:         super.setUp();
0:         reference = bundleContext.getServiceReference(RegionDigraph.class);
0:         digraph = bundleContext.getService(reference);
1:     }
1:     
1:     @Override
0:     public void tearDown() throws Exception {
0:     	bundleContext.ungetService(reference);
1:     }
1: }
============================================================================