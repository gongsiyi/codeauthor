1:cd603d2: /*
1:cd603d2:  * Licensed to the Apache Software Foundation (ASF) under one
1:cd603d2:  * or more contributor license agreements.  See the NOTICE file
1:cd603d2:  * distributed with this work for additional information
1:cd603d2:  * regarding copyright ownership.  The ASF licenses this file
1:cd603d2:  * to you under the Apache License, Version 2.0 (the
1:cd603d2:  * "License"); you may not use this file except in compliance
1:cd603d2:  * with the License.  You may obtain a copy of the License at
1:cd603d2:  *
1:cd603d2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cd603d2:  *
1:cd603d2:  * Unless required by applicable law or agreed to in writing,
1:cd603d2:  * software distributed under the License is distributed on an
1:cd603d2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cd603d2:  * KIND, either express or implied.  See the License for the
1:cd603d2:  * specific language governing permissions and limitations
1:cd603d2:  * under the License.
1:cd603d2:  */
1:cd603d2: package org.apache.aries.blueprint.container;
1:cd603d2: 
1:cd603d2: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:cd603d2: import org.apache.aries.blueprint.ExtendedBeanMetadata;
1:cd603d2: import org.apache.aries.blueprint.PassThroughMetadata;
1:cd603d2: import org.apache.aries.blueprint.di.*;
1:cd603d2: import org.apache.aries.blueprint.ext.ComponentFactoryMetadata;
1:cd603d2: import org.apache.aries.blueprint.ext.DependentComponentFactoryMetadata;
1:cd603d2: import org.apache.aries.blueprint.reflect.MetadataUtil;
1:cd603d2: import org.apache.aries.blueprint.utils.ServiceListener;
1:cd603d2: import org.osgi.service.blueprint.reflect.*;
1:cd603d2: 
1:cd603d2: import java.util.*;
1:cd603d2: 
1:cd603d2: public class NoOsgiRecipeBuilder {
1:cd603d2: 
1:cd603d2:     private final Set<String> names = new HashSet<String>();
1:cd603d2:     private final BlueprintContainerImpl blueprintContainer;
1:cd603d2:     private final ComponentDefinitionRegistry registry;
1:cd603d2:     private final IdSpace recipeIdSpace;
1:cd603d2: 
1:cd603d2:     public NoOsgiRecipeBuilder(BlueprintContainerImpl blueprintContainer, IdSpace recipeIdSpace) {
1:cd603d2:         this.recipeIdSpace = recipeIdSpace;
1:cd603d2:         this.blueprintContainer = blueprintContainer;
1:cd603d2:         this.registry = blueprintContainer.getComponentDefinitionRegistry();
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     public BlueprintRepository createRepository() {
1:cd603d2:         BlueprintRepository repository = new NoOsgiBlueprintRepository(blueprintContainer);
1:cd603d2:         // Create component recipes
1:cd603d2:         for (String name : registry.getComponentDefinitionNames()) {
1:cd603d2:             ComponentMetadata component = registry.getComponentDefinition(name);
1:cd603d2:             Recipe recipe = createRecipe(component);
1:cd603d2:             repository.putRecipe(recipe.getName(), recipe);
1:cd603d2:         }
1:cd603d2:         repository.validate();
1:cd603d2:         return repository;
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     public Recipe createRecipe(ComponentMetadata component) {
1:cd603d2: 
1:cd603d2:         // Custom components should be handled before built-in ones
1:cd603d2:         // in case we have a custom component that also implements a built-in metadata
1:cd603d2: 
1:cd603d2:         if (component instanceof DependentComponentFactoryMetadata) {
1:cd603d2:             return createDependentComponentFactoryMetadata((DependentComponentFactoryMetadata) component);
1:cd603d2:         } else if (component instanceof ComponentFactoryMetadata) {
1:cd603d2:             return createComponentFactoryMetadata((ComponentFactoryMetadata) component);
1:cd603d2:         } else if (component instanceof BeanMetadata) {
1:cd603d2:             return createBeanRecipe((BeanMetadata) component);
1:cd603d2:         } else if (component instanceof ServiceMetadata) {
1:cd603d2:             throw new IllegalArgumentException("OSGi services are not supported");
1:cd603d2:         } else if (component instanceof ReferenceMetadata) {
1:cd603d2:             throw new IllegalArgumentException("OSGi references are not supported");
1:cd603d2:         } else if (component instanceof ReferenceListMetadata) {
1:cd603d2:             throw new IllegalArgumentException("OSGi references are not supported");
1:cd603d2:         } else if (component instanceof PassThroughMetadata) {
1:cd603d2:             return createPassThroughRecipe((PassThroughMetadata) component);
1:cd603d2:         } else {
1:cd603d2:             throw new IllegalStateException("Unsupported component type " + component.getClass());
1:cd603d2:         }
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     private Recipe createComponentFactoryMetadata(ComponentFactoryMetadata metadata) {
1:cd603d2:         return new ComponentFactoryRecipe<ComponentFactoryMetadata>(
1:cd603d2:                 metadata.getId(), metadata, blueprintContainer, getDependencies(metadata));
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     private Recipe createDependentComponentFactoryMetadata(DependentComponentFactoryMetadata metadata) {
1:cd603d2:         return new DependentComponentFactoryRecipe(
1:cd603d2:                 metadata.getId(), metadata, blueprintContainer, getDependencies(metadata));
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     private List<Recipe> getDependencies(ComponentMetadata metadata) {
1:cd603d2:         List<Recipe> deps = new ArrayList<Recipe>();
1:cd603d2:         for (String name : metadata.getDependsOn()) {
1:cd603d2:             deps.add(new RefRecipe(getName(null), name));
1:cd603d2:         }
1:cd603d2:         return deps;
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     private Recipe createPassThroughRecipe(PassThroughMetadata passThroughMetadata) {
1:cd603d2:         return new PassThroughRecipe(getName(passThroughMetadata.getId()),
1:cd603d2:                 passThroughMetadata.getObject());
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     private Object getBeanClass(BeanMetadata beanMetadata) {
1:cd603d2:         if (beanMetadata instanceof ExtendedBeanMetadata) {
1:cd603d2:             ExtendedBeanMetadata extBeanMetadata = (ExtendedBeanMetadata) beanMetadata;
1:cd603d2:             if (extBeanMetadata.getRuntimeClass() != null) {
1:cd603d2:                 return extBeanMetadata.getRuntimeClass();
1:cd603d2:             }
1:cd603d2:         }
1:cd603d2:         return beanMetadata.getClassName();
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     private boolean allowsFieldInjection(BeanMetadata beanMetadata) {
1:cd603d2:         if (beanMetadata instanceof ExtendedBeanMetadata) {
1:cd603d2:             return ((ExtendedBeanMetadata) beanMetadata).getFieldInjection();
1:cd603d2:         }
1:cd603d2:         return false;
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     private BeanRecipe createBeanRecipe(BeanMetadata beanMetadata) {
1:cd603d2:         BeanRecipe recipe = new BeanRecipe(
1:cd603d2:                 getName(beanMetadata.getId()),
1:cd603d2:                 blueprintContainer,
1:cd603d2:                 getBeanClass(beanMetadata),
1:cd603d2:                 allowsFieldInjection(beanMetadata));
1:cd603d2:         // Create refs for explicit dependencies
1:cd603d2:         recipe.setExplicitDependencies(getDependencies(beanMetadata));
1:cd603d2:         recipe.setPrototype(MetadataUtil.isPrototypeScope(beanMetadata) || MetadataUtil.isCustomScope(beanMetadata));
1:cd603d2:         recipe.setInitMethod(beanMetadata.getInitMethod());
1:cd603d2:         recipe.setDestroyMethod(beanMetadata.getDestroyMethod());
1:cd603d2:         recipe.setInterceptorLookupKey(beanMetadata);
1:cd603d2:         List<BeanArgument> beanArguments = beanMetadata.getArguments();
1:cd603d2:         if (beanArguments != null && !beanArguments.isEmpty()) {
1:cd603d2:             boolean hasIndex = (beanArguments.get(0).getIndex() >= 0);
1:cd603d2:             if (hasIndex) {
1:cd603d2:                 List<BeanArgument> beanArgumentsCopy = new ArrayList<BeanArgument>(beanArguments);
1:cd603d2:                 Collections.sort(beanArgumentsCopy, MetadataUtil.BEAN_COMPARATOR);
1:cd603d2:                 beanArguments = beanArgumentsCopy;
1:cd603d2:             }
1:cd603d2:             List<Object> arguments = new ArrayList<Object>();
1:cd603d2:             List<String> argTypes = new ArrayList<String>();
1:cd603d2:             for (BeanArgument argument : beanArguments) {
1:cd603d2:                 Recipe value = getValue(argument.getValue(), null);
1:cd603d2:                 arguments.add(value);
1:cd603d2:                 argTypes.add(argument.getValueType());
1:cd603d2:             }
1:cd603d2:             recipe.setArguments(arguments);
1:cd603d2:             recipe.setArgTypes(argTypes);
1:cd603d2:             recipe.setReorderArguments(!hasIndex);
1:cd603d2:         }
1:cd603d2:         recipe.setFactoryMethod(beanMetadata.getFactoryMethod());
1:cd603d2:         if (beanMetadata.getFactoryComponent() != null) {
1:cd603d2:             recipe.setFactoryComponent(getValue(beanMetadata.getFactoryComponent(), null));
1:cd603d2:         }
1:cd603d2:         for (BeanProperty property : beanMetadata.getProperties()) {
1:cd603d2:             Recipe value = getValue(property.getValue(), null);
1:cd603d2:             recipe.setProperty(property.getName(), value);
1:cd603d2:         }
1:cd603d2:         return recipe;
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     private Recipe createRecipe(RegistrationListener listener) {
1:cd603d2:         BeanRecipe recipe = new BeanRecipe(getName(null), blueprintContainer, ServiceListener.class, false);
1:cd603d2:         recipe.setProperty("listener", getValue(listener.getListenerComponent(), null));
1:cd603d2:         if (listener.getRegistrationMethod() != null) {
1:cd603d2:             recipe.setProperty("registerMethod", listener.getRegistrationMethod());
1:cd603d2:         }
1:cd603d2:         if (listener.getUnregistrationMethod() != null) {
1:cd603d2:             recipe.setProperty("unregisterMethod", listener.getUnregistrationMethod());
1:cd603d2:         }
1:cd603d2:         recipe.setProperty("blueprintContainer", blueprintContainer);
1:cd603d2:         return recipe;
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     private Recipe createRecipe(ReferenceListener listener) {
1:cd603d2:         BeanRecipe recipe = new BeanRecipe(getName(null), blueprintContainer, AbstractServiceReferenceRecipe.Listener.class, false);
1:cd603d2:         recipe.setProperty("listener", getValue(listener.getListenerComponent(), null));
1:cd603d2:         recipe.setProperty("metadata", listener);
1:cd603d2:         recipe.setProperty("blueprintContainer", blueprintContainer);
1:cd603d2:         return recipe;
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     private Recipe getValue(Metadata v, Object groupingType) {
1:cd603d2:         if (v instanceof NullMetadata) {
1:cd603d2:             return null;
1:cd603d2:         } else if (v instanceof ComponentMetadata) {
1:cd603d2:             return createRecipe((ComponentMetadata) v);
1:cd603d2:         } else if (v instanceof ValueMetadata) {
1:cd603d2:             ValueMetadata stringValue = (ValueMetadata) v;
1:cd603d2:             Object type = stringValue.getType();
1:cd603d2:             type = (type == null) ? groupingType : type;
1:cd603d2:             ValueRecipe vr = new ValueRecipe(getName(null), stringValue, type);
1:cd603d2:             return vr;
1:cd603d2:         } else if (v instanceof RefMetadata) {
1:cd603d2:             // TODO: make it work with property-placeholders?
1:cd603d2:             String componentName = ((RefMetadata) v).getComponentId();
1:cd603d2:             RefRecipe rr = new RefRecipe(getName(null), componentName);
1:cd603d2:             return rr;
1:cd603d2:         } else if (v instanceof CollectionMetadata) {
1:cd603d2:             CollectionMetadata collectionMetadata = (CollectionMetadata) v;
1:cd603d2:             Class<?> cl = collectionMetadata.getCollectionClass();
1:cd603d2:             String type = collectionMetadata.getValueType();
1:cd603d2:             if (cl == Object[].class) {
1:cd603d2:                 ArrayRecipe ar = new ArrayRecipe(getName(null), type);
1:cd603d2:                 for (Metadata lv : collectionMetadata.getValues()) {
1:cd603d2:                     ar.add(getValue(lv, type));
1:cd603d2:                 }
1:cd603d2:                 return ar;
1:cd603d2:             } else {
1:cd603d2:                 CollectionRecipe cr = new CollectionRecipe(getName(null), cl != null ? cl : ArrayList.class, type);
1:cd603d2:                 for (Metadata lv : collectionMetadata.getValues()) {
1:cd603d2:                     cr.add(getValue(lv, type));
1:cd603d2:                 }
1:cd603d2:                 return cr;
1:cd603d2:             }
1:cd603d2:         } else if (v instanceof MapMetadata) {
1:cd603d2:             return createMapRecipe((MapMetadata) v);
1:cd603d2:         } else if (v instanceof PropsMetadata) {
1:cd603d2:             PropsMetadata mapValue = (PropsMetadata) v;
1:cd603d2:             MapRecipe mr = new MapRecipe(getName(null), Properties.class, String.class, String.class);
1:cd603d2:             for (MapEntry entry : mapValue.getEntries()) {
1:cd603d2:                 Recipe key = getValue(entry.getKey(), String.class);
1:cd603d2:                 Recipe val = getValue(entry.getValue(), String.class);
1:cd603d2:                 mr.put(key, val);
1:cd603d2:             }
1:cd603d2:             return mr;
1:cd603d2:         } else if (v instanceof IdRefMetadata) {
1:cd603d2:             // TODO: make it work with property-placeholders?
1:cd603d2:             String componentName = ((IdRefMetadata) v).getComponentId();
1:cd603d2:             IdRefRecipe rnr = new IdRefRecipe(getName(null), componentName);
1:cd603d2:             return rnr;
1:cd603d2:         } else {
1:cd603d2:             throw new IllegalStateException("Unsupported value: " + v.getClass().getName());
1:cd603d2:         }
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     private MapRecipe createMapRecipe(MapMetadata mapValue) {
1:cd603d2:         String keyType = mapValue.getKeyType();
1:cd603d2:         String valueType = mapValue.getValueType();
1:cd603d2:         MapRecipe mr = new MapRecipe(getName(null), HashMap.class, keyType, valueType);
1:cd603d2:         for (MapEntry entry : mapValue.getEntries()) {
1:cd603d2:             Recipe key = getValue(entry.getKey(), keyType);
1:cd603d2:             Recipe val = getValue(entry.getValue(), valueType);
1:cd603d2:             mr.put(key, val);
1:cd603d2:         }
1:cd603d2:         return mr;
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     private String getName(String name) {
1:cd603d2:         if (name == null) {
1:cd603d2:             do {
1:cd603d2:                 name = "#recipe-" + recipeIdSpace.nextId();
1:cd603d2:             } while (names.contains(name) || registry.containsComponentDefinition(name));
1:cd603d2:         }
1:cd603d2:         names.add(name);
1:cd603d2:         return name;
1:cd603d2:     }
1:cd603d2: 
1:cd603d2: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:cd603d2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.container;
1: 
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.apache.aries.blueprint.ExtendedBeanMetadata;
1: import org.apache.aries.blueprint.PassThroughMetadata;
1: import org.apache.aries.blueprint.di.*;
1: import org.apache.aries.blueprint.ext.ComponentFactoryMetadata;
1: import org.apache.aries.blueprint.ext.DependentComponentFactoryMetadata;
1: import org.apache.aries.blueprint.reflect.MetadataUtil;
1: import org.apache.aries.blueprint.utils.ServiceListener;
1: import org.osgi.service.blueprint.reflect.*;
1: 
1: import java.util.*;
1: 
1: public class NoOsgiRecipeBuilder {
1: 
1:     private final Set<String> names = new HashSet<String>();
1:     private final BlueprintContainerImpl blueprintContainer;
1:     private final ComponentDefinitionRegistry registry;
1:     private final IdSpace recipeIdSpace;
1: 
1:     public NoOsgiRecipeBuilder(BlueprintContainerImpl blueprintContainer, IdSpace recipeIdSpace) {
1:         this.recipeIdSpace = recipeIdSpace;
1:         this.blueprintContainer = blueprintContainer;
1:         this.registry = blueprintContainer.getComponentDefinitionRegistry();
1:     }
1: 
1:     public BlueprintRepository createRepository() {
1:         BlueprintRepository repository = new NoOsgiBlueprintRepository(blueprintContainer);
1:         // Create component recipes
1:         for (String name : registry.getComponentDefinitionNames()) {
1:             ComponentMetadata component = registry.getComponentDefinition(name);
1:             Recipe recipe = createRecipe(component);
1:             repository.putRecipe(recipe.getName(), recipe);
1:         }
1:         repository.validate();
1:         return repository;
1:     }
1: 
1:     public Recipe createRecipe(ComponentMetadata component) {
1: 
1:         // Custom components should be handled before built-in ones
1:         // in case we have a custom component that also implements a built-in metadata
1: 
1:         if (component instanceof DependentComponentFactoryMetadata) {
1:             return createDependentComponentFactoryMetadata((DependentComponentFactoryMetadata) component);
1:         } else if (component instanceof ComponentFactoryMetadata) {
1:             return createComponentFactoryMetadata((ComponentFactoryMetadata) component);
1:         } else if (component instanceof BeanMetadata) {
1:             return createBeanRecipe((BeanMetadata) component);
1:         } else if (component instanceof ServiceMetadata) {
1:             throw new IllegalArgumentException("OSGi services are not supported");
1:         } else if (component instanceof ReferenceMetadata) {
1:             throw new IllegalArgumentException("OSGi references are not supported");
1:         } else if (component instanceof ReferenceListMetadata) {
1:             throw new IllegalArgumentException("OSGi references are not supported");
1:         } else if (component instanceof PassThroughMetadata) {
1:             return createPassThroughRecipe((PassThroughMetadata) component);
1:         } else {
1:             throw new IllegalStateException("Unsupported component type " + component.getClass());
1:         }
1:     }
1: 
1:     private Recipe createComponentFactoryMetadata(ComponentFactoryMetadata metadata) {
1:         return new ComponentFactoryRecipe<ComponentFactoryMetadata>(
1:                 metadata.getId(), metadata, blueprintContainer, getDependencies(metadata));
1:     }
1: 
1:     private Recipe createDependentComponentFactoryMetadata(DependentComponentFactoryMetadata metadata) {
1:         return new DependentComponentFactoryRecipe(
1:                 metadata.getId(), metadata, blueprintContainer, getDependencies(metadata));
1:     }
1: 
1:     private List<Recipe> getDependencies(ComponentMetadata metadata) {
1:         List<Recipe> deps = new ArrayList<Recipe>();
1:         for (String name : metadata.getDependsOn()) {
1:             deps.add(new RefRecipe(getName(null), name));
1:         }
1:         return deps;
1:     }
1: 
1:     private Recipe createPassThroughRecipe(PassThroughMetadata passThroughMetadata) {
1:         return new PassThroughRecipe(getName(passThroughMetadata.getId()),
1:                 passThroughMetadata.getObject());
1:     }
1: 
1:     private Object getBeanClass(BeanMetadata beanMetadata) {
1:         if (beanMetadata instanceof ExtendedBeanMetadata) {
1:             ExtendedBeanMetadata extBeanMetadata = (ExtendedBeanMetadata) beanMetadata;
1:             if (extBeanMetadata.getRuntimeClass() != null) {
1:                 return extBeanMetadata.getRuntimeClass();
1:             }
1:         }
1:         return beanMetadata.getClassName();
1:     }
1: 
1:     private boolean allowsFieldInjection(BeanMetadata beanMetadata) {
1:         if (beanMetadata instanceof ExtendedBeanMetadata) {
1:             return ((ExtendedBeanMetadata) beanMetadata).getFieldInjection();
1:         }
1:         return false;
1:     }
1: 
1:     private BeanRecipe createBeanRecipe(BeanMetadata beanMetadata) {
1:         BeanRecipe recipe = new BeanRecipe(
1:                 getName(beanMetadata.getId()),
1:                 blueprintContainer,
1:                 getBeanClass(beanMetadata),
1:                 allowsFieldInjection(beanMetadata));
1:         // Create refs for explicit dependencies
1:         recipe.setExplicitDependencies(getDependencies(beanMetadata));
1:         recipe.setPrototype(MetadataUtil.isPrototypeScope(beanMetadata) || MetadataUtil.isCustomScope(beanMetadata));
1:         recipe.setInitMethod(beanMetadata.getInitMethod());
1:         recipe.setDestroyMethod(beanMetadata.getDestroyMethod());
1:         recipe.setInterceptorLookupKey(beanMetadata);
1:         List<BeanArgument> beanArguments = beanMetadata.getArguments();
1:         if (beanArguments != null && !beanArguments.isEmpty()) {
1:             boolean hasIndex = (beanArguments.get(0).getIndex() >= 0);
1:             if (hasIndex) {
1:                 List<BeanArgument> beanArgumentsCopy = new ArrayList<BeanArgument>(beanArguments);
1:                 Collections.sort(beanArgumentsCopy, MetadataUtil.BEAN_COMPARATOR);
1:                 beanArguments = beanArgumentsCopy;
1:             }
1:             List<Object> arguments = new ArrayList<Object>();
1:             List<String> argTypes = new ArrayList<String>();
1:             for (BeanArgument argument : beanArguments) {
1:                 Recipe value = getValue(argument.getValue(), null);
1:                 arguments.add(value);
1:                 argTypes.add(argument.getValueType());
1:             }
1:             recipe.setArguments(arguments);
1:             recipe.setArgTypes(argTypes);
1:             recipe.setReorderArguments(!hasIndex);
1:         }
1:         recipe.setFactoryMethod(beanMetadata.getFactoryMethod());
1:         if (beanMetadata.getFactoryComponent() != null) {
1:             recipe.setFactoryComponent(getValue(beanMetadata.getFactoryComponent(), null));
1:         }
1:         for (BeanProperty property : beanMetadata.getProperties()) {
1:             Recipe value = getValue(property.getValue(), null);
1:             recipe.setProperty(property.getName(), value);
1:         }
1:         return recipe;
1:     }
1: 
1:     private Recipe createRecipe(RegistrationListener listener) {
1:         BeanRecipe recipe = new BeanRecipe(getName(null), blueprintContainer, ServiceListener.class, false);
1:         recipe.setProperty("listener", getValue(listener.getListenerComponent(), null));
1:         if (listener.getRegistrationMethod() != null) {
1:             recipe.setProperty("registerMethod", listener.getRegistrationMethod());
1:         }
1:         if (listener.getUnregistrationMethod() != null) {
1:             recipe.setProperty("unregisterMethod", listener.getUnregistrationMethod());
1:         }
1:         recipe.setProperty("blueprintContainer", blueprintContainer);
1:         return recipe;
1:     }
1: 
1:     private Recipe createRecipe(ReferenceListener listener) {
1:         BeanRecipe recipe = new BeanRecipe(getName(null), blueprintContainer, AbstractServiceReferenceRecipe.Listener.class, false);
1:         recipe.setProperty("listener", getValue(listener.getListenerComponent(), null));
1:         recipe.setProperty("metadata", listener);
1:         recipe.setProperty("blueprintContainer", blueprintContainer);
1:         return recipe;
1:     }
1: 
1:     private Recipe getValue(Metadata v, Object groupingType) {
1:         if (v instanceof NullMetadata) {
1:             return null;
1:         } else if (v instanceof ComponentMetadata) {
1:             return createRecipe((ComponentMetadata) v);
1:         } else if (v instanceof ValueMetadata) {
1:             ValueMetadata stringValue = (ValueMetadata) v;
1:             Object type = stringValue.getType();
1:             type = (type == null) ? groupingType : type;
1:             ValueRecipe vr = new ValueRecipe(getName(null), stringValue, type);
1:             return vr;
1:         } else if (v instanceof RefMetadata) {
1:             // TODO: make it work with property-placeholders?
1:             String componentName = ((RefMetadata) v).getComponentId();
1:             RefRecipe rr = new RefRecipe(getName(null), componentName);
1:             return rr;
1:         } else if (v instanceof CollectionMetadata) {
1:             CollectionMetadata collectionMetadata = (CollectionMetadata) v;
1:             Class<?> cl = collectionMetadata.getCollectionClass();
1:             String type = collectionMetadata.getValueType();
1:             if (cl == Object[].class) {
1:                 ArrayRecipe ar = new ArrayRecipe(getName(null), type);
1:                 for (Metadata lv : collectionMetadata.getValues()) {
1:                     ar.add(getValue(lv, type));
1:                 }
1:                 return ar;
1:             } else {
1:                 CollectionRecipe cr = new CollectionRecipe(getName(null), cl != null ? cl : ArrayList.class, type);
1:                 for (Metadata lv : collectionMetadata.getValues()) {
1:                     cr.add(getValue(lv, type));
1:                 }
1:                 return cr;
1:             }
1:         } else if (v instanceof MapMetadata) {
1:             return createMapRecipe((MapMetadata) v);
1:         } else if (v instanceof PropsMetadata) {
1:             PropsMetadata mapValue = (PropsMetadata) v;
1:             MapRecipe mr = new MapRecipe(getName(null), Properties.class, String.class, String.class);
1:             for (MapEntry entry : mapValue.getEntries()) {
1:                 Recipe key = getValue(entry.getKey(), String.class);
1:                 Recipe val = getValue(entry.getValue(), String.class);
1:                 mr.put(key, val);
1:             }
1:             return mr;
1:         } else if (v instanceof IdRefMetadata) {
1:             // TODO: make it work with property-placeholders?
1:             String componentName = ((IdRefMetadata) v).getComponentId();
1:             IdRefRecipe rnr = new IdRefRecipe(getName(null), componentName);
1:             return rnr;
1:         } else {
1:             throw new IllegalStateException("Unsupported value: " + v.getClass().getName());
1:         }
1:     }
1: 
1:     private MapRecipe createMapRecipe(MapMetadata mapValue) {
1:         String keyType = mapValue.getKeyType();
1:         String valueType = mapValue.getValueType();
1:         MapRecipe mr = new MapRecipe(getName(null), HashMap.class, keyType, valueType);
1:         for (MapEntry entry : mapValue.getEntries()) {
1:             Recipe key = getValue(entry.getKey(), keyType);
1:             Recipe val = getValue(entry.getValue(), valueType);
1:             mr.put(key, val);
1:         }
1:         return mr;
1:     }
1: 
1:     private String getName(String name) {
1:         if (name == null) {
1:             do {
1:                 name = "#recipe-" + recipeIdSpace.nextId();
1:             } while (names.contains(name) || registry.containsComponentDefinition(name));
1:         }
1:         names.add(name);
1:         return name;
1:     }
1: 
1: }
============================================================================