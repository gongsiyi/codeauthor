1:bf5a863: /**
1:bf5a863:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:bf5a863:  *  contributor license agreements.  See the NOTICE file distributed with
1:bf5a863:  *  this work for additional information regarding copyright ownership.
1:bf5a863:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:bf5a863:  *  (the "License"); you may not use this file except in compliance with
1:bf5a863:  *  the License.  You may obtain a copy of the License at
1:bf5a863:  *
1:bf5a863:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bf5a863:  *
1:bf5a863:  *  Unless required by applicable law or agreed to in writing, software
1:bf5a863:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:bf5a863:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf5a863:  *  See the License for the specific language governing permissions and
1:bf5a863:  *  limitations under the License.
1:bf5a863:  */
1:bf5a863: package org.apache.aries.jmx.codec;
1:fd3ae03: 
1:bf5a863: import java.util.HashMap;
1:8c01963: import java.util.List;
1:bf5a863: import java.util.Map;
1:516dd36: import java.util.Set;
1:fd3ae03: 
1:bf5a863: import javax.management.openmbean.CompositeData;
1:bf5a863: import javax.management.openmbean.CompositeDataSupport;
1:516dd36: import javax.management.openmbean.CompositeType;
1:bf5a863: import javax.management.openmbean.OpenDataException;
1:fd3ae03: import javax.management.openmbean.TabularData;
1:fd3ae03: import javax.management.openmbean.TabularDataSupport;
1:fd3ae03: 
1:fd3ae03: import org.osgi.framework.wiring.BundleCapability;
1:fd3ae03: import org.osgi.framework.wiring.BundleRequirement;
1:8c90050: import org.osgi.framework.wiring.BundleRevision;
1:8c01963: import org.osgi.framework.wiring.BundleWire;
1:1dbcef9: import org.osgi.jmx.framework.wiring.BundleWiringStateMBean;
1:fd3ae03: 
1:bf5a863: public class BundleWiringData {
1:bf5a863:     private final long bundleId;
1:8c90050:     private final int revisionId;
1:fd3ae03:     private final List<BundleCapability> capabilities;
1:fd3ae03:     private final List<BundleRequirement> requirements;
1:0e0d5fd:     private final List<BundleWire> providedWires;
1:0e0d5fd:     private final List<BundleWire> requiredWires;
1:8c90050:     private final Map<BundleRevision, Integer> revisionIDMap;
1:fd3ae03: 
1:8c90050:     public BundleWiringData(long bundleId, int revisionId, List<BundleCapability> capabilities, List<BundleRequirement> requirements,
1:8c90050:             List<BundleWire> providedWires, List<BundleWire> requiredWires, Map<BundleRevision, Integer> revisionIDMap) {
1:bf5a863:         this.bundleId = bundleId;
1:8c90050:         this.revisionId = revisionId;
1:fd3ae03:         this.capabilities = capabilities;
1:fd3ae03:         this.requirements = requirements;
1:0e0d5fd:         this.providedWires = providedWires;
1:1021f21:         this.requiredWires = requiredWires;
1:8c90050:         this.revisionIDMap = revisionIDMap;
1:fd3ae03:     }
1:516dd36: 
1:bf5a863:     public CompositeData toCompositeData() {
1:bf5a863:         try {
1:8c01963:             Map<String, Object> items = new HashMap<String, Object>();
2:62a90a9:             items.put(BundleWiringStateMBean.BUNDLE_ID, bundleId);
1:1dbcef9:             items.put(BundleWiringStateMBean.BUNDLE_REVISION_ID, revisionId);
1:1021f21: 
1:62a90a9:             items.put(BundleWiringStateMBean.REQUIREMENTS, getRequirements(requirements));
1:62a90a9:             items.put(BundleWiringStateMBean.CAPABILITIES, getCapabilities(capabilities));
1:1dbcef9:             items.put(BundleWiringStateMBean.REQUIRED_WIRES, getRequiredWires());
1:1dbcef9:             items.put(BundleWiringStateMBean.PROVIDED_WIRES, getProvidedWires());
1:1021f21: 
1:1dbcef9:             return new CompositeDataSupport(BundleWiringStateMBean.BUNDLE_WIRING_TYPE, items);
1:bf5a863:         } catch (OpenDataException e) {
1:91e4c4b:             throw new IllegalStateException("Can't create CompositeData", e);
1:fd3ae03:         }
1:fd3ae03:     }
1:1021f21: 
1:62a90a9:     private static CompositeData[] getCapabilities(List<BundleCapability> capabilityList) throws OpenDataException {
1:62a90a9:         CompositeData[] capData = new CompositeData[capabilityList.size()];
1:62a90a9:         for (int i=0; i < capabilityList.size(); i++) {
1:62a90a9:             BundleCapability capability = capabilityList.get(i);
1:1dbcef9:             capData[i] = getCapReqCompositeData(BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE,
1:516dd36:                 capability.getNamespace(), capability.getAttributes().entrySet(), capability.getDirectives().entrySet());
1:516dd36:         }
1:516dd36:         return capData;
1:516dd36:     }
1:516dd36: 
1:62a90a9:     private static CompositeData[] getRequirements(List<BundleRequirement> requirementList) throws OpenDataException {
1:62a90a9:         CompositeData [] reqData = new CompositeData[requirementList.size()];
1:62a90a9:         for (int i=0; i < requirementList.size(); i++) {
1:62a90a9:             BundleRequirement requirement = requirementList.get(i);
1:1dbcef9:             reqData[i] = getCapReqCompositeData(BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE,
1:1021f21:                 requirement.getNamespace(), requirement.getAttributes().entrySet(), requirement.getDirectives().entrySet());
1:516dd36:         }
1:516dd36:         return reqData;
1:516dd36:     }
1:516dd36: 
1:12bb1ec:     public static CompositeData getRevisionCapabilities(int revisionId, List<BundleCapability> bundleCapabilities) {
1:62a90a9:         try {
1:62a90a9:             Map<String, Object> items = new HashMap<String, Object>();
1:62a90a9:             items.put(BundleWiringStateMBean.BUNDLE_REVISION_ID, revisionId);
1:62a90a9:             items.put(BundleWiringStateMBean.CAPABILITIES, getCapabilities(bundleCapabilities));
1:62a90a9:             return new CompositeDataSupport(BundleWiringStateMBean.REVISION_CAPABILITIES_TYPE, items);
1:62a90a9:         } catch (OpenDataException e) {
1:62a90a9:             throw new IllegalStateException("Can't create CompositeData", e);
1:62a90a9:         }
1:62a90a9:     }
1:62a90a9: 
1:12bb1ec:     public static CompositeData getRevisionRequirements(int revisionId, List<BundleRequirement> bundleRequirements) {
1:62a90a9:         try {
1:62a90a9:             Map<String, Object> items = new HashMap<String, Object>();
1:62a90a9:             items.put(BundleWiringStateMBean.BUNDLE_REVISION_ID, revisionId);
1:62a90a9:             items.put(BundleWiringStateMBean.REQUIREMENTS, getRequirements(bundleRequirements));
1:62a90a9:             return new CompositeDataSupport(BundleWiringStateMBean.REVISION_REQUIREMENTS_TYPE, items);
1:62a90a9:         } catch (OpenDataException e) {
1:62a90a9:             throw new IllegalStateException("Can't create CompositeData", e);
1:62a90a9:         }
1:62a90a9:     }
1:62a90a9: 
1:34c7cec:     public static CompositeData[] getCapabilitiesCompositeData(List<BundleCapability> bundleCapabilities) {
1:34c7cec:         try {
1:34c7cec:             CompositeData[] data = new CompositeData[bundleCapabilities.size()];
1:34c7cec: 
1:34c7cec:             for (int i=0; i < bundleCapabilities.size(); i++) {
1:34c7cec:                 BundleCapability requirement = bundleCapabilities.get(i);
1:34c7cec: 
1:1dbcef9:                 CompositeData cd = BundleWiringData.getCapReqCompositeData(BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE,
1:34c7cec:                     requirement.getNamespace(), requirement.getAttributes().entrySet(), requirement.getDirectives().entrySet());
1:34c7cec:                 data[i] = cd;
1:34c7cec:             }
1:34c7cec: 
1:34c7cec:             return data;
1:34c7cec:         } catch (OpenDataException e) {
1:34c7cec:             throw new IllegalStateException("Can't create CompositeData", e);
1:34c7cec:         }
1:34c7cec:     }
1:34c7cec: 
1:34c7cec:     public static CompositeData[] getRequirementsCompositeData(List<BundleRequirement> bundleRequirements) {
1:34c7cec:         try {
1:34c7cec:             CompositeData[] data = new CompositeData[bundleRequirements.size()];
1:34c7cec: 
1:34c7cec:             for (int i=0; i < bundleRequirements.size(); i++) {
1:34c7cec:                 BundleRequirement requirement = bundleRequirements.get(i);
1:34c7cec: 
1:1dbcef9:                 CompositeData cd = BundleWiringData.getCapReqCompositeData(BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE,
1:34c7cec:                     requirement.getNamespace(), requirement.getAttributes().entrySet(), requirement.getDirectives().entrySet());
1:34c7cec:                 data[i] = cd;
1:34c7cec:             }
1:34c7cec: 
1:34c7cec:             return data;
1:34c7cec:         } catch (OpenDataException e) {
1:34c7cec:             throw new IllegalStateException("Can't create CompositeData", e);
1:34c7cec:         }
1:34c7cec:     }
1:34c7cec: 
1:34c7cec:     private static CompositeData getCapReqCompositeData(CompositeType type, String namespace, Set<Map.Entry<String,Object>> attributeSet, Set<Map.Entry<String,String>> directiveSet) throws OpenDataException {
1:516dd36:         Map<String, Object> reqItems = new HashMap<String, Object>();
1:516dd36: 
1:1dbcef9:         TabularData attributes = new TabularDataSupport(BundleWiringStateMBean.ATTRIBUTES_TYPE);
1:516dd36:         for (Map.Entry<String, Object> entry : attributeSet) {
1:516dd36:             PropertyData<?> pd = PropertyData.newInstance(entry.getKey(), entry.getValue());
1:516dd36:             attributes.put(pd.toCompositeData());
1:516dd36:         }
1:1dbcef9:         reqItems.put(BundleWiringStateMBean.ATTRIBUTES, attributes);
1:516dd36: 
1:1dbcef9:         TabularData directives = new TabularDataSupport(BundleWiringStateMBean.DIRECTIVES_TYPE);
1:516dd36:         for (Map.Entry<String, String> entry : directiveSet) {
1:1dbcef9:             CompositeData directive = new CompositeDataSupport(BundleWiringStateMBean.DIRECTIVE_TYPE,
1:1dbcef9:                 new String[] { BundleWiringStateMBean.KEY, BundleWiringStateMBean.VALUE },
1:516dd36:                 new Object[] { entry.getKey(), entry.getValue() });
1:516dd36:             directives.put(directive);
1:516dd36:         }
1:1dbcef9:         reqItems.put(BundleWiringStateMBean.DIRECTIVES, directives);
1:1dbcef9:         reqItems.put(BundleWiringStateMBean.NAMESPACE, namespace);
1:516dd36: 
1:516dd36:         CompositeData req = new CompositeDataSupport(type, reqItems);
1:516dd36:         return req;
1:516dd36:     }
1:65b0a8e: 
1:0e0d5fd:     private CompositeData[] getProvidedWires() throws OpenDataException {
1:0e0d5fd:         return getWiresCompositeData(providedWires);
1:0e0d5fd:     }
1:0e0d5fd: 
1:65b0a8e:     private CompositeData[] getRequiredWires() throws OpenDataException {
1:0e0d5fd:         return getWiresCompositeData(requiredWires);
1:0e0d5fd:     }
1:0e0d5fd: 
1:0e0d5fd:     private CompositeData[] getWiresCompositeData(List<BundleWire> wires) throws OpenDataException {
1:0e0d5fd:         CompositeData[] reqWiresData = new CompositeData[wires.size()];
1:0e0d5fd:         for (int i=0; i < wires.size(); i++) {
1:0e0d5fd:             BundleWire requiredWire = wires.get(i);
1:65b0a8e:             Map<String, Object> wireItems = new HashMap<String, Object>();
1:65b0a8e: 
1:65b0a8e:             BundleCapability capability = requiredWire.getCapability();
1:1dbcef9:             wireItems.put(BundleWiringStateMBean.PROVIDER_BUNDLE_ID, capability.getRevision().getBundle().getBundleId());
1:1dbcef9:             wireItems.put(BundleWiringStateMBean.PROVIDER_BUNDLE_REVISION_ID, revisionIDMap.get(capability.getRevision()));
1:1dbcef9:             wireItems.put(BundleWiringStateMBean.BUNDLE_CAPABILITY,
1:1dbcef9:                     getCapReqCompositeData(BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE,
1:65b0a8e:                     capability.getNamespace(), capability.getAttributes().entrySet(), capability.getDirectives().entrySet()));
1:65b0a8e: 
1:65b0a8e:             BundleRequirement requirement = requiredWire.getRequirement();
1:1dbcef9:             wireItems.put(BundleWiringStateMBean.REQUIRER_BUNDLE_ID, requirement.getRevision().getBundle().getBundleId());
1:1dbcef9:             wireItems.put(BundleWiringStateMBean.REQUIRER_BUNDLE_REVISION_ID, revisionIDMap.get(requirement.getRevision()));
1:65b0a8e: 
1:1dbcef9:             wireItems.put(BundleWiringStateMBean.BUNDLE_REQUIREMENT,
1:1dbcef9:                 getCapReqCompositeData(BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE,
1:65b0a8e:                 requirement.getNamespace(), requirement.getAttributes().entrySet(), requirement.getDirectives().entrySet()));
1:65b0a8e: 
1:1dbcef9:             CompositeData wireData = new CompositeDataSupport(BundleWiringStateMBean.BUNDLE_WIRE_TYPE, wireItems);
1:65b0a8e:             reqWiresData[i] = wireData;
1:65b0a8e:         }
1:65b0a8e:         return reqWiresData;
1:65b0a8e:     }
1:1021f21: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:12bb1ec
/////////////////////////////////////////////////////////////////////////
1:     public static CompositeData getRevisionCapabilities(int revisionId, List<BundleCapability> bundleCapabilities) {
/////////////////////////////////////////////////////////////////////////
1:     public static CompositeData getRevisionRequirements(int revisionId, List<BundleRequirement> bundleRequirements) {
commit:62a90a9
/////////////////////////////////////////////////////////////////////////
1:             items.put(BundleWiringStateMBean.REQUIREMENTS, getRequirements(requirements));
1:             items.put(BundleWiringStateMBean.CAPABILITIES, getCapabilities(capabilities));
/////////////////////////////////////////////////////////////////////////
1:     private static CompositeData[] getCapabilities(List<BundleCapability> capabilityList) throws OpenDataException {
1:         CompositeData[] capData = new CompositeData[capabilityList.size()];
1:         for (int i=0; i < capabilityList.size(); i++) {
1:             BundleCapability capability = capabilityList.get(i);
1:     private static CompositeData[] getRequirements(List<BundleRequirement> requirementList) throws OpenDataException {
1:         CompositeData [] reqData = new CompositeData[requirementList.size()];
1:         for (int i=0; i < requirementList.size(); i++) {
1:             BundleRequirement requirement = requirementList.get(i);
0:     public static CompositeData getRevisionCapabilities(long bundleId, int revisionId, List<BundleCapability> bundleCapabilities) {
1:         try {
1:             Map<String, Object> items = new HashMap<String, Object>();
1:             items.put(BundleWiringStateMBean.BUNDLE_ID, bundleId);
1:             items.put(BundleWiringStateMBean.BUNDLE_REVISION_ID, revisionId);
1:             items.put(BundleWiringStateMBean.CAPABILITIES, getCapabilities(bundleCapabilities));
1:             return new CompositeDataSupport(BundleWiringStateMBean.REVISION_CAPABILITIES_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Can't create CompositeData", e);
1:         }
1:     }
1: 
0:     public static CompositeData getRevisionRequirements(long bundleId, int revisionId, List<BundleRequirement> bundleRequirements) {
1:         try {
1:             Map<String, Object> items = new HashMap<String, Object>();
1:             items.put(BundleWiringStateMBean.BUNDLE_ID, bundleId);
1:             items.put(BundleWiringStateMBean.BUNDLE_REVISION_ID, revisionId);
1:             items.put(BundleWiringStateMBean.REQUIREMENTS, getRequirements(bundleRequirements));
1:             return new CompositeDataSupport(BundleWiringStateMBean.REVISION_REQUIREMENTS_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Can't create CompositeData", e);
1:         }
1:     }
1: 
commit:1dbcef9
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.jmx.framework.wiring.BundleWiringStateMBean;
/////////////////////////////////////////////////////////////////////////
0:             items.put(BundleWiringStateMBean.BUNDLE_ID, bundleId);
1:             items.put(BundleWiringStateMBean.BUNDLE_REVISION_ID, revisionId);
0:             items.put(BundleWiringStateMBean.REQUIREMENTS, getRequirements());
0:             items.put(BundleWiringStateMBean.CAPABILITIES, getCapabilities());
1:             items.put(BundleWiringStateMBean.REQUIRED_WIRES, getRequiredWires());
1:             items.put(BundleWiringStateMBean.PROVIDED_WIRES, getProvidedWires());
1:             return new CompositeDataSupport(BundleWiringStateMBean.BUNDLE_WIRING_TYPE, items);
/////////////////////////////////////////////////////////////////////////
1:             capData[i] = getCapReqCompositeData(BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE,
/////////////////////////////////////////////////////////////////////////
1:             reqData[i] = getCapReqCompositeData(BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE,
/////////////////////////////////////////////////////////////////////////
1:                 CompositeData cd = BundleWiringData.getCapReqCompositeData(BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE,
/////////////////////////////////////////////////////////////////////////
1:                 CompositeData cd = BundleWiringData.getCapReqCompositeData(BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE,
/////////////////////////////////////////////////////////////////////////
1:         TabularData attributes = new TabularDataSupport(BundleWiringStateMBean.ATTRIBUTES_TYPE);
1:         reqItems.put(BundleWiringStateMBean.ATTRIBUTES, attributes);
1:         TabularData directives = new TabularDataSupport(BundleWiringStateMBean.DIRECTIVES_TYPE);
1:             CompositeData directive = new CompositeDataSupport(BundleWiringStateMBean.DIRECTIVE_TYPE,
1:                 new String[] { BundleWiringStateMBean.KEY, BundleWiringStateMBean.VALUE },
1:         reqItems.put(BundleWiringStateMBean.DIRECTIVES, directives);
1:         reqItems.put(BundleWiringStateMBean.NAMESPACE, namespace);
/////////////////////////////////////////////////////////////////////////
1:             wireItems.put(BundleWiringStateMBean.PROVIDER_BUNDLE_ID, capability.getRevision().getBundle().getBundleId());
1:             wireItems.put(BundleWiringStateMBean.PROVIDER_BUNDLE_REVISION_ID, revisionIDMap.get(capability.getRevision()));
1:             wireItems.put(BundleWiringStateMBean.BUNDLE_CAPABILITY,
1:                     getCapReqCompositeData(BundleWiringStateMBean.BUNDLE_CAPABILITY_TYPE,
1:             wireItems.put(BundleWiringStateMBean.REQUIRER_BUNDLE_ID, requirement.getRevision().getBundle().getBundleId());
1:             wireItems.put(BundleWiringStateMBean.REQUIRER_BUNDLE_REVISION_ID, revisionIDMap.get(requirement.getRevision()));
1:             wireItems.put(BundleWiringStateMBean.BUNDLE_REQUIREMENT,
1:                 getCapReqCompositeData(BundleWiringStateMBean.BUNDLE_REQUIREMENT_TYPE,
1:             CompositeData wireData = new CompositeDataSupport(BundleWiringStateMBean.BUNDLE_WIRE_TYPE, wireItems);
commit:3f3f24f
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.jmx.framework.wiring.BundleRevisionsStateMBean;
commit:34c7cec
/////////////////////////////////////////////////////////////////////////
1:     public static CompositeData[] getCapabilitiesCompositeData(List<BundleCapability> bundleCapabilities) {
1:         try {
1:             CompositeData[] data = new CompositeData[bundleCapabilities.size()];
1: 
1:             for (int i=0; i < bundleCapabilities.size(); i++) {
1:                 BundleCapability requirement = bundleCapabilities.get(i);
1: 
0:                 CompositeData cd = BundleWiringData.getCapReqCompositeData(BundleRevisionsStateMBean.BUNDLE_CAPABILITY_TYPE,
1:                     requirement.getNamespace(), requirement.getAttributes().entrySet(), requirement.getDirectives().entrySet());
1:                 data[i] = cd;
1:             }
1: 
1:             return data;
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Can't create CompositeData", e);
1:         }
1:     }
1: 
1:     public static CompositeData[] getRequirementsCompositeData(List<BundleRequirement> bundleRequirements) {
1:         try {
1:             CompositeData[] data = new CompositeData[bundleRequirements.size()];
1: 
1:             for (int i=0; i < bundleRequirements.size(); i++) {
1:                 BundleRequirement requirement = bundleRequirements.get(i);
1: 
0:                 CompositeData cd = BundleWiringData.getCapReqCompositeData(BundleRevisionsStateMBean.BUNDLE_REQUIREMENT_TYPE,
1:                     requirement.getNamespace(), requirement.getAttributes().entrySet(), requirement.getDirectives().entrySet());
1:                 data[i] = cd;
1:             }
1: 
1:             return data;
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Can't create CompositeData", e);
1:         }
1:     }
1: 
1:     private static CompositeData getCapReqCompositeData(CompositeType type, String namespace, Set<Map.Entry<String,Object>> attributeSet, Set<Map.Entry<String,String>> directiveSet) throws OpenDataException {
commit:8c90050
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleRevision;
1:     private final int revisionId;
1:     private final Map<BundleRevision, Integer> revisionIDMap;
1:     public BundleWiringData(long bundleId, int revisionId, List<BundleCapability> capabilities, List<BundleRequirement> requirements,
1:             List<BundleWire> providedWires, List<BundleWire> requiredWires, Map<BundleRevision, Integer> revisionIDMap) {
1:         this.revisionId = revisionId;
1:         this.revisionIDMap = revisionIDMap;
0:             items.put(BundleRevisionsStateMBean.BUNDLE_REVISION_ID, revisionId);
/////////////////////////////////////////////////////////////////////////
0:             wireItems.put(BundleRevisionsStateMBean.PROVIDER_BUNDLE_REVISION_ID, revisionIDMap.get(capability.getRevision()));
0:             wireItems.put(BundleRevisionsStateMBean.REQUIRER_BUNDLE_REVISION_ID, revisionIDMap.get(requirement.getRevision()));
commit:91e4c4b
/////////////////////////////////////////////////////////////////////////
1:             throw new IllegalStateException("Can't create CompositeData", e);
/////////////////////////////////////////////////////////////////////////
0:     static CompositeData getCapReqCompositeData(CompositeType type, String namespace, Set<Map.Entry<String,Object>> attributeSet, Set<Map.Entry<String,String>> directiveSet) throws OpenDataException {
commit:0e0d5fd
/////////////////////////////////////////////////////////////////////////
1:     private final List<BundleWire> providedWires;
1:     private final List<BundleWire> requiredWires;
0:     public BundleWiringData(long bundleId, List<BundleCapability> capabilities, List<BundleRequirement> requirements,
0:             List<BundleWire> providedWires, List<BundleWire> requiredWires) {
1:         this.providedWires = providedWires;
/////////////////////////////////////////////////////////////////////////
0:             items.put(BundleRevisionsStateMBean.PROVIDED_WIRES, getProvidedWires());
/////////////////////////////////////////////////////////////////////////
1:     private CompositeData[] getProvidedWires() throws OpenDataException {
1:         return getWiresCompositeData(providedWires);
1:     }
1: 
1:         return getWiresCompositeData(requiredWires);
1:     }
1: 
1:     private CompositeData[] getWiresCompositeData(List<BundleWire> wires) throws OpenDataException {
1:         CompositeData[] reqWiresData = new CompositeData[wires.size()];
1:         for (int i=0; i < wires.size(); i++) {
1:             BundleWire requiredWire = wires.get(i);
commit:9058b64
/////////////////////////////////////////////////////////////////////////
0:             items.put(BundleRevisionsStateMBean.REQUIRED_WIRES, getRequiredWires());
0:             items.put(BundleRevisionsStateMBean.PROVIDED_WIRES, null); // TODO
commit:65b0a8e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             items.put(BundleRevisionsStateMBean.BUNDLE_WIRES_TYPE, getRequiredWires());
/////////////////////////////////////////////////////////////////////////
1: 
1:     private CompositeData[] getRequiredWires() throws OpenDataException {
0:         CompositeData[] reqWiresData = new CompositeData[requiredWires.size()];
0:         for (int i=0; i < requiredWires.size(); i++) {
0:             BundleWire requiredWire = requiredWires.get(i);
1:             Map<String, Object> wireItems = new HashMap<String, Object>();
1: 
1:             BundleCapability capability = requiredWire.getCapability();
0:             wireItems.put(BundleRevisionsStateMBean.PROVIDER_BUNDLE_ID, capability.getRevision().getBundle().getBundleId());
0:             wireItems.put(BundleRevisionsStateMBean.PROVIDER_BUNDLE_REVISION_ID, null); // TODO
0:             wireItems.put(BundleRevisionsStateMBean.BUNDLE_CAPABILITY,
0:                     getCapReqCompositeData(BundleRevisionsStateMBean.BUNDLE_CAPABILITY_TYPE,
1:                     capability.getNamespace(), capability.getAttributes().entrySet(), capability.getDirectives().entrySet()));
1: 
1:             BundleRequirement requirement = requiredWire.getRequirement();
0:             wireItems.put(BundleRevisionsStateMBean.REQUIRER_BUNDLE_ID, requirement.getRevision().getBundle().getBundleId());
0:             wireItems.put(BundleRevisionsStateMBean.REQUIRER_BUNDLE_REVISION_ID, null); // TODO
1: 
0:             wireItems.put(BundleRevisionsStateMBean.BUNDLE_REQUIREMENT,
0:                 getCapReqCompositeData(BundleRevisionsStateMBean.BUNDLE_REQUIREMENT_TYPE,
1:                 requirement.getNamespace(), requirement.getAttributes().entrySet(), requirement.getDirectives().entrySet()));
1: 
0:             CompositeData wireData = new CompositeDataSupport(BundleRevisionsStateMBean.BUNDLE_WIRE_TYPE, wireItems);
1:             reqWiresData[i] = wireData;
1:         }
1:         return reqWiresData;
1:     }
commit:1021f21
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.wiring.BundleWiring;
0:     private List<BundleWire> requiredWires;
1:         this.requiredWires = requiredWires;
0:             items.put(BundleRevisionsStateMBean.BUNDLE_REVISION_ID, null); // TODO
1: 
0:             CompositeData[] reqWiresData = new CompositeData[requiredWires.size()];
0:             for (int i=0; i < requiredWires.size(); i++) {
0:                 BundleWire requiredWire = requiredWires.get(i);
0:                 Map<String, Object> wireItems = new HashMap<String, Object>();
0:                 BundleWiring providerWiring = requiredWire.getProviderWiring();
0:                 wireItems.put(BundleRevisionsStateMBean.PROVIDER_BUNDLE_ID, providerWiring.getBundle().getBundleId());
0:                 wireItems.put(BundleRevisionsStateMBean.PROVIDER_BUNDLE_REVISION_ID, null); // TODO
0:                 BundleWiring requirerWiring = requiredWire.getRequirerWiring();
0:                 wireItems.put(BundleRevisionsStateMBean.REQUIRER_BUNDLE_ID, requirerWiring.getBundle().getBundleId());
0:                 wireItems.put(BundleRevisionsStateMBean.REQUIRER_BUNDLE_REVISION_ID, null); // TODO
0:                 BundleCapability capability = requiredWire.getCapability();
0:                 wireItems.put(BundleRevisionsStateMBean.BUNDLE_CAPABILITY,
0:                     getCapReqCompositeData(BundleRevisionsStateMBean.BUNDLE_CAPABILITY_TYPE,
0:                     capability.getNamespace(), capability.getAttributes().entrySet(), capability.getDirectives().entrySet()));
0:                 BundleRequirement requirement = requiredWire.getRequirement();
0:                 wireItems.put(BundleRevisionsStateMBean.BUNDLE_REQUIREMENT,
0:                     getCapReqCompositeData(BundleRevisionsStateMBean.BUNDLE_REQUIREMENT_TYPE,
0:                     requirement.getNamespace(), requirement.getAttributes().entrySet(), requirement.getDirectives().entrySet()));
1: 
0:                 CompositeData wireData = new CompositeDataSupport(BundleRevisionsStateMBean.BUNDLE_WIRE_TYPE, wireItems);
0:                 reqWiresData[i] = wireData;
1:             }
1: 
0:             items.put(BundleRevisionsStateMBean.BUNDLE_WIRES_TYPE, reqWiresData);
/////////////////////////////////////////////////////////////////////////
1:                 requirement.getNamespace(), requirement.getAttributes().entrySet(), requirement.getDirectives().entrySet());
commit:516dd36
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: import javax.management.openmbean.CompositeType;
/////////////////////////////////////////////////////////////////////////
0:     public BundleWiringData(long bundleId, List<BundleCapability> capabilities, List<BundleRequirement> requirements, List<BundleWire> requiredWires) {
/////////////////////////////////////////////////////////////////////////
0:             items.put(BundleRevisionsStateMBean.REQUIREMENTS, getRequirements());
0:             items.put(BundleRevisionsStateMBean.CAPABILITIES, getCapabilities());
/////////////////////////////////////////////////////////////////////////
1: 
0:     private CompositeData[] getCapabilities() throws OpenDataException {
0:         CompositeData[] capData = new CompositeData[capabilities.size()];
0:         for (int i=0; i < capabilities.size(); i++) {
0:             BundleCapability capability = capabilities.get(i);
0:             capData[i] = getCapReqCompositeData(BundleRevisionsStateMBean.BUNDLE_CAPABILITY_TYPE,
1:                 capability.getNamespace(), capability.getAttributes().entrySet(), capability.getDirectives().entrySet());
1:         }
1:         return capData;
1:     }
1: 
0:     private CompositeData[] getRequirements() throws OpenDataException {
0:         CompositeData [] reqData = new CompositeData[requirements.size()];
0:         for (int i=0; i < requirements.size(); i++) {
0:             BundleRequirement requirement = requirements.get(i);
0:             reqData[i] = getCapReqCompositeData(BundleRevisionsStateMBean.BUNDLE_REQUIREMENT_TYPE,
0:                     requirement.getNamespace(), requirement.getAttributes().entrySet(), requirement.getDirectives().entrySet());
1:         }
1:         return reqData;
1:     }
1: 
0:     private CompositeData getCapReqCompositeData(CompositeType type, String namespace, Set<Map.Entry<String,Object>> attributeSet, Set<Map.Entry<String,String>> directiveSet) throws OpenDataException {
1:         Map<String, Object> reqItems = new HashMap<String, Object>();
1: 
0:         TabularData attributes = new TabularDataSupport(BundleRevisionsStateMBean.ATTRIBUTES_TYPE);
1:         for (Map.Entry<String, Object> entry : attributeSet) {
1:             PropertyData<?> pd = PropertyData.newInstance(entry.getKey(), entry.getValue());
1:             attributes.put(pd.toCompositeData());
1:         }
0:         reqItems.put(BundleRevisionsStateMBean.ATTRIBUTES, attributes);
1: 
0:         TabularData directives = new TabularDataSupport(BundleRevisionsStateMBean.DIRECTIVES_TYPE);
1:         for (Map.Entry<String, String> entry : directiveSet) {
0:             CompositeData directive = new CompositeDataSupport(BundleRevisionsStateMBean.DIRECTIVE_TYPE,
0:                 new String[] { BundleRevisionsStateMBean.KEY, BundleRevisionsStateMBean.VALUE },
1:                 new Object[] { entry.getKey(), entry.getValue() });
1:             directives.put(directive);
1:         }
0:         reqItems.put(BundleRevisionsStateMBean.DIRECTIVES, directives);
0:         reqItems.put(BundleRevisionsStateMBean.NAMESPACE, namespace);
1: 
1:         CompositeData req = new CompositeDataSupport(type, reqItems);
1:         return req;
1:     }
commit:fd3ae03
/////////////////////////////////////////////////////////////////////////
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: import org.osgi.framework.wiring.BundleCapability;
1: import org.osgi.framework.wiring.BundleRequirement;
1:     private final List<BundleCapability> capabilities;
0:     private final String namespace;
1:     private final List<BundleRequirement> requirements;
0:     public BundleWiringData(long bundleId, String namespace, List<BundleCapability> capabilities, List<BundleRequirement> requirements, List<BundleWire> requiredWires) {
0:         this.namespace = namespace;
1:         this.capabilities = capabilities;
1:         this.requirements = requirements;
/////////////////////////////////////////////////////////////////////////
0:             CompositeData [] reqData = new CompositeData[requirements.size()];
0:             for (int i=0; i < requirements.size(); i++) {
0:                 BundleRequirement requirement = requirements.get(i);
0:                 Map<String, Object> reqItems = new HashMap<String, Object>();
1: 
0:                 TabularData attributes = new TabularDataSupport(BundleRevisionsStateMBean.ATTRIBUTES_TYPE);
0:                 for (Map.Entry<String, Object> entry : requirement.getAttributes().entrySet()) {
0:                     PropertyData<?> pd = PropertyData.newInstance(entry.getKey(), entry.getValue());
0:                     attributes.put(pd.toCompositeData());
1:                 }
0:                 reqItems.put(BundleRevisionsStateMBean.ATTRIBUTES, attributes);
1: 
0:                 TabularData directives = new TabularDataSupport(BundleRevisionsStateMBean.DIRECTIVES_TYPE);
0:                 for (Map.Entry<String, String> entry : requirement.getDirectives().entrySet()) {
0:                     CompositeData directive = new CompositeDataSupport(BundleRevisionsStateMBean.DIRECTIVE_TYPE,
0:                         new String[] { BundleRevisionsStateMBean.KEY, BundleRevisionsStateMBean.VALUE },
0:                         new Object[] { entry.getKey(), entry.getValue() });
0:                     directives.put(directive);
1:                 }
0:                 reqItems.put(BundleRevisionsStateMBean.DIRECTIVES, directives);
0:                 reqItems.put(BundleRevisionsStateMBean.NAMESPACE, requirement.getNamespace());
1: 
0:                 CompositeData req = new CompositeDataSupport(BundleRevisionsStateMBean.BUNDLE_REQUIREMENT_TYPE, reqItems);
0:                 reqData[i] = req;
1:             }
1: 
0: //            CompositeDataSupport directive = new CompositeDataSupport(BundleRevisionsStateMBean.DIRECTIVE_TYPE, new String [] {"Key", "Value"}, new Object [] {"Foo", "Bar"});
0: //            directives.put(directive);
0: //            reqItems.put(BundleRevisionsStateMBean.DIRECTIVES, directives);
0: //            reqItems.put(BundleRevisionsStateMBean.NAMESPACE, namespace);
0: //            CompositeDataSupport requirements = new CompositeDataSupport(BundleRevisionsStateMBean.BUNDLE_REQUIREMENT_TYPE, reqItems);
1: 
0:             items.put(BundleRevisionsStateMBean.REQUIREMENTS, reqData);
commit:8c01963
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import org.osgi.framework.wiring.BundleWire;
0:     public BundleWiringData(long bundleId, List<BundleWire> requiredWires) {
1:             Map<String, Object> items = new HashMap<String, Object>();
0:             items.put(BundleRevisionsStateMBean.BUNDLE_ID, bundleId);
0:             items.put(BundleRevisionsStateMBean.BUNDLE_REVISION_ID, null);
0: 
0:             Map<String, Object> reqItems = new HashMap<String, Object>();
0:             reqItems.put(BundleRevisionsStateMBean.ATTRIBUTES, null);
0:             reqItems.put(BundleRevisionsStateMBean.DIRECTIVES, null);
0:             reqItems.put(BundleRevisionsStateMBean.NAMESPACE, "org.foo.bar");
0:             CompositeDataSupport requirements = new CompositeDataSupport(BundleRevisionsStateMBean.BUNDLE_REQUIREMENT_TYPE, reqItems);
0: 
0:             items.put(BundleRevisionsStateMBean.REQUIREMENTS, new CompositeData [] {requirements});
0:             items.put(BundleRevisionsStateMBean.CAPABILITIES, null);
0:             items.put(BundleRevisionsStateMBean.BUNDLE_WIRES_TYPE, null);
0: 
commit:bf5a863
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
0: 
1: import java.util.HashMap;
1: import java.util.Map;
0: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
0: 
0: import org.osgi.jmx.framework.BundleRevisionsStateMBean;
0: 
1: public class BundleWiringData {
0: 
1:     private final long bundleId;
0: 
0:     public BundleWiringData(long bundleId) {
1:         this.bundleId = bundleId;
0:     }
0: 
1:     public CompositeData toCompositeData() {
0:         Map<String, Object> items = new HashMap<String, Object>();
0:         items.put(BundleRevisionsStateMBean.BUNDLE_ID, bundleId);
0:         items.put(BundleRevisionsStateMBean.BUNDLE_REVISION_ID, null);
0:         items.put(BundleRevisionsStateMBean.REQUIREMENTS, null);
0:         items.put(BundleRevisionsStateMBean.CAPABILITIES, null);
0:         items.put(BundleRevisionsStateMBean.BUNDLE_WIRES_TYPE, null);
0: 
1:         try {
0:             return new CompositeDataSupport(BundleRevisionsStateMBean.BUNDLE_WIRING_TYPE, items);
1:         } catch (OpenDataException e) {
0:             throw new IllegalStateException("Can't create CompositeData" + e);
0:         }
0:     }
0: }
============================================================================