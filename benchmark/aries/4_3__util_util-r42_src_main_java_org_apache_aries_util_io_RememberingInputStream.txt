1:4b85880: /*
1:4b85880:  * Licensed to the Apache Software Foundation (ASF) under one
1:4b85880:  * or more contributor license agreements.  See the NOTICE file
1:4b85880:  * distributed with this work for additional information
1:4b85880:  * regarding copyright ownership.  The ASF licenses this file
1:4b85880:  * to you under the Apache License, Version 2.0 (the
1:4b85880:  * "License"); you may not use this file except in compliance
1:4b85880:  * with the License.  You may obtain a copy of the License at
1:4b85880:  *
1:4b85880:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4b85880:  *
1:4b85880:  * Unless required by applicable law or agreed to in writing,
1:4b85880:  * software distributed under the License is distributed on an
1:4b85880:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4b85880:  * KIND, either express or implied.  See the License for the
1:4b85880:  * specific language governing permissions and limitations
1:4b85880:  * under the License.
1:4b85880:  */
1:4b85880: 
1:c6cb34d: package org.apache.aries.util.io;
1:c6cb34d: 
1:c6cb34d: import java.io.IOException;
1:c6cb34d: import java.io.InputStream;
1:c6cb34d: 
1:12b7bb3: import org.apache.aries.util.internal.MessageUtil;
1:12b7bb3: 
1:c6cb34d: /**
1:c6cb34d:  * This class can be used to buffer an arbitrary amount of content from an input stream and be able to reset to 
1:c6cb34d:  * the start.
1:c6cb34d:  */
1:c6cb34d: public class RememberingInputStream extends InputStream {
1:c6cb34d: 
1:c6cb34d:   /** The size by which to grow our array */
1:c6cb34d:   private static final int bufferGrowthSize = 0x4000;
1:c6cb34d:   /** The bytes that have been read so far */
1:c6cb34d:   private byte[] bytes = new byte[bufferGrowthSize];
1:c6cb34d:   /** Index of the next empty entry in the array */
1:c6cb34d:   private int pos = 0;
1:c6cb34d:   /** The input stream that actually holds the data */
1:c6cb34d:   private final InputStream stream;
1:c6cb34d:   /** Index of the last valid byte in the byte array */
1:c6cb34d:   private int maxRead = -1;
1:c6cb34d:   /** The point to reset to */
1:c6cb34d:   private int markPoint = -1;
1:c6cb34d:   
1:c6cb34d:   
1:c6cb34d:   public RememberingInputStream(InputStream in) throws IOException{
1:c6cb34d:     stream = in;
1:c6cb34d:     // Pre fill with data that we know we're going to need - it's 
1:c6cb34d:     // more efficient than the single byte reads are - hopefully
1:c6cb34d:     // someone reading a lot of data will do reads in bulk
1:c6cb34d:     
1:c6cb34d:     maxRead = stream.read(bytes) - 1;
1:c6cb34d:   }
1:c6cb34d: 
1:c6cb34d:   @Override
1:c6cb34d:   public int read() throws IOException {
1:c6cb34d:     
1:c6cb34d:     if(pos <= maxRead)
1:c6cb34d:     {
1:c6cb34d:       //We can't return the byte directly, because it is signed
1:c6cb34d:       //We can pretend this is an unsigned byte by using boolean
1:c6cb34d:       //& to set the low end byte of an int.
1:c6cb34d:       return bytes[pos++] & 0xFF;
1:c6cb34d:     } else {
1:c6cb34d:       int i = stream.read();
1:c6cb34d:       if(i<0)
1:c6cb34d:         return i;
1:c6cb34d:     
1:c6cb34d:       ensureCapacity(0);
1:c6cb34d:       bytes[pos++] = (byte) i;
1:c6cb34d:       return i;
1:c6cb34d:     }
1:c6cb34d:   }
1:c6cb34d: 
1:c6cb34d:   /**
1:c6cb34d:    * Ensure our internal byte array can hold enough data
1:c6cb34d:    * @param i one less than the number of bytes that need
1:c6cb34d:    *          to be held.
1:c6cb34d:    */
1:c6cb34d:   private void ensureCapacity(int i) {
1:c6cb34d:     if((pos + i) >= bytes.length) {
1:c6cb34d:       byte[] tmp = bytes;
1:c6cb34d:       int newLength = bytes.length + bufferGrowthSize;
1:c6cb34d:       while(newLength < pos + i) {
1:c6cb34d:         newLength += bufferGrowthSize;
1:c6cb34d:       }
1:c6cb34d:       bytes = new byte[newLength];
1:c6cb34d:       System.arraycopy(tmp, 0, bytes, 0, (maxRead >= pos) ? maxRead + 1 : pos);
1:c6cb34d:     }
1:c6cb34d:   }
1:c6cb34d: 
1:c6cb34d:   @Override
1:c6cb34d:   public int read(byte[] b) throws IOException {
1:c6cb34d:     return read(b, 0, b.length);
1:c6cb34d:   }
1:c6cb34d: 
1:c6cb34d:   @Override
1:c6cb34d:   public int read(byte[] b, int off, int len) throws IOException {
1:c6cb34d:     if(pos <= maxRead) {
1:c6cb34d:       if(pos + len <= maxRead)
1:c6cb34d:       {
1:c6cb34d:         System.arraycopy(bytes, pos, b, off, len);
1:c6cb34d:         pos += len;
1:c6cb34d:         return len;
1:c6cb34d:       } else {
1:c6cb34d:         int lengthLeftOfBuffer = (maxRead - pos) + 1;
1:c6cb34d:         System.arraycopy(bytes, pos, b, off, lengthLeftOfBuffer);
1:c6cb34d:         int read = stream.read(b, off + lengthLeftOfBuffer, len - lengthLeftOfBuffer);
1:c6cb34d:         if(read < 0) {
1:c6cb34d:           pos += lengthLeftOfBuffer;
1:c6cb34d:           return lengthLeftOfBuffer;
1:c6cb34d:         }
1:c6cb34d:         ensureCapacity(lengthLeftOfBuffer + read - 1);
1:c6cb34d:         System.arraycopy(b, off + lengthLeftOfBuffer, bytes, maxRead + 1, read);
1:c6cb34d:         pos +=  (lengthLeftOfBuffer + read);
1:c6cb34d:         return lengthLeftOfBuffer + read;
1:c6cb34d:       }
1:c6cb34d:     } else {
1:c6cb34d:       int i = stream.read(b, off, len);
1:c6cb34d:       if(i<0)
1:c6cb34d:         return i;
1:c6cb34d:       ensureCapacity(i - 1);
1:c6cb34d:       System.arraycopy(b, off, bytes, pos, i);
1:c6cb34d:       pos += i;
1:c6cb34d:       return i;
1:c6cb34d:     }
1:c6cb34d:   }
1:c6cb34d: 
1:c6cb34d:   @Override
1:c6cb34d:   public long skip(long n) throws IOException {
1:12b7bb3:     throw new IOException(MessageUtil.getMessage("UTIL0017E"));
1:c6cb34d:   }
1:c6cb34d: 
1:c6cb34d:   @Override
1:c6cb34d:   public int available() throws IOException {
1:c6cb34d:     if(pos <= maxRead) 
1:c6cb34d:       return (maxRead - pos) + 1;
1:c6cb34d:     else 
1:c6cb34d:       return stream.available(); 
1:c6cb34d:   }
1:c6cb34d: 
1:c6cb34d:   @Override
1:c6cb34d:   public synchronized void mark(int readlimit) {
1:c6cb34d:     markPoint = pos;
1:c6cb34d:   }
1:c6cb34d: 
1:c6cb34d:   @Override
1:c6cb34d:   public synchronized void reset() throws IOException {
1:c6cb34d:     if(maxRead < pos)
1:c6cb34d:       maxRead = pos - 1;
1:c6cb34d:     pos = markPoint;
1:c6cb34d:   }
1:c6cb34d: 
1:c6cb34d:   @Override
1:c6cb34d:   public boolean markSupported() {
1:c6cb34d:     return true;
1:c6cb34d:   }
1:c6cb34d: 
1:c6cb34d:   /**
1:c6cb34d:    * Noop. Does not close the passed in archive, which is kept open for further reading.
1:c6cb34d:    */
1:c6cb34d:   @Override
1:c6cb34d:   public void close() throws IOException {
1:c6cb34d:     //No op, don't close the parent.
1:c6cb34d:   }
1:c6cb34d:   
1:c6cb34d:   /**
1:c6cb34d:    * Actually closes the underlying InputStream. Call this method instead of close, which is implemented as a no-op.
1:c6cb34d:    * Alternatively call close directly on the parent.
1:c6cb34d:    * @throws IOException
1:c6cb34d:    */
1:c6cb34d:   public void closeUnderlying() throws IOException {
1:c6cb34d:       stream.close();
1:c6cb34d:   }
1:c6cb34d: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:4b85880
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:12b7bb3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.internal.MessageUtil;
1: 
/////////////////////////////////////////////////////////////////////////
1:     throw new IOException(MessageUtil.getMessage("UTIL0017E"));
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.io;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: /**
1:  * This class can be used to buffer an arbitrary amount of content from an input stream and be able to reset to 
1:  * the start.
1:  */
1: public class RememberingInputStream extends InputStream {
1: 
1:   /** The size by which to grow our array */
1:   private static final int bufferGrowthSize = 0x4000;
1:   /** The bytes that have been read so far */
1:   private byte[] bytes = new byte[bufferGrowthSize];
1:   /** Index of the next empty entry in the array */
1:   private int pos = 0;
1:   /** The input stream that actually holds the data */
1:   private final InputStream stream;
1:   /** Index of the last valid byte in the byte array */
1:   private int maxRead = -1;
1:   /** The point to reset to */
1:   private int markPoint = -1;
1:   
1:   
1:   public RememberingInputStream(InputStream in) throws IOException{
1:     stream = in;
1:     // Pre fill with data that we know we're going to need - it's 
1:     // more efficient than the single byte reads are - hopefully
1:     // someone reading a lot of data will do reads in bulk
1:     
1:     maxRead = stream.read(bytes) - 1;
1:   }
1: 
1:   @Override
1:   public int read() throws IOException {
1:     
1:     if(pos <= maxRead)
1:     {
1:       //We can't return the byte directly, because it is signed
1:       //We can pretend this is an unsigned byte by using boolean
1:       //& to set the low end byte of an int.
1:       return bytes[pos++] & 0xFF;
1:     } else {
1:       int i = stream.read();
1:       if(i<0)
1:         return i;
1:     
1:       ensureCapacity(0);
1:       bytes[pos++] = (byte) i;
1:       return i;
1:     }
1:   }
1: 
1:   /**
1:    * Ensure our internal byte array can hold enough data
1:    * @param i one less than the number of bytes that need
1:    *          to be held.
1:    */
1:   private void ensureCapacity(int i) {
1:     if((pos + i) >= bytes.length) {
1:       byte[] tmp = bytes;
1:       int newLength = bytes.length + bufferGrowthSize;
1:       while(newLength < pos + i) {
1:         newLength += bufferGrowthSize;
1:       }
1:       bytes = new byte[newLength];
1:       System.arraycopy(tmp, 0, bytes, 0, (maxRead >= pos) ? maxRead + 1 : pos);
1:     }
1:   }
1: 
1:   @Override
1:   public int read(byte[] b) throws IOException {
1:     return read(b, 0, b.length);
1:   }
1: 
1:   @Override
1:   public int read(byte[] b, int off, int len) throws IOException {
1:     if(pos <= maxRead) {
1:       if(pos + len <= maxRead)
1:       {
1:         System.arraycopy(bytes, pos, b, off, len);
1:         pos += len;
1:         return len;
1:       } else {
1:         int lengthLeftOfBuffer = (maxRead - pos) + 1;
1:         System.arraycopy(bytes, pos, b, off, lengthLeftOfBuffer);
1:         int read = stream.read(b, off + lengthLeftOfBuffer, len - lengthLeftOfBuffer);
1:         if(read < 0) {
1:           pos += lengthLeftOfBuffer;
1:           return lengthLeftOfBuffer;
1:         }
1:         ensureCapacity(lengthLeftOfBuffer + read - 1);
1:         System.arraycopy(b, off + lengthLeftOfBuffer, bytes, maxRead + 1, read);
1:         pos +=  (lengthLeftOfBuffer + read);
1:         return lengthLeftOfBuffer + read;
1:       }
1:     } else {
1:       int i = stream.read(b, off, len);
1:       if(i<0)
1:         return i;
1:       ensureCapacity(i - 1);
1:       System.arraycopy(b, off, bytes, pos, i);
1:       pos += i;
1:       return i;
1:     }
1:   }
1: 
1:   @Override
1:   public long skip(long n) throws IOException {
0:     throw new IOException("Skip is unsupported");
1:   }
1: 
1:   @Override
1:   public int available() throws IOException {
1:     if(pos <= maxRead) 
1:       return (maxRead - pos) + 1;
1:     else 
1:       return stream.available(); 
1:   }
1: 
1:   @Override
1:   public synchronized void mark(int readlimit) {
1:     markPoint = pos;
1:   }
1: 
1:   @Override
1:   public synchronized void reset() throws IOException {
1:     if(maxRead < pos)
1:       maxRead = pos - 1;
1:     pos = markPoint;
1:   }
1: 
1:   @Override
1:   public boolean markSupported() {
1:     return true;
1:   }
1: 
1:   /**
1:    * Noop. Does not close the passed in archive, which is kept open for further reading.
1:    */
1:   @Override
1:   public void close() throws IOException {
1:     //No op, don't close the parent.
1:   }
1:   
1:   /**
1:    * Actually closes the underlying InputStream. Call this method instead of close, which is implemented as a no-op.
1:    * Alternatively call close directly on the parent.
1:    * @throws IOException
1:    */
1:   public void closeUnderlying() throws IOException {
1:       stream.close();
1:   }
1: }
============================================================================