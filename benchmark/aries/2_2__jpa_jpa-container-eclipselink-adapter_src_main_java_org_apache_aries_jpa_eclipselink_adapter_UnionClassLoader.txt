1:35b5b11: /*
1:35b5b11: // * Licensed to the Apache Software Foundation (ASF) under one
1:35b5b11:  * or more contributor license agreements.  See the NOTICE file
1:35b5b11:  * distributed with this work for additional information
1:35b5b11:  * regarding copyright ownership.  The ASF licenses this file
1:35b5b11:  * to you under the Apache License, Version 2.0 (the
1:35b5b11:  * "License"); you may not use this file except in compliance
1:35b5b11:  * with the License.  You may obtain a copy of the License at
1:35b5b11:  *
1:35b5b11:  *   http://www.apache.org/licenses/LICENSE-2.0
1:35b5b11:  *
1:35b5b11:  * Unless required by applicable law or agreed to in writing,
1:35b5b11:  * software distributed under the License is distributed on an
1:35b5b11:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:35b5b11:  * KIND, either express or implied.  See the License for the
1:35b5b11:  * specific language governing permissions and limitations
1:35b5b11:  * under the License.
1:35b5b11:  */
1:35b5b11: package org.apache.aries.jpa.eclipselink.adapter;
4:35b5b11: 
1:35b5b11: import java.io.ByteArrayOutputStream;
1:d2f8764: import java.io.Closeable;
1:35b5b11: import java.io.IOException;
1:35b5b11: import java.io.InputStream;
1:d2f8764: import java.io.OutputStream;
1:06491b0: import java.util.Collection;
1:06491b0: import java.util.HashMap;
1:06491b0: import java.util.Map;
1:35b5b11: 
1:35b5b11: import org.osgi.framework.Bundle;
1:35b5b11: import org.osgi.framework.BundleReference;
1:ec3ea65: import org.slf4j.Logger;
1:ec3ea65: import org.slf4j.LoggerFactory;
1:35b5b11: 
1:ec3ea65: public final class UnionClassLoader extends ClassLoader implements BundleReference {
1:39b319a:     private static final String ORG_OSGI_FRAMEWORK = "org.osgi.framework.";
1:39b319a:     private static final int DOT_INDEX = ORG_OSGI_FRAMEWORK.lastIndexOf('.');
1:ec3ea65:     private static final Logger LOG = LoggerFactory.getLogger(UnionClassLoader.class);
1:35b5b11:     private final Bundle eclipseLinkBundle;
1:35b5b11:     private final Bundle adaptorBundle;
1:06491b0:     private final Map<String, Class<?>> registeredPlugins = new HashMap<String, Class<?>>();
1:35b5b11: 
1:06491b0:     public UnionClassLoader(ClassLoader parentLoader, Bundle b, Bundle adaptor, Map<String, Object> arg1) {
1:35b5b11:         super(parentLoader);
1:35b5b11:         this.eclipseLinkBundle = b;
1:35b5b11:         this.adaptorBundle = adaptor;
1:06491b0:         
1:06491b0:         //Populate the plugins
1:06491b0:         
1:06491b0:         Object o = arg1 == null ? null : arg1.get("org.apache.aries.jpa.eclipselink.plugin.types");
1:06491b0:        
1:06491b0:         if(o instanceof Class) {
1:06491b0:         	Class<?> c = (Class<?>) o;
1:06491b0:         	registeredPlugins.put(c.getName(), c);
1:06491b0:         } else if (o instanceof Collection) {
1:06491b0:         	for(Object o2 : (Collection<?>) o) {
1:06491b0:         		Class<?> c = (Class<?>) o2;
1:06491b0:             	registeredPlugins.put(c.getName(), c);
1:06491b0:         	}
1:06491b0:         }
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     protected Class<?> findClass(String name) throws ClassNotFoundException {
1:06491b0:     	if(registeredPlugins.containsKey(name)) {
1:06491b0:     		return registeredPlugins.get(name);
1:06491b0:     	}
1:ec3ea65:         if ("org.apache.aries.jpa.eclipselink.adapter.platform.OSGiTSServer".equals(name) 
1:ec3ea65:             || "org.apache.aries.jpa.eclipselink.adapter.platform.OSGiTSWrapper".equals(name)) {
1:ec3ea65:             return loadTempClass(name);
1:ec3ea65:         } else if (name.startsWith(ORG_OSGI_FRAMEWORK) && name.lastIndexOf('.') == DOT_INDEX) {
1:39b319a:             return adaptorBundle.loadClass(name);
6:ec3ea65:         }
1:35b5b11:         return eclipseLinkBundle.loadClass(name);
1:ec3ea65:     }
1:35b5b11: 
1:ec3ea65:     private Class<?> loadTempClass(String name) throws ClassNotFoundException, ClassFormatError {
1:ec3ea65:         InputStream is = getClass().getClassLoader().getResourceAsStream(name.replace('.', '/') + ".class");
1:ec3ea65:         if (is == null) {
1:35b5b11:             throw new ClassNotFoundException(name);
1:ec3ea65:         }
1:35b5b11:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:35b5b11:         try {
1:ec3ea65:             copy(is, baos);
1:35b5b11:         } catch (IOException ioe) {
1:35b5b11:             throw new ClassNotFoundException(name, ioe);
1:35b5b11:         }
1:35b5b11:         return defineClass(name, baos.toByteArray(), 0, baos.size());
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public Bundle getBundle() {
1:35b5b11:         return adaptorBundle;
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     private static void copy(InputStream in, OutputStream out) throws IOException {
2:ec3ea65:         try {
1:ec3ea65:             int len;
1:ec3ea65:             byte[] b = new byte[1024];
1:ec3ea65:             while ((len = in.read(b)) != -1) {
1:ec3ea65:                 out.write(b, 0, len);
1:35b5b11:             }
1:ec3ea65:         } finally {
1:ec3ea65:             close(in);
1:35b5b11:         }
1:ec3ea65:     }
1:35b5b11: 
1:ec3ea65:     private static void close(Closeable c) {
1:ec3ea65:         try {
1:ec3ea65:             if (c != null) {
1:ec3ea65:                 c.close();
1:ec3ea65:             }
1:ec3ea65:         } catch (IOException e) {
1:ec3ea65:             LOG.debug("Exception closing", e);
1:ec3ea65:         }
1:ec3ea65:     }
1:ec3ea65: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:06491b0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     private final Map<String, Class<?>> registeredPlugins = new HashMap<String, Class<?>>();
1:     public UnionClassLoader(ClassLoader parentLoader, Bundle b, Bundle adaptor, Map<String, Object> arg1) {
1:         
1:         //Populate the plugins
1:         
1:         Object o = arg1 == null ? null : arg1.get("org.apache.aries.jpa.eclipselink.plugin.types");
1:        
1:         if(o instanceof Class) {
1:         	Class<?> c = (Class<?>) o;
1:         	registeredPlugins.put(c.getName(), c);
1:         } else if (o instanceof Collection) {
1:         	for(Object o2 : (Collection<?>) o) {
1:         		Class<?> c = (Class<?>) o2;
1:             	registeredPlugins.put(c.getName(), c);
1:         	}
1:         }
1:     	if(registeredPlugins.containsKey(name)) {
1:     		return registeredPlugins.get(name);
1:     	}
commit:39b319a
/////////////////////////////////////////////////////////////////////////
1:   private static final String ORG_OSGI_FRAMEWORK = "org.osgi.framework.";
1:   private static final int DOT_INDEX = ORG_OSGI_FRAMEWORK.lastIndexOf('.');
/////////////////////////////////////////////////////////////////////////
0:     } else if (name.startsWith(ORG_OSGI_FRAMEWORK) &&
0:         name.lastIndexOf('.') == DOT_INDEX) {
1:       return adaptorBundle.loadClass(name);
commit:35b5b11
/////////////////////////////////////////////////////////////////////////
1: /*
1: // * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.eclipselink.adapter;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
0: import org.apache.aries.util.io.IOUtils;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleReference;
1: 
0: public final class UnionClassLoader extends ClassLoader implements BundleReference{
1:   
1:   private final Bundle eclipseLinkBundle;
1:   private final Bundle adaptorBundle;
1:   
0:   public UnionClassLoader(ClassLoader parentLoader, Bundle b, Bundle adaptor) {
1:     super(parentLoader);
1:     this.eclipseLinkBundle = b;
1:     this.adaptorBundle = adaptor;
1:   }
1: 
1:   protected Class<?> findClass(String name) throws ClassNotFoundException {
1:     
0:     if("org.apache.aries.jpa.eclipselink.adapter.platform.OSGiTSServer".equals(name) ||
0:         "org.apache.aries.jpa.eclipselink.adapter.platform.OSGiTSWrapper".equals(name)) {
1:       
1:       ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:       InputStream is = getClass().getClassLoader().getResourceAsStream(
0:           name.replace('.', '/') + ".class");
1:       
0:       if(is == null)
1:         throw new ClassNotFoundException(name);
1:       
1:       
1:       try {
0:         IOUtils.copy(is, baos);
1:       } catch (IOException ioe) {
1:         throw new ClassNotFoundException(name, ioe);
1:       }
1:       return defineClass(name, baos.toByteArray(), 0, baos.size());
1:     }
1:     return eclipseLinkBundle.loadClass(name);
1:   }
1: 
1:   public Bundle getBundle() {
1:     return adaptorBundle;
1:   }
1: }
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: public final class UnionClassLoader extends ClassLoader implements BundleReference {
0:     private static final String ORG_OSGI_FRAMEWORK = "org.osgi.framework.";
0:     private static final int DOT_INDEX = ORG_OSGI_FRAMEWORK.lastIndexOf('.');
1:     private static final Logger LOG = LoggerFactory.getLogger(UnionClassLoader.class);
0:     private final Bundle eclipseLinkBundle;
0:     private final Bundle adaptorBundle;
0:     public UnionClassLoader(ClassLoader parentLoader, Bundle b, Bundle adaptor) {
0:         super(parentLoader);
0:         this.eclipseLinkBundle = b;
0:         this.adaptorBundle = adaptor;
1:     @Override
0:     protected Class<?> findClass(String name) throws ClassNotFoundException {
1:         if ("org.apache.aries.jpa.eclipselink.adapter.platform.OSGiTSServer".equals(name) 
1:             || "org.apache.aries.jpa.eclipselink.adapter.platform.OSGiTSWrapper".equals(name)) {
1:             return loadTempClass(name);
1:         } else if (name.startsWith(ORG_OSGI_FRAMEWORK) && name.lastIndexOf('.') == DOT_INDEX) {
0:             return adaptorBundle.loadClass(name);
1:         }
0:         return eclipseLinkBundle.loadClass(name);
1:     }
1:     private Class<?> loadTempClass(String name) throws ClassNotFoundException, ClassFormatError {
1:         InputStream is = getClass().getClassLoader().getResourceAsStream(name.replace('.', '/') + ".class");
1:         if (is == null) {
0:             throw new ClassNotFoundException(name);
1:         }
0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         try {
1:             copy(is, baos);
0:         } catch (IOException ioe) {
0:             throw new ClassNotFoundException(name, ioe);
1:         }
0:         return defineClass(name, baos.toByteArray(), 0, baos.size());
1:     }
0: 
1:     @Override
0:     public Bundle getBundle() {
0:         return adaptorBundle;
1:     }
0: 
1:     private static void copy(InputStream in, OutputStream out) throws IOException {
1:         try {
1:             int len;
1:             byte[] b = new byte[1024];
1:             while ((len = in.read(b)) != -1) {
1:                 out.write(b, 0, len);
1:             }
1:         } finally {
1:             close(in);
1:         }
1:     }
0: 
1:     private static void close(Closeable c) {
1:         try {
1:             if (c != null) {
1:                 c.close();
1:             }
1:         } catch (IOException e) {
1:             LOG.debug("Exception closing", e);
1:         }
1:     }
1: }
commit:d2f8764
/////////////////////////////////////////////////////////////////////////
1: import java.io.Closeable;
1: import java.io.OutputStream;
/////////////////////////////////////////////////////////////////////////
0:         copy(is, baos);
/////////////////////////////////////////////////////////////////////////
0:   
0: 	private static void copy(InputStream in, OutputStream out)
0: 			throws IOException {
0: 		try {
0: 			int len;
0: 			byte[] b = new byte[1024];
0: 			while ((len = in.read(b)) != -1)
0: 				out.write(b, 0, len);
0: 		} finally {
0: 			close(in);
0: 		}
0: 	}
0: 
0: 	private static void close(Closeable c) {
0: 		try {
0: 			if (c != null)
0: 				c.close();
0: 		} catch (IOException e) {
0: 			c = null;
0: 		}
0: 	}
============================================================================