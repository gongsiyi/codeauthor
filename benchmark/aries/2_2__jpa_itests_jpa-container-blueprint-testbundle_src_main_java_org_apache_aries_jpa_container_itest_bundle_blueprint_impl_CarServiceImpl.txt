1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:e5c89d2: package org.apache.aries.jpa.container.itest.bundle.blueprint.impl;
3:2cfdf52: 
1:2cfdf52: import java.util.Collection;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.EntityManager;
1:2cfdf52: 
1:e5c89d2: import org.apache.aries.jpa.container.itest.entities.Car;
1:2cfdf52: 
1:bdbf3e8: public class CarServiceImpl extends AbstractCarServiceImpl {
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public Car getCar(String id) {
1:2cfdf52:         return em.find(Car.class, id);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void addCar(Car car) {
2:2cfdf52:         em.persist(car);
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public Collection<Car> getCars() {
1:bdbf3e8:         return em.createQuery("select c from Car c", Car.class).getResultList();
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void updateCar(Car car) {
1:e74c870:         em.merge(car);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void deleteCar(String id) {
1:0d59ccb:         em.remove(em.find(Car.class, id));
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void setEm(EntityManager em) {
1:2cfdf52:         this.em = em;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:e74c870
/////////////////////////////////////////////////////////////////////////
1:         em.merge(car);
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1:         em.remove(em.find(Car.class, id));
commit:e5c89d2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.container.itest.bundle.blueprint.impl;
1: import org.apache.aries.jpa.container.itest.entities.Car;
/////////////////////////////////////////////////////////////////////////
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.jpa.itest.testbundle.service.impl;
1: 
1: import java.util.Collection;
1: 
1: import javax.persistence.EntityManager;
0: import javax.persistence.PersistenceContext;
1: 
0: import org.apache.aries.jpa.itest.testbundle.entities.Car;
0: import org.apache.aries.jpa.itest.testbundle.service.CarService;
1: 
1: 
0: public class CarServiceImpl implements CarService {
1: 
0: 	@PersistenceContext(unitName="test_unit_blueprint")
0: 	EntityManager em;
1: 	
1: 	@Override
1: 	public Car getCar(String id) {
1: 		return em.find(Car.class, id);
1: 	}
1: 
1: 	@Override
1: 	public void addCar(Car car) {
1: 		em.persist(car);
0: 		em.flush();
1: 	}
1: 
1: 	public Collection<Car> getCars() {
0: 		return em.createQuery("select c from Car c", Car.class)
0: 			.getResultList();
1: 	}
1: 
1: 	@Override
1: 	public void updateCar(Car car) {
1: 		em.persist(car);
1: 	}
1: 
1: 	@Override
1: 	public void deleteCar(String id) {
0: 		em.remove(getCar(id));
1: 	}
1: 
1: 	public void setEm(EntityManager em) {
1: 		this.em = em;
1: 	}
1: 	
1: }
author:Giuseppe Gerla
-------------------------------------------------------------------------------
commit:bdbf3e8
/////////////////////////////////////////////////////////////////////////
1: public class CarServiceImpl extends AbstractCarServiceImpl {
0:     @Override
0:     public Car getCar(String id) {
0:         return em.find(Car.class, id);
0:     }
0:     @Override
0:     public void addCar(Car car) {
0:         em.persist(car);
0:         em.flush();
0:     }
0:     public Collection<Car> getCars() {
1:         return em.createQuery("select c from Car c", Car.class).getResultList();
0:     }
0:     @Override
0:     public void updateCar(Car car) {
0:         em.persist(car);
0:     }
0:     @Override
0:     public void deleteCar(String id) {
0:         em.remove(getCar(id));
0:     }
0:     public void setEm(EntityManager em) {
0:         this.em = em;
0:     }
============================================================================