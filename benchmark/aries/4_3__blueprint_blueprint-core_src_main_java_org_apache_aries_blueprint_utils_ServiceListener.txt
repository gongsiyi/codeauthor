1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  * contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  * this work for additional information regarding copyright ownership.
1:f13c6ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  * (the "License"); you may not use this file except in compliance with
1:f13c6ac:  * the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  * See the License for the specific language governing permissions and
1:f13c6ac:  * limitations under the License.
1:f13c6ac:  */
1:e2445d0: package org.apache.aries.blueprint.utils;
1:f13c6ac: 
1:f13c6ac: import java.lang.reflect.Method;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Map;
1:f13c6ac: 
1:09a7647: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1:f13c6ac: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:f13c6ac: import org.slf4j.Logger;
1:f13c6ac: import org.slf4j.LoggerFactory;
1:f13c6ac: 
1:f13c6ac: public class ServiceListener {
1:f13c6ac: 
1:f13c6ac:     private static final Logger LOGGER = LoggerFactory.getLogger(ServiceListener.class);
1:f13c6ac:     
1:f13c6ac:     private Object listener;
1:f13c6ac:     private String registerMethod;
1:f13c6ac:     private String unregisterMethod;
1:f13c6ac:     private ExtendedBlueprintContainer blueprintContainer;
1:f13c6ac: 
1:f13c6ac:     private List<Method> registerMethods;
1:f13c6ac:     private List<Method> unregisterMethods;
1:f13c6ac:     private boolean initialized = false;
1:f13c6ac: 
1:f13c6ac:     public void setListener(Object listener) {
1:f13c6ac:         this.listener = listener;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setRegisterMethod(String method) {
1:f13c6ac:         this.registerMethod = method;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void setUnregisterMethod(String method) {
1:f13c6ac:         this.unregisterMethod = method;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void setBlueprintContainer(ExtendedBlueprintContainer blueprintContainer) {
1:f13c6ac:         this.blueprintContainer = blueprintContainer;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void register(Object service, Map properties) {
1:f13c6ac:         init(service);
1:f13c6ac:         invokeMethod(registerMethods, service, properties);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void unregister(Object service, Map properties) {
1:f13c6ac:         init(service);
1:f13c6ac:         invokeMethod(unregisterMethods, service, properties);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     private synchronized void init(Object service) {
1:f13c6ac:         if (initialized) {
1:f13c6ac:             return;
1:f13c6ac:         }
1:f13c6ac:         Class[] paramTypes = new Class[] { service != null ? service.getClass() : null, Map.class };
1:f13c6ac:         Class listenerClass = listener.getClass();
1:f13c6ac: 
1:f13c6ac:         if (registerMethod != null) {
1:f13c6ac:             registerMethods = ReflectionUtils.findCompatibleMethods(listenerClass, registerMethod, paramTypes);
1:f13c6ac:             if (registerMethods.size() == 0) {
1:f13c6ac:                 throw new ComponentDefinitionException("No matching methods found for listener registration method: " + registerMethod);
1:f13c6ac:             }
1:f13c6ac:             LOGGER.debug("Found register methods: {}", registerMethods);
1:f13c6ac:         }
1:f13c6ac:         if (unregisterMethod != null) {
1:f13c6ac:             unregisterMethods = ReflectionUtils.findCompatibleMethods(listenerClass, unregisterMethod, paramTypes);
1:f13c6ac:             if (unregisterMethods.size() == 0) {
1:f13c6ac:                 throw new ComponentDefinitionException("No matching methods found for listener unregistration method: " + unregisterMethod);
1:f13c6ac:             }
1:f13c6ac:             LOGGER.debug("Found unregister methods: {}", unregisterMethods);
1:f13c6ac:         }
1:f13c6ac:         initialized = true;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     private void invokeMethod(List<Method> methods, Object service, Map properties) {
1:f13c6ac:         if (methods == null || methods.isEmpty()) {
1:f13c6ac:             return;
1:f13c6ac:         }
1:f13c6ac:         for (Method method : methods) {
1:f13c6ac:             try {
1:f13c6ac:                 ReflectionUtils.invoke(blueprintContainer.getAccessControlContext(), 
1:f13c6ac:                                        method, listener, service, properties);
1:f13c6ac:             } catch (Exception e) {
1:f13c6ac:                 LOGGER.error("Error calling listener method " + method, e);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
1:f13c6ac: 
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:e2445d0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.utils;
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.blueprint.container;
0: import org.apache.aries.blueprint.ExtendedBlueprintContainer;
0: import org.apache.aries.blueprint.utils.ReflectionUtils;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.geronimo.blueprint.container;
1: 
1: import java.lang.reflect.Method;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.geronimo.blueprint.ExtendedBlueprintContainer;
0: import org.apache.geronimo.blueprint.utils.ReflectionUtils;
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class ServiceListener {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(ServiceListener.class);
1:     
1:     private Object listener;
1:     private String registerMethod;
1:     private String unregisterMethod;
1:     private ExtendedBlueprintContainer blueprintContainer;
1: 
1:     private List<Method> registerMethods;
1:     private List<Method> unregisterMethods;
1:     private boolean initialized = false;
1: 
1:     public void setListener(Object listener) {
1:         this.listener = listener;
1:     }
1: 
1:     public void setRegisterMethod(String method) {
1:         this.registerMethod = method;
1:     }
1:     
1:     public void setUnregisterMethod(String method) {
1:         this.unregisterMethod = method;
1:     }
1:     
1:     public void setBlueprintContainer(ExtendedBlueprintContainer blueprintContainer) {
1:         this.blueprintContainer = blueprintContainer;
1:     }
1:     
1:     public void register(Object service, Map properties) {
1:         init(service);
1:         invokeMethod(registerMethods, service, properties);
1:     }
1: 
1:     public void unregister(Object service, Map properties) {
1:         init(service);
1:         invokeMethod(unregisterMethods, service, properties);
1:     }
1: 
1:     private synchronized void init(Object service) {
1:         if (initialized) {
1:             return;
1:         }
1:         Class[] paramTypes = new Class[] { service != null ? service.getClass() : null, Map.class };
1:         Class listenerClass = listener.getClass();
1: 
1:         if (registerMethod != null) {
1:             registerMethods = ReflectionUtils.findCompatibleMethods(listenerClass, registerMethod, paramTypes);
1:             if (registerMethods.size() == 0) {
1:                 throw new ComponentDefinitionException("No matching methods found for listener registration method: " + registerMethod);
1:             }
1:             LOGGER.debug("Found register methods: {}", registerMethods);
1:         }
1:         if (unregisterMethod != null) {
1:             unregisterMethods = ReflectionUtils.findCompatibleMethods(listenerClass, unregisterMethod, paramTypes);
1:             if (unregisterMethods.size() == 0) {
1:                 throw new ComponentDefinitionException("No matching methods found for listener unregistration method: " + unregisterMethod);
1:             }
1:             LOGGER.debug("Found unregister methods: {}", unregisterMethods);
1:         }
1:         initialized = true;
1:     }
1: 
1:     private void invokeMethod(List<Method> methods, Object service, Map properties) {
1:         if (methods == null || methods.isEmpty()) {
1:             return;
1:         }
1:         for (Method method : methods) {
1:             try {
1:                 ReflectionUtils.invoke(blueprintContainer.getAccessControlContext(), 
1:                                        method, listener, service, properties);
1:             } catch (Exception e) {
1:                 LOGGER.error("Error calling listener method " + method, e);
1:             }
1:         }
1:     }
1: 
1: }
1: 
============================================================================