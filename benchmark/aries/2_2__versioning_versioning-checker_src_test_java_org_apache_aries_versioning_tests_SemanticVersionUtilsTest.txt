1:f9b43fb: /*
1:9822203: * Licensed to the Apache Software Foundation (ASF) under one
1:9822203: * or more contributor license agreements.  See the NOTICE file
1:9822203: * distributed with this work for additional information
1:9822203: * regarding copyright ownership.  The ASF licenses this file
1:9822203: * to you under the Apache License, Version 2.0 (the
1:9822203: * "License"); you may not use this file except in compliance
1:9822203: * with the License.  You may obtain a copy of the License at
1:9822203: *
1:9822203: *   http://www.apache.org/licenses/LICENSE-2.0
1:9822203: *
1:9822203: * Unless required by applicable law or agreed to in writing,
1:9822203: * software distributed under the License is distributed on an
1:9822203: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9822203: * KIND, either express or implied.  See the License for the
1:9822203: * specific language governing permissions and limitations
1:9822203: * under the License.
1:9822203: */
1:f9b43fb: package org.apache.aries.versioning.tests;
1:9822203: 
1:f9b43fb: import static org.junit.Assert.assertEquals;
22:f9b43fb: 
1:f9b43fb: import org.apache.aries.versioning.utils.SemanticVersioningUtils;
1:f9b43fb: import org.junit.Test;
1:f9b43fb: 
1:f9b43fb: 
1:9822203: public class SemanticVersionUtilsTest {
1:f9b43fb: 
1:9822203:     @Test
1:9822203:     public void testMethodTransform() {
1:9822203: 
1:f9b43fb: 
1:9822203:         String returnStr = SemanticVersioningUtils.getReadableMethodSignature("getAccountNum", "(Ljava/lang/String;)Ljava/lang/String;");
1:9822203:         String expectedStr = "method java.lang.String getAccountNum(java.lang.String)";
1:9822203:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:9822203: 
1:9822203:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("handleNotification", "(Ljavax/management/Notification;Ljava/lang/Object;)V");
1:9822203:         expectedStr = "method void handleNotification(javax.management.Notification, java.lang.Object)";
1:9822203:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:9822203: 
1:9822203:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("addItemDeepCopy", "(Lcom/xml/xci/Cursor$Area;Lcom/xml/xci/Cursor;Lcom/xml/xci/Cursor$Profile;Lcom/xml/xci/Cursor$Profile;ZZZ)Lcom/xml/xci/Cursor;");
1:9822203:         expectedStr = "method com.xml.xci.Cursor addItemDeepCopy(com.xml.xci.Cursor$Area, com.xml.xci.Cursor, com.xml.xci.Cursor$Profile, com.xml.xci.Cursor$Profile, boolean, boolean, boolean)";
1:9822203:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:9822203: 
1:9822203:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("createParserAndCompiler", "(Ljavax/xml/transform/Source;Lcom/xltxe/rnm1/xtq/exec/XTQStaticContext;Lcom/xltxe/rnm1/xtq/common/utils/ErrorHandler;)Lcom/xltxe/rnm1/xtq/xquery/drivers/XQueryCompiler;");
1:9822203:         expectedStr = "method com.xltxe.rnm1.xtq.xquery.drivers.XQueryCompiler createParserAndCompiler(javax.xml.transform.Source, com.xltxe.rnm1.xtq.exec.XTQStaticContext, com.xltxe.rnm1.xtq.common.utils.ErrorHandler)";
1:9822203:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:9822203: 
1:9822203: 
1:9822203:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("getAxis", "()Lcom/xml/xci/exec/Axis;");
1:9822203:         expectedStr = "method com.xml.xci.exec.Axis getAxis()";
1:9822203:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:9822203: 
1:9822203: 
1:9822203:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("createEmpty", "()Lcom/xml/xci/dp/cache/dom/InternalNodeData;");
1:9822203:         expectedStr = "method com.xml.xci.dp.cache.dom.InternalNodeData createEmpty()";
1:9822203:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:9822203: 
1:9822203: 
1:9822203:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("addElement", "(Lorg/w3c/dom/Node;)V");
1:9822203:         expectedStr = "method void addElement(org.w3c.dom.Node)";
1:9822203:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:9822203: 
1:9822203: 
1:9822203:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("isExternalFunctionCall", "(Lcom/xltxe/rnm1/xtq/ast/nodes/FunctionCall;Lcom/xltxe/rnm1/xtq/xpath/drivers/XPathCompiler;)Z");
1:9822203:         expectedStr = "method boolean isExternalFunctionCall(com.xltxe.rnm1.xtq.ast.nodes.FunctionCall, com.xltxe.rnm1.xtq.xpath.drivers.XPathCompiler)";
1:9822203:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:9822203: 
1:9822203: 
1:9822203:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("wrapForTracing", "(Lcom/xltxe/rnm1/xtq/xslt/runtime/output/ResultTreeSequenceWriterStream$TraceOutputEventGenerator;Lcom/xml/xci/SessionContext;Lcom/xml/xci/Cursor;Lcom/xml/xci/RequestInfo;Lcom/xltxe/rnm1/xtq/xslt/runtime/output/ResultTreeSequenceWriterStream$DeferredTraceResultTreeSequenceWriterStream;)Lcom/xml/xci/Cursor;");
1:9822203:         expectedStr = "method com.xml.xci.Cursor wrapForTracing(com.xltxe.rnm1.xtq.xslt.runtime.output.ResultTreeSequenceWriterStream$TraceOutputEventGenerator, com.xml.xci.SessionContext, com.xml.xci.Cursor, com.xml.xci.RequestInfo, com.xltxe.rnm1.xtq.xslt.runtime.output.ResultTreeSequenceWriterStream$DeferredTraceResultTreeSequenceWriterStream)";
1:9822203:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:9822203: 
1:9822203: 
1:9822203:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/security/Key;Ljava/security/Key;Ljava/security/cert/Certificate;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJJLjava/lang/String;)V");
1:9822203:         expectedStr = "constructor with parameter list (java.lang.String, java.lang.String, java.lang.String, java.security.Key, java.security.Key, java.security.cert.Certificate, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, long, long, java.lang.String)";
1:9822203:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:9822203: 
1:9822203:     }
2:f9b43fb: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:9822203
/////////////////////////////////////////////////////////////////////////
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *   http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: 
1: public class SemanticVersionUtilsTest {
1:     @Test
1:     public void testMethodTransform() {
1: 
1:         String returnStr = SemanticVersioningUtils.getReadableMethodSignature("getAccountNum", "(Ljava/lang/String;)Ljava/lang/String;");
1:         String expectedStr = "method java.lang.String getAccountNum(java.lang.String)";
1:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1: 
1:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("handleNotification", "(Ljavax/management/Notification;Ljava/lang/Object;)V");
1:         expectedStr = "method void handleNotification(javax.management.Notification, java.lang.Object)";
1:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1: 
1:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("addItemDeepCopy", "(Lcom/xml/xci/Cursor$Area;Lcom/xml/xci/Cursor;Lcom/xml/xci/Cursor$Profile;Lcom/xml/xci/Cursor$Profile;ZZZ)Lcom/xml/xci/Cursor;");
1:         expectedStr = "method com.xml.xci.Cursor addItemDeepCopy(com.xml.xci.Cursor$Area, com.xml.xci.Cursor, com.xml.xci.Cursor$Profile, com.xml.xci.Cursor$Profile, boolean, boolean, boolean)";
1:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1: 
1:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("createParserAndCompiler", "(Ljavax/xml/transform/Source;Lcom/xltxe/rnm1/xtq/exec/XTQStaticContext;Lcom/xltxe/rnm1/xtq/common/utils/ErrorHandler;)Lcom/xltxe/rnm1/xtq/xquery/drivers/XQueryCompiler;");
1:         expectedStr = "method com.xltxe.rnm1.xtq.xquery.drivers.XQueryCompiler createParserAndCompiler(javax.xml.transform.Source, com.xltxe.rnm1.xtq.exec.XTQStaticContext, com.xltxe.rnm1.xtq.common.utils.ErrorHandler)";
1:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1: 
1: 
1:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("getAxis", "()Lcom/xml/xci/exec/Axis;");
1:         expectedStr = "method com.xml.xci.exec.Axis getAxis()";
1:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1: 
1: 
1:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("createEmpty", "()Lcom/xml/xci/dp/cache/dom/InternalNodeData;");
1:         expectedStr = "method com.xml.xci.dp.cache.dom.InternalNodeData createEmpty()";
1:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1: 
1: 
1:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("addElement", "(Lorg/w3c/dom/Node;)V");
1:         expectedStr = "method void addElement(org.w3c.dom.Node)";
1:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1: 
1: 
1:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("isExternalFunctionCall", "(Lcom/xltxe/rnm1/xtq/ast/nodes/FunctionCall;Lcom/xltxe/rnm1/xtq/xpath/drivers/XPathCompiler;)Z");
1:         expectedStr = "method boolean isExternalFunctionCall(com.xltxe.rnm1.xtq.ast.nodes.FunctionCall, com.xltxe.rnm1.xtq.xpath.drivers.XPathCompiler)";
1:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1: 
1: 
1:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("wrapForTracing", "(Lcom/xltxe/rnm1/xtq/xslt/runtime/output/ResultTreeSequenceWriterStream$TraceOutputEventGenerator;Lcom/xml/xci/SessionContext;Lcom/xml/xci/Cursor;Lcom/xml/xci/RequestInfo;Lcom/xltxe/rnm1/xtq/xslt/runtime/output/ResultTreeSequenceWriterStream$DeferredTraceResultTreeSequenceWriterStream;)Lcom/xml/xci/Cursor;");
1:         expectedStr = "method com.xml.xci.Cursor wrapForTracing(com.xltxe.rnm1.xtq.xslt.runtime.output.ResultTreeSequenceWriterStream$TraceOutputEventGenerator, com.xml.xci.SessionContext, com.xml.xci.Cursor, com.xml.xci.RequestInfo, com.xltxe.rnm1.xtq.xslt.runtime.output.ResultTreeSequenceWriterStream$DeferredTraceResultTreeSequenceWriterStream)";
1:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1: 
1: 
1:         returnStr = SemanticVersioningUtils.getReadableMethodSignature("<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/security/Key;Ljava/security/Key;Ljava/security/cert/Certificate;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJJLjava/lang/String;)V");
1:         expectedStr = "constructor with parameter list (java.lang.String, java.lang.String, java.lang.String, java.security.Key, java.security.Key, java.security.cert.Certificate, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, long, long, java.lang.String)";
1:         assertEquals("The return str is incorrect.", expectedStr, returnStr);
1: 
1:     }
author:Emily Jiang
-------------------------------------------------------------------------------
commit:f9b43fb
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
1: package org.apache.aries.versioning.tests;
1: import static org.junit.Assert.assertEquals;
1: 
1: import org.apache.aries.versioning.utils.SemanticVersioningUtils;
1: import org.junit.Test;
1: 
1: 
1: 
0: public class SemanticVersionUtilsTest
0: {
1: 
0:   @Test
0:   public void testMethodTransform() {
1:    
1:     
0:     String returnStr = SemanticVersioningUtils.getReadableMethodSignature( "getAccountNum", "(Ljava/lang/String;)Ljava/lang/String;");
0:     String expectedStr = "method java.lang.String getAccountNum(java.lang.String)";
0:     assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:     
0:     returnStr = SemanticVersioningUtils.getReadableMethodSignature( "handleNotification", "(Ljavax/management/Notification;Ljava/lang/Object;)V");
0:     expectedStr = "method void handleNotification(javax.management.Notification, java.lang.Object)";
0:     assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:     
0:     returnStr = SemanticVersioningUtils.getReadableMethodSignature("addItemDeepCopy", "(Lcom/xml/xci/Cursor$Area;Lcom/xml/xci/Cursor;Lcom/xml/xci/Cursor$Profile;Lcom/xml/xci/Cursor$Profile;ZZZ)Lcom/xml/xci/Cursor;");
0:     expectedStr = "method com.xml.xci.Cursor addItemDeepCopy(com.xml.xci.Cursor$Area, com.xml.xci.Cursor, com.xml.xci.Cursor$Profile, com.xml.xci.Cursor$Profile, boolean, boolean, boolean)";
0:     assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:     
0:     returnStr = SemanticVersioningUtils.getReadableMethodSignature("createParserAndCompiler", "(Ljavax/xml/transform/Source;Lcom/xltxe/rnm1/xtq/exec/XTQStaticContext;Lcom/xltxe/rnm1/xtq/common/utils/ErrorHandler;)Lcom/xltxe/rnm1/xtq/xquery/drivers/XQueryCompiler;");
0:     expectedStr = "method com.xltxe.rnm1.xtq.xquery.drivers.XQueryCompiler createParserAndCompiler(javax.xml.transform.Source, com.xltxe.rnm1.xtq.exec.XTQStaticContext, com.xltxe.rnm1.xtq.common.utils.ErrorHandler)";
0:     assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:     
1:     
0:     returnStr = SemanticVersioningUtils.getReadableMethodSignature("getAxis", "()Lcom/xml/xci/exec/Axis;");
0:     expectedStr = "method com.xml.xci.exec.Axis getAxis()";
0:     assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:     
1:     
1:   
0:     returnStr = SemanticVersioningUtils.getReadableMethodSignature("createEmpty", "()Lcom/xml/xci/dp/cache/dom/InternalNodeData;");
0:     expectedStr = "method com.xml.xci.dp.cache.dom.InternalNodeData createEmpty()";
0:     assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:     
1:     
0:     returnStr = SemanticVersioningUtils.getReadableMethodSignature("addElement", "(Lorg/w3c/dom/Node;)V");
0:     expectedStr = "method void addElement(org.w3c.dom.Node)";
0:     assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:     
1:   
0:     returnStr = SemanticVersioningUtils.getReadableMethodSignature("isExternalFunctionCall", "(Lcom/xltxe/rnm1/xtq/ast/nodes/FunctionCall;Lcom/xltxe/rnm1/xtq/xpath/drivers/XPathCompiler;)Z");
0:     expectedStr = "method boolean isExternalFunctionCall(com.xltxe.rnm1.xtq.ast.nodes.FunctionCall, com.xltxe.rnm1.xtq.xpath.drivers.XPathCompiler)";
0:     assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:     
1:     
0:     returnStr = SemanticVersioningUtils.getReadableMethodSignature("wrapForTracing", "(Lcom/xltxe/rnm1/xtq/xslt/runtime/output/ResultTreeSequenceWriterStream$TraceOutputEventGenerator;Lcom/xml/xci/SessionContext;Lcom/xml/xci/Cursor;Lcom/xml/xci/RequestInfo;Lcom/xltxe/rnm1/xtq/xslt/runtime/output/ResultTreeSequenceWriterStream$DeferredTraceResultTreeSequenceWriterStream;)Lcom/xml/xci/Cursor;");
0:     expectedStr = "method com.xml.xci.Cursor wrapForTracing(com.xltxe.rnm1.xtq.xslt.runtime.output.ResultTreeSequenceWriterStream$TraceOutputEventGenerator, com.xml.xci.SessionContext, com.xml.xci.Cursor, com.xml.xci.RequestInfo, com.xltxe.rnm1.xtq.xslt.runtime.output.ResultTreeSequenceWriterStream$DeferredTraceResultTreeSequenceWriterStream)";
0:     assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:     
1:     
0:     returnStr = SemanticVersioningUtils.getReadableMethodSignature("<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/security/Key;Ljava/security/Key;Ljava/security/cert/Certificate;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJJLjava/lang/String;)V");
0:     expectedStr = "constructor with parameter list (java.lang.String, java.lang.String, java.lang.String, java.security.Key, java.security.Key, java.security.cert.Certificate, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, long, long, java.lang.String)";
0:     assertEquals("The return str is incorrect.", expectedStr, returnStr);
1:     
1:   }
1: }
============================================================================