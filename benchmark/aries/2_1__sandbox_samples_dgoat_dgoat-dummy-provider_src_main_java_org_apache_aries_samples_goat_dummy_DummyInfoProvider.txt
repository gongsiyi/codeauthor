1:ed92957: /**
1:ed92957:  * Licensed to the Apache Software Foundation (ASF) under one
1:ed92957:  * or more contributor license agreements.  See the NOTICE file
1:ed92957:  * distributed with this work for additional information
1:ed92957:  * regarding copyright ownership.  The ASF licenses this file
1:ed92957:  * to you under the Apache License, Version 2.0 (the
1:ed92957:  * "License"); you may not use this file except in compliance
1:ed92957:  * with the License.  You may obtain a copy of the License at
1:ed92957:  *
1:ed92957:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ed92957:  *
1:ed92957:  * Unless required by applicable law or agreed to in writing,
1:ed92957:  * software distributed under the License is distributed on an
1:ed92957:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ed92957:  * KIND, either express or implied.  See the License for the
1:ed92957:  * specific language governing permissions and limitations
1:ed92957:  * under the License.
1:ed92957:  */
1:ed92957: package org.apache.aries.samples.goat.dummy;
1:ed92957: 
1:ed92957: 
1:ed92957: import java.util.ArrayList;
1:ed92957: import java.util.HashMap;
1:ed92957: import java.util.List;
1:ed92957: import java.util.Map;
1:ed92957: 
1:ed92957: import org.apache.aries.samples.goat.info.ComponentInfoImpl;
1:ed92957: 
1:ed92957: import org.apache.aries.samples.goat.api.ComponentInfo;
1:ed92957: import org.apache.aries.samples.goat.api.ComponentInfoProvider;
1:ed92957: 
1:ed92957: public class DummyInfoProvider implements ComponentInfoProvider {
1:ed92957: 	
1:ed92957: 	ComponentInfoImpl a = new ComponentInfoImpl();
1:ed92957: 	ComponentInfoImpl b = new ComponentInfoImpl();
1:ed92957: 	ComponentInfoImpl c = new ComponentInfoImpl();
1:ed92957: 		
1:ed92957: 	public DummyInfoProvider(){
1:ed92957: 				
1:ed92957: 		a.setId("/root/"+1);
1:ed92957: 		Map<String,String> props = new HashMap<String,String>();
1:ed92957: 		props.put("SymbolicName", "Uber.Bundle");
1:ed92957: 		props.put("Version", "1.0.0");
1:ed92957: 		props.put("State", "ACTIVE");
1:ed92957: 		props.put("BundleID", "1");
1:ed92957: 		a.setComponentProperties(props);
1:ed92957: 		
1:ed92957: 		b.setId("/root/"+2);
1:ed92957: 		props = new HashMap<String,String>();
1:ed92957: 		props.put("SymbolicName", "Fred");
1:ed92957: 		props.put("Version", "1.0.0");
1:ed92957: 		props.put("State", "RESOLVED");
1:ed92957: 		props.put("BundleID", "2");
1:ed92957: 		b.setComponentProperties(props);
1:ed92957: 		
1:ed92957: 		c.setId("/root/"+3);
1:ed92957: 		props = new HashMap<String,String>();
1:ed92957: 		props.put("SymbolicName", "Wilma");
1:ed92957: 		props.put("Version", "1.0.0");
1:ed92957: 		props.put("State", "ACTIVE");
1:ed92957: 		props.put("BundleID", "3");
1:ed92957: 		c.setComponentProperties(props);
1:ed92957: 	}
1:ed92957: 
1:ed92957: 	@Override
1:ed92957: 	public List<ComponentInfo> getComponents() {
1:ed92957: 		List<ComponentInfo> result = new ArrayList<ComponentInfo>();
1:ed92957: 		result.add(a);
1:ed92957: 		result.add(b);
1:ed92957: 		result.add(c);
1:ed92957: 		return result;
1:ed92957: 	}
1:ed92957: 
1:ed92957: 	@Override
1:ed92957: 	public ComponentInfo getComponentForId(String id) {
1:ed92957: 		if("/root/1".equals(id)) return a;
1:ed92957: 		if("/root/2".equals(id)) return b;
1:ed92957: 		if("/root/3".equals(id)) return c;
1:ed92957: 		return null;
1:ed92957: 	}
1:ed92957: 
1:ed92957: 	@Override
1:ed92957: 	public void registerComponentInfoListener(ComponentInfoListener listener) {
1:ed92957: 		//no-op
1:ed92957: 	}
1:ed92957: 
1:ed92957: }
1:ed92957: 
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:ed92957
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.goat.dummy;
1: 
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.samples.goat.info.ComponentInfoImpl;
1: 
1: import org.apache.aries.samples.goat.api.ComponentInfo;
1: import org.apache.aries.samples.goat.api.ComponentInfoProvider;
1: 
1: public class DummyInfoProvider implements ComponentInfoProvider {
1: 	
1: 	ComponentInfoImpl a = new ComponentInfoImpl();
1: 	ComponentInfoImpl b = new ComponentInfoImpl();
1: 	ComponentInfoImpl c = new ComponentInfoImpl();
1: 		
1: 	public DummyInfoProvider(){
1: 				
1: 		a.setId("/root/"+1);
1: 		Map<String,String> props = new HashMap<String,String>();
1: 		props.put("SymbolicName", "Uber.Bundle");
1: 		props.put("Version", "1.0.0");
1: 		props.put("State", "ACTIVE");
1: 		props.put("BundleID", "1");
1: 		a.setComponentProperties(props);
1: 		
1: 		b.setId("/root/"+2);
1: 		props = new HashMap<String,String>();
1: 		props.put("SymbolicName", "Fred");
1: 		props.put("Version", "1.0.0");
1: 		props.put("State", "RESOLVED");
1: 		props.put("BundleID", "2");
1: 		b.setComponentProperties(props);
1: 		
1: 		c.setId("/root/"+3);
1: 		props = new HashMap<String,String>();
1: 		props.put("SymbolicName", "Wilma");
1: 		props.put("Version", "1.0.0");
1: 		props.put("State", "ACTIVE");
1: 		props.put("BundleID", "3");
1: 		c.setComponentProperties(props);
1: 	}
1: 
1: 	@Override
1: 	public List<ComponentInfo> getComponents() {
1: 		List<ComponentInfo> result = new ArrayList<ComponentInfo>();
1: 		result.add(a);
1: 		result.add(b);
1: 		result.add(c);
1: 		return result;
1: 	}
1: 
1: 	@Override
1: 	public ComponentInfo getComponentForId(String id) {
1: 		if("/root/1".equals(id)) return a;
1: 		if("/root/2".equals(id)) return b;
1: 		if("/root/3".equals(id)) return c;
1: 		return null;
1: 	}
1: 
1: 	@Override
1: 	public void registerComponentInfoListener(ComponentInfoListener listener) {
1: 		//no-op
1: 	}
1: 
1: }
1: 
============================================================================