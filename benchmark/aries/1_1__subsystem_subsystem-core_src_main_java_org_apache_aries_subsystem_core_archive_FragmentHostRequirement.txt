1:8ad6b99: /*
1:8ad6b99:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ad6b99:  * or more contributor license agreements.  See the NOTICE file
1:8ad6b99:  * distributed with this work for additional information
1:8ad6b99:  * regarding copyright ownership.  The ASF licenses this file
1:8ad6b99:  * to you under the Apache License, Version 2.0 (the
1:8ad6b99:  * "License"); you may not use this file except in compliance
1:8ad6b99:  * with the License.  You may obtain a copy of the License at
1:8ad6b99:  *
1:8ad6b99:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8ad6b99:  *
1:8ad6b99:  * Unless required by applicable law or agreed to in writing,
1:8ad6b99:  * software distributed under the License is distributed on an
1:8ad6b99:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8ad6b99:  * KIND, either express or implied.  See the License for the
1:8ad6b99:  * specific language governing permissions and limitations
1:8ad6b99:  * under the License.
1:8ad6b99:  */
1:8ad6b99: package org.apache.aries.subsystem.core.archive;
1:8ad6b99: 
1:8ad6b99: import java.util.Collections;
1:8ad6b99: import java.util.HashMap;
1:8ad6b99: import java.util.Map;
1:8ad6b99: 
1:8ad6b99: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
1:8ad6b99: import org.osgi.framework.namespace.HostNamespace;
1:8ad6b99: import org.osgi.resource.Resource;
1:8ad6b99: 
1:8ad6b99: public class FragmentHostRequirement extends AbstractRequirement {
1:8ad6b99:     public static final String DIRECTIVE_EXTENSION = HostNamespace.REQUIREMENT_EXTENSION_DIRECTIVE;
1:8ad6b99: 	public static final String DIRECTIVE_FILTER = HostNamespace.REQUIREMENT_FILTER_DIRECTIVE;
1:8ad6b99: 	public static final String NAMESPACE = HostNamespace.HOST_NAMESPACE;
1:8ad6b99: 	
1:8ad6b99: 	private final Map<String, String> directives;
1:8ad6b99: 	private final Resource resource;
1:8ad6b99: 	
1:8ad6b99: 	public FragmentHostRequirement(
1:8ad6b99: 			FragmentHostHeader.Clause clause, Resource resource) {
1:8ad6b99: 		directives = new HashMap<String, String>(clause.getDirectives().size() + 1);
1:8ad6b99: 		for (Directive directive : clause.getDirectives())
1:8ad6b99: 			directives.put(directive.getName(), directive.getValue());
1:8ad6b99: 		StringBuilder builder = new StringBuilder("(&(")
1:8ad6b99: 				.append(NAMESPACE).append('=')
1:8ad6b99: 				.append(clause.getSymbolicName()).append(')');
1:8ad6b99: 		for (Attribute attribute : clause.getAttributes())
1:8ad6b99: 			attribute.appendToFilter(builder);
1:8ad6b99: 		directives.put(DIRECTIVE_FILTER, builder.append(')').toString());
1:8ad6b99: 		this.resource = resource;
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public Map<String, Object> getAttributes() {
1:8ad6b99: 		return Collections.emptyMap();
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public Map<String, String> getDirectives() {
1:8ad6b99: 		return Collections.unmodifiableMap(directives);
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public String getNamespace() {
1:8ad6b99: 		return NAMESPACE;
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public Resource getResource() {
1:8ad6b99: 		return resource;
1:8ad6b99: 	}
1:8ad6b99: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:8ad6b99
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
1: import org.osgi.framework.namespace.HostNamespace;
1: import org.osgi.resource.Resource;
1: 
1: public class FragmentHostRequirement extends AbstractRequirement {
1:     public static final String DIRECTIVE_EXTENSION = HostNamespace.REQUIREMENT_EXTENSION_DIRECTIVE;
1: 	public static final String DIRECTIVE_FILTER = HostNamespace.REQUIREMENT_FILTER_DIRECTIVE;
1: 	public static final String NAMESPACE = HostNamespace.HOST_NAMESPACE;
1: 	
1: 	private final Map<String, String> directives;
1: 	private final Resource resource;
1: 	
1: 	public FragmentHostRequirement(
1: 			FragmentHostHeader.Clause clause, Resource resource) {
1: 		directives = new HashMap<String, String>(clause.getDirectives().size() + 1);
1: 		for (Directive directive : clause.getDirectives())
1: 			directives.put(directive.getName(), directive.getValue());
1: 		StringBuilder builder = new StringBuilder("(&(")
1: 				.append(NAMESPACE).append('=')
1: 				.append(clause.getSymbolicName()).append(')');
1: 		for (Attribute attribute : clause.getAttributes())
1: 			attribute.appendToFilter(builder);
1: 		directives.put(DIRECTIVE_FILTER, builder.append(')').toString());
1: 		this.resource = resource;
1: 	}
1: 
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.emptyMap();
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.unmodifiableMap(directives);
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
1: 		return NAMESPACE;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================