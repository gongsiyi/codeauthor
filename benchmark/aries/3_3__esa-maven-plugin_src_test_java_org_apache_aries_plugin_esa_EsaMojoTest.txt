1:9b1f38a: package org.apache.aries.plugin.esa;
31:9b1f38a: 
1:9b1f38a: /*
1:9b1f38a:  * Licensed to the Apache Software Foundation (ASF) under one
1:9b1f38a:  * or more contributor license agreements.  See the NOTICE file
1:9b1f38a:  * distributed with this work for additional information
1:9b1f38a:  * regarding copyright ownership.  The ASF licenses this file
1:9b1f38a:  * to you under the Apache License, Version 2.0 (the
1:9b1f38a:  * "License"); you may not use this file except in compliance
1:9b1f38a:  * with the License.  You may obtain a copy of the License at
1:9b1f38a:  *
1:9b1f38a:  *  http://www.apache.org/licenses/LICENSE-2.0
1:9b1f38a:  *
1:9b1f38a:  * Unless required by applicable law or agreed to in writing,
1:9b1f38a:  * software distributed under the License is distributed on an
1:9b1f38a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9b1f38a:  * KIND, either express or implied.  See the License for the
1:9b1f38a:  * specific language governing permissions and limitations
1:9b1f38a:  * under the License.
1:9b1f38a:  */
1:5302dea: 
1:9b1f38a: import java.io.BufferedReader;
1:9b1f38a: import java.io.File;
1:f2a8ed5: import java.io.InputStream;
1:9b1f38a: import java.io.InputStreamReader;
1:9b1f38a: import java.util.ArrayList;
1:9b1f38a: import java.util.Enumeration;
1:9b1f38a: import java.util.List;
1:f2a8ed5: import java.util.Map;
1:f2a8ed5: import java.util.jar.Attributes;
1:f2a8ed5: import java.util.jar.Manifest;
1:9b1f38a: 
1:3ce2e75: import aQute.lib.osgi.Analyzer;
1:3ce2e75: 
1:9b1f38a: import org.apache.maven.plugin.testing.AbstractMojoTestCase;
1:9b1f38a: import org.codehaus.plexus.archiver.zip.ZipEntry;
1:9b1f38a: import org.codehaus.plexus.archiver.zip.ZipFile;
1:f2a8ed5: 
1:9b1f38a: /**
1:9b1f38a:  * @author <a href="mailto:aramirez@apache.org">Allan Ramirez</a>
1:9b1f38a:  */
1:9b1f38a: public class EsaMojoTest
1:9b1f38a:     extends AbstractMojoTestCase
1:9b1f38a: {
1:9b1f38a:     public void testEsaTestEnvironment()
1:9b1f38a:         throws Exception
1:9b1f38a:     {
1:9b1f38a:         File testPom = new File( getBasedir(),
2:9b1f38a:                                  "target/test-classes/unit/basic-esa-test/plugin-config.xml" );
1:9b1f38a: 
1:9b1f38a:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1:9b1f38a: 
1:9b1f38a:         assertNotNull( mojo );
4:9b1f38a:     }
1:a551336: 
1:9b1f38a:     public void testBasicEsa()
1:9b1f38a:         throws Exception
1:9b1f38a:     {
1:a551336:         testBasicEsa( "target/test-classes/unit/basic-esa-test/plugin-config.xml", null );
1:a551336:     }
1:3ce2e75: 
1:a551336:     public void testBasicEsaPgkType()
1:a551336:         throws Exception
1:a551336:     {
1:a551336:         testBasicEsa( "target/test-classes/unit/basic-esa-test-with-pgk-type/plugin-config.xml", "maven-esa-test-1.0-SNAPSHOT.jar" );
1:a551336:     }
1:3ce2e75: 
1:a551336:     private void testBasicEsa(String path, String extraExpectedFiles)
1:a551336:         throws Exception
1:a551336:     {
1:9b1f38a:         File testPom = new File( getBasedir(),
1:a551336:                                  path );
1:a551336: 
1:9b1f38a:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1:1c02b36: 
1:9b1f38a:         assertNotNull( mojo );
1:1c02b36: 
1:9b1f38a:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:edce8a5: 
1:9b1f38a:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:1c02b36: 
1:9b1f38a:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:edce8a5: 
1:9b1f38a:         mojo.execute();
1:1c02b36: 
1:9b1f38a:         //check the generated esa file
1:9b1f38a:         File esaFile = new File( outputDir, finalName + ".esa" );
1:9b1f38a: 
1:9b1f38a:         assertTrue( esaFile.exists() );
1:9b1f38a: 
1:9b1f38a:         //expected files/directories inside the esa file
1:9b1f38a:         List expectedFiles = new ArrayList();
1:9b1f38a: 
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.properties" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.xml" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/" );
1:9b1f38a:         expectedFiles.add( "META-INF/" );
1:9b1f38a:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:9b1f38a:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:a551336:         if (extraExpectedFiles != null)
1:a551336:         {
1:a551336:             expectedFiles.add( extraExpectedFiles );
1:a551336:         }
1:9b1f38a: 
1:9b1f38a:         ZipFile esa = new ZipFile( esaFile );
1:3ce2e75: 
1:edce8a5:         Enumeration entries = esa.getEntries();
1:3ce2e75: 
1:9b1f38a:         assertTrue( entries.hasMoreElements() );
1:3ce2e75: 
1:9b1f38a:         assertTrue( entries.hasMoreElements() );
1:edce8a5: 
1:9b1f38a:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:9b1f38a:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:9b1f38a:     }
1:f2a8ed5: 
1:9b1f38a:     public void testBasicEsaWithDescriptor()
1:9b1f38a:         throws Exception
1:9b1f38a:     {
1:9b1f38a:         File testPom = new File( getBasedir(),
1:9b1f38a:                                  "target/test-classes/unit/basic-esa-with-descriptor/plugin-config.xml" );
1:f2a8ed5: 
1:9b1f38a:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1:f2a8ed5: 
1:9b1f38a:         assertNotNull( mojo );
1:edce8a5: 
1:9b1f38a:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:9b1f38a: 
1:9b1f38a:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:9b1f38a: 
1:9b1f38a:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:9b1f38a: 
1:9b1f38a:         mojo.execute();
1:9b1f38a: 
1:9b1f38a:         //check the generated esa file
1:9b1f38a:         File esaFile = new File( outputDir, finalName + ".esa" );
1:9b1f38a: 
1:9b1f38a:         assertTrue( esaFile.exists() );
1:9b1f38a: 
1:9b1f38a:         //expected files/directories inside the esa file
1:9b1f38a:         List expectedFiles = new ArrayList();
1:9b1f38a: 
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.properties" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.xml" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/" );
1:9b1f38a:         expectedFiles.add( "META-INF/" );
1:9b1f38a:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:9b1f38a:         expectedFiles.add( "OSGI-INF/" );
1:9b1f38a:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:9b1f38a:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:9b1f38a: 
1:9b1f38a:         ZipFile esa = new ZipFile( esaFile );
1:9b1f38a: 
2:9b1f38a:         Enumeration entries = esa.getEntries();
1:9b1f38a: 
1:9b1f38a:         assertTrue( entries.hasMoreElements() );
1:9b1f38a: 
1:9b1f38a:         assertTrue( entries.hasMoreElements() );
1:9b1f38a: 
1:9b1f38a:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:9b1f38a:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:9b1f38a:     }
1:9b1f38a: 
1:9b1f38a:     public void testBasicEsaWithManifest()
1:9b1f38a:         throws Exception
1:9b1f38a:     {
1:9b1f38a:         File testPom = new File( getBasedir(),
1:9b1f38a:                                  "target/test-classes/unit/basic-esa-with-manifest/plugin-config.xml" );
1:9b1f38a: 
1:9b1f38a:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1:9b1f38a: 
1:9b1f38a:         assertNotNull( mojo );
1:9b1f38a: 
1:9b1f38a:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:9b1f38a: 
1:9b1f38a:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:9b1f38a: 
1:9b1f38a:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:9b1f38a: 
1:9b1f38a:         mojo.execute();
1:9b1f38a: 
1:9b1f38a: 
1:9b1f38a:         //check the generated esa file
1:9b1f38a:         File esaFile = new File( outputDir, finalName + ".esa" );
1:9b1f38a: 
1:9b1f38a:         assertTrue( esaFile.exists() );
1:9b1f38a: 
1:9b1f38a:         //expected files/directories inside the esa file
1:9b1f38a:         List expectedFiles = new ArrayList();
1:9b1f38a: 
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.properties" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.xml" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/" );
1:9b1f38a:         expectedFiles.add( "META-INF/" );
1:9b1f38a:         expectedFiles.add( "META-INF/MANIFEST.MF" );
1:9b1f38a:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:9b1f38a:         expectedFiles.add( "OSGI-INF/" );
1:9b1f38a:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:9b1f38a:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:9b1f38a: 
1:9b1f38a:         ZipFile esa = new ZipFile( esaFile );
1:9b1f38a: 
1:9b1f38a:         Enumeration entries = esa.getEntries();
1:9b1f38a: 
1:9b1f38a:         assertTrue( entries.hasMoreElements() );
1:9b1f38a: 
1:9b1f38a:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:9b1f38a:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:9b1f38a:     }
1:9b1f38a: 
1:f2a8ed5:     private Manifest getSubsystemManifest(ZipFile esa) throws Exception {
1:f2a8ed5:         ZipEntry entry = esa.getEntry("OSGI-INF/SUBSYSTEM.MF");
1:f2a8ed5: 
1:f2a8ed5:         InputStream in = esa.getInputStream(entry);
1:f2a8ed5:         Manifest mf = new Manifest(in);
1:3ce2e75: 
1:f2a8ed5:         return mf;
1:f2a8ed5:     }
1:3ce2e75: 
1:f2a8ed5:     private Map<String, Map<String, String>> getHeader(Manifest mf, String header) {
1:f2a8ed5:         Attributes attributes = mf.getMainAttributes();
1:f2a8ed5:         String value = attributes.getValue(header);
1:f2a8ed5:         assertNotNull("Header " + header + " not found", value);
1:f2a8ed5:         return Analyzer.parseHeader(value, null);
1:f2a8ed5:     }
1:3ce2e75: 
1:9b1f38a:     private void testForHeader(ZipFile esa, String header, String exactEntry) throws Exception {
1:3ce2e75: 
1:9b1f38a:         Enumeration entries = esa.getEntries();
1:9b1f38a: 
1:9b1f38a: 
1:edce8a5:         // Test Use-Bundle & Subsytem-Type inclusion
1:edce8a5:         ZipEntry entry = esa.getEntry("OSGI-INF/SUBSYSTEM.MF");
1:edce8a5:         BufferedReader br = new BufferedReader(new InputStreamReader(esa.getInputStream(entry)));
1:edce8a5: 
1:9b1f38a:         Boolean foundHeader=false;
1:3ce2e75: 
1:edce8a5:         String line;
1:9b1f38a:         while ((line = br.readLine()) != null) {
1:edce8a5:             if (line.contains(header)) {
1:9b1f38a:                 assertEquals(exactEntry, line);
1:9b1f38a:                 foundHeader = true;
1:edce8a5:             }
1:edce8a5:         }
1:9b1f38a:         assertTrue("Found " + header + ":", foundHeader);
1:3ce2e75: 
1:edce8a5:     }
1:edce8a5: 
1:9b1f38a:     public void testSubsystemManifestGeneration()
1:9b1f38a:         throws Exception
1:9b1f38a:     {
1:9b1f38a:         File testPom = new File( getBasedir(),
1:9b1f38a:                                  "target/test-classes/unit/basic-esa-without-manifest/plugin-config.xml" );
1:edce8a5: 
1:9b1f38a:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1:9b1f38a: 
1:9b1f38a:         assertNotNull( mojo );
1:9b1f38a: 
1:9b1f38a:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:9b1f38a: 
1:9b1f38a:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:9b1f38a: 
1:9b1f38a:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:9b1f38a: 
1:9b1f38a:         mojo.execute();
1:9b1f38a: 
1:9b1f38a: 
1:9b1f38a:         //check the generated esa file
1:9b1f38a:         File esaFile = new File( outputDir, finalName + ".esa" );
1:9b1f38a: 
1:9b1f38a:         assertTrue( esaFile.exists() );
1:9b1f38a: 
1:9b1f38a:         //expected files/directories inside the esa file
1:9b1f38a:         List expectedFiles = new ArrayList();
1:9b1f38a: 
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.properties" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.xml" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/" );
1:9b1f38a:         expectedFiles.add( "META-INF/" );
1:9b1f38a:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:9b1f38a:         expectedFiles.add( "OSGI-INF/" );
1:9b1f38a:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:9b1f38a:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:9b1f38a: 
1:9b1f38a:         ZipFile esa = new ZipFile( esaFile );
1:9b1f38a: 
1:9b1f38a:         Enumeration entries = esa.getEntries();
1:9b1f38a: 
1:9b1f38a:         assertTrue( entries.hasMoreElements() );
1:9b1f38a: 
1:9b1f38a:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:9b1f38a:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:9b1f38a: 
1:edce8a5:         // Test for the Use-Bundle header
1:9b1f38a:         testForHeader(esa, "Use-Bundle", "Use-Bundle: org.apache.aries.test.Bundle;version=1.0.0-SNAPSHOT");
1:9b1f38a: 
1:9b1f38a:         // Test for the Subsystem-Type header
1:9b1f38a:         testForHeader(esa, "Subsystem-Type", "Subsystem-Type: feature");
1:9b1f38a:     }
1:9b1f38a: 
1:edce8a5:     public void testSubsystemStartOrder()
1:edce8a5:         throws Exception
1:edce8a5:     {
1:edce8a5:         File testPom = new File( getBasedir(),
1:edce8a5:                                  "target/test-classes/unit/basic-esa-start-order/plugin-config.xml" );
1:edce8a5: 
1:edce8a5:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1:edce8a5: 
1:edce8a5:         assertNotNull( mojo );
1:edce8a5: 
1:edce8a5:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:edce8a5: 
1:edce8a5:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:edce8a5: 
1:edce8a5:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:edce8a5: 
1:edce8a5:         mojo.execute();
1:edce8a5: 
1:edce8a5: 
1:edce8a5:         //check the generated esa file
1:edce8a5:         File esaFile = new File( outputDir, finalName + ".esa" );
1:edce8a5: 
1:edce8a5:         assertTrue( esaFile.exists() );
1:edce8a5: 
1:edce8a5:         //expected files/directories inside the esa file
1:edce8a5:         List expectedFiles = new ArrayList();
1:edce8a5: 
1:edce8a5:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:edce8a5:         expectedFiles.add( "OSGI-INF/" );
1:edce8a5:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:edce8a5:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:edce8a5: 
1:edce8a5:         ZipFile esa = new ZipFile( esaFile );
1:edce8a5: 
1:edce8a5:         Enumeration entries = esa.getEntries();
1:edce8a5: 
1:edce8a5:         assertTrue( entries.hasMoreElements() );
1:edce8a5: 
1:edce8a5:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:edce8a5:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:edce8a5: 
1:f2a8ed5:         Manifest mf = getSubsystemManifest(esa);
1:f2a8ed5:         Map<String, Map<String, String>> header = getHeader(mf, "Subsystem-Content");
1:3ce2e75: 
1:f2a8ed5:         Map<String, String> attributes = null;
1:3ce2e75: 
1:f2a8ed5:         attributes = header.get("maven-artifact01-1.0-SNAPSHOT");
1:f2a8ed5:         assertNotNull(attributes);
1:3ce2e75:         assertEquals("[1.0.0.SNAPSHOT,1.0.0.SNAPSHOT]", attributes.get("version"));
1:f137dd1:         // start-order is actually a directive, shows up here as the name+":"
1:f137dd1:         assertEquals("1", attributes.get("start-order:"));
1:f2a8ed5:         assertNull(attributes.get("type"));
1:3ce2e75: 
1:f2a8ed5:         attributes = header.get("maven-artifact02-1.0-SNAPSHOT");
1:f2a8ed5:         assertNotNull(attributes);
1:3ce2e75:         assertEquals("[1.0.0.SNAPSHOT,1.0.0.SNAPSHOT]", attributes.get("version"));
1:f137dd1:         assertEquals("2", attributes.get("start-order:"));
1:f2a8ed5:         assertNull(attributes.get("type"));
1:edce8a5:     }
1:3ce2e75: 
1:3ce2e75: 
1:9b1f38a:     public void testArchiveContentConfigurationNoBundles()
1:9b1f38a:         throws Exception
1:9b1f38a:     {
1:9b1f38a:         File testPom = new File( getBasedir(),
1:9b1f38a:                                  "target/test-classes/unit/basic-esa-no-bundles/plugin-config.xml" );
1:3ce2e75: 
1:9b1f38a:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1:3ce2e75: 
1:9b1f38a:         assertNotNull( mojo );
1:f2a8ed5: 
1:9b1f38a:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:f2a8ed5: 
1:9b1f38a:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:f2a8ed5: 
1:9b1f38a:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:edce8a5: 
1:9b1f38a:         mojo.execute();
1:edce8a5: 
1:9b1f38a: 
1:9b1f38a:         //check the generated esa file
1:9b1f38a:         File esaFile = new File( outputDir, finalName + ".esa" );
1:9b1f38a: 
1:9b1f38a:         assertTrue( esaFile.exists() );
1:9b1f38a: 
1:9b1f38a:         //expected files/directories inside the esa file
1:9b1f38a:         List expectedFiles = new ArrayList();
1:9b1f38a: 
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.properties" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.xml" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/" );
1:9b1f38a:         expectedFiles.add( "META-INF/" );
1:9b1f38a:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:9b1f38a:         expectedFiles.add( "OSGI-INF/" );
1:9b1f38a: 
1:9b1f38a:         ZipFile esa = new ZipFile( esaFile );
1:9b1f38a: 
1:9b1f38a:         Enumeration entries = esa.getEntries();
1:9b1f38a: 
1:9b1f38a:         assertTrue( entries.hasMoreElements() );
1:9b1f38a: 
1:9b1f38a:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:9b1f38a:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:9b1f38a: 
1:9b1f38a:     }
1:9b1f38a: 
1:9b1f38a:     public void testArchiveContentConfigurationSubsystemContentBundles()
1:9b1f38a:         throws Exception
1:9b1f38a:     {
1:9b1f38a:         File testPom = new File( getBasedir(),
1:9b1f38a:                                  "target/test-classes/unit/basic-esa-content-bundles-only/plugin-config.xml" );
1:9b1f38a: 
1:9b1f38a:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1:9b1f38a: 
1:9b1f38a:         assertNotNull( mojo );
1:9b1f38a: 
1:9b1f38a:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:9b1f38a: 
1:9b1f38a:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:9b1f38a: 
1:9b1f38a:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:9b1f38a: 
1:9b1f38a:         mojo.execute();
1:9b1f38a: 
1:9b1f38a: 
1:9b1f38a:         //check the generated esa file
1:9b1f38a:         File esaFile = new File( outputDir, finalName + ".esa" );
1:9b1f38a: 
1:9b1f38a:         assertTrue( esaFile.exists() );
1:9b1f38a: 
1:9b1f38a:         //expected files/directories inside the esa file
1:9b1f38a:         List expectedFiles = new ArrayList();
1:9b1f38a: 
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.properties" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.xml" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:9b1f38a:         expectedFiles.add( "META-INF/maven/" );
1:9b1f38a:         expectedFiles.add( "META-INF/" );
1:9b1f38a:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:9b1f38a:         expectedFiles.add( "OSGI-INF/" );
1:9b1f38a:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:9b1f38a:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:9b1f38a: 
1:9b1f38a:         ZipFile esa = new ZipFile( esaFile );
1:9b1f38a: 
1:9b1f38a:         Enumeration entries = esa.getEntries();
1:9b1f38a: 
1:9b1f38a:         assertTrue( entries.hasMoreElements() );
1:9b1f38a: 
1:9b1f38a:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:9b1f38a:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:9b1f38a: 
1:9b1f38a:     }
1:9b1f38a: 
1:1c02b36:     public void testCustomInstructions()
1:1c02b36:         throws Exception
1:1c02b36:     {
1:1c02b36:         File testPom = new File( getBasedir(),
1:1c02b36:                                  "target/test-classes/unit/basic-esa-custom-instructions/plugin-config.xml" );
1:1c02b36: 
1:1c02b36:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1:1c02b36: 
1:1c02b36:         assertNotNull( mojo );
1:1c02b36: 
1:1c02b36:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:1c02b36: 
1:1c02b36:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:1c02b36: 
1:1c02b36:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:1c02b36: 
1:1c02b36:         mojo.execute();
1:1c02b36: 
1:1c02b36: 
1:1c02b36:         //check the generated esa file
1:1c02b36:         File esaFile = new File( outputDir, finalName + ".esa" );
1:1c02b36: 
1:1c02b36:         assertTrue( esaFile.exists() );
1:1c02b36: 
1:1c02b36:         //expected files/directories inside the esa file
1:1c02b36:         List expectedFiles = new ArrayList();
1:1c02b36: 
1:1c02b36:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:1c02b36:         expectedFiles.add( "OSGI-INF/" );
1:1c02b36:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:1c02b36:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:1c02b36: 
1:1c02b36:         ZipFile esa = new ZipFile( esaFile );
1:9b1f38a: 
1:1c02b36:         Enumeration entries = esa.getEntries();
1:9b1f38a: 
1:1c02b36:         assertTrue( entries.hasMoreElements() );
1:9b1f38a: 
1:1c02b36:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:1c02b36:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:9b1f38a: 
1:1c02b36:         // Test for the Foo header
1:1c02b36:         testForHeader(esa, "Foo", "Foo: bar");
1:1c02b36: 
1:1c02b36:         // Test for the MyHeader header
1:1c02b36:         testForHeader(esa, "MyHeader", "MyHeader: myValue");
1:3ce2e75: 
1:5302dea:         // Test for the Subsystem-Name header
1:5302dea:         testForHeader(esa, "Subsystem-Name", "Subsystem-Name: myName");
1:1c02b36:     }
1:1c02b36: 
1:f2a8ed5:     public void testSubsystemContentType()
1:f2a8ed5:         throws Exception
1:f2a8ed5:     {
1:f2a8ed5:         File testPom = new File(getBasedir(),
1:f2a8ed5:                 "target/test-classes/unit/basic-esa-content-type/plugin-config.xml");
1:f2a8ed5: 
1:f2a8ed5:         EsaMojo mojo = (EsaMojo) lookupMojo("esa", testPom);
1:f2a8ed5: 
1:f2a8ed5:         assertNotNull(mojo);
1:f2a8ed5: 
1:f2a8ed5:         String finalName = (String) getVariableValueFromObject(mojo, "finalName");
1:f2a8ed5: 
1:f2a8ed5:         String workDir = (String) getVariableValueFromObject(mojo, "workDirectory");
1:f2a8ed5: 
1:f2a8ed5:         String outputDir = (String) getVariableValueFromObject(mojo, "outputDirectory");
1:f2a8ed5: 
1:f2a8ed5:         mojo.execute();
1:f2a8ed5: 
1:f2a8ed5:         // check the generated esa file
1:f2a8ed5:         File esaFile = new File(outputDir, finalName + ".esa");
1:f2a8ed5: 
1:f2a8ed5:         assertTrue(esaFile.exists());
1:f2a8ed5: 
1:f2a8ed5:         // expected files/directories inside the esa file
1:f2a8ed5:         List expectedFiles = new ArrayList();
1:f2a8ed5: 
1:f2a8ed5:         expectedFiles.add("OSGI-INF/SUBSYSTEM.MF");
1:f2a8ed5:         expectedFiles.add("OSGI-INF/");
1:f2a8ed5:         expectedFiles.add("maven-artifact01-1.0-SNAPSHOT.jar");
1:f2a8ed5:         expectedFiles.add("maven-artifact02-1.0-SNAPSHOT.jar");
1:f2a8ed5:         expectedFiles.add("maven-artifact03-1.1-SNAPSHOT.jar");
1:f2a8ed5: 
1:f2a8ed5:         ZipFile esa = new ZipFile(esaFile);
1:f2a8ed5: 
1:f2a8ed5:         Enumeration entries = esa.getEntries();
1:f2a8ed5: 
1:f2a8ed5:         assertTrue(entries.hasMoreElements());
1:f2a8ed5: 
1:f2a8ed5:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:f2a8ed5:         assertEquals("Missing files: " + expectedFiles, 0, missing);
1:f2a8ed5: 
1:f2a8ed5:         Manifest mf = getSubsystemManifest(esa);
1:f2a8ed5:         Map<String, Map<String, String>> header = getHeader(mf, "Subsystem-Content");
1:f2a8ed5: 
1:f2a8ed5:         Map<String, String> attributes = null;
1:f2a8ed5: 
1:f2a8ed5:         attributes = header.get("maven-artifact01-1.0-SNAPSHOT");
1:f2a8ed5:         assertNotNull(attributes);
2:3ce2e75:         assertEquals("[1.0.0.SNAPSHOT,1.0.0.SNAPSHOT]", attributes.get("version"));
1:f2a8ed5:         assertNull(attributes.get("type"));
1:f2a8ed5: 
1:f2a8ed5:         attributes = header.get("maven-artifact02-1.0-SNAPSHOT");
1:f2a8ed5:         assertNotNull(attributes);
1:daec486:         assertEquals("[1.3,2.5)", attributes.get("version"));
1:f2a8ed5:         assertNull(attributes.get("type"));
1:f2a8ed5: 
1:f2a8ed5:         attributes = header.get("maven-artifact03");
1:f2a8ed5:         assertNotNull(attributes);
1:3ce2e75:         assertEquals("[1.1.0.SNAPSHOT.NNN,1.1.0.SNAPSHOT.NNN]", attributes.get("version"));
1:f2a8ed5:         assertEquals("osgi.fragment", attributes.get("type"));
1:3ce2e75: 
1:f2a8ed5:         attributes = header.get("maven-artifact04");
1:f2a8ed5:         assertNotNull(attributes);
1:3ce2e75:         assertEquals("[1.2.0.SNAPSHOT,1.2.0.SNAPSHOT]", attributes.get("version"));
1:f2a8ed5:         assertEquals("feature", attributes.get("type"));
1:f2a8ed5:     }
1:3ce2e75: 
1:9b1f38a:     private int getSizeOfExpectedFiles( Enumeration entries, List expectedFiles )
1:9b1f38a:     {
1:9b1f38a:         while( entries.hasMoreElements() )
1:9b1f38a:         {
1:9b1f38a:             ZipEntry entry = ( ZipEntry ) entries.nextElement();
1:f2a8ed5: 
1:9b1f38a:             if( expectedFiles.contains( entry.getName() ) )
1:9b1f38a:             {
1:9b1f38a:                 expectedFiles.remove( entry.getName() );
1:9b1f38a:                 assertFalse( expectedFiles.contains( entry.getName() ) );
1:9b1f38a:             }
1:9b1f38a:             else
1:9b1f38a:             {
1:9b1f38a:                 fail( entry.getName() + " is not included in the expected files" );
1:9b1f38a:             }
1:9b1f38a:         }
1:9b1f38a:         return expectedFiles.size();
1:9b1f38a:     }
1:f2a8ed5: 
1:9b1f38a: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:daec486
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("[1.3,2.5)", attributes.get("version"));
commit:3ce2e75
/////////////////////////////////////////////////////////////////////////
1: import aQute.lib.osgi.Analyzer;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         assertEquals("[1.0.0.SNAPSHOT,1.0.0.SNAPSHOT]", attributes.get("version"));
1: 
1:         assertEquals("[1.0.0.SNAPSHOT,1.0.0.SNAPSHOT]", attributes.get("version"));
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         assertEquals("[1.0.0.SNAPSHOT,1.0.0.SNAPSHOT]", attributes.get("version"));
1: 
1:         assertEquals("[1.0.0.SNAPSHOT,1.0.0.SNAPSHOT]", attributes.get("version"));
1: 
1:         assertEquals("[1.1.0.SNAPSHOT.NNN,1.1.0.SNAPSHOT.NNN]", attributes.get("version"));
1: 
1:         assertEquals("[1.2.0.SNAPSHOT,1.2.0.SNAPSHOT]", attributes.get("version"));
1: 
commit:f137dd1
/////////////////////////////////////////////////////////////////////////
1:         // start-order is actually a directive, shows up here as the name+":"
1:         assertEquals("1", attributes.get("start-order:"));
1:         assertEquals("2", attributes.get("start-order:"));
commit:a551336
/////////////////////////////////////////////////////////////////////////
1:         testBasicEsa( "target/test-classes/unit/basic-esa-test/plugin-config.xml", null );
1:     }
1:     
1:     public void testBasicEsaPgkType()
1:         throws Exception
1:     {
1:         testBasicEsa( "target/test-classes/unit/basic-esa-test-with-pgk-type/plugin-config.xml", "maven-esa-test-1.0-SNAPSHOT.jar" );
1:     }
1:       
1:     private void testBasicEsa(String path, String extraExpectedFiles)
1:         throws Exception
1:     {
1:                                  path );
/////////////////////////////////////////////////////////////////////////
1:         if (extraExpectedFiles != null)
1:         {
1:             expectedFiles.add( extraExpectedFiles );
1:         }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:f2a8ed5
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.util.Map;
1: import java.util.jar.Attributes;
1: import java.util.jar.Manifest;
0: import aQute.lib.osgi.Analyzer;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     private Manifest getSubsystemManifest(ZipFile esa) throws Exception {
1:         ZipEntry entry = esa.getEntry("OSGI-INF/SUBSYSTEM.MF");
1: 
1:         InputStream in = esa.getInputStream(entry);
1:         Manifest mf = new Manifest(in);
1:         
1:         return mf;
1:     }
1:           
1:     private Map<String, Map<String, String>> getHeader(Manifest mf, String header) {
1:         Attributes attributes = mf.getMainAttributes();
1:         String value = attributes.getValue(header);
1:         assertNotNull("Header " + header + " not found", value);
1:         return Analyzer.parseHeader(value, null);
1:     }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Manifest mf = getSubsystemManifest(esa);
1:         Map<String, Map<String, String>> header = getHeader(mf, "Subsystem-Content");
1:         
1:         Map<String, String> attributes = null;
1:         
1:         attributes = header.get("maven-artifact01-1.0-SNAPSHOT");
1:         assertNotNull(attributes);
0:         assertEquals("1.0.0.SNAPSHOT", attributes.get("version"));
0:         assertEquals("1", attributes.get("start-order"));
1:         assertNull(attributes.get("type"));
1:         
1:         attributes = header.get("maven-artifact02-1.0-SNAPSHOT");
1:         assertNotNull(attributes);
0:         assertEquals("1.0.0.SNAPSHOT", attributes.get("version"));
0:         assertEquals("2", attributes.get("start-order"));
1:         assertNull(attributes.get("type"));
/////////////////////////////////////////////////////////////////////////
1:     public void testSubsystemContentType()
1:         throws Exception
1:     {
1:         File testPom = new File(getBasedir(),
1:                 "target/test-classes/unit/basic-esa-content-type/plugin-config.xml");
1: 
1:         EsaMojo mojo = (EsaMojo) lookupMojo("esa", testPom);
1: 
1:         assertNotNull(mojo);
1: 
1:         String finalName = (String) getVariableValueFromObject(mojo, "finalName");
1: 
1:         String workDir = (String) getVariableValueFromObject(mojo, "workDirectory");
1: 
1:         String outputDir = (String) getVariableValueFromObject(mojo, "outputDirectory");
1: 
1:         mojo.execute();
1: 
1:         // check the generated esa file
1:         File esaFile = new File(outputDir, finalName + ".esa");
1: 
1:         assertTrue(esaFile.exists());
1: 
1:         // expected files/directories inside the esa file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add("OSGI-INF/SUBSYSTEM.MF");
1:         expectedFiles.add("OSGI-INF/");
1:         expectedFiles.add("maven-artifact01-1.0-SNAPSHOT.jar");
1:         expectedFiles.add("maven-artifact02-1.0-SNAPSHOT.jar");
1:         expectedFiles.add("maven-artifact03-1.1-SNAPSHOT.jar");
1: 
1:         ZipFile esa = new ZipFile(esaFile);
1: 
1:         Enumeration entries = esa.getEntries();
1: 
1:         assertTrue(entries.hasMoreElements());
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles, 0, missing);
1: 
1:         Manifest mf = getSubsystemManifest(esa);
1:         Map<String, Map<String, String>> header = getHeader(mf, "Subsystem-Content");
1:         
1:         Map<String, String> attributes = null;
1:         
1:         attributes = header.get("maven-artifact01-1.0-SNAPSHOT");
1:         assertNotNull(attributes);
0:         assertEquals("1.0.0.SNAPSHOT", attributes.get("version"));
1:         assertNull(attributes.get("type"));
1:         
1:         attributes = header.get("maven-artifact02-1.0-SNAPSHOT");
1:         assertNotNull(attributes);
0:         assertEquals("1.0.0.SNAPSHOT", attributes.get("version"));
1:         assertNull(attributes.get("type"));
1:         
1:         attributes = header.get("maven-artifact03");
1:         assertNotNull(attributes);
0:         assertEquals("1.1.0.SNAPSHOT.NNN", attributes.get("version"));
1:         assertEquals("osgi.fragment", attributes.get("type"));
1:         
1:         attributes = header.get("maven-artifact04");
1:         assertNotNull(attributes);
0:         assertEquals("1.2.0.SNAPSHOT", attributes.get("version"));
1:         assertEquals("feature", attributes.get("type"));
1:     }
1:     
commit:5302dea
/////////////////////////////////////////////////////////////////////////
1:         
1:         // Test for the Subsystem-Name header
1:         testForHeader(esa, "Subsystem-Name", "Subsystem-Name: myName");
commit:1c02b36
/////////////////////////////////////////////////////////////////////////
1:     public void testCustomInstructions()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-esa-custom-instructions/plugin-config.xml" );
1: 
1:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
1: 
1:         //check the generated esa file
1:         File esaFile = new File( outputDir, finalName + ".esa" );
1: 
1:         assertTrue( esaFile.exists() );
1: 
1:         //expected files/directories inside the esa file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:         expectedFiles.add( "OSGI-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1: 
1:         ZipFile esa = new ZipFile( esaFile );
1:         
1:         Enumeration entries = esa.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1: 
1:         // Test for the Foo header
1:         testForHeader(esa, "Foo", "Foo: bar");
1: 
1:         // Test for the MyHeader header
1:         testForHeader(esa, "MyHeader", "MyHeader: myValue");
1:     }
1: 
author:Graham Charters
-------------------------------------------------------------------------------
commit:edce8a5
/////////////////////////////////////////////////////////////////////////
1:             if (line.contains(header)) {
/////////////////////////////////////////////////////////////////////////
1:     
0:     private void testForLine(ZipFile esa, String exactEntry) throws Exception {
1:         
1:         Enumeration entries = esa.getEntries();
1: 
1: 
1:         // Test Use-Bundle & Subsytem-Type inclusion
1:         ZipEntry entry = esa.getEntry("OSGI-INF/SUBSYSTEM.MF");
1:         BufferedReader br = new BufferedReader(new InputStreamReader(esa.getInputStream(entry)));
1: 
0:         Boolean foundEntry=false;
1:         
1:         String line;
0:         while ((!foundEntry) && ((line = br.readLine()) != null)) {
0:             if (line.equals(exactEntry)) {
0:                 foundEntry = true;
1:             }
1:         }
0:         assertTrue("Found " + exactEntry + ":", foundEntry);
1:         
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public void testSubsystemStartOrder()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-esa-start-order/plugin-config.xml" );
1: 
1:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
1: 
1:         //check the generated esa file
1:         File esaFile = new File( outputDir, finalName + ".esa" );
1: 
1:         assertTrue( esaFile.exists() );
1: 
1:         //expected files/directories inside the esa file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:         expectedFiles.add( "OSGI-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1: 
1:         ZipFile esa = new ZipFile( esaFile );
1:         
1:         Enumeration entries = esa.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1: 
1:         // Test for the Use-Bundle header
0:         testForHeader(esa, "Subsystem-Content", "Subsystem-Content: maven-artifact02-1.0-SNAPSHOT;version=\"1.0.0.SNAPSHOT\";start-order=\"1\",");
1:  
0:         // Test for the Subsystem-Content header
0:         testForLine(esa, " maven-artifact01-1.0-SNAPSHOT;version=\"1.0.0.SNAPSHOT\";start-order=\"2\"");
1:     }
1: 
commit:9b1f38a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.plugin.esa;
1: 
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.InputStreamReader;
1: import java.util.ArrayList;
1: import java.util.Enumeration;
1: import java.util.List;
0: import java.util.Iterator;
1: 
1: import org.apache.maven.plugin.testing.AbstractMojoTestCase;
1: import org.codehaus.plexus.archiver.zip.ZipEntry;
1: import org.codehaus.plexus.archiver.zip.ZipFile;
0: import org.codehaus.plexus.util.FileUtils;
1: 
1: /**
1:  * @author <a href="mailto:aramirez@apache.org">Allan Ramirez</a>
1:  */
1: public class EsaMojoTest
1:     extends AbstractMojoTestCase
1: {
1:     public void testEsaTestEnvironment()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-esa-test/plugin-config.xml" );
1: 
1:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1: 
1:         assertNotNull( mojo );
1:     }
1: 
1:     public void testBasicEsa()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-esa-test/plugin-config.xml" );
1: 
1:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
1:         //check the generated esa file
1:         File esaFile = new File( outputDir, finalName + ".esa" );
1: 
1:         assertTrue( esaFile.exists() );
1: 
1:         //expected files/directories inside the esa file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1: 
1:         ZipFile esa = new ZipFile( esaFile );
1: 
1:         Enumeration entries = esa.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:     }
1: 
1:     public void testBasicEsaWithDescriptor()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-esa-with-descriptor/plugin-config.xml" );
1: 
1:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
1:         //check the generated esa file
1:         File esaFile = new File( outputDir, finalName + ".esa" );
1: 
1:         assertTrue( esaFile.exists() );
1: 
1:         //expected files/directories inside the esa file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/" );
1:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:         expectedFiles.add( "OSGI-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1: 
1:         ZipFile esa = new ZipFile( esaFile );
1: 
1:         Enumeration entries = esa.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:     }
1: 
1:     public void testBasicEsaWithManifest()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-esa-with-manifest/plugin-config.xml" );
1: 
1:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
1: 
1:         //check the generated esa file
1:         File esaFile = new File( outputDir, finalName + ".esa" );
1: 
1:         assertTrue( esaFile.exists() );
1: 
1:         //expected files/directories inside the esa file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/" );
1:         expectedFiles.add( "META-INF/MANIFEST.MF" );
1:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:         expectedFiles.add( "OSGI-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1: 
1:         ZipFile esa = new ZipFile( esaFile );
1: 
1:         Enumeration entries = esa.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:     }
1:     
1:     private void testForHeader(ZipFile esa, String header, String exactEntry) throws Exception {
1:         
1:         Enumeration entries = esa.getEntries();
1: 
1: 
0:         // Test Use-Bundle & Subsytem-Type inclusion
0:         ZipEntry entry = esa.getEntry("OSGI-INF/SUBSYSTEM.MF");
0:         BufferedReader br = new BufferedReader(new InputStreamReader(esa.getInputStream(entry)));
1: 
1:         Boolean foundHeader=false;
1:         
0:         String line;
1:         while ((line = br.readLine()) != null) {
0:             if (line.contains(new String(header))) {
1:                 assertEquals(exactEntry, line);
1:                 foundHeader = true;
1:             }
1:         }
1:         assertTrue("Found " + header + ":", foundHeader);
1:         
1:     }
1: 
1:     public void testSubsystemManifestGeneration()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-esa-without-manifest/plugin-config.xml" );
1: 
1:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
1: 
1:         //check the generated esa file
1:         File esaFile = new File( outputDir, finalName + ".esa" );
1: 
1:         assertTrue( esaFile.exists() );
1: 
1:         //expected files/directories inside the esa file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/" );
1:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:         expectedFiles.add( "OSGI-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1: 
1:         ZipFile esa = new ZipFile( esaFile );
1:         
1:         Enumeration entries = esa.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1: 
0:         // Test for the Use-Bundle header
1:         testForHeader(esa, "Use-Bundle", "Use-Bundle: org.apache.aries.test.Bundle;version=1.0.0-SNAPSHOT");
1: 
1:         // Test for the Subsystem-Type header
1:         testForHeader(esa, "Subsystem-Type", "Subsystem-Type: feature");
1:     }
1: 
1: 
1:     public void testArchiveContentConfigurationNoBundles()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-esa-no-bundles/plugin-config.xml" );
1: 
1:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
1: 
1:         //check the generated esa file
1:         File esaFile = new File( outputDir, finalName + ".esa" );
1: 
1:         assertTrue( esaFile.exists() );
1: 
1:         //expected files/directories inside the esa file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/" );
1:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:         expectedFiles.add( "OSGI-INF/" );
1: 
1:         ZipFile esa = new ZipFile( esaFile );
1: 
1:         Enumeration entries = esa.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1: 
1:     }
1: 
1:     public void testArchiveContentConfigurationSubsystemContentBundles()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-esa-content-bundles-only/plugin-config.xml" );
1: 
1:         EsaMojo mojo = ( EsaMojo ) lookupMojo( "esa", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
1: 
1:         //check the generated esa file
1:         File esaFile = new File( outputDir, finalName + ".esa" );
1: 
1:         assertTrue( esaFile.exists() );
1: 
1:         //expected files/directories inside the esa file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-esa-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/" );
1:         expectedFiles.add( "OSGI-INF/SUBSYSTEM.MF" );
1:         expectedFiles.add( "OSGI-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1: 
1:         ZipFile esa = new ZipFile( esaFile );
1: 
1:         Enumeration entries = esa.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1: 
1:     }
1: 
1:     private int getSizeOfExpectedFiles( Enumeration entries, List expectedFiles )
1:     {
1:         while( entries.hasMoreElements() )
1:         {
1:             ZipEntry entry = ( ZipEntry ) entries.nextElement();
1: 
1:             if( expectedFiles.contains( entry.getName() ) )
1:             {
1:                 expectedFiles.remove( entry.getName() );
1:                 assertFalse( expectedFiles.contains( entry.getName() ) );
1:             }
1:             else
1:             {
1:                 fail( entry.getName() + " is not included in the expected files" );
1:             }
1:         }
1:         return expectedFiles.size();
1:     }
1: 
1: }
============================================================================