1:629b3bd: /*
1:629b3bd:  * Licensed to the Apache Software Foundation (ASF) under one
1:629b3bd:  * or more contributor license agreements.  See the NOTICE file
1:629b3bd:  * distributed with this work for additional information
1:629b3bd:  * regarding copyright ownership.  The ASF licenses this file
1:629b3bd:  * to you under the Apache License, Version 2.0 (the
1:629b3bd:  * "License"); you may not use this file except in compliance
1:629b3bd:  * with the License.  You may obtain a copy of the License at
2:629b3bd:  *
1:629b3bd:  *   http://www.apache.org/licenses/LICENSE-2.0
1:629b3bd:  *
1:629b3bd:  * Unless required by applicable law or agreed to in writing,
1:629b3bd:  * software distributed under the License is distributed on an
1:629b3bd:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:629b3bd:  * KIND, either express or implied.  See the License for the
1:629b3bd:  * specific language governing permissions and limitations
1:629b3bd:  * under the License.
3:629b3bd:  */
1:629b3bd: package org.apache.aries.application.impl;
10:629b3bd: 
1:629b3bd: import java.io.IOException;
1:629b3bd: import java.io.InputStream;
1:629b3bd: import java.util.jar.Manifest;
1:629b3bd: 
1:629b3bd: import org.apache.aries.application.ApplicationMetadata;
1:beeb1d7: import org.apache.aries.application.ApplicationMetadataFactory;
1:910fec0: import org.apache.aries.util.manifest.ManifestProcessor;
1:629b3bd: import org.osgi.framework.Version;
1:629b3bd: 
1:beeb1d7: public class ApplicationMetadataFactoryImpl implements ApplicationMetadataFactory
1:59e7b8b: {  
1:d7dcea4:   public ApplicationMetadata parseApplicationMetadata(InputStream in) throws IOException
1:3162c07:   {
1:629b3bd:     Manifest man = ManifestProcessor.parseManifest(in);
1:3162c07:     
1:629b3bd:     ApplicationMetadata metadata = new ApplicationMetadataImpl(man);
1:629b3bd:     
2:629b3bd:     return metadata;
1:3162c07:   }
1:59e7b8b: 
1:d7dcea4:   public ApplicationMetadata createApplicationMetadata(Manifest man)
1:3162c07:   {
1:629b3bd:     return new ApplicationMetadataImpl(man);
1:3162c07:   }
1:3162c07: 
6:629b3bd: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.manifest.ManifestProcessor;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:59e7b8b
/////////////////////////////////////////////////////////////////////////
1: {  
/////////////////////////////////////////////////////////////////////////
1: 
commit:beeb1d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.ApplicationMetadataFactory;
1: public class ApplicationMetadataFactoryImpl implements ApplicationMetadataFactory
commit:d7dcea4
/////////////////////////////////////////////////////////////////////////
0:   public ApplicationMetadata getApplicationMetadata (String applicationSymbolicName, Version version)
1:   public ApplicationMetadata parseApplicationMetadata(InputStream in) throws IOException
/////////////////////////////////////////////////////////////////////////
1:   public ApplicationMetadata createApplicationMetadata(Manifest man)
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:3162c07
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.Content;
0: import org.apache.aries.application.VersionRange;
/////////////////////////////////////////////////////////////////////////
0:     ApplicationMetadata existingApp = applications.putIfAbsent(app.getApplicationScope(), app);
/////////////////////////////////////////////////////////////////////////
0:   public boolean unregisterApplication(ApplicationMetadata app)
0:     return applications.remove(app.getApplicationScope()) != null;
1:   }
1: 
0:   public Content parseContent(String content)
1:   {
0:     return new ContentImpl(content);
1:   }
1: 
0:   public VersionRange parseVersionRange(String versionRange)
1:   {
0:     return new VersionRangeImpl(versionRange);
commit:629b3bd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.impl;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.ConcurrentMap;
1: import java.util.jar.Manifest;
1: 
1: import org.apache.aries.application.ApplicationMetadata;
0: import org.apache.aries.application.ApplicationMetadataManager;
0: import org.apache.aries.application.utils.manifest.ManifestProcessor;
1: import org.osgi.framework.Version;
1: 
0: /**
0:  * This class implements the application metadata manager. It is not directly
0:  * exposed outside of the bundle, their is a service facade in front of it which
0:  * is used by clients.
1:  */
0: public class ApplicationMetadataManagerImpl implements ApplicationMetadataManager
0: {
0:   /** The applications managed, keyed based on the app symbolic name and version */
0:   public ConcurrentMap<String, ApplicationMetadata> applications = new ConcurrentHashMap<String, ApplicationMetadata>();
1: 
0:   public ApplicationMetadata getApplication(String applicationSymbolicName, Version version)
0:   {
0:     ApplicationMetadata metadata = applications.get(applicationSymbolicName + "_" + version);
1:     return metadata;
1:   }
1: 
0:   public ApplicationMetadata parseApplication(InputStream in) throws IOException
0:   {
1:     Manifest man = ManifestProcessor.parseManifest(in);
1:     
1:     ApplicationMetadata metadata = new ApplicationMetadataImpl(man);
1:     
1:     return metadata;
1:   }
1:   
0:   public boolean registerApplication(ApplicationMetadata app)
0:   {
0:     String key = app.getApplicationSymbolicName() + "_" + app.getApplicationVersion();
1:     
0:     ApplicationMetadata existingApp = applications.putIfAbsent(key, app);
1:     
0:     return existingApp == null;
1:   }
1:   
0:   public ApplicationMetadata createApplication(Manifest man)
0:   {
1:     return new ApplicationMetadataImpl(man);
1:   }
1:   
0:   /**
0:    * This method is called by the service facade to remove applications when
0:    * the client bundle releases the service. It is not public.
1:    * 
0:    * @param app the application to remove.
1:    */
0:   public void removeApplication(ApplicationMetadata app)
0:   {
0:     String key = app.getApplicationSymbolicName() + "_" + app.getApplicationVersion();
0:     applications.remove(key);
1:   }
1: 
1: }
============================================================================