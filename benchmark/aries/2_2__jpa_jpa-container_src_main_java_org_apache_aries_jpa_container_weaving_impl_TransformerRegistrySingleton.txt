1:05eb686: /*
1:05eb686:  * Licensed to the Apache Software Foundation (ASF) under one
1:05eb686:  * or more contributor license agreements.  See the NOTICE file
1:05eb686:  * distributed with this work for additional information
1:05eb686:  * regarding copyright ownership.  The ASF licenses this file
1:05eb686:  * to you under the Apache License, Version 2.0 (the
1:05eb686:  * "License"); you may not use this file except in compliance
1:05eb686:  * with the License.  You may obtain a copy of the License at
1:05eb686:  *
1:05eb686:  *   http://www.apache.org/licenses/LICENSE-2.0
1:05eb686:  *
1:05eb686:  * Unless required by applicable law or agreed to in writing,
1:05eb686:  * software distributed under the License is distributed on an
1:05eb686:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:05eb686:  * KIND, either express or implied.  See the License for the
1:05eb686:  * specific language governing permissions and limitations
1:05eb686:  * under the License.
1:05eb686:  */
1:2cfdf52: package org.apache.aries.jpa.container.weaving.impl;
1:2cfdf52: 
1:05eb686: 
1:05eb686: /**
1:2cfdf52:  * This class is used to get hold of the active {@link TransformerRegistry} for this bundle.
1:05eb686:  */
1:2cfdf52: public class TransformerRegistrySingleton {
1:ec3ea65:     private static TransformerRegistry instance;
1:ec3ea65:     
1:ec3ea65:     private TransformerRegistrySingleton() {
1:ec3ea65:     }
1:2cfdf52: 
1:2cfdf52:     public static TransformerRegistry get() {
1:ec3ea65:         if (instance == null) {
1:ec3ea65:             instance = new JPAWeavingHook();
1:2cfdf52:         }
1:ec3ea65:         return instance;
1:2cfdf52:     }
1:05eb686: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     private static TransformerRegistry instance;
1:     
1:     private TransformerRegistrySingleton() {
1:     }
1:         if (instance == null) {
1:             instance = new JPAWeavingHook();
1:         return instance;
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.container.weaving.impl;
1: 
1:  * This class is used to get hold of the active {@link TransformerRegistry} for this bundle.
1: public class TransformerRegistrySingleton {
0:     private static TransformerRegistry _instance;
1: 
1:     public static TransformerRegistry get() {
0:         if (_instance == null) {
0:             _instance = new JPAWeavingHook();
1:         }
0:         return _instance;
1:     }
commit:5a97ba2
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.jpa.container.quiesce.impl;
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:05eb686
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.jpa.container.impl;
1: 
1: /**
0:  * An asynchronous callback for destroying something
1:  */
0: public interface DestroyCallback {
0:   public void callback();
1: }
============================================================================