1:d4b3ee0: /*
1:d4b3ee0:  * Licensed to the Apache Software Foundation (ASF) under one
1:d4b3ee0:  * or more contributor license agreements.  See the NOTICE file
1:d4b3ee0:  * distributed with this work for additional information
1:d4b3ee0:  * regarding copyright ownership.  The ASF licenses this file
1:d4b3ee0:  * to you under the Apache License, Version 2.0 (the
1:d4b3ee0:  * "License"); you may not use this file except in compliance
1:d4b3ee0:  * with the License.  You may obtain a copy of the License at
1:d4b3ee0:  *
1:d4b3ee0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d4b3ee0:  *
1:d4b3ee0:  * Unless required by applicable law or agreed to in writing,
1:d4b3ee0:  * software distributed under the License is distributed on an
1:d4b3ee0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d4b3ee0:  * KIND, either express or implied.  See the License for the
1:d4b3ee0:  * specific language governing permissions and limitations
1:d4b3ee0:  * under the License.
1:d4b3ee0:  */
1:d4b3ee0: package org.apache.aries.blueprint;
1:d4b3ee0: 
1:d4b3ee0: import java.lang.reflect.InvocationHandler;
1:d4b3ee0: import java.util.Collection;
1:d4b3ee0: import java.util.concurrent.Callable;
1:d4b3ee0: 
1:d4b3ee0: import org.apache.aries.blueprint.di.Repository;
1:d4b3ee0: import org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl;
1:d4b3ee0: import org.apache.aries.proxy.InvocationListener;
1:d4b3ee0: import org.apache.aries.proxy.ProxyManager;
1:d4b3ee0: import org.apache.aries.proxy.UnableToProxyException;
1:d4b3ee0: import org.apache.aries.proxy.impl.AbstractProxyManager;
1:d4b3ee0: import org.osgi.framework.Bundle;
1:d4b3ee0: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:d4b3ee0: 
1:d4b3ee0: public class ReferencesTest extends AbstractBlueprintTest {
1:d4b3ee0: 
1:d4b3ee0: 
1:d4b3ee0: 
1:d4b3ee0:     public void testWiring() throws Exception {
1:d4b3ee0:         ComponentDefinitionRegistryImpl registry = parse("/test-references.xml");
1:d4b3ee0:         ProxyManager proxyManager = new AbstractProxyManager() {
1:d4b3ee0:             @Override
1:d4b3ee0:             protected Object createNewProxy(Bundle bundle, Collection<Class<?>> classes, Callable<Object> objectCallable, InvocationListener invocationListener) throws UnableToProxyException {
1:d4b3ee0:                 return new Object();
1:d4b3ee0:             }
1:d4b3ee0: 
1:d4b3ee0:             @Override
1:d4b3ee0:             protected InvocationHandler getInvocationHandler(Object o) {
1:d4b3ee0:                 return null;
1:d4b3ee0:             }
1:d4b3ee0: 
1:d4b3ee0:             @Override
1:d4b3ee0:             protected boolean isProxyClass(Class<?> aClass) {
1:d4b3ee0:                 return false;
1:d4b3ee0:             }
1:d4b3ee0:         };
1:d4b3ee0:         Repository repository = new TestBlueprintContainer(registry, proxyManager).getRepository();
1:d4b3ee0:         
1:d4b3ee0:         repository.create("refItf");
1:d4b3ee0: 
1:d4b3ee0:         try {
1:d4b3ee0:             repository.create("refClsErr");
1:d4b3ee0:             fail("Should have failed");
1:d4b3ee0:         } catch (ComponentDefinitionException e) {
1:d4b3ee0: 
1:d4b3ee0:         }
1:d4b3ee0: 
1:d4b3ee0:         repository.create("refClsOk");
1:d4b3ee0:     }
1:d4b3ee0: 
1:d4b3ee0:     static class ProxyGenerationException extends RuntimeException {
1:d4b3ee0:     }
1:d4b3ee0:     
1:d4b3ee0: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:d4b3ee0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint;
1: 
1: import java.lang.reflect.InvocationHandler;
1: import java.util.Collection;
1: import java.util.concurrent.Callable;
1: 
1: import org.apache.aries.blueprint.di.Repository;
1: import org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl;
1: import org.apache.aries.proxy.InvocationListener;
1: import org.apache.aries.proxy.ProxyManager;
1: import org.apache.aries.proxy.UnableToProxyException;
1: import org.apache.aries.proxy.impl.AbstractProxyManager;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: 
1: public class ReferencesTest extends AbstractBlueprintTest {
1: 
1: 
1: 
1:     public void testWiring() throws Exception {
1:         ComponentDefinitionRegistryImpl registry = parse("/test-references.xml");
1:         ProxyManager proxyManager = new AbstractProxyManager() {
1:             @Override
1:             protected Object createNewProxy(Bundle bundle, Collection<Class<?>> classes, Callable<Object> objectCallable, InvocationListener invocationListener) throws UnableToProxyException {
1:                 return new Object();
1:             }
1: 
1:             @Override
1:             protected InvocationHandler getInvocationHandler(Object o) {
1:                 return null;
1:             }
1: 
1:             @Override
1:             protected boolean isProxyClass(Class<?> aClass) {
1:                 return false;
1:             }
1:         };
1:         Repository repository = new TestBlueprintContainer(registry, proxyManager).getRepository();
1:         
1:         repository.create("refItf");
1: 
1:         try {
1:             repository.create("refClsErr");
1:             fail("Should have failed");
1:         } catch (ComponentDefinitionException e) {
1: 
1:         }
1: 
1:         repository.create("refClsOk");
1:     }
1: 
1:     static class ProxyGenerationException extends RuntimeException {
1:     }
1:     
1: }
============================================================================