1:8ea3042: /*
1:8ea3042:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ea3042:  * or more contributor license agreements.  See the NOTICE file
1:8ea3042:  * distributed with this work for additional information
1:8ea3042:  * regarding copyright ownership.  The ASF licenses this file
1:8ea3042:  * to you under the Apache License, Version 2.0 (the
1:8ea3042:  * "License"); you may not use this file except in compliance
1:8ea3042:  * with the License.  You may obtain a copy of the License at
1:8ea3042:  *
1:8ea3042:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8ea3042:  *
1:8ea3042:  * Unless required by applicable law or agreed to in writing,
1:8ea3042:  * software distributed under the License is distributed on an
1:8ea3042:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8ea3042:  * KIND, either express or implied.  See the License for the
1:8ea3042:  * specific language governing permissions and limitations
1:8ea3042:  * under the License.
5:8ea3042:  */
1:8ea3042: package org.apache.aries.jpa.container.weaving.impl;
17:8ea3042: 
1:8ea3042: import java.util.ArrayList;
1:8ea3042: import java.util.Collection;
1:2cfdf52: import java.util.Collections;
1:2cfdf52: import java.util.HashMap;
1:8ea3042: import java.util.LinkedHashSet;
1:2cfdf52: import java.util.Map;
1:8ea3042: 
1:0c52599: import javax.persistence.Entity;
1:8ea3042: import javax.persistence.spi.ClassTransformer;
1:8ea3042: 
1:8ea3042: import org.osgi.framework.Bundle;
1:8ea3042: import org.osgi.framework.hooks.weaving.WeavingException;
1:8ea3042: import org.osgi.framework.hooks.weaving.WeavingHook;
1:8ea3042: import org.osgi.framework.hooks.weaving.WovenClass;
1:8ea3042: import org.osgi.framework.wiring.BundleWiring;
1:2cfdf52: import org.slf4j.Logger;
1:2cfdf52: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: /**
1:2cfdf52:  * This weaving hook delegates to any registered {@link ClassTransformer} instances for a given bundle
1:2cfdf52:  */
1:8ea3042: public class JPAWeavingHook implements WeavingHook, TransformerRegistry {
1:2cfdf52:     private static final Logger LOGGER = LoggerFactory.getLogger(JPAWeavingHook.class);
1:2cfdf52: 
1:2cfdf52:     /**
1:6514385:      * With luck we will only have one persistence unit per bundle, but if we don't we'll need to call them
1:6514385:      * until one of them does a transform or we run out.
1:6514385:      */
1:6514385:     private final Map<Bundle, LinkedHashSet<ClassTransformer>> registeredTransformers = new HashMap<Bundle, LinkedHashSet<ClassTransformer>>();
1:6514385: 
1:6514385:     /**
1:2cfdf52:      * This constructor should not be called directly, the {@link JPAWeavingHookFactory} should be used to
1:2cfdf52:      * ensure that Weaving support is available.
1:2cfdf52:      */
1:2cfdf52:     JPAWeavingHook() {
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public void weave(WovenClass wovenClass) {
1:2cfdf52:         BundleWiring wiring = wovenClass.getBundleWiring();
1:2cfdf52:         Bundle bundle = wiring.getBundle();
1:2cfdf52:         ClassLoader cl = wiring.getClassLoader();
1:2cfdf52:         Collection<ClassTransformer> transformersToTry = getTransformers(bundle);
1:2cfdf52:         for (ClassTransformer transformer : transformersToTry) {
1:2cfdf52:             if (transformClass(wovenClass, cl, transformer)) {
1:2cfdf52:                 LOGGER.info("Weaving " + wovenClass.getClassName() + " using " + transformer.getClass().getName());
1:2cfdf52:                 break;
1:ec3ea65:             }
1:2cfdf52:         }
1:0c52599:         Class<?> dClass = wovenClass.getDefinedClass();
1:ec3ea65:         if (transformersToTry.isEmpty() && dClass != null && dClass.getAnnotation(Entity.class) != null) {
1:0c52599:             LOGGER.warn("Loading " + wovenClass.getClassName() + " before transformer is present");
1:0c52599:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @SuppressWarnings("unchecked")
1:2cfdf52:     private synchronized Collection<ClassTransformer> getTransformers(Bundle bundle) {
1:2cfdf52:         LinkedHashSet<ClassTransformer> transformers = registeredTransformers.get(bundle);
1:ec3ea65:         return (Collection<ClassTransformer>)(transformers != null ? new ArrayList<ClassTransformer>(transformers) : Collections.emptyList());
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     private static boolean transformClass(WovenClass wovenClass, ClassLoader cl, ClassTransformer transformer)
1:2cfdf52:         throws ThreadDeath, OutOfMemoryError {
1:2cfdf52:         try {
1:2cfdf52:             byte[] result = transformer
1:2cfdf52:                 .transform(cl, 
1:2cfdf52:                            wovenClass.getClassName(),
1:2cfdf52:                            wovenClass.getDefinedClass(), 
1:2cfdf52:                            wovenClass.getProtectionDomain(),
1:2cfdf52:                            wovenClass.getBytes());
1:2cfdf52:             if (result != null) {
1:2cfdf52:                 wovenClass.setBytes(result);
1:2cfdf52:                 wovenClass.getDynamicImports().add("org.eclipse.persistence.*");
1:2cfdf52:                 wovenClass.getDynamicImports().add("org.apache.openjpa.*");
1:2cfdf52:                 return true;
1:2cfdf52:             }
1:ec3ea65:         } catch (Exception t) {
1:ec3ea65:             Bundle b = wovenClass.getBundleWiring().getBundle();
1:ec3ea65:             String msg = String.format("Weaving failure on class %s in bundle %s/%s using transformer %s", wovenClass.getClassName(),
1:ec3ea65:                                        b.getSymbolicName(), b.getVersion(), transformer);
1:ec3ea65:             throw new WeavingException(msg, t);
1:2cfdf52:         }
1:2cfdf52:         return false;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public synchronized void addTransformer(Bundle pBundle, ClassTransformer transformer) {
1:2cfdf52:         LOGGER.info("Adding transformer " + transformer.getClass().getName());
1:2cfdf52:         LinkedHashSet<ClassTransformer> transformers = registeredTransformers.get(pBundle);
1:2cfdf52:         if (transformers == null) {
1:2cfdf52:             transformers = new LinkedHashSet<ClassTransformer>();
1:2cfdf52:             registeredTransformers.put(pBundle, transformers);
1:2cfdf52:         }
1:2cfdf52:         transformers.add(transformer);
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public synchronized void removeTransformer(Bundle pBundle, ClassTransformer transformer) {
1:2cfdf52:         LinkedHashSet<ClassTransformer> set = registeredTransformers.get(pBundle);
1:2cfdf52:         if (set == null || !set.remove(transformer)) {
1:2cfdf52:             throw new IllegalStateException("Transformer " + transformer + " not registered");
1:2cfdf52:         }
1:2cfdf52:         if (set.isEmpty()) {
1:2cfdf52:             registeredTransformers.remove(pBundle);
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             }
1:         if (transformersToTry.isEmpty() && dClass != null && dClass.getAnnotation(Entity.class) != null) {
/////////////////////////////////////////////////////////////////////////
1:         return (Collection<ClassTransformer>)(transformers != null ? new ArrayList<ClassTransformer>(transformers) : Collections.emptyList());
1:     private static boolean transformClass(WovenClass wovenClass, ClassLoader cl, ClassTransformer transformer)
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception t) {
1:             Bundle b = wovenClass.getBundleWiring().getBundle();
1:             String msg = String.format("Weaving failure on class %s in bundle %s/%s using transformer %s", wovenClass.getClassName(),
1:                                        b.getSymbolicName(), b.getVersion(), transformer);
1:             throw new WeavingException(msg, t);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:6514385
/////////////////////////////////////////////////////////////////////////
1:      * With luck we will only have one persistence unit per bundle, but if we don't we'll need to call them
1:      * until one of them does a transform or we run out.
1:      */
1:     private final Map<Bundle, LinkedHashSet<ClassTransformer>> registeredTransformers = new HashMap<Bundle, LinkedHashSet<ClassTransformer>>();
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
commit:0c52599
/////////////////////////////////////////////////////////////////////////
1: import javax.persistence.Entity;
/////////////////////////////////////////////////////////////////////////
1:         Class<?> dClass = wovenClass.getDefinedClass();
0:         if (transformersToTry.size() == 0 && dClass != null && dClass.getAnnotation(Entity.class) != null) {
1:             LOGGER.warn("Loading " + wovenClass.getClassName() + " before transformer is present");
1:         }
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:  * This weaving hook delegates to any registered {@link ClassTransformer} instances for a given bundle
1:     private static final Logger LOGGER = LoggerFactory.getLogger(JPAWeavingHook.class);
1:     /**
1:      * This constructor should not be called directly, the {@link JPAWeavingHookFactory} should be used to
1:      * ensure that Weaving support is available.
1:      */
1:     JPAWeavingHook() {
1:     }
1: 
1:     /**
0:      * With luck we will only have one persistence unit per bundle, but if we don't we'll need to call them
0:      * until one of them does a transform or we run out.
1:      */
0:     private final Map<Bundle, LinkedHashSet<ClassTransformer>> registeredTransformers = new HashMap<Bundle, LinkedHashSet<ClassTransformer>>();
1: 
1:     public void weave(WovenClass wovenClass) {
1:         BundleWiring wiring = wovenClass.getBundleWiring();
1:         Bundle bundle = wiring.getBundle();
1:         ClassLoader cl = wiring.getClassLoader();
1:         Collection<ClassTransformer> transformersToTry = getTransformers(bundle);
0:         if (transformersToTry.size() == 0 && wovenClass.getClassName().endsWith("Car")) {
0:             LOGGER.error("Loading " + wovenClass.getClassName() + " before transformer is present");
0:             //for (StackTraceElement el : Thread.currentThread().getStackTrace()) {
0: //                LOGGER.info(el.toString());
0: //            }
1:         for (ClassTransformer transformer : transformersToTry) {
1:             if (transformClass(wovenClass, cl, transformer)) {
1:                 LOGGER.info("Weaving " + wovenClass.getClassName() + " using " + transformer.getClass().getName());
1:                 break;
0:             };
1:         }
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     private synchronized Collection<ClassTransformer> getTransformers(Bundle bundle) {
1:         LinkedHashSet<ClassTransformer> transformers = registeredTransformers.get(bundle);
0:         return transformers != null ? new ArrayList<ClassTransformer>(transformers) : Collections.EMPTY_LIST;
1:     }
1: 
0:     private boolean transformClass(WovenClass wovenClass, ClassLoader cl, ClassTransformer transformer)
1:         throws ThreadDeath, OutOfMemoryError {
1:         try {
1:             byte[] result = transformer
1:                 .transform(cl, 
1:                            wovenClass.getClassName(),
1:                            wovenClass.getDefinedClass(), 
1:                            wovenClass.getProtectionDomain(),
1:                            wovenClass.getBytes());
1:             if (result != null) {
1:                 wovenClass.setBytes(result);
1:                 wovenClass.getDynamicImports().add("org.eclipse.persistence.*");
1:                 wovenClass.getDynamicImports().add("org.apache.openjpa.*");
1:                 
1:                 return true;
1:             }
0:         } catch (Throwable t) {
0:             if (t instanceof ThreadDeath)
0:                 throw (ThreadDeath)t;
0:             else if (t instanceof OutOfMemoryError)
0:                 throw (OutOfMemoryError)t;
0:             else {
0:                 Bundle b = wovenClass.getBundleWiring().getBundle();
0:                 String msg = String.format("Weaving failure", wovenClass.getClassName(),
0:                                            b.getSymbolicName(), b.getVersion(), transformer);
0:                 throw new WeavingException(msg, t);
1:             }
1:         }
1:         return false;
1:     }
1: 
1:     public synchronized void addTransformer(Bundle pBundle, ClassTransformer transformer) {
1:         LOGGER.info("Adding transformer " + transformer.getClass().getName());
1:         LinkedHashSet<ClassTransformer> transformers = registeredTransformers.get(pBundle);
1:         if (transformers == null) {
1:             transformers = new LinkedHashSet<ClassTransformer>();
1:             registeredTransformers.put(pBundle, transformers);
1:         }
1:         transformers.add(transformer);
1:     }
1: 
1:     public synchronized void removeTransformer(Bundle pBundle, ClassTransformer transformer) {
1:         LinkedHashSet<ClassTransformer> set = registeredTransformers.get(pBundle);
1:         if (set == null || !set.remove(transformer)) {
1:             throw new IllegalStateException("Transformer " + transformer + " not registered");
1:         }
1:         if (set.isEmpty()) {
1:             registeredTransformers.remove(pBundle);
1:         }
1:     }
1: 
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:d0e2822
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.jpa.container.impl.NLS;
/////////////////////////////////////////////////////////////////////////
0:           else {
0:             Bundle b = wovenClass.getBundleWiring().getBundle();
0:             throw new WeavingException(NLS.MESSAGES.getMessage("jpa.weaving.failure", wovenClass.getClassName(), b.getSymbolicName(), b.getVersion(), transformer), t);
0:           }
/////////////////////////////////////////////////////////////////////////
0:       throw new IllegalStateException(NLS.MESSAGES.getMessage("jpa.weaving.transformer.not.registered", transformer));
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8ea3042
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.weaving.impl;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.LinkedHashSet;
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.ConcurrentMap;
1: 
1: import javax.persistence.spi.ClassTransformer;
1: 
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.hooks.weaving.WeavingException;
1: import org.osgi.framework.hooks.weaving.WeavingHook;
1: import org.osgi.framework.hooks.weaving.WovenClass;
1: import org.osgi.framework.wiring.BundleWiring;
1: 
0: /**
0:  * This weaving hook delegates to any registered {@link ClassTransformer} instances
0:  * for a given bundle
1:  */
1: public class JPAWeavingHook implements WeavingHook, TransformerRegistry {
1: 
0:   /**
0:    * This constructor should not be called directly, the {@link JPAWeavingHookFactory} 
0:    * should be used to ensure that Weaving support is available.
1:    */
0:   JPAWeavingHook() { }
1:   
0:   /** 
0:    * With luck we will only have one persistence unit per bundle, but
0:    * if we don't we'll need to call them until one of them does a transform
0:    * or we run out.
1:    */
0:   private final ConcurrentMap<Bundle, LinkedHashSet<WrappingTransformer>> registeredTransformers
0:       = new ConcurrentHashMap<Bundle, LinkedHashSet<WrappingTransformer>>();
1:   
0:   public void weave(WovenClass wovenClass) {
1:     
0:     BundleWiring wiring = wovenClass.getBundleWiring();
1:     
0:     Collection<WrappingTransformer> transformers = registeredTransformers.get(
0:         wiring.getBundle());
1:     
0:     if(transformers != null) {
0:       Collection<WrappingTransformer> transformersToTry;
0:       synchronized (transformers) {
0:         transformersToTry = new ArrayList<WrappingTransformer>(transformers);
0:       }
0:       for(WrappingTransformer transformer : transformersToTry) {
0:         try {
0:           byte[] result = transformer.transform(wiring.getClassLoader(), 
0:               wovenClass.getClassName(), wovenClass.getDefinedClass(), 
0:               wovenClass.getProtectionDomain(), wovenClass.getBytes());
0:           if(result != null) {
0:             wovenClass.setBytes(result);
0:             wovenClass.getDynamicImports().addAll(transformer.getPackagesToAdd());
0:             break;
0:           }
0:         } catch (Throwable t) {
0:           if(t instanceof ThreadDeath)
0:             throw (ThreadDeath)t;
0:           else if (t instanceof OutOfMemoryError)
0:             throw (OutOfMemoryError) t;
0:           else throw new WeavingException("There was an error attempting to weave " +
0:               wovenClass.getClassName() + " using transformer " + transformer.toString()
0:               , t);
0:         }
0:       }
0:     }
0:   }
1:   
0:   public void addTransformer(Bundle pBundle, ClassTransformer transformer, ServiceReference<?> provider) {
1:     
0:     //Optimised for single adds
1:     
0:     LinkedHashSet<WrappingTransformer> set = new LinkedHashSet<WrappingTransformer>();
0:     WrappingTransformer wt = new WrappingTransformer(transformer, provider);
0:     set.add(wt);
1:     
0:     LinkedHashSet<WrappingTransformer> existingSet = registeredTransformers.putIfAbsent(pBundle, set);
1:     
0:     if(existingSet != null) {
0:       synchronized (existingSet) {
0:         existingSet.add(wt);
0:       }
0:     }
0:   }
1:    
0:   public void removeTransformer(Bundle pBundle, ClassTransformer transformer) {
0:     LinkedHashSet<WrappingTransformer> set = registeredTransformers.get(pBundle);
1:     
0:     if(set == null || !!!safeRemove(set, transformer))
0:       throw new IllegalStateException("The transformer " + transformer + " is not registered");
1:     
0:     if(set.isEmpty())
0:       registeredTransformers.remove(pBundle);
0:   }
1: 
0:   /**
0:    * Perform a remove on the collection while synchronized on it
0:    * @param set
0:    * @param t
0:    * @return
1:    */
0:   private boolean safeRemove(Collection<WrappingTransformer> set, ClassTransformer t) {
0:     synchronized(set) {
0:         return set.remove(new WrappingTransformer(t));
0:       }
0:   }
0: }
============================================================================