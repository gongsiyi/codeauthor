1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.beans;
1:628add4: 
1:628add4: import java.io.Serializable;
1:628add4: import java.math.BigDecimal;
1:628add4: import java.util.Date;
1:628add4: 
1:56a6860: import org.apache.aries.samples.ariestrader.util.Log;
1:56a6860: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.OrderDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
1:628add4: 
1:628add4: 
1:628add4: public class OrderDataBeanImpl implements OrderDataBean, Serializable {
1:628add4: 
1:628add4:           
1:628add4:     private Integer orderID;            /* orderID */
1:628add4:     
1:628add4:     
1:628add4:     private String orderType;           /* orderType (buy, sell, etc.) */
1:628add4:     
1:628add4:     
1:628add4:     private String orderStatus;         /* orderStatus (open, processing, completed, closed, cancelled) */
1:628add4:     
1:628add4:     
1:628add4:     private Date openDate;              /* openDate (when the order was entered) */
1:628add4:     
1:628add4:     
1:628add4:     private Date completionDate;		/* completionDate */
1:628add4:     
1:628add4:     
1:628add4:     private double quantity;			/* quantity */
1:628add4:     
1:628add4:     
1:628add4:     private BigDecimal price;				/* price */
1:628add4:     
1:628add4:     
1:628add4:     private BigDecimal orderFee;			/* price */
1:628add4:     
1:628add4:     
1:628add4:     private AccountDataBean account;
1:628add4:     
1:628add4:     
1:628add4:     private QuoteDataBean quote;
1:628add4:     
1:628add4:    
1:628add4:     private HoldingDataBean holding;
1:628add4: 
1:628add4:     private String symbol;
1:628add4: 
1:628add4:     public OrderDataBeanImpl() {        
1:628add4:     }
1:628add4: 
1:628add4:     public OrderDataBeanImpl(Integer orderID,
1:628add4:                             String orderType,
1:628add4:                             String orderStatus,
1:628add4:                             Date openDate,
1:628add4:                             Date completionDate,
1:628add4:                             double quantity,
1:628add4:                             BigDecimal price,
1:628add4:                             BigDecimal orderFee,
1:628add4:                             String symbol
1:628add4:                             ) {
1:628add4:         setOrderID(orderID);
1:628add4:         setOrderType(orderType);
1:628add4:         setOrderStatus(orderStatus);
1:628add4:         setOpenDate(openDate);
1:628add4:         setCompletionDate(completionDate);
1:628add4:         setQuantity(quantity);
1:628add4:         setPrice(price);
1:628add4:         setOrderFee(orderFee);
1:628add4:         setSymbol(symbol);
1:628add4:     }
1:628add4:     
1:628add4:     public OrderDataBeanImpl(String orderType,
1:628add4:             String orderStatus,
1:628add4:             Date openDate,
1:628add4:             Date completionDate,
1:628add4:             double quantity,
1:628add4:             BigDecimal price,
1:628add4:             BigDecimal orderFee,
1:628add4:             AccountDataBean account,
1:628add4:             QuoteDataBean quote, HoldingDataBean holding) {
1:628add4:         setOrderType(orderType);
1:628add4:         setOrderStatus(orderStatus);
1:628add4:         setOpenDate(openDate);
1:628add4:         setCompletionDate(completionDate);
1:628add4:         setQuantity(quantity);
1:628add4:         setPrice(price);
1:628add4:         setOrderFee(orderFee);
1:628add4:         setAccount(account);
1:628add4:         setQuote(quote);
1:628add4:         setHolding(holding);
1:628add4:     }
1:628add4: 
1:628add4:     public static OrderDataBean getRandomInstance() {
1:628add4:         return new OrderDataBeanImpl(
1:628add4:             new Integer(TradeConfig.rndInt(100000)),
1:628add4:             TradeConfig.rndBoolean() ? "buy" : "sell",
1:628add4:             "open",
1:628add4:             new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
1:628add4:             new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
1:628add4:             TradeConfig.rndQuantity(),
1:628add4:             TradeConfig.rndBigDecimal(1000.0f),
1:628add4:             TradeConfig.rndBigDecimal(1000.0f),
1:628add4:             TradeConfig.rndSymbol()
1:628add4:         );
1:628add4:     }
1:628add4: 
1:628add4:     public String toString()
1:628add4:     {
1:628add4:         return "Order " + getOrderID()
1:628add4:                 + "\n\t      orderType: " + getOrderType()
1:628add4:                 + "\n\t    orderStatus: " +	getOrderStatus()
1:628add4:                 + "\n\t       openDate: " +	getOpenDate()
1:628add4:                 + "\n\t completionDate: " +	getCompletionDate()
1:628add4:                 + "\n\t       quantity: " +	getQuantity()
1:628add4:                 + "\n\t          price: " +	getPrice()
1:628add4:                 + "\n\t       orderFee: " +	getOrderFee()
1:628add4:                 + "\n\t         symbol: " +	getSymbol()
1:628add4:                 ;
1:628add4:     }
1:628add4:     public String toHTML()
1:628add4:     {
1:628add4:         return "<BR>Order <B>" + getOrderID() + "</B>"
1:628add4:                 + "<LI>      orderType: " + getOrderType() + "</LI>"
1:628add4:                 + "<LI>    orderStatus: " +	getOrderStatus() + "</LI>"
1:628add4:                 + "<LI>       openDate: " +	getOpenDate() + "</LI>"
1:628add4:                 + "<LI> completionDate: " +	getCompletionDate() + "</LI>"
1:628add4:                 + "<LI>       quantity: " +	getQuantity() + "</LI>"
1:628add4:                 + "<LI>          price: " +	getPrice() + "</LI>"
1:628add4:                 + "<LI>       orderFee: " +	getOrderFee() + "</LI>"
1:628add4:                 + "<LI>         symbol: " +	getSymbol() + "</LI>"
1:628add4:                 ;
1:628add4:     }
1:628add4: 
1:628add4:     public void print()
1:628add4:     {
1:628add4:         Log.log( this.toString() );
1:628add4:     }
1:628add4: 
1:628add4:     public Integer getOrderID() {
1:628add4:         return orderID;
1:628add4:     }
1:628add4: 
1:628add4:     public void setOrderID(Integer orderID) {
1:628add4:         this.orderID = orderID;
1:628add4:     }
1:628add4: 
1:628add4:     public String getOrderType() {
1:628add4:         return orderType;
1:628add4:     }
1:628add4: 
1:628add4:     public void setOrderType(String orderType) {
1:628add4:         this.orderType = orderType;
1:628add4:     }
1:628add4: 
1:628add4:     public String getOrderStatus() {
1:628add4:         return orderStatus;
1:628add4:     }
1:628add4: 
1:628add4:     public void setOrderStatus(String orderStatus) {
1:628add4:         this.orderStatus = orderStatus;
1:628add4:     }
1:628add4: 
1:628add4:     public Date getOpenDate() {
1:628add4:         return openDate;
1:628add4:     }
1:628add4: 
1:628add4:     public void setOpenDate(Date openDate) {
1:628add4:         this.openDate = openDate;
1:628add4:     }
1:628add4: 
1:628add4:     public Date getCompletionDate() {
1:628add4:         return completionDate;
1:628add4:     }
1:628add4: 
1:628add4:     public void setCompletionDate(Date completionDate) {
1:628add4:         this.completionDate = completionDate;
1:628add4:     }
1:628add4: 
1:628add4:     public double getQuantity() {
1:628add4:         return quantity;
1:628add4:     }
1:628add4: 
1:628add4:     public void setQuantity(double quantity) {
1:628add4:         this.quantity = quantity;
1:628add4:     }
1:628add4: 
1:628add4: 
1:628add4:     public BigDecimal getPrice() {
1:628add4:         return price;
1:628add4:     }
1:628add4: 
1:628add4:     public void setPrice(BigDecimal price) {
1:628add4:         this.price = price;
1:628add4:     }
1:628add4: 
1:628add4:     public BigDecimal getOrderFee() {
1:628add4:         return orderFee;
1:628add4:     }
1:628add4: 
1:628add4:     public void setOrderFee(BigDecimal orderFee) {
1:628add4:         this.orderFee = orderFee;
1:628add4:     }
1:628add4: 
1:628add4:     public String getSymbol() {
1:628add4:         if (quote != null) {
1:628add4:             return quote.getSymbol();
1:628add4:         }
1:628add4:         return symbol;
1:628add4:     }
1:628add4: 
1:628add4:     public void setSymbol(String symbol) {
1:628add4:         this.symbol = symbol;
1:628add4:     }
1:628add4: 
1:628add4:     public AccountDataBean getAccount() {
1:628add4:         return account;
1:628add4:     }
1:628add4: 
1:628add4:     public void setAccount(AccountDataBean account) {
1:628add4:         this.account = account;
1:628add4:     }
1:628add4: 
1:628add4:     public QuoteDataBean getQuote() {
1:628add4:         return quote;
1:628add4:     }
1:628add4: 
1:628add4:     public void setQuote(QuoteDataBean quote) {
1:628add4:         this.quote = quote;
1:628add4:     }
1:628add4: 
1:628add4:     public HoldingDataBean getHolding() {
1:628add4:         return holding;
1:628add4:     }
1:628add4: 
1:628add4:     public void setHolding(HoldingDataBean holding) {
1:628add4:         this.holding = holding;
1:628add4:     }
1:628add4: 
1:628add4:     public boolean isBuy()
1:628add4:     {
1:628add4:     	String orderType = getOrderType();
1:628add4:     	if ( orderType.compareToIgnoreCase("buy") == 0 )
1:628add4:     		return true;
1:628add4:     	return false;
1:628add4:     }
1:628add4: 
1:628add4:     public boolean isSell()
1:628add4:     {
1:628add4:     	String orderType = getOrderType();
1:628add4:     	if ( orderType.compareToIgnoreCase("sell") == 0 )
1:628add4:     		return true;
1:628add4:     	return false;
1:628add4:     }
1:628add4: 
1:628add4:     public boolean isOpen()
1:628add4:     {
1:628add4:     	String orderStatus = getOrderStatus();
1:628add4:     	if ( (orderStatus.compareToIgnoreCase("open") == 0) ||
1:628add4: 	         (orderStatus.compareToIgnoreCase("processing") == 0) )
1:628add4: 	    		return true;
1:628add4:     	return false;
1:628add4:     }
1:628add4: 
1:628add4:     public boolean isCompleted()
1:628add4:     {
1:628add4:     	String orderStatus = getOrderStatus();
1:628add4:     	if ( (orderStatus.compareToIgnoreCase("completed") == 0) ||
1:628add4: 	         (orderStatus.compareToIgnoreCase("alertcompleted") == 0)    ||
1:628add4: 	         (orderStatus.compareToIgnoreCase("cancelled") == 0) )
1:628add4: 	    		return true;
1:628add4:     	return false;
1:628add4:     }
1:628add4: 
1:628add4:     public boolean isCancelled()
1:628add4:     {
1:628add4:     	String orderStatus = getOrderStatus();
1:628add4:     	if (orderStatus.compareToIgnoreCase("cancelled") == 0)
1:628add4: 	    		return true;
1:628add4:     	return false;
1:628add4:     }
1:628add4: 
1:628add4: 
1:628add4: 	public void cancel()
1:628add4: 	{
1:628add4: 		setOrderStatus("cancelled");
1:628add4: 	}
1:628add4: 
1:628add4:     @Override
1:628add4:     public int hashCode() {
1:628add4:         int hash = 0;
1:628add4:         hash += (this.orderID != null ? this.orderID.hashCode() : 0);
1:628add4:         return hash;
1:628add4:     }
1:628add4:     
1:628add4:     @Override
1:628add4:     public boolean equals(Object object) {
1:628add4:         // TODO: Warning - this method won't work in the case the id fields are not set
1:628add4:         if (!(object instanceof OrderDataBeanImpl)) {
1:628add4:             return false;
1:628add4:         }
1:628add4:         OrderDataBeanImpl other = (OrderDataBeanImpl)object;
1:628add4:         if (this.orderID != other.orderID && (this.orderID == null || !this.orderID.equals(other.orderID))) return false;
1:628add4:         return true;
1:628add4:     }
1:628add4: }
1:628add4: 
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:39f53f6
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.OrderDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.beans;
1: import org.apache.aries.samples.ariestrader.util.Log;
1: import org.apache.aries.samples.ariestrader.util.TradeConfig;
0: import org.apache.aries.samples.ariestrader.persistence.api.AccountDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.HoldingDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.OrderDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.QuoteDataBean;
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.beans;
0: import org.apache.aries.samples.daytrader.util.Log;
0: import org.apache.aries.samples.daytrader.util.TradeConfig;
0: import org.apache.aries.samples.daytrader.persistence.api.AccountDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.HoldingDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.OrderDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.QuoteDataBean;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.beans;
1: 
1: import java.io.Serializable;
1: import java.math.BigDecimal;
1: import java.util.Date;
1: 
0: import org.apache.geronimo.samples.daytrader.util.Log;
0: import org.apache.geronimo.samples.daytrader.util.TradeConfig;
0: import org.apache.geronimo.samples.daytrader.persistence.api.AccountDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.HoldingDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.OrderDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.QuoteDataBean;
1: 
1: 
1: public class OrderDataBeanImpl implements OrderDataBean, Serializable {
1: 
1:           
1:     private Integer orderID;            /* orderID */
1:     
1:     
1:     private String orderType;           /* orderType (buy, sell, etc.) */
1:     
1:     
1:     private String orderStatus;         /* orderStatus (open, processing, completed, closed, cancelled) */
1:     
1:     
1:     private Date openDate;              /* openDate (when the order was entered) */
1:     
1:     
1:     private Date completionDate;		/* completionDate */
1:     
1:     
1:     private double quantity;			/* quantity */
1:     
1:     
1:     private BigDecimal price;				/* price */
1:     
1:     
1:     private BigDecimal orderFee;			/* price */
1:     
1:     
1:     private AccountDataBean account;
1:     
1:     
1:     private QuoteDataBean quote;
1:     
1:    
1:     private HoldingDataBean holding;
1: 
1:     private String symbol;
1: 
1:     public OrderDataBeanImpl() {        
1:     }
1: 
1:     public OrderDataBeanImpl(Integer orderID,
1:                             String orderType,
1:                             String orderStatus,
1:                             Date openDate,
1:                             Date completionDate,
1:                             double quantity,
1:                             BigDecimal price,
1:                             BigDecimal orderFee,
1:                             String symbol
1:                             ) {
1:         setOrderID(orderID);
1:         setOrderType(orderType);
1:         setOrderStatus(orderStatus);
1:         setOpenDate(openDate);
1:         setCompletionDate(completionDate);
1:         setQuantity(quantity);
1:         setPrice(price);
1:         setOrderFee(orderFee);
1:         setSymbol(symbol);
1:     }
1:     
1:     public OrderDataBeanImpl(String orderType,
1:             String orderStatus,
1:             Date openDate,
1:             Date completionDate,
1:             double quantity,
1:             BigDecimal price,
1:             BigDecimal orderFee,
1:             AccountDataBean account,
1:             QuoteDataBean quote, HoldingDataBean holding) {
1:         setOrderType(orderType);
1:         setOrderStatus(orderStatus);
1:         setOpenDate(openDate);
1:         setCompletionDate(completionDate);
1:         setQuantity(quantity);
1:         setPrice(price);
1:         setOrderFee(orderFee);
1:         setAccount(account);
1:         setQuote(quote);
1:         setHolding(holding);
1:     }
1: 
1:     public static OrderDataBean getRandomInstance() {
1:         return new OrderDataBeanImpl(
1:             new Integer(TradeConfig.rndInt(100000)),
1:             TradeConfig.rndBoolean() ? "buy" : "sell",
1:             "open",
1:             new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
1:             new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
1:             TradeConfig.rndQuantity(),
1:             TradeConfig.rndBigDecimal(1000.0f),
1:             TradeConfig.rndBigDecimal(1000.0f),
1:             TradeConfig.rndSymbol()
1:         );
1:     }
1: 
1:     public String toString()
1:     {
1:         return "Order " + getOrderID()
1:                 + "\n\t      orderType: " + getOrderType()
1:                 + "\n\t    orderStatus: " +	getOrderStatus()
1:                 + "\n\t       openDate: " +	getOpenDate()
1:                 + "\n\t completionDate: " +	getCompletionDate()
1:                 + "\n\t       quantity: " +	getQuantity()
1:                 + "\n\t          price: " +	getPrice()
1:                 + "\n\t       orderFee: " +	getOrderFee()
1:                 + "\n\t         symbol: " +	getSymbol()
1:                 ;
1:     }
1:     public String toHTML()
1:     {
1:         return "<BR>Order <B>" + getOrderID() + "</B>"
1:                 + "<LI>      orderType: " + getOrderType() + "</LI>"
1:                 + "<LI>    orderStatus: " +	getOrderStatus() + "</LI>"
1:                 + "<LI>       openDate: " +	getOpenDate() + "</LI>"
1:                 + "<LI> completionDate: " +	getCompletionDate() + "</LI>"
1:                 + "<LI>       quantity: " +	getQuantity() + "</LI>"
1:                 + "<LI>          price: " +	getPrice() + "</LI>"
1:                 + "<LI>       orderFee: " +	getOrderFee() + "</LI>"
1:                 + "<LI>         symbol: " +	getSymbol() + "</LI>"
1:                 ;
1:     }
1: 
1:     public void print()
1:     {
1:         Log.log( this.toString() );
1:     }
1: 
1:     public Integer getOrderID() {
1:         return orderID;
1:     }
1: 
1:     public void setOrderID(Integer orderID) {
1:         this.orderID = orderID;
1:     }
1: 
1:     public String getOrderType() {
1:         return orderType;
1:     }
1: 
1:     public void setOrderType(String orderType) {
1:         this.orderType = orderType;
1:     }
1: 
1:     public String getOrderStatus() {
1:         return orderStatus;
1:     }
1: 
1:     public void setOrderStatus(String orderStatus) {
1:         this.orderStatus = orderStatus;
1:     }
1: 
1:     public Date getOpenDate() {
1:         return openDate;
1:     }
1: 
1:     public void setOpenDate(Date openDate) {
1:         this.openDate = openDate;
1:     }
1: 
1:     public Date getCompletionDate() {
1:         return completionDate;
1:     }
1: 
1:     public void setCompletionDate(Date completionDate) {
1:         this.completionDate = completionDate;
1:     }
1: 
1:     public double getQuantity() {
1:         return quantity;
1:     }
1: 
1:     public void setQuantity(double quantity) {
1:         this.quantity = quantity;
1:     }
1: 
1: 
1:     public BigDecimal getPrice() {
1:         return price;
1:     }
1: 
1:     public void setPrice(BigDecimal price) {
1:         this.price = price;
1:     }
1: 
1:     public BigDecimal getOrderFee() {
1:         return orderFee;
1:     }
1: 
1:     public void setOrderFee(BigDecimal orderFee) {
1:         this.orderFee = orderFee;
1:     }
1: 
1:     public String getSymbol() {
1:         if (quote != null) {
1:             return quote.getSymbol();
1:         }
1:         return symbol;
1:     }
1: 
1:     public void setSymbol(String symbol) {
1:         this.symbol = symbol;
1:     }
1: 
1:     public AccountDataBean getAccount() {
1:         return account;
1:     }
1: 
1:     public void setAccount(AccountDataBean account) {
1:         this.account = account;
1:     }
1: 
1:     public QuoteDataBean getQuote() {
1:         return quote;
1:     }
1: 
1:     public void setQuote(QuoteDataBean quote) {
1:         this.quote = quote;
1:     }
1: 
1:     public HoldingDataBean getHolding() {
1:         return holding;
1:     }
1: 
1:     public void setHolding(HoldingDataBean holding) {
1:         this.holding = holding;
1:     }
1: 
1:     public boolean isBuy()
1:     {
1:     	String orderType = getOrderType();
1:     	if ( orderType.compareToIgnoreCase("buy") == 0 )
1:     		return true;
1:     	return false;
1:     }
1: 
1:     public boolean isSell()
1:     {
1:     	String orderType = getOrderType();
1:     	if ( orderType.compareToIgnoreCase("sell") == 0 )
1:     		return true;
1:     	return false;
1:     }
1: 
1:     public boolean isOpen()
1:     {
1:     	String orderStatus = getOrderStatus();
1:     	if ( (orderStatus.compareToIgnoreCase("open") == 0) ||
1: 	         (orderStatus.compareToIgnoreCase("processing") == 0) )
1: 	    		return true;
1:     	return false;
1:     }
1: 
1:     public boolean isCompleted()
1:     {
1:     	String orderStatus = getOrderStatus();
1:     	if ( (orderStatus.compareToIgnoreCase("completed") == 0) ||
1: 	         (orderStatus.compareToIgnoreCase("alertcompleted") == 0)    ||
1: 	         (orderStatus.compareToIgnoreCase("cancelled") == 0) )
1: 	    		return true;
1:     	return false;
1:     }
1: 
1:     public boolean isCancelled()
1:     {
1:     	String orderStatus = getOrderStatus();
1:     	if (orderStatus.compareToIgnoreCase("cancelled") == 0)
1: 	    		return true;
1:     	return false;
1:     }
1: 
1: 
1: 	public void cancel()
1: 	{
1: 		setOrderStatus("cancelled");
1: 	}
1: 
1:     @Override
1:     public int hashCode() {
1:         int hash = 0;
1:         hash += (this.orderID != null ? this.orderID.hashCode() : 0);
1:         return hash;
1:     }
1:     
1:     @Override
1:     public boolean equals(Object object) {
1:         // TODO: Warning - this method won't work in the case the id fields are not set
1:         if (!(object instanceof OrderDataBeanImpl)) {
1:             return false;
1:         }
1:         OrderDataBeanImpl other = (OrderDataBeanImpl)object;
1:         if (this.orderID != other.orderID && (this.orderID == null || !this.orderID.equals(other.orderID))) return false;
1:         return true;
1:     }
1: }
1: 
============================================================================