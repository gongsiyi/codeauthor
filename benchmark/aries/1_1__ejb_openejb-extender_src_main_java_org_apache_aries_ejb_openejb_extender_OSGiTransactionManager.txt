1:541fd79: /**
1:541fd79:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:541fd79:  *  contributor license agreements.  See the NOTICE file distributed with
1:541fd79:  *  this work for additional information regarding copyright ownership.
1:541fd79:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:541fd79:  *  (the "License"); you may not use this file except in compliance with
1:541fd79:  *  the License.  You may obtain a copy of the License at
1:541fd79:  *
1:541fd79:  *     http://www.apache.org/licenses/LICENSE-2.0
1:541fd79:  *
1:541fd79:  *  Unless required by applicable law or agreed to in writing, software
1:541fd79:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:541fd79:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:541fd79:  *  See the License for the specific language governing permissions and
1:541fd79:  *  limitations under the License.
1:541fd79:  */
1:541fd79: package org.apache.aries.ejb.openejb.extender;
1:541fd79: 
1:541fd79: import java.util.concurrent.atomic.AtomicReference;
1:541fd79: 
1:541fd79: import javax.transaction.HeuristicMixedException;
1:541fd79: import javax.transaction.HeuristicRollbackException;
1:541fd79: import javax.transaction.InvalidTransactionException;
1:541fd79: import javax.transaction.NotSupportedException;
1:541fd79: import javax.transaction.RollbackException;
1:541fd79: import javax.transaction.Synchronization;
1:541fd79: import javax.transaction.SystemException;
1:541fd79: import javax.transaction.Transaction;
1:541fd79: import javax.transaction.TransactionManager;
1:541fd79: import javax.transaction.TransactionSynchronizationRegistry;
1:541fd79: 
1:541fd79: import org.apache.aries.util.tracker.SingleServiceTracker;
1:541fd79: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
1:541fd79: import org.osgi.framework.BundleContext;
1:541fd79: 
1:541fd79: public class OSGiTransactionManager implements TransactionManager,
1:541fd79:     TransactionSynchronizationRegistry, SingleServiceListener {
1:541fd79: 
1:541fd79:   private static class NoTransactionManagerException extends SystemException { 
1:541fd79:     public NoTransactionManagerException() {
1:541fd79:       super("No Transaction Manager is available");
1:541fd79:     }
1:541fd79:   }
1:541fd79:   
1:541fd79:   private static class NoTransactionSynchronizationRegistryException extends RuntimeException { 
1:541fd79:     public NoTransactionSynchronizationRegistryException() {
1:541fd79:       super("No Transaction Synchronization Registry is available");
1:541fd79:     }
1:541fd79:   }
1:541fd79:   
1:541fd79:   private final SingleServiceTracker<TransactionManager> tmTracker;
1:541fd79:   private final SingleServiceTracker<TransactionSynchronizationRegistry> tsrTracker;
1:541fd79:   
1:541fd79:   private final AtomicReference<TransactionManager> tm = 
1:541fd79:     new AtomicReference<TransactionManager>();
1:541fd79:   
1:541fd79:   private final AtomicReference<TransactionSynchronizationRegistry> tsr = 
1:541fd79:     new AtomicReference<TransactionSynchronizationRegistry>();
1:541fd79:   
1:541fd79:   private static final AtomicReference<OSGiTransactionManager> INSTANCE =
1:541fd79:     new AtomicReference<OSGiTransactionManager>();
1:541fd79:   
1:541fd79:   private OSGiTransactionManager(BundleContext ctx) {
1:541fd79:     tmTracker = new SingleServiceTracker<TransactionManager>(ctx, TransactionManager.class, this);
1:541fd79:     tsrTracker = new SingleServiceTracker<TransactionSynchronizationRegistry>(ctx, 
1:541fd79:         TransactionSynchronizationRegistry.class, this);
1:541fd79:     
1:541fd79:     tmTracker.open();
1:541fd79:     tsrTracker.open();
1:541fd79:   }
1:541fd79:   
1:541fd79:   private final TransactionManager getTM() throws SystemException {
1:541fd79:     TransactionManager tManager = tm.get();
1:541fd79:     
1:541fd79:     if(tManager == null) {
1:541fd79:       throw new NoTransactionManagerException();
1:541fd79:     }
1:541fd79:     return tManager;
1:541fd79:   }
1:541fd79:   
1:541fd79:   private final TransactionSynchronizationRegistry getTSR() {
1:541fd79:     TransactionSynchronizationRegistry tSReg = tsr.get();
1:541fd79:     
1:541fd79:     if(tSReg == null) {
1:541fd79:       throw new NoTransactionSynchronizationRegistryException();
1:541fd79:     }
1:541fd79:     return tSReg;
1:541fd79:   }
1:541fd79:   
1:541fd79:   public static OSGiTransactionManager get() {
1:541fd79:     return INSTANCE.get();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public static void init(BundleContext ctx) {
1:541fd79:     OSGiTransactionManager oTM = new OSGiTransactionManager(ctx);
1:541fd79:     if(!!!INSTANCE.compareAndSet(null, oTM))
1:541fd79:       oTM.destroy();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void destroy() {
1:4115fb2:     INSTANCE.set(null);
1:541fd79:     tmTracker.close();
1:541fd79:     tsrTracker.close();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void serviceFound() {
1:541fd79:     update();
1:541fd79:   }
1:541fd79: 
1:541fd79:   public void serviceLost() {
1:541fd79:     update();
1:541fd79:   }
1:541fd79: 
1:541fd79:   public void serviceReplaced() {
1:541fd79:     update();
1:541fd79:   }
1:541fd79:   
1:541fd79:   private void update() {
1:541fd79:     tm.set(tmTracker.getService());
1:541fd79:     tsr.set(tsrTracker.getService());
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void begin() throws NotSupportedException, SystemException {
1:541fd79:     getTM().begin();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void commit() throws HeuristicMixedException,
1:541fd79:       HeuristicRollbackException, IllegalStateException, RollbackException,
1:541fd79:       SecurityException, SystemException {
1:541fd79:     getTM().commit();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public int getStatus() throws SystemException {
1:541fd79:     return getTM().getStatus();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public Transaction getTransaction() throws SystemException {
1:541fd79:     return getTM().getTransaction();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void resume(Transaction arg0) throws IllegalStateException,
1:541fd79:       InvalidTransactionException, SystemException {
1:541fd79:     getTM().resume(arg0);
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void rollback() throws IllegalStateException, SecurityException,
1:541fd79:       SystemException {
1:541fd79:     getTM().rollback();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void setRollbackOnly() throws IllegalStateException {
1:541fd79:     getTSR().setRollbackOnly();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void setTransactionTimeout(int arg0) throws SystemException {
1:541fd79:     getTM().setTransactionTimeout(arg0);
1:541fd79:   }
1:541fd79:   
1:541fd79:   public Transaction suspend() throws SystemException {
1:541fd79:     return getTM().suspend();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public Object getResource(Object arg0) {
1:541fd79:     return getTSR().getResource(arg0);
1:541fd79:   }
1:541fd79:   
1:541fd79:   public boolean getRollbackOnly() {
1:541fd79:     return getTSR().getRollbackOnly();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public Object getTransactionKey() {
1:541fd79:     return getTSR().getTransactionKey();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public int getTransactionStatus() {
1:541fd79:     return getTSR().getTransactionStatus();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void putResource(Object arg0, Object arg1) {
1:541fd79:     getTSR().putResource(arg0, arg1);
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void registerInterposedSynchronization(Synchronization arg0) {
1:541fd79:     getTSR().registerInterposedSynchronization(arg0);
1:541fd79:   }
1:541fd79: }
1:541fd79: 
1:541fd79: 
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4115fb2
/////////////////////////////////////////////////////////////////////////
1:     INSTANCE.set(null);
commit:541fd79
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.openejb.extender;
1: 
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import javax.transaction.HeuristicMixedException;
1: import javax.transaction.HeuristicRollbackException;
1: import javax.transaction.InvalidTransactionException;
1: import javax.transaction.NotSupportedException;
1: import javax.transaction.RollbackException;
1: import javax.transaction.Synchronization;
1: import javax.transaction.SystemException;
1: import javax.transaction.Transaction;
1: import javax.transaction.TransactionManager;
1: import javax.transaction.TransactionSynchronizationRegistry;
1: 
1: import org.apache.aries.util.tracker.SingleServiceTracker;
1: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
1: import org.osgi.framework.BundleContext;
1: 
1: public class OSGiTransactionManager implements TransactionManager,
1:     TransactionSynchronizationRegistry, SingleServiceListener {
1: 
1:   private static class NoTransactionManagerException extends SystemException { 
1:     public NoTransactionManagerException() {
1:       super("No Transaction Manager is available");
1:     }
1:   }
1:   
1:   private static class NoTransactionSynchronizationRegistryException extends RuntimeException { 
1:     public NoTransactionSynchronizationRegistryException() {
1:       super("No Transaction Synchronization Registry is available");
1:     }
1:   }
1:   
1:   private final SingleServiceTracker<TransactionManager> tmTracker;
1:   private final SingleServiceTracker<TransactionSynchronizationRegistry> tsrTracker;
1:   
1:   private final AtomicReference<TransactionManager> tm = 
1:     new AtomicReference<TransactionManager>();
1:   
1:   private final AtomicReference<TransactionSynchronizationRegistry> tsr = 
1:     new AtomicReference<TransactionSynchronizationRegistry>();
1:   
1:   private static final AtomicReference<OSGiTransactionManager> INSTANCE =
1:     new AtomicReference<OSGiTransactionManager>();
1:   
1:   private OSGiTransactionManager(BundleContext ctx) {
1:     tmTracker = new SingleServiceTracker<TransactionManager>(ctx, TransactionManager.class, this);
1:     tsrTracker = new SingleServiceTracker<TransactionSynchronizationRegistry>(ctx, 
1:         TransactionSynchronizationRegistry.class, this);
1:     
1:     tmTracker.open();
1:     tsrTracker.open();
1:   }
1:   
1:   private final TransactionManager getTM() throws SystemException {
1:     TransactionManager tManager = tm.get();
1:     
1:     if(tManager == null) {
1:       throw new NoTransactionManagerException();
1:     }
1:     return tManager;
1:   }
1:   
1:   private final TransactionSynchronizationRegistry getTSR() {
1:     TransactionSynchronizationRegistry tSReg = tsr.get();
1:     
1:     if(tSReg == null) {
1:       throw new NoTransactionSynchronizationRegistryException();
1:     }
1:     return tSReg;
1:   }
1:   
1:   public static OSGiTransactionManager get() {
1:     return INSTANCE.get();
1:   }
1:   
1:   public static void init(BundleContext ctx) {
1:     OSGiTransactionManager oTM = new OSGiTransactionManager(ctx);
1:     if(!!!INSTANCE.compareAndSet(null, oTM))
1:       oTM.destroy();
1:   }
1:   
1:   public void destroy() {
1:     tmTracker.close();
1:     tsrTracker.close();
1:   }
1:   
1:   public void serviceFound() {
1:     update();
1:   }
1: 
1:   public void serviceLost() {
1:     update();
1:   }
1: 
1:   public void serviceReplaced() {
1:     update();
1:   }
1:   
1:   private void update() {
1:     tm.set(tmTracker.getService());
1:     tsr.set(tsrTracker.getService());
1:   }
1:   
1:   public void begin() throws NotSupportedException, SystemException {
1:     getTM().begin();
1:   }
1:   
1:   public void commit() throws HeuristicMixedException,
1:       HeuristicRollbackException, IllegalStateException, RollbackException,
1:       SecurityException, SystemException {
1:     getTM().commit();
1:   }
1:   
1:   public int getStatus() throws SystemException {
1:     return getTM().getStatus();
1:   }
1:   
1:   public Transaction getTransaction() throws SystemException {
1:     return getTM().getTransaction();
1:   }
1:   
1:   public void resume(Transaction arg0) throws IllegalStateException,
1:       InvalidTransactionException, SystemException {
1:     getTM().resume(arg0);
1:   }
1:   
1:   public void rollback() throws IllegalStateException, SecurityException,
1:       SystemException {
1:     getTM().rollback();
1:   }
1:   
1:   public void setRollbackOnly() throws IllegalStateException {
1:     getTSR().setRollbackOnly();
1:   }
1:   
1:   public void setTransactionTimeout(int arg0) throws SystemException {
1:     getTM().setTransactionTimeout(arg0);
1:   }
1:   
1:   public Transaction suspend() throws SystemException {
1:     return getTM().suspend();
1:   }
1:   
1:   public Object getResource(Object arg0) {
1:     return getTSR().getResource(arg0);
1:   }
1:   
1:   public boolean getRollbackOnly() {
1:     return getTSR().getRollbackOnly();
1:   }
1:   
1:   public Object getTransactionKey() {
1:     return getTSR().getTransactionKey();
1:   }
1:   
1:   public int getTransactionStatus() {
1:     return getTSR().getTransactionStatus();
1:   }
1:   
1:   public void putResource(Object arg0, Object arg1) {
1:     getTSR().putResource(arg0, arg1);
1:   }
1:   
1:   public void registerInterposedSynchronization(Synchronization arg0) {
1:     getTSR().registerInterposedSynchronization(arg0);
1:   }
1: }
1: 
1: 
============================================================================