1:0aad0ca: /*
1:0aad0ca:  * Licensed to the Apache Software Foundation (ASF) under one
1:0aad0ca:  * or more contributor license agreements.  See the NOTICE file
1:0aad0ca:  * distributed with this work for additional information
1:0aad0ca:  * regarding copyright ownership.  The ASF licenses this file
1:0aad0ca:  * to you under the Apache License, Version 2.0 (the
1:0aad0ca:  * "License"); you may not use this file except in compliance
1:0aad0ca:  * with the License.  You may obtain a copy of the License at
1:0aad0ca:  *
1:0aad0ca:  *  http://www.apache.org/licenses/LICENSE-2.0
1:0aad0ca:  *
1:0aad0ca:  * Unless required by applicable law or agreed to in writing,
1:0aad0ca:  * software distributed under the License is distributed on an
1:0aad0ca:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0aad0ca:  * KIND, either express or implied.  See the License for the
1:0aad0ca:  * specific language governing permissions and limitations
1:0aad0ca:  * under the License.
1:5b1f7be:  */
6:0aad0ca: 
1:0aad0ca: package org.apache.aries.application.resolver.obr.impl;
1:0aad0ca: 
1:792f3de: import java.util.Map;
1:792f3de: import java.util.Set;
1:792f3de: import java.util.jar.Attributes;
1:792f3de: 
1:0aad0ca: import org.apache.aries.application.Content;
1:0aad0ca: import org.apache.aries.application.management.BundleInfo;
1:0aad0ca: import org.osgi.framework.Version;
1:0aad0ca: 
1:0aad0ca: public class OBRBundleInfo implements BundleInfo
3:0aad0ca: {
1:0aad0ca: 
1:0aad0ca:   private final String symbolicName;
1:0aad0ca:   private final Version version;
1:0aad0ca:   private final String location;
1:0aad0ca:   private final Set<Content> importPackage;
1:0aad0ca:   private final Set<Content> exportPackage;
1:482c954:   private final Set<Content> importService;
1:482c954:   private final Set<Content> exportService;
1:0aad0ca:   private final Map<String, String> headers;
1:958fb7e:   private final Set<Content> requireBundle;
1:958fb7e:   private final Map<String, String> attributes;
1:958fb7e:   private final Map<String, String> directives;
1:0aad0ca: 
1:482c954:   public OBRBundleInfo(String symbolicName, Version version, String location,
1:482c954:                        Set<Content> importPackage, Set<Content> exportPackage,
1:482c954:                        Set<Content> importService, Set<Content> exportService,
1:958fb7e:                        Set<Content> requireBundle, Map<String, String> attributes,
1:958fb7e:                        Map<String, String> directives, Map<String, String> headers)
1:0aad0ca:   {
1:0aad0ca:     this.symbolicName = symbolicName;
1:0aad0ca:     this.version = version;
1:0aad0ca:     this.location = location;
1:0aad0ca:     this.importPackage = importPackage;
1:0aad0ca:     this.exportPackage = exportPackage;
1:482c954:     this.importService = importService;
1:482c954:     this.exportService = exportService;
1:0aad0ca:     this.headers = headers;
1:958fb7e:     this.requireBundle = requireBundle;
1:958fb7e:     this.attributes = attributes;
1:958fb7e:     this.directives = directives;
6:0aad0ca:   }
1:5b1f7be: 
1:0aad0ca:   public String getSymbolicName()
1:5b1f7be:   {
1:0aad0ca:     return symbolicName;
1:5b1f7be:   }
1:5b1f7be: 
1:0aad0ca:   public Version getVersion()
1:5b1f7be:   {
1:0aad0ca:     return version;
1:5b1f7be:   }
1:5b1f7be: 
1:0aad0ca:   public String getLocation()
1:0aad0ca:   {
1:0aad0ca:     return location;
1:5b1f7be:   }
1:0aad0ca: 
1:0aad0ca:   public Set<Content> getImportPackage()
1:0aad0ca:   {
1:0aad0ca:     return importPackage;
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca:   public Set<Content> getExportPackage()
1:0aad0ca:   {
1:0aad0ca:     return exportPackage;
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca:   public Set<Content> getImportService()
1:0aad0ca:   {
1:482c954:     return importService;
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca:   public Set<Content> getExportService()
1:0aad0ca:   {
1:482c954:     return exportService;
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca:   public Map<String, String> getHeaders()
1:0aad0ca:   {
1:0aad0ca:     return headers;
1:958fb7e:   }
1:958fb7e: 
1:958fb7e:   public Map<String, String> getBundleAttributes()
1:958fb7e:   {
1:958fb7e:     return attributes;
1:958fb7e:   }
1:958fb7e: 
1:958fb7e:   public Map<String, String> getBundleDirectives()
1:958fb7e:   {
1:958fb7e:     return directives;
1:958fb7e:   }
1:958fb7e: 
1:958fb7e:   public Set<Content> getRequireBundle()
1:958fb7e:   {
1:958fb7e:     return requireBundle;
1:5b1f7be:   }
1:5b1f7be:     
1:5b1f7be:   public String toString()
1:5b1f7be:   {
1:5b1f7be:     return symbolicName + "_" + version;
1:5b1f7be:   }
1:8702237: 
1:8702237:   public int hashCode() 
1:8702237:   {
1:8702237:     final int prime = 31;
1:8702237:     int result = 1;
1:8702237:     result = prime * result + symbolicName.hashCode();
1:8702237:     result = prime * result + version.hashCode();
1:8702237:     return result;
1:8702237:   }
1:8702237: 
1:8702237:   public boolean equals(Object obj) {
1:8702237:     if (this == obj) return true;
1:8702237:     if (obj == null) return false;
1:8702237:     if (getClass() != obj.getClass()) {
1:8702237:         return false;
1:8702237:     }
1:8702237:     OBRBundleInfo other = (OBRBundleInfo) obj;
1:8702237:     return (symbolicName.equals(other.symbolicName)
1:8702237:             && version.equals(other.version));
1:8702237:   }
1:8702237:   
1:792f3de:   public Attributes getRawAttributes()
1:792f3de:   {
1:792f3de: 
1:792f3de:     Attributes _attributes = new Attributes();
1:792f3de:     _attributes.putAll(attributes);
1:792f3de:     _attributes.putAll(directives);
1:792f3de:     return _attributes;
1:792f3de:   }
1:8702237: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:792f3de
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.jar.Attributes;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public Attributes getRawAttributes()
1:   {
1: 
1:     Attributes _attributes = new Attributes();
1:     _attributes.putAll(attributes);
1:     _attributes.putAll(directives);
1:     return _attributes;
1:   }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8702237
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:   public int hashCode() 
1:   {
1:     final int prime = 31;
1:     int result = 1;
1:     result = prime * result + symbolicName.hashCode();
1:     result = prime * result + version.hashCode();
1:     return result;
1:   }
1: 
1:   public boolean equals(Object obj) {
1:     if (this == obj) return true;
1:     if (obj == null) return false;
1:     if (getClass() != obj.getClass()) {
1:         return false;
1:     }
1:     OBRBundleInfo other = (OBRBundleInfo) obj;
1:     return (symbolicName.equals(other.symbolicName)
1:             && version.equals(other.version));
1:   }
1:   
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:5b1f7be
/////////////////////////////////////////////////////////////////////////
1:   
0:   /**
0:    * Equality is just based on the location. If you install a bundle from the same location string
0:    * you get the same Bundle, even if the underlying bundle had a different symbolic name/version.
0:    * This seems reasonable and quick.
1:    */
0:   public boolean equals(Object other)
1:   {
0:     if (other == null) return false;
0:     if (other == this) return true;
0:     if (other instanceof OBRBundleInfo) {
0:       return location.equals(((OBRBundleInfo)other).location);
1:     }
1:     
0:     return false;
1:   }
1:   
0:   public int hashCode()
1:   {
0:     return location.hashCode();
1:   }
1:   
1:   public String toString()
1:   {
1:     return symbolicName + "_" + version;
1:   }
1: }
commit:958fb7e
/////////////////////////////////////////////////////////////////////////
1:   private final Set<Content> requireBundle;
1:   private final Map<String, String> attributes;
1:   private final Map<String, String> directives;
1:                        Set<Content> requireBundle, Map<String, String> attributes,
1:                        Map<String, String> directives, Map<String, String> headers)
/////////////////////////////////////////////////////////////////////////
1:     this.requireBundle = requireBundle;
1:     this.attributes = attributes;
1:     this.directives = directives;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public Map<String, String> getBundleAttributes()
1:   {
1:     return attributes;
1:   }
1: 
1:   public Map<String, String> getBundleDirectives()
1:   {
1:     return directives;
1:   }
1: 
1:   public Set<Content> getRequireBundle()
1:   {
1:     return requireBundle;
1:   }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:482c954
/////////////////////////////////////////////////////////////////////////
1:   private final Set<Content> importService;
1:   private final Set<Content> exportService;
1:   public OBRBundleInfo(String symbolicName, Version version, String location,
1:                        Set<Content> importPackage, Set<Content> exportPackage,
1:                        Set<Content> importService, Set<Content> exportService,
0:                        Map<String, String> headers)
1:     this.importService = importService;
1:     this.exportService = exportService;
/////////////////////////////////////////////////////////////////////////
1:     return importService;
1:     return exportService;
author:David Jencks
-------------------------------------------------------------------------------
commit:0aad0ca
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: 
1: 
1: package org.apache.aries.application.resolver.obr.impl;
1: 
1: import org.apache.aries.application.Content;
1: import org.apache.aries.application.management.BundleInfo;
1: import org.osgi.framework.Version;
1: 
0: import java.util.Map;
0: import java.util.Set;
1: 
0: /**
0:  * @version $Rev$ $Date$
0:  */
1: public class OBRBundleInfo implements BundleInfo
1: {
1: 
1:   private final String symbolicName;
1:   private final Version version;
1:   private final String location;
1:   private final Set<Content> importPackage;
1:   private final Set<Content> exportPackage;
1:   private final Map<String, String> headers;
1: 
0:   public OBRBundleInfo(String symbolicName, Version version, String location, Set<Content> importPackage, Set<Content> exportPackage, Map<String, String> headers)
1:   {
1:     this.symbolicName = symbolicName;
1:     this.version = version;
1:     this.location = location;
1:     this.importPackage = importPackage;
1:     this.exportPackage = exportPackage;
1:     this.headers = headers;
1:   }
1: 
1:   public String getSymbolicName()
1:   {
1:     return symbolicName;
1:   }
1: 
1:   public Version getVersion()
1:   {
1:     return version;
1:   }
1: 
1:   public String getLocation()
1:   {
1:     return location;
1:   }
1: 
1:   public Set<Content> getImportPackage()
1:   {
1:     return importPackage;
1:   }
1: 
1:   public Set<Content> getExportPackage()
1:   {
1:     return exportPackage;
1:   }
1: 
1:   public Set<Content> getImportService()
1:   {
0:     //TODO NYI
0:     return null;
1:   }
1: 
1:   public Set<Content> getExportService()
1:   {
0:     //TODO NYI
0:     return null;
1:   }
1: 
1:   public Map<String, String> getHeaders()
1:   {
1:     return headers;
1:   }
1: }
============================================================================