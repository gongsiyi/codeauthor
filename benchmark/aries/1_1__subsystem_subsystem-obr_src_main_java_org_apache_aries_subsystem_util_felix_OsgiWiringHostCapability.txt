1:eb467d6: /*
1:eb467d6:  * Licensed under the Apache License, Version 2.0 (the "License");
1:eb467d6:  * you may not use this file except in compliance with the License.
1:eb467d6:  * You may obtain a copy of the License at
1:eb467d6:  *
1:eb467d6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:eb467d6:  *
1:eb467d6:  * Unless required by applicable law or agreed to in writing, software
1:eb467d6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eb467d6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eb467d6:  * See the License for the specific language governing permissions and
1:eb467d6:  * limitations under the License.
1:eb467d6:  */
1:eb467d6: package org.apache.aries.subsystem.util.felix;
1:eb467d6: 
1:eb467d6: import java.util.Collections;
1:eb467d6: import java.util.HashMap;
1:eb467d6: import java.util.Map;
1:eb467d6: 
1:eb467d6: import org.apache.aries.subsystem.obr.internal.AbstractCapability;
1:eb467d6: import org.osgi.framework.Version;
1:eb467d6: import org.osgi.framework.namespace.HostNamespace;
1:eb467d6: import org.osgi.resource.Resource;
1:eb467d6: 
1:eb467d6: public class OsgiWiringHostCapability extends AbstractCapability {
1:eb467d6: 	private final Map<String, Object> attributes = new HashMap<String, Object>();
1:eb467d6: 	private final Resource resource;
1:eb467d6: 	
1:eb467d6: 	public OsgiWiringHostCapability(Resource resource, String symbolicName, Version version) {
1:eb467d6: 		attributes.put(HostNamespace.HOST_NAMESPACE, symbolicName);
1:eb467d6: 		attributes.put(HostNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE, version);
1:eb467d6: 		this.resource = resource;
1:eb467d6: 	}
1:eb467d6: 
1:eb467d6: 	public Map<String, Object> getAttributes() {
1:eb467d6: 		return Collections.unmodifiableMap(attributes);
1:eb467d6: 	}
1:eb467d6: 
1:eb467d6: 	public Map<String, String> getDirectives() {
1:eb467d6: 		return Collections.emptyMap();
1:eb467d6: 	}
1:eb467d6: 
1:eb467d6: 	public String getNamespace() {
1:eb467d6: 		return HostNamespace.HOST_NAMESPACE;
1:eb467d6: 	}
1:eb467d6: 
1:eb467d6: 	public Resource getResource() {
1:eb467d6: 		return resource;
1:eb467d6: 	}
1:eb467d6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:eb467d6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.util.felix;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.obr.internal.AbstractCapability;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.namespace.HostNamespace;
1: import org.osgi.resource.Resource;
1: 
1: public class OsgiWiringHostCapability extends AbstractCapability {
1: 	private final Map<String, Object> attributes = new HashMap<String, Object>();
1: 	private final Resource resource;
1: 	
1: 	public OsgiWiringHostCapability(Resource resource, String symbolicName, Version version) {
1: 		attributes.put(HostNamespace.HOST_NAMESPACE, symbolicName);
1: 		attributes.put(HostNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE, version);
1: 		this.resource = resource;
1: 	}
1: 
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.unmodifiableMap(attributes);
1: 	}
1: 
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.emptyMap();
1: 	}
1: 
1: 	public String getNamespace() {
1: 		return HostNamespace.HOST_NAMESPACE;
1: 	}
1: 
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================