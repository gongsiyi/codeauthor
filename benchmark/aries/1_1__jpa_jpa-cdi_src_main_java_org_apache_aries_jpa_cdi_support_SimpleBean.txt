1:5a4dcb4: /*
1:5a4dcb4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a4dcb4:  * contributor license agreements.  See the NOTICE file distributed with
1:5a4dcb4:  * this work for additional information regarding copyright ownership.
1:5a4dcb4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a4dcb4:  * (the "License"); you may not use this file except in compliance with
1:5a4dcb4:  * the License.  You may obtain a copy of the License at
1:5a4dcb4:  *
1:5a4dcb4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5a4dcb4:  *
1:5a4dcb4:  * Unless required by applicable law or agreed to in writing, software
1:5a4dcb4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a4dcb4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a4dcb4:  * See the License for the specific language governing permissions and
1:5a4dcb4:  * limitations under the License.
1:5a4dcb4:  */
1:5a4dcb4: package org.apache.aries.jpa.cdi.support;
1:5a4dcb4: 
1:5a4dcb4: import javax.enterprise.context.spi.CreationalContext;
1:5a4dcb4: import javax.enterprise.inject.spi.Bean;
1:5a4dcb4: import javax.enterprise.inject.spi.InjectionPoint;
1:5a4dcb4: import java.lang.annotation.Annotation;
1:5a4dcb4: import java.lang.reflect.Type;
1:5a4dcb4: import java.util.Collections;
1:5a4dcb4: import java.util.Set;
1:5a4dcb4: import java.util.function.Supplier;
1:5a4dcb4: 
1:5a4dcb4: public class SimpleBean<T> implements Bean<T> {
1:5a4dcb4: 
1:5a4dcb4:     private final Class clazz;
1:5a4dcb4:     private final Class<? extends Annotation> scope;
1:5a4dcb4:     private final Supplier<T> supplier;
1:5a4dcb4:     private final Set<Type> types;
1:5a4dcb4:     private final Set<Annotation> qualifiers;
1:5a4dcb4: 
1:5a4dcb4:     public SimpleBean(Class clazz, Class<? extends Annotation> scope, InjectionPoint ip, Supplier<T> supplier) {
1:5a4dcb4:         this(clazz, scope, Collections.singleton(ip.getType()), ip.getQualifiers(), supplier);
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     public SimpleBean(Class clazz, Class<? extends Annotation> scope, Set<Type> types, Set<Annotation> qualifiers, Supplier<T> supplier) {
1:5a4dcb4:         this.clazz = clazz;
1:5a4dcb4:         this.scope = scope;
1:5a4dcb4:         this.types = Collections.unmodifiableSet(types);
1:5a4dcb4:         this.qualifiers = Collections.unmodifiableSet(qualifiers);
1:5a4dcb4:         this.supplier = supplier;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Class<?> getBeanClass() {
1:5a4dcb4:         return clazz;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Set<InjectionPoint> getInjectionPoints() {
1:5a4dcb4:         return Collections.emptySet();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public boolean isNullable() {
1:5a4dcb4:         return false;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Set<Type> getTypes() {
1:5a4dcb4:         return types;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Set<Annotation> getQualifiers() {
1:5a4dcb4:         return qualifiers;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Class<? extends Annotation> getScope() {
1:5a4dcb4:         return scope;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public String getName() {
1:5a4dcb4:         return null;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Set<Class<? extends Annotation>> getStereotypes() {
1:5a4dcb4:         return Collections.emptySet();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public boolean isAlternative() {
1:5a4dcb4:         return false;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public T create(CreationalContext<T> creationalContext) {
1:5a4dcb4:         return supplier.get();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public void destroy(T instance, CreationalContext<T> creationalContext) {
1:5a4dcb4:     }
1:5a4dcb4: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5a4dcb4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.jpa.cdi.support;
1: 
1: import javax.enterprise.context.spi.CreationalContext;
1: import javax.enterprise.inject.spi.Bean;
1: import javax.enterprise.inject.spi.InjectionPoint;
1: import java.lang.annotation.Annotation;
1: import java.lang.reflect.Type;
1: import java.util.Collections;
1: import java.util.Set;
1: import java.util.function.Supplier;
1: 
1: public class SimpleBean<T> implements Bean<T> {
1: 
1:     private final Class clazz;
1:     private final Class<? extends Annotation> scope;
1:     private final Supplier<T> supplier;
1:     private final Set<Type> types;
1:     private final Set<Annotation> qualifiers;
1: 
1:     public SimpleBean(Class clazz, Class<? extends Annotation> scope, InjectionPoint ip, Supplier<T> supplier) {
1:         this(clazz, scope, Collections.singleton(ip.getType()), ip.getQualifiers(), supplier);
1:     }
1: 
1:     public SimpleBean(Class clazz, Class<? extends Annotation> scope, Set<Type> types, Set<Annotation> qualifiers, Supplier<T> supplier) {
1:         this.clazz = clazz;
1:         this.scope = scope;
1:         this.types = Collections.unmodifiableSet(types);
1:         this.qualifiers = Collections.unmodifiableSet(qualifiers);
1:         this.supplier = supplier;
1:     }
1: 
1:     @Override
1:     public Class<?> getBeanClass() {
1:         return clazz;
1:     }
1: 
1:     @Override
1:     public Set<InjectionPoint> getInjectionPoints() {
1:         return Collections.emptySet();
1:     }
1: 
1:     @Override
1:     public boolean isNullable() {
1:         return false;
1:     }
1: 
1:     @Override
1:     public Set<Type> getTypes() {
1:         return types;
1:     }
1: 
1:     @Override
1:     public Set<Annotation> getQualifiers() {
1:         return qualifiers;
1:     }
1: 
1:     @Override
1:     public Class<? extends Annotation> getScope() {
1:         return scope;
1:     }
1: 
1:     @Override
1:     public String getName() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public Set<Class<? extends Annotation>> getStereotypes() {
1:         return Collections.emptySet();
1:     }
1: 
1:     @Override
1:     public boolean isAlternative() {
1:         return false;
1:     }
1: 
1:     @Override
1:     public T create(CreationalContext<T> creationalContext) {
1:         return supplier.get();
1:     }
1: 
1:     @Override
1:     public void destroy(T instance, CreationalContext<T> creationalContext) {
1:     }
1: }
============================================================================