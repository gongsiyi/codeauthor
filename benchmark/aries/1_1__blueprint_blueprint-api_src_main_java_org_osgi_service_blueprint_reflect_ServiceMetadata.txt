1:f13c6ac: /*
1:f13c6ac:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:f13c6ac:  *
1:f13c6ac:  * Licensed under the Apache License, Version 2.0 (the "License");
1:f13c6ac:  * you may not use this file except in compliance with the License.
1:f13c6ac:  * You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  * See the License for the specific language governing permissions and
1:f13c6ac:  * limitations under the License.
1:f13c6ac:  */
1:f13c6ac: package org.osgi.service.blueprint.reflect;
1:f13c6ac: 
1:f13c6ac: import java.util.Collection;
1:f13c6ac: import java.util.List;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Metadata for a service to be registered by the Blueprint Container when
1:f13c6ac:  * enabled.
1:f13c6ac:  * 
1:f13c6ac:  * <p>
1:f13c6ac:  * This is specified by the <code>service</code> element.
1:f13c6ac:  * 
1:f13c6ac:  * @ThreadSafe
1:f13c6ac:  * @version $Revision$
1:f13c6ac:  */
1:f13c6ac: public interface ServiceMetadata extends ComponentMetadata {
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Do not auto-detect types for advertised service interfaces
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @see #getAutoExport()
1:f13c6ac: 	 */
1:f13c6ac: 	static final int		AUTO_EXPORT_DISABLED		= 1;
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Advertise all Java interfaces implemented by the component instance type
1:f13c6ac: 	 * as service interfaces.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @see #getAutoExport()
1:f13c6ac: 	 */
1:f13c6ac: 	static final int		AUTO_EXPORT_INTERFACES		= 2;
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Advertise all Java classes in the hierarchy of the component instance
1:f13c6ac: 	 * type as service interfaces.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @see #getAutoExport()
1:f13c6ac: 	 */
1:f13c6ac: 	static final int		AUTO_EXPORT_CLASS_HIERARCHY	= 3;
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Advertise all Java classes and interfaces in the component instance type
1:f13c6ac: 	 * as service interfaces.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @see #getAutoExport()
1:f13c6ac: 	 */
1:f13c6ac: 	static final int	AUTO_EXPORT_ALL_CLASSES		= 4;
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the Metadata for the component to be exported as a service.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified inline or via the <code>ref</code> attribute of the
1:f13c6ac: 	 * service.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The Metadata for the component to be exported as a service.
1:f13c6ac: 	 */
1:f13c6ac: 	Target getServiceComponent();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the type names of the interfaces that the service should be
1:f13c6ac: 	 * advertised as supporting.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified in the <code>interface</code> attribute or child
1:f13c6ac: 	 * <code>interfaces</code> element of the service.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return An immutable List of <code>String</code> for the type names of
1:f13c6ac: 	 *         the interfaces that the service should be advertised as
1:f13c6ac: 	 *         supporting. The List is empty if using <code>auto-export</code>
1:f13c6ac: 	 *         or no interface names are specified for the service.
1:f13c6ac: 	 */
1:f13c6ac: 	List<String> getInterfaces();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the auto-export mode for the service.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the <code>auto-export</code> attribute of the
1:f13c6ac: 	 * service.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The auto-export mode for the service.
1:f13c6ac: 	 * @see #AUTO_EXPORT_DISABLED
1:f13c6ac: 	 * @see #AUTO_EXPORT_INTERFACES
1:f13c6ac: 	 * @see #AUTO_EXPORT_CLASS_HIERARCHY
1:f13c6ac: 	 * @see #AUTO_EXPORT_ALL_CLASSES
1:f13c6ac: 	 */
1:f13c6ac: 	int getAutoExport();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the user declared properties to be advertised with the service.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the <code>service-properties</code> element of the
1:f13c6ac: 	 * service.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return An immutable List of {@link MapEntry} objects for the user
1:f13c6ac: 	 *         declared properties to be advertised with the service. The List
1:f13c6ac: 	 *         is empty if no service properties are specified for the service.
1:f13c6ac: 	 */
1:f13c6ac: 	List<MapEntry> getServiceProperties();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the ranking value to use when advertising the service. If the
1:f13c6ac: 	 * ranking value is zero, the service must be registered without a
1:f13c6ac: 	 * <code>service.ranking</code> service property.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the <code>ranking</code> attribute of the service.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The ranking value to use when advertising the service.
1:f13c6ac: 	 */
1:f13c6ac: 	int getRanking();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the registration listeners to be notified when the service is
1:f13c6ac: 	 * registered and unregistered with the framework.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the <code>registration-listener</code> elements of
1:f13c6ac: 	 * the service.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return An immutable Collection of {@link RegistrationListener} objects
1:f13c6ac: 	 *         to be notified when the service is registered and unregistered
1:f13c6ac: 	 *         with the framework. The Collection is empty if no registration
1:f13c6ac: 	 *         listeners are specified for the service.
1:f13c6ac: 	 */
1:f13c6ac: 	Collection<RegistrationListener> getRegistrationListeners();
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.blueprint.reflect;
1: 
1: import java.util.Collection;
1: import java.util.List;
1: 
1: /**
1:  * Metadata for a service to be registered by the Blueprint Container when
1:  * enabled.
1:  * 
1:  * <p>
1:  * This is specified by the <code>service</code> element.
1:  * 
1:  * @ThreadSafe
1:  * @version $Revision$
1:  */
1: public interface ServiceMetadata extends ComponentMetadata {
1: 
1: 	/**
1: 	 * Do not auto-detect types for advertised service interfaces
1: 	 * 
1: 	 * @see #getAutoExport()
1: 	 */
1: 	static final int		AUTO_EXPORT_DISABLED		= 1;
1: 
1: 	/**
1: 	 * Advertise all Java interfaces implemented by the component instance type
1: 	 * as service interfaces.
1: 	 * 
1: 	 * @see #getAutoExport()
1: 	 */
1: 	static final int		AUTO_EXPORT_INTERFACES		= 2;
1: 
1: 	/**
1: 	 * Advertise all Java classes in the hierarchy of the component instance
1: 	 * type as service interfaces.
1: 	 * 
1: 	 * @see #getAutoExport()
1: 	 */
1: 	static final int		AUTO_EXPORT_CLASS_HIERARCHY	= 3;
1: 
1: 	/**
1: 	 * Advertise all Java classes and interfaces in the component instance type
1: 	 * as service interfaces.
1: 	 * 
1: 	 * @see #getAutoExport()
1: 	 */
1: 	static final int	AUTO_EXPORT_ALL_CLASSES		= 4;
1: 
1: 	/**
1: 	 * Return the Metadata for the component to be exported as a service.
1: 	 * 
1: 	 * This is specified inline or via the <code>ref</code> attribute of the
1: 	 * service.
1: 	 * 
1: 	 * @return The Metadata for the component to be exported as a service.
1: 	 */
1: 	Target getServiceComponent();
1: 
1: 	/**
1: 	 * Return the type names of the interfaces that the service should be
1: 	 * advertised as supporting.
1: 	 * 
1: 	 * This is specified in the <code>interface</code> attribute or child
1: 	 * <code>interfaces</code> element of the service.
1: 	 * 
1: 	 * @return An immutable List of <code>String</code> for the type names of
1: 	 *         the interfaces that the service should be advertised as
1: 	 *         supporting. The List is empty if using <code>auto-export</code>
1: 	 *         or no interface names are specified for the service.
1: 	 */
1: 	List<String> getInterfaces();
1: 
1: 	/**
1: 	 * Return the auto-export mode for the service.
1: 	 * 
1: 	 * This is specified by the <code>auto-export</code> attribute of the
1: 	 * service.
1: 	 * 
1: 	 * @return The auto-export mode for the service.
1: 	 * @see #AUTO_EXPORT_DISABLED
1: 	 * @see #AUTO_EXPORT_INTERFACES
1: 	 * @see #AUTO_EXPORT_CLASS_HIERARCHY
1: 	 * @see #AUTO_EXPORT_ALL_CLASSES
1: 	 */
1: 	int getAutoExport();
1: 
1: 	/**
1: 	 * Return the user declared properties to be advertised with the service.
1: 	 * 
1: 	 * This is specified by the <code>service-properties</code> element of the
1: 	 * service.
1: 	 * 
1: 	 * @return An immutable List of {@link MapEntry} objects for the user
1: 	 *         declared properties to be advertised with the service. The List
1: 	 *         is empty if no service properties are specified for the service.
1: 	 */
1: 	List<MapEntry> getServiceProperties();
1: 
1: 	/**
1: 	 * Return the ranking value to use when advertising the service. If the
1: 	 * ranking value is zero, the service must be registered without a
1: 	 * <code>service.ranking</code> service property.
1: 	 * 
1: 	 * This is specified by the <code>ranking</code> attribute of the service.
1: 	 * 
1: 	 * @return The ranking value to use when advertising the service.
1: 	 */
1: 	int getRanking();
1: 
1: 	/**
1: 	 * Return the registration listeners to be notified when the service is
1: 	 * registered and unregistered with the framework.
1: 	 * 
1: 	 * This is specified by the <code>registration-listener</code> elements of
1: 	 * the service.
1: 	 * 
1: 	 * @return An immutable Collection of {@link RegistrationListener} objects
1: 	 *         to be notified when the service is registered and unregistered
1: 	 *         with the framework. The Collection is empty if no registration
1: 	 *         listeners are specified for the service.
1: 	 */
1: 	Collection<RegistrationListener> getRegistrationListeners();
1: }
============================================================================