1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
6:e341c9b: 
1:1129914: import java.util.ArrayList;
1:1129914: import java.util.Collection;
1:1129914: import java.util.List;
1:e341c9b: 
1:225bcae: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1:e341c9b: import org.apache.aries.subsystem.core.internal.Utils;
1:1129914: import org.osgi.framework.Version;
1:e341c9b: import org.osgi.resource.Requirement;
1:71fe81a: import org.osgi.resource.Resource;
1:e341c9b: import org.osgi.service.subsystem.SubsystemConstants;
1:e341c9b: 
1:2ffcfb9: public class ProvisionResourceHeader extends AbstractClauseBasedHeader<ProvisionResourceHeader.Clause> implements RequirementHeader<ProvisionResourceHeader.Clause> {
1:2ffcfb9:     public static class Clause extends AbstractClause {
1:e341c9b: 		public static final String ATTRIBUTE_DEPLOYEDVERSION = DeployedVersionAttribute.NAME;
1:e341c9b: 		public static final String ATTRIBUTE_RESOURCEID = "resourceId";
1:e341c9b: 		public static final String ATTRIBUTE_TYPE = TypeAttribute.NAME;
1:e341c9b: 		
1:e341c9b: 		public Clause(String clause) {
1:2ffcfb9: 			super(
1:2ffcfb9:             		parsePath(clause, Patterns.SYMBOLIC_NAME, false), 
1:2ffcfb9:             		parseParameters(clause, false), 
1:2ffcfb9:             		generateDefaultParameters(
1:2ffcfb9:             				TypeAttribute.DEFAULT));
1:e341c9b: 		}
1:e341c9b: 		
1:e341c9b: 		public Clause(Resource resource) {
1:e341c9b: 			this(appendResource(resource, new StringBuilder()).toString());
1:e341c9b: 		}
1:e341c9b: 		
1:e341c9b: 		public boolean contains(Resource resource) {
1:e341c9b: 			return getSymbolicName().equals(
1:e341c9b: 					ResourceHelper.getSymbolicNameAttribute(resource))
1:e341c9b: 					&& getDeployedVersion().equals(
1:e341c9b: 							ResourceHelper.getVersionAttribute(resource))
1:e341c9b: 					&& getType().equals(
1:e341c9b: 							ResourceHelper.getTypeAttribute(resource));
1:e341c9b: 		}
1:e341c9b: 		
1:1129914: 		public Version getDeployedVersion() {
1:e341c9b: 			return ((DeployedVersionAttribute)getAttribute(ATTRIBUTE_DEPLOYEDVERSION)).getVersion();
1:e341c9b: 		}
1:e341c9b: 
1:e341c9b: 		public String getSymbolicName() {
2:e341c9b: 			return path;
1:e341c9b: 		}
1:e341c9b: 		
1:e341c9b: 		public String getType() {
1:e341c9b: 			return ((TypeAttribute)getAttribute(ATTRIBUTE_TYPE)).getType();
1:e341c9b: 		}
1:e341c9b: 		
1:e341c9b: 		public ProvisionResourceRequirement toRequirement(Resource resource) {
1:e341c9b: 			return new ProvisionResourceRequirement(this, resource);
1:e341c9b: 		}
1:e341c9b: 	}
1:e341c9b: 	
1:e341c9b: 	public static final String NAME = SubsystemConstants.PROVISION_RESOURCE;
1:e341c9b: 	
1:1129914: 	public static ProvisionResourceHeader newInstance(Collection<Resource> resources) {
1:e341c9b: 		StringBuilder builder = new StringBuilder();
1:1129914: 		for (Resource resource : resources) {
1:1129914: 			appendResource(resource, builder);
1:226c63f: 			builder.append(',');
4:e341c9b: 		}
1:226c63f: 		// Remove the trailing comma.
1:226c63f: 		// TODO Intentionally letting the exception propagate since there must be at least one resource.
1:e341c9b: 		builder.deleteCharAt(builder.length() - 1);
1:1129914: 		return new ProvisionResourceHeader(builder.toString());
1:e341c9b: 	}
1:e341c9b: 	
1:e341c9b: 	private static StringBuilder appendResource(Resource resource, StringBuilder builder) {
1:225bcae: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1:225bcae: 		Version version = ResourceHelper.getVersionAttribute(resource);
1:225bcae: 		String type = ResourceHelper.getTypeAttribute(resource);
1:e341c9b: 		builder.append(symbolicName)
1:e341c9b: 			.append(';')
1:e341c9b: 			.append(Clause.ATTRIBUTE_DEPLOYEDVERSION)
1:e341c9b: 			.append('=')
1:e341c9b: 			.append(version.toString())
1:e341c9b: 			.append(';')
1:e341c9b: 			.append(Clause.ATTRIBUTE_TYPE)
1:e341c9b: 			.append('=')
1:e341c9b: 			.append(type)
1:e341c9b: 			.append(';')
1:e341c9b: 			.append(Clause.ATTRIBUTE_RESOURCEID)
1:e341c9b: 			.append('=')
1:e341c9b: 			.append(Utils.getId(resource));
1:e341c9b: 		return builder;
1:e341c9b: 	}
1:2ffcfb9: 		
1:e341c9b: 	public ProvisionResourceHeader(Collection<Clause> clauses) {
1:2ffcfb9: 		super(clauses);
1:e341c9b: 	}
1:e341c9b: 	
1:e341c9b: 	public ProvisionResourceHeader(String value) {
1:2ffcfb9: 		super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:e341c9b: 	}
1:e341c9b: 	
1:e341c9b: 	public boolean contains(Resource resource) {
1:e341c9b: 		for (Clause clause : getClauses())
1:e341c9b: 			if (clause.contains(resource))
1:e341c9b: 				return true;
1:e341c9b: 		return false;
1:e341c9b: 	}
1:e341c9b: 	
1:e341c9b: 	public Clause getClause(Resource resource) {
1:e341c9b: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1:e341c9b: 		Version version = ResourceHelper.getVersionAttribute(resource);
1:e341c9b: 		String type = ResourceHelper.getTypeAttribute(resource);
1:e341c9b: 		for (Clause clause : clauses) {
1:e341c9b: 			if (symbolicName.equals(clause.getPath())
1:e341c9b: 					&& clause.getDeployedVersion().equals(version)
1:e341c9b: 					&& type.equals(clause.getType()))
1:e341c9b: 				return clause;
1:e341c9b: 		}
2:e341c9b: 		return null;
1:e341c9b: 	}
1:e341c9b: 
6:e341c9b: 	@Override
1:e341c9b: 	public String getName() {
1:e341c9b: 		return NAME;
1:e341c9b: 	}
1:e341c9b: 
1:e341c9b: 	@Override
1:e341c9b: 	public String getValue() {
1:e341c9b: 		return toString();
1:e341c9b: 	}
1:e341c9b: 	
1:e341c9b: 	@Override
1:e341c9b: 	public List<Requirement> toRequirements(Resource resource) {
1:e341c9b: 		List<Requirement> requirements = new ArrayList<Requirement>(clauses.size());
1:e341c9b: 		for (Clause clause : clauses)
1:e341c9b: 			requirements.add(clause.toRequirement(resource));
1:e341c9b: 		return requirements;
1:e341c9b: 	}
1:e341c9b: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class ProvisionResourceHeader extends AbstractClauseBasedHeader<ProvisionResourceHeader.Clause> implements RequirementHeader<ProvisionResourceHeader.Clause> {
1:     public static class Clause extends AbstractClause {
1: 			super(
1:             		parsePath(clause, Patterns.SYMBOLIC_NAME, false), 
1:             		parseParameters(clause, false), 
1:             		generateDefaultParameters(
1:             				TypeAttribute.DEFAULT));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		super(clauses);
1: 		super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e341c9b
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: import org.apache.aries.subsystem.core.internal.Utils;
1: import org.osgi.resource.Requirement;
1: import org.osgi.service.subsystem.SubsystemConstants;
0: public class ProvisionResourceHeader implements RequirementHeader<ProvisionResourceHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
1: 		public static final String ATTRIBUTE_DEPLOYEDVERSION = DeployedVersionAttribute.NAME;
1: 		public static final String ATTRIBUTE_RESOURCEID = "resourceId";
1: 		public static final String ATTRIBUTE_TYPE = TypeAttribute.NAME;
0: 		private static final Pattern PATTERN_SYMBOLICNAME = Pattern.compile('(' + Grammar.SYMBOLICNAME + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PARAMETER = Pattern.compile('(' + Grammar.PARAMETER + ")(?=;|\\z)");
1: 		
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 			Parameter parameter = parameters.get(ATTRIBUTE_TYPE);
0: 			if (parameter == null)
0: 				parameters.put(ATTRIBUTE_TYPE, TypeAttribute.DEFAULT);
1: 		}
1: 		
0: 		private final String path;
0: 		private final Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		
1: 		public Clause(String clause) {
0: 			Matcher matcher = PATTERN_SYMBOLICNAME.matcher(clause);
0: 			if (!matcher.find())
0: 				throw new IllegalArgumentException("Missing symbolic name path: " + clause);
0: 			path = matcher.group();
0: 			matcher.usePattern(PATTERN_PARAMETER);
0: 			while (matcher.find()) {
0: 				Parameter parameter = ParameterFactory.create(matcher.group());
0: 				parameters.put(parameter.getName(), parameter);
1: 			}
0: 			fillInDefaults(parameters);
1: 		}
1: 		
1: 		public Clause(Resource resource) {
1: 			this(appendResource(resource, new StringBuilder()).toString());
1: 		}
1: 		
1: 		public boolean contains(Resource resource) {
1: 			return getSymbolicName().equals(
1: 					ResourceHelper.getSymbolicNameAttribute(resource))
1: 					&& getDeployedVersion().equals(
1: 							ResourceHelper.getVersionAttribute(resource))
1: 					&& getType().equals(
1: 							ResourceHelper.getTypeAttribute(resource));
1: 		}
1: 		
1: 		@Override
0: 		public Attribute getAttribute(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Attribute)
0: 				return (Attribute)result;
1: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Attribute> getAttributes() {
0: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
0: 			for (Parameter parameter : parameters.values())
0: 				if (parameter instanceof Attribute)
0: 					attributes.add((Attribute)parameter);
0: 			attributes.trimToSize();
0: 			return attributes;
1: 			return ((DeployedVersionAttribute)getAttribute(ATTRIBUTE_DEPLOYEDVERSION)).getVersion();
1: 		}
1: 
1: 		@Override
0: 		public Directive getDirective(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Directive)
0: 				return (Directive)result;
1: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Directive> getDirectives() {
0: 			ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
0: 			for (Parameter parameter : parameters.values())
0: 				if (parameter instanceof Directive)
0: 					directives.add((Directive)parameter);
0: 			directives.trimToSize();
0: 			return directives;
1: 		}
1: 
1: 		@Override
0: 		public Parameter getParameter(String name) {
0: 			return parameters.get(name);
1: 		}
1: 
1: 		@Override
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.unmodifiableCollection(parameters.values());
1: 		}
1: 
1: 		@Override
0: 		public String getPath() {
1: 			return path;
1: 		public String getSymbolicName() {
1: 			return path;
1: 		}
1: 
1: 		
1: 		public String getType() {
1: 			return ((TypeAttribute)getAttribute(ATTRIBUTE_TYPE)).getType();
1: 		public ProvisionResourceRequirement toRequirement(Resource resource) {
1: 			return new ProvisionResourceRequirement(this, resource);
1: 		@Override
0: 		public String toString() {
0: 			StringBuilder builder = new StringBuilder()
0: 					.append(getPath());
0: 			for (Parameter parameter : getParameters()) {
0: 				builder.append(';').append(parameter);
1: 			}
0: 			return builder.toString();
1: 	public static final String NAME = SubsystemConstants.PROVISION_RESOURCE;
/////////////////////////////////////////////////////////////////////////
1: 	private static StringBuilder appendResource(Resource resource, StringBuilder builder) {
1: 		builder.append(symbolicName)
1: 			.append(';')
1: 			.append(Clause.ATTRIBUTE_DEPLOYEDVERSION)
1: 			.append('=')
1: 			.append(version.toString())
1: 			.append(';')
1: 			.append(Clause.ATTRIBUTE_TYPE)
1: 			.append('=')
1: 			.append(type)
1: 			.append(';')
1: 			.append(Clause.ATTRIBUTE_RESOURCEID)
1: 			.append('=')
1: 			.append(Utils.getId(resource));
1: 		return builder;
1: 	}
1: 	
0: 	private static Collection<Clause> processHeader(String value) {
0: 		Collection<String> clauseStrs = new ClauseTokenizer(value).getClauses();
0: 		Set<Clause> clauses = new HashSet<Clause>(clauseStrs.size());
0: 		for (String clause : new ClauseTokenizer(value).getClauses())
0: 			clauses.add(new Clause(clause));
0: 		return clauses;
1: 	}
1: 	
0: 	private final Set<Clause> clauses;
1: 	
1: 	public ProvisionResourceHeader(Collection<Clause> clauses) {
0: 		if (clauses.isEmpty())
0: 			throw new IllegalArgumentException("A " + NAME + " header must have at least one clause");
0: 		this.clauses = new HashSet<Clause>(clauses);
1: 	}
1: 	
1: 	public ProvisionResourceHeader(String value) {
0: 		this(processHeader(value));
1: 	}
1: 	
1: 	public boolean contains(Resource resource) {
1: 		for (Clause clause : getClauses())
1: 			if (clause.contains(resource))
1: 				return true;
1: 		return false;
1: 	}
1: 	
1: 	public Clause getClause(Resource resource) {
1: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1: 		Version version = ResourceHelper.getVersionAttribute(resource);
1: 		String type = ResourceHelper.getTypeAttribute(resource);
1: 		for (Clause clause : clauses) {
1: 			if (symbolicName.equals(clause.getPath())
1: 					&& clause.getDeployedVersion().equals(version)
1: 					&& type.equals(clause.getType()))
1: 				return clause;
0: 	@Override
0: 	public Collection<ProvisionResourceHeader.Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
1: 	}
1: 
0: 	@Override
1: 	public String getName() {
1: 		return NAME;
1: 	}
1: 
0: 	@Override
1: 	public String getValue() {
1: 		return toString();
1: 	}
1: 	
0: 	@Override
1: 	public List<Requirement> toRequirements(Resource resource) {
1: 		List<Requirement> requirements = new ArrayList<Requirement>(clauses.size());
1: 		for (Clause clause : clauses)
1: 			requirements.add(clause.toRequirement(resource));
1: 		return requirements;
1: 	}
1: 	
0: 	@Override
0: 	public String toString() {
1: 		StringBuilder builder = new StringBuilder();
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause).append(',');
1: 		}
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
1: 		builder.deleteCharAt(builder.length() - 1);
0: 		return builder.toString();
commit:777b216
/////////////////////////////////////////////////////////////////////////
0: 		private final long resourceId;
0: 		public ProvisionedResource(String name, Version deployedVersion, String namespace, long resourceId) {
0: 			this.resourceId = resourceId;
/////////////////////////////////////////////////////////////////////////
0: 		
0: 		public long getResourceId() {
0: 			return resourceId;
0: 		}
/////////////////////////////////////////////////////////////////////////
0: 			Attribute resourceId = clause.getAttribute(DeployedContentHeader.Clause.ATTRIBUTE_RESOURCEID);
0: 							typeAttribute == null ? TypeAttribute.DEFAULT_VALUE : typeAttribute.getType(),
0: 							resourceId == null ? -1 : Long.parseLong(String.valueOf(resourceId.getValue()))));
commit:225bcae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.ResourceHelper;
/////////////////////////////////////////////////////////////////////////
0: 	
0: 	public boolean contains(Resource resource) {
0: 		return getProvisionedResource(resource) != null;
0: 	}
0: 	
0: 	public ProvisionedResource getProvisionedResource(Resource resource) {
1: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1: 		Version version = ResourceHelper.getVersionAttribute(resource);
1: 		String type = ResourceHelper.getTypeAttribute(resource);
0: 		for (ProvisionedResource provisionedResource : provisionedResources) {
0: 			if (symbolicName.equals(provisionedResource.getName())
0: 					&& provisionedResource.getDeployedVersion().equals(version)
0: 					&& type.equals(provisionedResource.getNamespace()))
0: 				return provisionedResource;
0: 		}
0: 		return null;
0: 	}
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Resource;
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.Resource;
commit:226c63f
/////////////////////////////////////////////////////////////////////////
1: 			builder.append(',');
1: 		// Remove the trailing comma.
1: 		// TODO Intentionally letting the exception propagate since there must be at least one resource.
0: 		builder.deleteCharAt(builder.length() - 1);
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
0: 
1: import java.util.ArrayList;
1: import java.util.Collection;
0: import java.util.Collections;
1: import java.util.List;
0: 
1: import org.osgi.framework.Version;
0: import org.osgi.framework.wiring.Resource;
0: 
0: public class ProvisionResourceHeader extends AbstractHeader {
0: 	public static class ProvisionedResource {
0: 		private final Version deployedVersion;
0: 		private final String name;
0: 		private final String namespace;
0: 		
0: 		public ProvisionedResource(String name, Version deployedVersion, String namespace) {
0: 			this.name = name;
0: 			this.deployedVersion = deployedVersion;
0: 			this.namespace = namespace;
0: 		}
0: 		
1: 		public Version getDeployedVersion() {
0: 			return deployedVersion;
0: 		}
0: 		
0: 		public String getName() {
0: 			return name;
0: 		}
0: 		
0: 		public String getNamespace() {
0: 			return namespace;
0: 		}
0: 	}
0: 	
0: 	// TODO Needs to be added to SubsystemConstants.
0: 	public static final String NAME = "Provision-Resource";
0: 	
1: 	public static ProvisionResourceHeader newInstance(Collection<Resource> resources) {
0: 		StringBuilder builder = new StringBuilder();
0: 		appendResource(resources.iterator().next(), builder);
1: 		for (Resource resource : resources) {
0: 			builder.append(',');
1: 			appendResource(resource, builder);
0: 		}
1: 		return new ProvisionResourceHeader(builder.toString());
0: 	}
0: 	
0: 	private final List<ProvisionedResource> provisionedResources;
0: 	
0: 	public ProvisionResourceHeader(String value) {
0: 		super(NAME, value);
0: 		provisionedResources = new ArrayList<ProvisionedResource>(clauses.size());
0: 		for (Clause clause : clauses) {
0: 			DeployedVersionAttribute attribute = (DeployedVersionAttribute)clause.getAttribute(DeployedVersionAttribute.NAME);
0: 			TypeAttribute typeAttribute = (TypeAttribute)clause.getAttribute(TypeAttribute.NAME);
0: 			provisionedResources.add(
0: 					new ProvisionedResource(
0: 							clause.getPath(),
0: 							attribute == null ? Version.emptyVersion : attribute.getDeployedVersion(),
0: 							typeAttribute == null ? TypeAttribute.DEFAULT_VALUE : typeAttribute.getType()));
0: 		}
0: 	}
0: 
0: 	public List<ProvisionedResource> getProvisionedResources() {
0: 		return Collections.unmodifiableList(provisionedResources);
0: 	}
0: }
============================================================================