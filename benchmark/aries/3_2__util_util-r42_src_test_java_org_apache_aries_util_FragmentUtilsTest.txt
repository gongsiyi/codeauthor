1:1bccb37: /**
1:1bccb37:  * Licensed to the Apache Software Foundation (ASF) under one
1:1bccb37:  * or more contributor license agreements.  See the NOTICE file
1:1bccb37:  * distributed with this work for additional information
1:1bccb37:  * regarding copyright ownership.  The ASF licenses this file
1:1bccb37:  * to you under the Apache License, Version 2.0 (the
1:1bccb37:  * "License"); you may not use this file except in compliance
1:1bccb37:  * with the License.  You may obtain a copy of the License at
1:1bccb37:  *
1:1bccb37:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1bccb37:  *
1:1bccb37:  * Unless required by applicable law or agreed to in writing,
1:1bccb37:  * software distributed under the License is distributed on an
1:1bccb37:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1bccb37:  * KIND, either express or implied.  See the License for the
1:1bccb37:  * specific language governing permissions and limitations
1:1bccb37:  * under the License.
1:1bccb37:  */
1:1bccb37: package org.apache.aries.util;
17:1bccb37: 
1:1bccb37: import static org.junit.Assert.assertEquals;
1:1bccb37: import static org.junit.Assert.assertNotNull;
1:1bccb37: 
1:1bccb37: import java.util.Dictionary;
1:1bccb37: import java.util.Hashtable;
1:1bccb37: 
1:1bccb37: import org.apache.aries.mocks.BundleMock;
1:e01cbda: import org.apache.aries.unittest.mocks.Skeleton;
1:1bccb37: import org.junit.Before;
1:1bccb37: import org.junit.Test;
1:1bccb37: import org.osgi.framework.Bundle;
1:1bccb37: import org.osgi.framework.Constants;
1:1bccb37: 
1:1bccb37: public class FragmentUtilsTest {
1:1bccb37: 
1:e01cbda:     private Bundle hostBundle;
1:1bccb37: 
1:e01cbda:     @Before
1:e01cbda:     public void setUp() throws Exception {
1:e01cbda:         hostBundle = Skeleton.newMock(new BundleMock("scooby.doo",
1:e01cbda:                 new Hashtable<String, Object>()), Bundle.class);
1:e01cbda:     }
1:1bccb37: 
1:e01cbda:     @SuppressWarnings("unchecked")
1:e01cbda:     @Test
1:e01cbda:     public void testFragmentCreation() throws Exception {
1:e01cbda:         Bundle exportBundle = makeBundleWithExports("export.bundle", "1.2.3",
1:fa7040c:                 "export.package;version=\"1.0.0\";uses:=\"foo.jar,bar.jar\";singleton:=true");
1:1bccb37: 
1:e01cbda:         Dictionary fragmentHeaders = makeFragmentFromExportBundle(exportBundle)
1:e01cbda:                 .getHeaders();
1:e01cbda: 
1:e01cbda:         assertNotNull("No headers in the fragment", fragmentHeaders);
1:e01cbda: 
1:e01cbda:         assertEquals("Wrong symbolicName", "scooby.doo.test.fragment",
1:2d6bb5c:                     fragmentHeaders.get(Constants.BUNDLE_SYMBOLICNAME));
1:2d6bb5c:         assertEquals("Wrong version", "0.0.0", 
1:2d6bb5c:                     fragmentHeaders.get(Constants.BUNDLE_VERSION));
1:2d6bb5c:         assertEquals("Wrong Bundle manifest version", "2", 
1:2d6bb5c:                     fragmentHeaders.get(Constants.BUNDLE_MANIFESTVERSION));
1:2d6bb5c:         assertEquals("Wrong Fragment host", "scooby.doo;bundle-version=\"0.0.0\"", 
1:2d6bb5c:                     fragmentHeaders.get(Constants.FRAGMENT_HOST));
1:2d6bb5c:         assertEquals("Wrong Bundle Name", "Test Fragment bundle",
1:2d6bb5c:                     fragmentHeaders.get(Constants.BUNDLE_NAME));
1:e01cbda:         assertEquals(
1:e01cbda:                 "Wrong Imports",
1:e01cbda:                 "export.package;version=\"1.0.0\";bundle-symbolic-name=\"export.bundle\";bundle-version=\"[1.2.3,1.2.3]\"",
1:e01cbda:                 fragmentHeaders.get(Constants.IMPORT_PACKAGE));
1:e01cbda:     }
1:e01cbda: 
1:e01cbda:     private Bundle makeBundleWithExports(String symbolicName, String version,
1:e01cbda:             String exports) {
1:e01cbda:         Hashtable<String, Object> headers = new Hashtable<String, Object>();
1:e01cbda:         headers.put(Constants.BUNDLE_VERSION, version);
1:e01cbda:         headers.put(Constants.EXPORT_PACKAGE, exports);
1:e01cbda:         Bundle exportBundle = Skeleton.newMock(new BundleMock(symbolicName,
1:e01cbda:                 headers), Bundle.class);
1:e01cbda:         return exportBundle;
1:e01cbda:     }
1:e01cbda: 
1:e01cbda:     private Bundle makeFragmentFromExportBundle(Bundle exportBundle)
1:e01cbda:             throws Exception {
1:2d6bb5c:         FragmentBuilder builder = new FragmentBuilder(hostBundle, "test.fragment", "fragment");
1:e01cbda:         builder.setName("Test Fragment bundle");
1:e01cbda:         builder.addImportsFromExports(exportBundle);
1:e01cbda: 
1:e01cbda:         return builder.install(hostBundle.getBundleContext());
1:e01cbda:     }
1:e01cbda: 
1:e01cbda:     @Test
1:e01cbda:     public void testManifestAttributes() throws Exception {
1:e01cbda:         String fakeExportsListNoExtras = "no.such.export,no.such.export2";
1:e01cbda:         String fakeExportsListAttrOnly = "no.such.export;version=\"1.1.1\",no.such.export2;version=\"2.2.2\"";
1:e01cbda:         String fakeExportsListDirOnly = "no.such.export;uses:=\"some.other.thing\",no.such.export2;include:=\"some.thing\"";
1:e01cbda:         String fakeExportsListMixed = "no.such.export;version=\"1.1.1\";uses:=\"some.other.thing\",no.such.export2;include:=\"some.thing\"";
1:e01cbda:         String fakeExportsListFunkyAttr = "no.such.export;attribute=\"a:=\",no.such.export2;attributeTwo=\"b:=\";include:=\"some.thing\"";
1:e01cbda: 
1:e01cbda:         String expectedImportsListNoExtras = "no.such.export;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
1:e01cbda:         String expectedImportsListAttrOnly = "no.such.export;version=\"1.1.1\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;version=\"2.2.2\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
1:e01cbda:         String expectedImportsListDirOnly = "no.such.export;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
1:e01cbda:         String expectedImportsListMixed = "no.such.export;version=\"1.1.1\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
1:e01cbda:         String expectedImportsListFunkyAttr = "no.such.export;attribute=\"a:=\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;attributeTwo=\"b:=\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
1:e01cbda: 
1:e01cbda:         Bundle exportBundle = makeBundleWithExports("no.such.provider",
1:e01cbda:                 "1.1.1", fakeExportsListNoExtras);
1:e01cbda:         Dictionary headers = makeFragmentFromExportBundle(exportBundle)
1:e01cbda:                 .getHeaders();
1:e01cbda:         assertEquals(
1:e01cbda:                 "Import list did not match expected value, expectedImportsListNoExtras",
1:e01cbda:                 expectedImportsListNoExtras, headers
1:e01cbda:                         .get(Constants.IMPORT_PACKAGE));
1:e01cbda: 
1:e01cbda:         exportBundle = makeBundleWithExports("no.such.provider", "1.1.1",
1:e01cbda:                 fakeExportsListAttrOnly);
1:e01cbda:         headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
1:e01cbda:         assertEquals(
1:e01cbda:                 "Import list did not match expected value, expectedImportsListAttrOnly",
1:e01cbda:                 expectedImportsListAttrOnly, headers
1:e01cbda:                         .get(Constants.IMPORT_PACKAGE));
1:e01cbda: 
1:e01cbda:         exportBundle = makeBundleWithExports("no.such.provider", "1.1.1",
1:e01cbda:                 fakeExportsListDirOnly);
1:e01cbda:         headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
1:e01cbda:         assertEquals(
1:e01cbda:                 "Import list did not match expected value, expectedImportsListDirOnly",
1:e01cbda:                 expectedImportsListDirOnly, headers
1:e01cbda:                         .get(Constants.IMPORT_PACKAGE));
1:e01cbda: 
1:e01cbda:         exportBundle = makeBundleWithExports("no.such.provider", "1.1.1",
1:e01cbda:                 fakeExportsListMixed);
1:e01cbda:         headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
1:e01cbda:         assertEquals(
1:e01cbda:                 "Import list did not match expected value, expectedImportsListMixed",
1:e01cbda:                 expectedImportsListMixed, headers.get(Constants.IMPORT_PACKAGE));
1:e01cbda: 
1:e01cbda:         exportBundle = makeBundleWithExports("no.such.provider", "1.1.1",
1:e01cbda:                 fakeExportsListFunkyAttr);
1:e01cbda:         headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
1:e01cbda:         assertEquals(
1:e01cbda:                 "Import list did not match expected value, expectedImportsListFunkyAttr",
1:e01cbda:                 expectedImportsListFunkyAttr, headers
1:e01cbda:                         .get(Constants.IMPORT_PACKAGE));
1:e01cbda:     }
1:e01cbda: 
6:1bccb37: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:2d6bb5c
/////////////////////////////////////////////////////////////////////////
1:                     fragmentHeaders.get(Constants.BUNDLE_SYMBOLICNAME));
1:         assertEquals("Wrong version", "0.0.0", 
1:                     fragmentHeaders.get(Constants.BUNDLE_VERSION));
1:         assertEquals("Wrong Bundle manifest version", "2", 
1:                     fragmentHeaders.get(Constants.BUNDLE_MANIFESTVERSION));
1:         assertEquals("Wrong Fragment host", "scooby.doo;bundle-version=\"0.0.0\"", 
1:                     fragmentHeaders.get(Constants.FRAGMENT_HOST));
1:         assertEquals("Wrong Bundle Name", "Test Fragment bundle",
1:                     fragmentHeaders.get(Constants.BUNDLE_NAME));
/////////////////////////////////////////////////////////////////////////
1:         FragmentBuilder builder = new FragmentBuilder(hostBundle, "test.fragment", "fragment");
commit:fa7040c
/////////////////////////////////////////////////////////////////////////
1:                 "export.package;version=\"1.0.0\";uses:=\"foo.jar,bar.jar\";singleton:=true");
author:Lin Sun
-------------------------------------------------------------------------------
commit:e01cbda
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.unittest.mocks.Skeleton;
1:     private Bundle hostBundle;
1:     @Before
1:     public void setUp() throws Exception {
1:         hostBundle = Skeleton.newMock(new BundleMock("scooby.doo",
1:                 new Hashtable<String, Object>()), Bundle.class);
1:     }
1:     @SuppressWarnings("unchecked")
1:     @Test
1:     public void testFragmentCreation() throws Exception {
1:         Bundle exportBundle = makeBundleWithExports("export.bundle", "1.2.3",
0:                 "export.package;version=\"1.0.0\";singleton:=true");
1:         Dictionary fragmentHeaders = makeFragmentFromExportBundle(exportBundle)
1:                 .getHeaders();
1: 
1:         assertNotNull("No headers in the fragment", fragmentHeaders);
1: 
1:         assertEquals("Wrong symbolicName", "scooby.doo.test.fragment",
0:                 fragmentHeaders.get(Constants.BUNDLE_SYMBOLICNAME));
0:         assertEquals("Wrong version", "0.0.0", fragmentHeaders
0:                 .get(Constants.BUNDLE_VERSION));
0:         assertEquals("Wrong Bundle manifest version", "2", fragmentHeaders
0:                 .get(Constants.BUNDLE_MANIFESTVERSION));
0:         assertEquals("Wrong Fragment host",
0:                 "scooby.doo;bundle-version=\"0.0.0\"", fragmentHeaders
0:                         .get(Constants.FRAGMENT_HOST));
1:         assertEquals(
1:                 "Wrong Imports",
1:                 "export.package;version=\"1.0.0\";bundle-symbolic-name=\"export.bundle\";bundle-version=\"[1.2.3,1.2.3]\"",
1:                 fragmentHeaders.get(Constants.IMPORT_PACKAGE));
1:     }
1: 
1:     private Bundle makeBundleWithExports(String symbolicName, String version,
1:             String exports) {
1:         Hashtable<String, Object> headers = new Hashtable<String, Object>();
1:         headers.put(Constants.BUNDLE_VERSION, version);
1:         headers.put(Constants.EXPORT_PACKAGE, exports);
1:         Bundle exportBundle = Skeleton.newMock(new BundleMock(symbolicName,
1:                 headers), Bundle.class);
1:         return exportBundle;
1:     }
1: 
1:     private Bundle makeFragmentFromExportBundle(Bundle exportBundle)
1:             throws Exception {
0:         FragmentBuilder builder = new FragmentBuilder(hostBundle,
0:                 "test.fragment");
1:         builder.setName("Test Fragment bundle");
1:         builder.addImportsFromExports(exportBundle);
1: 
1:         return builder.install(hostBundle.getBundleContext());
1:     }
1: 
1:     @Test
1:     public void testManifestAttributes() throws Exception {
1:         String fakeExportsListNoExtras = "no.such.export,no.such.export2";
1:         String fakeExportsListAttrOnly = "no.such.export;version=\"1.1.1\",no.such.export2;version=\"2.2.2\"";
1:         String fakeExportsListDirOnly = "no.such.export;uses:=\"some.other.thing\",no.such.export2;include:=\"some.thing\"";
1:         String fakeExportsListMixed = "no.such.export;version=\"1.1.1\";uses:=\"some.other.thing\",no.such.export2;include:=\"some.thing\"";
1:         String fakeExportsListFunkyAttr = "no.such.export;attribute=\"a:=\",no.such.export2;attributeTwo=\"b:=\";include:=\"some.thing\"";
1: 
1:         String expectedImportsListNoExtras = "no.such.export;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
1:         String expectedImportsListAttrOnly = "no.such.export;version=\"1.1.1\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;version=\"2.2.2\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
1:         String expectedImportsListDirOnly = "no.such.export;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
1:         String expectedImportsListMixed = "no.such.export;version=\"1.1.1\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
1:         String expectedImportsListFunkyAttr = "no.such.export;attribute=\"a:=\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;attributeTwo=\"b:=\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
1: 
1:         Bundle exportBundle = makeBundleWithExports("no.such.provider",
1:                 "1.1.1", fakeExportsListNoExtras);
1:         Dictionary headers = makeFragmentFromExportBundle(exportBundle)
1:                 .getHeaders();
1:         assertEquals(
1:                 "Import list did not match expected value, expectedImportsListNoExtras",
1:                 expectedImportsListNoExtras, headers
1:                         .get(Constants.IMPORT_PACKAGE));
1: 
1:         exportBundle = makeBundleWithExports("no.such.provider", "1.1.1",
1:                 fakeExportsListAttrOnly);
1:         headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
1:         assertEquals(
1:                 "Import list did not match expected value, expectedImportsListAttrOnly",
1:                 expectedImportsListAttrOnly, headers
1:                         .get(Constants.IMPORT_PACKAGE));
1: 
1:         exportBundle = makeBundleWithExports("no.such.provider", "1.1.1",
1:                 fakeExportsListDirOnly);
1:         headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
1:         assertEquals(
1:                 "Import list did not match expected value, expectedImportsListDirOnly",
1:                 expectedImportsListDirOnly, headers
1:                         .get(Constants.IMPORT_PACKAGE));
1: 
1:         exportBundle = makeBundleWithExports("no.such.provider", "1.1.1",
1:                 fakeExportsListMixed);
1:         headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
1:         assertEquals(
1:                 "Import list did not match expected value, expectedImportsListMixed",
1:                 expectedImportsListMixed, headers.get(Constants.IMPORT_PACKAGE));
1: 
1:         exportBundle = makeBundleWithExports("no.such.provider", "1.1.1",
1:                 fakeExportsListFunkyAttr);
1:         headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
1:         assertEquals(
1:                 "Import list did not match expected value, expectedImportsListFunkyAttr",
1:                 expectedImportsListFunkyAttr, headers
1:                         .get(Constants.IMPORT_PACKAGE));
1:     }
1: 
commit:1bccb37
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
0: import java.lang.reflect.Method;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import org.apache.aries.mocks.BundleMock;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
0: import org.osgi.framework.Version;
1: 
0: import org.apache.aries.unittest.mocks.MethodCall;
0: import org.apache.aries.unittest.mocks.Skeleton;
0: import org.apache.aries.util.FragmentBuilder;
1: 
1: public class FragmentUtilsTest {
1: 
0:   private Bundle hostBundle;
1:   
0:   @Before
0:   public void setUp() throws Exception { 
0:       hostBundle = Skeleton.newMock(new BundleMock("scooby.doo", new Hashtable<String, Object>()), Bundle.class);
1:   }
1:   
0:   @SuppressWarnings("unchecked")
0:   @Test
0:   public void testFragmentCreation() throws Exception
0:   {
0:     Bundle exportBundle = makeBundleWithExports(
0:         "export.bundle", "1.2.3", "export.package;version=\"1.0.0\";singleton:=true");
1:     
0:     Dictionary fragmentHeaders = makeFragmentFromExportBundle(exportBundle).getHeaders();
1:     
0:     assertNotNull("No headers in the fragment", fragmentHeaders);
1:     
0:     assertEquals("Wrong symbolicName", "scooby.doo.test.fragment", fragmentHeaders.get(Constants.BUNDLE_SYMBOLICNAME));
0:     assertEquals("Wrong version", "0.0.0", fragmentHeaders.get(Constants.BUNDLE_VERSION));
0:     assertEquals("Wrong Bundle manifest version", "2", fragmentHeaders.get(Constants.BUNDLE_MANIFESTVERSION));
0:     assertEquals("Wrong Fragment host", "scooby.doo;bundle-version=\"0.0.0\"", fragmentHeaders.get(Constants.FRAGMENT_HOST));
0:     assertEquals("Wrong Imports", 
0:         "export.package;version=\"1.0.0\";bundle-symbolic-name=\"export.bundle\";bundle-version=\"[1.2.3,1.2.3]\"", 
0:         fragmentHeaders.get(Constants.IMPORT_PACKAGE));
1:   }
1:   
0:   private Bundle makeBundleWithExports(String symbolicName, String version, String exports) {
0:     Hashtable<String,Object> headers = new Hashtable<String,Object>();
0:     headers.put(Constants.BUNDLE_VERSION, version);
0:     headers.put(Constants.EXPORT_PACKAGE, exports);
0:     Bundle exportBundle = Skeleton.newMock(new BundleMock(symbolicName, headers), Bundle.class);
0:     return exportBundle;
1:   }
1:   
0:   private Bundle makeFragmentFromExportBundle(Bundle exportBundle) throws Exception {
0:     FragmentBuilder builder = new FragmentBuilder(hostBundle, "test.fragment");
0:     builder.setName("Test Fragment bundle");
0:     builder.addImportsFromExports(exportBundle);
1:     
0:     return builder.install(hostBundle.getBundleContext());
1:   }
1:   
0:   @Test
0:   public void testManifestAttributes() throws Exception
0:   {    
0:     String fakeExportsListNoExtras = "no.such.export,no.such.export2";
0:     String fakeExportsListAttrOnly = "no.such.export;version=\"1.1.1\",no.such.export2;version=\"2.2.2\"";
0:     String fakeExportsListDirOnly = "no.such.export;uses:=\"some.other.thing\",no.such.export2;include:=\"some.thing\"";
0:     String fakeExportsListMixed = "no.such.export;version=\"1.1.1\";uses:=\"some.other.thing\",no.such.export2;include:=\"some.thing\"";
0:     String fakeExportsListFunkyAttr = "no.such.export;attribute=\"a:=\",no.such.export2;attributeTwo=\"b:=\";include:=\"some.thing\"";
1:     
0:     String expectedImportsListNoExtras = "no.such.export;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
0:     String expectedImportsListAttrOnly = "no.such.export;version=\"1.1.1\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;version=\"2.2.2\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
0:     String expectedImportsListDirOnly = "no.such.export;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
0:     String expectedImportsListMixed = "no.such.export;version=\"1.1.1\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
0:     String expectedImportsListFunkyAttr = "no.such.export;attribute=\"a:=\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\",no.such.export2;attributeTwo=\"b:=\";bundle-symbolic-name=\"no.such.provider\";bundle-version=\"[1.1.1,1.1.1]\"";
1:     
1: 
0:     Bundle exportBundle = makeBundleWithExports("no.such.provider", "1.1.1", fakeExportsListNoExtras);
0:     Dictionary headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
0:     assertEquals("Import list did not match expected value, expectedImportsListNoExtras", 
0:         expectedImportsListNoExtras, headers.get(Constants.IMPORT_PACKAGE));
1: 
0:     exportBundle = makeBundleWithExports("no.such.provider", "1.1.1", fakeExportsListAttrOnly);
0:     headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
0:     assertEquals("Import list did not match expected value, expectedImportsListAttrOnly", 
0:         expectedImportsListAttrOnly, headers.get(Constants.IMPORT_PACKAGE));
1:     
0:     exportBundle = makeBundleWithExports("no.such.provider", "1.1.1", fakeExportsListDirOnly);
0:     headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
0:     assertEquals("Import list did not match expected value, expectedImportsListDirOnly", 
0:         expectedImportsListDirOnly, headers.get(Constants.IMPORT_PACKAGE));
1:     
0:     exportBundle = makeBundleWithExports("no.such.provider", "1.1.1", fakeExportsListMixed);
0:     headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
0:     assertEquals("Import list did not match expected value, expectedImportsListMixed", 
0:         expectedImportsListMixed, headers.get(Constants.IMPORT_PACKAGE));
1: 
0:     exportBundle = makeBundleWithExports("no.such.provider", "1.1.1", fakeExportsListFunkyAttr);
0:     headers = makeFragmentFromExportBundle(exportBundle).getHeaders();
0:     assertEquals("Import list did not match expected value, expectedImportsListFunkyAttr", 
0:         expectedImportsListFunkyAttr, headers.get(Constants.IMPORT_PACKAGE));
1:   }
1:   
1: }
============================================================================