1:541fd79: /**
1:541fd79:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:541fd79:  *  contributor license agreements.  See the NOTICE file distributed with
1:541fd79:  *  this work for additional information regarding copyright ownership.
1:541fd79:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:541fd79:  *  (the "License"); you may not use this file except in compliance with
1:541fd79:  *  the License.  You may obtain a copy of the License at
1:541fd79:  *
1:541fd79:  *     http://www.apache.org/licenses/LICENSE-2.0
1:541fd79:  *
1:541fd79:  *  Unless required by applicable law or agreed to in writing, software
1:541fd79:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:541fd79:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:541fd79:  *  See the License for the specific language governing permissions and
1:541fd79:  *  limitations under the License.
1:541fd79:  */
1:541fd79: package org.apache.aries.ejb.openejb.extender;
2:541fd79: 
1:541fd79: import java.io.Serializable;
1:541fd79: import java.lang.reflect.Method;
1:541fd79: import java.lang.reflect.Proxy;
1:541fd79: import java.util.ArrayList;
1:541fd79: import java.util.Arrays;
1:541fd79: import java.util.Collections;
1:541fd79: import java.util.List;
1:541fd79: import java.util.Map;
1:541fd79: import java.util.Properties;
1:541fd79: import java.util.WeakHashMap;
1:541fd79: import java.util.concurrent.Callable;
1:541fd79: import java.util.concurrent.ConcurrentHashMap;
1:541fd79: import java.util.concurrent.ConcurrentMap;
1:541fd79: import java.util.concurrent.atomic.AtomicReference;
1:541fd79: 
1:541fd79: import org.apache.aries.proxy.InvocationListener;
1:541fd79: import org.apache.aries.proxy.ProxyManager;
1:541fd79: import org.apache.aries.proxy.UnableToProxyException;
1:541fd79: import org.apache.aries.util.tracker.SingleServiceTracker;
1:541fd79: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
1:541fd79: import org.apache.openejb.OpenEJBException;
1:541fd79: import org.apache.openejb.util.proxy.InvocationHandler;
1:541fd79: import org.apache.openejb.util.proxy.ProxyFactory;
1:541fd79: import org.osgi.framework.BundleContext;
1:541fd79: 
1:541fd79: public class AriesProxyService implements ProxyFactory, SingleServiceListener {
1:541fd79: 
1:541fd79:   private static class NoProxySupportException extends RuntimeException { 
1:541fd79:     public NoProxySupportException() {
1:541fd79:       super("No Proxy support is available");
1:541fd79:     }
1:541fd79:   }
1:541fd79:   
1:541fd79:   private static final class InvocationHandlerProxy implements Callable<Object>, InvocationListener {
1:541fd79: 
1:541fd79:     private final InvocationHandler handler;
1:541fd79:     
1:541fd79:     private final Map<Thread, Class<?>> invocations = new ConcurrentHashMap<Thread, Class<?>>();
1:541fd79:     private final ConcurrentMap<Class<?>, Object> proxys = new ConcurrentHashMap<Class<?>, Object>();
1:541fd79: 
1:541fd79:     public InvocationHandlerProxy(InvocationHandler handler) {
1:541fd79:       this.handler = handler;
1:541fd79:     }
1:541fd79: 
1:541fd79:     public InvocationHandler getHandler() {
1:541fd79:       return handler;
1:541fd79:     }
1:541fd79: 
1:541fd79:     public void postInvoke(Object arg0, Object arg1, Method arg2, Object arg3)
1:541fd79:         throws Throwable {
1:541fd79:       // No op
1:541fd79:     }
1:541fd79: 
1:541fd79:     public void postInvokeExceptionalReturn(Object arg0, Object arg1,
1:541fd79:         Method arg2, Throwable arg3) throws Throwable {
1:541fd79:       //No op
1:541fd79:     }
1:541fd79: 
1:541fd79:     public Object preInvoke(Object arg0, Method arg1, Object[] arg2)
1:541fd79:         throws Throwable {
1:541fd79:       invocations.put(Thread.currentThread(), arg1.getDeclaringClass());
1:541fd79:       return null;
1:541fd79:     }
1:541fd79: 
1:541fd79:     public Object call() throws Exception {
1:541fd79:       Class<?> c = invocations.remove(Thread.currentThread());
1:541fd79:       if(c == null)
1:541fd79:         throw new IllegalStateException("Unable to establish any context");
1:541fd79:       else if (c.equals(Object.class)) {
1:1168865:         //This is a toString or similar, just use an interface we know
1:1168865:         //we can see and that doesn't have any methods on it :)
1:541fd79:         c = Serializable.class;
1:541fd79:       }
1:541fd79:       
1:541fd79:       Object proxy = proxys.get(c);
1:541fd79:       
1:541fd79:       if(proxy == null) {
1:541fd79:         Object tmp = Proxy.newProxyInstance(c.getClassLoader(), new Class[] {c}, handler);
1:541fd79:         proxy = proxys.putIfAbsent(c, tmp);
1:541fd79:         if(proxy == null)
1:541fd79:           proxy = tmp;
1:541fd79:       }
1:541fd79:       return proxy;
1:541fd79:     }
1:541fd79:     
1:541fd79:   }
1:541fd79:   
1:541fd79:   private static class InnerProxyDelegator implements Callable<Object> {
1:541fd79: 
1:541fd79:     private final Object delegate;
1:541fd79:     
1:541fd79:     public InnerProxyDelegator(Object delegate) {
1:541fd79:       this.delegate = delegate;
1:541fd79:     }
1:541fd79:     
1:541fd79:     public Object call() {
1:541fd79:       return delegate;
1:541fd79:     }
1:541fd79:   }
1:541fd79:   
1:541fd79:   private final Map<Class<?>, Object> proxies = Collections.synchronizedMap(
1:541fd79:       new WeakHashMap<Class<?>, Object>());
1:541fd79:   
1:541fd79:   private final SingleServiceTracker<ProxyManager> proxyTracker;
1:541fd79:   
1:541fd79:   private AriesProxyService(BundleContext ctx) {
1:541fd79:     proxyTracker = new SingleServiceTracker<ProxyManager>(ctx, ProxyManager.class, this);
1:541fd79:     proxyTracker.open();
1:541fd79:   }
1:541fd79:   
1:541fd79:   private final AtomicReference<ProxyManager> manager = 
1:541fd79:     new AtomicReference<ProxyManager>();
1:541fd79:   
1:541fd79:   private static final AtomicReference<AriesProxyService> INSTANCE = 
1:541fd79:     new AtomicReference<AriesProxyService>();
1:541fd79:   
1:541fd79:   private final ProxyManager getManager() {
1:541fd79:     ProxyManager pManager = manager.get();
1:541fd79:     
1:541fd79:     if(pManager == null) {
1:541fd79:       throw new NoProxySupportException();
1:541fd79:     }
1:541fd79:     return pManager;
1:541fd79:   }
1:541fd79: 
1:541fd79:   public static AriesProxyService get() {
1:541fd79:     return INSTANCE.get();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public static void init(BundleContext ctx) {
1:541fd79:     AriesProxyService oTM = new AriesProxyService(ctx);
1:541fd79:     if(!!!INSTANCE.compareAndSet(null, oTM))
1:541fd79:       oTM.destroy();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void destroy() {
1:4115fb2:     INSTANCE.set(null);
1:541fd79:     proxyTracker.close();
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void serviceFound() {
1:541fd79:     update();
1:541fd79:   }
1:541fd79: 
1:541fd79:   public void serviceLost() {
1:541fd79:     update();
1:541fd79:   }
1:541fd79: 
1:541fd79:   public void serviceReplaced() {
1:541fd79:     update();
1:541fd79:   }
1:541fd79:   
1:541fd79:   private void update() {
1:541fd79:     manager.set(proxyTracker.getService());
1:541fd79:   }
1:541fd79:   
1:541fd79:   
1:541fd79:   
1:541fd79:   public InvocationHandler getInvocationHandler(Object arg0)
1:541fd79:       throws IllegalArgumentException {
1:541fd79:     Callable<Object> unwrapped = getManager().unwrap(arg0);
1:541fd79:     
1:541fd79:     if(unwrapped instanceof InnerProxyDelegator) {
1:541fd79:       unwrapped = getManager().unwrap(((InnerProxyDelegator)unwrapped).call());
1:541fd79:     }
1:541fd79:     
1:541fd79:     if(unwrapped instanceof InvocationHandlerProxy) {
1:541fd79:       return ((InvocationHandlerProxy) unwrapped).getHandler();
1:541fd79:     }
1:541fd79:     return null;
1:541fd79:   }
1:541fd79: 
1:541fd79:   public Class getProxyClass(Class iface) throws IllegalArgumentException {
1:541fd79:     if(iface == null || !!!iface.isInterface())
1:541fd79:       throw new IllegalArgumentException("Not an interface " + iface);
1:541fd79:     return newProxyInstance(iface, null).getClass();
1:541fd79:   }
1:541fd79: 
1:541fd79:   public Class getProxyClass(Class[] ifaces) throws IllegalArgumentException {
1:541fd79:     if(ifaces == null || ifaces.length == 0)
1:541fd79:       throw new IllegalArgumentException("No interfaces.");
1:541fd79:     
1:541fd79:     for(Class iface : ifaces) {
1:541fd79:       if (!!!iface.isInterface())
1:541fd79:         throw new IllegalArgumentException("Not an interface " + iface + " in " + Arrays.toString(ifaces));
1:541fd79:     }
1:541fd79:     
1:541fd79:     return newProxyInstance(ifaces, null).getClass();
1:541fd79:   }
1:541fd79: 
1:541fd79:   public void init(Properties arg0) throws OpenEJBException {
1:541fd79:     //No op
1:541fd79:   }
1:541fd79: 
1:541fd79:   public boolean isProxyClass(Class arg0) {
1:541fd79:     return proxies.containsKey(arg0);
1:541fd79:   }
1:541fd79: 
1:541fd79:   public Object newProxyInstance(Class iface, InvocationHandler arg1)
1:541fd79:       throws IllegalArgumentException {
1:541fd79:     return newProxyInstance(new Class[] {iface}, arg1);
1:541fd79:   }
1:541fd79: 
1:541fd79:   public Object newProxyInstance(Class[] ifaces, InvocationHandler arg1)
1:541fd79:       throws IllegalArgumentException {
1:541fd79:     InvocationHandlerProxy ihProxy = new InvocationHandlerProxy(arg1);
1:541fd79:     List<Class<?>> classes = new ArrayList<Class<?>>();
1:541fd79:     for(Class<?> iface : ifaces)
1:541fd79:       classes.add(iface);
1:541fd79:     try {
1:541fd79:       Object inner = getManager().createDelegatingProxy(null, classes, ihProxy, null);
1:541fd79:       
1:541fd79:       Object proxy = getManager().createDelegatingInterceptingProxy(null, classes, 
1:541fd79:           new InnerProxyDelegator(inner), null, ihProxy);
1:541fd79:       proxies.put(proxy.getClass(), null);
1:541fd79:       return proxy;
1:541fd79:     } catch (UnableToProxyException e) {
1:541fd79:       throw new IllegalArgumentException(e);
1:541fd79:     }
1:541fd79:   }
1:541fd79: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:1168865
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         //This is a toString or similar, just use an interface we know
1:         //we can see and that doesn't have any methods on it :)
commit:4115fb2
/////////////////////////////////////////////////////////////////////////
1:     INSTANCE.set(null);
commit:541fd79
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.openejb.extender;
1: 
1: import java.io.Serializable;
1: import java.lang.reflect.Method;
1: import java.lang.reflect.Proxy;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Properties;
1: import java.util.WeakHashMap;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
0: import javax.resource.spi.IllegalStateException;
1: 
1: import org.apache.aries.proxy.InvocationListener;
1: import org.apache.aries.proxy.ProxyManager;
1: import org.apache.aries.proxy.UnableToProxyException;
1: import org.apache.aries.util.tracker.SingleServiceTracker;
1: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
1: import org.apache.openejb.OpenEJBException;
1: import org.apache.openejb.util.proxy.InvocationHandler;
1: import org.apache.openejb.util.proxy.ProxyFactory;
1: import org.osgi.framework.BundleContext;
1: 
1: public class AriesProxyService implements ProxyFactory, SingleServiceListener {
1: 
1:   private static class NoProxySupportException extends RuntimeException { 
1:     public NoProxySupportException() {
1:       super("No Proxy support is available");
1:     }
1:   }
1:   
1:   private static final class InvocationHandlerProxy implements Callable<Object>, InvocationListener {
1: 
1:     private final InvocationHandler handler;
1:     
1:     private final Map<Thread, Class<?>> invocations = new ConcurrentHashMap<Thread, Class<?>>();
1:     private final ConcurrentMap<Class<?>, Object> proxys = new ConcurrentHashMap<Class<?>, Object>();
1: 
1:     public InvocationHandlerProxy(InvocationHandler handler) {
1:       this.handler = handler;
1:     }
1: 
1:     public InvocationHandler getHandler() {
1:       return handler;
1:     }
1: 
1:     public void postInvoke(Object arg0, Object arg1, Method arg2, Object arg3)
1:         throws Throwable {
1:       // No op
1:     }
1: 
1:     public void postInvokeExceptionalReturn(Object arg0, Object arg1,
1:         Method arg2, Throwable arg3) throws Throwable {
1:       //No op
1:     }
1: 
1:     public Object preInvoke(Object arg0, Method arg1, Object[] arg2)
1:         throws Throwable {
1:       invocations.put(Thread.currentThread(), arg1.getDeclaringClass());
1:       return null;
1:     }
1: 
1:     public Object call() throws Exception {
1:       Class<?> c = invocations.remove(Thread.currentThread());
1:       if(c == null)
1:         throw new IllegalStateException("Unable to establish any context");
1:       else if (c.equals(Object.class)) {
1:         c = Serializable.class;
1:       }
1:       
1:       Object proxy = proxys.get(c);
1:       
1:       if(proxy == null) {
1:         Object tmp = Proxy.newProxyInstance(c.getClassLoader(), new Class[] {c}, handler);
1:         proxy = proxys.putIfAbsent(c, tmp);
1:         if(proxy == null)
1:           proxy = tmp;
1:       }
1:       return proxy;
1:     }
1:     
1:   }
1:   
1:   private static class InnerProxyDelegator implements Callable<Object> {
1: 
1:     private final Object delegate;
1:     
1:     public InnerProxyDelegator(Object delegate) {
1:       this.delegate = delegate;
1:     }
1:     
1:     public Object call() {
1:       return delegate;
1:     }
1:   }
1:   
1:   private final Map<Class<?>, Object> proxies = Collections.synchronizedMap(
1:       new WeakHashMap<Class<?>, Object>());
1:   
1:   private final SingleServiceTracker<ProxyManager> proxyTracker;
1:   
1:   private AriesProxyService(BundleContext ctx) {
1:     proxyTracker = new SingleServiceTracker<ProxyManager>(ctx, ProxyManager.class, this);
1:     proxyTracker.open();
1:   }
1:   
1:   private final AtomicReference<ProxyManager> manager = 
1:     new AtomicReference<ProxyManager>();
1:   
1:   private static final AtomicReference<AriesProxyService> INSTANCE = 
1:     new AtomicReference<AriesProxyService>();
1:   
1:   private final ProxyManager getManager() {
1:     ProxyManager pManager = manager.get();
1:     
1:     if(pManager == null) {
1:       throw new NoProxySupportException();
1:     }
1:     return pManager;
1:   }
1: 
1:   public static AriesProxyService get() {
1:     return INSTANCE.get();
1:   }
1:   
1:   public static void init(BundleContext ctx) {
1:     AriesProxyService oTM = new AriesProxyService(ctx);
1:     if(!!!INSTANCE.compareAndSet(null, oTM))
1:       oTM.destroy();
1:   }
1:   
1:   public void destroy() {
1:     proxyTracker.close();
1:   }
1:   
1:   public void serviceFound() {
1:     update();
1:   }
1: 
1:   public void serviceLost() {
1:     update();
1:   }
1: 
1:   public void serviceReplaced() {
1:     update();
1:   }
1:   
1:   private void update() {
1:     manager.set(proxyTracker.getService());
1:   }
1:   
1:   
1:   
1:   public InvocationHandler getInvocationHandler(Object arg0)
1:       throws IllegalArgumentException {
1:     Callable<Object> unwrapped = getManager().unwrap(arg0);
1:     
1:     if(unwrapped instanceof InnerProxyDelegator) {
1:       unwrapped = getManager().unwrap(((InnerProxyDelegator)unwrapped).call());
1:     }
1:     
1:     if(unwrapped instanceof InvocationHandlerProxy) {
1:       return ((InvocationHandlerProxy) unwrapped).getHandler();
1:     }
1:     return null;
1:   }
1: 
1:   public Class getProxyClass(Class iface) throws IllegalArgumentException {
1:     if(iface == null || !!!iface.isInterface())
1:       throw new IllegalArgumentException("Not an interface " + iface);
1:     return newProxyInstance(iface, null).getClass();
1:   }
1: 
1:   public Class getProxyClass(Class[] ifaces) throws IllegalArgumentException {
1:     if(ifaces == null || ifaces.length == 0)
1:       throw new IllegalArgumentException("No interfaces.");
1:     
1:     for(Class iface : ifaces) {
1:       if (!!!iface.isInterface())
1:         throw new IllegalArgumentException("Not an interface " + iface + " in " + Arrays.toString(ifaces));
1:     }
1:     
1:     return newProxyInstance(ifaces, null).getClass();
1:   }
1: 
1:   public void init(Properties arg0) throws OpenEJBException {
1:     //No op
1:   }
1: 
1:   public boolean isProxyClass(Class arg0) {
1:     return proxies.containsKey(arg0);
1:   }
1: 
1:   public Object newProxyInstance(Class iface, InvocationHandler arg1)
1:       throws IllegalArgumentException {
1:     return newProxyInstance(new Class[] {iface}, arg1);
1:   }
1: 
1:   public Object newProxyInstance(Class[] ifaces, InvocationHandler arg1)
1:       throws IllegalArgumentException {
1:     InvocationHandlerProxy ihProxy = new InvocationHandlerProxy(arg1);
1:     List<Class<?>> classes = new ArrayList<Class<?>>();
1:     for(Class<?> iface : ifaces)
1:       classes.add(iface);
1:     try {
1:       Object inner = getManager().createDelegatingProxy(null, classes, ihProxy, null);
1:       
1:       Object proxy = getManager().createDelegatingInterceptingProxy(null, classes, 
1:           new InnerProxyDelegator(inner), null, ihProxy);
1:       proxies.put(proxy.getClass(), null);
1:       return proxy;
1:     } catch (UnableToProxyException e) {
1:       throw new IllegalArgumentException(e);
1:     }
1:   }
1: }
============================================================================