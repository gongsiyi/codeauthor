1:ad877b6: /*
1:ad877b6:  * Licensed to the Apache Software Foundation (ASF) under one
1:ad877b6:  * or more contributor license agreements.  See the NOTICE file
1:ad877b6:  * distributed with this work for additional information
1:ad877b6:  * regarding copyright ownership.  The ASF licenses this file
1:ad877b6:  * to you under the Apache License, Version 2.0 (the
1:ad877b6:  * "License"); you may not use this file except in compliance
1:ad877b6:  * with the License.  You may obtain a copy of the License at
1:ad877b6:  *
1:ad877b6:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ad877b6:  *
1:ad877b6:  * Unless required by applicable law or agreed to in writing,
1:ad877b6:  * software distributed under the License is distributed on an
1:ad877b6:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:ad877b6:  * KIND, either express or implied.  See the License for the
1:ad877b6:  * specific language governing permissions and limitations
1:ad877b6:  * under the License.
1:ad877b6:  */
1:ad877b6: package org.apache.aries.subsystem.itests.util;
1:ad877b6: 
1:ad877b6: import java.util.Collections;
1:ad877b6: import java.util.HashMap;
1:ad877b6: import java.util.Map;
1:ad877b6: 
1:ad877b6: import org.apache.aries.application.Content;
1:ad877b6: import org.apache.aries.util.VersionRange;
1:ad877b6: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:ad877b6: import org.osgi.framework.Constants;
1:ad877b6: import org.osgi.framework.Version;
1:ad877b6: 
1:ad877b6: 
1:ad877b6: /**
1:ad877b6:  * Implementation of Content, copied from org.apache.aries.application.utils folder with 
1:ad877b6:  * intention to common this out to a common util folder
1:ad877b6:  *
1:ad877b6:  */
1:ad877b6: public final class ContentImpl implements Content
1:ad877b6: {
1:ad877b6:   private String contentName;
1:ad877b6:   protected Map<String, String> attributes;
1:ad877b6:   private Map<String, String> directives;
1:ad877b6:   private Map<String, String> nameValueMap;
1:ad877b6:   
1:ad877b6:   /**
1:ad877b6:    * 
1:ad877b6:    * @param content  Application-Content, Import-Package content
1:ad877b6:    */
1:ad877b6:   public ContentImpl(String content) {
1:ad877b6:     Map<String, Map<String, String>> appContentsMap = ManifestHeaderProcessor.parseImportString(content);
1:ad877b6:     if (appContentsMap.size() != 1) {
1:ad877b6:       throw new IllegalArgumentException("Invalid content string " + content);
1:ad877b6:     }
1:ad877b6:     for (Map.Entry<String, Map<String, String>> entry : appContentsMap.entrySet()) {
1:ad877b6:       this.contentName = entry.getKey();
1:ad877b6:       this.nameValueMap= entry.getValue();
1:ad877b6:       setup();
1:ad877b6:       break;
1:ad877b6:     }
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   public ContentImpl (String bundleSymbolicName, Version version) { 
1:ad877b6:     this.contentName = bundleSymbolicName;
1:ad877b6:     this.nameValueMap = new HashMap<String, String>();
1:ad877b6:     nameValueMap.put("version", version.toString());
1:ad877b6:     setup();
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   /**
1:ad877b6:    * 
1:ad877b6:    * @param contentName  
1:ad877b6:    * @param nameValueMap
1:ad877b6:    */
1:ad877b6:   public ContentImpl(String contentName, Map<String, String> nameValueMap) {
1:ad877b6:     this.contentName = contentName;
1:ad877b6:     this.nameValueMap= nameValueMap;
1:ad877b6:     setup();
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   public String getContentName() {
1:ad877b6:     return this.contentName;
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   public Map<String, String> getAttributes() {
1:ad877b6:     return Collections.unmodifiableMap(this.attributes);
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   public Map<String, String> getDirectives() {
1:ad877b6:     return Collections.unmodifiableMap(this.directives);
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   public String getAttribute(String key) {
1:ad877b6:     String toReturn = this.attributes.get(key);
1:ad877b6:     return toReturn;
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   /**
1:ad877b6:    * add key value to the attributes map
1:ad877b6:    * @param key
1:ad877b6:    * @param value
1:ad877b6:    */
1:ad877b6:   public void addAttribute(String key, String value) {
1:ad877b6:     this.attributes.put(key, value);
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   public String getDirective(String key) {
1:ad877b6:     String toReturn = this.directives.get(key);
1:ad877b6:     return toReturn;
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   public Map<String, String> getNameValueMap() {
1:ad877b6:     Map<String, String> nvm = new HashMap<String, String>();
1:ad877b6:     for (String key : this.nameValueMap.keySet()) {
1:ad877b6:       nvm.put(key, this.nameValueMap.get(key));
1:ad877b6:     }
1:ad877b6:     return nvm;
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   /**
1:ad877b6:    * add key value to the directives map
1:ad877b6:    * @param key
1:ad877b6:    * @param value
1:ad877b6:    */
1:ad877b6:   public void addDirective(String key, String value) {
1:ad877b6:     this.directives.put(key, value);
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   public VersionRange getVersion() {
1:ad877b6:     VersionRange vi = null;
1:ad877b6:     if (this.attributes.get(Constants.VERSION_ATTRIBUTE) != null 
1:ad877b6:         && this.attributes.get(Constants.VERSION_ATTRIBUTE).length() > 0) {
1:ad877b6:       vi = ManifestHeaderProcessor.parseVersionRange(this.attributes.get(Constants.VERSION_ATTRIBUTE));
1:ad877b6:     } else {
1:ad877b6:       // what if version is not specified?  let's interpret it as 0.0.0 
1:ad877b6:       vi = ManifestHeaderProcessor.parseVersionRange("0.0.0");
1:ad877b6:     }
1:ad877b6:     return vi;
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   @Override
1:ad877b6:   public String toString()
1:ad877b6:   {
1:ad877b6:     return this.contentName + ";" + this.nameValueMap.toString();
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   @Override
1:ad877b6:   public boolean equals(Object other)
1:ad877b6:   {
1:ad877b6:     if (other == this) return true;
1:ad877b6:     if (other == null) return false;
1:ad877b6:     
1:ad877b6:     if (other instanceof ContentImpl) {
1:ad877b6:       ContentImpl otherContent = (ContentImpl)other;
1:ad877b6:       
1:ad877b6:       Map<String,String> attributesWithoutVersion = attributes;
1:ad877b6:       
1:ad877b6:       if (attributes.containsKey("version")) {
1:ad877b6:         attributesWithoutVersion = new HashMap<String, String>(attributes);
1:ad877b6:         attributesWithoutVersion.remove("version");
1:ad877b6:       }
1:ad877b6:       
1:ad877b6:       Map<String, String> otherAttributesWithoutVersion = otherContent.attributes;
1:ad877b6:       
1:ad877b6:       if (otherContent.attributes.containsKey("version")) {
1:ad877b6:         otherAttributesWithoutVersion = new HashMap<String, String>(otherContent.attributes);
1:ad877b6:         otherAttributesWithoutVersion.remove("version");
1:ad877b6:       }
1:ad877b6:       
1:ad877b6:       return contentName.equals(otherContent.contentName) && 
1:ad877b6:              attributesWithoutVersion.equals(otherAttributesWithoutVersion) &&
1:ad877b6:              directives.equals(otherContent.directives) &&
1:ad877b6:              getVersion().equals(otherContent.getVersion());
1:ad877b6:     }
1:ad877b6:     
1:ad877b6:     return false;
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   @Override
1:ad877b6:   public int hashCode()
1:ad877b6:   {
1:ad877b6:     return contentName.hashCode();
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   /**
1:ad877b6:    * set up directives and attributes
1:ad877b6:    */
1:ad877b6:   protected void setup() {
1:ad877b6:     this.attributes = new HashMap<String, String>();
1:ad877b6:     this.directives = new HashMap<String, String>();
1:ad877b6:     
1:ad877b6:     for (String key : this.nameValueMap.keySet()) {
1:ad877b6:       if (key.endsWith(":")) {
1:ad877b6:         this.directives.put(key.substring(0, key.length() - 1), this.nameValueMap.get(key));
1:ad877b6:       } else {
1:ad877b6:         this.attributes.put(key, this.nameValueMap.get(key));
1:ad877b6:       }
1:ad877b6:     }
1:ad877b6:   }
1:ad877b6: }
1:ad877b6: 
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:ad877b6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.util;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.Content;
1: import org.apache.aries.util.VersionRange;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: 
1: 
1: /**
1:  * Implementation of Content, copied from org.apache.aries.application.utils folder with 
1:  * intention to common this out to a common util folder
1:  *
1:  */
1: public final class ContentImpl implements Content
1: {
1:   private String contentName;
1:   protected Map<String, String> attributes;
1:   private Map<String, String> directives;
1:   private Map<String, String> nameValueMap;
1:   
1:   /**
1:    * 
1:    * @param content  Application-Content, Import-Package content
1:    */
1:   public ContentImpl(String content) {
1:     Map<String, Map<String, String>> appContentsMap = ManifestHeaderProcessor.parseImportString(content);
1:     if (appContentsMap.size() != 1) {
1:       throw new IllegalArgumentException("Invalid content string " + content);
1:     }
1:     for (Map.Entry<String, Map<String, String>> entry : appContentsMap.entrySet()) {
1:       this.contentName = entry.getKey();
1:       this.nameValueMap= entry.getValue();
1:       setup();
1:       break;
1:     }
1:   }
1:   
1:   public ContentImpl (String bundleSymbolicName, Version version) { 
1:     this.contentName = bundleSymbolicName;
1:     this.nameValueMap = new HashMap<String, String>();
1:     nameValueMap.put("version", version.toString());
1:     setup();
1:   }
1:   
1:   /**
1:    * 
1:    * @param contentName  
1:    * @param nameValueMap
1:    */
1:   public ContentImpl(String contentName, Map<String, String> nameValueMap) {
1:     this.contentName = contentName;
1:     this.nameValueMap= nameValueMap;
1:     setup();
1:   }
1:   
1:   public String getContentName() {
1:     return this.contentName;
1:   }
1:   
1:   public Map<String, String> getAttributes() {
1:     return Collections.unmodifiableMap(this.attributes);
1:   }
1:   
1:   public Map<String, String> getDirectives() {
1:     return Collections.unmodifiableMap(this.directives);
1:   }
1:   
1:   public String getAttribute(String key) {
1:     String toReturn = this.attributes.get(key);
1:     return toReturn;
1:   }
1:   
1:   /**
1:    * add key value to the attributes map
1:    * @param key
1:    * @param value
1:    */
1:   public void addAttribute(String key, String value) {
1:     this.attributes.put(key, value);
1:   }
1:   
1:   public String getDirective(String key) {
1:     String toReturn = this.directives.get(key);
1:     return toReturn;
1:   }
1:   
1:   public Map<String, String> getNameValueMap() {
1:     Map<String, String> nvm = new HashMap<String, String>();
1:     for (String key : this.nameValueMap.keySet()) {
1:       nvm.put(key, this.nameValueMap.get(key));
1:     }
1:     return nvm;
1:   }
1:   
1:   /**
1:    * add key value to the directives map
1:    * @param key
1:    * @param value
1:    */
1:   public void addDirective(String key, String value) {
1:     this.directives.put(key, value);
1:   }
1:   
1:   public VersionRange getVersion() {
1:     VersionRange vi = null;
1:     if (this.attributes.get(Constants.VERSION_ATTRIBUTE) != null 
1:         && this.attributes.get(Constants.VERSION_ATTRIBUTE).length() > 0) {
1:       vi = ManifestHeaderProcessor.parseVersionRange(this.attributes.get(Constants.VERSION_ATTRIBUTE));
1:     } else {
1:       // what if version is not specified?  let's interpret it as 0.0.0 
1:       vi = ManifestHeaderProcessor.parseVersionRange("0.0.0");
1:     }
1:     return vi;
1:   }
1:   
1:   @Override
1:   public String toString()
1:   {
1:     return this.contentName + ";" + this.nameValueMap.toString();
1:   }
1:   
1:   @Override
1:   public boolean equals(Object other)
1:   {
1:     if (other == this) return true;
1:     if (other == null) return false;
1:     
1:     if (other instanceof ContentImpl) {
1:       ContentImpl otherContent = (ContentImpl)other;
1:       
1:       Map<String,String> attributesWithoutVersion = attributes;
1:       
1:       if (attributes.containsKey("version")) {
1:         attributesWithoutVersion = new HashMap<String, String>(attributes);
1:         attributesWithoutVersion.remove("version");
1:       }
1:       
1:       Map<String, String> otherAttributesWithoutVersion = otherContent.attributes;
1:       
1:       if (otherContent.attributes.containsKey("version")) {
1:         otherAttributesWithoutVersion = new HashMap<String, String>(otherContent.attributes);
1:         otherAttributesWithoutVersion.remove("version");
1:       }
1:       
1:       return contentName.equals(otherContent.contentName) && 
1:              attributesWithoutVersion.equals(otherAttributesWithoutVersion) &&
1:              directives.equals(otherContent.directives) &&
1:              getVersion().equals(otherContent.getVersion());
1:     }
1:     
1:     return false;
1:   }
1:   
1:   @Override
1:   public int hashCode()
1:   {
1:     return contentName.hashCode();
1:   }
1:   
1:   /**
1:    * set up directives and attributes
1:    */
1:   protected void setup() {
1:     this.attributes = new HashMap<String, String>();
1:     this.directives = new HashMap<String, String>();
1:     
1:     for (String key : this.nameValueMap.keySet()) {
1:       if (key.endsWith(":")) {
1:         this.directives.put(key.substring(0, key.length() - 1), this.nameValueMap.get(key));
1:       } else {
1:         this.attributes.put(key, this.nameValueMap.get(key));
1:       }
1:     }
1:   }
1: }
1: 
============================================================================