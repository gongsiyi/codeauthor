1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
2:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.beans;
3:628add4: 
1:628add4: import java.io.Serializable;
1:628add4: import java.math.BigDecimal;
1:628add4: import java.util.Date;
1:628add4: 
1:56a6860: import org.apache.aries.samples.ariestrader.util.Log;
1:56a6860: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
1:628add4: 
1:628add4: 
1:628add4: public class HoldingDataBeanImpl implements HoldingDataBean, Serializable {
1:628add4: 
1:628add4:     /* persistent/relationship fields */
1:628add4: 
1:628add4:     
1:628add4:     private Integer holdingID;              /* holdingID */
1:628add4:     
1:628add4:     
1:628add4:     private double quantity;                /* quantity */
1:628add4:     
1:628add4:     
1:628add4:     private BigDecimal purchasePrice;       /* purchasePrice */
1:628add4:     
1:628add4:    
1:628add4:     private Date purchaseDate;              /* purchaseDate */
1:628add4:     
1:628add4:     
1:628add4:     private String quoteID;                 /* Holding(*)  ---> Quote(1) */
1:628add4:     
1:628add4:     
1:628add4:     private AccountDataBean account;
1:628add4:     
1:628add4:     
1:628add4:     private QuoteDataBean quote;
1:628add4: 
1:628add4:     public HoldingDataBeanImpl() {
2:628add4:     }
1:628add4: 
1:628add4:     public HoldingDataBeanImpl(Integer holdingID,
1:628add4:             double quantity,
1:628add4:             BigDecimal purchasePrice,
1:628add4:             Date purchaseDate,
1:628add4:             String quoteID) {
1:628add4:         setHoldingID(holdingID);
1:628add4:         setQuantity(quantity);
1:628add4:         setPurchasePrice(purchasePrice);
1:628add4:         setPurchaseDate(purchaseDate);
1:628add4:         setQuoteID(quoteID);
1:628add4:     }
1:628add4: 
1:628add4:     public HoldingDataBeanImpl(double quantity,
1:628add4:             BigDecimal purchasePrice,
1:628add4:             Date purchaseDate,
1:628add4:             AccountDataBean account,
1:628add4:             QuoteDataBean quote) {
1:628add4:         setQuantity(quantity);
1:628add4:         setPurchasePrice(purchasePrice);
1:628add4:         setPurchaseDate(purchaseDate);
1:628add4:         setAccount(account);
1:628add4:         setQuote(quote);
1:628add4:     }
1:628add4: 
1:628add4:     public static HoldingDataBean getRandomInstance() {
1:628add4:         return new HoldingDataBeanImpl(
1:628add4:                 new Integer(TradeConfig.rndInt(100000)),     //holdingID
1:628add4:                 TradeConfig.rndQuantity(),                     //quantity
1:628add4:                 TradeConfig.rndBigDecimal(1000.0f),             //purchasePrice
1:628add4:                 new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), //purchaseDate
1:628add4:                 TradeConfig.rndSymbol()                        // symbol
1:628add4:         );
1:628add4:     }
1:628add4: 
1:628add4:     public String toString() {
1:628add4:         return "\n\tHolding Data for holding: " + getHoldingID()
1:628add4:                 + "\n\t\t      quantity:" + getQuantity()
1:628add4:                 + "\n\t\t purchasePrice:" + getPurchasePrice()
1:628add4:                 + "\n\t\t  purchaseDate:" + getPurchaseDate()
1:628add4:                 + "\n\t\t       quoteID:" + getQuoteID()
1:628add4:                 ;
1:628add4:     }
1:628add4: 
1:628add4:     public String toHTML() {
1:628add4:         return "<BR>Holding Data for holding: " + getHoldingID() + "</B>"
1:628add4:                 + "<LI>      quantity:" + getQuantity() + "</LI>"
1:628add4:                 + "<LI> purchasePrice:" + getPurchasePrice() + "</LI>"
1:628add4:                 + "<LI>  purchaseDate:" + getPurchaseDate() + "</LI>"
1:628add4:                 + "<LI>       quoteID:" + getQuoteID() + "</LI>"
1:628add4:                 ;
1:628add4:     }
1:628add4: 
1:628add4:     public void print() {
1:628add4:         Log.log(this.toString());
1:628add4:     }
1:628add4: 
1:628add4:     public Integer getHoldingID() {
1:628add4:         return holdingID;
1:628add4:     }
1:628add4: 
1:628add4:     public void setHoldingID(Integer holdingID) {
1:628add4:         this.holdingID = holdingID;
1:628add4:     }
1:628add4: 
1:628add4:     public double getQuantity() {
1:628add4:         return quantity;
1:628add4:     }
1:628add4: 
1:628add4:     public void setQuantity(double quantity) {
1:628add4:         this.quantity = quantity;
1:628add4:     }
1:628add4: 
1:628add4:     public BigDecimal getPurchasePrice() {
1:628add4:         return purchasePrice;
1:628add4:     }
1:628add4: 
1:628add4:     public void setPurchasePrice(BigDecimal purchasePrice) {
1:628add4:         this.purchasePrice = purchasePrice;
1:628add4:     }
1:628add4: 
1:628add4:     public Date getPurchaseDate() {
1:628add4:         return purchaseDate;
1:628add4:     }
1:628add4: 
1:628add4:     public void setPurchaseDate(Date purchaseDate) {
1:628add4:         this.purchaseDate = purchaseDate;
1:628add4:     }
1:628add4: 
1:628add4:     public String getQuoteID() {
1:628add4:         if (quote != null) {
1:628add4:             return quote.getSymbol();
1:628add4:         }
1:628add4:         return quoteID;
1:628add4:     }
1:628add4: 
1:628add4:     public void setQuoteID(String quoteID) {
1:628add4:         this.quoteID = quoteID;
1:628add4:     }
1:628add4: 
1:628add4:     public AccountDataBean getAccount() {
1:628add4:         return account;
1:628add4:     }
1:628add4: 
1:628add4:     public void setAccount(AccountDataBean account) {
1:628add4:         this.account = account;
1:628add4:     }
1:628add4:     
1:628add4:     public QuoteDataBean getQuote() {
1:628add4:         return quote;
1:628add4:     }
1:628add4: 
1:628add4:     public void setQuote(QuoteDataBean quote) {
1:628add4:         this.quote = quote;
1:628add4:     }
1:628add4:     
1:628add4:     @Override
1:628add4:     public int hashCode() {
1:628add4:         int hash = 0;
1:628add4:         hash += (this.holdingID != null ? this.holdingID.hashCode() : 0);
1:628add4:         return hash;
1:628add4:     }
1:628add4: 
1:628add4:     @Override
1:628add4:     public boolean equals(Object object) {
1:628add4:         // TODO: Warning - this method won't work in the case the id fields are not set
1:628add4:         if (!(object instanceof HoldingDataBeanImpl)) {
1:628add4:             return false;
1:628add4:         }
1:628add4:         HoldingDataBeanImpl other = (HoldingDataBeanImpl) object;
1:628add4:         if (this.holdingID != other.holdingID && (this.holdingID == null || !this.holdingID.equals(other.holdingID))) return false;
1:628add4:         return true;
1:628add4:     }
1:628add4: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.beans;
1: import org.apache.aries.samples.ariestrader.util.Log;
1: import org.apache.aries.samples.ariestrader.util.TradeConfig;
0: import org.apache.aries.samples.ariestrader.persistence.api.AccountDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.HoldingDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.QuoteDataBean;
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.beans;
0: import org.apache.aries.samples.daytrader.util.Log;
0: import org.apache.aries.samples.daytrader.util.TradeConfig;
0: import org.apache.aries.samples.daytrader.persistence.api.AccountDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.HoldingDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.QuoteDataBean;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.beans;
1: 
1: import java.io.Serializable;
1: import java.math.BigDecimal;
1: import java.util.Date;
1: 
0: import org.apache.geronimo.samples.daytrader.util.Log;
0: import org.apache.geronimo.samples.daytrader.util.TradeConfig;
0: import org.apache.geronimo.samples.daytrader.persistence.api.AccountDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.HoldingDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.QuoteDataBean;
1: 
1: 
1: public class HoldingDataBeanImpl implements HoldingDataBean, Serializable {
1: 
1:     /* persistent/relationship fields */
1: 
1:     
1:     private Integer holdingID;              /* holdingID */
1:     
1:     
1:     private double quantity;                /* quantity */
1:     
1:     
1:     private BigDecimal purchasePrice;       /* purchasePrice */
1:     
1:    
1:     private Date purchaseDate;              /* purchaseDate */
1:     
1:     
1:     private String quoteID;                 /* Holding(*)  ---> Quote(1) */
1:     
1:     
1:     private AccountDataBean account;
1:     
1:     
1:     private QuoteDataBean quote;
1: 
0: //    @Version
0: //    private Integer optLock;
1: 
1:     public HoldingDataBeanImpl() {
1:     }
1: 
1:     public HoldingDataBeanImpl(Integer holdingID,
1:             double quantity,
1:             BigDecimal purchasePrice,
1:             Date purchaseDate,
1:             String quoteID) {
1:         setHoldingID(holdingID);
1:         setQuantity(quantity);
1:         setPurchasePrice(purchasePrice);
1:         setPurchaseDate(purchaseDate);
1:         setQuoteID(quoteID);
1:     }
1: 
1:     public HoldingDataBeanImpl(double quantity,
1:             BigDecimal purchasePrice,
1:             Date purchaseDate,
1:             AccountDataBean account,
1:             QuoteDataBean quote) {
1:         setQuantity(quantity);
1:         setPurchasePrice(purchasePrice);
1:         setPurchaseDate(purchaseDate);
1:         setAccount(account);
1:         setQuote(quote);
1:     }
1: 
1:     public static HoldingDataBean getRandomInstance() {
1:         return new HoldingDataBeanImpl(
1:                 new Integer(TradeConfig.rndInt(100000)),     //holdingID
1:                 TradeConfig.rndQuantity(),                     //quantity
1:                 TradeConfig.rndBigDecimal(1000.0f),             //purchasePrice
1:                 new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), //purchaseDate
1:                 TradeConfig.rndSymbol()                        // symbol
1:         );
1:     }
1: 
1:     public String toString() {
1:         return "\n\tHolding Data for holding: " + getHoldingID()
1:                 + "\n\t\t      quantity:" + getQuantity()
1:                 + "\n\t\t purchasePrice:" + getPurchasePrice()
1:                 + "\n\t\t  purchaseDate:" + getPurchaseDate()
1:                 + "\n\t\t       quoteID:" + getQuoteID()
1:                 ;
1:     }
1: 
1:     public String toHTML() {
1:         return "<BR>Holding Data for holding: " + getHoldingID() + "</B>"
1:                 + "<LI>      quantity:" + getQuantity() + "</LI>"
1:                 + "<LI> purchasePrice:" + getPurchasePrice() + "</LI>"
1:                 + "<LI>  purchaseDate:" + getPurchaseDate() + "</LI>"
1:                 + "<LI>       quoteID:" + getQuoteID() + "</LI>"
1:                 ;
1:     }
1: 
1:     public void print() {
1:         Log.log(this.toString());
1:     }
1: 
1:     public Integer getHoldingID() {
1:         return holdingID;
1:     }
1: 
1:     public void setHoldingID(Integer holdingID) {
1:         this.holdingID = holdingID;
1:     }
1: 
1:     public double getQuantity() {
1:         return quantity;
1:     }
1: 
1:     public void setQuantity(double quantity) {
1:         this.quantity = quantity;
1:     }
1: 
1:     public BigDecimal getPurchasePrice() {
1:         return purchasePrice;
1:     }
1: 
1:     public void setPurchasePrice(BigDecimal purchasePrice) {
1:         this.purchasePrice = purchasePrice;
1:     }
1: 
1:     public Date getPurchaseDate() {
1:         return purchaseDate;
1:     }
1: 
1:     public void setPurchaseDate(Date purchaseDate) {
1:         this.purchaseDate = purchaseDate;
1:     }
1: 
1:     public String getQuoteID() {
1:         if (quote != null) {
1:             return quote.getSymbol();
1:         }
1:         return quoteID;
1:     }
1: 
1:     public void setQuoteID(String quoteID) {
1:         this.quoteID = quoteID;
1:     }
1: 
1:     public AccountDataBean getAccount() {
1:         return account;
1:     }
1: 
1:     public void setAccount(AccountDataBean account) {
1:         this.account = account;
1:     }
1: 
0:     /* Disabled for D185273
0:      public String getSymbol() {
0:          return getQuoteID();
1:      }
1:      */
1:     
1:     public QuoteDataBean getQuote() {
1:         return quote;
1:     }
1: 
1:     public void setQuote(QuoteDataBean quote) {
1:         this.quote = quote;
1:     }
1:     
1:     @Override
1:     public int hashCode() {
1:         int hash = 0;
1:         hash += (this.holdingID != null ? this.holdingID.hashCode() : 0);
1:         return hash;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object object) {
1:         // TODO: Warning - this method won't work in the case the id fields are not set
1:         if (!(object instanceof HoldingDataBeanImpl)) {
1:             return false;
1:         }
1:         HoldingDataBeanImpl other = (HoldingDataBeanImpl) object;
1:         if (this.holdingID != other.holdingID && (this.holdingID == null || !this.holdingID.equals(other.holdingID))) return false;
1:         return true;
1:     }
1: }
============================================================================