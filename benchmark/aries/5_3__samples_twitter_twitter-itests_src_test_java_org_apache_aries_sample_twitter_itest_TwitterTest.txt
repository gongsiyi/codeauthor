1:f7d1169: /*
1:f7d1169:  * Licensed to the Apache Software Foundation (ASF) under one
1:f7d1169:  * or more contributor license agreements.  See the NOTICE file
1:f7d1169:  * distributed with this work for additional information
1:f7d1169:  * regarding copyright ownership.  The ASF licenses this file
1:f7d1169:  * to you under the Apache License, Version 2.0 (the
1:f7d1169:  * "License"); you may not use this file except in compliance
1:f7d1169:  * with the License.  You may obtain a copy of the License at
1:f7d1169:  *
1:f7d1169:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f7d1169:  *
1:f7d1169:  * Unless required by applicable law or agreed to in writing,
1:f7d1169:  * software distributed under the License is distributed on an
1:f7d1169:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f7d1169:  * KIND, either express or implied.  See the License for the
1:f7d1169:  * specific language governing permissions and limitations
1:f7d1169:  * under the License.
2:f7d1169:  */
1:f7d1169: package org.apache.aries.sample.twitter.itest;
1:5c8a2ad: 
1:5c8a2ad: import static org.junit.Assert.assertEquals;
1:f7d1169: import static org.junit.Assert.assertTrue;
1:5c8a2ad: import static org.ops4j.pax.exam.CoreOptions.composite;
1:5c8a2ad: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:5c8a2ad: import static org.ops4j.pax.exam.CoreOptions.maven;
1:5c8a2ad: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:f7d1169: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:5c8a2ad: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1:5c8a2ad: import static org.ops4j.pax.exam.CoreOptions.when;
7:f7d1169: 
1:f7d1169: import java.io.BufferedReader;
1:f7d1169: import java.io.File;
1:f7d1169: import java.io.FileWriter;
1:5c8a2ad: import java.io.IOException;
1:5c8a2ad: import java.io.InputStream;
1:f7d1169: import java.io.InputStreamReader;
1:5c8a2ad: import java.net.MalformedURLException;
1:f7d1169: import java.net.URL;
1:f7d1169: import java.util.ArrayList;
1:f7d1169: import java.util.Collection;
1:f7d1169: import java.util.List;
1:f7d1169: 
1:5c8a2ad: import javax.inject.Inject;
1:5c8a2ad: 
1:f7d1169: import org.apache.aries.application.DeploymentContent;
1:f7d1169: import org.apache.aries.application.DeploymentMetadata;
1:f7d1169: import org.apache.aries.application.management.AriesApplication;
1:f7d1169: import org.apache.aries.application.management.AriesApplicationContext;
1:f7d1169: import org.apache.aries.application.management.AriesApplicationManager;
1:f7d1169: import org.apache.aries.application.utils.AppConstants;
1:5c8a2ad: import org.apache.aries.itest.AbstractIntegrationTest;
1:f7d1169: import org.apache.felix.bundlerepository.Repository;
1:f7d1169: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:f7d1169: import org.junit.Test;
1:f7d1169: import org.junit.runner.RunWith;
1:5c8a2ad: import org.ops4j.pax.exam.Configuration;
1:5c8a2ad: import org.ops4j.pax.exam.CoreOptions;
1:f7d1169: import org.ops4j.pax.exam.Option;
1:5c8a2ad: import org.ops4j.pax.exam.junit.PaxExam;
1:5c8a2ad: import org.ops4j.pax.exam.options.MavenArtifactUrlReference;
1:5c8a2ad: 
1:5c8a2ad: @RunWith(PaxExam.class)
1:f7d1169: public class TwitterTest extends AbstractIntegrationTest 
2:f7d1169: {
1:5c8a2ad: 	public static final String CORE_BUNDLE_BY_VALUE = "core.bundle.by.value";
1:5c8a2ad: 	public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
1:5c8a2ad: 	public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.value";
1:5c8a2ad: 	public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.reference";
1:5c8a2ad: 	public static final String USE_BUNDLE_BY_REFERENCE = "use.bundle.by.reference";
1:5c8a2ad: 	public static final String REPO_BUNDLE = "aries.bundle1";
1:5c8a2ad: 	public static final String HELLO_WORLD_CLIENT_BUNDLE="hello.world.client.bundle";
1:5c8a2ad: 	public static final String HELLO_WORLD_SERVICE_BUNDLE1="hello.world.service.bundle1";
1:5c8a2ad: 	public static final String HELLO_WORLD_SERVICE_BUNDLE2="hello.world.service.bundle2";
1:f7d1169: 
1:5c8a2ad: 	@Inject
1:5c8a2ad: 	RepositoryAdmin repositoryAdmin;
1:f7d1169: 
1:5c8a2ad: 	@Inject
1:5c8a2ad: 	AriesApplicationManager manager;
1:f7d1169: 
1:5c8a2ad: 	/**
1:5c8a2ad: 	 * Test for ARIES-461
1:5c8a2ad: 	 * Application that bring in dependency bundles from a bundle repository doesn't deploy
1:5c8a2ad: 	 * 
1:5c8a2ad: 	 * @throws Exception
1:5c8a2ad: 	 */
1:5c8a2ad: 	@Test
1:5c8a2ad: 	public void testTwitter() throws Exception
1:5c8a2ad: 	{
1:5c8a2ad: 		// provision against the local runtime
1:5c8a2ad: 		System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
1:f7d1169: 
1:5c8a2ad: 		deleteRepos();
1:5c8a2ad: 
1:5c8a2ad: 		MavenArtifactUrlReference twitterEbaUrl = maven("org.apache.aries.samples.twitter", "org.apache.aries.samples.twitter.eba").versionAsInProject().type("eba");
1:5c8a2ad: 		MavenArtifactUrlReference twitterCommonLangJar = maven("commons-lang", "commons-lang").versionAsInProject();
1:5c8a2ad: 		MavenArtifactUrlReference twitterJar = maven("org.apache.aries.samples.twitter", "org.apache.aries.samples.twitter.twitter4j").versionAsInProject();
1:5c8a2ad: 
1:5c8a2ad: 		// add the repository xml to the repository admin
1:5c8a2ad: 		String repositoryXML = getRepoContent("/obr/twitter/TwitterRepository.xml");
1:5c8a2ad: 		// replace the jar file url with the real url related to the environment
1:5c8a2ad: 		String repo = repositoryXML
1:5c8a2ad: 				.replaceAll("commons.lang.location", twitterCommonLangJar.getURL())
1:5c8a2ad: 				.replaceAll("twitter4j.location", twitterJar.getURL());
1:5c8a2ad: 
1:5c8a2ad: 		URL url = getRepoUrl(repo);
1:5c8a2ad: 		repositoryAdmin.addRepository(url);
1:5c8a2ad: 
1:5c8a2ad: 		AriesApplication app = manager.createApplication(new URL(twitterEbaUrl.getURL()));
1:5c8a2ad: 		app = manager.resolve(app);
1:5c8a2ad: 		DeploymentMetadata depMeta = app.getDeploymentMetadata();
1:5c8a2ad: 		List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
1:5c8a2ad: 		Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
1:5c8a2ad: 		Collection<DeploymentContent> appContent = depMeta.getApplicationDeploymentContents();
1:5c8a2ad: 		// We cannot be sure whether there are two or three provision bundles pulled in by Felix OBR as there is an outstanding defect
1:5c8a2ad: 		// https://issues.apache.org/jira/browse/FELIX-2672
1:5c8a2ad: 		// The workaround is to check we get the two bundles we are looking for, instead of insisting on just having two bundles.
1:5c8a2ad: 
1:5c8a2ad: 		List<String> provisionBundleSymbolicNames = new ArrayList<String>();
1:5c8a2ad: 		for (DeploymentContent dep : provision) {
1:5c8a2ad: 			provisionBundleSymbolicNames.add(dep.getContentName());
1:5c8a2ad: 		}
1:5c8a2ad: 		String provision_bundle1 = "org.apache.commons.lang";
1:5c8a2ad: 		String provision_bundle2 = "twitter4j";
1:5c8a2ad: 		assertTrue("Bundle " + provision_bundle1 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle1));
1:5c8a2ad: 		assertTrue("Bundle " + provision_bundle2 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle2));
1:5c8a2ad: 		assertEquals(useBundles.toString(), 0, useBundles.size());
1:5c8a2ad: 		assertEquals(appContent.toString(), 1, appContent.size());
1:5c8a2ad: 		AriesApplicationContext ctx = manager.install(app);
1:5c8a2ad: 		ctx.start();
1:5c8a2ad: 	}
1:5c8a2ad: 
1:5c8a2ad: 	private URL getRepoUrl(String repo) throws IOException,
1:5c8a2ad: 			MalformedURLException {
1:5c8a2ad: 		File repoFile = File.createTempFile("twitterRepo", "xml");
1:5c8a2ad: 		FileWriter writer = new FileWriter(repoFile);
1:5c8a2ad: 		writer.write(repo);
1:5c8a2ad: 		writer.close();
1:5c8a2ad: 		return repoFile.toURI().toURL();
1:5c8a2ad: 	}
1:5c8a2ad: 
1:5c8a2ad: 	private void deleteRepos() {
1:5c8a2ad: 		Repository[] repos = repositoryAdmin.listRepositories();
1:5c8a2ad: 		for (Repository repo : repos) {
1:5c8a2ad: 			repositoryAdmin.removeRepository(repo.getURI());
1:5c8a2ad: 		}
1:5c8a2ad: 	}
1:5c8a2ad: 
1:5c8a2ad: 	private String getRepoContent(String path) throws IOException {
1:5c8a2ad: 		StringBuilder repositoryXML = new StringBuilder();
1:5c8a2ad: 		InputStream resourceAsStream = this.getClass().getResourceAsStream(path);
1:5c8a2ad: 		BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));
1:5c8a2ad: 		String line;
1:5c8a2ad: 		while ((line = reader.readLine()) != null) {
1:5c8a2ad: 			repositoryXML.append(line);
1:5c8a2ad: 			repositoryXML.append("\r\n");
1:5c8a2ad: 		}
1:5c8a2ad: 		return repositoryXML.toString();
1:5c8a2ad: 	}
1:5c8a2ad: 
1:5c8a2ad: 	protected Option baseOptions() {
1:5c8a2ad: 		String localRepo = System.getProperty("maven.repo.local");
1:5c8a2ad: 
1:5c8a2ad: 		if (localRepo == null) {
1:5c8a2ad: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:5c8a2ad: 		}
1:5c8a2ad: 		return composite(
1:5c8a2ad: 				junitBundles(),
1:5c8a2ad: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
1:5c8a2ad: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"),
1:5c8a2ad: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:5c8a2ad: 				// this is how you set the default log level when using pax
1:5c8a2ad: 				// logging (logProfile)
1:5c8a2ad: 				systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:5c8a2ad: 				when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:5c8a2ad: 				);
1:5c8a2ad: 	}
1:5c8a2ad: 
1:5c8a2ad: 	@Configuration
1:5c8a2ad: 	public Option[] configuration() {
1:5c8a2ad: 		return CoreOptions.options(
1:5c8a2ad: 				baseOptions(),
1:5c8a2ad: 				mavenBundle("org.osgi", "org.osgi.compendium").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.management").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1:5c8a2ad: 				mavenBundle("org.apache.aries.samples.twitter", "org.apache.aries.samples.twitter.twitter4j").versionAsInProject()
1:5c8a2ad: 
1:5c8a2ad: 				// For debugging
1:5c8a2ad: 				//vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5010"),
1:5c8a2ad: 				);
1:5c8a2ad: 	}
1:ab48ffa: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:5c8a2ad
/////////////////////////////////////////////////////////////////////////
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.maven;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1: import static org.ops4j.pax.exam.CoreOptions.when;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import javax.inject.Inject;
1: 
1: import org.apache.aries.itest.AbstractIntegrationTest;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.options.MavenArtifactUrlReference;
1: 
1: @RunWith(PaxExam.class)
1: 	public static final String CORE_BUNDLE_BY_VALUE = "core.bundle.by.value";
1: 	public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
1: 	public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.value";
1: 	public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.reference";
1: 	public static final String USE_BUNDLE_BY_REFERENCE = "use.bundle.by.reference";
1: 	public static final String REPO_BUNDLE = "aries.bundle1";
1: 	public static final String HELLO_WORLD_CLIENT_BUNDLE="hello.world.client.bundle";
1: 	public static final String HELLO_WORLD_SERVICE_BUNDLE1="hello.world.service.bundle1";
1: 	public static final String HELLO_WORLD_SERVICE_BUNDLE2="hello.world.service.bundle2";
1: 	@Inject
1: 	RepositoryAdmin repositoryAdmin;
1: 	@Inject
1: 	AriesApplicationManager manager;
1: 	/**
1: 	 * Test for ARIES-461
1: 	 * Application that bring in dependency bundles from a bundle repository doesn't deploy
1: 	 * 
1: 	 * @throws Exception
1: 	 */
1: 	@Test
1: 	public void testTwitter() throws Exception
1: 	{
1: 		// provision against the local runtime
1: 		System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
1: 		deleteRepos();
1: 
1: 		MavenArtifactUrlReference twitterEbaUrl = maven("org.apache.aries.samples.twitter", "org.apache.aries.samples.twitter.eba").versionAsInProject().type("eba");
1: 		MavenArtifactUrlReference twitterCommonLangJar = maven("commons-lang", "commons-lang").versionAsInProject();
1: 		MavenArtifactUrlReference twitterJar = maven("org.apache.aries.samples.twitter", "org.apache.aries.samples.twitter.twitter4j").versionAsInProject();
1: 
1: 		// add the repository xml to the repository admin
1: 		String repositoryXML = getRepoContent("/obr/twitter/TwitterRepository.xml");
1: 		// replace the jar file url with the real url related to the environment
1: 		String repo = repositoryXML
1: 				.replaceAll("commons.lang.location", twitterCommonLangJar.getURL())
1: 				.replaceAll("twitter4j.location", twitterJar.getURL());
1: 
1: 		URL url = getRepoUrl(repo);
1: 		repositoryAdmin.addRepository(url);
1: 
1: 		AriesApplication app = manager.createApplication(new URL(twitterEbaUrl.getURL()));
1: 		app = manager.resolve(app);
1: 		DeploymentMetadata depMeta = app.getDeploymentMetadata();
1: 		List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
1: 		Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
1: 		Collection<DeploymentContent> appContent = depMeta.getApplicationDeploymentContents();
1: 		// We cannot be sure whether there are two or three provision bundles pulled in by Felix OBR as there is an outstanding defect
1: 		// https://issues.apache.org/jira/browse/FELIX-2672
1: 		// The workaround is to check we get the two bundles we are looking for, instead of insisting on just having two bundles.
1: 
1: 		List<String> provisionBundleSymbolicNames = new ArrayList<String>();
1: 		for (DeploymentContent dep : provision) {
1: 			provisionBundleSymbolicNames.add(dep.getContentName());
1: 		}
1: 		String provision_bundle1 = "org.apache.commons.lang";
1: 		String provision_bundle2 = "twitter4j";
1: 		assertTrue("Bundle " + provision_bundle1 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle1));
1: 		assertTrue("Bundle " + provision_bundle2 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle2));
1: 		assertEquals(useBundles.toString(), 0, useBundles.size());
1: 		assertEquals(appContent.toString(), 1, appContent.size());
1: 		AriesApplicationContext ctx = manager.install(app);
1: 		ctx.start();
1: 	}
1: 
1: 	private URL getRepoUrl(String repo) throws IOException,
1: 			MalformedURLException {
1: 		File repoFile = File.createTempFile("twitterRepo", "xml");
1: 		FileWriter writer = new FileWriter(repoFile);
1: 		writer.write(repo);
1: 		writer.close();
1: 		return repoFile.toURI().toURL();
1: 	}
1: 
1: 	private void deleteRepos() {
1: 		Repository[] repos = repositoryAdmin.listRepositories();
1: 		for (Repository repo : repos) {
1: 			repositoryAdmin.removeRepository(repo.getURI());
1: 		}
1: 	}
1: 
1: 	private String getRepoContent(String path) throws IOException {
1: 		StringBuilder repositoryXML = new StringBuilder();
1: 		InputStream resourceAsStream = this.getClass().getResourceAsStream(path);
1: 		BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));
1: 		String line;
1: 		while ((line = reader.readLine()) != null) {
1: 			repositoryXML.append(line);
1: 			repositoryXML.append("\r\n");
1: 		}
1: 		return repositoryXML.toString();
1: 	}
1: 
1: 	protected Option baseOptions() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		return composite(
1: 				junitBundles(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"),
1: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				// this is how you set the default log level when using pax
1: 				// logging (logProfile)
1: 				systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1: 				);
1: 	}
1: 
1: 	@Configuration
1: 	public Option[] configuration() {
1: 		return CoreOptions.options(
1: 				baseOptions(),
1: 				mavenBundle("org.osgi", "org.osgi.compendium").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.management").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1: 				mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces").versionAsInProject(),
1: 				mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1: 				mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.samples.twitter", "org.apache.aries.samples.twitter.twitter4j").versionAsInProject()
1: 
1: 				// For debugging
1: 				//vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5010"),
1: 				);
1: 	}
author:Holly Cummins
-------------------------------------------------------------------------------
commit:2bfa479
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
/////////////////////////////////////////////////////////////////////////
0:     Option[] options = testOptions(
/////////////////////////////////////////////////////////////////////////
author:Emily Jiang
-------------------------------------------------------------------------------
commit:b8839d6
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.ow2.asm", "asm-all"),
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:ab48ffa
/////////////////////////////////////////////////////////////////////////
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:f7d1169
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.sample.twitter.itest;
0: import static junit.framework.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.FileWriter;
1: import java.io.InputStreamReader;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import org.apache.aries.application.DeploymentContent;
1: import org.apache.aries.application.DeploymentMetadata;
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.AriesApplicationContext;
1: import org.apache.aries.application.management.AriesApplicationManager;
1: import org.apache.aries.application.utils.AppConstants;
1: import org.apache.felix.bundlerepository.Repository;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: @RunWith(JUnit4TestRunner.class)
1: public class TwitterTest extends AbstractIntegrationTest 
1: {
0:   public static final String CORE_BUNDLE_BY_VALUE = "core.bundle.by.value";
0:   public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
0:   public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.value";
0:   public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.reference";
0:   public static final String USE_BUNDLE_BY_REFERENCE = "use.bundle.by.reference";
0:   public static final String REPO_BUNDLE = "aries.bundle1";
0:   public static final String HELLO_WORLD_CLIENT_BUNDLE="hello.world.client.bundle";
0:   public static final String HELLO_WORLD_SERVICE_BUNDLE1="hello.world.service.bundle1";
0:   public static final String HELLO_WORLD_SERVICE_BUNDLE2="hello.world.service.bundle2";
1:   
0:   //Test for JIRA-461 which currently fails.
0:   @Test
0:   public void testTwitter() throws Exception
1:   {
0:     // provision against the local runtime
0:     System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURI());
0:     }
1: 
1:     
0:     // Use the superclasses' getUrlToEba() method instead of the pax-exam mavenBundle() method because pax-exam is running in a
0:     // diffference bundle which doesn't have visibility to the META-INF/maven/dependencies.properties file used to figure out the
0:     // version of the maven artifact.
0:     URL twitterEbaUrl = getUrlToEba("org.apache.aries.samples.twitter",
0:         "org.apache.aries.samples.twitter.eba");
0:     URL twitterCommonLangJar_url = getUrlToBundle("commons-lang", "commons-lang");
0:     URL twitterJar_url = getUrlToBundle("org.apache.aries.samples.twitter", "org.apache.aries.samples.twitter.twitter4j");
1:    
0:     // add the repository xml to the repository admin
0:     StringBuilder repositoryXML = new StringBuilder();
0:     BufferedReader reader = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream("/obr/twitter/TwitterRepository.xml")));
0:     String line;
0:     while ((line = reader.readLine()) != null) {
0:       repositoryXML.append(line);
0:       repositoryXML.append("\r\n");
0:     }
0:   //replace the jar file url with the real url related to the environment
0:     String repo = repositoryXML.toString().replaceAll("commons.lang.location", twitterCommonLangJar_url.toExternalForm());
0:     repo = repo.replaceAll("twitter4j.location", twitterJar_url.toExternalForm());
1:     
0:     FileWriter writer = new FileWriter("twitterRepo.xml");
0:     writer.write(repo);
0:     writer.close();
0:     repositoryAdmin.addRepository(new File("twitterRepo.xml").toURI().toURL());
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(twitterEbaUrl);
0:     app = manager.resolve(app);
0:     DeploymentMetadata depMeta = app.getDeploymentMetadata();
0:     List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
0:     Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
0:     Collection<DeploymentContent> appContent = depMeta.getApplicationDeploymentContents();
0:     // We cannot be sure whether there are two or three provision bundles pulled in by Felix OBR as there is an outstanding defect
0:     // https://issues.apache.org/jira/browse/FELIX-2672
0:     // The workaround is to check we get the two bundles we are looking for, instead of insisting on just having two bundles.
1:     
0:     List<String> provisionBundleSymbolicNames = new ArrayList<String>();
0:     for (DeploymentContent dep : provision) {
0:        provisionBundleSymbolicNames.add(dep.getContentName());
0:     }
0:     String provision_bundle1 = "org.apache.commons.lang";
0:     String provision_bundle2 = "twitter4j";
0:     assertTrue("Bundle " + provision_bundle1 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle1));
0:     assertTrue("Bundle " + provision_bundle2 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle2));
0:     assertEquals(useBundles.toString(), 0, useBundles.size());
0:     assertEquals(appContent.toString(), 1, appContent.size());
0:     AriesApplicationContext ctx = manager.install(app);
0:     ctx.start();
0:   }
1:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     Option[] options = options(
0:         // Log
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:         // Felix Config Admin
0:         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:         // Felix mvn url handler
0:         mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
0:         // this is how you set the default log level when using pax
0:         // logging (logProfile)
0:         systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
0:         // Bundles
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller"),
0:         mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:         mavenBundle("asm", "asm-all"),
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0:         /* For debugging, uncomment the next two lines  */
0:         /*vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5010"),
0:         waitForFrameworkStartup(),  */
0: //        vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5010"),
0:         /* For debugging, add these imports:
0:         import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0:         import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
1:         */
1: 
0:         equinox().version("3.5.0"));
0:     options = updateOptions(options);
0:     return options;
0:   }
0: }
============================================================================