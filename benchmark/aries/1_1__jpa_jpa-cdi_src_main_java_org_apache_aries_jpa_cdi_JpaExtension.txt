1:5a4dcb4: /*
1:5a4dcb4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a4dcb4:  * contributor license agreements.  See the NOTICE file distributed with
1:5a4dcb4:  * this work for additional information regarding copyright ownership.
1:5a4dcb4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a4dcb4:  * (the "License"); you may not use this file except in compliance with
1:5a4dcb4:  * the License.  You may obtain a copy of the License at
1:5a4dcb4:  *
1:5a4dcb4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5a4dcb4:  *
1:5a4dcb4:  * Unless required by applicable law or agreed to in writing, software
1:5a4dcb4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a4dcb4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a4dcb4:  * See the License for the specific language governing permissions and
1:5a4dcb4:  * limitations under the License.
1:5a4dcb4:  */
1:5a4dcb4: package org.apache.aries.jpa.cdi;
1:5a4dcb4: 
1:5a4dcb4: import javax.enterprise.context.ApplicationScoped;
1:5a4dcb4: import javax.enterprise.event.Observes;
1:5a4dcb4: import javax.enterprise.inject.spi.AfterBeanDiscovery;
1:5a4dcb4: import javax.enterprise.inject.spi.AnnotatedField;
1:5a4dcb4: import javax.enterprise.inject.spi.Bean;
1:5a4dcb4: import javax.enterprise.inject.spi.BeanManager;
1:5a4dcb4: import javax.enterprise.inject.spi.Extension;
1:5a4dcb4: import javax.enterprise.inject.spi.ProcessAnnotatedType;
1:5a4dcb4: import javax.persistence.PersistenceContext;
1:5a4dcb4: import javax.persistence.PersistenceUnit;
1:5a4dcb4: import java.util.ArrayList;
1:5a4dcb4: import java.util.List;
1:5a4dcb4: 
1:5a4dcb4: @ApplicationScoped
1:5a4dcb4: public class JpaExtension implements Extension {
1:5a4dcb4: 
1:5a4dcb4:     List<Bean<?>> beans = new ArrayList<Bean<?>>();
1:5a4dcb4: 
1:5a4dcb4:     public <T> void processAnnotatedType(@Observes ProcessAnnotatedType<T> event, BeanManager manager) {
1:5a4dcb4:         boolean hasPersistenceField = false;
1:5a4dcb4:         for (AnnotatedField<? super T> field : event.getAnnotatedType().getFields()) {
1:5a4dcb4:             if (field.isAnnotationPresent(PersistenceContext.class)
1:5a4dcb4:                     || field.isAnnotationPresent(PersistenceUnit.class)) {
1:5a4dcb4:                 hasPersistenceField = true;
1:5a4dcb4:                 break;
1:5a4dcb4:             }
1:5a4dcb4:         }
1:5a4dcb4:         if (hasPersistenceField) {
1:5a4dcb4:             PersistenceAnnotatedType<T> pat = new PersistenceAnnotatedType<T>(manager, event.getAnnotatedType());
1:5a4dcb4:             beans.addAll(pat.getProducers());
1:5a4dcb4:             event.setAnnotatedType(pat);
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     public void afterBeanDiscovery(@Observes AfterBeanDiscovery event, BeanManager manager) {
1:5a4dcb4:         for (Bean<?> bean : beans) {
1:5a4dcb4:             event.addBean(bean);
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4: 
1:5a4dcb4: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5a4dcb4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.jpa.cdi;
1: 
1: import javax.enterprise.context.ApplicationScoped;
1: import javax.enterprise.event.Observes;
1: import javax.enterprise.inject.spi.AfterBeanDiscovery;
1: import javax.enterprise.inject.spi.AnnotatedField;
1: import javax.enterprise.inject.spi.Bean;
1: import javax.enterprise.inject.spi.BeanManager;
1: import javax.enterprise.inject.spi.Extension;
1: import javax.enterprise.inject.spi.ProcessAnnotatedType;
1: import javax.persistence.PersistenceContext;
1: import javax.persistence.PersistenceUnit;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: @ApplicationScoped
1: public class JpaExtension implements Extension {
1: 
1:     List<Bean<?>> beans = new ArrayList<Bean<?>>();
1: 
1:     public <T> void processAnnotatedType(@Observes ProcessAnnotatedType<T> event, BeanManager manager) {
1:         boolean hasPersistenceField = false;
1:         for (AnnotatedField<? super T> field : event.getAnnotatedType().getFields()) {
1:             if (field.isAnnotationPresent(PersistenceContext.class)
1:                     || field.isAnnotationPresent(PersistenceUnit.class)) {
1:                 hasPersistenceField = true;
1:                 break;
1:             }
1:         }
1:         if (hasPersistenceField) {
1:             PersistenceAnnotatedType<T> pat = new PersistenceAnnotatedType<T>(manager, event.getAnnotatedType());
1:             beans.addAll(pat.getProducers());
1:             event.setAnnotatedType(pat);
1:         }
1:     }
1: 
1:     public void afterBeanDiscovery(@Observes AfterBeanDiscovery event, BeanManager manager) {
1:         for (Bean<?> bean : beans) {
1:             event.addBean(bean);
1:         }
1:     }
1: 
1: 
1: }
============================================================================