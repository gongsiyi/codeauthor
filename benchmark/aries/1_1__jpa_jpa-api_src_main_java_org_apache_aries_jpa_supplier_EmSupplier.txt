1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.supplier;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.EntityManager;
1:2cfdf52: 
1:2cfdf52: /**
1:2cfdf52:  * Provides a thread safe way to use an EntityManager. - The first call must be to preCall(). This will create
1:2cfdf52:  * an EM for the current thread. - The EM can then be retrieved by calling get() and user normally - At the
1:2cfdf52:  * end postCall() has to be called to close the EntityManager If this is used on nested methods then the EM is
1:2cfdf52:  * only created / closed on the outermost calls to preCall() / postCall()
1:2cfdf52:  */
1:2cfdf52: public interface EmSupplier {
1:2cfdf52: 
1:2cfdf52:     /**
1:2cfdf52:      * Is called before first access to get() in a method
1:96e072c:      * @deprecated Use a Coordination instead
1:2cfdf52:      */
1:96e072c:     @Deprecated
1:2cfdf52:     void preCall();
1:2cfdf52:     
1:2cfdf52:     EntityManager get();
1:2cfdf52: 
1:2cfdf52:     /**
1:2cfdf52:      * Is called after last access to get() in a method
1:96e072c:      * @deprecated Use a Coordination instead
1:2cfdf52:      */
1:96e072c:     @Deprecated
1:2cfdf52:     void postCall();
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:96e072c
/////////////////////////////////////////////////////////////////////////
1:      * @deprecated Use a Coordination instead
1:     @Deprecated
1:      * @deprecated Use a Coordination instead
1:     @Deprecated
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.supplier;
1: 
1: import javax.persistence.EntityManager;
1: 
1: /**
1:  * Provides a thread safe way to use an EntityManager. - The first call must be to preCall(). This will create
1:  * an EM for the current thread. - The EM can then be retrieved by calling get() and user normally - At the
1:  * end postCall() has to be called to close the EntityManager If this is used on nested methods then the EM is
1:  * only created / closed on the outermost calls to preCall() / postCall()
1:  */
1: public interface EmSupplier {
1: 
1:     /**
1:      * Is called before first access to get() in a method
1:      */
1:     void preCall();
1:     
1:     EntityManager get();
1: 
1:     /**
1:      * Is called after last access to get() in a method
1:      */
1:     void postCall();
1: }
============================================================================