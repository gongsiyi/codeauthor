1:5c15102: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:5c15102:  *  contributor license agreements.  See the NOTICE file distributed with
1:5c15102:  *  this work for additional information regarding copyright ownership.
1:5c15102:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:5c15102:  *  (the "License"); you may not use this file except in compliance with
1:5c15102:  *  the License.  You may obtain a copy of the License at
1:5c15102:  *
1:5c15102:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5c15102:  *
1:5c15102:  *  Unless required by applicable law or agreed to in writing, software
1:5c15102:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:5c15102:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5c15102:  *  See the License for the specific language governing permissions and
1:5c15102:  *  limitations under the License.
1:5c15102:  */
1:5c15102: package org.apache.aries.transaction.itests;
26:5c15102: 
1:febc5c2: import javax.inject.Inject;
1:5c15102: 
1:5c15102: import org.apache.aries.transaction.test.TestBean;
1:5c15102: import org.junit.Test;
1:febc5c2: import org.ops4j.pax.exam.util.Filter;
1:5c15102: 
1:bd98451: public class RequiredTest extends AbstractIntegrationTest {
1:70e39b6:     @Inject
1:bd98451:     @Filter(timeout=120000, value="(tranAttribute=Required)")
1:febc5c2:     TestBean bean;
1:70e39b6: 
1:70e39b6:     @Test
1:bd98451:     public void testInsertSuccesful() throws Exception {
1:70e39b6:         clientTransaction = false;
1:70e39b6:         assertInsertSuccesful();
1:bd98451:     }
1:bd98451:     
1:bd98451:     @Test
1:bd98451:     public void testInsertWithAppExceptionCommitted() throws Exception {
1:70e39b6:         assertInsertWithAppExceptionCommitted();
1:bd98451:     }
1:bd98451:     
1:bd98451:     @Test
1:bd98451:     public void testInsertWithRuntimeExceptionRolledBack() throws Exception {
1:70e39b6:         assertInsertWithRuntimeExceptionRolledBack();
1:70e39b6:     }
1:70e39b6: 
1:70e39b6:     @Override
1:70e39b6:     protected TestBean getBean() {
1:70e39b6:         return bean;
1:70e39b6:     }
7:5c15102: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:bd98451
/////////////////////////////////////////////////////////////////////////
1: public class RequiredTest extends AbstractIntegrationTest {
1:     @Filter(timeout=120000, value="(tranAttribute=Required)")
1:     public void testInsertSuccesful() throws Exception {
1:     }
1:     
1:     @Test
1:     public void testInsertWithAppExceptionCommitted() throws Exception {
1:     }
1:     
1:     @Test
1:     public void testInsertWithRuntimeExceptionRolledBack() throws Exception {
commit:70e39b6
/////////////////////////////////////////////////////////////////////////
1:     @Inject
0:     @Filter("(tranAttribute=Required)")
1: 
1:     @Test
0:     public void testRequired() throws Exception {
1:         clientTransaction = false;
1:         assertInsertSuccesful();
1:         assertInsertWithAppExceptionCommitted();
1:         assertInsertWithRuntimeExceptionRolledBack();
1:     }
1: 
1:     @Override
1:     protected TestBean getBean() {
1:         return bean;
1:     }
commit:febc5c2
/////////////////////////////////////////////////////////////////////////
1: import javax.inject.Inject;
1: import org.ops4j.pax.exam.util.Filter;
0:     @Inject @Filter("(tranAttribute=Required)") 
1:     TestBean bean;
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0:       TestBean bean = context().getService(TestBean.class, "(tranAttribute=Required)");
0:       UserTransaction tran = context().getService(UserTransaction.class);
commit:5c15102
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.transaction.itests;
1: 
0: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.fail;
1: 
0: import java.sql.SQLException;
1: 
0: import javax.transaction.RollbackException;
0: import javax.transaction.UserTransaction;
1: 
1: import org.apache.aries.transaction.test.TestBean;
1: import org.junit.Test;
1: 
0: public class RequiredTranStrategyTest extends AbstractIntegrationTest {
1:   
0:   @Test
0:   public void testRequired() throws Exception {
0:       TestBean bean = getOsgiService(TestBean.class, "(tranStrategy=Required)", DEFAULT_TIMEOUT);
0:       UserTransaction tran = getOsgiService(UserTransaction.class);
1:       
0:       //Test with client transaction - the user transaction is used to insert a row
0:       int initialRows = bean.countRows();
1:       
0:       tran.begin();
0:       bean.insertRow("testWithClientTran", 1);
0:       tran.commit();
1:       
0:       int finalRows = bean.countRows();
0:       assertTrue("Initial rows: " + initialRows + ", Final rows: " + finalRows, finalRows - initialRows == 1);
1:       
0:       //Test with client transaction and application exception - the user transaction is not rolled back
0:       initialRows = bean.countRows();
1:       
0:       tran.begin();
0:       bean.insertRow("testWithClientTranAndWithAppException", 1);
1:       
0:       try {
0:           bean.insertRow("testWithClientTranAndWithAppException", 2, new SQLException());
0:       } catch (SQLException e) {
0:           e.printStackTrace();
1:       }
1:       
0:       tran.commit();
1:       
0:       finalRows = bean.countRows();
0:       assertTrue("Initial rows: " + initialRows + ", Final rows: " + finalRows, finalRows - initialRows == 2);
1:        
0:       //Test with client transaction and runtime exception - the user transaction is rolled back
0:       initialRows = bean.countRows();
1:       
0:       tran.begin();
0:       bean.insertRow("testWithClientTranAndWithRuntimeException", 1);
1:       
0:       try {
0:           bean.insertRow("testWithClientTranAndWithRuntimeException", 2, new RuntimeException());
0:       } catch (RuntimeException e) {
0:           e.printStackTrace();
1:       }
1:       
0:       try {
0:           tran.commit();
0:           fail("RollbackException not thrown");
0:       } catch (RollbackException e) {
0:           e.printStackTrace();
1:       }
1:       
0:       finalRows = bean.countRows();
0:       assertTrue("Initial rows: " + initialRows + ", Final rows: " + finalRows, finalRows - initialRows == 0);
1:       
0:       //Test without client exception - a container transaction is used to insert the row
0:       initialRows = bean.countRows();
1:       
0:       bean.insertRow("testWithoutClientTran", 1);
1:       
0:       finalRows = bean.countRows();
0:       assertTrue("Initial rows: " + initialRows + ", Final rows: " + finalRows, finalRows - initialRows == 1);
1:       
0:       //Test without client exception and with application exception - the container transaction is not rolled back
0:       initialRows = bean.countRows();
1:       
0:       try {
0:           bean.insertRow("testWithoutClientTranAndWithAppException", 1, new SQLException("Dummy exception"));
0:       } catch (Exception e) {
0:           e.printStackTrace();
1:       }
1:       
0:       finalRows = bean.countRows();
0:       assertTrue("Initial rows: " + initialRows + ", Final rows: " + finalRows, finalRows - initialRows == 1);
1:       
0:       //Test without client transaction and with runtime exception - the container transaction is rolled back
0:       initialRows = bean.countRows();
1:       
0:       try {
0:           bean.insertRow("testWithoutClientTranAndWithRuntimeException", 1, new RuntimeException("Dummy exception"));
0:       } catch (Exception e) {
0:           e.printStackTrace();
1:       }
1:       
0:       finalRows = bean.countRows();
0:       assertTrue("Initial rows: " + initialRows + ", Final rows: " + finalRows, finalRows - initialRows == 0);
1:   }
1: }
author:Lin Sun
-------------------------------------------------------------------------------
commit:bb00f0a
/////////////////////////////////////////////////////////////////////////
0: public class RequiredTranAttributeTest extends AbstractIntegrationTest {
0:       TestBean bean = getOsgiService(TestBean.class, "(tranAttribute=Required)", DEFAULT_TIMEOUT);
============================================================================