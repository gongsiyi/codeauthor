1:29c4662: /*
1:29c4662:  * Licensed to the Apache Software Foundation (ASF) under one
1:29c4662:  * or more contributor license agreements.  See the NOTICE file
1:29c4662:  * distributed with this work for additional information
1:29c4662:  * regarding copyright ownership.  The ASF licenses this file
1:29c4662:  * to you under the Apache License, Version 2.0 (the
1:29c4662:  * "License"); you may not use this file except in compliance
1:29c4662:  * with the License.  You may obtain a copy of the License at
1:29c4662:  *
1:29c4662:  *   http://www.apache.org/licenses/LICENSE-2.0
1:29c4662:  *
1:29c4662:  * Unless required by applicable law or agreed to in writing,
1:29c4662:  * software distributed under the License is distributed on an
1:29c4662:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:29c4662:  * KIND, either express or implied.  See the License for the
1:29c4662:  * specific language governing permissions and limitations
1:29c4662:  * under the License.
1:29c4662:  */
1:29c4662: 
1:29c4662: package org.apache.aries.jndi.url;
1:29c4662: 
1:29c4662: import java.util.Hashtable;
1:29c4662: 
1:29c4662: import javax.naming.Context;
1:29c4662: import javax.naming.Name;
1:29c4662: import javax.naming.spi.ObjectFactory;
1:29c4662: 
1:29c4662: import org.osgi.framework.Bundle;
1:d90eeba: import org.osgi.framework.BundleContext;
1:d90eeba: import org.osgi.framework.ServiceReference;
1:d90eeba: import org.osgi.service.jndi.JNDIConstants;
1:d90eeba: 
1:d90eeba: import org.apache.aries.jndi.spi.AugmenterInvoker;
1:29c4662: 
1:29c4662: public class BlueprintURLContextFactory implements ObjectFactory {
1:29c4662: 
1:d90eeba:   final private Bundle _callersBundle;
1:d90eeba: 
1:d90eeba:   private static AugmenterInvoker augmenterInvoker = null;
1:29c4662: 
1:29c4662:   public BlueprintURLContextFactory(Bundle callersBundle) {
1:29c4662:     _callersBundle = callersBundle;
1:29c4662:   }
1:29c4662: 
1:29c4662:   @Override
1:d90eeba:   public Object getObjectInstance(Object obj, Name name, Context callersCtx, Hashtable<?, ?> envmt) throws Exception {
1:d90eeba: 
1:d90eeba:     if (augmenterInvoker == null && _callersBundle != null) {
1:d90eeba:       BundleContext callerBundleContext = _callersBundle.getBundleContext();
1:d90eeba:       ServiceReference augmenterSR = callerBundleContext.getServiceReference(AugmenterInvoker.class.getName());
1:d90eeba:       if (augmenterSR != null) augmenterInvoker = (AugmenterInvoker) callerBundleContext.getService(augmenterSR);
1:d90eeba:     }
1:d90eeba:     if (augmenterInvoker != null) augmenterInvoker.augmentEnvironment(envmt);
1:d90eeba: 
1:d90eeba:     BundleContext bc = (BundleContext) envmt.get(JNDIConstants.BUNDLE_CONTEXT);
1:d90eeba:     if (augmenterInvoker != null) augmenterInvoker.unaugmentEnvironment(envmt);
1:d90eeba:    
1:eaff6dd:     Bundle b = (bc != null)? bc.getBundle() : null;
1:29c4662:     Object result = null;
1:29c4662:     if (obj == null) {
1:eaff6dd:       result = new BlueprintURLContext((b == null) ? _callersBundle : b,
1:eaff6dd:           envmt);
1:29c4662:     } else if (obj instanceof String) {
1:29c4662:       Context ctx = null;
1:29c4662:       try {
1:eaff6dd:         ctx = new BlueprintURLContext((b == null) ? _callersBundle : b,
1:eaff6dd:             envmt);
1:29c4662:         result = ctx.lookup((String) obj);
1:29c4662:       } finally {
1:29c4662:         if (ctx != null) {
1:29c4662:           ctx.close();
1:29c4662:         }
1:29c4662:       }
1:29c4662:     } 
1:29c4662:     return result;
1:29c4662:   }
1:29c4662: 
1:29c4662: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:d90eeba
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.jndi.JNDIConstants;
1: 
1: import org.apache.aries.jndi.spi.AugmenterInvoker;
1:   final private Bundle _callersBundle;
1: 
1:   private static AugmenterInvoker augmenterInvoker = null;
1:   public Object getObjectInstance(Object obj, Name name, Context callersCtx, Hashtable<?, ?> envmt) throws Exception {
1: 
1:     if (augmenterInvoker == null && _callersBundle != null) {
1:       BundleContext callerBundleContext = _callersBundle.getBundleContext();
1:       ServiceReference augmenterSR = callerBundleContext.getServiceReference(AugmenterInvoker.class.getName());
1:       if (augmenterSR != null) augmenterInvoker = (AugmenterInvoker) callerBundleContext.getService(augmenterSR);
1:     }
1:     if (augmenterInvoker != null) augmenterInvoker.augmentEnvironment(envmt);
1: 
1:     BundleContext bc = (BundleContext) envmt.get(JNDIConstants.BUNDLE_CONTEXT);
1:     if (augmenterInvoker != null) augmenterInvoker.unaugmentEnvironment(envmt);
1:    
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:eaff6dd
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.BundleContext;
0: import org.osgi.service.jndi.JNDIConstants;
/////////////////////////////////////////////////////////////////////////
0:     BundleContext bc = (BundleContext) envmt.get(JNDIConstants.BUNDLE_CONTEXT);
1:     Bundle b = (bc != null)? bc.getBundle() : null;
1:       result = new BlueprintURLContext((b == null) ? _callersBundle : b,
1:           envmt);
1:         ctx = new BlueprintURLContext((b == null) ? _callersBundle : b,
1:             envmt);
commit:29c4662
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.jndi.url;
1: 
1: import java.util.Hashtable;
1: 
1: import javax.naming.Context;
1: import javax.naming.Name;
1: import javax.naming.spi.ObjectFactory;
1: 
1: import org.osgi.framework.Bundle;
1: 
1: public class BlueprintURLContextFactory implements ObjectFactory {
1: 
0:   final private Bundle _callersBundle;
1: 
1:   public BlueprintURLContextFactory(Bundle callersBundle) {
1:     _callersBundle = callersBundle;
1:   }
1: 
1:   @Override
0:   public Object getObjectInstance(Object obj, Name name, Context callersCtx, Hashtable<?, ?> envmt) throws Exception {
1:     Object result = null;
1:     if (obj == null) {
0:       result = new BlueprintURLContext(_callersBundle, envmt);
1:     } else if (obj instanceof String) {
1:       Context ctx = null;
1:       try {
0:         ctx = new BlueprintURLContext(_callersBundle, envmt);
1:         result = ctx.lookup((String) obj);
1:       } finally {
1:         if (ctx != null) {
1:           ctx.close();
1:         }
1:       }
1:     } 
1:     return result;
1:   }
1: 
1: }
============================================================================