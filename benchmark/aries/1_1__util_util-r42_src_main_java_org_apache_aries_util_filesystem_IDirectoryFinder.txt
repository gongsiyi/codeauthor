1:69d4847: /*
1:69d4847:  * Licensed to the Apache Software Foundation (ASF) under one
1:69d4847:  * or more contributor license agreements.  See the NOTICE file
1:69d4847:  * distributed with this work for additional information
1:69d4847:  * regarding copyright ownership.  The ASF licenses this file
1:69d4847:  * to you under the Apache License, Version 2.0 (the
1:69d4847:  * "License"); you may not use this file except in compliance
1:69d4847:  * with the License.  You may obtain a copy of the License at
1:69d4847:  *
1:69d4847:  *   http://www.apache.org/licenses/LICENSE-2.0
1:69d4847:  *
1:69d4847:  * Unless required by applicable law or agreed to in writing,
1:69d4847:  * software distributed under the License is distributed on an
1:69d4847:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:69d4847:  * KIND, either express or implied.  See the License for the
1:69d4847:  * specific language governing permissions and limitations
1:69d4847:  * under the License.
1:69d4847:  */
1:69d4847: 
1:69d4847: package org.apache.aries.util.filesystem;
1:69d4847: 
1:69d4847: import java.net.URI;
1:69d4847: 
1:69d4847: /**
1:69d4847:  * Provides a means by which a virtual directory can be cached and returned on 
1:69d4847:  * demand.
1:69d4847:  * <p>
1:69d4847:  * 
1:69d4847:  * A typical scenario for this interface is to implement it as a service which 
1:69d4847:  * is used to hold virtual directories containing application installation 
1:69d4847:  * artifacts, with this directory being retrieved when required during
1:69d4847:  * application installation (a URI identifying the virtual directory having been
1:69d4847:  * passed to the installation code).
1:69d4847:  * <p>
1:69d4847:  * 
1:69d4847:  * Implementing classes should use URIs of the form
1:69d4847:  * <code>idirfinder://?finderID=xxx&directoryID=yyy</code> where the finder ID
1:69d4847:  * within the query part of the URI may be used to assist in determining the 
1:69d4847:  * directory finder instance that can retrieve the virtual directory identified 
1:69d4847:  * by the directory ID part (or alternatively, the URI as a whole). When 
1:69d4847:  * implemented as a service, a directory finder should configure a corresponding
1:69d4847:  * service property of "finderID=xxx".
1:69d4847:  * <p>
1:69d4847:  */
1:69d4847: public interface IDirectoryFinder
1:69d4847: {
1:69d4847:   /**
1:69d4847:    * The scheme for directory finder URI ids. Using this scheme enables code 
1:69d4847:    * receiving such a URI to infer that it is intended for use with a 
1:69d4847:    * IDirectoryFinder instance.
1:69d4847:    * <p>
1:69d4847:    */
1:69d4847:   final static String IDIR_SCHEME = "idirfinder";
1:69d4847:   
1:69d4847:   /**
1:69d4847:    * The key used in the query part of the URI whose corresponding value 
1:69d4847:    * assists in identifying the directory finder to be used.
1:69d4847:    * <p>
1:69d4847:    */
1:69d4847:   final static String IDIR_FINDERID_KEY = "finderID";
1:69d4847:   
1:69d4847:   /**
1:69d4847:    * The key used in the query part of the URI whose corresponding value 
1:69d4847:    * identifies the directory to be returned.
1:69d4847:    * <p>
1:69d4847:    */
1:69d4847:   final static String IDIR_DIRECTORYID_KEY = "directoryID";
1:69d4847:   
1:69d4847:   /**
1:69d4847:    * Get the directory that corresponds to the given identifier, and remove it 
1:69d4847:    * from the cache, or return null if no corresponding directory is found.
1:69d4847:    * <p>
1:69d4847:    *  
1:69d4847:    * As the found directory is removed, it is not subsequently retrievable by 
1:69d4847:    * re-issuing the request.
1:69d4847:    * <p>
1:69d4847:    * 
1:69d4847:    * @param id a URI that identifies the desired directory.
1:69d4847:    * @return IDirectory instance that corresponds to the given id URI, or null 
1:69d4847:    *         if unknown.
1:69d4847:    */
1:69d4847:   IDirectory retrieveIDirectory(URI id);
1:69d4847: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:69d4847
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.util.filesystem;
1: 
1: import java.net.URI;
1: 
1: /**
1:  * Provides a means by which a virtual directory can be cached and returned on 
1:  * demand.
1:  * <p>
1:  * 
1:  * A typical scenario for this interface is to implement it as a service which 
1:  * is used to hold virtual directories containing application installation 
1:  * artifacts, with this directory being retrieved when required during
1:  * application installation (a URI identifying the virtual directory having been
1:  * passed to the installation code).
1:  * <p>
1:  * 
1:  * Implementing classes should use URIs of the form
1:  * <code>idirfinder://?finderID=xxx&directoryID=yyy</code> where the finder ID
1:  * within the query part of the URI may be used to assist in determining the 
1:  * directory finder instance that can retrieve the virtual directory identified 
1:  * by the directory ID part (or alternatively, the URI as a whole). When 
1:  * implemented as a service, a directory finder should configure a corresponding
1:  * service property of "finderID=xxx".
1:  * <p>
1:  */
1: public interface IDirectoryFinder
1: {
1:   /**
1:    * The scheme for directory finder URI ids. Using this scheme enables code 
1:    * receiving such a URI to infer that it is intended for use with a 
1:    * IDirectoryFinder instance.
1:    * <p>
1:    */
1:   final static String IDIR_SCHEME = "idirfinder";
1:   
1:   /**
1:    * The key used in the query part of the URI whose corresponding value 
1:    * assists in identifying the directory finder to be used.
1:    * <p>
1:    */
1:   final static String IDIR_FINDERID_KEY = "finderID";
1:   
1:   /**
1:    * The key used in the query part of the URI whose corresponding value 
1:    * identifies the directory to be returned.
1:    * <p>
1:    */
1:   final static String IDIR_DIRECTORYID_KEY = "directoryID";
1:   
1:   /**
1:    * Get the directory that corresponds to the given identifier, and remove it 
1:    * from the cache, or return null if no corresponding directory is found.
1:    * <p>
1:    *  
1:    * As the found directory is removed, it is not subsequently retrievable by 
1:    * re-issuing the request.
1:    * <p>
1:    * 
1:    * @param id a URI that identifies the desired directory.
1:    * @return IDirectory instance that corresponds to the given id URI, or null 
1:    *         if unknown.
1:    */
1:   IDirectory retrieveIDirectory(URI id);
1: }
============================================================================