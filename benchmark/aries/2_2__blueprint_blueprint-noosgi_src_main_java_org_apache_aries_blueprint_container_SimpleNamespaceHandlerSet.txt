1:cd603d2: /*
1:cd603d2:  * Licensed to the Apache Software Foundation (ASF) under one
1:cd603d2:  * or more contributor license agreements.  See the NOTICE file
1:cd603d2:  * distributed with this work for additional information
1:cd603d2:  * regarding copyright ownership.  The ASF licenses this file
1:cd603d2:  * to you under the Apache License, Version 2.0 (the
1:cd603d2:  * "License"); you may not use this file except in compliance
1:cd603d2:  * with the License.  You may obtain a copy of the License at
1:cd603d2:  *
1:cd603d2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cd603d2:  *
1:cd603d2:  * Unless required by applicable law or agreed to in writing,
1:cd603d2:  * software distributed under the License is distributed on an
1:cd603d2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cd603d2:  * KIND, either express or implied.  See the License for the
1:cd603d2:  * specific language governing permissions and limitations
1:cd603d2:  * under the License.
1:cd603d2:  */
1:cd603d2: package org.apache.aries.blueprint.container;
1:cd603d2: 
1:d59d28b: import java.io.IOException;
1:d59d28b: import java.io.InputStream;
1:d59d28b: import java.io.Reader;
1:d59d28b: import java.net.URI;
1:d59d28b: import java.net.URL;
1:d59d28b: import java.util.ArrayList;
1:d59d28b: import java.util.Collections;
1:d59d28b: import java.util.LinkedHashMap;
1:d59d28b: import java.util.List;
1:d59d28b: import java.util.Map;
1:d59d28b: import java.util.Set;
1:cd603d2: 
1:cd603d2: import javax.xml.XMLConstants;
1:cd603d2: import javax.xml.transform.Source;
1:cd603d2: import javax.xml.transform.stream.StreamSource;
1:cd603d2: import javax.xml.validation.Schema;
1:cd603d2: import javax.xml.validation.SchemaFactory;
1:d59d28b: 
1:d59d28b: import org.apache.aries.blueprint.NamespaceHandler;
1:d59d28b: import org.apache.aries.blueprint.ext.impl.ExtNamespaceHandler;
1:d59d28b: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
1:d59d28b: import org.w3c.dom.ls.LSInput;
1:d59d28b: import org.w3c.dom.ls.LSResourceResolver;
1:d59d28b: import org.xml.sax.SAXException;
1:cd603d2: 
1:cd603d2: public class SimpleNamespaceHandlerSet implements NamespaceHandlerSet {
1:cd603d2: 
1:cd603d2:     public static final URI EXT_1_2_NAMESPACE = URI.create("http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.2.0");
1:cd603d2: 
1:cc4ce69:     private Map<URI, URL> namespaces;
1:cc4ce69:     private Map<URI, NamespaceHandler> handlers;
1:cd603d2:     private Schema schema;
1:cd603d2: 
1:cd603d2:     public SimpleNamespaceHandlerSet() {
1:cc4ce69:         this.namespaces = new LinkedHashMap<URI, URL>();
1:cc4ce69:         this.handlers = new LinkedHashMap<URI, NamespaceHandler>();
1:cc4ce69:         addNamespace(EXT_1_2_NAMESPACE,
1:cc4ce69:                 getClass().getResource("/org/apache/aries/blueprint/ext/impl/blueprint-ext-1.2.xsd"),
1:cc4ce69:                 new ExtNamespaceHandler());
4:cd603d2:     }
1:cd603d2: 
1:cd603d2:     public Set<URI> getNamespaces() {
1:cc4ce69:         return Collections.unmodifiableSet(namespaces.keySet());
1:cc4ce69:     }
1:cc4ce69: 
1:cc4ce69:     public void addNamespace(URI namespace, URL schema, NamespaceHandler handler) {
1:cc4ce69:         namespaces.put(namespace, schema);
1:cc4ce69:         handlers.put(namespace, handler);
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     public boolean isComplete() {
1:cd603d2:         return true;
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     public NamespaceHandler getNamespaceHandler(URI uri) {
1:cc4ce69:         return handlers.get(uri);
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     public Schema getSchema() throws SAXException, IOException {
1:cd603d2:         if (schema == null) {
1:cd603d2:             final List<StreamSource> schemaSources = new ArrayList<StreamSource>();
1:cc4ce69:             final List<InputStream> streams = new ArrayList<InputStream>();
1:cc4ce69:             try {
1:cc4ce69:                 InputStream is = getClass().getResourceAsStream("/org/apache/aries/blueprint/blueprint.xsd");
1:cc4ce69:                 streams.add(is);
1:cc4ce69:                 schemaSources.add(new StreamSource(is));
1:cc4ce69:                 for (URI uri : namespaces.keySet()) {
1:cc4ce69:                     is = namespaces.get(uri).openStream();
1:cc4ce69:                     streams.add(is);
1:cc4ce69:                     schemaSources.add(new StreamSource(is));
1:d59d28b:                 }
1:cc4ce69:                 SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
1:d59d28b:                 schemaFactory.setResourceResolver(new LSResourceResolver() {
1:d59d28b:                     
1:d59d28b:                     public LSInput resolveResource(String type, String namespace, String publicId,
1:d59d28b:                                                    String systemId, String baseURI) {
1:d59d28b:                         try {
1:3eaabbb:                             URL namespaceURL = namespaces.get(URI.create(namespace));
1:3eaabbb:                             if (systemId != null && namespaceURL != null) {
1:3eaabbb:                                 URI systemIdUri = namespaceURL.toURI();
1:3eaabbb:                                 if (!URI.create(systemId).isAbsolute()) {
1:3eaabbb:                                     systemIdUri = systemIdUri.resolve(systemId);
1:d59d28b:                                 }
1:3eaabbb:                                 if (!systemIdUri.isAbsolute() && "jar".equals(namespaceURL.getProtocol())) {
1:3eaabbb:                                     String urlString = namespaceURL.toString();
1:3eaabbb:                                     int jarFragmentIndex = urlString.lastIndexOf('!');
1:3eaabbb:                                     if (jarFragmentIndex > 0 && jarFragmentIndex < urlString.length() - 1) {
1:3eaabbb:                                         String jarUrlOnly = urlString.substring(0, jarFragmentIndex);
1:3eaabbb:                                         String oldFragment = urlString.substring(jarFragmentIndex + 1);
1:3eaabbb:                                         String newFragment = URI.create(oldFragment).resolve(systemId).toString();
1:3eaabbb:                                         String newJarUri = jarUrlOnly + '!' + newFragment;
1:3eaabbb:                                         systemIdUri = URI.create(newJarUri);
1:3eaabbb:                                     }
1:3eaabbb:                                 }
1:3eaabbb:                                 InputStream resourceStream = systemIdUri.toURL().openStream();
1:3eaabbb:                                 return new LSInputImpl(publicId, systemId, resourceStream);
1:3d9f9ae:                             }
1:d59d28b:                         } catch (Exception ex) {
1:d59d28b:                             // ignore
1:3d9f9ae:                         }
1:d59d28b:                         return null;
1:d59d28b:                     }
1:d59d28b:                 });
1:cc4ce69:                 schema = schemaFactory.newSchema(schemaSources.toArray(new Source[schemaSources.size()]));
1:cc4ce69:             } finally {
1:cc4ce69:                 for (InputStream is : streams) {
1:cc4ce69:                     is.close();
1:d59d28b:                 }
1:cc4ce69:             }
1:cc4ce69:         }
1:cd603d2:         return schema;
1:cc4ce69:     }
1:cd603d2: 
1:cd603d2:     public void addListener(Listener listener) {
1:cd603d2:         throw new IllegalStateException();
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     public void removeListener(Listener listener) {
1:cd603d2:         throw new IllegalStateException();
1:cd603d2:     }
1:cd603d2: 
1:cd603d2:     public void destroy() {
1:cd603d2:         schema = null;
1:cd603d2:     }
1:cd603d2: 
1:d59d28b:     private static class LSInputImpl implements LSInput {
1:d59d28b: 
1:d59d28b:         protected String fPublicId;
1:d59d28b: 
1:d59d28b:         protected String fSystemId;
1:d59d28b: 
1:d59d28b:         protected String fBaseSystemId;
1:d59d28b: 
1:d59d28b:         protected InputStream fByteStream;
1:d59d28b: 
1:d59d28b:         protected Reader fCharStream;
1:d59d28b: 
1:d59d28b:         protected String fData;
1:d59d28b: 
1:d59d28b:         protected String fEncoding;
1:d59d28b: 
1:d59d28b:         protected boolean fCertifiedText;
1:d59d28b: 
1:d59d28b:         LSInputImpl(String publicId, String systemId, InputStream byteStream) {
1:d59d28b:             fPublicId = publicId;
1:d59d28b:             fSystemId = systemId;
1:d59d28b:             fByteStream = byteStream;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public InputStream getByteStream() {
1:d59d28b:             return fByteStream;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public void setByteStream(InputStream byteStream) {
1:d59d28b:             fByteStream = byteStream;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public Reader getCharacterStream() {
1:d59d28b:             return fCharStream;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public void setCharacterStream(Reader characterStream) {
1:d59d28b:             fCharStream = characterStream;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public String getStringData() {
1:d59d28b:             return fData;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public void setStringData(String stringData) {
1:d59d28b:             fData = stringData;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public String getEncoding() {
1:d59d28b:             return fEncoding;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public void setEncoding(String encoding) {
1:d59d28b:             fEncoding = encoding;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public String getPublicId() {
1:d59d28b:             return fPublicId;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public void setPublicId(String publicId) {
1:d59d28b:             fPublicId = publicId;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public String getSystemId() {
1:d59d28b:             return fSystemId;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public void setSystemId(String systemId) {
1:d59d28b:             fSystemId = systemId;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public String getBaseURI() {
1:d59d28b:             return fBaseSystemId;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public void setBaseURI(String baseURI) {
1:d59d28b:             fBaseSystemId = baseURI;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public boolean getCertifiedText() {
1:d59d28b:             return fCertifiedText;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:         public void setCertifiedText(boolean certifiedText) {
1:d59d28b:             fCertifiedText = certifiedText;
1:d59d28b:         }
1:d59d28b: 
1:d59d28b:     }
1:cd603d2: }
============================================================================
author:Sergey Beryozkin
-------------------------------------------------------------------------------
commit:3eaabbb
/////////////////////////////////////////////////////////////////////////
1:                             URL namespaceURL = namespaces.get(URI.create(namespace));
1:                             if (systemId != null && namespaceURL != null) {
1:                                 URI systemIdUri = namespaceURL.toURI();
1:                                 if (!URI.create(systemId).isAbsolute()) {
1:                                     systemIdUri = systemIdUri.resolve(systemId);
1:                                 if (!systemIdUri.isAbsolute() && "jar".equals(namespaceURL.getProtocol())) {
1:                                     String urlString = namespaceURL.toString();
1:                                     int jarFragmentIndex = urlString.lastIndexOf('!');
1:                                     if (jarFragmentIndex > 0 && jarFragmentIndex < urlString.length() - 1) {
1:                                         String jarUrlOnly = urlString.substring(0, jarFragmentIndex);
1:                                         String oldFragment = urlString.substring(jarFragmentIndex + 1);
1:                                         String newFragment = URI.create(oldFragment).resolve(systemId).toString();
1:                                         String newJarUri = jarUrlOnly + '!' + newFragment;
1:                                         systemIdUri = URI.create(newJarUri);
1:                                     }
1:                                 }
1:                                 InputStream resourceStream = systemIdUri.toURL().openStream();
1:                                 return new LSInputImpl(publicId, systemId, resourceStream);
commit:3d9f9ae
/////////////////////////////////////////////////////////////////////////
0:                                 URL namespaceURL = namespaces.get(URI.create(namespace));
0:                                 if (namespaceURL != null) {
0:                                     URI systemIdUri = namespaceURL.toURI().resolve(systemId);
0:                                     if (!systemIdUri.isAbsolute() && "jar".equals(namespaceURL.getProtocol())) {
0:                                         String urlString = namespaceURL.toString();
0:                                         int jarFragmentIndex = urlString.lastIndexOf('!');
0:                                         if (jarFragmentIndex > 0 && jarFragmentIndex < urlString.length() - 1) {
0:                                             String jarUrlOnly = urlString.substring(0, jarFragmentIndex);
0:                                             String oldFragment = urlString.substring(jarFragmentIndex + 1);
0:                                             String newFragment = URI.create(oldFragment).resolve(systemId).toString();
0:                                             String newJarUri = jarUrlOnly + '!' + newFragment;
0:                                             systemIdUri = URI.create(newJarUri);
1:                                         }
1:                                     }
commit:d59d28b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.net.URI;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.LinkedHashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.aries.blueprint.ext.impl.ExtNamespaceHandler;
1: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
1: import org.w3c.dom.ls.LSInput;
1: import org.w3c.dom.ls.LSResourceResolver;
1: import org.xml.sax.SAXException;
/////////////////////////////////////////////////////////////////////////
1:                 schemaFactory.setResourceResolver(new LSResourceResolver() {
1:                     
1:                     public LSInput resolveResource(String type, String namespace, String publicId,
1:                                                    String systemId, String baseURI) {
1:                         try {
0:                             if (systemId != null && !URI.create(systemId).isAbsolute()) {
0:                                 URI namespaceURI = URI.create(namespace);
0:                                 if (namespaces.containsKey(namespaceURI)) {
0:                                     URI systemIdUri = namespaces.get(namespaceURI).toURI().resolve(systemId);
0:                                     InputStream resourceStream = systemIdUri.toURL().openStream();
0:                                     return new LSInputImpl(publicId, systemId, resourceStream);
1:                                 }
1:                             }
1:                         } catch (Exception ex) {
1:                             // ignore
1:                         }
1:                         return null;
1:                     }
1:                 });
/////////////////////////////////////////////////////////////////////////
1:     private static class LSInputImpl implements LSInput {
1: 
1:         protected String fPublicId;
1: 
1:         protected String fSystemId;
1: 
1:         protected String fBaseSystemId;
1: 
1:         protected InputStream fByteStream;
1: 
1:         protected Reader fCharStream;
1: 
1:         protected String fData;
1: 
1:         protected String fEncoding;
1: 
1:         protected boolean fCertifiedText;
1: 
1:         LSInputImpl(String publicId, String systemId, InputStream byteStream) {
1:             fPublicId = publicId;
1:             fSystemId = systemId;
1:             fByteStream = byteStream;
1:         }
1: 
1:         public InputStream getByteStream() {
1:             return fByteStream;
1:         }
1: 
1:         public void setByteStream(InputStream byteStream) {
1:             fByteStream = byteStream;
1:         }
1: 
1:         public Reader getCharacterStream() {
1:             return fCharStream;
1:         }
1: 
1:         public void setCharacterStream(Reader characterStream) {
1:             fCharStream = characterStream;
1:         }
1: 
1:         public String getStringData() {
1:             return fData;
1:         }
1: 
1:         public void setStringData(String stringData) {
1:             fData = stringData;
1:         }
1: 
1:         public String getEncoding() {
1:             return fEncoding;
1:         }
1: 
1:         public void setEncoding(String encoding) {
1:             fEncoding = encoding;
1:         }
1: 
1:         public String getPublicId() {
1:             return fPublicId;
1:         }
1: 
1:         public void setPublicId(String publicId) {
1:             fPublicId = publicId;
1:         }
1: 
1:         public String getSystemId() {
1:             return fSystemId;
1:         }
1: 
1:         public void setSystemId(String systemId) {
1:             fSystemId = systemId;
1:         }
1: 
1:         public String getBaseURI() {
1:             return fBaseSystemId;
1:         }
1: 
1:         public void setBaseURI(String baseURI) {
1:             fBaseSystemId = baseURI;
1:         }
1: 
1:         public boolean getCertifiedText() {
1:             return fCertifiedText;
1:         }
1: 
1:         public void setCertifiedText(boolean certifiedText) {
1:             fCertifiedText = certifiedText;
1:         }
1: 
1:     }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:cc4ce69
/////////////////////////////////////////////////////////////////////////
0: import java.io.InputStream;
0: import java.net.URL;
1:     private Map<URI, URL> namespaces;
1:     private Map<URI, NamespaceHandler> handlers;
1:         this.namespaces = new LinkedHashMap<URI, URL>();
1:         this.handlers = new LinkedHashMap<URI, NamespaceHandler>();
1:         addNamespace(EXT_1_2_NAMESPACE,
1:                 getClass().getResource("/org/apache/aries/blueprint/ext/impl/blueprint-ext-1.2.xsd"),
1:                 new ExtNamespaceHandler());
1:         return Collections.unmodifiableSet(namespaces.keySet());
1:     }
1: 
1:     public void addNamespace(URI namespace, URL schema, NamespaceHandler handler) {
1:         namespaces.put(namespace, schema);
1:         handlers.put(namespace, handler);
/////////////////////////////////////////////////////////////////////////
1:         return handlers.get(uri);
1:             final List<InputStream> streams = new ArrayList<InputStream>();
1:             try {
1:                 InputStream is = getClass().getResourceAsStream("/org/apache/aries/blueprint/blueprint.xsd");
1:                 streams.add(is);
1:                 schemaSources.add(new StreamSource(is));
1:                 for (URI uri : namespaces.keySet()) {
1:                     is = namespaces.get(uri).openStream();
1:                     streams.add(is);
1:                     schemaSources.add(new StreamSource(is));
1:                 }
1:                 SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
1:                 schema = schemaFactory.newSchema(schemaSources.toArray(new Source[schemaSources.size()]));
1:             } finally {
1:                 for (InputStream is : streams) {
1:                     is.close();
1:                 }
1:             }
commit:cd603d2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.container;
1: 
0: import org.apache.aries.blueprint.NamespaceHandler;
0: import org.apache.aries.blueprint.ext.impl.ExtNamespaceHandler;
0: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
0: import org.xml.sax.SAXException;
1: 
1: import javax.xml.XMLConstants;
1: import javax.xml.transform.Source;
1: import javax.xml.transform.stream.StreamSource;
1: import javax.xml.validation.Schema;
1: import javax.xml.validation.SchemaFactory;
0: import java.io.IOException;
0: import java.net.URI;
0: import java.util.*;
1: 
1: public class SimpleNamespaceHandlerSet implements NamespaceHandlerSet {
1: 
1:     public static final URI EXT_1_2_NAMESPACE = URI.create("http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.2.0");
1: 
0:     private Set<URI> namespaces;
1:     private Schema schema;
1: 
1:     public SimpleNamespaceHandlerSet() {
0:         this.namespaces = new LinkedHashSet<URI>();
0:         this.namespaces.add(EXT_1_2_NAMESPACE);
1:     }
1: 
1:     public Set<URI> getNamespaces() {
0:         return Collections.unmodifiableSet(namespaces);
1:     }
1: 
1:     public boolean isComplete() {
1:         return true;
1:     }
1: 
1:     public NamespaceHandler getNamespaceHandler(URI uri) {
0:         if (EXT_1_2_NAMESPACE.equals(uri)) {
0:             return new ExtNamespaceHandler();
1:         }
0:         return null;
1:     }
1: 
1:     public Schema getSchema() throws SAXException, IOException {
1:         if (schema == null) {
1:             final List<StreamSource> schemaSources = new ArrayList<StreamSource>();
0:             schemaSources.add(new StreamSource(getClass().getResourceAsStream("/org/apache/aries/blueprint/blueprint.xsd")));
0:             schemaSources.add(new StreamSource(getClass().getResourceAsStream("/org/apache/aries/blueprint/ext/impl/blueprint-ext-1.2.xsd")));
0:             SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
0:             schema = schemaFactory.newSchema(schemaSources.toArray(new Source[schemaSources.size()]));
1:         }
1:         return schema;
1:     }
1: 
1:     public void addListener(Listener listener) {
1:         throw new IllegalStateException();
1:     }
1: 
1:     public void removeListener(Listener listener) {
1:         throw new IllegalStateException();
1:     }
1: 
1:     public void destroy() {
1:         schema = null;
1:     }
1: 
1: }
============================================================================