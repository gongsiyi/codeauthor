1:4fec049: /*
1:4fec049:  * Licensed to the Apache Software Foundation (ASF) under one
1:4fec049:  * or more contributor license agreements.  See the NOTICE file
1:4fec049:  * distributed with this work for additional information
1:4fec049:  * regarding copyright ownership.  The ASF licenses this file
1:4fec049:  * to you under the Apache License, Version 2.0 (the
1:4fec049:  * "License"); you may not use this file except in compliance
1:4fec049:  * with the License.  You may obtain a copy of the License at
1:4fec049:  *
1:4fec049:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4fec049:  *
1:4fec049:  * Unless required by applicable law or agreed to in writing,
1:4fec049:  * software distributed under the License is distributed on an
1:4fec049:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4fec049:  * KIND, either express or implied.  See the License for the
1:4fec049:  * specific language governing permissions and limitations
1:4fec049:  * under the License.
1:4fec049:  */
1:4fec049: package org.apache.aries.application.modelling.impl;
10:4fec049: 
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:4fec049: 
1:4fec049: import java.util.Arrays;
1:4fec049: import java.util.Collection;
1:4fec049: import java.util.Collections;
1:4fec049: import java.util.HashMap;
1:4fec049: import java.util.Map;
1:4fec049: import java.util.TreeSet;
1:4fec049: 
1:4fec049: import org.apache.aries.application.modelling.ExportedService;
1:58f55bd: import org.apache.aries.application.modelling.ModellingConstants;
1:4fec049: import org.apache.aries.application.modelling.ResourceType;
1:4fec049: import org.apache.aries.application.modelling.WrappedServiceMetadata;
1:228f370: import org.apache.aries.application.utils.service.ExportedServiceHelper;
1:4fec049: import org.osgi.framework.Constants;
1:4fec049: import org.slf4j.Logger;
1:4fec049: import org.slf4j.LoggerFactory;
1:4fec049: 
1:4fec049: /**
1:4fec049:  * A service exported by a bundle. Provides an entry to DEPLOYMENT.MF
1:4fec049:  */
1:4fec049: public class ExportedServiceImpl implements ExportedService
1:4fec049: {
1:4fec049:   private final Logger logger = LoggerFactory.getLogger(ExportedServiceImpl.class);
1:4fec049:   private final Map<String, Object> _attributes;
1:4fec049:   private final Collection<String> _interfaces;
1:4fec049:   private final Map<String, Object> _serviceProperties;
1:4fec049:   private final String _name;
1:4fec049:   private final int _ranking;
1:4fec049:   private String _toString = null;
1:4fec049: 
1:4fec049:   /**
1:4fec049:    * Constructor. 
1:4fec049:    * @param name              "" will be changed to null
1:4fec049:    * @param ranking           Service ranking
1:4fec049:    * @param ifaces            Interfaces offered by the service
1:4fec049:    * @param serviceProperties Service properties. 
1:4fec049:    *                          We expect that osgi.service.blueprint.compname has been set if possible
1:4fec049:    */
1:4fec049:   public ExportedServiceImpl (String name, int ranking, Collection<String> ifaces, 
1:4fec049:       Map<String, Object> serviceProperties ) 
1:4fec049:   { 
1:4fec049:      
1:4fec049:     logger.debug(LOG_ENTRY,"ExportedServiceImpl", new Object[]{name, ranking, ifaces});
1:4fec049:     _interfaces = new TreeSet<String>(ifaces);
1:4fec049:     if (!"".equals(name)) { 
1:4fec049:       _name = name;
2:4fec049:     } else { 
1:4fec049:       _name = null;
17:4fec049:     }
1:4fec049:     _ranking = ranking;
1:4fec049:     if (serviceProperties == null) { 
1:4fec049:       _serviceProperties = new HashMap<String, Object>();
1:4fec049:     } else { 
1:4fec049:       _serviceProperties = new HashMap<String, Object>(serviceProperties);
1:4fec049:     }
1:4fec049:     
1:4fec049:     // Construct _attributes
1:4fec049:     _attributes = new HashMap<String, Object>(_serviceProperties);
1:4fec049:     
1:4fec049:     // Turn interfaces into a comma separated String
2:4fec049:     StringBuilder sb = new StringBuilder();
1:4fec049:     for (String i : _interfaces) { 
1:4fec049:       sb.append(i + ",");
1:4fec049:     }
2:4fec049:     sb = sb.deleteCharAt(sb.length()-1);
1:4fec049:     _attributes.put(Constants.OBJECTCLASS, sb.toString());
1:4fec049:     _attributes.put (Constants.SERVICE_RANKING, String.valueOf(_ranking));
1:4fec049:     _attributes.put(ModellingConstants.OBR_SERVICE, ModellingConstants.OBR_SERVICE);
1:4fec049:     logger.debug(LOG_EXIT,"ExportedServiceImpl");
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * This constructor is for building ExportedServices from Export-Service manifest headers, 
1:4fec049:    * which are deprecated in OSGi. 
1:4fec049:    * @param ifaceName
1:4fec049:    * @param attrs
1:4fec049:    */
1:4fec049:   @Deprecated 
1:4fec049:   public ExportedServiceImpl (String ifaceName, Map<String, String> attrs) { 
1:4fec049:     logger.debug(LOG_ENTRY,"ExportedServiceImpl", new Object[]{ ifaceName, attrs});
1:4fec049:     _interfaces = new TreeSet<String> (Arrays.asList(ifaceName));
1:4fec049:     _ranking = 0;
1:4fec049:     _attributes = new HashMap<String, Object> (attrs);
1:4fec049:     _attributes.put(Constants.OBJECTCLASS, ifaceName);
1:4fec049:     _attributes.put (Constants.SERVICE_RANKING, String.valueOf(_ranking));
1:4fec049:     _attributes.put(ModellingConstants.OBR_SERVICE, ModellingConstants.OBR_SERVICE);
1:4fec049:     _serviceProperties = new HashMap<String, Object>();
1:4fec049:     _name = null;
1:4fec049:     logger.debug(LOG_EXIT,"ExportedServiceImpl");
1:4fec049:    }
1:4fec049:   
1:4fec049: 
1:4fec049:   public Map<String, Object> getAttributes() {    
1:4fec049:     logger.debug(LOG_ENTRY,"getAttributes");
1:4fec049:     logger.debug(LOG_EXIT, "getAttributes", _attributes);
1:4fec049:     return Collections.unmodifiableMap(_attributes);
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public ResourceType getType() {
1:4fec049:     logger.debug(LOG_ENTRY,"getType");
1:4fec049:     logger.debug(LOG_EXIT, "getType", ResourceType.SERVICE);
1:4fec049:     return ResourceType.SERVICE;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public Collection<String> getInterfaces() {
1:4fec049:     logger.debug(LOG_ENTRY,"getInterfaces");
1:4fec049:     logger.debug(LOG_EXIT, "getInterfaces", _interfaces);
1:4fec049:     return Collections.unmodifiableCollection(_interfaces);
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public String getName() {
1:4fec049:     logger.debug(LOG_ENTRY,"getName");
1:4fec049:     logger.debug(LOG_EXIT, "getName", _name);
1:4fec049:     return _name;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public int getRanking() {
1:4fec049:     logger.debug(LOG_ENTRY,"getRanking");
1:4fec049:     logger.debug(LOG_EXIT, "getRanking", _ranking);
1:4fec049:     return _ranking;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public Map<String, Object> getServiceProperties() {
1:4fec049:     logger.debug(LOG_ENTRY,"getServiceProperties");
1:4fec049:     logger.debug(LOG_EXIT, "getServiceProperties", _serviceProperties);
1:4fec049:     return Collections.unmodifiableMap(_serviceProperties);
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public int compareTo(WrappedServiceMetadata o) {
1:4fec049:     logger.debug(LOG_ENTRY, "compareTo", o);
1:228f370:     int result = ExportedServiceHelper.portableExportedServiceCompareTo(this, o);
1:4fec049:     logger.debug(LOG_EXIT,"compareTo", result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049: 
1:4fec049:   @Override
1:4fec049:   public boolean equals (Object o) { 
1:4fec049:     logger.debug(LOG_ENTRY, "equals", o);
1:228f370:     boolean eq = ExportedServiceHelper.portableExportedServiceEquals(this, o);
1:4fec049:     logger.debug(LOG_EXIT, "equals", eq);
1:4fec049:     return eq;
1:4fec049:   }
1:4fec049:   
1:4fec049:   
1:4fec049:   @Override
1:4fec049:   public int hashCode() {
1:4fec049:     logger.debug(LOG_ENTRY, "hashCode");
1:228f370:     int result = ExportedServiceHelper.portableExportedServiceHashCode(this);
1:4fec049:     logger.debug(LOG_EXIT, "hashCode", result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Override 
1:4fec049:   public String toString() { 
1:228f370:     if (_toString == null) { 
1:228f370:       _toString = ExportedServiceHelper.generatePortableExportedServiceToString(this);
1:4fec049:     }
1:228f370:     return _toString;    
1:4fec049:   }
1:4fec049:   
1:4fec049: 
1:4fec049:   public boolean identicalOrDiffersOnlyByName(WrappedServiceMetadata wsmi) {
1:4fec049:     logger.debug(LOG_ENTRY,"identicalOrDiffersOnlyByName", wsmi);
1:4fec049:     
1:228f370:     boolean result = ExportedServiceHelper.
1:228f370:         portableExportedServiceIdenticalOrDiffersOnlyByName(this, wsmi);
1:228f370:     logger.debug(LOG_EXIT, "identicalOrDiffersOnlyByName", result);
1:228f370:     return result;
1:4fec049:   }
1:4fec049: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:228f370
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.utils.service.ExportedServiceHelper;
/////////////////////////////////////////////////////////////////////////
1:     int result = ExportedServiceHelper.portableExportedServiceCompareTo(this, o);
/////////////////////////////////////////////////////////////////////////
1:     boolean eq = ExportedServiceHelper.portableExportedServiceEquals(this, o);
/////////////////////////////////////////////////////////////////////////
1:     int result = ExportedServiceHelper.portableExportedServiceHashCode(this);
1:     if (_toString == null) { 
1:       _toString = ExportedServiceHelper.generatePortableExportedServiceToString(this);
1:     return _toString;    
1:     boolean result = ExportedServiceHelper.
1:         portableExportedServiceIdenticalOrDiffersOnlyByName(this, wsmi);
1:     logger.debug(LOG_EXIT, "identicalOrDiffersOnlyByName", result);
1:     return result;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ModellingConstants;
commit:4fec049
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.modelling.impl;
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
0: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.List;
1: import java.util.Map;
0: import java.util.Set;
1: import java.util.TreeSet;
1: 
1: import org.apache.aries.application.modelling.ExportedService;
1: import org.apache.aries.application.modelling.ResourceType;
1: import org.apache.aries.application.modelling.WrappedServiceMetadata;
0: import org.apache.aries.application.modelling.utils.ModellingConstants;
1: import org.osgi.framework.Constants;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * A service exported by a bundle. Provides an entry to DEPLOYMENT.MF
1:  */
1: public class ExportedServiceImpl implements ExportedService
1: {
1:   private final Logger logger = LoggerFactory.getLogger(ExportedServiceImpl.class);
1:   private final Map<String, Object> _attributes;
1:   private final Collection<String> _interfaces;
1:   private final Map<String, Object> _serviceProperties;
1:   private final String _name;
1:   private final int _ranking;
1:   private String _toString = null;
1: 
1:   /**
1:    * Constructor. 
1:    * @param name              "" will be changed to null
1:    * @param ranking           Service ranking
1:    * @param ifaces            Interfaces offered by the service
1:    * @param serviceProperties Service properties. 
1:    *                          We expect that osgi.service.blueprint.compname has been set if possible
1:    */
1:   public ExportedServiceImpl (String name, int ranking, Collection<String> ifaces, 
1:       Map<String, Object> serviceProperties ) 
1:   { 
1:      
1:     logger.debug(LOG_ENTRY,"ExportedServiceImpl", new Object[]{name, ranking, ifaces});
1:     _interfaces = new TreeSet<String>(ifaces);
1:     if (!"".equals(name)) { 
1:       _name = name;
1:     } else { 
1:       _name = null;
1:     }
1:     _ranking = ranking;
1:     if (serviceProperties == null) { 
1:       _serviceProperties = new HashMap<String, Object>();
1:     } else { 
1:       _serviceProperties = new HashMap<String, Object>(serviceProperties);
1:     }
1:     
1:     // Construct _attributes
1:     _attributes = new HashMap<String, Object>(_serviceProperties);
1:     
1:     // Turn interfaces into a comma separated String
1:     StringBuilder sb = new StringBuilder();
1:     for (String i : _interfaces) { 
1:       sb.append(i + ",");
1:     }
1:     sb = sb.deleteCharAt(sb.length()-1);
1:     _attributes.put(Constants.OBJECTCLASS, sb.toString());
1:     _attributes.put (Constants.SERVICE_RANKING, String.valueOf(_ranking));
1:     _attributes.put(ModellingConstants.OBR_SERVICE, ModellingConstants.OBR_SERVICE);
1:     logger.debug(LOG_EXIT,"ExportedServiceImpl");
1:   }
1:   
1:   /**
1:    * This constructor is for building ExportedServices from Export-Service manifest headers, 
1:    * which are deprecated in OSGi. 
1:    * @param ifaceName
1:    * @param attrs
1:    */
1:   @Deprecated 
1:   public ExportedServiceImpl (String ifaceName, Map<String, String> attrs) { 
1:     logger.debug(LOG_ENTRY,"ExportedServiceImpl", new Object[]{ ifaceName, attrs});
1:     _interfaces = new TreeSet<String> (Arrays.asList(ifaceName));
1:     _ranking = 0;
1:     _attributes = new HashMap<String, Object> (attrs);
1:     _attributes.put(Constants.OBJECTCLASS, ifaceName);
1:     _attributes.put (Constants.SERVICE_RANKING, String.valueOf(_ranking));
1:     _attributes.put(ModellingConstants.OBR_SERVICE, ModellingConstants.OBR_SERVICE);
1:     _serviceProperties = new HashMap<String, Object>();
1:     _name = null;
1:     logger.debug(LOG_EXIT,"ExportedServiceImpl");
1:    }
1:   
1: 
1:   public Map<String, Object> getAttributes() {    
1:     logger.debug(LOG_ENTRY,"getAttributes");
1:     logger.debug(LOG_EXIT, "getAttributes", _attributes);
1:     return Collections.unmodifiableMap(_attributes);
1:   }
1: 
1: 
1:   public ResourceType getType() {
1:     logger.debug(LOG_ENTRY,"getType");
1:     logger.debug(LOG_EXIT, "getType", ResourceType.SERVICE);
1:     return ResourceType.SERVICE;
1:   }
1: 
1: 
1:   public Collection<String> getInterfaces() {
1:     logger.debug(LOG_ENTRY,"getInterfaces");
1:     logger.debug(LOG_EXIT, "getInterfaces", _interfaces);
1:     return Collections.unmodifiableCollection(_interfaces);
1:   }
1: 
1: 
1:   public String getName() {
1:     logger.debug(LOG_ENTRY,"getName");
1:     logger.debug(LOG_EXIT, "getName", _name);
1:     return _name;
1:   }
1: 
1: 
1:   public int getRanking() {
1:     logger.debug(LOG_ENTRY,"getRanking");
1:     logger.debug(LOG_EXIT, "getRanking", _ranking);
1:     return _ranking;
1:   }
1: 
1: 
1:   public Map<String, Object> getServiceProperties() {
1:     logger.debug(LOG_ENTRY,"getServiceProperties");
1:     logger.debug(LOG_EXIT, "getServiceProperties", _serviceProperties);
1:     return Collections.unmodifiableMap(_serviceProperties);
1:   }
1: 
1: 
1:   public int compareTo(WrappedServiceMetadata o) {
1:     logger.debug(LOG_ENTRY, "compareTo", o);
0:     if (o == null) {
0:       logger.debug(LOG_EXIT, "compareTo", -1);
0:       return -1;      // shunt nulls to the end of any lists
1:     }
0:     int result = this.toString().compareTo(o.toString());
1:     logger.debug(LOG_EXIT,"compareTo", result);
1:     return result;
1:   }
1: 
1:   @Override
1:   public boolean equals (Object o) { 
1:     logger.debug(LOG_ENTRY, "equals", o);
0:     // Doubles as a null check
0:     if (!(o instanceof WrappedServiceMetadata)) { 
0:       logger.debug(LOG_EXIT, "equals", false);
0:       return false;
1:     }
1: 
0:     if (o==this) { 
0:       logger.debug(LOG_EXIT, "equals", true);
0:       return true;
1:     }
1:  
0:     boolean eq = this.toString().equals(o.toString());
1:     logger.debug(LOG_EXIT, "equals", eq);
1:     return eq;
1:   }
1:   
1:   
1:   @Override
1:   public int hashCode() {
1:     logger.debug(LOG_ENTRY, "hashCode");
0:     int result = toString().hashCode();
1:     logger.debug(LOG_EXIT, "hashCode", result);
1:     return result;
1:   }
1:   
1:   @Override 
1:   public String toString() { 
0:     if (_toString != null) { 
0:       return _toString;
1:     }
1:     
0:     List<String> interfaces = new ArrayList<String>(_interfaces);
0:     Collections.sort(interfaces);
1:     
0:     List<String> props = new ArrayList<String>();
0:     for (Map.Entry<String, Object> entry : _serviceProperties.entrySet()) {
0:       Object entryValue = entry.getValue();
0:       String entryText;
0:       if (entryValue.getClass().isArray()) { 
0:         // Turn arrays into comma separated Strings
0:         Object [] entryArray = (Object[]) entryValue;
1:         StringBuilder sb = new StringBuilder();
0:         for (Object o: entryArray) { 
0:           sb.append(String.valueOf(o) + ",");
1:         }
1:         sb = sb.deleteCharAt(sb.length()-1);
0:         entryText = sb.toString();
1:       } else { 
0:         entryText = String.valueOf(entryValue);
1:       }
0:       props.add ("<entry> key=\"" + entry.getKey() + "\" value=\"" + entryText + "\"/>");
1:     }
0:     Collections.sort(props);
1:     
0:     StringBuffer buf = new StringBuffer("<service>");
0:     if(_name != null) {
0:       buf.append("<name>" + _name + "</name>");
1:     }
0:     if (_interfaces.size() > 0) { 
0:       buf.append("<interfaces>");
1:     }
0:     for (String i : interfaces) { 
0:       buf.append("<value>" + i + "</value>");
1:     }
0:     if (_interfaces.size() > 0) { 
0:       buf.append("</interfaces>");
1:     }
0:     if (_serviceProperties.size() > 0) { 
0:       buf.append("<service-properties>");
1:     }
0:     for (String p : props) { 
0:       buf.append(p);
1:     }
0:     if (_serviceProperties.size() > 0) { 
0:       buf.append("</service-properties>");
1:     }
0:     buf.append("</service>");
0:     _toString = buf.toString();
0:     return _toString;
1:   }
1:   
1: 
1:   public boolean identicalOrDiffersOnlyByName(WrappedServiceMetadata wsmi) {
1:     logger.debug(LOG_ENTRY,"identicalOrDiffersOnlyByName", wsmi);
1:     
0:     if (this.equals(wsmi)) { 
0:       logger.debug(LOG_EXIT, "identicalOrDiffersOnlyByName", true);
0:       return true;
1:     }
1: 
0:     Set<String> myInterfaces = new HashSet<String>(_interfaces);
0:     Set<String> cmpInterfaces = new HashSet<String>(wsmi.getInterfaces());
0:     if (!myInterfaces.equals(cmpInterfaces)) { 
0:       logger.debug(LOG_EXIT, "identicalOrDiffersOnlyByName", false);
0:       return false;
1:     }
1:     
0:     boolean propertiesEqual = _serviceProperties.equals(wsmi.getServiceProperties());
0:     if (!propertiesEqual) {
0:       logger.debug(LOG_EXIT, "identicalOrDiffersOnlyByName", false);
0:       return false;
1:     }
0:     logger.debug(LOG_EXIT, "identicalOrDiffersOnlyByName", true);
0:     return true;
1:   }
1: 
1:   
1: }
============================================================================