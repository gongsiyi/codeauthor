1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:225bcae: package org.apache.aries.subsystem.core.internal;
2:777b216: 
1:d6eb080: import java.io.InputStream;
1:d6eb080: import java.lang.reflect.Method;
1:777b216: import java.util.ArrayList;
1:777b216: import java.util.Collections;
1:777b216: import java.util.Comparator;
1:777b216: import java.util.List;
1:777b216: 
1:5bd3bf6: import org.apache.aries.util.filesystem.FileSystem;
1:225bcae: import org.osgi.resource.Resource;
1:225bcae: import org.osgi.service.coordinator.Coordination;
1:225bcae: import org.osgi.service.coordinator.Participant;
1:777b216: import org.osgi.service.subsystem.Subsystem.State;
1:c49d412: 
1:225bcae: public class SubsystemResourceInstaller extends ResourceInstaller {
1:5bd3bf6: 	public SubsystemResourceInstaller(Coordination coordination, Resource resource, BasicSubsystem subsystem) {
1:307d743: 		super(coordination, resource, subsystem);
1:777b216: 	}
1:777b216: 
1:777b216: 	public Resource install() throws Exception {
1:d6eb080: 		if (resource instanceof BasicSubsystem)
1:d6eb080: 			return installAriesSubsystem((BasicSubsystem)resource);
1:225bcae: 		else if (resource instanceof RawSubsystemResource)
1:777b216: 			return installRawSubsystemResource((RawSubsystemResource)resource);
1:d6eb080: 		else if (resource instanceof SubsystemResource)
1:777b216: 			return installSubsystemResource((SubsystemResource)resource);
1:d6eb080: 		else {
1:d6eb080: 			return installRepositoryContent(resource);
1:48255a0: 		}
1:777b216: 	}
1:777b216: 
1:5bd3bf6: 	private void addChild(final BasicSubsystem child) {
1:e341c9b: 		// provisionTo will be null if the resource is an already installed
1:e341c9b: 		// dependency.
1:e341c9b: 		if (provisionTo == null)
1:5c35e50: 			return;
1:e341c9b: 		// Don't let a resource become a child of itself.
1:e341c9b: 		if (resource.equals(provisionTo))
1:e341c9b: 			return;
1:e341c9b: 		Activator.getInstance().getSubsystems().addChild(provisionTo, child, !isDependency());
1:777b216: 	}
1:777b216: 
1:5bd3bf6: 	private void addSubsystem(final BasicSubsystem subsystem) {
1:777b216: 		Activator.getInstance().getSubsystems().addSubsystem(subsystem);
1:777b216: 	}
1:777b216: 
1:a990e32: 	private BasicSubsystem installAriesSubsystem(final BasicSubsystem subsystem) throws Exception {
1:777b216: 		addChild(subsystem);
1:391a1aa: 		addReference(subsystem);
1:777b216: 		addConstituent(subsystem);
1:777b216: 		addSubsystem(subsystem);
1:5c35e50: 		installRegionContextBundle(subsystem);
1:c49d412: 		// This will emit the initial service event for INSTALLING subsystems.
1:c49d412: 		// The first event for RESOLVED (i.e. persisted) subsystems is emitted later.
1:a990e32: 		if (State.INSTALLING.equals(subsystem.getState())) {
1:c49d412: 			Activator.getInstance().getSubsystemServiceRegistrar().register(subsystem, this.subsystem);
1:a990e32: 			coordination.addParticipant(new Participant() {
1:a990e32: 				@Override
1:a990e32: 				public void ended(Coordination coordination) throws Exception {
1:a990e32: 					// Nothing.
1:a990e32: 				}
1:a990e32: 
1:a990e32: 				@Override
1:a990e32: 				public void failed(Coordination coordination) throws Exception {
1:a990e32: 					subsystem.setState(State.INSTALL_FAILED);
1:a990e32: 					subsystem.uninstall();
1:a990e32: 				}
1:a990e32: 			});
1:a990e32: 		}
1:e341c9b: 		Comparator<Resource> comparator = new InstallResourceComparator();
1:a990e32: 		// Install dependencies first if appropriate...
1:b66ad7c: 		if (!subsystem.isRoot() && Utils.isProvisionDependenciesInstall(subsystem)) {
1:b66ad7c: 			new InstallDependencies().install(subsystem, this.subsystem, coordination);
1:a990e32: 		}
1:e341c9b: 		// ...followed by content.
1:48255a0: 		// Simulate installation of shared content so that necessary relationships are established.
1:b66ad7c: 		for (Resource content : subsystem.getResource().getSharedContent()) {
1:b66ad7c: 			ResourceInstaller.newInstance(coordination, content, subsystem).install();
1:b66ad7c: 		}
1:b66ad7c: 		// Now take care of the installable content.
1:f9b3022: 		if (State.INSTALLING.equals(subsystem.getState())) {
1:e341c9b: 			List<Resource> installableContent = new ArrayList<Resource>(subsystem.getResource().getInstallableContent());
1:e341c9b: 			Collections.sort(installableContent, comparator);
1:e341c9b: 			for (Resource content : installableContent)
1:a990e32: 				ResourceInstaller.newInstance(coordination, content, subsystem).install();
1:777b216: 		}
1:391a1aa: 		// Only brand new subsystems should have acquired the INSTALLING state,
1:391a1aa: 		// in which case an INSTALLED event must be propagated.
1:a990e32: 		if (State.INSTALLING.equals(subsystem.getState()) && 
1:b66ad7c: 				Utils.isProvisionDependenciesInstall(subsystem)) {
1:391a1aa: 			subsystem.setState(State.INSTALLED);
1:a990e32: 		}
1:a990e32: 		else {
1:c49d412: 			// This is a persisted subsystem in the RESOLVED state. Emit the first service event.
1:c49d412: 			Activator.getInstance().getSubsystemServiceRegistrar().register(subsystem, this.subsystem);
1:a990e32: 		}
2:777b216: 		return subsystem;
1:777b216: 	}
1:777b216: 
1:5bd3bf6: 	private BasicSubsystem installRawSubsystemResource(RawSubsystemResource resource) throws Exception {
1:b66ad7c: 		SubsystemResource subsystemResource = new SubsystemResource(resource, provisionTo, coordination);
1:777b216: 		return installSubsystemResource(subsystemResource);
1:5c35e50: 	}
1:5c35e50: 
1:3c826b1: 	private void installRegionContextBundle(final BasicSubsystem subsystem) throws Exception {
1:5c35e50: 		if (!subsystem.isScoped())
1:777b216: 			return;
1:3c826b1: 		RegionContextBundleHelper.installRegionContextBundle(subsystem, coordination);
1:5c35e50: 	}
1:5c35e50: 
1:d6eb080: 	private BasicSubsystem installRepositoryContent(Resource resource) throws Exception {
1:d6eb080: 		Method method = resource.getClass().getMethod("getContent");
1:d6eb080: 		InputStream is = (InputStream)method.invoke(resource);
1:d6eb080: 		RawSubsystemResource rawSubsystemResource = new RawSubsystemResource(getLocation(), FileSystem.getFSRoot(is), subsystem);
1:307d743: 		return installRawSubsystemResource(rawSubsystemResource);
1:5c35e50: 	}
1:777b216: 
1:5bd3bf6: 	private BasicSubsystem installSubsystemResource(SubsystemResource resource) throws Exception {
1:5bd3bf6: 		BasicSubsystem subsystem = new BasicSubsystem(resource);
1:777b216: 		installAriesSubsystem(subsystem);
1:777b216: 		return subsystem;
1:777b216: 	}
1:777b216: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:b66ad7c
/////////////////////////////////////////////////////////////////////////
1: 		if (!subsystem.isRoot() && Utils.isProvisionDependenciesInstall(subsystem)) {
1: 			new InstallDependencies().install(subsystem, this.subsystem, coordination);
1: 		for (Resource content : subsystem.getResource().getSharedContent()) {
1: 			ResourceInstaller.newInstance(coordination, content, subsystem).install();
1: 		}
1: 		// Now take care of the installable content.
/////////////////////////////////////////////////////////////////////////
1: 				Utils.isProvisionDependenciesInstall(subsystem)) {
/////////////////////////////////////////////////////////////////////////
1: 		SubsystemResource subsystemResource = new SubsystemResource(resource, provisionTo, coordination);
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1: 	private BasicSubsystem installAriesSubsystem(final BasicSubsystem subsystem) throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 		if (State.INSTALLING.equals(subsystem.getState())) {
1: 			coordination.addParticipant(new Participant() {
1: 				@Override
1: 				public void ended(Coordination coordination) throws Exception {
1: 					// Nothing.
1: 				}
1: 
1: 				@Override
1: 				public void failed(Coordination coordination) throws Exception {
1: 					subsystem.setState(State.INSTALL_FAILED);
1: 					subsystem.uninstall();
1: 				}
1: 			});
1: 		}
1: 		// Install dependencies first if appropriate...
0: 		if (Utils.isProvisionDependenciesInstall(subsystem)) {
0: 		    new InstallDependencies().install(subsystem, this.subsystem, coordination);
0:         for (Resource content : subsystem.getResource().getSharedContent()) {
1:             ResourceInstaller.newInstance(coordination, content, subsystem).install();
1:         }
0:         // Now take care of the installable content.
/////////////////////////////////////////////////////////////////////////
1: 		if (State.INSTALLING.equals(subsystem.getState()) && 
0: 		        Utils.isProvisionDependenciesInstall(subsystem)) {
1: 		}
1: 		else {
1: 		}
/////////////////////////////////////////////////////////////////////////
commit:48255a0
/////////////////////////////////////////////////////////////////////////
1: 		// Simulate installation of shared content so that necessary relationships are established.
0: 		for (Resource content : subsystem.getResource().getSharedContent()) {
0: 			ResourceInstaller.newInstance(coordination, content, subsystem).install();
1: 		}
0: 		// Now take care of the installable content.
commit:3c826b1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	private void installRegionContextBundle(final BasicSubsystem subsystem) throws Exception {
1: 		RegionContextBundleHelper.installRegionContextBundle(subsystem, coordination);
commit:b107a42
/////////////////////////////////////////////////////////////////////////
commit:c49d412
/////////////////////////////////////////////////////////////////////////
0: import com.sun.org.apache.bcel.internal.generic.GETSTATIC;
1: 
/////////////////////////////////////////////////////////////////////////
1: 		// This will emit the initial service event for INSTALLING subsystems.
1: 		// The first event for RESOLVED (i.e. persisted) subsystems is emitted later.
0: 		if (State.INSTALLING.equals(subsystem.getState()))
1: 			Activator.getInstance().getSubsystemServiceRegistrar().register(subsystem, this.subsystem);
/////////////////////////////////////////////////////////////////////////
0: 		else
1: 			// This is a persisted subsystem in the RESOLVED state. Emit the first service event.
1: 			Activator.getInstance().getSubsystemServiceRegistrar().register(subsystem, this.subsystem);
commit:5c35e50
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import org.osgi.framework.BundleException;
/////////////////////////////////////////////////////////////////////////
1: 		installRegionContextBundle(subsystem);
/////////////////////////////////////////////////////////////////////////
0: 	private void installRegionContextBundle(final BasicSubsystem subsystem) throws BundleException, IOException {
1: 		if (!subsystem.isScoped())
1: 			return;
0: 		RegionContextBundleHelper.installRegionContextBundle(subsystem);
0: 		coordination.addParticipant(new Participant() {
0: 			@Override
0: 			public void ended(Coordination coordination) throws Exception {
0: 				// Nothing
1: 			}
1: 
0: 			@Override
0: 			public void failed(Coordination coordination) throws Exception {
0: 				RegionContextBundleHelper.uninstallRegionContextBundle(subsystem);
1: 			}
0: 		});
1: 	}
1: 	
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.FileSystem;
/////////////////////////////////////////////////////////////////////////
1: 	public SubsystemResourceInstaller(Coordination coordination, Resource resource, BasicSubsystem subsystem) {
0: 		BasicSubsystem result;
0: 		else if (resource instanceof BasicSubsystem)
0: 			result = installAriesSubsystem((BasicSubsystem)resource);
/////////////////////////////////////////////////////////////////////////
1: 	private void addChild(final BasicSubsystem child) {
/////////////////////////////////////////////////////////////////////////
1: 	private void addSubsystem(final BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
0: 	private BasicSubsystem installAriesSubsystem(BasicSubsystem subsystem) throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 	private BasicSubsystem installRawSubsystemResource(RawSubsystemResource resource) throws Exception {
0: 	private BasicSubsystem installRepositoryContent(RepositoryContent resource) throws Exception {
0: 		RawSubsystemResource rawSubsystemResource = new RawSubsystemResource(getLocation(), FileSystem.getFSRoot(resource.getContent()));
1: 	private BasicSubsystem installSubsystemResource(SubsystemResource resource) throws Exception {
1: 		BasicSubsystem subsystem = new BasicSubsystem(resource);
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
0: 		// If the state is null, this is a brand new subsystem. If the state is
0: 		// not null, this is a persisted subsystem. For brand new subsystems,
0: 		// an INSTALLING event must be propagated.
0: 		if (subsystem.getState() == null)
0: 			subsystem.setState(State.INSTALLING);
1: 		addReference(subsystem);
/////////////////////////////////////////////////////////////////////////
1: 		// Only brand new subsystems should have acquired the INSTALLING state,
1: 		// in which case an INSTALLED event must be propagated.
0: 		if (State.INSTALLING.equals(subsystem.getState()))
1: 			subsystem.setState(State.INSTALLED);
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:e341c9b
/////////////////////////////////////////////////////////////////////////
1: 		// provisionTo will be null if the resource is an already installed
1: 		// dependency.
1: 		if (provisionTo == null)
1: 		// Don't let a resource become a child of itself.
1: 		if (resource.equals(provisionTo))
1: 			return;
1: 		Activator.getInstance().getSubsystems().addChild(provisionTo, child, !isDependency());
/////////////////////////////////////////////////////////////////////////
0: 				Activator.getInstance().getSubsystems().removeChild(provisionTo, child);
/////////////////////////////////////////////////////////////////////////
0: 		if (!isDependency())
/////////////////////////////////////////////////////////////////////////
1: 		Comparator<Resource> comparator = new InstallResourceComparator();
0: 		// Install dependencies first...
0: 		List<Resource> dependencies = new ArrayList<Resource>(subsystem.getResource().getInstallableDependencies());
0: 		Collections.sort(dependencies, comparator);
0: 		for (Resource dependency : dependencies)
0: 			ResourceInstaller.newInstance(coordination, dependency, subsystem).install();
0: 		for (Resource dependency : subsystem.getResource().getSharedDependencies()) {
0: 			// TODO This needs some more thought. The following check
0: 			// protects against a child subsystem that has its parent as a
0: 			// dependency. Are there other places of concern as well? Is it
0: 			// only the current parent that is of concern or should all
0: 			// parents be checked?
0: 			if (!dependency.equals(this.subsystem))
1: 		// ...followed by content.
1: 		List<Resource> installableContent = new ArrayList<Resource>(subsystem.getResource().getInstallableContent());
1: 		Collections.sort(installableContent, comparator);
1: 		for (Resource content : installableContent)
0: 			ResourceInstaller.newInstance(coordination, content, subsystem).install();
0: 		// Simulate installation of shared content so that necessary relationships are established.
0: 		for (Resource content : subsystem.getResource().getSharedContent())
0: 			ResourceInstaller.newInstance(coordination, content, subsystem).install();
commit:2b13b05
/////////////////////////////////////////////////////////////////////////
0: 		AriesSubsystem result;
0: 			result = installRepositoryContent((RepositoryContent)resource);
0: 			result = installAriesSubsystem((AriesSubsystem)resource);
0: 			result = installRawSubsystemResource((RawSubsystemResource)resource);
0: 			result = installSubsystemResource((SubsystemResource)resource);
0: 		return result;
/////////////////////////////////////////////////////////////////////////
0: 	private AriesSubsystem installAriesSubsystem(AriesSubsystem subsystem) throws Exception {
/////////////////////////////////////////////////////////////////////////
0: 	private AriesSubsystem installRawSubsystemResource(RawSubsystemResource resource) throws Exception {
0: 	private AriesSubsystem installRepositoryContent(RepositoryContent resource) throws Exception {
0: 	private AriesSubsystem installSubsystemResource(SubsystemResource resource) throws Exception {
commit:307d743
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	public SubsystemResourceInstaller(Coordination coordination, Resource resource, AriesSubsystem subsystem) {
1: 		super(coordination, resource, subsystem);
/////////////////////////////////////////////////////////////////////////
0: 		Activator.getInstance().getSubsystems().addChild(subsystem, child, true);
/////////////////////////////////////////////////////////////////////////
0: 		if (!isTransitive())
0: 			addReference(subsystem);
/////////////////////////////////////////////////////////////////////////
0: 				ResourceInstaller.newInstance(coordination, dependency, subsystem).install();
0: 				ResourceInstaller.newInstance(coordination, dependency, subsystem).install();
0: 				ResourceInstaller.newInstance(coordination, content, subsystem).install();
0: 				ResourceInstaller.newInstance(coordination, content, subsystem).install();
/////////////////////////////////////////////////////////////////////////
0: 	private Resource installRepositoryContent(RepositoryContent resource) throws Exception {
0: 		RawSubsystemResource rawSubsystemResource = new RawSubsystemResource(getLocation(), resource.getContent());
1: 		return installRawSubsystemResource(rawSubsystemResource);
0: //		return AccessController.doPrivileged(new InstallAction(getLocation(), resource.getContent(), provisionTo, null, coordination, true));
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.List;
1: import org.osgi.service.subsystem.Subsystem.State;
1: 	public Resource install() throws Exception {
0: 		if (resource instanceof RepositoryContent)
0: 			return installRepositoryContent((RepositoryContent)resource);
0: 			return installAriesSubsystem((AriesSubsystem)resource);
1: 			return installRawSubsystemResource((RawSubsystemResource)resource);
1: 			return installSubsystemResource((SubsystemResource)resource);
0: 		if (provisionTo == null || subsystem == null)
1: 			return;
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	private void addSubsystem(final AriesSubsystem subsystem) {
1: 		Activator.getInstance().getSubsystems().addSubsystem(subsystem);
0: 		coordination.addParticipant(new Participant() {
0: 			@Override
0: 			public void ended(Coordination arg0) throws Exception {
0: 				// Nothing
1: 			}
1: 	
0: 			@Override
0: 			public void failed(Coordination arg0) throws Exception {
0: 				Activator.getInstance().getSubsystems().removeSubsystem(subsystem);
1: 			}
0: 		});
1: 	}
1: 	
0: //	private void addSubsystemServiceImportToSharingPolicy(
0: //			RegionFilterBuilder builder, AriesSubsystem subsystem) throws InvalidSyntaxException {
0: //		builder.allow(
0: //				RegionFilter.VISIBLE_SERVICE_NAMESPACE,
0: //				new StringBuilder("(&(")
0: //						.append(org.osgi.framework.Constants.OBJECTCLASS)
0: //						.append('=').append(Subsystem.class.getName())
0: //						.append(")(")
0: //						.append(Constants.SubsystemServicePropertyRegions)
0: //						.append('=').append(subsystem.getRegion().getName())
0: //						.append("))").toString());
0: //	}
1: 	
0: //	private void addSubsystemServiceImportToSharingPolicy(RegionFilterBuilder builder, Region to, AriesSubsystem subsystem)
0: //			throws InvalidSyntaxException, BundleException {
0: //		if (to.getName().equals(AriesSubsystem.ROOT_REGION))
0: //			addSubsystemServiceImportToSharingPolicy(builder, subsystem);
0: //		else {
0: //			to = Activator.getInstance().getSubsystems().getRootSubsystem().getRegion();
0: //			builder = to.getRegionDigraph().createRegionFilterBuilder();
0: //			addSubsystemServiceImportToSharingPolicy(builder, subsystem);
0: //			RegionFilter regionFilter = builder.build();
0: //			subsystem.getRegion().connectRegion(to, regionFilter);
0: //		}
0: //	}
1: 	
0: 	private Resource installAriesSubsystem(AriesSubsystem subsystem) throws Exception {
1: 		addChild(subsystem);
1: 		addConstituent(subsystem);
0: 		addReference(subsystem);
0: 		// TODO Is this check really necessary?
0: 		if (!State.INSTALLING.equals(subsystem.getState()))
1: 			return subsystem;
1: 		addSubsystem(subsystem);
0: 		if (subsystem.isScoped())
0: 			RegionContextBundleHelper.installRegionContextBundle(subsystem);
0: 		Activator.getInstance().getSubsystemServiceRegistrar().register(subsystem, this.subsystem);
0: 		// Set up the sharing policy before installing the resources so that the
0: 		// environment can filter out capabilities from dependencies being
0: 		// provisioned to regions that are out of scope. This doesn't hurt
0: 		// anything since the resources are disabled from resolving anyway.
0: //		setImportIsolationPolicy(subsystem);
0: 		if (!subsystem.isRoot()) {
0: 			Comparator<Resource> comparator = new InstallResourceComparator();
0: 			// Install dependencies first...
0: 			List<Resource> dependencies = new ArrayList<Resource>(subsystem.getResource().getInstallableDependencies());
0: 			Collections.sort(dependencies, comparator);
0: 			for (Resource dependency : dependencies)
0: 				ResourceInstaller.newInstance(coordination, dependency, subsystem, true).install();
0: 			for (Resource dependency : subsystem.getResource().getSharedDependencies())
0: 				ResourceInstaller.newInstance(coordination, dependency, subsystem, true).install();
0: 			// ...followed by content.
0: 			List<Resource> installableContent = new ArrayList<Resource>(subsystem.getResource().getInstallableContent());
0: 			Collections.sort(installableContent, comparator);
0: 			for (Resource content : installableContent)
0: 				ResourceInstaller.newInstance(coordination, content, subsystem, false).install();
0: 			// Simulate installation of shared content so that necessary relationships are established.
0: 			for (Resource content : subsystem.getResource().getSharedContent())
0: 				ResourceInstaller.newInstance(coordination, content, subsystem, false).install();
1: 		}
0: 		subsystem.setState(State.INSTALLED);
1: 		return subsystem;
1: 	}
1: 	
0: 	private Resource installRawSubsystemResource(RawSubsystemResource resource) throws Exception {
0: 		SubsystemResource subsystemResource = new SubsystemResource(resource, provisionTo);
1: 		return installSubsystemResource(subsystemResource);
1: 	}
1: 	
0: 	private Resource installRepositoryContent(RepositoryContent resource) {
0: 		return AccessController.doPrivileged(new InstallAction(getLocation(), resource.getContent(), provisionTo, null, coordination, true));
1: 	}
1: 	
0: 	private Resource installSubsystemResource(SubsystemResource resource) throws Exception {
0: 		AriesSubsystem subsystem = new AriesSubsystem(resource);
1: 		installAriesSubsystem(subsystem);
0: 		if (subsystem.isAutostart())
0: 			subsystem.start();
1: 		return subsystem;
1: 	}
1: 	
0: //	private void setImportIsolationPolicy(AriesSubsystem subsystem) throws BundleException, IOException, InvalidSyntaxException, URISyntaxException {
0: //		if (subsystem.isRoot() || !subsystem.isScoped())
0: //			return;
0: //		Region region = subsystem.getRegion();
0: //		Region from = region;
0: //		RegionFilterBuilder builder = from.getRegionDigraph().createRegionFilterBuilder();
0: //		Region to = ((AriesSubsystem)subsystem.getParents().iterator().next()).getRegion();
0: //		addSubsystemServiceImportToSharingPolicy(builder, to, subsystem);
0: //		// TODO Is this check really necessary? Looks like it was done at the beginning of this method.
0: //		if (subsystem.isScoped()) {
0: //			// Both applications and composites have Import-Package headers that require processing.
0: //			// In the case of applications, the header is generated.
0: //			Header<?> header = subsystem.getSubsystemManifest().getImportPackageHeader();
0: //			setImportIsolationPolicy(builder, (ImportPackageHeader)header, subsystem);
0: //			// Both applications and composites have Require-Capability headers that require processing.
0: //			// In the case of applications, the header is generated.
0: //			header = subsystem.getSubsystemManifest().getRequireCapabilityHeader();
0: //			setImportIsolationPolicy(builder, (RequireCapabilityHeader)header, subsystem);
0: //			// Both applications and composites have Subsystem-ImportService headers that require processing.
0: //			// In the case of applications, the header is generated.
0: //			header = subsystem.getSubsystemManifest().getSubsystemImportServiceHeader();
0: //			setImportIsolationPolicy(builder, (SubsystemImportServiceHeader)header, subsystem);
0: //			header = subsystem.getSubsystemManifest().getRequireBundleHeader();
0: //			setImportIsolationPolicy(builder, (RequireBundleHeader)header, subsystem);
0: //		}
0: //		RegionFilter regionFilter = builder.build();
0: //		from.connectRegion(to, regionFilter);
0: //	}
0: //	
0: //	private void setImportIsolationPolicy(RegionFilterBuilder builder, ImportPackageHeader header, AriesSubsystem subsystem) throws InvalidSyntaxException {
0: //		if (header == null)
0: //			return;
0: //		String policy = RegionFilter.VISIBLE_PACKAGE_NAMESPACE;
0: //		for (ImportPackageHeader.Clause clause : header.getClauses()) {
0: //			ImportPackageRequirement requirement = new ImportPackageRequirement(clause, subsystem);
0: //			String filter = requirement.getDirectives().get(ImportPackageRequirement.DIRECTIVE_FILTER);
0: //			builder.allow(policy, filter);
0: //		}
0: //	}
0: //	
0: //	private void setImportIsolationPolicy(RegionFilterBuilder builder, RequireBundleHeader header, AriesSubsystem subsystem) throws InvalidSyntaxException {
0: //		if (header == null)
0: //			return;
0: //		for (RequireBundleHeader.Clause clause : header.getClauses()) {
0: //			RequireBundleRequirement requirement = new RequireBundleRequirement(clause, subsystem);
0: //			String policy = RegionFilter.VISIBLE_REQUIRE_NAMESPACE;
0: //			String filter = requirement.getDirectives().get(RequireBundleRequirement.DIRECTIVE_FILTER);
0: //			builder.allow(policy, filter);
0: //		}
0: //	}
0: //	
0: //	private void setImportIsolationPolicy(RegionFilterBuilder builder, RequireCapabilityHeader header, AriesSubsystem subsystem) throws InvalidSyntaxException {
0: //		if (header == null)
0: //			return;
0: //		for (RequireCapabilityHeader.Clause clause : header.getClauses()) {
0: //			RequireCapabilityRequirement requirement = new RequireCapabilityRequirement(clause, subsystem);
0: //			String policy = requirement.getNamespace();
0: //			String filter = requirement.getDirectives().get(RequireCapabilityRequirement.DIRECTIVE_FILTER);
0: //			builder.allow(policy, filter);
0: //		}
0: //	}
0: //	
0: //	private void setImportIsolationPolicy(RegionFilterBuilder builder, SubsystemImportServiceHeader header, AriesSubsystem subsystem) throws InvalidSyntaxException {
0: //		if (header == null)
0: //			return;
0: //		for (SubsystemImportServiceHeader.Clause clause : header.getClauses()) {
0: //			SubsystemImportServiceRequirement requirement = new SubsystemImportServiceRequirement(clause, subsystem);
0: //			String policy = RegionFilter.VISIBLE_SERVICE_NAMESPACE;
0: //			String filter = requirement.getDirectives().get(SubsystemImportServiceRequirement.DIRECTIVE_FILTER);
0: //			builder.allow(policy, filter);
0: //		}
0: //	}
commit:225bcae
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
0: 
0: import java.security.AccessController;
0: 
1: import org.osgi.resource.Resource;
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.coordinator.Participant;
0: import org.osgi.service.repository.RepositoryContent;
0: 
1: public class SubsystemResourceInstaller extends ResourceInstaller {
0: 	public SubsystemResourceInstaller(Coordination coordination, Resource resource, AriesSubsystem subsystem, boolean transitive) {
0: 		super(coordination, resource, subsystem, transitive);
0: 	}
0: 	
0: 	public void install() throws Exception {
0: 		final AriesSubsystem subsystem;
0: 		if (resource instanceof RepositoryContent) {
0: 			AccessController.doPrivileged(new InstallAction(getLocation(), ((RepositoryContent)resource).getContent(), provisionTo, null, coordination, true));
0: 			return;
0: 		}
0: 		else if (resource instanceof AriesSubsystem)
0: 			subsystem = (AriesSubsystem)resource;
1: 		else if (resource instanceof RawSubsystemResource)
0: 			subsystem = new AriesSubsystem(new SubsystemResource((RawSubsystemResource)resource, provisionTo), provisionTo);
0: 		else
0: 			subsystem = new AriesSubsystem((SubsystemResource)resource, provisionTo);
0: 		addChild(subsystem);
0: 		addConstituent(subsystem);
0: 		addReference(subsystem);
0: 		subsystem.install(coordination, provisionTo);
0: 	}
0: 	
0: 	private void addChild(final AriesSubsystem child) {
0: 		Activator.getInstance().getSubsystems().addChild(subsystem, child);
0: 		coordination.addParticipant(new Participant() {
0: 			@Override
0: 			public void ended(Coordination arg0) throws Exception {
0: 				// Nothing
0: 			}
0: 
0: 			@Override
0: 			public void failed(Coordination arg0) throws Exception {
0: 				Activator.getInstance().getSubsystems().removeChild(subsystem, child);
0: 			}
0: 		});
0: 	}
0: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		if (resource instanceof BasicSubsystem)
1: 			return installAriesSubsystem((BasicSubsystem)resource);
0: 			return installRawSubsystemResource((RawSubsystemResource)resource);
1: 		else if (resource instanceof SubsystemResource)
0: 			return installSubsystemResource((SubsystemResource)resource);
1: 		else {
1: 			return installRepositoryContent(resource);
0: 		}
/////////////////////////////////////////////////////////////////////////
1: 	private BasicSubsystem installRepositoryContent(Resource resource) throws Exception {
1: 		Method method = resource.getClass().getMethod("getContent");
1: 		InputStream is = (InputStream)method.invoke(resource);
1: 		RawSubsystemResource rawSubsystemResource = new RawSubsystemResource(getLocation(), FileSystem.getFSRoot(is), subsystem);
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:79b20bc
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 		RawSubsystemResource rawSubsystemResource = new RawSubsystemResource(getLocation(), FileSystem.getFSRoot(resource.getContent()), subsystem);
0: 
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:f9b3022
/////////////////////////////////////////////////////////////////////////
1: 		if (State.INSTALLING.equals(subsystem.getState())) {
0: 			List<Resource> installableContent = new ArrayList<Resource>(subsystem.getResource().getInstallableContent());
0: 			Collections.sort(installableContent, comparator);
0: 			for (Resource content : installableContent)
0: 				ResourceInstaller.newInstance(coordination, content, subsystem).install();
0: 		}
============================================================================