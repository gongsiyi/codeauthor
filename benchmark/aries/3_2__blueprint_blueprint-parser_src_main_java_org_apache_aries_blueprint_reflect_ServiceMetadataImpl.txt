1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.reflect;
1:f13c6ac: 
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.Collection;
1:f13c6ac: import java.util.Collections;
1:f13c6ac: import java.util.List;
1:f13c6ac: 
1:6414875: import org.apache.aries.blueprint.mutable.MutableServiceMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.MapEntry;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Metadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.NonNullMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.RegistrationListener;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Target;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Implementation of ServiceMetadata
1:f13c6ac:  *
1:76b662a:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public class ServiceMetadataImpl extends ComponentMetadataImpl implements MutableServiceMetadata {
1:f13c6ac: 
1:f13c6ac:     private Target serviceComponent;
1:f13c6ac:     private List<String> interfaceNames;
1:f13c6ac:     private int autoExport;
1:f13c6ac:     private List<MapEntry> serviceProperties;
1:f13c6ac:     private int ranking;
1:f13c6ac:     private Collection<RegistrationListener> registrationListeners;
1:f13c6ac: 
1:f13c6ac:     public ServiceMetadataImpl() {
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public ServiceMetadataImpl(ServiceMetadata source) {
1:f13c6ac:         super(source);
1:f13c6ac:         this.serviceComponent = MetadataUtil.cloneTarget(source.getServiceComponent());
1:f13c6ac:         this.interfaceNames = new ArrayList<String>(source.getInterfaces());
1:f13c6ac:         this.autoExport = source.getAutoExport();
1:f13c6ac:         for (MapEntry serviceProperty : source.getServiceProperties()) {
1:f13c6ac:             addServiceProperty(new MapEntryImpl(serviceProperty));
1:f13c6ac:         }
1:f13c6ac:         this.ranking = source.getRanking();
1:f13c6ac:         for (RegistrationListener listener : source.getRegistrationListeners()) {
1:f13c6ac:             addRegistrationListener(new RegistrationListenerImpl(listener));
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public Target getServiceComponent() {
1:f13c6ac:         return serviceComponent;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setServiceComponent(Target exportedComponent) {
1:f13c6ac:         this.serviceComponent = exportedComponent;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public List<String> getInterfaces() {
1:f13c6ac:         if (this.interfaceNames == null) {
1:f13c6ac:             return Collections.emptyList();
1:f13c6ac:         } else {
1:f13c6ac:             return Collections.unmodifiableList(this.interfaceNames);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setInterfaceNames(List<String> interfaceNames) {
1:f13c6ac:         this.interfaceNames = interfaceNames != null ? new ArrayList<String>(interfaceNames) : null;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void addInterface(String interfaceName) {
1:f13c6ac:         if (this.interfaceNames == null) {
1:f13c6ac:             this.interfaceNames = new ArrayList<String>();
1:f13c6ac:         }
1:f13c6ac:         this.interfaceNames.add(interfaceName);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void removeInterface(String interfaceName) {
1:f13c6ac:         if (this.interfaceNames != null) {
1:f13c6ac:             this.interfaceNames.remove(interfaceName);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public int getAutoExport() {
1:f13c6ac:         return this.autoExport;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setAutoExport(int autoExport) {
1:f13c6ac:         this.autoExport = autoExport;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public List<MapEntry> getServiceProperties() {
1:f13c6ac:         if (this.serviceProperties == null) {
1:f13c6ac:             return Collections.emptyList();
1:f13c6ac:         } else {
1:f13c6ac:             return Collections.unmodifiableList(this.serviceProperties);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setServiceProperties(List<MapEntry> serviceProperties) {
1:f13c6ac:         this.serviceProperties = serviceProperties != null ? new ArrayList<MapEntry>(serviceProperties) : null;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void addServiceProperty(MapEntry serviceProperty) {
1:f13c6ac:         if (this.serviceProperties == null) {
1:f13c6ac:             this.serviceProperties = new ArrayList<MapEntry>();
1:f13c6ac:         }
1:f13c6ac:         this.serviceProperties.add(serviceProperty);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public MapEntry addServiceProperty(NonNullMetadata key, Metadata value) {
1:f13c6ac:         MapEntry serviceProperty = new MapEntryImpl(key, value);
1:f13c6ac:         addServiceProperty(serviceProperty);
1:f13c6ac:         return serviceProperty;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void removeServiceProperty(MapEntry serviceProperty) {
1:f13c6ac:         if (this.serviceProperties != null) {
1:f13c6ac:             this.serviceProperties.remove(serviceProperty);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public int getRanking() {
1:f13c6ac:         return ranking;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setRanking(int ranking) {
1:f13c6ac:         this.ranking = ranking;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public Collection<RegistrationListener> getRegistrationListeners() {
1:f13c6ac:         if (this.registrationListeners == null) {
1:f13c6ac:             return Collections.emptySet();
1:f13c6ac:         } else {
1:f13c6ac:             return Collections.unmodifiableCollection(this.registrationListeners);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setRegistrationListeners(Collection<RegistrationListener> registrationListeners) {
1:f13c6ac:         this.registrationListeners = registrationListeners;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void addRegistrationListener(RegistrationListener registrationListenerMetadata) {
1:f13c6ac:         if (this.registrationListeners == null) {
1:f13c6ac:             this.registrationListeners = new ArrayList<RegistrationListener>();
1:f13c6ac:         }
1:f13c6ac:         this.registrationListeners.add(registrationListenerMetadata);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public RegistrationListener addRegistrationListener(Target listenerComponent, String registrationMethodName, String unregistrationMethodName) {
1:f13c6ac:         RegistrationListener listener = new RegistrationListenerImpl(listenerComponent, registrationMethodName,  unregistrationMethodName);
1:f13c6ac:         addRegistrationListener(listener);
1:f13c6ac:         return listener;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void removeRegistrationListener(RegistrationListener listener) {
1:f13c6ac:         if (this.registrationListeners != null) {
1:f13c6ac:             this.registrationListeners.remove(listener);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     @Override
1:f13c6ac:     public String toString() {
1:f13c6ac:         return "ServiceMetadata[" +
1:f13c6ac:                 "id='" + id + '\'' +
1:f13c6ac:                 ", activation=" + activation +
1:f13c6ac:                 ", dependsOn=" + dependsOn +
1:f13c6ac:                 ", exportedComponent=" + serviceComponent +
1:f13c6ac:                 ", interfaces=" + interfaceNames +
1:f13c6ac:                 ", autoExportMode=" + autoExport +
1:f13c6ac:                 ", serviceProperties=" + serviceProperties +
1:f13c6ac:                 ", ranking=" + ranking +
1:f13c6ac:                 ", registrationListeners=" + registrationListeners +
1:f13c6ac:                 ']';
1:f13c6ac:     }
1:f13c6ac: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.reflect;
1: import org.apache.aries.blueprint.mutable.MutableServiceMetadata;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.reflect;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.List;
1: 
0: import org.apache.geronimo.blueprint.mutable.MutableServiceMetadata;
1: import org.osgi.service.blueprint.reflect.MapEntry;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: import org.osgi.service.blueprint.reflect.NonNullMetadata;
1: import org.osgi.service.blueprint.reflect.RegistrationListener;
1: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1: import org.osgi.service.blueprint.reflect.Target;
1: 
1: /**
1:  * Implementation of ServiceMetadata
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 760378 $, $Date: 2009-03-31 11:31:38 +0200 (Tue, 31 Mar 2009) $
1:  */
1: public class ServiceMetadataImpl extends ComponentMetadataImpl implements MutableServiceMetadata {
1: 
1:     private Target serviceComponent;
1:     private List<String> interfaceNames;
1:     private int autoExport;
1:     private List<MapEntry> serviceProperties;
1:     private int ranking;
1:     private Collection<RegistrationListener> registrationListeners;
1: 
1:     public ServiceMetadataImpl() {
1:     }
1:     
1:     public ServiceMetadataImpl(ServiceMetadata source) {
1:         super(source);
1:         this.serviceComponent = MetadataUtil.cloneTarget(source.getServiceComponent());
1:         this.interfaceNames = new ArrayList<String>(source.getInterfaces());
1:         this.autoExport = source.getAutoExport();
1:         for (MapEntry serviceProperty : source.getServiceProperties()) {
1:             addServiceProperty(new MapEntryImpl(serviceProperty));
1:         }
1:         this.ranking = source.getRanking();
1:         for (RegistrationListener listener : source.getRegistrationListeners()) {
1:             addRegistrationListener(new RegistrationListenerImpl(listener));
1:         }
1:     }
1: 
1:     public Target getServiceComponent() {
1:         return serviceComponent;
1:     }
1: 
1:     public void setServiceComponent(Target exportedComponent) {
1:         this.serviceComponent = exportedComponent;
1:     }
1: 
1:     public List<String> getInterfaces() {
1:         if (this.interfaceNames == null) {
1:             return Collections.emptyList();
1:         } else {
1:             return Collections.unmodifiableList(this.interfaceNames);
1:         }
1:     }
1: 
1:     public void setInterfaceNames(List<String> interfaceNames) {
1:         this.interfaceNames = interfaceNames != null ? new ArrayList<String>(interfaceNames) : null;
1:     }
1: 
1:     public void addInterface(String interfaceName) {
1:         if (this.interfaceNames == null) {
1:             this.interfaceNames = new ArrayList<String>();
1:         }
1:         this.interfaceNames.add(interfaceName);
1:     }
1: 
1:     public void removeInterface(String interfaceName) {
1:         if (this.interfaceNames != null) {
1:             this.interfaceNames.remove(interfaceName);
1:         }
1:     }
1: 
1:     public int getAutoExport() {
1:         return this.autoExport;
1:     }
1: 
1:     public void setAutoExport(int autoExport) {
1:         this.autoExport = autoExport;
1:     }
1: 
1:     public List<MapEntry> getServiceProperties() {
1:         if (this.serviceProperties == null) {
1:             return Collections.emptyList();
1:         } else {
1:             return Collections.unmodifiableList(this.serviceProperties);
1:         }
1:     }
1: 
1:     public void setServiceProperties(List<MapEntry> serviceProperties) {
1:         this.serviceProperties = serviceProperties != null ? new ArrayList<MapEntry>(serviceProperties) : null;
1:     }
1: 
1:     public void addServiceProperty(MapEntry serviceProperty) {
1:         if (this.serviceProperties == null) {
1:             this.serviceProperties = new ArrayList<MapEntry>();
1:         }
1:         this.serviceProperties.add(serviceProperty);
1:     }
1: 
1:     public MapEntry addServiceProperty(NonNullMetadata key, Metadata value) {
1:         MapEntry serviceProperty = new MapEntryImpl(key, value);
1:         addServiceProperty(serviceProperty);
1:         return serviceProperty;
1:     }
1: 
1:     public void removeServiceProperty(MapEntry serviceProperty) {
1:         if (this.serviceProperties != null) {
1:             this.serviceProperties.remove(serviceProperty);
1:         }
1:     }
1: 
1:     public int getRanking() {
1:         return ranking;
1:     }
1: 
1:     public void setRanking(int ranking) {
1:         this.ranking = ranking;
1:     }
1: 
1:     public Collection<RegistrationListener> getRegistrationListeners() {
1:         if (this.registrationListeners == null) {
1:             return Collections.emptySet();
1:         } else {
1:             return Collections.unmodifiableCollection(this.registrationListeners);
1:         }
1:     }
1: 
1:     public void setRegistrationListeners(Collection<RegistrationListener> registrationListeners) {
1:         this.registrationListeners = registrationListeners;
1:     }
1: 
1:     public void addRegistrationListener(RegistrationListener registrationListenerMetadata) {
1:         if (this.registrationListeners == null) {
1:             this.registrationListeners = new ArrayList<RegistrationListener>();
1:         }
1:         this.registrationListeners.add(registrationListenerMetadata);
1:     }
1: 
1:     public RegistrationListener addRegistrationListener(Target listenerComponent, String registrationMethodName, String unregistrationMethodName) {
1:         RegistrationListener listener = new RegistrationListenerImpl(listenerComponent, registrationMethodName,  unregistrationMethodName);
1:         addRegistrationListener(listener);
1:         return listener;
1:     }
1: 
1:     public void removeRegistrationListener(RegistrationListener listener) {
1:         if (this.registrationListeners != null) {
1:             this.registrationListeners.remove(listener);
1:         }
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         return "ServiceMetadata[" +
1:                 "id='" + id + '\'' +
1:                 ", activation=" + activation +
1:                 ", dependsOn=" + dependsOn +
1:                 ", exportedComponent=" + serviceComponent +
1:                 ", interfaces=" + interfaceNames +
1:                 ", autoExportMode=" + autoExport +
1:                 ", serviceProperties=" + serviceProperties +
1:                 ", ranking=" + ranking +
1:                 ", registrationListeners=" + registrationListeners +
1:                 ']';
1:     }
1: }
============================================================================