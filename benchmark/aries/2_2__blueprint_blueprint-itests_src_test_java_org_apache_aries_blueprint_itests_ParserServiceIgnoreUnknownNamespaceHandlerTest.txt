1:3cfe3e2: /**
1:3cfe3e2:  * Licensed to the Apache Software Foundation (ASF) under one
1:3cfe3e2:  * or more contributor license agreements.  See the NOTICE file
1:3cfe3e2:  * distributed with this work for additional information
1:3cfe3e2:  * regarding copyright ownership.  The ASF licenses this file
1:3cfe3e2:  * to you under the Apache License, Version 2.0 (the
1:3cfe3e2:  * "License"); you may not use this file except in compliance
1:3cfe3e2:  * with the License.  You may obtain a copy of the License at
1:3cfe3e2:  *
1:3cfe3e2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3cfe3e2:  *
1:3cfe3e2:  * Unless required by applicable law or agreed to in writing,
1:3cfe3e2:  * software distributed under the License is distributed on an
1:3cfe3e2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3cfe3e2:  * KIND, either express or implied.  See the License for the
1:3cfe3e2:  * specific language governing permissions and limitations
1:3cfe3e2:  * under the License.
1:3cfe3e2:  */
1:3cfe3e2: package org.apache.aries.blueprint.itests;
3:3cfe3e2: 
1:ca98e35: import static org.apache.aries.blueprint.itests.Helper.blueprintBundles;
1:ca98e35: import static org.ops4j.pax.exam.CoreOptions.frameworkProperty;
1:ca98e35: import static org.ops4j.pax.exam.CoreOptions.keepCaches;
1:ca98e35: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1:ca98e35: 
1:3cfe3e2: import java.io.InputStream;
1:3cfe3e2: import java.net.URL;
1:3cfe3e2: 
1:3cfe3e2: import org.apache.aries.blueprint.itests.cm.service.Foo;
1:3cfe3e2: import org.apache.aries.blueprint.itests.cm.service.FooFactory;
1:3cfe3e2: import org.apache.aries.blueprint.itests.cm.service.FooInterface;
1:3cfe3e2: import org.apache.aries.blueprint.services.ParserService;
1:3cfe3e2: import org.junit.After;
1:3cfe3e2: import org.junit.Before;
1:3cfe3e2: import org.junit.Test;
1:3cfe3e2: import org.ops4j.pax.exam.Option;
1:3cfe3e2: import org.ops4j.pax.exam.ProbeBuilder;
1:3cfe3e2: import org.ops4j.pax.exam.TestProbeBuilder;
1:3cfe3e2: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:3cfe3e2: import org.osgi.framework.BundleException;
1:3cfe3e2: import org.osgi.framework.Constants;
1:3cfe3e2: 
1:3cfe3e2: 
1:3cfe3e2: public class ParserServiceIgnoreUnknownNamespaceHandlerTest extends AbstractBlueprintIntegrationTest {
1:ca98e35:     private static final String CM_BUNDLE = "org.apache.aries.blueprint.cm";
1:ca98e35:     private static final String TEST_BUNDLE = "org.apache.aries.blueprint.cm.test.b1";
1:ca98e35: 
1:ca98e35:     @ProbeBuilder
1:ca98e35:     public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1:ca98e35:         probe.setHeader(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName());
1:ca98e35:         probe.setHeader(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName());
1:ca98e35:         return probe;
1:ca98e35:     }
1:3cfe3e2: 
1:3cfe3e2:     @org.ops4j.pax.exam.Configuration
1:3cfe3e2:     public Option[] config() {
1:ca98e35:         InputStream testBundle = createTestBundle();
1:ca98e35:         return new Option[] {
1:ca98e35:             baseOptions(),
1:ca98e35:             frameworkProperty("org.apache.aries.blueprint.parser.service.ignore.unknown.namespace.handlers").value("true"),
1:ca98e35:             blueprintBundles(),
1:ca98e35:             keepCaches(),
1:ca98e35:             streamBundle(testBundle)
1:ca98e35:         };
1:ca98e35:     }
1:ca98e35: 
1:ca98e35:     private InputStream createTestBundle() {
1:ca98e35:         return TinyBundles.bundle()
1:3cfe3e2:     		.add(FooInterface.class)
1:3cfe3e2:     		.add(Foo.class)
1:3cfe3e2:     		.add(FooFactory.class)
1:ca98e35:     		.add("OSGI-INF/blueprint/context.xml", getResource("IgnoreUnknownNamespaceTest.xml"))
1:3cfe3e2:     		.set(Constants.BUNDLE_SYMBOLICNAME, TEST_BUNDLE)
1:3cfe3e2:     		.set(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName())
1:3cfe3e2:     		.set(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName())
1:3cfe3e2:     		.build(TinyBundles.withBnd());
4:3cfe3e2:     }
1:3cfe3e2: 
1:ca98e35:     @Before
1:ca98e35:     public void stopCM() throws BundleException {
1:ca98e35:         context().getBundleByName(CM_BUNDLE).stop();
1:ca98e35:     }
1:3cfe3e2: 
1:ca98e35:     @After
1:ca98e35:     public void startCM() throws BundleException {
1:ca98e35:         context().getBundleByName(CM_BUNDLE).start();
1:ca98e35:     }
1:3cfe3e2: 
1:3cfe3e2:     @Test
1:3cfe3e2:     public void testIgnoreTrue() throws Exception {
1:3cfe3e2:         ParserService parserService = context().getService(ParserService.class);
1:3cfe3e2:         URL blueprintXML = context().getBundleByName(TEST_BUNDLE).getEntry("OSGI-INF/blueprint/context.xml");
1:3cfe3e2:         // ensure there is no error parsing while CM is stopped
1:3cfe3e2:         parserService.parse(blueprintXML, context().getBundleByName(TEST_BUNDLE));
1:3cfe3e2:     }
1:3cfe3e2: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ca98e35
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.itests.Helper.blueprintBundles;
1: import static org.ops4j.pax.exam.CoreOptions.frameworkProperty;
1: import static org.ops4j.pax.exam.CoreOptions.keepCaches;
1: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static final String CM_BUNDLE = "org.apache.aries.blueprint.cm";
1:     private static final String TEST_BUNDLE = "org.apache.aries.blueprint.cm.test.b1";
1: 
1:     @ProbeBuilder
1:     public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1:         probe.setHeader(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName());
1:         probe.setHeader(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName());
1:         return probe;
1:     }
1:         InputStream testBundle = createTestBundle();
1:         return new Option[] {
1:             baseOptions(),
1:             frameworkProperty("org.apache.aries.blueprint.parser.service.ignore.unknown.namespace.handlers").value("true"),
1:             blueprintBundles(),
1:             keepCaches(),
1:             streamBundle(testBundle)
1:         };
1:     }
1: 
1:     private InputStream createTestBundle() {
1:         return TinyBundles.bundle()
1:     		.add("OSGI-INF/blueprint/context.xml", getResource("IgnoreUnknownNamespaceTest.xml"))
1:     @Before
1:     public void stopCM() throws BundleException {
1:         context().getBundleByName(CM_BUNDLE).stop();
1:     }
1:     @After
1:     public void startCM() throws BundleException {
1:         context().getBundleByName(CM_BUNDLE).start();
1:     }
author:Tom Watson
-------------------------------------------------------------------------------
commit:3cfe3e2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
1: import java.io.InputStream;
1: import java.net.URL;
1: 
0: import javax.inject.Inject;
1: 
1: import org.apache.aries.blueprint.itests.cm.service.Foo;
1: import org.apache.aries.blueprint.itests.cm.service.FooFactory;
1: import org.apache.aries.blueprint.itests.cm.service.FooInterface;
1: import org.apache.aries.blueprint.services.ParserService;
1: import org.junit.After;
1: import org.junit.Before;
0: import org.junit.Rule;
1: import org.junit.Test;
0: import org.junit.rules.TestName;
0: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.ProbeBuilder;
1: import org.ops4j.pax.exam.TestProbeBuilder;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.Constants;
1: 
1: 
1: public class ParserServiceIgnoreUnknownNamespaceHandlerTest extends AbstractBlueprintIntegrationTest {
0: 	private static final String CM_BUNDLE = "org.apache.aries.blueprint.cm";
0: 	private static final String TEST_BUNDLE = "org.apache.aries.blueprint.cm.test.b1";
1: 	
0: 	@ProbeBuilder
0: 	public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
0: 		probe.setHeader(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName());
0:     	probe.setHeader(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName());
0: 		return probe;
1: 	}
1: 
1:     @org.ops4j.pax.exam.Configuration
1:     public Option[] config() {
0:     	InputStream testBundle = TinyBundles.bundle()
1:     		.add(FooInterface.class)
1:     		.add(Foo.class)
1:     		.add(FooFactory.class)
0:     		.add("OSGI-INF/blueprint/context.xml", 
0:     				getResource("ManagedServiceFactoryTest.xml"))
1:     		.set(Constants.BUNDLE_SYMBOLICNAME, TEST_BUNDLE)
1:     		.set(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName())
1:     		.set(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName())
1:     		.build(TinyBundles.withBnd());
0:     	return new Option[] {
0:     			baseOptions(),
0:                 CoreOptions.frameworkProperty("org.apache.aries.blueprint.parser.service.ignore.unknown.namespace.handlers").value("true"),
0:     			Helper.blueprintBundles(),
0:     			CoreOptions.keepCaches(),
0:     			CoreOptions.streamBundle(testBundle)
0:     	};
1:     }
1: 
0: 	@Before
0: 	public void stopCM() throws BundleException {
0: 		context().getBundleByName(CM_BUNDLE).stop();
1: 	}
1: 
0: 	@After
0: 	public void startCM() throws BundleException {
0: 		context().getBundleByName(CM_BUNDLE).start();
1: 	}
1: 
1:     @Test
1:     public void testIgnoreTrue() throws Exception {
1:         ParserService parserService = context().getService(ParserService.class);
1:         URL blueprintXML = context().getBundleByName(TEST_BUNDLE).getEntry("OSGI-INF/blueprint/context.xml");
1:         // ensure there is no error parsing while CM is stopped
1:         parserService.parse(blueprintXML, context().getBundleByName(TEST_BUNDLE));
1:     }
1: }
============================================================================