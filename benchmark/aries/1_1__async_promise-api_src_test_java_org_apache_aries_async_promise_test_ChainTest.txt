1:14ceeb1: /*
1:14ceeb1:  * Licensed to the Apache Software Foundation (ASF) under one
1:14ceeb1:  * or more contributor license agreements.  See the NOTICE file
1:14ceeb1:  * distributed with this work for additional information
1:14ceeb1:  * regarding copyright ownership.  The ASF licenses this file
1:14ceeb1:  * to you under the Apache License, Version 2.0 (the
1:14ceeb1:  * "License"); you may not use this file except in compliance
1:14ceeb1:  * with the License.  You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing,
1:14ceeb1:  * software distributed under the License is distributed on an
1:14ceeb1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:14ceeb1:  * KIND, either express or implied.  See the License for the
1:14ceeb1:  * specific language governing permissions and limitations
1:14ceeb1:  * under the License.
1:14ceeb1:  */
1:0d3d319: package org.apache.aries.async.promise.test;
1:0d3d319: 
1:8b05938: import static java.util.concurrent.TimeUnit.MILLISECONDS;
1:8b05938: import static java.util.concurrent.TimeUnit.NANOSECONDS;
1:8b05938: import static java.util.concurrent.TimeUnit.SECONDS;
1:8b05938: import static org.junit.Assert.assertEquals;
1:8b05938: import static org.junit.Assert.assertFalse;
1:8b05938: import static org.junit.Assert.assertNull;
1:8b05938: import static org.junit.Assert.assertSame;
1:8b05938: import static org.junit.Assert.assertTrue;
1:0d3d319: 
1:8b05938: import java.util.concurrent.CountDownLatch;
1:8b05938: import java.util.concurrent.TimeUnit;
1:8b05938: import java.util.concurrent.atomic.AtomicBoolean;
1:8b05938: import java.util.concurrent.atomic.AtomicLong;
1:8b05938: 
1:8b05938: import org.junit.Test;
1:8b05938: import org.osgi.util.function.Callback;
1:8b05938: import org.osgi.util.promise.Deferred;
1:8b05938: import org.osgi.util.promise.Failure;
1:8b05938: import org.osgi.util.promise.Promise;
1:8b05938: import org.osgi.util.promise.Promises;
1:8b05938: import org.osgi.util.promise.Success;
1:8b05938: import org.osgi.util.promise.TimeoutException;
1:0d3d319: 
1:0d3d319: public class ChainTest {
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThenSuccess() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319: 
1:0d3d319:         Promise<String> chain = def.getPromise().then(new Success<String, String>() {
1:0d3d319:             @Override
1:0d3d319:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:0d3d319:                 return Promises.resolved("success!");
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319:         assertFalse("chain not resolved", chain.isDone());
1:8b05938: 
1:0d3d319:         def.resolve("ok");
1:0d3d319:         assertTrue("chain resolved", chain.isDone());
1:0d3d319:         assertEquals("chain value matches", "success!", chain.getValue());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThenSuccessDeferred() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         final Deferred<String> def2 = new Deferred<String>();
1:0d3d319: 
1:0d3d319:         Promise<String> chain = def.getPromise().then(new Success<String, String>() {
1:0d3d319:             @Override
1:0d3d319:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:0d3d319:                 return def2.getPromise();
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319:         assertFalse("chain not resolved", chain.isDone());
1:0d3d319: 
1:0d3d319:         def.resolve("ok");
1:0d3d319:         assertFalse("chain still not resolved", chain.isDone());
1:0d3d319: 
1:0d3d319:         def2.resolve("success!");
1:0d3d319:         assertTrue("chain resolved", chain.isDone());
1:0d3d319:         assertEquals("chain value matches", "success!", chain.getValue());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThenSuccessFailed() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         final Promise<String> promise = def.getPromise();
1:0d3d319:         final Throwable thenFail = new Throwable("failed!");
1:0d3d319: 
1:0d3d319:         Promise<String> chain = promise.then(new Success<String, String>() {
1:0d3d319:             @Override
1:0d3d319:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:0d3d319:                 return Promises.failed(thenFail);
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319:         assertFalse("chain not resolved", chain.isDone());
1:0d3d319: 
1:0d3d319:         def.resolve("ok");
1:0d3d319:         assertTrue("chain resolved", chain.isDone());
1:0d3d319:         assertEquals("chain failure matches", thenFail, chain.getFailure());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThenSuccessException() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         final Promise<String> promise = def.getPromise();
1:0d3d319:         final Exception thenException = new Exception("then exception!");
1:0d3d319: 
1:0d3d319:         Promise<String> chain = promise.then(new Success<String, String>() {
1:0d3d319:             @Override
1:0d3d319:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:0d3d319:                 throw thenException;
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319:         assertFalse("chain not resolved", chain.isDone());
1:0d3d319: 
1:0d3d319:         def.resolve("ok");
1:0d3d319:         assertTrue("chain resolved", chain.isDone());
1:0d3d319:         assertEquals("chain failure matches", thenException, chain.getFailure());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThenFail() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         final Promise<String> promise = def.getPromise();
1:0d3d319: 
1:0d3d319:         Promise<String> chain = promise.then(null, new Failure() {
1:0d3d319:             @Override
1:0d3d319:             public void fail(Promise<?> resolved) throws Exception {
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319:         assertFalse("chain not resolved", chain.isDone());
1:0d3d319: 
1:0d3d319:         Throwable failure = new Throwable("fail!");
1:0d3d319:         def.fail(failure);
1:0d3d319:         assertTrue("chain resolved", chain.isDone());
1:0d3d319:         assertEquals("chain failure matches", failure, chain.getFailure());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThenFailNoCallback() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         final Promise<String> promise = def.getPromise();
1:0d3d319: 
1:8b05938:         Promise<String> chain = promise.then((Success)null);
1:0d3d319:         assertFalse("chain not resolved", chain.isDone());
1:0d3d319: 
1:0d3d319:         Throwable failure = new Throwable("fail!");
1:0d3d319:         def.fail(failure);
1:0d3d319:         assertTrue("chain resolved", chain.isDone());
1:0d3d319:         assertEquals("chain failure matches", failure, chain.getFailure());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThenFailException() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         final Promise<String> promise = def.getPromise();
1:0d3d319:         final Exception thenException = new Exception("eek!");
1:0d3d319: 
1:0d3d319:         Promise<String> chain = promise.then(null, new Failure() {
1:0d3d319:             @Override
1:0d3d319:             public void fail(Promise<?> resolved) throws Exception {
1:0d3d319:                 throw thenException;
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319:         assertFalse("chain not resolved", chain.isDone());
1:0d3d319: 
1:0d3d319:         def.fail(new Throwable("failed"));
1:0d3d319:         assertTrue("chain resolved", chain.isDone());
1:0d3d319:         assertEquals("chain failure matches", thenException, chain.getFailure());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThenNull() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         final Promise<String> promise = def.getPromise();
1:8b05938:         Promise<String> chain = promise.then((Success)null);
1:0d3d319:         assertFalse("chain not resolved", chain.isDone());
1:0d3d319: 
1:0d3d319:         def.resolve("ok");
1:0d3d319:         assertTrue("chain resolved", chain.isDone());
1:0d3d319:         assertNull("chain value null", chain.getValue());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThenNullResolved() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         def.resolve("ok");
1:8b05938:         Promise<String> chain = def.getPromise().then((Success)null);
1:0d3d319: 
1:0d3d319:         assertTrue("chain resolved", chain.isDone());
1:0d3d319:         assertNull("chain value null", chain.getValue());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThenAlreadyResolved() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         final Promise<String> promise = def.getPromise();
1:0d3d319:         def.resolve("ok");
1:0d3d319: 
1:0d3d319:         Promise<String> chain = promise.then(new Success<String, String>() {
1:0d3d319:             @Override
1:0d3d319:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:0d3d319:                 return Promises.resolved("success!");
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319:         assertTrue("chain resolved", chain.isDone());
1:0d3d319:         assertEquals("chain value matches", "success!", chain.getValue());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testExampleChain() throws Exception {
1:0d3d319:         Success<String, String> doubler = new Success<String, String>() {
1:0d3d319:             public Promise<String> call(Promise<String> p) throws Exception {
1:0d3d319:                 return Promises.resolved(p.getValue() + p.getValue());
1:0d3d319:             }
1:0d3d319:         };
1:0d3d319: 
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         final Promise<String> foo = def.getPromise().then(doubler).then(doubler);
1:0d3d319: 
1:0d3d319:         def.resolve("hello!");
1:0d3d319:         assertEquals("doubler matches", "hello!hello!hello!hello!", foo.getValue());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThen2() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319: 
1:0d3d319:         Promise<String> chain1 = def.getPromise().then(new Success<String, String>() {
1:0d3d319:             @Override
1:0d3d319:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:0d3d319:                 return Promises.resolved("success1");
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319:         assertFalse("chain not resolved", chain1.isDone());
1:0d3d319: 
1:0d3d319:         Promise<String> chain2 = def.getPromise().then(new Success<String, String>() {
1:0d3d319:             @Override
1:0d3d319:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:0d3d319:                 return Promises.resolved("success2");
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319:         assertFalse("chain not resolved", chain2.isDone());
1:0d3d319: 
1:0d3d319:         def.resolve("ok");
1:0d3d319:         assertTrue("chain1 resolved", chain1.isDone());
1:0d3d319:         assertEquals("chain1 value matches", "success1", chain1.getValue());
1:0d3d319:         assertTrue("chain2 resolved", chain2.isDone());
1:0d3d319:         assertEquals("chain2 value matches", "success2", chain2.getValue());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThenResolved() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         def.resolve("already resolved");
1:0d3d319: 
1:0d3d319:         Promise<String> chain = def.getPromise().then(new Success<String, String>() {
1:0d3d319:             @Override
1:0d3d319:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:0d3d319:                 return Promises.resolved("success!");
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319:         assertTrue("chain resolved", chain.isDone());
1:0d3d319: 
1:0d3d319:         assertEquals("chain value matches", "success!", chain.getValue());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testThenResolved2() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         def.resolve("already resolved");
1:0d3d319: 
1:0d3d319:         Promise<String> chain = def.getPromise().then(new Success<String, String>() {
1:0d3d319:             @Override
1:0d3d319:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:0d3d319:                 return Promises.resolved("success1");
1:0d3d319:             }
1:0d3d319:         }).then(new Success<String, String>() {
1:0d3d319:             @Override
1:0d3d319:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:0d3d319:                 return Promises.resolved("success2");
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319: 
1:0d3d319:         assertTrue("chain resolved", chain.isDone());
1:0d3d319: 
1:0d3d319:         assertEquals("chain value matches", "success2", chain.getValue());
1:0d3d319:     }
1:8b05938:     
1:8b05938:     @Test
1:8b05938:     public void testThenCallbackSuccess() throws Exception {
1:8b05938:     	Deferred<String> def = new Deferred<String>();
1:8b05938: 
1:8b05938:     	final AtomicBoolean run = new AtomicBoolean(false);
1:8b05938:     	
1:8b05938:         Promise<String> chain = def.getPromise().then(new Callback() {
1:8b05938:             @Override
1:8b05938:             public void run() throws Exception {
1:8b05938:                 run.set(true);
1:8b05938:             }
1:8b05938:         });
1:8b05938:         assertFalse("chain should not be resolved", chain.isDone());
1:8b05938:         assertFalse("callback should not have been run", run.get());
1:8b05938: 
1:8b05938:         def.resolve("ok");
1:8b05938:         assertTrue("chain resolved", chain.isDone());
1:8b05938:         assertEquals("chain value matches", "ok", chain.getValue());
1:8b05938:         assertTrue("callback should have been run", run.get());
1:8b05938:     	
1:8b05938:     }
1:8b05938: 
1:8b05938:     @Test
1:8b05938:     public void testThenCallbackFail() throws Exception {
1:8b05938:     	Deferred<String> def = new Deferred<String>();
1:8b05938:     	
1:8b05938:     	final AtomicBoolean run = new AtomicBoolean(false);
1:8b05938:     	
1:8b05938:     	Promise<String> chain = def.getPromise().then(new Callback() {
1:8b05938:     		@Override
1:8b05938:     		public void run() throws Exception {
1:8b05938:     			run.set(true);
1:8b05938:     		}
1:8b05938:     	});
1:8b05938:     	
1:8b05938:     	Exception failure = new Exception("bang!");
1:8b05938:     	
1:8b05938:     	assertFalse("chain should not be resolved", chain.isDone());
1:8b05938:     	assertFalse("callback should not have been run", run.get());
1:8b05938:     	
1:8b05938:     	def.fail(failure);
1:8b05938:     	assertTrue("chain resolved", chain.isDone());
1:8b05938:     	assertSame("chain value matches", failure, chain.getFailure());
1:8b05938:     	assertTrue("callback should have been run", run.get());
1:8b05938:     	
1:8b05938:     }
1:8b05938: 
1:8b05938:     @Test
1:8b05938:     public void testThenCallbackThrowsExceptionSuccess() throws Exception {
1:8b05938:     	Deferred<String> def = new Deferred<String>();
1:8b05938:     	
1:8b05938:     	final Exception failure = new Exception("bang!");
1:8b05938:     	
1:8b05938:     	Promise<String> chain = def.getPromise().then(new Callback() {
1:8b05938:     		@Override
1:8b05938:     		public void run() throws Exception {
1:8b05938:     			throw failure;
1:8b05938:     		}
1:8b05938:     	});
1:8b05938:     	
1:8b05938:     	assertFalse("chain should not be resolved", chain.isDone());
1:8b05938:     	
1:8b05938:     	def.resolve("ok");
1:8b05938:     	assertTrue("chain resolved", chain.isDone());
1:8b05938:     	assertSame("chain value matches", failure, chain.getFailure());
1:8b05938:     	
1:8b05938:     }
1:8b05938: 
1:8b05938:     @Test
1:8b05938:     public void testThenCallbackThrowsExceptionFail() throws Exception {
1:8b05938:     	Deferred<String> def = new Deferred<String>();
1:8b05938:     	
1:8b05938:     	final Exception failure = new Exception("bang!");
1:8b05938:     	
1:8b05938:     	Promise<String> chain = def.getPromise().then(new Callback() {
1:8b05938:     		@Override
1:8b05938:     		public void run() throws Exception {
1:8b05938:     			throw failure;
1:8b05938:     		}
1:8b05938:     	});
1:8b05938:     	
1:8b05938:     	assertFalse("chain should not be resolved", chain.isDone());
1:8b05938:     	
1:8b05938:     	def.fail(new IllegalStateException());
1:8b05938:     	assertTrue("chain resolved", chain.isDone());
1:8b05938:     	assertSame("chain value matches", failure, chain.getFailure());
1:8b05938:     	
1:8b05938:     }
1:8b05938:     
1:8b05938:     @Test
1:8b05938:     public void testTimeout() throws Exception {
1:8b05938:     	Deferred<String> def = new Deferred<String>();
1:8b05938: 
1:8b05938:         Promise<String> promise = def.getPromise();
1:8b05938:         
1:8b05938:         long start = System.nanoTime();
1:8b05938:         final CountDownLatch latch = new CountDownLatch(1);
1:8b05938:         final AtomicLong finish = new AtomicLong();
1:8b05938:         
1:8b05938: 		Promise<String> chain = promise.timeout(500)
1:8b05938: 				.onResolve(new Runnable() {
1:8b05938: 					@Override
1:8b05938: 					public void run() {
1:8b05938: 						finish.set(System.nanoTime());
1:8b05938: 						latch.countDown();
1:8b05938: 					}
1:8b05938: 				});
1:8b05938: 		
1:8b05938: 		assertFalse("promise should not be resolved", promise.isDone());
1:8b05938: 		assertFalse("chain should not be resolved", chain.isDone());
1:8b05938: 		
1:8b05938: 		assertTrue("Did not time out!", latch.await(1, SECONDS));
1:8b05938: 		assertTrue("Finished too fast", NANOSECONDS.toMillis(finish.get() - start) > 450);
1:8b05938: 
1:8b05938: 		assertFalse("promise should not be resolved", promise.isDone());
1:8b05938: 		assertTrue("chain should now be resolved", chain.isDone());
1:8b05938: 		
1:8b05938:         assertTrue("Should fail with a timeout exception", chain.getFailure() instanceof TimeoutException);
1:8b05938:     }
1:8b05938: 
1:8b05938:     @Test
1:8b05938:     public void testTimeoutSuccess() throws Exception {
1:8b05938:     	Deferred<String> def = new Deferred<String>();
1:8b05938:     	
1:8b05938:     	Promise<String> promise = def.getPromise();
1:8b05938:     	
1:8b05938:     	final CountDownLatch latch = new CountDownLatch(1);
1:8b05938:     	
1:8b05938:     	Promise<String> chain = promise.timeout(500)
1:8b05938:     			.onResolve(new Runnable() {
1:8b05938:     				@Override
1:8b05938:     				public void run() {
1:8b05938:     					latch.countDown();
1:8b05938:     				}
1:8b05938:     			});
1:8b05938:     	
1:8b05938:     	assertFalse("promise should not be resolved", promise.isDone());
1:8b05938:     	assertFalse("chain should not be resolved", chain.isDone());
1:8b05938:     	
1:8b05938:     	def.resolve("ok");
1:8b05938:     	
1:8b05938:     	assertTrue("Did not eagerly complete!", latch.await(100, MILLISECONDS));
1:8b05938:     	
1:8b05938:     	assertTrue("promise should not be resolved", promise.isDone());
1:8b05938:     	assertTrue("chain should now be resolved", chain.isDone());
1:8b05938:     	
1:8b05938:     	assertEquals(promise.getValue(), chain.getValue());
1:8b05938:     }
1:8b05938:     
1:8b05938:     @Test
1:8b05938:     public void testTimeoutFailure() throws Exception{
1:8b05938:     	Deferred<String> def = new Deferred<String>();
1:8b05938:     	
1:8b05938:     	Promise<String> promise = def.getPromise();
1:8b05938:     	
1:8b05938:     	final CountDownLatch latch = new CountDownLatch(1);
1:8b05938:     	
1:8b05938:     	Promise<String> chain = promise.timeout(500)
1:8b05938:     			.onResolve(new Runnable() {
1:8b05938:     				@Override
1:8b05938:     				public void run() {
1:8b05938:     					latch.countDown();
1:8b05938:     				}
1:8b05938:     			});
1:8b05938:     	
1:8b05938:     	assertFalse("promise should not be resolved", promise.isDone());
1:8b05938:     	assertFalse("chain should not be resolved", chain.isDone());
1:8b05938:     	
1:8b05938:     	Exception failure = new Exception("bang!");
1:8b05938:     	
1:8b05938:     	def.fail(failure);
1:8b05938:     	
1:8b05938:     	assertTrue("Did not eagerly complete!", latch.await(100, MILLISECONDS));
1:8b05938:     	
1:8b05938:     	assertTrue("promise should not be resolved", promise.isDone());
1:8b05938:     	assertTrue("chain should now be resolved", chain.isDone());
1:0d3d319:     	
1:8b05938:     	assertSame(promise.getFailure(), chain.getFailure());
1:8b05938:     }
1:0d3d319: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8b05938
/////////////////////////////////////////////////////////////////////////
1: import static java.util.concurrent.TimeUnit.MILLISECONDS;
1: import static java.util.concurrent.TimeUnit.NANOSECONDS;
1: import static java.util.concurrent.TimeUnit.SECONDS;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.assertTrue;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import org.junit.Test;
1: import org.osgi.util.function.Callback;
1: import org.osgi.util.promise.Deferred;
1: import org.osgi.util.promise.Failure;
1: import org.osgi.util.promise.Promise;
1: import org.osgi.util.promise.Promises;
1: import org.osgi.util.promise.Success;
1: import org.osgi.util.promise.TimeoutException;
/////////////////////////////////////////////////////////////////////////
1:         Promise<String> chain = promise.then((Success)null);
/////////////////////////////////////////////////////////////////////////
1:         Promise<String> chain = promise.then((Success)null);
/////////////////////////////////////////////////////////////////////////
1:         Promise<String> chain = def.getPromise().then((Success)null);
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
1:     public void testThenCallbackSuccess() throws Exception {
1:     	Deferred<String> def = new Deferred<String>();
1: 
1:     	final AtomicBoolean run = new AtomicBoolean(false);
1:     	
1:         Promise<String> chain = def.getPromise().then(new Callback() {
1:             @Override
1:             public void run() throws Exception {
1:                 run.set(true);
1:             }
1:         });
1:         assertFalse("chain should not be resolved", chain.isDone());
1:         assertFalse("callback should not have been run", run.get());
1: 
1:         def.resolve("ok");
1:         assertTrue("chain resolved", chain.isDone());
1:         assertEquals("chain value matches", "ok", chain.getValue());
1:         assertTrue("callback should have been run", run.get());
1:     	
1:     }
1: 
1:     @Test
1:     public void testThenCallbackFail() throws Exception {
1:     	Deferred<String> def = new Deferred<String>();
1:     	
1:     	final AtomicBoolean run = new AtomicBoolean(false);
1:     	
1:     	Promise<String> chain = def.getPromise().then(new Callback() {
1:     		@Override
1:     		public void run() throws Exception {
1:     			run.set(true);
1:     		}
1:     	});
1:     	
1:     	Exception failure = new Exception("bang!");
1:     	
1:     	assertFalse("chain should not be resolved", chain.isDone());
1:     	assertFalse("callback should not have been run", run.get());
1:     	
1:     	def.fail(failure);
1:     	assertTrue("chain resolved", chain.isDone());
1:     	assertSame("chain value matches", failure, chain.getFailure());
1:     	assertTrue("callback should have been run", run.get());
1:     	
1:     }
1: 
1:     @Test
1:     public void testThenCallbackThrowsExceptionSuccess() throws Exception {
1:     	Deferred<String> def = new Deferred<String>();
1:     	
1:     	final Exception failure = new Exception("bang!");
1:     	
1:     	Promise<String> chain = def.getPromise().then(new Callback() {
1:     		@Override
1:     		public void run() throws Exception {
1:     			throw failure;
1:     		}
1:     	});
1:     	
1:     	assertFalse("chain should not be resolved", chain.isDone());
1:     	
1:     	def.resolve("ok");
1:     	assertTrue("chain resolved", chain.isDone());
1:     	assertSame("chain value matches", failure, chain.getFailure());
1:     	
1:     }
1: 
1:     @Test
1:     public void testThenCallbackThrowsExceptionFail() throws Exception {
1:     	Deferred<String> def = new Deferred<String>();
1:     	
1:     	final Exception failure = new Exception("bang!");
1:     	
1:     	Promise<String> chain = def.getPromise().then(new Callback() {
1:     		@Override
1:     		public void run() throws Exception {
1:     			throw failure;
1:     		}
1:     	});
1:     	
1:     	assertFalse("chain should not be resolved", chain.isDone());
1:     	
1:     	def.fail(new IllegalStateException());
1:     	assertTrue("chain resolved", chain.isDone());
1:     	assertSame("chain value matches", failure, chain.getFailure());
1:     	
1:     }
1:     
1:     @Test
1:     public void testTimeout() throws Exception {
1:     	Deferred<String> def = new Deferred<String>();
1: 
1:         Promise<String> promise = def.getPromise();
1:         
1:         long start = System.nanoTime();
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         final AtomicLong finish = new AtomicLong();
1:         
1: 		Promise<String> chain = promise.timeout(500)
1: 				.onResolve(new Runnable() {
1: 					@Override
1: 					public void run() {
1: 						finish.set(System.nanoTime());
1: 						latch.countDown();
1: 					}
1: 				});
1: 		
1: 		assertFalse("promise should not be resolved", promise.isDone());
1: 		assertFalse("chain should not be resolved", chain.isDone());
1: 		
1: 		assertTrue("Did not time out!", latch.await(1, SECONDS));
1: 		assertTrue("Finished too fast", NANOSECONDS.toMillis(finish.get() - start) > 450);
1: 
1: 		assertFalse("promise should not be resolved", promise.isDone());
1: 		assertTrue("chain should now be resolved", chain.isDone());
1: 		
1:         assertTrue("Should fail with a timeout exception", chain.getFailure() instanceof TimeoutException);
1:     }
1: 
1:     @Test
1:     public void testTimeoutSuccess() throws Exception {
1:     	Deferred<String> def = new Deferred<String>();
1:     	
1:     	Promise<String> promise = def.getPromise();
1:     	
1:     	final CountDownLatch latch = new CountDownLatch(1);
1:     	
1:     	Promise<String> chain = promise.timeout(500)
1:     			.onResolve(new Runnable() {
1:     				@Override
1:     				public void run() {
1:     					latch.countDown();
1:     				}
1:     			});
1:     	
1:     	assertFalse("promise should not be resolved", promise.isDone());
1:     	assertFalse("chain should not be resolved", chain.isDone());
1:     	
1:     	def.resolve("ok");
1:     	
1:     	assertTrue("Did not eagerly complete!", latch.await(100, MILLISECONDS));
1:     	
1:     	assertTrue("promise should not be resolved", promise.isDone());
1:     	assertTrue("chain should now be resolved", chain.isDone());
1:     	
1:     	assertEquals(promise.getValue(), chain.getValue());
1:     }
1:     
1:     @Test
1:     public void testTimeoutFailure() throws Exception{
1:     	Deferred<String> def = new Deferred<String>();
1:     	
1:     	Promise<String> promise = def.getPromise();
1:     	
1:     	final CountDownLatch latch = new CountDownLatch(1);
1:     	
1:     	Promise<String> chain = promise.timeout(500)
1:     			.onResolve(new Runnable() {
1:     				@Override
1:     				public void run() {
1:     					latch.countDown();
1:     				}
1:     			});
1:     	
1:     	assertFalse("promise should not be resolved", promise.isDone());
1:     	assertFalse("chain should not be resolved", chain.isDone());
1:     	
1:     	Exception failure = new Exception("bang!");
1:     	
1:     	def.fail(failure);
1:     	
1:     	assertTrue("Did not eagerly complete!", latch.await(100, MILLISECONDS));
1:     	
1:     	assertTrue("promise should not be resolved", promise.isDone());
1:     	assertTrue("chain should now be resolved", chain.isDone());
1:     	
1:     	assertSame(promise.getFailure(), chain.getFailure());
1:     }
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:0d3d319
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.async.promise.test;
1: 
0: import org.junit.Test;
0: import org.osgi.util.promise.*;
1: 
0: import static org.junit.Assert.*;
1: 
1: public class ChainTest {
1: 
1:     @Test
1:     public void testThenSuccess() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1: 
1:         Promise<String> chain = def.getPromise().then(new Success<String, String>() {
1:             @Override
1:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:                 return Promises.resolved("success!");
1:             }
1:         });
1:         assertFalse("chain not resolved", chain.isDone());
1: 
1:         def.resolve("ok");
1:         assertTrue("chain resolved", chain.isDone());
1:         assertEquals("chain value matches", "success!", chain.getValue());
1:     }
1: 
1:     @Test
1:     public void testThenSuccessDeferred() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         final Deferred<String> def2 = new Deferred<String>();
1: 
1:         Promise<String> chain = def.getPromise().then(new Success<String, String>() {
1:             @Override
1:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:                 return def2.getPromise();
1:             }
1:         });
1:         assertFalse("chain not resolved", chain.isDone());
1: 
1:         def.resolve("ok");
1:         assertFalse("chain still not resolved", chain.isDone());
1: 
1:         def2.resolve("success!");
1:         assertTrue("chain resolved", chain.isDone());
1:         assertEquals("chain value matches", "success!", chain.getValue());
1:     }
1: 
1:     @Test
1:     public void testThenSuccessFailed() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         final Promise<String> promise = def.getPromise();
1:         final Throwable thenFail = new Throwable("failed!");
1: 
1:         Promise<String> chain = promise.then(new Success<String, String>() {
1:             @Override
1:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:                 return Promises.failed(thenFail);
1:             }
1:         });
1:         assertFalse("chain not resolved", chain.isDone());
1: 
1:         def.resolve("ok");
1:         assertTrue("chain resolved", chain.isDone());
1:         assertEquals("chain failure matches", thenFail, chain.getFailure());
1:     }
1: 
1:     @Test
1:     public void testThenSuccessException() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         final Promise<String> promise = def.getPromise();
1:         final Exception thenException = new Exception("then exception!");
1: 
1:         Promise<String> chain = promise.then(new Success<String, String>() {
1:             @Override
1:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:                 throw thenException;
1:             }
1:         });
1:         assertFalse("chain not resolved", chain.isDone());
1: 
1:         def.resolve("ok");
1:         assertTrue("chain resolved", chain.isDone());
1:         assertEquals("chain failure matches", thenException, chain.getFailure());
1:     }
1: 
1:     @Test
1:     public void testThenFail() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         final Promise<String> promise = def.getPromise();
1: 
1:         Promise<String> chain = promise.then(null, new Failure() {
1:             @Override
1:             public void fail(Promise<?> resolved) throws Exception {
1:             }
1:         });
1:         assertFalse("chain not resolved", chain.isDone());
1: 
1:         Throwable failure = new Throwable("fail!");
1:         def.fail(failure);
1:         assertTrue("chain resolved", chain.isDone());
1:         assertEquals("chain failure matches", failure, chain.getFailure());
1:     }
1: 
1:     @Test
1:     public void testThenFailNoCallback() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         final Promise<String> promise = def.getPromise();
1: 
0:         Promise<String> chain = promise.then(null);
1:         assertFalse("chain not resolved", chain.isDone());
1: 
1:         Throwable failure = new Throwable("fail!");
1:         def.fail(failure);
1:         assertTrue("chain resolved", chain.isDone());
1:         assertEquals("chain failure matches", failure, chain.getFailure());
1:     }
1: 
1:     @Test
1:     public void testThenFailException() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         final Promise<String> promise = def.getPromise();
1:         final Exception thenException = new Exception("eek!");
1: 
1:         Promise<String> chain = promise.then(null, new Failure() {
1:             @Override
1:             public void fail(Promise<?> resolved) throws Exception {
1:                 throw thenException;
1:             }
1:         });
1:         assertFalse("chain not resolved", chain.isDone());
1: 
1:         def.fail(new Throwable("failed"));
1:         assertTrue("chain resolved", chain.isDone());
1:         assertEquals("chain failure matches", thenException, chain.getFailure());
1:     }
1: 
1:     @Test
1:     public void testThenNull() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         final Promise<String> promise = def.getPromise();
0:         Promise<String> chain = promise.then(null);
1:         assertFalse("chain not resolved", chain.isDone());
1: 
1:         def.resolve("ok");
1:         assertTrue("chain resolved", chain.isDone());
1:         assertNull("chain value null", chain.getValue());
1:     }
1: 
1:     @Test
1:     public void testThenNullResolved() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         def.resolve("ok");
0:         Promise<String> chain = def.getPromise().then(null);
1: 
1:         assertTrue("chain resolved", chain.isDone());
1:         assertNull("chain value null", chain.getValue());
1:     }
1: 
1:     @Test
1:     public void testThenAlreadyResolved() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         final Promise<String> promise = def.getPromise();
1:         def.resolve("ok");
1: 
1:         Promise<String> chain = promise.then(new Success<String, String>() {
1:             @Override
1:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:                 return Promises.resolved("success!");
1:             }
1:         });
1:         assertTrue("chain resolved", chain.isDone());
1:         assertEquals("chain value matches", "success!", chain.getValue());
1:     }
1: 
1:     @Test
1:     public void testExampleChain() throws Exception {
1:         Success<String, String> doubler = new Success<String, String>() {
1:             public Promise<String> call(Promise<String> p) throws Exception {
1:                 return Promises.resolved(p.getValue() + p.getValue());
1:             }
1:         };
1: 
1:         Deferred<String> def = new Deferred<String>();
1:         final Promise<String> foo = def.getPromise().then(doubler).then(doubler);
1: 
1:         def.resolve("hello!");
1:         assertEquals("doubler matches", "hello!hello!hello!hello!", foo.getValue());
1:     }
1: 
1:     @Test
1:     public void testThen2() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1: 
1:         Promise<String> chain1 = def.getPromise().then(new Success<String, String>() {
1:             @Override
1:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:                 return Promises.resolved("success1");
1:             }
1:         });
1:         assertFalse("chain not resolved", chain1.isDone());
1: 
1:         Promise<String> chain2 = def.getPromise().then(new Success<String, String>() {
1:             @Override
1:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:                 return Promises.resolved("success2");
1:             }
1:         });
1:         assertFalse("chain not resolved", chain2.isDone());
1: 
1:         def.resolve("ok");
1:         assertTrue("chain1 resolved", chain1.isDone());
1:         assertEquals("chain1 value matches", "success1", chain1.getValue());
1:         assertTrue("chain2 resolved", chain2.isDone());
1:         assertEquals("chain2 value matches", "success2", chain2.getValue());
1:     }
1: 
1:     @Test
1:     public void testThenResolved() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         def.resolve("already resolved");
1: 
1:         Promise<String> chain = def.getPromise().then(new Success<String, String>() {
1:             @Override
1:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:                 return Promises.resolved("success!");
1:             }
1:         });
1:         assertTrue("chain resolved", chain.isDone());
1: 
1:         assertEquals("chain value matches", "success!", chain.getValue());
1:     }
1: 
1:     @Test
1:     public void testThenResolved2() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         def.resolve("already resolved");
1: 
1:         Promise<String> chain = def.getPromise().then(new Success<String, String>() {
1:             @Override
1:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:                 return Promises.resolved("success1");
1:             }
1:         }).then(new Success<String, String>() {
1:             @Override
1:             public Promise<String> call(Promise<String> resolved) throws Exception {
1:                 return Promises.resolved("success2");
1:             }
1:         });
1: 
1:         assertTrue("chain resolved", chain.isDone());
1: 
1:         assertEquals("chain value matches", "success2", chain.getValue());
1:     }
1: }
============================================================================