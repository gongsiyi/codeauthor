1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:7186eab:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7186eab:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx;
4:fdf3952: 
1:f5398b2: import java.util.concurrent.atomic.AtomicLong;
1:f5398b2: 
1:fdf3952: import javax.management.StandardMBean;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.agent.JMXAgentContext;
1:7186eab: import org.apache.aries.jmx.util.ObjectNameUtils;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.Filter;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.service.log.LogService;
1:fdf3952: import org.osgi.util.tracker.ServiceTracker;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * Abstract implementation of {@link MBeanHandler} that provides a template with basic tracking of an optional
1:fdf3952:  * compendium service. MBeanHandler implementations that manage a {@link StandardMBean} that is backed by a single OSGi
1:fdf3952:  * compendium service should extend this class and implement the {@linkplain #constructInjectMBean(Object)} and
1:fdf3952:  * {@linkplain #getName()} methods
1:fdf3952:  * </p>
1:bf86346:  * 
1:fdf3952:  * @see MBeanHandler
1:bf86346:  * 
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:0a8778f: @SuppressWarnings({"rawtypes", "unchecked"})
1:fdf3952: public abstract class AbstractCompendiumHandler extends ServiceTracker implements MBeanHandler {
1:fdf3952: 
1:fdf3952:     protected final JMXAgentContext agentContext;
1:fdf3952:     protected StandardMBean mbean;
1:f5398b2:     protected final AtomicLong trackedId = new AtomicLong();
1:bf86346:     
1:fdf3952:     /**
1:bf86346:      * 
1:fdf3952:      * @param agentContext
1:fdf3952:      * @param filter
1:fdf3952:      */
1:fdf3952:     protected AbstractCompendiumHandler(JMXAgentContext agentContext, Filter filter) {
1:fdf3952:         super(agentContext.getBundleContext(), filter, null);
1:fdf3952:         this.agentContext = agentContext;
3:fdf3952:     }
1:7186eab: 
1:fdf3952:     /**
1:bf86346:      * 
1:fdf3952:      * @param agentContext
1:fdf3952:      * @param clazz
1:fdf3952:      */
1:fdf3952:     protected AbstractCompendiumHandler(JMXAgentContext agentContext, String clazz) {
1:fdf3952:         super(agentContext.getBundleContext(), clazz, null);
1:fdf3952:         this.agentContext = agentContext;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /*
1:fdf3952:      * (non-Javadoc)
1:bf86346:      * 
1:fdf3952:      * @see org.osgi.util.tracker.ServiceTracker#addingService(org.osgi.framework.ServiceReference)
1:fdf3952:      */
1:fdf3952:     public Object addingService(ServiceReference reference) {
1:fdf3952:         Logger logger = agentContext.getLogger();
1:fdf3952:         Object trackedService = null;
1:f5398b2:         long serviceId = (Long) reference.getProperty(Constants.SERVICE_ID);
1:fdf3952:         //API stipulates versions for compendium services with static ObjectName
1:fdf3952:         //This shouldn't happen but added as a consistency check
1:f5398b2:         if (trackedId.compareAndSet(0, serviceId)) {
1:fdf3952:             logger.log(LogService.LOG_INFO, "Registering MBean with ObjectName [" + getName() + "] for service with "
1:fdf3952:                     + Constants.SERVICE_ID + " [" + serviceId + "]");
1:fdf3952:             trackedService = context.getService(reference);
1:fdf3952:             mbean = constructInjectMBean(trackedService);
1:f5398b2:             agentContext.registerMBean(AbstractCompendiumHandler.this);
1:f5398b2:         } else {
1:f5398b2:             String serviceDescription = getServiceDescription(reference);
1:f5398b2:             logger.log(LogService.LOG_WARNING, "Detected secondary ServiceReference for [" + serviceDescription
1:f5398b2:                     + "] with " + Constants.SERVICE_ID + " [" + serviceId + "] Only 1 instance will be JMX managed");
1:fdf3952:         }
1:fdf3952:         return trackedService;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /*
1:fdf3952:      * (non-Javadoc)
1:bf86346:      * 
1:fdf3952:      * @see org.osgi.util.tracker.ServiceTracker#removedService(org.osgi.framework.ServiceReference, java.lang.Object)
1:fdf3952:      */
1:fdf3952:     public void removedService(ServiceReference reference, Object service) {
1:fdf3952:         Logger logger = agentContext.getLogger();
1:f5398b2:         long serviceID = (Long) reference.getProperty(Constants.SERVICE_ID);
1:f5398b2:         if (trackedId.compareAndSet(serviceID, 0)) {
1:f5398b2:             logger.log(LogService.LOG_INFO, "Unregistering MBean with ObjectName [" + getName() + "] for service with "
1:f5398b2:                     + Constants.SERVICE_ID + " [" + serviceID + "]"); 
1:f5398b2:             agentContext.unregisterMBean(AbstractCompendiumHandler.this);
1:f5398b2:             context.ungetService(reference);
1:f5398b2:         } else {
1:bf86346:             String serviceDescription = getServiceDescription(reference);
1:fdf3952:             logger.log(LogService.LOG_WARNING, "ServiceReference for [" + serviceDescription + "] with "
1:fdf3952:                     + Constants.SERVICE_ID + " [" + serviceID + "] is not currently JMX managed");
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:bf86346:     private String getServiceDescription(ServiceReference reference) {
1:bf86346:         String serviceDescription = (String) reference.getProperty(Constants.SERVICE_DESCRIPTION);
1:bf86346:         if (serviceDescription == null) {
1:bf86346:             Object obj = reference.getProperty(Constants.OBJECTCLASS);
1:f5398b2:             if (obj instanceof String[]) {
1:bf86346:                 StringBuilder sb = new StringBuilder();
1:bf86346:                 for (String s : (String[]) obj) {
1:bf86346:                     if (sb.length() > 0) {
1:bf86346:                         sb.append(", ");
1:bf86346:                     }
1:bf86346:                     sb.append(s);
1:bf86346:                 }
1:bf86346:                 serviceDescription = sb.toString();
1:bf86346:             } else {
1:bf86346:                 serviceDescription = obj.toString();
1:bf86346:             }
1:bf86346:         }
1:bf86346:         return serviceDescription;
1:bf86346:     }
1:bf86346: 
1:fdf3952:     /**
1:fdf3952:      * Gets the <code>StandardMBean</code> managed by this handler when the backing service is available or null
1:bf86346:      * 
1:fdf3952:      * @see org.apache.aries.jmx.MBeanHandler#getMbean()
1:fdf3952:      */
1:fdf3952:     public StandardMBean getMbean() {
1:fdf3952:         return mbean;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Implement this method to construct an appropriate {@link StandardMBean} instance which is backed by the supplied
1:fdf3952:      * service tracked by this handler
1:bf86346:      * 
1:fdf3952:      * @param targetService
1:fdf3952:      *            the compendium service tracked by this handler
1:fdf3952:      * @return The <code>StandardMBean</code> instance whose registration lifecycle will be managed by this handler
1:fdf3952:      */
1:fdf3952:     protected abstract StandardMBean constructInjectMBean(Object targetService);
1:fdf3952: 
1:7186eab:     /**
1:7186eab:      * The base name of the MBean. Will be expanded with the framework name and the UUID.
1:7186eab:      * @return
1:7186eab:      */
1:7186eab:     protected abstract String getBaseName();
1:7186eab: 
1:7186eab:     /**
1:7186eab:      * @see org.apache.aries.jmx.MBeanHandler#getName()
1:7186eab:      */
1:7186eab:     public String getName() {
1:7186eab:         return ObjectNameUtils.createFullObjectName(context, getBaseName());
1:7186eab:     }
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings({"rawtypes", "unchecked"})
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f5398b2
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected final AtomicLong trackedId = new AtomicLong();
/////////////////////////////////////////////////////////////////////////
1:         long serviceId = (Long) reference.getProperty(Constants.SERVICE_ID);
1:         if (trackedId.compareAndSet(0, serviceId)) {
1:             agentContext.registerMBean(AbstractCompendiumHandler.this);
1:         } else {
1:             String serviceDescription = getServiceDescription(reference);
1:             logger.log(LogService.LOG_WARNING, "Detected secondary ServiceReference for [" + serviceDescription
1:                     + "] with " + Constants.SERVICE_ID + " [" + serviceId + "] Only 1 instance will be JMX managed");
/////////////////////////////////////////////////////////////////////////
1:         long serviceID = (Long) reference.getProperty(Constants.SERVICE_ID);
1:         if (trackedId.compareAndSet(serviceID, 0)) {
1:             logger.log(LogService.LOG_INFO, "Unregistering MBean with ObjectName [" + getName() + "] for service with "
1:                     + Constants.SERVICE_ID + " [" + serviceID + "]"); 
1:             agentContext.unregisterMBean(AbstractCompendiumHandler.this);
1:             context.ungetService(reference);
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             if (obj instanceof String[]) {
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:bf86346
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * 
1:  * 
/////////////////////////////////////////////////////////////////////////
1:     
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:             String serviceDescription = getServiceDescription(reference);
/////////////////////////////////////////////////////////////////////////
1:      * 
0:             String serviceDescription = getServiceDescription(reference);
0:                     + Constants.SERVICE_ID + " [" + serviceID + "]"); 
/////////////////////////////////////////////////////////////////////////
1:     private String getServiceDescription(ServiceReference reference) {
1:         String serviceDescription = (String) reference.getProperty(Constants.SERVICE_DESCRIPTION);
1:         if (serviceDescription == null) {
1:             Object obj = reference.getProperty(Constants.OBJECTCLASS);
0:             if (obj instanceof String) {
1:                 StringBuilder sb = new StringBuilder();
1:                 for (String s : (String[]) obj) {
1:                     if (sb.length() > 0) {
1:                         sb.append(", ");
1:                     }
1:                     sb.append(s);
1:                 }
1:                 serviceDescription = sb.toString();
1:             } else {
1:                 serviceDescription = obj.toString();
1:             }
1:         }
1:         return serviceDescription;
1:     }
1: 
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
commit:7871c8f
/////////////////////////////////////////////////////////////////////////
0:         if (trackedId != null) {
/////////////////////////////////////////////////////////////////////////
0:                     agentContext.unregisterMBean(AbstractCompendiumHandler.this);
commit:7186eab
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jmx.util.ObjectNameUtils;
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:             String serviceDescription = (String) ((reference.getProperty(Constants.SERVICE_DESCRIPTION) != null) ?
/////////////////////////////////////////////////////////////////////////
0:      *
0:             String serviceDescription = (String) ((reference.getProperty(Constants.SERVICE_DESCRIPTION) != null) ?
0:                     + Constants.SERVICE_ID + " [" + serviceID + "]");
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
1:     /**
1:      * The base name of the MBean. Will be expanded with the framework name and the UUID.
1:      * @return
1:      */
1:     protected abstract String getBaseName();
1: 
1:     /**
1:      * @see org.apache.aries.jmx.MBeanHandler#getName()
1:      */
1:     public String getName() {
1:         return ObjectNameUtils.createFullObjectName(context, getBaseName());
1:     }
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx;
1: 
0: import java.util.concurrent.ExecutorService;
1: 
1: import javax.management.StandardMBean;
1: 
1: import org.apache.aries.jmx.agent.JMXAgentContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.log.LogService;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: /**
1:  * <p>
1:  * Abstract implementation of {@link MBeanHandler} that provides a template with basic tracking of an optional
1:  * compendium service. MBeanHandler implementations that manage a {@link StandardMBean} that is backed by a single OSGi
1:  * compendium service should extend this class and implement the {@linkplain #constructInjectMBean(Object)} and
1:  * {@linkplain #getName()} methods
1:  * </p>
0:  * 
1:  * @see MBeanHandler
0:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public abstract class AbstractCompendiumHandler extends ServiceTracker implements MBeanHandler {
1: 
1:     protected final JMXAgentContext agentContext;
1:     protected StandardMBean mbean;
0:     protected Long trackedId;
1:     
1:     /**
0:      * 
1:      * @param agentContext
1:      * @param filter
1:      */
1:     protected AbstractCompendiumHandler(JMXAgentContext agentContext, Filter filter) {
1:         super(agentContext.getBundleContext(), filter, null);
1:         this.agentContext = agentContext;
1:     }
1: 
1:     /**
0:      * 
1:      * @param agentContext
1:      * @param clazz
1:      */
1:     protected AbstractCompendiumHandler(JMXAgentContext agentContext, String clazz) {
1:         super(agentContext.getBundleContext(), clazz, null);
1:         this.agentContext = agentContext;
1:     }
1: 
1:     /*
1:      * (non-Javadoc)
0:      * 
1:      * @see org.osgi.util.tracker.ServiceTracker#addingService(org.osgi.framework.ServiceReference)
1:      */
1:     public Object addingService(ServiceReference reference) {
1:         Logger logger = agentContext.getLogger();
1:         Object trackedService = null;
0:         Long serviceId = (Long) reference.getProperty(Constants.SERVICE_ID);
1:         //API stipulates versions for compendium services with static ObjectName
1:         //This shouldn't happen but added as a consistency check
0:         if (getTrackingCount() > 0) {
0:             String serviceDescription = (String) ((reference.getProperty(Constants.SERVICE_DESCRIPTION) != null) ? 
0:                     reference.getProperty(Constants.SERVICE_DESCRIPTION) : reference.getProperty(Constants.OBJECTCLASS));
0:             logger.log(LogService.LOG_WARNING, "Detected secondary ServiceReference for [" + serviceDescription
0:                     + "] with " + Constants.SERVICE_ID + " [" + serviceId + "] Only 1 instance will be JMX managed");
0:         } else {
1:             logger.log(LogService.LOG_INFO, "Registering MBean with ObjectName [" + getName() + "] for service with "
1:                     + Constants.SERVICE_ID + " [" + serviceId + "]");
1:             trackedService = context.getService(reference);
1:             mbean = constructInjectMBean(trackedService);
0:             ExecutorService executor = agentContext.getRegistrationExecutor();
0:             executor.submit(new Runnable() {
0:                 public void run() {
0:                     agentContext.registerMBean(AbstractCompendiumHandler.this);
1:                 }
0:             });
0:             trackedId = serviceId;
1:         }
1:         return trackedService;
1:     }
1: 
1:     /*
1:      * (non-Javadoc)
0:      * 
1:      * @see org.osgi.util.tracker.ServiceTracker#removedService(org.osgi.framework.ServiceReference, java.lang.Object)
1:      */
1:     public void removedService(ServiceReference reference, Object service) {
1:         Logger logger = agentContext.getLogger();
0:         Long serviceID = (Long) reference.getProperty(Constants.SERVICE_ID);
0:         if (trackedId != null && !trackedId.equals(serviceID)) {
0:             String serviceDescription = (String) ((reference.getProperty(Constants.SERVICE_DESCRIPTION) != null) ? 
0:                     reference.getProperty(Constants.SERVICE_DESCRIPTION) : reference.getProperty(Constants.OBJECTCLASS));
1:             logger.log(LogService.LOG_WARNING, "ServiceReference for [" + serviceDescription + "] with "
1:                     + Constants.SERVICE_ID + " [" + serviceID + "] is not currently JMX managed");
0:         } else {
0:             logger.log(LogService.LOG_INFO, "Unregistering MBean with ObjectName [" + getName() + "] for service with "
0:                     + Constants.SERVICE_ID + " [" + serviceID + "]"); 
0:             ExecutorService executor = agentContext.getRegistrationExecutor();
0:             executor.submit(new Runnable() {
0:                 public void run() {
0:                     agentContext.unregisterMBean(getName());
1:                 }
0:             });
0:             trackedId = null;
0:             context.ungetService(reference);
1:         }
1:     }
1: 
1:     /**
1:      * Gets the <code>StandardMBean</code> managed by this handler when the backing service is available or null
0:      * 
1:      * @see org.apache.aries.jmx.MBeanHandler#getMbean()
1:      */
1:     public StandardMBean getMbean() {
1:         return mbean;
1:     }
1: 
1:     /**
1:      * Implement this method to construct an appropriate {@link StandardMBean} instance which is backed by the supplied
1:      * service tracked by this handler
0:      * 
1:      * @param targetService
1:      *            the compendium service tracked by this handler
1:      * @return The <code>StandardMBean</code> instance whose registration lifecycle will be managed by this handler
1:      */
1:     protected abstract StandardMBean constructInjectMBean(Object targetService);
1: 
1: }
============================================================================