1:314564e: /*
1:314564e:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:314564e:  * 
1:314564e:  * Licensed under the Apache License, Version 2.0 (the "License");
1:314564e:  * you may not use this file except in compliance with the License.
1:314564e:  * You may obtain a copy of the License at
1:314564e:  *
1:314564e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:314564e:  *
1:314564e:  * Unless required by applicable law or agreed to in writing, software
1:314564e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:314564e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:314564e:  * See the License for the specific language governing permissions and
1:314564e:  * limitations under the License.
1:314564e:  */
1:314564e: package org.osgi.service.transaction.control;
2:314564e: 
1:314564e: import java.util.concurrent.Callable;
1:314564e: 
1:314564e: /**
1:314564e:  * Implementations of this interface are able to run a piece of work within a
1:314564e:  * transaction
1:314564e:  */
1:314564e: public interface TransactionStarter {
1:314564e: 	/**
1:314564e: 	 * A transaction is required to run the supplied piece of work. If no
1:314564e: 	 * transaction is active then it must be started and associated with the
1:314564e: 	 * work and then completed after the transactional work has finished.
1:314564e: 	 * 
1:b767d3b: 	 * @param work The work to execute
1:314564e: 	 * @return The value returned by the work
1:314564e: 	 * @throws TransactionException if there is an error starting or completing
1:314564e: 	 *             the transaction
1:314564e: 	 * @throws TransactionRolledBackException if the transaction rolled back due
1:9e03212: 	 *             to a failure in one of the resources or an internal error in
1:9e03212: 	 *             the TransactionControl service
1:9e03212: 	 * @throws ScopedWorkException if the supplied work throws an
1:9e03212: 	 *             {@link Exception}
1:314564e: 	 */
1:9e03212: 	<T> T required(Callable<T> work) throws TransactionException,
1:9e03212: 			TransactionRolledBackException, ScopedWorkException;
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * A new transaction is required to run the supplied piece of work. If an
1:314564e: 	 * existing transaction is active then it must suspended and a new
1:314564e: 	 * transaction started and associated with the work. After the work has
1:314564e: 	 * completed the new transaction must also complete and any suspended
1:314564e: 	 * transaction be resumed.
1:314564e: 	 * 
1:b767d3b: 	 * @param work The work to execute
1:314564e: 	 * @return The value returned by the work
1:314564e: 	 * @throws TransactionException if there is an error starting or completing
1:314564e: 	 *             the transaction
1:314564e: 	 * @throws TransactionRolledBackException if the transaction rolled back due
2:314564e: 	 *             to a failure
1:9e03212: 	 * @throws ScopedWorkException if the supplied work throws an
1:9e03212: 	 *             {@link Exception}
1:314564e: 	 */
1:9e03212: 	<T> T requiresNew(Callable<T> work) throws TransactionException,
1:9e03212: 			TransactionRolledBackException, ScopedWorkException;
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The supplied piece of work must be run outside the context of a
1:314564e: 	 * transaction. If an existing transaction is active then it must be
1:314564e: 	 * suspended and a "no transaction" context associated with the work. After
1:314564e: 	 * the work has completed any suspended transaction must be resumed.
1:314564e: 	 * <p>
1:314564e: 	 * The "no transaction" context does not support resource enlistment, and
1:314564e: 	 * will not commit or rollback any changes, however it does provide a post
1:314564e: 	 * completion callback to any registered functions. This function is
1:314564e: 	 * suitable for final cleanup, such as closing a connection
1:314564e: 	 * 
1:b767d3b: 	 * @param work The work to execute
1:314564e: 	 * @return The value returned by the work
1:314564e: 	 * @throws TransactionException if there is an error starting or completing
1:314564e: 	 *             the transaction
1:9e03212: 	 * @throws ScopedWorkException if the supplied work throws an
1:9e03212: 	 *             {@link Exception}
1:314564e: 	 */
1:9e03212: 	<T> T notSupported(Callable<T> work)
1:9e03212: 			throws TransactionException, ScopedWorkException;
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The supplied piece of work may run inside or outside the context of a
1:314564e: 	 * transaction. If an existing transaction or "no transaction" context is
1:314564e: 	 * active then it will continue, otherwise a new "no transaction" context is
1:314564e: 	 * associated with the work. After the work has completed any created
1:314564e: 	 * transaction context must be completed.
1:314564e: 	 * <p>
1:314564e: 	 * The "no transaction" context does not support resource enlistment, and
1:314564e: 	 * will not commit or rollback any changes, however it does provide a post
1:314564e: 	 * completion callback to any registered functions. This function is
1:314564e: 	 * suitable for final cleanup, such as closing a connection
1:314564e: 	 * 
1:b767d3b: 	 * @param work The work to execute
1:314564e: 	 * @return The value returned by the work
1:314564e: 	 * @throws TransactionException if there is an error starting or completing
1:314564e: 	 *             the transaction
1:9e03212: 	 * @throws ScopedWorkException if the supplied work throws an
1:9e03212: 	 *             {@link Exception}
1:314564e: 	 */
1:9e03212: 	<T> T supports(Callable<T> work)
1:9e03212: 			throws TransactionException, ScopedWorkException;
1:314564e: 
1:314564e: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:b767d3b
/////////////////////////////////////////////////////////////////////////
1: 	 * @param work The work to execute
/////////////////////////////////////////////////////////////////////////
1: 	 * @param work The work to execute
/////////////////////////////////////////////////////////////////////////
1: 	 * @param work The work to execute
/////////////////////////////////////////////////////////////////////////
1: 	 * @param work The work to execute
/////////////////////////////////////////////////////////////////////////
commit:9e03212
/////////////////////////////////////////////////////////////////////////
1: 	 *             to a failure in one of the resources or an internal error in
1: 	 *             the TransactionControl service
1: 	 * @throws ScopedWorkException if the supplied work throws an
1: 	 *             {@link Exception}
1: 	<T> T required(Callable<T> work) throws TransactionException,
1: 			TransactionRolledBackException, ScopedWorkException;
/////////////////////////////////////////////////////////////////////////
1: 	 * @throws ScopedWorkException if the supplied work throws an
1: 	 *             {@link Exception}
1: 	<T> T requiresNew(Callable<T> work) throws TransactionException,
1: 			TransactionRolledBackException, ScopedWorkException;
/////////////////////////////////////////////////////////////////////////
1: 	 * @throws ScopedWorkException if the supplied work throws an
1: 	 *             {@link Exception}
1: 	<T> T notSupported(Callable<T> work)
1: 			throws TransactionException, ScopedWorkException;
/////////////////////////////////////////////////////////////////////////
1: 	 * @throws ScopedWorkException if the supplied work throws an
1: 	 *             {@link Exception}
1: 	<T> T supports(Callable<T> work)
1: 			throws TransactionException, ScopedWorkException;
commit:314564e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.transaction.control;
1: 
1: import java.util.concurrent.Callable;
1: 
1: /**
1:  * Implementations of this interface are able to run a piece of work within a
1:  * transaction
1:  */
1: public interface TransactionStarter {
1: 	/**
1: 	 * A transaction is required to run the supplied piece of work. If no
1: 	 * transaction is active then it must be started and associated with the
1: 	 * work and then completed after the transactional work has finished.
1: 	 * 
0: 	 * @param work
1: 	 * @return The value returned by the work
1: 	 * @throws TransactionException if there is an error starting or completing
1: 	 *             the transaction
1: 	 * @throws TransactionRolledBackException if the transaction rolled back due
1: 	 *             to a failure
1: 	 */
0: 	<T> T required(Callable<T> work)
0: 			throws TransactionException, TransactionRolledBackException;
1: 
1: 	/**
1: 	 * A new transaction is required to run the supplied piece of work. If an
1: 	 * existing transaction is active then it must suspended and a new
1: 	 * transaction started and associated with the work. After the work has
1: 	 * completed the new transaction must also complete and any suspended
1: 	 * transaction be resumed.
1: 	 * 
0: 	 * @param work
1: 	 * @return The value returned by the work
1: 	 * @throws TransactionException if there is an error starting or completing
1: 	 *             the transaction
1: 	 * @throws TransactionRolledBackException if the transaction rolled back due
1: 	 *             to a failure
1: 	 */
0: 	<T> T requiresNew(Callable<T> work)
0: 			throws TransactionException, TransactionRolledBackException;
1: 
1: 	/**
1: 	 * The supplied piece of work must be run outside the context of a
1: 	 * transaction. If an existing transaction is active then it must be
1: 	 * suspended and a "no transaction" context associated with the work. After
1: 	 * the work has completed any suspended transaction must be resumed.
1: 	 * <p>
1: 	 * The "no transaction" context does not support resource enlistment, and
1: 	 * will not commit or rollback any changes, however it does provide a post
1: 	 * completion callback to any registered functions. This function is
1: 	 * suitable for final cleanup, such as closing a connection
1: 	 * 
0: 	 * @param work
1: 	 * @return The value returned by the work
1: 	 * @throws TransactionException if there is an error starting or completing
1: 	 *             the transaction
1: 	 */
0: 	<T> T notSupported(Callable<T> work) throws TransactionException;
1: 
1: 	/**
1: 	 * The supplied piece of work may run inside or outside the context of a
1: 	 * transaction. If an existing transaction or "no transaction" context is
1: 	 * active then it will continue, otherwise a new "no transaction" context is
1: 	 * associated with the work. After the work has completed any created
1: 	 * transaction context must be completed.
1: 	 * <p>
1: 	 * The "no transaction" context does not support resource enlistment, and
1: 	 * will not commit or rollback any changes, however it does provide a post
1: 	 * completion callback to any registered functions. This function is
1: 	 * suitable for final cleanup, such as closing a connection
1: 	 * 
0: 	 * @param work
1: 	 * @return The value returned by the work
1: 	 * @throws TransactionException if there is an error starting or completing
1: 	 *             the transaction
1: 	 */
0: 	<T> T supports(Callable<T> work) throws TransactionException;
1: 
1: 
1: }
============================================================================