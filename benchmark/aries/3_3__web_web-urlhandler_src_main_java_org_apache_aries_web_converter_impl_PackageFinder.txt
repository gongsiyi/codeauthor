1:0adda31: /*
1:0adda31:  * Licensed to the Apache Software Foundation (ASF) under one
1:0adda31:  * or more contributor license agreements.  See the NOTICE file
1:0adda31:  * distributed with this work for additional information
1:0adda31:  * regarding copyright ownership.  The ASF licenses this file
1:0adda31:  * to you under the Apache License, Version 2.0 (the
1:0adda31:  * "License"); you may not use this file except in compliance
1:0adda31:  * with the License.  You may obtain a copy of the License at
1:0adda31:  *
1:0adda31:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0adda31:  *
1:0adda31:  * Unless required by applicable law or agreed to in writing,
1:0adda31:  * software distributed under the License is distributed on an
1:0adda31:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:0adda31:  * KIND, either express or implied.  See the License for the
1:0adda31:  * specific language governing permissions and limitations
1:0adda31:  * under the License.
1:0adda31:  */
1:d80741a: package org.apache.aries.web.converter.impl;
19:0adda31: 
1:0adda31: import java.util.HashSet;
1:0adda31: import java.util.Iterator;
1:0adda31: import java.util.Set;
1:0adda31: 
1:0adda31: import org.objectweb.asm.AnnotationVisitor;
1:0adda31: import org.objectweb.asm.Attribute;
1:0adda31: import org.objectweb.asm.ClassVisitor;
1:0adda31: import org.objectweb.asm.FieldVisitor;
1:0adda31: import org.objectweb.asm.Label;
1:0adda31: import org.objectweb.asm.MethodVisitor;
1:9d710d0: import org.objectweb.asm.Opcodes;
1:0adda31: import org.objectweb.asm.Type;
1:0adda31: import org.objectweb.asm.signature.SignatureReader;
1:0adda31: import org.objectweb.asm.signature.SignatureVisitor;
1:0adda31: 
1:9d710d0: public class PackageFinder extends ClassVisitor//AnnotationVisitor, SignatureVisitor, ClassVisitor,
1:9d710d0:     //FieldVisitor, MethodVisitor
41:0adda31: {
1:9d710d0:   private static int asmVersion = Opcodes.ASM4;
1:9d710d0:   private PackageFinderSignatureVisitor pfsv;
1:9d710d0:   private PackageFinderAnnotationVisitor pfav;
1:9d710d0:   private PackageFinderFieldVisitor pffv;
1:9d710d0:   private PackageFinderMethodVisitor pfmv;
1:9d710d0:   
1:9d710d0:   public PackageFinder()
1:9d710d0:   {
1:9d710d0:     super(asmVersion);
1:9d710d0:     this.pfsv = new PackageFinderSignatureVisitor();
1:9d710d0:     this.pfav = new PackageFinderAnnotationVisitor();
1:9d710d0:     this.pffv = new PackageFinderFieldVisitor();
1:9d710d0:     this.pfmv = new PackageFinderMethodVisitor();
1:9d710d0:   }
1:9d710d0: 
1:0adda31:   private Set<String> packages = new HashSet<String>();
1:0adda31:   private Set<String> exemptPackages = new HashSet<String>();
1:0adda31: 
1:0adda31:   // stored value of the signature class name
1:0adda31:   private String signatureOuterClass = null;
1:0adda31: 
1:0adda31:   public Set<String> getImportPackages()
1:0adda31:   {
1:0adda31:     // Remove entries that will be imported by default
1:0adda31:     for (Iterator<String> i = packages.iterator(); i.hasNext();) {
1:0adda31:       if (i.next().startsWith("java.")) i.remove();
37:0adda31:     }
1:0adda31:     
1:0adda31:     return packages;
1:0adda31:   }
1:0adda31:   
1:0adda31:   public Set<String> getExemptPackages()
1:0adda31:   {
1:0adda31:     return exemptPackages;
1:0adda31:   }
1:0adda31: 
1:0adda31:   private String getPackageName(String name)
1:0adda31:   {
1:0adda31:     String packageName = null;
1:0adda31:     if (name != null) {
1:0adda31:       int index = name.lastIndexOf('/');
1:0adda31:       if (index > 0) packageName = name.substring(0, index);
1:0adda31:     }
1:0adda31:     return packageName;
1:0adda31:   }
1:0adda31: 
1:0adda31:   private String canonizePackage(String rawPackage)
1:0adda31:   {
1:0adda31:     String result = rawPackage.replace('/', '.');
1:0adda31: 
1:0adda31:     // handle arrays
1:0adda31:     return result.replaceFirst("^\\[+L", "");
1:0adda31:   }
1:0adda31:   
1:0adda31:   private void addPackage(String packageName)
1:0adda31:   {
1:0adda31:     if (packageName != null) {
1:0adda31:       packages.add(canonizePackage(packageName));
1:0adda31:     }
1:0adda31:   }
1:0adda31:   
1:0adda31:   private void addExemptPackage(String packageName)
1:0adda31:   {
1:0adda31:     if (packageName != null) 
1:0adda31:       exemptPackages.add(canonizePackage(packageName));
1:0adda31:   }
1:0adda31: 
1:0adda31:   private void addPackages(String[] packageNames)
1:0adda31:   {
1:0adda31:     if (packageNames != null) {
1:0adda31:       for (String s : packageNames)
1:0adda31:         if (s != null) {
1:0adda31:           packages.add(canonizePackage(s));
1:0adda31:         }
1:0adda31:     }
1:0adda31:   }
1:0adda31: 
1:0adda31:   private String getResolvedPackageName(String name)
1:0adda31:   {
1:0adda31:     String resolvedName = null;
1:0adda31:     if (name != null) resolvedName = getPackageName(name);
1:0adda31:     return resolvedName;
1:0adda31:   }
1:0adda31: 
1:0adda31:   private String[] getResolvedPackageNames(String[] names)
1:0adda31:   {
1:0adda31:     String[] resolvedNames = null;
1:0adda31:     if (names != null) {
1:0adda31:       resolvedNames = new String[names.length];
1:0adda31:       int i = 0;
1:0adda31:       for (String s : names)
1:0adda31:         resolvedNames[i++] = getResolvedPackageName(s);
1:0adda31:     }
1:0adda31:     return resolvedNames;
1:0adda31:   }
1:0adda31: 
1:0adda31:   private String getDescriptorInfo(String descriptor)
1:0adda31:   {
1:0adda31:     String type = null;
1:0adda31:     if (descriptor != null) type = getType(Type.getType(descriptor));
1:0adda31:     return type;
1:0adda31:   }
1:0adda31: 
1:0adda31:   private String[] getMethodDescriptorInfo(String descriptor)
1:0adda31:   {
1:0adda31:     String[] descriptors = null;
1:0adda31:     if (descriptor != null) {
1:0adda31:       Type[] types = Type.getArgumentTypes(descriptor);
1:0adda31:       descriptors = new String[types.length + 1];
1:0adda31:       descriptors[0] = getType(Type.getReturnType(descriptor));
1:0adda31:       int i = 1;
1:0adda31:       for (Type t : types)
1:0adda31:         descriptors[i++] = getType(t);
1:0adda31:     }
1:0adda31:     return descriptors;
1:0adda31:   }
1:0adda31: 
1:0adda31:   private String getType(Type t)
1:0adda31:   {
1:0adda31:     String type = null;
1:0adda31:     switch (t.getSort())
1:0adda31:     {
1:0adda31:       case Type.ARRAY:
1:0adda31:         type = getType(t.getElementType());
1:0adda31:         break;
1:0adda31:       case Type.OBJECT:
1:0adda31:         type = getPackageName(t.getInternalName());
1:0adda31:         break;
1:0adda31:     }
1:0adda31:     return type;
1:0adda31:   }
1:0adda31: 
1:0adda31:   private void addSignaturePackages(String signature)
1:0adda31:   {
1:9d710d0:     if (signature != null) new SignatureReader(signature).accept(pfsv);
1:0adda31:   }
1:0adda31: 
1:0adda31:   private void addResolvedSignaturePackages(String signature)
1:0adda31:   {
1:9d710d0:     if (signature != null) new SignatureReader(signature).acceptType(pfsv);
1:0adda31:   }
1:0adda31: 
7:0adda31:   //
1:0adda31:   // ClassVisitor methods
1:0adda31:   //
1:0adda31: 
1:0adda31:   public void visit(int arg0, int arg1, String name, String signature, String parent,
1:0adda31:       String[] interfaces)
1:0adda31:   {
1:0adda31:     // We dont want to import our own packages so we add this classes package name to the
1:0adda31:     // list of exempt packages.
1:0adda31:     addExemptPackage(getPackageName(name));
1:0adda31: 
1:0adda31:     if (signature == null) {
1:0adda31:       addPackage(getResolvedPackageName(parent));
1:0adda31:       addPackages(getResolvedPackageNames(interfaces));
1:0adda31:     } else addSignaturePackages(signature);
1:0adda31:   }
1:0adda31: 
1:0adda31:   public AnnotationVisitor visitAnnotation(String descriptor, boolean visible)
1:0adda31:   {
5:0adda31:     addPackage(getDescriptorInfo(descriptor));
1:9d710d0:     return pfav;
1:0adda31:   }
1:0adda31: 
1:0adda31:   public void visitAttribute(Attribute arg0)
1:0adda31:   {
1:0adda31:     // No-op
1:0adda31:   }
1:0adda31: 
1:0adda31:   public FieldVisitor visitField(int access, String name, String descriptor, String signature,
1:0adda31:       Object value)
1:0adda31:   {
1:0adda31:     if (signature == null) addPackage(getDescriptorInfo(descriptor));
1:0adda31:     else addResolvedSignaturePackages(signature);
1:0adda31: 
1:0adda31:     if (value instanceof Type) addPackage(getType((Type) value));
1:9d710d0:     return pffv;
1:0adda31:   }
1:0adda31: 
1:0adda31:   public void visitInnerClass(String arg0, String arg1, String arg2, int arg3)
1:0adda31:   {
16:0adda31:     // no-op
1:0adda31:   }
1:0adda31: 
1:0adda31:   public MethodVisitor visitMethod(int access, String name, String descriptor, String signature,
1:0adda31:       String[] exceptions)
1:0adda31:   {
1:0adda31:     if (signature == null) addPackages(getMethodDescriptorInfo(descriptor));
1:0adda31:     else addSignaturePackages(signature);
1:0adda31: 
1:0adda31:     addPackages(getResolvedPackageNames(exceptions));
1:9d710d0:     return pfmv;
1:0adda31: 
1:0adda31:   }
1:0adda31: 
1:0adda31:   public void visitOuterClass(String arg0, String arg1, String arg2)
1:0adda31:   {
1:0adda31:     // no-op
1:0adda31:   }
1:0adda31: 
1:0adda31:   public void visitSource(String arg0, String arg1)
1:0adda31:   {
1:0adda31:     // no-op
1:0adda31:   }
1:0adda31: 
1:0adda31:   public void visitEnd()
1:0adda31:   {
1:0adda31:     // no-op
1:0adda31:   }
1:0adda31: 
1:0adda31: 
1:0adda31: 
1:0adda31: 
1:0adda31: 
1:0adda31: 
1:0adda31: 
1:9d710d0:   public class PackageFinderSignatureVisitor extends SignatureVisitor {
1:0adda31: 
1:9d710d0:     public PackageFinderSignatureVisitor()
1:9d710d0:     {
1:9d710d0:       super(asmVersion);
1:9d710d0:     }
1:9d710d0:     
1:9d710d0:     // 
1:9d710d0:     // SignatureVisitor methods
1:9d710d0:     //
1:0adda31: 
1:9d710d0:     public SignatureVisitor visitArrayType()
1:9d710d0:     {
1:9d710d0:       return pfsv;
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public void visitBaseType(char arg0)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public SignatureVisitor visitClassBound()
1:9d710d0:     {
1:9d710d0:       return pfsv;
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public void visitClassType(String name)
1:9d710d0:     {
1:9d710d0:       signatureOuterClass = name;
1:9d710d0:       addPackage(getResolvedPackageName(name));
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public void visitInnerClassType(String name)
1:9d710d0:     {
1:9d710d0:       addPackage(getResolvedPackageName(signatureOuterClass + "$" + name));
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public SignatureVisitor visitExceptionType()
1:9d710d0:     {
1:9d710d0:       return pfsv;
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public void visitFormalTypeParameter(String arg0)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public SignatureVisitor visitInterface()
1:9d710d0:     {
1:9d710d0:       return pfsv;
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public SignatureVisitor visitParameterType()
1:9d710d0:     {
1:9d710d0:       return pfsv;
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public SignatureVisitor visitReturnType()
1:9d710d0:     {
1:9d710d0:       return pfsv;
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public SignatureVisitor visitSuperclass()
1:9d710d0:     {
1:9d710d0:       return pfsv;
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public void visitTypeArgument()
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public SignatureVisitor visitTypeArgument(char arg0)
1:9d710d0:     {
1:9d710d0:       return pfsv;
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public void visitTypeVariable(String arg0)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:0adda31: 
1:9d710d0:     public SignatureVisitor visitInterfaceBound()
1:9d710d0:     {
1:9d710d0:       return pfsv;
1:0adda31:     }
1:0adda31:   }
1:9d710d0:   
1:9d710d0:   
1:9d710d0:   
1:9d710d0:   
1:9d710d0:   public class PackageFinderAnnotationVisitor extends AnnotationVisitor {
1:0adda31: 
1:9d710d0:     public PackageFinderAnnotationVisitor()
1:9d710d0:     {
1:9d710d0:       super(asmVersion);
1:9d710d0:     }
1:9d710d0:     
1:9d710d0:     //
1:9d710d0:     // AnnotationVisitor Methods
1:9d710d0:     //
1:9d710d0: 
1:9d710d0:     public void visit(String arg0, Object value)
1:9d710d0:     {
1:9d710d0:       if (value instanceof Type) {
1:9d710d0:         addPackage(getType((Type) value));
1:9d710d0:       }
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public AnnotationVisitor visitAnnotation(String arg0, String descriptor)
1:9d710d0:     {
1:9d710d0:       addPackage(getDescriptorInfo(descriptor));
1:9d710d0:       return pfav;
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public AnnotationVisitor visitArray(String arg0)
1:9d710d0:     {
1:9d710d0:       return pfav;
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitEnum(String name, String desc, String value)
1:9d710d0:     {
1:9d710d0:       addPackage(getDescriptorInfo(desc));
1:9d710d0:     }
1:0adda31:   }
1:9d710d0:   
1:9d710d0:   
1:9d710d0:   
1:9d710d0:   
1:9d710d0:   public class PackageFinderFieldVisitor extends FieldVisitor {
1:0adda31: 
1:9d710d0:     public PackageFinderFieldVisitor()
1:9d710d0:     {
1:9d710d0:       super(asmVersion);
1:9d710d0:     }
1:0adda31:   }
1:9d710d0:   
1:9d710d0:   
1:9d710d0:   
1:9d710d0:   
1:9d710d0:   public class PackageFinderMethodVisitor extends MethodVisitor {
1:0adda31: 
1:9d710d0:     public PackageFinderMethodVisitor()
1:9d710d0:     {
1:9d710d0:       super(asmVersion);
1:9d710d0:     }
1:9d710d0:     
1:9d710d0:     // 
1:9d710d0:     // MethodVisitor methods
1:9d710d0:     //
1:9d710d0: 
1:9d710d0:     public AnnotationVisitor visitAnnotationDefault()
1:9d710d0:     {
1:9d710d0:       return pfav;
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitCode()
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitFrame(int arg0, int arg1, Object[] arg2, int arg3, Object[] arg4)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitIincInsn(int arg0, int arg1)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitInsn(int arg0)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitIntInsn(int arg0, int arg1)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitJumpInsn(int arg0, Label arg1)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitLabel(Label arg0)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitLdcInsn(Object type)
1:9d710d0:     {
1:9d710d0:       if (type instanceof Type) addPackage(getType((Type) type));
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitLineNumber(int arg0, Label arg1)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitLocalVariable(String name, String descriptor, String signature, Label start,
1:9d710d0:         Label end, int index)
1:9d710d0:     {
1:9d710d0:       addResolvedSignaturePackages(signature);
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitLookupSwitchInsn(Label arg0, int[] arg1, Label[] arg2)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitMaxs(int arg0, int arg1)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitMethodInsn(int opcode, String owner, String name, String descriptor)
1:9d710d0:     {
1:9d710d0:       addPackage(getResolvedPackageName(owner));
1:9d710d0:       addPackages(getMethodDescriptorInfo(descriptor));
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitMultiANewArrayInsn(String descriptor, int arg1)
1:9d710d0:     {
1:9d710d0:       addPackage(getDescriptorInfo(descriptor));
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public AnnotationVisitor visitParameterAnnotation(int arg0, String descriptor, boolean arg2)
1:9d710d0:     {
1:9d710d0:       addPackage(getDescriptorInfo(descriptor));
1:9d710d0:       return pfav;
1:9d710d0:     }
1:9d710d0: 
1:9e668db:     public void visitTableSwitchInsn(int min, int max, Label dflt, Label... labels)
1:9d710d0:     {
1:9d710d0:       //no-op
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitTryCatchBlock(Label arg0, Label arg1, Label arg2, String type)
1:9d710d0:     {
1:9d710d0:       addPackage(getResolvedPackageName(type));
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitTypeInsn(int arg0, String type)
1:9d710d0:     {
1:9d710d0:       addPackage(getResolvedPackageName(type));
1:9d710d0:     }
1:9d710d0: 
1:9d710d0:     public void visitVarInsn(int arg0, int arg1)
1:9d710d0:     {
1:9d710d0:       // no-op
1:9d710d0:     }
1:9d710d0:     
1:9d710d0:     public void visitFieldInsn(int opcode, String owner, String name, String descriptor)
1:9d710d0:     {
1:9d710d0:       addPackage(getResolvedPackageName(owner));
1:9d710d0:       addPackage(getDescriptorInfo(descriptor));
1:9d710d0:     }
1:0adda31:   }
1:0adda31: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:9e668db
/////////////////////////////////////////////////////////////////////////
1:     public void visitTableSwitchInsn(int min, int max, Label dflt, Label... labels)
author:Emily Jiang
-------------------------------------------------------------------------------
commit:9d710d0
/////////////////////////////////////////////////////////////////////////
1: import org.objectweb.asm.Opcodes;
1: public class PackageFinder extends ClassVisitor//AnnotationVisitor, SignatureVisitor, ClassVisitor,
1:     //FieldVisitor, MethodVisitor
1:   private static int asmVersion = Opcodes.ASM4;
1:   private PackageFinderSignatureVisitor pfsv;
1:   private PackageFinderAnnotationVisitor pfav;
1:   private PackageFinderFieldVisitor pffv;
1:   private PackageFinderMethodVisitor pfmv;
1:   
1:   public PackageFinder()
1:   {
1:     super(asmVersion);
1:     this.pfsv = new PackageFinderSignatureVisitor();
1:     this.pfav = new PackageFinderAnnotationVisitor();
1:     this.pffv = new PackageFinderFieldVisitor();
1:     this.pfmv = new PackageFinderMethodVisitor();
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     if (signature != null) new SignatureReader(signature).accept(pfsv);
1:     if (signature != null) new SignatureReader(signature).acceptType(pfsv);
/////////////////////////////////////////////////////////////////////////
1:     return pfav;
/////////////////////////////////////////////////////////////////////////
1:     return pffv;
/////////////////////////////////////////////////////////////////////////
1:     return pfmv;
/////////////////////////////////////////////////////////////////////////
1:   public class PackageFinderSignatureVisitor extends SignatureVisitor {
1:     public PackageFinderSignatureVisitor()
1:     {
1:       super(asmVersion);
1:     }
1:     
1:     // 
1:     // SignatureVisitor methods
1:     //
1:     public SignatureVisitor visitArrayType()
1:     {
1:       return pfsv;
1:     }
1:     public void visitBaseType(char arg0)
1:     {
1:       // no-op
1:     }
1:     public SignatureVisitor visitClassBound()
1:     {
1:       return pfsv;
1:     }
1:     public void visitClassType(String name)
1:     {
1:       signatureOuterClass = name;
1:       addPackage(getResolvedPackageName(name));
1:     }
1:     public void visitInnerClassType(String name)
1:     {
1:       addPackage(getResolvedPackageName(signatureOuterClass + "$" + name));
1:     }
1:     public SignatureVisitor visitExceptionType()
1:     {
1:       return pfsv;
1:     }
1:     public void visitFormalTypeParameter(String arg0)
1:     {
1:       // no-op
1:     }
1:     public SignatureVisitor visitInterface()
1:     {
1:       return pfsv;
1:     }
1:     public SignatureVisitor visitParameterType()
1:     {
1:       return pfsv;
1:     }
1:     public SignatureVisitor visitReturnType()
1:     {
1:       return pfsv;
1:     }
1:     public SignatureVisitor visitSuperclass()
1:     {
1:       return pfsv;
1:     }
1:     public void visitTypeArgument()
1:     {
1:       // no-op
1:     }
1:     public SignatureVisitor visitTypeArgument(char arg0)
1:     {
1:       return pfsv;
1:     }
1:     public void visitTypeVariable(String arg0)
1:     {
1:       // no-op
1:     }
1:     public SignatureVisitor visitInterfaceBound()
1:     {
1:       return pfsv;
1:   
1:   
1:   
1:   
1:   public class PackageFinderAnnotationVisitor extends AnnotationVisitor {
1:     public PackageFinderAnnotationVisitor()
1:     {
1:       super(asmVersion);
1:     }
1:     
1:     //
1:     // AnnotationVisitor Methods
1:     //
1: 
1:     public void visit(String arg0, Object value)
1:     {
1:       if (value instanceof Type) {
1:         addPackage(getType((Type) value));
1:       }
1:     }
1: 
1:     public AnnotationVisitor visitAnnotation(String arg0, String descriptor)
1:     {
1:       addPackage(getDescriptorInfo(descriptor));
1:       return pfav;
1:     }
1: 
1:     public AnnotationVisitor visitArray(String arg0)
1:     {
1:       return pfav;
1:     }
1: 
1:     public void visitEnum(String name, String desc, String value)
1:     {
1:       addPackage(getDescriptorInfo(desc));
1:     }
1:   
1:   
1:   
1:   
1:   public class PackageFinderFieldVisitor extends FieldVisitor {
1:     public PackageFinderFieldVisitor()
1:     {
1:       super(asmVersion);
1:     }
1:   
1:   
1:   
1:   
1:   public class PackageFinderMethodVisitor extends MethodVisitor {
1:     public PackageFinderMethodVisitor()
1:     {
1:       super(asmVersion);
1:     }
1:     
1:     // 
1:     // MethodVisitor methods
1:     //
1: 
1:     public AnnotationVisitor visitAnnotationDefault()
1:     {
1:       return pfav;
1:     }
1: 
1:     public void visitCode()
1:     {
1:       // no-op
1:     }
1: 
1:     public void visitFrame(int arg0, int arg1, Object[] arg2, int arg3, Object[] arg4)
1:     {
1:       // no-op
1:     }
1: 
1:     public void visitIincInsn(int arg0, int arg1)
1:     {
1:       // no-op
1:     }
1: 
1:     public void visitInsn(int arg0)
1:     {
1:       // no-op
1:     }
1: 
1:     public void visitIntInsn(int arg0, int arg1)
1:     {
1:       // no-op
1:     }
1: 
1:     public void visitJumpInsn(int arg0, Label arg1)
1:     {
1:       // no-op
1:     }
1: 
1:     public void visitLabel(Label arg0)
1:     {
1:       // no-op
1:     }
1: 
1:     public void visitLdcInsn(Object type)
1:     {
1:       if (type instanceof Type) addPackage(getType((Type) type));
1:     }
1: 
1:     public void visitLineNumber(int arg0, Label arg1)
1:     {
1:       // no-op
1:     }
1: 
1:     public void visitLocalVariable(String name, String descriptor, String signature, Label start,
1:         Label end, int index)
1:     {
1:       addResolvedSignaturePackages(signature);
1:     }
1: 
1:     public void visitLookupSwitchInsn(Label arg0, int[] arg1, Label[] arg2)
1:     {
1:       // no-op
1:     }
1: 
1:     public void visitMaxs(int arg0, int arg1)
1:     {
1:       // no-op
1:     }
1: 
1:     public void visitMethodInsn(int opcode, String owner, String name, String descriptor)
1:     {
1:       addPackage(getResolvedPackageName(owner));
1:       addPackages(getMethodDescriptorInfo(descriptor));
1:     }
1: 
1:     public void visitMultiANewArrayInsn(String descriptor, int arg1)
1:     {
1:       addPackage(getDescriptorInfo(descriptor));
1:     }
1: 
1:     public AnnotationVisitor visitParameterAnnotation(int arg0, String descriptor, boolean arg2)
1:     {
1:       addPackage(getDescriptorInfo(descriptor));
1:       return pfav;
1:     }
1: 
0:     public void visitTableSwitchInsn(int arg0, int arg1, Label arg2, Label[] arg3)
1:     {
1:       //no-op
1:     }
1: 
1:     public void visitTryCatchBlock(Label arg0, Label arg1, Label arg2, String type)
1:     {
1:       addPackage(getResolvedPackageName(type));
1:     }
1: 
1:     public void visitTypeInsn(int arg0, String type)
1:     {
1:       addPackage(getResolvedPackageName(type));
1:     }
1: 
1:     public void visitVarInsn(int arg0, int arg1)
1:     {
1:       // no-op
1:     }
1:     
1:     public void visitFieldInsn(int opcode, String owner, String name, String descriptor)
1:     {
1:       addPackage(getResolvedPackageName(owner));
1:       addPackage(getDescriptorInfo(descriptor));
1:     }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:d80741a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.web.converter.impl;
commit:0adda31
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.application.converters;
1: 
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.Set;
1: 
1: import org.objectweb.asm.AnnotationVisitor;
1: import org.objectweb.asm.Attribute;
1: import org.objectweb.asm.ClassVisitor;
1: import org.objectweb.asm.FieldVisitor;
1: import org.objectweb.asm.Label;
1: import org.objectweb.asm.MethodVisitor;
1: import org.objectweb.asm.Type;
1: import org.objectweb.asm.signature.SignatureReader;
1: import org.objectweb.asm.signature.SignatureVisitor;
1: 
0: public class PackageFinder implements AnnotationVisitor, SignatureVisitor, ClassVisitor,
0:     FieldVisitor, MethodVisitor
1: {
1:   private Set<String> packages = new HashSet<String>();
1:   private Set<String> exemptPackages = new HashSet<String>();
1: 
1:   // stored value of the signature class name
1:   private String signatureOuterClass = null;
1: 
1:   public Set<String> getImportPackages()
1:   {
1:     // Remove entries that will be imported by default
1:     for (Iterator<String> i = packages.iterator(); i.hasNext();) {
1:       if (i.next().startsWith("java.")) i.remove();
1:     }
1:     
1:     return packages;
1:   }
1:   
1:   public Set<String> getExemptPackages()
1:   {
1:     return exemptPackages;
1:   }
1: 
1:   private String getPackageName(String name)
1:   {
1:     String packageName = null;
1:     if (name != null) {
1:       int index = name.lastIndexOf('/');
1:       if (index > 0) packageName = name.substring(0, index);
1:     }
1:     return packageName;
1:   }
1: 
1:   private String canonizePackage(String rawPackage)
1:   {
1:     String result = rawPackage.replace('/', '.');
1: 
1:     // handle arrays
1:     return result.replaceFirst("^\\[+L", "");
1:   }
1:   
1:   private void addPackage(String packageName)
1:   {
1:     if (packageName != null) {
1:       packages.add(canonizePackage(packageName));
1:     }
1:   }
1:   
1:   private void addExemptPackage(String packageName)
1:   {
1:     if (packageName != null) 
1:       exemptPackages.add(canonizePackage(packageName));
1:   }
1: 
1:   private void addPackages(String[] packageNames)
1:   {
1:     if (packageNames != null) {
1:       for (String s : packageNames)
1:         if (s != null) {
1:           packages.add(canonizePackage(s));
1:         }
1:     }
1:   }
1: 
1:   private String getResolvedPackageName(String name)
1:   {
1:     String resolvedName = null;
1:     if (name != null) resolvedName = getPackageName(name);
1:     return resolvedName;
1:   }
1: 
1:   private String[] getResolvedPackageNames(String[] names)
1:   {
1:     String[] resolvedNames = null;
1:     if (names != null) {
1:       resolvedNames = new String[names.length];
1:       int i = 0;
1:       for (String s : names)
1:         resolvedNames[i++] = getResolvedPackageName(s);
1:     }
1:     return resolvedNames;
1:   }
1: 
1:   private String getDescriptorInfo(String descriptor)
1:   {
1:     String type = null;
1:     if (descriptor != null) type = getType(Type.getType(descriptor));
1:     return type;
1:   }
1: 
1:   private String[] getMethodDescriptorInfo(String descriptor)
1:   {
1:     String[] descriptors = null;
1:     if (descriptor != null) {
1:       Type[] types = Type.getArgumentTypes(descriptor);
1:       descriptors = new String[types.length + 1];
1:       descriptors[0] = getType(Type.getReturnType(descriptor));
1:       int i = 1;
1:       for (Type t : types)
1:         descriptors[i++] = getType(t);
1:     }
1:     return descriptors;
1:   }
1: 
1:   private String getType(Type t)
1:   {
1:     String type = null;
1:     switch (t.getSort())
1:     {
1:       case Type.ARRAY:
1:         type = getType(t.getElementType());
1:         break;
1:       case Type.OBJECT:
1:         type = getPackageName(t.getInternalName());
1:         break;
1:     }
1:     return type;
1:   }
1: 
1:   private void addSignaturePackages(String signature)
1:   {
0:     if (signature != null) new SignatureReader(signature).accept(this);
1:   }
1: 
1:   private void addResolvedSignaturePackages(String signature)
1:   {
0:     if (signature != null) new SignatureReader(signature).acceptType(this);
1:   }
1: 
1:   //
1:   // ClassVisitor methods
1:   //
1: 
1:   public void visit(int arg0, int arg1, String name, String signature, String parent,
1:       String[] interfaces)
1:   {
1:     // We dont want to import our own packages so we add this classes package name to the
1:     // list of exempt packages.
1:     addExemptPackage(getPackageName(name));
1: 
1:     if (signature == null) {
1:       addPackage(getResolvedPackageName(parent));
1:       addPackages(getResolvedPackageNames(interfaces));
1:     } else addSignaturePackages(signature);
1:   }
1: 
1:   public AnnotationVisitor visitAnnotation(String descriptor, boolean visible)
1:   {
1:     addPackage(getDescriptorInfo(descriptor));
0:     return this;
1:   }
1: 
1:   public void visitAttribute(Attribute arg0)
1:   {
1:     // No-op
1:   }
1: 
1:   public FieldVisitor visitField(int access, String name, String descriptor, String signature,
1:       Object value)
1:   {
1:     if (signature == null) addPackage(getDescriptorInfo(descriptor));
1:     else addResolvedSignaturePackages(signature);
1: 
1:     if (value instanceof Type) addPackage(getType((Type) value));
0:     return this;
1:   }
1: 
1:   public void visitInnerClass(String arg0, String arg1, String arg2, int arg3)
1:   {
1:     // no-op
1:   }
1: 
1:   public MethodVisitor visitMethod(int access, String name, String descriptor, String signature,
1:       String[] exceptions)
1:   {
1:     if (signature == null) addPackages(getMethodDescriptorInfo(descriptor));
1:     else addSignaturePackages(signature);
1: 
1:     addPackages(getResolvedPackageNames(exceptions));
0:     return this;
1: 
1:   }
1: 
1:   public void visitOuterClass(String arg0, String arg1, String arg2)
1:   {
1:     // no-op
1:   }
1: 
1:   public void visitSource(String arg0, String arg1)
1:   {
1:     // no-op
1:   }
1: 
1:   public void visitEnd()
1:   {
1:     // no-op
1:   }
1: 
1:   // 
0:   // MethodVisitor methods
1:   //
1: 
0:   public AnnotationVisitor visitAnnotationDefault()
1:   {
0:     return this;
1:   }
1: 
0:   public void visitCode()
1:   {
1:     // no-op
1:   }
1: 
0:   public void visitFieldInsn(int opcode, String owner, String name, String descriptor)
1:   {
0:     addPackage(getResolvedPackageName(owner));
1:     addPackage(getDescriptorInfo(descriptor));
1:   }
1: 
0:   public void visitFrame(int arg0, int arg1, Object[] arg2, int arg3, Object[] arg4)
1:   {
1:     // no-op
1:   }
1: 
0:   public void visitIincInsn(int arg0, int arg1)
1:   {
1:     // no-op
1:   }
1: 
0:   public void visitInsn(int arg0)
1:   {
1:     // no-op
1:   }
1: 
0:   public void visitIntInsn(int arg0, int arg1)
1:   {
1:     // no-op
1:   }
1: 
0:   public void visitJumpInsn(int arg0, Label arg1)
1:   {
1:     // no-op
1:   }
1: 
0:   public void visitLabel(Label arg0)
1:   {
1:     // no-op
1:   }
1: 
0:   public void visitLdcInsn(Object type)
1:   {
0:     if (type instanceof Type) addPackage(getType((Type) type));
1:   }
1: 
0:   public void visitLineNumber(int arg0, Label arg1)
1:   {
1:     // no-op
1:   }
1: 
0:   public void visitLocalVariable(String name, String descriptor, String signature, Label start,
0:       Label end, int index)
1:   {
0:     addResolvedSignaturePackages(signature);
1:   }
1: 
0:   public void visitLookupSwitchInsn(Label arg0, int[] arg1, Label[] arg2)
1:   {
1:     // no-op
1:   }
1: 
0:   public void visitMaxs(int arg0, int arg1)
1:   {
1:     // no-op
1:   }
1: 
0:   public void visitMethodInsn(int opcode, String owner, String name, String descriptor)
1:   {
0:     addPackage(getResolvedPackageName(owner));
0:     addPackages(getMethodDescriptorInfo(descriptor));
1:   }
1: 
0:   public void visitMultiANewArrayInsn(String descriptor, int arg1)
1:   {
1:     addPackage(getDescriptorInfo(descriptor));
1:   }
1: 
0:   public AnnotationVisitor visitParameterAnnotation(int arg0, String descriptor, boolean arg2)
1:   {
1:     addPackage(getDescriptorInfo(descriptor));
0:     return this;
1:   }
1: 
0:   public void visitTableSwitchInsn(int arg0, int arg1, Label arg2, Label[] arg3)
1:   {
0:     //no-op
1:   }
1: 
0:   public void visitTryCatchBlock(Label arg0, Label arg1, Label arg2, String type)
1:   {
0:     addPackage(getResolvedPackageName(type));
1:   }
1: 
0:   public void visitTypeInsn(int arg0, String type)
1:   {
0:     addPackage(getResolvedPackageName(type));
1:   }
1: 
0:   public void visitVarInsn(int arg0, int arg1)
1:   {
1:     // no-op
1:   }
1: 
1:   //
0:   // AnnotationVisitor Methods
1:   //
1: 
0:   public void visit(String arg0, Object value)
1:   {
0:     if (value instanceof Type) {
0:       addPackage(getType((Type) value));
1:     }
1:   }
1: 
0:   public AnnotationVisitor visitAnnotation(String arg0, String descriptor)
1:   {
1:     addPackage(getDescriptorInfo(descriptor));
0:     return this;
1:   }
1: 
0:   public AnnotationVisitor visitArray(String arg0)
1:   {
0:     return this;
1:   }
1: 
0:   public void visitEnum(String name, String desc, String value)
1:   {
0:     addPackage(getDescriptorInfo(desc));
1:   }
1: 
1:   // 
0:   // SignatureVisitor methods
1:   //
1: 
0:   public SignatureVisitor visitArrayType()
1:   {
0:     return this;
1:   }
1: 
0:   public void visitBaseType(char arg0)
1:   {
1:     // no-op
1:   }
1: 
0:   public SignatureVisitor visitClassBound()
1:   {
0:     return this;
1:   }
1: 
0:   public void visitClassType(String name)
1:   {
0:     signatureOuterClass = name;
0:     addPackage(getResolvedPackageName(name));
1:   }
1: 
0:   public void visitInnerClassType(String name)
1:   {
0:     addPackage(getResolvedPackageName(signatureOuterClass + "$" + name));
1:   }
1: 
0:   public SignatureVisitor visitExceptionType()
1:   {
0:     return this;
1:   }
1: 
0:   public void visitFormalTypeParameter(String arg0)
1:   {
1:     // no-op
1:   }
1: 
0:   public SignatureVisitor visitInterface()
1:   {
0:     return this;
1:   }
1: 
0:   public SignatureVisitor visitParameterType()
1:   {
0:     return this;
1:   }
1: 
0:   public SignatureVisitor visitReturnType()
1:   {
0:     return this;
1:   }
1: 
0:   public SignatureVisitor visitSuperclass()
1:   {
0:     return this;
1:   }
1: 
0:   public void visitTypeArgument()
1:   {
1:     // no-op
1:   }
1: 
0:   public SignatureVisitor visitTypeArgument(char arg0)
1:   {
0:     return this;
1:   }
1: 
0:   public void visitTypeVariable(String arg0)
1:   {
1:     // no-op
1:   }
1: 
0:   public SignatureVisitor visitInterfaceBound()
1:   {
0:     return this;
1:   }
1: 
1: }
============================================================================