1:efb3993: /*
1:efb3993:  * Licensed to the Apache Software Foundation (ASF) under one
1:efb3993:  * or more contributor license agreements.  See the NOTICE file
1:efb3993:  * distributed with this work for additional information
1:efb3993:  * regarding copyright ownership.  The ASF licenses this file
1:efb3993:  * to you under the Apache License, Version 2.0 (the
1:efb3993:  * "License"); you may not use this file except in compliance
1:efb3993:  * with the License.  You may obtain a copy of the License at
1:efb3993:  *
1:efb3993:  *   http://www.apache.org/licenses/LICENSE-2.0
1:efb3993:  *
1:efb3993:  * Unless required by applicable law or agreed to in writing,
1:efb3993:  * software distributed under the License is distributed on an
1:efb3993:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:efb3993:  * KIND, either express or implied.  See the License for the
1:efb3993:  * specific language governing permissions and limitations
1:efb3993:  * under the License.
1:efb3993:  */
1:7c388cb: package org.apache.aries.tx.control.resource.common.impl;
1:7c388cb: 
1:7c388cb: import java.util.ArrayList;
1:7c388cb: import java.util.List;
1:7c388cb: import java.util.concurrent.Callable;
1:7c388cb: 
1:7c388cb: import org.osgi.framework.ServiceException;
1:7c388cb: import org.slf4j.Logger;
1:7c388cb: import org.slf4j.LoggerFactory;
1:7c388cb: 
1:7c388cb: public abstract class TrackingResourceProviderFactory<T extends AutoCloseable> {
1:7c388cb: 
1:7c388cb: 	private static final Logger LOG = LoggerFactory.getLogger(TrackingResourceProviderFactory.class);
1:7c388cb: 	
1:7c388cb: 	private final List<T> toClose = new ArrayList<>();
1:7c388cb: 	
1:7c388cb: 	private boolean closed;
1:7c388cb: 	
1:7c388cb: 	protected T doGetResult(Callable<T> getter) {
1:7c388cb: 		synchronized (getter) {
1:7c388cb: 			if (closed) {
1:7c388cb: 				throw new IllegalStateException("This ResourceProvider has been reclaimed because the factory service that provided it was released");
1:7c388cb: 			}
1:7c388cb: 		}
1:7c388cb: 		T t;
1:7c388cb: 		try {
1:7c388cb: 			t = getter.call();
1:7c388cb: 		} catch (Exception e) {
1:7c388cb: 			LOG.warn("A failure occurred obtaining the resource provider", e);
1:7c388cb: 			throw new ServiceException("A failure occurred obtaining the resource provider", e);
1:7c388cb: 		}
1:7c388cb: 		boolean destroy = false;
1:7c388cb: 		synchronized (toClose) {
1:7c388cb: 			if (closed) {
1:7c388cb: 				destroy = true;
1:7c388cb: 			} else {
1:7c388cb: 			    toClose.add(t);
1:7c388cb: 			}
1:7c388cb: 		}
1:7c388cb: 		if(destroy) {
1:7c388cb: 			try {
1:7c388cb: 				t.close();
1:7c388cb: 			} catch (Exception e) {
1:7c388cb: 				LOG.warn("A failure occurred closing the resource provider", e);
1:7c388cb: 			}
1:7c388cb: 			throw new IllegalStateException("This ResourceProvider has been reclaimed because the factory service that provided it was released");
1:7c388cb: 		}
1:7c388cb: 		return t;
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	public void closeAll() {
1:7c388cb: 		synchronized (toClose) {
1:7c388cb: 			closed = true;
1:7c388cb: 		}
1:7c388cb: 		// toClose is now up to date and no other thread will write it
1:7c388cb: 		toClose.stream().forEach(ajcp -> {
1:7c388cb: 			try {
1:7c388cb: 				ajcp.close();
1:7c388cb: 			} catch (Exception e) {}
1:7c388cb: 		});
1:7c388cb: 		
1:7c388cb: 		toClose.clear();
1:7c388cb: 	}
1:7c388cb: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:efb3993
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:7c388cb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.resource.common.impl;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.Callable;
1: 
1: import org.osgi.framework.ServiceException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public abstract class TrackingResourceProviderFactory<T extends AutoCloseable> {
1: 
1: 	private static final Logger LOG = LoggerFactory.getLogger(TrackingResourceProviderFactory.class);
1: 	
1: 	private final List<T> toClose = new ArrayList<>();
1: 	
1: 	private boolean closed;
1: 	
1: 	protected T doGetResult(Callable<T> getter) {
1: 		synchronized (getter) {
1: 			if (closed) {
1: 				throw new IllegalStateException("This ResourceProvider has been reclaimed because the factory service that provided it was released");
1: 			}
1: 		}
1: 		T t;
1: 		try {
1: 			t = getter.call();
1: 		} catch (Exception e) {
1: 			LOG.warn("A failure occurred obtaining the resource provider", e);
1: 			throw new ServiceException("A failure occurred obtaining the resource provider", e);
1: 		}
1: 		boolean destroy = false;
1: 		synchronized (toClose) {
1: 			if (closed) {
1: 				destroy = true;
1: 			} else {
1: 			    toClose.add(t);
1: 			}
1: 		}
1: 		if(destroy) {
1: 			try {
1: 				t.close();
1: 			} catch (Exception e) {
1: 				LOG.warn("A failure occurred closing the resource provider", e);
1: 			}
1: 			throw new IllegalStateException("This ResourceProvider has been reclaimed because the factory service that provided it was released");
1: 		}
1: 		return t;
1: 	}
1: 
1: 	public void closeAll() {
1: 		synchronized (toClose) {
1: 			closed = true;
1: 		}
1: 		// toClose is now up to date and no other thread will write it
1: 		toClose.stream().forEach(ajcp -> {
1: 			try {
1: 				ajcp.close();
1: 			} catch (Exception e) {}
1: 		});
1: 		
1: 		toClose.clear();
1: 	}
1: }
============================================================================