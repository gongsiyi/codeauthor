1:0737543: /*
1:0737543:  * Licensed to the Apache Software Foundation (ASF) under one
1:0737543:  * or more contributor license agreements.  See the NOTICE file
1:0737543:  * distributed with this work for additional information
1:0737543:  * regarding copyright ownership.  The ASF licenses this file
1:0737543:  * to you under the Apache License, Version 2.0 (the
1:0737543:  * "License"); you may not use this file except in compliance
1:0737543:  * with the License.  You may obtain a copy of the License at
1:0737543:  *
1:0737543:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0737543:  *
1:0737543:  * Unless required by applicable law or agreed to in writing,
1:0737543:  * software distributed under the License is distributed on an
1:0737543:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0737543:  * KIND, either express or implied.  See the License for the
1:0737543:  * specific language governing permissions and limitations
1:0737543:  * under the License.
1:0737543:  */
1:0737543: 
1:0737543: package org.apache.aries.proxy.impl;
1:0737543: 
1:0737543: import java.io.IOException;
1:0737543: import java.io.InputStream;
1:0737543: import java.net.URL;
1:0737543: 
1:0737543: public class SystemModuleClassLoader extends ClassLoader {
1:0737543: 
1:0737543:     private static java.lang.reflect.Method method_Class_getModule;
1:0737543:     private static java.lang.reflect.Method method_Module_getResourceAsStream ;
1:0737543:     static {
1:0737543:         try {
1:0737543:             method_Class_getModule = Class.class.getMethod("getModule");
1:0737543:             method_Module_getResourceAsStream = method_Class_getModule.getReturnType()
1:0737543:                 .getMethod("getResourceAsStream", String.class);
1:0737543:         } catch (NoSuchMethodException e) {
1:0737543:             //this isn't java9 with jigsaw
1:0737543: 
1:0737543:         }
1:0737543:     }
1:0737543: 
1:0737543: 
1:0737543:     public SystemModuleClassLoader(ClassLoader parentLoader) {
1:0737543:         super(parentLoader);
1:0737543:     }
1:0737543: 
1:0737543:     public SystemModuleClassLoader() {
1:0737543:         super();
1:0737543:     }
1:0737543: 
1:0737543:     @Override
1:0737543:     public InputStream getResourceAsStream(String name) {
1:0737543:         URL url = getResource(name);
1:0737543:         if (url == null) {
1:0737543:             // try java9 module resource loader
1:0737543:             if (method_Class_getModule == null || method_Module_getResourceAsStream == null) {
1:0737543:                 return null; // not Java 9 JIGSAW
1:0737543:             }
1:0737543:             try {
1:0737543:                 String className = name.replace('/', '.');
1:0737543:                 int lastDot = className.lastIndexOf('.');
1:0737543:                 className = className.substring(0, lastDot);
1:0737543:                 final Class<?> clazz = Class.forName(className, false, this);
1:0737543:                 final Object module = method_Class_getModule.invoke(clazz);
1:0737543:                 return (InputStream)method_Module_getResourceAsStream
1:0737543:                     .invoke(module, name);
1:0737543:             } catch (Exception e) {
1:0737543:                 return null; // not found
1:0737543:             }
1:0737543:         } else {
1:0737543:             try {
1:0737543:                 return url.openStream();
1:0737543:             } catch (IOException e) {
1:0737543:                 return null;
1:0737543:             }
1:0737543:         }
1:0737543:     }
1:0737543: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0737543
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.proxy.impl;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: 
1: public class SystemModuleClassLoader extends ClassLoader {
1: 
1:     private static java.lang.reflect.Method method_Class_getModule;
1:     private static java.lang.reflect.Method method_Module_getResourceAsStream ;
1:     static {
1:         try {
1:             method_Class_getModule = Class.class.getMethod("getModule");
1:             method_Module_getResourceAsStream = method_Class_getModule.getReturnType()
1:                 .getMethod("getResourceAsStream", String.class);
1:         } catch (NoSuchMethodException e) {
1:             //this isn't java9 with jigsaw
1: 
1:         }
1:     }
1: 
1: 
1:     public SystemModuleClassLoader(ClassLoader parentLoader) {
1:         super(parentLoader);
1:     }
1: 
1:     public SystemModuleClassLoader() {
1:         super();
1:     }
1: 
1:     @Override
1:     public InputStream getResourceAsStream(String name) {
1:         URL url = getResource(name);
1:         if (url == null) {
1:             // try java9 module resource loader
1:             if (method_Class_getModule == null || method_Module_getResourceAsStream == null) {
1:                 return null; // not Java 9 JIGSAW
1:             }
1:             try {
1:                 String className = name.replace('/', '.');
1:                 int lastDot = className.lastIndexOf('.');
1:                 className = className.substring(0, lastDot);
1:                 final Class<?> clazz = Class.forName(className, false, this);
1:                 final Object module = method_Class_getModule.invoke(clazz);
1:                 return (InputStream)method_Module_getResourceAsStream
1:                     .invoke(module, name);
1:             } catch (Exception e) {
1:                 return null; // not found
1:             }
1:         } else {
1:             try {
1:                 return url.openStream();
1:             } catch (IOException e) {
1:                 return null;
1:             }
1:         }
1:     }
1: }
============================================================================