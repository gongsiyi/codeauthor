1:76b662a: /**
1:76b662a:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:76b662a:  *  contributor license agreements.  See the NOTICE file distributed with
1:76b662a:  *  this work for additional information regarding copyright ownership.
1:76b662a:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:76b662a:  *  (the "License"); you may not use this file except in compliance with
1:76b662a:  *  the License.  You may obtain a copy of the License at
1:76b662a:  *
1:76b662a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:76b662a:  *
1:76b662a:  *  Unless required by applicable law or agreed to in writing, software
1:76b662a:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:76b662a:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:76b662a:  *  See the License for the specific language governing permissions and
1:76b662a:  *  limitations under the License.
1:76b662a:  */
1:76b662a: package org.apache.aries.blueprint.testbundlea;
1:76b662a: 
1:76b662a: import java.net.URL;
1:76b662a: import java.util.Set;
1:76b662a: 
1:76b662a: import org.apache.aries.blueprint.NamespaceHandler;
1:76b662a: import org.apache.aries.blueprint.ParserContext;
1:76b662a: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1:76b662a: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:76b662a: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:76b662a: import org.osgi.service.blueprint.reflect.Metadata;
1:76b662a: import org.w3c.dom.Element;
1:76b662a: import org.w3c.dom.Node;
1:76b662a: 
1:76b662a: public class NSHandlerThree implements NamespaceHandler{
1:76b662a:     public static String NSURI = "http://ns.handler.three";
1:76b662a:     
1:76b662a:     private static String ELT_NAME = "nshandlerthree";
1:76b662a:     private static String ATTRIB_ONE = "attribone";
1:76b662a:     private static String ATTRIB_TWO = "attribtwo";
1:76b662a:     
1:76b662a:     public ComponentMetadata decorate(Node node, ComponentMetadata component,
1:76b662a:             ParserContext context) {
1:76b662a:         if(node.getLocalName().equals(ATTRIB_ONE)){
1:76b662a:             if(component instanceof BeanMetadata){
1:76b662a:                 if(context.getComponentDefinitionRegistry().getComponentDefinition(NSURI+"/BeanProcessor")==null){
1:76b662a:                     BeanMetadata bm = context.createMetadata(BeanMetadata.class);
1:76b662a:                     MutableBeanMetadata mbm = (MutableBeanMetadata)bm;
1:76b662a:                     mbm.setProcessor(true);
1:76b662a:                     mbm.setRuntimeClass(BeanProcessorTest.class);
1:76b662a:                     mbm.setScope(BeanMetadata.SCOPE_SINGLETON);
1:76b662a:                     mbm.setId(NSURI+"/BeanProcessor");
1:76b662a:                     context.getComponentDefinitionRegistry().registerComponentDefinition(mbm);
1:76b662a:                 }
1:76b662a:             }
1:76b662a:         }
1:76b662a:         return component;
1:76b662a:     }
1:76b662a: 
1:76b662a:     //process elements
1:76b662a:     public Metadata parse(Element element, ParserContext context) {
1:76b662a:         return null;
1:76b662a:     }    
1:76b662a: 
1:76b662a:     //supply schema back to blueprint.
1:76b662a:     public URL getSchemaLocation(String namespace) {
1:76b662a:         return this.getClass().getResource("nshandlerthree.xsd");
1:76b662a:     }
1:76b662a: 
1:76b662a:     public Set<Class> getManagedClasses() {
1:76b662a:         return null;
1:76b662a:     }
1:76b662a: 
1:76b662a: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.testbundlea;
1: 
1: import java.net.URL;
1: import java.util.Set;
1: 
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.aries.blueprint.ParserContext;
1: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: 
1: public class NSHandlerThree implements NamespaceHandler{
1:     public static String NSURI = "http://ns.handler.three";
1:     
1:     private static String ELT_NAME = "nshandlerthree";
1:     private static String ATTRIB_ONE = "attribone";
1:     private static String ATTRIB_TWO = "attribtwo";
1:     
1:     public ComponentMetadata decorate(Node node, ComponentMetadata component,
1:             ParserContext context) {
1:         if(node.getLocalName().equals(ATTRIB_ONE)){
1:             if(component instanceof BeanMetadata){
1:                 if(context.getComponentDefinitionRegistry().getComponentDefinition(NSURI+"/BeanProcessor")==null){
1:                     BeanMetadata bm = context.createMetadata(BeanMetadata.class);
1:                     MutableBeanMetadata mbm = (MutableBeanMetadata)bm;
1:                     mbm.setProcessor(true);
1:                     mbm.setRuntimeClass(BeanProcessorTest.class);
1:                     mbm.setScope(BeanMetadata.SCOPE_SINGLETON);
1:                     mbm.setId(NSURI+"/BeanProcessor");
1:                     context.getComponentDefinitionRegistry().registerComponentDefinition(mbm);
1:                 }
1:             }
1:         }
1:         return component;
1:     }
1: 
1:     //process elements
1:     public Metadata parse(Element element, ParserContext context) {
1:         return null;
1:     }    
1: 
1:     //supply schema back to blueprint.
1:     public URL getSchemaLocation(String namespace) {
1:         return this.getClass().getResource("nshandlerthree.xsd");
1:     }
1: 
1:     public Set<Class> getManagedClasses() {
1:         return null;
1:     }
1: 
1: }
author:Andrew Osborne
-------------------------------------------------------------------------------
commit:4f67549
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *  Licensed to the Apache Software Foundation (ASF) under one or more
0:  *  contributor license agreements.  See the NOTICE file distributed with
0:  *  this work for additional information regarding copyright ownership.
0:  *  The ASF licenses this file to You under the Apache License, Version 2.0
0:  *  (the "License"); you may not use this file except in compliance with
0:  *  the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  *  Unless required by applicable law or agreed to in writing, software
0:  *  distributed under the License is distributed on an "AS IS" BASIS,
0:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  *  See the License for the specific language governing permissions and
0:  *  limitations under the License.
0:  */
0: package org.apache.aries.blueprint.testbundlea;
0: 
0: import java.net.URL;
0: import java.util.Set;
0: 
0: import org.apache.aries.blueprint.NamespaceHandler;
0: import org.apache.aries.blueprint.ParserContext;
0: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
0: import org.osgi.service.blueprint.reflect.BeanMetadata;
0: import org.osgi.service.blueprint.reflect.ComponentMetadata;
0: import org.osgi.service.blueprint.reflect.Metadata;
0: import org.w3c.dom.Element;
0: import org.w3c.dom.Node;
0: 
0: public class NSHandlerThree implements NamespaceHandler{
0:     public static String NSURI = "http://ns.handler.three";
0:     
0:     private static String ELT_NAME = "nshandlerthree";
0:     private static String ATTRIB_ONE = "attribone";
0:     private static String ATTRIB_TWO = "attribtwo";
0:     
0:     public ComponentMetadata decorate(Node node, ComponentMetadata component,
0:             ParserContext context) {
0:         if(node.getLocalName().equals(ATTRIB_ONE)){
0:             if(component instanceof BeanMetadata){
0:                 if(context.getComponentDefinitionRegistry().getComponentDefinition(NSURI+"/BeanProcessor")==null){
0:                     BeanMetadata bm = context.createMetadata(BeanMetadata.class);
0:                     MutableBeanMetadata mbm = (MutableBeanMetadata)bm;
0:                     mbm.setProcessor(true);
0:                     mbm.setRuntimeClass(BeanProcessorTest.class);
0:                     mbm.setScope(BeanMetadata.SCOPE_SINGLETON);
0:                     mbm.setId(NSURI+"/BeanProcessor");
0:                     context.getComponentDefinitionRegistry().registerComponentDefinition(mbm);
0:                 }
0:             }
0:         }
0:         return component;
0:     }
0: 
0:     //process elements
0:     public Metadata parse(Element element, ParserContext context) {
0:         return null;
0:     }    
0: 
0:     //supply schema back to blueprint.
0:     public URL getSchemaLocation(String namespace) {
0:         return this.getClass().getResource("nshandlerthree.xsd");
0:     }
0: 
0:     public Set<Class> getManagedClasses() {
0:         return null;
0:     }
0: 
0: }
============================================================================