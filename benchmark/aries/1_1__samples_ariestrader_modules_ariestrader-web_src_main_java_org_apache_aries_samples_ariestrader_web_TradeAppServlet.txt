1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.web;
4:628add4: 
1:628add4: import javax.servlet.*;
1:628add4: import javax.servlet.http.*;
1:628add4: 
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServicesManager;
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServiceUtilities;
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServices;
1:56a6860: import org.apache.aries.samples.ariestrader.util.*;
1:628add4: 
1:628add4: import java.io.IOException;
1:628add4: 
1:628add4: 
1:628add4: /**
1:628add4:  * 
1:628add4:  * TradeAppServlet provides the standard web interface to Trade and can be
1:628add4:  * accessed with the Go Trade! link. Driving benchmark load using this interface
1:628add4:  * requires a sophisticated web load generator that is capable of filling HTML
1:628add4:  * forms and posting dynamic data.
1:628add4:  */
1:628add4: 
1:628add4: public class TradeAppServlet extends HttpServlet {
1:628add4: 
1:628add4:     private static TradeServicesManager tradeServicesManager = null;
1:628add4: 
1:628add4:     /**
1:628add4:      * Servlet initialization method.
1:628add4:      */
1:628add4:     public void init(ServletConfig config) throws ServletException {
1:628add4:         super.init(config);
1:628add4:         java.util.Enumeration en = config.getInitParameterNames();
1:628add4:         while (en.hasMoreElements()) {
1:628add4:             String parm = (String) en.nextElement();
1:628add4:             String value = config.getInitParameter(parm);
1:628add4:             TradeConfig.setConfigParam(parm, value);
2:628add4:         }
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Returns a string that contains information about TradeScenarioServlet
1:628add4:      * 
1:628add4:      * @return The servlet information
1:628add4:      */
1:628add4:     public java.lang.String getServletInfo() {
1:628add4:         return "TradeAppServlet provides the standard web interface to Trade";
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Process incoming HTTP GET requests
1:628add4:      * 
1:628add4:      * @param request
1:628add4:      *            Object that encapsulates the request to the servlet
1:628add4:      * @param response
1:628add4:      *            Object that encapsulates the response from the servlet
1:628add4:      */
1:628add4:     public void doGet(javax.servlet.http.HttpServletRequest request,
1:628add4:             javax.servlet.http.HttpServletResponse response)
2:628add4:             throws ServletException, IOException {
1:628add4:         performTask(request, response);
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Process incoming HTTP POST requests
1:628add4:      * 
1:628add4:      * @param request
1:628add4:      *            Object that encapsulates the request to the servlet
1:628add4:      * @param response
1:628add4:      *            Object that encapsulates the response from the servlet
1:628add4:      */
1:628add4:     public void doPost(javax.servlet.http.HttpServletRequest request,
1:628add4:             javax.servlet.http.HttpServletResponse response)
1:628add4:             throws ServletException, IOException {
1:628add4:         performTask(request, response);
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Main service method for TradeAppServlet
1:628add4:      * 
1:628add4:      * @param request
1:628add4:      *            Object that encapsulates the request to the servlet
1:628add4:      * @param response
1:628add4:      *            Object that encapsulates the response from the servlet
1:628add4:      */
1:628add4:     public void performTask(HttpServletRequest req, HttpServletResponse resp)
1:628add4:             throws ServletException, IOException {
1:628add4: 
1:628add4:         String action = null;
1:628add4:         String userID = null;
1:628add4:         resp.setContentType("text/html");
1:628add4: 
1:628add4:         if (tradeServicesManager == null) {
1:628add4:             tradeServicesManager = TradeServiceUtilities.getTradeServicesManager();
1:628add4:         }
1:628add4:         TradeServices tradeServices = tradeServicesManager.getTradeServices();
1:628add4: 
1:628add4:         TradeServletAction tsAction = new TradeServletAction(tradeServices);
1:628add4: 
1:628add4:         // Dyna - need status string - prepended to output
1:628add4:         action = req.getParameter("action");
1:628add4: 
1:628add4:         ServletContext ctx = getServletConfig().getServletContext();
1:628add4: 
1:628add4:         if (action == null) {
1:628add4:             tsAction.doWelcome(ctx, req, resp, "");
1:628add4:             return;
1:628add4:         } else if (action.equals("login")) {
1:628add4:             userID = req.getParameter("uid");
1:628add4:             String passwd = req.getParameter("passwd");
1:628add4:             tsAction.doLogin(ctx, req, resp, userID, passwd);
1:628add4:             return;
1:628add4:         } else if (action.equals("register")) {
1:628add4:             userID = req.getParameter("user id");
1:628add4:             String passwd = req.getParameter("passwd");
1:628add4:             String cpasswd = req.getParameter("confirm passwd");
1:628add4:             String fullname = req.getParameter("Full Name");
1:628add4:             String ccn = req.getParameter("Credit Card Number");
1:628add4:             String money = req.getParameter("money");
1:628add4:             String email = req.getParameter("email");
1:628add4:             String smail = req.getParameter("snail mail");
1:628add4:             tsAction.doRegister(ctx, req, resp, userID, passwd, cpasswd,
1:628add4:                     fullname, ccn, money, email, smail);
1:628add4:             return;
1:628add4:         }
1:628add4: 
1:628add4:         // The rest of the operations require the user to be logged in -
1:628add4:         // Get the Session and validate the user.
1:628add4:         HttpSession session = req.getSession();
1:628add4:         userID = (String) session.getAttribute("uidBean");
1:628add4: 
1:628add4:         if (userID == null) {
1:628add4:             System.out
1:628add4:                     .println("TradeAppServlet service error: User Not Logged in");
1:628add4:             tsAction.doWelcome(ctx, req, resp, "User Not Logged in");
1:628add4:             return;
1:628add4:         }
1:628add4:         if (action.equals("quotes")) {
1:628add4:             String symbols = req.getParameter("symbols");
1:628add4:             tsAction.doQuotes(ctx, req, resp, userID, symbols);
1:628add4:         } else if (action.equals("buy")) {
1:628add4:             String symbol = req.getParameter("symbol");
1:628add4:             String quantity = req.getParameter("quantity");
1:628add4:             tsAction.doBuy(ctx, req, resp, userID, symbol, quantity);
1:628add4:         } else if (action.equals("sell")) {
1:628add4:             int holdingID = Integer.parseInt(req.getParameter("holdingID"));
1:628add4:             tsAction.doSell(ctx, req, resp, userID, new Integer(holdingID));
1:628add4:         } else if (action.equals("portfolio")
1:628add4:                 || action.equals("portfolioNoEdge")) {
1:628add4:             tsAction.doPortfolio(ctx, req, resp, userID, "Portfolio as of "
1:628add4:                     + new java.util.Date());
1:628add4:         } else if (action.equals("logout")) {
1:628add4:             tsAction.doLogout(ctx, req, resp, userID);
1:628add4:         } else if (action.equals("home")) {
1:628add4:             tsAction.doHome(ctx, req, resp, userID, "Ready to Trade");
1:628add4:         } else if (action.equals("account")) {
1:628add4:             tsAction.doAccount(ctx, req, resp, userID, "");
1:628add4:         } else if (action.equals("update_profile")) {
1:628add4:             String password = req.getParameter("password");
1:628add4:             String cpassword = req.getParameter("cpassword");
1:628add4:             String fullName = req.getParameter("fullname");
1:628add4:             String address = req.getParameter("address");
1:628add4:             String creditcard = req.getParameter("creditcard");
1:628add4:             String email = req.getParameter("email");
1:628add4:             tsAction.doAccountUpdate(ctx, req, resp, userID,
1:628add4:                     password == null ? "" : password.trim(),
1:628add4:                     cpassword == null ? "" : cpassword.trim(),
1:628add4:                     fullName == null ? "" : fullName.trim(),
1:628add4:                     address == null ? "" : address.trim(),
1:628add4:                     creditcard == null ? "" : creditcard.trim(),
1:628add4:                     email == null ? "" : email.trim());
1:628add4:         } else {
1:628add4:             System.out.println("TradeAppServlet: Invalid Action=" + action);
1:628add4:             tsAction.doWelcome(ctx, req, resp,
1:628add4:                     "TradeAppServlet: Invalid Action" + action);
1:628add4:         }
1:628add4:     }
1:628add4: 
1:628add4: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.web;
1: import org.apache.aries.samples.ariestrader.api.TradeServicesManager;
1: import org.apache.aries.samples.ariestrader.api.TradeServiceUtilities;
1: import org.apache.aries.samples.ariestrader.api.TradeServices;
1: import org.apache.aries.samples.ariestrader.util.*;
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.web;
0: import org.apache.aries.samples.daytrader.api.TradeServicesManager;
0: import org.apache.aries.samples.daytrader.api.TradeServiceUtilities;
0: import org.apache.aries.samples.daytrader.api.TradeServices;
0: import org.apache.aries.samples.daytrader.util.*;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.web;
1: 
1: import javax.servlet.*;
1: import javax.servlet.http.*;
1: 
0: import org.apache.geronimo.samples.daytrader.api.TradeServicesManager;
0: import org.apache.geronimo.samples.daytrader.api.TradeServiceUtilities;
0: import org.apache.geronimo.samples.daytrader.api.TradeServices;
0: import org.apache.geronimo.samples.daytrader.util.*;
1: 
1: import java.io.IOException;
1: 
1: 
1: /**
1:  * 
1:  * TradeAppServlet provides the standard web interface to Trade and can be
1:  * accessed with the Go Trade! link. Driving benchmark load using this interface
1:  * requires a sophisticated web load generator that is capable of filling HTML
1:  * forms and posting dynamic data.
1:  */
1: 
1: public class TradeAppServlet extends HttpServlet {
1: 
1:     private static TradeServicesManager tradeServicesManager = null;
1: 
1:     /**
1:      * Servlet initialization method.
1:      */
1:     public void init(ServletConfig config) throws ServletException {
1:         super.init(config);
1:         java.util.Enumeration en = config.getInitParameterNames();
1:         while (en.hasMoreElements()) {
1:             String parm = (String) en.nextElement();
1:             String value = config.getInitParameter(parm);
1:             TradeConfig.setConfigParam(parm, value);
1:         }
1:     }
1: 
1:     /**
1:      * Returns a string that contains information about TradeScenarioServlet
1:      * 
1:      * @return The servlet information
1:      */
1:     public java.lang.String getServletInfo() {
1:         return "TradeAppServlet provides the standard web interface to Trade";
1:     }
1: 
1:     /**
1:      * Process incoming HTTP GET requests
1:      * 
1:      * @param request
1:      *            Object that encapsulates the request to the servlet
1:      * @param response
1:      *            Object that encapsulates the response from the servlet
1:      */
1:     public void doGet(javax.servlet.http.HttpServletRequest request,
1:             javax.servlet.http.HttpServletResponse response)
1:             throws ServletException, IOException {
1:         performTask(request, response);
1:     }
1: 
1:     /**
1:      * Process incoming HTTP POST requests
1:      * 
1:      * @param request
1:      *            Object that encapsulates the request to the servlet
1:      * @param response
1:      *            Object that encapsulates the response from the servlet
1:      */
1:     public void doPost(javax.servlet.http.HttpServletRequest request,
1:             javax.servlet.http.HttpServletResponse response)
1:             throws ServletException, IOException {
1:         performTask(request, response);
1:     }
1: 
1:     /**
1:      * Main service method for TradeAppServlet
1:      * 
1:      * @param request
1:      *            Object that encapsulates the request to the servlet
1:      * @param response
1:      *            Object that encapsulates the response from the servlet
1:      */
1:     public void performTask(HttpServletRequest req, HttpServletResponse resp)
1:             throws ServletException, IOException {
1: 
1:         String action = null;
1:         String userID = null;
0:         // String to create full dispatch path to TradeAppServlet w/ request
0:         // Parameters
0:         String dispPath = null; // Dispatch Path to TradeAppServlet
1: 
1:         resp.setContentType("text/html");
1: 
1:         if (tradeServicesManager == null) {
1:             tradeServicesManager = TradeServiceUtilities.getTradeServicesManager();
1:         }
1:         TradeServices tradeServices = tradeServicesManager.getTradeServices();
1: 
1:         TradeServletAction tsAction = new TradeServletAction(tradeServices);
1: 
1:         // Dyna - need status string - prepended to output
1:         action = req.getParameter("action");
1: 
1:         ServletContext ctx = getServletConfig().getServletContext();
1: 
1:         if (action == null) {
1:             tsAction.doWelcome(ctx, req, resp, "");
1:             return;
1:         } else if (action.equals("login")) {
1:             userID = req.getParameter("uid");
1:             String passwd = req.getParameter("passwd");
0:             String inScenario = req.getParameter("inScenario");
1:             tsAction.doLogin(ctx, req, resp, userID, passwd);
1:             return;
1:         } else if (action.equals("register")) {
1:             userID = req.getParameter("user id");
1:             String passwd = req.getParameter("passwd");
1:             String cpasswd = req.getParameter("confirm passwd");
1:             String fullname = req.getParameter("Full Name");
1:             String ccn = req.getParameter("Credit Card Number");
1:             String money = req.getParameter("money");
1:             String email = req.getParameter("email");
1:             String smail = req.getParameter("snail mail");
1:             tsAction.doRegister(ctx, req, resp, userID, passwd, cpasswd,
1:                     fullname, ccn, money, email, smail);
1:             return;
1:         }
1: 
1:         // The rest of the operations require the user to be logged in -
1:         // Get the Session and validate the user.
1:         HttpSession session = req.getSession();
1:         userID = (String) session.getAttribute("uidBean");
1: 
1:         if (userID == null) {
1:             System.out
1:                     .println("TradeAppServlet service error: User Not Logged in");
1:             tsAction.doWelcome(ctx, req, resp, "User Not Logged in");
1:             return;
1:         }
1:         if (action.equals("quotes")) {
1:             String symbols = req.getParameter("symbols");
1:             tsAction.doQuotes(ctx, req, resp, userID, symbols);
1:         } else if (action.equals("buy")) {
1:             String symbol = req.getParameter("symbol");
1:             String quantity = req.getParameter("quantity");
1:             tsAction.doBuy(ctx, req, resp, userID, symbol, quantity);
1:         } else if (action.equals("sell")) {
1:             int holdingID = Integer.parseInt(req.getParameter("holdingID"));
1:             tsAction.doSell(ctx, req, resp, userID, new Integer(holdingID));
1:         } else if (action.equals("portfolio")
1:                 || action.equals("portfolioNoEdge")) {
1:             tsAction.doPortfolio(ctx, req, resp, userID, "Portfolio as of "
1:                     + new java.util.Date());
1:         } else if (action.equals("logout")) {
1:             tsAction.doLogout(ctx, req, resp, userID);
1:         } else if (action.equals("home")) {
1:             tsAction.doHome(ctx, req, resp, userID, "Ready to Trade");
1:         } else if (action.equals("account")) {
1:             tsAction.doAccount(ctx, req, resp, userID, "");
1:         } else if (action.equals("update_profile")) {
1:             String password = req.getParameter("password");
1:             String cpassword = req.getParameter("cpassword");
1:             String fullName = req.getParameter("fullname");
1:             String address = req.getParameter("address");
1:             String creditcard = req.getParameter("creditcard");
1:             String email = req.getParameter("email");
1:             tsAction.doAccountUpdate(ctx, req, resp, userID,
1:                     password == null ? "" : password.trim(),
1:                     cpassword == null ? "" : cpassword.trim(),
1:                     fullName == null ? "" : fullName.trim(),
1:                     address == null ? "" : address.trim(),
1:                     creditcard == null ? "" : creditcard.trim(),
1:                     email == null ? "" : email.trim());
1:         } else {
1:             System.out.println("TradeAppServlet: Invalid Action=" + action);
1:             tsAction.doWelcome(ctx, req, resp,
1:                     "TradeAppServlet: Invalid Action" + action);
1:         }
1:     }
1: 
0:     private void sendRedirect(HttpServletResponse resp, String page)
1:             throws ServletException, IOException {
0:         resp.sendRedirect(resp.encodeRedirectURL(page));
1:     }
1: 
0:     // URL Path Prefix for dispatching to TradeAppServlet
0:     private final static String tasPathPrefix = "/app?action=";
1: 
1: }
============================================================================