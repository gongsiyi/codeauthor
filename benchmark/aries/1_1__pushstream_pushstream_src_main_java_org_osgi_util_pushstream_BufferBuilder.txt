1:7fa86e8: /*
1:7fa86e8:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:7fa86e8:  * 
1:7fa86e8:  * Licensed under the Apache License, Version 2.0 (the "License");
1:7fa86e8:  * you may not use this file except in compliance with the License.
1:7fa86e8:  * You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing, software
1:7fa86e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7fa86e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7fa86e8:  * See the License for the specific language governing permissions and
1:7fa86e8:  * limitations under the License.
1:7fa86e8:  */
1:7fa86e8: package org.osgi.util.pushstream;
1:7fa86e8: 
1:7fa86e8: import java.util.concurrent.BlockingQueue;
1:7fa86e8: import java.util.concurrent.Executor;
1:7fa86e8: 
1:7fa86e8: /**
1:7fa86e8:  * Create a buffered section of a Push-based stream
1:7fa86e8:  *
1:7fa86e8:  * @param <R> The type of object being built
1:7fa86e8:  * @param <T> The type of objects in the {@link PushEvent}
1:7fa86e8:  * @param <U> The type of the Queue used in the user specified buffer
1:7fa86e8:  */
1:7fa86e8: public interface BufferBuilder<R, T, U extends BlockingQueue<PushEvent<? extends T>>> {
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * The BlockingQueue implementation to use as a buffer
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param queue
1:7fa86e8: 	 * @return this builder
1:7fa86e8: 	 */
1:7fa86e8: 	BufferBuilder<R, T, U> withBuffer(U queue);
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Set the {@link QueuePolicy} of this Builder
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param queuePolicy
1:7fa86e8: 	 * @return this builder
1:7fa86e8: 	 */
1:7fa86e8: 	BufferBuilder<R,T,U> withQueuePolicy(QueuePolicy<T,U> queuePolicy);
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Set the {@link QueuePolicy} of this Builder
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param queuePolicyOption
1:7fa86e8: 	 * @return this builder
1:7fa86e8: 	 */
1:7fa86e8: 	BufferBuilder<R, T, U> withQueuePolicy(QueuePolicyOption queuePolicyOption);
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Set the {@link PushbackPolicy} of this builder
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param pushbackPolicy
1:7fa86e8: 	 * @return this builder
1:7fa86e8: 	 */
1:7fa86e8: 	BufferBuilder<R, T, U> withPushbackPolicy(PushbackPolicy<T, U> pushbackPolicy);
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Set the {@link PushbackPolicy} of this builder
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param pushbackPolicyOption
1:7fa86e8: 	 * @param time
1:7fa86e8: 	 * @return this builder
1:7fa86e8: 	 */
1:7fa86e8: 	BufferBuilder<R, T, U> withPushbackPolicy(PushbackPolicyOption pushbackPolicyOption, long time);
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Set the maximum permitted number of concurrent event deliveries allowed
1:7fa86e8: 	 * from this buffer
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param parallelism
1:7fa86e8: 	 * @return this builder
1:7fa86e8: 	 */
1:7fa86e8: 	BufferBuilder<R, T, U> withParallelism(int parallelism);
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Set the {@link Executor} that should be used to deliver events from this
1:7fa86e8: 	 * buffer
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param executor
1:7fa86e8: 	 * @return this builder
1:7fa86e8: 	 */
1:7fa86e8: 	BufferBuilder<R, T, U> withExecutor(Executor executor);
1:7fa86e8: 	
1:7fa86e8: 	/**
1:7fa86e8: 	 * @return the object being built
1:7fa86e8: 	 */
1:7fa86e8: 	R create();
1:7fa86e8: 
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.util.pushstream;
1: 
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.Executor;
1: 
1: /**
1:  * Create a buffered section of a Push-based stream
1:  *
1:  * @param <R> The type of object being built
1:  * @param <T> The type of objects in the {@link PushEvent}
1:  * @param <U> The type of the Queue used in the user specified buffer
1:  */
1: public interface BufferBuilder<R, T, U extends BlockingQueue<PushEvent<? extends T>>> {
1: 
1: 	/**
1: 	 * The BlockingQueue implementation to use as a buffer
1: 	 * 
1: 	 * @param queue
1: 	 * @return this builder
1: 	 */
1: 	BufferBuilder<R, T, U> withBuffer(U queue);
1: 
1: 	/**
1: 	 * Set the {@link QueuePolicy} of this Builder
1: 	 * 
1: 	 * @param queuePolicy
1: 	 * @return this builder
1: 	 */
1: 	BufferBuilder<R,T,U> withQueuePolicy(QueuePolicy<T,U> queuePolicy);
1: 
1: 	/**
1: 	 * Set the {@link QueuePolicy} of this Builder
1: 	 * 
1: 	 * @param queuePolicyOption
1: 	 * @return this builder
1: 	 */
1: 	BufferBuilder<R, T, U> withQueuePolicy(QueuePolicyOption queuePolicyOption);
1: 
1: 	/**
1: 	 * Set the {@link PushbackPolicy} of this builder
1: 	 * 
1: 	 * @param pushbackPolicy
1: 	 * @return this builder
1: 	 */
1: 	BufferBuilder<R, T, U> withPushbackPolicy(PushbackPolicy<T, U> pushbackPolicy);
1: 
1: 	/**
1: 	 * Set the {@link PushbackPolicy} of this builder
1: 	 * 
1: 	 * @param pushbackPolicyOption
1: 	 * @param time
1: 	 * @return this builder
1: 	 */
1: 	BufferBuilder<R, T, U> withPushbackPolicy(PushbackPolicyOption pushbackPolicyOption, long time);
1: 
1: 	/**
1: 	 * Set the maximum permitted number of concurrent event deliveries allowed
1: 	 * from this buffer
1: 	 * 
1: 	 * @param parallelism
1: 	 * @return this builder
1: 	 */
1: 	BufferBuilder<R, T, U> withParallelism(int parallelism);
1: 
1: 	/**
1: 	 * Set the {@link Executor} that should be used to deliver events from this
1: 	 * buffer
1: 	 * 
1: 	 * @param executor
1: 	 * @return this builder
1: 	 */
1: 	BufferBuilder<R, T, U> withExecutor(Executor executor);
1: 	
1: 	/**
1: 	 * @return the object being built
1: 	 */
1: 	R create();
1: 
1: }
============================================================================