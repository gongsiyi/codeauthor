1:1c43780: /**
1:1c43780:  * Licensed to the Apache Software Foundation (ASF) under one
1:1c43780:  * or more contributor license agreements.  See the NOTICE file
1:1c43780:  * distributed with this work for additional information
1:1c43780:  * regarding copyright ownership.  The ASF licenses this file
1:1c43780:  * to you under the Apache License, Version 2.0 (the
1:1c43780:  * "License"); you may not use this file except in compliance
1:1c43780:  * with the License.  You may obtain a copy of the License at
1:1c43780:  *
1:1c43780:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1c43780:  *
1:1c43780:  * Unless required by applicable law or agreed to in writing,
1:1c43780:  * software distributed under the License is distributed on an
1:1c43780:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1c43780:  * KIND, either express or implied.  See the License for the
1:1c43780:  * specific language governing permissions and limitations
1:1c43780:  * under the License.
1:1c43780:  */
1:4b6c670: package org.apache.aries.spifly.weaver;
1:e4e3ae2: 
1:1c43780: import java.util.Arrays;
1:5023775: import java.util.HashSet;
1:1c43780: import java.util.ServiceLoader;
1:b1379cb: import java.util.Set;
1:e4e3ae2: 
1:4b6c670: import org.apache.aries.spifly.Util;
1:4b6c670: import org.apache.aries.spifly.WeavingData;
1:1c43780: import org.objectweb.asm.ClassVisitor;
1:64b99d8: import org.objectweb.asm.Label;
1:1c43780: import org.objectweb.asm.MethodVisitor;
1:1c43780: import org.objectweb.asm.Opcodes;
1:1c43780: import org.objectweb.asm.Type;
1:e4e3ae2: import org.objectweb.asm.commons.GeneratorAdapter;
1:e4e3ae2: import org.objectweb.asm.commons.Method;
1:e4e3ae2: 
1:1c43780: /**
1:1c43780:  * This class implements an ASM ClassVisitor which puts the appropriate ThreadContextClassloader
1:1c43780:  * calls around applicable method invocations. It does the actual bytecode weaving.
1:1c43780:  */
1:ef1ad16: public class TCCLSetterVisitor extends ClassVisitor implements Opcodes {
1:e4e3ae2:     private static final Type CLASSLOADER_TYPE = Type.getType(ClassLoader.class);
1:e4e3ae2: 
1:1c43780:     private static final String GENERATED_METHOD_NAME = "$$FCCL$$";
1:e4e3ae2: 
1:e4e3ae2:     private static final Type UTIL_CLASS = Type.getType(Util.class);
1:e4e3ae2: 
1:e4e3ae2:     private static final Type CLASS_TYPE = Type.getType(Class.class);
1:7b9a6eb: 
1:e4e3ae2:     private static final Type String_TYPE = Type.getType(String.class);
1:e4e3ae2: 
1:e4e3ae2:     private final Type targetClass;
1:b1379cb:     private final Set<WeavingData> weavingData;
1:5023775: 
1:5023775:     // Set to true when the weaving code has changed the client such that an additional import
1:1c43780:     // (to the Util.class.getPackage()) is needed.
1:1c43780:     private boolean additionalImportRequired = false;
1:5023775: 
1:7b9a6eb:     // This field is true when the class was woven
1:7b9a6eb:     private boolean woven = false;
1:7b9a6eb: 
1:b1379cb:     public TCCLSetterVisitor(ClassVisitor cv, String className, Set<WeavingData> weavingData) {
1:e43c574:         super(Opcodes.ASM5, cv);
1:e4e3ae2:         this.targetClass = Type.getType("L" + className.replace('.', '/') + ";");
1:1c43780:         this.weavingData = weavingData;
1:1c43780:     }
1:e4e3ae2: 
1:71814f4:     public boolean isWoven() {
1:71814f4:         return woven;
1:71814f4:     }
1:71814f4: 
1:1c43780:     @Override
1:1c43780:     public MethodVisitor visitMethod(int access, String name, String desc,
1:1c43780:             String signature, String[] exceptions) {
1:1c43780:         MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);
1:e4e3ae2:         return new TCCLSetterMethodVisitor(mv, access, name, desc);
1:1c43780:     }
1:e4e3ae2: 
1:1c43780:     @Override
1:1c43780:     public void visitEnd() {
1:7b9a6eb:         if (!woven) {
1:7b9a6eb:             // if this class wasn't woven, then don't add the synthesized method either.
1:7b9a6eb:             super.visitEnd();
1:7b9a6eb:             return;
1:7b9a6eb:         }
1:7b9a6eb: 
1:1c43780:         // Add generated static method
1:5023775:         Set<String> methodNames = new HashSet<String>();
1:5023775: 
1:1c43780:         for (WeavingData wd : weavingData) {
1:1c43780:             /* Equivalent to:
1:1c43780:              * private static void $$FCCL$$<className>$<methodName>(Class<?> cls) {
1:1c43780:              *   Util.fixContextClassLoader("java.util.ServiceLoader", "load", cls, WovenClass.class.getClassLoader());
1:1c43780:              * }
1:1c43780:              */
1:5023775:              String methodName = getGeneratedMethodName(wd);
1:5023775:              if (methodNames.contains(methodName))
1:5023775:                  continue;
1:e4e3ae2: 
1:5023775:              methodNames.add(methodName);
1:e4e3ae2:              Method method = new Method(methodName, Type.VOID_TYPE, new Type[] {CLASS_TYPE});
1:7b9a6eb: 
1:e4e3ae2:              GeneratorAdapter mv = new GeneratorAdapter(cv.visitMethod(ACC_PRIVATE + ACC_STATIC, methodName,
1:e4e3ae2:                      method.getDescriptor(), null, null), ACC_PRIVATE + ACC_STATIC, methodName,
1:e4e3ae2:                      method.getDescriptor());
1:7b9a6eb: 
1:e4e3ae2:              //Load the strings, method parameter and target
1:1c43780:              mv.visitLdcInsn(wd.getClassName());
1:1c43780:              mv.visitLdcInsn(wd.getMethodName());
1:e4e3ae2:              mv.loadArg(0);
1:e4e3ae2:              mv.visitLdcInsn(targetClass);
1:7b9a6eb: 
1:e4e3ae2:              //Change the class on the stack into a classloader
1:7b9a6eb:              mv.invokeVirtual(CLASS_TYPE, new Method("getClassLoader",
1:e4e3ae2:                  CLASSLOADER_TYPE, new Type[0]));
1:7b9a6eb: 
1:e4e3ae2:              //Call our util method
1:7b9a6eb:              mv.invokeStatic(UTIL_CLASS, new Method("fixContextClassloader", Type.VOID_TYPE,
1:e4e3ae2:                  new Type[] {String_TYPE, String_TYPE, CLASS_TYPE, CLASSLOADER_TYPE}));
1:7b9a6eb: 
1:e4e3ae2:              mv.returnValue();
1:e4e3ae2:              mv.endMethod();
1:1c43780:         }
1:e4e3ae2: 
1:1c43780:         super.visitEnd();
1:1c43780:     }
1:e4e3ae2: 
1:1c43780:     private String getGeneratedMethodName(WeavingData wd) {
1:1c43780:         StringBuilder name = new StringBuilder(GENERATED_METHOD_NAME);
1:1c43780:         name.append(wd.getClassName().replace('.', '#'));
1:1c43780:         name.append("$");
1:1c43780:         name.append(wd.getMethodName());
1:1c43780:         if (wd.getArgClasses() != null) {
1:1c43780:             for (String cls : wd.getArgClasses()) {
1:1c43780:                 name.append("$");
1:1c43780:                 name.append(cls.replace('.', '#'));
1:1c43780:             }
1:1c43780:         }
1:1c43780:         return name.toString();
1:1c43780:     }
1:e4e3ae2: 
1:ef1ad16:     private class TCCLSetterMethodVisitor extends GeneratorAdapter {
1:1c43780:         Type lastLDCType;
1:5023775: 
1:e4e3ae2:         public TCCLSetterMethodVisitor(MethodVisitor mv, int access, String name, String descriptor) {
1:e43c574:             super(Opcodes.ASM5, mv, access, name, descriptor);
1:1c43780:         }
1:5023775: 
1:1c43780:         /**
1:1c43780:          * Store the last LDC call. When ServiceLoader.load(Class cls) is called
1:1c43780:          * the last LDC call before the ServiceLoader.load() visitMethodInsn call
1:1c43780:          * contains the class being passed in. We need to pass this class to $$FCCL$$ as well
1:1c43780:          * so we can copy the value found in here.
1:1c43780:          */
1:1c43780:         @Override
1:1c43780:         public void visitLdcInsn(Object cst) {
1:1c43780:             if (cst instanceof Type) {
1:1c43780:                 lastLDCType = ((Type) cst);
1:1c43780:             }
1:1c43780:             super.visitLdcInsn(cst);
1:1c43780:         }
1:5023775: 
1:1c43780:         /**
1:1c43780:          * Wrap selected method calls with
1:1c43780:          *  Util.storeContextClassloader();
1:1c43780:          *  $$FCCL$$(<class>)
1:5023775:          *  Util.restoreContextClassloader();
1:1c43780:          */
1:1c43780:         @Override
1:e43c574:         public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {
1:5023775:             WeavingData wd = findWeavingData(owner, name, desc);
1:1c43780:             if (opcode == INVOKESTATIC && wd != null) {
1:1c43780:                 additionalImportRequired = true;
1:7b9a6eb:                 woven = true;
1:7b9a6eb: 
1:e4e3ae2:                 Label startTry = newLabel();
1:e4e3ae2:                 Label endTry = newLabel();
1:7b9a6eb: 
1:e4e3ae2:                 //start try block
1:e4e3ae2:                 visitTryCatchBlock(startTry, endTry, endTry, null);
1:e4e3ae2:                 mark(startTry);
1:7b9a6eb: 
1:5023775:                 // Add: Util.storeContextClassloader();
1:e4e3ae2:                 invokeStatic(UTIL_CLASS, new Method("storeContextClassloader", Type.VOID_TYPE, new Type[0]));
1:7b9a6eb: 
1:7b9a6eb: 
1:5023775:                 // Add: MyClass.$$FCCL$$<classname>$<methodname>(<class>);
1:1c43780:                 if (ServiceLoader.class.getName().equals(wd.getClassName()) &&
1:1c43780:                     "load".equals(wd.getMethodName()) &&
1:1c43780:                     (wd.getArgClasses() == null || Arrays.equals(new String [] {Class.class.getName()}, wd.getArgClasses()))) {
1:5023775:                     // ServiceLoader.load() is a special case because it's a general-purpose service loader,
1:5023775:                     // therefore, the target class it the class being passed in to the ServiceLoader.load()
1:1c43780:                     // call itself.
1:7b9a6eb: 
1:1c43780:                     mv.visitLdcInsn(lastLDCType);
1:7b9a6eb:                 } else {
1:1c43780:                     // In any other case, we're not dealing with a general-purpose service loader, but rather
1:5023775:                     // with a specific one, such as DocumentBuilderFactory.newInstance(). In that case the
1:1c43780:                     // target class is the class that is being invoked on (i.e. DocumentBuilderFactory).
1:1c43780:                     Type type = Type.getObjectType(owner);
1:1c43780:                     mv.visitLdcInsn(type);
1:1c43780:                 }
1:e4e3ae2:                 invokeStatic(targetClass, new Method(getGeneratedMethodName(wd),
1:e4e3ae2:                     Type.VOID_TYPE, new Type[] {CLASS_TYPE}));
1:e4e3ae2: 
1:e4e3ae2:                 //Call the original instruction
1:e43c574:                 super.visitMethodInsn(opcode, owner, name, desc, itf);
1:e4e3ae2: 
1:e4e3ae2:                 //If no exception then go to the finally (finally blocks are a catch block with a jump)
1:e4e3ae2:                 Label afterCatch = newLabel();
1:e4e3ae2:                 goTo(afterCatch);
1:7b9a6eb: 
1:7b9a6eb: 
1:7b9a6eb:                 //start the catch
1:e4e3ae2:                 mark(endTry);
1:e4e3ae2:                 //Run the restore method then throw on the exception
1:e4e3ae2:                 invokeStatic(UTIL_CLASS, new Method("restoreContextClassloader", Type.VOID_TYPE, new Type[0]));
1:e4e3ae2:                 throwException();
1:7b9a6eb: 
1:e4e3ae2:                 //start the finally
1:e4e3ae2:                 mark(afterCatch);
1:e4e3ae2:                 //Run the restore and continue
1:e4e3ae2:                 invokeStatic(UTIL_CLASS, new Method("restoreContextClassloader", Type.VOID_TYPE, new Type[0]));
1:5023775:             } else {
1:e43c574:                 super.visitMethodInsn(opcode, owner, name, desc, itf);
1:1c43780:             }
1:1c43780:         }
1:e4e3ae2: 
1:1c43780:         private WeavingData findWeavingData(String owner, String methodName, String methodDesc) {
1:1c43780:             owner = owner.replace('/', '.');
1:e4e3ae2: 
1:1c43780:             Type[] argTypes = Type.getArgumentTypes(methodDesc);
1:1c43780:             String [] argClassNames = new String[argTypes.length];
1:1c43780:             for (int i = 0; i < argTypes.length; i++) {
1:1c43780:                 argClassNames[i] = argTypes[i].getClassName();
1:1c43780:             }
1:5023775: 
1:1c43780:             for (WeavingData wd : weavingData) {
1:1c43780:                 if (wd.getClassName().equals(owner) &&
1:1c43780:                     wd.getMethodName().equals(methodName) &&
1:1c43780:                     (wd.getArgClasses() != null ? Arrays.equals(argClassNames, wd.getArgClasses()) : true)) {
1:1c43780:                     return wd;
1:1c43780:                 }
1:1c43780:             }
1:1c43780:             return null;
1:1c43780:         }
1:1c43780:     }
27:1c43780: 
1:1c43780:     public boolean additionalImportRequired() {
1:1c43780:         return additionalImportRequired ;
1:1c43780:     }
1:1c43780: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:e43c574
/////////////////////////////////////////////////////////////////////////
1:         super(Opcodes.ASM5, cv);
/////////////////////////////////////////////////////////////////////////
1:             super(Opcodes.ASM5, mv, access, name, descriptor);
/////////////////////////////////////////////////////////////////////////
1:         public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {
/////////////////////////////////////////////////////////////////////////
1:                 super.visitMethodInsn(opcode, owner, name, desc, itf);
/////////////////////////////////////////////////////////////////////////
1:                 super.visitMethodInsn(opcode, owner, name, desc, itf);
commit:71814f4
/////////////////////////////////////////////////////////////////////////
1:     public boolean isWoven() {
1:         return woven;
1:     }
1: 
commit:ef1ad16
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class TCCLSetterVisitor extends ClassVisitor implements Opcodes {
/////////////////////////////////////////////////////////////////////////
0:         super(Opcodes.ASM4, cv);
/////////////////////////////////////////////////////////////////////////
1:     private class TCCLSetterMethodVisitor extends GeneratorAdapter {
0:             super(Opcodes.ASM4, mv, access, name, descriptor);
commit:08db0fe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7b9a6eb
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     // This field is true when the class was woven
1:     private boolean woven = false;
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (!woven) {
0:             System.out.println("+++ not woven: " + targetClass);
1:             // if this class wasn't woven, then don't add the synthesized method either.
1:             super.visitEnd();
1:             return;
1:         } else {
0:             System.out.println("+++ woven: " + targetClass);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:              mv.invokeVirtual(CLASS_TYPE, new Method("getClassLoader",
1: 
1:              mv.invokeStatic(UTIL_CLASS, new Method("fixContextClassloader", Type.VOID_TYPE,
1: 
/////////////////////////////////////////////////////////////////////////
1:                 woven = true;
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:                 //start the catch
1: 
commit:e4e3ae2
/////////////////////////////////////////////////////////////////////////
1: import org.objectweb.asm.commons.GeneratorAdapter;
1: import org.objectweb.asm.commons.Method;
1:     private static final Type CLASSLOADER_TYPE = Type.getType(ClassLoader.class);
1: 
1:     private static final Type UTIL_CLASS = Type.getType(Util.class);
1:     private static final Type CLASS_TYPE = Type.getType(Class.class);
1:     
1:     private static final Type String_TYPE = Type.getType(String.class);
1: 
1:     private final Type targetClass;
/////////////////////////////////////////////////////////////////////////
1:         this.targetClass = Type.getType("L" + className.replace('.', '/') + ";");
/////////////////////////////////////////////////////////////////////////
1:         return new TCCLSetterMethodVisitor(mv, access, name, desc);
/////////////////////////////////////////////////////////////////////////
1:              Method method = new Method(methodName, Type.VOID_TYPE, new Type[] {CLASS_TYPE});
1:              
1:              GeneratorAdapter mv = new GeneratorAdapter(cv.visitMethod(ACC_PRIVATE + ACC_STATIC, methodName,
1:                      method.getDescriptor(), null, null), ACC_PRIVATE + ACC_STATIC, methodName,
1:                      method.getDescriptor());
1:              
1:              //Load the strings, method parameter and target
1:              mv.loadArg(0);
1:              mv.visitLdcInsn(targetClass);
1:              
1:              //Change the class on the stack into a classloader
0:              mv.invokeVirtual(CLASS_TYPE, new Method("getClassLoader", 
1:                  CLASSLOADER_TYPE, new Type[0]));
1:              
1:              //Call our util method
0:              mv.invokeStatic(UTIL_CLASS, new Method("fixContextClassloader", Type.VOID_TYPE, 
1:                  new Type[] {String_TYPE, String_TYPE, CLASS_TYPE, CLASSLOADER_TYPE}));
1:              
1:              mv.returnValue();
1:              mv.endMethod();
/////////////////////////////////////////////////////////////////////////
0:     private class TCCLSetterMethodVisitor extends GeneratorAdapter implements MethodVisitor
1:         public TCCLSetterMethodVisitor(MethodVisitor mv, int access, String name, String descriptor) {
0:             super(mv, access, name, descriptor);
/////////////////////////////////////////////////////////////////////////
1:                 
1:                 Label startTry = newLabel();
1:                 Label endTry = newLabel();
1:                 
1:                 //start try block
1:                 visitTryCatchBlock(startTry, endTry, endTry, null);
1:                 mark(startTry);
1:                 
1:                 invokeStatic(UTIL_CLASS, new Method("storeContextClassloader", Type.VOID_TYPE, new Type[0]));
1:                 
1:                 
/////////////////////////////////////////////////////////////////////////
1:                     
/////////////////////////////////////////////////////////////////////////
1:                 invokeStatic(targetClass, new Method(getGeneratedMethodName(wd),
1:                     Type.VOID_TYPE, new Type[] {CLASS_TYPE}));
1:                 //Call the original instruction
1:                 //If no exception then go to the finally (finally blocks are a catch block with a jump)
1:                 Label afterCatch = newLabel();
1:                 goTo(afterCatch);
1:                 
1:                 
0:                 //start the catch 
1:                 mark(endTry);
1:                 //Run the restore method then throw on the exception
1:                 invokeStatic(UTIL_CLASS, new Method("restoreContextClassloader", Type.VOID_TYPE, new Type[0]));
1:                 throwException();
1:                 
1:                 //start the finally
1:                 mark(afterCatch);
1:                 //Run the restore and continue
1:                 invokeStatic(UTIL_CLASS, new Method("restoreContextClassloader", Type.VOID_TYPE, new Type[0]));
commit:64b99d8
/////////////////////////////////////////////////////////////////////////
1: import org.objectweb.asm.Label;
/////////////////////////////////////////////////////////////////////////
0:                 // try/finally setup
0:                 // Add: try {
0:                 Label l0 = new Label();
0:                 Label l1 = new Label();
0:                 mv.visitTryCatchBlock(l0, l1, l1, null);
0:                 mv.visitLabel(l0);
/////////////////////////////////////////////////////////////////////////
0:                 // end the try part and do the finally part
0:                 // Add: } finally { Util.restoreContextClassLoader(); }
0:                 Label l2 = new Label();
0:                 mv.visitJumpInsn(GOTO, l2);
0:                 mv.visitLabel(l1);
0:                 mv.visitFrame(F_FULL, 2, new Object[] {"[Ljava/lang/String;", "java/lang/ClassLoader"}, 1, new Object[] {"java/lang/Throwable"});
0:                 mv.visitVarInsn(ASTORE, 2);
0: //                mv.visitMethodInsn(INVOKESTATIC, UTIL_CLASS,
0: //                        "storeContextClassloader", VOID_RETURN_TYPE);
0:                 mv.visitVarInsn(ALOAD, 2);
0:                 mv.visitInsn(ATHROW);
0:                 mv.visitLabel(l2);
0:                 mv.visitFrame(F_SAME, 0, null, 0, null);
0:                 mv.visitMethodInsn(INVOKESTATIC, UTIL_CLASS,
0:                         "restoreContextClassloader", VOID_RETURN_TYPE);
0: //                mv.visitMethodInsn(INVOKESTATIC, UTIL_CLASS,
0: //                        "storeContextClassloader", VOID_RETURN_TYPE);
commit:5023775
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
0:     private static final String UTIL_CLASS = Util.class.getName().replace('.', '/');
1: 
1:     // Set to true when the weaving code has changed the client such that an additional import
/////////////////////////////////////////////////////////////////////////
1:         Set<String> methodNames = new HashSet<String>();
/////////////////////////////////////////////////////////////////////////
1:              String methodName = getGeneratedMethodName(wd);
1:              if (methodNames.contains(methodName))
1:                  continue;
1: 
1:              methodNames.add(methodName);
0:              MethodVisitor mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, methodName,
/////////////////////////////////////////////////////////////////////////
0:              mv.visitEnd();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:          *  Util.restoreContextClassloader();
1: 
1:             WeavingData wd = findWeavingData(owner, name, desc);
1: 
1:                 // Add: Util.storeContextClassloader();
1:                 // Add: MyClass.$$FCCL$$<classname>$<methodname>(<class>);
1:                     // ServiceLoader.load() is a special case because it's a general-purpose service loader,
1:                     // therefore, the target class it the class being passed in to the ServiceLoader.load()
1:                     // with a specific one, such as DocumentBuilderFactory.newInstance(). In that case the
/////////////////////////////////////////////////////////////////////////
1:             } else {
commit:4b6c670
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.spifly.weaver;
1: import org.apache.aries.spifly.Util;
1: import org.apache.aries.spifly.WeavingData;
commit:b1379cb
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:     private final Set<WeavingData> weavingData;
1:     public TCCLSetterVisitor(ClassVisitor cv, String className, Set<WeavingData> weavingData) {
commit:1c43780
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.spifly;
1: 
1: import java.util.Arrays;
1: import java.util.ServiceLoader;
1: 
0: import org.objectweb.asm.ClassAdapter;
1: import org.objectweb.asm.ClassVisitor;
0: import org.objectweb.asm.MethodAdapter;
1: import org.objectweb.asm.MethodVisitor;
1: import org.objectweb.asm.Opcodes;
1: import org.objectweb.asm.Type;
1: 
1: /**
1:  * This class implements an ASM ClassVisitor which puts the appropriate ThreadContextClassloader
1:  * calls around applicable method invocations. It does the actual bytecode weaving.
1:  */
0: public class TCCLSetterVisitor extends ClassAdapter implements ClassVisitor, Opcodes {
1:     private static final String GENERATED_METHOD_NAME = "$$FCCL$$";
1: 
0:     private static final String UTIL_CLASS = Util.class.getName().replace('.', '/'); 
0:     private static final String VOID_RETURN_TYPE = "()V";
1:     
0:     private final String targetClass;
0:     private final WeavingData [] weavingData;
1: 
0:     // Set to true when the weaving code has changed the client such that an additional import 
1:     // (to the Util.class.getPackage()) is needed.
1:     private boolean additionalImportRequired = false;
1: 
0:     public TCCLSetterVisitor(ClassVisitor cv, String className, WeavingData [] weavingData) {
0:         super(cv);
0:         this.targetClass = className.replace('.', '/');
1:         this.weavingData = weavingData;
1:     }
1: 
1:     @Override
1:     public MethodVisitor visitMethod(int access, String name, String desc,
1:             String signature, String[] exceptions) {
0:         System.out.println("@@@ " + access + ": " + name + "#" + desc + "#" + signature + "~" + Arrays.toString(exceptions));
1: 
1:         MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);
0:         return new TCCLSetterMethodVisitor(mv);
1:     }
1: 
1:     @Override
1:     public void visitEnd() {
1:         // Add generated static method
1: 
1:         for (WeavingData wd : weavingData) {
1:             /* Equivalent to:
1:              * private static void $$FCCL$$<className>$<methodName>(Class<?> cls) {
1:              *   Util.fixContextClassLoader("java.util.ServiceLoader", "load", cls, WovenClass.class.getClassLoader());
1:              * }
1:              */
0:              MethodVisitor mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, getGeneratedMethodName(wd), 
0:                      "(Ljava/lang/Class;)V", "(Ljava/lang/Class<*>;)V", null);
0:              mv.visitCode();
1:              mv.visitLdcInsn(wd.getClassName());
1:              mv.visitLdcInsn(wd.getMethodName());
0:              mv.visitVarInsn(ALOAD, 0);
0:              String typeIdentifier = "L" + targetClass + ";";
0:              mv.visitLdcInsn(Type.getType(typeIdentifier));
0:              mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class",
0:                      "getClassLoader", "()Ljava/lang/ClassLoader;");
0:              mv.visitMethodInsn(
0:                      INVOKESTATIC,
0:                      "org/apache/aries/spifly/Util",
0:                      "fixContextClassloader",
0:                      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/ClassLoader;)V");
0:              mv.visitInsn(RETURN);
0:              mv.visitMaxs(4, 1);
0:              mv.visitEnd();            
1:         }
1: 
1:         super.visitEnd();
1:     }
1: 
1:     private String getGeneratedMethodName(WeavingData wd) {
1:         StringBuilder name = new StringBuilder(GENERATED_METHOD_NAME);
1:         name.append(wd.getClassName().replace('.', '#'));
1:         name.append("$");
1:         name.append(wd.getMethodName());
1:         if (wd.getArgClasses() != null) {
1:             for (String cls : wd.getArgClasses()) {
1:                 name.append("$");
1:                 name.append(cls.replace('.', '#'));
1:             }
1:         }
1:         return name.toString();
1:     }
1:     
0:     private class TCCLSetterMethodVisitor extends MethodAdapter implements MethodVisitor
0:     {
1:         Type lastLDCType;
1:         
0:         public TCCLSetterMethodVisitor(MethodVisitor mv) {
0:             super(mv);
1:         }
1:         
1:         /**
1:          * Store the last LDC call. When ServiceLoader.load(Class cls) is called
1:          * the last LDC call before the ServiceLoader.load() visitMethodInsn call
1:          * contains the class being passed in. We need to pass this class to $$FCCL$$ as well
1:          * so we can copy the value found in here.
1:          */
1:         @Override
1:         public void visitLdcInsn(Object cst) {
1:             if (cst instanceof Type) {
1:                 lastLDCType = ((Type) cst);
1:             }
1:             super.visitLdcInsn(cst);
1:         }
1: 
1:         /**
1:          * Wrap selected method calls with
1:          *  Util.storeContextClassloader();
1:          *  $$FCCL$$(<class>)
0:          *  Util.restoreContextClassloader(); 
1:          */
1:         @Override
0:         public void visitMethodInsn(int opcode, String owner, String name, String desc) {
0:             System.out.println("### " + opcode + ": " + owner + "#" + name + "#" + desc);
1:                         
0:             WeavingData wd = findWeavingData(owner, name, desc);            
1:             if (opcode == INVOKESTATIC && wd != null) {
0:                 System.out.println("+++ Gotcha!");
1:           
1:                 additionalImportRequired = true;
1: 
0:                 // Add: Util.storeContextClassloader();                
0:                 mv.visitMethodInsn(INVOKESTATIC, UTIL_CLASS,
0:                         "storeContextClassloader", VOID_RETURN_TYPE);
1: 
0:                 // Add: MyClass.$$FCCL$$<classname>$<methodname>(<class>);                
1:                 if (ServiceLoader.class.getName().equals(wd.getClassName()) &&
1:                     "load".equals(wd.getMethodName()) &&
1:                     (wd.getArgClasses() == null || Arrays.equals(new String [] {Class.class.getName()}, wd.getArgClasses()))) {
0:                     // ServiceLoader.load() is a special case because it's a general-purpose service loader, 
0:                     // therefore, the target class it the class being passed in to the ServiceLoader.load() 
1:                     // call itself.
1:                     mv.visitLdcInsn(lastLDCType);
0:                 } else {
1:                     // In any other case, we're not dealing with a general-purpose service loader, but rather
0:                     // with a specific one, such as DocumentBuilderFactory.newInstance(). In that case the 
1:                     // target class is the class that is being invoked on (i.e. DocumentBuilderFactory).
1:                     Type type = Type.getObjectType(owner);
1:                     mv.visitLdcInsn(type);
1:                 }
0:                 mv.visitMethodInsn(INVOKESTATIC, targetClass,
0:                         getGeneratedMethodName(wd), "(Ljava/lang/Class;)V");
1: 
0:                 super.visitMethodInsn(opcode, owner, name, desc);
1: 
0:                 // Add: Util.restoreContextClassloader();
0:                 mv.visitMethodInsn(INVOKESTATIC, UTIL_CLASS,
0:                         "restoreContextClassloader", VOID_RETURN_TYPE);
0:             } else {                
0:                 super.visitMethodInsn(opcode, owner, name, desc);
1:             }
1:         }
1: 
1:         private WeavingData findWeavingData(String owner, String methodName, String methodDesc) {
1:             owner = owner.replace('/', '.');
1: 
1:             Type[] argTypes = Type.getArgumentTypes(methodDesc);
1:             String [] argClassNames = new String[argTypes.length];
1:             for (int i = 0; i < argTypes.length; i++) {
1:                 argClassNames[i] = argTypes[i].getClassName();
1:             }
1: 
1:             for (WeavingData wd : weavingData) {
1:                 if (wd.getClassName().equals(owner) &&
1:                     wd.getMethodName().equals(methodName) &&
1:                     (wd.getArgClasses() != null ? Arrays.equals(argClassNames, wd.getArgClasses()) : true)) {
1:                     return wd;
1:                 }
1:             }
1:             return null;
1:         }
1:     }
1: 
1:     public boolean additionalImportRequired() {
1:         return additionalImportRequired ;
1:     }
1: }
============================================================================