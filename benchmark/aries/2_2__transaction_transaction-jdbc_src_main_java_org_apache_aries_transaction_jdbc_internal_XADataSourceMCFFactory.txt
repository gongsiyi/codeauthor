1:db3b209: /*
1:db3b209:  * Licensed to the Apache Software Foundation (ASF) under one
1:db3b209:  * or more contributor license agreements.  See the NOTICE file
1:db3b209:  * distributed with this work for additional information
1:db3b209:  * regarding copyright ownership.  The ASF licenses this file
1:db3b209:  * to you under the Apache License, Version 2.0 (the
1:db3b209:  * "License"); you may not use this file except in compliance
1:db3b209:  * with the License.  You may obtain a copy of the License at
1:db3b209:  *
1:db3b209:  *   http://www.apache.org/licenses/LICENSE-2.0
1:db3b209:  *
1:db3b209:  * Unless required by applicable law or agreed to in writing,
1:db3b209:  * software distributed under the License is distributed on an
1:db3b209:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:db3b209:  * KIND, either express or implied.  See the License for the
1:db3b209:  * specific language governing permissions and limitations
1:db3b209:  * under the License.
1:db3b209:  */
1:db3b209: package org.apache.aries.transaction.jdbc.internal;
13:db3b209: 
1:8047ebe: import java.sql.SQLException;
1:db3b209: 
1:750c0e7: import javax.resource.ResourceException;
1:461d743: import javax.resource.spi.ConnectionRequestInfo;
1:461d743: import javax.resource.spi.ManagedConnection;
1:750c0e7: import javax.resource.spi.ResourceAdapterInternalException;
1:b31f5f9: import javax.resource.spi.TransactionSupport;
1:461d743: import javax.security.auth.Subject;
1:750c0e7: import javax.sql.XAConnection;
1:db3b209: import javax.sql.XADataSource;
1:db3b209: 
1:8047ebe: import org.tranql.connector.CredentialExtractor;
1:8047ebe: import org.tranql.connector.jdbc.AbstractXADataSourceMCF;
1:8047ebe: import org.tranql.connector.jdbc.ManagedXAConnection;
1:750c0e7: 
1:ca23c31: public class XADataSourceMCFFactory extends AbstractMCFFactory {
1:db3b209: 
1:db3b209:     public void init() throws Exception {
1:ca23c31:         if (getDataSource() == null) {
1:db3b209:             throw new IllegalArgumentException("dataSource must be set");
14:db3b209:         }
1:db3b209:         if (connectionFactory == null) {
1:db3b209:             connectionFactory = new XADataSourceMCF();
1:db3b209:         }
1:db3b209:     }
1:db3b209: 
1:8047ebe:     @SuppressWarnings("serial")
1:b31f5f9:     public class XADataSourceMCF extends AbstractXADataSourceMCF<XADataSource> implements TransactionSupport {
1:db3b209: 
1:db3b209:         public XADataSourceMCF() {
1:ca23c31:             super((XADataSource) XADataSourceMCFFactory.this.getDataSource(), XADataSourceMCFFactory.this.getExceptionSorter());
1:db3b209:         }
1:db3b209: 
2:db3b209:         public String getUserName() {
1:ca23c31:             return XADataSourceMCFFactory.this.getUserName();
1:db3b209:         }
1:db3b209: 
1:b31f5f9:         @Override
2:db3b209:         public String getPassword() {
1:ca23c31:             return XADataSourceMCFFactory.this.getPassword();
1:db3b209:         }
1:750c0e7: 
1:ca23c31:         @Override
1:461d743:         public ManagedConnection createManagedConnection(Subject subject, ConnectionRequestInfo connectionRequestInfo) throws ResourceException {
1:461d743:             CredentialExtractor credentialExtractor = new CredentialExtractor(subject, connectionRequestInfo, this);
1:461d743: 
1:461d743:             XAConnection sqlConnection = getPhysicalConnection(credentialExtractor);
1:461d743:             try {
1:461d743:                 return new ManagedXAConnection(this, sqlConnection, credentialExtractor, exceptionSorter) {
1:461d743:                     @Override
1:461d743:                     public void cleanup() throws ResourceException {
1:461d743:                         // ARIES-1279 - Transaction does not work on error SQLException
1:461d743:                         // that's why we don't call super.cleanup() which calls con.setAutocommit(true)
1:461d743:                         // super.cleanup();
1:461d743:                         dissociateConnections();
1:461d743:                     }
1:461d743:                 };
1:461d743:             } catch (SQLException e) {
1:461d743:                 throw new ResourceAdapterInternalException("Could not set up ManagedXAConnection", e);
1:461d743:             }
1:461d743:         }
1:461d743: 
1:461d743:         @Override
1:750c0e7:         protected XAConnection getPhysicalConnection(CredentialExtractor credentialExtractor) throws ResourceException {
1:750c0e7:             try {
1:750c0e7:                 String userName = credentialExtractor.getUserName();
1:750c0e7:                 String password = credentialExtractor.getPassword();
1:750c0e7:                 if (userName != null) {
1:750c0e7:                     return xaDataSource.getXAConnection(userName, password);
1:750c0e7:                 } else {
1:750c0e7:                     return xaDataSource.getXAConnection();
1:750c0e7:                 }
1:750c0e7:             } catch (SQLException e) {
1:750c0e7:                 throw new ResourceAdapterInternalException("Unable to obtain physical connection to " + xaDataSource, e);
1:750c0e7:             }
1:750c0e7:         }
1:750c0e7: 
1:ca23c31:         @Override
1:b31f5f9:         public TransactionSupportLevel getTransactionSupport() {
1:b31f5f9:             return TransactionSupportLevel.XATransaction;
1:b31f5f9:         }
1:db3b209:     }
1:db3b209: 
1:db3b209: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:8047ebe
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: import org.tranql.connector.CredentialExtractor;
1: import org.tranql.connector.jdbc.AbstractXADataSourceMCF;
1: import org.tranql.connector.jdbc.ManagedXAConnection;
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("serial")
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:461d743
/////////////////////////////////////////////////////////////////////////
0: import org.tranql.connector.jdbc.ManagedXAConnection;
1: import javax.resource.spi.ConnectionRequestInfo;
1: import javax.resource.spi.ManagedConnection;
1: import javax.security.auth.Subject;
/////////////////////////////////////////////////////////////////////////
1:         public ManagedConnection createManagedConnection(Subject subject, ConnectionRequestInfo connectionRequestInfo) throws ResourceException {
1:             CredentialExtractor credentialExtractor = new CredentialExtractor(subject, connectionRequestInfo, this);
1: 
1:             XAConnection sqlConnection = getPhysicalConnection(credentialExtractor);
1:             try {
1:                 return new ManagedXAConnection(this, sqlConnection, credentialExtractor, exceptionSorter) {
1:                     @Override
1:                     public void cleanup() throws ResourceException {
1:                         // ARIES-1279 - Transaction does not work on error SQLException
1:                         // that's why we don't call super.cleanup() which calls con.setAutocommit(true)
1:                         // super.cleanup();
1:                         dissociateConnections();
1:                     }
1:                 };
1:             } catch (SQLException e) {
1:                 throw new ResourceAdapterInternalException("Could not set up ManagedXAConnection", e);
1:             }
1:         }
1: 
1:         @Override
commit:b31f5f9
/////////////////////////////////////////////////////////////////////////
1: import javax.resource.spi.TransactionSupport;
/////////////////////////////////////////////////////////////////////////
1:     public class XADataSourceMCF extends AbstractXADataSourceMCF<XADataSource> implements TransactionSupport {
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         public TransactionSupportLevel getTransactionSupport() {
1:             return TransactionSupportLevel.XATransaction;
1:         }
commit:ca23c31
/////////////////////////////////////////////////////////////////////////
1: public class XADataSourceMCFFactory extends AbstractMCFFactory {
1:         if (getDataSource() == null) {
/////////////////////////////////////////////////////////////////////////
1:             super((XADataSource) XADataSourceMCFFactory.this.getDataSource(), XADataSourceMCFFactory.this.getExceptionSorter());
1:             return XADataSourceMCFFactory.this.getUserName();
1:         @Override
1:             return XADataSourceMCFFactory.this.getPassword();
1:         @Override
commit:750c0e7
/////////////////////////////////////////////////////////////////////////
0: import org.tranql.connector.CredentialExtractor;
1: import javax.resource.ResourceException;
1: import javax.resource.spi.ResourceAdapterInternalException;
1: import javax.sql.XAConnection;
1: 
0: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
1: 
1:         protected XAConnection getPhysicalConnection(CredentialExtractor credentialExtractor) throws ResourceException {
1:             try {
1:                 String userName = credentialExtractor.getUserName();
1:                 String password = credentialExtractor.getPassword();
1:                 if (userName != null) {
1:                     return xaDataSource.getXAConnection(userName, password);
1:                 } else {
1:                     return xaDataSource.getXAConnection();
1:                 }
1:             } catch (SQLException e) {
1:                 throw new ResourceAdapterInternalException("Unable to obtain physical connection to " + xaDataSource, e);
1:             }
1:         }
1: 
commit:db3b209
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.jdbc.internal;
1: 
0: import org.tranql.connector.AllExceptionsAreFatalSorter;
0: import org.tranql.connector.ExceptionSorter;
0: import org.tranql.connector.NoExceptionsAreFatalSorter;
0: import org.tranql.connector.jdbc.AbstractXADataSourceMCF;
0: import org.tranql.connector.jdbc.ConfigurableSQLStateExceptionSorter;
0: import org.tranql.connector.jdbc.KnownSQLStateExceptionSorter;
1: 
0: import javax.resource.spi.ManagedConnectionFactory;
1: import javax.sql.XADataSource;
0: import java.util.ArrayList;
0: import java.util.List;
1: 
0: public class XADataSourceMCFFactory {
1: 
0:     private XADataSource dataSource;
0:     private ExceptionSorter exceptionSorter = new AllExceptionsAreFatalSorter();
0:     private String userName;
0:     private String password;
1: 
0:     private ManagedConnectionFactory connectionFactory;
1: 
0:     public ManagedConnectionFactory getConnectionFactory() {
0:         return connectionFactory;
1:     }
1: 
1:     public void init() throws Exception {
0:         if (dataSource == null) {
1:             throw new IllegalArgumentException("dataSource must be set");
1:         }
1:         if (connectionFactory == null) {
1:             connectionFactory = new XADataSourceMCF();
1:         }
1:     }
1: 
0:     public void setExceptionSorterAsString(String sorter) {
0:         if ("all".equalsIgnoreCase(sorter)) {
0:             this.exceptionSorter = new AllExceptionsAreFatalSorter();
0:         } else if ("none".equalsIgnoreCase(sorter)) {
0:             this.exceptionSorter = new NoExceptionsAreFatalSorter();
0:         } else if ("known".equalsIgnoreCase(sorter)) {
0:             this.exceptionSorter = new KnownSQLStateExceptionSorter();
0:         } else if (sorter.toLowerCase().startsWith("custom(") && sorter.endsWith(")")) {
0:             List<String> states = new ArrayList<String>();
0:             for (String s : sorter.substring(7, sorter.length() - 2).split(",")) {
0:                 if (s != null && s.length() > 0) {
0:                     states.add(s);
1:                 }
1:             }
0:             this.exceptionSorter = new ConfigurableSQLStateExceptionSorter(states);
0:         } else {
0:             throw new IllegalArgumentException("Unknown exceptionSorter " + sorter);
1:         }
1:     }
1: 
0:     public XADataSource getDataSource() {
0:         return dataSource;
1:     }
1: 
0:     public void setDataSource(XADataSource dataSource) {
0:         this.dataSource = dataSource;
1:     }
1: 
0:     public ExceptionSorter getExceptionSorter() {
0:         return exceptionSorter;
1:     }
1: 
0:     public void setExceptionSorter(ExceptionSorter exceptionSorter) {
0:         this.exceptionSorter = exceptionSorter;
1:     }
1: 
1:     public String getUserName() {
0:         return userName;
1:     }
1: 
0:     public void setUserName(String userName) {
0:         this.userName = userName;
1:     }
1: 
1:     public String getPassword() {
0:         return password;
1:     }
1: 
0:     public void setPassword(String password) {
0:         this.password = password;
1:     }
1: 
0:     public class XADataSourceMCF extends AbstractXADataSourceMCF<XADataSource> {
1: 
1:         public XADataSourceMCF() {
0:             super(XADataSourceMCFFactory.this.dataSource, XADataSourceMCFFactory.this.exceptionSorter);
1:         }
1: 
1:         public String getUserName() {
0:             return userName;
1:         }
1: 
1:         public String getPassword() {
0:             return password;
1:         }
1:     }
1: 
1: }
============================================================================