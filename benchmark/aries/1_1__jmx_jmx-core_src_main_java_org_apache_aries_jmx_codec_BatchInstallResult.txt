1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
1:fdf3952: 
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.framework.FrameworkMBean;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>BatchInstallResult</tt> represents codec for resulting CompositeData of
1:fdf3952:  * FrameworkMBean installBundles methods.
1:fdf3952:  * It converting batch install results to CompositeData {@link #toCompositeData()}
1:fdf3952:  * and from CompositeData to this BatchInstallResult {@link #from(CompositeData)}.
1:fdf3952:  * It provides also constructors to build BatchInstallResult.  
1:fdf3952:  * Structure of compositeData as defined in compositeType @see {@link FrameworkMBean#BATCH_INSTALL_RESULT_TYPE}.
1:fdf3952:  * </p>
1:fdf3952:  * @see BatchResult
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class BatchInstallResult extends BatchResult {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see FrameworkMBean#REMAINING_LOCATION_ITEM
1:fdf3952:      * @see FrameworkMBean#REMAINING
1:fdf3952:      */
1:fdf3952:     private String[] remainingLocationItems;
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * @see FrameworkMBean#BUNDLE_IN_ERROR_LOCATION_ITEM
1:fdf3952:      * @see FrameworkMBean#BUNDLE_IN_ERROR
1:fdf3952:      */
1:fdf3952:     private String bundleInError;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new BatchInstallResult with completedItems array.
1:fdf3952:      * Newly created object represents successful batch result.
1:fdf3952:      * @param completedItems containing the list of bundles completing the batch operation.
1:fdf3952:      */
1:fdf3952:     public BatchInstallResult(long[] completedItems) {
1:fdf3952:         this.completed = completedItems;
1:fdf3952:         success = true;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new BatchInstallResult with error message.
1:fdf3952:      * Newly created object represents failed batch result.
1:fdf3952:      * @param error containing the error message of the batch operation.
1:fdf3952:      */
1:fdf3952:     public BatchInstallResult(String error){
1:fdf3952:         this.error = error;
1:fdf3952:         success = false;
1:fdf3952:     }
1:fdf3952:     /**
1:fdf3952:      * Constructs new BatchInstallResult.
1:fdf3952:      * Newly created object represents failed batch result.
1:fdf3952:      * 
1:fdf3952:      * @param completedItems containing the list of bundles completing the batch operation.
1:fdf3952:      * @param error containing the error message of the batch operation.
1:fdf3952:      * @param remainingLocationItems remaining bundles unprocessed by the
1:fdf3952:      * failing batch operation.
1:fdf3952:      * @param bundleInError containing the bundle which caused the error during the batch
1:fdf3952:      * operation.
1:fdf3952:      */
1:fdf3952:     public BatchInstallResult(long[] completedItems, String error, String[] remainingLocationItems, String bundleInError) {
1:fdf3952:         this(completedItems, error, remainingLocationItems, false, bundleInError);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new BatchInstallResult.
1:fdf3952:      * 
1:fdf3952:      * @param completedItems containing the list of bundles completing the batch operation.
1:fdf3952:      * @param error containing the error message of the batch operation.
1:fdf3952:      * @param remainingLocationItems remaining bundles unprocessed by the
1:fdf3952:      * failing batch operation.
1:fdf3952:      * @param success indicates if this operation was successful.
1:fdf3952:      * @param bundleInError containing the bundle which caused the error during the batch
1:fdf3952:      * operation.
1:fdf3952:      */
1:fdf3952:     public BatchInstallResult(long[] completedItems, String error, String[] remainingLocationItems, boolean success,
1:fdf3952:             String bundleInError) {
1:fdf3952:         this.bundleInError = bundleInError;
1:fdf3952:         this.completed = completedItems;
1:fdf3952:         this.error = error;
1:fdf3952:         this.remainingLocationItems = remainingLocationItems;
1:fdf3952:         this.success = success;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Translates BatchInstallResult to CompositeData represented by
1:fdf3952:      * compositeType {@link FrameworkMBean#BATCH_INSTALL_RESULT_TYPE}.
1:fdf3952:      * 
1:fdf3952:      * @return translated BatchInstallResult to compositeData.
1:fdf3952:      */
1:fdf3952:     public CompositeData toCompositeData() {
1:fdf3952:         try {
1:fdf3952:             Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:             items.put(FrameworkMBean.BUNDLE_IN_ERROR, bundleInError);
1:fdf3952:             items.put(FrameworkMBean.COMPLETED, toLongArray(completed));
1:fdf3952:             items.put(FrameworkMBean.ERROR, error);
1:fdf3952:             items.put(FrameworkMBean.REMAINING, remainingLocationItems);
1:fdf3952:             items.put(FrameworkMBean.SUCCESS, success);
1:fdf3952:             return new CompositeDataSupport(FrameworkMBean.BATCH_INSTALL_RESULT_TYPE, items);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new IllegalStateException("Can't create CompositeData" + e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method to create BatchInstallResult from CompositeData object.
1:fdf3952:      * 
1:fdf3952:      * @param data {@link CompositeData} instance.
1:fdf3952:      * @return BatchInstallResult instance.
1:fdf3952:      */
1:fdf3952:     public static BatchInstallResult from(CompositeData data) {
1:fdf3952:         if(data == null){
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         String bundleInError = (String) data.get(FrameworkMBean.BUNDLE_IN_ERROR);
1:fdf3952:         long[] completedItems = toLongPrimitiveArray((Long[]) data.get(FrameworkMBean.COMPLETED));
1:fdf3952:         String[] remainingLocationItems = (String[]) data.get(FrameworkMBean.REMAINING);
1:fdf3952:         String error = (String) data.get(FrameworkMBean.ERROR);
1:fdf3952:         boolean success = (Boolean) data.get(FrameworkMBean.SUCCESS);
1:fdf3952:         return new BatchInstallResult(completedItems, error, remainingLocationItems, success, bundleInError);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Gets remaining location items.
1:fdf3952:      * @return array of String with locations.
1:fdf3952:      */
1:fdf3952:     public String[] getRemainingLocationItems() {
1:fdf3952:         return remainingLocationItems;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Gets bundle in error location.
1:fdf3952:      * @return the bundleInError.
1:fdf3952:      */
1:fdf3952:     public String getBundleInError() {
1:fdf3952:         return bundleInError;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.osgi.jmx.framework.FrameworkMBean;
1: 
1: /**
1:  * <p>
1:  * <tt>BatchInstallResult</tt> represents codec for resulting CompositeData of
1:  * FrameworkMBean installBundles methods.
1:  * It converting batch install results to CompositeData {@link #toCompositeData()}
1:  * and from CompositeData to this BatchInstallResult {@link #from(CompositeData)}.
1:  * It provides also constructors to build BatchInstallResult.  
1:  * Structure of compositeData as defined in compositeType @see {@link FrameworkMBean#BATCH_INSTALL_RESULT_TYPE}.
1:  * </p>
1:  * @see BatchResult
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class BatchInstallResult extends BatchResult {
1: 
1:     /**
1:      * @see FrameworkMBean#REMAINING_LOCATION_ITEM
1:      * @see FrameworkMBean#REMAINING
1:      */
1:     private String[] remainingLocationItems;
1:     
1:     /**
1:      * @see FrameworkMBean#BUNDLE_IN_ERROR_LOCATION_ITEM
1:      * @see FrameworkMBean#BUNDLE_IN_ERROR
1:      */
1:     private String bundleInError;
1: 
1:     /**
1:      * Constructs new BatchInstallResult with completedItems array.
1:      * Newly created object represents successful batch result.
1:      * @param completedItems containing the list of bundles completing the batch operation.
1:      */
1:     public BatchInstallResult(long[] completedItems) {
1:         this.completed = completedItems;
1:         success = true;
1:     }
1: 
1:     /**
1:      * Constructs new BatchInstallResult with error message.
1:      * Newly created object represents failed batch result.
1:      * @param error containing the error message of the batch operation.
1:      */
1:     public BatchInstallResult(String error){
1:         this.error = error;
1:         success = false;
1:     }
1:     /**
1:      * Constructs new BatchInstallResult.
1:      * Newly created object represents failed batch result.
1:      * 
1:      * @param completedItems containing the list of bundles completing the batch operation.
1:      * @param error containing the error message of the batch operation.
1:      * @param remainingLocationItems remaining bundles unprocessed by the
1:      * failing batch operation.
1:      * @param bundleInError containing the bundle which caused the error during the batch
1:      * operation.
1:      */
1:     public BatchInstallResult(long[] completedItems, String error, String[] remainingLocationItems, String bundleInError) {
1:         this(completedItems, error, remainingLocationItems, false, bundleInError);
1:     }
1: 
1:     /**
1:      * Constructs new BatchInstallResult.
1:      * 
1:      * @param completedItems containing the list of bundles completing the batch operation.
1:      * @param error containing the error message of the batch operation.
1:      * @param remainingLocationItems remaining bundles unprocessed by the
1:      * failing batch operation.
1:      * @param success indicates if this operation was successful.
1:      * @param bundleInError containing the bundle which caused the error during the batch
1:      * operation.
1:      */
1:     public BatchInstallResult(long[] completedItems, String error, String[] remainingLocationItems, boolean success,
1:             String bundleInError) {
1:         this.bundleInError = bundleInError;
1:         this.completed = completedItems;
1:         this.error = error;
1:         this.remainingLocationItems = remainingLocationItems;
1:         this.success = success;
1:     }
1: 
1:     /**
1:      * Translates BatchInstallResult to CompositeData represented by
1:      * compositeType {@link FrameworkMBean#BATCH_INSTALL_RESULT_TYPE}.
1:      * 
1:      * @return translated BatchInstallResult to compositeData.
1:      */
1:     public CompositeData toCompositeData() {
1:         try {
1:             Map<String, Object> items = new HashMap<String, Object>();
1:             items.put(FrameworkMBean.BUNDLE_IN_ERROR, bundleInError);
1:             items.put(FrameworkMBean.COMPLETED, toLongArray(completed));
1:             items.put(FrameworkMBean.ERROR, error);
1:             items.put(FrameworkMBean.REMAINING, remainingLocationItems);
1:             items.put(FrameworkMBean.SUCCESS, success);
1:             return new CompositeDataSupport(FrameworkMBean.BATCH_INSTALL_RESULT_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Can't create CompositeData" + e);
1:         }
1:     }
1: 
1:     /**
1:      * Static factory method to create BatchInstallResult from CompositeData object.
1:      * 
1:      * @param data {@link CompositeData} instance.
1:      * @return BatchInstallResult instance.
1:      */
1:     public static BatchInstallResult from(CompositeData data) {
1:         if(data == null){
1:             return null;
1:         }
1:         String bundleInError = (String) data.get(FrameworkMBean.BUNDLE_IN_ERROR);
1:         long[] completedItems = toLongPrimitiveArray((Long[]) data.get(FrameworkMBean.COMPLETED));
1:         String[] remainingLocationItems = (String[]) data.get(FrameworkMBean.REMAINING);
1:         String error = (String) data.get(FrameworkMBean.ERROR);
1:         boolean success = (Boolean) data.get(FrameworkMBean.SUCCESS);
1:         return new BatchInstallResult(completedItems, error, remainingLocationItems, success, bundleInError);
1:     }
1: 
1:     /**
1:      * Gets remaining location items.
1:      * @return array of String with locations.
1:      */
1:     public String[] getRemainingLocationItems() {
1:         return remainingLocationItems;
1:     }
1: 
1:     /**
1:      * Gets bundle in error location.
1:      * @return the bundleInError.
1:      */
1:     public String getBundleInError() {
1:         return bundleInError;
1:     }
1: 
1: }
============================================================================