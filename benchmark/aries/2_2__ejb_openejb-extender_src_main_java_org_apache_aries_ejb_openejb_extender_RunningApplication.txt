1:541fd79: /**
1:541fd79:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:541fd79:  *  contributor license agreements.  See the NOTICE file distributed with
1:541fd79:  *  this work for additional information regarding copyright ownership.
1:541fd79:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:541fd79:  *  (the "License"); you may not use this file except in compliance with
1:541fd79:  *  the License.  You may obtain a copy of the License at
1:541fd79:  *
1:541fd79:  *     http://www.apache.org/licenses/LICENSE-2.0
1:541fd79:  *
1:541fd79:  *  Unless required by applicable law or agreed to in writing, software
1:541fd79:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:541fd79:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:541fd79:  *  See the License for the specific language governing permissions and
1:541fd79:  *  limitations under the License.
1:541fd79:  */
1:541fd79: package org.apache.aries.ejb.openejb.extender;
2:541fd79: 
1:541fd79: import java.util.ArrayList;
1:541fd79: import java.util.Collection;
1:4115fb2: import java.util.Dictionary;
1:4115fb2: import java.util.HashMap;
1:4115fb2: import java.util.HashSet;
1:4115fb2: import java.util.Hashtable;
1:4115fb2: import java.util.List;
1:4115fb2: import java.util.Map;
1:4115fb2: import java.util.Map.Entry;
1:4115fb2: import java.util.concurrent.ConcurrentHashMap;
1:4115fb2: import java.util.concurrent.ConcurrentMap;
1:541fd79: 
1:4115fb2: import javax.naming.Context;
1:4115fb2: import javax.naming.NamingException;
1:4115fb2: import javax.persistence.EntityManagerFactory;
1:4115fb2: 
1:4115fb2: import org.apache.aries.jpa.container.PersistenceUnitConstants;
1:4115fb2: import org.apache.aries.jpa.container.context.PersistenceContextProvider;
1:4115fb2: import org.apache.aries.util.AriesFrameworkUtil;
1:4115fb2: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:4115fb2: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;
1:541fd79: import org.apache.openejb.AppContext;
1:4115fb2: import org.apache.openejb.BeanContext;
1:4115fb2: import org.apache.openejb.ContainerType;
1:4115fb2: import org.apache.openejb.assembler.classic.EnterpriseBeanInfo;
1:4115fb2: import org.apache.openejb.assembler.classic.PersistenceContextReferenceInfo;
1:4115fb2: import org.apache.openejb.assembler.classic.PersistenceUnitReferenceInfo;
1:4115fb2: import org.apache.openejb.assembler.classic.ProxyInterfaceResolver;
1:ea6eb33: import org.apache.openejb.assembler.classic.ReferenceLocationInfo;
1:4115fb2: import org.apache.openejb.jee.EnterpriseBean;
1:4115fb2: import org.apache.openejb.persistence.JtaEntityManager;
1:4115fb2: import org.osgi.framework.Bundle;
1:4115fb2: import org.osgi.framework.ServiceReference;
1:541fd79: import org.osgi.framework.ServiceRegistration;
1:4115fb2: import org.osgi.util.tracker.ServiceTracker;
1:4115fb2: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1:541fd79: 
1:4115fb2: public class RunningApplication implements ServiceTrackerCustomizer {
1:541fd79: 
1:4115fb2:   private static final String NONE = "NONE";
1:541fd79:   
1:4115fb2:   private final AppContext ctx;
1:4115fb2:   private final Bundle bundle;
1:4115fb2:   private final Collection<ServiceRegistration<?>> regs = 
1:4115fb2:     new ArrayList<ServiceRegistration<?>>();
1:4115fb2:   
1:4115fb2:   private ServiceTracker tracker;
1:4115fb2:   
1:ea6eb33:   private final ConcurrentMap<String, ConcurrentMap<Context, PersistenceUnitReferenceInfo>> 
1:ea6eb33:     unitRegistrations = new ConcurrentHashMap<String, ConcurrentMap<Context, PersistenceUnitReferenceInfo>>();
1:4115fb2:   
1:4115fb2:   private final ConcurrentMap<String, ConcurrentMap<Context, PersistenceContextReferenceInfo>> 
1:4115fb2:     contextRegistrations = new ConcurrentHashMap<String, ConcurrentMap<Context, PersistenceContextReferenceInfo>>();
1:4115fb2:   
1:4115fb2:   public RunningApplication(AppContext context, Bundle bundle, List<EnterpriseBeanInfo> enterpriseBeans) {
1:541fd79:     this.ctx = context;
1:4115fb2:     this.bundle = bundle;
1:4115fb2:     
1:4115fb2:     for(EnterpriseBeanInfo bean : enterpriseBeans) {
1:4115fb2:       for(PersistenceUnitReferenceInfo pui : bean.jndiEnc.persistenceUnitRefs) {
1:ea6eb33:         ConcurrentMap<Context, PersistenceUnitReferenceInfo> map = unitRegistrations.
1:ea6eb33:            get(pui.persistenceUnitName);
1:4115fb2:         
1:4115fb2:         if(map == null) {
1:ea6eb33:           map = new ConcurrentHashMap<Context, PersistenceUnitReferenceInfo>();
1:4115fb2:           unitRegistrations.put(pui.persistenceUnitName, map);
1:4115fb2:         }
1:4115fb2:         
1:4115fb2:         for(BeanContext eb : ctx.getBeanContexts()) {
1:4115fb2:           if(eb.getEjbName().equals(bean.ejbName)){
1:ea6eb33:             map.put(eb.getJndiContext(), pui);
1:4115fb2:             continue;
1:4115fb2:           }
1:4115fb2:         }
1:4115fb2:       }
1:4115fb2:       
1:4115fb2:       for(PersistenceContextReferenceInfo pci : bean.jndiEnc.persistenceContextRefs) {
1:4115fb2:         ConcurrentMap<Context, PersistenceContextReferenceInfo> map = contextRegistrations.
1:4115fb2:             get(pci.persistenceUnitName);
1:4115fb2:         
1:4115fb2:         if(map == null) {
1:4115fb2:           map = new ConcurrentHashMap<Context, PersistenceContextReferenceInfo>();
1:4115fb2:           contextRegistrations.put(pci.persistenceUnitName, map);
1:4115fb2:         }
1:4115fb2:         
1:4115fb2:         for(BeanContext eb : ctx.getBeanContexts()) {
1:4115fb2:           if(eb.getEjbName().equals(bean.ejbName)){
1:4115fb2:             map.put(eb.getJndiContext(), pci);
1:4115fb2:             continue;
1:4115fb2:           }
1:4115fb2:         }
1:4115fb2:       }
1:4115fb2:     }
3:541fd79:   }
1:541fd79: 
1:541fd79:   public AppContext getCtx() {
1:541fd79:     return ctx;
1:4115fb2:   }
1:541fd79: 
1:4115fb2:   public void init() {
1:4115fb2:     
1:4115fb2:     tracker = new ServiceTracker(bundle.getBundleContext(), 
1:4115fb2:         EntityManagerFactory.class.getName(), this);
1:4115fb2:     tracker.open();
1:4115fb2:     
1:4115fb2:     registerEJBs();
1:4115fb2:   }
1:4115fb2:   
1:4115fb2:   public void destroy() {
1:4115fb2:     tracker.close();
1:4115fb2:     for(ServiceRegistration<?> reg : regs) {
1:4115fb2:       AriesFrameworkUtil.safeUnregisterService(reg);
1:4115fb2:     }
1:4115fb2:   }
1:4115fb2:   
1:4115fb2: 
1:4115fb2:   
1:4115fb2:   private void registerEJBs() {
1:4115fb2:     
1:4115fb2:     Collection<String> names = new HashSet<String>();
1:4115fb2:     
1:4115fb2:     Dictionary<String, String> d = bundle.getHeaders();
1:4115fb2:     String valueOfExportEJBHeader = d.get("Export-EJB");
1:4115fb2:     
1:f8bfaf6:     if((valueOfExportEJBHeader == null)){
1:f8bfaf6:       return;
1:f8bfaf6:     }
1:f8bfaf6:         
1:f8bfaf6:     if(names.contains(NONE)){
2:4115fb2:       return;
1:4115fb2:     }
1:4115fb2:     
1:4115fb2:     List<NameValuePair> contentsOfExportEJBHeader = ManifestHeaderProcessor.parseExportString(valueOfExportEJBHeader);
1:4115fb2:     for(NameValuePair nvp:contentsOfExportEJBHeader){
1:4115fb2:       names.add(nvp.getName());
1:4115fb2:     }
1:4115fb2:     
1:f8bfaf6:     if(valueOfExportEJBHeader.trim().equals("")){
1:f8bfaf6:         names = new AllCollection<String>();
1:f8bfaf6:       }
1:4115fb2:     
1:4115fb2:     //Register our session beans
1:4115fb2:     for (BeanContext beanContext : ctx.getDeployments()) {
1:4115fb2:       String ejbName = beanContext.getEjbName();
1:4115fb2:       //Skip if not a Singleton or stateless bean
1:4115fb2:       ContainerType type = beanContext.getContainer().getContainerType();
1:4115fb2:       boolean register = type == ContainerType.SINGLETON || type == ContainerType.STATELESS;
1:4115fb2:       
1:4115fb2:       //Skip if not allowed name
1:4115fb2:       register &= names.contains(ejbName);
1:4115fb2:       
1:4115fb2:       if(!register) {
1:4115fb2:         continue;
1:4115fb2:       }
1:4115fb2:       
1:4115fb2:       if (beanContext.isLocalbean()) {
1:4115fb2: 
1:4115fb2:         BeanContext.BusinessLocalBeanHome home = beanContext.getBusinessLocalBeanHome();
1:4115fb2:     
1:4115fb2:         Dictionary<String, Object> props = new Hashtable<String, Object>(); 
1:4115fb2:         
1:4115fb2:         props.put("ejb.name", ejbName);
1:4115fb2:         props.put("ejb.type", getCasedType(type));
1:4115fb2:         regs.add(bundle.getBundleContext().registerService(beanContext.getBeanClass().getName(), 
1:4115fb2:             new EJBServiceFactory(home), props));
1:4115fb2:       }
1:4115fb2: 
1:4115fb2:   
1:4115fb2:       for (Class<?> interfce : beanContext.getBusinessLocalInterfaces()) {
1:4115fb2: 
1:4115fb2:         BeanContext.BusinessLocalHome home = beanContext.getBusinessLocalHome(interfce);
1:4115fb2:         
1:4115fb2:         Dictionary<String, Object> props = new Hashtable<String, Object>(); 
1:4115fb2:         
1:4115fb2:         props.put("ejb.name", ejbName);
1:4115fb2:         props.put("ejb.type", getCasedType(type));
1:4115fb2:         regs.add(bundle.getBundleContext().registerService(interfce.getName(), 
1:4115fb2:             new EJBServiceFactory(home), props));
1:4115fb2:       }
1:4115fb2:       
1:4115fb2:       for (Class<?> interfce : beanContext.getBusinessRemoteInterfaces()) {
1:4115fb2: 
1:4115fb2:         List<Class> interfaces = ProxyInterfaceResolver.getInterfaces(beanContext.getBeanClass(), 
1:4115fb2:             interfce, beanContext.getBusinessRemoteInterfaces());
1:4115fb2:         BeanContext.BusinessRemoteHome home = beanContext.getBusinessRemoteHome(interfaces, interfce);
1:4115fb2:         
1:4115fb2:         Dictionary<String, Object> props = new Hashtable<String, Object>(); 
1:4115fb2:         
1:4115fb2:         props.put("sevice.exported.interfaces", interfce.getName());
1:4115fb2:         props.put("ejb.name", ejbName);
1:4115fb2:         props.put("ejb.type", getCasedType(type));
1:4115fb2:         regs.add(bundle.getBundleContext().registerService(interfce.getName(), 
1:4115fb2:             new EJBServiceFactory(home), props));
1:4115fb2:       }
1:4115fb2:     }
1:4115fb2:   }
1:4115fb2:   
1:4115fb2:   private String getCasedType(ContainerType type) {
1:4115fb2:     String s = type.toString().substring(0,1).toUpperCase();
1:4115fb2:     s += type.toString().substring(1).toLowerCase();
1:4115fb2:     return s;
1:4115fb2:   }
1:4115fb2: 
1:4115fb2:   public Object addingService(ServiceReference reference) {
1:4115fb2:     
1:4115fb2:     if(isTrue(reference, PersistenceUnitConstants.CONTAINER_MANAGED_PERSISTENCE_UNIT) &&
1:4115fb2:        !!!isTrue(reference, PersistenceContextProvider.PROXY_FACTORY_EMF_ATTRIBUTE)) {
1:4115fb2:       
1:ea6eb33:       Map<Context, PersistenceUnitReferenceInfo> pUnitRefs = unitRegistrations.
1:4115fb2:              get(reference.getProperty(PersistenceUnitConstants.OSGI_UNIT_NAME));
1:4115fb2:       Map<Context, PersistenceContextReferenceInfo> pCtxRefs = contextRegistrations.
1:4115fb2:              get(reference.getProperty(PersistenceUnitConstants.OSGI_UNIT_NAME));
1:4115fb2:       
1:4115fb2:       if(pUnitRefs == null) {
1:ea6eb33:         pUnitRefs = new HashMap<Context, PersistenceUnitReferenceInfo>();
1:4115fb2:       }
1:4115fb2:       if(pCtxRefs == null) {
1:4115fb2:         pCtxRefs = new HashMap<Context, PersistenceContextReferenceInfo>();
1:4115fb2:       }      
1:4115fb2:       
1:4115fb2:       if(pUnitRefs.size() > 0 || pCtxRefs.size() > 0) {
1:4115fb2:       
1:4115fb2:         EntityManagerFactory emf = (EntityManagerFactory)bundle.getBundleContext().getService(reference);
1:4115fb2:         
1:ea6eb33:         for(Entry<Context, PersistenceUnitReferenceInfo> e : pUnitRefs.entrySet()) {
1:4115fb2:           try {
1:ea6eb33:             e.getKey().bind(e.getValue().referenceName, emf);
1:4115fb2:           } catch (NamingException ex) {
1:4115fb2:             // TODO Auto-generated catch block
1:4115fb2:             ex.printStackTrace();
1:4115fb2:           }
1:4115fb2:         }
1:4115fb2:         
1:4115fb2:         for(Entry<Context, PersistenceContextReferenceInfo> e : pCtxRefs.entrySet()) {
1:4115fb2:           PersistenceContextReferenceInfo pci = e.getValue();
1:4115fb2:           try {
1:4115fb2:             e.getKey().bind(pci.referenceName, new JtaEntityManager((String)reference.getProperty(
1:4115fb2:                 PersistenceUnitConstants.OSGI_UNIT_NAME), AriesPersistenceContextIntegration.get(),
1:4115fb2:                 emf, pci.properties, pci.extended));
1:4115fb2:           } catch (NamingException ex) {
1:4115fb2:             // TODO Auto-generated catch block
1:4115fb2:             ex.printStackTrace();
1:4115fb2:           }
1:4115fb2:         }
1:4115fb2:         return emf;
1:4115fb2:       }
1:4115fb2:     }
1:4115fb2:     return null;
1:4115fb2:   }
1:4115fb2: 
1:4115fb2:   private boolean isTrue(ServiceReference reference,
1:4115fb2:       String key) {
1:4115fb2:     return Boolean.parseBoolean(String.valueOf(reference.getProperty(key)));
1:4115fb2:   }
1:4115fb2: 
1:4115fb2:   public void modifiedService(ServiceReference reference, Object service) {
1:4115fb2:     //No op
1:4115fb2:   }
1:4115fb2: 
1:4115fb2:   public void removedService(ServiceReference reference, Object service) {
1:4115fb2:     
1:ea6eb33:     Map<Context, PersistenceUnitReferenceInfo> pUnitRefs = unitRegistrations.
1:4115fb2:         get(reference.getProperty(PersistenceUnitConstants.OSGI_UNIT_NAME));
1:4115fb2:     Map<Context, PersistenceContextReferenceInfo> pCtxRefs = contextRegistrations.
1:4115fb2:         get(reference.getProperty(PersistenceUnitConstants.OSGI_UNIT_NAME));
1:4115fb2: 
1:4115fb2:     if(pUnitRefs == null) {
1:ea6eb33:       pUnitRefs = new HashMap<Context, PersistenceUnitReferenceInfo>();
1:4115fb2:     }
1:4115fb2:     if(pCtxRefs == null) {
1:4115fb2:       pCtxRefs = new HashMap<Context, PersistenceContextReferenceInfo>();
1:4115fb2:     }      
1:4115fb2:     
1:4115fb2:     if(pUnitRefs.size() > 0 || pCtxRefs.size() > 0) {
1:4115fb2:     
1:ea6eb33:       for(Entry<Context, PersistenceUnitReferenceInfo> e : pUnitRefs.entrySet()) {
1:4115fb2:         try {
1:ea6eb33:           e.getKey().unbind(e.getValue().referenceName);
1:4115fb2:         } catch (NamingException ex) {
1:4115fb2:           // TODO Auto-generated catch block
1:4115fb2:           ex.printStackTrace();
1:4115fb2:         }
1:4115fb2:       }
1:4115fb2:     
1:4115fb2:       for(Entry<Context, PersistenceContextReferenceInfo> e : pCtxRefs.entrySet()) {
1:4115fb2:         PersistenceContextReferenceInfo pci = e.getValue();
1:4115fb2:         try {
1:4115fb2:           e.getKey().unbind(pci.referenceName);
1:4115fb2:         } catch (NamingException ex) {
1:4115fb2:           // TODO Auto-generated catch block
1:4115fb2:           ex.printStackTrace();
1:4115fb2:         }
1:4115fb2:       }
1:4115fb2:     }
1:541fd79:   }
1:541fd79: }
============================================================================
author:Emily Jiang
-------------------------------------------------------------------------------
commit:f8bfaf6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if((valueOfExportEJBHeader == null)){
1:       return;
1:     }
1:         
1:     if(names.contains(NONE)){
/////////////////////////////////////////////////////////////////////////
1:     if(valueOfExportEJBHeader.trim().equals("")){
1:         names = new AllCollection<String>();
1:       }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:ea6eb33
/////////////////////////////////////////////////////////////////////////
1: import org.apache.openejb.assembler.classic.ReferenceLocationInfo;
/////////////////////////////////////////////////////////////////////////
1:   private final ConcurrentMap<String, ConcurrentMap<Context, PersistenceUnitReferenceInfo>> 
1:     unitRegistrations = new ConcurrentHashMap<String, ConcurrentMap<Context, PersistenceUnitReferenceInfo>>();
/////////////////////////////////////////////////////////////////////////
1:         ConcurrentMap<Context, PersistenceUnitReferenceInfo> map = unitRegistrations.
1:            get(pui.persistenceUnitName);
1:           map = new ConcurrentHashMap<Context, PersistenceUnitReferenceInfo>();
1:             map.put(eb.getJndiContext(), pui);
/////////////////////////////////////////////////////////////////////////
1:       Map<Context, PersistenceUnitReferenceInfo> pUnitRefs = unitRegistrations.
1:         pUnitRefs = new HashMap<Context, PersistenceUnitReferenceInfo>();
/////////////////////////////////////////////////////////////////////////
1:         for(Entry<Context, PersistenceUnitReferenceInfo> e : pUnitRefs.entrySet()) {
1:             e.getKey().bind(e.getValue().referenceName, emf);
/////////////////////////////////////////////////////////////////////////
1:     Map<Context, PersistenceUnitReferenceInfo> pUnitRefs = unitRegistrations.
1:       pUnitRefs = new HashMap<Context, PersistenceUnitReferenceInfo>();
/////////////////////////////////////////////////////////////////////////
1:       for(Entry<Context, PersistenceUnitReferenceInfo> e : pUnitRefs.entrySet()) {
1:           e.getKey().unbind(e.getValue().referenceName);
commit:4115fb2
/////////////////////////////////////////////////////////////////////////
1: import java.util.Dictionary;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Hashtable;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: import javax.persistence.EntityManagerFactory;
1: 
1: import org.apache.aries.jpa.container.PersistenceUnitConstants;
1: import org.apache.aries.jpa.container.context.PersistenceContextProvider;
1: import org.apache.aries.util.AriesFrameworkUtil;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;
1: import org.apache.openejb.BeanContext;
1: import org.apache.openejb.ContainerType;
1: import org.apache.openejb.assembler.classic.EnterpriseBeanInfo;
1: import org.apache.openejb.assembler.classic.PersistenceContextReferenceInfo;
1: import org.apache.openejb.assembler.classic.PersistenceUnitReferenceInfo;
1: import org.apache.openejb.assembler.classic.ProxyInterfaceResolver;
1: import org.apache.openejb.jee.EnterpriseBean;
1: import org.apache.openejb.persistence.JtaEntityManager;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1: public class RunningApplication implements ServiceTrackerCustomizer {
1:   private static final String NONE = "NONE";
0:   private static final String ALL = "ALL";
1:   private final AppContext ctx;
1:   private final Bundle bundle;
1:   private final Collection<ServiceRegistration<?>> regs = 
1:     new ArrayList<ServiceRegistration<?>>();
1:   
1:   private ServiceTracker tracker;
1:   
0:   private final ConcurrentMap<String, ConcurrentMap<Context, String>> unitRegistrations = 
0:     new ConcurrentHashMap<String, ConcurrentMap<Context, String>>();
1:   
1:   private final ConcurrentMap<String, ConcurrentMap<Context, PersistenceContextReferenceInfo>> 
1:     contextRegistrations = new ConcurrentHashMap<String, ConcurrentMap<Context, PersistenceContextReferenceInfo>>();
1:   
1:   public RunningApplication(AppContext context, Bundle bundle, List<EnterpriseBeanInfo> enterpriseBeans) {
1:     this.bundle = bundle;
1:     
1:     for(EnterpriseBeanInfo bean : enterpriseBeans) {
1:       for(PersistenceUnitReferenceInfo pui : bean.jndiEnc.persistenceUnitRefs) {
0:         ConcurrentMap<Context, String> map = unitRegistrations.get(pui.persistenceUnitName);
1:         
1:         if(map == null) {
0:           map = new ConcurrentHashMap<Context, String>();
1:           unitRegistrations.put(pui.persistenceUnitName, map);
1:         }
1:         
1:         for(BeanContext eb : ctx.getBeanContexts()) {
1:           if(eb.getEjbName().equals(bean.ejbName)){
0:             map.put(eb.getJndiContext(), pui.referenceName);
1:             continue;
1:           }
1:         }
1:       }
1:       
1:       for(PersistenceContextReferenceInfo pci : bean.jndiEnc.persistenceContextRefs) {
1:         ConcurrentMap<Context, PersistenceContextReferenceInfo> map = contextRegistrations.
1:             get(pci.persistenceUnitName);
1:         
1:         if(map == null) {
1:           map = new ConcurrentHashMap<Context, PersistenceContextReferenceInfo>();
1:           contextRegistrations.put(pci.persistenceUnitName, map);
1:         }
1:         
1:         for(BeanContext eb : ctx.getBeanContexts()) {
1:           if(eb.getEjbName().equals(bean.ejbName)){
1:             map.put(eb.getJndiContext(), pci);
1:             continue;
1:           }
1:         }
1:       }
1:     }
1:   public void init() {
1:     
1:     tracker = new ServiceTracker(bundle.getBundleContext(), 
1:         EntityManagerFactory.class.getName(), this);
1:     tracker.open();
1:     
1:     registerEJBs();
1:   public void destroy() {
1:     tracker.close();
1:     for(ServiceRegistration<?> reg : regs) {
1:       AriesFrameworkUtil.safeUnregisterService(reg);
1:     }
1:   }
1:   
1: 
1:   
1:   private void registerEJBs() {
1:     
1:     Collection<String> names = new HashSet<String>();
1:     
1:     Dictionary<String, String> d = bundle.getHeaders();
1:     String valueOfExportEJBHeader = d.get("Export-EJB");
1:     
0:     if((valueOfExportEJBHeader == null)||(valueOfExportEJBHeader.equals(""))){
1:       return;
1:     }
1:     
1:     List<NameValuePair> contentsOfExportEJBHeader = ManifestHeaderProcessor.parseExportString(valueOfExportEJBHeader);
1:     for(NameValuePair nvp:contentsOfExportEJBHeader){
1:       names.add(nvp.getName());
1:     }
1:     
0:     if(names.contains(NONE)){
1:       return;
1:     }
1:     
0:     if(names.contains(ALL)){
0:       names = new AllCollection<String>();
1:     }
1:     
1:     //Register our session beans
1:     for (BeanContext beanContext : ctx.getDeployments()) {
1:       String ejbName = beanContext.getEjbName();
1:       //Skip if not a Singleton or stateless bean
1:       ContainerType type = beanContext.getContainer().getContainerType();
1:       boolean register = type == ContainerType.SINGLETON || type == ContainerType.STATELESS;
1:       
1:       //Skip if not allowed name
1:       register &= names.contains(ejbName);
1:       
1:       if(!register) {
1:         continue;
1:       }
1:       
1:       if (beanContext.isLocalbean()) {
1: 
1:         BeanContext.BusinessLocalBeanHome home = beanContext.getBusinessLocalBeanHome();
1:     
1:         Dictionary<String, Object> props = new Hashtable<String, Object>(); 
1:         
1:         props.put("ejb.name", ejbName);
1:         props.put("ejb.type", getCasedType(type));
1:         regs.add(bundle.getBundleContext().registerService(beanContext.getBeanClass().getName(), 
1:             new EJBServiceFactory(home), props));
1:       }
1: 
1:   
1:       for (Class<?> interfce : beanContext.getBusinessLocalInterfaces()) {
1: 
1:         BeanContext.BusinessLocalHome home = beanContext.getBusinessLocalHome(interfce);
1:         
1:         Dictionary<String, Object> props = new Hashtable<String, Object>(); 
1:         
1:         props.put("ejb.name", ejbName);
1:         props.put("ejb.type", getCasedType(type));
1:         regs.add(bundle.getBundleContext().registerService(interfce.getName(), 
1:             new EJBServiceFactory(home), props));
1:       }
1:       
1:       for (Class<?> interfce : beanContext.getBusinessRemoteInterfaces()) {
1: 
1:         List<Class> interfaces = ProxyInterfaceResolver.getInterfaces(beanContext.getBeanClass(), 
1:             interfce, beanContext.getBusinessRemoteInterfaces());
1:         BeanContext.BusinessRemoteHome home = beanContext.getBusinessRemoteHome(interfaces, interfce);
1:         
1:         Dictionary<String, Object> props = new Hashtable<String, Object>(); 
1:         
1:         props.put("sevice.exported.interfaces", interfce.getName());
1:         props.put("ejb.name", ejbName);
1:         props.put("ejb.type", getCasedType(type));
1:         regs.add(bundle.getBundleContext().registerService(interfce.getName(), 
1:             new EJBServiceFactory(home), props));
1:       }
1:     }
1:   }
1:   
1:   private String getCasedType(ContainerType type) {
1:     String s = type.toString().substring(0,1).toUpperCase();
1:     s += type.toString().substring(1).toLowerCase();
1:     return s;
1:   }
1: 
1:   public Object addingService(ServiceReference reference) {
1:     
1:     if(isTrue(reference, PersistenceUnitConstants.CONTAINER_MANAGED_PERSISTENCE_UNIT) &&
1:        !!!isTrue(reference, PersistenceContextProvider.PROXY_FACTORY_EMF_ATTRIBUTE)) {
1:       
0:       Map<Context, String> pUnitRefs = unitRegistrations.
1:              get(reference.getProperty(PersistenceUnitConstants.OSGI_UNIT_NAME));
1:       Map<Context, PersistenceContextReferenceInfo> pCtxRefs = contextRegistrations.
1:              get(reference.getProperty(PersistenceUnitConstants.OSGI_UNIT_NAME));
1:       
1:       if(pUnitRefs == null) {
0:         pUnitRefs = new HashMap<Context, String>();
1:       }
1:       if(pCtxRefs == null) {
1:         pCtxRefs = new HashMap<Context, PersistenceContextReferenceInfo>();
1:       }      
1:       
1:       if(pUnitRefs.size() > 0 || pCtxRefs.size() > 0) {
1:       
1:         EntityManagerFactory emf = (EntityManagerFactory)bundle.getBundleContext().getService(reference);
1:         
0:         for(Entry<Context, String> e : pUnitRefs.entrySet()) {
1:           try {
0:             e.getKey().bind(e.getValue(), emf);
1:           } catch (NamingException ex) {
1:             // TODO Auto-generated catch block
1:             ex.printStackTrace();
1:           }
1:         }
1:         
1:         for(Entry<Context, PersistenceContextReferenceInfo> e : pCtxRefs.entrySet()) {
1:           PersistenceContextReferenceInfo pci = e.getValue();
1:           try {
1:             e.getKey().bind(pci.referenceName, new JtaEntityManager((String)reference.getProperty(
1:                 PersistenceUnitConstants.OSGI_UNIT_NAME), AriesPersistenceContextIntegration.get(),
1:                 emf, pci.properties, pci.extended));
1:           } catch (NamingException ex) {
1:             // TODO Auto-generated catch block
1:             ex.printStackTrace();
1:           }
1:         }
1:         return emf;
1:       }
1:     }
1:     return null;
1:   }
1: 
1:   private boolean isTrue(ServiceReference reference,
1:       String key) {
1:     return Boolean.parseBoolean(String.valueOf(reference.getProperty(key)));
1:   }
1: 
1:   public void modifiedService(ServiceReference reference, Object service) {
1:     //No op
1:   }
1: 
1:   public void removedService(ServiceReference reference, Object service) {
1:     
0:     Map<Context, String> pUnitRefs = unitRegistrations.
1:         get(reference.getProperty(PersistenceUnitConstants.OSGI_UNIT_NAME));
1:     Map<Context, PersistenceContextReferenceInfo> pCtxRefs = contextRegistrations.
1:         get(reference.getProperty(PersistenceUnitConstants.OSGI_UNIT_NAME));
1: 
1:     if(pUnitRefs == null) {
0:       pUnitRefs = new HashMap<Context, String>();
1:     }
1:     if(pCtxRefs == null) {
1:       pCtxRefs = new HashMap<Context, PersistenceContextReferenceInfo>();
1:     }      
1:     
1:     if(pUnitRefs.size() > 0 || pCtxRefs.size() > 0) {
1:     
0:       for(Entry<Context, String> e : pUnitRefs.entrySet()) {
1:         try {
0:           e.getKey().unbind(e.getValue());
1:         } catch (NamingException ex) {
1:           // TODO Auto-generated catch block
1:           ex.printStackTrace();
1:         }
1:       }
1:     
1:       for(Entry<Context, PersistenceContextReferenceInfo> e : pCtxRefs.entrySet()) {
1:         PersistenceContextReferenceInfo pci = e.getValue();
1:         try {
1:           e.getKey().unbind(pci.referenceName);
1:         } catch (NamingException ex) {
1:           // TODO Auto-generated catch block
1:           ex.printStackTrace();
1:         }
1:       }
1:     }
commit:541fd79
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.openejb.extender;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
0: import java.util.Collections;
1: 
1: import org.apache.openejb.AppContext;
1: import org.osgi.framework.ServiceRegistration;
1: 
0: public class RunningApplication {
1: 
0:   private final AppContext ctx;
0:   private final Collection<ServiceRegistration<?>> regs = 
0:     Collections.synchronizedCollection(new ArrayList<ServiceRegistration<?>>());
1:   
0:   public RunningApplication(AppContext context) {
1:     this.ctx = context;
1:   }
1: 
1:   public AppContext getCtx() {
1:     return ctx;
1:   }
1: 
0:   public Collection<ServiceRegistration<?>> getRegs() {
0:     return regs;
1:   }
1:   
0:   public void addRegs(Collection<ServiceRegistration<?>> toAdd) {
0:     regs.addAll(toAdd);
1:   }
1: }
============================================================================