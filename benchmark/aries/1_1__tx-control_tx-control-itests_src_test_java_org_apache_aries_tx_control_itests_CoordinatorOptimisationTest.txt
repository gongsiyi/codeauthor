1:a141259: /*
1:a141259:  * Licensed to the Apache Software Foundation (ASF) under one
1:a141259:  * or more contributor license agreements.  See the NOTICE file
1:a141259:  * distributed with this work for additional information
1:a141259:  * regarding copyright ownership.  The ASF licenses this file
1:a141259:  * to you under the Apache License, Version 2.0 (the
1:a141259:  * "License"); you may not use this file except in compliance
1:a141259:  * with the License.  You may obtain a copy of the License at
1:a141259:  *
1:a141259:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a141259:  *
1:a141259:  * Unless required by applicable law or agreed to in writing,
1:a141259:  * software distributed under the License is distributed on an
1:a141259:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:a141259:  * KIND, either express or implied.  See the License for the
1:a141259:  * specific language governing permissions and limitations
1:a141259:  * under the License.
1:a141259:  */
1:a141259: package org.apache.aries.tx.control.itests;
1:a141259: 
1:a141259: import static java.util.concurrent.TimeUnit.MINUTES;
1:a141259: import static java.util.stream.Collectors.toList;
1:a141259: import static java.util.stream.Stream.generate;
1:a141259: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:a141259: 
1:a141259: import java.sql.PreparedStatement;
1:a141259: import java.sql.SQLException;
1:a141259: import java.util.ArrayList;
1:a141259: import java.util.List;
1:a141259: import java.util.concurrent.atomic.AtomicInteger;
1:a141259: 
1:a141259: import javax.inject.Inject;
1:a141259: 
1:a141259: import org.junit.Test;
1:a141259: import org.junit.runner.RunWith;
1:a141259: import org.ops4j.pax.exam.Option;
1:a141259: import org.ops4j.pax.exam.junit.PaxExam;
1:a141259: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:a141259: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:a141259: import org.osgi.service.coordinator.Coordination;
1:a141259: import org.osgi.service.coordinator.Coordinator;
1:a141259: import org.osgi.service.coordinator.Participant;
1:a141259: 
1:a141259: @RunWith(PaxExam.class)
1:a141259: @ExamReactorStrategy(PerClass.class)
1:a141259: public class CoordinatorOptimisationTest extends AbstractTransactionTest implements Participant {
1:a141259: 
1:a141259: 	protected Option testSpecificOptions() {
1:a141259: 		return mavenBundle("org.apache.felix", "org.apache.felix.coordinator").versionAsInProject();
1:a141259: 	}
1:a141259: 	
1:a141259:     @Inject
1:a141259:     Coordinator coordinator;
1:a141259:     
1:a141259:     @Test
1:a141259:     public void compareWithAndWithoutCoord() {
1:a141259:     	String base = "Hello ";
1:a141259:     	
1:a141259:     	AtomicInteger counter = new AtomicInteger(1);
1:a141259:     	
1:a141259:     	List<String> messages = generate(() -> base + counter.getAndIncrement())
1:a141259:     				.limit(10000)
1:a141259:     				.collect(toList());
1:a141259:     	
1:a141259:     	long noCoord;
1:617ed14:     	long oneTran;
1:a141259:     	long withCoord;
1:a141259:     	
1:a141259:     	long start = System.currentTimeMillis();
1:a141259:     	try {
1:a141259: 	    	messages.stream()
2:a141259: 	    		.forEach(this::persistMessage);
1:a141259:     	} finally {
1:a141259:     		noCoord = System.currentTimeMillis() - start;
1:a141259:     	}
1:a141259:     	
1:a141259:     	txControl.required(() -> connection.createStatement().executeUpdate("DELETE FROM TEST_TABLE"));
1:a141259:     	
1:617ed14:     	txControl.required(() -> {
1:617ed14:     			messages.stream()
1:617ed14:     				.forEach(this::persistMessage);
1:617ed14:     			return null;
1:617ed14:     		});
1:617ed14:     	oneTran = System.currentTimeMillis() - start;
1:617ed14: 
1:617ed14:     	txControl.required(() -> connection.createStatement().executeUpdate("DELETE FROM TEST_TABLE"));
1:617ed14:     	
1:a141259:     	coordinator.begin("foo", MINUTES.toMillis(5));
1:a141259:     	start = System.currentTimeMillis();
1:a141259:     	try {
1:a141259:     		messages.stream()
1:617ed14:     		.forEach(this::persistMessage);
1:a141259:     	} finally {
1:a141259:     		coordinator.peek().end();
1:a141259:     		withCoord = System.currentTimeMillis() - start;
1:a141259:     	}
1:a141259:     	
1:617ed14:     	System.out.println("\n\n\n\nWithout Coord: " + noCoord + "  One Tran: " + oneTran+  
1:617ed14:     			"  With Coord: " + withCoord);
1:a141259:     }
1:a141259:     
1:a141259:     @SuppressWarnings("unchecked")
1:a141259: 	private void persistMessage(String message) {
1:a141259:         if(coordinator.addParticipant(this)) {
1:a141259:             ((List<String>)coordinator.peek().getVariables()
1:a141259:                 .computeIfAbsent(getClass(), k -> new ArrayList<String>()))
1:a141259:                 .add(message);
1:a141259:         } else {
1:a141259:             txControl.required(() -> {
1:a141259:                     PreparedStatement ps = connection.prepareStatement(
1:a141259:                             "Insert into TEST_TABLE values ( ? )");
1:a141259:                     ps.setString(1, message);
1:a141259:                     return ps.executeUpdate();
1:a141259:                 });
1:a141259:         }
1:a141259:     }
1:a141259:     
1:a141259:     @SuppressWarnings("unchecked")
1:a141259: 	@Override
1:a141259:     public void ended(Coordination coord) throws Exception {
1:a141259:         txControl.required(() -> {
1:a141259:                 List<String> l = (List<String>) coord.getVariables()
1:a141259:                                 .get(getClass());
1:a141259:                 
1:a141259:                 PreparedStatement ps = connection.prepareStatement(
1:a141259:                         "Insert into TEST_TABLE values ( ? )");
1:a141259:                 
1:a141259:                 l.stream().forEach(s -> {
1:a141259:                 	 	try {
1:a141259: 	                        ps.setString(1, s);
1:a141259: 	                        ps.addBatch();
1:a141259:                 	 	} catch (SQLException sqle) {
1:a141259:                 	 		throw new RuntimeException(sqle);
1:a141259:                 	 	}
1:a141259:                     });
1:a141259:                 
1:a141259:                 return ps.executeBatch();
1:a141259:             });
1:a141259:     }
1:a141259: 
1:a141259:     @Override
1:a141259:     public void failed(Coordination arg0) throws Exception { }
1:a141259: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:617ed14
/////////////////////////////////////////////////////////////////////////
1:     	long oneTran;
/////////////////////////////////////////////////////////////////////////
1:     	txControl.required(() -> {
1:     			messages.stream()
1:     				.forEach(this::persistMessage);
1:     			return null;
1:     		});
1:     	oneTran = System.currentTimeMillis() - start;
1: 
1:     	txControl.required(() -> connection.createStatement().executeUpdate("DELETE FROM TEST_TABLE"));
1:     	
1:     		.forEach(this::persistMessage);
1:     	System.out.println("\n\n\n\nWithout Coord: " + noCoord + "  One Tran: " + oneTran+  
1:     			"  With Coord: " + withCoord);
commit:a141259
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.itests;
1: 
1: import static java.util.concurrent.TimeUnit.MINUTES;
1: import static java.util.stream.Collectors.toList;
1: import static java.util.stream.Stream.generate;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.inject.Inject;
1: 
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.coordinator.Coordinator;
1: import org.osgi.service.coordinator.Participant;
1: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: public class CoordinatorOptimisationTest extends AbstractTransactionTest implements Participant {
1: 
1: 	protected Option testSpecificOptions() {
1: 		return mavenBundle("org.apache.felix", "org.apache.felix.coordinator").versionAsInProject();
1: 	}
1: 	
1:     @Inject
1:     Coordinator coordinator;
1:     
1:     @Test
1:     public void compareWithAndWithoutCoord() {
1:     	String base = "Hello ";
1:     	
1:     	AtomicInteger counter = new AtomicInteger(1);
1:     	
1:     	List<String> messages = generate(() -> base + counter.getAndIncrement())
1:     				.limit(10000)
1:     				.collect(toList());
1:     	
1:     	long noCoord;
1:     	long withCoord;
1:     	
1:     	long start = System.currentTimeMillis();
1:     	try {
1: 	    	messages.stream()
1: 	    		.forEach(this::persistMessage);
1:     	} finally {
1:     		noCoord = System.currentTimeMillis() - start;
1:     	}
1:     	
1:     	txControl.required(() -> connection.createStatement().executeUpdate("DELETE FROM TEST_TABLE"));
1:     	
1:     	coordinator.begin("foo", MINUTES.toMillis(5));
1:     	start = System.currentTimeMillis();
1:     	try {
1:     		messages.stream()
1:     			.forEach(this::persistMessage);
1:     	} finally {
1:     		coordinator.peek().end();
1:     		withCoord = System.currentTimeMillis() - start;
1:     	}
1:     	
0:     	System.out.println("\n\n\n\nWithout Coord: " + noCoord + "  With Coord: " + withCoord);
1:     }
1:     
1:     @SuppressWarnings("unchecked")
1: 	private void persistMessage(String message) {
1:         if(coordinator.addParticipant(this)) {
1:             ((List<String>)coordinator.peek().getVariables()
1:                 .computeIfAbsent(getClass(), k -> new ArrayList<String>()))
1:                 .add(message);
1:         } else {
1:             txControl.required(() -> {
1:                     PreparedStatement ps = connection.prepareStatement(
1:                             "Insert into TEST_TABLE values ( ? )");
1:                     ps.setString(1, message);
1:                     return ps.executeUpdate();
1:                 });
1:         }
1:     }
1:     
1:     @SuppressWarnings("unchecked")
1: 	@Override
1:     public void ended(Coordination coord) throws Exception {
1:         txControl.required(() -> {
1:                 List<String> l = (List<String>) coord.getVariables()
1:                                 .get(getClass());
1:                 
1:                 PreparedStatement ps = connection.prepareStatement(
1:                         "Insert into TEST_TABLE values ( ? )");
1:                 
1:                 l.stream().forEach(s -> {
1:                 	 	try {
1: 	                        ps.setString(1, s);
1: 	                        ps.addBatch();
1:                 	 	} catch (SQLException sqle) {
1:                 	 		throw new RuntimeException(sqle);
1:                 	 	}
1:                     });
1:                 
1:                 return ps.executeBatch();
1:             });
1:     }
1: 
1:     @Override
1:     public void failed(Coordination arg0) throws Exception { }
1: }
============================================================================