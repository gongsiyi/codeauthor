1:430e8f5: /**
1:430e8f5:  * Licensed to the Apache Software Foundation (ASF) under one
1:430e8f5:  * or more contributor license agreements.  See the NOTICE file
1:430e8f5:  * distributed with this work for additional information
1:430e8f5:  * regarding copyright ownership.  The ASF licenses this file
1:430e8f5:  * to you under the Apache License, Version 2.0 (the
1:430e8f5:  * "License"); you may not use this file except in compliance
1:430e8f5:  * with the License.  You may obtain a copy of the License at
1:430e8f5:  *
1:430e8f5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:430e8f5:  *
1:430e8f5:  * Unless required by applicable law or agreed to in writing,
1:430e8f5:  * software distributed under the License is distributed on an
1:430e8f5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:430e8f5:  * KIND, either express or implied.  See the License for the
1:430e8f5:  * specific language governing permissions and limitations
1:430e8f5:  * under the License.
1:430e8f5:  */
1:380a6c0: package org.apache.aries.samples.blog.api.persistence;
1:430e8f5: 
1:430e8f5: import java.util.Date;
1:430e8f5: import java.util.List;
1:430e8f5: 
1:430e8f5: 
1:430e8f5: 
1:430e8f5: /**
1:430e8f5:  * This is the interface for the persistence layer of the blog
1:430e8f5:  * application.  This persistence layer is registered in the service
1:430e8f5:  * registry and is used by the main application layer. 
1:430e8f5:  *
1:430e8f5:  */
1:430e8f5: public interface BlogPersistenceService
1:430e8f5: {
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Get all the blog entries in the data store
1:430e8f5:    * @return a list of BlogEntry objects
1:430e8f5:    */
1:f3e430e:   public List<? extends Entry> getAllBlogEntries();
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Get the number of blog entries in the data store
1:430e8f5:    * @return the number of blog entries
1:430e8f5:    */
1:430e8f5:   public int getNoOfBlogEntries();
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Get the first N most recent posts starting from post X
1:430e8f5:    * @param firstPostIndex - The index of the first post to be retrieved
1:430e8f5:    * @param no - The number of posts to be retrieved starting from firstPostIndex
1:430e8f5:    */
1:f3e430e:   public List<? extends Entry> getBlogEntries(int firstPostIndex, int no);
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Get all the blog entries made by a particular
1:430e8f5:    * author
1:430e8f5:    * 
1:430e8f5:    * @param emailAddress the author's email address
1:430e8f5:    * @return a list of BlogEntry objects
1:430e8f5:    */
1:f3e430e:   public List<? extends Entry> getBlogsForAuthor(String emailAddress);
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Get a BlogEntry that has a given title
1:430e8f5:    * @param title the title of interest
1:430e8f5:    * @return A BlogEntry with a specific title (or null if no entry exists in the
1:430e8f5:    *         data store)
1:430e8f5:    */
1:f3e430e:   public Entry findBlogEntryByTitle(String title);
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Get BlogEntries created or modified between two specified dates
1:430e8f5:    * @param start  The Date defining the start of the time period
1:430e8f5:    * @param end    The Date defining the end of the time period
1:430e8f5:    * @return  A list of BlogEntry objects
1:430e8f5:    */
1:f3e430e:   public List<? extends Entry> getBlogEntriesModifiedBetween(Date start, Date end);
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Obtain a given Blog post using its unique id.
1:430e8f5:    * 
1:430e8f5:    * @param postId the posts unique id.
1:430e8f5:    * @return the Blog post.
1:430e8f5:    */
1:f3e430e:   public Entry getBlogEntryById(long postId);
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Get the details for an author
1:430e8f5:    * @param emailAddress the Author's email address
1:430e8f5:    * @return An Author object
1:430e8f5:    */
1:430e8f5:   public Author getAuthor(String emailAddress);
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Get all authors in the database
1:430e8f5:    * @return a List of Authors
1:430e8f5:    */
1:f3e430e:   public List<? extends Author> getAllAuthors();
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Create an author in the database
1:430e8f5:    * 
1:430e8f5:    * @param emailAddress
1:430e8f5:    * 			The author's email address
1:430e8f5:    * @param dob
1:430e8f5:    *     		The author's date of birth
1:430e8f5:    * @param name
1:430e8f5:    *        	The author's name
1:430e8f5:    * @param displayName
1:430e8f5:    *        	??
1:430e8f5:    * @param bio
1:430e8f5:    *        	The author's bio.
1:430e8f5:    */
1:430e8f5:   public void createAuthor(String email, Date dob, String name, String displayName, String bio);
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Create an Blog post in the database
1:430e8f5:    * 
1:430e8f5:    * @param a
1:430e8f5:    * 			The author
1:430e8f5:    * @param title
1:430e8f5:    * 			The title of the post
1:430e8f5:    * @param blogText
1:430e8f5:    * 			The text of the post
1:430e8f5:    * @param tags
1:430e8f5:    * 			??
1:430e8f5:    */
1:f3e430e:   public void createBlogPost(String email, String title, String blogText, List<String> tags);
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Update an author in the database
1:430e8f5:    * @param 
1:430e8f5:    */
1:430e8f5:   public void updateAuthor(String email, Date dob, String name, String displayName, String bio);
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Update an post in the database
1:430e8f5:    * 
1:f3e430e:    * @param email The author's email
1:f3e430e:    * @param title The title of the post
1:f3e430e:    * @param blogText The text of the blog
1:f3e430e:    * @param tags The list of tags
1:f3e430e:    * @param updatedDate The date the update was made
1:430e8f5:    */
1:f3e430e:   public void updateBlogEntry(long id, String email, String title, String blogText, List<String> tags, Date updatedDate);
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Remove the author with the specified email address
1:430e8f5:    * 
1:430e8f5:    * @param emailAddress the email address of the author to remove
1:430e8f5:    */
1:430e8f5:   public void removeAuthor(String emailAddress);
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Remove the specified BlogEntry, note that this must be a BlogEntry returned by
1:430e8f5:    * this service.
1:430e8f5:    * 
1:f3e430e:    * @param id the unique id of the blog entry to remove
1:430e8f5:    */
1:f3e430e:   public void removeBlogEntry(long id);
1:430e8f5: 
1:430e8f5: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:380a6c0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.blog.api.persistence;
commit:e0beeec
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.blog.api.persistence.api;
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:afa98ec
commit:f3e430e
/////////////////////////////////////////////////////////////////////////
1:   public List<? extends Entry> getAllBlogEntries();
/////////////////////////////////////////////////////////////////////////
1:   public List<? extends Entry> getBlogEntries(int firstPostIndex, int no);
/////////////////////////////////////////////////////////////////////////
1:   public List<? extends Entry> getBlogsForAuthor(String emailAddress);
/////////////////////////////////////////////////////////////////////////
1:   public Entry findBlogEntryByTitle(String title);
/////////////////////////////////////////////////////////////////////////
1:   public List<? extends Entry> getBlogEntriesModifiedBetween(Date start, Date end);
/////////////////////////////////////////////////////////////////////////
1:   public Entry getBlogEntryById(long postId);
/////////////////////////////////////////////////////////////////////////
1:   public List<? extends Author> getAllAuthors();
/////////////////////////////////////////////////////////////////////////
1:   public void createBlogPost(String email, String title, String blogText, List<String> tags);
/////////////////////////////////////////////////////////////////////////
1:    * @param email The author's email
1:    * @param title The title of the post
1:    * @param blogText The text of the blog
1:    * @param tags The list of tags
1:    * @param updatedDate The date the update was made
1:   public void updateBlogEntry(long id, String email, String title, String blogText, List<String> tags, Date updatedDate);
/////////////////////////////////////////////////////////////////////////
1:    * @param id the unique id of the blog entry to remove
1:   public void removeBlogEntry(long id);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:430e8f5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.samples.blog.persistence.api;
1: 
1: import java.util.Date;
1: import java.util.List;
1: 
1: 
1: 
1: /**
1:  * This is the interface for the persistence layer of the blog
1:  * application.  This persistence layer is registered in the service
1:  * registry and is used by the main application layer. 
1:  *
1:  */
1: public interface BlogPersistenceService
1: {
1: 
1:   /**
1:    * Get all the blog entries in the data store
1:    * @return a list of BlogEntry objects
1:    */
0:   public List<BlogEntry> getAllBlogEntries();
1: 
1:   /**
1:    * Get the number of blog entries in the data store
1:    * @return the number of blog entries
1:    */
1:   public int getNoOfBlogEntries();
1: 
1:   /**
1:    * Get the first N most recent posts starting from post X
1:    * @param firstPostIndex - The index of the first post to be retrieved
1:    * @param no - The number of posts to be retrieved starting from firstPostIndex
1:    */
0:   public List<BlogEntry> getBlogEntries(int firstPostIndex, int no);
1: 
1:   /**
1:    * Get all the blog entries made by a particular
1:    * author
1:    * 
1:    * @param emailAddress the author's email address
1:    * @return a list of BlogEntry objects
1:    */
0:   public List<BlogEntry> getBlogsForAuthor(String emailAddress);
1: 
1:   /**
1:    * Get a BlogEntry that has a given title
1:    * @param title the title of interest
1:    * @return A BlogEntry with a specific title (or null if no entry exists in the
1:    *         data store)
1:    */
0:   public BlogEntry findBlogEntryByTitle(String title);
1: 
1:   /**
1:    * Get BlogEntries created or modified between two specified dates
1:    * @param start  The Date defining the start of the time period
1:    * @param end    The Date defining the end of the time period
1:    * @return  A list of BlogEntry objects
1:    */
0:   public List<BlogEntry> getBlogEntriesModifiedBetween(Date start, Date end);
1: 
1:   /**
1:    * Obtain a given Blog post using its unique id.
1:    * 
1:    * @param postId the posts unique id.
1:    * @return the Blog post.
1:    */
0:   public BlogEntry getBlogEntryById(long postId);
1: 
1:   /**
1:    * Get the details for an author
1:    * @param emailAddress the Author's email address
1:    * @return An Author object
1:    */
1:   public Author getAuthor(String emailAddress);
1: 
1:   /**
1:    * Get all authors in the database
1:    * @return a List of Authors
1:    */
0:   public List<Author> getAllAuthors();
1: 
1:   /**
1:    * Create an author in the database
1:    * 
1:    * @param emailAddress
1:    * 			The author's email address
1:    * @param dob
1:    *     		The author's date of birth
1:    * @param name
1:    *        	The author's name
1:    * @param displayName
1:    *        	??
1:    * @param bio
1:    *        	The author's bio.
1:    */
1:   public void createAuthor(String email, Date dob, String name, String displayName, String bio);
1: 
1:   /**
1:    * Create an Blog post in the database
1:    * 
1:    * @param a
1:    * 			The author
1:    * @param title
1:    * 			The title of the post
1:    * @param blogText
1:    * 			The text of the post
1:    * @param tags
1:    * 			??
1:    */
0:   public void createBlogPost(Author a, String title, String blogText, List<String> tags);
1: 
1:   /**
1:    * Update an author in the database
1:    * @param 
1:    */
1:   public void updateAuthor(String email, Date dob, String name, String displayName, String bio);
1: 
1:   /**
1:    * Update an post in the database
1:    * 
0:    * @param b  The updated BlogEntry object. This object must be a modified BlogEntry
0:    *           previously returned by this service.
1:    */
0:   public void updateBlogPost(BlogEntry b);
1: 
1:   /**
1:    * Remove the author with the specified email address
1:    * 
1:    * @param emailAddress the email address of the author to remove
1:    */
1:   public void removeAuthor(String emailAddress);
1: 
1:   /**
1:    * Remove the specified BlogEntry, note that this must be a BlogEntry returned by
1:    * this service.
1:    * 
0:    * @param blogEntry the blog entry to remove
1:    */
0:   public void removeBlogEntry(BlogEntry blogEntry);
1: 
1: }
============================================================================