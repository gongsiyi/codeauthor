1:a457340: /*
1:a457340:  * Licensed to the Apache Software Foundation (ASF) under one
1:a457340:  * or more contributor license agreements.  See the NOTICE file
1:a457340:  * distributed with this work for additional information
1:a457340:  * regarding copyright ownership.  The ASF licenses this file
1:a457340:  * to you under the Apache License, Version 2.0 (the
1:a457340:  * "License"); you may not use this file except in compliance
1:a457340:  * with the License.  You may obtain a copy of the License at
1:a457340:  *
1:a457340:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a457340:  *
1:a457340:  * Unless required by applicable law or agreed to in writing,
1:a457340:  * software distributed under the License is distributed on an
1:a457340:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a457340:  * KIND, either express or implied.  See the License for the
1:a457340:  * specific language governing permissions and limitations
1:a457340:  * under the License.
1:a457340:  */
1:a457340: package org.apache.aries.subsystem.itests.defect;
1:a457340: 
1:a457340: import java.io.IOException;
1:a457340: import java.util.HashMap;
1:a457340: import java.util.Map;
1:a457340: 
1:a457340: import org.apache.aries.subsystem.itests.SubsystemTest;
1:a457340: import org.junit.Before;
1:a457340: import org.junit.Test;
1:a457340: import org.osgi.framework.Constants;
1:a457340: import org.osgi.service.subsystem.Subsystem;
1:a457340: import org.osgi.service.subsystem.Subsystem.State;
1:a457340: import org.osgi.service.subsystem.SubsystemConstants;
1:a457340: 
1:a457340: /*
1:a457340:  * https://issues.apache.org/jira/browse/ARIES-1434
1:a457340:  * 
1:a457340:  * org.osgi.framework.BundleException: Region 
1:a457340:  * 'application.a.esa;0.0.0;osgi.subsystem.application;1' is already connected 
1:a457340:  * to region 'composite.a.esa;0.0.0;osgi.subsystem.composite;2
1:a457340:  * 
1:a457340:  */
1:a457340: public class Aries1434Test extends SubsystemTest {
1:a457340: 	private static final String APPLICATION_A = "application.a.esa";
1:a457340: 	private static final String COMPOSITE_A = "composite.a.esa";
1:a457340: 	
1:a457340: 	private static boolean createdTestFiles;
1:a457340: 	@Before
1:a457340: 	public void createTestFiles() throws Exception {
1:a457340: 		if (createdTestFiles)
1:a457340: 			return;
1:a457340: 		createCompositeA();
1:a457340: 		createApplicationA();
1:a457340: 		createdTestFiles = true;
1:a457340: 	}
1:a457340: 	
1:a457340: 	private void createApplicationA() throws IOException {
1:a457340: 		createApplicationAManifest();
1:a457340: 		createSubsystem(APPLICATION_A, COMPOSITE_A);
1:a457340: 	}
1:a457340: 	
1:a457340: 	private void createApplicationAManifest() throws IOException {
1:a457340: 		Map<String, String> attributes = new HashMap<String, String>();
1:a457340: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:a457340: 		createManifest(APPLICATION_A + ".mf", attributes);
1:a457340: 	}
1:a457340: 	
1:a457340: 	private void createCompositeA() throws IOException {
1:a457340: 		createCompositeAManifest();
1:a457340: 		createSubsystem(COMPOSITE_A);
1:a457340: 	}
1:a457340: 	
1:a457340: 	private void createCompositeAManifest() throws IOException {
1:a457340: 		Map<String, String> attributes = new HashMap<String, String>();
1:a457340: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1:a457340: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:a457340: 		attributes.put(Constants.EXPORT_PACKAGE, "x");
1:a457340: 		createManifest(COMPOSITE_A + ".mf", attributes);
1:a457340: 	}
1:a457340: 	
1:a457340: 	@Test
1:a457340:     public void testResolvedChild() throws Exception {
1:a457340:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:a457340:     	try {
1:a457340: 	    	Subsystem compositeA = getChild(applicationA, COMPOSITE_A, null, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:a457340: 	    	startSubsystem(compositeA);
1:a457340: 	    	stopSubsystem(compositeA);
1:a457340: 	    	try {
1:a457340: 		    	assertState(State.RESOLVED, compositeA);
1:a457340: 		    	startSubsystem(applicationA);
1:a457340: 		    	try {
1:a457340: 			    	assertState(State.ACTIVE, applicationA);
1:a457340: 			    	assertState(State.ACTIVE, compositeA);
1:a457340: 		    	}
1:a457340: 		    	finally {
1:a457340: 		    		stopSubsystemSilently(applicationA);
1:a457340: 		    	}
1:a457340: 	    	}
1:a457340: 	    	finally {
1:a457340: 	    		stopSubsystemSilently(compositeA);
1:a457340: 	    	}
1:a457340:     	}
1:a457340:     	finally {
1:a457340:     		uninstallSubsystemSilently(applicationA);
1:a457340:     	}
1:a457340:     }
1:a457340: 	
1:a457340: 	@Test
1:a457340:     public void testActiveChild() throws Exception {
1:a457340:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:a457340:     	try {
1:a457340: 	    	Subsystem compositeA = getChild(applicationA, COMPOSITE_A, null, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:a457340: 	    	startSubsystem(compositeA);
1:a457340: 	    	try {
1:a457340: 		    	assertState(State.ACTIVE, compositeA);
1:a457340: 		    	startSubsystem(applicationA);
1:a457340: 		    	try {
1:a457340: 			    	assertState(State.ACTIVE, applicationA);
1:a457340: 			    	assertState(State.ACTIVE, compositeA);
1:a457340: 		    	}
1:a457340: 		    	finally {
1:a457340: 		    		stopSubsystemSilently(applicationA);
1:a457340: 		    	}
1:a457340: 	    	}
1:a457340: 	    	finally {
1:a457340: 	    		stopSubsystemSilently(compositeA);
1:a457340: 	    	}
1:a457340:     	}
1:a457340:     	finally {
1:a457340:     		uninstallSubsystemSilently(applicationA);
1:a457340:     	}
1:a457340:     }
1:a457340: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a457340
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.Subsystem.State;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1434
1:  * 
1:  * org.osgi.framework.BundleException: Region 
1:  * 'application.a.esa;0.0.0;osgi.subsystem.application;1' is already connected 
1:  * to region 'composite.a.esa;0.0.0;osgi.subsystem.composite;2
1:  * 
1:  */
1: public class Aries1434Test extends SubsystemTest {
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	private static final String COMPOSITE_A = "composite.a.esa";
1: 	
1: 	private static boolean createdTestFiles;
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createCompositeA();
1: 		createApplicationA();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	private void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A, COMPOSITE_A);
1: 	}
1: 	
1: 	private void createApplicationAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 	}
1: 	
1: 	private void createCompositeA() throws IOException {
1: 		createCompositeAManifest();
1: 		createSubsystem(COMPOSITE_A);
1: 	}
1: 	
1: 	private void createCompositeAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		attributes.put(Constants.EXPORT_PACKAGE, "x");
1: 		createManifest(COMPOSITE_A + ".mf", attributes);
1: 	}
1: 	
1: 	@Test
1:     public void testResolvedChild() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1: 	    	Subsystem compositeA = getChild(applicationA, COMPOSITE_A, null, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 	    	startSubsystem(compositeA);
1: 	    	stopSubsystem(compositeA);
1: 	    	try {
1: 		    	assertState(State.RESOLVED, compositeA);
1: 		    	startSubsystem(applicationA);
1: 		    	try {
1: 			    	assertState(State.ACTIVE, applicationA);
1: 			    	assertState(State.ACTIVE, compositeA);
1: 		    	}
1: 		    	finally {
1: 		    		stopSubsystemSilently(applicationA);
1: 		    	}
1: 	    	}
1: 	    	finally {
1: 	    		stopSubsystemSilently(compositeA);
1: 	    	}
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1: 	
1: 	@Test
1:     public void testActiveChild() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1: 	    	Subsystem compositeA = getChild(applicationA, COMPOSITE_A, null, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 	    	startSubsystem(compositeA);
1: 	    	try {
1: 		    	assertState(State.ACTIVE, compositeA);
1: 		    	startSubsystem(applicationA);
1: 		    	try {
1: 			    	assertState(State.ACTIVE, applicationA);
1: 			    	assertState(State.ACTIVE, compositeA);
1: 		    	}
1: 		    	finally {
1: 		    		stopSubsystemSilently(applicationA);
1: 		    	}
1: 	    	}
1: 	    	finally {
1: 	    		stopSubsystemSilently(compositeA);
1: 	    	}
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1: }
============================================================================