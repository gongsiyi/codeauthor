1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: 
1:2cfdf52: package org.apache.aries.jpa.container.impl;
1:2cfdf52: 
1:2cfdf52: import java.util.ArrayList;
1:2cfdf52: import java.util.Collection;
1:2cfdf52: import java.util.HashMap;
1:2cfdf52: import java.util.Map;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.container.parser.impl.PersistenceUnit;
1:2cfdf52: import org.apache.aries.jpa.container.parser.impl.PersistenceUnitParser;
1:2cfdf52: import org.osgi.framework.Bundle;
1:2cfdf52: import org.osgi.framework.BundleEvent;
1:2cfdf52: import org.osgi.util.tracker.BundleTrackerCustomizer;
1:2cfdf52: import org.slf4j.Logger;
1:2cfdf52: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: /**
1:2cfdf52:  * Looks for bundles containing a persistence.xml. For each persistence unit
1:2cfdf52:  * found a PersistenceProviderTracker is installed that tracks matching providers.
1:2cfdf52:  */
1:2cfdf52: public class PersistenceBundleTracker implements BundleTrackerCustomizer<Bundle> {
1:2cfdf52:     private static final Logger LOGGER = LoggerFactory.getLogger(PersistenceBundleTracker.class);
1:ec3ea65:     private final Map<Bundle, Collection<PersistenceProviderTracker>> trackers;
1:ec3ea65:     private Map<Integer, String> typeMap;
1:2cfdf52: 
1:d669541:     public PersistenceBundleTracker() {
1:2cfdf52:         trackers = new HashMap<Bundle, Collection<PersistenceProviderTracker>>();
1:ec3ea65:         this.typeMap = new HashMap<Integer, String>();
1:ec3ea65:         this.typeMap.put(BundleEvent.INSTALLED, "INSTALLED");
1:ec3ea65:         this.typeMap.put(BundleEvent.LAZY_ACTIVATION, "LAZY_ACTIVATION");
1:ec3ea65:         this.typeMap.put(BundleEvent.RESOLVED, "RESOLVED");
1:ec3ea65:         this.typeMap.put(BundleEvent.STARTED, "STARTED");
1:ec3ea65:         this.typeMap.put(BundleEvent.STARTING, "Starting");
1:ec3ea65:         this.typeMap.put(BundleEvent.STOPPED, "STOPPED");
1:ec3ea65:         this.typeMap.put(BundleEvent.UNINSTALLED, "UNINSTALLED");
1:ec3ea65:         this.typeMap.put(256, "UNRESOLVED");
1:ec3ea65:         this.typeMap.put(BundleEvent.UPDATED, "UPDATED");
4:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:8e98d46:     public synchronized Bundle addingBundle(Bundle bundle, BundleEvent event) {
1:fe66907:         if (event != null && event.getType() == BundleEvent.STOPPED) {
1:fe66907:             // Avoid starting persistence units in state STOPPED.
1:fe66907:             // TODO No idea why we are called at all in this state
1:fe66907:             return bundle;
1:fe66907:         }
1:ec3ea65:         if (getTrackers(bundle).isEmpty()) {
1:fe66907:             findPersistenceUnits(bundle, event);
1:2cfdf52:         }
1:2cfdf52:         return bundle;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:8e98d46:     public synchronized void removedBundle(Bundle bundle, BundleEvent event, Bundle object) {
1:8e98d46:         Collection<PersistenceProviderTracker> providerTrackers = trackers.remove(bundle);
1:ec3ea65:         if (providerTrackers == null || providerTrackers.isEmpty()) {
1:8e98d46:             return;
1:2cfdf52:         }
1:8e98d46:         LOGGER.info("removing persistence units for " + bundle.getSymbolicName() + " " + getType(event));
1:8e98d46:         for (PersistenceProviderTracker providerTracker : providerTrackers) {
1:8e98d46:             providerTracker.close();
1:8e98d46:         }
1:8e98d46:         providerTrackers.clear();
1:2cfdf52:     }
1:2cfdf52: 
1:fe66907:     private void findPersistenceUnits(Bundle bundle, BundleEvent event) {
1:2cfdf52:         for (PersistenceUnit punit : PersistenceUnitParser.getPersistenceUnits(bundle)) {
1:f2e057e:             punit.addAnnotated();
1:2cfdf52:             trackProvider(bundle, punit);
1:2cfdf52:         }
1:ec3ea65:         if (!getTrackers(bundle).isEmpty()) {
1:fe66907:             LOGGER.info("Persistence units added for bundle " + bundle.getSymbolicName() + " event " + getEventType(event));
1:fe66907:         }
1:fe66907:     }
1:fe66907: 
1:ec3ea65:     private static Integer getEventType(BundleEvent event) {
1:fe66907:         return (event != null) ? event.getType() : null;
1:2cfdf52:     }
1:2cfdf52: 
1:f2e057e:     private void trackProvider(Bundle bundle, PersistenceUnit punit) {
1:2cfdf52:         LOGGER.info(String.format("Found persistence unit %s in bundle %s with provider %s.",
1:2cfdf52:                                   punit.getPersistenceUnitName(), bundle.getSymbolicName(),
1:2cfdf52:                                   punit.getPersistenceProviderClassName()));
1:d669541:         PersistenceProviderTracker tracker = new PersistenceProviderTracker(bundle.getBundleContext(), punit);
1:2cfdf52:         tracker.open();
1:2cfdf52:         getTrackers(bundle).add(tracker);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void modifiedBundle(Bundle bundle, BundleEvent event, Bundle object) {
1:ec3ea65:         // Only interested in added or removed
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     private String getType(BundleEvent event) {
1:2cfdf52:         if (event == null) {
1:2cfdf52:             return "null";
1:2cfdf52:         }
1:2cfdf52:         int type = event.getType();
1:ec3ea65:         String typeSt = typeMap.get(type);
1:ec3ea65:         return (typeSt != null) ? typeSt : "unknown event type: " + type;
1:2cfdf52:     }
1:2cfdf52:     
1:2cfdf52:     private Collection<PersistenceProviderTracker> getTrackers(Bundle bundle) {
2:2cfdf52:         Collection<PersistenceProviderTracker> providerTrackers = trackers.get(bundle);
1:2cfdf52:         if (providerTrackers == null) {
1:e809e9c:             providerTrackers = new ArrayList<PersistenceProviderTracker>();
1:2cfdf52:             trackers.put(bundle, providerTrackers);
1:2cfdf52:         }
1:2cfdf52:         return providerTrackers;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:d669541
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public PersistenceBundleTracker() {
/////////////////////////////////////////////////////////////////////////
1:         PersistenceProviderTracker tracker = new PersistenceProviderTracker(bundle.getBundleContext(), punit);
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     private final Map<Bundle, Collection<PersistenceProviderTracker>> trackers;
0:     private final BundleContext context;
1:     private Map<Integer, String> typeMap;
1:         this.typeMap = new HashMap<Integer, String>();
1:         this.typeMap.put(BundleEvent.INSTALLED, "INSTALLED");
1:         this.typeMap.put(BundleEvent.LAZY_ACTIVATION, "LAZY_ACTIVATION");
1:         this.typeMap.put(BundleEvent.RESOLVED, "RESOLVED");
1:         this.typeMap.put(BundleEvent.STARTED, "STARTED");
1:         this.typeMap.put(BundleEvent.STARTING, "Starting");
1:         this.typeMap.put(BundleEvent.STOPPED, "STOPPED");
1:         this.typeMap.put(BundleEvent.UNINSTALLED, "UNINSTALLED");
1:         this.typeMap.put(256, "UNRESOLVED");
1:         this.typeMap.put(BundleEvent.UPDATED, "UPDATED");
1:     @Override
1:         if (getTrackers(bundle).isEmpty()) {
1:     @Override
1:         if (providerTrackers == null || providerTrackers.isEmpty()) {
/////////////////////////////////////////////////////////////////////////
1:         if (!getTrackers(bundle).isEmpty()) {
1:     private static Integer getEventType(BundleEvent event) {
/////////////////////////////////////////////////////////////////////////
1:         // Only interested in added or removed
1:     private String getType(BundleEvent event) {
1:         String typeSt = typeMap.get(type);
1:         return (typeSt != null) ? typeSt : "unknown event type: " + type;
commit:fe66907
/////////////////////////////////////////////////////////////////////////
1:         if (event != null && event.getType() == BundleEvent.STOPPED) {
1:             // Avoid starting persistence units in state STOPPED.
1:             // TODO No idea why we are called at all in this state
1:             return bundle;
1:         }
1:             findPersistenceUnits(bundle, event);
/////////////////////////////////////////////////////////////////////////
1:     private void findPersistenceUnits(Bundle bundle, BundleEvent event) {
0:         if (getTrackers(bundle).size() > 0) {
1:             LOGGER.info("Persistence units added for bundle " + bundle.getSymbolicName() + " event " + getEventType(event));
1:         }
1:     }
1: 
0:     private Integer getEventType(BundleEvent event) {
1:         return (event != null) ? event.getType() : null;
commit:e809e9c
/////////////////////////////////////////////////////////////////////////
1:             providerTrackers = new ArrayList<PersistenceProviderTracker>();
commit:f2e057e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         if (providerTrackers == null || providerTrackers.size() == 0) {
/////////////////////////////////////////////////////////////////////////
1:             punit.addAnnotated();
1:     private void trackProvider(Bundle bundle, PersistenceUnit punit) {
commit:8e98d46
/////////////////////////////////////////////////////////////////////////
1:     public synchronized Bundle addingBundle(Bundle bundle, BundleEvent event) {
1:     public synchronized void removedBundle(Bundle bundle, BundleEvent event, Bundle object) {
1:         Collection<PersistenceProviderTracker> providerTrackers = trackers.remove(bundle);
0:         if (providerTrackers == null || providerTrackers.size() > 0) {
1:             return;
1:         LOGGER.info("removing persistence units for " + bundle.getSymbolicName() + " " + getType(event));
1:         for (PersistenceProviderTracker providerTracker : providerTrackers) {
1:             providerTracker.close();
1:         }
1:         providerTrackers.clear();
commit:83d1ac1
/////////////////////////////////////////////////////////////////////////
0:         case 256: // Not sure why but this event is sent when a bundle is uninstalled
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.jpa.container.impl;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.jpa.container.parser.impl.PersistenceUnit;
1: import org.apache.aries.jpa.container.parser.impl.PersistenceUnitParser;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleEvent;
0: import org.osgi.framework.ServiceReference;
0: import org.osgi.service.packageadmin.PackageAdmin;
1: import org.osgi.util.tracker.BundleTrackerCustomizer;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Looks for bundles containing a persistence.xml. For each persistence unit
1:  * found a PersistenceProviderTracker is installed that tracks matching providers.
1:  */
0: @SuppressWarnings("deprecation")
1: public class PersistenceBundleTracker implements BundleTrackerCustomizer<Bundle> {
1:     private static final Logger LOGGER = LoggerFactory.getLogger(PersistenceBundleTracker.class);
0:     Map<Bundle, Collection<PersistenceProviderTracker>> trackers;
0:     private BundleContext context;
1: 
0:     public PersistenceBundleTracker(BundleContext context) {
0:         this.context = context;
1:         trackers = new HashMap<Bundle, Collection<PersistenceProviderTracker>>();
1:     }
1: 
0:     public Bundle addingBundle(Bundle bundle, BundleEvent event) {
0:         if (getTrackers(bundle).size() == 0) {
0:             findPersistenceUnits(bundle);
1:         }
1:         return bundle;
1:     }
1: 
0:     public void removedBundle(Bundle bundle, BundleEvent event, Bundle object) {
1:         Collection<PersistenceProviderTracker> providerTrackers = trackers.get(bundle);
0:         if (providerTrackers != null) {
0:             if (providerTrackers.size() > 0)  {
0:                 LOGGER.info("removing persistence units for " + bundle.getSymbolicName() + " " + getType(event));
1:             }
0:             for (PersistenceProviderTracker providerTracker : providerTrackers) {
0:                 providerTracker.close();
1:             }
0:             providerTrackers.clear();
0:             trackers.remove(bundle);
1:         }
1:     }
1: 
0:     private void findPersistenceUnits(Bundle bundle) {
0:         ServiceReference<PackageAdmin> ref = context.getServiceReference(PackageAdmin.class);
0:         PackageAdmin packageAdmin = context.getService(ref);
1:         for (PersistenceUnit punit : PersistenceUnitParser.getPersistenceUnits(bundle)) {
0:             punit.addAnnotated(packageAdmin);
1:             trackProvider(bundle, punit);
1:         }
0:         context.ungetService(ref);
1:     }
1: 
0:     private void trackProvider(Bundle bundle, 
0:                                PersistenceUnit punit) {
1:         LOGGER.info(String.format("Found persistence unit %s in bundle %s with provider %s.",
1:                                   punit.getPersistenceUnitName(), bundle.getSymbolicName(),
1:                                   punit.getPersistenceProviderClassName()));
0:         PersistenceProviderTracker tracker = new PersistenceProviderTracker(context, punit);
1:         tracker.open();
1:         getTrackers(bundle).add(tracker);
1:     }
1: 
1:     @Override
1:     public void modifiedBundle(Bundle bundle, BundleEvent event, Bundle object) {
1:     }
1: 
0:     private static String getType(BundleEvent event) {
1:         if (event == null) {
1:             return "null";
1:         }
1:         int type = event.getType();
0:         switch (type) {
0:         case BundleEvent.INSTALLED:
0:             return "INSTALLED";
0:         case BundleEvent.LAZY_ACTIVATION:
0:             return "LAZY_ACTIVATION";
0:         case BundleEvent.RESOLVED:
0:             return "RESOLVED";
0:         case BundleEvent.STARTED:
0:             return "STARTED";
0:         case BundleEvent.STARTING:
0:             return "Starting";
0:         case BundleEvent.STOPPED:
0:             return "STOPPED";
0:         case BundleEvent.UNINSTALLED:
0:             return "UNINSTALLED";
0:         case BundleEvent.UNRESOLVED:
0:             return "UNRESOLVED";
0:         case BundleEvent.UPDATED:
0:             return "UPDATED";
0:         default:
0:             return "unknown event type: " + type;
1:         }
1:     }
1:     
1:     private Collection<PersistenceProviderTracker> getTrackers(Bundle bundle) {
1:         Collection<PersistenceProviderTracker> providerTrackers = trackers.get(bundle);
1:         if (providerTrackers == null) {
0:             providerTrackers = new ArrayList<>();
1:             trackers.put(bundle, providerTrackers);
1:         }
1:         return providerTrackers;
1:     }
1: 
1: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:9fa765d
/////////////////////////////////////////////////////////////////////////
0:     private final BundleContext containerContext;
0:         this.containerContext = context;
/////////////////////////////////////////////////////////////////////////
0:         PersistenceProviderTracker tracker = new PersistenceProviderTracker(containerContext, punit);
============================================================================