1:01524e7: /*
1:01524e7:  * Licensed to the Apache Software Foundation (ASF) under one
1:01524e7:  * or more contributor license agreements.  See the NOTICE file
1:01524e7:  * distributed with this work for additional information
1:01524e7:  * regarding copyright ownership.  The ASF licenses this file
1:01524e7:  * to you under the Apache License, Version 2.0 (the
1:01524e7:  * "License"); you may not use this file except in compliance
1:01524e7:  * with the License.  You may obtain a copy of the License at
1:01524e7:  *
1:01524e7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:01524e7:  *
1:01524e7:  * Unless required by applicable law or agreed to in writing,
1:01524e7:  * software distributed under the License is distributed on an
1:01524e7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:01524e7:  * KIND, either express or implied.  See the License for the
1:01524e7:  * specific language governing permissions and limitations
1:01524e7:  * under the License.
1:01524e7:  */
1:01524e7: package org.apache.aries.blueprint.authorization.impl;
3:01524e7: 
1:01524e7: import java.lang.annotation.Annotation;
1:01524e7: import java.lang.reflect.Method;
1:01524e7: import java.security.AccessControlContext;
1:01524e7: import java.security.AccessControlException;
1:01524e7: import java.security.AccessController;
1:01524e7: import java.security.Principal;
1:01524e7: import java.util.Arrays;
1:01524e7: import java.util.HashSet;
1:01524e7: import java.util.Set;
1:01524e7: 
1:01524e7: import javax.annotation.security.PermitAll;
1:01524e7: import javax.annotation.security.RolesAllowed;
1:01524e7: import javax.security.auth.Subject;
1:01524e7: 
1:01524e7: import org.apache.aries.blueprint.Interceptor;
1:01524e7: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:01524e7: import org.slf4j.Logger;
1:01524e7: import org.slf4j.LoggerFactory;
1:01524e7: 
1:01524e7: public class AuthorizationInterceptor implements Interceptor {
1:01524e7:     private static final Logger LOGGER = LoggerFactory.getLogger(AuthorizationInterceptor.class);
1:ed14de6:     private Class<?> beanClass;
1:ed14de6: 
1:ed14de6:     public AuthorizationInterceptor(Class<?> beanClass) {
1:ed14de6:         this.beanClass = beanClass;
1:ed14de6:     }
1:01524e7: 
1:01524e7:     public int getRank() {
1:01524e7:         return 0;
2:01524e7:     }
1:01524e7: 
1:01524e7:     public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) {
1:01524e7:     }
1:01524e7: 
1:01524e7:     public void postCallWithReturn(ComponentMetadata cm, Method m, Object returnType, Object preCallToken)
1:01524e7:         throws Exception {
1:01524e7:     }
1:01524e7: 
1:01524e7:     public Object preCall(ComponentMetadata cm, Method m, Object... parameters) throws Throwable {
1:ed14de6:         Annotation ann = new SecurityAnotationParser().getEffectiveAnnotation(beanClass, m);
1:01524e7:         if (ann instanceof PermitAll) {
1:01524e7:             return null;
1:01524e7:         }
1:01524e7:         String[] rolesAr = new String[] {}; // Also applies for @DenyAll
1:01524e7:         if (ann instanceof RolesAllowed) {
1:01524e7:             rolesAr = ((RolesAllowed) ann).value();
1:01524e7:         } 
1:01524e7:         Set<String> roles = new HashSet<String>(Arrays.asList(rolesAr));
1:01524e7:         AccessControlContext acc = AccessController.getContext();
1:01524e7:         Subject subject = Subject.getSubject(acc);
1:01524e7:         if (subject == null) {
1:01524e7:             throw new AccessControlException("Method call " + m.getDeclaringClass() + "." + m.getName() + " denied. No JAAS login present");
1:01524e7:         }
1:01524e7:         Set<Principal> principals = subject.getPrincipals();
1:01524e7: 
1:01524e7:         for (Principal principal : principals) {
1:01524e7:             if (roles.contains(principal.getName())) {
1:86e60ab:                 LOGGER.debug("Granting access to Method: {} for {}.", m, principal);
1:01524e7:                 return null;
1:01524e7:             }
1:01524e7:         }
1:86e60ab:         String msg = String.format("Method call %s.%s denied. Roles allowed are %s. Your principals are %s.",
1:86e60ab:                                    m.getDeclaringClass(), m.getName(), roles, getNames(principals));
1:86e60ab:         throw new AccessControlException(msg);
1:01524e7:     }
1:01524e7: 
1:01524e7:     private String getNames(Set<Principal> principals) {
1:01524e7:         StringBuilder sb = new StringBuilder();
1:01524e7:         for (Principal principal : principals) {
1:01524e7:             sb.append(principal.getName() + " ");
1:01524e7:         }
1:01524e7:         return sb.toString();
1:01524e7:     }
1:01524e7: 
1:01524e7: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ed14de6
/////////////////////////////////////////////////////////////////////////
1:     private Class<?> beanClass;
1: 
1:     public AuthorizationInterceptor(Class<?> beanClass) {
1:         this.beanClass = beanClass;
1:     }
/////////////////////////////////////////////////////////////////////////
1:         Annotation ann = new SecurityAnotationParser().getEffectiveAnnotation(beanClass, m);
commit:86e60ab
/////////////////////////////////////////////////////////////////////////
1:                 LOGGER.debug("Granting access to Method: {} for {}.", m, principal);
1:         String msg = String.format("Method call %s.%s denied. Roles allowed are %s. Your principals are %s.",
1:                                    m.getDeclaringClass(), m.getName(), roles, getNames(principals));
1:         throw new AccessControlException(msg);
commit:01524e7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.authorization.impl;
1: 
1: import java.lang.annotation.Annotation;
1: import java.lang.reflect.Method;
1: import java.security.AccessControlContext;
1: import java.security.AccessControlException;
1: import java.security.AccessController;
1: import java.security.Principal;
1: import java.util.Arrays;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
1: import javax.annotation.security.PermitAll;
1: import javax.annotation.security.RolesAllowed;
1: import javax.security.auth.Subject;
1: 
1: import org.apache.aries.blueprint.Interceptor;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AuthorizationInterceptor implements Interceptor {
1:     private static final Logger LOGGER = LoggerFactory.getLogger(AuthorizationInterceptor.class);
1: 
1:     public int getRank() {
1:         return 0;
1:     }
1: 
1:     public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) {
1:     }
1: 
1:     public void postCallWithReturn(ComponentMetadata cm, Method m, Object returnType, Object preCallToken)
1:         throws Exception {
1:     }
1: 
1:     public Object preCall(ComponentMetadata cm, Method m, Object... parameters) throws Throwable {
0:         Annotation ann = new SecurityAnotationParser().getEffectiveAnnotation(m);
1:         if (ann instanceof PermitAll) {
1:             return null;
1:         }
1:         String[] rolesAr = new String[] {}; // Also applies for @DenyAll
1:         if (ann instanceof RolesAllowed) {
1:             rolesAr = ((RolesAllowed) ann).value();
1:         } 
1:         Set<String> roles = new HashSet<String>(Arrays.asList(rolesAr));
1:         AccessControlContext acc = AccessController.getContext();
1:         Subject subject = Subject.getSubject(acc);
1:         if (subject == null) {
1:             throw new AccessControlException("Method call " + m.getDeclaringClass() + "." + m.getName() + " denied. No JAAS login present");
1:         }
1:         Set<Principal> principals = subject.getPrincipals();
1: 
1: 
1:         for (Principal principal : principals) {
1:             if (roles.contains(principal.getName())) {
0:                 if (LOGGER.isDebugEnabled()) {
0:                     LOGGER.debug("Granting access to Method: " + m + " for " + principal);
1:                 }
1:                 return null;
1:             }
1:         }
1: 
0:         throw new AccessControlException("Method call " + m.getDeclaringClass() + "." + m.getName() + " denied. Roles allowed are " + roles + ". " 
0:                                          + "Your principals are " + getNames(principals) +".");
1:     }
1: 
1:     private String getNames(Set<Principal> principals) {
1:         StringBuilder sb = new StringBuilder();
1:         for (Principal principal : principals) {
1:             sb.append(principal.getName() + " ");
1:         }
1:         return sb.toString();
1:     }
1: 
1: }
============================================================================