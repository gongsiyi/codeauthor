1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.internal;
1:1129914: 
1:1129914: import java.net.URL;
1:1129914: import java.util.Collections;
1:1129914: import java.util.HashMap;
1:1129914: import java.util.Map;
1:1129914: 
1:71fe81a: import org.osgi.resource.Resource;
1:1129914: 
1:1c9c28b: public class OsgiContentCapability extends AbstractCapability {
1:1129914: 	private final Map<String, Object> attributes = new HashMap<String, Object>();
1:1129914: 	private final Resource resource;
1:1129914: 	
1:1129914: 	public OsgiContentCapability(Resource resource, String url) {
1:1129914: 		// TOOD Add to constants.
1:1129914: 		attributes.put("osgi.content", url);
1:1129914: 		// TODO Any directives?
1:1129914: 		this.resource = resource;
1:1129914: 	}
1:1129914: 	
1:1129914: 	public OsgiContentCapability(Resource resource, URL url) {
1:1129914: 		this(resource, url.toExternalForm());
1:1129914: 	}
1:1129914: 
1:1129914: 	public Map<String, Object> getAttributes() {
1:1129914: 		return Collections.unmodifiableMap(attributes);
1:1129914: 	}
1:1129914: 
1:1129914: 	public Map<String, String> getDirectives() {
1:1129914: 		return Collections.emptyMap();
1:1129914: 	}
1:1129914: 
1:1129914: 	public String getNamespace() {
1:1129914: 		// TODO Add to constants.
1:1129914: 		return "osgi.content";
1:1129914: 	}
1:1129914: 
1:1129914: 	public Resource getResource() {
1:1129914: 		return resource;
1:1129914: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Resource;
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.core.resource.AbstractCapability;
1: public class OsgiContentCapability extends AbstractCapability {
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.Capability;
0: import org.osgi.framework.resource.Resource;
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.net.URL;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.osgi.framework.wiring.Capability;
0: import org.osgi.framework.wiring.Resource;
1: 
0: public class OsgiContentCapability implements Capability {
1: 	private final Map<String, Object> attributes = new HashMap<String, Object>();
1: 	private final Resource resource;
1: 	
1: 	public OsgiContentCapability(Resource resource, String url) {
1: 		// TOOD Add to constants.
1: 		attributes.put("osgi.content", url);
1: 		// TODO Any directives?
1: 		this.resource = resource;
1: 	}
1: 	
1: 	public OsgiContentCapability(Resource resource, URL url) {
1: 		this(resource, url.toExternalForm());
1: 	}
1: 
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.unmodifiableMap(attributes);
1: 	}
1: 
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.emptyMap();
1: 	}
1: 
1: 	public String getNamespace() {
1: 		// TODO Add to constants.
1: 		return "osgi.content";
1: 	}
1: 
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================