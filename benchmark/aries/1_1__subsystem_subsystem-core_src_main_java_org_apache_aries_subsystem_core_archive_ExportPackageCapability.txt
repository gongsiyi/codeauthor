1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:7837a59: package org.apache.aries.subsystem.core.archive;
1:7837a59: 
1:7837a59: import java.util.Collection;
1:7837a59: import java.util.Collections;
1:7837a59: import java.util.HashMap;
1:7837a59: import java.util.Map;
1:7837a59: 
1:67ef08f: import org.apache.aries.subsystem.core.internal.AbstractCapability;
1:7837a59: import org.osgi.framework.namespace.PackageNamespace;
1:7837a59: import org.osgi.resource.Resource;
1:7837a59: 
1:7837a59: public class ExportPackageCapability extends AbstractCapability {
1:7837a59: 	public static final String NAMESPACE = PackageNamespace.PACKAGE_NAMESPACE;
1:7837a59: 	
1:7837a59: 	private final Map<String, Object> attributes = new HashMap<String, Object>();
1:7837a59: 	private final Map<String, String> directives = new HashMap<String, String>();
1:7837a59: 	private final Resource resource;
1:7837a59: 	
1:7837a59: 	public ExportPackageCapability(String packageName, Collection<Parameter> parameters, Resource resource) {
1:7837a59: 		attributes.put(NAMESPACE, packageName);
1:7837a59: 		for (Parameter parameter : parameters) {
1:7837a59: 			if (parameter instanceof Attribute)
1:7837a59: 				attributes.put(parameter.getName(), parameter.getValue());
1:7837a59: 			else
1:26123d8: 				directives.put(parameter.getName(), ((Directive)parameter).getValue());
1:7837a59: 		}
1:7837a59: 		this.resource = resource;
1:7837a59: 	}
1:7837a59: 
1:7837a59: 	@Override
1:7837a59: 	public Map<String, Object> getAttributes() {
1:7837a59: 		return Collections.unmodifiableMap(attributes);
1:7837a59: 	}
1:7837a59: 
1:7837a59: 	@Override
1:7837a59: 	public Map<String, String> getDirectives() {
1:7837a59: 		return Collections.unmodifiableMap(directives);
1:7837a59: 	}
1:7837a59: 
1:7837a59: 	@Override
1:7837a59: 	public String getNamespace() {
1:7837a59: 		return NAMESPACE;
1:7837a59: 	}
1:7837a59: 
1:7837a59: 	@Override
1:7837a59: 	public Resource getResource() {
1:7837a59: 		return resource;
1:7837a59: 	}
1:7837a59: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.AbstractCapability;
commit:26123d8
/////////////////////////////////////////////////////////////////////////
1: 				directives.put(parameter.getName(), ((Directive)parameter).getValue());
commit:7837a59
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.apache.aries.subsystem.core.resource.AbstractCapability;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.resource.Resource;
1: 
1: public class ExportPackageCapability extends AbstractCapability {
1: 	public static final String NAMESPACE = PackageNamespace.PACKAGE_NAMESPACE;
1: 	
1: 	private final Map<String, Object> attributes = new HashMap<String, Object>();
1: 	private final Map<String, String> directives = new HashMap<String, String>();
1: 	private final Resource resource;
1: 	
1: 	public ExportPackageCapability(String packageName, Collection<Parameter> parameters, Resource resource) {
1: 		attributes.put(NAMESPACE, packageName);
1: 		for (Parameter parameter : parameters) {
1: 			if (parameter instanceof Attribute)
1: 				attributes.put(parameter.getName(), parameter.getValue());
1: 			else
0: 				directives.put(parameter.getName(), parameter.getValue());
1: 		}
1: 		this.resource = resource;
1: 	}
1: 
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.unmodifiableMap(attributes);
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.unmodifiableMap(directives);
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
1: 		return NAMESPACE;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================