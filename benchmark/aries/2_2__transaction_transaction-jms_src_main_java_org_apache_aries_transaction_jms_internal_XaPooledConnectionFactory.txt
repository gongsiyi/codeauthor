2:4243a2b: /**
1:4243a2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4243a2b:  * contributor license agreements.  See the NOTICE file distributed with
1:4243a2b:  * this work for additional information regarding copyright ownership.
1:4243a2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4243a2b:  * (the "License"); you may not use this file except in compliance with
1:4243a2b:  * the License.  You may obtain a copy of the License at
2:4243a2b:  *
1:4243a2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4243a2b:  *
1:4243a2b:  * Unless required by applicable law or agreed to in writing, software
1:4243a2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4243a2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4243a2b:  * See the License for the specific language governing permissions and
1:4243a2b:  * limitations under the License.
2:4243a2b:  */
1:4243a2b: package org.apache.aries.transaction.jms.internal;
4:4243a2b: 
1:4c2ef4a: import java.io.Serializable;
1:4c2ef4a: import java.util.Hashtable;
1:4c2ef4a: 
1:4243a2b: import javax.jms.Connection;
1:4243a2b: import javax.jms.JMSException;
1:4c2ef4a: import javax.jms.QueueConnection;
1:4c2ef4a: import javax.jms.QueueConnectionFactory;
1:4c2ef4a: import javax.jms.TopicConnection;
1:4c2ef4a: import javax.jms.TopicConnectionFactory;
1:4c2ef4a: import javax.naming.Binding;
1:4c2ef4a: import javax.naming.Context;
1:4c2ef4a: import javax.naming.InitialContext;
1:4c2ef4a: import javax.naming.Name;
1:4c2ef4a: import javax.naming.NamingEnumeration;
1:4c2ef4a: import javax.naming.spi.ObjectFactory;
1:4243a2b: import javax.transaction.TransactionManager;
1:4243a2b: 
1:4243a2b: import org.apache.aries.transaction.jms.PooledConnectionFactory;
1:4c2ef4a: import org.slf4j.Logger;
1:4c2ef4a: import org.slf4j.LoggerFactory;
1:4243a2b: 
1:4243a2b: /**
1:4243a2b:  * A pooled connection factory that automatically enlists
1:4243a2b:  * sessions in the current active XA transaction if any.
1:4243a2b:  */
1:4c2ef4a: public class XaPooledConnectionFactory extends PooledConnectionFactory implements ObjectFactory,
1:4c2ef4a:         Serializable, QueueConnectionFactory, TopicConnectionFactory {
1:4243a2b: 
1:b42c2dd:     private static final long serialVersionUID = -6538152448204064932L;
1:4c2ef4a:     private static final transient Logger LOG = LoggerFactory.getLogger(XaPooledConnectionFactory.class);
1:4243a2b:     private TransactionManager transactionManager;
1:4c2ef4a:     private boolean tmFromJndi = false;
1:4c2ef4a:     private String tmJndiName = "java:/TransactionManager";
1:4243a2b: 
1:4243a2b:     public TransactionManager getTransactionManager() {
1:4c2ef4a:         if (transactionManager == null && tmFromJndi) {
1:4c2ef4a:             try {
1:4c2ef4a:                 transactionManager = (TransactionManager) new InitialContext().lookup(getTmJndiName());
1:4c2ef4a:             } catch (Throwable ignored) {
1:4c2ef4a:                 if (LOG.isTraceEnabled()) {
1:4c2ef4a:                     LOG.trace("exception on tmFromJndi: " + getTmJndiName(), ignored);
1:4c2ef4a:                 }
1:4c2ef4a:             }
1:4c2ef4a:         }
1:4243a2b:         return transactionManager;
6:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public void setTransactionManager(TransactionManager transactionManager) {
1:4243a2b:         this.transactionManager = transactionManager;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4c2ef4a:     protected ConnectionPool createConnectionPool(Connection connection) {
1:4c2ef4a:         return new XaConnectionPool(connection, getTransactionManager());
1:4243a2b:     }
1:4c2ef4a: 
1:4c2ef4a:     @Override
1:4c2ef4a:     public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
1:4c2ef4a:         setTmFromJndi(true);
1:4c2ef4a:         configFromJndiConf(obj);
1:4c2ef4a:         if (environment != null) {
1:4c2ef4a:             IntrospectionSupport.setProperties(this, environment);
1:4c2ef4a:         }
1:4c2ef4a:         return this;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     private void configFromJndiConf(Object rootContextName) {
1:4c2ef4a:         if (rootContextName instanceof String) {
1:4c2ef4a:             String name = (String) rootContextName;
1:4c2ef4a:             name = name.substring(0, name.lastIndexOf('/')) + "/conf" + name.substring(name.lastIndexOf('/'));
1:4c2ef4a:             try {
1:4c2ef4a:                 InitialContext ctx = new InitialContext();
1:b42c2dd:                 NamingEnumeration<Binding> bindings = ctx.listBindings(name);
1:4c2ef4a: 
1:4c2ef4a:                 while (bindings.hasMore()) {
1:b42c2dd:                     Binding bd = bindings.next();
1:4c2ef4a:                     IntrospectionSupport.setProperty(this, bd.getName(), bd.getObject());
1:4c2ef4a:                 }
1:4c2ef4a: 
1:4c2ef4a:             } catch (Exception ignored) {
1:4c2ef4a:                 if (LOG.isTraceEnabled()) {
1:4c2ef4a:                     LOG.trace("exception on config from jndi: " + name, ignored);
1:4c2ef4a:                 }
1:4c2ef4a:             }
1:4c2ef4a:         }
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     public String getTmJndiName() {
1:4c2ef4a:         return tmJndiName;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     public void setTmJndiName(String tmJndiName) {
1:4c2ef4a:         this.tmJndiName = tmJndiName;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     public boolean isTmFromJndi() {
1:4c2ef4a:         return tmFromJndi;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     /**
1:4c2ef4a:      * Allow transaction manager resolution from JNDI (ee deployment)
1:4c2ef4a:      * @param tmFromJndi
1:4c2ef4a:      */
1:4c2ef4a:     public void setTmFromJndi(boolean tmFromJndi) {
1:4c2ef4a:         this.tmFromJndi = tmFromJndi;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     @Override
1:4c2ef4a:     public QueueConnection createQueueConnection() throws JMSException {
1:4c2ef4a:         return (QueueConnection) createConnection();
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     @Override
1:4c2ef4a:     public QueueConnection createQueueConnection(String userName, String password) throws JMSException {
1:4c2ef4a:         return (QueueConnection) createConnection(userName, password);
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     @Override
1:4c2ef4a:     public TopicConnection createTopicConnection() throws JMSException {
1:4c2ef4a:         return (TopicConnection) createConnection();
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     @Override
1:4c2ef4a:     public TopicConnection createTopicConnection(String userName, String password) throws JMSException {
1:4c2ef4a:         return (TopicConnection) createConnection(userName, password);
1:4c2ef4a:     }
1:4c2ef4a: 
1:4243a2b: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:b42c2dd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final long serialVersionUID = -6538152448204064932L;
/////////////////////////////////////////////////////////////////////////
1:                 NamingEnumeration<Binding> bindings = ctx.listBindings(name);
1:                     Binding bd = bindings.next();
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:4c2ef4a
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: import java.util.Hashtable;
1: 
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueConnectionFactory;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicConnectionFactory;
1: import javax.naming.Binding;
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: import javax.naming.Name;
1: import javax.naming.NamingEnumeration;
1: import javax.naming.spi.ObjectFactory;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: public class XaPooledConnectionFactory extends PooledConnectionFactory implements ObjectFactory,
1:         Serializable, QueueConnectionFactory, TopicConnectionFactory {
1:     private static final transient Logger LOG = LoggerFactory.getLogger(XaPooledConnectionFactory.class);
1:     private boolean tmFromJndi = false;
1:     private String tmJndiName = "java:/TransactionManager";
1:         if (transactionManager == null && tmFromJndi) {
1:             try {
1:                 transactionManager = (TransactionManager) new InitialContext().lookup(getTmJndiName());
1:             } catch (Throwable ignored) {
1:                 if (LOG.isTraceEnabled()) {
1:                     LOG.trace("exception on tmFromJndi: " + getTmJndiName(), ignored);
1:                 }
1:             }
1:         }
1:     @Override
1:     protected ConnectionPool createConnectionPool(Connection connection) {
1:         return new XaConnectionPool(connection, getTransactionManager());
1: 
1:     @Override
1:     public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
1:         setTmFromJndi(true);
1:         configFromJndiConf(obj);
1:         if (environment != null) {
1:             IntrospectionSupport.setProperties(this, environment);
1:         }
1:         return this;
1:     }
1: 
1:     private void configFromJndiConf(Object rootContextName) {
1:         if (rootContextName instanceof String) {
1:             String name = (String) rootContextName;
1:             name = name.substring(0, name.lastIndexOf('/')) + "/conf" + name.substring(name.lastIndexOf('/'));
1:             try {
1:                 InitialContext ctx = new InitialContext();
0:                 NamingEnumeration bindings = ctx.listBindings(name);
1: 
1:                 while (bindings.hasMore()) {
0:                     Binding bd = (Binding)bindings.next();
1:                     IntrospectionSupport.setProperty(this, bd.getName(), bd.getObject());
1:                 }
1: 
1:             } catch (Exception ignored) {
1:                 if (LOG.isTraceEnabled()) {
1:                     LOG.trace("exception on config from jndi: " + name, ignored);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public String getTmJndiName() {
1:         return tmJndiName;
1:     }
1: 
1:     public void setTmJndiName(String tmJndiName) {
1:         this.tmJndiName = tmJndiName;
1:     }
1: 
1:     public boolean isTmFromJndi() {
1:         return tmFromJndi;
1:     }
1: 
1:     /**
1:      * Allow transaction manager resolution from JNDI (ee deployment)
1:      * @param tmFromJndi
1:      */
1:     public void setTmFromJndi(boolean tmFromJndi) {
1:         this.tmFromJndi = tmFromJndi;
1:     }
1: 
1:     @Override
1:     public QueueConnection createQueueConnection() throws JMSException {
1:         return (QueueConnection) createConnection();
1:     }
1: 
1:     @Override
1:     public QueueConnection createQueueConnection(String userName, String password) throws JMSException {
1:         return (QueueConnection) createConnection(userName, password);
1:     }
1: 
1:     @Override
1:     public TopicConnection createTopicConnection() throws JMSException {
1:         return (TopicConnection) createConnection();
1:     }
1: 
1:     @Override
1:     public TopicConnection createTopicConnection(String userName, String password) throws JMSException {
1:         return (TopicConnection) createConnection(userName, password);
1:     }
1: 
commit:4243a2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.transaction.jms.internal;
1: 
1: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
0: import javax.jms.XAConnection;
0: import javax.jms.XAConnectionFactory;
1: import javax.transaction.TransactionManager;
1: 
1: import org.apache.aries.transaction.jms.PooledConnectionFactory;
1: 
1: /**
1:  * A pooled connection factory that automatically enlists
1:  * sessions in the current active XA transaction if any.
1:  */
0: public class XaPooledConnectionFactory extends PooledConnectionFactory {
1: 
0:     private XAConnectionFactory xaConnectionFactory;
1:     private TransactionManager transactionManager;
1:     
0:     public XaPooledConnectionFactory() {
0:         super();
1:     }
1: 
0:     public XAConnectionFactory getXaConnectionFactory() {
0:         return xaConnectionFactory;
1:     }
1: 
0:     public void setXaConnectionFactory(XAConnectionFactory xaConnectionFactory) {
0:     	this.xaConnectionFactory = xaConnectionFactory;
0:         setConnectionFactory(new ConnectionFactory() {
0:             public Connection createConnection() throws JMSException {
0:                 return XaPooledConnectionFactory.this.xaConnectionFactory.createXAConnection();
1:             }
0:             public Connection createConnection(String userName, String password) throws JMSException {
0:                 return XaPooledConnectionFactory.this.xaConnectionFactory.createXAConnection(userName, password);
1:             }
0:         });
1:     }
1: 
1:     public TransactionManager getTransactionManager() {
1:         return transactionManager;
1:     }
1: 
1:     /**
0:      * The XA TransactionManager to use to enlist the JMS sessions into.
1:      *
0:      * @org.apache.xbean.Property required=true
1:      */
1:     public void setTransactionManager(TransactionManager transactionManager) {
1:         this.transactionManager = transactionManager;
1:     }
1: 
0:     protected ConnectionPool createConnectionPool(Connection connection) throws JMSException {
0:         return new XaConnectionPool((XAConnection) connection, getPoolFactory(), getTransactionManager());
1:     }
1: }
============================================================================