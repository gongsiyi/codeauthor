1:c1f1260: /**
1:c1f1260:  * Licensed to the Apache Software Foundation (ASF) under one
1:c1f1260:  * or more contributor license agreements.  See the NOTICE file
1:c1f1260:  * distributed with this work for additional information
1:c1f1260:  * regarding copyright ownership.  The ASF licenses this file
1:c1f1260:  * to you under the Apache License, Version 2.0 (the
1:c1f1260:  * "License"); you may not use this file except in compliance
1:c1f1260:  * with the License.  You may obtain a copy of the License at
1:c1f1260:  *
1:c1f1260:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c1f1260:  *
1:c1f1260:  * Unless required by applicable law or agreed to in writing,
1:c1f1260:  * software distributed under the License is distributed on an
1:c1f1260:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c1f1260:  * KIND, either express or implied.  See the License for the
1:c1f1260:  * specific language governing permissions and limitations
1:c1f1260:  * under the License.
1:c1f1260:  */
1:c1f1260: package org.apache.aries.spifly;
13:c1f1260: 
1:80528f5: import static org.junit.Assert.assertEquals;
1:80528f5: import static org.junit.Assert.assertNotNull;
1:b1578c3: import static org.junit.Assert.assertNull;
1:80528f5: import static org.junit.Assert.assertSame;
1:80528f5: 
1:c1f1260: import java.net.URL;
1:b1578c3: import java.net.URLClassLoader;
1:c1f1260: import java.util.Collection;
1:c1f1260: import java.util.Collections;
1:c1f1260: import java.util.Dictionary;
1:c1f1260: import java.util.Hashtable;
1:c1f1260: import java.util.List;
1:80528f5: 
1:c1f1260: import org.easymock.EasyMock;
1:c1f1260: import org.junit.Test;
1:c1f1260: import org.osgi.framework.Bundle;
1:c1f1260: import org.osgi.framework.BundleContext;
1:b1578c3: import org.osgi.framework.Constants;
1:c69c410: import org.osgi.framework.ServiceFactory;
1:c1f1260: import org.osgi.framework.ServiceRegistration;
1:80528f5: 
1:c1f1260: public class ProviderBundleTrackerCustomizerTest {
1:c1f1260:     @Test
1:80528f5:     public void testAddingRemovedBundle() throws Exception {
1:82e8b21:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:82e8b21:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:82e8b21:         EasyMock.replay(mediatorBundle);
1:b1578c3:         BaseActivator activator = new BaseActivator() {
1:a8ccbc9:             @Override
1:80528f5:             public void start(BundleContext context) throws Exception {}
1:80528f5:         };
1:80528f5: 
1:82e8b21:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
1:80528f5: 
1:a8ccbc9:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
1:c1f1260:         sreg.unregister();
1:c1f1260:         EasyMock.expectLastCall();
1:c1f1260:         EasyMock.replay(sreg);
1:c1f1260: 
1:b1578c3:         BundleContext implBC = mockSPIBundleContext(sreg);
1:b1578c3:         Bundle implBundle = mockSPIBundle(implBC);
1:b1578c3: 
1:b1578c3:         assertEquals("Precondition", 0, activator.findProviderBundles("org.apache.aries.mytest.MySPI").size());
1:b1578c3:         // Call addingBundle();
1:b1578c3:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:b1578c3:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:b1578c3:         assertEquals(1, bundles.size());
1:b1578c3:         assertSame(implBundle, bundles.iterator().next());
1:b1578c3: 
1:b1578c3:         // The bc.registerService() call should now have been made
1:b1578c3:         EasyMock.verify(implBC);
1:b1578c3: 
1:b1578c3:         // Call removedBundle();
1:b1578c3:         customizer.removedBundle(implBundle, null, registrations);
1:b1578c3:         // sreg.unregister() should have been called.
1:b1578c3:         EasyMock.verify(sreg);
1:b1578c3:     }
1:b1578c3: 
1:b1578c3:     @Test
1:b1578c3:     public void testAddingBundleSPIBundle() throws Exception {
1:b1578c3:         BundleContext implBC = mockSPIBundleContext(EasyMock.createNiceMock(ServiceRegistration.class));
1:b1578c3:         Bundle spiBundle = mockSPIBundle(implBC);
1:b1578c3: 
1:b1578c3:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(EasyMock.createNiceMock(BaseActivator.class), spiBundle);
1:b1578c3:         assertNull("The SpiFly bundle itself should be ignored", customizer.addingBundle(spiBundle, null));
1:b1578c3:     }
1:b1578c3: 
1:b1578c3:     @Test
1:b1578c3:     public void testAddingNonOptInBundle() throws Exception {
1:b1578c3:         BundleContext implBC = mockSPIBundleContext(EasyMock.createNiceMock(ServiceRegistration.class));
1:b1578c3:         Bundle implBundle = mockSPIBundle(implBC, null);
1:b1578c3: 
1:b1578c3:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(EasyMock.createNiceMock(BaseActivator.class), null);
1:b1578c3:         assertNull("Bundle doesn't opt-in so should be ignored", customizer.addingBundle(implBundle, null));
1:b1578c3:     }
1:b1578c3: 
1:b1578c3:     @Test
1:b1578c3:     @SuppressWarnings("unchecked")
1:b1578c3:     public void testAddingBundleWithBundleClassPath() throws Exception {
1:82e8b21:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:82e8b21:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:82e8b21:         EasyMock.replay(mediatorBundle);
1:b1578c3:         BaseActivator activator = new BaseActivator() {
1:b1578c3:             @Override
1:b1578c3:             public void start(BundleContext context) throws Exception {}
1:b1578c3:         };
1:b1578c3: 
1:82e8b21:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
1:b1578c3: 
1:b1578c3:         BundleContext implBC = EasyMock.createMock(BundleContext.class);
2:b1578c3:         EasyMock.<Object>expect(implBC.registerService(
2:b1578c3:                 EasyMock.eq("org.apache.aries.mytest.MySPI"),
1:c69c410:                 EasyMock.isA(ServiceFactory.class),
1:c69c410:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(EasyMock.createNiceMock(ServiceRegistration.class)).times(3);
1:b1578c3:         EasyMock.replay(implBC);
1:b1578c3: 
1:b1578c3: 
1:b1578c3:         Bundle implBundle = EasyMock.createNiceMock(Bundle.class);
1:b1578c3:         EasyMock.expect(implBundle.getBundleContext()).andReturn(implBC).anyTimes();
1:b1578c3: 
1:b1578c3:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:b1578c3:         headers.put(SpiFlyConstants.SPI_PROVIDER_HEADER, "*");
1:b1578c3:         headers.put(Constants.BUNDLE_CLASSPATH, ".,non-jar.jar,embedded.jar,embedded2.jar");
1:b1578c3:         EasyMock.expect(implBundle.getHeaders()).andReturn(headers).anyTimes();
1:b1578c3: 
1:b1578c3:         URL embeddedJar = getClass().getResource("/embedded.jar");
1:b1578c3:         assertNotNull("precondition", embeddedJar);
1:b1578c3:         EasyMock.expect(implBundle.getResource("embedded.jar")).andReturn(embeddedJar).anyTimes();
1:b1578c3:         URL embedded2Jar = getClass().getResource("/embedded2.jar");
1:b1578c3:         assertNotNull("precondition", embedded2Jar);
1:b1578c3:         EasyMock.expect(implBundle.getResource("embedded2.jar")).andReturn(embedded2Jar).anyTimes();
1:b1578c3:         URL dir = new URL("jar:" + embeddedJar + "!/META-INF/services");
1:b1578c3:         assertNotNull("precondition", dir);
1:b1578c3:         EasyMock.expect(implBundle.getResource("/META-INF/services")).andReturn(dir).anyTimes();
1:b1578c3:         EasyMock.expect(implBundle.findEntries((String) EasyMock.anyObject(), (String) EasyMock.anyObject(), EasyMock.anyBoolean())).
1:b1578c3:             andReturn(null).anyTimes();
1:b1578c3: 
1:b1578c3:         ClassLoader cl = new URLClassLoader(new URL [] {embeddedJar}, getClass().getClassLoader());
1:b1578c3:         Class<?> clsA = cl.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2a");
1:b1578c3:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2a")).andReturn(clsA).anyTimes();
1:b1578c3:         Class<?> clsB = cl.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2b");
1:b1578c3:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2b")).andReturn(clsB).anyTimes();
1:b1578c3:         ClassLoader cl2 = new URLClassLoader(new URL [] {embedded2Jar}, getClass().getClassLoader());
1:b1578c3:         Class<?> clsC = cl2.loadClass("org.apache.aries.spifly.impl3.MySPIImpl3");
1:b1578c3:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl3.MySPIImpl3")).andReturn(clsC).anyTimes();
1:b1578c3:         EasyMock.replay(implBundle);
1:b1578c3: 
1:b1578c3:         assertEquals("Precondition", 0, activator.findProviderBundles("org.apache.aries.mytest.MySPI").size());
1:b1578c3:         // Call addingBundle();
1:b1578c3:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:b1578c3:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:b1578c3:         assertEquals(1, bundles.size());
1:b1578c3:         assertSame(implBundle, bundles.iterator().next());
1:b1578c3: 
1:b1578c3:         // The bc.registerService() call should now have been made
1:b1578c3:         EasyMock.verify(implBC);
1:b1578c3:     }
1:b1578c3: 
1:b1578c3:     @SuppressWarnings("unchecked")
1:b1578c3:     private BundleContext mockSPIBundleContext(ServiceRegistration sreg) {
1:c1f1260:         BundleContext implBC = EasyMock.createMock(BundleContext.class);
1:b1578c3:         EasyMock.<Object>expect(implBC.registerService(
1:b1578c3:                 EasyMock.eq("org.apache.aries.mytest.MySPI"),
1:c69c410:                 EasyMock.isA(ServiceFactory.class),
1:c1f1260:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(sreg);
1:c1f1260:         EasyMock.replay(implBC);
1:b1578c3:         return implBC;
1:b1578c3:     }
1:80528f5: 
1:b1578c3:     private Bundle mockSPIBundle(BundleContext implBC) throws ClassNotFoundException {
1:b1578c3:         return mockSPIBundle(implBC, "*");
1:b1578c3:     }
1:b1578c3: 
1:b1578c3:     private Bundle mockSPIBundle(BundleContext implBC, String spiProviderHeader) throws ClassNotFoundException {
1:c1f1260:         Bundle implBundle = EasyMock.createNiceMock(Bundle.class);
1:b1578c3:         EasyMock.expect(implBundle.getBundleContext()).andReturn(implBC).anyTimes();
1:80528f5: 
1:c1f1260:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:b1578c3:         if (spiProviderHeader != null)
1:b1578c3:             headers.put(SpiFlyConstants.SPI_PROVIDER_HEADER, spiProviderHeader);
1:80528f5:         EasyMock.expect(implBundle.getHeaders()).andReturn(headers).anyTimes();
1:80528f5: 
1:c1f1260:         // List the resources found at META-INF/services in the test bundle
1:80528f5:         URL dir = getClass().getResource("impl1/META-INF/services");
1:80528f5:         assertNotNull("precondition", dir);
1:80528f5:         EasyMock.expect(implBundle.getResource("/META-INF/services")).andReturn(dir).anyTimes();
1:c1f1260:         URL res = getClass().getResource("impl1/META-INF/services/org.apache.aries.mytest.MySPI");
1:80528f5:         assertNotNull("precondition", res);
1:c1f1260:         EasyMock.expect(implBundle.findEntries("META-INF/services", "*", false)).andReturn(
1:80528f5:                 Collections.enumeration(Collections.singleton(res))).anyTimes();
1:c1f1260:         Class<?> cls = getClass().getClassLoader().loadClass("org.apache.aries.spifly.impl1.MySPIImpl1");
1:b1578c3:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl1.MySPIImpl1")).andReturn(cls).anyTimes();
1:c1f1260:         EasyMock.replay(implBundle);
1:b1578c3:         return implBundle;
1:c1f1260:     }
1:c1f1260: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:e9a5257
/////////////////////////////////////////////////////////////////////////
commit:c69c410
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.ServiceFactory;
/////////////////////////////////////////////////////////////////////////
1:                 EasyMock.isA(ServiceFactory.class),
1:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(EasyMock.createNiceMock(ServiceRegistration.class)).times(3);
/////////////////////////////////////////////////////////////////////////
1:                 EasyMock.isA(ServiceFactory.class),
commit:82e8b21
/////////////////////////////////////////////////////////////////////////
1:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:         EasyMock.replay(mediatorBundle);
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
/////////////////////////////////////////////////////////////////////////
1:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:         EasyMock.replay(mediatorBundle);
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
commit:b1578c3
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNull;
1: import java.net.URLClassLoader;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.spifly.impl2.MySPIImpl2a;
0: import org.apache.aries.spifly.impl2.MySPIImpl2b;
0: import org.apache.aries.spifly.impl3.MySPIImpl3;
1: import org.osgi.framework.Constants;
1:         BaseActivator activator = new BaseActivator() {
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, spiBundle);
1:         BundleContext implBC = mockSPIBundleContext(sreg);
1:         Bundle implBundle = mockSPIBundle(implBC);
1: 
1:         assertEquals("Precondition", 0, activator.findProviderBundles("org.apache.aries.mytest.MySPI").size());
1:         // Call addingBundle();
1:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:         assertEquals(1, bundles.size());
1:         assertSame(implBundle, bundles.iterator().next());
1: 
1:         // The bc.registerService() call should now have been made
1:         EasyMock.verify(implBC);
1: 
1:         // Call removedBundle();
1:         customizer.removedBundle(implBundle, null, registrations);
1:         // sreg.unregister() should have been called.
1:         EasyMock.verify(sreg);
1:     }
1: 
1:     @Test
1:     public void testAddingBundleSPIBundle() throws Exception {
1:         BundleContext implBC = mockSPIBundleContext(EasyMock.createNiceMock(ServiceRegistration.class));
1:         Bundle spiBundle = mockSPIBundle(implBC);
1: 
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(EasyMock.createNiceMock(BaseActivator.class), spiBundle);
1:         assertNull("The SpiFly bundle itself should be ignored", customizer.addingBundle(spiBundle, null));
1:     }
1: 
1:     @Test
1:     public void testAddingNonOptInBundle() throws Exception {
1:         BundleContext implBC = mockSPIBundleContext(EasyMock.createNiceMock(ServiceRegistration.class));
1:         Bundle implBundle = mockSPIBundle(implBC, null);
1: 
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(EasyMock.createNiceMock(BaseActivator.class), null);
1:         assertNull("Bundle doesn't opt-in so should be ignored", customizer.addingBundle(implBundle, null));
1:     }
1: 
1:     @Test
1:     @SuppressWarnings("unchecked")
1:     public void testAddingBundleWithBundleClassPath() throws Exception {
0:         Bundle spiBundle = EasyMock.createMock(Bundle.class);
0:         EasyMock.replay(spiBundle);
1:         BaseActivator activator = new BaseActivator() {
1:             @Override
1:             public void start(BundleContext context) throws Exception {}
1:         };
1: 
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, spiBundle);
1: 
1:         BundleContext implBC = EasyMock.createMock(BundleContext.class);
1:         EasyMock.<Object>expect(implBC.registerService(
1:                 EasyMock.eq("org.apache.aries.mytest.MySPI"),
0:                 EasyMock.isA(MySPIImpl2a.class),
0:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(EasyMock.createNiceMock(ServiceRegistration.class));
1:         EasyMock.<Object>expect(implBC.registerService(
1:                 EasyMock.eq("org.apache.aries.mytest.MySPI"),
0:                 EasyMock.isA(MySPIImpl2b.class),
0:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(EasyMock.createNiceMock(ServiceRegistration.class));
1:         EasyMock.<Object>expect(implBC.registerService(
1:                 EasyMock.eq("org.apache.aries.mytest.MySPI"),
0:                 EasyMock.isA(MySPIImpl3.class),
0:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(EasyMock.createNiceMock(ServiceRegistration.class));
1:         EasyMock.replay(implBC);
1: 
1: 
1:         Bundle implBundle = EasyMock.createNiceMock(Bundle.class);
1:         EasyMock.expect(implBundle.getBundleContext()).andReturn(implBC).anyTimes();
1: 
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:         headers.put(SpiFlyConstants.SPI_PROVIDER_HEADER, "*");
1:         headers.put(Constants.BUNDLE_CLASSPATH, ".,non-jar.jar,embedded.jar,embedded2.jar");
1:         EasyMock.expect(implBundle.getHeaders()).andReturn(headers).anyTimes();
1: 
1:         URL embeddedJar = getClass().getResource("/embedded.jar");
1:         assertNotNull("precondition", embeddedJar);
1:         EasyMock.expect(implBundle.getResource("embedded.jar")).andReturn(embeddedJar).anyTimes();
1:         URL embedded2Jar = getClass().getResource("/embedded2.jar");
1:         assertNotNull("precondition", embedded2Jar);
1:         EasyMock.expect(implBundle.getResource("embedded2.jar")).andReturn(embedded2Jar).anyTimes();
1:         URL dir = new URL("jar:" + embeddedJar + "!/META-INF/services");
1:         assertNotNull("precondition", dir);
1:         EasyMock.expect(implBundle.getResource("/META-INF/services")).andReturn(dir).anyTimes();
1:         EasyMock.expect(implBundle.findEntries((String) EasyMock.anyObject(), (String) EasyMock.anyObject(), EasyMock.anyBoolean())).
1:             andReturn(null).anyTimes();
1: 
1:         ClassLoader cl = new URLClassLoader(new URL [] {embeddedJar}, getClass().getClassLoader());
1:         Class<?> clsA = cl.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2a");
1:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2a")).andReturn(clsA).anyTimes();
1:         Class<?> clsB = cl.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2b");
1:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2b")).andReturn(clsB).anyTimes();
1:         ClassLoader cl2 = new URLClassLoader(new URL [] {embedded2Jar}, getClass().getClassLoader());
1:         Class<?> clsC = cl2.loadClass("org.apache.aries.spifly.impl3.MySPIImpl3");
1:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl3.MySPIImpl3")).andReturn(clsC).anyTimes();
1:         EasyMock.replay(implBundle);
1: 
1:         assertEquals("Precondition", 0, activator.findProviderBundles("org.apache.aries.mytest.MySPI").size());
1:         // Call addingBundle();
1:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:         assertEquals(1, bundles.size());
1:         assertSame(implBundle, bundles.iterator().next());
1: 
1:         // The bc.registerService() call should now have been made
1:         EasyMock.verify(implBC);
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     private BundleContext mockSPIBundleContext(ServiceRegistration sreg) {
1:         return implBC;
1:     }
1:     private Bundle mockSPIBundle(BundleContext implBC) throws ClassNotFoundException {
1:         return mockSPIBundle(implBC, "*");
1:     }
1: 
1:     private Bundle mockSPIBundle(BundleContext implBC, String spiProviderHeader) throws ClassNotFoundException {
1:         EasyMock.expect(implBundle.getBundleContext()).andReturn(implBC).anyTimes();
1:         if (spiProviderHeader != null)
1:             headers.put(SpiFlyConstants.SPI_PROVIDER_HEADER, spiProviderHeader);
/////////////////////////////////////////////////////////////////////////
1:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl1.MySPIImpl1")).andReturn(cls).anyTimes();
1:         return implBundle;
commit:80528f5
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertSame;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testAddingRemovedBundle() throws Exception {
1:             public void start(BundleContext context) throws Exception {}
1:         };
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:                 EasyMock.eq("org.apache.aries.mytest.MySPI"),
0:                 EasyMock.isA(MySPIImpl1.class),
1: 
1:         EasyMock.expect(implBundle.getHeaders()).andReturn(headers).anyTimes();
1: 
1:         URL dir = getClass().getResource("impl1/META-INF/services");
1:         assertNotNull("precondition", dir);
1:         EasyMock.expect(implBundle.getResource("/META-INF/services")).andReturn(dir).anyTimes();
1:         assertNotNull("precondition", res);
1:                 Collections.enumeration(Collections.singleton(res))).anyTimes();
0:         EasyMock.<Object> expect(implBundle.loadClass("org.apache.aries.spifly.impl1.MySPIImpl1")).andReturn(cls).anyTimes();
1: 
0:         assertEquals("Precondition", 0, a.findProviderBundles("org.apache.aries.mytest.MySPI").size());
0:         assertEquals(1, bundles.size());
0:         assertSame(implBundle, bundles.iterator().next());
1: 
1: 
commit:3f2be6b
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
0:     @Ignore("Need to fix, this is WIP")
commit:a8ccbc9
/////////////////////////////////////////////////////////////////////////
0:         BaseActivator a = new BaseActivator() {
1:             @Override
0:             public void start(BundleContext context) throws Exception {}            
0:         };        
1:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
/////////////////////////////////////////////////////////////////////////
0:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
commit:b1379cb
/////////////////////////////////////////////////////////////////////////
0:         BaseActivator a = new BaseActivator();        
commit:4376217
/////////////////////////////////////////////////////////////////////////
0:         headers.put(SpiFlyConstants.SPI_PROVIDER_HEADER, "*");
commit:c1f1260
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly;
1: 
1: import java.net.URL;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: import java.util.List;
1: 
0: import org.apache.aries.spifly.api.SpiFlyConstants;
0: import org.apache.aries.spifly.impl1.MySPIImpl1;
1: import org.easymock.EasyMock;
0: import org.junit.Assert;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceRegistration;
1: 
1: public class ProviderBundleTrackerCustomizerTest {
1:     @Test
0:     @SuppressWarnings("unchecked")
0:     public void testAddingRemovedBundle() throws Exception {        
0:         Bundle spiBundle = EasyMock.createMock(Bundle.class);
0:         EasyMock.replay(spiBundle);
0:         Activator a = new Activator();        
1:         
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(a, spiBundle);
1:         
0:         ServiceRegistration<Object> sreg = EasyMock.createMock(ServiceRegistration.class);
1:         sreg.unregister();
1:         EasyMock.expectLastCall();
1:         EasyMock.replay(sreg);
1: 
0:         // The bundle context for the test SPI bundle
1:         BundleContext implBC = EasyMock.createMock(BundleContext.class);
0:         EasyMock.<Object>expect(implBC.registerService(
0:                 EasyMock.eq("org.apache.aries.mytest.MySPI"), 
0:                 EasyMock.isA(MySPIImpl1.class), 
1:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(sreg);
1:         EasyMock.replay(implBC);
1: 
0:         // The test impl bundle
1:         Bundle implBundle = EasyMock.createNiceMock(Bundle.class);
0:         EasyMock.expect(implBundle.getBundleContext()).andReturn(implBC);
1:         
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
0:         // Specify the headers for the test bundle
0:         headers.put(SpiFlyConstants.SPI_PROVIDER_HEADER, "true");
0:         EasyMock.expect(implBundle.getHeaders()).andReturn(headers);
1:         
1:         // List the resources found at META-INF/services in the test bundle
1:         URL res = getClass().getResource("impl1/META-INF/services/org.apache.aries.mytest.MySPI");
0:         Assert.assertNotNull("precondition", res);
1:         EasyMock.expect(implBundle.findEntries("META-INF/services", "*", false)).andReturn(
0:                 Collections.enumeration(Collections.singleton(res)));
1:         
1:         Class<?> cls = getClass().getClassLoader().loadClass("org.apache.aries.spifly.impl1.MySPIImpl1");
0:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl1.MySPIImpl1")).andReturn(cls);
1:         
1:         EasyMock.replay(implBundle);
1:         
0:         Assert.assertEquals("Precondition", 0, a.findProviderBundles("org.apache.aries.mytest.MySPI").size());
0:         // Call addingBundle();
0:         List<ServiceRegistration<?>> registrations = customizer.addingBundle(implBundle, null);
0:         Collection<Bundle> bundles = a.findProviderBundles("org.apache.aries.mytest.MySPI");
0:         Assert.assertEquals(1, bundles.size());
0:         Assert.assertSame(implBundle, bundles.iterator().next());
1:         
0:         // The bc.registerService() call should now have been made
0:         EasyMock.verify(implBC);
1:         
0:         // Call removedBundle();
0:         customizer.removedBundle(implBundle, null, registrations);
0:         // sreg.unregister() should have been called.
0:         EasyMock.verify(sreg);
1:     }
1: }
============================================================================