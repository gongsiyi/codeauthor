1:5c15102: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:5c15102:  *  contributor license agreements.  See the NOTICE file distributed with
1:5c15102:  *  this work for additional information regarding copyright ownership.
1:5c15102:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:5c15102:  *  (the "License"); you may not use this file except in compliance with
1:5c15102:  *  the License.  You may obtain a copy of the License at
1:5c15102:  *
1:5c15102:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5c15102:  *
1:5c15102:  *  Unless required by applicable law or agreed to in writing, software
1:5c15102:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:5c15102:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5c15102:  *  See the License for the specific language governing permissions and
1:5c15102:  *  limitations under the License.
1:5c15102:  */
1:5c15102: package org.apache.aries.transaction.itests;
25:5c15102: 
1:70e39b6: import static junit.framework.Assert.assertEquals;
1:5c15102: 
1:5c15102: import java.sql.SQLException;
1:5c15102: 
1:febc5c2: import javax.inject.Inject;
1:5c15102: 
1:5c15102: import org.apache.aries.transaction.test.TestBean;
1:5c15102: import org.junit.Test;
1:febc5c2: import org.ops4j.pax.exam.util.Filter;
1:febc5c2: 
1:bd98451: public class RequiresNewTest extends AbstractIntegrationTest {
1:70e39b6:     @Inject
1:70e39b6:     @Filter("(tranAttribute=RequiresNew)")
1:febc5c2:     TestBean rnBean;
1:70e39b6: 
1:70e39b6:     @Inject
1:70e39b6:     @Filter("(tranAttribute=Required)")
1:febc5c2:     TestBean rBean;
1:febc5c2: 
1:70e39b6:     /**
1:70e39b6:      * Test with client transaction - a container transaction is used to insert the row,
1:70e39b6:      * user transaction roll back has no influence
1:70e39b6:      * @throws Exception
1:70e39b6:      */
1:70e39b6:     @Test
1:70e39b6:     public void testClientTransactionRollback() throws Exception {
1:bd98451:         int initialRows = counter.countRows();
1:70e39b6:         tran.begin();
1:bd98451:         rnBean.insertRow("testWithClientTran", 1, null);
1:70e39b6:         tran.rollback();
1:bd98451:         int finalRows = counter.countRows();
1:70e39b6:         assertEquals("Added rows", 1, finalRows - initialRows);
1:70e39b6:     }
1:febc5c2:     
1:70e39b6:     /**
1:70e39b6:      * Test with client transaction and application exception - the container transaction is committed,
1:70e39b6:      * the user transaction is not affected.
1:70e39b6:      * @throws Exception
1:70e39b6:      */
1:70e39b6:     @Test
1:70e39b6:     public void testClientTransactionAndApplicationException() throws Exception {
1:bd98451:         int initialRows = counter.countRows();
1:70e39b6:         tran.begin();
1:bd98451:         rBean.insertRow("testWithClientTranAndWithAppException", 1, null);
1:70e39b6:         try {
1:70e39b6:             rnBean.insertRow("testWithClientTranAndWithAppException", 2, new SQLException("Dummy exception"));
1:70e39b6:         } catch (SQLException e) {
1:70e39b6:             // Ignore expected
1:70e39b6:         }
1:70e39b6:         tran.commit();
1:bd98451:         int finalRows = counter.countRows();
1:70e39b6:         assertEquals("Added rows", 2, finalRows - initialRows);
1:70e39b6: 
1:70e39b6:     }
1:70e39b6: 
1:70e39b6:     /**
1:70e39b6:      * Test with client transaction and runtime exception - the container transaction is rolled back,
1:70e39b6:      * the user transaction is not affected
1:70e39b6:      * @throws Exception
1:70e39b6:      */
1:70e39b6:     @Test
1:70e39b6:     public void testClientTransactionAndRuntimeException() throws Exception {
1:bd98451:         int initialRows = counter.countRows();
1:70e39b6:         tran.begin();
1:bd98451:         rBean.insertRow("testWithClientTranAndWithRuntimeException", 1, null);
1:70e39b6:         try {
1:70e39b6:             rnBean.insertRow("testWithClientTranAndWithRuntimeException", 2, new RuntimeException("Dummy exception"));
1:70e39b6:         } catch (RuntimeException e) {
1:70e39b6:          // Ignore expected
1:70e39b6:         }
1:70e39b6:         tran.commit();
1:bd98451:         int finalRows = counter.countRows();
1:70e39b6:         assertEquals("Added rows", 1, finalRows - initialRows);
1:70e39b6:     }
1:70e39b6:     
1:70e39b6:     /**
1:70e39b6:      * Test without client transaction - a container transaction is used to insert the row
1:70e39b6:      * @throws Exception
1:70e39b6:      */
1:70e39b6:     //@Test
1:70e39b6:     public void testNoClientTransaction() throws Exception {
1:70e39b6:         clientTransaction = false;
1:70e39b6:         assertInsertSuccesful();
1:70e39b6:         testClientTransactionAndApplicationException();
1:70e39b6:         testClientTransactionAndRuntimeException();
1:70e39b6:     }
1:70e39b6: 
1:70e39b6:     @Override
1:70e39b6:     protected TestBean getBean() {
1:70e39b6:         return rnBean;
1:70e39b6:     }
6:5c15102: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:bd98451
/////////////////////////////////////////////////////////////////////////
1: public class RequiresNewTest extends AbstractIntegrationTest {
/////////////////////////////////////////////////////////////////////////
1:         int initialRows = counter.countRows();
1:         rnBean.insertRow("testWithClientTran", 1, null);
1:         int finalRows = counter.countRows();
/////////////////////////////////////////////////////////////////////////
1:         int initialRows = counter.countRows();
1:         rBean.insertRow("testWithClientTranAndWithAppException", 1, null);
1:         int finalRows = counter.countRows();
/////////////////////////////////////////////////////////////////////////
1:         int initialRows = counter.countRows();
1:         rBean.insertRow("testWithClientTranAndWithRuntimeException", 1, null);
1:         int finalRows = counter.countRows();
commit:70e39b6
/////////////////////////////////////////////////////////////////////////
1: import static junit.framework.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1:     @Inject
1:     @Filter("(tranAttribute=RequiresNew)")
1: 
1:     @Inject
1:     @Filter("(tranAttribute=Required)")
1:     /**
1:      * Test with client transaction - a container transaction is used to insert the row,
1:      * user transaction roll back has no influence
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testClientTransactionRollback() throws Exception {
0:         int initialRows = rnBean.countRows();
1:         tran.begin();
0:         rnBean.insertRow("testWithClientTran", 1);
1:         tran.rollback();
0:         int finalRows = rnBean.countRows();
1:         assertEquals("Added rows", 1, finalRows - initialRows);
1:     }
1:     /**
1:      * Test with client transaction and application exception - the container transaction is committed,
1:      * the user transaction is not affected.
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testClientTransactionAndApplicationException() throws Exception {
0:         int initialRows = rnBean.countRows();
1:         tran.begin();
0:         rBean.insertRow("testWithClientTranAndWithAppException", 1);
1:         try {
1:             rnBean.insertRow("testWithClientTranAndWithAppException", 2, new SQLException("Dummy exception"));
1:         } catch (SQLException e) {
1:             // Ignore expected
1:         }
1:         tran.commit();
0:         int finalRows = rnBean.countRows();
1:         assertEquals("Added rows", 2, finalRows - initialRows);
1: 
1:     }
1: 
1:     /**
1:      * Test with client transaction and runtime exception - the container transaction is rolled back,
1:      * the user transaction is not affected
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testClientTransactionAndRuntimeException() throws Exception {
0:         int initialRows = rnBean.countRows();
1:         tran.begin();
0:         rBean.insertRow("testWithClientTranAndWithRuntimeException", 1);
1:         try {
1:             rnBean.insertRow("testWithClientTranAndWithRuntimeException", 2, new RuntimeException("Dummy exception"));
1:         } catch (RuntimeException e) {
1:          // Ignore expected
1:         }
1:         tran.commit();
0:         int finalRows = rnBean.countRows();
1:         assertEquals("Added rows", 1, finalRows - initialRows);
1:     }
1:     
1:     /**
1:      * Test without client transaction - a container transaction is used to insert the row
1:      * @throws Exception
1:      */
1:     //@Test
1:     public void testNoClientTransaction() throws Exception {
1:         clientTransaction = false;
1:         assertInsertSuccesful();
1:         testClientTransactionAndApplicationException();
1:         testClientTransactionAndRuntimeException();
1:     }
1: 
1:     @Override
1:     protected TestBean getBean() {
1:         return rnBean;
1:     }
commit:febc5c2
/////////////////////////////////////////////////////////////////////////
1: import javax.inject.Inject;
1: import org.ops4j.pax.exam.util.Filter;
0:     @Inject @Filter("(tranAttribute=RequiresNew)") 
1:     TestBean rnBean;
1:     
0:     @Inject @Filter("(tranAttribute=Required)") 
1:     TestBean rBean;
1: 
1:     
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0:       TestBean rnBean = context().getService(TestBean.class, "(tranAttribute=RequiresNew)");
0:       TestBean rBean = context().getService(TestBean.class, "(tranAttribute=Required)");
0:       UserTransaction tran = context().getService(UserTransaction.class);
commit:5c15102
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.transaction.itests;
1: 
0: import static org.junit.Assert.assertTrue;
1: 
1: import java.sql.SQLException;
1: 
0: import javax.transaction.UserTransaction;
1: 
1: import org.apache.aries.transaction.test.TestBean;
1: import org.junit.Test;
1: 
0: public class RequiresNewTranStrategyTest extends AbstractIntegrationTest {
1:   
0:   @Test
0:   public void testRequiresNew() throws Exception {
0:       TestBean rnBean = getOsgiService(TestBean.class, "(tranStrategy=RequiresNew)", DEFAULT_TIMEOUT);
0:       TestBean rBean = getOsgiService(TestBean.class, "(tranStrategy=Required)", DEFAULT_TIMEOUT);
0:       UserTransaction tran = getOsgiService(UserTransaction.class);
1:       
0:       //Test with client transaction - a container transaction is used to insert the row
0:       int initialRows = rnBean.countRows();
1:       
0:       tran.begin();
0:       rnBean.insertRow("testWithClientTran", 1);
0:       tran.rollback();
1:       
0:       int finalRows = rnBean.countRows();
0:       assertTrue("Initial rows: " + initialRows + ", Final rows: " + finalRows, finalRows - initialRows == 1);
1:       
0:       //Test with client transaction and application exception - the container transaction is committed,
0:       //the user transaction is not affected.
0:       initialRows = rnBean.countRows();
1:       
0:       tran.begin();
0:       rBean.insertRow("testWithClientTranAndWithAppException", 1);
1:       
0:       try {
0:           rnBean.insertRow("testWithClientTranAndWithAppException", 2, new SQLException("Dummy exception"));
0:       } catch (SQLException e) {
0:           e.printStackTrace();
1:       }
1:       
0:       tran.commit();
1:       
0:       finalRows = rnBean.countRows();
0:       assertTrue("Initial rows: " + initialRows + ", Final rows: " + finalRows, finalRows - initialRows == 2);
1:       
0:       //Test with client transaction and runtime exception - the container transaction is rolled back,
0:       //the user transaction is not affected
0:       initialRows = rnBean.countRows();
1:       
0:       tran.begin();
0:       rBean.insertRow("testWithClientTranAndWithRuntimeException", 1);
1:       
0:       try {
0:           rnBean.insertRow("testWithClientTranAndWithRuntimeException", 2, new RuntimeException("Dummy exception"));
0:       } catch (RuntimeException e) {
0:           e.printStackTrace();
1:       }
1:       
0:       tran.commit();
1:       
0:       finalRows = rnBean.countRows();
0:       assertTrue("Initial rows: " + initialRows + ", Final rows: " + finalRows, finalRows - initialRows == 1);
1:       
0:       //Test without client transaction - a container transaction is used to insert the row
0:       initialRows = rnBean.countRows();
1:       
0:       rnBean.insertRow("testWithoutClientTran", 1);
1:       
0:       finalRows = rnBean.countRows();
0:       assertTrue("Initial rows: " + initialRows + ", Final rows: " + finalRows, finalRows - initialRows == 1);
1:       
0:       //Test without client transaction and with application exception - the container transaction is committed
0:       initialRows = rnBean.countRows();
1:       
0:       try {
0:           rnBean.insertRow("testWithoutClientTranAndWithAppException", 1, new SQLException("Dummy exception"));
0:       } catch (Exception e) {
0:           e.printStackTrace();
1:       }
1:       
0:       finalRows = rnBean.countRows();
0:       assertTrue("Initial rows: " + initialRows + ", Final rows: " + finalRows, finalRows - initialRows == 1);
1:       
0:       //Test without client transaction and with runtime exception - the container transaction is rolled back
0:       initialRows = rnBean.countRows();
1:       
0:       try {
0:           rnBean.insertRow("testWithoutClientTranAndWithRuntimeException", 1, new RuntimeException("Dummy exception"));
0:       } catch (Exception e) {
0:           e.printStackTrace();
1:       }
1:       
0:       finalRows = rnBean.countRows();
0:       assertTrue("Initial rows: " + initialRows + ", Final rows: " + finalRows, finalRows - initialRows == 0);
1:   }
1: }
author:Lin Sun
-------------------------------------------------------------------------------
commit:bb00f0a
/////////////////////////////////////////////////////////////////////////
0: public class RequiresNewTranAttributeTest extends AbstractIntegrationTest {
0:       TestBean rnBean = getOsgiService(TestBean.class, "(tranAttribute=RequiresNew)", DEFAULT_TIMEOUT);
0:       TestBean rBean = getOsgiService(TestBean.class, "(tranAttribute=Required)", DEFAULT_TIMEOUT);
============================================================================