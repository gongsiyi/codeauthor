1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx;
24:fdf3952: 
1:fdf3952: import static org.mockito.Mockito.doReturn;
1:fdf3952: import static org.mockito.Mockito.mock;
1:fdf3952: import static org.mockito.Mockito.spy;
1:fdf3952: import static org.mockito.Mockito.verify;
1:fdf3952: import static org.mockito.Mockito.when;
1:fdf3952: 
1:fdf3952: import java.util.concurrent.ExecutorService;
1:fdf3952: import java.util.concurrent.Executors;
1:fdf3952: import java.util.concurrent.TimeUnit;
1:fdf3952: 
1:fdf3952: import javax.management.StandardMBean;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.agent.JMXAgentContext;
1:fdf3952: import org.junit.After;
1:fdf3952: import org.junit.Test;
1:7186eab: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:7186eab: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.Filter;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: 
1:fdf3952: public class CompendiumHandlerTest {
1:fdf3952: 
1:fdf3952:     protected AbstractCompendiumHandler target;
1:7186eab: 
1:fdf3952:     @After
1:fdf3952:     public void tearDown(){
1:fdf3952:         target = null;
1:fdf3952:     }
1:7186eab: 
1:7186eab: 
1:fdf3952:     @Test
1:fdf3952:     public void testAddingServiceWillInitiateMBeanRegistration() throws Exception {
1:7186eab:         Bundle mockSystemBundle = mock(Bundle.class);
1:7186eab:         when(mockSystemBundle.getSymbolicName()).thenReturn("the.sytem.bundle");
1:7186eab: 
1:fdf3952:         Object service = new Object();
1:7186eab: 
1:fdf3952:         ServiceReference reference = mock(ServiceReference.class);
1:f5398b2:         when(reference.getProperty(Constants.SERVICE_ID)).thenReturn(1L);
1:f5398b2:         when(reference.getProperty(Constants.OBJECTCLASS)).thenReturn("the class");
1:f5398b2: 
1:fdf3952:         BundleContext bundleContext = mock(BundleContext.class);
1:7186eab:         when(bundleContext.getProperty(Constants.FRAMEWORK_UUID)).thenReturn("some-uuid");
1:fdf3952:         when(bundleContext.getService(reference)).thenReturn(service);
1:7186eab:         when(bundleContext.getBundle(0)).thenReturn(mockSystemBundle);
1:7186eab: 
1:fdf3952:         Logger agentLogger = mock(Logger.class);
1:fdf3952:         JMXAgentContext agentContext = mock(JMXAgentContext.class);
1:fdf3952:         when(agentContext.getBundleContext()).thenReturn(bundleContext);
1:fdf3952:         when(agentContext.getLogger()).thenReturn(agentLogger);
1:7186eab: 
1:fdf3952:         AbstractCompendiumHandler concreteHandler = new CompendiumHandler(agentContext, "org.osgi.service.Xxx");
1:fdf3952:         target = spy(concreteHandler);
1:7186eab: 
1:fdf3952:         target.addingService(reference);
1:7186eab: 
1:fdf3952:         //service only got once
1:fdf3952:         verify(bundleContext).getService(reference);
1:fdf3952:         //template method is invoked
1:fdf3952:         verify(target).constructInjectMBean(service);
1:fdf3952:         //registration is invoked on context
1:fdf3952:         verify(agentContext).registerMBean(target);
1:7186eab: 
1:fdf3952:     }
1:7186eab: 
1:fdf3952:     @Test
1:fdf3952:     public void testRemovedServiceWillUnregisterMBean() throws Exception{
1:7186eab: 
1:fdf3952:         Object service = new Object();
1:fdf3952:         ServiceReference reference = mock(ServiceReference.class);
1:f5398b2:         when(reference.getProperty(Constants.SERVICE_ID)).thenReturn(1L);
1:f5398b2:         when(reference.getProperty(Constants.OBJECTCLASS)).thenReturn("the class");
1:7186eab: 
1:fdf3952:         BundleContext bundleContext = mock(BundleContext.class);
1:fdf3952:         Logger agentLogger = mock(Logger.class);
1:fdf3952:         JMXAgentContext agentContext = mock(JMXAgentContext.class);
1:fdf3952:         when(agentContext.getBundleContext()).thenReturn(bundleContext);
1:fdf3952:         when(agentContext.getLogger()).thenReturn(agentLogger);
1:7186eab: 
1:fdf3952:         AbstractCompendiumHandler concreteHandler = new CompendiumHandler(agentContext, "org.osgi.service.Xxx");
1:fdf3952:         target = spy(concreteHandler);
1:f5398b2:         target.trackedId.set(1);
1:fdf3952: 
1:fdf3952:         String name = "osgi.compendium:service=xxx,version=1.0";
1:fdf3952:         doReturn(name).when(target).getName();
1:7186eab: 
1:fdf3952:         target.removedService(reference, service);
1:7186eab: 
1:fdf3952:         //service unget
1:fdf3952:         verify(bundleContext).ungetService(reference);
1:fdf3952:         //unregister is invoked on context
1:7871c8f:         verify(agentContext).unregisterMBean(target);
1:7186eab: 
1:fdf3952:     }
1:7186eab: 
1:7186eab: 
1:fdf3952: 
1:fdf3952:     /*
1:fdf3952:      * Concrete implementation used for test
1:fdf3952:      */
1:fdf3952:     class CompendiumHandler extends AbstractCompendiumHandler {
1:fdf3952: 
1:fdf3952:         protected CompendiumHandler(JMXAgentContext agentContext, Filter filter) {
1:fdf3952:             super(agentContext, filter);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         protected CompendiumHandler(JMXAgentContext agentContext, String clazz) {
1:fdf3952:             super(agentContext, clazz);
1:fdf3952:         }
1:7186eab: 
1:fdf3952:         protected StandardMBean constructInjectMBean(Object targetService) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952: 
1:7186eab:         public String getBaseName() {
1:fdf3952:             return null;
1:fdf3952:         }
1:7186eab: 
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f5398b2
/////////////////////////////////////////////////////////////////////////
1:         when(reference.getProperty(Constants.SERVICE_ID)).thenReturn(1L);
1:         when(reference.getProperty(Constants.OBJECTCLASS)).thenReturn("the class");
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         when(reference.getProperty(Constants.SERVICE_ID)).thenReturn(1L);
1:         when(reference.getProperty(Constants.OBJECTCLASS)).thenReturn("the class");
1:         target.trackedId.set(1);
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:7871c8f
/////////////////////////////////////////////////////////////////////////
1:         verify(agentContext).unregisterMBean(target);
commit:7186eab
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: 
1: 
1: 
1:         Bundle mockSystemBundle = mock(Bundle.class);
1:         when(mockSystemBundle.getSymbolicName()).thenReturn("the.sytem.bundle");
1: 
1: 
1:         when(bundleContext.getProperty(Constants.FRAMEWORK_UUID)).thenReturn("some-uuid");
1:         when(bundleContext.getBundle(0)).thenReturn(mockSystemBundle);
1: 
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         public String getBaseName() {
1: 
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx;
1: 
1: import static org.mockito.Mockito.doReturn;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.spy;
1: import static org.mockito.Mockito.verify;
1: import static org.mockito.Mockito.when;
1: 
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.management.StandardMBean;
1: 
1: import org.apache.aries.jmx.agent.JMXAgentContext;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.ServiceReference;
1: 
1: public class CompendiumHandlerTest {
1: 
1:     protected AbstractCompendiumHandler target;
1:     
1:     @After
1:     public void tearDown(){
1:         target = null;
1:     }
1:     
1:     
1:     @Test
1:     public void testAddingServiceWillInitiateMBeanRegistration() throws Exception {
1:         
1:         Object service = new Object();
1:         
1:         ServiceReference reference = mock(ServiceReference.class);
1:         BundleContext bundleContext = mock(BundleContext.class);
1:         when(bundleContext.getService(reference)).thenReturn(service);
1:         
1:         Logger agentLogger = mock(Logger.class);
1:         JMXAgentContext agentContext = mock(JMXAgentContext.class);
1:         when(agentContext.getBundleContext()).thenReturn(bundleContext);
1:         when(agentContext.getLogger()).thenReturn(agentLogger);
0:         ExecutorService executor = Executors.newSingleThreadExecutor();
0:         when(agentContext.getRegistrationExecutor()).thenReturn(executor);
1:         
1:         AbstractCompendiumHandler concreteHandler = new CompendiumHandler(agentContext, "org.osgi.service.Xxx");
1:         target = spy(concreteHandler);
1:         
1:         target.addingService(reference);
1: 
0:         executor.shutdown();
0:         executor.awaitTermination(2, TimeUnit.SECONDS);
1:         
1:         //service only got once
1:         verify(bundleContext).getService(reference);
1:         //template method is invoked
1:         verify(target).constructInjectMBean(service);
1:         //registration is invoked on context
1:         verify(agentContext).registerMBean(target);
1:         
1:     }
1: 
1:     @Test
1:     public void testRemovedServiceWillUnregisterMBean() throws Exception{
1:         
1:         Object service = new Object();
1:         ServiceReference reference = mock(ServiceReference.class);
1:         
1:         BundleContext bundleContext = mock(BundleContext.class);
1:         Logger agentLogger = mock(Logger.class);
1:         JMXAgentContext agentContext = mock(JMXAgentContext.class);
1:         when(agentContext.getBundleContext()).thenReturn(bundleContext);
1:         when(agentContext.getLogger()).thenReturn(agentLogger);
0:         ExecutorService executor = Executors.newSingleThreadExecutor();
0:         when(agentContext.getRegistrationExecutor()).thenReturn(executor);
1:         
1:         AbstractCompendiumHandler concreteHandler = new CompendiumHandler(agentContext, "org.osgi.service.Xxx");
1:         target = spy(concreteHandler);
1:         
1:         String name = "osgi.compendium:service=xxx,version=1.0";
1:         doReturn(name).when(target).getName();
1:         
1:         target.removedService(reference, service);
1: 
0:         executor.shutdown();
0:         executor.awaitTermination(2, TimeUnit.SECONDS);
1:         
1:         //service unget
1:         verify(bundleContext).ungetService(reference);
1:         //unregister is invoked on context
0:         verify(agentContext).unregisterMBean(name);
1:         
1:     }
1: 
1:    
1:     
1:     /*
1:      * Concrete implementation used for test
1:      */
1:     class CompendiumHandler extends AbstractCompendiumHandler {
1: 
1:         protected CompendiumHandler(JMXAgentContext agentContext, Filter filter) {
1:             super(agentContext, filter);
1:         }
1: 
1:         protected CompendiumHandler(JMXAgentContext agentContext, String clazz) {
1:             super(agentContext, clazz);
1:         }
1:         
1:         protected StandardMBean constructInjectMBean(Object targetService) {
1:             return null;
1:         }
1: 
0:         public String getName() {
1:             return null;
1:         }
1:         
1:     }
1: }
============================================================================