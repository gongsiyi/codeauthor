1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint;
1:f13c6ac: 
1:c290cc1: import java.lang.reflect.Constructor;
1:f13c6ac: import java.math.BigInteger;
1:f13c6ac: import java.net.URI;
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.Arrays;
1:515d107: import java.util.Calendar;
1:515d107: import java.util.Date;
1:515d107: import java.util.GregorianCalendar;
1:f13c6ac: import java.util.HashMap;
1:f13c6ac: import java.util.HashSet;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Map;
1:515d107: import java.util.Properties;
1:f13c6ac: import java.util.Set;
1:515d107: import java.util.TimeZone;
1:f13c6ac: 
1:d08aba3: import junit.framework.Assert;
1:515d107: 
1:6414875: import org.apache.aries.blueprint.CallbackTracker.Callback;
1:c290cc1: import org.apache.aries.blueprint.container.AggregateConverter;
1:c1dc516: import org.apache.aries.blueprint.container.BlueprintRepository;
1:c290cc1: import org.apache.aries.blueprint.container.GenericType;
1:7ecd3f1: import org.apache.aries.blueprint.container.ServiceRecipe;
1:6414875: import org.apache.aries.blueprint.di.CircularDependencyException;
1:7ecd3f1: import org.apache.aries.blueprint.di.ExecutionContext;
1:7ecd3f1: import org.apache.aries.blueprint.di.MapRecipe;
1:7ecd3f1: import org.apache.aries.blueprint.di.Recipe;
1:6414875: import org.apache.aries.blueprint.di.Repository;
1:6bd0f94: import org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl;
1:cab8bfe: import org.apache.aries.blueprint.pojos.AmbiguousPojo;
1:6414875: import org.apache.aries.blueprint.pojos.BeanD;
1:6414875: import org.apache.aries.blueprint.pojos.BeanF;
1:d08aba3: import org.apache.aries.blueprint.pojos.FITestBean;
1:6414875: import org.apache.aries.blueprint.pojos.Multiple;
1:6414875: import org.apache.aries.blueprint.pojos.PojoA;
1:6414875: import org.apache.aries.blueprint.pojos.PojoB;
1:6414875: import org.apache.aries.blueprint.pojos.PojoGenerics;
1:c290cc1: import org.apache.aries.blueprint.pojos.PojoGenerics2.MyClass;
1:c290cc1: import org.apache.aries.blueprint.pojos.PojoGenerics2.MyObject;
1:c290cc1: import org.apache.aries.blueprint.pojos.PojoGenerics2.Tata;
1:c290cc1: import org.apache.aries.blueprint.pojos.PojoGenerics2.Toto;
1:6414875: import org.apache.aries.blueprint.pojos.PojoListener;
1:6414875: import org.apache.aries.blueprint.pojos.PojoRecursive;
1:7c549ab: import org.apache.aries.blueprint.pojos.Primavera;
1:5e2bd49: import org.apache.aries.blueprint.proxy.ProxyUtils;
1:f13c6ac: import org.osgi.framework.ServiceRegistration;
1:f13c6ac: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:f13c6ac: 
1:f13c6ac: public class WiringTest extends AbstractBlueprintTest {
1:f13c6ac: 
1:f13c6ac:     public void testWiring() throws Exception {
1:f13c6ac:         ComponentDefinitionRegistryImpl registry = parse("/test-wiring.xml");
1:f13c6ac:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1:f13c6ac:         
1:f13c6ac:         Object obj1 = repository.create("pojoA");
1:f13c6ac:         assertNotNull(obj1);
1:f13c6ac:         assertTrue(obj1 instanceof PojoA);
1:f13c6ac:         PojoA pojoa = (PojoA) obj1;
1:f13c6ac:         // test singleton scope
1:f13c6ac:         assertTrue(obj1 == repository.create("pojoA"));
1:f13c6ac:         
1:f13c6ac:         Object obj2 = repository.create("pojoB");
1:f13c6ac:         assertNotNull(obj2);
1:f13c6ac:         assertTrue(obj2 instanceof PojoB);
1:f13c6ac:         PojoB pojob = (PojoB) obj2;
1:f13c6ac:         
1:f13c6ac:         assertNotNull(pojoa.getPojob());
1:f13c6ac:         assertNotNull(pojoa.getPojob().getUri());
1:f13c6ac:         
1:f13c6ac:         assertNotNull(pojoa.getList());
1:f13c6ac:         assertEquals("list value", pojoa.getList().get(0));
1:f13c6ac:         assertEquals(new Integer(55), pojoa.getList().get(2));
1:f13c6ac:         assertEquals(URI.create("http://geronimo.apache.org"), pojoa.getList().get(3));
1:f13c6ac:         Object c0 = pojoa.getList().get(1);
1:f13c6ac:         Object c1 = pojoa.getList().get(4);
1:f13c6ac:         assertNotNull(c0);
1:f13c6ac:         assertNotNull(c1);
1:f13c6ac:         assertEquals(PojoB.class, c0.getClass());
1:f13c6ac:         assertEquals(PojoB.class, c1.getClass());
1:f13c6ac:         assertNotSame(c0, c1);
1:f13c6ac: 
1:f13c6ac:         assertNotNull(pojoa.getArray());
1:f13c6ac:         assertEquals("list value", pojoa.getArray()[0]);
1:f13c6ac:         assertEquals(pojob, pojoa.getArray()[1]);
1:f13c6ac:         assertEquals(new Integer(55), pojoa.getArray()[2]);
1:f13c6ac:         assertEquals(URI.create("http://geronimo.apache.org"), pojoa.getArray()[3]);
1:f13c6ac:         
1:f13c6ac:         assertNotNull(pojoa.getSet());
1:f13c6ac:         assertTrue(pojoa.getSet().contains("set value"));
1:5e2bd49:         assertTrue(pojoa.getSet().contains(pojob.getUri()));
1:f13c6ac:         assertTrue(pojoa.getSet().contains(URI.create("http://geronimo.apache.org")));
1:f13c6ac:         
1:f13c6ac:         assertNotNull(pojoa.getMap());
1:f13c6ac:         assertEquals("val", pojoa.getMap().get("key"));
1:f13c6ac:         assertEquals(pojob, pojoa.getMap().get(pojob));      
1:f13c6ac:         assertEquals(URI.create("http://geronimo.apache.org"), pojoa.getMap().get(new Integer(5)));
1:f13c6ac:         
1:f13c6ac:         assertNotNull(pojoa.getProps());
1:f13c6ac:         assertEquals("value1", pojoa.getProps().get("key1"));
1:f13c6ac:         assertEquals("value2", pojoa.getProps().get("2"));
1:f13c6ac:         assertEquals("bar", pojoa.getProps().get("foo"));
1:f13c6ac:         
1:f13c6ac:         assertNotNull(pojoa.getNumber());
1:f13c6ac:         assertEquals(new BigInteger("10"), pojoa.getNumber());
1:f13c6ac:         
1:f13c6ac:         assertNotNull(pojoa.getIntArray());
1:f13c6ac:         assertEquals(3, pojoa.getIntArray().length);
1:f13c6ac:         assertEquals(1, pojoa.getIntArray()[0]);
1:f13c6ac:         assertEquals(50, pojoa.getIntArray()[1]);
1:f13c6ac:         assertEquals(100, pojoa.getIntArray()[2]);
1:f13c6ac:         
1:f13c6ac:         assertNotNull(pojoa.getNumberArray());
1:f13c6ac:         assertEquals(4, pojoa.getNumberArray().length);
1:f13c6ac:         assertEquals(new Integer(1), pojoa.getNumberArray()[0]);
1:f13c6ac:         assertEquals(new BigInteger("50"), pojoa.getNumberArray()[1]);
1:f13c6ac:         assertEquals(new Long(100), pojoa.getNumberArray()[2]);
1:f13c6ac:         assertEquals(new Integer(200), pojoa.getNumberArray()[3]);
1:f13c6ac:         
1:f13c6ac:         // test init-method
1:f13c6ac:         assertEquals(true, pojob.getInitCalled());
1:f13c6ac:         
1:f13c6ac:         // test service
1:f13c6ac:         Object obj3 = repository.create("service1");
1:f13c6ac:         assertNotNull(obj3);
1:f13c6ac:         assertTrue(obj3 instanceof ServiceRegistration);    
1:f13c6ac: 
1:7ecd3f1:         ExecutionContext.Holder.setContext((ExecutionContext) repository);
1:7ecd3f1:         for(Recipe r : ((ServiceRecipe)repository.getRecipe("service1")).getDependencies()) {
1:7ecd3f1:         	if(r instanceof MapRecipe) {
1:7ecd3f1:         		Map m = (Map) r.create();
1:7ecd3f1:         		assertEquals("value1", m.get("key1"));
1:7ecd3f1:         		assertEquals("value2", m.get("key2"));
1:7ecd3f1:         		assertTrue(m.get("key3") instanceof List);
1:7ecd3f1:         	}
1:7ecd3f1:         }
1:7ecd3f1:         ExecutionContext.Holder.setContext(null);
1:7ecd3f1:         
1:f13c6ac:         // tests 'prototype' scope
1:f13c6ac:         Object obj4 = repository.create("pojoC");
1:f13c6ac:         assertNotNull(obj4);
1:f13c6ac:         
1:f13c6ac:         assertTrue(obj4 != repository.create("pojoC"));
1:f13c6ac:         
1:f13c6ac:         repository.destroy();
1:f13c6ac:         
1:f13c6ac:         // test destroy-method
1:f13c6ac:         assertEquals(true, pojob.getDestroyCalled());
1:f13c6ac:     }
1:f13c6ac:     
1:cab8bfe:     public void testSetterDisambiguation() throws Exception {
1:cab8bfe:         ComponentDefinitionRegistryImpl registry = parse("/test-wiring.xml");
1:cab8bfe:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1:cab8bfe: 
1:cab8bfe:         AmbiguousPojo pojo = (AmbiguousPojo) repository.create("ambiguousViaInt");
1:cab8bfe:         assertEquals(5, pojo.getSum());
1:cab8bfe:         
1:cab8bfe:         pojo = (AmbiguousPojo) repository.create("ambiguousViaList");
1:cab8bfe:         assertEquals(7, pojo.getSum());
1:cab8bfe:         
1:cab8bfe:         
1:cab8bfe:     }
1:cab8bfe:     
1:d08aba3:     public void testFieldInjection() throws Exception {
1:d08aba3:       ComponentDefinitionRegistryImpl registry = parse("/test-wiring.xml");
1:d08aba3:       Repository repository = new TestBlueprintContainer(registry).getRepository();
1:d08aba3:       
1:d08aba3:       Object fiTestBean = repository.create("FITestBean");
1:d08aba3:       assertNotNull(fiTestBean);
1:d08aba3:       assertTrue(fiTestBean instanceof FITestBean);
1:d08aba3:       
1:d08aba3:       FITestBean bean = (FITestBean) fiTestBean;
1:d08aba3:       // single field injection
1:d08aba3:       assertEquals("value", bean.getAttr());
1:d08aba3:       // prefer setter injection to field injection
1:d08aba3:       assertEquals("IS_LOWER", bean.getUpperCaseAttr());
1:d08aba3:       // support cascaded injection 'bean.name' via fields
1:d08aba3:       assertEquals("aName", bean.getBeanName());
1:d08aba3:       
1:d08aba3:       // fail if field-injection is not specified
1:d08aba3:       try {
1:d08aba3:           repository.create("FIFailureTestBean");
1:d08aba3:           Assert.fail("Expected exception");
1:d08aba3:       } catch (ComponentDefinitionException cde) {}
1:d08aba3:       
1:d08aba3:       // fail if field-injection is false
1:d08aba3:       try {
1:d08aba3:           repository.create("FIFailureTest2Bean");
1:d08aba3:           Assert.fail("Expected exception");
1:d08aba3:       } catch (ComponentDefinitionException cde) {}
1:d08aba3:     }
1:d08aba3:     
1:f13c6ac:     public void testCompoundProperties() throws Exception {
1:f13c6ac:         ComponentDefinitionRegistryImpl registry = parse("/test-wiring.xml");
1:f13c6ac:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1:f13c6ac:         
1:f13c6ac:         Object obj5 = repository.create("compound");
1:f13c6ac:         assertNotNull(obj5);
1:f13c6ac:         assertTrue(obj5 instanceof PojoB);
1:f13c6ac:         PojoB pojob = (PojoB) obj5;
1:f13c6ac:     
1:f13c6ac:         assertEquals("hello bean property", pojob.getBean().getName());
1:f13c6ac: 
1:f13c6ac:         Object obj = repository.create("goodIdRef");
1:f13c6ac:         assertNotNull(obj);
1:f13c6ac:         assertTrue(obj instanceof BeanD);
1:f13c6ac:         BeanD bean = (BeanD) obj;
1:f13c6ac: 
1:f13c6ac:         assertEquals("pojoA", bean.getName());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testIdRefs() throws Exception {
1:f13c6ac:         ComponentDefinitionRegistryImpl registry = parse("/test-bad-id-ref.xml");
1:f13c6ac: 
1:f13c6ac:         try {
1:f13c6ac:             new TestBlueprintContainer(registry).getRepository();
1:f13c6ac:             fail("Did not throw exception");
1:f13c6ac:         } catch (RuntimeException e) {
1:f13c6ac:             // we expect exception
1:f13c6ac:             // TODO: check error string?
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void testDependencies() throws Exception {
1:f13c6ac:         CallbackTracker.clear();
1:f13c6ac: 
1:f13c6ac:         ComponentDefinitionRegistryImpl registry = parse("/test-depends-on.xml");
1:f13c6ac:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1:5e2bd49:         Map instances = repository.createAll(Arrays.asList("c", "d", "e"), ProxyUtils.asList(Object.class));
1:f13c6ac:         
1:f13c6ac:         List<Callback> callback = CallbackTracker.getCallbacks();
1:f13c6ac:         assertEquals(3, callback.size());
1:f13c6ac:         checkInitCallback(instances.get("d"), callback.get(0));
1:f13c6ac:         checkInitCallback(instances.get("c"), callback.get(1));
1:f13c6ac:         checkInitCallback(instances.get("e"), callback.get(2));
1:f13c6ac:                 
1:f13c6ac:         repository.destroy();
1:f13c6ac:         
1:f13c6ac:         assertEquals(6, callback.size());
1:f13c6ac:         checkDestroyCallback(instances.get("e"), callback.get(3));
1:f13c6ac:         checkDestroyCallback(instances.get("c"), callback.get(4));
1:f13c6ac:         checkDestroyCallback(instances.get("d"), callback.get(5));
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     private void checkInitCallback(Object obj, Callback callback) { 
1:f13c6ac:         assertEquals(Callback.INIT, callback.getType());
1:f13c6ac:         assertEquals(obj, callback.getObject());
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     private void checkDestroyCallback(Object obj, Callback callback) { 
1:f13c6ac:         assertEquals(Callback.DESTROY, callback.getType());
1:f13c6ac:         assertEquals(obj, callback.getObject());
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void testConstructor() throws Exception {
1:f13c6ac:         ComponentDefinitionRegistryImpl registry = parse("/test-constructor.xml");
1:f13c6ac:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1:f13c6ac: 
1:f13c6ac:         Object obj1 = repository.create("pojoA");
1:f13c6ac:         assertNotNull(obj1);
1:f13c6ac:         assertTrue(obj1 instanceof PojoA);
1:f13c6ac:         PojoA pojoa = (PojoA) obj1;
1:f13c6ac:         
1:f13c6ac:         Object obj2 = repository.create("pojoB");
1:f13c6ac:         testPojoB(obj2, URI.create("urn:myuri"), 10);
1:f13c6ac:         
1:f13c6ac:         assertEquals(obj2, pojoa.getPojob());
1:f13c6ac:         assertEquals(new BigInteger("10"), pojoa.getNumber());
1:f13c6ac:         
1:f13c6ac:         Object obj3 = repository.create("pojoC");
1:f13c6ac:         testPojoB(obj3, URI.create("urn:myuri-static"), 15);
1:f13c6ac:         
1:f13c6ac:         Object obj4 = repository.create("pojoD");
1:f13c6ac:         testPojoB(obj4, URI.create("urn:myuri-static"), 15);
1:f13c6ac:         
1:f13c6ac:         Object obj5 = repository.create("pojoE");
1:f13c6ac:         testPojoB(obj5, URI.create("urn:myuri-dynamic"), 20);
1:f13c6ac:         
1:f13c6ac:         Object obj6 = repository.create("multipleInt");
1:f13c6ac:         testMultiple(obj6, null, 123, null);
1:f13c6ac:         
1:f13c6ac:         Object obj7 = repository.create("multipleInteger");
1:f13c6ac:         testMultiple(obj7, null, -1, new Integer(123));
1:f13c6ac:         
1:f13c6ac:         Object obj8 = repository.create("multipleString");
1:f13c6ac:         testMultiple(obj8, "123", -1, null);
1:f13c6ac: 
2:f13c6ac:         // TODO: check the below tests when the incoherence between TCK / spec is solved
1:f13c6ac: //        try {
1:f13c6ac: //            graph.create("multipleStringConvertable");
1:f13c6ac: //            fail("Did not throw exception");
1:f13c6ac: //        } catch (RuntimeException e) {
1:f13c6ac: //            // we expect exception
1:f13c6ac: //        }
1:f13c6ac:         
1:f13c6ac:         Object obj10 = repository.create("multipleFactory1");
1:f13c6ac:         testMultiple(obj10, null, 1234, null);
1:f13c6ac: 
1:f13c6ac:         Object obj11 = repository.create("multipleFactory2");
1:f13c6ac:         testMultiple(obj11, "helloCreate-boolean", -1, null);        
1:f13c6ac:         
1:f13c6ac:         try {
1:f13c6ac:             repository.create("multipleFactoryNull");
1:f13c6ac:             fail("Did not throw exception");
1:f13c6ac:         } catch (RuntimeException e) {
1:f13c6ac:             // we expect exception 
1:f13c6ac:             // TODO: check the exception string?
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         Object obj12 = repository.create("multipleFactoryTypedNull");
1:f13c6ac:         testMultiple(obj12, "hello-boolean", -1, null);
1:f13c6ac: 
1:515d107:         Object obj13 = repository.create("mapConstruction");
1:515d107:         Map<String, String> constructionMap = new HashMap<String, String>();
1:515d107:         constructionMap.put("a", "b");
1:515d107:         testMultiple(obj13, constructionMap);
1:515d107:         Object obj14 = repository.create("propsConstruction");
1:515d107:         Properties constructionProperties = new Properties();
1:515d107:         constructionProperties.put("a", "b");
1:515d107:         testMultiple(obj14,  constructionProperties);
1:f13c6ac: 
1:515d107:         Object obja = repository.create("mapConstructionWithDefaultType");
1:515d107:         Map<String, Date> mapa = new HashMap<String, Date>();
1:515d107:         // Months are 0-indexed
1:515d107:         Calendar calendar = new GregorianCalendar(2012, 0, 6);
1:515d107:         calendar.setTimeZone(TimeZone.getTimeZone("GMT"));
1:515d107:         mapa.put("date", new Date(calendar.getTimeInMillis()));
1:515d107:         testMultiple(obja, mapa);
1:515d107: 
1:515d107:         Object objc = repository.create("mapConstructionWithTypedEntries");
1:515d107:         Map mapc = new HashMap();
1:515d107:         mapc.put("boolean", Boolean.TRUE);
1:515d107:         mapc.put("double", 1.23);
1:515d107:         mapc.put("date", new Date(calendar.getTimeInMillis()));
1:515d107:         testMultiple(objc, mapc);
1:515d107: 
1:515d107:         Object objb = repository.create("mapConstructionWithNonDefaultTypedEntries");
1:515d107:         Map mapb = new HashMap();
1:515d107:         mapb.put("boolean", Boolean.TRUE);
1:515d107:         mapb.put("double", 3.45);
1:515d107:         mapb.put("otherdouble", 10.2);
1:515d107:         testMultiple(objb, mapb);
1:515d107:   
1:515d107:         Object objd = repository.create("mapConstructionWithNonDefaultTypedKeys");
1:515d107:         Map mapd = new HashMap();
1:515d107:         mapd.put(Boolean.TRUE, "boolean");
1:515d107:         mapd.put(42.42, "double");
1:515d107:         testMultiple(objd, mapd);
1:d08aba3: 
1:f13c6ac:         BeanF obj15 = (BeanF) repository.create("booleanWrapped");
1:f13c6ac:         assertNotNull(obj15.getWrapped());
1:f13c6ac:         assertEquals(false, (boolean) obj15.getWrapped());
1:f13c6ac:         assertNull(obj15.getPrim());
1:f13c6ac: 
1:f13c6ac:         // TODO: check the below tests when the incoherence between TCK / spec is solved
1:f13c6ac: //        BeanF obj16 = (BeanF) graph.create("booleanPrim");
1:f13c6ac: //        assertNotNull(obj16.getPrim());
1:f13c6ac: //        assertEquals(false, (boolean) obj16.getPrim());
1:f13c6ac: //        assertNull(obj16.getWrapped());
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     private void testPojoB(Object obj, URI uri, int intValue) {
1:f13c6ac:         assertNotNull(obj);
1:f13c6ac:         assertTrue(obj instanceof PojoB);
1:f13c6ac:         PojoB pojob = (PojoB) obj;
1:f13c6ac:         assertEquals(uri, pojob.getUri());
1:f13c6ac:         assertEquals(intValue, pojob.getNumber());
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     private void testMultiple(Object obj, String stringValue, int intValue, Integer integerValue) {
1:f13c6ac:         assertNotNull(obj);
1:f13c6ac:         assertTrue(obj instanceof Multiple);
1:f13c6ac:         assertEquals(intValue, ((Multiple)obj).getInt());
1:f13c6ac:         assertEquals(stringValue, ((Multiple)obj).getString());
1:f13c6ac:         assertEquals(integerValue, ((Multiple)obj).getInteger());        
1:f13c6ac:     }
1:f13c6ac: 
1:515d107:     private void testMultiple(Object obj, Map map) {
1:515d107:        assertNotNull(obj);
1:515d107:        assertTrue(obj instanceof Multiple);
1:515d107:        assertEquals(map, ((Multiple)obj).getMap());
1:515d107:    }
1:515d107: 
1:515d107:     private void testMultiple(Object obj, Properties map) {
1:515d107:        assertNotNull(obj);
1:515d107:        assertTrue(obj instanceof Multiple);
1:515d107:        assertEquals(map, ((Multiple)obj).getProperties());
1:515d107:    }
1:515d107: 
1:c290cc1:     public void testGenerics2() throws Exception {
1:c290cc1:         ComponentDefinitionRegistryImpl registry = parse("/test-generics.xml");
1:c290cc1:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1:c290cc1:         repository.create("gen2");
1:c290cc1:     }
1:c290cc1: 
1:f13c6ac:     public void testGenerics() throws Exception {
1:f13c6ac:         ComponentDefinitionRegistryImpl registry = parse("/test-generics.xml");
1:f13c6ac:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1:f13c6ac: 
1:f13c6ac:         List<Integer> expectedList = new ArrayList<Integer>();
1:f13c6ac:         expectedList.add(new Integer(10));
1:f13c6ac:         expectedList.add(new Integer(20));
1:f13c6ac:         expectedList.add(new Integer(50));
1:f13c6ac:         
1:f13c6ac:         Set<Long> expectedSet = new HashSet<Long>();
1:f13c6ac:         expectedSet.add(new Long(1000));
1:f13c6ac:         expectedSet.add(new Long(2000));
1:f13c6ac:         expectedSet.add(new Long(5000));
1:f13c6ac:         
1:f13c6ac:         Map<Short, Boolean> expectedMap = new HashMap<Short, Boolean>();
1:f13c6ac:         expectedMap.put(new Short((short)1), Boolean.TRUE);
1:f13c6ac:         expectedMap.put(new Short((short)2), Boolean.FALSE);
1:f13c6ac:         expectedMap.put(new Short((short)5), Boolean.TRUE);
1:f13c6ac:         
1:f13c6ac:         Object obj;
1:f13c6ac:         PojoGenerics pojo;
1:f13c6ac:         
1:f13c6ac:         obj = repository.create("method");
1:f13c6ac:         assertTrue(obj instanceof PojoGenerics);
1:f13c6ac:         pojo = (PojoGenerics) obj;
1:f13c6ac:         
1:f13c6ac:         assertEquals(expectedList, pojo.getList());
1:f13c6ac:         assertEquals(expectedSet, pojo.getSet());
1:f13c6ac:         assertEquals(expectedMap, pojo.getMap());
1:f13c6ac:         
1:f13c6ac:         obj = repository.create("constructorList");
1:f13c6ac:         assertTrue(obj instanceof PojoGenerics);
1:f13c6ac:         pojo = (PojoGenerics) obj;
1:f13c6ac:         
1:f13c6ac:         assertEquals(expectedList, pojo.getList());
1:f13c6ac:         
1:f13c6ac:         obj = repository.create("constructorSet");
1:f13c6ac:         assertTrue(obj instanceof PojoGenerics);
1:f13c6ac:         pojo = (PojoGenerics) obj;
1:f13c6ac:         
1:f13c6ac:         assertEquals(expectedSet, pojo.getSet());
1:f13c6ac:         
1:f13c6ac:         obj = repository.create("constructorMap");
1:f13c6ac:         assertTrue(obj instanceof PojoGenerics);
1:f13c6ac:         pojo = (PojoGenerics) obj;
1:f13c6ac:         
1:f13c6ac:         assertEquals(expectedMap, pojo.getMap());
1:f13c6ac:         
1:7c549ab:         obj = repository.create("genericPojo");
1:7c549ab:         assertTrue(obj instanceof Primavera);
1:7c549ab:         assertEquals("string", ((Primavera) obj).prop);
1:7c549ab:         
1:7c549ab:         obj = repository.create("doubleGenericPojo");
1:7c549ab:         assertTrue(obj instanceof Primavera);
1:7c549ab:         assertEquals("stringToo", ((Primavera) obj).prop);
1:f13c6ac:     }
1:7c549ab:     
1:f13c6ac:     public void testCircular() throws Exception {
1:f13c6ac:         BlueprintRepository repository = createBlueprintContainer().getRepository();
1:f13c6ac: 
1:f13c6ac:         // this should pass (we allow circular dependencies for components without init method)
1:f13c6ac:         Object obj1 = repository.create("a");
1:f13c6ac:                 
1:f13c6ac:         // test service and listener circular dependencies
1:f13c6ac:         Object obj2 = repository.create("service");
1:f13c6ac:         assertNotNull(obj2);
1:f13c6ac:         assertTrue(obj2 instanceof ServiceRegistration);
1:f13c6ac:         
1:f13c6ac:         Object obj3 = repository.create("listener");
1:f13c6ac:         assertNotNull(obj3);
1:f13c6ac:         assertTrue(obj3 instanceof PojoListener);
1:f13c6ac:         
1:f13c6ac:         assertEquals(obj2, ((PojoListener) obj3).getService() );        
1:f13c6ac:     }
1:f13c6ac:      
1:f13c6ac:     public void testCircularPrototype() throws Exception {
1:f13c6ac:         BlueprintRepository repository = createBlueprintContainer().getRepository();
1:f13c6ac:         
1:f13c6ac:         try {
1:f13c6ac:             repository.create("circularPrototypeDriver");
1:f13c6ac:             fail("Did not throw exception");  
1:f13c6ac:         } catch (CircularDependencyException e) {
1:f13c6ac:             // that's what we expect
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         try {
1:f13c6ac:             repository.create("circularPrototype");
1:f13c6ac:             fail("Did not throw exception");  
1:f13c6ac:         } catch (CircularDependencyException e) {
1:f13c6ac:             // that's what we expect
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void testRecursive() throws Exception {
1:f13c6ac:         BlueprintRepository repository = createBlueprintContainer().getRepository();
1:f13c6ac:         
1:f13c6ac:         try {
1:f13c6ac:             repository.create("recursiveConstructor");
1:f13c6ac:             fail("Did not throw exception");           
1:f13c6ac:         } catch (ComponentDefinitionException e) {
1:f13c6ac:             if (e.getCause() instanceof CircularDependencyException) {                          
1:f13c6ac:                 // that's what we expect
1:f13c6ac:             } else {
1:f13c6ac:                 fail("Did not throw expected exception");
1:f13c6ac:                 throw e;
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         PojoRecursive pojo;
1:f13c6ac:         
1:f13c6ac:         pojo = (PojoRecursive) repository.create("recursiveSetter");
1:f13c6ac:         assertNotNull(pojo);
1:f13c6ac:                            
1:f13c6ac:         pojo = (PojoRecursive) repository.create("recursiveInitMethod");
1:f13c6ac:         assertNotNull(pojo);
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void testCircularBreaking() throws Exception {
1:f13c6ac:         BlueprintRepository repository;
1:f13c6ac:         
1:f13c6ac:         repository = createBlueprintContainer().getRepository();        
1:f13c6ac:         assertNotNull(repository.create("c1"));
1:f13c6ac:         
1:f13c6ac:         repository = createBlueprintContainer().getRepository();        
1:f13c6ac:         assertNotNull(repository.create("c2"));
1:f13c6ac:         
1:f13c6ac:         repository = createBlueprintContainer().getRepository();        
1:f13c6ac:         assertNotNull(repository.create("c3"));
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     private TestBlueprintContainer createBlueprintContainer() throws Exception {
1:f13c6ac:         ComponentDefinitionRegistryImpl registry = parse("/test-circular.xml");
1:f13c6ac:         return new TestBlueprintContainer(registry);
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c290cc1
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Constructor;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.container.AggregateConverter;
1: import org.apache.aries.blueprint.container.GenericType;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.pojos.PojoGenerics2.MyClass;
1: import org.apache.aries.blueprint.pojos.PojoGenerics2.MyObject;
1: import org.apache.aries.blueprint.pojos.PojoGenerics2.Tata;
1: import org.apache.aries.blueprint.pojos.PojoGenerics2.Toto;
/////////////////////////////////////////////////////////////////////////
1:     public void testGenerics2() throws Exception {
1:         ComponentDefinitionRegistryImpl registry = parse("/test-generics.xml");
1:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1:         repository.create("gen2");
1:     }
1: 
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint;
1: 
1: import java.math.BigInteger;
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
0: import org.apache.geronimo.blueprint.CallbackTracker.Callback;
0: import org.apache.geronimo.blueprint.di.CircularDependencyException;
0: import org.apache.geronimo.blueprint.di.Repository;
0: import org.apache.geronimo.blueprint.namespace.ComponentDefinitionRegistryImpl;
0: import org.apache.geronimo.blueprint.pojos.BeanD;
0: import org.apache.geronimo.blueprint.pojos.BeanF;
0: import org.apache.geronimo.blueprint.pojos.Multiple;
0: import org.apache.geronimo.blueprint.pojos.PojoA;
0: import org.apache.geronimo.blueprint.pojos.PojoB;
0: import org.apache.geronimo.blueprint.pojos.PojoCircular;
0: import org.apache.geronimo.blueprint.pojos.PojoGenerics;
0: import org.apache.geronimo.blueprint.pojos.PojoListener;
0: import org.apache.geronimo.blueprint.pojos.PojoRecursive;
0: import org.apache.geronimo.blueprint.container.AggregateConverter;
0: import org.apache.geronimo.blueprint.container.BlueprintRepository;
0: import org.apache.geronimo.blueprint.container.GenericType;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: 
1: public class WiringTest extends AbstractBlueprintTest {
1: 
1:     public void testWiring() throws Exception {
1:         ComponentDefinitionRegistryImpl registry = parse("/test-wiring.xml");
1:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1:         
1:         Object obj1 = repository.create("pojoA");
1:         assertNotNull(obj1);
1:         assertTrue(obj1 instanceof PojoA);
1:         PojoA pojoa = (PojoA) obj1;
1:         // test singleton scope
1:         assertTrue(obj1 == repository.create("pojoA"));
1:         
1:         Object obj2 = repository.create("pojoB");
1:         assertNotNull(obj2);
1:         assertTrue(obj2 instanceof PojoB);
1:         PojoB pojob = (PojoB) obj2;
1:         
1:         assertNotNull(pojoa.getPojob());
1:         assertNotNull(pojoa.getPojob().getUri());
1:         
1:         assertNotNull(pojoa.getList());
1:         assertEquals("list value", pojoa.getList().get(0));
1:         assertEquals(new Integer(55), pojoa.getList().get(2));
1:         assertEquals(URI.create("http://geronimo.apache.org"), pojoa.getList().get(3));
1:         Object c0 = pojoa.getList().get(1);
1:         Object c1 = pojoa.getList().get(4);
1:         assertNotNull(c0);
1:         assertNotNull(c1);
1:         assertEquals(PojoB.class, c0.getClass());
1:         assertEquals(PojoB.class, c1.getClass());
1:         assertNotSame(c0, c1);
1: 
1:         assertNotNull(pojoa.getArray());
1:         assertEquals("list value", pojoa.getArray()[0]);
1:         assertEquals(pojob, pojoa.getArray()[1]);
1:         assertEquals(new Integer(55), pojoa.getArray()[2]);
1:         assertEquals(URI.create("http://geronimo.apache.org"), pojoa.getArray()[3]);
1:         
1:         assertNotNull(pojoa.getSet());
1:         assertTrue(pojoa.getSet().contains("set value"));
0:         assertTrue(pojoa.getSet().contains(pojob));
1:         assertTrue(pojoa.getSet().contains(URI.create("http://geronimo.apache.org")));
1:         
1:         assertNotNull(pojoa.getMap());
1:         assertEquals("val", pojoa.getMap().get("key"));
1:         assertEquals(pojob, pojoa.getMap().get(pojob));      
1:         assertEquals(URI.create("http://geronimo.apache.org"), pojoa.getMap().get(new Integer(5)));
1:         
1:         assertNotNull(pojoa.getProps());
1:         assertEquals("value1", pojoa.getProps().get("key1"));
1:         assertEquals("value2", pojoa.getProps().get("2"));
1:         assertEquals("bar", pojoa.getProps().get("foo"));
1:         
1:         assertNotNull(pojoa.getNumber());
1:         assertEquals(new BigInteger("10"), pojoa.getNumber());
1:         
1:         assertNotNull(pojoa.getIntArray());
1:         assertEquals(3, pojoa.getIntArray().length);
1:         assertEquals(1, pojoa.getIntArray()[0]);
1:         assertEquals(50, pojoa.getIntArray()[1]);
1:         assertEquals(100, pojoa.getIntArray()[2]);
1:         
1:         assertNotNull(pojoa.getNumberArray());
1:         assertEquals(4, pojoa.getNumberArray().length);
1:         assertEquals(new Integer(1), pojoa.getNumberArray()[0]);
1:         assertEquals(new BigInteger("50"), pojoa.getNumberArray()[1]);
1:         assertEquals(new Long(100), pojoa.getNumberArray()[2]);
1:         assertEquals(new Integer(200), pojoa.getNumberArray()[3]);
1:         
1:         // test init-method
1:         assertEquals(true, pojob.getInitCalled());
1:         
1:         // test service
1:         Object obj3 = repository.create("service1");
1:         assertNotNull(obj3);
1:         assertTrue(obj3 instanceof ServiceRegistration);    
1:         
1:         // tests 'prototype' scope
1:         Object obj4 = repository.create("pojoC");
1:         assertNotNull(obj4);
1:         
1:         assertTrue(obj4 != repository.create("pojoC"));
1:         
1:         repository.destroy();
1:         
1:         // test destroy-method
1:         assertEquals(true, pojob.getDestroyCalled());
1:     }
1:     
1:     public void testCompoundProperties() throws Exception {
1:         ComponentDefinitionRegistryImpl registry = parse("/test-wiring.xml");
1:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1:         
1:         Object obj5 = repository.create("compound");
1:         assertNotNull(obj5);
1:         assertTrue(obj5 instanceof PojoB);
1:         PojoB pojob = (PojoB) obj5;
1:     
1:         assertEquals("hello bean property", pojob.getBean().getName());
1: 
1:         Object obj = repository.create("goodIdRef");
1:         assertNotNull(obj);
1:         assertTrue(obj instanceof BeanD);
1:         BeanD bean = (BeanD) obj;
1: 
1:         assertEquals("pojoA", bean.getName());
1:     }
1: 
1:     public void testIdRefs() throws Exception {
1:         ComponentDefinitionRegistryImpl registry = parse("/test-bad-id-ref.xml");
1: 
1:         try {
1:             new TestBlueprintContainer(registry).getRepository();
1:             fail("Did not throw exception");
1:         } catch (RuntimeException e) {
1:             // we expect exception
1:             // TODO: check error string?
1:         }
1:     }
1:     
1:     public void testDependencies() throws Exception {
1:         CallbackTracker.clear();
1: 
1:         ComponentDefinitionRegistryImpl registry = parse("/test-depends-on.xml");
1:         Repository repository = new TestBlueprintContainer(registry).getRepository();
0:         Map instances = repository.createAll(Arrays.asList("c", "d", "e"));
1:         
1:         List<Callback> callback = CallbackTracker.getCallbacks();
1:         assertEquals(3, callback.size());
1:         checkInitCallback(instances.get("d"), callback.get(0));
1:         checkInitCallback(instances.get("c"), callback.get(1));
1:         checkInitCallback(instances.get("e"), callback.get(2));
1:                 
1:         repository.destroy();
1:         
1:         assertEquals(6, callback.size());
1:         checkDestroyCallback(instances.get("e"), callback.get(3));
1:         checkDestroyCallback(instances.get("c"), callback.get(4));
1:         checkDestroyCallback(instances.get("d"), callback.get(5));
1:     }
1: 
1:     private void checkInitCallback(Object obj, Callback callback) { 
1:         assertEquals(Callback.INIT, callback.getType());
1:         assertEquals(obj, callback.getObject());
1:     }
1:     
1:     private void checkDestroyCallback(Object obj, Callback callback) { 
1:         assertEquals(Callback.DESTROY, callback.getType());
1:         assertEquals(obj, callback.getObject());
1:     }
1:     
1:     public void testConstructor() throws Exception {
1:         ComponentDefinitionRegistryImpl registry = parse("/test-constructor.xml");
1:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1: 
1:         Object obj1 = repository.create("pojoA");
1:         assertNotNull(obj1);
1:         assertTrue(obj1 instanceof PojoA);
1:         PojoA pojoa = (PojoA) obj1;
1:         
1:         Object obj2 = repository.create("pojoB");
1:         testPojoB(obj2, URI.create("urn:myuri"), 10);
1:         
1:         assertEquals(obj2, pojoa.getPojob());
1:         assertEquals(new BigInteger("10"), pojoa.getNumber());
1:         
1:         Object obj3 = repository.create("pojoC");
1:         testPojoB(obj3, URI.create("urn:myuri-static"), 15);
1:         
1:         Object obj4 = repository.create("pojoD");
1:         testPojoB(obj4, URI.create("urn:myuri-static"), 15);
1:         
1:         Object obj5 = repository.create("pojoE");
1:         testPojoB(obj5, URI.create("urn:myuri-dynamic"), 20);
1:         
1:         Object obj6 = repository.create("multipleInt");
1:         testMultiple(obj6, null, 123, null);
1:         
1:         Object obj7 = repository.create("multipleInteger");
1:         testMultiple(obj7, null, -1, new Integer(123));
1:         
1:         Object obj8 = repository.create("multipleString");
1:         testMultiple(obj8, "123", -1, null);
1: 
1:         // TODO: check the below tests when the incoherence between TCK / spec is solved
1: //        try {
1: //            graph.create("multipleStringConvertable");
1: //            fail("Did not throw exception");
1: //        } catch (RuntimeException e) {
1: //            // we expect exception
1: //        }
1:         
1:         Object obj10 = repository.create("multipleFactory1");
1:         testMultiple(obj10, null, 1234, null);
1: 
1:         Object obj11 = repository.create("multipleFactory2");
1:         testMultiple(obj11, "helloCreate-boolean", -1, null);        
1:         
1:         try {
1:             repository.create("multipleFactoryNull");
1:             fail("Did not throw exception");
1:         } catch (RuntimeException e) {
1:             // we expect exception 
1:             // TODO: check the exception string?
1:         }
1:         
1:         Object obj12 = repository.create("multipleFactoryTypedNull");
1:         testMultiple(obj12, "hello-boolean", -1, null);
1: 
1:         // TODO: check the below tests when the incoherence between TCK / spec is solved
0: //        Object obj13 = graph.create("mapConstruction");
0: //        Object obj14 = graph.create("propsConstruction");
1: 
1:         BeanF obj15 = (BeanF) repository.create("booleanWrapped");
1:         assertNotNull(obj15.getWrapped());
1:         assertEquals(false, (boolean) obj15.getWrapped());
1:         assertNull(obj15.getPrim());
1: 
1:         // TODO: check the below tests when the incoherence between TCK / spec is solved
1: //        BeanF obj16 = (BeanF) graph.create("booleanPrim");
1: //        assertNotNull(obj16.getPrim());
1: //        assertEquals(false, (boolean) obj16.getPrim());
1: //        assertNull(obj16.getWrapped());
1:     }
1:     
1:     private void testPojoB(Object obj, URI uri, int intValue) {
1:         assertNotNull(obj);
1:         assertTrue(obj instanceof PojoB);
1:         PojoB pojob = (PojoB) obj;
1:         assertEquals(uri, pojob.getUri());
1:         assertEquals(intValue, pojob.getNumber());
1:     }
1:     
1:     private void testMultiple(Object obj, String stringValue, int intValue, Integer integerValue) {
1:         assertNotNull(obj);
1:         assertTrue(obj instanceof Multiple);
1:         assertEquals(intValue, ((Multiple)obj).getInt());
1:         assertEquals(stringValue, ((Multiple)obj).getString());
1:         assertEquals(integerValue, ((Multiple)obj).getInteger());        
1:     }
1: 
1:     public void testGenerics() throws Exception {
1:         ComponentDefinitionRegistryImpl registry = parse("/test-generics.xml");
1:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1: 
1:         List<Integer> expectedList = new ArrayList<Integer>();
1:         expectedList.add(new Integer(10));
1:         expectedList.add(new Integer(20));
1:         expectedList.add(new Integer(50));
1:         
1:         Set<Long> expectedSet = new HashSet<Long>();
1:         expectedSet.add(new Long(1000));
1:         expectedSet.add(new Long(2000));
1:         expectedSet.add(new Long(5000));
1:         
1:         Map<Short, Boolean> expectedMap = new HashMap<Short, Boolean>();
1:         expectedMap.put(new Short((short)1), Boolean.TRUE);
1:         expectedMap.put(new Short((short)2), Boolean.FALSE);
1:         expectedMap.put(new Short((short)5), Boolean.TRUE);
1:         
1:         Object obj;
1:         PojoGenerics pojo;
1:         
1:         obj = repository.create("method");
1:         assertTrue(obj instanceof PojoGenerics);
1:         pojo = (PojoGenerics) obj;
1:         
1:         assertEquals(expectedList, pojo.getList());
1:         assertEquals(expectedSet, pojo.getSet());
1:         assertEquals(expectedMap, pojo.getMap());
1:         
1:         obj = repository.create("constructorList");
1:         assertTrue(obj instanceof PojoGenerics);
1:         pojo = (PojoGenerics) obj;
1:         
1:         assertEquals(expectedList, pojo.getList());
1:         
1:         obj = repository.create("constructorSet");
1:         assertTrue(obj instanceof PojoGenerics);
1:         pojo = (PojoGenerics) obj;
1:         
1:         assertEquals(expectedSet, pojo.getSet());
1:         
1:         obj = repository.create("constructorMap");
1:         assertTrue(obj instanceof PojoGenerics);
1:         pojo = (PojoGenerics) obj;
1:         
1:         assertEquals(expectedMap, pojo.getMap());
1:     }
1:     
1:     public void testCircular() throws Exception {
1:         BlueprintRepository repository = createBlueprintContainer().getRepository();
1: 
1:         // this should pass (we allow circular dependencies for components without init method)
1:         Object obj1 = repository.create("a");
1:                 
1:         // test service and listener circular dependencies
1:         Object obj2 = repository.create("service");
1:         assertNotNull(obj2);
1:         assertTrue(obj2 instanceof ServiceRegistration);
1:         
1:         Object obj3 = repository.create("listener");
1:         assertNotNull(obj3);
1:         assertTrue(obj3 instanceof PojoListener);
1:         
1:         assertEquals(obj2, ((PojoListener) obj3).getService() );        
1:     }
1:      
1:     public void testCircularPrototype() throws Exception {
1:         BlueprintRepository repository = createBlueprintContainer().getRepository();
1:         
1:         try {
1:             repository.create("circularPrototypeDriver");
1:             fail("Did not throw exception");  
1:         } catch (CircularDependencyException e) {
1:             // that's what we expect
1:         }
1: 
1:         try {
1:             repository.create("circularPrototype");
1:             fail("Did not throw exception");  
1:         } catch (CircularDependencyException e) {
1:             // that's what we expect
1:         }
1:     }
1:     
1:     public void testRecursive() throws Exception {
1:         BlueprintRepository repository = createBlueprintContainer().getRepository();
1:         
1:         try {
1:             repository.create("recursiveConstructor");
1:             fail("Did not throw exception");           
1:         } catch (ComponentDefinitionException e) {
1:             if (e.getCause() instanceof CircularDependencyException) {                          
1:                 // that's what we expect
1:             } else {
1:                 fail("Did not throw expected exception");
1:                 throw e;
1:             }
1:         }
1:         
1:         PojoRecursive pojo;
1:         
1:         pojo = (PojoRecursive) repository.create("recursiveSetter");
1:         assertNotNull(pojo);
1:                            
1:         pojo = (PojoRecursive) repository.create("recursiveInitMethod");
1:         assertNotNull(pojo);
1:     }
1:     
1:     public void testCircularBreaking() throws Exception {
1:         BlueprintRepository repository;
1:         
1:         repository = createBlueprintContainer().getRepository();        
1:         assertNotNull(repository.create("c1"));
1:         
1:         repository = createBlueprintContainer().getRepository();        
1:         assertNotNull(repository.create("c2"));
1:         
1:         repository = createBlueprintContainer().getRepository();        
1:         assertNotNull(repository.create("c3"));
1:     }
1:     
1:     private TestBlueprintContainer createBlueprintContainer() throws Exception {
1:         ComponentDefinitionRegistryImpl registry = parse("/test-circular.xml");
1:         return new TestBlueprintContainer(registry);
1:     }
1:     
1: }
author:Holly Cummins
-------------------------------------------------------------------------------
commit:515d107
/////////////////////////////////////////////////////////////////////////
1: import java.util.Calendar;
1: import java.util.Date;
1: import java.util.GregorianCalendar;
1: import java.util.Properties;
1: import java.util.TimeZone;
/////////////////////////////////////////////////////////////////////////
1:         Object obj13 = repository.create("mapConstruction");
1:         Map<String, String> constructionMap = new HashMap<String, String>();
1:         constructionMap.put("a", "b");
1:         testMultiple(obj13, constructionMap);
1:         Object obj14 = repository.create("propsConstruction");
1:         Properties constructionProperties = new Properties();
1:         constructionProperties.put("a", "b");
1:         testMultiple(obj14,  constructionProperties);
1: 
1:         Object obja = repository.create("mapConstructionWithDefaultType");
1:         Map<String, Date> mapa = new HashMap<String, Date>();
1:         // Months are 0-indexed
1:         Calendar calendar = new GregorianCalendar(2012, 0, 6);
1:         calendar.setTimeZone(TimeZone.getTimeZone("GMT"));
1:         mapa.put("date", new Date(calendar.getTimeInMillis()));
1:         testMultiple(obja, mapa);
1: 
1:         Object objc = repository.create("mapConstructionWithTypedEntries");
1:         Map mapc = new HashMap();
1:         mapc.put("boolean", Boolean.TRUE);
1:         mapc.put("double", 1.23);
1:         mapc.put("date", new Date(calendar.getTimeInMillis()));
1:         testMultiple(objc, mapc);
1: 
1:         Object objb = repository.create("mapConstructionWithNonDefaultTypedEntries");
1:         Map mapb = new HashMap();
1:         mapb.put("boolean", Boolean.TRUE);
1:         mapb.put("double", 3.45);
1:         mapb.put("otherdouble", 10.2);
1:         testMultiple(objb, mapb);
1:   
1:         Object objd = repository.create("mapConstructionWithNonDefaultTypedKeys");
1:         Map mapd = new HashMap();
1:         mapd.put(Boolean.TRUE, "boolean");
1:         mapd.put(42.42, "double");
1:         testMultiple(objd, mapd);
/////////////////////////////////////////////////////////////////////////
1:     private void testMultiple(Object obj, Map map) {
1:        assertNotNull(obj);
1:        assertTrue(obj instanceof Multiple);
1:        assertEquals(map, ((Multiple)obj).getMap());
1:    }
1: 
1:     private void testMultiple(Object obj, Properties map) {
1:        assertNotNull(obj);
1:        assertTrue(obj instanceof Multiple);
1:        assertEquals(map, ((Multiple)obj).getProperties());
1:    }
1: 
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7ecd3f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.container.ServiceRecipe;
1: import org.apache.aries.blueprint.di.ExecutionContext;
1: import org.apache.aries.blueprint.di.MapRecipe;
1: import org.apache.aries.blueprint.di.Recipe;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:         ExecutionContext.Holder.setContext((ExecutionContext) repository);
1:         for(Recipe r : ((ServiceRecipe)repository.getRecipe("service1")).getDependencies()) {
1:         	if(r instanceof MapRecipe) {
1:         		Map m = (Map) r.create();
1:         		assertEquals("value1", m.get("key1"));
1:         		assertEquals("value2", m.get("key2"));
1:         		assertTrue(m.get("key3") instanceof List);
1:         	}
1:         }
1:         ExecutionContext.Holder.setContext(null);
commit:5e2bd49
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.proxy.ProxyUtils;
0: import org.apache.aries.proxy.impl.JdkProxyManager;
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(pojoa.getSet().contains(pojob.getUri()));
/////////////////////////////////////////////////////////////////////////
1:         Map instances = repository.createAll(Arrays.asList("c", "d", "e"), ProxyUtils.asList(Object.class));
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:6bd0f94
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl;
commit:cab8bfe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.pojos.AmbiguousPojo;
/////////////////////////////////////////////////////////////////////////
1:     public void testSetterDisambiguation() throws Exception {
1:         ComponentDefinitionRegistryImpl registry = parse("/test-wiring.xml");
1:         Repository repository = new TestBlueprintContainer(registry).getRepository();
1: 
1:         AmbiguousPojo pojo = (AmbiguousPojo) repository.create("ambiguousViaInt");
1:         assertEquals(5, pojo.getSum());
1:         
1:         pojo = (AmbiguousPojo) repository.create("ambiguousViaList");
1:         assertEquals(7, pojo.getSum());
1:         
1:         
1:     }
1:     
commit:d08aba3
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Assert;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.pojos.FITestBean;
/////////////////////////////////////////////////////////////////////////
1:     public void testFieldInjection() throws Exception {
1:       ComponentDefinitionRegistryImpl registry = parse("/test-wiring.xml");
1:       Repository repository = new TestBlueprintContainer(registry).getRepository();
1:       
1:       Object fiTestBean = repository.create("FITestBean");
1:       assertNotNull(fiTestBean);
1:       assertTrue(fiTestBean instanceof FITestBean);
1:       
1:       FITestBean bean = (FITestBean) fiTestBean;
1:       // single field injection
1:       assertEquals("value", bean.getAttr());
1:       // prefer setter injection to field injection
1:       assertEquals("IS_LOWER", bean.getUpperCaseAttr());
1:       // support cascaded injection 'bean.name' via fields
1:       assertEquals("aName", bean.getBeanName());
1:       
1:       // fail if field-injection is not specified
1:       try {
1:           repository.create("FIFailureTestBean");
1:           Assert.fail("Expected exception");
1:       } catch (ComponentDefinitionException cde) {}
1:       
1:       // fail if field-injection is false
1:       try {
1:           repository.create("FIFailureTest2Bean");
1:           Assert.fail("Expected exception");
1:       } catch (ComponentDefinitionException cde) {}
1:     }
1:     
commit:7c549ab
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.pojos.Primavera;
/////////////////////////////////////////////////////////////////////////
1:         
1:         obj = repository.create("genericPojo");
1:         assertTrue(obj instanceof Primavera);
1:         assertEquals("string", ((Primavera) obj).prop);
1:         
1:         obj = repository.create("doubleGenericPojo");
1:         assertTrue(obj instanceof Primavera);
1:         assertEquals("stringToo", ((Primavera) obj).prop);
commit:c1dc516
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.container.BlueprintRepository;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:79e9d13
/////////////////////////////////////////////////////////////////////////
0:     public void testDefaultBeans() throws Exception {
0:         ComponentDefinitionRegistryImpl registry = parse("/test-circular.xml");
0:         assertNotNull(registry.getBlueprintContainer());
0:         assertNotNull(registry.getBlueprintBundle());
0:         assertNotNull(registry.getBlueprintBundleContext());
0:         assertNotNull(registry.getBlueprintConverter());
0:     }
0:     
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.CallbackTracker.Callback;
1: import org.apache.aries.blueprint.di.CircularDependencyException;
1: import org.apache.aries.blueprint.di.Repository;
0: import org.apache.aries.blueprint.namespace.ComponentDefinitionRegistryImpl;
1: import org.apache.aries.blueprint.pojos.BeanD;
1: import org.apache.aries.blueprint.pojos.BeanF;
1: import org.apache.aries.blueprint.pojos.Multiple;
1: import org.apache.aries.blueprint.pojos.PojoA;
1: import org.apache.aries.blueprint.pojos.PojoB;
0: import org.apache.aries.blueprint.pojos.PojoCircular;
1: import org.apache.aries.blueprint.pojos.PojoGenerics;
1: import org.apache.aries.blueprint.pojos.PojoListener;
1: import org.apache.aries.blueprint.pojos.PojoRecursive;
0: import org.apache.aries.blueprint.container.AggregateConverter;
0: import org.apache.aries.blueprint.container.BlueprintRepository;
0: import org.apache.aries.blueprint.container.GenericType;
============================================================================