1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.cm;
17:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:fdf3952: import static org.junit.Assert.assertNull;
1:fdf3952: import static org.junit.Assert.assertTrue;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.options;
1:fdf3952: 
1:fdf3952: import java.util.Dictionary;
1:fdf3952: 
1:0a8778f: import javax.inject.Inject;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.AbstractIntegrationTest;
1:fdf3952: import org.apache.aries.jmx.codec.PropertyData;
1:fdf3952: import org.apache.aries.jmx.test.bundlea.api.InterfaceA;
1:fdf3952: import org.apache.aries.jmx.test.bundleb.api.InterfaceB;
1:fdf3952: import org.apache.aries.jmx.test.bundleb.api.MSF;
1:0a8778f: import org.junit.Before;
1:fdf3952: import org.junit.Ignore;
1:fdf3952: import org.junit.Test;
1:0a8778f: import org.ops4j.pax.exam.Configuration;
1:fdf3952: import org.ops4j.pax.exam.Option;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.jmx.service.cm.ConfigurationAdminMBean;
1:fdf3952: import org.osgi.service.cm.ConfigurationAdmin;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * 
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class ConfigurationAdminMBeanTest extends AbstractIntegrationTest {
1:0a8778f: 	private ConfigurationAdminMBean mbean;
1:0a8778f: 	
1:0a8778f: 	@Inject
1:0a8778f: 	InterfaceA managedServiceA; 
1:0a8778f: 	
1:0a8778f: 	@Inject
1:0a8778f: 	@org.ops4j.pax.exam.util.Filter("(" + Constants.SERVICE_PID + "=jmx.test.B.factory)")
1:0a8778f:     MSF managedFactory;
1:0a8778f: 	
1:0a8778f: 	@Inject
1:0a8778f:     ConfigurationAdmin configAdmin;
1:fdf3952: 
1:fdf3952:     @Configuration
1:0a8778f:     public Option[] configuration() {
1:0a8778f: 		return options(
1:0a8778f: 				jmxRuntime(), 
1:0a8778f: 				bundlea(),
1:0a8778f: 				bundleb()
1:0a8778f: 				);
2:fdf3952:     }
1:fdf3952:     
1:0a8778f:     @Before
1:fdf3952:     public void doSetUp() throws Exception {
1:0a8778f:         waitForMBean(ConfigurationAdminMBean.OBJECTNAME);
1:0a8778f:         mbean = getMBean(ConfigurationAdminMBean.OBJECTNAME, ConfigurationAdminMBean.class);
1:0a8778f:         assertNotNull(mbean);
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Ignore("ManagedServiceFactory tests failing.. " +
1:fdf3952:             "Some issues surrounding creating a factory configuration and then retrieving by pid to update.. Needs investigation")
1:fdf3952:     @Test
1:fdf3952:     @SuppressWarnings("unchecked")
1:fdf3952:     public void testMBeanInterface() throws Exception {
1:fdf3952:         // get bundles
1:0a8778f:         Bundle a = getBundleByName("org.apache.aries.jmx.test.bundlea");
1:fdf3952:         
1:fdf3952:         // ManagedService operations
1:fdf3952:         assertNull(managedServiceA.getConfig());
1:fdf3952:         
1:fdf3952:         // create a configuration for A
1:fdf3952:         TabularData data = mbean.getProperties("org.apache.aries.jmx.test.ServiceA");
1:fdf3952:         assertEquals(0, data.size());
1:fdf3952:         
1:fdf3952:         PropertyData<String> p1 = PropertyData.newInstance("A1", "first");
1:fdf3952:         data.put(p1.toCompositeData());
1:fdf3952:         PropertyData<Integer> p2 = PropertyData.newInstance("A2", 2);
1:fdf3952:         data.put(p2.toCompositeData());
1:fdf3952:         
1:fdf3952:         mbean.update("org.apache.aries.jmx.test.ServiceA", data);
1:fdf3952:         
1:fdf3952:         Thread.sleep(1000);
1:fdf3952:         Dictionary<String, Object> config = managedServiceA.getConfig();
1:fdf3952:         assertNotNull(config);
1:fdf3952:         assertEquals(3, config.size());
1:fdf3952:         assertEquals("org.apache.aries.jmx.test.ServiceA", config.get(Constants.SERVICE_PID));
1:fdf3952:         assertEquals("first", config.get("A1"));
1:fdf3952:         assertEquals(2, config.get("A2"));
1:fdf3952:         
1:fdf3952:         //delete
1:fdf3952:         mbean.deleteForLocation("org.apache.aries.jmx.test.ServiceA", a.getLocation());
1:fdf3952:         Thread.sleep(1000);
1:fdf3952:         assertNull(managedServiceA.getConfig());
1:fdf3952:         
1:fdf3952:         
1:fdf3952:         // ManagedServiceFactory operations
1:fdf3952:         String cpid = mbean.createFactoryConfiguration("jmx.test.B.factory");
1:fdf3952:         assertNotNull(cpid);
1:fdf3952:         assertTrue(cpid.contains("jmx.test.B.factory"));
1:fdf3952:         
1:fdf3952:         TabularData fConfig = mbean.getProperties(cpid);
1:fdf3952:         assertNotNull(fConfig);
1:fdf3952:         assertEquals(0, fConfig.values().size());
1:fdf3952:         
1:fdf3952:         PropertyData<String> prop1 = PropertyData.newInstance("B1", "value1");
1:fdf3952:         fConfig.put(prop1.toCompositeData());
1:fdf3952:         PropertyData<Boolean> prop2 = PropertyData.newInstance("B2", true);
1:fdf3952:         fConfig.put(prop2.toCompositeData());
1:fdf3952:         
1:fdf3952:         mbean.update(cpid, fConfig);
1:fdf3952:         
1:fdf3952:         Thread.sleep(1000);
1:fdf3952:         
1:fdf3952:         InterfaceB configured = managedFactory.getConfigured(cpid);
1:fdf3952:         assertNotNull(configured);
1:fdf3952:         config = configured.getConfig();
1:fdf3952:         assertNotNull(config);
1:fdf3952:         assertTrue(config.size() >= 4);
1:fdf3952:         assertEquals("jmx.test.B.factory", config.get(ConfigurationAdmin.SERVICE_FACTORYPID));
1:fdf3952:         assertEquals(cpid, config.get(Constants.SERVICE_PID));
1:fdf3952:         assertEquals("value1", config.get("B1"));
1:fdf3952:         assertEquals("true", config.get("B2"));
1:fdf3952:         
1:fdf3952:         assertEquals("jmx.test.B.factory", mbean.getFactoryPid(cpid));
1:fdf3952:         
1:fdf3952:         mbean.delete(cpid);
1:fdf3952:         
1:fdf3952:         Thread.sleep(1000);
1:fdf3952:         
1:fdf3952:         assertNull(managedFactory.getConfigured(cpid));
1:fdf3952:        
1:fdf3952:         // list operations
1:fdf3952:         
1:fdf3952:         data = mbean.getProperties("org.apache.aries.jmx.test.ServiceA");
1:fdf3952:         assertEquals(0, data.size());
1:fdf3952:         
1:fdf3952:         p1 = PropertyData.newInstance("A1", "a1Value");
1:fdf3952:         data.put(p1.toCompositeData());
1:fdf3952:         
1:fdf3952:         mbean.update("org.apache.aries.jmx.test.ServiceA", data);
1:fdf3952:         
1:fdf3952:         Thread.sleep(1000);
1:fdf3952:         
1:fdf3952:         config = managedServiceA.getConfig();
1:fdf3952:         assertNotNull(config);
1:fdf3952:         assertEquals(2, config.size());
1:fdf3952:         assertEquals("org.apache.aries.jmx.test.ServiceA", config.get(Constants.SERVICE_PID));
1:fdf3952:         assertEquals("a1Value", config.get("A1"));
1:fdf3952: 
1:fdf3952:         
1:fdf3952:         String[][] configurations = mbean.getConfigurations("(A1=a1Value)");
1:fdf3952:         assertNotNull(configurations);
1:fdf3952:         assertEquals(1, configurations.length);
1:fdf3952:         assertEquals("org.apache.aries.jmx.test.ServiceA", configurations[0][0]);
1:fdf3952:         assertEquals(a.getLocation(), configurations[0][1]);
1:fdf3952:         
1:fdf3952:         // delete with filter
1:fdf3952:         mbean.deleteConfigurations("(A1=a1Value)");
1:fdf3952:         
1:fdf3952:         Thread.sleep(1000);
1:fdf3952:         
1:fdf3952:         assertNull(managedServiceA.getConfig());
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.options;
1: import javax.inject.Inject;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.ops4j.pax.exam.Configuration;
/////////////////////////////////////////////////////////////////////////
1: 	private ConfigurationAdminMBean mbean;
1: 	
1: 	@Inject
1: 	InterfaceA managedServiceA; 
1: 	
1: 	@Inject
1: 	@org.ops4j.pax.exam.util.Filter("(" + Constants.SERVICE_PID + "=jmx.test.B.factory)")
1:     MSF managedFactory;
1: 	
1: 	@Inject
1:     ConfigurationAdmin configAdmin;
1:     public Option[] configuration() {
1: 		return options(
1: 				jmxRuntime(), 
1: 				bundlea(),
1: 				bundleb()
1: 				);
1:     @Before
1:         waitForMBean(ConfigurationAdminMBean.OBJECTNAME);
1:         mbean = getMBean(ConfigurationAdminMBean.OBJECTNAME, ConfigurationAdminMBean.class);
1:         assertNotNull(mbean);
/////////////////////////////////////////////////////////////////////////
1:         Bundle a = getBundleByName("org.apache.aries.jmx.test.bundlea");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.cm;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.provision;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.modifyBundle;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.newBundle;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.withBnd;
1: 
0: import static org.apache.aries.itest.ExtraOptions.*;
1: 
0: import java.io.InputStream;
1: import java.util.Dictionary;
1: 
0: import javax.management.ObjectName;
1: import javax.management.openmbean.TabularData;
1: 
1: import org.apache.aries.jmx.AbstractIntegrationTest;
1: import org.apache.aries.jmx.codec.PropertyData;
1: import org.apache.aries.jmx.test.bundlea.api.InterfaceA;
1: import org.apache.aries.jmx.test.bundleb.api.InterfaceB;
1: import org.apache.aries.jmx.test.bundleb.api.MSF;
1: import org.junit.Ignore;
1: import org.junit.Test;
0: import org.ops4j.pax.exam.CoreOptions;
0: import org.ops4j.pax.exam.Customizer;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.Configuration;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
0: import org.osgi.framework.Filter;
1: import org.osgi.jmx.service.cm.ConfigurationAdminMBean;
1: import org.osgi.service.cm.ConfigurationAdmin;
0: import org.osgi.util.tracker.ServiceTracker;
1: 
1: /**
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class ConfigurationAdminMBeanTest extends AbstractIntegrationTest {
1: 
1:     @Configuration
0:     public static Option[] configuration() {
0:         return testOptions(
0:                         CoreOptions.equinox(),
0:                         paxLogging("INFO"),
1:                         
0:                         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:                         mavenBundle("org.osgi", "org.osgi.compendium"),
0:                         mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx"),
0:                         mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.whiteboard"),
0:                         new Customizer() {
0:                             public InputStream customizeTestProbe(InputStream testProbe) throws Exception {
0:                                 return modifyBundle(testProbe)
0:                                            .removeHeader(Constants.DYNAMICIMPORT_PACKAGE)
0:                                            .set(Constants.REQUIRE_BUNDLE, "org.apache.aries.jmx.test.bundlea,org.apache.aries.jmx.test.bundleb")
0:                                            .build(withBnd());
1:                             }
0:                         },
0:                         provision(newBundle()
0:                                 .add(org.apache.aries.jmx.test.bundlea.Activator.class)
0:                                 .add(org.apache.aries.jmx.test.bundlea.api.InterfaceA.class)
0:                                 .add(org.apache.aries.jmx.test.bundlea.impl.A.class)
0:                                 .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundlea")
0:                                 .set(Constants.BUNDLE_VERSION, "2.0.0")
0:                                 .set(Constants.EXPORT_PACKAGE, "org.apache.aries.jmx.test.bundlea.api;version=2.0.0")
0:                                 .set(Constants.IMPORT_PACKAGE,
0:                                         "org.osgi.framework;version=1.5.0,org.osgi.util.tracker,org.apache.aries.jmx.test.bundleb.api;version=1.1.0;resolution:=optional" +
0:                                         ",org.osgi.service.cm")
0:                                 .set(Constants.BUNDLE_ACTIVATOR,
0:                                         org.apache.aries.jmx.test.bundlea.Activator.class.getName())
0:                                 .build(withBnd())),
0:                         provision(newBundle()
0:                                 .add(org.apache.aries.jmx.test.bundleb.Activator.class)
0:                                 .add(org.apache.aries.jmx.test.bundleb.api.InterfaceB.class)
0:                                 .add(org.apache.aries.jmx.test.bundleb.api.MSF.class)
0:                                 .add(org.apache.aries.jmx.test.bundleb.impl.B.class)
0:                                 .set(Constants.BUNDLE_SYMBOLICNAME,"org.apache.aries.jmx.test.bundleb")
0:                                 .set(Constants.BUNDLE_VERSION, "1.0.0")
0:                                 .set(Constants.EXPORT_PACKAGE,"org.apache.aries.jmx.test.bundleb.api;version=1.1.0")
0:                                 .set(Constants.IMPORT_PACKAGE,"org.osgi.framework;version=1.5.0,org.osgi.util.tracker" +
0:                                         ",org.osgi.service.cm")
0:                                 .set(Constants.BUNDLE_ACTIVATOR,
0:                                         org.apache.aries.jmx.test.bundleb.Activator.class.getName())
0:                                 .build(withBnd()))
0:                         );
1:     }
1:     
0:     @Override
1:     public void doSetUp() throws Exception {
0:         waitForMBean(new ObjectName(ConfigurationAdminMBean.OBJECTNAME));
1:     }
1:     
1:     @Ignore("ManagedServiceFactory tests failing.. " +
1:             "Some issues surrounding creating a factory configuration and then retrieving by pid to update.. Needs investigation")
1:     @Test
1:     @SuppressWarnings("unchecked")
1:     public void testMBeanInterface() throws Exception {
1:         
0:         ConfigurationAdminMBean mbean = getMBean(ConfigurationAdminMBean.OBJECTNAME, ConfigurationAdminMBean.class);
0:         assertNotNull(mbean);
1:        
1:         // get bundles
1:         
0:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
0:         assertNotNull(a);
1:         
0:         Bundle b = context().getBundleByName("org.apache.aries.jmx.test.bundleb");
0:         assertNotNull(b);
1:        
1:         
0:         // get services
1:         
0:         ServiceTracker trackerA = new ServiceTracker(bundleContext, InterfaceA.class.getName(), null);
0:         trackerA.open();
0:         InterfaceA managedServiceA = (InterfaceA) trackerA.getService();
0:         assertNotNull(managedServiceA);
1:         
0:         Filter filter = bundleContext.createFilter("(" + Constants.SERVICE_PID + "=jmx.test.B.factory)");
0:         ServiceTracker trackerMSF = new ServiceTracker(bundleContext, filter, null);
0:         trackerMSF.open();
0:         MSF managedFactory = (MSF) trackerMSF.getService();
0:         assertNotNull(managedFactory);
1:         
0:         ServiceTracker tracker = new ServiceTracker(bundleContext, ConfigurationAdmin.class.getName(), null);
0:         tracker.open();
0:         ConfigurationAdmin configAdmin = (ConfigurationAdmin) tracker.getService();
0:         assertNotNull(configAdmin);
1:         
1:         // ManagedService operations
1:         
1:         assertNull(managedServiceA.getConfig());
1:         
1:         // create a configuration for A
1:         TabularData data = mbean.getProperties("org.apache.aries.jmx.test.ServiceA");
1:         assertEquals(0, data.size());
1:         
1:         PropertyData<String> p1 = PropertyData.newInstance("A1", "first");
1:         data.put(p1.toCompositeData());
1:         PropertyData<Integer> p2 = PropertyData.newInstance("A2", 2);
1:         data.put(p2.toCompositeData());
1:         
1:         mbean.update("org.apache.aries.jmx.test.ServiceA", data);
1:         
1:         Thread.sleep(1000);
1:         Dictionary<String, Object> config = managedServiceA.getConfig();
1:         assertNotNull(config);
1:         assertEquals(3, config.size());
1:         assertEquals("org.apache.aries.jmx.test.ServiceA", config.get(Constants.SERVICE_PID));
1:         assertEquals("first", config.get("A1"));
1:         assertEquals(2, config.get("A2"));
1:         
1:         //delete
1:         mbean.deleteForLocation("org.apache.aries.jmx.test.ServiceA", a.getLocation());
1:         
1:         Thread.sleep(1000);
1:         assertNull(managedServiceA.getConfig());
1:         
1:         
1:         // ManagedServiceFactory operations
1:         
1:         String cpid = mbean.createFactoryConfiguration("jmx.test.B.factory");
1:         assertNotNull(cpid);
1:         assertTrue(cpid.contains("jmx.test.B.factory"));
1:         
1:         TabularData fConfig = mbean.getProperties(cpid);
1:         assertNotNull(fConfig);
1:         assertEquals(0, fConfig.values().size());
1:         
1:         PropertyData<String> prop1 = PropertyData.newInstance("B1", "value1");
1:         fConfig.put(prop1.toCompositeData());
1:         PropertyData<Boolean> prop2 = PropertyData.newInstance("B2", true);
1:         fConfig.put(prop2.toCompositeData());
1:         
1:         mbean.update(cpid, fConfig);
1:         
1:         Thread.sleep(1000);
1:         
1:         InterfaceB configured = managedFactory.getConfigured(cpid);
1:         assertNotNull(configured);
1:         config = configured.getConfig();
1:         assertNotNull(config);
1:         assertTrue(config.size() >= 4);
1:         assertEquals("jmx.test.B.factory", config.get(ConfigurationAdmin.SERVICE_FACTORYPID));
1:         assertEquals(cpid, config.get(Constants.SERVICE_PID));
1:         assertEquals("value1", config.get("B1"));
1:         assertEquals("true", config.get("B2"));
1:         
1:         assertEquals("jmx.test.B.factory", mbean.getFactoryPid(cpid));
1:         
1:         mbean.delete(cpid);
1:         
1:         Thread.sleep(1000);
1:         
1:         assertNull(managedFactory.getConfigured(cpid));
1:        
1:         // list operations
1:         
1:         data = mbean.getProperties("org.apache.aries.jmx.test.ServiceA");
1:         assertEquals(0, data.size());
1:         
1:         p1 = PropertyData.newInstance("A1", "a1Value");
1:         data.put(p1.toCompositeData());
1:         
1:         mbean.update("org.apache.aries.jmx.test.ServiceA", data);
1:         
1:         Thread.sleep(1000);
1:         
1:         config = managedServiceA.getConfig();
1:         assertNotNull(config);
1:         assertEquals(2, config.size());
1:         assertEquals("org.apache.aries.jmx.test.ServiceA", config.get(Constants.SERVICE_PID));
1:         assertEquals("a1Value", config.get("A1"));
1: 
1:         
1:         String[][] configurations = mbean.getConfigurations("(A1=a1Value)");
1:         assertNotNull(configurations);
1:         assertEquals(1, configurations.length);
1:         assertEquals("org.apache.aries.jmx.test.ServiceA", configurations[0][0]);
1:         assertEquals(a.getLocation(), configurations[0][1]);
1:         
1:         // delete with filter
1:         mbean.deleteConfigurations("(A1=a1Value)");
1:         
1:         Thread.sleep(1000);
1:         
1:         assertNull(managedServiceA.getConfig());
1:         
0:         //clean up
1:         
0:         trackerA.close();
0:         trackerMSF.close();
0:         tracker.close();
1:         
1:     }
1: }
============================================================================