1:8ad6b99: /*
1:8ad6b99:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ad6b99:  * or more contributor license agreements.  See the NOTICE file
1:8ad6b99:  * distributed with this work for additional information
1:8ad6b99:  * regarding copyright ownership.  The ASF licenses this file
1:8ad6b99:  * to you under the Apache License, Version 2.0 (the
1:8ad6b99:  * "License"); you may not use this file except in compliance
1:8ad6b99:  * with the License.  You may obtain a copy of the License at
1:8ad6b99:  *
1:8ad6b99:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8ad6b99:  *
1:8ad6b99:  * Unless required by applicable law or agreed to in writing,
1:8ad6b99:  * software distributed under the License is distributed on an
1:8ad6b99:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8ad6b99:  * KIND, either express or implied.  See the License for the
1:8ad6b99:  * specific language governing permissions and limitations
1:8ad6b99:  * under the License.
1:8ad6b99:  */
1:8ad6b99: package org.apache.aries.subsystem.core.archive;
15:8ad6b99: 
1:8ad6b99: import java.util.ArrayList;
1:8ad6b99: import java.util.Collection;
1:8ad6b99: import java.util.List;
1:8ad6b99: 
1:8ad6b99: import org.osgi.framework.Constants;
1:8ad6b99: import org.osgi.framework.Version;
1:8ad6b99: import org.osgi.framework.VersionRange;
1:8ad6b99: import org.osgi.resource.Resource;
1:8ad6b99: 
1:2ffcfb9: public class FragmentHostHeader extends AbstractClauseBasedHeader<FragmentHostHeader.Clause> implements RequirementHeader<FragmentHostHeader.Clause> {
1:2ffcfb9: 	public static class Clause extends AbstractClause {
1:8ad6b99: 		public static final String ATTRIBUTE_BUNDLEVERSION = Constants.BUNDLE_VERSION_ATTRIBUTE;
1:8ad6b99: 		
1:8ad6b99: 		public Clause(String clause) {
1:2ffcfb9: 		    super(
1:2ffcfb9:             		parsePath(clause, Patterns.SYMBOLIC_NAME, false), 
1:2ffcfb9:             		parseParameters(clause, false), 
1:2ffcfb9:             		generateDefaultParameters(
1:2ffcfb9:             				new BundleVersionAttribute(
1:2ffcfb9:         		    				new VersionRange(
1:2ffcfb9:         		    						VersionRange.LEFT_CLOSED, 
1:2ffcfb9:         		    						new Version("0"), 
1:2ffcfb9:         		    						null, 
1:2ffcfb9:                                             VersionRange.RIGHT_OPEN))));
24:8ad6b99: 		}
1:8ad6b99: 		
1:8ad6b99: 
1:8ad6b99: 		public String getSymbolicName() {
2:8ad6b99: 			return path;
1:8ad6b99: 		}
1:8ad6b99: 		
1:8ad6b99: 		public FragmentHostRequirement toRequirement(Resource resource) {
1:8ad6b99: 			return new FragmentHostRequirement(this, resource);
1:8ad6b99: 		}
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	public static final String NAME = Constants.FRAGMENT_HOST;
1:8ad6b99: 	
1:8ad6b99: 	public FragmentHostHeader(Collection<Clause> clauses) {
1:2ffcfb9: 	    super(clauses);
1:2ffcfb9:         if (clauses.size() != 1) {
1:2ffcfb9:             throw new IllegalArgumentException("A " + NAME + " header must have one and only one clause");
1:2ffcfb9:         }
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	public FragmentHostHeader(String value) {
1:2ffcfb9: 		super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:2ffcfb9: 		if (clauses.size() != 1) {
1:2ffcfb9:             throw new IllegalArgumentException("A " + NAME + " header must have one and only one clause");
1:2ffcfb9:         }
1:8ad6b99: 	}
1:8ad6b99: 	
11:8ad6b99: 	@Override
1:8ad6b99: 	public String getName() {
1:8ad6b99: 		return NAME;
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public String getValue() {
1:8ad6b99: 		return toString();
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	@Override
1:8ad6b99: 	public List<FragmentHostRequirement> toRequirements(Resource resource) {
1:8ad6b99: 		List<FragmentHostRequirement> requirements = new ArrayList<FragmentHostRequirement>(clauses.size());
1:8ad6b99: 		for (Clause clause : clauses)
1:8ad6b99: 			requirements.add(clause.toRequirement(resource));
1:8ad6b99: 		return requirements;
1:8ad6b99: 	}
1:2ffcfb9: 
1:8ad6b99: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: public class FragmentHostHeader extends AbstractClauseBasedHeader<FragmentHostHeader.Clause> implements RequirementHeader<FragmentHostHeader.Clause> {
1: 	public static class Clause extends AbstractClause {
1: 		    super(
1:             		parsePath(clause, Patterns.SYMBOLIC_NAME, false), 
1:             		parseParameters(clause, false), 
1:             		generateDefaultParameters(
1:             				new BundleVersionAttribute(
1:         		    				new VersionRange(
1:         		    						VersionRange.LEFT_CLOSED, 
1:         		    						new Version("0"), 
1:         		    						null, 
1:                                             VersionRange.RIGHT_OPEN))));
/////////////////////////////////////////////////////////////////////////
1: 	    super(clauses);
1:         if (clauses.size() != 1) {
1:             throw new IllegalArgumentException("A " + NAME + " header must have one and only one clause");
1:         }
1: 		super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
1: 		if (clauses.size() != 1) {
1:             throw new IllegalArgumentException("A " + NAME + " header must have one and only one clause");
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
commit:8ad6b99
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.HashSet;
1: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.VersionRange;
1: import org.osgi.resource.Resource;
1: 
0: public class FragmentHostHeader implements RequirementHeader<FragmentHostHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
1: 		public static final String ATTRIBUTE_BUNDLEVERSION = Constants.BUNDLE_VERSION_ATTRIBUTE;
1: 		
0: 		private static final Pattern PATTERN_SYMBOLICNAME = Pattern.compile('(' + Grammar.SYMBOLICNAME + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PARAMETER = Pattern.compile('(' + Grammar.PARAMETER + ")(?=;|\\z)");
1: 		
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 		    Parameter parameter = parameters.get(ATTRIBUTE_BUNDLEVERSION);
0:             if (parameter == null) {
0:                 parameters.put(ATTRIBUTE_BUNDLEVERSION, 
0:                         new BundleVersionAttribute(
0:                                 new VersionRange(
0:                                         VersionRange.LEFT_CLOSED, 
0:                                         new Version("0"), 
0:                                         null, 
0:                                         VersionRange.RIGHT_OPEN)));
1:             }
1: 		}
1: 		
0: 		private final String path;
0: 		private final Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		
1: 		public Clause(String clause) {
0: 			Matcher matcher = PATTERN_SYMBOLICNAME.matcher(clause);
0: 			if (!matcher.find())
0: 				throw new IllegalArgumentException("Missing symbolic-name: " + clause);
0: 			path = matcher.group();
0: 			matcher.usePattern(PATTERN_PARAMETER);
0: 			while (matcher.find()) {
0: 				Parameter parameter = ParameterFactory.create(matcher.group());
0: 				parameters.put(parameter.getName(), parameter);
1: 			}
0: 			fillInDefaults(parameters);
1: 		}
1: 		
1: 		@Override
0: 		public Attribute getAttribute(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Attribute) {
0: 				return (Attribute)result;
1: 			}
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Attribute> getAttributes() {
0: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
0: 			for (Parameter parameter : parameters.values()) {
0: 				if (parameter instanceof Attribute) {
0: 					attributes.add((Attribute)parameter);
1: 				}
1: 			}
0: 			attributes.trimToSize();
0: 			return attributes;
1: 		}
1: 
1: 		@Override
0: 		public Directive getDirective(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Directive) {
0: 				return (Directive)result;
1: 			}
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Directive> getDirectives() {
0: 			ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
0: 			for (Parameter parameter : parameters.values()) {
0: 				if (parameter instanceof Directive) {
0: 					directives.add((Directive)parameter);
1: 				}
1: 			}
0: 			directives.trimToSize();
0: 			return directives;
1: 		}
1: 
1: 		@Override
0: 		public Parameter getParameter(String name) {
0: 			return parameters.get(name);
1: 		}
1: 
1: 		@Override
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.unmodifiableCollection(parameters.values());
1: 		}
1: 
1: 		@Override
0: 		public String getPath() {
1: 			return path;
1: 		}
1: 		
1: 		public String getSymbolicName() {
1: 			return path;
1: 		}
1: 		
1: 		public FragmentHostRequirement toRequirement(Resource resource) {
1: 			return new FragmentHostRequirement(this, resource);
1: 		}
1: 		
1: 		@Override
0: 		public String toString() {
0: 			StringBuilder builder = new StringBuilder()
0: 					.append(getPath());
0: 			for (Parameter parameter : getParameters()) {
0: 				builder.append(';').append(parameter);
1: 			}
0: 			return builder.toString();
1: 		}
1: 	}
1: 	
1: 	public static final String NAME = Constants.FRAGMENT_HOST;
1: 	
0: 	private static Collection<Clause> processHeader(String header) {
0: 		Set<Clause> clauses = new HashSet<Clause>();
0: 		for (String clause : new ClauseTokenizer(header).getClauses())
0: 			clauses.add(new Clause(clause));
0: 		return clauses;
1: 	}
1: 	
0: 	private final Set<Clause> clauses;
1: 	
1: 	public FragmentHostHeader(Collection<Clause> clauses) {
0: 		if (clauses.size() != 1) {
0: 		    throw new IllegalArgumentException("A " + NAME + " header must have one and only one clause");
1: 		}
0: 		this.clauses = new HashSet<Clause>(clauses);
1: 	}
1: 	
1: 	public FragmentHostHeader(String value) {
0: 		this(processHeader(value));
1: 	}
1: 	
1: 	@Override
0: 	public Collection<FragmentHostHeader.Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
1: 	}
1: 
1: 	@Override
1: 	public String getName() {
1: 		return NAME;
1: 	}
1: 
1: 	@Override
1: 	public String getValue() {
1: 		return toString();
1: 	}
1: 	
1: 	@Override
1: 	public List<FragmentHostRequirement> toRequirements(Resource resource) {
1: 		List<FragmentHostRequirement> requirements = new ArrayList<FragmentHostRequirement>(clauses.size());
1: 		for (Clause clause : clauses)
1: 			requirements.add(clause.toRequirement(resource));
1: 		return requirements;
1: 	}
1: 	
1: 	@Override
0: 	public String toString() {
0: 		StringBuilder builder = new StringBuilder();
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause).append(',');
1: 		}
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
0: 		builder.deleteCharAt(builder.length() - 1);
0: 		return builder.toString();
1: 	}
1: }
============================================================================