1:e9215e0: /**
1:e9215e0:  * Licensed to the Apache Software Foundation (ASF) under one
1:e9215e0:  * or more contributor license agreements.  See the NOTICE file
1:e9215e0:  * distributed with this work for additional information
1:e9215e0:  * regarding copyright ownership.  The ASF licenses this file
1:e9215e0:  * to you under the Apache License, Version 2.0 (the
1:e9215e0:  * "License"); you may not use this file except in compliance
1:e9215e0:  * with the License.  You may obtain a copy of the License at
1:e9215e0:  *
1:e9215e0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e9215e0:  *
1:e9215e0:  * Unless required by applicable law or agreed to in writing,
1:e9215e0:  * software distributed under the License is distributed on an
1:e9215e0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e9215e0:  * KIND, either express or implied.  See the License for the
1:e9215e0:  * specific language governing permissions and limitations
1:e9215e0:  * under the License.
1:e9215e0:  */
1:e9215e0: package org.apache.aries.blueprint.compendium.cm;
1:e9215e0: 
1:e9215e0: import java.util.Dictionary;
1:e9215e0: import java.util.Map;
1:e9215e0: import java.util.concurrent.ConcurrentHashMap;
1:e9215e0: import java.util.concurrent.ExecutorService;
1:e9215e0: import java.util.concurrent.Executors;
1:e9215e0: import java.util.concurrent.TimeUnit;
1:e9215e0: import java.util.concurrent.atomic.AtomicBoolean;
1:e9215e0: 
1:e9215e0: import org.apache.aries.blueprint.utils.JavaUtils;
1:e9215e0: import org.osgi.framework.BundleContext;
1:e9215e0: import org.osgi.framework.ServiceRegistration;
1:e9215e0: import org.osgi.service.cm.ConfigurationException;
1:e9215e0: import org.osgi.service.cm.ManagedServiceFactory;
1:e9215e0: import org.slf4j.Logger;
1:e9215e0: import org.slf4j.LoggerFactory;
1:e9215e0: 
1:e9215e0: public abstract class BaseManagedServiceFactory<T> implements ManagedServiceFactory {
1:e9215e0: 
1:e9215e0:     public static final long DEFAULT_TIMEOUT_BEFORE_INTERRUPT = 30000;
1:e9215e0: 
1:e9215e0:     public static final int CONFIGURATION_ADMIN_OBJECT_DELETED = 1;
1:e9215e0: 
1:e9215e0:     public static final int BUNDLE_STOPPING = 2;
1:e9215e0: 
1:e9215e0:     public static final int INTERNAL_ERROR = 4;
1:e9215e0: 
1:e9215e0:     protected final Logger LOGGER = LoggerFactory.getLogger(getClass());
1:e9215e0: 
1:e9215e0:     private final BundleContext context;
1:e9215e0:     private final String name;
1:e9215e0:     private final long timeoutBeforeInterrupt;
1:e9215e0:     private final AtomicBoolean destroyed;
1:e9215e0:     private final ExecutorService executor;
1:e9215e0:     private final Map<String, Pair<T, ServiceRegistration>> services;
1:e9215e0:     private final Map<ServiceRegistration, T> registrations;
1:e9215e0: 
1:e9215e0:     public BaseManagedServiceFactory(BundleContext context, String name) {
1:e9215e0:         this(context, name, DEFAULT_TIMEOUT_BEFORE_INTERRUPT);
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     public BaseManagedServiceFactory(BundleContext context, String name, long timeoutBeforeInterrupt) {
1:e9215e0:         this.context = context;
1:e9215e0:         this.name = name;
1:e9215e0:         this.timeoutBeforeInterrupt = timeoutBeforeInterrupt;
1:e9215e0:         this.destroyed = new AtomicBoolean(false);
1:e9215e0:         this.executor = Executors.newSingleThreadExecutor();
1:e9215e0:         this.services = new ConcurrentHashMap<String, Pair<T, ServiceRegistration>>();
1:e9215e0:         this.registrations = new ConcurrentHashMap<ServiceRegistration, T>();
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     public String getName() {
1:e9215e0:         return name;
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     public Map<ServiceRegistration, T> getServices() {
1:e9215e0:         return registrations;
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     public void updated(final String pid, final Dictionary properties) throws ConfigurationException {
1:e9215e0:         if (destroyed.get()) {
1:e9215e0:             return;
1:e9215e0:         }
1:e9215e0:         checkConfiguration(pid, properties);
1:e9215e0:         executor.submit(new Runnable() {
1:e9215e0:             public void run() {
1:e9215e0:                 try {
1:e9215e0:                     internalUpdate(pid, properties);
1:e9215e0:                 } catch (Throwable t) {
1:e9215e0:                     LOGGER.warn("Error destroying service for ManagedServiceFactory " + getName(), t);
1:e9215e0:                 }
1:e9215e0:             }
1:e9215e0:         });
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     public void deleted(final String pid) {
1:e9215e0:         if (destroyed.get()) {
1:e9215e0:             return;
1:e9215e0:         }
1:e9215e0:         executor.submit(new Runnable() {
1:e9215e0:             public void run() {
1:e9215e0:                 try {
1:e9215e0:                     internalDelete(pid, CONFIGURATION_ADMIN_OBJECT_DELETED);
1:e9215e0:                 } catch (Throwable throwable) {
1:e9215e0:                     LOGGER.warn("Error destroying service for ManagedServiceFactory " + getName(), throwable);
1:e9215e0:                 }
1:e9215e0:             }
1:e9215e0:         });
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     protected void checkConfiguration(String pid, Dictionary properties) throws ConfigurationException {
1:e9215e0:         // Do nothing
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     protected abstract T doCreate(Dictionary properties) throws Exception;
1:e9215e0: 
1:e9215e0:     protected abstract T doUpdate(T t, Dictionary properties) throws Exception;
1:e9215e0: 
1:e9215e0:     protected abstract void doDestroy(T t, Dictionary properties, int code) throws Exception;
1:e9215e0: 
1:e9215e0:     protected abstract String[] getExposedClasses(T t);
1:e9215e0: 
1:e9215e0:     private void internalUpdate(String pid, Dictionary properties) {
1:e9215e0:         Pair<T, ServiceRegistration> pair = services.get(pid);
1:e9215e0:         if (pair != null) {
1:e9215e0:             try {
1:e9215e0:                 T t = doUpdate(pair.getFirst(), properties);
1:e9215e0:                 pair.setFirst(t);
1:e9215e0:                 pair.getSecond().setProperties(properties);
1:e9215e0:             } catch (Throwable throwable) {
1:e9215e0:                 internalDelete(pid, INTERNAL_ERROR);
1:e9215e0:                 LOGGER.warn("Error updating service for ManagedServiceFactory " + getName(), throwable);
1:e9215e0:             }
1:e9215e0:         } else {
1:e9215e0:             if (destroyed.get()) {
1:e9215e0:                 return;
1:e9215e0:             }
1:e9215e0:             try {
1:e9215e0:                 T t = doCreate(properties);
1:e9215e0:                 try {
1:e9215e0:                     if (destroyed.get()) {
1:e9215e0:                         throw new IllegalStateException("ManagedServiceFactory has been destroyed");
1:e9215e0:                     }
1:e9215e0:                     ServiceRegistration registration = context.registerService(getExposedClasses(t), t, properties);
1:e9215e0:                     services.put(pid, new Pair<T, ServiceRegistration>(t, registration));
1:e9215e0:                     registrations.put(registration,  t);
1:e9215e0:                     postRegister(t, properties, registration);
1:e9215e0:                 } catch (Throwable throwable1) {
1:e9215e0:                     try {
1:e9215e0:                         doDestroy(t, properties, INTERNAL_ERROR);
1:e9215e0:                     } catch (Throwable throwable2) {
1:e9215e0:                         // Ignore
1:e9215e0:                     }
1:e9215e0:                     throw throwable1;
1:e9215e0:                 }
1:e9215e0:             } catch (Throwable throwable) {
1:e9215e0:                 LOGGER.warn("Error creating service for ManagedServiceFactory " + getName(), throwable);
1:e9215e0:             }
1:e9215e0:         }
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     protected void postRegister(T t, Dictionary properties, ServiceRegistration registration) {
1:e9215e0:         // Place holder
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     protected void preUnregister(T t, Dictionary properties, ServiceRegistration registration) {
1:e9215e0:         // Place holder
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     private void internalDelete(String pid, int code) {
1:e9215e0:         Pair<T, ServiceRegistration> pair = services.remove(pid);
1:e9215e0:         if (pair != null) {
1:e9215e0:             registrations.remove(pair.getSecond());
1:e9215e0:             Dictionary properties = JavaUtils.getProperties(pair.getSecond().getReference());
1:e9215e0:             try {
1:e9215e0:                 preUnregister(pair.getFirst(), properties, pair.getSecond());
1:e9215e0:                 pair.getSecond().unregister();
1:e9215e0:             } catch (Throwable t) {
1:e9215e0:                 LOGGER.info("Error unregistering service", t);
1:e9215e0:             }
1:e9215e0:             try {
1:e9215e0:                 doDestroy(pair.getFirst(), properties, code);
1:e9215e0:             } catch (Throwable t) {
1:e9215e0:                 LOGGER.info("Error destroying service", t);
1:e9215e0:             }
1:e9215e0:         }
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     public void destroy() {
1:e9215e0:         if (destroyed.compareAndSet(false, true)) {
1:e9215e0:             executor.shutdown();
1:e9215e0:             try {
1:e9215e0:                 executor.awaitTermination(timeoutBeforeInterrupt, TimeUnit.MILLISECONDS);
1:e9215e0:             } catch (InterruptedException e) {
1:e9215e0:                 throw new RuntimeException("Shutdown interrupted");
1:e9215e0:             }
1:e9215e0:             if (!executor.isTerminated()) {
1:e9215e0:                 executor.shutdownNow();
1:e9215e0:                 try {
1:e9215e0:                     executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
1:e9215e0:                 } catch (InterruptedException e) {
1:e9215e0:                     throw new RuntimeException("Shutdown interrupted");
1:e9215e0:                 }
1:e9215e0:             }
1:e9215e0: 
1:e9215e0:             while (!services.isEmpty()) {
1:e9215e0:                 String pid = services.keySet().iterator().next();
1:e9215e0:                 internalDelete(pid, BUNDLE_STOPPING);
1:e9215e0:             }
1:e9215e0:         }
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     static class Pair<U,V> {
1:e9215e0:         private U first;
1:e9215e0:         private V second;
1:e9215e0:         public Pair(U first, V second) {
1:e9215e0:             this.first = first;
1:e9215e0:             this.second = second;
1:e9215e0:         }
1:e9215e0:         public U getFirst() {
1:e9215e0:             return first;
1:e9215e0:         }
1:e9215e0:         public V getSecond() {
1:e9215e0:             return second;
1:e9215e0:         }
1:e9215e0:         public void setFirst(U first) {
1:e9215e0:             this.first = first;
1:e9215e0:         }
1:e9215e0:         public void setSecond(V second) {
1:e9215e0:             this.second = second;
1:e9215e0:         }
1:e9215e0:     }
1:e9215e0: 
1:e9215e0: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:e9215e0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.compendium.cm;
1: 
1: import java.util.Dictionary;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import org.apache.aries.blueprint.utils.JavaUtils;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.cm.ManagedServiceFactory;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public abstract class BaseManagedServiceFactory<T> implements ManagedServiceFactory {
1: 
1:     public static final long DEFAULT_TIMEOUT_BEFORE_INTERRUPT = 30000;
1: 
1:     public static final int CONFIGURATION_ADMIN_OBJECT_DELETED = 1;
1: 
1:     public static final int BUNDLE_STOPPING = 2;
1: 
1:     public static final int INTERNAL_ERROR = 4;
1: 
1:     protected final Logger LOGGER = LoggerFactory.getLogger(getClass());
1: 
1:     private final BundleContext context;
1:     private final String name;
1:     private final long timeoutBeforeInterrupt;
1:     private final AtomicBoolean destroyed;
1:     private final ExecutorService executor;
1:     private final Map<String, Pair<T, ServiceRegistration>> services;
1:     private final Map<ServiceRegistration, T> registrations;
1: 
1:     public BaseManagedServiceFactory(BundleContext context, String name) {
1:         this(context, name, DEFAULT_TIMEOUT_BEFORE_INTERRUPT);
1:     }
1: 
1:     public BaseManagedServiceFactory(BundleContext context, String name, long timeoutBeforeInterrupt) {
1:         this.context = context;
1:         this.name = name;
1:         this.timeoutBeforeInterrupt = timeoutBeforeInterrupt;
1:         this.destroyed = new AtomicBoolean(false);
1:         this.executor = Executors.newSingleThreadExecutor();
1:         this.services = new ConcurrentHashMap<String, Pair<T, ServiceRegistration>>();
1:         this.registrations = new ConcurrentHashMap<ServiceRegistration, T>();
1:     }
1: 
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     public Map<ServiceRegistration, T> getServices() {
1:         return registrations;
1:     }
1: 
1:     public void updated(final String pid, final Dictionary properties) throws ConfigurationException {
1:         if (destroyed.get()) {
1:             return;
1:         }
1:         checkConfiguration(pid, properties);
1:         executor.submit(new Runnable() {
1:             public void run() {
1:                 try {
1:                     internalUpdate(pid, properties);
1:                 } catch (Throwable t) {
1:                     LOGGER.warn("Error destroying service for ManagedServiceFactory " + getName(), t);
1:                 }
1:             }
1:         });
1:     }
1: 
1:     public void deleted(final String pid) {
1:         if (destroyed.get()) {
1:             return;
1:         }
1:         executor.submit(new Runnable() {
1:             public void run() {
1:                 try {
1:                     internalDelete(pid, CONFIGURATION_ADMIN_OBJECT_DELETED);
1:                 } catch (Throwable throwable) {
1:                     LOGGER.warn("Error destroying service for ManagedServiceFactory " + getName(), throwable);
1:                 }
1:             }
1:         });
1:     }
1: 
1:     protected void checkConfiguration(String pid, Dictionary properties) throws ConfigurationException {
1:         // Do nothing
1:     }
1: 
1:     protected abstract T doCreate(Dictionary properties) throws Exception;
1: 
1:     protected abstract T doUpdate(T t, Dictionary properties) throws Exception;
1: 
1:     protected abstract void doDestroy(T t, Dictionary properties, int code) throws Exception;
1: 
1:     protected abstract String[] getExposedClasses(T t);
1: 
1:     private void internalUpdate(String pid, Dictionary properties) {
1:         Pair<T, ServiceRegistration> pair = services.get(pid);
1:         if (pair != null) {
1:             try {
1:                 T t = doUpdate(pair.getFirst(), properties);
1:                 pair.setFirst(t);
1:                 pair.getSecond().setProperties(properties);
1:             } catch (Throwable throwable) {
1:                 internalDelete(pid, INTERNAL_ERROR);
1:                 LOGGER.warn("Error updating service for ManagedServiceFactory " + getName(), throwable);
1:             }
1:         } else {
1:             if (destroyed.get()) {
1:                 return;
1:             }
1:             try {
1:                 T t = doCreate(properties);
1:                 try {
1:                     if (destroyed.get()) {
1:                         throw new IllegalStateException("ManagedServiceFactory has been destroyed");
1:                     }
1:                     ServiceRegistration registration = context.registerService(getExposedClasses(t), t, properties);
1:                     services.put(pid, new Pair<T, ServiceRegistration>(t, registration));
1:                     registrations.put(registration,  t);
1:                     postRegister(t, properties, registration);
1:                 } catch (Throwable throwable1) {
1:                     try {
1:                         doDestroy(t, properties, INTERNAL_ERROR);
1:                     } catch (Throwable throwable2) {
1:                         // Ignore
1:                     }
1:                     throw throwable1;
1:                 }
1:             } catch (Throwable throwable) {
1:                 LOGGER.warn("Error creating service for ManagedServiceFactory " + getName(), throwable);
1:             }
1:         }
1:     }
1: 
1:     protected void postRegister(T t, Dictionary properties, ServiceRegistration registration) {
1:         // Place holder
1:     }
1: 
1:     protected void preUnregister(T t, Dictionary properties, ServiceRegistration registration) {
1:         // Place holder
1:     }
1: 
1:     private void internalDelete(String pid, int code) {
1:         Pair<T, ServiceRegistration> pair = services.remove(pid);
1:         if (pair != null) {
1:             registrations.remove(pair.getSecond());
1:             Dictionary properties = JavaUtils.getProperties(pair.getSecond().getReference());
1:             try {
1:                 preUnregister(pair.getFirst(), properties, pair.getSecond());
1:                 pair.getSecond().unregister();
1:             } catch (Throwable t) {
1:                 LOGGER.info("Error unregistering service", t);
1:             }
1:             try {
1:                 doDestroy(pair.getFirst(), properties, code);
1:             } catch (Throwable t) {
1:                 LOGGER.info("Error destroying service", t);
1:             }
1:         }
1:     }
1: 
1:     public void destroy() {
1:         if (destroyed.compareAndSet(false, true)) {
1:             executor.shutdown();
1:             try {
1:                 executor.awaitTermination(timeoutBeforeInterrupt, TimeUnit.MILLISECONDS);
1:             } catch (InterruptedException e) {
1:                 throw new RuntimeException("Shutdown interrupted");
1:             }
1:             if (!executor.isTerminated()) {
1:                 executor.shutdownNow();
1:                 try {
1:                     executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
1:                 } catch (InterruptedException e) {
1:                     throw new RuntimeException("Shutdown interrupted");
1:                 }
1:             }
1: 
1:             while (!services.isEmpty()) {
1:                 String pid = services.keySet().iterator().next();
1:                 internalDelete(pid, BUNDLE_STOPPING);
1:             }
1:         }
1:     }
1: 
1:     static class Pair<U,V> {
1:         private U first;
1:         private V second;
1:         public Pair(U first, V second) {
1:             this.first = first;
1:             this.second = second;
1:         }
1:         public U getFirst() {
1:             return first;
1:         }
1:         public V getSecond() {
1:             return second;
1:         }
1:         public void setFirst(U first) {
1:             this.first = first;
1:         }
1:         public void setSecond(V second) {
1:             this.second = second;
1:         }
1:     }
1: 
1: }
============================================================================