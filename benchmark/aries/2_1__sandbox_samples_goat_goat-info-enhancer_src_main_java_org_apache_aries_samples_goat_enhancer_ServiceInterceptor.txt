1:9439520: /**
1:9439520:  * Licensed to the Apache Software Foundation (ASF) under one
1:9439520:  * or more contributor license agreements.  See the NOTICE file
1:9439520:  * distributed with this work for additional information
1:9439520:  * regarding copyright ownership.  The ASF licenses this file
1:9439520:  * to you under the Apache License, Version 2.0 (the
1:9439520:  * "License"); you may not use this file except in compliance
1:9439520:  * with the License.  You may obtain a copy of the License at
1:9439520:  *
1:9439520:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9439520:  *
1:9439520:  * Unless required by applicable law or agreed to in writing,
1:9439520:  * software distributed under the License is distributed on an
1:9439520:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9439520:  * KIND, either express or implied.  See the License for the
1:9439520:  * specific language governing permissions and limitations
1:9439520:  * under the License.
1:9439520:  */
1:9439520: 
1:9439520: package org.apache.aries.samples.goat.enhancer;
1:9439520: 
1:9439520: import java.util.Dictionary;
1:9439520: import java.util.HashMap;
1:9439520: import java.util.Hashtable;
1:9439520: import java.util.Map;
1:9439520: 
1:9439520: import org.apache.aries.samples.goat.api.ModelInfoService;
1:9439520: import org.osgi.framework.BundleContext;
1:9439520: import org.osgi.framework.InvalidSyntaxException;
1:9439520: import org.osgi.framework.ServiceEvent;
1:9439520: import org.osgi.framework.ServiceListener;
1:9439520: import org.osgi.framework.ServiceReference;
1:9439520: import org.osgi.framework.ServiceRegistration;
1:9439520: 
1:9439520: public class ServiceInterceptor implements ServiceListener {
1:9439520: 
1:9439520: 	private static final String DISPLAY_NAME = "displayName";
1:9439520: 	/**
1:9439520:    * 
1:9439520:    */
1:9439520: 	public static final String SERVICE_ID = "service.id";
1:9439520: 	private final BundleContext ctx;
1:9439520: 	private final Map<String, ServiceRegistration> registrations = new HashMap<String, ServiceRegistration>();
1:9439520: 
1:9439520: 	public ServiceInterceptor(BundleContext ctx) {
1:9439520: 		this.ctx = ctx;
1:9439520: 		// Check all the existing services
1:9439520: 		try {
1:9439520: 			// Handle any existing services
1:9439520: 			ServiceReference[] references = ctx.getAllServiceReferences(
1:9439520: 					ModelInfoService.class.getName(), null);
1:9439520: 
1:9439520: 
1:9439520: 			ctx.addServiceListener(this, "(objectclass='"
1:0d5ca95: 						+ ModelInfoService.class.getName() + "')");
1:0d5ca95: 
1:0d5ca95: 			//If we found any service references...
1:0d5ca95: 			if(references != null && references.length != 0) {
1:0d5ca95: 				for (ServiceReference reference : references) {
1:0d5ca95: 					registerServiceEnhancer(reference);
1:0d5ca95: 				}
1:0d5ca95: 			}
1:0d5ca95: 
1:9439520: 
1:9439520: 		} catch (InvalidSyntaxException e) {
1:9439520: 			e.printStackTrace();
2:9439520: 		}
1:9439520: 		// We could listen for find events and mask the original services if we
1:9439520: 		// wanted to
1:9439520: 		// ServiceRegistration findRegistration =
1:9439520: 		// ctx.registerService(FindHook.class.getName(),
1:9439520: 		// new InterceptorFindHook(), null);
1:9439520: 	}
1:9439520: 
1:9439520: 	/*
1:9439520: 	 * (non-Javadoc)
1:9439520: 	 * 
1:9439520: 	 * @see
1:9439520: 	 * org.osgi.framework.ServiceListener#serviceChanged(org.osgi.framework.
1:9439520: 	 * ServiceEvent)
1:9439520: 	 */
1:9439520: 	@Override
1:9439520: 	public void serviceChanged(ServiceEvent event) {
1:9439520: 		ServiceReference reference = event.getServiceReference();
1:9439520: 		if (event != null && event.getType() == ServiceEvent.REGISTERED) {
2:9439520: 			registerServiceEnhancer(reference);
1:9439520: 
1:9439520: 		} else if (event != null
1:9439520: 				&& event.getType() == ServiceEvent.UNREGISTERING) {
1:9439520: 			// Better unregister our enhancer
1:9439520: 			Object id = reference.getProperty(SERVICE_ID);
1:9439520: 			ServiceRegistration registration = registrations.get(id);
1:9439520: 			if (registration != null) {
1:9439520: 				registration.unregister();
1:9439520: 				registrations.remove(id);
1:9439520: 			}
1:9439520: 		}
1:9439520: 
1:9439520: 	}
1:9439520: 
1:9439520: 	@SuppressWarnings({ "rawtypes", "unchecked" })
1:9439520: 	private void registerServiceEnhancer(ServiceReference reference) {
1:9439520: 		Object actualService = ctx.getService(reference);
1:9439520: 
1:9439520: 		if (actualService instanceof ModelInfoService) {
1:9439520: 			ModelInfoService infoService = (ModelInfoService) actualService;
1:9439520: 			Object serviceId = reference.getProperty(SERVICE_ID);
1:9439520: 			Object enhancer = new ModelInfoEnhancerService(infoService);
1:9439520: 			Dictionary properties = new Hashtable();
1:9439520: 			Object originalDisplayName = reference.getProperty(DISPLAY_NAME);
1:9439520: 			properties.put(DISPLAY_NAME, originalDisplayName + " [enhanced]");
1:9439520: 			ServiceRegistration registration = ctx.registerService(
1:9439520: 					ModelInfoService.class.getName(), enhancer, properties);
1:9439520: 			registrations.put(serviceId + "", registration);
1:9439520: 		} else {
1:9439520: 			System.out.println("Oh dear - unexpected service "
1:9439520: 					+ actualService.getClass());
1:9439520: 		}
1:9439520: 	}
1:9439520: 
1:9439520: 	/**
1:9439520:    * 
1:9439520:    */
1:9439520: 	public void stop() {
1:9439520: 		for (ServiceRegistration registration : registrations.values()) {
1:9439520: 			registration.unregister();
1:9439520: 		}
1:9439520: 
1:9439520: 	}
1:9439520: 
1:9439520: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:50bd22c
commit:0d5ca95
/////////////////////////////////////////////////////////////////////////
1: 						+ ModelInfoService.class.getName() + "')");
1: 
1: 			//If we found any service references...
1: 			if(references != null && references.length != 0) {
1: 				for (ServiceReference reference : references) {
1: 					registerServiceEnhancer(reference);
1: 				}
1: 			}
1: 
commit:9439520
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.samples.goat.enhancer;
1: 
1: import java.util.Dictionary;
1: import java.util.HashMap;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
1: import org.apache.aries.samples.goat.api.ModelInfoService;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceEvent;
1: import org.osgi.framework.ServiceListener;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: 
1: public class ServiceInterceptor implements ServiceListener {
1: 
1: 	private static final String DISPLAY_NAME = "displayName";
1: 	/**
1:    * 
1:    */
1: 	public static final String SERVICE_ID = "service.id";
1: 	private final BundleContext ctx;
1: 	private final Map<String, ServiceRegistration> registrations = new HashMap<String, ServiceRegistration>();
1: 
1: 	public ServiceInterceptor(BundleContext ctx) {
1: 		this.ctx = ctx;
1: 		// Check all the existing services
1: 		try {
1: 			// Handle any existing services
1: 			ServiceReference[] references = ctx.getAllServiceReferences(
1: 					ModelInfoService.class.getName(), null);
1: 
0: 			for (ServiceReference reference : references) {
1: 				registerServiceEnhancer(reference);
1: 			}
1: 
1: 			ctx.addServiceListener(this, "(objectclass='"
0: 					+ ModelInfoService.class.getName() + "')");
1: 
1: 		} catch (InvalidSyntaxException e) {
1: 			e.printStackTrace();
1: 		}
1: 		// We could listen for find events and mask the original services if we
1: 		// wanted to
1: 		// ServiceRegistration findRegistration =
1: 		// ctx.registerService(FindHook.class.getName(),
1: 		// new InterceptorFindHook(), null);
1: 	}
1: 
1: 	/*
1: 	 * (non-Javadoc)
1: 	 * 
1: 	 * @see
1: 	 * org.osgi.framework.ServiceListener#serviceChanged(org.osgi.framework.
1: 	 * ServiceEvent)
1: 	 */
1: 	@Override
1: 	public void serviceChanged(ServiceEvent event) {
1: 		ServiceReference reference = event.getServiceReference();
1: 		if (event != null && event.getType() == ServiceEvent.REGISTERED) {
1: 			registerServiceEnhancer(reference);
1: 
1: 		} else if (event != null
1: 				&& event.getType() == ServiceEvent.UNREGISTERING) {
1: 			// Better unregister our enhancer
1: 			Object id = reference.getProperty(SERVICE_ID);
1: 			ServiceRegistration registration = registrations.get(id);
1: 			if (registration != null) {
1: 				registration.unregister();
1: 				registrations.remove(id);
1: 			}
1: 		}
1: 
1: 	}
1: 
1: 	@SuppressWarnings({ "rawtypes", "unchecked" })
1: 	private void registerServiceEnhancer(ServiceReference reference) {
1: 		Object actualService = ctx.getService(reference);
1: 
1: 		if (actualService instanceof ModelInfoService) {
1: 			ModelInfoService infoService = (ModelInfoService) actualService;
1: 			Object serviceId = reference.getProperty(SERVICE_ID);
1: 			Object enhancer = new ModelInfoEnhancerService(infoService);
1: 			Dictionary properties = new Hashtable();
1: 			Object originalDisplayName = reference.getProperty(DISPLAY_NAME);
1: 			properties.put(DISPLAY_NAME, originalDisplayName + " [enhanced]");
1: 			ServiceRegistration registration = ctx.registerService(
1: 					ModelInfoService.class.getName(), enhancer, properties);
1: 			registrations.put(serviceId + "", registration);
1: 		} else {
1: 			System.out.println("Oh dear - unexpected service "
1: 					+ actualService.getClass());
1: 		}
1: 	}
1: 
1: 	/**
1:    * 
1:    */
1: 	public void stop() {
1: 		for (ServiceRegistration registration : registrations.values()) {
1: 			registration.unregister();
1: 		}
1: 
1: 	}
1: 
1: }
============================================================================