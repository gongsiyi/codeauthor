1:2ffcfb9: /*
1:2ffcfb9:  * Licensed under the Apache License, Version 2.0 (the "License");
1:2ffcfb9:  * you may not use this file except in compliance with the License.
1:2ffcfb9:  * You may obtain a copy of the License at
1:2ffcfb9:  *
1:2ffcfb9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2ffcfb9:  *
1:2ffcfb9:  * Unless required by applicable law or agreed to in writing, software
1:2ffcfb9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ffcfb9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ffcfb9:  * See the License for the specific language governing permissions and
1:2ffcfb9:  * limitations under the License.
1:2ffcfb9:  */
1:2ffcfb9: package org.apache.aries.subsystem.core.archive;
1:2ffcfb9: 
1:2ffcfb9: import static org.junit.Assert.assertEquals;
1:2ffcfb9: 
1:2ffcfb9: import java.io.IOException;
1:2ffcfb9: 
1:2ffcfb9: import org.junit.Test;
1:2ffcfb9: 
1:2ffcfb9: public class SubsystemManifestEqualityTest {
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testSubsystemContentEquality() {
1:2ffcfb9:         String headerStr = "org.aries.bundle;start-order:=0;type=osgi.bundle;version=\"1.8.4\";resolution:=mandatory";
1:2ffcfb9:         SubsystemContentHeader header1 = new SubsystemContentHeader(headerStr);
1:2ffcfb9:         SubsystemContentHeader header2 = new SubsystemContentHeader(headerStr);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9: 
1:2ffcfb9:         String headerStr1 = "org.aries.bundle;start-order:=0;type=osgi.bundle;version=\"1.8.4\";resolution:=mandatory";
1:2ffcfb9:         String headerStr2 = "org.aries.bundle;type=osgi.bundle;resolution:=mandatory;version=\"1.8.4\";start-order:=0";
1:2ffcfb9:         header1 = new SubsystemContentHeader(headerStr1);
1:2ffcfb9:         header2 = new SubsystemContentHeader(headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testDynamicImportHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "org.eclipse.jetty.*;version=\"[9.0,10.0)\",*;JavaServlet=contract";
1:2ffcfb9:         String headerStr2 = "*;JavaServlet=contract,org.eclipse.jetty.*;version=\"[9.0,10.0)\"";
1:2ffcfb9:         DynamicImportPackageHeader header1 = new DynamicImportPackageHeader(
1:2ffcfb9:                 headerStr1);
1:2ffcfb9:         DynamicImportPackageHeader header2 = new DynamicImportPackageHeader(
1:2ffcfb9:                 headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testExportPackageHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "javax.servlet;version=\"2.5\",javax.servlet.http; version=\"2.5\"";
1:2ffcfb9:         String headerStr2 = "javax.servlet.http; version=\"2.5\",javax.servlet;version=\"2.5\"";
1:2ffcfb9:         ExportPackageHeader header1 = new ExportPackageHeader(headerStr1);
1:2ffcfb9:         ExportPackageHeader header2 = new ExportPackageHeader(headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testFragmentHostHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "the.parent.bundle;bundle-version=1.2.3";
1:2ffcfb9:         String headerStr2 = "the.parent.bundle;bundle-version=1.2.3";
1:2ffcfb9:         FragmentHostHeader header1 = new FragmentHostHeader(headerStr1);
1:2ffcfb9:         FragmentHostHeader header2 = new FragmentHostHeader(headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testImportPackageHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "javax.servlet;version=\"2.6.0\", javax.servlet.resources;version=\"2.6.0\"";
1:2ffcfb9:         String headerStr2 = "javax.servlet.resources;version=\"2.6.0\",javax.servlet;version=\"2.6.0\"";
1:2ffcfb9:         ImportPackageHeader header1 = new ImportPackageHeader(headerStr1);
1:2ffcfb9:         ImportPackageHeader header2 = new ImportPackageHeader(headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testPreferredProviderHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "org.aries.kernel;version=\"1.0.4\";type=osgi.subsystem.composite";
1:2ffcfb9:         String headerStr2 = "org.aries.kernel;type=osgi.subsystem.composite;version=\"1.0.4\"";
1:2ffcfb9:         PreferredProviderHeader header1 = new PreferredProviderHeader(
1:2ffcfb9:                 headerStr1);
1:2ffcfb9:         PreferredProviderHeader header2 = new PreferredProviderHeader(
1:2ffcfb9:                 headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testProvideCapabilityHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "osgi.contract;osgi.contract=JavaServlet;version:Version=2.5;uses:=\"javax.servlet,javax.servlet.http\"";
1:2ffcfb9:         String headerStr2 = "osgi.contract;uses:=\"javax.servlet,javax.servlet.http\";osgi.contract=JavaServlet;version:Version=2.5";
1:2ffcfb9:         ProvideCapabilityHeader header1 = new ProvideCapabilityHeader(
1:2ffcfb9:                 headerStr1);
1:2ffcfb9:         ProvideCapabilityHeader header2 = new ProvideCapabilityHeader(
1:2ffcfb9:                 headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testProvisionResourceHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "com.acme.logging;type=osgi.bundle;deployed-version=1.0.0";
1:2ffcfb9:         String headerStr2 = "com.acme.logging;deployed-version=1.0.0;type=osgi.bundle";
1:2ffcfb9:         ProvisionResourceHeader header1 = new ProvisionResourceHeader(
1:2ffcfb9:                 headerStr1);
1:2ffcfb9:         ProvisionResourceHeader header2 = new ProvisionResourceHeader(
1:2ffcfb9:                 headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testRequireBundleHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "com.example.acme,com.acme.logging;bundle-version=\"[1.0, 1.1)\"";
1:2ffcfb9:         String headerStr2 = "com.acme.logging;bundle-version=\"[1.0, 1.1)\",com.example.acme";
1:2ffcfb9:         RequireBundleHeader header1 = new RequireBundleHeader(headerStr1);
1:2ffcfb9:         RequireBundleHeader header2 = new RequireBundleHeader(headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testRequireCapabilityHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "osgi.ee; filter:=\"(osgi.ee=*)\",screen.size; filter:=\"(&(width>=800)(height>=600))\"";
1:2ffcfb9:         String headerStr2 = "screen.size; filter:=\"(&(width>=800)(height>=600))\",osgi.ee; filter:=\"(osgi.ee=*)\"";
1:2ffcfb9:         RequireCapabilityHeader header1 = new RequireCapabilityHeader(
1:2ffcfb9:                 headerStr1);
1:2ffcfb9:         RequireCapabilityHeader header2 = new RequireCapabilityHeader(
1:2ffcfb9:                 headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testSubsystemExportServiceHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "com.acme.service.Logging";
1:2ffcfb9:         String headerStr2 = "com.acme.service.Logging";
1:2ffcfb9:         SubsystemExportServiceHeader header1 = new SubsystemExportServiceHeader(
1:2ffcfb9:                 headerStr1);
1:2ffcfb9:         SubsystemExportServiceHeader header2 = new SubsystemExportServiceHeader(
1:2ffcfb9:                 headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testSubsystemImportServiceHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "com.acme.service.Logging";
1:2ffcfb9:         String headerStr2 = "com.acme.service.Logging";
1:2ffcfb9:         SubsystemImportServiceHeader header1 = new SubsystemImportServiceHeader(
1:2ffcfb9:                 headerStr1);
1:2ffcfb9:         SubsystemImportServiceHeader header2 = new SubsystemImportServiceHeader(
1:2ffcfb9:                 headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testSubsystemManifestEquality() throws IOException {
1:2ffcfb9: 
1:2ffcfb9:         SubsystemManifest subsystemManifest1 = new SubsystemManifest(getClass()
1:2ffcfb9:                 .getResourceAsStream("/files/SUBSYSTEM.MF.1"));
1:2ffcfb9:         SubsystemManifest subsystemManifest2 = new SubsystemManifest(getClass()
1:2ffcfb9:                 .getResourceAsStream("/files/SUBSYSTEM.MF.2"));
1:2ffcfb9:         assertEquals(subsystemManifest1, subsystemManifest2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testSubsystemTypeHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "osgi.subsystem.composite";
1:2ffcfb9:         String headerStr2 = "osgi.subsystem.composite";
1:2ffcfb9:         SubsystemTypeHeader header1 = new SubsystemTypeHeader(headerStr1);
1:2ffcfb9:         SubsystemTypeHeader header2 = new SubsystemTypeHeader(headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testSubsystemVersionHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "1.0.0";
1:2ffcfb9:         String headerStr2 = "1.0.0";
1:2ffcfb9:         SubsystemVersionHeader header1 = new SubsystemVersionHeader(headerStr1);
1:2ffcfb9:         SubsystemVersionHeader header2 = new SubsystemVersionHeader(headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:         
1:2ffcfb9:         headerStr2 = "1";
1:2ffcfb9:         header2 = new SubsystemVersionHeader(headerStr2);
1:2ffcfb9:         assertEquals("Equivalent versions should be equal", header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testBundleSymbolicNameHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "com.example.acme;singleton:=true";
1:2ffcfb9:         String headerStr2 = "com.example.acme;singleton:=true";
1:2ffcfb9:         SymbolicNameHeader header1 = new BundleSymbolicNameHeader(headerStr1);
1:2ffcfb9:         SymbolicNameHeader header2 = new BundleSymbolicNameHeader(headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:         
1:2ffcfb9:         headerStr1 = "com.example.acme;fragment-attachment:=never;singleton:=true";
1:2ffcfb9:         headerStr2 = "com.example.acme;singleton:=true;fragment-attachment:=never";
1:2ffcfb9:         header1 = new BundleSymbolicNameHeader(headerStr1);
1:2ffcfb9:         header2 = new BundleSymbolicNameHeader(headerStr2);
1:2ffcfb9:         assertEquals("Equivalent clauses should be equal", header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testSubsystemSymbolicNameHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "org.acme.billing;category=banking";
1:2ffcfb9:         String headerStr2 = "org.acme.billing;category=banking";
1:2ffcfb9:         SymbolicNameHeader header1 = new SubsystemSymbolicNameHeader(
1:2ffcfb9:                 headerStr1);
1:2ffcfb9:         SymbolicNameHeader header2 = new SubsystemSymbolicNameHeader(
1:2ffcfb9:                 headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Test
1:2ffcfb9:     public void testDeployedContentHeaderEquality() {
1:2ffcfb9:         String headerStr1 = "com.acme.logging;type=osgi.bundle;deployed-version=1.0.0";
1:2ffcfb9:         String headerStr2 = "com.acme.logging;type=osgi.bundle;deployed-version=1.0.0";
1:2ffcfb9:         DeployedContentHeader header1 = new DeployedContentHeader(headerStr1);
1:2ffcfb9:         DeployedContentHeader header2 = new DeployedContentHeader(headerStr2);
1:2ffcfb9:         assertEquals(header1, header2);
1:2ffcfb9:     }
1:2ffcfb9: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.IOException;
1: 
1: import org.junit.Test;
1: 
1: public class SubsystemManifestEqualityTest {
1: 
1:     @Test
1:     public void testSubsystemContentEquality() {
1:         String headerStr = "org.aries.bundle;start-order:=0;type=osgi.bundle;version=\"1.8.4\";resolution:=mandatory";
1:         SubsystemContentHeader header1 = new SubsystemContentHeader(headerStr);
1:         SubsystemContentHeader header2 = new SubsystemContentHeader(headerStr);
1:         assertEquals(header1, header2);
1: 
1:         String headerStr1 = "org.aries.bundle;start-order:=0;type=osgi.bundle;version=\"1.8.4\";resolution:=mandatory";
1:         String headerStr2 = "org.aries.bundle;type=osgi.bundle;resolution:=mandatory;version=\"1.8.4\";start-order:=0";
1:         header1 = new SubsystemContentHeader(headerStr1);
1:         header2 = new SubsystemContentHeader(headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testDynamicImportHeaderEquality() {
1:         String headerStr1 = "org.eclipse.jetty.*;version=\"[9.0,10.0)\",*;JavaServlet=contract";
1:         String headerStr2 = "*;JavaServlet=contract,org.eclipse.jetty.*;version=\"[9.0,10.0)\"";
1:         DynamicImportPackageHeader header1 = new DynamicImportPackageHeader(
1:                 headerStr1);
1:         DynamicImportPackageHeader header2 = new DynamicImportPackageHeader(
1:                 headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testExportPackageHeaderEquality() {
1:         String headerStr1 = "javax.servlet;version=\"2.5\",javax.servlet.http; version=\"2.5\"";
1:         String headerStr2 = "javax.servlet.http; version=\"2.5\",javax.servlet;version=\"2.5\"";
1:         ExportPackageHeader header1 = new ExportPackageHeader(headerStr1);
1:         ExportPackageHeader header2 = new ExportPackageHeader(headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testFragmentHostHeaderEquality() {
1:         String headerStr1 = "the.parent.bundle;bundle-version=1.2.3";
1:         String headerStr2 = "the.parent.bundle;bundle-version=1.2.3";
1:         FragmentHostHeader header1 = new FragmentHostHeader(headerStr1);
1:         FragmentHostHeader header2 = new FragmentHostHeader(headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testImportPackageHeaderEquality() {
1:         String headerStr1 = "javax.servlet;version=\"2.6.0\", javax.servlet.resources;version=\"2.6.0\"";
1:         String headerStr2 = "javax.servlet.resources;version=\"2.6.0\",javax.servlet;version=\"2.6.0\"";
1:         ImportPackageHeader header1 = new ImportPackageHeader(headerStr1);
1:         ImportPackageHeader header2 = new ImportPackageHeader(headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testPreferredProviderHeaderEquality() {
1:         String headerStr1 = "org.aries.kernel;version=\"1.0.4\";type=osgi.subsystem.composite";
1:         String headerStr2 = "org.aries.kernel;type=osgi.subsystem.composite;version=\"1.0.4\"";
1:         PreferredProviderHeader header1 = new PreferredProviderHeader(
1:                 headerStr1);
1:         PreferredProviderHeader header2 = new PreferredProviderHeader(
1:                 headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testProvideCapabilityHeaderEquality() {
1:         String headerStr1 = "osgi.contract;osgi.contract=JavaServlet;version:Version=2.5;uses:=\"javax.servlet,javax.servlet.http\"";
1:         String headerStr2 = "osgi.contract;uses:=\"javax.servlet,javax.servlet.http\";osgi.contract=JavaServlet;version:Version=2.5";
1:         ProvideCapabilityHeader header1 = new ProvideCapabilityHeader(
1:                 headerStr1);
1:         ProvideCapabilityHeader header2 = new ProvideCapabilityHeader(
1:                 headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testProvisionResourceHeaderEquality() {
1:         String headerStr1 = "com.acme.logging;type=osgi.bundle;deployed-version=1.0.0";
1:         String headerStr2 = "com.acme.logging;deployed-version=1.0.0;type=osgi.bundle";
1:         ProvisionResourceHeader header1 = new ProvisionResourceHeader(
1:                 headerStr1);
1:         ProvisionResourceHeader header2 = new ProvisionResourceHeader(
1:                 headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testRequireBundleHeaderEquality() {
1:         String headerStr1 = "com.example.acme,com.acme.logging;bundle-version=\"[1.0, 1.1)\"";
1:         String headerStr2 = "com.acme.logging;bundle-version=\"[1.0, 1.1)\",com.example.acme";
1:         RequireBundleHeader header1 = new RequireBundleHeader(headerStr1);
1:         RequireBundleHeader header2 = new RequireBundleHeader(headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testRequireCapabilityHeaderEquality() {
1:         String headerStr1 = "osgi.ee; filter:=\"(osgi.ee=*)\",screen.size; filter:=\"(&(width>=800)(height>=600))\"";
1:         String headerStr2 = "screen.size; filter:=\"(&(width>=800)(height>=600))\",osgi.ee; filter:=\"(osgi.ee=*)\"";
1:         RequireCapabilityHeader header1 = new RequireCapabilityHeader(
1:                 headerStr1);
1:         RequireCapabilityHeader header2 = new RequireCapabilityHeader(
1:                 headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testSubsystemExportServiceHeaderEquality() {
1:         String headerStr1 = "com.acme.service.Logging";
1:         String headerStr2 = "com.acme.service.Logging";
1:         SubsystemExportServiceHeader header1 = new SubsystemExportServiceHeader(
1:                 headerStr1);
1:         SubsystemExportServiceHeader header2 = new SubsystemExportServiceHeader(
1:                 headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testSubsystemImportServiceHeaderEquality() {
1:         String headerStr1 = "com.acme.service.Logging";
1:         String headerStr2 = "com.acme.service.Logging";
1:         SubsystemImportServiceHeader header1 = new SubsystemImportServiceHeader(
1:                 headerStr1);
1:         SubsystemImportServiceHeader header2 = new SubsystemImportServiceHeader(
1:                 headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testSubsystemManifestEquality() throws IOException {
1: 
1:         SubsystemManifest subsystemManifest1 = new SubsystemManifest(getClass()
1:                 .getResourceAsStream("/files/SUBSYSTEM.MF.1"));
1:         SubsystemManifest subsystemManifest2 = new SubsystemManifest(getClass()
1:                 .getResourceAsStream("/files/SUBSYSTEM.MF.2"));
1:         assertEquals(subsystemManifest1, subsystemManifest2);
1:     }
1: 
1:     @Test
1:     public void testSubsystemTypeHeaderEquality() {
1:         String headerStr1 = "osgi.subsystem.composite";
1:         String headerStr2 = "osgi.subsystem.composite";
1:         SubsystemTypeHeader header1 = new SubsystemTypeHeader(headerStr1);
1:         SubsystemTypeHeader header2 = new SubsystemTypeHeader(headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testSubsystemVersionHeaderEquality() {
1:         String headerStr1 = "1.0.0";
1:         String headerStr2 = "1.0.0";
1:         SubsystemVersionHeader header1 = new SubsystemVersionHeader(headerStr1);
1:         SubsystemVersionHeader header2 = new SubsystemVersionHeader(headerStr2);
1:         assertEquals(header1, header2);
1:         
1:         headerStr2 = "1";
1:         header2 = new SubsystemVersionHeader(headerStr2);
1:         assertEquals("Equivalent versions should be equal", header1, header2);
1:     }
1: 
1:     @Test
1:     public void testBundleSymbolicNameHeaderEquality() {
1:         String headerStr1 = "com.example.acme;singleton:=true";
1:         String headerStr2 = "com.example.acme;singleton:=true";
1:         SymbolicNameHeader header1 = new BundleSymbolicNameHeader(headerStr1);
1:         SymbolicNameHeader header2 = new BundleSymbolicNameHeader(headerStr2);
1:         assertEquals(header1, header2);
1:         
1:         headerStr1 = "com.example.acme;fragment-attachment:=never;singleton:=true";
1:         headerStr2 = "com.example.acme;singleton:=true;fragment-attachment:=never";
1:         header1 = new BundleSymbolicNameHeader(headerStr1);
1:         header2 = new BundleSymbolicNameHeader(headerStr2);
1:         assertEquals("Equivalent clauses should be equal", header1, header2);
1:     }
1: 
1:     @Test
1:     public void testSubsystemSymbolicNameHeaderEquality() {
1:         String headerStr1 = "org.acme.billing;category=banking";
1:         String headerStr2 = "org.acme.billing;category=banking";
1:         SymbolicNameHeader header1 = new SubsystemSymbolicNameHeader(
1:                 headerStr1);
1:         SymbolicNameHeader header2 = new SubsystemSymbolicNameHeader(
1:                 headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: 
1:     @Test
1:     public void testDeployedContentHeaderEquality() {
1:         String headerStr1 = "com.acme.logging;type=osgi.bundle;deployed-version=1.0.0";
1:         String headerStr2 = "com.acme.logging;type=osgi.bundle;deployed-version=1.0.0";
1:         DeployedContentHeader header1 = new DeployedContentHeader(headerStr1);
1:         DeployedContentHeader header2 = new DeployedContentHeader(headerStr2);
1:         assertEquals(header1, header2);
1:     }
1: }
============================================================================