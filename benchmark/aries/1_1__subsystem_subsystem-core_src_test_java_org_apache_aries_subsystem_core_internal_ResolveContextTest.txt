1:9652a71: /*
1:9652a71:  * Licensed under the Apache License, Version 2.0 (the "License");
1:9652a71:  * you may not use this file except in compliance with the License.
1:9652a71:  * You may obtain a copy of the License at
1:9652a71:  *
1:9652a71:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9652a71:  *
1:9652a71:  * Unless required by applicable law or agreed to in writing, software
1:9652a71:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9652a71:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9652a71:  * See the License for the specific language governing permissions and
1:9652a71:  * limitations under the License.
1:9652a71:  */
1:9652a71: package org.apache.aries.subsystem.core.internal;
1:9652a71: 
1:9652a71: import java.io.File;
1:9652a71: import java.lang.reflect.Field;
1:9652a71: import java.util.ArrayList;
1:9652a71: import java.util.Collection;
1:9652a71: import java.util.List;
1:9652a71: 
1:9652a71: import org.easymock.EasyMock;
1:9652a71: import org.junit.Test;
1:9652a71: import org.osgi.framework.BundleContext;
1:9652a71: import org.osgi.resource.Capability;
1:9652a71: import org.osgi.service.resolver.HostedCapability;
1:9652a71: 
1:9652a71: import static org.junit.Assert.assertEquals;
1:9652a71: import static org.junit.Assert.assertSame;
1:9652a71: 
1:9652a71: public class ResolveContextTest {
1:9652a71:     @Test
1:9652a71:     public void testInsertHostedCapability() throws Exception {
1:9652a71:         Activator prev = getActivator();
1:9652a71:         try {
1:9652a71:             Activator activator = createActivator();
1:9652a71:             setActivator(activator);
1:9652a71: 
1:9652a71:             SubsystemResource res = new SubsystemResource(new File("."));
1:9652a71:             ResolveContext rc = new ResolveContext(res);
1:9652a71: 
1:9652a71:             HostedCapability hc = EasyMock.createNiceMock(HostedCapability.class);
1:9652a71: 
1:9652a71:             List<Capability> caps = new ArrayList<Capability>() {
1:9652a71:                 // Must use add(idx, obj), get the other add() overloads to complain
1:9652a71: 
1:9652a71:                 @Override
1:9652a71:                 public boolean add(Capability e) {
1:9652a71:                     throw new UnsupportedOperationException();
1:9652a71:                 }
1:9652a71: 
1:9652a71:                 @Override
1:9652a71:                 public boolean addAll(Collection<? extends Capability> c) {
1:9652a71:                     throw new UnsupportedOperationException();
1:9652a71:                 }
1:9652a71: 
1:9652a71:                 @Override
1:9652a71:                 public boolean addAll(int index, Collection<? extends Capability> c) {
1:9652a71:                     throw new UnsupportedOperationException();
1:9652a71:                 }
1:9652a71:             };
1:9652a71:             caps.add(0, EasyMock.createNiceMock(HostedCapability.class));
1:9652a71: 
1:9652a71:             assertEquals(1, rc.insertHostedCapability(caps, hc));
1:9652a71:             assertSame(hc, caps.get(1));
1:9652a71:         } finally {
1:9652a71:             setActivator(prev);
1:9652a71:         }
1:9652a71:     }
1:9652a71: 
1:9652a71:     private Activator createActivator() throws Exception {
1:9652a71:         BundleContext bc = EasyMock.createNiceMock(BundleContext.class);
1:9652a71:         EasyMock.replay(bc);
1:9652a71: 
1:9652a71:         Activator a = new Activator();
1:9652a71: 
1:9652a71:         Field f = Activator.class.getDeclaredField("subsystems");
1:9652a71:         f.setAccessible(true);
1:9652a71:         f.set(a, new Subsystems());
1:9652a71: 
1:9652a71:         Field f2 = Activator.class.getDeclaredField("systemRepositoryManager");
1:9652a71:         f2.setAccessible(true);
1:9652a71:         f2.set(a, new SystemRepositoryManager(bc));
1:9652a71: 
1:9652a71:         return a;
1:9652a71:     }
1:9652a71: 
1:9652a71:     private Activator getActivator() throws Exception {
1:9652a71:         Field f = Activator.class.getDeclaredField("instance");
1:9652a71:         f.setAccessible(true);
1:9652a71:         return (Activator) f.get(null);
1:9652a71:     }
1:9652a71: 
1:9652a71:     private void setActivator(Activator a) throws Exception {
1:9652a71:         Field f = Activator.class.getDeclaredField("instance");
1:9652a71:         f.setAccessible(true);
1:9652a71:         f.set(null, a);
1:9652a71:     }
1:9652a71: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:9652a71
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.io.File;
1: import java.lang.reflect.Field;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import org.easymock.EasyMock;
1: import org.junit.Test;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.resource.Capability;
1: import org.osgi.service.resolver.HostedCapability;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertSame;
1: 
1: public class ResolveContextTest {
1:     @Test
1:     public void testInsertHostedCapability() throws Exception {
1:         Activator prev = getActivator();
1:         try {
1:             Activator activator = createActivator();
1:             setActivator(activator);
1: 
1:             SubsystemResource res = new SubsystemResource(new File("."));
1:             ResolveContext rc = new ResolveContext(res);
1: 
1:             HostedCapability hc = EasyMock.createNiceMock(HostedCapability.class);
1: 
1:             List<Capability> caps = new ArrayList<Capability>() {
1:                 // Must use add(idx, obj), get the other add() overloads to complain
1: 
1:                 @Override
1:                 public boolean add(Capability e) {
1:                     throw new UnsupportedOperationException();
1:                 }
1: 
1:                 @Override
1:                 public boolean addAll(Collection<? extends Capability> c) {
1:                     throw new UnsupportedOperationException();
1:                 }
1: 
1:                 @Override
1:                 public boolean addAll(int index, Collection<? extends Capability> c) {
1:                     throw new UnsupportedOperationException();
1:                 }
1:             };
1:             caps.add(0, EasyMock.createNiceMock(HostedCapability.class));
1: 
1:             assertEquals(1, rc.insertHostedCapability(caps, hc));
1:             assertSame(hc, caps.get(1));
1:         } finally {
1:             setActivator(prev);
1:         }
1:     }
1: 
1:     private Activator createActivator() throws Exception {
1:         BundleContext bc = EasyMock.createNiceMock(BundleContext.class);
1:         EasyMock.replay(bc);
1: 
1:         Activator a = new Activator();
1: 
1:         Field f = Activator.class.getDeclaredField("subsystems");
1:         f.setAccessible(true);
1:         f.set(a, new Subsystems());
1: 
1:         Field f2 = Activator.class.getDeclaredField("systemRepositoryManager");
1:         f2.setAccessible(true);
1:         f2.set(a, new SystemRepositoryManager(bc));
1: 
1:         return a;
1:     }
1: 
1:     private Activator getActivator() throws Exception {
1:         Field f = Activator.class.getDeclaredField("instance");
1:         f.setAccessible(true);
1:         return (Activator) f.get(null);
1:     }
1: 
1:     private void setActivator(Activator a) throws Exception {
1:         Field f = Activator.class.getDeclaredField("instance");
1:         f.setAccessible(true);
1:         f.set(null, a);
1:     }
1: }
============================================================================