1:96e072c: /*
1:96e072c:  * Licensed to the Apache Software Foundation (ASF) under one
1:96e072c:  * or more contributor license agreements.  See the NOTICE file
1:96e072c:  * distributed with this work for additional information
1:96e072c:  * regarding copyright ownership.  The ASF licenses this file
1:96e072c:  * to you under the Apache License, Version 2.0 (the
1:96e072c:  * "License"); you may not use this file except in compliance
1:96e072c:  * with the License.  You may obtain a copy of the License at
1:96e072c:  *
1:96e072c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:96e072c:  *
1:96e072c:  * Unless required by applicable law or agreed to in writing,
1:96e072c:  * software distributed under the License is distributed on an
1:96e072c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:96e072c:  * KIND, either express or implied.  See the License for the
1:96e072c:  * specific language governing permissions and limitations
1:96e072c:  * under the License.
1:96e072c:  */
1:96e072c: package org.apache.aries.jpa.blueprint.impl;
1:96e072c: 
1:96e072c: import javax.persistence.EntityManager;
1:96e072c: 
1:96e072c: import org.osgi.service.coordinator.Coordination;
1:96e072c: import org.osgi.service.coordinator.Participant;
1:ec3ea65: import org.slf4j.Logger;
1:ec3ea65: import org.slf4j.LoggerFactory;
1:96e072c: 
1:c97f185: final class ResourceLocalTransactionParticipant implements Participant {
1:ec3ea65:     private static final Logger LOG = LoggerFactory.getLogger(ResourceLocalTransactionParticipant.class);
1:96e072c:     private final EntityManager em;
1:96e072c: 
1:c97f185:     ResourceLocalTransactionParticipant(EntityManager em) {
1:96e072c:         this.em = em;
1:c97f185:         em.getTransaction().begin();
1:96e072c:     }
1:96e072c: 
1:96e072c:     @Override
1:96e072c:     public void failed(Coordination coordination) throws Exception {
1:96e072c:         em.getTransaction().setRollbackOnly();
1:96e072c:     }
1:96e072c: 
1:96e072c:     @Override
1:96e072c:     public void ended(Coordination coordination) throws Exception {
1:96e072c:         if (em.getTransaction().getRollbackOnly()) {
1:96e072c:             try {
1:96e072c:                 em.getTransaction().rollback();
1:ec3ea65:              } catch (Exception e) {
1:ec3ea65:                 LOG.debug("Exception on transaction rollback", e);
1:96e072c:              }
1:96e072c:         } else {
1:96e072c:             em.getTransaction().commit();
1:96e072c:         }
1:96e072c:     }
1:96e072c: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ResourceLocalTransactionParticipant.class);
/////////////////////////////////////////////////////////////////////////
1:              } catch (Exception e) {
1:                 LOG.debug("Exception on transaction rollback", e);
commit:c97f185
/////////////////////////////////////////////////////////////////////////
1: final class ResourceLocalTransactionParticipant implements Participant {
1:     ResourceLocalTransactionParticipant(EntityManager em) {
1:         em.getTransaction().begin();
commit:96e072c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.blueprint.impl;
1: 
1: import javax.persistence.EntityManager;
1: 
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.coordinator.Participant;
1: 
0: final class JPAParticipant implements Participant {
1:     private final EntityManager em;
1: 
0:     JPAParticipant(EntityManager em) {
1:         this.em = em;
1:     }
1: 
1:     @Override
1:     public void failed(Coordination coordination) throws Exception {
1:         em.getTransaction().setRollbackOnly();
1:     }
1: 
1:     @Override
1:     public void ended(Coordination coordination) throws Exception {
1:         if (em.getTransaction().getRollbackOnly()) {
1:             try {
1:                 em.getTransaction().rollback();
0:              } catch (Exception e1) {
0:                  // Ignore
1:              }
1:         } else {
1:             em.getTransaction().commit();
1:         }
1:     }
1: }
============================================================================