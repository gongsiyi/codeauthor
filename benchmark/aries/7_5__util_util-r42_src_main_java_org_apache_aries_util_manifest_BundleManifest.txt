1:8914925: /*
1:8914925:  * Licensed to the Apache Software Foundation (ASF) under one
1:8914925:  * or more contributor license agreements.  See the NOTICE file
1:8914925:  * distributed with this work for additional information
1:8914925:  * regarding copyright ownership.  The ASF licenses this file
1:8914925:  * to you under the Apache License, Version 2.0 (the
1:8914925:  * "License"); you may not use this file except in compliance
1:8914925:  * with the License.  You may obtain a copy of the License at
6:8914925:  *
1:8914925:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8914925:  *
1:8914925:  * Unless required by applicable law or agreed to in writing,
1:8914925:  * software distributed under the License is distributed on an
1:8914925:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8914925:  * KIND, either express or implied.  See the License for the
1:8914925:  * specific language governing permissions and limitations
1:8914925:  * under the License.
1:8914925:  */
15:8914925: 
1:910fec0: package org.apache.aries.util.manifest;
1:8914925: 
1:8914925: import java.io.File;
1:8914925: import java.io.FileInputStream;
1:8914925: import java.io.IOException;
1:8914925: import java.io.InputStream;
1:8914925: import java.util.jar.Attributes;
1:8914925: import java.util.jar.JarInputStream;
1:8914925: import java.util.jar.Manifest;
1:8914925: import java.util.zip.ZipEntry;
1:8914925: 
1:8ab18a7: import org.apache.aries.util.IORuntimeException;
1:910fec0: import org.apache.aries.util.filesystem.IFile;
1:910fec0: import org.apache.aries.util.internal.MessageUtil;
1:c6cb34d: import org.apache.aries.util.io.IOUtils;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;
1:8914925: import org.osgi.framework.Constants;
1:8914925: import org.osgi.framework.Version;
1:8914925: 
1:8914925: /**
1:8914925:  * Entity class to retrieve and represent a bundle manifest (valid or invalid).
1:8914925:  */
1:8914925: public class BundleManifest
1:8914925: {
1:8914925:   private static final String MANIFEST_PATH = "META-INF/MANIFEST.MF";
1:8914925: 
1:8914925:   /**
1:8914925:    * Read a manifest from a jar input stream. This will find the manifest even if it is NOT
1:8914925:    * the first file in the archive.
1:8ab18a7:    *
1:7937e00:    * @param is the jar input stream
1:7937e00:    * @return the bundle manifest
1:8914925:    */
1:8914925:   public static BundleManifest fromBundle(InputStream is) {
1:8914925:     JarInputStream jarIs = null;
1:8914925:     try {
1:8914925:       jarIs = new JarInputStream(is);
1:8914925:       Manifest m = jarIs.getManifest();
1:8914925:       if (m != null)
1:8914925:         return new BundleManifest(m);
1:8914925:       else {
1:8914925:         ZipEntry entry;
1:8914925:         while ((entry = jarIs.getNextEntry()) != null) {
1:8914925:           if (entry.getName().equals(MANIFEST_PATH))
1:8914925:             return new BundleManifest(jarIs);
1:8914925:         }
1:8ab18a7: 
5:8914925:         return null;
1:8914925:       }
1:8914925:     }
1:8914925:     catch (IOException e) {
1:8ab18a7:       throw new IORuntimeException("IOException in BundleManifest()", e);
1:8914925:     }
1:8914925:     finally {
1:8914925:       IOUtils.close(jarIs);
1:8914925:     }
1:8914925:   }
1:8ab18a7: 
1:8914925:   /**
1:8914925:    * Retrieve a BundleManifest from the given jar file
1:8ab18a7:    *
1:7937e00:    * @param f the bundle jar file
1:7937e00:    * @return the bundle manifest
1:8914925:    */
1:8914925:   public static BundleManifest fromBundle(IFile f) {
1:8914925:     InputStream is = null;
1:8914925:     try {
1:8914925:       if (f.isDirectory()) {
1:8914925:         IFile manFile = f.convert().getFile(MANIFEST_PATH);
1:8914925:         if (manFile != null)
1:8914925:           return new BundleManifest(manFile.open());
1:8914925:         else
1:8914925:           return null;
1:8914925:       } else {
1:8914925:         is = f.open();
1:8914925:         return fromBundle(is);
1:8914925:       }
1:8914925:     } catch (IOException e) {
1:8ab18a7:       throw new IORuntimeException("IOException in BundleManifest.fromBundle(IFile)", e);
1:8914925:     }
1:8914925:     finally {
1:8914925:       IOUtils.close(is);
1:8914925:     }
1:8914925:   }
1:8ab18a7: 
1:8914925:   /**
1:8914925:    * Retrieve a bundle manifest from the given jar file, which can be exploded or compressed
1:8ab18a7:    *
1:7937e00:    * @param f the bundle jar file
1:7937e00:    * @return the bundle manifest
1:8914925:    */
1:8914925:   public static BundleManifest fromBundle(File f) {
1:8914925:     if (f.isDirectory()) {
1:8914925:       File manifestFile = new File(f, MANIFEST_PATH);
1:8914925:       if (manifestFile.isFile())
1:8914925:         try {
1:8914925:           return new BundleManifest(new FileInputStream(manifestFile));
1:8914925:         }
1:8914925:         catch (IOException e) {
1:8ab18a7:           throw new IORuntimeException("IOException in BundleManifest.fromBundle(File)", e);
1:8914925:         }
1:8914925:       else
1:8914925:         return null;
1:8914925:     }
1:8914925:     else  if (f.isFile()) {
1:8914925:       try {
1:8914925:         return fromBundle(new FileInputStream(f));
1:8914925:       }
1:8914925:       catch (IOException e) {
1:8ab18a7:         throw new IORuntimeException("IOException in BundleManifest.fromBundle(File)", e);
1:8914925:       }
1:8914925:     }
1:8914925:     else {
1:910fec0:       throw new IllegalArgumentException(MessageUtil.getMessage("UTIL0016E", f.getAbsolutePath()));
1:8914925:     }
1:8914925:   }
1:8ab18a7: 
1:8914925:   private Manifest manifest;
1:8ab18a7: 
1:8914925:   /**
1:8914925:    * Create a BundleManifest object from the InputStream to the manifest (not to the bundle)
1:8914925:    * @param manifestIs
1:8914925:    * @throws IOException
1:8914925:    */
1:8914925:   public BundleManifest(InputStream manifestIs) throws IOException {
1:8914925:     this(ManifestProcessor.parseManifest(manifestIs));
1:8914925:   }
1:8ab18a7: 
1:8914925:   /**
1:8914925:    * Create a BundleManifest object from a common Manifest object
1:8914925:    * @param m
1:8914925:    */
1:8914925:   public BundleManifest(Manifest m) {
1:8914925:     manifest = m;
1:8914925:   }
1:8ab18a7: 
1:8914925:   public String getSymbolicName() {
1:8914925:     String rawSymName = manifest.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLICNAME);
1:8914925: 
1:8914925:     String result = null;
1:8914925:     if (rawSymName != null) {
1:de5b346:       NameValuePair info = ManifestHeaderProcessor.parseBundleSymbolicName(rawSymName);
1:8914925:       result = info.getName();
1:8914925:     }
1:8ab18a7: 
1:8914925:     return result;
1:8914925:   }
1:8ab18a7: 
1:8914925:   public Version getVersion() {
1:8914925:     String specifiedVersion = manifest.getMainAttributes().getValue(Constants.BUNDLE_VERSION);
1:8914925:     Version result = (specifiedVersion == null) ? Version.emptyVersion : new Version(specifiedVersion);
1:8ab18a7: 
1:8914925:     return result;
1:8914925:   }
1:8ab18a7: 
1:8914925:   public String getManifestVersion() {
1:8914925:     return manifest.getMainAttributes().getValue(Constants.BUNDLE_MANIFESTVERSION);
1:8914925:   }
1:8ab18a7: 
1:8914925:   public Attributes getRawAttributes() {
1:8914925:     return manifest.getMainAttributes();
1:8914925:   }
1:8ab18a7: 
1:8914925:   public Manifest getRawManifest() {
1:8914925:     return manifest;
1:8914925:   }
1:8ab18a7: 
1:8914925:   public boolean isValid() {
1:a7a620a:     return getManifestVersion() != null && getSymbolicName() != null;
1:8914925:   }
1:8914925: }
1:8914925: 
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:7937e00
/////////////////////////////////////////////////////////////////////////
1:    * @param is the jar input stream
1:    * @return the bundle manifest
/////////////////////////////////////////////////////////////////////////
1:    * @param f the bundle jar file
1:    * @return the bundle manifest
/////////////////////////////////////////////////////////////////////////
1:    * @param f the bundle jar file
1:    * @return the bundle manifest
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:8ab18a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.IORuntimeException;
/////////////////////////////////////////////////////////////////////////
1:    *
/////////////////////////////////////////////////////////////////////////
1: 
1:       throw new IORuntimeException("IOException in BundleManifest()", e);
1: 
1:    *
/////////////////////////////////////////////////////////////////////////
1:       throw new IORuntimeException("IOException in BundleManifest.fromBundle(IFile)", e);
1: 
1:    *
/////////////////////////////////////////////////////////////////////////
1:           throw new IORuntimeException("IOException in BundleManifest.fromBundle(File)", e);
/////////////////////////////////////////////////////////////////////////
1:         throw new IORuntimeException("IOException in BundleManifest.fromBundle(File)", e);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.io.IOUtils;
commit:de5b346
/////////////////////////////////////////////////////////////////////////
1:       NameValuePair info = ManifestHeaderProcessor.parseBundleSymbolicName(rawSymName);
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.manifest;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.IFile;
0: import org.apache.aries.util.filesystem.IOUtils;
1: import org.apache.aries.util.internal.MessageUtil;
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValueMap;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;
/////////////////////////////////////////////////////////////////////////
0:   private static final Logger _logger = LoggerFactory.getLogger(BundleManifest.class.getName());
/////////////////////////////////////////////////////////////////////////
1:       throw new IllegalArgumentException(MessageUtil.getMessage("UTIL0016E", f.getAbsolutePath()));
commit:0682684
/////////////////////////////////////////////////////////////////////////
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:a7a620a
/////////////////////////////////////////////////////////////////////////
1:     return getManifestVersion() != null && getSymbolicName() != null;
commit:c60a8af
/////////////////////////////////////////////////////////////////////////
0:     // TODO when either the derby jar is a valid R4 bundle, or we fix the itest we need to comment out this bit.
0:     // NOTE I have a test for the resolver to show it works, but it fails with the commented out bit. This is because
0:     //      derby don't produce valid OSGi R4 bundles. That is being fixed, but I'll remove the need for it in a test
0:     //      soon, but I wanted to get something in to test things while I work on the update.
0:     return /*getManifestVersion() != null && */ getSymbolicName() != null;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.utils.manifest;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarInputStream;
1: import java.util.jar.Manifest;
1: import java.util.zip.ZipEntry;
1: 
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.utils.filesystem.IOUtils;
0: import org.apache.aries.application.utils.internal.MessageUtil;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValuePair;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Entity class to retrieve and represent a bundle manifest (valid or invalid).
1:  * 
0:  * @author mahrwald
1:  *
1:  */
1: public class BundleManifest
1: {
1:   private static final String MANIFEST_PATH = "META-INF/MANIFEST.MF";
0:   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.utils");
1: 
1:   /**
1:    * Read a manifest from a jar input stream. This will find the manifest even if it is NOT
1:    * the first file in the archive.
1:    * 
0:    * @param is
0:    * @return
1:    */
1:   public static BundleManifest fromBundle(InputStream is) {
1:     JarInputStream jarIs = null;
1:     try {
1:       jarIs = new JarInputStream(is);
1:       Manifest m = jarIs.getManifest();
1:       if (m != null)
1:         return new BundleManifest(m);
1:       else {
1:         ZipEntry entry;
1:         while ((entry = jarIs.getNextEntry()) != null) {
1:           if (entry.getName().equals(MANIFEST_PATH))
1:             return new BundleManifest(jarIs);
1:         }
1:         
1:         return null;
1:       }
1:     }
1:     catch (IOException e) {
0:       _logger.error ("IOException in BundleManifest()", e);
1:       return null;
1:     }
1:     finally {
1:       IOUtils.close(jarIs);
1:     }
1:   }
1:   
1:   /**
1:    * Retrieve a BundleManifest from the given jar file
1:    * 
0:    * @param f
0:    * @return
1:    */
1:   public static BundleManifest fromBundle(IFile f) {
1:     InputStream is = null;
1:     try {
1:       if (f.isDirectory()) {
1:         IFile manFile = f.convert().getFile(MANIFEST_PATH);
1:         if (manFile != null)
1:           return new BundleManifest(manFile.open());
1:         else
1:           return null;
1:       } else {
1:         is = f.open();
1:         return fromBundle(is);
1:       }
1:     } catch (IOException e) {
0:       _logger.error ("IOException in BundleManifest.fromBundle(IFile)", e);
1:       return null;
1:     }
1:     finally {
1:       IOUtils.close(is);
1:     }
1:   }
1:   
1:   /**
1:    * Retrieve a bundle manifest from the given jar file, which can be exploded or compressed
1:    * 
0:    * @param f
0:    * @return
1:    */
1:   public static BundleManifest fromBundle(File f) {
1:     if (f.isDirectory()) {
1:       File manifestFile = new File(f, MANIFEST_PATH);
1:       if (manifestFile.isFile())
1:         try {
1:           return new BundleManifest(new FileInputStream(manifestFile));
1:         }
1:         catch (IOException e) {
0:           _logger.error ("IOException in BundleManifest.fromBundle(File)", e);
1:           return null;
1:         }
1:       else
1:         return null;
1:     }
1:     else  if (f.isFile()) {
1:       try {
1:         return fromBundle(new FileInputStream(f));
1:       }
1:       catch (IOException e) {
0:         _logger.error ("IOException in BundleManifest.fromBundle(File)", e);
1:         return null;
1:       }
1:     }
1:     else {
0:       throw new IllegalArgumentException(MessageUtil.getMessage("APPUTILS0007E", f.getAbsolutePath()));
1:     }
1:   }
1:   
1:   private Manifest manifest;
1:   
1:   /**
1:    * Create a BundleManifest object from the InputStream to the manifest (not to the bundle)
1:    * @param manifestIs
1:    * @throws IOException
1:    */
1:   public BundleManifest(InputStream manifestIs) throws IOException {
1:     this(ManifestProcessor.parseManifest(manifestIs));
1:   }
1:   
1:   /**
1:    * Create a BundleManifest object from a common Manifest object
1:    * @param m
1:    */
1:   public BundleManifest(Manifest m) {
1:     manifest = m;
1:   }
1:   
1:   public String getSymbolicName() {
1:     String rawSymName = manifest.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLICNAME);
1: 
1:     String result = null;
1:     if (rawSymName != null) {
0:       NameValuePair<String, NameValueMap<String, String>> info = ManifestHeaderProcessor.parseBundleSymbolicName(rawSymName);
1:       result = info.getName();
1:     }
1:     
1:     return result;
1:   }
1:   
1:   public Version getVersion() {
1:     String specifiedVersion = manifest.getMainAttributes().getValue(Constants.BUNDLE_VERSION);
1:     Version result = (specifiedVersion == null) ? Version.emptyVersion : new Version(specifiedVersion);
1:     
1:     return result;
1:   }
1:   
1:   public String getManifestVersion() {
1:     return manifest.getMainAttributes().getValue(Constants.BUNDLE_MANIFESTVERSION);
1:   }
1:   
1:   public Attributes getRawAttributes() {
1:     return manifest.getMainAttributes();
1:   }
1:   
1:   public Manifest getRawManifest() {
1:     return manifest;
1:   }
1:   
1:   public boolean isValid() {
0:     return getManifestVersion() != null && getSymbolicName() != null;
1:   }
1: }
1: 
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:4febb9f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.utils.filesystem.IOUtils;
commit:3c38842
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.utils.manifest;
0: 
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.util.jar.Attributes;
0: import java.util.jar.JarInputStream;
0: import java.util.jar.Manifest;
0: import java.util.zip.ZipEntry;
0: 
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.filesystem.utils.IOUtils;
0: import org.apache.aries.application.utils.internal.MessageUtil;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValuePair;
0: import org.osgi.framework.Constants;
0: import org.osgi.framework.Version;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: /**
0:  * Entity class to retrieve and represent a bundle manifest (valid or invalid).
0:  * 
0:  * @author mahrwald
0:  *
0:  */
0: public class BundleManifest
0: {
0:   private static final String MANIFEST_PATH = "META-INF/MANIFEST.MF";
0:   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.utils");
0: 
0:   /**
0:    * Read a manifest from a jar input stream. This will find the manifest even if it is NOT
0:    * the first file in the archive.
0:    * 
0:    * @param is
0:    * @return
0:    */
0:   public static BundleManifest fromBundle(InputStream is) {
0:     JarInputStream jarIs = null;
0:     try {
0:       jarIs = new JarInputStream(is);
0:       Manifest m = jarIs.getManifest();
0:       if (m != null)
0:         return new BundleManifest(m);
0:       else {
0:         ZipEntry entry;
0:         while ((entry = jarIs.getNextEntry()) != null) {
0:           if (entry.getName().equals(MANIFEST_PATH))
0:             return new BundleManifest(jarIs);
0:         }
0:         
0:         return null;
0:       }
0:     }
0:     catch (IOException e) {
0:       _logger.error ("IOException in BundleManifest()", e);
0:       return null;
0:     }
0:     finally {
0:       IOUtils.close(jarIs);
0:     }
0:   }
0:   
0:   /**
0:    * Retrieve a BundleManifest from the given jar file
0:    * 
0:    * @param f
0:    * @return
0:    */
0:   public static BundleManifest fromBundle(IFile f) {
0:     InputStream is = null;
0:     try {
0:       if (f.isDirectory()) {
0:         IFile manFile = f.convert().getFile(MANIFEST_PATH);
0:         if (manFile != null)
0:           return new BundleManifest(manFile.open());
0:         else
0:           return null;
0:       } else {
0:         is = f.open();
0:         return fromBundle(is);
0:       }
0:     } catch (IOException e) {
0:       _logger.error ("IOException in BundleManifest.fromBundle(IFile)", e);
0:       return null;
0:     }
0:     finally {
0:       IOUtils.close(is);
0:     }
0:   }
0:   
0:   /**
0:    * Retrieve a bundle manifest from the given jar file, which can be exploded or compressed
0:    * 
0:    * @param f
0:    * @return
0:    */
0:   public static BundleManifest fromBundle(File f) {
0:     if (f.isDirectory()) {
0:       File manifestFile = new File(f, MANIFEST_PATH);
0:       if (manifestFile.isFile())
0:         try {
0:           return new BundleManifest(new FileInputStream(manifestFile));
0:         }
0:         catch (IOException e) {
0:           _logger.error ("IOException in BundleManifest.fromBundle(File)", e);
0:           return null;
0:         }
0:       else
0:         return null;
0:     }
0:     else  if (f.isFile()) {
0:       try {
0:         return fromBundle(new FileInputStream(f));
0:       }
0:       catch (IOException e) {
0:         _logger.error ("IOException in BundleManifest.fromBundle(File)", e);
0:         return null;
0:       }
0:     }
0:     else {
0:       throw new IllegalArgumentException(MessageUtil.getMessage("APPUTILS0007E", f.getAbsolutePath()));
0:     }
0:   }
0:   
0:   private Manifest manifest;
0:   
0:   /**
0:    * Create a BundleManifest object from the InputStream to the manifest (not to the bundle)
0:    * @param manifestIs
0:    * @throws IOException
0:    */
0:   public BundleManifest(InputStream manifestIs) throws IOException {
0:     this(ManifestProcessor.parseManifest(manifestIs));
0:   }
0:   
0:   /**
0:    * Create a BundleManifest object from a common Manifest object
0:    * @param m
0:    */
0:   public BundleManifest(Manifest m) {
0:     manifest = m;
0:   }
0:   
0:   public String getSymbolicName() {
0:     String rawSymName = manifest.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLICNAME);
0: 
0:     String result = null;
0:     if (rawSymName != null) {
0:       NameValuePair<String, NameValueMap<String, String>> info = ManifestHeaderProcessor.parseBundleSymbolicName(rawSymName);
0:       result = info.getName();
0:     }
0:     
0:     return result;
0:   }
0:   
0:   public Version getVersion() {
0:     String specifiedVersion = manifest.getMainAttributes().getValue(Constants.BUNDLE_VERSION);
0:     Version result = (specifiedVersion == null) ? Version.emptyVersion : new Version(specifiedVersion);
0:     
0:     return result;
0:   }
0:   
0:   public String getManifestVersion() {
0:     return manifest.getMainAttributes().getValue(Constants.BUNDLE_MANIFESTVERSION);
0:   }
0:   
0:   public Attributes getRawAttributes() {
0:     return manifest.getMainAttributes();
0:   }
0:   
0:   public Manifest getRawManifest() {
0:     return manifest;
0:   }
0:   
0:   public boolean isValid() {
0:     return getManifestVersion() != null && getSymbolicName() != null;
0:   }
0: }
0: 
============================================================================