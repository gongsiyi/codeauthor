1:8914925: /*
1:8914925:  * Licensed to the Apache Software Foundation (ASF) under one
1:8914925:  * or more contributor license agreements.  See the NOTICE file
1:8914925:  * distributed with this work for additional information
1:8914925:  * regarding copyright ownership.  The ASF licenses this file
1:8914925:  * to you under the Apache License, Version 2.0 (the
1:8914925:  * "License"); you may not use this file except in compliance
1:8914925:  * with the License.  You may obtain a copy of the License at
1:8914925:  *
1:8914925:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8914925:  *
1:8914925:  * Unless required by applicable law or agreed to in writing,
1:8914925:  * software distributed under the License is distributed on an
1:8914925:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8914925:  * KIND, either express or implied.  See the License for the
1:8914925:  * specific language governing permissions and limitations
1:8914925:  * under the License.
1:8914925:  */
1:2227f26: package org.apache.aries.application.utils.manifest;
1:8914925: 
1:8914925: import static org.junit.Assert.assertEquals;
1:8914925: import static org.junit.Assert.assertNotNull;
1:8914925: import static org.junit.Assert.assertTrue;
1:8914925: import static org.junit.Assert.fail;
1:8914925: 
1:8914925: import java.io.InputStream;
1:8914925: import java.util.HashMap;
1:8914925: import java.util.List;
1:8914925: import java.util.Map;
1:8914925: import java.util.jar.Manifest;
1:8914925: 
1:8914925: import org.apache.aries.application.ApplicationMetadata;
1:8914925: import org.apache.aries.application.Content;
1:beeb1d7: import org.apache.aries.application.impl.ApplicationMetadataFactoryImpl;
1:910fec0: import org.apache.aries.util.VersionRange;
1:910fec0: import org.apache.aries.util.manifest.ManifestProcessor;
1:8914925: import org.junit.Test;
1:8914925: import org.osgi.framework.Version;
1:8914925: 
1:8914925: public class ManifestProcessorTest
1:8914925: {
1:8914925: 
1:8914925:   private String appName = "Travel Reservation";
1:8914925: 
1:8914925:   /**
1:8914925:    * Check a simple manifest can be read.
1:8914925:    * @throws Exception
1:8914925:    */
1:8914925:   @Test
1:8914925:   public void testSimpleManifest() throws Exception
1:8914925:   {
1:8914925:     //the values of the manifest
1:8914925:     //intentionally include a couple of long lines
1:8914925:     Map<String, String> pairs = new HashMap<String, String>();
1:8914925:     pairs.put("Manifest-Version", "1.0");
1:8914925:     pairs.put("Application-ManifestVersion", "1.0");
1:8914925:     pairs.put("Application-Name", appName );
1:8914925:     pairs.put("Application-SymbolicName", "com.travel.reservation");
1:8914925:     pairs.put("Application-Version", "1.2");
1:8914925:     pairs.put("Application-Content", "com.travel.reservation.web;version=\"[1.1.0,1.2.0)\",com.travel.reservation.business");
1:8914925:     pairs.put("Export-Package", "com.travel.reservation.api;version=1.2");
1:8914925:     pairs.put("Import-Package", "com.travel.flight.api;version=\"[2.1.1,3.0.0)\",com.travel.rail.api;version=\"[1.0.0,2.0.0)\"");
1:8914925:     pairs.put("Application-Services", "services.xml");
1:8914925: 
2:8914925:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION.MF");
1:8914925:     Manifest mf = new Manifest(in);
1:8914925:     Map<String, String> map = ManifestProcessor.readManifestIntoMap(mf);
1:8914925:     assertNotNull(map);
1:8914925: 
1:8914925:     //check all the expected keys and values
1:8914925:     for (String key : pairs.keySet()){
1:8914925:       assertTrue("Key: " + key + " was not found",map.containsKey(key));
1:8914925:       String value = map.get(key);
1:8914925:       assertNotNull("Value was not present for key: " + key ,value);
1:8914925:       assertEquals("Value was not correct for key: " + key ,pairs.get(key),value);
1:8914925:     }
1:8914925:     //check there aren't any extra entries in the map that weren't expected
1:8914925:     assertEquals("The maps did not match",pairs,map);
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * Check metadata can be extracted from a simple manifest.
1:8914925:    */
1:8914925:   @Test
1:8914925:   public void testManifestMetadata() throws Exception
1:8914925:   {
1:beeb1d7:     ApplicationMetadataFactoryImpl manager = new ApplicationMetadataFactoryImpl();
1:59e7b8b:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION.MF");    
1:d7dcea4:     ApplicationMetadata am = manager.parseApplicationMetadata(in);
1:8914925:     assertNotNull(am);
1:8914925: 
1:8914925:     assertEquals(am.getApplicationName(),appName);
1:8914925: 
1:8914925:     //"com.travel.reservation.web;version=\"[1.1.0,1.2.0)\",com.travel.reservation.business",
1:8914925:     List<Content> contents = am.getApplicationContents();
1:8914925:     for (Content content : contents){
1:8914925:       if ("com.travel.reservation.web".equals(content.getContentName())){
1:8914925:         VersionRange vr = content.getVersion();
1:8914925:         assertEquals(vr.getMinimumVersion(),new Version("1.1.0"));
1:8914925:         assertEquals(vr.getMaximumVersion(),new Version("1.2.0"));
1:8914925:       } else if("com.travel.reservation.business".equals(content.getContentName())){
1:8914925:         VersionRange vr = content.getVersion();
1:8914925:         assertEquals(new Version(0,0,0), vr.getMinimumVersion());
1:8914925:       } else 
1:8914925:         fail("Unexepcted content name " + content.getContentName());
1:8914925:     }
1:8914925:   }
1:8914925: 
1:8914925:   /**
1:8914925:    * Check metadata can be extracted from a manifest that uses multiple lines
1:8914925:    * for a single manifest attribute.
1:8914925:    */
1:8914925:   @Test
1:8914925:   public void testManifestMetadataWithMultiLineEntries() throws Exception
1:8914925:   {
1:beeb1d7:     ApplicationMetadataFactoryImpl manager = new ApplicationMetadataFactoryImpl();
1:8914925:     
1:8914925:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION2.MF");
1:8914925:     
1:d7dcea4:     ApplicationMetadata am = manager.parseApplicationMetadata(in);
1:8914925:     assertNotNull(am);
1:8914925: 
1:8914925:     assertEquals(am.getApplicationName(),appName);
1:8914925: 
1:8914925:     //"com.travel.reservation.web;version=\"[1.1.0,1.2.0)\",com.travel.reservation.business",
1:8914925:     List<Content> contents = am.getApplicationContents();
1:8914925:     for (Content content : contents){
1:8914925:       if ("com.travel.reservation.web".equals(content.getContentName())){
1:8914925:         VersionRange vr = content.getVersion();
1:8914925:         assertEquals(vr.getMinimumVersion(),new Version("1.1.0"));
1:8914925:         assertEquals(vr.getMaximumVersion(),new Version("1.2.0"));
1:8914925:       } else if("com.travel.reservation.business".equals(content.getContentName())){
1:8914925:         VersionRange vr = content.getVersion();
1:8914925:         assertEquals(new Version(0,0,0), vr.getMinimumVersion());
1:8914925:       } else 
1:8914925:         fail("Unexepcted content name " + content.getContentName());
1:8914925:     }
1:8914925:   }
1:8914925:   
1:8914925:   @Test
1:8914925:   public void testManifestWithoutEndingInNewLine() throws Exception
1:8914925:   {
1:beeb1d7:     ApplicationMetadataFactoryImpl manager = new ApplicationMetadataFactoryImpl();
1:8914925:     
1:8914925:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION3.MF");
1:8914925:     
1:d7dcea4:     ApplicationMetadata am = manager.parseApplicationMetadata(in);
1:8914925:     assertNotNull(am);
1:8914925: 
1:8914925:     assertEquals("Wrong number of bundles are in the application", 1, am.getApplicationContents().size());
1:8914925:     assertEquals("Wrong bundle name", "org.apache.aries.applications.test.bundle", am.getApplicationContents().get(0).getContentName());
1:8914925:   }
3:a52f908: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.VersionRange;
1: import org.apache.aries.util.manifest.ManifestProcessor;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:59e7b8b
/////////////////////////////////////////////////////////////////////////
1:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION.MF");    
commit:beeb1d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.impl.ApplicationMetadataFactoryImpl;
/////////////////////////////////////////////////////////////////////////
1:     ApplicationMetadataFactoryImpl manager = new ApplicationMetadataFactoryImpl();
/////////////////////////////////////////////////////////////////////////
1:     ApplicationMetadataFactoryImpl manager = new ApplicationMetadataFactoryImpl();
/////////////////////////////////////////////////////////////////////////
1:     ApplicationMetadataFactoryImpl manager = new ApplicationMetadataFactoryImpl();
commit:2227f26
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.utils.manifest;
commit:d7dcea4
/////////////////////////////////////////////////////////////////////////
1:     ApplicationMetadata am = manager.parseApplicationMetadata(in);
/////////////////////////////////////////////////////////////////////////
1:     ApplicationMetadata am = manager.parseApplicationMetadata(in);
/////////////////////////////////////////////////////////////////////////
1:     ApplicationMetadata am = manager.parseApplicationMetadata(in);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.application.utils.manifest;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.InputStream;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.jar.Manifest;
1: 
1: import org.apache.aries.application.ApplicationMetadata;
1: import org.apache.aries.application.Content;
0: import org.apache.aries.application.VersionRange;
0: import org.apache.aries.application.impl.ApplicationMetadataManagerImpl;
0: import org.apache.aries.application.utils.manifest.ManifestProcessor;
1: import org.junit.Test;
1: import org.osgi.framework.Version;
1: 
1: public class ManifestProcessorTest
1: {
1: 
1:   private String appName = "Travel Reservation";
1: 
1:   /**
1:    * Check a simple manifest can be read.
1:    * @throws Exception
1:    */
1:   @Test
1:   public void testSimpleManifest() throws Exception
1:   {
1:     //the values of the manifest
1:     //intentionally include a couple of long lines
1:     Map<String, String> pairs = new HashMap<String, String>();
1:     pairs.put("Manifest-Version", "1.0");
1:     pairs.put("Application-ManifestVersion", "1.0");
1:     pairs.put("Application-Name", appName );
1:     pairs.put("Application-SymbolicName", "com.travel.reservation");
1:     pairs.put("Application-Version", "1.2");
1:     pairs.put("Application-Content", "com.travel.reservation.web;version=\"[1.1.0,1.2.0)\",com.travel.reservation.business");
1:     pairs.put("Export-Package", "com.travel.reservation.api;version=1.2");
1:     pairs.put("Import-Package", "com.travel.flight.api;version=\"[2.1.1,3.0.0)\",com.travel.rail.api;version=\"[1.0.0,2.0.0)\"");
1:     pairs.put("Application-Services", "services.xml");
1: 
1:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION.MF");
1:     Manifest mf = new Manifest(in);
1:     Map<String, String> map = ManifestProcessor.readManifestIntoMap(mf);
1:     assertNotNull(map);
1: 
1:     //check all the expected keys and values
1:     for (String key : pairs.keySet()){
1:       assertTrue("Key: " + key + " was not found",map.containsKey(key));
1:       String value = map.get(key);
1:       assertNotNull("Value was not present for key: " + key ,value);
1:       assertEquals("Value was not correct for key: " + key ,pairs.get(key),value);
1:     }
1:     //check there aren't any extra entries in the map that weren't expected
1:     assertEquals("The maps did not match",pairs,map);
1:   }
1:   
1:   /**
1:    * Check metadata can be extracted from a simple manifest.
1:    */
1:   @Test
1:   public void testManifestMetadata() throws Exception
1:   {
0:     ApplicationMetadataManagerImpl manager = new ApplicationMetadataManagerImpl();
1:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION.MF");
0:     ApplicationMetadata am = manager.parseApplicationMetadata(in);
1:     assertNotNull(am);
1: 
1:     assertEquals(am.getApplicationName(),appName);
1: 
1:     //"com.travel.reservation.web;version=\"[1.1.0,1.2.0)\",com.travel.reservation.business",
1:     List<Content> contents = am.getApplicationContents();
1:     for (Content content : contents){
1:       if ("com.travel.reservation.web".equals(content.getContentName())){
1:         VersionRange vr = content.getVersion();
1:         assertEquals(vr.getMinimumVersion(),new Version("1.1.0"));
1:         assertEquals(vr.getMaximumVersion(),new Version("1.2.0"));
1:       } else if("com.travel.reservation.business".equals(content.getContentName())){
1:         VersionRange vr = content.getVersion();
1:         assertEquals(new Version(0,0,0), vr.getMinimumVersion());
1:       } else 
1:         fail("Unexepcted content name " + content.getContentName());
1:     }
1:   }
1: 
1:   /**
1:    * Check metadata can be extracted from a manifest that uses multiple lines
1:    * for a single manifest attribute.
1:    */
1:   @Test
1:   public void testManifestMetadataWithMultiLineEntries() throws Exception
1:   {
0:     ApplicationMetadataManagerImpl manager = new ApplicationMetadataManagerImpl();
1:     
1:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION2.MF");
1:     
0:     ApplicationMetadata am = manager.parseApplicationMetadata(in);
1:     assertNotNull(am);
1: 
1:     assertEquals(am.getApplicationName(),appName);
1: 
1:     //"com.travel.reservation.web;version=\"[1.1.0,1.2.0)\",com.travel.reservation.business",
1:     List<Content> contents = am.getApplicationContents();
1:     for (Content content : contents){
1:       if ("com.travel.reservation.web".equals(content.getContentName())){
1:         VersionRange vr = content.getVersion();
1:         assertEquals(vr.getMinimumVersion(),new Version("1.1.0"));
1:         assertEquals(vr.getMaximumVersion(),new Version("1.2.0"));
1:       } else if("com.travel.reservation.business".equals(content.getContentName())){
1:         VersionRange vr = content.getVersion();
1:         assertEquals(new Version(0,0,0), vr.getMinimumVersion());
1:       } else 
1:         fail("Unexepcted content name " + content.getContentName());
1:     }
1:   }
1:   
1:   @Test
1:   public void testManifestWithoutEndingInNewLine() throws Exception
1:   {
0:     ApplicationMetadataManagerImpl manager = new ApplicationMetadataManagerImpl();
1:     
1:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION3.MF");
1:     
0:     ApplicationMetadata am = manager.parseApplicationMetadata(in);
1:     assertNotNull(am);
1: 
1:     assertEquals("Wrong number of bundles are in the application", 1, am.getApplicationContents().size());
1:     assertEquals("Wrong bundle name", "org.apache.aries.applications.test.bundle", am.getApplicationContents().get(0).getContentName());
1:   }
commit:a52f908
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  
/////////////////////////////////////////////////////////////////////////
0: 	Manifest mf = new Manifest(getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION.MF"));
0: 	checkManifest(mf);
0:    * Check a simple manifest can be parsed.
0:    * @throws Exception
0:    */
0:   @Test
0:   public void testParseManifest() throws Exception
0:   {
0:     Manifest mf = ManifestProcessor.parseManifest(getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION.MF"));
0:     checkManifest(mf);
1:   }
0:   
0:   private void checkManifest(Manifest mf) throws Exception 
0:   {
0:       Map<String, String> map = ManifestProcessor.readManifestIntoMap(mf);
0:       assertNotNull(map);
0: 
0:       assertEquals("Unexpected number of manifest entires", pairs.size(), map.size());
0:       
0:       //check all the expected keys and values
0:       for (String key : pairs.keySet()){
0:         assertTrue("Key: " + key + " was not found",map.containsKey(key));
0:         String value = map.get(key);
0:         assertNotNull("Value was not present for key: " + key ,value);
0:         assertEquals("Value was not correct for key: " + key ,pairs.get(key),value);
1:       }
0:       //check there aren't any extra entries in the map that weren't expected
0:       assertEquals("The maps did not match",pairs,map);  
1:   }
0:   /**
0:     ApplicationMetadata am = manager.parseApplication(getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION.MF"));
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:3162c07
/////////////////////////////////////////////////////////////////////////
0: import java.io.InputStream;
0: import org.junit.Test;
0: import org.osgi.framework.Version;
0:   private String appName = "Travel Reservation";
0: 
/////////////////////////////////////////////////////////////////////////
0:     //the values of the manifest
0:     //intentionally include a couple of long lines
0:     Map<String, String> pairs = new HashMap<String, String>();
0:     pairs.put("Manifest-Version", "1.0");
0:     pairs.put("Application-ManifestVersion", "1.0");
0:     pairs.put("Application-Name", appName );
0:     pairs.put("Application-SymbolicName", "com.travel.reservation");
0:     pairs.put("Application-Version", "1.2");
0:     pairs.put("Application-Content", "com.travel.reservation.web;version=\"[1.1.0,1.2.0)\",com.travel.reservation.business");
0:     pairs.put("Export-Package", "com.travel.reservation.api;version=1.2");
0:     pairs.put("Import-Package", "com.travel.flight.api;version=\"[2.1.1,3.0.0)\",com.travel.rail.api;version=\"[1.0.0,2.0.0)\"");
0:     pairs.put("Application-Services", "services.xml");
0:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION.MF");
0:     Manifest mf = new Manifest(in);
0:     Map<String, String> map = ManifestProcessor.readManifestIntoMap(mf);
0:     assertNotNull(map);
0: 
0:     //check all the expected keys and values
0:     for (String key : pairs.keySet()){
0:       assertTrue("Key: " + key + " was not found",map.containsKey(key));
0:       String value = map.get(key);
0:       assertNotNull("Value was not present for key: " + key ,value);
0:       assertEquals("Value was not correct for key: " + key ,pairs.get(key),value);
0:     }
0:     //check there aren't any extra entries in the map that weren't expected
0:     assertEquals("The maps did not match",pairs,map);
0:   
/////////////////////////////////////////////////////////////////////////
0:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION.MF");
0:     ApplicationMetadata am = manager.parseApplication(in);
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(new Version(0,0,0), vr.getMinimumVersion());
0: 
0:   /**
0:    * Check metadata can be extracted from a manifest that uses multiple lines
0:    * for a single manifest attribute.
0:    */
0:   @Test
0:   public void testManifestMetadataWithMultiLineEntries() throws Exception
0:   {
0:     ApplicationMetadataManagerImpl manager = new ApplicationMetadataManagerImpl();
0:     
0:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION2.MF");
0:     
0:     ApplicationMetadata am = manager.parseApplication(in);
0:     assertNotNull(am);
0: 
0:     assertEquals(am.getApplicationName(),appName);
0: 
0:     //"com.travel.reservation.web;version=\"[1.1.0,1.2.0)\",com.travel.reservation.business",
0:     List<Content> contents = am.getApplicationContents();
0:     for (Content content : contents){
0:       if ("com.travel.reservation.web".equals(content.getContentName())){
0:         VersionRange vr = content.getVersion();
0:         assertEquals(vr.getMinimumVersion(),new Version("1.1.0"));
0:         assertEquals(vr.getMaximumVersion(),new Version("1.2.0"));
0:       } else if("com.travel.reservation.business".equals(content.getContentName())){
0:         VersionRange vr = content.getVersion();
0:         assertEquals(new Version(0,0,0), vr.getMinimumVersion());
0:       } else 
0:         fail("Unexepcted content name " + content.getContentName());
0:     }
0:   }
0:   
0:   @Test
0:   public void testManifestWithoutEndingInNewLine() throws Exception
0:   {
0:     ApplicationMetadataManagerImpl manager = new ApplicationMetadataManagerImpl();
0:     
0:     InputStream in = getClass().getClassLoader().getResourceAsStream("META-INF/APPLICATION3.MF");
0:     
0:     ApplicationMetadata am = manager.parseApplication(in);
0:     assertNotNull(am);
0: 
0:     assertEquals("Wrong number of bundles are in the application", 1, am.getApplicationContents().size());
0:     assertEquals("Wrong bundle name", "org.apache.aries.applications.test.bundle", am.getApplicationContents().get(0).getContentName());
0:   }
commit:629b3bd
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.impl.ApplicationMetadataManagerImpl;
/////////////////////////////////////////////////////////////////////////
0:     ApplicationMetadataManagerImpl manager = new ApplicationMetadataManagerImpl();
0:     ApplicationMetadata am = manager.parseApplication(new FileInputStream(new File(appFolder,"/META-INF/APPLICATION.MF")));
0:     assertNotNull(am);
0:     String appName = pairs.get("Application-Name");
0:     assertEquals(am.getApplicationName(),appName);
0: 
0:     //"com.travel.reservation.web;version=\"[1.1.0,1.2.0)\",com.travel.reservation.business",
0:     List<Content> contents = am.getApplicationContents();
0:     for (Content content : contents){
0:       if ("com.travel.reservation.web".equals(content.getContentName())){
0:         VersionRange vr = content.getVersion();
0:         assertEquals(vr.getMinimumVersion(),new Version("1.1.0"));
0:         assertEquals(vr.getMaximumVersion(),new Version("1.2.0"));
0:       } else if("com.travel.reservation.business".equals(content.getContentName())){
0:         VersionRange vr = content.getVersion();
0:         assertNull(vr);
0:       } else 
0:         fail("Unexepcted content name " + content.getContentName());
0:     }
0:   }
0: }
author:Graham Charters
-------------------------------------------------------------------------------
commit:d77c519
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.application.utils;
0: 
0: import static org.apache.aries.application.utils.AppConstants.APPLICATION_MF;
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertNull;
0: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.fail;
0: 
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.PrintWriter;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.jar.Manifest;
0: 
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.osgi.framework.Version;
0: 
0: import org.apache.aries.application.ApplicationMetadata;
0: import org.apache.aries.application.ApplicationMetadataFactory;
0: import org.apache.aries.application.Content;
0: import org.apache.aries.application.VersionRange;
0: import org.apache.aries.application.utils.manifest.ManifestProcessor;
0: 
0: public class ManifestProcessorTest
0: {
0: 
0:   private static final String APP_FOLDER_NAME = "myAppFolder";
0:   private static final String META_NAME = "META-INF";
0:   private static final String SEP = ": ";
0:   
0:   private static File appFolder = new File(APP_FOLDER_NAME);
0:   private static File f = new File(appFolder, APPLICATION_MF);
0:   private static File metaFolder = new File(appFolder,META_NAME);
0:   
0:   private static Map<String,String> pairs = null;
0:   
0:   @Before
0:   public void setUp() throws Exception{
0:     
0:     //clean up in case of a bad previous run
0:     tearDown();
0:     
0:     //enforce ordering of the keys
0:     String[] keys = new String[]{
0:         "Manifest-Version",
0:         "Application-ManifestVersion",
0:         "Application-Name",
0:         "Application-SymbolicName",
0:         "Application-Version",
0:         "Application-Content",
0:         "Export-Package",
0:         "Import-Package",
0:         "Application-Services"  
0:     };
0:     
0:     String [] values = new String[]{
0:         "1.0",
0:         "1.0",
0:         "Travel Reservation",
0:         "com.travel.reservation",
0:         "1.2",
0:         "com.travel.reservation.web;version=\"[1.1.0,1.2.0)\",com.travel.reservation.business",
0:         "com.travel.reservation.api;version=1.2",
0:         "com.travel.flight.api;version=\"[2.1.1,3.0.0)\",com.travel.rail.api;version=\"[1.0.0,2.0.0)\"",
0:         "services.xml"
0:     };
0:     
0:     //the values of the manifest
0:     //intentionally include a couple of long lines
0:     pairs = new HashMap<String, String>();
0:     int i = 0;
0:     for (String key : keys){
0:       pairs.put(key, values[i]);
0:       i++;
0:     }
0:     
0:     appFolder.mkdir();
0:     metaFolder.mkdir();
0:     f.createNewFile();
0:     PrintWriter pw = new PrintWriter(f);
0:     //use write line for all but the last line
0:     //count so we don't do the last line
0:     i = 0;
0:     for (String key : keys){
0:       if (i < keys.length-1){
0:         pw.println(key + SEP + pairs.get(key));
0:       }
0:       else{
0:         //intentionally fail to print a new line at the end of the file
0:         pw.print(key + SEP + pairs.get(key));
0:       }
0:       i++;
0:     }
0:     pw.write("\n\n");
0:     
0:     //finish writing the file
0:     pw.flush();
0:     pw.close();
0:   }
0:   
0:   @After
0:   public void tearDown() throws Exception {
0:     if (f.exists()) f.delete();
0:     if (metaFolder.exists()) metaFolder.delete();
0:     if (appFolder.exists()) appFolder.delete();
0:   }
0:   
0: 
0:   /**
0:    * Check a simple manifest can be read.
0:    * @throws Exception
0:    */
0:   @Test
0:   public void testSimpleManifest() throws Exception
0:   {
0: 	Manifest mf = new Manifest(new FileInputStream(new File(appFolder,"/META-INF/APPLICATION.MF")));
0:     Map<String, String> map = ManifestProcessor.readManifestIntoMap(mf);
0:     assertNotNull(map);
0: 
0:     //check all the expected keys and values
0:     for (String key : pairs.keySet()){
0:       assertTrue("Key: " + key + " was not found",map.containsKey(key));
0:       String value = map.get(key);
0:       assertNotNull("Value was not present for key: " + key ,value);
0:       assertEquals("Value was not correct for key: " + key ,pairs.get(key),value);
0:     }
0:     //check there aren't any extra entries in the map that weren't expected
0:     assertEquals("The maps did not match",pairs,map);
0:   }
0:   
0:   /**
0:    * Check metadata can be extracted from a simple manifest.
0:    */
0:   @Test
0:   public void testManifestMetadata() throws Exception
0:   {
0: 	Manifest mf = new Manifest(new FileInputStream(new File(appFolder,"/META-INF/APPLICATION.MF")));
0: 	ApplicationMetadata am = ApplicationMetadataFactory.getApplicationMetadata(mf);
0: 	assertNotNull(am);
0: 	
0: 	String appName = pairs.get("Application-Name");
0: 	assertEquals(am.getApplicationName(),appName);
0: 
0: 	//"com.travel.reservation.web;version=\"[1.1.0,1.2.0)\",com.travel.reservation.business",
0: 	List<Content> contents = am.getApplicationContents();
0: 	for(Content content : contents){
0: 		if("com.travel.reservation.web".equals(content.getContentName())){
0: 			VersionRange vr = content.getVersion();
0: 			assertEquals(vr.getMinimumVersion(),new Version("1.1.0"));
0: 			assertEquals(vr.getMaximumVersion(),new Version("1.2.0"));
0: 		}else if("com.travel.reservation.business".equals(content.getContentName())){
0: 			VersionRange vr = content.getVersion();
0: 			assertNull(vr);		
0: 		}else fail("Unexepcted content name " + content.getContentName());
0: 	}
0:   }  
0:   
0:   
0: }
============================================================================