1:e98589f: /*
1:0356de4:  * Copyright (c) OSGi Alliance (2010, 2012). All Rights Reserved.
8:334a137:  *
1:3f3f24f:  * Licensed under the Apache License, Version 2.0 (the "License");
1:3f3f24f:  * you may not use this file except in compliance with the License.
1:3f3f24f:  * You may obtain a copy of the License at
1:334a137:  *
1:3f3f24f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:334a137:  *
1:3f3f24f:  * Unless required by applicable law or agreed to in writing, software
1:3f3f24f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f3f24f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f3f24f:  * See the License for the specific language governing permissions and
1:3f3f24f:  * limitations under the License.
15:3f3f24f:  */
1:0356de4: 
1:3f3f24f: package org.osgi.jmx.framework.wiring;
1:62a90a9: 
1:3f3f24f: import java.io.IOException;
1:62a90a9: 
1:334a137: import javax.management.JMException;
1:3f3f24f: import javax.management.openmbean.ArrayType;
1:3f3f24f: import javax.management.openmbean.CompositeData;
1:3f3f24f: import javax.management.openmbean.CompositeType;
1:3f3f24f: import javax.management.openmbean.SimpleType;
1:3f3f24f: import javax.management.openmbean.TabularData;
1:3f3f24f: import javax.management.openmbean.TabularType;
1:62a90a9: 
1:3f3f24f: import org.osgi.jmx.Item;
1:3f3f24f: import org.osgi.jmx.JmxConstants;
1:8624fd8: 
1:7b6fac5: /**
1:3f3f24f:  * This MBean represents the bundle wiring state.
1:8624fd8:  * <p>
1:0356de4:  * It can be used to retrieve the declared capabilities, declared requirements,
1:0356de4:  * and wiring for the current and past revisions of bundles.
1:334a137:  *
1:8624fd8:  * @ThreadSafe
1:e98589f:  */
1:1dbcef9: public interface BundleWiringStateMBean {
1:0356de4: 	/**
1:0356de4: 	 * The Object Name prefix for this mbean. The full object name also contains
1:0356de4: 	 * the framework name and uuid as properties.
1:0356de4: 	 */
1:0356de4: 	String			OBJECTNAME							= JmxConstants.OSGI_CORE + ":type=wiringState,version=1.1";
1:334a137: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #KEY_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			KEY									= "Key";
1:334a137: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing the key of a capability or requirement directive.
1:0356de4: 	 * Used in {@link #DIRECTIVE_TYPE}. The key is {@link #KEY} and the type is
1:0356de4: 	 * a String.
1:0356de4: 	 */
1:0356de4: 	Item			KEY_ITEM							= new Item(KEY, "The directive key", SimpleType.STRING);
1:62a90a9: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #VALUE}.
1:0356de4: 	 */
1:0356de4: 	String			VALUE								= "Value";
5:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing the value of a capability or requirement directive.
1:0356de4: 	 * Used in {@link #DIRECTIVE_TYPE}. They key is {@link #VALUE} and the type
1:0356de4: 	 * is a String.
1:0356de4: 	 */
1:0356de4: 	Item			VALUE_ITEM							= new Item(VALUE, "The directive value", SimpleType.STRING);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The Composite Type that represents a directive for a capability or
1:0356de4: 	 * requirement. The composite consists of:
1:0356de4: 	 * <ul>
1:0356de4: 	 * <li>{@link #KEY}</li>
1:0356de4: 	 * <li>{@link #VALUE}</li>
1:0356de4: 	 * </ul>
1:0356de4: 	 */
1:0356de4: 	CompositeType	DIRECTIVE_TYPE						= Item.compositeType("DIRECTIVE", "Describes a directive of a capability or requirement", KEY_ITEM, VALUE_ITEM);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The Tabular Type that holds the directives for a capability or
1:0356de4: 	 * requirement. The row type is {@link #DIRECTIVE_TYPE} and the index is
1:0356de4: 	 * {@link #KEY}.
1:0356de4: 	 */
1:0356de4: 	TabularType		DIRECTIVES_TYPE						= Item.tabularType("DIRECTIVES", "Describes the directives of a capability or requirement", DIRECTIVE_TYPE, KEY);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #DIRECTIVES_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			DIRECTIVES							= "Directives";
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing the directives of a capability or requirement. Used
1:0356de4: 	 * in {@link #BUNDLE_REQUIREMENT_TYPE} and {@link #BUNDLE_CAPABILITY_TYPE}.
1:0356de4: 	 * The key is {@link #DIRECTIVES} and the type is {@link #DIRECTIVES_TYPE}.
1:0356de4: 	 */
1:0356de4: 	Item			DIRECTIVES_ITEM						= new Item(DIRECTIVES, "The directives of a capability or requirement", DIRECTIVES_TYPE);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The Tabular Type that holds the attributes for a capability or
1:0356de4: 	 * requirements. The row type is {@link JmxConstants#PROPERTY_TYPE} and the
1:0356de4: 	 * index is {@link JmxConstants#KEY}.
1:0356de4: 	 */
1:0356de4: 	TabularType		ATTRIBUTES_TYPE						= Item.tabularType("ATTRIBUTES", "Describes attributes of a capability or requirement", JmxConstants.PROPERTY_TYPE, JmxConstants.KEY);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #ATTRIBUTES_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			ATTRIBUTES							= "Attributes";
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing the attributes of a capability or requirement. Used
1:0356de4: 	 * in {@link #BUNDLE_REQUIREMENT_TYPE} and {@link #BUNDLE_CAPABILITY_TYPE}.
1:0356de4: 	 * The key is {@link #ATTRIBUTES} and the type is {@link #ATTRIBUTES_TYPE}.
1:0356de4: 	 */
1:0356de4: 	Item			ATTRIBUTES_ITEM						= new Item(ATTRIBUTES, "The attributes of a capability or requirement", ATTRIBUTES_TYPE);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #NAMESPACE_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			NAMESPACE							= "Namespace";
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing the namespace for a capability or requirement. Used
1:0356de4: 	 * in {@link #BUNDLE_REQUIREMENT_TYPE} and {@link #BUNDLE_CAPABILITY_TYPE}.
1:0356de4: 	 * The key is {@link #NAMESPACE} and the type is a String.
1:0356de4: 	 */
1:0356de4: 	Item			NAMESPACE_ITEM						= new Item(NAMESPACE, "The namespace of a capability or requirement", SimpleType.STRING);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The Composite Type that represents the requirement of a bundle.
1:0356de4: 	 *
1:0356de4: 	 * The composite consists of:
1:0356de4: 	 * <ul>
1:0356de4: 	 * <li>{@link #NAMESPACE}</li>
1:0356de4: 	 * <li>{@link #ATTRIBUTES}</li>
1:0356de4: 	 * <li>{@link #DIRECTIVES}</li>
1:0356de4: 	 * </ul>
1:0356de4: 	 */
1:0356de4: 	CompositeType	BUNDLE_REQUIREMENT_TYPE				= Item.compositeType("BUNDLE_REQUIREMENT", "Describes the requirement of a bundle", ATTRIBUTES_ITEM, DIRECTIVES_ITEM, NAMESPACE_ITEM);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The Composite Type that represents the capability of a bundle.
1:0356de4: 	 *
1:0356de4: 	 * The composite consists of:
1:0356de4: 	 * <ul>
1:0356de4: 	 * <li>{@link #NAMESPACE}</li>
1:0356de4: 	 * <li>{@link #ATTRIBUTES}</li>
1:0356de4: 	 * <li>{@link #DIRECTIVES}</li>
1:0356de4: 	 * </ul>
1:0356de4: 	 */
1:0356de4: 	CompositeType	BUNDLE_CAPABILITY_TYPE				= Item.compositeType("BUNDLE_CAPABILITY", "Describes the capability of a bundle", ATTRIBUTES_ITEM, DIRECTIVES_ITEM, NAMESPACE_ITEM);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #PROVIDER_BUNDLE_ID_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			PROVIDER_BUNDLE_ID					= "ProviderBundleId";
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing the provider bundle ID in {@link #BUNDLE_WIRE_TYPE}.
1:0356de4: 	 * The key is {@link #PROVIDER_BUNDLE_ID} and the type is a long.
1:0356de4: 	 */
1:0356de4: 	Item			PROVIDER_BUNDLE_ID_ITEM				= new Item(PROVIDER_BUNDLE_ID, "The identifier of the bundle that is the provider of the capability", SimpleType.LONG);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #REQUIRER_BUNDLE_ID_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			REQUIRER_BUNDLE_ID					= "RequirerBundleId";
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing the requirer bundle ID in {@link #BUNDLE_WIRE_TYPE}.
1:0356de4: 	 * The key is {@link #REQUIRER_BUNDLE_ID} and the type is long.
1:0356de4: 	 */
1:0356de4: 	Item			REQUIRER_BUNDLE_ID_ITEM				= new Item(REQUIRER_BUNDLE_ID, "The identifier of the bundle that is the requirer of the requirement", SimpleType.LONG);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #BUNDLE_REQUIREMENT_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			BUNDLE_REQUIREMENT					= "BundleRequirement";
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing a requirement for a bundle in
1:0356de4: 	 * {@link #BUNDLE_WIRE_TYPE}. The key is {@link #BUNDLE_REQUIREMENT} and the
1:0356de4: 	 * type is {@link #BUNDLE_REQUIREMENT_TYPE}.
1:0356de4: 	 */
1:0356de4: 	Item			BUNDLE_REQUIREMENT_ITEM				= new Item(BUNDLE_REQUIREMENT, "The wired requirements of a bundle", BUNDLE_REQUIREMENT_TYPE);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #BUNDLE_CAPABILITY_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			BUNDLE_CAPABILITY					= "BundleCapability";
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing a capability for a bundle in
1:0356de4: 	 * {@link #BUNDLE_WIRE_TYPE}. The key is {@link #BUNDLE_CAPABILITY} and the
1:0356de4: 	 * type is {@link #BUNDLE_CAPABILITY_TYPE}.
1:0356de4: 	 */
1:0356de4: 	Item			BUNDLE_CAPABILITY_ITEM				= new Item(BUNDLE_CAPABILITY, "The wired capabilities of a bundle", BUNDLE_CAPABILITY_TYPE);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #PROVIDER_BUNDLE_REVISION_ID_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			PROVIDER_BUNDLE_REVISION_ID			= "ProviderBundleRevisionId";
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The local ID of a provider revision in {@link #BUNDLE_WIRE_TYPE}. This ID
1:0356de4: 	 * is local to the result where it resides and has no defined meaning across
1:0356de4: 	 * multiple invocations. The key is {@link #PROVIDER_BUNDLE_REVISION_ID} and
1:0356de4: 	 * the type is an int.
1:0356de4: 	 */
1:0356de4: 	Item			PROVIDER_BUNDLE_REVISION_ID_ITEM	= new Item(PROVIDER_BUNDLE_REVISION_ID, "A local id for the bundle revision that is the provider of the capability", SimpleType.INTEGER);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #REQUIRER_BUNDLE_REVISION_ID_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			REQUIRER_BUNDLE_REVISION_ID			= "RequirerBundleRevisionId";
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The local ID of a requirer revision in {@link #BUNDLE_WIRE_TYPE}. This ID
1:0356de4: 	 * is local to the result where it resides and has no defined meaning across
1:0356de4: 	 * multiple invocations. The key is {@link #REQUIRER_BUNDLE_REVISION_ID} and
1:0356de4: 	 * the type is an int.
1:0356de4: 	 */
1:0356de4: 	Item			REQUIRER_BUNDLE_REVISION_ID_ITEM	= new Item(REQUIRER_BUNDLE_REVISION_ID, "A local id for the bundle revision that is the requirer of the requirement", SimpleType.INTEGER);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The Composite type that represents a bundle wire describing the live
1:0356de4: 	 * association between a provider of a capability and a requirer of the
1:0356de4: 	 * corresponding requirement.
1:0356de4: 	 * <p/>
1:0356de4: 	 * The composite consists of:
1:0356de4: 	 * <ul>
1:0356de4: 	 * <li>{@link #BUNDLE_REQUIREMENT}</li>
1:0356de4: 	 * <li>{@link #BUNDLE_CAPABILITY}</li>
1:0356de4: 	 * <li>{@link #PROVIDER_BUNDLE_ID}</li>
1:0356de4: 	 * <li>{@link #PROVIDER_BUNDLE_REVISION_ID}</li>
1:0356de4: 	 * <li>{@link #REQUIRER_BUNDLE_ID}</li>
1:0356de4: 	 * <li>{@link #REQUIRER_BUNDLE_REVISION_ID}</li>
1:0356de4: 	 * </ul>
1:0356de4: 	 */
1:0356de4: 	CompositeType	BUNDLE_WIRE_TYPE					= Item.compositeType("BUNDLE_WIRE",
1:0356de4: 																"Describes the live association between a provider and a requirer",
1:0356de4: 																BUNDLE_REQUIREMENT_ITEM,
1:0356de4: 																BUNDLE_CAPABILITY_ITEM,
1:0356de4: 																PROVIDER_BUNDLE_ID_ITEM,
1:0356de4: 																PROVIDER_BUNDLE_REVISION_ID_ITEM,
1:0356de4: 																REQUIRER_BUNDLE_ID_ITEM,
1:0356de4: 																REQUIRER_BUNDLE_REVISION_ID_ITEM);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * An array of {@link #BUNDLE_WIRE_TYPE}s.
1:0356de4: 	 */
1:0356de4: 	ArrayType		BUNDLE_WIRES_TYPE_ARRAY				= Item.arrayType(1, BUNDLE_WIRE_TYPE);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #BUNDLE_REVISION_ID_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			BUNDLE_REVISION_ID					= "BundleRevisionId";
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing a bundle revision ID. A bundle revision ID is always
1:0356de4: 	 * local to the result of a JMX invocation and do not have a defined meaning
1:0356de4: 	 * across invocation calls. They are used where a result can potentially
1:0356de4: 	 * contain multiple revisions of the same bundle. The key is
1:0356de4: 	 * {@link #BUNDLE_REVISION_ID} and the type is an integer.
1:0356de4: 	 */
1:0356de4: 	Item			BUNDLE_REVISION_ID_ITEM				= new Item(BUNDLE_REVISION_ID, "The local identifier of the bundle revision", SimpleType.INTEGER);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #BUNDLE_ID_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			BUNDLE_ID							= "BundleId";
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing a bundle ID. They key is {@link #BUNDLE_ID} and the
1:0356de4: 	 * type is a long.
1:0356de4: 	 */
1:0356de4: 	Item			BUNDLE_ID_ITEM						= new Item(BUNDLE_ID, "The bundle identifier of the bundle revision", SimpleType.LONG);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * An array of {@link #BUNDLE_REQUIREMENT_TYPE}s.
1:0356de4: 	 */
1:0356de4: 	ArrayType		REQUIREMENT_TYPE_ARRAY				= Item.arrayType(1, BUNDLE_REQUIREMENT_TYPE);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * An array of {@link #BUNDLE_CAPABILITY_TYPE}s.
1:0356de4: 	 */
1:0356de4: 	ArrayType		CAPABILITY_TYPE_ARRAY				= Item.arrayType(1, BUNDLE_CAPABILITY_TYPE);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #REQUIREMENTS_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			REQUIREMENTS						= "Requirements";
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing the requirements in
1:0356de4: 	 * {@link #REVISION_REQUIREMENTS_TYPE} and {@link #BUNDLE_WIRING_TYPE}. The
1:0356de4: 	 * key is {@link #REQUIREMENTS} and the type is
1:0356de4: 	 * {@link #REQUIREMENT_TYPE_ARRAY}.
1:0356de4: 	 */
1:0356de4: 	Item			REQUIREMENTS_ITEM					= new Item(REQUIREMENTS, "The bundle requirements of a bundle revision wiring", REQUIREMENT_TYPE_ARRAY);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The Composite Type that represents the requirements of a revision. The
1:0356de4: 	 * composite consists of:
1:0356de4: 	 * <ul>
1:0356de4: 	 * <li>{@link #BUNDLE_REVISION_ID}</li>
1:0356de4: 	 * <li>{@link #REQUIREMENTS}</li>
1:0356de4: 	 * </ul>
1:0356de4: 	 */
1:0356de4: 	CompositeType	REVISION_REQUIREMENTS_TYPE			= Item.compositeType("REVISION_REQUIREMENTS", "Describes the requirements for a bundle revision", BUNDLE_REVISION_ID_ITEM, REQUIREMENTS_ITEM);
1:3f3f24f: 
1:0356de4: 	/**
1:0356de4: 	 * The Tabular Type that hold the requirements of a revision. The row type
1:0356de4: 	 * is {@link #REVISION_REQUIREMENTS_TYPE} and the index is
1:0356de4: 	 * {@link #BUNDLE_REVISION_ID}.
1:0356de4: 	 */
1:0356de4: 	TabularType		REVISIONS_REQUIREMENTS_TYPE			= Item.tabularType("REVISIONS_REQUIREMENTS", "The bundle requirements for all bundle revisions", REVISION_REQUIREMENTS_TYPE, BUNDLE_REVISION_ID);
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #CAPABILITIES_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			CAPABILITIES						= "Capabilities";
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing the capabilities in
1:0356de4: 	 * {@link #REVISION_CAPABILITIES_TYPE} and {@link #BUNDLE_WIRING_TYPE}. The
1:0356de4: 	 * key is {@link #CAPABILITIES} and the type is
1:0356de4: 	 * {@link #CAPABILITY_TYPE_ARRAY}.
1:0356de4: 	 */
1:0356de4: 	Item			CAPABILITIES_ITEM					= new Item(CAPABILITIES, "The bundle capabilities of a bundle revision wiring", CAPABILITY_TYPE_ARRAY);
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * The Composite Type that represents the capabilities for a revision. The
1:0356de4: 	 * composite consists of:
1:0356de4: 	 * <ul>
1:0356de4: 	 * <li>{@link #BUNDLE_REVISION_ID}</li>
1:0356de4: 	 * <li>{@link #CAPABILITIES}</li>
1:0356de4: 	 * </ul>
1:0356de4: 	 */
1:0356de4: 	CompositeType	REVISION_CAPABILITIES_TYPE			= Item.compositeType("REVISION_CAPABILITIES", "Describes the capabilities for a bundle revision", BUNDLE_REVISION_ID_ITEM, CAPABILITIES_ITEM);
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * The Tabular Type that holds the capabilities of a revision. The row type
1:0356de4: 	 * is {@link #REVISION_CAPABILITIES_TYPE} and the index is
1:0356de4: 	 * {@link #BUNDLE_REVISION_ID}.
1:0356de4: 	 */
1:0356de4: 	TabularType		REVISIONS_CAPABILITIES_TYPE			= Item.tabularType("REVISIONS_CAPABILITIES", "The bundle capabilities for all bundle revisions", REVISION_CAPABILITIES_TYPE, BUNDLE_REVISION_ID);
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #PROVIDED_WIRES_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			PROVIDED_WIRES						= "ProvidedWires";
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing the provided wires in {@link #BUNDLE_WIRING_TYPE}.
1:0356de4: 	 * The key is {@link #PROVIDED_WIRES} and the type is
1:0356de4: 	 * {@link #BUNDLE_WIRES_TYPE_ARRAY}.
1:0356de4: 	 */
1:0356de4: 	Item			PROVIDED_WIRES_ITEM					= new Item(PROVIDED_WIRES, "The bundle wires to the capabilities provided by this bundle wiring.", BUNDLE_WIRES_TYPE_ARRAY);
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * The key of {@link #REQUIRED_WIRES_ITEM}.
1:0356de4: 	 */
1:0356de4: 	String			REQUIRED_WIRES						= "RequiredWires";
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * The item containing the required wires in {@link #BUNDLE_WIRING_TYPE}.
1:0356de4: 	 * The key is {@link #REQUIRED_WIRES} and the type is
1:0356de4: 	 * {@link #BUNDLE_WIRES_TYPE_ARRAY}.
1:0356de4: 	 */
1:0356de4: 	Item			REQUIRED_WIRES_ITEM					= new Item(REQUIRED_WIRES, "The bundle wires to requirements in use by this bundle wiring", BUNDLE_WIRES_TYPE_ARRAY);
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * The Composite Type that represents a bundle wiring. The composite
1:0356de4: 	 * consists of:
1:0356de4: 	 * <ul>
1:0356de4: 	 * <li>{@link #BUNDLE_ID}</li>
1:0356de4: 	 * <li>{@link #BUNDLE_REVISION_ID}</li>
1:0356de4: 	 * <li>{@link #REQUIREMENTS}</li>
1:0356de4: 	 * <li>{@link #CAPABILITIES}</li>
1:0356de4: 	 * <li>{@link #REQUIRED_WIRES}</li>
1:0356de4: 	 * <li>{@link #PROVIDED_WIRES}</li>
1:0356de4: 	 * </ul>
1:0356de4: 	 */
1:0356de4: 	CompositeType	BUNDLE_WIRING_TYPE					= Item.compositeType("BUNDLE_WIRING",
1:0356de4: 																"Describes the runtime association between a provider and a requirer",
1:0356de4: 																BUNDLE_ID_ITEM,
1:0356de4: 																BUNDLE_REVISION_ID_ITEM,
1:0356de4: 																REQUIREMENTS_ITEM,
1:0356de4: 																CAPABILITIES_ITEM,
1:0356de4: 																REQUIRED_WIRES_ITEM,
1:0356de4: 																PROVIDED_WIRES_ITEM);
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * The Tabular Type to hold the wiring of a number of bundles. The row type
1:0356de4: 	 * is {@link #BUNDLE_WIRING_TYPE} and the index is the combination of the
1:0356de4: 	 * {@link #BUNDLE_ID} and the {@link #BUNDLE_REVISION_ID}.
1:0356de4: 	 */
1:0356de4: 	TabularType		BUNDLES_WIRING_TYPE					= Item.tabularType("BUNDLES_WIRING", "The bundle wiring for all bundle revisions", BUNDLE_WIRING_TYPE, BUNDLE_ID, BUNDLE_REVISION_ID);
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * Returns the requirements for the current bundle revision.
1:0356de4: 	 *
1:0356de4: 	 * @see #REQUIREMENT_TYPE_ARRAY for the details of the CompositeData.
1:0356de4: 	 *
1:0356de4: 	 * @param bundleId The bundle ID.
1:0356de4: 	 * @param namespace The namespace of the requirements to be returned by this
1:0356de4: 	 *        operation.
1:0356de4: 	 * @return the declared requirements for the current revision of
1:0356de4: 	 *         {@code bundleId} and {@code namespace}.
1:0356de4: 	 * @throws JMException if there is a JMX problem.
1:0356de4: 	 * @throws IOException if the connection could not be made because of a
1:0356de4: 	 *         communication problem.
1:0356de4: 	 */
1:0356de4: 	CompositeData[] getCurrentRevisionDeclaredRequirements(long bundleId, String namespace) throws IOException, JMException;
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * Returns the capabilities for the current bundle revision.
1:0356de4: 	 *
1:0356de4: 	 * @see #CAPABILITY_TYPE_ARRAY for the details of the CompositeData.
1:0356de4: 	 *
1:0356de4: 	 * @param bundleId The bundle ID.
1:0356de4: 	 * @param namespace The namespace of the capabilities to be returned by this
1:0356de4: 	 *        operation.
1:0356de4: 	 * @return the declared capabilities for the current revision of
1:0356de4: 	 *         {@code bundleId} and {@code namespace}.
1:0356de4: 	 * @throws JMException if there is a JMX problem.
1:0356de4: 	 * @throws IOException if the connection could not be made because of a
1:0356de4: 	 *         communication problem.
1:0356de4: 	 */
1:0356de4: 	CompositeData[] getCurrentRevisionDeclaredCapabilities(long bundleId, String namespace) throws IOException, JMException;
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * Returns the bundle wiring for the current bundle revision.
1:0356de4: 	 *
1:0356de4: 	 * @see #BUNDLE_WIRING_TYPE for the details of the CompositeData.
1:0356de4: 	 *
1:0356de4: 	 * @param bundleId The bundle ID.
1:0356de4: 	 * @param namespace The namespace of the requirements and capabilities for
1:0356de4: 	 *        which to return information.
1:0356de4: 	 * @return the wiring information for the current revision of
1:0356de4: 	 *         {@code bundleId} and {@code namespace}.
1:0356de4: 	 * @throws JMException if there is a JMX problem.
1:0356de4: 	 * @throws IOException if the connection could not be made because of a
1:0356de4: 	 *         communication problem.
1:0356de4: 	 */
1:0356de4: 	CompositeData getCurrentWiring(long bundleId, String namespace) throws IOException, JMException;
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * Returns the bundle wiring closure for the current revision of the
1:0356de4: 	 * specified bundle. The wiring closure contains all the wirings from the
1:0356de4: 	 * root bundle revision to all bundle revisions it is wired to and all their
1:0356de4: 	 * transitive wirings.
1:0356de4: 	 *
1:0356de4: 	 * @see #BUNDLES_WIRING_TYPE for the details of the TabularData.
1:0356de4: 	 *
1:0356de4: 	 * @param rootBundleId the root bundle of the closure.
1:0356de4: 	 * @param namespace The namespace of the requirements and capabilities for
1:0356de4: 	 *        which to return information.
1:0356de4: 	 * @return a tabular representation of all the wirings in the closure. The
1:0356de4: 	 *         bundle revision IDs only have meaning in the context of the
1:0356de4: 	 *         current result. The revision of the rootBundle is set to 0.
1:0356de4: 	 *         Therefore the root bundle of the closure can be looked up in the
1:0356de4: 	 *         table by its bundle ID and revision 0.
1:0356de4: 	 * @throws JMException if there is a JMX problem.
1:0356de4: 	 * @throws IOException if the connection could not be made because of a
1:0356de4: 	 *         communication problem.
1:0356de4: 	 */
1:0356de4: 	TabularData getCurrentWiringClosure(long rootBundleId, String namespace) throws IOException, JMException;
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * Returns the requirements for all revisions of the bundle.
1:0356de4: 	 *
1:0356de4: 	 * @see #REVISIONS_REQUIREMENTS_TYPE for the details of TabularData.
1:0356de4: 	 *
1:0356de4: 	 *      The requirements are in no particular order, and may change in
1:0356de4: 	 *      subsequent calls to this operation.
1:0356de4: 	 *
1:0356de4: 	 * @param bundleId The bundle ID.
1:0356de4: 	 * @param namespace The namespace of the requirements to be returned by this
1:0356de4: 	 *        operation.
1:0356de4: 	 * @return the declared requirements for all revisions of {@code bundleId}.
1:0356de4: 	 * @throws JMException if there is a JMX problem.
1:0356de4: 	 * @throws IOException if the connection could not be made because of a
1:0356de4: 	 *         communication problem.
1:0356de4: 	 */
1:0356de4: 	TabularData getRevisionsDeclaredRequirements(long bundleId, String namespace) throws IOException, JMException;
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * Returns the capabilities for all revisions of the bundle.
1:0356de4: 	 *
1:0356de4: 	 * @see #REVISIONS_CAPABILITIES_TYPE for the details of TabularData.
1:0356de4: 	 *
1:0356de4: 	 *      The capabilities are in no particular order, and may change in
1:0356de4: 	 *      subsequent calls to this operation.
1:0356de4: 	 *
1:0356de4: 	 * @param bundleId The bundle ID.
1:0356de4: 	 * @param namespace The namespace of the capabilities to be returned by this
1:0356de4: 	 *        operation.
1:0356de4: 	 * @return the declared capabilities for all revisions of {@code bundleId}
1:0356de4: 	 * @throws JMException if there is a JMX problem.
1:0356de4: 	 * @throws IOException if the connection could not be made because of a
1:0356de4: 	 *         communication problem.
1:0356de4: 	 */
1:0356de4: 	TabularData getRevisionsDeclaredCapabilities(long bundleId, String namespace) throws IOException, JMException;
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * Returns the bundle wirings for all revisions of the bundle.
1:0356de4: 	 *
1:0356de4: 	 * @see #BUNDLES_WIRING_TYPE for the details of TabularData.
1:0356de4: 	 *
1:0356de4: 	 *      The bundle wirings are in no particular order, and may change in
1:0356de4: 	 *      subsequent calls to this operations.
1:0356de4: 	 *
1:0356de4: 	 * @param bundleId The bundle ID.
1:0356de4: 	 * @param namespace The namespace of the requirements and capabilities for
1:0356de4: 	 *        which to return information.
1:0356de4: 	 * @return the wiring information for all revisions of {@code bundleId} and
1:0356de4: 	 *         {@code namespace}.
1:0356de4: 	 * @throws JMException if there is a JMX problem.
1:0356de4: 	 * @throws IOException if the connection could not be made because of a
1:0356de4: 	 *         communication problem.
1:0356de4: 	 */
1:0356de4: 	TabularData getRevisionsWiring(long bundleId, String namespace) throws IOException, JMException;
1:0356de4: 
1:0356de4: 	/**
1:0356de4: 	 * Returns the bundle wiring closure for all revisions of the specified
1:0356de4: 	 * bundle. The wiring closure contains all the wirings from the root bundle
1:0356de4: 	 * revision to all bundle revisions it is wired to and all their transitive
1:0356de4: 	 * wirings.
1:0356de4: 	 *
1:0356de4: 	 * @see #BUNDLES_WIRING_TYPE for the details of TabularData.
1:0356de4: 	 *
1:0356de4: 	 *      The bundle wirings are in no particular order, and may change in
1:0356de4: 	 *      subsequent calls to this operation. Furthermore, the bundle revision
1:0356de4: 	 *      IDs are local and cannot be reused across invocations.
1:0356de4: 	 *
1:0356de4: 	 * @param rootBundleId The root bundle ID.
1:0356de4: 	 * @param namespace The namespace of the requirements and capabilities for
1:0356de4: 	 *        which to return information.
1:0356de4: 	 * @return a tabular representation of all the wirings in the closure. The
1:0356de4: 	 *         bundle revision IDs only have meaning in the context of the
1:0356de4: 	 *         current result.
1:0356de4: 	 * @throws JMException if there is a JMX problem.
1:0356de4: 	 * @throws IOException if the connection could not be made because of a
1:0356de4: 	 *         communication problem.
1:0356de4: 	 */
1:0356de4: 	TabularData getRevisionsWiringClosure(long rootBundleId, String namespace) throws IOException, JMException;
1:0356de4: 
1:0356de4: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:0356de4
/////////////////////////////////////////////////////////////////////////
1:  * Copyright (c) OSGi Alliance (2010, 2012). All Rights Reserved.
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  * It can be used to retrieve the declared capabilities, declared requirements,
1:  * and wiring for the current and past revisions of bundles.
1: 	/**
1: 	 * The Object Name prefix for this mbean. The full object name also contains
1: 	 * the framework name and uuid as properties.
1: 	 */
1: 	String			OBJECTNAME							= JmxConstants.OSGI_CORE + ":type=wiringState,version=1.1";
1: 	/**
1: 	 * The key of {@link #KEY_ITEM}.
1: 	 */
1: 	String			KEY									= "Key";
1: 	/**
1: 	 * The item containing the key of a capability or requirement directive.
1: 	 * Used in {@link #DIRECTIVE_TYPE}. The key is {@link #KEY} and the type is
1: 	 * a String.
1: 	 */
1: 	Item			KEY_ITEM							= new Item(KEY, "The directive key", SimpleType.STRING);
1: 	/**
1: 	 * The key of {@link #VALUE}.
1: 	 */
1: 	String			VALUE								= "Value";
1: 	/**
1: 	 * The item containing the value of a capability or requirement directive.
1: 	 * Used in {@link #DIRECTIVE_TYPE}. They key is {@link #VALUE} and the type
1: 	 * is a String.
1: 	 */
1: 	Item			VALUE_ITEM							= new Item(VALUE, "The directive value", SimpleType.STRING);
1: 	/**
1: 	 * The Composite Type that represents a directive for a capability or
1: 	 * requirement. The composite consists of:
1: 	 * <ul>
1: 	 * <li>{@link #KEY}</li>
1: 	 * <li>{@link #VALUE}</li>
1: 	 * </ul>
1: 	 */
1: 	CompositeType	DIRECTIVE_TYPE						= Item.compositeType("DIRECTIVE", "Describes a directive of a capability or requirement", KEY_ITEM, VALUE_ITEM);
1: 	/**
1: 	 * The Tabular Type that holds the directives for a capability or
1: 	 * requirement. The row type is {@link #DIRECTIVE_TYPE} and the index is
1: 	 * {@link #KEY}.
1: 	 */
1: 	TabularType		DIRECTIVES_TYPE						= Item.tabularType("DIRECTIVES", "Describes the directives of a capability or requirement", DIRECTIVE_TYPE, KEY);
1: 	/**
1: 	 * The key of {@link #DIRECTIVES_ITEM}.
1: 	 */
1: 	String			DIRECTIVES							= "Directives";
1: 	/**
1: 	 * The item containing the directives of a capability or requirement. Used
1: 	 * in {@link #BUNDLE_REQUIREMENT_TYPE} and {@link #BUNDLE_CAPABILITY_TYPE}.
1: 	 * The key is {@link #DIRECTIVES} and the type is {@link #DIRECTIVES_TYPE}.
1: 	 */
1: 	Item			DIRECTIVES_ITEM						= new Item(DIRECTIVES, "The directives of a capability or requirement", DIRECTIVES_TYPE);
1: 	/**
1: 	 * The Tabular Type that holds the attributes for a capability or
1: 	 * requirements. The row type is {@link JmxConstants#PROPERTY_TYPE} and the
1: 	 * index is {@link JmxConstants#KEY}.
1: 	 */
1: 	TabularType		ATTRIBUTES_TYPE						= Item.tabularType("ATTRIBUTES", "Describes attributes of a capability or requirement", JmxConstants.PROPERTY_TYPE, JmxConstants.KEY);
1: 	/**
1: 	 * The key of {@link #ATTRIBUTES_ITEM}.
1: 	 */
1: 	String			ATTRIBUTES							= "Attributes";
1: 	/**
1: 	 * The item containing the attributes of a capability or requirement. Used
1: 	 * in {@link #BUNDLE_REQUIREMENT_TYPE} and {@link #BUNDLE_CAPABILITY_TYPE}.
1: 	 * The key is {@link #ATTRIBUTES} and the type is {@link #ATTRIBUTES_TYPE}.
1: 	 */
1: 	Item			ATTRIBUTES_ITEM						= new Item(ATTRIBUTES, "The attributes of a capability or requirement", ATTRIBUTES_TYPE);
1: 	/**
1: 	 * The key of {@link #NAMESPACE_ITEM}.
1: 	 */
1: 	String			NAMESPACE							= "Namespace";
1: 	/**
1: 	 * The item containing the namespace for a capability or requirement. Used
1: 	 * in {@link #BUNDLE_REQUIREMENT_TYPE} and {@link #BUNDLE_CAPABILITY_TYPE}.
1: 	 * The key is {@link #NAMESPACE} and the type is a String.
1: 	 */
1: 	Item			NAMESPACE_ITEM						= new Item(NAMESPACE, "The namespace of a capability or requirement", SimpleType.STRING);
1: 	/**
1: 	 * The Composite Type that represents the requirement of a bundle.
1: 	 *
1: 	 * The composite consists of:
1: 	 * <ul>
1: 	 * <li>{@link #NAMESPACE}</li>
1: 	 * <li>{@link #ATTRIBUTES}</li>
1: 	 * <li>{@link #DIRECTIVES}</li>
1: 	 * </ul>
1: 	 */
1: 	CompositeType	BUNDLE_REQUIREMENT_TYPE				= Item.compositeType("BUNDLE_REQUIREMENT", "Describes the requirement of a bundle", ATTRIBUTES_ITEM, DIRECTIVES_ITEM, NAMESPACE_ITEM);
1: 	/**
1: 	 * The Composite Type that represents the capability of a bundle.
1: 	 *
1: 	 * The composite consists of:
1: 	 * <ul>
1: 	 * <li>{@link #NAMESPACE}</li>
1: 	 * <li>{@link #ATTRIBUTES}</li>
1: 	 * <li>{@link #DIRECTIVES}</li>
1: 	 * </ul>
1: 	 */
1: 	CompositeType	BUNDLE_CAPABILITY_TYPE				= Item.compositeType("BUNDLE_CAPABILITY", "Describes the capability of a bundle", ATTRIBUTES_ITEM, DIRECTIVES_ITEM, NAMESPACE_ITEM);
1: 	/**
1: 	 * The key of {@link #PROVIDER_BUNDLE_ID_ITEM}.
1: 	 */
1: 	String			PROVIDER_BUNDLE_ID					= "ProviderBundleId";
1: 	/**
1: 	 * The item containing the provider bundle ID in {@link #BUNDLE_WIRE_TYPE}.
1: 	 * The key is {@link #PROVIDER_BUNDLE_ID} and the type is a long.
1: 	 */
1: 	Item			PROVIDER_BUNDLE_ID_ITEM				= new Item(PROVIDER_BUNDLE_ID, "The identifier of the bundle that is the provider of the capability", SimpleType.LONG);
1: 	/**
1: 	 * The key of {@link #REQUIRER_BUNDLE_ID_ITEM}.
1: 	 */
1: 	String			REQUIRER_BUNDLE_ID					= "RequirerBundleId";
1: 	/**
1: 	 * The item containing the requirer bundle ID in {@link #BUNDLE_WIRE_TYPE}.
1: 	 * The key is {@link #REQUIRER_BUNDLE_ID} and the type is long.
1: 	 */
1: 	Item			REQUIRER_BUNDLE_ID_ITEM				= new Item(REQUIRER_BUNDLE_ID, "The identifier of the bundle that is the requirer of the requirement", SimpleType.LONG);
1: 	/**
1: 	 * The key of {@link #BUNDLE_REQUIREMENT_ITEM}.
1: 	 */
1: 	String			BUNDLE_REQUIREMENT					= "BundleRequirement";
1: 	/**
1: 	 * The item containing a requirement for a bundle in
1: 	 * {@link #BUNDLE_WIRE_TYPE}. The key is {@link #BUNDLE_REQUIREMENT} and the
1: 	 * type is {@link #BUNDLE_REQUIREMENT_TYPE}.
1: 	 */
1: 	Item			BUNDLE_REQUIREMENT_ITEM				= new Item(BUNDLE_REQUIREMENT, "The wired requirements of a bundle", BUNDLE_REQUIREMENT_TYPE);
1: 	/**
1: 	 * The key of {@link #BUNDLE_CAPABILITY_ITEM}.
1: 	 */
1: 	String			BUNDLE_CAPABILITY					= "BundleCapability";
1: 	/**
1: 	 * The item containing a capability for a bundle in
1: 	 * {@link #BUNDLE_WIRE_TYPE}. The key is {@link #BUNDLE_CAPABILITY} and the
1: 	 * type is {@link #BUNDLE_CAPABILITY_TYPE}.
1: 	 */
1: 	Item			BUNDLE_CAPABILITY_ITEM				= new Item(BUNDLE_CAPABILITY, "The wired capabilities of a bundle", BUNDLE_CAPABILITY_TYPE);
1: 	/**
1: 	 * The key of {@link #PROVIDER_BUNDLE_REVISION_ID_ITEM}.
1: 	 */
1: 	String			PROVIDER_BUNDLE_REVISION_ID			= "ProviderBundleRevisionId";
1: 	/**
1: 	 * The local ID of a provider revision in {@link #BUNDLE_WIRE_TYPE}. This ID
1: 	 * is local to the result where it resides and has no defined meaning across
1: 	 * multiple invocations. The key is {@link #PROVIDER_BUNDLE_REVISION_ID} and
1: 	 * the type is an int.
1: 	 */
1: 	Item			PROVIDER_BUNDLE_REVISION_ID_ITEM	= new Item(PROVIDER_BUNDLE_REVISION_ID, "A local id for the bundle revision that is the provider of the capability", SimpleType.INTEGER);
1: 	/**
1: 	 * The key of {@link #REQUIRER_BUNDLE_REVISION_ID_ITEM}.
1: 	 */
1: 	String			REQUIRER_BUNDLE_REVISION_ID			= "RequirerBundleRevisionId";
1: 	/**
1: 	 * The local ID of a requirer revision in {@link #BUNDLE_WIRE_TYPE}. This ID
1: 	 * is local to the result where it resides and has no defined meaning across
1: 	 * multiple invocations. The key is {@link #REQUIRER_BUNDLE_REVISION_ID} and
1: 	 * the type is an int.
1: 	 */
1: 	Item			REQUIRER_BUNDLE_REVISION_ID_ITEM	= new Item(REQUIRER_BUNDLE_REVISION_ID, "A local id for the bundle revision that is the requirer of the requirement", SimpleType.INTEGER);
1: 	/**
1: 	 * The Composite type that represents a bundle wire describing the live
1: 	 * association between a provider of a capability and a requirer of the
1: 	 * corresponding requirement.
1: 	 * <p/>
1: 	 * The composite consists of:
1: 	 * <ul>
1: 	 * <li>{@link #BUNDLE_REQUIREMENT}</li>
1: 	 * <li>{@link #BUNDLE_CAPABILITY}</li>
1: 	 * <li>{@link #PROVIDER_BUNDLE_ID}</li>
1: 	 * <li>{@link #PROVIDER_BUNDLE_REVISION_ID}</li>
1: 	 * <li>{@link #REQUIRER_BUNDLE_ID}</li>
1: 	 * <li>{@link #REQUIRER_BUNDLE_REVISION_ID}</li>
1: 	 * </ul>
1: 	 */
1: 	CompositeType	BUNDLE_WIRE_TYPE					= Item.compositeType("BUNDLE_WIRE",
1: 																"Describes the live association between a provider and a requirer",
1: 																BUNDLE_REQUIREMENT_ITEM,
1: 																BUNDLE_CAPABILITY_ITEM,
1: 																PROVIDER_BUNDLE_ID_ITEM,
1: 																PROVIDER_BUNDLE_REVISION_ID_ITEM,
1: 																REQUIRER_BUNDLE_ID_ITEM,
1: 																REQUIRER_BUNDLE_REVISION_ID_ITEM);
1: 	/**
1: 	 * An array of {@link #BUNDLE_WIRE_TYPE}s.
1: 	 */
1: 	ArrayType		BUNDLE_WIRES_TYPE_ARRAY				= Item.arrayType(1, BUNDLE_WIRE_TYPE);
1: 	/**
1: 	 * The key of {@link #BUNDLE_REVISION_ID_ITEM}.
1: 	 */
1: 	String			BUNDLE_REVISION_ID					= "BundleRevisionId";
1: 	/**
1: 	 * The item containing a bundle revision ID. A bundle revision ID is always
1: 	 * local to the result of a JMX invocation and do not have a defined meaning
1: 	 * across invocation calls. They are used where a result can potentially
1: 	 * contain multiple revisions of the same bundle. The key is
1: 	 * {@link #BUNDLE_REVISION_ID} and the type is an integer.
1: 	 */
1: 	Item			BUNDLE_REVISION_ID_ITEM				= new Item(BUNDLE_REVISION_ID, "The local identifier of the bundle revision", SimpleType.INTEGER);
1: 	/**
1: 	 * The key of {@link #BUNDLE_ID_ITEM}.
1: 	 */
1: 	String			BUNDLE_ID							= "BundleId";
1: 	/**
1: 	 * The item containing a bundle ID. They key is {@link #BUNDLE_ID} and the
1: 	 * type is a long.
1: 	 */
1: 	Item			BUNDLE_ID_ITEM						= new Item(BUNDLE_ID, "The bundle identifier of the bundle revision", SimpleType.LONG);
1: 	/**
1: 	 * An array of {@link #BUNDLE_REQUIREMENT_TYPE}s.
1: 	 */
1: 	ArrayType		REQUIREMENT_TYPE_ARRAY				= Item.arrayType(1, BUNDLE_REQUIREMENT_TYPE);
1: 	/**
1: 	 * An array of {@link #BUNDLE_CAPABILITY_TYPE}s.
1: 	 */
1: 	ArrayType		CAPABILITY_TYPE_ARRAY				= Item.arrayType(1, BUNDLE_CAPABILITY_TYPE);
1: 	/**
1: 	 * The key of {@link #REQUIREMENTS_ITEM}.
1: 	 */
1: 	String			REQUIREMENTS						= "Requirements";
1: 	/**
1: 	 * The item containing the requirements in
1: 	 * {@link #REVISION_REQUIREMENTS_TYPE} and {@link #BUNDLE_WIRING_TYPE}. The
1: 	 * key is {@link #REQUIREMENTS} and the type is
1: 	 * {@link #REQUIREMENT_TYPE_ARRAY}.
1: 	 */
1: 	Item			REQUIREMENTS_ITEM					= new Item(REQUIREMENTS, "The bundle requirements of a bundle revision wiring", REQUIREMENT_TYPE_ARRAY);
1: 	/**
1: 	 * The Composite Type that represents the requirements of a revision. The
1: 	 * composite consists of:
1: 	 * <ul>
1: 	 * <li>{@link #BUNDLE_REVISION_ID}</li>
1: 	 * <li>{@link #REQUIREMENTS}</li>
1: 	 * </ul>
1: 	 */
1: 	CompositeType	REVISION_REQUIREMENTS_TYPE			= Item.compositeType("REVISION_REQUIREMENTS", "Describes the requirements for a bundle revision", BUNDLE_REVISION_ID_ITEM, REQUIREMENTS_ITEM);
1: 	/**
1: 	 * The Tabular Type that hold the requirements of a revision. The row type
1: 	 * is {@link #REVISION_REQUIREMENTS_TYPE} and the index is
1: 	 * {@link #BUNDLE_REVISION_ID}.
1: 	 */
1: 	TabularType		REVISIONS_REQUIREMENTS_TYPE			= Item.tabularType("REVISIONS_REQUIREMENTS", "The bundle requirements for all bundle revisions", REVISION_REQUIREMENTS_TYPE, BUNDLE_REVISION_ID);
1: 
1: 	/**
1: 	 * The key of {@link #CAPABILITIES_ITEM}.
1: 	 */
1: 	String			CAPABILITIES						= "Capabilities";
1: 
1: 	/**
1: 	 * The item containing the capabilities in
1: 	 * {@link #REVISION_CAPABILITIES_TYPE} and {@link #BUNDLE_WIRING_TYPE}. The
1: 	 * key is {@link #CAPABILITIES} and the type is
1: 	 * {@link #CAPABILITY_TYPE_ARRAY}.
1: 	 */
1: 	Item			CAPABILITIES_ITEM					= new Item(CAPABILITIES, "The bundle capabilities of a bundle revision wiring", CAPABILITY_TYPE_ARRAY);
1: 
1: 	/**
1: 	 * The Composite Type that represents the capabilities for a revision. The
1: 	 * composite consists of:
1: 	 * <ul>
1: 	 * <li>{@link #BUNDLE_REVISION_ID}</li>
1: 	 * <li>{@link #CAPABILITIES}</li>
1: 	 * </ul>
1: 	 */
1: 	CompositeType	REVISION_CAPABILITIES_TYPE			= Item.compositeType("REVISION_CAPABILITIES", "Describes the capabilities for a bundle revision", BUNDLE_REVISION_ID_ITEM, CAPABILITIES_ITEM);
1: 
1: 	/**
1: 	 * The Tabular Type that holds the capabilities of a revision. The row type
1: 	 * is {@link #REVISION_CAPABILITIES_TYPE} and the index is
1: 	 * {@link #BUNDLE_REVISION_ID}.
1: 	 */
1: 	TabularType		REVISIONS_CAPABILITIES_TYPE			= Item.tabularType("REVISIONS_CAPABILITIES", "The bundle capabilities for all bundle revisions", REVISION_CAPABILITIES_TYPE, BUNDLE_REVISION_ID);
1: 
1: 	/**
1: 	 * The key of {@link #PROVIDED_WIRES_ITEM}.
1: 	 */
1: 	String			PROVIDED_WIRES						= "ProvidedWires";
1: 
1: 	/**
1: 	 * The item containing the provided wires in {@link #BUNDLE_WIRING_TYPE}.
1: 	 * The key is {@link #PROVIDED_WIRES} and the type is
1: 	 * {@link #BUNDLE_WIRES_TYPE_ARRAY}.
1: 	 */
1: 	Item			PROVIDED_WIRES_ITEM					= new Item(PROVIDED_WIRES, "The bundle wires to the capabilities provided by this bundle wiring.", BUNDLE_WIRES_TYPE_ARRAY);
1: 
1: 	/**
1: 	 * The key of {@link #REQUIRED_WIRES_ITEM}.
1: 	 */
1: 	String			REQUIRED_WIRES						= "RequiredWires";
1: 
1: 	/**
1: 	 * The item containing the required wires in {@link #BUNDLE_WIRING_TYPE}.
1: 	 * The key is {@link #REQUIRED_WIRES} and the type is
1: 	 * {@link #BUNDLE_WIRES_TYPE_ARRAY}.
1: 	 */
1: 	Item			REQUIRED_WIRES_ITEM					= new Item(REQUIRED_WIRES, "The bundle wires to requirements in use by this bundle wiring", BUNDLE_WIRES_TYPE_ARRAY);
1: 
1: 	/**
1: 	 * The Composite Type that represents a bundle wiring. The composite
1: 	 * consists of:
1: 	 * <ul>
1: 	 * <li>{@link #BUNDLE_ID}</li>
1: 	 * <li>{@link #BUNDLE_REVISION_ID}</li>
1: 	 * <li>{@link #REQUIREMENTS}</li>
1: 	 * <li>{@link #CAPABILITIES}</li>
1: 	 * <li>{@link #REQUIRED_WIRES}</li>
1: 	 * <li>{@link #PROVIDED_WIRES}</li>
1: 	 * </ul>
1: 	 */
1: 	CompositeType	BUNDLE_WIRING_TYPE					= Item.compositeType("BUNDLE_WIRING",
1: 																"Describes the runtime association between a provider and a requirer",
1: 																BUNDLE_ID_ITEM,
1: 																BUNDLE_REVISION_ID_ITEM,
1: 																REQUIREMENTS_ITEM,
1: 																CAPABILITIES_ITEM,
1: 																REQUIRED_WIRES_ITEM,
1: 																PROVIDED_WIRES_ITEM);
1: 
1: 	/**
1: 	 * The Tabular Type to hold the wiring of a number of bundles. The row type
1: 	 * is {@link #BUNDLE_WIRING_TYPE} and the index is the combination of the
1: 	 * {@link #BUNDLE_ID} and the {@link #BUNDLE_REVISION_ID}.
1: 	 */
1: 	TabularType		BUNDLES_WIRING_TYPE					= Item.tabularType("BUNDLES_WIRING", "The bundle wiring for all bundle revisions", BUNDLE_WIRING_TYPE, BUNDLE_ID, BUNDLE_REVISION_ID);
1: 
1: 	/**
1: 	 * Returns the requirements for the current bundle revision.
1: 	 *
1: 	 * @see #REQUIREMENT_TYPE_ARRAY for the details of the CompositeData.
1: 	 *
1: 	 * @param bundleId The bundle ID.
1: 	 * @param namespace The namespace of the requirements to be returned by this
1: 	 *        operation.
1: 	 * @return the declared requirements for the current revision of
1: 	 *         {@code bundleId} and {@code namespace}.
1: 	 * @throws JMException if there is a JMX problem.
1: 	 * @throws IOException if the connection could not be made because of a
1: 	 *         communication problem.
1: 	 */
1: 	CompositeData[] getCurrentRevisionDeclaredRequirements(long bundleId, String namespace) throws IOException, JMException;
1: 
1: 	/**
1: 	 * Returns the capabilities for the current bundle revision.
1: 	 *
1: 	 * @see #CAPABILITY_TYPE_ARRAY for the details of the CompositeData.
1: 	 *
1: 	 * @param bundleId The bundle ID.
1: 	 * @param namespace The namespace of the capabilities to be returned by this
1: 	 *        operation.
1: 	 * @return the declared capabilities for the current revision of
1: 	 *         {@code bundleId} and {@code namespace}.
1: 	 * @throws JMException if there is a JMX problem.
1: 	 * @throws IOException if the connection could not be made because of a
1: 	 *         communication problem.
1: 	 */
1: 	CompositeData[] getCurrentRevisionDeclaredCapabilities(long bundleId, String namespace) throws IOException, JMException;
1: 
1: 	/**
1: 	 * Returns the bundle wiring for the current bundle revision.
1: 	 *
1: 	 * @see #BUNDLE_WIRING_TYPE for the details of the CompositeData.
1: 	 *
1: 	 * @param bundleId The bundle ID.
1: 	 * @param namespace The namespace of the requirements and capabilities for
1: 	 *        which to return information.
1: 	 * @return the wiring information for the current revision of
1: 	 *         {@code bundleId} and {@code namespace}.
1: 	 * @throws JMException if there is a JMX problem.
1: 	 * @throws IOException if the connection could not be made because of a
1: 	 *         communication problem.
1: 	 */
1: 	CompositeData getCurrentWiring(long bundleId, String namespace) throws IOException, JMException;
1: 
1: 	/**
1: 	 * Returns the bundle wiring closure for the current revision of the
1: 	 * specified bundle. The wiring closure contains all the wirings from the
1: 	 * root bundle revision to all bundle revisions it is wired to and all their
1: 	 * transitive wirings.
1: 	 *
1: 	 * @see #BUNDLES_WIRING_TYPE for the details of the TabularData.
1: 	 *
1: 	 * @param rootBundleId the root bundle of the closure.
1: 	 * @param namespace The namespace of the requirements and capabilities for
1: 	 *        which to return information.
1: 	 * @return a tabular representation of all the wirings in the closure. The
1: 	 *         bundle revision IDs only have meaning in the context of the
1: 	 *         current result. The revision of the rootBundle is set to 0.
1: 	 *         Therefore the root bundle of the closure can be looked up in the
1: 	 *         table by its bundle ID and revision 0.
1: 	 * @throws JMException if there is a JMX problem.
1: 	 * @throws IOException if the connection could not be made because of a
1: 	 *         communication problem.
1: 	 */
1: 	TabularData getCurrentWiringClosure(long rootBundleId, String namespace) throws IOException, JMException;
1: 
1: 	/**
1: 	 * Returns the requirements for all revisions of the bundle.
1: 	 *
1: 	 * @see #REVISIONS_REQUIREMENTS_TYPE for the details of TabularData.
1: 	 *
1: 	 *      The requirements are in no particular order, and may change in
1: 	 *      subsequent calls to this operation.
1: 	 *
1: 	 * @param bundleId The bundle ID.
1: 	 * @param namespace The namespace of the requirements to be returned by this
1: 	 *        operation.
1: 	 * @return the declared requirements for all revisions of {@code bundleId}.
1: 	 * @throws JMException if there is a JMX problem.
1: 	 * @throws IOException if the connection could not be made because of a
1: 	 *         communication problem.
1: 	 */
1: 	TabularData getRevisionsDeclaredRequirements(long bundleId, String namespace) throws IOException, JMException;
1: 
1: 	/**
1: 	 * Returns the capabilities for all revisions of the bundle.
1: 	 *
1: 	 * @see #REVISIONS_CAPABILITIES_TYPE for the details of TabularData.
1: 	 *
1: 	 *      The capabilities are in no particular order, and may change in
1: 	 *      subsequent calls to this operation.
1: 	 *
1: 	 * @param bundleId The bundle ID.
1: 	 * @param namespace The namespace of the capabilities to be returned by this
1: 	 *        operation.
1: 	 * @return the declared capabilities for all revisions of {@code bundleId}
1: 	 * @throws JMException if there is a JMX problem.
1: 	 * @throws IOException if the connection could not be made because of a
1: 	 *         communication problem.
1: 	 */
1: 	TabularData getRevisionsDeclaredCapabilities(long bundleId, String namespace) throws IOException, JMException;
1: 
1: 	/**
1: 	 * Returns the bundle wirings for all revisions of the bundle.
1: 	 *
1: 	 * @see #BUNDLES_WIRING_TYPE for the details of TabularData.
1: 	 *
1: 	 *      The bundle wirings are in no particular order, and may change in
1: 	 *      subsequent calls to this operations.
1: 	 *
1: 	 * @param bundleId The bundle ID.
1: 	 * @param namespace The namespace of the requirements and capabilities for
1: 	 *        which to return information.
1: 	 * @return the wiring information for all revisions of {@code bundleId} and
1: 	 *         {@code namespace}.
1: 	 * @throws JMException if there is a JMX problem.
1: 	 * @throws IOException if the connection could not be made because of a
1: 	 *         communication problem.
1: 	 */
1: 	TabularData getRevisionsWiring(long bundleId, String namespace) throws IOException, JMException;
1: 
1: 	/**
1: 	 * Returns the bundle wiring closure for all revisions of the specified
1: 	 * bundle. The wiring closure contains all the wirings from the root bundle
1: 	 * revision to all bundle revisions it is wired to and all their transitive
1: 	 * wirings.
1: 	 *
1: 	 * @see #BUNDLES_WIRING_TYPE for the details of TabularData.
1: 	 *
1: 	 *      The bundle wirings are in no particular order, and may change in
1: 	 *      subsequent calls to this operation. Furthermore, the bundle revision
1: 	 *      IDs are local and cannot be reused across invocations.
1: 	 *
1: 	 * @param rootBundleId The root bundle ID.
1: 	 * @param namespace The namespace of the requirements and capabilities for
1: 	 *        which to return information.
1: 	 * @return a tabular representation of all the wirings in the closure. The
1: 	 *         bundle revision IDs only have meaning in the context of the
1: 	 *         current result.
1: 	 * @throws JMException if there is a JMX problem.
1: 	 * @throws IOException if the connection could not be made because of a
1: 	 *         communication problem.
1: 	 */
1: 	TabularData getRevisionsWiringClosure(long rootBundleId, String namespace) throws IOException, JMException;
1: 
1: }
commit:3032a97
/////////////////////////////////////////////////////////////////////////
0:     TabularType BUNDLES_WIRING_TYPE =
0:         Item.tabularType("BUNDLES_WIRING",
0:             "The bundle wiring for all bundle revisions",
/////////////////////////////////////////////////////////////////////////
0:      * @see #BUNDLES_WIRING_TYPE for the details of the TabularData.
/////////////////////////////////////////////////////////////////////////
0:      * @see #BUNDLES_WIRING_TYPE for the details of TabularData.
/////////////////////////////////////////////////////////////////////////
0:      * @see #BUNDLES_WIRING_TYPE for the details of TabularData.
commit:5e34dc3
/////////////////////////////////////////////////////////////////////////
0:     ArrayType BUNDLE_WIRES_TYPE_ARRAY =
/////////////////////////////////////////////////////////////////////////
0:     ArrayType REQUIREMENT_TYPE_ARRAY =
0:     ArrayType CAPABILITY_TYPE_ARRAY =
commit:dc372cc
/////////////////////////////////////////////////////////////////////////
0:      * @see #REVISIONS_REQUIREMENTS_TYPE for the details of TabularData.
/////////////////////////////////////////////////////////////////////////
0:      * @see #REVISIONS_CAPABILITIES_TYPE for the details of TabularData.
/////////////////////////////////////////////////////////////////////////
0:      * @see #REVISIONS_BUNDLE_WIRING_TYPE for the details of TabularData.
/////////////////////////////////////////////////////////////////////////
0:      * @see #BUNDLE_WIRING_CLOSURE_TYPE for the details of TabularData.
commit:12bb1ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             BUNDLE_REVISION_ID);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             BUNDLE_REVISION_ID);
commit:8624fd8
/////////////////////////////////////////////////////////////////////////
1: 
1:  * <p>
0:  * It can be used to retrieve the declared capabilities, declared requirements, and wiring
0:  * for the current and past revisions of bundles.
1:  * @ThreadSafe
/////////////////////////////////////////////////////////////////////////
0:     ArrayType<CompositeData> BUNDLE_WIRES_TYPE_ARRAY =
/////////////////////////////////////////////////////////////////////////
0:     ArrayType<CompositeData> REQUIREMENT_TYPE_ARRAY =
0:     ArrayType<CompositeData> CAPABILITY_TYPE_ARRAY =
commit:7b6fac5
/////////////////////////////////////////////////////////////////////////
0:         + ":type=wiringState,version=1.7";
1:     /**
0:      * To be specified on any operation that takes a 'namespace' argument when results from all namespaces are wanted.
0:     String ALL_NAMESPACE = "osgi.wiring.all";
/////////////////////////////////////////////////////////////////////////
commit:334a137
/////////////////////////////////////////////////////////////////////////
0:  * Copyright (c) OSGi Alliance (2010-2012). All Rights Reserved.
/////////////////////////////////////////////////////////////////////////
1: import javax.management.JMException;
/////////////////////////////////////////////////////////////////////////
0:      * @see #REQUIREMENT_TYPE_ARRAY for the details of the CompositeData.
1:      *
0:      * @param bundleId The bundle ID.
0:      * @param namespace The name space of the requirements to be returned by this operation.
0:      * and <code>namespace</code>.
0:      * @throws JMException if there is a JMX problem.
0:      * @throws IOException if the connection could not be made because of a communication problem.
0:     CompositeData[] getCurrentRevisionDeclaredRequirements(long bundleId, String namespace)
0:             throws IOException, JMException;
0:      * @see #CAPABILITY_TYPE_ARRAY for the details of the CompositeData.
1:      *
0:      * @param bundleId The bundle ID.
0:      * @param namespace The name space of the capabilities to be returned by this operation.
0:      * and <code>namespace</code>.
0:      * @throws JMException if there is a JMX problem.
0:      * @throws IOException if the connection could not be made because of a communication problem.
0:     CompositeData[] getCurrentRevisionDeclaredCapabilities(long bundleId, String namespace)
0:             throws IOException, JMException;
0:      * @see #BUNDLE_WIRING_TYPE for the details of the CompositeData.
1:      *
0:      * @param bundleId The bundle ID.
0:      * @param namespace The name space of the requirements and capabilities for which to return information.
0:      * @return the wiring information for the current revision of <code>bundleId</code>
0:      * and <code>namespace</code>.
0:      * @throws JMException if there is a JMX problem.
0:      * @throws IOException if the connection could not be made because of a communication problem.
0:     CompositeData getCurrentWiring(long bundleId, String namespace)
0:             throws IOException, JMException;
0:      * Returns the bundle wiring closure for the current revision of the specified bundle. The
0:      * wiring closure contains all the wirings from the root bundle revision to all bundle revisions
0:      * it is wired to and all their transitive wirings.
0:      * @see #BUNDLE_WIRING_CLOSURE_TYPE for the details of the TabularData.
0:      * @param namespace The name space of the requirements and capabilities for which to return information.
0:      * @return a tabular representation of all the wirings in the closure. The bundle revision IDs
0:      * to 0. Therefore the root bundle of the closure can be looked up in the table by its bundle ID and
0:      * revision 0.
0:      * @throws JMException if there is a JMX problem.
0:      * @throws IOException if the connection could not be made because of a communication problem.
0:     TabularData getCurrentWiringClosure(long rootBundleId, String namespace)
0:             throws IOException, JMException;
1:      *
0:      * @see #REVISIONS_REQUIREMENT_TYPE_ARRAY for the details of TabularData.
1:      *
0:      * @param bundleId The bundle ID.
0:      * @param namespace The name space of the requirements to be returned by this operation.
0:      * @return the declared requirements for all revisions of <code>bundleId</code>.
0:      * @throws JMException if there is a JMX problem.
0:      * @throws IOException if the connection could not be made because of a communication problem.
0:     TabularData getRevisionsDeclaredRequirements(long bundleId, String namespace)
0:             throws IOException, JMException;
1: 
1:      *
0:      * @see #REVISIONS_CAPABILITY_TYPE_ARRAY for the details of TabularData.
1:      *
0:      * @param bundleId The bundle ID.
0:      * @param namespace The name space of the capabilities to be returned by this operation.
0:      * @throws JMException if there is a JMX problem.
0:      * @throws IOException if the connection could not be made because of a communication problem.
0:     TabularData getRevisionsDeclaredCapabilities(long bundleId, String namespace)
0:             throws IOException, JMException;
1:      *
0:      * @see #BUNDLE_WIRING_TYPE_ARRAY for the details of TabularData.
1:      *
0:      * @param bundleId The bundle ID.
0:      * @param namespace The name space of the requirements and capabilities for which to return information.
0:      * @return the wiring information for all revisions of <code>bundleId</code> and <code>namespace</code>.
0:      * @throws JMException if there is a JMX problem.
0:      * @throws IOException if the connection could not be made because of a communication problem.
0:     TabularData getRevisionsWiring(long bundleId, String namespace)
0:             throws IOException, JMException;
0:      * Returns the bundle wiring closure for all revisions of the specified bundle. The
0:      * wiring closure contains all the wirings from the root bundle revision to all bundle revisions
0:      * it is wired to and all their transitive wirings.
0:      * @see #BUNDLE_WIRING_TYPE_ARRAY for the details of TabularData.
1:      *
0:      * The bundle wirings are in no particular order, and may
0:      * change in subsequent calls to this operation. Furthermore,
0:      * the bundle revision IDs are local and cannot be reused across invocations.
1:      *
0:      * @param rootBundleId The root bundle ID.
0:      * @param namespace The name space of the requirements and capabilities for which to return information.
0:      * @return a tabular representation of all the wirings in the closures. The bundle revision IDs
0:      * only have meaning in the context of the current result.
0:      * @throws JMException if there is a JMX problem.
0:      * @throws IOException if the connection could not be made because of a communication problem.
0:     TabularData getRevisionsWiringClosure(long rootBundleId, String namespace)
0:             throws IOException, JMException;
1: 
commit:e4f0347
/////////////////////////////////////////////////////////////////////////
0:      * a capability and a requirer of the corresponding requirement.
/////////////////////////////////////////////////////////////////////////
0:     ArrayType<CompositeType> BUNDLE_WIRES_TYPE_ARRAY =
/////////////////////////////////////////////////////////////////////////
0:     ArrayType<CompositeType> REQUIREMENT_TYPE_ARRAY =
0:     ArrayType<CompositeType> CAPABILITY_TYPE_ARRAY =
/////////////////////////////////////////////////////////////////////////
0:                 BUNDLE_ID_ITEM,
0:                 BUNDLE_REVISION_ID_ITEM,
0:                 REQUIREMENTS_ITEM,
0:                 CAPABILITIES_ITEM,
0:                 REQUIRED_WIRES_ITEM,
0:                 PROVIDED_WIRES_ITEM);
commit:91b6cdf
/////////////////////////////////////////////////////////////////////////
0:     TabularData getRevisionsWiringClosure(long rootBundleId, String namespace) throws IOException;
commit:e98589f
/////////////////////////////////////////////////////////////////////////
0:     TabularType REVISIONS_BUNDLE_WIRING_TYPE =
0:         Item.tabularType("REVISIONS_BUNDLE_WIRING",
0:             "The bundle wiring for all bundle revisions",
0:             BUNDLE_WIRING_TYPE,
0:             BUNDLE_ID, BUNDLE_REVISION_ID);
1:     /*
/////////////////////////////////////////////////////////////////////////
1:     */
/////////////////////////////////////////////////////////////////////////
0:     TabularData getRevisionsWiring(long bundleId, String namespace) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:     TabularData getWiringClosure(long rootBundleId, String namespace) throws IOException;
commit:62a90a9
/////////////////////////////////////////////////////////////////////////
0:     CompositeType REVISION_REQUIREMENTS_TYPE =
0:         Item.compositeType("REVISION_REQUIREMENTS",
0:             "Describes the requirements for a bundle revision",
0:             BUNDLE_ID_ITEM,
0:             BUNDLE_REVISION_ID_ITEM,
0:             REQUIREMENTS_ITEM);
1: 
0:     TabularType REVISIONS_REQUIREMENTS_TYPE =
0:         Item.tabularType("REVISIONS_REQUIREMENTS",
0:             "The bundle requirements for all bundle revisions",
0:             REVISION_REQUIREMENTS_TYPE,
0:             BUNDLE_ID, BUNDLE_REVISION_ID);
1: 
0:     CompositeType REVISION_CAPABILITIES_TYPE =
0:         Item.compositeType("REVISION_CAPABILITIES",
0:             "Describes the capabilities for a bundle revision",
0:             BUNDLE_ID_ITEM,
0:             BUNDLE_REVISION_ID_ITEM,
0:             CAPABILITIES_ITEM);
1: 
0:     TabularType REVISIONS_CAPABILITIES_TYPE =
0:         Item.tabularType("REVISIONS_CAPABILITIES",
0:             "The bundle capabilities for all bundle revisions",
0:             REVISION_CAPABILITIES_TYPE,
0:             BUNDLE_ID, BUNDLE_REVISION_ID);
1: 
/////////////////////////////////////////////////////////////////////////
0:             BUNDLE_WIRING_TYPE,
0:             BUNDLE_ID, BUNDLE_REVISION_ID);
/////////////////////////////////////////////////////////////////////////
0:     TabularData getRevisionsDeclaredRequirements(long bundleId,
/////////////////////////////////////////////////////////////////////////
0:     TabularData getRevisionsDeclaredCapabilities(long bundleId,
commit:307fdbc
/////////////////////////////////////////////////////////////////////////
0:     CompositeData[] getCurrentRevisionDeclaredCapabilities(long bundleId,
commit:1dbcef9
/////////////////////////////////////////////////////////////////////////
1: public interface BundleWiringStateMBean {
/////////////////////////////////////////////////////////////////////////
0:             BundleWiringStateMBean.BUNDLE_WIRING_TYPE,
0:             BundleWiringStateMBean.BUNDLE_ID, BundleWiringStateMBean.BUNDLE_REVISION_ID);
commit:3f3f24f
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright (c) OSGi Alliance (2010, 2011). All Rights Reserved.
0:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.jmx.framework.wiring;
1: 
1: import java.io.IOException;
1: 
1: import javax.management.openmbean.ArrayType;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.SimpleType;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularType;
1: 
1: import org.osgi.jmx.Item;
1: import org.osgi.jmx.JmxConstants;
1: 
0: /**
1:  * This MBean represents the bundle wiring state.
0:  *
0:  * Note that not all information from the BundleWiring Java API is provided.
0:  *
0:  * Particularly, the limitations are:
0:  *  - Cannot retrieve references to resources (e.g. class) of a particular bundle wiring.
1:  */
0: public interface BundleRevisionsStateMBean {
0:     /*
0:      * The Object Name for a Bundle Revisions MBean.
1:      */
0:     String OBJECTNAME = JmxConstants.OSGI_CORE
0:         + ":type=wiringState,version=1.0";
1: 
0:     /*
0:      * Namespaces
0:      *
1:      */
0:     String BUNDLE_NAMESPACE = "osgi.wiring.bundle";
0:     String HOST_NAMESPACE = "osgi.wiring.host";
0:     String PACKAGE_NAMESPACE = "osgi.wiring.package";
1: 
0:     /*
0:      * Items, CompositeData, TabularData, ArrayTypes
0:      *
1:      */
0:     String KEY = "Key";
0:     Item KEY_ITEM = new Item(KEY, "The directive key", SimpleType.STRING);
1: 
0:     String VALUE = "Value";
0:     Item VALUE_ITEM = new Item(VALUE, "The directive value",
0:             SimpleType.STRING);
1: 
0:     CompositeType DIRECTIVE_TYPE = Item.compositeType("DIRECTIVE",
0:             "Describes a directive of a capability or requirement",
0:             KEY_ITEM, VALUE_ITEM);
0:     TabularType DIRECTIVES_TYPE = Item.tabularType("DIRECTIVES",
0:             "Describes the directives of a capability or requirement",
0:             DIRECTIVE_TYPE, KEY
0:             );
1: 
0:     String DIRECTIVES = "Directives";
0:     Item DIRECTIVES_ITEM = new Item(DIRECTIVES,
0:             "The directives of a capability or requirement",
0:             DIRECTIVES_TYPE);
1: 
0:     // REVIEW should we reuse from JmxConstants here or create our own?
0:     TabularType ATTRIBUTES_TYPE = Item.tabularType("ATTRIBUTES",
0:             "Describes attributes of a capability or requirement",
0:             JmxConstants.PROPERTY_TYPE, JmxConstants.KEY
0:             );
0:     String ATTRIBUTES = "Attributes";
0:     Item ATTRIBUTES_ITEM = new Item(ATTRIBUTES,
0:             "The attributes of a capability or requirement",
0:             ATTRIBUTES_TYPE);
1: 
0:     String NAMESPACE = "Namespace";
0:     Item NAMESPACE_ITEM = new Item(NAMESPACE,
0:             "The namespace of a capability or requirement",
0:             SimpleType.STRING);
1: 
0:     CompositeType BUNDLE_REQUIREMENT_TYPE =
0:         Item.compositeType("BUNDLE_REQUIREMENT",
0:                 "Describes the live wired requirements of a bundle",
0:                 ATTRIBUTES_ITEM, DIRECTIVES_ITEM, NAMESPACE_ITEM);
1: 
0:     CompositeType BUNDLE_CAPABILITY_TYPE =
0:         Item.compositeType("BUNDLE_CAPABILITY",
0:                 "Describes the live wired capabilities of a bundle",
0:                 ATTRIBUTES_ITEM, DIRECTIVES_ITEM, NAMESPACE_ITEM);
1: 
0:     String PROVIDER_BUNDLE_ID = "ProviderBundleId";
0:     Item PROVIDER_BUNDLE_ID_ITEM = new Item(PROVIDER_BUNDLE_ID,
0:             "The identifier of the bundle that is the provider of the capability",
0:             SimpleType.LONG);
1: 
0:     String REQUIRER_BUNDLE_ID = "RequirerBundleId";
0:     Item REQUIRER_BUNDLE_ID_ITEM = new Item(REQUIRER_BUNDLE_ID,
0:             "The identifier of the bundle that is the requirer of the requirement",
0:             SimpleType.LONG);
1: 
0:     String BUNDLE_REQUIREMENT = "BundleRequirement";
0:     Item BUNDLE_REQUIREMENT_ITEM = new Item(BUNDLE_REQUIREMENT,
0:             "The wired requirements of a bundle",
0:             BUNDLE_REQUIREMENT_TYPE);
1: 
0:     String BUNDLE_CAPABILITY = "BundleCapability";
0:     Item BUNDLE_CAPABILITY_ITEM = new Item(BUNDLE_CAPABILITY,
0:             "The wired capabilities of a bundle",
0:             BUNDLE_CAPABILITY_TYPE);
1: 
0:     String PROVIDER_BUNDLE_REVISION_ID = "ProviderBundleRevisionId";
0:     Item PROVIDER_BUNDLE_REVISION_ID_ITEM = new Item(PROVIDER_BUNDLE_REVISION_ID,
0:             "A local id for the bundle revision that is the provider of the capability",
0:             SimpleType.INTEGER);
1: 
0:     String REQUIRER_BUNDLE_REVISION_ID = "RequirerBundleRevisionId";
0:     Item REQUIRER_BUNDLE_REVISION_ID_ITEM =  new Item(REQUIRER_BUNDLE_REVISION_ID,
0:             "A local id for the bundle revision that is the requirer of the requirement",
0:             SimpleType.INTEGER);
1: 
0:     /**
0:      * Describes the live association between a provider of
0:      *  a capability and a requirer of the corresponding requirement.
1:      */
0:     CompositeType BUNDLE_WIRE_TYPE =
0:         Item.compositeType("BUNDLE_WIRE",
0:                 "Describes the live association between a provider and a requirer",
0:                 BUNDLE_REQUIREMENT_ITEM,
0:                 BUNDLE_CAPABILITY_ITEM,
0:                 PROVIDER_BUNDLE_ID_ITEM,
0:                 PROVIDER_BUNDLE_REVISION_ID_ITEM,
0:                 REQUIRER_BUNDLE_ID_ITEM,
0:                 REQUIRER_BUNDLE_REVISION_ID_ITEM
0:                 );
0:     ArrayType BUNDLE_WIRES_TYPE_ARRAY =
0:         Item.arrayType(1, BUNDLE_WIRE_TYPE);
1: 
0:     String BUNDLE_REVISION_ID = "BundleRevisionId";
0:     Item BUNDLE_REVISION_ID_ITEM = new Item(BUNDLE_REVISION_ID,
0:             "The local identifier of the bundle revision",
0:             SimpleType.INTEGER);
1: 
0:     String BUNDLE_ID = "BundleId";
0:     Item BUNDLE_ID_ITEM = new Item(BUNDLE_ID,
0:             "The bundle identifier of the bundle revision",
0:             SimpleType.LONG);
1: 
0:     ArrayType REQUIREMENT_TYPE_ARRAY =
0:         Item.arrayType(1, BUNDLE_REQUIREMENT_TYPE);
0:     ArrayType CAPABILITY_TYPE_ARRAY =
0:         Item.arrayType(1, BUNDLE_CAPABILITY_TYPE);
1: 
0:     String REQUIREMENTS = "Requirements";
0:     Item REQUIREMENTS_ITEM = new Item(REQUIREMENTS,
0:             "The bundle requirements of a bundle revision wiring",
0:             REQUIREMENT_TYPE_ARRAY);
1: 
0:     String CAPABILITIES = "Capabilities";
0:     Item CAPABILITIES_ITEM = new Item(CAPABILITIES,
0:             "The bundle capabilities of a bundle revision wiring",
0:             CAPABILITY_TYPE_ARRAY);
1: 
0:     String PROVIDED_WIRES = "ProvidedWires";
0:     Item PROVIDED_WIRES_ITEM = new Item(PROVIDED_WIRES,
0:             "The bundle wires to the capabilities provided by this bundle wiring.",
0:             BUNDLE_WIRES_TYPE_ARRAY);
1: 
0:     String REQUIRED_WIRES = "RequiredWires";
0:     Item REQUIRED_WIRES_ITEM = new Item(REQUIRED_WIRES,
0:             "The bundle wires to requirements in use by this bundle wiring",
0:             BUNDLE_WIRES_TYPE_ARRAY);
1: 
0:     CompositeType BUNDLE_WIRING_TYPE =
0:         Item.compositeType("BUNDLE_WIRING",
0:                 "Describes the runtime association between a provider and a requirer",
0:                 BUNDLE_ID_ITEM,               /* Long */
0:                 BUNDLE_REVISION_ID_ITEM,      /* Integer (local scope) */
0:                 REQUIREMENTS_ITEM,            /* REQUIREMENT_TYPE [] */
0:                 CAPABILITIES_ITEM,            /* CAPABILITIES_TYPE [] */
0:                 REQUIRED_WIRES_ITEM,          /* BUNDLE_WIRE_TYPE [] */
0:                 PROVIDED_WIRES_ITEM           /* BUNDLE_WIRE_TYPE [] */
0:                 );
0:     ArrayType BUNDLE_WIRING_TYPE_ARRAY =
0:         Item.arrayType(1, BUNDLE_WIRING_TYPE);
1: 
0:     ArrayType REVISIONS_REQUIREMENT_TYPE_ARRAY =
0:         Item.arrayType(2, BUNDLE_REQUIREMENT_TYPE);
1: 
0:     ArrayType REVISIONS_CAPABILITY_TYPE_ARRAY =
0:         Item.arrayType(2, BUNDLE_CAPABILITY_TYPE);
1: 
0:     TabularType BUNDLE_WIRING_CLOSURE_TYPE = Item.tabularType("BUNDLE_WIRING_CLOSURE",
0:             "A table of bundle wirings describing a full wiring closure",
0:             BundleRevisionsStateMBean.BUNDLE_WIRING_TYPE,
0:             BundleRevisionsStateMBean.BUNDLE_ID, BundleRevisionsStateMBean.BUNDLE_REVISION_ID);
1: 
0:     /**
0:      * Returns the requirements for the current bundle revision.
0:      * The ArrayType is typed by the {@link #REQUIREMENT_TYPE_ARRAY}.
0:      *
0:      * @param bundleId
0:      * @param namespace
0:      * @return the declared requirements for the current revision of <code>bundleId</code>
0:      * and <code>namespace</code>
0:      *
1:      */
0:     CompositeData[] getCurrentRevisionDeclaredRequirements(long bundleId,
0:             String namespace) throws IOException;
1: 
0:     /**
0:      * Returns the capabilities for the current bundle revision.
0:      * The ArrayType is typed by the {@link #CAPABILITY_TYPE_ARRAY}
0:      *
0:      * @param bundleId
0:      * @param namespace
0:      * @return the declared capabilities for the current revision of <code>bundleId</code>
0:      * and <code>namespace</code>
1:      */
0:     ArrayType getCurrentRevisionDeclaredCapabilities(long bundleId,
0:             String namespace) throws IOException;
1: 
0:     /**
0:      * Returns the bundle wiring for the current bundle revision.
0:      * The ArrayType is typed by the {@link #BUNDLE_WIRING_TYPE}
0:      *
0:      * @param bundleId
0:      * @param namespace
0:      * @return the wires for the current revision of <code>bundleId</code>
0:      * and <code>namespace</code>
1:      */
0:     CompositeData getCurrentWiring(long bundleId, String namespace) throws IOException;
1: 
0:     /**
0:      * Returns the bundle wiring closure for the current revision of the specified bundle.
0:      *
0:      * @see #BUNDLE_WIRING_CLOSURE_TYPE for the details of the TabularType
0:      *
0:      * @param rootBundleId the root bundle of the closure.
0:      * @param namespace the namespace of the capabilities and requirements involved in this wiring.
0:      * @return a tabular representation of all the wiring in the closure. The bundle revision ids
0:      * only have meaning in the context of the current result. The revision of the rootBundle is set
0:      * to 0.
1:      */
0:     TabularData getCurrentWiringClosure(long rootBundleId, String namespace) throws IOException;
1: 
0:     /**
0:      * Returns the requirements for all revisions of the bundle.
0:      * The ArrayType is typed by the {@link #REVISIONS_REQUIREMENT_TYPE_ARRAY}.
0:      * The requirements are in no particular order, and may change in
0:      *  subsequent calls to this operation.
0:      *
0:      * @param bundleId
0:      * @param namespace
0:      * @return the declared requirements for all revisions of <code>bundleId</code>
0:      *
1:      */
0:     ArrayType getRevisionsDeclaredRequirements(long bundleId,
0:             String namespace) throws IOException;
1: 
0:     /**
0:      * Returns the capabilities for all revisions of the bundle.
0:      * The ArrayType is typed by the {@link #REVISIONS_CAPABILITY_TYPE_ARRAY}
0:      * The capabilities are in no particular order, and may change in
0:      *  subsequent calls to this operation.
0:      *
0:      * @param bundleId
0:      * @param namespace
0:      * @return the declared capabilities for all revisions of <code>bundleId</code>
1:      */
0:     ArrayType getRevisionsDeclaredCapabilities(long bundleId,
0:             String namespace) throws IOException;
1: 
0:     /**
0:      * Returns the bundle wirings for all revisions of the bundle.
0:      * The ArrayType is typed by the {@link #BUNDLE_WIRING_TYPE_ARRAY}
0:      * The bundle wirings are in no particular order, and may
0:      *  change in subsequent calls to this operations.
0:      *
0:      * @param bundleId
0:      * @param namespace
0:      * @return the wires for all revisions of <code>bundleId</code>
1:      */
0:     ArrayType getRevisionsWiring(long bundleId, String namespace) throws IOException;
1: 
0:     /**
0:      * Returns a closure of all bundle wirings linked by their
0:      *  bundle wires, starting at <code>rootBundleId</code>.
0:      * The ArrayType is typed by the {@link #BUNDLE_WIRING_TYPE_ARRAY}
0:      * The bundle wirings are in no particular order, and may
0:      *  change in subsequent calls to this operation. Furthermore,
0:      * the bundle wiring IDs are local and cannot be reused across invocations.
0:      *
0:      * @param rootBundleId
0:      * @param namespace
0:      * @return a closure of bundle wirings linked together by wires.
1:      */
0:     ArrayType getWiringClosure(long rootBundleId, String namespace) throws IOException;
1: 
0:     /**
0:      * Returns true if capability provided by <code>provider</code> matches
0:      *  with the requirement being required by <code>requirer</code>.
0:      * The <code>provider</code>'s CompositeType is typed by the
0:      *  {@link #BUNDLE_CAPABILITY_TYPE}
0:      * The <code>requirer</code>'s CompositeType is typed by the
0:      *  {@link #BUNDLE_REQUIREMENT_TYPE}
0:      *
0:      * REVIEW This method would have worked better should the requirements and
0:      *  capabilities have an ID
0:      *
0:      * @param requirer bundle id of the bundle requirer
0:      * @param provider bundle id of the bundle provider
0:      * @return true if capability matches with requirement.
1:      */
0:     boolean matches(CompositeType provider, CompositeType requirer) throws IOException;
0: }
============================================================================