1:65e2deb: /*
1:65e2deb:  * Licensed to the Apache Software Foundation (ASF) under one
1:65e2deb:  * or more contributor license agreements.  See the NOTICE file
1:65e2deb:  * distributed with this work for additional information
1:65e2deb:  * regarding copyright ownership.  The ASF licenses this file
1:65e2deb:  * to you under the Apache License, Version 2.0 (the
1:65e2deb:  * "License"); you may not use this file except in compliance
1:65e2deb:  * with the License.  You may obtain a copy of the License at
2:65e2deb:  *
1:65e2deb:  *   http://www.apache.org/licenses/LICENSE-2.0
1:65e2deb:  *
1:65e2deb:  * Unless required by applicable law or agreed to in writing,
1:65e2deb:  * software distributed under the License is distributed on an
1:65e2deb:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:65e2deb:  * KIND, either express or implied.  See the License for the
1:65e2deb:  * specific language governing permissions and limitations
1:65e2deb:  * under the License.
4:65e2deb:  */
1:d04041b: package org.apache.aries.application.modelling.impl;
1:65e2deb: import java.io.InputStream;
1:65e2deb: import java.net.URL;
1:65e2deb: import java.util.List;
1:b5ce7cf: 
1:65e2deb: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:09a7647: import org.apache.aries.blueprint.services.ParserService;
1:65e2deb: import org.osgi.framework.BundleContext;
1:58f55bd: 
1:6bd0f94: public class ParserProxyImpl extends AbstractParserProxy {
1:65e2deb:   private ParserService _parserService;
1:65e2deb:   private BundleContext _bundleContext;
29:65e2deb:   
1:65e2deb:   public void setParserService (ParserService p) { 
1:d04041b:     _parserService = p;
1:b5ce7cf:   }
1:65e2deb:   
1:65e2deb:   public void setBundleContext (BundleContext b) { 
1:d04041b:     _bundleContext = b;
1:d04041b:   }
1:6bd0f94: 
1:58f55bd:   @Override
1:6bd0f94:   protected ComponentDefinitionRegistry parseCDR(List<URL> blueprintsToParse) throws Exception {
1:6bd0f94: 	  return _parserService.parse(blueprintsToParse, _bundleContext.getBundle());
22:65e2deb:   }
1:58f55bd: 
1:58f55bd:   @Override
1:6bd0f94:   protected ComponentDefinitionRegistry parseCDR(InputStream blueprintToParse) throws Exception {
1:6bd0f94: 	  return _parserService.parse(blueprintToParse, _bundleContext.getBundle());
1:65e2deb:   }
1:65e2deb: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:6bd0f94
/////////////////////////////////////////////////////////////////////////
1: public class ParserProxyImpl extends AbstractParserProxy {
/////////////////////////////////////////////////////////////////////////
1: 
1:   protected ComponentDefinitionRegistry parseCDR(List<URL> blueprintsToParse) throws Exception {
1: 	  return _parserService.parse(blueprintsToParse, _bundleContext.getBundle());
1:   protected ComponentDefinitionRegistry parseCDR(InputStream blueprintToParse) throws Exception {
1: 	  return _parserService.parse(blueprintToParse, _bundleContext.getBundle());
commit:09a7647
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.services.ParserService;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.InvalidAttributeException;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:b5ce7cf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.service.jndi.JNDIConstants;
/////////////////////////////////////////////////////////////////////////
1:       
0:       // Don't provision against JNDI references
0:       if (blueprintFilter != null && !blueprintFilter.trim().isEmpty()) { 
0:         Map<String, String> filter = ManifestHeaderProcessor.parseFilter(blueprintFilter);
0:         blacklisted |= filter.containsKey(JNDIConstants.JNDI_SERVICENAME);
1:       }
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.modelling.ModellingManager;
/////////////////////////////////////////////////////////////////////////
0:   private ModellingManager _modellingManager;
/////////////////////////////////////////////////////////////////////////
0:   public void setModellingManager (ModellingManager m) { 
0:     _modellingManager = m;
1:   
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public List<? extends WrappedServiceMetadata> parse(URL blueprintToParse) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:   @Override
0:   public List<? extends WrappedServiceMetadata> parse(InputStream blueprintToParse) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:   @Override
0:     ParsedServiceElements result = _modellingManager.getParsedServiceElements(services, references);
/////////////////////////////////////////////////////////////////////////
0:           ExportedService wsm = _modellingManager.getExportedService(serviceName, ranking, interfaces, serviceProps);
/////////////////////////////////////////////////////////////////////////
0:           ImportedService ref = _modellingManager.getImportedService (optional, iface, compName, blueprintFilter, 
commit:d04041b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.modelling.impl;
/////////////////////////////////////////////////////////////////////////
0:   public ParserProxyImpl(ParserService p, BundleContext b) {
1: 	  _parserService = p;
1: 	  _bundleContext = b;
1:   }
commit:65e2deb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.application.deployment.management.impl;
0: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
0: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: import java.io.InputStream;
1: import java.net.URL;
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.HashMap;
1: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
1: 
0: import org.apache.aries.application.management.InvalidAttributeException;
0: import org.apache.aries.application.modelling.ExportedService;
0: import org.apache.aries.application.modelling.ImportedService;
0: import org.apache.aries.application.modelling.ParsedServiceElements;
0: import org.apache.aries.application.modelling.ParserProxy;
0: import org.apache.aries.application.modelling.WrappedServiceMetadata;
0: import org.apache.aries.application.modelling.utils.ModellingManager;
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
0: import org.apache.aries.blueprint.ParserService;
1: import org.osgi.framework.BundleContext;
0: import org.osgi.service.blueprint.reflect.BeanMetadata;
0: import org.osgi.service.blueprint.reflect.CollectionMetadata;
0: import org.osgi.service.blueprint.reflect.ComponentMetadata;
0: import org.osgi.service.blueprint.reflect.MapEntry;
0: import org.osgi.service.blueprint.reflect.Metadata;
0: import org.osgi.service.blueprint.reflect.RefMetadata;
0: import org.osgi.service.blueprint.reflect.ReferenceListMetadata;
0: import org.osgi.service.blueprint.reflect.ServiceMetadata;
0: import org.osgi.service.blueprint.reflect.ServiceReferenceMetadata;
0: import org.osgi.service.blueprint.reflect.Target;
0: import org.osgi.service.blueprint.reflect.ValueMetadata;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: 
1: 
0: public class ParserProxyImpl implements ParserProxy {
0:   private Logger _logger = LoggerFactory.getLogger(ParserProxyImpl.class);
1:   private ParserService _parserService;
1:   private BundleContext _bundleContext;
1:   
1:   public void setParserService (ParserService p) { 
0:     _parserService = p;
1:   }
1:   
1:   public void setBundleContext (BundleContext b) { 
0:     _bundleContext = b;
1:   }
1:   
1: 
0:   public List<? extends WrappedServiceMetadata> parse(List<URL> blueprintsToParse) throws Exception {
0:     _logger.debug(LOG_ENTRY, "parse", new Object[]{blueprintsToParse});
0:     ComponentDefinitionRegistry cdr = _parserService.parse (blueprintsToParse, _bundleContext.getBundle());
0:     List<? extends WrappedServiceMetadata> result = parseCDRForServices (cdr, true);
0:     _logger.debug(LOG_EXIT, "parse", new Object[]{result});
0:     return result;
1:   }
1:    
0:   public List<? extends WrappedServiceMetadata> parse(URL blueprintToParse)
0:       throws Exception {
0:     _logger.debug(LOG_ENTRY, "parse", new Object[]{blueprintToParse});
0:     List<URL> list = new ArrayList<URL>();
0:     list.add(blueprintToParse);
1:    
0:     List<? extends WrappedServiceMetadata> result = parse (list);
0:     _logger.debug(LOG_EXIT, "parse", new Object[]{result});
0:     return result;
1:   }
1: 
1: 
0:   public List<? extends WrappedServiceMetadata> parse(InputStream blueprintToParse)
0:       throws Exception {
0:     _logger.debug(LOG_ENTRY, "parse", new Object[]{blueprintToParse});
0:     ComponentDefinitionRegistry cdr = _parserService.parse (blueprintToParse, _bundleContext.getBundle());
0:     List<? extends WrappedServiceMetadata> result = parseCDRForServices (cdr, true);
0:     _logger.debug(LOG_EXIT, "parse", new Object[]{result});
0:     return result;
1:   }
1:  
1: 
0:   public ParsedServiceElements parseAllServiceElements(InputStream blueprintToParse) throws Exception {
0:     _logger.debug(LOG_ENTRY, "parseAllServiceElements", new Object[]{blueprintToParse});
0:     ComponentDefinitionRegistry cdr = _parserService.parse (blueprintToParse, _bundleContext.getBundle());
0:     Collection<ExportedService> services = parseCDRForServices(cdr, false);
0:     Collection<ImportedService> references = parseCDRForReferences (cdr);
0:     ParsedServiceElements result = ModellingManager.getParsedServiceElements(services, references);
0:     _logger.debug(LOG_EXIT, "parseAllServiceElements", new Object[]{result});
0:     return result;
1:   }
1:   
0:   /**
0:    * Extract Service metadata from a ComponentDefinitionRegistry. When doing SCA modelling, we
0:    * need to suppress anonymous services. We don't want to do that when we're modelling for 
0:    * provisioning dependencies. 
0:    * @param cdr                       ComponentDefinitionRegistry
0:    * @param suppressAnonymousServices Unnamed services will not be returned if this is true
0:    * @return List<WrappedServiceMetadata>
1:    */
0:   private List<ExportedService> parseCDRForServices (ComponentDefinitionRegistry cdr, 
0:       boolean suppressAnonymousServices) { 
0:     _logger.debug(LOG_ENTRY, "parseCDRForServices", new Object[]{cdr, suppressAnonymousServices});
0:     List<ExportedService> result = new ArrayList<ExportedService>();
0:     Set<String> names = cdr.getComponentDefinitionNames();
0:     for (String name: names) { 
0:       ComponentMetadata compMetadata = cdr.getComponentDefinition(name);
0:       if (compMetadata instanceof ServiceMetadata) { 
0:         ServiceMetadata serviceMetadata = (ServiceMetadata)compMetadata;
0:         String serviceName;
0:         int ranking;
0:         Collection<String> interfaces = new ArrayList<String>(); 
0:         Map<String, Object> serviceProps = new HashMap<String, Object>();
1: 
0:         ranking = serviceMetadata.getRanking();
0:         for (Object i : serviceMetadata.getInterfaces()) {
0:           interfaces.add((String)i);
1:         }
1:         
0:         // get the service properties
0:         List<MapEntry> props = serviceMetadata.getServiceProperties();
0:         for (MapEntry entry : props) { 
0:           String key = ((ValueMetadata)entry.getKey()).getStringValue();
1:           
0:           Metadata value = entry.getValue();
0:           if (value instanceof CollectionMetadata) { 
0:             List<Metadata> values = ((CollectionMetadata)value).getValues();
0:             String[] theseValues = new String[values.size()];
0:             for (int i=0; i < values.size(); i++) { 
0:               Metadata m = values.get(i); 
0:               theseValues[i] = ((ValueMetadata)m).getStringValue();
1:             }
0:             serviceProps.put(key, theseValues);
0:           } else { 
0:             serviceProps.put(key, ((ValueMetadata)entry.getValue()).getStringValue());
1:           }
1:         }
1: 
0:         // serviceName: use the service id unless that's not set, 
0:         // in which case we use the bean id. 
0:         serviceName = serviceMetadata.getId();
1:         
0:         // If the Service references a Bean, export the bean id as a service property
0:         // as per 121.6.5 p669 of the blueprint 1.0 specification
0:         Target t = serviceMetadata.getServiceComponent();
0:         String targetId = null;
0:         if (t instanceof RefMetadata) { 
0:           targetId = ((RefMetadata)t).getComponentId();
0:         } else if (t instanceof BeanMetadata) { 
0:           targetId = ((BeanMetadata)t).getId();
1:         }
1:         
0:         // Our OBR code MUST have access to targetId if it's available (i.e. not null 
0:         // or auto-generated for an anonymous service. This must ALWAYS be set. 
0:         if (targetId != null && !targetId.startsWith(".")) { // Don't set this for anonymous inner components
0:             serviceProps.put("osgi.service.blueprint.compname", targetId);
0:           if (serviceName == null || serviceName.equals("") || serviceName.startsWith(".")) { 
0:             serviceName = targetId;
1:           }
1:         }
1:         
0:         if(serviceName != null && serviceName.startsWith("."))
0:           serviceName = null;
1:         
0:         // If suppressAnonymous services, do not expose services that have no name
0:         if (!suppressAnonymousServices || (serviceName != null)) { 
0:           ExportedService wsm = ModellingManager.getExportedService(serviceName, ranking, interfaces, serviceProps);
0:           result.add(wsm);
1:         }
1:       }
1:     }
0:     _logger.debug(LOG_EXIT, "parseAllServiceElements", new Object[]{result});
0:     return result; 
1:   }
1: 
0:   /**
0:    * Extract References metadata from a ComponentDefinitionRegistry. 
0:    * @param cdr                       ComponentDefinitionRegistry
0:    * @return List<WrappedReferenceMetadata>
0:    * @throws InvalidAttributeException 
1:    */
0:   private List<ImportedService> parseCDRForReferences (ComponentDefinitionRegistry cdr) throws InvalidAttributeException { 
0:     _logger.debug(LOG_ENTRY, "parseCDRForReferences", new Object[]{cdr});
0:     List<ImportedService> result = new ArrayList<ImportedService>();
0:     Set<String> names = cdr.getComponentDefinitionNames();
0:     for (String name: names) { 
0:       ComponentMetadata compMetadata = cdr.getComponentDefinition(name);
0:       if (compMetadata instanceof ServiceReferenceMetadata) { 
0:         ServiceReferenceMetadata referenceMetadata = (ServiceReferenceMetadata)compMetadata;
1: 
0:         boolean optional = referenceMetadata.getAvailability() == ServiceReferenceMetadata.AVAILABILITY_OPTIONAL;
0:         String iface = referenceMetadata.getInterface();
0:         String compName = referenceMetadata.getComponentName();
0:         String blueprintFilter = referenceMetadata.getFilter();
0:         String id = referenceMetadata.getId();
0:         boolean isMultiple = (referenceMetadata instanceof ReferenceListMetadata);
1:         
0:         //The blueprint parser teams up with JPA and blueprint resource ref
0:         // namespace handlers to give us service imports of the form, 
0:         // objectClass=javax.persistence.EntityManagerFactory, org.apache.aries.jpa.proxy.factory=*, osgi.unit.name=blabber
0:         //
0:         // There will be no matching service for this reference. 
0:         // For now we blacklist certain objectClasses and filters - this is a pretty dreadful thing to do. 
0:         if (isNotBlacklisted (iface, blueprintFilter)) { 
0:           ImportedService ref = ModellingManager.getImportedService (optional, iface, compName, blueprintFilter, 
0:               id, isMultiple);
0:           result.add (ref);  
1:         }
1:       }
1:     }
0:     _logger.debug(LOG_EXIT, "parseCDRForReferences", new Object[]{result});
0:     return result; 
1:   }
1:   
0:   /**
0:    * Some services are injected directly into isolated frameworks by default. We do 
0:    * not need to model these services. They are not represented as ExportedServices 
0:    * (Capabilities) in the various OBR registries, and so cannot be resolved against. 
0:    * Since they are injected directly into each isolated framework, we do not need
0:    * an entry in DEPLOYMENT.MF's Deployed-ImportService header for any of these 
0:    * services. 
1:    * 
0:    * @param iface           The interface declared on a blueprint reference
0:    * @param blueprintFilter The filter on the blueprint reference
0:    * @return                True if the service is not 'blacklisted' and so may be exposed
0:    *                        in the model being generated. 
1:    */
0:   private boolean isNotBlacklisted (String iface, String blueprintFilter) { 
0:     _logger.debug(LOG_ENTRY, "isNotBlacklisted", new Object[]{iface, blueprintFilter});
0:     boolean blacklisted = false;
0:     if (iface != null) {
0:       // JPA - detect interface;
0:       blacklisted |= iface.equals("javax.persistence.EntityManagerFactory");
0:       blacklisted |= iface.equals("javax.persistence.EntityManager");
1:     
0:       // JTA - detect interface
0:       blacklisted |= iface.equals("javax.transaction.UserTransaction");
0:       blacklisted |= iface.equals("javax.transaction.TransactionSynchronizationRegistry");
1:     }
0:     _logger.debug(LOG_EXIT, "isNotBlacklisted", new Object[]{!blacklisted});
0:     return !blacklisted;
1:   }
1: 
1:  
1: }
============================================================================