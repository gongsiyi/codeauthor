1:96d4e06: /*
1:96d4e06:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d4e06:  * or more contributor license agreements.  See the NOTICE file
1:96d4e06:  * distributed with this work for additional information
1:96d4e06:  * regarding copyright ownership.  The ASF licenses this file
1:96d4e06:  * to you under the Apache License, Version 2.0 (the
1:96d4e06:  * "License"); you may not use this file except in compliance
1:96d4e06:  * with the License.  You may obtain a copy of the License at
1:96d4e06:  *
1:96d4e06:  *   http://www.apache.org/licenses/LICENSE-2.0
1:96d4e06:  *
1:96d4e06:  * Unless required by applicable law or agreed to in writing,
1:96d4e06:  * software distributed under the License is distributed on an
1:96d4e06:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:96d4e06:  * KIND, either express or implied.  See the License for the
1:96d4e06:  * specific language governing permissions and limitations
1:96d4e06:  * under the License.
1:96d4e06:  */
1:8f852b6: package org.apache.aries.proxy.impl.common;
3:96d4e06: 
1:475ef33: import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.DISPATCHER_FIELD;
1:475ef33: import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.DISPATCHER_TYPE;
1:475ef33: import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.OBJECT_TYPE;
1:96d4e06: 
1:96d4e06: import org.objectweb.asm.Label;
1:96d4e06: import org.objectweb.asm.MethodVisitor;
1:96d4e06: import org.objectweb.asm.Type;
1:96d4e06: import org.objectweb.asm.commons.Method;
1:96d4e06: 
1:8f852b6: public final class WovenProxyConcreteMethodAdapter extends AbstractWovenProxyMethodAdapter {
1:96d4e06: 
1:96d4e06:   /** Jump here to start executing the original method body **/
1:96d4e06:   private final Label executeDispatch = new Label();
1:96d4e06:   
1:8f852b6:   public WovenProxyConcreteMethodAdapter(MethodVisitor mv, int access, String name,
1:2d7219c:       String desc, String[] exceptions, String methodStaticFieldName, Method currentTransformMethod,
1:051eadf:       Type typeBeingWoven, Type methodDeclaringType, boolean isMethodDeclaringTypeInterface) {
1:2d7219c:     //If we're running on Java 6+ We need to inline any JSR instructions because we're computing stack frames.
1:2d7219c:     //otherwise we can save the overhead
1:8f852b6:     super(mv, access, name, desc, methodStaticFieldName, currentTransformMethod, typeBeingWoven,
1:051eadf:         methodDeclaringType, isMethodDeclaringTypeInterface, false);
3:96d4e06:   }
1:96d4e06: 
1:96d4e06:   /**
1:96d4e06:    * We weave instructions before the normal method body. We must be careful not
1:96d4e06:    * to violate the "rules" of Java (e.g. that try blocks cannot intersect, but
1:96d4e06:    * can be nested). We must also not violate the ordering that ASM expects, so
1:96d4e06:    * we must not call visitMaxs, or define labels before a try/catch that uses 
1:96d4e06:    * them!
1:96d4e06:    */
3:96d4e06:   @Override
1:96d4e06:   public final void visitCode()
1:96d4e06:   {
1:96d4e06:     //Notify our parent that the method code is starting. This must happen first
1:96d4e06:     mv.visitCode();
1:96d4e06:     
1:96d4e06:     //unwrap for equals if we need to
1:96d4e06:     if(currentTransformMethod.getName().equals("equals") && 
1:96d4e06:         currentTransformMethod.getArgumentTypes().length == 1 && 
1:96d4e06:         currentTransformMethod.getArgumentTypes()[0].equals(OBJECT_TYPE)) {
1:96d4e06:       unwrapEqualsArgument();
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     //Check if we have a dispatcher, if so then we need to dispatch!
1:96d4e06:     loadThis();
1:96d4e06:     getField(typeBeingWoven, DISPATCHER_FIELD, DISPATCHER_TYPE);
1:96d4e06:     ifNonNull(executeDispatch);
1:96d4e06:   }
1:96d4e06: 
1:96d4e06:   @Override
1:96d4e06:   public final void visitMaxs(int stack, int locals) {
1:96d4e06:     //Mark this location for continuing execution when a dispatcher is set
1:96d4e06:     mark(executeDispatch);
1:96d4e06:     //Write the dispatcher code in here
1:96d4e06:     writeDispatcher();
1:96d4e06:     mv.visitMaxs(stack, locals);
1:96d4e06:   }
1:96d4e06: }
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:051eadf
/////////////////////////////////////////////////////////////////////////
1:       Type typeBeingWoven, Type methodDeclaringType, boolean isMethodDeclaringTypeInterface) {
1:         methodDeclaringType, isMethodDeclaringTypeInterface, false);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8f852b6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.proxy.impl.common;
1: public final class WovenProxyConcreteMethodAdapter extends AbstractWovenProxyMethodAdapter {
1:   public WovenProxyConcreteMethodAdapter(MethodVisitor mv, int access, String name,
0:       Type typeBeingWoven, Type methodDeclaringType) {
1:     super(mv, access, name, desc, methodStaticFieldName, currentTransformMethod, typeBeingWoven,
0:         methodDeclaringType, false);
/////////////////////////////////////////////////////////////////////////
commit:54c5f49
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     super(mv, access, name, desc, methodStaticFieldName, currentTransformMethod, typeBeingWoven);
commit:475ef33
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.DISPATCHER_FIELD;
1: import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.DISPATCHER_TYPE;
1: import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.OBJECT_TYPE;
0: import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.IS_AT_LEAST_JAVA_6;
0: import org.apache.aries.proxy.impl.common.AbstractWovenProxyMethodAdapter;
commit:2d7219c
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.proxy.impl.weaving.WovenProxyGenerator.IS_AT_LEAST_JAVA_6;
0: import org.objectweb.asm.commons.JSRInlinerAdapter;
/////////////////////////////////////////////////////////////////////////
1:       String desc, String[] exceptions, String methodStaticFieldName, Method currentTransformMethod,
1:     //If we're running on Java 6+ We need to inline any JSR instructions because we're computing stack frames.
1:     //otherwise we can save the overhead
0:     super((IS_AT_LEAST_JAVA_6) ? new JSRInlinerAdapter(mv, access, name, desc, null, exceptions) :
0:              mv, access, name, desc, methodStaticFieldName, currentTransformMethod, typeBeingWoven);
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.proxy.impl.weaving;
1: 
0: import static org.apache.aries.proxy.impl.weaving.AbstractWovenProxyAdapter.DISPATCHER_FIELD;
0: import static org.apache.aries.proxy.impl.weaving.AbstractWovenProxyAdapter.DISPATCHER_TYPE;
0: import static org.apache.aries.proxy.impl.weaving.AbstractWovenProxyAdapter.OBJECT_TYPE;
1: 
1: import org.objectweb.asm.Label;
1: import org.objectweb.asm.MethodVisitor;
1: import org.objectweb.asm.Type;
1: import org.objectweb.asm.commons.Method;
1: 
0: final class WovenProxyMethodAdapter extends AbstractWovenProxyMethodAdapter {
1: 
1:   /** Jump here to start executing the original method body **/
1:   private final Label executeDispatch = new Label();
1:   
0:   public WovenProxyMethodAdapter(MethodVisitor mv, int access, String name,
0:       String desc, String methodStaticFieldName, Method currentTransformMethod,
0:       Type typeBeingWoven) {
0:     super(mv, access, name, desc, methodStaticFieldName, currentTransformMethod,
0:         typeBeingWoven);
1:   }
1: 
1:   /**
1:    * We weave instructions before the normal method body. We must be careful not
1:    * to violate the "rules" of Java (e.g. that try blocks cannot intersect, but
1:    * can be nested). We must also not violate the ordering that ASM expects, so
1:    * we must not call visitMaxs, or define labels before a try/catch that uses 
1:    * them!
1:    */
1:   @Override
1:   public final void visitCode()
1:   {
1:     //Notify our parent that the method code is starting. This must happen first
1:     mv.visitCode();
1:     
1:     //unwrap for equals if we need to
1:     if(currentTransformMethod.getName().equals("equals") && 
1:         currentTransformMethod.getArgumentTypes().length == 1 && 
1:         currentTransformMethod.getArgumentTypes()[0].equals(OBJECT_TYPE)) {
1:       unwrapEqualsArgument();
1:     }
1:     
1:     //Check if we have a dispatcher, if so then we need to dispatch!
1:     loadThis();
1:     getField(typeBeingWoven, DISPATCHER_FIELD, DISPATCHER_TYPE);
1:     ifNonNull(executeDispatch);
1:   }
1: 
1:   @Override
1:   public final void visitMaxs(int stack, int locals) {
1:     //Mark this location for continuing execution when a dispatcher is set
1:     mark(executeDispatch);
1:     //Write the dispatcher code in here
1:     writeDispatcher();
1:     mv.visitMaxs(stack, locals);
1:   }
1:   
1:   @Override
0:   protected final Type getTypeToCastTo() {
0:     return typeBeingWoven;
1:   }
1: 
1:   @Override
0:   protected final boolean isTypeToCastToInterface() {
0:     return false;
1:   }
1: }
============================================================================