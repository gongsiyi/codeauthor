1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.container.parser.impl;
1:2cfdf52: 
1:2cfdf52: import java.net.URL;
1:2cfdf52: import java.util.ArrayList;
1:2cfdf52: import java.util.Collection;
1:2cfdf52: import java.util.Collections;
1:2cfdf52: import java.util.HashSet;
1:2cfdf52: import java.util.List;
1:2cfdf52: import java.util.Properties;
1:2cfdf52: import java.util.Set;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.SharedCacheMode;
1:2cfdf52: import javax.persistence.ValidationMode;
1:2cfdf52: import javax.persistence.spi.ClassTransformer;
1:2cfdf52: import javax.persistence.spi.PersistenceUnitInfo;
1:2cfdf52: import javax.persistence.spi.PersistenceUnitTransactionType;
1:2cfdf52: import javax.sql.DataSource;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.container.weaving.impl.TransformerRegistry;
1:2cfdf52: import org.apache.aries.jpa.container.weaving.impl.TransformerRegistrySingleton;
1:2cfdf52: import org.osgi.framework.Bundle;
1:2cfdf52: import org.osgi.framework.wiring.BundleWiring;
1:2cfdf52: 
1:2cfdf52: public class PersistenceUnit implements PersistenceUnitInfo {
1:2cfdf52: 
1:2cfdf52:     private Bundle bundle;
1:2cfdf52:     private ClassLoader classLoader;
1:2cfdf52:     private Set<String> classNames;
1:2cfdf52:     private boolean excludeUnlisted;
1:2cfdf52:     private DataSource jtaDataSource;
1:2cfdf52:     private String jtaDataSourceName;
1:2cfdf52:     private DataSource nonJtaDataSource;
1:2cfdf52:     private String nonJtaDataSourceName;
1:2cfdf52:     private String persistenceProviderClassName;
1:2cfdf52:     private String persistenceUnitName;
1:2cfdf52:     private String persistenceXMLSchemaVersion;
1:2cfdf52:     private Properties props;
1:2cfdf52:     private SharedCacheMode sharedCacheMode = SharedCacheMode.UNSPECIFIED;
1:2cfdf52:     private PersistenceUnitTransactionType transactionType;
1:2cfdf52:     private ValidationMode validationMode = ValidationMode.NONE;
1:2cfdf52: 
1:2cfdf52:     public PersistenceUnit(Bundle bundle, String persistenceUnitName,
1:2cfdf52:                            PersistenceUnitTransactionType transactionType) {
1:2cfdf52:         this.bundle = bundle;
1:2cfdf52:         this.persistenceUnitName = persistenceUnitName;
1:2cfdf52:         this.transactionType = transactionType;
1:2cfdf52:         this.props = new Properties();
1:2cfdf52:         this.classLoader = bundle.adapt(BundleWiring.class).getClassLoader();
1:e809e9c:         this.classNames = new HashSet<String>();
1:2cfdf52:     }
1:143341f: 
1:2cfdf52:     public void addClassName(String className) {
1:2cfdf52:         this.classNames.add(className);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void addProperty(String name, String value) {
1:2cfdf52:         props.put(name, value);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void addTransformer(ClassTransformer transformer) {
1:2cfdf52:         TransformerRegistry reg = TransformerRegistrySingleton.get();
1:2cfdf52:         reg.addTransformer(bundle, transformer);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public boolean excludeUnlistedClasses() {
1:2cfdf52:         return this.excludeUnlisted;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public Bundle getBundle() {
1:2cfdf52:         return bundle;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public ClassLoader getClassLoader() {
1:2cfdf52:         return this.classLoader;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public List<URL> getJarFileUrls() {
1:ec3ea65:         return Collections.emptyList();
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public DataSource getJtaDataSource() {
1:2cfdf52:         return this.jtaDataSource;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public String getJtaDataSourceName() {
1:2cfdf52:         return jtaDataSourceName;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public List<String> getManagedClassNames() {
1:ec3ea65:         return new ArrayList<String>(classNames);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public List<String> getMappingFileNames() {
1:ec3ea65:         return Collections.emptyList();
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public String getName() {
1:2cfdf52:         return persistenceUnitName;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public ClassLoader getNewTempClassLoader() {
1:2cfdf52:         return new TempBundleDelegatingClassLoader(bundle, classLoader);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public DataSource getNonJtaDataSource() {
1:2cfdf52:         return this.nonJtaDataSource;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public String getNonJtaDataSourceName() {
1:2cfdf52:         return nonJtaDataSourceName;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public String getPersistenceProviderClassName() {
1:2cfdf52:         return this.persistenceProviderClassName;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public String getPersistenceUnitName() {
1:2cfdf52:         return this.persistenceUnitName;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public URL getPersistenceUnitRootUrl() {
1:2cfdf52:         return bundle.getResource("/");
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public String getPersistenceXMLSchemaVersion() {
1:2cfdf52:         return this.persistenceXMLSchemaVersion;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public Properties getProperties() {
1:2cfdf52:         return this.props;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public SharedCacheMode getSharedCacheMode() {
1:2cfdf52:         return this.sharedCacheMode;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public PersistenceUnitTransactionType getTransactionType() {
1:2cfdf52:         return transactionType;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public ValidationMode getValidationMode() {
1:2cfdf52:         return this.validationMode;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public boolean isExcludeUnlisted() {
1:2cfdf52:         return excludeUnlisted;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void setExcludeUnlisted(boolean excludeUnlisted) {
1:2cfdf52:         this.excludeUnlisted = excludeUnlisted;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void setJtaDataSource(DataSource jtaDataSource) {
1:2cfdf52:         this.jtaDataSource = jtaDataSource;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void setJtaDataSourceName(String jtaDataSourceName) {
1:2cfdf52:         this.jtaDataSourceName = jtaDataSourceName;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void setNonJtaDataSource(DataSource nonJtaDataSource) {
1:2cfdf52:         this.nonJtaDataSource = nonJtaDataSource;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void setNonJtaDataSourceName(String nonJtaDataSourceName) {
1:2cfdf52:         this.nonJtaDataSourceName = nonJtaDataSourceName;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void setProviderClassName(String providerClassName) {
1:2cfdf52:         this.persistenceProviderClassName = providerClassName;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {
1:2cfdf52:         this.sharedCacheMode = sharedCacheMode;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void setValidationMode(ValidationMode validationMode) {
1:2cfdf52:         this.validationMode = validationMode;
1:2cfdf52:     }
1:2cfdf52: 
1:f2e057e:     public void addAnnotated() {
1:2cfdf52:         if (!excludeUnlistedClasses()) {
1:2cfdf52:             Collection<String> detected = JPAAnnotationScanner.findJPAAnnotatedClasses(bundle);
1:2cfdf52:             for (String name : detected) {
1:2cfdf52:                 addClassName(name);
1:2cfdf52:             }
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:143341f: 	public void setTransactionType(PersistenceUnitTransactionType transactionType) {
1:143341f: 		this.transactionType = transactionType;
1:143341f: 	}
1:2cfdf52: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:143341f
/////////////////////////////////////////////////////////////////////////
1: 
1: 	public void setTransactionType(PersistenceUnitTransactionType transactionType) {
1: 		this.transactionType = transactionType;
1: 	}
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:         return Collections.emptyList();
/////////////////////////////////////////////////////////////////////////
1:         return new ArrayList<String>(classNames);
1:         return Collections.emptyList();
commit:e809e9c
/////////////////////////////////////////////////////////////////////////
1:         this.classNames = new HashSet<String>();
/////////////////////////////////////////////////////////////////////////
0:         ArrayList<String> names = new ArrayList<String>();
commit:f2e057e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void addAnnotated() {
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.parser.impl;
1: 
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Properties;
1: import java.util.Set;
1: 
1: import javax.persistence.SharedCacheMode;
1: import javax.persistence.ValidationMode;
1: import javax.persistence.spi.ClassTransformer;
1: import javax.persistence.spi.PersistenceUnitInfo;
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: import javax.sql.DataSource;
1: 
1: import org.apache.aries.jpa.container.weaving.impl.TransformerRegistry;
1: import org.apache.aries.jpa.container.weaving.impl.TransformerRegistrySingleton;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.wiring.BundleWiring;
0: import org.osgi.service.packageadmin.PackageAdmin;
1: 
1: public class PersistenceUnit implements PersistenceUnitInfo {
1: 
1:     private Bundle bundle;
1:     private ClassLoader classLoader;
1:     private Set<String> classNames;
1:     private boolean excludeUnlisted;
1:     private DataSource jtaDataSource;
1:     private String jtaDataSourceName;
1:     private DataSource nonJtaDataSource;
1:     private String nonJtaDataSourceName;
1:     private String persistenceProviderClassName;
1:     private String persistenceUnitName;
1:     private String persistenceXMLSchemaVersion;
1:     private Properties props;
1:     private SharedCacheMode sharedCacheMode = SharedCacheMode.UNSPECIFIED;
1:     private PersistenceUnitTransactionType transactionType;
1:     private ValidationMode validationMode = ValidationMode.NONE;
1: 
1:     public PersistenceUnit(Bundle bundle, String persistenceUnitName,
1:                            PersistenceUnitTransactionType transactionType) {
1:         this.bundle = bundle;
1:         this.persistenceUnitName = persistenceUnitName;
1:         this.transactionType = transactionType;
1:         this.props = new Properties();
1:         this.classLoader = bundle.adapt(BundleWiring.class).getClassLoader();
0:         this.classNames = new HashSet<>();
1:     }
1: 
1:     public void addClassName(String className) {
1:         this.classNames.add(className);
1:     }
1: 
1:     public void addProperty(String name, String value) {
1:         props.put(name, value);
1:     }
1: 
1:     @Override
1:     public void addTransformer(ClassTransformer transformer) {
1:         TransformerRegistry reg = TransformerRegistrySingleton.get();
1:         reg.addTransformer(bundle, transformer);
1:     }
1: 
1:     @Override
1:     public boolean excludeUnlistedClasses() {
1:         return this.excludeUnlisted;
1:     }
1: 
1:     public Bundle getBundle() {
1:         return bundle;
1:     }
1: 
1:     @Override
1:     public ClassLoader getClassLoader() {
1:         return this.classLoader;
1:     }
1: 
0:     @SuppressWarnings("unchecked")
1:     @Override
1:     public List<URL> getJarFileUrls() {
0:         return Collections.EMPTY_LIST;
1:     }
1: 
1:     @Override
1:     public DataSource getJtaDataSource() {
1:         return this.jtaDataSource;
1:     }
1: 
1:     public String getJtaDataSourceName() {
1:         return jtaDataSourceName;
1:     }
1: 
1:     @Override
1:     public List<String> getManagedClassNames() {
0:         ArrayList<String> names = new ArrayList<>();
0:         names.addAll(classNames);
0:         return names;
1:     }
1: 
0:     @SuppressWarnings("unchecked")
1:     @Override
1:     public List<String> getMappingFileNames() {
0:         return Collections.EMPTY_LIST;
1:     }
1: 
1:     public String getName() {
1:         return persistenceUnitName;
1:     }
1: 
1:     @Override
1:     public ClassLoader getNewTempClassLoader() {
1:         return new TempBundleDelegatingClassLoader(bundle, classLoader);
1:     }
1: 
1:     @Override
1:     public DataSource getNonJtaDataSource() {
1:         return this.nonJtaDataSource;
1:     }
1: 
1:     public String getNonJtaDataSourceName() {
1:         return nonJtaDataSourceName;
1:     }
1: 
1:     @Override
1:     public String getPersistenceProviderClassName() {
1:         return this.persistenceProviderClassName;
1:     }
1: 
1:     @Override
1:     public String getPersistenceUnitName() {
1:         return this.persistenceUnitName;
1:     }
1: 
1:     @Override
1:     public URL getPersistenceUnitRootUrl() {
1:         return bundle.getResource("/");
1:     }
1: 
1:     @Override
1:     public String getPersistenceXMLSchemaVersion() {
1:         return this.persistenceXMLSchemaVersion;
1:     }
1: 
1:     @Override
1:     public Properties getProperties() {
1:         return this.props;
1:     }
1: 
1:     @Override
1:     public SharedCacheMode getSharedCacheMode() {
1:         return this.sharedCacheMode;
1:     }
1: 
1:     @Override
1:     public PersistenceUnitTransactionType getTransactionType() {
1:         return transactionType;
1:     }
1: 
1:     @Override
1:     public ValidationMode getValidationMode() {
1:         return this.validationMode;
1:     }
1: 
1:     public boolean isExcludeUnlisted() {
1:         return excludeUnlisted;
1:     }
1: 
1:     public void setExcludeUnlisted(boolean excludeUnlisted) {
1:         this.excludeUnlisted = excludeUnlisted;
1:     }
1: 
1:     public void setJtaDataSource(DataSource jtaDataSource) {
1:         this.jtaDataSource = jtaDataSource;
1:     }
1: 
1:     public void setJtaDataSourceName(String jtaDataSourceName) {
1:         this.jtaDataSourceName = jtaDataSourceName;
1:     }
1: 
1:     public void setNonJtaDataSource(DataSource nonJtaDataSource) {
1:         this.nonJtaDataSource = nonJtaDataSource;
1:     }
1: 
1:     public void setNonJtaDataSourceName(String nonJtaDataSourceName) {
1:         this.nonJtaDataSourceName = nonJtaDataSourceName;
1:     }
1: 
1:     public void setProviderClassName(String providerClassName) {
1:         this.persistenceProviderClassName = providerClassName;
1:     }
1: 
1:     public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {
1:         this.sharedCacheMode = sharedCacheMode;
1:     }
1: 
1:     public void setValidationMode(ValidationMode validationMode) {
1:         this.validationMode = validationMode;
1:     }
1: 
0:     public void addAnnotated(PackageAdmin packageAdmin) {
1:         if (!excludeUnlistedClasses()) {
1:             Collection<String> detected = JPAAnnotationScanner.findJPAAnnotatedClasses(bundle);
1:             for (String name : detected) {
1:                 addClassName(name);
1:             }
1:         }
1:     }
1: }
============================================================================