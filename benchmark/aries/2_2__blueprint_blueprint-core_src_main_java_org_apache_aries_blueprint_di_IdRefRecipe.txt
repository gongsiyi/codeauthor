1:f13c6ac: /**
1:f13c6ac:  *
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  * contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  * this work for additional information regarding copyright ownership.
1:f13c6ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  * (the "License"); you may not use this file except in compliance with
1:f13c6ac:  * the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  *  Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  *  See the License for the specific language governing permissions and
1:f13c6ac:  *  limitations under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.di;
1:f13c6ac: 
1:f13c6ac: import java.util.Collections;
1:f13c6ac: import java.util.List;
1:f13c6ac: 
1:f13c6ac: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:f13c6ac: import org.osgi.service.blueprint.container.NoSuchComponentException;
1:f13c6ac: 
1:f13c6ac: /*
1:f13c6ac:  * The IdRefRecipe is used to inject the reference name into the object (as a String).
1:f13c6ac:  * The IdRefRecipe ensures the actual reference object exists before the reference name is injected. 
1:f13c6ac:  */
1:f13c6ac: public class IdRefRecipe extends AbstractRecipe {
1:f13c6ac:     
1:f13c6ac:     private String idRef;
1:f13c6ac: 
1:f13c6ac:     public IdRefRecipe(String name, String idRef) {
1:f13c6ac:         super(name);
1:f13c6ac:         if (idRef == null) throw new NullPointerException("idRef is null");
1:f13c6ac:         this.idRef = idRef;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getIdRef() {
1:f13c6ac:         return idRef;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public List<Recipe> getDependencies() {
1:f13c6ac:         Recipe recipe = ExecutionContext.Holder.getContext().getRecipe(idRef);
1:f13c6ac:         if (recipe != null) {
1:f13c6ac:             return Collections.singletonList(recipe);
1:f13c6ac:         } else {
1:f13c6ac:             return Collections.emptyList();
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     protected Object internalCreate() throws ComponentDefinitionException {
1:f13c6ac:         ExecutionContext context = ExecutionContext.Holder.getContext();
1:f13c6ac:         if (!context.containsObject(idRef)) {
1:f13c6ac:             throw new NoSuchComponentException(idRef);
1:f13c6ac:         }
1:f13c6ac:         return idRef;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     @Override
1:f13c6ac:     public String toString() {
1:f13c6ac:         return "IdRefRecipe[" +
1:f13c6ac:                 "name='" + name + '\'' +
1:f13c6ac:                 ", idRef='" + idRef + '\'' +
1:f13c6ac:                 ']';
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.di;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.blueprint.di;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: import org.osgi.service.blueprint.container.NoSuchComponentException;
1: 
1: /*
1:  * The IdRefRecipe is used to inject the reference name into the object (as a String).
1:  * The IdRefRecipe ensures the actual reference object exists before the reference name is injected. 
1:  */
1: public class IdRefRecipe extends AbstractRecipe {
1:     
1:     private String idRef;
1: 
1:     public IdRefRecipe(String name, String idRef) {
1:         super(name);
1:         if (idRef == null) throw new NullPointerException("idRef is null");
1:         this.idRef = idRef;
1:     }
1: 
1:     public String getIdRef() {
1:         return idRef;
1:     }
1: 
1:     public List<Recipe> getDependencies() {
1:         Recipe recipe = ExecutionContext.Holder.getContext().getRecipe(idRef);
1:         if (recipe != null) {
1:             return Collections.singletonList(recipe);
1:         } else {
1:             return Collections.emptyList();
1:         }
1:     }
1: 
1:     protected Object internalCreate() throws ComponentDefinitionException {
1:         ExecutionContext context = ExecutionContext.Holder.getContext();
1:         if (!context.containsObject(idRef)) {
1:             throw new NoSuchComponentException(idRef);
1:         }
1:         return idRef;
1:     }
1:     
1:     @Override
1:     public String toString() {
1:         return "IdRefRecipe[" +
1:                 "name='" + name + '\'' +
1:                 ", idRef='" + idRef + '\'' +
1:                 ']';
1:     }
1: 
1: }
============================================================================