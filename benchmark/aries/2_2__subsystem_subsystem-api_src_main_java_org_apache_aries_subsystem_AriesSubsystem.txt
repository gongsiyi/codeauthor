1:7a6c338: /*
1:7a6c338:  * Licensed under the Apache License, Version 2.0 (the "License");
1:7a6c338:  * you may not use this file except in compliance with the License.
1:7a6c338:  * You may obtain a copy of the License at
1:7a6c338:  *
1:7a6c338:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7a6c338:  *
1:7a6c338:  * Unless required by applicable law or agreed to in writing, software
1:7a6c338:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7a6c338:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a6c338:  * See the License for the specific language governing permissions and
1:7a6c338:  * limitations under the License.
1:7a6c338:  */
1:5bd3bf6: package org.apache.aries.subsystem;
1:5bd3bf6: 
1:5bd3bf6: import java.io.InputStream;
1:5bd3bf6: import java.util.Collection;
1:5bd3bf6: 
1:5bd3bf6: import org.apache.aries.util.filesystem.IDirectory;
1:5bd3bf6: import org.osgi.resource.Requirement;
1:5bd3bf6: import org.osgi.service.subsystem.Subsystem;
1:5bd3bf6: import org.osgi.service.subsystem.SubsystemException;
1:5bd3bf6: import org.osgi.service.subsystem.SubsystemPermission;
1:5bd3bf6: 
1:5bd3bf6: public interface AriesSubsystem extends Subsystem {
1:5bd3bf6: 	/**
1:5bd3bf6: 	 * Adds the specified requirements to this subsystem's sharing policy.
1:5bd3bf6: 	 * <p>
1:5bd3bf6: 	 * The sharing policy of this subsystem's region is updated with the 
1:5bd3bf6: 	 * specified requirements (i.e. imports). Requirements already part of the
1:5bd3bf6: 	 * sharing policy are ignored. Upon return, constituents of this subsystem 
1:5bd3bf6: 	 * will be allowed to resolve against matching capabilities that are visible 
1:5bd3bf6: 	 * to the parent subsystems.
1:5bd3bf6: 	 *
1:5bd3bf6: 	 * @param requirement The requirement to add to the sharing policy.
1:5bd3bf6: 	 * @throws SubsystemException If the requirement did not already exist and
1:5bd3bf6: 	 *         could not be added.
1:5bd3bf6: 	 * @throws UnsupportedOperationException If this is the root subsystem or 
1:5bd3bf6: 	 *         the type does not support additional requirements.
1:5bd3bf6: 	 */
1:5bd3bf6: 	void addRequirements(Collection<Requirement> requirements);
1:5bd3bf6: 
1:5bd3bf6: 	@Override
1:5bd3bf6: 	AriesSubsystem install(String location);
1:5bd3bf6: 
1:5bd3bf6: 	@Override
1:5bd3bf6: 	AriesSubsystem install(String location, InputStream content);
1:5bd3bf6: 	
1:d6eb080: 	@Override
1:d6eb080: 	AriesSubsystem install(String location, InputStream content, InputStream deploymentManifest);
1:d6eb080: 	
1:5bd3bf6: 	/**
1:5bd3bf6: 	 * Installs a subsystem from the specified location identifier and content.
1:5bd3bf6: 	 * <p>
1:5bd3bf6: 	 * This method performs the same function as calling
1:d6eb080: 	 * {@link #install(String, IDirectory, InputStream)} with a null deployment
1:d6eb080: 	 * manifest.
1:5bd3bf6: 	 * 
1:5bd3bf6: 	 * @param location The location identifier of the subsystem to install.
1:5bd3bf6: 	 * @param content The directory from which this subsystem will be read or
1:5bd3bf6: 	 *        {@code null} to indicate the directory must be created from the
1:5bd3bf6: 	 *        specified location identifier.
1:5bd3bf6: 	 * @return The installed subsystem.
1:5bd3bf6: 	 * @throws IllegalStateException If this subsystem's state is in
1:5bd3bf6: 	 *         {@link State#INSTALLING INSTALLING}, {@link State#INSTALL_FAILED
1:5bd3bf6: 	 *         INSTALL_FAILED}, {@link State#UNINSTALLING UNINSTALLING},
1:5bd3bf6: 	 *         {@link State#UNINSTALLED UNINSTALLED}.
1:5bd3bf6: 	 * @throws SubsystemException If the installation failed.
1:5bd3bf6: 	 * @throws SecurityException If the caller does not have the appropriate
1:5bd3bf6: 	 *         {@link SubsystemPermission}[installed subsystem,LIFECYCLE], and
1:5bd3bf6: 	 *         the runtime supports permissions.
1:d6eb080: 	 * @see #install(String, IDirectory, InputStream)
1:5bd3bf6: 	 */
1:5bd3bf6: 	AriesSubsystem install(String location, IDirectory content);
1:d6eb080: 	
1:d6eb080: 	/**
1:d6eb080: 	 * Installs a subsystem from the specified location identifier and content
1:d6eb080: 	 * but uses the provided deployment manifest, if any, rather than the 
1:d6eb080: 	 * computed one or the one provided as part of the content.
1:d6eb080: 	 * <p>
1:d6eb080: 	 * This method performs the same function as calling
1:d6eb080: 	 * {@link #install(String, InputStream, InputStream)} except the content is 
1:d6eb080: 	 * retrieved from the specified {@link IDirectory} instead.
1:d6eb080: 	 * 
1:d6eb080: 	 * @param location The location identifier of the subsystem to install.
1:d6eb080: 	 * @param content The directory from which this subsystem will be read or
1:d6eb080: 	 *        {@code null} to indicate the directory must be created from the
1:d6eb080: 	 *        specified location identifier.
1:d6eb080: 	 * @param deploymentManifest The deployment manifest to use in lieu of any
1:d6eb080: 	 *        others.
1:d6eb080: 	 * @return The installed subsystem.
1:d6eb080: 	 * @throws IllegalStateException If this subsystem's state is in
1:d6eb080: 	 *         {@link State#INSTALLING INSTALLING}, {@link State#INSTALL_FAILED
1:d6eb080: 	 *         INSTALL_FAILED}, {@link State#UNINSTALLING UNINSTALLING},
1:d6eb080: 	 *         {@link State#UNINSTALLED UNINSTALLED}.
1:d6eb080: 	 * @throws SubsystemException If the installation failed.
1:d6eb080: 	 * @throws SecurityException If the caller does not have the appropriate
1:d6eb080: 	 *         {@link SubsystemPermission}[installed subsystem,LIFECYCLE], and
1:d6eb080: 	 *         the runtime supports permissions.
1:d6eb080: 	 * @see #install(String, InputStream, InputStream)
1:d6eb080: 	 */
1:d6eb080: 	AriesSubsystem install(String location, IDirectory content, InputStream deploymentManifest);
1:5bd3bf6: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	AriesSubsystem install(String location, InputStream content, InputStream deploymentManifest);
1: 	
1: 	 * {@link #install(String, IDirectory, InputStream)} with a null deployment
1: 	 * manifest.
/////////////////////////////////////////////////////////////////////////
1: 	 * @see #install(String, IDirectory, InputStream)
1: 	
1: 	/**
1: 	 * Installs a subsystem from the specified location identifier and content
1: 	 * but uses the provided deployment manifest, if any, rather than the 
1: 	 * computed one or the one provided as part of the content.
1: 	 * <p>
1: 	 * This method performs the same function as calling
1: 	 * {@link #install(String, InputStream, InputStream)} except the content is 
1: 	 * retrieved from the specified {@link IDirectory} instead.
1: 	 * 
1: 	 * @param location The location identifier of the subsystem to install.
1: 	 * @param content The directory from which this subsystem will be read or
1: 	 *        {@code null} to indicate the directory must be created from the
1: 	 *        specified location identifier.
1: 	 * @param deploymentManifest The deployment manifest to use in lieu of any
1: 	 *        others.
1: 	 * @return The installed subsystem.
1: 	 * @throws IllegalStateException If this subsystem's state is in
1: 	 *         {@link State#INSTALLING INSTALLING}, {@link State#INSTALL_FAILED
1: 	 *         INSTALL_FAILED}, {@link State#UNINSTALLING UNINSTALLING},
1: 	 *         {@link State#UNINSTALLED UNINSTALLED}.
1: 	 * @throws SubsystemException If the installation failed.
1: 	 * @throws SecurityException If the caller does not have the appropriate
1: 	 *         {@link SubsystemPermission}[installed subsystem,LIFECYCLE], and
1: 	 *         the runtime supports permissions.
1: 	 * @see #install(String, InputStream, InputStream)
1: 	 */
1: 	AriesSubsystem install(String location, IDirectory content, InputStream deploymentManifest);
author:John Ross
-------------------------------------------------------------------------------
commit:7a6c338
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem;
1: 
1: import java.io.InputStream;
1: import java.util.Collection;
1: 
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.osgi.resource.Requirement;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemException;
1: import org.osgi.service.subsystem.SubsystemPermission;
1: 
1: public interface AriesSubsystem extends Subsystem {
1: 	/**
1: 	 * Adds the specified requirements to this subsystem's sharing policy.
1: 	 * <p>
1: 	 * The sharing policy of this subsystem's region is updated with the 
1: 	 * specified requirements (i.e. imports). Requirements already part of the
1: 	 * sharing policy are ignored. Upon return, constituents of this subsystem 
1: 	 * will be allowed to resolve against matching capabilities that are visible 
1: 	 * to the parent subsystems.
1: 	 *
1: 	 * @param requirement The requirement to add to the sharing policy.
1: 	 * @throws SubsystemException If the requirement did not already exist and
1: 	 *         could not be added.
1: 	 * @throws UnsupportedOperationException If this is the root subsystem or 
1: 	 *         the type does not support additional requirements.
1: 	 */
1: 	void addRequirements(Collection<Requirement> requirements);
1: 
1: 	@Override
1: 	AriesSubsystem install(String location);
1: 
1: 	@Override
1: 	AriesSubsystem install(String location, InputStream content);
1: 	
1: 	/**
1: 	 * Installs a subsystem from the specified location identifier and content.
1: 	 * <p>
1: 	 * This method performs the same function as calling
0: 	 * {@link #install(String, InputStream)} except the content is retrieved
0: 	 * from the specified {@link IDirectory} instead.
1: 	 * 
1: 	 * @param location The location identifier of the subsystem to install.
1: 	 * @param content The directory from which this subsystem will be read or
1: 	 *        {@code null} to indicate the directory must be created from the
1: 	 *        specified location identifier.
1: 	 * @return The installed subsystem.
1: 	 * @throws IllegalStateException If this subsystem's state is in
1: 	 *         {@link State#INSTALLING INSTALLING}, {@link State#INSTALL_FAILED
1: 	 *         INSTALL_FAILED}, {@link State#UNINSTALLING UNINSTALLING},
1: 	 *         {@link State#UNINSTALLED UNINSTALLED}.
1: 	 * @throws SubsystemException If the installation failed.
1: 	 * @throws SecurityException If the caller does not have the appropriate
1: 	 *         {@link SubsystemPermission}[installed subsystem,LIFECYCLE], and
1: 	 *         the runtime supports permissions.
0: 	 * @see #install(String, InputStream)
1: 	 */
1: 	AriesSubsystem install(String location, IDirectory content);
1: }
============================================================================