1:ed92957: /**
1:ed92957:  * Licensed to the Apache Software Foundation (ASF) under one
1:ed92957:  * or more contributor license agreements.  See the NOTICE file
1:ed92957:  * distributed with this work for additional information
1:ed92957:  * regarding copyright ownership.  The ASF licenses this file
1:ed92957:  * to you under the Apache License, Version 2.0 (the
1:ed92957:  * "License"); you may not use this file except in compliance
1:ed92957:  * with the License.  You may obtain a copy of the License at
1:ed92957:  *
1:ed92957:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ed92957:  *
1:ed92957:  * Unless required by applicable law or agreed to in writing,
1:ed92957:  * software distributed under the License is distributed on an
1:ed92957:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ed92957:  * KIND, either express or implied.  See the License for the
1:ed92957:  * specific language governing permissions and limitations
1:ed92957:  * under the License.
1:ed92957:  */
1:ed92957: package org.apache.aries.samples.goat.api;
1:ed92957: 
1:ed92957: import java.util.Collection;
1:ed92957: 
1:ed92957: /**
1:ed92957:  * Provides information about components within a model.
1:ed92957:  * 
1:ed92957:  * Good usage practice would be to subscribe a listener .. and THEN call
1:ed92957:  * getComponents.. (doing it the other way round risks leaving a window during
1:ed92957:  * which a change could occur, and you not be informed). (doing it this way
1:ed92957:  * round, at worst, you'll see an update before you handle getComponents, and
1:ed92957:  * since an update can be an add, you'll just process it twice)
1:ed92957:  * 
1:ed92957:  */
1:ed92957: public interface ComponentInfoProvider {
1:ed92957: 
1:ed92957: 	/**
1:ed92957: 	 * Callback interface implemented by users of the ComponentInfoProvider
1:ed92957: 	 * interface, allowing notification of changes, or deletions to components
1:ed92957: 	 * they have been informed about.
1:ed92957: 	 */
1:ed92957: 	static interface ComponentInfoListener {
1:ed92957: 		// called to add, or update a component.
1:ed92957: 		public void updateComponent(ComponentInfo b);
1:ed92957: 
1:ed92957: 		public void removeComponent(ComponentInfo b);
1:ed92957: 	};
1:ed92957: 
1:ed92957: 	/**
1:ed92957: 	 * Gets the current set of 'top level' components in this model.
1:ed92957: 	 * 
1:ed92957: 	 * Any nested components are only obtainable via the 'getChildren' method on
1:ed92957: 	 * ComponentInfo.
1:ed92957: 	 * 
1:ed92957: 	 * @return
1:ed92957: 	 */
1:ed92957: 	Collection<ComponentInfo> getComponents();
1:ed92957: 
1:ed92957: 	/**
1:ed92957: 	 * Gets a component for an id previously returned via getComponents, or
1:ed92957: 	 * updateComponent
1:ed92957: 	 * 
1:ed92957: 	 * @param id
1:ed92957: 	 * @return component, or null if component id is either unknown, or deleted.
1:ed92957: 	 */
1:ed92957: 	ComponentInfo getComponentForId(String id);
1:ed92957: 
1:ed92957: 	/**
1:ed92957: 	 * Add a listener to this Info Provider, to be informed of
1:ed92957: 	 * changes/deletions.
1:ed92957: 	 * 
1:ed92957: 	 * @param listener
1:ed92957: 	 */
1:ed92957: 	public void registerComponentInfoListener(ComponentInfoListener listener);
1:ed92957: 
1:ed92957: 	// TODO: unregisterComponentInfoListener ;-)
1:ed92957: 
1:ed92957: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:ed92957
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.goat.api;
1: 
1: import java.util.Collection;
1: 
1: /**
1:  * Provides information about components within a model.
1:  * 
1:  * Good usage practice would be to subscribe a listener .. and THEN call
1:  * getComponents.. (doing it the other way round risks leaving a window during
1:  * which a change could occur, and you not be informed). (doing it this way
1:  * round, at worst, you'll see an update before you handle getComponents, and
1:  * since an update can be an add, you'll just process it twice)
1:  * 
1:  */
1: public interface ComponentInfoProvider {
1: 
1: 	/**
1: 	 * Callback interface implemented by users of the ComponentInfoProvider
1: 	 * interface, allowing notification of changes, or deletions to components
1: 	 * they have been informed about.
1: 	 */
1: 	static interface ComponentInfoListener {
1: 		// called to add, or update a component.
1: 		public void updateComponent(ComponentInfo b);
1: 
1: 		public void removeComponent(ComponentInfo b);
1: 	};
1: 
1: 	/**
1: 	 * Gets the current set of 'top level' components in this model.
1: 	 * 
1: 	 * Any nested components are only obtainable via the 'getChildren' method on
1: 	 * ComponentInfo.
1: 	 * 
1: 	 * @return
1: 	 */
1: 	Collection<ComponentInfo> getComponents();
1: 
1: 	/**
1: 	 * Gets a component for an id previously returned via getComponents, or
1: 	 * updateComponent
1: 	 * 
1: 	 * @param id
1: 	 * @return component, or null if component id is either unknown, or deleted.
1: 	 */
1: 	ComponentInfo getComponentForId(String id);
1: 
1: 	/**
1: 	 * Add a listener to this Info Provider, to be informed of
1: 	 * changes/deletions.
1: 	 * 
1: 	 * @param listener
1: 	 */
1: 	public void registerComponentInfoListener(ComponentInfoListener listener);
1: 
1: 	// TODO: unregisterComponentInfoListener ;-)
1: 
1: }
============================================================================