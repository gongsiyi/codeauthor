1:c1032f2: /**
1:c1032f2:  *
1:c1032f2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c1032f2:  * contributor license agreements.  See the NOTICE file distributed with
1:c1032f2:  * this work for additional information regarding copyright ownership.
1:c1032f2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c1032f2:  * (the "License"); you may not use this file except in compliance with
1:c1032f2:  * the License.  You may obtain a copy of the License at
1:c1032f2:  *
1:c1032f2:  * http://www.apache.org/licenses/LICENSE-2.0
1:c1032f2:  *
1:c1032f2:  * Unless required by applicable law or agreed to in writing, software
1:c1032f2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c1032f2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c1032f2:  * See the License for the specific language governing permissions and
1:c1032f2:  * limitations under the License.
1:c1032f2:  */
1:c1032f2: package org.apache.aries.blueprint.web;
1:bd5ee4d: 
1:5660a82: import java.io.BufferedReader;
1:5660a82: import java.io.IOException;
1:7782911: import java.io.InputStream;
1:5660a82: import java.io.InputStreamReader;
1:939a726: import java.net.URI;
1:c1032f2: import java.net.URL;
1:c1032f2: import java.util.ArrayList;
1:5660a82: import java.util.Arrays;
1:c1032f2: import java.util.Enumeration;
1:7782911: import java.util.HashMap;
1:5660a82: import java.util.LinkedList;
1:c1032f2: import java.util.List;
1:7782911: import java.util.Map;
1:7782911: import java.util.Properties;
1:939a726: 
1:bd5ee4d: import javax.servlet.ServletContext;
1:bd5ee4d: import javax.servlet.ServletContextEvent;
1:bd5ee4d: import javax.servlet.ServletContextListener;
1:bd5ee4d: 
1:939a726: import org.apache.aries.blueprint.NamespaceHandler;
1:939a726: import org.apache.aries.blueprint.Namespaces;
1:c1032f2: import org.apache.aries.blueprint.container.BlueprintContainerImpl;
1:939a726: import org.apache.aries.blueprint.container.SimpleNamespaceHandlerSet;
1:bd5ee4d: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
1:7782911: 
1:c1032f2: /**
1:c1032f2:  * Initialises all the blueprint XML files called <code>META-INF/blueprint.xml</code> on the classpath
1:c1032f2:  */
1:c1032f2: public class BlueprintContextListener implements ServletContextListener {
1:35abab4: 
1:c1032f2:     public static final String CONTAINER_ATTRIBUTE = "org.apache.aries.blueprint.container";
1:35abab4: 
1:5660a82:     public static final String CONTEXT_LOCATION = "blueprintLocation";
1:5660a82:     public static final String DEFAULT_CONTEXT_LOCATION = "META-INF/blueprint.xml";
1:5660a82:     
1:5660a82:     public static final String NAMESPACE_HANDLERS_PARAMETER = "blueprintNamespaceHandlers";
1:5660a82:     public static final String NAMESPACE_HANDLERS_LOCATION = "META-INF/blueprint.handlers";
1:35abab4:     
1:7782911:     public static final String PROPERTIES = "blueprintProperties";
1:5660a82:     
1:7782911: 
1:c1032f2:     public void contextInitialized(ServletContextEvent event) {
1:c1032f2:         ServletContext servletContext = event.getServletContext();
1:5660a82:         String location = servletContext.getInitParameter(CONTEXT_LOCATION);
1:35abab4:         if (location == null) {
1:5660a82:             location = DEFAULT_CONTEXT_LOCATION;
1:35abab4:         }
1:41c4a9b:         List<URL> resourcePaths = new ArrayList<URL>();
1:c1032f2:         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
1:c1032f2:         try {
1:35abab4:             Enumeration<URL> resources = classLoader.getResources(location);
1:c1032f2:             while (resources.hasMoreElements()) {
1:c1032f2:                 resourcePaths.add(resources.nextElement());
1:c1032f2:             }
1:c1032f2:             servletContext.log("Loading Blueprint contexts " + resourcePaths);
1:939a726: 
1:7782911:             Map<String, String> properties = new HashMap<String, String>();
1:7782911:             String propLocations = servletContext.getInitParameter(PROPERTIES);
1:7782911:             if (propLocations != null) {
1:7782911:                 for (String propLoc : propLocations.split(",")) {
1:7782911:                     Enumeration<URL> propUrl = classLoader.getResources(propLoc);
1:7782911:                     while (propUrl.hasMoreElements()) {
1:7782911:                         URL url = propUrl.nextElement();
1:7782911:                         InputStream is = url.openStream();
1:7782911:                         try {
1:7782911:                             Properties props = new Properties();
1:7782911:                             props.load(is);
1:7782911:                             Enumeration names = props.propertyNames();
1:7782911:                             while (names.hasMoreElements()) {
1:7782911:                                 String key = names.nextElement().toString();
1:7782911:                                 properties.put(key, props.getProperty(key));
1:7782911:                             }
1:7782911:                         } finally {
1:7782911:                             is.close();
1:7782911:                         }
1:7782911:                     }
1:7782911:                 }
1:7782911:             }
1:7782911: 
1:939a726:             NamespaceHandlerSet nsHandlerSet = getNamespaceHandlerSet(servletContext, classLoader);
1:bd5ee4d:             BlueprintContainerImpl container = new BlueprintContainerImpl(classLoader, resourcePaths, properties, nsHandlerSet, true);
1:c1032f2:             servletContext.setAttribute(CONTAINER_ATTRIBUTE, container);
1:c1032f2:         } catch (Exception e) {
1:c1032f2:             servletContext.log("Failed to startup blueprint container. " + e, e);
1:c1032f2:         }
1:c1032f2:     }
1:bd5ee4d:     
1:939a726:     protected NamespaceHandlerSet getNamespaceHandlerSet(ServletContext servletContext, ClassLoader tccl) {
1:5660a82:         NamespaceHandlerSet nsSet = getNamespaceHandlerSetFromParameter(servletContext, tccl);
1:5660a82:         if (nsSet != null) {
1:5660a82:             return nsSet;
1:5660a82:         }
1:5660a82:         return getNamespaceHandlerSetFromLocation(servletContext, tccl);
1:5660a82:     }
1:5660a82: 
1:5660a82:     protected NamespaceHandlerSet getNamespaceHandlerSetFromParameter(ServletContext servletContext, ClassLoader tccl) {
1:5660a82:         String handlersProp = servletContext.getInitParameter(NAMESPACE_HANDLERS_PARAMETER);
1:939a726:         if (handlersProp == null) {
1:939a726:             return null;
1:939a726:         }
1:5660a82:         return getNamespaceHandlerSetFromClassNames(servletContext, tccl, Arrays.asList(handlersProp.split(",")));
1:5660a82:     }
1:5660a82:         
1:5660a82:     protected NamespaceHandlerSet getNamespaceHandlerSetFromLocation(ServletContext servletContext, ClassLoader tccl) {
1:5660a82:         List<String> handlerClassNames = new LinkedList<String>();
1:5660a82:         try {
1:5660a82:             Enumeration<URL> resources = tccl.getResources(NAMESPACE_HANDLERS_LOCATION);
1:5660a82:             while (resources.hasMoreElements()) {
1:5660a82:                 URL resource = resources.nextElement();
1:5660a82:                 BufferedReader br = new BufferedReader(new InputStreamReader(resource.openStream()));
1:5660a82:                 try {
1:5660a82:                     for (String line = br.readLine(); line != null; line = br.readLine()) {
1:5660a82:                         String trimmedLine = line.trim();
1:5660a82:                         if (trimmedLine.isEmpty() || trimmedLine.startsWith("#")) {
1:5660a82:                             continue;
1:5660a82:                         }
1:5660a82:                         handlerClassNames.add(trimmedLine);
1:5660a82:                     }
1:5660a82:                 } finally {
1:5660a82:                     br.close();
1:5660a82:                 }
1:5660a82:             }
1:5660a82:         } catch (IOException ex) {
1:5660a82:             throw new RuntimeException("Failed to load namespace handler resources", ex);
1:5660a82:         }
1:5660a82:         if (!handlerClassNames.isEmpty()) {
1:5660a82:             return getNamespaceHandlerSetFromClassNames(servletContext, tccl, handlerClassNames);
1:5660a82:         } else {
1:5660a82:             return null;
1:5660a82:         }
1:5660a82:         
1:5660a82:     }
1:5660a82:     
1:5660a82:     protected NamespaceHandlerSet getNamespaceHandlerSetFromClassNames(ServletContext servletContext, ClassLoader tccl, 
1:5660a82:         List<String> handlerClassNames) {
1:939a726:         SimpleNamespaceHandlerSet nsSet = new SimpleNamespaceHandlerSet();
1:5660a82:         
1:939a726:         for (String name : handlerClassNames) {
1:939a726:             String trimmedName = name.trim();
1:939a726:             Object instance = null; 
1:939a726:             try {
1:939a726:                 instance = tccl.loadClass(trimmedName).newInstance();
1:939a726:             } catch (Exception ex) {
1:939a726:                 throw new RuntimeException("Failed to load NamespaceHandler: " + trimmedName, ex);
1:939a726:             }
1:939a726:             if (!(instance instanceof NamespaceHandler)) {
1:939a726:                 throw new RuntimeException("Invalid NamespaceHandler: " + trimmedName);
1:939a726:             }
1:939a726:             NamespaceHandler nsHandler = (NamespaceHandler)instance;
1:939a726:             Namespaces namespaces = nsHandler.getClass().getAnnotation(Namespaces.class);
1:939a726:             if (namespaces != null) {
1:939a726:                 for (String ns : namespaces.value()) {
1:939a726:                     nsSet.addNamespace(URI.create(ns), nsHandler.getSchemaLocation(ns), nsHandler);    
1:939a726:                 }
1:939a726:             }
1:939a726:         }
1:939a726:         
1:939a726:         return nsSet;
1:bd5ee4d:     }
4:c1032f2:     
1:c1032f2:     public void contextDestroyed(ServletContextEvent event) {
1:c1032f2:         ServletContext servletContext = event.getServletContext();
1:c1032f2:         Object container = servletContext.getAttribute(CONTAINER_ATTRIBUTE);
1:c1032f2:         if (container instanceof BlueprintContainerImpl) {
1:c1032f2:             BlueprintContainerImpl blueprint = (BlueprintContainerImpl) container;
1:c1032f2:             blueprint.destroy();
1:c1032f2:         }
1:c1032f2:     }
1:c1032f2: }
============================================================================
author:Sergey Beryozkin
-------------------------------------------------------------------------------
commit:5660a82
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedReader;
1: import java.io.IOException;
1: import java.io.InputStreamReader;
1: import java.util.Arrays;
1: import java.util.LinkedList;
/////////////////////////////////////////////////////////////////////////
1:     public static final String CONTEXT_LOCATION = "blueprintLocation";
1:     public static final String DEFAULT_CONTEXT_LOCATION = "META-INF/blueprint.xml";
1:     
1:     public static final String NAMESPACE_HANDLERS_PARAMETER = "blueprintNamespaceHandlers";
1:     public static final String NAMESPACE_HANDLERS_LOCATION = "META-INF/blueprint.handlers";
1:     
1:         String location = servletContext.getInitParameter(CONTEXT_LOCATION);
1:             location = DEFAULT_CONTEXT_LOCATION;
/////////////////////////////////////////////////////////////////////////
1:         NamespaceHandlerSet nsSet = getNamespaceHandlerSetFromParameter(servletContext, tccl);
1:         if (nsSet != null) {
1:             return nsSet;
1:         }
1:         return getNamespaceHandlerSetFromLocation(servletContext, tccl);
1:     }
1: 
1:     protected NamespaceHandlerSet getNamespaceHandlerSetFromParameter(ServletContext servletContext, ClassLoader tccl) {
1:         String handlersProp = servletContext.getInitParameter(NAMESPACE_HANDLERS_PARAMETER);
1:         return getNamespaceHandlerSetFromClassNames(servletContext, tccl, Arrays.asList(handlersProp.split(",")));
1:     }
1:         
1:     protected NamespaceHandlerSet getNamespaceHandlerSetFromLocation(ServletContext servletContext, ClassLoader tccl) {
1:         List<String> handlerClassNames = new LinkedList<String>();
1:         try {
1:             Enumeration<URL> resources = tccl.getResources(NAMESPACE_HANDLERS_LOCATION);
1:             while (resources.hasMoreElements()) {
1:                 URL resource = resources.nextElement();
1:                 BufferedReader br = new BufferedReader(new InputStreamReader(resource.openStream()));
1:                 try {
1:                     for (String line = br.readLine(); line != null; line = br.readLine()) {
1:                         String trimmedLine = line.trim();
1:                         if (trimmedLine.isEmpty() || trimmedLine.startsWith("#")) {
1:                             continue;
1:                         }
1:                         handlerClassNames.add(trimmedLine);
1:                     }
1:                 } finally {
1:                     br.close();
1:                 }
1:             }
1:         } catch (IOException ex) {
1:             throw new RuntimeException("Failed to load namespace handler resources", ex);
1:         }
1:         if (!handlerClassNames.isEmpty()) {
1:             return getNamespaceHandlerSetFromClassNames(servletContext, tccl, handlerClassNames);
1:         } else {
1:             return null;
1:         }
1:         
1:     }
1:     
1:     protected NamespaceHandlerSet getNamespaceHandlerSetFromClassNames(ServletContext servletContext, ClassLoader tccl, 
1:         List<String> handlerClassNames) {
/////////////////////////////////////////////////////////////////////////
1:     
commit:939a726
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.aries.blueprint.Namespaces;
1: import org.apache.aries.blueprint.container.SimpleNamespaceHandlerSet;
/////////////////////////////////////////////////////////////////////////
0:     public static final String NAMESPACE_HANDLERS = "blueprintNamespaceHandlers";
1:     
/////////////////////////////////////////////////////////////////////////
1:             NamespaceHandlerSet nsHandlerSet = getNamespaceHandlerSet(servletContext, classLoader);
/////////////////////////////////////////////////////////////////////////
1:     protected NamespaceHandlerSet getNamespaceHandlerSet(ServletContext servletContext, ClassLoader tccl) {
0:         String handlersProp = servletContext.getInitParameter(NAMESPACE_HANDLERS);
1:         if (handlersProp == null) {
1:             return null;
1:         }
1:         SimpleNamespaceHandlerSet nsSet = new SimpleNamespaceHandlerSet();
1:         
0:         String[] handlerClassNames = handlersProp.split(",");
1:         for (String name : handlerClassNames) {
1:             String trimmedName = name.trim();
1:             Object instance = null; 
1:             try {
1:                 instance = tccl.loadClass(trimmedName).newInstance();
1:             } catch (Exception ex) {
1:                 throw new RuntimeException("Failed to load NamespaceHandler: " + trimmedName, ex);
1:             }
1:             if (!(instance instanceof NamespaceHandler)) {
1:                 throw new RuntimeException("Invalid NamespaceHandler: " + trimmedName);
1:             }
1:             NamespaceHandler nsHandler = (NamespaceHandler)instance;
1:             Namespaces namespaces = nsHandler.getClass().getAnnotation(Namespaces.class);
1:             if (namespaces != null) {
1:                 for (String ns : namespaces.value()) {
1:                     nsSet.addNamespace(URI.create(ns), nsHandler.getSchemaLocation(ns), nsHandler);    
1:                 }
1:             }
1:         }
1:         
1:         return nsSet;
commit:bd5ee4d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1: import javax.servlet.ServletContext;
1: import javax.servlet.ServletContextEvent;
1: import javax.servlet.ServletContextListener;
1: 
1: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
/////////////////////////////////////////////////////////////////////////
0:             NamespaceHandlerSet nsHandlerSet = getNamespaceHandlerSet(classLoader);
1:             BlueprintContainerImpl container = new BlueprintContainerImpl(classLoader, resourcePaths, properties, nsHandlerSet, true);
1:     
0:     protected NamespaceHandlerSet getNamespaceHandlerSet(ClassLoader tccl) {
0:         return null;
1:     }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:7782911
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1:     public static final String PROPERTIES = "blueprintProperties";
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             Map<String, String> properties = new HashMap<String, String>();
1:             String propLocations = servletContext.getInitParameter(PROPERTIES);
1:             if (propLocations != null) {
1:                 for (String propLoc : propLocations.split(",")) {
1:                     Enumeration<URL> propUrl = classLoader.getResources(propLoc);
1:                     while (propUrl.hasMoreElements()) {
1:                         URL url = propUrl.nextElement();
1:                         InputStream is = url.openStream();
1:                         try {
1:                             Properties props = new Properties();
1:                             props.load(is);
1:                             Enumeration names = props.propertyNames();
1:                             while (names.hasMoreElements()) {
1:                                 String key = names.nextElement().toString();
1:                                 properties.put(key, props.getProperty(key));
1:                             }
1:                         } finally {
1:                             is.close();
1:                         }
1:                     }
1:                 }
1:             }
1: 
0:             BlueprintContainerImpl container = new BlueprintContainerImpl(classLoader, resourcePaths, properties, true);
commit:3b0f925
/////////////////////////////////////////////////////////////////////////
0:     public static final String LOCATION = "blueprintLocation";
commit:41c4a9b
/////////////////////////////////////////////////////////////////////////
1:         List<URL> resourcePaths = new ArrayList<URL>();
commit:35abab4
/////////////////////////////////////////////////////////////////////////
1: 
0:     public static final String LOCATION = "location";
1: 
0:     public static final String DEFAULT_LOCATION = "META-INF/blueprint.xml";
1: 
0:         String location = servletContext.getInitParameter(LOCATION);
1:         if (location == null) {
0:             location = DEFAULT_LOCATION;
1:         }
0:         Set<URL> resourcePathSet = servletContext.getResourcePaths(location);
1:             Enumeration<URL> resources = classLoader.getResources(location);
commit:c1032f2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.blueprint.web;
1: 
0: import javax.servlet.ServletContext;
0: import javax.servlet.ServletContextEvent;
0: import javax.servlet.ServletContextListener;
0: import javax.servlet.ServletException;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Enumeration;
1: import java.util.List;
0: import java.util.Set;
1: import org.apache.aries.blueprint.container.BlueprintContainerImpl;
1: 
1: /**
1:  * Initialises all the blueprint XML files called <code>META-INF/blueprint.xml</code> on the classpath
1:  */
1: public class BlueprintContextListener implements ServletContextListener {
1:     public static final String CONTAINER_ATTRIBUTE = "org.apache.aries.blueprint.container";
1: 
1:     public void contextInitialized(ServletContextEvent event) {
1:         ServletContext servletContext = event.getServletContext();
0:         String blueprintPath = "META-INF/blueprint.xml";
0:         Set<URL> resourcePathSet = servletContext.getResourcePaths(blueprintPath);
0:         List<URL> resourcePaths = new ArrayList<URL>(resourcePathSet);
1:         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
1:         try {
0:             Enumeration<URL> resources = classLoader.getResources(blueprintPath);
1:             while (resources.hasMoreElements()) {
1:                 resourcePaths.add(resources.nextElement());
1:             }
1:             servletContext.log("Loading Blueprint contexts " + resourcePaths);
0:             BlueprintContainerImpl container = new BlueprintContainerImpl(classLoader, resourcePaths);
1:             servletContext.setAttribute(CONTAINER_ATTRIBUTE, container);
1:         } catch (Exception e) {
1:             servletContext.log("Failed to startup blueprint container. " + e, e);
1:         }
1:     }
1: 
1:     public void contextDestroyed(ServletContextEvent event) {
1:         ServletContext servletContext = event.getServletContext();
1:         Object container = servletContext.getAttribute(CONTAINER_ATTRIBUTE);
1:         if (container instanceof BlueprintContainerImpl) {
1:             BlueprintContainerImpl blueprint = (BlueprintContainerImpl) container;
1:             blueprint.destroy();
1:         }
1:     }
1: }
============================================================================