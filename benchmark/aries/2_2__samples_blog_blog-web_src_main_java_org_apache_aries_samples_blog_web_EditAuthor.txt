1:430e8f5: /**
1:430e8f5:  * Licensed to the Apache Software Foundation (ASF) under one
1:430e8f5:  * or more contributor license agreements.  See the NOTICE file
1:430e8f5:  * distributed with this work for additional information
1:430e8f5:  * regarding copyright ownership.  The ASF licenses this file
1:430e8f5:  * to you under the Apache License, Version 2.0 (the
1:430e8f5:  * "License"); you may not use this file except in compliance
1:430e8f5:  * with the License.  You may obtain a copy of the License at
1:430e8f5:  *
1:430e8f5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:430e8f5:  *
1:430e8f5:  * Unless required by applicable law or agreed to in writing,
1:430e8f5:  * software distributed under the License is distributed on an
1:430e8f5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:430e8f5:  * KIND, either express or implied.  See the License for the
1:430e8f5:  * specific language governing permissions and limitations
1:430e8f5:  * under the License.
1:430e8f5:  */
1:430e8f5: package org.apache.aries.samples.blog.web;
2:430e8f5: 
1:430e8f5: import java.io.IOException;
1:430e8f5: 
1:430e8f5: import javax.servlet.RequestDispatcher;
1:430e8f5: import javax.servlet.ServletException;
1:430e8f5: import javax.servlet.http.HttpServlet;
1:430e8f5: import javax.servlet.http.HttpServletRequest;
1:430e8f5: import javax.servlet.http.HttpServletResponse;
1:430e8f5: 
1:430e8f5: import org.apache.aries.samples.blog.api.BloggingService;
1:430e8f5: import org.apache.aries.samples.blog.web.util.FormServlet;
1:29d0247: import org.apache.aries.samples.blog.web.util.FormatChecker;
1:4173b7f: import org.apache.aries.samples.blog.web.util.JNDIHelper;
1:430e8f5: 
1:430e8f5: public class EditAuthor extends HttpServlet
2:430e8f5: {
1:430e8f5:   private static final long serialVersionUID = -8881545878284864977L;
1:430e8f5: 
1:430e8f5:   @Override
1:430e8f5:   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException
1:430e8f5:   {
1:430e8f5:     doPost(req, resp);
2:430e8f5:   }
1:160bcfd:   
1:430e8f5:   @Override
1:430e8f5:   protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
1:430e8f5:       IOException
1:160bcfd:   {
1:430e8f5:     // This method will update or create an author depending on the
1:430e8f5:     // existence of the author in the database.
1:430e8f5:     
1:430e8f5:     // The authors email address is the key in the database, thus if
1:430e8f5:     // the email address is not in the database we create this as a 
1:430e8f5:     // new author.
1:430e8f5:     
1:430e8f5:     String email = req.getParameter("email");
1:430e8f5:     String nickName = req.getParameter("nickName");
1:430e8f5:     String name = req.getParameter("name");
1:430e8f5:     String bio = req.getParameter("bio");
1:430e8f5:     String dob = req.getParameter("dob");
1:430e8f5:     
1:430e8f5:     if (email == null || email.equals("")) {
1:430e8f5:       storeParam(req, "email", email);
1:430e8f5:       storeParam(req, "nickName", nickName);
1:430e8f5:       storeParam(req, "name", name);
1:430e8f5:       storeParam(req, "bio", bio);
1:430e8f5:       storeParam(req, "dob", dob);
1:430e8f5:       
1:430e8f5:       FormServlet.addError(req, "The email field is required.");
1:430e8f5:       resp.sendRedirect("EditAuthorForm");
1:160bcfd:       
1:29d0247:     }else if (!FormatChecker.isValidEmail(email)) {
1:29d0247:     	storeParam(req, "email", email);
1:29d0247:         storeParam(req, "nickName", nickName);
1:29d0247:         storeParam(req, "name", name);
1:29d0247:         storeParam(req, "bio", bio);
1:29d0247:         storeParam(req, "dob", dob);
1:29d0247:         
1:160bcfd:     	FormServlet.addError(req, "The email field is not properly formatted");
1:160bcfd:         resp.sendRedirect("EditAuthorForm");	
1:430e8f5:     } else {
1:4173b7f:       BloggingService service = JNDIHelper.getBloggingService();
1:430e8f5: 
1:430e8f5:       if (service.getBlogAuthor(email) != null) {
1:430e8f5:         // do an update
1:4173b7f:         service.updateBlogAuthor(email, nickName, name, bio, dob);
1:430e8f5:       } else {
1:430e8f5:         // do a create
1:4173b7f:         service.createBlogAuthor(email, nickName, name, bio, dob);
1:430e8f5:       } 
1:430e8f5:       RequestDispatcher dispatch = getServletContext().getRequestDispatcher("/ViewAuthor");
1:430e8f5:       dispatch.forward(req, resp);
1:430e8f5:     }
1:430e8f5:   }
1:430e8f5:   
1:430e8f5:     private void storeParam(HttpServletRequest req, String param, String value) 
1:430e8f5:   {
1:430e8f5:     FormServlet.storeParam(req, EditAuthorForm.ID, param, value);
1:160bcfd:   }
1:430e8f5: }
============================================================================
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:29d0247
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.blog.web.util.FormatChecker;
/////////////////////////////////////////////////////////////////////////
1:     }else if (!FormatChecker.isValidEmail(email)) {
1:     	storeParam(req, "email", email);
1:         storeParam(req, "nickName", nickName);
1:         storeParam(req, "name", name);
1:         storeParam(req, "bio", bio);
1:         storeParam(req, "dob", dob);
1:         
/////////////////////////////////////////////////////////////////////////
commit:160bcfd
/////////////////////////////////////////////////////////////////////////
1:       
0:     }else if (checkEmail(email) == null) {
1:     	FormServlet.addError(req, "The email field is not properly formatted");
1:         resp.sendRedirect("EditAuthorForm");	
/////////////////////////////////////////////////////////////////////////
1:     
0:     private String checkEmail(String parameter)
1:     {
0:       if (parameter != null && parameter.matches("^(?:[a-zA-Z0-9_'^&amp;/+-])+(?:\\.(?:[a-zA-Z0-9_'^&amp;/+-])+)*@(?:(?:\\[?(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\.){3}(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\]?)|(?:[a-zA-Z0-9-]+\\.)+(?:[a-zA-Z]){2,}\\.?)$")) return parameter;
0:       return null;
1:     }
commit:afa98ec
commit:14fd487
commit:4173b7f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.blog.web.util.JNDIHelper;
/////////////////////////////////////////////////////////////////////////
1:       BloggingService service = JNDIHelper.getBloggingService();
1:         service.updateBlogAuthor(email, nickName, name, bio, dob);
1:         service.createBlogAuthor(email, nickName, name, bio, dob);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:430e8f5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.blog.web;
1: 
1: import java.io.IOException;
1: 
1: import javax.servlet.RequestDispatcher;
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: 
1: import org.apache.aries.samples.blog.api.BloggingService;
1: import org.apache.aries.samples.blog.web.util.FormServlet;
0: import org.apache.aries.samples.blog.web.util.HTMLOutput;
1: 
1: public class EditAuthor extends HttpServlet
1: {
1:   private static final long serialVersionUID = -8881545878284864977L;
1: 
1:   @Override
1:   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException
1:   {
1:     doPost(req, resp);
1:   }
1:   
1:   @Override
1:   protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
1:       IOException
1:   {
1:     // This method will update or create an author depending on the
1:     // existence of the author in the database.
1:     
1:     // The authors email address is the key in the database, thus if
1:     // the email address is not in the database we create this as a 
1:     // new author.
1:     
1:     String email = req.getParameter("email");
1:     String nickName = req.getParameter("nickName");
1:     String name = req.getParameter("name");
1:     String bio = req.getParameter("bio");
1:     String dob = req.getParameter("dob");
1:     
1:     if (email == null || email.equals("")) {
1:       storeParam(req, "email", email);
1:       storeParam(req, "nickName", nickName);
1:       storeParam(req, "name", name);
1:       storeParam(req, "bio", bio);
1:       storeParam(req, "dob", dob);
1:       
1:       FormServlet.addError(req, "The email field is required.");
1:       resp.sendRedirect("EditAuthorForm");
1:     } else {
0:       BloggingService service = HTMLOutput.getBloggingService();
1: 
1:       if (service.getBlogAuthor(email) != null) {
1:         // do an update
0:         service.updateAuthor(email, nickName, name, bio, dob);
1:       } else {
1:         // do a create
0:         service.createAuthor(email, nickName, name, bio, dob);
1:       } 
1:       RequestDispatcher dispatch = getServletContext().getRequestDispatcher("/ViewAuthor");
1:       dispatch.forward(req, resp);
1:     }
1:   }
1:   
1:     private void storeParam(HttpServletRequest req, String param, String value) 
1:   {
1:     FormServlet.storeParam(req, EditAuthorForm.ID, param, value);
1:   }
1: }
============================================================================