1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
5:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
8:fdf3952: 
1:0356de4: import java.util.ArrayList;
1:fdf3952: import java.util.Collection;
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.Enumeration;
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.Hashtable;
1:0356de4: import java.util.List;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: import javax.management.openmbean.TabularDataSupport;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.JmxConstants;
1:fdf3952: import org.osgi.jmx.service.useradmin.UserAdminMBean;
1:fdf3952: import org.osgi.service.useradmin.Role;
1:fdf3952: 
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>RoleData</tt> represents Role Type @see {@link UserAdminMBean#ROLE_TYPE}.It is a codec
1:fdf3952:  * for the <code>CompositeData</code> representing a Role.
1:fdf3952:  * </p>
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class RoleData {
1:0356de4: 
1:fdf3952:     /**
1:fdf3952:      * role name.
1:fdf3952:      */
1:fdf3952:     protected String name;
1:fdf3952:     /**
1:fdf3952:      * role type.
1:fdf3952:      */
1:fdf3952:     protected int type;
1:0356de4:     /**
1:0356de4:      * role propeties.
1:0356de4:      */
1:0356de4:     protected List<PropertyData<? extends Object>> properties = new ArrayList<PropertyData<? extends Object>>();
1:0356de4: 
1:0356de4: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new RoleData from Role object.
1:fdf3952:      * @param role {@link Role} instance.
1:fdf3952:      */
1:fdf3952:     public RoleData(Role role){
1:0356de4:         this(role.getName(), role.getType(), role.getProperties());
1:fdf3952:     }
1:0356de4: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new RoleData.
1:fdf3952:      * @param name role name.
1:fdf3952:      * @param type role type.
1:a7846d3:      */
1:a7846d3:     public RoleData(String name, int type) {
1:a7846d3:         this(name, type, null);
1:a7846d3:     }
1:a7846d3:     
1:a7846d3:     /**
1:a7846d3:      * Constructs new RoleData.
1:a7846d3:      * @param name role name.
1:a7846d3:      * @param type role type.
1:0356de4:      * @param properties role properties.
1:fdf3952:      */
1:0a8778f:     @SuppressWarnings("rawtypes")
1:0a8778f: 	public RoleData(String name, int type, Dictionary properties) {
1:fdf3952:         this.name = name;
1:fdf3952:         this.type = type;
1:0356de4: 
1:0356de4:         if (properties != null) {
1:0356de4:             for (Enumeration e = properties.keys(); e.hasMoreElements(); ) {
1:0356de4:                 String key = e.nextElement().toString();
1:0356de4:                 this.properties.add(PropertyData.newInstance(key, properties.get(key)));
1:0356de4:             }
1:0356de4:         }
1:fdf3952:     }
1:0356de4: 
1:fdf3952:     /**
1:fdf3952:      * Translates RoleData to CompositeData represented by
1:fdf3952:      * compositeType {@link UserAdminMBean#ROLE_TYPE}.
1:0356de4:      *
1:fdf3952:      * @return translated RoleData to compositeData.
1:fdf3952:      */
1:fdf3952:     public CompositeData toCompositeData() {
1:fdf3952:         try {
1:fdf3952:             Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:             items.put(UserAdminMBean.NAME, name);
1:fdf3952:             items.put(UserAdminMBean.TYPE, type);
1:540df86:             // items.put(UserAdminMBean.PROPERTIES, getPropertiesTable());
1:fdf3952:             return new CompositeDataSupport(UserAdminMBean.ROLE_TYPE, items);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new IllegalStateException("Can't create CompositeData" + e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:0356de4:     protected TabularData getPropertiesTable() {
1:32a99b9:         return getPropertiesTable(properties);
1:32a99b9:     }
1:32a99b9: 
1:32a99b9:     protected static TabularData getPropertiesTable(List<PropertyData<? extends Object>> data) {
1:0356de4:         TabularData propertiesTable = new TabularDataSupport(JmxConstants.PROPERTIES_TYPE);
1:32a99b9:         for (PropertyData<? extends Object> propertyData : data) {
1:0356de4:             propertiesTable.put(propertyData.toCompositeData());
1:0356de4:         }
1:0356de4:         return propertiesTable;
1:0356de4:     }
1:0356de4: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method to create RoleData from CompositeData object.
1:0356de4:      *
1:fdf3952:      * @param data {@link CompositeData} instance.
1:fdf3952:      * @return RoleData instance.
1:fdf3952:      */
1:fdf3952:     public static RoleData from(CompositeData data) {
1:fdf3952:         if(data == null){
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         String name = (String) data.get(UserAdminMBean.NAME);
1:fdf3952:         int type = (Integer) data.get(UserAdminMBean.TYPE);
1:540df86:         // Dictionary<String, Object> props = propertiesFrom((TabularData) data.get(UserAdminMBean.PROPERTIES));
1:0356de4: 
1:540df86:         return new RoleData(name, type, null /* props */);
1:fdf3952:     }
1:0356de4: 
1:fdf3952:     /**
1:fdf3952:      * Creates TabularData from Dictionary.
1:0356de4:      *
1:fdf3952:      * @param props Dictionary instance.
1:fdf3952:      * @return TabularData instance.
1:fdf3952:      */
1:fdf3952:     protected static TabularData toTabularData(Dictionary<String, Object> props){
1:fdf3952:         if(props == null){
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         TabularData data = new TabularDataSupport(JmxConstants.PROPERTIES_TYPE);
1:fdf3952:         for (Enumeration<String> keys = props.keys(); keys.hasMoreElements();) {
1:fdf3952:             String key = keys.nextElement();
1:fdf3952:             data.put(PropertyData.newInstance(key, props.get(key)).toCompositeData());
1:fdf3952:         }
1:fdf3952:         return data;
1:fdf3952:     }
1:0356de4: 
1:fdf3952:     /**
1:fdf3952:      * Creates properties from TabularData object.
1:0356de4:      *
1:fdf3952:      * @param data {@link TabularData} instance.
1:fdf3952:      * @return translated tabular data to properties {@link Dictionary}.
1:fdf3952:      */
1:fdf3952:     protected static Dictionary<String, Object> propertiesFrom(TabularData data){
1:fdf3952:         if(data == null){
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:fdf3952:         for(CompositeData compositeData : (Collection<CompositeData>)data.values()){
1:fdf3952:             PropertyData  property = PropertyData.from(compositeData);
1:fdf3952:             props.put(property.getKey(), property.getValue());
1:fdf3952:         }
1:0356de4: 
1:fdf3952:         return props;
1:fdf3952:     }
1:fdf3952:     /**
1:fdf3952:      * @return the name
1:fdf3952:      */
1:fdf3952:     public String getName() {
1:fdf3952:         return name;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @return the type
1:fdf3952:      */
1:fdf3952:     public int getType() {
1:fdf3952:         return type;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
1: 	public RoleData(String name, int type, Dictionary properties) {
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:a7846d3
/////////////////////////////////////////////////////////////////////////
1:      */
1:     public RoleData(String name, int type) {
1:         this(name, type, null);
1:     }
1:     
1:     /**
1:      * Constructs new RoleData.
1:      * @param name role name.
1:      * @param type role type.
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:540df86
/////////////////////////////////////////////////////////////////////////
1:             // items.put(UserAdminMBean.PROPERTIES, getPropertiesTable());
/////////////////////////////////////////////////////////////////////////
1:         // Dictionary<String, Object> props = propertiesFrom((TabularData) data.get(UserAdminMBean.PROPERTIES));
1:         return new RoleData(name, type, null /* props */);
commit:32a99b9
/////////////////////////////////////////////////////////////////////////
1:         return getPropertiesTable(properties);
1:     }
1: 
1:     protected static TabularData getPropertiesTable(List<PropertyData<? extends Object>> data) {
1:         for (PropertyData<? extends Object> propertyData : data) {
commit:0356de4
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * role propeties.
1:      */
1:     protected List<PropertyData<? extends Object>> properties = new ArrayList<PropertyData<? extends Object>>();
1: 
1: 
1:         this(role.getName(), role.getType(), role.getProperties());
1: 
1:      * @param properties role properties.
0:     public RoleData(String name, int type, Dictionary properties) {
1: 
1:         if (properties != null) {
1:             for (Enumeration e = properties.keys(); e.hasMoreElements(); ) {
1:                 String key = e.nextElement().toString();
1:                 this.properties.add(PropertyData.newInstance(key, properties.get(key)));
1:             }
1:         }
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
0:             items.put(UserAdminMBean.PROPERTIES, getPropertiesTable());
1:     protected TabularData getPropertiesTable() {
1:         TabularData propertiesTable = new TabularDataSupport(JmxConstants.PROPERTIES_TYPE);
0:         for (PropertyData<? extends Object> propertyData : properties) {
1:             propertiesTable.put(propertyData.toCompositeData());
1:         }
1:         return propertiesTable;
1:     }
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
0:         Dictionary<String, Object> props = propertiesFrom((TabularData) data.get(UserAdminMBean.PROPERTIES));
1: 
0:         return new RoleData(name, type, props);
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import java.util.Collection;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.HashMap;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: 
1: import org.osgi.jmx.JmxConstants;
1: import org.osgi.jmx.service.useradmin.UserAdminMBean;
1: import org.osgi.service.useradmin.Role;
1: 
1: 
1: /**
1:  * <p>
1:  * <tt>RoleData</tt> represents Role Type @see {@link UserAdminMBean#ROLE_TYPE}.It is a codec
1:  * for the <code>CompositeData</code> representing a Role.
1:  * </p>
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class RoleData {
1:     
1:     /**
1:      * role name.
1:      */
1:     protected String name;
1:     /**
1:      * role type.
1:      */
1:     protected int type;
1:     
1:     /**
1:      * Constructs new RoleData from Role object.
1:      * @param role {@link Role} instance.
1:      */
1:     public RoleData(Role role){
0:         this(role.getName(),role.getType());
1:     }
1:     
1:     /**
1:      * Constructs new RoleData.
1:      * @param name role name.
1:      * @param type role type.
1:      */
0:     public RoleData(String name, int type){
1:         this.name = name;
1:         this.type = type;
1:     }
1:     
1:     /**
1:      * Translates RoleData to CompositeData represented by
1:      * compositeType {@link UserAdminMBean#ROLE_TYPE}.
1:      * 
1:      * @return translated RoleData to compositeData.
1:      */
1:     public CompositeData toCompositeData() {
1:         try {
1:             Map<String, Object> items = new HashMap<String, Object>();
1:             items.put(UserAdminMBean.NAME, name);
1:             items.put(UserAdminMBean.TYPE, type);
1:             return new CompositeDataSupport(UserAdminMBean.ROLE_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Can't create CompositeData" + e);
1:         }
1:     }
1: 
1:     /**
1:      * Static factory method to create RoleData from CompositeData object.
1:      * 
1:      * @param data {@link CompositeData} instance.
1:      * @return RoleData instance.
1:      */
1:     public static RoleData from(CompositeData data) {
1:         if(data == null){
1:             return null;
1:         }
1:         String name = (String) data.get(UserAdminMBean.NAME);
1:         int type = (Integer) data.get(UserAdminMBean.TYPE);
0:         return new RoleData(name, type);
1:     }
1: 
1:     /**
1:      * Creates TabularData from Dictionary.
1:      * 
1:      * @param props Dictionary instance.
1:      * @return TabularData instance.
1:      */
1:     protected static TabularData toTabularData(Dictionary<String, Object> props){
1:         if(props == null){
1:             return null;
1:         }
1:         TabularData data = new TabularDataSupport(JmxConstants.PROPERTIES_TYPE);
1:         for (Enumeration<String> keys = props.keys(); keys.hasMoreElements();) {
1:             String key = keys.nextElement();
1:             data.put(PropertyData.newInstance(key, props.get(key)).toCompositeData());
1:         }
1:         return data;
1:     }
1:     
1:     /**
1:      * Creates properties from TabularData object.
1:      * 
1:      * @param data {@link TabularData} instance.
1:      * @return translated tabular data to properties {@link Dictionary}.
1:      */
1:     protected static Dictionary<String, Object> propertiesFrom(TabularData data){
1:         if(data == null){
1:             return null;
1:         }
1:         
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         for(CompositeData compositeData : (Collection<CompositeData>)data.values()){
1:             PropertyData  property = PropertyData.from(compositeData);
1:             props.put(property.getKey(), property.getValue());
1:         }
1:         
1:         return props;
1:     }
1:     /**
1:      * @return the name
1:      */
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     /**
1:      * @return the type
1:      */
1:     public int getType() {
1:         return type;
1:     }
1: 
1: }
============================================================================