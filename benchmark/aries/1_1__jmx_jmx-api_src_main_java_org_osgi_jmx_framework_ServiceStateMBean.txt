1:fdf3952: /*
1:fdf3952:  * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
1:15d33bc:  *
1:fdf3952:  * Licensed under the Apache License, Version 2.0 (the "License");
1:fdf3952:  * you may not use this file except in compliance with the License.
1:fdf3952:  * You may obtain a copy of the License at
10:fdf3952:  *
1:fdf3952:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing, software
1:fdf3952:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  * See the License for the specific language governing permissions and
1:fdf3952:  * limitations under the License.
1:fdf3952:  */
1:fdf3952: 
1:fdf3952: package org.osgi.jmx.framework;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: 
1:15d33bc: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeType;
1:fdf3952: import javax.management.openmbean.SimpleType;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: import javax.management.openmbean.TabularType;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.Item;
1:fdf3952: import org.osgi.jmx.JmxConstants;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * This MBean represents the Service state of the framework. This MBean also
1:fdf3952:  * emits events that clients can use to get notified of the changes in the
1:fdf3952:  * service state of the framework.
1:15d33bc:  *
1:fdf3952:  * @version $Revision$
1:fdf3952:  * @ThreadSafe
1:fdf3952:  */
1:fdf3952: public interface ServiceStateMBean {
1:fdf3952: 	/**
1:fdf3952: 	 * The fully qualified object name of this mbean.
1:fdf3952: 	 */
1:fdf3952: 	String OBJECTNAME = JmxConstants.OSGI_CORE
1:7b6fac5: 			+ ":type=serviceState,version=1.7";
1:fdf3952: 	/**
1:fdf3952: 	 * The key BUNDLE_IDENTIFIER, used in {@link #BUNDLE_IDENTIFIER_ITEM}.
1:fdf3952: 	 */
1:fdf3952: 	String BUNDLE_IDENTIFIER = "BundleIdentifier";
1:fdf3952: 	/**
1:fdf3952: 	 * The item containing the bundle identifier in {@link #SERVICE_TYPE}. The
1:fdf3952: 	 * key is {@link #BUNDLE_IDENTIFIER} and the type is {@link SimpleType#LONG}
1:fdf3952: 	 * .
1:fdf3952: 	 */
1:fdf3952: 	Item BUNDLE_IDENTIFIER_ITEM = new Item(BUNDLE_IDENTIFIER,
1:fdf3952: 			"The identifier of the bundle the service belongs to",
1:fdf3952: 			SimpleType.LONG);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The key OBJECT_CLASS, used {@link #OBJECT_CLASS_ITEM}.
1:fdf3952: 	 */
1:fdf3952: 	String OBJECT_CLASS = "objectClass";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The item containing the interfaces of the service in
1:fdf3952: 	 * {@link #SERVICE_TYPE}. The key is {@link #OBJECT_CLASS} and the type is
1:fdf3952: 	 * {@link JmxConstants#STRING_ARRAY_TYPE}.
1:fdf3952: 	 */
1:fdf3952: 	Item OBJECT_CLASS_ITEM = new Item(
1:fdf3952: 			OBJECT_CLASS,
1:fdf3952: 			"An string array containing the interfaces under which the service has been registered",
1:fdf3952: 			JmxConstants.STRING_ARRAY_TYPE);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The key IDENTIFIER, used {@link #IDENTIFIER_ITEM}.
1:fdf3952: 	 */
1:fdf3952: 	String IDENTIFIER = "Identifier";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The item containing the service identifier in {@link #SERVICE_TYPE}. The
1:fdf3952: 	 * key is {@link #IDENTIFIER} and the type is {@link SimpleType#LONG}.
1:fdf3952: 	 */
1:fdf3952: 	Item IDENTIFIER_ITEM = new Item(IDENTIFIER,
1:fdf3952: 			"The identifier of the service", SimpleType.LONG);
1:fdf3952: 
1:fdf3952: 	/**
1:282cfcd: 	 * The key PROPERTIES, used in {@link #PROPERTIES_ITEM}.
1:282cfcd: 	 */
1:282cfcd: 	String PROPERTIES = "Properties";
1:282cfcd: 
1:282cfcd: 	/**
1:282cfcd: 	 * The item containing service properties in {@link #SERVICE_TYPE}. The key
1:282cfcd: 	 * is {@link #PROPERTIES} and the type is {@link JmxConstants#PROPERTIES_TYPE}.
1:282cfcd: 	 */
1:282cfcd: 	Item PROPERTIES_ITEM = new Item(PROPERTIES,
1:282cfcd: 	        "The service properties", JmxConstants.PROPERTIES_TYPE);
1:282cfcd: 
1:282cfcd: 	/**
1:fdf3952: 	 * The key USING_BUNDLES, used in {@link #USING_BUNDLES_ITEM}.
1:fdf3952: 	 */
1:fdf3952: 	String USING_BUNDLES = "UsingBundles";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The item containing the bundles using the service in
1:fdf3952: 	 * {@link #SERVICE_TYPE}. The key is {@link #USING_BUNDLES} and the type is
1:fdf3952: 	 * {@link JmxConstants#LONG_ARRAY_TYPE}.
1:fdf3952: 	 */
1:fdf3952: 	Item USING_BUNDLES_ITEM = new Item(USING_BUNDLES,
1:fdf3952: 			"The bundles using the service", JmxConstants.LONG_ARRAY_TYPE);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The Composite Type for a CompositeData representing a service. This type
1:fdf3952: 	 * consists of:
1:fdf3952: 	 * <ul>
1:fdf3952: 	 * <li>{@link #BUNDLE_IDENTIFIER}</li>
1:fdf3952: 	 * <li>{@link #IDENTIFIER}</li>
1:fdf3952: 	 * <li>{@link #OBJECT_CLASS}</li>
1:fdf3952: 	 * <li>{@link #USING_BUNDLES}</li>
1:fdf3952: 	 * </ul>
1:fdf3952: 	 */
1:fdf3952: 	CompositeType SERVICE_TYPE = Item.compositeType("SERVICE",
1:fdf3952: 			"This type encapsulates an OSGi service", BUNDLE_IDENTIFIER_ITEM,
1:282cfcd: 			IDENTIFIER_ITEM, OBJECT_CLASS_ITEM, PROPERTIES_ITEM,
1:fdf3952: 			USING_BUNDLES_ITEM);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The Tabular Type for a Service table. The rows consists of
1:fdf3952: 	 * {@link #SERVICE_TYPE} Composite Data and the index is {@link #IDENTIFIER}
1:fdf3952: 	 * .
1:fdf3952: 	 */
1:fdf3952: 	TabularType SERVICES_TYPE = Item.tabularType("SERVICES",
1:fdf3952: 			"The table of all services", SERVICE_TYPE, IDENTIFIER);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The key BUNDLE_LOCATION, used in {@link #SERVICE_EVENT_TYPE}.
1:fdf3952: 	 */
1:fdf3952: 	String BUNDLE_LOCATION = "BundleLocation";
1:fdf3952: 	/**
1:fdf3952: 	 * The item containing the bundle location in {@link #EVENT_ITEM}. The key
1:fdf3952: 	 * is {@link #BUNDLE_LOCATION} and the the type is {@link SimpleType#STRING}
1:fdf3952: 	 * .
1:fdf3952: 	 */
1:fdf3952: 	Item BUNDLE_LOCATION_ITEM = new Item(BUNDLE_LOCATION,
1:fdf3952: 			"The location of the bundle", SimpleType.STRING);
1:fdf3952: 	/**
1:fdf3952: 	 * The key BUNDLE_SYMBOLIC_NAME, used in {@link #SERVICE_EVENT_TYPE}.
1:fdf3952: 	 */
1:fdf3952: 	String BUNDLE_SYMBOLIC_NAME = "BundleSymbolicName";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The item containing the symbolic name in {@link #EVENT}. The key is
1:fdf3952: 	 * {@link #BUNDLE_SYMBOLIC_NAME} and the the type is
1:fdf3952: 	 * {@link SimpleType#STRING}.
1:fdf3952: 	 */
1:fdf3952: 	Item BUNDLE_SYMBOLIC_NAME_ITEM = new Item(BUNDLE_SYMBOLIC_NAME,
1:fdf3952: 			"The symbolic name of the bundle", SimpleType.STRING);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The key EVENT, used in {@link #EVENT_ITEM}.
1:fdf3952: 	 */
1:fdf3952: 	String EVENT = "ServiceEvent";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The item containing the event type. The key is {@link #EVENT} and the
1:fdf3952: 	 * type is {@link SimpleType#INTEGER}
1:fdf3952: 	 */
1:fdf3952: 	Item EVENT_ITEM = new Item(
1:fdf3952: 			EVENT,
1:fdf3952: 			"The eventType of the event: {REGISTERED=1, MODIFIED=2 UNREGISTERING=3}",
1:fdf3952: 			SimpleType.INTEGER);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The Composite Type that represents a service event. This composite
1:fdf3952: 	 * consists of:
1:fdf3952: 	 * <ul>
1:fdf3952: 	 * <li>{@link #IDENTIFIER}</li>
1:fdf3952: 	 * <li>{@link #OBJECT_CLASS}</li>
1:fdf3952: 	 * <li>{@link #BUNDLE_LOCATION}</li>
1:fdf3952: 	 * <li>{@link #BUNDLE_SYMBOLIC_NAME}</li>
1:fdf3952: 	 * <li>{@link #EVENT}</li>
1:fdf3952: 	 * </ul>
1:fdf3952: 	 */
1:fdf3952: 	CompositeType SERVICE_EVENT_TYPE = Item.compositeType("SERVICE_EVENT",
1:fdf3952: 			"This type encapsulates OSGi service events", IDENTIFIER_ITEM,
1:fdf3952: 			OBJECT_CLASS_ITEM, BUNDLE_IDENTIFIER_ITEM, BUNDLE_LOCATION_ITEM,
1:fdf3952: 			BUNDLE_SYMBOLIC_NAME_ITEM, EVENT_ITEM);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the list of interfaces that this service implements
1:15d33bc: 	 *
1:fdf3952: 	 * @param serviceId
1:fdf3952: 	 *            the identifier of the service
1:fdf3952: 	 * @return the list of interfaces
1:fdf3952: 	 * @throws IOException
1:fdf3952: 	 *             if the operation fails
1:fdf3952: 	 * @throws IllegalArgumentException
1:fdf3952: 	 *             if the service indicated does not exist
1:fdf3952: 	 */
1:fdf3952: 	public String[] getObjectClass(long serviceId) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the bundle identifier of the bundle which registered the service
1:15d33bc: 	 *
1:fdf3952: 	 * @param serviceId
1:fdf3952: 	 *            the identifier of the service
1:fdf3952: 	 * @return the identifier for the bundle
1:fdf3952: 	 * @throws IOException
1:fdf3952: 	 *             if the operation fails
1:fdf3952: 	 * @throws IllegalArgumentException
1:fdf3952: 	 *             if the service indicated does not exist
1:fdf3952: 	 */
1:fdf3952: 	long getBundleIdentifier(long serviceId) throws IOException;
1:15d33bc: 	CompositeData getService(long serviceId) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the map of properties associated with this service
1:15d33bc: 	 *
1:fdf3952: 	 * @see JmxConstants#PROPERTIES_TYPE for the details of the TabularType
1:15d33bc: 	 *
1:fdf3952: 	 * @param serviceId
1:fdf3952: 	 *            the identifier of the service
1:fdf3952: 	 * @return the table of properties. These include the standard mandatory
1:fdf3952: 	 *         service.id and objectClass properties as defined in the
1:fdf3952: 	 *         <code>org.osgi.framework.Constants</code> interface
1:fdf3952: 	 * @throws IOException
1:fdf3952: 	 *             if the operation fails
1:fdf3952: 	 * @throws IllegalArgumentException
1:fdf3952: 	 *             if the service indicated does not exist
1:fdf3952: 	 */
1:fdf3952: 	TabularData getProperties(long serviceId) throws IOException;
1:15d33bc: 	CompositeData getProperty(long serviceId, String key) throws IOException;
1:15d33bc: 	long[] getServiceIds() throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the service state of the system in tabular form.
1:15d33bc: 	 *
1:fdf3952: 	 * @see #SERVICES_TYPE for the details of the TabularType
1:15d33bc: 	 *
1:fdf3952: 	 * @return the tabular representation of the service state
1:fdf3952: 	 * @throws IOException
1:fdf3952: 	 *             If the operation fails
1:fdf3952: 	 * @throws IllegalArgumentException
1:fdf3952: 	 *             if the service indicated does not exist
1:fdf3952: 	 */
1:fdf3952: 	TabularData listServices() throws IOException;
1:15d33bc: 	TabularData listServices(String clazz, String filter) throws IOException;
1:c8116cd:     TabularData listServices(String clazz, String filter, String ... serviceTypeItems) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the list of identifiers of the bundles that use the service
1:15d33bc: 	 *
1:fdf3952: 	 * @param serviceId
1:fdf3952: 	 *            the identifier of the service
1:fdf3952: 	 * @return the list of bundle identifiers
1:fdf3952: 	 * @throws IOException
1:fdf3952: 	 *             if the operation fails
1:fdf3952: 	 * @throws IllegalArgumentException
1:fdf3952: 	 *             if the service indicated does not exist
1:fdf3952: 	 */
1:fdf3952: 	long[] getUsingBundles(long serviceId) throws IOException;
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:282cfcd
/////////////////////////////////////////////////////////////////////////
1: 	 * The key PROPERTIES, used in {@link #PROPERTIES_ITEM}.
1: 	 */
1: 	String PROPERTIES = "Properties";
1: 
1: 	/**
1: 	 * The item containing service properties in {@link #SERVICE_TYPE}. The key
1: 	 * is {@link #PROPERTIES} and the type is {@link JmxConstants#PROPERTIES_TYPE}.
1: 	 */
1: 	Item PROPERTIES_ITEM = new Item(PROPERTIES,
1: 	        "The service properties", JmxConstants.PROPERTIES_TYPE);
1: 
1: 	/**
/////////////////////////////////////////////////////////////////////////
1: 			IDENTIFIER_ITEM, OBJECT_CLASS_ITEM, PROPERTIES_ITEM,
commit:7b6fac5
/////////////////////////////////////////////////////////////////////////
1: 			+ ":type=serviceState,version=1.7";
commit:c8116cd
/////////////////////////////////////////////////////////////////////////
1:     TabularData listServices(String clazz, String filter, String ... serviceTypeItems) throws IOException;
commit:15d33bc
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: import javax.management.openmbean.CompositeData;
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 	 *
/////////////////////////////////////////////////////////////////////////
1: 	 *
/////////////////////////////////////////////////////////////////////////
1: 	CompositeData getService(long serviceId) throws IOException;
1: 	 *
1: 	 *
/////////////////////////////////////////////////////////////////////////
1: 	CompositeData getProperty(long serviceId, String key) throws IOException;
1: 	long[] getServiceIds() throws IOException;
1: 	 *
1: 	 *
/////////////////////////////////////////////////////////////////////////
1: 	TabularData listServices(String clazz, String filter) throws IOException;
0:     TabularData listServices(String clazz, String filter, String [] serviceTypeItems) throws IOException;
1: 	 *
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.jmx.framework;
1: 
1: import java.io.IOException;
1: 
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.SimpleType;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularType;
1: 
1: import org.osgi.jmx.Item;
1: import org.osgi.jmx.JmxConstants;
1: 
1: /**
1:  * This MBean represents the Service state of the framework. This MBean also
1:  * emits events that clients can use to get notified of the changes in the
1:  * service state of the framework.
1:  * 
1:  * @version $Revision$
1:  * @ThreadSafe
1:  */
1: public interface ServiceStateMBean {
1: 	/**
1: 	 * The fully qualified object name of this mbean.
1: 	 */
1: 	String OBJECTNAME = JmxConstants.OSGI_CORE
0: 			+ ":type=serviceState,version=1.5";
1: 	/**
1: 	 * The key BUNDLE_IDENTIFIER, used in {@link #BUNDLE_IDENTIFIER_ITEM}.
1: 	 */
1: 	String BUNDLE_IDENTIFIER = "BundleIdentifier";
1: 	/**
1: 	 * The item containing the bundle identifier in {@link #SERVICE_TYPE}. The
1: 	 * key is {@link #BUNDLE_IDENTIFIER} and the type is {@link SimpleType#LONG}
1: 	 * .
1: 	 */
1: 	Item BUNDLE_IDENTIFIER_ITEM = new Item(BUNDLE_IDENTIFIER,
1: 			"The identifier of the bundle the service belongs to",
1: 			SimpleType.LONG);
1: 
1: 	/**
1: 	 * The key OBJECT_CLASS, used {@link #OBJECT_CLASS_ITEM}.
1: 	 */
1: 	String OBJECT_CLASS = "objectClass";
1: 
1: 	/**
1: 	 * The item containing the interfaces of the service in
1: 	 * {@link #SERVICE_TYPE}. The key is {@link #OBJECT_CLASS} and the type is
1: 	 * {@link JmxConstants#STRING_ARRAY_TYPE}.
1: 	 */
1: 	Item OBJECT_CLASS_ITEM = new Item(
1: 			OBJECT_CLASS,
1: 			"An string array containing the interfaces under which the service has been registered",
1: 			JmxConstants.STRING_ARRAY_TYPE);
1: 
1: 	/**
1: 	 * The key IDENTIFIER, used {@link #IDENTIFIER_ITEM}.
1: 	 */
1: 	String IDENTIFIER = "Identifier";
1: 
1: 	/**
1: 	 * The item containing the service identifier in {@link #SERVICE_TYPE}. The
1: 	 * key is {@link #IDENTIFIER} and the type is {@link SimpleType#LONG}.
1: 	 */
1: 	Item IDENTIFIER_ITEM = new Item(IDENTIFIER,
1: 			"The identifier of the service", SimpleType.LONG);
1: 
1: 	/**
1: 	 * The key USING_BUNDLES, used in {@link #USING_BUNDLES_ITEM}.
1: 	 */
1: 	String USING_BUNDLES = "UsingBundles";
1: 
1: 	/**
1: 	 * The item containing the bundles using the service in
1: 	 * {@link #SERVICE_TYPE}. The key is {@link #USING_BUNDLES} and the type is
1: 	 * {@link JmxConstants#LONG_ARRAY_TYPE}.
1: 	 */
1: 	Item USING_BUNDLES_ITEM = new Item(USING_BUNDLES,
1: 			"The bundles using the service", JmxConstants.LONG_ARRAY_TYPE);
1: 
1: 	/**
1: 	 * The Composite Type for a CompositeData representing a service. This type
1: 	 * consists of:
1: 	 * <ul>
1: 	 * <li>{@link #BUNDLE_IDENTIFIER}</li>
1: 	 * <li>{@link #IDENTIFIER}</li>
1: 	 * <li>{@link #OBJECT_CLASS}</li>
1: 	 * <li>{@link #USING_BUNDLES}</li>
1: 	 * </ul>
1: 	 */
1: 	CompositeType SERVICE_TYPE = Item.compositeType("SERVICE",
1: 			"This type encapsulates an OSGi service", BUNDLE_IDENTIFIER_ITEM,
0: 			IDENTIFIER_ITEM, OBJECT_CLASS_ITEM,
1: 			USING_BUNDLES_ITEM);
1: 
1: 	/**
1: 	 * The Tabular Type for a Service table. The rows consists of
1: 	 * {@link #SERVICE_TYPE} Composite Data and the index is {@link #IDENTIFIER}
1: 	 * .
1: 	 */
1: 	TabularType SERVICES_TYPE = Item.tabularType("SERVICES",
1: 			"The table of all services", SERVICE_TYPE, IDENTIFIER);
1: 
1: 	/**
1: 	 * The key BUNDLE_LOCATION, used in {@link #SERVICE_EVENT_TYPE}.
1: 	 */
1: 	String BUNDLE_LOCATION = "BundleLocation";
1: 	/**
1: 	 * The item containing the bundle location in {@link #EVENT_ITEM}. The key
1: 	 * is {@link #BUNDLE_LOCATION} and the the type is {@link SimpleType#STRING}
1: 	 * .
1: 	 */
1: 	Item BUNDLE_LOCATION_ITEM = new Item(BUNDLE_LOCATION,
1: 			"The location of the bundle", SimpleType.STRING);
1: 	/**
1: 	 * The key BUNDLE_SYMBOLIC_NAME, used in {@link #SERVICE_EVENT_TYPE}.
1: 	 */
1: 	String BUNDLE_SYMBOLIC_NAME = "BundleSymbolicName";
1: 
1: 	/**
1: 	 * The item containing the symbolic name in {@link #EVENT}. The key is
1: 	 * {@link #BUNDLE_SYMBOLIC_NAME} and the the type is
1: 	 * {@link SimpleType#STRING}.
1: 	 */
1: 	Item BUNDLE_SYMBOLIC_NAME_ITEM = new Item(BUNDLE_SYMBOLIC_NAME,
1: 			"The symbolic name of the bundle", SimpleType.STRING);
1: 
1: 	/**
1: 	 * The key EVENT, used in {@link #EVENT_ITEM}.
1: 	 */
1: 	String EVENT = "ServiceEvent";
1: 
1: 	/**
1: 	 * The item containing the event type. The key is {@link #EVENT} and the
1: 	 * type is {@link SimpleType#INTEGER}
1: 	 */
1: 	Item EVENT_ITEM = new Item(
1: 			EVENT,
1: 			"The eventType of the event: {REGISTERED=1, MODIFIED=2 UNREGISTERING=3}",
1: 			SimpleType.INTEGER);
1: 
1: 	/**
1: 	 * The Composite Type that represents a service event. This composite
1: 	 * consists of:
1: 	 * <ul>
1: 	 * <li>{@link #IDENTIFIER}</li>
1: 	 * <li>{@link #OBJECT_CLASS}</li>
1: 	 * <li>{@link #BUNDLE_LOCATION}</li>
1: 	 * <li>{@link #BUNDLE_SYMBOLIC_NAME}</li>
1: 	 * <li>{@link #EVENT}</li>
1: 	 * </ul>
1: 	 */
1: 	CompositeType SERVICE_EVENT_TYPE = Item.compositeType("SERVICE_EVENT",
1: 			"This type encapsulates OSGi service events", IDENTIFIER_ITEM,
1: 			OBJECT_CLASS_ITEM, BUNDLE_IDENTIFIER_ITEM, BUNDLE_LOCATION_ITEM,
1: 			BUNDLE_SYMBOLIC_NAME_ITEM, EVENT_ITEM);
1: 
1: 	/**
1: 	 * Answer the list of interfaces that this service implements
1: 	 * 
1: 	 * @param serviceId
1: 	 *            the identifier of the service
1: 	 * @return the list of interfaces
1: 	 * @throws IOException
1: 	 *             if the operation fails
1: 	 * @throws IllegalArgumentException
1: 	 *             if the service indicated does not exist
1: 	 */
1: 	public String[] getObjectClass(long serviceId) throws IOException;
1: 
1: 	/**
1: 	 * Answer the bundle identifier of the bundle which registered the service
1: 	 * 
1: 	 * @param serviceId
1: 	 *            the identifier of the service
1: 	 * @return the identifier for the bundle
1: 	 * @throws IOException
1: 	 *             if the operation fails
1: 	 * @throws IllegalArgumentException
1: 	 *             if the service indicated does not exist
1: 	 */
1: 	long getBundleIdentifier(long serviceId) throws IOException;
1: 
1: 	/**
1: 	 * Answer the map of properties associated with this service
1: 	 * 
1: 	 * @see JmxConstants#PROPERTIES_TYPE for the details of the TabularType
1: 	 * 
1: 	 * @param serviceId
1: 	 *            the identifier of the service
1: 	 * @return the table of properties. These include the standard mandatory
1: 	 *         service.id and objectClass properties as defined in the
1: 	 *         <code>org.osgi.framework.Constants</code> interface
1: 	 * @throws IOException
1: 	 *             if the operation fails
1: 	 * @throws IllegalArgumentException
1: 	 *             if the service indicated does not exist
1: 	 */
1: 	TabularData getProperties(long serviceId) throws IOException;
1: 
1: 	/**
1: 	 * Answer the service state of the system in tabular form.
1: 	 * 
1: 	 * @see #SERVICES_TYPE for the details of the TabularType
1: 	 * 
1: 	 * @return the tabular representation of the service state
1: 	 * @throws IOException
1: 	 *             If the operation fails
1: 	 * @throws IllegalArgumentException
1: 	 *             if the service indicated does not exist
1: 	 */
1: 	TabularData listServices() throws IOException;
1: 
1: 	/**
1: 	 * Answer the list of identifiers of the bundles that use the service
1: 	 * 
1: 	 * @param serviceId
1: 	 *            the identifier of the service
1: 	 * @return the list of bundle identifiers
1: 	 * @throws IOException
1: 	 *             if the operation fails
1: 	 * @throws IllegalArgumentException
1: 	 *             if the service indicated does not exist
1: 	 */
1: 	long[] getUsingBundles(long serviceId) throws IOException;
1: 
1: }
============================================================================