1:5a4dcb4: /*
1:5a4dcb4:  * Licensed to the Apache Software Foundation (ASF) under one
1:5a4dcb4:  * or more contributor license agreements.  See the NOTICE file
1:5a4dcb4:  * distributed with this work for additional information
1:5a4dcb4:  * regarding copyright ownership.  The ASF licenses this file
1:5a4dcb4:  * to you under the Apache License, Version 2.0 (the
1:5a4dcb4:  * "License"); you may not use this file except in compliance
1:5a4dcb4:  * with the License.  You may obtain a copy of the License at
1:5a4dcb4:  *
1:5a4dcb4:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5a4dcb4:  *
1:5a4dcb4:  * Unless required by applicable law or agreed to in writing,
1:5a4dcb4:  * software distributed under the License is distributed on an
1:5a4dcb4:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:5a4dcb4:  * KIND, either express or implied.  See the License for the
1:5a4dcb4:  * specific language governing permissions and limitations
1:5a4dcb4:  * under the License.
1:5a4dcb4:  */
1:5a4dcb4: package org.apache.aries.jpa.example.tasklist.cdi.impl;
1:5a4dcb4: 
1:5a4dcb4: import java.io.IOException;
1:5a4dcb4: import java.io.PrintWriter;
1:5a4dcb4: import java.text.SimpleDateFormat;
1:5a4dcb4: import java.util.Collection;
1:5a4dcb4: 
1:5a4dcb4: import javax.annotation.PostConstruct;
1:5a4dcb4: import javax.inject.Inject;
1:5a4dcb4: import javax.servlet.Servlet;
1:5a4dcb4: import javax.servlet.ServletException;
1:5a4dcb4: import javax.servlet.http.HttpServlet;
1:5a4dcb4: import javax.servlet.http.HttpServletRequest;
1:5a4dcb4: import javax.servlet.http.HttpServletResponse;
1:5a4dcb4: 
1:5a4dcb4: import org.apache.aries.jpa.example.tasklist.model.Task;
1:5a4dcb4: import org.apache.aries.jpa.example.tasklist.model.TaskService;
1:5a4dcb4: import org.ops4j.pax.cdi.api2.Component;
1:5a4dcb4: import org.ops4j.pax.cdi.api2.Contract;
1:5a4dcb4: import org.ops4j.pax.cdi.api2.Immediate;
1:5a4dcb4: import org.ops4j.pax.cdi.api2.Properties;
1:5a4dcb4: import org.ops4j.pax.cdi.api2.Property;
1:5a4dcb4: import org.ops4j.pax.cdi.api2.Service;
1:5a4dcb4: 
1:5a4dcb4: @Component @Service @Immediate
1:5a4dcb4: @Contract(Servlet.class)
1:5a4dcb4: @Properties(@Property(name = "alias", value="/tasklist"))
1:5a4dcb4: public class TasklistServlet extends HttpServlet {
1:5a4dcb4: 
1:5a4dcb4:     private static final long serialVersionUID = 34992072289535683L;
1:5a4dcb4: 
1:5a4dcb4:     @Inject
1:5a4dcb4:     private transient TaskService taskService;
1:5a4dcb4: 
1:5a4dcb4:     @PostConstruct
1:5a4dcb4:     void initialize() {
1:5a4dcb4: 
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
1:5a4dcb4:         IOException {
1:5a4dcb4:         String add = req.getParameter("add");
1:5a4dcb4:         String taskId = req.getParameter("taskId");
1:5a4dcb4:         String title = req.getParameter("title");
1:5a4dcb4:         PrintWriter writer = resp.getWriter(); // NOSONAR
1:5a4dcb4:         if (add != null) {
1:5a4dcb4:             addTask(taskId, title);
1:5a4dcb4:         } else if (taskId != null && taskId.length() > 0) {
1:5a4dcb4:             showTask(writer, taskId);
1:5a4dcb4:         } else {
1:5a4dcb4:             showTaskList(writer);
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     private void addTask(String taskId, String title) {
1:5a4dcb4:         Task task = new Task();
1:5a4dcb4:         task.setId(new Integer(taskId));
1:5a4dcb4:         task.setTitle(title);
1:5a4dcb4:         taskService.addTask(task );
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     private void showTaskList(PrintWriter writer) {
1:5a4dcb4:         writer.println("<h1>Tasks</h1>");
1:5a4dcb4:         Collection<Task> tasks = taskService.getTasks();
1:5a4dcb4:         for (Task task : tasks) {
1:5a4dcb4:             writer.println("<a href=\"?taskId=" + task.getId() + "\">" + task.getTitle() + "</a><BR/>");
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     private void showTask(PrintWriter writer, String taskId) {
1:5a4dcb4:         SimpleDateFormat sdf = new SimpleDateFormat();
1:5a4dcb4:         Task task = taskService.getTask(new Integer(taskId));
1:5a4dcb4:         if (task != null) {
1:5a4dcb4:             writer.println("<h1>Task " + task.getTitle() + " </h1>");
1:5a4dcb4:             if (task.getDueDate() != null) {
1:5a4dcb4:                 writer.println("Due date: " + sdf.format(task.getDueDate()) + "<br/>");
1:5a4dcb4:             }
1:5a4dcb4:             writer.println(task.getDescription());
1:5a4dcb4:         } else {
1:5a4dcb4:             writer.println("Task with id " + taskId + " not found");
1:5a4dcb4:         }
1:5a4dcb4: 
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5a4dcb4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.example.tasklist.cdi.impl;
1: 
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.text.SimpleDateFormat;
1: import java.util.Collection;
1: 
1: import javax.annotation.PostConstruct;
1: import javax.inject.Inject;
1: import javax.servlet.Servlet;
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: 
1: import org.apache.aries.jpa.example.tasklist.model.Task;
1: import org.apache.aries.jpa.example.tasklist.model.TaskService;
1: import org.ops4j.pax.cdi.api2.Component;
1: import org.ops4j.pax.cdi.api2.Contract;
1: import org.ops4j.pax.cdi.api2.Immediate;
1: import org.ops4j.pax.cdi.api2.Properties;
1: import org.ops4j.pax.cdi.api2.Property;
1: import org.ops4j.pax.cdi.api2.Service;
1: 
1: @Component @Service @Immediate
1: @Contract(Servlet.class)
1: @Properties(@Property(name = "alias", value="/tasklist"))
1: public class TasklistServlet extends HttpServlet {
1: 
1:     private static final long serialVersionUID = 34992072289535683L;
1: 
1:     @Inject
1:     private transient TaskService taskService;
1: 
1:     @PostConstruct
1:     void initialize() {
1: 
1:     }
1: 
1:     @Override
1:     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
1:         IOException {
1:         String add = req.getParameter("add");
1:         String taskId = req.getParameter("taskId");
1:         String title = req.getParameter("title");
1:         PrintWriter writer = resp.getWriter(); // NOSONAR
1:         if (add != null) {
1:             addTask(taskId, title);
1:         } else if (taskId != null && taskId.length() > 0) {
1:             showTask(writer, taskId);
1:         } else {
1:             showTaskList(writer);
1:         }
1:     }
1: 
1:     private void addTask(String taskId, String title) {
1:         Task task = new Task();
1:         task.setId(new Integer(taskId));
1:         task.setTitle(title);
1:         taskService.addTask(task );
1:     }
1: 
1:     private void showTaskList(PrintWriter writer) {
1:         writer.println("<h1>Tasks</h1>");
1:         Collection<Task> tasks = taskService.getTasks();
1:         for (Task task : tasks) {
1:             writer.println("<a href=\"?taskId=" + task.getId() + "\">" + task.getTitle() + "</a><BR/>");
1:         }
1:     }
1: 
1:     private void showTask(PrintWriter writer, String taskId) {
1:         SimpleDateFormat sdf = new SimpleDateFormat();
1:         Task task = taskService.getTask(new Integer(taskId));
1:         if (task != null) {
1:             writer.println("<h1>Task " + task.getTitle() + " </h1>");
1:             if (task.getDueDate() != null) {
1:                 writer.println("Due date: " + sdf.format(task.getDueDate()) + "<br/>");
1:             }
1:             writer.println(task.getDescription());
1:         } else {
1:             writer.println("Task with id " + taskId + " not found");
1:         }
1: 
1:     }
1: 
1: }
============================================================================