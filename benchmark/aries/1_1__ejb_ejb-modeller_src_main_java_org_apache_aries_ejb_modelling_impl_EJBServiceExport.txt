1:0d78661: /**
1:0d78661:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:0d78661:  *  contributor license agreements.  See the NOTICE file distributed with
1:0d78661:  *  this work for additional information regarding copyright ownership.
1:0d78661:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:0d78661:  *  (the "License"); you may not use this file except in compliance with
1:0d78661:  *  the License.  You may obtain a copy of the License at
1:0d78661:  *
1:0d78661:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0d78661:  *
1:0d78661:  *  Unless required by applicable law or agreed to in writing, software
1:0d78661:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:0d78661:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d78661:  *  See the License for the specific language governing permissions and
1:0d78661:  *  limitations under the License.
1:0d78661:  */
1:0d78661: package org.apache.aries.ejb.modelling.impl;
1:0d78661: 
1:0d78661: import java.util.Arrays;
1:0d78661: import java.util.Collection;
1:0d78661: import java.util.HashMap;
1:0d78661: import java.util.Map;
1:0d78661: 
1:0d78661: import org.apache.aries.application.modelling.ExportedService;
1:0d78661: import org.apache.aries.application.modelling.ModellingConstants;
1:0d78661: import org.apache.aries.application.modelling.ResourceType;
1:0d78661: import org.apache.aries.application.modelling.WrappedServiceMetadata;
1:0d78661: import org.apache.aries.application.utils.service.ExportedServiceHelper;
1:0d78661: import org.osgi.framework.Constants;
1:0d78661: 
1:4134a37: /**
1:4134a37:  * This class represents the service exported on behalf of a Session Bean
1:4134a37:  */
1:0d78661: public class EJBServiceExport implements ExportedService {
1:0d78661: 
1:0d78661:   private final String interfaceName;
1:0d78661:   private final String ejbName;
1:0d78661:   
1:0d78661:   private final Map<String, Object> _attributes;
1:0d78661:   
1:0d78661:   private final Map<String, Object> serviceProperties;
1:0d78661:   private String _toString;
1:0d78661:   
1:4134a37:   /**
1:4134a37:    * Set up this {@link ExportedService} with the right EJB properties
1:4134a37:    * @param ejbName
1:4134a37:    * @param ejbType
1:4134a37:    * @param interfaceName
1:4134a37:    * @param remote
1:4134a37:    */
1:0d78661:   public EJBServiceExport(String ejbName, String ejbType, String interfaceName,
1:0d78661:       boolean remote) {
1:0d78661:     this.interfaceName = interfaceName;
1:0d78661:     this.ejbName = ejbName;
1:0d78661:     
1:0d78661:     serviceProperties = new HashMap<String, Object>();
1:0d78661:     serviceProperties.put("ejb.name", ejbName);
1:4134a37:     serviceProperties.put("ejb.type", correctCase(ejbType));
1:0d78661:     if(remote)
1:0d78661:       serviceProperties.put("service.exported.interfaces", interfaceName);
1:0d78661:     
1:0d78661:     _attributes = new HashMap<String, Object>(serviceProperties);
1:0d78661:     
1:0d78661:     _attributes.put(Constants.OBJECTCLASS, interfaceName);
1:0d78661:     _attributes.put (Constants.SERVICE_RANKING, "0");
1:0d78661:     _attributes.put(ModellingConstants.OBR_SERVICE, ModellingConstants.OBR_SERVICE);
1:0d78661:   }
1:0d78661: 
1:4134a37:   /**
1:4134a37:    * The ejb.type property is always capitalised first letter, lowercase otherwise
1:4134a37:    * @param ejbType
1:4134a37:    * @return
1:4134a37:    */
1:4134a37:   private String correctCase(String ejbType) {
1:4134a37:     String result = ejbType.substring(0, 1).toUpperCase();
1:4134a37:     result += ejbType.substring(1).toLowerCase();
1:4134a37:     return result;
1:4134a37:   }
1:4134a37: 
1:0d78661:   public Map<String, Object> getAttributes() {
1:0d78661:     return _attributes;
1:0d78661:   }
1:0d78661: 
1:0d78661:   public ResourceType getType() {
1:0d78661:     return ResourceType.SERVICE;
1:0d78661:   }
1:0d78661: 
1:0d78661:   public Collection<String> getInterfaces() {
1:0d78661:     
1:0d78661:     return Arrays.asList(interfaceName);
1:0d78661:   }
1:0d78661: 
1:0d78661:   public String getName() {
1:0d78661:     return ejbName;
1:0d78661:   }
1:0d78661: 
1:0d78661:   public int getRanking() {
1:0d78661:     return 0;
1:0d78661:   }
1:0d78661: 
1:0d78661:   public Map<String, Object> getServiceProperties() {
1:0d78661:     return serviceProperties;
1:0d78661:   }
1:0d78661: 
1:0d78661:   public int compareTo(WrappedServiceMetadata o) {
1:0d78661:     return ExportedServiceHelper.portableExportedServiceCompareTo(this, o);
1:0d78661:   }
1:0d78661: 
1:0d78661:   @Override
1:0d78661:   public boolean equals (Object o) { 
1:0d78661:     return ExportedServiceHelper.portableExportedServiceEquals(this, o);
1:0d78661:   }
1:0d78661:   
1:0d78661:   
1:0d78661:   @Override
1:0d78661:   public int hashCode() {
1:0d78661:     return ExportedServiceHelper.portableExportedServiceHashCode(this);
1:0d78661:   }
1:0d78661:   
1:0d78661:   @Override 
1:0d78661:   public String toString() { 
1:0d78661:     if (_toString == null) { 
1:0d78661:       _toString = ExportedServiceHelper.generatePortableExportedServiceToString(this);
1:0d78661:     }
1:0d78661:     return _toString;    
1:0d78661:   }
1:0d78661:   
1:0d78661: 
1:0d78661:   public boolean identicalOrDiffersOnlyByName(WrappedServiceMetadata wsmi) {
1:0d78661:    return ExportedServiceHelper.
1:0d78661:         portableExportedServiceIdenticalOrDiffersOnlyByName(this, wsmi);
1:0d78661:   }
1:0d78661: 
1:0d78661: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4134a37
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * This class represents the service exported on behalf of a Session Bean
1:  */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Set up this {@link ExportedService} with the right EJB properties
1:    * @param ejbName
1:    * @param ejbType
1:    * @param interfaceName
1:    * @param remote
1:    */
/////////////////////////////////////////////////////////////////////////
1:     serviceProperties.put("ejb.type", correctCase(ejbType));
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * The ejb.type property is always capitalised first letter, lowercase otherwise
1:    * @param ejbType
1:    * @return
1:    */
1:   private String correctCase(String ejbType) {
1:     String result = ejbType.substring(0, 1).toUpperCase();
1:     result += ejbType.substring(1).toLowerCase();
1:     return result;
1:   }
1: 
commit:0d78661
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.modelling.impl;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.modelling.ExportedService;
1: import org.apache.aries.application.modelling.ModellingConstants;
1: import org.apache.aries.application.modelling.ResourceType;
1: import org.apache.aries.application.modelling.WrappedServiceMetadata;
1: import org.apache.aries.application.utils.service.ExportedServiceHelper;
1: import org.osgi.framework.Constants;
1: 
1: public class EJBServiceExport implements ExportedService {
1: 
1:   private final String interfaceName;
1:   private final String ejbName;
1:   
1:   private final Map<String, Object> _attributes;
1:   
1:   private final Map<String, Object> serviceProperties;
1:   private String _toString;
1:   
1:   public EJBServiceExport(String ejbName, String ejbType, String interfaceName,
1:       boolean remote) {
1:     this.interfaceName = interfaceName;
1:     this.ejbName = ejbName;
1:     
1:     serviceProperties = new HashMap<String, Object>();
1:     serviceProperties.put("ejb.name", ejbName);
0:     serviceProperties.put("ejb.type", ejbType);
1:     if(remote)
1:       serviceProperties.put("service.exported.interfaces", interfaceName);
1:     
1:     _attributes = new HashMap<String, Object>(serviceProperties);
1:     
1:     _attributes.put(Constants.OBJECTCLASS, interfaceName);
1:     _attributes.put (Constants.SERVICE_RANKING, "0");
1:     _attributes.put(ModellingConstants.OBR_SERVICE, ModellingConstants.OBR_SERVICE);
1:   }
1: 
1:   public Map<String, Object> getAttributes() {
1:     return _attributes;
1:   }
1: 
1:   public ResourceType getType() {
1:     return ResourceType.SERVICE;
1:   }
1: 
1:   public Collection<String> getInterfaces() {
1:     
1:     return Arrays.asList(interfaceName);
1:   }
1: 
1:   public String getName() {
1:     return ejbName;
1:   }
1: 
1:   public int getRanking() {
1:     return 0;
1:   }
1: 
1:   public Map<String, Object> getServiceProperties() {
1:     return serviceProperties;
1:   }
1: 
1:   public int compareTo(WrappedServiceMetadata o) {
1:     return ExportedServiceHelper.portableExportedServiceCompareTo(this, o);
1:   }
1: 
1:   @Override
1:   public boolean equals (Object o) { 
1:     return ExportedServiceHelper.portableExportedServiceEquals(this, o);
1:   }
1:   
1:   
1:   @Override
1:   public int hashCode() {
1:     return ExportedServiceHelper.portableExportedServiceHashCode(this);
1:   }
1:   
1:   @Override 
1:   public String toString() { 
1:     if (_toString == null) { 
1:       _toString = ExportedServiceHelper.generatePortableExportedServiceToString(this);
1:     }
1:     return _toString;    
1:   }
1:   
1: 
1:   public boolean identicalOrDiffersOnlyByName(WrappedServiceMetadata wsmi) {
1:    return ExportedServiceHelper.
1:         portableExportedServiceIdenticalOrDiffersOnlyByName(this, wsmi);
1:   }
1: 
1: }
============================================================================