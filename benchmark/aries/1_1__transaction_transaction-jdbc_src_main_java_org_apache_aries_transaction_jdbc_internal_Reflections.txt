1:48ad380: /*
1:48ad380:  * Licensed to the Apache Software Foundation (ASF) under one
1:48ad380:  * or more contributor license agreements.  See the NOTICE file
1:48ad380:  * distributed with this work for additional information
1:48ad380:  * regarding copyright ownership.  The ASF licenses this file
1:48ad380:  * to you under the Apache License, Version 2.0 (the
1:48ad380:  * "License"); you may not use this file except in compliance
1:48ad380:  * with the License.  You may obtain a copy of the License at
1:48ad380:  *
1:48ad380:  *   http://www.apache.org/licenses/LICENSE-2.0
1:48ad380:  *
1:48ad380:  * Unless required by applicable law or agreed to in writing,
1:48ad380:  * software distributed under the License is distributed on an
1:48ad380:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:48ad380:  * KIND, either express or implied.  See the License for the
1:48ad380:  * specific language governing permissions and limitations
1:48ad380:  * under the License.
1:48ad380:  */
1:48ad380: package org.apache.aries.transaction.jdbc.internal;
1:48ad380: 
1:48ad380: import java.lang.reflect.Field;
1:48ad380: import java.security.AccessController;
1:48ad380: import java.security.PrivilegedAction;
1:48ad380: 
1:48ad380: public final class Reflections {
1:48ad380: 
1:48ad380:     private Reflections() {
1:48ad380:         // no-op
1:48ad380:     }
1:48ad380: 
1:48ad380:     public static Object get(final Object instance, String field) {
1:48ad380:         Class<?> clazz = instance.getClass();
1:48ad380:         while (clazz != null) {
1:48ad380:             try {
1:48ad380:                 final Field f = clazz.getDeclaredField(field);
1:48ad380:                 final boolean acc = f.isAccessible();
1:48ad380:                 return AccessController.doPrivileged(new PrivilegedAction<Object>() {
1:48ad380:                     @Override
1:48ad380:                     public Object run() {
1:48ad380:                         f.setAccessible(true);
1:48ad380:                         try {
1:48ad380:                             return f.get(instance);
1:48ad380:                         } catch (IllegalAccessException ex) {
1:48ad380:                             throw new IllegalArgumentException(ex);
1:48ad380:                         } finally {
1:48ad380:                             f.setAccessible(acc);
1:48ad380:                         }
1:48ad380:                     }
1:48ad380:                 });
1:48ad380:             } catch (NoSuchFieldException nsfe) {
1:48ad380:                 // no-op
1:48ad380:             }
1:48ad380: 
1:48ad380:             clazz = clazz.getSuperclass();
1:48ad380:         }
1:48ad380:         throw new RuntimeException(new NoSuchFieldException(field));
1:48ad380:     }
1:48ad380: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:48ad380
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.jdbc.internal;
1: 
1: import java.lang.reflect.Field;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
1: public final class Reflections {
1: 
1:     private Reflections() {
1:         // no-op
1:     }
1: 
1:     public static Object get(final Object instance, String field) {
1:         Class<?> clazz = instance.getClass();
1:         while (clazz != null) {
1:             try {
1:                 final Field f = clazz.getDeclaredField(field);
1:                 final boolean acc = f.isAccessible();
1:                 return AccessController.doPrivileged(new PrivilegedAction<Object>() {
1:                     @Override
1:                     public Object run() {
1:                         f.setAccessible(true);
1:                         try {
1:                             return f.get(instance);
1:                         } catch (IllegalAccessException ex) {
1:                             throw new IllegalArgumentException(ex);
1:                         } finally {
1:                             f.setAccessible(acc);
1:                         }
1:                     }
1:                 });
1:             } catch (NoSuchFieldException nsfe) {
1:                 // no-op
1:             }
1: 
1:             clazz = clazz.getSuperclass();
1:         }
1:         throw new RuntimeException(new NoSuchFieldException(field));
1:     }
1: }
============================================================================