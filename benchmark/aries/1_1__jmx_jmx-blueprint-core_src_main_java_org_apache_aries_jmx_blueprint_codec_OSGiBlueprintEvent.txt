1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.codec;
1:fdf3952: 
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintStateMBean;
1:fdf3952: import org.osgi.service.blueprint.container.BlueprintEvent;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * This class represents the CODEC for the composite data representing a OSGi
1:fdf3952:  * <link>BlueprintEvent</link>
1:fdf3952:  * <p>
1:fdf3952:  * It serves as both the documentation of the type structure and as the
1:fdf3952:  * codification of the mechanism to convert to/from the CompositeData.
1:fdf3952:  * <p>
1:fdf3952:  * The structure of the composite data is:
1:fdf3952:  * <table border="1">
1:fdf3952:  * <tr>
1:fdf3952:  * <td>bundleId</td>
1:fdf3952:  * <td>long</td>
1:fdf3952:  * </tr>
1:fdf3952:  * <tr>
1:fdf3952:  * <td>extenderBundleId</td>
1:fdf3952:  * <td>long</td>
1:fdf3952:  * </tr>
1:fdf3952:  * <tr>
1:fdf3952:  * <td>eventType</td>
1:fdf3952:  * <td>int</td>
1:fdf3952:  * </tr>
1:fdf3952:  * <tr>
1:fdf3952:  * <td>replay</td>
1:fdf3952:  * <td>boolean</td>
1:fdf3952:  * </tr>
1:fdf3952:  * <tr>
1:fdf3952:  * <td>timestamp</td>
1:fdf3952:  * <td>long</td>
1:fdf3952:  * </tr>
1:fdf3952:  * <tr>
1:fdf3952:  * <td>dependencies</td>
1:fdf3952:  * <td>String[]</td>
1:fdf3952:  * </tr>
1:fdf3952:  * <tr>
1:fdf3952:  * <td>exceptionMessage</td>
1:fdf3952:  * <td>String</td>
1:fdf3952:  * </tr>
1:fdf3952:  * </table>
1:fdf3952:  */
1:fdf3952: 
1:fdf3952: public class OSGiBlueprintEvent implements TransferObject{
1:fdf3952: 
1:fdf3952:     private long bundleId;
1:fdf3952: 
1:fdf3952:     private long extenderBundleId;
1:fdf3952: 
1:fdf3952:     private int eventType;
1:fdf3952: 
1:fdf3952:     private boolean replay;
1:fdf3952: 
1:fdf3952:     private long timestamp;
1:fdf3952: 
1:fdf3952:     private String[] dependencies;
1:fdf3952: 
1:fdf3952:     private String exceptionMessage;
1:fdf3952: 
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Construct an OSGiBlueprintEvent from the supplied <link>BlueprintEvent</link>
1:fdf3952:      *
1:fdf3952:      * @param event
1:fdf3952:      *            - the event to represent
1:fdf3952:      */
1:fdf3952:     public OSGiBlueprintEvent(BlueprintEvent event) {
1:fdf3952:         this(event.getBundle().getBundleId(),
1:fdf3952:                 event.getExtenderBundle().getBundleId(),
1:fdf3952:                 event.getType(),
1:fdf3952:                 event.isReplay(),
1:fdf3952:                 event.getTimestamp(),
1:fdf3952:                 event.getDependencies(),
1:fdf3952:                 (event.getCause() == null) ? null : event.getCause().getMessage());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Construct an OSGiBlueprintEvent from the CompositeData representing the
1:fdf3952:      * event
1:fdf3952:      *
1:fdf3952:      * @param data
1:fdf3952:      *            - the CompositeData representing the event.
1:fdf3952:      */
1:fdf3952:     @SuppressWarnings("boxing")
1:fdf3952:     public OSGiBlueprintEvent(CompositeData data) {
1:fdf3952:         this((Long) data.get(BlueprintStateMBean.BUNDLE_ID),
1:fdf3952:                 (Long) data.get(BlueprintStateMBean.EXTENDER_BUNDLE_ID),
1:fdf3952:                 (Integer) data.get(BlueprintStateMBean.EVENT_TYPE),
1:fdf3952:                 (Boolean) data.get(BlueprintStateMBean.REPLAY),
1:fdf3952:                 (Long) data.get(BlueprintStateMBean.TIMESTAMP),
1:fdf3952:                 (String[]) data.get(BlueprintStateMBean.DEPENDENCIES),
1:fdf3952:                 (String) data.get(BlueprintStateMBean.EXCEPTION_MESSAGE));
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Construct the OSGiBlueprintEvent
1:fdf3952:      *
1:fdf3952:      * @param bundleId
1:fdf3952:      * @param extenderBundleId
1:fdf3952:      * @param eventType
1:fdf3952:      * @param replay
1:fdf3952:      * @param timestamp
1:fdf3952:      * @param dependencies
1:fdf3952:      * @param exceptionMessage
1:fdf3952:      */
1:fdf3952:     public OSGiBlueprintEvent(long bundleId, long extenderBundleId, int eventType, boolean replay, long timestamp, String[] dependencies, String exceptionMessage){
1:fdf3952:         this.bundleId = bundleId;
1:fdf3952:         this.extenderBundleId = extenderBundleId;
1:fdf3952:         this.eventType = eventType;
1:fdf3952:         this.replay = replay;
1:fdf3952:         this.timestamp = timestamp;
1:fdf3952:         this.dependencies = dependencies;
1:fdf3952:         this.exceptionMessage = exceptionMessage;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Answer the receiver encoded as CompositeData
1:fdf3952:      *
1:fdf3952:      * @return the CompositeData encoding of the receiver.
1:fdf3952:      */
1:fdf3952:     @SuppressWarnings("boxing")
1:fdf3952:     public CompositeData asCompositeData() {
1:fdf3952:         Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(BlueprintStateMBean.BUNDLE_ID, bundleId);
1:fdf3952:         items.put(BlueprintStateMBean.EXTENDER_BUNDLE_ID, extenderBundleId);
1:fdf3952:         items.put(BlueprintStateMBean.EVENT_TYPE, eventType);
1:fdf3952:         items.put(BlueprintStateMBean.REPLAY, replay);
1:fdf3952:         items.put(BlueprintStateMBean.TIMESTAMP, timestamp);
1:fdf3952:         items.put(BlueprintStateMBean.DEPENDENCIES, dependencies);
1:fdf3952:         items.put(BlueprintStateMBean.EXCEPTION_MESSAGE, exceptionMessage);
1:fdf3952:         try {
1:fdf3952:             return new CompositeDataSupport(BlueprintStateMBean.OSGI_BLUEPRINT_EVENT_TYPE, items);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new IllegalStateException("Cannot form blueprint event open data", e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long getBundleId() {
1:fdf3952:         return bundleId;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long getExtenderBundleId() {
1:fdf3952:         return extenderBundleId;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public int getEventType() {
1:fdf3952:         return eventType;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public boolean isReplay() {
1:fdf3952:         return replay;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long getTimestamp() {
1:fdf3952:         return timestamp;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String[] getDependencies() {
1:fdf3952:         return dependencies;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getExceptionMessage() {
1:fdf3952:         return exceptionMessage;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.codec;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintStateMBean;
1: import org.osgi.service.blueprint.container.BlueprintEvent;
1: 
1: /**
1:  * <p>
1:  * This class represents the CODEC for the composite data representing a OSGi
1:  * <link>BlueprintEvent</link>
1:  * <p>
1:  * It serves as both the documentation of the type structure and as the
1:  * codification of the mechanism to convert to/from the CompositeData.
1:  * <p>
1:  * The structure of the composite data is:
1:  * <table border="1">
1:  * <tr>
1:  * <td>bundleId</td>
1:  * <td>long</td>
1:  * </tr>
1:  * <tr>
1:  * <td>extenderBundleId</td>
1:  * <td>long</td>
1:  * </tr>
1:  * <tr>
1:  * <td>eventType</td>
1:  * <td>int</td>
1:  * </tr>
1:  * <tr>
1:  * <td>replay</td>
1:  * <td>boolean</td>
1:  * </tr>
1:  * <tr>
1:  * <td>timestamp</td>
1:  * <td>long</td>
1:  * </tr>
1:  * <tr>
1:  * <td>dependencies</td>
1:  * <td>String[]</td>
1:  * </tr>
1:  * <tr>
1:  * <td>exceptionMessage</td>
1:  * <td>String</td>
1:  * </tr>
1:  * </table>
1:  */
1: 
1: public class OSGiBlueprintEvent implements TransferObject{
1: 
1:     private long bundleId;
1: 
1:     private long extenderBundleId;
1: 
1:     private int eventType;
1: 
1:     private boolean replay;
1: 
1:     private long timestamp;
1: 
1:     private String[] dependencies;
1: 
1:     private String exceptionMessage;
1: 
1: 
1:     /**
1:      * Construct an OSGiBlueprintEvent from the supplied <link>BlueprintEvent</link>
1:      *
1:      * @param event
1:      *            - the event to represent
1:      */
1:     public OSGiBlueprintEvent(BlueprintEvent event) {
1:         this(event.getBundle().getBundleId(),
1:                 event.getExtenderBundle().getBundleId(),
1:                 event.getType(),
1:                 event.isReplay(),
1:                 event.getTimestamp(),
1:                 event.getDependencies(),
1:                 (event.getCause() == null) ? null : event.getCause().getMessage());
1:     }
1: 
1:     /**
1:      * Construct an OSGiBlueprintEvent from the CompositeData representing the
1:      * event
1:      *
1:      * @param data
1:      *            - the CompositeData representing the event.
1:      */
1:     @SuppressWarnings("boxing")
1:     public OSGiBlueprintEvent(CompositeData data) {
1:         this((Long) data.get(BlueprintStateMBean.BUNDLE_ID),
1:                 (Long) data.get(BlueprintStateMBean.EXTENDER_BUNDLE_ID),
1:                 (Integer) data.get(BlueprintStateMBean.EVENT_TYPE),
1:                 (Boolean) data.get(BlueprintStateMBean.REPLAY),
1:                 (Long) data.get(BlueprintStateMBean.TIMESTAMP),
1:                 (String[]) data.get(BlueprintStateMBean.DEPENDENCIES),
1:                 (String) data.get(BlueprintStateMBean.EXCEPTION_MESSAGE));
1:     }
1: 
1:     /**
1:      * Construct the OSGiBlueprintEvent
1:      *
1:      * @param bundleId
1:      * @param extenderBundleId
1:      * @param eventType
1:      * @param replay
1:      * @param timestamp
1:      * @param dependencies
1:      * @param exceptionMessage
1:      */
1:     public OSGiBlueprintEvent(long bundleId, long extenderBundleId, int eventType, boolean replay, long timestamp, String[] dependencies, String exceptionMessage){
1:         this.bundleId = bundleId;
1:         this.extenderBundleId = extenderBundleId;
1:         this.eventType = eventType;
1:         this.replay = replay;
1:         this.timestamp = timestamp;
1:         this.dependencies = dependencies;
1:         this.exceptionMessage = exceptionMessage;
1:     }
1: 
1:     /**
1:      * Answer the receiver encoded as CompositeData
1:      *
1:      * @return the CompositeData encoding of the receiver.
1:      */
1:     @SuppressWarnings("boxing")
1:     public CompositeData asCompositeData() {
1:         Map<String, Object> items = new HashMap<String, Object>();
1:         items.put(BlueprintStateMBean.BUNDLE_ID, bundleId);
1:         items.put(BlueprintStateMBean.EXTENDER_BUNDLE_ID, extenderBundleId);
1:         items.put(BlueprintStateMBean.EVENT_TYPE, eventType);
1:         items.put(BlueprintStateMBean.REPLAY, replay);
1:         items.put(BlueprintStateMBean.TIMESTAMP, timestamp);
1:         items.put(BlueprintStateMBean.DEPENDENCIES, dependencies);
1:         items.put(BlueprintStateMBean.EXCEPTION_MESSAGE, exceptionMessage);
1:         try {
1:             return new CompositeDataSupport(BlueprintStateMBean.OSGI_BLUEPRINT_EVENT_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Cannot form blueprint event open data", e);
1:         }
1:     }
1: 
1:     public long getBundleId() {
1:         return bundleId;
1:     }
1: 
1:     public long getExtenderBundleId() {
1:         return extenderBundleId;
1:     }
1: 
1:     public int getEventType() {
1:         return eventType;
1:     }
1: 
1:     public boolean isReplay() {
1:         return replay;
1:     }
1: 
1:     public long getTimestamp() {
1:         return timestamp;
1:     }
1: 
1:     public String[] getDependencies() {
1:         return dependencies;
1:     }
1: 
1:     public String getExceptionMessage() {
1:         return exceptionMessage;
1:     }
1: 
1: 
1: }
============================================================================