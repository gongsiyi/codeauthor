1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:4c0430e: package org.apache.aries.tx.control.jpa.xa.impl;
2:4c0430e: 
1:74e23ff: import static org.junit.Assert.assertEquals;
1:4c0430e: import static org.mockito.Mockito.times;
1:4c0430e: import static org.mockito.Mockito.withSettings;
1:4c0430e: import static org.osgi.service.transaction.control.TransactionStatus.ACTIVE;
1:74e23ff: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTED;
1:4c0430e: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1:4c0430e: 
1:4c0430e: import java.sql.Connection;
1:4c0430e: import java.sql.SQLException;
1:4c0430e: import java.util.HashMap;
1:4c0430e: import java.util.Map;
1:4c0430e: import java.util.UUID;
1:74e23ff: import java.util.function.Consumer;
1:4c0430e: 
1:4c0430e: import javax.persistence.EntityManager;
1:4c0430e: import javax.persistence.EntityManagerFactory;
1:4c0430e: import javax.sql.XAConnection;
1:4c0430e: import javax.transaction.xa.XAResource;
1:4c0430e: 
1:4c0430e: import org.apache.aries.tx.control.jdbc.xa.connection.impl.XAConnectionWrapper;
1:4c0430e: import org.junit.Before;
1:4c0430e: import org.junit.Test;
1:4c0430e: import org.junit.runner.RunWith;
1:74e23ff: import org.mockito.ArgumentCaptor;
1:4c0430e: import org.mockito.Mock;
1:4c0430e: import org.mockito.Mockito;
1:4c0430e: import org.mockito.runners.MockitoJUnitRunner;
1:4c0430e: import org.osgi.service.transaction.control.TransactionContext;
1:4c0430e: import org.osgi.service.transaction.control.TransactionControl;
1:4c0430e: import org.osgi.service.transaction.control.TransactionException;
1:74e23ff: import org.osgi.service.transaction.control.TransactionStatus;
1:4c0430e: 
1:4c0430e: @RunWith(MockitoJUnitRunner.class)
1:4c0430e: public class XATxContextBindingEntityManagerTest {
1:4c0430e: 
1:4c0430e: 	@Mock
1:4c0430e: 	TransactionControl control;
1:4c0430e: 	
1:4c0430e: 	@Mock
1:4c0430e: 	TransactionContext context;
1:4c0430e: 	
1:4c0430e: 	@Mock
1:4c0430e: 	EntityManagerFactory emf;
1:4c0430e: 	
1:4c0430e: 	@Mock
1:4c0430e: 	EntityManager rawEm;
1:4c0430e: 
1:4c0430e: 	@Mock
1:4c0430e: 	XAResource xaResource;
1:4c0430e: 
1:4c0430e: 	Map<Object, Object> variables = new HashMap<>();
1:4c0430e: 	
1:4c0430e: 	UUID id = UUID.randomUUID();
1:4c0430e: 	
1:4c0430e: 	XATxContextBindingEntityManager em;
1:4c0430e: 	
1:74e23ff: 	ThreadLocal<TransactionControl> commonTxControl = new ThreadLocal<>();
1:74e23ff: 	
1:4c0430e: 	@Before
1:4c0430e: 	public void setUp() throws SQLException {
1:4c0430e: 		Mockito.when(emf.createEntityManager()).thenReturn(rawEm).thenReturn(null);
1:4c0430e: 		
1:4c0430e: 		Mockito.doAnswer(i -> variables.put(i.getArguments()[0], i.getArguments()[1]))
1:4c0430e: 			.when(context).putScopedValue(Mockito.any(), Mockito.any());
1:4c0430e: 		Mockito.when(context.getScopedValue(Mockito.any()))
1:4c0430e: 			.thenAnswer(i -> variables.get(i.getArguments()[0]));
1:4c0430e: 		
1:74e23ff: 		em = new XATxContextBindingEntityManager(control, emf, id, commonTxControl);
1:4c0430e: 	}
1:4c0430e: 	
1:4c0430e: 	private void setupNoTransaction() {
1:4c0430e: 		Mockito.when(control.getCurrentContext()).thenReturn(context);
1:4c0430e: 		Mockito.when(context.getTransactionStatus()).thenReturn(NO_TRANSACTION);
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	private void setupActiveTransaction() {
1:4c0430e: 		Mockito.when(control.getCurrentContext()).thenReturn(context);
1:4c0430e: 		Mockito.when(context.supportsXA()).thenReturn(true);
1:4c0430e: 		Mockito.when(context.getTransactionStatus()).thenReturn(ACTIVE);
1:4c0430e: 	}
1:4c0430e: 	
1:4c0430e: 	
1:4c0430e: 	@Test(expected=TransactionException.class)
1:4c0430e: 	public void testUnscoped() throws SQLException {
1:4c0430e: 		em.isOpen();
1:4c0430e: 	}
1:4c0430e: 
1:74e23ff: 	@Test
1:4c0430e: 	public void testNoTransaction() throws SQLException {
1:4c0430e: 		setupNoTransaction();
1:74e23ff: 		
1:4c0430e: 		em.isOpen();
1:4c0430e: 		em.isOpen();
1:4c0430e: 		
1:4c0430e: 		Mockito.verify(rawEm, times(2)).isOpen();
1:4c0430e: 		Mockito.verify(rawEm, times(0)).getTransaction();
1:47a70d3: 		Mockito.verify(context, times(0)).registerXAResource(Mockito.any(), Mockito.anyString());
1:4c0430e: 		
1:74e23ff: 		checkPostCompletion(null);
1:74e23ff: 	}
1:74e23ff: 
1:74e23ff: 	private void checkPostCompletion(TransactionControl expectedAfter) {
1:74e23ff: 		@SuppressWarnings({ "rawtypes", "unchecked" })
1:74e23ff: 		ArgumentCaptor<Consumer<TransactionStatus>> captor = 
1:74e23ff: 				(ArgumentCaptor)ArgumentCaptor.forClass(Consumer.class);
1:74e23ff: 		Mockito.verify(context).postCompletion(captor.capture());
1:74e23ff: 		
1:74e23ff: 		captor.getValue().accept(COMMITTED);
1:74e23ff: 		
1:74e23ff: 		assertEquals(expectedAfter, commonTxControl.get());
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Test
1:4c0430e: 	public void testActiveTransactionStraightXAConnection() throws SQLException {
1:4c0430e: 		
1:4c0430e: 		Connection con = Mockito.mock(Connection.class, withSettings().extraInterfaces(XAConnection.class));
1:4c0430e: 		Mockito.when(((XAConnection)con).getXAResource()).thenReturn(xaResource);
1:4c0430e: 		
1:4c0430e: 		Mockito.when(rawEm.unwrap(Connection.class)).thenReturn(con);
1:4c0430e: 		
1:4c0430e: 		setupActiveTransaction();
1:4c0430e: 		
1:4c0430e: 		em.isOpen();
1:4c0430e: 		em.isOpen();
1:4c0430e: 		
1:4c0430e: 		Mockito.verify(rawEm, times(2)).isOpen();
1:4c0430e: 		Mockito.verify(rawEm).joinTransaction();
1:4c0430e: 		
1:74e23ff: 		checkPostCompletion(null);
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Test
1:4c0430e: 	public void testActiveTransactionWrappedXAConnection() throws SQLException {
1:4c0430e: 		
1:4c0430e: 		XAConnection con = Mockito.mock(XAConnection.class);
1:4c0430e: 		Connection raw = Mockito.mock(Connection.class);
1:4c0430e: 		Mockito.when(con.getXAResource()).thenReturn(xaResource);
1:4c0430e: 		Mockito.when(con.getConnection()).thenReturn(raw);
1:4c0430e: 		
1:4c0430e: 		XAConnectionWrapper value = new XAConnectionWrapper(con);
1:4c0430e: 		
1:4c0430e: 		Mockito.when(rawEm.unwrap(Connection.class)).thenReturn(value);
1:4c0430e: 		
1:4c0430e: 		setupActiveTransaction();
1:4c0430e: 		
1:4c0430e: 		em.isOpen();
1:4c0430e: 		em.isOpen();
1:4c0430e: 		
1:4c0430e: 		Mockito.verify(rawEm, times(2)).isOpen();
1:4c0430e: 		Mockito.verify(rawEm).joinTransaction();
1:4c0430e: 		
1:74e23ff: 		checkPostCompletion(null);
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Test
1:4c0430e: 	public void testActiveTransactionUnwrappableXAConnection() throws SQLException {
1:4c0430e: 		
1:4c0430e: 		XAConnection xaCon = Mockito.mock(XAConnection.class);
1:4c0430e: 		Mockito.when(xaCon.getXAResource()).thenReturn(xaResource);
1:4c0430e: 		Connection con = Mockito.mock(Connection.class);
1:4c0430e: 		Mockito.when(con.unwrap(XAConnection.class)).thenReturn(xaCon);
1:4c0430e: 		Mockito.when(con.isWrapperFor(XAConnection.class)).thenReturn(true);
1:4c0430e: 		
1:4c0430e: 		Mockito.when(rawEm.unwrap(Connection.class)).thenReturn(con);
1:4c0430e: 		
1:4c0430e: 		setupActiveTransaction();
1:4c0430e: 		
1:4c0430e: 		em.isOpen();
1:4c0430e: 		em.isOpen();
1:4c0430e: 		
1:4c0430e: 		Mockito.verify(rawEm, times(2)).isOpen();
1:4c0430e: 		Mockito.verify(rawEm).joinTransaction();
1:4c0430e: 		
1:74e23ff: 		checkPostCompletion(null);
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Test
1:4c0430e: 	public void testActiveTransactionUnwrappableXAConnectionWrapper() throws SQLException {
1:4c0430e: 		
1:4c0430e: 		XAConnection xaCon = Mockito.mock(XAConnection.class);
1:4c0430e: 		Mockito.when(xaCon.getXAResource()).thenReturn(xaResource);
1:4c0430e: 		Connection con = Mockito.mock(Connection.class);
1:4c0430e: 		XAConnectionWrapper toReturn = new XAConnectionWrapper(xaCon);
1:4c0430e: 		Mockito.when(con.unwrap(XAConnectionWrapper.class)).thenReturn(toReturn);
1:4c0430e: 		Mockito.when(con.isWrapperFor(XAConnectionWrapper.class)).thenReturn(true);
1:4c0430e: 		
1:4c0430e: 		Mockito.when(rawEm.unwrap(Connection.class)).thenReturn(con);
1:4c0430e: 		
1:4c0430e: 		setupActiveTransaction();
1:4c0430e: 		
1:4c0430e: 		em.isOpen();
1:4c0430e: 		em.isOpen();
1:4c0430e: 		
1:4c0430e: 		Mockito.verify(rawEm, times(2)).isOpen();
1:4c0430e: 		Mockito.verify(rawEm).joinTransaction();
1:4c0430e: 		
1:74e23ff: 		checkPostCompletion(null);
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Test(expected=TransactionException.class)
1:4c0430e: 	public void testActiveTransactionNoXA() throws SQLException {
1:4c0430e: 		setupActiveTransaction();
1:4c0430e: 		
1:4c0430e: 		Mockito.when(context.supportsXA()).thenReturn(false);
1:4c0430e: 		em.isOpen();
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Test
1:74e23ff: 	public void testActiveTransactionWithPreviousCommonTxControl() throws SQLException {
1:74e23ff: 		
1:74e23ff: 		TransactionControl previous = Mockito.mock(TransactionControl.class);
1:74e23ff: 		Connection con = Mockito.mock(Connection.class, withSettings().extraInterfaces(XAConnection.class));
1:74e23ff: 		Mockito.when(((XAConnection)con).getXAResource()).thenReturn(xaResource);
1:74e23ff: 		
1:74e23ff: 		Mockito.when(rawEm.unwrap(Connection.class)).thenReturn(con);
1:74e23ff: 		
1:74e23ff: 		setupActiveTransaction();
1:74e23ff: 		commonTxControl.set(previous);
1:74e23ff: 		
1:74e23ff: 		em.isOpen();
1:74e23ff: 		em.isOpen();
1:74e23ff: 		
1:74e23ff: 		Mockito.verify(rawEm, times(2)).isOpen();
1:74e23ff: 		Mockito.verify(rawEm).joinTransaction();
1:4c0430e: 		
1:74e23ff: 		checkPostCompletion(previous);
1:74e23ff: 	}
1:4c0430e: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:74e23ff
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTED;
/////////////////////////////////////////////////////////////////////////
1: import java.util.function.Consumer;
/////////////////////////////////////////////////////////////////////////
1: import org.mockito.ArgumentCaptor;
1: import org.osgi.service.transaction.control.TransactionStatus;
/////////////////////////////////////////////////////////////////////////
1: 	ThreadLocal<TransactionControl> commonTxControl = new ThreadLocal<>();
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		em = new XATxContextBindingEntityManager(control, emf, id, commonTxControl);
/////////////////////////////////////////////////////////////////////////
1: 		checkPostCompletion(null);
1: 	}
1: 
1: 	private void checkPostCompletion(TransactionControl expectedAfter) {
1: 		@SuppressWarnings({ "rawtypes", "unchecked" })
1: 		ArgumentCaptor<Consumer<TransactionStatus>> captor = 
1: 				(ArgumentCaptor)ArgumentCaptor.forClass(Consumer.class);
1: 		Mockito.verify(context).postCompletion(captor.capture());
1: 		
1: 		captor.getValue().accept(COMMITTED);
1: 		
1: 		assertEquals(expectedAfter, commonTxControl.get());
/////////////////////////////////////////////////////////////////////////
1: 		checkPostCompletion(null);
/////////////////////////////////////////////////////////////////////////
1: 		checkPostCompletion(null);
/////////////////////////////////////////////////////////////////////////
1: 		checkPostCompletion(null);
/////////////////////////////////////////////////////////////////////////
1: 		checkPostCompletion(null);
/////////////////////////////////////////////////////////////////////////
1: 	@Test
1: 	public void testActiveTransactionWithPreviousCommonTxControl() throws SQLException {
1: 		
1: 		TransactionControl previous = Mockito.mock(TransactionControl.class);
1: 		Connection con = Mockito.mock(Connection.class, withSettings().extraInterfaces(XAConnection.class));
1: 		Mockito.when(((XAConnection)con).getXAResource()).thenReturn(xaResource);
1: 		
1: 		Mockito.when(rawEm.unwrap(Connection.class)).thenReturn(con);
1: 		
1: 		setupActiveTransaction();
1: 		commonTxControl.set(previous);
1: 		
1: 		em.isOpen();
1: 		em.isOpen();
1: 		
1: 		Mockito.verify(rawEm, times(2)).isOpen();
1: 		Mockito.verify(rawEm).joinTransaction();
1: 		
1: 		checkPostCompletion(previous);
1: 	}
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: 		Mockito.verify(context, times(0)).registerXAResource(Mockito.any(), Mockito.anyString());
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:4c0430e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.xa.impl;
1: 
1: 
1: import static org.mockito.Mockito.times;
1: import static org.mockito.Mockito.withSettings;
1: import static org.osgi.service.transaction.control.TransactionStatus.ACTIVE;
1: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.UUID;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: import javax.sql.XAConnection;
1: import javax.transaction.xa.XAResource;
1: 
1: import org.apache.aries.tx.control.jdbc.xa.connection.impl.XAConnectionWrapper;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.mockito.Mock;
1: import org.mockito.Mockito;
1: import org.mockito.runners.MockitoJUnitRunner;
1: import org.osgi.service.transaction.control.TransactionContext;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionException;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: public class XATxContextBindingEntityManagerTest {
1: 
1: 	@Mock
1: 	TransactionControl control;
1: 	
1: 	@Mock
1: 	TransactionContext context;
1: 	
1: 	@Mock
1: 	EntityManagerFactory emf;
1: 	
1: 	@Mock
1: 	EntityManager rawEm;
1: 
1: 	@Mock
1: 	XAResource xaResource;
1: 
1: 	Map<Object, Object> variables = new HashMap<>();
1: 	
1: 	UUID id = UUID.randomUUID();
1: 	
1: 	XATxContextBindingEntityManager em;
1: 	
1: 	@Before
1: 	public void setUp() throws SQLException {
1: 		Mockito.when(emf.createEntityManager()).thenReturn(rawEm).thenReturn(null);
1: 		
1: 		Mockito.doAnswer(i -> variables.put(i.getArguments()[0], i.getArguments()[1]))
1: 			.when(context).putScopedValue(Mockito.any(), Mockito.any());
1: 		Mockito.when(context.getScopedValue(Mockito.any()))
1: 			.thenAnswer(i -> variables.get(i.getArguments()[0]));
1: 		
0: 		em = new XATxContextBindingEntityManager(control, emf, id);
1: 	}
1: 	
1: 	private void setupNoTransaction() {
1: 		Mockito.when(control.getCurrentContext()).thenReturn(context);
1: 		Mockito.when(context.getTransactionStatus()).thenReturn(NO_TRANSACTION);
1: 	}
1: 
1: 	private void setupActiveTransaction() {
1: 		Mockito.when(control.getCurrentContext()).thenReturn(context);
1: 		Mockito.when(context.supportsXA()).thenReturn(true);
1: 		Mockito.when(context.getTransactionStatus()).thenReturn(ACTIVE);
1: 	}
1: 	
1: 	
1: 	@Test(expected=TransactionException.class)
1: 	public void testUnscoped() throws SQLException {
1: 		em.isOpen();
1: 	}
1: 
1: 	@Test
1: 	public void testNoTransaction() throws SQLException {
1: 		setupNoTransaction();
1: 		
1: 		em.isOpen();
1: 		em.isOpen();
1: 		
1: 		Mockito.verify(rawEm, times(2)).isOpen();
1: 		Mockito.verify(rawEm, times(0)).getTransaction();
0: 		Mockito.verify(context, times(0)).registerXAResource(Mockito.any());
1: 		
0: 		Mockito.verify(context).postCompletion(Mockito.any());
1: 	}
1: 
1: 	@Test
1: 	public void testActiveTransactionStraightXAConnection() throws SQLException {
1: 		
1: 		Connection con = Mockito.mock(Connection.class, withSettings().extraInterfaces(XAConnection.class));
1: 		Mockito.when(((XAConnection)con).getXAResource()).thenReturn(xaResource);
1: 		
1: 		Mockito.when(rawEm.unwrap(Connection.class)).thenReturn(con);
1: 		
1: 		setupActiveTransaction();
1: 		
1: 		em.isOpen();
1: 		em.isOpen();
1: 		
1: 		Mockito.verify(rawEm, times(2)).isOpen();
1: 		Mockito.verify(rawEm).joinTransaction();
1: 		
0: 		Mockito.verify(context).postCompletion(Mockito.any());
1: 	}
1: 
1: 	@Test
1: 	public void testActiveTransactionWrappedXAConnection() throws SQLException {
1: 		
1: 		XAConnection con = Mockito.mock(XAConnection.class);
1: 		Connection raw = Mockito.mock(Connection.class);
1: 		Mockito.when(con.getXAResource()).thenReturn(xaResource);
1: 		Mockito.when(con.getConnection()).thenReturn(raw);
1: 		
1: 		XAConnectionWrapper value = new XAConnectionWrapper(con);
1: 		
1: 		Mockito.when(rawEm.unwrap(Connection.class)).thenReturn(value);
1: 		
1: 		setupActiveTransaction();
1: 		
1: 		em.isOpen();
1: 		em.isOpen();
1: 		
1: 		Mockito.verify(rawEm, times(2)).isOpen();
1: 		Mockito.verify(rawEm).joinTransaction();
1: 		
0: 		Mockito.verify(context).postCompletion(Mockito.any());
1: 	}
1: 
1: 	@Test
1: 	public void testActiveTransactionUnwrappableXAConnection() throws SQLException {
1: 		
1: 		XAConnection xaCon = Mockito.mock(XAConnection.class);
1: 		Mockito.when(xaCon.getXAResource()).thenReturn(xaResource);
1: 		Connection con = Mockito.mock(Connection.class);
1: 		Mockito.when(con.unwrap(XAConnection.class)).thenReturn(xaCon);
1: 		Mockito.when(con.isWrapperFor(XAConnection.class)).thenReturn(true);
1: 		
1: 		Mockito.when(rawEm.unwrap(Connection.class)).thenReturn(con);
1: 		
1: 		setupActiveTransaction();
1: 		
1: 		em.isOpen();
1: 		em.isOpen();
1: 		
1: 		Mockito.verify(rawEm, times(2)).isOpen();
1: 		Mockito.verify(rawEm).joinTransaction();
1: 		
0: 		Mockito.verify(context).postCompletion(Mockito.any());
1: 	}
1: 
1: 	@Test
1: 	public void testActiveTransactionUnwrappableXAConnectionWrapper() throws SQLException {
1: 		
1: 		XAConnection xaCon = Mockito.mock(XAConnection.class);
1: 		Mockito.when(xaCon.getXAResource()).thenReturn(xaResource);
1: 		Connection con = Mockito.mock(Connection.class);
1: 		XAConnectionWrapper toReturn = new XAConnectionWrapper(xaCon);
1: 		Mockito.when(con.unwrap(XAConnectionWrapper.class)).thenReturn(toReturn);
1: 		Mockito.when(con.isWrapperFor(XAConnectionWrapper.class)).thenReturn(true);
1: 		
1: 		Mockito.when(rawEm.unwrap(Connection.class)).thenReturn(con);
1: 		
1: 		setupActiveTransaction();
1: 		
1: 		em.isOpen();
1: 		em.isOpen();
1: 		
1: 		Mockito.verify(rawEm, times(2)).isOpen();
1: 		Mockito.verify(rawEm).joinTransaction();
1: 		
0: 		Mockito.verify(context).postCompletion(Mockito.any());
1: 	}
1: 
1: 	@Test(expected=TransactionException.class)
1: 	public void testActiveTransactionNoXA() throws SQLException {
1: 		setupActiveTransaction();
1: 		
1: 		Mockito.when(context.supportsXA()).thenReturn(false);
1: 		em.isOpen();
1: 	}
1: 
1: }
============================================================================