1:7341d98: /*
1:7341d98:  * Licensed to the Apache Software Foundation (ASF) under one
1:7341d98:  * or more contributor license agreements.  See the NOTICE file
1:7341d98:  * distributed with this work for additional information
1:7341d98:  * regarding copyright ownership.  The ASF licenses this file
1:7341d98:  * to you under the Apache License, Version 2.0 (the
1:7341d98:  * "License"); you may not use this file except in compliance
1:7341d98:  * with the License.  You may obtain a copy of the License at
1:7341d98:  *
1:7341d98:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7341d98:  *
1:7341d98:  * Unless required by applicable law or agreed to in writing,
1:7341d98:  * software distributed under the License is distributed on an
1:7341d98:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7341d98:  * KIND, either express or implied.  See the License for the
1:7341d98:  * specific language governing permissions and limitations
1:7341d98:  * under the License.
1:7341d98:  */
1:7341d98: package org.apache.aries.util.nls;
10:7341d98: 
1:7341d98: import java.security.AccessController;
1:7341d98: import java.security.PrivilegedAction;
1:7341d98: import java.text.MessageFormat;
1:7341d98: import java.util.Locale;
1:7341d98: import java.util.MissingResourceException;
1:7341d98: import java.util.ResourceBundle;
1:7341d98: 
1:a0ebbc7: import org.apache.aries.util.AriesFrameworkUtil;
1:7341d98: import org.osgi.framework.Bundle;
1:7341d98: import org.osgi.framework.FrameworkUtil;
1:7341d98: 
1:7341d98: /**
1:7341d98:  * This is a helper class for loading messages for logging and exception messages. It supports translating the message into the
1:7341d98:  * default Locale. It works out the calling Bundle and uses it to load any resources. If the resource bundle is of type
1:7341d98:  * java.properties then it tries to find the bundle first via the bundle getResources method, then via the getEntry method. If it
1:7341d98:  * is of type java.class then it'll use the bundle to load the class.
1:7341d98:  */
1:7341d98: public final class MessageUtil
4:7341d98: {
1:7341d98:   /** The resource bundle used to translate messages */
1:a0ebbc7:   private final ResourceBundle messages;
1:7341d98:   private static final StackFinder finder;
1:7341d98: 
1:7341d98:   /** 
1:7341d98:    * One of the static methods needs to obtain the caller, so we cheat and use a SecurityManager to get the 
1:7341d98:    * classes on the stack.
1:7341d98:    */
1:7341d98:   private static class StackFinder extends SecurityManager
1:7341d98:   {
2:7341d98:     @Override
1:7341d98:     public Class<?>[] getClassContext()
1:7341d98:     {
1:7341d98:       return super.getClassContext();
9:7341d98:     }
1:7341d98:   }
1:7341d98:   
1:7341d98:   static 
1:7341d98:   {
1:7341d98:     finder = AccessController.doPrivileged(new PrivilegedAction<StackFinder>() {
1:7341d98:       public StackFinder run()
1:7341d98:       {
1:7341d98:         return new StackFinder();
1:7341d98:       }
4:7341d98:     });
1:7341d98:   }
1:7341d98: 
1:7341d98:   private MessageUtil(ResourceBundle b)
1:7341d98:   {
1:7341d98:     messages = b;
1:7341d98:   }
1:7341d98: 
1:7341d98:   /**
1:7341d98:    * This method translates the message and puts the inserts into the message before returning it.
1:7341d98:    * If the message key does not exist then the key itself is returned.
1:7341d98:    * 
1:7341d98:    * @param key     the message key.
1:7341d98:    * @param inserts the inserts into the resolved message.
1:7341d98:    * @return the message in the correct language, or the key if the message does not exist.
1:7341d98:    */
1:7341d98:   public String getMessage(String key, Object ... inserts)
1:7341d98:   {
1:7341d98:     String message;
1:7341d98: 
2:7341d98:     try {
1:7341d98:       message = messages.getString(key);
1:7341d98: 
1:7341d98:       if (inserts != null && inserts.length > 0) {
1:7341d98:         message = MessageFormat.format(message, inserts);
1:7341d98:       }
1:7341d98:     } catch (MissingResourceException e) {
1:7341d98:       message = key;
1:7341d98:     }
1:7341d98: 
1:7341d98:     return message;
1:7341d98:   }
1:7341d98: 
1:7341d98:   /**
1:7341d98:    * Loads the MessageUtil using the given context. It resolves the Class to an OSGi bundle.
1:7341d98:    * 
1:7341d98:    * @param context  the bundle this class is in will be used to resolve the base name.
1:7341d98:    * @param baseName the resource bundle base name
1:7341d98:    * @return the message util instance.
1:7341d98:    * @throws MissingResourceException If the resource bundle cannot be located
1:7341d98:    */
1:7341d98:   public static MessageUtil createMessageUtil(Class<?> context, String baseName)
1:7341d98:   {
1:7341d98:     return createMessageUtil(FrameworkUtil.getBundle(context), baseName);
1:7341d98:   }
1:7341d98: 
1:7341d98:   /**
1:7341d98:    * This method uses the Bundle associated with the caller of this method.
1:7341d98:    * 
1:7341d98:    * @param baseName the resource bundle base name
1:7341d98:    * @return the message util instance.
1:7341d98:    * @throws MissingResourceException If the resource bundle cannot be located
1:7341d98:    */
1:7341d98:   public static MessageUtil createMessageUtil(String baseName)
1:7341d98:   {
1:7341d98:     Class<?>[] stack = finder.getClassContext();
1:7341d98: 
1:7341d98:     for (Class<?> clazz : stack) {
1:7341d98:       if (clazz != MessageUtil.class) {
1:7341d98:         return createMessageUtil(clazz, baseName);
1:7341d98:       }
1:7341d98:     }
1:7341d98: 
1:7341d98:     throw new MissingResourceException(org.apache.aries.util.internal.MessageUtil.getMessage("UTIL0014E", baseName), baseName, null);
1:7341d98:   }
1:7341d98: 
1:7341d98:   /**
1:7341d98:    * This method loads the resource bundle backing the MessageUtil from the provided Bundle.
1:7341d98:    * 
1:7341d98:    * @param b        the bundle to load the resource bundle from
1:7341d98:    * @param baseName the resource bundle base name
1:7341d98:    * @return the message util instance.
1:7341d98:    * @throws MissingResourceException If the resource bundle cannot be located
1:7341d98:    */
1:7341d98:   public static MessageUtil createMessageUtil(final Bundle b, String baseName)
1:7341d98:   {
1:7341d98:     ResourceBundle rb;
1:7341d98:     
1:7341d98:     if (b == null) {
1:7341d98:       // if the bundle is null we are probably outside of OSGi, so just use non-OSGi resolve rules.
1:7341d98:       rb = ResourceBundle.getBundle(baseName);
4:7341d98:     } else {
1:a0ebbc7:       // if the bundle is OSGi use OSGi resolve rules as best as Java5 allows
1:489614e:       ClassLoader loader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
1:489614e:         public ClassLoader run() {
1:489614e:             return AriesFrameworkUtil.getClassLoader(b);
1:489614e:         }          
1:489614e:       }); 
1:489614e:       rb = ResourceBundle.getBundle(baseName, Locale.getDefault(), loader);
1:7341d98:     }
1:7341d98:     
1:7341d98:     return new MessageUtil(rb);
1:7341d98:   }
1:7341d98: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:489614e
/////////////////////////////////////////////////////////////////////////
1:       ClassLoader loader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
1:         public ClassLoader run() {
1:             return AriesFrameworkUtil.getClassLoader(b);
1:         }          
1:       }); 
1:       rb = ResourceBundle.getBundle(baseName, Locale.getDefault(), loader);
commit:a0ebbc7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.AriesFrameworkUtil;
/////////////////////////////////////////////////////////////////////////
1:   private final ResourceBundle messages;
/////////////////////////////////////////////////////////////////////////
1:       // if the bundle is OSGi use OSGi resolve rules as best as Java5 allows
0:       rb = ResourceBundle.getBundle(baseName, Locale.getDefault(), AriesFrameworkUtil.getClassLoader(b));
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:7341d98
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util.nls;
1: 
0: import java.io.IOException;
0: import java.net.URL;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.text.MessageFormat;
0: import java.util.ListResourceBundle;
1: import java.util.Locale;
1: import java.util.MissingResourceException;
0: import java.util.PropertyResourceBundle;
1: import java.util.ResourceBundle;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.FrameworkUtil;
1: 
1: /**
1:  * This is a helper class for loading messages for logging and exception messages. It supports translating the message into the
1:  * default Locale. It works out the calling Bundle and uses it to load any resources. If the resource bundle is of type
1:  * java.properties then it tries to find the bundle first via the bundle getResources method, then via the getEntry method. If it
1:  * is of type java.class then it'll use the bundle to load the class.
1:  */
1: public final class MessageUtil
1: {
1:   /** The resource bundle used to translate messages */
0:   private ResourceBundle messages;
1:   private static final StackFinder finder;
1: 
1:   /** 
1:    * One of the static methods needs to obtain the caller, so we cheat and use a SecurityManager to get the 
1:    * classes on the stack.
1:    */
1:   private static class StackFinder extends SecurityManager
1:   {
1:     @Override
1:     public Class<?>[] getClassContext()
1:     {
1:       return super.getClassContext();
1:     }
1:   }
1:   
1:   static 
1:   {
1:     finder = AccessController.doPrivileged(new PrivilegedAction<StackFinder>() {
1:       public StackFinder run()
1:       {
1:         return new StackFinder();
1:       }
1:     });
1:   }
1: 
1:   private MessageUtil(ResourceBundle b)
1:   {
1:     messages = b;
1:   }
1: 
1:   /**
1:    * This method translates the message and puts the inserts into the message before returning it.
1:    * If the message key does not exist then the key itself is returned.
1:    * 
1:    * @param key     the message key.
1:    * @param inserts the inserts into the resolved message.
1:    * @return the message in the correct language, or the key if the message does not exist.
1:    */
1:   public String getMessage(String key, Object ... inserts)
1:   {
1:     String message;
1: 
1:     try {
1:       message = messages.getString(key);
1: 
1:       if (inserts != null && inserts.length > 0) {
1:         message = MessageFormat.format(message, inserts);
1:       }
1:     } catch (MissingResourceException e) {
1:       message = key;
1:     }
1: 
1:     return message;
1:   }
1: 
1:   /**
1:    * Loads the MessageUtil using the given context. It resolves the Class to an OSGi bundle.
1:    * 
1:    * @param context  the bundle this class is in will be used to resolve the base name.
1:    * @param baseName the resource bundle base name
1:    * @return the message util instance.
1:    * @throws MissingResourceException If the resource bundle cannot be located
1:    */
1:   public static MessageUtil createMessageUtil(Class<?> context, String baseName)
1:   {
1:     return createMessageUtil(FrameworkUtil.getBundle(context), baseName);
1:   }
1: 
1:   /**
1:    * This method uses the Bundle associated with the caller of this method.
1:    * 
1:    * @param baseName the resource bundle base name
1:    * @return the message util instance.
1:    * @throws MissingResourceException If the resource bundle cannot be located
1:    */
1:   public static MessageUtil createMessageUtil(String baseName)
1:   {
1:     Class<?>[] stack = finder.getClassContext();
1: 
1:     for (Class<?> clazz : stack) {
1:       if (clazz != MessageUtil.class) {
1:         return createMessageUtil(clazz, baseName);
1:       }
1:     }
1: 
1:     throw new MissingResourceException(org.apache.aries.util.internal.MessageUtil.getMessage("UTIL0014E", baseName), baseName, null);
1:   }
1: 
1:   /**
1:    * This method loads the resource bundle backing the MessageUtil from the provided Bundle.
1:    * 
1:    * @param b        the bundle to load the resource bundle from
1:    * @param baseName the resource bundle base name
1:    * @return the message util instance.
1:    * @throws MissingResourceException If the resource bundle cannot be located
1:    */
1:   public static MessageUtil createMessageUtil(final Bundle b, String baseName)
1:   {
1:     ResourceBundle rb;
1:     
1:     if (b == null) {
1:       // if the bundle is null we are probably outside of OSGi, so just use non-OSGi resolve rules.
1:       rb = ResourceBundle.getBundle(baseName);
1:     } else {
0:       rb = ResourceBundle.getBundle(baseName, new ResourceBundle.Control() {
1:   
1:         @Override
0:         public ResourceBundle newBundle(String baseName, Locale locale, String format,
0:             ClassLoader loader, boolean reload) throws IllegalAccessException,
0:             InstantiationException, IOException
1:         {
0:           ResourceBundle result;
1:   
0:           final String bundleName = toBundleName(baseName, locale);
1:   
0:           if (FORMAT_PROPERTIES.contains(format)) {
0:             final String resourceName = toResourceName(bundleName, "properties");
1:             
0:             URL url = AccessController.doPrivileged(new PrivilegedAction<URL>() {
0:               public URL run()
1:               {
0:                 URL url = b.getResource(resourceName);
1:                 
0:                 if (url == null) {
0:                   url = b.getEntry(resourceName);
1:                 }
0:                 return url;
1:               }
1:             });
1:             
0:             if (url != null) {
0:               result = new PropertyResourceBundle(url.openStream());
1:             } else {
0:               result = null;
1:             }
0:           } else if (FORMAT_CLASS.contains(format)) {
0:             @SuppressWarnings("unchecked")
0:             Class<? extends ListResourceBundle> clazz = AccessController.doPrivileged(new PrivilegedAction<Class<? extends ListResourceBundle>>() {
0:               public Class<? extends ListResourceBundle> run()
1:               {
1:                 try {
0:                   return b.loadClass(bundleName);
0:                 } catch (ClassNotFoundException e) {
0:                   return null;
1:                 }
1:               }
1:             });
1:             
0:             if (clazz != null) {
0:               result = clazz.newInstance();
1:             } else {
0:               result = null;
1:             }
1:           } else {
0:             throw new IllegalArgumentException(org.apache.aries.util.internal.MessageUtil.getMessage("UTIL0013E", format));
1:           }
1:   
0:           return result;
1:         }
1:     
1:       });
1:     }
1:     
1:     return new MessageUtil(rb);
1:   }
1: }
============================================================================