1:5febd6a: /*
1:5febd6a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5febd6a:  * or more contributor license agreements.  See the NOTICE file
1:5febd6a:  * distributed with this work for additional information
1:5febd6a:  * regarding copyright ownership.  The ASF licenses this file
1:5febd6a:  * to you under the Apache License, Version 2.0 (the
1:5febd6a:  * "License"); you may not use this file except in compliance
1:5febd6a:  * with the License.  You may obtain a copy of the License at
1:5febd6a:  *
1:5febd6a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5febd6a:  *
1:5febd6a:  * Unless required by applicable law or agreed to in writing,
1:5febd6a:  * software distributed under the License is distributed on an
1:5febd6a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5febd6a:  * KIND, either express or implied.  See the License for the
1:5febd6a:  * specific language governing permissions and limitations
1:5febd6a:  * under the License.
1:5febd6a:  */
1:5febd6a: package org.apache.aries.subsystem.itests.defect;
1:5febd6a: 
1:5febd6a: import static org.junit.Assert.fail;
1:5febd6a: 
1:5febd6a: import java.io.IOException;
1:5febd6a: import java.util.HashMap;
1:5febd6a: import java.util.Map;
1:5febd6a: 
1:5febd6a: import org.apache.aries.subsystem.itests.SubsystemTest;
1:5febd6a: import org.junit.Before;
1:5febd6a: import org.junit.Test;
1:5febd6a: import org.osgi.framework.Bundle;
1:5febd6a: import org.osgi.service.subsystem.Subsystem;
1:5febd6a: import org.osgi.service.subsystem.SubsystemConstants;
1:5febd6a: import org.osgi.service.subsystem.SubsystemException;
1:5febd6a: 
1:5febd6a: /*
1:5febd6a:  * https://issues.apache.org/jira/browse/ARIES-1419
1:5febd6a:  * 
1:5febd6a:  * Provide-Capability header parser does not support typed attributes.
1:5febd6a:  */
1:5febd6a: public class Aries1328Test extends SubsystemTest {
1:5febd6a:     /*
1:5febd6a:      * Subsystem-SymbolicName: application.a.esa
1:5febd6a:      * 
1:5febd6a:      * Included In Archive:
1:5febd6a:      * 		bundle.a.jar
1:5febd6a:      */
1:5febd6a:     private static final String APPLICATION_A = "application.a.esa";
1:5febd6a: 	/*
1:5febd6a: 	 * Bundle-SymbolicName: bundle.a.jar
1:5febd6a: 	 * Require-Capability: osgi.service;filter:="(objectClass=service.a)",
1:5febd6a: 	 *  osgi.service;filter:="(objectClass=service.b)";effective:=resolve
1:5febd6a: 	 */
1:5febd6a: 	private static final String BUNDLE_A = "bundle.a.jar";
1:5febd6a: 	/*
1:5febd6a: 	 * Bundle-SymbolicName: bundle.b.jar
1:5febd6a: 	 * Provide-Capability: osgi.service;objectClass=service.a",
1:5febd6a: 	 *  osgi.service;objectClass=service.b
1:5febd6a: 	 */
1:5febd6a: 	private static final String BUNDLE_B = "bundle.b.jar";
1:5febd6a: 	
1:5febd6a: 	private static boolean createdTestFiles;
1:5febd6a: 	
1:5febd6a: 	@Before
1:5febd6a: 	public void createTestFiles() throws Exception {
1:5febd6a: 		if (createdTestFiles)
1:5febd6a: 			return;
1:5febd6a: 		createBundleA();
1:5febd6a: 		createBundleB();
1:5febd6a: 		createApplicationA();
1:5febd6a: 		createdTestFiles = true;
1:5febd6a: 	}
1:5febd6a: 	
1:5febd6a: 	private void createBundleA() throws IOException {
1:5febd6a: 		createBundle(
1:5febd6a: 				name(BUNDLE_A), 
1:5febd6a: 				requireCapability("osgi.service;filter:=\"(objectClass=service.a)\"" +
1:5febd6a: 						", osgi.service;filter:=\"(objectClass=service.b)\";effective:=resolve"));
1:5febd6a: 	}
1:5febd6a: 	
1:5febd6a: 	private void createBundleB() throws IOException {
1:5febd6a: 		createBundle(
1:5febd6a: 				name(BUNDLE_B), 
1:5febd6a: 				provideCapability("osgi.service;objectClass=service.a, osgi.service;objectClass=service.b"));
1:5febd6a: 	}
1:5febd6a:     
1:5febd6a:     private static void createApplicationA() throws IOException {
1:5febd6a:         createApplicationAManifest();
1:5febd6a:         createSubsystem(APPLICATION_A, BUNDLE_A);
1:5febd6a:     }
1:5febd6a:     
1:5febd6a:     private static void createApplicationAManifest() throws IOException {
1:5febd6a:         Map<String, String> attributes = new HashMap<String, String>();
1:5febd6a:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:5febd6a:         createManifest(APPLICATION_A + ".mf", attributes);
1:5febd6a:     }
1:5febd6a:     
1:5febd6a:     @Test 
1:5febd6a:     public void testServiceAndRequireCapabilityInServiceNamespaceVisibilityInImportSharingPolicy() throws Exception {
1:5febd6a:     	Bundle bundleB = installBundleFromFile(BUNDLE_B);
1:5febd6a:     	try {
1:5febd6a:     		// Install application A containing content bundle A requiring two
1:5febd6a:     		// service capabilities each with effective:=resolve. Both the
1:5febd6a:     		// services and service capabilities should be visible to the
1:5febd6a:     		// bundle.
1:5febd6a:     		Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:5febd6a:     		try {
1:5febd6a:     			// Start the application to ensure the runtime resolution
1:5febd6a:     			// succeeds.
1:5febd6a:     			applicationA.start();
1:5febd6a:     		}
1:5febd6a:     		catch (SubsystemException e) {
1:5febd6a:     			e.printStackTrace();
1:5febd6a:     			fail("Subsystem should have started");
1:5febd6a:     		}
1:5febd6a:     		finally {
1:5febd6a:     			stopAndUninstallSubsystemSilently(applicationA);
1:5febd6a:     		}
1:5febd6a:     	}
1:5febd6a:     	catch (SubsystemException e) {
1:5febd6a:     		e.printStackTrace();
1:5febd6a:     		fail("Subsystem should have installed");
1:5febd6a:     	}
1:5febd6a:     	finally {
1:5febd6a:     		uninstallSilently(bundleB);
1:5febd6a:     	}
1:5febd6a:     }
1:5febd6a: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:5febd6a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1419
1:  * 
1:  * Provide-Capability header parser does not support typed attributes.
1:  */
1: public class Aries1328Test extends SubsystemTest {
1:     /*
1:      * Subsystem-SymbolicName: application.a.esa
1:      * 
1:      * Included In Archive:
1:      * 		bundle.a.jar
1:      */
1:     private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Require-Capability: osgi.service;filter:="(objectClass=service.a)",
1: 	 *  osgi.service;filter:="(objectClass=service.b)";effective:=resolve
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Provide-Capability: osgi.service;objectClass=service.a",
1: 	 *  osgi.service;objectClass=service.b
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createBundleA();
1: 		createBundleB();
1: 		createApplicationA();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	private void createBundleA() throws IOException {
1: 		createBundle(
1: 				name(BUNDLE_A), 
1: 				requireCapability("osgi.service;filter:=\"(objectClass=service.a)\"" +
1: 						", osgi.service;filter:=\"(objectClass=service.b)\";effective:=resolve"));
1: 	}
1: 	
1: 	private void createBundleB() throws IOException {
1: 		createBundle(
1: 				name(BUNDLE_B), 
1: 				provideCapability("osgi.service;objectClass=service.a, osgi.service;objectClass=service.b"));
1: 	}
1:     
1:     private static void createApplicationA() throws IOException {
1:         createApplicationAManifest();
1:         createSubsystem(APPLICATION_A, BUNDLE_A);
1:     }
1:     
1:     private static void createApplicationAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:         createManifest(APPLICATION_A + ".mf", attributes);
1:     }
1:     
1:     @Test 
1:     public void testServiceAndRequireCapabilityInServiceNamespaceVisibilityInImportSharingPolicy() throws Exception {
1:     	Bundle bundleB = installBundleFromFile(BUNDLE_B);
1:     	try {
1:     		// Install application A containing content bundle A requiring two
1:     		// service capabilities each with effective:=resolve. Both the
1:     		// services and service capabilities should be visible to the
1:     		// bundle.
1:     		Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     		try {
1:     			// Start the application to ensure the runtime resolution
1:     			// succeeds.
1:     			applicationA.start();
1:     		}
1:     		catch (SubsystemException e) {
1:     			e.printStackTrace();
1:     			fail("Subsystem should have started");
1:     		}
1:     		finally {
1:     			stopAndUninstallSubsystemSilently(applicationA);
1:     		}
1:     	}
1:     	catch (SubsystemException e) {
1:     		e.printStackTrace();
1:     		fail("Subsystem should have installed");
1:     	}
1:     	finally {
1:     		uninstallSilently(bundleB);
1:     	}
1:     }
1: }
============================================================================