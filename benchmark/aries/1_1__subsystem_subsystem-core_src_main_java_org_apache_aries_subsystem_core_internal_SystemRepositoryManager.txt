1:9df8274: /*
1:9df8274:  * Licensed to the Apache Software Foundation (ASF) under one
1:9df8274:  * or more contributor license agreements.  See the NOTICE file
1:9df8274:  * distributed with this work for additional information
1:9df8274:  * regarding copyright ownership.  The ASF licenses this file
1:9df8274:  * to you under the Apache License, Version 2.0 (the
1:9df8274:  * "License"); you may not use this file except in compliance
1:9df8274:  * with the License.  You may obtain a copy of the License at
1:9df8274:  *
1:9df8274:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9df8274:  *
1:9df8274:  * Unless required by applicable law or agreed to in writing,
1:9df8274:  * software distributed under the License is distributed on an
1:9df8274:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9df8274:  * KIND, either express or implied.  See the License for the
1:9df8274:  * specific language governing permissions and limitations
1:9df8274:  * under the License.
1:9df8274:  */
1:9df8274: package org.apache.aries.subsystem.core.internal;
1:9df8274: 
1:9df8274: import java.util.concurrent.atomic.AtomicReference;
1:9df8274: 
1:9df8274: import org.apache.aries.subsystem.AriesSubsystem;
1:9df8274: import org.osgi.framework.Bundle;
1:9df8274: import org.osgi.framework.BundleContext;
1:9df8274: import org.osgi.framework.Filter;
1:9df8274: import org.osgi.framework.FrameworkUtil;
1:9df8274: import org.osgi.framework.InvalidSyntaxException;
1:9df8274: import org.osgi.service.subsystem.Subsystem;
1:9df8274: import org.osgi.service.subsystem.SubsystemConstants;
1:9df8274: import org.osgi.util.tracker.BundleTracker;
1:9df8274: import org.osgi.util.tracker.ServiceTracker;
1:9df8274: 
1:9df8274: public class SystemRepositoryManager {
1:9df8274:     private static final Filter filter = createFilter();
1:9df8274:     
1:9df8274:     private static Filter createFilter() {
1:9df8274:         try {
1:9df8274:             return FrameworkUtil.createFilter(new StringBuilder()
1:9df8274:                     .append("(&(!(|(")
1:9df8274:                     .append(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY)
1:9df8274:                     .append('=')
1:9df8274:                     .append(Subsystem.State.INSTALL_FAILED)
1:9df8274:                     .append(")(")
1:9df8274:                     .append(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY)
1:9df8274:                     .append('=')
1:9df8274:                     .append(Subsystem.State.UNINSTALLING)
1:9df8274:                     .append(")(")
1:9df8274:                     .append(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY)
1:9df8274:                     .append('=')
1:9df8274:                     .append(Subsystem.State.UNINSTALLED)
1:9df8274:                     .append(")))(")
1:9df8274:                     .append(org.osgi.framework.Constants.OBJECTCLASS)
1:9df8274:                     .append('=')
1:9df8274:                     .append(AriesSubsystem.class.getName())
1:9df8274:                     .append("))")
1:9df8274:                     .toString());
1:9df8274:         } 
1:9df8274:         catch (InvalidSyntaxException e) {
1:9df8274:             throw new IllegalStateException(e);
1:9df8274:         }
1:9df8274:     }
1:9df8274:     
1:9df8274:     private final BundleTracker<AtomicReference<BundleRevisionResource>> bundleTracker;
1:9df8274:     private final ServiceTracker<AriesSubsystem, BasicSubsystem> serviceTracker;
1:9df8274:     private final SystemRepository systemRepository;
1:9df8274:     
1:9df8274:     public SystemRepositoryManager(BundleContext bundleContext) {
1:9df8274:         systemRepository = new SystemRepository(bundleContext);
1:9df8274:         bundleTracker = new BundleTracker<AtomicReference<BundleRevisionResource>>(
1:9df8274:                 bundleContext, ~Bundle.UNINSTALLED, systemRepository);
1:9df8274:         serviceTracker = new ServiceTracker<AriesSubsystem, BasicSubsystem>(
1:9df8274:                 bundleContext, filter, systemRepository);
1:9df8274:     }
1:9df8274:     
1:9df8274:     public SystemRepository getSystemRepository() {
1:9df8274:         return systemRepository;
1:9df8274:     }
1:9df8274: 
1:9df8274:     public void open() {
1:9df8274:         bundleTracker.open();
1:9df8274:         serviceTracker.open();
1:9df8274:     }
1:9df8274:     
1:9df8274:     public void close() {
1:9df8274:         serviceTracker.close();
1:9df8274:         bundleTracker.close();
1:9df8274:     }
1:9df8274: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:9df8274
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import org.apache.aries.subsystem.AriesSubsystem;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.util.tracker.BundleTracker;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: public class SystemRepositoryManager {
1:     private static final Filter filter = createFilter();
1:     
1:     private static Filter createFilter() {
1:         try {
1:             return FrameworkUtil.createFilter(new StringBuilder()
1:                     .append("(&(!(|(")
1:                     .append(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY)
1:                     .append('=')
1:                     .append(Subsystem.State.INSTALL_FAILED)
1:                     .append(")(")
1:                     .append(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY)
1:                     .append('=')
1:                     .append(Subsystem.State.UNINSTALLING)
1:                     .append(")(")
1:                     .append(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY)
1:                     .append('=')
1:                     .append(Subsystem.State.UNINSTALLED)
1:                     .append(")))(")
1:                     .append(org.osgi.framework.Constants.OBJECTCLASS)
1:                     .append('=')
1:                     .append(AriesSubsystem.class.getName())
1:                     .append("))")
1:                     .toString());
1:         } 
1:         catch (InvalidSyntaxException e) {
1:             throw new IllegalStateException(e);
1:         }
1:     }
1:     
1:     private final BundleTracker<AtomicReference<BundleRevisionResource>> bundleTracker;
1:     private final ServiceTracker<AriesSubsystem, BasicSubsystem> serviceTracker;
1:     private final SystemRepository systemRepository;
1:     
1:     public SystemRepositoryManager(BundleContext bundleContext) {
1:         systemRepository = new SystemRepository(bundleContext);
1:         bundleTracker = new BundleTracker<AtomicReference<BundleRevisionResource>>(
1:                 bundleContext, ~Bundle.UNINSTALLED, systemRepository);
1:         serviceTracker = new ServiceTracker<AriesSubsystem, BasicSubsystem>(
1:                 bundleContext, filter, systemRepository);
1:     }
1:     
1:     public SystemRepository getSystemRepository() {
1:         return systemRepository;
1:     }
1: 
1:     public void open() {
1:         bundleTracker.open();
1:         serviceTracker.open();
1:     }
1:     
1:     public void close() {
1:         serviceTracker.close();
1:         bundleTracker.close();
1:     }
1: }
============================================================================