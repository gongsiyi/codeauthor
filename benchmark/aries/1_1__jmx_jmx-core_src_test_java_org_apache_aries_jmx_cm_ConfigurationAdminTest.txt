1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.cm;
1:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertArrayEquals;
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:fdf3952: import static org.mockito.Matchers.anyString;
1:fdf3952: import static org.mockito.Matchers.eq;
1:fdf3952: import static org.mockito.Mockito.mock;
1:fdf3952: import static org.mockito.Mockito.reset;
1:fdf3952: import static org.mockito.Mockito.verify;
1:fdf3952: import static org.mockito.Mockito.when;
1:fdf3952: import static org.osgi.jmx.JmxConstants.PROPERTIES_TYPE;
1:fdf3952: 
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.Hashtable;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: import javax.management.openmbean.TabularDataSupport;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.codec.PropertyData;
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.mockito.ArgumentCaptor;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.service.cm.Configuration;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * 
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class ConfigurationAdminTest {
1:fdf3952: 
1:fdf3952:    
1:fdf3952:     @Test
1:fdf3952:     public void testCreateFactoryConfiguration() throws Exception {
1:fdf3952:         
1:fdf3952:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:fdf3952:         String fpid = "org.apache.aries.jmx.mock.factory";
1:fdf3952:         Configuration config = mock(Configuration.class);
1:fdf3952:         
1:fdf3952:         when(admin.createFactoryConfiguration(eq(fpid))).thenReturn(config);
1:fdf3952:         when(admin.createFactoryConfiguration(eq(fpid), anyString())).thenReturn(config);
1:fdf3952:         when(config.getPid()).thenReturn(fpid + "-1260133982371-0");
1:fdf3952:         
1:fdf3952:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:fdf3952:         assertEquals(fpid + "-1260133982371-0", mbean.createFactoryConfiguration(fpid));
1:fdf3952:         assertEquals(fpid + "-1260133982371-0", mbean.createFactoryConfigurationForLocation(fpid, "/bundlex"));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:    
1:fdf3952:     @Test
1:fdf3952:     public void testDelete() throws Exception {
1:fdf3952:         
1:fdf3952:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:fdf3952:         String pid = "org.apache.aries.jmx.mock";
1:fdf3952:         Configuration config = mock(Configuration.class);
1:fdf3952:         
1:fdf3952:         when(admin.getConfiguration(pid, null)).thenReturn(config);
1:fdf3952:         
1:fdf3952:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:fdf3952:         mbean.delete(pid);
1:fdf3952:         verify(config).delete();
1:fdf3952:         
1:fdf3952:         reset(config);
1:fdf3952:         
1:fdf3952:         when(admin.getConfiguration(pid, "location")).thenReturn(config);
1:fdf3952:         mbean.deleteForLocation(pid, "location");
1:fdf3952:         verify(config).delete();
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:   
1:fdf3952:     @Test
1:fdf3952:     public void testDeleteConfigurations() throws Exception {
1:fdf3952: 
1:fdf3952:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:fdf3952:         String filter = "(" + Constants.SERVICE_PID + "=org.apache.aries.jmx.mock)";
1:fdf3952:         
1:fdf3952:         Configuration a = mock(Configuration.class);
1:fdf3952:         Configuration b = mock(Configuration.class);
1:fdf3952:         
1:fdf3952:         when(admin.listConfigurations(filter)).thenReturn(new Configuration[] { a, b });
1:fdf3952:         
1:fdf3952:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:fdf3952:         mbean.deleteConfigurations(filter);
1:fdf3952: 
1:fdf3952:         verify(a).delete();
1:fdf3952:         verify(b).delete();
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:    
1:fdf3952:     @Test
1:fdf3952:     public void testGetBundleLocation() throws Exception {
1:fdf3952: 
1:fdf3952:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:fdf3952:         String pid = "org.apache.aries.jmx.mock";
1:fdf3952:         Configuration config = mock(Configuration.class);
1:fdf3952:         
1:fdf3952:         when(admin.getConfiguration(pid, null)).thenReturn(config);
1:fdf3952:         when(config.getBundleLocation()).thenReturn("/location");
1:fdf3952:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:fdf3952:         
1:fdf3952:         assertEquals("/location", mbean.getBundleLocation(pid));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:  
1:fdf3952:     @Test
1:fdf3952:     public void testGetConfigurations() throws Exception {
1:fdf3952:      
1:fdf3952:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:fdf3952:         String factoryPid = "org.apache.aries.jmx.factory.mock";
1:fdf3952:         String filter = "(" + org.osgi.service.cm.ConfigurationAdmin.SERVICE_FACTORYPID + "=org.apache.aries.jmx.factory.mock)";
1:fdf3952:         String location = "../location";
1:fdf3952:         
1:fdf3952:         Configuration a = mock(Configuration.class);
1:fdf3952:         when(a.getPid()).thenReturn(factoryPid + "-2160133952674-0");
1:fdf3952:         when(a.getBundleLocation()).thenReturn(location);
1:fdf3952:         Configuration b = mock(Configuration.class);
1:fdf3952:         when(b.getPid()).thenReturn(factoryPid + "-1260133982371-1");
1:fdf3952:         when(b.getBundleLocation()).thenReturn(location);
1:fdf3952:         
1:fdf3952:         when(admin.listConfigurations(filter)).thenReturn(new Configuration[] { a, b});
1:fdf3952:         
1:fdf3952:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:fdf3952:         String[][] result = mbean.getConfigurations(filter);
1:fdf3952:         assertEquals(2, result.length);
1:fdf3952:         assertArrayEquals(new String[]{ factoryPid + "-2160133952674-0", location }, result[0] );
1:fdf3952:         assertArrayEquals(new String[]{ factoryPid + "-1260133982371-1", location }, result[1] );
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:    
1:fdf3952:     @Test
1:fdf3952:     public void testGetFactoryPid() throws Exception {
1:fdf3952: 
1:fdf3952:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:fdf3952:         String factoryPid = "org.apache.aries.jmx.factory.mock";
1:fdf3952:         
1:fdf3952:         Configuration config = mock(Configuration.class);
1:fdf3952:         when(admin.getConfiguration(eq(factoryPid  + "-1260133982371-0"), anyString())).thenReturn(config);
1:fdf3952:         when(config.getFactoryPid()).thenReturn(factoryPid);
1:fdf3952:         
1:fdf3952:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:fdf3952:         assertEquals(factoryPid, mbean.getFactoryPid(factoryPid  + "-1260133982371-0"));
1:fdf3952:         assertEquals(factoryPid, mbean.getFactoryPidForLocation(factoryPid  + "-1260133982371-0", "location"));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testGetProperties() throws Exception {
1:fdf3952: 
1:fdf3952:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:fdf3952:         String pid = "org.apache.aries.jmx.mock";
1:fdf3952:         Configuration config = mock(Configuration.class);
1:fdf3952:         
1:fdf3952:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:fdf3952:         props.put("one", "value");
1:fdf3952:         props.put("two", 2);
1:fdf3952:         when(admin.getConfiguration(eq(pid), anyString())).thenReturn(config);
1:fdf3952:         when(config.getProperties()).thenReturn(props);
1:fdf3952:         
1:fdf3952:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:fdf3952:         
1:fdf3952:         TabularData properties = mbean.getPropertiesForLocation(pid, null);
1:fdf3952:         assertNotNull(properties);
1:fdf3952:         assertEquals(PROPERTIES_TYPE, properties.getTabularType());
1:fdf3952:         assertEquals(2, properties.values().size());
1:fdf3952:         PropertyData<? extends Object> oneData = PropertyData.from(properties.get(new Object[]{ "one"}));
1:fdf3952:         assertEquals("value", oneData.getValue());
1:fdf3952:         PropertyData<? extends Object> twoData = PropertyData.from(properties.get(new Object[]{ "two"}));
1:fdf3952:         assertEquals(2, twoData.getValue());
1:fdf3952:         assertEquals("2", twoData.getEncodedValue());
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:    
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testSetBundleLocation() throws Exception {
1:fdf3952: 
1:fdf3952:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:fdf3952:         String pid = "org.apache.aries.jmx.mock";
1:fdf3952:         
1:fdf3952:         Configuration config = mock(Configuration.class);
1:fdf3952:         when(admin.getConfiguration(pid, null)).thenReturn(config);
1:fdf3952:         
1:fdf3952:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:fdf3952:         mbean.setBundleLocation(pid, "file:/newlocation");
1:fdf3952:         
1:fdf3952:         ArgumentCaptor<String> locationArgument = ArgumentCaptor.forClass(String.class);
1:fdf3952:         verify(config).setBundleLocation(locationArgument.capture());
1:fdf3952:         
1:fdf3952:         assertEquals("file:/newlocation", locationArgument.getValue());
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:    
1:fdf3952:     @SuppressWarnings("unchecked")
1:fdf3952:     @Test
1:fdf3952:     public void testUpdateTabularData() throws Exception {
1:fdf3952:        
1:fdf3952:         TabularData data = new TabularDataSupport(PROPERTIES_TYPE);
1:fdf3952:         PropertyData<String> p1 = PropertyData.newInstance("one", "first");
1:fdf3952:         data.put(p1.toCompositeData());
1:fdf3952:         PropertyData<Integer> p2 = PropertyData.newInstance("two", 3);
1:fdf3952:         data.put(p2.toCompositeData());
1:fdf3952:         
1:fdf3952:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:fdf3952:         String pid = "org.apache.aries.jmx.mock";
1:fdf3952:         
1:fdf3952:         Configuration config = mock(Configuration.class);
1:fdf3952:         when(admin.getConfiguration(pid, null)).thenReturn(config);
1:fdf3952:         
1:fdf3952:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:fdf3952:         mbean.updateForLocation(pid, null, data);
1:fdf3952:         
1:fdf3952:         ArgumentCaptor<Dictionary> props = ArgumentCaptor.forClass(Dictionary.class);
1:fdf3952:         verify(config).update(props.capture());
1:fdf3952:         
1:fdf3952:         Dictionary configProperties = props.getValue();
1:fdf3952:         assertEquals("first", configProperties.get("one"));
1:fdf3952:         assertEquals(3, configProperties.get("two"));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:   
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.cm;
1: 
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.mockito.Matchers.anyString;
1: import static org.mockito.Matchers.eq;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.reset;
1: import static org.mockito.Mockito.verify;
1: import static org.mockito.Mockito.when;
1: import static org.osgi.jmx.JmxConstants.PROPERTIES_TYPE;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: 
1: import org.apache.aries.jmx.codec.PropertyData;
1: import org.junit.Test;
1: import org.mockito.ArgumentCaptor;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.cm.Configuration;
1: 
1: /**
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class ConfigurationAdminTest {
1: 
1:    
1:     @Test
1:     public void testCreateFactoryConfiguration() throws Exception {
1:         
1:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:         String fpid = "org.apache.aries.jmx.mock.factory";
1:         Configuration config = mock(Configuration.class);
1:         
1:         when(admin.createFactoryConfiguration(eq(fpid))).thenReturn(config);
1:         when(admin.createFactoryConfiguration(eq(fpid), anyString())).thenReturn(config);
1:         when(config.getPid()).thenReturn(fpid + "-1260133982371-0");
1:         
1:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:         assertEquals(fpid + "-1260133982371-0", mbean.createFactoryConfiguration(fpid));
1:         assertEquals(fpid + "-1260133982371-0", mbean.createFactoryConfigurationForLocation(fpid, "/bundlex"));
1:         
1:     }
1: 
1:    
1:     @Test
1:     public void testDelete() throws Exception {
1:         
1:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:         String pid = "org.apache.aries.jmx.mock";
1:         Configuration config = mock(Configuration.class);
1:         
1:         when(admin.getConfiguration(pid, null)).thenReturn(config);
1:         
1:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:         mbean.delete(pid);
1:         verify(config).delete();
1:         
1:         reset(config);
1:         
1:         when(admin.getConfiguration(pid, "location")).thenReturn(config);
1:         mbean.deleteForLocation(pid, "location");
1:         verify(config).delete();
1:         
1:     }
1: 
1:   
1:     @Test
1:     public void testDeleteConfigurations() throws Exception {
1: 
1:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:         String filter = "(" + Constants.SERVICE_PID + "=org.apache.aries.jmx.mock)";
1:         
1:         Configuration a = mock(Configuration.class);
1:         Configuration b = mock(Configuration.class);
1:         
1:         when(admin.listConfigurations(filter)).thenReturn(new Configuration[] { a, b });
1:         
1:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:         mbean.deleteConfigurations(filter);
1: 
1:         verify(a).delete();
1:         verify(b).delete();
1:         
1:     }
1: 
1:    
1:     @Test
1:     public void testGetBundleLocation() throws Exception {
1: 
1:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:         String pid = "org.apache.aries.jmx.mock";
1:         Configuration config = mock(Configuration.class);
1:         
1:         when(admin.getConfiguration(pid, null)).thenReturn(config);
1:         when(config.getBundleLocation()).thenReturn("/location");
1:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:         
1:         assertEquals("/location", mbean.getBundleLocation(pid));
1:         
1:     }
1: 
1:  
1:     @Test
1:     public void testGetConfigurations() throws Exception {
1:      
1:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:         String factoryPid = "org.apache.aries.jmx.factory.mock";
1:         String filter = "(" + org.osgi.service.cm.ConfigurationAdmin.SERVICE_FACTORYPID + "=org.apache.aries.jmx.factory.mock)";
1:         String location = "../location";
1:         
1:         Configuration a = mock(Configuration.class);
1:         when(a.getPid()).thenReturn(factoryPid + "-2160133952674-0");
1:         when(a.getBundleLocation()).thenReturn(location);
1:         Configuration b = mock(Configuration.class);
1:         when(b.getPid()).thenReturn(factoryPid + "-1260133982371-1");
1:         when(b.getBundleLocation()).thenReturn(location);
1:         
1:         when(admin.listConfigurations(filter)).thenReturn(new Configuration[] { a, b});
1:         
1:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:         String[][] result = mbean.getConfigurations(filter);
1:         assertEquals(2, result.length);
1:         assertArrayEquals(new String[]{ factoryPid + "-2160133952674-0", location }, result[0] );
1:         assertArrayEquals(new String[]{ factoryPid + "-1260133982371-1", location }, result[1] );
1:         
1:     }
1: 
1:    
1:     @Test
1:     public void testGetFactoryPid() throws Exception {
1: 
1:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:         String factoryPid = "org.apache.aries.jmx.factory.mock";
1:         
1:         Configuration config = mock(Configuration.class);
1:         when(admin.getConfiguration(eq(factoryPid  + "-1260133982371-0"), anyString())).thenReturn(config);
1:         when(config.getFactoryPid()).thenReturn(factoryPid);
1:         
1:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:         assertEquals(factoryPid, mbean.getFactoryPid(factoryPid  + "-1260133982371-0"));
1:         assertEquals(factoryPid, mbean.getFactoryPidForLocation(factoryPid  + "-1260133982371-0", "location"));
1:         
1:     }
1: 
1:     
1:     @Test
1:     public void testGetProperties() throws Exception {
1: 
1:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:         String pid = "org.apache.aries.jmx.mock";
1:         Configuration config = mock(Configuration.class);
1:         
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         props.put("one", "value");
1:         props.put("two", 2);
1:         when(admin.getConfiguration(eq(pid), anyString())).thenReturn(config);
1:         when(config.getProperties()).thenReturn(props);
1:         
1:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:         
1:         TabularData properties = mbean.getPropertiesForLocation(pid, null);
1:         assertNotNull(properties);
1:         assertEquals(PROPERTIES_TYPE, properties.getTabularType());
1:         assertEquals(2, properties.values().size());
1:         PropertyData<? extends Object> oneData = PropertyData.from(properties.get(new Object[]{ "one"}));
1:         assertEquals("value", oneData.getValue());
1:         PropertyData<? extends Object> twoData = PropertyData.from(properties.get(new Object[]{ "two"}));
1:         assertEquals(2, twoData.getValue());
1:         assertEquals("2", twoData.getEncodedValue());
1:         
1:     }
1: 
1:    
1: 
1:     @Test
1:     public void testSetBundleLocation() throws Exception {
1: 
1:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:         String pid = "org.apache.aries.jmx.mock";
1:         
1:         Configuration config = mock(Configuration.class);
1:         when(admin.getConfiguration(pid, null)).thenReturn(config);
1:         
1:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:         mbean.setBundleLocation(pid, "file:/newlocation");
1:         
1:         ArgumentCaptor<String> locationArgument = ArgumentCaptor.forClass(String.class);
1:         verify(config).setBundleLocation(locationArgument.capture());
1:         
1:         assertEquals("file:/newlocation", locationArgument.getValue());
1:         
1:     }
1: 
1:    
1:     @SuppressWarnings("unchecked")
1:     @Test
1:     public void testUpdateTabularData() throws Exception {
1:        
1:         TabularData data = new TabularDataSupport(PROPERTIES_TYPE);
1:         PropertyData<String> p1 = PropertyData.newInstance("one", "first");
1:         data.put(p1.toCompositeData());
1:         PropertyData<Integer> p2 = PropertyData.newInstance("two", 3);
1:         data.put(p2.toCompositeData());
1:         
1:         org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class);
1:         String pid = "org.apache.aries.jmx.mock";
1:         
1:         Configuration config = mock(Configuration.class);
1:         when(admin.getConfiguration(pid, null)).thenReturn(config);
1:         
1:         ConfigurationAdmin mbean = new ConfigurationAdmin(admin);
1:         mbean.updateForLocation(pid, null, data);
1:         
1:         ArgumentCaptor<Dictionary> props = ArgumentCaptor.forClass(Dictionary.class);
1:         verify(config).update(props.capture());
1:         
1:         Dictionary configProperties = props.getValue();
1:         assertEquals("first", configProperties.get("one"));
1:         assertEquals(3, configProperties.get("two"));
1:         
1:     }
1: 
1:   
1: 
1: }
============================================================================