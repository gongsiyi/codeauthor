1:97c9f45: /*
1:97c9f45:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:97c9f45:  * contributor license agreements.  See the NOTICE file distributed with
1:97c9f45:  * this work for additional information regarding copyright ownership.
1:97c9f45:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:97c9f45:  * (the "License"); you may not use this file except in compliance with
1:97c9f45:  * the License.  You may obtain a copy of the License at
1:97c9f45:  *
1:97c9f45:  *      http://www.apache.org/licenses/LICENSE-2.0
1:97c9f45:  *
1:97c9f45:  * Unless required by applicable law or agreed to in writing, software
1:97c9f45:  * distributed under the License is distributed on an "AS IS" BASIS,
1:97c9f45:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:97c9f45:  * See the License for the specific language governing permissions and
1:97c9f45:  * limitations under the License.
1:97c9f45:  */
1:6d5ae4f: package org.apache.aries.transaction.internal;
1:97c9f45: 
1:99264ad: import java.io.File;
1:99264ad: import java.util.ArrayList;
1:97c9f45: import java.util.Dictionary;
1:97c9f45: import java.util.List;
1:60e8f74: 
1:97c9f45: import javax.transaction.TransactionManager;
1:97c9f45: import javax.transaction.TransactionSynchronizationRegistry;
1:97c9f45: import javax.transaction.UserTransaction;
1:99264ad: import javax.transaction.xa.XAException;
1:97c9f45: 
1:6d5ae4f: import org.apache.aries.transaction.AriesTransactionManager;
1:c391965: import org.apache.geronimo.transaction.log.HOWLLog;
1:99264ad: import org.apache.geronimo.transaction.log.UnrecoverableLog;
1:99264ad: import org.apache.geronimo.transaction.manager.RecoverableTransactionManager;
1:97c9f45: import org.apache.geronimo.transaction.manager.TransactionLog;
1:97c9f45: import org.apache.geronimo.transaction.manager.XidFactory;
1:99264ad: import org.osgi.framework.BundleContext;
1:99264ad: import org.osgi.framework.ServiceRegistration;
1:99264ad: import org.osgi.service.cm.ConfigurationException;
1:97c9f45: 
1:97c9f45: /**
1:97c9f45:  */
1:97c9f45: public class TransactionManagerService {
1:97c9f45: 
1:b33bc22:     public static final String TRANSACTION_TIMEOUT = "aries.transaction.timeout";
1:b33bc22:     public static final String RECOVERABLE = "aries.transaction.recoverable";
1:0782326:     public static final String TMID = "aries.transaction.tmid";
1:b33bc22:     public static final String HOWL_BUFFER_CLASS_NAME = "aries.transaction.howl.bufferClassName";
1:b33bc22:     public static final String HOWL_BUFFER_SIZE = "aries.transaction.howl.bufferSize";
1:b33bc22:     public static final String HOWL_CHECKSUM_ENABLED = "aries.transaction.howl.checksumEnabled";
1:b33bc22:     public static final String HOWL_ADLER32_CHECKSUM = "aries.transaction.howl.adler32Checksum";
1:b33bc22:     public static final String HOWL_FLUSH_SLEEP_TIME = "aries.transaction.howl.flushSleepTime";
1:b33bc22:     public static final String HOWL_LOG_FILE_EXT = "aries.transaction.howl.logFileExt";
1:b33bc22:     public static final String HOWL_LOG_FILE_NAME = "aries.transaction.howl.logFileName";
1:b33bc22:     public static final String HOWL_MAX_BLOCKS_PER_FILE = "aries.transaction.howl.maxBlocksPerFile";
1:b33bc22:     public static final String HOWL_MAX_LOG_FILES = "aries.transaction.howl.maxLogFiles";
1:b33bc22:     public static final String HOWL_MAX_BUFFERS = "aries.transaction.howl.maxBuffers";
1:b33bc22:     public static final String HOWL_MIN_BUFFERS = "aries.transaction.howl.minBuffers";
1:b33bc22:     public static final String HOWL_THREADS_WAITING_FORCE_THRESHOLD = "aries.transaction.howl.threadsWaitingForceThreshold";
1:b33bc22:     public static final String HOWL_LOG_FILE_DIR = "aries.transaction.howl.logFileDir";
1:961cc39:     public static final String HOWL_FLUSH_PARTIAL_BUFFERS = "aries.transaction.flushPartialBuffers";
1:97c9f45: 
1:97c9f45:     public static final int DEFAULT_TRANSACTION_TIMEOUT = 600; // 600 seconds -> 10 minutes
1:97c9f45:     public static final boolean DEFAULT_RECOVERABLE = false;   // not recoverable by default
1:97c9f45: 
1:97c9f45:     private static final String PLATFORM_TRANSACTION_MANAGER_CLASS = "org.springframework.transaction.PlatformTransactionManager";
1:97c9f45: 
1:60e8f74:     @SuppressWarnings("unused")
1:97c9f45:     private final String pid;
1:60e8f74:     @SuppressWarnings("rawtypes")
1:97c9f45:     private final Dictionary properties;
1:97c9f45:     private final BundleContext bundleContext;
1:97c9f45:     private boolean useSpring;
1:6d5ae4f:     private AriesTransactionManagerImpl transactionManager;
1:97c9f45:     private TransactionLog transactionLog;
1:4854ac3:     private ServiceRegistration<?> serviceRegistration;
1:97c9f45: 
1:60e8f74:     public TransactionManagerService(String pid, @SuppressWarnings("rawtypes") Dictionary properties, BundleContext bundleContext) throws ConfigurationException {
1:97c9f45:         this.pid = pid;
1:97c9f45:         this.properties = properties;
1:97c9f45:         this.bundleContext = bundleContext;
1:97c9f45:         // Transaction timeout
1:97c9f45:         int transactionTimeout = getInt(TRANSACTION_TIMEOUT, DEFAULT_TRANSACTION_TIMEOUT);
1:97c9f45:         if (transactionTimeout <= 0) {
1:cde0cb1:             throw new ConfigurationException(TRANSACTION_TIMEOUT, NLS.MESSAGES.getMessage("tx.timeout.greaterthan.zero"));
3:97c9f45:         }
1:0782326: 
1:0782326:         final String tmid = getString(TMID, pid);
1:13e8e0f:         // the max length of the factory should be 64
1:0782326:         XidFactory xidFactory = new XidFactoryImpl(tmid.substring(0, Math.min(tmid.length(), 64)).getBytes());
1:97c9f45:         // Transaction log
1:97c9f45:         if (getBool(RECOVERABLE, DEFAULT_RECOVERABLE)) {
1:97c9f45:             String bufferClassName = getString(HOWL_BUFFER_CLASS_NAME, "org.objectweb.howl.log.BlockLogBuffer");
1:961cc39:             int bufferSizeKBytes = getInt(HOWL_BUFFER_SIZE, 4);
1:97c9f45:             if (bufferSizeKBytes < 1 || bufferSizeKBytes > 32) {
1:cde0cb1:                 throw new ConfigurationException(HOWL_BUFFER_SIZE, NLS.MESSAGES.getMessage("buffer.size.between.one.and.thirtytwo"));
1:97c9f45:             }
1:97c9f45:             boolean checksumEnabled = getBool(HOWL_CHECKSUM_ENABLED, true);
1:97c9f45:             boolean adler32Checksum = getBool(HOWL_ADLER32_CHECKSUM, true);
1:97c9f45:             int flushSleepTimeMilliseconds = getInt(HOWL_FLUSH_SLEEP_TIME, 50);
1:97c9f45:             String logFileExt = getString(HOWL_LOG_FILE_EXT, "log");
1:97c9f45:             String logFileName = getString(HOWL_LOG_FILE_NAME, "transaction");
1:97c9f45:             int maxBlocksPerFile = getInt(HOWL_MAX_BLOCKS_PER_FILE, -1);
1:97c9f45:             int maxLogFiles = getInt(HOWL_MAX_LOG_FILES, 2);
1:97c9f45:             int minBuffers = getInt(HOWL_MIN_BUFFERS, 4);
1:97c9f45:             if (minBuffers < 0) {
1:cde0cb1:                 throw new ConfigurationException(HOWL_MIN_BUFFERS, NLS.MESSAGES.getMessage("min.buffers.greaterthan.zero"));
1:97c9f45:             }
1:97c9f45:             int maxBuffers = getInt(HOWL_MAX_BUFFERS, 0);
1:97c9f45:             if (maxBuffers > 0 && minBuffers < maxBuffers) {
1:cde0cb1:                 throw new ConfigurationException(HOWL_MAX_BUFFERS, NLS.MESSAGES.getMessage("max.buffers.greaterthan.min.buffers"));
1:97c9f45:             }
1:97c9f45:             int threadsWaitingForceThreshold = getInt(HOWL_THREADS_WAITING_FORCE_THRESHOLD, -1);
1:961cc39:             boolean flushPartialBuffers = getBool(HOWL_FLUSH_PARTIAL_BUFFERS, true);
1:97c9f45:             String logFileDir = getString(HOWL_LOG_FILE_DIR, null);
1:97c9f45:             if (logFileDir == null || logFileDir.length() == 0 || !new File(logFileDir).isAbsolute()) {
1:cde0cb1:                 throw new ConfigurationException(HOWL_LOG_FILE_DIR, NLS.MESSAGES.getMessage("log.file.dir"));
1:97c9f45:             }
1:97c9f45:             try {
1:97c9f45:                 transactionLog = new HOWLLog(bufferClassName,
1:97c9f45:                                              bufferSizeKBytes,
1:97c9f45:                                              checksumEnabled,
1:97c9f45:                                              adler32Checksum,
1:97c9f45:                                              flushSleepTimeMilliseconds,
1:97c9f45:                                              logFileDir,
1:97c9f45:                                              logFileExt,
1:97c9f45:                                              logFileName,
1:97c9f45:                                              maxBlocksPerFile,
1:97c9f45:                                              maxBuffers,
1:97c9f45:                                              maxLogFiles,
1:97c9f45:                                              minBuffers,
1:97c9f45:                                              threadsWaitingForceThreshold,
1:961cc39:                                              flushPartialBuffers,
1:0782326:                                              xidFactory,
1:97c9f45:                                              null);
1:99264ad:                 ((HOWLLog) transactionLog).doStart();
1:99264ad:             } catch (Exception e) {
2:97c9f45:                 // This should not really happen as we've checked properties earlier
1:632f6c9:                 throw new ConfigurationException(null, e.getMessage(), e);
1:97c9f45:             }
1:97c9f45:         } else {
1:97c9f45:             transactionLog =  new UnrecoverableLog();
1:97c9f45:         }
1:97c9f45:         // Create transaction manager
1:97c9f45:         try {
1:97c9f45:             try {
1:97c9f45:                 transactionManager = new SpringTransactionManagerCreator().create(transactionTimeout, xidFactory, transactionLog);
1:97c9f45:                 useSpring = true;
1:97c9f45:             } catch (NoClassDefFoundError e) {
1:6d5ae4f:                 transactionManager = new AriesTransactionManagerImpl(transactionTimeout, xidFactory, transactionLog);
1:97c9f45:             }
1:97c9f45:         } catch (XAException e) {
1:cde0cb1:             throw new RuntimeException(NLS.MESSAGES.getMessage("tx.recovery.error"), e);
1:97c9f45:         }
1:97c9f45:     }
1:97c9f45: 
1:97c9f45:     public void start() throws Exception {
1:97c9f45:         List<String> clazzes = new ArrayList<String>();
1:6d5ae4f:         clazzes.add(AriesTransactionManager.class.getName());
1:97c9f45:         clazzes.add(TransactionManager.class.getName());
1:97c9f45:         clazzes.add(TransactionSynchronizationRegistry.class.getName());
1:97c9f45:         clazzes.add(UserTransaction.class.getName());
1:97c9f45:         clazzes.add(RecoverableTransactionManager.class.getName());
1:97c9f45:         if (useSpring) {
1:97c9f45:             clazzes.add(PLATFORM_TRANSACTION_MANAGER_CLASS);
1:97c9f45:         }
1:4854ac3:         String[] ifar = clazzes.toArray(new String[clazzes.size()]);
1:4854ac3:         serviceRegistration = bundleContext.registerService(ifar, transactionManager, null);
1:97c9f45:     }
1:97c9f45: 
1:97c9f45:     public void close() throws Exception {
1:50c9f1e:         if(serviceRegistration != null) {
1:50c9f1e:           try {
1:50c9f1e:             serviceRegistration.unregister();
1:50c9f1e:           } catch (IllegalStateException e) {
1:50c9f1e:             //This can be safely ignored
1:50c9f1e:           }
1:50c9f1e:         }
1:97c9f45:       
2:97c9f45:         if (transactionLog instanceof HOWLLog) {
1:97c9f45:             ((HOWLLog) transactionLog).doStop();
1:97c9f45:         }
1:97c9f45:     }
1:97c9f45: 
1:97c9f45:     private String getString(String property, String dflt) throws ConfigurationException {
1:97c9f45:         String value = (String) properties.get(property);
1:97c9f45:         if (value != null) {
1:97c9f45:             return value;
1:97c9f45:         }
1:97c9f45:         return dflt;
1:97c9f45:     }
1:97c9f45: 
1:97c9f45:     private int getInt(String property, int dflt) throws ConfigurationException {
1:97c9f45:         String value = (String) properties.get(property);
1:97c9f45:         if (value != null) {
1:97c9f45:             try {
1:97c9f45:                 return Integer.parseInt(value);
1:97c9f45:             } catch (Exception e) {
1:cde0cb1:                 throw new ConfigurationException(property, NLS.MESSAGES.getMessage("prop.value.not.int", property, value), e);
1:97c9f45:             }
1:97c9f45:         }
1:97c9f45:         return dflt;
1:97c9f45:     }
1:97c9f45: 
1:97c9f45:     private boolean getBool(String property, boolean dflt) throws ConfigurationException {
1:97c9f45:         String value = (String) properties.get(property);
1:97c9f45:         if (value != null) {
1:97c9f45:             try {
1:97c9f45:                 return Boolean.parseBoolean(value);
1:97c9f45:             } catch (Exception e) {
1:cde0cb1:                 throw new ConfigurationException(property, NLS.MESSAGES.getMessage("prop.value.not.boolean", property, value), e);
1:97c9f45:             }
1:97c9f45:         }
1:97c9f45:         return dflt;
1:97c9f45:     }
1:97c9f45: 
1:97c9f45:     /**
1:97c9f45:      * We use an inner static class to decouple this class from the spring-tx classes
1:97c9f45:      * in order to not have NoClassDefFoundError if those are not present.
1:97c9f45:      */
1:97c9f45:     public static class SpringTransactionManagerCreator {
1:97c9f45: 
1:6d5ae4f:         public AriesTransactionManagerImpl create(int defaultTransactionTimeoutSeconds, XidFactory xidFactory, TransactionLog transactionLog) throws XAException {
1:6d5ae4f:             return new AriesPlatformTransactionManager(defaultTransactionTimeoutSeconds, xidFactory, transactionLog);
1:97c9f45:         }
1:97c9f45: 
1:97c9f45:     }
1:97c9f45: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:50c9f1e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if(serviceRegistration != null) {
1:           try {
1:             serviceRegistration.unregister();
1:           } catch (IllegalStateException e) {
1:             //This can be safely ignored
1:           }
1:         }
commit:4854ac3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private ServiceRegistration<?> serviceRegistration;
/////////////////////////////////////////////////////////////////////////
1:         String[] ifar = clazzes.toArray(new String[clazzes.size()]);
1:         serviceRegistration = bundleContext.registerService(ifar, transactionManager, null);
commit:632f6c9
/////////////////////////////////////////////////////////////////////////
1:                 throw new ConfigurationException(null, e.getMessage(), e);
commit:60e8f74
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unused")
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:     public TransactionManagerService(String pid, @SuppressWarnings("rawtypes") Dictionary properties, BundleContext bundleContext) throws ConfigurationException {
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c391965
/////////////////////////////////////////////////////////////////////////
1: import org.apache.geronimo.transaction.log.HOWLLog;
commit:6d5ae4f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.transaction.internal;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.transaction.AriesTransactionManager;
/////////////////////////////////////////////////////////////////////////
1:     private AriesTransactionManagerImpl transactionManager;
/////////////////////////////////////////////////////////////////////////
1:                 transactionManager = new AriesTransactionManagerImpl(transactionTimeout, xidFactory, transactionLog);
/////////////////////////////////////////////////////////////////////////
1:         clazzes.add(AriesTransactionManager.class.getName());
/////////////////////////////////////////////////////////////////////////
1:         public AriesTransactionManagerImpl create(int defaultTransactionTimeoutSeconds, XidFactory xidFactory, TransactionLog transactionLog) throws XAException {
1:             return new AriesPlatformTransactionManager(defaultTransactionTimeoutSeconds, xidFactory, transactionLog);
commit:961cc39
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static final String HOWL_FLUSH_PARTIAL_BUFFERS = "aries.transaction.flushPartialBuffers";
/////////////////////////////////////////////////////////////////////////
1:             int bufferSizeKBytes = getInt(HOWL_BUFFER_SIZE, 4);
/////////////////////////////////////////////////////////////////////////
1:             boolean flushPartialBuffers = getBool(HOWL_FLUSH_PARTIAL_BUFFERS, true);
/////////////////////////////////////////////////////////////////////////
1:                                              flushPartialBuffers,
commit:1751b0a
/////////////////////////////////////////////////////////////////////////
commit:0782326
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static final String TMID = "aries.transaction.tmid";
/////////////////////////////////////////////////////////////////////////
1: 
1:         final String tmid = getString(TMID, pid);
1:         XidFactory xidFactory = new XidFactoryImpl(tmid.substring(0, Math.min(tmid.length(), 64)).getBytes());
/////////////////////////////////////////////////////////////////////////
1:                                              xidFactory,
commit:99264ad
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.util.ArrayList;
1: import javax.transaction.xa.XAException;
0: import org.apache.geronimo.transaction.log.HOWLLog;
1: import org.apache.geronimo.transaction.log.UnrecoverableLog;
1: import org.apache.geronimo.transaction.manager.RecoverableTransactionManager;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.cm.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
1:                 ((HOWLLog) transactionLog).doStart();
1:             } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
commit:13e8e0f
/////////////////////////////////////////////////////////////////////////
1:         // the max length of the factory should be 64
0:         XidFactory xidFactory = new XidFactoryImpl(pid.substring(0, Math.min(pid.length(), 64)).getBytes());
commit:3fbf745
commit:b33bc22
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.transaction;
/////////////////////////////////////////////////////////////////////////
1:     public static final String TRANSACTION_TIMEOUT = "aries.transaction.timeout";
1:     public static final String RECOVERABLE = "aries.transaction.recoverable";
1:     public static final String HOWL_BUFFER_CLASS_NAME = "aries.transaction.howl.bufferClassName";
1:     public static final String HOWL_BUFFER_SIZE = "aries.transaction.howl.bufferSize";
1:     public static final String HOWL_CHECKSUM_ENABLED = "aries.transaction.howl.checksumEnabled";
1:     public static final String HOWL_ADLER32_CHECKSUM = "aries.transaction.howl.adler32Checksum";
1:     public static final String HOWL_FLUSH_SLEEP_TIME = "aries.transaction.howl.flushSleepTime";
1:     public static final String HOWL_LOG_FILE_EXT = "aries.transaction.howl.logFileExt";
1:     public static final String HOWL_LOG_FILE_NAME = "aries.transaction.howl.logFileName";
1:     public static final String HOWL_MAX_BLOCKS_PER_FILE = "aries.transaction.howl.maxBlocksPerFile";
1:     public static final String HOWL_MAX_LOG_FILES = "aries.transaction.howl.maxLogFiles";
1:     public static final String HOWL_MAX_BUFFERS = "aries.transaction.howl.maxBuffers";
1:     public static final String HOWL_MIN_BUFFERS = "aries.transaction.howl.minBuffers";
1:     public static final String HOWL_THREADS_WAITING_FORCE_THRESHOLD = "aries.transaction.howl.threadsWaitingForceThreshold";
1:     public static final String HOWL_LOG_FILE_DIR = "aries.transaction.howl.logFileDir";
commit:97c9f45
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.servicemix.transaction;
1: 
1: import java.util.Dictionary;
1: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Properties;
0: import java.io.File;
0: import java.io.IOException;
1: 
0: import javax.transaction.xa.XAException;
1: import javax.transaction.TransactionManager;
1: import javax.transaction.TransactionSynchronizationRegistry;
1: import javax.transaction.UserTransaction;
1: 
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.ServiceRegistration;
0: import org.osgi.service.cm.ConfigurationException;
0: import org.apache.geronimo.transaction.manager.GeronimoTransactionManager;
1: import org.apache.geronimo.transaction.manager.TransactionLog;
1: import org.apache.geronimo.transaction.manager.XidFactory;
0: import org.apache.geronimo.transaction.manager.XidFactoryImpl;
0: import org.apache.geronimo.transaction.manager.RecoverableTransactionManager;
0: import org.apache.geronimo.transaction.log.HOWLLog;
0: import org.apache.geronimo.transaction.log.UnrecoverableLog;
0: import org.objectweb.howl.log.LogConfigurationException;
1: 
1: /**
1:  */
1: public class TransactionManagerService {
1: 
0:     public static final String TRANSACTION_TIMEOUT = "felix.transaction.timeout";
0:     public static final String RECOVERABLE = "felix.transaction.recoverable";
0:     public static final String HOWL_BUFFER_CLASS_NAME = "felix.transaction.howl.bufferClassName";
0:     public static final String HOWL_BUFFER_SIZE = "felix.transaction.howl.bufferSize";
0:     public static final String HOWL_CHECKSUM_ENABLED = "felix.transaction.howl.checksumEnabled";
0:     public static final String HOWL_ADLER32_CHECKSUM = "felix.transaction.howl.adler32Checksum";
0:     public static final String HOWL_FLUSH_SLEEP_TIME = "felix.transaction.howl.flushSleepTime";
0:     public static final String HOWL_LOG_FILE_EXT = "felix.transaction.howl.logFileExt";
0:     public static final String HOWL_LOG_FILE_NAME = "felix.transaction.howl.logFileName";
0:     public static final String HOWL_MAX_BLOCKS_PER_FILE = "felix.transaction.howl.maxBlocksPerFile";
0:     public static final String HOWL_MAX_LOG_FILES = "felix.transaction.howl.maxLogFiles";
0:     public static final String HOWL_MAX_BUFFERS = "felix.transaction.howl.maxBuffers";
0:     public static final String HOWL_MIN_BUFFERS = "felix.transaction.howl.minBuffers";
0:     public static final String HOWL_THREADS_WAITING_FORCE_THRESHOLD = "felix.transaction.howl.threadsWaitingForceThreshold";
0:     public static final String HOWL_LOG_FILE_DIR = "felix.transaction.howl.logFileDir";
1: 
1:     public static final int DEFAULT_TRANSACTION_TIMEOUT = 600; // 600 seconds -> 10 minutes
1:     public static final boolean DEFAULT_RECOVERABLE = false;   // not recoverable by default
1: 
1:     private static final String PLATFORM_TRANSACTION_MANAGER_CLASS = "org.springframework.transaction.PlatformTransactionManager";
1: 
1:     private final String pid;
1:     private final Dictionary properties;
1:     private final BundleContext bundleContext;
1:     private boolean useSpring;
0:     private GeronimoTransactionManager transactionManager;
1:     private TransactionLog transactionLog;
0:     private ServiceRegistration serviceRegistration;
1: 
0:     public TransactionManagerService(String pid, Dictionary properties, BundleContext bundleContext) throws ConfigurationException {
1:         this.pid = pid;
1:         this.properties = properties;
1:         this.bundleContext = bundleContext;
1:         // Transaction timeout
1:         int transactionTimeout = getInt(TRANSACTION_TIMEOUT, DEFAULT_TRANSACTION_TIMEOUT);
1:         if (transactionTimeout <= 0) {
0:             throw new ConfigurationException(TRANSACTION_TIMEOUT, "Property " + TRANSACTION_TIMEOUT + " must be > 0");
1:         }
0:         // XID factory
0:         XidFactory xidFactory = new XidFactoryImpl(pid.getBytes());
1:         // Transaction log
1:         if (getBool(RECOVERABLE, DEFAULT_RECOVERABLE)) {
1:             String bufferClassName = getString(HOWL_BUFFER_CLASS_NAME, "org.objectweb.howl.log.BlockLogBuffer");
0:             int bufferSizeKBytes = getInt(HOWL_BUFFER_SIZE, 32);
1:             if (bufferSizeKBytes < 1 || bufferSizeKBytes > 32) {
0:                 throw new ConfigurationException(HOWL_BUFFER_SIZE, "bufferSize must be between 1 and 32");
1:             }
1:             boolean checksumEnabled = getBool(HOWL_CHECKSUM_ENABLED, true);
1:             boolean adler32Checksum = getBool(HOWL_ADLER32_CHECKSUM, true);
1:             int flushSleepTimeMilliseconds = getInt(HOWL_FLUSH_SLEEP_TIME, 50);
1:             String logFileExt = getString(HOWL_LOG_FILE_EXT, "log");
1:             String logFileName = getString(HOWL_LOG_FILE_NAME, "transaction");
1:             int maxBlocksPerFile = getInt(HOWL_MAX_BLOCKS_PER_FILE, -1);
1:             int maxLogFiles = getInt(HOWL_MAX_LOG_FILES, 2);
1:             int minBuffers = getInt(HOWL_MIN_BUFFERS, 4);
1:             if (minBuffers < 0) {
0:                 throw new ConfigurationException(HOWL_MIN_BUFFERS, "minBuffers must be > 0");
1:             }
1:             int maxBuffers = getInt(HOWL_MAX_BUFFERS, 0);
1:             if (maxBuffers > 0 && minBuffers < maxBuffers) {
0:                 throw new ConfigurationException(HOWL_MAX_BUFFERS, "minBuffers must be <= maxBuffers");
1:             }
1:             int threadsWaitingForceThreshold = getInt(HOWL_THREADS_WAITING_FORCE_THRESHOLD, -1);
1:             String logFileDir = getString(HOWL_LOG_FILE_DIR, null);
1:             if (logFileDir == null || logFileDir.length() == 0 || !new File(logFileDir).isAbsolute()) {
0:                 throw new ConfigurationException(HOWL_LOG_FILE_DIR, "Property should be set to an absolute directory");
1:             }
1:             try {
1:                 transactionLog = new HOWLLog(bufferClassName,
1:                                              bufferSizeKBytes,
1:                                              checksumEnabled,
1:                                              adler32Checksum,
1:                                              flushSleepTimeMilliseconds,
1:                                              logFileDir,
1:                                              logFileExt,
1:                                              logFileName,
1:                                              maxBlocksPerFile,
1:                                              maxBuffers,
1:                                              maxLogFiles,
1:                                              minBuffers,
1:                                              threadsWaitingForceThreshold,
0:                                              xidFactory != null ? xidFactory : new XidFactoryImpl(),
1:                                              null);
0:             } catch (LogConfigurationException e) {
1:                 // This should not really happen as we've checked properties earlier
0:                 throw new ConfigurationException(null, null, e);
0:             } catch (IOException e) {
1:                 // This should not really happen as we've checked properties earlier
0:                 throw new ConfigurationException(null, null, e);
1:             }
1:         } else {
1:             transactionLog =  new UnrecoverableLog();
1:         }
1:         // Create transaction manager
1:         try {
1:             try {
1:                 transactionManager = new SpringTransactionManagerCreator().create(transactionTimeout, xidFactory, transactionLog);
1:                 useSpring = true;
1:             } catch (NoClassDefFoundError e) {
0:                 transactionManager = new GeronimoTransactionManager(transactionTimeout, xidFactory, transactionLog);
1:             }
1:         } catch (XAException e) {
0:             throw new RuntimeException("Error recovering transaction log", e);
1:         }
1:     }
1: 
1:     public void start() throws Exception {
1:         if (transactionLog instanceof HOWLLog) {
0:             ((HOWLLog) transactionLog).doStart();
1:         }
1:         List<String> clazzes = new ArrayList<String>();
1:         clazzes.add(TransactionManager.class.getName());
1:         clazzes.add(TransactionSynchronizationRegistry.class.getName());
1:         clazzes.add(UserTransaction.class.getName());
1:         clazzes.add(RecoverableTransactionManager.class.getName());
1:         if (useSpring) {
1:             clazzes.add(PLATFORM_TRANSACTION_MANAGER_CLASS);
1:         }
0:         serviceRegistration = bundleContext.registerService(clazzes.toArray(new String[clazzes.size()]), transactionManager, new Properties());
1:     }
1: 
1:     public void close() throws Exception {
0:         if (serviceRegistration != null) {
0:             serviceRegistration.unregister();
1:         }
1:         if (transactionLog instanceof HOWLLog) {
1:             ((HOWLLog) transactionLog).doStop();
1:         }
1:     }
1: 
1:     private String getString(String property, String dflt) throws ConfigurationException {
1:         String value = (String) properties.get(property);
1:         if (value != null) {
1:             return value;
1:         }
1:         return dflt;
1:     }
1: 
1:     private int getInt(String property, int dflt) throws ConfigurationException {
1:         String value = (String) properties.get(property);
1:         if (value != null) {
1:             try {
1:                 return Integer.parseInt(value);
1:             } catch (Exception e) {
0:                 throw new ConfigurationException(property, "Error parsing " + property + "(" + value + ") property as an integer", e);
1:             }
1:         }
1:         return dflt;
1:     }
1: 
1:     private boolean getBool(String property, boolean dflt) throws ConfigurationException {
1:         String value = (String) properties.get(property);
1:         if (value != null) {
1:             try {
1:                 return Boolean.parseBoolean(value);
1:             } catch (Exception e) {
0:                 throw new ConfigurationException(property, "Error parsing " + property + "(" + value + ") property as a boolean", e);
1:             }
1:         }
1:         return dflt;
1:     }
1: 
1:     /**
1:      * We use an inner static class to decouple this class from the spring-tx classes
1:      * in order to not have NoClassDefFoundError if those are not present.
1:      */
1:     public static class SpringTransactionManagerCreator {
1: 
0:         public GeronimoTransactionManager create(int defaultTransactionTimeoutSeconds, XidFactory xidFactory, TransactionLog transactionLog) throws XAException {
0:             return new GeronimoPlatformTransactionManager(defaultTransactionTimeoutSeconds, xidFactory, transactionLog);
1:         }
1: 
1:     }
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:cde0cb1
/////////////////////////////////////////////////////////////////////////
1:             throw new ConfigurationException(TRANSACTION_TIMEOUT, NLS.MESSAGES.getMessage("tx.timeout.greaterthan.zero"));
/////////////////////////////////////////////////////////////////////////
1:                 throw new ConfigurationException(HOWL_BUFFER_SIZE, NLS.MESSAGES.getMessage("buffer.size.between.one.and.thirtytwo"));
/////////////////////////////////////////////////////////////////////////
1:                 throw new ConfigurationException(HOWL_MIN_BUFFERS, NLS.MESSAGES.getMessage("min.buffers.greaterthan.zero"));
1:                 throw new ConfigurationException(HOWL_MAX_BUFFERS, NLS.MESSAGES.getMessage("max.buffers.greaterthan.min.buffers"));
1:                 throw new ConfigurationException(HOWL_LOG_FILE_DIR, NLS.MESSAGES.getMessage("log.file.dir"));
/////////////////////////////////////////////////////////////////////////
1:             throw new RuntimeException(NLS.MESSAGES.getMessage("tx.recovery.error"), e);
/////////////////////////////////////////////////////////////////////////
1:                 throw new ConfigurationException(property, NLS.MESSAGES.getMessage("prop.value.not.int", property, value), e);
/////////////////////////////////////////////////////////////////////////
1:                 throw new ConfigurationException(property, NLS.MESSAGES.getMessage("prop.value.not.boolean", property, value), e);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:047a2ae
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.AriesFrameworkUtil;
/////////////////////////////////////////////////////////////////////////
0:         AriesFrameworkUtil.safeUnregisterService(serviceRegistration);
0:       
============================================================================