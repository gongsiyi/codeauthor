1:4243a2b: /**
1:4243a2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4243a2b:  * contributor license agreements.  See the NOTICE file distributed with
1:4243a2b:  * this work for additional information regarding copyright ownership.
1:4243a2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4243a2b:  * (the "License"); you may not use this file except in compliance with
1:4243a2b:  * the License.  You may obtain a copy of the License at
3:4243a2b:  *
1:4243a2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4243a2b:  *
1:4243a2b:  * Unless required by applicable law or agreed to in writing, software
1:4243a2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4243a2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4243a2b:  * See the License for the specific language governing permissions and
1:4243a2b:  * limitations under the License.
3:4243a2b:  */
1:4243a2b: package org.apache.aries.transaction.jms.internal;
11:4243a2b: 
1:4c2ef4a: import java.util.List;
1:4c2ef4a: import java.util.concurrent.CopyOnWriteArrayList;
1:4243a2b: import java.util.concurrent.atomic.AtomicBoolean;
1:4243a2b: 
1:b42c2dd: import javax.jms.Connection;
1:4c2ef4a: import javax.jms.IllegalStateException;
1:b42c2dd: import javax.jms.JMSException;
1:b42c2dd: import javax.jms.Session;
1:4c2ef4a: 
1:4c2ef4a: import org.apache.commons.pool.KeyedPoolableObjectFactory;
1:4c2ef4a: import org.apache.commons.pool.impl.GenericKeyedObjectPool;
1:4c2ef4a: import org.apache.commons.pool.impl.GenericObjectPool;
1:4c2ef4a: 
1:4243a2b: /**
1:4243a2b:  * Holds a real JMS connection along with the session pools associated with it.
1:4c2ef4a:  * <p/>
1:4c2ef4a:  * Instances of this class are shared amongst one or more PooledConnection object and must
1:4c2ef4a:  * track the session objects that are loaned out for cleanup on close as well as ensuring
1:4c2ef4a:  * that the temporary destinations of the managed Connection are purged when all references
1:4c2ef4a:  * to this ConnectionPool are released.
1:4243a2b:  */
1:4243a2b: public class ConnectionPool {
1:4c2ef4a:     protected Connection connection;
1:4243a2b:     private int referenceCount;
1:4243a2b:     private long lastUsed = System.currentTimeMillis();
1:4c2ef4a:     private final long firstUsed = lastUsed;
1:4243a2b:     private boolean hasExpired;
1:4243a2b:     private int idleTimeout = 30 * 1000;
1:4243a2b:     private long expiryTimeout = 0l;
1:4c2ef4a:     private boolean useAnonymousProducers = true;
1:4243a2b: 
1:4c2ef4a:     private final AtomicBoolean started = new AtomicBoolean(false);
1:4c2ef4a:     private final GenericKeyedObjectPool<SessionKey, PooledSession> sessionPool;
1:4c2ef4a:     private final List<PooledSession> loanedSessions = new CopyOnWriteArrayList<PooledSession>();
1:4243a2b: 
1:4c2ef4a:     public ConnectionPool(Connection connection) {
1:4c2ef4a: 
1:4c2ef4a:         this.connection = wrap(connection);
1:4c2ef4a: 
1:4c2ef4a:         // Create our internal Pool of session instances.
1:4c2ef4a:         this.sessionPool = new GenericKeyedObjectPool<SessionKey, PooledSession>(
1:4c2ef4a:                 new KeyedPoolableObjectFactory<SessionKey, PooledSession>() {
1:4c2ef4a: 
1:4c2ef4a:                     @Override
1:4c2ef4a:                     public void activateObject(SessionKey key, PooledSession session) throws Exception {
1:4c2ef4a:                         ConnectionPool.this.loanedSessions.add(session);
1:4c2ef4a:                     }
1:4c2ef4a: 
1:4c2ef4a:                     @Override
1:4c2ef4a:                     public void destroyObject(SessionKey key, PooledSession session) throws Exception {
1:4c2ef4a:                         ConnectionPool.this.loanedSessions.remove(session);
1:4c2ef4a:                         session.getInternalSession().close();
1:4c2ef4a:                     }
1:4c2ef4a: 
1:4c2ef4a:                     @Override
1:4c2ef4a:                     public PooledSession makeObject(SessionKey key) throws Exception {
1:4c2ef4a:                         Session session = makeSession(key);
1:4c2ef4a:                         return new PooledSession(key, session, sessionPool, key.isTransacted(), useAnonymousProducers);
1:4c2ef4a:                     }
1:4c2ef4a: 
1:4c2ef4a:                     @Override
1:4c2ef4a:                     public void passivateObject(SessionKey key, PooledSession session) throws Exception {
1:4c2ef4a:                         ConnectionPool.this.loanedSessions.remove(session);
1:4c2ef4a:                     }
1:4c2ef4a: 
1:4c2ef4a:                     @Override
1:4c2ef4a:                     public boolean validateObject(SessionKey key, PooledSession session) {
1:4c2ef4a:                         return true;
1:4c2ef4a:                     }
18:4243a2b:                 }
1:4c2ef4a:         );
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     // useful when external failure needs to force expiry
1:4c2ef4a:     public void setHasExpired(boolean val) {
1:4c2ef4a:         hasExpired = val;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     protected Session makeSession(SessionKey key) throws JMSException {
1:4c2ef4a:         return connection.createSession(key.isTransacted(), key.getAckMode());
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     protected Connection wrap(Connection connection) {
1:4c2ef4a:         return connection;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     protected void unWrap(Connection connection) {
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public void start() throws JMSException {
1:4243a2b:         if (started.compareAndSet(false, true)) {
4:4243a2b:             try {
1:4243a2b:                 connection.start();
1:4243a2b:             } catch (JMSException e) {
1:4243a2b:                 started.set(false);
1:4243a2b:                 throw(e);
1:4243a2b:             }
1:4243a2b:         }
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     public synchronized Connection getConnection() {
1:4243a2b:         return connection;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public Session createSession(boolean transacted, int ackMode) throws JMSException {
2:4243a2b:         SessionKey key = new SessionKey(transacted, ackMode);
1:4c2ef4a:         PooledSession session;
1:4c2ef4a:         try {
1:4c2ef4a:             session = sessionPool.borrowObject(key);
1:4c2ef4a:         } catch (Exception e) {
1:4c2ef4a:             javax.jms.IllegalStateException illegalStateException = new IllegalStateException(e.toString());
1:4c2ef4a:             illegalStateException.initCause(e);
1:4c2ef4a:             throw illegalStateException;
1:4243a2b:         }
2:4243a2b:         return session;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public synchronized void close() {
1:4243a2b:         if (connection != null) {
1:4243a2b:             try {
1:4c2ef4a:                 sessionPool.close();
1:4c2ef4a:             } catch (Exception e) {
1:4243a2b:             } finally {
1:4243a2b:                 try {
1:4243a2b:                     connection.close();
4:4243a2b:                 } catch (Exception e) {
1:4243a2b:                 } finally {
1:4243a2b:                     connection = null;
1:4243a2b:                 }
1:4243a2b:             }
1:4243a2b:         }
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public synchronized void incrementReferenceCount() {
1:4243a2b:         referenceCount++;
1:4243a2b:         lastUsed = System.currentTimeMillis();
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public synchronized void decrementReferenceCount() {
1:4243a2b:         referenceCount--;
1:4243a2b:         lastUsed = System.currentTimeMillis();
1:4243a2b:         if (referenceCount == 0) {
1:4c2ef4a:             // Loaned sessions are those that are active in the sessionPool and
1:4c2ef4a:             // have not been closed by the client before closing the connection.
1:4c2ef4a:             // These need to be closed so that all session's reflect the fact
1:4c2ef4a:             // that the parent Connection is closed.
1:4243a2b:             for (PooledSession session : this.loanedSessions) {
1:4243a2b:                 try {
1:4243a2b:                     session.close();
1:4243a2b:                 } catch (Exception e) {
1:4243a2b:                 }
1:4243a2b:             }
1:4243a2b:             this.loanedSessions.clear();
1:4243a2b: 
1:4c2ef4a:             unWrap(getConnection());
1:4c2ef4a: 
1:4c2ef4a:             expiredCheck();
1:4243a2b:         }
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     /**
1:4c2ef4a:      * Determines if this Connection has expired.
1:4c2ef4a:      * <p/>
1:4c2ef4a:      * A ConnectionPool is considered expired when all references to it are released AND either
1:4c2ef4a:      * the configured idleTimeout has elapsed OR the configured expiryTimeout has elapsed.
1:4c2ef4a:      * Once a ConnectionPool is determined to have expired its underlying Connection is closed.
1:4c2ef4a:      *
1:4243a2b:      * @return true if this connection has expired.
1:4243a2b:      */
1:4243a2b:     public synchronized boolean expiredCheck() {
1:4c2ef4a: 
1:4c2ef4a:         boolean expired = false;
1:4c2ef4a: 
1:4243a2b:         if (connection == null) {
3:4243a2b:             return true;
1:4243a2b:         }
1:4c2ef4a: 
1:4243a2b:         if (hasExpired) {
1:4243a2b:             if (referenceCount == 0) {
1:4243a2b:                 close();
1:4c2ef4a:                 expired = true;
1:4243a2b:             }
1:4243a2b:         }
1:4c2ef4a: 
1:4c2ef4a:         if (expiryTimeout > 0 && System.currentTimeMillis() > firstUsed + expiryTimeout) {
1:4243a2b:             hasExpired = true;
1:4243a2b:             if (referenceCount == 0) {
1:4243a2b:                 close();
1:4c2ef4a:                 expired = true;
1:4243a2b:             }
1:4243a2b:         }
1:4c2ef4a: 
1:4c2ef4a:         // Only set hasExpired here is no references, as a Connection with references is by
1:4c2ef4a:         // definition not idle at this time.
1:4c2ef4a:         if (referenceCount == 0 && idleTimeout > 0 && System.currentTimeMillis() > lastUsed + idleTimeout) {
1:4c2ef4a:             hasExpired = true;
1:4c2ef4a:             close();
1:4c2ef4a:             expired = true;
1:4c2ef4a:         }
1:4c2ef4a: 
1:4c2ef4a:         return expired;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public int getIdleTimeout() {
1:4243a2b:         return idleTimeout;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public void setIdleTimeout(int idleTimeout) {
1:4243a2b:         this.idleTimeout = idleTimeout;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public void setExpiryTimeout(long expiryTimeout) {
1:4c2ef4a:         this.expiryTimeout = expiryTimeout;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public long getExpiryTimeout() {
1:4243a2b:         return expiryTimeout;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     public int getMaximumActiveSessionPerConnection() {
1:4c2ef4a:         return this.sessionPool.getMaxActive();
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     public void setMaximumActiveSessionPerConnection(int maximumActiveSessionPerConnection) {
1:4c2ef4a:         this.sessionPool.setMaxActive(maximumActiveSessionPerConnection);
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     public boolean isUseAnonymousProducers() {
1:4c2ef4a:         return this.useAnonymousProducers;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     public void setUseAnonymousProducers(boolean value) {
1:4c2ef4a:         this.useAnonymousProducers = value;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     /**
1:4c2ef4a:      * @return the total number of Pooled session including idle sessions that are not
1:4c2ef4a:      *          currently loaned out to any client.
1:4c2ef4a:      */
1:4c2ef4a:     public int getNumSessions() {
1:4c2ef4a:         return this.sessionPool.getNumIdle() + this.sessionPool.getNumActive();
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     /**
1:4c2ef4a:      * @return the total number of Sessions that are in the Session pool but not loaned out.
1:4c2ef4a:      */
1:4c2ef4a:     public int getNumIdleSessions() {
1:4c2ef4a:         return this.sessionPool.getNumIdle();
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     /**
1:4c2ef4a:      * @return the total number of Session's that have been loaned to PooledConnection instances.
1:4c2ef4a:      */
1:4c2ef4a:     public int getNumActiveSessions() {
1:4c2ef4a:         return this.sessionPool.getNumActive();
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     /**
1:4c2ef4a:      * Configure whether the createSession method should block when there are no more idle sessions and the
1:4c2ef4a:      * pool already contains the maximum number of active sessions.  If false the create method will fail
1:4c2ef4a:      * and throw an exception.
1:4c2ef4a:      *
1:4c2ef4a:      * @param block
1:4c2ef4a:      * 		Indicates whether blocking should be used to wait for more space to create a session.
1:4c2ef4a:      */
1:4c2ef4a:     public void setBlockIfSessionPoolIsFull(boolean block) {
1:4c2ef4a:         this.sessionPool.setWhenExhaustedAction(
1:4c2ef4a:                 (block ? GenericObjectPool.WHEN_EXHAUSTED_BLOCK : GenericObjectPool.WHEN_EXHAUSTED_FAIL));
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     public boolean isBlockIfSessionPoolIsFull() {
1:4c2ef4a:         return this.sessionPool.getWhenExhaustedAction() == GenericObjectPool.WHEN_EXHAUSTED_BLOCK;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     /**
1:4c2ef4a:      * Returns the timeout to use for blocking creating new sessions
1:4c2ef4a:      *
1:4c2ef4a:      * @return true if the pooled Connection createSession method will block when the limit is hit.
1:4c2ef4a:      * @see #setBlockIfSessionPoolIsFull(boolean)
1:4c2ef4a:      */
1:4c2ef4a:     public long getBlockIfSessionPoolIsFullTimeout() {
1:4c2ef4a:         return this.sessionPool.getMaxWait();
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     /**
1:4c2ef4a:      * Controls the behavior of the internal session pool. By default the call to
1:4c2ef4a:      * Connection.getSession() will block if the session pool is full.  This setting
1:4c2ef4a:      * will affect how long it blocks and throws an exception after the timeout.
1:4c2ef4a:      *
1:4c2ef4a:      * The size of the session pool is controlled by the @see #maximumActive
1:4c2ef4a:      * property.
1:4c2ef4a:      *
1:4c2ef4a:      * Whether or not the call to create session blocks is controlled by the @see #blockIfSessionPoolIsFull
1:4c2ef4a:      * property
1:4c2ef4a:      *
1:4c2ef4a:      * @param blockIfSessionPoolIsFullTimeout - if blockIfSessionPoolIsFullTimeout is true,
1:4c2ef4a:      *                                        then use this setting to configure how long to block before retry
1:4c2ef4a:      */
1:4c2ef4a:     public void setBlockIfSessionPoolIsFullTimeout(long blockIfSessionPoolIsFullTimeout) {
1:4c2ef4a:         this.sessionPool.setMaxWait(blockIfSessionPoolIsFullTimeout);
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     @Override
1:4c2ef4a:     public String toString() {
1:4c2ef4a:         return "ConnectionPool[" + connection + "]";
1:4243a2b:     }
1:4243a2b: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:b42c2dd
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
/////////////////////////////////////////////////////////////////////////
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:4c2ef4a
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.concurrent.CopyOnWriteArrayList;
0: import javax.jms.*;
1: import javax.jms.IllegalStateException;
1: 
1: import org.apache.commons.pool.KeyedPoolableObjectFactory;
1: import org.apache.commons.pool.impl.GenericKeyedObjectPool;
1: import org.apache.commons.pool.impl.GenericObjectPool;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1:  * <p/>
1:  * Instances of this class are shared amongst one or more PooledConnection object and must
1:  * track the session objects that are loaned out for cleanup on close as well as ensuring
1:  * that the temporary destinations of the managed Connection are purged when all references
1:  * to this ConnectionPool are released.
0:     private static final transient Logger LOG = LoggerFactory.getLogger(ConnectionPool.class);
1: 
1:     protected Connection connection;
1:     private final long firstUsed = lastUsed;
1:     private boolean useAnonymousProducers = true;
1:     private final AtomicBoolean started = new AtomicBoolean(false);
1:     private final GenericKeyedObjectPool<SessionKey, PooledSession> sessionPool;
1:     private final List<PooledSession> loanedSessions = new CopyOnWriteArrayList<PooledSession>();
1:     public ConnectionPool(Connection connection) {
1: 
1:         this.connection = wrap(connection);
1: 
1:         // Create our internal Pool of session instances.
1:         this.sessionPool = new GenericKeyedObjectPool<SessionKey, PooledSession>(
1:                 new KeyedPoolableObjectFactory<SessionKey, PooledSession>() {
1: 
1:                     @Override
1:                     public void activateObject(SessionKey key, PooledSession session) throws Exception {
1:                         ConnectionPool.this.loanedSessions.add(session);
1:                     }
1: 
1:                     @Override
1:                     public void destroyObject(SessionKey key, PooledSession session) throws Exception {
1:                         ConnectionPool.this.loanedSessions.remove(session);
1:                         session.getInternalSession().close();
1:                     }
1: 
1:                     @Override
1:                     public PooledSession makeObject(SessionKey key) throws Exception {
1:                         Session session = makeSession(key);
1:                         return new PooledSession(key, session, sessionPool, key.isTransacted(), useAnonymousProducers);
1:                     }
1: 
1:                     @Override
1:                     public void passivateObject(SessionKey key, PooledSession session) throws Exception {
1:                         ConnectionPool.this.loanedSessions.remove(session);
1:                     }
1: 
1:                     @Override
1:                     public boolean validateObject(SessionKey key, PooledSession session) {
1:                         return true;
1:                     }
1:         );
1:     // useful when external failure needs to force expiry
1:     public void setHasExpired(boolean val) {
1:         hasExpired = val;
1:     }
1: 
1:     protected Session makeSession(SessionKey key) throws JMSException {
1:         return connection.createSession(key.isTransacted(), key.getAckMode());
1:     }
1: 
1:     protected Connection wrap(Connection connection) {
1:         return connection;
1:     }
1: 
1:     protected void unWrap(Connection connection) {
/////////////////////////////////////////////////////////////////////////
1:     public synchronized Connection getConnection() {
1:         PooledSession session;
1:         try {
1:             session = sessionPool.borrowObject(key);
1:         } catch (Exception e) {
1:             javax.jms.IllegalStateException illegalStateException = new IllegalStateException(e.toString());
1:             illegalStateException.initCause(e);
1:             throw illegalStateException;
1:                 sessionPool.close();
1:             } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:             // Loaned sessions are those that are active in the sessionPool and
1:             // have not been closed by the client before closing the connection.
1:             // These need to be closed so that all session's reflect the fact
1:             // that the parent Connection is closed.
/////////////////////////////////////////////////////////////////////////
1:             unWrap(getConnection());
1: 
1:             expiredCheck();
1:      * Determines if this Connection has expired.
1:      * <p/>
1:      * A ConnectionPool is considered expired when all references to it are released AND either
1:      * the configured idleTimeout has elapsed OR the configured expiryTimeout has elapsed.
1:      * Once a ConnectionPool is determined to have expired its underlying Connection is closed.
1:      *
1: 
1:         boolean expired = false;
1: 
1: 
1:                 expired = true;
1: 
1:         if (expiryTimeout > 0 && System.currentTimeMillis() > firstUsed + expiryTimeout) {
1:                 expired = true;
1: 
1:         // Only set hasExpired here is no references, as a Connection with references is by
1:         // definition not idle at this time.
1:         if (referenceCount == 0 && idleTimeout > 0 && System.currentTimeMillis() > lastUsed + idleTimeout) {
1:             hasExpired = true;
1:             close();
1:             expired = true;
1:         }
1: 
1:         return expired;
/////////////////////////////////////////////////////////////////////////
1:         this.expiryTimeout = expiryTimeout;
1:     public int getMaximumActiveSessionPerConnection() {
1:         return this.sessionPool.getMaxActive();
1:     public void setMaximumActiveSessionPerConnection(int maximumActiveSessionPerConnection) {
1:         this.sessionPool.setMaxActive(maximumActiveSessionPerConnection);
1:     }
1: 
1:     public boolean isUseAnonymousProducers() {
1:         return this.useAnonymousProducers;
1:     }
1: 
1:     public void setUseAnonymousProducers(boolean value) {
1:         this.useAnonymousProducers = value;
1:     }
1: 
1:     /**
1:      * @return the total number of Pooled session including idle sessions that are not
1:      *          currently loaned out to any client.
1:      */
1:     public int getNumSessions() {
1:         return this.sessionPool.getNumIdle() + this.sessionPool.getNumActive();
1:     }
1: 
1:     /**
1:      * @return the total number of Sessions that are in the Session pool but not loaned out.
1:      */
1:     public int getNumIdleSessions() {
1:         return this.sessionPool.getNumIdle();
1:     }
1: 
1:     /**
1:      * @return the total number of Session's that have been loaned to PooledConnection instances.
1:      */
1:     public int getNumActiveSessions() {
1:         return this.sessionPool.getNumActive();
1:     }
1: 
1:     /**
1:      * Configure whether the createSession method should block when there are no more idle sessions and the
1:      * pool already contains the maximum number of active sessions.  If false the create method will fail
1:      * and throw an exception.
1:      *
1:      * @param block
1:      * 		Indicates whether blocking should be used to wait for more space to create a session.
1:      */
1:     public void setBlockIfSessionPoolIsFull(boolean block) {
1:         this.sessionPool.setWhenExhaustedAction(
1:                 (block ? GenericObjectPool.WHEN_EXHAUSTED_BLOCK : GenericObjectPool.WHEN_EXHAUSTED_FAIL));
1:     }
1: 
1:     public boolean isBlockIfSessionPoolIsFull() {
1:         return this.sessionPool.getWhenExhaustedAction() == GenericObjectPool.WHEN_EXHAUSTED_BLOCK;
1:     }
1: 
1:     /**
1:      * Returns the timeout to use for blocking creating new sessions
1:      *
1:      * @return true if the pooled Connection createSession method will block when the limit is hit.
1:      * @see #setBlockIfSessionPoolIsFull(boolean)
1:      */
1:     public long getBlockIfSessionPoolIsFullTimeout() {
1:         return this.sessionPool.getMaxWait();
1:     }
1: 
1:     /**
1:      * Controls the behavior of the internal session pool. By default the call to
1:      * Connection.getSession() will block if the session pool is full.  This setting
1:      * will affect how long it blocks and throws an exception after the timeout.
1:      *
1:      * The size of the session pool is controlled by the @see #maximumActive
1:      * property.
1:      *
1:      * Whether or not the call to create session blocks is controlled by the @see #blockIfSessionPoolIsFull
1:      * property
1:      *
1:      * @param blockIfSessionPoolIsFullTimeout - if blockIfSessionPoolIsFullTimeout is true,
1:      *                                        then use this setting to configure how long to block before retry
1:      */
1:     public void setBlockIfSessionPoolIsFullTimeout(long blockIfSessionPoolIsFullTimeout) {
1:         this.sessionPool.setMaxWait(blockIfSessionPoolIsFullTimeout);
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         return "ConnectionPool[" + connection + "]";
commit:4243a2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.transaction.jms.internal;
1: 
0: import java.util.Iterator;
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.ConcurrentLinkedQueue;
1: import java.util.concurrent.atomic.AtomicBoolean;
0: import javax.jms.Connection;
0: import javax.jms.ExceptionListener;
0: import javax.jms.JMSException;
0: import javax.jms.Session;
1: 
0: import org.apache.commons.pool.ObjectPoolFactory;
1: 
1: /**
1:  * Holds a real JMS connection along with the session pools associated with it.
1:  *
1:  *
1:  */
1: public class ConnectionPool {
1: 
0:     private Connection connection;
0:     private ConcurrentHashMap<SessionKey, SessionPool> cache;
0:     private ConcurrentLinkedQueue<PooledSession> loanedSessions = new ConcurrentLinkedQueue<PooledSession>();
0:     private AtomicBoolean started = new AtomicBoolean(false);
1:     private int referenceCount;
0:     private ObjectPoolFactory poolFactory;
1:     private long lastUsed = System.currentTimeMillis();
0:     private long firstUsed = lastUsed;
0:     private boolean hasFailed;
1:     private boolean hasExpired;
1:     private int idleTimeout = 30 * 1000;
1:     private long expiryTimeout = 0l;
1: 
0:     public ConnectionPool(Connection connection, ObjectPoolFactory poolFactory) throws JMSException {
0:         this(connection, new ConcurrentHashMap<SessionKey, SessionPool>(), poolFactory);
0:         /*
0:         TODO: activemq specific
0:         // Add a transport Listener so that we can notice if this connection
0:         // should be expired due to a connection failure.
0:         connection.addTransportListener(new TransportListener() {
0:             public void onCommand(Object command) {
1:             }
1: 
0:             public void onException(IOException error) {
0:                 synchronized (ConnectionPool.this) {
0:                     hasFailed = true;
1:                 }
1:             }
1: 
0:             public void transportInterupted() {
1:             }
1: 
0:             public void transportResumed() {
1:             }
0:         });
1: 
0:         // make sure that we set the hasFailed flag, in case the transport already failed
0:         // prior to the addition of our new TransportListener
0:         if(connection.isTransportFailed()) {
0:             hasFailed = true;
1:         }
1:         */
0:         connection.setExceptionListener(new ExceptionListener() {
0:             public void onException(JMSException exception) {
0:                 synchronized (ConnectionPool.this) {
0:                     hasFailed = true;
1:                 }
1:             }
0:         });
1:     }
1: 
0:     public ConnectionPool(Connection connection, ConcurrentHashMap<SessionKey, SessionPool> cache, ObjectPoolFactory poolFactory) {
0:         this.connection = connection;
0:         this.cache = cache;
0:         this.poolFactory = poolFactory;
1:     }
1: 
1:     public void start() throws JMSException {
1:         if (started.compareAndSet(false, true)) {
1:             try {
1:                 connection.start();
1:             } catch (JMSException e) {
1:                 started.set(false);
1:                 throw(e);
1:             }
1:         }
1:     }
1: 
0:     public synchronized javax.jms.Connection getConnection() {
1:         return connection;
1:     }
1: 
1:     public Session createSession(boolean transacted, int ackMode) throws JMSException {
1:         SessionKey key = new SessionKey(transacted, ackMode);
0:         SessionPool pool = null;
0:         pool = cache.get(key);
0:         if (pool == null) {
0:             SessionPool newPool = createSessionPool(key);
0:             SessionPool prevPool = cache.putIfAbsent(key, newPool);
0:             if (prevPool != null && prevPool != newPool) {
0:                 // newPool was not the first one to be associated with this
0:                 // key... close created session pool
1:                 try {
0:                     newPool.close();
1:                 } catch (Exception e) {
0:                     throw new JMSException(e.getMessage());
1:                 }
1:             }
0:             pool = cache.get(key); // this will return a non-null value...
1:         }
0:         PooledSession session = pool.borrowSession();
0:         this.loanedSessions.add(session);
1:         return session;
1:     }
1:     
1:     
0:     public Session createXaSession(boolean transacted, int ackMode) throws JMSException {
1:         SessionKey key = new SessionKey(transacted, ackMode);
0:         SessionPool pool = null;
0:         pool = cache.get(key);
0:         if (pool == null) {
0:             SessionPool newPool = createSessionPool(key);
0:             SessionPool prevPool = cache.putIfAbsent(key, newPool);
0:             if (prevPool != null && prevPool != newPool) {
0:                 // newPool was not the first one to be associated with this
0:                 // key... close created session pool
1:                 try {
0:                     newPool.close();
1:                 } catch (Exception e) {
0:                     throw new JMSException(e.getMessage());
1:                 }
1:             }
0:             pool = cache.get(key); // this will return a non-null value...
1:         }
0:         PooledSession session = pool.borrowSession();
0:         this.loanedSessions.add(session);
1:         return session;
1:     }
1:     
1: 
1:     public synchronized void close() {
1:         if (connection != null) {
1:             try {
0:                 Iterator<SessionPool> i = cache.values().iterator();
0:                 while (i.hasNext()) {
0:                     SessionPool pool = i.next();
0:                     i.remove();
1:                     try {
0:                         pool.close();
1:                     } catch (Exception e) {
1:                     }
1:                 }
1:             } finally {
1:                 try {
1:                     connection.close();
1:                 } catch (Exception e) {
1:                 } finally {
1:                     connection = null;
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public synchronized void incrementReferenceCount() {
1:         referenceCount++;
1:         lastUsed = System.currentTimeMillis();
1:     }
1: 
1:     public synchronized void decrementReferenceCount() {
1:         referenceCount--;
1:         lastUsed = System.currentTimeMillis();
1:         if (referenceCount == 0) {
0:             expiredCheck();
1: 
1:             for (PooledSession session : this.loanedSessions) {
1:                 try {
1:                     session.close();
1:                 } catch (Exception e) {
1:                 }
1:             }
1:             this.loanedSessions.clear();
1: 
0:             // only clean up temp destinations when all users
0:             // of this connection have called close
0:             if (getConnection() != null) {
0:                 /*
0:                 TODO: activemq specific
0:                 getConnection().cleanUpTempDestinations();
1:                 */
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * @return true if this connection has expired.
1:      */
1:     public synchronized boolean expiredCheck() {
1:         if (connection == null) {
1:             return true;
1:         }
1:         if (hasExpired) {
1:             if (referenceCount == 0) {
1:                 close();
1:             }
1:             return true;
1:         }
0:         if (hasFailed
0:                 || (idleTimeout > 0 && System.currentTimeMillis() > lastUsed + idleTimeout)
0:                 || expiryTimeout > 0 && System.currentTimeMillis() > firstUsed + expiryTimeout) {
1:             hasExpired = true;
1:             if (referenceCount == 0) {
1:                 close();
1:             }
1:             return true;
1:         }
0:         return false;
1:     }
1: 
1:     public int getIdleTimeout() {
1:         return idleTimeout;
1:     }
1: 
1:     public void setIdleTimeout(int idleTimeout) {
1:         this.idleTimeout = idleTimeout;
1:     }
1: 
0:     protected SessionPool createSessionPool(SessionKey key) {
0:         return new SessionPool(this, key, poolFactory.createPool());
1:     }
1: 
1:     public void setExpiryTimeout(long expiryTimeout) {
0:         this.expiryTimeout  = expiryTimeout;
1:     }
1: 
1:     public long getExpiryTimeout() {
1:         return expiryTimeout;
1:     }
1: 
0:     void onSessionReturned(PooledSession session) {
0:         this.loanedSessions.remove(session);
1:     }
1: 
0:     void onSessionInvalidated(PooledSession session) {
0:         this.loanedSessions.remove(session);
1:     }
1: }
============================================================================