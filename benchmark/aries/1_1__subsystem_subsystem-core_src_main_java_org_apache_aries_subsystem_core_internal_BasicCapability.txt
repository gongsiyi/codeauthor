1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:67ef08f: package org.apache.aries.subsystem.core.internal;
1:1c9c28b: 
1:1c9c28b: import java.util.Collections;
1:1c9c28b: import java.util.HashMap;
1:1c9c28b: import java.util.Map;
1:1c9c28b: 
1:307d743: import org.osgi.resource.Capability;
1:71fe81a: import org.osgi.resource.Resource;
1:1c9c28b: 
1:1c9c28b: public class BasicCapability extends AbstractCapability {
1:b75f264: 	public static class Builder {
1:b75f264: 		private final Map<String, Object> attributes = new HashMap<String, Object>();
1:b75f264: 		private final Map<String, String> directives = new HashMap<String, String>();
1:b75f264: 		private Resource resource;
1:b75f264: 		private String namespace;
1:b75f264: 		
1:b75f264: 		public Builder attribute(String key, Object value) {
1:b75f264: 			attributes.put(key, value);
1:b75f264: 			return this;
1:b75f264: 		}
1:b75f264: 		
1:b75f264: 		public Builder attributes(Map<String, Object> values) {
1:b75f264: 			attributes.putAll(values);
1:b75f264: 			return this;
1:b75f264: 		}
1:b75f264: 		
1:b75f264: 		public BasicCapability build() {
1:b75f264: 			return new BasicCapability(namespace, attributes, directives, resource);
1:b75f264: 		}
1:b75f264: 		
1:b75f264: 		public Builder directive(String key, String value) {
1:b75f264: 			directives.put(key, value);
1:b75f264: 			return this;
1:b75f264: 		}
1:b75f264: 		
1:b75f264: 		public Builder directives(Map<String, String> values) {
1:b75f264: 			directives.putAll(values);
1:b75f264: 			return this;
1:b75f264: 		}
1:b75f264: 		
1:b75f264: 		public Builder namespace(String value) {
1:b75f264: 			namespace = value;
1:b75f264: 			return this;
1:b75f264: 		}
1:b75f264: 		
1:b75f264: 		public Builder resource(Resource value) {
1:b75f264: 			resource = value;
1:b75f264: 			return this;
1:b75f264: 		}
1:b75f264: 	}
1:b75f264: 	
1:1c9c28b: 	private final Map<String, Object> attributes;
1:1c9c28b: 	private final Map<String, String> directives;
1:1c9c28b: 	private final Resource resource;
1:1c9c28b: 	private final String namespace;
1:1c9c28b: 	
1:307d743: 	public BasicCapability(Capability capability, Resource resource) {
1:6530ba7: 	    if (resource == null) {
1:6530ba7: 	        throw new NullPointerException();
1:6530ba7: 	    }
1:6530ba7: 		attributes = capability.getAttributes();
1:6530ba7: 		directives = capability.getDirectives();
1:6530ba7: 		this.resource = resource;
1:6530ba7: 		namespace = capability.getNamespace();
1:307d743: 	}
1:307d743: 	
1:1c9c28b: 	public BasicCapability(String namespace, Map<String, Object> attributes, Map<String, String> directives, Resource resource) {
1:1c9c28b: 		if (namespace == null)
1:1c9c28b: 			throw new NullPointerException();
1:1c9c28b: 		this.namespace = namespace;
1:1c9c28b: 		if (attributes == null)
1:1c9c28b: 			this.attributes = Collections.emptyMap();
1:1c9c28b: 		else
1:1c9c28b: 			this.attributes = Collections.unmodifiableMap(new HashMap<String, Object>(attributes));
1:1c9c28b: 		if (directives == null)
1:1c9c28b: 			this.directives = Collections.emptyMap();
1:1c9c28b: 		else
1:1c9c28b: 			this.directives = Collections.unmodifiableMap(new HashMap<String, String>(directives));
1:1c9c28b: 		if (resource == null)
1:1c9c28b: 			throw new NullPointerException();
1:1c9c28b: 		this.resource = resource;
1:1c9c28b: 	}
1:1c9c28b: 
1:1c9c28b: 	@Override
1:1c9c28b: 	public Map<String, Object> getAttributes() {
1:1c9c28b: 		return attributes;
1:1c9c28b: 	}
1:1c9c28b: 
1:1c9c28b: 	@Override
1:1c9c28b: 	public Map<String, String> getDirectives() {
1:1c9c28b: 		return directives;
1:1c9c28b: 	}
1:1c9c28b: 
1:1c9c28b: 	@Override
1:1c9c28b: 	public String getNamespace() {
1:1c9c28b: 		return namespace;
1:1c9c28b: 	}
1:1c9c28b: 
1:1c9c28b: 	@Override
1:1c9c28b: 	public Resource getResource() {
1:1c9c28b: 		return resource;
1:1c9c28b: 	}
1:1c9c28b: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:6530ba7
/////////////////////////////////////////////////////////////////////////
1: 	    if (resource == null) {
1: 	        throw new NullPointerException();
1: 	    }
1: 		attributes = capability.getAttributes();
1: 		directives = capability.getDirectives();
1: 		this.resource = resource;
1: 		namespace = capability.getNamespace();
commit:b75f264
/////////////////////////////////////////////////////////////////////////
1: 	public static class Builder {
1: 		private final Map<String, Object> attributes = new HashMap<String, Object>();
1: 		private final Map<String, String> directives = new HashMap<String, String>();
1: 		private Resource resource;
1: 		private String namespace;
1: 		
1: 		public Builder attribute(String key, Object value) {
1: 			attributes.put(key, value);
1: 			return this;
1: 		}
1: 		
1: 		public Builder attributes(Map<String, Object> values) {
1: 			attributes.putAll(values);
1: 			return this;
1: 		}
1: 		
1: 		public BasicCapability build() {
1: 			return new BasicCapability(namespace, attributes, directives, resource);
1: 		}
1: 		
1: 		public Builder directive(String key, String value) {
1: 			directives.put(key, value);
1: 			return this;
1: 		}
1: 		
1: 		public Builder directives(Map<String, String> values) {
1: 			directives.putAll(values);
1: 			return this;
1: 		}
1: 		
1: 		public Builder namespace(String value) {
1: 			namespace = value;
1: 			return this;
1: 		}
1: 		
1: 		public Builder resource(Resource value) {
1: 			resource = value;
1: 			return this;
1: 		}
1: 	}
1: 	
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:307d743
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Capability;
/////////////////////////////////////////////////////////////////////////
1: 	public BasicCapability(Capability capability, Resource resource) {
0: 		this(capability.getNamespace(), capability.getAttributes(), capability.getDirectives(), resource);
1: 	}
1: 	
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Resource;
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.subsystem.core.resource;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.osgi.framework.resource.Resource;
1: 
1: public class BasicCapability extends AbstractCapability {
1: 	private final Map<String, Object> attributes;
1: 	private final Map<String, String> directives;
1: 	private final Resource resource;
1: 	private final String namespace;
1: 	
1: 	public BasicCapability(String namespace, Map<String, Object> attributes, Map<String, String> directives, Resource resource) {
1: 		if (namespace == null)
1: 			throw new NullPointerException();
1: 		this.namespace = namespace;
1: 		if (attributes == null)
1: 			this.attributes = Collections.emptyMap();
1: 		else
1: 			this.attributes = Collections.unmodifiableMap(new HashMap<String, Object>(attributes));
1: 		if (directives == null)
1: 			this.directives = Collections.emptyMap();
1: 		else
1: 			this.directives = Collections.unmodifiableMap(new HashMap<String, String>(directives));
1: 		if (resource == null)
1: 			throw new NullPointerException();
1: 		this.resource = resource;
1: 	}
1: 
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
1: 		return attributes;
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return directives;
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
1: 		return namespace;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================