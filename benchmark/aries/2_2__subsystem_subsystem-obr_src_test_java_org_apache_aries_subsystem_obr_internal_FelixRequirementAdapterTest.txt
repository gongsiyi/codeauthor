1:94b52c5: /*
1:94b52c5:  * Licensed under the Apache License, Version 2.0 (the "License");
1:94b52c5:  * you may not use this file except in compliance with the License.
1:94b52c5:  * You may obtain a copy of the License at
1:94b52c5:  *
1:94b52c5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:94b52c5:  *
1:94b52c5:  * Unless required by applicable law or agreed to in writing, software
1:94b52c5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:94b52c5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:94b52c5:  * See the License for the specific language governing permissions and
1:94b52c5:  * limitations under the License.
1:94b52c5:  */
1:bb9fc31: package org.apache.aries.subsystem.obr.internal;
1:bb9fc31: 
1:bb9fc31: import static org.junit.Assert.assertEquals;
1:bb9fc31: 
1:7a834c3: import org.apache.aries.subsystem.util.felix.FelixRequirementAdapter;
1:bb9fc31: import org.apache.felix.bundlerepository.Requirement;
1:bb9fc31: import org.easymock.EasyMock;
1:bb9fc31: import org.junit.Test;
1:bb9fc31: import org.osgi.resource.Namespace;
1:bb9fc31: import org.osgi.resource.Resource;
1:bb9fc31: 
1:bb9fc31: public class FelixRequirementAdapterTest {
1:bb9fc31: 	@Test
1:bb9fc31: 	public void testCardinalityDirectiveMultiple() {
1:bb9fc31: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1:bb9fc31: 		EasyMock.expect(req.getFilter()).andReturn("");
1:bb9fc31: 		EasyMock.expect(req.isMultiple()).andReturn(true);
1:bb9fc31: 		EasyMock.replay(req);
1:bb9fc31: 		FelixRequirementAdapter adapter = new FelixRequirementAdapter(req, EasyMock.createNiceMock(Resource.class));
1:96715a0: 		assertEquals("Wrong value for directive " + Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE, Namespace.CARDINALITY_MULTIPLE, adapter.getDirectives().get(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE));
1:bb9fc31: 	}
1:bb9fc31: 	
1:bb9fc31: 	@Test
1:bb9fc31: 	public void testCardinalityDirectiveSingle() {
1:bb9fc31: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1:bb9fc31: 		EasyMock.expect(req.getFilter()).andReturn("");
1:bb9fc31: 		EasyMock.expect(req.isMultiple()).andReturn(false);
1:bb9fc31: 		EasyMock.replay(req);
1:bb9fc31: 		FelixRequirementAdapter adapter = new FelixRequirementAdapter(req, EasyMock.createNiceMock(Resource.class));
1:96715a0: 		assertEquals("Wrong value for directive " + Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE, Namespace.CARDINALITY_SINGLE, adapter.getDirectives().get(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE));
1:bb9fc31: 	}
1:bb9fc31: 	
1:bb9fc31: 	@Test
1:bb9fc31: 	public void testResolutionDirectiveMandatory() {
1:bb9fc31: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1:bb9fc31: 		EasyMock.expect(req.getFilter()).andReturn("");
1:bb9fc31: 		EasyMock.expect(req.isOptional()).andReturn(false);
1:bb9fc31: 		EasyMock.replay(req);
1:bb9fc31: 		FelixRequirementAdapter adapter = new FelixRequirementAdapter(req, EasyMock.createNiceMock(Resource.class));
1:96715a0: 		assertEquals("Wrong value for directive " + Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE, Namespace.RESOLUTION_MANDATORY, adapter.getDirectives().get(Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE));
1:bb9fc31: 	}
1:bb9fc31: 	
1:bb9fc31: 	@Test
1:bb9fc31: 	public void testResolutionDirectiveOptional() {
1:bb9fc31: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1:bb9fc31: 		EasyMock.expect(req.getFilter()).andReturn("");
1:bb9fc31: 		EasyMock.expect(req.isOptional()).andReturn(true);
1:bb9fc31: 		EasyMock.replay(req);
1:bb9fc31: 		FelixRequirementAdapter adapter = new FelixRequirementAdapter(req, EasyMock.createNiceMock(Resource.class));
1:96715a0: 		assertEquals("Wrong value for directive " + Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE, Namespace.RESOLUTION_OPTIONAL, adapter.getDirectives().get(Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE));
1:bb9fc31: 	}
1:bb9fc31: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7a834c3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.util.felix.FelixRequirementAdapter;
author:John Ross
-------------------------------------------------------------------------------
commit:94b52c5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:96715a0
/////////////////////////////////////////////////////////////////////////
1: 		assertEquals("Wrong value for directive " + Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE, Namespace.CARDINALITY_MULTIPLE, adapter.getDirectives().get(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE));
/////////////////////////////////////////////////////////////////////////
1: 		assertEquals("Wrong value for directive " + Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE, Namespace.CARDINALITY_SINGLE, adapter.getDirectives().get(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE));
/////////////////////////////////////////////////////////////////////////
1: 		assertEquals("Wrong value for directive " + Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE, Namespace.RESOLUTION_MANDATORY, adapter.getDirectives().get(Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE));
/////////////////////////////////////////////////////////////////////////
1: 		assertEquals("Wrong value for directive " + Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE, Namespace.RESOLUTION_OPTIONAL, adapter.getDirectives().get(Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE));
commit:bb9fc31
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.obr.internal;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import org.apache.felix.bundlerepository.Requirement;
1: import org.easymock.EasyMock;
1: import org.junit.Test;
1: import org.osgi.resource.Namespace;
1: import org.osgi.resource.Resource;
1: 
1: public class FelixRequirementAdapterTest {
1: 	@Test
1: 	public void testCardinalityDirectiveMultiple() {
1: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1: 		EasyMock.expect(req.getFilter()).andReturn("");
1: 		EasyMock.expect(req.isMultiple()).andReturn(true);
1: 		EasyMock.replay(req);
1: 		FelixRequirementAdapter adapter = new FelixRequirementAdapter(req, EasyMock.createNiceMock(Resource.class));
0: 		assertEquals(adapter.getDirectives().get(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE), Namespace.CARDINALITY_MULTIPLE);
1: 	}
1: 	
1: 	@Test
1: 	public void testCardinalityDirectiveSingle() {
1: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1: 		EasyMock.expect(req.getFilter()).andReturn("");
1: 		EasyMock.expect(req.isMultiple()).andReturn(false);
1: 		EasyMock.replay(req);
1: 		FelixRequirementAdapter adapter = new FelixRequirementAdapter(req, EasyMock.createNiceMock(Resource.class));
0: 		assertEquals(adapter.getDirectives().get(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE), Namespace.CARDINALITY_SINGLE);
1: 	}
1: 	
1: 	@Test
1: 	public void testResolutionDirectiveMandatory() {
1: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1: 		EasyMock.expect(req.getFilter()).andReturn("");
1: 		EasyMock.expect(req.isOptional()).andReturn(false);
1: 		EasyMock.replay(req);
1: 		FelixRequirementAdapter adapter = new FelixRequirementAdapter(req, EasyMock.createNiceMock(Resource.class));
0: 		assertEquals(adapter.getDirectives().get(Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE), Namespace.RESOLUTION_MANDATORY);
1: 	}
1: 	
1: 	@Test
1: 	public void testResolutionDirectiveOptional() {
1: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1: 		EasyMock.expect(req.getFilter()).andReturn("");
1: 		EasyMock.expect(req.isOptional()).andReturn(true);
1: 		EasyMock.replay(req);
1: 		FelixRequirementAdapter adapter = new FelixRequirementAdapter(req, EasyMock.createNiceMock(Resource.class));
0: 		assertEquals(adapter.getDirectives().get(Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE), Namespace.RESOLUTION_OPTIONAL);
1: 	}
1: }
============================================================================