1:bf5a863: /**
1:bf5a863:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:bf5a863:  *  contributor license agreements.  See the NOTICE file distributed with
1:bf5a863:  *  this work for additional information regarding copyright ownership.
1:bf5a863:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:bf5a863:  *  (the "License"); you may not use this file except in compliance with
1:bf5a863:  *  the License.  You may obtain a copy of the License at
1:bf5a863:  *
1:bf5a863:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bf5a863:  *
1:bf5a863:  *  Unless required by applicable law or agreed to in writing, software
1:bf5a863:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:bf5a863:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf5a863:  *  See the License for the specific language governing permissions and
1:bf5a863:  *  limitations under the License.
1:bf5a863:  */
1:9cde9a6: package org.apache.aries.jmx.framework.wiring;
1:bf5a863: 
1:bf5a863: import javax.management.NotCompliantMBeanException;
1:bf5a863: import javax.management.StandardMBean;
1:bf5a863: 
1:bf5a863: import org.apache.aries.jmx.Logger;
1:bf5a863: import org.apache.aries.jmx.MBeanHandler;
1:f5398b2: import org.apache.aries.jmx.agent.JMXAgentContext;
1:7186eab: import org.apache.aries.jmx.util.ObjectNameUtils;
1:bf5a863: import org.apache.aries.jmx.util.shared.RegistrableStandardEmitterMBean;
1:bf5a863: import org.osgi.framework.BundleContext;
1:1dbcef9: import org.osgi.jmx.framework.wiring.BundleWiringStateMBean;
1:bf5a863: import org.osgi.service.log.LogService;
1:bf5a863: 
1:1dbcef9: public class BundleWiringStateMBeanHandler implements MBeanHandler {
1:f5398b2: 
1:f5398b2:     private JMXAgentContext agentContext;
1:bf5a863:     private final String name;
1:bf5a863:     private final BundleContext bundleContext;
1:bf5a863:     private final Logger logger;
1:bf5a863: 
1:bf5a863:     private StandardMBean mbean;
1:1dbcef9:     private BundleWiringState revisionsStateMBean;
1:bf5a863: 
1:f5398b2:     public BundleWiringStateMBeanHandler(JMXAgentContext agentContext) {
1:f5398b2:         this.agentContext = agentContext;
1:f5398b2:         this.bundleContext = agentContext.getBundleContext();
1:f5398b2:         this.logger = agentContext.getLogger();
1:7186eab:         this.name = ObjectNameUtils.createFullObjectName(bundleContext, BundleWiringStateMBean.OBJECTNAME);
1:bf5a863:     }
1:bf5a863: 
1:bf5a863:     /* (non-Javadoc)
1:bf5a863:      * @see org.apache.aries.jmx.MBeanHandler#open()
1:bf5a863:      */
1:bf5a863:     public void open() {
1:1dbcef9:         revisionsStateMBean = new BundleWiringState(bundleContext, logger);
1:bf5a863:         try {
1:1dbcef9:             mbean = new RegistrableStandardEmitterMBean(revisionsStateMBean, BundleWiringStateMBean.class);
1:bf5a863:         } catch (NotCompliantMBeanException e) {
1:1dbcef9:             logger.log(LogService.LOG_ERROR, "Failed to instantiate MBean for " + BundleWiringStateMBean.class.getName(), e);
1:bf5a863:         }
1:f5398b2:         agentContext.registerMBean(this);
1:bf5a863:     }
1:bf5a863: 
1:bf5a863:     /* (non-Javadoc)
1:bf5a863:      * @see org.apache.aries.jmx.MBeanHandler#getMbean()
1:bf5a863:      */
1:bf5a863:     public StandardMBean getMbean() {
1:bf5a863:         return mbean;
1:bf5a863:     }
1:bf5a863: 
1:bf5a863: 
1:bf5a863:     /* (non-Javadoc)
1:bf5a863:      * @see org.apache.aries.jmx.MBeanHandler#close()
1:bf5a863:      */
1:bf5a863:     public void close() {
1:f5398b2:         agentContext.unregisterMBean(this);
1:bf5a863:     }
1:bf5a863: 
1:bf5a863:     /* (non-Javadoc)
1:bf5a863:      * @see org.apache.aries.jmx.MBeanHandler#getName()
1:bf5a863:      */
1:bf5a863:     public String getName() {
1:bf5a863:         return name;
1:bf5a863:     }
1:bf5a863: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f5398b2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jmx.agent.JMXAgentContext;
/////////////////////////////////////////////////////////////////////////
1: 
1:     private JMXAgentContext agentContext;
/////////////////////////////////////////////////////////////////////////
1:     public BundleWiringStateMBeanHandler(JMXAgentContext agentContext) {
1:         this.agentContext = agentContext;
1:         this.bundleContext = agentContext.getBundleContext();
1:         this.logger = agentContext.getLogger();
/////////////////////////////////////////////////////////////////////////
1:         agentContext.registerMBean(this);
/////////////////////////////////////////////////////////////////////////
1:         agentContext.unregisterMBean(this);
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:7186eab
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jmx.util.ObjectNameUtils;
/////////////////////////////////////////////////////////////////////////
1:         this.name = ObjectNameUtils.createFullObjectName(bundleContext, BundleWiringStateMBean.OBJECTNAME);
commit:1dbcef9
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.jmx.framework.wiring.BundleWiringStateMBean;
1: public class BundleWiringStateMBeanHandler implements MBeanHandler {
1:     private BundleWiringState revisionsStateMBean;
0:     public BundleWiringStateMBeanHandler(BundleContext bundleContext, Logger logger) {
0:         this.name = BundleWiringStateMBean.OBJECTNAME;
1:         revisionsStateMBean = new BundleWiringState(bundleContext, logger);
1:             mbean = new RegistrableStandardEmitterMBean(revisionsStateMBean, BundleWiringStateMBean.class);
1:             logger.log(LogService.LOG_ERROR, "Failed to instantiate MBean for " + BundleWiringStateMBean.class.getName(), e);
commit:9cde9a6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jmx.framework.wiring;
commit:95b5a88
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.jmx.framework.wiring.BundleRevisionsState;
commit:3f3f24f
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.jmx.framework.wiring.BundleRevisionsStateMBean;
commit:bf5a863
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.aries.jmx.framework;
1: 
1: import javax.management.NotCompliantMBeanException;
1: import javax.management.StandardMBean;
1: 
1: import org.apache.aries.jmx.Logger;
1: import org.apache.aries.jmx.MBeanHandler;
1: import org.apache.aries.jmx.util.shared.RegistrableStandardEmitterMBean;
1: import org.osgi.framework.BundleContext;
0: import org.osgi.jmx.framework.BundleRevisionsStateMBean;
1: import org.osgi.service.log.LogService;
1: 
0: public class BundleRevisionsStateMBeanHandler implements MBeanHandler {
1:     private final String name;
1:     private final BundleContext bundleContext;
1:     private final Logger logger;
1: 
1:     private StandardMBean mbean;
0:     private BundleRevisionsState revisionsStateMBean;
1: 
0:     public BundleRevisionsStateMBeanHandler(BundleContext bundleContext, Logger logger) {
0:         this.bundleContext = bundleContext;
0:         this.logger = logger;
0:         this.name = BundleRevisionsStateMBean.OBJECTNAME;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.aries.jmx.MBeanHandler#open()
1:      */
1:     public void open() {
0:         revisionsStateMBean = new BundleRevisionsState(bundleContext, logger);
1:         try {
0:             mbean = new RegistrableStandardEmitterMBean(revisionsStateMBean, BundleRevisionsStateMBean.class);
1:         } catch (NotCompliantMBeanException e) {
0:             logger.log(LogService.LOG_ERROR, "Failed to instantiate MBean for " + BundleRevisionsStateMBean.class.getName(), e);
1:         }
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.aries.jmx.MBeanHandler#getMbean()
1:      */
1:     public StandardMBean getMbean() {
1:         return mbean;
1:     }
1: 
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.aries.jmx.MBeanHandler#close()
1:      */
1:     public void close() {
0:         // not used
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.aries.jmx.MBeanHandler#getName()
1:      */
1:     public String getName() {
1:         return name;
1:     }
1: }
============================================================================