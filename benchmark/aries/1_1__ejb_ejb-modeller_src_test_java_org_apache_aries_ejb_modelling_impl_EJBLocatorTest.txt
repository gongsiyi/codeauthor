1:0d78661: /**
1:0d78661:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:0d78661:  *  contributor license agreements.  See the NOTICE file distributed with
1:0d78661:  *  this work for additional information regarding copyright ownership.
1:0d78661:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:0d78661:  *  (the "License"); you may not use this file except in compliance with
1:0d78661:  *  the License.  You may obtain a copy of the License at
1:0d78661:  *
1:0d78661:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0d78661:  *
1:0d78661:  *  Unless required by applicable law or agreed to in writing, software
1:0d78661:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:0d78661:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d78661:  *  See the License for the specific language governing permissions and
1:0d78661:  *  limitations under the License.
1:0d78661:  */
1:0d78661: package org.apache.aries.ejb.modelling.impl;
1:0d78661: 
1:0d78661: import java.io.ByteArrayInputStream;
1:0d78661: import java.io.ByteArrayOutputStream;
1:0d78661: import java.io.IOException;
1:0d78661: import java.util.zip.ZipEntry;
1:0d78661: import java.util.zip.ZipOutputStream;
1:0d78661: 
1:0d78661: import org.apache.aries.application.modelling.ModellerException;
1:0d78661: import org.apache.aries.ejb.modelling.EJBRegistry;
1:0d78661: import org.apache.aries.unittest.mocks.MethodCall;
1:0d78661: import org.apache.aries.unittest.mocks.Skeleton;
1:0d78661: import org.apache.aries.util.filesystem.FileSystem;
1:0d78661: import org.apache.aries.util.filesystem.ICloseableDirectory;
1:0d78661: import org.apache.aries.util.io.IOUtils;
1:0d78661: import org.apache.aries.util.manifest.BundleManifest;
1:916d183: import org.junit.Before;
1:0d78661: import org.junit.Test;
1:0d78661: 
1:0d78661: public class EJBLocatorTest {
1:0d78661: 
1:0d78661:   private EJBRegistry registry;
1:0d78661:   
1:916d183:   @Before
1:916d183:   public void setup() {
1:916d183:     registry = Skeleton.newMock(EJBRegistry.class);
1:916d183:   }
1:916d183:   
1:0d78661:   @Test(expected=ModellerException.class)
1:0d78661:   public void testUnavailable() throws ModellerException {
1:0d78661:     new EJBLocationUnavailable().findEJBs(null, null, null);
1:0d78661:   }
1:0d78661:   
1:0d78661:   @Test
1:0d78661:   public void testEJBJARInZip() throws Exception {
1:0d78661: 
1:0d78661:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:0d78661:     ZipOutputStream zos = new ZipOutputStream(baos);
1:0d78661:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:0d78661:     zos.close();
1:0d78661:     
1:0d78661:     runTest(baos.toByteArray(), "MANIFEST_1.MF");
1:0d78661:     
1:0d78661:     assertXML(true);
1:0d78661:     assertAnnotation(false);
1:0d78661:   }
1:92d0499: 
1:92d0499:   @Test
1:0d78661:   public void testEJBJARAndAnnotatedInZip() throws Exception {
1:5e2bb18: 
1:0d78661:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:0d78661:     ZipOutputStream zos = new ZipOutputStream(baos);
1:0d78661:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:0d78661:     addToZip(zos, "test/ejbs/StatelessSessionBean.class");
1:4134a37:     addToZip(zos, "test/ejbs/StatefulSessionBean.class");
1:0d78661:     zos.close();
1:5e2bb18:     
1:0d78661:     runTest(baos.toByteArray(), "MANIFEST_1.MF");
1:0d78661:     
1:0d78661:     assertXML(true);
1:0d78661:     assertAnnotation(true);
1:0d78661:   }
1:0d78661:   
1:92d0499:   @Test
1:0d78661:   public void testAnnotatedOnlyInZip() throws Exception {
1:0d78661: 
1:0d78661:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:0d78661:     ZipOutputStream zos = new ZipOutputStream(baos);
1:0d78661:     addToZip(zos, "test/ejbs/StatelessSessionBean.class");
1:4134a37:     addToZip(zos, "test/ejbs/StatefulSessionBean.class");
1:0d78661:     zos.close();
1:0d78661:     
1:0d78661:     runTest(baos.toByteArray(), "MANIFEST_1.MF");
1:0d78661:     
1:0d78661:     assertXML(false);
1:0d78661:     assertAnnotation(true);
1:0d78661:   }
1:0d78661:   
1:5e2bb18:   @Test
1:0d78661:   public void testEJBJARAndAnnotatedNotOnClasspathInZip() throws Exception {
1:0d78661: 
1:0d78661:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:0d78661:     ZipOutputStream zos = new ZipOutputStream(baos);
1:0d78661:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:5e2bb18:     addToZip(zos, "test/ejbs/StatelessSessionBean.class", "no/test/ejb/StatelessSessionBean.class");
1:5e2bb18:     addToZip(zos, "test/ejbs/StatefulSessionBean.class", "no/test/ejb/StatefulSessionBean.class");
1:0d78661:     zos.close();
1:0d78661:     
1:0d78661:     runTest(baos.toByteArray(), "MANIFEST_2.MF");
1:0d78661:     
1:0d78661:     assertXML(true);
1:0d78661:     assertAnnotation(false);
1:0d78661:   }
1:0d78661: 
1:0d78661:   @Test
1:92d0499:   public void testEJBJARAndAnnotatedOnClasspathInZip() throws Exception {
1:92d0499: 
1:92d0499:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:92d0499:     ZipOutputStream zos = new ZipOutputStream(baos);
1:92d0499:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:92d0499:     addToZip(zos, "test/ejbs/StatelessSessionBean.class", "yes/test/ejb/StatelessSessionBean.class");
1:92d0499:     addToZip(zos, "test/ejbs/StatefulSessionBean.class", "yes/test/ejb/StatefulSessionBean.class");
1:92d0499:     zos.close();
1:92d0499:     
1:92d0499:     runTest(baos.toByteArray(), "MANIFEST_2.MF");
1:92d0499:     
1:92d0499:     assertXML(true);
1:92d0499:     assertAnnotation(true);
1:92d0499:   }
1:0d78661:   
1:0d78661:   @Test
1:5e2bb18:   public void testEJBJARInWebZip() throws Exception {
1:5e2bb18: 
1:5e2bb18:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:5e2bb18:     ZipOutputStream zos = new ZipOutputStream(baos);
1:5e2bb18:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:5e2bb18:     zos.close();
1:5e2bb18:     
1:5e2bb18:     runTest(baos.toByteArray(), "MANIFEST_3.MF");
1:5e2bb18:     
1:5e2bb18:     assertXML(true);
1:5e2bb18:     assertAnnotation(false);
1:5e2bb18:   }
1:5e2bb18: 
1:5e2bb18:   @Test
1:5e2bb18:   public void testEJBJARInWrongPlaceWebZip() throws Exception {
1:5e2bb18: 
1:5e2bb18:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:5e2bb18:     ZipOutputStream zos = new ZipOutputStream(baos);
1:5e2bb18:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:5e2bb18:     zos.close();
1:5e2bb18:     
1:5e2bb18:     runTest(baos.toByteArray(), "MANIFEST_3.MF");
1:5e2bb18:     
1:5e2bb18:     assertXML(false);
1:5e2bb18:     assertAnnotation(false);
1:5e2bb18:   }
1:5e2bb18:   
1:5e2bb18:   @Test
1:5e2bb18:   public void testEJBJARAndAnnotatedInWebZip() throws Exception {
1:5e2bb18: 
1:5e2bb18:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:5e2bb18:     ZipOutputStream zos = new ZipOutputStream(baos);
1:5e2bb18:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:5e2bb18:     addToZip(zos, "test/ejbs/StatelessSessionBean.class");
1:5e2bb18:     addToZip(zos, "test/ejbs/StatefulSessionBean.class");
1:5e2bb18:     zos.close();
1:5e2bb18:     
1:5e2bb18:     runTest(baos.toByteArray(), "MANIFEST_3.MF");
1:5e2bb18:     
1:5e2bb18:     assertXML(true);
1:5e2bb18:     assertAnnotation(true);
1:5e2bb18:   }
1:5e2bb18:   
1:5e2bb18:   @Test
1:5e2bb18:   public void testAnnotatedOnlyInWebZip() throws Exception {
1:5e2bb18: 
1:5e2bb18:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:5e2bb18:     ZipOutputStream zos = new ZipOutputStream(baos);
1:5e2bb18:     addToZip(zos, "test/ejbs/StatelessSessionBean.class");
1:5e2bb18:     addToZip(zos, "test/ejbs/StatefulSessionBean.class");
1:5e2bb18:     zos.close();
1:5e2bb18:     
1:5e2bb18:     runTest(baos.toByteArray(), "MANIFEST_3.MF");
1:5e2bb18:     
1:5e2bb18:     assertXML(false);
1:5e2bb18:     assertAnnotation(true);
1:5e2bb18:   }
1:5e2bb18:   
1:5e2bb18:   @Test
1:5e2bb18:   public void testEJBJARAndAnnotatedNotOnClasspathInWebZip() throws Exception {
1:5e2bb18: 
1:5e2bb18:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:5e2bb18:     ZipOutputStream zos = new ZipOutputStream(baos);
1:5e2bb18:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:5e2bb18:     addToZip(zos, "test/ejbs/StatelessSessionBean.class", "no/test/ejb/StatelessSessionBean.class");
1:5e2bb18:     addToZip(zos, "test/ejbs/StatefulSessionBean.class", "no/test/ejb/StatefulSessionBean.class");
1:5e2bb18:     zos.close();
1:0d78661:     
1:5e2bb18:     runTest(baos.toByteArray(), "MANIFEST_4.MF");
1:5e2bb18:     
1:5e2bb18:     assertXML(true);
1:5e2bb18:     assertAnnotation(false);
1:5e2bb18:   }
1:0d78661: 
1:0d78661:   @Test
1:92d0499:   public void testEJBJARAndAnnotatedOnClasspathInWebZip() throws Exception {
1:92d0499: 
1:92d0499:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:92d0499:     ZipOutputStream zos = new ZipOutputStream(baos);
1:92d0499:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:92d0499:     addToZip(zos, "test/ejbs/StatelessSessionBean.class", "yes/test/ejb/StatelessSessionBean.class");
1:92d0499:     addToZip(zos, "test/ejbs/StatefulSessionBean.class", "yes/test/ejb/StatefulSessionBean.class");
1:92d0499:     zos.close();
1:92d0499:     
1:92d0499:     runTest(baos.toByteArray(), "MANIFEST_4.MF");
1:92d0499:     
1:92d0499:     assertXML(true);
1:92d0499:     assertAnnotation(true);
1:92d0499:   }
1:92d0499:   
1:0d78661:   private void runTest(byte[] zip, String manifest) throws ModellerException,
1:0d78661:       IOException {
1:0d78661:     ICloseableDirectory icd = FileSystem.getFSRoot(new 
1:0d78661:         ByteArrayInputStream(zip));
1:0d78661:     new OpenEJBLocator().findEJBs(new BundleManifest(getClass().getClassLoader().
1:0d78661:         getResourceAsStream(manifest)), icd, registry);
1:0d78661:     icd.close();
1:0d78661:   }
1:0d78661:   
1:0d78661:   private void addToZip(ZipOutputStream zos, String src) throws IOException {
1:0d78661:     addToZip(zos, src, src);
1:0d78661:   }
1:0d78661:   
1:0d78661:   private void addToZip(ZipOutputStream zos, String src, String outLocation) throws IOException {
1:0d78661:     zos.putNextEntry(new ZipEntry(outLocation));
1:0d78661:     IOUtils.copy(getClass().getClassLoader().
1:5e2bb18:         getResourceAsStream(src), zos);
1:0d78661:     zos.closeEntry();
1:0d78661:   }
1:0d78661:   
1:0d78661:   private void assertXML(boolean b) {
1:0d78661: 
1:0d78661:     Skeleton s = Skeleton.getSkeleton(registry);
1:0d78661:     MethodCall mc = new MethodCall(EJBRegistry.class, "addEJBView",
1:0d78661:         "XML", "SINGLETON", "local.Iface", false);
1:0d78661:     
1:0d78661:     if(b)
1:0d78661:       s.assertCalledExactNumberOfTimes(mc, 1);
1:0d78661:     else
1:0d78661:       s.assertNotCalled(mc);
1:4134a37:     
1:4134a37:     mc = new MethodCall(EJBRegistry.class, "addEJBView",
1:0d78661:         "XML", "SINGLETON", "remote.Iface", true);
1:0d78661:     
1:0d78661:     if(b)
1:0d78661:       s.assertCalledExactNumberOfTimes(mc, 1);
1:0d78661:     else
1:0d78661:       s.assertNotCalled(mc);
1:0d78661:   }
1:0d78661: 
1:0d78661:   private void assertAnnotation(boolean b) {
1:0d78661: 
1:0d78661:     Skeleton s = Skeleton.getSkeleton(registry);
1:0d78661:     MethodCall mc = new MethodCall(EJBRegistry.class, "addEJBView",
1:0d78661:         "Annotated", "STATELESS", "test.ejbs.StatelessSessionBean", false);
1:0d78661:     
1:0d78661:     if(b)
1:0d78661:       s.assertCalledExactNumberOfTimes(mc, 1);
1:0d78661:     else
1:0d78661:       s.assertNotCalled(mc);
1:0d78661:     
1:0d78661:     mc = new MethodCall(EJBRegistry.class, "addEJBView",
1:4134a37:         String.class, "STATEFUL", String.class, boolean.class);
1:4134a37:     
1:4134a37:     if(b)
1:4134a37:       s.assertCalledExactNumberOfTimes(mc, 1);
1:4134a37:     else
1:4134a37:       s.assertNotCalled(mc);
1:0d78661:   }
1:0d78661:   
1:0d78661: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:92d0499
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testEJBJARAndAnnotatedOnClasspathInZip() throws Exception {
1: 
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:     addToZip(zos, "test/ejbs/StatelessSessionBean.class", "yes/test/ejb/StatelessSessionBean.class");
1:     addToZip(zos, "test/ejbs/StatefulSessionBean.class", "yes/test/ejb/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     runTest(baos.toByteArray(), "MANIFEST_2.MF");
1:     
1:     assertXML(true);
1:     assertAnnotation(true);
1:   }
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Test
1:   public void testEJBJARAndAnnotatedOnClasspathInWebZip() throws Exception {
1: 
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:     addToZip(zos, "test/ejbs/StatelessSessionBean.class", "yes/test/ejb/StatelessSessionBean.class");
1:     addToZip(zos, "test/ejbs/StatefulSessionBean.class", "yes/test/ejb/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     runTest(baos.toByteArray(), "MANIFEST_4.MF");
1:     
1:     assertXML(true);
1:     assertAnnotation(true);
1:   }
1:   
commit:5e2bb18
/////////////////////////////////////////////////////////////////////////
1:     addToZip(zos, "test/ejbs/StatelessSessionBean.class", "no/test/ejb/StatelessSessionBean.class");
1:     addToZip(zos, "test/ejbs/StatefulSessionBean.class", "no/test/ejb/StatefulSessionBean.class");
/////////////////////////////////////////////////////////////////////////
1:   
1:   @Test
1:   public void testEJBJARInWebZip() throws Exception {
1: 
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:     zos.close();
1:     
1:     runTest(baos.toByteArray(), "MANIFEST_3.MF");
1:     
1:     assertXML(true);
1:     assertAnnotation(false);
1:   }
1: 
1:   @Test
1:   public void testEJBJARInWrongPlaceWebZip() throws Exception {
1: 
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:     zos.close();
1:     
1:     runTest(baos.toByteArray(), "MANIFEST_3.MF");
1:     
1:     assertXML(false);
1:     assertAnnotation(false);
1:   }
1:   
1:   @Test
1:   public void testEJBJARAndAnnotatedInWebZip() throws Exception {
1: 
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:     addToZip(zos, "test/ejbs/StatelessSessionBean.class");
1:     addToZip(zos, "test/ejbs/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     runTest(baos.toByteArray(), "MANIFEST_3.MF");
1:     
1:     assertXML(true);
1:     assertAnnotation(true);
1:   }
1:   
1:   @Test
1:   public void testAnnotatedOnlyInWebZip() throws Exception {
1: 
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "test/ejbs/StatelessSessionBean.class");
1:     addToZip(zos, "test/ejbs/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     runTest(baos.toByteArray(), "MANIFEST_3.MF");
1:     
1:     assertXML(false);
1:     assertAnnotation(true);
1:   }
1:   
1:   @Test
1:   public void testEJBJARAndAnnotatedNotOnClasspathInWebZip() throws Exception {
1: 
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:     addToZip(zos, "test/ejbs/StatelessSessionBean.class", "no/test/ejb/StatelessSessionBean.class");
1:     addToZip(zos, "test/ejbs/StatefulSessionBean.class", "no/test/ejb/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     runTest(baos.toByteArray(), "MANIFEST_4.MF");
1:     
1:     assertXML(true);
1:     assertAnnotation(false);
1:   }
/////////////////////////////////////////////////////////////////////////
1:         getResourceAsStream(src), zos);
commit:4134a37
/////////////////////////////////////////////////////////////////////////
1:     addToZip(zos, "test/ejbs/StatefulSessionBean.class");
/////////////////////////////////////////////////////////////////////////
1:     addToZip(zos, "test/ejbs/StatefulSessionBean.class");
/////////////////////////////////////////////////////////////////////////
0:     addToZip(zos, "test/ejb/StatefulSessionBean.class", "no/test/ejb/StatefulSessionBean.class");
/////////////////////////////////////////////////////////////////////////
1:     
1:     mc = new MethodCall(EJBRegistry.class, "addEJBView",
1:         String.class, "STATEFUL", String.class, boolean.class);
1:     
1:     if(b)
1:       s.assertCalledExactNumberOfTimes(mc, 1);
1:     else
1:       s.assertNotCalled(mc);
commit:916d183
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1:   @Before
1:   public void setup() {
1:     registry = Skeleton.newMock(EJBRegistry.class);
1:   }
1:   
commit:0d78661
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.modelling.impl;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipOutputStream;
1: 
1: import org.apache.aries.application.modelling.ModellerException;
1: import org.apache.aries.ejb.modelling.EJBRegistry;
1: import org.apache.aries.unittest.mocks.MethodCall;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.ICloseableDirectory;
1: import org.apache.aries.util.io.IOUtils;
1: import org.apache.aries.util.manifest.BundleManifest;
1: import org.junit.Test;
1: 
1: public class EJBLocatorTest {
1: 
1:   private EJBRegistry registry;
1:   
1:   @Test(expected=ModellerException.class)
1:   public void testUnavailable() throws ModellerException {
1:     new EJBLocationUnavailable().findEJBs(null, null, null);
1:   }
1:   
1:   @Test
1:   public void testEJBJARInZip() throws Exception {
1: 
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:     zos.close();
1:     
1:     runTest(baos.toByteArray(), "MANIFEST_1.MF");
1:     
1:     assertXML(true);
1:     assertAnnotation(false);
1:   }
1: 
1:   @Test
1:   public void testEJBJARAndAnnotatedInZip() throws Exception {
1: 
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:     addToZip(zos, "test/ejbs/StatelessSessionBean.class");
1:     zos.close();
1:     
1:     runTest(baos.toByteArray(), "MANIFEST_1.MF");
1:     
1:     assertXML(true);
1:     assertAnnotation(true);
1:   }
1:   
1:   @Test
1:   public void testAnnotatedOnlyInZip() throws Exception {
1: 
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "test/ejbs/StatelessSessionBean.class");
1:     zos.close();
1:     
1:     runTest(baos.toByteArray(), "MANIFEST_1.MF");
1:     
1:     assertXML(false);
1:     assertAnnotation(true);
1:   }
1:   
1:   @Test
1:   public void testEJBJARAndAnnotatedNotOnClasspathInZip() throws Exception {
1: 
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
0:     addToZip(zos, "test/ejb/StatelessSessionBean.class", "no/test/ejb/StatelessSessionBean.class");
1:     zos.close();
1:     
1:     runTest(baos.toByteArray(), "MANIFEST_2.MF");
1:     
1:     assertXML(true);
1:     assertAnnotation(false);
1:   }
1: 
1:   private void runTest(byte[] zip, String manifest) throws ModellerException,
1:       IOException {
1:     ICloseableDirectory icd = FileSystem.getFSRoot(new 
1:         ByteArrayInputStream(zip));
1:     new OpenEJBLocator().findEJBs(new BundleManifest(getClass().getClassLoader().
1:         getResourceAsStream(manifest)), icd, registry);
1:     icd.close();
1:   }
1:   
1:   private void addToZip(ZipOutputStream zos, String src) throws IOException {
1:     addToZip(zos, src, src);
1:   }
1:   
1:   private void addToZip(ZipOutputStream zos, String src, String outLocation) throws IOException {
1:     zos.putNextEntry(new ZipEntry(outLocation));
1:     IOUtils.copy(getClass().getClassLoader().
0:         getResourceAsStream("ejb-jar.xml"), zos);
1:     zos.closeEntry();
1:   }
1:   
1:   private void assertXML(boolean b) {
1: 
1:     Skeleton s = Skeleton.getSkeleton(registry);
1:     MethodCall mc = new MethodCall(EJBRegistry.class, "addEJBView",
1:         "XML", "SINGLETON", "local.Iface", false);
1:     
1:     if(b)
1:       s.assertCalledExactNumberOfTimes(mc, 1);
1:     else
1:       s.assertNotCalled(mc);
1:     
1:     mc = new MethodCall(EJBRegistry.class, "addEJBView",
1:         "XML", "SINGLETON", "remote.Iface", true);
1:     
1:     if(b)
1:       s.assertCalledExactNumberOfTimes(mc, 1);
1:     else
1:       s.assertNotCalled(mc);
1:   }
1: 
1:   private void assertAnnotation(boolean b) {
1: 
1:     Skeleton s = Skeleton.getSkeleton(registry);
1:     MethodCall mc = new MethodCall(EJBRegistry.class, "addEJBView",
1:         "Annotated", "STATELESS", "test.ejbs.StatelessSessionBean", false);
1:     
1:     if(b)
1:       s.assertCalledExactNumberOfTimes(mc, 1);
1:     else
1:       s.assertNotCalled(mc);
1:   }
1:   
1: }
============================================================================