1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:2299957: package org.apache.aries.tx.control.jdbc.xa.impl;
1:2299957: 
1:2299957: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1:2299957: 
1:2299957: import java.sql.Connection;
1:2299957: import java.sql.SQLException;
1:2299957: import java.util.UUID;
1:2299957: 
1:2299957: import javax.sql.DataSource;
1:2299957: import javax.transaction.xa.XAResource;
1:2299957: 
1:2299957: import org.apache.aries.tx.control.jdbc.common.impl.ConnectionWrapper;
1:2299957: import org.apache.aries.tx.control.jdbc.common.impl.ScopedConnectionWrapper;
1:2299957: import org.apache.aries.tx.control.jdbc.common.impl.TxConnectionWrapper;
1:4c0430e: import org.apache.aries.tx.control.jdbc.xa.connection.impl.XAConnectionWrapper;
1:2299957: import org.osgi.service.transaction.control.LocalResource;
1:2299957: import org.osgi.service.transaction.control.TransactionContext;
1:2299957: import org.osgi.service.transaction.control.TransactionControl;
1:2299957: import org.osgi.service.transaction.control.TransactionException;
1:2299957: 
1:2299957: public class XAEnabledTxContextBindingConnection extends ConnectionWrapper {
1:2299957: 
1:2299957: 	private final TransactionControl	txControl;
1:2299957: 	private final UUID					resourceId;
1:2299957: 	private final DataSource			dataSource;
1:2299957: 	private final boolean				xaEnabled;
1:2299957: 	private final boolean				localEnabled;
1:80b5875: 	private final String				recoveryIdentifier;
1:2299957: 
1:2299957: 	public XAEnabledTxContextBindingConnection(TransactionControl txControl,
1:80b5875: 			DataSource dataSource, UUID resourceId, boolean xaEnabled, boolean localEnabled,
1:80b5875: 			String recoveryIdentifier) {
1:2299957: 		this.txControl = txControl;
1:2299957: 		this.dataSource = dataSource;
1:2299957: 		this.resourceId = resourceId;
1:2299957: 		this.xaEnabled = xaEnabled;
1:2299957: 		this.localEnabled = localEnabled;
1:80b5875: 		this.recoveryIdentifier = recoveryIdentifier;
1:2299957: 	}
1:2299957: 
1:2299957: 	@Override
1:2299957: 	protected final Connection getDelegate() {
1:2299957: 
1:2299957: 		TransactionContext txContext = txControl.getCurrentContext();
1:2299957: 
1:2299957: 		if (txContext == null) {
1:2299957: 			throw new TransactionException("The resource " + dataSource
1:2299957: 					+ " cannot be accessed outside of an active Transaction Context");
1:2299957: 		}
1:2299957: 
1:2299957: 		Connection existing = (Connection) txContext.getScopedValue(resourceId);
1:2299957: 
1:2299957: 		if (existing != null) {
1:2299957: 			return existing;
1:2299957: 		}
1:2299957: 
1:2299957: 		Connection toReturn;
1:2299957: 		Connection toClose;
1:2299957: 
1:2299957: 		try {
1:2299957: 			if (txContext.getTransactionStatus() == NO_TRANSACTION) {
1:2299957: 				toClose = dataSource.getConnection();
1:2299957: 				toReturn = new ScopedConnectionWrapper(toClose);
1:2299957: 			} else if (txContext.supportsXA() && xaEnabled) {
1:2299957: 				toClose = dataSource.getConnection();
1:2299957: 				toReturn = new TxConnectionWrapper(toClose);
1:80b5875: 				txContext.registerXAResource(getXAResource(toClose), recoveryIdentifier);
1:2299957: 			} else if (txContext.supportsLocal() && localEnabled) {
1:2299957: 				toClose = dataSource.getConnection();
1:2299957: 				toReturn = new TxConnectionWrapper(toClose);
1:2299957: 				txContext.registerLocalResource(getLocalResource(toClose));
1:2299957: 			} else {
1:2299957: 				throw new TransactionException(
1:2299957: 						"There is a transaction active, but it does not support local participants");
1:2299957: 			}
1:2299957: 		} catch (Exception sqle) {
1:2299957: 			throw new TransactionException(
1:2299957: 					"There was a problem getting hold of a database connection",
1:2299957: 					sqle);
1:2299957: 		}
1:2299957: 
1:2299957: 		
1:2299957: 		txContext.postCompletion(x -> {
1:2299957: 				try {
1:2299957: 					toClose.close();
1:2299957: 				} catch (SQLException sqle) {
1:2299957: 					// TODO log this
1:2299957: 				}
1:2299957: 			});
1:2299957: 		
1:2299957: 		txContext.putScopedValue(resourceId, toReturn);
1:2299957: 		
1:2299957: 		return toReturn;
1:2299957: 	}
1:2299957: 
1:2299957: 	
1:80b5875: 	static XAResource getXAResource(Connection conn) throws SQLException {
1:2299957: 		if(conn instanceof XAConnectionWrapper) {
1:2299957: 			return ((XAConnectionWrapper)conn).getXaResource();
1:2299957: 		} else if(conn.isWrapperFor(XAConnectionWrapper.class)){
1:2299957: 			return conn.unwrap(XAConnectionWrapper.class).getXaResource();
1:2299957: 		} else {
1:2299957: 			throw new IllegalArgumentException("The XAResource for the connection cannot be found");
1:2299957: 		}
1:2299957: 	}
1:2299957: 	
1:2299957: 	private LocalResource getLocalResource(Connection conn) {
1:2299957: 		return new LocalResource() {
1:2299957: 			@Override
1:2299957: 			public void commit() throws TransactionException {
1:2299957: 				try {
1:2299957: 					conn.commit();
1:2299957: 				} catch (SQLException e) {
1:2299957: 					throw new TransactionException(
1:2299957: 							"An error occurred when committing the connection", e);
1:2299957: 				}
1:2299957: 			}
1:2299957: 
1:2299957: 			@Override
1:2299957: 			public void rollback() throws TransactionException {
1:2299957: 				try {
1:2299957: 					conn.rollback();
1:2299957: 				} catch (SQLException e) {
1:2299957: 					throw new TransactionException(
1:2299957: 							"An error occurred when rolling back the connection", e);
1:2299957: 				}
1:2299957: 			}
1:2299957: 
1:2299957: 		};
1:2299957: 	}
1:2299957: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:80b5875
/////////////////////////////////////////////////////////////////////////
1: 	private final String				recoveryIdentifier;
1: 			DataSource dataSource, UUID resourceId, boolean xaEnabled, boolean localEnabled,
1: 			String recoveryIdentifier) {
1: 		this.recoveryIdentifier = recoveryIdentifier;
/////////////////////////////////////////////////////////////////////////
1: 				txContext.registerXAResource(getXAResource(toClose), recoveryIdentifier);
/////////////////////////////////////////////////////////////////////////
1: 	static XAResource getXAResource(Connection conn) throws SQLException {
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
0: 				txContext.registerXAResource(getXAResource(toClose), null);
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:4c0430e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.jdbc.xa.connection.impl.XAConnectionWrapper;
commit:2299957
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jdbc.xa.impl;
1: 
1: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.util.UUID;
1: 
1: import javax.sql.DataSource;
1: import javax.transaction.xa.XAResource;
1: 
1: import org.apache.aries.tx.control.jdbc.common.impl.ConnectionWrapper;
1: import org.apache.aries.tx.control.jdbc.common.impl.ScopedConnectionWrapper;
1: import org.apache.aries.tx.control.jdbc.common.impl.TxConnectionWrapper;
1: import org.osgi.service.transaction.control.LocalResource;
1: import org.osgi.service.transaction.control.TransactionContext;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionException;
1: 
1: public class XAEnabledTxContextBindingConnection extends ConnectionWrapper {
1: 
1: 	private final TransactionControl	txControl;
1: 	private final UUID					resourceId;
1: 	private final DataSource			dataSource;
1: 	private final boolean				xaEnabled;
1: 	private final boolean				localEnabled;
1: 
1: 	public XAEnabledTxContextBindingConnection(TransactionControl txControl,
0: 			DataSource dataSource, UUID resourceId, boolean xaEnabled, boolean localEnabled) {
1: 		this.txControl = txControl;
1: 		this.dataSource = dataSource;
1: 		this.resourceId = resourceId;
1: 		this.xaEnabled = xaEnabled;
1: 		this.localEnabled = localEnabled;
1: 	}
1: 
1: 	@Override
1: 	protected final Connection getDelegate() {
1: 
1: 		TransactionContext txContext = txControl.getCurrentContext();
1: 
1: 		if (txContext == null) {
1: 			throw new TransactionException("The resource " + dataSource
1: 					+ " cannot be accessed outside of an active Transaction Context");
1: 		}
1: 
1: 		Connection existing = (Connection) txContext.getScopedValue(resourceId);
1: 
1: 		if (existing != null) {
1: 			return existing;
1: 		}
1: 
1: 		Connection toReturn;
1: 		Connection toClose;
1: 
1: 		try {
1: 			if (txContext.getTransactionStatus() == NO_TRANSACTION) {
1: 				toClose = dataSource.getConnection();
1: 				toReturn = new ScopedConnectionWrapper(toClose);
1: 			} else if (txContext.supportsXA() && xaEnabled) {
1: 				toClose = dataSource.getConnection();
1: 				toReturn = new TxConnectionWrapper(toClose);
0: 				txContext.registerXAResource(getXAResource(toClose));
1: 			} else if (txContext.supportsLocal() && localEnabled) {
1: 				toClose = dataSource.getConnection();
1: 				toReturn = new TxConnectionWrapper(toClose);
1: 				txContext.registerLocalResource(getLocalResource(toClose));
1: 			} else {
1: 				throw new TransactionException(
1: 						"There is a transaction active, but it does not support local participants");
1: 			}
1: 		} catch (Exception sqle) {
1: 			throw new TransactionException(
1: 					"There was a problem getting hold of a database connection",
1: 					sqle);
1: 		}
1: 
1: 		
1: 		txContext.postCompletion(x -> {
1: 				try {
1: 					toClose.close();
1: 				} catch (SQLException sqle) {
1: 					// TODO log this
1: 				}
1: 			});
1: 		
1: 		txContext.putScopedValue(resourceId, toReturn);
1: 		
1: 		return toReturn;
1: 	}
1: 
1: 	
0: 	private XAResource getXAResource(Connection conn) throws SQLException {
1: 		if(conn instanceof XAConnectionWrapper) {
1: 			return ((XAConnectionWrapper)conn).getXaResource();
1: 		} else if(conn.isWrapperFor(XAConnectionWrapper.class)){
1: 			return conn.unwrap(XAConnectionWrapper.class).getXaResource();
1: 		} else {
1: 			throw new IllegalArgumentException("The XAResource for the connection cannot be found");
1: 		}
1: 	}
1: 	
1: 	private LocalResource getLocalResource(Connection conn) {
1: 		return new LocalResource() {
1: 			@Override
1: 			public void commit() throws TransactionException {
1: 				try {
1: 					conn.commit();
1: 				} catch (SQLException e) {
1: 					throw new TransactionException(
1: 							"An error occurred when committing the connection", e);
1: 				}
1: 			}
1: 
1: 			@Override
1: 			public void rollback() throws TransactionException {
1: 				try {
1: 					conn.rollback();
1: 				} catch (SQLException e) {
1: 					throw new TransactionException(
1: 							"An error occurred when rolling back the connection", e);
1: 				}
1: 			}
1: 
1: 		};
1: 	}
1: }
============================================================================