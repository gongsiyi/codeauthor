1:9ff28a7: /*
1:9ff28a7:  * Licensed under the Apache License, Version 2.0 (the "License");
1:9ff28a7:  * you may not use this file except in compliance with the License.
1:9ff28a7:  * You may obtain a copy of the License at
1:9ff28a7:  *
1:9ff28a7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9ff28a7:  *
1:9ff28a7:  * Unless required by applicable law or agreed to in writing, software
1:9ff28a7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9ff28a7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9ff28a7:  * See the License for the specific language governing permissions and
1:9ff28a7:  * limitations under the License.
1:9ff28a7:  */
1:4a9e033: package org.apache.aries.subsystem.core.archive;
1:4a9e033: 
1:4a9e033: import java.util.Arrays;
1:4a9e033: import java.util.List;
1:4a9e033: import java.util.Set;
1:4a9e033: 
1:4a9e033: import org.apache.aries.subsystem.core.capabilityset.CapabilitySet;
1:4a9e033: import org.apache.aries.subsystem.core.capabilityset.SimpleFilter;
1:4a9e033: import org.junit.Assert;
1:4a9e033: import org.junit.Test;
1:4a9e033: import org.osgi.framework.namespace.HostNamespace;
1:4a9e033: import org.osgi.resource.Capability;
1:4a9e033: import org.osgi.resource.Namespace;
1:4a9e033: import org.osgi.resource.Requirement;
1:4a9e033: import org.osgi.resource.Resource;
1:4a9e033: 
1:4a9e033: /*
1:4a9e033:  * https://issues.apache.org/jira/browse/ARIES-1453
1:4a9e033:  * 
1:4a9e033:  * Fragment-Host requirements with version range do not match with 
1:4a9e033:  * FragmentHostCapability
1:4a9e033:  */
1:4a9e033: public class Aries1453Test {
1:4a9e033: 	@Test
1:4a9e033: 	public void shouldResolveFragmentHostWithVersionRangeAndMatchWithBundlesInThatRange() {
1:4a9e033: 		FragmentHostHeader header = new FragmentHostHeader("host-bundle;bundle-version=\"[9.6.0,10)\"");
1:4a9e033: 		FragmentHostRequirement requirement = new FragmentHostRequirement(
1:4a9e033: 				header.getClauses().iterator().next(), null);
1:4a9e033: 		FragmentHostCapability capability = new FragmentHostCapability(
1:4a9e033: 				new BundleSymbolicNameHeader("host-bundle"), 
1:4a9e033: 				new BundleVersionHeader("9.6.1"), 
1:4a9e033: 				new Resource() {
1:4a9e033: 					@Override
1:4a9e033: 					public List<Capability> getCapabilities(String namespace) {
1:4a9e033: 						return null;
1:4a9e033: 					}
1:4a9e033: 
1:4a9e033: 					@Override
1:4a9e033: 					public List<Requirement> getRequirements(String namespace) {
1:4a9e033: 						return null;
1:4a9e033: 					}
1:4a9e033: 				});
1:4a9e033: 		String filterDirective = requirement.getDirectives().get(Namespace.REQUIREMENT_FILTER_DIRECTIVE);
1:4a9e033:         SimpleFilter simpleFilter = SimpleFilter.parse(filterDirective);
1:4a9e033:         CapabilitySet capabilitySet = new CapabilitySet(Arrays.asList(HostNamespace.HOST_NAMESPACE), true);
1:4a9e033:         capabilitySet.addCapability(capability);
1:4a9e033:         Set<Capability> capabilities = capabilitySet.match(simpleFilter, true);
1:4a9e033:         Assert.assertTrue(capabilities.size() == 1);
1:4a9e033:         Assert.assertSame(capabilities.iterator().next(), capability);
1:4a9e033: 	}
1:4a9e033: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:9ff28a7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:4a9e033
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.aries.subsystem.core.capabilityset.CapabilitySet;
1: import org.apache.aries.subsystem.core.capabilityset.SimpleFilter;
1: import org.junit.Assert;
1: import org.junit.Test;
1: import org.osgi.framework.namespace.HostNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Namespace;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1453
1:  * 
1:  * Fragment-Host requirements with version range do not match with 
1:  * FragmentHostCapability
1:  */
1: public class Aries1453Test {
1: 	@Test
1: 	public void shouldResolveFragmentHostWithVersionRangeAndMatchWithBundlesInThatRange() {
1: 		FragmentHostHeader header = new FragmentHostHeader("host-bundle;bundle-version=\"[9.6.0,10)\"");
1: 		FragmentHostRequirement requirement = new FragmentHostRequirement(
1: 				header.getClauses().iterator().next(), null);
1: 		FragmentHostCapability capability = new FragmentHostCapability(
1: 				new BundleSymbolicNameHeader("host-bundle"), 
1: 				new BundleVersionHeader("9.6.1"), 
1: 				new Resource() {
1: 					@Override
1: 					public List<Capability> getCapabilities(String namespace) {
1: 						return null;
1: 					}
1: 
1: 					@Override
1: 					public List<Requirement> getRequirements(String namespace) {
1: 						return null;
1: 					}
1: 				});
1: 		String filterDirective = requirement.getDirectives().get(Namespace.REQUIREMENT_FILTER_DIRECTIVE);
1:         SimpleFilter simpleFilter = SimpleFilter.parse(filterDirective);
1:         CapabilitySet capabilitySet = new CapabilitySet(Arrays.asList(HostNamespace.HOST_NAMESPACE), true);
1:         capabilitySet.addCapability(capability);
1:         Set<Capability> capabilities = capabilitySet.match(simpleFilter, true);
1:         Assert.assertTrue(capabilities.size() == 1);
1:         Assert.assertSame(capabilities.iterator().next(), capability);
1: 	}
1: }
============================================================================