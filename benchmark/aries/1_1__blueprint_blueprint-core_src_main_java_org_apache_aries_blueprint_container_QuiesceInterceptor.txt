1:da163d0: /*
1:da163d0:  * Licensed to the Apache Software Foundation (ASF) under one
1:da163d0:  * or more contributor license agreements.  See the NOTICE file
1:da163d0:  * distributed with this work for additional information
1:da163d0:  * regarding copyright ownership.  The ASF licenses this file
1:da163d0:  * to you under the Apache License, Version 2.0 (the
1:da163d0:  * "License"); you may not use this file except in compliance
1:da163d0:  * with the License.  You may obtain a copy of the License at
1:da163d0:  *
1:da163d0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:da163d0:  *
1:da163d0:  * Unless required by applicable law or agreed to in writing,
1:da163d0:  * software distributed under the License is distributed on an
1:da163d0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:da163d0:  * KIND, either express or implied.  See the License for the
1:da163d0:  * specific language governing permissions and limitations
1:da163d0:  * under the License.
1:da163d0:  */
1:da163d0: package org.apache.aries.blueprint.container;
1:da163d0: 
1:da163d0: import java.lang.reflect.Method;
1:da163d0: 
1:da163d0: import org.apache.aries.blueprint.Interceptor;
1:da163d0: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:da163d0: 
1:da163d0: public class QuiesceInterceptor implements Interceptor{
1:da163d0: 
1:da163d0: 	private ServiceRecipe serviceRecipe;
1:da163d0: 	
1:da163d0: 	public QuiesceInterceptor(ServiceRecipe serviceRecipe)
1:da163d0: 	{
1:da163d0: 		this.serviceRecipe = serviceRecipe;
1:da163d0: 	}
1:da163d0: 	
1:da163d0:     public Object preCall(ComponentMetadata cm, Method m, Object... parameters) throws Throwable
1:da163d0:     {
1:da163d0:    		serviceRecipe.incrementActiveCalls();
1:da163d0:     	
1:da163d0:     	return null;
1:da163d0:     }
1:da163d0:     
1:da163d0:     public void postCallWithReturn(ComponentMetadata cm, Method m, Object returnType, Object preCallToken) throws Throwable
1:da163d0:     {
1:da163d0:     	serviceRecipe.decrementActiveCalls();
1:da163d0:     }
1:da163d0: 
1:da163d0:     public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) throws Throwable
1:da163d0:     {
1:da163d0:     	serviceRecipe.decrementActiveCalls();
1:da163d0:     }
1:da163d0:    
1:da163d0:     public int getRank()
1:da163d0:     {
1:da163d0:     	return 0;
1:da163d0:     }
1:da163d0: }
============================================================================
author:Holly Cummins
-------------------------------------------------------------------------------
commit:da163d0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.container;
1: 
1: import java.lang.reflect.Method;
1: 
1: import org.apache.aries.blueprint.Interceptor;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: 
1: public class QuiesceInterceptor implements Interceptor{
1: 
1: 	private ServiceRecipe serviceRecipe;
1: 	
1: 	public QuiesceInterceptor(ServiceRecipe serviceRecipe)
1: 	{
1: 		this.serviceRecipe = serviceRecipe;
1: 	}
1: 	
1:     public Object preCall(ComponentMetadata cm, Method m, Object... parameters) throws Throwable
1:     {
1:    		serviceRecipe.incrementActiveCalls();
1:     	
1:     	return null;
1:     }
1:     
1:     public void postCallWithReturn(ComponentMetadata cm, Method m, Object returnType, Object preCallToken) throws Throwable
1:     {
1:     	serviceRecipe.decrementActiveCalls();
1:     }
1: 
1:     public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) throws Throwable
1:     {
1:     	serviceRecipe.decrementActiveCalls();
1:     }
1:    
1:     public int getRank()
1:     {
1:     	return 0;
1:     }
1: }
============================================================================