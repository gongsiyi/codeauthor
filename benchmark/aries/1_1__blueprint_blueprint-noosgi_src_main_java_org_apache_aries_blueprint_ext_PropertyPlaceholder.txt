1:28d2e82: /**
1:28d2e82:  * Licensed to the Apache Software Foundation (ASF) under one
1:28d2e82:  * or more contributor license agreements.  See the NOTICE file
1:28d2e82:  * distributed with this work for additional information
1:28d2e82:  * regarding copyright ownership.  The ASF licenses this file
1:28d2e82:  * to you under the Apache License, Version 2.0 (the
1:28d2e82:  * "License"); you may not use this file except in compliance
1:28d2e82:  * with the License.  You may obtain a copy of the License at
1:28d2e82:  *
1:28d2e82:  *   http://www.apache.org/licenses/LICENSE-2.0
1:28d2e82:  *
1:28d2e82:  * Unless required by applicable law or agreed to in writing,
1:28d2e82:  * software distributed under the License is distributed on an
1:28d2e82:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:28d2e82:  * KIND, either express or implied.  See the License for the
1:28d2e82:  * specific language governing permissions and limitations
1:28d2e82:  * under the License.
1:28d2e82:  */
1:28d2e82: package org.apache.aries.blueprint.ext;
1:28d2e82: 
1:28d2e82: import java.io.IOException;
1:28d2e82: import java.io.InputStream;
1:28d2e82: import java.net.URL;
1:28d2e82: import java.util.Dictionary;
1:28d2e82: import java.util.Enumeration;
1:28d2e82: import java.util.List;
1:28d2e82: import java.util.Map;
1:28d2e82: import java.util.Properties;
1:28d2e82: 
1:28d2e82: import org.apache.aries.blueprint.ext.evaluator.PropertyEvaluator;
1:28d2e82: import org.slf4j.Logger;
1:28d2e82: import org.slf4j.LoggerFactory;
1:28d2e82: 
1:28d2e82: /**
1:28d2e82:  * Property placeholder that looks for properties in the System properties.
1:28d2e82:  *
1:28d2e82:  * @version $Rev$, $Date$
1:28d2e82:  */
1:28d2e82: public class PropertyPlaceholder extends AbstractPropertyPlaceholder {
1:28d2e82: 
1:28d2e82:     public enum SystemProperties {
1:28d2e82:         never,
1:28d2e82:         fallback,
1:28d2e82:         override
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     private static final Logger LOGGER = LoggerFactory.getLogger(PropertyPlaceholder.class);
1:28d2e82: 
1:28d2e82:     private Map defaultProperties;
1:28d2e82:     private Properties properties;
1:28d2e82:     private List<String> locations;
1:28d2e82:     private boolean ignoreMissingLocations;
1:8f6ce16:     private SystemProperties systemProperties = SystemProperties.override;
1:28d2e82:     private PropertyEvaluator evaluator = null;
1:28d2e82: 
1:28d2e82:     public Map getDefaultProperties() {
1:28d2e82:         return defaultProperties;
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     public void setDefaultProperties(Map defaultProperties) {
1:28d2e82:         this.defaultProperties = defaultProperties;
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     public List<String> getLocations() {
1:28d2e82:         return locations;
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     public void setLocations(List<String> locations) {
1:28d2e82:         this.locations = locations;
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     public boolean isIgnoreMissingLocations() {
1:28d2e82:         return ignoreMissingLocations;
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     public void setIgnoreMissingLocations(boolean ignoreMissingLocations) {
1:28d2e82:         this.ignoreMissingLocations = ignoreMissingLocations;
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     public SystemProperties getSystemProperties() {
1:28d2e82:         return systemProperties;
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     public void setSystemProperties(SystemProperties systemProperties) {
1:28d2e82:         this.systemProperties = systemProperties;
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     public PropertyEvaluator getEvaluator() {
1:28d2e82:         return evaluator;
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     public void setEvaluator(PropertyEvaluator evaluator) {
1:28d2e82:         this.evaluator = evaluator;
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     public void init() throws Exception {
1:28d2e82:         properties = new Properties();
1:28d2e82:         if (locations != null) {
1:28d2e82:             for (String url : locations) {
1:28d2e82:                 InputStream is = null;
1:28d2e82:                 try {
1:28d2e82:                     if (url.startsWith("classpath:")) {
1:28d2e82:                         is = getBlueprintContainer().getResource(url.substring("classpath:".length())).openStream();
1:28d2e82:                     } else {
1:28d2e82:                         is = new URL(url).openStream();
1:28d2e82:                     }
1:28d2e82:                 } catch (IOException e) {
1:28d2e82:                     if (ignoreMissingLocations) {
1:28d2e82:                         LOGGER.debug("Unable to load properties from url " + url + " while ignoreMissingLocations is set to true");
1:28d2e82:                     } else {
1:28d2e82:                         throw e;
1:28d2e82:                     }
1:28d2e82:                 }
1:28d2e82:                 if (is != null) {
1:28d2e82:                     try {
1:28d2e82:                         properties.load(is);
1:28d2e82:                     } finally {
1:28d2e82:                         is.close();
1:28d2e82:                     }
1:28d2e82:                 }
1:28d2e82:             }
1:28d2e82:         }
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     protected String getProperty(String val) {
1:28d2e82:         LOGGER.debug("Retrieving property {}", val);
1:28d2e82:         Object v = null;
1:28d2e82:         if (v == null && systemProperties == SystemProperties.override) {
1:7782911:             v = getBlueprintContainer().getProperty(val);
1:28d2e82:             if (v != null) {
1:28d2e82:                 LOGGER.debug("Found system property {} with value {}", val, v);
1:28d2e82:             }
1:28d2e82:         }
1:28d2e82:         if (v == null && properties != null) {
1:28d2e82:             v = properties.getProperty(val);
1:28d2e82:             if (v != null) {
1:28d2e82:                 LOGGER.debug("Found property {} from locations with value {}", val, v);
1:28d2e82:             }
1:28d2e82:         }
1:28d2e82:         if (v == null && systemProperties == SystemProperties.fallback) {
1:7782911:             v = getBlueprintContainer().getProperty(val);
1:28d2e82:             if (v != null) {
1:28d2e82:                 LOGGER.debug("Found system property {} with value {}", val, v);
1:28d2e82:             }
1:28d2e82:         }
1:28d2e82:         if (v == null && defaultProperties != null) {
1:28d2e82:             v = defaultProperties.get(val);
1:28d2e82:             if (v != null) {
1:28d2e82:                 LOGGER.debug("Retrieved property {} value from defaults {}", val, v);
1:28d2e82:             }
1:28d2e82:         }
1:28d2e82:         if (v == null) {
1:28d2e82:             LOGGER.debug("Property {} not found", val);
1:28d2e82:         }
1:28d2e82:         return v != null ? v.toString() : null;
1:28d2e82:     }
1:28d2e82: 
1:28d2e82:     @Override
1:28d2e82:     protected String retrieveValue(String expression) {
1:28d2e82:         LOGGER.debug("Retrieving Value from expression: {}", expression);
1:28d2e82: 
1:28d2e82:         if (evaluator == null) {
1:28d2e82:             return super.retrieveValue(expression);
1:28d2e82:         } else {
1:28d2e82:             return evaluator.evaluate(expression, new Dictionary<String, String>(){
1:28d2e82:                 @Override
1:28d2e82:                 public String get(Object key) {
1:28d2e82:                     return getProperty((String) key);
1:28d2e82:                 }
1:28d2e82: 
1:28d2e82:                 // following are not important
1:28d2e82:                 @Override
1:28d2e82:                 public String put(String key, String value) {
1:28d2e82:                     throw new UnsupportedOperationException();
1:28d2e82:                 }
1:28d2e82: 
1:28d2e82:                 @Override
1:28d2e82:                 public Enumeration<String> elements() {
1:28d2e82:                     throw new UnsupportedOperationException();
1:28d2e82:                 }
1:28d2e82: 
1:28d2e82:                 @Override
1:28d2e82:                 public boolean isEmpty() {
1:28d2e82:                     throw new UnsupportedOperationException();
1:28d2e82:                 }
1:28d2e82: 
1:28d2e82:                 @Override
1:28d2e82:                 public Enumeration<String> keys() {
1:28d2e82:                     throw new UnsupportedOperationException();
1:28d2e82:                 }
1:28d2e82: 
1:28d2e82:                 @Override
1:28d2e82:                 public String remove(Object key) {
1:28d2e82:                     throw new UnsupportedOperationException();
1:28d2e82:                 }
1:28d2e82: 
1:28d2e82:                 @Override
1:28d2e82:                 public int size() {
1:28d2e82:                     throw new UnsupportedOperationException();
1:28d2e82:                 }
1:28d2e82: 
1:28d2e82:             });
1:28d2e82:         }
1:28d2e82: 
1:28d2e82:     }
1:28d2e82: 
1:28d2e82: 
1:28d2e82: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:8f6ce16
/////////////////////////////////////////////////////////////////////////
1:     private SystemProperties systemProperties = SystemProperties.override;
commit:7782911
/////////////////////////////////////////////////////////////////////////
1:             v = getBlueprintContainer().getProperty(val);
/////////////////////////////////////////////////////////////////////////
1:             v = getBlueprintContainer().getProperty(val);
commit:28d2e82
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.ext;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Properties;
1: 
1: import org.apache.aries.blueprint.ext.evaluator.PropertyEvaluator;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Property placeholder that looks for properties in the System properties.
1:  *
1:  * @version $Rev$, $Date$
1:  */
1: public class PropertyPlaceholder extends AbstractPropertyPlaceholder {
1: 
1:     public enum SystemProperties {
1:         never,
1:         fallback,
1:         override
1:     }
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(PropertyPlaceholder.class);
1: 
1:     private Map defaultProperties;
1:     private Properties properties;
1:     private List<String> locations;
1:     private boolean ignoreMissingLocations;
0:     private SystemProperties systemProperties = SystemProperties.fallback;
1:     private PropertyEvaluator evaluator = null;
1: 
1:     public Map getDefaultProperties() {
1:         return defaultProperties;
1:     }
1: 
1:     public void setDefaultProperties(Map defaultProperties) {
1:         this.defaultProperties = defaultProperties;
1:     }
1: 
1:     public List<String> getLocations() {
1:         return locations;
1:     }
1: 
1:     public void setLocations(List<String> locations) {
1:         this.locations = locations;
1:     }
1: 
1:     public boolean isIgnoreMissingLocations() {
1:         return ignoreMissingLocations;
1:     }
1: 
1:     public void setIgnoreMissingLocations(boolean ignoreMissingLocations) {
1:         this.ignoreMissingLocations = ignoreMissingLocations;
1:     }
1: 
1:     public SystemProperties getSystemProperties() {
1:         return systemProperties;
1:     }
1: 
1:     public void setSystemProperties(SystemProperties systemProperties) {
1:         this.systemProperties = systemProperties;
1:     }
1: 
1:     public PropertyEvaluator getEvaluator() {
1:         return evaluator;
1:     }
1: 
1:     public void setEvaluator(PropertyEvaluator evaluator) {
1:         this.evaluator = evaluator;
1:     }
1: 
1:     public void init() throws Exception {
1:         properties = new Properties();
1:         if (locations != null) {
1:             for (String url : locations) {
1:                 InputStream is = null;
1:                 try {
1:                     if (url.startsWith("classpath:")) {
1:                         is = getBlueprintContainer().getResource(url.substring("classpath:".length())).openStream();
1:                     } else {
1:                         is = new URL(url).openStream();
1:                     }
1:                 } catch (IOException e) {
1:                     if (ignoreMissingLocations) {
1:                         LOGGER.debug("Unable to load properties from url " + url + " while ignoreMissingLocations is set to true");
1:                     } else {
1:                         throw e;
1:                     }
1:                 }
1:                 if (is != null) {
1:                     try {
1:                         properties.load(is);
1:                     } finally {
1:                         is.close();
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
1:     protected String getProperty(String val) {
1:         LOGGER.debug("Retrieving property {}", val);
1:         Object v = null;
1:         if (v == null && systemProperties == SystemProperties.override) {
0:             v = System.getProperty(val);
1:             if (v != null) {
1:                 LOGGER.debug("Found system property {} with value {}", val, v);
1:             }
1:         }
1:         if (v == null && properties != null) {
1:             v = properties.getProperty(val);
1:             if (v != null) {
1:                 LOGGER.debug("Found property {} from locations with value {}", val, v);
1:             }
1:         }
1:         if (v == null && systemProperties == SystemProperties.fallback) {
0:             v = System.getProperty(val);
1:             if (v != null) {
1:                 LOGGER.debug("Found system property {} with value {}", val, v);
1:             }
1:         }
1:         if (v == null && defaultProperties != null) {
1:             v = defaultProperties.get(val);
1:             if (v != null) {
1:                 LOGGER.debug("Retrieved property {} value from defaults {}", val, v);
1:             }
1:         }
1:         if (v == null) {
1:             LOGGER.debug("Property {} not found", val);
1:         }
1:         return v != null ? v.toString() : null;
1:     }
1: 
1:     @Override
1:     protected String retrieveValue(String expression) {
1:         LOGGER.debug("Retrieving Value from expression: {}", expression);
1: 
1:         if (evaluator == null) {
1:             return super.retrieveValue(expression);
1:         } else {
1:             return evaluator.evaluate(expression, new Dictionary<String, String>(){
1:                 @Override
1:                 public String get(Object key) {
1:                     return getProperty((String) key);
1:                 }
1: 
1:                 // following are not important
1:                 @Override
1:                 public String put(String key, String value) {
1:                     throw new UnsupportedOperationException();
1:                 }
1: 
1:                 @Override
1:                 public Enumeration<String> elements() {
1:                     throw new UnsupportedOperationException();
1:                 }
1: 
1:                 @Override
1:                 public boolean isEmpty() {
1:                     throw new UnsupportedOperationException();
1:                 }
1: 
1:                 @Override
1:                 public Enumeration<String> keys() {
1:                     throw new UnsupportedOperationException();
1:                 }
1: 
1:                 @Override
1:                 public String remove(Object key) {
1:                     throw new UnsupportedOperationException();
1:                 }
1: 
1:                 @Override
1:                 public int size() {
1:                     throw new UnsupportedOperationException();
1:                 }
1: 
1:             });
1:         }
1: 
1:     }
1: 
1: 
1: }
============================================================================