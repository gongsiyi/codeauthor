1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.impl;
10:fdf3952: 
1:fdf3952: import java.util.concurrent.atomic.AtomicBoolean;
1:fdf3952: 
1:fdf3952: import javax.management.InstanceAlreadyExistsException;
1:fdf3952: import javax.management.InstanceNotFoundException;
1:fdf3952: import javax.management.MBeanRegistrationException;
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: import javax.management.NotCompliantMBeanException;
1:fdf3952: import javax.management.ObjectName;
1:fdf3952: import javax.management.StandardMBean;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintStateMBean;
1:fdf3952: import org.osgi.framework.BundleActivator;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.util.tracker.ServiceTracker;
1:fdf3952: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1:fdf3952: import org.slf4j.Logger;
1:fdf3952: import org.slf4j.LoggerFactory;
1:fdf3952: 
1:fdf3952: public class Activator implements BundleActivator {
1:fdf3952: 
1:fdf3952:     private static final Logger LOGGER = LoggerFactory.getLogger("org.apache.aries.jmx.blueprint");
1:fdf3952: 
1:fdf3952:     protected BundleContext bundleContext;
1:fdf3952: 
1:fdf3952:     protected ObjectName blueprintStateName;
1:fdf3952:     protected ObjectName blueprintMetadataName;
1:fdf3952: 
1:fdf3952:     protected ServiceTracker mbeanServiceTracker;
1:fdf3952: 
1:fdf3952:     public void start(BundleContext context) throws Exception {
1:fdf3952:         this.bundleContext = context;
1:fdf3952:         this.blueprintStateName = new ObjectName(BlueprintStateMBean.OBJECTNAME);
1:fdf3952:         this.blueprintMetadataName = new ObjectName(BlueprintMetadataMBean.OBJECTNAME);
1:fdf3952: 
1:fdf3952:         // create MBeanServerServiceTracker
1:fdf3952:         // if there has been already a MBeanServer Service in place, this MBeanServerServiceTracker won't miss it
1:fdf3952:         mbeanServiceTracker = new ServiceTracker(bundleContext, MBeanServer.class.getCanonicalName(),
1:fdf3952:                 new MBeanServerServiceTracker());
1:fdf3952:         LOGGER.debug("Awaiting MBeanServer service registration");
1:fdf3952:         mbeanServiceTracker.open();
9:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public void stop(BundleContext context) throws Exception {
1:fdf3952:         mbeanServiceTracker.close();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     class MBeanServerServiceTracker implements ServiceTrackerCustomizer {
1:fdf3952: 
1:fdf3952:         public Object addingService(ServiceReference servicereference) {
3:fdf3952:             try {
1:fdf3952:                 LOGGER.debug("Adding MBeanServer: {}", servicereference);
2:fdf3952:                 final MBeanServer mbeanServer = (MBeanServer) bundleContext.getService(servicereference);
1:e1ab9c4:                 if (mbeanServer != null) {
1:e1ab9c4:                     Activator.this.registerMBeans(mbeanServer);
1:e1ab9c4:                 }
1:fdf3952:                 return mbeanServer;
1:fdf3952:             } catch (RuntimeException e) {
1:fdf3952:                 LOGGER.error("uncaught exception in addingService", e);
1:fdf3952:                 throw e;
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         public void removedService(ServiceReference servicereference, Object obj) {
1:fdf3952:             try {
1:fdf3952:                 LOGGER.debug("Removing MBeanServer: {}", servicereference);
1:e9a1d17:                 Activator.this.deregisterMBeans((MBeanServer) obj);
1:fdf3952:             } catch (Throwable e) {
1:fdf3952:                 LOGGER.debug("uncaught exception in removedService", e);
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         public void modifiedService(ServiceReference servicereference, Object obj) {
1:fdf3952:             // no op
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:     }
1:fdf3952: 
1:e1ab9c4:     protected void registerMBeans(MBeanServer mbeanServer) {
1:fdf3952:         // register BlueprintStateMBean to MBean server
1:fdf3952:         LOGGER.debug("Registering bundle state monitor with MBeanServer: {} with name: {}",
1:fdf3952:                         mbeanServer, blueprintStateName);
1:fdf3952:         try {
1:e1ab9c4:             StandardMBean blueprintState = new RegistrableStandardEmitterMBean(new BlueprintState(bundleContext), BlueprintStateMBean.class);
1:fdf3952:             mbeanServer.registerMBean(blueprintState, blueprintStateName);
1:fdf3952:         } catch (InstanceAlreadyExistsException e) {
1:fdf3952:             LOGGER.debug("Cannot register BlueprintStateMBean");
1:fdf3952:         } catch (MBeanRegistrationException e) {
1:fdf3952:             LOGGER.error("Cannot register BlueprintStateMBean", e);
3:fdf3952:         } catch (NotCompliantMBeanException e) {
1:fdf3952:             LOGGER.error("Cannot register BlueprintStateMBean", e);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         // register BlueprintMetadataMBean to MBean server
1:fdf3952:         LOGGER.debug("Registering bundle metadata monitor with MBeanServer: {} with name: {}",
1:fdf3952:                     mbeanServer, blueprintMetadataName);
1:fdf3952:         try {
1:e1ab9c4:             StandardMBean blueprintMetadata = new StandardMBean(new BlueprintMetadata(bundleContext), BlueprintMetadataMBean.class);
1:fdf3952:             mbeanServer.registerMBean(blueprintMetadata, blueprintMetadataName);
1:fdf3952:         } catch (InstanceAlreadyExistsException e) {
1:fdf3952:             LOGGER.debug("Cannot register BlueprintMetadataMBean");
1:fdf3952:         } catch (MBeanRegistrationException e) {
1:fdf3952:             LOGGER.error("Cannot register BlueprintMetadataMBean", e);
1:fdf3952:         } catch (NotCompliantMBeanException e) {
1:fdf3952:             LOGGER.error("Cannot register BlueprintMetadataMBean", e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:e1ab9c4:     protected void deregisterMBeans(MBeanServer mbeanServer) {
1:fdf3952:         // unregister BlueprintStateMBean from MBean server
1:fdf3952:         try {
1:fdf3952:             mbeanServer.unregisterMBean(blueprintStateName);
1:fdf3952:         } catch (InstanceNotFoundException e) {
1:fdf3952:             LOGGER.debug("BlueprintStateMBean not found on deregistration");
1:fdf3952:         } catch (MBeanRegistrationException e) {
1:fdf3952:             LOGGER.error("BlueprintStateMBean deregistration problem");
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         // unregister BlueprintMetadataMBean from MBean server
1:fdf3952:         try {
1:fdf3952:             mbeanServer.unregisterMBean(blueprintMetadataName);
1:fdf3952:         } catch (InstanceNotFoundException e) {
1:fdf3952:             LOGGER.debug("BlueprintMetadataMBean not found on deregistration");
1:fdf3952:         } catch (MBeanRegistrationException e) {
1:fdf3952:             LOGGER.error("BlueprintMetadataMBean deregistration problem");
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:e9a1d17
/////////////////////////////////////////////////////////////////////////
1:                 Activator.this.deregisterMBeans((MBeanServer) obj);
commit:e1ab9c4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 if (mbeanServer != null) {
1:                     Activator.this.registerMBeans(mbeanServer);
1:                 }
/////////////////////////////////////////////////////////////////////////
0:                 Activator.this.deregisterMBeans(mbeanServer);
/////////////////////////////////////////////////////////////////////////
1:     protected void registerMBeans(MBeanServer mbeanServer) {
1:             StandardMBean blueprintState = new RegistrableStandardEmitterMBean(new BlueprintState(bundleContext), BlueprintStateMBean.class);
/////////////////////////////////////////////////////////////////////////
1:             StandardMBean blueprintMetadata = new StandardMBean(new BlueprintMetadata(bundleContext), BlueprintMetadataMBean.class);
/////////////////////////////////////////////////////////////////////////
1:     protected void deregisterMBeans(MBeanServer mbeanServer) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.impl;
1: 
0: import java.util.List;
0: import java.util.concurrent.CopyOnWriteArrayList;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import javax.management.InstanceAlreadyExistsException;
1: import javax.management.InstanceNotFoundException;
1: import javax.management.MBeanRegistrationException;
1: import javax.management.MBeanServer;
1: import javax.management.NotCompliantMBeanException;
1: import javax.management.ObjectName;
1: import javax.management.StandardMBean;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: import org.apache.aries.jmx.blueprint.BlueprintStateMBean;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class Activator implements BundleActivator {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger("org.apache.aries.jmx.blueprint");
1: 
1:     protected BundleContext bundleContext;
1: 
0:     protected StandardMBean blueprintState;
1:     protected ObjectName blueprintStateName;
1: 
0:     protected StandardMBean blueprintMetadata;
1:     protected ObjectName blueprintMetadataName;
1: 
0:     protected List<MBeanServer> mbeanServers = new CopyOnWriteArrayList<MBeanServer>();
1:     protected ServiceTracker mbeanServiceTracker;
1: 
0:     protected AtomicBoolean servicesRegistered = new AtomicBoolean(false);
1: 
1:     public void start(BundleContext context) throws Exception {
1:         this.bundleContext = context;
1:         this.blueprintStateName = new ObjectName(BlueprintStateMBean.OBJECTNAME);
1:         this.blueprintMetadataName = new ObjectName(BlueprintMetadataMBean.OBJECTNAME);
1: 
1:         // create MBeanServerServiceTracker
1:         // if there has been already a MBeanServer Service in place, this MBeanServerServiceTracker won't miss it
1:         mbeanServiceTracker = new ServiceTracker(bundleContext, MBeanServer.class.getCanonicalName(),
1:                 new MBeanServerServiceTracker());
1:         LOGGER.debug("Awaiting MBeanServer service registration");
1:         mbeanServiceTracker.open();
1:     }
1: 
1:     public void stop(BundleContext context) throws Exception {
0:         for (MBeanServer mbeanServer : mbeanServers) {
0:             this.deregisterMBeans(mbeanServer);
1:         }
1:         mbeanServiceTracker.close();
0:         mbeanServers.clear();
1:     }
1: 
1:     class MBeanServerServiceTracker implements ServiceTrackerCustomizer {
1: 
1:         public Object addingService(ServiceReference servicereference) {
1:             try {
1:                 LOGGER.debug("Adding MBeanServer: {}", servicereference);
1:                 final MBeanServer mbeanServer = (MBeanServer) bundleContext.getService(servicereference);
0:                 Activator.this.mbeanServers.add(mbeanServer);
0:                 Activator.this.processRegister(mbeanServer);
1:                 return mbeanServer;
1:             } catch (RuntimeException e) {
1:                 LOGGER.error("uncaught exception in addingService", e);
1:                 throw e;
1:             }
1:         }
1: 
1:         public void removedService(ServiceReference servicereference, Object obj) {
1:             try {
1:                 LOGGER.debug("Removing MBeanServer: {}", servicereference);
1:                 final MBeanServer mbeanServer = (MBeanServer) bundleContext.getService(servicereference);
0:                 Activator.this.mbeanServers.remove(mbeanServer);
0:                 Activator.this.processDeregister(mbeanServer);
1:             } catch (Throwable e) {
1:                 LOGGER.debug("uncaught exception in removedService", e);
1:             }
1:         }
1: 
1:         public void modifiedService(ServiceReference servicereference, Object obj) {
1:             // no op
1:         }
1: 
1:     }
1: 
0:     private void processRegister(final MBeanServer mbeanServer) {
0:         Runnable registration = new Runnable() {
0:             public void run() {
0:                 Activator.this.registerMBeans(mbeanServer);
1:             }
0:         };
0:         Thread registrationThread = new Thread(registration, "Blueprint MBeans Registration");
0:         registrationThread.setDaemon(true);
0:         registrationThread.start();
1: 
1:     }
1: 
0:     private void processDeregister(final MBeanServer mbeanServer) {
0:         Runnable deregister = new Runnable() {
0:             public void run() {
0:                 Activator.this.deregisterMBeans(mbeanServer);
1:             }
0:         };
1: 
0:         Thread deregisterThread = new Thread(deregister, "Blueprint MBeans Deregistration");
0:         deregisterThread.setDaemon(true);
0:         deregisterThread.start();
1:     }
1: 
0:     protected synchronized void registerMBeans(MBeanServer mbeanServer) {
0:         // create BlueprintStateMBean
0:         /* the StardardMBean does not implement the MBeanRegistration in jdk1.5 */
1:         try {
0:             blueprintState = new RegistrableStandardEmitterMBean(new BlueprintState(bundleContext), BlueprintStateMBean.class);
1:         } catch (NotCompliantMBeanException e) {
0:             LOGGER.error("Unable to create StandardMBean for BlueprintState", e);
0:             return;
1:         }
1: 
1:         // register BlueprintStateMBean to MBean server
1:         LOGGER.debug("Registering bundle state monitor with MBeanServer: {} with name: {}",
1:                         mbeanServer, blueprintStateName);
1:         try {
1:             mbeanServer.registerMBean(blueprintState, blueprintStateName);
1:         } catch (InstanceAlreadyExistsException e) {
1:             LOGGER.debug("Cannot register BlueprintStateMBean");
1:         } catch (MBeanRegistrationException e) {
1:             LOGGER.error("Cannot register BlueprintStateMBean", e);
1:         } catch (NotCompliantMBeanException e) {
1:             LOGGER.error("Cannot register BlueprintStateMBean", e);
1:         }
1: 
0:         // create BlueprintMetadataMBean
1:         try {
0:             blueprintMetadata = new StandardMBean(new BlueprintMetadata(bundleContext), BlueprintMetadataMBean.class);
1:         } catch (NotCompliantMBeanException e) {
0:             LOGGER.error("Unable to create StandardMBean for BlueprintMetadata", e);
0:             return;
1:         }
1:         // register BlueprintMetadataMBean to MBean server
1:         LOGGER.debug("Registering bundle metadata monitor with MBeanServer: {} with name: {}",
1:                     mbeanServer, blueprintMetadataName);
1:         try {
1:             mbeanServer.registerMBean(blueprintMetadata, blueprintMetadataName);
1:         } catch (InstanceAlreadyExistsException e) {
1:             LOGGER.debug("Cannot register BlueprintMetadataMBean");
1:         } catch (MBeanRegistrationException e) {
1:             LOGGER.error("Cannot register BlueprintMetadataMBean", e);
1:         } catch (NotCompliantMBeanException e) {
1:             LOGGER.error("Cannot register BlueprintMetadataMBean", e);
1:         }
1: 
0:         servicesRegistered.set(true);
1:     }
1: 
0:     protected synchronized void deregisterMBeans(MBeanServer mbeanServer) {
0:         if (!servicesRegistered.get()) {
0:             return;
1:         }
1:         // unregister BlueprintStateMBean from MBean server
1:         try {
1:             mbeanServer.unregisterMBean(blueprintStateName);
1:         } catch (InstanceNotFoundException e) {
1:             LOGGER.debug("BlueprintStateMBean not found on deregistration");
1:         } catch (MBeanRegistrationException e) {
1:             LOGGER.error("BlueprintStateMBean deregistration problem");
1:         }
0:         blueprintState = null;
1: 
1:         // unregister BlueprintMetadataMBean from MBean server
1:         try {
1:             mbeanServer.unregisterMBean(blueprintMetadataName);
1:         } catch (InstanceNotFoundException e) {
1:             LOGGER.debug("BlueprintMetadataMBean not found on deregistration");
1:         } catch (MBeanRegistrationException e) {
1:             LOGGER.error("BlueprintMetadataMBean deregistration problem");
1:         }
0:         blueprintMetadata = null;
1: 
0:         servicesRegistered.set(false);
1:     }
1: 
1: }
============================================================================