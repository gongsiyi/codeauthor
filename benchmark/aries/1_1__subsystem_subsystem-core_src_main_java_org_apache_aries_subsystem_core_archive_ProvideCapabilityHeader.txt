1:26123d8: /*
1:26123d8:  * Licensed under the Apache License, Version 2.0 (the "License");
1:26123d8:  * you may not use this file except in compliance with the License.
1:26123d8:  * You may obtain a copy of the License at
1:26123d8:  *
1:26123d8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:26123d8:  *
1:26123d8:  * Unless required by applicable law or agreed to in writing, software
1:26123d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:26123d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:26123d8:  * See the License for the specific language governing permissions and
1:26123d8:  * limitations under the License.
1:26123d8:  */
1:26123d8: package org.apache.aries.subsystem.core.archive;
14:26123d8: 
1:26123d8: import java.util.ArrayList;
1:d93afd1: import java.util.Collection;
1:df175a6: import java.util.List;
1:26123d8: 
1:26123d8: import org.osgi.framework.Constants;
1:df175a6: import org.osgi.resource.Resource;
1:26123d8: 
1:2ffcfb9: public class ProvideCapabilityHeader extends AbstractClauseBasedHeader<ProvideCapabilityHeader.Clause> implements CapabilityHeader<ProvideCapabilityHeader.Clause> {	
1:2ffcfb9:     public static class Clause extends AbstractClause {
1:d93afd1: 		public static final String DIRECTIVE_EFFECTIVE = EffectiveDirective.NAME;
1:26123d8: 		public static final String DIRECTIVE_USES = Constants.USES_DIRECTIVE;
1:26123d8: 		
1:d93afd1: 		private static final Collection<Parameter> defaultParameters = generateDefaultParameters(
1:d93afd1: 				EffectiveDirective.DEFAULT);
1:26123d8: 		
1:26123d8: 		public Clause(String clause) {
1:2ffcfb9:             super(
1:2ffcfb9:             		parsePath(clause, Patterns.NAMESPACE, false),
1:d93afd1:             		parseTypedParameters(clause),
1:d93afd1:             		defaultParameters);
1:2ffcfb9: 		}
1:4954db6: 
1:2ffcfb9:         public String getNamespace() {
1:2ffcfb9:             return path;
1:2ffcfb9:         }
1:26123d8: 
1:df175a6: 		public ProvideCapabilityCapability toCapability(Resource resource) {
1:df175a6: 			return new ProvideCapabilityCapability(this, resource);
1:2ffcfb9: 		}
1:df175a6: 		
1:df175a6: 		@Override
2:26123d8: 		public String toString() {
1:26123d8: 			StringBuilder builder = new StringBuilder()
1:26123d8: 					.append(getPath());
1:26123d8: 			for (Parameter parameter : getParameters()) {
1:26123d8: 				builder.append(';').append(parameter);
1:2ffcfb9: 			}
2:26123d8: 			return builder.toString();
1:2ffcfb9: 		}
1:4954db6: 	}
1:26123d8: 	
1:26123d8: 	public static final String NAME = Constants.PROVIDE_CAPABILITY;
1:26123d8: 	
1:26123d8: 	public ProvideCapabilityHeader(String value) {
1:2ffcfb9: 		super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:df175a6: 	}
1:26123d8: 	
10:26123d8: 	@Override
1:26123d8: 	public String getName() {
1:26123d8: 		return NAME;
26:26123d8: 	}
1:26123d8: 
1:26123d8: 	@Override
1:26123d8: 	public String getValue() {
1:26123d8: 		return toString();
1:26123d8: 	}
1:26123d8: 	
1:26123d8: 	@Override
1:df175a6: 	public List<ProvideCapabilityCapability> toCapabilities(Resource resource) {
1:df175a6: 		List<ProvideCapabilityCapability> result = new ArrayList<ProvideCapabilityCapability>();
1:df175a6: 		for (Clause clause : clauses)
1:df175a6: 			result.add(clause.toCapability(resource));
1:df175a6: 		return result;
1:df175a6: 	}
1:df175a6: 	
1:26123d8: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:d93afd1
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: 		public static final String DIRECTIVE_EFFECTIVE = EffectiveDirective.NAME;
1: 		private static final Collection<Parameter> defaultParameters = generateDefaultParameters(
1: 				EffectiveDirective.DEFAULT);
1:             		parseTypedParameters(clause),
1:             		defaultParameters);
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: public class ProvideCapabilityHeader extends AbstractClauseBasedHeader<ProvideCapabilityHeader.Clause> implements CapabilityHeader<ProvideCapabilityHeader.Clause> {	
1:     public static class Clause extends AbstractClause {
/////////////////////////////////////////////////////////////////////////
1:             super(
1:             		parsePath(clause, Patterns.NAMESPACE, false),
0:             		new HashMap<String, Parameter>(),
0:             		generateDefaultParameters(
0:             				EffectiveDirective.DEFAULT));
0:             Matcher matcher = Patterns.TYPED_PARAMETER.matcher(clause);
0:             while (matcher.find()) {
0:             	if (":=".equals(matcher.group(2))) {
0:             		// This is a directive.
0:             		parameters.put(matcher.group(1), DirectiveFactory.createDirective(matcher.group(1), removeQuotes(matcher.group(3))));
1:             	}
0:             	else if (":".equals(matcher.group(5))) {
0:             		// This is a typed attribute with a declared version.
0:             		parameters.put(matcher.group(4), new TypedAttribute(matcher.group(4), removeQuotes(matcher.group(7)), matcher.group(6)));
1:             	}
0:             	else {
0:             		// This is a typed attribute without a declared version.
0:             		parameters.put(matcher.group(4), new TypedAttribute(matcher.group(4), removeQuotes(matcher.group(7)), TypedAttribute.Type.String));
1:             	}
1:             }
1:         public String getNamespace() {
1:             return path;
1:         }
/////////////////////////////////////////////////////////////////////////
1: 		super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
/////////////////////////////////////////////////////////////////////////
commit:4954db6
/////////////////////////////////////////////////////////////////////////
0: 		private static String removeQuotes(String value) {
0: 			if (value == null)
0: 				return null;
0: 			if (value.startsWith("\"") && value.endsWith("\""))
0: 				return value.substring(1, value.length() - 1);
0: 			return value;
1: 		}
1: 		
/////////////////////////////////////////////////////////////////////////
0: 					parameters.put(matcher.group(1), DirectiveFactory.createDirective(matcher.group(1), removeQuotes(matcher.group(3))));
0: 					parameters.put(matcher.group(4), new TypedAttribute(matcher.group(4), removeQuotes(matcher.group(7)), matcher.group(6)));
0: 					parameters.put(matcher.group(4), new TypedAttribute(matcher.group(4), removeQuotes(matcher.group(7)), TypedAttribute.Type.String));
commit:df175a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import org.osgi.resource.Resource;
0: public class ProvideCapabilityHeader implements CapabilityHeader<ProvideCapabilityHeader.Clause> {	
/////////////////////////////////////////////////////////////////////////
1: 		public ProvideCapabilityCapability toCapability(Resource resource) {
1: 			return new ProvideCapabilityCapability(this, resource);
1: 		}
1: 		
/////////////////////////////////////////////////////////////////////////
1: 	public List<ProvideCapabilityCapability> toCapabilities(Resource resource) {
1: 		List<ProvideCapabilityCapability> result = new ArrayList<ProvideCapabilityCapability>();
1: 		for (Clause clause : clauses)
1: 			result.add(clause.toCapability(resource));
1: 		return result;
1: 	}
1: 	
1: 	@Override
commit:26123d8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import org.osgi.framework.Constants;
1: 
0: public class ProvideCapabilityHeader implements Header<ProvideCapabilityHeader.Clause> {	
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
0: 		public static final String DIRECTIVE_EFFECTIVE = Constants.EFFECTIVE_DIRECTIVE;
1: 		public static final String DIRECTIVE_USES = Constants.USES_DIRECTIVE;
1: 		
0: 		private static final String DIRECTIVE = '(' + Grammar.EXTENDED + ")(:=)(" + Grammar.ARGUMENT + ')';
0: 		private static final String TYPED_ATTR = '(' + Grammar.EXTENDED + ")(?:(\\:)(" + Grammar.TYPE + "))?=(" + Grammar.ARGUMENT + ')';
0: 		private static final Pattern PATTERN_NAMESPACE = Pattern.compile('(' + Grammar.NAMESPACE + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PARAMETER = Pattern.compile("(?:(?:" + DIRECTIVE + ")|(?:" + TYPED_ATTR + "))(?=;|\\z)");
1: 		
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 			Parameter parameter = parameters.get(DIRECTIVE_EFFECTIVE);
0: 			if (parameter == null)
0: 				parameters.put(DIRECTIVE_EFFECTIVE, EffectiveDirective.DEFAULT);
1: 		}
1: 		
0: 		private final String path;
0: 		private final Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		
1: 		public Clause(String clause) {
0: 			Matcher matcher = PATTERN_NAMESPACE.matcher(clause);
0: 			if (!matcher.find())
0: 				throw new IllegalArgumentException("Missing namespace path: " + clause);
0: 			path = matcher.group();
0: 			matcher.usePattern(PATTERN_PARAMETER);
0: 			while (matcher.find()) {
0: 				if (":=".equals(matcher.group(2))) {
0: 					// This is a directive.
0: 					parameters.put(matcher.group(1), DirectiveFactory.createDirective(matcher.group(1), matcher.group(3)));
1: 				}
0: 				else if (":".equals(matcher.group(5)))
0: 					// This is a typed attribute with a declared version.
0: 					parameters.put(matcher.group(4), new TypedAttribute(matcher.group(4), matcher.group(7), matcher.group(6)));
0: 				else
0: 					// This is a typed attribute without a declared version.
0: 					parameters.put(matcher.group(4), new TypedAttribute(matcher.group(4), matcher.group(7), TypedAttribute.Type.String));
1: 			}
0: 			fillInDefaults(parameters);
1: 		}
1: 		
1: 		@Override
0: 		public Attribute getAttribute(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Attribute) {
0: 				return (Attribute)result;
1: 			}
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Attribute> getAttributes() {
0: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
0: 			for (Parameter parameter : parameters.values()) {
0: 				if (parameter instanceof Attribute) {
0: 					attributes.add((TypedAttribute)parameter);
1: 				}
1: 			}
0: 			attributes.trimToSize();
0: 			return attributes;
1: 		}
1: 
1: 		@Override
0: 		public Directive getDirective(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Directive) {
0: 				return (Directive)result;
1: 			}
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Directive> getDirectives() {
0: 			ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
0: 			for (Parameter parameter : parameters.values()) {
0: 				if (parameter instanceof Directive) {
0: 					directives.add((Directive)parameter);
1: 				}
1: 			}
0: 			directives.trimToSize();
0: 			return directives;
1: 		}
1: 		
0: 		public String getNamespace() {
0: 			return path;
1: 		}
1: 
1: 		@Override
0: 		public Parameter getParameter(String name) {
0: 			return parameters.get(name);
1: 		}
1: 
1: 		@Override
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.unmodifiableCollection(parameters.values());
1: 		}
1: 		
1: 		@Override
0: 		public String getPath() {
0: 			return path;
1: 		}
1: 		
1: 		@Override
1: 		public String toString() {
1: 			StringBuilder builder = new StringBuilder()
1: 					.append(getPath());
1: 			for (Parameter parameter : getParameters()) {
1: 				builder.append(';').append(parameter);
1: 			}
1: 			return builder.toString();
1: 		}
1: 	}
1: 	
1: 	public static final String NAME = Constants.PROVIDE_CAPABILITY;
1: 	
0: 	private static final Pattern PATTERN = Pattern.compile('(' + Grammar.CAPABILITY + ")(?=,|\\z)");
1: 	
0: 	private final Set<Clause> clauses = new HashSet<Clause>();
1: 	
1: 	public ProvideCapabilityHeader(String value) {
0: 		Matcher matcher = PATTERN.matcher(value);
0: 		while (matcher.find())
0: 			clauses.add(new Clause(matcher.group()));
0: 		if (clauses.isEmpty())
0: 			throw new IllegalArgumentException("A " + NAME + " header must have at least one clause");
1: 	}
1: 	
1: 	@Override
0: 	public Collection<ProvideCapabilityHeader.Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
1: 	}
1: 
1: 	@Override
1: 	public String getName() {
1: 		return NAME;
1: 	}
1: 
1: 	@Override
1: 	public String getValue() {
1: 		return toString();
1: 	}
1: 	
1: 	@Override
1: 	public String toString() {
0: 		StringBuilder builder = new StringBuilder();
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause).append(',');
1: 		}
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
0: 		builder.deleteCharAt(builder.length() - 1);
1: 		return builder.toString();
1: 	}
1: }
============================================================================