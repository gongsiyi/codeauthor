1:3e11f4a: /**
1:3e11f4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:3e11f4a:  * or more contributor license agreements.  See the NOTICE file
1:3e11f4a:  * distributed with this work for additional information
1:3e11f4a:  * regarding copyright ownership.  The ASF licenses this file
1:3e11f4a:  * to you under the Apache License, Version 2.0 (the
1:3e11f4a:  * "License"); you may not use this file except in compliance
1:3e11f4a:  * with the License.  You may obtain a copy of the License at
1:3e11f4a:  *
1:3e11f4a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3e11f4a:  *
1:3e11f4a:  * Unless required by applicable law or agreed to in writing,
1:3e11f4a:  * software distributed under the License is distributed on an
1:3e11f4a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3e11f4a:  * KIND, either express or implied.  See the License for the
1:3e11f4a:  * specific language governing permissions and limitations
1:3e11f4a:  * under the License.
1:3e11f4a:  */
1:3e11f4a: package org.apache.aries.blueprint.container;
1:3e11f4a: 
1:3e11f4a: import java.util.ArrayList;
1:3e11f4a: import java.util.LinkedList;
1:3e11f4a: import java.util.List;
1:3e11f4a: import java.util.Queue;
1:3e11f4a: import java.util.concurrent.*;
1:3e11f4a: import java.util.concurrent.atomic.AtomicBoolean;
1:3e11f4a: 
1:3e11f4a: public class ExecutorServiceWrapper extends AbstractExecutorService implements Runnable {
1:3e11f4a: 
1:3e11f4a:     private final ExecutorService delegate;
1:3e11f4a:     private final ConcurrentLinkedQueue<Runnable> queue = new ConcurrentLinkedQueue<Runnable>();
1:3e11f4a:     private final AtomicBoolean triggered = new AtomicBoolean();
1:3e11f4a:     private final AtomicBoolean shutdown = new AtomicBoolean();
1:3e11f4a:     private Thread runningThread;
1:3e11f4a: 
1:3e11f4a:     public ExecutorServiceWrapper(ExecutorService delegate) {
1:3e11f4a:         this.delegate = delegate;
1:3e11f4a:     }
1:3e11f4a: 
1:3e11f4a:     public void shutdown() {
1:3e11f4a:         shutdown.set(true);
1:3e11f4a:     }
1:3e11f4a: 
1:3e11f4a:     public List<Runnable> shutdownNow() {
1:3e11f4a:         List<Runnable> pending = new ArrayList<Runnable>();
1:3e11f4a:         if (shutdown.compareAndSet(false, true)) {
1:3e11f4a:             Runnable runnable;
1:3e11f4a:             while ((runnable = queue.poll()) != null) {
1:3e11f4a:                 pending.add(runnable);
1:3e11f4a:             }
1:3e11f4a:         }
1:3e11f4a:         return pending;
1:3e11f4a:     }
1:3e11f4a: 
1:3e11f4a:     public boolean isShutdown() {
1:3e11f4a:         return shutdown.get();
1:3e11f4a:     }
1:3e11f4a: 
1:3e11f4a:     public boolean isTerminated() {
1:3e11f4a:         return delegate.isTerminated() || isShutdown() && queue.isEmpty() && !triggered.get();
1:3e11f4a:     }
1:3e11f4a: 
1:3e11f4a:     public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {
1:3e11f4a:         long millis = unit.toMillis(timeout);
1:3e11f4a:         if (millis > 0) {
1:3e11f4a:             long max = System.currentTimeMillis() + millis;
1:3e11f4a:             synchronized (triggered) {
1:3e11f4a:                 while (System.currentTimeMillis() < max) {
1:3e11f4a:                     if (isTerminated()) {
1:3e11f4a:                         return true;
1:3e11f4a:                     } else {
1:3e11f4a:                         triggered.wait(millis);
1:3e11f4a:                     }
1:3e11f4a:                 }
1:3e11f4a:             }
1:3e11f4a:         }
1:3e11f4a:         return isTerminated();
1:3e11f4a:     }
1:3e11f4a: 
1:3e11f4a:     public void execute(Runnable command) {
1:3e11f4a:         if (isShutdown()) {
1:3e11f4a:             throw new RejectedExecutionException("Executor has been shut down");
1:3e11f4a:         }
1:3e11f4a:         queue.add(command);
1:3e11f4a:         triggerExecution();
1:3e11f4a:     }
1:3e11f4a: 
1:3e11f4a:     protected void triggerExecution() {
1:3e11f4a:         if( triggered.compareAndSet(false, true) ) {
1:3e11f4a:             delegate.execute(this);
1:3e11f4a:         }
1:3e11f4a:     }
1:3e11f4a: 
1:3e11f4a:     public void run() {
1:3e11f4a:         try {
1:3e11f4a:             Runnable runnable;
1:3e11f4a:             synchronized (triggered) {
1:3e11f4a:                 runningThread = Thread.currentThread();
1:3e11f4a:             }
1:3e11f4a:             while (true) {
1:3e11f4a:                 runnable = queue.poll();
1:3e11f4a:                 if (runnable == null) {
1:3e11f4a:                     return;
1:3e11f4a:                 }
1:3e11f4a:                 try {
1:3e11f4a:                     runnable.run();
1:3e11f4a:                 } catch (Throwable e) {
1:3e11f4a:                     Thread thread = Thread.currentThread();
1:3e11f4a:                     thread.getUncaughtExceptionHandler().uncaughtException(thread, e);
1:3e11f4a:                 }
1:3e11f4a:             }
1:3e11f4a:         } finally {
1:3e11f4a:             synchronized (triggered) {
1:3e11f4a:                 runningThread = null;
1:3e11f4a:                 triggered.set(false);
1:3e11f4a:                 triggered.notifyAll();
1:3e11f4a:             }
1:3e11f4a:             if (!isShutdown() && !queue.isEmpty()) {
1:3e11f4a:                 triggerExecution();
1:3e11f4a:             }
1:3e11f4a:         }
1:3e11f4a:     }
1:3e11f4a: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:3e11f4a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.container;
1: 
1: import java.util.ArrayList;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Queue;
1: import java.util.concurrent.*;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: public class ExecutorServiceWrapper extends AbstractExecutorService implements Runnable {
1: 
1:     private final ExecutorService delegate;
1:     private final ConcurrentLinkedQueue<Runnable> queue = new ConcurrentLinkedQueue<Runnable>();
1:     private final AtomicBoolean triggered = new AtomicBoolean();
1:     private final AtomicBoolean shutdown = new AtomicBoolean();
1:     private Thread runningThread;
1: 
1:     public ExecutorServiceWrapper(ExecutorService delegate) {
1:         this.delegate = delegate;
1:     }
1: 
1:     public void shutdown() {
1:         shutdown.set(true);
1:     }
1: 
1:     public List<Runnable> shutdownNow() {
1:         List<Runnable> pending = new ArrayList<Runnable>();
1:         if (shutdown.compareAndSet(false, true)) {
1:             Runnable runnable;
1:             while ((runnable = queue.poll()) != null) {
1:                 pending.add(runnable);
1:             }
1:         }
1:         return pending;
1:     }
1: 
1:     public boolean isShutdown() {
1:         return shutdown.get();
1:     }
1: 
1:     public boolean isTerminated() {
1:         return delegate.isTerminated() || isShutdown() && queue.isEmpty() && !triggered.get();
1:     }
1: 
1:     public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {
1:         long millis = unit.toMillis(timeout);
1:         if (millis > 0) {
1:             long max = System.currentTimeMillis() + millis;
1:             synchronized (triggered) {
1:                 while (System.currentTimeMillis() < max) {
1:                     if (isTerminated()) {
1:                         return true;
1:                     } else {
1:                         triggered.wait(millis);
1:                     }
1:                 }
1:             }
1:         }
1:         return isTerminated();
1:     }
1: 
1:     public void execute(Runnable command) {
1:         if (isShutdown()) {
1:             throw new RejectedExecutionException("Executor has been shut down");
1:         }
1:         queue.add(command);
1:         triggerExecution();
1:     }
1: 
1:     protected void triggerExecution() {
1:         if( triggered.compareAndSet(false, true) ) {
1:             delegate.execute(this);
1:         }
1:     }
1: 
1:     public void run() {
1:         try {
1:             Runnable runnable;
1:             synchronized (triggered) {
1:                 runningThread = Thread.currentThread();
1:             }
1:             while (true) {
1:                 runnable = queue.poll();
1:                 if (runnable == null) {
1:                     return;
1:                 }
1:                 try {
1:                     runnable.run();
1:                 } catch (Throwable e) {
1:                     Thread thread = Thread.currentThread();
1:                     thread.getUncaughtExceptionHandler().uncaughtException(thread, e);
1:                 }
1:             }
1:         } finally {
1:             synchronized (triggered) {
1:                 runningThread = null;
1:                 triggered.set(false);
1:                 triggered.notifyAll();
1:             }
1:             if (!isShutdown() && !queue.isEmpty()) {
1:                 triggerExecution();
1:             }
1:         }
1:     }
1: }
============================================================================