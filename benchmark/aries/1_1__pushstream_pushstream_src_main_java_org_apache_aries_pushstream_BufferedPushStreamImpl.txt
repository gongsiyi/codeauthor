1:7fa86e8: /*
1:7fa86e8:  * Licensed to the Apache Software Foundation (ASF) under one
1:7fa86e8:  * or more contributor license agreements.  See the NOTICE file
1:7fa86e8:  * distributed with this work for additional information
1:7fa86e8:  * regarding copyright ownership.  The ASF licenses this file
1:7fa86e8:  * to you under the Apache License, Version 2.0 (the
1:7fa86e8:  * "License"); you may not use this file except in compliance
1:7fa86e8:  * with the License.  You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing,
1:7fa86e8:  * software distributed under the License is distributed on an
1:7fa86e8:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:7fa86e8:  * KIND, either express or implied.  See the License for the
1:7fa86e8:  * specific language governing permissions and limitations
1:7fa86e8:  * under the License.
1:7fa86e8:  */
1:7fa86e8: package org.apache.aries.pushstream;
1:7fa86e8: 
1:7fa86e8: import static java.util.concurrent.TimeUnit.MILLISECONDS;
1:7fa86e8: import static org.apache.aries.pushstream.AbstractPushStreamImpl.State.CLOSED;
1:7fa86e8: import static org.osgi.util.pushstream.PushEventConsumer.ABORT;
1:7fa86e8: 
1:7fa86e8: import java.util.concurrent.BlockingQueue;
1:7fa86e8: import java.util.concurrent.Executor;
1:7fa86e8: import java.util.concurrent.ScheduledExecutorService;
1:7fa86e8: import java.util.concurrent.Semaphore;
1:7fa86e8: import java.util.concurrent.atomic.AtomicBoolean;
1:7fa86e8: import java.util.function.Function;
1:7fa86e8: 
1:7fa86e8: import org.osgi.util.pushstream.PushEvent;
1:7fa86e8: import org.osgi.util.pushstream.PushEventConsumer;
1:7fa86e8: import org.osgi.util.pushstream.PushStream;
1:7fa86e8: import org.osgi.util.pushstream.PushStreamProvider;
1:7fa86e8: import org.osgi.util.pushstream.PushbackPolicy;
1:7fa86e8: import org.osgi.util.pushstream.QueuePolicy;
1:7fa86e8: 
1:7fa86e8: public class BufferedPushStreamImpl<T, U extends BlockingQueue<PushEvent< ? extends T>>>
1:7fa86e8: 		extends UnbufferedPushStreamImpl<T,U> implements PushStream<T> {
1:7fa86e8: 	
1:7fa86e8: 	private final U eventQueue;
1:7fa86e8: 	
1:7fa86e8: 	private final Semaphore semaphore;
1:7fa86e8: 	
1:7fa86e8: 	private final Executor worker;
1:7fa86e8: 	
1:7fa86e8: 	private final QueuePolicy<T, U> queuePolicy;
1:7fa86e8: 
1:7fa86e8: 	private final PushbackPolicy<T, U> pushbackPolicy;
1:7fa86e8: 	
1:7fa86e8: 	/**
1:7fa86e8: 	 * Indicates that a terminal event has been received, that we should stop
1:7fa86e8: 	 * collecting new events, and that we must drain the buffer before
1:7fa86e8: 	 * continuing
1:7fa86e8: 	 */
1:7fa86e8: 	private final AtomicBoolean			softClose	= new AtomicBoolean();
1:7fa86e8: 
1:7fa86e8: 	private final int					parallelism;
1:7fa86e8: 
1:7fa86e8: 	public BufferedPushStreamImpl(PushStreamProvider psp,
1:7fa86e8: 			ScheduledExecutorService scheduler, U eventQueue,
1:7fa86e8: 			int parallelism, Executor worker, QueuePolicy<T,U> queuePolicy,
1:7fa86e8: 			PushbackPolicy<T,U> pushbackPolicy,
1:7fa86e8: 			Function<PushEventConsumer<T>,AutoCloseable> connector) {
1:7fa86e8: 		super(psp, worker, scheduler, connector);
1:7fa86e8: 		this.eventQueue = eventQueue;
1:7fa86e8: 		this.parallelism = parallelism;
1:7fa86e8: 		this.semaphore = new Semaphore(parallelism);
1:7fa86e8: 		this.worker = worker;
1:7fa86e8: 		this.queuePolicy = queuePolicy;
1:7fa86e8: 		this.pushbackPolicy = pushbackPolicy;
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	protected long handleEvent(PushEvent< ? extends T> event) {
1:7fa86e8: 
1:7fa86e8: 		// If we have already been soft closed, or hard closed then abort
1:7fa86e8: 		if (!softClose.compareAndSet(false, event.isTerminal())
1:7fa86e8: 				|| closed.get() == CLOSED) {
1:7fa86e8: 			return ABORT;
1:7fa86e8: 		}
1:7fa86e8: 
1:7fa86e8: 		try {
1:7fa86e8: 			queuePolicy.doOffer(eventQueue, event);
1:7fa86e8: 			long backPressure = pushbackPolicy.pushback(eventQueue);
1:7fa86e8: 			if(backPressure < 0) {
1:7fa86e8: 				close();
1:7fa86e8: 				return ABORT;
1:7fa86e8: 			}
1:7fa86e8: 			if(semaphore.tryAcquire()) {
1:7fa86e8: 				startWorker();
1:7fa86e8: 			}
1:7fa86e8: 			return backPressure;
1:7fa86e8: 		} catch (Exception e) {
1:7fa86e8: 			close(PushEvent.error(e));
1:7fa86e8: 			return ABORT;
1:7fa86e8: 		}
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	private void startWorker() {
1:7fa86e8: 		worker.execute(() -> {
1:7fa86e8: 			try {
1:7fa86e8: 				PushEvent< ? extends T> event;
1:7fa86e8: 				while ((event = eventQueue.poll()) != null) {
1:7fa86e8: 					if (event.isTerminal()) {
1:7fa86e8: 						// Wait for the other threads to finish
1:7fa86e8: 						semaphore.acquire(parallelism - 1);
1:7fa86e8: 					}
1:7fa86e8: 
1:7fa86e8: 					long backpressure = super.handleEvent(event);
1:7fa86e8: 					if(backpressure < 0) {
1:7fa86e8: 						close();
1:7fa86e8: 						return;
1:7fa86e8: 					} else if(backpressure > 0) {
1:7fa86e8: 						scheduler.schedule(this::startWorker, backpressure,
1:7fa86e8: 								MILLISECONDS);
1:7fa86e8: 						return;
1:7fa86e8: 					}
1:7fa86e8: 				}
1:7fa86e8: 
1:7fa86e8: 				semaphore.release();
1:7fa86e8: 			} catch (Exception e) {
1:7fa86e8: 				close(PushEvent.error(e));
1:7fa86e8: 			}
1:7fa86e8: 			if(eventQueue.peek() != null && semaphore.tryAcquire()) {
1:7fa86e8: 				try {
1:7fa86e8: 					startWorker();
1:7fa86e8: 				} catch (Exception e) {
1:7fa86e8: 					close(PushEvent.error(e));
1:7fa86e8: 				}
1:7fa86e8: 			}
1:7fa86e8: 		});
1:7fa86e8: 		
1:7fa86e8: 	}
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.pushstream;
1: 
1: import static java.util.concurrent.TimeUnit.MILLISECONDS;
1: import static org.apache.aries.pushstream.AbstractPushStreamImpl.State.CLOSED;
1: import static org.osgi.util.pushstream.PushEventConsumer.ABORT;
1: 
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.Executor;
1: import java.util.concurrent.ScheduledExecutorService;
1: import java.util.concurrent.Semaphore;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.function.Function;
1: 
1: import org.osgi.util.pushstream.PushEvent;
1: import org.osgi.util.pushstream.PushEventConsumer;
1: import org.osgi.util.pushstream.PushStream;
1: import org.osgi.util.pushstream.PushStreamProvider;
1: import org.osgi.util.pushstream.PushbackPolicy;
1: import org.osgi.util.pushstream.QueuePolicy;
1: 
1: public class BufferedPushStreamImpl<T, U extends BlockingQueue<PushEvent< ? extends T>>>
1: 		extends UnbufferedPushStreamImpl<T,U> implements PushStream<T> {
1: 	
1: 	private final U eventQueue;
1: 	
1: 	private final Semaphore semaphore;
1: 	
1: 	private final Executor worker;
1: 	
1: 	private final QueuePolicy<T, U> queuePolicy;
1: 
1: 	private final PushbackPolicy<T, U> pushbackPolicy;
1: 	
1: 	/**
1: 	 * Indicates that a terminal event has been received, that we should stop
1: 	 * collecting new events, and that we must drain the buffer before
1: 	 * continuing
1: 	 */
1: 	private final AtomicBoolean			softClose	= new AtomicBoolean();
1: 
1: 	private final int					parallelism;
1: 
1: 	public BufferedPushStreamImpl(PushStreamProvider psp,
1: 			ScheduledExecutorService scheduler, U eventQueue,
1: 			int parallelism, Executor worker, QueuePolicy<T,U> queuePolicy,
1: 			PushbackPolicy<T,U> pushbackPolicy,
1: 			Function<PushEventConsumer<T>,AutoCloseable> connector) {
1: 		super(psp, worker, scheduler, connector);
1: 		this.eventQueue = eventQueue;
1: 		this.parallelism = parallelism;
1: 		this.semaphore = new Semaphore(parallelism);
1: 		this.worker = worker;
1: 		this.queuePolicy = queuePolicy;
1: 		this.pushbackPolicy = pushbackPolicy;
1: 	}
1: 
1: 	@Override
1: 	protected long handleEvent(PushEvent< ? extends T> event) {
1: 
1: 		// If we have already been soft closed, or hard closed then abort
1: 		if (!softClose.compareAndSet(false, event.isTerminal())
1: 				|| closed.get() == CLOSED) {
1: 			return ABORT;
1: 		}
1: 
1: 		try {
1: 			queuePolicy.doOffer(eventQueue, event);
1: 			long backPressure = pushbackPolicy.pushback(eventQueue);
1: 			if(backPressure < 0) {
1: 				close();
1: 				return ABORT;
1: 			}
1: 			if(semaphore.tryAcquire()) {
1: 				startWorker();
1: 			}
1: 			return backPressure;
1: 		} catch (Exception e) {
1: 			close(PushEvent.error(e));
1: 			return ABORT;
1: 		}
1: 	}
1: 
1: 	private void startWorker() {
1: 		worker.execute(() -> {
1: 			try {
1: 				PushEvent< ? extends T> event;
1: 				while ((event = eventQueue.poll()) != null) {
1: 					if (event.isTerminal()) {
1: 						// Wait for the other threads to finish
1: 						semaphore.acquire(parallelism - 1);
1: 					}
1: 
1: 					long backpressure = super.handleEvent(event);
1: 					if(backpressure < 0) {
1: 						close();
1: 						return;
1: 					} else if(backpressure > 0) {
1: 						scheduler.schedule(this::startWorker, backpressure,
1: 								MILLISECONDS);
1: 						return;
1: 					}
1: 				}
1: 
1: 				semaphore.release();
1: 			} catch (Exception e) {
1: 				close(PushEvent.error(e));
1: 			}
1: 			if(eventQueue.peek() != null && semaphore.tryAcquire()) {
1: 				try {
1: 					startWorker();
1: 				} catch (Exception e) {
1: 					close(PushEvent.error(e));
1: 				}
1: 			}
1: 		});
1: 		
1: 	}
1: }
============================================================================