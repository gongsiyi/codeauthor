1:1c72f1f: /**
1:1c72f1f:  * Licensed to the Apache Software Foundation (ASF) under one
1:1c72f1f:  * or more contributor license agreements.  See the NOTICE file
1:1c72f1f:  * distributed with this work for additional information
1:1c72f1f:  * regarding copyright ownership.  The ASF licenses this file
1:1c72f1f:  * to you under the Apache License, Version 2.0 (the
1:1c72f1f:  * "License"); you may not use this file except in compliance
1:1c72f1f:  * with the License.  You may obtain a copy of the License at
1:1c72f1f:  *
1:1c72f1f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1c72f1f:  *
1:1c72f1f:  * Unless required by applicable law or agreed to in writing,
1:1c72f1f:  * software distributed under the License is distributed on an
1:1c72f1f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1c72f1f:  * KIND, either express or implied.  See the License for the
1:1c72f1f:  * specific language governing permissions and limitations
1:1c72f1f:  * under the License.
1:1c72f1f:  */
1:01524e7: package org.apache.aries.blueprint.itests.authz;
2:01524e7: 
1:01524e7: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1:01524e7: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1:01524e7: 
1:01524e7: import java.io.IOException;
1:01524e7: import java.io.InputStream;
1:01524e7: import java.security.AccessControlException;
1:01524e7: import java.security.PrivilegedAction;
1:01524e7: 
1:01524e7: import javax.inject.Inject;
1:01524e7: import javax.security.auth.login.LoginException;
1:01524e7: 
1:01524e7: import org.apache.aries.blueprint.itests.AbstractBlueprintIntegrationTest;
1:01524e7: import org.apache.aries.blueprint.itests.Helper;
1:01524e7: import org.apache.aries.blueprint.itests.authz.helper.JAASHelper;
1:01524e7: import org.apache.aries.blueprint.itests.authz.testbundle.SecuredService;
1:01524e7: import org.apache.aries.blueprint.itests.authz.testbundle.impl.SecuredServiceImpl;
1:01524e7: import org.junit.Test;
1:01524e7: import org.ops4j.pax.exam.CoreOptions;
1:01524e7: import org.ops4j.pax.exam.Option;
1:01524e7: import org.ops4j.pax.exam.ProbeBuilder;
1:01524e7: import org.ops4j.pax.exam.TestProbeBuilder;
1:01524e7: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:01524e7: import org.osgi.framework.BundleException;
1:01524e7: import org.osgi.framework.Constants;
1:01524e7: 
1:01524e7: /**
1:01524e7:  * Test calling a service that is secured using the blueprint-authz module.
1:01524e7:  * 
1:01524e7:  * Access is regulated using JEE security annotations
1:01524e7:  * @see SecuredServiceImpl
1:01524e7:  */
1:01524e7: public class AuthorizationTest extends AbstractBlueprintIntegrationTest {
1:01524e7:     @Inject
1:01524e7:     SecuredService service;
1:01524e7:     
1:01524e7:     @Test
1:01524e7:     public void testOnlyAdminOk() throws LoginException, BundleException {
1:01524e7:         JAASHelper.doAs(new String[] {"admin"}, new CallOnlyAdmin());
1:01524e7:     }
1:01524e7:     
1:01524e7:     @Test(expected = AccessControlException.class)
1:01524e7:     public void testOnlyAdminDenied() throws LoginException, BundleException {
1:01524e7:         JAASHelper.doAs(new String[] {"user"}, new CallOnlyAdmin());
1:01524e7:     }
1:01524e7:     
1:01524e7:     @Test
1:01524e7:     public void testUserAdndAdminOk() throws LoginException, BundleException {
1:01524e7:         JAASHelper.doAs(new String[] {"admin"}, new CallUserAndAdmin());
1:01524e7:         JAASHelper.doAs(new String[] {"user"}, new CallUserAndAdmin());
1:01524e7:     }
1:01524e7:     
1:01524e7:     @Test(expected = AccessControlException.class)
1:01524e7:     public void testUserAdndAdminDeniedForUnauthenticated() throws LoginException, BundleException {
1:01524e7:         service.userAndAdmin("Hi");
1:01524e7:     }
1:01524e7:     
1:01524e7:     @Test
1:01524e7:     public void testAnyOneUnauthenticatedOk() throws LoginException, BundleException {
1:01524e7:         service.anyOne("Hi");
1:01524e7:     }
1:01524e7:     
1:01524e7:     @Test(expected = AccessControlException.class)
1:01524e7:     public void testDenyAll() throws LoginException, BundleException {
1:01524e7:         JAASHelper.doAs(new String[] {"admin"}, new CallNoOne());
1:01524e7:     }
1:01524e7:     
1:01524e7:     @ProbeBuilder
1:01524e7:     public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1:01524e7:             probe.setHeader(Constants.EXPORT_PACKAGE, SecuredService.class.getPackage().getName());
1:01524e7:             probe.setHeader(Constants.IMPORT_PACKAGE, SecuredService.class.getPackage().getName());
1:01524e7:             return probe;
1:01524e7:     }
1:01524e7: 
1:01524e7:     @org.ops4j.pax.exam.Configuration
1:01524e7:     public Option[] configuration() throws IOException, LoginException, BundleException {
1:86e60ab:         return new Option[] {
1:86e60ab:             baseOptions(),
1:86e60ab:             CoreOptions.keepCaches(),
1:86e60ab:             Helper.blueprintBundles(),
1:86e60ab:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.authz"),
1:86e60ab:             streamBundle(testBundle()),
1:86e60ab:         };
1:86e60ab:     }
1:86e60ab: 
1:86e60ab:     private InputStream testBundle() {
1:01524e7:         InputStream testBundle = TinyBundles.bundle()
1:01524e7:                 .set(Constants.BUNDLE_SYMBOLICNAME, "authz")
1:01524e7:                 .add(SecuredServiceImpl.class)
1:01524e7:                 .add(SecuredService.class)
1:01524e7:                 .add("OSGI-INF/blueprint/authz.xml", this.getClass().getResourceAsStream("/authz.xml"))
1:01524e7:                 .set(Constants.EXPORT_PACKAGE, SecuredService.class.getPackage().getName())
1:01524e7:                 .set(Constants.IMPORT_PACKAGE, SecuredService.class.getPackage().getName())
1:01524e7:                 .build(TinyBundles.withBnd());
1:86e60ab:         return testBundle;
1:01524e7:     }
1:01524e7:     
1:01524e7:     private final class CallUserAndAdmin implements PrivilegedAction<Void> {
1:01524e7:         @Override
1:01524e7:         public Void run() {
1:01524e7:             service.userAndAdmin("Hi");
1:01524e7:             return null;
1:01524e7:         }
1:01524e7:     }
1:01524e7: 
1:01524e7:     private final class CallOnlyAdmin implements PrivilegedAction<Void> {
1:01524e7:         @Override
1:01524e7:         public Void run() {
1:01524e7:             service.onlyAdmin("Hi");
1:01524e7:             return null;
1:01524e7:         }
1:01524e7:     }
1:01524e7:     
1:01524e7:     private final class CallNoOne implements PrivilegedAction<Void> {
1:01524e7:         @Override
1:01524e7:         public Void run() {
1:01524e7:             service.noOne("Hi");
1:01524e7:             return null;
1:01524e7:         }
1:01524e7:     }
1:01524e7: 
1:01524e7: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:86e60ab
/////////////////////////////////////////////////////////////////////////
1:         return new Option[] {
1:             baseOptions(),
1:             CoreOptions.keepCaches(),
1:             Helper.blueprintBundles(),
1:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.authz"),
1:             streamBundle(testBundle()),
1:         };
1:     }
1: 
1:     private InputStream testBundle() {
/////////////////////////////////////////////////////////////////////////
1:         return testBundle;
commit:1c72f1f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:01524e7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.itests.authz;
1: 
1: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.security.AccessControlException;
1: import java.security.PrivilegedAction;
1: 
1: import javax.inject.Inject;
1: import javax.security.auth.login.LoginException;
1: 
1: import org.apache.aries.blueprint.itests.AbstractBlueprintIntegrationTest;
1: import org.apache.aries.blueprint.itests.Helper;
1: import org.apache.aries.blueprint.itests.authz.helper.JAASHelper;
1: import org.apache.aries.blueprint.itests.authz.testbundle.SecuredService;
1: import org.apache.aries.blueprint.itests.authz.testbundle.impl.SecuredServiceImpl;
1: import org.junit.Test;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.ProbeBuilder;
1: import org.ops4j.pax.exam.TestProbeBuilder;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.Constants;
1: 
1: /**
1:  * Test calling a service that is secured using the blueprint-authz module.
1:  * 
1:  * Access is regulated using JEE security annotations
1:  * @see SecuredServiceImpl
1:  */
1: public class AuthorizationTest extends AbstractBlueprintIntegrationTest {
1:     @Inject
1:     SecuredService service;
1:     
1:     @Test
1:     public void testOnlyAdminOk() throws LoginException, BundleException {
1:         JAASHelper.doAs(new String[] {"admin"}, new CallOnlyAdmin());
1:     }
1:     
1:     @Test(expected = AccessControlException.class)
1:     public void testOnlyAdminDenied() throws LoginException, BundleException {
1:         JAASHelper.doAs(new String[] {"user"}, new CallOnlyAdmin());
1:     }
1:     
1:     @Test
1:     public void testUserAdndAdminOk() throws LoginException, BundleException {
1:         JAASHelper.doAs(new String[] {"admin"}, new CallUserAndAdmin());
1:         JAASHelper.doAs(new String[] {"user"}, new CallUserAndAdmin());
1:     }
1:     
1:     @Test(expected = AccessControlException.class)
1:     public void testUserAdndAdminDeniedForUnauthenticated() throws LoginException, BundleException {
1:         service.userAndAdmin("Hi");
1:     }
1:     
1:     @Test
1:     public void testAnyOneUnauthenticatedOk() throws LoginException, BundleException {
1:         service.anyOne("Hi");
1:     }
1:     
1:     @Test(expected = AccessControlException.class)
1:     public void testDenyAll() throws LoginException, BundleException {
1:         JAASHelper.doAs(new String[] {"admin"}, new CallNoOne());
1:     }
1:     
1:     @ProbeBuilder
1:     public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1:             probe.setHeader(Constants.EXPORT_PACKAGE, SecuredService.class.getPackage().getName());
1:             probe.setHeader(Constants.IMPORT_PACKAGE, SecuredService.class.getPackage().getName());
1:             return probe;
1:     }
1: 
1:     @org.ops4j.pax.exam.Configuration
1:     public Option[] configuration() throws IOException, LoginException, BundleException {
1:         InputStream testBundle = TinyBundles.bundle()
1:                 .set(Constants.BUNDLE_SYMBOLICNAME, "authz")
1:                 .add(SecuredServiceImpl.class)
1:                 .add(SecuredService.class)
1:                 .add("OSGI-INF/blueprint/authz.xml", this.getClass().getResourceAsStream("/authz.xml"))
1:                 .set(Constants.EXPORT_PACKAGE, SecuredService.class.getPackage().getName())
1:                 .set(Constants.IMPORT_PACKAGE, SecuredService.class.getPackage().getName())
1:                 .build(TinyBundles.withBnd());
1: 
0:         return new Option[] {
0:             baseOptions(),
0:             CoreOptions.keepCaches(),
0:             Helper.blueprintBundles(),
0:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.authz"),
0:             streamBundle(testBundle),
0:         };
1:     }
1:     
1:     private final class CallUserAndAdmin implements PrivilegedAction<Void> {
1:         @Override
1:         public Void run() {
1:             service.userAndAdmin("Hi");
1:             return null;
1:         }
1:     }
1: 
1:     private final class CallOnlyAdmin implements PrivilegedAction<Void> {
1:         @Override
1:         public Void run() {
1:             service.onlyAdmin("Hi");
1:             return null;
1:         }
1:     }
1:     
1:     private final class CallNoOne implements PrivilegedAction<Void> {
1:         @Override
1:         public Void run() {
1:             service.noOne("Hi");
1:             return null;
1:         }
1:     }
1: 
1: }
============================================================================