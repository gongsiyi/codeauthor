1:6d6b002: /**
1:6d6b002:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d6b002:  * or more contributor license agreements.  See the NOTICE file
1:6d6b002:  * distributed with this work for additional information
1:6d6b002:  * regarding copyright ownership.  The ASF licenses this file
1:6d6b002:  * to you under the Apache License, Version 2.0 (the
1:6d6b002:  * "License"); you may not use this file except in compliance
1:6d6b002:  * with the License.  You may obtain a copy of the License at
1:6d6b002:  *
1:6d6b002:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6d6b002:  *
1:6d6b002:  * Unless required by applicable law or agreed to in writing,
1:6d6b002:  * software distributed under the License is distributed on an
1:6d6b002:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6d6b002:  * KIND, either express or implied.  See the License for the
1:6d6b002:  * specific language governing permissions and limitations
1:6d6b002:  * under the License.
1:6d6b002:  */
1:69fc795: package org.apache.aries.jpa.blueprint.impl;
10:69fc795: 
1:6d6b002: import java.lang.annotation.Annotation;
1:69fc795: import java.lang.reflect.AccessibleObject;
1:69fc795: import java.lang.reflect.Field;
1:69fc795: import java.lang.reflect.Method;
1:69fc795: import java.util.ArrayList;
1:69fc795: import java.util.List;
1:69fc795: 
1:69fc795: public class AnnotationScanner {
1:6d6b002: 
1:6d6b002:     public List<AccessibleObject> getJpaAnnotatedMembers(Class<?> c, Class<? extends Annotation> annotation) {
1:69fc795:         final List<AccessibleObject> jpaAnnotated = new ArrayList<AccessibleObject>();
1:e7e89d9:         for (Class<?> cl = c; cl != Object.class && cl != null; cl = cl.getSuperclass()) {
1:ec3ea65:             parseClass(annotation, jpaAnnotated, cl);
8:69fc795:         }
1:69fc795:         return jpaAnnotated;
1:69fc795:     }
1:6d6b002: 
1:ec3ea65:     private static void parseClass(Class<? extends Annotation> annotation, final List<AccessibleObject> jpaAnnotated, Class<?> cl) {
1:ec3ea65:         for (Field field : cl.getDeclaredFields()) {
1:ec3ea65:             if (field.isAnnotationPresent(annotation)) {
1:ec3ea65:                 field.setAccessible(true);
1:ec3ea65:                 jpaAnnotated.add(field);
1:ec3ea65:             }
1:ec3ea65:         }
1:ec3ea65: 
1:ec3ea65:         for (Method method : cl.getDeclaredMethods()) {
1:ec3ea65:             if ((method.isAnnotationPresent(annotation)) && method.getName().startsWith("set") && method.getParameterTypes().length == 1) {
1:ec3ea65:                 jpaAnnotated.add(method);
1:ec3ea65:             }
1:ec3ea65:         }
1:ec3ea65:     }
1:ec3ea65: 
1:ec3ea65:     public static String getName(AccessibleObject member) {
1:6d6b002:         if (member instanceof Field) {
1:6d6b002:             return ((Field)member).getName();
1:6d6b002:         } else if (member instanceof Method) {
1:6d6b002:             Method method = (Method)member;
1:6d6b002:             String name = method.getName();
1:6d6b002:             if (!name.startsWith("set")) {
1:6d6b002:                 return null;
1:6d6b002:             }
1:108deb0:             return lowerCamelCase(name.substring(3));
1:6d6b002:         }
1:6d6b002:         throw new IllegalArgumentException();
1:6d6b002:     }
1:108deb0: 
1:108deb0:     private static String lowerCamelCase(String name) {
1:108deb0:         return name.substring(0, 1).toLowerCase() + name.substring(1);
1:108deb0:     }
1:6d6b002:     
1:ec3ea65:     public static Class<?> getType(AccessibleObject member) {
1:6d6b002:         if (member instanceof Field) {
1:6d6b002:             return ((Field)member).getType();
1:6d6b002:         } else if (member instanceof Method) {
1:6d6b002:             return ((Method)member).getParameterTypes()[0];
1:6d6b002:         }
1:6d6b002:         throw new IllegalArgumentException();
1:6d6b002:     }
1:69fc795: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:e7e89d9
/////////////////////////////////////////////////////////////////////////
1:         for (Class<?> cl = c; cl != Object.class && cl != null; cl = cl.getSuperclass()) {
commit:108deb0
/////////////////////////////////////////////////////////////////////////
1:             return lowerCamelCase(name.substring(3));
1: 
1:     private static String lowerCamelCase(String name) {
1:         return name.substring(0, 1).toLowerCase() + name.substring(1);
1:     }
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
0:         for (Class<?> cl = c; cl != Object.class; cl = cl.getSuperclass()) {  
1:             parseClass(annotation, jpaAnnotated, cl);
1:     private static void parseClass(Class<? extends Annotation> annotation, final List<AccessibleObject> jpaAnnotated, Class<?> cl) {
1:         for (Field field : cl.getDeclaredFields()) {
1:             if (field.isAnnotationPresent(annotation)) {
1:                 field.setAccessible(true);
1:                 jpaAnnotated.add(field);
1:             }
1:         }
1: 
1:         for (Method method : cl.getDeclaredMethods()) {
1:             if ((method.isAnnotationPresent(annotation)) && method.getName().startsWith("set") && method.getParameterTypes().length == 1) {
1:                 jpaAnnotated.add(method);
1:             }
1:         }
1:     }
1: 
1:     public static String getName(AccessibleObject member) {
/////////////////////////////////////////////////////////////////////////
1:     public static Class<?> getType(AccessibleObject member) {
commit:6d6b002
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: import java.lang.annotation.Annotation;
1: 
1:     public List<AccessibleObject> getJpaAnnotatedMembers(Class<?> c, Class<? extends Annotation> annotation) {
0:                     if (field.isAnnotationPresent(annotation)) {
0:                         field.setAccessible(true);
0:                     if ((method.isAnnotationPresent(annotation)) && method.getName().startsWith("set") && method.getParameterTypes().length == 1) {
0:                         jpaAnnotated.add(method);
/////////////////////////////////////////////////////////////////////////
1: 
0:     public String getName(AccessibleObject member) {
1:         if (member instanceof Field) {
1:             return ((Field)member).getName();
1:         } else if (member instanceof Method) {
1:             Method method = (Method)member;
1:             String name = method.getName();
1:             if (!name.startsWith("set")) {
1:                 return null;
1:             }
0:             return name. substring(3, 4).toLowerCase() + name.substring(4);
1:         }
1:         throw new IllegalArgumentException();
1:     }
1:     
0:     public Class<?> getType(AccessibleObject member) {
1:         if (member instanceof Field) {
1:             return ((Field)member).getType();
1:         } else if (member instanceof Method) {
1:             return ((Method)member).getParameterTypes()[0];
1:         }
1:         throw new IllegalArgumentException();
1:     }
commit:69fc795
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.blueprint.impl;
1: 
1: import java.lang.reflect.AccessibleObject;
1: import java.lang.reflect.Field;
1: import java.lang.reflect.Method;
1: import java.util.ArrayList;
0: import java.util.Arrays;
1: import java.util.List;
1: 
0: import javax.persistence.EntityManager;
0: import javax.persistence.EntityManagerFactory;
0: import javax.persistence.PersistenceContext;
0: import javax.persistence.PersistenceUnit;
1: 
0: import org.apache.aries.jpa.supplier.EmSupplier;
1: 
1: public class AnnotationScanner {
0:     private final List<Class<?>> managedJpaClasses;
1:     
0:     public AnnotationScanner() {
0:         managedJpaClasses = Arrays.asList(EntityManagerFactory.class, EntityManager.class, EmSupplier.class);
1:     }
1:     
0:     public List<AccessibleObject> getJpaAnnotatedMembers(Class<?> c) {
1:         final List<AccessibleObject> jpaAnnotated = new ArrayList<AccessibleObject>();
1: 
0:         Class<?> cl = c;
0:         if (c != Object.class) {
0:             while (cl != Object.class) {
0:                 for (Field field : cl.getDeclaredFields()) {
0:                     if (field.getAnnotation(PersistenceContext.class) != null
0:                         || field.getAnnotation(PersistenceUnit.class) != null) {
0:                         jpaAnnotated.add(field);
1:                     }
1:                 }
1: 
0:                 for (Method method : cl.getDeclaredMethods()) {
0:                     if (method.getAnnotation(PersistenceContext.class) != null
0:                         || method.getAnnotation(PersistenceUnit.class) != null) {
1: 
0:                         Class<?>[] pType = method.getParameterTypes();
0:                         if (method.getName().startsWith("set") && pType.length == 1
0:                             && managedJpaClasses.contains(pType[0])) {
0:                             jpaAnnotated.add(method);
1:                         }
1:                     }
1:                 }
1: 
0:                 cl = cl.getSuperclass();
1:             }
1:         }
1: 
1:         return jpaAnnotated;
1:     }
1: }
============================================================================