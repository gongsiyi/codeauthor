1:4fec049: /*
1:4fec049:  * Licensed to the Apache Software Foundation (ASF) under one
1:4fec049:  * or more contributor license agreements.  See the NOTICE file
1:4fec049:  * distributed with this work for additional information
1:4fec049:  * regarding copyright ownership.  The ASF licenses this file
1:4fec049:  * to you under the Apache License, Version 2.0 (the
1:4fec049:  * "License"); you may not use this file except in compliance
1:4fec049:  * with the License.  You may obtain a copy of the License at
1:4fec049:  *
1:4fec049:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4fec049:  *
1:4fec049:  * Unless required by applicable law or agreed to in writing,
1:4fec049:  * software distributed under the License is distributed on an
1:4fec049:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4fec049:  * KIND, either express or implied.  See the License for the
1:4fec049:  * specific language governing permissions and limitations
1:4fec049:  * under the License.
1:4fec049:  */
1:4fec049: package org.apache.aries.application.modelling.utils;
1:4fec049: 
1:4fec049: 
1:4fec049: import java.util.ArrayList;
1:4fec049: import java.util.Collection;
1:4fec049: import java.util.HashMap;
1:4fec049: import java.util.HashSet;
1:4fec049: import java.util.Map;
1:4fec049: import java.util.Set;
1:4fec049: 
1:89f804e: import org.apache.aries.application.InvalidAttributeException;
1:4fec049: import org.apache.aries.application.modelling.ImportedPackage;
1:4fec049: import org.apache.aries.application.modelling.impl.ImportedPackageImpl;
1:4fec049: import org.apache.aries.application.modelling.internal.PackageRequirementMerger;
1:910fec0: import org.apache.aries.util.VersionRange;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:4fec049: import org.junit.Assert;
1:4fec049: import org.junit.Test;
1:4fec049: import org.osgi.framework.Constants;
1:4fec049: 
1:4fec049: 
1:4fec049: public final class PackageRequirementMergerTest
1:4fec049: {
1:4fec049:   private static boolean isEqual(Collection<ImportedPackage> reqs1, Collection<ImportedPackage> reqs2)
1:4fec049:   {
1:4fec049:     boolean result = true;
1:4fec049:     
1:4fec049:     if (reqs1.size() != reqs2.size())
1:4fec049:     {
1:4fec049:       result = false;
1:4fec049:     }
1:4fec049:     else
1:4fec049:     {
1:4fec049:       for (ImportedPackage r1 : reqs1)
1:4fec049:       {
1:4fec049:         boolean foundMatch = false;
1:4fec049:         for (ImportedPackage r2 : reqs2)
1:4fec049:         {
1:4fec049:           if (!r1.getPackageName().equals(r2.getPackageName()))
1:4fec049:           {
1:4fec049:             continue;
1:4fec049:           }
1:4fec049:           
1:4fec049:           if (r1.isOptional() != r2.isOptional())
1:4fec049:           {
1:4fec049:             continue;
1:4fec049:           }
1:4fec049:           
1:4fec049:           Map<String, String> attribs1 = new HashMap<String, String>(r1.getAttributes());
1:4fec049:           Map<String, String> attribs2 = new HashMap<String, String>(r2.getAttributes());
1:4fec049:           
1:4fec049:           VersionRange v1 = ManifestHeaderProcessor.parseVersionRange(attribs1.remove(Constants.VERSION_ATTRIBUTE));
1:4fec049:           VersionRange v2 = ManifestHeaderProcessor.parseVersionRange(attribs2.remove(Constants.VERSION_ATTRIBUTE));
1:4fec049:           if (!v1.equals(v2))
1:4fec049:           {
1:4fec049:             continue;
1:4fec049:           }
1:4fec049:           
1:4fec049:           if (!attribs1.equals(attribs2))
1:4fec049:           {
1:4fec049:             continue;
1:4fec049:           }
1:4fec049: 
1:4fec049:           foundMatch = true;
1:4fec049:           break;
1:4fec049:         }
1:4fec049:         
1:4fec049:         if (!foundMatch)
1:4fec049:         {
1:4fec049:           result = false;
1:4fec049:           break;
1:4fec049:         }
1:4fec049:       }
1:4fec049:     }
1:4fec049:     
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:4fec049:   static ImportedPackage newImportedPackage (String name, String version) throws InvalidAttributeException {
1:4fec049:     Map<String, String> attrs = new HashMap<String, String>();
1:4fec049:     attrs.put(Constants.VERSION_ATTRIBUTE, version);
1:4fec049:     return new ImportedPackageImpl (name, attrs);
1:4fec049:   }
1:4fec049:   
1:4fec049:   static ImportedPackage newImportedPackage (String name, String version, boolean optional) throws InvalidAttributeException {
1:4fec049:     Map<String, String> attrs = new HashMap<String, String>();
1:4fec049:     attrs.put(Constants.VERSION_ATTRIBUTE, version);
1:4fec049:     attrs.put(Constants.RESOLUTION_DIRECTIVE + ":", (optional)?Constants.RESOLUTION_OPTIONAL:Constants.RESOLUTION_MANDATORY);
1:4fec049:     return new ImportedPackageImpl (name, attrs);
1:4fec049:   }
1:4fec049:   
1:4fec049:   static ImportedPackage newImportedPackage (String name, String version, String attribute) throws InvalidAttributeException {
1:4fec049:     Map<String, String> attrs = new HashMap<String, String>();
1:4fec049:     attrs.put(Constants.VERSION_ATTRIBUTE, version);
1:4fec049:     attrs.put(attribute.split("=")[0], attribute.split("=")[1]); 
1:4fec049:     return new ImportedPackageImpl (name, attrs);
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Test
1:4fec049:   public void testMergeValid() throws Exception
1:4fec049:   {
1:4fec049:     Collection<ImportedPackage> reqs = new ArrayList<ImportedPackage>();
1:4fec049:     reqs.add(newImportedPackage("a", "1.0.0"));
1:4fec049:     reqs.add(newImportedPackage("a", "2.0.0"));
1:4fec049:     reqs.add(newImportedPackage("a", "3.0.0"));
1:4fec049:     reqs.add(newImportedPackage("b", "1.0.0"));
1:4fec049:     reqs.add(newImportedPackage("b", "2.0.0"));
1:4fec049:     reqs.add(newImportedPackage("c", "1.0.0"));
1:4fec049:     PackageRequirementMerger merger = new PackageRequirementMerger(reqs);
1:4fec049:     
1:4fec049:     Assert.assertTrue(merger.isMergeSuccessful());
1:4fec049:     
1:4fec049:     Assert.assertTrue(merger.getInvalidRequirements().isEmpty());
1:4fec049:     
1:4fec049:     Collection<ImportedPackage> result = merger.getMergedRequirements();
1:4fec049:     Collection<ImportedPackage> expected = new ArrayList<ImportedPackage>();
1:4fec049:     expected.add(newImportedPackage("a", "3.0.0"));
1:4fec049:     expected.add(newImportedPackage("b", "2.0.0"));
1:4fec049:     expected.add(newImportedPackage("c", "1.0.0"));
1:4fec049:     Assert.assertTrue(result.toString(), isEqual(result, expected));
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Test
1:4fec049:   public void testMergeInvalid() throws Exception
1:4fec049:   {
1:4fec049:     Collection<ImportedPackage> reqs = new ArrayList<ImportedPackage>();
1:4fec049:     reqs.add(newImportedPackage("a", "[1.0.0,2.0.0]"));
1:4fec049:     reqs.add(newImportedPackage("a", "[3.0.0,3.0.0]"));
1:4fec049:     reqs.add(newImportedPackage("b", "1.0.0"));
1:4fec049:     reqs.add(newImportedPackage("b", "2.0.0"));
1:4fec049:     reqs.add(newImportedPackage("c", "[1.0.0,2.0.0)"));
1:4fec049:     reqs.add(newImportedPackage("c", "2.0.0"));
1:4fec049:     PackageRequirementMerger merger = new PackageRequirementMerger(reqs);
1:4fec049:     
1:4fec049:     Assert.assertFalse(merger.isMergeSuccessful());
1:4fec049:     
1:4fec049:     try
1:4fec049:     {
1:4fec049:       merger.getMergedRequirements();
1:4fec049:       Assert.fail("getMergedRequirements should throw IllegalStateException.");
1:4fec049:     }
1:4fec049:     catch (IllegalStateException e) { }
1:4fec049:     
1:4fec049:     Set<String> result = merger.getInvalidRequirements();
1:4fec049:     Set<String> expected = new HashSet<String>();
1:4fec049:     expected.add("a");
1:4fec049:     expected.add("c");
1:4fec049:     Assert.assertEquals(expected, result);
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Test
1:4fec049:   public void testMergeOptionalResolution() throws Exception
1:4fec049:   {
1:4fec049:     Collection<ImportedPackage> reqs = new ArrayList<ImportedPackage>();
1:4fec049:     reqs.add(newImportedPackage("a", "1.0.0", true));
1:4fec049:     reqs.add(newImportedPackage("a", "2.0.0", true));
1:4fec049:     PackageRequirementMerger merger = new PackageRequirementMerger(reqs);
1:4fec049:     
1:4fec049:     Assert.assertTrue(merger.isMergeSuccessful());
1:4fec049:     
1:4fec049:     Assert.assertTrue(merger.getInvalidRequirements().isEmpty());
1:4fec049:     
1:4fec049:     Collection<ImportedPackage> result = merger.getMergedRequirements();
1:4fec049:     Collection<ImportedPackage> expected = new ArrayList<ImportedPackage>();
1:4fec049:     expected.add(newImportedPackage("a", "2.0.0", true));
1:4fec049:     Assert.assertTrue(result.toString(), isEqual(result, expected));
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Test
1:4fec049:   public void testMergeMandatoryResolution() throws Exception 
1:4fec049:   {
1:4fec049:     Collection<ImportedPackage> reqs = new ArrayList<ImportedPackage>();
1:4fec049:     reqs.add(newImportedPackage("a", "1.0.0", true));
1:4fec049:     reqs.add(newImportedPackage("a", "2.0.0", false));
1:4fec049:     PackageRequirementMerger merger = new PackageRequirementMerger(reqs);
1:4fec049:     
1:4fec049:     Assert.assertTrue(merger.isMergeSuccessful());
1:4fec049:     
1:4fec049:     Assert.assertTrue(merger.getInvalidRequirements().isEmpty());
1:4fec049:     
1:4fec049:     Collection<ImportedPackage> result = merger.getMergedRequirements();
1:4fec049:     Collection<ImportedPackage> expected = new ArrayList<ImportedPackage>();
1:4fec049:     expected.add(newImportedPackage("a", "2.0.0"));
1:4fec049:     Assert.assertTrue(result.toString(), isEqual(result, expected));
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Test
1:4fec049:   public void testMergeValidAdditionalAttributes()  throws Exception 
1:4fec049:   {
1:4fec049:     Collection<ImportedPackage> reqs = new ArrayList<ImportedPackage>();
1:4fec049:     reqs.add(newImportedPackage("a", "1.0.0", "foo=bar"));
1:4fec049:     reqs.add(newImportedPackage("a", "2.0.0", "foo=bar"));
1:4fec049:     PackageRequirementMerger merger = new PackageRequirementMerger(reqs);
1:4fec049:     
1:4fec049:     Assert.assertTrue(merger.isMergeSuccessful());
1:4fec049:     
1:4fec049:     Assert.assertTrue(merger.getInvalidRequirements().isEmpty());
1:4fec049:     
1:4fec049:     Collection<ImportedPackage> result = merger.getMergedRequirements();
1:4fec049:     Collection<ImportedPackage> expected = new ArrayList<ImportedPackage>();
1:4fec049:     expected.add(newImportedPackage("a", "2.0.0", "foo=bar"));
1:4fec049:     Assert.assertTrue(result.toString(), isEqual(result, expected));
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Test
1:4fec049:   public void testMergeInvalidAdditionalAttributes() throws Exception
1:4fec049:   {
1:4fec049:     Collection<ImportedPackage> reqs = new ArrayList<ImportedPackage>();
1:4fec049:     reqs.add(newImportedPackage("a", "1.0.0", "foo=bar"));
1:4fec049:     reqs.add(newImportedPackage("a", "2.0.0", "foo=blah"));
1:4fec049:     reqs.add(newImportedPackage("b", "1.0.0"));
1:4fec049:     PackageRequirementMerger merger = new PackageRequirementMerger(reqs);
1:4fec049:     
1:4fec049:     Assert.assertFalse(merger.isMergeSuccessful());
1:4fec049:     
1:4fec049:     try
1:4fec049:     {
1:4fec049:       merger.getMergedRequirements();
1:4fec049:       Assert.fail("getMergedRequirements should throw IllegalStateException.");
1:4fec049:     }
1:4fec049:     catch (IllegalStateException e) { }
1:4fec049:     
1:4fec049:     Set<String> result = merger.getInvalidRequirements();
1:4fec049:     Set<String> expected = new HashSet<String>();
1:4fec049:     expected.add("a");
1:4fec049:     Assert.assertEquals(expected, result);
1:4fec049:   }
1:4fec049:   
1:4fec049: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:26ae47b
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.VersionRange;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.InvalidAttributeException;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:4fec049
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.modelling.utils;
1: 
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
0: import org.apache.aries.application.VersionRange;
0: import org.apache.aries.application.management.InvalidAttributeException;
1: import org.apache.aries.application.modelling.ImportedPackage;
1: import org.apache.aries.application.modelling.impl.ImportedPackageImpl;
1: import org.apache.aries.application.modelling.internal.PackageRequirementMerger;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
1: import org.junit.Assert;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: 
1: 
1: public final class PackageRequirementMergerTest
1: {
1:   private static boolean isEqual(Collection<ImportedPackage> reqs1, Collection<ImportedPackage> reqs2)
1:   {
1:     boolean result = true;
1:     
1:     if (reqs1.size() != reqs2.size())
1:     {
1:       result = false;
1:     }
1:     else
1:     {
1:       for (ImportedPackage r1 : reqs1)
1:       {
1:         boolean foundMatch = false;
1:         for (ImportedPackage r2 : reqs2)
1:         {
1:           if (!r1.getPackageName().equals(r2.getPackageName()))
1:           {
1:             continue;
1:           }
1:           
1:           if (r1.isOptional() != r2.isOptional())
1:           {
1:             continue;
1:           }
1:           
1:           Map<String, String> attribs1 = new HashMap<String, String>(r1.getAttributes());
1:           Map<String, String> attribs2 = new HashMap<String, String>(r2.getAttributes());
1:           
1:           VersionRange v1 = ManifestHeaderProcessor.parseVersionRange(attribs1.remove(Constants.VERSION_ATTRIBUTE));
1:           VersionRange v2 = ManifestHeaderProcessor.parseVersionRange(attribs2.remove(Constants.VERSION_ATTRIBUTE));
1:           if (!v1.equals(v2))
1:           {
1:             continue;
1:           }
1:           
1:           if (!attribs1.equals(attribs2))
1:           {
1:             continue;
1:           }
1: 
1:           foundMatch = true;
1:           break;
1:         }
1:         
1:         if (!foundMatch)
1:         {
1:           result = false;
1:           break;
1:         }
1:       }
1:     }
1:     
1:     return result;
1:   }
1:   
1:   static ImportedPackage newImportedPackage (String name, String version) throws InvalidAttributeException {
1:     Map<String, String> attrs = new HashMap<String, String>();
1:     attrs.put(Constants.VERSION_ATTRIBUTE, version);
1:     return new ImportedPackageImpl (name, attrs);
1:   }
1:   
1:   static ImportedPackage newImportedPackage (String name, String version, boolean optional) throws InvalidAttributeException {
1:     Map<String, String> attrs = new HashMap<String, String>();
1:     attrs.put(Constants.VERSION_ATTRIBUTE, version);
1:     attrs.put(Constants.RESOLUTION_DIRECTIVE + ":", (optional)?Constants.RESOLUTION_OPTIONAL:Constants.RESOLUTION_MANDATORY);
1:     return new ImportedPackageImpl (name, attrs);
1:   }
1:   
1:   static ImportedPackage newImportedPackage (String name, String version, String attribute) throws InvalidAttributeException {
1:     Map<String, String> attrs = new HashMap<String, String>();
1:     attrs.put(Constants.VERSION_ATTRIBUTE, version);
1:     attrs.put(attribute.split("=")[0], attribute.split("=")[1]); 
1:     return new ImportedPackageImpl (name, attrs);
1:   }
1:   
1:   @Test
1:   public void testMergeValid() throws Exception
1:   {
1:     Collection<ImportedPackage> reqs = new ArrayList<ImportedPackage>();
1:     reqs.add(newImportedPackage("a", "1.0.0"));
1:     reqs.add(newImportedPackage("a", "2.0.0"));
1:     reqs.add(newImportedPackage("a", "3.0.0"));
1:     reqs.add(newImportedPackage("b", "1.0.0"));
1:     reqs.add(newImportedPackage("b", "2.0.0"));
1:     reqs.add(newImportedPackage("c", "1.0.0"));
1:     PackageRequirementMerger merger = new PackageRequirementMerger(reqs);
1:     
1:     Assert.assertTrue(merger.isMergeSuccessful());
1:     
1:     Assert.assertTrue(merger.getInvalidRequirements().isEmpty());
1:     
1:     Collection<ImportedPackage> result = merger.getMergedRequirements();
1:     Collection<ImportedPackage> expected = new ArrayList<ImportedPackage>();
1:     expected.add(newImportedPackage("a", "3.0.0"));
1:     expected.add(newImportedPackage("b", "2.0.0"));
1:     expected.add(newImportedPackage("c", "1.0.0"));
1:     Assert.assertTrue(result.toString(), isEqual(result, expected));
1:   }
1:   
1:   @Test
1:   public void testMergeInvalid() throws Exception
1:   {
1:     Collection<ImportedPackage> reqs = new ArrayList<ImportedPackage>();
1:     reqs.add(newImportedPackage("a", "[1.0.0,2.0.0]"));
1:     reqs.add(newImportedPackage("a", "[3.0.0,3.0.0]"));
1:     reqs.add(newImportedPackage("b", "1.0.0"));
1:     reqs.add(newImportedPackage("b", "2.0.0"));
1:     reqs.add(newImportedPackage("c", "[1.0.0,2.0.0)"));
1:     reqs.add(newImportedPackage("c", "2.0.0"));
1:     PackageRequirementMerger merger = new PackageRequirementMerger(reqs);
1:     
1:     Assert.assertFalse(merger.isMergeSuccessful());
1:     
1:     try
1:     {
1:       merger.getMergedRequirements();
1:       Assert.fail("getMergedRequirements should throw IllegalStateException.");
1:     }
1:     catch (IllegalStateException e) { }
1:     
1:     Set<String> result = merger.getInvalidRequirements();
1:     Set<String> expected = new HashSet<String>();
1:     expected.add("a");
1:     expected.add("c");
1:     Assert.assertEquals(expected, result);
1:   }
1:   
1:   @Test
1:   public void testMergeOptionalResolution() throws Exception
1:   {
1:     Collection<ImportedPackage> reqs = new ArrayList<ImportedPackage>();
1:     reqs.add(newImportedPackage("a", "1.0.0", true));
1:     reqs.add(newImportedPackage("a", "2.0.0", true));
1:     PackageRequirementMerger merger = new PackageRequirementMerger(reqs);
1:     
1:     Assert.assertTrue(merger.isMergeSuccessful());
1:     
1:     Assert.assertTrue(merger.getInvalidRequirements().isEmpty());
1:     
1:     Collection<ImportedPackage> result = merger.getMergedRequirements();
1:     Collection<ImportedPackage> expected = new ArrayList<ImportedPackage>();
1:     expected.add(newImportedPackage("a", "2.0.0", true));
1:     Assert.assertTrue(result.toString(), isEqual(result, expected));
1:   }
1:   
1:   @Test
1:   public void testMergeMandatoryResolution() throws Exception 
1:   {
1:     Collection<ImportedPackage> reqs = new ArrayList<ImportedPackage>();
1:     reqs.add(newImportedPackage("a", "1.0.0", true));
1:     reqs.add(newImportedPackage("a", "2.0.0", false));
1:     PackageRequirementMerger merger = new PackageRequirementMerger(reqs);
1:     
1:     Assert.assertTrue(merger.isMergeSuccessful());
1:     
1:     Assert.assertTrue(merger.getInvalidRequirements().isEmpty());
1:     
1:     Collection<ImportedPackage> result = merger.getMergedRequirements();
1:     Collection<ImportedPackage> expected = new ArrayList<ImportedPackage>();
1:     expected.add(newImportedPackage("a", "2.0.0"));
1:     Assert.assertTrue(result.toString(), isEqual(result, expected));
1:   }
1:   
1:   @Test
1:   public void testMergeValidAdditionalAttributes()  throws Exception 
1:   {
1:     Collection<ImportedPackage> reqs = new ArrayList<ImportedPackage>();
1:     reqs.add(newImportedPackage("a", "1.0.0", "foo=bar"));
1:     reqs.add(newImportedPackage("a", "2.0.0", "foo=bar"));
1:     PackageRequirementMerger merger = new PackageRequirementMerger(reqs);
1:     
1:     Assert.assertTrue(merger.isMergeSuccessful());
1:     
1:     Assert.assertTrue(merger.getInvalidRequirements().isEmpty());
1:     
1:     Collection<ImportedPackage> result = merger.getMergedRequirements();
1:     Collection<ImportedPackage> expected = new ArrayList<ImportedPackage>();
1:     expected.add(newImportedPackage("a", "2.0.0", "foo=bar"));
1:     Assert.assertTrue(result.toString(), isEqual(result, expected));
1:   }
1:   
1:   @Test
1:   public void testMergeInvalidAdditionalAttributes() throws Exception
1:   {
1:     Collection<ImportedPackage> reqs = new ArrayList<ImportedPackage>();
1:     reqs.add(newImportedPackage("a", "1.0.0", "foo=bar"));
1:     reqs.add(newImportedPackage("a", "2.0.0", "foo=blah"));
1:     reqs.add(newImportedPackage("b", "1.0.0"));
1:     PackageRequirementMerger merger = new PackageRequirementMerger(reqs);
1:     
1:     Assert.assertFalse(merger.isMergeSuccessful());
1:     
1:     try
1:     {
1:       merger.getMergedRequirements();
1:       Assert.fail("getMergedRequirements should throw IllegalStateException.");
1:     }
1:     catch (IllegalStateException e) { }
1:     
1:     Set<String> result = merger.getInvalidRequirements();
1:     Set<String> expected = new HashSet<String>();
1:     expected.add("a");
1:     Assert.assertEquals(expected, result);
1:   }
1:   
1: }
============================================================================