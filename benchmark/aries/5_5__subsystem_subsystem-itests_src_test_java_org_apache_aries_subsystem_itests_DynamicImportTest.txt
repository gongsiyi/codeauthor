1:cceb9d0: package org.apache.aries.subsystem.itests;
8:cceb9d0: 
1:87c258f: import static org.junit.Assert.assertEquals;
1:f334800: import static org.junit.Assert.assertNull;
1:cceb9d0: import static org.junit.Assert.assertTrue;
1:cceb9d0: import static org.junit.Assert.fail;
1:87c258f: 
1:f334800: import java.io.FileInputStream;
1:7c69962: import java.io.FileOutputStream;
1:f334800: import java.io.IOException;
1:f334800: import java.util.HashMap;
1:f334800: import java.util.Map;
1:f334800: import java.util.concurrent.atomic.AtomicBoolean;
1:87c258f: 
1:57b6627: import org.apache.aries.itest.RichBundleContext;
1:87c258f: import org.apache.aries.subsystem.itests.hello.api.Hello;
1:f334800: import org.apache.aries.unittest.fixture.ArchiveFixture;
1:f334800: import org.apache.aries.unittest.fixture.ArchiveFixture.JarFixture;
1:f334800: import org.apache.aries.unittest.fixture.ArchiveFixture.ManifestFixture;
1:cceb9d0: import org.junit.Test;
1:57b6627: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:57b6627: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:cceb9d0: import org.osgi.framework.Bundle;
1:87c258f: import org.osgi.framework.BundleContext;
1:cceb9d0: import org.osgi.framework.BundleException;
1:57b6627: import org.osgi.framework.Constants;
1:87c258f: import org.osgi.framework.ServiceRegistration;
1:87c258f: import org.osgi.framework.hooks.weaving.WeavingHook;
1:87c258f: import org.osgi.framework.hooks.weaving.WovenClass;
1:cceb9d0: import org.osgi.service.subsystem.Subsystem;
1:f334800: import org.osgi.service.subsystem.SubsystemConstants;
1:cceb9d0: import org.osgi.service.subsystem.SubsystemException;
1:f334800: 
2:cceb9d0: /*
1:cceb9d0:  * Simple iTest for dynamic imports. In the first instance we'll use a 
1:cceb9d0:  * DynamicImport-Package header because it's the simplest to set up. 
1:cceb9d0:  * _Hopefully_ if this works, then packages added by WeavingProxy services
1:cceb9d0:  * will also work. If not, we'll need extra tests :-/ 
1:cceb9d0:  */
1:57b6627: @ExamReactorStrategy(PerMethod.class)
1:cceb9d0: public class DynamicImportTest extends SubsystemTest 
4:cceb9d0: {
1:57b6627: 	@Override
1:57b6627: 	protected void createApplications() throws Exception {
1:57b6627: 		createApplication("dynamicImport", "dynamicImport.jar");
1:57b6627: 		createEmptyClass();
1:57b6627: 		createBundleA();
1:57b6627: 		createApplicationA();
5:cceb9d0: 	}
1:f334800: 
1:f334800: 	/*
1:cceb9d0: 	 * Install an .esa containing a bundle with a BundleActivator, and a 
1:6b54d51: 	 * DynamicImport-Package on org.apache.aries.subsystem.itests.hello.api.
1:6b54d51: 	 * This app should fail to start because we've not yet intervened to permit 
1:6b54d51: 	 * this dynamic package wiring requirement from being met. 
1:cceb9d0: 	 */
1:f334800: 	@Test
1:cceb9d0: 	public void verifyThatDynamicImportNeedsHandling() throws Exception
1:cceb9d0: 	{
1:87c258f: 		Subsystem subsystem = installSubsystemFromFile ("dynamicImport.esa");
1:9030c61: 		try { 
1:9030c61: 			startSubsystem(subsystem);
1:cceb9d0: 			Bundle[] bundles = subsystem.getBundleContext().getBundles();
1:cceb9d0: 			for (Bundle b : bundles) { 
1:cceb9d0: 				System.out.println (b.getSymbolicName() + " -> " + b.getState());
1:cceb9d0: 			}
1:cceb9d0: 			fail ("dynamicImport.esa started when we didn't expect it to");
1:cceb9d0: 		} catch (SubsystemException sx) { 
1:cceb9d0: 			Throwable cause = sx.getCause();
1:cceb9d0: 			assertTrue("BundleException expected", cause instanceof BundleException);
1:cceb9d0: 		}
1:cceb9d0: 	}
1:87c258f: 	
1:87c258f: 	class TokenWeaver implements WeavingHook {
1:87c258f: 		@Override
1:d6eb080: 		public void weave(WovenClass arg0) {
1:d6eb080: 			if ("org.apache.aries.subsystem.itests.dynamicImport".equals(arg0.getBundleWiring().getBundle().getSymbolicName())) {
1:d6eb080: 				arg0.getDynamicImports().add("org.apache.aries.subsystem.itests.hello.api");
1:d6eb080: 			}
1:d6eb080: 		} 
1:87c258f: 	}
1:87c258f: 	
1:7c69962: 	@SuppressWarnings("rawtypes")
1:7c69962:     @Test
1:87c258f: 	public void testFirstPassWeavingApproach() throws Exception
1:87c258f: 	{
1:d6eb080: 		ServiceRegistration<?> sr = bundleContext.registerService(WeavingHook.class, new TokenWeaver(), null);
2:cceb9d0: 		try { 
1:9030c61: 			Subsystem subsystem = installSubsystemFromFile ("dynamicImport.esa");
1:87c258f: 			startSubsystem(subsystem);
1:87c258f: 		
1:9030c61: 			BundleContext bc = subsystem.getBundleContext();
1:57b6627: 			Hello h = new RichBundleContext(bc).getService(Hello.class);
1:9030c61: 			String message = h.saySomething();
1:9030c61: 			assertEquals ("Wrong message back", "Hello, this is something", message); // DynamicImportHelloImpl.java
1:87c258f: 		
1:9030c61: 			stopSubsystem(subsystem);
1:9030c61: 			uninstallSubsystem(subsystem);
1:9030c61: 		} finally { 
1:9030c61: 			sr.unregister();
1:9030c61: 		}
1:87c258f: 	}
1:87c258f: 	
1:cceb9d0: 	/*
1:f334800: 	 * Subsystem-SymbolicName: application.a.esa
1:f334800: 	 * Subsystem-Content: bundle.a.jar
1:f334800: 	 */
1:f334800: 	private static final String APPLICATION_A = "application.a.esa";
1:f334800: 	/*
1:f334800: 	 * Bundle-SymbolicName: bundle.a.jar
1:f334800: 	 */
1:f334800: 	private static final String BUNDLE_A = "bundle.a.jar";
1:f334800: 	
1:f334800: 	private static void createApplicationA() throws IOException {
1:f334800: 		createApplicationAManifest();
1:f334800: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1:f334800: 	}
1:f334800: 	
1:f334800: 	private static void createApplicationAManifest() throws IOException {
1:f334800: 		Map<String, String> attributes = new HashMap<String, String>();
1:f334800: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:f334800: 		createManifest(APPLICATION_A + ".mf", attributes);
1:f334800: 	}
1:f334800: 	
1:f334800: 	private static void createBundleA() throws IOException {
1:f334800: 		JarFixture bundle = ArchiveFixture.newJar();
1:f334800: 		bundle.binary("Empty.class", new FileInputStream("Empty.class"));
1:f334800: 		ManifestFixture manifest = bundle.manifest();
1:f334800: 		manifest.attribute(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_A);
1:f334800: 		write(BUNDLE_A, bundle);
1:f334800: 	}
1:f334800: 	
1:f334800: 	/*
1:f334800: 	 * Dynamic package imports added by a weaver to a woven class should be
1:f334800: 	 * added to the region's sharing policy even if the subsystem has no
1:f334800: 	 * Import-Package header.
1:f334800: 	 */
1:7c69962: 	@SuppressWarnings("rawtypes")
1:7c69962:     @Test
1:f334800: 	public void testDynamicPackageImportsAddedToSharingPolicyWhenNoImportPackageHeader() throws Exception {
1:f334800: 		final AtomicBoolean weavingHookCalled = new AtomicBoolean(false);
1:11d09f4: 		ServiceRegistration reg = bundleContext.registerService(
1:f334800: 				WeavingHook.class, 
1:f334800: 				new WeavingHook() {
1:f334800: 					@Override
1:f334800: 					public void weave(WovenClass wovenClass) {
1:f334800: 						if (BUNDLE_A.equals(wovenClass.getBundleWiring().getBundle().getSymbolicName())) {
1:f334800: 							wovenClass.getDynamicImports().add("org.osgi.framework");
1:f334800: 							weavingHookCalled.set(true);
1:f334800: 						}
1:f334800: 					}
1:f334800: 				}, 
1:d6eb080: 				null);
1:f334800: 		try {
1:f334800: 			Subsystem s = installSubsystemFromFile(APPLICATION_A);
1:f334800: 			try {
1:f334800: 				assertNull("Import-Package header should not exist", s.getSubsystemHeaders(null).get(Constants.IMPORT_PACKAGE));
1:f334800: 				Bundle a = getConstituentAsBundle(s, BUNDLE_A, null, null);
1:f334800: 				// Force the class load so the weaving hook gets called.
1:f334800: 				a.loadClass("Empty");
1:f334800: 				assertTrue("Weaving hook not called", weavingHookCalled.get());
1:f334800: 				try {
1:f334800: 					// Try to load a class from the dynamically imported package.
1:f334800: 					a.loadClass("org.osgi.framework.Bundle");
1:f334800: 				}
1:f334800: 				catch (Exception e) {
1:f334800: 					fail("Woven dynamic package import not added to the region's sharing policy");
1:f334800: 				}
1:f334800: 			}
1:f334800: 			finally {
1:f334800: 				try {
1:f334800: 					s.uninstall();
1:f334800: 				}
1:f334800: 				catch (Exception e) {}
1:f334800: 			}
1:f334800: 		}
1:f334800: 		finally {
1:f334800: 			try {
1:f334800: 				reg.unregister();
1:f334800: 			}
1:f334800: 			catch (Exception e) {}
1:f334800: 		}
1:f334800: 	}
1:7c69962: 	
1:7c69962: 	protected static final byte[] EMPTY_CLASS = new byte[] {
1:7c69962: 	     (byte)0xca, (byte)0xfe, (byte)0xba, (byte)0xbe, 
1:7c69962: 	     (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x32, 
1:7c69962: 	     (byte)0x00, (byte)0x12, (byte)0x07, (byte)0x00, 
1:7c69962: 	     (byte)0x02, (byte)0x01, (byte)0x00, (byte)0x05, 
1:7c69962: 	     (byte)0x45, (byte)0x6d, (byte)0x70, (byte)0x74, 
1:7c69962: 	     (byte)0x79, (byte)0x07, (byte)0x00, (byte)0x04, 
1:7c69962: 	     (byte)0x01, (byte)0x00, (byte)0x10, (byte)0x6a, 
1:7c69962: 	     (byte)0x61, (byte)0x76, (byte)0x61, (byte)0x2f, 
1:7c69962: 	     (byte)0x6c, (byte)0x61, (byte)0x6e, (byte)0x67, 
1:7c69962: 	     (byte)0x2f, (byte)0x4f, (byte)0x62, (byte)0x6a, 
1:7c69962: 	     (byte)0x65, (byte)0x63, (byte)0x74, (byte)0x07, 
1:7c69962: 	     (byte)0x00, (byte)0x06, (byte)0x01, (byte)0x00, 
1:7c69962: 	     (byte)0x14, (byte)0x6a, (byte)0x61, (byte)0x76, 
1:7c69962: 	     (byte)0x61, (byte)0x2f, (byte)0x69, (byte)0x6f, 
1:7c69962: 	     (byte)0x2f, (byte)0x53, (byte)0x65, (byte)0x72, 
1:7c69962: 	     (byte)0x69, (byte)0x61, (byte)0x6c, (byte)0x69, 
1:7c69962: 	     (byte)0x7a, (byte)0x61, (byte)0x62, (byte)0x6c, 
1:7c69962: 	     (byte)0x65, (byte)0x01, (byte)0x00, (byte)0x06, 
1:7c69962: 	     (byte)0x3c, (byte)0x69, (byte)0x6e, (byte)0x69, 
1:7c69962: 	     (byte)0x74, (byte)0x3e, (byte)0x01, (byte)0x00, 
1:7c69962: 	     (byte)0x03, (byte)0x28, (byte)0x29, (byte)0x56, 
1:7c69962: 	     (byte)0x01, (byte)0x00, (byte)0x04, (byte)0x43, 
1:7c69962: 	     (byte)0x6f, (byte)0x64, (byte)0x65, (byte)0x0a, 
1:7c69962: 	     (byte)0x00, (byte)0x03, (byte)0x00, (byte)0x0b, 
1:7c69962: 	     (byte)0x0c, (byte)0x00, (byte)0x07, (byte)0x00, 
1:7c69962: 	     (byte)0x08, (byte)0x01, (byte)0x00, (byte)0x0f, 
1:7c69962: 	     (byte)0x4c, (byte)0x69, (byte)0x6e, (byte)0x65, 
1:7c69962: 	     (byte)0x4e, (byte)0x75, (byte)0x6d, (byte)0x62, 
1:7c69962: 	     (byte)0x65, (byte)0x72, (byte)0x54, (byte)0x61, 
1:7c69962: 	     (byte)0x62, (byte)0x6c, (byte)0x65, (byte)0x01, 
1:7c69962: 	     (byte)0x00, (byte)0x12, (byte)0x4c, (byte)0x6f, 
1:7c69962: 	     (byte)0x63, (byte)0x61, (byte)0x6c, (byte)0x56, 
1:7c69962: 	     (byte)0x61, (byte)0x72, (byte)0x69, (byte)0x61, 
1:7c69962: 	     (byte)0x62, (byte)0x6c, (byte)0x65, (byte)0x54, 
1:7c69962: 	     (byte)0x61, (byte)0x62, (byte)0x6c, (byte)0x65, 
1:7c69962: 	     (byte)0x01, (byte)0x00, (byte)0x04, (byte)0x74, 
1:7c69962: 	     (byte)0x68, (byte)0x69, (byte)0x73, (byte)0x01, 
1:7c69962: 	     (byte)0x00, (byte)0x07, (byte)0x4c, (byte)0x45, 
1:7c69962: 	     (byte)0x6d, (byte)0x70, (byte)0x74, (byte)0x79, 
1:7c69962: 	     (byte)0x3b, (byte)0x01, (byte)0x00, (byte)0x0a, 
1:7c69962: 	     (byte)0x53, (byte)0x6f, (byte)0x75, (byte)0x72, 
1:7c69962: 	     (byte)0x63, (byte)0x65, (byte)0x46, (byte)0x69, 
1:7c69962: 	     (byte)0x6c, (byte)0x65, (byte)0x01, (byte)0x00, 
1:7c69962: 	     (byte)0x0a, (byte)0x45, (byte)0x6d, (byte)0x70, 
1:7c69962: 	     (byte)0x74, (byte)0x79, (byte)0x2e, (byte)0x6a, 
1:7c69962: 	     (byte)0x61, (byte)0x76, (byte)0x61, (byte)0x00, 
1:7c69962: 	     (byte)0x21, (byte)0x00, (byte)0x01, (byte)0x00, 
1:7c69962: 	     (byte)0x03, (byte)0x00, (byte)0x01, (byte)0x00, 
1:7c69962: 	     (byte)0x05, (byte)0x00, (byte)0x00, (byte)0x00, 
1:7c69962: 	     (byte)0x01, (byte)0x00, (byte)0x01, (byte)0x00, 
1:7c69962: 	     (byte)0x07, (byte)0x00, (byte)0x08, (byte)0x00, 
1:7c69962: 	     (byte)0x01, (byte)0x00, (byte)0x09, (byte)0x00, 
1:7c69962: 	     (byte)0x00, (byte)0x00, (byte)0x2f, (byte)0x00, 
1:7c69962: 	     (byte)0x01, (byte)0x00, (byte)0x01, (byte)0x00, 
1:7c69962: 	     (byte)0x00, (byte)0x00, (byte)0x05, (byte)0x2a, 
1:7c69962: 	     (byte)0xb7, (byte)0x00, (byte)0x0a, (byte)0xb1, 
1:7c69962: 	     (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x02, 
1:7c69962: 	     (byte)0x00, (byte)0x0c, (byte)0x00, (byte)0x00, 
1:7c69962: 	     (byte)0x00, (byte)0x06, (byte)0x00, (byte)0x01, 
1:7c69962: 	     (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04, 
1:7c69962: 	     (byte)0x00, (byte)0x0d, (byte)0x00, (byte)0x00, 
1:7c69962: 	     (byte)0x00, (byte)0x0c, (byte)0x00, (byte)0x01, 
1:7c69962: 	     (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x05, 
1:7c69962: 	     (byte)0x00, (byte)0x0e, (byte)0x00, (byte)0x0f, 
1:7c69962: 	     (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01, 
1:7c69962: 	     (byte)0x00, (byte)0x10, (byte)0x00, (byte)0x00, 
1:7c69962: 	     (byte)0x00, (byte)0x02, (byte)0x00, (byte)0x11
1:7c69962: 	};
1:7c69962: 
1:7c69962: 	protected static void createEmptyClass() throws IOException {
1:7c69962: 	    FileOutputStream fos = new FileOutputStream("Empty.class");
1:7c69962: 	    fos.write(EMPTY_CLASS);
1:7c69962: 	    fos.close();
1:7c69962: 	}
1:cceb9d0: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		public void weave(WovenClass arg0) {
1: 			if ("org.apache.aries.subsystem.itests.dynamicImport".equals(arg0.getBundleWiring().getBundle().getSymbolicName())) {
1: 				arg0.getDynamicImports().add("org.apache.aries.subsystem.itests.hello.api");
1: 			}
1: 		} 
1: 		ServiceRegistration<?> sr = bundleContext.registerService(WeavingHook.class, new TokenWeaver(), null);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				null);
author:Christian Schneider
-------------------------------------------------------------------------------
commit:7c69962
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileOutputStream;
/////////////////////////////////////////////////////////////////////////
1: 	@SuppressWarnings("rawtypes")
1:     @Test
/////////////////////////////////////////////////////////////////////////
1: 	@SuppressWarnings("rawtypes")
1:     @Test
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	protected static final byte[] EMPTY_CLASS = new byte[] {
1: 	     (byte)0xca, (byte)0xfe, (byte)0xba, (byte)0xbe, 
1: 	     (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x32, 
1: 	     (byte)0x00, (byte)0x12, (byte)0x07, (byte)0x00, 
1: 	     (byte)0x02, (byte)0x01, (byte)0x00, (byte)0x05, 
1: 	     (byte)0x45, (byte)0x6d, (byte)0x70, (byte)0x74, 
1: 	     (byte)0x79, (byte)0x07, (byte)0x00, (byte)0x04, 
1: 	     (byte)0x01, (byte)0x00, (byte)0x10, (byte)0x6a, 
1: 	     (byte)0x61, (byte)0x76, (byte)0x61, (byte)0x2f, 
1: 	     (byte)0x6c, (byte)0x61, (byte)0x6e, (byte)0x67, 
1: 	     (byte)0x2f, (byte)0x4f, (byte)0x62, (byte)0x6a, 
1: 	     (byte)0x65, (byte)0x63, (byte)0x74, (byte)0x07, 
1: 	     (byte)0x00, (byte)0x06, (byte)0x01, (byte)0x00, 
1: 	     (byte)0x14, (byte)0x6a, (byte)0x61, (byte)0x76, 
1: 	     (byte)0x61, (byte)0x2f, (byte)0x69, (byte)0x6f, 
1: 	     (byte)0x2f, (byte)0x53, (byte)0x65, (byte)0x72, 
1: 	     (byte)0x69, (byte)0x61, (byte)0x6c, (byte)0x69, 
1: 	     (byte)0x7a, (byte)0x61, (byte)0x62, (byte)0x6c, 
1: 	     (byte)0x65, (byte)0x01, (byte)0x00, (byte)0x06, 
1: 	     (byte)0x3c, (byte)0x69, (byte)0x6e, (byte)0x69, 
1: 	     (byte)0x74, (byte)0x3e, (byte)0x01, (byte)0x00, 
1: 	     (byte)0x03, (byte)0x28, (byte)0x29, (byte)0x56, 
1: 	     (byte)0x01, (byte)0x00, (byte)0x04, (byte)0x43, 
1: 	     (byte)0x6f, (byte)0x64, (byte)0x65, (byte)0x0a, 
1: 	     (byte)0x00, (byte)0x03, (byte)0x00, (byte)0x0b, 
1: 	     (byte)0x0c, (byte)0x00, (byte)0x07, (byte)0x00, 
1: 	     (byte)0x08, (byte)0x01, (byte)0x00, (byte)0x0f, 
1: 	     (byte)0x4c, (byte)0x69, (byte)0x6e, (byte)0x65, 
1: 	     (byte)0x4e, (byte)0x75, (byte)0x6d, (byte)0x62, 
1: 	     (byte)0x65, (byte)0x72, (byte)0x54, (byte)0x61, 
1: 	     (byte)0x62, (byte)0x6c, (byte)0x65, (byte)0x01, 
1: 	     (byte)0x00, (byte)0x12, (byte)0x4c, (byte)0x6f, 
1: 	     (byte)0x63, (byte)0x61, (byte)0x6c, (byte)0x56, 
1: 	     (byte)0x61, (byte)0x72, (byte)0x69, (byte)0x61, 
1: 	     (byte)0x62, (byte)0x6c, (byte)0x65, (byte)0x54, 
1: 	     (byte)0x61, (byte)0x62, (byte)0x6c, (byte)0x65, 
1: 	     (byte)0x01, (byte)0x00, (byte)0x04, (byte)0x74, 
1: 	     (byte)0x68, (byte)0x69, (byte)0x73, (byte)0x01, 
1: 	     (byte)0x00, (byte)0x07, (byte)0x4c, (byte)0x45, 
1: 	     (byte)0x6d, (byte)0x70, (byte)0x74, (byte)0x79, 
1: 	     (byte)0x3b, (byte)0x01, (byte)0x00, (byte)0x0a, 
1: 	     (byte)0x53, (byte)0x6f, (byte)0x75, (byte)0x72, 
1: 	     (byte)0x63, (byte)0x65, (byte)0x46, (byte)0x69, 
1: 	     (byte)0x6c, (byte)0x65, (byte)0x01, (byte)0x00, 
1: 	     (byte)0x0a, (byte)0x45, (byte)0x6d, (byte)0x70, 
1: 	     (byte)0x74, (byte)0x79, (byte)0x2e, (byte)0x6a, 
1: 	     (byte)0x61, (byte)0x76, (byte)0x61, (byte)0x00, 
1: 	     (byte)0x21, (byte)0x00, (byte)0x01, (byte)0x00, 
1: 	     (byte)0x03, (byte)0x00, (byte)0x01, (byte)0x00, 
1: 	     (byte)0x05, (byte)0x00, (byte)0x00, (byte)0x00, 
1: 	     (byte)0x01, (byte)0x00, (byte)0x01, (byte)0x00, 
1: 	     (byte)0x07, (byte)0x00, (byte)0x08, (byte)0x00, 
1: 	     (byte)0x01, (byte)0x00, (byte)0x09, (byte)0x00, 
1: 	     (byte)0x00, (byte)0x00, (byte)0x2f, (byte)0x00, 
1: 	     (byte)0x01, (byte)0x00, (byte)0x01, (byte)0x00, 
1: 	     (byte)0x00, (byte)0x00, (byte)0x05, (byte)0x2a, 
1: 	     (byte)0xb7, (byte)0x00, (byte)0x0a, (byte)0xb1, 
1: 	     (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x02, 
1: 	     (byte)0x00, (byte)0x0c, (byte)0x00, (byte)0x00, 
1: 	     (byte)0x00, (byte)0x06, (byte)0x00, (byte)0x01, 
1: 	     (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04, 
1: 	     (byte)0x00, (byte)0x0d, (byte)0x00, (byte)0x00, 
1: 	     (byte)0x00, (byte)0x0c, (byte)0x00, (byte)0x01, 
1: 	     (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x05, 
1: 	     (byte)0x00, (byte)0x0e, (byte)0x00, (byte)0x0f, 
1: 	     (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01, 
1: 	     (byte)0x00, (byte)0x10, (byte)0x00, (byte)0x00, 
1: 	     (byte)0x00, (byte)0x02, (byte)0x00, (byte)0x11
1: 	};
1: 
1: 	protected static void createEmptyClass() throws IOException {
1: 	    FileOutputStream fos = new FileOutputStream("Empty.class");
1: 	    fos.write(EMPTY_CLASS);
1: 	    fos.close();
1: 	}
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.itest.RichBundleContext;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1: import org.osgi.framework.Constants;
/////////////////////////////////////////////////////////////////////////
1: @ExamReactorStrategy(PerMethod.class)
1: 	@Override
1: 	protected void createApplications() throws Exception {
1: 		createApplication("dynamicImport", "dynamicImport.jar");
1: 		createEmptyClass();
1: 		createBundleA();
1: 		createApplicationA();
/////////////////////////////////////////////////////////////////////////
1: 			Hello h = new RichBundleContext(bc).getService(Hello.class);
/////////////////////////////////////////////////////////////////////////
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:11d09f4
/////////////////////////////////////////////////////////////////////////
0: 		ServiceRegistration sr = bundleContext.registerService(WeavingHook.class, new TokenWeaver(), props);
/////////////////////////////////////////////////////////////////////////
1: 		ServiceRegistration reg = bundleContext.registerService(
author:John Ross
-------------------------------------------------------------------------------
commit:f334800
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNull;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import org.apache.aries.unittest.fixture.ArchiveFixture;
1: import org.apache.aries.unittest.fixture.ArchiveFixture.JarFixture;
1: import org.apache.aries.unittest.fixture.ArchiveFixture.ManifestFixture;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.subsystem.SubsystemConstants;
0: import aQute.lib.osgi.Constants;
1: 
/////////////////////////////////////////////////////////////////////////
0: 			createEmptyClass();
0: 			createBundleA();
0: 			createApplicationA();
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/*
1: 	 * Subsystem-SymbolicName: application.a.esa
1: 	 * Subsystem-Content: bundle.a.jar
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	
1: 	private static void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1: 	}
1: 	
1: 	private static void createApplicationAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 	}
1: 	
1: 	private static void createBundleA() throws IOException {
1: 		JarFixture bundle = ArchiveFixture.newJar();
1: 		bundle.binary("Empty.class", new FileInputStream("Empty.class"));
1: 		ManifestFixture manifest = bundle.manifest();
1: 		manifest.attribute(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_A);
1: 		write(BUNDLE_A, bundle);
1: 	}
1: 	
1: 	/*
1: 	 * Dynamic package imports added by a weaver to a woven class should be
1: 	 * added to the region's sharing policy even if the subsystem has no
1: 	 * Import-Package header.
1: 	 */
1: 	@Test
1: 	public void testDynamicPackageImportsAddedToSharingPolicyWhenNoImportPackageHeader() throws Exception {
1: 		final AtomicBoolean weavingHookCalled = new AtomicBoolean(false);
0: 		Dictionary<String, Object> props = new Hashtable<String, Object>();
0: 		props.put("osgi.woven.packages", "org.osgi.framework");
0: 		ServiceRegistration<WeavingHook> reg = bundleContext.registerService(
1: 				WeavingHook.class, 
1: 				new WeavingHook() {
1: 					@Override
1: 					public void weave(WovenClass wovenClass) {
1: 						if (BUNDLE_A.equals(wovenClass.getBundleWiring().getBundle().getSymbolicName())) {
1: 							wovenClass.getDynamicImports().add("org.osgi.framework");
1: 							weavingHookCalled.set(true);
1: 						}
1: 					}
1: 				}, 
0: 				props);
1: 		try {
1: 			Subsystem s = installSubsystemFromFile(APPLICATION_A);
1: 			try {
1: 				assertNull("Import-Package header should not exist", s.getSubsystemHeaders(null).get(Constants.IMPORT_PACKAGE));
1: 				Bundle a = getConstituentAsBundle(s, BUNDLE_A, null, null);
1: 				// Force the class load so the weaving hook gets called.
1: 				a.loadClass("Empty");
1: 				assertTrue("Weaving hook not called", weavingHookCalled.get());
1: 				try {
1: 					// Try to load a class from the dynamically imported package.
1: 					a.loadClass("org.osgi.framework.Bundle");
1: 				}
1: 				catch (Exception e) {
1: 					fail("Woven dynamic package import not added to the region's sharing policy");
1: 				}
1: 			}
1: 			finally {
1: 				try {
1: 					s.uninstall();
1: 				}
1: 				catch (Exception e) {}
1: 			}
1: 		}
1: 		finally {
1: 			try {
1: 				reg.unregister();
1: 			}
1: 			catch (Exception e) {}
1: 		}
1: 	}
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:95d5f02
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
/////////////////////////////////////////////////////////////////////////
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
commit:9030c61
/////////////////////////////////////////////////////////////////////////
1: 		try { 
1: 			Subsystem subsystem = installSubsystemFromFile ("dynamicImport.esa");
1: 			startSubsystem(subsystem);
1: 			BundleContext bc = subsystem.getBundleContext();
0: 			Hello h = getOsgiService(bc, Hello.class, null, DEFAULT_TIMEOUT);
1: 			String message = h.saySomething();
1: 			assertEquals ("Wrong message back", "Hello, this is something", message); // DynamicImportHelloImpl.java
1: 			stopSubsystem(subsystem);
1: 			uninstallSubsystem(subsystem);
1: 		} finally { 
1: 			sr.unregister();
1: 		}
commit:87c258f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
0: import java.util.Dictionary;
0: import java.util.Hashtable;
1: 
1: import org.apache.aries.subsystem.itests.hello.api.Hello;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.framework.hooks.weaving.WeavingHook;
1: import org.osgi.framework.hooks.weaving.WovenClass;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	class TokenWeaver implements WeavingHook {
1: 		@Override
0: 		public void weave(WovenClass arg0) {} 
1: 	}
1: 	
0: 	@Test
1: 	public void testFirstPassWeavingApproach() throws Exception
1: 	{
0: 		Dictionary<String, String> props = new Hashtable<String, String>();
0: 		props.put("osgi.woven.packages", "some.woven.package, org.apache.aries.subsystem.itests.hello.api");
0: 		ServiceRegistration<?> sr = bundleContext.registerService(WeavingHook.class, new TokenWeaver(), props);
1: 		
1: 		Subsystem subsystem = installSubsystemFromFile ("dynamicImport.esa");
1: 		startSubsystem(subsystem);
1: 		
0: 		BundleContext bc = subsystem.getBundleContext();
0: 		Hello h = getOsgiService(bc, Hello.class, null, DEFAULT_TIMEOUT);
0: 		String message = h.saySomething();
0: 		assertEquals ("Wrong message back", "Hello, this is something", message); // DynamicImportHelloImpl.java
1: 		
0: 		stopSubsystem(subsystem);
0: 		uninstallSubsystem(subsystem);
0: 		sr.unregister();
1: 		
1: 	}
1: 	
0: 	public static Option[] extraBundles() 
commit:204b2c3
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.Configuration;
/////////////////////////////////////////////////////////////////////////
0: 	@Configuration
0: 	public static Option[] extraConfig() 
0: 		return options(
0: //				org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777")
commit:6b54d51
/////////////////////////////////////////////////////////////////////////
1: 	 * DynamicImport-Package on org.apache.aries.subsystem.itests.hello.api.
1: 	 * This app should fail to start because we've not yet intervened to permit 
1: 	 * this dynamic package wiring requirement from being met. 
/////////////////////////////////////////////////////////////////////////
commit:cceb9d0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.OptionUtils.combine;
1: 
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: /*
1:  * Simple iTest for dynamic imports. In the first instance we'll use a 
1:  * DynamicImport-Package header because it's the simplest to set up. 
1:  * _Hopefully_ if this works, then packages added by WeavingProxy services
1:  * will also work. If not, we'll need extra tests :-/ 
1:  */
0: @RunWith(JUnit4TestRunner.class)
1: public class DynamicImportTest extends SubsystemTest 
1: {
0: 	private static boolean _testAppCreated = false;
1: 	
0: 	@Before
0: 	public void setUp() throws Exception 
1: 	{
0: 		super.setUp();
0: 		if (!_testAppCreated) { 
0: 			createApplication("dynamicImport", new String[]{"dynamicImport.jar"});
0: 			_testAppCreated = true;
1: 		}
1: 	}
1: 
1: 	/*
1: 	 * Install an .esa containing a bundle with a BundleActivator, and a 
0: 	 * DynamicImport-Package on org.osgi.framework. This app should fail to 
0: 	 * start unless we do something to stop the SubsystemResolverHook 
0: 	 * from preventing this package from wiring. 
1: 	 */
0: 	@Test
1: 	public void verifyThatDynamicImportNeedsHandling() throws Exception
1: 	{
1: 		
0: 		System.out.println ("Into verifyThatDynamicImportNeedsHandling");
1: 		
0: 		Subsystem subsystem = installSubsystemFromFile ("dynamicImport.esa");
1: 		try { 
0: 			startSubsystem(subsystem);
1: 			Bundle[] bundles = subsystem.getBundleContext().getBundles();
1: 			for (Bundle b : bundles) { 
1: 				System.out.println (b.getSymbolicName() + " -> " + b.getState());
1: 			}
1: 			fail ("dynamicImport.esa started when we didn't expect it to");
1: 		} catch (SubsystemException sx) { 
1: 			Throwable cause = sx.getCause();
1: 			assertTrue("BundleException expected", cause instanceof BundleException);
1: 		}
1: 	}
1: /*	
0: 	@Test
0: 	public void testHello() throws Exception 
1: 	{
0: 		Subsystem subsystem = installSubsystemFromFile("hello.esa");
1: 		try {
0: 			subsystem.start();
0: 			BundleContext bc = subsystem.getBundleContext();
0: 			Hello h = getOsgiService(bc, Hello.class, null, DEFAULT_TIMEOUT);
0: 			String message = h.saySomething();
0: 			assertEquals ("Wrong message back", "something", message);
0: 			subsystem.stop();
1: 		}
0: 		finally {
0: 			uninstallSubsystemSilently(subsystem);
1: 		}
0: 	} */
1: 	
0: 	protected static Option[] updateOptions(Option[] options) 
1: 	{
0: 		Option[] helloOptions = options(
0: 				mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.itest.interfaces")
0: //				org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0: 		);
0: 		return combine(helloOptions, options);
1: 	}
1: }
============================================================================