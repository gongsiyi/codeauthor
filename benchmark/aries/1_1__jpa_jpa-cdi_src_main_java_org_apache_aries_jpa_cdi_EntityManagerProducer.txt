1:5a4dcb4: /*
1:5a4dcb4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a4dcb4:  * contributor license agreements.  See the NOTICE file distributed with
1:5a4dcb4:  * this work for additional information regarding copyright ownership.
1:5a4dcb4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a4dcb4:  * (the "License"); you may not use this file except in compliance with
1:5a4dcb4:  * the License.  You may obtain a copy of the License at
1:5a4dcb4:  *
1:5a4dcb4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5a4dcb4:  *
1:5a4dcb4:  * Unless required by applicable law or agreed to in writing, software
1:5a4dcb4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a4dcb4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a4dcb4:  * See the License for the specific language governing permissions and
1:5a4dcb4:  * limitations under the License.
1:5a4dcb4:  */
1:5a4dcb4: package org.apache.aries.jpa.cdi;
1:5a4dcb4: 
1:5a4dcb4: import javax.persistence.EntityManager;
1:5a4dcb4: import java.lang.reflect.Proxy;
1:5a4dcb4: 
1:5a4dcb4: import org.apache.aries.jpa.template.JpaTemplate;
1:5a4dcb4: import org.apache.aries.jpa.template.TransactionType;
1:5a4dcb4: 
1:5a4dcb4: public class EntityManagerProducer {
1:5a4dcb4: 
1:5a4dcb4:     public static EntityManager create(JpaTemplate template) {
1:5a4dcb4:         return (EntityManager) Proxy.newProxyInstance(EntityManager.class.getClassLoader(),
1:5a4dcb4:                 new Class<?>[]{EntityManager.class},
1:5a4dcb4:                 (proxy, method, args) -> {
1:5a4dcb4:                     try {
1:5a4dcb4:                         return template.txExpr(TransactionType.Supports, em -> {
1:5a4dcb4:                             try {
1:5a4dcb4:                                 return method.invoke(em, args);
1:5a4dcb4:                             } catch (RuntimeException e) {
1:5a4dcb4:                                 throw e;
1:5a4dcb4:                             } catch (Exception e) {
1:5a4dcb4:                                 throw new RuntimeException(e);
1:5a4dcb4:                             }
1:5a4dcb4:                         });
1:5a4dcb4:                     } catch (RuntimeException e) {
1:5a4dcb4:                         if (e.getClass() == RuntimeException.class
1:5a4dcb4:                                 && e.getCause() != null
1:5a4dcb4:                                 && e.getCause().toString().equals(e.getMessage())) {
1:5a4dcb4:                             throw e.getCause();
1:5a4dcb4:                         }
1:5a4dcb4:                         throw e;
1:5a4dcb4:                     }
1:5a4dcb4:                 });
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5a4dcb4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.jpa.cdi;
1: 
1: import javax.persistence.EntityManager;
1: import java.lang.reflect.Proxy;
1: 
1: import org.apache.aries.jpa.template.JpaTemplate;
1: import org.apache.aries.jpa.template.TransactionType;
1: 
1: public class EntityManagerProducer {
1: 
1:     public static EntityManager create(JpaTemplate template) {
1:         return (EntityManager) Proxy.newProxyInstance(EntityManager.class.getClassLoader(),
1:                 new Class<?>[]{EntityManager.class},
1:                 (proxy, method, args) -> {
1:                     try {
1:                         return template.txExpr(TransactionType.Supports, em -> {
1:                             try {
1:                                 return method.invoke(em, args);
1:                             } catch (RuntimeException e) {
1:                                 throw e;
1:                             } catch (Exception e) {
1:                                 throw new RuntimeException(e);
1:                             }
1:                         });
1:                     } catch (RuntimeException e) {
1:                         if (e.getClass() == RuntimeException.class
1:                                 && e.getCause() != null
1:                                 && e.getCause().toString().equals(e.getMessage())) {
1:                             throw e.getCause();
1:                         }
1:                         throw e;
1:                     }
1:                 });
1:     }
1: 
1: }
============================================================================