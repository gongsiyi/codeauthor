1:430e8f5: /**
1:430e8f5:  * Licensed to the Apache Software Foundation (ASF) under one
1:430e8f5:  * or more contributor license agreements.  See the NOTICE file
1:430e8f5:  * distributed with this work for additional information
1:430e8f5:  * regarding copyright ownership.  The ASF licenses this file
1:430e8f5:  * to you under the Apache License, Version 2.0 (the
1:430e8f5:  * "License"); you may not use this file except in compliance
1:430e8f5:  * with the License.  You may obtain a copy of the License at
1:430e8f5:  *
1:430e8f5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:430e8f5:  *
1:430e8f5:  * Unless required by applicable law or agreed to in writing,
1:430e8f5:  * software distributed under the License is distributed on an
1:430e8f5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:430e8f5:  * KIND, either express or implied.  See the License for the
1:430e8f5:  * specific language governing permissions and limitations
1:430e8f5:  * under the License.
1:430e8f5:  */
1:430e8f5: package org.apache.aries.samples.blog.api;
1:430e8f5: 
1:430e8f5: import java.text.ParseException;
1:430e8f5: import java.util.List;
1:430e8f5: 
1:380a6c0: import org.apache.aries.samples.blog.api.persistence.Entry;
1:430e8f5: 
1:430e8f5: 
1:430e8f5: 
1:f3e430e: public interface BlogEntryManager
1:430e8f5: {
1:430e8f5:   /**
1:430e8f5:    * Create a blog posting.
1:f3e430e:    * @param email the author's email
1:430e8f5:    * @param title the title of the entry
1:430e8f5:    * @param blogText the text of the entry
1:430e8f5:    * @param tags tags associated with the blog entry
1:430e8f5:    */
1:f3e430e:   public void createBlogPost(String email, String title, String blogText, List<String> tags);
1:430e8f5:   
1:430e8f5:   /**
1:430e8f5:    * Find a specific blog entry by title.
1:430e8f5:    * @param title the title to search for
1:430e8f5:    * @return the blog entry
1:430e8f5:    */
1:f3e430e:   public Entry findBlogEntryByTitle(String title);
1:430e8f5:   
1:430e8f5:   /**
1:430e8f5:    * Retrieve all blog entries.
1:430e8f5:    * @return a List<BlogEntry> of all blog entries
1:430e8f5:    */
1:f3e430e:   public List<? extends BlogEntry> getAllBlogEntries();
1:430e8f5:   
1:430e8f5:   /**
1:430e8f5:    * Retrieve all blog entries for a specific author.
1:430e8f5:    * @param emailAddress the email address of the author in question
1:430e8f5:    * @return a List<BlogEntry>
1:430e8f5:    */
1:f3e430e:   public List<? extends BlogEntry> getBlogsForAuthor(String emailAddress);
1:430e8f5:   
1:430e8f5:   /**
1:430e8f5:    * Retrieve all blog entries created between a specified date range.
1:430e8f5:    * @param startDate the start date
1:430e8f5:    * @param endDate the end date
1:430e8f5:    * @return a List<BlogEntry>
1:430e8f5:    * @throws ParseException
1:430e8f5:    */
1:f3e430e:   public List<?extends BlogEntry> getBlogEntriesModifiedBetween(String startDate, String endDate) throws ParseException;
1:430e8f5: 
1:430e8f5:   /**
1:430e8f5:    * Get N posts from the database starting at post number X
1:430e8f5:    * 
1:430e8f5:    * @param firstPostIndex the first post to retrieve
1:430e8f5:    * @param noOfPosts the number of posts to retrieve in total
1:430e8f5:    * @return a List<BlogEntry> of N posts
1:430e8f5:    */
1:f3e430e:   public List<? extends BlogEntry> getBlogEntries(int firstPostIndex, int noOfPosts);
1:430e8f5:   
1:430e8f5:   /**
1:430e8f5:    * Get the total number of blog entries in the database
1:430e8f5:    * @return the int number of entries
1:430e8f5:    */
1:430e8f5:   public int getNoOfPosts();
1:430e8f5:   
1:430e8f5:   /**
1:430e8f5:    * Remove a specific blog entry.
1:430e8f5:    * @param a the author of the blog entry
1:430e8f5:    * @param title the title of the blog entry
1:430e8f5:    * @param publishDate the publication date of the blog entry
1:430e8f5:    * @throws ParseException
1:430e8f5:    */
1:f3e430e:   public void removeBlogEntry(BlogAuthor author, String title, String publishDate) throws ParseException;
1:430e8f5:   
1:430e8f5:   /**
1:430e8f5:    * Update a blog entry.
1:430e8f5:    * @param originalEntry the original blog entry
1:430e8f5:    * @param a the author of the blog entry
1:430e8f5:    * @param title the title of the blog entry
1:430e8f5:    * @param publishDate the publication date of the blog entry
1:430e8f5:    * @param blogText the text content of the blog entry
1:430e8f5:    * @param tags any assocaited tags for the blog entry
1:430e8f5:    * @throws ParseException
1:430e8f5:    */
1:f3e430e:   public void updateBlogEntry(BlogEntry originalEntry, BlogAuthor a, String title, String publishDate, String blogText, List<String> tags) throws ParseException;
1:430e8f5: 
1:430e8f5:   
1:430e8f5:   /**
1:430e8f5:    * Get the specified blog posting.
1:430e8f5:    * @param id the id of the blog posting
1:430e8f5:    * @return the blog post
1:430e8f5:    */
1:f3e430e:   public BlogEntry getBlogPost(long id);
1:430e8f5: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:380a6c0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.blog.api.persistence.Entry;
commit:e0beeec
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.blog.api.persistence.api.Entry;
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:afa98ec
commit:f3e430e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.blog.persistence.api.Entry;
1: public interface BlogEntryManager
1:    * @param email the author's email
1:   public void createBlogPost(String email, String title, String blogText, List<String> tags);
1:   public Entry findBlogEntryByTitle(String title);
1:   public List<? extends BlogEntry> getAllBlogEntries();
1:   public List<? extends BlogEntry> getBlogsForAuthor(String emailAddress);
/////////////////////////////////////////////////////////////////////////
1:   public List<?extends BlogEntry> getBlogEntriesModifiedBetween(String startDate, String endDate) throws ParseException;
/////////////////////////////////////////////////////////////////////////
1:   public List<? extends BlogEntry> getBlogEntries(int firstPostIndex, int noOfPosts);
/////////////////////////////////////////////////////////////////////////
1:   public void removeBlogEntry(BlogAuthor author, String title, String publishDate) throws ParseException;
/////////////////////////////////////////////////////////////////////////
1:   public void updateBlogEntry(BlogEntry originalEntry, BlogAuthor a, String title, String publishDate, String blogText, List<String> tags) throws ParseException;
/////////////////////////////////////////////////////////////////////////
1:   public BlogEntry getBlogPost(long id);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:430e8f5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.blog.api;
1: 
1: import java.text.ParseException;
1: import java.util.List;
1: 
0: import org.apache.aries.samples.blog.persistence.api.Author;
0: import org.apache.aries.samples.blog.persistence.api.BlogEntry;
1: 
1: 
1: 
0: public interface BlogPostManager
1: {
1:   /**
1:    * Create a blog posting.
0:    * @param a the author of the entry
1:    * @param title the title of the entry
1:    * @param blogText the text of the entry
1:    * @param tags tags associated with the blog entry
1:    */
0:   public void createBlogPost(Author a, String title, String blogText, List<String> tags);
1:   
1:   /**
1:    * Find a specific blog entry by title.
1:    * @param title the title to search for
1:    * @return the blog entry
1:    */
0:   public BlogEntry findBlogEntryByTitle(String title);
1:   
1:   /**
1:    * Retrieve all blog entries.
1:    * @return a List<BlogEntry> of all blog entries
1:    */
0:   public List<BlogEntry> getAllBlogEntries();
1:   
1:   /**
1:    * Retrieve all blog entries for a specific author.
1:    * @param emailAddress the email address of the author in question
1:    * @return a List<BlogEntry>
1:    */
0:   public List<BlogEntry> getBlogsForAuthor(String emailAddress);
1:   
1:   /**
1:    * Retrieve all blog entries created between a specified date range.
1:    * @param startDate the start date
1:    * @param endDate the end date
1:    * @return a List<BlogEntry>
1:    * @throws ParseException
1:    */
0:   public List<BlogEntry> getBlogEntriesModifiedBetween(String startDate, String endDate) throws ParseException;
1: 
1:   /**
1:    * Get N posts from the database starting at post number X
1:    * 
1:    * @param firstPostIndex the first post to retrieve
1:    * @param noOfPosts the number of posts to retrieve in total
1:    * @return a List<BlogEntry> of N posts
1:    */
0:   public List<BlogEntry> getBlogEntries(int firstPostIndex, int noOfPosts);
1:   
1:   /**
1:    * Get the total number of blog entries in the database
1:    * @return the int number of entries
1:    */
1:   public int getNoOfPosts();
1:   
1:   /**
1:    * Remove a specific blog entry.
1:    * @param a the author of the blog entry
1:    * @param title the title of the blog entry
1:    * @param publishDate the publication date of the blog entry
1:    * @throws ParseException
1:    */
0:   public void removeBlogEntry(Author a, String title, String publishDate) throws ParseException;
1:   
1:   /**
1:    * Update a blog entry.
1:    * @param originalEntry the original blog entry
1:    * @param a the author of the blog entry
1:    * @param title the title of the blog entry
1:    * @param publishDate the publication date of the blog entry
1:    * @param blogText the text content of the blog entry
1:    * @param tags any assocaited tags for the blog entry
1:    * @throws ParseException
1:    */
0:   public void updateBlogEntry(BlogEntry originalEntry, Author a, String title, String publishDate, String blogText, List<String> tags) throws ParseException;
1: 
1:   
1:   /**
1:    * Get the specified blog posting.
1:    * @param id the id of the blog posting
1:    * @return the blog post
1:    */
0:   public BlogPost getBlogPost(long id);
1: }
============================================================================