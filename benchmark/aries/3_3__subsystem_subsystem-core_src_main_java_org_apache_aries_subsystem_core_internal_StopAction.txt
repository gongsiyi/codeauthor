1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:777b216: package org.apache.aries.subsystem.core.internal;
1:777b216: 
1:777b216: import java.io.IOException;
1:777b216: import java.util.ArrayList;
1:777b216: import java.util.Collections;
1:307d743: import java.util.EnumSet;
1:b66ad7c: import java.util.LinkedHashSet;
1:777b216: import java.util.List;
1:777b216: 
1:79b20bc: import org.apache.aries.subsystem.ContentHandler;
1:777b216: import org.apache.aries.subsystem.core.archive.DeploymentManifest;
1:777b216: import org.apache.aries.subsystem.core.archive.SubsystemContentHeader;
1:777b216: import org.osgi.framework.BundleException;
1:79b20bc: import org.osgi.framework.ServiceReference;
1:777b216: import org.osgi.framework.namespace.IdentityNamespace;
1:777b216: import org.osgi.framework.wiring.BundleRevision;
1:777b216: import org.osgi.resource.Resource;
1:777b216: import org.osgi.service.subsystem.Subsystem.State;
1:777b216: import org.osgi.service.subsystem.SubsystemConstants;
1:777b216: import org.osgi.service.subsystem.SubsystemException;
1:777b216: import org.slf4j.Logger;
1:777b216: import org.slf4j.LoggerFactory;
1:777b216: 
1:777b216: public class StopAction extends AbstractAction {
1:777b216: 	private static final Logger logger = LoggerFactory.getLogger(StopAction.class);
1:777b216: 
1:5bd3bf6: 	public StopAction(BasicSubsystem requestor, BasicSubsystem target, boolean disableRootCheck) {
1:391a1aa: 		super(requestor, target, disableRootCheck);
7:777b216: 	}
1:777b216: 
1:777b216: 	@Override
1:777b216: 	public Object run() {
1:b66ad7c: 		// Protect against re-entry now that cycles are supported.
1:279dba5: 		if (!Activator.getInstance().getLockingStrategy().set(State.STOPPING, target)) {
1:307d743: 			return null;
1:4b41d3d: 		}
2:777b216: 		try {
1:b66ad7c: 			// We are now protected against re-entry.
1:b66ad7c: 			// Acquire the global read lock to prevent installs and uninstalls
1:b66ad7c: 			// but allow starts and stops.
1:279dba5: 			Activator.getInstance().getLockingStrategy().readLock();
1:b66ad7c: 			try {
1:b66ad7c: 				// We are now protected against installs and uninstalls.
1:b66ad7c: 				checkRoot();
1:b66ad7c: 				// Compute affected subsystems. This is safe to do while only 
1:b66ad7c: 				// holding the read lock since we know that nothing can be added 
1:b66ad7c: 				// or removed.
1:b66ad7c: 				LinkedHashSet<BasicSubsystem> subsystems = new LinkedHashSet<BasicSubsystem>();
1:b66ad7c: 				subsystems.add(target);
1:b66ad7c: 				List<Resource> resources = new ArrayList<Resource>(Activator.getInstance().getSubsystems().getResourcesReferencedBy(target));
1:b66ad7c: 				for (Resource resource : resources) {
1:b66ad7c: 					if (resource instanceof BasicSubsystem) {
1:b66ad7c: 						subsystems.add((BasicSubsystem)resource);
1:b66ad7c: 					}
1:b66ad7c: 				}
1:b66ad7c: 				// Acquire the global mutual exclusion lock while acquiring the
1:b66ad7c: 				// state change locks of affected subsystems.
1:279dba5: 				Activator.getInstance().getLockingStrategy().lock();
1:b66ad7c: 				try {
1:b66ad7c: 					// We are now protected against cycles.
1:b66ad7c: 					// Acquire the state change locks of affected subsystems.
1:279dba5: 					Activator.getInstance().getLockingStrategy().lock(subsystems);
1:b66ad7c: 				}
1:b66ad7c: 				finally {
1:b66ad7c: 					// Release the global mutual exclusion lock as soon as possible.
1:279dba5: 					Activator.getInstance().getLockingStrategy().unlock();
1:b66ad7c: 				}
1:b66ad7c: 				try {
1:b66ad7c: 					// We are now protected against other starts and stops of the affected subsystems.
1:b66ad7c: 					State state = target.getState();
1:b66ad7c: 					if (EnumSet.of(State.INSTALLED, State.INSTALLING, State.RESOLVED).contains(state)) {
1:b66ad7c: 						// INSTALLING is included because a subsystem may
1:b66ad7c: 						// persist in this state without being locked when
1:b66ad7c: 						// apache-aries-provision-dependencies:=resolve.
1:b66ad7c: 						return null;
1:b66ad7c: 					}
1:b66ad7c: 					else if (EnumSet.of(State.INSTALL_FAILED, State.UNINSTALLED).contains(state)) {
1:b66ad7c: 						throw new IllegalStateException("Cannot stop from state " + state);
1:b66ad7c: 					}
1:b66ad7c: 					target.setState(State.STOPPING);
1:b66ad7c: 					SubsystemContentHeader header = target.getSubsystemManifest().getSubsystemContentHeader();
1:b66ad7c: 					if (header != null) {
1:b66ad7c: 						Collections.sort(resources, new StartResourceComparator(target.getSubsystemManifest().getSubsystemContentHeader()));
1:b66ad7c: 						Collections.reverse(resources);
1:b66ad7c: 					}
1:b66ad7c: 					for (Resource resource : resources) {
1:b66ad7c: 						// Don't stop the region context bundle.
1:b66ad7c: 						if (Utils.isRegionContextBundle(resource))
1:b66ad7c: 							continue;
1:b66ad7c: 						try {
1:b66ad7c: 							stopResource(resource);
1:b66ad7c: 						}
1:b66ad7c: 						catch (Exception e) {
1:b66ad7c: 							logger.error("An error occurred while stopping resource " + resource + " of subsystem " + target, e);
1:b66ad7c: 						}
1:b66ad7c: 					}
1:b66ad7c: 					// TODO Can we automatically assume it actually is resolved?
1:b66ad7c: 					target.setState(State.RESOLVED);
1:b66ad7c: 					try {
1:b66ad7c: 						synchronized (target) {
1:b66ad7c: 							target.setDeploymentManifest(new DeploymentManifest(
1:b66ad7c: 									target.getDeploymentManifest(),
1:b66ad7c: 									null,
1:b66ad7c: 									target.isAutostart(),
1:b66ad7c: 									target.getSubsystemId(),
1:b66ad7c: 									SubsystemIdentifier.getLastId(),
1:b66ad7c: 									target.getLocation(),
1:b66ad7c: 									false,
1:b66ad7c: 									false));
1:b66ad7c: 						}
1:b66ad7c: 					}
1:b66ad7c: 					catch (Exception e) {
1:b66ad7c: 						throw new SubsystemException(e);
1:b66ad7c: 					}
1:b66ad7c: 				}
1:b66ad7c: 				finally {
1:b66ad7c: 					// Release the state change locks of affected subsystems.
1:279dba5: 					Activator.getInstance().getLockingStrategy().unlock(subsystems);
1:b66ad7c: 				}
1:b66ad7c: 			}
1:b66ad7c: 			finally {
1:b66ad7c: 				// Release the read lock.
1:279dba5: 				Activator.getInstance().getLockingStrategy().readUnlock();
1:a990e32: 			}
1:0b3775c: 		}
1:b66ad7c: 		finally {
1:b66ad7c: 			// Protection against re-entry no longer required.
1:279dba5: 			Activator.getInstance().getLockingStrategy().unset(State.STOPPING, target);
1:4b41d3d: 		}
1:a990e32: 		return null;
1:777b216: 	}
1:777b216: 
1:777b216: 	private void stopBundleResource(Resource resource) throws BundleException {
1:391a1aa: 		if (target.isRoot())
1:4b41d3d: 			return;
1:777b216: 		((BundleRevision)resource).getBundle().stop();
1:777b216: 	}
1:777b216: 
1:777b216: 	private void stopResource(Resource resource) throws BundleException, IOException {
1:307d743: 		if (Utils.getActiveUseCount(resource) > 0)
1:777b216: 			return;
1:777b216: 		String type = ResourceHelper.getTypeAttribute(resource);
1:777b216: 		if (SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION.equals(type)
1:777b216: 				|| SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type)
1:79b20bc: 				|| SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type)) {
1:777b216: 			stopSubsystemResource(resource);
1:79b20bc: 		} else if (IdentityNamespace.TYPE_BUNDLE.equals(type)) {
1:777b216: 			stopBundleResource(resource);
1:79b20bc: 		} else if (IdentityNamespace.TYPE_FRAGMENT.equals(type)) {
1:777b216: 			return;
1:79b20bc: 		} else {
1:79b20bc: 		    if (!stopCustomHandler(resource, type))
1:777b216: 		        throw new SubsystemException("Unsupported resource type: " + type);
1:777b216: 		}
1:777b216: 	}
1:777b216: 
1:79b20bc:     private boolean stopCustomHandler(Resource resource, String type) {
1:79b20bc:         ServiceReference<ContentHandler> customHandlerRef = CustomResources.getCustomContentHandler(target, type);
1:79b20bc:         if (customHandlerRef != null) {
1:79b20bc:             ContentHandler customHandler = target.getBundleContext().getService(customHandlerRef);
1:79b20bc:             if (customHandler != null) {
1:4b41d3d:                 try {
1:79b20bc:                     customHandler.stop(ResourceHelper.getSymbolicNameAttribute(resource), type, target);
1:79b20bc:                     return true;
1:79b20bc:                 } finally {
1:79b20bc:                     target.getBundleContext().ungetService(customHandlerRef);
1:777b216:                 }
1:777b216:             }
1:777b216:         }
1:79b20bc:         return false;
1:777b216:     }
1:777b216: 
1:777b216: 	private void stopSubsystemResource(Resource resource) throws IOException {
1:5bd3bf6: 		new StopAction(target, (BasicSubsystem)resource, !((BasicSubsystem)resource).isRoot()).run();
1:777b216: 	}
1:777b216: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:279dba5
/////////////////////////////////////////////////////////////////////////
1: 		if (!Activator.getInstance().getLockingStrategy().set(State.STOPPING, target)) {
1: 			Activator.getInstance().getLockingStrategy().readLock();
/////////////////////////////////////////////////////////////////////////
1: 				Activator.getInstance().getLockingStrategy().lock();
1: 					Activator.getInstance().getLockingStrategy().lock(subsystems);
1: 					Activator.getInstance().getLockingStrategy().unlock();
/////////////////////////////////////////////////////////////////////////
1: 					Activator.getInstance().getLockingStrategy().unlock(subsystems);
1: 				Activator.getInstance().getLockingStrategy().readUnlock();
1: 			Activator.getInstance().getLockingStrategy().unset(State.STOPPING, target);
author:John Ross
-------------------------------------------------------------------------------
commit:b66ad7c
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedHashSet;
/////////////////////////////////////////////////////////////////////////
1: 		// Protect against re-entry now that cycles are supported.
0: 		if (!LockingStrategy.set(State.STOPPING, target)) {
1: 			// We are now protected against re-entry.
1: 			// Acquire the global read lock to prevent installs and uninstalls
1: 			// but allow starts and stops.
0: 			LockingStrategy.readLock();
1: 			try {
1: 				// We are now protected against installs and uninstalls.
1: 				checkRoot();
1: 				// Compute affected subsystems. This is safe to do while only 
1: 				// holding the read lock since we know that nothing can be added 
1: 				// or removed.
1: 				LinkedHashSet<BasicSubsystem> subsystems = new LinkedHashSet<BasicSubsystem>();
1: 				subsystems.add(target);
1: 				List<Resource> resources = new ArrayList<Resource>(Activator.getInstance().getSubsystems().getResourcesReferencedBy(target));
1: 				for (Resource resource : resources) {
1: 					if (resource instanceof BasicSubsystem) {
1: 						subsystems.add((BasicSubsystem)resource);
1: 					}
1: 				}
1: 				// Acquire the global mutual exclusion lock while acquiring the
1: 				// state change locks of affected subsystems.
0: 				LockingStrategy.lock();
1: 				try {
1: 					// We are now protected against cycles.
1: 					// Acquire the state change locks of affected subsystems.
0: 					LockingStrategy.lock(subsystems);
1: 				}
1: 				finally {
1: 					// Release the global mutual exclusion lock as soon as possible.
0: 					LockingStrategy.unlock();
1: 				}
1: 				try {
1: 					// We are now protected against other starts and stops of the affected subsystems.
1: 					State state = target.getState();
1: 					if (EnumSet.of(State.INSTALLED, State.INSTALLING, State.RESOLVED).contains(state)) {
1: 						// INSTALLING is included because a subsystem may
1: 						// persist in this state without being locked when
1: 						// apache-aries-provision-dependencies:=resolve.
1: 						return null;
1: 					}
1: 					else if (EnumSet.of(State.INSTALL_FAILED, State.UNINSTALLED).contains(state)) {
1: 						throw new IllegalStateException("Cannot stop from state " + state);
1: 					}
1: 					target.setState(State.STOPPING);
1: 					SubsystemContentHeader header = target.getSubsystemManifest().getSubsystemContentHeader();
1: 					if (header != null) {
1: 						Collections.sort(resources, new StartResourceComparator(target.getSubsystemManifest().getSubsystemContentHeader()));
1: 						Collections.reverse(resources);
1: 					}
1: 					for (Resource resource : resources) {
1: 						// Don't stop the region context bundle.
1: 						if (Utils.isRegionContextBundle(resource))
1: 							continue;
1: 						try {
1: 							stopResource(resource);
1: 						}
1: 						catch (Exception e) {
1: 							logger.error("An error occurred while stopping resource " + resource + " of subsystem " + target, e);
1: 						}
1: 					}
1: 					// TODO Can we automatically assume it actually is resolved?
1: 					target.setState(State.RESOLVED);
1: 					try {
1: 						synchronized (target) {
1: 							target.setDeploymentManifest(new DeploymentManifest(
1: 									target.getDeploymentManifest(),
1: 									null,
1: 									target.isAutostart(),
1: 									target.getSubsystemId(),
1: 									SubsystemIdentifier.getLastId(),
1: 									target.getLocation(),
1: 									false,
1: 									false));
1: 						}
1: 					}
1: 					catch (Exception e) {
1: 						throw new SubsystemException(e);
1: 					}
1: 				}
1: 				finally {
1: 					// Release the state change locks of affected subsystems.
0: 					LockingStrategy.unlock(subsystems);
1: 				}
1: 			}
1: 			finally {
1: 				// Release the read lock.
0: 				LockingStrategy.readUnlock();
1: 		finally {
1: 			// Protection against re-entry no longer required.
0: 			LockingStrategy.unset(State.STOPPING, target);
commit:a990e32
/////////////////////////////////////////////////////////////////////////
0: 		else if (State.INSTALLING.equals(state) && !Utils.isProvisionDependenciesInstall(target)) {
1: 			return null;
1: 		}
commit:0b3775c
/////////////////////////////////////////////////////////////////////////
0: 			synchronized (target) {
0: 				target.setDeploymentManifest(new DeploymentManifest(
0: 						target.getDeploymentManifest(),
0: 						null,
0: 						target.isAutostart(),
0: 						target.getSubsystemId(),
0: 						SubsystemIdentifier.getLastId(),
0: 						target.getLocation(),
0: 						false,
0: 						false));
1: 			}
commit:171067b
/////////////////////////////////////////////////////////////////////////
0: 			waitForStateChange(state);
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	public StopAction(BasicSubsystem requestor, BasicSubsystem target, boolean disableRootCheck) {
/////////////////////////////////////////////////////////////////////////
1: 		new StopAction(target, (BasicSubsystem)resource, !((BasicSubsystem)resource).isRoot()).run();
commit:5b9ff63
/////////////////////////////////////////////////////////////////////////
0: 			if (Utils.isRegionContextBundle(resource))
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
0: 	public StopAction(AriesSubsystem requestor, AriesSubsystem target, boolean disableRootCheck) {
1: 		super(requestor, target, disableRootCheck);
0: 		State state = target.getState();
0: 			return new StopAction(requestor, target, disableRootCheck).run();
0: 		target.setState(State.STOPPING);
0: 		List<Resource> resources = new ArrayList<Resource>(Activator.getInstance().getSubsystems().getResourcesReferencedBy(target));
0: 		SubsystemContentHeader header = target.getSubsystemManifest().getSubsystemContentHeader();
0: 			Collections.sort(resources, new StartResourceComparator(target.getSubsystemManifest().getSubsystemContentHeader()));
/////////////////////////////////////////////////////////////////////////
0: 				logger.error("An error occurred while stopping resource " + resource + " of subsystem " + target, e);
0: 		target.setState(State.RESOLVED);
0: 			target.setDeploymentManifest(new DeploymentManifest(
0: 					target.getDeploymentManifest(),
0: 					target.isAutostart(),
0: 					target.getSubsystemId(),
0: 					target.getLocation(),
/////////////////////////////////////////////////////////////////////////
1: 		if (target.isRoot())
/////////////////////////////////////////////////////////////////////////
0: 		new StopAction(target, (AriesSubsystem)resource, !((AriesSubsystem)resource).isRoot()).run();
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:2b13b05
/////////////////////////////////////////////////////////////////////////
0: 	public StopAction(AriesSubsystem subsystem, boolean disableRootCheck, boolean explicit) {
0: 		super(subsystem, disableRootCheck, explicit);
0: 		if (explicit)
0: 			subsystem.setAutostart(false);
/////////////////////////////////////////////////////////////////////////
0: 			return new StopAction(subsystem, disableRootCheck, explicit).run();
/////////////////////////////////////////////////////////////////////////
0: 		new StopAction((AriesSubsystem)resource, !((AriesSubsystem)resource).isRoot(), false).run();
commit:4b41d3d
/////////////////////////////////////////////////////////////////////////
0: 		List<Resource> resources = new ArrayList<Resource>(Activator.getInstance().getSubsystems().getResourcesReferencedBy(subsystem));
0: 		SubsystemContentHeader header = subsystem.getSubsystemManifest().getSubsystemContentHeader();
0: 		if (header != null) {
0: 			Collections.sort(resources, new StartResourceComparator(subsystem.getSubsystemManifest().getSubsystemContentHeader()));
0: 			Collections.reverse(resources);
1: 		}
0: 		for (Resource resource : resources) {
0: 			// Don't stop the region context bundle.
0: 			if (ResourceHelper.getSymbolicNameAttribute(resource).startsWith(RegionContextBundleHelper.SYMBOLICNAME_PREFIX))
0: 				continue;
1: 			try {
0: 				stopResource(resource);
1: 			} 
0: 			catch (Exception e) {
0: 				logger.error("An error occurred while stopping resource " + resource + " of subsystem " + subsystem, e);
/////////////////////////////////////////////////////////////////////////
0: 		if (subsystem.isRoot())
1: 			return;
commit:307d743
/////////////////////////////////////////////////////////////////////////
1: import java.util.EnumSet;
/////////////////////////////////////////////////////////////////////////
0: 		State state = subsystem.getState();
0: 		if (EnumSet.of(State.INSTALLED, State.RESOLVED).contains(state))
1: 			return null;
0: 		else if (EnumSet.of(State.INSTALL_FAILED, State.UNINSTALLING, State.UNINSTALLED).contains(state))
0: 			throw new IllegalStateException("Cannot stop from state " + state);
0: 		else if (EnumSet.of(State.INSTALLING, State.RESOLVING, State.STARTING, State.STOPPING).contains(state)) {
/////////////////////////////////////////////////////////////////////////
1: 		if (Utils.getActiveUseCount(resource) > 0)
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import org.apache.aries.subsystem.core.archive.DeploymentManifest;
1: import org.apache.aries.subsystem.core.archive.SubsystemContentHeader;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.subsystem.Subsystem.State;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class StopAction extends AbstractAction {
1: 	private static final Logger logger = LoggerFactory.getLogger(StopAction.class);
1: 	
0: 	public StopAction(AriesSubsystem subsystem) {
0: 		super(subsystem);
1: 	}
1: 	
0: 	public StopAction(AriesSubsystem subsystem, boolean disableRootCheck) {
0: 		super(subsystem, disableRootCheck);
1: 	}
1: 	
1: 	@Override
1: 	public Object run() {
0: 		checkRoot();
0: 		subsystem.setAutostart(false);
0: 		if (subsystem.getState() == State.UNINSTALLING || subsystem.getState() == State.UNINSTALLED) {
0: 			throw new SubsystemException("Cannot stop from state " + subsystem.getState());
1: 		}
0: 		else if (subsystem.getState() == State.STARTING) {
0: 			waitForStateChange();
0: 			subsystem.stop();
1: 		}
0: 		else if (subsystem.getState() != State.ACTIVE) {
0: 			return null;
1: 		}
0: 		subsystem.setState(State.STOPPING);
0: 		// For non-root subsystems, stop any remaining constituents.
0: 		if (!subsystem.isRoot()){
0: 			List<Resource> resources = new ArrayList<Resource>(Activator.getInstance().getSubsystems().getResourcesReferencedBy(subsystem));
0: 			SubsystemContentHeader header = subsystem.getSubsystemManifest().getSubsystemContentHeader();
0: 			if (header != null) {
0: 				Collections.sort(resources, new StartResourceComparator(subsystem.getSubsystemManifest().getSubsystemContentHeader()));
0: 				Collections.reverse(resources);
1: 			}
0: 			for (Resource resource : resources) {
0: 				// Don't stop the region context bundle.
0: 				if (ResourceHelper.getSymbolicNameAttribute(resource).startsWith(RegionContextBundleHelper.SYMBOLICNAME_PREFIX))
0: 					continue;
1: 				try {
0: 					stopResource(resource);
1: 				} 
0: 				catch (Exception e) {
0: 					logger.error("An error occurred while stopping resource " + resource + " of subsystem " + subsystem, e);
1: 				}
1: 			}
1: 		}
0: 		// TODO Can we automatically assume it actually is resolved?
0: 		subsystem.setState(State.RESOLVED);
1: 		try {
0: 			subsystem.setDeploymentManifest(new DeploymentManifest(
0: 					subsystem.getDeploymentManifest(),
0: 					null,
0: 					subsystem.isAutostart(),
0: 					subsystem.getSubsystemId(),
0: 					SubsystemIdentifier.getLastId(),
0: 					subsystem.getLocation(),
0: 					false,
0: 					false));
1: 		}
0: 		catch (Exception e) {
0: 			throw new SubsystemException(e);
1: 		}
0: 		return null;
1: 	}
1: 	
1: 	private void stopBundleResource(Resource resource) throws BundleException {
1: 		((BundleRevision)resource).getBundle().stop();
1: 	}
1: 	
1: 	private void stopResource(Resource resource) throws BundleException, IOException {
0: 		if (Utils.getActiveUseCount(resource) >= 1)
1: 			return;
1: 		String type = ResourceHelper.getTypeAttribute(resource);
1: 		if (SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION.equals(type)
1: 				|| SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type)
0: 				|| SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type))
1: 			stopSubsystemResource(resource);
0: 		else if (IdentityNamespace.TYPE_BUNDLE.equals(type))
1: 			stopBundleResource(resource);
0: 		else if (IdentityNamespace.TYPE_FRAGMENT.equals(type))
1: 			return;
0: 		else
1: 			throw new SubsystemException("Unsupported resource type: " + type);
1: 	}
1: 	
1: 	private void stopSubsystemResource(Resource resource) throws IOException {
0: 		((AriesSubsystem)resource).stop();
1: 	}
1: }
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:79b20bc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.ContentHandler;
1: import org.osgi.framework.ServiceReference;
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 			}
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1: 				|| SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type)) {
1: 		} else if (IdentityNamespace.TYPE_BUNDLE.equals(type)) {
1: 		} else if (IdentityNamespace.TYPE_FRAGMENT.equals(type)) {
1: 		} else {
1: 		    if (!stopCustomHandler(resource, type))
0: 		        throw new SubsystemException("Unsupported resource type: " + type);
0: 		}
0: 
1:     private boolean stopCustomHandler(Resource resource, String type) {
1:         ServiceReference<ContentHandler> customHandlerRef = CustomResources.getCustomContentHandler(target, type);
1:         if (customHandlerRef != null) {
1:             ContentHandler customHandler = target.getBundleContext().getService(customHandlerRef);
1:             if (customHandler != null) {
0:                 try {
1:                     customHandler.stop(ResourceHelper.getSymbolicNameAttribute(resource), type, target);
1:                     return true;
1:                 } finally {
1:                     target.getBundleContext().ungetService(customHandlerRef);
0:                 }
0:             }
0:         }
1:         return false;
0:     }
0: 
============================================================================