1:0d78661: /**
1:0d78661:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:0d78661:  *  contributor license agreements.  See the NOTICE file distributed with
1:0d78661:  *  this work for additional information regarding copyright ownership.
1:0d78661:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:0d78661:  *  (the "License"); you may not use this file except in compliance with
1:0d78661:  *  the License.  You may obtain a copy of the License at
1:0d78661:  *
1:0d78661:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0d78661:  *
1:0d78661:  *  Unless required by applicable law or agreed to in writing, software
1:0d78661:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:0d78661:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d78661:  *  See the License for the specific language governing permissions and
1:0d78661:  *  limitations under the License.
1:0d78661:  */
1:0d78661: package org.apache.aries.ejb.modelling.impl;
1:0d78661: 
1:0d78661: import static org.junit.Assert.assertEquals;
1:0d78661: import static org.junit.Assert.assertTrue;
1:0d78661: 
1:0d78661: import java.util.Arrays;
1:0d78661: import java.util.Iterator;
1:0d78661: 
1:0d78661: import org.apache.aries.application.modelling.ModellerException;
1:0d78661: import org.junit.Test;
1:0d78661: 
1:0d78661: public class ParsedEJBServicesTest {
1:0d78661:   
1:0d78661:   @Test
1:0d78661:   public void testNoAllowedNames() throws ModellerException {
1:0d78661:     ParsedEJBServices pes = new ParsedEJBServices();
1:0d78661:     pes.addEJBView("Foo", "Stateless", "com.acme.Bar", false);
1:0d78661:     
1:0d78661:     assertTrue(pes.getServices().isEmpty());
1:0d78661:   }
1:0d78661:   
1:0d78661:   @Test
1:0d78661:   public void testNONE() throws ModellerException {
1:0d78661:     ParsedEJBServices pes = new ParsedEJBServices();
1:0d78661:     pes.setAllowedNames(Arrays.asList("NONE", "Foo"));
1:0d78661:     pes.addEJBView("Foo", "Stateless", "com.acme.Bar", false);
1:0d78661:     
1:0d78661:     assertTrue(pes.getServices().isEmpty());
1:0d78661:   }  
1:0d78661:   
1:0d78661:   @Test
1:f8bfaf6:   public void testEmpty() throws ModellerException {
1:0d78661:     ParsedEJBServices pes = new ParsedEJBServices();
1:f8bfaf6:     pes.setAllowedNames(Arrays.asList(""));
1:0d78661:     pes.addEJBView("Foo", "Stateless", "com.acme.Bar", false);
1:0d78661:     pes.addEJBView("Baz", "Stateless", "com.acme.Bar", true);
1:0d78661:     
1:0d78661:     assertEquals(2, pes.getServices().size());
1:0d78661:     
1:0d78661:     Iterator it = pes.getServices().iterator();
1:0d78661:     assertEquals(new EJBServiceExport("Foo", "Stateless", "com.acme.Bar", false), 
3:0d78661:         it.next());
1:4134a37:     
1:0d78661:     assertEquals(new EJBServiceExport("Baz", "Stateless", "com.acme.Bar", true),
1:4134a37:         it.next());
1:0d78661:   } 
1:0d78661:   
1:4134a37:   @Test
1:0d78661:   public void testSome() throws ModellerException {
1:0d78661:     ParsedEJBServices pes = new ParsedEJBServices();
1:0d78661:     pes.setAllowedNames(Arrays.asList("Bar", "Baz"));
1:0d78661:     pes.addEJBView("Foo", "Stateless", "com.acme.Bar", false);
1:0d78661:     pes.addEJBView("Baz", "Stateless", "com.acme.Bar", true);
1:4134a37:     
1:0d78661:     assertEquals(1, pes.getServices().size());
1:0d78661:     
1:0d78661:     Iterator it = pes.getServices().iterator();
1:0d78661:     
1:0d78661:     assertEquals(new EJBServiceExport("Baz", "Stateless", "com.acme.Bar", true),
1:4134a37:         it.next());
1:0d78661:   } 
1:0d78661: 
1:0d78661:   
1:0d78661:   @Test
1:4134a37:   public void testStateful() throws ModellerException {
1:4134a37:     ParsedEJBServices pes = new ParsedEJBServices();
1:4134a37:     pes.setAllowedNames(Arrays.asList("Bar", "Baz"));
1:4134a37:     pes.addEJBView("Baz", "Stateful", "com.acme.Bar", true);
1:4134a37:     
1:4134a37:     assertEquals(0, pes.getServices().size());
1:4134a37:   } 
1:4134a37:   
1:4134a37:   @Test
1:4134a37:   public void testCases() throws ModellerException {
1:4134a37:     ParsedEJBServices pes = new ParsedEJBServices();
1:f8bfaf6:     pes.setAllowedNames(Arrays.asList("ALL", "Foo", " "));
1:4134a37:     pes.addEJBView("Foo", "STATELESS", "com.acme.Bar", false);
1:4134a37:     pes.addEJBView("Bar", "StAtElEsS", "com.acme.Bar", true);
1:4134a37:     pes.addEJBView("Baz", "stateless", "com.acme.Baz", true);
1:f8bfaf6:     assertEquals(1, pes.getServices().size());
1:4134a37:     
1:4134a37:     Iterator it = pes.getServices().iterator();
1:4134a37:     assertEquals(new EJBServiceExport("Foo", "Stateless", "com.acme.Bar", false), 
1:4134a37:         it.next());
1:0d78661:     
1:4134a37:   }
1:0d78661: }
============================================================================
author:Emily Jiang
-------------------------------------------------------------------------------
commit:f8bfaf6
/////////////////////////////////////////////////////////////////////////
1:   public void testEmpty() throws ModellerException {
1:     pes.setAllowedNames(Arrays.asList(""));
/////////////////////////////////////////////////////////////////////////
1:     pes.setAllowedNames(Arrays.asList("ALL", "Foo", " "));
1:     assertEquals(1, pes.getServices().size());
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4134a37
/////////////////////////////////////////////////////////////////////////
1:   
1:   @Test
1:   public void testStateful() throws ModellerException {
1:     ParsedEJBServices pes = new ParsedEJBServices();
1:     pes.setAllowedNames(Arrays.asList("Bar", "Baz"));
1:     pes.addEJBView("Baz", "Stateful", "com.acme.Bar", true);
1:     
1:     assertEquals(0, pes.getServices().size());
1:   } 
1:   
1:   @Test
1:   public void testCases() throws ModellerException {
1:     ParsedEJBServices pes = new ParsedEJBServices();
0:     pes.setAllowedNames(Arrays.asList("ALL", "Foo"));
1:     pes.addEJBView("Foo", "STATELESS", "com.acme.Bar", false);
1:     pes.addEJBView("Bar", "StAtElEsS", "com.acme.Bar", true);
1:     pes.addEJBView("Baz", "stateless", "com.acme.Baz", true);
0:     assertEquals(3, pes.getServices().size());
1:     
1:     Iterator it = pes.getServices().iterator();
1:     assertEquals(new EJBServiceExport("Foo", "Stateless", "com.acme.Bar", false), 
1:         it.next());
1:     
0:     assertEquals(new EJBServiceExport("Bar", "Stateless", "com.acme.Bar", true),
1:         it.next());
0:     assertEquals(new EJBServiceExport("Baz", "Stateless", "com.acme.Baz", true),
1:         it.next());
1:   }
commit:0d78661
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.modelling.impl;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.Iterator;
1: 
1: import org.apache.aries.application.modelling.ModellerException;
1: import org.junit.Test;
1: 
1: public class ParsedEJBServicesTest {
1:   
1:   @Test
1:   public void testNoAllowedNames() throws ModellerException {
1:     ParsedEJBServices pes = new ParsedEJBServices();
1:     pes.addEJBView("Foo", "Stateless", "com.acme.Bar", false);
1:     
1:     assertTrue(pes.getServices().isEmpty());
1:   }
1:   
1:   @Test
1:   public void testNONE() throws ModellerException {
1:     ParsedEJBServices pes = new ParsedEJBServices();
1:     pes.setAllowedNames(Arrays.asList("NONE", "Foo"));
1:     pes.addEJBView("Foo", "Stateless", "com.acme.Bar", false);
1:     
1:     assertTrue(pes.getServices().isEmpty());
1:   }  
1:   
1:   @Test
0:   public void testALL() throws ModellerException {
1:     ParsedEJBServices pes = new ParsedEJBServices();
0:     pes.setAllowedNames(Arrays.asList("ALL", "Foo"));
1:     pes.addEJBView("Foo", "Stateless", "com.acme.Bar", false);
1:     pes.addEJBView("Baz", "Stateless", "com.acme.Bar", true);
1:     
1:     assertEquals(2, pes.getServices().size());
1:     
1:     Iterator it = pes.getServices().iterator();
1:     assertEquals(new EJBServiceExport("Foo", "Stateless", "com.acme.Bar", false), 
1:         it.next());
1:     
1:     assertEquals(new EJBServiceExport("Baz", "Stateless", "com.acme.Bar", true),
1:         it.next());
1:   } 
1:   
1:   @Test
1:   public void testSome() throws ModellerException {
1:     ParsedEJBServices pes = new ParsedEJBServices();
1:     pes.setAllowedNames(Arrays.asList("Bar", "Baz"));
1:     pes.addEJBView("Foo", "Stateless", "com.acme.Bar", false);
1:     pes.addEJBView("Baz", "Stateless", "com.acme.Bar", true);
1:     
1:     assertEquals(1, pes.getServices().size());
1:     
1:     Iterator it = pes.getServices().iterator();
1:     
1:     assertEquals(new EJBServiceExport("Baz", "Stateless", "com.acme.Bar", true),
1:         it.next());
1:   } 
1: 
1: }
============================================================================