1:4173b7f: /**
1:4173b7f:  * Licensed to the Apache Software Foundation (ASF) under one
1:4173b7f:  * or more contributor license agreements.  See the NOTICE file
1:4173b7f:  * distributed with this work for additional information
1:4173b7f:  * regarding copyright ownership.  The ASF licenses this file
1:4173b7f:  * to you under the Apache License, Version 2.0 (the
1:4173b7f:  * "License"); you may not use this file except in compliance
1:4173b7f:  * with the License.  You may obtain a copy of the License at
1:4173b7f:  *
1:4173b7f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4173b7f:  *
1:4173b7f:  * Unless required by applicable law or agreed to in writing,
1:4173b7f:  * software distributed under the License is distributed on an
1:4173b7f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:4173b7f:  * KIND, either express or implied.  See the License for the
1:4173b7f:  * specific language governing permissions and limitations
1:4173b7f:  * under the License.
1:4173b7f:  */
1:4173b7f: package org.apache.aries.samples.blog.web;
1:4173b7f: 
1:4173b7f: import java.io.IOException;
1:4173b7f: import java.util.ArrayList;
1:4173b7f: import java.util.List;
1:4173b7f: 
1:4173b7f: import javax.servlet.ServletException;
1:4173b7f: import javax.servlet.http.HttpServlet;
1:4173b7f: import javax.servlet.http.HttpServletRequest;
1:4173b7f: import javax.servlet.http.HttpServletResponse;
1:4173b7f: import javax.servlet.http.HttpSession;
1:4173b7f: 
1:4173b7f: import org.apache.aries.samples.blog.api.BloggingService;
1:4173b7f: import org.apache.aries.samples.blog.web.util.JNDIHelper;
1:4173b7f: 
1:4173b7f: public class AddComment extends HttpServlet {
1:4173b7f: 	private static final long serialVersionUID = -920234218060948564L;
1:4173b7f: 	public static final String ERROR_MESSAGES_ID = "commentErrorMessages";
1:4173b7f: 
1:4173b7f: 	@Override
1:4173b7f: 	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
1:4173b7f: 			throws ServletException, IOException {
1:4173b7f: 
1:4173b7f: 		// email address of the comment's author
1:4173b7f: 		String email = req.getParameter("email");
1:4173b7f: 		// the id of the blog entry to which this comment is associated
1:4173b7f: 		long postId = Long.parseLong(req.getParameter("postId"));
1:4173b7f: 		// the text of the comment
1:4173b7f: 		String text = req.getParameter("text");
1:4173b7f: 
1:4173b7f: 		BloggingService service = JNDIHelper.getBloggingService();
1:4173b7f: 
1:4173b7f: 		// retrieve the blog entry and create the associated comment
1:4173b7f: 
1:4173b7f: 		if (service.getBlogAuthor(email) != null) {
1:4173b7f: 			service.createBlogComment(text, email, postId);
1:4173b7f: 			resp.sendRedirect("ViewBlog");
1:4173b7f: 		} else {
1:4173b7f: 
1:4173b7f: 			if (email.equals(""))
1:4173b7f: 				addError(req, "The email field is required.");
1:4173b7f: 			else
1:4173b7f: 				addError(req, "The email filed is not valid.");
1:4173b7f: 			resp.sendRedirect("AddCommentForm?postId=" + postId);
1:4173b7f: 		}
1:4173b7f: 	}
1:4173b7f: 
1:4173b7f: 	public static void addError(HttpServletRequest req, String error) {
1:4173b7f: 		HttpSession session = req.getSession();
1:4173b7f: 		if (session != null) {
1:4173b7f: 			@SuppressWarnings("unchecked")
1:4173b7f: 			List<String> errors = (List<String>) session
1:4173b7f: 					.getAttribute(ERROR_MESSAGES_ID);
1:4173b7f: 
1:4173b7f: 			if (errors == null) {
1:4173b7f: 				errors = new ArrayList<String>();
1:4173b7f: 				session.setAttribute(ERROR_MESSAGES_ID, errors);
1:4173b7f: 			}
1:4173b7f: 
1:4173b7f: 			errors.add(error);
1:4173b7f: 		}
1:4173b7f: 	}
1:4173b7f: }
============================================================================
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:afa98ec
commit:14fd487
commit:4173b7f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.blog.web;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: import javax.servlet.http.HttpSession;
1: 
1: import org.apache.aries.samples.blog.api.BloggingService;
1: import org.apache.aries.samples.blog.web.util.JNDIHelper;
1: 
1: public class AddComment extends HttpServlet {
1: 	private static final long serialVersionUID = -920234218060948564L;
1: 	public static final String ERROR_MESSAGES_ID = "commentErrorMessages";
1: 
1: 	@Override
1: 	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
1: 			throws ServletException, IOException {
1: 
1: 		// email address of the comment's author
1: 		String email = req.getParameter("email");
1: 		// the id of the blog entry to which this comment is associated
1: 		long postId = Long.parseLong(req.getParameter("postId"));
1: 		// the text of the comment
1: 		String text = req.getParameter("text");
1: 
1: 		BloggingService service = JNDIHelper.getBloggingService();
1: 
1: 		// retrieve the blog entry and create the associated comment
1: 
1: 		if (service.getBlogAuthor(email) != null) {
1: 			service.createBlogComment(text, email, postId);
1: 			resp.sendRedirect("ViewBlog");
1: 		} else {
1: 
1: 			if (email.equals(""))
1: 				addError(req, "The email field is required.");
1: 			else
1: 				addError(req, "The email filed is not valid.");
1: 			resp.sendRedirect("AddCommentForm?postId=" + postId);
1: 		}
1: 	}
1: 
1: 	public static void addError(HttpServletRequest req, String error) {
1: 		HttpSession session = req.getSession();
1: 		if (session != null) {
1: 			@SuppressWarnings("unchecked")
1: 			List<String> errors = (List<String>) session
1: 					.getAttribute(ERROR_MESSAGES_ID);
1: 
1: 			if (errors == null) {
1: 				errors = new ArrayList<String>();
1: 				session.setAttribute(ERROR_MESSAGES_ID, errors);
1: 			}
1: 
1: 			errors.add(error);
1: 		}
1: 	}
1: }
============================================================================