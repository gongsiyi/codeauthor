1:9e03212: /*
1:9e03212:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:9e03212:  * 
1:9e03212:  * Licensed under the Apache License, Version 2.0 (the "License");
1:9e03212:  * you may not use this file except in compliance with the License.
1:9e03212:  * You may obtain a copy of the License at
1:9e03212:  *
1:9e03212:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9e03212:  *
1:9e03212:  * Unless required by applicable law or agreed to in writing, software
1:9e03212:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9e03212:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9e03212:  * See the License for the specific language governing permissions and
1:9e03212:  * limitations under the License.
1:9e03212:  */
1:9e03212: package org.osgi.service.transaction.control;
1:9e03212: 
1:739f28b: import java.io.Serializable;
1:739f28b: 
1:9e03212: /**
1:9e03212:  * An Exception that is thrown when a piece of scoped work exits with an
1:9e03212:  * {@link Exception}
1:9e03212:  */
1:9e03212: public class ScopedWorkException extends RuntimeException {
1:9e03212: 
1:9e03212: 	/**
1:9e03212: 	 */
1:9e03212: 	private static final long			serialVersionUID	= 4160254161503114842L;
1:9e03212: 
1:739f28b: 	/**
1:739f28b: 	 * {@link TransactionContext} instances are not required to 
1:739f28b: 	 * be {@link Serializable}, and the ongoing context is very 
1:739f28b: 	 * unlikely to be active post deserialization. As a result
1:739f28b: 	 * this field is transient.
1:739f28b: 	 */
1:739f28b: 	private transient final TransactionContext context;
1:9e03212: 
1:9e03212: 	/**
1:9e03212: 	 * Creates a new TransactionException with the supplied message and cause
1:9e03212: 	 * 
1:9e03212: 	 * @param message
1:9e03212: 	 * @param cause
1:9e03212: 	 * @param context 
1:9e03212: 	 */
1:9e03212: 	public ScopedWorkException(String message, Throwable cause, TransactionContext context) {
1:9e03212: 		super(message, cause);
1:9e03212: 		this.context = context;
1:9e03212: 	}
1:9e03212: 
1:9e03212: 	/**
1:739f28b: 	 * @return The ongoing transaction context if the current scope was still 
1:739f28b: 	 *         active when this exception was raised or <code>null</code> otherwise.
1:739f28b: 	 *         Note that this property will not be persisted during serialization.
1:9e03212: 	 */
1:9e03212: 	public TransactionContext ongoingContext() {
1:9e03212: 		return context;
1:9e03212: 	}
1:9e03212: 
1:9e03212: 	/**
1:9e03212: 	 * @return The cause of this Exception as a {@link RuntimeException} if it
1:9e03212: 	 *         is one, or this otherwise
1:9e03212: 	 */
1:9e03212: 	public RuntimeException asRuntimeException() {
1:9e03212: 		return (RuntimeException) getCause();
1:9e03212: 	}
1:9e03212: 
1:9e03212: 	/**
1:b767d3b: 	 * Throws the cause of this Exception as a RuntimeException, or as the supplied
1:9e03212: 	 * Exception type.
1:9e03212: 	 * <p>
1:9e03212: 	 * Usage is of the form:
1:9e03212: 	 * 
1:9e03212: 	 * <pre>
1:9e03212: 	 * public void doStuff() throws IOException {
1:9e03212: 	 *     try {
1:9e03212: 	 *         ...
1:9e03212: 	 *     } catch (ScopedWorkException swe) {
1:9e03212: 	 *         throw swe.as(IOException.class);
1:9e03212: 	 *     }
1:9e03212: 	 * }
1:9e03212: 	 * </pre>
1:9e03212: 	 * 
1:b767d3b: 	 * @param throwable The exception type to throw
1:b767d3b: 	 *        
1:b767d3b: 	 * @return This method will always throw an exception, either:
1:b767d3b: 	 *           <ul>
1:b767d3b: 	 *             <li>The cause of this exception as the type &lt;T&gt;</li>
1:b767d3b: 	 *             <li>The cause of this exception as a runtime exception</li>
1:b767d3b: 	 *             <li>An IllegalArgumentException with its cause set to <code>this</code></li>
1:b767d3b: 	 *           </ul>
1:b767d3b: 	 * 
1:b767d3b: 	 * @throws T the type of exception to be thrown
1:b767d3b: 	 * @throws IllegalArgumentException if the cause is not a {@link RuntimeException} or of type T
1:9e03212: 	 */
1:b767d3b: 	public <T extends Throwable> T as(Class<T> throwable) throws T, IllegalArgumentException {
1:9e03212: 		Throwable t = getCause();
1:9e03212: 
1:9e03212: 		if (t instanceof RuntimeException) {
1:9e03212: 			throw (RuntimeException) t;
1:9e03212: 		}
1:9e03212: 
1:9e03212: 		possibleThrow(throwable, t);
1:9e03212: 
1:9e03212: 		throw new IllegalArgumentException(
1:9e03212: 				"The cause of this Exception is not an instance of "
1:9e03212: 						+ throwable.getName(),
1:9e03212: 				this);
1:9e03212: 	}
1:9e03212: 
1:9e03212: 	/**
1:b767d3b: 	 * Throws the cause of this Exception as a RuntimeException, or as one of the
1:9e03212: 	 * supplied Exception types.
1:9e03212: 	 * <p>
1:9e03212: 	 * Usage is of the form:
1:9e03212: 	 * 
1:9e03212: 	 * <pre>
1:9e03212: 	 * public void doStuff() throws IOException, ClassNotFoundException {
1:9e03212: 	 *     try {
1:9e03212: 	 *         ...
1:9e03212: 	 *     } catch (ScopedWorkException swe) {
1:9e03212: 	 *         throw swe.asOneOf(IOException.class, ClassNotFoundException.class);
1:9e03212: 	 *     }
1:9e03212: 	 * }
1:9e03212: 	 * </pre>
1:9e03212: 	 * 
1:b767d3b: 	 * @param a The first possible exception type to throw
1:b767d3b: 	 * @param b The second possible exception type to throw
1:b767d3b: 	 * @return This method will always throw an exception, either:
1:b767d3b: 	 *           <ul>
1:b767d3b: 	 *             <li>The cause of this exception as the type &lt;A&gt;</li>
1:b767d3b: 	 *             <li>The cause of this exception as the type &lt;B&gt;</li>
1:b767d3b: 	 *             <li>The cause of this exception as a runtime exception</li>
1:b767d3b: 	 *             <li>An IllegalArgumentException with its cause set to <code>this</code></li>
1:b767d3b: 	 *           </ul>
1:b767d3b: 	 * @throws A The first possible exception type to throw
1:b767d3b: 	 * @throws B The second possible exception type to throw
1:b767d3b: 	 * @throws IllegalArgumentException if the cause is not a {@link RuntimeException} or of type A or B
1:9e03212: 	 */
1:9e03212: 	public <A extends Throwable, B extends Throwable> RuntimeException asOneOf(
1:b767d3b: 			Class<A> a, Class<B> b) throws A, B, IllegalArgumentException {
1:9e03212: 		Throwable t = getCause();
1:9e03212: 
1:9e03212: 		if (t instanceof RuntimeException) {
1:9e03212: 			throw (RuntimeException) t;
1:9e03212: 		}
1:9e03212: 
1:9e03212: 		possibleThrow(a, t);
1:9e03212: 		possibleThrow(b, t);
1:9e03212: 
1:9e03212: 		throw new IllegalArgumentException(
1:9e03212: 				"The cause of this Exception is not an instance of "
1:9e03212: 						+ String.join(", ", a.getName(), b.getName()),
1:9e03212: 				this);
1:9e03212: 	}
1:9e03212: 
1:9e03212: 	/**
2:9e03212: 	 * Throws the cause of this Exception as a RuntimeException or one of the
1:9e03212: 	 * supplied Exception types.
1:9e03212: 	 * 
1:9e03212: 	 * @see #asOneOf(Class, Class)
1:b767d3b: 	 * @param a The first possible exception type to throw
1:b767d3b: 	 * @param b The second possible exception type to throw
1:b767d3b: 	 * @param c The third possible exception type to throw
1:b767d3b: 	 * @return This method will always throw an exception, either:
1:b767d3b: 	 *           <ul>
1:b767d3b: 	 *             <li>The cause of this exception as the type &lt;A&gt;</li>
1:b767d3b: 	 *             <li>The cause of this exception as the type &lt;B&gt;</li>
1:b767d3b: 	 *             <li>The cause of this exception as the type &lt;C&gt;</li>
1:b767d3b: 	 *             <li>The cause of this exception as a runtime exception</li>
1:b767d3b: 	 *             <li>An IllegalArgumentException with its cause set to <code>this</code></li>
1:b767d3b: 	 *           </ul>
1:b767d3b: 	 * @throws A The first possible exception type to throw
1:b767d3b: 	 * @throws B The second possible exception type to throw
1:b767d3b: 	 * @throws C The third possible exception type to throw
1:b767d3b: 	 * @throws IllegalArgumentException if the cause is not a {@link RuntimeException} or one of types A, B or C
1:9e03212: 	 */
1:9e03212: 	public <A extends Throwable, B extends Throwable, C extends Throwable> RuntimeException asOneOf(
1:b767d3b: 			Class<A> a, Class<B> b, Class<C> c) throws A, B, C, IllegalArgumentException {
1:9e03212: 		Throwable t = getCause();
1:9e03212: 
1:9e03212: 		if (t instanceof RuntimeException) {
1:9e03212: 			throw (RuntimeException) t;
1:9e03212: 		}
1:9e03212: 
1:9e03212: 		possibleThrow(a, t);
1:9e03212: 		possibleThrow(b, t);
1:9e03212: 		possibleThrow(c, t);
1:9e03212: 
1:9e03212: 		throw new IllegalArgumentException(
1:9e03212: 				"The cause of this Exception is not an instance of " + String
1:9e03212: 						.join(", ", a.getName(), b.getName(), c.getName()),
1:9e03212: 				this);
1:9e03212: 	}
1:9e03212: 
1:9e03212: 	/**
1:9e03212: 	 * Throws the cause of this Exception as a RuntimeException or one of the
1:9e03212: 	 * supplied Exception types.
1:9e03212: 	 * 
1:9e03212: 	 * @see #asOneOf(Class, Class)
1:b767d3b: 	 * @param a The first possible exception type to throw
1:b767d3b: 	 * @param b The second possible exception type to throw
1:b767d3b: 	 * @param c The third possible exception type to throw
1:b767d3b: 	 * @param d The fourth possible exception type to throw
1:b767d3b: 	 * @return This method will always throw an exception, either:
1:b767d3b: 	 *           <ul>
1:b767d3b: 	 *             <li>The cause of this exception as the type &lt;A&gt;</li>
1:b767d3b: 	 *             <li>The cause of this exception as the type &lt;B&gt;</li>
1:b767d3b: 	 *             <li>The cause of this exception as the type &lt;C&gt;</li>
1:b767d3b: 	 *             <li>The cause of this exception as a runtime exception</li>
1:b767d3b: 	 *             <li>An IllegalArgumentException with its cause set to <code>this</code></li>
1:b767d3b: 	 *           </ul>
1:b767d3b: 	 * @throws A The first possible exception type to throw
1:b767d3b: 	 * @throws B The second possible exception type to throw
1:b767d3b: 	 * @throws C The third possible exception type to throw
1:b767d3b: 	 * @throws D The fourth possible exception type to throw
1:b767d3b: 	 * @throws IllegalArgumentException if the cause is not a {@link RuntimeException} or one of types A, B, C or D
1:9e03212: 	 */
1:9e03212: 	public <A extends Throwable, B extends Throwable, C extends Throwable, D extends Throwable> RuntimeException asOneOf(
1:b767d3b: 			Class<A> a, Class<B> b, Class<C> c, Class<D> d) throws A, B, C, D, IllegalArgumentException {
1:9e03212: 		Throwable t = getCause();
1:9e03212: 
1:9e03212: 		if (t instanceof RuntimeException) {
1:9e03212: 			throw (RuntimeException) t;
1:9e03212: 		}
1:9e03212: 
1:9e03212: 		possibleThrow(a, t);
1:9e03212: 		possibleThrow(b, t);
1:9e03212: 		possibleThrow(c, t);
1:9e03212: 		possibleThrow(d, t);
1:9e03212: 
1:9e03212: 		throw new IllegalArgumentException(
1:9e03212: 				"The cause of this Exception is not an instance of " + String
1:9e03212: 						.join(", ", a.getName(), b.getName(), c.getName()),
1:9e03212: 				this);
1:9e03212: 	}
1:9e03212: 
1:9e03212: 	@SuppressWarnings("unchecked")
1:9e03212: 	private <X extends Throwable> void possibleThrow(Class<X> x, Throwable t)
1:9e03212: 			throws X {
1:9e03212: 		if (x.isInstance(t)) {
1:9e03212: 			throw (X) t;
1:9e03212: 		}
1:9e03212: 	}
1:9e03212: 
1:9e03212: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:b767d3b
/////////////////////////////////////////////////////////////////////////
1: 	 * Throws the cause of this Exception as a RuntimeException, or as the supplied
/////////////////////////////////////////////////////////////////////////
1: 	 * @param throwable The exception type to throw
1: 	 *        
1: 	 * @return This method will always throw an exception, either:
1: 	 *           <ul>
1: 	 *             <li>The cause of this exception as the type &lt;T&gt;</li>
1: 	 *             <li>The cause of this exception as a runtime exception</li>
1: 	 *             <li>An IllegalArgumentException with its cause set to <code>this</code></li>
1: 	 *           </ul>
1: 	 * 
1: 	 * @throws T the type of exception to be thrown
1: 	 * @throws IllegalArgumentException if the cause is not a {@link RuntimeException} or of type T
1: 	public <T extends Throwable> T as(Class<T> throwable) throws T, IllegalArgumentException {
/////////////////////////////////////////////////////////////////////////
1: 	 * Throws the cause of this Exception as a RuntimeException, or as one of the
/////////////////////////////////////////////////////////////////////////
1: 	 * @param a The first possible exception type to throw
1: 	 * @param b The second possible exception type to throw
1: 	 * @return This method will always throw an exception, either:
1: 	 *           <ul>
1: 	 *             <li>The cause of this exception as the type &lt;A&gt;</li>
1: 	 *             <li>The cause of this exception as the type &lt;B&gt;</li>
1: 	 *             <li>The cause of this exception as a runtime exception</li>
1: 	 *             <li>An IllegalArgumentException with its cause set to <code>this</code></li>
1: 	 *           </ul>
1: 	 * @throws A The first possible exception type to throw
1: 	 * @throws B The second possible exception type to throw
1: 	 * @throws IllegalArgumentException if the cause is not a {@link RuntimeException} or of type A or B
1: 			Class<A> a, Class<B> b) throws A, B, IllegalArgumentException {
/////////////////////////////////////////////////////////////////////////
1: 	 * @param a The first possible exception type to throw
1: 	 * @param b The second possible exception type to throw
1: 	 * @param c The third possible exception type to throw
1: 	 * @return This method will always throw an exception, either:
1: 	 *           <ul>
1: 	 *             <li>The cause of this exception as the type &lt;A&gt;</li>
1: 	 *             <li>The cause of this exception as the type &lt;B&gt;</li>
1: 	 *             <li>The cause of this exception as the type &lt;C&gt;</li>
1: 	 *             <li>The cause of this exception as a runtime exception</li>
1: 	 *             <li>An IllegalArgumentException with its cause set to <code>this</code></li>
1: 	 *           </ul>
1: 	 * @throws A The first possible exception type to throw
1: 	 * @throws B The second possible exception type to throw
1: 	 * @throws C The third possible exception type to throw
1: 	 * @throws IllegalArgumentException if the cause is not a {@link RuntimeException} or one of types A, B or C
1: 			Class<A> a, Class<B> b, Class<C> c) throws A, B, C, IllegalArgumentException {
/////////////////////////////////////////////////////////////////////////
1: 	 * @param a The first possible exception type to throw
1: 	 * @param b The second possible exception type to throw
1: 	 * @param c The third possible exception type to throw
1: 	 * @param d The fourth possible exception type to throw
1: 	 * @return This method will always throw an exception, either:
1: 	 *           <ul>
1: 	 *             <li>The cause of this exception as the type &lt;A&gt;</li>
1: 	 *             <li>The cause of this exception as the type &lt;B&gt;</li>
1: 	 *             <li>The cause of this exception as the type &lt;C&gt;</li>
1: 	 *             <li>The cause of this exception as a runtime exception</li>
1: 	 *             <li>An IllegalArgumentException with its cause set to <code>this</code></li>
1: 	 *           </ul>
1: 	 * @throws A The first possible exception type to throw
1: 	 * @throws B The second possible exception type to throw
1: 	 * @throws C The third possible exception type to throw
1: 	 * @throws D The fourth possible exception type to throw
1: 	 * @throws IllegalArgumentException if the cause is not a {@link RuntimeException} or one of types A, B, C or D
1: 			Class<A> a, Class<B> b, Class<C> c, Class<D> d) throws A, B, C, D, IllegalArgumentException {
commit:739f28b
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * {@link TransactionContext} instances are not required to 
1: 	 * be {@link Serializable}, and the ongoing context is very 
1: 	 * unlikely to be active post deserialization. As a result
1: 	 * this field is transient.
1: 	 */
1: 	private transient final TransactionContext context;
/////////////////////////////////////////////////////////////////////////
1: 	 * @return The ongoing transaction context if the current scope was still 
1: 	 *         active when this exception was raised or <code>null</code> otherwise.
1: 	 *         Note that this property will not be persisted during serialization.
commit:9e03212
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.transaction.control;
1: 
1: /**
1:  * An Exception that is thrown when a piece of scoped work exits with an
1:  * {@link Exception}
1:  */
1: public class ScopedWorkException extends RuntimeException {
1: 
1: 	/**
1: 	 */
1: 	private static final long			serialVersionUID	= 4160254161503114842L;
1: 
0: 	private final TransactionContext context;
1: 
1: 	/**
1: 	 * Creates a new TransactionException with the supplied message and cause
1: 	 * 
1: 	 * @param message
1: 	 * @param cause
1: 	 * @param context 
1: 	 */
1: 	public ScopedWorkException(String message, Throwable cause, TransactionContext context) {
1: 		super(message, cause);
1: 		this.context = context;
1: 	}
1: 
1: 	/**
0: 	 * @return The ongoing transaction context if the scope is still active
1: 	 */
1: 	public TransactionContext ongoingContext() {
1: 		return context;
1: 	}
1: 
1: 	/**
1: 	 * @return The cause of this Exception as a {@link RuntimeException} if it
1: 	 *         is one, or this otherwise
1: 	 */
1: 	public RuntimeException asRuntimeException() {
1: 		return (RuntimeException) getCause();
1: 	}
1: 
1: 	/**
0: 	 * Throws the cause of this Exception as a RuntimeException the supplied
1: 	 * Exception type.
1: 	 * <p>
1: 	 * Usage is of the form:
1: 	 * 
1: 	 * <pre>
1: 	 * public void doStuff() throws IOException {
1: 	 *     try {
1: 	 *         ...
1: 	 *     } catch (ScopedWorkException swe) {
1: 	 *         throw swe.as(IOException.class);
1: 	 *     }
1: 	 * }
1: 	 * </pre>
1: 	 * 
0: 	 * @param throwable
0: 	 * @return This method will always throw an exception
0: 	 * @throws T
1: 	 */
0: 	public <T extends Throwable> T as(Class<T> throwable) throws T {
1: 		Throwable t = getCause();
1: 
1: 		if (t instanceof RuntimeException) {
1: 			throw (RuntimeException) t;
1: 		}
1: 
1: 		possibleThrow(throwable, t);
1: 
1: 		throw new IllegalArgumentException(
1: 				"The cause of this Exception is not an instance of "
1: 						+ throwable.getName(),
1: 				this);
1: 	}
1: 
1: 	/**
1: 	 * Throws the cause of this Exception as a RuntimeException or one of the
1: 	 * supplied Exception types.
1: 	 * <p>
1: 	 * Usage is of the form:
1: 	 * 
1: 	 * <pre>
1: 	 * public void doStuff() throws IOException, ClassNotFoundException {
1: 	 *     try {
1: 	 *         ...
1: 	 *     } catch (ScopedWorkException swe) {
1: 	 *         throw swe.asOneOf(IOException.class, ClassNotFoundException.class);
1: 	 *     }
1: 	 * }
1: 	 * </pre>
1: 	 * 
0: 	 * @param a
0: 	 * @param b
0: 	 * @return This method will always throw an exception
0: 	 * @throws A
0: 	 * @throws B
1: 	 */
1: 	public <A extends Throwable, B extends Throwable> RuntimeException asOneOf(
0: 			Class<A> a, Class<B> b) throws A, B {
1: 		Throwable t = getCause();
1: 
1: 		if (t instanceof RuntimeException) {
1: 			throw (RuntimeException) t;
1: 		}
1: 
1: 		possibleThrow(a, t);
1: 		possibleThrow(b, t);
1: 
1: 		throw new IllegalArgumentException(
1: 				"The cause of this Exception is not an instance of "
1: 						+ String.join(", ", a.getName(), b.getName()),
1: 				this);
1: 	}
1: 
1: 	/**
1: 	 * Throws the cause of this Exception as a RuntimeException or one of the
1: 	 * supplied Exception types.
1: 	 * 
1: 	 * @see #asOneOf(Class, Class)
0: 	 * @param a
0: 	 * @param b
0: 	 * @param c
0: 	 * @return This method will always throw an exception
0: 	 * @throws A
0: 	 * @throws B
1: 	 */
1: 	public <A extends Throwable, B extends Throwable, C extends Throwable> RuntimeException asOneOf(
0: 			Class<A> a, Class<B> b, Class<C> c) throws A, B, C {
1: 		Throwable t = getCause();
1: 
1: 		if (t instanceof RuntimeException) {
1: 			throw (RuntimeException) t;
1: 		}
1: 
1: 		possibleThrow(a, t);
1: 		possibleThrow(b, t);
1: 		possibleThrow(c, t);
1: 
1: 		throw new IllegalArgumentException(
1: 				"The cause of this Exception is not an instance of " + String
1: 						.join(", ", a.getName(), b.getName(), c.getName()),
1: 				this);
1: 	}
1: 
1: 	/**
1: 	 * Throws the cause of this Exception as a RuntimeException or one of the
1: 	 * supplied Exception types.
1: 	 * 
1: 	 * @see #asOneOf(Class, Class)
0: 	 * @param a
0: 	 * @param b
0: 	 * @param c
0: 	 * @param d
0: 	 * @return This method will always throw an exception
0: 	 * @throws A
0: 	 * @throws B
0: 	 * @throws C
0: 	 * @throws D
1: 	 */
1: 	public <A extends Throwable, B extends Throwable, C extends Throwable, D extends Throwable> RuntimeException asOneOf(
0: 			Class<A> a, Class<B> b, Class<C> c, Class<D> d) throws A, B, C, D {
1: 		Throwable t = getCause();
1: 
1: 		if (t instanceof RuntimeException) {
1: 			throw (RuntimeException) t;
1: 		}
1: 
1: 		possibleThrow(a, t);
1: 		possibleThrow(b, t);
1: 		possibleThrow(c, t);
1: 		possibleThrow(d, t);
1: 
1: 		throw new IllegalArgumentException(
1: 				"The cause of this Exception is not an instance of " + String
1: 						.join(", ", a.getName(), b.getName(), c.getName()),
1: 				this);
1: 	}
1: 
1: 	@SuppressWarnings("unchecked")
1: 	private <X extends Throwable> void possibleThrow(Class<X> x, Throwable t)
1: 			throws X {
1: 		if (x.isInstance(t)) {
1: 			throw (X) t;
1: 		}
1: 	}
1: 
1: }
============================================================================