4:79e9d13: /**
1:f13c6ac:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  *  contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  *  this work for additional information regarding copyright ownership.
1:f13c6ac:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  *  (the "License"); you may not use this file except in compliance with
1:f13c6ac:  *  the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  *  Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  *  See the License for the specific language governing permissions and
1:f13c6ac:  *  limitations under the License.
4:79e9d13:  */
1:6414875: package org.apache.aries.blueprint;
5:f13c6ac: 
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Set;
1:79e9d13: 
1:f13c6ac: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Target;
1:f13c6ac: 
1:f13c6ac: public interface ComponentDefinitionRegistry  {
1:f13c6ac:     
1:5dbb0fc:     /**
1:5dbb0fc:      * Determine if the component registry contains a component definition for the given id
1:5dbb0fc:      * @param id
1:5dbb0fc:      * @return
1:5dbb0fc:      */
1:5dbb0fc:     boolean containsComponentDefinition(String id);
1:79e9d13:     
1:5dbb0fc:     /**
1:5dbb0fc:      * Retrieve a component's metadata by id
1:5dbb0fc:      * @param id The id of the component. This is either the id specified in the Blueprint xml or the
1:5dbb0fc:      * generated id of an unnamed component
1:5dbb0fc:      * @return the <code>ComponentMetadata</code> or <code>null</code> if the id does not match
1:5dbb0fc:      * any registered component 
1:5dbb0fc:      */
1:5dbb0fc:     ComponentMetadata getComponentDefinition(String id);
1:79e9d13:     
1:5dbb0fc:     /**
1:5dbb0fc:      * Returns a set of the id of top-level blueprint components (both named and unnamed).
1:5dbb0fc:      * 
1:5dbb0fc:      * The ids of unnamed components are Blueprint generated. Anonymous components, which have no
1:5dbb0fc:      * id, are not part of the set.
1:5dbb0fc:      * @return
1:5dbb0fc:      */
1:f13c6ac:     Set<String> getComponentDefinitionNames();
1:f13c6ac:     
1:5dbb0fc:     /**
1:5dbb0fc:      * Register a new component
1:5dbb0fc:      * 
1:5dbb0fc:      * The <code>ComponentMetadata</code> argument must have an id. So unnamed components should have an id 
1:5dbb0fc:      * generated prior to invoking this method. Also, no component definition may already be registered
1:5dbb0fc:      * under the same id.
1:5dbb0fc:      * 
1:5dbb0fc:      * @param component the component to be registered
1:5dbb0fc:      * @throws IllegalArgumentException if the component has no id 
1:5dbb0fc:      * @throws ComponentNameAlreadyInUseException if there already exists a component definition
1:5dbb0fc:      * in the registry with the same id
1:5dbb0fc:      */
1:f13c6ac:     void registerComponentDefinition(ComponentMetadata component);
1:f13c6ac:     
1:5dbb0fc:     /**
1:5dbb0fc:      * Remove the component definition with a given id
1:5dbb0fc:      * 
1:5dbb0fc:      * If no component is registered under the id, this method is a no-op.
1:5dbb0fc:      * @param id the id of the component definition to be removed
1:5dbb0fc:      */
1:5dbb0fc:     void removeComponentDefinition(String id);
1:f13c6ac: 
1:f13c6ac:     void registerTypeConverter(Target component);
1:bb726ca: 
1:f13c6ac:     List<Target> getTypeConverters();
1:bb726ca:     
1:5dbb0fc:     /**
1:5dbb0fc:      * Register an interceptor for a given component
1:5dbb0fc:      * 
1:5dbb0fc:      * Since the interceptor is registered against a <code>ComponentMetadata</code> instance and not an id,
1:5dbb0fc:      * interceptors can be registered for anonymous components as well as named and unnamed components.
1:5dbb0fc:      * 
1:5dbb0fc:      * Note: Although an interceptor is registered against a specific <code>ComponentMetadata</code> instance,
1:5dbb0fc:      * an interceptor should not rely on this fact. This will allow <code>NamespaceHandlers</code> and 
1:5dbb0fc:      * <code>ComponentDefinitionRegistryProcessors</code> to respect registered interceptors even when
1:5dbb0fc:      * the actual <code>ComponentMetadata</code> instance is changed or augmented. If an interceptor does
1:5dbb0fc:      * not support such a scenario it should nevertheless fail gracefully in the case of modified 
1:5dbb0fc:      * <code>ComponentMetadata</code> instances.
1:5dbb0fc:      * 
1:5dbb0fc:      * Note: at the time of this writing (version 0.1) interceptors are only supported for <code>BeanMetadata</code>. 
1:5dbb0fc:      * Interceptors registered against other component types will be ignored.
1:5dbb0fc:      * 
1:5dbb0fc:      * @param component the component the interceptor is to be registered against
1:5dbb0fc:      * @param interceptor the interceptor to be used
1:5dbb0fc:      */
1:bb726ca:     void registerInterceptorWithComponent(ComponentMetadata component, Interceptor interceptor);
1:79e9d13:     
1:5dbb0fc:     /**
1:5dbb0fc:      * Retrieve all interceptors registered against a <code>ComponentMetadata</code> instance
1:5dbb0fc:      * @param component
1:5dbb0fc:      * @return a list of interceptors sorted by decreasing rank. The list may be empty if no interceptors have been defined
1:5dbb0fc:      */
1:bb726ca:     List<Interceptor> getInterceptors(ComponentMetadata component);
1:f13c6ac:     
1:f13c6ac: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
commit:5dbb0fc
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Determine if the component registry contains a component definition for the given id
1:      * @param id
1:      * @return
1:      */
1:     boolean containsComponentDefinition(String id);
1:     /**
1:      * Retrieve a component's metadata by id
1:      * @param id The id of the component. This is either the id specified in the Blueprint xml or the
1:      * generated id of an unnamed component
1:      * @return the <code>ComponentMetadata</code> or <code>null</code> if the id does not match
1:      * any registered component 
1:      */
1:     ComponentMetadata getComponentDefinition(String id);
1:     /**
1:      * Returns a set of the id of top-level blueprint components (both named and unnamed).
1:      * 
1:      * The ids of unnamed components are Blueprint generated. Anonymous components, which have no
1:      * id, are not part of the set.
1:      * @return
1:      */
1:     /**
1:      * Register a new component
1:      * 
1:      * The <code>ComponentMetadata</code> argument must have an id. So unnamed components should have an id 
1:      * generated prior to invoking this method. Also, no component definition may already be registered
1:      * under the same id.
1:      * 
1:      * @param component the component to be registered
1:      * @throws IllegalArgumentException if the component has no id 
1:      * @throws ComponentNameAlreadyInUseException if there already exists a component definition
1:      * in the registry with the same id
1:      */
1:     /**
1:      * Remove the component definition with a given id
1:      * 
1:      * If no component is registered under the id, this method is a no-op.
1:      * @param id the id of the component definition to be removed
1:      */
1:     void removeComponentDefinition(String id);
1:     /**
1:      * Register an interceptor for a given component
1:      * 
1:      * Since the interceptor is registered against a <code>ComponentMetadata</code> instance and not an id,
1:      * interceptors can be registered for anonymous components as well as named and unnamed components.
1:      * 
1:      * Note: Although an interceptor is registered against a specific <code>ComponentMetadata</code> instance,
1:      * an interceptor should not rely on this fact. This will allow <code>NamespaceHandlers</code> and 
1:      * <code>ComponentDefinitionRegistryProcessors</code> to respect registered interceptors even when
1:      * the actual <code>ComponentMetadata</code> instance is changed or augmented. If an interceptor does
1:      * not support such a scenario it should nevertheless fail gracefully in the case of modified 
1:      * <code>ComponentMetadata</code> instances.
1:      * 
1:      * Note: at the time of this writing (version 0.1) interceptors are only supported for <code>BeanMetadata</code>. 
1:      * Interceptors registered against other component types will be ignored.
1:      * 
1:      * @param component the component the interceptor is to be registered against
1:      * @param interceptor the interceptor to be used
1:      */
1:     /**
1:      * Retrieve all interceptors registered against a <code>ComponentMetadata</code> instance
1:      * @param component
1:      * @return a list of interceptors sorted by decreasing rank. The list may be empty if no interceptors have been defined
1:      */
commit:c1dc516
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:79e9d13
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.service.blueprint.container.BlueprintContainer;
0: import org.osgi.service.blueprint.container.Converter;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * Obtain the blueprint container of that this component definition registry belongs to
0:      * @return
1:      */
0:     BlueprintContainer getBlueprintContainer();
1:     
1:     /**
0:      * Obtain the client bundle that defines this blueprint module
0:      * @return
1:      */
0:     Bundle getBlueprintBundle();
1:     
1:     /**
0:      * Obtain the client bundle context of the bundle that defines this blueprint module
0:      * @return
1:      */
0:     BundleContext getBlueprintBundleContext();
1:     
1:     /**
0:      * Obtain the blueprint converter of the current blueprint module
0:      * @return
1:      */
0:     Converter getBlueprintConverter();
author:Andrew Osborne
-------------------------------------------------------------------------------
commit:bb726ca
/////////////////////////////////////////////////////////////////////////
1:     
1:     void registerInterceptorWithComponent(ComponentMetadata component, Interceptor interceptor);
1:     
1:     List<Interceptor> getInterceptors(ComponentMetadata component);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
0: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
0:  */
0: package org.apache.geronimo.blueprint;
1: 
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.Target;
1: 
1: public interface ComponentDefinitionRegistry  {
1:     
0:     boolean containsComponentDefinition(String name);
1:     
0:     ComponentMetadata getComponentDefinition(String name);
1:     
1:     Set<String> getComponentDefinitionNames();
1:     
1:     void registerComponentDefinition(ComponentMetadata component);
1:     
0:     void removeComponentDefinition(String name);
1: 
1:     void registerTypeConverter(Target component);
1: 
1:     List<Target> getTypeConverters();
1: 
1: }
============================================================================