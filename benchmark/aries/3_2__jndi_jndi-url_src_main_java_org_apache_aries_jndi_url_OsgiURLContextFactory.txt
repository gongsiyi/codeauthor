1:fc02f66: /*
1:fc02f66:  * Licensed to the Apache Software Foundation (ASF) under one
1:fc02f66:  * or more contributor license agreements.  See the NOTICE file
1:fc02f66:  * distributed with this work for additional information
1:fc02f66:  * regarding copyright ownership.  The ASF licenses this file
1:fc02f66:  * to you under the Apache License, Version 2.0 (the
1:fc02f66:  * "License"); you may not use this file except in compliance
1:fc02f66:  * with the License.  You may obtain a copy of the License at
1:fc02f66:  *
1:fc02f66:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fc02f66:  *
1:fc02f66:  * Unless required by applicable law or agreed to in writing,
1:fc02f66:  * software distributed under the License is distributed on an
1:3c19a77:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fc02f66:  * KIND, either express or implied.  See the License for the
1:fc02f66:  * specific language governing permissions and limitations
1:fc02f66:  * under the License.
1:fc02f66:  */
1:fc02f66: package org.apache.aries.jndi.url;
6:fc02f66: 
1:fc02f66: import java.util.Hashtable;
1:fc02f66: 
1:fc02f66: import javax.naming.ConfigurationException;
1:fc02f66: import javax.naming.Context;
1:fc02f66: import javax.naming.Name;
1:fc02f66: import javax.naming.NamingException;
1:fc02f66: import javax.naming.spi.ObjectFactory;
1:fc02f66: 
1:7b2544b: import org.osgi.framework.BundleContext;
1:7b2544b: 
1:fc02f66: /**
1:fc02f66:  * A factory for the aries JNDI context
1:fc02f66:  */
1:7b2544b: public class OsgiURLContextFactory implements ObjectFactory {
1:7b2544b:     
1:7b2544b:     private BundleContext callerContext;
1:7b2544b:     
1:7b2544b:     public OsgiURLContextFactory(BundleContext callerContext) {
1:7b2544b:         this.callerContext = callerContext;
4:7b2544b:     }
1:7b2544b:     
1:7b2544b:     public Object getObjectInstance(Object obj,
1:7b2544b:                                     Name name,
1:7b2544b:                                     Context nameCtx,
1:7b2544b:                                     Hashtable<?, ?> environment) throws Exception {
1:7b2544b:         if (obj == null) {
1:7b2544b:             return new ServiceRegistryContext(callerContext, environment);
1:7b2544b:         } else if (obj instanceof String) {
1:08490c1:         	return findAny(environment, (String)obj);
1:7b2544b:         } else if (obj instanceof String[]) {
1:08490c1:             return findAny(environment, (String[]) obj);
1:08490c1:         } else {
1:08490c1:             return null;
1:7b2544b:         }
1:7b2544b:     }
1:7b2544b: 
1:08490c1:     /**
1:08490c1:      * Try each URL until either lookup succeeds or they all fail
1:08490c1:      */
1:08490c1: 	private Object findAny(Hashtable<?, ?> environment, String ... urls)
1:08490c1: 			throws ConfigurationException, NamingException {
1:08490c1: 		if (urls.length == 0) {
1:08490c1: 		    throw new ConfigurationException("0");
1:08490c1: 		}
1:08490c1: 		Context context = new ServiceRegistryContext(callerContext, environment);
1:08490c1: 		try {
1:08490c1: 		    NamingException ne = null;
1:08490c1: 		    for (int i = 0; i < urls.length; i++) {
1:08490c1: 		        try {
1:08490c1: 		            return context.lookup(urls[i]);
1:08490c1: 		        } catch (NamingException e) {
1:08490c1: 		            ne = e;
1:08490c1: 		        }
1:08490c1: 		    }
1:08490c1: 		    throw ne;
1:08490c1: 		} finally {
1:08490c1: 		    context.close();
1:08490c1: 		}
1:08490c1: 	}
1:08490c1: 
1:7b2544b: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:08490c1
/////////////////////////////////////////////////////////////////////////
1:         	return findAny(environment, (String)obj);
1:             return findAny(environment, (String[]) obj);
1:         } else {
1:             return null;
1:     /**
1:      * Try each URL until either lookup succeeds or they all fail
1:      */
1: 	private Object findAny(Hashtable<?, ?> environment, String ... urls)
1: 			throws ConfigurationException, NamingException {
1: 		if (urls.length == 0) {
1: 		    throw new ConfigurationException("0");
1: 		}
1: 		Context context = new ServiceRegistryContext(callerContext, environment);
1: 		try {
1: 		    NamingException ne = null;
1: 		    for (int i = 0; i < urls.length; i++) {
1: 		        try {
1: 		            return context.lookup(urls[i]);
1: 		        } catch (NamingException e) {
1: 		            ne = e;
1: 		        }
1: 		    }
1: 		    throw ne;
1: 		} finally {
1: 		    context.close();
1: 		}
1: 	}
1: 
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:7b2544b
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleContext;
1: 
1: public class OsgiURLContextFactory implements ObjectFactory {
1:     
1:     private BundleContext callerContext;
1:     
1:     public OsgiURLContextFactory(BundleContext callerContext) {
1:         this.callerContext = callerContext;
1:     
1:     public Object getObjectInstance(Object obj,
1:                                     Name name,
1:                                     Context nameCtx,
1:                                     Hashtable<?, ?> environment) throws Exception {
1:         if (obj == null) {
1:             return new ServiceRegistryContext(callerContext, environment);
1:         } else if (obj instanceof String) {
0:             Context ctx = null;
0:             try {
0:                 ctx = new ServiceRegistryContext(callerContext, environment);
0:                 return ctx.lookup((String) obj);
0:             } finally {
0:                 if (ctx != null)
0:                     ctx.close();
1:             }
1:         } else if (obj instanceof String[]) {
0:             // Try each URL until either lookup succeeds or they all fail
0:             String[] urls = (String[]) obj;
0:             if (urls.length == 0) {
0:                 throw new ConfigurationException("0");
1:             }
0:             Context context = new ServiceRegistryContext(callerContext, environment);
0:             try {
0:                 NamingException ne = null;
0:                 for (int i = 0; i < urls.length; i++) {
0:                     try {
0:                         return context.lookup(urls[i]);
0:                     } catch (NamingException e) {
0:                         ne = e;
1:                     }
1:                 }
0:                 throw ne;
0:             } finally {
0:                 context.close();
1:             }
1:         }
1: 
0:         return null;
1:     }
commit:3c19a77
/////////////////////////////////////////////////////////////////////////
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
commit:e6f69cc
commit:fc02f66
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi.url;
1: 
1: import java.util.Hashtable;
1: 
1: import javax.naming.ConfigurationException;
1: import javax.naming.Context;
1: import javax.naming.Name;
1: import javax.naming.NamingException;
1: import javax.naming.spi.ObjectFactory;
1: 
1: /**
1:  * A factory for the aries JNDI context
1:  */
0: public class OsgiURLContextFactory implements ObjectFactory
0: {
0:   public Object getObjectInstance(Object obj, Name name, Context nameCtx,
0:       Hashtable<?, ?> environment) throws Exception
0:   {
0:     if (obj == null) {
0:       return new ServiceRegistryContext(environment);
0:     } else if (obj instanceof String) {
0:       Context ctx = null;
0:       try {
1:         
0:         ctx = new ServiceRegistryContext(environment);
1:         
0:         return ctx.lookup((String)obj);
0:       } finally {
0:         if (ctx != null) ctx.close();
0:       }
0:     } else if (obj instanceof String[]) {
0:       // Try each URL until either lookup succeeds or they all fail
0:       String[] urls = (String[])obj;
0:       if (urls.length == 0) throw new ConfigurationException("ariesURLContextFactory: empty URL array");
0:       Context context = new ServiceRegistryContext(environment);
0:       try
0:       {
0:         NamingException ne = null;
0:         for(int i=0; i< urls.length; i++)
0:         {
0:           try
0:           {
0:             return context.lookup(urls[i]);
0:           }
0:           catch(NamingException e)
0:           {
0:             ne = e;
0:           }
0:         }
0:         throw ne;
0:       }
0:       finally
0:       {
0:         context.close();
0:       }    
1:       
0:     }
1: 
0:     return null;
0:   }
1: 
0: }
commit:1a3015d
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.jndi.url;
0: 
0: import java.util.Hashtable;
0: 
0: import javax.naming.ConfigurationException;
0: import javax.naming.Context;
0: import javax.naming.Name;
0: import javax.naming.NamingException;
0: import javax.naming.spi.ObjectFactory;
0: 
0: /**
0:  * A factory for the aries JNDI context
0:  */
0: public class OsgiURLContextFactory implements ObjectFactory
0: {
0:   public Object getObjectInstance(Object obj, Name name, Context nameCtx,
0:       Hashtable<?, ?> environment) throws Exception
0:   {
0:     if (obj == null) {
0:       return new ServiceRegistryContext(environment);
0:     } else if (obj instanceof String) {
0:       Context ctx = null;
0:       try {
0:         
0:         ctx = new ServiceRegistryContext(environment);
0:         
0:         return ctx.lookup((String)obj);
0:       } finally {
0:         if (ctx != null) ctx.close();
0:       }
0:     } else if (obj instanceof String[]) {
0:       // Try each URL until either lookup succeeds or they all fail
0:       String[] urls = (String[])obj;
0:       if (urls.length == 0) throw new ConfigurationException("ariesURLContextFactory: empty URL array");
0:       Context context = new ServiceRegistryContext(environment);
0:       try
0:       {
0:         NamingException ne = null;
0:         for(int i=0; i< urls.length; i++)
0:         {
0:           try
0:           {
0:             return context.lookup(urls[i]);
0:           }
0:           catch(NamingException e)
0:           {
0:             ne = e;
0:           }
0:         }
0:         throw ne;
0:       }
0:       finally
0:       {
0:         context.close();
0:       }    
0:       
0:     }
0: 
0:     return null;
0:   }
0: 
0: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:e9395b8
/////////////////////////////////////////////////////////////////////////
0:       if (urls.length == 0) throw new ConfigurationException("0");
============================================================================