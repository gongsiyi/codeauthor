1:5a4dcb4: /*
1:5a4dcb4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a4dcb4:  * contributor license agreements.  See the NOTICE file distributed with
1:5a4dcb4:  * this work for additional information regarding copyright ownership.
1:5a4dcb4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a4dcb4:  * (the "License"); you may not use this file except in compliance with
1:5a4dcb4:  * the License.  You may obtain a copy of the License at
1:5a4dcb4:  *
1:5a4dcb4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5a4dcb4:  *
1:5a4dcb4:  * Unless required by applicable law or agreed to in writing, software
1:5a4dcb4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a4dcb4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a4dcb4:  * See the License for the specific language governing permissions and
1:5a4dcb4:  * limitations under the License.
1:5a4dcb4:  */
1:5a4dcb4: package org.apache.aries.jpa.cdi;
1:5a4dcb4: 
1:5a4dcb4: import javax.annotation.Priority;
1:5a4dcb4: import javax.enterprise.inject.spi.BeanManager;
1:5a4dcb4: import javax.inject.Inject;
1:5a4dcb4: import javax.interceptor.AroundInvoke;
1:5a4dcb4: import javax.interceptor.Interceptor;
1:5a4dcb4: import javax.interceptor.InvocationContext;
1:5a4dcb4: import javax.transaction.Status;
1:5a4dcb4: import javax.transaction.SystemException;
1:5a4dcb4: import javax.transaction.Transaction;
1:5a4dcb4: import javax.transaction.TransactionManager;
1:5a4dcb4: import javax.transaction.Transactional;
1:5a4dcb4: 
1:5a4dcb4: import org.slf4j.Logger;
1:5a4dcb4: import org.slf4j.LoggerFactory;
1:5a4dcb4: 
1:5a4dcb4: @Transactional
1:5a4dcb4: @Interceptor
1:5a4dcb4: @Priority(Interceptor.Priority.PLATFORM_BEFORE + 200)
1:5a4dcb4: class TransactionalInterceptor {
1:5a4dcb4: 
1:5a4dcb4:     private static final Logger log = LoggerFactory.getLogger(TransactionalInterceptor.class);
1:5a4dcb4: 
1:5a4dcb4:     @Inject
1:5a4dcb4:     private BeanManager beanManager;
1:5a4dcb4: 
1:5a4dcb4:     @Inject
1:5a4dcb4:     private TransactionSupport transactionSupport;
1:5a4dcb4: 
1:5a4dcb4:     @AroundInvoke
1:5a4dcb4:     Object aroundInvoke(InvocationContext invocationContext) throws Exception {
1:5a4dcb4: 
1:5a4dcb4:         TransactionManager transactionManager = transactionSupport.getTransactionManager();
1:5a4dcb4:         boolean active = isTransactionActive(transactionManager);
1:5a4dcb4:         TransactionExtension extension = beanManager.getExtension(TransactionExtension.class);
1:5a4dcb4:         Transactional attr = extension.getTransactionAttribute(invocationContext.getMethod());
1:5a4dcb4:         Boolean requiresNew = requiresNew(active, attr.value());
1:5a4dcb4: 
1:5a4dcb4:         boolean debug = log.isDebugEnabled();
1:5a4dcb4: 
1:5a4dcb4:         if (debug) {
1:5a4dcb4:             log.debug("Invoking transactional method {}, attr = {}, active = {}, requiresNew = {}",
1:5a4dcb4:                     invocationContext.getMethod(), attr.value(), active, requiresNew);
1:5a4dcb4:         }
1:5a4dcb4: 
1:5a4dcb4:         // Suspend the current transaction if transaction attribute is // REQUIRES_NEW or NOT_SUPPORTED.
1:5a4dcb4:         Transaction previous = null;
1:5a4dcb4:         if ((requiresNew != Boolean.FALSE) && active) {
1:5a4dcb4:             if (debug) {
1:5a4dcb4:                 log.debug("Suspending the current transaction");
1:5a4dcb4:             }
1:5a4dcb4:             previous = transactionManager.suspend();
1:5a4dcb4:         }
1:5a4dcb4: 
1:5a4dcb4:         try {
1:5a4dcb4:             if (requiresNew == Boolean.TRUE) {
1:5a4dcb4:                 if (debug) {
1:5a4dcb4:                     log.debug("Starting a new transaction");
1:5a4dcb4:                 }
1:5a4dcb4:                 transactionManager.begin();
1:5a4dcb4:             }
1:5a4dcb4: 
1:5a4dcb4:             Object result;
1:5a4dcb4:             try {
1:5a4dcb4:                 result = invocationContext.proceed();
1:5a4dcb4:             } catch (Exception e) {
1:5a4dcb4:                 if (requiresNew == Boolean.FALSE) {
1:5a4dcb4:                     if (needsRollback(attr, e)) {
1:5a4dcb4:                         transactionManager.setRollbackOnly();
1:5a4dcb4:                     }
1:5a4dcb4:                 } else if (requiresNew == Boolean.TRUE) {
1:5a4dcb4:                     if (needsRollback(attr, e)) {
1:5a4dcb4:                         if (debug) {
1:5a4dcb4:                             log.debug("Rolling back the current transaction");
1:5a4dcb4:                         }
1:5a4dcb4:                         transactionManager.rollback();
1:5a4dcb4:                     } else {
1:5a4dcb4:                         if (debug) {
1:5a4dcb4:                             log.debug("Committing the current transaction");
1:5a4dcb4:                         }
1:5a4dcb4:                         transactionManager.commit();
1:5a4dcb4:                     }
1:5a4dcb4:                 }
1:5a4dcb4: 
1:5a4dcb4:                 throw e;
1:5a4dcb4:             }
1:5a4dcb4: 
1:5a4dcb4:             if (requiresNew == Boolean.TRUE) {
1:5a4dcb4:                 if (transactionManager.getStatus() == Status.STATUS_MARKED_ROLLBACK) {
1:5a4dcb4:                     if (debug) {
1:5a4dcb4:                         log.debug("Rolling back the current transaction");
1:5a4dcb4:                     }
1:5a4dcb4:                     transactionManager.rollback();
1:5a4dcb4:                 } else {
1:5a4dcb4:                     if (debug) {
1:5a4dcb4:                         log.debug("Committing the current transaction");
1:5a4dcb4:                     }
1:5a4dcb4:                     transactionManager.commit();
1:5a4dcb4:                 }
1:5a4dcb4:             }
1:5a4dcb4: 
1:5a4dcb4:             return result;
1:5a4dcb4:         } finally {
1:5a4dcb4:             // Resume the previous transaction if it was suspended.
1:5a4dcb4:             if (previous != null) {
1:5a4dcb4:                 if (debug) {
1:5a4dcb4:                     log.debug("Resuming the previous transaction");
1:5a4dcb4:                 }
1:5a4dcb4:                 transactionManager.resume(previous);
1:5a4dcb4:             }
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * Checks if the current transaction is active, rolled back or marked for
1:5a4dcb4:      * rollback.
1:5a4dcb4:      *
1:5a4dcb4:      * @return {@code true} if the current transaction is active, rolled back or
1:5a4dcb4:      * marked for rollback, {@code false} otherwise.
1:5a4dcb4:      * @throws SystemException thrown if the transaction manager encounters an
1:5a4dcb4:      *                         unexpected error condition
1:5a4dcb4:      */
1:5a4dcb4:     private boolean isTransactionActive(TransactionManager transactionManager) throws SystemException {
1:5a4dcb4:         switch (transactionManager.getStatus()) {
1:5a4dcb4:             case Status.STATUS_ACTIVE:
1:5a4dcb4:             case Status.STATUS_MARKED_ROLLBACK:
1:5a4dcb4:             case Status.STATUS_ROLLEDBACK:
1:5a4dcb4:                 return true;
1:5a4dcb4: 
1:5a4dcb4:             default:
1:5a4dcb4:                 return false;
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * Determines whether it is necessary to begin a new transaction.
1:5a4dcb4:      *
1:5a4dcb4:      * @param active    the status of the current transaction.
1:5a4dcb4:      * @param attribute the transaction attribute of the current method.
1:5a4dcb4:      * @return {@code Boolean.TRUE} if the interceptor should suspend the
1:5a4dcb4:      * current transaction and invoke the method within a new
1:5a4dcb4:      * transaction, {@code Boolean.FALSE} if the interceptor should
1:5a4dcb4:      * invoke the method within the current transaction, {@code null} if
1:5a4dcb4:      * the interceptor should suspend the current transaction and invoke
1:5a4dcb4:      * the method outside of transaction.
1:5a4dcb4:      */
1:5a4dcb4:     private Boolean requiresNew(boolean active, Transactional.TxType attribute) {
1:5a4dcb4:         switch (attribute) {
1:5a4dcb4:             case MANDATORY:
1:5a4dcb4:                 if (active) {
1:5a4dcb4:                     return false;
1:5a4dcb4:                 } else {
1:5a4dcb4:                     throw new IllegalStateException("Transaction is required to perform this method");
1:5a4dcb4:                 }
1:5a4dcb4: 
1:5a4dcb4:             case NEVER:
1:5a4dcb4:                 if (!active) {
1:5a4dcb4:                     return null;
1:5a4dcb4:                 } else {
1:5a4dcb4:                     throw new IllegalStateException("This method cannot be invoked within a transaction");
1:5a4dcb4:                 }
1:5a4dcb4: 
1:5a4dcb4:             case NOT_SUPPORTED:
1:5a4dcb4:                 return null;
1:5a4dcb4: 
1:5a4dcb4:             case REQUIRED:
1:5a4dcb4:                 return !active;
1:5a4dcb4: 
1:5a4dcb4:             case REQUIRES_NEW:
1:5a4dcb4:                 return true;
1:5a4dcb4: 
1:5a4dcb4:             case SUPPORTS:
1:5a4dcb4:                 if (active) {
1:5a4dcb4:                     return false;
1:5a4dcb4:                 } else {
1:5a4dcb4:                     return null;
1:5a4dcb4:                 }
1:5a4dcb4: 
1:5a4dcb4:             default:
1:5a4dcb4:                 throw new UnsupportedOperationException("Unsupported TransactionAttribute value " + attribute);
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * Determines whether it is necessary to rollback the current transaction
1:5a4dcb4:      * when the specified exception occurred during the method invocation.
1:5a4dcb4:      *
1:5a4dcb4:      *
1:5a4dcb4:      * @param attr
1:5a4dcb4:      * @param exception the exception that occurred during the method
1:5a4dcb4:      *                  invocation.
1:5a4dcb4:      * @return {@code true} if the interceptor should rollback the current
1:5a4dcb4:      * transaction, {@code false} if the interceptor should commit the
1:5a4dcb4:      * current transaction.
1:5a4dcb4:      */
1:5a4dcb4:     private boolean needsRollback(Transactional attr, Exception exception) {
1:5a4dcb4:         for (Class cl : attr.dontRollbackOn()) {
1:5a4dcb4:             if (cl.isInstance(exception)) {
1:5a4dcb4:                 return false;
1:5a4dcb4:             }
1:5a4dcb4:         }
1:5a4dcb4:         for (Class cl : attr.rollbackOn()) {
1:5a4dcb4:             if (cl.isInstance(exception)) {
1:5a4dcb4:                 return true;
1:5a4dcb4:             }
1:5a4dcb4:         }
1:5a4dcb4:         return exception instanceof RuntimeException;
1:5a4dcb4:     }
1:5a4dcb4: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5a4dcb4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.jpa.cdi;
1: 
1: import javax.annotation.Priority;
1: import javax.enterprise.inject.spi.BeanManager;
1: import javax.inject.Inject;
1: import javax.interceptor.AroundInvoke;
1: import javax.interceptor.Interceptor;
1: import javax.interceptor.InvocationContext;
1: import javax.transaction.Status;
1: import javax.transaction.SystemException;
1: import javax.transaction.Transaction;
1: import javax.transaction.TransactionManager;
1: import javax.transaction.Transactional;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: @Transactional
1: @Interceptor
1: @Priority(Interceptor.Priority.PLATFORM_BEFORE + 200)
1: class TransactionalInterceptor {
1: 
1:     private static final Logger log = LoggerFactory.getLogger(TransactionalInterceptor.class);
1: 
1:     @Inject
1:     private BeanManager beanManager;
1: 
1:     @Inject
1:     private TransactionSupport transactionSupport;
1: 
1:     @AroundInvoke
1:     Object aroundInvoke(InvocationContext invocationContext) throws Exception {
1: 
1:         TransactionManager transactionManager = transactionSupport.getTransactionManager();
1:         boolean active = isTransactionActive(transactionManager);
1:         TransactionExtension extension = beanManager.getExtension(TransactionExtension.class);
1:         Transactional attr = extension.getTransactionAttribute(invocationContext.getMethod());
1:         Boolean requiresNew = requiresNew(active, attr.value());
1: 
1:         boolean debug = log.isDebugEnabled();
1: 
1:         if (debug) {
1:             log.debug("Invoking transactional method {}, attr = {}, active = {}, requiresNew = {}",
1:                     invocationContext.getMethod(), attr.value(), active, requiresNew);
1:         }
1: 
1:         // Suspend the current transaction if transaction attribute is // REQUIRES_NEW or NOT_SUPPORTED.
1:         Transaction previous = null;
1:         if ((requiresNew != Boolean.FALSE) && active) {
1:             if (debug) {
1:                 log.debug("Suspending the current transaction");
1:             }
1:             previous = transactionManager.suspend();
1:         }
1: 
1:         try {
1:             if (requiresNew == Boolean.TRUE) {
1:                 if (debug) {
1:                     log.debug("Starting a new transaction");
1:                 }
1:                 transactionManager.begin();
1:             }
1: 
1:             Object result;
1:             try {
1:                 result = invocationContext.proceed();
1:             } catch (Exception e) {
1:                 if (requiresNew == Boolean.FALSE) {
1:                     if (needsRollback(attr, e)) {
1:                         transactionManager.setRollbackOnly();
1:                     }
1:                 } else if (requiresNew == Boolean.TRUE) {
1:                     if (needsRollback(attr, e)) {
1:                         if (debug) {
1:                             log.debug("Rolling back the current transaction");
1:                         }
1:                         transactionManager.rollback();
1:                     } else {
1:                         if (debug) {
1:                             log.debug("Committing the current transaction");
1:                         }
1:                         transactionManager.commit();
1:                     }
1:                 }
1: 
1:                 throw e;
1:             }
1: 
1:             if (requiresNew == Boolean.TRUE) {
1:                 if (transactionManager.getStatus() == Status.STATUS_MARKED_ROLLBACK) {
1:                     if (debug) {
1:                         log.debug("Rolling back the current transaction");
1:                     }
1:                     transactionManager.rollback();
1:                 } else {
1:                     if (debug) {
1:                         log.debug("Committing the current transaction");
1:                     }
1:                     transactionManager.commit();
1:                 }
1:             }
1: 
1:             return result;
1:         } finally {
1:             // Resume the previous transaction if it was suspended.
1:             if (previous != null) {
1:                 if (debug) {
1:                     log.debug("Resuming the previous transaction");
1:                 }
1:                 transactionManager.resume(previous);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Checks if the current transaction is active, rolled back or marked for
1:      * rollback.
1:      *
1:      * @return {@code true} if the current transaction is active, rolled back or
1:      * marked for rollback, {@code false} otherwise.
1:      * @throws SystemException thrown if the transaction manager encounters an
1:      *                         unexpected error condition
1:      */
1:     private boolean isTransactionActive(TransactionManager transactionManager) throws SystemException {
1:         switch (transactionManager.getStatus()) {
1:             case Status.STATUS_ACTIVE:
1:             case Status.STATUS_MARKED_ROLLBACK:
1:             case Status.STATUS_ROLLEDBACK:
1:                 return true;
1: 
1:             default:
1:                 return false;
1:         }
1:     }
1: 
1:     /**
1:      * Determines whether it is necessary to begin a new transaction.
1:      *
1:      * @param active    the status of the current transaction.
1:      * @param attribute the transaction attribute of the current method.
1:      * @return {@code Boolean.TRUE} if the interceptor should suspend the
1:      * current transaction and invoke the method within a new
1:      * transaction, {@code Boolean.FALSE} if the interceptor should
1:      * invoke the method within the current transaction, {@code null} if
1:      * the interceptor should suspend the current transaction and invoke
1:      * the method outside of transaction.
1:      */
1:     private Boolean requiresNew(boolean active, Transactional.TxType attribute) {
1:         switch (attribute) {
1:             case MANDATORY:
1:                 if (active) {
1:                     return false;
1:                 } else {
1:                     throw new IllegalStateException("Transaction is required to perform this method");
1:                 }
1: 
1:             case NEVER:
1:                 if (!active) {
1:                     return null;
1:                 } else {
1:                     throw new IllegalStateException("This method cannot be invoked within a transaction");
1:                 }
1: 
1:             case NOT_SUPPORTED:
1:                 return null;
1: 
1:             case REQUIRED:
1:                 return !active;
1: 
1:             case REQUIRES_NEW:
1:                 return true;
1: 
1:             case SUPPORTS:
1:                 if (active) {
1:                     return false;
1:                 } else {
1:                     return null;
1:                 }
1: 
1:             default:
1:                 throw new UnsupportedOperationException("Unsupported TransactionAttribute value " + attribute);
1:         }
1:     }
1: 
1:     /**
1:      * Determines whether it is necessary to rollback the current transaction
1:      * when the specified exception occurred during the method invocation.
1:      *
1:      *
1:      * @param attr
1:      * @param exception the exception that occurred during the method
1:      *                  invocation.
1:      * @return {@code true} if the interceptor should rollback the current
1:      * transaction, {@code false} if the interceptor should commit the
1:      * current transaction.
1:      */
1:     private boolean needsRollback(Transactional attr, Exception exception) {
1:         for (Class cl : attr.dontRollbackOn()) {
1:             if (cl.isInstance(exception)) {
1:                 return false;
1:             }
1:         }
1:         for (Class cl : attr.rollbackOn()) {
1:             if (cl.isInstance(exception)) {
1:                 return true;
1:             }
1:         }
1:         return exception instanceof RuntimeException;
1:     }
1: }
============================================================================