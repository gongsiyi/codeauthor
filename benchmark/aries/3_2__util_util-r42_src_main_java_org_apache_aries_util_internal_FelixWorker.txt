1:76e1d79: /*
1:76e1d79:  * Licensed to the Apache Software Foundation (ASF) under one
1:76e1d79:  * or more contributor license agreements.  See the NOTICE file
1:76e1d79:  * distributed with this work for additional information
1:76e1d79:  * regarding copyright ownership.  The ASF licenses this file
1:76e1d79:  * to you under the Apache License, Version 2.0 (the
1:76e1d79:  * "License"); you may not use this file except in compliance
1:76e1d79:  * with the License.  You may obtain a copy of the License at
1:76e1d79:  *
1:76e1d79:  *   http://www.apache.org/licenses/LICENSE-2.0
1:76e1d79:  *
1:76e1d79:  * Unless required by applicable law or agreed to in writing,
1:76e1d79:  * software distributed under the License is distributed on an
1:76e1d79:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:76e1d79:  * KIND, either express or implied.  See the License for the
1:76e1d79:  * specific language governing permissions and limitations
1:76e1d79:  * under the License.
1:76e1d79:  */
1:76e1d79: package org.apache.aries.util.internal;
1:76e1d79: 
1:76e1d79: import java.lang.reflect.InvocationTargetException;
1:76e1d79: import java.lang.reflect.Method;
1:76e1d79: 
1:76e1d79: import org.osgi.framework.Bundle;
1:76e1d79: import org.osgi.framework.FrameworkUtil;
1:76e1d79: 
1:76e1d79: public final class FelixWorker extends DefaultWorker implements FrameworkUtilWorker 
1:76e1d79: {
1:76e1d79:   private static Method getCurrentModuleMethod;
1:76e1d79:   private static Method getClassLoader;
1:4e71b0d:   private static Class<?> moduleClass;
1:76e1d79: 
1:76e1d79:   static {
1:76e1d79:     Bundle b = FrameworkUtil.getBundle(FelixWorker.class);
1:76e1d79:     try {
1:76e1d79:       getCurrentModuleMethod = b.getClass().getDeclaredMethod("getCurrentModule");
1:4e71b0d:       moduleClass = b.getClass().getClassLoader().loadClass("org.apache.felix.framework.ModuleImpl");
1:4e71b0d:       getClassLoader = moduleClass.getDeclaredMethod("getClassLoader");
1:76e1d79:       
1:76e1d79:       getCurrentModuleMethod.setAccessible(true);
1:76e1d79:       getClassLoader.setAccessible(true);
1:76e1d79:     } catch (SecurityException e) {
1:76e1d79:     } catch (NoSuchMethodException e) {
1:76e1d79:     } catch (IllegalArgumentException e) {
1:4e71b0d:     } catch (ClassNotFoundException e) {
1:76e1d79:     }
1:76e1d79:   }
1:76e1d79:   
1:76e1d79:   public ClassLoader getClassLoader(Bundle b) 
1:76e1d79:   {
1:76e1d79:     if (getCurrentModuleMethod != null) {
1:76e1d79:       try {
2:76e1d79:         Object result = getCurrentModuleMethod.invoke(b);
1:4e71b0d:         if (result != null && moduleClass.isInstance(result)) {
1:76e1d79:           Object cl = getClassLoader.invoke(result);
1:76e1d79:           
1:76e1d79:           if (cl instanceof ClassLoader) return (ClassLoader) cl;
1:76e1d79:         }
1:76e1d79:       } catch (IllegalArgumentException e) {
2:76e1d79:       } catch (IllegalAccessException e) {
2:76e1d79:       } catch (InvocationTargetException e) {
1:76e1d79:       }
1:76e1d79:     }
1:76e1d79:     return null;
1:76e1d79:   }
1:76e1d79: 
1:76e1d79:   public boolean isValid()
1:76e1d79:   {
1:4e71b0d:     return getCurrentModuleMethod != null && moduleClass != null && getClassLoader != null;
1:76e1d79:   }
1:76e1d79: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:4e71b0d
/////////////////////////////////////////////////////////////////////////
1:   private static Class<?> moduleClass;
1:       moduleClass = b.getClass().getClassLoader().loadClass("org.apache.felix.framework.ModuleImpl");
1:       getClassLoader = moduleClass.getDeclaredMethod("getClassLoader");
1:     } catch (ClassNotFoundException e) {
/////////////////////////////////////////////////////////////////////////
1:         if (result != null && moduleClass.isInstance(result)) {
/////////////////////////////////////////////////////////////////////////
1:     return getCurrentModuleMethod != null && moduleClass != null && getClassLoader != null;
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:76e1d79
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util.internal;
1: 
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.FrameworkUtil;
1: 
1: public final class FelixWorker extends DefaultWorker implements FrameworkUtilWorker 
1: {
1:   private static Method getCurrentModuleMethod;
1:   private static Method getClassLoader;
1: 
1:   static {
1:     Bundle b = FrameworkUtil.getBundle(FelixWorker.class);
1:     try {
1:       getCurrentModuleMethod = b.getClass().getDeclaredMethod("getCurrentModule");
1:       Object result = getCurrentModuleMethod.invoke(b);
0:       getClassLoader = result.getClass().getDeclaredMethod("getClassLoader");
1:       
1:       getCurrentModuleMethod.setAccessible(true);
1:       getClassLoader.setAccessible(true);
1:     } catch (SecurityException e) {
1:     } catch (NoSuchMethodException e) {
1:     } catch (IllegalArgumentException e) {
1:     } catch (IllegalAccessException e) {
1:     } catch (InvocationTargetException e) {
1:     }
1:   }
1:   
1:   public ClassLoader getClassLoader(Bundle b) 
1:   {
1:     if (getCurrentModuleMethod != null) {
1:       try {
1:         Object result = getCurrentModuleMethod.invoke(b);
0:         if (result != null) {
1:           Object cl = getClassLoader.invoke(result);
1:           
1:           if (cl instanceof ClassLoader) return (ClassLoader) cl;
1:         }
1:       } catch (IllegalArgumentException e) {
1:       } catch (IllegalAccessException e) {
1:       } catch (InvocationTargetException e) {
1:       }
1:     }
1:     return null;
1:   }
1: 
1:   public boolean isValid()
1:   {
0:     return getCurrentModuleMethod != null && getClassLoader != null;
1:   }
1: }
============================================================================