1:464dcf6: /*
1:464dcf6:  * Licensed to the Apache Software Foundation (ASF) under one
1:464dcf6:  * or more contributor license agreements.  See the NOTICE file
1:464dcf6:  * distributed with this work for additional information
1:464dcf6:  * regarding copyright ownership.  The ASF licenses this file
1:464dcf6:  * to you under the Apache License, Version 2.0 (the
1:464dcf6:  * "License"); you may not use this file except in compliance
1:464dcf6:  * with the License.  You may obtain a copy of the License at
1:464dcf6:  *
1:464dcf6:  *   http://www.apache.org/licenses/LICENSE-2.0
1:464dcf6:  *
1:464dcf6:  * Unless required by applicable law or agreed to in writing,
1:464dcf6:  * software distributed under the License is distributed on an
1:464dcf6:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:464dcf6:  * KIND, either express or implied.  See the License for the
1:464dcf6:  * specific language governing permissions and limitations
1:464dcf6:  * under the License.
1:464dcf6:  */
1:e9f9bca: package org.apache.aries.subsystem.scope.itests;
9:464dcf6: 
1:464dcf6: import static org.junit.Assert.assertEquals;
1:e9f9bca: import static org.junit.Assert.assertFalse;
1:464dcf6: import static org.junit.Assert.assertNotNull;
1:464dcf6: import static org.junit.Assert.assertTrue;
1:464dcf6: import static org.junit.Assert.fail;
1:5bdb2b8: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:464dcf6: import static org.ops4j.pax.exam.CoreOptions.options;
1:464dcf6: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:464dcf6: 
1:464dcf6: import java.net.URL;
1:464dcf6: import java.security.Permission;
1:464dcf6: import java.util.ArrayList;
1:464dcf6: import java.util.Collection;
1:464dcf6: import java.util.List;
1:464dcf6: import java.util.Map;
1:464dcf6: 
1:5bdb2b8: import org.apache.aries.itest.AbstractIntegrationTest;
1:464dcf6: import org.apache.aries.subsystem.example.helloIsolation.HelloIsolation;
1:464dcf6: import org.apache.aries.subsystem.scope.InstallInfo;
1:464dcf6: import org.apache.aries.subsystem.scope.Scope;
1:464dcf6: import org.apache.aries.subsystem.scope.ScopeUpdate;
1:464dcf6: import org.apache.aries.subsystem.scope.SharePolicy;
1:464dcf6: import org.junit.After;
1:5bdb2b8: import org.junit.Ignore;
1:5bdb2b8: import org.ops4j.pax.exam.Configuration;
1:5bdb2b8: import org.ops4j.pax.exam.CoreOptions;
1:464dcf6: import org.ops4j.pax.exam.Option;
1:464dcf6: import org.osgi.framework.Bundle;
1:464dcf6: import org.osgi.framework.BundleContext;
1:464dcf6: import org.osgi.framework.Filter;
1:464dcf6: import org.osgi.framework.FrameworkUtil;
1:464dcf6: import org.osgi.framework.PackagePermission;
1:464dcf6: import org.osgi.framework.ServiceReference;
1:e9f9bca: import org.osgi.framework.wiring.BundleRevision;
1:464dcf6: import org.osgi.service.condpermadmin.ConditionInfo;
1:464dcf6: import org.osgi.service.condpermadmin.ConditionalPermissionAdmin;
1:464dcf6: import org.osgi.service.condpermadmin.ConditionalPermissionInfo;
1:464dcf6: import org.osgi.service.condpermadmin.ConditionalPermissionUpdate;
1:464dcf6: import org.osgi.service.permissionadmin.PermissionInfo;
1:464dcf6: import org.osgi.util.tracker.BundleTracker;
1:464dcf6: 
1:5bdb2b8: @Ignore
1:5bdb2b8: public class ScopeSecurityTest extends AbstractTest {
1:464dcf6: 
1:464dcf6:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:464dcf6:      * are created in the paxweb temp directory, and not in the svn tree 
1:464dcf6:      */
1:464dcf6:     static boolean createdApplications = false;
1:464dcf6:     BundleTracker bt;
1:464dcf6:     int addEventCount;
1:464dcf6:     int modifyEventCount;
1:464dcf6:     int removeEventCount;
1:464dcf6:     private final static PermissionInfo[] adminAllowInfo = {
1:a7e0349:         new PermissionInfo("java.security.AllPermission", "*", "*"),
1:464dcf6:         new PermissionInfo("java.lang.RuntimePermission", "loadLibrary.*", "*"),
1:464dcf6:         new PermissionInfo("java.lang.RuntimePermission", "queuePrintJob", "*"),
1:464dcf6:         new PermissionInfo("java.net.SocketPermission", "*", "connect"),
1:464dcf6:         new PermissionInfo("java.util.PropertyPermission", "*", "read"),
1:464dcf6:         new PermissionInfo("org.osgi.framework.PackagePermission", "*", "exportonly,import"),
1:464dcf6:         new PermissionInfo("org.osgi.framework.ServicePermission", "*", "get,register"),
1:a7e0349:         new PermissionInfo("org.osgi.framework.AdminPermission", "*", "execute,resolve"),
1:464dcf6:     };
1:464dcf6:     
1:464dcf6:     @After
1:464dcf6:     public void tearDown() throws Exception {
1:464dcf6:         if (bt != null) {
1:464dcf6:             bt.close();
3:464dcf6:         }
1:464dcf6:     }
1:464dcf6:     
1:464dcf6:     //@Test
1:464dcf6:     public void testScopeSecurityWithServiceIsolation() throws Exception {
1:5bdb2b8:         ScopeUpdate su = scope.newScopeUpdate();
1:464dcf6:         
1:464dcf6:         ScopeUpdate childScopeUpdate = su.newChild("scope_test1");
1:464dcf6:         
1:464dcf6:         // build up installInfo object for the scope
1:e9f9bca:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.4-SNAPSHOT"));
1:e9f9bca:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.4-SNAPSHOT"));
1:464dcf6: 
1:464dcf6:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:464dcf6:         bundlesToInstall.add(info1);
1:464dcf6:         bundlesToInstall.add(info2);
1:464dcf6:         
1:464dcf6:         // add bundles to be installed, based on subsystem content
1:464dcf6:         su.commit();
1:464dcf6: 
1:464dcf6:         // start all bundles in the scope scope_test1
1:464dcf6:         Collection<Bundle> bundlesToStart = childScopeUpdate.getBundles();
1:464dcf6:         for (Bundle b : bundlesToStart) {
1:464dcf6:             b.start();
1:464dcf6:             
1:464dcf6:         }
1:464dcf6:         
3:464dcf6:         try {
1:464dcf6:             ServiceReference sr = bundleContext.getServiceReference("org.apache.aries.subsystem.example.helloIsolation.HelloIsolation");
1:464dcf6:             fail("should not be able to get the sr for HelloIsolation service");
3:464dcf6:         } catch (Exception ex) {
1:464dcf6:             // expected 
1:464dcf6:         } catch (Error er) {
1:464dcf6:             // expected
1:464dcf6:         }
1:464dcf6:         
1:464dcf6:         // test bundle find hooks
1:464dcf6:         Bundle[] bundles = bundleContext.getBundles();
1:464dcf6:         for (Bundle b : bundles) {
1:464dcf6:             System.out.println("Bundle is " + b.getBundleId() + ": " + b.getSymbolicName());
1:464dcf6:             if (b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolation") > -1) {
1:464dcf6:                 fail("bundles with name starts with org.apache.aries.subsystem.example.helloIsolation should be in a different scope");
1:464dcf6:             }
1:464dcf6:         }
1:464dcf6:         
1:464dcf6:         // test bundle service find hook
1:464dcf6:         //ServiceReference sr = bundleContext.getServiceReference(HelloIsolation.class.getName());
1:464dcf6:         //assertNull("sr should be null", sr);
1:5bdb2b8:         Collection<Scope> children = scope.getChildren();
1:464dcf6:         assertEquals(1, children.size());
1:464dcf6:         
1:464dcf6:         for (Scope child : children) {
1:464dcf6:             if (child.getName().equals("scope_test1")) {
1:464dcf6:                 Collection<Bundle> buns = child.getBundles();
1:464dcf6:                 assertEquals(2, buns.size());
1:464dcf6:                 assertEquals(0, child.getChildren().size());
1:464dcf6:                 BundleContext childScopebundleContext = null;
1:464dcf6: 
1:464dcf6:                 for (Bundle b : buns) {
1:464dcf6:                     assertTrue(b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolation") > -1);
1:464dcf6:                     if (b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolationRef") > -1) {
1:464dcf6:                         childScopebundleContext = b.getBundleContext();
1:464dcf6:                     }
1:464dcf6: 
1:464dcf6:                 }
1:464dcf6:                 assertNotNull(childScopebundleContext);
1:464dcf6:                 ServiceReference sr = childScopebundleContext.getServiceReference("org.apache.aries.subsystem.example.helloIsolation.HelloIsolation");
1:464dcf6:                 assertNotNull("sr is not null", sr);
1:464dcf6:                 System.out.println("got the sr, go get service next");
1:464dcf6:                 Object obj = childScopebundleContext.getService(sr);
1:464dcf6:                 //HelloIsolation hi = (HelloIsolation)childScopebundleContext.getService(sr);
1:464dcf6:                 
1:464dcf6:             }
1:464dcf6:         }
1:464dcf6:         
1:464dcf6:         // install a test bundle in the root scope
1:464dcf6:         URL url = new URL("mvn:org.apache.felix/org.apache.felix.fileinstall/2.0.8");
1:464dcf6:         bundleContext.installBundle("org.apache.felix.fileinstall-rootScope", url.openStream());
1:464dcf6:         
1:464dcf6:         // remove child scope
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca:         Collection<ScopeUpdate> scopes = su.getChildren();
1:464dcf6:         
1:464dcf6:         // obtain child scope admin from service registry
1:e9f9bca: //        String filter = "ScopeName=scope_test1";
1:e9f9bca:         Scope childScopeAdmin = childScopeUpdate.getScope();
1:5bdb2b8:         assertEquals(scope, childScopeAdmin.getParent());
1:e9f9bca:         scopes.remove(childScopeUpdate);
1:464dcf6:         su.commit();
1:464dcf6:         
1:5bdb2b8:         assertFalse(scope.getChildren().contains(childScopeAdmin));
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca:         assertFalse(su.getChildren().contains(childScopeUpdate));
1:e9f9bca:         
1:e9f9bca: //        childScopeAdmin = null;
1:e9f9bca: //        try {
1:e9f9bca: //            childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1:e9f9bca: //        } catch (Exception ex) {
1:e9f9bca: //            // ignore
1:e9f9bca: //        }
1:e9f9bca: //        assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:e9f9bca:         
1:464dcf6:     }
1:464dcf6:     
1:e9f9bca:     //@Test
1:464dcf6:     public void testScopeSecurityWithServiceShared() throws Exception {
1:464dcf6:         
1:464dcf6:         SecurityManager security = System.getSecurityManager();
1:464dcf6:         assertNotNull("Security manager should not be null", security);
1:464dcf6:        
1:464dcf6:         Bundle[] bundles = bundleContext.getBundles();
1:464dcf6:         
1:464dcf6:         for (Bundle b : bundles) {
1:5bdb2b8:             // set up condition permission for scope
1:464dcf6:             if (b.getSymbolicName().indexOf("subsystem.scope.impl") > -1) {
1:464dcf6:                 ServiceReference permRef = bundleContext.getServiceReference(ConditionalPermissionAdmin.class.getName());
1:464dcf6: 
1:464dcf6:                 ConditionalPermissionAdmin permAdmin = (ConditionalPermissionAdmin) bundleContext.getService(permRef);
1:464dcf6:                 ConditionalPermissionUpdate update = permAdmin.newConditionalPermissionUpdate();
1:464dcf6: 
1:464dcf6:                 List<ConditionalPermissionInfo> infos = update.getConditionalPermissionInfos();
1:464dcf6:                 //infos.clear();
1:464dcf6: 
1:464dcf6:                 // set up the conditionInfo
1:464dcf6:                 ConditionInfo[] conditionInfo = new ConditionInfo[] {new ConditionInfo("org.osgi.service.condpermadmin.BundleLocationCondition", new String[]{b.getLocation()})}; 
1:464dcf6:                 // Set up permissions which are common to all applications
1:464dcf6:                 infos.add(permAdmin.newConditionalPermissionInfo(null, conditionInfo, adminAllowInfo, "allow"));
1:a7e0349:                 update.commit();
1:464dcf6:             }
1:464dcf6:             
1:464dcf6:         }
1:464dcf6:         
1:5bdb2b8:         ScopeUpdate su = scope.newScopeUpdate();
1:464dcf6:         
1:464dcf6:         ScopeUpdate childScopeUpdate = su.newChild("scope_test1");
1:464dcf6:         
1:464dcf6:         Map<String, List<SharePolicy>> sharePolicies = childScopeUpdate.getSharePolicies(SharePolicy.TYPE_EXPORT);
1:464dcf6:         final Filter filter1 = FrameworkUtil.createFilter(
1:464dcf6:                 "(&" + 
1:464dcf6:                   "(osgi.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:464dcf6:                 ")");
1:464dcf6:         final Filter filter2 = FrameworkUtil.createFilter(
1:464dcf6:                 "(&" + 
1:464dcf6:                   "(osgi.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:464dcf6:                 ")");
1:e9f9bca:         List<SharePolicy> packagePolicies = sharePolicies.get(BundleRevision.PACKAGE_NAMESPACE);
1:464dcf6:         if (packagePolicies == null) {
1:464dcf6:             packagePolicies = new ArrayList<SharePolicy>();
1:e9f9bca:             sharePolicies.put(BundleRevision.PACKAGE_NAMESPACE, packagePolicies);
1:464dcf6:         }
1:e9f9bca:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, BundleRevision.PACKAGE_NAMESPACE, filter1));
1:e9f9bca:         List<SharePolicy> servicePolicies = sharePolicies.get("scope.share.service");
1:464dcf6:         if (servicePolicies == null) {
1:464dcf6:             servicePolicies = new ArrayList<SharePolicy>();
1:e9f9bca:             sharePolicies.put("scope.share.service", servicePolicies);
1:464dcf6:         }
1:e9f9bca:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, "scope.share.service", filter2));
1:464dcf6: 
1:464dcf6:         // build up installInfo object for the scope
1:e9f9bca:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.4-SNAPSHOT"));
1:e9f9bca:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.4-SNAPSHOT"));
1:464dcf6: 
1:464dcf6:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:464dcf6:         bundlesToInstall.add(info1);
1:464dcf6:         bundlesToInstall.add(info2);
1:464dcf6:         
1:464dcf6:         // add bundles to be installed, based on subsystem content
1:464dcf6:         su.commit();
1:464dcf6:         
1:464dcf6:         // start all bundles in the scope scope_test1
1:464dcf6:         Collection<Bundle> bundlesToStart = childScopeUpdate.getBundles();
1:464dcf6:         for (Bundle b : bundlesToStart) {
1:464dcf6:             b.start();
1:464dcf6:             
1:464dcf6:         }
1:464dcf6:         
1:464dcf6:         try {
1:464dcf6:             ServiceReference sr = bundleContext.getServiceReference("org.apache.aries.subsystem.example.helloIsolation.HelloIsolation");
1:464dcf6:             fail("should not be able to get the sr for HelloIsolation service");
1:464dcf6:         } catch (Exception ex) {
1:464dcf6:             // expected 
1:464dcf6:         } catch (Error er) {
1:464dcf6:             // expected
1:464dcf6:         }
1:464dcf6:         
1:464dcf6:         // test bundle find hooks
1:464dcf6:         bundles = bundleContext.getBundles();
1:464dcf6:         for (Bundle b : bundles) {
1:464dcf6:             System.out.println("Bundle is " + b.getBundleId() + ": " + b.getSymbolicName());
1:464dcf6:             if (b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolation") > -1) {
1:464dcf6:                 fail("bundles with name starts with org.apache.aries.subsystem.example.helloIsolation should be in a different scope");
1:464dcf6:             }
1:464dcf6:         }
1:464dcf6:         
1:464dcf6:         // test bundle service find hook
1:464dcf6:         //ServiceReference sr = bundleContext.getServiceReference(HelloIsolation.class.getName());
1:464dcf6:         //assertNull("sr should be null", sr);
1:5bdb2b8:         Collection<Scope> children = scope.getChildren();
1:464dcf6:         assertEquals(1, children.size());
1:464dcf6:         
1:464dcf6:         for (Scope child : children) {
1:464dcf6:             if (child.getName().equals("scope_test1")) {
1:464dcf6:                 Collection<Bundle> buns = child.getBundles();
1:464dcf6:                 assertEquals(2, buns.size());
1:464dcf6:                 assertEquals(0, child.getChildren().size());
1:464dcf6:                 BundleContext childScopebundleContext = null;
1:464dcf6: 
1:464dcf6:                 for (Bundle b : buns) {
1:464dcf6:                     assertTrue(b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolation") > -1);
1:464dcf6:                     if (b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolationRef") > -1) {
1:464dcf6:                         childScopebundleContext = b.getBundleContext();
1:464dcf6:                     }
1:464dcf6: 
1:464dcf6:                 }
1:464dcf6:                 assertNotNull(childScopebundleContext);
1:464dcf6:                 ServiceReference sr = childScopebundleContext.getServiceReference("org.apache.aries.subsystem.example.helloIsolation.HelloIsolation");
1:464dcf6:                 assertNotNull("sr is not null", sr);
1:464dcf6:                 System.out.println("got the sr, go get service next");
1:464dcf6:                 HelloIsolation hi = (HelloIsolation)childScopebundleContext.getService(sr);
1:464dcf6:                 hi.hello();
1:464dcf6:                 
1:464dcf6:                 Permission permission = new PackagePermission("*", PackagePermission.IMPORT);
1:464dcf6:                 hi.checkPermission(permission);
1:464dcf6:             }
1:464dcf6:         }
1:464dcf6:         
1:464dcf6:         // install a test bundle in the root scope
1:464dcf6:         URL url = new URL("mvn:org.apache.felix/org.apache.felix.fileinstall/2.0.8");
1:464dcf6:         bundleContext.installBundle("org.apache.felix.fileinstall-rootScope", url.openStream());
1:464dcf6:         
1:464dcf6:         // remove child scope
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca:         Collection<ScopeUpdate> scopes = su.getChildren();
1:464dcf6:         
1:464dcf6:         // obtain child scope admin from service registry
1:e9f9bca: //        String filter = "ScopeName=scope_test1";
1:e9f9bca:         Scope childScopeAdmin = childScopeUpdate.getScope();
1:5bdb2b8:         assertEquals(scope, childScopeAdmin.getParent());
1:e9f9bca:         scopes.remove(childScopeUpdate);
1:464dcf6:         su.commit();
1:464dcf6:         
1:5bdb2b8:         assertFalse(scope.getChildren().contains(childScopeAdmin));
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca:         assertFalse(su.getChildren().contains(childScopeUpdate));
1:464dcf6:         
1:e9f9bca: //        childScopeAdmin = null;
1:e9f9bca: //        try {
1:e9f9bca: //            childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1:e9f9bca: //        } catch (Exception ex) {
1:e9f9bca: //            // ignore
1:e9f9bca: //        }
1:e9f9bca: //        assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:464dcf6:         
1:464dcf6:     }
1:464dcf6:     
1:464dcf6:    
1:5bdb2b8:     @Configuration
1:5bdb2b8:     public Option[] configuration() {
1:5bdb2b8:         return options(
1:5bdb2b8:         	baseOptions(),
1:464dcf6: 
1:464dcf6:             // Bundles
1:464dcf6:             mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
1:464dcf6:             mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
1:464dcf6:             mavenBundle("org.apache.aries", "org.apache.aries.util"),
1:464dcf6:             mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
1:464dcf6:             mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
1:464dcf6:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.api"),
1:464dcf6:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.api"),
1:5bdb2b8:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.impl")
1:464dcf6: 
1:464dcf6:             // uncomment the following line if you want to turn on security.  the policy file can be found in src/test/resources dir and you want to update the value of -Djava.security.policy to 
1:464dcf6:             // the exact location of the policy file.
1:a7e0349:             //org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Declipse.security=osgi -Djava.security.policy=/policy"),
1:464dcf6:         );
1:464dcf6:     }
1:464dcf6: 
1:464dcf6:    
1:464dcf6: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:5bdb2b8
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.itest.AbstractIntegrationTest;
1: import org.junit.Ignore;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.CoreOptions;
/////////////////////////////////////////////////////////////////////////
1: @Ignore
1: public class ScopeSecurityTest extends AbstractTest {
/////////////////////////////////////////////////////////////////////////
1:         ScopeUpdate su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:         Collection<Scope> children = scope.getChildren();
/////////////////////////////////////////////////////////////////////////
1:         su = scope.newScopeUpdate();
1:         assertEquals(scope, childScopeAdmin.getParent());
1:         assertFalse(scope.getChildren().contains(childScopeAdmin));
1:         su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:             // set up condition permission for scope
/////////////////////////////////////////////////////////////////////////
1:         ScopeUpdate su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:         Collection<Scope> children = scope.getChildren();
/////////////////////////////////////////////////////////////////////////
1:         su = scope.newScopeUpdate();
1:         assertEquals(scope, childScopeAdmin.getParent());
1:         assertFalse(scope.getChildren().contains(childScopeAdmin));
1:         su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:     @Configuration
1:     public Option[] configuration() {
1:         return options(
1:         	baseOptions(),
/////////////////////////////////////////////////////////////////////////
1:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.impl")
author:Graham Charters
-------------------------------------------------------------------------------
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.scope.itests;
1: import static org.junit.Assert.assertFalse;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleRevision;
/////////////////////////////////////////////////////////////////////////
0:         Scope scopeAdmin = getOsgiService(Scope.class);
/////////////////////////////////////////////////////////////////////////
1:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.4-SNAPSHOT"));
1:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.4-SNAPSHOT"));
/////////////////////////////////////////////////////////////////////////
0:         Collection<Scope> children = scopeAdmin.getChildren();
/////////////////////////////////////////////////////////////////////////
1:         Collection<ScopeUpdate> scopes = su.getChildren();
1: //        String filter = "ScopeName=scope_test1";
1:         Scope childScopeAdmin = childScopeUpdate.getScope();
0:         assertEquals(scopeAdmin, childScopeAdmin.getParent());
1:         scopes.remove(childScopeUpdate);
0:         assertFalse(scopeAdmin.getChildren().contains(childScopeAdmin));
0:         su = scopeAdmin.newScopeUpdate();
1:         assertFalse(su.getChildren().contains(childScopeUpdate));
1:         
1: //        childScopeAdmin = null;
1: //        try {
1: //            childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1: //        } catch (Exception ex) {
1: //            // ignore
1: //        }
1: //        assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:     //@Test
/////////////////////////////////////////////////////////////////////////
0:         Scope scopeAdmin = getOsgiService(Scope.class);
/////////////////////////////////////////////////////////////////////////
1:         List<SharePolicy> packagePolicies = sharePolicies.get(BundleRevision.PACKAGE_NAMESPACE);
1:             sharePolicies.put(BundleRevision.PACKAGE_NAMESPACE, packagePolicies);
1:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, BundleRevision.PACKAGE_NAMESPACE, filter1));
1:         List<SharePolicy> servicePolicies = sharePolicies.get("scope.share.service");
1:             sharePolicies.put("scope.share.service", servicePolicies);
1:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, "scope.share.service", filter2));
1:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.4-SNAPSHOT"));
1:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.4-SNAPSHOT"));
/////////////////////////////////////////////////////////////////////////
0:         Collection<Scope> children = scopeAdmin.getChildren();
/////////////////////////////////////////////////////////////////////////
1:         Collection<ScopeUpdate> scopes = su.getChildren();
1: //        String filter = "ScopeName=scope_test1";
1:         Scope childScopeAdmin = childScopeUpdate.getScope();
0:         assertEquals(scopeAdmin, childScopeAdmin.getParent());
1:         scopes.remove(childScopeUpdate);
0:         assertFalse(scopeAdmin.getChildren().contains(childScopeAdmin));
0:         su = scopeAdmin.newScopeUpdate();
1:         assertFalse(su.getChildren().contains(childScopeUpdate));
1:         
1: //        childScopeAdmin = null;
1: //        try {
1: //            childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1: //        } catch (Exception ex) {
1: //            // ignore
1: //        }
1: //        assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
/////////////////////////////////////////////////////////////////////////
0:             equinox().version("3.7.0.v20110221")
commit:c83680a
/////////////////////////////////////////////////////////////////////////
0:             equinox().version("3.7.0.v20101022")
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:ba3e773
/////////////////////////////////////////////////////////////////////////
0:         InstallInfo info1 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.3-SNAPSHOT"), "helloIsolation");
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-SNAPSHOT"), "helloIsolationRef");
/////////////////////////////////////////////////////////////////////////
0:         InstallInfo info1 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.3-SNAPSHOT"), "helloIsolation");
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-SNAPSHOT"), "helloIsolationRef");
author:Lin Sun
-------------------------------------------------------------------------------
commit:a7e0349
/////////////////////////////////////////////////////////////////////////
1:         new PermissionInfo("java.security.AllPermission", "*", "*"),
1:         new PermissionInfo("org.osgi.framework.AdminPermission", "*", "execute,resolve"),
/////////////////////////////////////////////////////////////////////////
1:                 update.commit();
/////////////////////////////////////////////////////////////////////////
1:             //org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Declipse.security=osgi -Djava.security.policy=/policy"),
commit:464dcf6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
1: import static org.ops4j.pax.exam.CoreOptions.options;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: 
0: import java.io.FileOutputStream;
0: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.security.Permission;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.example.helloIsolation.HelloIsolation;
1: import org.apache.aries.subsystem.scope.InstallInfo;
1: import org.apache.aries.subsystem.scope.Scope;
0: import org.apache.aries.subsystem.scope.ScopeAdmin;
1: import org.apache.aries.subsystem.scope.ScopeUpdate;
1: import org.apache.aries.subsystem.scope.SharePolicy;
0: import org.apache.aries.subsystem.scope.impl.ScopeAdminServiceFactory;
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.BundleEvent;
0: import org.osgi.framework.BundleException;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
0: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.PackagePermission;
1: import org.osgi.framework.ServiceReference;
0: import org.osgi.framework.wiring.Capability;
1: import org.osgi.service.condpermadmin.ConditionInfo;
1: import org.osgi.service.condpermadmin.ConditionalPermissionAdmin;
1: import org.osgi.service.condpermadmin.ConditionalPermissionInfo;
1: import org.osgi.service.condpermadmin.ConditionalPermissionUpdate;
1: import org.osgi.service.permissionadmin.PermissionInfo;
1: import org.osgi.util.tracker.BundleTracker;
0: import org.osgi.util.tracker.BundleTrackerCustomizer;
1: 
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class ScopeSecurityTest extends AbstractIntegrationTest {
1: 
1:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:      * are created in the paxweb temp directory, and not in the svn tree 
1:      */
1:     static boolean createdApplications = false;
1:     BundleTracker bt;
1:     int addEventCount;
1:     int modifyEventCount;
1:     int removeEventCount;
1:     private final static PermissionInfo[] adminAllowInfo = {
1:         new PermissionInfo("java.lang.RuntimePermission", "loadLibrary.*", "*"),
1:         new PermissionInfo("java.lang.RuntimePermission", "queuePrintJob", "*"),
1:         new PermissionInfo("java.net.SocketPermission", "*", "connect"),
1:         new PermissionInfo("java.util.PropertyPermission", "*", "read"),
1:         new PermissionInfo("org.osgi.framework.PackagePermission", "*", "exportonly,import"),
1:         new PermissionInfo("org.osgi.framework.ServicePermission", "*", "get,register"),
1:     };
1:     
1:     @After
1:     public void tearDown() throws Exception {
1:         if (bt != null) {
1:             bt.close();
1:         }
1:     }
1:     
1:     //@Test
1:     public void testScopeSecurityWithServiceIsolation() throws Exception {
0:         // make sure we are using a framework that provides composite admin service
0:         ScopeAdmin scopeAdmin = getOsgiService(ScopeAdmin.class);
0:         assertNotNull("scope admin should not be null", scopeAdmin);
0:         System.out.println("able to get scope admin service");
1:        
0:         ScopeUpdate su = scopeAdmin.newScopeUpdate();
1:         
1:         ScopeUpdate childScopeUpdate = su.newChild("scope_test1");
1:         
1:         // build up installInfo object for the scope
0:         InstallInfo info1 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.3-incubating-SNAPSHOT"), "helloIsolation");
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-incubating-SNAPSHOT"), "helloIsolationRef");
1: 
1:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:         bundlesToInstall.add(info1);
1:         bundlesToInstall.add(info2);
1:         
1:         // add bundles to be installed, based on subsystem content
1:         su.commit();
1: 
1:         // start all bundles in the scope scope_test1
1:         Collection<Bundle> bundlesToStart = childScopeUpdate.getBundles();
1:         for (Bundle b : bundlesToStart) {
1:             b.start();
1:             
1:         }
1:         
1:         try {
1:             ServiceReference sr = bundleContext.getServiceReference("org.apache.aries.subsystem.example.helloIsolation.HelloIsolation");
1:             fail("should not be able to get the sr for HelloIsolation service");
1:         } catch (Exception ex) {
1:             // expected 
1:         } catch (Error er) {
1:             // expected
1:         }
1:         
1:         // test bundle find hooks
1:         Bundle[] bundles = bundleContext.getBundles();
1:         for (Bundle b : bundles) {
1:             System.out.println("Bundle is " + b.getBundleId() + ": " + b.getSymbolicName());
1:             if (b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolation") > -1) {
1:                 fail("bundles with name starts with org.apache.aries.subsystem.example.helloIsolation should be in a different scope");
1:             }
1:         }
1:         
1:         // test bundle service find hook
1:         //ServiceReference sr = bundleContext.getServiceReference(HelloIsolation.class.getName());
1:         //assertNull("sr should be null", sr);
0:         Collection<Scope> children = scopeAdmin.getScope().getChildren();
1:         assertEquals(1, children.size());
1:         
1:         for (Scope child : children) {
1:             if (child.getName().equals("scope_test1")) {
1:                 Collection<Bundle> buns = child.getBundles();
1:                 assertEquals(2, buns.size());
1:                 assertEquals(0, child.getChildren().size());
1:                 BundleContext childScopebundleContext = null;
1: 
1:                 for (Bundle b : buns) {
1:                     assertTrue(b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolation") > -1);
1:                     if (b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolationRef") > -1) {
1:                         childScopebundleContext = b.getBundleContext();
1:                     }
1: 
1:                 }
1:                 assertNotNull(childScopebundleContext);
1:                 ServiceReference sr = childScopebundleContext.getServiceReference("org.apache.aries.subsystem.example.helloIsolation.HelloIsolation");
1:                 assertNotNull("sr is not null", sr);
1:                 System.out.println("got the sr, go get service next");
1:                 Object obj = childScopebundleContext.getService(sr);
1:                 //HelloIsolation hi = (HelloIsolation)childScopebundleContext.getService(sr);
1:                 
1:             }
1:         }
1:         
1:         // install a test bundle in the root scope
1:         URL url = new URL("mvn:org.apache.felix/org.apache.felix.fileinstall/2.0.8");
1:         bundleContext.installBundle("org.apache.felix.fileinstall-rootScope", url.openStream());
1:         
1:         // remove child scope
0:         su = scopeAdmin.newScopeUpdate();
0:         Collection<Scope> scopes = su.getToBeRemovedChildren();
1:         
1:         // obtain child scope admin from service registry
0:         String filter = "ScopeName=scope_test1";
0:         ScopeAdmin childScopeAdmin = getOsgiService(ScopeAdmin.class, filter, DEFAULT_TIMEOUT);
0:         assertEquals(scopeAdmin.getScope(), childScopeAdmin.getParentScope());
0:         scopes.add(childScopeAdmin.getScope());
1:         su.commit();
1:         
0:         childScopeAdmin = null;
1:         try {
0:             childScopeAdmin = getOsgiService(ScopeAdmin.class, filter, DEFAULT_TIMEOUT);
1:         } catch (Exception ex) {
0:             // ignore
1:         }
0:         assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:         
1:     }
1:     
0:     @Test
1:     public void testScopeSecurityWithServiceShared() throws Exception {
1:         
1:         SecurityManager security = System.getSecurityManager();
1:         assertNotNull("Security manager should not be null", security);
1:        
1:         Bundle[] bundles = bundleContext.getBundles();
1:         
1:         for (Bundle b : bundles) {
0:             // set up condition permission for scopeAdmin
1:             if (b.getSymbolicName().indexOf("subsystem.scope.impl") > -1) {
1:                 ServiceReference permRef = bundleContext.getServiceReference(ConditionalPermissionAdmin.class.getName());
1: 
1:                 ConditionalPermissionAdmin permAdmin = (ConditionalPermissionAdmin) bundleContext.getService(permRef);
1:                 ConditionalPermissionUpdate update = permAdmin.newConditionalPermissionUpdate();
1: 
1:                 List<ConditionalPermissionInfo> infos = update.getConditionalPermissionInfos();
1:                 //infos.clear();
1: 
1:                 // set up the conditionInfo
1:                 ConditionInfo[] conditionInfo = new ConditionInfo[] {new ConditionInfo("org.osgi.service.condpermadmin.BundleLocationCondition", new String[]{b.getLocation()})}; 
1:                 // Set up permissions which are common to all applications
1:                 infos.add(permAdmin.newConditionalPermissionInfo(null, conditionInfo, adminAllowInfo, "allow"));
1: 
1:             }
1:             
1:         }
1:         
0:         // make sure we are using a framework that provides composite admin service
0:         ScopeAdmin scopeAdmin = getOsgiService(ScopeAdmin.class);
0:         assertNotNull("scope admin should not be null", scopeAdmin);
0:         System.out.println("able to get scope admin service");
1:         
0:         ScopeUpdate su = scopeAdmin.newScopeUpdate();
1:         
1:         ScopeUpdate childScopeUpdate = su.newChild("scope_test1");
1:         
1:         Map<String, List<SharePolicy>> sharePolicies = childScopeUpdate.getSharePolicies(SharePolicy.TYPE_EXPORT);
1:         final Filter filter1 = FrameworkUtil.createFilter(
1:                 "(&" + 
1:                   "(osgi.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:                 ")");
1:         final Filter filter2 = FrameworkUtil.createFilter(
1:                 "(&" + 
1:                   "(osgi.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:                 ")");
0:         List<SharePolicy> packagePolicies = sharePolicies.get(Capability.PACKAGE_CAPABILITY);
1:         if (packagePolicies == null) {
1:             packagePolicies = new ArrayList<SharePolicy>();
0:             sharePolicies.put(Capability.PACKAGE_CAPABILITY, packagePolicies);
1:         }
0:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, Capability.PACKAGE_CAPABILITY, filter1));
0:         List<SharePolicy> servicePolicies = sharePolicies.get(ScopeAdminServiceFactory.SERVICE_CAPABILITY);
1:         if (servicePolicies == null) {
1:             servicePolicies = new ArrayList<SharePolicy>();
0:             sharePolicies.put(ScopeAdminServiceFactory.SERVICE_CAPABILITY, servicePolicies);
1:         }
0:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, ScopeAdminServiceFactory.SERVICE_CAPABILITY, filter2));
1: 
1:         // build up installInfo object for the scope
0:         InstallInfo info1 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.3-incubating-SNAPSHOT"), "helloIsolation");
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-incubating-SNAPSHOT"), "helloIsolationRef");
1: 
1:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:         bundlesToInstall.add(info1);
1:         bundlesToInstall.add(info2);
1:         
1:         // add bundles to be installed, based on subsystem content
1:         su.commit();
1:         
1:         // start all bundles in the scope scope_test1
1:         Collection<Bundle> bundlesToStart = childScopeUpdate.getBundles();
1:         for (Bundle b : bundlesToStart) {
1:             b.start();
1:             
1:         }
1:         
1:         try {
1:             ServiceReference sr = bundleContext.getServiceReference("org.apache.aries.subsystem.example.helloIsolation.HelloIsolation");
1:             fail("should not be able to get the sr for HelloIsolation service");
1:         } catch (Exception ex) {
1:             // expected 
1:         } catch (Error er) {
1:             // expected
1:         }
1:         
1:         // test bundle find hooks
1:         bundles = bundleContext.getBundles();
1:         for (Bundle b : bundles) {
1:             System.out.println("Bundle is " + b.getBundleId() + ": " + b.getSymbolicName());
1:             if (b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolation") > -1) {
1:                 fail("bundles with name starts with org.apache.aries.subsystem.example.helloIsolation should be in a different scope");
1:             }
1:         }
1:         
1:         // test bundle service find hook
1:         //ServiceReference sr = bundleContext.getServiceReference(HelloIsolation.class.getName());
1:         //assertNull("sr should be null", sr);
0:         Collection<Scope> children = scopeAdmin.getScope().getChildren();
1:         assertEquals(1, children.size());
1:         
1:         for (Scope child : children) {
1:             if (child.getName().equals("scope_test1")) {
1:                 Collection<Bundle> buns = child.getBundles();
1:                 assertEquals(2, buns.size());
1:                 assertEquals(0, child.getChildren().size());
1:                 BundleContext childScopebundleContext = null;
1: 
1:                 for (Bundle b : buns) {
1:                     assertTrue(b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolation") > -1);
1:                     if (b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolationRef") > -1) {
1:                         childScopebundleContext = b.getBundleContext();
1:                     }
1: 
1:                 }
1:                 assertNotNull(childScopebundleContext);
1:                 ServiceReference sr = childScopebundleContext.getServiceReference("org.apache.aries.subsystem.example.helloIsolation.HelloIsolation");
1:                 assertNotNull("sr is not null", sr);
1:                 System.out.println("got the sr, go get service next");
1:                 HelloIsolation hi = (HelloIsolation)childScopebundleContext.getService(sr);
1:                 hi.hello();
1:                 
1:                 Permission permission = new PackagePermission("*", PackagePermission.IMPORT);
1:                 hi.checkPermission(permission);
1:             }
1:         }
1:         
1:         // install a test bundle in the root scope
1:         URL url = new URL("mvn:org.apache.felix/org.apache.felix.fileinstall/2.0.8");
1:         bundleContext.installBundle("org.apache.felix.fileinstall-rootScope", url.openStream());
1:         
1:         // remove child scope
0:         su = scopeAdmin.newScopeUpdate();
0:         Collection<Scope> scopes = su.getToBeRemovedChildren();
1:         
1:         // obtain child scope admin from service registry
0:         String filter = "ScopeName=scope_test1";
0:         ScopeAdmin childScopeAdmin = getOsgiService(ScopeAdmin.class, filter, DEFAULT_TIMEOUT);
0:         assertEquals(scopeAdmin.getScope(), childScopeAdmin.getParentScope());
0:         scopes.add(childScopeAdmin.getScope());
1:         su.commit();
1:         
0:         childScopeAdmin = null;
1:         try {
0:             childScopeAdmin = getOsgiService(ScopeAdmin.class, filter, DEFAULT_TIMEOUT);
1:         } catch (Exception ex) {
0:             // ignore
1:         }
0:         assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:         
1:     }
1:     
1:    
0:     @org.ops4j.pax.exam.junit.Configuration
0:     public static Option[] configuration() {
0:         Option[] options = options(
0:             // Log
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:             // Felix Config Admin
0:             mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:             // Felix mvn url handler
0:             mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
1: 
0:             // this is how you set the default log level when using pax logging (logProfile)
0:             systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
1:             // Bundles
1:             mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
1:             mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
1:             mavenBundle("org.apache.aries", "org.apache.aries.util"),
1:             mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
1:             mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
1:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.api"),
1:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.api"),
0:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.impl"),
1: 
0:             //org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005 -Xorg.osgi.framework.security=osgi"),
1:             // uncomment the following line if you want to turn on security.  the policy file can be found in src/test/resources dir and you want to update the value of -Djava.security.policy to 
1:             // the exact location of the policy file.
0:             //org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005 -Declipse.security=osgi -Djava.security.policy=/policy"),
1: 
0:             PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
1: 
0:             equinox().version("3.7.0.v20100910")
1:         );
0:         options = updateOptions(options);
0:         return options;
1:     }
1: 
1:    
1: }
============================================================================