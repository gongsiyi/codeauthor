1:6572ee7: /*
1:6572ee7:  * Copyright 2014 The Apache Software Foundation.
1:6572ee7:  *
1:6572ee7:  * Licensed under the Apache License, Version 2.0 (the "License");
1:6572ee7:  * you may not use this file except in compliance with the License.
1:6572ee7:  * You may obtain a copy of the License at
1:6572ee7:  *
1:6572ee7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6572ee7:  *
1:6572ee7:  * Unless required by applicable law or agreed to in writing, software
1:6572ee7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6572ee7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6572ee7:  * See the License for the specific language governing permissions and
1:6572ee7:  * limitations under the License.
1:6572ee7:  */
1:6572ee7: package org.apache.aries.transaction.jms.internal;
4:6572ee7: 
1:6572ee7: import java.util.Dictionary;
1:6572ee7: import java.util.Hashtable;
1:6572ee7: 
1:6572ee7: import org.apache.aries.blueprint.NamespaceHandler;
1:6572ee7: import org.apache.xbean.blueprint.context.impl.XBeanNamespaceHandler;
1:6572ee7: import org.osgi.framework.BundleActivator;
1:6572ee7: import org.osgi.framework.BundleContext;
1:6572ee7: import org.slf4j.Logger;
1:6572ee7: import org.slf4j.LoggerFactory;
1:6572ee7: 
1:6572ee7: public class Activator implements BundleActivator {
1:b42c2dd:     private static final String JMS_NS_URI = "http://aries.apache.org/xmlns/transaction-jms/2.0";
1:6572ee7:     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class);
1:6572ee7: 
1:6572ee7:     @Override
1:6572ee7:     public void start(BundleContext context) throws Exception {
1:6572ee7:         // Expose blueprint namespace handler if xbean is present
2:6572ee7:         try {
1:b42c2dd:             Dictionary<String, Object> props = new Hashtable<String, Object>();
1:b42c2dd:             props.put("osgi.service.blueprint.namespace", JMS_NS_URI);
1:b42c2dd:             context.registerService(NamespaceHandler.class, jmsNamespaceHandler(context), props);
1:6572ee7:         } catch (NoClassDefFoundError e) {
1:6572ee7:             LOGGER.warn("Unable to register JMS blueprint namespace handler (xbean-blueprint not available).");
1:6572ee7:         } catch (Exception e) {
1:6572ee7:             LOGGER.error("Unable to register JMS blueprint namespace handler", e);
7:6572ee7:         }
1:6572ee7:     }
1:6572ee7: 
1:b42c2dd:     private NamespaceHandler jmsNamespaceHandler(BundleContext context) throws Exception {
1:b42c2dd:         return new XBeanNamespaceHandler(
1:b42c2dd:                 JMS_NS_URI,
1:b42c2dd:                 "org.apache.aries.transaction.jms.xsd",
1:b42c2dd:                 context.getBundle(),
1:b42c2dd:                 "META-INF/services/org/apache/xbean/spring/http/aries.apache.org/xmlns/transaction-jms/2.0"
1:b42c2dd:         );
1:b42c2dd:     }
1:b42c2dd: 
1:6572ee7:     @Override
1:6572ee7:     public void stop(BundleContext context) throws Exception {
1:6572ee7:     }
1:6572ee7: 
1:6572ee7: 
1:6572ee7: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:b42c2dd
/////////////////////////////////////////////////////////////////////////
1:     private static final String JMS_NS_URI = "http://aries.apache.org/xmlns/transaction-jms/2.0";
1:             Dictionary<String, Object> props = new Hashtable<String, Object>();
1:             props.put("osgi.service.blueprint.namespace", JMS_NS_URI);
1:             context.registerService(NamespaceHandler.class, jmsNamespaceHandler(context), props);
/////////////////////////////////////////////////////////////////////////
1:     private NamespaceHandler jmsNamespaceHandler(BundleContext context) throws Exception {
1:         return new XBeanNamespaceHandler(
1:                 JMS_NS_URI,
1:                 "org.apache.aries.transaction.jms.xsd",
1:                 context.getBundle(),
1:                 "META-INF/services/org/apache/xbean/spring/http/aries.apache.org/xmlns/transaction-jms/2.0"
1:         );
1:     }
1: 
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:6572ee7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright 2014 The Apache Software Foundation.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.transaction.jms.internal;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.xbean.blueprint.context.impl.XBeanNamespaceHandler;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.ServiceRegistration;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class Activator implements BundleActivator {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class);
1: 
0:     private ServiceRegistration nshReg;
1: 
1:     @Override
1:     public void start(BundleContext context) throws Exception {
1:         // Expose blueprint namespace handler if xbean is present
1:         try {
0:             nshReg = JmsNamespaceHandler.register(context);
1:         } catch (NoClassDefFoundError e) {
1:             LOGGER.warn("Unable to register JMS blueprint namespace handler (xbean-blueprint not available).");
1:         } catch (Exception e) {
1:             LOGGER.error("Unable to register JMS blueprint namespace handler", e);
1:         }
1:     }
1: 
1:     @Override
1:     public void stop(BundleContext context) throws Exception {
0:         if (nshReg != null) {
0:             safeUnregisterService(nshReg);
1:         }
1:     }
1: 
0:     static void safeUnregisterService(ServiceRegistration reg) {
0:         if (reg != null) {
1:             try {
0:                 reg.unregister();
0:             } catch (IllegalStateException e) {
0:                 //This can be safely ignored
1:             }
1:         }
1:     }
1: 
0:     static class JmsNamespaceHandler {
1: 
0:         public static ServiceRegistration register(BundleContext context) throws Exception {
0:             XBeanNamespaceHandler nsh = new XBeanNamespaceHandler(
0:                     "http://aries.apache.org/xmlns/transaction-jms/2.0",
0:                     "org.apache.aries.transaction.jms.xsd",
0:                     context.getBundle(),
0:                     "META-INF/services/org/apache/xbean/spring/http/aries.apache.org/xmlns/transaction-jms/2.0"
0:             );
0:             Dictionary<String, Object> props = new Hashtable<String, Object>();
0:             props.put("osgi.service.blueprint.namespace", "http://aries.apache.org/xmlns/transaction-jms/2.0");
0:             return context.registerService(NamespaceHandler.class.getName(), nsh, props);
1:         }
1:     }
1: }
============================================================================