1:09a7647: /*
1:09a7647:  * Licensed to the Apache Software Foundation (ASF) under one
1:09a7647:  * or more contributor license agreements.  See the NOTICE file
1:09a7647:  * distributed with this work for additional information
1:09a7647:  * regarding copyright ownership.  The ASF licenses this file
1:09a7647:  * to you under the Apache License, Version 2.0 (the
1:09a7647:  * "License"); you may not use this file except in compliance
1:09a7647:  * with the License.  You may obtain a copy of the License at
1:09a7647:  *
1:09a7647:  *   http://www.apache.org/licenses/LICENSE-2.0
1:09a7647:  *
1:09a7647:  * Unless required by applicable law or agreed to in writing,
1:09a7647:  * software distributed under the License is distributed on an
1:09a7647:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:09a7647:  * KIND, either express or implied.  See the License for the
1:09a7647:  * specific language governing permissions and limitations
1:09a7647:  * under the License.
1:09a7647:  */
1:09a7647: package org.apache.aries.blueprint.parser;
1:09a7647: 
1:09a7647: import java.io.IOException;
1:09a7647: import java.net.URI;
1:f117d81: import java.util.Map;
1:09a7647: import java.util.Set;
1:09a7647: 
1:09a7647: import javax.xml.validation.Schema;
1:09a7647: 
1:09a7647: import org.apache.aries.blueprint.NamespaceHandler;
1:09a7647: import org.xml.sax.SAXException;
1:09a7647: 
1:09a7647: /**
1:09a7647:  * Interface used to managed a set of namespace handlers
1:09a7647:  */
1:09a7647: public interface NamespaceHandlerSet {
1:09a7647: 
1:09a7647:     Set<URI> getNamespaces();
1:09a7647: 
1:09a7647:     boolean isComplete();
1:09a7647: 
1:09a7647:     /**
1:09a7647:      * Retrieve the NamespaceHandler to use for the given namespace
1:09a7647:      *
1:09a7647:      * @return the NamespaceHandler to use or <code>null</code> if none is available at this time
1:09a7647:      */
1:09a7647:     NamespaceHandler getNamespaceHandler(URI namespace);
1:09a7647: 
1:09a7647:     /**
1:09a7647:      * Obtain a schema to validate the XML for the given list of namespaces
1:09a7647:      *
1:09a7647:      * @return the schema to use to validate the XML
1:09a7647:      */
1:09a7647:     Schema getSchema() throws SAXException, IOException;
1:09a7647: 
1:09a7647:     /**
1:f117d81:      * Obtain a schema to validate the XML for the given list of namespaces
1:f117d81:      *
1:f117d81:      * @return the schema to use to validate the XML
1:f117d81:      */
1:f117d81:     Schema getSchema(Map<String, String> locations) throws SAXException, IOException;
1:f117d81: 
1:f117d81:     /**
1:09a7647:      * Add a new Listener to be called when namespace handlers are registerd or unregistered
1:09a7647:      *
1:09a7647:      * @param listener the listener to register
1:09a7647:      */
1:09a7647:     void addListener(Listener listener);
1:09a7647: 
1:09a7647:     /**
1:09a7647:      * Remove a previously registered Listener
1:09a7647:      *
1:09a7647:      * @param listener the listener to unregister
1:09a7647:      */
1:09a7647:     void removeListener(Listener listener);
1:09a7647: 
1:09a7647:     /**
1:09a7647:      * Destroy this handler set
1:09a7647:      */
1:09a7647:     void destroy();
1:09a7647:     
1:09a7647:     /**
1:09a7647:      * Interface used to listen to registered or unregistered namespace handlers.
1:09a7647:      *
1:09a7647:      * @see NamespaceHandlerSet#addListener(org.apache.aries.blueprint.container.NamespaceHandlerRegistry.Listener)
1:09a7647:      * @see NamespaceHandlerSet#removeListener(org.apache.aries.blueprint.container.NamespaceHandlerRegistry.Listener) 
1:09a7647:      */
1:09a7647:     public interface Listener {
1:09a7647: 
1:09a7647:         /**
1:09a7647:          * Called when a NamespaceHandler has been registered for the specified URI.
1:09a7647:          *
1:09a7647:          * @param uri the URI of the newly registered namespace handler
1:09a7647:          */
1:09a7647:         void namespaceHandlerRegistered(URI uri);
1:09a7647: 
1:09a7647:         /**
1:09a7647:          * Called when a NamespaceHandler has been unregistered for the specified URI.
1:09a7647:          *
1:09a7647:          * @param uri the URI of the newly unregistered namespace handler
1:09a7647:          */
1:09a7647:         void namespaceHandlerUnregistered(URI uri);
1:09a7647: 
1:09a7647:     }
1:09a7647: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f117d81
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:      * Obtain a schema to validate the XML for the given list of namespaces
1:      *
1:      * @return the schema to use to validate the XML
1:      */
1:     Schema getSchema(Map<String, String> locations) throws SAXException, IOException;
1: 
1:     /**
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.parser;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.Set;
1: 
1: import javax.xml.validation.Schema;
1: 
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.xml.sax.SAXException;
1: 
1: /**
1:  * Interface used to managed a set of namespace handlers
1:  */
1: public interface NamespaceHandlerSet {
1: 
1:     Set<URI> getNamespaces();
1: 
1:     boolean isComplete();
1: 
1:     /**
1:      * Retrieve the NamespaceHandler to use for the given namespace
1:      *
1:      * @return the NamespaceHandler to use or <code>null</code> if none is available at this time
1:      */
1:     NamespaceHandler getNamespaceHandler(URI namespace);
1: 
1:     /**
1:      * Obtain a schema to validate the XML for the given list of namespaces
1:      *
1:      * @return the schema to use to validate the XML
1:      */
1:     Schema getSchema() throws SAXException, IOException;
1: 
1:     /**
1:      * Add a new Listener to be called when namespace handlers are registerd or unregistered
1:      *
1:      * @param listener the listener to register
1:      */
1:     void addListener(Listener listener);
1: 
1:     /**
1:      * Remove a previously registered Listener
1:      *
1:      * @param listener the listener to unregister
1:      */
1:     void removeListener(Listener listener);
1: 
1:     /**
1:      * Destroy this handler set
1:      */
1:     void destroy();
1:     
1:     /**
1:      * Interface used to listen to registered or unregistered namespace handlers.
1:      *
1:      * @see NamespaceHandlerSet#addListener(org.apache.aries.blueprint.container.NamespaceHandlerRegistry.Listener)
1:      * @see NamespaceHandlerSet#removeListener(org.apache.aries.blueprint.container.NamespaceHandlerRegistry.Listener) 
1:      */
1:     public interface Listener {
1: 
1:         /**
1:          * Called when a NamespaceHandler has been registered for the specified URI.
1:          *
1:          * @param uri the URI of the newly registered namespace handler
1:          */
1:         void namespaceHandlerRegistered(URI uri);
1: 
1:         /**
1:          * Called when a NamespaceHandler has been unregistered for the specified URI.
1:          *
1:          * @param uri the URI of the newly unregistered namespace handler
1:          */
1:         void namespaceHandlerUnregistered(URI uri);
1: 
1:     }
1: }
============================================================================