1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.container.parser.impl;
6:2cfdf52: 
1:2cfdf52: import java.io.IOException;
1:2cfdf52: import java.io.InputStream;
1:2cfdf52: import java.net.URL;
1:2cfdf52: import java.util.ArrayList;
1:2cfdf52: import java.util.Collection;
1:2cfdf52: import java.util.Collections;
1:2cfdf52: import java.util.Dictionary;
1:2cfdf52: import java.util.HashSet;
1:2cfdf52: import java.util.Set;
1:2cfdf52: import java.util.jar.JarEntry;
1:2cfdf52: import java.util.jar.JarInputStream;
1:2cfdf52: 
1:2cfdf52: import javax.xml.parsers.SAXParser;
1:2cfdf52: import javax.xml.parsers.SAXParserFactory;
1:2cfdf52: 
1:2cfdf52: import org.osgi.framework.Bundle;
1:2cfdf52: import org.slf4j.Logger;
1:2cfdf52: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: /**
1:2cfdf52:  * This helper can be used to locate persistence.xml files in a bundle
1:2cfdf52:  */
1:2cfdf52: public class PersistenceUnitParser {
1:2cfdf52:     private static final String DEFAULT_PERSISTENCE_LOCATION = "META-INF/persistence.xml";
1:ec3ea65:     private static final Logger LOG = LoggerFactory.getLogger("org.apache.aries.jpa.container");
1:2cfdf52:     public static final String PERSISTENCE_UNIT_HEADER = "Meta-Persistence";
1:ec3ea65:     
1:ec3ea65:     private PersistenceUnitParser() {
1:ec3ea65:     }
1:2cfdf52: 
1:2cfdf52:     /**
1:2cfdf52:      * This method locates persistence descriptor files based on a combination of the default location
1:2cfdf52:      * "META-INF/persistence.xml" and the Meta-Persistence header. Note that getEntry is used to ensure we do
1:2cfdf52:      * not alter the state of the bundle Note also that web application bundles will never return persistence
1:2cfdf52:      * descriptors
1:2cfdf52:      * 
1:2cfdf52:      * @param bundle The bundle to search
1:465647f:      * @return persistence units located in the bundle
1:2cfdf52:      */
1:2cfdf52:     public static Collection<PersistenceUnit> getPersistenceUnits(Bundle bundle) {
1:2cfdf52:         Collection<PersistenceUnit> punits = new ArrayList<PersistenceUnit>();
1:2cfdf52:         Dictionary<String, String> headers = bundle.getHeaders();
1:2cfdf52:         String metaPersistence = headers.get(PERSISTENCE_UNIT_HEADER);
1:2cfdf52: 
1:2cfdf52:         Set<String> locations = new HashSet<String>();
1:2cfdf52:         if (metaPersistence == null) {
1:2cfdf52:             return punits;
10:2cfdf52:         }
1:2cfdf52: 
1:2cfdf52:         if (!metaPersistence.isEmpty()) {
1:2cfdf52:             // Split apart the header to get the individual entries
1:2cfdf52:             for (String s : metaPersistence.split(",")) {
1:2cfdf52:                 locations.add(s.trim());
1:2cfdf52:             }
1:2cfdf52:         }
1:2cfdf52:         
1:2cfdf52:         if (!locations.contains(DEFAULT_PERSISTENCE_LOCATION)) {
1:2cfdf52:             locations.add(DEFAULT_PERSISTENCE_LOCATION);
1:2cfdf52:         }
1:2cfdf52: 
1:2cfdf52:         // Find the file and add it to our list
1:2cfdf52:         for (String location : locations) {
1:2cfdf52:             try {
1:2cfdf52:                 InputStream is = locateFile(bundle, location);
1:2cfdf52:                 if (is != null) {
1:ec3ea65:                     parse(bundle, is, punits);
1:2cfdf52:                 }
1:2cfdf52:             } catch (Exception e) {
1:ec3ea65:                 LOG.error("exception.while.locating.descriptor", e);
1:2cfdf52:                 return Collections.emptySet();
1:2cfdf52:             }
1:2cfdf52:         }
1:2cfdf52:         
1:2cfdf52:         return punits;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     private static void parse(Bundle bundle, InputStream is, Collection<PersistenceUnit> punits) {
1:2cfdf52:         SAXParserFactory parserFactory = SAXParserFactory.newInstance();
1:2cfdf52:         try {
1:2cfdf52:             SAXParser parser = parserFactory.newSAXParser();
1:2cfdf52:             JPAHandler handler = new JPAHandler(bundle);
1:2cfdf52:             parser.parse(is, handler);
1:2cfdf52:             punits.addAll(handler.getPersistenceUnits());
1:2cfdf52:         } catch (Exception e) {
1:ec3ea65:             throw new RuntimeException("Error parsing persistence unit in bundle " + bundle.getSymbolicName(), e); // NOSONAR
1:2cfdf52:         } finally {
1:2cfdf52:             safeClose(is);
1:4bdeaa0:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private static void safeClose(InputStream is) {
1:2cfdf52:         if (is != null) {
1:2cfdf52:             try {
1:2cfdf52:                 is.close();
1:2cfdf52:             } catch (IOException e) {
1:ec3ea65:                 LOG.debug("Exception while closing", e);
1:2cfdf52:             }
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     /**
1:2cfdf52:      * Locate a persistence descriptor file in a bundle based on a String name.
1:2cfdf52:      * 
1:465647f:      * @param bundle to look in
1:465647f:      * @param location location in bundle
1:2cfdf52:      * @throws IOException
1:2cfdf52:      */
1:2cfdf52:     private static InputStream locateFile(Bundle bundle, String location) throws IOException {
1:2cfdf52:         // There is nothing for an empty location
1:2cfdf52:         if ("".equals(location)) {
1:2cfdf52:             return null;
1:2cfdf52:         }
1:2cfdf52: 
1:2cfdf52:         // If there is a '!' then we have to look in a jar
1:2cfdf52:         int bangIndex = location.indexOf('!');
1:2cfdf52:         if (bangIndex == -1) {
1:2cfdf52:             URL url = bundle.getEntry(location);
1:2cfdf52: 
1:2cfdf52:             if (url != null) {
1:ec3ea65:                 return url.openStream();
1:ec3ea65:             }
1:ec3ea65:         } else {
1:ec3ea65:             URL url = bundle.getEntry(location.substring(0, bangIndex));
1:ec3ea65:             if (url != null) {
1:2cfdf52:                 String toLocate = location.substring(bangIndex + 2);
1:ec3ea65:                 return locateInJar(url, toLocate);
1:ec3ea65:             }
1:2cfdf52:         }
1:ec3ea65:         return null;
1:2cfdf52:     }
1:ec3ea65: 
1:ec3ea65:     private static InputStream locateInJar(URL url, String toLocate) throws IOException {
1:ec3ea65:         JarInputStream jis = new JarInputStream(url.openStream());
1:ec3ea65:         JarEntry entry = jis.getNextJarEntry();
1:ec3ea65: 
1:ec3ea65:         while (entry != null) {
1:ec3ea65:             if (entry.getName().equals(toLocate)) {
1:ec3ea65:                 return jis;
1:ec3ea65:             }
1:ec3ea65:             entry = jis.getNextJarEntry();
1:ec3ea65:         }
1:ec3ea65:         return null;
1:2cfdf52:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:465647f
/////////////////////////////////////////////////////////////////////////
1:      * @return persistence units located in the bundle
/////////////////////////////////////////////////////////////////////////
1:      * @param bundle to look in
1:      * @param location location in bundle
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger("org.apache.aries.jpa.container");
1:     
1:     private PersistenceUnitParser() {
1:     }
/////////////////////////////////////////////////////////////////////////
1:                     parse(bundle, is, punits);
1:                 LOG.error("exception.while.locating.descriptor", e);
/////////////////////////////////////////////////////////////////////////
1:     private static void parse(Bundle bundle, InputStream is, Collection<PersistenceUnit> punits) {
/////////////////////////////////////////////////////////////////////////
1:             throw new RuntimeException("Error parsing persistence unit in bundle " + bundle.getSymbolicName(), e); // NOSONAR
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Exception while closing", e);
/////////////////////////////////////////////////////////////////////////
1:                 return url.openStream();
1:             }
1:         } else {
1:             URL url = bundle.getEntry(location.substring(0, bangIndex));
1:             if (url != null) {
1:                 return locateInJar(url, toLocate);
1:         return null;
1:     }
1: 
1:     private static InputStream locateInJar(URL url, String toLocate) throws IOException {
1:         JarInputStream jis = new JarInputStream(url.openStream());
1:         JarEntry entry = jis.getNextJarEntry();
1: 
1:         while (entry != null) {
1:             if (entry.getName().equals(toLocate)) {
1:                 return jis;
1:             }
1:             entry = jis.getNextJarEntry();
1:         }
1:         return null;
commit:f2e057e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4bdeaa0
/////////////////////////////////////////////////////////////////////////
0:             for (PersistenceUnit punit : punits) {
0:                 validate(punit);
1:             }
/////////////////////////////////////////////////////////////////////////
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.parser.impl;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Dictionary;
1: import java.util.HashSet;
1: import java.util.Set;
1: import java.util.jar.JarEntry;
1: import java.util.jar.JarInputStream;
1: 
0: import javax.persistence.spi.PersistenceUnitTransactionType;
1: import javax.xml.parsers.SAXParser;
1: import javax.xml.parsers.SAXParserFactory;
1: 
1: import org.osgi.framework.Bundle;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * This helper can be used to locate persistence.xml files in a bundle
1:  */
1: public class PersistenceUnitParser {
1:     private static final String DEFAULT_PERSISTENCE_LOCATION = "META-INF/persistence.xml";
0:     private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.jpa.container");
1:     public static final String PERSISTENCE_UNIT_HEADER = "Meta-Persistence";
1: 
1:     /**
1:      * This method locates persistence descriptor files based on a combination of the default location
1:      * "META-INF/persistence.xml" and the Meta-Persistence header. Note that getEntry is used to ensure we do
1:      * not alter the state of the bundle Note also that web application bundles will never return persistence
1:      * descriptors
0:      * @param context 
1:      * 
1:      * @param bundle The bundle to search
0:      * @param packageAdmin 
0:      * @return
1:      */
1:     public static Collection<PersistenceUnit> getPersistenceUnits(Bundle bundle) {
1:         Collection<PersistenceUnit> punits = new ArrayList<PersistenceUnit>();
1:         Dictionary<String, String> headers = bundle.getHeaders();
1:         String metaPersistence = headers.get(PERSISTENCE_UNIT_HEADER);
1: 
1:         Set<String> locations = new HashSet<String>();
1:         if (metaPersistence == null) {
1:             return punits;
1:         }
1: 
1:         if (!metaPersistence.isEmpty()) {
1:             // Split apart the header to get the individual entries
1:             for (String s : metaPersistence.split(",")) {
1:                 locations.add(s.trim());
1:             }
1:         }
1:         
1:         if (!locations.contains(DEFAULT_PERSISTENCE_LOCATION)) {
1:             locations.add(DEFAULT_PERSISTENCE_LOCATION);
1:         }
1: 
1:         // Find the file and add it to our list
1:         for (String location : locations) {
1:             try {
1:                 InputStream is = locateFile(bundle, location);
1:                 if (is != null) {
0:                     parse(bundle, location, is, punits);
1:                 }
1:             } catch (Exception e) {
0:                 _logger.error("exception.while.locating.descriptor", e);
1:                 return Collections.emptySet();
1:             }
1:         }
1:         
1:         return punits;
1:     }
1: 
0:     private static void parse(Bundle bundle, String location, InputStream is, Collection<PersistenceUnit> punits) {
1:         SAXParserFactory parserFactory = SAXParserFactory.newInstance();
1:         try {
1:             SAXParser parser = parserFactory.newSAXParser();
1:             JPAHandler handler = new JPAHandler(bundle);
1:             parser.parse(is, handler);
1:             punits.addAll(handler.getPersistenceUnits());
0: //            for (PersistenceUnit punit : punits) {
0:                 //validate(punit);
0: //            }
1:         } catch (Exception e) {
0:             throw new RuntimeException("persistence.description.parse.error", e);
1:         } finally {
1:             safeClose(is);
1:         }
1:     }
1: 
0:     private static void validate(PersistenceUnit punit) {
0:         if (punit.getTransactionType() == null) {
0:             throw new IllegalArgumentException("No transaction type specified for persistence unit " + punit.getName());
1:         }
0:         if (punit.getTransactionType() == PersistenceUnitTransactionType.JTA) {
0:             if (punit.getJtaDataSourceName() == null) {
0:                 throw new IllegalArgumentException("Must specify jta-data-source for persistence unit " + punit.getName());
1:             }
1:         }
0:         if (punit.getTransactionType() == PersistenceUnitTransactionType.RESOURCE_LOCAL) {
0:             if (punit.getNonJtaDataSourceName() == null) {
0:                 throw new IllegalArgumentException("Must specify non-jta-data-source for persistence unit " + punit.getName());
1:             }
1:         }
1:     }
1: 
1:     private static void safeClose(InputStream is) {
1:         if (is != null) {
1:             try {
1:                 is.close();
1:             } catch (IOException e) {
0:                 // No logging necessary, just consume
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Locate a persistence descriptor file in a bundle based on a String name.
1:      * 
0:      * @param bundle
0:      * @param persistenceXmlFiles
0:      * @param jarLocation
1:      * @throws IOException
1:      */
1:     private static InputStream locateFile(Bundle bundle, String location) throws IOException {
1:         // There is nothing for an empty location
0:         InputStream is = null;
1:         if ("".equals(location)) {
1:             return null;
1:         }
1: 
1:         // If there is a '!' then we have to look in a jar
1:         int bangIndex = location.indexOf('!');
0:         // No '!', getEntry will do
1:         if (bangIndex == -1) {
1:             URL url = bundle.getEntry(location);
1: 
0:             if (url != null)
0:                 is = url.openStream();
1: 
0:         } else {
0:             // There was a '!', find the jar
0:             URL url = bundle.getEntry(location.substring(0, bangIndex));
1: 
1:             if (url != null) {
0:                 // Remember to trim off the "!/"
1:                 String toLocate = location.substring(bangIndex + 2);
1: 
0:                 @SuppressWarnings("resource")
0:                 JarInputStream jis = new JarInputStream(url.openStream());
0:                 JarEntry entry = jis.getNextJarEntry();
1: 
0:                 while (entry != null) {
0:                     if (entry.getName().equals(toLocate)) {
0:                         is = jis;
0:                         break;
1:                     }
0:                     entry = jis.getNextJarEntry();
1:                 }
1:             }
1:         }
0:         return is;
1:     }
1: }
============================================================================