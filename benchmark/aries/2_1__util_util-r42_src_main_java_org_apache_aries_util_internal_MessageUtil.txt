1:1409552: /*
1:1409552:  * Licensed to the Apache Software Foundation (ASF) under one
1:1409552:  * or more contributor license agreements.  See the NOTICE file
1:1409552:  * distributed with this work for additional information
1:1409552:  * regarding copyright ownership.  The ASF licenses this file
1:1409552:  * to you under the Apache License, Version 2.0 (the
1:1409552:  * "License"); you may not use this file except in compliance
1:1409552:  * with the License.  You may obtain a copy of the License at
1:1409552:  *
1:1409552:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1409552:  *
1:1409552:  * Unless required by applicable law or agreed to in writing,
1:1409552:  * software distributed under the License is distributed on an
1:1409552:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:1409552:  * KIND, either express or implied.  See the License for the
1:1409552:  * specific language governing permissions and limitations
1:1409552:  * under the License.
1:1409552:  */
1:1409552: 
1:1409552: package org.apache.aries.util.internal;
1:1409552: 
1:1409552: import java.text.MessageFormat;
1:1409552: import java.util.ResourceBundle;
1:1409552: 
1:1409552: public class MessageUtil {
1:1409552:     /** The resource bundle for blueprint messages */
1:1409552:     private final static ResourceBundle messages = 
1:1409552:         ResourceBundle.getBundle("org.apache.aries.util.messages.UTILmessages");
1:1409552: 
1:1409552:     /**
1:1409552:      * Resolve a message from the bundle, including any necessary formatting.
1:1409552:      * 
1:1409552:      * @param key
1:1409552:      *            the message key.
1:1409552:      * @param inserts
1:1409552:      *            any required message inserts.
1:1409552:      * @return the message translated into the server local.
1:1409552:      */
1:1409552:     public static final String getMessage(String key, Object... inserts) {
1:1409552:         String msg = messages.getString(key);
1:1409552: 
1:1409552:         if (inserts.length > 0)
1:1409552:             msg = MessageFormat.format(msg, inserts);
1:1409552: 
1:1409552:         return msg;
1:1409552:     }
1:1409552: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:1409552
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.util.internal;
1: 
1: import java.text.MessageFormat;
1: import java.util.ResourceBundle;
1: 
1: public class MessageUtil {
1:     /** The resource bundle for blueprint messages */
1:     private final static ResourceBundle messages = 
1:         ResourceBundle.getBundle("org.apache.aries.util.messages.UTILmessages");
1: 
1:     /**
1:      * Resolve a message from the bundle, including any necessary formatting.
1:      * 
1:      * @param key
1:      *            the message key.
1:      * @param inserts
1:      *            any required message inserts.
1:      * @return the message translated into the server local.
1:      */
1:     public static final String getMessage(String key, Object... inserts) {
1:         String msg = messages.getString(key);
1: 
1:         if (inserts.length > 0)
1:             msg = MessageFormat.format(msg, inserts);
1: 
1:         return msg;
1:     }
1: }
============================================================================