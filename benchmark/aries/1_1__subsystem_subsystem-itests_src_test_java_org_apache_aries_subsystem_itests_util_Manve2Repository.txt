1:ad877b6: /*
1:ad877b6:  * Licensed to the Apache Software Foundation (ASF) under one
1:ad877b6:  * or more contributor license agreements.  See the NOTICE file
1:ad877b6:  * distributed with this work for additional information
1:ad877b6:  * regarding copyright ownership.  The ASF licenses this file
1:ad877b6:  * to you under the Apache License, Version 2.0 (the
1:ad877b6:  * "License"); you may not use this file except in compliance
1:ad877b6:  * with the License.  You may obtain a copy of the License at
1:ad877b6:  *
1:ad877b6:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ad877b6:  *
1:ad877b6:  * Unless required by applicable law or agreed to in writing,
1:ad877b6:  * software distributed under the License is distributed on an
1:ad877b6:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:ad877b6:  * KIND, either express or implied.  See the License for the
1:ad877b6:  * specific language governing permissions and limitations
1:ad877b6:  * under the License.
1:ad877b6:  */
1:ad877b6: 
1:ad877b6: package org.apache.aries.subsystem.itests.util;
1:ad877b6: 
1:ad877b6: import java.io.File;
1:ad877b6: import java.util.ArrayList;
1:ad877b6: import java.util.List;
1:ad877b6: import java.util.SortedSet;
1:ad877b6: import java.util.TreeSet;
1:ad877b6: 
1:ad877b6: public class Manve2Repository {
1:ad877b6: 
1:ad877b6:     private File rootFile;
1:ad877b6:     public Manve2Repository(File rootFile) {
1:ad877b6:         this.rootFile = rootFile;
1:ad877b6:     }
1:ad877b6:     // list jar files of the repository
1:ad877b6:     public SortedSet<String> listFiles() {
1:ad877b6:         SortedSet<String> artifacts = new TreeSet<String>();
1:ad877b6:         File[] groupIds = rootFile.listFiles();
1:ad877b6:         for (int i = 0; i < groupIds.length; i++) {
1:ad877b6:             File groupId = groupIds[i];
1:ad877b6:             if (groupId.canRead() && groupId.isDirectory()) {
1:ad877b6:                 File[] versionDirs = groupId.listFiles();
1:ad877b6:                 for (int j = 0; j < versionDirs.length; j++) {
1:ad877b6:                     File versionDir = versionDirs[j];
1:ad877b6:                     if (versionDir.canRead() && versionDir.isDirectory()) {
1:ad877b6:                         artifacts.addAll(getArtifacts(null, versionDir, null, "jar", null));
1:ad877b6:                     }
1:ad877b6:                 }
1:ad877b6:             }
1:ad877b6:         }
1:ad877b6:         
1:ad877b6:         return artifacts;
1:ad877b6:     }
1:ad877b6:     
1:ad877b6:     // reuse code from apache geronimo with slight modification
1:ad877b6:     private List<String> getArtifacts(String groupId, File versionDir, String artifactMatch, String typeMatch, String versionMatch) {
1:ad877b6:         // org/apache/xbean/xbean-classpath/2.2-SNAPSHOT/xbean-classpath-2.2-SNAPSHOT.jar
1:ad877b6:         List<String> artifacts = new ArrayList<String>();
1:ad877b6:         String artifactId = versionDir.getParentFile().getName();
1:ad877b6: 
1:ad877b6:         File[] files = versionDir.listFiles();
1:ad877b6:         for (int i = 0; i < files.length; i++) {
1:ad877b6:             File file = files[i];
1:ad877b6:             if (file.canRead()) {
1:ad877b6:                 if (file.isDirectory()) {
1:ad877b6:                     File test = new File(file, "META-INF");
1:ad877b6:                     if(test.exists() && test.isDirectory() && test.canRead() && groupId != null) {
1:ad877b6:                         String version = versionDir.getName();
1:ad877b6:                         String fileHeader = artifactId + "-" + version + ".";
1:ad877b6: 
1:ad877b6:                         String fileName = file.getName();
1:ad877b6:                         if (fileName.startsWith(fileHeader)) {
1:ad877b6:                             // type is everything after the file header
1:ad877b6:                             String type = fileName.substring(fileHeader.length());
1:ad877b6: 
1:ad877b6:                             if (!type.endsWith(".sha1") && !type.endsWith(".md5")) {
1:ad877b6:                                 if(artifactMatch != null && !artifactMatch.equals(artifactId)) {
1:ad877b6:                                     continue;
1:ad877b6:                                 }
1:ad877b6:                                 if(typeMatch != null && !typeMatch.equals(type)) {
1:ad877b6:                                     continue;
1:ad877b6:                                 }
1:ad877b6:                                 if(versionMatch != null && !versionMatch.equals(version)) {
1:ad877b6:                                     continue;
1:ad877b6:                                 }
1:ad877b6:                                 artifacts.add(file.getPath());
1:ad877b6:                             }
1:ad877b6:                         }
1:ad877b6:                     } else { // this is just part of the path to the artifact
1:ad877b6:                         String nextGroupId;
1:ad877b6:                         if (groupId == null) {
1:ad877b6:                             nextGroupId = artifactId;
1:ad877b6:                         } else {
1:ad877b6:                             nextGroupId = groupId + "." + artifactId;
1:ad877b6:                         }
1:ad877b6: 
1:ad877b6:                         artifacts.addAll(getArtifacts(nextGroupId, file, artifactMatch, typeMatch, versionMatch));
1:ad877b6:                     }
1:ad877b6:                 } else if (groupId != null) {
1:ad877b6:                     String version = versionDir.getName();
1:ad877b6:                     String fileHeader = artifactId + "-" + version + ".";
1:ad877b6: 
1:ad877b6:                     String fileName = file.getName();
1:ad877b6:                     if (fileName.startsWith(fileHeader)) {
1:ad877b6:                         // type is everything after the file header
1:ad877b6:                         String type = fileName.substring(fileHeader.length());
1:ad877b6: 
1:ad877b6:                         if (!type.endsWith(".sha1") && !type.endsWith(".md5")) {
1:ad877b6:                             if(artifactMatch != null && !artifactMatch.equals(artifactId)) {
1:ad877b6:                                 continue;
1:ad877b6:                             }
1:ad877b6:                             if(typeMatch != null && !typeMatch.equals(type)) {
1:ad877b6:                                 continue;
1:ad877b6:                             }
1:ad877b6:                             if(versionMatch != null && !versionMatch.equals(version)) {
1:ad877b6:                                 continue;
1:ad877b6:                             }
1:ad877b6:                             artifacts.add(file.getPath());
1:ad877b6:                         }
1:ad877b6:                     }
1:ad877b6:                 }
1:ad877b6:             }
1:ad877b6:         }
1:ad877b6:         return artifacts;
1:ad877b6:     }
1:ad877b6:     
1:ad877b6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:ad877b6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.subsystem.itests.util;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.SortedSet;
1: import java.util.TreeSet;
1: 
1: public class Manve2Repository {
1: 
1:     private File rootFile;
1:     public Manve2Repository(File rootFile) {
1:         this.rootFile = rootFile;
1:     }
1:     // list jar files of the repository
1:     public SortedSet<String> listFiles() {
1:         SortedSet<String> artifacts = new TreeSet<String>();
1:         File[] groupIds = rootFile.listFiles();
1:         for (int i = 0; i < groupIds.length; i++) {
1:             File groupId = groupIds[i];
1:             if (groupId.canRead() && groupId.isDirectory()) {
1:                 File[] versionDirs = groupId.listFiles();
1:                 for (int j = 0; j < versionDirs.length; j++) {
1:                     File versionDir = versionDirs[j];
1:                     if (versionDir.canRead() && versionDir.isDirectory()) {
1:                         artifacts.addAll(getArtifacts(null, versionDir, null, "jar", null));
1:                     }
1:                 }
1:             }
1:         }
1:         
1:         return artifacts;
1:     }
1:     
1:     // reuse code from apache geronimo with slight modification
1:     private List<String> getArtifacts(String groupId, File versionDir, String artifactMatch, String typeMatch, String versionMatch) {
1:         // org/apache/xbean/xbean-classpath/2.2-SNAPSHOT/xbean-classpath-2.2-SNAPSHOT.jar
1:         List<String> artifacts = new ArrayList<String>();
1:         String artifactId = versionDir.getParentFile().getName();
1: 
1:         File[] files = versionDir.listFiles();
1:         for (int i = 0; i < files.length; i++) {
1:             File file = files[i];
1:             if (file.canRead()) {
1:                 if (file.isDirectory()) {
1:                     File test = new File(file, "META-INF");
1:                     if(test.exists() && test.isDirectory() && test.canRead() && groupId != null) {
1:                         String version = versionDir.getName();
1:                         String fileHeader = artifactId + "-" + version + ".";
1: 
1:                         String fileName = file.getName();
1:                         if (fileName.startsWith(fileHeader)) {
1:                             // type is everything after the file header
1:                             String type = fileName.substring(fileHeader.length());
1: 
1:                             if (!type.endsWith(".sha1") && !type.endsWith(".md5")) {
1:                                 if(artifactMatch != null && !artifactMatch.equals(artifactId)) {
1:                                     continue;
1:                                 }
1:                                 if(typeMatch != null && !typeMatch.equals(type)) {
1:                                     continue;
1:                                 }
1:                                 if(versionMatch != null && !versionMatch.equals(version)) {
1:                                     continue;
1:                                 }
1:                                 artifacts.add(file.getPath());
1:                             }
1:                         }
1:                     } else { // this is just part of the path to the artifact
1:                         String nextGroupId;
1:                         if (groupId == null) {
1:                             nextGroupId = artifactId;
1:                         } else {
1:                             nextGroupId = groupId + "." + artifactId;
1:                         }
1: 
1:                         artifacts.addAll(getArtifacts(nextGroupId, file, artifactMatch, typeMatch, versionMatch));
1:                     }
1:                 } else if (groupId != null) {
1:                     String version = versionDir.getName();
1:                     String fileHeader = artifactId + "-" + version + ".";
1: 
1:                     String fileName = file.getName();
1:                     if (fileName.startsWith(fileHeader)) {
1:                         // type is everything after the file header
1:                         String type = fileName.substring(fileHeader.length());
1: 
1:                         if (!type.endsWith(".sha1") && !type.endsWith(".md5")) {
1:                             if(artifactMatch != null && !artifactMatch.equals(artifactId)) {
1:                                 continue;
1:                             }
1:                             if(typeMatch != null && !typeMatch.equals(type)) {
1:                                 continue;
1:                             }
1:                             if(versionMatch != null && !versionMatch.equals(version)) {
1:                                 continue;
1:                             }
1:                             artifacts.add(file.getPath());
1:                         }
1:                     }
1:                 }
1:             }
1:         }
1:         return artifacts;
1:     }
1:     
1: }
============================================================================