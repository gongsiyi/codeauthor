1:14ceeb1: /*
1:14ceeb1:  * Licensed to the Apache Software Foundation (ASF) under one
1:14ceeb1:  * or more contributor license agreements.  See the NOTICE file
1:14ceeb1:  * distributed with this work for additional information
1:14ceeb1:  * regarding copyright ownership.  The ASF licenses this file
1:14ceeb1:  * to you under the Apache License, Version 2.0 (the
1:14ceeb1:  * "License"); you may not use this file except in compliance
1:14ceeb1:  * with the License.  You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing,
1:14ceeb1:  * software distributed under the License is distributed on an
1:14ceeb1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:14ceeb1:  * KIND, either express or implied.  See the License for the
1:14ceeb1:  * specific language governing permissions and limitations
1:14ceeb1:  * under the License.
1:14ceeb1:  */
1:39cd3f4: package org.apache.aries.async.impl;
1:39cd3f4: 
1:6caae36: import static org.junit.Assert.assertSame;
1:39cd3f4: import static org.junit.Assert.assertTrue;
1:39cd3f4: 
1:39cd3f4: import java.util.concurrent.CountDownLatch;
1:39cd3f4: import java.util.concurrent.ExecutorService;
1:39cd3f4: import java.util.concurrent.Executors;
1:8b05938: import java.util.concurrent.ScheduledExecutorService;
1:39cd3f4: import java.util.concurrent.TimeUnit;
1:39cd3f4: 
1:39cd3f4: import org.junit.After;
1:39cd3f4: import org.junit.Before;
1:39cd3f4: import org.junit.Test;
1:39cd3f4: import org.junit.runner.RunWith;
1:39cd3f4: import org.mockito.Mock;
1:39cd3f4: import org.mockito.runners.MockitoJUnitRunner;
1:39cd3f4: import org.osgi.service.log.LogService;
1:39cd3f4: import org.osgi.util.function.Predicate;
1:39cd3f4: import org.osgi.util.promise.Promise;
1:39cd3f4: import org.osgi.util.promise.Success;
1:39cd3f4: import org.osgi.util.tracker.ServiceTracker;
1:39cd3f4: 
1:39cd3f4: @RunWith(MockitoJUnitRunner.class)
1:39cd3f4: public class AsyncServiceTest {
1:39cd3f4: 
1:39cd3f4: 	public static class DelayedEcho {
1:39cd3f4: 		public String echo(String s, int delay) {
1:39cd3f4: 			try {
1:39cd3f4: 				Thread.sleep(delay);
1:39cd3f4: 			} catch (InterruptedException e) {
1:39cd3f4: 				throw new RuntimeException("Thread interrupted", e);
1:39cd3f4: 			}
1:39cd3f4: 			if (s == null) throw new NullPointerException("Nothing to echo!");
1:39cd3f4: 			return s;
1:39cd3f4: 		}
1:39cd3f4: 	}
1:39cd3f4: 	
1:39cd3f4: 	private ExecutorService es;
1:39cd3f4: 	
1:8b05938: 	private ScheduledExecutorService ses;
1:8b05938: 	
1:39cd3f4: 	@Mock
1:39cd3f4: 	ServiceTracker<LogService, LogService> serviceTracker;
1:39cd3f4: 	
1:39cd3f4: 	@Before
1:39cd3f4: 	public void start() {
1:39cd3f4: 		es = Executors.newFixedThreadPool(3);
1:8b05938: 		ses = Executors.newSingleThreadScheduledExecutor();
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	@After
1:39cd3f4: 	public void stop() {
1:39cd3f4: 		es.shutdownNow();
1:39cd3f4: 		try {
1:39cd3f4: 			es.awaitTermination(5, TimeUnit.SECONDS);
1:39cd3f4: 		} catch (InterruptedException e) {
1:39cd3f4: 			e.printStackTrace();
1:39cd3f4: 		}
1:8b05938: 
1:8b05938: 		ses.shutdownNow();
1:8b05938: 		try {
1:8b05938: 			ses.awaitTermination(5, TimeUnit.SECONDS);
1:8b05938: 		} catch (InterruptedException e) {
1:8b05938: 			e.printStackTrace();
1:8b05938: 		}
1:39cd3f4: 	}
1:39cd3f4: 	
1:39cd3f4: 	
1:39cd3f4: 	@Test
1:39cd3f4: 	public void test() throws InterruptedException {
1:39cd3f4: 		DelayedEcho raw = new DelayedEcho();
1:39cd3f4: 		
1:8b05938: 		AsyncService service = new AsyncService(null, es, ses,
1:39cd3f4: 				serviceTracker);
1:39cd3f4: 		
1:39cd3f4: 		DelayedEcho mediated = service.mediate(raw, DelayedEcho.class);
1:39cd3f4: 		
1:39cd3f4: 		Promise<String> promise = service.call(mediated.echo("Hello World", 1000));
1:39cd3f4: 		
1:39cd3f4: 		final CountDownLatch latch = new CountDownLatch(1);
1:39cd3f4: 		
1:39cd3f4: 		promise.filter(new Predicate<String>() {
1:39cd3f4: 				@Override
1:39cd3f4: 				public boolean test(String t) {
1:39cd3f4: 					return "Hello World".equals(t);
1:39cd3f4: 				}
1:39cd3f4: 			}).then(new Success<String, Void>() {
1:39cd3f4: 				@Override
1:39cd3f4: 				public Promise<Void> call(Promise<String> resolved)
1:39cd3f4: 						throws Exception {
1:39cd3f4: 					latch.countDown();
1:39cd3f4: 					return null;
1:39cd3f4: 				}
1:39cd3f4: 			});
1:39cd3f4: 		
1:39cd3f4: 		assertTrue(latch.await(5, TimeUnit.SECONDS));
1:39cd3f4: 	}
1:6caae36: 
1:6caae36:     @Test
1:6caae36:     public void testMultipleMediationsCacheClassLoader() throws Exception {
1:6caae36:         DelayedEcho raw = new DelayedEcho();
1:6caae36:         
1:8b05938:         AsyncService service = new AsyncService(null, es, ses,
1:6caae36:                                                 serviceTracker);
1:6caae36:         
1:6caae36:         DelayedEcho mediated = service.mediate(raw, DelayedEcho.class);
1:39cd3f4:         
1:6caae36:         assertSame(mediated.getClass(), service.mediate(raw, DelayedEcho.class).getClass());
1:6caae36:     }
1:6caae36: 
1:6caae36:     @Test
1:6caae36:     public void testMultipleMediationsCacheClassLoaderInterface() throws Exception {
1:6caae36:     	CharSequence raw = "test";
1:6caae36:     	
1:8b05938:     	AsyncService service = new AsyncService(null, es, ses,
1:6caae36:     			serviceTracker);
1:6caae36:     	
1:6caae36:     	CharSequence mediated = service.mediate(raw, CharSequence.class);
1:6caae36:     	
1:6caae36:     	assertSame(mediated.getClass(), service.mediate(raw, CharSequence.class).getClass());
1:6caae36:     }
1:6caae36:     
1:39cd3f4: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8b05938
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ScheduledExecutorService;
/////////////////////////////////////////////////////////////////////////
1: 	private ScheduledExecutorService ses;
1: 	
1: 		ses = Executors.newSingleThreadScheduledExecutor();
/////////////////////////////////////////////////////////////////////////
1: 
1: 		ses.shutdownNow();
1: 		try {
1: 			ses.awaitTermination(5, TimeUnit.SECONDS);
1: 		} catch (InterruptedException e) {
1: 			e.printStackTrace();
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 		AsyncService service = new AsyncService(null, es, ses,
/////////////////////////////////////////////////////////////////////////
1:         AsyncService service = new AsyncService(null, es, ses,
/////////////////////////////////////////////////////////////////////////
1:     	AsyncService service = new AsyncService(null, es, ses,
commit:6caae36
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertSame;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testMultipleMediationsCacheClassLoader() throws Exception {
1:         DelayedEcho raw = new DelayedEcho();
1:         
0:         AsyncService service = new AsyncService(null, es,
1:                                                 serviceTracker);
1:         
1:         DelayedEcho mediated = service.mediate(raw, DelayedEcho.class);
1:         
1:         assertSame(mediated.getClass(), service.mediate(raw, DelayedEcho.class).getClass());
1:     }
1: 
1:     @Test
1:     public void testMultipleMediationsCacheClassLoaderInterface() throws Exception {
1:     	CharSequence raw = "test";
1:     	
0:     	AsyncService service = new AsyncService(null, es,
1:     			serviceTracker);
1:     	
1:     	CharSequence mediated = service.mediate(raw, CharSequence.class);
1:     	
1:     	assertSame(mediated.getClass(), service.mediate(raw, CharSequence.class).getClass());
1:     }
1:     
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:39cd3f4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.async.impl;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.mockito.Mock;
1: import org.mockito.runners.MockitoJUnitRunner;
1: import org.osgi.service.log.LogService;
1: import org.osgi.util.function.Predicate;
1: import org.osgi.util.promise.Promise;
1: import org.osgi.util.promise.Success;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: public class AsyncServiceTest {
1: 
1: 	public static class DelayedEcho {
1: 		public String echo(String s, int delay) {
1: 			try {
1: 				Thread.sleep(delay);
1: 			} catch (InterruptedException e) {
1: 				throw new RuntimeException("Thread interrupted", e);
1: 			}
1: 			if (s == null) throw new NullPointerException("Nothing to echo!");
1: 			return s;
1: 		}
1: 	}
1: 	
1: 	private ExecutorService es;
1: 	
1: 	@Mock
1: 	ServiceTracker<LogService, LogService> serviceTracker;
1: 	
1: 	@Before
1: 	public void start() {
1: 		es = Executors.newFixedThreadPool(3);
1: 	}
1: 
1: 	@After
1: 	public void stop() {
1: 		es.shutdownNow();
1: 		try {
1: 			es.awaitTermination(5, TimeUnit.SECONDS);
1: 		} catch (InterruptedException e) {
1: 			e.printStackTrace();
1: 		}
1: 	}
1: 	
1: 	
1: 	@Test
1: 	public void test() throws InterruptedException {
1: 		DelayedEcho raw = new DelayedEcho();
1: 		
0: 		AsyncService service = new AsyncService(null, es, 
1: 				serviceTracker);
1: 		
1: 		DelayedEcho mediated = service.mediate(raw, DelayedEcho.class);
1: 		
1: 		Promise<String> promise = service.call(mediated.echo("Hello World", 1000));
1: 		
1: 		final CountDownLatch latch = new CountDownLatch(1);
1: 		
1: 		promise.filter(new Predicate<String>() {
1: 				@Override
1: 				public boolean test(String t) {
1: 					return "Hello World".equals(t);
1: 				}
1: 			}).then(new Success<String, Void>() {
1: 				@Override
1: 				public Promise<Void> call(Promise<String> resolved)
1: 						throws Exception {
1: 					latch.countDown();
1: 					return null;
1: 				}
1: 			});
1: 		
1: 		assertTrue(latch.await(5, TimeUnit.SECONDS));
1: 	}
1: 
1: }
============================================================================