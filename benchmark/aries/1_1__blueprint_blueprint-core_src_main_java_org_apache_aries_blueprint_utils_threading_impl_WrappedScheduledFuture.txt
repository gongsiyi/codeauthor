1:ef7b490: /*
1:ef7b490:  * Licensed to the Apache Software Foundation (ASF) under one
1:ef7b490:  * or more contributor license agreements.  See the NOTICE file
1:ef7b490:  * distributed with this work for additional information
1:ef7b490:  * regarding copyright ownership.  The ASF licenses this file
1:ef7b490:  * to you under the Apache License, Version 2.0 (the
1:ef7b490:  * "License"); you may not use this file except in compliance
1:ef7b490:  * with the License.  You may obtain a copy of the License at
1:ef7b490:  *
1:ef7b490:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ef7b490:  *
1:ef7b490:  * Unless required by applicable law or agreed to in writing,
1:ef7b490:  * software distributed under the License is distributed on an
1:ef7b490:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:ef7b490:  * KIND, either express or implied.  See the License for the
1:ef7b490:  * specific language governing permissions and limitations
1:ef7b490:  * under the License.
1:ef7b490:  */
1:ef7b490: package org.apache.aries.blueprint.utils.threading.impl;
1:ef7b490: 
1:ef7b490: import java.util.concurrent.Delayed;
1:ef7b490: import java.util.concurrent.ExecutionException;
1:ef7b490: import java.util.concurrent.Future;
1:ef7b490: import java.util.concurrent.ScheduledFuture;
1:ef7b490: import java.util.concurrent.TimeUnit;
1:ef7b490: import java.util.concurrent.TimeoutException;
1:ef7b490: 
1:ef7b490: public class WrappedScheduledFuture<T> implements ScheduledFuture<T>
1:ef7b490: {
1:ef7b490:   private Discardable<?> _discardable;
1:ef7b490:   private ScheduledFuture<T> _future;
1:ef7b490:   
1:ef7b490:   public WrappedScheduledFuture(ScheduledFuture<T> f, Discardable<?> d) {
1:ef7b490:     _future = f;
1:ef7b490:     _discardable = d;
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public long getDelay(TimeUnit timeunit)
1:ef7b490:   {
1:ef7b490:     return _future.getDelay(timeunit);
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public int compareTo(Delayed other)
1:ef7b490:   {
1:ef7b490:     return _future.compareTo(other);
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public boolean cancel(boolean arg0)
1:ef7b490:   {
1:ef7b490:     boolean result = _future.cancel(arg0);
1:ef7b490:     
1:ef7b490:     if (result) _discardable.discard();
1:ef7b490:     
1:ef7b490:     return result;
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public T get() throws InterruptedException, ExecutionException
1:ef7b490:   {
1:ef7b490:     return _future.get();
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public T get(long timeout, TimeUnit timeunit) throws InterruptedException, ExecutionException,
1:ef7b490:       TimeoutException
1:ef7b490:   {
1:ef7b490:     return _future.get(timeout, timeunit);
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public boolean isCancelled()
1:ef7b490:   {
1:ef7b490:     return _future.isCancelled();
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public boolean isDone()
1:ef7b490:   {
1:ef7b490:     return _future.isDone();
1:ef7b490:   }
1:ef7b490: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ef7b490
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.utils.threading.impl;
1: 
1: import java.util.concurrent.Delayed;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.ScheduledFuture;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: 
1: public class WrappedScheduledFuture<T> implements ScheduledFuture<T>
1: {
1:   private Discardable<?> _discardable;
1:   private ScheduledFuture<T> _future;
1:   
1:   public WrappedScheduledFuture(ScheduledFuture<T> f, Discardable<?> d) {
1:     _future = f;
1:     _discardable = d;
1:   }
1: 
1:   public long getDelay(TimeUnit timeunit)
1:   {
1:     return _future.getDelay(timeunit);
1:   }
1: 
1:   public int compareTo(Delayed other)
1:   {
1:     return _future.compareTo(other);
1:   }
1: 
1:   public boolean cancel(boolean arg0)
1:   {
1:     boolean result = _future.cancel(arg0);
1:     
1:     if (result) _discardable.discard();
1:     
1:     return result;
1:   }
1: 
1:   public T get() throws InterruptedException, ExecutionException
1:   {
1:     return _future.get();
1:   }
1: 
1:   public T get(long timeout, TimeUnit timeunit) throws InterruptedException, ExecutionException,
1:       TimeoutException
1:   {
1:     return _future.get(timeout, timeunit);
1:   }
1: 
1:   public boolean isCancelled()
1:   {
1:     return _future.isCancelled();
1:   }
1: 
1:   public boolean isDone()
1:   {
1:     return _future.isDone();
1:   }
1: }
============================================================================