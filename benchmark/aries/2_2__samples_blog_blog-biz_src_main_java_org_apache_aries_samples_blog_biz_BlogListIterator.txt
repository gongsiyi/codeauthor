1:8aedaf5: /**
1:8aedaf5:  * Licensed to the Apache Software Foundation (ASF) under one
1:8aedaf5:  * or more contributor license agreements.  See the NOTICE file
1:8aedaf5:  * distributed with this work for additional information
1:8aedaf5:  * regarding copyright ownership.  The ASF licenses this file
1:8aedaf5:  * to you under the Apache License, Version 2.0 (the
1:8aedaf5:  * "License"); you may not use this file except in compliance
1:8aedaf5:  * with the License.  You may obtain a copy of the License at
1:8aedaf5:  *
1:8aedaf5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8aedaf5:  *
1:8aedaf5:  * Unless required by applicable law or agreed to in writing,
1:8aedaf5:  * software distributed under the License is distributed on an
1:8aedaf5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8aedaf5:  * KIND, either express or implied.  See the License for the
1:8aedaf5:  * specific language governing permissions and limitations
1:8aedaf5:  * under the License.
1:8aedaf5:  */
1:e0beeec: package org.apache.aries.samples.blog.biz;
1:8aedaf5: 
1:8aedaf5: import java.lang.reflect.Constructor;
1:8aedaf5: import java.util.ListIterator;
1:8aedaf5: 
1:8aedaf5: public class BlogListIterator<B, F> implements ListIterator<F> {
1:8aedaf5: 
1:8aedaf5: 	private ListIterator<? extends B> internalListIterator;
1:8aedaf5: 
1:8aedaf5: 	private Class<? extends F> frontendClazz;
1:8aedaf5: 	private Class<B> backendClazz;
1:8aedaf5: 
1:8aedaf5: 	public BlogListIterator(ListIterator<? extends B> listIterator,
1:8aedaf5: 			Class<? extends F> frontendClazz, Class<B> backendClazz) {
1:8aedaf5: 		this.internalListIterator = listIterator;
1:8aedaf5: 		this.frontendClazz = frontendClazz;
1:8aedaf5: 		this.backendClazz = backendClazz;
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public void add(Object e) {
1:8aedaf5: 		throw new UnsupportedOperationException("");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public boolean hasNext() {
1:8aedaf5: 		return internalListIterator.hasNext();
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public boolean hasPrevious() {
1:8aedaf5: 		return internalListIterator.hasPrevious();
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public F next() {
1:8aedaf5: 		try {
1:8aedaf5: 			return getConstructor().newInstance(internalListIterator.next());
1:8aedaf5: 		} catch (Exception e) {
1:8aedaf5: 			// TODO Auto-generated catch block
1:8aedaf5: 			e.printStackTrace();
1:8aedaf5: 		}
1:8aedaf5: 		return null;
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public int nextIndex() {
1:8aedaf5: 		return internalListIterator.nextIndex();
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public F previous() {	
1:8aedaf5: 		try {
1:8aedaf5: 			return getConstructor().newInstance(internalListIterator.previous());
1:8aedaf5: 		} catch (Exception e) {
1:8aedaf5: 			// TODO Auto-generated catch block
1:8aedaf5: 			e.printStackTrace();
1:8aedaf5: 		}
1:8aedaf5: 		return null;
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public int previousIndex() {
1:8aedaf5: 		// TODO Auto-generated method stub
1:8aedaf5: 		return 0;
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public void remove() {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public void set(Object e) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	private Constructor<F> getConstructor() {
1:8aedaf5: 		Constructor<F> c;
1:8aedaf5: 		try {
1:8aedaf5: 			c = (Constructor<F>) frontendClazz.getConstructor(backendClazz);
1:8aedaf5: 			return c;
1:8aedaf5: 		} catch (Exception e) {
1:8aedaf5: 			// TODO Auto-generated catch block
1:8aedaf5: 			e.printStackTrace();
1:8aedaf5: 		}
1:8aedaf5: 		return null;
1:8aedaf5: 	}
1:8aedaf5: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:e0beeec
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.blog.biz;
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:8aedaf5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.samples.blog;
1: 
1: import java.lang.reflect.Constructor;
1: import java.util.ListIterator;
1: 
1: public class BlogListIterator<B, F> implements ListIterator<F> {
1: 
1: 	private ListIterator<? extends B> internalListIterator;
1: 
1: 	private Class<? extends F> frontendClazz;
1: 	private Class<B> backendClazz;
1: 
1: 	public BlogListIterator(ListIterator<? extends B> listIterator,
1: 			Class<? extends F> frontendClazz, Class<B> backendClazz) {
1: 		this.internalListIterator = listIterator;
1: 		this.frontendClazz = frontendClazz;
1: 		this.backendClazz = backendClazz;
1: 	}
1: 
1: 	public void add(Object e) {
1: 		throw new UnsupportedOperationException("");
1: 	}
1: 
1: 	public boolean hasNext() {
1: 		return internalListIterator.hasNext();
1: 	}
1: 
1: 	public boolean hasPrevious() {
1: 		return internalListIterator.hasPrevious();
1: 	}
1: 
1: 	public F next() {
1: 		try {
1: 			return getConstructor().newInstance(internalListIterator.next());
1: 		} catch (Exception e) {
1: 			// TODO Auto-generated catch block
1: 			e.printStackTrace();
1: 		}
1: 		return null;
1: 	}
1: 
1: 	public int nextIndex() {
1: 		return internalListIterator.nextIndex();
1: 	}
1: 
1: 	public F previous() {	
1: 		try {
1: 			return getConstructor().newInstance(internalListIterator.previous());
1: 		} catch (Exception e) {
1: 			// TODO Auto-generated catch block
1: 			e.printStackTrace();
1: 		}
1: 		return null;
1: 	}
1: 
1: 	public int previousIndex() {
1: 		// TODO Auto-generated method stub
1: 		return 0;
1: 	}
1: 
1: 	public void remove() {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 	}
1: 
1: 	public void set(Object e) {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 	}
1: 
1: 	private Constructor<F> getConstructor() {
1: 		Constructor<F> c;
1: 		try {
1: 			c = (Constructor<F>) frontendClazz.getConstructor(backendClazz);
1: 			return c;
1: 		} catch (Exception e) {
1: 			// TODO Auto-generated catch block
1: 			e.printStackTrace();
1: 		}
1: 		return null;
1: 	}
1: }
============================================================================