1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.support.impl;
1:e5c89d2: 
1:2cfdf52: import java.util.Collections;
1:0d59ccb: import java.util.HashMap;
1:0d59ccb: import java.util.Map;
1:2cfdf52: import java.util.Set;
1:2cfdf52: import java.util.concurrent.ConcurrentHashMap;
1:2cfdf52: import java.util.concurrent.CountDownLatch;
1:2cfdf52: import java.util.concurrent.TimeUnit;
1:2cfdf52: import java.util.concurrent.atomic.AtomicBoolean;
1:e5c89d2: 
1:2cfdf52: import javax.persistence.EntityManager;
1:2cfdf52: import javax.persistence.EntityManagerFactory;
1:798ba3b: 
1:2cfdf52: import org.apache.aries.jpa.supplier.EmSupplier;
1:798ba3b: import org.osgi.service.coordinator.Coordination;
1:798ba3b: import org.osgi.service.coordinator.Coordinator;
1:798ba3b: import org.osgi.service.coordinator.Participant;
1:2cfdf52: import org.slf4j.Logger;
1:2cfdf52: import org.slf4j.LoggerFactory;
8:2cfdf52: 
1:2cfdf52: /**
1:2cfdf52:  * Thread safe way to use an EntityManager.
1:2cfdf52:  * 
1:2cfdf52:  * Before the EMF is closed the close() method has to be called to make
1:2cfdf52:  * sure all EMs are closed.
1:2cfdf52:  */
1:2cfdf52: public class EMSupplierImpl implements EmSupplier {
1:2cfdf52:     private static final long DEFAULT_SHUTDOWN_WAIT_SECS = 10;
1:ec3ea65:     private static final Logger LOG = LoggerFactory.getLogger(EMSupplierImpl.class);
1:2cfdf52:     private EntityManagerFactory emf;
1:2cfdf52:     private AtomicBoolean shutdown;
1:2cfdf52:     private long shutdownWaitTime = DEFAULT_SHUTDOWN_WAIT_SECS;
1:2cfdf52:     private TimeUnit shutdownWaitTimeUnit = TimeUnit.SECONDS;
1:2cfdf52: 
1:2cfdf52:     private Set<EntityManager> emSet;
1:2cfdf52:     private CountDownLatch emsToShutDown;
1:798ba3b:     private Coordinator coordinator;
1:0d59ccb:     private String unitName;
1:2cfdf52: 
1:0d59ccb:     public EMSupplierImpl(String unitName, final EntityManagerFactory emf, Coordinator coordinator) {
1:0d59ccb:         this.unitName = unitName;
1:2cfdf52:         this.emf = emf;
1:798ba3b:         this.coordinator = coordinator;
1:2cfdf52:         this.shutdown = new AtomicBoolean(false);
1:2cfdf52:         this.emSet = Collections.newSetFromMap(new ConcurrentHashMap<EntityManager, Boolean>());
12:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private EntityManager createEm(EntityManagerFactory emf) {
1:2cfdf52:         EntityManager em = emf.createEntityManager();
2:2cfdf52:         emSet.add(em);
1:2cfdf52:         return em;
1:798ba3b:     }
1:798ba3b: 
1:2cfdf52:     /**
1:2cfdf52:      * Allows to retrieve one EntityManager per thread. Creates the EntityManager if none is present for the
1:2cfdf52:      * thread. If the EM on the thread is closed it will be replaced by a fresh one.
1:2cfdf52:      */
1:798ba3b:     @Override
1:2cfdf52:     public EntityManager get() {
1:798ba3b:         Coordination coordination = getTopCoordination();
1:e5c89d2:         if (coordination == null) {
1:e5c89d2:             throw new IllegalStateException("Need active coordination");
1:e5c89d2:         }
1:e5c89d2:         EntityManager em = getEm(coordination);
1:e5c89d2:         if (em == null) {
1:0d59ccb:             LOG.debug("Creating EntityManager for persistence unit " + unitName + ", coordination " + coordination.getName());
1:798ba3b:             em = createEm(emf);
1:798ba3b:             emSet.add(em);
1:0d59ccb:             setEm(coordination, em);
1:e5c89d2:             coordination.addParticipant(new EmShutDownParticipant());
1:798ba3b:         }
1:2cfdf52:         return em;
1:798ba3b:     }
1:798ba3b:     
1:798ba3b:     Coordination getTopCoordination() {
1:798ba3b:         Coordination coordination = coordinator.peek();
1:798ba3b:         while (coordination != null && coordination.getEnclosingCoordination() != null) {
1:798ba3b:             coordination = coordination.getEnclosingCoordination();
1:798ba3b:         }
1:798ba3b:         return coordination;
1:798ba3b:     }
1:0d59ccb:     
1:0d59ccb:     private void setEm(Coordination coordination, EntityManager em) {
1:0d59ccb:         Map<Class<?>, Object> vars = coordination.getVariables();
1:0d59ccb:         synchronized (vars) {
1:0d59ccb:             Map<String, EntityManager> emMap = getEmMap(coordination);
1:0d59ccb:             emMap.put(unitName, em);
1:0d59ccb:         }
1:0d59ccb:     }
1:2cfdf52: 
1:798ba3b:     /**
1:798ba3b:      * Get EntityManager from outer most Coordination that holds an EM
1:798ba3b:      * @param coordination
1:798ba3b:      * @return
1:798ba3b:      */
1:798ba3b:     private EntityManager getEm(Coordination coordination) {
1:0d59ccb:         Map<Class<?>, Object> vars = coordination.getVariables();
1:0d59ccb:         synchronized (vars) {
1:0d59ccb:             return getEmMap(coordination).get(unitName);
1:0d59ccb:         }
1:0d59ccb:     }
1:6c50bfa: 
1:6c50bfa:     private EntityManager removeEm(Coordination coordination) {
1:6c50bfa:         Map<Class<?>, Object> vars = coordination.getVariables();
1:6c50bfa:         synchronized (vars) {
1:6c50bfa:             return getEmMap(coordination).remove(unitName);
1:6c50bfa:         }
1:6c50bfa:     }
1:6c50bfa: 
1:0d59ccb:     
1:0d59ccb:     @SuppressWarnings("unchecked")
1:0d59ccb:     private Map<String, EntityManager> getEmMap(Coordination coordination) {
1:0d59ccb:         Map<String, EntityManager> emMap = (Map<String, EntityManager>)coordination.getVariables().get(EntityManager.class);
1:0d59ccb:         if (emMap == null) {
1:0d59ccb:             emMap = new HashMap<String, EntityManager>();
1:0d59ccb:             coordination.getVariables().put(EntityManager.class, emMap);
1:0d59ccb:         }
1:0d59ccb:         return emMap;
1:798ba3b:     }
1:2cfdf52: 
1:798ba3b:     @Override
1:2cfdf52:     public void preCall() {
1:ec3ea65:         // Just for backward compatibility
1:798ba3b:     }
1:2cfdf52: 
4:2cfdf52:     @Override
1:2cfdf52:     public void postCall() {
1:ec3ea65:         // Just for backward compatibility
1:0d59ccb:     }
1:2cfdf52: 
1:2cfdf52:     /**
1:2cfdf52:      * Closes all EntityManagers that were opened by this Supplier.
1:2cfdf52:      * It will first wait for the EMs to be closed by the running threads.
1:2cfdf52:      * If this times out it will shutdown the remaining EMs itself.
1:2cfdf52:      * @return true if clean close, false if timeout occured
1:2cfdf52:      */
1:2cfdf52:     public boolean close() {
1:2cfdf52:         synchronized (this) {
1:2cfdf52:             shutdown.set(true);
1:2cfdf52:             emsToShutDown = new CountDownLatch(emSet.size());
1:2cfdf52:         }
1:0d59ccb:         try {
1:2cfdf52:             emsToShutDown.await(shutdownWaitTime, shutdownWaitTimeUnit);
1:2cfdf52:         } catch (InterruptedException e) {
1:ec3ea65:             LOG.debug("Close was interrupted", e);
1:2cfdf52:         }
1:2cfdf52:         return shutdownRemaining();
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private synchronized boolean shutdownRemaining() {
1:ec3ea65:         boolean clean = emSet.isEmpty(); 
1:2cfdf52:         if  (!clean) {
1:2cfdf52:             LOG.warn("{} EntityManagers still open after timeout. Shutting them down now", emSet.size());
1:2cfdf52:         }
1:2cfdf52:         for (EntityManager em : emSet) {
1:2cfdf52:             closeEm(em);
1:2cfdf52:         }
1:2cfdf52:         emSet.clear();
1:2cfdf52:         return clean;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     private static void closeEm(EntityManager em) {
2:2cfdf52:         try {
1:2cfdf52:             if (em.isOpen()) {
1:798ba3b:                 em.close();
1:2cfdf52:             }
1:2cfdf52:         } catch (Exception e) {
1:2cfdf52:             LOG.warn("Error closing EntityManager", e);
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void setShutdownWait(long shutdownWaitTime, TimeUnit shutdownWaitTimeUnit) {
1:2cfdf52:         this.shutdownWaitTime = shutdownWaitTime;
1:2cfdf52:         this.shutdownWaitTimeUnit = shutdownWaitTimeUnit;
1:2cfdf52:     }
1:798ba3b: 
1:e5c89d2:     private final class EmShutDownParticipant implements Participant {
1:e5c89d2:         @Override
1:e5c89d2:         public void failed(Coordination coordination) throws Exception {
1:cbbca07:             LOG.debug("Coordination failed " + coordination.getName(), coordination.getFailure());
1:e5c89d2:             ended(coordination);
1:e5c89d2:         }
1:e5c89d2: 
1:e5c89d2:         @Override
1:e5c89d2:         public void ended(Coordination coordination) throws Exception {
1:0d59ccb:             LOG.debug("Closing EntityManager for persistence unit " + unitName + " as coordination " + coordination.getName() + " ended.");
1:6c50bfa:             EntityManager em = removeEm(coordination);
1:e5c89d2:             emSet.remove(em);
1:e5c89d2:             em.close();
1:6c50bfa:             
1:e5c89d2:             if (shutdown.get()) {
1:e5c89d2:                 emsToShutDown.countDown();
1:e5c89d2:             }
1:e5c89d2:         }
1:e5c89d2:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(EMSupplierImpl.class);
/////////////////////////////////////////////////////////////////////////
1:         // Just for backward compatibility
1:         // Just for backward compatibility
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Close was interrupted", e);
1:         boolean clean = emSet.isEmpty(); 
/////////////////////////////////////////////////////////////////////////
1:     private static void closeEm(EntityManager em) {
commit:cbbca07
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Coordination failed " + coordination.getName(), coordination.getFailure());
commit:96e072c
/////////////////////////////////////////////////////////////////////////
commit:1bfa1d3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         coordinator.begin("jpa." + unitName, 0);
/////////////////////////////////////////////////////////////////////////
commit:3a8ccb4
/////////////////////////////////////////////////////////////////////////
0:     private ThreadLocal<Coordination> localCoordination = new ThreadLocal<>();
/////////////////////////////////////////////////////////////////////////
0:         localCoordination.set(coordinator.begin("jpa." + unitName, 0));
/////////////////////////////////////////////////////////////////////////
0:             localCoordination.set(null);
commit:6c50bfa
/////////////////////////////////////////////////////////////////////////
1: 
1:     private EntityManager removeEm(Coordination coordination) {
1:         Map<Class<?>, Object> vars = coordination.getVariables();
1:         synchronized (vars) {
1:             return getEmMap(coordination).remove(unitName);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             EntityManager em = removeEm(coordination);
1:             
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     private String unitName;
1:     public EMSupplierImpl(String unitName, final EntityManagerFactory emf, Coordinator coordinator) {
1:         this.unitName = unitName;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Creating EntityManager for persistence unit " + unitName + ", coordination " + coordination.getName());
1:             setEm(coordination, em);
/////////////////////////////////////////////////////////////////////////
1:     
1:     private void setEm(Coordination coordination, EntityManager em) {
1:         Map<Class<?>, Object> vars = coordination.getVariables();
1:         synchronized (vars) {
1:             Map<String, EntityManager> emMap = getEmMap(coordination);
1:             emMap.put(unitName, em);
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         Map<Class<?>, Object> vars = coordination.getVariables();
1:         synchronized (vars) {
1:             return getEmMap(coordination).get(unitName);
1:         }
1:     }
1:     
1:     @SuppressWarnings("unchecked")
1:     private Map<String, EntityManager> getEmMap(Coordination coordination) {
1:         Map<String, EntityManager> emMap = (Map<String, EntityManager>)coordination.getVariables().get(EntityManager.class);
1:         if (emMap == null) {
1:             emMap = new HashMap<String, EntityManager>();
1:             coordination.getVariables().put(EntityManager.class, emMap);
1:         }
1:         return emMap;
0:         coordinator.begin("jpa." + unitName, 0);
1:         try {
0:             Coordination coord = coordinator.pop();
0:             coord.end();
0:         } catch (Throwable t) {
0:             LOG.warn("Error ending coord", t);
1:         }
/////////////////////////////////////////////////////////////////////////
0:             LOG.warn("Coordination failed " + coordination.getName(), coordination.getFailure());
1:             LOG.debug("Closing EntityManager for persistence unit " + unitName + " as coordination " + coordination.getName() + " ended.");
commit:e5c89d2
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (coordination == null) {
1:             throw new IllegalStateException("Need active coordination");
1:         }
1:         if (em == null) {
1:             coordination.addParticipant(new EmShutDownParticipant());
/////////////////////////////////////////////////////////////////////////
0:         return (EntityManager)coordination.getVariables().get(EntityManager.class);
0:         LOG.info("preCall");
0:         LOG.info("postCall");
0:         Coordination coord = coordinator.pop();
0:         coord.end();
/////////////////////////////////////////////////////////////////////////
1:     private final class EmShutDownParticipant implements Participant {
1:         @Override
1:         public void failed(Coordination coordination) throws Exception {
1:             ended(coordination);
1:         }
1: 
1:         @Override
1:         public void ended(Coordination coordination) throws Exception {
1:             EntityManager em = getEm(coordination);
1:             emSet.remove(em);
1:             em.close();
1:             if (shutdown.get()) {
1:                 emsToShutDown.countDown();
1:             }
1:         }
1:     }
commit:798ba3b
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.coordinator.Coordinator;
1: import org.osgi.service.coordinator.Participant;
/////////////////////////////////////////////////////////////////////////
1:     private Coordinator coordinator;
0:     public EMSupplierImpl(final EntityManagerFactory emf, Coordinator coordinator) {
1:         this.coordinator = coordinator;
/////////////////////////////////////////////////////////////////////////
1:         Coordination coordination = getTopCoordination();
0:         EntityManager em = getEm(coordination);
0:         if (coordination != null && em == null) {
1:             em = createEm(emf);
1:             emSet.add(em);
0:             coordination.getVariables().put(EntityManager.class, em);
0:             coordination.addParticipant(new Participant() {
1:                 
1:                 @Override
0:                 public void failed(Coordination coordination) throws Exception {
0:                     ended(coordination);
1:                 }
1:                 
1:                 @Override
0:                 public void ended(Coordination coordination) throws Exception {
0:                     EntityManager em = getEm(coordination);
1:                     em.close();
0:                     emSet.remove(em);
0:                     if (shutdown.get()) {
0:                         emsToShutDown.countDown();
1:                     }
1:                 }
0:             });
1:     
1:     Coordination getTopCoordination() {
1:         Coordination coordination = coordinator.peek();
1:         while (coordination != null && coordination.getEnclosingCoordination() != null) {
1:             coordination = coordination.getEnclosingCoordination();
1:         }
1:         return coordination;
1:     }
1:     /**
1:      * Get EntityManager from outer most Coordination that holds an EM
1:      * @param coordination
1:      * @return
1:      */
1:     private EntityManager getEm(Coordination coordination) {
0:         if (coordination == null) {
0:             return null;
0:         } else {
0:             return (EntityManager)coordination.getVariables().get(EntityManager.class);
1:         }
1:     }
0:         coordinator.begin("jpa", 0);
0:         coordinator.pop().end();
/////////////////////////////////////////////////////////////////////////
1: 
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.support.impl;
1: 
1: import java.util.Collections;
1: import java.util.Set;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
0: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: 
1: import org.apache.aries.jpa.supplier.EmSupplier;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Thread safe way to use an EntityManager.
1:  * 
1:  * Before the EMF is closed the close() method has to be called to make
1:  * sure all EMs are closed.
1:  */
1: public class EMSupplierImpl implements EmSupplier {
1:     private static final long DEFAULT_SHUTDOWN_WAIT_SECS = 10;
0:     private static Logger LOG = LoggerFactory.getLogger(EMSupplierImpl.class);
1:     private EntityManagerFactory emf;
1:     private AtomicBoolean shutdown;
1:     private long shutdownWaitTime = DEFAULT_SHUTDOWN_WAIT_SECS;
1:     private TimeUnit shutdownWaitTimeUnit = TimeUnit.SECONDS;
1: 
0:     private final ThreadLocal<EntityManager> localEm;
1: 
0:     // Counts how deeply nested the calls on this EM are
0:     private final ThreadLocal<AtomicInteger> usageCount;
1:     private Set<EntityManager> emSet;
1:     private CountDownLatch emsToShutDown;
1:     
1: 
0:     public EMSupplierImpl(final EntityManagerFactory emf) {
1:         this.emf = emf;
1:         this.shutdown = new AtomicBoolean(false);
0:         this.localEm = new ThreadLocal<EntityManager>();
1:         this.emSet = Collections.newSetFromMap(new ConcurrentHashMap<EntityManager, Boolean>());
0:         this.usageCount = new ThreadLocal<AtomicInteger>() {
1:             @Override
0:             protected AtomicInteger initialValue() {
0:                 return new AtomicInteger(0);
1:             }
0:         };
1:     }
1: 
1:     private EntityManager createEm(EntityManagerFactory emf) {
0:         LOG.debug("Creating EntityManager");
1:         EntityManager em = emf.createEntityManager();
1:         emSet.add(em);
1:         return em;
1:     }
1: 
1:     /**
1:      * Allows to retrieve one EntityManager per thread. Creates the EntityManager if none is present for the
1:      * thread. If the EM on the thread is closed it will be replaced by a fresh one.
1:      */
1:     @Override
1:     public EntityManager get() {
0:         EntityManager em = this.localEm.get();
0:         if (em == null) {
0:             LOG.warn("No EntityManager present on this thread. Remember to call preCall() first");
1:         }
1:         return em;
1:     }
1: 
1: 
1:     @Override
1:     public void preCall() {
0:         if (shutdown.get()) {
0:             throw new IllegalStateException("This EntityManagerFactory is being shut down. Can not enter a new EM enabled method");
1:         }
0:         int count = this.usageCount.get().incrementAndGet();
0:         if (count == 1) {
0:             EntityManager em = createEm(emf);
1:             emSet.add(em);
0:             localEm.set(em);
1:         }
1:     }
1: 
1:     @Override
1:     public void postCall() {
0:         int count = this.usageCount.get().decrementAndGet();
0:         if (count == 0) {
0:             // Outermost call finished
0:             closeAndRemoveLocalEm();
0:         } else if (count < 0) {
0:             throw new IllegalStateException("postCall() called without corresponding preCall()");
1:         }
1:     }
1: 
0:     private synchronized void closeAndRemoveLocalEm() {
0:         EntityManager em = localEm.get();
0:         em.close();
0:         emSet.remove(em);
0:         localEm.remove();
0:         if (shutdown.get()) {
0:             emsToShutDown.countDown();
1:         }
1:     }
1: 
1:     /**
1:      * Closes all EntityManagers that were opened by this Supplier.
1:      * It will first wait for the EMs to be closed by the running threads.
1:      * If this times out it will shutdown the remaining EMs itself.
1:      * @return true if clean close, false if timeout occured
1:      */
1:     public boolean close() {
1:         synchronized (this) {
1:             shutdown.set(true);
1:             emsToShutDown = new CountDownLatch(emSet.size());
1:         }
1:         try {
1:             emsToShutDown.await(shutdownWaitTime, shutdownWaitTimeUnit);
1:         } catch (InterruptedException e) {
1:         }
1:         return shutdownRemaining();
1:     }
1: 
1:     private synchronized boolean shutdownRemaining() {
0:         boolean clean = (emSet.size() == 0); 
1:         if  (!clean) {
1:             LOG.warn("{} EntityManagers still open after timeout. Shutting them down now", emSet.size());
1:         }
1:         for (EntityManager em : emSet) {
1:             closeEm(em);
1:         }
1:         emSet.clear();
1:         return clean;
1:     }
1: 
0:     private void closeEm(EntityManager em) {
1:         try {
1:             if (em.isOpen()) {
0:                 em.close();
1:             }
1:         } catch (Exception e) {
1:             LOG.warn("Error closing EntityManager", e);
1:         }
1:     }
1: 
1:     public void setShutdownWait(long shutdownWaitTime, TimeUnit shutdownWaitTimeUnit) {
1:         this.shutdownWaitTime = shutdownWaitTime;
1:         this.shutdownWaitTimeUnit = shutdownWaitTimeUnit;
1:     }
1: }
============================================================================