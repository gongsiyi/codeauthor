1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.cm;
1:fdf3952: 
1:fdf3952: import static org.osgi.jmx.JmxConstants.PROPERTIES_TYPE;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: import java.util.ArrayList;
1:fdf3952: import java.util.Collection;
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.Enumeration;
1:fdf3952: import java.util.Hashtable;
1:fdf3952: import java.util.List;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: import javax.management.openmbean.TabularDataSupport;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.codec.PropertyData;
1:fdf3952: import org.osgi.framework.InvalidSyntaxException;
1:fdf3952: import org.osgi.jmx.service.cm.ConfigurationAdminMBean;
1:fdf3952: import org.osgi.service.cm.Configuration;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * Implementation of <code>ConfigurationAdminMBean</code> 
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class ConfigurationAdmin implements ConfigurationAdminMBean {
1:fdf3952: 
1:fdf3952:     private org.osgi.service.cm.ConfigurationAdmin configurationAdmin;
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Constructs a ConfigurationAdmin implementation
1:fdf3952:      * @param configurationAdmin instance of org.osgi.service.cm.ConfigurationAdmin service
1:fdf3952:      */
1:fdf3952:     public ConfigurationAdmin(org.osgi.service.cm.ConfigurationAdmin configurationAdmin) {
1:fdf3952:         this.configurationAdmin = configurationAdmin;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#createFactoryConfiguration(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String createFactoryConfiguration(String factoryPid) throws IOException {
1:fdf3952:         return createFactoryConfigurationForLocation(factoryPid, null); 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#createFactoryConfigurationForLocation(java.lang.String, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String createFactoryConfigurationForLocation(String factoryPid, String location) throws IOException {
1:fdf3952:         if (factoryPid == null || factoryPid.length() < 1) {
1:fdf3952:             throw new IOException("Argument factoryPid cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         Configuration config = configurationAdmin.createFactoryConfiguration(factoryPid);
1:fdf3952:         config.setBundleLocation(location);
1:fdf3952:         return config.getPid();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#delete(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void delete(String pid) throws IOException {
1:fdf3952:        deleteForLocation(pid, null);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#deleteForLocation(java.lang.String, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void deleteForLocation(String pid, String location) throws IOException {
1:fdf3952:         if (pid == null || pid.length() < 1) {
1:fdf3952:             throw new IOException("Argument pid cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         Configuration config = configurationAdmin.getConfiguration(pid, location);
1:fdf3952:         config.delete();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#deleteConfigurations(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void deleteConfigurations(String filter) throws IOException {
1:fdf3952:         if (filter == null || filter.length() < 1) {
1:fdf3952:             throw new IOException("Argument filter cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         Configuration[] configuations = null;
1:fdf3952:         try {
1:fdf3952:             configuations = configurationAdmin.listConfigurations(filter);
1:fdf3952:         } catch (InvalidSyntaxException e) {
1:fdf3952:             throw new IOException("Invalid filter [" + filter + "] : " + e);
1:fdf3952:         }
1:fdf3952:         if (configuations != null) {
1:fdf3952:             for (Configuration config : configuations) {
1:fdf3952:                 config.delete();
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getBundleLocation(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String getBundleLocation(String pid) throws IOException {
1:fdf3952:         if (pid == null || pid.length() < 1) {
1:fdf3952:             throw new IOException("Argument pid cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         Configuration config = configurationAdmin.getConfiguration(pid, null);
1:fdf3952:         String bundleLocation = (config.getBundleLocation() == null) ? "Configuration is not yet bound to a bundle location" : config.getBundleLocation();
1:fdf3952:         return bundleLocation;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getConfigurations(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String[][] getConfigurations(String filter) throws IOException {
1:fdf3952:         if (filter == null || filter.length() < 1) {
1:fdf3952:             throw new IOException("Argument filter cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         List<String[]> result = new ArrayList<String[]>();
1:fdf3952:         Configuration[] configurations = null;
1:fdf3952:         try {
1:fdf3952:             configurations = configurationAdmin.listConfigurations(filter);
1:fdf3952:         } catch (InvalidSyntaxException e) {
1:fdf3952:             throw new IOException("Invalid filter [" + filter + "] : " + e);
1:fdf3952:         }
1:fdf3952:         if (configurations != null) {
1:fdf3952:             for (Configuration config : configurations) {
1:fdf3952:                 result.add(new String[] { config.getPid(), config.getBundleLocation() });
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return result.toArray(new String[result.size()][]);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getFactoryPid(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String getFactoryPid(String pid) throws IOException {
1:fdf3952:        return getFactoryPidForLocation(pid, null);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getFactoryPidForLocation(java.lang.String, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String getFactoryPidForLocation(String pid, String location) throws IOException {
1:fdf3952:         if (pid == null || pid.length() < 1) {
1:fdf3952:             throw new IOException("Argument pid cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         Configuration config = configurationAdmin.getConfiguration(pid, location);
1:fdf3952:         return config.getFactoryPid();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getProperties(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public TabularData getProperties(String pid) throws IOException {
1:fdf3952:        return getPropertiesForLocation(pid, null);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getPropertiesForLocation(java.lang.String, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public TabularData getPropertiesForLocation(String pid, String location) throws IOException {
1:fdf3952:         if (pid == null || pid.length() < 1) {
1:fdf3952:             throw new IOException("Argument pid cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         TabularData propertiesTable = null;
1:fdf3952:         Configuration config = configurationAdmin.getConfiguration(pid, location);
1:fdf3952:         Dictionary<String, Object> properties = config.getProperties();
1:fdf3952:         if (properties != null) {
1:fdf3952:             propertiesTable = new TabularDataSupport(PROPERTIES_TYPE);
1:fdf3952:             Enumeration<String> keys = properties.keys();
1:fdf3952:             while (keys.hasMoreElements()) {
1:fdf3952:                 String key = keys.nextElement();
1:fdf3952:                 propertiesTable.put(PropertyData.newInstance(key, properties.get(key)).toCompositeData());
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return propertiesTable;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#setBundleLocation(java.lang.String, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void setBundleLocation(String pid, String location) throws IOException {
1:fdf3952:         if (pid == null || pid.length() < 1) {
1:fdf3952:             throw new IOException("Argument factoryPid cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         Configuration config = configurationAdmin.getConfiguration(pid, null);
1:fdf3952:         config.setBundleLocation(location);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#update(java.lang.String, javax.management.openmbean.TabularData)
1:fdf3952:      */
1:fdf3952:     public void update(String pid, TabularData configurationTable) throws IOException {
1:fdf3952:         updateForLocation(pid, null, configurationTable);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#updateForLocation(java.lang.String, java.lang.String, javax.management.openmbean.TabularData)
1:fdf3952:      */
2:fdf3952:     @SuppressWarnings("unchecked")
1:fdf3952:     public void updateForLocation(String pid, String location, TabularData configurationTable) throws IOException {
1:fdf3952:         if (pid == null || pid.length() < 1) {
1:fdf3952:             throw new IOException("Argument pid cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         if (configurationTable == null) {
1:fdf3952:             throw new IOException("Argument configurationTable cannot be null");
1:fdf3952:         }
1:fdf3952:                 
1:fdf3952:         if (!PROPERTIES_TYPE.equals(configurationTable.getTabularType())) {
1:fdf3952:             throw new IOException("Invalid TabularType ["  + configurationTable.getTabularType() + "]");
1:fdf3952:         }
1:fdf3952:         Dictionary<String, Object> configurationProperties = new Hashtable<String, Object>();
1:fdf3952:         Collection<CompositeData> compositeData = (Collection<CompositeData>) configurationTable.values();
1:fdf3952:         for (CompositeData row: compositeData) {
1:0a8778f:             PropertyData<? extends Class<?>> propertyData = PropertyData.from(row);
1:fdf3952:             configurationProperties.put(propertyData.getKey(), propertyData.getValue());
1:fdf3952:         }
1:fdf3952:         Configuration config = configurationAdmin.getConfiguration(pid, location);
1:fdf3952:         config.update(configurationProperties);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             PropertyData<? extends Class<?>> propertyData = PropertyData.from(row);
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.cm;
1: 
1: import static org.osgi.jmx.JmxConstants.PROPERTIES_TYPE;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.Hashtable;
1: import java.util.List;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: 
1: import org.apache.aries.jmx.codec.PropertyData;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.jmx.service.cm.ConfigurationAdminMBean;
1: import org.osgi.service.cm.Configuration;
1: 
1: /**
1:  * Implementation of <code>ConfigurationAdminMBean</code> 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class ConfigurationAdmin implements ConfigurationAdminMBean {
1: 
1:     private org.osgi.service.cm.ConfigurationAdmin configurationAdmin;
1:     
1:     /**
1:      * Constructs a ConfigurationAdmin implementation
1:      * @param configurationAdmin instance of org.osgi.service.cm.ConfigurationAdmin service
1:      */
1:     public ConfigurationAdmin(org.osgi.service.cm.ConfigurationAdmin configurationAdmin) {
1:         this.configurationAdmin = configurationAdmin;
1:     }
1:     
1:     
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#createFactoryConfiguration(java.lang.String)
1:      */
1:     public String createFactoryConfiguration(String factoryPid) throws IOException {
1:         return createFactoryConfigurationForLocation(factoryPid, null); 
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#createFactoryConfigurationForLocation(java.lang.String, java.lang.String)
1:      */
1:     public String createFactoryConfigurationForLocation(String factoryPid, String location) throws IOException {
1:         if (factoryPid == null || factoryPid.length() < 1) {
1:             throw new IOException("Argument factoryPid cannot be null or empty");
1:         }
1:         Configuration config = configurationAdmin.createFactoryConfiguration(factoryPid);
1:         config.setBundleLocation(location);
1:         return config.getPid();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#delete(java.lang.String)
1:      */
1:     public void delete(String pid) throws IOException {
1:        deleteForLocation(pid, null);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#deleteForLocation(java.lang.String, java.lang.String)
1:      */
1:     public void deleteForLocation(String pid, String location) throws IOException {
1:         if (pid == null || pid.length() < 1) {
1:             throw new IOException("Argument pid cannot be null or empty");
1:         }
1:         Configuration config = configurationAdmin.getConfiguration(pid, location);
1:         config.delete();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#deleteConfigurations(java.lang.String)
1:      */
1:     public void deleteConfigurations(String filter) throws IOException {
1:         if (filter == null || filter.length() < 1) {
1:             throw new IOException("Argument filter cannot be null or empty");
1:         }
1:         Configuration[] configuations = null;
1:         try {
1:             configuations = configurationAdmin.listConfigurations(filter);
1:         } catch (InvalidSyntaxException e) {
1:             throw new IOException("Invalid filter [" + filter + "] : " + e);
1:         }
1:         if (configuations != null) {
1:             for (Configuration config : configuations) {
1:                 config.delete();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getBundleLocation(java.lang.String)
1:      */
1:     public String getBundleLocation(String pid) throws IOException {
1:         if (pid == null || pid.length() < 1) {
1:             throw new IOException("Argument pid cannot be null or empty");
1:         }
1:         Configuration config = configurationAdmin.getConfiguration(pid, null);
1:         String bundleLocation = (config.getBundleLocation() == null) ? "Configuration is not yet bound to a bundle location" : config.getBundleLocation();
1:         return bundleLocation;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getConfigurations(java.lang.String)
1:      */
1:     public String[][] getConfigurations(String filter) throws IOException {
1:         if (filter == null || filter.length() < 1) {
1:             throw new IOException("Argument filter cannot be null or empty");
1:         }
1:         List<String[]> result = new ArrayList<String[]>();
1:         Configuration[] configurations = null;
1:         try {
1:             configurations = configurationAdmin.listConfigurations(filter);
1:         } catch (InvalidSyntaxException e) {
1:             throw new IOException("Invalid filter [" + filter + "] : " + e);
1:         }
1:         if (configurations != null) {
1:             for (Configuration config : configurations) {
1:                 result.add(new String[] { config.getPid(), config.getBundleLocation() });
1:             }
1:         }
1:         return result.toArray(new String[result.size()][]);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getFactoryPid(java.lang.String)
1:      */
1:     public String getFactoryPid(String pid) throws IOException {
1:        return getFactoryPidForLocation(pid, null);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getFactoryPidForLocation(java.lang.String, java.lang.String)
1:      */
1:     public String getFactoryPidForLocation(String pid, String location) throws IOException {
1:         if (pid == null || pid.length() < 1) {
1:             throw new IOException("Argument pid cannot be null or empty");
1:         }
1:         Configuration config = configurationAdmin.getConfiguration(pid, location);
1:         return config.getFactoryPid();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getProperties(java.lang.String)
1:      */
1:     public TabularData getProperties(String pid) throws IOException {
1:        return getPropertiesForLocation(pid, null);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#getPropertiesForLocation(java.lang.String, java.lang.String)
1:      */
1:     @SuppressWarnings("unchecked")
1:     public TabularData getPropertiesForLocation(String pid, String location) throws IOException {
1:         if (pid == null || pid.length() < 1) {
1:             throw new IOException("Argument pid cannot be null or empty");
1:         }
1:         TabularData propertiesTable = null;
1:         Configuration config = configurationAdmin.getConfiguration(pid, location);
1:         Dictionary<String, Object> properties = config.getProperties();
1:         if (properties != null) {
1:             propertiesTable = new TabularDataSupport(PROPERTIES_TYPE);
1:             Enumeration<String> keys = properties.keys();
1:             while (keys.hasMoreElements()) {
1:                 String key = keys.nextElement();
1:                 propertiesTable.put(PropertyData.newInstance(key, properties.get(key)).toCompositeData());
1:             }
1:         }
1:         return propertiesTable;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#setBundleLocation(java.lang.String, java.lang.String)
1:      */
1:     public void setBundleLocation(String pid, String location) throws IOException {
1:         if (pid == null || pid.length() < 1) {
1:             throw new IOException("Argument factoryPid cannot be null or empty");
1:         }
1:         Configuration config = configurationAdmin.getConfiguration(pid, null);
1:         config.setBundleLocation(location);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#update(java.lang.String, javax.management.openmbean.TabularData)
1:      */
1:     public void update(String pid, TabularData configurationTable) throws IOException {
1:         updateForLocation(pid, null, configurationTable);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.cm.ConfigurationAdminMBean#updateForLocation(java.lang.String, java.lang.String, javax.management.openmbean.TabularData)
1:      */
1:     @SuppressWarnings("unchecked")
1:     public void updateForLocation(String pid, String location, TabularData configurationTable) throws IOException {
1:         if (pid == null || pid.length() < 1) {
1:             throw new IOException("Argument pid cannot be null or empty");
1:         }
1:         if (configurationTable == null) {
1:             throw new IOException("Argument configurationTable cannot be null");
1:         }
1:                 
1:         if (!PROPERTIES_TYPE.equals(configurationTable.getTabularType())) {
1:             throw new IOException("Invalid TabularType ["  + configurationTable.getTabularType() + "]");
1:         }
1:         Dictionary<String, Object> configurationProperties = new Hashtable<String, Object>();
1:         Collection<CompositeData> compositeData = (Collection<CompositeData>) configurationTable.values();
1:         for (CompositeData row: compositeData) {
0:             PropertyData<? extends Class> propertyData = PropertyData.from(row);
1:             configurationProperties.put(propertyData.getKey(), propertyData.getValue());
1:         }
1:         Configuration config = configurationAdmin.getConfiguration(pid, location);
1:         config.update(configurationProperties);
1:     }
1: 
1: }
============================================================================