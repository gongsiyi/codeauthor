1:14ceeb1: /*
1:14ceeb1:  * Copyright (c) OSGi Alliance 2015. All Rights Reserved.
1:14ceeb1:  *
1:14ceeb1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:14ceeb1:  * you may not use this file except in compliance with the License.
1:14ceeb1:  * You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing, software
1:14ceeb1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:14ceeb1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:14ceeb1:  * See the License for the specific language governing permissions and
1:14ceeb1:  * limitations under the License.
1:14ceeb1:  */
1:39cd3f4: package org.osgi.service.async;
1:39cd3f4: 
1:39cd3f4: import org.osgi.annotation.versioning.ProviderType;
1:39cd3f4: import org.osgi.framework.ServiceReference;
1:39cd3f4: import org.osgi.util.promise.Promise;
1:39cd3f4: 
1:39cd3f4: /**
1:39cd3f4:  * The Async Service, as defined in OSGi RFC 204
1:39cd3f4:  * https://github.com/osgi/design/tree/master/rfcs/rfc0206
1:39cd3f4:  */
1:39cd3f4: @ProviderType
1:39cd3f4: public interface Async {
1:39cd3f4:     
1:39cd3f4:     /**
1:39cd3f4:      * Create a mediated object for asynchronous calls
1:39cd3f4:      *
1:39cd3f4:      * @param target The object to mediate
1:39cd3f4:      * @param iface The type that the mediated object should implement or extend
1:39cd3f4:      * @return A mediated object
1:39cd3f4:      * @throws IllegalArgumentException if mediation fails
1:39cd3f4:      */
1:39cd3f4:     <T> T mediate(T target, Class<T> iface);
1:39cd3f4:     
1:39cd3f4:     /**
1:39cd3f4:      * Create a mediated object for asynchronous calls
1:39cd3f4:      *
1:39cd3f4:      * @param target The service reference to mediate
1:39cd3f4:      * @param iface The type that the mediated object should implement or extend
1:39cd3f4:      * @return A mediated service
1:39cd3f4:      * @throws IllegalArgumentException if mediation fails
1:39cd3f4:      */
1:39cd3f4:     <T> T mediate(ServiceReference<? extends T> target, Class<T> iface);
1:39cd3f4:     
1:39cd3f4:     /**
1:39cd3f4:      * Asynchronously run the last method call registered by a mediated object,
1:39cd3f4:      * returning the result as a Promise.
1:39cd3f4:      *
1:39cd3f4:      * @param r the return value of the mediated call
1:39cd3f4:      * @return a Promise
1:39cd3f4:      */
1:39cd3f4:     <R> Promise<R> call(R r);
1:39cd3f4:     
1:39cd3f4:     /**
1:39cd3f4:      * Asynchronously run the last method call registered by a mediated object,
1:39cd3f4:      * returning the result as a Promise.
1:39cd3f4:      *
1:39cd3f4:      * @return a Promise
1:39cd3f4:      */
1:39cd3f4:     Promise<?> call();
1:39cd3f4:     
1:39cd3f4:     /**
1:39cd3f4:      * Asynchronously run the last method call registered by a mediated object,
1:39cd3f4:      * ignoring the return value.
1:39cd3f4:      *
1:39cd3f4:      * @return a Promise indicating whether the task started successfully
1:39cd3f4:      */
1:39cd3f4:     Promise<Void> execute();
1:39cd3f4:     
1:39cd3f4: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance 2015. All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:39cd3f4
/////////////////////////////////////////////////////////////////////////
1: package org.osgi.service.async;
1: 
1: import org.osgi.annotation.versioning.ProviderType;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.util.promise.Promise;
1: 
1: /**
1:  * The Async Service, as defined in OSGi RFC 204
1:  * https://github.com/osgi/design/tree/master/rfcs/rfc0206
1:  */
1: @ProviderType
1: public interface Async {
1:     
1:     /**
1:      * Create a mediated object for asynchronous calls
1:      *
1:      * @param target The object to mediate
1:      * @param iface The type that the mediated object should implement or extend
1:      * @return A mediated object
1:      * @throws IllegalArgumentException if mediation fails
1:      */
1:     <T> T mediate(T target, Class<T> iface);
1:     
1:     /**
1:      * Create a mediated object for asynchronous calls
1:      *
1:      * @param target The service reference to mediate
1:      * @param iface The type that the mediated object should implement or extend
1:      * @return A mediated service
1:      * @throws IllegalArgumentException if mediation fails
1:      */
1:     <T> T mediate(ServiceReference<? extends T> target, Class<T> iface);
1:     
1:     /**
1:      * Asynchronously run the last method call registered by a mediated object,
1:      * returning the result as a Promise.
1:      *
1:      * @param r the return value of the mediated call
1:      * @return a Promise
1:      */
1:     <R> Promise<R> call(R r);
1:     
1:     /**
1:      * Asynchronously run the last method call registered by a mediated object,
1:      * returning the result as a Promise.
1:      *
1:      * @return a Promise
1:      */
1:     Promise<?> call();
1:     
1:     /**
1:      * Asynchronously run the last method call registered by a mediated object,
1:      * ignoring the return value.
1:      *
1:      * @return a Promise indicating whether the task started successfully
1:      */
1:     Promise<Void> execute();
1:     
1: }
============================================================================