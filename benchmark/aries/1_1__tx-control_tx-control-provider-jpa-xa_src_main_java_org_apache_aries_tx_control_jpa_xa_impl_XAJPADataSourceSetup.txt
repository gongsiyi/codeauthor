1:84a8d37: /*
1:84a8d37:  * Licensed to the Apache Software Foundation (ASF) under one
1:84a8d37:  * or more contributor license agreements.  See the NOTICE file
1:84a8d37:  * distributed with this work for additional information
1:84a8d37:  * regarding copyright ownership.  The ASF licenses this file
1:84a8d37:  * to you under the Apache License, Version 2.0 (the
1:84a8d37:  * "License"); you may not use this file except in compliance
1:84a8d37:  * with the License.  You may obtain a copy of the License at
1:84a8d37:  *
1:84a8d37:  *   http://www.apache.org/licenses/LICENSE-2.0
1:84a8d37:  *
1:84a8d37:  * Unless required by applicable law or agreed to in writing,
1:84a8d37:  * software distributed under the License is distributed on an
1:84a8d37:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:84a8d37:  * KIND, either express or implied.  See the License for the
1:84a8d37:  * specific language governing permissions and limitations
1:84a8d37:  * under the License.
1:84a8d37:  */
1:84a8d37: package org.apache.aries.tx.control.jpa.xa.impl;
1:84a8d37: 
1:84a8d37: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.USE_DRIVER;
1:84a8d37: 
1:84a8d37: import java.sql.SQLException;
1:84a8d37: import java.util.Map;
1:84a8d37: import java.util.Properties;
1:84a8d37: 
1:84a8d37: import javax.sql.DataSource;
1:84a8d37: 
1:84a8d37: import org.apache.aries.tx.control.jdbc.xa.connection.impl.XADataSourceMapper;
1:84a8d37: import org.apache.aries.tx.control.jpa.common.impl.AbstractManagedJPADataSourceSetup;
1:84a8d37: import org.apache.aries.tx.control.jpa.common.impl.AbstractManagedJPAEMFLocator;
1:84a8d37: import org.osgi.framework.BundleContext;
1:84a8d37: import org.osgi.framework.InvalidSyntaxException;
1:84a8d37: import org.osgi.service.cm.ConfigurationException;
1:84a8d37: import org.osgi.service.jdbc.DataSourceFactory;
1:84a8d37: import org.osgi.service.transaction.control.TransactionException;
1:84a8d37: 
1:84a8d37: import com.zaxxer.hikari.HikariDataSource;
1:84a8d37: 
1:84a8d37: public class XAJPADataSourceSetup extends AbstractManagedJPADataSourceSetup {
1:84a8d37: 
1:84a8d37: 	private static final String JAVAX_PERSISTENCE_NON_JTA_DATA_SOURCE = "javax.persistence.nonJtaDataSource";
1:84a8d37: 	
1:84a8d37: 	public XAJPADataSourceSetup(BundleContext context, String pid, Properties jdbcProperties,
1:84a8d37: 			Map<String, Object> baseJPAProperties, Map<String, Object> providerProperties) throws InvalidSyntaxException, ConfigurationException {
1:84a8d37: 		super(context, pid, jdbcProperties, baseJPAProperties, providerProperties);
1:84a8d37: 	}
1:84a8d37: 
1:84a8d37: 	@Override
1:84a8d37: 	protected Map<String, Object> decorateJPAProperties(DataSourceFactory dsf, Map<String, Object> providerProperties,
1:84a8d37: 			Properties jdbcProperties, Map<String, Object> jpaProperties) throws Exception {
1:84a8d37: 		DataSource unpooled;
1:84a8d37: 		try {
1:84a8d37: 			if (toBoolean(providerProperties, USE_DRIVER, false)) {
1:84a8d37: 				throw new TransactionException("The Database must use an XA connection");
1:84a8d37: 			} else {
1:84a8d37: 				unpooled = new XADataSourceMapper(dsf.createXADataSource(jdbcProperties));
1:84a8d37: 			}
1:84a8d37: 		} catch (SQLException sqle) {
1:84a8d37: 			throw new TransactionException("Unable to create the JDBC resource provider", sqle);
1:84a8d37: 		}
1:84a8d37: 
1:84a8d37: 		DataSource toUse = poolIfNecessary(providerProperties, unpooled);
1:84a8d37: 		
1:84a8d37: 		jpaProperties.put("javax.persistence.jtaDataSource", toUse);
1:84a8d37: 		
1:84a8d37: 		return jpaProperties;
1:84a8d37: 	}
1:84a8d37: 
1:84a8d37: 	@Override
1:84a8d37: 	protected void cleanupOnClose(Map<String, Object> jpaProperties) {
1:84a8d37: 		Object o = jpaProperties.get(JAVAX_PERSISTENCE_NON_JTA_DATA_SOURCE);
1:84a8d37: 		if (o instanceof HikariDataSource) {
1:84a8d37: 			((HikariDataSource)o).close();
1:84a8d37: 		}
1:84a8d37: 	}
1:84a8d37: 
1:84a8d37: 	@Override
1:84a8d37: 	protected AbstractManagedJPAEMFLocator getManagedJPAEMFLocator(BundleContext context, String pid,
1:84a8d37: 			Map<String, Object> jpaProps, Map<String, Object> providerProperties, Runnable onClose) throws Exception {
1:84a8d37: 		return new XAJPAEMFLocator(context, pid, jpaProps, providerProperties, onClose);
1:84a8d37: 	}
1:84a8d37: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:84a8d37
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.jpa.xa.impl;
1: 
1: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.USE_DRIVER;
1: 
1: import java.sql.SQLException;
1: import java.util.Map;
1: import java.util.Properties;
1: 
1: import javax.sql.DataSource;
1: 
1: import org.apache.aries.tx.control.jdbc.xa.connection.impl.XADataSourceMapper;
1: import org.apache.aries.tx.control.jpa.common.impl.AbstractManagedJPADataSourceSetup;
1: import org.apache.aries.tx.control.jpa.common.impl.AbstractManagedJPAEMFLocator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: import org.osgi.service.transaction.control.TransactionException;
1: 
1: import com.zaxxer.hikari.HikariDataSource;
1: 
1: public class XAJPADataSourceSetup extends AbstractManagedJPADataSourceSetup {
1: 
1: 	private static final String JAVAX_PERSISTENCE_NON_JTA_DATA_SOURCE = "javax.persistence.nonJtaDataSource";
1: 	
1: 	public XAJPADataSourceSetup(BundleContext context, String pid, Properties jdbcProperties,
1: 			Map<String, Object> baseJPAProperties, Map<String, Object> providerProperties) throws InvalidSyntaxException, ConfigurationException {
1: 		super(context, pid, jdbcProperties, baseJPAProperties, providerProperties);
1: 	}
1: 
1: 	@Override
1: 	protected Map<String, Object> decorateJPAProperties(DataSourceFactory dsf, Map<String, Object> providerProperties,
1: 			Properties jdbcProperties, Map<String, Object> jpaProperties) throws Exception {
1: 		DataSource unpooled;
1: 		try {
1: 			if (toBoolean(providerProperties, USE_DRIVER, false)) {
1: 				throw new TransactionException("The Database must use an XA connection");
1: 			} else {
1: 				unpooled = new XADataSourceMapper(dsf.createXADataSource(jdbcProperties));
1: 			}
1: 		} catch (SQLException sqle) {
1: 			throw new TransactionException("Unable to create the JDBC resource provider", sqle);
1: 		}
1: 
1: 		DataSource toUse = poolIfNecessary(providerProperties, unpooled);
1: 		
1: 		jpaProperties.put("javax.persistence.jtaDataSource", toUse);
1: 		
1: 		return jpaProperties;
1: 	}
1: 
1: 	@Override
1: 	protected void cleanupOnClose(Map<String, Object> jpaProperties) {
1: 		Object o = jpaProperties.get(JAVAX_PERSISTENCE_NON_JTA_DATA_SOURCE);
1: 		if (o instanceof HikariDataSource) {
1: 			((HikariDataSource)o).close();
1: 		}
1: 	}
1: 
1: 	@Override
1: 	protected AbstractManagedJPAEMFLocator getManagedJPAEMFLocator(BundleContext context, String pid,
1: 			Map<String, Object> jpaProps, Map<String, Object> providerProperties, Runnable onClose) throws Exception {
1: 		return new XAJPAEMFLocator(context, pid, jpaProps, providerProperties, onClose);
1: 	}
1: }
============================================================================