1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:84a8d37: package org.apache.aries.tx.control.jpa.common.impl;
6:4c0430e: 
1:84a8d37: import static java.util.Collections.unmodifiableMap;
1:4c0430e: import static java.util.Optional.ofNullable;
1:4c0430e: import static java.util.concurrent.TimeUnit.HOURS;
1:4c0430e: import static java.util.concurrent.TimeUnit.SECONDS;
1:4c0430e: import static org.osgi.framework.Constants.OBJECTCLASS;
1:4c0430e: import static org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_CLASS;
1:4c0430e: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.CONNECTION_LIFETIME;
1:4c0430e: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.CONNECTION_POOLING_ENABLED;
1:4c0430e: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.CONNECTION_TIMEOUT;
1:4c0430e: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.IDLE_TIMEOUT;
1:4c0430e: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.MAX_CONNECTIONS;
1:4c0430e: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.MIN_CONNECTIONS;
1:426f022: 
1:4c0430e: import java.util.HashMap;
1:4c0430e: import java.util.Map;
1:4c0430e: import java.util.Map.Entry;
1:4c0430e: import java.util.Properties;
1:4c0430e: import java.util.concurrent.TimeUnit;
1:4c0430e: import java.util.concurrent.atomic.AtomicReference;
1:4c0430e: 
1:4c0430e: import javax.sql.DataSource;
1:4c0430e: 
1:426f022: import org.apache.aries.tx.control.resource.common.impl.LifecycleAware;
1:4c0430e: import org.osgi.framework.BundleContext;
1:4c0430e: import org.osgi.framework.InvalidSyntaxException;
1:4c0430e: import org.osgi.framework.ServiceReference;
1:4c0430e: import org.osgi.service.cm.ConfigurationException;
1:4c0430e: import org.osgi.service.jdbc.DataSourceFactory;
1:4c0430e: import org.osgi.util.tracker.ServiceTracker;
1:4c0430e: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1:84a8d37: import org.slf4j.Logger;
1:84a8d37: import org.slf4j.LoggerFactory;
1:4c0430e: 
1:4c0430e: import com.zaxxer.hikari.HikariConfig;
1:4c0430e: import com.zaxxer.hikari.HikariDataSource;
1:4c0430e: 
1:84a8d37: public abstract class AbstractManagedJPADataSourceSetup implements LifecycleAware,
1:84a8d37: 		ServiceTrackerCustomizer<DataSourceFactory, AbstractManagedJPAEMFLocator> {
1:4c0430e: 
1:84a8d37: 	private static final Logger LOG = LoggerFactory.getLogger(AbstractManagedJPADataSourceSetup.class);
1:4c0430e: 	
1:4c0430e: 	private final BundleContext context;
1:4c0430e: 	private final String pid;
1:4c0430e: 	private final Properties jdbcProperties;
1:4c0430e: 	private final Map<String, Object> baseJPAProperties;
1:4c0430e: 	private final Map<String, Object> providerProperties;
1:4c0430e: 	
1:84a8d37: 	private final ServiceTracker<DataSourceFactory, AbstractManagedJPAEMFLocator> dsfTracker;
1:4c0430e: 	private final AtomicReference<ServiceReference<DataSourceFactory>> activeDsf = new AtomicReference<>();
1:4c0430e: 
1:84a8d37: 	public AbstractManagedJPADataSourceSetup(BundleContext context, String pid, Properties jdbcProperties,
1:4c0430e: 			Map<String, Object> baseJPAProperties, Map<String, Object> providerProperties) throws InvalidSyntaxException, ConfigurationException {
1:4c0430e: 		this.context = context;
1:4c0430e: 		this.pid = pid;
1:4c0430e: 		this.jdbcProperties = jdbcProperties;
1:4c0430e: 		this.baseJPAProperties = baseJPAProperties;
1:4c0430e: 		this.providerProperties = providerProperties;
1:4c0430e: 
1:84a8d37: 		String targetFilter = (String) providerProperties.get(AbstractJPAManagedServiceFactory.DSF_TARGET_FILTER);
1:4c0430e: 		if (targetFilter == null) {
1:4c0430e: 			String driver = (String) providerProperties.get(OSGI_JDBC_DRIVER_CLASS);
1:4c0430e: 			if (driver == null) {
1:84a8d37: 				LOG.error("The configuration {} must specify a target filter or a JDBC driver class", pid);
1:4c0430e: 				throw new ConfigurationException(OSGI_JDBC_DRIVER_CLASS,
1:4c0430e: 						"The configuration must specify either a target filter or a JDBC driver class");
5:4c0430e: 			}
1:4c0430e: 			targetFilter = "(" + OSGI_JDBC_DRIVER_CLASS + "=" + driver + ")";
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		targetFilter = "(&(" + OBJECTCLASS + "=" + DataSourceFactory.class.getName() + ")" + targetFilter + ")";
1:4c0430e: 
1:4c0430e: 		this.dsfTracker = new ServiceTracker<>(context, context.createFilter(targetFilter), this);
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	public void start() {
1:4c0430e: 		dsfTracker.open();
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	public void stop() {
1:4c0430e: 		dsfTracker.close();
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Override
1:84a8d37: 	public AbstractManagedJPAEMFLocator addingService(ServiceReference<DataSourceFactory> reference) {
1:4c0430e: 		DataSourceFactory service = context.getService(reference);
1:84a8d37: 		AbstractManagedJPAEMFLocator toReturn;
2:4c0430e: 		try {
1:84a8d37: 			Map<String, Object> jpaProps = decorateJPAProperties(service, 
1:84a8d37: 					unmodifiableMap(providerProperties), (Properties) jdbcProperties.clone(), 
1:84a8d37: 					new HashMap<>(baseJPAProperties));
1:84a8d37: 			toReturn = getManagedJPAEMFLocator(context, pid, jpaProps, providerProperties, 
1:84a8d37: 					() -> cleanupOnClose(jpaProps));
1:4c0430e: 		} catch (Exception e) {
1:84a8d37: 			LOG.error("An error occured creating the Resource provider for pid {}", pid, e);
1:4c0430e: 			return null;
1:426f022: 		}
1:4c0430e: 		updateService(reference, toReturn);
1:4c0430e: 		
1:4c0430e: 		return toReturn;
1:4c0430e: 	}
1:4c0430e: 
1:84a8d37: 	protected abstract Map<String, Object> decorateJPAProperties(DataSourceFactory dsf, 
1:84a8d37: 			Map<String, Object> providerProperties, Properties jdbcProperties,
1:84a8d37: 			Map<String, Object> jpaProperties) throws Exception;
1:84a8d37: 	
1:84a8d37: 	protected abstract void cleanupOnClose(Map<String, Object> jpaProperties);
1:84a8d37: 
1:84a8d37: 	protected abstract AbstractManagedJPAEMFLocator getManagedJPAEMFLocator(BundleContext context, String pid, 
1:84a8d37: 			Map<String, Object> jpaProps, Map<String, Object> providerProperties, Runnable onClose) throws Exception;
1:84a8d37: 
1:84a8d37: 	private void updateService(ServiceReference<DataSourceFactory> reference, AbstractManagedJPAEMFLocator locator) {
1:4c0430e: 		boolean setDsf;
1:4c0430e: 		synchronized (this) {
1:4c0430e: 			setDsf = activeDsf.compareAndSet(null, reference);
1:4c0430e: 		}
1:4c0430e: 		try {
1:4c0430e: 			if (setDsf) {
1:4c0430e: 				locator.start();
1:4c0430e: 			}
1:4c0430e: 		} catch (Exception e) {
1:84a8d37: 			LOG.error("An error occurred when creating the connection provider for {}.", pid, e);
1:4c0430e: 			activeDsf.compareAndSet(reference, null);
1:4c0430e: 			throw new IllegalStateException("An error occurred when creating the connection provider", e);
1:4c0430e: 		}
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Override
1:84a8d37: 	public void modifiedService(ServiceReference<DataSourceFactory> reference, AbstractManagedJPAEMFLocator service) {
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Override
1:84a8d37: 	public void removedService(ServiceReference<DataSourceFactory> reference, AbstractManagedJPAEMFLocator service) {
1:4c0430e: 		service.stop();
1:4c0430e: 
1:4c0430e: 		if (activeDsf.compareAndSet(reference, null)) {
1:84a8d37: 			Map<ServiceReference<DataSourceFactory>,AbstractManagedJPAEMFLocator> tracked = dsfTracker.getTracked();
1:4c0430e: 			if (!tracked.isEmpty()) {
1:84a8d37: 				Entry<ServiceReference<DataSourceFactory>, AbstractManagedJPAEMFLocator> e = tracked.entrySet().iterator().next();
1:4c0430e: 				updateService(e.getKey(), e.getValue());
1:4c0430e: 			}
1:4c0430e: 		}
1:4c0430e: 	}
1:4c0430e: 	
1:84a8d37: 	protected DataSource poolIfNecessary(Map<String, Object> resourceProviderProperties, DataSource unpooled) {
1:4c0430e: 		DataSource toUse;
1:4c0430e: 
1:4c0430e: 		if (toBoolean(resourceProviderProperties, CONNECTION_POOLING_ENABLED, true)) {
1:4c0430e: 			HikariConfig hcfg = new HikariConfig();
1:4c0430e: 			hcfg.setDataSource(unpooled);
1:4c0430e: 
1:4c0430e: 			// Sizes
1:4c0430e: 			hcfg.setMaximumPoolSize(toInt(resourceProviderProperties, MAX_CONNECTIONS, 10));
1:4c0430e: 			hcfg.setMinimumIdle(toInt(resourceProviderProperties, MIN_CONNECTIONS, 10));
1:4c0430e: 
1:4c0430e: 			// Timeouts
1:4c0430e: 			hcfg.setConnectionTimeout(toLong(resourceProviderProperties, CONNECTION_TIMEOUT, SECONDS.toMillis(30)));
1:4c0430e: 			hcfg.setIdleTimeout(toLong(resourceProviderProperties, IDLE_TIMEOUT, TimeUnit.MINUTES.toMillis(3)));
1:4c0430e: 			hcfg.setMaxLifetime(toLong(resourceProviderProperties, CONNECTION_LIFETIME, HOURS.toMillis(3)));
1:4c0430e: 
1:4c0430e: 			toUse = new HikariDataSource(hcfg);
1:4c0430e: 
2:4c0430e: 		} else {
1:4c0430e: 			toUse = unpooled;
1:4c0430e: 		}
1:4c0430e: 		return toUse;
1:4c0430e: 	}
1:4c0430e: 
1:84a8d37: 	protected boolean toBoolean(Map<String, Object> props, String key, boolean defaultValue) {
1:4c0430e: 		Object o =  ofNullable(props)
1:4c0430e: 			.map(m -> m.get(key))
1:4c0430e: 			.orElse(defaultValue);
1:4c0430e: 		
1:4c0430e: 		if (o instanceof Boolean) {
1:4c0430e: 			return ((Boolean) o).booleanValue();
1:4c0430e: 		} else if(o instanceof String) {
1:4c0430e: 			return Boolean.parseBoolean((String) o);
1:4c0430e: 		} else {
1:4c0430e: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a boolean");
1:4c0430e: 		}
1:4c0430e: 	}
1:4c0430e: 
1:84a8d37: 	protected int toInt(Map<String, Object> props, String key, int defaultValue) {
1:4c0430e: 		
1:4c0430e: 		Object o =  ofNullable(props)
1:4c0430e: 				.map(m -> m.get(key))
1:4c0430e: 				.orElse(defaultValue);
1:4c0430e: 		
1:4c0430e: 		if (o instanceof Number) {
1:4c0430e: 			return ((Number) o).intValue();
1:4c0430e: 		} else if(o instanceof String) {
1:4c0430e: 			return Integer.parseInt((String) o);
1:4c0430e: 		} else {
1:4c0430e: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to an int");
1:4c0430e: 		}
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	private long toLong(Map<String, Object> props, String key, long defaultValue) {
1:4c0430e: 		
1:4c0430e: 		Object o =  ofNullable(props)
1:4c0430e: 				.map(m -> m.get(key))
1:4c0430e: 				.orElse(defaultValue);
1:4c0430e: 		
1:4c0430e: 		if (o instanceof Number) {
1:4c0430e: 			return ((Number) o).longValue();
1:4c0430e: 		} else if(o instanceof String) {
1:4c0430e: 			return Long.parseLong((String) o);
1:4c0430e: 		} else {
1:4c0430e: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a long");
1:4c0430e: 		}
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:84a8d37
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.common.impl;
1: import static java.util.Collections.unmodifiableMap;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: public abstract class AbstractManagedJPADataSourceSetup implements LifecycleAware,
1: 		ServiceTrackerCustomizer<DataSourceFactory, AbstractManagedJPAEMFLocator> {
1: 	private static final Logger LOG = LoggerFactory.getLogger(AbstractManagedJPADataSourceSetup.class);
/////////////////////////////////////////////////////////////////////////
1: 	private final ServiceTracker<DataSourceFactory, AbstractManagedJPAEMFLocator> dsfTracker;
1: 	public AbstractManagedJPADataSourceSetup(BundleContext context, String pid, Properties jdbcProperties,
/////////////////////////////////////////////////////////////////////////
1: 		String targetFilter = (String) providerProperties.get(AbstractJPAManagedServiceFactory.DSF_TARGET_FILTER);
1: 				LOG.error("The configuration {} must specify a target filter or a JDBC driver class", pid);
/////////////////////////////////////////////////////////////////////////
1: 	public AbstractManagedJPAEMFLocator addingService(ServiceReference<DataSourceFactory> reference) {
1: 		AbstractManagedJPAEMFLocator toReturn;
1: 			Map<String, Object> jpaProps = decorateJPAProperties(service, 
1: 					unmodifiableMap(providerProperties), (Properties) jdbcProperties.clone(), 
1: 					new HashMap<>(baseJPAProperties));
1: 			toReturn = getManagedJPAEMFLocator(context, pid, jpaProps, providerProperties, 
1: 					() -> cleanupOnClose(jpaProps));
1: 			LOG.error("An error occured creating the Resource provider for pid {}", pid, e);
/////////////////////////////////////////////////////////////////////////
1: 	protected abstract Map<String, Object> decorateJPAProperties(DataSourceFactory dsf, 
1: 			Map<String, Object> providerProperties, Properties jdbcProperties,
1: 			Map<String, Object> jpaProperties) throws Exception;
1: 	
1: 	protected abstract void cleanupOnClose(Map<String, Object> jpaProperties);
1: 
1: 	protected abstract AbstractManagedJPAEMFLocator getManagedJPAEMFLocator(BundleContext context, String pid, 
1: 			Map<String, Object> jpaProps, Map<String, Object> providerProperties, Runnable onClose) throws Exception;
1: 
1: 	private void updateService(ServiceReference<DataSourceFactory> reference, AbstractManagedJPAEMFLocator locator) {
/////////////////////////////////////////////////////////////////////////
1: 			LOG.error("An error occurred when creating the connection provider for {}.", pid, e);
1: 	public void modifiedService(ServiceReference<DataSourceFactory> reference, AbstractManagedJPAEMFLocator service) {
1: 	public void removedService(ServiceReference<DataSourceFactory> reference, AbstractManagedJPAEMFLocator service) {
1: 			Map<ServiceReference<DataSourceFactory>,AbstractManagedJPAEMFLocator> tracked = dsfTracker.getTracked();
1: 				Entry<ServiceReference<DataSourceFactory>, AbstractManagedJPAEMFLocator> e = tracked.entrySet().iterator().next();
1: 	protected DataSource poolIfNecessary(Map<String, Object> resourceProviderProperties, DataSource unpooled) {
/////////////////////////////////////////////////////////////////////////
1: 	protected boolean toBoolean(Map<String, Object> props, String key, boolean defaultValue) {
/////////////////////////////////////////////////////////////////////////
1: 	protected int toInt(Map<String, Object> props, String key, int defaultValue) {
commit:426f022
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.resource.common.impl.LifecycleAware;
/////////////////////////////////////////////////////////////////////////
0: 	private static final String JAVAX_PERSISTENCE_NON_JTA_DATA_SOURCE = "javax.persistence.nonJtaDataSource";
1: 	
/////////////////////////////////////////////////////////////////////////
0: 					getJPAProperties(service), providerProperties, () -> {
0: 						Object o = providerProperties.get(JAVAX_PERSISTENCE_NON_JTA_DATA_SOURCE);
0: 						if (o instanceof HikariDataSource) {
0: 							((HikariDataSource)o).close();
1: 						}
0: 					});
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:4c0430e
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.tx.control.jpa.xa.impl;
1: 
1: import static java.util.Optional.ofNullable;
1: import static java.util.concurrent.TimeUnit.HOURS;
1: import static java.util.concurrent.TimeUnit.SECONDS;
1: import static org.osgi.framework.Constants.OBJECTCLASS;
1: import static org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_CLASS;
1: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.CONNECTION_LIFETIME;
1: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.CONNECTION_POOLING_ENABLED;
1: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.CONNECTION_TIMEOUT;
1: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.IDLE_TIMEOUT;
1: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.MAX_CONNECTIONS;
1: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.MIN_CONNECTIONS;
0: import static org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory.USE_DRIVER;
1: 
0: import java.sql.SQLException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: import java.util.Properties;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import javax.sql.DataSource;
1: 
0: import org.apache.aries.tx.control.jdbc.xa.connection.impl.XADataSourceMapper;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.jdbc.DataSourceFactory;
0: import org.osgi.service.transaction.control.TransactionException;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1: 
1: import com.zaxxer.hikari.HikariConfig;
1: import com.zaxxer.hikari.HikariDataSource;
1: 
0: public class ManagedJPADataSourceSetup implements LifecycleAware,
0: 		ServiceTrackerCustomizer<DataSourceFactory, ManagedJPAEMFLocator> {
1: 
1: 	private final BundleContext context;
1: 	private final String pid;
1: 	private final Properties jdbcProperties;
1: 	private final Map<String, Object> baseJPAProperties;
1: 	private final Map<String, Object> providerProperties;
1: 	
0: 	private final ServiceTracker<DataSourceFactory, ManagedJPAEMFLocator> dsfTracker;
1: 	private final AtomicReference<ServiceReference<DataSourceFactory>> activeDsf = new AtomicReference<>();
1: 
0: 	public ManagedJPADataSourceSetup(BundleContext context, String pid, Properties jdbcProperties,
1: 			Map<String, Object> baseJPAProperties, Map<String, Object> providerProperties) throws InvalidSyntaxException, ConfigurationException {
1: 		this.context = context;
1: 		this.pid = pid;
1: 		this.jdbcProperties = jdbcProperties;
1: 		this.baseJPAProperties = baseJPAProperties;
1: 		this.providerProperties = providerProperties;
1: 
0: 		String targetFilter = (String) providerProperties.get(ManagedServiceFactoryImpl.DSF_TARGET_FILTER);
1: 		if (targetFilter == null) {
1: 			String driver = (String) providerProperties.get(OSGI_JDBC_DRIVER_CLASS);
1: 			if (driver == null) {
0: 				ManagedServiceFactoryImpl.LOG.error("The configuration {} must specify a target filter or a JDBC driver class", pid);
1: 				throw new ConfigurationException(OSGI_JDBC_DRIVER_CLASS,
1: 						"The configuration must specify either a target filter or a JDBC driver class");
1: 			}
1: 			targetFilter = "(" + OSGI_JDBC_DRIVER_CLASS + "=" + driver + ")";
1: 		}
1: 
1: 		targetFilter = "(&(" + OBJECTCLASS + "=" + DataSourceFactory.class.getName() + ")" + targetFilter + ")";
1: 
1: 		this.dsfTracker = new ServiceTracker<>(context, context.createFilter(targetFilter), this);
1: 	}
1: 
1: 	public void start() {
1: 		dsfTracker.open();
1: 	}
1: 
1: 	public void stop() {
1: 		dsfTracker.close();
1: 	}
1: 
1: 	@Override
0: 	public ManagedJPAEMFLocator addingService(ServiceReference<DataSourceFactory> reference) {
1: 		DataSourceFactory service = context.getService(reference);
0: 		ManagedJPAEMFLocator toReturn;
1: 		try {
0: 			toReturn = new ManagedJPAEMFLocator(context, pid, 
0: 					getJPAProperties(service), providerProperties);
1: 		} catch (Exception e) {
0: 			// TODO Auto-generated catch block
0: 			e.printStackTrace();
1: 			return null;
1: 		}
1: 		updateService(reference, toReturn);
1: 		
1: 		return toReturn;
1: 	}
1: 
0: 	private void updateService(ServiceReference<DataSourceFactory> reference, ManagedJPAEMFLocator locator) {
1: 		boolean setDsf;
1: 		synchronized (this) {
1: 			setDsf = activeDsf.compareAndSet(null, reference);
1: 		}
1: 		try {
1: 			if (setDsf) {
1: 				locator.start();
1: 			}
1: 		} catch (Exception e) {
0: 			ManagedServiceFactoryImpl.LOG.error("An error occurred when creating the connection provider for {}.", pid, e);
1: 			activeDsf.compareAndSet(reference, null);
1: 			throw new IllegalStateException("An error occurred when creating the connection provider", e);
1: 		}
1: 	}
1: 
0: 	private Map<String, Object> getJPAProperties(DataSourceFactory dsf) {
0: 		Map<String, Object> props = new HashMap<>(baseJPAProperties);
1: 		
0: 		DataSource unpooled;
1: 		try {
0: 			if (toBoolean(providerProperties, USE_DRIVER, false)) {
0: 				throw new TransactionException("The Database must use an XA connection");
1: 			} else {
0: 				unpooled = new XADataSourceMapper(dsf.createXADataSource(jdbcProperties));
1: 			}
0: 		} catch (SQLException sqle) {
0: 			throw new TransactionException("Unable to create the JDBC resource provider", sqle);
1: 		}
1: 
0: 		DataSource toUse = poolIfNecessary(providerProperties, unpooled);
1: 		
0: 		props.put("javax.persistence.jtaDataSource", toUse);
1: 		
0: 		return props;
1: 	}
1: 	
1: 	@Override
0: 	public void modifiedService(ServiceReference<DataSourceFactory> reference, ManagedJPAEMFLocator service) {
1: 	}
1: 
1: 	@Override
0: 	public void removedService(ServiceReference<DataSourceFactory> reference, ManagedJPAEMFLocator service) {
1: 		service.stop();
1: 
1: 		if (activeDsf.compareAndSet(reference, null)) {
0: 			Map<ServiceReference<DataSourceFactory>,ManagedJPAEMFLocator> tracked = dsfTracker.getTracked();
1: 			if (!tracked.isEmpty()) {
0: 				Entry<ServiceReference<DataSourceFactory>, ManagedJPAEMFLocator> e = tracked.entrySet().iterator().next();
1: 				updateService(e.getKey(), e.getValue());
1: 			}
1: 		}
1: 	}
1: 	
0: 	private DataSource poolIfNecessary(Map<String, Object> resourceProviderProperties, DataSource unpooled) {
1: 		DataSource toUse;
1: 
1: 		if (toBoolean(resourceProviderProperties, CONNECTION_POOLING_ENABLED, true)) {
1: 			HikariConfig hcfg = new HikariConfig();
1: 			hcfg.setDataSource(unpooled);
1: 
1: 			// Sizes
1: 			hcfg.setMaximumPoolSize(toInt(resourceProviderProperties, MAX_CONNECTIONS, 10));
1: 			hcfg.setMinimumIdle(toInt(resourceProviderProperties, MIN_CONNECTIONS, 10));
1: 
1: 			// Timeouts
1: 			hcfg.setConnectionTimeout(toLong(resourceProviderProperties, CONNECTION_TIMEOUT, SECONDS.toMillis(30)));
1: 			hcfg.setIdleTimeout(toLong(resourceProviderProperties, IDLE_TIMEOUT, TimeUnit.MINUTES.toMillis(3)));
1: 			hcfg.setMaxLifetime(toLong(resourceProviderProperties, CONNECTION_LIFETIME, HOURS.toMillis(3)));
1: 
1: 			toUse = new HikariDataSource(hcfg);
1: 
1: 		} else {
1: 			toUse = unpooled;
1: 		}
1: 		return toUse;
1: 	}
1: 
0: 	private boolean toBoolean(Map<String, Object> props, String key, boolean defaultValue) {
1: 		Object o =  ofNullable(props)
1: 			.map(m -> m.get(key))
1: 			.orElse(defaultValue);
1: 		
1: 		if (o instanceof Boolean) {
1: 			return ((Boolean) o).booleanValue();
1: 		} else if(o instanceof String) {
1: 			return Boolean.parseBoolean((String) o);
1: 		} else {
1: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a boolean");
1: 		}
1: 	}
1: 
0: 	private int toInt(Map<String, Object> props, String key, int defaultValue) {
1: 		
1: 		Object o =  ofNullable(props)
1: 				.map(m -> m.get(key))
1: 				.orElse(defaultValue);
1: 		
1: 		if (o instanceof Number) {
1: 			return ((Number) o).intValue();
1: 		} else if(o instanceof String) {
1: 			return Integer.parseInt((String) o);
1: 		} else {
1: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to an int");
1: 		}
1: 	}
1: 
1: 	private long toLong(Map<String, Object> props, String key, long defaultValue) {
1: 		
1: 		Object o =  ofNullable(props)
1: 				.map(m -> m.get(key))
1: 				.orElse(defaultValue);
1: 		
1: 		if (o instanceof Number) {
1: 			return ((Number) o).longValue();
1: 		} else if(o instanceof String) {
1: 			return Long.parseLong((String) o);
1: 		} else {
1: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a long");
1: 		}
1: 	}
1: 
1: }
============================================================================