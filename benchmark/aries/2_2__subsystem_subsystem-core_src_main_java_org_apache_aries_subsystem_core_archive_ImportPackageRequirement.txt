1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:fc759fb: package org.apache.aries.subsystem.core.archive;
4:fc759fb: 
1:deca8ed: import java.util.Collection;
1:deca8ed: import java.util.Collections;
1:deca8ed: import java.util.HashMap;
1:deca8ed: import java.util.Map;
1:fc759fb: 
1:67ef08f: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
1:fc759fb: import org.osgi.framework.namespace.PackageNamespace;
1:deca8ed: import org.osgi.resource.Resource;
1:fc759fb: 
1:deca8ed: public class ImportPackageRequirement extends AbstractRequirement {
1:c1afebc: 	public static final String DIRECTIVE_FILTER = PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE;
1:c1afebc: 	public static final String NAMESPACE = PackageNamespace.PACKAGE_NAMESPACE;
1:fc759fb: 	
1:bc9f4bc: 	private final Map<String, String> directives;
1:c1afebc: 	private final Resource resource;
1:c1afebc: 	
1:c1afebc: 	public ImportPackageRequirement(ImportPackageHeader.Clause clause, Resource resource) {
1:bc9f4bc: 		Collection<Directive> clauseDirectives = clause.getDirectives();
1:bc9f4bc: 		directives = new HashMap<String, String>(clauseDirectives.size() + 1);
1:bc9f4bc: 		for (Directive directive : clauseDirectives)
1:bc9f4bc: 			directives.put(directive.getName(), directive.getValue());
1:deca8ed: 		Collection<String> packageNames = clause.getPackageNames();
1:deca8ed: 		if (packageNames.isEmpty() || packageNames.size() > 1)
1:deca8ed: 			throw new IllegalArgumentException("Only one package name per requirement allowed");
1:deca8ed: 		StringBuilder filter = new StringBuilder("(&(").append(NAMESPACE)
1:deca8ed: 				.append('=').append(packageNames.iterator().next()).append(')');
1:deca8ed: 		VersionRangeAttribute versionRange = clause.getVersionRangeAttribute();
1:deca8ed: 		if (versionRange != null) {
1:deca8ed: 			versionRange.appendToFilter(filter);
1:c1afebc: 		}
1:1ed4d8e: 		for(Attribute packageAttribute : clause.getAttributes()) {
1:1ed4d8e: 			if (!(packageAttribute instanceof  VersionRangeAttribute)) {
1:1ed4d8e: 			    packageAttribute.appendToFilter(filter);
1:1ed4d8e: 			}
1:1ed4d8e: 		}
1:c1afebc: 		directives.put(DIRECTIVE_FILTER, filter.append(')').toString());
1:c1afebc: 		this.resource = resource;
3:fc759fb: 	}
1:1ed4d8e: 
1:deca8ed: 	@Override
1:deca8ed: 	public Map<String, Object> getAttributes() {
1:deca8ed: 		return Collections.emptyMap();
1:deca8ed: 	}
1:deca8ed: 
1:deca8ed: 	@Override
1:deca8ed: 	public Map<String, String> getDirectives() {
1:deca8ed: 		return Collections.unmodifiableMap(directives);
1:deca8ed: 	}
1:deca8ed: 
1:deca8ed: 	@Override
1:deca8ed: 	public String getNamespace() {
1:c1afebc: 		return NAMESPACE;
1:deca8ed: 	}
1:deca8ed: 
1:deca8ed: 	@Override
1:deca8ed: 	public Resource getResource() {
1:c1afebc: 		return resource;
1:fc759fb: 	}
1:fc759fb: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:1ed4d8e
/////////////////////////////////////////////////////////////////////////
1: 		for(Attribute packageAttribute : clause.getAttributes()) {
1: 			if (!(packageAttribute instanceof  VersionRangeAttribute)) {
1: 			    packageAttribute.appendToFilter(filter);
1: 			}
1: 		}
1: 
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:bc9f4bc
/////////////////////////////////////////////////////////////////////////
1: 	private final Map<String, String> directives;
1: 		Collection<Directive> clauseDirectives = clause.getDirectives();
1: 		directives = new HashMap<String, String>(clauseDirectives.size() + 1);
1: 		for (Directive directive : clauseDirectives)
1: 			directives.put(directive.getName(), directive.getValue());
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
commit:35094c6
/////////////////////////////////////////////////////////////////////////
commit:c1afebc
/////////////////////////////////////////////////////////////////////////
1: 	public static final String DIRECTIVE_FILTER = PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE;
1: 	public static final String NAMESPACE = PackageNamespace.PACKAGE_NAMESPACE;
1: 	private final Resource resource;
0: 		this(clause, null);
1: 	}
1: 	
1: 	public ImportPackageRequirement(ImportPackageHeader.Clause clause, Resource resource) {
/////////////////////////////////////////////////////////////////////////
1: 		directives.put(DIRECTIVE_FILTER, filter.append(')').toString());
1: 		this.resource = resource;
/////////////////////////////////////////////////////////////////////////
1: 		return NAMESPACE;
1: 		return resource;
commit:deca8ed
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
0: import org.apache.aries.subsystem.core.resource.AbstractRequirement;
1: import org.osgi.resource.Resource;
1: public class ImportPackageRequirement extends AbstractRequirement {
/////////////////////////////////////////////////////////////////////////
0: 	private final Map<String, String> directives = new HashMap<String, String>(1);
0: 	public ImportPackageRequirement(ImportPackageHeader.Clause clause) {
1: 		Collection<String> packageNames = clause.getPackageNames();
1: 		if (packageNames.isEmpty() || packageNames.size() > 1)
1: 			throw new IllegalArgumentException("Only one package name per requirement allowed");
1: 		StringBuilder filter = new StringBuilder("(&(").append(NAMESPACE)
1: 				.append('=').append(packageNames.iterator().next()).append(')');
1: 		VersionRangeAttribute versionRange = clause.getVersionRangeAttribute();
1: 		if (versionRange != null) {
1: 			versionRange.appendToFilter(filter);
0: 		directives.put(FILTER, filter.append(')').toString());
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.emptyMap();
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.unmodifiableMap(directives);
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
0: 		return PackageNamespace.PACKAGE_NAMESPACE;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
0: 		return null;
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.resource.Requirement;
commit:fc759fb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import org.osgi.framework.namespace.PackageNamespace;
0: import org.osgi.framework.resource.Requirement;
1: 
0: public class ImportPackageRequirement {
0: 	private static final String BUNDLE_SYMBOLICNAME = PackageNamespace.CAPABILITY_BUNDLE_SYMBOLICNAME_ATTRIBUTE;
0: 	private static final String BUNDLE_VERSION = PackageNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE;
0: 	private static final String EQUAL = "=";
0: 	private static final String FILTER = PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE;
0: 	private static final String GREATER_THAN = ">";
0: 	private static final String GREATER_THAN_OR_EQUAL = GREATER_THAN + EQUAL;
0: 	private static final String LESS_THAN = "<";
0: 	private static final String LESS_THAN_OR_EQUAL = LESS_THAN + EQUAL;
0: 	private static final String NAMESPACE = PackageNamespace.PACKAGE_NAMESPACE;
0: 	private static final String RESOLUTION = PackageNamespace.REQUIREMENT_RESOLUTION_DIRECTIVE;
0: 	private static final String RESOLUTION_MANDATORY = PackageNamespace.RESOLUTION_MANDATORY;
0: 	private static final String RESOLUTION_OPTIONAL = PackageNamespace.RESOLUTION_OPTIONAL;
0: 	private static final String VERSION = PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE;
1: 	
0: 	private static final String REGEX = 
0: 			"\\((" + NAMESPACE + ")(=)([^\\)]+)\\)";
0: 	private static final Pattern PATTERN = Pattern.compile(REGEX);
1: 	
0: 	private final String packageName;
1: 	
0: 	public ImportPackageRequirement(Requirement requirement) {
0: 		if (!NAMESPACE.equals(requirement.getNamespace()))
0: 			throw new IllegalArgumentException("Requirement must be in the '" + NAMESPACE + "' namespace");
0: 		String filter = requirement.getDirectives().get(FILTER);
0: 		String packageName = null;
0: 		Matcher matcher = PATTERN.matcher(filter);
0: 		while (matcher.find()) {
0: 			String name = matcher.group(1);
0: 			String operator = matcher.group(2);
0: 			String value = matcher.group(3);
0: 			if (NAMESPACE.equals(name)) {
0: 				packageName = value;
1: 			}
1: 		}
0: 		if (packageName == null)
0: 			throw new IllegalArgumentException("Missing filter key: " + NAMESPACE);
0: 		this.packageName = packageName;
1: 	}
1: 	
0: 	public ImportPackageHeader.Clause toClause() {
0: 		return new ImportPackageHeader.Clause(packageName);
1: 	}
1: }
============================================================================