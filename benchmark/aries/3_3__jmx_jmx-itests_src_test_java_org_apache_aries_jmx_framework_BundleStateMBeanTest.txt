1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.framework;
32:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertFalse;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:fdf3952: import static org.junit.Assert.assertTrue;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.options;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.OBJECTNAME;
1:fdf3952: 
1:bf76d9d: import java.io.ByteArrayInputStream;
1:bf76d9d: import java.io.ByteArrayOutputStream;
1:bf76d9d: import java.io.InputStream;
1:fdf3952: import java.util.ArrayList;
1:fdf3952: import java.util.Arrays;
1:bf76d9d: import java.util.Collection;
1:c4c8b5b: import java.util.HashSet;
1:5040e04: import java.util.Hashtable;
1:fdf3952: import java.util.List;
1:631b1ec: import java.util.Map;
1:5040e04: import java.util.Set;
1:ade4709: import java.util.jar.JarOutputStream;
1:ade4709: import java.util.jar.Manifest;
1:fdf3952: 
1:ade4709: import javax.management.AttributeChangeNotification;
1:ade4709: import javax.management.AttributeChangeNotificationFilter;
1:fdf3952: import javax.management.Notification;
1:fdf3952: import javax.management.NotificationListener;
1:fdf3952: import javax.management.ObjectName;
1:bf76d9d: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.AbstractIntegrationTest;
1:fdf3952: import org.apache.aries.jmx.codec.BundleData.Header;
1:0a8778f: import org.junit.Before;
1:fdf3952: import org.junit.Test;
1:0a8778f: import org.ops4j.pax.exam.Configuration;
1:fdf3952: import org.ops4j.pax.exam.Option;
1:0a8778f: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:0a8778f: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.Version;
1:631b1ec: import org.osgi.framework.wiring.BundleCapability;
1:631b1ec: import org.osgi.framework.wiring.BundleRevision;
1:631b1ec: import org.osgi.framework.wiring.BundleWiring;
1:fdf3952: import org.osgi.jmx.framework.BundleStateMBean;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:0a8778f: @ExamReactorStrategy(PerMethod.class)
1:fdf3952: public class BundleStateMBeanTest extends AbstractIntegrationTest {
1:fdf3952: 
1:0a8778f:     private ObjectName objectName;
1:0a8778f: 	private BundleStateMBean mbean;
1:0a8778f: 	private Bundle a;
1:0a8778f: 	private Bundle b;
1:0a8778f: 	private Bundle fragc;
1:0a8778f: 	private Bundle d;
1:fdf3952: 
1:0a8778f: 	@Configuration
1:0a8778f:     public Option[] configuration() {
1:0a8778f: 		return options(
1:0a8778f: 				// new VMOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"),
1:0a8778f: 				// new TimeoutOption( 0 ),
1:0a8778f: 				jmxRuntime(), 
1:0a8778f: 				bundlea(),
1:0a8778f: 				bundleb(),
1:0a8778f: 				fragmentc(),
1:0a8778f: 				bundled(),
1:0a8778f: 				bundlee());
3:fdf3952:     }
1:bf76d9d: 
1:0a8778f:     @Before
1:fdf3952:     public void doSetUp() throws Exception {
1:0a8778f:     	objectName = waitForMBean(BundleStateMBean.OBJECTNAME);
1:0a8778f:         mbean = getMBean(BundleStateMBean.OBJECTNAME, BundleStateMBean.class);
1:0a8778f:         //get bundles
1:0a8778f:         a = getBundleByName("org.apache.aries.jmx.test.bundlea");
1:0a8778f:         b = getBundleByName("org.apache.aries.jmx.test.bundleb");
1:0a8778f:         fragc = getBundleByName("org.apache.aries.jmx.test.fragc");
1:0a8778f:         d = getBundleByName("org.apache.aries.jmx.test.bundled");
1:fdf3952:     }
1:fdf3952: 
1:bf76d9d:     @Test
1:5040e04:     public void testObjectName() throws Exception {
1:5040e04:         Set<ObjectName> names = mbeanServer.queryNames(new ObjectName(BundleStateMBean.OBJECTNAME + ",*"), null);
1:5040e04:         assertEquals(1, names.size());
1:5040e04:         ObjectName name = names.iterator().next();
1:5040e04:         Hashtable<String, String> props = name.getKeyPropertyList();
1:5040e04:         assertEquals(context().getProperty(Constants.FRAMEWORK_UUID), props.get("uuid"));
1:5040e04:         assertEquals(context().getBundle(0).getSymbolicName(), props.get("framework"));
1:5040e04:     }
1:5040e04: 
1:5040e04:     @Test
1:fdf3952:     public void testMBeanInterface() throws Exception {
1:fdf3952:         // exportedPackages
1:fdf3952:         String[] exports = mbean.getExportedPackages(a.getBundleId());
1:fdf3952:         assertEquals(2, exports.length);
1:fdf3952:         List<String> packages = Arrays.asList(exports);
1:fdf3952:         assertTrue(packages.contains("org.apache.aries.jmx.test.bundlea.api;2.0.0"));
1:fdf3952:         assertTrue(packages.contains("org.apache.aries.jmx.test.fragmentc;0.0.0"));
1:fdf3952: 
1:0a8778f:         // fragments
1:fdf3952:         long[] fragments = mbean.getFragments(a.getBundleId());
1:fdf3952:         assertEquals(1, fragments.length);
1:0a8778f:         assertEquals(fragc.getBundleId() , fragments[0]);
1:fdf3952: 
1:0a8778f:         // headers
1:fdf3952:         TabularData headers = mbean.getHeaders(b.getBundleId());
1:fdf3952:         assertNotNull(headers);
1:fdf3952:         assertEquals(BundleStateMBean.HEADERS_TYPE, headers.getTabularType());
1:fdf3952:         assertTrue(headers.values().size() >= 4 );
1:fdf3952:         assertEquals("org.apache.aries.jmx.test.bundleb", Header.from(headers.get(new Object[] {Constants.BUNDLE_SYMBOLICNAME})).getValue());
1:fdf3952: 
1:0a8778f:         // hosts
1:0a8778f:         long[] hosts = mbean.getHosts(fragc.getBundleId());
1:fdf3952:         assertEquals(1, hosts.length);
1:fdf3952:         assertEquals(a.getBundleId() , hosts[0]);
1:fdf3952: 
1:fdf3952:         //imported packages
1:fdf3952:         String[] imports = mbean.getImportedPackages(a.getBundleId());
1:fdf3952:         assertTrue(imports.length >= 3);
1:fdf3952:         List<String> importedPackages = Arrays.asList(imports);
1:fdf3952:         Version version = getPackageVersion("org.osgi.framework");
1:fdf3952:         assertTrue(importedPackages.contains("org.osgi.framework;" + version.toString()));
1:fdf3952:         assertTrue(importedPackages.contains("org.apache.aries.jmx.test.bundleb.api;1.1.0"));
1:fdf3952: 
1:fdf3952:         //last modified
1:fdf3952:         assertTrue(mbean.getLastModified(b.getBundleId()) > 0);
1:fdf3952: 
1:fdf3952:         //location
1:fdf3952:         assertEquals(b.getLocation(), mbean.getLocation(b.getBundleId()));
1:fdf3952: 
1:fdf3952:         //registered services
1:fdf3952:         long[] serviceIds = mbean.getRegisteredServices(a.getBundleId());
1:fdf3952:         assertEquals(1, serviceIds.length);
1:fdf3952: 
1:fdf3952:         //required bundles
1:fdf3952:         long[] required = mbean.getRequiredBundles(d.getBundleId());
1:fdf3952:         assertEquals(1, required.length);
1:fdf3952:         assertEquals(a.getBundleId(), required[0]);
1:fdf3952: 
1:fdf3952:         //requiring bundles
1:fdf3952:         long[] requiring = mbean.getRequiringBundles(a.getBundleId());
1:0a8778f:         assertEquals(2, requiring.length);
1:0a8778f:         assertTrue(fragc.getSymbolicName(), arrayContains(fragc.getBundleId(), requiring));
1:fdf3952:         assertTrue(d.getSymbolicName(), arrayContains(d.getBundleId(), requiring));
1:fdf3952: 
1:fdf3952:         //services in use
1:fdf3952:         long[] servicesInUse = mbean.getServicesInUse(a.getBundleId());
1:fdf3952:         assertEquals(1, servicesInUse.length);
1:fdf3952: 
1:fdf3952:         //start level
1:fdf3952:         long startLevel = mbean.getStartLevel(b.getBundleId());
1:fdf3952:         assertTrue(startLevel >= 0);
1:fdf3952: 
1:fdf3952:         //state
1:fdf3952:         assertEquals("ACTIVE", mbean.getState(b.getBundleId()));
1:fdf3952: 
1:fdf3952:         //isFragment
1:fdf3952:         assertFalse(mbean.isFragment(b.getBundleId()));
1:0a8778f:         assertTrue(mbean.isFragment(fragc.getBundleId()));
1:fdf3952: 
1:fdf3952:         //isRemovalPending
1:fdf3952:         assertFalse(mbean.isRemovalPending(b.getBundleId()));
1:fdf3952: 
1:fdf3952:         // isRequired
1:fdf3952:         assertTrue(mbean.isRequired(a.getBundleId()));
1:fdf3952:         assertTrue(mbean.isRequired(b.getBundleId()));
1:fdf3952: 
1:fdf3952:         // listBundles
1:fdf3952:         TabularData bundlesTable = mbean.listBundles();
1:fdf3952:         assertNotNull(bundlesTable);
1:fdf3952:         assertEquals(BundleStateMBean.BUNDLES_TYPE, bundlesTable.getTabularType());
1:fdf3952:         assertEquals(bundleContext.getBundles().length, bundlesTable.values().size());
1:fdf3952: 
1:fdf3952:         // notifications
1:fdf3952:         final List<Notification> received = new ArrayList<Notification>();
1:fdf3952: 
1:7186eab:         mbeanServer.addNotificationListener(objectName, new NotificationListener() {
1:fdf3952:             public void handleNotification(Notification notification, Object handback) {
1:fdf3952:                received.add(notification);
1:fdf3952:             }
1:fdf3952:         }, null, null);
1:fdf3952: 
1:fdf3952:         assertEquals(Bundle.ACTIVE, b.getState());
1:fdf3952:         b.stop();
1:fdf3952:         assertEquals(Bundle.RESOLVED, b.getState());
1:fdf3952:         b.start();
1:fdf3952:         assertEquals(Bundle.ACTIVE, b.getState());
1:fdf3952: 
1:fdf3952:         int i = 0;
1:fdf3952:         while (received.size() < 2 && i < 3) {
1:fdf3952:             Thread.sleep(1000);
1:fdf3952:             i++;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         assertEquals(2, received.size());
1:ade4709:     }
1:ade4709: 
1:ade4709:     @Test
1:ade4709:     public void testAttributeChangeNotifications() throws Exception {
1:ade4709:         final List<AttributeChangeNotification> attributeChanges = new ArrayList<AttributeChangeNotification>();
1:ade4709:         AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter();
1:ade4709:         filter.disableAllAttributes();
1:ade4709:         filter.enableAttribute("BundleIds");
1:ade4709: 
1:ade4709:         mbeanServer.addNotificationListener(objectName, new NotificationListener() {
1:ade4709:             public void handleNotification(Notification notification, Object handback) {
1:ade4709:                 attributeChanges.add((AttributeChangeNotification) notification);
1:ade4709:             }
1:ade4709:         }, filter, null);
1:ade4709: 
1:ade4709:         long[] idsWithout = mbean.getBundleIds();
1:ade4709: 
1:ade4709:         assertEquals("Precondition", 0, attributeChanges.size());
1:ade4709: 
1:ade4709:         Manifest mf = new Manifest();
1:ade4709:         mf.getMainAttributes().putValue("Bundle-ManifestVersion", "2");
1:ade4709:         mf.getMainAttributes().putValue("Bundle-SymbolicName", "empty-test-bundle");
1:ade4709:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:ade4709:         JarOutputStream jos = new JarOutputStream(baos, mf);
1:ade4709:         jos.closeEntry();
1:ade4709:         jos.close();
1:ade4709: 
1:ade4709:         InputStream bais = new ByteArrayInputStream(baos.toByteArray());
1:ade4709:         Bundle bundle = bundleContext.installBundle("http://somelocation", bais);
1:ade4709: 
1:ade4709:         long[] idsWith = new long[idsWithout.length + 1];
1:ade4709:         System.arraycopy(idsWithout, 0, idsWith, 0, idsWithout.length);
1:ade4709:         idsWith[idsWith.length - 1] = bundle.getBundleId();
1:ade4709:         Arrays.sort(idsWith);
1:ade4709: 
1:ade4709:         waitForListToReachSize(attributeChanges, 1);
1:ade4709: 
1:ade4709:         assertEquals(1, attributeChanges.size());
1:ade4709:         AttributeChangeNotification ac = attributeChanges.get(0);
1:ade4709:         assertEquals("BundleIds", ac.getAttributeName());
1:0a8778f:         long oldSequence = ac.getSequenceNumber();
1:ade4709:         assertTrue(Arrays.equals(idsWithout, (long []) ac.getOldValue()));
1:ade4709:         assertTrue(Arrays.equals(idsWith, (long []) ac.getNewValue()));
1:ade4709: 
1:ade4709:         bundle.uninstall();
1:ade4709: 
1:ade4709:         waitForListToReachSize(attributeChanges, 2);
1:ade4709:         AttributeChangeNotification ac2 = attributeChanges.get(1);
1:ade4709:         assertEquals("BundleIds", ac2.getAttributeName());
1:0a8778f:         assertEquals(oldSequence +1, ac2.getSequenceNumber());
1:ade4709:         assertTrue(Arrays.equals(idsWith, (long []) ac2.getOldValue()));
1:ade4709:         assertTrue(Arrays.equals(idsWithout, (long []) ac2.getNewValue()));
1:bf76d9d:     }
1:fdf3952: 
1:fdf3952:     @Test
1:c4c8b5b:     public void testBundleIDsAttribute() throws Exception{
1:c4c8b5b:         Set<Long> expectedIDs = new HashSet<Long>();
1:c4c8b5b:         for (Bundle b : context().getBundles()) {
1:c4c8b5b:             expectedIDs.add(b.getBundleId());
1:c4c8b5b:         }
1:c4c8b5b: 
1:c4c8b5b:         BundleStateMBean mbean = getMBean(OBJECTNAME, BundleStateMBean.class);
1:c4c8b5b:         long[] actual = mbean.getBundleIds();
1:c4c8b5b:         Set<Long> actualIDs = new HashSet<Long>();
1:c4c8b5b:         for (long id : actual) {
1:c4c8b5b:             actualIDs.add(id);
1:c4c8b5b:         }
1:c4c8b5b: 
1:c4c8b5b:         assertEquals(expectedIDs, actualIDs);
1:c4c8b5b:     }
1:c4c8b5b: 
1:c4c8b5b:     @Test
1:bf76d9d:     @SuppressWarnings({ "unchecked" })
1:bf76d9d:     public void testHeaderLocalization() throws Exception {
1:0a8778f:         Bundle bundleE = context().getBundleByName("org.apache.aries.jmx.test.bundlee");
1:bf76d9d: 
1:0a8778f:         CompositeData cd = mbean.getBundle(bundleE.getBundleId());
1:bf76d9d:         long id = (Long) cd.get(BundleStateMBean.IDENTIFIER);
1:bf76d9d:         assertEquals("Description", mbean.getHeader(id, Constants.BUNDLE_DESCRIPTION));
1:bf76d9d:         assertEquals("Description", mbean.getHeader(id, Constants.BUNDLE_DESCRIPTION, "en"));
1:bf76d9d:         assertEquals("Omschrijving", mbean.getHeader(id, Constants.BUNDLE_DESCRIPTION, "nl"));
1:bf76d9d: 
1:bf76d9d:         TabularData td = mbean.getHeaders(id);
1:bf76d9d:         boolean found = false;
1:bf76d9d:         for (CompositeData d : (Collection<CompositeData>) td.values()) {
1:bf76d9d:             if (Constants.BUNDLE_DESCRIPTION.equals(d.get(BundleStateMBean.KEY))) {
1:bf76d9d:                 assertEquals("Description", d.get(BundleStateMBean.VALUE));
1:bf76d9d:                 found = true;
1:bf76d9d:                 break;
1:bf76d9d:             }
1:bf76d9d:         }
1:bf76d9d:         assertTrue(found);
1:bf76d9d: 
1:bf76d9d:         TabularData tdNL = mbean.getHeaders(id, "nl");
1:bf76d9d:         boolean foundNL = false;
1:bf76d9d:         for (CompositeData d : (Collection<CompositeData>) tdNL.values()) {
1:bf76d9d:             if (Constants.BUNDLE_DESCRIPTION.equals(d.get(BundleStateMBean.KEY))) {
1:bf76d9d:                 assertEquals("Omschrijving", d.get(BundleStateMBean.VALUE));
1:bf76d9d:                 foundNL = true;
1:bf76d9d:                 break;
1:bf76d9d:             }
1:bf76d9d:         }
1:bf76d9d:         assertTrue(foundNL);
1:bf76d9d:     }
1:bf76d9d: 
1:fdf3952:     private Version getPackageVersion(String packageName) {
1:631b1ec:         Bundle systemBundle = context().getBundle(0);
1:988cc71:         BundleWiring wiring = (BundleWiring) systemBundle.adapt(BundleWiring.class);
1:631b1ec:         List<BundleCapability> packages = wiring.getCapabilities(BundleRevision.PACKAGE_NAMESPACE);
1:631b1ec:         for (BundleCapability pkg : packages) {
1:631b1ec:             Map<String, Object> attrs = pkg.getAttributes();
1:631b1ec:             if (attrs.get(BundleRevision.PACKAGE_NAMESPACE).equals(packageName)) {
1:631b1ec:                 return (Version) attrs.get(Constants.VERSION_ATTRIBUTE);
1:631b1ec:             }
1:631b1ec:         }
1:631b1ec:         throw new IllegalStateException("Package version not found for " + packageName);
1:bf76d9d:     }
1:bf76d9d: 
1:fdf3952:     private static boolean arrayContains(long value, long[] values) {
1:fdf3952:         for (long i : values) {
1:fdf3952:             if (i == value) {
1:fdf3952:                 return true;
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return false;
1:fdf3952:     }
1:ade4709: 
1:ade4709:     private void waitForListToReachSize(List<?> list, int targetSize) throws InterruptedException {
1:ade4709:         int i = 0;
1:ade4709:         while (list.size() < targetSize && i < 3) {
1:ade4709:             Thread.sleep(1000);
1:ade4709:             i++;
1:ade4709:         }
1:ade4709:     }
1:fdf3952: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:988cc71
/////////////////////////////////////////////////////////////////////////
1:         BundleWiring wiring = (BundleWiring) systemBundle.adapt(BundleWiring.class);
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.options;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
/////////////////////////////////////////////////////////////////////////
1: @ExamReactorStrategy(PerMethod.class)
1:     private ObjectName objectName;
1: 	private BundleStateMBean mbean;
1: 	private Bundle a;
1: 	private Bundle b;
1: 	private Bundle fragc;
1: 	private Bundle d;
1: 	@Configuration
1:     public Option[] configuration() {
1: 		return options(
1: 				// new VMOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"),
1: 				// new TimeoutOption( 0 ),
1: 				jmxRuntime(), 
1: 				bundlea(),
1: 				bundleb(),
1: 				fragmentc(),
1: 				bundled(),
1: 				bundlee());
1:     @Before
1:     	objectName = waitForMBean(BundleStateMBean.OBJECTNAME);
1:         mbean = getMBean(BundleStateMBean.OBJECTNAME, BundleStateMBean.class);
1:         //get bundles
1:         a = getBundleByName("org.apache.aries.jmx.test.bundlea");
1:         b = getBundleByName("org.apache.aries.jmx.test.bundleb");
1:         fragc = getBundleByName("org.apache.aries.jmx.test.fragc");
1:         d = getBundleByName("org.apache.aries.jmx.test.bundled");
/////////////////////////////////////////////////////////////////////////
1:         // fragments
1:         assertEquals(fragc.getBundleId() , fragments[0]);
1:         // headers
1:         // hosts
1:         long[] hosts = mbean.getHosts(fragc.getBundleId());
1:         assertEquals(2, requiring.length);
1:         assertTrue(fragc.getSymbolicName(), arrayContains(fragc.getBundleId(), requiring));
1:         assertTrue(mbean.isFragment(fragc.getBundleId()));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         long oldSequence = ac.getSequenceNumber();
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(oldSequence +1, ac2.getSequenceNumber());
/////////////////////////////////////////////////////////////////////////
1:         Bundle bundleE = context().getBundleByName("org.apache.aries.jmx.test.bundlee");
1:         CompositeData cd = mbean.getBundle(bundleE.getBundleId());
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:bf86346
/////////////////////////////////////////////////////////////////////////
0:                         CoreOptions.equinox().version("3.8.0.V20120529-1548"),
commit:ade4709
/////////////////////////////////////////////////////////////////////////
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: import javax.management.AttributeChangeNotification;
1: import javax.management.AttributeChangeNotificationFilter;
/////////////////////////////////////////////////////////////////////////
1:     }
1:     @Test
1:     public void testAttributeChangeNotifications() throws Exception {
0:         ObjectName objectName = waitForMBean(new ObjectName(BundleStateMBean.OBJECTNAME));
0:         BundleStateMBean mbean = getMBean(objectName, BundleStateMBean.class);
1: 
1:         final List<AttributeChangeNotification> attributeChanges = new ArrayList<AttributeChangeNotification>();
1:         AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter();
1:         filter.disableAllAttributes();
1:         filter.enableAttribute("BundleIds");
1: 
1:         mbeanServer.addNotificationListener(objectName, new NotificationListener() {
1:             public void handleNotification(Notification notification, Object handback) {
1:                 attributeChanges.add((AttributeChangeNotification) notification);
1:             }
1:         }, filter, null);
1: 
1:         long[] idsWithout = mbean.getBundleIds();
1: 
1:         assertEquals("Precondition", 0, attributeChanges.size());
1: 
1:         Manifest mf = new Manifest();
1:         mf.getMainAttributes().putValue("Bundle-ManifestVersion", "2");
1:         mf.getMainAttributes().putValue("Bundle-SymbolicName", "empty-test-bundle");
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         JarOutputStream jos = new JarOutputStream(baos, mf);
1:         jos.closeEntry();
1:         jos.close();
1: 
1:         InputStream bais = new ByteArrayInputStream(baos.toByteArray());
1:         Bundle bundle = bundleContext.installBundle("http://somelocation", bais);
1: 
1:         long[] idsWith = new long[idsWithout.length + 1];
1:         System.arraycopy(idsWithout, 0, idsWith, 0, idsWithout.length);
1:         idsWith[idsWith.length - 1] = bundle.getBundleId();
1:         Arrays.sort(idsWith);
1: 
1:         waitForListToReachSize(attributeChanges, 1);
1: 
1:         assertEquals(1, attributeChanges.size());
1:         AttributeChangeNotification ac = attributeChanges.get(0);
1:         assertEquals("BundleIds", ac.getAttributeName());
0:         assertEquals(1, ac.getSequenceNumber());
1:         assertTrue(Arrays.equals(idsWithout, (long []) ac.getOldValue()));
1:         assertTrue(Arrays.equals(idsWith, (long []) ac.getNewValue()));
1: 
1:         bundle.uninstall();
1: 
1:         waitForListToReachSize(attributeChanges, 2);
1:         AttributeChangeNotification ac2 = attributeChanges.get(1);
1:         assertEquals("BundleIds", ac2.getAttributeName());
0:         assertEquals(2, ac2.getSequenceNumber());
1:         assertTrue(Arrays.equals(idsWith, (long []) ac2.getOldValue()));
1:         assertTrue(Arrays.equals(idsWithout, (long []) ac2.getNewValue()));
/////////////////////////////////////////////////////////////////////////
1: 
1:     private void waitForListToReachSize(List<?> list, int targetSize) throws InterruptedException {
1:         int i = 0;
1:         while (list.size() < targetSize && i < 3) {
1:             Thread.sleep(1000);
1:             i++;
1:         }
1:     }
commit:c4c8b5b
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
1:     public void testBundleIDsAttribute() throws Exception{
1:         Set<Long> expectedIDs = new HashSet<Long>();
1:         for (Bundle b : context().getBundles()) {
1:             expectedIDs.add(b.getBundleId());
1:         }
1: 
1:         BundleStateMBean mbean = getMBean(OBJECTNAME, BundleStateMBean.class);
1:         long[] actual = mbean.getBundleIds();
1:         Set<Long> actualIDs = new HashSet<Long>();
1:         for (long id : actual) {
1:             actualIDs.add(id);
1:         }
1: 
1:         assertEquals(expectedIDs, actualIDs);
1:     }
1: 
1:     @Test
commit:5040e04
/////////////////////////////////////////////////////////////////////////
1: import java.util.Hashtable;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:     public void testObjectName() throws Exception {
1:         Set<ObjectName> names = mbeanServer.queryNames(new ObjectName(BundleStateMBean.OBJECTNAME + ",*"), null);
1:         assertEquals(1, names.size());
1:         ObjectName name = names.iterator().next();
1:         Hashtable<String, String> props = name.getKeyPropertyList();
1:         assertEquals(context().getProperty(Constants.FRAMEWORK_UUID), props.get("uuid"));
1:         assertEquals(context().getBundle(0).getSymbolicName(), props.get("framework"));
1:     }
1: 
1:     @Test
commit:7186eab
/////////////////////////////////////////////////////////////////////////
0:         ObjectName objectName = waitForMBean(new ObjectName(BundleStateMBean.OBJECTNAME));
0:         BundleStateMBean mbean = getMBean(objectName, BundleStateMBean.class);
/////////////////////////////////////////////////////////////////////////
1:         mbeanServer.addNotificationListener(objectName, new NotificationListener() {
commit:631b1ec
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleCapability;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.framework.wiring.BundleWiring;
/////////////////////////////////////////////////////////////////////////
1:         Bundle systemBundle = context().getBundle(0);
0:         BundleWiring wiring = systemBundle.adapt(BundleWiring.class);
1:         List<BundleCapability> packages = wiring.getCapabilities(BundleRevision.PACKAGE_NAMESPACE);
1:         for (BundleCapability pkg : packages) {
1:             Map<String, Object> attrs = pkg.getAttributes();
1:             if (attrs.get(BundleRevision.PACKAGE_NAMESPACE).equals(packageName)) {
1:                 return (Version) attrs.get(Constants.VERSION_ATTRIBUTE);
1:             }
1:         }
1:         throw new IllegalStateException("Package version not found for " + packageName);
commit:bf76d9d
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
0: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.Collection;
0: import java.util.Properties;
1: import javax.management.openmbean.CompositeData;
/////////////////////////////////////////////////////////////////////////
0:                                 .build(withBnd())),
0:                         provision(newBundle()
0:                                 .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundlee")
0:                                 .set(Constants.BUNDLE_DESCRIPTION, "%desc")
0:                                 .add("OSGI-INF/l10n/bundle.properties", getBundleProps("desc", "Description"))
0:                                 .add("OSGI-INF/l10n/bundle_nl.properties", getBundleProps("desc", "Omschrijving"))
0:     private static InputStream getBundleProps(String key, String value) {
0:         try {
0:             Properties p = new Properties();
0:             p.put(key, value);
0:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:             p.store(baos, "");
0:             return new ByteArrayInputStream(baos.toByteArray());
0:         } catch (IOException e) {
0:             throw new RuntimeException(e);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     @SuppressWarnings({ "unchecked" })
1:     public void testHeaderLocalization() throws Exception {
0:         BundleStateMBean mbean = getMBean(OBJECTNAME, BundleStateMBean.class);
0:         Bundle b = context().getBundleByName("org.apache.aries.jmx.test.bundlee");
1: 
0:         CompositeData cd = mbean.getBundle(b.getBundleId());
1:         long id = (Long) cd.get(BundleStateMBean.IDENTIFIER);
1:         assertEquals("Description", mbean.getHeader(id, Constants.BUNDLE_DESCRIPTION));
1:         assertEquals("Description", mbean.getHeader(id, Constants.BUNDLE_DESCRIPTION, "en"));
1:         assertEquals("Omschrijving", mbean.getHeader(id, Constants.BUNDLE_DESCRIPTION, "nl"));
1: 
1:         TabularData td = mbean.getHeaders(id);
1:         boolean found = false;
1:         for (CompositeData d : (Collection<CompositeData>) td.values()) {
1:             if (Constants.BUNDLE_DESCRIPTION.equals(d.get(BundleStateMBean.KEY))) {
1:                 assertEquals("Description", d.get(BundleStateMBean.VALUE));
1:                 found = true;
1:                 break;
1:             }
1:         }
1:         assertTrue(found);
1: 
1:         TabularData tdNL = mbean.getHeaders(id, "nl");
1:         boolean foundNL = false;
1:         for (CompositeData d : (Collection<CompositeData>) tdNL.values()) {
1:             if (Constants.BUNDLE_DESCRIPTION.equals(d.get(BundleStateMBean.KEY))) {
1:                 assertEquals("Omschrijving", d.get(BundleStateMBean.VALUE));
1:                 foundNL = true;
1:                 break;
1:             }
1:         }
1:         assertTrue(foundNL);
1:     }
1: 
1: 
0:     @SuppressWarnings({ "rawtypes", "deprecation" })
commit:516dd36
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                         // new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
0:                         // new TimeoutOption( 0 ),
commit:8c01963
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.container.def.options.VMOption;
0: import org.ops4j.pax.exam.options.TimeoutOption;
/////////////////////////////////////////////////////////////////////////
0:                          new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
0:                          new TimeoutOption( 0 ),
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework;
1: 
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.provision;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.newBundle;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.withBnd;
1: import static org.osgi.jmx.framework.BundleStateMBean.OBJECTNAME;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import javax.management.Notification;
1: import javax.management.NotificationListener;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.TabularData;
1: 
1: import org.apache.aries.jmx.AbstractIntegrationTest;
1: import org.apache.aries.jmx.codec.BundleData.Header;
1: import org.junit.Test;
0: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
0: import org.ops4j.pax.exam.junit.Configuration;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
0: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.Version;
1: import org.osgi.jmx.framework.BundleStateMBean;
0: import org.osgi.service.packageadmin.ExportedPackage;
0: import org.osgi.service.packageadmin.PackageAdmin;
1: 
1: /**
1:  * @version $Rev$ $Date$
1:  */
1: public class BundleStateMBeanTest extends AbstractIntegrationTest {
1: 
0:     @Configuration
0:     public static Option[] configuration() {
0:         return testOptions(
0:                         // new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
0:                         // new TimeoutOption( 0 ),
1: 
0:                         PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
0:                         CoreOptions.equinox().version("3.7.0.v20110613"),
0:                         paxLogging("INFO"),
1: 
0:                         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:                         mavenBundle("org.osgi", "org.osgi.compendium"),
0:                         mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx"),
0:                         mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.api"),
0:                         mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.whiteboard"),
0:                         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:                         provision(newBundle()
0:                                 .add(org.apache.aries.jmx.test.bundlea.Activator.class)
0:                                 .add(org.apache.aries.jmx.test.bundlea.api.InterfaceA.class)
0:                                 .add(org.apache.aries.jmx.test.bundlea.impl.A.class)
0:                                 .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundlea")
0:                                 .set(Constants.BUNDLE_VERSION, "2.0.0")
0:                                 .set(Constants.EXPORT_PACKAGE, "org.apache.aries.jmx.test.bundlea.api;version=2.0.0")
0:                                 .set(Constants.IMPORT_PACKAGE,
0:                                         "org.osgi.framework;version=1.5.0,org.osgi.util.tracker,org.apache.aries.jmx.test.bundleb.api;version=1.1.0;resolution:=optional" +
0:                                         ",org.osgi.service.cm")
0:                                 .set(Constants.BUNDLE_ACTIVATOR,
0:                                         org.apache.aries.jmx.test.bundlea.Activator.class.getName())
0:                                 .build(withBnd())),
0:                         provision(newBundle()
0:                                 .add(org.apache.aries.jmx.test.bundleb.Activator.class)
0:                                 .add(org.apache.aries.jmx.test.bundleb.api.InterfaceB.class)
0:                                 .add(org.apache.aries.jmx.test.bundleb.api.MSF.class)
0:                                 .add(org.apache.aries.jmx.test.bundleb.impl.B.class)
0:                                 .set(Constants.BUNDLE_SYMBOLICNAME,"org.apache.aries.jmx.test.bundleb")
0:                                 .set(Constants.BUNDLE_VERSION, "1.0.0")
0:                                 .set(Constants.EXPORT_PACKAGE,"org.apache.aries.jmx.test.bundleb.api;version=1.1.0")
0:                                 .set(Constants.IMPORT_PACKAGE,"org.osgi.framework;version=1.5.0,org.osgi.util.tracker," +
0:                                 		"org.osgi.service.cm,org.apache.aries.jmx.test.fragmentc")
0:                                 .set(Constants.BUNDLE_ACTIVATOR,
0:                                         org.apache.aries.jmx.test.bundleb.Activator.class.getName())
0:                                 .build(withBnd())),
0:                         provision(newBundle()
0:                                 .add(org.apache.aries.jmx.test.fragmentc.C.class)
0:                                 .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.fragc")
0:                                 .set(Constants.FRAGMENT_HOST, "org.apache.aries.jmx.test.bundlea")
0:                                 .set(Constants.EXPORT_PACKAGE, "org.apache.aries.jmx.test.fragmentc")
0:                                 .build(withBnd())),
0:                         provision(newBundle()
0:                                 .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundled")
0:                                 .set(Constants.BUNDLE_VERSION, "3.0.0")
0:                                 .set(Constants.REQUIRE_BUNDLE, "org.apache.aries.jmx.test.bundlea;bundle-version=2.0.0")
0:                                 .build(withBnd()))
0:                         );
1:     }
1: 
0:     @Override
1:     public void doSetUp() throws Exception {
0:         waitForMBean(new ObjectName(BundleStateMBean.OBJECTNAME));
1:     }
1: 
1:     @Test
1:     public void testMBeanInterface() throws Exception {
1: 
0:         BundleStateMBean mbean = getMBean(OBJECTNAME, BundleStateMBean.class);
0:         assertNotNull(mbean);
1: 
0:         //get bundles
1: 
0:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
0:         assertNotNull(a);
1: 
0:         Bundle b = context().getBundleByName("org.apache.aries.jmx.test.bundleb");
0:         assertNotNull(b);
1: 
0:         Bundle frag = context().getBundleByName("org.apache.aries.jmx.test.fragc");
0:         assertNotNull(frag);
1: 
0:         Bundle d = context().getBundleByName("org.apache.aries.jmx.test.bundled");
0:         assertNotNull(d);
1: 
1:         // exportedPackages
1: 
1:         String[] exports = mbean.getExportedPackages(a.getBundleId());
1:         assertEquals(2, exports.length);
1: 
1:         List<String> packages = Arrays.asList(exports);
1:         assertTrue(packages.contains("org.apache.aries.jmx.test.bundlea.api;2.0.0"));
1:         assertTrue(packages.contains("org.apache.aries.jmx.test.fragmentc;0.0.0"));
1: 
0:         //fragments
1: 
1:         long[] fragments = mbean.getFragments(a.getBundleId());
1:         assertEquals(1, fragments.length);
0:         assertEquals(frag.getBundleId() , fragments[0]);
1: 
0:         //headers
1: 
1:         TabularData headers = mbean.getHeaders(b.getBundleId());
1:         assertNotNull(headers);
1:         assertEquals(BundleStateMBean.HEADERS_TYPE, headers.getTabularType());
1:         assertTrue(headers.values().size() >= 4 );
1:         assertEquals("org.apache.aries.jmx.test.bundleb", Header.from(headers.get(new Object[] {Constants.BUNDLE_SYMBOLICNAME})).getValue());
1: 
0:         //hosts
1: 
0:         long[] hosts = mbean.getHosts(frag.getBundleId());
1:         assertEquals(1, hosts.length);
1:         assertEquals(a.getBundleId() , hosts[0]);
1: 
1:         //imported packages
1: 
1:         String[] imports = mbean.getImportedPackages(a.getBundleId());
1:         assertTrue(imports.length >= 3);
1:         List<String> importedPackages = Arrays.asList(imports);
1: 
1:         Version version = getPackageVersion("org.osgi.framework");
1:         assertTrue(importedPackages.contains("org.osgi.framework;" + version.toString()));
1:         assertTrue(importedPackages.contains("org.apache.aries.jmx.test.bundleb.api;1.1.0"));
1: 
1:         //last modified
1: 
1:         assertTrue(mbean.getLastModified(b.getBundleId()) > 0);
1: 
1:         //location
1: 
1:         assertEquals(b.getLocation(), mbean.getLocation(b.getBundleId()));
1: 
1:         //registered services
1: 
1:         long[] serviceIds = mbean.getRegisteredServices(a.getBundleId());
1:         assertEquals(1, serviceIds.length);
1: 
1:         //required bundles
1: 
1:         long[] required = mbean.getRequiredBundles(d.getBundleId());
1:         assertEquals(1, required.length);
1:         assertEquals(a.getBundleId(), required[0]);
1: 
1:         //requiring bundles
1: 
1:         long[] requiring = mbean.getRequiringBundles(a.getBundleId());
0:         assertEquals(3, requiring.length);
0:         assertTrue(b.getSymbolicName(), arrayContains(b.getBundleId(), requiring));
0:         assertTrue(frag.getSymbolicName(), arrayContains(frag.getBundleId(), requiring));
1:         assertTrue(d.getSymbolicName(), arrayContains(d.getBundleId(), requiring));
1: 
1:         //services in use
1: 
1:         long[] servicesInUse = mbean.getServicesInUse(a.getBundleId());
1:         assertEquals(1, servicesInUse.length);
1: 
1:         //start level
1: 
1:         long startLevel = mbean.getStartLevel(b.getBundleId());
1:         assertTrue(startLevel >= 0);
1: 
1:         //state
1: 
1:         assertEquals("ACTIVE", mbean.getState(b.getBundleId()));
1: 
1:         //isFragment
1: 
1:         assertFalse(mbean.isFragment(b.getBundleId()));
0:         assertTrue(mbean.isFragment(frag.getBundleId()));
1: 
1:         //isRemovalPending
1:         assertFalse(mbean.isRemovalPending(b.getBundleId()));
1: 
1:         // isRequired
1: 
1:         assertTrue(mbean.isRequired(a.getBundleId()));
1:         assertTrue(mbean.isRequired(b.getBundleId()));
1: 
1:         // listBundles
1: 
1:         TabularData bundlesTable = mbean.listBundles();
1:         assertNotNull(bundlesTable);
1:         assertEquals(BundleStateMBean.BUNDLES_TYPE, bundlesTable.getTabularType());
1:         assertEquals(bundleContext.getBundles().length, bundlesTable.values().size());
1: 
1: 
1:         // notifications
1: 
1:         final List<Notification> received = new ArrayList<Notification>();
1: 
0:         mbeanServer.addNotificationListener(new ObjectName(BundleStateMBean.OBJECTNAME), new NotificationListener() {
1:             public void handleNotification(Notification notification, Object handback) {
1:                received.add(notification);
1:             }
1:         }, null, null);
1: 
1:         assertEquals(Bundle.ACTIVE, b.getState());
1:         b.stop();
1:         assertEquals(Bundle.RESOLVED, b.getState());
1:         b.start();
1:         assertEquals(Bundle.ACTIVE, b.getState());
1: 
1:         int i = 0;
1:         while (received.size() < 2 && i < 3) {
1:             Thread.sleep(1000);
1:             i++;
1:         }
1: 
1:         assertEquals(2, received.size());
1: 
1:     }
1: 
1:     private Version getPackageVersion(String packageName) {
0:         ServiceReference paRef = context().getServiceReference(PackageAdmin.class.getName());
0:         PackageAdmin pa = (PackageAdmin) context().getService(paRef);
0:         ExportedPackage pkg = pa.getExportedPackage(packageName);
0:         Version version = pkg.getVersion();
0:         return version;
1:     }
1: 
1:     private static boolean arrayContains(long value, long[] values) {
1:         for (long i : values) {
1:             if (i == value) {
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
1: }
============================================================================