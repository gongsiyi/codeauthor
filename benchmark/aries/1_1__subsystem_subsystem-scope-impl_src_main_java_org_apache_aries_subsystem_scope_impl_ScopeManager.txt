1:e9f9bca: package org.apache.aries.subsystem.scope.impl;
34:e9f9bca: 
1:6f4b079: import java.io.IOException;
1:e9f9bca: import java.util.Collection;
1:e9f9bca: import java.util.Collections;
1:e9f9bca: import java.util.HashMap;
1:e9f9bca: import java.util.Iterator;
1:e9f9bca: import java.util.List;
1:e9f9bca: import java.util.Map;
1:e9f9bca: 
1:e9f9bca: import org.apache.aries.subsystem.scope.Scope;
1:e9f9bca: import org.apache.aries.subsystem.scope.SharePolicy;
1:e9f9bca: import org.osgi.framework.Bundle;
1:e9f9bca: import org.osgi.framework.BundleContext;
1:e9f9bca: import org.osgi.framework.BundleEvent;
1:6f4b079: import org.osgi.framework.InvalidSyntaxException;
1:e9f9bca: import org.osgi.framework.ServiceEvent;
1:e9f9bca: import org.osgi.framework.ServiceReference;
1:6f4b079: import org.osgi.framework.hooks.bundle.EventHook;
1:6f4b079: import org.osgi.framework.hooks.resolver.ResolverHook;
1:6f4b079: import org.osgi.framework.hooks.resolver.ResolverHookFactory;
1:6f4b079: import org.osgi.framework.hooks.service.EventListenerHook;
1:e9f9bca: import org.osgi.framework.hooks.service.ListenerHook.ListenerInfo;
1:e9f9bca: import org.osgi.framework.wiring.BundleCapability;
1:e9f9bca: import org.osgi.framework.wiring.BundleRequirement;
1:e9f9bca: import org.osgi.framework.wiring.BundleRevision;
1:e9f9bca: 
1:6f4b079: public class ScopeManager 
1:6f4b079: 		implements 
1:6f4b079: 				EventHook, 
1:6f4b079: 				EventListenerHook, 
1:6f4b079: 				org.osgi.framework.hooks.bundle.FindHook,
1:6f4b079: 				org.osgi.framework.hooks.service.FindHook, 
1:6f4b079: 				ResolverHook, 
1:6f4b079: 				ResolverHookFactory {
1:6f4b079: 	
1:e9f9bca: 	static final Map<String, ScopeImpl> installingBundleToScope = Collections.synchronizedMap(new HashMap<String, ScopeImpl>());
1:e9f9bca: 	
1:e9f9bca: 	private final BundleContext bundleContext;
1:6f4b079: 	private final Scopes scopes;
1:e9f9bca: 	
1:6f4b079: 	public ScopeManager(BundleContext bundleContext) throws InvalidSyntaxException, IOException {
1:e9f9bca: 		this.bundleContext = bundleContext;
1:6f4b079: 		scopes = new Scopes(bundleContext);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public ResolverHook begin(java.util.Collection<BundleRevision> triggers) {
1:6f4b079: 		return this;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public void end() {
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public void event(BundleEvent event, Collection<BundleContext> contexts) {	
1:6f4b079: 		int type = event.getType();
1:6f4b079: 		Bundle source = event.getBundle();
1:6f4b079: 		if (type == BundleEvent.INSTALLED) {
1:6f4b079: 			// For bundle installed events, the origin is the bundle whose context
1:6f4b079: 			// was used to install the source bundle. In this case, we need to be
1:6f4b079: 			// sure the origin bundle is assigned to a scope. This is necessary to
1:6f4b079: 			// ensure the next step will succeed. This condition may occur, for
1:6f4b079: 			// example, during Scope Admin initialization.
1:6f4b079: 			Bundle origin = event.getOrigin();
1:6f4b079: 			synchronized (scopes) {
1:6f4b079: 				if (!scopes.contains(origin)) {
1:6f4b079: 					scopes.addBundle(origin);
1:6f4b079: 				}
1:6f4b079: 				// If Scope Admin is not the installer, add the installed bundle to the
1:6f4b079: 				// origin bundle's scope. This will occur whenever bundles are not
1:6f4b079: 				// installed via Scope Admin.
1:6f4b079: 				if (origin.getBundleId() != bundleContext.getBundle().getBundleId()) {
1:6f4b079: 					scopes.addBundle(source, scopes.getScope(origin));
1:6f4b079: 				}
1:6f4b079: 				// Otherwise, assign the installed bundle to the scope designated by the scope update.
1:6f4b079: 				else {
1:6f4b079: 					ScopeImpl scope = installingBundleToScope.remove(source.getLocation());
1:6f4b079: 					scopes.addBundle(source, scope);
1:6f4b079: 				}
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		// Now filter the event listeners, if necessary. Only bundles in the same scope as the 
1:6f4b079: 		// bundle undergoing the state change may see the event. The one exception is the
1:6f4b079: 		// system bundle, which receives all events and sends events to all listeners.
1:6f4b079: 		if (source.getBundleId() == 0) return;
1:6f4b079: 		ScopeImpl scope = scopes.getScope(source);
1:6f4b079: 		Collection<Bundle> bundles = scope.getBundles();
1:6f4b079: 		for (Iterator<BundleContext> i = contexts.iterator(); i.hasNext();) {
1:6f4b079: 			BundleContext bc = i.next();
1:6f4b079: 			Bundle b = bc.getBundle();
1:6f4b079: 			if (b.getBundleId() != 0 && !bundles.contains(b)) {
1:6f4b079: 				i.remove();
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		if (type == BundleEvent.UNINSTALLED) {
1:6f4b079: 			// For bundle uninstalled events, remove the bundle from Scope Admin.
1:6f4b079: 			// Note this must be done after filtering the event listeners or the
1:6f4b079: 			// bundle will get added back.
1:6f4b079: 			scopes.removeBundle(source);
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public void event(ServiceEvent event, Map<BundleContext, Collection<ListenerInfo>> listeners) {
1:6f4b079: 		Bundle registrar = event.getServiceReference().getBundle();
1:6f4b079: 		ScopeImpl scope = scopes.getScope(registrar);
1:6f4b079: 		for (Iterator<BundleContext> i = listeners.keySet().iterator(); i.hasNext();) {
1:6f4b079: 			Bundle listener = i.next().getBundle();
1:6f4b079: 			if (!scope.getBundles().contains(listener))
1:6f4b079: 				i.remove();
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public void filterMatches(BundleRequirement requirement, Collection<BundleCapability> candidates) {
1:6f4b079: 		for (Iterator<BundleCapability> i = candidates.iterator(); i.hasNext();) {
1:6f4b079: 			if (filterMatch(requirement, i.next()))
1:6f4b079: 				i.remove();
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public void filterResolvable(Collection<BundleRevision> candidates) {
1:6f4b079: 		for (Iterator<BundleRevision> i = candidates.iterator(); i.hasNext();) {
1:6f4b079: 			BundleRevision candidate = i.next();
1:6f4b079: 			ScopeImpl scope = scopes.getScope(candidate.getBundle());
1:6f4b079: 			if (scope.isUpdating())
1:6f4b079: 				i.remove();
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 
1:6f4b079: 	public void filterSingletonCollisions(BundleCapability singleton, Collection<BundleCapability> collisionCandidates) {
1:6f4b079: 		ScopeImpl scope = scopes.getScope(singleton.getRevision().getBundle());
1:6f4b079: 		for (Iterator<BundleCapability> i = collisionCandidates.iterator(); i.hasNext();) {
1:6f4b079: 			BundleCapability collisionCandidate = i.next();
1:6f4b079: 			if (!scope.getBundles().contains(collisionCandidate.getRevision().getBundle())) {
1:6f4b079: 				i.remove();
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public void find(BundleContext context, Collection<Bundle> bundles) {
1:6f4b079: 		// The system bundle may see all bundles.
1:6f4b079: 		if (context.getBundle().getBundleId() == 0) return;
1:6f4b079: 		Scope scope = scopes.getScope(context.getBundle());
1:6f4b079: 		for (Iterator<Bundle> i = bundles.iterator(); i.hasNext();) {
1:6f4b079: 			Bundle bundle = i.next();
1:6f4b079: 			// All bundles may see the system bundle.
1:6f4b079: 			if (bundle.getBundleId() == 0) continue;
1:6f4b079: 			// Otherwise, a bundle may only see other bundles within its scope.
1:6f4b079: 			if (!scope.getBundles().contains(bundle))
1:6f4b079: 				i.remove();
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public void find(BundleContext context, String name, String filter, boolean allServices, Collection<ServiceReference<?>> references) {
1:6f4b079: 		// System bundle can see all services.
1:6f4b079: 		if (context.getBundle().getBundleId() == 0) return;
1:6f4b079: 		for (Iterator<ServiceReference<?>> i = references.iterator(); i.hasNext();) {
1:6f4b079: 			if (filterMatch(context, i.next()))
1:6f4b079: 				i.remove();
1:6f4b079: 		}
67:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public Scope getRootScope() {
1:6f4b079: 		return scopes.getRootScope();
1:e9f9bca: 	}
1:e9f9bca: 	
1:6f4b079: 	public Scope getScope(Bundle bundle) {
1:6f4b079: 		return scopes.getScope(bundle);
1:e9f9bca: 	}
1:e9f9bca: 	
1:6f4b079: 	public void shutdown() {
1:6f4b079: 		scopes.clear();
1:e9f9bca: 	}
1:e9f9bca: 	
1:6f4b079: 	private boolean filterMatch(BundleRequirement requirement, BundleCapability capability) {
1:6f4b079: 		Scope scope = scopes.getScope(requirement.getRevision().getBundle());
1:6f4b079: 		if (scope.getBundles().contains(capability.getRevision().getBundle()))
1:6f4b079: 			return false;
1:6f4b079: 		if (scope.getId() < scopes.getScope(capability.getRevision().getBundle()).getId()) {
1:6f4b079: 			if (matchesDescendants(scope.getChildren(), capability, null))
11:e9f9bca: 				return false;
1:e9f9bca: 		}
1:6f4b079: 		return !matchesAncestry(scope, capability);
1:e9f9bca: 	}
1:e9f9bca: 	
1:6f4b079: 	private boolean filterMatch(BundleContext context, ServiceReference<?> reference) {
1:6f4b079: 		Scope scope = scopes.getScope(context.getBundle());
1:6f4b079: 		if (scope.getBundles().contains(reference.getBundle()))
1:6f4b079: 			return false;
1:6f4b079: 		if (scope.getId() < scopes.getScope(reference.getBundle()).getId()) {
1:6f4b079: 			if (matchesDescendants(scope.getChildren(), reference))
1:e9f9bca: 				return false;
1:e9f9bca: 		}
1:6f4b079: 		return !matchesAncestry(scope, reference);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private boolean matchesPolicyAndContainsBundle(Scope scope, BundleCapability capability, String sharePolicyType) {
1:6f4b079: 		if (matchesPolicy(scope, capability, sharePolicyType)) {
1:6f4b079: 			if (scope.getBundles().contains(capability.getRevision().getBundle())) {
11:e9f9bca: 				return true;
1:6f4b079: 			}
1:e9f9bca: 		}
1:6f4b079: 		return false;
1:e9f9bca: 	}
1:6f4b079: 	
1:6f4b079: 	private boolean matchesPolicy(Scope scope, BundleCapability capability, String sharePolicyType) {
1:6f4b079: 		List<SharePolicy> policies = scope.getSharePolicies(sharePolicyType).get(capability.getNamespace());
1:6f4b079: 		if (policies == null) return false;
1:6f4b079: 		for (SharePolicy policy : policies) {
1:6f4b079: 			if (policy.getFilter().matches(capability.getAttributes())) {
1:6f4b079: 				return true;
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		return false;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private boolean matchesAncestry(Scope scope, BundleCapability capability) {
1:6f4b079: 		if (matchesPolicy(scope, capability, SharePolicy.TYPE_IMPORT)) {
1:6f4b079: 			Scope parent = scope.getParent();
1:6f4b079: 			if (parent != null) {
1:6f4b079: 				if (parent.getBundles().contains(capability.getRevision().getBundle())) 
1:6f4b079: 					return true;
1:6f4b079: 				if (matchesDescendants(parent.getChildren(), capability, scope))
1:6f4b079: 					return true;
1:6f4b079: 				return matchesAncestry(parent, capability);
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		return false;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private boolean matchesAncestry(Scope scope, ServiceReference<?> reference) {
1:6f4b079: 		if (matchesPolicy(scope, reference, SharePolicy.TYPE_IMPORT)) {
1:6f4b079: 			Scope parent = scope.getParent();
1:6f4b079: 			if (parent != null) {
1:6f4b079: 				if (parent.getBundles().contains(reference.getBundle())) 
1:6f4b079: 					return true;
1:6f4b079: 				return matchesAncestry(parent, reference);
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		return false;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private boolean matchesDescendant(Scope child, BundleCapability capability) {
1:6f4b079: 		if (matchesPolicyAndContainsBundle(child, capability, SharePolicy.TYPE_EXPORT))
1:6f4b079: 			return true;
1:6f4b079: 		return matchesDescendants(child.getChildren(), capability, null);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private boolean matchesDescendant(Scope child, ServiceReference<?> reference) {
1:6f4b079: 		if (matchesPolicyAndContainsBundle(child, reference, SharePolicy.TYPE_EXPORT))
1:6f4b079: 			return true;
1:6f4b079: 		return matchesDescendants(child.getChildren(), reference);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private boolean matchesDescendants(Collection<Scope> children, BundleCapability capability, Scope skip) {
1:6f4b079: 		for (Scope child : children) {
1:6f4b079: 			if (child.equals(skip))
1:6f4b079: 				continue;
1:6f4b079: 			if (matchesDescendant(child, capability)) {
1:6f4b079: 				return true;
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		return false;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private boolean matchesDescendants(Collection<Scope> children, ServiceReference<?> reference) {
1:6f4b079: 		for (Scope child : children) {
1:6f4b079: 			if (matchesDescendant(child, reference)) {
1:6f4b079: 				return true;
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		return false;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private boolean matchesPolicyAndContainsBundle(Scope scope, ServiceReference<?> reference, String sharePolicyType) {
1:6f4b079: 		if (matchesPolicy(scope, reference, sharePolicyType)) {
1:6f4b079: 			if (scope.getBundles().contains(reference.getBundle())) {
1:6f4b079: 				return true;
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		return false;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private boolean matchesPolicy(Scope scope, ServiceReference<?> reference, String sharePolicyType) {
1:6f4b079: 		List<SharePolicy> policies = scope.getSharePolicies(sharePolicyType).get("scope.share.service");
1:6f4b079: 		if (policies == null) return false;
1:6f4b079: 		for (SharePolicy policy : policies) {
1:6f4b079: 			if (policy.getFilter().match(reference)) {
1:6f4b079: 				return true;
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		return false;
1:e9f9bca: 	}
1:e9f9bca: }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.hooks.bundle.EventHook;
1: import org.osgi.framework.hooks.resolver.ResolverHook;
1: import org.osgi.framework.hooks.resolver.ResolverHookFactory;
1: import org.osgi.framework.hooks.service.EventListenerHook;
1: public class ScopeManager 
1: 		implements 
1: 				EventHook, 
1: 				EventListenerHook, 
1: 				org.osgi.framework.hooks.bundle.FindHook,
1: 				org.osgi.framework.hooks.service.FindHook, 
1: 				ResolverHook, 
1: 				ResolverHookFactory {
1: 	
1: 	private final Scopes scopes;
1: 	public ScopeManager(BundleContext bundleContext) throws InvalidSyntaxException, IOException {
1: 		scopes = new Scopes(bundleContext);
1: 	}
1: 	
1: 	public ResolverHook begin(java.util.Collection<BundleRevision> triggers) {
1: 		return this;
1: 	}
1: 	
1: 	public void end() {
1: 	}
1: 	
1: 	public void event(BundleEvent event, Collection<BundleContext> contexts) {	
1: 		int type = event.getType();
1: 		Bundle source = event.getBundle();
1: 		if (type == BundleEvent.INSTALLED) {
1: 			// For bundle installed events, the origin is the bundle whose context
1: 			// was used to install the source bundle. In this case, we need to be
1: 			// sure the origin bundle is assigned to a scope. This is necessary to
1: 			// ensure the next step will succeed. This condition may occur, for
1: 			// example, during Scope Admin initialization.
1: 			Bundle origin = event.getOrigin();
1: 			synchronized (scopes) {
1: 				if (!scopes.contains(origin)) {
1: 					scopes.addBundle(origin);
1: 				}
1: 				// If Scope Admin is not the installer, add the installed bundle to the
1: 				// origin bundle's scope. This will occur whenever bundles are not
1: 				// installed via Scope Admin.
1: 				if (origin.getBundleId() != bundleContext.getBundle().getBundleId()) {
1: 					scopes.addBundle(source, scopes.getScope(origin));
1: 				}
1: 				// Otherwise, assign the installed bundle to the scope designated by the scope update.
1: 				else {
1: 					ScopeImpl scope = installingBundleToScope.remove(source.getLocation());
1: 					scopes.addBundle(source, scope);
1: 				}
1: 			}
1: 		}
1: 		// Now filter the event listeners, if necessary. Only bundles in the same scope as the 
1: 		// bundle undergoing the state change may see the event. The one exception is the
1: 		// system bundle, which receives all events and sends events to all listeners.
1: 		if (source.getBundleId() == 0) return;
1: 		ScopeImpl scope = scopes.getScope(source);
1: 		Collection<Bundle> bundles = scope.getBundles();
1: 		for (Iterator<BundleContext> i = contexts.iterator(); i.hasNext();) {
1: 			BundleContext bc = i.next();
1: 			Bundle b = bc.getBundle();
1: 			if (b.getBundleId() != 0 && !bundles.contains(b)) {
1: 				i.remove();
1: 			}
1: 		}
1: 		if (type == BundleEvent.UNINSTALLED) {
1: 			// For bundle uninstalled events, remove the bundle from Scope Admin.
1: 			// Note this must be done after filtering the event listeners or the
1: 			// bundle will get added back.
1: 			scopes.removeBundle(source);
1: 		}
1: 	}
1: 	
1: 	public void event(ServiceEvent event, Map<BundleContext, Collection<ListenerInfo>> listeners) {
1: 		Bundle registrar = event.getServiceReference().getBundle();
1: 		ScopeImpl scope = scopes.getScope(registrar);
1: 		for (Iterator<BundleContext> i = listeners.keySet().iterator(); i.hasNext();) {
1: 			Bundle listener = i.next().getBundle();
1: 			if (!scope.getBundles().contains(listener))
1: 				i.remove();
1: 		}
1: 	}
1: 	
1: 	public void filterMatches(BundleRequirement requirement, Collection<BundleCapability> candidates) {
1: 		for (Iterator<BundleCapability> i = candidates.iterator(); i.hasNext();) {
1: 			if (filterMatch(requirement, i.next()))
1: 				i.remove();
1: 		}
1: 	}
1: 	
1: 	public void filterResolvable(Collection<BundleRevision> candidates) {
1: 		for (Iterator<BundleRevision> i = candidates.iterator(); i.hasNext();) {
1: 			BundleRevision candidate = i.next();
1: 			ScopeImpl scope = scopes.getScope(candidate.getBundle());
1: 			if (scope.isUpdating())
1: 				i.remove();
1: 		}
1: 	}
1: 
1: 	public void filterSingletonCollisions(BundleCapability singleton, Collection<BundleCapability> collisionCandidates) {
1: 		ScopeImpl scope = scopes.getScope(singleton.getRevision().getBundle());
1: 		for (Iterator<BundleCapability> i = collisionCandidates.iterator(); i.hasNext();) {
1: 			BundleCapability collisionCandidate = i.next();
1: 			if (!scope.getBundles().contains(collisionCandidate.getRevision().getBundle())) {
1: 				i.remove();
1: 			}
1: 		}
1: 	}
1: 	
1: 	public void find(BundleContext context, Collection<Bundle> bundles) {
1: 		// The system bundle may see all bundles.
1: 		if (context.getBundle().getBundleId() == 0) return;
1: 		Scope scope = scopes.getScope(context.getBundle());
1: 		for (Iterator<Bundle> i = bundles.iterator(); i.hasNext();) {
1: 			Bundle bundle = i.next();
1: 			// All bundles may see the system bundle.
1: 			if (bundle.getBundleId() == 0) continue;
1: 			// Otherwise, a bundle may only see other bundles within its scope.
1: 			if (!scope.getBundles().contains(bundle))
1: 				i.remove();
1: 		}
1: 	}
1: 	
1: 	public void find(BundleContext context, String name, String filter, boolean allServices, Collection<ServiceReference<?>> references) {
1: 		// System bundle can see all services.
1: 		if (context.getBundle().getBundleId() == 0) return;
1: 		for (Iterator<ServiceReference<?>> i = references.iterator(); i.hasNext();) {
1: 			if (filterMatch(context, i.next()))
1: 				i.remove();
1: 		}
1: 		return scopes.getRootScope();
1: 	public Scope getScope(Bundle bundle) {
1: 		return scopes.getScope(bundle);
1: 	public void shutdown() {
1: 		scopes.clear();
1: 	private boolean filterMatch(BundleRequirement requirement, BundleCapability capability) {
1: 		Scope scope = scopes.getScope(requirement.getRevision().getBundle());
1: 		if (scope.getBundles().contains(capability.getRevision().getBundle()))
1: 			return false;
1: 		if (scope.getId() < scopes.getScope(capability.getRevision().getBundle()).getId()) {
1: 			if (matchesDescendants(scope.getChildren(), capability, null))
1: 		return !matchesAncestry(scope, capability);
1: 	private boolean filterMatch(BundleContext context, ServiceReference<?> reference) {
1: 		Scope scope = scopes.getScope(context.getBundle());
1: 		if (scope.getBundles().contains(reference.getBundle()))
1: 			return false;
1: 		if (scope.getId() < scopes.getScope(reference.getBundle()).getId()) {
1: 			if (matchesDescendants(scope.getChildren(), reference))
1: 		return !matchesAncestry(scope, reference);
1: 	}
1: 	
1: 	private boolean matchesPolicyAndContainsBundle(Scope scope, BundleCapability capability, String sharePolicyType) {
1: 		if (matchesPolicy(scope, capability, sharePolicyType)) {
1: 			if (scope.getBundles().contains(capability.getRevision().getBundle())) {
1: 		return false;
1: 	}
1: 	
1: 	private boolean matchesPolicy(Scope scope, BundleCapability capability, String sharePolicyType) {
1: 		List<SharePolicy> policies = scope.getSharePolicies(sharePolicyType).get(capability.getNamespace());
1: 		if (policies == null) return false;
1: 		for (SharePolicy policy : policies) {
1: 			if (policy.getFilter().matches(capability.getAttributes())) {
1: 				return true;
1: 			}
1: 		}
1: 		return false;
1: 	}
1: 	
1: 	private boolean matchesAncestry(Scope scope, BundleCapability capability) {
1: 		if (matchesPolicy(scope, capability, SharePolicy.TYPE_IMPORT)) {
1: 			Scope parent = scope.getParent();
1: 			if (parent != null) {
1: 				if (parent.getBundles().contains(capability.getRevision().getBundle())) 
1: 					return true;
1: 				if (matchesDescendants(parent.getChildren(), capability, scope))
1: 					return true;
1: 				return matchesAncestry(parent, capability);
1: 			}
1: 		}
1: 		return false;
1: 	}
1: 	
1: 	private boolean matchesAncestry(Scope scope, ServiceReference<?> reference) {
1: 		if (matchesPolicy(scope, reference, SharePolicy.TYPE_IMPORT)) {
1: 			Scope parent = scope.getParent();
1: 			if (parent != null) {
1: 				if (parent.getBundles().contains(reference.getBundle())) 
1: 					return true;
1: 				return matchesAncestry(parent, reference);
1: 			}
1: 		}
1: 		return false;
1: 	}
1: 	
1: 	private boolean matchesDescendant(Scope child, BundleCapability capability) {
1: 		if (matchesPolicyAndContainsBundle(child, capability, SharePolicy.TYPE_EXPORT))
1: 			return true;
1: 		return matchesDescendants(child.getChildren(), capability, null);
1: 	}
1: 	
1: 	private boolean matchesDescendant(Scope child, ServiceReference<?> reference) {
1: 		if (matchesPolicyAndContainsBundle(child, reference, SharePolicy.TYPE_EXPORT))
1: 			return true;
1: 		return matchesDescendants(child.getChildren(), reference);
1: 	}
1: 	
1: 	private boolean matchesDescendants(Collection<Scope> children, BundleCapability capability, Scope skip) {
1: 		for (Scope child : children) {
1: 			if (child.equals(skip))
1: 				continue;
1: 			if (matchesDescendant(child, capability)) {
1: 				return true;
1: 			}
1: 		}
1: 		return false;
1: 	}
1: 	
1: 	private boolean matchesDescendants(Collection<Scope> children, ServiceReference<?> reference) {
1: 		for (Scope child : children) {
1: 			if (matchesDescendant(child, reference)) {
1: 				return true;
1: 			}
1: 		}
1: 		return false;
1: 	}
1: 	
1: 	private boolean matchesPolicyAndContainsBundle(Scope scope, ServiceReference<?> reference, String sharePolicyType) {
1: 		if (matchesPolicy(scope, reference, sharePolicyType)) {
1: 			if (scope.getBundles().contains(reference.getBundle())) {
1: 				return true;
1: 			}
1: 		}
1: 		return false;
1: 	}
1: 	
1: 	private boolean matchesPolicy(Scope scope, ServiceReference<?> reference, String sharePolicyType) {
1: 		List<SharePolicy> policies = scope.getSharePolicies(sharePolicyType).get("scope.share.service");
1: 		if (policies == null) return false;
1: 		for (SharePolicy policy : policies) {
1: 			if (policy.getFilter().match(reference)) {
1: 				return true;
1: 			}
1: 		}
1: 		return false;
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.scope.impl;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.scope.Scope;
1: import org.apache.aries.subsystem.scope.SharePolicy;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleEvent;
0: import org.osgi.framework.BundleException;
1: import org.osgi.framework.ServiceEvent;
1: import org.osgi.framework.ServiceReference;
0: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.framework.hooks.service.ListenerHook.ListenerInfo;
1: import org.osgi.framework.wiring.BundleCapability;
1: import org.osgi.framework.wiring.BundleRequirement;
1: import org.osgi.framework.wiring.BundleRevision;
1: 
0: public class ScopeManager {
0: 	static final Map<Bundle, ScopeImpl> bundleToScope = Collections.synchronizedMap(new HashMap<Bundle, ScopeImpl>());
1: 	static final Map<String, ScopeImpl> installingBundleToScope = Collections.synchronizedMap(new HashMap<String, ScopeImpl>());
1: 	
0: 	final ScopeImpl rootScope;
1: 	
1: 	private final BundleContext bundleContext;
1: 	
0: 	public ScopeManager(BundleContext bundleContext) throws BundleException {
1: 		this.bundleContext = bundleContext;
0: 		rootScope = new ScopeImpl(bundleContext, "root", null, null);
1: 	}
1: 	
1: 	public Scope getRootScope() {
0: 		return rootScope;
1: 	}
1: 	
0: 	public EventHook newEventHook() {
0: 		return new EventHook();
1: 	}
1: 	
0: 	public EventListenerHook newEventListenerHook() {
0: 		return new EventListenerHook();
1: 	}
1: 	
0: 	public org.osgi.framework.hooks.bundle.FindHook newBundleFindHook() {
0: 		return new BundleFindHook();
1: 	}
1: 	
0: 	public ResolverHook newResolverHook() {
0: 		return new ResolverHook();
1: 	}
1: 	
0: 	public ResolverHookFactory newResolverHookFactory() {
0: 		return new ResolverHookFactory();
1: 	}
1: 	
0: 	public ServiceFactory newServiceFactory() {
0: 		return new ServiceFactory();
1: 	}
1: 	
0: 	public org.osgi.framework.hooks.service.FindHook newServiceFindHook() {
0: 		return new ServiceFindHook();
1: 	}
1: 	
0: 	private class EventHook implements org.osgi.framework.hooks.bundle.EventHook {
0: 		public void event(BundleEvent event, Collection<BundleContext> contexts) {
0: 			int type = event.getType();
0: 			if (type == BundleEvent.INSTALLED)
0: 				handleInstalledEvent(event);
0: 			handleAnyEvent(event, contexts);
0: 			if (type == BundleEvent.UNINSTALLED)
0: 				handleUninstalledEvent(event);
1: 		}
1: 		
0: 		private void handleAnyEvent(BundleEvent event, Collection<BundleContext> contexts) {
0: 			// All bundles may see system bundle lifecycle changes.
0: 			if (event.getBundle().getBundleId() != 0) {
0: 				// Otherwise, only bundles in the same scope as the bundle undergoing
0: 				// the state change may see the event.
0: 				ScopeImpl scope = bundleToScope.get(event.getBundle());
0: 				Collection<Bundle> bundles = scope.getBundles();
0: 				for (Iterator<BundleContext> i = contexts.iterator(); i.hasNext();) {
0: 					BundleContext bc = i.next();
0: 					if (!bundles.contains(bc.getBundle()))
0: 						i.remove();
1: 				}
1: 			}
1: 		}
1: 		
0: 		private void handleInstalledEvent(BundleEvent event) {
0: 			processOriginBundleOnInstall(event);
0: 			processSourceBundleOnInstall(event);
1: 		}
1: 		
0: 		private void handleUninstalledEvent(BundleEvent event) {
0: 			processSourceBundleOnUninstall(event);
1: 		}
1: 		
0: 		private void processOriginBundleOnInstall(BundleEvent event) {
0: 			Bundle b = event.getOrigin();
0: 			// There's a brief window when Scope Admin is initializing where it's
0: 			// possible for the origin bundle to not be in a scope.
0: 			if (bundleToScope.get(b) == null) {
0: 				bundleToScope.put(b, rootScope);
0: 				rootScope.bundles.add(b);
1: 			}
1: 		}
1: 		
0: 		private void processSourceBundleOnInstall(BundleEvent event) {
0: 			Bundle b = event.getBundle();
0: 			// If the installer is not Scope Admin, add the installed bundle
0: 			// to the installer's scope.
0: 			if (event.getOrigin().getBundleId() != bundleContext.getBundle().getBundleId()) {
0: 				ScopeImpl s = bundleToScope.get(event.getOrigin());
0: 				bundleToScope.put(b, s);
0: 				s.bundles.add(b);
1: 			}
0: 			else {
0: 				ScopeImpl s = installingBundleToScope.remove(b.getLocation());
0: 				bundleToScope.put(b, s);
0: 				s.bundles.add(b);
1: 			}
1: 		}
1: 		
0: 		private void processSourceBundleOnUninstall(BundleEvent event) {
0: 			Bundle b = event.getBundle();
0: 			ScopeImpl s = bundleToScope.remove(b);
0: 			// There's a brief window when Scope Admin is initializing where it's
0: 			// possible for the scope to be null.
0: 			if (s != null) {
0: 				s.bundles.remove(b);
1: 			}
1: 		}
1: 	}
1: 	
0: 	private class BundleFindHook implements org.osgi.framework.hooks.bundle.FindHook {
0: 		public void find(BundleContext context, Collection<Bundle> bundles) {
0: 			Scope scope = bundleToScope.get(context.getBundle());
0: 			// A bundle may only see other bundles within its scope.
0: 			bundles.retainAll(scope.getBundles());
1: 		}
1: 	}
1: 	
0: 	private class EventListenerHook implements org.osgi.framework.hooks.service.EventListenerHook {
0: 		public void event(ServiceEvent event, Map<BundleContext, Collection<ListenerInfo>> listeners) {
0: 			Bundle bundle = event.getServiceReference().getBundle();
0: 			ScopeImpl scope = bundleToScope.get(bundle);
0: 			for (Iterator<BundleContext> i = listeners.keySet().iterator(); i.hasNext();) {
0: 				if (!scope.getBundles().contains(i.next().getBundle()))
0: 					i.remove();
1: 			}
1: 		}
1: 	}
1: 	
0: 	private class ResolverHook implements org.osgi.framework.hooks.resolver.ResolverHook {
0: 		public void end() {
1: 		}
1: 		
0: 		public void filterMatches(BundleRequirement requirement, Collection<BundleCapability> candidates) {
0: 			for (Iterator<BundleCapability> i = candidates.iterator(); i.hasNext();) {
0: 				if (filterMatch(requirement, i.next()))
0: 					i.remove();
1: 			}
1: 		}
1: 		
0: 		public void filterResolvable(Collection<BundleRevision> candidates) {
0: 			for (Iterator<BundleRevision> i = candidates.iterator(); i.hasNext();) {
0: 				BundleRevision candidate = i.next();
0: 				ScopeImpl scope = bundleToScope.get(candidate.getBundle());
0: 				if (scope.updating)
0: 					i.remove();
1: 			}
1: 		}
1: 
0: 		public void filterSingletonCollisions(BundleCapability singleton, Collection<BundleCapability> collisionCandidates) {
0: 			ScopeImpl scope = bundleToScope.get(singleton.getRevision().getBundle());
0: 			for (Iterator<BundleCapability> i = collisionCandidates.iterator(); i.hasNext();) {
0: 				BundleCapability collisionCandidate = i.next();
0: 				if (!scope.getBundles().contains(collisionCandidate.getRevision().getBundle())) {
0: 					i.remove();
1: 				}
1: 			}
1: 		}
1: 		
0: 		private boolean filterMatch(BundleRequirement requirement, BundleCapability capability) {
0: 			Scope scope = bundleToScope.get(requirement.getRevision().getBundle());
0: 			if (scope.getBundles().contains(capability.getRevision().getBundle()))
1: 				return false;
0: 			if (scope.getId() < bundleToScope.get(capability.getRevision().getBundle()).getId()) {
0: 				if (matchesDescendants(scope.getChildren(), capability, null))
1: 					return false;
1: 			}
0: 			return !matchesAncestry(scope, capability);
1: 		}
1: 		
0: 		private boolean matchesPolicyAndContainsBundle(Scope scope, BundleCapability capability, String sharePolicyType) {
0: 			if (matchesPolicy(scope, capability, sharePolicyType)) {
0: 				if (scope.getBundles().contains(capability.getRevision().getBundle())) {
1: 					return true;
1: 				}
1: 			}
1: 			return false;
1: 		}
1: 		
0: 		private boolean matchesPolicy(Scope scope, BundleCapability capability, String sharePolicyType) {
0: 			List<SharePolicy> policies = scope.getSharePolicies(sharePolicyType).get(capability.getNamespace());
0: 			if (policies == null) return false;
0: 			for (SharePolicy policy : policies) {
0: 				if (policy.getFilter().matches(capability.getAttributes())) {
1: 					return true;
1: 				}
1: 			}
1: 			return false;
1: 		}
1: 		
0: 		private boolean matchesAncestry(Scope scope, BundleCapability capability) {
0: 			if (matchesPolicy(scope, capability, SharePolicy.TYPE_IMPORT)) {
0: 				Scope parent = scope.getParent();
0: 				if (parent != null) {
0: 					if (parent.getBundles().contains(capability.getRevision().getBundle())) 
1: 						return true;
0: 					if (matchesDescendants(parent.getChildren(), capability, scope))
1: 						return true;
0: 					return matchesAncestry(parent, capability);
1: 				}
1: 			}
1: 			return false;
1: 		}
1: 		
0: 		private boolean matchesDescendant(Scope child, BundleCapability capability) {
0: 			if (matchesPolicyAndContainsBundle(child, capability, SharePolicy.TYPE_EXPORT))
1: 				return true;
0: 			return matchesDescendants(child.getChildren(), capability, null);
1: 		}
1: 		
0: 		private boolean matchesDescendants(Collection<Scope> children, BundleCapability capability, Scope skip) {
0: 			for (Scope child : children) {
0: 				if (child.equals(skip))
0: 					continue;
0: 				if (matchesDescendant(child, capability)) {
1: 					return true;
1: 				}
1: 			}
1: 			return false;
1: 		}
1: 	}
1: 	
0: 	private class ResolverHookFactory implements org.osgi.framework.hooks.resolver.ResolverHookFactory {
0: 		public ResolverHook begin(java.util.Collection<BundleRevision> triggers) {
0: 			return new ResolverHook();
1: 		}
1: 	}
1: 	
0: 	private class ServiceFactory implements org.osgi.framework.ServiceFactory<Scope> {
0: 		public Scope getService(Bundle b, ServiceRegistration<Scope> sr) {
0: 			ScopeImpl scope = bundleToScope.get(b);
0: 			if (scope == null) {
0: 				scope = rootScope;
0: 				bundleToScope.put(b, scope);
1: 			}
0: 			return scope;
1: 		}
1: 
0: 		public void ungetService(Bundle b, ServiceRegistration<Scope> sr, Scope s) {
1: 		}
1: 	}
1: 	
0: 	private class ServiceFindHook implements org.osgi.framework.hooks.service.FindHook {
0: 		public void find(BundleContext context, String name, String filter, boolean allServices, Collection<ServiceReference<?>> references) {
0: 			// System bundle can see all services.
0: 			if (context.getBundle().getBundleId() == 0) return;
0: 			for (Iterator<ServiceReference<?>> i = references.iterator(); i.hasNext();) {
0: 				if (filterMatch(context, i.next()))
0: 					i.remove();
1: 			}
1: 		}
1: 		
0: 		private boolean filterMatch(BundleContext context, ServiceReference<?> reference) {
0: 			Scope scope = bundleToScope.get(context.getBundle());
0: 			if (scope.getBundles().contains(reference.getBundle()))
1: 				return false;
0: 			if (scope.getId() < bundleToScope.get(reference.getBundle()).getId()) {
0: 				if (matchesDescendants(scope.getChildren(), reference))
1: 					return false;
1: 			}
0: 			return !matchesAncestry(scope, reference);
1: 		}
1: 		
0: 		private boolean matchesPolicyAndContainsBundle(Scope scope, ServiceReference<?> reference, String sharePolicyType) {
0: 			if (matchesPolicy(scope, reference, sharePolicyType)) {
0: 				if (scope.getBundles().contains(reference.getBundle())) {
1: 					return true;
1: 				}
1: 			}
1: 			return false;
1: 		}
1: 		
0: 		private boolean matchesPolicy(Scope scope, ServiceReference<?> reference, String sharePolicyType) {
0: 			List<SharePolicy> policies = scope.getSharePolicies(sharePolicyType).get("scope.share.service");
0: 			if (policies == null) return false;
0: 			for (SharePolicy policy : policies) {
0: 				if (policy.getFilter().match(reference)) {
1: 					return true;
1: 				}
1: 			}
1: 			return false;
1: 		}
1: 		
0: 		private boolean matchesAncestry(Scope scope, ServiceReference<?> reference) {
0: 			if (matchesPolicy(scope, reference, SharePolicy.TYPE_IMPORT)) {
0: 				Scope parent = scope.getParent();
0: 				if (parent != null) {
0: 					if (parent.getBundles().contains(reference.getBundle())) 
1: 						return true;
0: 					return matchesAncestry(parent, reference);
1: 				}
1: 			}
1: 			return false;
1: 		}
1: 		
0: 		private boolean matchesDescendant(Scope child, ServiceReference<?> reference) {
0: 			if (matchesPolicyAndContainsBundle(child, reference, SharePolicy.TYPE_EXPORT))
1: 				return true;
0: 			return matchesDescendants(child.getChildren(), reference);
1: 		}
1: 		
0: 		private boolean matchesDescendants(Collection<Scope> children, ServiceReference<?> reference) {
0: 			for (Scope child : children) {
0: 				if (matchesDescendant(child, reference)) {
1: 					return true;
1: 				}
1: 			}
1: 			return false;
1: 		}
1: 	}
1: }
============================================================================