1:8914925: /*
1:8914925:  * Licensed to the Apache Software Foundation (ASF) under one
1:8914925:  * or more contributor license agreements.  See the NOTICE file
1:8914925:  * distributed with this work for additional information
1:8914925:  * regarding copyright ownership.  The ASF licenses this file
1:8914925:  * to you under the Apache License, Version 2.0 (the
1:8914925:  * "License"); you may not use this file except in compliance
1:8914925:  * with the License.  You may obtain a copy of the License at
1:8914925:  *
1:8914925:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8914925:  *
1:8914925:  * Unless required by applicable law or agreed to in writing,
1:8914925:  * software distributed under the License is distributed on an
1:8914925:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8914925:  * KIND, either express or implied.  See the License for the
1:8914925:  * specific language governing permissions and limitations
1:8914925:  * under the License.
1:8914925:  */
1:8914925: package org.apache.aries.application.impl;
2:8914925: 
1:9c133a0: import org.apache.aries.application.Content;
1:9c133a0: import org.apache.aries.application.ServiceDeclaration;
1:8914925: import org.osgi.framework.Filter;
1:8914925: import org.osgi.framework.FrameworkUtil;
1:8914925: import org.osgi.framework.InvalidSyntaxException;
1:8914925: 
1:8914925: /**
1:8914925:  * this class represents the Import-Services and Export-Services
1:8914925:  * in the Application.mf file
1:8914925:  *
1:8914925:  */
1:8914925: public class ServiceDeclarationImpl implements ServiceDeclaration
1:8914925: {
1:8914925:   private static final String FILTER = "filter";
1:8914925:   private String interfaceName;
1:8914925:   private Filter filter;
1:8914925:   
1:8914925:   /**
1:8914925:    * construct the ServiceDeclaration from the service string
1:47d4583:    * @param service A single service string value from the Import-Services or Export-Services header
1:8914925:    * @throws InvalidSyntaxException
1:8914925:    */
1:8914925:   public ServiceDeclarationImpl(String service) throws InvalidSyntaxException 
1:8914925:   {
1:8914925:     Content content = new ContentImpl(service);
1:8914925:     this.interfaceName = content.getContentName();
1:8914925:     String filterString = content.getAttribute(FILTER);
1:8914925:     if (filterString != null) {
1:8914925:       try {
1:8914925:         this.filter = FrameworkUtil.createFilter(filterString);
1:8914925:       } catch (InvalidSyntaxException ise) {        
1:8914925:         throw new InvalidSyntaxException("Failed to create filter for " + service, ise.getFilter(), ise.getCause());
1:8914925:       }
1:8914925:     }
1:8914925:   }
1:8914925:   
1:8914925:   /* (non-Javadoc)
1:8914925:  * @see org.apache.aries.application.impl.ServiceDeclaration#getInterfaceName()
1:8914925:  */
1:8914925:   public String getInterfaceName() 
1:8914925:   {
1:8914925:     return this.interfaceName;
1:8914925:   }
1:8914925:   
1:8914925:   /* (non-Javadoc)
1:8914925:  * @see org.apache.aries.application.impl.ServiceDeclaration#getFilter()
1:8914925:  */
1:8914925:   public Filter getFilter() 
1:8914925:   {
1:8914925:     return this.filter;
1:8914925:   }
1:9c133a0:   @Override
1:9c133a0:   public int hashCode()
1:9c133a0:   {
1:9c133a0:     final int prime = 31;
1:9c133a0:     int result = 1;
1:9c133a0:     result = prime * result + ((filter == null) ? 0 : filter.hashCode());
1:9c133a0:     result = prime * result + ((interfaceName == null) ? 0 : interfaceName.hashCode());
1:9c133a0:     return result;
1:9c133a0:   }
1:9c133a0: 
1:9c133a0:   @Override
1:9c133a0:   public boolean equals(Object obj)
1:9c133a0:   {
1:9c133a0:     if (this == obj) return true;
1:9c133a0:     if (obj == null) return false;
1:9c133a0:     if (getClass() != obj.getClass()) return false;
1:9c133a0:     ServiceDeclarationImpl other = (ServiceDeclarationImpl) obj;
1:9c133a0:     if (filter == null) {
1:9c133a0:       if (other.filter != null) return false;
1:9c133a0:     } else if (!filter.equals(other.filter)) return false;
1:9c133a0:     if (interfaceName == null) {
1:9c133a0:       if (other.interfaceName != null) return false;
1:9c133a0:     } else if (!interfaceName.equals(other.interfaceName)) return false;
1:9c133a0:     return true;
1:9c133a0:   }
1:8914925: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9c133a0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.Content;
1: import org.apache.aries.application.ServiceDeclaration;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public int hashCode()
1:   {
1:     final int prime = 31;
1:     int result = 1;
1:     result = prime * result + ((filter == null) ? 0 : filter.hashCode());
1:     result = prime * result + ((interfaceName == null) ? 0 : interfaceName.hashCode());
1:     return result;
1:   }
1: 
1:   @Override
1:   public boolean equals(Object obj)
1:   {
1:     if (this == obj) return true;
1:     if (obj == null) return false;
1:     if (getClass() != obj.getClass()) return false;
1:     ServiceDeclarationImpl other = (ServiceDeclarationImpl) obj;
1:     if (filter == null) {
1:       if (other.filter != null) return false;
1:     } else if (!filter.equals(other.filter)) return false;
1:     if (interfaceName == null) {
1:       if (other.interfaceName != null) return false;
1:     } else if (!interfaceName.equals(other.interfaceName)) return false;
1:     return true;
1:   }
commit:47d4583
/////////////////////////////////////////////////////////////////////////
1:    * @param service A single service string value from the Import-Services or Export-Services header
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.impl;
1: 
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: 
0: import org.apache.aries.application.Content;
0: import org.apache.aries.application.ServiceDeclaration;
1: 
1: /**
1:  * this class represents the Import-Services and Export-Services
1:  * in the Application.mf file
1:  *
1:  */
1: public class ServiceDeclarationImpl implements ServiceDeclaration
1: {
1:   private static final String FILTER = "filter";
1:   private String interfaceName;
1:   private Filter filter;
1:   
1:   /**
1:    * construct the ServiceDeclaration from the service string
0:    * @param service A single service string value from the Import-Services or Export-Services header
1:    * @throws InvalidSyntaxException
1:    */
1:   public ServiceDeclarationImpl(String service) throws InvalidSyntaxException 
1:   {
1:     Content content = new ContentImpl(service);
1:     this.interfaceName = content.getContentName();
1:     String filterString = content.getAttribute(FILTER);
1:     if (filterString != null) {
1:       try {
1:         this.filter = FrameworkUtil.createFilter(filterString);
1:       } catch (InvalidSyntaxException ise) {        
1:         throw new InvalidSyntaxException("Failed to create filter for " + service, ise.getFilter(), ise.getCause());
1:       }
1:     }
1:   }
1:   
1:   /* (non-Javadoc)
1:  * @see org.apache.aries.application.impl.ServiceDeclaration#getInterfaceName()
1:  */
1:   public String getInterfaceName() 
1:   {
1:     return this.interfaceName;
1:   }
1:   
1:   /* (non-Javadoc)
1:  * @see org.apache.aries.application.impl.ServiceDeclaration#getFilter()
1:  */
1:   public Filter getFilter() 
1:   {
1:     return this.filter;
1:   }
1: }
author:Graham Charters
-------------------------------------------------------------------------------
commit:d77c519
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.application.impl;
0: 
0: import org.osgi.framework.Filter;
0: import org.osgi.framework.FrameworkUtil;
0: import org.osgi.framework.InvalidSyntaxException;
0: 
0: import org.apache.aries.application.Content;
0: import org.apache.aries.application.ServiceDeclaration;
0: 
0: /**
0:  * this class represents the Import-Services and Export-Services
0:  * in the Application.mf file
0:  *
0:  */
0: public class ServiceDeclarationImpl implements ServiceDeclaration
0: {
0:   private static final String FILTER = "filter";
0:   private String interfaceName;
0:   private Filter filter;
0:   
0:   /**
0:    * construct the ServiceDeclaration from the service string
0:    * @param service  the service string value of Import-Services or Export-Services header
0:    * @throws InvalidSyntaxException
0:    */
0:   public ServiceDeclarationImpl(String service) throws InvalidSyntaxException 
0:   {
0:     Content content = new ContentImpl(service);
0:     this.interfaceName = content.getContentName();
0:     String filterString = content.getAttribute(FILTER);
0:     if (filterString != null) {
0:       try {
0:         this.filter = FrameworkUtil.createFilter(filterString);
0:       } catch (InvalidSyntaxException ise) {        
0:         throw new InvalidSyntaxException("Failed to create filter for " + service, ise.getFilter(), ise.getCause());
0:       }
0:     }
0:   }
0:   
0:   /* (non-Javadoc)
0:  * @see org.apache.aries.application.impl.ServiceDeclaration#getInterfaceName()
0:  */
0:   public String getInterfaceName() 
0:   {
0:     return this.interfaceName;
0:   }
0:   
0:   /* (non-Javadoc)
0:  * @see org.apache.aries.application.impl.ServiceDeclaration#getFilter()
0:  */
0:   public Filter getFilter() 
0:   {
0:     return this.filter;
0:   }
0: }
============================================================================