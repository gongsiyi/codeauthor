1:bb9ffe7: /**
1:bb9ffe7:  * Licensed to the Apache Software Foundation (ASF) under one
1:bb9ffe7:  * or more contributor license agreements.  See the NOTICE file
1:bb9ffe7:  * distributed with this work for additional information
1:bb9ffe7:  * regarding copyright ownership.  The ASF licenses this file
1:bb9ffe7:  * to you under the Apache License, Version 2.0 (the
1:bb9ffe7:  * "License"); you may not use this file except in compliance
1:bb9ffe7:  * with the License.  You may obtain a copy of the License at
1:bb9ffe7:  *
1:bb9ffe7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:bb9ffe7:  *
1:bb9ffe7:  * Unless required by applicable law or agreed to in writing,
1:bb9ffe7:  * software distributed under the License is distributed on an
1:bb9ffe7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bb9ffe7:  * KIND, either express or implied.  See the License for the
1:bb9ffe7:  * specific language governing permissions and limitations
1:bb9ffe7:  * under the License.
1:bb9ffe7:  */
1:e0beeec: package org.apache.aries.samples.blog.biz;
3:bb9ffe7: 
1:bb9ffe7: import java.text.ParseException;
1:bb9ffe7: import java.text.SimpleDateFormat;
1:bb9ffe7: import java.util.ArrayList;
1:bb9ffe7: import java.util.Date;
1:bb9ffe7: import java.util.List;
1:bb9ffe7: 
1:bb9ffe7: import org.apache.aries.samples.blog.api.BlogAuthor;
1:bb9ffe7: import org.apache.aries.samples.blog.api.BlogEntry;
1:bb9ffe7: import org.apache.aries.samples.blog.api.BlogEntryManager;
1:380a6c0: import org.apache.aries.samples.blog.api.persistence.BlogPersistenceService;
1:380a6c0: import org.apache.aries.samples.blog.api.persistence.Entry;
1:bb9ffe7: 
1:bb9ffe7: 
1:bb9ffe7: 
1:bb9ffe7: public class BlogEntryManagerImpl implements BlogEntryManager
1:bb9ffe7: {
1:bb9ffe7:   private BlogPersistenceService persistenceService;
1:bb9ffe7:   
1:bb9ffe7: 
1:bb9ffe7:   // Injected via blueprint
1:bb9ffe7:   public void setPersistenceService(BlogPersistenceService persistenceService)
1:bb9ffe7:   {
1:bb9ffe7:     this.persistenceService = persistenceService;
3:bb9ffe7:   }
1:bb9ffe7:   
1:bb9ffe7:   
1:bb9ffe7:   public void createBlogPost(String email, String title, String blogText, List<String> tags)
1:bb9ffe7:   {
1:bb9ffe7:     persistenceService.createBlogPost(email, title, blogText, tags);
1:bb9ffe7:   }
1:bb9ffe7:   
1:bb9ffe7:   public Entry findBlogEntryByTitle(String title)
1:bb9ffe7:   {
1:bb9ffe7:     return persistenceService.findBlogEntryByTitle(title);
1:bb9ffe7:   }
1:bb9ffe7:   
1:bb9ffe7:   public List<? extends BlogEntry> getAllBlogEntries()
1:bb9ffe7:   {
1:bb9ffe7: 	  List<? extends Entry> entries = persistenceService.getAllBlogEntries();
1:bb9ffe7: 		return adaptEntries(entries);
1:bb9ffe7:   }
1:bb9ffe7:   
1:bb9ffe7:   public List<? extends BlogEntry> getBlogEntries(int firstPostIndex, int noOfPosts)
1:bb9ffe7:   { 
1:bb9ffe7: 	  List<? extends Entry> entries = persistenceService.getBlogEntries(firstPostIndex, noOfPosts);		   		      
1:bb9ffe7: 		return adaptEntries(entries);
1:bb9ffe7:   }
1:bb9ffe7:   
1:bb9ffe7:   public List<? extends BlogEntry> getBlogsForAuthor(String emailAddress)
1:bb9ffe7:   {
1:bb9ffe7: 		List <?extends Entry> entries= persistenceService.getBlogsForAuthor(emailAddress);
1:bb9ffe7: 		return adaptEntries(entries);
1:bb9ffe7:     
1:bb9ffe7:   }
1:bb9ffe7:   
1:bb9ffe7:   public List<? extends BlogEntry> getBlogEntriesModifiedBetween(String startDate, String endDate) throws ParseException
1:bb9ffe7:   {
1:bb9ffe7:     if(startDate == null || "".equals(startDate)) throw new IllegalArgumentException("A valid start date must be supplied");
1:bb9ffe7:     if(endDate == null || "".equals(endDate)) throw new IllegalArgumentException("A valid end date must be supplied");
1:8aedaf5:     SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
1:bb9ffe7:     Date start = sdf.parse(startDate);
1:bb9ffe7:     Date end = sdf.parse(endDate);
1:bb9ffe7: 	List <? extends Entry> entries = persistenceService.getBlogEntriesModifiedBetween(start, end);
1:bb9ffe7: 	return adaptEntries(entries);
1:bb9ffe7:   }
1:bb9ffe7:   
1:bb9ffe7:   public int getNoOfPosts()
1:bb9ffe7:   {
1:bb9ffe7:     return persistenceService.getNoOfBlogEntries();
1:bb9ffe7:   }
1:bb9ffe7:   
1:bb9ffe7:   public void removeBlogEntry(BlogAuthor a, String title, String publishDate) throws ParseException
1:bb9ffe7:   {
1:bb9ffe7:     if(a == null) throw new IllegalArgumentException("An author must be specified");
1:bb9ffe7:     if(title == null) title = "";
1:bb9ffe7:     if(publishDate == null) throw new IllegalArgumentException("The article must have a publication date");
1:bb9ffe7:     Date pubDate = parseDate(publishDate);
1:bb9ffe7:     long found = -920234218060948564L;
1:bb9ffe7:     
1:bb9ffe7:     for(BlogEntry b : a.getEntries()) {
1:bb9ffe7:       if(title.equals(b.getTitle()) && pubDate.equals(b.getPublishDate())){
1:bb9ffe7:         found = b.getId();
1:bb9ffe7:         break;
1:bb9ffe7:       }
1:bb9ffe7:     }
1:bb9ffe7:     persistenceService.removeBlogEntry(found);
1:bb9ffe7:   }
1:bb9ffe7:   
1:bb9ffe7:   public void updateBlogEntry(BlogEntry originalEntry, BlogAuthor a, String title, String publishDate, String blogText, List<String> tags) throws ParseException
1:bb9ffe7:   {
1:bb9ffe7: 	
1:bb9ffe7: 	if (originalEntry.getAuthor() == null
1:bb9ffe7: 			|| originalEntry.getAuthorEmail() == null)
1:bb9ffe7: 		throw new IllegalArgumentException("An author must be specified");
1:bb9ffe7: 	if (title == null)
1:bb9ffe7: 		title = "";
1:bb9ffe7: 	if (publishDate == null)
1:bb9ffe7: 		throw new IllegalArgumentException(
1:bb9ffe7: 				"The article must have a publication date");
1:bb9ffe7: 	long found = -920234218060948564L;
1:bb9ffe7: 	Date pubDate = parseDate(publishDate);
1:bb9ffe7: 	for (BlogEntry b : getBlogsForAuthor(originalEntry.getAuthorEmail()
1:bb9ffe7: 			)) {
1:bb9ffe7: 		if (title.equals(b.getTitle())
1:bb9ffe7: 				&& pubDate.equals(b.getPublishDate())) {
1:bb9ffe7: 			found = b.getId();
1:bb9ffe7: 			break;
1:bb9ffe7: 		}
1:bb9ffe7: 	}
1:bb9ffe7: 
1:bb9ffe7: 	if (found == -920234218060948564L)
1:bb9ffe7: 		throw new IllegalArgumentException("No blog entry could be found");
1:bb9ffe7: 
1:bb9ffe7: 	String email = a.getEmailAddress();
1:bb9ffe7: 
1:bb9ffe7: 	if (tags == null) {
1:bb9ffe7: 		tags = new ArrayList<String>();
1:bb9ffe7: 	}
1:bb9ffe7: 
1:bb9ffe7: 	Date updatedDate = new Date(System.currentTimeMillis());
1:bb9ffe7: 
1:bb9ffe7: 	persistenceService.updateBlogEntry(found, email, title, blogText, tags,
1:bb9ffe7: 			updatedDate);
1:bb9ffe7:   }
1:bb9ffe7:   
1:bb9ffe7:   private Date parseDate(String dateString) throws ParseException
1:bb9ffe7:   {
1:8aedaf5:     SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
1:bb9ffe7:     return sdf.parse(dateString);
1:bb9ffe7:   }
1:bb9ffe7: 
1:bb9ffe7:   
1:bb9ffe7:   public BlogEntry getBlogPost(long id)
1:bb9ffe7:   {
1:bb9ffe7:     return new BlogEntryImpl(persistenceService.getBlogEntryById(id));
1:bb9ffe7:   }
1:bb9ffe7:   
1:8aedaf5: 	private List <? extends BlogEntry> adaptEntries(List<? extends Entry> entries) {
1:8aedaf5: 		return new BlogListAdapter<BlogEntry, Entry>(entries, BlogEntryImpl.class, Entry.class);
1:8aedaf5:   }
1:bb9ffe7: 	
1:bb9ffe7: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:380a6c0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.blog.api.persistence.BlogPersistenceService;
1: import org.apache.aries.samples.blog.api.persistence.Entry;
commit:e0beeec
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.blog.biz;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.blog.api.persistence.api.BlogPersistenceService;
0: import org.apache.aries.samples.blog.api.persistence.api.Entry;
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:8aedaf5
/////////////////////////////////////////////////////////////////////////
1:     SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
/////////////////////////////////////////////////////////////////////////
1:     SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
/////////////////////////////////////////////////////////////////////////
1: 	private List <? extends BlogEntry> adaptEntries(List<? extends Entry> entries) {
1: 		return new BlogListAdapter<BlogEntry, Entry>(entries, BlogEntryImpl.class, Entry.class);
1:   }
commit:afa98ec
commit:607acfe
commit:bb9ffe7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.samples.blog;
1: 
1: import java.text.ParseException;
1: import java.text.SimpleDateFormat;
1: import java.util.ArrayList;
1: import java.util.Date;
1: import java.util.List;
1: 
1: import org.apache.aries.samples.blog.api.BlogAuthor;
1: import org.apache.aries.samples.blog.api.BlogEntry;
1: import org.apache.aries.samples.blog.api.BlogEntryManager;
0: import org.apache.aries.samples.blog.persistence.api.BlogPersistenceService;
0: import org.apache.aries.samples.blog.persistence.api.Entry;
1: 
1: 
1: 
1: public class BlogEntryManagerImpl implements BlogEntryManager
1: {
1:   private BlogPersistenceService persistenceService;
1:   
1: 
1:   // Injected via blueprint
1:   public void setPersistenceService(BlogPersistenceService persistenceService)
1:   {
1:     this.persistenceService = persistenceService;
1:   }
1:   
1:   
1:   public void createBlogPost(String email, String title, String blogText, List<String> tags)
1:   {
1:     persistenceService.createBlogPost(email, title, blogText, tags);
1:   }
1:   
1:   public Entry findBlogEntryByTitle(String title)
1:   {
1:     return persistenceService.findBlogEntryByTitle(title);
1:   }
1:   
1:   public List<? extends BlogEntry> getAllBlogEntries()
1:   {
1: 	  List<? extends Entry> entries = persistenceService.getAllBlogEntries();
1: 		return adaptEntries(entries);
1:   }
1:   
1:   public List<? extends BlogEntry> getBlogEntries(int firstPostIndex, int noOfPosts)
1:   { 
1: 	  List<? extends Entry> entries = persistenceService.getBlogEntries(firstPostIndex, noOfPosts);		   		      
1: 		return adaptEntries(entries);
1:   }
1:   
1:   public List<? extends BlogEntry> getBlogsForAuthor(String emailAddress)
1:   {
1: 		List <?extends Entry> entries= persistenceService.getBlogsForAuthor(emailAddress);
1: 		return adaptEntries(entries);
1:     
1:   }
1:   
1:   public List<? extends BlogEntry> getBlogEntriesModifiedBetween(String startDate, String endDate) throws ParseException
1:   {
1:     if(startDate == null || "".equals(startDate)) throw new IllegalArgumentException("A valid start date must be supplied");
1:     if(endDate == null || "".equals(endDate)) throw new IllegalArgumentException("A valid end date must be supplied");
0:     SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");
1:     Date start = sdf.parse(startDate);
1:     Date end = sdf.parse(endDate);
1: 	List <? extends Entry> entries = persistenceService.getBlogEntriesModifiedBetween(start, end);
1: 	return adaptEntries(entries);
1:   }
1:   
1:   public int getNoOfPosts()
1:   {
1:     return persistenceService.getNoOfBlogEntries();
1:   }
1:   
1:   public void removeBlogEntry(BlogAuthor a, String title, String publishDate) throws ParseException
1:   {
1:     if(a == null) throw new IllegalArgumentException("An author must be specified");
1:     if(title == null) title = "";
1:     if(publishDate == null) throw new IllegalArgumentException("The article must have a publication date");
1:     Date pubDate = parseDate(publishDate);
1:     long found = -920234218060948564L;
1:     
1:     for(BlogEntry b : a.getEntries()) {
1:       if(title.equals(b.getTitle()) && pubDate.equals(b.getPublishDate())){
1:         found = b.getId();
1:         break;
1:       }
1:     }
1:     persistenceService.removeBlogEntry(found);
1:   }
1:   
1:   public void updateBlogEntry(BlogEntry originalEntry, BlogAuthor a, String title, String publishDate, String blogText, List<String> tags) throws ParseException
1:   {
1: 	
1: 	if (originalEntry.getAuthor() == null
1: 			|| originalEntry.getAuthorEmail() == null)
1: 		throw new IllegalArgumentException("An author must be specified");
1: 	if (title == null)
1: 		title = "";
1: 	if (publishDate == null)
1: 		throw new IllegalArgumentException(
1: 				"The article must have a publication date");
1: 	long found = -920234218060948564L;
1: 	Date pubDate = parseDate(publishDate);
1: 	for (BlogEntry b : getBlogsForAuthor(originalEntry.getAuthorEmail()
1: 			)) {
1: 		if (title.equals(b.getTitle())
1: 				&& pubDate.equals(b.getPublishDate())) {
1: 			found = b.getId();
1: 			break;
1: 		}
1: 	}
1: 
1: 	if (found == -920234218060948564L)
1: 		throw new IllegalArgumentException("No blog entry could be found");
1: 
1: 	String email = a.getEmailAddress();
1: 
1: 	if (tags == null) {
1: 		tags = new ArrayList<String>();
1: 	}
1: 
1: 	Date updatedDate = new Date(System.currentTimeMillis());
1: 
1: 	persistenceService.updateBlogEntry(found, email, title, blogText, tags,
1: 			updatedDate);
1:   }
1:   
1:   private Date parseDate(String dateString) throws ParseException
1:   {
0:     SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");
1:     return sdf.parse(dateString);
1:   }
1: 
1:   
1:   public BlogEntry getBlogPost(long id)
1:   {
1:     return new BlogEntryImpl(persistenceService.getBlogEntryById(id));
1:   }
1:   
0: 	private List <? extends BlogEntry> adaptEntries(List<? extends Entry> e) {
0: 		  List<BlogEntryImpl> posts = new ArrayList<BlogEntryImpl>();
1: 		    
0: 		    for (Entry entry : e) {
0: 		      posts.add(new BlogEntryImpl(entry));
1: 		    }
1: 		      
0: 		return posts;
1: 	}
1: 	
1: }
============================================================================