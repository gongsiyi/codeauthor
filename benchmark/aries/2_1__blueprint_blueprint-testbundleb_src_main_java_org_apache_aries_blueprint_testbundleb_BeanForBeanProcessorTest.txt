1:76b662a: /**
1:76b662a:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:76b662a:  *  contributor license agreements.  See the NOTICE file distributed with
1:76b662a:  *  this work for additional information regarding copyright ownership.
1:76b662a:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:76b662a:  *  (the "License"); you may not use this file except in compliance with
1:76b662a:  *  the License.  You may obtain a copy of the License at
1:76b662a:  *
1:76b662a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:76b662a:  *
1:76b662a:  *  Unless required by applicable law or agreed to in writing, software
1:76b662a:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:76b662a:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:76b662a:  *  See the License for the specific language governing permissions and
1:76b662a:  *  limitations under the License.
1:76b662a:  */
1:76b662a: package org.apache.aries.blueprint.testbundleb;
1:76b662a: 
1:76b662a: import java.util.ArrayList;
1:76b662a: import java.util.HashSet;
1:76b662a: import java.util.List;
1:76b662a: import java.util.Set;
1:76b662a: 
1:76b662a: import org.apache.aries.blueprint.BeanProcessor;
1:76b662a: import org.apache.aries.blueprint.testbundlea.ProcessableBean;
1:76b662a: 
1:76b662a: public class BeanForBeanProcessorTest implements ProcessableBean{
1:76b662a: 
1:76b662a:     Set<BeanProcessor> bps = new HashSet<BeanProcessor>();
1:76b662a:     Set<BeanProcessor> ad_bps = new HashSet<BeanProcessor>();
1:76b662a:     Set<BeanProcessor> ai_bps = new HashSet<BeanProcessor>();
1:76b662a:     Set<BeanProcessor> bd_bps = new HashSet<BeanProcessor>();
1:76b662a:     Set<BeanProcessor> bi_bps = new HashSet<BeanProcessor>();
1:76b662a:     
1:76b662a:     private List<BeanProcessor> toList(Set<BeanProcessor> s){
1:76b662a:         List<BeanProcessor> lbps = new ArrayList<BeanProcessor>();
1:76b662a:         lbps.addAll(s);
1:76b662a:         return lbps;
1:76b662a:     }
1:76b662a:     
1:76b662a:     public List<BeanProcessor> getProcessedBy() {
1:76b662a:         return toList(bps);
1:76b662a:     }
1:76b662a:     
1:76b662a:     public List<BeanProcessor> getProcessedBy(Phase p) {
1:76b662a:         switch(p){
1:76b662a:           case BEFORE_INIT : return toList(bi_bps);
1:76b662a:           case AFTER_INIT : return toList(ai_bps);
1:76b662a:           case BEFORE_DESTROY : return toList(bd_bps);
1:76b662a:           case AFTER_DESTROY : return toList(ad_bps);
1:76b662a:           default: return null;
1:76b662a:         }
1:76b662a:     }    
1:76b662a: 
1:76b662a:     public void processAfterDestroy(BeanProcessor bp) {
1:76b662a:         bps.add(bp);
1:76b662a:         ad_bps.add(bp);
1:76b662a:     }
1:76b662a: 
1:76b662a:     public void processAfterInit(BeanProcessor bp) {
1:76b662a:         bps.add(bp);
1:76b662a:         ai_bps.add(bp);
1:76b662a:     }
1:76b662a: 
1:76b662a:     public void processBeforeDestroy(BeanProcessor bp) {
1:76b662a:         bps.add(bp);
1:76b662a:         bd_bps.add(bp);
1:76b662a:     }
1:76b662a: 
1:76b662a:     public void processBeforeInit(BeanProcessor bp) {
1:76b662a:         bps.add(bp);
1:76b662a:         bi_bps.add(bp);
1:76b662a:     }
1:76b662a: 
1:76b662a: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.testbundleb;
1: 
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.aries.blueprint.BeanProcessor;
1: import org.apache.aries.blueprint.testbundlea.ProcessableBean;
1: 
1: public class BeanForBeanProcessorTest implements ProcessableBean{
1: 
1:     Set<BeanProcessor> bps = new HashSet<BeanProcessor>();
1:     Set<BeanProcessor> ad_bps = new HashSet<BeanProcessor>();
1:     Set<BeanProcessor> ai_bps = new HashSet<BeanProcessor>();
1:     Set<BeanProcessor> bd_bps = new HashSet<BeanProcessor>();
1:     Set<BeanProcessor> bi_bps = new HashSet<BeanProcessor>();
1:     
1:     private List<BeanProcessor> toList(Set<BeanProcessor> s){
1:         List<BeanProcessor> lbps = new ArrayList<BeanProcessor>();
1:         lbps.addAll(s);
1:         return lbps;
1:     }
1:     
1:     public List<BeanProcessor> getProcessedBy() {
1:         return toList(bps);
1:     }
1:     
1:     public List<BeanProcessor> getProcessedBy(Phase p) {
1:         switch(p){
1:           case BEFORE_INIT : return toList(bi_bps);
1:           case AFTER_INIT : return toList(ai_bps);
1:           case BEFORE_DESTROY : return toList(bd_bps);
1:           case AFTER_DESTROY : return toList(ad_bps);
1:           default: return null;
1:         }
1:     }    
1: 
1:     public void processAfterDestroy(BeanProcessor bp) {
1:         bps.add(bp);
1:         ad_bps.add(bp);
1:     }
1: 
1:     public void processAfterInit(BeanProcessor bp) {
1:         bps.add(bp);
1:         ai_bps.add(bp);
1:     }
1: 
1:     public void processBeforeDestroy(BeanProcessor bp) {
1:         bps.add(bp);
1:         bd_bps.add(bp);
1:     }
1: 
1:     public void processBeforeInit(BeanProcessor bp) {
1:         bps.add(bp);
1:         bi_bps.add(bp);
1:     }
1: 
1: }
author:Andrew Osborne
-------------------------------------------------------------------------------
commit:3d4dd1b
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *  Licensed to the Apache Software Foundation (ASF) under one or more
0:  *  contributor license agreements.  See the NOTICE file distributed with
0:  *  this work for additional information regarding copyright ownership.
0:  *  The ASF licenses this file to You under the Apache License, Version 2.0
0:  *  (the "License"); you may not use this file except in compliance with
0:  *  the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  *  Unless required by applicable law or agreed to in writing, software
0:  *  distributed under the License is distributed on an "AS IS" BASIS,
0:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  *  See the License for the specific language governing permissions and
0:  *  limitations under the License.
0:  */
0: package org.apache.aries.blueprint.testbundleb;
0: 
0: import java.util.ArrayList;
0: import java.util.HashSet;
0: import java.util.List;
0: import java.util.Set;
0: 
0: import org.apache.aries.blueprint.BeanProcessor;
0: import org.apache.aries.blueprint.testbundlea.ProcessableBean;
0: 
0: public class BeanForBeanProcessorTest implements ProcessableBean{
0: 
0:     Set<BeanProcessor> bps = new HashSet<BeanProcessor>();
0:     Set<BeanProcessor> ad_bps = new HashSet<BeanProcessor>();
0:     Set<BeanProcessor> ai_bps = new HashSet<BeanProcessor>();
0:     Set<BeanProcessor> bd_bps = new HashSet<BeanProcessor>();
0:     Set<BeanProcessor> bi_bps = new HashSet<BeanProcessor>();
0:     
0:     private List<BeanProcessor> toList(Set<BeanProcessor> s){
0:         List<BeanProcessor> lbps = new ArrayList<BeanProcessor>();
0:         lbps.addAll(s);
0:         return lbps;
0:     }
0:     
0:     public List<BeanProcessor> getProcessedBy() {
0:         return toList(bps);
0:     }
0:     
0:     public List<BeanProcessor> getProcessedBy(Phase p) {
0:         switch(p){
0:           case BEFORE_INIT : return toList(bi_bps);
0:           case AFTER_INIT : return toList(ai_bps);
0:           case BEFORE_DESTROY : return toList(bd_bps);
0:           case AFTER_DESTROY : return toList(ad_bps);
0:           default: return null;
0:         }
0:     }    
0: 
0:     public void processAfterDestroy(BeanProcessor bp) {
0:         bps.add(bp);
0:         ad_bps.add(bp);
0:     }
0: 
0:     public void processAfterInit(BeanProcessor bp) {
0:         bps.add(bp);
0:         ai_bps.add(bp);
0:     }
0: 
0:     public void processBeforeDestroy(BeanProcessor bp) {
0:         bps.add(bp);
0:         bd_bps.add(bp);
0:     }
0: 
0:     public void processBeforeInit(BeanProcessor bp) {
0:         bps.add(bp);
0:         bi_bps.add(bp);
0:     }
0: 
0: }
============================================================================