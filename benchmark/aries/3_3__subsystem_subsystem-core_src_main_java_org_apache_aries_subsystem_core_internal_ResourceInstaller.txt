1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:225bcae: package org.apache.aries.subsystem.core.internal;
1:ad2b527: 
1:79b20bc: import org.apache.aries.subsystem.ContentHandler;
1:e341c9b: import org.apache.aries.subsystem.core.archive.DeployedContentHeader;
1:307d743: import org.apache.aries.subsystem.core.archive.DeploymentManifest;
1:79b20bc: import org.osgi.framework.ServiceReference;
1:777b216: import org.osgi.framework.namespace.IdentityNamespace;
1:225bcae: import org.osgi.resource.Resource;
1:225bcae: import org.osgi.service.coordinator.Coordination;
1:777b216: import org.osgi.service.subsystem.SubsystemConstants;
1:777b216: import org.osgi.service.subsystem.SubsystemException;
5:225bcae: 
1:225bcae: public abstract class ResourceInstaller {
1:5bd3bf6: 	public static ResourceInstaller newInstance(Coordination coordination, Resource resource, BasicSubsystem subsystem) {
1:777b216: 		String type = ResourceHelper.getTypeAttribute(resource);
1:777b216: 		if (SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION.equals(type)
1:777b216: 				|| SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type)
1:79b20bc: 				|| SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type)) {
1:307d743: 			return new SubsystemResourceInstaller(coordination, resource, subsystem);
1:79b20bc: 		} else if (IdentityNamespace.TYPE_BUNDLE.equals(type) || IdentityNamespace.TYPE_FRAGMENT.equals(type)) {
1:307d743: 			return new BundleResourceInstaller(coordination, resource, subsystem);
1:79b20bc: 		} else if (Constants.ResourceTypeSynthesized.equals(type)) {
1:ad2b527: 			return new ResourceInstaller(coordination, resource, subsystem) {
1:ad2b527: 				@Override
1:ad2b527: 				public Resource install() throws Exception {
1:ad2b527: 					// do nothing;
1:ad2b527: 					return resource;
1:ad2b527: 				}
1:ad2b527: 			};
1:79b20bc: 		} else {
1:79b20bc: 		    ServiceReference<ContentHandler> handlerRef = CustomResources.getCustomContentHandler(subsystem, type);
1:79b20bc: 		    if (handlerRef != null)
1:79b20bc: 		        return new CustomResourceInstaller(coordination, resource, type, subsystem, handlerRef);
1:225bcae: 
1:ad2b527: 		}
1:777b216: 		throw new SubsystemException("No installer exists for resource type: " + type);
1:777b216: 	}
1:777b216: 
1:225bcae:     protected final Coordination coordination;
1:5bd3bf6: 	protected final BasicSubsystem provisionTo;
1:a990e32: 	/* resource to install */
1:225bcae: 	protected final Resource resource;
1:a990e32: 	/* parent subsystem being installed into */
1:5bd3bf6: 	protected final BasicSubsystem subsystem;
1:225bcae: 
1:5bd3bf6: 	public ResourceInstaller(Coordination coordination, Resource resource, BasicSubsystem subsystem) {
1:a990e32: 		if (coordination == null || resource == null || subsystem == null) {
1:a990e32: 			// We're assuming these are not null post construction, so enforce it here.
1:a990e32: 			throw new NullPointerException();
1:a990e32: 		}
1:225bcae: 		this.coordination = coordination;
1:225bcae: 		this.resource = resource;
1:225bcae: 		this.subsystem = subsystem;
1:e341c9b: 		if (isDependency()) {
1:777b216: 			if (Utils.isInstallableResource(resource))
1:777b216: 				provisionTo = Utils.findFirstSubsystemAcceptingDependenciesStartingFrom(subsystem);
1:777b216: 			else
1:777b216: 				provisionTo = null;
1:777b216: 		}
1:777b216: 		else
1:225bcae: 			provisionTo = subsystem;
6:225bcae: 	}
1:225bcae: 
1:777b216: 	public abstract Resource install() throws Exception;
1:777b216: 
1:225bcae: 	protected void addConstituent(final Resource resource) {
1:e341c9b: 		// Don't let a resource become a constituent of itself.
1:391a1aa: 		if (provisionTo == null || resource.equals(provisionTo))
1:777b216: 			return;
1:391a1aa: 		Activator.getInstance().getSubsystems().addConstituent(provisionTo, resource, isReferencedProvisionTo());
1:225bcae: 	}
1:225bcae: 
1:225bcae: 	protected void addReference(final Resource resource) {
1:e341c9b: 		// Don't let a resource reference itself.
1:e341c9b: 		if (resource.equals(subsystem))
1:777b216: 			return;
1:391a1aa: 		// The following check protects against resources posing as content
1:391a1aa: 		// during a restart since the Deployed-Content header is currently used
1:391a1aa: 		// to track all constituents for persistence purposes, which includes
1:391a1aa: 		// resources that were provisioned to the subsystem as dependencies of
1:391a1aa: 		// other resources.
1:0c7fec8: 		if (isReferencedSubsystem()) {
1:391a1aa: 			Activator.getInstance().getSubsystems().addReference(subsystem, resource);
1:225bcae: 		}
1:225bcae: 	}
1:225bcae: 
1:225bcae: 	protected String getLocation() {
1:47cea41: 		return provisionTo.getLocation() + "!/" + ResourceHelper.getLocation(resource);
1:225bcae: 	}
1:307d743: 
1:e341c9b: 	protected boolean isContent() {
1:391a1aa: 		return Utils.isContent(subsystem, resource);
1:e341c9b: 	}
1:e341c9b: 
1:e341c9b: 	protected boolean isDependency() {
1:391a1aa: 		return Utils.isDependency(subsystem, resource);
1:391a1aa: 	}
1:391a1aa: 
1:391a1aa: 	protected boolean isReferencedProvisionTo() {
1:e341c9b: 		DeploymentManifest manifest = subsystem.getDeploymentManifest();
1:391a1aa: 		if (manifest != null) {
1:391a1aa: 			DeployedContentHeader header = manifest.getDeployedContentHeader();
1:391a1aa: 			if (header != null && header.contains(resource))
1:391a1aa: 				return subsystem.isReferenced(resource);
1:391a1aa: 		}
1:391a1aa: 		if (subsystem.equals(provisionTo))
1:391a1aa: 			return isReferencedSubsystem();
1:391a1aa: 		return false;
1:391a1aa: 	}
1:391a1aa: 
1:391a1aa: 	protected boolean isReferencedSubsystem() {
1:391a1aa: 		DeploymentManifest manifest = subsystem.getDeploymentManifest();
1:391a1aa: 		if (manifest != null) {
1:391a1aa: 			DeployedContentHeader header = manifest.getDeployedContentHeader();
1:391a1aa: 			if (header != null && header.contains(resource))
1:391a1aa: 				return subsystem.isReferenced(resource);
1:391a1aa: 		}
1:391a1aa: 		return true;
1:307d743: 	}
1:225bcae: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	/* resource to install */
1: 	/* parent subsystem being installed into */
1: 		if (coordination == null || resource == null || subsystem == null) {
1: 			// We're assuming these are not null post construction, so enforce it here.
1: 			throw new NullPointerException();
1: 		}
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ad2b527
/////////////////////////////////////////////////////////////////////////
0: 		else if (Constants.ResourceTypeSynthesized.equals(type)) {
1: 			return new ResourceInstaller(coordination, resource, subsystem) {
1: 				
1: 				@Override
1: 				public Resource install() throws Exception {
1: 					// do nothing;
1: 					return resource;
1: 				}
1: 			};
1: 		}
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	public static ResourceInstaller newInstance(Coordination coordination, Resource resource, BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 	protected final BasicSubsystem provisionTo;
1: 	protected final BasicSubsystem subsystem;
1: 	public ResourceInstaller(Coordination coordination, Resource resource, BasicSubsystem subsystem) {
commit:47cea41
/////////////////////////////////////////////////////////////////////////
1: 		return provisionTo.getLocation() + "!/" + ResourceHelper.getLocation(resource);
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		if (provisionTo == null || resource.equals(provisionTo))
1: 		Activator.getInstance().getSubsystems().addConstituent(provisionTo, resource, isReferencedProvisionTo());
/////////////////////////////////////////////////////////////////////////
1: 		// The following check protects against resources posing as content
1: 		// during a restart since the Deployed-Content header is currently used
1: 		// to track all constituents for persistence purposes, which includes
1: 		// resources that were provisioned to the subsystem as dependencies of
1: 		// other resources.
0: 		if (isReferencedSubsystem())
1: 			Activator.getInstance().getSubsystems().addReference(subsystem, resource);
/////////////////////////////////////////////////////////////////////////
1: 		return Utils.isContent(subsystem, resource);
1: 		return Utils.isDependency(subsystem, resource);
1: 	}
1: 	
1: 	protected boolean isReferencedProvisionTo() {
1: 		if (manifest != null) {
1: 			DeployedContentHeader header = manifest.getDeployedContentHeader();
1: 			if (header != null && header.contains(resource))
1: 				return subsystem.isReferenced(resource);
1: 		}
1: 		if (subsystem.equals(provisionTo))
1: 			return isReferencedSubsystem();
1: 		return false;
1: 	}
1: 	
1: 	protected boolean isReferencedSubsystem() {
1: 		DeploymentManifest manifest = subsystem.getDeploymentManifest();
1: 		if (manifest != null) {
1: 			DeployedContentHeader header = manifest.getDeployedContentHeader();
1: 			if (header != null && header.contains(resource))
1: 				return subsystem.isReferenced(resource);
1: 		}
1: 		return true;
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:e341c9b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.archive.DeployedContentHeader;
/////////////////////////////////////////////////////////////////////////
1: 		if (isDependency()) {
1: 		// Don't let a resource become a constituent of itself.
0: 		if (resource.equals(provisionTo))
0: 		Activator.getInstance().getSubsystems().addConstituent(provisionTo, resource, isContent());
/////////////////////////////////////////////////////////////////////////
1: 		// Don't let a resource reference itself.
1: 		if (resource.equals(subsystem))
/////////////////////////////////////////////////////////////////////////
1: 	protected boolean isContent() {
1: 		DeploymentManifest manifest = subsystem.getDeploymentManifest();
0: 		DeployedContentHeader header = manifest.getDeployedContentHeader();
0: 		if (header == null)
0: 			return !isDependency();
0: 		return header.contains(resource) || !isDependency();
1: 	}
1: 	
1: 	protected boolean isDependency() {
commit:307d743
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.archive.DeploymentManifest;
0: import org.apache.aries.subsystem.core.archive.ProvisionResourceHeader;
/////////////////////////////////////////////////////////////////////////
0: 	public static ResourceInstaller newInstance(Coordination coordination, Resource resource, AriesSubsystem subsystem) {
1: 			return new SubsystemResourceInstaller(coordination, resource, subsystem);
1: 			return new BundleResourceInstaller(coordination, resource, subsystem);
/////////////////////////////////////////////////////////////////////////
0: 	public ResourceInstaller(Coordination coordination, Resource resource, AriesSubsystem subsystem) {
0: 		if (isTransitive()) {
/////////////////////////////////////////////////////////////////////////
0: 		// subsystem will be null when the root or a persisted subsystem is
0: 		// being installed
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	protected boolean isTransitive() {
0: 		if (subsystem == null)
0: 			return false;
0: 		DeploymentManifest manifest = subsystem.getDeploymentManifest();
0: 		if (manifest == null)
0: 			return false;
0: 		ProvisionResourceHeader header = manifest.getProvisionResourceHeader();
0: 		if (header == null)
0: 			return false;
0: 		return header.contains(resource);
1: 	}
commit:547a8ce
/////////////////////////////////////////////////////////////////////////
0: 			// The resource is a dependency and not content.
0: 				// If the dependency needs to be installed, it must go into the
0: 				// first subsystem in the parent chain that accepts
0: 				// dependencies.
0: 				// If the dependency has already been installed, it does not
0: 				// need to be provisioned.
0: 			// The resource is content and must go into the subsystem declaring
0: 			// it as such.
0: 		// provisionTo will be null when the resource is an already installed
0: 		// dependency.
/////////////////////////////////////////////////////////////////////////
0: 		// subsystem will be null when a persisted subsystem is being installed
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
0: 	public static ResourceInstaller newInstance(Coordination coordination, Resource resource, AriesSubsystem subsystem, boolean transitive) {
1: 		String type = ResourceHelper.getTypeAttribute(resource);
1: 		if (SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION.equals(type)
1: 				|| SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type)
0: 				|| SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type))
0: 			return new SubsystemResourceInstaller(coordination, resource, subsystem, transitive);
0: 		else if (IdentityNamespace.TYPE_BUNDLE.equals(type) || IdentityNamespace.TYPE_FRAGMENT.equals(type))
0: 			return new BundleResourceInstaller(coordination, resource, subsystem, transitive);
1: 		else
1: 			throw new SubsystemException("No installer exists for resource type: " + type);
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
0: 		if (transitive) {
1: 			if (Utils.isInstallableResource(resource))
1: 				provisionTo = Utils.findFirstSubsystemAcceptingDependenciesStartingFrom(subsystem);
1: 			else
1: 				provisionTo = null;
1: 		}
1: 	public abstract Resource install() throws Exception;
1: 	
0: 		if (provisionTo == null)
1: 			return;
/////////////////////////////////////////////////////////////////////////
0: 		if (subsystem == null)
1: 			return;
/////////////////////////////////////////////////////////////////////////
commit:225bcae
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import org.osgi.resource.Resource;
1: import org.osgi.service.coordinator.Coordination;
0: import org.osgi.service.coordinator.Participant;
1: 
1: public abstract class ResourceInstaller {
1: 	protected final Coordination coordination;
0: 	protected final AriesSubsystem provisionTo;
1: 	protected final Resource resource;
0: 	protected final AriesSubsystem subsystem;
1: 	
0: 	public ResourceInstaller(Coordination coordination, Resource resource, AriesSubsystem subsystem, boolean transitive) {
1: 		this.coordination = coordination;
1: 		this.resource = resource;
1: 		this.subsystem = subsystem;
0: 		if (transitive)
0: 			provisionTo = Utils.findFirstSubsystemAcceptingDependenciesStartingFrom(subsystem);
0: 		else
1: 			provisionTo = subsystem;
1: 	}
1: 	
1: 	protected void addConstituent(final Resource resource) {
0: 		Activator.getInstance().getSubsystems().addConstituent(provisionTo, resource);
0: 		coordination.addParticipant(new Participant() {
0: 			@Override
0: 			public void ended(Coordination arg0) throws Exception {
0: 				// Nothing
1: 			}
1: 
0: 			@Override
0: 			public void failed(Coordination arg0) throws Exception {
0: 				Activator.getInstance().getSubsystems().removeConstituent(provisionTo, resource);
1: 			}
0: 		});
1: 	}
1: 	
1: 	protected void addReference(final Resource resource) {
0: 		Activator.getInstance().getSubsystems().addReference(subsystem, resource);
0: 		coordination.addParticipant(new Participant() {
0: 			@Override
0: 			public void ended(Coordination arg0) throws Exception {
0: 				// Nothing
1: 			}
1: 
0: 			@Override
0: 			public void failed(Coordination arg0) throws Exception {
0: 				Activator.getInstance().getSubsystems().removeReference(subsystem, resource);
1: 			}
0: 		});
1: 	}
1: 	
1: 	protected String getLocation() {
0: 		return provisionTo.getSubsystemId() + "@" + provisionTo.getSymbolicName() + "@" + ResourceHelper.getSymbolicNameAttribute(resource);
1: 	}
1: 	
0: 	protected void removeConstituent() {
0: 		Activator.getInstance().getSubsystems().removeConstituent(provisionTo, resource);
1: 	}
1: 	
0: 	protected void removeReference() {
0: 		Activator.getInstance().getSubsystems().removeReference(subsystem, resource);
1: 	}
1: }
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:79b20bc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.ContentHandler;
1: import org.osgi.framework.ServiceReference;
/////////////////////////////////////////////////////////////////////////
1: 				|| SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type)) {
1: 		} else if (IdentityNamespace.TYPE_BUNDLE.equals(type) || IdentityNamespace.TYPE_FRAGMENT.equals(type)) {
1: 		} else if (Constants.ResourceTypeSynthesized.equals(type)) {
1: 		} else {
1: 		    ServiceReference<ContentHandler> handlerRef = CustomResources.getCustomContentHandler(subsystem, type);
1: 		    if (handlerRef != null)
1: 		        return new CustomResourceInstaller(coordination, resource, type, subsystem, handlerRef);
0: 
0: 		throw new SubsystemException("No installer exists for resource type: " + type);
0: 
0:     protected final Coordination coordination;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
author:Tom Watson
-------------------------------------------------------------------------------
commit:0c7fec8
/////////////////////////////////////////////////////////////////////////
1: 		if (isReferencedSubsystem()) {
0: 			coordination.addParticipant(new Participant() {
0: 				@Override
0: 				public void ended(Coordination arg0) throws Exception {
0: 					// Nothing
0: 				}
0: 				@Override
0: 				public void failed(Coordination arg0) throws Exception {
0: 					Activator.getInstance().getSubsystems().removeReference(subsystem, resource);
0: 				}
0: 			});
0: 		}
============================================================================