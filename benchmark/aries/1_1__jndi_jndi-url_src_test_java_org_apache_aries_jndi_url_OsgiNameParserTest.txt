1:e9395b8: /*
1:e9395b8:  * Licensed to the Apache Software Foundation (ASF) under one
1:e9395b8:  * or more contributor license agreements.  See the NOTICE file
1:e9395b8:  * distributed with this work for additional information
1:e9395b8:  * regarding copyright ownership.  The ASF licenses this file
1:e9395b8:  * to you under the Apache License, Version 2.0 (the
1:e9395b8:  * "License"); you may not use this file except in compliance
1:e9395b8:  * with the License.  You may obtain a copy of the License at
1:e9395b8:  *
1:e9395b8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e9395b8:  *
1:e9395b8:  * Unless required by applicable law or agreed to in writing,
1:e9395b8:  * software distributed under the License is distributed on an
1:e9395b8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e9395b8:  * KIND, either express or implied.  See the License for the
1:e9395b8:  * specific language governing permissions and limitations
1:e9395b8:  * under the License.
3:e9395b8:  */
1:e9395b8: package org.apache.aries.jndi.url;
4:e9395b8: 
1:e9395b8: import static org.junit.Assert.assertEquals;
1:e9395b8: import static org.junit.Assert.assertFalse;
1:e9395b8: import static org.junit.Assert.assertTrue;
1:e9395b8: 
1:e9395b8: import javax.naming.InvalidNameException;
1:e9395b8: import javax.naming.NameParser;
1:e9395b8: import javax.naming.NamingException;
1:e9395b8: 
1:e9395b8: import org.junit.Test;
1:e9395b8: 
3:e9395b8: /**
1:e9395b8:  * This is where we test the service registry name parser.
1:e9395b8:  */
1:e9395b8: public class OsgiNameParserTest
3:e9395b8: {
1:e9395b8:   /** The parser we are going to use for testing */
1:e9395b8:   private NameParser parser = new OsgiNameParser();
1:e9395b8: 
1:e9395b8:   /**
1:e9395b8:    * OK, so we check that we can call checkNames multiple times.
3:e9395b8:    * @throws NamingException
1:e9395b8:    */
1:e9395b8:   @Test
1:e9395b8:   public void checkValidNames() throws NamingException
1:e9395b8:   {
1:e9395b8:     checkName("aries","services","java.lang.Runnable","(a=b)");
1:e9395b8:     checkName("aries","services","java.lang.Runnable");
1:e9395b8:     checkName("osgi","service","java.lang.Runnable");
1:e9395b8:     checkName("osgi","service","java.lang.Runnable", "(a=b)");
1:e9395b8:     checkName("osgi","servicelist","java.lang.Runnable");
1:e9395b8:     checkName("osgi","servicelist","java.lang.Runnable", "(a=b)");
1:e9395b8:     checkName("osgi","servicelist","jdbc", "grok", "DataSource");
1:e9395b8:     checkName("osgi", "framework", "bundleContext");
1:ba5ec82:     checkName("osgi","service","javax.sql.DataSource", "(osgi.jndi.servicee.name=jdbc/myDataSource)");
1:ba5ec82:     checkName("osgi","service","javax.sql.DataSource", "(&(a=/b)(c=/d))");
1:a724dca:     checkName("osgi", "service");
4:e9395b8:   }
1:e9395b8:   
1:e9395b8:   /**
1:e9395b8:    * Make sure it fails if we try to parse something that isn't in aries:services
1:e9395b8:    * @throws NamingException
1:e9395b8:    */
3:e9395b8:   @Test(expected=InvalidNameException.class)
1:e9395b8:   public void checkOutsideNamespace() throws NamingException
1:e9395b8:   {
1:e9395b8:     checkName("java","comp","env","jms","cf");
1:e9395b8:   }
1:e9395b8:   
1:e9395b8:   @Test(expected=InvalidNameException.class)
1:e9395b8:   public void checkIncorrectPath() throws NamingException
1:e9395b8:   {
1:e9395b8:     checkName("osgi", "services", "java.lang.Runnable"); 
1:e9395b8:   }
1:e9395b8:   
1:e9395b8:   @Test(expected=InvalidNameException.class)
1:e9395b8:   public void checkIllegalPath() throws NamingException
1:e9395b8:   {
1:e9395b8:     checkName("osgi", "wibble", "java.lang.Runnable"); 
1:e9395b8:   }
1:e9395b8:   
1:e9395b8:   private void checkName(String scheme, String path, String ... elements)
1:e9395b8:     throws NamingException
1:e9395b8:   {
1:e9395b8:     StringBuilder builder = new StringBuilder();
1:e9395b8:     StringBuilder serviceName = new StringBuilder();
1:e9395b8:     
1:e9395b8:     builder.append(scheme);
1:e9395b8:     builder.append(':');
1:e9395b8:     builder.append(path);
1:e9395b8: 
1:e9395b8:     if (elements.length > 0) {
1:e9395b8:       builder.append('/');
1:e9395b8:       
1:e9395b8:       for (String element : elements) {
1:e9395b8:         serviceName.append(element);
1:e9395b8:         serviceName.append('/');
1:e9395b8:       }
1:e9395b8:   
1:e9395b8:       serviceName.deleteCharAt(serviceName.length() - 1);
1:e9395b8:       
1:e9395b8:       builder.append(serviceName);
1:e9395b8:     }
1:e9395b8:     
1:e9395b8:     OsgiName n = (OsgiName) parser.parse(builder.toString());
1:e9395b8:     
1:e9395b8:     assertEquals(scheme, n.getScheme());
1:e9395b8:     assertEquals(path, n.getSchemePath());
1:e9395b8:     
1:e9395b8:     if (elements.length > 1) {
1:e9395b8:       assertEquals(elements[0], n.getInterface());
1:ba5ec82:       if (elements.length == 2) {
1:ba5ec82:         assertTrue("There is no filter in the name", n.hasFilter());
1:ba5ec82:         assertEquals(elements[1], n.getFilter());
1:ba5ec82:       } else assertFalse(n.hasFilter());
1:e9395b8:     }
1:e9395b8:     
1:e9395b8:     if (elements.length == 1) {
1:ba5ec82:       assertFalse("There is a filter in the name", n.hasFilter());
1:e9395b8:     }
1:e9395b8:     
1:e9395b8:     assertEquals(serviceName.toString(), n.getServiceName());
1:e9395b8:   }
1:e9395b8: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:a724dca
/////////////////////////////////////////////////////////////////////////
1:     checkName("osgi", "service");
/////////////////////////////////////////////////////////////////////////
commit:ba5ec82
/////////////////////////////////////////////////////////////////////////
1:     checkName("osgi","service","javax.sql.DataSource", "(osgi.jndi.servicee.name=jdbc/myDataSource)");
1:     checkName("osgi","service","javax.sql.DataSource", "(&(a=/b)(c=/d))");
/////////////////////////////////////////////////////////////////////////
1:       if (elements.length == 2) {
1:         assertTrue("There is no filter in the name", n.hasFilter());
1:         assertEquals(elements[1], n.getFilter());
1:       } else assertFalse(n.hasFilter());
1:       assertFalse("There is a filter in the name", n.hasFilter());
commit:e9395b8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi.url;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import javax.naming.InvalidNameException;
1: import javax.naming.NameParser;
1: import javax.naming.NamingException;
1: 
1: import org.junit.Test;
1: 
1: /**
1:  * This is where we test the service registry name parser.
1:  */
1: public class OsgiNameParserTest
1: {
1:   /** The parser we are going to use for testing */
1:   private NameParser parser = new OsgiNameParser();
1: 
1:   /**
1:    * OK, so we check that we can call checkNames multiple times.
1:    * @throws NamingException
1:    */
1:   @Test
1:   public void checkValidNames() throws NamingException
1:   {
1:     checkName("aries","services","java.lang.Runnable","(a=b)");
1:     checkName("aries","services","java.lang.Runnable");
1:     checkName("osgi","service","java.lang.Runnable");
1:     checkName("osgi","service","java.lang.Runnable", "(a=b)");
1:     checkName("osgi","servicelist","java.lang.Runnable");
1:     checkName("osgi","servicelist","java.lang.Runnable", "(a=b)");
1:     checkName("osgi","servicelist","jdbc", "grok", "DataSource");
1:     checkName("osgi", "framework", "bundleContext");
1:   }
1:   
1:   /**
1:    * Make sure it fails if we try to parse something that isn't in aries:services
1:    * @throws NamingException
1:    */
1:   @Test(expected=InvalidNameException.class)
1:   public void checkOutsideNamespace() throws NamingException
1:   {
1:     checkName("java","comp","env","jms","cf");
1:   }
1:   
1:   /**
0:    * Check that it fails if no interface name is provided.
1:    * @throws NamingException
1:    */
1:   @Test(expected=InvalidNameException.class)
0:   public void checkMissingInterface() throws NamingException
1:   {
0:     checkName("aries","services");
1:   }
1:   
1:   /**
0:    * Check that it fails if no interface name is provided in a subtly different
0:    * way from the previous method.
1:    * @throws NamingException
1:    */
1:   @Test(expected=InvalidNameException.class)
0:   public void checkMissingInterface2() throws NamingException
1:   {
0:     checkName("aries","services", "");
1:   }
1:   
1:   @Test(expected=InvalidNameException.class)
1:   public void checkIncorrectPath() throws NamingException
1:   {
1:     checkName("osgi", "services", "java.lang.Runnable"); 
1:   }
1:   
1:   @Test(expected=InvalidNameException.class)
1:   public void checkIllegalPath() throws NamingException
1:   {
1:     checkName("osgi", "wibble", "java.lang.Runnable"); 
1:   }
1:   
1:   private void checkName(String scheme, String path, String ... elements)
1:     throws NamingException
1:   {
1:     StringBuilder builder = new StringBuilder();
1:     StringBuilder serviceName = new StringBuilder();
1:     
1:     builder.append(scheme);
1:     builder.append(':');
1:     builder.append(path);
1: 
1:     if (elements.length > 0) {
1:       builder.append('/');
1:       
1:       for (String element : elements) {
1:         serviceName.append(element);
1:         serviceName.append('/');
1:       }
1:   
1:       serviceName.deleteCharAt(serviceName.length() - 1);
1:       
1:       builder.append(serviceName);
1:     }
1:     
1:     OsgiName n = (OsgiName) parser.parse(builder.toString());
1:     
1:     assertEquals(scheme, n.getScheme());
1:     assertEquals(path, n.getSchemePath());
1:     
1:     if (elements.length > 1) {
1:       assertEquals(elements[0], n.getInterface());
1:     }
1:     
1:     if (elements.length == 1) {
0:       assertFalse(n.hasFilter());
1:     }
1:     
0:     if (elements.length > 2) {
0:       if (elements.length == 2) {
0:         assertTrue(n.hasFilter());
0:         assertEquals(elements[1], n.getFilter());
0:       } else assertFalse(n.hasFilter());
1:     }
1:     
1:     assertEquals(serviceName.toString(), n.getServiceName());
1:   }
1: }
============================================================================