1:792f3de: /*
1:792f3de:  * Licensed to the Apache Software Foundation (ASF) under one
1:792f3de:  * or more contributor license agreements.  See the NOTICE file
1:792f3de:  * distributed with this work for additional information
1:792f3de:  * regarding copyright ownership.  The ASF licenses this file
1:792f3de:  * to you under the Apache License, Version 2.0 (the
1:792f3de:  * "License"); you may not use this file except in compliance
1:792f3de:  * with the License.  You may obtain a copy of the License at
1:792f3de:  *
1:792f3de:  *   http://www.apache.org/licenses/LICENSE-2.0
1:792f3de:  *
1:792f3de:  * Unless required by applicable law or agreed to in writing,
1:792f3de:  * software distributed under the License is distributed on an
1:792f3de:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:792f3de:  * KIND, either express or implied.  See the License for the
1:792f3de:  * specific language governing permissions and limitations
1:792f3de:  * under the License.
1:792f3de:  */
1:792f3de: package org.apache.aries.application.resolver.obr.impl;
1:f266e29: 
1:792f3de: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:792f3de: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:a1f07b5: 
1:f266e29: import java.io.File;
1:f266e29: import java.io.FileOutputStream;
1:792f3de: import java.io.IOException;
1:f266e29: import java.io.InputStream;
1:792f3de: import java.io.OutputStream;
1:f266e29: import java.net.URI;
1:f266e29: import java.net.URISyntaxException;
1:f266e29: import java.net.URLConnection;
1:a1f07b5: import java.util.ArrayList;
1:792f3de: import java.util.Collection;
1:f266e29: import java.util.HashSet;
1:a1f07b5: import java.util.List;
1:f266e29: import java.util.Set;
14:792f3de: 
1:792f3de: import javax.xml.parsers.DocumentBuilderFactory;
1:792f3de: import javax.xml.parsers.ParserConfigurationException;
1:792f3de: import javax.xml.transform.OutputKeys;
1:792f3de: import javax.xml.transform.Transformer;
1:792f3de: import javax.xml.transform.TransformerException;
1:792f3de: import javax.xml.transform.TransformerFactory;
1:792f3de: import javax.xml.transform.dom.DOMSource;
1:792f3de: import javax.xml.transform.stream.StreamResult;
1:792f3de: 
1:792f3de: import org.apache.aries.application.management.ResolverException;
1:89f804e: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
1:f266e29: import org.apache.aries.application.management.spi.runtime.LocalPlatform;
1:792f3de: import org.apache.aries.application.modelling.ModelledResource;
1:f266e29: import org.apache.aries.application.modelling.ModelledResourceManager;
1:a1f07b5: import org.apache.aries.application.resolver.obr.ext.BundleResource;
1:a1f07b5: import org.apache.aries.application.resolver.obr.ext.BundleResourceTransformer;
1:910fec0: import org.apache.aries.util.filesystem.FileSystem;
1:910fec0: import org.apache.aries.util.filesystem.FileUtils;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:c6cb34d: import org.apache.aries.util.io.IOUtils;
1:792f3de: import org.apache.felix.bundlerepository.Capability;
1:792f3de: import org.apache.felix.bundlerepository.Property;
1:792f3de: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:792f3de: import org.apache.felix.bundlerepository.Requirement;
1:792f3de: import org.apache.felix.bundlerepository.Resource;
1:792f3de: import org.osgi.framework.Constants;
1:792f3de: import org.slf4j.Logger;
1:792f3de: import org.slf4j.LoggerFactory;
1:792f3de: import org.w3c.dom.Document;
1:792f3de: import org.w3c.dom.Element;
1:792f3de: public final class RepositoryGeneratorImpl implements RepositoryGenerator
1:792f3de: {
1:792f3de:   private RepositoryAdmin repositoryAdmin;
1:f266e29:   private ModelledResourceManager modelledResourceManager;
1:f266e29:   private LocalPlatform tempDir;
1:792f3de:   private static Logger logger = LoggerFactory.getLogger(RepositoryGeneratorImpl.class);
1:a1f07b5:   private static Collection<BundleResourceTransformer> bundleResourceTransformers = new ArrayList<BundleResourceTransformer>();
1:faf11ee:   private static final String MANDATORY_DIRECTIVE = Constants.MANDATORY_DIRECTIVE + ":";
1:faf11ee: 
1:f266e29: 
1:f266e29:   public void setModelledResourceManager( ModelledResourceManager modelledResourceManager) {
1:f266e29:     this.modelledResourceManager = modelledResourceManager;
1:f266e29:   }
1:f266e29: 
1:f266e29:   public void setTempDir(LocalPlatform tempDir) {
1:f266e29:     this.tempDir = tempDir;
1:f266e29:   }
1:f266e29: 
1:a1f07b5:   public void setBundleResourceTransformers (List<BundleResourceTransformer> brts) { 
1:a1f07b5:     bundleResourceTransformers = brts;
1:a1f07b5:   }
1:f266e29: 
1:792f3de:   public RepositoryGeneratorImpl(RepositoryAdmin repositoryAdmin) {
1:792f3de:     this.repositoryAdmin = repositoryAdmin;
1:d04041b:   }
1:792f3de:   private static void addProperty(Document doc, Element capability, String name,
1:792f3de:       String value, String type)
1:792f3de:   {
1:792f3de:     logger.debug(LOG_ENTRY, "addProperty", new Object[]{doc, capability, name, value, type});
1:792f3de:     Element p = doc.createElement("p");
1:792f3de:     p.setAttribute("n", name);
1:792f3de:     p.setAttribute("v", value);
1:792f3de:     if (type != null) p.setAttribute("t", type);
1:792f3de:     capability.appendChild(p);
1:792f3de:     logger.debug(LOG_ENTRY, "addProperty", new Object[]{});
1:d04041b:   }
1:f266e29: 
1:f266e29: 
1:a1f07b5: 
1:792f3de:   /**
1:792f3de:    * Write out the resource element
1:792f3de:    * 
1:792f3de:    * @param r
1:792f3de:    *          resource
1:792f3de:    * @param writer
1:792f3de:    *          buffer writer
1:792f3de:    * @throws IOException
1:792f3de:    */
1:d04041b:   private  static void writeResource(Resource r, String uri, Document doc, Element root) throws IOException
1:792f3de:   {
1:792f3de:     logger.debug(LOG_ENTRY, "writeResource", new Object[]{r, uri, doc, root});
1:792f3de:     Element resource = doc.createElement("resource");
1:792f3de:     resource.setAttribute(Resource.VERSION, r.getVersion().toString());
1:792f3de:     resource.setAttribute("uri", r.getURI());
1:792f3de:     resource.setAttribute(Resource.SYMBOLIC_NAME, r.getSymbolicName());
1:792f3de:     resource.setAttribute(Resource.ID, r.getSymbolicName() + "/" + r.getVersion());
1:792f3de:     resource.setAttribute(Resource.PRESENTATION_NAME, r.getPresentationName());
1:792f3de:     root.appendChild(resource);
1:a1f07b5: 
1:792f3de: 
1:792f3de:     for (Capability c : r.getCapabilities())
1:792f3de:       writeCapability(c, doc, resource);
1:792f3de: 
1:792f3de:     for (Requirement req : r.getRequirements()) {
1:792f3de:       writeRequirement(req, doc, resource);
1:792f3de: 
12:792f3de:     }
1:792f3de:     logger.debug(LOG_EXIT, "writeResource");
1:792f3de: 
1:792f3de:   }
1:792f3de: 
1:792f3de:   /**
1:792f3de:    * Write out the capability
1:792f3de:    * 
1:792f3de:    * @param c capability
1:792f3de:    * @param writer buffer writer
1:792f3de:    * @throws IOException
1:792f3de:    */
1:d04041b:   private  static void writeCapability(Capability c, Document doc, Element resource) throws IOException
1:792f3de:   {
1:792f3de:     logger.debug(LOG_ENTRY, "writeCapability", new Object[]{c, doc, resource});
1:792f3de:     Element capability = doc.createElement("capability");
1:792f3de:     capability.setAttribute("name", c.getName());
1:792f3de:     resource.appendChild(capability);
1:792f3de: 
1:792f3de:     Property[] props = c.getProperties();
1:792f3de: 
1:792f3de:     for (Property entry : props) {
1:792f3de: 
1:792f3de:       String name = (String) entry.getName();
1:792f3de:       String objectAttrs = entry.getValue();
1:faf11ee: 
1:4db0d92:       String type = (entry.getType() == null) ? getType(name) : entry.getType();
1:f266e29: 
1:792f3de:       // remove the beginning " and tailing "
1:792f3de:       if (objectAttrs.startsWith("\"") && objectAttrs.endsWith("\""))
1:792f3de:         objectAttrs = objectAttrs.substring(1, objectAttrs.length() - 1);
1:792f3de:       addProperty(doc, capability, name, objectAttrs, type);
1:792f3de:     }
1:792f3de: 
1:792f3de:     logger.debug(LOG_EXIT, "writeCapability");
1:792f3de:   }
1:792f3de: 
1:792f3de:   /**
1:792f3de:    * write the requirement
1:792f3de:    * 
1:792f3de:    * @param req
1:792f3de:    *          requirement
1:792f3de:    * @param writer
1:792f3de:    *          buffer writer
1:792f3de:    * @throws IOException
1:792f3de:    */
1:d04041b:   private static void  writeRequirement(Requirement req, Document doc, Element resource) throws IOException
1:792f3de:   {
1:792f3de:     logger.debug(LOG_ENTRY, "writeRequirement", new Object[]{req, doc, resource});
1:792f3de:     Element requirement = doc.createElement("require");
1:792f3de:     requirement.setAttribute("name", req.getName());
1:792f3de:     requirement.setAttribute("extend", String.valueOf(req.isExtend()));
1:792f3de:     requirement.setAttribute("multiple", String.valueOf(req.isMultiple()));
1:792f3de:     requirement.setAttribute("optional", String.valueOf(req.isOptional()));
1:792f3de:     requirement.setAttribute("filter", req.getFilter());
1:792f3de:     requirement.setTextContent(req.getComment());
1:792f3de:     resource.appendChild(requirement);
1:792f3de:     logger.debug(LOG_EXIT, "writeRequirement");
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public void generateRepository(String repositoryName,
1:792f3de:       Collection<? extends ModelledResource> byValueBundles, OutputStream os)
1:792f3de:   throws ResolverException, IOException
1:792f3de:   {
1:792f3de:     logger.debug(LOG_ENTRY, "generateRepository", new Object[]{repositoryName, byValueBundles, os});
1:d04041b:     generateRepository(repositoryAdmin, repositoryName, byValueBundles, os);
1:d04041b:     logger.debug(LOG_EXIT, "generateRepository");
1:d04041b:   }
1:d04041b: 
1:d04041b:   public static void generateRepository (RepositoryAdmin repositoryAdmin, String repositoryName,
1:d04041b:       Collection<? extends ModelledResource> byValueBundles, OutputStream os)
1:d04041b:   throws ResolverException, IOException {
1:f266e29:     logger.debug(LOG_ENTRY, "generateRepository", new Object[]{repositoryAdmin, repositoryName, byValueBundles, os});
1:f266e29:     Document doc;
1:f266e29:     try {
1:f266e29:       doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
1:d04041b: 
1:f266e29:     } catch (ParserConfigurationException pce) {
1:f266e29:       throw new ResolverException(pce);
1:f266e29:     }
1:f266e29:     Element root = doc.createElement("repository");
1:d04041b: 
1:f266e29:     root.setAttribute("name", repositoryName);
1:f266e29:     doc.appendChild(root);
1:f266e29:     for (ModelledResource mr : byValueBundles) {
1:f266e29:       BundleResource bundleResource = new BundleResource(mr, repositoryAdmin);
1:f266e29:       if (bundleResourceTransformers.size() > 0) { 
1:f266e29:         for (BundleResourceTransformer brt : bundleResourceTransformers) { 
1:f266e29:           bundleResource = brt.transform (bundleResource);
1:f266e29:         }
1:f266e29:       }
1:f266e29:       writeResource (bundleResource, mr.getLocation(), doc, root);
1:f266e29:     }
1:d04041b: 
1:f266e29:     try {
1:f266e29:       Transformer trans = TransformerFactory.newInstance().newTransformer();
1:f266e29:       trans.setOutputProperty(OutputKeys.INDENT, "yes");
1:f266e29:       trans.transform(new DOMSource(doc), new StreamResult(os));
1:f266e29:     } catch (TransformerException te) {
1:f266e29:       logger.debug(LOG_EXIT, "generateRepository", te);
1:f266e29:       throw new ResolverException(te);
1:f266e29:     }
1:f266e29:     logger.debug(LOG_EXIT, "generateRepository");
1:a1f07b5:   }
1:d04041b:   private static String getType(String name) {
1:792f3de:     logger.debug(LOG_ENTRY, "getType", new Object[]{name});
1:792f3de:     String type = null;
1:792f3de:     if (Constants.VERSION_ATTRIBUTE.equals(name) || (Constants.BUNDLE_VERSION_ATTRIBUTE.equals(name))) {
1:792f3de:       type =  "version";
1:faf11ee:     } else if (Constants.OBJECTCLASS.equals(name) || MANDATORY_DIRECTIVE.equals(name))
1:792f3de:       type = "set";
1:792f3de:     logger.debug(LOG_EXIT, "getType", new Object[]{type});
1:792f3de:     return type;
1:a1f07b5:   }
1:792f3de: 
1:f266e29:   public void generateRepository(String[] source, OutputStream fout) throws IOException{
1:f266e29: 
1:f266e29:     logger.debug(LOG_ENTRY, "generateRepository", new Object[]{source, fout});
1:f266e29:     List<URI> jarFiles = new ArrayList<URI>();
1:f266e29:     InputStream in = null;
1:f266e29:     OutputStream out = null;
1:f266e29:     File wstemp = null;
1:f266e29:     Set<ModelledResource> mrs = new HashSet<ModelledResource>();
1:f266e29:     if (source != null) {
1:f266e29:       try {
1:f266e29:         for (String urlString : source) {
1:f266e29:           
1:f266e29:           // for each entry, we need to find out whether it is in local file system. If yes, we would like to
1:f266e29:           // scan the bundles recursively under that directory
1:f266e29:           URI entry;
1:f266e29:           try {
1:f266e29:             File f = new File(urlString);
1:f266e29:             if (f.exists()) {
1:f266e29:               entry = f.toURI();
1:f266e29:             } else {
1:f266e29:               entry = new URI(urlString);
1:f266e29:             }
1:f266e29:             if ("file".equals(entry.toURL().getProtocol())) {
1:f266e29:               jarFiles.addAll(FileUtils.getBundlesRecursive(entry));
1:f266e29:             } else {
1:f266e29:               jarFiles.add(entry);
1:f266e29:             }
1:f266e29:           } catch (URISyntaxException use) {
1:f266e29:             throw new IOException(urlString + " is not a valide uri.");
1:f266e29:           }
1:f266e29: 
1:f266e29:         }
1:f266e29:         for (URI jarFileURI : jarFiles) {
1:f266e29:           String uriString = jarFileURI.toString();
1:f266e29:           File f = null;
1:f266e29:           if ("file".equals(jarFileURI.toURL().getProtocol())) {
1:f266e29:             f = new File(jarFileURI);
1:f266e29:           } else {
1:f266e29:             int lastIndexOfSlash = uriString.lastIndexOf("/");
1:f266e29:             String fileName = uriString.substring(lastIndexOfSlash + 1);
1:f266e29:             //we need to download this jar/war to wstemp and work on it
1:f266e29:             URLConnection jarConn = jarFileURI.toURL().openConnection();
1:f266e29:             in = jarConn.getInputStream();
1:f266e29:             if (wstemp == null) {
1:f266e29:               wstemp = new File(tempDir.getTemporaryDirectory(), "generateRepositoryXML_" + System.currentTimeMillis());
1:f266e29:               boolean created = wstemp.mkdirs();
1:f266e29:               if (created) {
1:f266e29:                 logger.debug("The temp directory was created successfully.");
1:f266e29:               } else {
1:f266e29:                 logger.debug("The temp directory was NOT created.");
1:f266e29:               }
1:f266e29:             }
1:f266e29:             //Let's open the stream to download the bundles from remote
1:f266e29:             f = new File(wstemp, fileName);
1:f266e29:             out = new FileOutputStream(f);
1:f266e29:             IOUtils.copy(in, out);
1:f266e29:           } 
1:f266e29: 
1:f266e29:           IDirectory jarDir = FileSystem.getFSRoot(f);
1:f266e29:           mrs.add(modelledResourceManager.getModelledResource(uriString, jarDir));
1:f266e29: 
1:f266e29:         }
1:f266e29:         generateRepository("Resource Repository", mrs, fout);
1:f266e29: 
1:f266e29:       } catch (Exception e) {
1:f266e29:         logger.debug(LOG_EXIT, "generateRepository");
1:f266e29:         throw new IOException(e);
1:f266e29:       } finally {
1:f266e29:         IOUtils.close(in);
1:f266e29:         IOUtils.close(out);
1:f266e29:         if (wstemp != null) {
1:f266e29:           IOUtils.deleteRecursive(wstemp);
1:f266e29:         }
1:f266e29:       }
1:f266e29:     } else {
1:f266e29: 
1:f266e29:       logger.debug("The URL list is empty");
1:f266e29:     }
1:f266e29: 
1:f266e29:     logger.debug(LOG_EXIT, "generateRepository");
1:f266e29:   }
1:f266e29: 
1:f266e29: 
1:d04041b: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4db0d92
/////////////////////////////////////////////////////////////////////////
1:       String type = (entry.getType() == null) ? getType(name) : entry.getType();
commit:faf11ee
/////////////////////////////////////////////////////////////////////////
1:   private static final String MANDATORY_DIRECTIVE = Constants.MANDATORY_DIRECTIVE + ":";
1:   
/////////////////////////////////////////////////////////////////////////
1:       
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     } else if (Constants.OBJECTCLASS.equals(name) || MANDATORY_DIRECTIVE.equals(name))
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.io.IOUtils;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.FileUtils;
1: import org.apache.aries.util.filesystem.IDirectory;
0: import org.apache.aries.util.filesystem.IOUtils;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
author:Emily Jiang
-------------------------------------------------------------------------------
commit:f266e29
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.InputStream;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.URLConnection;
1: import java.util.HashSet;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.filesystem.IDirectory;
1: import org.apache.aries.application.management.spi.runtime.LocalPlatform;
1: import org.apache.aries.application.modelling.ModelledResourceManager;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
0: import org.apache.aries.application.utils.filesystem.FileUtils;
0: import org.apache.aries.application.utils.filesystem.IOUtils;
/////////////////////////////////////////////////////////////////////////
1:   private ModelledResourceManager modelledResourceManager;
1:   private LocalPlatform tempDir;
1: 
1: 
1:   public void setModelledResourceManager( ModelledResourceManager modelledResourceManager) {
1:     this.modelledResourceManager = modelledResourceManager;
1:   }
1: 
1:   public void setTempDir(LocalPlatform tempDir) {
1:     this.tempDir = tempDir;
1:   }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     logger.debug(LOG_ENTRY, "generateRepository", new Object[]{repositoryAdmin, repositoryName, byValueBundles, os});
1:     Document doc;
1:     try {
1:       doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
1:     } catch (ParserConfigurationException pce) {
1:       throw new ResolverException(pce);
1:     }
1:     Element root = doc.createElement("repository");
1:     root.setAttribute("name", repositoryName);
1:     doc.appendChild(root);
1:     for (ModelledResource mr : byValueBundles) {
1:       BundleResource bundleResource = new BundleResource(mr, repositoryAdmin);
1:       if (bundleResourceTransformers.size() > 0) { 
1:         for (BundleResourceTransformer brt : bundleResourceTransformers) { 
1:           bundleResource = brt.transform (bundleResource);
1:         }
1:       }
1:       writeResource (bundleResource, mr.getLocation(), doc, root);
1:     }
1:     try {
1:       Transformer trans = TransformerFactory.newInstance().newTransformer();
1:       trans.setOutputProperty(OutputKeys.INDENT, "yes");
1:       trans.transform(new DOMSource(doc), new StreamResult(os));
1:     } catch (TransformerException te) {
1:       logger.debug(LOG_EXIT, "generateRepository", te);
1:       throw new ResolverException(te);
1:     }
1:     logger.debug(LOG_EXIT, "generateRepository");
/////////////////////////////////////////////////////////////////////////
1:   public void generateRepository(String[] source, OutputStream fout) throws IOException{
1: 
1:     logger.debug(LOG_ENTRY, "generateRepository", new Object[]{source, fout});
1:     List<URI> jarFiles = new ArrayList<URI>();
1:     InputStream in = null;
1:     OutputStream out = null;
1:     File wstemp = null;
1:     Set<ModelledResource> mrs = new HashSet<ModelledResource>();
1:     if (source != null) {
1:       try {
1:         for (String urlString : source) {
1:           
1:           // for each entry, we need to find out whether it is in local file system. If yes, we would like to
1:           // scan the bundles recursively under that directory
1:           URI entry;
1:           try {
1:             File f = new File(urlString);
1:             if (f.exists()) {
1:               entry = f.toURI();
1:             } else {
1:               entry = new URI(urlString);
1:             }
1:             if ("file".equals(entry.toURL().getProtocol())) {
1:               jarFiles.addAll(FileUtils.getBundlesRecursive(entry));
1:             } else {
1:               jarFiles.add(entry);
1:             }
1:           } catch (URISyntaxException use) {
1:             throw new IOException(urlString + " is not a valide uri.");
1:           }
1: 
1:         }
1:         for (URI jarFileURI : jarFiles) {
1:           String uriString = jarFileURI.toString();
1:           File f = null;
1:           if ("file".equals(jarFileURI.toURL().getProtocol())) {
1:             f = new File(jarFileURI);
1:           } else {
1:             int lastIndexOfSlash = uriString.lastIndexOf("/");
1:             String fileName = uriString.substring(lastIndexOfSlash + 1);
1:             //we need to download this jar/war to wstemp and work on it
1:             URLConnection jarConn = jarFileURI.toURL().openConnection();
1:             in = jarConn.getInputStream();
1:             if (wstemp == null) {
1:               wstemp = new File(tempDir.getTemporaryDirectory(), "generateRepositoryXML_" + System.currentTimeMillis());
1:               boolean created = wstemp.mkdirs();
1:               if (created) {
1:                 logger.debug("The temp directory was created successfully.");
1:               } else {
1:                 logger.debug("The temp directory was NOT created.");
1:               }
1:             }
1:             //Let's open the stream to download the bundles from remote
1:             f = new File(wstemp, fileName);
1:             out = new FileOutputStream(f);
1:             IOUtils.copy(in, out);
1:           } 
1: 
1:           IDirectory jarDir = FileSystem.getFSRoot(f);
1:           mrs.add(modelledResourceManager.getModelledResource(uriString, jarDir));
1: 
1:         }
1:         generateRepository("Resource Repository", mrs, fout);
1: 
1:       } catch (Exception e) {
1:         logger.debug(LOG_EXIT, "generateRepository");
1:         throw new IOException(e);
1:       } finally {
1:         IOUtils.close(in);
1:         IOUtils.close(out);
1:         if (wstemp != null) {
1:           IOUtils.deleteRecursive(wstemp);
1:         }
1:       }
1:     } else {
1: 
1:       logger.debug("The URL list is empty");
1:     }
1: 
1:     logger.debug(LOG_EXIT, "generateRepository");
1:   }
1: 
1: 
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:a1f07b5
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.resolver.obr.ext.BundleResource;
1: import org.apache.aries.application.resolver.obr.ext.BundleResourceTransformer;
/////////////////////////////////////////////////////////////////////////
1:   private static Collection<BundleResourceTransformer> bundleResourceTransformers = new ArrayList<BundleResourceTransformer>();
1:   
1:   public void setBundleResourceTransformers (List<BundleResourceTransformer> brts) { 
1:     bundleResourceTransformers = brts;
1:   }
/////////////////////////////////////////////////////////////////////////
1:   
1:   
/////////////////////////////////////////////////////////////////////////
0: 	      BundleResource bundleResource = new BundleResource(mr, repositoryAdmin);
0: 	      if (bundleResourceTransformers.size() > 0) { 
0: 	        for (BundleResourceTransformer brt : bundleResourceTransformers) { 
0: 	          bundleResource = brt.transform (bundleResource);
1: 	        }
1: 	      }
0: 	      writeResource (bundleResource, mr.getLocation(), doc, root);
commit:d04041b
/////////////////////////////////////////////////////////////////////////
1:   private  static void writeResource(Resource r, String uri, Document doc, Element root) throws IOException
/////////////////////////////////////////////////////////////////////////
1:   private  static void writeCapability(Capability c, Document doc, Element resource) throws IOException
/////////////////////////////////////////////////////////////////////////
1:   private static void  writeRequirement(Requirement req, Document doc, Element resource) throws IOException
/////////////////////////////////////////////////////////////////////////
1:     generateRepository(repositoryAdmin, repositoryName, byValueBundles, os);
1:   public static void generateRepository (RepositoryAdmin repositoryAdmin, String repositoryName,
1:       Collection<? extends ModelledResource> byValueBundles, OutputStream os)
1:   throws ResolverException, IOException {
0: 	  logger.debug(LOG_ENTRY, "generateRepository", new Object[]{repositoryAdmin, repositoryName, byValueBundles, os});
0: 	    Document doc;
0: 	    try {
0: 	      doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
1: 
0: 	    } catch (ParserConfigurationException pce) {
0: 	      throw new ResolverException(pce);
1: 	    }
0: 	    Element root = doc.createElement("repository");
1: 
0: 	    root.setAttribute("name", repositoryName);
0: 	    doc.appendChild(root);
0: 	    for (ModelledResource mr : byValueBundles) {
0: 	      writeResource(new BundleResource(mr, repositoryAdmin), mr.getLocation(), doc, root);
1: 
1: 	    }
1: 
0: 	    try {
0: 	      Transformer trans = TransformerFactory.newInstance().newTransformer();
0: 	      trans.setOutputProperty(OutputKeys.INDENT, "yes");
0: 	      trans.transform(new DOMSource(doc), new StreamResult(os));
0: 	    } catch (TransformerException te) {
0: 	      logger.debug(LOG_EXIT, "generateRepository", te);
0: 	      throw new ResolverException(te);
1: 	    }
1: 	    logger.debug(LOG_EXIT, "generateRepository");
1:   }
1:   private static String getType(String name) {
commit:792f3de
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.resolver.obr.impl;
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.util.Collection;
1: 
1: import javax.xml.parsers.DocumentBuilderFactory;
1: import javax.xml.parsers.ParserConfigurationException;
1: import javax.xml.transform.OutputKeys;
1: import javax.xml.transform.Transformer;
1: import javax.xml.transform.TransformerException;
1: import javax.xml.transform.TransformerFactory;
1: import javax.xml.transform.dom.DOMSource;
1: import javax.xml.transform.stream.StreamResult;
1: 
0: import org.apache.aries.application.management.RepositoryGenerator;
1: import org.apache.aries.application.management.ResolverException;
1: import org.apache.aries.application.modelling.ModelledResource;
1: import org.apache.felix.bundlerepository.Capability;
1: import org.apache.felix.bundlerepository.Property;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
1: import org.apache.felix.bundlerepository.Requirement;
1: import org.apache.felix.bundlerepository.Resource;
1: import org.osgi.framework.Constants;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.w3c.dom.Document;
1: import org.w3c.dom.Element;
1: public final class RepositoryGeneratorImpl implements RepositoryGenerator
1: {
1:   private RepositoryAdmin repositoryAdmin;
1:   private static Logger logger = LoggerFactory.getLogger(RepositoryGeneratorImpl.class);
1:   
1:   public RepositoryGeneratorImpl(RepositoryAdmin repositoryAdmin) {
1:     this.repositoryAdmin = repositoryAdmin;
1:   }
1:   private static void addProperty(Document doc, Element capability, String name,
1:       String value, String type)
1:   {
1:     logger.debug(LOG_ENTRY, "addProperty", new Object[]{doc, capability, name, value, type});
1:     Element p = doc.createElement("p");
1:     p.setAttribute("n", name);
1:     p.setAttribute("v", value);
1:     if (type != null) p.setAttribute("t", type);
1:     capability.appendChild(p);
1:     logger.debug(LOG_ENTRY, "addProperty", new Object[]{});
1:   }
1: 
1:   /**
1:    * Write out the resource element
1:    * 
1:    * @param r
1:    *          resource
1:    * @param writer
1:    *          buffer writer
1:    * @throws IOException
1:    */
0:   private  void writeResource(Resource r, String uri, Document doc, Element root) throws IOException
1:   {
1:     logger.debug(LOG_ENTRY, "writeResource", new Object[]{r, uri, doc, root});
1:     Element resource = doc.createElement("resource");
1:     resource.setAttribute(Resource.VERSION, r.getVersion().toString());
1:     resource.setAttribute("uri", r.getURI());
1:     resource.setAttribute(Resource.SYMBOLIC_NAME, r.getSymbolicName());
1:     resource.setAttribute(Resource.ID, r.getSymbolicName() + "/" + r.getVersion());
1:     resource.setAttribute(Resource.PRESENTATION_NAME, r.getPresentationName());
1:     root.appendChild(resource);
1: 
1: 
1:     for (Capability c : r.getCapabilities())
1:       writeCapability(c, doc, resource);
1: 
1:     for (Requirement req : r.getRequirements()) {
1:       writeRequirement(req, doc, resource);
1: 
1:     }
1:     logger.debug(LOG_EXIT, "writeResource");
1: 
1:   }
1: 
1:   /**
1:    * Write out the capability
1:    * 
1:    * @param c capability
1:    * @param writer buffer writer
1:    * @throws IOException
1:    */
0:   private  void writeCapability(Capability c, Document doc, Element resource) throws IOException
1:   {
1:     logger.debug(LOG_ENTRY, "writeCapability", new Object[]{c, doc, resource});
1:     Element capability = doc.createElement("capability");
1:     capability.setAttribute("name", c.getName());
1:     resource.appendChild(capability);
1: 
1:     Property[] props = c.getProperties();
1: 
0:     String mandatoryDirective = Constants.MANDATORY_DIRECTIVE + ":";
0:     boolean mandatoryPresent = false;
1:     for (Property entry : props) {
1: 
1: 
1:       String name = (String) entry.getName();
1:       String objectAttrs = entry.getValue();
0:       if (name.endsWith(":")) {
0:         if (mandatoryDirective.equals(name)) {
0:           mandatoryPresent = true;
0:           // remove the : and write it out
0:           name = name.substring(0, name.length() - 1);
0:         } else {
0:           // ignore other directives
0:           continue;
1:         }
1:       }
0:       String type = getType(name);
1: 
1:       // remove the beginning " and tailing "
1:       if (objectAttrs.startsWith("\"") && objectAttrs.endsWith("\""))
1:         objectAttrs = objectAttrs.substring(1, objectAttrs.length() - 1);
1:       addProperty(doc, capability, name, objectAttrs, type);
1:     }
1: 
0:     // OBR's strange behaviour requires that we write out the mandatory entry
0:     // with an empty string if the mandatory is not specified
0:     if (!!!mandatoryPresent) {
0:       addProperty(doc, capability, Constants.MANDATORY_DIRECTIVE, "" , null);
1:     }
1: 
1:     logger.debug(LOG_EXIT, "writeCapability");
1:   }
1: 
1:   /**
1:    * write the requirement
1:    * 
1:    * @param req
1:    *          requirement
1:    * @param writer
1:    *          buffer writer
1:    * @throws IOException
1:    */
0:   private void writeRequirement(Requirement req, Document doc, Element resource) throws IOException
1:   {
1:     logger.debug(LOG_ENTRY, "writeRequirement", new Object[]{req, doc, resource});
1:     Element requirement = doc.createElement("require");
1:     requirement.setAttribute("name", req.getName());
1:     requirement.setAttribute("extend", String.valueOf(req.isExtend()));
1:     requirement.setAttribute("multiple", String.valueOf(req.isMultiple()));
1:     requirement.setAttribute("optional", String.valueOf(req.isOptional()));
1:     requirement.setAttribute("filter", req.getFilter());
1:     requirement.setTextContent(req.getComment());
1:     resource.appendChild(requirement);
1:     logger.debug(LOG_EXIT, "writeRequirement");
1:   }
1: 
1: 
1:   public void generateRepository(String repositoryName,
1:       Collection<? extends ModelledResource> byValueBundles, OutputStream os)
1:   throws ResolverException, IOException
1:   {
1:     logger.debug(LOG_ENTRY, "generateRepository", new Object[]{repositoryName, byValueBundles, os});
0:     Document doc;
0:     try {
0:       doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
1: 
0:     } catch (ParserConfigurationException pce) {
0:       throw new ResolverException(pce);
1:     }
0:     Element root = doc.createElement("repository");
1: 
0:     root.setAttribute("name", repositoryName);
0:     doc.appendChild(root);
0:     for (ModelledResource mr : byValueBundles) {
0:       writeResource(new BundleResource(mr, repositoryAdmin), mr.getLocation(), doc, root);
1: 
1:     }
1: 
0:     try {
0:       Transformer trans = TransformerFactory.newInstance().newTransformer();
0:       trans.setOutputProperty(OutputKeys.INDENT, "yes");
0:       trans.transform(new DOMSource(doc), new StreamResult(os));
0:     } catch (TransformerException te) {
0:       logger.debug(LOG_EXIT, "generateRepository", te);
0:       throw new ResolverException(te);
1:     }
0:     logger.debug(LOG_EXIT, "generateRepository");
1:   }
1: 
0:   private String getType(String name) {
1:     logger.debug(LOG_ENTRY, "getType", new Object[]{name});
1:     String type = null;
1:     if (Constants.VERSION_ATTRIBUTE.equals(name) || (Constants.BUNDLE_VERSION_ATTRIBUTE.equals(name))) {
1:       type =  "version";
0:     } else if (Constants.OBJECTCLASS.equals(name))
1:       type = "set";
1:     logger.debug(LOG_EXIT, "getType", new Object[]{type});
1:     return type;
1:   }
1: 
1: }
============================================================================