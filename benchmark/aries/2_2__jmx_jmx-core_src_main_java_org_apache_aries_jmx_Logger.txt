1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx;
2:fdf3952: 
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.service.log.LogService;
1:fdf3952: import org.osgi.util.tracker.ServiceTracker;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>This <tt>Logger</tt> class represents ServiceTracker for LogService. 
1:fdf3952:  * It provides methods for logging messages. If LogService is not available it logs to stdout.</p>
1:fdf3952:  * 
1:fdf3952:  * @see org.osgi.service.log.LogService
1:fdf3952:  * @see org.osgi.util.tracker.ServiceTracker
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:0a8778f: @SuppressWarnings("rawtypes")
1:fdf3952: public class Logger extends ServiceTracker implements LogService {
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Constructs new Logger(ServiceTracker for LogService).
1:fdf3952:      * 
1:fdf3952:      * @param context bundle context.
1:fdf3952:      */
1:0a8778f:     @SuppressWarnings("unchecked")
1:0a8778f: 	public Logger(BundleContext context) {
1:fdf3952:         super(context, LogService.class.getName(), null);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.service.log.LogService#log(int, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void log(int level, String message) {
1:fdf3952:         LogService logService = (LogService) getService();
1:fdf3952:         if (logService != null) {
1:fdf3952:             logService.log(level, message);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.service.log.LogService#log(int, java.lang.String, java.lang.Throwable)
1:fdf3952:      */
1:fdf3952:     public void log(int level, String message, Throwable exception) {
1:fdf3952:         LogService logService = (LogService) getService();
1:fdf3952:         if (logService != null) {
1:fdf3952:             logService.log(level, message, exception);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.service.log.LogService#log(org.osgi.framework.ServiceReference, int, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void log(ServiceReference ref, int level, String message) {
1:fdf3952:         LogService logService = (LogService) getService();
1:fdf3952:         if (logService != null) {
1:fdf3952:             logService.log(ref, level, message);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.service.log.LogService#log(org.osgi.framework.ServiceReference, int, java.lang.String,
1:fdf3952:      *      java.lang.Throwable)
1:fdf3952:      */
1:fdf3952:     public void log(ServiceReference ref, int level, String message, Throwable exception) {
1:fdf3952:         LogService logService = (LogService) getService();
1:fdf3952:         if (logService != null) {
1:fdf3952:             logService.log(ref, level, message, exception);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings("rawtypes")
1:     @SuppressWarnings("unchecked")
1: 	public Logger(BundleContext context) {
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.log.LogService;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: /**
1:  * <p>This <tt>Logger</tt> class represents ServiceTracker for LogService. 
1:  * It provides methods for logging messages. If LogService is not available it logs to stdout.</p>
1:  * 
1:  * @see org.osgi.service.log.LogService
1:  * @see org.osgi.util.tracker.ServiceTracker
1:  * @version $Rev$ $Date$
1:  */
1: public class Logger extends ServiceTracker implements LogService {
1:     
0:     private String bundleLocation;
1: 
1:     /**
1:      * Constructs new Logger(ServiceTracker for LogService).
1:      * 
1:      * @param context bundle context.
1:      */
0:     public Logger(BundleContext context) {
1:         super(context, LogService.class.getName(), null);
0:         this.bundleLocation = context.getBundle().getLocation();
1:     }
1: 
1:     /**
1:      * @see org.osgi.service.log.LogService#log(int, java.lang.String)
1:      */
1:     public void log(int level, String message) {
1:         LogService logService = (LogService) getService();
1:         if (logService != null) {
1:             logService.log(level, message);
1:         }
1: 
1:     }
1: 
1:     /**
1:      * @see org.osgi.service.log.LogService#log(int, java.lang.String, java.lang.Throwable)
1:      */
1:     public void log(int level, String message, Throwable exception) {
1:         LogService logService = (LogService) getService();
1:         if (logService != null) {
1:             logService.log(level, message, exception);
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.service.log.LogService#log(org.osgi.framework.ServiceReference, int, java.lang.String)
1:      */
1:     public void log(ServiceReference ref, int level, String message) {
1:         LogService logService = (LogService) getService();
1:         if (logService != null) {
1:             logService.log(ref, level, message);
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.service.log.LogService#log(org.osgi.framework.ServiceReference, int, java.lang.String,
1:      *      java.lang.Throwable)
1:      */
1:     public void log(ServiceReference ref, int level, String message, Throwable exception) {
1:         LogService logService = (LogService) getService();
1:         if (logService != null) {
1:             logService.log(ref, level, message, exception);
1:         }
1:     }
1: 
1: }
============================================================================