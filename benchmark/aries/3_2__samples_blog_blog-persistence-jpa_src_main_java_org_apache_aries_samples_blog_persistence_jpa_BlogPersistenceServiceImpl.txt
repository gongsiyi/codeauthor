3:5eeafa4: 
1:5eeafa4: /**
1:5eeafa4:  * Licensed to the Apache Software Foundation (ASF) under one
1:5eeafa4:  * or more contributor license agreements.  See the NOTICE file
1:5eeafa4:  * distributed with this work for additional information
1:5eeafa4:  * regarding copyright ownership.  The ASF licenses this file
1:5eeafa4:  * to you under the Apache License, Version 2.0 (the
1:5eeafa4:  * "License"); you may not use this file except in compliance
1:5eeafa4:  * with the License.  You may obtain a copy of the License at
1:5eeafa4:  *
1:5eeafa4:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5eeafa4:  *
1:5eeafa4:  * Unless required by applicable law or agreed to in writing,
1:5eeafa4:  * software distributed under the License is distributed on an
1:5eeafa4:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5eeafa4:  * KIND, either express or implied.  See the License for the
1:5eeafa4:  * specific language governing permissions and limitations
1:5eeafa4:  * under the License.
1:5eeafa4:  */
1:5eeafa4: 
1:c887046: package org.apache.aries.samples.blog.persistence.jpa;
1:5eeafa4: 
1:5eeafa4: import java.util.ArrayList;
1:5eeafa4: import java.util.Date;
1:5eeafa4: import java.util.List;
1:5eeafa4: 
1:5eeafa4: import javax.persistence.EntityManager;
1:5eeafa4: import javax.persistence.Query;
1:5eeafa4: 
1:380a6c0: import org.apache.aries.samples.blog.api.persistence.BlogPersistenceService;
1:380a6c0: import org.apache.aries.samples.blog.api.persistence.Entry;
1:c887046: import org.apache.aries.samples.blog.persistence.jpa.entity.AuthorImpl;
1:c887046: import org.apache.aries.samples.blog.persistence.jpa.entity.EntryImpl;
1:5eeafa4: 
1:5eeafa4: /**
1:5eeafa4:  * This class is the implementation of the blogPersistenceService
1:5eeafa4:  */
1:5eeafa4: public class BlogPersistenceServiceImpl implements BlogPersistenceService {
1:5eeafa4: 
1:5eeafa4: 	private EntityManager em;
1:5eeafa4: 	
1:5eeafa4: 	public BlogPersistenceServiceImpl() {
2:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	
1:5eeafa4: 	public void setEntityManager(EntityManager e) {
1:5eeafa4: 		em = e;
1:5eeafa4: 	}
1:5eeafa4: 	
1:5eeafa4: 
1:5eeafa4: 	public void createAuthor(String email, Date dob, String name,
1:5eeafa4: 			String displayName, String bio) {
1:5eeafa4: 		AuthorImpl a = new AuthorImpl();
1:5eeafa4: 		a.setEmail(email);
1:5eeafa4: 		a.setName(name);
1:5eeafa4: 		a.setDisplayName(displayName);
1:5eeafa4: 		a.setBio(bio);
1:5eeafa4: 		a.setDob(dob);
1:5eeafa4: 		em.persist(a);
1:5eeafa4: 		
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public void createBlogPost(String authorEmail, String title,
1:5eeafa4: 			String blogText, List<String> tags) {
1:cfb4c6d: 	
1:5eeafa4: 		AuthorImpl a = em.find(AuthorImpl.class, authorEmail);
1:5eeafa4: 		EntryImpl b = new EntryImpl();
1:5eeafa4: 
1:5eeafa4: 		Date publishDate = new Date(System.currentTimeMillis());
1:5eeafa4: 
1:5eeafa4: 		b.setBlogText(blogText);
1:5eeafa4: 		b.setAuthor(a);
1:5eeafa4: 		b.setTitle((title == null) ? "" : title);
1:5eeafa4: 		b.setPublishDate(publishDate);
1:5eeafa4: 		b.setTags((tags == null) ? new ArrayList<String>() : tags);
1:5eeafa4: 
1:5eeafa4: 		a.updateEntries(b);
1:cfb4c6d: 		em.persist(b);		
1:5eeafa4: 		em.merge(b.getAuthor());
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public Entry findBlogEntryByTitle(String title) {
1:5eeafa4: 		Query q = em
1:5eeafa4: 				.createQuery("SELECT e FROM BLOGENTRY e WHERE e.title = ?1");
1:5eeafa4: 		q.setParameter(1, title);
1:5eeafa4: 		Entry b = (Entry) q.getSingleResult();
1:5eeafa4: 		return b;
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public List<AuthorImpl> getAllAuthors() {
1:5eeafa4: 		@SuppressWarnings("unchecked")
1:5eeafa4: 		List<AuthorImpl> list = em.createQuery("SELECT a FROM AUTHOR a")
1:5eeafa4: 				.getResultList();
1:5eeafa4: 
1:5eeafa4: 		return list;
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public List<EntryImpl> getAllBlogEntries() {
1:5eeafa4: 		@SuppressWarnings("unchecked")
1:5eeafa4: 		List<EntryImpl> list = em.createQuery(
1:5eeafa4: 				"SELECT b FROM BLOGENTRY b ORDER BY b.publishDate DESC")
1:5eeafa4: 				.getResultList();
1:5eeafa4: 		return list;
1:5eeafa4: 		
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public int getNoOfBlogEntries() {
1:5eeafa4: 		Number n = (Number) em.createQuery(
1:5eeafa4: 				"SELECT COUNT(b) FROM BLOGENTRY b").getSingleResult();
1:5eeafa4: 		return n.intValue();
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public List<EntryImpl> getBlogEntries(int firstPostIndex, int noOfPosts) {
1:5eeafa4: 		Query q = em
1:5eeafa4: 				.createQuery("SELECT b FROM BLOGENTRY b ORDER BY b.publishDate DESC");
1:5eeafa4: 		q.setFirstResult(firstPostIndex);
1:5eeafa4: 		q.setMaxResults(noOfPosts);
1:5eeafa4: 
1:5eeafa4: 		@SuppressWarnings("unchecked")
1:5eeafa4: 		List<EntryImpl> list = q.getResultList();
1:5eeafa4: 
1:5eeafa4: 		return list;
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public AuthorImpl getAuthor(String emailAddress) {
1:5eeafa4: 		AuthorImpl a = em.find(AuthorImpl.class, emailAddress);
1:5eeafa4: 		return a;
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public List<EntryImpl> getBlogEntriesModifiedBetween(Date start, Date end) {
1:5eeafa4: 		Query q = em
1:5eeafa4: 				.createQuery("SELECT b FROM BLOGENTRY b WHERE (b.updatedDate >= :start AND b.updatedDate <= :end) OR (b.publishDate >= :start AND b.publishDate <= :end) ORDER BY b.publishDate ASC");
1:5eeafa4: 		q.setParameter("start", start);
1:5eeafa4: 		q.setParameter("end", end);
1:5eeafa4: 
1:5eeafa4: 		@SuppressWarnings("unchecked")
1:5eeafa4: 		List<EntryImpl> list = q.getResultList();
1:5eeafa4: 
1:5eeafa4: 		return list;
1:5eeafa4: 	}
1:5eeafa4: 	
1:5eeafa4: 	public List<EntryImpl> getBlogsForAuthor(String emailAddress) {
1:5eeafa4: 
1:5eeafa4: 		List<EntryImpl> list = em.find(AuthorImpl.class, emailAddress)
1:5eeafa4: 				.getEntries();
1:5eeafa4: 		
1:5eeafa4: 		return list;
1:5eeafa4: 
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public void updateAuthor(String email, Date dob, String name,
1:5eeafa4: 			String displayName, String bio) {
1:5eeafa4: 		AuthorImpl a = em.find(AuthorImpl.class, email);
1:5eeafa4: 		a.setEmail(email);
1:5eeafa4: 		a.setName(name);
1:5eeafa4: 		a.setDisplayName(displayName);
1:5eeafa4: 		a.setBio(bio);
1:5eeafa4: 		a.setDob(dob);
1:5eeafa4: 		em.merge(a);
1:5eeafa4: 	}
1:5eeafa4: 	
1:5eeafa4: 	public void updateBlogEntry(long id, String email, String title,
1:5eeafa4: 			String blogText, List<String> tags, Date updatedDate) {
1:5eeafa4: 		EntryImpl b = em.find(EntryImpl.class, id);
1:5eeafa4: 		b.setTitle(title);
1:5eeafa4: 		b.setBlogText(blogText);
1:5eeafa4: 		b.setTags(tags);
1:5eeafa4: 		b.setUpdatedDate(updatedDate);
1:5eeafa4: 
1:5eeafa4: 		em.merge(b);
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public void removeAuthor(String emailAddress) {
1:5eeafa4: 		em.remove(em.find(AuthorImpl.class, emailAddress));
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public void removeBlogEntry(long id) {
1:5eeafa4: 		EntryImpl b = em.find(EntryImpl.class, id);
1:5eeafa4: 		b = em.merge(b);
1:5eeafa4: 		b.getAuthor().getEntries().remove(b);
1:5eeafa4: 
1:5eeafa4: 		em.remove(em.merge(b));
1:5eeafa4: 		em.merge(b.getAuthor());
1:5eeafa4: 
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public EntryImpl getBlogEntryById(long postId) {
1:5eeafa4: 		EntryImpl b =  em.find(EntryImpl.class, postId);
1:5eeafa4: 		return b;
1:5eeafa4: 	}
1:5eeafa4: 
1:5eeafa4: 	public void setPublishDate (long postId, Date date) {
1:5eeafa4: 		//Added for testing
1:5eeafa4: 		EntryImpl b = em.find(EntryImpl.class, postId);
1:5eeafa4: 		b.setPublishDate(date);	
1:5eeafa4: 		em.merge(b);
1:5eeafa4: 	}
1:5eeafa4: 	
1:5eeafa4: 	public void setUpdatedDate (long postId, Date date) {
1:5eeafa4: 		//Added for testing
1:5eeafa4: 		EntryImpl b = em.find(EntryImpl.class, postId);
1:5eeafa4: 		b.setUpdatedDate(date);	
1:5eeafa4: 		em.merge(b);
1:5eeafa4: 	}
1:5eeafa4: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:07f6b4e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:c887046
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.blog.persistence.jpa;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.blog.persistence.jpa.entity.AuthorImpl;
1: import org.apache.aries.samples.blog.persistence.jpa.entity.EntryImpl;
commit:380a6c0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.blog.api.persistence.BlogPersistenceService;
1: import org.apache.aries.samples.blog.api.persistence.Entry;
commit:e0beeec
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.blog.api.persistence.api.BlogPersistenceService;
0: import org.apache.aries.samples.blog.api.persistence.api.Entry;
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:cfb4c6d
/////////////////////////////////////////////////////////////////////////
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		em.persist(b);		
0: 		//Uncomment this line to verify that datasources have been enlisted.
0: 		//The data base should not contain the blog post even though it has been persisted.
0: 		//throw new RuntimeException();
commit:afa98ec
commit:3ae61e4
commit:5eeafa4
/////////////////////////////////////////////////////////////////////////
1: 
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.samples.blog.persistence;
1: 
1: import java.util.ArrayList;
1: import java.util.Date;
1: import java.util.List;
1: 
1: import javax.persistence.EntityManager;
0: import javax.persistence.PersistenceContext;
1: import javax.persistence.Query;
0: import javax.sql.DataSource;
1: 
0: import org.apache.aries.samples.blog.persistence.api.BlogPersistenceService;
0: import org.apache.aries.samples.blog.persistence.api.Entry;
0: import org.apache.aries.samples.blog.persistence.entity.AuthorImpl;
0: import org.apache.aries.samples.blog.persistence.entity.EntryImpl;
1: 
1: /**
1:  * This class is the implementation of the blogPersistenceService
1:  */
1: public class BlogPersistenceServiceImpl implements BlogPersistenceService {
1: 
1: 	private EntityManager em;
0: 	private DataSource dataSource;
1: 	
1: 	public BlogPersistenceServiceImpl() {
1: 	}
1: 
1: 	
0: 	//@PersistenceContext(unitName = "blogExample")
1: 	public void setEntityManager(EntityManager e) {
1: 		em = e;
1: 	}
1: 	
0: 	public void setDataSource(DataSource dataSource) {
0: 		this.dataSource = dataSource;
1: 	}
1: 
1: 
1: 	public void createAuthor(String email, Date dob, String name,
1: 			String displayName, String bio) {
1: 		AuthorImpl a = new AuthorImpl();
1: 		a.setEmail(email);
1: 		a.setName(name);
1: 		a.setDisplayName(displayName);
1: 		a.setBio(bio);
1: 		a.setDob(dob);
1: 		em.persist(a);
1: 		
1: 	}
1: 
1: 	public void createBlogPost(String authorEmail, String title,
1: 			String blogText, List<String> tags) {
1: 
1: 		AuthorImpl a = em.find(AuthorImpl.class, authorEmail);
1: 		EntryImpl b = new EntryImpl();
1: 
1: 		Date publishDate = new Date(System.currentTimeMillis());
1: 
1: 		b.setBlogText(blogText);
1: 		b.setAuthor(a);
1: 		b.setTitle((title == null) ? "" : title);
1: 		b.setPublishDate(publishDate);
1: 		b.setTags((tags == null) ? new ArrayList<String>() : tags);
1: 
1: 		a.updateEntries(b);
0: 		em.persist(b);
1: 		em.merge(b.getAuthor());
1: 	}
1: 
1: 	public Entry findBlogEntryByTitle(String title) {
1: 		Query q = em
1: 				.createQuery("SELECT e FROM BLOGENTRY e WHERE e.title = ?1");
1: 		q.setParameter(1, title);
1: 		Entry b = (Entry) q.getSingleResult();
1: 		return b;
1: 	}
1: 
1: 	public List<AuthorImpl> getAllAuthors() {
1: 		@SuppressWarnings("unchecked")
1: 		List<AuthorImpl> list = em.createQuery("SELECT a FROM AUTHOR a")
1: 				.getResultList();
1: 
1: 		return list;
1: 	}
1: 
1: 	public List<EntryImpl> getAllBlogEntries() {
1: 		@SuppressWarnings("unchecked")
1: 		List<EntryImpl> list = em.createQuery(
1: 				"SELECT b FROM BLOGENTRY b ORDER BY b.publishDate DESC")
1: 				.getResultList();
1: 		return list;
1: 		
1: 	}
1: 
1: 	public int getNoOfBlogEntries() {
1: 		Number n = (Number) em.createQuery(
1: 				"SELECT COUNT(b) FROM BLOGENTRY b").getSingleResult();
1: 		return n.intValue();
1: 	}
1: 
1: 	public List<EntryImpl> getBlogEntries(int firstPostIndex, int noOfPosts) {
1: 		Query q = em
1: 				.createQuery("SELECT b FROM BLOGENTRY b ORDER BY b.publishDate DESC");
1: 		q.setFirstResult(firstPostIndex);
1: 		q.setMaxResults(noOfPosts);
1: 
1: 		@SuppressWarnings("unchecked")
1: 		List<EntryImpl> list = q.getResultList();
1: 
1: 		return list;
1: 	}
1: 
1: 	public AuthorImpl getAuthor(String emailAddress) {
1: 		AuthorImpl a = em.find(AuthorImpl.class, emailAddress);
1: 		return a;
1: 	}
1: 
1: 	public List<EntryImpl> getBlogEntriesModifiedBetween(Date start, Date end) {
1: 		Query q = em
1: 				.createQuery("SELECT b FROM BLOGENTRY b WHERE (b.updatedDate >= :start AND b.updatedDate <= :end) OR (b.publishDate >= :start AND b.publishDate <= :end) ORDER BY b.publishDate ASC");
1: 		q.setParameter("start", start);
1: 		q.setParameter("end", end);
1: 
1: 		@SuppressWarnings("unchecked")
1: 		List<EntryImpl> list = q.getResultList();
1: 
1: 		return list;
1: 	}
1: 	
1: 	public List<EntryImpl> getBlogsForAuthor(String emailAddress) {
1: 
1: 		List<EntryImpl> list = em.find(AuthorImpl.class, emailAddress)
1: 				.getEntries();
1: 		
1: 		return list;
1: 
1: 	}
1: 
1: 	public void updateAuthor(String email, Date dob, String name,
1: 			String displayName, String bio) {
1: 		AuthorImpl a = em.find(AuthorImpl.class, email);
1: 		a.setEmail(email);
1: 		a.setName(name);
1: 		a.setDisplayName(displayName);
1: 		a.setBio(bio);
1: 		a.setDob(dob);
1: 		em.merge(a);
1: 	}
1: 	
1: 	public void updateBlogEntry(long id, String email, String title,
1: 			String blogText, List<String> tags, Date updatedDate) {
1: 		EntryImpl b = em.find(EntryImpl.class, id);
1: 		b.setTitle(title);
1: 		b.setBlogText(blogText);
1: 		b.setTags(tags);
1: 		b.setUpdatedDate(updatedDate);
1: 
1: 		em.merge(b);
1: 	}
1: 
1: 	public void removeAuthor(String emailAddress) {
1: 		em.remove(em.find(AuthorImpl.class, emailAddress));
1: 	}
1: 
1: 	public void removeBlogEntry(long id) {
1: 		EntryImpl b = em.find(EntryImpl.class, id);
1: 		b = em.merge(b);
1: 		b.getAuthor().getEntries().remove(b);
1: 
1: 		em.remove(em.merge(b));
1: 		em.merge(b.getAuthor());
1: 
1: 	}
1: 
1: 	public EntryImpl getBlogEntryById(long postId) {
1: 		EntryImpl b =  em.find(EntryImpl.class, postId);
1: 		return b;
1: 	}
1: 
1: 	public void setPublishDate (long postId, Date date) {
1: 		//Added for testing
1: 		EntryImpl b = em.find(EntryImpl.class, postId);
1: 		b.setPublishDate(date);	
1: 		em.merge(b);
1: 	}
1: 	
1: 	public void setUpdatedDate (long postId, Date date) {
1: 		//Added for testing
1: 		EntryImpl b = em.find(EntryImpl.class, postId);
1: 		b.setUpdatedDate(date);	
1: 		em.merge(b);
1: 	}
1: }
============================================================================