1:d93afd1: /*
1:d93afd1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:d93afd1:  * you may not use this file except in compliance with the License.
1:d93afd1:  * You may obtain a copy of the License at
1:d93afd1:  *
1:d93afd1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d93afd1:  *
1:d93afd1:  * Unless required by applicable law or agreed to in writing, software
1:d93afd1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d93afd1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d93afd1:  * See the License for the specific language governing permissions and
1:d93afd1:  * limitations under the License.
1:d93afd1:  */
1:d93afd1: package org.apache.aries.subsystem.core.archive;
1:d93afd1: 
1:d93afd1: import org.osgi.resource.Namespace;
1:d93afd1: 
1:d93afd1: public class CardinalityDirective extends AbstractDirective {
1:d93afd1: 	public static final String NAME = Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE;
1:d93afd1: 	public static final String VALUE_MULTIPLE = Namespace.CARDINALITY_MULTIPLE;
1:d93afd1: 	public static final String VALUE_SINGLE = Namespace.CARDINALITY_SINGLE;
1:d93afd1: 	
1:d93afd1: 	public static final CardinalityDirective MULTIPLE = new CardinalityDirective(VALUE_MULTIPLE);
1:d93afd1: 	public static final CardinalityDirective SINGLE = new CardinalityDirective(VALUE_SINGLE);
1:d93afd1: 	
1:d93afd1: 	public static final CardinalityDirective DEFAULT = SINGLE;
1:d93afd1: 	
1:d93afd1: 	public static CardinalityDirective getInstance(String value) {
1:d93afd1: 		if (VALUE_SINGLE.equals(value))
1:d93afd1: 			return SINGLE;
1:d93afd1: 		if (VALUE_MULTIPLE.equals(value))
1:d93afd1: 			return MULTIPLE;
1:d93afd1: 		return new CardinalityDirective(value);
1:d93afd1: 	}
1:d93afd1: 	
1:d93afd1: 	public CardinalityDirective() {
1:d93afd1: 		this(VALUE_SINGLE);
1:d93afd1: 	}
1:d93afd1: 	
1:d93afd1: 	public CardinalityDirective(String value) {
1:d93afd1: 		super(NAME, value);
1:d93afd1: 	}
1:d93afd1: 	
1:d93afd1: 	public boolean isMultiple() {
1:d93afd1: 		return MULTIPLE == this || VALUE_MULTIPLE.equals(getValue());
1:d93afd1: 	}
1:d93afd1: 	
1:d93afd1: 	public boolean isSingle() {
1:d93afd1: 		return SINGLE == this || VALUE_SINGLE.equals(getValue());
1:d93afd1: 	}
1:d93afd1: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:d93afd1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import org.osgi.resource.Namespace;
1: 
1: public class CardinalityDirective extends AbstractDirective {
1: 	public static final String NAME = Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE;
1: 	public static final String VALUE_MULTIPLE = Namespace.CARDINALITY_MULTIPLE;
1: 	public static final String VALUE_SINGLE = Namespace.CARDINALITY_SINGLE;
1: 	
1: 	public static final CardinalityDirective MULTIPLE = new CardinalityDirective(VALUE_MULTIPLE);
1: 	public static final CardinalityDirective SINGLE = new CardinalityDirective(VALUE_SINGLE);
1: 	
1: 	public static final CardinalityDirective DEFAULT = SINGLE;
1: 	
1: 	public static CardinalityDirective getInstance(String value) {
1: 		if (VALUE_SINGLE.equals(value))
1: 			return SINGLE;
1: 		if (VALUE_MULTIPLE.equals(value))
1: 			return MULTIPLE;
1: 		return new CardinalityDirective(value);
1: 	}
1: 	
1: 	public CardinalityDirective() {
1: 		this(VALUE_SINGLE);
1: 	}
1: 	
1: 	public CardinalityDirective(String value) {
1: 		super(NAME, value);
1: 	}
1: 	
1: 	public boolean isMultiple() {
1: 		return MULTIPLE == this || VALUE_MULTIPLE.equals(getValue());
1: 	}
1: 	
1: 	public boolean isSingle() {
1: 		return SINGLE == this || VALUE_SINGLE.equals(getValue());
1: 	}
1: }
============================================================================