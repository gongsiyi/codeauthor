1:50ca3da: /*
1:50ca3da:  * Licensed to the Apache Software Foundation (ASF) under one
1:50ca3da:  * or more contributor license agreements.  See the NOTICE file
1:50ca3da:  * distributed with this work for additional information
1:50ca3da:  * regarding copyright ownership.  The ASF licenses this file
1:50ca3da:  * to you under the Apache License, Version 2.0 (the
1:50ca3da:  * "License"); you may not use this file except in compliance
1:50ca3da:  * with the License.  You may obtain a copy of the License at
1:50ca3da:  *
1:50ca3da:  *   http://www.apache.org/licenses/LICENSE-2.0
1:50ca3da:  *
1:50ca3da:  * Unless required by applicable law or agreed to in writing,
1:50ca3da:  * software distributed under the License is distributed on an
1:50ca3da:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:50ca3da:  * KIND, either express or implied.  See the License for the
1:50ca3da:  * specific language governing permissions and limitations
1:50ca3da:  * under the License.
1:50ca3da:  */
1:50ca3da: package org.apache.aries.web.converter.impl;
1:50ca3da: 
1:50ca3da: import java.util.HashMap;
1:50ca3da: import java.util.Map;
1:50ca3da: import java.util.Properties;
1:50ca3da: 
1:50ca3da: import org.apache.aries.web.converter.WarToWabConverter;
1:50ca3da: import org.osgi.framework.Constants;
1:50ca3da: 
1:50ca3da: /**
1:50ca3da:  * Simple key case-insensitive map where only selected set of keys are 
1:50ca3da:  * treated in case-insensitive way.
1:50ca3da:  */
1:9e668db: @SuppressWarnings("serial")
1:50ca3da: public class CaseInsensitiveMap extends HashMap<String, String> {
1:50ca3da:     
1:50ca3da:     private static final Map<String, String> DEFAULT_KEY_MAP = new HashMap<String, String>();
1:50ca3da:     static {
1:50ca3da:         addKeyMapping(DEFAULT_KEY_MAP, Constants.BUNDLE_SYMBOLICNAME);
1:50ca3da:         addKeyMapping(DEFAULT_KEY_MAP, Constants.BUNDLE_VERSION);
1:50ca3da:         addKeyMapping(DEFAULT_KEY_MAP, Constants.BUNDLE_MANIFESTVERSION);
1:50ca3da:         addKeyMapping(DEFAULT_KEY_MAP, Constants.IMPORT_PACKAGE);
1:50ca3da:         addKeyMapping(DEFAULT_KEY_MAP, Constants.BUNDLE_CLASSPATH);
1:50ca3da:         addKeyMapping(DEFAULT_KEY_MAP, WarToWabConverter.WEB_CONTEXT_PATH);
1:50ca3da:     }
1:50ca3da:     
1:50ca3da:     private static void addKeyMapping(Map<String, String> mappings, String name) {
1:50ca3da:         mappings.put(name.toLowerCase(), name);
1:50ca3da:     }
1:50ca3da:     
1:50ca3da:     private Map<String, String> keyMap;
1:50ca3da:     
1:50ca3da:     public CaseInsensitiveMap() {
1:50ca3da:         this.keyMap = new HashMap<String, String>(DEFAULT_KEY_MAP);
1:50ca3da:     }
1:50ca3da:     
1:50ca3da:     public CaseInsensitiveMap(Map<String, String> source) {
1:50ca3da:         this();
1:50ca3da:         putAll(source);
1:50ca3da:     }
1:50ca3da:     
1:50ca3da:     public CaseInsensitiveMap(Properties source) {
1:50ca3da:         this();
1:50ca3da:         for (Map.Entry<Object, Object> entry : source.entrySet()) {
1:50ca3da:             String key = entry.getKey().toString();
1:50ca3da:             String value = entry.getValue().toString();
1:50ca3da:             put(key, value);
1:50ca3da:         }
1:50ca3da:     }
1:50ca3da:     
1:50ca3da:     @Override
1:50ca3da:     public String put(String name, String value) {
1:50ca3da:         return super.put(getMappedName(name), value);
1:50ca3da:     }
1:50ca3da:     
1:50ca3da:     @Override
1:50ca3da:     public String get(Object name) {
1:50ca3da:         if (!(name instanceof String)) {
1:50ca3da:             return null;
1:50ca3da:         }
1:50ca3da:         return super.get(getMappedName((String) name));
1:50ca3da:     }
1:50ca3da:     
1:50ca3da:     @Override
1:50ca3da:     public boolean containsKey(Object name) {
1:50ca3da:         if (!(name instanceof String)) {
1:50ca3da:             return false;
1:50ca3da:         }
1:50ca3da:         return super.containsKey(getMappedName((String) name));
1:50ca3da:     }
1:50ca3da:     
1:50ca3da:     private String getMappedName(String name) {
1:50ca3da:         String mappedName = keyMap.get(name.toLowerCase());
1:50ca3da:         if (mappedName == null) {
1:50ca3da:             mappedName = name;
1:50ca3da:         }
1:50ca3da:         return mappedName;
1:50ca3da:     }
1:50ca3da: }
1:50ca3da: 
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:9e668db
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings("serial")
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:50ca3da
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.web.converter.impl;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Properties;
1: 
1: import org.apache.aries.web.converter.WarToWabConverter;
1: import org.osgi.framework.Constants;
1: 
1: /**
1:  * Simple key case-insensitive map where only selected set of keys are 
1:  * treated in case-insensitive way.
1:  */
1: public class CaseInsensitiveMap extends HashMap<String, String> {
1:     
1:     private static final Map<String, String> DEFAULT_KEY_MAP = new HashMap<String, String>();
1:     static {
1:         addKeyMapping(DEFAULT_KEY_MAP, Constants.BUNDLE_SYMBOLICNAME);
1:         addKeyMapping(DEFAULT_KEY_MAP, Constants.BUNDLE_VERSION);
1:         addKeyMapping(DEFAULT_KEY_MAP, Constants.BUNDLE_MANIFESTVERSION);
1:         addKeyMapping(DEFAULT_KEY_MAP, Constants.IMPORT_PACKAGE);
1:         addKeyMapping(DEFAULT_KEY_MAP, Constants.BUNDLE_CLASSPATH);
1:         addKeyMapping(DEFAULT_KEY_MAP, WarToWabConverter.WEB_CONTEXT_PATH);
1:     }
1:     
1:     private static void addKeyMapping(Map<String, String> mappings, String name) {
1:         mappings.put(name.toLowerCase(), name);
1:     }
1:     
1:     private Map<String, String> keyMap;
1:     
1:     public CaseInsensitiveMap() {
1:         this.keyMap = new HashMap<String, String>(DEFAULT_KEY_MAP);
1:     }
1:     
1:     public CaseInsensitiveMap(Map<String, String> source) {
1:         this();
1:         putAll(source);
1:     }
1:     
1:     public CaseInsensitiveMap(Properties source) {
1:         this();
1:         for (Map.Entry<Object, Object> entry : source.entrySet()) {
1:             String key = entry.getKey().toString();
1:             String value = entry.getValue().toString();
1:             put(key, value);
1:         }
1:     }
1:     
1:     @Override
1:     public String put(String name, String value) {
1:         return super.put(getMappedName(name), value);
1:     }
1:     
1:     @Override
1:     public String get(Object name) {
1:         if (!(name instanceof String)) {
1:             return null;
1:         }
1:         return super.get(getMappedName((String) name));
1:     }
1:     
1:     @Override
1:     public boolean containsKey(Object name) {
1:         if (!(name instanceof String)) {
1:             return false;
1:         }
1:         return super.containsKey(getMappedName((String) name));
1:     }
1:     
1:     private String getMappedName(String name) {
1:         String mappedName = keyMap.get(name.toLowerCase());
1:         if (mappedName == null) {
1:             mappedName = name;
1:         }
1:         return mappedName;
1:     }
1: }
1: 
============================================================================