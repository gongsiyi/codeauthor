1:84a8d37: /*
1:84a8d37:  * Licensed to the Apache Software Foundation (ASF) under one
1:84a8d37:  * or more contributor license agreements.  See the NOTICE file
1:84a8d37:  * distributed with this work for additional information
1:84a8d37:  * regarding copyright ownership.  The ASF licenses this file
1:84a8d37:  * to you under the Apache License, Version 2.0 (the
1:84a8d37:  * "License"); you may not use this file except in compliance
1:84a8d37:  * with the License.  You may obtain a copy of the License at
1:84a8d37:  *
1:84a8d37:  *   http://www.apache.org/licenses/LICENSE-2.0
1:84a8d37:  *
1:84a8d37:  * Unless required by applicable law or agreed to in writing,
1:84a8d37:  * software distributed under the License is distributed on an
1:84a8d37:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:84a8d37:  * KIND, either express or implied.  See the License for the
1:84a8d37:  * specific language governing permissions and limitations
1:84a8d37:  * under the License.
1:84a8d37:  */
1:84a8d37: package org.apache.aries.tx.control.jpa.xa.impl;
1:84a8d37: 
1:84a8d37: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_PROVIDER;
1:84a8d37: 
1:84a8d37: import java.io.ByteArrayOutputStream;
1:84a8d37: import java.io.IOException;
1:84a8d37: import java.io.InputStream;
1:84a8d37: import java.util.HashMap;
1:84a8d37: import java.util.Map;
1:84a8d37: import java.util.concurrent.ConcurrentHashMap;
1:84a8d37: import java.util.concurrent.ConcurrentMap;
1:84a8d37: 
1:84a8d37: import javax.persistence.spi.PersistenceProvider;
1:84a8d37: 
1:84a8d37: import org.apache.aries.tx.control.jpa.common.impl.AbstractJPAEntityManagerProvider;
1:84a8d37: import org.apache.aries.tx.control.jpa.common.impl.AbstractManagedJPAEMFLocator;
1:84a8d37: import org.osgi.framework.Bundle;
1:84a8d37: import org.osgi.framework.BundleContext;
1:84a8d37: import org.osgi.framework.InvalidSyntaxException;
1:84a8d37: import org.osgi.framework.ServiceReference;
1:84a8d37: import org.osgi.framework.wiring.BundleWire;
1:84a8d37: import org.osgi.framework.wiring.BundleWiring;
1:84a8d37: import org.osgi.service.cm.ConfigurationException;
1:84a8d37: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:84a8d37: import org.osgi.service.transaction.control.TransactionControl;
1:84a8d37: 
1:84a8d37: public class XAJPAEMFLocator extends AbstractManagedJPAEMFLocator {
1:84a8d37: 
1:84a8d37: 	public XAJPAEMFLocator(BundleContext context, String pid, Map<String, Object> jpaProperties,
1:84a8d37: 			Map<String, Object> providerProperties, Runnable onClose) throws InvalidSyntaxException, ConfigurationException {
1:84a8d37: 		super(context, pid, jpaProperties, providerProperties, onClose);
1:84a8d37: 	}
1:84a8d37: 
1:84a8d37: 	@Override
1:84a8d37: 	protected AbstractJPAEntityManagerProvider getResourceProvider(BundleContext context,
1:84a8d37: 			EntityManagerFactoryBuilder service, ServiceReference<EntityManagerFactoryBuilder> reference,
1:84a8d37: 			Map<String, Object> jpaProperties, Map<String, Object> providerProperties, Runnable onClose) {
1:84a8d37: 		return new DelayedJPAEntityManagerProvider(t -> {
1:84a8d37: 			
1:84a8d37: 			Map<String, Object> jpaProps = new HashMap<String, Object>(jpaProperties);
1:84a8d37: 			Map<String, Object> providerProps = new HashMap<String, Object>(providerProperties);
1:84a8d37: 			
1:84a8d37: 			setupTransactionManager(context, jpaProps, providerProps, t, reference);
1:84a8d37: 			
1:84a8d37: 			return new JPAEntityManagerProviderFactoryImpl().getProviderFor(service,
1:84a8d37: 					jpaProps, providerProps, t, onClose);
1:84a8d37: 		});
1:84a8d37: 	}
1:84a8d37: 
1:84a8d37: 	private void setupTransactionManager(BundleContext context, Map<String, Object> props, 
1:84a8d37: 			Map<String, Object> providerProps, ThreadLocal<TransactionControl> t, ServiceReference<EntityManagerFactoryBuilder> reference) {
1:84a8d37: 		String provider = (String) reference.getProperty(JPA_UNIT_PROVIDER);
1:84a8d37: 		
1:84a8d37: 		ServiceReference<PersistenceProvider> providerRef = getPersistenceProvider(provider, context);
1:84a8d37: 		
1:84a8d37: 		if(providerRef == null) {
1:84a8d37: 			// TODO log a warning and give up
1:84a8d37: 			return;
1:84a8d37: 		}
1:84a8d37: 
1:84a8d37: 		Bundle providerBundle = providerRef.getBundle();
1:84a8d37: 		Bundle txControlProviderBundle = context.getBundle();
1:84a8d37: 		
1:84a8d37: 		try {
1:84a8d37: 			if("org.hibernate.jpa.HibernatePersistenceProvider".equals(provider)) {
1:84a8d37: 				
1:84a8d37: 				try{
1:84a8d37: 					providerBundle.loadClass("org.hibernate.resource.transaction.TransactionCoordinatorBuilder");
1:84a8d37: 				} catch (Exception e) {
1:84a8d37: 					BundleWiring wiring = providerBundle.adapt(BundleWiring.class);
1:84a8d37: 					providerBundle = wiring.getRequiredWires("osgi.wiring.package").stream()
1:84a8d37: 								.filter(bw -> "org.hibernate".equals(bw.getCapability().getAttributes().get("osgi.wiring.package")))
1:84a8d37: 								.map(BundleWire::getProviderWiring)
1:84a8d37: 								.map(BundleWiring::getBundle)
1:84a8d37: 								.findFirst().get();
1:84a8d37: 				}
1:84a8d37: 				
1:84a8d37: 				ClassLoader pluginLoader = getPluginLoader(providerBundle, txControlProviderBundle);
1:84a8d37: 				
1:84a8d37: 				Class<?> pluginClazz = pluginLoader.loadClass("org.apache.aries.tx.control.jpa.xa.hibernate.impl.HibernateTxControlPlatform");
1:84a8d37: 				Object plugin = pluginClazz.getConstructor(ThreadLocal.class)
1:84a8d37: 					.newInstance(t);
1:84a8d37: 				
1:84a8d37: 				props.put("hibernate.transaction.coordinator_class", plugin);
1:84a8d37: 				
1:84a8d37: 			} else if("org.apache.openjpa.persistence.PersistenceProviderImpl".equals(provider)) {
1:84a8d37: 					
1:84a8d37: 				ClassLoader pluginLoader = getPluginLoader(providerBundle, txControlProviderBundle);
1:84a8d37: 					
1:84a8d37: 				Class<?> pluginClazz = pluginLoader.loadClass("org.apache.aries.tx.control.jpa.xa.openjpa.impl.OpenJPATxControlPlatform");
1:84a8d37: 				Object plugin = pluginClazz.getConstructor(ThreadLocal.class)
1:84a8d37: 						.newInstance(t);
1:84a8d37: 					
1:84a8d37: 				props.put("openjpa.ManagedRuntime", plugin);
1:84a8d37: 					
1:84a8d37: 			} else if("org.eclipse.persistence.jpa.PersistenceProvider".equals(provider)) {
1:84a8d37: 				
1:84a8d37: 				ClassLoader pluginLoader = getPluginLoader(providerBundle, txControlProviderBundle);
1:84a8d37: 				
1:84a8d37: 				Class<?> pluginClazz = pluginLoader.loadClass("org.apache.aries.tx.control.jpa.xa.eclipse.impl.EclipseTxControlPlatform");
1:84a8d37: 				
1:84a8d37: 				pluginClazz.getMethod("setTransactionControl", ThreadLocal.class)
1:84a8d37: 						.invoke(null, t);
1:84a8d37: 				
1:84a8d37: 				props.put("eclipselink.target-server", pluginClazz.getName());
1:84a8d37: 				props.put("org.apache.aries.jpa.eclipselink.plugin.types", pluginClazz);
1:84a8d37: 				// This is needed to ensure that sequences can be generated in nested
1:84a8d37: 				// transactions without blowing up.
1:84a8d37: 				if(!props.containsKey("eclipselink.jdbc.sequence-connection-pool")) {
1:84a8d37: 					props.put("eclipselink.jdbc.sequence-connection-pool", "true");
1:84a8d37: 				}
1:84a8d37: 				
1:84a8d37: 			} else {
1:84a8d37: 				// TODO log a warning and give up
1:84a8d37: 				return;
1:84a8d37: 			} 
1:84a8d37: 		} catch (Exception e) {
1:84a8d37: 			//TODO log a warning and give up
1:84a8d37: 			e.printStackTrace();
1:84a8d37: 		}
1:84a8d37: 	}
1:84a8d37: 
1:84a8d37: 	private ClassLoader getPluginLoader(Bundle providerBundle, Bundle txControlProviderBundle) {
1:84a8d37: 		return new ClassLoader() {
1:84a8d37: 
1:84a8d37: 			ConcurrentMap<String, Class<?>> loaded = new ConcurrentHashMap<>();
1:84a8d37: 			
1:84a8d37: 			@Override
1:84a8d37: 			public Class<?> loadClass(String name) throws ClassNotFoundException {
1:84a8d37: 				if(name.startsWith("org.apache.aries.tx.control.jpa.xa.hibernate") ||
1:84a8d37: 					name.startsWith("org.apache.aries.tx.control.jpa.xa.openjpa") ||
1:84a8d37: 					name.startsWith("org.apache.aries.tx.control.jpa.xa.eclipse")) {
1:84a8d37: 					
1:84a8d37: 					Class<?> c = loaded.get(name);
1:84a8d37: 					
1:84a8d37: 					if(c != null) {
1:84a8d37: 						return c;
1:84a8d37: 					}
1:84a8d37: 					
1:84a8d37: 					String resource = name.replace('.', '/') + ".class";
1:84a8d37: 					
1:84a8d37: 					try (InputStream is = txControlProviderBundle.getResource(resource).openStream()) {
1:84a8d37: 						ByteArrayOutputStream baos = new ByteArrayOutputStream(4096);
1:84a8d37: 						byte[] b = new byte[4096];
1:84a8d37: 						int read;
1:84a8d37: 						while ((read = is.read(b)) != -1) {
1:84a8d37: 							baos.write(b, 0, read);
1:84a8d37: 						}
1:84a8d37: 						byte[] clazzBytes = baos.toByteArray();
1:84a8d37: 						c = defineClass(name, clazzBytes, 0, clazzBytes.length, 
1:84a8d37: 								XAJPAEMFLocator.class.getProtectionDomain());
1:84a8d37: 						loaded.putIfAbsent(name, c);
1:84a8d37: 						return c;
1:84a8d37: 					} catch (IOException e) {
1:84a8d37: 						throw new ClassNotFoundException("Unable to load class " + name, e);
1:84a8d37: 					}
1:84a8d37: 				}
1:84a8d37: 				
1:84a8d37: 				if(name.startsWith("org.apache.aries.tx.control") ||
1:84a8d37: 						name.startsWith("org.osgi.service.transaction.control")) {
1:84a8d37: 					return txControlProviderBundle.loadClass(name);
1:84a8d37: 				}
1:84a8d37: 				return providerBundle.loadClass(name);
1:84a8d37: 			}
1:84a8d37: 		};
1:84a8d37: 	}
1:84a8d37: 
1:84a8d37: 	private ServiceReference<PersistenceProvider> getPersistenceProvider(String provider, BundleContext context) {
1:84a8d37: 		if(provider == null) {
1:84a8d37: 			return null;
1:84a8d37: 		}
1:84a8d37: 		try {
1:84a8d37: 			return context.getServiceReferences(PersistenceProvider.class, 
1:84a8d37: 							"(javax.persistence.provider=" + provider + ")").stream()
1:84a8d37: 								.findFirst()
1:84a8d37: 								.orElse(null);
1:84a8d37: 		} catch (InvalidSyntaxException e) {
1:84a8d37: 			//TODO log a warning
1:84a8d37: 			return null;
1:84a8d37: 		} 
1:84a8d37: 	}
1:84a8d37: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:84a8d37
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.jpa.xa.impl;
1: 
1: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_PROVIDER;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
1: 
1: import javax.persistence.spi.PersistenceProvider;
1: 
1: import org.apache.aries.tx.control.jpa.common.impl.AbstractJPAEntityManagerProvider;
1: import org.apache.aries.tx.control.jpa.common.impl.AbstractManagedJPAEMFLocator;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.wiring.BundleWire;
1: import org.osgi.framework.wiring.BundleWiring;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: import org.osgi.service.transaction.control.TransactionControl;
1: 
1: public class XAJPAEMFLocator extends AbstractManagedJPAEMFLocator {
1: 
1: 	public XAJPAEMFLocator(BundleContext context, String pid, Map<String, Object> jpaProperties,
1: 			Map<String, Object> providerProperties, Runnable onClose) throws InvalidSyntaxException, ConfigurationException {
1: 		super(context, pid, jpaProperties, providerProperties, onClose);
1: 	}
1: 
1: 	@Override
1: 	protected AbstractJPAEntityManagerProvider getResourceProvider(BundleContext context,
1: 			EntityManagerFactoryBuilder service, ServiceReference<EntityManagerFactoryBuilder> reference,
1: 			Map<String, Object> jpaProperties, Map<String, Object> providerProperties, Runnable onClose) {
1: 		return new DelayedJPAEntityManagerProvider(t -> {
1: 			
1: 			Map<String, Object> jpaProps = new HashMap<String, Object>(jpaProperties);
1: 			Map<String, Object> providerProps = new HashMap<String, Object>(providerProperties);
1: 			
1: 			setupTransactionManager(context, jpaProps, providerProps, t, reference);
1: 			
1: 			return new JPAEntityManagerProviderFactoryImpl().getProviderFor(service,
1: 					jpaProps, providerProps, t, onClose);
1: 		});
1: 	}
1: 
1: 	private void setupTransactionManager(BundleContext context, Map<String, Object> props, 
1: 			Map<String, Object> providerProps, ThreadLocal<TransactionControl> t, ServiceReference<EntityManagerFactoryBuilder> reference) {
1: 		String provider = (String) reference.getProperty(JPA_UNIT_PROVIDER);
1: 		
1: 		ServiceReference<PersistenceProvider> providerRef = getPersistenceProvider(provider, context);
1: 		
1: 		if(providerRef == null) {
1: 			// TODO log a warning and give up
1: 			return;
1: 		}
1: 
1: 		Bundle providerBundle = providerRef.getBundle();
1: 		Bundle txControlProviderBundle = context.getBundle();
1: 		
1: 		try {
1: 			if("org.hibernate.jpa.HibernatePersistenceProvider".equals(provider)) {
1: 				
1: 				try{
1: 					providerBundle.loadClass("org.hibernate.resource.transaction.TransactionCoordinatorBuilder");
1: 				} catch (Exception e) {
1: 					BundleWiring wiring = providerBundle.adapt(BundleWiring.class);
1: 					providerBundle = wiring.getRequiredWires("osgi.wiring.package").stream()
1: 								.filter(bw -> "org.hibernate".equals(bw.getCapability().getAttributes().get("osgi.wiring.package")))
1: 								.map(BundleWire::getProviderWiring)
1: 								.map(BundleWiring::getBundle)
1: 								.findFirst().get();
1: 				}
1: 				
1: 				ClassLoader pluginLoader = getPluginLoader(providerBundle, txControlProviderBundle);
1: 				
1: 				Class<?> pluginClazz = pluginLoader.loadClass("org.apache.aries.tx.control.jpa.xa.hibernate.impl.HibernateTxControlPlatform");
1: 				Object plugin = pluginClazz.getConstructor(ThreadLocal.class)
1: 					.newInstance(t);
1: 				
1: 				props.put("hibernate.transaction.coordinator_class", plugin);
1: 				
1: 			} else if("org.apache.openjpa.persistence.PersistenceProviderImpl".equals(provider)) {
1: 					
1: 				ClassLoader pluginLoader = getPluginLoader(providerBundle, txControlProviderBundle);
1: 					
1: 				Class<?> pluginClazz = pluginLoader.loadClass("org.apache.aries.tx.control.jpa.xa.openjpa.impl.OpenJPATxControlPlatform");
1: 				Object plugin = pluginClazz.getConstructor(ThreadLocal.class)
1: 						.newInstance(t);
1: 					
1: 				props.put("openjpa.ManagedRuntime", plugin);
1: 					
1: 			} else if("org.eclipse.persistence.jpa.PersistenceProvider".equals(provider)) {
1: 				
1: 				ClassLoader pluginLoader = getPluginLoader(providerBundle, txControlProviderBundle);
1: 				
1: 				Class<?> pluginClazz = pluginLoader.loadClass("org.apache.aries.tx.control.jpa.xa.eclipse.impl.EclipseTxControlPlatform");
1: 				
1: 				pluginClazz.getMethod("setTransactionControl", ThreadLocal.class)
1: 						.invoke(null, t);
1: 				
1: 				props.put("eclipselink.target-server", pluginClazz.getName());
1: 				props.put("org.apache.aries.jpa.eclipselink.plugin.types", pluginClazz);
1: 				// This is needed to ensure that sequences can be generated in nested
1: 				// transactions without blowing up.
1: 				if(!props.containsKey("eclipselink.jdbc.sequence-connection-pool")) {
1: 					props.put("eclipselink.jdbc.sequence-connection-pool", "true");
1: 				}
1: 				
1: 			} else {
1: 				// TODO log a warning and give up
1: 				return;
1: 			} 
1: 		} catch (Exception e) {
1: 			//TODO log a warning and give up
1: 			e.printStackTrace();
1: 		}
1: 	}
1: 
1: 	private ClassLoader getPluginLoader(Bundle providerBundle, Bundle txControlProviderBundle) {
1: 		return new ClassLoader() {
1: 
1: 			ConcurrentMap<String, Class<?>> loaded = new ConcurrentHashMap<>();
1: 			
1: 			@Override
1: 			public Class<?> loadClass(String name) throws ClassNotFoundException {
1: 				if(name.startsWith("org.apache.aries.tx.control.jpa.xa.hibernate") ||
1: 					name.startsWith("org.apache.aries.tx.control.jpa.xa.openjpa") ||
1: 					name.startsWith("org.apache.aries.tx.control.jpa.xa.eclipse")) {
1: 					
1: 					Class<?> c = loaded.get(name);
1: 					
1: 					if(c != null) {
1: 						return c;
1: 					}
1: 					
1: 					String resource = name.replace('.', '/') + ".class";
1: 					
1: 					try (InputStream is = txControlProviderBundle.getResource(resource).openStream()) {
1: 						ByteArrayOutputStream baos = new ByteArrayOutputStream(4096);
1: 						byte[] b = new byte[4096];
1: 						int read;
1: 						while ((read = is.read(b)) != -1) {
1: 							baos.write(b, 0, read);
1: 						}
1: 						byte[] clazzBytes = baos.toByteArray();
1: 						c = defineClass(name, clazzBytes, 0, clazzBytes.length, 
1: 								XAJPAEMFLocator.class.getProtectionDomain());
1: 						loaded.putIfAbsent(name, c);
1: 						return c;
1: 					} catch (IOException e) {
1: 						throw new ClassNotFoundException("Unable to load class " + name, e);
1: 					}
1: 				}
1: 				
1: 				if(name.startsWith("org.apache.aries.tx.control") ||
1: 						name.startsWith("org.osgi.service.transaction.control")) {
1: 					return txControlProviderBundle.loadClass(name);
1: 				}
1: 				return providerBundle.loadClass(name);
1: 			}
1: 		};
1: 	}
1: 
1: 	private ServiceReference<PersistenceProvider> getPersistenceProvider(String provider, BundleContext context) {
1: 		if(provider == null) {
1: 			return null;
1: 		}
1: 		try {
1: 			return context.getServiceReferences(PersistenceProvider.class, 
1: 							"(javax.persistence.provider=" + provider + ")").stream()
1: 								.findFirst()
1: 								.orElse(null);
1: 		} catch (InvalidSyntaxException e) {
1: 			//TODO log a warning
1: 			return null;
1: 		} 
1: 	}
1: }
============================================================================