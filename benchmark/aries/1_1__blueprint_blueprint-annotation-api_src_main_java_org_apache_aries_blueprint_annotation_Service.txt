1:dd9325e: /**
1:dd9325e:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:dd9325e:  *  contributor license agreements.  See the NOTICE file distributed with
1:dd9325e:  *  this work for additional information regarding copyright ownership.
1:dd9325e:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:dd9325e:  *  (the "License"); you may not use this file except in compliance with
1:dd9325e:  *  the License.  You may obtain a copy of the License at
1:dd9325e:  *
1:dd9325e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dd9325e:  *
1:dd9325e:  *  Unless required by applicable law or agreed to in writing, software
1:dd9325e:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:dd9325e:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dd9325e:  *  See the License for the specific language governing permissions and
1:dd9325e:  *  limitations under the License.
1:dd9325e:  */
1:dd9325e: package org.apache.aries.blueprint.annotation;
1:dd9325e: 
1:dd9325e: import java.lang.annotation.ElementType;
1:dd9325e: import java.lang.annotation.Retention;
1:dd9325e: import java.lang.annotation.RetentionPolicy;
1:dd9325e: import java.lang.annotation.Target;
1:dd9325e: 
1:dd9325e: @Target(ElementType.TYPE)
1:dd9325e: @Retention(RetentionPolicy.RUNTIME)
1:dd9325e: public @interface Service {
1:dd9325e:     
1:dd9325e:     /**
1:dd9325e:      * the registration listeners to be notified when the service is
1:dd9325e:      * registered and unregistered with the framework.
1:dd9325e:      */
1:15ff7ec:     RegistrationListener[] registerationListeners() default {};
1:dd9325e:     
1:dd9325e:     /**
1:dd9325e:      *  the ranking value to use when advertising the service.  If the
1:dd9325e:      *  ranking value is zero, the service must be registered without a
1:dd9325e:      *  <code>service.ranking</code> service property. 
1:dd9325e:      */
1:dd9325e:     int ranking() default 0;
1:dd9325e:     
1:dd9325e:     /**
1:dd9325e:      *  the auto-export mode for the service.  
1:dd9325e:      *  possible values are disabled, interfaces, class_hierarchy, all_classes
1:dd9325e:      */
1:dd9325e:     String autoExport() default "";
1:dd9325e:     
1:dd9325e:     /**
1:dd9325e:      *  the interfaces that the service should be advertised as supporting.
1:dd9325e:      */
1:dd9325e:     Class<?>[] interfaces() default {};
1:dd9325e:     
1:dd9325e:     /**
1:dd9325e:      * the user declared properties to be advertised with the service.
1:dd9325e:      */
1:dd9325e:     ServiceProperty[] serviceProperties() default {};
1:dd9325e: }
============================================================================
author:Lin Sun
-------------------------------------------------------------------------------
commit:15ff7ec
/////////////////////////////////////////////////////////////////////////
1:     RegistrationListener[] registerationListeners() default {};
commit:dd9325e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.annotation;
1: 
1: import java.lang.annotation.ElementType;
1: import java.lang.annotation.Retention;
1: import java.lang.annotation.RetentionPolicy;
1: import java.lang.annotation.Target;
1: 
1: @Target(ElementType.TYPE)
1: @Retention(RetentionPolicy.RUNTIME)
1: public @interface Service {
1:     
1:     /**
1:      * the registration listeners to be notified when the service is
1:      * registered and unregistered with the framework.
1:      */
0:     RegistrationListener[] registerationListener();
1:     
1:     /**
1:      *  the ranking value to use when advertising the service.  If the
1:      *  ranking value is zero, the service must be registered without a
1:      *  <code>service.ranking</code> service property. 
1:      */
1:     int ranking() default 0;
1:     
1:     /**
1:      *  the auto-export mode for the service.  
1:      *  possible values are disabled, interfaces, class_hierarchy, all_classes
1:      */
1:     String autoExport() default "";
1:     
1:     /**
1:      *  the interfaces that the service should be advertised as supporting.
1:      */
1:     Class<?>[] interfaces() default {};
1:     
1:     /**
1:      * the user declared properties to be advertised with the service.
1:      */
1:     ServiceProperty[] serviceProperties() default {};
1: }
============================================================================