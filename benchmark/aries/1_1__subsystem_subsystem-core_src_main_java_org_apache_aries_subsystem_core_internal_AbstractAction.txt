1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:777b216: package org.apache.aries.subsystem.core.internal;
3:777b216: 
1:777b216: import java.security.PrivilegedAction;
1:777b216: 
1:171067b: import org.osgi.service.subsystem.Subsystem.State;
1:777b216: import org.osgi.service.subsystem.SubsystemException;
1:0b3775c: import org.slf4j.Logger;
1:0b3775c: import org.slf4j.LoggerFactory;
1:171067b: 
1:777b216: public abstract class AbstractAction implements PrivilegedAction<Object> {
1:0b3775c: 	private static final Logger logger = LoggerFactory.getLogger(AbstractAction.class);
1:0b3775c: 	
1:777b216: 	protected final boolean disableRootCheck;
1:5bd3bf6: 	protected final BasicSubsystem requestor;
1:5bd3bf6: 	protected final BasicSubsystem target;
1:777b216: 	
1:5bd3bf6: 	public AbstractAction(BasicSubsystem requestor, BasicSubsystem target, boolean disableRootCheck) {
1:391a1aa: 		this.requestor = requestor;
1:391a1aa: 		this.target = target;
1:777b216: 		this.disableRootCheck = disableRootCheck;
3:777b216: 	}
1:777b216: 	
1:777b216: 	protected void checkRoot() {
1:391a1aa: 		if (!disableRootCheck && target.isRoot())
1:777b216: 			throw new SubsystemException("This operation may not be performed on the root subsystem");
1:777b216: 	}
1:777b216: 	
1:2b13b05: 	protected void checkValid() {
1:5bd3bf6: 		BasicSubsystem s = (BasicSubsystem)Activator.getInstance().getSubsystemServiceRegistrar().getSubsystemService(target);
1:391a1aa: 		if (s != target)
1:2b13b05: 			throw new IllegalStateException("Detected stale subsystem instance: " + s);
1:2b13b05: 	}
1:2b13b05: 	
1:171067b: 	protected void waitForStateChange(State fromState) {
1:171067b: 		long then = System.currentTimeMillis() + 60000;
1:391a1aa: 		synchronized (target) {
1:0b3775c: 			if (logger.isDebugEnabled())
1:0b3775c: 				logger.debug("Request to wait for state change of subsystem {} from state {}", target.getSymbolicName(), target.getState());
1:171067b: 			while (target.getState().equals(fromState)) {
1:0b3775c: 				if (logger.isDebugEnabled())
1:0b3775c: 					logger.debug("{} equals {}", target.getState(), fromState);
1:171067b: 				// State change has not occurred.
1:171067b: 				long now = System.currentTimeMillis();
1:171067b: 				if (then <= now)
1:171067b: 					// Wait time has expired.
1:171067b: 					throw new SubsystemException("Operation timed out while waiting for the subsystem to change state from " + fromState);
1:171067b: 				try {
1:0b3775c: 					if (logger.isDebugEnabled())
1:0b3775c: 						logger.debug("Waiting for {} ms", then - now);
1:171067b: 					// Wait will never be called with zero or a negative
1:171067b: 					// argument due to previous check.
1:171067b: 					target.wait(then - now);
1:171067b: 				}
1:171067b: 				catch (InterruptedException e) {
1:ea8116d: 					// Reset the interrupted flag.
1:ea8116d: 					Thread.currentThread().interrupt();
1:171067b: 					throw new SubsystemException(e);
1:171067b: 				}
1:777b216: 			}
1:0b3775c: 			if (logger.isDebugEnabled())
1:0b3775c: 				logger.debug("Done waiting for subsystem {} in state {} to change from state {}", new Object[]{target.getSymbolicName(), target.getState(), fromState});
1:777b216: 		}
1:777b216: 	}
1:777b216: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:0b3775c
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 	private static final Logger logger = LoggerFactory.getLogger(AbstractAction.class);
1: 	
/////////////////////////////////////////////////////////////////////////
1: 			if (logger.isDebugEnabled())
1: 				logger.debug("Request to wait for state change of subsystem {} from state {}", target.getSymbolicName(), target.getState());
1: 				if (logger.isDebugEnabled())
1: 					logger.debug("{} equals {}", target.getState(), fromState);
1: 					if (logger.isDebugEnabled())
1: 						logger.debug("Waiting for {} ms", then - now);
/////////////////////////////////////////////////////////////////////////
1: 			if (logger.isDebugEnabled())
1: 				logger.debug("Done waiting for subsystem {} in state {} to change from state {}", new Object[]{target.getSymbolicName(), target.getState(), fromState});
commit:67037b3
/////////////////////////////////////////////////////////////////////////
commit:ea8116d
/////////////////////////////////////////////////////////////////////////
1: 					// Reset the interrupted flag.
1: 					Thread.currentThread().interrupt();
commit:171067b
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.subsystem.Subsystem.State;
0: import com.sun.org.apache.bcel.internal.generic.GETSTATIC;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	protected void waitForStateChange(State fromState) {
1: 		long then = System.currentTimeMillis() + 60000;
1: 			while (target.getState().equals(fromState)) {
1: 				// State change has not occurred.
1: 				long now = System.currentTimeMillis();
1: 				if (then <= now)
1: 					// Wait time has expired.
1: 					throw new SubsystemException("Operation timed out while waiting for the subsystem to change state from " + fromState);
1: 				try {
1: 					// Wait will never be called with zero or a negative
1: 					// argument due to previous check.
1: 					target.wait(then - now);
1: 				}
1: 				catch (InterruptedException e) {
1: 					throw new SubsystemException(e);
1: 				}
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	protected final BasicSubsystem requestor;
1: 	protected final BasicSubsystem target;
1: 	public AbstractAction(BasicSubsystem requestor, BasicSubsystem target, boolean disableRootCheck) {
/////////////////////////////////////////////////////////////////////////
1: 		BasicSubsystem s = (BasicSubsystem)Activator.getInstance().getSubsystemServiceRegistrar().getSubsystemService(target);
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
0: 	protected final AriesSubsystem requestor;
0: 	protected final AriesSubsystem target;
0: 	public AbstractAction(AriesSubsystem requestor, AriesSubsystem target, boolean disableRootCheck) {
1: 		this.requestor = requestor;
1: 		this.target = target;
1: 		if (!disableRootCheck && target.isRoot())
0: 		AriesSubsystem s = (AriesSubsystem)Activator.getInstance().getSubsystemServiceRegistrar().getSubsystemService(target);
1: 		if (s != target)
1: 		synchronized (target) {
0: 				target.wait();
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:2b13b05
/////////////////////////////////////////////////////////////////////////
0: 	protected final boolean explicit;
0: 	public AbstractAction(AriesSubsystem subsystem, boolean disableRootCheck, boolean explicit) {
0: 		this.explicit = explicit;
/////////////////////////////////////////////////////////////////////////
1: 	protected void checkValid() {
0: 		AriesSubsystem s = (AriesSubsystem)Activator.getInstance().getSubsystemServiceRegistrar().getSubsystemService(subsystem);
0: 		if (s != subsystem)
1: 			throw new IllegalStateException("Detected stale subsystem instance: " + s);
1: 	}
1: 	
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.security.PrivilegedAction;
1: 
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public abstract class AbstractAction implements PrivilegedAction<Object> {
1: 	protected final boolean disableRootCheck;
0: 	protected final AriesSubsystem subsystem;
1: 	
0: 	public AbstractAction(AriesSubsystem subsystem) {
0: 		this(subsystem, false);
1: 	}
1: 	
0: 	public AbstractAction(AriesSubsystem subsystem, boolean disableRootCheck) {
0: 		this.subsystem = subsystem;
1: 		this.disableRootCheck = disableRootCheck;
1: 	}
1: 	
1: 	protected void checkRoot() {
0: 		if (!disableRootCheck && subsystem.isRoot())
1: 			throw new SubsystemException("This operation may not be performed on the root subsystem");
1: 	}
1: 	
0: 	protected void waitForStateChange() {
0: 		synchronized (subsystem) {
0: 			try {
0: 				subsystem.wait();
1: 			}
0: 			catch (InterruptedException e) {
0: 				throw new SubsystemException(e);
1: 			}
1: 		}
1: 	}
1: }
============================================================================