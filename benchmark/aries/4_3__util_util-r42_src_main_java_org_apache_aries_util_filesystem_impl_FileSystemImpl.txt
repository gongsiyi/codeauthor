1:754e2c3: /*
1:754e2c3:  * Licensed to the Apache Software Foundation (ASF) under one
1:754e2c3:  * or more contributor license agreements.  See the NOTICE file
1:754e2c3:  * distributed with this work for additional information
1:754e2c3:  * regarding copyright ownership.  The ASF licenses this file
1:754e2c3:  * to you under the Apache License, Version 2.0 (the
1:754e2c3:  * "License"); you may not use this file except in compliance
1:754e2c3:  * with the License.  You may obtain a copy of the License at
1:754e2c3:  *
1:754e2c3:  *   http://www.apache.org/licenses/LICENSE-2.0
1:754e2c3:  *
1:754e2c3:  * Unless required by applicable law or agreed to in writing,
1:754e2c3:  * software distributed under the License is distributed on an
1:754e2c3:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:754e2c3:  * KIND, either express or implied.  See the License for the
1:754e2c3:  * specific language governing permissions and limitations
1:754e2c3:  * under the License.
1:754e2c3:  */
1:910fec0: package org.apache.aries.util.filesystem.impl;
2:f2492f7: 
1:e62fca9: import java.io.File;
1:e62fca9: import java.io.FileNotFoundException;
1:754e2c3: import java.io.FileOutputStream;
1:e62fca9: import java.io.IOException;
1:754e2c3: import java.io.InputStream;
1:f2492f7: import java.util.zip.ZipFile;
1:f2492f7: import java.util.zip.ZipInputStream;
1:754e2c3: 
1:8ab18a7: import org.apache.aries.util.IORuntimeException;
1:754e2c3: import org.apache.aries.util.filesystem.ICloseableDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IFile;
1:c6cb34d: import org.apache.aries.util.io.IOUtils;
1:754e2c3: 
1:e62fca9: public class FileSystemImpl {
1:f2492f7: 	/**
1:f2492f7: 	 * This method gets the IDirectory that represents the root of a virtual file
1:f2492f7: 	 * system. The provided file can either identify a directory, or a zip file.
1:8ab18a7: 	 *
1:f2492f7: 	 * @param fs the zip file.
1:f2492f7: 	 * @return   the root of the virtual FS.
1:f2492f7: 	 */
1:f2492f7: 	public static IDirectory getFSRoot(File fs, IDirectory parent)
1:f2492f7: 	{
1:f2492f7: 		IDirectory dir = null;
1:f2492f7: 
1:f2492f7: 		if (fs.exists()) {
1:f2492f7: 			if (fs.isDirectory()) {
1:f2492f7: 				dir = new DirectoryImpl(fs, fs);
1:f2492f7: 			} else if (fs.isFile() && isValidZip(fs)) {
1:f2492f7: 				try {
1:72345ab: 					dir = new ZipDirectory(fs, parent);
1:f2492f7: 				} catch (IOException e) {
1:8ab18a7: 					throw new IORuntimeException("IOException in IDirectory.getFSRoot", e);
1:f2492f7: 				}
1:f2492f7: 			}
1:f2492f7: 		}
1:f2492f7: 		else {
1:8ab18a7: 			throw new IORuntimeException("File not found in IDirectory.getFSRoot", new FileNotFoundException(fs.getPath()));
1:f2492f7: 		}
1:f2492f7: 		return dir;
1:f2492f7: 	}
1:8ab18a7: 
1:f2492f7: 	/**
1:f2492f7: 	 * Check whether a file is actually a valid zip
1:f2492f7: 	 * @param zip
1:f2492f7: 	 * @return
1:f2492f7: 	 */
1:f2492f7: 	public static boolean isValidZip(File zip) {
1:f2492f7: 		try {
1:f2492f7: 			ZipFile zf = new ZipFile(zip);
1:f2492f7: 			zf.close();
1:f2492f7: 			return true;
1:f2492f7: 		} catch (IOException e) {
1:8ab18a7: 			throw new IORuntimeException("Not a valid zip: "+zip, e);
1:f2492f7: 		}
1:f2492f7: 	}
1:8ab18a7: 
1:f2492f7: 	/**
1:f2492f7: 	 * Check whether a file is actually a valid zip
1:f2492f7: 	 * @param zip
1:f2492f7: 	 * @return
1:f2492f7: 	 */
1:f2492f7: 	public static boolean isValidZip(IFile zip) {
1:f2492f7: 		ZipInputStream zis = null;
1:f2492f7: 		try {
1:f2492f7: 			// just opening the stream ain't enough, we have to check the first entry
1:f2492f7: 			zis = new ZipInputStream(zip.open());
1:f2492f7: 			return zis.getNextEntry() != null;
1:f2492f7: 		} catch (IOException e) {
1:8ab18a7: 			throw new IORuntimeException("Not a valid zip: "+zip, e);
1:f2492f7: 		} finally {
1:f2492f7: 			IOUtils.close(zis);
1:f2492f7: 		}
1:f2492f7: 	}
1:754e2c3: 
1:754e2c3:   public static ICloseableDirectory getFSRoot(InputStream is) {
1:754e2c3:     File tempFile = null;
1:754e2c3:     try {
1:754e2c3:       tempFile = File.createTempFile("inputStreamExtract", ".zip");
1:754e2c3:     } catch (IOException e1) {
1:8ab18a7:       throw new IORuntimeException("IOException in IDirectory.getFSRoot", e1);
1:754e2c3:     }
1:8ab18a7:     FileOutputStream fos = null;
1:754e2c3:     try {
1:754e2c3:       fos = new FileOutputStream(tempFile);
1:8ab18a7:       IOUtils.copy(is, fos);
1:754e2c3:     } catch (IOException e) {
2:754e2c3:       return null;
1:754e2c3:     } finally {
1:754e2c3:       IOUtils.close(fos);
1:754e2c3:     }
1:8ab18a7: 
1:754e2c3:     IDirectory dir = getFSRoot(tempFile, null);
1:8ab18a7: 
1:754e2c3:     if(dir == null)
1:754e2c3:       return null;
1:754e2c3:     else
1:754e2c3:       return new InputStreamClosableDirectory(dir, tempFile);
1:754e2c3: 
1:754e2c3:   }
6:e62fca9: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:8ab18a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.IORuntimeException;
1: 	 *
/////////////////////////////////////////////////////////////////////////
1: 					throw new IORuntimeException("IOException in IDirectory.getFSRoot", e);
1: 			throw new IORuntimeException("File not found in IDirectory.getFSRoot", new FileNotFoundException(fs.getPath()));
1: 
/////////////////////////////////////////////////////////////////////////
1: 			throw new IORuntimeException("Not a valid zip: "+zip, e);
1: 
/////////////////////////////////////////////////////////////////////////
1: 			throw new IORuntimeException("Not a valid zip: "+zip, e);
/////////////////////////////////////////////////////////////////////////
1:       throw new IORuntimeException("IOException in IDirectory.getFSRoot", e1);
1:     FileOutputStream fos = null;
1:       IOUtils.copy(is, fos);
1: 
1: 
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:754e2c3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: import java.io.FileOutputStream;
1: import java.io.InputStream;
1: import org.apache.aries.util.filesystem.ICloseableDirectory;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public static ICloseableDirectory getFSRoot(InputStream is) {
1:     File tempFile = null;
1:     try {
1:       tempFile = File.createTempFile("inputStreamExtract", ".zip");
1:     } catch (IOException e1) {
0:       _logger.error ("IOException in IDirectory.getFSRoot", e1);
1:       return null;
1:     }
0:     FileOutputStream fos = null; 
1:     try {
1:       fos = new FileOutputStream(tempFile);
0:       IOUtils.copy(is, fos);  
1:     } catch (IOException e) {
1:       return null;
1:     } finally {
1:       IOUtils.close(fos);
1:     }
1:     
1:     IDirectory dir = getFSRoot(tempFile, null);
1:     
1:     if(dir == null)
1:       return null;
1:     else
1:       return new InputStreamClosableDirectory(dir, tempFile);
1: 
1:   }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.io.IOUtils;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
0: import org.apache.aries.util.filesystem.IOUtils;
0: 	private static final Logger _logger = LoggerFactory.getLogger(FileSystemImpl.class.getName());
commit:72345ab
/////////////////////////////////////////////////////////////////////////
1: 					dir = new ZipDirectory(fs, parent);
commit:f2492f7
/////////////////////////////////////////////////////////////////////////
1: import java.util.zip.ZipFile;
1: import java.util.zip.ZipInputStream;
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.utils.filesystem.IOUtils;
0: 	private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.utils");
1: 	/**
1: 	 * This method gets the IDirectory that represents the root of a virtual file
1: 	 * system. The provided file can either identify a directory, or a zip file.
0: 	 * 
1: 	 * @param fs the zip file.
1: 	 * @return   the root of the virtual FS.
1: 	 */
1: 	public static IDirectory getFSRoot(File fs, IDirectory parent)
1: 	{
1: 		IDirectory dir = null;
1: 
1: 		if (fs.exists()) {
1: 			if (fs.isDirectory()) {
1: 				dir = new DirectoryImpl(fs, fs);
1: 			} else if (fs.isFile() && isValidZip(fs)) {
1: 				try {
0: 					dir = new ZipDirectory(fs, fs, parent);
1: 				} catch (IOException e) {
0: 					_logger.error ("IOException in IDirectory.getFSRoot", e);
1: 				}
1: 			}
1: 		}
1: 		else {
0: 			// since this method does not throw an exception but just returns null, make sure we do not lose the error
0: 			_logger.error("File not found in IDirectory.getFSRoot", new FileNotFoundException(fs.getPath()));
1: 		}
1: 		return dir;
1: 	}
1: 	
1: 	/**
1: 	 * Check whether a file is actually a valid zip
1: 	 * @param zip
1: 	 * @return
1: 	 */
1: 	public static boolean isValidZip(File zip) {
1: 		try {
1: 			ZipFile zf = new ZipFile(zip);
1: 			zf.close();
1: 			return true;
1: 		} catch (IOException e) {
0: 			_logger.debug("Not a valid zip: "+zip);
0: 			return false;
1: 		}
1: 	}
1: 	
1: 	/**
1: 	 * Check whether a file is actually a valid zip
1: 	 * @param zip
1: 	 * @return
1: 	 */
1: 	public static boolean isValidZip(IFile zip) {
1: 		ZipInputStream zis = null;
1: 		try {
1: 			// just opening the stream ain't enough, we have to check the first entry
1: 			zis = new ZipInputStream(zip.open());
1: 			return zis.getNextEntry() != null;
1: 		} catch (IOException e) {
0: 			_logger.debug("Not a valid zip: "+zip);
0: 			return false;
1: 		} finally {
1: 			IOUtils.close(zis);
1: 		}
1: 	}
commit:e62fca9
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.application.utils.filesystem.impl;
0: 
1: import java.io.File;
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
0: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
1: public class FileSystemImpl {
0: 
0: 	  private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.utils");
0: 
0: 	  /**
0: 	   * This method gets the IDirectory that represents the root of a virtual file
0: 	   * system. The provided file can either identify a directory, or a zip file.
0: 	   * 
0: 	   * @param fs the zip file.
0: 	   * @return   the root of the virtual FS.
0: 	   */
0: 	  public static IDirectory getFSRoot(File fs, IDirectory parent)
0: 	  {
0: 	    IDirectory dir = null;
0: 	    
0: 	    if (fs.exists()) {
0: 	      if (fs.isDirectory()) {
0: 	        dir = new DirectoryImpl(fs, fs);
0: 	      } else if (fs.isFile()) {
0: 	        try {
0: 	          dir = new ZipDirectory(fs, fs, parent);
0: 	        } catch (IOException e) {
0: 	          _logger.error ("IOException in IDirectory.getFSRoot", e);
1: 	        }
1: 	      }
1: 	    }
0: 	    else {
0: 	      // since this method does not throw an exception but just returns null, make sure we do not lose the error
0: 	      _logger.error("File not found in IDirectory.getFSRoot", new FileNotFoundException(fs.getPath()));
1: 	    }
0: 	    return dir;
1: 	  }
1: }
============================================================================