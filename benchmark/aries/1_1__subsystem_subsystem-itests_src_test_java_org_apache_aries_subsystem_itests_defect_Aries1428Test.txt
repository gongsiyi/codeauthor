1:cf8e214: /*
1:cf8e214:  * Licensed to the Apache Software Foundation (ASF) under one
1:cf8e214:  * or more contributor license agreements.  See the NOTICE file
1:cf8e214:  * distributed with this work for additional information
1:cf8e214:  * regarding copyright ownership.  The ASF licenses this file
1:cf8e214:  * to you under the Apache License, Version 2.0 (the
1:cf8e214:  * "License"); you may not use this file except in compliance
1:cf8e214:  * with the License.  You may obtain a copy of the License at
1:cf8e214:  *
1:cf8e214:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cf8e214:  *
1:cf8e214:  * Unless required by applicable law or agreed to in writing,
1:cf8e214:  * software distributed under the License is distributed on an
1:cf8e214:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cf8e214:  * KIND, either express or implied.  See the License for the
1:cf8e214:  * specific language governing permissions and limitations
1:cf8e214:  * under the License.
1:cf8e214:  */
1:cf8e214: package org.apache.aries.subsystem.itests.defect;
1:cf8e214: 
1:cf8e214: import java.io.File;
1:cf8e214: import java.io.FileInputStream;
1:cf8e214: import java.io.IOException;
1:cf8e214: 
1:cf8e214: import org.apache.aries.subsystem.itests.SubsystemTest;
1:cf8e214: import org.junit.Before;
1:cf8e214: import org.junit.Test;
1:cf8e214: import org.osgi.framework.Bundle;
1:cf8e214: import org.osgi.framework.ServiceEvent;
1:cf8e214: import org.osgi.framework.ServiceListener;
1:cf8e214: 
1:cf8e214: /*
1:cf8e214:  * https://issues.apache.org/jira/browse/ARIES-1428
1:cf8e214:  * 
1:cf8e214:  * org.osgi.framework.BundleException: Could not resolve module: <module> Bundle 
1:cf8e214:  * was filtered by a resolver hook.
1:cf8e214:  */
1:cf8e214: public class Aries1428Test extends SubsystemTest {
1:cf8e214: 	/*
1:cf8e214: 	 * Bundle-SymbolicName: bundle.a.jar
1:cf8e214: 	 */
1:cf8e214: 	private static final String BUNDLE_A = "bundle.a.jar";
1:cf8e214: 	
1:cf8e214: 	private void createBundleA() throws IOException {
1:cf8e214: 		createBundle(
1:cf8e214: 				name(BUNDLE_A));
1:cf8e214: 	}
1:cf8e214: 	
1:cf8e214: 	private static boolean createdTestFiles;
1:cf8e214: 	
1:cf8e214: 	@Before
1:cf8e214: 	public void createTestFiles() throws Exception {
1:cf8e214: 		if (createdTestFiles)
1:cf8e214: 			return;
1:cf8e214: 		createBundleA();
1:cf8e214: 		createdTestFiles = true;
1:cf8e214: 	}
1:cf8e214:     
1:cf8e214:     @Test
1:cf8e214:     public void testBundleNotPartOfSubsystemInstallationResolves() throws Exception {
1:cf8e214:     	final Bundle core = getSubsystemCoreBundle();
1:cf8e214:     	core.stop();
1:cf8e214:     	bundleContext.addServiceListener(
1:cf8e214:     			new ServiceListener() {
1:cf8e214:     				@Override
1:cf8e214:     				public void serviceChanged(ServiceEvent event) {
1:cf8e214:     					if (event.getType() == ServiceEvent.REGISTERED) {
1:cf8e214:     						File file = new File(BUNDLE_A);
1:cf8e214:     						try {
1:cf8e214:     							Bundle bundleA = bundleContext.installBundle(
1:cf8e214:     									file.toURI().toString(), new FileInputStream(file));
1:cf8e214:     							bundleA.start();
1:cf8e214:     						}
1:cf8e214:     						catch (Exception e) {
1:cf8e214:     							e.printStackTrace();
1:cf8e214:     						}
1:cf8e214:     					}
1:cf8e214:     				}
1:cf8e214:     			},
1:cf8e214:     			"(objectClass=org.osgi.service.subsystem.Subsystem)"
1:cf8e214:     	);
1:cf8e214:     	core.start();
1:cf8e214:     	assertBundleState(Bundle.RESOLVED | Bundle.ACTIVE, BUNDLE_A, getRootSubsystem());
1:cf8e214:     }
1:cf8e214: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:cf8e214
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: 
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceEvent;
1: import org.osgi.framework.ServiceListener;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1428
1:  * 
1:  * org.osgi.framework.BundleException: Could not resolve module: <module> Bundle 
1:  * was filtered by a resolver hook.
1:  */
1: public class Aries1428Test extends SubsystemTest {
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	
1: 	private void createBundleA() throws IOException {
1: 		createBundle(
1: 				name(BUNDLE_A));
1: 	}
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createBundleA();
1: 		createdTestFiles = true;
1: 	}
1:     
1:     @Test
1:     public void testBundleNotPartOfSubsystemInstallationResolves() throws Exception {
1:     	final Bundle core = getSubsystemCoreBundle();
1:     	core.stop();
1:     	bundleContext.addServiceListener(
1:     			new ServiceListener() {
1:     				@Override
1:     				public void serviceChanged(ServiceEvent event) {
1:     					if (event.getType() == ServiceEvent.REGISTERED) {
1:     						File file = new File(BUNDLE_A);
1:     						try {
1:     							Bundle bundleA = bundleContext.installBundle(
1:     									file.toURI().toString(), new FileInputStream(file));
1:     							bundleA.start();
1:     						}
1:     						catch (Exception e) {
1:     							e.printStackTrace();
1:     						}
1:     					}
1:     				}
1:     			},
1:     			"(objectClass=org.osgi.service.subsystem.Subsystem)"
1:     	);
1:     	core.start();
1:     	assertBundleState(Bundle.RESOLVED | Bundle.ACTIVE, BUNDLE_A, getRootSubsystem());
1:     }
1: }
============================================================================