1:2227f26: /*
1:2227f26:  * Licensed to the Apache Software Foundation (ASF) under one
1:2227f26:  * or more contributor license agreements.  See the NOTICE file
1:2227f26:  * distributed with this work for additional information
1:2227f26:  * regarding copyright ownership.  The ASF licenses this file
1:2227f26:  * to you under the Apache License, Version 2.0 (the
1:2227f26:  * "License"); you may not use this file except in compliance
1:2227f26:  * with the License.  You may obtain a copy of the License at
1:2227f26:  *
1:2227f26:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2227f26:  *
1:2227f26:  * Unless required by applicable law or agreed to in writing,
1:2227f26:  * software distributed under the License is distributed on an
1:2227f26:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2227f26:  * KIND, either express or implied.  See the License for the
1:2227f26:  * specific language governing permissions and limitations
1:2227f26:  * under the License.
2:70a524b:  */
3:2227f26: 
1:910fec0: package org.apache.aries.util.filesystem;
1:2227f26: 
1:2227f26: import static org.junit.Assert.assertEquals;
1:70a524b: import static org.junit.Assert.assertFalse;
1:2227f26: import static org.junit.Assert.assertNotNull;
1:2227f26: import static org.junit.Assert.assertNull;
1:2227f26: import static org.junit.Assert.assertTrue;
1:70a524b: import static org.junit.Assert.fail;
1:2227f26: 
1:2227f26: import java.io.BufferedReader;
1:7937e00: import java.io.ByteArrayInputStream;
1:2227f26: import java.io.File;
1:2227f26: import java.io.FileReader;
1:2227f26: import java.io.IOException;
1:70a524b: import java.io.InputStream;
1:3e5f60f: import java.io.OutputStream;
1:2227f26: import java.util.zip.ZipFile;
1:2227f26: 
1:c6cb34d: import org.apache.aries.util.io.IOUtils;
1:2227f26: import org.junit.AfterClass;
1:2227f26: import org.junit.Test;
1:2227f26: 
1:2227f26: public class IOUtilsTest
2:2227f26: {
1:2227f26:   @AfterClass
1:2227f26:   public static void cleanUp()
1:2227f26:   {
1:2227f26:     new File("ioUtilsTest/test.zip").delete();
1:2227f26:     IOUtils.deleteRecursive(new File("ioUtilsTest"));
2:2227f26:   }
1:2227f26:   
1:3e5f60f:   @Test
1:3e5f60f:   public void testZipUpAndUnzipAndDeleteRecursive() throws IOException
1:2227f26:   {
1:3e5f60f:     new File ("ioUtilsTest").mkdir();
1:2227f26:     IOUtils.zipUp(new File("../src/test/resources/zip"), new File("ioUtilsTest/test.zip"));
1:2227f26:     
1:2227f26:     ZipFile zip = new ZipFile("ioUtilsTest/test.zip");
1:2227f26:     assertNotNull(zip.getEntry("file.txt"));
1:2227f26:     assertNotNull(zip.getEntry("subdir/someFile.txt"));
1:2227f26:     zip.close();
1:3e5f60f:     
1:3e5f60f:     IDirectory dir = FileSystem.getFSRoot(new File("ioUtilsTest"));
1:3e5f60f:     IFile izip = dir.getFile("test.zip");
1:3e5f60f:     File output = new File("ioUtilsTest/zipout");
1:3e5f60f:     output.mkdirs();
1:3e5f60f:     IOUtils.unpackZip(izip, output);
1:3e5f60f:     File a = new File(output,"file.txt");
1:3e5f60f:     File b = new File(output,"subdir");
1:3e5f60f:     File c = new File(b,"someFile.txt");
1:3e5f60f:     assertTrue(output.exists());
1:3e5f60f:     assertTrue(a.exists() && a.isFile());
1:3e5f60f:     assertTrue(b.exists() && b.isDirectory());
1:3e5f60f:     assertTrue(c.exists() && c.isFile());
1:3e5f60f:     
1:3e5f60f:     IOUtils.deleteRecursive(output);
1:3e5f60f:     assertFalse(output.exists());
1:2227f26:   }
1:2227f26:   
2:2227f26:   @Test
1:2227f26:   public void testWriteOut() throws IOException
1:2227f26:   {
1:e309661:     File tmpDir = new File("target/ioUtilsTest/tmp");
1:e309661:     tmpDir.mkdirs();
1:2227f26:     
1:7937e00:     IOUtils.writeOut(tmpDir, "simple.txt", new ByteArrayInputStream( "abc".getBytes()));
1:7937e00:     IOUtils.writeOut(tmpDir, "some/relative/directory/complex.txt", new ByteArrayInputStream( "def".getBytes()));
1:7937e00:     IOUtils.writeOut(tmpDir, "some/relative/directory/complex2.txt", new ByteArrayInputStream( "ghi".getBytes()));
1:2227f26:     
1:e309661:     File simple = new File(tmpDir, "simple.txt");
1:2227f26:     assertTrue(simple.exists());
1:2227f26: 
1:e309661:     File complex = new File(tmpDir, "some/relative/directory/complex.txt");
1:2227f26:     assertTrue(complex.exists());
1:2227f26: 
1:e309661:     File complex2 = new File(tmpDir, "some/relative/directory/complex2.txt");
1:2227f26:     assertTrue(complex2.exists());
1:2227f26:     
1:2227f26:     BufferedReader r = new BufferedReader(new FileReader(simple));
1:2227f26:     assertEquals("abc", r.readLine());
1:2227f26:     assertNull(r.readLine());
1:2227f26:     r.close();
1:70a524b:     
1:2227f26:     r = new BufferedReader(new FileReader(complex));
1:2227f26:     assertEquals("def", r.readLine());
1:2227f26:     assertNull(r.readLine());
1:2227f26:     r.close();
1:2227f26: 
1:2227f26:     r = new BufferedReader(new FileReader(complex2));
1:2227f26:     assertEquals("ghi", r.readLine());
1:2227f26:     assertNull(r.readLine());
1:2227f26:     r.close();
1:70a524b:   }
1:2227f26:   
1:70a524b:   @Test 
1:70a524b:   public void testWriteOutAndDoNotCloseInputStream() throws IOException{
1:70a524b:     InputStream is = new InputStream(){
1:70a524b:       int idx=0;
1:70a524b:       int data[]=new int[]{1,2,3,4,5,-1};
1:70a524b:       @Override
1:70a524b:       public int read() throws IOException
1:70a524b:       {
1:70a524b:         if(idx<data.length)
1:70a524b:           return data[idx++];
1:70a524b:         else
1:70a524b:           return -1;
1:70a524b:       }
1:70a524b:       @Override
1:70a524b:       public void close() throws IOException
1:70a524b:       {
1:70a524b:         fail("Close was invoked");
1:70a524b:       }
1:70a524b:     };
1:3e5f60f:     File f = new File("ioUtilsTest/outtest1");
1:70a524b:     f.mkdirs();
1:70a524b:     IOUtils.writeOutAndDontCloseInputStream(f, "/fred", is);
1:70a524b:     File fred = new File(f,"/fred");
1:70a524b:     assertTrue(fred.exists());
1:70a524b:     File outtest = fred.getParentFile();
1:70a524b:     fred.delete();
1:70a524b:     outtest.delete();
1:70a524b:     
1:70a524b:   }
1:70a524b:   
1:70a524b:   @Test 
1:3e5f60f:   public void testCopy() throws IOException{
1:3e5f60f:     InputStream is = new InputStream(){
1:3e5f60f:       boolean closed=false;
1:3e5f60f:       int idx=0;
1:3e5f60f:       int data[]=new int[]{1,2,3,4,5,-1};
1:3e5f60f:       @Override
1:3e5f60f:       public int read() throws IOException
1:3e5f60f:       {
1:3e5f60f:         if(idx<data.length)
1:3e5f60f:           return data[idx++];
1:3e5f60f:         else
1:3e5f60f:           return -1;
1:3e5f60f:       }
1:3e5f60f:       @Override
1:3e5f60f:       public void close() throws IOException
1:3e5f60f:       {
1:3e5f60f:         closed=true;
1:3e5f60f:       }
1:3e5f60f:       @Override
1:3e5f60f:       public int available() throws IOException
1:3e5f60f:       {
1:3e5f60f:         if(!closed)
1:3e5f60f:           return super.available();
1:3e5f60f:         else
1:3e5f60f:           return 123456789;
1:3e5f60f:       }
1:3e5f60f:       
1:3e5f60f:     };
1:70a524b:     
1:3e5f60f:     OutputStream os = new OutputStream(){
1:3e5f60f:       int idx=0;
1:3e5f60f:       int data[]=new int[]{1,2,3,4,5,-1};
1:3e5f60f:       @Override
1:3e5f60f:       public void write(int b) throws IOException
1:3e5f60f:       {
1:3e5f60f:         if(b!=data[idx++]){
1:3e5f60f:           fail("Data written to outputstream was not as expected");
1:3e5f60f:         }
1:3e5f60f:       }
1:3e5f60f:     };
1:70a524b:     
1:3e5f60f:     IOUtils.copy(is,os);
1:3e5f60f:     if(is.available()!=123456789){
1:3e5f60f:       fail("close was not invoked");
1:3e5f60f:     }
1:3e5f60f:     
1:70a524b:     
1:3e5f60f:   }
1:70a524b:   
1:70a524b:   @Test
1:3e5f60f:   public void testCopyAndDoNotClose() throws IOException{
1:70a524b:     
1:3e5f60f:     InputStream is = new InputStream(){
1:3e5f60f:       int idx=0;
1:3e5f60f:       int data[]=new int[]{1,2,3,4,5,-1};
1:3e5f60f:       @Override
1:3e5f60f:       public int read() throws IOException
1:3e5f60f:       {
1:3e5f60f:         if(idx<data.length)
1:3e5f60f:           return data[idx++];
1:3e5f60f:         else
1:3e5f60f:           return -1;
1:3e5f60f:       }
1:3e5f60f:       @Override
1:3e5f60f:       public void close() throws IOException
1:3e5f60f:       {
1:3e5f60f:         fail("Close invoked");
1:3e5f60f:       }
1:3e5f60f:     };
1:70a524b:     
1:3e5f60f:     OutputStream os = new OutputStream(){
1:3e5f60f:       int idx=0;
1:3e5f60f:       int data[]=new int[]{1,2,3,4,5,-1};
1:3e5f60f:       @Override
1:3e5f60f:       public void write(int b) throws IOException
1:3e5f60f:       {
1:3e5f60f:         if(b!=data[idx++]){
1:3e5f60f:           fail("Data written to outputstream was not as expected");
1:3e5f60f:         }
1:70a524b:       }
1:3e5f60f:     };
1:70a524b:     
1:3e5f60f:     IOUtils.copyAndDoNotCloseInputStream(is,os);
1:3e5f60f:     
1:2227f26:   }
1:2227f26: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:e309661
/////////////////////////////////////////////////////////////////////////
1:     File tmpDir = new File("target/ioUtilsTest/tmp");
1:     tmpDir.mkdirs();
1:     File simple = new File(tmpDir, "simple.txt");
1:     File complex = new File(tmpDir, "some/relative/directory/complex.txt");
1:     File complex2 = new File(tmpDir, "some/relative/directory/complex2.txt");
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:7937e00
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
1:     IOUtils.writeOut(tmpDir, "simple.txt", new ByteArrayInputStream( "abc".getBytes()));
1:     IOUtils.writeOut(tmpDir, "some/relative/directory/complex.txt", new ByteArrayInputStream( "def".getBytes()));
1:     IOUtils.writeOut(tmpDir, "some/relative/directory/complex2.txt", new ByteArrayInputStream( "ghi".getBytes()));
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.io.IOUtils;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.filesystem.FileSystem;
0: import org.apache.aries.util.filesystem.IDirectory;
0: import org.apache.aries.util.filesystem.IFile;
0: import org.apache.aries.util.filesystem.IOUtils;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:3e5f60f
/////////////////////////////////////////////////////////////////////////
1: import java.io.OutputStream;
0: import org.apache.aries.application.filesystem.IDirectory;
/////////////////////////////////////////////////////////////////////////
1:   public void testZipUpAndUnzipAndDeleteRecursive() throws IOException
1:     new File ("ioUtilsTest").mkdir();
1:     
1:     IDirectory dir = FileSystem.getFSRoot(new File("ioUtilsTest"));
1:     IFile izip = dir.getFile("test.zip");
1:     File output = new File("ioUtilsTest/zipout");
1:     output.mkdirs();
1:     IOUtils.unpackZip(izip, output);
1:     File a = new File(output,"file.txt");
1:     File b = new File(output,"subdir");
1:     File c = new File(b,"someFile.txt");
1:     assertTrue(output.exists());
1:     assertTrue(a.exists() && a.isFile());
1:     assertTrue(b.exists() && b.isDirectory());
1:     assertTrue(c.exists() && c.isFile());
1:     
1:     IOUtils.deleteRecursive(output);
1:     assertFalse(output.exists());
0:     tmpDir.mkdir();
/////////////////////////////////////////////////////////////////////////
1:     File f = new File("ioUtilsTest/outtest1");
/////////////////////////////////////////////////////////////////////////
1:   @Test 
1:   public void testCopy() throws IOException{
1:     InputStream is = new InputStream(){
1:       boolean closed=false;
1:       int idx=0;
1:       int data[]=new int[]{1,2,3,4,5,-1};
1:       @Override
1:       public int read() throws IOException
1:       {
1:         if(idx<data.length)
1:           return data[idx++];
1:         else
1:           return -1;
1:       }
1:       @Override
1:       public void close() throws IOException
1:       {
1:         closed=true;
1:       }
1:       @Override
1:       public int available() throws IOException
1:       {
1:         if(!closed)
1:           return super.available();
1:         else
1:           return 123456789;
1:       }
1:       
1:     };
1:     OutputStream os = new OutputStream(){
1:       int idx=0;
1:       int data[]=new int[]{1,2,3,4,5,-1};
1:       @Override
1:       public void write(int b) throws IOException
1:       {
1:         if(b!=data[idx++]){
1:           fail("Data written to outputstream was not as expected");
1:         }
1:       }
1:     };
1:     IOUtils.copy(is,os);
1:     if(is.available()!=123456789){
1:       fail("close was not invoked");
1:     }
1:     
1:   public void testCopyAndDoNotClose() throws IOException{
1:     InputStream is = new InputStream(){
1:       int idx=0;
1:       int data[]=new int[]{1,2,3,4,5,-1};
1:       @Override
1:       public int read() throws IOException
1:       {
1:         if(idx<data.length)
1:           return data[idx++];
1:         else
1:           return -1;
1:       }
1:       @Override
1:       public void close() throws IOException
1:       {
1:         fail("Close invoked");
1:       }
1:     };
1:     OutputStream os = new OutputStream(){
1:       int idx=0;
1:       int data[]=new int[]{1,2,3,4,5,-1};
1:       @Override
1:       public void write(int b) throws IOException
1:       {
1:         if(b!=data[idx++]){
1:           fail("Data written to outputstream was not as expected");
1:         }
1:       }
1:     };
1:     IOUtils.copyAndDoNotCloseInputStream(is,os);
1:     
commit:70a524b
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.fail;
1: import java.io.InputStream;
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.utils.filesystem.impl.FileImpl;
/////////////////////////////////////////////////////////////////////////
0:     // Do not call mkdirs() on tmpDir. writeOut() should create it. 
0:     // tmpDir.mkdirs(); 
/////////////////////////////////////////////////////////////////////////
1:   
1:   @Test 
1:   public void testWriteOutAndDoNotCloseInputStream() throws IOException{
1:     InputStream is = new InputStream(){
1:       int idx=0;
1:       int data[]=new int[]{1,2,3,4,5,-1};
1:       @Override
1:       public int read() throws IOException
1:       {
1:         if(idx<data.length)
1:           return data[idx++];
1:         else
1:           return -1;
1:       }
1:       @Override
1:       public void close() throws IOException
1:       {
1:         fail("Close was invoked");
1:       }
1:     };
0:     File f = new File("unittest/outtest1");
1:     f.mkdirs();
1:     IOUtils.writeOutAndDontCloseInputStream(f, "/fred", is);
1:     File fred = new File(f,"/fred");
1:     assertTrue(fred.exists());
1:     File outtest = fred.getParentFile();
1:     fred.delete();
1:     outtest.delete();
1:     
1:   }
1:   
1:   @Test
0:   public void testEmptyDirectory() throws IOException {
0:     /* Create a .zip with a single entry, an empty directory inside. 
0:      * Confirm that the directory is recreated on unzip. 
1:      */
0:     File testDir = new File ("unittest/emptyDirTest/");
0:     File parent = new File (testDir, "emptyTestRootDir/");
0:     File emptyDir = new File (parent, "foo/");
0:     emptyDir.mkdirs();
0:     assertTrue (emptyDir.exists());
1:     
0:     File zipWithEmptyDir = new File (testDir, "empty.zip");
0:     IOUtils.zipUp(parent, zipWithEmptyDir);
1:     
0:     emptyDir.delete();
0:     assertFalse (emptyDir.exists());
1:     
0:     IFile zip = new FileImpl(zipWithEmptyDir, testDir);
0:     IOUtils.unpackZip(zip, parent);
0:     assertTrue (emptyDir.exists());
1:   }
1:   
1:   @Test
0:   public void testSingleRootLevelEntry() throws IOException { 
0:     /* Create a .zip with a single entry, a root-level file. 
0:      * Confirm that the file is recreated on unzip. 
1:      */
0:     File testDir = new File ("unittest/singleFileInZipTest/");
0:     File parent = new File (testDir, "singleFileRootDir/");
0:     File entry = new File (parent, "foo.txt");
0:     entry.mkdirs();
0:     assertTrue (entry.exists());
1:     
0:     File zipWithSingleFileInRootdir = new File (testDir, "singleFile.zip");
0:     IOUtils.zipUp(parent, zipWithSingleFileInRootdir);
1:     
0:     entry.delete();
0:     assertFalse (entry.exists());
1:     
0:     IFile zip = new FileImpl(zipWithSingleFileInRootdir, testDir);
0:     IOUtils.unpackZip(zip, parent);
0:     assertTrue (entry.exists());
1:   }
commit:2227f26
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: 
0: package org.apache.aries.application.utils.filesystem;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.FileReader;
1: import java.io.IOException;
0: import java.io.StringBufferInputStream;
1: import java.util.zip.ZipFile;
1: 
1: import org.junit.AfterClass;
0: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: public class IOUtilsTest
1: {
0:   @BeforeClass 
0:   public static void setup()
1:   { 
0:     new File("ioUtilsTest").mkdir();
1:   }
1:   
1:   @AfterClass
1:   public static void cleanUp()
1:   {
1:     new File("ioUtilsTest/test.zip").delete();
1:     IOUtils.deleteRecursive(new File("ioUtilsTest"));
1:   }
1:   
1:   @Test
0:   public void testZipUp() throws IOException
1:   {
1:     IOUtils.zipUp(new File("../src/test/resources/zip"), new File("ioUtilsTest/test.zip"));
1:     
1:     ZipFile zip = new ZipFile("ioUtilsTest/test.zip");
1:     assertNotNull(zip.getEntry("file.txt"));
1:     assertNotNull(zip.getEntry("subdir/someFile.txt"));
1:     zip.close();
1:   }
1:   
1:   @Test
1:   public void testWriteOut() throws IOException
1:   {
0:     File tmpDir = new File("ioUtilsTest/tmp");
0:     tmpDir.mkdirs();
1:     
0:     IOUtils.writeOut(tmpDir, "simple.txt", new StringBufferInputStream("abc"));
0:     IOUtils.writeOut(tmpDir, "some/relative/directory/complex.txt", new StringBufferInputStream("def"));
0:     IOUtils.writeOut(tmpDir, "some/relative/directory/complex2.txt", new StringBufferInputStream("ghi"));
1:     
0:     File simple = new File("ioUtilsTest/tmp/simple.txt");
1:     assertTrue(simple.exists());
1: 
0:     File complex = new File("ioUtilsTest/tmp/some/relative/directory/complex.txt");
1:     assertTrue(complex.exists());
1: 
0:     File complex2 = new File("ioUtilsTest/tmp/some/relative/directory/complex2.txt");
1:     assertTrue(complex2.exists());
1:     
1:     BufferedReader r = new BufferedReader(new FileReader(simple));
1:     assertEquals("abc", r.readLine());
1:     assertNull(r.readLine());
1:     r.close();
1:     
1:     r = new BufferedReader(new FileReader(complex));
1:     assertEquals("def", r.readLine());
1:     assertNull(r.readLine());
1:     r.close();
1: 
1:     r = new BufferedReader(new FileReader(complex2));
1:     assertEquals("ghi", r.readLine());
1:     assertNull(r.readLine());
1:     r.close();
1:   }
1: }
1: 
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.utils.filesystem;
0: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertNull;
0: import static org.junit.Assert.assertTrue;
0: 
0: import java.io.BufferedReader;
0: import java.io.File;
0: import java.io.FileReader;
0: import java.io.IOException;
0: import java.io.StringBufferInputStream;
0: import java.util.zip.ZipFile;
0: 
0: import org.junit.AfterClass;
0: import org.junit.BeforeClass;
0: import org.junit.Test;
0: 
0: public class IOUtilsTest
0: {
0:   @BeforeClass 
0:   public static void setup()
0:   { 
0:     new File("ioUtilsTest").mkdir();
0:   }
0:   
0:   @AfterClass
0:   public static void cleanUp()
0:   {
0:     new File("ioUtilsTest/test.zip").delete();
0:     IOUtils.deleteRecursive(new File("ioUtilsTest"));
0:   }
0:   
0:   @Test
0:   public void testZipUp() throws IOException
0:   {
0:     IOUtils.zipUp(new File("../src/test/resources/zip"), new File("ioUtilsTest/test.zip"));
0:     
0:     ZipFile zip = new ZipFile("ioUtilsTest/test.zip");
0:     assertNotNull(zip.getEntry("file.txt"));
0:     assertNotNull(zip.getEntry("subdir/someFile.txt"));
0:     zip.close();
0:   }
0:   
0:   @Test
0:   public void testWriteOut() throws IOException
0:   {
0:     File tmpDir = new File("ioUtilsTest/tmp");
0:     tmpDir.mkdirs();
0:     
0:     IOUtils.writeOut(tmpDir, "simple.txt", new StringBufferInputStream("abc"));
0:     IOUtils.writeOut(tmpDir, "some/relative/directory/complex.txt", new StringBufferInputStream("def"));
0:     IOUtils.writeOut(tmpDir, "some/relative/directory/complex2.txt", new StringBufferInputStream("ghi"));
0:     
0:     File simple = new File("ioUtilsTest/tmp/simple.txt");
0:     assertTrue(simple.exists());
0: 
0:     File complex = new File("ioUtilsTest/tmp/some/relative/directory/complex.txt");
0:     assertTrue(complex.exists());
0: 
0:     File complex2 = new File("ioUtilsTest/tmp/some/relative/directory/complex2.txt");
0:     assertTrue(complex2.exists());
0:     
0:     BufferedReader r = new BufferedReader(new FileReader(simple));
0:     assertEquals("abc", r.readLine());
0:     assertNull(r.readLine());
0:     r.close();
0:     
0:     r = new BufferedReader(new FileReader(complex));
0:     assertEquals("def", r.readLine());
0:     assertNull(r.readLine());
0:     r.close();
0: 
0:     r = new BufferedReader(new FileReader(complex2));
0:     assertEquals("ghi", r.readLine());
0:     assertNull(r.readLine());
0:     r.close();
0:   }
0: }
0: 
============================================================================