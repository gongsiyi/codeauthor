1:b5f484e: /*
1:b5f484e:  * Copyright (c) OSGi Alliance (2007, 2012). All Rights Reserved.
1:b5f484e:  * 
1:b5f484e:  * Licensed under the Apache License, Version 2.0 (the "License");
1:b5f484e:  * you may not use this file except in compliance with the License.
1:b5f484e:  * You may obtain a copy of the License at
1:b5f484e:  *
1:b5f484e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b5f484e:  *
1:b5f484e:  * Unless required by applicable law or agreed to in writing, software
1:b5f484e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b5f484e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b5f484e:  * See the License for the specific language governing permissions and
1:b5f484e:  * limitations under the License.
1:b5f484e:  */
1:b5f484e: 
1:b5f484e: package org.apache.aries.blueprint.container;
1:b5f484e: 
1:b5f484e: import java.util.ArrayList;
1:b5f484e: import java.util.HashMap;
1:b5f484e: import java.util.LinkedList;
1:b5f484e: import java.util.List;
1:b5f484e: import java.util.Map;
1:b5f484e: 
1:b5f484e: /**
1:b5f484e:  * Abstract class to track items. If a Tracker is reused (closed then reopened),
1:b5f484e:  * then a new AbstractTracked object is used. This class acts a map of tracked
1:b5f484e:  * item -> customized object. Subclasses of this class will act as the listener
1:b5f484e:  * object for the tracker. This class is used to synchronize access to the
1:b5f484e:  * tracked items. This is not a public class. It is only for use by the
1:b5f484e:  * implementation of the Tracker class.
1:b5f484e:  *
1:b5f484e:  * @param <S> The tracked item. It is the key.
1:b5f484e:  * @param <T> The value mapped to the tracked item.
1:b5f484e:  * @param <R> The reason the tracked item is being tracked or untracked.
1:b5f484e:  * @ThreadSafe
1:b5f484e:  * @version $Id: 16340086b98d308c2d12f13bcd87fc6467a5a367 $
1:b5f484e:  * @since 1.4
1:b5f484e:  */
1:b5f484e: abstract class AbstractTracked<S, T, R> {
1:b5f484e:     /* set this to true to compile in debug messages */
1:b5f484e:     static final boolean		DEBUG	= false;
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Map of tracked items to customized objects.
1:b5f484e:      *
1:b5f484e:      * @GuardedBy this
1:b5f484e:      */
1:b5f484e:     private final Map<S, T>		tracked;
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Modification count. This field is initialized to zero and incremented by
1:b5f484e:      * modified.
1:b5f484e:      *
1:b5f484e:      * @GuardedBy this
1:b5f484e:      */
1:b5f484e:     private int					trackingCount;
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * List of items in the process of being added. This is used to deal with
1:b5f484e:      * nesting of events. Since events may be synchronously delivered, events
1:b5f484e:      * can be nested. For example, when processing the adding of a service and
1:b5f484e:      * the customizer causes the service to be unregistered, notification to the
1:b5f484e:      * nested call to untrack that the service was unregistered can be made to
1:b5f484e:      * the track method.
1:b5f484e:      *
1:b5f484e:      * Since the ArrayList implementation is not synchronized, all access to
1:b5f484e:      * this list must be protected by the same synchronized object for
1:b5f484e:      * thread-safety.
1:b5f484e:      *
1:b5f484e:      * @GuardedBy this
1:b5f484e:      */
1:b5f484e:     private final List<S>		adding;
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * true if the tracked object is closed.
1:b5f484e:      *
1:b5f484e:      * This field is volatile because it is set by one thread and read by
1:b5f484e:      * another.
1:b5f484e:      */
1:b5f484e:     volatile boolean			closed;
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Initial list of items for the tracker. This is used to correctly process
1:b5f484e:      * the initial items which could be modified before they are tracked. This
1:b5f484e:      * is necessary since the initial set of tracked items are not "announced"
1:b5f484e:      * by events and therefore the event which makes the item untracked could be
1:b5f484e:      * delivered before we track the item.
1:b5f484e:      *
1:b5f484e:      * An item must not be in both the initial and adding lists at the same
1:b5f484e:      * time. An item must be moved from the initial list to the adding list
1:b5f484e:      * "atomically" before we begin tracking it.
1:b5f484e:      *
1:b5f484e:      * Since the LinkedList implementation is not synchronized, all access to
1:b5f484e:      * this list must be protected by the same synchronized object for
1:b5f484e:      * thread-safety.
1:b5f484e:      *
1:b5f484e:      * @GuardedBy this
1:b5f484e:      */
1:b5f484e:     private final LinkedList<S>	initial;
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * AbstractTracked constructor.
1:b5f484e:      */
1:b5f484e:     AbstractTracked() {
1:b5f484e:         tracked = new HashMap<S, T>();
1:b5f484e:         trackingCount = 0;
1:b5f484e:         adding = new ArrayList<S>(6);
1:b5f484e:         initial = new LinkedList<S>();
1:b5f484e:         closed = false;
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Set initial list of items into tracker before events begin to be
1:b5f484e:      * received.
1:b5f484e:      *
1:b5f484e:      * This method must be called from Tracker's open method while synchronized
1:b5f484e:      * on this object in the same synchronized block as the add listener call.
1:b5f484e:      *
1:b5f484e:      * @param list The initial list of items to be tracked. {@code null} entries
1:b5f484e:      *        in the list are ignored.
1:b5f484e:      * @GuardedBy this
1:b5f484e:      */
1:b5f484e:     void setInitial(S[] list) {
1:b5f484e:         if (list == null) {
1:b5f484e:             return;
1:b5f484e:         }
1:b5f484e:         for (S item : list) {
1:b5f484e:             if (item == null) {
1:b5f484e:                 continue;
1:b5f484e:             }
1:b5f484e:             if (DEBUG) {
1:b5f484e:                 System.out.println("AbstractTracked.setInitial: " + item); //$NON-NLS-1$
1:b5f484e:             }
1:b5f484e:             initial.add(item);
1:b5f484e:         }
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Track the initial list of items. This is called after events can begin to
1:b5f484e:      * be received.
1:b5f484e:      *
1:b5f484e:      * This method must be called from Tracker's open method while not
1:b5f484e:      * synchronized on this object after the add listener call.
1:b5f484e:      *
1:b5f484e:      */
1:b5f484e:     void trackInitial() {
1:b5f484e:         while (true) {
1:b5f484e:             S item;
1:b5f484e:             synchronized (this) {
1:b5f484e:                 if (closed || (initial.size() == 0)) {
1:b5f484e: 					/*
1:b5f484e: 					 * if there are no more initial items
1:b5f484e: 					 */
1:b5f484e:                     return; /* we are done */
1:b5f484e:                 }
1:b5f484e: 				/*
1:b5f484e: 				 * move the first item from the initial list to the adding list
1:b5f484e: 				 * within this synchronized block.
1:b5f484e: 				 */
1:b5f484e:                 item = initial.removeFirst();
1:b5f484e:                 if (tracked.get(item) != null) {
1:b5f484e: 					/* if we are already tracking this item */
1:b5f484e:                     if (DEBUG) {
1:b5f484e:                         System.out.println("AbstractTracked.trackInitial[already tracked]: " + item); //$NON-NLS-1$
1:b5f484e:                     }
1:b5f484e:                     continue; /* skip this item */
1:b5f484e:                 }
1:b5f484e:                 if (adding.contains(item)) {
1:b5f484e: 					/*
1:b5f484e: 					 * if this item is already in the process of being added.
1:b5f484e: 					 */
1:b5f484e:                     if (DEBUG) {
1:b5f484e:                         System.out.println("AbstractTracked.trackInitial[already adding]: " + item); //$NON-NLS-1$
1:b5f484e:                     }
1:b5f484e:                     continue; /* skip this item */
1:b5f484e:                 }
1:b5f484e:                 adding.add(item);
1:b5f484e:             }
1:b5f484e:             if (DEBUG) {
1:b5f484e:                 System.out.println("AbstractTracked.trackInitial: " + item); //$NON-NLS-1$
1:b5f484e:             }
1:b5f484e:             trackAdding(item, null); /*
1:b5f484e: 									 * Begin tracking it. We call trackAdding
1:b5f484e: 									 * since we have already put the item in the
1:b5f484e: 									 * adding list.
1:b5f484e: 									 */
1:b5f484e:         }
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Called by the owning Tracker object when it is closed.
1:b5f484e:      */
1:b5f484e:     void close() {
1:b5f484e:         closed = true;
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Begin to track an item.
1:b5f484e:      *
1:b5f484e:      * @param item Item to be tracked.
1:b5f484e:      * @param related Action related object.
1:b5f484e:      */
1:b5f484e:     void track(final S item, final R related) {
1:b5f484e:         final T object;
1:b5f484e:         synchronized (this) {
1:b5f484e:             if (closed) {
1:b5f484e:                 return;
1:b5f484e:             }
1:b5f484e:             object = tracked.get(item);
1:b5f484e:             if (object == null) { /* we are not tracking the item */
1:b5f484e:                 if (adding.contains(item)) {
1:b5f484e: 					/* if this item is already in the process of being added. */
1:b5f484e:                     if (DEBUG) {
1:b5f484e:                         System.out.println("AbstractTracked.track[already adding]: " + item); //$NON-NLS-1$
1:b5f484e:                     }
1:b5f484e:                     return;
1:b5f484e:                 }
1:b5f484e:                 adding.add(item); /* mark this item is being added */
1:b5f484e:             } else { /* we are currently tracking this item */
1:b5f484e:                 if (DEBUG) {
1:b5f484e:                     System.out.println("AbstractTracked.track[modified]: " + item); //$NON-NLS-1$
1:b5f484e:                 }
1:b5f484e:                 modified(); /* increment modification count */
1:b5f484e:             }
1:b5f484e:         }
1:b5f484e: 
1:b5f484e:         if (object == null) { /* we are not tracking the item */
1:b5f484e:             trackAdding(item, related);
1:b5f484e:         } else {
1:b5f484e: 			/* Call customizer outside of synchronized region */
1:b5f484e:             customizerModified(item, related, object);
1:b5f484e: 			/*
1:b5f484e: 			 * If the customizer throws an unchecked exception, it is safe to
1:b5f484e: 			 * let it propagate
1:b5f484e: 			 */
1:b5f484e:         }
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Common logic to add an item to the tracker used by track and
1:b5f484e:      * trackInitial. The specified item must have been placed in the adding list
1:b5f484e:      * before calling this method.
1:b5f484e:      *
1:b5f484e:      * @param item Item to be tracked.
1:b5f484e:      * @param related Action related object.
1:b5f484e:      */
1:b5f484e:     private void trackAdding(final S item, final R related) {
1:b5f484e:         if (DEBUG) {
1:b5f484e:             System.out.println("AbstractTracked.trackAdding: " + item); //$NON-NLS-1$
1:b5f484e:         }
1:b5f484e:         T object = null;
1:b5f484e:         boolean becameUntracked = false;
1:b5f484e: 		/* Call customizer outside of synchronized region */
1:b5f484e:         try {
1:b5f484e:             object = customizerAdding(item, related);
1:b5f484e: 			/*
1:b5f484e: 			 * If the customizer throws an unchecked exception, it will
1:b5f484e: 			 * propagate after the finally
1:b5f484e: 			 */
1:b5f484e:         } finally {
1:b5f484e:             synchronized (this) {
1:b5f484e:                 if (adding.remove(item) && !closed) {
1:b5f484e: 					/*
1:b5f484e: 					 * if the item was not untracked during the customizer
1:b5f484e: 					 * callback
1:b5f484e: 					 */
1:b5f484e:                     if (object != null) {
1:b5f484e:                         tracked.put(item, object);
1:b5f484e:                         modified(); /* increment modification count */
1:b5f484e:                         notifyAll(); /* notify any waiters */
1:b5f484e:                     }
1:b5f484e:                 } else {
1:b5f484e:                     becameUntracked = true;
1:b5f484e:                 }
1:b5f484e:             }
1:b5f484e:         }
1:b5f484e: 		/*
1:b5f484e: 		 * The item became untracked during the customizer callback.
1:b5f484e: 		 */
1:b5f484e:         if (becameUntracked && (object != null)) {
1:b5f484e:             if (DEBUG) {
1:b5f484e:                 System.out.println("AbstractTracked.trackAdding[removed]: " + item); //$NON-NLS-1$
1:b5f484e:             }
1:b5f484e: 			/* Call customizer outside of synchronized region */
1:b5f484e:             customizerRemoved(item, related, object);
1:b5f484e: 			/*
1:b5f484e: 			 * If the customizer throws an unchecked exception, it is safe to
1:b5f484e: 			 * let it propagate
1:b5f484e: 			 */
1:b5f484e:         }
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Discontinue tracking the item.
1:b5f484e:      *
1:b5f484e:      * @param item Item to be untracked.
1:b5f484e:      * @param related Action related object.
1:b5f484e:      */
1:b5f484e:     void untrack(final S item, final R related) {
1:b5f484e:         final T object;
1:b5f484e:         synchronized (this) {
1:b5f484e:             if (initial.remove(item)) { /*
1:b5f484e: 										 * if this item is already in the list
1:b5f484e: 										 * of initial references to process
1:b5f484e: 										 */
1:b5f484e:                 if (DEBUG) {
1:b5f484e:                     System.out.println("AbstractTracked.untrack[removed from initial]: " + item); //$NON-NLS-1$
1:b5f484e:                 }
1:b5f484e:                 return; /*
1:b5f484e: 						 * we have removed it from the list and it will not be
1:b5f484e: 						 * processed
1:b5f484e: 						 */
1:b5f484e:             }
1:b5f484e: 
1:b5f484e:             if (adding.remove(item)) { /*
1:b5f484e: 										 * if the item is in the process of
1:b5f484e: 										 * being added
1:b5f484e: 										 */
1:b5f484e:                 if (DEBUG) {
1:b5f484e:                     System.out.println("AbstractTracked.untrack[being added]: " + item); //$NON-NLS-1$
1:b5f484e:                 }
1:b5f484e:                 return; /*
1:b5f484e: 						 * in case the item is untracked while in the process of
1:b5f484e: 						 * adding
1:b5f484e: 						 */
1:b5f484e:             }
1:b5f484e:             object = tracked.remove(item); /*
1:b5f484e: 											 * must remove from tracker before
1:b5f484e: 											 * calling customizer callback
1:b5f484e: 											 */
1:b5f484e:             if (object == null) { /* are we actually tracking the item */
1:b5f484e:                 return;
1:b5f484e:             }
1:b5f484e:             modified(); /* increment modification count */
1:b5f484e:         }
1:b5f484e:         if (DEBUG) {
1:b5f484e:             System.out.println("AbstractTracked.untrack[removed]: " + item); //$NON-NLS-1$
1:b5f484e:         }
1:b5f484e: 		/* Call customizer outside of synchronized region */
1:b5f484e:         customizerRemoved(item, related, object);
1:b5f484e: 		/*
1:b5f484e: 		 * If the customizer throws an unchecked exception, it is safe to let it
1:b5f484e: 		 * propagate
1:b5f484e: 		 */
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Returns the number of tracked items.
1:b5f484e:      *
1:b5f484e:      * @return The number of tracked items.
1:b5f484e:      *
1:b5f484e:      * @GuardedBy this
1:b5f484e:      */
1:b5f484e:     int size() {
1:b5f484e:         return tracked.size();
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Returns if the tracker is empty.
1:b5f484e:      *
1:b5f484e:      * @return Whether the tracker is empty.
1:b5f484e:      *
1:b5f484e:      * @GuardedBy this
1:b5f484e:      * @since 1.5
1:b5f484e:      */
1:b5f484e:     boolean isEmpty() {
1:b5f484e:         return tracked.isEmpty();
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Return the customized object for the specified item
1:b5f484e:      *
1:b5f484e:      * @param item The item to lookup in the map
1:b5f484e:      * @return The customized object for the specified item.
1:b5f484e:      *
1:b5f484e:      * @GuardedBy this
1:b5f484e:      */
1:b5f484e:     T getCustomizedObject(final S item) {
1:b5f484e:         return tracked.get(item);
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Copy the tracked items into an array.
1:b5f484e:      *
1:b5f484e:      * @param list An array to contain the tracked items.
1:b5f484e:      * @return The specified list if it is large enough to hold the tracked
1:b5f484e:      *         items or a new array large enough to hold the tracked items.
1:b5f484e:      * @GuardedBy this
1:b5f484e:      */
1:b5f484e:     S[] copyKeys(final S[] list) {
1:b5f484e:         return tracked.keySet().toArray(list);
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Increment the modification count. If this method is overridden, the
1:b5f484e:      * overriding method MUST call this method to increment the tracking count.
1:b5f484e:      *
1:b5f484e:      * @GuardedBy this
1:b5f484e:      */
1:b5f484e:     void modified() {
1:b5f484e:         trackingCount++;
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Returns the tracking count for this {@code ServiceTracker} object.
1:b5f484e:      *
1:b5f484e:      * The tracking count is initialized to 0 when this object is opened. Every
1:b5f484e:      * time an item is added, modified or removed from this object the tracking
1:b5f484e:      * count is incremented.
1:b5f484e:      *
1:b5f484e:      * @GuardedBy this
1:b5f484e:      * @return The tracking count for this object.
1:b5f484e:      */
1:b5f484e:     int getTrackingCount() {
1:b5f484e:         return trackingCount;
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Copy the tracked items and associated values into the specified map.
1:b5f484e:      *
1:b5f484e:      * @param <M> Type of {@code Map} to hold the tracked items and associated
1:b5f484e:      *        values.
1:b5f484e:      * @param map The map into which to copy the tracked items and associated
1:b5f484e:      *        values. This map must not be a user provided map so that user code
1:b5f484e:      *        is not executed while synchronized on this.
1:b5f484e:      * @return The specified map.
1:b5f484e:      * @GuardedBy this
1:b5f484e:      * @since 1.5
1:b5f484e:      */
1:b5f484e:     <M extends Map<? super S, ? super T>> M copyEntries(final M map) {
1:b5f484e:         map.putAll(tracked);
1:b5f484e:         return map;
1:b5f484e:     }
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Call the specific customizer adding method. This method must not be
1:b5f484e:      * called while synchronized on this object.
1:b5f484e:      *
1:b5f484e:      * @param item Item to be tracked.
1:b5f484e:      * @param related Action related object.
1:b5f484e:      * @return Customized object for the tracked item or {@code null} if the
1:b5f484e:      *         item is not to be tracked.
1:b5f484e:      */
1:b5f484e:     abstract T customizerAdding(final S item, final R related);
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Call the specific customizer modified method. This method must not be
1:b5f484e:      * called while synchronized on this object.
1:b5f484e:      *
1:b5f484e:      * @param item Tracked item.
1:b5f484e:      * @param related Action related object.
1:b5f484e:      * @param object Customized object for the tracked item.
1:b5f484e:      */
1:b5f484e:     abstract void customizerModified(final S item, final R related, final T object);
1:b5f484e: 
1:b5f484e:     /**
1:b5f484e:      * Call the specific customizer removed method. This method must not be
1:b5f484e:      * called while synchronized on this object.
1:b5f484e:      *
1:b5f484e:      * @param item Tracked item.
1:b5f484e:      * @param related Action related object.
1:b5f484e:      * @param object Customized object for the tracked item.
1:b5f484e:      */
1:b5f484e:     abstract void customizerRemoved(final S item, final R related, final T object);
1:b5f484e: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:b5f484e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2007, 2012). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.aries.blueprint.container;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: /**
1:  * Abstract class to track items. If a Tracker is reused (closed then reopened),
1:  * then a new AbstractTracked object is used. This class acts a map of tracked
1:  * item -> customized object. Subclasses of this class will act as the listener
1:  * object for the tracker. This class is used to synchronize access to the
1:  * tracked items. This is not a public class. It is only for use by the
1:  * implementation of the Tracker class.
1:  *
1:  * @param <S> The tracked item. It is the key.
1:  * @param <T> The value mapped to the tracked item.
1:  * @param <R> The reason the tracked item is being tracked or untracked.
1:  * @ThreadSafe
1:  * @version $Id: 16340086b98d308c2d12f13bcd87fc6467a5a367 $
1:  * @since 1.4
1:  */
1: abstract class AbstractTracked<S, T, R> {
1:     /* set this to true to compile in debug messages */
1:     static final boolean		DEBUG	= false;
1: 
1:     /**
1:      * Map of tracked items to customized objects.
1:      *
1:      * @GuardedBy this
1:      */
1:     private final Map<S, T>		tracked;
1: 
1:     /**
1:      * Modification count. This field is initialized to zero and incremented by
1:      * modified.
1:      *
1:      * @GuardedBy this
1:      */
1:     private int					trackingCount;
1: 
1:     /**
1:      * List of items in the process of being added. This is used to deal with
1:      * nesting of events. Since events may be synchronously delivered, events
1:      * can be nested. For example, when processing the adding of a service and
1:      * the customizer causes the service to be unregistered, notification to the
1:      * nested call to untrack that the service was unregistered can be made to
1:      * the track method.
1:      *
1:      * Since the ArrayList implementation is not synchronized, all access to
1:      * this list must be protected by the same synchronized object for
1:      * thread-safety.
1:      *
1:      * @GuardedBy this
1:      */
1:     private final List<S>		adding;
1: 
1:     /**
1:      * true if the tracked object is closed.
1:      *
1:      * This field is volatile because it is set by one thread and read by
1:      * another.
1:      */
1:     volatile boolean			closed;
1: 
1:     /**
1:      * Initial list of items for the tracker. This is used to correctly process
1:      * the initial items which could be modified before they are tracked. This
1:      * is necessary since the initial set of tracked items are not "announced"
1:      * by events and therefore the event which makes the item untracked could be
1:      * delivered before we track the item.
1:      *
1:      * An item must not be in both the initial and adding lists at the same
1:      * time. An item must be moved from the initial list to the adding list
1:      * "atomically" before we begin tracking it.
1:      *
1:      * Since the LinkedList implementation is not synchronized, all access to
1:      * this list must be protected by the same synchronized object for
1:      * thread-safety.
1:      *
1:      * @GuardedBy this
1:      */
1:     private final LinkedList<S>	initial;
1: 
1:     /**
1:      * AbstractTracked constructor.
1:      */
1:     AbstractTracked() {
1:         tracked = new HashMap<S, T>();
1:         trackingCount = 0;
1:         adding = new ArrayList<S>(6);
1:         initial = new LinkedList<S>();
1:         closed = false;
1:     }
1: 
1:     /**
1:      * Set initial list of items into tracker before events begin to be
1:      * received.
1:      *
1:      * This method must be called from Tracker's open method while synchronized
1:      * on this object in the same synchronized block as the add listener call.
1:      *
1:      * @param list The initial list of items to be tracked. {@code null} entries
1:      *        in the list are ignored.
1:      * @GuardedBy this
1:      */
1:     void setInitial(S[] list) {
1:         if (list == null) {
1:             return;
1:         }
1:         for (S item : list) {
1:             if (item == null) {
1:                 continue;
1:             }
1:             if (DEBUG) {
1:                 System.out.println("AbstractTracked.setInitial: " + item); //$NON-NLS-1$
1:             }
1:             initial.add(item);
1:         }
1:     }
1: 
1:     /**
1:      * Track the initial list of items. This is called after events can begin to
1:      * be received.
1:      *
1:      * This method must be called from Tracker's open method while not
1:      * synchronized on this object after the add listener call.
1:      *
1:      */
1:     void trackInitial() {
1:         while (true) {
1:             S item;
1:             synchronized (this) {
1:                 if (closed || (initial.size() == 0)) {
1: 					/*
1: 					 * if there are no more initial items
1: 					 */
1:                     return; /* we are done */
1:                 }
1: 				/*
1: 				 * move the first item from the initial list to the adding list
1: 				 * within this synchronized block.
1: 				 */
1:                 item = initial.removeFirst();
1:                 if (tracked.get(item) != null) {
1: 					/* if we are already tracking this item */
1:                     if (DEBUG) {
1:                         System.out.println("AbstractTracked.trackInitial[already tracked]: " + item); //$NON-NLS-1$
1:                     }
1:                     continue; /* skip this item */
1:                 }
1:                 if (adding.contains(item)) {
1: 					/*
1: 					 * if this item is already in the process of being added.
1: 					 */
1:                     if (DEBUG) {
1:                         System.out.println("AbstractTracked.trackInitial[already adding]: " + item); //$NON-NLS-1$
1:                     }
1:                     continue; /* skip this item */
1:                 }
1:                 adding.add(item);
1:             }
1:             if (DEBUG) {
1:                 System.out.println("AbstractTracked.trackInitial: " + item); //$NON-NLS-1$
1:             }
1:             trackAdding(item, null); /*
1: 									 * Begin tracking it. We call trackAdding
1: 									 * since we have already put the item in the
1: 									 * adding list.
1: 									 */
1:         }
1:     }
1: 
1:     /**
1:      * Called by the owning Tracker object when it is closed.
1:      */
1:     void close() {
1:         closed = true;
1:     }
1: 
1:     /**
1:      * Begin to track an item.
1:      *
1:      * @param item Item to be tracked.
1:      * @param related Action related object.
1:      */
1:     void track(final S item, final R related) {
1:         final T object;
1:         synchronized (this) {
1:             if (closed) {
1:                 return;
1:             }
1:             object = tracked.get(item);
1:             if (object == null) { /* we are not tracking the item */
1:                 if (adding.contains(item)) {
1: 					/* if this item is already in the process of being added. */
1:                     if (DEBUG) {
1:                         System.out.println("AbstractTracked.track[already adding]: " + item); //$NON-NLS-1$
1:                     }
1:                     return;
1:                 }
1:                 adding.add(item); /* mark this item is being added */
1:             } else { /* we are currently tracking this item */
1:                 if (DEBUG) {
1:                     System.out.println("AbstractTracked.track[modified]: " + item); //$NON-NLS-1$
1:                 }
1:                 modified(); /* increment modification count */
1:             }
1:         }
1: 
1:         if (object == null) { /* we are not tracking the item */
1:             trackAdding(item, related);
1:         } else {
1: 			/* Call customizer outside of synchronized region */
1:             customizerModified(item, related, object);
1: 			/*
1: 			 * If the customizer throws an unchecked exception, it is safe to
1: 			 * let it propagate
1: 			 */
1:         }
1:     }
1: 
1:     /**
1:      * Common logic to add an item to the tracker used by track and
1:      * trackInitial. The specified item must have been placed in the adding list
1:      * before calling this method.
1:      *
1:      * @param item Item to be tracked.
1:      * @param related Action related object.
1:      */
1:     private void trackAdding(final S item, final R related) {
1:         if (DEBUG) {
1:             System.out.println("AbstractTracked.trackAdding: " + item); //$NON-NLS-1$
1:         }
1:         T object = null;
1:         boolean becameUntracked = false;
1: 		/* Call customizer outside of synchronized region */
1:         try {
1:             object = customizerAdding(item, related);
1: 			/*
1: 			 * If the customizer throws an unchecked exception, it will
1: 			 * propagate after the finally
1: 			 */
1:         } finally {
1:             synchronized (this) {
1:                 if (adding.remove(item) && !closed) {
1: 					/*
1: 					 * if the item was not untracked during the customizer
1: 					 * callback
1: 					 */
1:                     if (object != null) {
1:                         tracked.put(item, object);
1:                         modified(); /* increment modification count */
1:                         notifyAll(); /* notify any waiters */
1:                     }
1:                 } else {
1:                     becameUntracked = true;
1:                 }
1:             }
1:         }
1: 		/*
1: 		 * The item became untracked during the customizer callback.
1: 		 */
1:         if (becameUntracked && (object != null)) {
1:             if (DEBUG) {
1:                 System.out.println("AbstractTracked.trackAdding[removed]: " + item); //$NON-NLS-1$
1:             }
1: 			/* Call customizer outside of synchronized region */
1:             customizerRemoved(item, related, object);
1: 			/*
1: 			 * If the customizer throws an unchecked exception, it is safe to
1: 			 * let it propagate
1: 			 */
1:         }
1:     }
1: 
1:     /**
1:      * Discontinue tracking the item.
1:      *
1:      * @param item Item to be untracked.
1:      * @param related Action related object.
1:      */
1:     void untrack(final S item, final R related) {
1:         final T object;
1:         synchronized (this) {
1:             if (initial.remove(item)) { /*
1: 										 * if this item is already in the list
1: 										 * of initial references to process
1: 										 */
1:                 if (DEBUG) {
1:                     System.out.println("AbstractTracked.untrack[removed from initial]: " + item); //$NON-NLS-1$
1:                 }
1:                 return; /*
1: 						 * we have removed it from the list and it will not be
1: 						 * processed
1: 						 */
1:             }
1: 
1:             if (adding.remove(item)) { /*
1: 										 * if the item is in the process of
1: 										 * being added
1: 										 */
1:                 if (DEBUG) {
1:                     System.out.println("AbstractTracked.untrack[being added]: " + item); //$NON-NLS-1$
1:                 }
1:                 return; /*
1: 						 * in case the item is untracked while in the process of
1: 						 * adding
1: 						 */
1:             }
1:             object = tracked.remove(item); /*
1: 											 * must remove from tracker before
1: 											 * calling customizer callback
1: 											 */
1:             if (object == null) { /* are we actually tracking the item */
1:                 return;
1:             }
1:             modified(); /* increment modification count */
1:         }
1:         if (DEBUG) {
1:             System.out.println("AbstractTracked.untrack[removed]: " + item); //$NON-NLS-1$
1:         }
1: 		/* Call customizer outside of synchronized region */
1:         customizerRemoved(item, related, object);
1: 		/*
1: 		 * If the customizer throws an unchecked exception, it is safe to let it
1: 		 * propagate
1: 		 */
1:     }
1: 
1:     /**
1:      * Returns the number of tracked items.
1:      *
1:      * @return The number of tracked items.
1:      *
1:      * @GuardedBy this
1:      */
1:     int size() {
1:         return tracked.size();
1:     }
1: 
1:     /**
1:      * Returns if the tracker is empty.
1:      *
1:      * @return Whether the tracker is empty.
1:      *
1:      * @GuardedBy this
1:      * @since 1.5
1:      */
1:     boolean isEmpty() {
1:         return tracked.isEmpty();
1:     }
1: 
1:     /**
1:      * Return the customized object for the specified item
1:      *
1:      * @param item The item to lookup in the map
1:      * @return The customized object for the specified item.
1:      *
1:      * @GuardedBy this
1:      */
1:     T getCustomizedObject(final S item) {
1:         return tracked.get(item);
1:     }
1: 
1:     /**
1:      * Copy the tracked items into an array.
1:      *
1:      * @param list An array to contain the tracked items.
1:      * @return The specified list if it is large enough to hold the tracked
1:      *         items or a new array large enough to hold the tracked items.
1:      * @GuardedBy this
1:      */
1:     S[] copyKeys(final S[] list) {
1:         return tracked.keySet().toArray(list);
1:     }
1: 
1:     /**
1:      * Increment the modification count. If this method is overridden, the
1:      * overriding method MUST call this method to increment the tracking count.
1:      *
1:      * @GuardedBy this
1:      */
1:     void modified() {
1:         trackingCount++;
1:     }
1: 
1:     /**
1:      * Returns the tracking count for this {@code ServiceTracker} object.
1:      *
1:      * The tracking count is initialized to 0 when this object is opened. Every
1:      * time an item is added, modified or removed from this object the tracking
1:      * count is incremented.
1:      *
1:      * @GuardedBy this
1:      * @return The tracking count for this object.
1:      */
1:     int getTrackingCount() {
1:         return trackingCount;
1:     }
1: 
1:     /**
1:      * Copy the tracked items and associated values into the specified map.
1:      *
1:      * @param <M> Type of {@code Map} to hold the tracked items and associated
1:      *        values.
1:      * @param map The map into which to copy the tracked items and associated
1:      *        values. This map must not be a user provided map so that user code
1:      *        is not executed while synchronized on this.
1:      * @return The specified map.
1:      * @GuardedBy this
1:      * @since 1.5
1:      */
1:     <M extends Map<? super S, ? super T>> M copyEntries(final M map) {
1:         map.putAll(tracked);
1:         return map;
1:     }
1: 
1:     /**
1:      * Call the specific customizer adding method. This method must not be
1:      * called while synchronized on this object.
1:      *
1:      * @param item Item to be tracked.
1:      * @param related Action related object.
1:      * @return Customized object for the tracked item or {@code null} if the
1:      *         item is not to be tracked.
1:      */
1:     abstract T customizerAdding(final S item, final R related);
1: 
1:     /**
1:      * Call the specific customizer modified method. This method must not be
1:      * called while synchronized on this object.
1:      *
1:      * @param item Tracked item.
1:      * @param related Action related object.
1:      * @param object Customized object for the tracked item.
1:      */
1:     abstract void customizerModified(final S item, final R related, final T object);
1: 
1:     /**
1:      * Call the specific customizer removed method. This method must not be
1:      * called while synchronized on this object.
1:      *
1:      * @param item Tracked item.
1:      * @param related Action related object.
1:      * @param object Customized object for the tracked item.
1:      */
1:     abstract void customizerRemoved(final S item, final R related, final T object);
1: }
============================================================================