1:bd98451: package org.apache.aries.transaction;
2:bd98451: 
1:bd98451: import java.lang.reflect.Method;
1:bd98451: import java.lang.reflect.Modifier;
1:bd98451: import java.util.HashMap;
1:bd98451: import java.util.Map;
1:bd98451: 
1:bd98451: import javax.transaction.Transactional;
1:bd98451: import javax.transaction.Transactional.TxType;
1:bd98451: 
1:2ad9527: import org.slf4j.Logger;
1:2ad9527: import org.slf4j.LoggerFactory;
1:2ad9527: 
1:bd98451: public class ComponentTxData {
1:2ad9527:     private static final Logger LOG = LoggerFactory.getLogger(ComponentTxData.class);
1:bd98451:     private static final int BANNED_MODIFIERS = Modifier.PRIVATE | Modifier.STATIC;
1:bd98451:     
1:bd98451:     Map<Method, TxType> txMap = new HashMap<Method, Transactional.TxType>();
1:bd98451:     private boolean isTransactional;
1:bd98451:     private Class<?> beanClass;
1:bd98451:     
1:bd98451:     public ComponentTxData(Class<?> c) {
1:bd98451:         beanClass = c;
1:bd98451:         isTransactional = false;
1:bd98451:         // Check class hierarchy
1:2ad9527:         Class<?> current = c;
1:2ad9527:         while (current != Object.class) {
1:2ad9527:             isTransactional |= parseTxData(current);
1:2ad9527:             for (Class<?> iface : current.getInterfaces()) {
1:bd98451:                 isTransactional |= parseTxData(iface);
4:bd98451:             }
1:2ad9527:             current = current.getSuperclass();
1:2ad9527:         }
1:2ad9527:     }
1:2ad9527:     
1:2ad9527:     TxType getEffectiveType(Method m) {
1:2ad9527:         if (txMap.containsKey(m)) {
1:2ad9527:                 return txMap.get(m);
1:2ad9527:         }
1:2ad9527:         try {
1:2ad9527:             Method effectiveMethod = beanClass.getDeclaredMethod(m.getName(), m.getParameterTypes());
1:2ad9527:             TxType txType = txMap.get(effectiveMethod);
1:2ad9527:             txMap.put(m, txType);
1:2ad9527:             return txType;
1:2ad9527:         } catch (NoSuchMethodException e) { // NOSONAR
1:2ad9527:             return getFromMethod(m);
1:2ad9527:         } catch (SecurityException e) {
1:2ad9527:             throw new RuntimeException("Security exception when determining effective method", e); // NOSONAR
1:2ad9527:         }
1:2ad9527:     }
1:2ad9527: 
1:2ad9527:     private TxType getFromMethod(Method m) {
1:2ad9527:         try {
1:2ad9527:             Method effectiveMethod = beanClass.getMethod(m.getName(), m.getParameterTypes());
1:2ad9527:             TxType txType = txMap.get(effectiveMethod);
1:2ad9527:             txMap.put(m, txType);
1:2ad9527:             return txType;
1:2ad9527:         } catch (NoSuchMethodException e1) {
1:2ad9527:             LOG.debug("No method found when scanning for transactions", e1);
1:2ad9527:             return null;
1:2ad9527:         } catch (SecurityException e1) {
1:2ad9527:             throw new RuntimeException("Security exception when determining effective method", e1); // NOSONAR
1:bd98451:         }
1:bd98451:     }
1:bd98451: 
1:bd98451:     private boolean parseTxData(Class<?> c) {
1:bd98451:         boolean shouldAssignInterceptor = false;
1:bd98451:         TxType defaultType = getType(c.getAnnotation(Transactional.class));
1:bd98451:         if (defaultType != null) {
1:bd98451:             shouldAssignInterceptor = true;
1:bd98451:         }
1:bd98451:         for (Method m : c.getDeclaredMethods()) {
3:bd98451:             try {
1:bd98451:                 TxType t = getType(m.getAnnotation(Transactional.class));
1:bd98451:                 if (t != null) {
1:bd98451:                    assertAllowedModifier(m);
1:bd98451:                    txMap.put(m, t);
1:bd98451:                    shouldAssignInterceptor = true;
1:bd98451:                 } else if (defaultType != null){
1:bd98451:                    txMap.put(m, defaultType);
1:bd98451:                 }
1:bd98451:             } catch(IllegalStateException e) {
1:2ad9527:                 LOG.warn("Invalid transaction annoation found", e);
1:bd98451:             }
1:bd98451:         }
1:bd98451: 
1:bd98451:         return shouldAssignInterceptor;
1:bd98451:     }
1:bd98451: 
1:2ad9527:     private static TxType getType(Transactional jtaT) {
1:bd98451:         return (jtaT != null) ? jtaT.value() : null;
1:bd98451:     }
1:bd98451: 
1:2ad9527:     private static void assertAllowedModifier(Method m) {
1:bd98451:         if ((m.getModifiers() & BANNED_MODIFIERS) != 0) {
1:bd98451:             throw new IllegalArgumentException("Transaction annotation is not allowed on private or static method " + m);
1:bd98451:         }
1:bd98451:     }
1:bd98451: 
1:bd98451:     public boolean isTransactional() {
1:bd98451:         return isTransactional;
1:bd98451:     }
1:bd98451:     
1:bd98451:     public Class<?> getBeanClass() {
1:bd98451:         return beanClass;
1:bd98451:     }
1:bd98451: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:2ad9527
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ComponentTxData.class);
1:         Class<?> current = c;
1:         while (current != Object.class) {
1:             isTransactional |= parseTxData(current);
1:             for (Class<?> iface : current.getInterfaces()) {
1:             current = current.getSuperclass();
1:         }
1:     }
1:     
1:     TxType getEffectiveType(Method m) {
1:         if (txMap.containsKey(m)) {
1:                 return txMap.get(m);
1:         }
1:         try {
1:             Method effectiveMethod = beanClass.getDeclaredMethod(m.getName(), m.getParameterTypes());
1:             TxType txType = txMap.get(effectiveMethod);
1:             txMap.put(m, txType);
1:             return txType;
1:         } catch (NoSuchMethodException e) { // NOSONAR
1:             return getFromMethod(m);
1:         } catch (SecurityException e) {
1:             throw new RuntimeException("Security exception when determining effective method", e); // NOSONAR
1:         }
1:     }
1: 
1:     private TxType getFromMethod(Method m) {
1:         try {
1:             Method effectiveMethod = beanClass.getMethod(m.getName(), m.getParameterTypes());
1:             TxType txType = txMap.get(effectiveMethod);
1:             txMap.put(m, txType);
1:             return txType;
1:         } catch (NoSuchMethodException e1) {
1:             LOG.debug("No method found when scanning for transactions", e1);
1:             return null;
1:         } catch (SecurityException e1) {
1:             throw new RuntimeException("Security exception when determining effective method", e1); // NOSONAR
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("Invalid transaction annoation found", e);
1:     private static TxType getType(Transactional jtaT) {
1:     private static void assertAllowedModifier(Method m) {
commit:bd98451
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.transaction;
1: 
1: import java.lang.reflect.Method;
1: import java.lang.reflect.Modifier;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.transaction.Transactional;
1: import javax.transaction.Transactional.TxType;
1: 
1: public class ComponentTxData {
1:     private static final int BANNED_MODIFIERS = Modifier.PRIVATE | Modifier.STATIC;
1:     
1:     Map<Method, TxType> txMap = new HashMap<Method, Transactional.TxType>();
1:     private boolean isTransactional;
1:     private Class<?> beanClass;
1:     
0:     TxType getEffectiveType(Method m) {
1:         try {
0:             Method effectiveMethod = beanClass.getDeclaredMethod(m.getName(), m.getParameterTypes());
0:             return txMap.get(effectiveMethod);
0:         } catch (NoSuchMethodException e) {
1:             try {
0:                 Method effectiveMethod = beanClass.getMethod(m.getName(), m.getParameterTypes());
0:                 return txMap.get(effectiveMethod);
0:             } catch (NoSuchMethodException e1) {
0:                 return null;
0:             } catch (SecurityException e1) {
0:                 throw new RuntimeException("Security exception when determining effective method", e1);
1:             }
0:         } catch (SecurityException e) {
0:             throw new RuntimeException("Security exception when determining effective method", e);
1:         }
1:     }
1:     
1:     public ComponentTxData(Class<?> c) {
1:         beanClass = c;
1:         isTransactional = false;
1:         // Check class hierarchy
0:         while (c != Object.class) {
0:             isTransactional |= parseTxData(c);
0:             for (Class<?> iface : c.getInterfaces()) {
1:                 isTransactional |= parseTxData(iface);
1:             }
0:             c = c.getSuperclass();
1:         }
1:     }
1: 
1:     private boolean parseTxData(Class<?> c) {
1:         boolean shouldAssignInterceptor = false;
1:         TxType defaultType = getType(c.getAnnotation(Transactional.class));
1:         if (defaultType != null) {
1:             shouldAssignInterceptor = true;
1:         }
1:         for (Method m : c.getDeclaredMethods()) {
1:             try {
1:                 TxType t = getType(m.getAnnotation(Transactional.class));
1:                 if (t != null) {
1:                    assertAllowedModifier(m);
1:                    txMap.put(m, t);
1:                    shouldAssignInterceptor = true;
1:                 } else if (defaultType != null){
1:                    txMap.put(m, defaultType);
1:                 }
1:             } catch(IllegalStateException e) {
0:                 // don't break bean creation due to invalid transaction attribute
1:             }
1:         }
1: 
1:         return shouldAssignInterceptor;
1:     }
1: 
0:     private TxType getType(Transactional jtaT) {
1:         return (jtaT != null) ? jtaT.value() : null;
1:     }
1: 
0:     private void assertAllowedModifier(Method m) {
1:         if ((m.getModifiers() & BANNED_MODIFIERS) != 0) {
1:             throw new IllegalArgumentException("Transaction annotation is not allowed on private or static method " + m);
1:         }
1:     }
1: 
1:     public boolean isTransactional() {
1:         return isTransactional;
1:     }
1:     
1:     public Class<?> getBeanClass() {
1:         return beanClass;
1:     }
1: }
============================================================================