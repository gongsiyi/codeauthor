1:d38e56d: /*
1:d38e56d:  * Licensed to the Apache Software Foundation (ASF) under one
1:d38e56d:  * or more contributor license agreements.  See the NOTICE file
1:d38e56d:  * distributed with this work for additional information
1:d38e56d:  * regarding copyright ownership.  The ASF licenses this file
1:d38e56d:  * to you under the Apache License, Version 2.0 (the
1:d38e56d:  * "License"); you may not use this file except in compliance
1:d38e56d:  * with the License.  You may obtain a copy of the License at
1:d38e56d:  *
1:d38e56d:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d38e56d:  *
1:d38e56d:  * Unless required by applicable law or agreed to in writing,
1:d38e56d:  * software distributed under the License is distributed on an
1:d38e56d:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:d38e56d:  * KIND, either express or implied.  See the License for the
1:d38e56d:  * specific language governing permissions and limitations
1:d38e56d:  * under the License.
1:d38e56d:  */
1:d38e56d: package org.apache.aries.subsystem.obr.internal;
2:d38e56d: 
1:6c69a67: import java.util.Collections;
1:6c69a67: import java.util.HashMap;
1:6c69a67: import java.util.Map;
1:6c69a67: 
1:d38e56d: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:d38e56d: import org.osgi.framework.BundleActivator;
1:d38e56d: import org.osgi.framework.BundleContext;
1:d38e56d: import org.osgi.framework.ServiceReference;
1:d38e56d: import org.osgi.framework.ServiceRegistration;
1:6c69a67: import org.osgi.service.repository.Repository;
1:d38e56d: import org.osgi.util.tracker.ServiceTracker;
1:d38e56d: 
1:d38e56d: public class Activator implements BundleActivator {
1:6c69a67: 	private final Map<ServiceReference<RepositoryAdmin>, ServiceRegistration<Repository>> registrations = Collections.synchronizedMap(new HashMap<ServiceReference<RepositoryAdmin>, ServiceRegistration<Repository>>());
1:6c69a67:     
1:6c69a67:     private ServiceTracker<RepositoryAdmin, RepositoryAdmin> tracker;
1:d38e56d: 
1:6c69a67:     @Override
1:6c69a67:     public void start(final BundleContext context) {
1:6c69a67:         tracker = new ServiceTracker<RepositoryAdmin, RepositoryAdmin>(context, RepositoryAdmin.class.getName(), null) {
1:6c69a67:             @Override
1:6c69a67:         	public RepositoryAdmin addingService(ServiceReference<RepositoryAdmin> reference) {
1:6c69a67:                 registrations.put(reference, context.registerService(
1:6c69a67:                 		Repository.class,
1:6c69a67:                 		new RepositoryAdminRepository(context.getService(reference)),
1:6c69a67:                 		null));
1:d38e56d:                 return super.addingService(reference);
1:d38e56d:             }
1:6c69a67:             
1:6c69a67:             @Override
1:6c69a67:             public void removedService(ServiceReference<RepositoryAdmin> reference, RepositoryAdmin service) {
1:6c69a67:             	ServiceRegistration<Repository> registration = registrations.get(reference);
1:6c69a67:             	if (registration == null)
1:6c69a67:             		return;
1:6c69a67:             	registration.unregister();
1:6c69a67:             	super.removedService(reference, service);
1:6c69a67:             }
1:d38e56d:         };
1:6c69a67:         tracker.open();
1:d38e56d:     }
1:d38e56d: 
1:6c69a67:     @Override
1:6c69a67:     public void stop(BundleContext context) {
1:6c69a67:         tracker.close();
1:d38e56d:     }
1:d38e56d: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:6c69a67
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.osgi.service.repository.Repository;
1: 	private final Map<ServiceReference<RepositoryAdmin>, ServiceRegistration<Repository>> registrations = Collections.synchronizedMap(new HashMap<ServiceReference<RepositoryAdmin>, ServiceRegistration<Repository>>());
1:     
1:     private ServiceTracker<RepositoryAdmin, RepositoryAdmin> tracker;
1:     @Override
1:     public void start(final BundleContext context) {
1:         tracker = new ServiceTracker<RepositoryAdmin, RepositoryAdmin>(context, RepositoryAdmin.class.getName(), null) {
1:             @Override
1:         	public RepositoryAdmin addingService(ServiceReference<RepositoryAdmin> reference) {
1:                 registrations.put(reference, context.registerService(
1:                 		Repository.class,
1:                 		new RepositoryAdminRepository(context.getService(reference)),
1:                 		null));
1:             
1:             @Override
1:             public void removedService(ServiceReference<RepositoryAdmin> reference, RepositoryAdmin service) {
1:             	ServiceRegistration<Repository> registration = registrations.get(reference);
1:             	if (registration == null)
1:             		return;
1:             	registration.unregister();
1:             	super.removedService(reference, service);
1:             }
1:         tracker.open();
1:     @Override
1:     public void stop(BundleContext context) {
1:         tracker.close();
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.core.ResourceResolver;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:d38e56d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.obr.internal;
1: 
0: import org.apache.aries.subsystem.spi.ResourceResolver;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: public class Activator implements BundleActivator {
1: 
0:     private BundleContext bundleContext;
0:     private ServiceRegistration registration;
0:     private ServiceTracker repositoryAdminTracker;
1: 
0:     public void start(BundleContext context) throws Exception {
0:         bundleContext = context;
0:         repositoryAdminTracker = new ServiceTracker(bundleContext,
0:                                                     RepositoryAdmin.class.getName(),
0:                                                     null) {
0:             public Object addingService(ServiceReference reference) {
0:                 registration = bundleContext.registerService(ResourceResolver.class.getName(),
0:                                                              new ObrResourceResolver(repositoryAdminTracker),
0:                                                              null);
1:                 return super.addingService(reference);
1:             }
1:         };
0:         repositoryAdminTracker.open();
1:     }
1: 
0:     public void stop(BundleContext context) throws Exception {
0:         registration.unregister();
0:         repositoryAdminTracker.close();
1:     }
1: }
============================================================================