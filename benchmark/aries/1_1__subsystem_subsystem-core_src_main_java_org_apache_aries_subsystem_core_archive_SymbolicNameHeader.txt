1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:1c9c28b: package org.apache.aries.subsystem.core.archive;
1:1c9c28b: 
1:1c9c28b: import java.util.regex.Pattern;
1:1c9c28b: 
1:1c9c28b: public abstract class SymbolicNameHeader extends AbstractHeader {
1:1c9c28b: 	public SymbolicNameHeader(String name, String value) {
1:1c9c28b: 		super(name, value);
1:1c9c28b: 		if (getClauses().size() != 1)
1:1c9c28b: 			throw new IllegalArgumentException("Symbolic name headers must have one, and only one, clause: " + getClauses().size());
1:1c9c28b: 		if (!Pattern.matches(Grammar.SYMBOLICNAME, getClauses().get(0).getPath()))
1:1c9c28b: 			throw new IllegalArgumentException("Invalid symbolic name: " + getClauses().get(0).getPath());
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	public String getSymbolicName() {
1:1c9c28b: 		return getClauses().get(0).getPath();
1:1c9c28b: 	}
1:1c9c28b: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.regex.Pattern;
1: 
1: public abstract class SymbolicNameHeader extends AbstractHeader {
1: 	public SymbolicNameHeader(String name, String value) {
1: 		super(name, value);
1: 		if (getClauses().size() != 1)
1: 			throw new IllegalArgumentException("Symbolic name headers must have one, and only one, clause: " + getClauses().size());
1: 		if (!Pattern.matches(Grammar.SYMBOLICNAME, getClauses().get(0).getPath()))
1: 			throw new IllegalArgumentException("Invalid symbolic name: " + getClauses().get(0).getPath());
1: 	}
1: 	
1: 	public String getSymbolicName() {
1: 		return getClauses().get(0).getPath();
1: 	}
1: }
============================================================================