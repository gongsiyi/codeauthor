1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.itests;
19:f13c6ac: 
1:f13c6ac: import java.util.Currency;
1:f13c6ac: import java.util.Hashtable;
1:7e5fe70: 
1:4d12743: import javax.inject.Inject;
1:7e5fe70: 
1:6414875: import org.apache.aries.blueprint.sample.Foo;
1:f13c6ac: import org.junit.Test;
1:f13c6ac: import org.junit.runner.RunWith;
1:f13c6ac: import org.ops4j.pax.exam.Option;
1:d251156: import org.ops4j.pax.exam.junit.PaxExam;
1:d251156: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:d251156: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:f13c6ac: import org.osgi.framework.Bundle;
1:4d12743: import org.osgi.framework.BundleException;
1:a6b69c6: import org.osgi.framework.ServiceReference;
1:f13c6ac: import org.osgi.service.blueprint.container.BlueprintContainer;
1:f13c6ac: import org.osgi.service.cm.Configuration;
1:f13c6ac: import org.osgi.service.cm.ConfigurationAdmin;
1:f13c6ac: 
1:c185a5a: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1:7e5fe70: import static org.junit.Assert.assertEquals;
1:7e5fe70: import static org.junit.Assert.assertNotNull;
1:d251156: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:f13c6ac: 
1:d251156: @RunWith(PaxExam.class)
1:d251156: @ExamReactorStrategy(PerMethod.class)
1:d251156: public class TestConfigAdmin extends AbstractBlueprintIntegrationTest {
1:4d12743:     @Inject
1:4d12743:     ConfigurationAdmin ca;
1:f13c6ac: 
1:f13c6ac:     @Test
1:f13c6ac:     public void testStrategyNone() throws Exception {
1:4d12743:         ca.getConfiguration("blueprint-sample-managed.none", null).update(getConfig1());
1:4d12743:         startTestBundle();
1:f13c6ac: 
1:4d12743:         // foo should receive initial configuration
1:4d12743:         Foo foo = getComponent("none-managed");
1:f13c6ac:         assertEquals(5, foo.getA());
1:f13c6ac:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1:f13c6ac: 
1:4d12743:         // foo should not reflect changes in config
1:4d12743:         ca.getConfiguration("blueprint-sample-managed.none", null).update(getConfig2());
1:f13c6ac:         Thread.sleep(100);
1:f13c6ac:         assertEquals(5, foo.getA());
1:f13c6ac:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: 
1:f13c6ac: 
1:f13c6ac:     @Test
1:f13c6ac:     public void testStrategyContainer() throws Exception {
1:4d12743:         // foo should have received initial configuration
1:4d12743:         ca.getConfiguration("blueprint-sample-managed.container", null).update(getConfig1());
1:4d12743:         startTestBundle();
1:4d12743:         Foo foo = getComponent("container-managed");
1:f13c6ac:         assertEquals(5, foo.getA());
1:f13c6ac:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1:f13c6ac: 
1:4d12743:         // foo bean properties should have been updated 
1:4d12743:         ca.getConfiguration("blueprint-sample-managed.container", null).update(getConfig2());
1:f13c6ac:         Thread.sleep(100);
1:f13c6ac:         assertEquals(10, foo.getA());
1:f13c6ac:         assertEquals(Currency.getInstance("USD"), foo.getCurrency());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     @Test
1:f13c6ac:     public void testStrategyComponent() throws Exception {
1:4d12743:         // foo should receive initial configuration
1:4d12743:         ca.getConfiguration("blueprint-sample-managed.component", null).update(getConfig1());
1:4d12743:         startTestBundle();
1:4d12743:         Foo foo = getComponent("component-managed");
1:f13c6ac:         assertEquals(5, foo.getA());
1:f13c6ac:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1:f13c6ac: 
1:4d12743:         // Foo.update() should have been called but the bean properties should not have been updated
1:4d12743:         ca.getConfiguration("blueprint-sample-managed.component", null).update(getConfig2());
1:f13c6ac:         Thread.sleep(100);
1:f13c6ac:         assertEquals(5, foo.getA());
1:f13c6ac:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1:f13c6ac:         assertNotNull(foo.getProps());
1:f13c6ac:         assertEquals("10", foo.getProps().get("a"));
1:f13c6ac:         assertEquals("USD", foo.getProps().get("currency"));
1:4d12743:     }
1:f13c6ac: 
1:d251156:     @SuppressWarnings("rawtypes")
1:f13c6ac:     @Test
1:f13c6ac:     public void testManagedServiceFactory() throws Exception {
1:f13c6ac:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory", null);
1:4d12743:         cf.update(getConfig1());
1:4d12743:         startTestBundle();
1:f13c6ac:         
1:a6b69c6:         // Make sure only one service is registered
1:a6b69c6:         // Ask the service registry, not the container, since the container might have got it wrong :)
1:a0a6986:         Foo foo = context().getService(Foo.class, "(service.pid=blueprint-sample-managed-service-factory.*)");
1:a6b69c6:         ServiceReference[] refs = context().getAllServiceReferences(Foo.class.getName(), "(service.pid=blueprint-sample-managed-service-factory.*)");
1:a6b69c6:         assertNotNull("No services were registered for the managed service factory", refs);
1:a6b69c6:         assertEquals("Multiple services were registered for the same pid.", 1, refs.length);
1:4d12743:     }
1:f13c6ac: 
1:1591a51:     @Test
1:1591a51:     public void testPlaceholder() throws Exception {
1:1591a51:         Configuration cf = ca.getConfiguration("blueprint-sample-placeholder", null);
1:1591a51:         cf.update(getConfig3());
1:1591a51:         startTestBundle();
1:1591a51:     }
1:1591a51: 
1:4d12743:     private Hashtable<String, String> getConfig1() {
4:f13c6ac:         Hashtable<String,String> props = new Hashtable<String,String>();
4:f13c6ac:         props.put("a", "5");
4:f13c6ac:         props.put("currency", "PLN");
1:4d12743:         return props;
1:4d12743:     }
1:f13c6ac: 
1:4d12743:     private Hashtable<String, String> getConfig2() {
1:4d12743:         Hashtable<String, String> props;
3:f13c6ac:         props = new Hashtable<String,String>();
3:f13c6ac:         props.put("a", "10");
3:f13c6ac:         props.put("currency", "USD");
1:4d12743:         return props;
1:4d12743:     }
1:f13c6ac: 
1:1591a51:     private Hashtable<String, String> getConfig3() {
1:1591a51:         Hashtable<String, String> props;
1:1591a51:         props = new Hashtable<String,String>();
1:1591a51:         props.put("key.b", "10");
1:1591a51:         return props;
1:1591a51:     }
1:1591a51: 
1:4d12743:     private <T>T getComponent(String componentId) {
1:4d12743:         BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
4:f13c6ac:         assertNotNull(blueprintContainer);
1:a0a6986: 
1:4d12743:         @SuppressWarnings("unchecked")
1:4d12743:         T component = (T)blueprintContainer.getComponentInstance(componentId);
1:4d12743:         assertNotNull(component);
1:4d12743:         return component;
1:f13c6ac:     }
1:f13c6ac:     
1:4d12743:     private void startTestBundle() throws BundleException {
1:4d12743:         Bundle bundle = context().getBundleByName("org.apache.aries.blueprint.sample");
4:f13c6ac:         assertNotNull(bundle);
4:f13c6ac:         bundle.start();
1:f13c6ac:     }
1:f13c6ac: 
1:d251156:     @org.ops4j.pax.exam.Configuration
1:f13c6ac:     public static Option[] configuration() {
1:d251156:         return new Option[] {
1:d251156:             junitBundles(),
1:86224ba:             Helper.blueprintBundles(),
1:c185a5a:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample", false)
1:d251156:         };
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1591a51
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testPlaceholder() throws Exception {
1:         Configuration cf = ca.getConfiguration("blueprint-sample-placeholder", null);
1:         cf.update(getConfig3());
1:         startTestBundle();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     private Hashtable<String, String> getConfig3() {
1:         Hashtable<String, String> props;
1:         props = new Hashtable<String,String>();
1:         props.put("key.b", "10");
1:         return props;
1:     }
1: 
commit:c185a5a
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
/////////////////////////////////////////////////////////////////////////
1:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample", false)
commit:a0a6986
/////////////////////////////////////////////////////////////////////////
1:         Foo foo = context().getService(Foo.class, "(service.pid=blueprint-sample-managed-service-factory.*)");
0:         assertNotNull(foo);
1: 
commit:7e5fe70
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
/////////////////////////////////////////////////////////////////////////
1: 
0: //        Thread.sleep(100);
1: 
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.itests;
1: 
1: import java.util.Currency;
1: import java.util.Hashtable;
1: 
0: import org.apache.geronimo.blueprint.sample.Foo;
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.felix;
0: import static org.ops4j.pax.exam.CoreOptions.mavenConfiguration;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.CoreOptions.customFramework;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.OptionUtils;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class TestConfigAdmin extends AbstractIntegrationTest {
1: 
1:     @Test
1:     public void testStrategyNone() throws Exception {
0:         ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
0:         Configuration cf = ca.getConfiguration("blueprint-sample-managed.none", null);
1:         Hashtable<String,String> props = new Hashtable<String,String>();
1:         props.put("a", "5");
1:         props.put("currency", "PLN");
0:         cf.update(props);
1: 
0:         Bundle bundle = getInstalledBundle("org.apache.geronimo.blueprint.sample");
1:         assertNotNull(bundle);
1:         bundle.start();
1: 
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.geronimo.blueprint.sample", 5000);
1:         assertNotNull(blueprintContainer);
1: 
0:         Foo foo = (Foo) blueprintContainer.getComponentInstance("none-managed");
0:         assertNotNull(foo);
1: 
1:         assertEquals(5, foo.getA());
1:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1: 
1:         props = new Hashtable<String,String>();
1:         props.put("a", "10");
1:         props.put("currency", "USD");
0:         cf = ca.getConfiguration("blueprint-sample-managed.none", null);
0:         cf.update(props);
1: 
1:         Thread.sleep(100);
1: 
1:         assertEquals(5, foo.getA());
1:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1:     }
1: 
1:     @Test
1:     public void testStrategyContainer() throws Exception {
0:         ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
0:         Configuration cf = ca.getConfiguration("blueprint-sample-managed.container", null);
1:         Hashtable<String,String> props = new Hashtable<String,String>();
1:         props.put("a", "5");
1:         props.put("currency", "PLN");
0:         cf.update(props);
1: 
0:         Bundle bundle = getInstalledBundle("org.apache.geronimo.blueprint.sample");
1:         assertNotNull(bundle);
1:         bundle.start();
1: 
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.geronimo.blueprint.sample", 5000);
1:         assertNotNull(blueprintContainer);
1: 
0:         Foo foo = (Foo) blueprintContainer.getComponentInstance("container-managed");
0:         assertNotNull(foo);
1: 
1:         assertEquals(5, foo.getA());
1:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1: 
1:         props = new Hashtable<String,String>();
1:         props.put("a", "10");
1:         props.put("currency", "USD");
0:         cf.update(props);
1: 
1:         Thread.sleep(100);
1: 
1:         assertEquals(10, foo.getA());
1:         assertEquals(Currency.getInstance("USD"), foo.getCurrency());
1:     }
1: 
1:     @Test
1:     public void testStrategyComponent() throws Exception {
0:         ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
0:         Configuration cf = ca.getConfiguration("blueprint-sample-managed.component", null);
1:         Hashtable<String,String> props = new Hashtable<String,String>();
1:         props.put("a", "5");
1:         props.put("currency", "PLN");
0:         cf.update(props);
1: 
0:         Bundle bundle = getInstalledBundle("org.apache.geronimo.blueprint.sample");
1:         assertNotNull(bundle);
1:         bundle.start();
1: 
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.geronimo.blueprint.sample", 5000);
1:         assertNotNull(blueprintContainer);
1: 
0:         Foo foo = (Foo) blueprintContainer.getComponentInstance("component-managed");
0:         assertNotNull(foo);
1: 
1:         assertEquals(5, foo.getA());
1:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1: 
1:         props = new Hashtable<String,String>();
1:         props.put("a", "10");
1:         props.put("currency", "USD");
0:         cf.update(props);
1: 
1:         Thread.sleep(100);
1: 
1:         assertEquals(5, foo.getA());
1:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1:         assertNotNull(foo.getProps());
1:         assertEquals("10", foo.getProps().get("a"));
1:         assertEquals("USD", foo.getProps().get("currency"));
1:     }
1: 
1:     @Test
1:     public void testManagedServiceFactory() throws Exception {
0:         ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
1:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory", null);
1:         Hashtable<String,String> props = new Hashtable<String,String>();
1:         props.put("a", "5");
1:         props.put("currency", "PLN");
0:         cf.update(props);
1: 
0:         Bundle bundle = getInstalledBundle("org.apache.geronimo.blueprint.sample");
1:         assertNotNull(bundle);
1:         bundle.start();
1: 
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.geronimo.blueprint.sample", 5000);
1:         assertNotNull(blueprintContainer);
1: 
0:         Thread.sleep(5000);
1:     }
1: 
0:     @org.ops4j.pax.exam.junit.Configuration
1:     public static Option[] configuration() {
0:         Option[] options = options(
0:             // Log
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:             // Felix Config Admin
0:             mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:             // Felix mvn url handler
0:             mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
1: 
0:             // this is how you set the default log level when using pax logging (logProfile)
0:             systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
0:             // Bundles
0:             mavenBundle("org.apache.geronimo.blueprint", "geronimo-blueprint"),
0:             mavenBundle("org.apache.geronimo.blueprint", "org.apache.geronimo.blueprint.sample").noStart(),
1: 
0: //            org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
1: 
0:             equinox().version("3.5.0")
0:         );
0:         return options;
1:     }
1: 
1: }
author:Christian Schneider
-------------------------------------------------------------------------------
commit:4d12743
/////////////////////////////////////////////////////////////////////////
1: import javax.inject.Inject;
0: 
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleException;
/////////////////////////////////////////////////////////////////////////
1:     @Inject
1:     ConfigurationAdmin ca;
1:         ca.getConfiguration("blueprint-sample-managed.none", null).update(getConfig1());
1:         startTestBundle();
1:         // foo should receive initial configuration
1:         Foo foo = getComponent("none-managed");
1:         // foo should not reflect changes in config
1:         ca.getConfiguration("blueprint-sample-managed.none", null).update(getConfig2());
0: 
0: 
1:         // foo should have received initial configuration
1:         ca.getConfiguration("blueprint-sample-managed.container", null).update(getConfig1());
1:         startTestBundle();
1:         Foo foo = getComponent("container-managed");
1:         // foo bean properties should have been updated 
1:         ca.getConfiguration("blueprint-sample-managed.container", null).update(getConfig2());
1:         // foo should receive initial configuration
1:         ca.getConfiguration("blueprint-sample-managed.component", null).update(getConfig1());
1:         startTestBundle();
1:         Foo foo = getComponent("component-managed");
1:         // Foo.update() should have been called but the bean properties should not have been updated
1:         ca.getConfiguration("blueprint-sample-managed.component", null).update(getConfig2());
/////////////////////////////////////////////////////////////////////////
1:         cf.update(getConfig1());
1:         startTestBundle();
1:     }
1:     private Hashtable<String, String> getConfig1() {
0:         Hashtable<String,String> props = new Hashtable<String,String>();
0:         props.put("a", "5");
0:         props.put("currency", "PLN");
1:         return props;
1:     }
0: 
1:     private Hashtable<String, String> getConfig2() {
1:         Hashtable<String, String> props;
0:         props = new Hashtable<String,String>();
0:         props.put("a", "10");
0:         props.put("currency", "USD");
1:         return props;
1:     }
0: 
1:     private <T>T getComponent(String componentId) {
1:         BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
0:         assertNotNull(blueprintContainer);
0: 
1:         @SuppressWarnings("unchecked")
1:         T component = (T)blueprintContainer.getComponentInstance(componentId);
1:         assertNotNull(component);
1:         return component;
1:     }
0:     
1:     private void startTestBundle() throws BundleException {
1:         Bundle bundle = context().getBundleByName("org.apache.aries.blueprint.sample");
0:         assertNotNull(bundle);
0:         bundle.start();
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
0: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerMethod.class)
1: public class TestConfigAdmin extends AbstractBlueprintIntegrationTest {
/////////////////////////////////////////////////////////////////////////
0:         
0:         Thread.sleep(2000);
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:     @org.ops4j.pax.exam.Configuration
1:         return new Option[] {
1:             junitBundles(),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart()
1:         };
author:Holly Cummins
-------------------------------------------------------------------------------
commit:a6b69c6
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.ServiceReference;
/////////////////////////////////////////////////////////////////////////
0: 
0:         
0:         
0:         
1:         // Make sure only one service is registered
1:         // Ask the service registry, not the container, since the container might have got it wrong :)
1:         ServiceReference[] refs = context().getAllServiceReferences(Foo.class.getName(), "(service.pid=blueprint-sample-managed-service-factory.*)");
0:         
1:         assertNotNull("No services were registered for the managed service factory", refs);
1:         assertEquals("Multiple services were registered for the same pid.", 1, refs.length);
0:         
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.itest.AbstractIntegrationTest;
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
0: 
0:         ConfigurationAdmin ca = context().getService(ConfigurationAdmin.class);
0:         Bundle bundle = context().getBundleByName("org.apache.aries.blueprint.sample");
0:         BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
0:         ConfigurationAdmin ca = context().getService(ConfigurationAdmin.class);
0:         Bundle bundle = context().getBundleByName("org.apache.aries.blueprint.sample");
0:         BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
0:         ConfigurationAdmin ca = context().getService(ConfigurationAdmin.class);
0:         Bundle bundle = context().getBundleByName("org.apache.aries.blueprint.sample");
0:         BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
0:         ConfigurationAdmin ca = context().getService(ConfigurationAdmin.class);
0:         Bundle bundle = context().getBundleByName("org.apache.aries.blueprint.sample");
0:         BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
0:         return testOptions(
1:             Helper.blueprintBundles(),
0:             paxLogging("DEBUG"),
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:             mavenBundle("asm", "asm-all"),
commit:cdc5675
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.osgi","org.osgi.compendium"),
/////////////////////////////////////////////////////////////////////////
0: }
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:79902ae
/////////////////////////////////////////////////////////////////////////
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample", DEFAULT_TIMEOUT);
/////////////////////////////////////////////////////////////////////////
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample", DEFAULT_TIMEOUT);
/////////////////////////////////////////////////////////////////////////
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample", DEFAULT_TIMEOUT);
/////////////////////////////////////////////////////////////////////////
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample", DEFAULT_TIMEOUT);
author:Lin Sun
-------------------------------------------------------------------------------
commit:2b87d24
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: 
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries", "org.apache.aries.util"),
commit:f263a8e
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:440effc
/////////////////////////////////////////////////////////////////////////
0:         options = updateOptions(options);
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.itests;
1: import org.apache.aries.blueprint.sample.Foo;
commit:118f5f9
/////////////////////////////////////////////////////////////////////////
0:         Bundle bundle = getInstalledBundle("org.apache.aries.blueprint.sample");
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample", 5000);
/////////////////////////////////////////////////////////////////////////
0:         Bundle bundle = getInstalledBundle("org.apache.aries.blueprint.sample");
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample", 5000);
/////////////////////////////////////////////////////////////////////////
0:         Bundle bundle = getInstalledBundle("org.apache.aries.blueprint.sample");
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample", 5000);
/////////////////////////////////////////////////////////////////////////
0:         Bundle bundle = getInstalledBundle("org.apache.aries.blueprint.sample");
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample", 5000);
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.blueprint", "aries-blueprint"),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart(),
============================================================================