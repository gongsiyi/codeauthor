1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.compendium.cm;
2:f13c6ac: 
1:f13c6ac: import java.io.IOException;
1:1591a51: import java.util.Arrays;
1:1591a51: import java.util.Collections;
1:1591a51: import java.util.Comparator;
1:1591a51: import java.util.Dictionary;
1:1591a51: import java.util.Enumeration;
1:1591a51: import java.util.Hashtable;
1:f13c6ac: 
1:1591a51: import org.osgi.framework.BundleContext;
1:f13c6ac: import org.osgi.framework.Constants;
1:f13c6ac: import org.osgi.framework.InvalidSyntaxException;
1:1591a51: import org.osgi.framework.ServiceReference;
1:f13c6ac: import org.osgi.service.cm.Configuration;
1:f13c6ac: import org.osgi.service.cm.ConfigurationAdmin;
1:1591a51: import org.osgi.service.cm.ConfigurationPlugin;
1:f13c6ac: 
1:f13c6ac: public class CmUtils  {
1:f13c6ac: 
1:f13c6ac:     private CmUtils() {        
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public static Configuration getConfiguration(ConfigurationAdmin configAdmin, String persistentId) throws IOException {
1:f13c6ac:         String filter = '(' + Constants.SERVICE_PID + '=' + persistentId + ')';
1:f13c6ac:         Configuration[] configs;
1:f13c6ac:         try {
1:f13c6ac:             configs = configAdmin.listConfigurations(filter);
1:f13c6ac:         } catch (InvalidSyntaxException e) {
1:f13c6ac:             // this should not happen
1:f13c6ac:             throw new RuntimeException("Invalid filter: " + filter);
1:f13c6ac:         }
1:f13c6ac:         if (configs != null && configs.length > 0) {
1:f13c6ac:             return configs[0];
1:f13c6ac:         } else {
1:f13c6ac:             // TODO: what should we do?
1:f13c6ac:             // throw new RuntimeException("No configuration object for pid=" + persistentId);
1:f13c6ac:             return null;
1:f13c6ac:         }
1:f13c6ac:     }
1:1591a51: 
1:1591a51:     public static Dictionary<String, Object> getProperties(ServiceReference service, String persistentId) throws IOException {
1:1591a51:         BundleContext bc = service.getBundle().getBundleContext();
1:1591a51:         ServiceReference<ConfigurationAdmin> caRef = bc.getServiceReference(ConfigurationAdmin.class);
1:1591a51:         try {
1:1591a51:             ConfigurationAdmin ca = bc.getService(caRef);
1:1591a51:             Configuration config = getConfiguration(ca, persistentId);
1:1591a51:             if (config != null) {
1:1591a51:                 Dictionary<String, Object> props = new CaseInsensitiveDictionary(config.getProperties());
1:1591a51:                 BundleContext caBc = caRef.getBundle().getBundleContext();
1:1591a51:                 callPlugins(caBc, props, service, persistentId, null);
1:1591a51:                 return props;
1:1591a51:             } else {
1:1591a51:                 return null;
1:1591a51:             }
1:1591a51:         } finally {
1:1591a51:             bc.ungetService(caRef);
1:1591a51:         }
1:1591a51:     }
1:1591a51: 
1:1591a51:     private static void callPlugins(final BundleContext bundleContext,
1:1591a51:                                     final Dictionary<String, Object> props,
1:1591a51:                                     final ServiceReference sr,
1:1591a51:                                     final String configPid,
1:1591a51:                                     final String factoryPid) {
1:1591a51:         ServiceReference[] plugins = null;
1:1591a51:         try {
1:1591a51:             final String targetPid = (factoryPid == null) ? configPid : factoryPid;
1:1591a51:             String filter = "(|(!(cm.target=*))(cm.target=" + targetPid + "))";
1:1591a51:             plugins = bundleContext.getServiceReferences(ConfigurationPlugin.class.getName(), filter);
1:1591a51:         } catch (InvalidSyntaxException ise) {
1:1591a51:             // no filter, no exception ...
1:1591a51:         }
1:1591a51: 
1:1591a51:         // abort early if there are no plugins
1:1591a51:         if (plugins == null || plugins.length == 0) {
1:1591a51:             return;
1:1591a51:         }
1:1591a51: 
1:1591a51:         // sort the plugins by their service.cmRanking
1:1591a51:         if (plugins.length > 1) {
1:1591a51:             Arrays.sort(plugins, CM_RANKING);
1:1591a51:         }
1:1591a51: 
1:1591a51:         // call the plugins in order
1:1591a51:         for (ServiceReference pluginRef : plugins) {
1:1591a51:             ConfigurationPlugin plugin = (ConfigurationPlugin) bundleContext.getService(pluginRef);
1:1591a51:             if (plugin != null) {
1:1591a51:                 try {
1:1591a51:                     plugin.modifyConfiguration(sr, props);
1:1591a51:                 } catch (Throwable t) {
1:1591a51:                     // Ignore
1:1591a51:                 } finally {
1:1591a51:                     // ensure ungetting the plugin
1:1591a51:                     bundleContext.ungetService(pluginRef);
1:1591a51:                 }
1:1591a51:                 setAutoProperties(props, configPid, factoryPid);
1:1591a51:             }
1:1591a51:         }
1:1591a51:     }
1:1591a51: 
1:1591a51:     private static void setAutoProperties( Dictionary<String, Object> properties, String pid, String factoryPid )
1:1591a51:     {
1:1591a51:         replaceProperty(properties, Constants.SERVICE_PID, pid);
1:1591a51:         replaceProperty(properties, ConfigurationAdmin.SERVICE_FACTORYPID, factoryPid);
1:1591a51:         properties.remove(ConfigurationAdmin.SERVICE_BUNDLELOCATION);
1:1591a51:     }
1:1591a51: 
1:1591a51:     private static void replaceProperty(Dictionary<String, Object> properties, String key, String value) {
1:1591a51:         if (value == null) {
1:1591a51:             properties.remove(key);
1:1591a51:         } else {
1:1591a51:             properties.put(key, value);
1:1591a51:         }
1:1591a51:     }
1:1591a51: 
1:1591a51:     private static Comparator<ServiceReference> CM_RANKING = new Comparator<ServiceReference>() {
1:1591a51:         @Override
1:1591a51:         public int compare(ServiceReference sr1, ServiceReference sr2) {
1:1591a51:             final long rank1 = getLong(sr1, ConfigurationPlugin.CM_RANKING);
1:1591a51:             final long rank2 = getLong(sr2, ConfigurationPlugin.CM_RANKING);
1:1591a51:             if (rank1 == rank2) {
1:1591a51:                 return 0;
1:1591a51:             }
1:1591a51:             return (rank1 < rank2) ? -1 : 1;
1:1591a51:         }
1:1591a51: 
1:1591a51:         protected long getLong(ServiceReference sr, String property) {
1:1591a51:             Object rankObj = sr.getProperty(property);
1:1591a51:             if (rankObj instanceof Number) {
1:1591a51:                 return ((Number) rankObj).longValue();
1:1591a51:             }
1:1591a51:             return 0;
1:1591a51:         }
1:1591a51:     };
1:1591a51: 
1:1591a51:     private static class CaseInsensitiveDictionary extends Dictionary<String, Object> {
1:1591a51:         private final Hashtable<String, Object> internalMap = new Hashtable<String, Object>();
1:1591a51:         private final Hashtable<String, String> originalKeys = new Hashtable<String, String>();
1:1591a51: 
1:1591a51:         public CaseInsensitiveDictionary(Dictionary<String, Object> props) {
1:1591a51:             if (props != null) {
1:1591a51:                 Enumeration<String> keys = props.keys();
1:1591a51:                 while (keys.hasMoreElements()) {
1:1591a51:                     // check the correct syntax of the key
1:1591a51:                     String key = checkKey(keys.nextElement());
1:1591a51:                     // check uniqueness of key
1:1591a51:                     String lowerCase = key.toLowerCase();
1:1591a51:                     if (internalMap.containsKey(lowerCase)) {
1:1591a51:                         throw new IllegalArgumentException("Key [" + key + "] already present in different case");
1:1591a51:                     }
1:1591a51:                     // check the value
1:1591a51:                     Object value = props.get(key);
1:1591a51:                     checkValue(value);
1:1591a51:                     // add the key/value pair
1:1591a51:                     internalMap.put(lowerCase, value);
1:1591a51:                     originalKeys.put(lowerCase, key);
1:1591a51:                 }
1:1591a51:             }
1:1591a51:         }
1:1591a51: 
1:1591a51:         public Enumeration<Object> elements() {
1:1591a51:             return Collections.enumeration(internalMap.values());
1:1591a51:         }
1:1591a51: 
1:1591a51:         public Object get(Object keyObj) {
1:1591a51:             String lowerCase = checkKey(keyObj == null ? null : keyObj.toString()).toLowerCase();
1:1591a51:             return internalMap.get(lowerCase);
1:1591a51:         }
1:1591a51: 
1:1591a51:         public boolean isEmpty() {
1:1591a51:             return internalMap.isEmpty();
1:1591a51:         }
1:1591a51: 
1:1591a51:         public Enumeration<String> keys() {
1:1591a51:             return Collections.enumeration(originalKeys.values());
1:1591a51:         }
1:1591a51: 
1:1591a51:         public Object put(String key, Object value) {
1:1591a51:             String lowerCase = checkKey(key).toLowerCase();
1:1591a51:             checkValue(value);
1:1591a51:             originalKeys.put(lowerCase, key);
1:1591a51:             return internalMap.put(lowerCase, value);
1:1591a51:         }
1:1591a51: 
1:1591a51:         public Object remove(Object keyObj) {
1:1591a51:             String lowerCase = checkKey(keyObj == null ? null : keyObj.toString()).toLowerCase();
1:1591a51:             originalKeys.remove(lowerCase);
1:1591a51:             return internalMap.remove(lowerCase);
1:1591a51:         }
1:1591a51: 
1:1591a51:         public int size() {
1:1591a51:             return internalMap.size();
1:1591a51:         }
1:1591a51: 
1:1591a51:         static String checkKey(String key) {
1:1591a51:             if (key == null || key.length() == 0) {
1:1591a51:                 throw new IllegalArgumentException("Key must not be null nor an empty string");
1:1591a51:             }
1:1591a51:             return key;
1:1591a51:         }
1:1591a51: 
1:1591a51:         static Object checkValue(Object value) {
1:1591a51:             if (value == null) {
1:1591a51:                 throw new IllegalArgumentException("Value must not be null");
1:1591a51:             }
1:1591a51:             return value;
1:1591a51:         }
1:1591a51: 
1:1591a51:         public String toString() {
1:1591a51:             return internalMap.toString();
1:1591a51:         }
1:1591a51: 
1:1591a51:     }
1:1591a51: 
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1591a51
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.Hashtable;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.cm.ConfigurationPlugin;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static Dictionary<String, Object> getProperties(ServiceReference service, String persistentId) throws IOException {
1:         BundleContext bc = service.getBundle().getBundleContext();
1:         ServiceReference<ConfigurationAdmin> caRef = bc.getServiceReference(ConfigurationAdmin.class);
1:         try {
1:             ConfigurationAdmin ca = bc.getService(caRef);
1:             Configuration config = getConfiguration(ca, persistentId);
1:             if (config != null) {
1:                 Dictionary<String, Object> props = new CaseInsensitiveDictionary(config.getProperties());
1:                 BundleContext caBc = caRef.getBundle().getBundleContext();
1:                 callPlugins(caBc, props, service, persistentId, null);
1:                 return props;
1:             } else {
1:                 return null;
1:             }
1:         } finally {
1:             bc.ungetService(caRef);
1:         }
1:     }
1: 
1:     private static void callPlugins(final BundleContext bundleContext,
1:                                     final Dictionary<String, Object> props,
1:                                     final ServiceReference sr,
1:                                     final String configPid,
1:                                     final String factoryPid) {
1:         ServiceReference[] plugins = null;
1:         try {
1:             final String targetPid = (factoryPid == null) ? configPid : factoryPid;
1:             String filter = "(|(!(cm.target=*))(cm.target=" + targetPid + "))";
1:             plugins = bundleContext.getServiceReferences(ConfigurationPlugin.class.getName(), filter);
1:         } catch (InvalidSyntaxException ise) {
1:             // no filter, no exception ...
1:         }
1: 
1:         // abort early if there are no plugins
1:         if (plugins == null || plugins.length == 0) {
1:             return;
1:         }
1: 
1:         // sort the plugins by their service.cmRanking
1:         if (plugins.length > 1) {
1:             Arrays.sort(plugins, CM_RANKING);
1:         }
1: 
1:         // call the plugins in order
1:         for (ServiceReference pluginRef : plugins) {
1:             ConfigurationPlugin plugin = (ConfigurationPlugin) bundleContext.getService(pluginRef);
1:             if (plugin != null) {
1:                 try {
1:                     plugin.modifyConfiguration(sr, props);
1:                 } catch (Throwable t) {
1:                     // Ignore
1:                 } finally {
1:                     // ensure ungetting the plugin
1:                     bundleContext.ungetService(pluginRef);
1:                 }
1:                 setAutoProperties(props, configPid, factoryPid);
1:             }
1:         }
1:     }
1: 
1:     private static void setAutoProperties( Dictionary<String, Object> properties, String pid, String factoryPid )
1:     {
1:         replaceProperty(properties, Constants.SERVICE_PID, pid);
1:         replaceProperty(properties, ConfigurationAdmin.SERVICE_FACTORYPID, factoryPid);
1:         properties.remove(ConfigurationAdmin.SERVICE_BUNDLELOCATION);
1:     }
1: 
1:     private static void replaceProperty(Dictionary<String, Object> properties, String key, String value) {
1:         if (value == null) {
1:             properties.remove(key);
1:         } else {
1:             properties.put(key, value);
1:         }
1:     }
1: 
1:     private static Comparator<ServiceReference> CM_RANKING = new Comparator<ServiceReference>() {
1:         @Override
1:         public int compare(ServiceReference sr1, ServiceReference sr2) {
1:             final long rank1 = getLong(sr1, ConfigurationPlugin.CM_RANKING);
1:             final long rank2 = getLong(sr2, ConfigurationPlugin.CM_RANKING);
1:             if (rank1 == rank2) {
1:                 return 0;
1:             }
1:             return (rank1 < rank2) ? -1 : 1;
1:         }
1: 
1:         protected long getLong(ServiceReference sr, String property) {
1:             Object rankObj = sr.getProperty(property);
1:             if (rankObj instanceof Number) {
1:                 return ((Number) rankObj).longValue();
1:             }
1:             return 0;
1:         }
1:     };
1: 
1:     private static class CaseInsensitiveDictionary extends Dictionary<String, Object> {
1:         private final Hashtable<String, Object> internalMap = new Hashtable<String, Object>();
1:         private final Hashtable<String, String> originalKeys = new Hashtable<String, String>();
1: 
1:         public CaseInsensitiveDictionary(Dictionary<String, Object> props) {
1:             if (props != null) {
1:                 Enumeration<String> keys = props.keys();
1:                 while (keys.hasMoreElements()) {
1:                     // check the correct syntax of the key
1:                     String key = checkKey(keys.nextElement());
1:                     // check uniqueness of key
1:                     String lowerCase = key.toLowerCase();
1:                     if (internalMap.containsKey(lowerCase)) {
1:                         throw new IllegalArgumentException("Key [" + key + "] already present in different case");
1:                     }
1:                     // check the value
1:                     Object value = props.get(key);
1:                     checkValue(value);
1:                     // add the key/value pair
1:                     internalMap.put(lowerCase, value);
1:                     originalKeys.put(lowerCase, key);
1:                 }
1:             }
1:         }
1: 
1:         public Enumeration<Object> elements() {
1:             return Collections.enumeration(internalMap.values());
1:         }
1: 
1:         public Object get(Object keyObj) {
1:             String lowerCase = checkKey(keyObj == null ? null : keyObj.toString()).toLowerCase();
1:             return internalMap.get(lowerCase);
1:         }
1: 
1:         public boolean isEmpty() {
1:             return internalMap.isEmpty();
1:         }
1: 
1:         public Enumeration<String> keys() {
1:             return Collections.enumeration(originalKeys.values());
1:         }
1: 
1:         public Object put(String key, Object value) {
1:             String lowerCase = checkKey(key).toLowerCase();
1:             checkValue(value);
1:             originalKeys.put(lowerCase, key);
1:             return internalMap.put(lowerCase, value);
1:         }
1: 
1:         public Object remove(Object keyObj) {
1:             String lowerCase = checkKey(keyObj == null ? null : keyObj.toString()).toLowerCase();
1:             originalKeys.remove(lowerCase);
1:             return internalMap.remove(lowerCase);
1:         }
1: 
1:         public int size() {
1:             return internalMap.size();
1:         }
1: 
1:         static String checkKey(String key) {
1:             if (key == null || key.length() == 0) {
1:                 throw new IllegalArgumentException("Key must not be null nor an empty string");
1:             }
1:             return key;
1:         }
1: 
1:         static Object checkValue(Object value) {
1:             if (value == null) {
1:                 throw new IllegalArgumentException("Value must not be null");
1:             }
1:             return value;
1:         }
1: 
1:         public String toString() {
1:             return internalMap.toString();
1:         }
1: 
1:     }
1: 
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.compendium.cm;
1: 
1: import java.io.IOException;
1: 
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: 
1: public class CmUtils  {
1: 
1:     private CmUtils() {        
1:     }
1:     
1:     public static Configuration getConfiguration(ConfigurationAdmin configAdmin, String persistentId) throws IOException {
1:         String filter = '(' + Constants.SERVICE_PID + '=' + persistentId + ')';
1:         Configuration[] configs;
1:         try {
1:             configs = configAdmin.listConfigurations(filter);
1:         } catch (InvalidSyntaxException e) {
1:             // this should not happen
1:             throw new RuntimeException("Invalid filter: " + filter);
1:         }
1:         if (configs != null && configs.length > 0) {
1:             return configs[0];
1:         } else {
1:             // TODO: what should we do?
1:             // throw new RuntimeException("No configuration object for pid=" + persistentId);
1:             return null;
1:         }
1:     }
1:   
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.compendium.cm;
============================================================================