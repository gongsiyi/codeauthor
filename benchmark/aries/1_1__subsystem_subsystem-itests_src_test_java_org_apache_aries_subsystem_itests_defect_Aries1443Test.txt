1:74c0437: /*
1:74c0437:  * Licensed to the Apache Software Foundation (ASF) under one
1:74c0437:  * or more contributor license agreements.  See the NOTICE file
1:74c0437:  * distributed with this work for additional information
1:74c0437:  * regarding copyright ownership.  The ASF licenses this file
1:74c0437:  * to you under the Apache License, Version 2.0 (the
1:74c0437:  * "License"); you may not use this file except in compliance
1:74c0437:  * with the License.  You may obtain a copy of the License at
1:74c0437:  *
1:74c0437:  *   http://www.apache.org/licenses/LICENSE-2.0
1:74c0437:  *
1:74c0437:  * Unless required by applicable law or agreed to in writing,
1:74c0437:  * software distributed under the License is distributed on an
1:74c0437:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:74c0437:  * KIND, either express or implied.  See the License for the
1:74c0437:  * specific language governing permissions and limitations
1:74c0437:  * under the License.
1:74c0437:  */
1:74c0437: package org.apache.aries.subsystem.itests.defect;
1:74c0437: 
1:74c0437: import static org.junit.Assert.assertEquals;
1:74c0437: 
1:74c0437: import java.util.Collection;
1:74c0437: import java.util.Collections;
1:74c0437: import java.util.Map;
1:74c0437: 
1:74c0437: import org.apache.aries.subsystem.core.archive.AriesProvisionDependenciesDirective;
1:74c0437: import org.apache.aries.subsystem.core.internal.Activator;
1:74c0437: import org.apache.aries.subsystem.core.internal.SystemRepository;
1:74c0437: import org.apache.aries.subsystem.itests.SubsystemTest;
1:74c0437: import org.apache.aries.subsystem.itests.util.BundleArchiveBuilder;
1:74c0437: import org.apache.aries.subsystem.itests.util.SubsystemArchiveBuilder;
1:74c0437: import org.apache.aries.subsystem.itests.util.TestRequirement;
1:74c0437: import org.junit.Test;
1:74c0437: import org.osgi.resource.Capability;
1:74c0437: import org.osgi.resource.Requirement;
1:74c0437: import org.osgi.service.subsystem.Subsystem;
1:74c0437: import org.osgi.service.subsystem.SubsystemConstants;
1:74c0437: 
1:74c0437: public class Aries1443Test extends SubsystemTest {
1:74c0437: 	@Test
1:74c0437:     public void testProvisionDependenciesInstall() throws Exception {
1:74c0437: 		test(AriesProvisionDependenciesDirective.VALUE_INSTALL);
1:74c0437:     }
1:74c0437: 	
1:74c0437: 	@Test
1:74c0437:     public void testProvisionDependenciesResolve() throws Exception {
1:74c0437: 		test(AriesProvisionDependenciesDirective.VALUE_RESOLVE);
1:74c0437:     }
1:74c0437: 	
1:74c0437: 	private void test(String apacheAriesProvisionDependencies) throws Exception {
1:74c0437: 		Subsystem root = getRootSubsystem();
1:74c0437: 		Subsystem composite = installSubsystem(
1:74c0437: 				root,
1:74c0437: 				"composite", 
1:74c0437: 				new SubsystemArchiveBuilder()
1:74c0437: 						.symbolicName("composite")
1:74c0437: 						.type(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE 
1:74c0437: 								+ ';' 
1:74c0437: 								+ AriesProvisionDependenciesDirective.NAME
1:74c0437: 								+ ":="
1:74c0437: 								+ apacheAriesProvisionDependencies)
1:74c0437: 						.importPackage("org.osgi.framework")
1:74c0437: 						.build(),
1:74c0437: 				AriesProvisionDependenciesDirective.VALUE_INSTALL.equals(apacheAriesProvisionDependencies)
1:74c0437: 		);
1:74c0437: 		uninstallableSubsystems.add(composite);
1:74c0437: 		startSubsystem(composite, AriesProvisionDependenciesDirective.VALUE_INSTALL.equals(apacheAriesProvisionDependencies));
1:74c0437: 		stoppableSubsystems.add(composite);
1:74c0437: 		installSubsystem(
1:74c0437: 				composite,
1:74c0437: 				"feature", 
1:74c0437: 				new SubsystemArchiveBuilder()
1:74c0437: 						.symbolicName("feature")
1:74c0437: 						.type(SubsystemConstants.SUBSYSTEM_TYPE_FEATURE
1:74c0437: 								+ ';'
1:74c0437: 								+ AriesProvisionDependenciesDirective.NAME
1:74c0437: 								+ ":="
1:74c0437: 								+ apacheAriesProvisionDependencies)
1:74c0437: 						.bundle(
1:74c0437: 								"a", 
1:74c0437: 								new BundleArchiveBuilder()
1:74c0437: 										.symbolicName("a")
1:74c0437: 										.exportPackage("a")
1:74c0437: 								.build())
1:74c0437: 						.build(),
1:74c0437: 				AriesProvisionDependenciesDirective.VALUE_INSTALL.equals(apacheAriesProvisionDependencies)
1:74c0437: 		);
1:74c0437: 		SystemRepository repository = Activator.getInstance().getSystemRepository();
1:74c0437: 		Requirement requirement = new TestRequirement.Builder()
1:74c0437: 				.namespace("osgi.wiring.package")
1:74c0437: 				.directive("filter", "(osgi.wiring.package=a)")
1:74c0437: 				.build();
1:74c0437: 		Map<Requirement, Collection<Capability>> providers = repository.findProviders(
1:74c0437: 				Collections.singleton(requirement));
1:74c0437: 		Collection<Capability> capabilities = providers.get(requirement);
1:74c0437: 		assertEquals("Missing provider", 2, capabilities.size());
1:74c0437: 	}
1:74c0437: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:74c0437
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.core.archive.AriesProvisionDependenciesDirective;
1: import org.apache.aries.subsystem.core.internal.Activator;
1: import org.apache.aries.subsystem.core.internal.SystemRepository;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.apache.aries.subsystem.itests.util.BundleArchiveBuilder;
1: import org.apache.aries.subsystem.itests.util.SubsystemArchiveBuilder;
1: import org.apache.aries.subsystem.itests.util.TestRequirement;
1: import org.junit.Test;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: public class Aries1443Test extends SubsystemTest {
1: 	@Test
1:     public void testProvisionDependenciesInstall() throws Exception {
1: 		test(AriesProvisionDependenciesDirective.VALUE_INSTALL);
1:     }
1: 	
1: 	@Test
1:     public void testProvisionDependenciesResolve() throws Exception {
1: 		test(AriesProvisionDependenciesDirective.VALUE_RESOLVE);
1:     }
1: 	
1: 	private void test(String apacheAriesProvisionDependencies) throws Exception {
1: 		Subsystem root = getRootSubsystem();
1: 		Subsystem composite = installSubsystem(
1: 				root,
1: 				"composite", 
1: 				new SubsystemArchiveBuilder()
1: 						.symbolicName("composite")
1: 						.type(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE 
1: 								+ ';' 
1: 								+ AriesProvisionDependenciesDirective.NAME
1: 								+ ":="
1: 								+ apacheAriesProvisionDependencies)
1: 						.importPackage("org.osgi.framework")
1: 						.build(),
1: 				AriesProvisionDependenciesDirective.VALUE_INSTALL.equals(apacheAriesProvisionDependencies)
1: 		);
1: 		uninstallableSubsystems.add(composite);
1: 		startSubsystem(composite, AriesProvisionDependenciesDirective.VALUE_INSTALL.equals(apacheAriesProvisionDependencies));
1: 		stoppableSubsystems.add(composite);
1: 		installSubsystem(
1: 				composite,
1: 				"feature", 
1: 				new SubsystemArchiveBuilder()
1: 						.symbolicName("feature")
1: 						.type(SubsystemConstants.SUBSYSTEM_TYPE_FEATURE
1: 								+ ';'
1: 								+ AriesProvisionDependenciesDirective.NAME
1: 								+ ":="
1: 								+ apacheAriesProvisionDependencies)
1: 						.bundle(
1: 								"a", 
1: 								new BundleArchiveBuilder()
1: 										.symbolicName("a")
1: 										.exportPackage("a")
1: 								.build())
1: 						.build(),
1: 				AriesProvisionDependenciesDirective.VALUE_INSTALL.equals(apacheAriesProvisionDependencies)
1: 		);
1: 		SystemRepository repository = Activator.getInstance().getSystemRepository();
1: 		Requirement requirement = new TestRequirement.Builder()
1: 				.namespace("osgi.wiring.package")
1: 				.directive("filter", "(osgi.wiring.package=a)")
1: 				.build();
1: 		Map<Requirement, Collection<Capability>> providers = repository.findProviders(
1: 				Collections.singleton(requirement));
1: 		Collection<Capability> capabilities = providers.get(requirement);
1: 		assertEquals("Missing provider", 2, capabilities.size());
1: 	}
1: }
============================================================================