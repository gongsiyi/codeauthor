1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:0e20712: package org.apache.aries.tx.control.jpa.local.impl;
1:e7c1ea5: 
1:e7c1ea5: import java.io.PrintWriter;
1:e7c1ea5: import java.sql.Connection;
1:e7c1ea5: import java.sql.Driver;
1:e7c1ea5: import java.sql.SQLException;
1:e7c1ea5: import java.sql.SQLFeatureNotSupportedException;
1:e7c1ea5: import java.util.Properties;
1:e7c1ea5: import java.util.logging.Logger;
1:e7c1ea5: 
1:e7c1ea5: import javax.sql.DataSource;
1:e7c1ea5: 
1:e7c1ea5: public class DriverDataSource implements DataSource {
1:e7c1ea5: 
1:e7c1ea5: 	private final Driver driver;
1:e7c1ea5: 	private final String jdbcURL;
1:e7c1ea5: 	private final Properties properties;
1:e7c1ea5: 
1:e7c1ea5: 	public DriverDataSource(Driver driver, String jdbcURL, Properties properties) {
1:e7c1ea5: 		this.driver = driver;
1:e7c1ea5: 		this.jdbcURL = jdbcURL;
1:e7c1ea5: 		this.properties = properties;
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public PrintWriter getLogWriter() throws SQLException {
1:e7c1ea5: 		throw new SQLFeatureNotSupportedException("Driver based JDBC does not support log writing");
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public void setLogWriter(PrintWriter out) throws SQLException {
1:e7c1ea5: 		throw new SQLFeatureNotSupportedException("Driver based JDBC does not support log writing");
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public void setLoginTimeout(int seconds) throws SQLException {
1:e7c1ea5: 		throw new SQLFeatureNotSupportedException("Driver based JDBC does not support login timeouts");
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public int getLoginTimeout() throws SQLException {
1:e7c1ea5: 		throw new SQLFeatureNotSupportedException("Driver based JDBC does not support login timeouts");
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public Logger getParentLogger() throws SQLFeatureNotSupportedException {
1:e7c1ea5: 		throw new SQLFeatureNotSupportedException("Driver based JDBC does not support log writing");
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public <T> T unwrap(Class<T> iface) throws SQLException {
1:e7c1ea5: 		throw new SQLFeatureNotSupportedException("Driver based JDBC does not support unwrapping");
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:e7c1ea5: 		return false;
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public Connection getConnection() throws SQLException {
1:e7c1ea5: 		return driver.connect(jdbcURL, properties);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public Connection getConnection(String username, String password) throws SQLException {
1:e7c1ea5: 		return getConnection();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:0e20712
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.local.impl;
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:e7c1ea5
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.tx.control.jpa.common.impl;
1: 
1: import java.io.PrintWriter;
1: import java.sql.Connection;
1: import java.sql.Driver;
1: import java.sql.SQLException;
1: import java.sql.SQLFeatureNotSupportedException;
1: import java.util.Properties;
1: import java.util.logging.Logger;
1: 
1: import javax.sql.DataSource;
1: 
1: public class DriverDataSource implements DataSource {
1: 
1: 	private final Driver driver;
1: 	private final String jdbcURL;
1: 	private final Properties properties;
1: 
1: 	public DriverDataSource(Driver driver, String jdbcURL, Properties properties) {
1: 		this.driver = driver;
1: 		this.jdbcURL = jdbcURL;
1: 		this.properties = properties;
1: 	}
1: 
1: 	@Override
1: 	public PrintWriter getLogWriter() throws SQLException {
1: 		throw new SQLFeatureNotSupportedException("Driver based JDBC does not support log writing");
1: 	}
1: 
1: 	@Override
1: 	public void setLogWriter(PrintWriter out) throws SQLException {
1: 		throw new SQLFeatureNotSupportedException("Driver based JDBC does not support log writing");
1: 	}
1: 
1: 	@Override
1: 	public void setLoginTimeout(int seconds) throws SQLException {
1: 		throw new SQLFeatureNotSupportedException("Driver based JDBC does not support login timeouts");
1: 	}
1: 
1: 	@Override
1: 	public int getLoginTimeout() throws SQLException {
1: 		throw new SQLFeatureNotSupportedException("Driver based JDBC does not support login timeouts");
1: 	}
1: 
1: 	@Override
1: 	public Logger getParentLogger() throws SQLFeatureNotSupportedException {
1: 		throw new SQLFeatureNotSupportedException("Driver based JDBC does not support log writing");
1: 	}
1: 
1: 	@Override
1: 	public <T> T unwrap(Class<T> iface) throws SQLException {
1: 		throw new SQLFeatureNotSupportedException("Driver based JDBC does not support unwrapping");
1: 	}
1: 
1: 	@Override
1: 	public boolean isWrapperFor(Class<?> iface) throws SQLException {
1: 		return false;
1: 	}
1: 
1: 	@Override
1: 	public Connection getConnection() throws SQLException {
1: 		return driver.connect(jdbcURL, properties);
1: 	}
1: 
1: 	@Override
1: 	public Connection getConnection(String username, String password) throws SQLException {
1: 		return getConnection();
1: 	}
1: 
1: }
============================================================================