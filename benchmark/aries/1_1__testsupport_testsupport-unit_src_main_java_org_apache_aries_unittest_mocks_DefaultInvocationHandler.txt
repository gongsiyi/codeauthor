1:264011e: /*
1:264011e:  * Licensed to the Apache Software Foundation (ASF) under one
1:264011e:  * or more contributor license agreements.  See the NOTICE file
1:264011e:  * distributed with this work for additional information
1:264011e:  * regarding copyright ownership.  The ASF licenses this file
1:264011e:  * to you under the Apache License, Version 2.0 (the
1:264011e:  * "License"); you may not use this file except in compliance
1:264011e:  * with the License.  You may obtain a copy of the License at
1:264011e:  *
1:264011e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:264011e:  *
1:264011e:  * Unless required by applicable law or agreed to in writing,
1:264011e:  * software distributed under the License is distributed on an
1:264011e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:264011e:  * KIND, either express or implied.  See the License for the
1:264011e:  * specific language governing permissions and limitations
1:264011e:  * under the License.
1:264011e:  */
1:264011e: package org.apache.aries.unittest.mocks;
1:264011e: 
1:264011e: import java.lang.reflect.InvocationHandler;
1:264011e: import java.lang.reflect.Method;
1:264011e: 
1:264011e: /**
1:264011e:  * <p>This invocation handler is used by the Skeleton when nothing else is
1:264011e:  *   matched. If the return type is an interface it creates a dynamic proxy
1:264011e:  *   backed by the associated skeleton for return, if it is a class with a
1:264011e:  *   default constructor that will be returned.
1:264011e:  * </p>
1:264011e:  */
1:264011e: public class DefaultInvocationHandler implements InvocationHandler
1:264011e: {
1:264011e:   /** The skeleton this handler is associated with */
1:264011e:   private Skeleton _s;
1:264011e:   
1:264011e:   /* ------------------------------------------------------------------------ */
1:264011e:   /* DefaultInvocationHandler constructor                                    
1:264011e:   /* ------------------------------------------------------------------------ */
1:264011e:   /**
1:264011e:    * Creates an instance called by the specified skeleton.
1:264011e:    *
1:264011e:    * @param s The caller.
1:264011e:    */
1:264011e:   public DefaultInvocationHandler(Skeleton s)
1:264011e:   {
1:264011e:     this._s = s;
1:264011e:   }
1:264011e:   
1:264011e:   /* ------------------------------------------------------------------------ */
1:264011e:   /* invoke method                                    
1:264011e:   /* ------------------------------------------------------------------------ */
1:264011e:   /**
1:264011e:    * Invoked when no ReturnType or MethodCall Handlers are defined.
1:264011e:    * 
1:264011e:    * @param target     The target object that was invoked. 
1:264011e:    * @param method     The method that was invoked.
1:264011e:    * @param arguments  The arguments that were passed.
1:264011e:    * @return           A proxy or null.
1:264011e:    * @throws Throwable
1:264011e:    */
1:264011e:   public Object invoke(Object target, Method method, Object[] arguments)
1:264011e:       throws Throwable
1:264011e:   {
1:264011e:     Class<?> returnType = method.getReturnType();
1:264011e:     Object obj = null;
1:264011e:     
1:264011e:     if (returnType.isInterface())
1:264011e:     {
1:264011e:       obj = createProxy(new Class[] { returnType });
1:264011e:     }
1:264011e:     else 
1:264011e:     {
1:264011e:       try
1:264011e:       {
1:264011e:         obj = returnType.newInstance();
1:264011e:       }
1:264011e:       catch (Exception e)
1:264011e:       {
1:264011e:         // if this occurs then assume no default constructor was visible.
1:264011e:       }
1:264011e:     }
1:264011e:     
1:264011e:     return obj;
1:264011e:   }
1:264011e:   
1:264011e:   /* ------------------------------------------------------------------------ */
1:264011e:   /* createProxy method                                    
1:264011e:   /* ------------------------------------------------------------------------ */
1:264011e:   /**
1:264011e:    * Creates and returns a proxy backed by the associated skeleton, that 
1:264011e:    * implements the specified interfaces. Null is returned if the return
1:264011e:    * type array contains non interfaces.
1:264011e:    * 
1:264011e:    * @param returnTypes The classes.
1:264011e:    * @return            The proxy or null.
1:264011e:    */
1:264011e:   public Object createProxy(Class<?> ... returnTypes)
1:264011e:   {
1:264011e:     Object result = null;
1:264011e:     
1:264011e:     boolean allInterfaces = true;
1:264011e:     for(int i = 0; (allInterfaces && i<returnTypes.length); i++)
1:264011e:        allInterfaces = returnTypes[i].isInterface();
1:264011e:     
1:264011e:     if (allInterfaces)
1:264011e:     {
1:264011e:       result = _s.createMock(returnTypes);
1:264011e:     }
1:264011e:     return result;
1:264011e:   }
1:264011e: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:264011e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.unittest.mocks;
1: 
1: import java.lang.reflect.InvocationHandler;
1: import java.lang.reflect.Method;
1: 
1: /**
1:  * <p>This invocation handler is used by the Skeleton when nothing else is
1:  *   matched. If the return type is an interface it creates a dynamic proxy
1:  *   backed by the associated skeleton for return, if it is a class with a
1:  *   default constructor that will be returned.
1:  * </p>
1:  */
1: public class DefaultInvocationHandler implements InvocationHandler
1: {
1:   /** The skeleton this handler is associated with */
1:   private Skeleton _s;
1:   
1:   /* ------------------------------------------------------------------------ */
1:   /* DefaultInvocationHandler constructor                                    
1:   /* ------------------------------------------------------------------------ */
1:   /**
1:    * Creates an instance called by the specified skeleton.
1:    *
1:    * @param s The caller.
1:    */
1:   public DefaultInvocationHandler(Skeleton s)
1:   {
1:     this._s = s;
1:   }
1:   
1:   /* ------------------------------------------------------------------------ */
1:   /* invoke method                                    
1:   /* ------------------------------------------------------------------------ */
1:   /**
1:    * Invoked when no ReturnType or MethodCall Handlers are defined.
1:    * 
1:    * @param target     The target object that was invoked. 
1:    * @param method     The method that was invoked.
1:    * @param arguments  The arguments that were passed.
1:    * @return           A proxy or null.
1:    * @throws Throwable
1:    */
1:   public Object invoke(Object target, Method method, Object[] arguments)
1:       throws Throwable
1:   {
1:     Class<?> returnType = method.getReturnType();
1:     Object obj = null;
1:     
1:     if (returnType.isInterface())
1:     {
1:       obj = createProxy(new Class[] { returnType });
1:     }
1:     else 
1:     {
1:       try
1:       {
1:         obj = returnType.newInstance();
1:       }
1:       catch (Exception e)
1:       {
1:         // if this occurs then assume no default constructor was visible.
1:       }
1:     }
1:     
1:     return obj;
1:   }
1:   
1:   /* ------------------------------------------------------------------------ */
1:   /* createProxy method                                    
1:   /* ------------------------------------------------------------------------ */
1:   /**
1:    * Creates and returns a proxy backed by the associated skeleton, that 
1:    * implements the specified interfaces. Null is returned if the return
1:    * type array contains non interfaces.
1:    * 
1:    * @param returnTypes The classes.
1:    * @return            The proxy or null.
1:    */
1:   public Object createProxy(Class<?> ... returnTypes)
1:   {
1:     Object result = null;
1:     
1:     boolean allInterfaces = true;
1:     for(int i = 0; (allInterfaces && i<returnTypes.length); i++)
1:        allInterfaces = returnTypes[i].isInterface();
1:     
1:     if (allInterfaces)
1:     {
1:       result = _s.createMock(returnTypes);
1:     }
1:     return result;
1:   }
1: }
commit:4e2fb0c
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.unittest.mocks;
0: 
0: import java.lang.reflect.InvocationHandler;
0: import java.lang.reflect.Method;
0: 
0: /**
0:  * <p>This invocation handler is used by the Skeleton when nothing else is
0:  *   matched. If the return type is an interface it creates a dynamic proxy
0:  *   backed by the associated skeleton for return, if it is a class with a
0:  *   default constructor that will be returned.
0:  * </p>
0:  */
0: public class DefaultInvocationHandler implements InvocationHandler
0: {
0:   /** The skeleton this handler is associated with */
0:   private Skeleton _s;
0:   
0:   /* ------------------------------------------------------------------------ */
0:   /* DefaultInvocationHandler constructor                                    
0:   /* ------------------------------------------------------------------------ */
0:   /**
0:    * Creates an instance called by the specified skeleton.
0:    *
0:    * @param s The caller.
0:    */
0:   public DefaultInvocationHandler(Skeleton s)
0:   {
0:     this._s = s;
0:   }
0:   
0:   /* ------------------------------------------------------------------------ */
0:   /* invoke method                                    
0:   /* ------------------------------------------------------------------------ */
0:   /**
0:    * Invoked when no ReturnType or MethodCall Handlers are defined.
0:    * 
0:    * @param target     The target object that was invoked. 
0:    * @param method     The method that was invoked.
0:    * @param arguments  The arguments that were passed.
0:    * @return           A proxy or null.
0:    * @throws Throwable
0:    */
0:   public Object invoke(Object target, Method method, Object[] arguments)
0:       throws Throwable
0:   {
0:     Class<?> returnType = method.getReturnType();
0:     Object obj = null;
0:     
0:     if (returnType.isInterface())
0:     {
0:       obj = createProxy(new Class[] { returnType });
0:     }
0:     else 
0:     {
0:       try
0:       {
0:         obj = returnType.newInstance();
0:       }
0:       catch (Exception e)
0:       {
0:         // if this occurs then assume no default constructor was visible.
0:       }
0:     }
0:     
0:     return obj;
0:   }
0:   
0:   /* ------------------------------------------------------------------------ */
0:   /* createProxy method                                    
0:   /* ------------------------------------------------------------------------ */
0:   /**
0:    * Creates and returns a proxy backed by the associated skeleton, that 
0:    * implements the specified interfaces. Null is returned if the return
0:    * type array contains non interfaces.
0:    * 
0:    * @param returnTypes The classes.
0:    * @return            The proxy or null.
0:    */
0:   public Object createProxy(Class<?> ... returnTypes)
0:   {
0:     Object result = null;
0:     
0:     boolean allInterfaces = true;
0:     for(int i = 0; (allInterfaces && i<returnTypes.length); i++)
0:        allInterfaces = returnTypes[i].isInterface();
0:     
0:     if (allInterfaces)
0:     {
0:       result = _s.createMock(returnTypes);
0:     }
0:     return result;
0:   }
0: }
============================================================================