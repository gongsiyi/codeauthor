1:374d886: /*
1:374d886:  * Licensed to the Apache Software Foundation (ASF) under one
1:374d886:  * or more contributor license agreements.  See the NOTICE file
1:374d886:  * distributed with this work for additional information
1:374d886:  * regarding copyright ownership.  The ASF licenses this file
1:374d886:  * to you under the Apache License, Version 2.0 (the
1:374d886:  * "License"); you may not use this file except in compliance
1:374d886:  * with the License.  You may obtain a copy of the License at
1:374d886:  *
1:374d886:  *   http://www.apache.org/licenses/LICENSE-2.0
1:374d886:  *
1:374d886:  * Unless required by applicable law or agreed to in writing,
1:374d886:  * software distributed under the License is distributed on an
1:374d886:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:374d886:  * KIND, either express or implied.  See the License for the
1:374d886:  * specific language governing permissions and limitations
1:374d886:  * under the License.
1:374d886:  */
1:374d886: package org.apache.aries.tx.control.itests;
1:374d886: 
1:374d886: import static org.junit.Assert.assertEquals;
1:374d886: import static org.junit.Assert.fail;
1:374d886: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:374d886: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:374d886: import static org.ops4j.pax.exam.CoreOptions.options;
1:374d886: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1:374d886: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:374d886: import static org.ops4j.pax.exam.CoreOptions.when;
1:374d886: 
1:374d886: import java.io.File;
1:374d886: import java.io.InputStream;
1:374d886: import java.lang.reflect.Field;
1:f6f7de7: import java.util.ArrayList;
1:374d886: import java.util.Arrays;
1:374d886: import java.util.Dictionary;
1:374d886: import java.util.Hashtable;
1:f6f7de7: import java.util.List;
1:f6f7de7: import java.util.NoSuchElementException;
1:374d886: 
1:374d886: import javax.inject.Inject;
1:374d886: import javax.persistence.EntityManager;
1:374d886: import javax.persistence.criteria.CriteriaBuilder;
1:374d886: import javax.persistence.criteria.CriteriaQuery;
1:374d886: import javax.transaction.xa.XAException;
1:374d886: import javax.transaction.xa.XAResource;
1:374d886: import javax.transaction.xa.Xid;
1:374d886: 
1:374d886: import org.apache.aries.tx.control.itests.entity.Message;
1:374d886: import org.h2.tools.Server;
1:374d886: import org.junit.After;
1:374d886: import org.junit.Before;
1:374d886: import org.junit.Test;
1:374d886: import org.junit.runner.RunWith;
1:374d886: import org.ops4j.pax.exam.Configuration;
1:374d886: import org.ops4j.pax.exam.CoreOptions;
1:374d886: import org.ops4j.pax.exam.Option;
1:374d886: import org.ops4j.pax.exam.ProbeBuilder;
1:374d886: import org.ops4j.pax.exam.TestProbeBuilder;
1:374d886: import org.ops4j.pax.exam.junit.PaxExam;
1:374d886: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:374d886: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:374d886: import org.ops4j.pax.exam.util.Filter;
1:374d886: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:f6f7de7: import org.osgi.framework.BundleContext;
1:f6f7de7: import org.osgi.framework.FrameworkUtil;
1:f6f7de7: import org.osgi.framework.InvalidSyntaxException;
1:f6f7de7: import org.osgi.framework.ServiceReference;
1:374d886: import org.osgi.service.cm.ConfigurationAdmin;
1:374d886: import org.osgi.service.jdbc.DataSourceFactory;
1:374d886: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:374d886: import org.osgi.service.transaction.control.TransactionControl;
1:374d886: import org.osgi.service.transaction.control.TransactionRolledBackException;
1:374d886: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
1:ebd8d15: import org.osgi.util.promise.Deferred;
1:f6f7de7: import org.osgi.util.tracker.ServiceTracker;
1:374d886: 
1:374d886: @RunWith(PaxExam.class)
1:374d886: @ExamReactorStrategy(PerClass.class)
1:f6f7de7: public abstract class XAJPATransactionTest {
1:374d886: 
1:374d886: 	static final String XA_TEST_UNIT_1 = "xa-test-unit-1";
1:374d886: 	static final String XA_TEST_UNIT_2 = "xa-test-unit-2";
1:374d886: 
1:374d886: 	protected static final String ARIES_EMF_BUILDER_TARGET_FILTER = "aries.emf.builder.target.filter";
1:374d886: 	
1:374d886: 	@Inject
1:f6f7de7: 	BundleContext context;
1:f6f7de7: 	
1:f6f7de7: 	@Inject
1:374d886: 	@Filter("(osgi.xa.enabled=true)")
1:374d886: 	protected TransactionControl txControl;
1:374d886: 
1:374d886: 	protected EntityManager em1;
1:374d886: 	protected EntityManager em2;
1:374d886: 
1:374d886: 	private Server server1;
1:374d886: 	private Server server2;
1:f6f7de7: 	
1:f6f7de7: 	private final List<ServiceTracker<?,?>> trackers = new ArrayList<>();
1:374d886: 
1:374d886: 	@Before
1:374d886: 	public void setUp() throws Exception {
1:374d886: 		server1 = Server.createTcpServer("-tcpPort", "0");
1:374d886: 		server1.start();
1:374d886: 
1:374d886: 		server2 = Server.createTcpServer("-tcpPort", "0");
1:374d886: 		server2.start();
1:374d886: 			
1:374d886: 		String jdbcUrl1 = "jdbc:h2:tcp://127.0.0.1:" + server1.getPort() + "/" + getRemoteDBPath("db1");
1:374d886: 		String jdbcUrl2 = "jdbc:h2:tcp://127.0.0.1:" + server2.getPort() + "/" + getRemoteDBPath("db2");
1:374d886: 		
1:374d886: 		em1 = configuredEntityManager(jdbcUrl1, XA_TEST_UNIT_1);
1:374d886: 		em2 = configuredEntityManager(jdbcUrl2, XA_TEST_UNIT_2);
1:374d886: 	}
1:374d886: 
1:374d886: 	private String getRemoteDBPath(String dbName) {
1:374d886: 		String fullResourceName = getClass().getName().replace('.', '/') + ".class";
1:374d886: 		
1:374d886: 		String resourcePath = getClass().getClassLoader().getResource(fullResourceName).getPath();
1:374d886: 		
1:374d886: 		File testClassesDir = new File(resourcePath.substring(0, resourcePath.length() - fullResourceName.length()));
1:374d886: 		
1:374d886: 		return new File(testClassesDir.getParentFile(), "testdb/" + dbName).getAbsolutePath();
1:374d886: 	}
1:374d886: 	
1:f6f7de7: 	private EntityManager configuredEntityManager(String jdbcUrl, String unit) throws Exception {
1:374d886: 		
1:374d886: 		Dictionary<String, Object> props = getBaseProperties();
1:374d886: 		
1:374d886: 		props.put(DataSourceFactory.OSGI_JDBC_DRIVER_CLASS, "org.h2.Driver");
1:374d886: 		props.put(DataSourceFactory.JDBC_URL, jdbcUrl);
1:374d886: 		props.put(EntityManagerFactoryBuilder.JPA_UNIT_NAME, unit);
1:374d886: 		
1:374d886: 		String filter = System.getProperty(ARIES_EMF_BUILDER_TARGET_FILTER);
1:374d886: 		
1:374d886: 		if(filter != null) {
1:374d886: 			props.put(ARIES_EMF_BUILDER_TARGET_FILTER, "(&(osgi.unit.name=" + unit + ")" + filter + ")");
1:374d886: 		}
1:374d886: 		
1:f6f7de7: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1:374d886: 		
1:374d886: 		org.osgi.service.cm.Configuration config = cm.createFactoryConfiguration(
1:374d886: 				"org.apache.aries.tx.control.jpa.xa", null);
1:374d886: 		config.update(props);
1:374d886: 		
1:f6f7de7: 		return getService(JPAEntityManagerProvider.class,
1:374d886: 				"(" + EntityManagerFactoryBuilder.JPA_UNIT_NAME + "=" + unit + ")",
1:374d886: 				5000).getResource(txControl);
1:374d886: 	}
1:374d886: 
1:f6f7de7: 	private <T> T getService(Class<T> clazz, long timeout) {
1:f6f7de7: 		try {
1:f6f7de7: 			return getService(clazz, null, timeout);
1:f6f7de7: 		} catch (InvalidSyntaxException e) {
1:f6f7de7: 			throw new IllegalArgumentException(e);
1:f6f7de7: 		}
1:f6f7de7: 	}
1:f6f7de7: 
1:f6f7de7: 	private <T> T getService(Class<T> clazz, String filter, long timeout) throws InvalidSyntaxException {
1:f6f7de7: 		org.osgi.framework.Filter f = FrameworkUtil.createFilter(filter == null ? "(|(foo=bar)(!(foo=bar)))" : filter); 
1:f6f7de7: 		
1:f6f7de7: 		ServiceTracker<T, T> tracker = new ServiceTracker<T, T>(context, clazz, null) {
1:f6f7de7: 			@Override
1:f6f7de7: 			public T addingService(ServiceReference<T> reference) {
1:f6f7de7: 				return f.match(reference) ? super.addingService(reference) : null;
1:f6f7de7: 			}
1:f6f7de7: 		};
1:f6f7de7: 
1:f6f7de7: 		tracker.open();
1:f6f7de7: 		try {
1:f6f7de7: 			T t = tracker.waitForService(timeout);
1:f6f7de7: 			if(t == null) {
1:f6f7de7: 				throw new NoSuchElementException(clazz.getName());
1:f6f7de7: 			}
1:f6f7de7: 			return t;
1:f6f7de7: 		} catch (InterruptedException e) {
1:f6f7de7: 			throw new RuntimeException("Error waiting for service " + clazz.getName(), e);
1:f6f7de7: 		} finally {
1:f6f7de7: 			trackers.add(tracker);
1:f6f7de7: 		}
1:f6f7de7: 	}
1:f6f7de7: 	
1:374d886: 	protected Dictionary<String, Object> getBaseProperties() {
1:374d886: 		return new Hashtable<>();
1:374d886: 	}
1:374d886: 	
1:374d886: 	@After
1:374d886: 	public void tearDown() {
1:374d886: 
1:374d886: 		clearConfiguration();
1:374d886: 		
1:374d886: 		if(server1 != null) {
1:374d886: 			server1.stop();
1:374d886: 		}
1:374d886: 		if(server2 != null) {
1:374d886: 			server2.stop();
1:374d886: 		}
1:374d886: 
1:f6f7de7: 		trackers.stream().forEach(ServiceTracker::close);
1:f6f7de7: 		
1:374d886: 		em1 = null;
1:374d886: 		em2 = null;
1:374d886: 	}
1:374d886: 
1:374d886: 	private void clearConfiguration() {
1:f6f7de7: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1:374d886: 		org.osgi.service.cm.Configuration[] cfgs = null;
1:374d886: 		try {
1:374d886: 			cfgs = cm.listConfigurations(null);
1:374d886: 		} catch (Exception e1) {
1:374d886: 			// TODO Auto-generated catch block
1:374d886: 			e1.printStackTrace();
1:374d886: 		}
1:374d886: 		
1:374d886: 		if(cfgs != null) {
1:374d886: 			for(org.osgi.service.cm.Configuration cfg : cfgs) {
1:374d886: 				try {
1:374d886: 					cfg.delete();
1:374d886: 				} catch (Exception e) {}
1:374d886: 			}
1:374d886: 			try {
1:374d886: 				Thread.sleep(250);
1:374d886: 			} catch (InterruptedException e) {
1:374d886: 				// TODO Auto-generated catch block
1:374d886: 				e.printStackTrace();
1:374d886: 			}
1:374d886: 		}
1:374d886: 	}
1:374d886: 
1:374d886: 	@ProbeBuilder
1:374d886: 	public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1:374d886: 	    return probe;
1:374d886: 	}
1:374d886: 	
1:374d886: 	@Configuration
1:374d886: 	public Option[] xaTxConfiguration() {
1:374d886: 		String localRepo = System.getProperty("maven.repo.local");
1:374d886: 		if (localRepo == null) {
1:374d886: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:374d886: 		}
1:374d886: 		
1:374d886: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:374d886: 				when(localRepo != null)
1:374d886: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:374d886: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-xa").versionAsInProject(),
1:374d886: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
1:ebd8d15: 				mavenBundle("org.osgi", "org.osgi.util.function").versionAsInProject(),
1:ebd8d15: 				mavenBundle("org.osgi", "org.osgi.util.promise").versionAsInProject(),
1:374d886: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jpa-xa").versionAsInProject(),
1:374d886: 				jpaProvider(),
1:2b6a667: 				ariesJPAVersion(),
1:374d886: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1:374d886: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:374d886: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1:374d886: 				
1:374d886: 				streamBundle(getTestUnit(XA_TEST_UNIT_1)),
1:374d886: 				streamBundle(getTestUnit(XA_TEST_UNIT_2))
1:374d886: 				
1:374d886: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1:374d886: 				);
1:374d886: 	}
1:374d886: 
1:374d886: 	private InputStream getTestUnit(String unit) {
1:374d886: 		String descriptor = "META-INF/" + unit + ".xml";
1:374d886: 		return TinyBundles.bundle()
1:374d886: 			.add(Message.class)
1:374d886: 			.add(descriptor, getClass().getResource("/" + descriptor))
1:374d886: 			.set("Meta-Persistence", descriptor)
1:374d886: 			.set("Bundle-SymbolicName", unit)
1:374d886: 			.set("Import-Package", "javax.persistence")
1:374d886: 			.set("Require-Capability", "osgi.contract;filter:=\"(&(osgi.contract=JavaJPA)(version=2.0))\"")
1:374d886: 			// This line is necessary while https://hibernate.atlassian.net/browse/HHH-10742 is unfixed
1:374d886: 			.set("DynamicImport-Package", "org.hibernate.proxy,javassist.util.proxy")
1:374d886: 			.build();
1:374d886: 	}
1:374d886: 
1:2b6a667: 	protected Option ariesJPAVersion() {
1:2b6a667: 		return mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container", "2.3.0");
1:374d886: 	}
1:374d886: 	
1:374d886: 	protected abstract Option jpaProvider();
1:374d886: 	
1:374d886: 	@Test
1:374d886: 	public void testTwoPhaseCommit() throws Exception {
1:374d886: 		Object m1 = getMessageEntityFrom(XA_TEST_UNIT_1);
1:374d886: 		Object m2 = getMessageEntityFrom(XA_TEST_UNIT_2);
1:374d886: 
1:374d886: 		txControl.required(() -> {
1:374d886: 			setMessage(m1, "Hello World!");
1:374d886: 			
1:374d886: 			em1.persist(m1);
1:374d886: 
1:374d886: 			setMessage(m2, "Hello 1!");
1:374d886: 			
1:374d886: 			em2.persist(m2);
1:374d886: 			
1:374d886: 			return null;
1:374d886: 		});
1:374d886: 		
1:374d886: 		assertEquals("Hello World!", txControl.notSupported(() -> {
1:374d886: 			return getMessage(em1.find(m1.getClass(), getId(m1)));
1:374d886: 		}));
1:ebd8d15: 
1:374d886: 		assertEquals("Hello 1!", txControl.notSupported(() -> {
1:374d886: 			return getMessage(em2.find(m2.getClass(), getId(m2)));
1:374d886: 		}));
1:374d886: 	}
1:374d886: 
1:ebd8d15: 	@Test
1:374d886: 	public void testTwoPhaseRollback()  throws Exception  {
1:374d886: 		Object m1 = getMessageEntityFrom(XA_TEST_UNIT_1);
1:374d886: 		Object m2 = getMessageEntityFrom(XA_TEST_UNIT_2);
1:374d886: 		Object m3 = getMessageEntityFrom(XA_TEST_UNIT_2);
1:374d886: 		try {
1:374d886: 
1:374d886: 			txControl.required(() -> {
1:374d886: 				setMessage(m1, "Hello World!");
1:374d886: 				
1:374d886: 				em1.persist(m1);
1:374d886: 
1:374d886: 				setMessage(m2, "Hello 1!");
1:374d886: 				
1:374d886: 				em2.persist(m2);
1:374d886: 				
1:374d886: 				txControl.requiresNew(() -> {
1:374d886: 						setMessage(m3, "Hello 2!");
1:374d886: 						em2.persist(m3);
1:374d886: 						return null;
1:374d886: 					});
1:374d886: 				
1:47a70d3: 				txControl.getCurrentContext().registerXAResource(new PoisonResource(), null);
1:374d886: 				
1:374d886: 				return null;
1:374d886: 			});
1:374d886: 			fail("Should roll back");
1:374d886: 		} catch (TransactionRolledBackException trbe) {
1:374d886: 		}
1:374d886: 		
1:374d886: 		assertEquals(0, (int) txControl.notSupported(() -> {
1:374d886: 				CriteriaBuilder cb = em1.getCriteriaBuilder();
1:374d886: 				CriteriaQuery<Long> countQuery = cb.createQuery(Long.class);
1:374d886: 				countQuery.select(cb.count(countQuery.from(m1.getClass())));
1:374d886: 				
1:374d886: 				return em1.createQuery(countQuery).getSingleResult().intValue();
1:374d886: 			}));
1:374d886: 		
1:374d886: 		
1:374d886: 		assertEquals(Arrays.asList("Hello 2!"), txControl.notSupported(() -> {
1:374d886: 			CriteriaBuilder cb = em2.getCriteriaBuilder();
1:374d886: 			CriteriaQuery<String> query = cb.createQuery(String.class);
1:374d886: 			query.select(query.from(m2.getClass()).get("message"));
1:374d886: 			
1:374d886: 			return em2.createQuery(query).getResultList();
1:374d886: 		}));
1:374d886: 	}
1:374d886: 	
1:374d886: 	@Test
1:ebd8d15: 	public void testSeparateThreadActivation() throws Exception {
1:ebd8d15: 		Object m1 = getMessageEntityFrom(XA_TEST_UNIT_1);
1:ebd8d15: 		Object m2 = getMessageEntityFrom(XA_TEST_UNIT_2);
1:ebd8d15: 
1:ebd8d15: 		txControl.required(() -> {
1:ebd8d15: 			setMessage(m1, "Hello World!");
1:ebd8d15: 			
1:ebd8d15: 			em1.persist(m1);
1:ebd8d15: 
1:ebd8d15: 			setMessage(m2, "Hello 1!");
1:ebd8d15: 			
1:ebd8d15: 			em2.persist(m2);
1:ebd8d15: 			
1:ebd8d15: 			return null;
1:ebd8d15: 		});
1:374d886: 		
1:ebd8d15: 		Deferred<String> d = new Deferred<>();
1:ebd8d15: 		
1:ebd8d15: 		new Thread(() -> {
1:ebd8d15: 				try {
1:ebd8d15: 					d.resolve(txControl.notSupported(() -> 
1:ebd8d15: 						getMessage(em1.find(m1.getClass(), getId(m1)))));
1:ebd8d15: 				} catch (Exception e) {
1:ebd8d15: 					d.fail(e);
1:ebd8d15: 				}
1:ebd8d15: 			}).start();
1:ebd8d15: 		
1:ebd8d15: 		assertEquals("Hello World!", d.getPromise().getValue());
1:ebd8d15: 
1:ebd8d15: 		Deferred<String> d2 = new Deferred<>();
1:ebd8d15: 		
1:ebd8d15: 		new Thread(() -> {
1:ebd8d15: 				try {
1:ebd8d15: 					d2.resolve(txControl.notSupported(() -> 
1:ebd8d15: 						getMessage(em2.find(m2.getClass(), getId(m2)))));
1:ebd8d15: 				} catch (Exception e) {
1:ebd8d15: 					d2.fail(e);
1:ebd8d15: 				}
1:ebd8d15: 			}).start();
1:ebd8d15: 		
1:ebd8d15: 		assertEquals("Hello 1!", d2.getPromise().getValue());
1:ebd8d15: 	}
1:ebd8d15: 	
1:374d886: 	Object getMessageEntityFrom(String unit) throws Exception {
1:f6f7de7: 		Class<?> clz = Arrays.stream(context.getBundles())
1:f6f7de7: 					.filter(b -> unit.equals(b.getSymbolicName()))
1:f6f7de7: 					.map(b -> {
1:f6f7de7: 							try {
1:f6f7de7: 								return b.loadClass("org.apache.aries.tx.control.itests.entity.Message");
1:f6f7de7: 							} catch (ClassNotFoundException e) {
1:f6f7de7: 								throw new RuntimeException(e);
1:f6f7de7: 							}
1:f6f7de7: 						})
1:f6f7de7: 					.findFirst().orElseThrow(() -> new IllegalArgumentException(unit));
1:374d886: 		return clz.newInstance();
1:374d886: 	}
1:374d886: 	
1:374d886: 	void setMessage(Object entity, String message) throws Exception {
1:374d886: 		Field f = entity.getClass().getField("message");
1:374d886: 		f.set(entity, message);
1:374d886: 	}
1:374d886: 
1:374d886: 	String getMessage(Object entity) throws Exception {
1:374d886: 		Field f = entity.getClass().getField("message");
1:374d886: 		return (String) f.get(entity);
1:374d886: 	}
1:374d886: 
1:374d886: 	Integer getId(Object entity) throws Exception {
1:374d886: 		Field f = entity.getClass().getField("id");
1:374d886: 		return (Integer) f.get(entity);
1:374d886: 	}
1:374d886: 	
1:374d886: 	private static class PoisonResource implements XAResource {
1:374d886: 
1:374d886: 		@Override
1:374d886: 		public void commit(Xid arg0, boolean arg1) throws XAException {
1:374d886: 			throw new XAException(XAException.XA_RBOTHER);
1:374d886: 		}
1:374d886: 
1:374d886: 		@Override
1:374d886: 		public void end(Xid arg0, int arg1) throws XAException {
1:374d886: 		}
1:374d886: 
1:374d886: 		@Override
1:374d886: 		public void forget(Xid arg0) throws XAException {
1:374d886: 		}
1:374d886: 
1:374d886: 		@Override
1:374d886: 		public int getTransactionTimeout() throws XAException {
1:374d886: 			return 30;
1:374d886: 		}
1:374d886: 
1:374d886: 		@Override
1:374d886: 		public boolean isSameRM(XAResource arg0) throws XAException {
1:374d886: 			return false;
1:374d886: 		}
1:374d886: 
1:374d886: 		@Override
1:374d886: 		public int prepare(Xid arg0) throws XAException {
1:374d886: 			throw new XAException(XAException.XA_RBOTHER);
1:374d886: 		}
1:374d886: 
1:374d886: 		@Override
1:374d886: 		public Xid[] recover(int arg0) throws XAException {
1:374d886: 			return new Xid[0];
1:374d886: 		}
1:374d886: 
1:374d886: 		@Override
1:374d886: 		public void rollback(Xid arg0) throws XAException {
1:374d886: 		}
1:374d886: 
1:374d886: 		@Override
1:374d886: 		public boolean setTransactionTimeout(int arg0) throws XAException {
1:374d886: 			return false;
1:374d886: 		}
1:374d886: 
1:374d886: 		@Override
1:374d886: 		public void start(Xid arg0, int arg1) throws XAException {
1:374d886: 		}
1:374d886: 	}
1:374d886: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:ebd8d15
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.util.promise.Deferred;
/////////////////////////////////////////////////////////////////////////
1: 				mavenBundle("org.osgi", "org.osgi.util.function").versionAsInProject(),
1: 				mavenBundle("org.osgi", "org.osgi.util.promise").versionAsInProject(),
/////////////////////////////////////////////////////////////////////////
1: 	@Test
1: 	public void testSeparateThreadActivation() throws Exception {
1: 		Object m1 = getMessageEntityFrom(XA_TEST_UNIT_1);
1: 		Object m2 = getMessageEntityFrom(XA_TEST_UNIT_2);
1: 
1: 		txControl.required(() -> {
1: 			setMessage(m1, "Hello World!");
1: 			
1: 			em1.persist(m1);
1: 
1: 			setMessage(m2, "Hello 1!");
1: 			
1: 			em2.persist(m2);
1: 			
1: 			return null;
1: 		});
1: 		
1: 		Deferred<String> d = new Deferred<>();
1: 		
1: 		new Thread(() -> {
1: 				try {
1: 					d.resolve(txControl.notSupported(() -> 
1: 						getMessage(em1.find(m1.getClass(), getId(m1)))));
1: 				} catch (Exception e) {
1: 					d.fail(e);
1: 				}
1: 			}).start();
1: 		
1: 		assertEquals("Hello World!", d.getPromise().getValue());
1: 
1: 		Deferred<String> d2 = new Deferred<>();
1: 		
1: 		new Thread(() -> {
1: 				try {
1: 					d2.resolve(txControl.notSupported(() -> 
1: 						getMessage(em2.find(m2.getClass(), getId(m2)))));
1: 				} catch (Exception e) {
1: 					d2.fail(e);
1: 				}
1: 			}).start();
1: 		
1: 		assertEquals("Hello 1!", d2.getPromise().getValue());
1: 	}
1: 	
commit:2b6a667
/////////////////////////////////////////////////////////////////////////
1: 				ariesJPAVersion(),
/////////////////////////////////////////////////////////////////////////
1: 	protected Option ariesJPAVersion() {
1: 		return mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container", "2.3.0");
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: 				txControl.getCurrentContext().registerXAResource(new PoisonResource(), null);
commit:f6f7de7
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.NoSuchElementException;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.util.tracker.ServiceTracker;
1: public abstract class XAJPATransactionTest {
/////////////////////////////////////////////////////////////////////////
1: 	BundleContext context;
1: 	
1: 	@Inject
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	private final List<ServiceTracker<?,?>> trackers = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1: 	private EntityManager configuredEntityManager(String jdbcUrl, String unit) throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1: 		return getService(JPAEntityManagerProvider.class,
1: 	private <T> T getService(Class<T> clazz, long timeout) {
1: 		try {
1: 			return getService(clazz, null, timeout);
1: 		} catch (InvalidSyntaxException e) {
1: 			throw new IllegalArgumentException(e);
1: 		}
1: 	}
1: 
1: 	private <T> T getService(Class<T> clazz, String filter, long timeout) throws InvalidSyntaxException {
1: 		org.osgi.framework.Filter f = FrameworkUtil.createFilter(filter == null ? "(|(foo=bar)(!(foo=bar)))" : filter); 
1: 		
1: 		ServiceTracker<T, T> tracker = new ServiceTracker<T, T>(context, clazz, null) {
1: 			@Override
1: 			public T addingService(ServiceReference<T> reference) {
1: 				return f.match(reference) ? super.addingService(reference) : null;
1: 			}
1: 		};
1: 
1: 		tracker.open();
1: 		try {
1: 			T t = tracker.waitForService(timeout);
1: 			if(t == null) {
1: 				throw new NoSuchElementException(clazz.getName());
1: 			}
1: 			return t;
1: 		} catch (InterruptedException e) {
1: 			throw new RuntimeException("Error waiting for service " + clazz.getName(), e);
1: 		} finally {
1: 			trackers.add(tracker);
1: 		}
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		trackers.stream().forEach(ServiceTracker::close);
1: 		
1: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		Class<?> clz = Arrays.stream(context.getBundles())
1: 					.filter(b -> unit.equals(b.getSymbolicName()))
1: 					.map(b -> {
1: 							try {
1: 								return b.loadClass("org.apache.aries.tx.control.itests.entity.Message");
1: 							} catch (ClassNotFoundException e) {
1: 								throw new RuntimeException(e);
1: 							}
1: 						})
1: 					.findFirst().orElseThrow(() -> new IllegalArgumentException(unit));
commit:374d886
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.options;
1: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import static org.ops4j.pax.exam.CoreOptions.when;
1: 
1: import java.io.File;
0: import java.io.IOException;
1: import java.io.InputStream;
1: import java.lang.reflect.Field;
1: import java.util.Arrays;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import javax.inject.Inject;
1: import javax.persistence.EntityManager;
1: import javax.persistence.criteria.CriteriaBuilder;
1: import javax.persistence.criteria.CriteriaQuery;
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
0: import org.apache.aries.itest.AbstractIntegrationTest;
1: import org.apache.aries.tx.control.itests.entity.Message;
1: import org.h2.tools.Server;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.ProbeBuilder;
1: import org.ops4j.pax.exam.TestProbeBuilder;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.ops4j.pax.exam.util.Filter;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionRolledBackException;
1: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
1: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
0: public abstract class XAJPATransactionTest  extends AbstractIntegrationTest {
1: 
1: 	static final String XA_TEST_UNIT_1 = "xa-test-unit-1";
1: 	static final String XA_TEST_UNIT_2 = "xa-test-unit-2";
1: 
1: 	protected static final String ARIES_EMF_BUILDER_TARGET_FILTER = "aries.emf.builder.target.filter";
1: 	
1: 	@Inject
1: 	@Filter("(osgi.xa.enabled=true)")
1: 	protected TransactionControl txControl;
1: 
1: 	protected EntityManager em1;
1: 	protected EntityManager em2;
1: 
1: 	private Server server1;
1: 	private Server server2;
1: 
1: 	@Before
1: 	public void setUp() throws Exception {
1: 		server1 = Server.createTcpServer("-tcpPort", "0");
1: 		server1.start();
1: 
1: 		server2 = Server.createTcpServer("-tcpPort", "0");
1: 		server2.start();
1: 			
1: 		String jdbcUrl1 = "jdbc:h2:tcp://127.0.0.1:" + server1.getPort() + "/" + getRemoteDBPath("db1");
1: 		String jdbcUrl2 = "jdbc:h2:tcp://127.0.0.1:" + server2.getPort() + "/" + getRemoteDBPath("db2");
1: 		
1: 		em1 = configuredEntityManager(jdbcUrl1, XA_TEST_UNIT_1);
1: 		em2 = configuredEntityManager(jdbcUrl2, XA_TEST_UNIT_2);
1: 	}
1: 
1: 	private String getRemoteDBPath(String dbName) {
1: 		String fullResourceName = getClass().getName().replace('.', '/') + ".class";
1: 		
1: 		String resourcePath = getClass().getClassLoader().getResource(fullResourceName).getPath();
1: 		
1: 		File testClassesDir = new File(resourcePath.substring(0, resourcePath.length() - fullResourceName.length()));
1: 		
1: 		return new File(testClassesDir.getParentFile(), "testdb/" + dbName).getAbsolutePath();
1: 	}
1: 	
0: 	private EntityManager configuredEntityManager(String jdbcUrl, String unit) throws IOException {
1: 		
1: 		Dictionary<String, Object> props = getBaseProperties();
1: 		
1: 		props.put(DataSourceFactory.OSGI_JDBC_DRIVER_CLASS, "org.h2.Driver");
1: 		props.put(DataSourceFactory.JDBC_URL, jdbcUrl);
1: 		props.put(EntityManagerFactoryBuilder.JPA_UNIT_NAME, unit);
1: 		
1: 		String filter = System.getProperty(ARIES_EMF_BUILDER_TARGET_FILTER);
1: 		
1: 		if(filter != null) {
1: 			props.put(ARIES_EMF_BUILDER_TARGET_FILTER, "(&(osgi.unit.name=" + unit + ")" + filter + ")");
1: 		}
1: 		
0: 		ConfigurationAdmin cm = context().getService(ConfigurationAdmin.class, 5000);
1: 		
1: 		org.osgi.service.cm.Configuration config = cm.createFactoryConfiguration(
1: 				"org.apache.aries.tx.control.jpa.xa", null);
1: 		config.update(props);
1: 		
0: 		return context().getService(JPAEntityManagerProvider.class,
1: 				"(" + EntityManagerFactoryBuilder.JPA_UNIT_NAME + "=" + unit + ")",
1: 				5000).getResource(txControl);
1: 	}
1: 
1: 	protected Dictionary<String, Object> getBaseProperties() {
1: 		return new Hashtable<>();
1: 	}
1: 	
1: 	@After
1: 	public void tearDown() {
1: 
1: 		clearConfiguration();
1: 		
1: 		if(server1 != null) {
1: 			server1.stop();
1: 		}
1: 		if(server2 != null) {
1: 			server2.stop();
1: 		}
1: 
1: 		em1 = null;
1: 		em2 = null;
1: 	}
1: 
1: 	private void clearConfiguration() {
0: 		ConfigurationAdmin cm = context().getService(ConfigurationAdmin.class, 5000);
1: 		org.osgi.service.cm.Configuration[] cfgs = null;
1: 		try {
1: 			cfgs = cm.listConfigurations(null);
1: 		} catch (Exception e1) {
1: 			// TODO Auto-generated catch block
1: 			e1.printStackTrace();
1: 		}
1: 		
1: 		if(cfgs != null) {
1: 			for(org.osgi.service.cm.Configuration cfg : cfgs) {
1: 				try {
1: 					cfg.delete();
1: 				} catch (Exception e) {}
1: 			}
1: 			try {
1: 				Thread.sleep(250);
1: 			} catch (InterruptedException e) {
1: 				// TODO Auto-generated catch block
1: 				e.printStackTrace();
1: 			}
1: 		}
1: 	}
1: 
1: 	@ProbeBuilder
1: 	public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1: 	    return probe;
1: 	}
1: 	
1: 	@Configuration
1: 	public Option[] xaTxConfiguration() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		
1: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null)
1: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-xa").versionAsInProject(),
1: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jpa-xa").versionAsInProject(),
1: 				jpaProvider(),
0: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container", ariesJPAVersion()),
1: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1: 				
1: 				streamBundle(getTestUnit(XA_TEST_UNIT_1)),
1: 				streamBundle(getTestUnit(XA_TEST_UNIT_2))
1: 				
1: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1: 				);
1: 	}
1: 
1: 	private InputStream getTestUnit(String unit) {
1: 		String descriptor = "META-INF/" + unit + ".xml";
1: 		return TinyBundles.bundle()
1: 			.add(Message.class)
1: 			.add(descriptor, getClass().getResource("/" + descriptor))
1: 			.set("Meta-Persistence", descriptor)
1: 			.set("Bundle-SymbolicName", unit)
1: 			.set("Import-Package", "javax.persistence")
1: 			.set("Require-Capability", "osgi.contract;filter:=\"(&(osgi.contract=JavaJPA)(version=2.0))\"")
1: 			// This line is necessary while https://hibernate.atlassian.net/browse/HHH-10742 is unfixed
1: 			.set("DynamicImport-Package", "org.hibernate.proxy,javassist.util.proxy")
1: 			.build();
1: 	}
1: 
0: 	protected String ariesJPAVersion() {
0: 		return "2.3.0";
1: 	}
1: 	
1: 	protected abstract Option jpaProvider();
1: 	
1: 	@Test
1: 	public void testTwoPhaseCommit() throws Exception {
1: 		Object m1 = getMessageEntityFrom(XA_TEST_UNIT_1);
1: 		Object m2 = getMessageEntityFrom(XA_TEST_UNIT_2);
1: 
1: 		txControl.required(() -> {
1: 			setMessage(m1, "Hello World!");
1: 			
1: 			em1.persist(m1);
1: 
1: 			setMessage(m2, "Hello 1!");
1: 			
1: 			em2.persist(m2);
1: 			
1: 			return null;
1: 		});
1: 		
1: 		assertEquals("Hello World!", txControl.notSupported(() -> {
1: 			return getMessage(em1.find(m1.getClass(), getId(m1)));
1: 		}));
1: 
1: 		assertEquals("Hello 1!", txControl.notSupported(() -> {
1: 			return getMessage(em2.find(m2.getClass(), getId(m2)));
1: 		}));
1: 	}
1: 
1: 	@Test
1: 	public void testTwoPhaseRollback()  throws Exception  {
1: 		Object m1 = getMessageEntityFrom(XA_TEST_UNIT_1);
1: 		Object m2 = getMessageEntityFrom(XA_TEST_UNIT_2);
1: 		Object m3 = getMessageEntityFrom(XA_TEST_UNIT_2);
1: 		try {
1: 
1: 			txControl.required(() -> {
1: 				setMessage(m1, "Hello World!");
1: 				
1: 				em1.persist(m1);
1: 
1: 				setMessage(m2, "Hello 1!");
1: 				
1: 				em2.persist(m2);
1: 				
1: 				txControl.requiresNew(() -> {
1: 						setMessage(m3, "Hello 2!");
1: 						em2.persist(m3);
1: 						return null;
1: 					});
1: 				
0: 				txControl.getCurrentContext().registerXAResource(new PoisonResource());
1: 				
1: 				return null;
1: 			});
1: 			fail("Should roll back");
1: 		} catch (TransactionRolledBackException trbe) {
1: 		}
1: 		
1: 		assertEquals(0, (int) txControl.notSupported(() -> {
1: 				CriteriaBuilder cb = em1.getCriteriaBuilder();
1: 				CriteriaQuery<Long> countQuery = cb.createQuery(Long.class);
1: 				countQuery.select(cb.count(countQuery.from(m1.getClass())));
1: 				
1: 				return em1.createQuery(countQuery).getSingleResult().intValue();
1: 			}));
1: 		
1: 		
1: 		assertEquals(Arrays.asList("Hello 2!"), txControl.notSupported(() -> {
1: 			CriteriaBuilder cb = em2.getCriteriaBuilder();
1: 			CriteriaQuery<String> query = cb.createQuery(String.class);
1: 			query.select(query.from(m2.getClass()).get("message"));
1: 			
1: 			return em2.createQuery(query).getResultList();
1: 		}));
1: 	}
1: 	
1: 	Object getMessageEntityFrom(String unit) throws Exception {
0: 		Class<?> clz = context().getBundleByName(unit).loadClass(
0: 				"org.apache.aries.tx.control.itests.entity.Message");
1: 		return clz.newInstance();
1: 	}
1: 	
1: 	void setMessage(Object entity, String message) throws Exception {
1: 		Field f = entity.getClass().getField("message");
1: 		f.set(entity, message);
1: 	}
1: 
1: 	String getMessage(Object entity) throws Exception {
1: 		Field f = entity.getClass().getField("message");
1: 		return (String) f.get(entity);
1: 	}
1: 
1: 	Integer getId(Object entity) throws Exception {
1: 		Field f = entity.getClass().getField("id");
1: 		return (Integer) f.get(entity);
1: 	}
1: 	
1: 	private static class PoisonResource implements XAResource {
1: 
1: 		@Override
1: 		public void commit(Xid arg0, boolean arg1) throws XAException {
1: 			throw new XAException(XAException.XA_RBOTHER);
1: 		}
1: 
1: 		@Override
1: 		public void end(Xid arg0, int arg1) throws XAException {
1: 		}
1: 
1: 		@Override
1: 		public void forget(Xid arg0) throws XAException {
1: 		}
1: 
1: 		@Override
1: 		public int getTransactionTimeout() throws XAException {
1: 			return 30;
1: 		}
1: 
1: 		@Override
1: 		public boolean isSameRM(XAResource arg0) throws XAException {
1: 			return false;
1: 		}
1: 
1: 		@Override
1: 		public int prepare(Xid arg0) throws XAException {
1: 			throw new XAException(XAException.XA_RBOTHER);
1: 		}
1: 
1: 		@Override
1: 		public Xid[] recover(int arg0) throws XAException {
1: 			return new Xid[0];
1: 		}
1: 
1: 		@Override
1: 		public void rollback(Xid arg0) throws XAException {
1: 		}
1: 
1: 		@Override
1: 		public boolean setTransactionTimeout(int arg0) throws XAException {
1: 			return false;
1: 		}
1: 
1: 		@Override
1: 		public void start(Xid arg0, int arg1) throws XAException {
1: 		}
1: 	}
1: }
============================================================================