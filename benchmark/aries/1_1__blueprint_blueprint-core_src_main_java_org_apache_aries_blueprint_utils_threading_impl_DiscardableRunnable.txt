1:ef7b490: /*
1:ef7b490:  * Licensed to the Apache Software Foundation (ASF) under one
1:ef7b490:  * or more contributor license agreements.  See the NOTICE file
1:ef7b490:  * distributed with this work for additional information
1:ef7b490:  * regarding copyright ownership.  The ASF licenses this file
1:ef7b490:  * to you under the Apache License, Version 2.0 (the
1:ef7b490:  * "License"); you may not use this file except in compliance
1:ef7b490:  * with the License.  You may obtain a copy of the License at
1:ef7b490:  *
1:ef7b490:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ef7b490:  *
1:ef7b490:  * Unless required by applicable law or agreed to in writing,
1:ef7b490:  * software distributed under the License is distributed on an
1:ef7b490:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:ef7b490:  * KIND, either express or implied.  See the License for the
1:ef7b490:  * specific language governing permissions and limitations
1:ef7b490:  * under the License.
1:ef7b490:  */
1:ef7b490: package org.apache.aries.blueprint.utils.threading.impl;
1:ef7b490: 
1:ef7b490: import java.util.Collections;
1:ef7b490: import java.util.Queue;
1:ef7b490: import java.util.concurrent.LinkedBlockingQueue;
1:ef7b490: import java.util.concurrent.atomic.AtomicReference;
1:ef7b490: 
1:ef7b490: public class DiscardableRunnable implements Runnable, Discardable<Runnable>
1:ef7b490: {
1:ef7b490:   private AtomicReference<Runnable> r = new AtomicReference<Runnable>();
1:ef7b490:   private Queue<Discardable<Runnable>> _removeFromListOnRun;
1:ef7b490:   
1:ef7b490:   public DiscardableRunnable(Runnable run, Queue<Discardable<Runnable>> _unprocessedWork) {
1:ef7b490:     r.set(run);
1:ef7b490:     _removeFromListOnRun = _unprocessedWork;
1:ef7b490:     _removeFromListOnRun.add(this);
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   private DiscardableRunnable(Runnable run)
1:ef7b490:   {
1:ef7b490:     r.set(run);
1:ef7b490:     _removeFromListOnRun = new LinkedBlockingQueue<Discardable<Runnable>>();
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public void run()
1:ef7b490:   {
1:ef7b490:     _removeFromListOnRun.remove(this);
1:ef7b490:     Runnable run = r.get();
1:ef7b490:     if (run != null) {
1:ef7b490:       run.run();
1:ef7b490:     }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public Runnable discard()
1:ef7b490:   {
1:ef7b490:     _removeFromListOnRun.remove(this);
1:ef7b490:     return new DiscardableRunnable(r.getAndSet(null));
1:ef7b490:   }
1:ef7b490: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ef7b490
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.utils.threading.impl;
1: 
1: import java.util.Collections;
1: import java.util.Queue;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: public class DiscardableRunnable implements Runnable, Discardable<Runnable>
1: {
1:   private AtomicReference<Runnable> r = new AtomicReference<Runnable>();
1:   private Queue<Discardable<Runnable>> _removeFromListOnRun;
1:   
1:   public DiscardableRunnable(Runnable run, Queue<Discardable<Runnable>> _unprocessedWork) {
1:     r.set(run);
1:     _removeFromListOnRun = _unprocessedWork;
1:     _removeFromListOnRun.add(this);
1:   }
1: 
1:   private DiscardableRunnable(Runnable run)
1:   {
1:     r.set(run);
1:     _removeFromListOnRun = new LinkedBlockingQueue<Discardable<Runnable>>();
1:   }
1: 
1:   public void run()
1:   {
1:     _removeFromListOnRun.remove(this);
1:     Runnable run = r.get();
1:     if (run != null) {
1:       run.run();
1:     }
1:   }
1: 
1:   public Runnable discard()
1:   {
1:     _removeFromListOnRun.remove(this);
1:     return new DiscardableRunnable(r.getAndSet(null));
1:   }
1: }
============================================================================