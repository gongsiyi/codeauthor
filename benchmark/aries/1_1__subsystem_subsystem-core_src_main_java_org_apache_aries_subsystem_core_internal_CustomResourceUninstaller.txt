1:79b20bc: /*
1:79b20bc:  * Licensed under the Apache License, Version 2.0 (the "License");
1:79b20bc:  * you may not use this file except in compliance with the License.
1:79b20bc:  * You may obtain a copy of the License at
1:79b20bc:  *
1:79b20bc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:79b20bc:  *
1:79b20bc:  * Unless required by applicable law or agreed to in writing, software
1:79b20bc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:79b20bc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:79b20bc:  * See the License for the specific language governing permissions and
1:79b20bc:  * limitations under the License.
1:79b20bc:  */
1:79b20bc: package org.apache.aries.subsystem.core.internal;
1:79b20bc: 
1:79b20bc: import org.apache.aries.subsystem.ContentHandler;
1:79b20bc: import org.osgi.framework.ServiceReference;
1:79b20bc: import org.osgi.resource.Resource;
1:79b20bc: 
1:79b20bc: public class CustomResourceUninstaller extends ResourceUninstaller {
1:79b20bc:     private final ServiceReference<ContentHandler> handlerRef;
1:79b20bc:     private final String type;
1:79b20bc: 
1:79b20bc:     public CustomResourceUninstaller(Resource resource, String type,
1:79b20bc:             BasicSubsystem subsystem, ServiceReference<ContentHandler> handlerRef) {
1:79b20bc:         super(resource, subsystem);
1:79b20bc:         this.handlerRef = handlerRef;
1:79b20bc:         this.type = type;
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Override
1:79b20bc:     public void uninstall() {
1:79b20bc:         removeReference();
1:79b20bc:         try {
1:79b20bc:             ContentHandler handler = subsystem.getBundleContext().getService(handlerRef);
1:79b20bc:             if (handler != null) {
1:79b20bc:                 handler.uninstall(ResourceHelper.getSymbolicNameAttribute(resource), type, subsystem);
1:79b20bc:             }
1:79b20bc:         } finally {
1:79b20bc:             subsystem.getBundleContext().ungetService(handlerRef);
1:79b20bc:         }
1:79b20bc:     }
1:79b20bc: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:79b20bc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import org.apache.aries.subsystem.ContentHandler;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.resource.Resource;
1: 
1: public class CustomResourceUninstaller extends ResourceUninstaller {
1:     private final ServiceReference<ContentHandler> handlerRef;
1:     private final String type;
1: 
1:     public CustomResourceUninstaller(Resource resource, String type,
1:             BasicSubsystem subsystem, ServiceReference<ContentHandler> handlerRef) {
1:         super(resource, subsystem);
1:         this.handlerRef = handlerRef;
1:         this.type = type;
1:     }
1: 
1:     @Override
1:     public void uninstall() {
1:         removeReference();
1:         try {
1:             ContentHandler handler = subsystem.getBundleContext().getService(handlerRef);
1:             if (handler != null) {
1:                 handler.uninstall(ResourceHelper.getSymbolicNameAttribute(resource), type, subsystem);
1:             }
1:         } finally {
1:             subsystem.getBundleContext().ungetService(handlerRef);
1:         }
1:     }
1: }
============================================================================