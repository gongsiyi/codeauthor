2:25e28f1: /*
1:25e28f1:  * Licensed to the Apache Software Foundation (ASF) under one
1:25e28f1:  * or more contributor license agreements.  See the NOTICE file
1:25e28f1:  * distributed with this work for additional information
1:25e28f1:  * regarding copyright ownership.  The ASF licenses this file
1:25e28f1:  * to you under the Apache License, Version 2.0 (the
1:25e28f1:  * "License"); you may not use this file except in compliance
1:25e28f1:  * with the License.  You may obtain a copy of the License at
1:25e28f1:  *
1:25e28f1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:25e28f1:  *
1:25e28f1:  * Unless required by applicable law or agreed to in writing,
1:25e28f1:  * software distributed under the License is distributed on an
1:25e28f1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:25e28f1:  * KIND, either express or implied.  See the License for the
1:25e28f1:  * specific language governing permissions and limitations
1:25e28f1:  * under the License.
2:25e28f1:  */
1:25e28f1: package org.apache.aries.tx.control.itests;
17:25e28f1: 
1:25e28f1: import static org.junit.Assert.assertEquals;
1:25e28f1: import static org.junit.Assert.assertSame;
1:25e28f1: import static org.junit.Assert.fail;
1:25e28f1: 
1:25e28f1: import java.net.URISyntaxException;
1:9552b0c: import java.sql.PreparedStatement;
1:25e28f1: import java.sql.ResultSet;
1:25e28f1: import java.sql.Statement;
1:25e28f1: 
1:25e28f1: import org.junit.Test;
1:25e28f1: import org.junit.runner.RunWith;
1:25e28f1: import org.ops4j.pax.exam.junit.PaxExam;
1:25e28f1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:25e28f1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:f377acd: import org.osgi.service.transaction.control.ScopedWorkException;
1:25e28f1: import org.osgi.service.transaction.control.TransactionRolledBackException;
1:25e28f1: 
1:25e28f1: @RunWith(PaxExam.class)
1:25e28f1: @ExamReactorStrategy(PerClass.class)
1:d7c375c: public class ExceptionManagementTransactionTest extends AbstractTransactionTest {
1:25e28f1: 	
1:25e28f1: 	@Test
1:25e28f1: 	public void testRuntimeException() {
1:25e28f1: 		
1:25e28f1: 		RuntimeException toThrow = new RuntimeException("Bang!");
1:25e28f1: 		
2:25e28f1: 		try {
2:25e28f1: 			txControl.required(() -> {
1:25e28f1: 						connection.createStatement()
1:25e28f1: 							.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:25e28f1: 						throw toThrow;
2:25e28f1: 					});
1:25e28f1: 			fail("An exception should occur!");
1:f377acd: 		} catch (ScopedWorkException swe) {
1:f377acd: 			assertSame(toThrow, swe.getCause());
5:25e28f1: 		}
1:25e28f1: 
1:25e28f1: 		assertRollback();
1:25e28f1: 	}
1:25e28f1: 
1:9552b0c: 	@Test
1:25e28f1: 	public void testCheckedException() {
1:25e28f1: 		URISyntaxException toThrow = new URISyntaxException("yuck", "Bang!");
1:25e28f1: 		
1:25e28f1: 		try {
1:25e28f1: 			txControl.required(() -> {
1:25e28f1: 						connection.createStatement()
1:25e28f1: 							.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:25e28f1: 						throw toThrow;
1:25e28f1: 					});
1:25e28f1: 			fail("An exception should occur!");
1:25e28f1: 			// We have to catch Exception as the compiler complains
1:25e28f1: 			// otherwise
1:f377acd: 		} catch (ScopedWorkException swe) {
1:f377acd: 			assertSame(toThrow, swe.getCause());
1:25e28f1: 		}
1:25e28f1: 
1:25e28f1: 		assertRollback();
1:25e28f1: 	}
1:25e28f1: 
1:25e28f1: 	@Test
1:25e28f1: 	public void testPreCompletionException() {
1:25e28f1: 		RuntimeException toThrow = new RuntimeException("Bang!");
1:25e28f1: 		
1:25e28f1: 		try {
1:25e28f1: 			txControl.required(() -> {
1:25e28f1: 				txControl.getCurrentContext().preCompletion(() -> {
1:25e28f1: 						throw toThrow;
1:25e28f1: 					});
1:25e28f1: 				return connection.createStatement()
1:25e28f1: 					.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:25e28f1: 			});
1:25e28f1: 			fail("An exception should occur!");
1:25e28f1: 			// We have to catch Exception as the compiler complains
1:25e28f1: 			// otherwise
3:25e28f1: 		} catch (TransactionRolledBackException tre) {
3:25e28f1: 			assertSame(toThrow, tre.getCause());
1:25e28f1: 		}
1:25e28f1: 		
1:25e28f1: 		assertRollback();
1:25e28f1: 	}
1:25e28f1: 
1:25e28f1: 	@Test
1:9552b0c: 	public void testNoRollbackForException() {
1:9552b0c: 		RuntimeException toThrow = new RuntimeException("Bang!");
1:9552b0c: 		
1:9552b0c: 		try {
1:9552b0c: 			txControl.build()
1:9552b0c: 				.noRollbackFor(RuntimeException.class)
1:9552b0c: 				.required(() -> {
1:9552b0c: 						PreparedStatement ps = connection
1:9552b0c: 								.prepareStatement("Insert into TEST_TABLE values ( ? )");
1:9552b0c: 						
1:9552b0c: 						ps.setString(1, "Hello World!");
1:9552b0c: 						ps.executeUpdate();
1:9552b0c: 						
1:9552b0c: 						throw toThrow;
1:9552b0c: 					});
1:9552b0c: 			fail("An exception should occur!");
1:9552b0c: 			// We have to catch Exception as the compiler complains
1:9552b0c: 			// otherwise
1:9552b0c: 		} catch (ScopedWorkException swe) {
1:9552b0c: 			assertSame(toThrow, swe.getCause());
1:9552b0c: 		}
1:9552b0c: 		
1:9552b0c: 		assertEquals("1: Hello World!", txControl.notSupported(() -> {
1:9552b0c: 			Statement s = connection.createStatement();
1:9552b0c: 			
1:9552b0c: 			ResultSet rs = s.executeQuery("Select count(*) from TEST_TABLE");
1:9552b0c: 			rs.next();
1:9552b0c: 			int count = rs.getInt(1);
1:9552b0c: 			
1:9552b0c: 			rs = s.executeQuery("Select message from TEST_TABLE ORDER BY message");
1:9552b0c: 			
1:9552b0c: 			rs.next();
1:9552b0c: 			return "" + count + ": " + rs.getString(1);
1:9552b0c: 		}));
1:9552b0c: 	}
1:9552b0c: 
1:25e28f1: 	private void assertRollback() {
1:25e28f1: 		assertEquals(Integer.valueOf(0), txControl.notSupported(() -> {
1:25e28f1: 			ResultSet rs = connection.createStatement()
1:25e28f1: 					.executeQuery("Select count(*) from TEST_TABLE");
1:25e28f1: 			rs.next();
1:25e28f1: 			return rs.getInt(1);
1:25e28f1: 		}));
1:25e28f1: 	}
1:25e28f1: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:d7c375c
/////////////////////////////////////////////////////////////////////////
1: public class ExceptionManagementTransactionTest extends AbstractTransactionTest {
/////////////////////////////////////////////////////////////////////////
commit:9552b0c
/////////////////////////////////////////////////////////////////////////
1: import java.sql.PreparedStatement;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	@Test
1: 	public void testNoRollbackForException() {
1: 		RuntimeException toThrow = new RuntimeException("Bang!");
1: 		
1: 		try {
1: 			txControl.build()
1: 				.noRollbackFor(RuntimeException.class)
1: 				.required(() -> {
1: 						PreparedStatement ps = connection
1: 								.prepareStatement("Insert into TEST_TABLE values ( ? )");
1: 						
1: 						ps.setString(1, "Hello World!");
1: 						ps.executeUpdate();
1: 						
1: 						throw toThrow;
1: 					});
1: 			fail("An exception should occur!");
1: 			// We have to catch Exception as the compiler complains
1: 			// otherwise
1: 		} catch (ScopedWorkException swe) {
1: 			assertSame(toThrow, swe.getCause());
1: 		}
1: 		
1: 		assertEquals("1: Hello World!", txControl.notSupported(() -> {
1: 			Statement s = connection.createStatement();
1: 			
1: 			ResultSet rs = s.executeQuery("Select count(*) from TEST_TABLE");
1: 			rs.next();
1: 			int count = rs.getInt(1);
1: 			
1: 			rs = s.executeQuery("Select message from TEST_TABLE ORDER BY message");
1: 			
1: 			rs.next();
1: 			return "" + count + ": " + rs.getString(1);
1: 		}));
1: 	}
1: 
commit:f377acd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.transaction.control.ScopedWorkException;
/////////////////////////////////////////////////////////////////////////
1: 		} catch (ScopedWorkException swe) {
1: 			assertSame(toThrow, swe.getCause());
/////////////////////////////////////////////////////////////////////////
1: 		} catch (ScopedWorkException swe) {
1: 			assertSame(toThrow, swe.getCause());
/////////////////////////////////////////////////////////////////////////
commit:25e28f1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.fail;
0: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
0: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.CoreOptions.when;
1: 
1: import java.net.URISyntaxException;
0: import java.sql.Connection;
1: import java.sql.ResultSet;
0: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.util.Properties;
1: 
0: import javax.inject.Inject;
1: 
0: import org.apache.aries.itest.AbstractIntegrationTest;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Configuration;
0: import org.ops4j.pax.exam.CoreOptions;
0: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
0: import org.osgi.service.jdbc.DataSourceFactory;
0: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionRolledBackException;
0: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
0: public class ExceptionManagementTransactionTest extends AbstractIntegrationTest {
1: 
0: 	@Inject
0: 	TransactionControl txControl;
1: 
0: 	@Inject
0: 	JDBCConnectionProviderFactory resourceProviderFactory;
1: 	
0: 	@Inject
0: 	DataSourceFactory dsf;
1: 	
0: 	Connection connection;
1: 
0: 	@Before
0: 	public void setUp() {
0: 		Properties jdbc = new Properties();
1: 		
0: 		jdbc.setProperty(DataSourceFactory.JDBC_URL, "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
1: 		
0: 		connection = resourceProviderFactory.getProviderFor(dsf, jdbc, null).getResource(txControl);
1: 		
1: 		
1: 		txControl.required(() -> {
0: 				Statement s = connection.createStatement();
1: 				try {
0: 					s.execute("DROP TABLE TEST_TABLE");
0: 				} catch (SQLException sqle) {}
0: 					s.execute("CREATE TABLE TEST_TABLE ( message varchar(255) )");
0: 					return null;
1: 			});
1: 	}
1: 	
0: 	@After
0: 	public void tearDown() {
1: 
0: 		txControl.required(() -> connection.createStatement()
0: 				.execute("DROP TABLE TEST_TABLE"));
1: 
1: 	}
1: 	
1: 	@Test
1: 	public void testRuntimeException() {
1: 		
1: 		RuntimeException toThrow = new RuntimeException("Bang!");
1: 		
1: 		try {
1: 			txControl.required(() -> {
1: 						connection.createStatement()
1: 							.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 						throw toThrow;
1: 					});
1: 			fail("An exception should occur!");
1: 		} catch (TransactionRolledBackException tre) {
1: 			assertSame(toThrow, tre.getCause());
1: 		}
1: 
1: 		assertRollback();
1: 	}
1: 
1: 	@Test
1: 	public void testCheckedException() {
1: 		URISyntaxException toThrow = new URISyntaxException("yuck", "Bang!");
1: 		
1: 		try {
1: 			txControl.required(() -> {
1: 						connection.createStatement()
1: 							.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 						throw toThrow;
1: 					});
1: 			fail("An exception should occur!");
1: 			// We have to catch Exception as the compiler complains
1: 			// otherwise
1: 		} catch (TransactionRolledBackException tre) {
1: 			assertSame(toThrow, tre.getCause());
1: 		}
1: 
1: 		assertRollback();
1: 	}
1: 
0: 	//This test currently fails - the local implementation should probably
0: 	//use the coordinator a little differently
1: 	@Test
0: 	@Ignore
1: 	public void testPreCompletionException() {
1: 		RuntimeException toThrow = new RuntimeException("Bang!");
1: 		
1: 		try {
1: 			txControl.required(() -> {
1: 				txControl.getCurrentContext().preCompletion(() -> {
1: 						throw toThrow;
1: 					});
1: 				return connection.createStatement()
1: 					.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 			});
1: 			fail("An exception should occur!");
1: 			// We have to catch Exception as the compiler complains
1: 			// otherwise
1: 		} catch (TransactionRolledBackException tre) {
1: 			assertSame(toThrow, tre.getCause());
1: 		}
1: 		
1: 		assertRollback();
1: 	}
1: 
1: 	private void assertRollback() {
1: 		assertEquals(Integer.valueOf(0), txControl.notSupported(() -> {
1: 			ResultSet rs = connection.createStatement()
1: 					.executeQuery("Select count(*) from TEST_TABLE");
1: 			rs.next();
1: 			return rs.getInt(1);
1: 		}));
1: 	}
1: 
0: 	@Configuration
0: 	public Option[] configuration() {
0: 		String localRepo = System.getProperty("maven.repo.local");
0: 		if (localRepo == null) {
0: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
0: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
0: 				when(localRepo != null)
0: 						.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
0: 				mavenBundle("org.apache.felix", "org.apache.felix.coordinator").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-local").versionAsInProject(),
0: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jdbc-local").versionAsInProject(),
0: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
0: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 				
1: 		/*
0: 		 * vmOption
0: 		 * ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0: 		 * waitForFrameworkStartup(),
1: 		 */
0: 		);
1: 	}
1: 
1: }
============================================================================