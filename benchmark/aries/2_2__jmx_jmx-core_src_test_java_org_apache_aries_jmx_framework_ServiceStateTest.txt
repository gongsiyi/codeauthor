1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
2:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.framework;
35:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertArrayEquals;
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertFalse;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:fdf3952: import static org.junit.Assert.assertTrue;
1:fdf3952: import static org.mockito.Mockito.atMost;
1:fdf3952: import static org.mockito.Mockito.mock;
1:fdf3952: import static org.mockito.Mockito.never;
1:fdf3952: import static org.mockito.Mockito.verify;
1:fdf3952: import static org.mockito.Mockito.when;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_LOCATION;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_SYMBOLIC_NAME;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.EVENT;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.OBJECTNAME;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS;
1:fdf3952: 
1:fdf3952: import java.util.LinkedList;
1:fdf3952: import java.util.List;
1:fdf3952: import java.util.concurrent.ExecutorService;
1:fdf3952: import java.util.concurrent.TimeUnit;
1:fdf3952: 
1:eb663f7: import javax.management.AttributeChangeNotification;
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: import javax.management.Notification;
1:fdf3952: import javax.management.NotificationListener;
1:fdf3952: import javax.management.ObjectName;
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.Logger;
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.mockito.ArgumentCaptor;
1:fdf3952: import org.osgi.framework.AllServiceListener;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.ServiceEvent;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: 
1:fdf3952: /**
1:eb663f7:  *
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class ServiceStateTest {
1:eb663f7: 
1:eb663f7: 
1:a0df2a3:     private void createService(StateConfig stateConfig, final List<Notification> received,
1:a0df2a3:                                final List<AttributeChangeNotification> attributeChanges) throws Exception {
1:fdf3952:         BundleContext context = mock(BundleContext.class);
1:fdf3952:         Logger logger = mock(Logger.class);
1:eb663f7: 
1:a0df2a3:         ServiceState serviceState = new ServiceState(context, stateConfig, logger);
1:eb663f7: 
1:fdf3952:         ServiceReference reference = mock(ServiceReference.class);
1:fdf3952:         Bundle b1 = mock(Bundle.class);
1:eb663f7: 
1:fdf3952:         when(b1.getBundleId()).thenReturn(new Long(9));
1:fdf3952:         when(b1.getSymbolicName()).thenReturn("bundle");
1:fdf3952:         when(b1.getLocation()).thenReturn("file:/location");
1:fdf3952:         when(reference.getBundle()).thenReturn(b1);
1:fdf3952:         when(reference.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(44));
1:fdf3952:         when(reference.getProperty(Constants.OBJECTCLASS)).thenReturn(new String[] {"org.apache.aries.jmx.Mock"});
1:eb663f7: 
1:eb663f7:         when(context.getAllServiceReferences(null, null)).thenReturn(new ServiceReference[] {reference});
1:eb663f7: 
1:fdf3952:         ServiceEvent registeredEvent = mock(ServiceEvent.class);
1:fdf3952:         when(registeredEvent.getServiceReference()).thenReturn(reference);
1:fdf3952:         when(registeredEvent.getType()).thenReturn(ServiceEvent.REGISTERED);
1:eb663f7: 
1:fdf3952:         ServiceEvent modifiedEvent = mock(ServiceEvent.class);
1:fdf3952:         when(modifiedEvent.getServiceReference()).thenReturn(reference);
1:fdf3952:         when(modifiedEvent.getType()).thenReturn(ServiceEvent.MODIFIED);
1:eb663f7: 
1:fdf3952:         MBeanServer server = mock(MBeanServer.class);
1:eb663f7: 
1:fdf3952:         //setup for notification
1:fdf3952:         ObjectName objectName = new ObjectName(OBJECTNAME);
1:fdf3952:         serviceState.preRegister(server, objectName);
1:fdf3952:         serviceState.postRegister(true);
1:eb663f7: 
1:eb663f7: 
1:fdf3952:         //add NotificationListener to receive the events
1:fdf3952:         serviceState.addNotificationListener(new NotificationListener() {
1:fdf3952:             public void handleNotification(Notification notification, Object handback) {
1:eb663f7:                 if (notification instanceof AttributeChangeNotification) {
1:eb663f7:                     attributeChanges.add((AttributeChangeNotification) notification);
1:eb663f7:                 } else {
1:eb663f7:                     received.add(notification);
1:eb663f7:                 }
1:fdf3952:             }
1:fdf3952:         }, null, null);
1:eb663f7: 
1:fdf3952:         // capture the ServiceListener registered with BundleContext to issue ServiceEvents
1:eb663f7:         ArgumentCaptor<AllServiceListener> argument = ArgumentCaptor.forClass(AllServiceListener.class);
1:fdf3952:         verify(context).addServiceListener(argument.capture());
1:eb663f7: 
1:fdf3952:         //send events
1:fdf3952:         AllServiceListener serviceListener = argument.getValue();
1:fdf3952:         serviceListener.serviceChanged(registeredEvent);
1:fdf3952:         serviceListener.serviceChanged(modifiedEvent);
1:eb663f7: 
1:eb663f7:         //shutdown dispatcher via unregister callback
1:fdf3952:         serviceState.postDeregister();
1:fdf3952:         //check the ServiceListener is cleaned up
1:fdf3952:         verify(context).removeServiceListener(serviceListener);
1:eb663f7: 
1:fdf3952:         ExecutorService dispatcher = serviceState.getEventDispatcher();
1:fdf3952:         assertTrue(dispatcher.isShutdown());
1:fdf3952:         dispatcher.awaitTermination(2, TimeUnit.SECONDS);
1:fdf3952:         assertTrue(dispatcher.isTerminated());
1:a0df2a3:     }
1:a0df2a3: 
1:a0df2a3:     @Test
1:a0df2a3:     public void testNotificationsForServiceEvents() throws Exception {
1:a0df2a3:         StateConfig stateConfig = new StateConfig();
1:a0df2a3: 
1:a0df2a3:         //holders for Notifications captured
1:a0df2a3:         List<Notification> received = new LinkedList<Notification>();
1:a0df2a3:         List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1:a0df2a3: 
1:a0df2a3:         createService(stateConfig, received, attributeChanges);
1:eb663f7: 
1:fdf3952:         assertEquals(2, received.size());
1:fdf3952:         Notification registered = received.get(0);
1:fdf3952:         assertEquals(1, registered.getSequenceNumber());
1:fdf3952:         CompositeData data = (CompositeData) registered.getUserData();
1:fdf3952:         assertEquals(new Long(44), data.get(IDENTIFIER));
1:fdf3952:         assertEquals(new Long(9), data.get(BUNDLE_IDENTIFIER));
1:fdf3952:         assertEquals("file:/location", data.get(BUNDLE_LOCATION));
1:fdf3952:         assertEquals("bundle", data.get(BUNDLE_SYMBOLIC_NAME));
1:fdf3952:         assertArrayEquals(new String[] {"org.apache.aries.jmx.Mock" }, (String[]) data.get(OBJECT_CLASS));
1:fdf3952:         assertEquals(ServiceEvent.REGISTERED, data.get(EVENT));
1:eb663f7: 
1:fdf3952:         Notification modified = received.get(1);
1:fdf3952:         assertEquals(2, modified.getSequenceNumber());
1:fdf3952:         data = (CompositeData) modified.getUserData();
1:fdf3952:         assertEquals(new Long(44), data.get(IDENTIFIER));
1:fdf3952:         assertEquals(new Long(9), data.get(BUNDLE_IDENTIFIER));
1:fdf3952:         assertEquals("file:/location", data.get(BUNDLE_LOCATION));
1:fdf3952:         assertEquals("bundle", data.get(BUNDLE_SYMBOLIC_NAME));
1:fdf3952:         assertArrayEquals(new String[] {"org.apache.aries.jmx.Mock" }, (String[]) data.get(OBJECT_CLASS));
1:fdf3952:         assertEquals(ServiceEvent.MODIFIED, data.get(EVENT));
1:eb663f7: 
1:eb663f7:         assertEquals(1, attributeChanges.size());
1:eb663f7:         AttributeChangeNotification ac = attributeChanges.get(0);
1:eb663f7:         assertEquals("ServiceIds", ac.getAttributeName());
1:d98b820:         assertEquals(0, ((long [])ac.getOldValue()).length);
1:d98b820:         assertEquals(1, ((long [])ac.getNewValue()).length);
1:d98b820:         assertEquals(44L, ((long [])ac.getNewValue())[0]);
1:fdf3952:     }
1:eb663f7: 
1:a0df2a3:     @Test
1:1570712:     public void testNotificationsForServiceEventsDisabled() throws Exception {
1:1570712:         StateConfig stateConfig = new StateConfig();
1:1570712:         stateConfig.setServiceChangeNotificationEnabled(false);
1:1570712: 
1:1570712:         //holders for Notifications captured
1:1570712:         List<Notification> received = new LinkedList<Notification>();
1:1570712:         List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1:1570712: 
1:1570712:         createService(stateConfig, received, attributeChanges);
1:1570712: 
1:1570712:         assertEquals(0, received.size());
1:1570712:     }
1:1570712: 
1:1570712:     @Test
1:fdf3952:     public void testLifeCycleOfNotificationSupport() throws Exception {
1:eb663f7: 
1:fdf3952:         BundleContext context = mock(BundleContext.class);
1:fdf3952:         Logger logger = mock(Logger.class);
1:eb663f7: 
1:a0df2a3:         ServiceState serviceState = new ServiceState(context, new StateConfig(), logger);
1:eb663f7: 
1:fdf3952:         MBeanServer server1 = mock(MBeanServer.class);
1:fdf3952:         MBeanServer server2 = mock(MBeanServer.class);
1:eb663f7: 
1:fdf3952:         ObjectName objectName = new ObjectName(OBJECTNAME);
1:fdf3952:         serviceState.preRegister(server1, objectName);
1:fdf3952:         serviceState.postRegister(true);
1:eb663f7: 
1:fdf3952:         // capture the ServiceListener registered with BundleContext to issue ServiceEvents
1:eb663f7:         ArgumentCaptor<AllServiceListener> argument = ArgumentCaptor.forClass(AllServiceListener.class);
1:fdf3952:         verify(context).addServiceListener(argument.capture());
1:eb663f7: 
1:fdf3952:         AllServiceListener serviceListener = argument.getValue();
1:fdf3952:         assertNotNull(serviceListener);
1:eb663f7: 
1:fdf3952:         ExecutorService dispatcher = serviceState.getEventDispatcher();
1:fdf3952: 
1:fdf3952:         //do registration with another server
1:fdf3952:         serviceState.preRegister(server2, objectName);
1:fdf3952:         serviceState.postRegister(true);
1:eb663f7: 
1:fdf3952:         // check no more actions on BundleContext
1:eb663f7:         argument = ArgumentCaptor.forClass(AllServiceListener.class);
1:fdf3952:         verify(context, atMost(1)).addServiceListener(argument.capture());
1:fdf3952:         assertEquals(1, argument.getAllValues().size());
1:eb663f7: 
1:fdf3952:         //do one unregister
1:fdf3952:         serviceState.postDeregister();
1:eb663f7: 
1:fdf3952:         //verify bundleListener not invoked
1:fdf3952:         verify(context, never()).removeServiceListener(serviceListener);
1:fdf3952:         assertFalse(dispatcher.isShutdown());
1:eb663f7: 
1:fdf3952:         //do second unregister and check cleanup
1:fdf3952:         serviceState.postDeregister();
1:fdf3952:         verify(context).removeServiceListener(serviceListener);
1:fdf3952:         assertTrue(dispatcher.isShutdown());
1:fdf3952:         dispatcher.awaitTermination(2, TimeUnit.SECONDS);
1:fdf3952:         assertTrue(dispatcher.isTerminated());
1:eb663f7: 
1:eb663f7: 
1:eb663f7: 
1:fdf3952:     }
1:fdf3952: 
2:fdf3952:     @Test
1:a0df2a3:     public void testAttributeNotificationDisabled() throws Exception {
1:1570712:         StateConfig stateConfig = new StateConfig();
1:1570712:         stateConfig.setAttributeChangeNotificationEnabled(false);
1:a0df2a3: 
1:a0df2a3:         //holders for Notifications captured
1:a0df2a3:         List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1:a0df2a3:         createService(stateConfig, new LinkedList<Notification>(), attributeChanges);
1:a0df2a3: 
1:a0df2a3:         assertEquals(0, attributeChanges.size());
1:a0df2a3:     }
1:a0df2a3: 
1:fdf3952: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1570712
/////////////////////////////////////////////////////////////////////////
1:     public void testNotificationsForServiceEventsDisabled() throws Exception {
1:         StateConfig stateConfig = new StateConfig();
1:         stateConfig.setServiceChangeNotificationEnabled(false);
1: 
1:         //holders for Notifications captured
1:         List<Notification> received = new LinkedList<Notification>();
1:         List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1: 
1:         createService(stateConfig, received, attributeChanges);
1: 
1:         assertEquals(0, received.size());
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:         StateConfig stateConfig = new StateConfig();
1:         stateConfig.setAttributeChangeNotificationEnabled(false);
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:a0df2a3
/////////////////////////////////////////////////////////////////////////
1:     private void createService(StateConfig stateConfig, final List<Notification> received,
1:                                final List<AttributeChangeNotification> attributeChanges) throws Exception {
1:         ServiceState serviceState = new ServiceState(context, stateConfig, logger);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     @Test
1:     public void testNotificationsForServiceEvents() throws Exception {
1:         StateConfig stateConfig = new StateConfig();
1: 
1:         //holders for Notifications captured
1:         List<Notification> received = new LinkedList<Notification>();
1:         List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1: 
1:         createService(stateConfig, received, attributeChanges);
/////////////////////////////////////////////////////////////////////////
1:         ServiceState serviceState = new ServiceState(context, new StateConfig(), logger);
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testAttributeNotificationDisabled() throws Exception {
0:         StateConfig stateConfig = new StateConfig(false);
1: 
1:         //holders for Notifications captured
1:         List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1:         createService(stateConfig, new LinkedList<Notification>(), attributeChanges);
1: 
1:         assertEquals(0, attributeChanges.size());
1:     }
1: 
commit:0273964
commit:d98b820
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(0, ((long [])ac.getOldValue()).length);
1:         assertEquals(1, ((long [])ac.getNewValue()).length);
1:         assertEquals(44L, ((long [])ac.getNewValue())[0]);
commit:ade4709
/////////////////////////////////////////////////////////////////////////
0:         //holders for Notifications captured
commit:eb663f7
/////////////////////////////////////////////////////////////////////////
1: import javax.management.AttributeChangeNotification;
/////////////////////////////////////////////////////////////////////////
1:  *
1: 
1: 
1: 
1: 
1: 
1: 
1:         when(context.getAllServiceReferences(null, null)).thenReturn(new ServiceReference[] {reference});
1: 
1: 
1: 
1: 
1: 
0:         final List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1: 
1:                 if (notification instanceof AttributeChangeNotification) {
1:                     attributeChanges.add((AttributeChangeNotification) notification);
1:                 } else {
1:                     received.add(notification);
1:                 }
1: 
1:         ArgumentCaptor<AllServiceListener> argument = ArgumentCaptor.forClass(AllServiceListener.class);
1: 
1: 
1:         //shutdown dispatcher via unregister callback
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertEquals(1, attributeChanges.size());
1:         AttributeChangeNotification ac = attributeChanges.get(0);
1:         assertEquals("ServiceIds", ac.getAttributeName());
0:         assertEquals(0, ((Long [])ac.getOldValue()).length);
0:         assertEquals(1, ((Long [])ac.getNewValue()).length);
0:         assertEquals(new Long(44), ((Long [])ac.getNewValue())[0]);
1: 
1: 
1: 
1: 
1: 
1:         ArgumentCaptor<AllServiceListener> argument = ArgumentCaptor.forClass(AllServiceListener.class);
1: 
1: 
1: 
1: 
1:         argument = ArgumentCaptor.forClass(AllServiceListener.class);
1: 
1: 
1: 
1: 
1: 
1: 
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework;
1: 
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.mockito.Mockito.atMost;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.never;
1: import static org.mockito.Mockito.verify;
1: import static org.mockito.Mockito.when;
1: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER;
1: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_LOCATION;
1: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_SYMBOLIC_NAME;
1: import static org.osgi.jmx.framework.ServiceStateMBean.EVENT;
1: import static org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER;
1: import static org.osgi.jmx.framework.ServiceStateMBean.OBJECTNAME;
1: import static org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS;
1: 
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.management.MBeanServer;
1: import javax.management.Notification;
1: import javax.management.NotificationListener;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.aries.jmx.Logger;
1: import org.junit.Test;
1: import org.mockito.ArgumentCaptor;
1: import org.osgi.framework.AllServiceListener;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceEvent;
1: import org.osgi.framework.ServiceReference;
1: 
1: /**
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class ServiceStateTest {
1: 
1:     
1:     @Test
0:     public void testNotificationsForServiceEvents() throws Exception {
1:         
1:         BundleContext context = mock(BundleContext.class);
1:         Logger logger = mock(Logger.class);
1:         
0:         ServiceState serviceState = new ServiceState(context, logger);
1:         
1:         ServiceReference reference = mock(ServiceReference.class);
1:         Bundle b1 = mock(Bundle.class);
1:         
1:         when(b1.getBundleId()).thenReturn(new Long(9));
1:         when(b1.getSymbolicName()).thenReturn("bundle");
1:         when(b1.getLocation()).thenReturn("file:/location");
1:         when(reference.getBundle()).thenReturn(b1);
1:         when(reference.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(44));
1:         when(reference.getProperty(Constants.OBJECTCLASS)).thenReturn(new String[] {"org.apache.aries.jmx.Mock"});
1:         
1:         ServiceEvent registeredEvent = mock(ServiceEvent.class);
1:         when(registeredEvent.getServiceReference()).thenReturn(reference);
1:         when(registeredEvent.getType()).thenReturn(ServiceEvent.REGISTERED);
1:        
1:         ServiceEvent modifiedEvent = mock(ServiceEvent.class);
1:         when(modifiedEvent.getServiceReference()).thenReturn(reference);
1:         when(modifiedEvent.getType()).thenReturn(ServiceEvent.MODIFIED);
1:         
1:         MBeanServer server = mock(MBeanServer.class);
1:         
1:         //setup for notification
1:         ObjectName objectName = new ObjectName(OBJECTNAME);
1:         serviceState.preRegister(server, objectName);
1:         serviceState.postRegister(true);
1:         
0:         //holder for Notifications captured
0:         final List<Notification> received = new LinkedList<Notification>();
1:         
1:         //add NotificationListener to receive the events
1:         serviceState.addNotificationListener(new NotificationListener() {
1:             public void handleNotification(Notification notification, Object handback) {
0:                received.add(notification);
1:             }
1:         }, null, null);
1:         
1:         // capture the ServiceListener registered with BundleContext to issue ServiceEvents
0:         ArgumentCaptor<AllServiceListener> argument = ArgumentCaptor.forClass(AllServiceListener.class);        
1:         verify(context).addServiceListener(argument.capture());
1:         
1:         //send events
1:         AllServiceListener serviceListener = argument.getValue();
1:         serviceListener.serviceChanged(registeredEvent);
1:         serviceListener.serviceChanged(modifiedEvent);
1:         
0:         //shutdown dispatcher via unregister callback 
1:         serviceState.postDeregister();
1:         //check the ServiceListener is cleaned up
1:         verify(context).removeServiceListener(serviceListener);
1:         
1:         ExecutorService dispatcher = serviceState.getEventDispatcher();
1:         assertTrue(dispatcher.isShutdown());
1:         dispatcher.awaitTermination(2, TimeUnit.SECONDS);
1:         assertTrue(dispatcher.isTerminated());
1:         
1:         assertEquals(2, received.size());
1:         Notification registered = received.get(0);
1:         assertEquals(1, registered.getSequenceNumber());
1:         CompositeData data = (CompositeData) registered.getUserData();
1:         assertEquals(new Long(44), data.get(IDENTIFIER));
1:         assertEquals(new Long(9), data.get(BUNDLE_IDENTIFIER));
1:         assertEquals("file:/location", data.get(BUNDLE_LOCATION));
1:         assertEquals("bundle", data.get(BUNDLE_SYMBOLIC_NAME));
1:         assertArrayEquals(new String[] {"org.apache.aries.jmx.Mock" }, (String[]) data.get(OBJECT_CLASS));
1:         assertEquals(ServiceEvent.REGISTERED, data.get(EVENT));
1:         
1:         Notification modified = received.get(1);
1:         assertEquals(2, modified.getSequenceNumber());
1:         data = (CompositeData) modified.getUserData();
1:         assertEquals(new Long(44), data.get(IDENTIFIER));
1:         assertEquals(new Long(9), data.get(BUNDLE_IDENTIFIER));
1:         assertEquals("file:/location", data.get(BUNDLE_LOCATION));
1:         assertEquals("bundle", data.get(BUNDLE_SYMBOLIC_NAME));
1:         assertArrayEquals(new String[] {"org.apache.aries.jmx.Mock" }, (String[]) data.get(OBJECT_CLASS));
1:         assertEquals(ServiceEvent.MODIFIED, data.get(EVENT));
1:         
1:     }
1:     
1:     @Test
1:     public void testLifeCycleOfNotificationSupport() throws Exception {
1:         
1:         BundleContext context = mock(BundleContext.class);
1:         Logger logger = mock(Logger.class);
1:         
0:         ServiceState serviceState = new ServiceState(context, logger);
1:         
1:         MBeanServer server1 = mock(MBeanServer.class);
1:         MBeanServer server2 = mock(MBeanServer.class);
1: 
1:         ObjectName objectName = new ObjectName(OBJECTNAME);
1:         serviceState.preRegister(server1, objectName);
1:         serviceState.postRegister(true);
1:         
1:         // capture the ServiceListener registered with BundleContext to issue ServiceEvents
0:         ArgumentCaptor<AllServiceListener> argument = ArgumentCaptor.forClass(AllServiceListener.class);        
1:         verify(context).addServiceListener(argument.capture());
1:         
1:         AllServiceListener serviceListener = argument.getValue();
1:         assertNotNull(serviceListener);
1:         
1:         ExecutorService dispatcher = serviceState.getEventDispatcher();
1:         
1:         //do registration with another server
1:         serviceState.preRegister(server2, objectName);
1:         serviceState.postRegister(true);
1:         
1:         // check no more actions on BundleContext
0:         argument = ArgumentCaptor.forClass(AllServiceListener.class);              
1:         verify(context, atMost(1)).addServiceListener(argument.capture());
1:         assertEquals(1, argument.getAllValues().size());
1:         
1:         //do one unregister
1:         serviceState.postDeregister();
1:         
1:         //verify bundleListener not invoked
1:         verify(context, never()).removeServiceListener(serviceListener);
1:         assertFalse(dispatcher.isShutdown());
1:         
1:         //do second unregister and check cleanup
1:         serviceState.postDeregister();
1:         verify(context).removeServiceListener(serviceListener);
1:         assertTrue(dispatcher.isShutdown());
1:         dispatcher.awaitTermination(2, TimeUnit.SECONDS);
1:         assertTrue(dispatcher.isTerminated());
1:         
1:       
1:         
1:     }
1: 
1: }
============================================================================