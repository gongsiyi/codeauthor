1:aeedca8: package org.apache.aries.subsystem.scope.impl;
5:e9f9bca: 
1:aeedca8: import java.util.Collection;
1:aeedca8: import java.util.Collections;
1:e9f9bca: import java.util.HashSet;
1:aeedca8: import java.util.List;
1:aeedca8: import java.util.Map;
1:e9f9bca: import java.util.Set;
1:e9f9bca: 
1:aeedca8: import org.apache.aries.subsystem.scope.Scope;
1:e9f9bca: import org.apache.aries.subsystem.scope.ScopeUpdate;
1:aeedca8: import org.apache.aries.subsystem.scope.SharePolicy;
1:aeedca8: import org.osgi.framework.Bundle;
1:e9f9bca: 
1:aeedca8: public class ScopeImpl implements Scope {
1:6f4b079: 	private volatile boolean updating;
1:e9f9bca: 	
1:6f4b079: 	private long lastUpdate;
1:e9f9bca: 	
1:6f4b079: 	private final Collection<Bundle> bundles = Collections.synchronizedSet(new HashSet<Bundle>());
1:6f4b079: 	private final Set<Scope> children = Collections.synchronizedSet(new HashSet<Scope>());
1:e9f9bca: 	private final long id;
1:e9f9bca: 	private final String location;
1:e9f9bca: 	private final String name;
1:6f4b079: 	private final long parentId;
1:6f4b079: 	private final Scopes scopes;
1:6f4b079: 	private final SharePolicies sharePolicies;
1:e9f9bca: 	
1:6f4b079: 	public ScopeImpl(long id, String name, String location, long parentId, Collection<Bundle> bundles, SharePolicies sharePolicies, Scopes scopes) {
1:6f4b079: 		this.id = id;
1:e9f9bca: 		this.name = name;
1:e9f9bca: 		this.location = location;
1:6f4b079: 		this.parentId = parentId;
1:6f4b079: 		if (bundles != null) {
1:6f4b079: 			this.bundles.addAll(bundles);
1:6f4b079: 		}
1:6f4b079: 		this.sharePolicies = sharePolicies;
1:6f4b079: 		this.scopes = scopes;
19:e9f9bca: 	}
1:e9f9bca: 
1:e9f9bca: 	public Collection<Bundle> getBundles() {
1:e9f9bca: 		return Collections.unmodifiableCollection(bundles);
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public Collection<Scope> getChildren() {
1:e9f9bca: 		return Collections.unmodifiableCollection(children);
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public long getId() {
1:e9f9bca: 		return id;
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public String getLocation() {
1:e9f9bca: 		return location;
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public String getName() {
1:e9f9bca: 		return name;
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public Scope getParent() {
1:6f4b079: 		return scopes.getScope(parentId);
1:e9f9bca: 	}
1:e9f9bca: 
1:e9f9bca: 	public Map<String, List<SharePolicy>> getSharePolicies(String type) {
1:6f4b079: 		return Collections.unmodifiableMap(sharePolicies.getSharePolicies(type));
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public ScopeUpdate newScopeUpdate() {
1:e9f9bca: 		return ScopeUpdateImpl.newInstance(this);
1:e9f9bca: 	}
1:6f4b079: 	
1:6f4b079: 	void addBundle(Bundle bundle) {
1:6f4b079: 		bundles.add(bundle);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	void addChild(ScopeImpl child) {
1:6f4b079: 		children.add(child);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	synchronized long getLastUpdate() {
1:6f4b079: 		return lastUpdate;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	Scopes getScopes() {
1:6f4b079: 		return scopes;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	SharePolicies getSharePolicies() {
1:6f4b079: 		return sharePolicies;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	boolean isUpdating() {
1:6f4b079: 		return updating;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	void removeBundle(Bundle bundle) {
1:6f4b079: 		bundles.remove(bundle);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	void removeChild(ScopeImpl scope) {
1:6f4b079: 		children.remove(scope);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	synchronized void setLastUpdate(long value) {
1:6f4b079: 		lastUpdate = value;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	void setUpdating(boolean value) {
1:6f4b079: 		updating = value;
1:6f4b079: 	}
1:e9f9bca: }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	private volatile boolean updating;
1: 	private long lastUpdate;
1: 	private final Collection<Bundle> bundles = Collections.synchronizedSet(new HashSet<Bundle>());
1: 	private final Set<Scope> children = Collections.synchronizedSet(new HashSet<Scope>());
1: 	private final long parentId;
1: 	private final Scopes scopes;
1: 	private final SharePolicies sharePolicies;
1: 	public ScopeImpl(long id, String name, String location, long parentId, Collection<Bundle> bundles, SharePolicies sharePolicies, Scopes scopes) {
1: 		this.id = id;
1: 		this.parentId = parentId;
1: 		if (bundles != null) {
1: 			this.bundles.addAll(bundles);
1: 		}
1: 		this.sharePolicies = sharePolicies;
1: 		this.scopes = scopes;
/////////////////////////////////////////////////////////////////////////
1: 		return scopes.getScope(parentId);
1: 		return Collections.unmodifiableMap(sharePolicies.getSharePolicies(type));
1: 	
1: 	void addBundle(Bundle bundle) {
1: 		bundles.add(bundle);
1: 	}
1: 	
1: 	void addChild(ScopeImpl child) {
1: 		children.add(child);
1: 	}
1: 	
1: 	synchronized long getLastUpdate() {
1: 		return lastUpdate;
1: 	}
1: 	
1: 	Scopes getScopes() {
1: 		return scopes;
1: 	}
1: 	
1: 	SharePolicies getSharePolicies() {
1: 		return sharePolicies;
1: 	}
1: 	
1: 	boolean isUpdating() {
1: 		return updating;
1: 	}
1: 	
1: 	void removeBundle(Bundle bundle) {
1: 		bundles.remove(bundle);
1: 	}
1: 	
1: 	void removeChild(ScopeImpl scope) {
1: 		children.remove(scope);
1: 	}
1: 	
1: 	synchronized void setLastUpdate(long value) {
1: 		lastUpdate = value;
1: 	}
1: 	
1: 	void setUpdating(boolean value) {
1: 		updating = value;
1: 	}
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
1: import java.util.Set;
1: import org.apache.aries.subsystem.scope.ScopeUpdate;
0: 	private static class UnmodifiableSharePolicyMap implements Map<String, List<SharePolicy>> {
0: 		private final Map<String, List<SharePolicy>> map;
1: 		
0: 		public UnmodifiableSharePolicyMap(Map<String, List<SharePolicy>> map) {
0: 			this.map = map;
1: 		}
1: 		
0: 		public void clear() {
0: 			throw new UnsupportedOperationException();
1: 		}
0: 		public boolean containsKey(Object key) {
0: 			return map.containsKey(key);
1: 		}
0: 		public boolean containsValue(Object value) {
0: 			return map.containsValue(value);
1: 		}
0: 		public Set<java.util.Map.Entry<String, List<SharePolicy>>> entrySet() {
0: 			Set<Map.Entry<String, List<SharePolicy>>> result = new HashSet<Map.Entry<String, List<SharePolicy>>>(map.size());
0: 			for (final Map.Entry<String, List<SharePolicy>> entry : map.entrySet()) {
0: 				result.add(new Map.Entry<String, List<SharePolicy>>() {
0: 					public String getKey() {
0: 						return entry.getKey();
1: 					}
0: 					public List<SharePolicy> getValue() {
0: 						return entry.getValue();
1: 					}
0: 					public List<SharePolicy> setValue(List<SharePolicy> object) {
0: 						throw new UnsupportedOperationException();
1: 					}
0: 				});
1: 			}
0: 			return Collections.unmodifiableSet(result);
1: 		}
0: 		public List<SharePolicy> get(Object key) {
0: 			List<SharePolicy> result = map.get(key);
0: 			return result == null ? null : Collections.unmodifiableList(result);
1: 		}
0: 		public boolean isEmpty() {
0: 			return map.isEmpty();
1: 		}
0: 		public Set<String> keySet() {
0: 			return Collections.unmodifiableSet(map.keySet());
1: 		}
0: 		public List<SharePolicy> put(String key, List<SharePolicy> value) {
0: 			throw new UnsupportedOperationException();
1: 		}
0: 		public void putAll(Map<? extends String, ? extends List<SharePolicy>> map) {
0: 			throw new UnsupportedOperationException();
1: 		}
0: 		public List<SharePolicy> remove(Object key) {
0: 			throw new UnsupportedOperationException();
1: 		}
0: 		public int size() {
0: 			return map.size();
1: 		}
1: 
0: 		public Collection<List<SharePolicy>> values() {
0: 			return Collections.unmodifiableCollection(map.values());
1: 		}
1: 	}
1: 	
0: 	private static long lastId = -1;
1: 	
0: 	private static synchronized long nextId() {
0: 		if (lastId == Long.MAX_VALUE)
0: 			throw new IllegalStateException("The next ID would exceed Long.MAX_VALUE");
0: 		return ++lastId;
1: 	}
1: 	
0: 	volatile boolean updating;
1: 	
0: 	long lastUpdate;
1: 	
0: 	final BundleContext bundleContext;
0: 	final Set<Bundle> bundles = Collections.synchronizedSet(new HashSet<Bundle>());
0: 	final Set<Scope> children = Collections.synchronizedSet(new HashSet<Scope>());
0: 	final Map<String, List<SharePolicy>> exportPolicies = Collections.synchronizedMap(new HashMap<String, List<SharePolicy>>());
0: 	final Map<String, List<SharePolicy>> importPolicies = Collections.synchronizedMap(new HashMap<String, List<SharePolicy>>());
1: 	
1: 	private final long id;
1: 	private final String location;
1: 	private final String name;
0: 	private final Scope parent;
1: 	
0: 	public ScopeImpl(
0: 			BundleContext bundleContext,
0: 			String name,
0: 			String location,
0: 			Scope parent) {
0: 		this.bundleContext = bundleContext;
1: 		this.name = name;
1: 		this.location = location;
0: 		this.parent = parent;
0: 		id = nextId();
1: 	}
1: 
1: 	public Collection<Bundle> getBundles() {
1: 		return Collections.unmodifiableCollection(bundles);
1: 	}
1: 	
1: 	public Collection<Scope> getChildren() {
1: 		return Collections.unmodifiableCollection(children);
1: 	}
1: 	
1: 	public long getId() {
1: 		return id;
1: 	}
1: 	
1: 	public String getLocation() {
1: 		return location;
1: 	}
1: 	
1: 	public String getName() {
1: 		return name;
1: 	}
1: 	
1: 	public Scope getParent() {
0: 		return parent;
1: 	}
1: 
1: 	public Map<String, List<SharePolicy>> getSharePolicies(String type) {
0: 		if (SharePolicy.TYPE_EXPORT.equals(type))
0: 			return new UnmodifiableSharePolicyMap(exportPolicies);
0: 		else if (SharePolicy.TYPE_IMPORT.equals(type))
0: 			return new UnmodifiableSharePolicyMap(importPolicies);
0: 		throw new IllegalArgumentException(type);
1: 	}
1: 	
1: 	public ScopeUpdate newScopeUpdate() {
1: 		return ScopeUpdateImpl.newInstance(this);
1: 	}
author:Lin Sun
-------------------------------------------------------------------------------
commit:b4c3c21
/////////////////////////////////////////////////////////////////////////
0:     
commit:aeedca8
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
1: package org.apache.aries.subsystem.scope.impl;
0: 
0: import java.lang.IllegalArgumentException;
0: import java.util.ArrayList;
0: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Collections;
0: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
0: 
1: import org.apache.aries.subsystem.scope.Scope;
1: import org.apache.aries.subsystem.scope.SharePolicy;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.BundleEvent;
0: import org.osgi.util.tracker.BundleTracker;
0: import org.osgi.util.tracker.BundleTrackerCustomizer;
0: 
1: public class ScopeImpl implements Scope {
0: 
0:     private String name;
0:     private String location;
0:     private BundleContext context;
0:     private List<Scope> children = new ArrayList<Scope>();
0:     private List<Bundle> bundles = new ArrayList<Bundle>();
0:     private Map<String, List<SharePolicy>> importPolicies = new HashMap<String, List<SharePolicy>>();
0:     private Map<String, List<SharePolicy>> exportPolicies = new HashMap<String, List<SharePolicy>>();
0:     private BundleTracker bt;
0:     private long id;
0:     private List<String> bundleLocations = new ArrayList<String>();
0:     
0:     public ScopeImpl(String name) {
0:         this.name = name;
0:         this.id = getId();
0:     }
0:     
0:     public ScopeImpl(String name, String location) {
0:         this.name = name;
0:         this.location = location;
0:         this.id = getId();
0:     }
0:     // assume this constructor would be used to construct the root scope
0:     public ScopeImpl(String name, BundleContext context) {
0:         this(name);
0: 
0:         this.context = context;
0:         if (name.equals("root")) {
0:             bundles.addAll(Arrays.asList(context.getBundles()));
0:         }
0: 
0:      
0:         // let's use a bundle tracker to dynamically update the bundle list - need to wait on the resolution of the new rfc 138 bug
0:         // we cannot really use bundle tracker because the hooks may not work here
0:         //bt = new BundleTracker(context, Bundle.INSTALLED | Bundle.UNINSTALLED, new ScopeBundleTrackerCustomizer());
0:         //bt.open();
0:     }
0:     
0:     public void destroy() {
0:         /*if (bt != null) {
0:             bt.close();
0:         }*/
0:     }
0:     
0:     public Collection<Bundle> getBundles() {
0:         return Collections.unmodifiableCollection(bundles);
0:     }
0:     
0:     protected Collection<String> getToBeInstalledBundleLocation() {
0:         return bundleLocations;
0:     }
0:     
0:     protected void clearBundleLocations() {
0:         bundleLocations = new ArrayList<String>();
0:     }
0:     
0:     protected Collection<Bundle> getModifiableBundles() {
0:         return this.bundles;
0:     }
0: 
0:     public Collection<Scope> getChildren() {
0:         return Collections.unmodifiableList(children);
0:     }
0:     
0:     protected Collection<Scope> getModifiableChildren() {
0:         return this.children;
0:     }
0: 
0:     public String getName() {
0:         return this.name;
0:     }
0: 
0:     public Map<String, List<SharePolicy>> getSharePolicies(String type) {
0:         if (type.equals(SharePolicy.TYPE_IMPORT)) {
0:             return Collections.unmodifiableMap(this.importPolicies);
0:         } else if (type.equals(SharePolicy.TYPE_EXPORT)) {
0:             return Collections.unmodifiableMap(this.exportPolicies);
0:         }
0:         throw new IllegalArgumentException("Valid Types are : " + SharePolicy.TYPE_EXPORT + " & " + 
0:                 SharePolicy.TYPE_IMPORT + " Invalid type: " + type);
0:         
0:     }
0:     
0:     protected Map<String, List<SharePolicy>> getModifiableSharePolicies(String type) {
0:         if (type.equals(SharePolicy.TYPE_IMPORT)) {
0:             return this.importPolicies;
0:         } else if (type.equals(SharePolicy.TYPE_EXPORT)) {
0:             return this.exportPolicies;
0:         }
0:         throw new IllegalArgumentException("Valid Types are : " + SharePolicy.TYPE_EXPORT + " & " + 
0:                 SharePolicy.TYPE_IMPORT + " Invalid type: " + type);
0:     }
0: 
0:     private class ScopeBundleTrackerCustomizer implements BundleTrackerCustomizer {
0: 
0:         public Object addingBundle(Bundle bundle, BundleEvent event) {
0:             if (event.getType() == BundleEvent.INSTALLED) {
0:                 bundles.add(bundle);
0:             } else if (event.getType() == BundleEvent.UNINSTALLED) {
0:                 bundles.remove(bundle);
0:             }
0:             
0:             return bundle;
0:         }
0: 
0:         public void modifiedBundle(Bundle bundle, BundleEvent event,
0:                 Object object) {
0:             if (event.getType() == BundleEvent.INSTALLED) {
0:                 bundles.add(bundle);
0:             } else if (event.getType() == BundleEvent.UNINSTALLED) {
0:                 bundles.remove(bundle);
0:             }
0:             
0:         }
0: 
0:         public void removedBundle(Bundle bundle, BundleEvent event,
0:                 Object object) {
0:             if (event.getType() == BundleEvent.INSTALLED) {
0:                 bundles.add(bundle);
0:             } else if (event.getType() == BundleEvent.UNINSTALLED) {
0:                 bundles.remove(bundle);
0:             }          
0:         }
0:         
0:     }
0: 
0:     public long getId() {
0:         if (id == 0) {
0:             id = IdGenerator.next();
0:         } 
0:         
0:         return id;
0:     }
0:     
0:     private static class IdGenerator {
0:         static long newId;       
0:         
0:         protected static synchronized long next() {
0:             newId++;
0:             return newId;
0:         }
0:     }
0: 
0:     public String getLocation() {
0:         return this.location;
0:     }
0: }
============================================================================