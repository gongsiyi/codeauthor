1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:875a6d6: package org.apache.aries.subsystem.core.archive;
1:875a6d6: 
1:875a6d6: import org.osgi.service.subsystem.SubsystemConstants;
1:875a6d6: 
1:875a6d6: public class ProvisionPolicyDirective extends AbstractDirective {
1:875a6d6: 	public static final String NAME = SubsystemConstants.PROVISION_POLICY_DIRECTIVE;
1:875a6d6: 	public static final String VALUE_ACCEPT_DEPENDENCIES = SubsystemConstants.PROVISION_POLICY_ACCEPT_DEPENDENCIES;
1:875a6d6: 	public static final String VALUE_REJECT_DEPENDENCIES = SubsystemConstants.PROVISION_POLICY_REJECT_DEPENDENCIES;
1:875a6d6: 	
1:875a6d6: 	public static final ProvisionPolicyDirective ACCEPT_DEPENDENCIES = new ProvisionPolicyDirective(VALUE_ACCEPT_DEPENDENCIES);
1:875a6d6: 	public static final ProvisionPolicyDirective REJECT_DEPENDENCIES = new ProvisionPolicyDirective(VALUE_REJECT_DEPENDENCIES);
1:875a6d6: 	
1:875a6d6: 	public static final ProvisionPolicyDirective DEFAULT = REJECT_DEPENDENCIES;
1:875a6d6: 	
1:875a6d6: 	public static ProvisionPolicyDirective getInstance(String value) {
1:875a6d6: 		if (VALUE_ACCEPT_DEPENDENCIES.equals(value))
1:875a6d6: 			return ACCEPT_DEPENDENCIES;
1:875a6d6: 		if (VALUE_REJECT_DEPENDENCIES.equals(value))
1:875a6d6: 			return REJECT_DEPENDENCIES;
1:875a6d6: 		return new ProvisionPolicyDirective(value);
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	public ProvisionPolicyDirective(String value) {
1:875a6d6: 		super(NAME, value);
1:875a6d6: 		if (!(VALUE_ACCEPT_DEPENDENCIES.equals(value)
1:875a6d6: 				|| VALUE_REJECT_DEPENDENCIES.equals(value))) {
1:875a6d6: 			throw new IllegalArgumentException("Invalid " + NAME + " directive value: " + value);
1:875a6d6: 		}
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	public String getProvisionPolicy() {
1:875a6d6: 		return getValue();
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	public boolean isAcceptDependencies() {
1:875a6d6: 		return this == ACCEPT_DEPENDENCIES || VALUE_ACCEPT_DEPENDENCIES.equals(getProvisionPolicy());
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	public boolean isRejectDependencies() {
1:875a6d6: 		return this == REJECT_DEPENDENCIES || VALUE_REJECT_DEPENDENCIES.equals(getProvisionPolicy());
1:875a6d6: 	}
1:875a6d6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:875a6d6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: public class ProvisionPolicyDirective extends AbstractDirective {
1: 	public static final String NAME = SubsystemConstants.PROVISION_POLICY_DIRECTIVE;
1: 	public static final String VALUE_ACCEPT_DEPENDENCIES = SubsystemConstants.PROVISION_POLICY_ACCEPT_DEPENDENCIES;
1: 	public static final String VALUE_REJECT_DEPENDENCIES = SubsystemConstants.PROVISION_POLICY_REJECT_DEPENDENCIES;
1: 	
1: 	public static final ProvisionPolicyDirective ACCEPT_DEPENDENCIES = new ProvisionPolicyDirective(VALUE_ACCEPT_DEPENDENCIES);
1: 	public static final ProvisionPolicyDirective REJECT_DEPENDENCIES = new ProvisionPolicyDirective(VALUE_REJECT_DEPENDENCIES);
1: 	
1: 	public static final ProvisionPolicyDirective DEFAULT = REJECT_DEPENDENCIES;
1: 	
1: 	public static ProvisionPolicyDirective getInstance(String value) {
1: 		if (VALUE_ACCEPT_DEPENDENCIES.equals(value))
1: 			return ACCEPT_DEPENDENCIES;
1: 		if (VALUE_REJECT_DEPENDENCIES.equals(value))
1: 			return REJECT_DEPENDENCIES;
1: 		return new ProvisionPolicyDirective(value);
1: 	}
1: 	
1: 	public ProvisionPolicyDirective(String value) {
1: 		super(NAME, value);
1: 		if (!(VALUE_ACCEPT_DEPENDENCIES.equals(value)
1: 				|| VALUE_REJECT_DEPENDENCIES.equals(value))) {
1: 			throw new IllegalArgumentException("Invalid " + NAME + " directive value: " + value);
1: 		}
1: 	}
1: 	
1: 	public String getProvisionPolicy() {
1: 		return getValue();
1: 	}
1: 	
1: 	public boolean isAcceptDependencies() {
1: 		return this == ACCEPT_DEPENDENCIES || VALUE_ACCEPT_DEPENDENCIES.equals(getProvisionPolicy());
1: 	}
1: 	
1: 	public boolean isRejectDependencies() {
1: 		return this == REJECT_DEPENDENCIES || VALUE_REJECT_DEPENDENCIES.equals(getProvisionPolicy());
1: 	}
1: }
============================================================================