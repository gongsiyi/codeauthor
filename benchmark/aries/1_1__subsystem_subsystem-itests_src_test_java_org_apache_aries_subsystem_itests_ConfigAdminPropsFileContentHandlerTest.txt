1:79b20bc: /*
1:79b20bc:  * Licensed under the Apache License, Version 2.0 (the "License");
1:79b20bc:  * you may not use this file except in compliance with the License.
1:79b20bc:  * You may obtain a copy of the License at
1:79b20bc:  *
1:79b20bc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:79b20bc:  *
1:79b20bc:  * Unless required by applicable law or agreed to in writing, software
1:79b20bc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:79b20bc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:79b20bc:  * See the License for the specific language governing permissions and
1:79b20bc:  * limitations under the License.
1:79b20bc:  */
1:79b20bc: package org.apache.aries.subsystem.itests;
1:79b20bc: 
1:79b20bc: import static org.junit.Assert.assertEquals;
1:79b20bc: 
1:79b20bc: import org.junit.Test;
1:79b20bc: import org.osgi.framework.Filter;
1:bc6dcc9: import org.osgi.service.cm.Configuration;
1:bc6dcc9: import org.osgi.service.cm.ConfigurationAdmin;
1:79b20bc: import org.osgi.service.subsystem.Subsystem;
1:79b20bc: import org.osgi.util.tracker.ServiceTracker;
1:79b20bc: 
1:bc6dcc9: import java.util.Dictionary;
1:bc6dcc9: import java.util.Hashtable;
1:bc6dcc9: 
1:79b20bc: public class ConfigAdminPropsFileContentHandlerTest extends SubsystemTest {
1:79b20bc:     public ConfigAdminPropsFileContentHandlerTest() {
1:79b20bc:         installConfigAdmin = true;
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Override
1:79b20bc:     protected void createApplications() throws Exception {
1:79b20bc:         createApplication("cmContent", "org.foo.Bar.cfg", "com.blah.Blah.cfg",
1:79b20bc:                 "cmContentBundleZ.jar");
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Test
1:79b20bc:     public void testConfigurationContentHandler() throws Exception {
1:79b20bc:         // This test works as follows: it first installs a subsystem (cmContent.esa)
1:79b20bc:         // that contains two configuration files (org.foo.Bar.cfg and com.blah.Blah.cfg)
1:79b20bc:         // These configuration files are marked as 'osgi.config' content type.
1:79b20bc:         // The ConfigAdminContentHandler handles the installation of this content
1:79b20bc:         // and registers them as configuration with the Config Admin Service.
1:79b20bc:         // The .esa file also contains an ordinary bundle that registers two
1:79b20bc:         // Config Admin ManagedServices. Each registerd under one of the PIDs.
1:79b20bc:         // Once they receive the expected configuration they each register a String
1:79b20bc:         // service to mark that they have.
1:79b20bc:         // After starting the subsystem this test waits for these 'String' services
1:79b20bc:         // to appear so that it knows that the whole process worked.
1:79b20bc: 
1:79b20bc:         Subsystem subsystem = installSubsystemFromFile("cmContent.esa");
1:79b20bc:         subsystem.start();
1:79b20bc: 
1:79b20bc:         // Now check that both Managed Services (Config Admin services) have been configured
1:79b20bc:         // If they are configured correctly they will register a marker String service to
1:79b20bc:         // indicate this.
1:79b20bc: 
1:79b20bc:         Filter f = bundleContext.createFilter(
1:79b20bc:                 "(&(objectClass=java.lang.String)(test.pid=org.foo.Bar))");
1:79b20bc:         ServiceTracker<String, String> barTracker =
1:79b20bc:                 new ServiceTracker<String, String>(bundleContext, f, null);
1:79b20bc:         try {
1:79b20bc:             barTracker.open();
1:79b20bc:             String blahSvc = barTracker.waitForService(2000);
1:79b20bc:             assertEquals("Bar!", blahSvc);
1:79b20bc:         } finally {
1:79b20bc:             barTracker.close();
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         Filter f2 = bundleContext.createFilter(
1:79b20bc:                 "(&(objectClass=java.lang.String)(test.pid=com.blah.Blah))");
1:79b20bc:         ServiceTracker<String, String> blahTracker =
1:79b20bc:                 new ServiceTracker<String, String>(bundleContext, f2, null);
1:79b20bc:         try {
1:79b20bc:             blahTracker.open();
1:79b20bc:             String blahSvc = blahTracker.waitForService(2000);
1:79b20bc:             assertEquals("Blah!", blahSvc);
1:79b20bc:         } finally {
1:79b20bc:             blahTracker.close();
1:79b20bc:         }
1:bc6dcc9: 
1:bc6dcc9:         stopAndUninstallSubsystemSilently(subsystem);
1:bc6dcc9:     }
1:bc6dcc9: 
1:bc6dcc9:     @Test
1:bc6dcc9:     public void testAries1352() throws Exception {
1:bc6dcc9:         // Same test than testConfigurationContentHandler, but an existing
1:bc6dcc9:         // configuration exists before the subsystem is installed.
1:bc6dcc9:         // The configuration should not be overwritten by the subsystem
1:bc6dcc9:         // installation.
1:bc6dcc9: 
1:bc6dcc9:         ConfigurationAdmin cm = bundleContext.getService(
1:bc6dcc9:                 bundleContext.getServiceReference(ConfigurationAdmin.class));
1:bc6dcc9: 
1:bc6dcc9:         Configuration blahConf = cm.getConfiguration("com.blah.Blah", "?");
1:bc6dcc9:         Dictionary<String, Object> blahProps = new Hashtable<String, Object>(1);
1:bc6dcc9:         blahProps.put("configVal", "Hello");
1:bc6dcc9:         blahConf.update(blahProps);
1:bc6dcc9: 
1:bc6dcc9:         Subsystem subsystem = installSubsystemFromFile("cmContent.esa");
1:bc6dcc9:         subsystem.start();
1:bc6dcc9: 
1:bc6dcc9:         // No configuration exists for the service Bar: configuration
1:bc6dcc9:         // values are loaded by the subsystem.
1:bc6dcc9:         Filter f = bundleContext.createFilter(
1:bc6dcc9:                 "(&(objectClass=java.lang.String)(test.pid=org.foo.Bar))");
1:bc6dcc9:         ServiceTracker<String, String> barTracker =
1:bc6dcc9:                 new ServiceTracker<String, String>(bundleContext, f, null);
1:bc6dcc9:         try {
1:bc6dcc9:             barTracker.open();
1:bc6dcc9:             String blahSvc = barTracker.waitForService(2000);
1:bc6dcc9:             assertEquals("Bar!", blahSvc);
1:bc6dcc9:         } finally {
1:bc6dcc9:             barTracker.close();
1:bc6dcc9:         }
1:bc6dcc9: 
1:bc6dcc9:         // A configuration exists for Blah: the subsystem installation should
1:bc6dcc9:         // not overwrite it.
1:bc6dcc9:         Filter f2 = bundleContext.createFilter(
1:bc6dcc9:                 "(&(objectClass=java.lang.String)(test.pid=com.blah.Blah))");
1:bc6dcc9:         ServiceTracker<String, String> blahTracker =
1:bc6dcc9:                 new ServiceTracker<String, String>(bundleContext, f2, null);
1:bc6dcc9:         try {
1:bc6dcc9:             blahTracker.open();
1:bc6dcc9:             String blahSvc = blahTracker.waitForService(2000);
1:bc6dcc9:             assertEquals("Hello", blahSvc);
1:bc6dcc9:         } finally {
1:bc6dcc9:             blahTracker.close();
1:bc6dcc9:         }
1:bc6dcc9: 
1:bc6dcc9:         stopAndUninstallSubsystemSilently(subsystem);
1:bc6dcc9:         blahConf.delete();
1:79b20bc:     }
1:79b20bc: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:bc6dcc9
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         stopAndUninstallSubsystemSilently(subsystem);
1:     }
1: 
1:     @Test
1:     public void testAries1352() throws Exception {
1:         // Same test than testConfigurationContentHandler, but an existing
1:         // configuration exists before the subsystem is installed.
1:         // The configuration should not be overwritten by the subsystem
1:         // installation.
1: 
1:         ConfigurationAdmin cm = bundleContext.getService(
1:                 bundleContext.getServiceReference(ConfigurationAdmin.class));
1: 
1:         Configuration blahConf = cm.getConfiguration("com.blah.Blah", "?");
1:         Dictionary<String, Object> blahProps = new Hashtable<String, Object>(1);
1:         blahProps.put("configVal", "Hello");
1:         blahConf.update(blahProps);
1: 
1:         Subsystem subsystem = installSubsystemFromFile("cmContent.esa");
1:         subsystem.start();
1: 
1:         // No configuration exists for the service Bar: configuration
1:         // values are loaded by the subsystem.
1:         Filter f = bundleContext.createFilter(
1:                 "(&(objectClass=java.lang.String)(test.pid=org.foo.Bar))");
1:         ServiceTracker<String, String> barTracker =
1:                 new ServiceTracker<String, String>(bundleContext, f, null);
1:         try {
1:             barTracker.open();
1:             String blahSvc = barTracker.waitForService(2000);
1:             assertEquals("Bar!", blahSvc);
1:         } finally {
1:             barTracker.close();
1:         }
1: 
1:         // A configuration exists for Blah: the subsystem installation should
1:         // not overwrite it.
1:         Filter f2 = bundleContext.createFilter(
1:                 "(&(objectClass=java.lang.String)(test.pid=com.blah.Blah))");
1:         ServiceTracker<String, String> blahTracker =
1:                 new ServiceTracker<String, String>(bundleContext, f2, null);
1:         try {
1:             blahTracker.open();
1:             String blahSvc = blahTracker.waitForService(2000);
1:             assertEquals("Hello", blahSvc);
1:         } finally {
1:             blahTracker.close();
1:         }
1: 
1:         stopAndUninstallSubsystemSilently(subsystem);
1:         blahConf.delete();
commit:79b20bc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import org.junit.Test;
1: import org.osgi.framework.Filter;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: public class ConfigAdminPropsFileContentHandlerTest extends SubsystemTest {
1:     public ConfigAdminPropsFileContentHandlerTest() {
1:         installConfigAdmin = true;
1:     }
1: 
1:     @Override
1:     protected void createApplications() throws Exception {
1:         createApplication("cmContent", "org.foo.Bar.cfg", "com.blah.Blah.cfg",
1:                 "cmContentBundleZ.jar");
1:     }
1: 
1:     @Test
1:     public void testConfigurationContentHandler() throws Exception {
1:         // This test works as follows: it first installs a subsystem (cmContent.esa)
1:         // that contains two configuration files (org.foo.Bar.cfg and com.blah.Blah.cfg)
1:         // These configuration files are marked as 'osgi.config' content type.
1:         // The ConfigAdminContentHandler handles the installation of this content
1:         // and registers them as configuration with the Config Admin Service.
1:         // The .esa file also contains an ordinary bundle that registers two
1:         // Config Admin ManagedServices. Each registerd under one of the PIDs.
1:         // Once they receive the expected configuration they each register a String
1:         // service to mark that they have.
1:         // After starting the subsystem this test waits for these 'String' services
1:         // to appear so that it knows that the whole process worked.
1: 
1:         Subsystem subsystem = installSubsystemFromFile("cmContent.esa");
1:         subsystem.start();
1: 
1:         // Now check that both Managed Services (Config Admin services) have been configured
1:         // If they are configured correctly they will register a marker String service to
1:         // indicate this.
1: 
1:         Filter f = bundleContext.createFilter(
1:                 "(&(objectClass=java.lang.String)(test.pid=org.foo.Bar))");
1:         ServiceTracker<String, String> barTracker =
1:                 new ServiceTracker<String, String>(bundleContext, f, null);
1:         try {
1:             barTracker.open();
1:             String blahSvc = barTracker.waitForService(2000);
1:             assertEquals("Bar!", blahSvc);
1:         } finally {
1:             barTracker.close();
1:         }
1: 
1:         Filter f2 = bundleContext.createFilter(
1:                 "(&(objectClass=java.lang.String)(test.pid=com.blah.Blah))");
1:         ServiceTracker<String, String> blahTracker =
1:                 new ServiceTracker<String, String>(bundleContext, f2, null);
1:         try {
1:             blahTracker.open();
1:             String blahSvc = blahTracker.waitForService(2000);
1:             assertEquals("Blah!", blahSvc);
1:         } finally {
1:             blahTracker.close();
1:         }
1:     }
1: }
============================================================================