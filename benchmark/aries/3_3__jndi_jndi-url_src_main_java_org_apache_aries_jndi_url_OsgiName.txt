1:e9395b8: /*
1:e9395b8:  * Licensed to the Apache Software Foundation (ASF) under one
1:e9395b8:  * or more contributor license agreements.  See the NOTICE file
1:e9395b8:  * distributed with this work for additional information
1:e9395b8:  * regarding copyright ownership.  The ASF licenses this file
1:e9395b8:  * to you under the Apache License, Version 2.0 (the
1:e9395b8:  * "License"); you may not use this file except in compliance
1:e9395b8:  * with the License.  You may obtain a copy of the License at
1:e9395b8:  *
1:e9395b8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e9395b8:  *
1:e9395b8:  * Unless required by applicable law or agreed to in writing,
1:e9395b8:  * software distributed under the License is distributed on an
1:e9395b8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e9395b8:  * KIND, either express or implied.  See the License for the
1:e9395b8:  * specific language governing permissions and limitations
1:e9395b8:  * under the License.
1:e9395b8:  */
1:e9395b8: package org.apache.aries.jndi.url;
18:e9395b8: 
1:e9395b8: import java.util.Enumeration;
1:e9395b8: 
1:e9395b8: import javax.naming.InvalidNameException;
1:e9395b8: import javax.naming.Name;
1:e9395b8: 
1:e9395b8: /**
1:e9395b8:  * A composite name for the aries namespace. This provides useful utility methods
1:e9395b8:  * for accessing the name.
1:e9395b8:  * 
1:e9395b8:  * component 0: osgi:service, aries:services, osgi:servicelist
1:e9395b8:  * component 1: interface
1:e9395b8:  * component 2: filter
1:e9395b8:  */
1:29c4662: public final class OsgiName extends AbstractName
4:e9395b8: {
1:e9395b8:   /** The serial version UID */
1:e9395b8:   private static final long serialVersionUID = 6617580228852444656L;
1:e9395b8:   public static final String OSGI_SCHEME = "osgi";
1:e9395b8:   public static final String ARIES_SCHEME = "aries";
1:e9395b8:   public static final String SERVICE_PATH = "service";
1:e9395b8:   public static final String SERVICES_PATH = "services";
1:e9395b8:   public static final String SERVICE_LIST_PATH = "servicelist";
1:e9395b8:   public static final String FRAMEWORK_PATH = "framework";
1:ba5ec82:   
1:e9395b8:   public OsgiName(String name) throws InvalidNameException
1:e9395b8:   {
1:08490c1:     super(name);
7:e9395b8:   }
1:ba5ec82: 
1:e9395b8:   public OsgiName(Name name) throws InvalidNameException
1:ba5ec82:   {
1:e9395b8:     this(name.toString());
1:ba5ec82:   }
1:ba5ec82: 
1:e9395b8:   public boolean hasFilter()
1:e9395b8:   {
1:e9395b8:     return size() == 3;
1:e9395b8:   }
1:ba5ec82:   
1:e9395b8:   public boolean isServiceNameBased()
1:e9395b8:   {
1:e9395b8:     return size() > 3;
1:e9395b8:   }
1:ba5ec82:   
1:e9395b8:   public String getInterface()
1:e9395b8:   {
1:e9395b8:     return get(1);
1:e9395b8:   }
1:ba5ec82:   
1:e9395b8:   public String getFilter()
1:e9395b8:   {
1:e9395b8:     return hasFilter() ? get(2) : null;
1:e9395b8:   }
1:e9395b8:   
1:e9395b8:   public String getServiceName()
1:e9395b8:   {
1:e9395b8:     Enumeration<String> parts = getAll();
1:e9395b8:     parts.nextElement();
1:e9395b8:     
1:ba5ec82:     StringBuilder builder = new StringBuilder();
1:ba5ec82:     
1:a724dca:     if (parts.hasMoreElements()) {
1:a724dca: 
1:a724dca:       while (parts.hasMoreElements()) {
1:a724dca:         builder.append(parts.nextElement());
1:a724dca:         builder.append('/');
1:a724dca:       }
1:a724dca:     
1:a724dca:       builder.deleteCharAt(builder.length() - 1);
1:ba5ec82:     }
1:ba5ec82:     
1:e9395b8:     return builder.toString();
1:e9395b8:   }
1:a724dca: 
1:a724dca:   public boolean hasInterface()
1:a724dca:   {
1:a724dca:     return size() > 1;
1:a724dca:   }
1:e9395b8: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:08490c1
/////////////////////////////////////////////////////////////////////////
1:     super(name);
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:29c4662
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public final class OsgiName extends AbstractName
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:a724dca
/////////////////////////////////////////////////////////////////////////
1:     if (parts.hasMoreElements()) {
1: 
1:       while (parts.hasMoreElements()) {
1:         builder.append(parts.nextElement());
1:         builder.append('/');
1:       }
1:     
1:       builder.deleteCharAt(builder.length() - 1);
1: 
1:   public boolean hasInterface()
1:   {
1:     return size() > 1;
1:   }
commit:ba5ec82
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:     super(split(name));
/////////////////////////////////////////////////////////////////////////
0:   private static Enumeration<String> split(String name)
1:   {
0:     List<String> elements = new ArrayList<String>();
1: 
1:     StringBuilder builder = new StringBuilder();
1:     
0:     int len = name.length();
0:     int count = 0;
1:     
0:     for (int i = 0; i < len; i++) {
0:       char c = name.charAt(i);
1:       
0:       if (c == '/' && count == 0) {
0:         elements.add(builder.toString());
0:         builder = new StringBuilder();
0:         continue;
0:       } else if (c == '(') count++;
0:       else if (c == ')') count++;
1:       
0:       builder.append(c);
1:     }
1:     
0:     elements.add(builder.toString());
1:     
0:     return Collections.enumeration(elements);
1:   }
1: 
commit:e9395b8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi.url;
1: 
1: import java.util.Enumeration;
1: 
0: import javax.naming.CompositeName;
1: import javax.naming.InvalidNameException;
1: import javax.naming.Name;
1: 
1: /**
1:  * A composite name for the aries namespace. This provides useful utility methods
1:  * for accessing the name.
1:  * 
1:  * component 0: osgi:service, aries:services, osgi:servicelist
1:  * component 1: interface
1:  * component 2: filter
1:  */
0: public final class OsgiName extends CompositeName
1: {
1:   /** The serial version UID */
1:   private static final long serialVersionUID = 6617580228852444656L;
1:   public static final String OSGI_SCHEME = "osgi";
1:   public static final String ARIES_SCHEME = "aries";
1:   public static final String SERVICE_PATH = "service";
1:   public static final String SERVICES_PATH = "services";
1:   public static final String SERVICE_LIST_PATH = "servicelist";
1:   public static final String FRAMEWORK_PATH = "framework";
1:   
1:   public OsgiName(String name) throws InvalidNameException
1:   {
0:     super(name);
1:   }
1: 
1:   public OsgiName(Name name) throws InvalidNameException
1:   {
1:     this(name.toString());
1:   }
1: 
1:   public boolean hasFilter()
1:   {
1:     return size() == 3;
1:   }
1:   
1:   public boolean isServiceNameBased()
1:   {
1:     return size() > 3;
1:   }
1:   
0:   public String getScheme()
1:   {
0:     String part0 = get(0);
0:     int index = part0.indexOf(':');
1:     
0:     String result;
1:     
0:     if (index > 0) {
0:       result = part0.substring(0, index);
0:     } else {
0:       result = null;
1:     }
1:     
0:     return result;
1:   }
1:   
0:   public String getSchemePath()
1:   {
0:     String part0 = get(0);
0:     int index = part0.indexOf(':');
1:     
0:     String result;
1:     
0:     if (index > 0) {
0:       result = part0.substring(index + 1);
0:     } else {
0:       result = null;
1:     }
1:     
0:     return result;
1:   }
1:   
1:   public String getInterface()
1:   {
1:     return get(1);
1:   }
1:   
1:   public String getFilter()
1:   {
1:     return hasFilter() ? get(2) : null;
1:   }
1:   
1:   public String getServiceName()
1:   {
1:     Enumeration<String> parts = getAll();
1:     parts.nextElement();
1:     
0:     StringBuilder builder = new StringBuilder();
1:     
0:     while (parts.hasMoreElements()) {
0:       builder.append(parts.nextElement());
0:       builder.append('/');
1:     }
1:     
0:     builder.deleteCharAt(builder.length() - 1);
1:     
1:     return builder.toString();
1:   }
1: }
============================================================================