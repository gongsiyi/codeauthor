1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.web.prims;
1:628add4: 
1:628add4: import java.io.*;
1:628add4: 
1:628add4: /**
1:628add4:  * 
1:628add4:  * An object that contains approximately 1024 bits of information.  This is used by
1:628add4:  * {@link PingSession3}
1:628add4:  *
1:628add4:  */
1:628add4: public class PingSession3Object implements Serializable {
1:628add4: 	// PingSession3Object represents a BLOB of session data of various. 
1:628add4: 	// Each instantiation of this class is approximately 1K in size (not including overhead for arrays and Strings)
1:628add4: 	// Using different datatype exercises the various serialization algorithms for each type
1:628add4: 
1:628add4: 	byte[] byteVal = new byte[16]; // 8 * 16 = 128 bits
1:628add4: 	char[] charVal = new char[8]; // 16 * 8 = 128 bits
1:628add4: 	int a, b, c, d; // 4 * 32 = 128 bits
1:628add4: 	float e, f, g, h; // 4 * 32 = 128 bits
1:628add4: 	double i, j; // 2 * 64 = 128 bits
1:628add4: 	// Primitive type size = ~5*128=   640
1:628add4: 
1:628add4: 	String s1 = new String("123456789012");	 
1:628add4: 	String s2 = new String("abcdefghijkl");
1:628add4: 
1:628add4: 
1:628add4: //	 The Session blob must be filled with data to avoid compression of the blob during serialization
1:628add4: 	PingSession3Object()
1:628add4: 	{
1:628add4: 		int index;
1:628add4: 		byte b = 0x8;
1:628add4: 		for (index=0; index<16; index++)
1:628add4: 		{
1:628add4: 			byteVal[index] = (byte) (b+2);
1:628add4: 		}
1:628add4: 
1:628add4: 		char c = 'a';
1:628add4: 		for (index=0; index<8; index++)
1:628add4: 		{
1:628add4: 			charVal[index] = (char) (c+2);
1:628add4: 		}
1:628add4: 
1:628add4: 		a=1; b=2; c=3; d=5;
1:628add4: 		e = (float)7.0; f=(float)11.0; g=(float)13.0; h=(float)17.0;
1:628add4: 		i=(double)19.0; j=(double)23.0;
1:628add4: 	}
1:628add4: /**
1:628add4:  * Main method to test the serialization of the Session Data blob object
1:628add4:  * Creation date: (4/3/2000 3:07:34 PM)
1:628add4:  * @param args java.lang.String[]
1:628add4:  */
1:628add4: 
1:628add4: /** Since the following main method were written for testing purpose, we comment them out
1:628add4: *public static void main(String[] args) {
1:628add4: *	try {
1:628add4: *		PingSession3Object data = new PingSession3Object();
1:628add4: *
1:628add4: *		FileOutputStream ostream = new FileOutputStream("c:\\temp\\datablob.xxx");
1:628add4: *		ObjectOutputStream p = new ObjectOutputStream(ostream);
1:628add4: *		p.writeObject(data);
1:628add4: *		p.flush();
1:628add4: *		ostream.close();
1:628add4: *	}
1:628add4: *	catch (Exception e)
1:628add4: *	{
1:628add4: *		System.out.println("Exception: " + e.toString());
1:628add4: *	}
1:628add4: *}
1:628add4: */
1:628add4: 
1:628add4: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.web.prims;
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.web.prims;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.web.prims;
1: 
1: import java.io.*;
1: 
1: /**
1:  * 
1:  * An object that contains approximately 1024 bits of information.  This is used by
1:  * {@link PingSession3}
1:  *
1:  */
1: public class PingSession3Object implements Serializable {
1: 	// PingSession3Object represents a BLOB of session data of various. 
1: 	// Each instantiation of this class is approximately 1K in size (not including overhead for arrays and Strings)
1: 	// Using different datatype exercises the various serialization algorithms for each type
1: 
1: 	byte[] byteVal = new byte[16]; // 8 * 16 = 128 bits
1: 	char[] charVal = new char[8]; // 16 * 8 = 128 bits
1: 	int a, b, c, d; // 4 * 32 = 128 bits
1: 	float e, f, g, h; // 4 * 32 = 128 bits
1: 	double i, j; // 2 * 64 = 128 bits
1: 	// Primitive type size = ~5*128=   640
1: 
1: 	String s1 = new String("123456789012");	 
1: 	String s2 = new String("abcdefghijkl");
0: //										 String type size = ~2*12*16 =   384
0: //										 Total blob size (w/o overhead) =  1024
1: 
1: 
1: //	 The Session blob must be filled with data to avoid compression of the blob during serialization
1: 	PingSession3Object()
1: 	{
1: 		int index;
1: 		byte b = 0x8;
1: 		for (index=0; index<16; index++)
1: 		{
1: 			byteVal[index] = (byte) (b+2);
1: 		}
1: 
1: 		char c = 'a';
1: 		for (index=0; index<8; index++)
1: 		{
1: 			charVal[index] = (char) (c+2);
1: 		}
1: 
1: 		a=1; b=2; c=3; d=5;
1: 		e = (float)7.0; f=(float)11.0; g=(float)13.0; h=(float)17.0;
1: 		i=(double)19.0; j=(double)23.0;
1: 	}
1: /**
1:  * Main method to test the serialization of the Session Data blob object
1:  * Creation date: (4/3/2000 3:07:34 PM)
1:  * @param args java.lang.String[]
1:  */
1: 
1: /** Since the following main method were written for testing purpose, we comment them out
1: *public static void main(String[] args) {
1: *	try {
1: *		PingSession3Object data = new PingSession3Object();
1: *
1: *		FileOutputStream ostream = new FileOutputStream("c:\\temp\\datablob.xxx");
1: *		ObjectOutputStream p = new ObjectOutputStream(ostream);
1: *		p.writeObject(data);
1: *		p.flush();
1: *		ostream.close();
1: *	}
1: *	catch (Exception e)
1: *	{
1: *		System.out.println("Exception: " + e.toString());
1: *	}
1: *}
1: */
1: 
1: }
============================================================================