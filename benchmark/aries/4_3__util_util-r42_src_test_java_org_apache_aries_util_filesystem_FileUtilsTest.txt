1:b5cede6: /*
1:b5cede6:  * Licensed to the Apache Software Foundation (ASF) under one
1:b5cede6:  * or more contributor license agreements.  See the NOTICE file
1:b5cede6:  * distributed with this work for additional information
1:b5cede6:  * regarding copyright ownership.  The ASF licenses this file
1:b5cede6:  * to you under the Apache License, Version 2.0 (the
1:b5cede6:  * "License"); you may not use this file except in compliance
1:b5cede6:  * with the License.  You may obtain a copy of the License at
1:b5cede6:  *
1:b5cede6:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b5cede6:  *
1:b5cede6:  * Unless required by applicable law or agreed to in writing,
1:b5cede6:  * software distributed under the License is distributed on an
1:b5cede6:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:b5cede6:  * KIND, either express or implied.  See the License for the
1:b5cede6:  * specific language governing permissions and limitations
1:b5cede6:  * under the License.
1:b5cede6:  */
1:b5cede6: 
1:910fec0: package org.apache.aries.util.filesystem;
1:b5cede6: 
1:b5cede6: import static org.junit.Assert.assertEquals;
1:b5cede6: import static org.junit.Assert.assertTrue;
1:b5cede6: 
1:7937e00: import java.io.ByteArrayInputStream;
1:b5cede6: import java.io.File;
1:b5cede6: import java.io.FileOutputStream;
1:b5cede6: import java.io.IOException;
1:b5cede6: import java.net.URI;
1:b5cede6: import java.util.List;
1:b5cede6: 
1:b5cede6: import org.apache.aries.unittest.fixture.ArchiveFixture;
1:b5cede6: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1:c6cb34d: import org.apache.aries.util.io.IOUtils;
1:b5cede6: import org.junit.Test;
1:b5cede6: import org.osgi.framework.Constants;
1:b5cede6: 
1:b5cede6: 
1:b5cede6: /**
1:b5cede6:  * This class contains tests for the virtual file system.
1:b5cede6:  */
1:b5cede6: public class FileUtilsTest
1:b5cede6: {
1:b5cede6: 
1:b5cede6: 
1:b5cede6:   /**
1:b5cede6:    * Make sure we get the bundles files recursively regardless of the file extension.
1:b5cede6:    * @throws IOException
1:b5cede6:    */
1:b5cede6: 
1:b5cede6:   @SuppressWarnings("deprecation")
1:b5cede6:   @Test
1:b5cede6:   public void testGetBundlesRecursive() throws IOException {
1:b5cede6:     File tmpDir = new File("../src/test/resources/tmpJars");
1:b5cede6:     tmpDir.mkdirs();
1:b5cede6:     for (int n =0; n< 2; n++) {
1:b5cede6:       ZipFixture bundle = ArchiveFixture.newJar().manifest()
1:b5cede6:       .attribute(Constants.BUNDLE_SYMBOLICNAME, "aa" + n)
1:b5cede6:       .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:b5cede6:       .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
1:b5cede6:       .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:b5cede6:       FileOutputStream fout = new FileOutputStream(new File (tmpDir.getAbsoluteFile(), "aa" + n + ((n == 0)? ".jar": ".war")));
1:b5cede6:       bundle.writeOut(fout);
1:b5cede6:       fout.close();
1:b5cede6:     }
1:b5cede6:     File subDir = new File(tmpDir, "subDir");
1:b5cede6:     subDir.mkdirs();
1:b5cede6:     for (int n =0; n< 2; n++) {
1:b5cede6:       ZipFixture bundle = ArchiveFixture.newJar().manifest()
1:b5cede6:       .attribute(Constants.BUNDLE_SYMBOLICNAME, "aa" + n)
1:b5cede6:       .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:b5cede6:       .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
1:b5cede6:       .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:b5cede6: 
1:b5cede6: 
1:b5cede6: 
1:b5cede6:       FileOutputStream fout = new FileOutputStream(new File (subDir.getAbsoluteFile(), "aa" + n + ((n == 0)? ".jar": ".war")));
1:b5cede6:       bundle.writeOut(fout);
1:b5cede6:       fout.close();
1:b5cede6:     }
1:b5cede6: 
1:b5cede6:     for (int n =0; n< 2; n++) {
1:b5cede6:       ZipFixture bundle = ArchiveFixture.newJar().manifest()
1:b5cede6:       .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:b5cede6:       .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
1:b5cede6:       .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:b5cede6: 
1:b5cede6: 
1:b5cede6:       FileOutputStream fout = new FileOutputStream(new File (tmpDir, "bb" + n + ".jar"));
1:b5cede6:       bundle.writeOut(fout);
1:b5cede6:       fout.close();
1:b5cede6:     }
1:b5cede6: 
1:7937e00:     IOUtils.writeOut(tmpDir, "simple.jar", new ByteArrayInputStream("abc".getBytes()));
1:7937e00:     IOUtils.writeOut(tmpDir, "simple.war", new ByteArrayInputStream("sss".getBytes()));
1:7937e00:     IOUtils.writeOut(tmpDir, "simple.txt", new ByteArrayInputStream("abc".getBytes()));
1:7937e00:     IOUtils.writeOut(tmpDir, "some/relative/directory/complex.jar", new ByteArrayInputStream("def".getBytes()));
1:7937e00:     IOUtils.writeOut(tmpDir, "some/relative/directory/aa/complex2.war", new ByteArrayInputStream("ghi".getBytes()));
1:7937e00:     IOUtils.writeOut(tmpDir, "simple", new ByteArrayInputStream("abc".getBytes()));
1:b5cede6: 
1:b5cede6:     List<URI> jarFiles = FileUtils.getBundlesRecursive(tmpDir.toURI());
1:b5cede6:     assertEquals("There should be 4 entries.", 4, jarFiles.size());
1:b5cede6:     assertTrue("The entry should contain this aa0.jar", jarFiles.contains(new File(tmpDir, "aa0.jar").toURI()));
1:b5cede6:     assertTrue("The entry should contain this aa1.war", jarFiles.contains(new File(tmpDir, "aa1.war").toURI()));
1:b5cede6:     assertTrue("The entry should contain this aa0.jar", jarFiles.contains(new File(subDir, "aa0.jar").toURI()));
1:b5cede6:     assertTrue("The entry should contain this aa1.war", jarFiles.contains(new File(subDir, "aa1.war").toURI()));
1:b5cede6: 
1:b5cede6:     IOUtils.deleteRecursive(tmpDir);
1:b5cede6:   }
1:b5cede6: 
1:b5cede6: 
1:b5cede6: }
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:7937e00
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
1:     IOUtils.writeOut(tmpDir, "simple.jar", new ByteArrayInputStream("abc".getBytes()));
1:     IOUtils.writeOut(tmpDir, "simple.war", new ByteArrayInputStream("sss".getBytes()));
1:     IOUtils.writeOut(tmpDir, "simple.txt", new ByteArrayInputStream("abc".getBytes()));
1:     IOUtils.writeOut(tmpDir, "some/relative/directory/complex.jar", new ByteArrayInputStream("def".getBytes()));
1:     IOUtils.writeOut(tmpDir, "some/relative/directory/aa/complex2.war", new ByteArrayInputStream("ghi".getBytes()));
1:     IOUtils.writeOut(tmpDir, "simple", new ByteArrayInputStream("abc".getBytes()));
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.io.IOUtils;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.filesystem.FileUtils;
0: import org.apache.aries.util.filesystem.IOUtils;
author:Emily Jiang
-------------------------------------------------------------------------------
commit:b5cede6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.utils.filesystem;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
0: import java.io.StringBufferInputStream;
1: import java.net.URI;
1: import java.util.List;
1: 
1: import org.apache.aries.unittest.fixture.ArchiveFixture;
1: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: 
1: 
1: /**
1:  * This class contains tests for the virtual file system.
1:  */
1: public class FileUtilsTest
1: {
1: 
1: 
1:   /**
1:    * Make sure we get the bundles files recursively regardless of the file extension.
1:    * @throws IOException
1:    */
1: 
1:   @SuppressWarnings("deprecation")
1:   @Test
1:   public void testGetBundlesRecursive() throws IOException {
1:     File tmpDir = new File("../src/test/resources/tmpJars");
1:     tmpDir.mkdirs();
1:     for (int n =0; n< 2; n++) {
1:       ZipFixture bundle = ArchiveFixture.newJar().manifest()
1:       .attribute(Constants.BUNDLE_SYMBOLICNAME, "aa" + n)
1:       .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:       .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
1:       .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:       FileOutputStream fout = new FileOutputStream(new File (tmpDir.getAbsoluteFile(), "aa" + n + ((n == 0)? ".jar": ".war")));
1:       bundle.writeOut(fout);
1:       fout.close();
1:     }
1:     File subDir = new File(tmpDir, "subDir");
1:     subDir.mkdirs();
1:     for (int n =0; n< 2; n++) {
1:       ZipFixture bundle = ArchiveFixture.newJar().manifest()
1:       .attribute(Constants.BUNDLE_SYMBOLICNAME, "aa" + n)
1:       .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:       .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
1:       .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1: 
1: 
1: 
1:       FileOutputStream fout = new FileOutputStream(new File (subDir.getAbsoluteFile(), "aa" + n + ((n == 0)? ".jar": ".war")));
1:       bundle.writeOut(fout);
1:       fout.close();
1:     }
1: 
1:     for (int n =0; n< 2; n++) {
1:       ZipFixture bundle = ArchiveFixture.newJar().manifest()
1:       .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:       .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
1:       .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1: 
1: 
1:       FileOutputStream fout = new FileOutputStream(new File (tmpDir, "bb" + n + ".jar"));
1:       bundle.writeOut(fout);
1:       fout.close();
1:     }
1: 
0:     IOUtils.writeOut(tmpDir, "simple.jar", new StringBufferInputStream("abc"));
0:     IOUtils.writeOut(tmpDir, "simple.war", new StringBufferInputStream("sss"));
0:     IOUtils.writeOut(tmpDir, "simple.txt", new StringBufferInputStream("abc"));
0:     IOUtils.writeOut(tmpDir, "some/relative/directory/complex.jar", new StringBufferInputStream("def"));
0:     IOUtils.writeOut(tmpDir, "some/relative/directory/aa/complex2.war", new StringBufferInputStream("ghi"));
0:     IOUtils.writeOut(tmpDir, "simple", new StringBufferInputStream("abc"));
1: 
1:     List<URI> jarFiles = FileUtils.getBundlesRecursive(tmpDir.toURI());
1:     assertEquals("There should be 4 entries.", 4, jarFiles.size());
1:     assertTrue("The entry should contain this aa0.jar", jarFiles.contains(new File(tmpDir, "aa0.jar").toURI()));
1:     assertTrue("The entry should contain this aa1.war", jarFiles.contains(new File(tmpDir, "aa1.war").toURI()));
1:     assertTrue("The entry should contain this aa0.jar", jarFiles.contains(new File(subDir, "aa0.jar").toURI()));
1:     assertTrue("The entry should contain this aa1.war", jarFiles.contains(new File(subDir, "aa1.war").toURI()));
1: 
1:     IOUtils.deleteRecursive(tmpDir);
1:   }
1: 
1: 
1: }
============================================================================