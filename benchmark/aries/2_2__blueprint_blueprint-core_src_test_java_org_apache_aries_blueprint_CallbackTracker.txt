1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint;
1:f13c6ac: 
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.List;
1:f13c6ac: 
1:f13c6ac: public class CallbackTracker {
1:f13c6ac: 
1:f13c6ac:     private static List<Callback> callbacks = new ArrayList<Callback>();
1:f13c6ac:     
1:f13c6ac:     public static void add(Callback callback) {
1:f13c6ac:         callbacks.add(callback);
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public static List<Callback> getCallbacks() {
1:f13c6ac:         return callbacks;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public static void clear() {
1:f13c6ac:         callbacks.clear();
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public static class Callback {
1:f13c6ac:         
1:f13c6ac:         public static int INIT = 1;
1:f13c6ac:         public static int DESTROY = 2;
1:f13c6ac:         
1:f13c6ac:         private Object object;
1:f13c6ac:         private int type;
1:f13c6ac:         
1:f13c6ac:         public Callback(int type, Object object) {
1:f13c6ac:             this.type = type;
1:f13c6ac:             this.object = object;
1:f13c6ac:         }        
1:f13c6ac:         
1:f13c6ac:         public int getType() {
1:f13c6ac:             return type;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public Object getObject() {
1:f13c6ac:             return object;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public String toString() {
1:f13c6ac:             return type + " " + object;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:     }
1:f13c6ac: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: public class CallbackTracker {
1: 
1:     private static List<Callback> callbacks = new ArrayList<Callback>();
1:     
1:     public static void add(Callback callback) {
1:         callbacks.add(callback);
1:     }
1:     
1:     public static List<Callback> getCallbacks() {
1:         return callbacks;
1:     }
1:     
1:     public static void clear() {
1:         callbacks.clear();
1:     }
1:     
1:     public static class Callback {
1:         
1:         public static int INIT = 1;
1:         public static int DESTROY = 2;
1:         
1:         private Object object;
1:         private int type;
1:         
1:         public Callback(int type, Object object) {
1:             this.type = type;
1:             this.object = object;
1:         }        
1:         
1:         public int getType() {
1:             return type;
1:         }
1:         
1:         public Object getObject() {
1:             return object;
1:         }
1:         
1:         public String toString() {
1:             return type + " " + object;
1:         }
1:         
1:     }
1: }
============================================================================