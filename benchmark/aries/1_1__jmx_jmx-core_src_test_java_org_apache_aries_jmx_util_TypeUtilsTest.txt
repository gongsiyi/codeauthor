1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.util;
1:fdf3952: 
1:fdf3952: import static org.apache.aries.jmx.util.TypeUtils.fromDictionary;
1:fdf3952: import static org.apache.aries.jmx.util.TypeUtils.fromString;
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertTrue;
1:fdf3952: 
1:fdf3952: import java.math.BigDecimal;
1:fdf3952: import java.math.BigInteger;
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.Hashtable;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import org.junit.Test;
1:fdf3952: 
1:fdf3952: public class TypeUtilsTest {
1:fdf3952: 
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testMapFromDictionary() throws Exception{
1:fdf3952:         
1:fdf3952:         Dictionary<String, String> dictionary = new Hashtable<String, String>();
1:fdf3952:         dictionary.put("one", "1");
1:fdf3952:         dictionary.put("two", "2");
1:fdf3952:         
1:fdf3952:         Map<String,String> map = fromDictionary(dictionary);
1:fdf3952:         assertEquals(2, map.size());
1:fdf3952:         assertEquals("1", map.get("one"));
1:fdf3952:         assertEquals("2", map.get("two"));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testFromString() throws Exception {
1:fdf3952:         
1:fdf3952:         String value;
1:fdf3952:         
1:fdf3952:         value = "1";
1:fdf3952:         Integer integerValue = fromString(Integer.class, value);
1:fdf3952:         assertEquals(new Integer(1), integerValue);
1:fdf3952:         
1:fdf3952:         int intValue = fromString(Integer.TYPE, value);
1:fdf3952:         assertEquals(1, intValue);
1:fdf3952:         
1:fdf3952:         Long wrappedLongValue = fromString(Long.class, value);
1:fdf3952:         assertEquals(Long.valueOf(1), wrappedLongValue);
1:fdf3952:         
1:fdf3952:         long longValue = fromString(Long.TYPE, value);
1:fdf3952:         assertEquals(1, longValue);
1:fdf3952:         
1:fdf3952:         Double wrappedDoubleValue = fromString(Double.class, value);
1:fdf3952:         assertEquals(Double.valueOf(1), wrappedDoubleValue);
1:fdf3952:         
1:fdf3952:         double doubleValue = fromString(Double.TYPE, value);
1:fdf3952:         assertEquals(1, doubleValue, 0);
1:fdf3952:         
1:fdf3952:         Float wrappedFloatValue = fromString(Float.class, value);
1:fdf3952:         assertEquals(Float.valueOf(1), wrappedFloatValue);
1:fdf3952:         
1:fdf3952:         float floatValue = fromString(Float.TYPE, value);
1:fdf3952:         assertEquals(1, floatValue, 0);
1:fdf3952:         
1:fdf3952:         Short shortValue = fromString(Short.class, value);
1:fdf3952:         assertEquals(Short.valueOf(value), shortValue);
1:fdf3952:         
1:fdf3952:         Byte byteValue = fromString(Byte.class, value);
1:fdf3952:         assertEquals(Byte.valueOf(value), byteValue);
1:fdf3952:         
1:fdf3952:         value = "true";
1:fdf3952:         assertTrue(fromString(Boolean.class, value));
1:fdf3952:         assertTrue(fromString(Boolean.TYPE, value));
1:fdf3952:         
1:fdf3952:         char charValue = fromString(Character.TYPE, "a");
1:fdf3952:         assertEquals('a', charValue);
1:fdf3952:         Character characterValue = fromString(Character.class, "a");
1:fdf3952:         assertEquals(Character.valueOf('a'), characterValue);
1:fdf3952:         
1:fdf3952:         BigDecimal bigDecimal = fromString(BigDecimal.class, "2");
1:fdf3952:         assertEquals(new BigDecimal("2"), bigDecimal);
1:fdf3952:      
1:fdf3952:         BigInteger bigInteger = fromString(BigInteger.class, "2");
1:fdf3952:         assertEquals(new BigInteger("2"), bigInteger);
1:fdf3952:         
1:fdf3952:         String stringValue = fromString(String.class, value);
1:fdf3952:         assertEquals(stringValue, value);
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.util;
1: 
1: import static org.apache.aries.jmx.util.TypeUtils.fromDictionary;
1: import static org.apache.aries.jmx.util.TypeUtils.fromString;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.math.BigDecimal;
1: import java.math.BigInteger;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
1: import org.junit.Test;
1: 
1: public class TypeUtilsTest {
1: 
1:     
1:     @Test
1:     public void testMapFromDictionary() throws Exception{
1:         
1:         Dictionary<String, String> dictionary = new Hashtable<String, String>();
1:         dictionary.put("one", "1");
1:         dictionary.put("two", "2");
1:         
1:         Map<String,String> map = fromDictionary(dictionary);
1:         assertEquals(2, map.size());
1:         assertEquals("1", map.get("one"));
1:         assertEquals("2", map.get("two"));
1:         
1:     }
1:     
1:     @Test
1:     public void testFromString() throws Exception {
1:         
1:         String value;
1:         
1:         value = "1";
1:         Integer integerValue = fromString(Integer.class, value);
1:         assertEquals(new Integer(1), integerValue);
1:         
1:         int intValue = fromString(Integer.TYPE, value);
1:         assertEquals(1, intValue);
1:         
1:         Long wrappedLongValue = fromString(Long.class, value);
1:         assertEquals(Long.valueOf(1), wrappedLongValue);
1:         
1:         long longValue = fromString(Long.TYPE, value);
1:         assertEquals(1, longValue);
1:         
1:         Double wrappedDoubleValue = fromString(Double.class, value);
1:         assertEquals(Double.valueOf(1), wrappedDoubleValue);
1:         
1:         double doubleValue = fromString(Double.TYPE, value);
1:         assertEquals(1, doubleValue, 0);
1:         
1:         Float wrappedFloatValue = fromString(Float.class, value);
1:         assertEquals(Float.valueOf(1), wrappedFloatValue);
1:         
1:         float floatValue = fromString(Float.TYPE, value);
1:         assertEquals(1, floatValue, 0);
1:         
1:         Short shortValue = fromString(Short.class, value);
1:         assertEquals(Short.valueOf(value), shortValue);
1:         
1:         Byte byteValue = fromString(Byte.class, value);
1:         assertEquals(Byte.valueOf(value), byteValue);
1:         
1:         value = "true";
1:         assertTrue(fromString(Boolean.class, value));
1:         assertTrue(fromString(Boolean.TYPE, value));
1:         
1:         char charValue = fromString(Character.TYPE, "a");
1:         assertEquals('a', charValue);
1:         Character characterValue = fromString(Character.class, "a");
1:         assertEquals(Character.valueOf('a'), characterValue);
1:         
1:         BigDecimal bigDecimal = fromString(BigDecimal.class, "2");
1:         assertEquals(new BigDecimal("2"), bigDecimal);
1:      
1:         BigInteger bigInteger = fromString(BigInteger.class, "2");
1:         assertEquals(new BigInteger("2"), bigInteger);
1:         
1:         String stringValue = fromString(String.class, value);
1:         assertEquals(stringValue, value);
1:         
1:     }
1: }
============================================================================