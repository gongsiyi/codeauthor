1:b664100: /*
1:b664100:  * Licensed to the Apache Software Foundation (ASF) under one
1:b664100:  * or more contributor license agreements.  See the NOTICE file
1:b664100:  * distributed with this work for additional information
1:b664100:  * regarding copyright ownership.  The ASF licenses this file
1:b664100:  * to you under the Apache License, Version 2.0 (the
1:b664100:  * "License"); you may not use this file except in compliance
1:b664100:  * with the License.  You may obtain a copy of the License at
1:b664100:  *
1:b664100:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b664100:  *
1:b664100:  * Unless required by applicable law or agreed to in writing,
1:b664100:  * software distributed under the License is distributed on an
1:b664100:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b664100:  * KIND, either express or implied.  See the License for the
1:b664100:  * specific language governing permissions and limitations
1:b664100:  * under the License.
1:b664100:  */
1:b664100: package org.apache.aries.transaction;
6:b664100: 
1:28b7f4b: import static org.easymock.EasyMock.expect;
1:28b7f4b: import static org.easymock.EasyMock.replay;
1:28b7f4b: 
1:b664100: import java.io.IOException;
1:b664100: 
1:b664100: import javax.transaction.Transaction;
1:b664100: import javax.transaction.TransactionManager;
1:b664100: 
1:bd98451: import org.apache.aries.transaction.pojo.AnnotatedPojo;
1:febc5c2: import org.easymock.EasyMock;
1:febc5c2: import org.easymock.IMocksControl;
1:92e371f: import org.junit.Test;
1:706f1c1: import org.osgi.service.coordinator.Coordination;
1:28b7f4b: import org.osgi.service.coordinator.CoordinationException;
1:bd98451: import org.osgi.service.coordinator.Coordinator;
1:b664100: 
1:b664100: public class InterceptorTest {
1:b664100: 
1:febc5c2:     @Test
1:febc5c2:     public void testRollbackOnException() throws Throwable {
1:28b7f4b:         runPostCall(false);
1:28b7f4b:         runPostCall(true);
1:28b7f4b:     }
1:28b7f4b: 
1:28b7f4b:     private void runPostCall(boolean failCoordination) throws Throwable {
1:28b7f4b:         postCallWithTransaction(new IllegalStateException(), true, failCoordination);
1:28b7f4b:         postCallWithTransaction(new Error(), true, failCoordination);
1:28b7f4b:         postCallWithTransaction(new Exception(), false, failCoordination);
1:28b7f4b:         postCallWithTransaction(new IOException(), false, failCoordination);
3:b664100:     }
1:b664100:     
1:28b7f4b:     private CoordinationException coordinationException(Throwable th) {
1:28b7f4b:         Coordination coordination = EasyMock.createMock(Coordination.class);
1:28b7f4b:         expect(coordination.getId()).andReturn(1l);
1:28b7f4b:         expect(coordination.getName()).andReturn("Test");
1:28b7f4b:         replay(coordination);
1:28b7f4b:         CoordinationException cex = new CoordinationException("Simulating exception", 
1:28b7f4b:                                                               coordination , 
1:28b7f4b:                                                               CoordinationException.FAILED,
1:28b7f4b:                                                               th);
1:28b7f4b:         return cex;
1:28b7f4b:     }
1:28b7f4b:     
1:28b7f4b:     private void postCallWithTransaction(Throwable th, boolean expectRollback, boolean failCoordination) throws Throwable {
1:febc5c2:         IMocksControl c = EasyMock.createControl();
1:bd98451:         TransactionManager tm = c.createMock(TransactionManager.class);
1:bd98451:         Coordinator coordinator = c.createMock(Coordinator.class);
1:bd98451:         ComponentTxData txData = new ComponentTxData(AnnotatedPojo.class);
1:bd98451:         TxInterceptorImpl sut = new TxInterceptorImpl(tm, coordinator, txData );
1:febc5c2:         Transaction tran = c.createMock(Transaction.class);
1:febc5c2:         
1:febc5c2:         if (expectRollback) {
1:febc5c2:             tran.setRollbackOnly();
1:706f1c1:             EasyMock.expectLastCall();
1:febc5c2:         }
1:706f1c1:         Coordination coordination = c.createMock(Coordination.class);
1:706f1c1:         coordination.end();
1:28b7f4b:         if (failCoordination) {
1:28b7f4b:             EasyMock.expectLastCall().andThrow(coordinationException(th));
1:28b7f4b:         } else {
1:28b7f4b:             EasyMock.expectLastCall();
1:28b7f4b:         }
1:febc5c2:         
1:febc5c2:         c.replay();
1:febc5c2:         TransactionToken tt = new TransactionToken(tran, null, TransactionAttribute.REQUIRED);
1:706f1c1:         
1:706f1c1:         tt.setCoordination(coordination );
1:e91e2c8:         sut.postCallWithException(null, this.getClass().getMethods()[0], th, tt);
1:febc5c2:         c.verify();
1:b664100:     }
1:b664100:     
1:b664100: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:bd98451
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.transaction.pojo.AnnotatedPojo;
1: import org.osgi.service.coordinator.Coordinator;
/////////////////////////////////////////////////////////////////////////
1:         TransactionManager tm = c.createMock(TransactionManager.class);
1:         Coordinator coordinator = c.createMock(Coordinator.class);
1:         ComponentTxData txData = new ComponentTxData(AnnotatedPojo.class);
1:         TxInterceptorImpl sut = new TxInterceptorImpl(tm, coordinator, txData );
commit:28b7f4b
/////////////////////////////////////////////////////////////////////////
1: import static org.easymock.EasyMock.expect;
1: import static org.easymock.EasyMock.replay;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.coordinator.CoordinationException;
1:         runPostCall(false);
1:         runPostCall(true);
1:     }
1: 
1:     private void runPostCall(boolean failCoordination) throws Throwable {
1:         postCallWithTransaction(new IllegalStateException(), true, failCoordination);
1:         postCallWithTransaction(new Error(), true, failCoordination);
1:         postCallWithTransaction(new Exception(), false, failCoordination);
1:         postCallWithTransaction(new IOException(), false, failCoordination);
1:     private CoordinationException coordinationException(Throwable th) {
1:         Coordination coordination = EasyMock.createMock(Coordination.class);
1:         expect(coordination.getId()).andReturn(1l);
1:         expect(coordination.getName()).andReturn("Test");
1:         replay(coordination);
1:         CoordinationException cex = new CoordinationException("Simulating exception", 
1:                                                               coordination , 
1:                                                               CoordinationException.FAILED,
1:                                                               th);
1:         return cex;
1:     }
1:     
1:     private void postCallWithTransaction(Throwable th, boolean expectRollback, boolean failCoordination) throws Throwable {
/////////////////////////////////////////////////////////////////////////
1:         if (failCoordination) {
1:             EasyMock.expectLastCall().andThrow(coordinationException(th));
1:         } else {
1:             EasyMock.expectLastCall();
1:         }
commit:706f1c1
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.coordinator.Coordination;
/////////////////////////////////////////////////////////////////////////
1:         Coordination coordination = c.createMock(Coordination.class);
1:         coordination.end();
1:         EasyMock.expectLastCall();
1:         
1:         tt.setCoordination(coordination );
commit:e91e2c8
/////////////////////////////////////////////////////////////////////////
1:         sut.postCallWithException(null, this.getClass().getMethods()[0], th, tt);
commit:febc5c2
/////////////////////////////////////////////////////////////////////////
1: import org.easymock.EasyMock;
1: import org.easymock.IMocksControl;
1:     @Test
1:     public void testRollbackOnException() throws Throwable {
0:         postCallWithTransaction(new IllegalStateException(), true);
0:         postCallWithTransaction(new Error(), true);
0:         postCallWithTransaction(new Exception(), false);
0:         postCallWithTransaction(new IOException(), false);
0:     private void postCallWithTransaction(Throwable th, boolean expectRollback) throws Throwable {
1:         IMocksControl c = EasyMock.createControl();
0:         TxInterceptorImpl sut = new TxInterceptorImpl();
0:         sut.setTransactionManager(c.createMock(TransactionManager.class));
1:         Transaction tran = c.createMock(Transaction.class);
1:         
1:         if (expectRollback) {
1:             tran.setRollbackOnly();
0:             EasyMock.expectLastCall();
1:         }
1:         
1:         c.replay();
1:         TransactionToken tt = new TransactionToken(tran, null, TransactionAttribute.REQUIRED);
0:         sut.postCallWithException(null, null, th, tt);
1:         c.verify();
author:Lin Sun
-------------------------------------------------------------------------------
commit:92e371f
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
0:         return new TransactionToken(t, null, TransactionAttribute.REQUIRED);
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:b664100
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction;
1: 
0: import static org.junit.Assert.*;
1: 
1: import java.io.IOException;
1: 
1: import javax.transaction.Transaction;
1: import javax.transaction.TransactionManager;
1: 
0: import org.junit.Test;
1: 
0: import org.apache.aries.unittest.mocks.MethodCall;
0: import org.apache.aries.unittest.mocks.Skeleton;
1: 
1: public class InterceptorTest {
0:     private Transaction t;
1:     
0:     @Test
0:     public void testRollbackOnException() {
0:         TxInterceptorImpl sut = new TxInterceptorImpl();
0:         sut.setTransactionManager(Skeleton.newMock(TransactionManager.class));
1:         
0:         sut.postCallWithException(null, null, new IllegalStateException(), newTranToken());
0:         assertRolledBack();
0:         sut.postCallWithException(null, null, new Error(), newTranToken());
0:         assertRolledBack();
1: 
0:         sut.postCallWithException(null, null, new Exception(), newTranToken());
0:         assertNotRolledBack();
0:         sut.postCallWithException(null, null, new IOException(), newTranToken());
0:         assertNotRolledBack();
1:     }
1:     
0:     private void assertNotRolledBack() {
0:         Skeleton.getSkeleton(t).assertNotCalled(new MethodCall(Transaction.class, "setRollbackOnly"));
1:     }
1:     
0:     private void assertRolledBack() {
0:         Skeleton.getSkeleton(t).assertCalled(new MethodCall(Transaction.class, "setRollbackOnly"));
1:     }
1:     
0:     private TransactionToken newTranToken() {
0:         t = Skeleton.newMock(Transaction.class);
0:         return new TransactionToken(t, null, TransactionStrategy.REQUIRED);
1:     }
1: }
============================================================================