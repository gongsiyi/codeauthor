1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:78dd69f: package org.apache.aries.tx.control.service.xa.impl;
36:78dd69f: 
1:78dd69f: import static org.junit.Assert.assertEquals;
1:78dd69f: import static org.junit.Assert.assertFalse;
1:78dd69f: import static org.junit.Assert.assertNotNull;
1:f87416c: import static org.junit.Assert.assertNotSame;
1:78dd69f: import static org.junit.Assert.assertNull;
1:f87416c: import static org.junit.Assert.assertSame;
1:78dd69f: import static org.junit.Assert.assertTrue;
1:78dd69f: import static org.junit.Assert.fail;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.ACTIVE;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.MARKED_ROLLBACK;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1:78dd69f: 
1:7f1e7ab: import java.util.Collections;
1:78dd69f: 
1:78dd69f: import org.junit.Before;
1:78dd69f: import org.junit.Test;
1:78dd69f: import org.junit.runner.RunWith;
1:78dd69f: import org.mockito.Mock;
1:78dd69f: import org.mockito.runners.MockitoJUnitRunner;
1:78dd69f: import org.osgi.service.transaction.control.LocalResource;
1:78dd69f: import org.osgi.service.transaction.control.ResourceProvider;
1:f87416c: import org.osgi.service.transaction.control.TransactionContext;
1:78dd69f: 
1:78dd69f: @RunWith(MockitoJUnitRunner.class)
1:78dd69f: public class TransactionControlStatusTest {
1:78dd69f: 
4:78dd69f: 	@Mock
1:78dd69f: 	ResourceProvider<Object> testProvider;
1:78dd69f: 	@Mock
1:78dd69f: 	LocalResource testResource;
1:78dd69f: 
1:78dd69f: 	TransactionControlImpl txControl;
1:78dd69f: 
1:78dd69f: 	Object resource = new Object();
1:78dd69f: 
1:78dd69f: 	@Before
1:7f1e7ab: 	public void setUp() throws Exception {
1:78dd69f: 
1:78dd69f: 		resource = new Object();
1:78dd69f: 		
1:7f1e7ab: 		txControl = new TransactionControlImpl(null, Collections.emptyMap());
13:78dd69f: 	}
1:78dd69f: 
7:78dd69f: 	@Test
1:f87416c: 	public void testGetRollbackOnlyUnscoped() {
5:78dd69f: 		try {
3:78dd69f: 			txControl.getRollbackOnly();
2:78dd69f: 			fail("Should not be able to get rollback only");
3:78dd69f: 		} catch (IllegalStateException e) {
1:78dd69f: 
1:78dd69f: 		}
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Test
1:f87416c: 	public void testSetRollbackOnlyUnscoped() {
1:78dd69f: 		try {
5:78dd69f: 			txControl.setRollbackOnly();
2:78dd69f: 			fail("Should not be able to set rollback only");
1:78dd69f: 		} catch (IllegalStateException e) {
1:78dd69f: 
1:78dd69f: 		}
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Test
1:f87416c: 	public void testTranChecksUnscoped() {
3:78dd69f: 		assertFalse(txControl.activeTransaction());
2:78dd69f: 		assertFalse(txControl.activeScope());
2:78dd69f: 		assertNull(txControl.getCurrentContext());
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Test
1:78dd69f: 	public void testGetRollbackOnlyScoped() {
2:78dd69f: 		txControl.notSupported(() -> {
1:78dd69f: 			try {
1:78dd69f: 				txControl.getRollbackOnly();
3:78dd69f: 				fail("Should not be able to get or set rollback when there is no transaction");
3:78dd69f: 			} catch (IllegalStateException ise) {
1:78dd69f: 			}
5:78dd69f: 			return null;
5:78dd69f: 		});
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Test
1:78dd69f: 	public void testSetRollbackOnlyScoped() {
1:78dd69f: 		txControl.notSupported(() -> {
1:78dd69f: 			try {
1:78dd69f: 				txControl.setRollbackOnly();
1:78dd69f: 				fail("Should not be able to get or set rollback when there is no transaction");
1:78dd69f: 			} catch (IllegalStateException ise) {
1:78dd69f: 			}
1:78dd69f: 			return null;
1:78dd69f: 		});
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Test
1:78dd69f: 	public void testTranChecksScoped() {
1:78dd69f: 		
1:78dd69f: 		txControl.notSupported(() -> {
1:78dd69f: 			assertFalse(txControl.activeTransaction());
3:78dd69f: 			assertTrue(txControl.activeScope());
3:78dd69f: 			assertNotNull(txControl.getCurrentContext());
2:78dd69f: 			assertEquals(NO_TRANSACTION, txControl.getCurrentContext().getTransactionStatus());
1:78dd69f: 			
1:78dd69f: 			return null;
1:78dd69f: 		});
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Test
1:f87416c: 	public void testInheritNotSupported() {
1:78dd69f: 		txControl.notSupported(() -> {
1:f87416c: 				TransactionContext currentContext = txControl.getCurrentContext();
1:f87416c: 				return txControl.notSupported(() -> {
1:f87416c: 						assertSame(currentContext, txControl.getCurrentContext());
1:f87416c: 						return null;
1:f87416c: 					});
1:f87416c: 			});
1:f87416c: 	}
1:f87416c: 
1:f87416c: 	@Test
1:f87416c: 	public void testInheritNotSupportedSupports() {
1:f87416c: 		txControl.notSupported(() -> {
1:f87416c: 			TransactionContext currentContext = txControl.getCurrentContext();
1:f87416c: 			return txControl.supports(() -> {
1:f87416c: 				assertSame(currentContext, txControl.getCurrentContext());
1:f87416c: 				return null;
1:f87416c: 			});
1:78dd69f: 		});
1:78dd69f: 	}
1:f87416c: 
1:78dd69f: 	@Test
1:f87416c: 	public void testInheritNotSupportedRequired() {
1:78dd69f: 		txControl.notSupported(() -> {
1:f87416c: 			TransactionContext currentContext = txControl.getCurrentContext();
1:f87416c: 			txControl.required(() -> {
1:f87416c: 				assertNotSame(currentContext, txControl.getCurrentContext());
1:f87416c: 				return null;
1:f87416c: 			});
1:f87416c: 			assertSame(currentContext, txControl.getCurrentContext());
1:78dd69f: 			return null;
1:78dd69f: 		});
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Test
1:78dd69f: 	public void testGetRollbackOnlyActive() {
3:78dd69f: 		txControl.required(() -> {
3:78dd69f: 			assertFalse(txControl.getRollbackOnly());
1:78dd69f: 			return null;
1:78dd69f: 		});
1:78dd69f: 	}
1:78dd69f: 	
1:78dd69f: 	@Test
1:78dd69f: 	public void testSetRollbackOnlyActive() {
1:78dd69f: 		txControl.required(() -> {
1:78dd69f: 			assertFalse(txControl.getRollbackOnly());
1:78dd69f: 			txControl.setRollbackOnly();
2:78dd69f: 			assertTrue(txControl.getRollbackOnly());
1:78dd69f: 			return null;
1:78dd69f: 		});
1:78dd69f: 	}
1:78dd69f: 	
1:78dd69f: 	@Test
1:78dd69f: 	public void testTranChecksActive() {
1:78dd69f: 		
1:78dd69f: 		txControl.required(() -> {
2:78dd69f: 			assertTrue(txControl.activeTransaction());
1:78dd69f: 			assertTrue(txControl.activeScope());
1:78dd69f: 			assertNotNull(txControl.getCurrentContext());
2:78dd69f: 			assertEquals(ACTIVE, txControl.getCurrentContext().getTransactionStatus());
1:78dd69f: 
1:78dd69f: 			txControl.setRollbackOnly();
2:78dd69f: 			assertEquals(MARKED_ROLLBACK, txControl.getCurrentContext().getTransactionStatus());
1:78dd69f: 			
1:78dd69f: 			return null;
1:78dd69f: 		});
1:78dd69f: 	}
1:78dd69f: 	
1:78dd69f: 	@Test
1:f87416c: 	public void testInheritSupports() {
1:78dd69f: 		txControl.required(() -> {
1:f87416c: 				TransactionContext currentContext = txControl.getCurrentContext();
1:f87416c: 				return txControl.supports(() -> {
1:f87416c: 						assertSame(currentContext, txControl.getCurrentContext());
1:f87416c: 						return null;
1:f87416c: 					});
1:f87416c: 			});
1:78dd69f: 	}
1:78dd69f: 
1:f87416c: 	@Test
1:f87416c: 	public void testInheritRequired() {
1:f87416c: 		txControl.required(() -> {
1:f87416c: 			TransactionContext currentContext = txControl.getCurrentContext();
1:f87416c: 			return txControl.required(() -> {
1:f87416c: 				assertSame(currentContext, txControl.getCurrentContext());
1:f87416c: 				return null;
1:f87416c: 			});
1:f87416c: 		});
1:f87416c: 	}
1:f87416c: 
1:f87416c: 	@Test
1:f87416c: 	public void testInheritRequiredNotSupported() {
1:f87416c: 		txControl.required(() -> {
1:f87416c: 			TransactionContext currentContext = txControl.getCurrentContext();
1:f87416c: 			txControl.notSupported(() -> {
1:f87416c: 				assertNotSame(currentContext, txControl.getCurrentContext());
1:f87416c: 				return null;
1:f87416c: 			});
1:f87416c: 			assertSame(currentContext, txControl.getCurrentContext());
1:78dd69f: 			return null;
1:78dd69f: 		});
1:78dd69f: 	}
1:78dd69f: 	
1:78dd69f: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7f1e7ab
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1: 	public void setUp() throws Exception {
1: 		txControl = new TransactionControlImpl(null, Collections.emptyMap());
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotSame;
1: import static org.junit.Assert.assertSame;
1: import org.osgi.service.transaction.control.TransactionContext;
/////////////////////////////////////////////////////////////////////////
0: 		txControl = new TransactionControlImpl(new GeronimoTransactionManager());
1: 	public void testGetRollbackOnlyUnscoped() {
/////////////////////////////////////////////////////////////////////////
1: 	public void testSetRollbackOnlyUnscoped() {
/////////////////////////////////////////////////////////////////////////
1: 	public void testTranChecksUnscoped() {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public void testInheritNotSupported() {
1: 				TransactionContext currentContext = txControl.getCurrentContext();
1: 				return txControl.notSupported(() -> {
1: 						assertSame(currentContext, txControl.getCurrentContext());
1: 						return null;
1: 					});
1: 			});
1: 	}
1: 
1: 	@Test
1: 	public void testInheritNotSupportedSupports() {
1: 		txControl.notSupported(() -> {
1: 			TransactionContext currentContext = txControl.getCurrentContext();
1: 			return txControl.supports(() -> {
1: 				assertSame(currentContext, txControl.getCurrentContext());
1: 				return null;
1: 			});
1: 
1: 	public void testInheritNotSupportedRequired() {
1: 			TransactionContext currentContext = txControl.getCurrentContext();
1: 			txControl.required(() -> {
1: 				assertNotSame(currentContext, txControl.getCurrentContext());
1: 				return null;
1: 			});
1: 			assertSame(currentContext, txControl.getCurrentContext());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public void testInheritSupports() {
1: 				TransactionContext currentContext = txControl.getCurrentContext();
1: 				return txControl.supports(() -> {
1: 						assertSame(currentContext, txControl.getCurrentContext());
1: 						return null;
1: 					});
1: 			});
1: 	@Test
1: 	public void testInheritRequired() {
1: 		txControl.required(() -> {
1: 			TransactionContext currentContext = txControl.getCurrentContext();
1: 			return txControl.required(() -> {
1: 				assertSame(currentContext, txControl.getCurrentContext());
1: 				return null;
1: 			});
1: 		});
1: 	}
1: 
1: 	@Test
1: 	public void testInheritRequiredNotSupported() {
1: 		txControl.required(() -> {
1: 			TransactionContext currentContext = txControl.getCurrentContext();
1: 			txControl.notSupported(() -> {
1: 				assertNotSame(currentContext, txControl.getCurrentContext());
1: 				return null;
1: 			});
1: 			assertSame(currentContext, txControl.getCurrentContext());
commit:78dd69f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.xa.impl;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: import static org.osgi.service.transaction.control.TransactionStatus.ACTIVE;
1: import static org.osgi.service.transaction.control.TransactionStatus.MARKED_ROLLBACK;
1: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1: 
0: import java.util.HashMap;
0: import java.util.Map;
1: 
0: import javax.transaction.xa.XAException;
1: 
0: import org.apache.aries.tx.control.service.xa.impl.TransactionControlImpl;
0: import org.apache.geronimo.transaction.manager.GeronimoTransactionManager;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.mockito.Mock;
0: import org.mockito.Mockito;
1: import org.mockito.runners.MockitoJUnitRunner;
0: import org.osgi.service.coordinator.Coordination;
0: import org.osgi.service.coordinator.Coordinator;
0: import org.osgi.service.coordinator.Participant;
1: import org.osgi.service.transaction.control.LocalResource;
1: import org.osgi.service.transaction.control.ResourceProvider;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: public class TransactionControlStatusTest {
1: 
1: 	@Mock
0: 	Coordinator coordinator;
1: 	@Mock
0: 	Coordination coordination1;
1: 	@Mock
0: 	Coordination coordination2;
1: 
1: 	@Mock
1: 	ResourceProvider<Object> testProvider;
1: 	@Mock
1: 	LocalResource testResource;
1: 
1: 	TransactionControlImpl txControl;
1: 
1: 	Object resource = new Object();
0: 	Map<Class<?>, Object> variables1;
0: 	Map<Class<?>, Object> variables2;
1: 
1: 	@Before
0: 	public void setUp() throws XAException {
1: 
1: 		resource = new Object();
0: 		variables1 = new HashMap<>();
0: 		variables2 = new HashMap<>();
1: 
0: 		Mockito.when(coordination1.getVariables()).thenReturn(variables1);
0: 		Mockito.when(coordination2.getVariables()).thenReturn(variables2);
1: 		
0: 		txControl = new TransactionControlImpl(new GeronimoTransactionManager(), coordinator);
1: 	}
1: 
1: 	@Test
0: 	public void testGetRollbackOnlyUnscopedNoCoord() {
1: 		try {
1: 			txControl.getRollbackOnly();
1: 			fail("Should not be able to get rollback only");
1: 		} catch (IllegalStateException e) {
1: 
1: 		}
1: 	}
1: 
1: 	@Test
0: 	public void testSetRollbackOnlyUnscopedNoCoord() {
1: 		try {
1: 			txControl.setRollbackOnly();
1: 			fail("Should not be able to set rollback only");
1: 		} catch (IllegalStateException e) {
1: 
1: 		}
1: 	}
1: 
1: 	@Test
0: 	public void testTranChecksUnscopedNoCoord() {
1: 		assertFalse(txControl.activeTransaction());
1: 		assertFalse(txControl.activeScope());
1: 		assertNull(txControl.getCurrentContext());
1: 	}
1: 
0: 	private void setupExistingCoordination() {
0: 		Mockito.when(coordinator.peek()).thenReturn(coordination1);
0: 		Mockito.when(coordination1.getVariables()).thenReturn(variables1);
1: 	}
1: 	
1: 	@Test
0: 	public void testGetRollbackOnlyUnscopedWithCoordination() {
0: 		setupExistingCoordination();
1: 		
1: 		try {
1: 			txControl.getRollbackOnly();
1: 			fail("Should not be able to get rollback only");
1: 		} catch (IllegalStateException e) {
1: 
1: 		}
1: 	}
1: 
1: 	@Test
0: 	public void testSetRollbackOnlyUnscopedWithCoordination() {
0: 		setupExistingCoordination();
1: 		
1: 
1: 		try {
1: 			txControl.setRollbackOnly();
1: 			fail("Should not be able to set rollback only");
1: 		} catch (IllegalStateException e) {
1: 
1: 		}
1: 	}
1: 	
1: 	@Test
0: 	public void testTranChecksUnscopedWithCoordination() {
1: 		
0: 		setupExistingCoordination();
1: 		
1: 		assertFalse(txControl.activeTransaction());
1: 		assertFalse(txControl.activeScope());
1: 		assertNull(txControl.getCurrentContext());
1: 	}
1: 
0: 	private void setupCoordinatorForSingleTransaction() {
0: 		setupCoordinatorForSingleTransaction(null);
1: 	}
1: 	
0: 	private void setupCoordinatorForSingleTransaction(Coordination existing) {
1: 		
0: 		Mockito.when(coordinator.peek()).thenReturn(existing);
1: 		
0: 		Mockito.when(coordinator.begin(Mockito.anyString(), Mockito.anyLong()))
0: 			.then(i -> {
0: 				Mockito.when(coordinator.peek()).thenReturn(coordination1);
0: 				return coordination1;
1: 			});
1: 		
1: 		
0: 		Mockito.doAnswer(i -> Mockito.when(coordinator.peek()).thenReturn(existing))
0: 			.when(coordination1).end();
0: 		Mockito.doAnswer(i -> Mockito.when(coordinator.peek()).thenReturn(existing) != null)
0: 			.when(coordination1).fail(Mockito.any(Throwable.class));
1: 		
0: 		Mockito.when(coordination1.getVariables()).thenReturn(variables1);
1: 	}
1: 	
1: 	@Test
1: 	public void testGetRollbackOnlyScoped() {
0: 		setupCoordinatorForSingleTransaction();
1: 		txControl.notSupported(() -> {
0: 			Mockito.verify(coordination1).addParticipant(Mockito.any(Participant.class));
1: 			try {
1: 				txControl.getRollbackOnly();
1: 				fail("Should not be able to get or set rollback when there is no transaction");
1: 			} catch (IllegalStateException ise) {
1: 			}
1: 			return null;
1: 		});
1: 	}
1: 
1: 	@Test
1: 	public void testSetRollbackOnlyScoped() {
0: 		setupCoordinatorForSingleTransaction();
1: 		
1: 		txControl.notSupported(() -> {
0: 			Mockito.verify(coordination1).addParticipant(Mockito.any(Participant.class));
1: 			try {
1: 				txControl.setRollbackOnly();
1: 				fail("Should not be able to get or set rollback when there is no transaction");
1: 			} catch (IllegalStateException ise) {
1: 			}
1: 			return null;
1: 		});
1: 	}
1: 
1: 	@Test
1: 	public void testTranChecksScoped() {
1: 		
0: 		setupCoordinatorForSingleTransaction();
1: 		txControl.notSupported(() -> {
1: 			assertFalse(txControl.activeTransaction());
1: 			assertTrue(txControl.activeScope());
1: 			assertNotNull(txControl.getCurrentContext());
1: 			assertEquals(NO_TRANSACTION, txControl.getCurrentContext().getTransactionStatus());
1: 			
1: 			return null;
1: 		});
1: 	}
1: 
1: 	@Test
0: 	public void testGetRollbackOnlyScopedExistingCoordination() {
0: 		setupCoordinatorForSingleTransaction(coordination2);
1: 		txControl.notSupported(() -> {
0: 			Mockito.verify(coordination1).addParticipant(Mockito.any(Participant.class));
1: 			try {
1: 				txControl.getRollbackOnly();
1: 				fail("Should not be able to get or set rollback when there is no transaction");
1: 			} catch (IllegalStateException ise) {
1: 			}
1: 			return null;
1: 		});
1: 	}
1: 	
1: 	@Test
0: 	public void testSetRollbackOnlyScopedExistingCoordination() {
0: 		setupCoordinatorForSingleTransaction(coordination2);
1: 		
1: 		txControl.notSupported(() -> {
0: 			Mockito.verify(coordination1).addParticipant(Mockito.any(Participant.class));
1: 			try {
1: 				txControl.setRollbackOnly();
1: 				fail("Should not be able to get or set rollback when there is no transaction");
1: 			} catch (IllegalStateException ise) {
1: 			}
1: 			return null;
1: 		});
1: 	}
1: 	
1: 	@Test
0: 	public void testTranChecksScopedExistingCoordination() {
1: 		
0: 		setupCoordinatorForSingleTransaction(coordination2);
1: 		txControl.notSupported(() -> {
1: 			assertFalse(txControl.activeTransaction());
1: 			assertTrue(txControl.activeScope());
1: 			assertNotNull(txControl.getCurrentContext());
1: 			assertEquals(NO_TRANSACTION, txControl.getCurrentContext().getTransactionStatus());
1: 			
1: 			return null;
1: 		});
1: 	}
1: 
1: 	@Test
1: 	public void testGetRollbackOnlyActive() {
0: 		setupCoordinatorForSingleTransaction();
1: 		txControl.required(() -> {
0: 			Mockito.verify(coordination1).addParticipant(Mockito.any(Participant.class));
1: 			assertFalse(txControl.getRollbackOnly());
1: 			return null;
1: 		});
1: 	}
1: 	
1: 	@Test
1: 	public void testSetRollbackOnlyActive() {
0: 		setupCoordinatorForSingleTransaction();
1: 		
1: 		txControl.required(() -> {
0: 			Mockito.verify(coordination1).addParticipant(Mockito.any(Participant.class));
1: 			assertFalse(txControl.getRollbackOnly());
1: 			txControl.setRollbackOnly();
1: 			assertTrue(txControl.getRollbackOnly());
1: 			
1: 			return null;
1: 		});
1: 	}
1: 	
1: 	@Test
1: 	public void testTranChecksActive() {
1: 		
0: 		setupCoordinatorForSingleTransaction();
1: 		txControl.required(() -> {
1: 			assertTrue(txControl.activeTransaction());
1: 			assertTrue(txControl.activeScope());
1: 			assertNotNull(txControl.getCurrentContext());
1: 			assertEquals(ACTIVE, txControl.getCurrentContext().getTransactionStatus());
1: 
1: 			txControl.setRollbackOnly();
1: 			assertEquals(MARKED_ROLLBACK, txControl.getCurrentContext().getTransactionStatus());
1: 			
1: 			return null;
1: 		});
1: 	}
1: 	
1: 	@Test
0: 	public void testGetRollbackOnlyActiveExistingCoordination() {
0: 		setupCoordinatorForSingleTransaction(coordination2);
1: 		txControl.required(() -> {
0: 			Mockito.verify(coordination1).addParticipant(Mockito.any(Participant.class));
1: 			assertFalse(txControl.getRollbackOnly());
1: 			return null;
1: 		});
1: 	}
1: 	
1: 	@Test
0: 	public void testSetRollbackOnlyActiveExistingCoordination() {
0: 		setupCoordinatorForSingleTransaction(coordination2);
1: 		
1: 		txControl.required(() -> {
0: 			Mockito.verify(coordination1).addParticipant(Mockito.any(Participant.class));
1: 			assertFalse(txControl.getRollbackOnly());
1: 			txControl.setRollbackOnly();
1: 			assertTrue(txControl.getRollbackOnly());
1: 			
1: 			return null;
1: 		});
1: 	}
1: 	
1: 	@Test
0: 	public void testTranChecksActiveExistingCoordination() {
1: 		
0: 		setupCoordinatorForSingleTransaction(coordination2);
1: 		txControl.required(() -> {
1: 			assertTrue(txControl.activeTransaction());
1: 			assertTrue(txControl.activeScope());
1: 			assertNotNull(txControl.getCurrentContext());
1: 			assertEquals(ACTIVE, txControl.getCurrentContext().getTransactionStatus());
1: 
1: 			txControl.setRollbackOnly();
1: 			assertEquals(MARKED_ROLLBACK, txControl.getCurrentContext().getTransactionStatus());
1: 			
1: 			return null;
1: 		});
1: 	}
1: 	
1: }
============================================================================