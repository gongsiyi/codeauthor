1:db3b209: /*
1:db3b209:  * Licensed to the Apache Software Foundation (ASF) under one
1:db3b209:  * or more contributor license agreements.  See the NOTICE file
1:db3b209:  * distributed with this work for additional information
1:db3b209:  * regarding copyright ownership.  The ASF licenses this file
1:db3b209:  * to you under the Apache License, Version 2.0 (the
1:db3b209:  * "License"); you may not use this file except in compliance
1:db3b209:  * with the License.  You may obtain a copy of the License at
1:db3b209:  *
1:db3b209:  *   http://www.apache.org/licenses/LICENSE-2.0
1:db3b209:  *
1:db3b209:  * Unless required by applicable law or agreed to in writing,
1:db3b209:  * software distributed under the License is distributed on an
1:db3b209:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:db3b209:  * KIND, either express or implied.  See the License for the
1:db3b209:  * specific language governing permissions and limitations
1:db3b209:  * under the License.
1:db3b209:  */
1:db3b209: package org.apache.aries.transaction.jdbc.internal;
2:db3b209: 
1:db3b209: import org.apache.aries.transaction.AriesTransactionManager;
1:db3b209: import org.osgi.framework.BundleContext;
1:db3b209: import org.osgi.framework.Constants;
1:db3b209: import org.osgi.framework.ServiceReference;
1:db3b209: import org.osgi.framework.ServiceRegistration;
1:db3b209: 
1:dac41bf: import javax.sql.CommonDataSource;
1:db3b209: import javax.sql.DataSource;
1:db3b209: import javax.sql.XADataSource;
1:8047ebe: 
1:db3b209: import java.util.Hashtable;
1:db3b209: import java.util.Map;
1:db3b209: 
1:8047ebe: @SuppressWarnings({"rawtypes", "unchecked"})
1:db3b209: public class ManagedDataSourceFactory {
1:db3b209: 
1:db3b209:     private final ServiceReference reference;
1:db3b209:     private final AriesTransactionManager transactionManager;
1:dac41bf:     private final CommonDataSource dataSource;
1:db3b209:     private final Map<String, Object> properties;
1:db3b209: 
1:dac41bf:     private ServiceRegistration<DataSource> registration;
1:dac41bf:     private ConnectionManagerFactory cm;
1:dac41bf: 
1:db3b209:     public ManagedDataSourceFactory(ServiceReference reference,
1:db3b209:                                     AriesTransactionManager transactionManager) {
1:db3b209:         this.reference = reference;
1:db3b209:         this.transactionManager = transactionManager;
1:db3b209:         this.properties = new Hashtable<String, Object>();
1:db3b209:         for (String key : reference.getPropertyKeys()) {
1:db3b209:             this.properties.put(key, reference.getProperty(key));
1:db3b209:         }
1:dac41bf:         this.dataSource = (CommonDataSource) reference.getBundle().getBundleContext().getService(reference);
1:db3b209:     }
1:db3b209: 
1:db3b209:     public AriesTransactionManager getTransactionManager() {
1:db3b209:         return transactionManager;
1:db3b209:     }
1:db3b209: 
1:dac41bf:     public CommonDataSource getDataSource() {
1:db3b209:         return dataSource;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public String getResourceName() {
1:db3b209:         return getString("aries.xa.name", null);
1:db3b209:     }
1:db3b209: 
1:db3b209:     private String getString(String name, String def) {
1:db3b209:         Object v = properties.get(name);
1:db3b209:         if (v instanceof String) {
1:db3b209:             return (String) v;
1:db3b209:         } else {
1:db3b209:             return def;
1:db3b209:         }
1:db3b209:     }
1:db3b209: 
1:db3b209:     private int getInt(String name, int def) {
1:db3b209:         Object v = properties.get(name);
1:db3b209:         if (v instanceof Integer) {
1:db3b209:             return (Integer) v;
1:db3b209:         } else if (v instanceof String) {
1:db3b209:             return Integer.parseInt((String) v);
1:db3b209:         } else {
1:db3b209:             return def;
1:db3b209:         }
1:db3b209:     }
1:db3b209: 
1:db3b209:     private boolean getBool(String name, boolean def) {
1:db3b209:         Object v = properties.get(name);
1:db3b209:         if (v instanceof Boolean) {
1:db3b209:             return (Boolean) v;
1:db3b209:         } else if (v instanceof String) {
1:db3b209:             return Boolean.parseBoolean((String) v);
1:db3b209:         } else {
1:db3b209:             return def;
1:db3b209:         }
1:db3b209:     }
1:db3b209: 
1:dac41bf:     public void register() throws Exception {
1:869475c:         boolean isXaDataSource = (dataSource instanceof XADataSource);
1:869475c: 
1:db3b209:         Hashtable<String, Object> props = new Hashtable<String, Object>(this.properties);
1:dac41bf:         props.put("aries.managed", "true");
1:869475c:         if (isXaDataSource) {
1:869475c:             props.put("aries.xa.aware", "true");
1:869475c:         }
1:db3b209:         props.put(Constants.SERVICE_RANKING, getInt(Constants.SERVICE_RANKING, 0) + 1000);
1:dac41bf: 
1:dac41bf:         AbstractMCFFactory mcf = isXaDataSource ? new XADataSourceMCFFactory() : new DataSourceMCFFactory();
1:db3b209:         mcf.setDataSource(dataSource);
1:db3b209:         mcf.setExceptionSorterAsString(getString("aries.xa.exceptionSorter", "all"));
1:db3b209:         mcf.setUserName(getString("aries.xa.username", null));
1:db3b209:         mcf.setPassword(getString("aries.xa.password", null));
1:db3b209:         mcf.init();
1:db3b209: 
1:dac41bf:         cm = new ConnectionManagerFactory();
1:db3b209:         cm.setManagedConnectionFactory(mcf.getConnectionFactory());
1:db3b209:         cm.setTransactionManager(transactionManager);
1:db3b209:         cm.setAllConnectionsEqual(getBool("aries.xa.allConnectionsEquals", true));
1:db3b209:         cm.setConnectionMaxIdleMinutes(getInt("aries.xa.connectionMadIdleMinutes", 15));
1:db3b209:         cm.setConnectionMaxWaitMilliseconds(getInt("aries.xa.connectionMaxWaitMilliseconds", 5000));
1:db3b209:         cm.setPartitionStrategy(getString("aries.xa.partitionStrategy", null));
1:db3b209:         cm.setPooling(getBool("aries.xa.pooling", true));
1:db3b209:         cm.setPoolMaxSize(getInt("aries.xa.poolMaxSize", 10));
1:db3b209:         cm.setPoolMinSize(getInt("aries.xa.poolMinSize", 0));
1:48ad380:         cm.setValidateOnMatch(getBool("aries.xa.validateOnMatch", true));
1:48ad380:         cm.setBackgroundValidation(getBool("aries.xa.backgroundValidation", false));
1:48ad380:         cm.setBackgroundValidationMilliseconds(getInt("aries.xa.backgroundValidationMilliseconds", 600000));
1:dac41bf:         cm.setTransaction(getString("aries.xa.transaction", isXaDataSource ? "xa" : "local"));
1:8a65caa:         cm.setName(getResourceName());
1:db3b209:         cm.init();
1:db3b209: 
1:db3b209:         BundleContext context = reference.getBundle().getBundleContext();
1:db3b209:         DataSource ds = (DataSource) mcf.getConnectionFactory().createConnectionFactory(cm.getConnectionManager());
1:dac41bf:         registration = context.registerService(DataSource.class, ds, props);
1:db3b209: 
1:dac41bf:         if (isXaDataSource) {
1:dac41bf:             Recovery.recover(getResourceName(), (XADataSource) dataSource, transactionManager);
1:dac41bf:         }
1:dac41bf:     }
1:dac41bf: 
1:dac41bf:     public void unregister() throws Exception {
1:dac41bf:         if (registration != null) {
1:dac41bf:             registration.unregister();
1:dac41bf:             registration = null;
1:dac41bf:         }
1:dac41bf:         if (cm != null) {
1:dac41bf:             cm.destroy();
1:dac41bf:         }
1:db3b209:     }
1:db3b209: 
1:db3b209: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:8047ebe
/////////////////////////////////////////////////////////////////////////
1: 
1: @SuppressWarnings({"rawtypes", "unchecked"})
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:869475c
/////////////////////////////////////////////////////////////////////////
1:         boolean isXaDataSource = (dataSource instanceof XADataSource);
1: 
1:         if (isXaDataSource) {
1:             props.put("aries.xa.aware", "true");
1:         }
commit:dac41bf
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.CommonDataSource;
/////////////////////////////////////////////////////////////////////////
1:     private final CommonDataSource dataSource;
1:     private ServiceRegistration<DataSource> registration;
1:     private ConnectionManagerFactory cm;
1: 
/////////////////////////////////////////////////////////////////////////
1:         this.dataSource = (CommonDataSource) reference.getBundle().getBundleContext().getService(reference);
1:     public CommonDataSource getDataSource() {
/////////////////////////////////////////////////////////////////////////
1:     public void register() throws Exception {
1:         props.put("aries.managed", "true");
0:         boolean isXaDataSource = (dataSource instanceof XADataSource);
1: 
1:         AbstractMCFFactory mcf = isXaDataSource ? new XADataSourceMCFFactory() : new DataSourceMCFFactory();
1:         cm = new ConnectionManagerFactory();
/////////////////////////////////////////////////////////////////////////
1:         cm.setTransaction(getString("aries.xa.transaction", isXaDataSource ? "xa" : "local"));
1:         registration = context.registerService(DataSource.class, ds, props);
1:         if (isXaDataSource) {
1:             Recovery.recover(getResourceName(), (XADataSource) dataSource, transactionManager);
1:         }
1:     }
1: 
1:     public void unregister() throws Exception {
1:         if (registration != null) {
1:             registration.unregister();
1:             registration = null;
1:         }
1:         if (cm != null) {
1:             cm.destroy();
1:         }
commit:8a65caa
/////////////////////////////////////////////////////////////////////////
1:         cm.setName(getResourceName());
commit:48ad380
/////////////////////////////////////////////////////////////////////////
1:         cm.setValidateOnMatch(getBool("aries.xa.validateOnMatch", true));
1:         cm.setBackgroundValidation(getBool("aries.xa.backgroundValidation", false));
1:         cm.setBackgroundValidationMilliseconds(getInt("aries.xa.backgroundValidationMilliseconds", 600000));
commit:db3b209
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.jdbc.internal;
1: 
1: import org.apache.aries.transaction.AriesTransactionManager;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: 
1: import javax.sql.DataSource;
1: import javax.sql.XADataSource;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
1: public class ManagedDataSourceFactory {
1: 
1:     private final ServiceReference reference;
1:     private final AriesTransactionManager transactionManager;
0:     private final XADataSource dataSource;
1:     private final Map<String, Object> properties;
1: 
1:     public ManagedDataSourceFactory(ServiceReference reference,
1:                                     AriesTransactionManager transactionManager) {
1:         this.reference = reference;
1:         this.transactionManager = transactionManager;
1:         this.properties = new Hashtable<String, Object>();
1:         for (String key : reference.getPropertyKeys()) {
1:             this.properties.put(key, reference.getProperty(key));
1:         }
0:         this.dataSource = (XADataSource) reference.getBundle().getBundleContext().getService(reference);
1:     }
1: 
1:     public AriesTransactionManager getTransactionManager() {
1:         return transactionManager;
1:     }
1: 
0:     public XADataSource getDataSource() {
1:         return dataSource;
1:     }
1: 
1:     public String getResourceName() {
1:         return getString("aries.xa.name", null);
1:     }
1: 
1:     private String getString(String name, String def) {
1:         Object v = properties.get(name);
1:         if (v instanceof String) {
1:             return (String) v;
1:         } else {
1:             return def;
1:         }
1:     }
1: 
1:     private int getInt(String name, int def) {
1:         Object v = properties.get(name);
1:         if (v instanceof Integer) {
1:             return (Integer) v;
1:         } else if (v instanceof String) {
1:             return Integer.parseInt((String) v);
1:         } else {
1:             return def;
1:         }
1:     }
1: 
1:     private boolean getBool(String name, boolean def) {
1:         Object v = properties.get(name);
1:         if (v instanceof Boolean) {
1:             return (Boolean) v;
1:         } else if (v instanceof String) {
1:             return Boolean.parseBoolean((String) v);
1:         } else {
1:             return def;
1:         }
1:     }
1: 
0:     public ServiceRegistration register() throws Exception {
1:         Hashtable<String, Object> props = new Hashtable<String, Object>(this.properties);
0:         props.put("aries.xa.aware", "true");
1:         props.put(Constants.SERVICE_RANKING, getInt(Constants.SERVICE_RANKING, 0) + 1000);
1: 
0:         XADataSourceMCFFactory mcf = new XADataSourceMCFFactory();
1:         mcf.setDataSource(dataSource);
1:         mcf.setExceptionSorterAsString(getString("aries.xa.exceptionSorter", "all"));
1:         mcf.setUserName(getString("aries.xa.username", null));
1:         mcf.setPassword(getString("aries.xa.password", null));
1:         mcf.init();
1: 
0:         ConnectionManagerFactory cm = new ConnectionManagerFactory();
1:         cm.setManagedConnectionFactory(mcf.getConnectionFactory());
1:         cm.setTransactionManager(transactionManager);
1:         cm.setAllConnectionsEqual(getBool("aries.xa.allConnectionsEquals", true));
1:         cm.setConnectionMaxIdleMinutes(getInt("aries.xa.connectionMadIdleMinutes", 15));
1:         cm.setConnectionMaxWaitMilliseconds(getInt("aries.xa.connectionMaxWaitMilliseconds", 5000));
1:         cm.setPartitionStrategy(getString("aries.xa.partitionStrategy", null));
1:         cm.setPooling(getBool("aries.xa.pooling", true));
1:         cm.setPoolMaxSize(getInt("aries.xa.poolMaxSize", 10));
1:         cm.setPoolMinSize(getInt("aries.xa.poolMinSize", 0));
0:         cm.setTransaction(getString("aries.xa.transaction", "xa"));
1:         cm.init();
1: 
1:         BundleContext context = reference.getBundle().getBundleContext();
1:         DataSource ds = (DataSource) mcf.getConnectionFactory().createConnectionFactory(cm.getConnectionManager());
0:         ServiceRegistration registration = context.registerService(DataSource.class.getName(), ds, props);
0:         Recovery.recover(getResourceName(), dataSource, transactionManager);
0:         return registration;
1: 
1:     }
1: 
1: }
============================================================================