1:a5079e5: /*
1:a5079e5:  * Licensed to the Apache Software Foundation (ASF) under one
1:a5079e5:  * or more contributor license agreements.  See the NOTICE file
1:a5079e5:  * distributed with this work for additional information
1:a5079e5:  * regarding copyright ownership.  The ASF licenses this file
1:a5079e5:  * to you under the Apache License, Version 2.0 (the
1:a5079e5:  * "License"); you may not use this file except in compliance
1:a5079e5:  * with the License.  You may obtain a copy of the License at
1:a5079e5:  *
1:a5079e5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a5079e5:  *
1:a5079e5:  * Unless required by applicable law or agreed to in writing,
1:a5079e5:  * software distributed under the License is distributed on an
1:a5079e5:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:a5079e5:  * KIND, either express or implied.  See the License for the
1:a5079e5:  * specific language governing permissions and limitations
1:a5079e5:  * under the License.
1:a5079e5:  */
1:a5079e5: package org.apache.aries.application.modelling;
1:a5079e5: 
1:a5079e5: import java.util.Collection;
1:a5079e5: /**
1:a5079e5:  * Model a bundle resource.
1:a5079e5:  *
1:a5079e5:  */
1:a5079e5: public interface ModelledResource extends DeploymentMFElement
1:a5079e5: {
1:a5079e5:   
1:a5079e5:   /**
1:a5079e5:    * The resource's symbolic name
1:a5079e5:    * @return The resource symbolic name
1:a5079e5:    */
1:a5079e5:   String getSymbolicName();
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * The resource version
1:a5079e5:    * @return The resource version
1:a5079e5:    */
1:a5079e5:   String getVersion();
1:a5079e5: 
1:a5079e5:   /** Returns a String which can be turned into a URL to the bundle binary 
1:a5079e5:    * @return the location of the bundle
1:a5079e5:    */
1:a5079e5:   public String getLocation();
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * Import-Package header modelled to be a collection of the imported packages objects.
1:a5079e5:    * @return a collection of the imported packages.
1:a5079e5:    */
1:a5079e5:   Collection<? extends ImportedPackage> getImportedPackages();  
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * Import-Service header modelled to be a collection of imported service objects. 
1:a5079e5:    * This contains the blueprint service referenced by this resource.
1:a5079e5:    * @return a collection of the imported services.
1:a5079e5:    */
1:a5079e5:   Collection<? extends ImportedService> getImportedServices();
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * Export-Package header modelled to be a collection of exported package objects.
1:a5079e5:    * @return a collection of exported package objects.
1:a5079e5:    */
1:a5079e5:   Collection<? extends ExportedPackage> getExportedPackages();
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * Export-Service header modelled to be a collection of exported service objects.
1:a5079e5:    * This includes the blueprint services supported by this resource.
1:a5079e5:    * @return a collection of exported service objects.
1:a5079e5:    */
1:a5079e5:   Collection<? extends ExportedService> getExportedServices();
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * Return the bundle that represents the resource object.
1:7ceb4ac:    * @return the exported bundle
1:a5079e5:    */
1:a5079e5:   ExportedBundle getExportedBundle();
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * The resource type, mainly BUNDLE or other special bundle.
1:a5079e5:    * @return The resource type.
1:a5079e5:    */
1:a5079e5:   ResourceType getType();
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * The required bundles modelled as a collection of ImportedBundle objects.
1:a5079e5:    * @return a collection of ImportedBundle objects.
1:a5079e5:    */
1:a5079e5:   Collection<? extends ImportedBundle> getRequiredBundles();
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * Whether the resource is fragment.
1:7ceb4ac:    * @return true if it is a fragment.
1:a5079e5:    */
1:a5079e5:   boolean isFragment();
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * The fragment host.
1:a5079e5:    * @return The fragment host.
1:a5079e5:    */
1:a5079e5:   public ImportedBundle getFragmentHost();
1:a5079e5: 
1:a5079e5: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:7ceb4ac
/////////////////////////////////////////////////////////////////////////
1:    * @return the exported bundle
/////////////////////////////////////////////////////////////////////////
1:    * @return true if it is a fragment.
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:a5079e5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.modelling;
1: 
1: import java.util.Collection;
1: /**
1:  * Model a bundle resource.
1:  *
1:  */
1: public interface ModelledResource extends DeploymentMFElement
1: {
1:   
1:   /**
1:    * The resource's symbolic name
1:    * @return The resource symbolic name
1:    */
1:   String getSymbolicName();
1: 
1:   /**
1:    * The resource version
1:    * @return The resource version
1:    */
1:   String getVersion();
1: 
1:   /** Returns a String which can be turned into a URL to the bundle binary 
1:    * @return the location of the bundle
1:    */
1:   public String getLocation();
1: 
1:   /**
1:    * Import-Package header modelled to be a collection of the imported packages objects.
1:    * @return a collection of the imported packages.
1:    */
1:   Collection<? extends ImportedPackage> getImportedPackages();  
1: 
1:   /**
1:    * Import-Service header modelled to be a collection of imported service objects. 
1:    * This contains the blueprint service referenced by this resource.
1:    * @return a collection of the imported services.
1:    */
1:   Collection<? extends ImportedService> getImportedServices();
1: 
1:   /**
1:    * Export-Package header modelled to be a collection of exported package objects.
1:    * @return a collection of exported package objects.
1:    */
1:   Collection<? extends ExportedPackage> getExportedPackages();
1: 
1:   /**
1:    * Export-Service header modelled to be a collection of exported service objects.
1:    * This includes the blueprint services supported by this resource.
1:    * @return a collection of exported service objects.
1:    */
1:   Collection<? extends ExportedService> getExportedServices();
1: 
1:   /**
1:    * Return the bundle that represents the resource object.
0:    * @return
1:    */
1:   ExportedBundle getExportedBundle();
1: 
1:   /**
1:    * The resource type, mainly BUNDLE or other special bundle.
1:    * @return The resource type.
1:    */
1:   ResourceType getType();
1: 
1:   /**
1:    * The required bundles modelled as a collection of ImportedBundle objects.
1:    * @return a collection of ImportedBundle objects.
1:    */
1:   Collection<? extends ImportedBundle> getRequiredBundles();
1: 
1:   /**
1:    * Whether the resource is fragment.
0:    * @return
1:    */
1:   boolean isFragment();
1: 
1:   /**
1:    * The fragment host.
1:    * @return The fragment host.
1:    */
1:   public ImportedBundle getFragmentHost();
1: 
1: }
============================================================================