1:fb3443d: /*
1:fb3443d:  * Licensed to the Apache Software Foundation (ASF) under one
1:fb3443d:  * or more contributor license agreements.  See the NOTICE file
1:fb3443d:  * distributed with this work for additional information
1:fb3443d:  * regarding copyright ownership.  The ASF licenses this file
1:fb3443d:  * to you under the Apache License, Version 2.0 (the
1:fb3443d:  * "License"); you may not use this file except in compliance
1:fb3443d:  * with the License.  You may obtain a copy of the License at
1:fb3443d:  *
1:fb3443d:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fb3443d:  *
1:fb3443d:  * Unless required by applicable law or agreed to in writing,
1:fb3443d:  * software distributed under the License is distributed on an
1:fb3443d:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fb3443d:  * KIND, either express or implied.  See the License for the
1:fb3443d:  * specific language governing permissions and limitations
1:fb3443d:  * under the License.
1:fb3443d:  */
1:fb3443d: package org.apache.aries.proxy.itests;
1:b8839d6: 
1:52dc3b5: import static org.junit.Assert.assertEquals;
1:fb3443d: import static org.junit.Assert.assertTrue;
1:b8839d6: 
1:fb3443d: import java.util.ArrayList;
1:fb3443d: import java.util.Collection;
1:fb3443d: import java.util.concurrent.Callable;
1:b8839d6: 
1:52dc3b5: import org.apache.aries.proxy.FinalModifierException;
1:fb3443d: import org.apache.aries.proxy.UnableToProxyException;
1:fb3443d: import org.junit.Test;
1:fb3443d: import org.osgi.framework.Bundle;
1:52dc3b5: 
1:ff49259: public abstract class AbstractBasicProxyTest extends AbstractProxyTest
5:fb3443d: {
1:52dc3b5:   /**
1:52dc3b5:    * This test does two things. First of all it checks that we throw a FinalModifierException if we
1:52dc3b5:    * try to proxy a final class. It also validates that the message and toString in the exception
1:52dc3b5:    * works as expected.
1:52dc3b5:    */
1:52dc3b5:   @Test
1:52dc3b5:   public void checkProxyFinalClass() throws UnableToProxyException
1:52dc3b5:   {
1:ff49259:     Bundle b = bundleContext.getBundle();
1:52dc3b5:     Callable<Object> c = new TestCallable();
1:52dc3b5:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:52dc3b5:     classes.add(TestCallable.class);
1:52dc3b5:     try {
1:96d4e06:       mgr.createDelegatingProxy(b, classes, c, null);
1:52dc3b5:     } catch (FinalModifierException e) {
1:52dc3b5:       String msg = e.getMessage();
1:52dc3b5:       assertEquals("The message didn't look right", "The class " + TestCallable.class.getName() + " is final.", msg);
1:52dc3b5:       assertTrue("The message didn't appear in the toString", e.toString().endsWith(msg));
1:52dc3b5:     }
1:52dc3b5:   }
1:730e256: 
1:52dc3b5:   /**
1:2c49003:    * This method checks that we correctly proxy an interface with default methods on java 8
1:2c49003:    */
1:2c49003:   @Test
1:2c49003:   public void checkProxydefaultMethodInterface() throws UnableToProxyException
1:2c49003:   {
1:2c49003:       Bundle b = bundleContext.getBundle();
1:2c49003:       Callable<Object> c = new TestCallable();
1:2c49003:       Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:2c49003:       // proxy an interface with a default methods (on Java 8).
1:2c49003:       classes.add(java.lang.CharSequence.class);
1:2c49003:       try {
1:2c49003:           mgr.createDelegatingProxy(b, classes, c, null);
1:2c49003:       } catch (FinalModifierException e) {
1:2c49003:           String msg = e.getMessage();
1:2c49003:           assertEquals("The message didn't look right", "The class " + TestCallable.class.getName() + " is final.", msg);
1:2c49003:           assertTrue("The message didn't appear in the toString", e.toString().endsWith(msg));
1:2c49003:       }
1:2c49003:   }
1:2c49003:   
1:2c49003:   /**
1:52dc3b5:    * This method checks that we correctly fail to proxy a class with final methods.
1:52dc3b5:    * It also does a quick validation on the exception message.
1:52dc3b5:    */
1:52dc3b5:   @Test
1:52dc3b5:   public void checkProxyFinalMethods() throws UnableToProxyException
1:52dc3b5:   {
1:ff49259:     Bundle b = bundleContext.getBundle();
1:52dc3b5:     Callable<Object> c = new TestCallable();
1:52dc3b5:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:52dc3b5:     Runnable r = new Runnable() {
1:52dc3b5:       public final void run() {
1:52dc3b5:       }
1:52dc3b5:     };
1:52dc3b5:     classes.add(r.getClass());
1:52dc3b5:     try {
1:96d4e06:       mgr.createDelegatingProxy(b, classes, c, null);
1:52dc3b5:     } catch (FinalModifierException e) {
1:52dc3b5:       assertTrue("The methods didn't appear in the message", e.getMessage().contains("run"));
1:52dc3b5:     }
1:52dc3b5:   }
10:fb3443d: }
============================================================================
author:Sam Bratton
-------------------------------------------------------------------------------
commit:2c49003
/////////////////////////////////////////////////////////////////////////
1:    * This method checks that we correctly proxy an interface with default methods on java 8
1:    */
1:   @Test
1:   public void checkProxydefaultMethodInterface() throws UnableToProxyException
1:   {
1:       Bundle b = bundleContext.getBundle();
1:       Callable<Object> c = new TestCallable();
1:       Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:       // proxy an interface with a default methods (on Java 8).
1:       classes.add(java.lang.CharSequence.class);
1:       try {
1:           mgr.createDelegatingProxy(b, classes, c, null);
1:       } catch (FinalModifierException e) {
1:           String msg = e.getMessage();
1:           assertEquals("The message didn't look right", "The class " + TestCallable.class.getName() + " is final.", msg);
1:           assertTrue("The message didn't appear in the toString", e.toString().endsWith(msg));
1:       }
1:   }
1:   
1:   /**
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:ff49259
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractBasicProxyTest extends AbstractProxyTest
/////////////////////////////////////////////////////////////////////////
1:     Bundle b = bundleContext.getBundle();
/////////////////////////////////////////////////////////////////////////
1:     Bundle b = bundleContext.getBundle();
author:Holly Cummins
-------------------------------------------------------------------------------
commit:730e256
/////////////////////////////////////////////////////////////////////////
0: public class AbstractBasicProxyTest extends AbstractProxyTest
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
author:Emily Jiang
-------------------------------------------------------------------------------
commit:b8839d6
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
/////////////////////////////////////////////////////////////////////////
0:           mavenBundle("org.ow2.asm", "asm-all"),
0:          /* vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0:           waitForFrameworkStartup(),*/
1:           
1:           
1:           
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
/////////////////////////////////////////////////////////////////////////
0:     ProxyManager mgr = context().getService(ProxyManager.class);
/////////////////////////////////////////////////////////////////////////
0:     ProxyManager mgr = context().getService(ProxyManager.class);
/////////////////////////////////////////////////////////////////////////
0:       return testOptions(
0:           paxLogging("DEBUG"),
/////////////////////////////////////////////////////////////////////////
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class BasicProxyTest extends AbstractProxyTest
/////////////////////////////////////////////////////////////////////////
1:       mgr.createDelegatingProxy(b, classes, c, null);
/////////////////////////////////////////////////////////////////////////
1:       mgr.createDelegatingProxy(b, classes, c, null);
/////////////////////////////////////////////////////////////////////////
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:52dc3b5
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.FinalModifierException;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:   
1:   /**
1:    * This test does two things. First of all it checks that we throw a FinalModifierException if we
1:    * try to proxy a final class. It also validates that the message and toString in the exception
1:    * works as expected.
1:    */
1:   @Test
1:   public void checkProxyFinalClass() throws UnableToProxyException
1:   {
0:     ProxyManager mgr = getService(ProxyManager.class);
0:     Bundle b = FrameworkUtil.getBundle(this.getClass());
1:     Callable<Object> c = new TestCallable();
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:     classes.add(TestCallable.class);
1:     try {
0:       mgr.createProxy(b, classes, c);
1:     } catch (FinalModifierException e) {
1:       String msg = e.getMessage();
1:       assertEquals("The message didn't look right", "The class " + TestCallable.class.getName() + " is final.", msg);
1:       assertTrue("The message didn't appear in the toString", e.toString().endsWith(msg));
1:     }
1:   }
0:   
1:   /**
1:    * This method checks that we correctly fail to proxy a class with final methods.
1:    * It also does a quick validation on the exception message.
1:    */
1:   @Test
1:   public void checkProxyFinalMethods() throws UnableToProxyException
1:   {
0:     ProxyManager mgr = getService(ProxyManager.class);
0:     Bundle b = FrameworkUtil.getBundle(this.getClass());
1:     Callable<Object> c = new TestCallable();
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:     Runnable r = new Runnable() {
1:       public final void run() {
1:       }
1:     };
1:     classes.add(r.getClass());
1:     try {
0:       mgr.createProxy(b, classes, c);
1:     } catch (FinalModifierException e) {
1:       assertTrue("The methods didn't appear in the message", e.getMessage().contains("run"));
1:     }
1:   }
0:   
commit:fb3443d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.itests;
0: 
0: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.CoreOptions.wrappedBundle;
0: import static org.ops4j.pax.exam.OptionUtils.combine;
0: 
1: import java.util.ArrayList;
1: import java.util.Collection;
0: import java.util.List;
1: import java.util.concurrent.Callable;
0: 
0: import org.apache.aries.proxy.ProxyManager;
1: import org.apache.aries.proxy.UnableToProxyException;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.CoreOptions;
0: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.FrameworkUtil;
0: import org.osgi.framework.ServiceReference;
0: 
0: @RunWith(JUnit4TestRunner.class)
0: public class BasicProxyTest 
1: {
0:   private final class TestCallable implements Callable<Object> {
0:     private List<?> list = new ArrayList<Object>();
0: 
0:     public Object call() throws Exception {
0:       return list;
1:     }
1:   }
0:   @SuppressWarnings("unchecked")
0:   @Test
0:   public void testEquals() throws Exception
1:   {
0:     ProxyManager mgr = getService(ProxyManager.class);
0:     Bundle b = FrameworkUtil.getBundle(this.getClass());
0:     
0:     Callable<Object> c = new TestCallable();
0:     Callable<Object> c2 = new TestCallable();
0:     ((List<Object>)c2.call()).add("Some test data");
0:     
0:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
0:     classes.add(List.class);
0:     Object proxy = mgr.createProxy(b, classes, c);
0:     Object otherProxy = mgr.createProxy(b, classes, c);
0:     Object totallyOtherProxy = mgr.createProxy(b, classes, c2);
0:     assertTrue("The object is not equal to itself", proxy.equals(proxy));
0:     assertTrue("The object is not equal to another proxy of itself", proxy.equals(otherProxy));
0:     assertFalse("The object is equal to proxy to another object", proxy.equals(totallyOtherProxy));
0:     
1:   }
0:   private <T> T getService(Class<T> clazz) 
1:   {
0:     BundleContext ctx = FrameworkUtil.getBundle(this.getClass()).getBundleContext();
0:     ServiceReference ref = ctx.getServiceReference(ProxyManager.class.getName());
0:     if (ref != null) {
0:       return clazz.cast(ctx.getService(ref));
1:     }
0:     return null;
1:   }
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:       Option[] options = options(
0:           // Log
0:           mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:           mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:           // Felix Config Admin
0:           mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:           // Felix mvn url handler
0:           mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
0: 
0: 
0:           // this is how you set the default log level when using pax logging (logProfile)
0:           systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
0: 
0:           // Bundles
0:           mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:           mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:           mavenBundle("asm", "asm-all"),
0:           // don't install the blueprint sample here as it will be installed onto the same framework as the blueprint core bundle
0:           // mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart(),
0:           mavenBundle("org.osgi", "org.osgi.compendium"),
0: //          org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0: 
0:           equinox().version("3.5.0")
0:       );
0: 
0:       options = updateOptions(options);
0:       return options;
1:   }
0:   
0:   public static MavenArtifactProvisionOption mavenBundle(String groupId, String artifactId) 
1:   {
0:     return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId).versionAsInProject();
1:   }
0:   protected static Option[] updateOptions(Option[] options) 
1:   {
0:       // We need to add pax-exam-junit here when running with the ibm
0:       // jdk to avoid the following exception during the test run:
0:       // ClassNotFoundException: org.ops4j.pax.exam.junit.Configuration
0:       if ("IBM Corporation".equals(System.getProperty("java.vendor"))) {
0:           Option[] ibmOptions = options(
0:               wrappedBundle(mavenBundle("org.ops4j.pax.exam", "pax-exam-junit"))
0:           );
0:           options = combine(ibmOptions, options);
1:       }
0:   
0:       return options;
1:   }
1: }
============================================================================