1:d251156: /*
1:d251156:  * Licensed to the Apache Software Foundation (ASF) under one
1:d251156:  * or more contributor license agreements.  See the NOTICE file
1:d251156:  * distributed with this work for additional information
1:d251156:  * regarding copyright ownership.  The ASF licenses this file
1:d251156:  * to you under the Apache License, Version 2.0 (the
1:d251156:  * "License"); you may not use this file except in compliance
1:d251156:  * with the License.  You may obtain a copy of the License at
1:d251156:  *
1:d251156:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d251156:  *
1:d251156:  * Unless required by applicable law or agreed to in writing,
1:d251156:  * software distributed under the License is distributed on an
1:d251156:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:d251156:  * KIND, either express or implied.  See the License for the
1:d251156:  * specific language governing permissions and limitations
1:d251156:  * under the License.
1:d251156:  */
1:d251156: package org.apache.aries.blueprint.itests;
1:d251156: 
1:c185a5a: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1:d251156: import static org.junit.Assert.assertNotNull;
1:d251156: import static org.ops4j.pax.exam.CoreOptions.composite;
1:d251156: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:d251156: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:d251156: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1:d251156: import static org.ops4j.pax.exam.CoreOptions.when;
1:d251156: 
1:eab22c1: import java.io.InputStream;
1:bc2c036: import java.util.Hashtable;
1:eab22c1: 
1:d251156: import org.apache.aries.itest.AbstractIntegrationTest;
1:bc2c036: import org.apache.aries.itest.RichBundleContext;
1:d251156: import org.junit.runner.RunWith;
1:bc2c036: import org.ops4j.pax.exam.CoreOptions;
1:d251156: import org.ops4j.pax.exam.Option;
1:d251156: import org.ops4j.pax.exam.junit.PaxExam;
1:bc2c036: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1:d251156: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:d251156: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:d251156: import org.osgi.framework.Bundle;
1:bc2c036: import org.osgi.framework.BundleContext;
1:d251156: import org.osgi.framework.BundleException;
1:d251156: import org.osgi.service.blueprint.container.BlueprintContainer;
1:bc2c036: import org.osgi.service.cm.Configuration;
1:bc2c036: import org.osgi.service.cm.ConfigurationAdmin;
1:d251156: 
1:d251156: /**
1:d251156:  * Base class for Pax Exam 1.2.x based unit tests
1:d251156:  * 
1:d251156:  * Contains the injection point and various utilities used in most tests
1:d251156:  */
1:d251156: @RunWith(PaxExam.class)
1:d251156: @ExamReactorStrategy(PerClass.class)
1:d251156: public abstract class AbstractBlueprintIntegrationTest extends AbstractIntegrationTest {
1:d251156:     public static final long DEFAULT_TIMEOUT = 15000;
1:d251156: 
1:d251156:     protected BlueprintContainer startBundleBlueprint(String symbolicName) throws BundleException {
1:d251156:         Bundle b = context().getBundleByName(symbolicName);
1:d251156:         assertNotNull("Bundle " + symbolicName + " not found", b);
1:d251156:         b.start();
1:d251156:         BlueprintContainer beanContainer = Helper.getBlueprintContainerForBundle(context(), symbolicName);
1:d251156:         assertNotNull(beanContainer);
1:d251156:         return beanContainer;
1:d251156:     }
1:d251156:     
1:d251156:     public Option baseOptions() {
1:d251156:         String localRepo = System.getProperty("maven.repo.local");
1:d251156:         if (localRepo == null) {
1:d251156:             localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:d251156:         }
1:d251156:         return composite(
1:d251156:                 junitBundles(),
1:01524e7:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1:07887b0:                 when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:c185a5a:                 mvnBundle("org.ops4j.pax.logging", "pax-logging-api"),
1:c185a5a:                 mvnBundle("org.ops4j.pax.logging", "pax-logging-service")
1:d251156:          );
1:d251156:     }
1:eab22c1:     
1:eab22c1:     public InputStream getResource(String path) {
1:eab22c1:     	InputStream is = this.getClass().getClassLoader().getResourceAsStream(path);
1:eab22c1:     	if (is == null) {
1:eab22c1:     		throw new IllegalArgumentException("Resource not found " + path);
1:eab22c1:     	}
1:eab22c1:     	return is;
1:eab22c1:     }
1:bc2c036: 
1:bc2c036: 	protected void applyCommonConfiguration(BundleContext ctx) throws Exception {
1:bc2c036: 	    ConfigurationAdmin ca = (new RichBundleContext(ctx)).getService(ConfigurationAdmin.class);        
1:bc2c036: 	    Configuration cf = ca.getConfiguration("blueprint-sample-placeholder", null);
1:bc2c036: 	    Hashtable<String, String> props = new Hashtable<String, String>();
1:bc2c036: 	    props.put("key.b", "10");
1:bc2c036: 	    cf.update(props);
1:bc2c036: 	}
1:bc2c036: 
1:bc2c036: 	protected Bundle getSampleBundle() {
1:bc2c036: 		Bundle bundle = context().getBundleByName("org.apache.aries.blueprint.sample");
1:bc2c036: 		assertNotNull(bundle);
1:bc2c036: 		return bundle;
1:bc2c036: 	}
1:bc2c036: 
1:bc2c036: 	protected MavenArtifactProvisionOption sampleBundleOption() {
1:d362b83: 		return CoreOptions.mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").versionAsInProject();
1:bc2c036: 	}
1:bc2c036: 
1:bc2c036: 	protected void startBlueprintBundles() throws BundleException,
1:bc2c036: 			InterruptedException {
1:bc2c036: 			    context().getBundleByName("org.apache.aries.blueprint.core").start();
1:bc2c036: 			    context().getBundleByName("org.apache.aries.blueprint.cm").start();
1:bc2c036: 			    Thread.sleep(2000);
1:bc2c036: 			}
1:d251156: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:01524e7
/////////////////////////////////////////////////////////////////////////
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
commit:bc2c036
/////////////////////////////////////////////////////////////////////////
1: import java.util.Hashtable;
1: import org.apache.aries.itest.RichBundleContext;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
/////////////////////////////////////////////////////////////////////////
1: 
1: 	protected void applyCommonConfiguration(BundleContext ctx) throws Exception {
1: 	    ConfigurationAdmin ca = (new RichBundleContext(ctx)).getService(ConfigurationAdmin.class);        
1: 	    Configuration cf = ca.getConfiguration("blueprint-sample-placeholder", null);
1: 	    Hashtable<String, String> props = new Hashtable<String, String>();
1: 	    props.put("key.b", "10");
1: 	    cf.update(props);
1: 	}
1: 
1: 	protected Bundle getSampleBundle() {
1: 		Bundle bundle = context().getBundleByName("org.apache.aries.blueprint.sample");
1: 		assertNotNull(bundle);
1: 		return bundle;
1: 	}
1: 
1: 	protected MavenArtifactProvisionOption sampleBundleOption() {
0: 		return CoreOptions.mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").version("1.0.1-SNAPSHOT");
1: 	}
1: 
1: 	protected void startBlueprintBundles() throws BundleException,
1: 			InterruptedException {
1: 			    context().getBundleByName("org.apache.aries.blueprint.core").start();
1: 			    context().getBundleByName("org.apache.aries.blueprint.cm").start();
1: 			    Thread.sleep(2000);
1: 			}
commit:eab22c1
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     public InputStream getResource(String path) {
1:     	InputStream is = this.getClass().getClassLoader().getResourceAsStream(path);
1:     	if (is == null) {
1:     		throw new IllegalArgumentException("Resource not found " + path);
1:     	}
1:     	return is;
1:     }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:d362b83
/////////////////////////////////////////////////////////////////////////
1: 		return CoreOptions.mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").versionAsInProject();
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c185a5a
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
/////////////////////////////////////////////////////////////////////////
0:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1:                 mvnBundle("org.ops4j.pax.logging", "pax-logging-api"),
1:                 mvnBundle("org.ops4j.pax.logging", "pax-logging-service")
commit:07887b0
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
/////////////////////////////////////////////////////////////////////////
1:                 when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
0:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1: import static org.ops4j.pax.exam.CoreOptions.when;
1: 
1: import org.apache.aries.itest.AbstractIntegrationTest;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: 
1: /**
1:  * Base class for Pax Exam 1.2.x based unit tests
1:  * 
1:  * Contains the injection point and various utilities used in most tests
1:  */
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: public abstract class AbstractBlueprintIntegrationTest extends AbstractIntegrationTest {
1:     public static final long DEFAULT_TIMEOUT = 15000;
1: 
1:     protected BlueprintContainer startBundleBlueprint(String symbolicName) throws BundleException {
1:         Bundle b = context().getBundleByName(symbolicName);
1:         assertNotNull("Bundle " + symbolicName + " not found", b);
1:         b.start();
1:         BlueprintContainer beanContainer = Helper.getBlueprintContainerForBundle(context(), symbolicName);
1:         assertNotNull(beanContainer);
1:         return beanContainer;
1:     }
1:     
1:     public Option baseOptions() {
1:         String localRepo = System.getProperty("maven.repo.local");
1:         if (localRepo == null) {
1:             localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:         }
1:         return composite(
1:                 junitBundles(),
0:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
0:                 when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:          );
1:     }
1: }
============================================================================