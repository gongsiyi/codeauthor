1:65e2deb: /*
1:65e2deb:  * Licensed to the Apache Software Foundation (ASF) under one
1:65e2deb:  * or more contributor license agreements.  See the NOTICE file
1:65e2deb:  * distributed with this work for additional information
1:65e2deb:  * regarding copyright ownership.  The ASF licenses this file
1:65e2deb:  * to you under the Apache License, Version 2.0 (the
1:65e2deb:  * "License"); you may not use this file except in compliance
1:65e2deb:  * with the License.  You may obtain a copy of the License at
1:65e2deb:  *
1:65e2deb:  *   http://www.apache.org/licenses/LICENSE-2.0
1:65e2deb:  *
1:65e2deb:  * Unless required by applicable law or agreed to in writing,
1:65e2deb:  * software distributed under the License is distributed on an
1:65e2deb:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:65e2deb:  * KIND, either express or implied.  See the License for the
1:65e2deb:  * specific language governing permissions and limitations
1:65e2deb:  * under the License.
1:65e2deb:  */
1:65e2deb: 
1:be6ac25: package org.apache.aries.application.deployment.management.impl;
1:65e2deb: 
1:65e2deb: import java.text.MessageFormat;
1:65e2deb: import java.util.ArrayList;
1:65e2deb: import java.util.List;
1:65e2deb: import java.util.ResourceBundle;
1:65e2deb: 
1:65e2deb: public class MessageUtil
1:65e2deb: {
1:65e2deb:   /** The resource bundle for blueprint messages */
1:65e2deb:   private final static ResourceBundle messages = ResourceBundle.getBundle("org.apache.aries.application.deployment.management.messages.DeploymentManagementMessages");
1:65e2deb:   private static class Message {
1:65e2deb:     public String msgKey;
1:65e2deb:     public Object[] inserts;
1:65e2deb:     public Exception cause;
1:65e2deb:     
1:65e2deb:     public Message(String msgKey, Exception cause, Object[] inserts) {
1:65e2deb:       this.msgKey = msgKey;
1:65e2deb:       this.cause = cause;
1:65e2deb:       this.inserts = inserts;
1:65e2deb:     }
1:65e2deb:   }
1:65e2deb:   
1:65e2deb:   private List<Message> errors = new ArrayList<Message>();
1:65e2deb:   private List<Message> warnings = new ArrayList<Message>();
1:65e2deb:   private final String fileName;
1:65e2deb:   
1:65e2deb:   public MessageUtil(String fileName) {
1:65e2deb:     this.fileName = fileName;
1:65e2deb:   }
1:65e2deb:   
1:65e2deb:   public String getFileName() {
1:65e2deb:     return fileName;
1:65e2deb:   }
1:65e2deb:   
1:65e2deb:   public void processMessages()
1:65e2deb:   {
1:65e2deb:     
1:65e2deb:       for (Message m : errors) {
1:65e2deb:         //Tr.error(tc, m.msgKey, m.inserts);
1:65e2deb:         // use logger
1:65e2deb:       }
1:65e2deb:     
1:65e2deb: 
1:65e2deb:     
1:65e2deb:       for (Message m : warnings) {
1:65e2deb:         //Tr.warning(tc, m.msgKey, m.inserts);
1:65e2deb:         // use logger
1:65e2deb:       }        
1:65e2deb:           
1:65e2deb:   }
1:65e2deb:   
1:65e2deb:   public List<String> getErrors()
1:65e2deb:   {
1:65e2deb:     List<String> result = new ArrayList<String>(warnings.size());
1:65e2deb:     for (Message m : warnings) {
1:65e2deb:       result.add(MessageFormat.format(messages.getString(m.msgKey), m.inserts));
1:65e2deb:     }
1:65e2deb:     
1:65e2deb:     return result;    
1:65e2deb:   }
1:65e2deb:   
1:65e2deb:   public List<String> getWarnings()
1:65e2deb:   {
1:65e2deb:     List<String> result = new ArrayList<String>(warnings.size());
1:65e2deb:     for (Message m : warnings) {
1:65e2deb:       result.add(MessageFormat.format(messages.getString(m.msgKey), m.inserts));
1:65e2deb:     }
1:65e2deb:     
1:65e2deb:     return result;
1:65e2deb:   }
1:65e2deb:   
1:65e2deb:   
1:65e2deb:   public void clear() 
1:65e2deb:   {
1:65e2deb:     errors.clear();
1:65e2deb:     warnings.clear();
1:65e2deb:   }
1:65e2deb:   
1:65e2deb:   public boolean hasErrors() 
1:65e2deb:   {
1:65e2deb:     return !!!errors.isEmpty();
1:65e2deb:   }
1:65e2deb:   
1:65e2deb:   public void error(String msgKey, Object ... inserts) 
1:65e2deb:   {
1:65e2deb:     errors.add(new Message(msgKey, null, inserts));
1:65e2deb:   }
1:65e2deb:   
1:65e2deb:   public void error(String msgKey, Exception e, Object ... inserts)
1:65e2deb:   {
1:65e2deb:     errors.add(new Message(msgKey, e, inserts));
1:65e2deb:   }
1:65e2deb:   
1:65e2deb:   public void warning(String msgKey, Object ... inserts)
1:65e2deb:   {
1:65e2deb:     warnings.add(new Message(msgKey, null, inserts));
1:65e2deb:   }
1:65e2deb:   
1:65e2deb:   public void warning(String msgKey, Exception e, Object ... inserts)
1:65e2deb:   {
1:65e2deb:     warnings.add(new Message(msgKey, e, inserts));
1:65e2deb:   }
1:65e2deb:   /**
1:65e2deb:    * Resolve a message from the bundle, including any necessary formatting.
1:65e2deb:    * 
1:65e2deb:    * @param key     the message key.
1:65e2deb:    * @param inserts any required message inserts.
1:65e2deb:    * @return        the message translated into the server local.
1:65e2deb:    */
1:65e2deb:   public static final String getMessage(String key, Object ... inserts)
1:65e2deb:   {
1:65e2deb:     String msg = messages.getString(key);
1:65e2deb:     
1:65e2deb:     if (inserts.length > 0)
1:65e2deb:       msg = MessageFormat.format(msg, inserts);
1:65e2deb:     
1:65e2deb:     return msg;
1:65e2deb:   }
1:65e2deb: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:be6ac25
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.deployment.management.impl;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:65e2deb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.deployment.management.internal;
1: 
1: import java.text.MessageFormat;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.ResourceBundle;
1: 
1: public class MessageUtil
1: {
1:   /** The resource bundle for blueprint messages */
1:   private final static ResourceBundle messages = ResourceBundle.getBundle("org.apache.aries.application.deployment.management.messages.DeploymentManagementMessages");
1:   private static class Message {
1:     public String msgKey;
1:     public Object[] inserts;
1:     public Exception cause;
1:     
1:     public Message(String msgKey, Exception cause, Object[] inserts) {
1:       this.msgKey = msgKey;
1:       this.cause = cause;
1:       this.inserts = inserts;
1:     }
1:   }
1:   
1:   private List<Message> errors = new ArrayList<Message>();
1:   private List<Message> warnings = new ArrayList<Message>();
1:   private final String fileName;
1:   
1:   public MessageUtil(String fileName) {
1:     this.fileName = fileName;
1:   }
1:   
1:   public String getFileName() {
1:     return fileName;
1:   }
1:   
1:   public void processMessages()
1:   {
1:     
1:       for (Message m : errors) {
1:         //Tr.error(tc, m.msgKey, m.inserts);
1:         // use logger
1:       }
1:     
1: 
1:     
1:       for (Message m : warnings) {
1:         //Tr.warning(tc, m.msgKey, m.inserts);
1:         // use logger
1:       }        
1:           
1:   }
1:   
1:   public List<String> getErrors()
1:   {
1:     List<String> result = new ArrayList<String>(warnings.size());
1:     for (Message m : warnings) {
1:       result.add(MessageFormat.format(messages.getString(m.msgKey), m.inserts));
1:     }
1:     
1:     return result;    
1:   }
1:   
1:   public List<String> getWarnings()
1:   {
1:     List<String> result = new ArrayList<String>(warnings.size());
1:     for (Message m : warnings) {
1:       result.add(MessageFormat.format(messages.getString(m.msgKey), m.inserts));
1:     }
1:     
1:     return result;
1:   }
1:   
1:   
1:   public void clear() 
1:   {
1:     errors.clear();
1:     warnings.clear();
1:   }
1:   
1:   public boolean hasErrors() 
1:   {
1:     return !!!errors.isEmpty();
1:   }
1:   
1:   public void error(String msgKey, Object ... inserts) 
1:   {
1:     errors.add(new Message(msgKey, null, inserts));
1:   }
1:   
1:   public void error(String msgKey, Exception e, Object ... inserts)
1:   {
1:     errors.add(new Message(msgKey, e, inserts));
1:   }
1:   
1:   public void warning(String msgKey, Object ... inserts)
1:   {
1:     warnings.add(new Message(msgKey, null, inserts));
1:   }
1:   
1:   public void warning(String msgKey, Exception e, Object ... inserts)
1:   {
1:     warnings.add(new Message(msgKey, e, inserts));
1:   }
1:   /**
1:    * Resolve a message from the bundle, including any necessary formatting.
1:    * 
1:    * @param key     the message key.
1:    * @param inserts any required message inserts.
1:    * @return        the message translated into the server local.
1:    */
1:   public static final String getMessage(String key, Object ... inserts)
1:   {
1:     String msg = messages.getString(key);
1:     
1:     if (inserts.length > 0)
1:       msg = MessageFormat.format(msg, inserts);
1:     
1:     return msg;
1:   }
1: }
============================================================================