1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:4c0430e: package org.apache.aries.tx.control.jdbc.xa.connection.impl;
1:2299957: 
1:2299957: import java.io.PrintWriter;
1:2299957: import java.sql.Connection;
1:2299957: import java.sql.SQLException;
1:2299957: import java.sql.SQLFeatureNotSupportedException;
1:2299957: import java.util.logging.Logger;
1:2299957: 
1:2299957: import javax.sql.DataSource;
1:2299957: import javax.sql.XADataSource;
1:2299957: 
1:2299957: public class XADataSourceMapper implements DataSource {
1:2299957: 
1:2299957: 	private final XADataSource xaDataSource;
1:2299957: 	
1:2299957: 	public XADataSourceMapper(XADataSource xaDataSource) {
1:2299957: 		super();
1:2299957: 		this.xaDataSource = xaDataSource;
1:2299957: 	}
1:2299957: 
1:2299957: 	@Override
1:2299957: 	public PrintWriter getLogWriter() throws SQLException {
1:2299957: 		return xaDataSource.getLogWriter();
1:2299957: 	}
1:2299957: 
1:2299957: 	@Override
1:2299957: 	public void setLogWriter(PrintWriter out) throws SQLException {
1:2299957: 		xaDataSource.setLogWriter(out);
1:2299957: 	}
1:2299957: 
1:2299957: 	@Override
1:2299957: 	public void setLoginTimeout(int seconds) throws SQLException {
1:2299957: 		xaDataSource.setLoginTimeout(seconds);
1:2299957: 	}
1:2299957: 
1:2299957: 	@Override
1:2299957: 	public int getLoginTimeout() throws SQLException {
1:2299957: 		return xaDataSource.getLoginTimeout();
1:2299957: 	}
1:2299957: 
1:2299957: 	@Override
1:2299957: 	public Logger getParentLogger() throws SQLFeatureNotSupportedException {
1:2299957: 		return xaDataSource.getParentLogger();
1:2299957: 	}
1:2299957: 
1:2299957: 	@SuppressWarnings("unchecked")
1:2299957: 	@Override
1:2299957: 	public <T> T unwrap(Class<T> iface) throws SQLException {
1:2299957: 		if(isWrapperFor(iface)) {
1:2299957: 			return (T) xaDataSource;
1:2299957: 		}
1:2299957: 		throw new SQLException("This datasource is not a wrapper for " + iface);
1:2299957: 	}
1:2299957: 
1:2299957: 	@Override
1:2299957: 	public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:2299957: 		return iface == XADataSource.class || iface.isInstance(xaDataSource);
1:2299957: 	}
1:2299957: 
1:2299957: 	@Override
1:2299957: 	public Connection getConnection() throws SQLException {
1:2299957: 		return new XAConnectionWrapper(xaDataSource.getXAConnection());
1:2299957: 	}
1:2299957: 
1:2299957: 	@Override
1:2299957: 	public Connection getConnection(String username, String password) throws SQLException {
1:2299957: 		return new XAConnectionWrapper(xaDataSource.getXAConnection(username, password));
1:2299957: 	}
1:2299957: 
1:2299957: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:4c0430e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jdbc.xa.connection.impl;
commit:2299957
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.tx.control.jdbc.xa.impl;
1: 
1: import java.io.PrintWriter;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.SQLFeatureNotSupportedException;
1: import java.util.logging.Logger;
1: 
1: import javax.sql.DataSource;
1: import javax.sql.XADataSource;
1: 
1: public class XADataSourceMapper implements DataSource {
1: 
1: 	private final XADataSource xaDataSource;
1: 	
1: 	public XADataSourceMapper(XADataSource xaDataSource) {
1: 		super();
1: 		this.xaDataSource = xaDataSource;
1: 	}
1: 
1: 	@Override
1: 	public PrintWriter getLogWriter() throws SQLException {
1: 		return xaDataSource.getLogWriter();
1: 	}
1: 
1: 	@Override
1: 	public void setLogWriter(PrintWriter out) throws SQLException {
1: 		xaDataSource.setLogWriter(out);
1: 	}
1: 
1: 	@Override
1: 	public void setLoginTimeout(int seconds) throws SQLException {
1: 		xaDataSource.setLoginTimeout(seconds);
1: 	}
1: 
1: 	@Override
1: 	public int getLoginTimeout() throws SQLException {
1: 		return xaDataSource.getLoginTimeout();
1: 	}
1: 
1: 	@Override
1: 	public Logger getParentLogger() throws SQLFeatureNotSupportedException {
1: 		return xaDataSource.getParentLogger();
1: 	}
1: 
1: 	@SuppressWarnings("unchecked")
1: 	@Override
1: 	public <T> T unwrap(Class<T> iface) throws SQLException {
1: 		if(isWrapperFor(iface)) {
1: 			return (T) xaDataSource;
1: 		}
1: 		throw new SQLException("This datasource is not a wrapper for " + iface);
1: 	}
1: 
1: 	@Override
1: 	public boolean isWrapperFor(Class<?> iface) throws SQLException {
1: 		return iface == XADataSource.class || iface.isInstance(xaDataSource);
1: 	}
1: 
1: 	@Override
1: 	public Connection getConnection() throws SQLException {
1: 		return new XAConnectionWrapper(xaDataSource.getXAConnection());
1: 	}
1: 
1: 	@Override
1: 	public Connection getConnection(String username, String password) throws SQLException {
1: 		return new XAConnectionWrapper(xaDataSource.getXAConnection(username, password));
1: 	}
1: 
1: }
============================================================================