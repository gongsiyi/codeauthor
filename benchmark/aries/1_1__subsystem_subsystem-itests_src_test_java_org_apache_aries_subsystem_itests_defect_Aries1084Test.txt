1:f803a4f: /*
1:f803a4f:  * Licensed to the Apache Software Foundation (ASF) under one
1:f803a4f:  * or more contributor license agreements.  See the NOTICE file
1:f803a4f:  * distributed with this work for additional information
1:f803a4f:  * regarding copyright ownership.  The ASF licenses this file
1:f803a4f:  * to you under the Apache License, Version 2.0 (the
1:f803a4f:  * "License"); you may not use this file except in compliance
1:f803a4f:  * with the License.  You may obtain a copy of the License at
1:f803a4f:  *
1:f803a4f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f803a4f:  *
1:f803a4f:  * Unless required by applicable law or agreed to in writing,
1:f803a4f:  * software distributed under the License is distributed on an
1:f803a4f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f803a4f:  * KIND, either express or implied.  See the License for the
1:f803a4f:  * specific language governing permissions and limitations
1:f803a4f:  * under the License.
1:f803a4f:  */
1:f803a4f: package org.apache.aries.subsystem.itests.defect;
1:f803a4f: 
1:f803a4f: import java.io.ByteArrayOutputStream;
1:f803a4f: import java.io.File;
1:f803a4f: import java.io.FileOutputStream;
1:f803a4f: import java.io.IOException;
1:f803a4f: import java.util.HashMap;
1:f803a4f: import java.util.Map;
1:f803a4f: import java.util.jar.Attributes;
1:f803a4f: import java.util.jar.JarOutputStream;
1:f803a4f: import java.util.jar.Manifest;
1:f803a4f: 
1:f803a4f: import org.apache.aries.subsystem.core.archive.DeploymentManifest;
1:f803a4f: import org.apache.aries.subsystem.itests.SubsystemTest;
1:f803a4f: import org.apache.aries.subsystem.itests.util.TestCapability;
1:f803a4f: import org.apache.aries.subsystem.itests.util.TestRepository;
1:f803a4f: import org.apache.aries.subsystem.itests.util.TestRepositoryContent;
1:f803a4f: import org.junit.Before;
1:f803a4f: import org.junit.Test;
1:f803a4f: import org.osgi.framework.Bundle;
1:f803a4f: import org.osgi.framework.Constants;
1:f803a4f: import org.osgi.framework.namespace.IdentityNamespace;
1:f803a4f: import org.osgi.resource.Resource;
1:f803a4f: import org.osgi.service.repository.Repository;
1:f803a4f: import org.osgi.service.subsystem.Subsystem;
1:f803a4f: import org.osgi.service.subsystem.SubsystemConstants;
1:f803a4f: 
1:f803a4f: /*
1:f803a4f:  * https://issues.apache.org/jira/browse/ARIES-1084
1:f803a4f:  * 
1:f803a4f:  * Subsystem : Failure on restart after framework crash
1:f803a4f:  */
1:f803a4f: public class Aries1084Test extends SubsystemTest {
1:f803a4f:     /*
1:f803a4f:      * Subsystem-SymbolicName: feature.a.esa
1:f803a4f:      * Subsystem-Content: bundle.a.jar
1:f803a4f:      * 
1:f803a4f:      * Included in archive:
1:f803a4f:      *      bundle.a.jar
1:f803a4f:      */
1:f803a4f:     private static final String FEATURE_A = "feature.a.esa";
1:f803a4f: 	/*
1:f803a4f: 	 * Bundle-SymbolicName: bundle.a.jar
1:f803a4f: 	 */
1:f803a4f: 	private static final String BUNDLE_A = "bundle.a.jar";
1:f803a4f: 	
1:f803a4f: 	private static boolean createdTestFiles;
1:f803a4f: 	
1:f803a4f: 	@Before
1:f803a4f: 	public void createTestFiles() throws Exception {
1:f803a4f: 		if (createdTestFiles)
1:f803a4f: 			return;
1:f803a4f: 		createBundleA();
1:f803a4f: 		createFeatureA();
1:f803a4f: 		createdTestFiles = true;
1:f803a4f: 	}
1:f803a4f: 	
1:f803a4f: 	private void createBundleA() throws IOException {
1:f803a4f: 		createBundle(name(BUNDLE_A));
1:f803a4f: 	}
1:f803a4f: 	
1:f803a4f: 	private void createFeatureA() throws IOException {
1:f803a4f:         createFeatureAManifest();
1:f803a4f:         createSubsystem(FEATURE_A, BUNDLE_A);
1:f803a4f:     }
1:f803a4f:     
1:f803a4f:     private void createFeatureAManifest() throws IOException {
1:f803a4f:         Map<String, String> attributes = new HashMap<String, String>();
1:f803a4f:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_A);
1:f803a4f:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:f803a4f:         createManifest(FEATURE_A + ".mf", attributes);
1:f803a4f:     }
1:f803a4f:     
1:f803a4f:     @Test
1:f803a4f:     public void testBundleStartsWhenSubsystemLeftInInvalidState() throws Exception {
1:f803a4f:         Subsystem featureA = installSubsystemFromFile(FEATURE_A);
1:f803a4f:         try {
1:f803a4f: 	        startSubsystem(featureA);
1:f803a4f: 	        assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1:f803a4f: 	        Bundle core = getSubsystemCoreBundle();
1:f803a4f: 	        File file = core.getBundleContext().getDataFile(
1:f803a4f: 	        		featureA.getSubsystemId() + "/OSGI-INF/DEPLOYMENT.MF");
1:f803a4f: 	        core.stop();
1:f803a4f: 	        DeploymentManifest manifest = new DeploymentManifest(file);
1:f803a4f: 	        FileOutputStream fos = new FileOutputStream(file);
1:f803a4f: 	        try {
1:f803a4f: 		        new DeploymentManifest.Builder()
1:f803a4f: 			        	.manifest(manifest)
1:f803a4f: 			        	.state(Subsystem.State.ACTIVE)
1:f803a4f: 			        	.build()
1:f803a4f: 			        	.write(fos);
1:f803a4f: 	        }
1:f803a4f: 	        finally {
1:f803a4f: 	        	fos.close();
1:f803a4f: 	        }
1:f803a4f: 	        core.start();
1:f803a4f: 	        featureA = getChild(getRootSubsystem(), FEATURE_A);
1:f803a4f: 	        assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1:f803a4f:         }
1:f803a4f:         finally {
1:f803a4f:             stopAndUninstallSubsystemSilently(featureA);
1:f803a4f:         }
1:f803a4f:     }
1:f803a4f:     
1:f803a4f:     private Repository createTestRepository() throws IOException {
1:f803a4f:         return new TestRepository.Builder()
1:f803a4f:         .resource(createBundleAResource())
1:f803a4f:         .build();
1:f803a4f:     }
1:f803a4f:     
1:f803a4f:     private byte[] createBundleAContent() throws IOException {
1:f803a4f:         Manifest manifest = new Manifest();
1:f803a4f:         manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:f803a4f:         manifest.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_A);
1:f803a4f:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:f803a4f:         JarOutputStream jos = new JarOutputStream(baos, manifest);
1:f803a4f:         jos.close();
1:f803a4f:         return baos.toByteArray();
1:f803a4f:     }
1:f803a4f:     
1:f803a4f:     private Resource createBundleAResource() throws IOException {
1:f803a4f:         return new TestRepositoryContent.Builder()
1:f803a4f:         .capability(
1:f803a4f:                 new TestCapability.Builder()
1:f803a4f:                     .namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:f803a4f:                     .attribute(IdentityNamespace.IDENTITY_NAMESPACE, BUNDLE_A))
1:f803a4f:         .content(createBundleAContent())
1:f803a4f:         .build();
1:f803a4f:     }
1:f803a4f:     
1:f803a4f:     @Override
1:f803a4f:     public void setUp() throws Exception {
1:f803a4f:         super.setUp();
1:f803a4f:         try {
1:f803a4f:             serviceRegistrations.add(
1:f803a4f:                     bundleContext.registerService(
1:f803a4f:                             Repository.class, 
1:f803a4f:                             createTestRepository(), 
1:f803a4f:                             null));
1:f803a4f:         }
1:f803a4f:         catch (IOException e) {
1:f803a4f:             throw new RuntimeException(e);
1:f803a4f:         }
1:f803a4f:     }
1:f803a4f: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:f803a4f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: 
1: import org.apache.aries.subsystem.core.archive.DeploymentManifest;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.apache.aries.subsystem.itests.util.TestCapability;
1: import org.apache.aries.subsystem.itests.util.TestRepository;
1: import org.apache.aries.subsystem.itests.util.TestRepositoryContent;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.repository.Repository;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1084
1:  * 
1:  * Subsystem : Failure on restart after framework crash
1:  */
1: public class Aries1084Test extends SubsystemTest {
1:     /*
1:      * Subsystem-SymbolicName: feature.a.esa
1:      * Subsystem-Content: bundle.a.jar
1:      * 
1:      * Included in archive:
1:      *      bundle.a.jar
1:      */
1:     private static final String FEATURE_A = "feature.a.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createBundleA();
1: 		createFeatureA();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A));
1: 	}
1: 	
1: 	private void createFeatureA() throws IOException {
1:         createFeatureAManifest();
1:         createSubsystem(FEATURE_A, BUNDLE_A);
1:     }
1:     
1:     private void createFeatureAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_A);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:         createManifest(FEATURE_A + ".mf", attributes);
1:     }
1:     
1:     @Test
1:     public void testBundleStartsWhenSubsystemLeftInInvalidState() throws Exception {
1:         Subsystem featureA = installSubsystemFromFile(FEATURE_A);
1:         try {
1: 	        startSubsystem(featureA);
1: 	        assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1: 	        Bundle core = getSubsystemCoreBundle();
1: 	        File file = core.getBundleContext().getDataFile(
1: 	        		featureA.getSubsystemId() + "/OSGI-INF/DEPLOYMENT.MF");
1: 	        core.stop();
1: 	        DeploymentManifest manifest = new DeploymentManifest(file);
1: 	        FileOutputStream fos = new FileOutputStream(file);
1: 	        try {
1: 		        new DeploymentManifest.Builder()
1: 			        	.manifest(manifest)
1: 			        	.state(Subsystem.State.ACTIVE)
1: 			        	.build()
1: 			        	.write(fos);
1: 	        }
1: 	        finally {
1: 	        	fos.close();
1: 	        }
1: 	        core.start();
1: 	        featureA = getChild(getRootSubsystem(), FEATURE_A);
1: 	        assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1:         }
1:         finally {
1:             stopAndUninstallSubsystemSilently(featureA);
1:         }
1:     }
1:     
1:     private Repository createTestRepository() throws IOException {
1:         return new TestRepository.Builder()
1:         .resource(createBundleAResource())
1:         .build();
1:     }
1:     
1:     private byte[] createBundleAContent() throws IOException {
1:         Manifest manifest = new Manifest();
1:         manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:         manifest.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_A);
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         JarOutputStream jos = new JarOutputStream(baos, manifest);
1:         jos.close();
1:         return baos.toByteArray();
1:     }
1:     
1:     private Resource createBundleAResource() throws IOException {
1:         return new TestRepositoryContent.Builder()
1:         .capability(
1:                 new TestCapability.Builder()
1:                     .namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:                     .attribute(IdentityNamespace.IDENTITY_NAMESPACE, BUNDLE_A))
1:         .content(createBundleAContent())
1:         .build();
1:     }
1:     
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setUp();
1:         try {
1:             serviceRegistrations.add(
1:                     bundleContext.registerService(
1:                             Repository.class, 
1:                             createTestRepository(), 
1:                             null));
1:         }
1:         catch (IOException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: }
============================================================================