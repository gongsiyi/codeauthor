1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:78dd69f: package org.apache.aries.tx.control.service.common.impl;
1:f377acd: 
1:25e28f1: import java.util.ArrayList;
1:8a2da19: import java.util.HashMap;
1:25e28f1: import java.util.List;
1:f87416c: import java.util.Map;
1:8a2da19: import java.util.concurrent.atomic.AtomicReference;
1:25e28f1: import java.util.function.Consumer;
1:f377acd: 
1:8a2da19: import org.osgi.service.transaction.control.TransactionContext;
1:25e28f1: import org.osgi.service.transaction.control.TransactionStatus;
1:f377acd: 
1:f377acd: public abstract class AbstractTransactionContextImpl implements TransactionContext {
1:f377acd: 
1:f377acd: 	protected final AtomicReference<Throwable> firstUnexpectedException = new AtomicReference<>();
1:f377acd: 
1:f377acd: 	protected final List<Throwable> subsequentExceptions = new ArrayList<>();
1:f377acd: 
1:25e28f1: 	protected final List<Runnable> preCompletion = new ArrayList<>();
1:f377acd: 
1:25e28f1: 	protected final List<Consumer<TransactionStatus>> postCompletion = new ArrayList<>();
1:f87416c: 	
1:f87416c: 	protected final Map<Object, Object> scopedVariables = new HashMap<>();
1:f377acd: 
1:f377acd: 	@Override
1:8a2da19: 	public Object getScopedValue(Object key) {
1:f87416c: 		return scopedVariables.get(key);
1:f377acd: 	}
1:f377acd: 
1:f377acd: 	@Override
1:8a2da19: 	public void putScopedValue(Object key, Object value) {
1:f87416c: 		scopedVariables.put(key, value);
1:f377acd: 	}
1:f377acd: 
1:25e28f1: 	protected void beforeCompletion(Runnable onFirstError) {
1:25e28f1: 		preCompletion.stream().forEach(r -> {
1:25e28f1: 			try {
1:25e28f1: 				r.run();
1:25e28f1: 			} catch (Exception e) {
1:f377acd: 				if (firstUnexpectedException.compareAndSet(null, e)) {
1:25e28f1: 					onFirstError.run();
1:25e28f1: 				} else {
1:25e28f1: 					subsequentExceptions.add(e);
1:f377acd: 				}
1:f377acd: 				// TODO log this
1:f377acd: 			}
1:f377acd: 		});
2:25e28f1: 	}
1:f377acd: 
1:f377acd: 	protected void afterCompletion(TransactionStatus status) {
1:f377acd: 		postCompletion.stream().forEach(c -> {
1:f377acd: 			try {
1:f377acd: 				c.accept(status);
1:f377acd: 			} catch (Exception e) {
1:f377acd: 				recordFailure(e);
1:f377acd: 				// TODO log this
1:f377acd: 			}
1:f377acd: 		});
1:f377acd: 	}
1:f377acd: 
1:f377acd: 	protected abstract boolean isAlive();
1:f377acd: 
1:f377acd: 	protected void recordFailure(Throwable failure) {
1:f377acd: 		if (!firstUnexpectedException.compareAndSet(null, failure)) {
1:f377acd: 			subsequentExceptions.add(failure);
1:f377acd: 		}
1:f377acd: 	}
1:f377acd: 
1:f377acd: 	protected abstract void safeSetRollbackOnly();
1:f377acd: 
1:f377acd: 	public abstract void finish();
1:25e28f1: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: 	
1: 	protected final Map<Object, Object> scopedVariables = new HashMap<>();
1: 		return scopedVariables.get(key);
1: 		scopedVariables.put(key, value);
commit:78dd69f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.common.impl;
commit:f377acd
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.service.coordinator.Participant;
1: public abstract class AbstractTransactionContextImpl implements TransactionContext {
0: 	protected static class TransactionVariablesKey {
1: 	}
1: 	protected final AtomicReference<Throwable> firstUnexpectedException = new AtomicReference<>();
1: 
1: 	protected final List<Throwable> subsequentExceptions = new ArrayList<>();
1: 
1: 
1: 
1: 
1: 
0: 		coordination.addParticipant(new Participant() {
1: 
1: 			@Override
0: 			public void failed(Coordination coordination) throws Exception {
0: 				Throwable failure = coordination.getFailure();
0: 				recordFailure(failure);
0: 				safeSetRollbackOnly();
1: 			}
1: 
1: 			@Override
0: 			public void ended(Coordination coordination) throws Exception {
0: 				if (isAlive()) {
1: 					// TODO log this
0: 					recordFailure(new IllegalStateException(
0: 							"The surrounding coordination ended before the transaction completed"));
0: 					safeSetRollbackOnly();
1: 
1: 				}
1: 			}
1: 		});
0: 		return ((HashMap<Object, Object>) coordination.getVariables().getOrDefault(TransactionVariablesKey.class,
0: 				new HashMap<>())).get(key);
0: 		((HashMap<Object, Object>) coordination.getVariables().computeIfAbsent(TransactionVariablesKey.class,
0: 				k -> new HashMap<>())).put(key, value);
1: 
1: 				if (firstUnexpectedException.compareAndSet(null, e)) {
/////////////////////////////////////////////////////////////////////////
1: 
1: 	protected void afterCompletion(TransactionStatus status) {
1: 		postCompletion.stream().forEach(c -> {
1: 			try {
1: 				c.accept(status);
1: 			} catch (Exception e) {
1: 				recordFailure(e);
1: 				// TODO log this
1: 			}
1: 		});
1: 	}
1: 
1: 	protected abstract boolean isAlive();
1: 
1: 	protected void recordFailure(Throwable failure) {
1: 		if (!firstUnexpectedException.compareAndSet(null, failure)) {
1: 			subsequentExceptions.add(failure);
1: 		}
1: 	}
1: 
1: 	protected abstract void safeSetRollbackOnly();
1: 
1: 	public abstract void finish();
commit:25e28f1
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.function.Consumer;
1: import org.osgi.service.transaction.control.TransactionStatus;
0: 	protected final AtomicReference<Exception> firstUnexpectedException = new AtomicReference<>();
0: 	
0: 	protected final List<Exception> subsequentExceptions = new ArrayList<>();
1: 	protected final List<Runnable> preCompletion = new ArrayList<>();
0: 	
1: 	protected final List<Consumer<TransactionStatus>> postCompletion = new ArrayList<>();
0: 	
/////////////////////////////////////////////////////////////////////////
0: 				.getOrDefault(TransactionVariablesKey.class, new HashMap<>()))
/////////////////////////////////////////////////////////////////////////
0: 				TransactionVariablesKey.class, k -> new HashMap<>())).put(key, value);
1: 	}
0: 	
0: 	
1: 	protected void beforeCompletion(Runnable onFirstError) {
1: 		preCompletion.stream().forEach(r -> {
1: 			try {
1: 				r.run();
1: 			} catch (Exception e) {
0: 				if(firstUnexpectedException.compareAndSet(null, e)) {
1: 					onFirstError.run();
1: 				} else {
1: 					subsequentExceptions.add(e);
1: 				}
0: 				// TODO log this
1: 			}
0: 		});
commit:8a2da19
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.tx.control.service.local.impl;
0: 
1: import java.util.HashMap;
1: import java.util.concurrent.atomic.AtomicReference;
0: 
0: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.transaction.control.TransactionContext;
0: 
0: public abstract class AbstractTransactionContextImpl
0: 		implements TransactionContext {
0: 
0: 	protected static class TransactionVariablesKey {}
0: 
0: 	AtomicReference<Exception> unexpectedException = new AtomicReference<>();
0: 	
0: 	protected final Coordination coordination;
0: 	
0: 	public AbstractTransactionContextImpl(Coordination coordination) {
0: 		this.coordination = coordination;
0: 	}
0: 
0: 	@SuppressWarnings("unchecked")
0: 	@Override
1: 	public Object getScopedValue(Object key) {
0: 		return ((HashMap<Object,Object>) coordination.getVariables()
0: 				.getOrDefault(AbstractTransactionContextImpl.TransactionVariablesKey.class, new HashMap<>()))
0: 						.get(key);
0: 	}
0: 
0: 	@SuppressWarnings("unchecked")
0: 	@Override
1: 	public void putScopedValue(Object key, Object value) {
0: 		((HashMap<Object,Object>) coordination.getVariables().computeIfAbsent(
0: 				AbstractTransactionContextImpl.TransactionVariablesKey.class, k -> new HashMap<>())).put(key, value);
0: 	}
0: }
============================================================================