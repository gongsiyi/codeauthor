1:48ad380: /*
1:48ad380:  * Licensed to the Apache Software Foundation (ASF) under one
1:48ad380:  * or more contributor license agreements.  See the NOTICE file
1:48ad380:  * distributed with this work for additional information
1:48ad380:  * regarding copyright ownership.  The ASF licenses this file
1:48ad380:  * to you under the Apache License, Version 2.0 (the
1:48ad380:  * "License"); you may not use this file except in compliance
1:48ad380:  * with the License.  You may obtain a copy of the License at
1:48ad380:  *
1:48ad380:  *   http://www.apache.org/licenses/LICENSE-2.0
1:48ad380:  *
1:48ad380:  * Unless required by applicable law or agreed to in writing,
1:48ad380:  * software distributed under the License is distributed on an
1:48ad380:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:48ad380:  * KIND, either express or implied.  See the License for the
1:48ad380:  * specific language governing permissions and limitations
1:48ad380:  * under the License.
1:48ad380:  */
1:48ad380: package org.apache.aries.transaction.jdbc.internal;
1:48ad380: 
1:48ad380: import org.apache.geronimo.connector.outbound.AbstractSinglePoolConnectionInterceptor;
1:48ad380: import org.apache.geronimo.connector.outbound.ConnectionInfo;
1:48ad380: import org.apache.geronimo.connector.outbound.ConnectionInterceptor;
1:48ad380: import org.apache.geronimo.connector.outbound.ConnectionReturnAction;
1:48ad380: import org.apache.geronimo.connector.outbound.GenericConnectionManager;
1:48ad380: import org.apache.geronimo.connector.outbound.ManagedConnectionInfo;
1:48ad380: import org.apache.geronimo.connector.outbound.MultiPoolConnectionInterceptor;
1:48ad380: import org.apache.geronimo.connector.outbound.SinglePoolConnectionInterceptor;
1:48ad380: import org.apache.geronimo.connector.outbound.SinglePoolMatchAllConnectionInterceptor;
1:48ad380: import org.apache.geronimo.connector.outbound.SubjectSource;
1:48ad380: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.PoolingSupport;
1:48ad380: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.TransactionSupport;
1:48ad380: import org.apache.geronimo.connector.outbound.connectiontracking.ConnectionTracker;
1:48ad380: import org.apache.geronimo.transaction.manager.RecoverableTransactionManager;
1:48ad380: 
1:48ad380: import javax.resource.ResourceException;
1:48ad380: import javax.resource.spi.ManagedConnection;
1:48ad380: import javax.resource.spi.ManagedConnectionFactory;
1:48ad380: import javax.resource.spi.ValidatingManagedConnectionFactory;
1:48ad380: 
1:48ad380: import java.util.HashMap;
1:48ad380: import java.util.List;
1:48ad380: import java.util.Map;
1:48ad380: import java.util.Set;
1:48ad380: import java.util.Timer;
1:48ad380: import java.util.TimerTask;
1:48ad380: import java.util.concurrent.locks.ReadWriteLock;
1:48ad380: 
1:8047ebe: @SuppressWarnings({
1:8047ebe:     "unchecked", "serial"
1:8047ebe: })
1:48ad380: public final class ValidatingGenericConnectionManager extends GenericConnectionManager {
1:48ad380: 
1:48ad380:     private static final Timer TIMER = new Timer("ValidatingGenericConnectionManagerTimer", true);
1:48ad380: 
1:48ad380:     private transient final TimerTask validatingTask;
1:48ad380:     private final long validatingInterval;
1:48ad380: 
1:48ad380:     private final ReadWriteLock lock;
1:48ad380:     private final Object pool;
1:48ad380: 
1:48ad380:     public ValidatingGenericConnectionManager(TransactionSupport transactionSupport, PoolingSupport pooling, SubjectSource subjectSource, ConnectionTracker connectionTracker, RecoverableTransactionManager transactionManager, ManagedConnectionFactory mcf, String name, ClassLoader classLoader, long interval) {
1:48ad380:         super(transactionSupport, pooling, subjectSource, connectionTracker, transactionManager, mcf, name, classLoader);
1:48ad380:         validatingInterval = interval;
1:48ad380: 
1:48ad380:         ConnectionInterceptor stack = interceptors.getStack();
1:48ad380: 
1:48ad380:         ReadWriteLock foundLock = null;
1:48ad380:         ConnectionInterceptor current = stack;
1:48ad380:         do {
1:48ad380:             if (current instanceof AbstractSinglePoolConnectionInterceptor) {
1:48ad380:                 try {
1:48ad380:                     foundLock = (ReadWriteLock) Reflections.get(current, "resizeLock");
1:48ad380:                 } catch (Exception e) {
1:48ad380:                     // no-op
1:48ad380:                 }
1:48ad380:                 break;
1:48ad380:             }
1:48ad380: 
1:48ad380:             // look next
1:48ad380:             try {
1:48ad380:                 current = (ConnectionInterceptor) Reflections.get(current, "next");
1:48ad380:             } catch (Exception e) {
1:48ad380:                 current = null;
1:48ad380:             }
1:48ad380:         } while (current != null);
1:48ad380: 
1:48ad380:         this.lock = foundLock;
1:48ad380: 
1:48ad380:         Object foundPool = null;
1:48ad380:         if (current instanceof AbstractSinglePoolConnectionInterceptor) {
1:478f002:             foundPool = Reflections.get(current, "pool");
1:48ad380:         } else if (current instanceof MultiPoolConnectionInterceptor) {
1:48ad380:             log.warn("validation on stack {} not supported", stack);
1:48ad380:         }
1:48ad380:         this.pool = foundPool;
1:48ad380: 
1:48ad380:         if (pool != null) {
1:48ad380:             validatingTask = new ValidatingTask(current, lock, pool);
1:48ad380:         } else {
1:48ad380:             validatingTask = null;
1:48ad380:         }
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public void doStart() throws Exception {
1:48ad380:         super.doStart();
1:48ad380:         if (validatingTask != null) {
1:48ad380:             TIMER.schedule(validatingTask, validatingInterval, validatingInterval);
1:48ad380:         }
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public void doStop() throws Exception {
1:48ad380:         if (validatingTask != null) {
1:48ad380:             validatingTask.cancel();
1:48ad380:         }
1:48ad380:         super.doStop();
1:48ad380:     }
1:48ad380: 
1:48ad380:     private class ValidatingTask extends TimerTask {
1:48ad380: 
1:48ad380:         private final ConnectionInterceptor stack;
1:48ad380:         private final ReadWriteLock lock;
1:48ad380:         private final Object pool;
1:48ad380: 
1:48ad380:         public ValidatingTask(ConnectionInterceptor stack, ReadWriteLock lock, Object pool) {
1:48ad380:             this.stack = stack;
1:48ad380:             this.lock = lock;
1:48ad380:             this.pool = pool;
1:48ad380:         }
1:48ad380: 
1:48ad380:         @Override
1:48ad380:         public void run() {
1:48ad380:             if (lock != null) {
1:48ad380:                 lock.writeLock().lock();
1:48ad380:             }
1:48ad380: 
1:48ad380:             try {
1:48ad380:                 final Map<ManagedConnection, ManagedConnectionInfo> connections;
1:48ad380:                 if (stack instanceof SinglePoolConnectionInterceptor) {
1:48ad380:                     connections = new HashMap<ManagedConnection, ManagedConnectionInfo>();
1:48ad380:                     for (ManagedConnectionInfo info : (List<ManagedConnectionInfo>) pool) {
1:48ad380:                         connections.put(info.getManagedConnection(), info);
1:48ad380:                     }
1:48ad380:                 } else if (stack instanceof SinglePoolMatchAllConnectionInterceptor) {
1:48ad380:                     connections = (Map<ManagedConnection, ManagedConnectionInfo>) pool;
1:48ad380:                 } else {
1:48ad380:                     log.warn("stack {} currently not supported", stack);
1:48ad380:                     return;
1:48ad380:                 }
1:48ad380: 
1:48ad380:                 // destroy invalid connections
1:48ad380:                 try {
1:48ad380:                     Set<ManagedConnection> invalids = ValidatingManagedConnectionFactory.class.cast(getManagedConnectionFactory()).getInvalidConnections(connections.keySet());
1:48ad380:                     if (invalids != null) {
1:48ad380:                         for (ManagedConnection invalid : invalids) {
1:48ad380:                             stack.returnConnection(new ConnectionInfo(connections.get(invalid)), ConnectionReturnAction.DESTROY);
1:48ad380:                         }
1:48ad380:                     }
1:48ad380:                 } catch (ResourceException e) {
1:48ad380:                     log.error(e.getMessage(), e);
1:48ad380:                 }
1:48ad380:             } finally {
1:48ad380:                 if (lock != null) {
1:48ad380:                     lock.writeLock().unlock();
1:48ad380:                 }
1:48ad380:             }
1:48ad380:         }
1:48ad380:     }
1:48ad380: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:478f002
/////////////////////////////////////////////////////////////////////////
1:             foundPool = Reflections.get(current, "pool");
commit:48ad380
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.jdbc.internal;
1: 
1: import org.apache.geronimo.connector.outbound.AbstractSinglePoolConnectionInterceptor;
1: import org.apache.geronimo.connector.outbound.ConnectionInfo;
1: import org.apache.geronimo.connector.outbound.ConnectionInterceptor;
1: import org.apache.geronimo.connector.outbound.ConnectionReturnAction;
1: import org.apache.geronimo.connector.outbound.GenericConnectionManager;
1: import org.apache.geronimo.connector.outbound.ManagedConnectionInfo;
1: import org.apache.geronimo.connector.outbound.MultiPoolConnectionInterceptor;
1: import org.apache.geronimo.connector.outbound.SinglePoolConnectionInterceptor;
1: import org.apache.geronimo.connector.outbound.SinglePoolMatchAllConnectionInterceptor;
1: import org.apache.geronimo.connector.outbound.SubjectSource;
1: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.PoolingSupport;
1: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.TransactionSupport;
1: import org.apache.geronimo.connector.outbound.connectiontracking.ConnectionTracker;
1: import org.apache.geronimo.transaction.manager.RecoverableTransactionManager;
1: 
1: import javax.resource.ResourceException;
1: import javax.resource.spi.ManagedConnection;
1: import javax.resource.spi.ManagedConnectionFactory;
1: import javax.resource.spi.ValidatingManagedConnectionFactory;
1: 
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.Timer;
1: import java.util.TimerTask;
1: import java.util.concurrent.locks.ReadWriteLock;
1: 
1: public final class ValidatingGenericConnectionManager extends GenericConnectionManager {
1: 
1:     private static final Timer TIMER = new Timer("ValidatingGenericConnectionManagerTimer", true);
1: 
1:     private transient final TimerTask validatingTask;
1:     private final long validatingInterval;
1: 
1:     private final ReadWriteLock lock;
1:     private final Object pool;
1: 
1:     public ValidatingGenericConnectionManager(TransactionSupport transactionSupport, PoolingSupport pooling, SubjectSource subjectSource, ConnectionTracker connectionTracker, RecoverableTransactionManager transactionManager, ManagedConnectionFactory mcf, String name, ClassLoader classLoader, long interval) {
1:         super(transactionSupport, pooling, subjectSource, connectionTracker, transactionManager, mcf, name, classLoader);
1:         validatingInterval = interval;
1: 
1:         ConnectionInterceptor stack = interceptors.getStack();
1: 
1:         ReadWriteLock foundLock = null;
1:         ConnectionInterceptor current = stack;
1:         do {
1:             if (current instanceof AbstractSinglePoolConnectionInterceptor) {
1:                 try {
1:                     foundLock = (ReadWriteLock) Reflections.get(current, "resizeLock");
1:                 } catch (Exception e) {
1:                     // no-op
1:                 }
1:                 break;
1:             }
1: 
1:             // look next
1:             try {
1:                 current = (ConnectionInterceptor) Reflections.get(current, "next");
1:             } catch (Exception e) {
1:                 current = null;
1:             }
1:         } while (current != null);
1: 
1:         this.lock = foundLock;
1: 
1:         Object foundPool = null;
1:         if (current instanceof AbstractSinglePoolConnectionInterceptor) {
0:             foundPool = Reflections.get(stack, "pool");
1:         } else if (current instanceof MultiPoolConnectionInterceptor) {
1:             log.warn("validation on stack {} not supported", stack);
1:         }
1:         this.pool = foundPool;
1: 
1:         if (pool != null) {
1:             validatingTask = new ValidatingTask(current, lock, pool);
1:         } else {
1:             validatingTask = null;
1:         }
1:     }
1: 
1:     @Override
1:     public void doStart() throws Exception {
1:         super.doStart();
1:         if (validatingTask != null) {
1:             TIMER.schedule(validatingTask, validatingInterval, validatingInterval);
1:         }
1:     }
1: 
1:     @Override
1:     public void doStop() throws Exception {
1:         if (validatingTask != null) {
1:             validatingTask.cancel();
1:         }
1:         super.doStop();
1:     }
1: 
1:     private class ValidatingTask extends TimerTask {
1: 
1:         private final ConnectionInterceptor stack;
1:         private final ReadWriteLock lock;
1:         private final Object pool;
1: 
1:         public ValidatingTask(ConnectionInterceptor stack, ReadWriteLock lock, Object pool) {
1:             this.stack = stack;
1:             this.lock = lock;
1:             this.pool = pool;
1:         }
1: 
1:         @Override
1:         public void run() {
1:             if (lock != null) {
1:                 lock.writeLock().lock();
1:             }
1: 
1:             try {
1:                 final Map<ManagedConnection, ManagedConnectionInfo> connections;
1:                 if (stack instanceof SinglePoolConnectionInterceptor) {
1:                     connections = new HashMap<ManagedConnection, ManagedConnectionInfo>();
1:                     for (ManagedConnectionInfo info : (List<ManagedConnectionInfo>) pool) {
1:                         connections.put(info.getManagedConnection(), info);
1:                     }
1:                 } else if (stack instanceof SinglePoolMatchAllConnectionInterceptor) {
1:                     connections = (Map<ManagedConnection, ManagedConnectionInfo>) pool;
1:                 } else {
1:                     log.warn("stack {} currently not supported", stack);
1:                     return;
1:                 }
1: 
1:                 // destroy invalid connections
1:                 try {
1:                     Set<ManagedConnection> invalids = ValidatingManagedConnectionFactory.class.cast(getManagedConnectionFactory()).getInvalidConnections(connections.keySet());
1:                     if (invalids != null) {
1:                         for (ManagedConnection invalid : invalids) {
1:                             stack.returnConnection(new ConnectionInfo(connections.get(invalid)), ConnectionReturnAction.DESTROY);
1:                         }
1:                     }
1:                 } catch (ResourceException e) {
1:                     log.error(e.getMessage(), e);
1:                 }
1:             } finally {
1:                 if (lock != null) {
1:                     lock.writeLock().unlock();
1:                 }
1:             }
1:         }
1:     }
1: }
author:Christian Schneider
-------------------------------------------------------------------------------
commit:8047ebe
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings({
1:     "unchecked", "serial"
1: })
============================================================================