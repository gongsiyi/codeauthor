1:e9bec29: /*
1:e9bec29:  * Licensed under the Apache License, Version 2.0 (the "License");
1:e9bec29:  * you may not use this file except in compliance with the License.
1:e9bec29:  * You may obtain a copy of the License at
1:e9bec29:  *
1:e9bec29:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e9bec29:  *
1:e9bec29:  * Unless required by applicable law or agreed to in writing, software
1:e9bec29:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e9bec29:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e9bec29:  * See the License for the specific language governing permissions and
1:e9bec29:  * limitations under the License.
1:e9bec29:  */
1:e9bec29: package org.apache.aries.subsystem.core.internal.sub;
1:e9bec29: 
1:e9bec29: import java.util.Collection;
1:e9bec29: import java.util.Collections;
1:e9bec29: import java.util.HashMap;
1:e9bec29: import java.util.Map;
1:e9bec29: 
1:e9bec29: import org.apache.aries.subsystem.core.internal.TestCapability;
1:e9bec29: import org.osgi.resource.Capability;
1:e9bec29: import org.osgi.resource.Requirement;
1:e9bec29: import org.osgi.service.repository.Repository;
1:e9bec29: 
1:e9bec29: // It is important for the test that this class it non-public
1:e9bec29: class SubTestRepository implements Repository {
1:e9bec29:     @Override
1:e9bec29:     public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:e9bec29:         Map<Requirement, Collection<Capability>> res = new HashMap<Requirement, Collection<Capability>>();
1:e9bec29: 
1:e9bec29:         for (Requirement req : requirements) {
1:e9bec29:             if (req.getNamespace().equals("ns1") &&
1:e9bec29:                     req.getDirectives().equals(Collections.singletonMap("filter", "(x=y)"))) {
1:e9bec29:                 TestCapability cap = new TestCapability("ns1",
1:e9bec29:                         Collections.<String, Object>singletonMap("x", "y"));
1:e9bec29:                 Collection<Capability> caps = Collections.<Capability>singleton(cap);
1:e9bec29:                 res.put(req, caps);
1:e9bec29:             }
1:e9bec29:         }
1:e9bec29:         return res;
1:e9bec29:     }
1:e9bec29: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:e9bec29
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal.sub;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.core.internal.TestCapability;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.service.repository.Repository;
1: 
1: // It is important for the test that this class it non-public
1: class SubTestRepository implements Repository {
1:     @Override
1:     public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:         Map<Requirement, Collection<Capability>> res = new HashMap<Requirement, Collection<Capability>>();
1: 
1:         for (Requirement req : requirements) {
1:             if (req.getNamespace().equals("ns1") &&
1:                     req.getDirectives().equals(Collections.singletonMap("filter", "(x=y)"))) {
1:                 TestCapability cap = new TestCapability("ns1",
1:                         Collections.<String, Object>singletonMap("x", "y"));
1:                 Collection<Capability> caps = Collections.<Capability>singleton(cap);
1:                 res.put(req, caps);
1:             }
1:         }
1:         return res;
1:     }
1: }
============================================================================