1:4fec049: /*
1:4fec049:  * Licensed to the Apache Software Foundation (ASF) under one
1:4fec049:  * or more contributor license agreements.  See the NOTICE file
1:4fec049:  * distributed with this work for additional information
1:4fec049:  * regarding copyright ownership.  The ASF licenses this file
1:4fec049:  * to you under the Apache License, Version 2.0 (the
1:4fec049:  * "License"); you may not use this file except in compliance
1:4fec049:  * with the License.  You may obtain a copy of the License at
1:4fec049:  *
1:4fec049:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4fec049:  *
1:4fec049:  * Unless required by applicable law or agreed to in writing,
1:4fec049:  * software distributed under the License is distributed on an
1:4fec049:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4fec049:  * KIND, either express or implied.  See the License for the
1:4fec049:  * specific language governing permissions and limitations
1:4fec049:  * under the License.
1:4fec049:  */
1:4fec049: package org.apache.aries.application.modelling.impl;
1:4fec049: 
1:4fec049: 
1:4fec049: 
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:4fec049: 
1:4fec049: import java.util.Dictionary;
1:4fec049: import java.util.HashMap;
1:4fec049: import java.util.Hashtable;
1:4fec049: import java.util.Map;
1:4fec049: 
1:89f804e: import org.apache.aries.application.InvalidAttributeException;
1:4fec049: import org.apache.aries.application.modelling.ImportedBundle;
1:58f55bd: import org.apache.aries.application.modelling.ModellingConstants;
1:4fec049: import org.apache.aries.application.modelling.Provider;
1:4fec049: import org.apache.aries.application.modelling.ResourceType;
1:58f55bd: import org.apache.aries.application.modelling.utils.impl.ModellingHelperImpl;
1:4fec049: import org.apache.aries.application.utils.FilterUtils;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:4fec049: import org.osgi.framework.Constants;
1:4fec049: import org.osgi.framework.Filter;
1:4fec049: import org.osgi.framework.FrameworkUtil;
1:4fec049: import org.osgi.framework.InvalidSyntaxException;
1:4fec049: import org.osgi.framework.Version;
1:4fec049: import org.slf4j.Logger;
1:4fec049: import org.slf4j.LoggerFactory;
1:4fec049: 
1:4fec049: 
1:4fec049: /**
1:4fec049:  * A model of a Bundle imported, or required, by something. For example, an entry in an APPLICATION.MF. 
1:4fec049:  */
1:4fec049: public class ImportedBundleImpl implements ImportedBundle
1:4fec049: {
1:4fec049:  
1:4fec049:   private final Map<String, String> _attributes;
1:4fec049:   private final String _filterString;
1:4fec049:   private final Filter _filter;
1:4fec049:   private final Logger logger = LoggerFactory.getLogger(ImportedBundleImpl.class);
1:4fec049:   /**
1:4fec049:    * Build an ImportedBundleImpl from filter string and a set of attributes. The filter string is 
1:4fec049:    * most easily obtained ManifestHeaderProcessor.generateFilter() or Requirement.getFilter() - 
1:4fec049:    * be careful if building your own. 
1:4fec049:    * @param filterString For example as obtained from Requirement.getFilter()
1:4fec049:    * @param attributes   
1:4fec049:    * @throws InvalidAttributeException 
1:4fec049:    */
1:4fec049:   public ImportedBundleImpl(String filterString, Map<String, String> attributes) throws InvalidAttributeException
1:4fec049:   {
1:4fec049:     logger.debug(LOG_ENTRY, "ImportedBundleImpl", new Object[]{filterString, attributes});
1:4fec049:     _attributes = new HashMap<String, String> (attributes);
1:4fec049:     String versionRange = _attributes.remove(Constants.BUNDLE_VERSION_ATTRIBUTE);
1:4fec049:     if(versionRange == null) {
1:4fec049:       versionRange = Version.emptyVersion.toString();
1:4fec049:     }
1:4fec049:     if(_attributes.get(Constants.VERSION_ATTRIBUTE) == null) { 
1:4fec049:        _attributes.put(Constants.VERSION_ATTRIBUTE, versionRange);
1:4fec049:     }
1:4fec049:     _filterString = filterString;
1:4fec049:     try { 
1:4fec049:       _filter = FrameworkUtil.createFilter(FilterUtils.removeMandatoryFilterToken(_filterString));
1:4fec049:     } catch (InvalidSyntaxException isx) {
1:4fec049:       InvalidAttributeException iax = new InvalidAttributeException(isx);
1:4fec049:       logger.debug(LOG_EXIT, "ImportedBundleImpl", new Object[]{iax});
1:4fec049:       throw iax;
1:4fec049:     }
1:4fec049:     logger.debug(LOG_EXIT, "ImportedBundleImpl");
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Build an ImportedBundleImpl from a bundle name and version range.  
1:4fec049:    * @param bundleName   Bundle symbolic name
1:4fec049:    * @param versionRange Bundle version range
1:4fec049:    * @throws InvalidAttributeException
1:4fec049:    */
1:4fec049:   public ImportedBundleImpl (String bundleName, String versionRange) throws InvalidAttributeException { 
1:4fec049:     logger.debug(LOG_ENTRY, "ImportedBundleImpl", new Object[] {bundleName, versionRange});
1:4fec049:     _attributes = new HashMap<String, String> ();
1:4fec049:     _attributes.put (ModellingConstants.OBR_SYMBOLIC_NAME, bundleName);
1:4fec049:     _attributes.put (Constants.VERSION_ATTRIBUTE, versionRange);
1:4fec049:     _filterString = ManifestHeaderProcessor.generateFilter(_attributes);
1:4fec049:     try { 
1:4fec049:       _filter = FrameworkUtil.createFilter(FilterUtils.removeMandatoryFilterToken(_filterString));
1:4fec049:     } catch (InvalidSyntaxException isx) { 
1:4fec049:       InvalidAttributeException iax = new InvalidAttributeException(isx);
1:4fec049:       logger.debug(LOG_ENTRY, "ImportedBundleImpl", new Object[] {iax});
1:4fec049:       throw iax;
1:4fec049:     }
1:4fec049:     logger.debug(LOG_EXIT, "ImportedBundleImpl"); 
1:4fec049:   }
1:4fec049:  
1:4fec049: 
1:4fec049:   public String getAttributeFilter() {
1:4fec049:     logger.debug(LOG_ENTRY, "getAttributeFilter");
1:4fec049:     logger.debug(LOG_EXIT, "getAttributeFilter", new Object[] {_filterString});
1:4fec049:     return _filterString;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public ResourceType getType() {
1:4fec049: 
1:4fec049:     logger.debug(LOG_ENTRY, "getType");
1:4fec049:     logger.debug(LOG_EXIT, "getType", new Object[] {ResourceType.BUNDLE});
1:4fec049:     return ResourceType.BUNDLE;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public boolean isMultiple() {
1:4fec049:     logger.debug(LOG_ENTRY, "isMultiple");
1:4fec049:     logger.debug(LOG_EXIT, "isMultiple", new Object[] {false});
1:4fec049:     return false;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public boolean isOptional() {
1:4fec049:     logger.debug(LOG_ENTRY, "isOptional");
1:4fec049:     boolean optional = false;
1:4fec049:     if (_attributes.containsKey(Constants.RESOLUTION_DIRECTIVE + ":")) {
1:4fec049:       if ((Constants.RESOLUTION_OPTIONAL).equals
1:4fec049:           (_attributes.get(Constants.RESOLUTION_DIRECTIVE + ":"))) { 
1:4fec049:         optional = true;
1:4fec049:       }
1:4fec049:     }
1:4fec049:     logger.debug(LOG_EXIT, "isOptional", optional);
1:4fec049:     return optional;
1:4fec049:   }
1:4fec049: 
1:4fec049:   public boolean isSatisfied(Provider capability) {
1:4fec049:     logger.debug(LOG_ENTRY, "isSatisfied", capability);
1:4fec049:     if (capability.getType() != ResourceType.BUNDLE 
1:4fec049:         && capability.getType() != ResourceType.COMPOSITE) { 
1:4fec049:       logger.debug(LOG_EXIT, "isSatisfied", false);
1:4fec049:       return false;
1:4fec049:     }
1:4fec049:     Dictionary<String, Object> dict = new Hashtable<String, Object> (capability.getAttributes());
1:4fec049:     String version = (String) dict.get(Constants.VERSION_ATTRIBUTE);
1:4fec049:     if (version != null) { 
1:4fec049:       dict.put(Constants.VERSION_ATTRIBUTE, Version.parseVersion(version));
1:4fec049:     }
1:58f55bd:     boolean allPresent = ModellingHelperImpl.areMandatoryAttributesPresent_(_attributes, capability);
1:4fec049:     boolean result = allPresent && _filter.match(dict);
1:4fec049:     logger.debug(LOG_EXIT, "isSatisfied", result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Get the version range on this bundle import
1:4fec049:    * @return Imported version range, as a string
1:4fec049:    */
1:4fec049:   public String getVersionRange() {
1:4fec049:     logger.debug(LOG_ENTRY, "getVersionRange");
1:4fec049:     String range = _attributes.get(Constants.VERSION_ATTRIBUTE);
1:4fec049:     String result = (range == null) ? Version.emptyVersion.toString() : range;
1:4fec049:     logger.debug(LOG_EXIT, "getVersionRange", result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Get the symbolic name of the imported bundle
1:4fec049:    * @return symbolic name
1:4fec049:    */
1:4fec049:   public String getSymbolicName() {
1:4fec049:     logger.debug(LOG_ENTRY, "getSymbolicName");
1:4fec049:     String result = _attributes.get(ModellingConstants.OBR_SYMBOLIC_NAME);
1:4fec049:     logger.debug(LOG_EXIT, "getSymbolicName", result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Equal if symbolic names match and version strings match
1:4fec049:    */
1:4fec049:   @Override
1:4fec049:   public boolean equals(Object o)
1:4fec049:   {
1:4fec049:     logger.debug(LOG_ENTRY, "equals", o);
1:4fec049:     boolean result = false;
1:4fec049:     if (o == this)
1:4fec049:     {
1:4fec049:       result = true;
1:4fec049:     }
1:4fec049:     else if (o instanceof ImportedBundleImpl)
1:4fec049:     {
1:4fec049:       ImportedBundleImpl ib = (ImportedBundleImpl)o;
1:4fec049:       result = (getSymbolicName().equals(ib.getSymbolicName())
1:4fec049:           && getVersionRange().equals(ib.getVersionRange()));
1:4fec049:     }
1:4fec049:     logger.debug(LOG_EXIT, "equals", result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Override
1:4fec049:   public int hashCode()
1:4fec049:   {
1:4fec049:     logger.debug(LOG_ENTRY, "hashCode");
1:4fec049:     int hashCode = getSymbolicName().hashCode() + 31 * getVersionRange().hashCode();
1:4fec049:     logger.debug(LOG_ENTRY, "hashCode", hashCode);
1:4fec049:     return hashCode;
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Override
1:4fec049:   public String toString() {
1:4fec049:     return _filterString;
1:4fec049:   }
1:4fec049: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.InvalidAttributeException;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ModellingConstants;
1: import org.apache.aries.application.modelling.utils.impl.ModellingHelperImpl;
/////////////////////////////////////////////////////////////////////////
1:     boolean allPresent = ModellingHelperImpl.areMandatoryAttributesPresent_(_attributes, capability);
commit:4fec049
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.modelling.impl;
1: 
1: 
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.util.Dictionary;
1: import java.util.HashMap;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
0: import org.apache.aries.application.management.InvalidAttributeException;
1: import org.apache.aries.application.modelling.ImportedBundle;
1: import org.apache.aries.application.modelling.Provider;
1: import org.apache.aries.application.modelling.ResourceType;
0: import org.apache.aries.application.modelling.utils.ModellingConstants;
0: import org.apache.aries.application.modelling.utils.ModellingUtils;
1: import org.apache.aries.application.utils.FilterUtils;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.Version;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: /**
1:  * A model of a Bundle imported, or required, by something. For example, an entry in an APPLICATION.MF. 
1:  */
1: public class ImportedBundleImpl implements ImportedBundle
1: {
1:  
1:   private final Map<String, String> _attributes;
1:   private final String _filterString;
1:   private final Filter _filter;
1:   private final Logger logger = LoggerFactory.getLogger(ImportedBundleImpl.class);
1:   /**
1:    * Build an ImportedBundleImpl from filter string and a set of attributes. The filter string is 
1:    * most easily obtained ManifestHeaderProcessor.generateFilter() or Requirement.getFilter() - 
1:    * be careful if building your own. 
1:    * @param filterString For example as obtained from Requirement.getFilter()
1:    * @param attributes   
1:    * @throws InvalidAttributeException 
1:    */
1:   public ImportedBundleImpl(String filterString, Map<String, String> attributes) throws InvalidAttributeException
1:   {
1:     logger.debug(LOG_ENTRY, "ImportedBundleImpl", new Object[]{filterString, attributes});
1:     _attributes = new HashMap<String, String> (attributes);
1:     String versionRange = _attributes.remove(Constants.BUNDLE_VERSION_ATTRIBUTE);
1:     if(versionRange == null) {
1:       versionRange = Version.emptyVersion.toString();
1:     }
1:     if(_attributes.get(Constants.VERSION_ATTRIBUTE) == null) { 
1:        _attributes.put(Constants.VERSION_ATTRIBUTE, versionRange);
1:     }
1:     _filterString = filterString;
1:     try { 
1:       _filter = FrameworkUtil.createFilter(FilterUtils.removeMandatoryFilterToken(_filterString));
1:     } catch (InvalidSyntaxException isx) {
1:       InvalidAttributeException iax = new InvalidAttributeException(isx);
1:       logger.debug(LOG_EXIT, "ImportedBundleImpl", new Object[]{iax});
1:       throw iax;
1:     }
1:     logger.debug(LOG_EXIT, "ImportedBundleImpl");
1:   }
1:   
1:   /**
1:    * Build an ImportedBundleImpl from a bundle name and version range.  
1:    * @param bundleName   Bundle symbolic name
1:    * @param versionRange Bundle version range
1:    * @throws InvalidAttributeException
1:    */
1:   public ImportedBundleImpl (String bundleName, String versionRange) throws InvalidAttributeException { 
1:     logger.debug(LOG_ENTRY, "ImportedBundleImpl", new Object[] {bundleName, versionRange});
1:     _attributes = new HashMap<String, String> ();
1:     _attributes.put (ModellingConstants.OBR_SYMBOLIC_NAME, bundleName);
1:     _attributes.put (Constants.VERSION_ATTRIBUTE, versionRange);
1:     _filterString = ManifestHeaderProcessor.generateFilter(_attributes);
1:     try { 
1:       _filter = FrameworkUtil.createFilter(FilterUtils.removeMandatoryFilterToken(_filterString));
1:     } catch (InvalidSyntaxException isx) { 
1:       InvalidAttributeException iax = new InvalidAttributeException(isx);
1:       logger.debug(LOG_ENTRY, "ImportedBundleImpl", new Object[] {iax});
1:       throw iax;
1:     }
1:     logger.debug(LOG_EXIT, "ImportedBundleImpl"); 
1:   }
1:  
1: 
1:   public String getAttributeFilter() {
1:     logger.debug(LOG_ENTRY, "getAttributeFilter");
1:     logger.debug(LOG_EXIT, "getAttributeFilter", new Object[] {_filterString});
1:     return _filterString;
1:   }
1: 
1: 
1:   public ResourceType getType() {
1: 
1:     logger.debug(LOG_ENTRY, "getType");
1:     logger.debug(LOG_EXIT, "getType", new Object[] {ResourceType.BUNDLE});
1:     return ResourceType.BUNDLE;
1:   }
1: 
1: 
1:   public boolean isMultiple() {
1:     logger.debug(LOG_ENTRY, "isMultiple");
1:     logger.debug(LOG_EXIT, "isMultiple", new Object[] {false});
1:     return false;
1:   }
1: 
1: 
1:   public boolean isOptional() {
1:     logger.debug(LOG_ENTRY, "isOptional");
1:     boolean optional = false;
1:     if (_attributes.containsKey(Constants.RESOLUTION_DIRECTIVE + ":")) {
1:       if ((Constants.RESOLUTION_OPTIONAL).equals
1:           (_attributes.get(Constants.RESOLUTION_DIRECTIVE + ":"))) { 
1:         optional = true;
1:       }
1:     }
1:     logger.debug(LOG_EXIT, "isOptional", optional);
1:     return optional;
1:   }
1: 
1:   public boolean isSatisfied(Provider capability) {
1:     logger.debug(LOG_ENTRY, "isSatisfied", capability);
1:     if (capability.getType() != ResourceType.BUNDLE 
1:         && capability.getType() != ResourceType.COMPOSITE) { 
1:       logger.debug(LOG_EXIT, "isSatisfied", false);
1:       return false;
1:     }
1:     Dictionary<String, Object> dict = new Hashtable<String, Object> (capability.getAttributes());
1:     String version = (String) dict.get(Constants.VERSION_ATTRIBUTE);
1:     if (version != null) { 
1:       dict.put(Constants.VERSION_ATTRIBUTE, Version.parseVersion(version));
1:     }
0:     boolean allPresent = ModellingUtils.areMandatoryAttributesPresent(_attributes, capability);
1:     boolean result = allPresent && _filter.match(dict);
1:     logger.debug(LOG_EXIT, "isSatisfied", result);
1:     return result;
1:   }
1:   
1:   /**
1:    * Get the version range on this bundle import
1:    * @return Imported version range, as a string
1:    */
1:   public String getVersionRange() {
1:     logger.debug(LOG_ENTRY, "getVersionRange");
1:     String range = _attributes.get(Constants.VERSION_ATTRIBUTE);
1:     String result = (range == null) ? Version.emptyVersion.toString() : range;
1:     logger.debug(LOG_EXIT, "getVersionRange", result);
1:     return result;
1:   }
1:   
1:   /**
1:    * Get the symbolic name of the imported bundle
1:    * @return symbolic name
1:    */
1:   public String getSymbolicName() {
1:     logger.debug(LOG_ENTRY, "getSymbolicName");
1:     String result = _attributes.get(ModellingConstants.OBR_SYMBOLIC_NAME);
1:     logger.debug(LOG_EXIT, "getSymbolicName", result);
1:     return result;
1:   }
1:   
1:   /**
1:    * Equal if symbolic names match and version strings match
1:    */
1:   @Override
1:   public boolean equals(Object o)
1:   {
1:     logger.debug(LOG_ENTRY, "equals", o);
1:     boolean result = false;
1:     if (o == this)
1:     {
1:       result = true;
1:     }
1:     else if (o instanceof ImportedBundleImpl)
1:     {
1:       ImportedBundleImpl ib = (ImportedBundleImpl)o;
1:       result = (getSymbolicName().equals(ib.getSymbolicName())
1:           && getVersionRange().equals(ib.getVersionRange()));
1:     }
1:     logger.debug(LOG_EXIT, "equals", result);
1:     return result;
1:   }
1:   
1:   @Override
1:   public int hashCode()
1:   {
1:     logger.debug(LOG_ENTRY, "hashCode");
1:     int hashCode = getSymbolicName().hashCode() + 31 * getVersionRange().hashCode();
1:     logger.debug(LOG_ENTRY, "hashCode", hashCode);
1:     return hashCode;
1:   }
1:   
1:   @Override
1:   public String toString() {
1:     return _filterString;
1:   }
1: }
============================================================================