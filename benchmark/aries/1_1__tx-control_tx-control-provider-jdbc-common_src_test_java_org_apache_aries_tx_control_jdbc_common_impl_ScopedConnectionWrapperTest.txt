1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:ef9eace: package org.apache.aries.tx.control.jdbc.common.impl;
1:ef9eace: 
1:ef9eace: import java.awt.List;
1:ef9eace: import java.sql.Connection;
1:ef9eace: import java.sql.SQLException;
1:ef9eace: import java.sql.Savepoint;
1:ef9eace: import java.util.concurrent.Executor;
1:ef9eace: 
1:ef9eace: import org.junit.Test;
1:ef9eace: import org.junit.runner.RunWith;
1:ef9eace: import org.mockito.Mock;
1:ef9eace: import org.mockito.Mockito;
1:ef9eace: import org.mockito.runners.MockitoJUnitRunner;
1:ef9eace: 
1:ef9eace: @RunWith(MockitoJUnitRunner.class)
1:ef9eace: @SuppressWarnings("resource")
1:ef9eace: public class ScopedConnectionWrapperTest {
1:ef9eace: 
1:ef9eace: 	@Mock
1:ef9eace: 	Connection conn;
1:ef9eace: 	
1:ef9eace: 	@Test
1:ef9eace: 	public void testUnwrap() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.unwrap(List.class);
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).unwrap(List.class);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testIsWrapperFor() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.isWrapperFor(List.class);
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).isWrapperFor(List.class);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testCreateStatement() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.createStatement();
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).createStatement();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testPrepareStatement() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.prepareStatement("foo");
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).prepareStatement("foo");
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testPrepareCall() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.prepareCall("foo");
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).prepareCall("foo");
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testNativeSQL() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.nativeSQL("foo");
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).nativeSQL("foo");
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testAutoCommit() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.setAutoCommit(true);
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).setAutoCommit(true);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testGetAutoCommit() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.getAutoCommit();
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).getAutoCommit();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testCommit() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.commit();
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).commit();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testRollback() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.rollback();
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).rollback();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testClose() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.close();
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn, Mockito.times(0)).close();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testIsClosed() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.isClosed();
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).isClosed();
1:ef9eace: 	}
1:ef9eace: 	
1:ef9eace: 	@Test
1:ef9eace: 	public void testAbort() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.abort(x -> {});
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn, Mockito.times(0)).abort(Mockito.any(Executor.class));
1:ef9eace: 	}
1:ef9eace: 	
1:ef9eace: 	@Test
1:ef9eace: 	public void testTransactionIsolation() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.setTransactionIsolation(1);
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).setTransactionIsolation(1);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testGetTransactionIsolation() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.getTransactionIsolation();
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).getTransactionIsolation();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testSetSavepoint() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.setSavepoint();
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).setSavepoint();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testSetSavepointString() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.setSavepoint("foo");
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).setSavepoint("foo");
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testRollbackSavepoint() throws SQLException {
1:ef9eace: 		Savepoint s = Mockito.mock(Savepoint.class);
1:ef9eace: 		
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.rollback(s);
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).rollback(s);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testReleaseSavepoint() throws SQLException {
1:ef9eace: 		Savepoint s = Mockito.mock(Savepoint.class);
1:ef9eace: 		
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.releaseSavepoint(s);
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).releaseSavepoint(s);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testSetReadOnly() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.setReadOnly(true);
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).setReadOnly(true);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Test
1:ef9eace: 	public void testIsReadOnly() throws SQLException {
1:ef9eace: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1:ef9eace: 		wrapped.isReadOnly();
1:ef9eace: 		
1:ef9eace: 		Mockito.verify(conn).isReadOnly();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	
1:ef9eace: 	
1:ef9eace: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:2299957
commit:ef9eace
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jdbc.common.impl;
1: 
1: import java.awt.List;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Savepoint;
1: import java.util.concurrent.Executor;
1: 
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.mockito.Mock;
1: import org.mockito.Mockito;
1: import org.mockito.runners.MockitoJUnitRunner;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: @SuppressWarnings("resource")
1: public class ScopedConnectionWrapperTest {
1: 
1: 	@Mock
1: 	Connection conn;
1: 	
1: 	@Test
1: 	public void testUnwrap() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.unwrap(List.class);
1: 		
1: 		Mockito.verify(conn).unwrap(List.class);
1: 	}
1: 
1: 	@Test
1: 	public void testIsWrapperFor() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.isWrapperFor(List.class);
1: 		
1: 		Mockito.verify(conn).isWrapperFor(List.class);
1: 	}
1: 
1: 	@Test
1: 	public void testCreateStatement() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.createStatement();
1: 		
1: 		Mockito.verify(conn).createStatement();
1: 	}
1: 
1: 	@Test
1: 	public void testPrepareStatement() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.prepareStatement("foo");
1: 		
1: 		Mockito.verify(conn).prepareStatement("foo");
1: 	}
1: 
1: 	@Test
1: 	public void testPrepareCall() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.prepareCall("foo");
1: 		
1: 		Mockito.verify(conn).prepareCall("foo");
1: 	}
1: 
1: 	@Test
1: 	public void testNativeSQL() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.nativeSQL("foo");
1: 		
1: 		Mockito.verify(conn).nativeSQL("foo");
1: 	}
1: 
1: 	@Test
1: 	public void testAutoCommit() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.setAutoCommit(true);
1: 		
1: 		Mockito.verify(conn).setAutoCommit(true);
1: 	}
1: 
1: 	@Test
1: 	public void testGetAutoCommit() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.getAutoCommit();
1: 		
1: 		Mockito.verify(conn).getAutoCommit();
1: 	}
1: 
1: 	@Test
1: 	public void testCommit() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.commit();
1: 		
1: 		Mockito.verify(conn).commit();
1: 	}
1: 
1: 	@Test
1: 	public void testRollback() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.rollback();
1: 		
1: 		Mockito.verify(conn).rollback();
1: 	}
1: 
1: 	@Test
1: 	public void testClose() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.close();
1: 		
1: 		Mockito.verify(conn, Mockito.times(0)).close();
1: 	}
1: 
1: 	@Test
1: 	public void testIsClosed() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.isClosed();
1: 		
1: 		Mockito.verify(conn).isClosed();
1: 	}
1: 	
1: 	@Test
1: 	public void testAbort() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.abort(x -> {});
1: 		
1: 		Mockito.verify(conn, Mockito.times(0)).abort(Mockito.any(Executor.class));
1: 	}
1: 	
1: 	@Test
1: 	public void testTransactionIsolation() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.setTransactionIsolation(1);
1: 		
1: 		Mockito.verify(conn).setTransactionIsolation(1);
1: 	}
1: 
1: 	@Test
1: 	public void testGetTransactionIsolation() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.getTransactionIsolation();
1: 		
1: 		Mockito.verify(conn).getTransactionIsolation();
1: 	}
1: 
1: 	@Test
1: 	public void testSetSavepoint() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.setSavepoint();
1: 		
1: 		Mockito.verify(conn).setSavepoint();
1: 	}
1: 
1: 	@Test
1: 	public void testSetSavepointString() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.setSavepoint("foo");
1: 		
1: 		Mockito.verify(conn).setSavepoint("foo");
1: 	}
1: 
1: 	@Test
1: 	public void testRollbackSavepoint() throws SQLException {
1: 		Savepoint s = Mockito.mock(Savepoint.class);
1: 		
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.rollback(s);
1: 		
1: 		Mockito.verify(conn).rollback(s);
1: 	}
1: 
1: 	@Test
1: 	public void testReleaseSavepoint() throws SQLException {
1: 		Savepoint s = Mockito.mock(Savepoint.class);
1: 		
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.releaseSavepoint(s);
1: 		
1: 		Mockito.verify(conn).releaseSavepoint(s);
1: 	}
1: 
1: 	@Test
1: 	public void testSetReadOnly() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.setReadOnly(true);
1: 		
1: 		Mockito.verify(conn).setReadOnly(true);
1: 	}
1: 
1: 	@Test
1: 	public void testIsReadOnly() throws SQLException {
1: 		Connection wrapped = new ScopedConnectionWrapper(conn);
1: 		wrapped.isReadOnly();
1: 		
1: 		Mockito.verify(conn).isReadOnly();
1: 	}
1: 
1: 	
1: 	
1: }
============================================================================