1:9731fd6: /*
1:9731fd6:  * Licensed under the Apache License, Version 2.0 (the "License");
1:9731fd6:  * you may not use this file except in compliance with the License.
1:9731fd6:  * You may obtain a copy of the License at
1:9731fd6:  *
1:9731fd6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9731fd6:  *
1:9731fd6:  * Unless required by applicable law or agreed to in writing, software
1:9731fd6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9731fd6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9731fd6:  * See the License for the specific language governing permissions and
1:9731fd6:  * limitations under the License.
1:9731fd6:  */
1:9731fd6: package org.apache.aries.subsystem.obr.internal;
1:9731fd6: 
1:9731fd6: import java.util.Arrays;
1:9731fd6: import java.util.Collection;
1:9731fd6: import java.util.List;
1:9731fd6: import java.util.Map;
1:9731fd6: 
1:9731fd6: import org.osgi.framework.Constants;
1:9731fd6: import org.osgi.framework.FrameworkUtil;
1:9731fd6: import org.osgi.framework.InvalidSyntaxException;
1:9731fd6: import org.osgi.framework.Version;
1:9731fd6: import org.osgi.framework.namespace.IdentityNamespace;
1:9731fd6: import org.osgi.resource.Capability;
1:9731fd6: import org.osgi.resource.Requirement;
1:9731fd6: import org.osgi.resource.Resource;
1:9731fd6: import org.osgi.service.repository.Repository;
1:9731fd6: import org.slf4j.Logger;
1:9731fd6: import org.slf4j.LoggerFactory;
1:9731fd6: 
1:9731fd6: public class ResourceHelper {
1:9731fd6: 	private static final Logger logger = LoggerFactory.getLogger(ResourceHelper.class);
1:9731fd6: 	
1:9731fd6: 	public static String getContentAttribute(Resource resource) {
1:9731fd6: 		// TODO Add to constants.
1:9731fd6: 		return (String)getContentAttribute(resource, "osgi.content");
1:9731fd6: 	}
1:9731fd6: 	
1:9731fd6: 	public static Object getContentAttribute(Resource resource, String name) {
1:9731fd6: 		// TODO Add to constants.
1:9731fd6: 		List<Capability> capabilities = resource.getCapabilities("osgi.content");
1:9731fd6: 		Capability capability = capabilities.get(0);
1:9731fd6: 		return capability.getAttributes().get(name);
1:9731fd6: 	}
1:9731fd6: 	
1:9731fd6: 	public static Object getIdentityAttribute(Resource resource, String name) {
1:9731fd6: 		List<Capability> capabilities = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE);
1:9731fd6: 		Capability capability = capabilities.get(0);
1:9731fd6: 		return capability.getAttributes().get(name);
1:9731fd6: 	}
1:9731fd6: 	
1:9731fd6: 	public static Resource getResource(Requirement requirement, Repository repository) {
1:9731fd6: 		Map<Requirement, Collection<Capability>> map = repository.findProviders(Arrays.asList(requirement));
1:9731fd6: 		Collection<Capability> capabilities = map.get(requirement);
1:9731fd6: 		return capabilities == null ? null : capabilities.size() == 0 ? null : capabilities.iterator().next().getResource();
1:9731fd6: 	}
1:9731fd6: 	
1:9731fd6: 	public static String getSymbolicNameAttribute(Resource resource) {
1:9731fd6: 		return (String)getIdentityAttribute(resource, IdentityNamespace.IDENTITY_NAMESPACE);
1:9731fd6: 	}
1:9731fd6: 	
1:9731fd6: 	public static String getTypeAttribute(Resource resource) {
1:9731fd6: 		String result = (String)getIdentityAttribute(resource, IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE);
1:9731fd6: 		if (result == null)
1:9731fd6: 			result = IdentityNamespace.TYPE_BUNDLE;
1:9731fd6: 		return result;
1:9731fd6: 	}
1:9731fd6: 	
1:9731fd6: 	public static Version getVersionAttribute(Resource resource) {
1:9731fd6: 		Version result = (Version)getIdentityAttribute(resource, IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE);
1:9731fd6: 		if (result == null)
1:9731fd6: 			result = Version.emptyVersion;
1:9731fd6: 		return result;
1:9731fd6: 	}
1:9731fd6: 	
1:9731fd6: 	public static boolean matches(Requirement requirement, Capability capability) {
1:9731fd6: //		if (logger.isDebugEnabled())
1:9731fd6: //			logger.debug(LOG_ENTRY, "matches", new Object[]{requirement, capability});
1:9731fd6: 		boolean result = false;
1:9731fd6: 		if (requirement == null && capability == null)
1:9731fd6: 			result = true;
1:9731fd6: 		else if (requirement == null || capability == null) 
1:9731fd6: 			result = false;
1:9731fd6: 		else if (!capability.getNamespace().equals(requirement.getNamespace())) 
1:9731fd6: 			result = false;
1:9731fd6: 		else {
1:9731fd6: 			String filterStr = requirement.getDirectives().get(Constants.FILTER_DIRECTIVE);
1:9731fd6: 			if (filterStr == null)
1:9731fd6: 				result = true;
1:9731fd6: 			else {
1:9731fd6: 				try {
1:9731fd6: 					if (FrameworkUtil.createFilter(filterStr).matches(capability.getAttributes()))
1:9731fd6: 						result = true;
1:9731fd6: 				}
1:9731fd6: 				catch (InvalidSyntaxException e) {
1:9731fd6: 					logger.debug("Requirement had invalid filter string: " + requirement, e);
1:9731fd6: 					result = false;
1:9731fd6: 				}
1:9731fd6: 			}
1:9731fd6: 		}
1:9731fd6: 		// TODO Check directives.
1:9731fd6: //		logger.debug(LOG_EXIT, "matches", result);
1:9731fd6: 		return result;
1:9731fd6: 	}
1:9731fd6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:9731fd6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.obr.internal;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.repository.Repository;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class ResourceHelper {
1: 	private static final Logger logger = LoggerFactory.getLogger(ResourceHelper.class);
1: 	
1: 	public static String getContentAttribute(Resource resource) {
1: 		// TODO Add to constants.
1: 		return (String)getContentAttribute(resource, "osgi.content");
1: 	}
1: 	
1: 	public static Object getContentAttribute(Resource resource, String name) {
1: 		// TODO Add to constants.
1: 		List<Capability> capabilities = resource.getCapabilities("osgi.content");
1: 		Capability capability = capabilities.get(0);
1: 		return capability.getAttributes().get(name);
1: 	}
1: 	
1: 	public static Object getIdentityAttribute(Resource resource, String name) {
1: 		List<Capability> capabilities = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE);
1: 		Capability capability = capabilities.get(0);
1: 		return capability.getAttributes().get(name);
1: 	}
1: 	
1: 	public static Resource getResource(Requirement requirement, Repository repository) {
1: 		Map<Requirement, Collection<Capability>> map = repository.findProviders(Arrays.asList(requirement));
1: 		Collection<Capability> capabilities = map.get(requirement);
1: 		return capabilities == null ? null : capabilities.size() == 0 ? null : capabilities.iterator().next().getResource();
1: 	}
1: 	
1: 	public static String getSymbolicNameAttribute(Resource resource) {
1: 		return (String)getIdentityAttribute(resource, IdentityNamespace.IDENTITY_NAMESPACE);
1: 	}
1: 	
1: 	public static String getTypeAttribute(Resource resource) {
1: 		String result = (String)getIdentityAttribute(resource, IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE);
1: 		if (result == null)
1: 			result = IdentityNamespace.TYPE_BUNDLE;
1: 		return result;
1: 	}
1: 	
1: 	public static Version getVersionAttribute(Resource resource) {
1: 		Version result = (Version)getIdentityAttribute(resource, IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE);
1: 		if (result == null)
1: 			result = Version.emptyVersion;
1: 		return result;
1: 	}
1: 	
1: 	public static boolean matches(Requirement requirement, Capability capability) {
1: //		if (logger.isDebugEnabled())
1: //			logger.debug(LOG_ENTRY, "matches", new Object[]{requirement, capability});
1: 		boolean result = false;
1: 		if (requirement == null && capability == null)
1: 			result = true;
1: 		else if (requirement == null || capability == null) 
1: 			result = false;
1: 		else if (!capability.getNamespace().equals(requirement.getNamespace())) 
1: 			result = false;
1: 		else {
1: 			String filterStr = requirement.getDirectives().get(Constants.FILTER_DIRECTIVE);
1: 			if (filterStr == null)
1: 				result = true;
1: 			else {
1: 				try {
1: 					if (FrameworkUtil.createFilter(filterStr).matches(capability.getAttributes()))
1: 						result = true;
1: 				}
1: 				catch (InvalidSyntaxException e) {
1: 					logger.debug("Requirement had invalid filter string: " + requirement, e);
1: 					result = false;
1: 				}
1: 			}
1: 		}
1: 		// TODO Check directives.
1: //		logger.debug(LOG_EXIT, "matches", result);
1: 		return result;
1: 	}
1: }
============================================================================