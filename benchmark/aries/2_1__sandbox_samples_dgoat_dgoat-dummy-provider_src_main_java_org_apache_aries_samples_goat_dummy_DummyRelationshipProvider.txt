1:ed92957: /**
1:ed92957:  * Licensed to the Apache Software Foundation (ASF) under one
1:ed92957:  * or more contributor license agreements.  See the NOTICE file
1:ed92957:  * distributed with this work for additional information
1:ed92957:  * regarding copyright ownership.  The ASF licenses this file
1:ed92957:  * to you under the Apache License, Version 2.0 (the
1:ed92957:  * "License"); you may not use this file except in compliance
1:ed92957:  * with the License.  You may obtain a copy of the License at
1:ed92957:  *
1:ed92957:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ed92957:  *
1:ed92957:  * Unless required by applicable law or agreed to in writing,
1:ed92957:  * software distributed under the License is distributed on an
1:ed92957:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ed92957:  * KIND, either express or implied.  See the License for the
1:ed92957:  * specific language governing permissions and limitations
1:ed92957:  * under the License.
1:ed92957:  */
1:ed92957: package org.apache.aries.samples.goat.dummy;
1:ed92957: 
1:ed92957: import java.util.ArrayList;
1:ed92957: import java.util.List;
1:ed92957: 
1:ed92957: import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
1:ed92957: 
1:ed92957: import org.apache.aries.samples.goat.api.ComponentInfo;
1:ed92957: import org.apache.aries.samples.goat.api.ComponentInfoProvider;
1:ed92957: import org.apache.aries.samples.goat.api.RelationshipInfo;
1:ed92957: import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
1:ed92957: 
1:ed92957: public class DummyRelationshipProvider implements RelationshipInfoProvider {
1:ed92957: 
1:ed92957: 	ComponentInfoProvider cip = null;
1:ed92957: 	
1:ed92957: 	public DummyRelationshipProvider(ComponentInfoProvider cip){
1:ed92957: 		this.cip = cip;
1:ed92957: 	}
1:ed92957: 	
1:ed92957: 	@Override
1:ed92957: 	public List<RelationshipInfo> getRelationships() {
1:ed92957: 		
1:ed92957: 		ArrayList<RelationshipInfo> ris = new ArrayList<RelationshipInfo>();
1:ed92957: 		
1:ed92957: 		ComponentInfo ci1 = cip.getComponentForId("/root/1");
1:ed92957: 		ComponentInfo ci2 = cip.getComponentForId("/root/2");
1:ed92957: 		ComponentInfo ci3 = cip.getComponentForId("/root/3");
1:ed92957: 		
1:ed92957: 		RelationshipInfoImpl ri1 = new RelationshipInfoImpl();
1:ed92957: 		RelationshipInfoImpl ri2 = new RelationshipInfoImpl();
1:ed92957: 		RelationshipInfoImpl ri3 = new RelationshipInfoImpl();
1:ed92957: 		RelationshipInfoImpl ri4 = new RelationshipInfoImpl();
1:ed92957: 		RelationshipInfoImpl ri5 = new RelationshipInfoImpl();
1:ed92957: 		RelationshipInfoImpl ri6 = new RelationshipInfoImpl();
1:ed92957: 		ris.add(ri1);
1:ed92957: 		ris.add(ri2);
1:ed92957: 		ris.add(ri3);
1:ed92957: 		ris.add(ri4);
1:ed92957: 		ris.add(ri5);
1:ed92957: 		ris.add(ri6);
1:ed92957: 		
1:ed92957: 		ri1.setName("i.am.exported.by.1.and.used.by.2.and.3");
1:ed92957: 		ri1.setProvidedBy(ci1);
1:ed92957: 		ArrayList<ComponentInfo> c = new ArrayList<ComponentInfo>();
1:ed92957: 		c.add(ci2);
1:ed92957: 		c.add(ci3);
1:ed92957: 		ri1.setConsumedBy(c);
1:ed92957: 		ri1.setType("Package"); 
1:ed92957: 		
1:ed92957: 		ri2.setName("i.am.exported.by.1.and.used.by.3");
1:ed92957: 		ri2.setProvidedBy(ci1);
1:ed92957: 		c = new ArrayList<ComponentInfo>();
1:ed92957: 		c.add(ci3);
1:ed92957: 		ri2.setConsumedBy(c);
1:ed92957: 		ri2.setType("Package"); 
1:ed92957: 		
1:ed92957: 		ri3.setName("i.am.exported.by.2.and.used.by.3");
1:ed92957: 		ri3.setProvidedBy(ci2);
1:ed92957: 		c = new ArrayList<ComponentInfo>();
1:ed92957: 		c.add(ci3);
1:ed92957: 		ri3.setConsumedBy(c);
1:ed92957: 		ri3.setType("Package"); 
1:ed92957: 		
1:ed92957: 		ri4.setName("i.am.exported.by.3.and.used.by.2");
1:ed92957: 		ri4.setProvidedBy(ci3);
1:ed92957: 		c = new ArrayList<ComponentInfo>();
1:ed92957: 		c.add(ci2);
1:ed92957: 		ri4.setConsumedBy(c);
1:ed92957: 		ri4.setType("Package"); 
1:ed92957: 
1:ed92957: 		ri5.setName("i.am.a.funky.service.from.3.used.by.2");
1:ed92957: 		ri5.setProvidedBy(ci3);
1:ed92957: 		c = new ArrayList<ComponentInfo>();
1:ed92957: 		c.add(ci2);
1:ed92957: 		ri5.setConsumedBy(c);
1:ed92957: 		ri5.setType("Service");
1:ed92957: 		
1:ed92957: 		ri6.setName("i.am.a.funky.service.from.1.used.by.2");
1:ed92957: 		ri6.setProvidedBy(ci1);
1:ed92957: 		c = new ArrayList<ComponentInfo>();
1:ed92957: 		c.add(ci2);
1:ed92957: 		ri6.setConsumedBy(c);
1:ed92957: 		ri6.setType("Service");
1:ed92957: 		return ris;
1:ed92957: 	}
1:ed92957: 
1:ed92957: 	@Override
1:ed92957: 	public void registerRelationshipInfoListener(RelationshipInfoListener listener) {
1:ed92957: 		// TODO Auto-generated method stub
1:ed92957: 
1:ed92957: 	}
1:ed92957: 
1:ed92957: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:ed92957
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.goat.dummy;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
1: 
1: import org.apache.aries.samples.goat.api.ComponentInfo;
1: import org.apache.aries.samples.goat.api.ComponentInfoProvider;
1: import org.apache.aries.samples.goat.api.RelationshipInfo;
1: import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
1: 
1: public class DummyRelationshipProvider implements RelationshipInfoProvider {
1: 
1: 	ComponentInfoProvider cip = null;
1: 	
1: 	public DummyRelationshipProvider(ComponentInfoProvider cip){
1: 		this.cip = cip;
1: 	}
1: 	
1: 	@Override
1: 	public List<RelationshipInfo> getRelationships() {
1: 		
1: 		ArrayList<RelationshipInfo> ris = new ArrayList<RelationshipInfo>();
1: 		
1: 		ComponentInfo ci1 = cip.getComponentForId("/root/1");
1: 		ComponentInfo ci2 = cip.getComponentForId("/root/2");
1: 		ComponentInfo ci3 = cip.getComponentForId("/root/3");
1: 		
1: 		RelationshipInfoImpl ri1 = new RelationshipInfoImpl();
1: 		RelationshipInfoImpl ri2 = new RelationshipInfoImpl();
1: 		RelationshipInfoImpl ri3 = new RelationshipInfoImpl();
1: 		RelationshipInfoImpl ri4 = new RelationshipInfoImpl();
1: 		RelationshipInfoImpl ri5 = new RelationshipInfoImpl();
1: 		RelationshipInfoImpl ri6 = new RelationshipInfoImpl();
1: 		ris.add(ri1);
1: 		ris.add(ri2);
1: 		ris.add(ri3);
1: 		ris.add(ri4);
1: 		ris.add(ri5);
1: 		ris.add(ri6);
1: 		
1: 		ri1.setName("i.am.exported.by.1.and.used.by.2.and.3");
1: 		ri1.setProvidedBy(ci1);
1: 		ArrayList<ComponentInfo> c = new ArrayList<ComponentInfo>();
1: 		c.add(ci2);
1: 		c.add(ci3);
1: 		ri1.setConsumedBy(c);
1: 		ri1.setType("Package"); 
1: 		
1: 		ri2.setName("i.am.exported.by.1.and.used.by.3");
1: 		ri2.setProvidedBy(ci1);
1: 		c = new ArrayList<ComponentInfo>();
1: 		c.add(ci3);
1: 		ri2.setConsumedBy(c);
1: 		ri2.setType("Package"); 
1: 		
1: 		ri3.setName("i.am.exported.by.2.and.used.by.3");
1: 		ri3.setProvidedBy(ci2);
1: 		c = new ArrayList<ComponentInfo>();
1: 		c.add(ci3);
1: 		ri3.setConsumedBy(c);
1: 		ri3.setType("Package"); 
1: 		
1: 		ri4.setName("i.am.exported.by.3.and.used.by.2");
1: 		ri4.setProvidedBy(ci3);
1: 		c = new ArrayList<ComponentInfo>();
1: 		c.add(ci2);
1: 		ri4.setConsumedBy(c);
1: 		ri4.setType("Package"); 
1: 
1: 		ri5.setName("i.am.a.funky.service.from.3.used.by.2");
1: 		ri5.setProvidedBy(ci3);
1: 		c = new ArrayList<ComponentInfo>();
1: 		c.add(ci2);
1: 		ri5.setConsumedBy(c);
1: 		ri5.setType("Service");
1: 		
1: 		ri6.setName("i.am.a.funky.service.from.1.used.by.2");
1: 		ri6.setProvidedBy(ci1);
1: 		c = new ArrayList<ComponentInfo>();
1: 		c.add(ci2);
1: 		ri6.setConsumedBy(c);
1: 		ri6.setType("Service");
1: 		return ris;
1: 	}
1: 
1: 	@Override
1: 	public void registerRelationshipInfoListener(RelationshipInfoListener listener) {
1: 		// TODO Auto-generated method stub
1: 
1: 	}
1: 
1: }
============================================================================