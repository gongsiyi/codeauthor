1:29c4662: /*
1:29c4662:  * Licensed to the Apache Software Foundation (ASF) under one
1:29c4662:  * or more contributor license agreements.  See the NOTICE file
1:29c4662:  * distributed with this work for additional information
1:29c4662:  * regarding copyright ownership.  The ASF licenses this file
1:29c4662:  * to you under the Apache License, Version 2.0 (the
1:29c4662:  * "License"); you may not use this file except in compliance
1:29c4662:  * with the License.  You may obtain a copy of the License at
1:29c4662:  *
1:29c4662:  *   http://www.apache.org/licenses/LICENSE-2.0
1:29c4662:  *
1:29c4662:  * Unless required by applicable law or agreed to in writing,
1:29c4662:  * software distributed under the License is distributed on an
1:29c4662:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:29c4662:  * KIND, either express or implied.  See the License for the
1:29c4662:  * specific language governing permissions and limitations
1:29c4662:  * under the License.
1:29c4662:  */
2:29c4662: 
1:29c4662: package org.apache.aries.jndi.url;
1:29c4662: 
1:29c4662: import static org.junit.Assert.assertEquals;
1:29c4662: import static org.junit.Assert.assertNotNull;
1:29c4662: 
1:75070d8: import java.util.Arrays;
1:75070d8: import java.util.HashSet;
1:29c4662: import java.util.Hashtable;
1:29c4662: import java.util.Properties;
1:75070d8: import java.util.Set;
1:29c4662: 
1:c401954: import javax.naming.Binding;
1:29c4662: import javax.naming.Context;
1:29c4662: import javax.naming.InitialContext;
1:75070d8: import javax.naming.NameClassPair;
1:75070d8: import javax.naming.NameNotFoundException;
1:75070d8: import javax.naming.NamingEnumeration;
1:75070d8: import javax.naming.NamingException;
1:29c4662: 
1:75070d8: import org.apache.aries.mocks.BundleContextMock;
1:29c4662: import org.apache.aries.mocks.BundleMock;
1:29c4662: import org.apache.aries.unittest.mocks.Skeleton;
1:75070d8: import org.junit.After;
1:75070d8: import org.junit.AfterClass;
1:75070d8: import org.junit.Before;
1:29c4662: import org.junit.BeforeClass;
1:29c4662: import org.junit.Test;
1:29c4662: import org.osgi.framework.Bundle;
1:29c4662: import org.osgi.framework.BundleContext;
1:4c474b4: import org.osgi.framework.Constants;
1:29c4662: import org.osgi.service.blueprint.container.BlueprintContainer;
1:75070d8: import org.osgi.service.blueprint.container.NoSuchComponentException;
1:29c4662: 
1:29c4662: public class BlueprintURLContextTest {
1:29c4662: 
1:29c4662:   private static Bundle bundle;
1:29c4662:   
1:29c4662:   static class SimpleComponent { 
1:29c4662:     String id;
1:29c4662:     public SimpleComponent (String i) { 
1:29c4662:       id = i;
1:29c4662:     }
1:29c4662:     public String getIdMessage () { 
1:29c4662:       return id + "_message";
1:29c4662:     }
1:29c4662:   }
1:29c4662:   
1:75070d8:   static class AnotherComponent extends SimpleComponent { 
1:75070d8:     public AnotherComponent (String i) { 
1:75070d8:       super(i);
1:75070d8:     }
1:75070d8:     @Override
1:75070d8:     public String getIdMessage () { 
1:75070d8:       return "AnotherComponent with id " + id;
1:75070d8:     }
1:75070d8:   }
1:75070d8:   
1:75070d8:   static class BlueprintContainerStub 
1:75070d8:   { 
1:75070d8:     SimpleComponent comp1 = new SimpleComponent ("comp1");
1:75070d8:     AnotherComponent comp2 = new AnotherComponent ("comp2");
1:75070d8:     
1:75070d8:     public Object getComponentInstance (String compId) throws NoSuchComponentException { 
1:75070d8:       if (compId.equals("comp1")) { 
1:75070d8:         return comp1;
1:75070d8:       } else if (compId.equals("comp2")) { 
1:75070d8:         return comp2;
1:75070d8:       }
1:75070d8:       throw new NoSuchComponentException("Component does not exist", compId);
1:75070d8:     }
1:75070d8:     
1:75070d8:     public Set<String> getComponentIds() { 
1:75070d8:       return new HashSet<String>(Arrays.asList("comp1", "comp2"));
1:75070d8:     }
1:75070d8:   }
1:75070d8:   
1:29c4662:   
1:29c4662:   @BeforeClass
1:29c4662:   public static void setup() { 
1:29c4662:     bundle = Skeleton.newMock(new BundleMock("aBundle", new Hashtable<String, String>()), Bundle.class);
1:29c4662:     BundleContext bc = bundle.getBundleContext();
1:29c4662:     new org.apache.aries.jndi.startup.Activator().start(bc);
1:75070d8:     Activator a = new Activator();
1:75070d8:     a.start(bc);
1:75070d8:     a.serviceFound();
1:29c4662:     
1:29c4662:     // Register a BlueprintContainer mock that will answer getComponentInstance(String id) calls
1:75070d8:     BlueprintContainer bpc = Skeleton.newMock(new BlueprintContainerStub(), BlueprintContainer.class);
1:29c4662:     bc.registerService("org.osgi.service.blueprint.container.BlueprintContainer", bpc, new Hashtable<String, String>());
1:29c4662:     
1:29c4662:   }
1:29c4662:   
1:75070d8:   @AfterClass
1:75070d8:   public static void teardown() { 
1:75070d8:     BundleContextMock.clear();
1:75070d8:   }
1:75070d8:   
1:75070d8:   @Before
1:75070d8:   public void setupClassLoader() { 
1:75070d8:     BundleMock mock = new BundleMock("bundle.for.new.initial.context", new Properties());
1:75070d8:     Thread.currentThread().setContextClassLoader(mock.getClassLoader());
1:75070d8:   }
1:75070d8:   
1:75070d8:   @After
1:75070d8:   public void restoreClassLoader() { 
1:75070d8:     Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
1:75070d8:   }
1:75070d8:   
1:75070d8: 
1:75070d8:   /**
1:75070d8:    * Check that we can directly address a blueprint component
1:75070d8:    */
1:c401954:   @Test
1:c401954:   public void testSimpleComponentLookup() throws Exception { 
1:29c4662:     BlueprintURLContext bpURLc = new BlueprintURLContext (bundle, new Hashtable<String, String>());
1:29c4662:     SimpleComponent sc = (SimpleComponent) bpURLc.lookup("blueprint:comp/comp1");
1:29c4662:     assertNotNull (sc);
1:29c4662:     String msg = sc.getIdMessage();
2:29c4662:     assertEquals ("comp1 message wrong", "comp1_message", msg);
1:29c4662:   }
1:29c4662:   
1:75070d8:   /**
1:75070d8:    * Validate that we can create an InitialContext at blueprint:comp scope, and then 
1:75070d8:    * look components up within it
1:75070d8:    */
1:29c4662:   @Test
1:c401954:   public void testTwoLevelComponentLookup() throws Exception { 
1:29c4662:     InitialContext ctx = new InitialContext();
1:29c4662:     Context ctx2 = (Context) ctx.lookup("blueprint:comp");
1:75070d8:     SimpleComponent sc = (SimpleComponent) ctx2.lookup("comp2"); 
1:29c4662:     assertNotNull (sc);
1:29c4662:     String msg = sc.getIdMessage();
1:75070d8:     assertEquals ("comp2 message wrong", "AnotherComponent with id comp2", msg);
1:29c4662:   }
1:29c4662:   
1:75070d8:   /**
1:75070d8:    * Check that we get a NameNotFoundException if we lookup something not in the
1:75070d8:    * registry.
1:75070d8:    * 
1:75070d8:    * @throws NamingException
1:75070d8:    */
1:75070d8:   @Test(expected=NameNotFoundException.class)
1:75070d8:   public void testLookupForServiceWeNeverHad() throws NamingException
1:75070d8:   {
1:75070d8:     InitialContext ctx = new InitialContext();
1:75070d8:     ctx.lookup("blueprint:comp/this.is.not.a.component");
1:75070d8:   }
1:75070d8:   
1:75070d8: 
1:75070d8:   /**
1:c401954:    * Validate that list() function works for BlueprintURLContext. 
1:c401954:    * This returns an enumeration of component id -> component class name pairs
1:75070d8:    */
1:75070d8:   @Test
1:c401954:   public void testList() throws Exception { 
1:75070d8:     InitialContext ctx = new InitialContext();
1:75070d8:     NamingEnumeration<NameClassPair> compList = ctx.list("blueprint:comp");
1:75070d8:     
1:75070d8:     Set<String> expectedCompIds = new BlueprintContainerStub().getComponentIds();
1:75070d8:     while (compList.hasMore()) { 
1:75070d8:       NameClassPair ncp = compList.next();
1:75070d8:       String compId = ncp.getName();
1:75070d8:       String compClass = ncp.getClassName();
1:75070d8:       if (compId.equals("comp1")) { 
1:75070d8:         assertEquals ("comp1 class wrong in list", SimpleComponent.class.getName(), compClass);
1:75070d8:       } else if (compId.equals("comp2")) { 
1:75070d8:         assertEquals ("comp2 class wrong in list", AnotherComponent.class.getName(), compClass);
1:75070d8:       }
1:c401954:       expectedCompIds.remove(compId);
1:75070d8:     }
1:75070d8:     assertEquals ("Not all expected components were found", expectedCompIds.size(), 0);
1:75070d8:   }
1:75070d8:   
1:c401954:   /**
1:c401954:    * Test BlueprintURLContext.listBindings() 
1:c401954:    * This returns an enumeration of component id -> component pairs
1:c401954:    */
1:4c474b4:   @Test
1:c401954:   public void testListBindings() throws Exception { 
1:c401954:     InitialContext ctx = new InitialContext();
1:c401954:     NamingEnumeration<Binding> bindings = ctx.listBindings("blueprint:comp");
1:c401954:     
1:c401954:     Set<String> expectedCompIds = new BlueprintContainerStub().getComponentIds();
1:c401954:     while (bindings.hasMore()) { 
1:c401954:       Binding b = bindings.next();
1:c401954:       String compId = b.getName();
1:c401954:       Object component = b.getObject();
1:c401954:       if (compId.equals("comp1")) { 
1:c401954:         SimpleComponent sc = (SimpleComponent) component;
1:c401954:         assertEquals ("comp1 message wrong", "comp1_message", sc.getIdMessage());
1:c401954:       } else if (compId.equals("comp2")) { 
1:c401954:         AnotherComponent ac = (AnotherComponent) component;
1:c401954:         assertEquals ("comp2 message wrong", "AnotherComponent with id comp2", ac.getIdMessage());
1:c401954:       }
1:c401954:       expectedCompIds.remove(compId);
1:c401954:     }
1:c401954:     assertEquals ("Not all expected components were found", expectedCompIds.size(), 0);
1:c401954:   }
1:75070d8:   
1:29c4662:   @Test 
1:4c474b4:   public void testBlueprintTimeoutExtractionBothSpecified() { 
1:4c474b4:     Bundle b = bundleMock ("bundle.name;x=y;p:=q;blueprint.graceperiod:=true;blueprint.timeout:=10000;a=b;c:=d");
1:4c474b4:     int timeout = BlueprintURLContext.getGracePeriod(b);
1:4c474b4:     assertEquals ("graceperiod wrong", 10000, timeout);
1:4c474b4:   }
1:4c474b4:   
1:4c474b4:   @Test
1:4c474b4:   public void testGracePeriodFalseHandled() throws Exception  { 
1:4c474b4:     Bundle b = bundleMock ("bundle.name;x=y;p:=q;blueprint.graceperiod:=false;blueprint.timeout:=10000;a=b;c:=d");
1:4c474b4:     int timeout = BlueprintURLContext.getGracePeriod(b);
1:4c474b4:     assertEquals ("graceperiod wrong", -1, timeout);
1:4c474b4:     
1:4c474b4:     b = bundleMock ("bundle.name;x=y;p:=q;blueprint.graceperiod:=false;a=b;c:=d");
1:4c474b4:     timeout = BlueprintURLContext.getGracePeriod(b);
1:4c474b4:     assertEquals ("graceperiod wrong", -1, timeout);
1:4c474b4:   }
1:4c474b4:   
1:4c474b4:   @Test 
1:4c474b4:   public void testDefaultsReturnedByDefault() throws Exception { 
1:4c474b4:     Bundle b = bundleMock("bundle.name;x=y;p:=q;blueprint.graceperiod:=true;a=b;c:=d");
1:4c474b4:     int timeout = BlueprintURLContext.getGracePeriod(b);
1:4c474b4:     assertEquals ("graceperiod wrong", 300000, timeout);
1:4c474b4:     
1:4c474b4:     b = bundleMock ("bundle.name;x=y;p:=q;a=b;c:=d");
1:4c474b4:     timeout = BlueprintURLContext.getGracePeriod(b);
1:4c474b4:     assertEquals ("graceperiod wrong", 300000, timeout);
1:4c474b4:   }
1:4c474b4:   
1:4c474b4:   Bundle bundleMock (String bundleSymbolicNameHeader) { 
1:4c474b4:     Hashtable<String, String> props = new Hashtable<String, String>();
1:4c474b4:     props.put(Constants.BUNDLE_SYMBOLICNAME, bundleSymbolicNameHeader);
1:4c474b4:     Bundle result = Skeleton.newMock(new BundleMock("aBundle", props), Bundle.class);
1:4c474b4:     return result;
1:4c474b4:   }
1:29c4662: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:4c474b4
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Constants;
/////////////////////////////////////////////////////////////////////////
1:   @Test 
1:   public void testBlueprintTimeoutExtractionBothSpecified() { 
1:     Bundle b = bundleMock ("bundle.name;x=y;p:=q;blueprint.graceperiod:=true;blueprint.timeout:=10000;a=b;c:=d");
1:     int timeout = BlueprintURLContext.getGracePeriod(b);
1:     assertEquals ("graceperiod wrong", 10000, timeout);
1:   }
1:   
1:   @Test
1:   public void testGracePeriodFalseHandled() throws Exception  { 
1:     Bundle b = bundleMock ("bundle.name;x=y;p:=q;blueprint.graceperiod:=false;blueprint.timeout:=10000;a=b;c:=d");
1:     int timeout = BlueprintURLContext.getGracePeriod(b);
1:     assertEquals ("graceperiod wrong", -1, timeout);
1:     
1:     b = bundleMock ("bundle.name;x=y;p:=q;blueprint.graceperiod:=false;a=b;c:=d");
1:     timeout = BlueprintURLContext.getGracePeriod(b);
1:     assertEquals ("graceperiod wrong", -1, timeout);
1:   }
1:   
1:   @Test 
1:   public void testDefaultsReturnedByDefault() throws Exception { 
1:     Bundle b = bundleMock("bundle.name;x=y;p:=q;blueprint.graceperiod:=true;a=b;c:=d");
1:     int timeout = BlueprintURLContext.getGracePeriod(b);
1:     assertEquals ("graceperiod wrong", 300000, timeout);
1:     
1:     b = bundleMock ("bundle.name;x=y;p:=q;a=b;c:=d");
1:     timeout = BlueprintURLContext.getGracePeriod(b);
1:     assertEquals ("graceperiod wrong", 300000, timeout);
1:   }
1:   
1:   Bundle bundleMock (String bundleSymbolicNameHeader) { 
1:     Hashtable<String, String> props = new Hashtable<String, String>();
1:     props.put(Constants.BUNDLE_SYMBOLICNAME, bundleSymbolicNameHeader);
1:     Bundle result = Skeleton.newMock(new BundleMock("aBundle", props), Bundle.class);
1:     return result;
1:   }
commit:c401954
/////////////////////////////////////////////////////////////////////////
1: import javax.naming.Binding;
/////////////////////////////////////////////////////////////////////////
1:   public void testSimpleComponentLookup() throws Exception { 
/////////////////////////////////////////////////////////////////////////
1:   public void testTwoLevelComponentLookup() throws Exception { 
/////////////////////////////////////////////////////////////////////////
1:    * Validate that list() function works for BlueprintURLContext. 
1:    * This returns an enumeration of component id -> component class name pairs
1:   public void testList() throws Exception { 
/////////////////////////////////////////////////////////////////////////
1:       expectedCompIds.remove(compId);
1:   /**
1:    * Test BlueprintURLContext.listBindings() 
1:    * This returns an enumeration of component id -> component pairs
1:    */
1:   @Test
1:   public void testListBindings() throws Exception { 
1:     InitialContext ctx = new InitialContext();
1:     NamingEnumeration<Binding> bindings = ctx.listBindings("blueprint:comp");
1:     
1:     Set<String> expectedCompIds = new BlueprintContainerStub().getComponentIds();
1:     while (bindings.hasMore()) { 
1:       Binding b = bindings.next();
1:       String compId = b.getName();
1:       Object component = b.getObject();
1:       if (compId.equals("comp1")) { 
1:         SimpleComponent sc = (SimpleComponent) component;
1:         assertEquals ("comp1 message wrong", "comp1_message", sc.getIdMessage());
1:       } else if (compId.equals("comp2")) { 
1:         AnotherComponent ac = (AnotherComponent) component;
1:         assertEquals ("comp2 message wrong", "AnotherComponent with id comp2", ac.getIdMessage());
1:       }
1:       expectedCompIds.remove(compId);
1:     }
1:     assertEquals ("Not all expected components were found", expectedCompIds.size(), 0);
1:   }
commit:75070d8
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.HashSet;
1: import java.util.Set;
1: import javax.naming.NameClassPair;
1: import javax.naming.NameNotFoundException;
1: import javax.naming.NamingEnumeration;
1: import javax.naming.NamingException;
1: import org.apache.aries.mocks.BundleContextMock;
1: import org.junit.After;
1: import org.junit.AfterClass;
1: import org.junit.Before;
1: import org.osgi.service.blueprint.container.NoSuchComponentException;
/////////////////////////////////////////////////////////////////////////
1:   static class AnotherComponent extends SimpleComponent { 
1:     public AnotherComponent (String i) { 
1:       super(i);
1:     }
1:     @Override
1:     public String getIdMessage () { 
1:       return "AnotherComponent with id " + id;
1:     }
1:   }
1:   
1:   static class BlueprintContainerStub 
1:   { 
1:     SimpleComponent comp1 = new SimpleComponent ("comp1");
1:     AnotherComponent comp2 = new AnotherComponent ("comp2");
1:     
1:     public Object getComponentInstance (String compId) throws NoSuchComponentException { 
1:       if (compId.equals("comp1")) { 
1:         return comp1;
1:       } else if (compId.equals("comp2")) { 
1:         return comp2;
1:       }
1:       throw new NoSuchComponentException("Component does not exist", compId);
1:     }
1:     
1:     public Set<String> getComponentIds() { 
1:       return new HashSet<String>(Arrays.asList("comp1", "comp2"));
1:     }
1:   }
1:   
1:     Activator a = new Activator();
1:     a.start(bc);
1:     a.serviceFound();
1:     BlueprintContainer bpc = Skeleton.newMock(new BlueprintContainerStub(), BlueprintContainer.class);
1:   @AfterClass
1:   public static void teardown() { 
1:     BundleContextMock.clear();
1:   }
1:   
1:   @Before
1:   public void setupClassLoader() { 
1:     BundleMock mock = new BundleMock("bundle.for.new.initial.context", new Properties());
1:     Thread.currentThread().setContextClassLoader(mock.getClassLoader());
1:   }
1:   
1:   @After
1:   public void restoreClassLoader() { 
1:     Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
1:   }
1:   
1: 
1:   /**
1:    * Check that we can directly address a blueprint component
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Validate that we can create an InitialContext at blueprint:comp scope, and then 
1:    * look components up within it
1:    */
1:     SimpleComponent sc = (SimpleComponent) ctx2.lookup("comp2"); 
1:     assertEquals ("comp2 message wrong", "AnotherComponent with id comp2", msg);
1:   /**
1:    * Check that we get a NameNotFoundException if we lookup something not in the
1:    * registry.
1:    * 
1:    * @throws NamingException
1:    */
1:   @Test(expected=NameNotFoundException.class)
1:   public void testLookupForServiceWeNeverHad() throws NamingException
1:   {
1:     InitialContext ctx = new InitialContext();
1:     ctx.lookup("blueprint:comp/this.is.not.a.component");
1:   }
1:   
1: 
1:   /**
0:    * Validate that list() function works for BlueprintURLContext
1:    */
1:   @Test
0:   public void checkList() throws Exception { 
1:     InitialContext ctx = new InitialContext();
1:     NamingEnumeration<NameClassPair> compList = ctx.list("blueprint:comp");
1:     
1:     Set<String> expectedCompIds = new BlueprintContainerStub().getComponentIds();
1:     while (compList.hasMore()) { 
1:       NameClassPair ncp = compList.next();
1:       String compId = ncp.getName();
1:       String compClass = ncp.getClassName();
1:       if (compId.equals("comp1")) { 
1:         assertEquals ("comp1 class wrong in list", SimpleComponent.class.getName(), compClass);
1:       } else if (compId.equals("comp2")) { 
1:         assertEquals ("comp2 class wrong in list", AnotherComponent.class.getName(), compClass);
1:       }
0:       expectedCompIds.remove(ncp.getName());
1:     }
1:     assertEquals ("Not all expected components were found", expectedCompIds.size(), 0);
1:   }
1:   
1:   
commit:29c4662
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.jndi.url;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.Hashtable;
1: import java.util.Properties;
1: 
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: 
1: import org.apache.aries.mocks.BundleMock;
0: import org.apache.aries.unittest.mocks.MethodCall;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: 
1: public class BlueprintURLContextTest {
1: 
1:   private static Bundle bundle;
1:   
1:   static class SimpleComponent { 
1:     String id;
1:     public SimpleComponent (String i) { 
1:       id = i;
1:     }
1:     public String getIdMessage () { 
1:       return id + "_message";
1:     }
1:   }
1:   
1:   
1:   @BeforeClass
1:   public static void setup() { 
1:     bundle = Skeleton.newMock(new BundleMock("aBundle", new Hashtable<String, String>()), Bundle.class);
1:     BundleContext bc = bundle.getBundleContext();
1:     new org.apache.aries.jndi.startup.Activator().start(bc);
0:     new Activator().start(bc);
1:     
1:     // Register a BlueprintContainer mock that will answer getComponentInstance(String id) calls
0:     SimpleComponent comp1 = new SimpleComponent ("comp1");
0:     BlueprintContainer bpc = Skeleton.newMock(BlueprintContainer.class);
0:     Skeleton.getSkeleton(bpc).setReturnValue(new MethodCall(BlueprintContainer.class, "getComponentInstance", String.class), comp1);
1:     bc.registerService("org.osgi.service.blueprint.container.BlueprintContainer", bpc, new Hashtable<String, String>());
1:     
1:   }
1:   
1:   @Test
0:   public void simpleComponentLookupTest () throws Exception { 
1:     BlueprintURLContext bpURLc = new BlueprintURLContext (bundle, new Hashtable<String, String>());
1:     SimpleComponent sc = (SimpleComponent) bpURLc.lookup("blueprint:comp/comp1");
1:     assertNotNull (sc);
1:     String msg = sc.getIdMessage();
1:     assertEquals ("comp1 message wrong", "comp1_message", msg);
1:   }
1:   
1:   @Test
0:   public void twoLevelComponentLookupTest() throws Exception { 
0:     BundleMock mock = new BundleMock("bundle.for.new.initial.context", new Properties());
0:     Thread.currentThread().setContextClassLoader(mock.getClassLoader());
1:     
1:     InitialContext ctx = new InitialContext();
1:     Context ctx2 = (Context) ctx.lookup("blueprint:comp");
0:     SimpleComponent sc = (SimpleComponent) ctx2.lookup("comp1"); 
1:     assertNotNull (sc);
1:     String msg = sc.getIdMessage();
1:     assertEquals ("comp1 message wrong", "comp1_message", msg);
1:   }
1:   
1: }
============================================================================