1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.container;
1:f13c6ac: 
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Map;
1:f13c6ac: import java.net.URI;
1:f13c6ac: 
1:f13c6ac: import junit.framework.TestCase;
1:f13c6ac: 
1:f13c6ac: public class GenericTypeTest extends TestCase {
1:f13c6ac: 
1:f13c6ac:     private GenericType parse(String expression) throws Exception {
1:f13c6ac:         GenericType type = GenericType.parse(expression, getClass().getClassLoader());
1:f13c6ac:         assertEquals(expression, type.toString());
1:f13c6ac:         return type;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void testArrays() {
1:f13c6ac:         assertTrue(AggregateConverter.isAssignable(new Object[0], new GenericType(Object[].class)));
1:f13c6ac:         assertFalse(AggregateConverter.isAssignable(new Object[0], new GenericType(String[].class)));
1:f13c6ac:         assertTrue(AggregateConverter.isAssignable(new String[0], new GenericType(String[].class)));
1:f13c6ac:         assertFalse(AggregateConverter.isAssignable(new String[0], new GenericType(URI[].class)));
1:f13c6ac:         assertTrue(AggregateConverter.isAssignable(new String[0], new GenericType(Object[].class)));
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testParseTypes() throws Exception {
1:f13c6ac:         
1:f13c6ac:         GenericType type = parse("java.util.List<java.lang.String[]>");
1:f13c6ac:         assertEquals(List.class, type.getRawClass());
1:f13c6ac:         assertEquals(1, type.size());
1:f13c6ac:         assertEquals(String[].class, type.getActualTypeArgument(0).getRawClass());
1:f13c6ac:         assertEquals(1, type.getActualTypeArgument(0).size());
1:f13c6ac:         assertEquals(String.class, type.getActualTypeArgument(0).getActualTypeArgument(0).getRawClass());
1:f13c6ac: 
1:f13c6ac:         type = parse("java.util.Map<int,java.util.List<java.lang.Integer>[]>");
1:f13c6ac:         assertEquals(Map.class, type.getRawClass());
1:f13c6ac:         assertEquals(2, type.size());
1:f13c6ac:         assertEquals(int.class, type.getActualTypeArgument(0).getRawClass());
1:f13c6ac:         assertEquals(List[].class, type.getActualTypeArgument(1).getRawClass());
1:f13c6ac:         assertEquals(1, type.getActualTypeArgument(1).size());
1:f13c6ac:         assertEquals(Integer.class, type.getActualTypeArgument(1).getActualTypeArgument(0).getActualTypeArgument(0).getRawClass());
1:f13c6ac: 
1:f13c6ac:         type = parse("java.util.List<java.lang.Integer>[]");
1:f13c6ac:         assertEquals(List[].class, type.getRawClass());
1:f13c6ac:         assertEquals(1, type.size());
1:f13c6ac:         assertEquals(Integer.class, type.getActualTypeArgument(0).getActualTypeArgument(0).getRawClass());
1:b222d94: 
1:b222d94:         type = parse("java.util.List<? extends java.lang.Number>");
1:b222d94:         assertEquals(List.class, type.getRawClass());
1:b222d94:         assertEquals(1, type.size());
1:b222d94:         assertEquals(Number.class, type.getActualTypeArgument(0).getRawClass());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testBasic() throws Exception {        
1:f13c6ac:         GenericType type = new GenericType(int[].class);
1:f13c6ac:         assertEquals("int[]", type.toString());
1:f13c6ac:         assertEquals(int[].class, type.getRawClass());
1:f13c6ac:         assertEquals(0, type.getActualTypeArgument(0).size());
1:f13c6ac:     }
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:b222d94
/////////////////////////////////////////////////////////////////////////
1: 
1:         type = parse("java.util.List<? extends java.lang.Number>");
1:         assertEquals(List.class, type.getRawClass());
1:         assertEquals(1, type.size());
1:         assertEquals(Number.class, type.getActualTypeArgument(0).getRawClass());
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.container;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: import java.net.URI;
1: 
1: import junit.framework.TestCase;
1: 
1: public class GenericTypeTest extends TestCase {
1: 
1:     private GenericType parse(String expression) throws Exception {
1:         GenericType type = GenericType.parse(expression, getClass().getClassLoader());
1:         assertEquals(expression, type.toString());
1:         return type;
1:     }
1:     
1:     public void testArrays() {
1:         assertTrue(AggregateConverter.isAssignable(new Object[0], new GenericType(Object[].class)));
1:         assertFalse(AggregateConverter.isAssignable(new Object[0], new GenericType(String[].class)));
1:         assertTrue(AggregateConverter.isAssignable(new String[0], new GenericType(String[].class)));
1:         assertFalse(AggregateConverter.isAssignable(new String[0], new GenericType(URI[].class)));
1:         assertTrue(AggregateConverter.isAssignable(new String[0], new GenericType(Object[].class)));
1:     }
1: 
1:     public void testParseTypes() throws Exception {
1:         
1:         GenericType type = parse("java.util.List<java.lang.String[]>");
1:         assertEquals(List.class, type.getRawClass());
1:         assertEquals(1, type.size());
1:         assertEquals(String[].class, type.getActualTypeArgument(0).getRawClass());
1:         assertEquals(1, type.getActualTypeArgument(0).size());
1:         assertEquals(String.class, type.getActualTypeArgument(0).getActualTypeArgument(0).getRawClass());
1: 
1:         type = parse("java.util.Map<int,java.util.List<java.lang.Integer>[]>");
1:         assertEquals(Map.class, type.getRawClass());
1:         assertEquals(2, type.size());
1:         assertEquals(int.class, type.getActualTypeArgument(0).getRawClass());
1:         assertEquals(List[].class, type.getActualTypeArgument(1).getRawClass());
1:         assertEquals(1, type.getActualTypeArgument(1).size());
1:         assertEquals(Integer.class, type.getActualTypeArgument(1).getActualTypeArgument(0).getActualTypeArgument(0).getRawClass());
1: 
1:         type = parse("java.util.List<java.lang.Integer>[]");
1:         assertEquals(List[].class, type.getRawClass());
1:         assertEquals(1, type.size());
1:         assertEquals(Integer.class, type.getActualTypeArgument(0).getActualTypeArgument(0).getRawClass());
1:     }
1: 
1:     public void testBasic() throws Exception {        
1:         GenericType type = new GenericType(int[].class);
1:         assertEquals("int[]", type.toString());
1:         assertEquals(int[].class, type.getRawClass());
1:         assertEquals(0, type.getActualTypeArgument(0).size());
1:     }
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.container;
============================================================================