1:f2a8ed5: /*
1:f2a8ed5:  * Licensed to the Apache Software Foundation (ASF) under one
1:f2a8ed5:  * or more contributor license agreements.  See the NOTICE file
1:f2a8ed5:  * distributed with this work for additional information
1:f2a8ed5:  * regarding copyright ownership.  The ASF licenses this file
1:f2a8ed5:  * to you under the Apache License, Version 2.0 (the
1:f2a8ed5:  * "License"); you may not use this file except in compliance
1:f2a8ed5:  * with the License.  You may obtain a copy of the License at
1:f2a8ed5:  *
1:f2a8ed5:  *  http://www.apache.org/licenses/LICENSE-2.0
1:f2a8ed5:  *
1:f2a8ed5:  * Unless required by applicable law or agreed to in writing,
1:f2a8ed5:  * software distributed under the License is distributed on an
1:f2a8ed5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f2a8ed5:  * KIND, either express or implied.  See the License for the
1:f2a8ed5:  * specific language governing permissions and limitations
1:f2a8ed5:  * under the License.
1:f2a8ed5:  */
20:f2a8ed5: 
1:f2a8ed5: package org.apache.aries.plugin.esa;
1:f2a8ed5: 
1:f2a8ed5: import java.io.IOException;
1:f2a8ed5: import java.io.InputStream;
1:f2a8ed5: import java.util.Map;
1:f2a8ed5: import java.util.jar.Attributes;
1:f2a8ed5: import java.util.jar.Manifest;
1:f2a8ed5: import java.util.zip.ZipEntry;
1:f2a8ed5: import java.util.zip.ZipFile;
1:f2a8ed5: 
1:3ce2e75: import aQute.lib.osgi.Analyzer;
1:3ce2e75: 
1:f2a8ed5: import org.apache.maven.artifact.Artifact;
1:daec486: import org.apache.maven.artifact.versioning.VersionRange;
1:f2a8ed5: import org.apache.maven.plugin.logging.Log;
1:f2a8ed5: import org.apache.maven.shared.osgi.DefaultMaven2OsgiConverter;
1:f2a8ed5: import org.apache.maven.shared.osgi.Maven2OsgiConverter;
1:f2a8ed5: 
1:f2a8ed5: public class ContentInfo {
1:3ce2e75: 
1:f2a8ed5:     /**
1:f2a8ed5:      * Coverter for maven pom values to OSGi manifest values (pulled in from the maven-bundle-plugin)
1:f2a8ed5:      */
1:f2a8ed5:     private static Maven2OsgiConverter maven2OsgiConverter = new DefaultMaven2OsgiConverter();
1:3ce2e75: 
1:f2a8ed5:     private String symbolicName;
1:f2a8ed5:     private String type;
1:f2a8ed5:     private String version;
1:daec486:     private VersionRange mavenVersionRange;
1:3ce2e75: 
1:f2a8ed5:     public String getSymbolicName() {
1:f2a8ed5:         return symbolicName;
1:f2a8ed5:     }
1:3ce2e75: 
1:f2a8ed5:     public String getType() {
1:f2a8ed5:         return type;
1:f2a8ed5:     }
1:3ce2e75: 
1:f2a8ed5:     public String getVersion() {
1:f2a8ed5:         return version;
1:f2a8ed5:     }
1:3ce2e75: 
1:f2a8ed5:     public String getContentLine() {
1:f2a8ed5:         String line = symbolicName;
1:f2a8ed5:         if (type != null) {
1:f2a8ed5:             line += ";type=\"" + type + "\"";
1:f2a8ed5:         }
1:daec486:         if (mavenVersionRange != null && mavenVersionRange.hasRestrictions()) {
1:daec486:             line += ";version=\"" + mavenVersionRange + '"';
1:daec486:         } else {
1:daec486:             if (version != null) {
1:daec486:                 line += ";version=\"[" + version + "," + version + "]\"";
1:daec486:             }
1:f2a8ed5:         }
1:f2a8ed5:         return line;
1:f2a8ed5:     }
1:3ce2e75: 
1:f2a8ed5:     public static ContentInfo create(Artifact artifact, Log log) {
1:f2a8ed5:         ZipFile zip = null;
1:f2a8ed5:         try {
1:f2a8ed5:             zip = new ZipFile(artifact.getFile());
1:f2a8ed5:             ZipEntry entry = zip.getEntry("META-INF/MANIFEST.MF");
1:f2a8ed5:             if (entry != null) {
1:f2a8ed5:                 Manifest mf = getManifest(zip, entry);
1:f2a8ed5:                 return handleManifest(artifact, mf);
1:f2a8ed5:             } else {
1:f2a8ed5:                 // no manifest.mf
1:f2a8ed5:                 entry = zip.getEntry("OSGI-INF/SUBSYSTEM.MF");
1:f2a8ed5:                 if (entry != null) {
1:f2a8ed5:                     Manifest mf = getManifest(zip, entry);
1:f2a8ed5:                     return handleSubsystem(artifact, mf);
1:f2a8ed5:                 } else {
1:f2a8ed5:                     // and no subsystem.mf
1:f2a8ed5:                     return handleUnknown(artifact);
1:f2a8ed5:                 }
1:f2a8ed5:             }
1:f2a8ed5:         } catch (Exception e) {
1:f2a8ed5:             log.warn("Error creating content information", e);
1:f2a8ed5:             return null;
1:f2a8ed5:         } finally {
1:f2a8ed5:             if (zip != null) {
1:f2a8ed5:                try { zip.close(); } catch (IOException ignore) {}
1:f2a8ed5:             }
1:f2a8ed5:         }
1:f2a8ed5:     }
1:f2a8ed5: 
1:f2a8ed5:     private static ContentInfo handleUnknown(Artifact artifact) {
1:f2a8ed5:         ContentInfo info = new ContentInfo();
1:f2a8ed5:         info.symbolicName = maven2OsgiConverter.getBundleSymbolicName(artifact);
1:3ce2e75:         info.version = Analyzer.cleanupVersion(artifact.getVersion());
1:daec486:         info.mavenVersionRange = artifact.getVersionRange();
1:f2a8ed5:         return info;
1:f2a8ed5:     }
1:f2a8ed5: 
1:f2a8ed5:     private static ContentInfo handleSubsystem(Artifact artifact, Manifest mf) {
1:f2a8ed5:         ContentInfo info = new ContentInfo();
1:3ce2e75: 
1:f2a8ed5:         Attributes mainAttributes = mf.getMainAttributes();
1:3ce2e75: 
1:f2a8ed5:         String subsystemSymbolicName = mainAttributes.getValue(Constants.SUBSYSTEM_SYMBOLICNAME);
1:f2a8ed5:         if (subsystemSymbolicName != null) {
1:f2a8ed5:             Map<String, ?> header = Analyzer.parseHeader(subsystemSymbolicName, null);
1:3ce2e75:             info.symbolicName = header.keySet().iterator().next();
1:f2a8ed5:         }
1:3ce2e75: 
1:f2a8ed5:         String subsystemVersion = mainAttributes.getValue(Constants.SUBSYSTEM_VERSION);
1:f2a8ed5:         if (subsystemVersion != null) {
1:f2a8ed5:             info.version = subsystemVersion;
1:f2a8ed5:         }
1:3ce2e75: 
1:f2a8ed5:         String subsystemType = mainAttributes.getValue(Constants.SUBSYSTEM_TYPE);
1:f2a8ed5:         if (subsystemType == null) {
1:f2a8ed5:             info.type = Constants.APPLICATION_TYPE;
1:f2a8ed5:         } else {
1:f2a8ed5:             Map<String, ?> header = Analyzer.parseHeader(subsystemType, null);
1:3ce2e75:             info.type = header.keySet().iterator().next();
1:f2a8ed5:         }
1:3ce2e75: 
1:daec486:         info.mavenVersionRange = artifact.getVersionRange();
1:f2a8ed5:         return info;
1:f2a8ed5:     }
1:f2a8ed5: 
1:f2a8ed5:     private static ContentInfo handleManifest(Artifact artifact, Manifest mf) {
1:f2a8ed5:         Attributes mainAttributes = mf.getMainAttributes();
1:3ce2e75: 
1:f2a8ed5:         String bundleSymbolicName = mainAttributes.getValue(Constants.BUNDLE_SYMBOLICNAME);
1:f2a8ed5:         if (bundleSymbolicName == null) {
1:f2a8ed5:             // not a bundle
1:f2a8ed5:             return handleUnknown(artifact);
1:f2a8ed5:         } else {
1:f2a8ed5:             ContentInfo info = new ContentInfo();
1:3ce2e75: 
1:f2a8ed5:             Map<String, ?> header = Analyzer.parseHeader(bundleSymbolicName, null);
1:3ce2e75:             info.symbolicName = header.keySet().iterator().next();
1:3ce2e75: 
1:f2a8ed5:             String bundleVersion = mainAttributes.getValue(Constants.BUNDLE_VERSION);
1:f2a8ed5:             if (bundleVersion != null) {
1:f2a8ed5:                 info.version = bundleVersion;
1:f2a8ed5:             }
1:3ce2e75: 
1:f2a8ed5:             if (mainAttributes.getValue(Constants.FRAGMENT_HOST) != null) {
1:f2a8ed5:                 info.type = Constants.FRAGMENT_TYPE;
1:f2a8ed5:             }
1:3ce2e75: 
1:daec486:             info.mavenVersionRange = artifact.getVersionRange();
1:f2a8ed5:             return info;
1:f2a8ed5:         }
1:f2a8ed5:     }
1:3ce2e75: 
1:3ce2e75:     private static Manifest getManifest(ZipFile zip, ZipEntry entry) throws IOException {
1:f2a8ed5:         InputStream in = null;
1:f2a8ed5:         try {
1:f2a8ed5:             in = zip.getInputStream(entry);
1:f2a8ed5:             Manifest mf = new Manifest(in);
1:f2a8ed5:             return mf;
1:f2a8ed5:         } finally {
1:f2a8ed5:             if (in != null) {
1:f2a8ed5:                 try { in.close(); } catch (IOException ignore) {}
1:f2a8ed5:             }
1:f2a8ed5:         }
1:f2a8ed5:     }
1:f2a8ed5: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:daec486
/////////////////////////////////////////////////////////////////////////
1: import org.apache.maven.artifact.versioning.VersionRange;
/////////////////////////////////////////////////////////////////////////
1:     private VersionRange mavenVersionRange;
/////////////////////////////////////////////////////////////////////////
1:         if (mavenVersionRange != null && mavenVersionRange.hasRestrictions()) {
1:             line += ";version=\"" + mavenVersionRange + '"';
1:         } else {
1:             if (version != null) {
1:                 line += ";version=\"[" + version + "," + version + "]\"";
1:             }
/////////////////////////////////////////////////////////////////////////
1:         info.mavenVersionRange = artifact.getVersionRange();
/////////////////////////////////////////////////////////////////////////
1:         info.mavenVersionRange = artifact.getVersionRange();
/////////////////////////////////////////////////////////////////////////
1:             info.mavenVersionRange = artifact.getVersionRange();
commit:3ce2e75
/////////////////////////////////////////////////////////////////////////
1: import aQute.lib.osgi.Analyzer;
1: 
1: 
1: 
1: 
1: 
1: 
1: 
0:             line += ";version=\"[" + version + "," + version + "]\"";
1: 
/////////////////////////////////////////////////////////////////////////
1:         info.version = Analyzer.cleanupVersion(artifact.getVersion());
1: 
1: 
1:             info.symbolicName = header.keySet().iterator().next();
1: 
1: 
1:             info.type = header.keySet().iterator().next();
1: 
1: 
1: 
1:             info.symbolicName = header.keySet().iterator().next();
1: 
1: 
1: 
1: 
1:     private static Manifest getManifest(ZipFile zip, ZipEntry entry) throws IOException {
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:f2a8ed5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.plugin.esa;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.Map;
1: import java.util.jar.Attributes;
1: import java.util.jar.Manifest;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipFile;
1: 
1: import org.apache.maven.artifact.Artifact;
1: import org.apache.maven.plugin.logging.Log;
1: import org.apache.maven.shared.osgi.DefaultMaven2OsgiConverter;
1: import org.apache.maven.shared.osgi.Maven2OsgiConverter;
1: 
0: import aQute.lib.osgi.Analyzer;
1: 
1: public class ContentInfo {
1:    
1:     /**
1:      * Coverter for maven pom values to OSGi manifest values (pulled in from the maven-bundle-plugin)
1:      */
1:     private static Maven2OsgiConverter maven2OsgiConverter = new DefaultMaven2OsgiConverter();
1:     
1:     private String symbolicName;
1:     private String type;
1:     private String version;
1:     
1:     public String getSymbolicName() {
1:         return symbolicName;
1:     }
1:     
1:     public String getType() {
1:         return type;
1:     }
1:     
1:     public String getVersion() {
1:         return version;
1:     }
1:     
1:     public String getContentLine() {
1:         String line = symbolicName;
1:         if (type != null) {
1:             line += ";type=\"" + type + "\"";
1:         }
0:         if (version != null) {
0:             line += ";version=\"" + version + "\"";
1:         }
1:         return line;
1:     }
1:     
1:     public static ContentInfo create(Artifact artifact, Log log) {
1:         ZipFile zip = null;
1:         try {
1:             zip = new ZipFile(artifact.getFile());
1:             ZipEntry entry = zip.getEntry("META-INF/MANIFEST.MF");
1:             if (entry != null) {
1:                 Manifest mf = getManifest(zip, entry);
1:                 return handleManifest(artifact, mf);
1:             } else {
1:                 // no manifest.mf
1:                 entry = zip.getEntry("OSGI-INF/SUBSYSTEM.MF");
1:                 if (entry != null) {
1:                     Manifest mf = getManifest(zip, entry);
1:                     return handleSubsystem(artifact, mf);
1:                 } else {
1:                     // and no subsystem.mf
1:                     return handleUnknown(artifact);
1:                 }
1:             }
1:         } catch (Exception e) {
1:             log.warn("Error creating content information", e);
1:             return null;
1:         } finally {
1:             if (zip != null) {
1:                try { zip.close(); } catch (IOException ignore) {}
1:             }
1:         }
1:     }
1: 
1:     private static ContentInfo handleUnknown(Artifact artifact) {
1:         ContentInfo info = new ContentInfo();
1:         info.symbolicName = maven2OsgiConverter.getBundleSymbolicName(artifact);
0:         info.version = Analyzer.cleanupVersion(artifact.getVersion());  
1:         return info;
1:     }
1: 
1:     private static ContentInfo handleSubsystem(Artifact artifact, Manifest mf) {
1:         ContentInfo info = new ContentInfo();
1:         
1:         Attributes mainAttributes = mf.getMainAttributes();
1:         
1:         String subsystemSymbolicName = mainAttributes.getValue(Constants.SUBSYSTEM_SYMBOLICNAME);
1:         if (subsystemSymbolicName != null) {
1:             Map<String, ?> header = Analyzer.parseHeader(subsystemSymbolicName, null);
0:             info.symbolicName = (String) header.keySet().iterator().next(); 
1:         }
1:         
1:         String subsystemVersion = mainAttributes.getValue(Constants.SUBSYSTEM_VERSION);
1:         if (subsystemVersion != null) {
1:             info.version = subsystemVersion;
1:         }
1:         
1:         String subsystemType = mainAttributes.getValue(Constants.SUBSYSTEM_TYPE);
1:         if (subsystemType == null) {
1:             info.type = Constants.APPLICATION_TYPE;
1:         } else {
1:             Map<String, ?> header = Analyzer.parseHeader(subsystemType, null);
0:             info.type = (String) header.keySet().iterator().next(); 
1:         }
1:         
1:         return info;
1:     }
1: 
1:     private static ContentInfo handleManifest(Artifact artifact, Manifest mf) {
1:         Attributes mainAttributes = mf.getMainAttributes();
1:         
1:         String bundleSymbolicName = mainAttributes.getValue(Constants.BUNDLE_SYMBOLICNAME);
1:         if (bundleSymbolicName == null) {
1:             // not a bundle
1:             return handleUnknown(artifact);
1:         } else {
1:             ContentInfo info = new ContentInfo();
1:             
1:             Map<String, ?> header = Analyzer.parseHeader(bundleSymbolicName, null);
0:             info.symbolicName = (String) header.keySet().iterator().next();         
1:         
1:             String bundleVersion = mainAttributes.getValue(Constants.BUNDLE_VERSION);
1:             if (bundleVersion != null) {
1:                 info.version = bundleVersion;
1:             }
1:         
1:             if (mainAttributes.getValue(Constants.FRAGMENT_HOST) != null) {
1:                 info.type = Constants.FRAGMENT_TYPE;
1:             }
1:             
1:             return info;
1:         }
1:     }
1:    
0:     private static Manifest getManifest(ZipFile zip, ZipEntry entry) throws IOException {        
1:         InputStream in = null;
1:         try {
1:             in = zip.getInputStream(entry);
1:             Manifest mf = new Manifest(in);
1:             return mf;
1:         } finally {
1:             if (in != null) {
1:                 try { in.close(); } catch (IOException ignore) {}
1:             }
1:         }
1:     }
1: }
============================================================================