1:1129914: /*
1:8ad6b99:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ad6b99:  * or more contributor license agreements.  See the NOTICE file
1:8ad6b99:  * distributed with this work for additional information
1:8ad6b99:  * regarding copyright ownership.  The ASF licenses this file
1:8ad6b99:  * to you under the Apache License, Version 2.0 (the
1:8ad6b99:  * "License"); you may not use this file except in compliance
1:8ad6b99:  * with the License.  You may obtain a copy of the License at
1:1129914:  *
1:8ad6b99:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:8ad6b99:  * Unless required by applicable law or agreed to in writing,
1:8ad6b99:  * software distributed under the License is distributed on an
1:8ad6b99:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8ad6b99:  * KIND, either express or implied.  See the License for the
1:8ad6b99:  * specific language governing permissions and limitations
1:8ad6b99:  * under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.internal;
1:1129914: 
1:1129914: import java.util.Collections;
1:1129914: import java.util.HashMap;
1:1129914: import java.util.Map;
1:1129914: 
1:4717af0: import org.apache.aries.subsystem.core.archive.BundleManifest;
1:1129914: import org.apache.aries.subsystem.core.archive.SubsystemManifest;
1:bf735d2: import org.apache.aries.subsystem.core.archive.SymbolicNameHeader;
1:bf735d2: import org.apache.aries.subsystem.core.archive.VersionHeader;
1:1129914: import org.osgi.framework.Constants;
1:1129914: import org.osgi.framework.Version;
1:a1c6951: import org.osgi.framework.namespace.IdentityNamespace;
1:71fe81a: import org.osgi.resource.Resource;
1:1129914: 
1:1c9c28b: public class OsgiIdentityCapability extends AbstractCapability {
1:79b20bc: 	private final Map<String, Object> attributes;
1:1129914: 	private final Resource resource;
1:1129914: 
1:1129914: 	public OsgiIdentityCapability(Resource resource, String symbolicName) {
1:1129914: 		this(resource, symbolicName, Version.emptyVersion);
1:1129914: 	}
1:bd2f017: 
1:1129914: 	public OsgiIdentityCapability(Resource resource, String symbolicName, Version version) {
1:a1c6951: 		this(resource, symbolicName, version, IdentityNamespace.TYPE_BUNDLE);
1:bd2f017: 	}
1:1129914: 
1:b8ad309: 	public OsgiIdentityCapability(Resource resource, String symbolicName, Version version, String identityType) {
1:79b20bc: 	    this(resource, symbolicName, version, identityType, new HashMap<String, Object>());
1:1129914: 	}
1:1129914: 
1:79b20bc:     public OsgiIdentityCapability(Resource resource, String symbolicName, Version version, String identityType, Map<String, Object> attrs) {
1:1129914: 		this.resource = resource;
1:79b20bc: 		attributes = attrs;
1:1129914: 		attributes.put(
1:a1c6951: 				IdentityNamespace.IDENTITY_NAMESPACE,
1:1129914: 				symbolicName);
1:1129914: 		attributes.put(
1:a1c6951: 				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE,
1:1129914: 				version);
1:1129914: 		attributes.put(
1:a1c6951: 				IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE,
1:bd2f017: 				identityType);
1:1129914: 		// TODO Add directives, particularly "effective" and "singleton".
1:1129914: 	}
1:1129914: 
1:1129914: 	public OsgiIdentityCapability(Resource resource, SubsystemManifest manifest) {
1:1129914: 		this(
1:1129914: 				resource,
1:bda6868: 				manifest.getSubsystemSymbolicNameHeader().getSymbolicName(),
1:bda6868: 				manifest.getSubsystemVersionHeader().getVersion(),
1:875a6d6: 				manifest.getSubsystemTypeHeader().getType());
1:1129914: 	}
1:1129914: 
1:4717af0: 	public OsgiIdentityCapability(Resource resource, BundleManifest manifest) {
1:1129914: 		this(
1:1129914: 				resource,
1:bf735d2: 				((SymbolicNameHeader)manifest.getHeader(Constants.BUNDLE_SYMBOLICNAME)).getSymbolicName(),
1:bf735d2: 				((VersionHeader)manifest.getHeader(Constants.BUNDLE_VERSION)).getVersion(),
1:8ad6b99: 				manifest.getHeader(Constants.FRAGMENT_HOST) == null ? IdentityNamespace.TYPE_BUNDLE : IdentityNamespace.TYPE_FRAGMENT);
1:1129914: 	}
1:1129914: 
1:1129914: 	public Map<String, Object> getAttributes() {
1:1129914: 		return Collections.unmodifiableMap(attributes);
1:1129914: 	}
1:1129914: 
1:1129914: 	public Map<String, String> getDirectives() {
1:1129914: 		return Collections.emptyMap();
1:1129914: 	}
1:1129914: 
1:1129914: 	public String getNamespace() {
1:a1c6951: 		return IdentityNamespace.IDENTITY_NAMESPACE;
1:1129914: 	}
1:1129914: 
1:1129914: 	public Resource getResource() {
1:1129914: 		return resource;
1:1129914: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:8ad6b99
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
/////////////////////////////////////////////////////////////////////////
1: 				manifest.getHeader(Constants.FRAGMENT_HOST) == null ? IdentityNamespace.TYPE_BUNDLE : IdentityNamespace.TYPE_FRAGMENT);
commit:bf735d2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.archive.SymbolicNameHeader;
1: import org.apache.aries.subsystem.core.archive.VersionHeader;
/////////////////////////////////////////////////////////////////////////
1: 				((SymbolicNameHeader)manifest.getHeader(Constants.BUNDLE_SYMBOLICNAME)).getSymbolicName(),
1: 				((VersionHeader)manifest.getHeader(Constants.BUNDLE_VERSION)).getVersion(),
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
commit:875a6d6
/////////////////////////////////////////////////////////////////////////
1: 				manifest.getSubsystemTypeHeader().getType());
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Resource;
commit:a1c6951
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.IdentityNamespace;
/////////////////////////////////////////////////////////////////////////
1: 		this(resource, symbolicName, version, IdentityNamespace.TYPE_BUNDLE);
1: 				IdentityNamespace.IDENTITY_NAMESPACE, 
1: 				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1: 				IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, 
/////////////////////////////////////////////////////////////////////////
0: 				IdentityNamespace.TYPE_BUNDLE);
/////////////////////////////////////////////////////////////////////////
1: 		return IdentityNamespace.IDENTITY_NAMESPACE;
commit:b8ad309
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public OsgiIdentityCapability(Resource resource, String symbolicName, Version version, String identityType) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:bd2f017
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.service.subsystem.SubsystemConstants;
/////////////////////////////////////////////////////////////////////////
0: 		this(resource, symbolicName, version, type, null);
1: 	}
1: 	
0: 	public OsgiIdentityCapability(Resource resource, String symbolicName, Version version, String identityType, String subsystemType) {
/////////////////////////////////////////////////////////////////////////
1: 				identityType);
0: 		if (subsystemType != null)
0: 			// TODO Add to constants.
0: 			attributes.put("subsystem-type", subsystemType);
/////////////////////////////////////////////////////////////////////////
0: 				SubsystemConstants.IDENTITY_TYPE_SUBSYSTEM,
0: 				manifest.getSubsystemTypeHeader().getValue());
commit:bda6868
/////////////////////////////////////////////////////////////////////////
1: 				manifest.getSubsystemSymbolicNameHeader().getSymbolicName(),
1: 				manifest.getSubsystemVersionHeader().getVersion(),
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.core.resource.AbstractCapability;
1: public class OsgiIdentityCapability extends AbstractCapability {
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.Capability;
0: import org.osgi.framework.resource.Resource;
0: import org.osgi.framework.resource.ResourceConstants;
commit:4717af0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.archive.BundleManifest;
/////////////////////////////////////////////////////////////////////////
0: 				// TODO Add to constants.
0: 				"osgi.subsystem");
1: 	public OsgiIdentityCapability(Resource resource, BundleManifest manifest) {
0: 				manifest.getHeader(Constants.BUNDLE_SYMBOLICNAME).getValue(),
0: 				Version.parseVersion(manifest.getHeader(Constants.BUNDLE_VERSION).getValue()),
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
0: import java.util.jar.Manifest;
1: 
1: import org.apache.aries.subsystem.core.archive.SubsystemManifest;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
0: import org.osgi.framework.wiring.Capability;
0: import org.osgi.framework.wiring.Resource;
0: import org.osgi.framework.wiring.ResourceConstants;
1: 
0: public class OsgiIdentityCapability implements Capability {
0: 	private final Map<String, Object> attributes = new HashMap<String, Object>();
1: 	private final Resource resource;
1: 	
1: 	public OsgiIdentityCapability(Resource resource, String symbolicName) {
1: 		this(resource, symbolicName, Version.emptyVersion);
1: 	}
1: 	
1: 	public OsgiIdentityCapability(Resource resource, String symbolicName, Version version) {
0: 		this(resource, symbolicName, version, ResourceConstants.IDENTITY_TYPE_BUNDLE);
1: 	}
1: 	
0: 	public OsgiIdentityCapability(Resource resource, String symbolicName, Version version, String type) {
1: 		this.resource = resource;
1: 		attributes.put(
0: 				ResourceConstants.IDENTITY_NAMESPACE, 
1: 				symbolicName);
1: 		attributes.put(
0: 				ResourceConstants.IDENTITY_VERSION_ATTRIBUTE, 
1: 				version);
1: 		attributes.put(
0: 				ResourceConstants.IDENTITY_TYPE_ATTRIBUTE, 
0: 				type);
1: 		// TODO Add directives, particularly "effective" and "singleton".
1: 	}
1: 	
1: 	public OsgiIdentityCapability(Resource resource, SubsystemManifest manifest) {
1: 		this(
1: 				resource,
0: 				manifest.getSubsystemSymbolicName().getSymbolicName(),
0: 				manifest.getSubsystemVersion().getVersion(),
0: 				manifest.getSubsystemType().getValue());
1: 	}
1: 	
0: 	public OsgiIdentityCapability(Resource resource, Manifest manifest) {
1: 		this(
1: 				resource,
0: 				manifest.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLICNAME),
0: 				Version.parseVersion(manifest.getMainAttributes().getValue(Constants.BUNDLE_VERSION)),
0: 				ResourceConstants.IDENTITY_TYPE_BUNDLE);
1: 	}
1: 
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.unmodifiableMap(attributes);
1: 	}
1: 
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.emptyMap();
1: 	}
1: 
1: 	public String getNamespace() {
0: 		return ResourceConstants.IDENTITY_NAMESPACE;
1: 	}
1: 
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:79b20bc
/////////////////////////////////////////////////////////////////////////
1: 	private final Map<String, Object> attributes;
0: 
0: 
0: 
1: 	    this(resource, symbolicName, version, identityType, new HashMap<String, Object>());
0: 	}
0: 
1:     public OsgiIdentityCapability(Resource resource, String symbolicName, Version version, String identityType, Map<String, Object> attrs) {
1: 		attributes = attrs;
0: 				IdentityNamespace.IDENTITY_NAMESPACE,
0: 				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE,
0: 				IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE,
0: 
/////////////////////////////////////////////////////////////////////////
0: 
============================================================================