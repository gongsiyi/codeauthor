1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
1:fdf3952: 
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.Map;
1:fdf3952: import java.util.Set;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: import javax.management.openmbean.TabularDataSupport;
1:fdf3952: 
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.jmx.framework.PackageStateMBean;
1:fdf3952: import org.osgi.service.packageadmin.ExportedPackage;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>PackageData</tt>represents PackageType @see {@link PackageStateMBean#PACKAGE_TYPE}.
1:fdf3952:  * It is a codec for the composite data representing an OSGi ExportedPackage.
1:fdf3952:  * </p>
1:fdf3952:  * 
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:0a8778f: @SuppressWarnings("deprecation")
1:fdf3952: public class PackageData {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * {@link PackageStateMBean#EXPORTING_BUNDLES}
1:fdf3952:      */
1:fdf3952:     long[] exportingBundles;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * {@link PackageStateMBean#IMPORTING_BUNDLES}
1:fdf3952:      */
1:fdf3952:     long[] importingBundles;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * {@link PackageStateMBean#NAME}
1:fdf3952:      */
1:fdf3952:     String name;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * {@link PackageStateMBean#REMOVAL_PENDING}
1:fdf3952:      */
1:fdf3952:     boolean removalPending;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * {@link PackageStateMBean#VERSION}
1:fdf3952:      */
1:fdf3952:     String version;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new PackageData with provided ExportedPackage.
1:fdf3952:      * @param exportedPackage @see {@link ExportedPackage}.
1:fdf3952:      */
1:fdf3952:     public PackageData(ExportedPackage exportedPackage) {
1:fdf3952:         this(new long[]{exportedPackage.getExportingBundle().getBundleId()}, toBundleIds(exportedPackage.getImportingBundles()),
1:fdf3952:                 exportedPackage.getName(), exportedPackage.isRemovalPending(), exportedPackage.getVersion().toString());
1:fdf3952: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new PackageData.
1:fdf3952:      * 
1:fdf3952:      * @param exportingBundles the bundle the package belongs to.
1:fdf3952:      * @param importingBundles the importing bundles of the package.
1:fdf3952:      * @param name the package name.
1:fdf3952:      * @param removalPending whether the package is pending removal.
1:fdf3952:      * @param version package version.
1:fdf3952:      */
1:fdf3952:     public PackageData(long[] exportingBundles, long[] importingBundles, String name, boolean removalPending, String version) {
1:fdf3952:         this.exportingBundles = exportingBundles;
1:fdf3952:         this.importingBundles = importingBundles;
1:fdf3952:         this.name = name;
1:fdf3952:         this.removalPending = removalPending;
1:fdf3952:         this.version = version;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Translates PackageData to CompositeData represented by
1:fdf3952:      * compositeType {@link PackageStateMBean#PACKAGE_TYPE}.
1:fdf3952:      * 
1:fdf3952:      * @return translated PackageData to compositeData.
1:fdf3952:      */
1:fdf3952:     public CompositeData toCompositeData() {
1:fdf3952:         try {
1:fdf3952:             Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:             items.put(PackageStateMBean.EXPORTING_BUNDLES, toLongArray(exportingBundles));
1:fdf3952:             items.put(PackageStateMBean.IMPORTING_BUNDLES, toLongArray(importingBundles));
1:fdf3952:             items.put(PackageStateMBean.NAME, name);
1:fdf3952:             items.put(PackageStateMBean.REMOVAL_PENDING, removalPending);
1:fdf3952:             items.put(PackageStateMBean.VERSION, version);
1:fdf3952:             return new CompositeDataSupport(PackageStateMBean.PACKAGE_TYPE, items);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new IllegalStateException("Can't create CompositeData" + e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method to create PackageData from CompositeData object.
1:fdf3952:      * 
1:fdf3952:      * @param data {@link CompositeData} instance.
1:fdf3952:      * @return PackageData instance.
1:fdf3952:      */
1:fdf3952:     public static PackageData from(CompositeData data) {
1:fdf3952:         if(data == null){
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         long[] exportingBundle = toLongPrimitiveArray((Long[])data.get(PackageStateMBean.EXPORTING_BUNDLES));
1:fdf3952:         long[] importingBundles = toLongPrimitiveArray((Long[]) data.get(PackageStateMBean.IMPORTING_BUNDLES));
1:fdf3952:         String name = (String) data.get(PackageStateMBean.NAME);
1:fdf3952:         boolean removalPending = (Boolean) data.get(PackageStateMBean.REMOVAL_PENDING);
1:fdf3952:         String version = (String) data.get(PackageStateMBean.VERSION);
1:fdf3952:         return new PackageData(exportingBundle,importingBundles,name, removalPending,version);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Creates {@link TabularData} for set of PackageData's.
1:fdf3952:      * 
1:fdf3952:      * @param packages set of PackageData's
1:fdf3952:      * @return {@link TabularData} instance.
1:fdf3952:      */
1:fdf3952:     public static TabularData tableFrom(Set<PackageData> packages){
1:fdf3952:         TabularData table = new TabularDataSupport(PackageStateMBean.PACKAGES_TYPE);
1:fdf3952:         for(PackageData pkg : packages){
1:fdf3952:             table.put(pkg.toCompositeData());
1:fdf3952:         }
1:fdf3952:         return table;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Converts array of bundles to array of bundle id's.
1:fdf3952:      * 
1:fdf3952:      * @param bundles array of Bundle's.
1:fdf3952:      * @return array of bundle id's.
1:fdf3952:      */
1:fdf3952:     public static long[] toBundleIds(Bundle[] bundles) {
1:fdf3952:         if (bundles != null) {
1:fdf3952:             long[] importingBundles = new long[bundles.length];
1:fdf3952:             for (int i = 0; i < bundles.length; i++) {
1:fdf3952:                 importingBundles[i] = bundles[i].getBundleId();
1:fdf3952:             }
1:fdf3952:             return importingBundles;
1:fdf3952:         }
1:fdf3952:         return null;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Converts primitive array of strings to Long array.
1:fdf3952:      * 
1:fdf3952:      * @param primitiveArray primitive long array.
1:fdf3952:      * @return Long array.
1:fdf3952:      */
1:fdf3952:     protected Long[] toLongArray(long[] primitiveArray) {
1:fdf3952:         if (primitiveArray == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         Long[] converted = new Long[primitiveArray.length];
1:fdf3952:         for (int i = 0; i < primitiveArray.length; i++) {
1:fdf3952:             converted[i] = primitiveArray[i];
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         return converted;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Converts Long array to primitive array of long.
1:fdf3952:      * 
1:fdf3952:      * @param wrapperArray Long array.
1:fdf3952:      * @return primitive long array.
1:fdf3952:      */
1:fdf3952:     protected static long[] toLongPrimitiveArray(Long[] wrapperArray) {
1:fdf3952:         if (wrapperArray == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         long[] converted = new long[wrapperArray.length];
1:fdf3952:         for (int i = 0; i < wrapperArray.length; i++) {
1:fdf3952:             converted[i] = wrapperArray[i];
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         return converted;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @return the exportingBundles
1:fdf3952:      */
1:fdf3952:     public long[] getExportingBundles() {
1:fdf3952:         return exportingBundles;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @return the importingBundles
1:fdf3952:      */
1:fdf3952:     public long[] getImportingBundles() {
1:fdf3952:         return importingBundles;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @return the name
1:fdf3952:      */
1:fdf3952:     public String getName() {
1:fdf3952:         return name;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @return the removalPending
1:fdf3952:      */
1:fdf3952:     public boolean isRemovalPending() {
1:fdf3952:         return removalPending;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @return the version
1:fdf3952:      */
1:fdf3952:     public String getVersion() {
1:fdf3952:         return version;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Override
1:fdf3952:     public boolean equals(Object o) {
1:fdf3952:         if (this == o) return true;
1:fdf3952:         if (o == null || getClass() != o.getClass()) return false;
1:fdf3952: 
1:fdf3952:         PackageData that = (PackageData) o;
1:fdf3952: 
1:fdf3952:         // exportingBundle must be always there
1:fdf3952:         if (exportingBundles[0] != that.exportingBundles[0]) return false;
1:fdf3952:         if (!name.equals(that.name)) return false;
1:fdf3952:         if (!version.equals(that.version)) return false;
1:fdf3952: 
1:fdf3952:         return true;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Override
1:fdf3952:     public int hashCode() {
1:fdf3952:         int result = (int) (exportingBundles[0] ^ (exportingBundles[0] >>> 32));
1:fdf3952:         result = 31 * result + name.hashCode();
1:fdf3952:         result = 31 * result + version.hashCode();
1:fdf3952:         return result;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings("deprecation")
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.jmx.framework.PackageStateMBean;
1: import org.osgi.service.packageadmin.ExportedPackage;
1: 
1: /**
1:  * <p>
1:  * <tt>PackageData</tt>represents PackageType @see {@link PackageStateMBean#PACKAGE_TYPE}.
1:  * It is a codec for the composite data representing an OSGi ExportedPackage.
1:  * </p>
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class PackageData {
1: 
1:     /**
1:      * {@link PackageStateMBean#EXPORTING_BUNDLES}
1:      */
1:     long[] exportingBundles;
1: 
1:     /**
1:      * {@link PackageStateMBean#IMPORTING_BUNDLES}
1:      */
1:     long[] importingBundles;
1: 
1:     /**
1:      * {@link PackageStateMBean#NAME}
1:      */
1:     String name;
1: 
1:     /**
1:      * {@link PackageStateMBean#REMOVAL_PENDING}
1:      */
1:     boolean removalPending;
1: 
1:     /**
1:      * {@link PackageStateMBean#VERSION}
1:      */
1:     String version;
1: 
1:     /**
1:      * Constructs new PackageData with provided ExportedPackage.
1:      * @param exportedPackage @see {@link ExportedPackage}.
1:      */
1:     public PackageData(ExportedPackage exportedPackage) {
1:         this(new long[]{exportedPackage.getExportingBundle().getBundleId()}, toBundleIds(exportedPackage.getImportingBundles()),
1:                 exportedPackage.getName(), exportedPackage.isRemovalPending(), exportedPackage.getVersion().toString());
1: 
1:     }
1: 
1:     /**
1:      * Constructs new PackageData.
1:      * 
1:      * @param exportingBundles the bundle the package belongs to.
1:      * @param importingBundles the importing bundles of the package.
1:      * @param name the package name.
1:      * @param removalPending whether the package is pending removal.
1:      * @param version package version.
1:      */
1:     public PackageData(long[] exportingBundles, long[] importingBundles, String name, boolean removalPending, String version) {
1:         this.exportingBundles = exportingBundles;
1:         this.importingBundles = importingBundles;
1:         this.name = name;
1:         this.removalPending = removalPending;
1:         this.version = version;
1:     }
1:     
1:     /**
1:      * Translates PackageData to CompositeData represented by
1:      * compositeType {@link PackageStateMBean#PACKAGE_TYPE}.
1:      * 
1:      * @return translated PackageData to compositeData.
1:      */
1:     public CompositeData toCompositeData() {
1:         try {
1:             Map<String, Object> items = new HashMap<String, Object>();
1:             items.put(PackageStateMBean.EXPORTING_BUNDLES, toLongArray(exportingBundles));
1:             items.put(PackageStateMBean.IMPORTING_BUNDLES, toLongArray(importingBundles));
1:             items.put(PackageStateMBean.NAME, name);
1:             items.put(PackageStateMBean.REMOVAL_PENDING, removalPending);
1:             items.put(PackageStateMBean.VERSION, version);
1:             return new CompositeDataSupport(PackageStateMBean.PACKAGE_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Can't create CompositeData" + e);
1:         }
1:     }
1: 
1:     /**
1:      * Static factory method to create PackageData from CompositeData object.
1:      * 
1:      * @param data {@link CompositeData} instance.
1:      * @return PackageData instance.
1:      */
1:     public static PackageData from(CompositeData data) {
1:         if(data == null){
1:             return null;
1:         }
1:         long[] exportingBundle = toLongPrimitiveArray((Long[])data.get(PackageStateMBean.EXPORTING_BUNDLES));
1:         long[] importingBundles = toLongPrimitiveArray((Long[]) data.get(PackageStateMBean.IMPORTING_BUNDLES));
1:         String name = (String) data.get(PackageStateMBean.NAME);
1:         boolean removalPending = (Boolean) data.get(PackageStateMBean.REMOVAL_PENDING);
1:         String version = (String) data.get(PackageStateMBean.VERSION);
1:         return new PackageData(exportingBundle,importingBundles,name, removalPending,version);
1:     }
1: 
1:     /**
1:      * Creates {@link TabularData} for set of PackageData's.
1:      * 
1:      * @param packages set of PackageData's
1:      * @return {@link TabularData} instance.
1:      */
1:     public static TabularData tableFrom(Set<PackageData> packages){
1:         TabularData table = new TabularDataSupport(PackageStateMBean.PACKAGES_TYPE);
1:         for(PackageData pkg : packages){
1:             table.put(pkg.toCompositeData());
1:         }
1:         return table;
1:     }
1: 
1:     /**
1:      * Converts array of bundles to array of bundle id's.
1:      * 
1:      * @param bundles array of Bundle's.
1:      * @return array of bundle id's.
1:      */
1:     public static long[] toBundleIds(Bundle[] bundles) {
1:         if (bundles != null) {
1:             long[] importingBundles = new long[bundles.length];
1:             for (int i = 0; i < bundles.length; i++) {
1:                 importingBundles[i] = bundles[i].getBundleId();
1:             }
1:             return importingBundles;
1:         }
1:         return null;
1:     }
1:     
1:     /**
1:      * Converts primitive array of strings to Long array.
1:      * 
1:      * @param primitiveArray primitive long array.
1:      * @return Long array.
1:      */
1:     protected Long[] toLongArray(long[] primitiveArray) {
1:         if (primitiveArray == null) {
1:             return null;
1:         }
1:         Long[] converted = new Long[primitiveArray.length];
1:         for (int i = 0; i < primitiveArray.length; i++) {
1:             converted[i] = primitiveArray[i];
1:         }
1: 
1:         return converted;
1:     }
1: 
1:     /**
1:      * Converts Long array to primitive array of long.
1:      * 
1:      * @param wrapperArray Long array.
1:      * @return primitive long array.
1:      */
1:     protected static long[] toLongPrimitiveArray(Long[] wrapperArray) {
1:         if (wrapperArray == null) {
1:             return null;
1:         }
1:         long[] converted = new long[wrapperArray.length];
1:         for (int i = 0; i < wrapperArray.length; i++) {
1:             converted[i] = wrapperArray[i];
1:         }
1: 
1:         return converted;
1:     }
1: 
1:     /**
1:      * @return the exportingBundles
1:      */
1:     public long[] getExportingBundles() {
1:         return exportingBundles;
1:     }
1: 
1:     /**
1:      * @return the importingBundles
1:      */
1:     public long[] getImportingBundles() {
1:         return importingBundles;
1:     }
1: 
1:     /**
1:      * @return the name
1:      */
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     /**
1:      * @return the removalPending
1:      */
1:     public boolean isRemovalPending() {
1:         return removalPending;
1:     }
1: 
1:     /**
1:      * @return the version
1:      */
1:     public String getVersion() {
1:         return version;
1:     }
1:     
1:     @Override
1:     public boolean equals(Object o) {
1:         if (this == o) return true;
1:         if (o == null || getClass() != o.getClass()) return false;
1: 
1:         PackageData that = (PackageData) o;
1: 
1:         // exportingBundle must be always there
1:         if (exportingBundles[0] != that.exportingBundles[0]) return false;
1:         if (!name.equals(that.name)) return false;
1:         if (!version.equals(that.version)) return false;
1: 
1:         return true;
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         int result = (int) (exportingBundles[0] ^ (exportingBundles[0] >>> 32));
1:         result = 31 * result + name.hashCode();
1:         result = 31 * result + version.hashCode();
1:         return result;
1:     }
1: 
1: }
============================================================================