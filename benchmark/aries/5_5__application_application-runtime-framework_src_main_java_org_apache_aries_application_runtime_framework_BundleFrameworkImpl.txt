1:cb0f3ab: /*
1:cb0f3ab:  * Licensed to the Apache Software Foundation (ASF) under one
1:cb0f3ab:  * or more contributor license agreements.  See the NOTICE file
1:cb0f3ab:  * distributed with this work for additional information
1:cb0f3ab:  * regarding copyright ownership.  The ASF licenses this file
1:cb0f3ab:  * to you under the Apache License, Version 2.0 (the
1:cb0f3ab:  * "License"); you may not use this file except in compliance
1:cb0f3ab:  * with the License.  You may obtain a copy of the License at
2:cb0f3ab:  *
1:cb0f3ab:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cb0f3ab:  *
1:cb0f3ab:  * Unless required by applicable law or agreed to in writing,
1:cb0f3ab:  * software distributed under the License is distributed on an
1:cb0f3ab:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:cb0f3ab:  * KIND, either express or implied.  See the License for the
1:cb0f3ab:  * specific language governing permissions and limitations
1:cb0f3ab:  * under the License.
3:cb0f3ab:  */
1:cb0f3ab: package org.apache.aries.application.runtime.framework;
8:cb0f3ab: 
1:cb0f3ab: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:cb0f3ab: import static org.apache.aries.application.utils.AppConstants.LOG_EXCEPTION;
1:cb0f3ab: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:cb0f3ab: 
1:cb0f3ab: import java.util.ArrayList;
1:cb0f3ab: import java.util.List;
1:395a819: import java.util.concurrent.Semaphore;
1:395a819: import java.util.concurrent.TimeUnit;
1:395a819: import java.util.concurrent.atomic.AtomicBoolean;
1:cb0f3ab: 
1:cb0f3ab: import org.apache.aries.application.management.AriesApplication;
1:89f804e: import org.apache.aries.application.management.spi.framework.BundleFramework;
1:89f804e: import org.apache.aries.application.management.spi.repository.BundleRepository.BundleSuggestion;
1:cb0f3ab: import org.osgi.framework.Bundle;
1:cb0f3ab: import org.osgi.framework.BundleContext;
1:cb0f3ab: import org.osgi.framework.BundleException;
1:395a819: import org.osgi.framework.FrameworkEvent;
1:395a819: import org.osgi.framework.FrameworkListener;
1:395a819: import org.osgi.framework.ServiceReference;
1:cb0f3ab: import org.osgi.framework.launch.Framework;
1:cb0f3ab: import org.osgi.service.framework.CompositeBundle;
1:cb0f3ab: import org.osgi.service.packageadmin.PackageAdmin;
1:395a819: import org.osgi.service.startlevel.StartLevel;
1:cb0f3ab: import org.osgi.util.tracker.ServiceTracker;
1:cb0f3ab: import org.slf4j.Logger;
1:cb0f3ab: import org.slf4j.LoggerFactory;
1:a6ebe54: 
1:cb0f3ab: public class BundleFrameworkImpl implements BundleFramework
3:cb0f3ab: {
1:cb0f3ab:   private static final Logger LOGGER = LoggerFactory.getLogger(BundleFrameworkImpl.class);
1:a6ebe54: 
1:af97f41:   List<Bundle> _bundles;
1:cb0f3ab:   CompositeBundle _compositeBundle;
1:af97f41:   Framework _framework;
1:cb0f3ab: 
1:cb0f3ab:   ServiceTracker _packageAdminTracker;
1:395a819:   
1:395a819:   private final AtomicBoolean startLevelIncreased = new AtomicBoolean(false);
1:cb0f3ab: 
1:cb0f3ab:   BundleFrameworkImpl(CompositeBundle cb)
1:cb0f3ab:   {
1:cb0f3ab:     _compositeBundle = cb;
1:af97f41:     _framework = cb.getCompositeFramework();
1:af97f41:     _bundles = new ArrayList<Bundle>();
8:cb0f3ab:   }
1:20de482: 
1:5315fd6:   @Override
1:4ca0b54:   public void start() throws BundleException
1:cb0f3ab:   {
1:e22d71c:     _compositeBundle.getCompositeFramework().init();
1:e22d71c:     _compositeBundle.start(Bundle.START_ACTIVATION_POLICY);
1:e22d71c:     if ( _packageAdminTracker == null)
1:e22d71c:     {
1:b1c02cb:       _packageAdminTracker = new ServiceTracker(_compositeBundle.getCompositeFramework().getBundleContext(),
1:20de482:           PackageAdmin.class.getName(), null);
1:20de482:       _packageAdminTracker.open();
1:e22d71c:     }
1:395a819:     
1:395a819:     // make sure inner bundles are now startable
1:395a819:     if (startLevelIncreased.compareAndSet(false, true)) {
1:395a819:         increaseStartLevel(_compositeBundle.getCompositeFramework().getBundleContext());
1:395a819:     }
1:20de482:   }
1:395a819:   
1:5315fd6:   @Override
1:4ca0b54:   public void init() throws BundleException
1:20de482:   {
1:20de482:     if (_compositeBundle.getCompositeFramework().getState() != Framework.ACTIVE)
1:20de482:     {
1:20de482:       _compositeBundle.getCompositeFramework().start();
1:20de482:   
2:20de482:       _packageAdminTracker = new ServiceTracker(_compositeBundle.getCompositeFramework().getBundleContext(),
1:20de482:           PackageAdmin.class.getName(), null);
1:20de482:       _packageAdminTracker.open();
1:20de482:       
1:395a819:       setupStartLevelToPreventAutostart(_compositeBundle.getCompositeFramework().getBundleContext());
1:395a819:     }
1:395a819:   }
1:395a819:   
1:395a819:   /**
1:395a819:    * Name says it all if we don't make some adjustments bundles will be autostarted, which in the
1:395a819:    * grand scheme of things causes extenders to act on the inner bundles before the outer composite is even
1:395a819:    * resolved ...
1:395a819:    */
1:395a819:   private void setupStartLevelToPreventAutostart(BundleContext frameworkBundleContext)
1:395a819:   {
1:395a819:     ServiceReference ref = frameworkBundleContext.getServiceReference(StartLevel.class.getName());
1:395a819:     if (ref != null) {
1:395a819:       StartLevel sl = (StartLevel) frameworkBundleContext.getService(ref);
1:395a819:       if (sl != null) {
1:395a819:         // make sure new bundles are *not* automatically started (because that causes havoc)
1:395a819:         sl.setInitialBundleStartLevel(sl.getStartLevel()+1);
1:395a819:         frameworkBundleContext.ungetService(ref);
1:395a819:       }
1:20de482:     }
1:5315fd6:   }
1:5315fd6: 
1:395a819:   private void increaseStartLevel(BundleContext context) {
1:395a819:       /*
1:395a819:        * Algorithm for doing this
1:395a819:        * 
1:395a819:        * 1. Set up a framework listener that will tell us when the start level has been set.
1:395a819:        * 
1:395a819:        * 2. Change the start level. This is asynchronous so by the time the method returned the event 
1:395a819:        *    could have been sent. This is why we set up the listener in step 1.
1:395a819:        * 
1:395a819:        * 3. Wait until the start level has been set appropriately. At this stage all the bundles are startable
1:395a819:        *    and some have been started (most notably lazy activated bundles it appears). Other bundles are still
1:395a819:        *    in resolved state.
1:395a819:        */    
1:395a819:       
1:395a819:       ServiceReference ref = context.getServiceReference(StartLevel.class.getName());
1:395a819:       if (ref != null) {
1:395a819:         StartLevel sl = (StartLevel) context.getService(ref);
1:395a819:         if (sl != null) {
1:395a819: 
1:395a819:           final Semaphore waitForStartLevelChangedEventToOccur = new Semaphore(0);
1:395a819:           
1:395a819:           // step 1
1:395a819:           FrameworkListener listener = new FrameworkListener() {
1:395a819:             public void frameworkEvent(FrameworkEvent event)
1:395a819:             {
1:395a819:               if (event.getType() == FrameworkEvent.STARTLEVEL_CHANGED) {
1:395a819:                 waitForStartLevelChangedEventToOccur.release();
1:395a819:               }
1:395a819:             }
1:395a819:           };
1:395a819:           
1:395a819:           context.addFrameworkListener(listener);
1:395a819:           
1:395a819:           // step 2
1:395a819:           sl.setStartLevel(sl.getStartLevel()+1);
1:395a819:           
1:395a819:           // step 3
1:395a819:           try {
1:395a819:             if (!!!waitForStartLevelChangedEventToOccur.tryAcquire(60, TimeUnit.SECONDS)) {
1:395a819:               LOGGER.debug("Starting CBA child bundles took longer than 60 seconds");
1:395a819:             }
1:395a819:           } catch (InterruptedException e) {
1:395a819:             // restore the interrupted status
1:395a819:             Thread.currentThread().interrupt();
1:395a819:           }
1:395a819:           
1:395a819:           context.removeFrameworkListener(listener);
1:395a819:         }
1:395a819:         context.ungetService(ref);
1:395a819:       }
1:395a819:   }
1:395a819:   
1:cb0f3ab:   public void close() throws BundleException
1:5315fd6:   {
1:cb0f3ab:     // close out packageadmin service tracker
2:cb0f3ab:     if (_packageAdminTracker != null) {
3:cb0f3ab:       try {
1:cb0f3ab:         _packageAdminTracker.close();
1:cb0f3ab:       } catch (IllegalStateException ise) {
1:cb0f3ab:         // Ignore this error because this can happen when we're trying to close the tracker on a
1:cb0f3ab:         // framework that has closed/is closing.
1:5315fd6:       }
1:cb0f3ab:     }
1:cb0f3ab: 
1:e22d71c:     // We used to call stop before uninstall but this seems to cause NPEs in equinox. It isn't
1:e22d71c:     // all the time, but I put in a change to resolution and it started NPEing all the time. This
1:e22d71c:     // was because stop caused everything to go back to the RESOLVED state, so equinox inited the
1:e22d71c:     // framework during uninstall and then tried to get the surrogate bundle, but init did not
1:e22d71c:     // create a surroage, so we got an NPE. I removed the stop and added this comment in the hope
1:e22d71c:     // that the stop doesn't get added back in. 
1:f91202e:     _compositeBundle.uninstall();
1:cb0f3ab:   }
1:cb0f3ab: 
1:cb0f3ab:   public void start(Bundle b) throws BundleException
1:cb0f3ab:   {
1:af97f41:     if (b.getState() != Bundle.ACTIVE && !isFragment(b)) 
1:cb0f3ab:       b.start(Bundle.START_ACTIVATION_POLICY);
1:cb0f3ab:   }
1:cb0f3ab: 
1:cb0f3ab:   public void stop(Bundle b) throws BundleException
1:cb0f3ab:   {
1:86ef96a:     if (!isFragment(b))
1:86ef96a:       b.stop();
1:cb0f3ab:   }
1:cb0f3ab: 
1:cb0f3ab:   public Bundle getFrameworkBundle()
1:cb0f3ab:   {
1:cb0f3ab:     return _compositeBundle;
1:cb0f3ab:   }
1:cb0f3ab: 
1:cb0f3ab:   public BundleContext getIsolatedBundleContext()
1:cb0f3ab:   {
1:cb0f3ab:     return _compositeBundle.getCompositeFramework().getBundleContext();
1:cb0f3ab:   }
1:cb0f3ab: 
1:cb0f3ab:   public List<Bundle> getBundles()
1:cb0f3ab:   {
1:af97f41:     // Ensure our bundle list is refreshed
1:af97f41:     ArrayList latestBundles = new ArrayList<Bundle>();
1:af97f41:     for (Bundle appBundle : _framework.getBundleContext().getBundles())
1:af97f41:     {
1:af97f41:       for (Bundle cachedBundle : _bundles)
1:af97f41:       {
1:af97f41:         // Look for a matching name and version (this doesnt make it the same bundle
1:af97f41:         // but it means we find the one we want)
1:af97f41:         if (cachedBundle.getSymbolicName().equals(appBundle.getSymbolicName()) &&
1:af97f41:             cachedBundle.getVersion().equals(appBundle.getVersion()))
1:af97f41:         {
1:af97f41:           // Now check if it has changed - the equals method will check more thoroughly
1:af97f41:           // to ensure this is the exact bundle we cached.
1:af97f41:           if (!cachedBundle.equals(appBundle))
1:af97f41:             latestBundles.add(appBundle); // bundle updated
1:af97f41:           else
1:af97f41:             latestBundles.add(cachedBundle); // bundle has not changed
1:af97f41:         }
1:af97f41:       }
1:af97f41:     }
1:af97f41:     
1:af97f41:     _bundles = latestBundles;
1:af97f41:     
1:af97f41:     return _bundles;
1:cb0f3ab:   }
1:cb0f3ab: 
2:cb0f3ab:   /**
1:cb0f3ab:    * This method uses the PackageAdmin service to identify if a bundle
1:cb0f3ab:    * is a fragment.
1:cb0f3ab:    * @param b
1:cb0f3ab:    * @return
1:a6ebe54:    */
1:cb0f3ab:   private boolean isFragment(Bundle b)
1:cb0f3ab:   {
1:cb0f3ab:     LOGGER.debug(LOG_ENTRY, "isFragment", new Object[] { b });
1:cb0f3ab: 
1:a6ebe54:     PackageAdmin admin = null;
1:cb0f3ab:     boolean isFragment = false;
1:cb0f3ab: 
1:a6ebe54:     try {
1:a6ebe54:       if (_packageAdminTracker != null) {
1:a6ebe54:         admin = (PackageAdmin) _packageAdminTracker.getService();
1:cb0f3ab:         if (admin != null) {
1:cb0f3ab:           isFragment = (admin.getBundleType(b) == PackageAdmin.BUNDLE_TYPE_FRAGMENT);
1:a6ebe54:         }
1:cb0f3ab:       }
1:a6ebe54:     } catch (RuntimeException re) {
1:a6ebe54:       LOGGER.debug(LOG_EXCEPTION, re);
1:cb0f3ab:     }
1:cb0f3ab: 
1:cb0f3ab:     LOGGER.debug(LOG_EXIT, "isFragment", new Object[] { Boolean.valueOf(isFragment) });
1:cb0f3ab: 
1:cb0f3ab:     return isFragment;
1:cb0f3ab:   }
1:cb0f3ab: 
1:cb0f3ab:   public Bundle install(BundleSuggestion suggestion, AriesApplication app) throws BundleException
1:cb0f3ab:   {
1:af97f41:     Bundle installedBundle = suggestion.install(this, app);
1:af97f41:     _bundles.add(installedBundle);
1:af97f41:     
1:af97f41:     return installedBundle;
1:cb0f3ab:   }
1:cb0f3ab: 
1:cb0f3ab:   public void uninstall(Bundle b) throws BundleException
1:cb0f3ab:   {
1:cb0f3ab:     b.uninstall();
1:af97f41:     _bundles.remove(b);
1:a6ebe54:   }
1:cb0f3ab: }
1:20de482: 
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:395a819
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Semaphore;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import org.osgi.framework.FrameworkEvent;
1: import org.osgi.framework.FrameworkListener;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.startlevel.StartLevel;
/////////////////////////////////////////////////////////////////////////
1:   
1:   private final AtomicBoolean startLevelIncreased = new AtomicBoolean(false);
/////////////////////////////////////////////////////////////////////////
1:     
1:     // make sure inner bundles are now startable
1:     if (startLevelIncreased.compareAndSet(false, true)) {
1:         increaseStartLevel(_compositeBundle.getCompositeFramework().getBundleContext());
1:     }
/////////////////////////////////////////////////////////////////////////
1:       
1:       setupStartLevelToPreventAutostart(_compositeBundle.getCompositeFramework().getBundleContext());
1:     }
1:   }
1:   
1:   /**
1:    * Name says it all if we don't make some adjustments bundles will be autostarted, which in the
1:    * grand scheme of things causes extenders to act on the inner bundles before the outer composite is even
1:    * resolved ...
1:    */
1:   private void setupStartLevelToPreventAutostart(BundleContext frameworkBundleContext)
1:   {
1:     ServiceReference ref = frameworkBundleContext.getServiceReference(StartLevel.class.getName());
1:     if (ref != null) {
1:       StartLevel sl = (StartLevel) frameworkBundleContext.getService(ref);
1:       if (sl != null) {
1:         // make sure new bundles are *not* automatically started (because that causes havoc)
1:         sl.setInitialBundleStartLevel(sl.getStartLevel()+1);
1:         frameworkBundleContext.ungetService(ref);
1:       }
1:   private void increaseStartLevel(BundleContext context) {
1:       /*
1:        * Algorithm for doing this
1:        * 
1:        * 1. Set up a framework listener that will tell us when the start level has been set.
1:        * 
1:        * 2. Change the start level. This is asynchronous so by the time the method returned the event 
1:        *    could have been sent. This is why we set up the listener in step 1.
1:        * 
1:        * 3. Wait until the start level has been set appropriately. At this stage all the bundles are startable
1:        *    and some have been started (most notably lazy activated bundles it appears). Other bundles are still
1:        *    in resolved state.
1:        */    
1:       
1:       ServiceReference ref = context.getServiceReference(StartLevel.class.getName());
1:       if (ref != null) {
1:         StartLevel sl = (StartLevel) context.getService(ref);
1:         if (sl != null) {
1: 
1:           final Semaphore waitForStartLevelChangedEventToOccur = new Semaphore(0);
1:           
1:           // step 1
1:           FrameworkListener listener = new FrameworkListener() {
1:             public void frameworkEvent(FrameworkEvent event)
1:             {
1:               if (event.getType() == FrameworkEvent.STARTLEVEL_CHANGED) {
1:                 waitForStartLevelChangedEventToOccur.release();
1:               }
1:             }
1:           };
1:           
1:           context.addFrameworkListener(listener);
1:           
1:           // step 2
1:           sl.setStartLevel(sl.getStartLevel()+1);
1:           
1:           // step 3
1:           try {
1:             if (!!!waitForStartLevelChangedEventToOccur.tryAcquire(60, TimeUnit.SECONDS)) {
1:               LOGGER.debug("Starting CBA child bundles took longer than 60 seconds");
1:             }
1:           } catch (InterruptedException e) {
1:             // restore the interrupted status
1:             Thread.currentThread().interrupt();
1:           }
1:           
1:           context.removeFrameworkListener(listener);
1:         }
1:         context.ungetService(ref);
1:       }
1:   }
1:   
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.framework.BundleFramework;
1: import org.apache.aries.application.management.spi.repository.BundleRepository.BundleSuggestion;
commit:b1c02cb
/////////////////////////////////////////////////////////////////////////
1:       _packageAdminTracker = new ServiceTracker(_compositeBundle.getCompositeFramework().getBundleContext(),
commit:f91202e
/////////////////////////////////////////////////////////////////////////
1:     _compositeBundle.uninstall();
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:e22d71c
/////////////////////////////////////////////////////////////////////////
1:     _compositeBundle.getCompositeFramework().init();
1:     _compositeBundle.start(Bundle.START_ACTIVATION_POLICY);
1:     if ( _packageAdminTracker == null)
1:     {
1:     }
/////////////////////////////////////////////////////////////////////////
1:     // We used to call stop before uninstall but this seems to cause NPEs in equinox. It isn't
1:     // all the time, but I put in a change to resolution and it started NPEing all the time. This
1:     // was because stop caused everything to go back to the RESOLVED state, so equinox inited the
1:     // framework during uninstall and then tried to get the surrogate bundle, but init did not
1:     // create a surroage, so we got an NPE. I removed the stop and added this comment in the hope
1:     // that the stop doesn't get added back in. 
commit:86ef96a
/////////////////////////////////////////////////////////////////////////
1:     if (!isFragment(b))
1:       b.stop();
author:Chris Wilkinson
-------------------------------------------------------------------------------
commit:af97f41
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   List<Bundle> _bundles;
1:   Framework _framework;
1:     _framework = cb.getCompositeFramework();
1:     _bundles = new ArrayList<Bundle>();
/////////////////////////////////////////////////////////////////////////
1:     if (b.getState() != Bundle.ACTIVE && !isFragment(b)) 
0:     if (!isFragment(b))
/////////////////////////////////////////////////////////////////////////
1:     // Ensure our bundle list is refreshed
1:     ArrayList latestBundles = new ArrayList<Bundle>();
1:     for (Bundle appBundle : _framework.getBundleContext().getBundles())
1:     {
1:       for (Bundle cachedBundle : _bundles)
1:       {
1:         // Look for a matching name and version (this doesnt make it the same bundle
1:         // but it means we find the one we want)
1:         if (cachedBundle.getSymbolicName().equals(appBundle.getSymbolicName()) &&
1:             cachedBundle.getVersion().equals(appBundle.getVersion()))
1:         {
1:           // Now check if it has changed - the equals method will check more thoroughly
1:           // to ensure this is the exact bundle we cached.
1:           if (!cachedBundle.equals(appBundle))
1:             latestBundles.add(appBundle); // bundle updated
1:           else
1:             latestBundles.add(cachedBundle); // bundle has not changed
1:         }
1:       }
1:     }
1:     
1:     _bundles = latestBundles;
1:     
1:     return _bundles;
/////////////////////////////////////////////////////////////////////////
1:     Bundle installedBundle = suggestion.install(this, app);
1:     _bundles.add(installedBundle);
1:     
1:     return installedBundle;
1:     _bundles.remove(b);
commit:982f132
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import org.eclipse.osgi.framework.internal.core.BundleHost;
0: import org.eclipse.osgi.framework.internal.core.InternalSystemBundle;
0: import org.osgi.service.framework.SurrogateBundle;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     if (b.getState() != Bundle.ACTIVE && !isFragment(b) && !(b instanceof SurrogateBundle) && !(b instanceof InternalSystemBundle)) 
0:     if (!isFragment(b) && !(b instanceof SurrogateBundle) && !(b instanceof InternalSystemBundle))
/////////////////////////////////////////////////////////////////////////
0:     return Arrays.asList(getIsolatedBundleContext().getBundles());
/////////////////////////////////////////////////////////////////////////
0:     return suggestion.install(this, app);
commit:666dd1b
/////////////////////////////////////////////////////////////////////////
0:     Bundle installedBundle = suggestion.install(this, app);
author:Holly Cummins
-------------------------------------------------------------------------------
commit:4ca0b54
/////////////////////////////////////////////////////////////////////////
1:   public void start() throws BundleException
/////////////////////////////////////////////////////////////////////////
1:   public void init() throws BundleException
commit:20de482
/////////////////////////////////////////////////////////////////////////
0:         _compositeBundle.start(Bundle.START_ACTIVATION_POLICY);
0:   if ( _packageAdminTracker == null)
1:   {
1:       _packageAdminTracker = new ServiceTracker(_compositeBundle.getCompositeFramework().getBundleContext(),
1:           PackageAdmin.class.getName(), null);
1:       _packageAdminTracker.open();
1:     
1:   }
1:   
1:     if (_compositeBundle.getCompositeFramework().getState() != Framework.ACTIVE)
1:     {
1:       _compositeBundle.getCompositeFramework().start();
1:   
1:       _packageAdminTracker = new ServiceTracker(_compositeBundle.getCompositeFramework().getBundleContext(),
1:           PackageAdmin.class.getName(), null);
1:       _packageAdminTracker.open();
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
commit:5315fd6
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:     	_compositeBundle.getCompositeFramework().start();
0:         _packageAdminTracker = new ServiceTracker(_compositeBundle.getCompositeFramework().getBundleContext(),
0:                 PackageAdmin.class.getName(), null);
0:           _packageAdminTracker.open();
1:    }
1:   }
1: 
1:   @Override
0:   public void start() throws BundleException
1:   {
0: 	  init();
0:     _compositeBundle.start(Bundle.START_ACTIVATION_POLICY);
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7e506ee
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0163400
/////////////////////////////////////////////////////////////////////////
commit:a6ebe54
/////////////////////////////////////////////////////////////////////////
0: import com.sun.xml.internal.bind.v2.runtime.unmarshaller.XsiNilLoader.Array;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
0:     /* Call PackageAdmin.refreshPackages() after uninstall 
0: 	 * to clean out a partially removed bundle. Just to be sure. 
1: 	 */ 
1:     PackageAdmin admin = null;
1:     try {
1:       if (_packageAdminTracker != null) {
1:         admin = (PackageAdmin) _packageAdminTracker.getService();
0:         admin.refreshPackages(new Bundle[]{b});
1:       }
1:     } catch (RuntimeException re) {
1:       LOGGER.debug(LOG_EXCEPTION, re);
1:     }
commit:cb0f3ab
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.runtime.framework;
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXCEPTION;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.aries.application.management.AriesApplication;
0: import org.apache.aries.application.management.BundleFramework;
0: import org.apache.aries.application.management.BundleRepository.BundleSuggestion;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleException;
0: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.launch.Framework;
1: import org.osgi.service.framework.CompositeBundle;
1: import org.osgi.service.packageadmin.PackageAdmin;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class BundleFrameworkImpl implements BundleFramework
1: {
1:   private static final Logger LOGGER = LoggerFactory.getLogger(BundleFrameworkImpl.class);
1: 
0:   List<Bundle> _bundles;
1:   CompositeBundle _compositeBundle;
1: 
1:   ServiceTracker _packageAdminTracker;
1: 
1:   BundleFrameworkImpl(CompositeBundle cb)
1:   {
1:     _compositeBundle = cb;
0:     _bundles = new ArrayList<Bundle>();
1:   }
1: 
0:   public void init() throws BundleException
1:   {
0:     if (_compositeBundle.getCompositeFramework().getState() != Framework.ACTIVE)
1:     {
0:       _compositeBundle.start(Bundle.START_ACTIVATION_POLICY);
1:   
0:       _packageAdminTracker = new ServiceTracker(_compositeBundle.getBundleContext(),
0:           PackageAdmin.class.getName(), null);
0:       _packageAdminTracker.open();
1:     }
1:   }
1: 
1:   public void close() throws BundleException
1:   {
1:     /**
0:      * TODO: Remove this work-around code 
1:      * 
0:      * Workaround for IllegalArgumentException during PackagePermission check
0:      * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=298894
1:      */
0:     BundleContext ctx = _compositeBundle.getBundleContext();
0:     ServiceReference ref = ctx.getServiceReference(PackageAdmin.class.getName());
0:     if (ref != null) {
1:       try {
0:         PackageAdmin pa = (PackageAdmin) ctx.getService(ref);
0:         pa.refreshPackages(null);
0:       } finally {
0:         ctx.ungetService(ref);
1:       }
1:     }
1: 
1:     // close out packageadmin service tracker
1:     if (_packageAdminTracker != null) {
1:       try {
1:         _packageAdminTracker.close();
1:       } catch (IllegalStateException ise) {
1:         // Ignore this error because this can happen when we're trying to close the tracker on a
1:         // framework that has closed/is closing.
1:       }
1:     }
1: 
0:     _compositeBundle.stop();
1:   }
1: 
1:   public void start(Bundle b) throws BundleException
1:   {
0:     if (b.getState() != Bundle.ACTIVE && !isFragment(b)) 
1:       b.start(Bundle.START_ACTIVATION_POLICY);
1:   }
1: 
1:   public void stop(Bundle b) throws BundleException
1:   {
0:     b.stop();
1:   }
1: 
1:   public Bundle getFrameworkBundle()
1:   {
1:     return _compositeBundle;
1:   }
1: 
1:   public BundleContext getIsolatedBundleContext()
1:   {
1:     return _compositeBundle.getCompositeFramework().getBundleContext();
1:   }
1: 
1:   public List<Bundle> getBundles()
1:   {
0:     return _bundles;
1:   }
1: 
1:   /**
1:    * This method uses the PackageAdmin service to identify if a bundle
1:    * is a fragment.
1:    * @param b
1:    * @return
1:    */
1:   private boolean isFragment(Bundle b)
1:   {
1:     LOGGER.debug(LOG_ENTRY, "isFragment", new Object[] { b });
1: 
0:     PackageAdmin admin = null;
1:     boolean isFragment = false;
1: 
1:     try {
1:       if (_packageAdminTracker != null) {
0:         admin = (PackageAdmin) _packageAdminTracker.getService();
1:         if (admin != null) {
1:           isFragment = (admin.getBundleType(b) == PackageAdmin.BUNDLE_TYPE_FRAGMENT);
1:         }
1:       }
0:     } catch (RuntimeException re) {
0:       LOGGER.debug(LOG_EXCEPTION, re);
1:     }
1: 
1:     LOGGER.debug(LOG_EXIT, "isFragment", new Object[] { Boolean.valueOf(isFragment) });
1: 
1:     return isFragment;
1:   }
1: 
1:   public Bundle install(BundleSuggestion suggestion, AriesApplication app) throws BundleException
1:   {
0:     Bundle installedBundle = suggestion.install(getIsolatedBundleContext(), app);
0:     _bundles.add(installedBundle);
1:     
0:     return installedBundle;
1:   }
1: 
1:   public void uninstall(Bundle b) throws BundleException
1:   {
1:     b.uninstall();
0:     _bundles.remove(b);
1:   }
1: }
============================================================================