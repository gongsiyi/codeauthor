1:8914925: /*
1:8914925:  * Licensed to the Apache Software Foundation (ASF) under one
1:8914925:  * or more contributor license agreements.  See the NOTICE file
1:8914925:  * distributed with this work for additional information
1:8914925:  * regarding copyright ownership.  The ASF licenses this file
1:8914925:  * to you under the Apache License, Version 2.0 (the
1:8914925:  * "License"); you may not use this file except in compliance
1:8914925:  * with the License.  You may obtain a copy of the License at
1:8914925:  *
1:8914925:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8914925:  *
1:8914925:  * Unless required by applicable law or agreed to in writing,
1:8914925:  * software distributed under the License is distributed on an
1:8914925:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8914925:  * KIND, either express or implied.  See the License for the
1:8914925:  * specific language governing permissions and limitations
1:8914925:  * under the License.
1:8914925:  */
1:8914925: 
1:8914925: package org.apache.aries.application.runtime.impl;
1:8914925: 
1:8914925: import java.util.HashSet;
1:1caf596: import java.util.Iterator;
1:8914925: import java.util.Map;
1:8914925: import java.util.Set;
1:8914925: import java.util.concurrent.ConcurrentHashMap;
1:8914925: import java.util.concurrent.ConcurrentMap;
1:8914925: 
1:8151f8c: import org.apache.aries.application.DeploymentMetadata;
1:8914925: import org.apache.aries.application.management.AriesApplication;
1:948b72b: import org.apache.aries.application.management.AriesApplicationContext;
1:55a9b56: import org.apache.aries.application.management.ManagementException;
1:8151f8c: import org.apache.aries.application.management.UpdateException;
1:948b72b: import org.apache.aries.application.management.AriesApplicationContext.ApplicationState;
1:89f804e: import org.apache.aries.application.management.spi.runtime.AriesApplicationContextManager;
1:d9bfe63: import org.osgi.framework.Bundle;
1:8914925: import org.osgi.framework.BundleContext;
1:55a9b56: import org.osgi.framework.BundleException;
1:8914925: 
1:948b72b: public class ApplicationContextManagerImpl implements AriesApplicationContextManager {
1:8914925: 
1:1caf596:   private ConcurrentMap<AriesApplication, ApplicationContextImpl> _appToContextMap;
1:1caf596:   private BundleContext _bundleContext;
1:8914925:   
1:8914925:   public ApplicationContextManagerImpl () { 
1:1caf596:     _appToContextMap = new ConcurrentHashMap<AriesApplication, ApplicationContextImpl>();
1:8914925:   }
1:8914925:   
1:8914925:   public void setBundleContext (BundleContext b) { 
1:8914925:     _bundleContext = b;
1:8914925:   }
1:8914925:   
1:948b72b:   public AriesApplicationContext getApplicationContext(AriesApplication app) throws BundleException, ManagementException {
1:1caf596:     ApplicationContextImpl result;
1:8914925:     if (_appToContextMap.containsKey(app)) { 
1:8914925:       result = _appToContextMap.get(app);
1:8914925:     } else { 
1:8914925:       result = new ApplicationContextImpl (_bundleContext, app);
1:1caf596:       ApplicationContextImpl previous = _appToContextMap.putIfAbsent(app, result);
1:8914925:       if (previous != null) { 
1:8914925:         result = previous;
1:8914925:       }
1:8914925:     }
1:8914925:     return result;
1:8914925:   }
1:8914925: 
1:948b72b:   public Set<AriesApplicationContext> getApplicationContexts() {
1:948b72b:     Set<AriesApplicationContext> result = new HashSet<AriesApplicationContext>();
1:1caf596:     for (Map.Entry<AriesApplication, ApplicationContextImpl> entry: _appToContextMap.entrySet()) {
1:8914925:       result.add (entry.getValue());
1:8914925:     }
1:8914925:     return result;
1:8914925:   }
1:8914925: 
1:948b72b:   public void remove(AriesApplicationContext app)
1:1caf596:   {
1:1caf596:     Iterator<Map.Entry<AriesApplication, ApplicationContextImpl>> it = _appToContextMap.entrySet().iterator();
1:1caf596:     
1:1caf596:     while (it.hasNext()) {
1:1caf596:       Map.Entry<AriesApplication, ApplicationContextImpl> entry = it.next();
1:1caf596:       
1:1caf596:       ApplicationContextImpl potentialMatch = entry.getValue();
1:1caf596:       
1:1caf596:       if (potentialMatch == app) {
1:1caf596:         it.remove();
1:1caf596: 
1:d9bfe63:         uninstall(potentialMatch);
1:1caf596: 
1:1caf596:         break;
1:8914925:       }
1:1caf596:     }
1:1caf596:   }
4:d9bfe63: 
1:5f59645:   private void uninstall(ApplicationContextImpl app)
1:d9bfe63:   {
1:5f59645:     Set<Bundle> bundles = app.getApplicationContent();
1:5f59645:     for (Bundle b : bundles) {
1:5f59645:       try {
1:d9bfe63:         b.uninstall();
1:5f59645:       } catch (BundleException be) {
1:5f59645:         // TODO ignoring this feels wrong, but I'm not sure how to communicate to the caller multiple failures. 
1:5f59645:       }
1:1caf596:     }
1:5f59645:     app.setState(ApplicationState.UNINSTALLED);
1:5f59645:   }
1:5f59645:   
1:5f59645:   public void close()
1:5f59645:   {
1:5f59645:     for (ApplicationContextImpl ctx : _appToContextMap.values()) {
1:5f59645:       uninstall(ctx);
1:5f59645:     }
1:5f59645:     
1:5f59645:     _appToContextMap.clear();
1:1caf596:   }
1:8151f8c: 
1:8151f8c:   public AriesApplicationContext update(AriesApplication app, DeploymentMetadata oldMetadata) throws UpdateException {
1:8151f8c:     ApplicationContextImpl oldCtx = _appToContextMap.get(app);
1:8151f8c:     
1:8151f8c:     if (oldCtx == null) {
1:8151f8c:       throw new IllegalArgumentException("AriesApplication "+
1:8151f8c:           app.getApplicationMetadata().getApplicationSymbolicName() + "/" + app.getApplicationMetadata().getApplicationVersion() + 
1:8151f8c:           " cannot be updated because it is not installed");
1:8151f8c:     }
1:8151f8c:     
1:8151f8c:     uninstall(oldCtx);
1:8151f8c:     try {
1:8151f8c:       AriesApplicationContext newCtx = getApplicationContext(app);
1:8151f8c:       if (oldCtx.getApplicationState() == ApplicationState.ACTIVE) {
1:8151f8c:         newCtx.start();
1:8151f8c:       }
1:8151f8c:       
1:8151f8c:       return newCtx;
1:8151f8c:     } catch (BundleException e) {
1:8151f8c:       throw new UpdateException("Update failed: "+e.getMessage(), e, false, null);
1:8151f8c:     } catch (ManagementException e) {
1:8151f8c:       throw new UpdateException("Update failed: "+e.getMessage(), e, false, null);
1:8151f8c:     }
1:8151f8c:   }
2:d9bfe63: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.runtime.AriesApplicationContextManager;
commit:8151f8c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.DeploymentMetadata;
1: import org.apache.aries.application.management.UpdateException;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public AriesApplicationContext update(AriesApplication app, DeploymentMetadata oldMetadata) throws UpdateException {
1:     ApplicationContextImpl oldCtx = _appToContextMap.get(app);
1:     
1:     if (oldCtx == null) {
1:       throw new IllegalArgumentException("AriesApplication "+
1:           app.getApplicationMetadata().getApplicationSymbolicName() + "/" + app.getApplicationMetadata().getApplicationVersion() + 
1:           " cannot be updated because it is not installed");
1:     }
1:     
1:     uninstall(oldCtx);
1:     try {
1:       AriesApplicationContext newCtx = getApplicationContext(app);
1:       if (oldCtx.getApplicationState() == ApplicationState.ACTIVE) {
1:         newCtx.start();
1:       }
1:       
1:       return newCtx;
1:     } catch (BundleException e) {
1:       throw new UpdateException("Update failed: "+e.getMessage(), e, false, null);
1:     } catch (ManagementException e) {
1:       throw new UpdateException("Update failed: "+e.getMessage(), e, false, null);
1:     }
1:   }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:948b72b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.AriesApplicationContext;
0: import org.apache.aries.application.management.AriesApplicationContextManager;
1: import org.apache.aries.application.management.AriesApplicationContext.ApplicationState;
1: public class ApplicationContextManagerImpl implements AriesApplicationContextManager {
/////////////////////////////////////////////////////////////////////////
1:   public AriesApplicationContext getApplicationContext(AriesApplication app) throws BundleException, ManagementException {
/////////////////////////////////////////////////////////////////////////
1:   public Set<AriesApplicationContext> getApplicationContexts() {
1:     Set<AriesApplicationContext> result = new HashSet<AriesApplicationContext>();
1:   public void remove(AriesApplicationContext app)
commit:8914925
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.application.runtime.impl;
1: 
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
1: 
0: import org.apache.aries.application.management.ApplicationContext;
0: import org.apache.aries.application.management.ApplicationContextManager;
1: import org.apache.aries.application.management.AriesApplication;
1: import org.osgi.framework.BundleContext;
1: 
0: public class ApplicationContextManagerImpl implements ApplicationContextManager {
1: 
0:   ConcurrentMap<AriesApplication, ApplicationContext> _appToContextMap;
0:   BundleContext _bundleContext;
1:   
1:   public ApplicationContextManagerImpl () { 
0:     _appToContextMap = new ConcurrentHashMap<AriesApplication, ApplicationContext>();
1:   }
1:   
1:   public void setBundleContext (BundleContext b) { 
1:     _bundleContext = b;
1:   }
1:   
0:   public ApplicationContext getApplicationContext(AriesApplication app) {
0:     ApplicationContext result;
1:     if (_appToContextMap.containsKey(app)) { 
1:       result = _appToContextMap.get(app);
1:     } else { 
1:       result = new ApplicationContextImpl (_bundleContext, app);
0:       ApplicationContext previous = _appToContextMap.putIfAbsent(app, result);
1:       if (previous != null) { 
1:         result = previous;
1:       }
1:     }
1:     return result;
1:   }
1: 
0:   public Set<ApplicationContext> getApplicationContexts() {
0:     Set<ApplicationContext> result = new HashSet<ApplicationContext>();
0:     for (Map.Entry<AriesApplication, ApplicationContext> entry: _appToContextMap.entrySet()) {
1:       result.add (entry.getValue());
1:     }
1:     return result;
1:   }
1: 
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:5f59645
/////////////////////////////////////////////////////////////////////////
0:   public void remove(ApplicationContext app)
/////////////////////////////////////////////////////////////////////////
1:   private void uninstall(ApplicationContextImpl app)
1:     Set<Bundle> bundles = app.getApplicationContent();
1:     for (Bundle b : bundles) {
1:       try {
1:       } catch (BundleException be) {
1:         // TODO ignoring this feels wrong, but I'm not sure how to communicate to the caller multiple failures. 
1:     }
1:     app.setState(ApplicationState.UNINSTALLED);
1:   }
1:   
1:   public void close()
1:   {
1:     for (ApplicationContextImpl ctx : _appToContextMap.values()) {
1:       uninstall(ctx);
1:     }
1:     
1:     _appToContextMap.clear();
commit:1caf596
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.ApplicationContext.ApplicationState;
1:   private ConcurrentMap<AriesApplication, ApplicationContextImpl> _appToContextMap;
1:   private BundleContext _bundleContext;
1:     _appToContextMap = new ConcurrentHashMap<AriesApplication, ApplicationContextImpl>();
/////////////////////////////////////////////////////////////////////////
1:     ApplicationContextImpl result;
1:       ApplicationContextImpl previous = _appToContextMap.putIfAbsent(app, result);
/////////////////////////////////////////////////////////////////////////
1:     for (Map.Entry<AriesApplication, ApplicationContextImpl> entry: _appToContextMap.entrySet()) {
0:   public void remove(ApplicationContext app)
1:   {
1:     Iterator<Map.Entry<AriesApplication, ApplicationContextImpl>> it = _appToContextMap.entrySet().iterator();
1:     
1:     while (it.hasNext()) {
1:       Map.Entry<AriesApplication, ApplicationContextImpl> entry = it.next();
1:       
1:       ApplicationContextImpl potentialMatch = entry.getValue();
1:       
1:       if (potentialMatch == app) {
1:         it.remove();
1:         
0:         potentialMatch.setState(ApplicationState.UNINSTALLED);
1:         
1:         break;
1:       }
1:     }
1:   }
1: }
commit:55a9b56
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.ManagementException;
1: import org.osgi.framework.BundleException;
/////////////////////////////////////////////////////////////////////////
0:   public ApplicationContext getApplicationContext(AriesApplication app) throws BundleException, ManagementException {
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:d9bfe63
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
/////////////////////////////////////////////////////////////////////////
0:   public void remove(ApplicationContext app) throws BundleException
/////////////////////////////////////////////////////////////////////////
1: 
1:         uninstall(potentialMatch);
1: 
1: 
0:   protected void uninstall(ApplicationContextImpl app) throws BundleException
1:   {
0:       Set<Bundle> bundles = app.getApplicationContent();
0:       for (Bundle b : bundles) {
1:         b.uninstall();
1:       }
0:       app.setState(ApplicationState.UNINSTALLED);
1: 
1:   }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:ad7ee02
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.runtime.impl;
0: 
0: import java.util.HashSet;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.ConcurrentMap;
0: 
0: import org.apache.aries.application.management.ApplicationContext;
0: import org.apache.aries.application.management.ApplicationContextManager;
0: import org.apache.aries.application.management.AriesApplication;
0: import org.osgi.framework.BundleContext;
0: 
0: public class ApplicationContextManagerImpl implements ApplicationContextManager {
0: 
0:   ConcurrentMap<AriesApplication, ApplicationContext> _appToContextMap;
0:   BundleContext _bundleContext;
0:   
0:   public ApplicationContextManagerImpl () { 
0:     _appToContextMap = new ConcurrentHashMap<AriesApplication, ApplicationContext>();
0:   }
0:   
0:   public void setBundleContext (BundleContext b) { 
0:     _bundleContext = b;
0:   }
0:   
0:   public ApplicationContext getApplicationContext(AriesApplication app) {
0:     ApplicationContext result;
0:     if (_appToContextMap.containsKey(app)) { 
0:       result = _appToContextMap.get(app);
0:     } else { 
0:       result = new ApplicationContextImpl (_bundleContext, app);
0:       ApplicationContext previous = _appToContextMap.putIfAbsent(app, result);
0:       if (previous != null) { 
0:         result = previous;
0:       }
0:     }
0:     return result;
0:   }
0: 
0:   public Set<ApplicationContext> getApplicationContexts() {
0:     Set<ApplicationContext> result = new HashSet<ApplicationContext>();
0:     for (Map.Entry<AriesApplication, ApplicationContext> entry: _appToContextMap.entrySet()) {
0:       result.add (entry.getValue());
0:     }
0:     return result;
0:   }
0: 
0: }
============================================================================