1:96d4e06: /*
1:96d4e06:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d4e06:  * or more contributor license agreements.  See the NOTICE file
1:96d4e06:  * distributed with this work for additional information
1:96d4e06:  * regarding copyright ownership.  The ASF licenses this file
1:96d4e06:  * to you under the Apache License, Version 2.0 (the
1:96d4e06:  * "License"); you may not use this file except in compliance
1:96d4e06:  * with the License.  You may obtain a copy of the License at
1:96d4e06:  *
1:96d4e06:  *   http://www.apache.org/licenses/LICENSE-2.0
1:96d4e06:  *
1:96d4e06:  * Unless required by applicable law or agreed to in writing,
1:96d4e06:  * software distributed under the License is distributed on an
1:96d4e06:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:96d4e06:  * KIND, either express or implied.  See the License for the
1:96d4e06:  * specific language governing permissions and limitations
1:96d4e06:  * under the License.
1:96d4e06:  */
1:475ef33: package org.apache.aries.proxy.impl.interfaces;
4:96d4e06: 
1:475ef33: import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
1:8f852b6: import org.apache.aries.proxy.impl.common.AbstractWovenProxyMethodAdapter;
1:8f852b6: import org.apache.aries.proxy.impl.common.WovenProxyAbstractMethodAdapter;
1:8f852b6: import org.apache.aries.proxy.impl.common.WovenProxyConcreteMethodAdapter;
1:96d4e06: import org.objectweb.asm.ClassVisitor;
1:96d4e06: import org.objectweb.asm.MethodVisitor;
1:96d4e06: import org.objectweb.asm.Type;
1:96d4e06: import org.objectweb.asm.commons.Method;
1:96d4e06: 
1:96d4e06: /**
1:475ef33:  * Used to copy method signatures into a new class
1:96d4e06:  */
1:96d4e06: final class InterfaceUsingWovenProxyAdapter extends AbstractWovenProxyAdapter {
1:96d4e06: 
1:96d4e06:   public InterfaceUsingWovenProxyAdapter(ClassVisitor writer, String className,
1:96d4e06:       ClassLoader loader) {
1:96d4e06:     super(writer, className, loader);
3:96d4e06:   }
1:96d4e06: 
1:96d4e06:   /**
1:8f852b6:    * Return a {@link MethodVisitor} that provides basic implementations for all
1:8f852b6:    * methods - the easiest thing to do for methods that aren't abstract is to
1:8f852b6:    * pretend that they are, but drive the adapter ourselves
1:96d4e06:    */ 
1:8f852b6:   protected final AbstractWovenProxyMethodAdapter getWeavingMethodVisitor(int access, String name,
1:96d4e06:       String desc, String signature, String[] exceptions, Method currentMethod,
1:8f852b6:       String methodStaticFieldName, Type currentMethodDeclaringType,
1:8f852b6:       boolean currentMethodDeclaringTypeIsInterface) {
1:8f852b6:     
1:051eadf:     boolean isDefaultMethod = currentMethodDeclaringTypeIsInterface && 
1:051eadf:         ((access & (ACC_ABSTRACT | ACC_PUBLIC | ACC_STATIC)) == ACC_PUBLIC);
1:051eadf:       
1:051eadf:       
1:051eadf:     if ((access & ACC_ABSTRACT) != 0 || isDefaultMethod) {
1:8f852b6:       access &= ~ACC_ABSTRACT;
1:8f852b6:       return new WovenProxyAbstractMethodAdapter(cv.visitMethod(
1:8f852b6:           access, name, desc, signature, exceptions), access, name, desc,
1:8f852b6:           methodStaticFieldName, currentMethod, typeBeingWoven, 
1:051eadf:           currentMethodDeclaringType, currentMethodDeclaringTypeIsInterface, isDefaultMethod);
1:8f852b6:     } else {
1:8f852b6:       return new WovenProxyConcreteMethodAdapter(cv.visitMethod(
1:8f852b6:           access, name, desc, signature, exceptions), access, name, desc, exceptions, 
1:8f852b6:           methodStaticFieldName, currentMethod, typeBeingWoven, 
1:051eadf:           currentMethodDeclaringType, currentMethodDeclaringTypeIsInterface);
1:8f852b6:     }
1:96d4e06:   }
1:96d4e06: }
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:051eadf
/////////////////////////////////////////////////////////////////////////
1:     boolean isDefaultMethod = currentMethodDeclaringTypeIsInterface && 
1:         ((access & (ACC_ABSTRACT | ACC_PUBLIC | ACC_STATIC)) == ACC_PUBLIC);
1:       
1:       
1:     if ((access & ACC_ABSTRACT) != 0 || isDefaultMethod) {
1:           currentMethodDeclaringType, currentMethodDeclaringTypeIsInterface, isDefaultMethod);
1:           currentMethodDeclaringType, currentMethodDeclaringTypeIsInterface);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8f852b6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.impl.common.AbstractWovenProxyMethodAdapter;
1: import org.apache.aries.proxy.impl.common.WovenProxyAbstractMethodAdapter;
1: import org.apache.aries.proxy.impl.common.WovenProxyConcreteMethodAdapter;
/////////////////////////////////////////////////////////////////////////
1:    * Return a {@link MethodVisitor} that provides basic implementations for all
1:    * methods - the easiest thing to do for methods that aren't abstract is to
1:    * pretend that they are, but drive the adapter ourselves
1:   protected final AbstractWovenProxyMethodAdapter getWeavingMethodVisitor(int access, String name,
1:       String methodStaticFieldName, Type currentMethodDeclaringType,
1:       boolean currentMethodDeclaringTypeIsInterface) {
1:     
0:     if ((access & ACC_ABSTRACT) != 0) {
1:       access &= ~ACC_ABSTRACT;
1:       return new WovenProxyAbstractMethodAdapter(cv.visitMethod(
1:           access, name, desc, signature, exceptions), access, name, desc,
1:           methodStaticFieldName, currentMethod, typeBeingWoven, 
0:           currentMethodDeclaringType, currentMethodDeclaringTypeIsInterface);
1:     } else {
1:       return new WovenProxyConcreteMethodAdapter(cv.visitMethod(
1:           access, name, desc, signature, exceptions), access, name, desc, exceptions, 
1:           methodStaticFieldName, currentMethod, typeBeingWoven, 
0:           currentMethodDeclaringType);
1:     }
commit:d014a6c
/////////////////////////////////////////////////////////////////////////
0:   private Type currentMethodDeclaringType;
0:   private boolean currentMethodDeclaringTypeIsInterface;
0:   public final void setCurrentMethodDeclaringType(Type type, boolean isInterface) {
0:     currentMethodDeclaringType = type;
0:     currentMethodDeclaringTypeIsInterface = isInterface;
/////////////////////////////////////////////////////////////////////////
0:         methodStaticFieldName, currentMethod, typeBeingWoven, 
0:         currentMethodDeclaringType, currentMethodDeclaringTypeIsInterface);
0:     return currentMethodDeclaringType;
commit:dad18d4
/////////////////////////////////////////////////////////////////////////
commit:475ef33
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.proxy.impl.interfaces;
1: import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
0: import org.apache.aries.proxy.impl.weaving.ProxyWeavingHook;
1:  * Used to copy method signatures into a new class
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.proxy.impl.weaving;
1: 
1: import org.objectweb.asm.ClassVisitor;
1: import org.objectweb.asm.MethodVisitor;
1: import org.objectweb.asm.Type;
1: import org.objectweb.asm.commons.Method;
1: 
1: /**
0:  * Used to weave classes processed by the {@link ProxyWeavingHook}
1:  */
1: final class InterfaceUsingWovenProxyAdapter extends AbstractWovenProxyAdapter {
1: 
0:   private Type currentIfaceType;
1:   
1:   public InterfaceUsingWovenProxyAdapter(ClassVisitor writer, String className,
1:       ClassLoader loader) {
1:     super(writer, className, loader);
1:   }
1: 
0:   public final void setCurrentInterface(Type type) {
0:     currentIfaceType = type;
1:   }
1:   
1:   /**
0:    * Return a {@link MethodVisitor} that copes with interfaces
1:    */ 
0:   protected final MethodVisitor getWeavingMethodVisitor(int access, String name,
1:       String desc, String signature, String[] exceptions, Method currentMethod,
0:       String methodStaticFieldName) {
0:     return new InterfaceUsingWovenProxyMethodAdapter(cv.visitMethod(
0:         access, name, desc, signature, exceptions), access, name, desc,
0:         methodStaticFieldName, currentMethod, typeBeingWoven, currentIfaceType);
1:   }
1: 
0:   @Override
0:   protected final Type getDeclaringTypeForCurrentMethod() {
0:     return currentIfaceType;
1:   }
1: }
============================================================================