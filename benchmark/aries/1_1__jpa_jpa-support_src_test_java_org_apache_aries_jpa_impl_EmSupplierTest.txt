1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.impl;
4:2cfdf52: 
1:2cfdf52: import static java.util.concurrent.TimeUnit.MILLISECONDS;
1:2cfdf52: import static org.mockito.Mockito.mock;
1:2cfdf52: import static org.mockito.Mockito.when;
1:2cfdf52: 
1:2cfdf52: import java.util.concurrent.Executors;
1:2cfdf52: import java.util.concurrent.Semaphore;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.EntityManager;
1:2cfdf52: import javax.persistence.EntityManagerFactory;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.support.impl.EMSupplierImpl;
1:2cfdf52: import org.junit.Assert;
1:2cfdf52: import org.junit.Test;
1:798ba3b: import org.osgi.service.coordinator.Coordinator;
1:2cfdf52: 
1:2cfdf52: public class EmSupplierTest {
1:2cfdf52: 
1:2cfdf52:     @Test
1:2cfdf52:     public void lifeCycleTest() {
1:2cfdf52:         EntityManagerFactory emf = mockEmf();
1:798ba3b:         Coordinator coordinator = new DummyCoordinator();
1:2cfdf52: 
1:0d59ccb:         EMSupplierImpl emSupplier = new EMSupplierImpl("myunit", emf, coordinator);
1:0d59ccb:         assertIllegalState(emSupplier);
1:0d59ccb:         coordinator.begin("test", 0);
1:2cfdf52:         EntityManager em = emSupplier.get();
1:2cfdf52:         Assert.assertNotNull("EM should be present after preCall", em);
1:0d59ccb:         coordinator.begin("testinner", 0);
1:2cfdf52:         Assert.assertSame("Same EM for inner preCall", em, emSupplier.get());
1:0d59ccb:         coordinator.pop().end();
1:2cfdf52:         Assert.assertSame("EM must still be the same after inner postCall", em, emSupplier.get());
1:0d59ccb:         coordinator.pop().end();
1:e5c89d2:         assertIllegalState(emSupplier);
1:2cfdf52:         
1:2cfdf52:         boolean clean = emSupplier.close();
1:2cfdf52:         Assert.assertTrue("Shutdown should be clean", clean);
2:2cfdf52:     }
1:e5c89d2: 
1:2cfdf52: 
1:e5c89d2:     private void assertIllegalState(EMSupplierImpl emSupplier) {
1:e5c89d2:         try {
1:e5c89d2:             emSupplier.get();
1:e5c89d2:             Assert.fail(IllegalStateException.class + " expected");
1:e5c89d2:         } catch (IllegalStateException e) {
1:e5c89d2:             // Expected
1:e5c89d2:         }
1:e5c89d2:     }
1:e5c89d2: 
1:2cfdf52:     
1:2cfdf52:     @Test
1:2cfdf52:     public void uncleanLifeCycleTest() {
1:2cfdf52:         EntityManagerFactory emf = mockEmf();
1:798ba3b:         Coordinator coordinator = new DummyCoordinator();
1:0d59ccb:         EMSupplierImpl emSupplier = new EMSupplierImpl("myunit", emf, coordinator);
1:2cfdf52:         emSupplier.setShutdownWait(100, MILLISECONDS);
1:0d59ccb:         coordinator.begin("test", 0);
1:798ba3b:         emSupplier.get();
1:2cfdf52:         boolean clean = emSupplier.close();
1:2cfdf52:         Assert.assertFalse("Shutdown should be unclean", clean);
1:2cfdf52:     }
1:2cfdf52:     
1:2cfdf52:     @Test
1:2cfdf52:     public void asyncCleanLifeCycleTest() throws InterruptedException {
1:2cfdf52:         EntityManagerFactory emf = mockEmf();
1:0d59ccb:         final Coordinator coordinator = new DummyCoordinator();
1:0d59ccb:         final EMSupplierImpl emSupplier = new EMSupplierImpl("myunit", emf,coordinator);
1:2cfdf52:         final Semaphore preCallSem = new Semaphore(0);
1:2cfdf52:         Runnable command = new Runnable() {
1:2cfdf52:             
1:2cfdf52:             @Override
1:2cfdf52:             public void run() {
1:0d59ccb:                 coordinator.begin("test", 0);
1:2cfdf52:                 preCallSem.release();
1:0d59ccb:                 coordinator.pop().end();
1:2cfdf52:             }
1:2cfdf52:         };
1:2cfdf52:         Executors.newSingleThreadExecutor().execute(command);
1:2cfdf52:         preCallSem.acquire();
1:2cfdf52:         // EMs not closed when close is called but are closed before timeout 
1:2cfdf52:         boolean clean = emSupplier.close();
1:2cfdf52:         Assert.assertTrue("Shutdown should be clean", clean);
1:2cfdf52:     }
1:2cfdf52: 
1:798ba3b:     private EntityManagerFactory mockEmf() {
1:798ba3b:         EntityManagerFactory emf = mock(EntityManagerFactory.class);
1:798ba3b:         EntityManager em = mock(EntityManager.class);
1:798ba3b:         when(emf.createEntityManager()).thenReturn(em);
1:798ba3b:         return emf;
1:798ba3b:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1:         EMSupplierImpl emSupplier = new EMSupplierImpl("myunit", emf, coordinator);
1:         assertIllegalState(emSupplier);
1:         coordinator.begin("test", 0);
1:         coordinator.begin("testinner", 0);
1:         coordinator.pop().end();
1:         coordinator.pop().end();
/////////////////////////////////////////////////////////////////////////
1:         EMSupplierImpl emSupplier = new EMSupplierImpl("myunit", emf, coordinator);
1:         coordinator.begin("test", 0);
/////////////////////////////////////////////////////////////////////////
1:         final Coordinator coordinator = new DummyCoordinator();
1:         final EMSupplierImpl emSupplier = new EMSupplierImpl("myunit", emf,coordinator);
1:                 coordinator.begin("test", 0);
1:                 coordinator.pop().end();
commit:e5c89d2
/////////////////////////////////////////////////////////////////////////
1:         assertIllegalState(emSupplier);
/////////////////////////////////////////////////////////////////////////
0:         assertIllegalState(emSupplier);
1: 
1:     private void assertIllegalState(EMSupplierImpl emSupplier) {
1:         try {
1:             emSupplier.get();
1:             Assert.fail(IllegalStateException.class + " expected");
1:         } catch (IllegalStateException e) {
1:             // Expected
1:         }
1:     }
1: 
commit:798ba3b
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.coordinator.Coordinator;
1:         Coordinator coordinator = new DummyCoordinator();
0:         EMSupplierImpl emSupplier = new EMSupplierImpl(emf, coordinator );
/////////////////////////////////////////////////////////////////////////
1:         Coordinator coordinator = new DummyCoordinator();
0:         EMSupplierImpl emSupplier = new EMSupplierImpl(emf, coordinator);
1:         emSupplier.get();
/////////////////////////////////////////////////////////////////////////
0:         Coordinator coordinator = new DummyCoordinator();
0:         final EMSupplierImpl emSupplier = new EMSupplierImpl(emf,coordinator);
/////////////////////////////////////////////////////////////////////////
1:     private EntityManagerFactory mockEmf() {
1:         EntityManagerFactory emf = mock(EntityManagerFactory.class);
1:         EntityManager em = mock(EntityManager.class);
1:         when(emf.createEntityManager()).thenReturn(em);
1:         return emf;
1:     }
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.impl;
1: 
1: import static java.util.concurrent.TimeUnit.MILLISECONDS;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.when;
1: 
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Semaphore;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: 
1: import org.apache.aries.jpa.support.impl.EMSupplierImpl;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class EmSupplierTest {
1: 
1:     @Test
1:     public void lifeCycleTest() {
1:         EntityManagerFactory emf = mockEmf();
0:         EMSupplierImpl emSupplier = new EMSupplierImpl(emf);
1:         
0:         Assert.assertNull("No EM may be present at start", emSupplier.get());
1: 
0:         emSupplier.preCall();
1:         EntityManager em = emSupplier.get();
1:         Assert.assertNotNull("EM should be present after preCall", em);
0:         emSupplier.preCall();
1:         Assert.assertSame("Same EM for inner preCall", em, emSupplier.get());
1:         
0:         emSupplier.postCall();
1:         Assert.assertSame("EM must still be the same after inner postCall", em, emSupplier.get());
1:         
0:         emSupplier.postCall();
0:         Assert.assertNull("EM must be null after outer postCall", emSupplier.get());
1:         
1:         boolean clean = emSupplier.close();
1:         Assert.assertTrue("Shutdown should be clean", clean);
1:     }
1: 
0:     private EntityManagerFactory mockEmf() {
0:         EntityManagerFactory emf = mock(EntityManagerFactory.class);
0:         EntityManager em = mock(EntityManager.class);
0:         when(emf.createEntityManager()).thenReturn(em);
0:         return emf;
1:     }
1:     
1:     @Test
1:     public void uncleanLifeCycleTest() {
1:         EntityManagerFactory emf = mockEmf();
0:         EMSupplierImpl emSupplier = new EMSupplierImpl(emf);
1:         emSupplier.setShutdownWait(100, MILLISECONDS);
0:         emSupplier.preCall();
1:         boolean clean = emSupplier.close();
1:         Assert.assertFalse("Shutdown should be unclean", clean);
1:     }
1:     
1:     @Test
1:     public void asyncCleanLifeCycleTest() throws InterruptedException {
1:         EntityManagerFactory emf = mockEmf();
0:         final EMSupplierImpl emSupplier = new EMSupplierImpl(emf);
1:         final Semaphore preCallSem = new Semaphore(0);
1:         Runnable command = new Runnable() {
1:             
1:             @Override
1:             public void run() {
0:                 emSupplier.preCall();
1:                 preCallSem.release();
0:                 emSupplier.postCall();
1:             }
1:         };
1:         Executors.newSingleThreadExecutor().execute(command);
1:         preCallSem.acquire();
1:         // EMs not closed when close is called but are closed before timeout 
1:         boolean clean = emSupplier.close();
1:         Assert.assertTrue("Shutdown should be clean", clean);
1:     }
1: 
1: }
============================================================================