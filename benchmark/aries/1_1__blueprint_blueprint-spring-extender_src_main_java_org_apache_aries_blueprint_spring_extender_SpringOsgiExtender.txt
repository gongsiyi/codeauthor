1:09b7171: /**
1:09b7171:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:09b7171:  *  contributor license agreements.  See the NOTICE file distributed with
1:09b7171:  *  this work for additional information regarding copyright ownership.
1:09b7171:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:09b7171:  *  (the "License"); you may not use this file except in compliance with
1:09b7171:  *  the License.  You may obtain a copy of the License at
1:09b7171:  *
1:09b7171:  *     http://www.apache.org/licenses/LICENSE-2.0
1:09b7171:  *
1:09b7171:  *  Unless required by applicable law or agreed to in writing, software
1:09b7171:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:09b7171:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:09b7171:  *  See the License for the specific language governing permissions and
1:09b7171:  *  limitations under the License.
1:09b7171:  */
1:09b7171: package org.apache.aries.blueprint.spring.extender;
1:09b7171: 
1:09b7171: import java.net.URL;
1:09b7171: import java.util.ArrayList;
1:09b7171: import java.util.Enumeration;
1:09b7171: import java.util.List;
1:09b7171: 
1:09b7171: import org.apache.aries.blueprint.services.BlueprintExtenderService;
1:09b7171: import org.apache.aries.blueprint.utils.HeaderParser;
1:09b7171: import org.apache.aries.blueprint.utils.HeaderParser.PathElement;
1:09b7171: import org.apache.felix.utils.extender.AbstractExtender;
1:09b7171: import org.apache.felix.utils.extender.Extension;
1:09b7171: import org.osgi.framework.Bundle;
1:09b7171: import org.slf4j.Logger;
1:09b7171: import org.slf4j.LoggerFactory;
1:09b7171: 
1:09b7171: /**
1:09b7171:  * Spring namespace extender.
1:09b7171:  * This OSGi extender is responsible for registering spring namespaces for blueprint.
1:09b7171:  *
1:09b7171:  * @see SpringOsgiExtension
1:09b7171:  */
1:09b7171: public class SpringOsgiExtender extends AbstractExtender {
1:09b7171: 
1:09b7171:     public static final String SPRING_CONTEXT_HEADER = "Spring-Context";
1:09b7171: 
1:09b7171:     private static final Logger LOGGER = LoggerFactory.getLogger(SpringOsgiExtender.class);
1:09b7171: 
1:09b7171:     private final BlueprintExtenderService blueprintExtenderService;
1:09b7171: 
1:09b7171:     public SpringOsgiExtender(BlueprintExtenderService blueprintExtenderService) {
1:09b7171:         this.blueprintExtenderService = blueprintExtenderService;
1:09b7171:     }
1:09b7171: 
1:09b7171:     @Override
1:09b7171:     protected Extension doCreateExtension(Bundle bundle) throws Exception {
1:09b7171:         List<URL> paths = getSpringPaths(bundle);
1:09b7171:         if (paths != null && !paths.isEmpty()) {
1:09b7171:             return new SpringOsgiExtension(blueprintExtenderService, bundle, paths);
1:09b7171:         }
1:09b7171:         return null;
1:09b7171:     }
1:09b7171: 
1:09b7171:     private List<URL> getSpringPaths(Bundle bundle) throws Exception {
1:09b7171:         LOGGER.debug("Scanning bundle {}/{} for spring application", bundle.getSymbolicName(), bundle.getVersion());
1:09b7171:         List<URL> pathList = new ArrayList<URL>();
1:09b7171:         String springHeader = bundle.getHeaders().get(SPRING_CONTEXT_HEADER);
1:09b7171:         if (springHeader == null) {
1:09b7171:             springHeader = "*";
1:09b7171:         }
1:09b7171:         List<PathElement> paths = HeaderParser.parseHeader(springHeader);
1:09b7171:         for (PathElement path : paths) {
1:09b7171:             String name = path.getName();
1:09b7171:             if ("*".equals(name)) {
1:09b7171:                 name = "META-INF/spring/*.xml";
1:09b7171:             }
1:09b7171:             String baseName;
1:09b7171:             String filePattern;
1:09b7171:             int pos = name.lastIndexOf('/');
1:09b7171:             if (pos < 0) {
1:09b7171:                 baseName = "/";
1:09b7171:                 filePattern = name;
1:09b7171:             } else {
1:09b7171:                 baseName = name.substring(0, pos + 1);
1:09b7171:                 filePattern = name.substring(pos + 1);
1:09b7171:             }
1:09b7171:             if (filePattern.contains("*")) {
1:09b7171:                 Enumeration<URL> e = bundle.findEntries(baseName, filePattern, false);
1:09b7171:                 while (e != null && e.hasMoreElements()) {
1:09b7171:                     pathList.add(e.nextElement());
1:09b7171:                 }
1:09b7171:             } else {
1:09b7171:                 pathList.add(bundle.getEntry(name));
1:09b7171:             }
1:09b7171:         }
1:09b7171:         if (!pathList.isEmpty()) {
1:09b7171:             LOGGER.debug("Found spring application in bundle {}/{} with paths: {}", bundle.getSymbolicName(), bundle.getVersion(), pathList);
1:09b7171:             // Check compatibility
1:09b7171:             // TODO: For lazy bundles, the class is either loaded from an imported package or not found, so it should
1:09b7171:             // not trigger the activation.  If it does, we need to use something else like package admin or
1:09b7171:             // ServiceReference, or just not do this check, which could be quite harmful.
1:09b7171:             if (isCompatible(bundle)) {
1:09b7171:                 return pathList;
1:09b7171:             } else {
1:09b7171:                 LOGGER.info("Bundle {}/{} is not compatible with this blueprint extender", bundle.getSymbolicName(), bundle.getVersion());
1:09b7171:             }
1:09b7171:         } else {
1:09b7171:             LOGGER.debug("No blueprint application found in bundle {}/{}", bundle.getSymbolicName(), bundle.getVersion());
1:09b7171:         }
1:09b7171:         return null;
1:09b7171:     }
1:09b7171: 
1:09b7171:     private boolean isCompatible(Bundle bundle) {
1:2e9d097:         // TODO
1:09b7171:         return true;
1:09b7171:     }
1:09b7171: 
1:09b7171:     @Override
1:09b7171:     protected void debug(Bundle bundle, String msg) {
1:09b7171:         LOGGER.debug(msg + ": " + bundle.getSymbolicName() + "/" + bundle.getVersion());
1:09b7171:     }
1:09b7171: 
1:09b7171:     @Override
1:09b7171:     protected void warn(Bundle bundle, String msg, Throwable t) {
1:09b7171:         LOGGER.warn(msg + ": " + bundle.getSymbolicName() + "/" + bundle.getVersion(), t);
1:09b7171:     }
1:09b7171: 
1:09b7171:     @Override
1:09b7171:     protected void error(String msg, Throwable t) {
1:09b7171:         LOGGER.error(msg, t);
1:09b7171:     }
1:09b7171: 
1:09b7171: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e9d097
/////////////////////////////////////////////////////////////////////////
1:         // TODO
commit:09b7171
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.spring.extender;
1: 
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Enumeration;
1: import java.util.List;
1: 
1: import org.apache.aries.blueprint.services.BlueprintExtenderService;
1: import org.apache.aries.blueprint.utils.HeaderParser;
1: import org.apache.aries.blueprint.utils.HeaderParser.PathElement;
1: import org.apache.felix.utils.extender.AbstractExtender;
1: import org.apache.felix.utils.extender.Extension;
1: import org.osgi.framework.Bundle;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Spring namespace extender.
1:  * This OSGi extender is responsible for registering spring namespaces for blueprint.
1:  *
1:  * @see SpringOsgiExtension
1:  */
1: public class SpringOsgiExtender extends AbstractExtender {
1: 
1:     public static final String SPRING_CONTEXT_HEADER = "Spring-Context";
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(SpringOsgiExtender.class);
1: 
1:     private final BlueprintExtenderService blueprintExtenderService;
1: 
1:     public SpringOsgiExtender(BlueprintExtenderService blueprintExtenderService) {
1:         this.blueprintExtenderService = blueprintExtenderService;
1:     }
1: 
1:     @Override
1:     protected Extension doCreateExtension(Bundle bundle) throws Exception {
1:         List<URL> paths = getSpringPaths(bundle);
1:         if (paths != null && !paths.isEmpty()) {
1:             return new SpringOsgiExtension(blueprintExtenderService, bundle, paths);
1:         }
1:         return null;
1:     }
1: 
1:     private List<URL> getSpringPaths(Bundle bundle) throws Exception {
1:         LOGGER.debug("Scanning bundle {}/{} for spring application", bundle.getSymbolicName(), bundle.getVersion());
1:         List<URL> pathList = new ArrayList<URL>();
1:         String springHeader = bundle.getHeaders().get(SPRING_CONTEXT_HEADER);
1:         if (springHeader == null) {
1:             springHeader = "*";
1:         }
1:         List<PathElement> paths = HeaderParser.parseHeader(springHeader);
1:         for (PathElement path : paths) {
1:             String name = path.getName();
1:             if ("*".equals(name)) {
1:                 name = "META-INF/spring/*.xml";
1:             }
1:             String baseName;
1:             String filePattern;
1:             int pos = name.lastIndexOf('/');
1:             if (pos < 0) {
1:                 baseName = "/";
1:                 filePattern = name;
1:             } else {
1:                 baseName = name.substring(0, pos + 1);
1:                 filePattern = name.substring(pos + 1);
1:             }
1:             if (filePattern.contains("*")) {
1:                 Enumeration<URL> e = bundle.findEntries(baseName, filePattern, false);
1:                 while (e != null && e.hasMoreElements()) {
1:                     pathList.add(e.nextElement());
1:                 }
1:             } else {
1:                 pathList.add(bundle.getEntry(name));
1:             }
1:         }
1:         if (!pathList.isEmpty()) {
1:             LOGGER.debug("Found spring application in bundle {}/{} with paths: {}", bundle.getSymbolicName(), bundle.getVersion(), pathList);
1:             // Check compatibility
1:             // TODO: For lazy bundles, the class is either loaded from an imported package or not found, so it should
1:             // not trigger the activation.  If it does, we need to use something else like package admin or
1:             // ServiceReference, or just not do this check, which could be quite harmful.
1:             if (isCompatible(bundle)) {
1:                 return pathList;
1:             } else {
1:                 LOGGER.info("Bundle {}/{} is not compatible with this blueprint extender", bundle.getSymbolicName(), bundle.getVersion());
1:             }
1:         } else {
1:             LOGGER.debug("No blueprint application found in bundle {}/{}", bundle.getSymbolicName(), bundle.getVersion());
1:         }
1:         return null;
1:     }
1: 
1:     private boolean isCompatible(Bundle bundle) {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected void debug(Bundle bundle, String msg) {
1:         LOGGER.debug(msg + ": " + bundle.getSymbolicName() + "/" + bundle.getVersion());
1:     }
1: 
1:     @Override
1:     protected void warn(Bundle bundle, String msg, Throwable t) {
1:         LOGGER.warn(msg + ": " + bundle.getSymbolicName() + "/" + bundle.getVersion(), t);
1:     }
1: 
1:     @Override
1:     protected void error(String msg, Throwable t) {
1:         LOGGER.error(msg, t);
1:     }
1: 
1: }
============================================================================