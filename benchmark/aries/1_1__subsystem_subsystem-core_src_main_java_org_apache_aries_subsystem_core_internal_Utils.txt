1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:225bcae: package org.apache.aries.subsystem.core.internal;
2:225bcae: 
1:a990e32: import java.util.Collection;
1:445abc4: import java.util.Map;
1:a990e32: 
1:391a1aa: import org.apache.aries.subsystem.core.archive.DeploymentManifest;
1:391a1aa: import org.apache.aries.subsystem.core.archive.ProvisionResourceHeader;
1:391a1aa: import org.apache.aries.subsystem.core.archive.SubsystemContentHeader;
1:391a1aa: import org.apache.aries.subsystem.core.archive.SubsystemManifest;
1:307d743: import org.osgi.framework.namespace.IdentityNamespace;
1:777b216: import org.osgi.framework.wiring.BundleRevision;
1:445abc4: import org.osgi.resource.Namespace;
1:445abc4: import org.osgi.resource.Requirement;
1:777b216: import org.osgi.resource.Resource;
1:225bcae: import org.osgi.service.coordinator.Coordination;
1:777b216: import org.osgi.service.coordinator.CoordinationException;
1:777b216: import org.osgi.service.subsystem.Subsystem;
1:307d743: import org.osgi.service.subsystem.SubsystemConstants;
1:445abc4: import org.osgi.service.subsystem.SubsystemException;
1:a990e32: import org.osgi.service.subsystem.Subsystem.State;
1:777b216: import org.slf4j.Logger;
1:777b216: import org.slf4j.LoggerFactory;
1:225bcae: 
1:225bcae: public class Utils {
1:777b216: 	private static final Logger logger = LoggerFactory.getLogger(Utils.class);
1:777b216: 	
1:3c826b1: 	public static String computeCoordinationName(Subsystem subsystem) {
1:3c826b1: 		return subsystem.getSymbolicName() + '-' + subsystem.getSubsystemId();
1:3c826b1: 	}
1:3c826b1: 	
1:777b216: 	public static Coordination createCoordination() {
1:5bd3bf6: 		return Activator.getInstance().getCoordinator().begin(BasicSubsystem.ROOT_SYMBOLIC_NAME + "-0", 0);
1:777b216: 	}
1:777b216: 	
1:5bd3bf6: 	public static Coordination createCoordination(BasicSubsystem subsystem) {
1:3c826b1: 		return Activator.getInstance().getCoordinator().begin(computeCoordinationName(subsystem), 0);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public static BasicSubsystem findFirstSubsystemAcceptingDependenciesStartingFrom(BasicSubsystem subsystem) {
1:225bcae: 		// The following loop is guaranteed to end once the root subsystem has
1:225bcae: 		// been reached.
1:225bcae: 		while (!isAcceptDependencies(subsystem))
1:5bd3bf6: 			subsystem = (BasicSubsystem)subsystem.getParents().iterator().next();
1:225bcae: 		return subsystem;
1:225bcae: 	}
1:777b216: 	
1:a990e32: 	public static BasicSubsystem findFirstScopedAncestorWithSharingPolicy(SubsystemResource descendant) {
1:a990e32: 		Collection<BasicSubsystem> parents = descendant.getParents();
1:a990e32: 		if (parents == null || parents.isEmpty()) {
1:a990e32: 			return null;
1:a990e32: 		}
1:a990e32: 		BasicSubsystem result = (BasicSubsystem) parents.iterator().next();
1:a990e32: 		// The result is defined as the first scoped ancestor whose sharing 
1:a990e32: 		// policy has already been set. This covers the case of multiple 
1:a990e32: 		// subsystems from the same archive being installed whose regions will 
1:a990e32: 		// form a tree of depth N.
1:a990e32: 		while (	// We only want scoped subsystems because they control 
1:a990e32: 				// the region.
1:a990e32: 				!result.isScoped()
1:a990e32: 				// If the state is INSTALLING then the sharing policy 
1:a990e32: 				// has not yet been set. This means we cannot use the
1:a990e32: 				// region in order to test visibility and must proceed
1:a990e32: 				// to the next parent.
1:a990e32: 				|| result.getState().equals(State.INSTALLING)) {
1:a990e32: 			result = result.getResource().getParents().iterator().next();
1:a990e32: 		}
1:a990e32: 		return result;
1:a990e32: 	}
1:a990e32: 	
1:5bd3bf6: 	public static BasicSubsystem findScopedSubsystemInRegion(BasicSubsystem subsystem) {
1:777b216: 		while (!subsystem.isScoped())
1:5bd3bf6: 			subsystem = (BasicSubsystem)subsystem.getParents().iterator().next();
1:777b216: 		return subsystem;
1:777b216: 	}
1:a990e32: 
1:777b216: 	public static int getActiveUseCount(Resource resource) {
1:777b216: 		int result = 0;
1:1f667ca: 		for (BasicSubsystem subsystem : Activator.getInstance().getSubsystems().getSubsystemsReferencing(resource)) {
1:1f667ca: 			if (	// ACTIVE subsystem referencing the resource.
1:1f667ca: 					Subsystem.State.ACTIVE.equals(subsystem.getState())
1:1f667ca: 					// Ensure unmanaged bundle constituents of the root subsystem are not stopped or uninstalled.
1:1f667ca: 					|| (subsystem.isRoot() && isBundle(resource))) { 
1:777b216: 				result++;
1:1f667ca: 			}
1:1f667ca: 		}
1:777b216: 		return result;
1:777b216: 	}
1:777b216: 	
1:777b216: 	public static long getId(Resource resource) {
1:5bd3bf6: 		if (resource instanceof BasicSubsystem)
1:5bd3bf6: 			return ((BasicSubsystem)resource).getSubsystemId();
1:777b216: 		if (resource instanceof BundleRevision)
1:777b216: 			return ((BundleRevision)resource).getBundle().getBundleId();
1:777b216: 		return -1;
1:777b216: 	}
1:777b216: 	
1:445abc4: 	public static void handleTrowable(Throwable t) {
1:445abc4: 		if (t instanceof SubsystemException) {
1:445abc4: 			throw (SubsystemException)t;
1:445abc4: 		}
1:445abc4: 		if (t instanceof SecurityException) {
1:445abc4: 			throw (SecurityException)t;
1:445abc4: 		}
1:445abc4: 		throw new SubsystemException(t);
1:445abc4: 	}
1:445abc4: 	
1:5bd3bf6: 	public static void installResource(Resource resource, BasicSubsystem subsystem) {
1:777b216: 		Coordination coordination = Utils.createCoordination(subsystem);
1:777b216: 		try {
1:307d743: 			ResourceInstaller.newInstance(coordination, resource, subsystem).install();
1:777b216: 		}
1:777b216: 		catch (Throwable t) {
1:777b216: 			coordination.fail(t);
1:777b216: 		}
1:777b216: 		finally {
1:777b216: 			try {
1:777b216: 				coordination.end();
1:777b216: 			}
1:777b216: 			catch (CoordinationException e) {
1:777b216: 				logger.error("Resource could not be installed", e);
1:777b216: 			}
1:777b216: 		}
1:777b216: 	}
1:777b216: 	
1:5bd3bf6: 	public static boolean isAcceptDependencies(BasicSubsystem subsystem) {
1:777b216: 		return subsystem.getSubsystemManifest().getSubsystemTypeHeader().getProvisionPolicyDirective().isAcceptDependencies();
1:777b216: 	}
1:777b216: 	
1:307d743: 	public static boolean isBundle(Resource resource) {
1:307d743: 		String type = ResourceHelper.getTypeAttribute(resource);
1:307d743: 		return IdentityNamespace.TYPE_BUNDLE.equals(type) ||
1:307d743: 				IdentityNamespace.TYPE_FRAGMENT.equals(type);
1:307d743: 	}
1:307d743: 	
1:445abc4: 	public static boolean isFragment(Resource resource) {
1:445abc4: 		String type = ResourceHelper.getTypeAttribute(resource);
1:445abc4: 		return IdentityNamespace.TYPE_FRAGMENT.equals(type);
1:445abc4: 	}
1:445abc4: 	
1:445abc4: 	public static boolean isEffectiveResolve(Requirement requirement) {
1:445abc4: 		Map<String, String> directives = requirement.getDirectives();
1:445abc4: 		String value = directives.get(Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE);
1:445abc4: 		return value == null || Namespace.EFFECTIVE_RESOLVE.equals(value);
1:445abc4: 	}
1:445abc4: 	
1:445abc4: 	public static boolean isMandatory(Requirement requirement) {
1:445abc4: 		Map<String, String> directives = requirement.getDirectives();
1:445abc4: 		String value = directives.get(Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE);
1:445abc4: 		return value == null || Namespace.RESOLUTION_MANDATORY.equals(value);
1:445abc4: 	}
1:445abc4: 	
1:391a1aa: 	/*
1:391a1aa: 	 * The Deployed-Content header in the deployment manifest is used to store
1:391a1aa: 	 * information about explicitly installed resources and provisioned
1:391a1aa: 	 * dependencies in addition to content for persistence purposes. This method
1:391a1aa: 	 * returns true only if the resource is "true" content of the subsystem and,
1:391a1aa: 	 * therefore, uses the Subsystem-Content header from the subsystem manifest.
1:391a1aa: 	 */
1:5bd3bf6: 	public static boolean isContent(BasicSubsystem subsystem, Resource resource) {
1:391a1aa: 		SubsystemManifest subsystemManifest = subsystem.getSubsystemManifest();
1:391a1aa: 		if (subsystemManifest == null)
1:391a1aa: 			return false;
1:391a1aa: 		SubsystemContentHeader subsystemContentHeader = subsystemManifest.getSubsystemContentHeader();
1:391a1aa: 		if (subsystemContentHeader == null)
1:391a1aa: 			return false;
1:391a1aa: 		return subsystemContentHeader.contains(resource);
1:391a1aa: 	}
1:391a1aa: 	
1:5bd3bf6: 	public static boolean isDependency(BasicSubsystem subsystem, Resource resource) {
1:391a1aa: 		DeploymentManifest manifest = subsystem.getDeploymentManifest();
1:391a1aa: 		if (manifest == null)
1:391a1aa: 			return false;
1:391a1aa: 		ProvisionResourceHeader header = manifest.getProvisionResourceHeader();
1:391a1aa: 		if (header == null)
1:391a1aa: 			return false;
1:391a1aa: 		return header.contains(resource);
1:391a1aa: 	}
1:391a1aa: 	
1:777b216: 	public static boolean isInstallableResource(Resource resource) {
1:777b216: 		return !isSharedResource(resource);
1:777b216: 	}
1:777b216: 	
1:5b9ff63: 	public static boolean isRegionContextBundle(Resource resource) {
1:5b9ff63: 		return ResourceHelper.getSymbolicNameAttribute(resource).startsWith(
1:5b9ff63: 				RegionContextBundleHelper.SYMBOLICNAME_PREFIX);
1:5b9ff63: 	}
1:5b9ff63: 	
1:777b216: 	public static boolean isSharedResource(Resource resource) {
1:9df8274: 		return resource instanceof BasicSubsystem || resource instanceof BundleRevision || resource instanceof BundleRevisionResource;
1:225bcae: 	}
1:307d743: 	
1:307d743: 	public static boolean isSubsystem(Resource resource) {
1:307d743: 		String type = ResourceHelper.getTypeAttribute(resource);
1:307d743: 		return SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION.equals(type) ||
1:307d743: 				SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type) ||
1:307d743: 				SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type);
1:307d743: 	}
1:a990e32: 	
1:a990e32: 	public static boolean isProvisionDependenciesInstall(BasicSubsystem subsystem) {
1:a990e32: 		return subsystem.getSubsystemManifest().getSubsystemTypeHeader().getAriesProvisionDependenciesDirective().isInstall();
1:a990e32: 	}
1:225bcae: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:1f667ca
/////////////////////////////////////////////////////////////////////////
1: 		for (BasicSubsystem subsystem : Activator.getInstance().getSubsystems().getSubsystemsReferencing(resource)) {
1: 			if (	// ACTIVE subsystem referencing the resource.
1: 					Subsystem.State.ACTIVE.equals(subsystem.getState())
1: 					// Ensure unmanaged bundle constituents of the root subsystem are not stopped or uninstalled.
1: 					|| (subsystem.isRoot() && isBundle(resource))) { 
1: 			}
1: 		}
commit:445abc4
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Namespace;
1: import org.osgi.resource.Requirement;
1: import org.osgi.service.subsystem.SubsystemException;
/////////////////////////////////////////////////////////////////////////
1: 	public static void handleTrowable(Throwable t) {
1: 		if (t instanceof SubsystemException) {
1: 			throw (SubsystemException)t;
1: 		}
1: 		if (t instanceof SecurityException) {
1: 			throw (SecurityException)t;
1: 		}
1: 		throw new SubsystemException(t);
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	public static boolean isFragment(Resource resource) {
1: 		String type = ResourceHelper.getTypeAttribute(resource);
1: 		return IdentityNamespace.TYPE_FRAGMENT.equals(type);
1: 	}
1: 	
1: 	public static boolean isEffectiveResolve(Requirement requirement) {
1: 		Map<String, String> directives = requirement.getDirectives();
1: 		String value = directives.get(Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE);
1: 		return value == null || Namespace.EFFECTIVE_RESOLVE.equals(value);
1: 	}
1: 	
1: 	public static boolean isMandatory(Requirement requirement) {
1: 		Map<String, String> directives = requirement.getDirectives();
1: 		String value = directives.get(Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE);
1: 		return value == null || Namespace.RESOLUTION_MANDATORY.equals(value);
1: 	}
1: 	
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.subsystem.Subsystem.State;
/////////////////////////////////////////////////////////////////////////
1: 	public static BasicSubsystem findFirstScopedAncestorWithSharingPolicy(SubsystemResource descendant) {
1: 		Collection<BasicSubsystem> parents = descendant.getParents();
1: 		if (parents == null || parents.isEmpty()) {
1: 			return null;
1: 		}
1: 		BasicSubsystem result = (BasicSubsystem) parents.iterator().next();
1: 		// The result is defined as the first scoped ancestor whose sharing 
1: 		// policy has already been set. This covers the case of multiple 
1: 		// subsystems from the same archive being installed whose regions will 
1: 		// form a tree of depth N.
1: 		while (	// We only want scoped subsystems because they control 
1: 				// the region.
1: 				!result.isScoped()
1: 				// If the state is INSTALLING then the sharing policy 
1: 				// has not yet been set. This means we cannot use the
1: 				// region in order to test visibility and must proceed
1: 				// to the next parent.
1: 				|| result.getState().equals(State.INSTALLING)) {
1: 			result = result.getResource().getParents().iterator().next();
1: 		}
1: 		return result;
1: 	}
1: 	
1: 
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	public static boolean isProvisionDependenciesInstall(BasicSubsystem subsystem) {
1: 		return subsystem.getSubsystemManifest().getSubsystemTypeHeader().getAriesProvisionDependenciesDirective().isInstall();
1: 	}
commit:9df8274
/////////////////////////////////////////////////////////////////////////
1: 		return resource instanceof BasicSubsystem || resource instanceof BundleRevision || resource instanceof BundleRevisionResource;
commit:3c826b1
/////////////////////////////////////////////////////////////////////////
1: 	public static String computeCoordinationName(Subsystem subsystem) {
1: 		return subsystem.getSymbolicName() + '-' + subsystem.getSubsystemId();
1: 	}
1: 	
1: 		return Activator.getInstance().getCoordinator().begin(computeCoordinationName(subsystem), 0);
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 		return Activator.getInstance().getCoordinator().begin(BasicSubsystem.ROOT_SYMBOLIC_NAME + "-0", 0);
1: 	public static Coordination createCoordination(BasicSubsystem subsystem) {
1: 	public static BasicSubsystem findFirstSubsystemAcceptingDependenciesStartingFrom(BasicSubsystem subsystem) {
1: 			subsystem = (BasicSubsystem)subsystem.getParents().iterator().next();
1: 	public static BasicSubsystem findScopedSubsystemInRegion(BasicSubsystem subsystem) {
1: 			subsystem = (BasicSubsystem)subsystem.getParents().iterator().next();
0: 		for (BasicSubsystem subsystem : Activator.getInstance().getSubsystems().getSubsystemsReferencing(resource))
1: 		if (resource instanceof BasicSubsystem)
1: 			return ((BasicSubsystem)resource).getSubsystemId();
1: 	public static void installResource(Resource resource, BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 	public static boolean isAcceptDependencies(BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 	public static boolean isContent(BasicSubsystem subsystem, Resource resource) {
/////////////////////////////////////////////////////////////////////////
1: 	public static boolean isDependency(BasicSubsystem subsystem, Resource resource) {
/////////////////////////////////////////////////////////////////////////
0: 		return resource instanceof BasicSubsystem || resource instanceof BundleRevision;
commit:5b9ff63
/////////////////////////////////////////////////////////////////////////
1: 	public static boolean isRegionContextBundle(Resource resource) {
1: 		return ResourceHelper.getSymbolicNameAttribute(resource).startsWith(
1: 				RegionContextBundleHelper.SYMBOLICNAME_PREFIX);
1: 	}
1: 	
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.archive.DeploymentManifest;
1: import org.apache.aries.subsystem.core.archive.ProvisionResourceHeader;
1: import org.apache.aries.subsystem.core.archive.SubsystemContentHeader;
1: import org.apache.aries.subsystem.core.archive.SubsystemManifest;
/////////////////////////////////////////////////////////////////////////
1: 	/*
1: 	 * The Deployed-Content header in the deployment manifest is used to store
1: 	 * information about explicitly installed resources and provisioned
1: 	 * dependencies in addition to content for persistence purposes. This method
1: 	 * returns true only if the resource is "true" content of the subsystem and,
1: 	 * therefore, uses the Subsystem-Content header from the subsystem manifest.
1: 	 */
0: 	public static boolean isContent(AriesSubsystem subsystem, Resource resource) {
1: 		SubsystemManifest subsystemManifest = subsystem.getSubsystemManifest();
1: 		if (subsystemManifest == null)
1: 			return false;
1: 		SubsystemContentHeader subsystemContentHeader = subsystemManifest.getSubsystemContentHeader();
1: 		if (subsystemContentHeader == null)
1: 			return false;
1: 		return subsystemContentHeader.contains(resource);
1: 	}
1: 	
0: 	public static boolean isDependency(AriesSubsystem subsystem, Resource resource) {
1: 		DeploymentManifest manifest = subsystem.getDeploymentManifest();
1: 		if (manifest == null)
1: 			return false;
1: 		ProvisionResourceHeader header = manifest.getProvisionResourceHeader();
1: 		if (header == null)
1: 			return false;
1: 		return header.contains(resource);
1: 	}
1: 	
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:307d743
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.service.subsystem.SubsystemConstants;
/////////////////////////////////////////////////////////////////////////
1: 			ResourceInstaller.newInstance(coordination, resource, subsystem).install();
/////////////////////////////////////////////////////////////////////////
1: 	public static boolean isBundle(Resource resource) {
1: 		String type = ResourceHelper.getTypeAttribute(resource);
1: 		return IdentityNamespace.TYPE_BUNDLE.equals(type) ||
1: 				IdentityNamespace.TYPE_FRAGMENT.equals(type);
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	public static boolean isSubsystem(Resource resource) {
1: 		String type = ResourceHelper.getTypeAttribute(resource);
1: 		return SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION.equals(type) ||
1: 				SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type) ||
1: 				SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type);
1: 	}
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.coordinator.CoordinationException;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 	private static final Logger logger = LoggerFactory.getLogger(Utils.class);
1: 	
1: 	public static Coordination createCoordination() {
0: 		return Activator.getInstance().getCoordinator().begin(AriesSubsystem.ROOT_SYMBOLIC_NAME + "-0", 0);
1: 	}
1: 	
0: 		return Activator.getInstance().getCoordinator().begin(subsystem.getSymbolicName() + '-' + subsystem.getSubsystemId(), 0);
/////////////////////////////////////////////////////////////////////////
0: 	public static AriesSubsystem findScopedSubsystemInRegion(AriesSubsystem subsystem) {
1: 		while (!subsystem.isScoped())
0: 			subsystem = (AriesSubsystem)subsystem.getParents().iterator().next();
1: 		return subsystem;
1: 	}
1: 	
1: 	public static int getActiveUseCount(Resource resource) {
1: 		int result = 0;
0: 		for (AriesSubsystem subsystem : Activator.getInstance().getSubsystems().getSubsystemsReferencing(resource))
0: 			if (Subsystem.State.ACTIVE.equals(subsystem.getState()))
1: 				result++;
1: 		return result;
1: 	}
1: 	
1: 	public static long getId(Resource resource) {
0: 		if (resource instanceof AriesSubsystem)
0: 			return ((AriesSubsystem)resource).getSubsystemId();
1: 		if (resource instanceof BundleRevision)
1: 			return ((BundleRevision)resource).getBundle().getBundleId();
1: 		return -1;
1: 	}
1: 	
0: 	public static void installResource(Resource resource, AriesSubsystem subsystem) {
1: 		Coordination coordination = Utils.createCoordination(subsystem);
1: 		try {
0: 			ResourceInstaller.newInstance(coordination, resource, subsystem, false).install();
1: 		}
1: 		catch (Throwable t) {
1: 			coordination.fail(t);
1: 		}
1: 		finally {
1: 			try {
1: 				coordination.end();
1: 			}
1: 			catch (CoordinationException e) {
1: 				logger.error("Resource could not be installed", e);
1: 			}
1: 		}
1: 	}
1: 	
1: 		return subsystem.getSubsystemManifest().getSubsystemTypeHeader().getProvisionPolicyDirective().isAcceptDependencies();
1: 	}
1: 	
1: 	public static boolean isInstallableResource(Resource resource) {
1: 		return !isSharedResource(resource);
1: 	}
1: 	
1: 	public static boolean isSharedResource(Resource resource) {
0: 		return resource instanceof AriesSubsystem || resource instanceof BundleRevision;
commit:225bcae
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import org.osgi.service.coordinator.Coordination;
1: 
1: public class Utils {
0: 	public static Coordination createCoordination(AriesSubsystem subsystem) {
0: 		return Activator.getInstance().getCoordinator().create(subsystem.getSymbolicName() + '-' + subsystem.getSubsystemId(), 0);
1: 	}
1: 	
0: 	public static AriesSubsystem findFirstSubsystemAcceptingDependenciesStartingFrom(AriesSubsystem subsystem) {
1: 		// The following loop is guaranteed to end once the root subsystem has
1: 		// been reached.
1: 		while (!isAcceptDependencies(subsystem))
0: 			subsystem = (AriesSubsystem)subsystem.getParents().iterator().next();
1: 		return subsystem;
1: 	}
1: 	
0: 	public static boolean isAcceptDependencies(AriesSubsystem subsystem) {
0: 		return subsystem.getArchive().getSubsystemManifest().getSubsystemTypeHeader().getProvisionPolicyDirective().isAcceptDependencies();
1: 	}
1: }
============================================================================