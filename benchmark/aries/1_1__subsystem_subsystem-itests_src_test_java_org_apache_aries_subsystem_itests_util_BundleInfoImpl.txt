1:ad877b6: /*
1:ad877b6:  * Licensed to the Apache Software Foundation (ASF) under one
1:ad877b6:  * or more contributor license agreements.  See the NOTICE file
1:ad877b6:  * distributed with this work for additional information
1:ad877b6:  * regarding copyright ownership.  The ASF licenses this file
1:ad877b6:  * to you under the Apache License, Version 2.0 (the
1:ad877b6:  * "License"); you may not use this file except in compliance
1:ad877b6:  * with the License.  You may obtain a copy of the License at
1:ad877b6:  *
1:ad877b6:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ad877b6:  *
1:ad877b6:  * Unless required by applicable law or agreed to in writing,
1:ad877b6:  * software distributed under the License is distributed on an
1:ad877b6:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:ad877b6:  * KIND, either express or implied.  See the License for the
1:ad877b6:  * specific language governing permissions and limitations
1:ad877b6:  * under the License.
1:ad877b6:  */
1:ad877b6: package org.apache.aries.subsystem.itests.util;
1:ad877b6: 
1:ad877b6: import java.io.File;
1:ad877b6: import java.io.IOException;
1:ad877b6: import java.util.HashMap;
1:ad877b6: import java.util.HashSet;
1:ad877b6: import java.util.List;
1:ad877b6: import java.util.Map;
1:ad877b6: import java.util.Set;
1:ad877b6: import java.util.jar.Attributes;
1:ad877b6: import java.util.jar.JarFile;
1:ad877b6: import java.util.jar.Manifest;
1:ad877b6: 
1:ad877b6: import org.apache.aries.application.Content;
1:ad877b6: import org.apache.aries.application.management.BundleInfo;
1:f615d56: import org.apache.aries.util.io.IOUtils;
1:ad877b6: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:ad877b6: import org.osgi.framework.Constants;
1:ad877b6: import org.osgi.framework.Version;
1:ad877b6: 
1:ad877b6: public class BundleInfoImpl implements BundleInfo {
1:ad877b6: 
1:ad877b6:     private Map<String, String> attributeMap = new HashMap<String, String>();
1:ad877b6:     private String path;
1:ad877b6:     private Attributes attributes;
1:ad877b6: 
1:ad877b6:     public BundleInfoImpl(String pathToJar) {
1:ad877b6:         Manifest manifest = null;
1:ad877b6:         try {
1:ad877b6:         	File jarFile = new File(pathToJar);
1:ad877b6:             this.path = jarFile.toURI().toURL().toString();
1:ad877b6:             JarFile f = new JarFile(new File(pathToJar));
1:f615d56:             try {
1:f615d56:             	manifest = f.getManifest();
1:f615d56:             }
1:f615d56:             finally {
1:f615d56:             	IOUtils.close(f);
1:f615d56:             }
1:ad877b6:         } catch (IOException e) {
1:ad877b6:             // TODO Auto-generated catch block
1:ad877b6:             e.printStackTrace();
1:ad877b6:         }
1:ad877b6:         process(manifest);
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     private void process(Manifest manifest) {
1:ad877b6:         if (manifest != null) {
1:ad877b6:             this.attributes = manifest.getMainAttributes();
1:ad877b6:             Set<Object> set = this.attributes.keySet();
1:ad877b6:             for (Object entry : set) {
1:ad877b6:                 String key = entry.toString();
1:ad877b6:                 attributeMap.put(key, this.attributes.getValue(key));
1:ad877b6:             }
1:ad877b6:         }
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public Map<String, String> getBundleAttributes() {
1:ad877b6:         return attributeMap;
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public Map<String, String> getBundleDirectives() {
1:ad877b6:         // TODO Auto-generated method stub
1:ad877b6:         return new HashMap<String, String>();
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public Set<Content> getExportPackage() {
1:ad877b6:         String exportPkgs = attributeMap.get(Constants.EXPORT_PACKAGE);
1:ad877b6:         List<String> list = ManifestHeaderProcessor.split(exportPkgs, ",");
1:ad877b6:         Set<Content> contents = new HashSet<Content>();
1:ad877b6:         for (String content : list) {
1:ad877b6:             contents.add(new ContentImpl(content));
1:ad877b6:         }
1:ad877b6: 
1:ad877b6:         return contents;
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public Set<Content> getExportService() {
1:ad877b6:         // TODO Auto-generated method stub
1:ad877b6:         return null;
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public Map<String, String> getHeaders() {
1:ad877b6:         return attributeMap;
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public Set<Content> getImportPackage() {
1:ad877b6:         String importPkgs = attributeMap.get(Constants.IMPORT_PACKAGE);
1:ad877b6:         List<String> list = ManifestHeaderProcessor.split(importPkgs, ",");
1:ad877b6:         Set<Content> contents = new HashSet<Content>();
1:ad877b6:         for (String content : list) {
1:ad877b6:             contents.add(new ContentImpl(content));
1:ad877b6:         }
1:ad877b6: 
1:ad877b6:         return contents;
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public Set<Content> getImportService() {
1:ad877b6:         // TODO Auto-generated method stub
1:ad877b6:         return null;
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public String getLocation() {
1:ad877b6:         return path;
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public Set<Content> getRequireBundle() {
1:ad877b6:         String requireBundle = attributeMap.get(Constants.REQUIRE_BUNDLE);
1:ad877b6:         List<String> list = ManifestHeaderProcessor.split(requireBundle, ",");
1:ad877b6:         Set<Content> contents = new HashSet<Content>();
1:ad877b6:         for (String content : list) {
1:ad877b6:             contents.add(new ContentImpl(content));
1:ad877b6:         }
1:ad877b6: 
1:ad877b6:         return contents;
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public String getSymbolicName() {
1:ad877b6:         return attributeMap.get(Constants.BUNDLE_SYMBOLICNAME);
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public Version getVersion() {
1:ad877b6:         return Version.parseVersion(attributeMap.get(Constants.BUNDLE_VERSION));
1:ad877b6:     }
1:ad877b6: 
1:ad877b6: 	public Attributes getRawAttributes() {
1:ad877b6:         return this.attributes;
1:ad877b6: 	}
1:ad877b6: 
1:ad877b6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:f615d56
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.io.IOUtils;
/////////////////////////////////////////////////////////////////////////
1:             try {
1:             	manifest = f.getManifest();
1:             }
1:             finally {
1:             	IOUtils.close(f);
1:             }
commit:ad877b6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.util;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarFile;
1: import java.util.jar.Manifest;
1: 
1: import org.apache.aries.application.Content;
1: import org.apache.aries.application.management.BundleInfo;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: 
1: public class BundleInfoImpl implements BundleInfo {
1: 
1:     private Map<String, String> attributeMap = new HashMap<String, String>();
1:     private String path;
1:     private Attributes attributes;
1: 
1:     public BundleInfoImpl(String pathToJar) {
1:         Manifest manifest = null;
1:         try {
1:         	File jarFile = new File(pathToJar);
1:             this.path = jarFile.toURI().toURL().toString();
1:             JarFile f = new JarFile(new File(pathToJar));
0:             manifest = f.getManifest();
1:         } catch (IOException e) {
1:             // TODO Auto-generated catch block
1:             e.printStackTrace();
1:         }
1:         process(manifest);
1:     }
1: 
1:     private void process(Manifest manifest) {
1:         if (manifest != null) {
1:             this.attributes = manifest.getMainAttributes();
1:             Set<Object> set = this.attributes.keySet();
1:             for (Object entry : set) {
1:                 String key = entry.toString();
1:                 attributeMap.put(key, this.attributes.getValue(key));
1:             }
1:         }
1:     }
1: 
1:     public Map<String, String> getBundleAttributes() {
1:         return attributeMap;
1:     }
1: 
1:     public Map<String, String> getBundleDirectives() {
1:         // TODO Auto-generated method stub
1:         return new HashMap<String, String>();
1:     }
1: 
1:     public Set<Content> getExportPackage() {
1:         String exportPkgs = attributeMap.get(Constants.EXPORT_PACKAGE);
1:         List<String> list = ManifestHeaderProcessor.split(exportPkgs, ",");
1:         Set<Content> contents = new HashSet<Content>();
1:         for (String content : list) {
1:             contents.add(new ContentImpl(content));
1:         }
1: 
1:         return contents;
1:     }
1: 
1:     public Set<Content> getExportService() {
1:         // TODO Auto-generated method stub
1:         return null;
1:     }
1: 
1:     public Map<String, String> getHeaders() {
1:         return attributeMap;
1:     }
1: 
1:     public Set<Content> getImportPackage() {
1:         String importPkgs = attributeMap.get(Constants.IMPORT_PACKAGE);
1:         List<String> list = ManifestHeaderProcessor.split(importPkgs, ",");
1:         Set<Content> contents = new HashSet<Content>();
1:         for (String content : list) {
1:             contents.add(new ContentImpl(content));
1:         }
1: 
1:         return contents;
1:     }
1: 
1:     public Set<Content> getImportService() {
1:         // TODO Auto-generated method stub
1:         return null;
1:     }
1: 
1:     public String getLocation() {
1:         return path;
1:     }
1: 
1:     public Set<Content> getRequireBundle() {
1:         String requireBundle = attributeMap.get(Constants.REQUIRE_BUNDLE);
1:         List<String> list = ManifestHeaderProcessor.split(requireBundle, ",");
1:         Set<Content> contents = new HashSet<Content>();
1:         for (String content : list) {
1:             contents.add(new ContentImpl(content));
1:         }
1: 
1:         return contents;
1:     }
1: 
1:     public String getSymbolicName() {
1:         return attributeMap.get(Constants.BUNDLE_SYMBOLICNAME);
1:     }
1: 
1:     public Version getVersion() {
1:         return Version.parseVersion(attributeMap.get(Constants.BUNDLE_VERSION));
1:     }
1: 
1: 	public Attributes getRawAttributes() {
1:         return this.attributes;
1: 	}
1: 
1: }
============================================================================