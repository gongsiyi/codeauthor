1:fdf3952: /*
1:fdf3952:  * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
1:fdf3952:  * 
1:fdf3952:  * Licensed under the Apache License, Version 2.0 (the "License");
1:fdf3952:  * you may not use this file except in compliance with the License.
1:fdf3952:  * You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing, software
1:fdf3952:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  * See the License for the specific language governing permissions and
1:fdf3952:  * limitations under the License.
1:fdf3952:  */
1:fdf3952: 
1:fdf3952: package org.osgi.jmx.service.cm;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.JmxConstants;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * This MBean provides the management interface to the OSGi Configuration
1:fdf3952:  * Administration Service.
1:fdf3952:  * 
1:fdf3952:  * @version $Revision$
1:fdf3952:  * @ThreadSafe
1:fdf3952:  */
1:fdf3952: public interface ConfigurationAdminMBean {
1:fdf3952: 	/**
1:fdf3952: 	 * The object name for this mbean.
1:fdf3952: 	 */
1:fdf3952: 	String OBJECTNAME = JmxConstants.OSGI_COMPENDIUM+":service=cm,version=1.3";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Create a new configuration instance for the supplied persistent id of the
1:fdf3952: 	 * factory, answering the PID of the created configuration
1:fdf3952: 	 * 
1:fdf3952: 	 * @param factoryPid the persistent id of the factory
1:fdf3952: 	 * @return the PID of the created configuration
1:fdf3952: 	 * @throws IOException if the operation failed
1:fdf3952: 	 */
1:fdf3952: 	String createFactoryConfiguration(String factoryPid) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Create a factory configuration for the supplied persistent id of the
1:fdf3952: 	 * factory and the bundle location bound to bind the created configuration
1:fdf3952: 	 * to, answering the PID of the created configuration
1:fdf3952: 	 * 
1:fdf3952: 	 * @param factoryPid the persistent id of the factory
1:fdf3952: 	 * @param location the bundle location
1:fdf3952: 	 * @return the pid of the created configuation
1:fdf3952: 	 * @throws IOException if the operation failed
1:fdf3952: 	 */
1:fdf3952: 	String createFactoryConfigurationForLocation(String factoryPid, String location)
1:fdf3952: 			throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Delete the configuration
1:fdf3952: 	 * 
1:fdf3952: 	 * @param pid the persistent identifier of the configuration
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	void delete(String pid) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Delete the configuration
1:fdf3952: 	 * 
1:fdf3952: 	 * @param pid the persistent identifier of the configuration
1:fdf3952: 	 * @param location the bundle location
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	void deleteForLocation(String pid, String location) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Delete the configurations matching the filter specification.
1:fdf3952: 	 * 
1:fdf3952: 	 * @param filter the string representation of the
1:fdf3952: 	 *        <code>org.osgi.framework.Filter</code>
1:fdf3952: 	 * @throws IOException if the operation failed
1:fdf3952: 	 * @throws IllegalArgumentException if the filter is invalid
1:fdf3952: 	 */
1:fdf3952: 	void deleteConfigurations(String filter) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the bundle location the configuration is bound to
1:fdf3952: 	 * 
1:fdf3952: 	 * @param pid the persistent identifier of the configuration
1:fdf3952: 	 * @return the bundle location
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	String getBundleLocation(String pid) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the factory PID if the configuration is a factory configuration,
1:fdf3952: 	 * null otherwise.
1:fdf3952: 	 * 
1:fdf3952: 	 * @param pid the persistent identifier of the configuration
1:fdf3952: 	 * @return the factory PID
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	String getFactoryPid(String pid) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the factory PID if the configuration is a factory configuration,
1:fdf3952: 	 * null otherwise.
1:fdf3952: 	 * 
1:fdf3952: 	 * @param pid the persistent identifier of the configuration
1:fdf3952: 	 * @param location the bundle location
1:fdf3952: 	 * @return the factory PID
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	String getFactoryPidForLocation(String pid, String location) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the contents of the configuration <p/>
1:fdf3952: 	 * 
1:fdf3952: 	 * @see JmxConstants#PROPERTIES_TYPE for the details of the TabularType
1:fdf3952: 	 * 
1:fdf3952: 	 * @param pid the persistent identifier of the configuration
1:fdf3952: 	 * @return the table of contents
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 
1:fdf3952: 	TabularData getProperties(String pid) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the contents of the configuration <p/>
1:fdf3952: 	 * 
1:fdf3952: 	 * @see JmxConstants#PROPERTIES_TYPE for the details of the TabularType
1:fdf3952: 	 * 
1:fdf3952: 	 * @param pid the persistent identifier of the configuration
1:fdf3952: 	 * @param location the bundle location
1:fdf3952: 	 * @return the table of contents
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	TabularData getPropertiesForLocation(String pid, String location) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the list of PID/Location pairs of the configurations managed by
1:fdf3952: 	 * this service
1:fdf3952: 	 * 
1:fdf3952: 	 * @param filter the string representation of the
1:fdf3952: 	 *        <code>org.osgi.framework.Filter</code>
1:fdf3952: 	 * @return the list of configuration PID/Location pairs
1:fdf3952: 	 * @throws IOException if the operation failed
1:fdf3952: 	 * @throws IllegalArgumentException if the filter is invalid
1:fdf3952: 	 */
1:fdf3952: 	String[][] getConfigurations(String filter) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Set the bundle location the configuration is bound to
1:fdf3952: 	 * 
1:fdf3952: 	 * @param pid the persistent identifier of the configuration
1:fdf3952: 	 * @param location the bundle location
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	void setBundleLocation(String pid, String location) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Update the configuration with the supplied properties For each property
1:fdf3952: 	 * entry, the following row is supplied <p/>
1:fdf3952: 	 * 
1:fdf3952: 	 * @see JmxConstants#PROPERTIES_TYPE for the details of the TabularType
1:fdf3952: 	 * 
1:fdf3952: 	 * @param pid the persistent identifier of the configuration
1:fdf3952: 	 * @param properties the table of properties
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	void update(String pid, TabularData properties) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Update the configuration with the supplied properties For each property
1:fdf3952: 	 * entry, the following row is supplied <p/>
1:fdf3952: 	 * 
1:fdf3952: 	 * @see JmxConstants#PROPERTIES_TYPE for the details of the TabularType
1:fdf3952: 	 * 
1:fdf3952: 	 * @param pid the persistent identifier of the configuration
1:fdf3952: 	 * @param location the bundle location
1:fdf3952: 	 * @param properties the table of properties
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	void updateForLocation(String pid, String location, TabularData properties)
1:fdf3952: 			throws IOException;
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.jmx.service.cm;
1: 
1: import java.io.IOException;
1: 
1: import javax.management.openmbean.TabularData;
1: 
1: import org.osgi.jmx.JmxConstants;
1: 
1: /**
1:  * This MBean provides the management interface to the OSGi Configuration
1:  * Administration Service.
1:  * 
1:  * @version $Revision$
1:  * @ThreadSafe
1:  */
1: public interface ConfigurationAdminMBean {
1: 	/**
1: 	 * The object name for this mbean.
1: 	 */
1: 	String OBJECTNAME = JmxConstants.OSGI_COMPENDIUM+":service=cm,version=1.3";
1: 
1: 	/**
1: 	 * Create a new configuration instance for the supplied persistent id of the
1: 	 * factory, answering the PID of the created configuration
1: 	 * 
1: 	 * @param factoryPid the persistent id of the factory
1: 	 * @return the PID of the created configuration
1: 	 * @throws IOException if the operation failed
1: 	 */
1: 	String createFactoryConfiguration(String factoryPid) throws IOException;
1: 
1: 	/**
1: 	 * Create a factory configuration for the supplied persistent id of the
1: 	 * factory and the bundle location bound to bind the created configuration
1: 	 * to, answering the PID of the created configuration
1: 	 * 
1: 	 * @param factoryPid the persistent id of the factory
1: 	 * @param location the bundle location
1: 	 * @return the pid of the created configuation
1: 	 * @throws IOException if the operation failed
1: 	 */
1: 	String createFactoryConfigurationForLocation(String factoryPid, String location)
1: 			throws IOException;
1: 
1: 	/**
1: 	 * Delete the configuration
1: 	 * 
1: 	 * @param pid the persistent identifier of the configuration
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	void delete(String pid) throws IOException;
1: 
1: 	/**
1: 	 * Delete the configuration
1: 	 * 
1: 	 * @param pid the persistent identifier of the configuration
1: 	 * @param location the bundle location
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	void deleteForLocation(String pid, String location) throws IOException;
1: 
1: 	/**
1: 	 * Delete the configurations matching the filter specification.
1: 	 * 
1: 	 * @param filter the string representation of the
1: 	 *        <code>org.osgi.framework.Filter</code>
1: 	 * @throws IOException if the operation failed
1: 	 * @throws IllegalArgumentException if the filter is invalid
1: 	 */
1: 	void deleteConfigurations(String filter) throws IOException;
1: 
1: 	/**
1: 	 * Answer the bundle location the configuration is bound to
1: 	 * 
1: 	 * @param pid the persistent identifier of the configuration
1: 	 * @return the bundle location
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String getBundleLocation(String pid) throws IOException;
1: 
1: 	/**
1: 	 * Answer the factory PID if the configuration is a factory configuration,
1: 	 * null otherwise.
1: 	 * 
1: 	 * @param pid the persistent identifier of the configuration
1: 	 * @return the factory PID
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String getFactoryPid(String pid) throws IOException;
1: 
1: 	/**
1: 	 * Answer the factory PID if the configuration is a factory configuration,
1: 	 * null otherwise.
1: 	 * 
1: 	 * @param pid the persistent identifier of the configuration
1: 	 * @param location the bundle location
1: 	 * @return the factory PID
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String getFactoryPidForLocation(String pid, String location) throws IOException;
1: 
1: 	/**
1: 	 * Answer the contents of the configuration <p/>
1: 	 * 
1: 	 * @see JmxConstants#PROPERTIES_TYPE for the details of the TabularType
1: 	 * 
1: 	 * @param pid the persistent identifier of the configuration
1: 	 * @return the table of contents
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 
1: 	TabularData getProperties(String pid) throws IOException;
1: 
1: 	/**
1: 	 * Answer the contents of the configuration <p/>
1: 	 * 
1: 	 * @see JmxConstants#PROPERTIES_TYPE for the details of the TabularType
1: 	 * 
1: 	 * @param pid the persistent identifier of the configuration
1: 	 * @param location the bundle location
1: 	 * @return the table of contents
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	TabularData getPropertiesForLocation(String pid, String location) throws IOException;
1: 
1: 	/**
1: 	 * Answer the list of PID/Location pairs of the configurations managed by
1: 	 * this service
1: 	 * 
1: 	 * @param filter the string representation of the
1: 	 *        <code>org.osgi.framework.Filter</code>
1: 	 * @return the list of configuration PID/Location pairs
1: 	 * @throws IOException if the operation failed
1: 	 * @throws IllegalArgumentException if the filter is invalid
1: 	 */
1: 	String[][] getConfigurations(String filter) throws IOException;
1: 
1: 	/**
1: 	 * Set the bundle location the configuration is bound to
1: 	 * 
1: 	 * @param pid the persistent identifier of the configuration
1: 	 * @param location the bundle location
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	void setBundleLocation(String pid, String location) throws IOException;
1: 
1: 	/**
1: 	 * Update the configuration with the supplied properties For each property
1: 	 * entry, the following row is supplied <p/>
1: 	 * 
1: 	 * @see JmxConstants#PROPERTIES_TYPE for the details of the TabularType
1: 	 * 
1: 	 * @param pid the persistent identifier of the configuration
1: 	 * @param properties the table of properties
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	void update(String pid, TabularData properties) throws IOException;
1: 
1: 	/**
1: 	 * Update the configuration with the supplied properties For each property
1: 	 * entry, the following row is supplied <p/>
1: 	 * 
1: 	 * @see JmxConstants#PROPERTIES_TYPE for the details of the TabularType
1: 	 * 
1: 	 * @param pid the persistent identifier of the configuration
1: 	 * @param location the bundle location
1: 	 * @param properties the table of properties
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	void updateForLocation(String pid, String location, TabularData properties)
1: 			throws IOException;
1: }
============================================================================