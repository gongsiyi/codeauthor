1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.di;
1:f13c6ac: 
1:f13c6ac: import java.lang.reflect.Type;
1:f13c6ac: import java.util.Collections;
1:f13c6ac: import java.util.List;
1:f13c6ac: 
1:f13c6ac: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ValueMetadata;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * This recipe will be used to create an object from a ValueMetadata.
1:f13c6ac:  * We need to keep the reference to the ValueMetadata so that we can lazily retrieve
1:f13c6ac:  * the value, allowing for placeholders or such to be used at the last moment.
1:f13c6ac:  *
1:f13c6ac:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public class ValueRecipe extends AbstractRecipe {
1:f13c6ac: 
1:f13c6ac:     private final ValueMetadata value;
1:f13c6ac:     private final Object type;
1:f13c6ac: 
1:f13c6ac:     public ValueRecipe(String name, ValueMetadata value, Object type) {
1:f13c6ac:         super(name);
1:f13c6ac:         this.value = value;
1:f13c6ac:         this.type = type;
2:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public List<Recipe> getDependencies() {
1:f13c6ac:         return Collections.emptyList();
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     @Override
1:f13c6ac:     protected Object internalCreate() throws ComponentDefinitionException {
1:f13c6ac:         try {
1:5e2bd49:             Type type = getValueType();
1:f13c6ac:             return convert(value.getStringValue(), type);
1:f13c6ac:         } catch (Exception e) {            
1:f13c6ac:             throw new ComponentDefinitionException(e);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:5e2bd49: 	protected Type getValueType() {
1:5e2bd49: 		Type type = Object.class;
1:5e2bd49: 		if (this.type instanceof Type) {
1:5e2bd49: 		    type = (Type) this.type;
1:5e2bd49: 		} else if (this.type instanceof String) {
1:5e2bd49: 		    type = loadClass((String) this.type);
1:5e2bd49: 		}
1:5e2bd49: 		return type;
1:5e2bd49: 	}
1:5e2bd49: 
1:f13c6ac:     @Override
1:f13c6ac:     public String toString() {
1:f13c6ac:         return "ValueRecipe[" +
1:f13c6ac:                 "name='" + name + '\'' +
1:f13c6ac:                 ", value=" + value +
1:f13c6ac:                 ", type=" + type +
1:f13c6ac:                 ']';
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:5e2bd49
/////////////////////////////////////////////////////////////////////////
1:             Type type = getValueType();
1: 	protected Type getValueType() {
1: 		Type type = Object.class;
1: 		if (this.type instanceof Type) {
1: 		    type = (Type) this.type;
1: 		} else if (this.type instanceof String) {
1: 		    type = loadClass((String) this.type);
1: 		}
1: 		return type;
1: 	}
1: 
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.di;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.di;
1: 
1: import java.lang.reflect.Type;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: import org.osgi.service.blueprint.reflect.ValueMetadata;
1: 
1: /**
1:  * This recipe will be used to create an object from a ValueMetadata.
1:  * We need to keep the reference to the ValueMetadata so that we can lazily retrieve
1:  * the value, allowing for placeholders or such to be used at the last moment.
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
1:  * @version $Rev$, $Date$
1:  */
1: public class ValueRecipe extends AbstractRecipe {
1: 
1:     private final ValueMetadata value;
1:     private final Object type;
1: 
1:     public ValueRecipe(String name, ValueMetadata value, Object type) {
1:         super(name);
1:         this.value = value;
1:         this.type = type;
1:     }
1: 
1:     public List<Recipe> getDependencies() {
1:         return Collections.emptyList();
1:     }
1: 
1:     @Override
1:     protected Object internalCreate() throws ComponentDefinitionException {
1:         try {
0:             Type type = Object.class;
0:             if (this.type instanceof Type) {
0:                 type = (Type) this.type;
0:             } else if (this.type instanceof String) {
0:                 type = loadClass((String) this.type);
1:             }
1:             return convert(value.getStringValue(), type);
1:         } catch (Exception e) {            
1:             throw new ComponentDefinitionException(e);
1:         }
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         return "ValueRecipe[" +
1:                 "name='" + name + '\'' +
1:                 ", value=" + value +
1:                 ", type=" + type +
1:                 ']';
1:     }
1: 
1: }
============================================================================