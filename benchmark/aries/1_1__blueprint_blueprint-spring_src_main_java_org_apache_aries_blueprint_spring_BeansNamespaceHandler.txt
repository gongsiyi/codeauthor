1:8d9ae6e: /**
1:8d9ae6e:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:8d9ae6e:  *  contributor license agreements.  See the NOTICE file distributed with
1:8d9ae6e:  *  this work for additional information regarding copyright ownership.
1:8d9ae6e:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:8d9ae6e:  *  (the "License"); you may not use this file except in compliance with
1:8d9ae6e:  *  the License.  You may obtain a copy of the License at
1:8d9ae6e:  *
1:8d9ae6e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8d9ae6e:  *
1:8d9ae6e:  *  Unless required by applicable law or agreed to in writing, software
1:8d9ae6e:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:8d9ae6e:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d9ae6e:  *  See the License for the specific language governing permissions and
1:8d9ae6e:  *  limitations under the License.
1:8d9ae6e:  */
1:8d9ae6e: package org.apache.aries.blueprint.spring;
1:8d9ae6e: 
1:ce74ab1: import java.io.IOException;
1:ce74ab1: import java.net.URISyntaxException;
1:ce74ab1: import java.util.LinkedHashSet;
1:ce74ab1: import java.util.Set;
1:ce74ab1: import java.util.WeakHashMap;
1:e0ca2d5: 
1:8d9ae6e: import org.springframework.beans.factory.BeanDefinitionStoreException;
1:8d9ae6e: import org.springframework.beans.factory.config.BeanDefinition;
1:8d9ae6e: import org.springframework.beans.factory.config.BeanDefinitionHolder;
1:8d9ae6e: import org.springframework.beans.factory.parsing.BeanComponentDefinition;
1:8d9ae6e: import org.springframework.beans.factory.support.BeanDefinitionReaderUtils;
1:ce74ab1: import org.springframework.beans.factory.xml.BeanDefinitionDocumentReader;
1:8d9ae6e: import org.springframework.beans.factory.xml.BeanDefinitionParserDelegate;
1:8d9ae6e: import org.springframework.beans.factory.xml.ParserContext;
1:e0ca2d5: import org.springframework.beans.factory.xml.XmlReaderContext;
1:ce74ab1: import org.springframework.core.io.Resource;
1:ce74ab1: import org.springframework.core.io.support.ResourcePatternUtils;
1:ce74ab1: import org.springframework.util.ResourceUtils;
1:ce74ab1: import org.springframework.util.StringUtils;
1:8d9ae6e: import org.w3c.dom.Element;
1:8d9ae6e: import org.w3c.dom.Node;
1:ce74ab1: import org.w3c.dom.NodeList;
1:8d9ae6e: 
1:8d9ae6e: /**
1:8d9ae6e:  * A spring namespace handler to handle spring bean elements.
1:8d9ae6e:  */
1:8d9ae6e: public class BeansNamespaceHandler implements org.springframework.beans.factory.xml.NamespaceHandler {
1:8d9ae6e: 
1:ce74ab1:     private WeakHashMap<ParserContext, BeanDefinitionReader> readers = new WeakHashMap<ParserContext, BeanDefinitionReader>();
1:ce74ab1: 
2:8d9ae6e:     @Override
1:8d9ae6e:     public void init() {
6:8d9ae6e:     }
1:8d9ae6e: 
1:e0ca2d5:     @Override
1:8d9ae6e:     public BeanDefinition parse(Element ele, ParserContext parserContext) {
1:2e9d097:         BeanDefinitionHolder bdh = getReader(parserContext).parseElement(ele);
1:2e9d097:         return bdh != null ? bdh.getBeanDefinition() : null;
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     public BeanDefinitionHolder decorate(Node source, BeanDefinitionHolder definition, ParserContext parserContext) {
1:8d9ae6e:         return definition;
1:e0ca2d5:     }
1:e0ca2d5: 
1:ce74ab1:     private BeanDefinitionReader getReader(ParserContext parserContext) {
1:ce74ab1:         BeanDefinitionReader reader = readers.get(parserContext);
1:ce74ab1:         if (reader == null) {
1:ce74ab1:             reader = new BeanDefinitionReader(parserContext.getReaderContext());
1:ce74ab1:             readers.put(parserContext, reader);
1:ce74ab1:         }
1:ce74ab1:         return reader;
1:ce74ab1:     }
1:e0ca2d5: 
1:ce74ab1:     /**
1:ce74ab1:      * Default implementation of the {@link BeanDefinitionDocumentReader} interface that
1:ce74ab1:      * reads bean definitions according to the "spring-beans" DTD and XSD format
1:ce74ab1:      * (Spring's default XML bean definition format).
1:ce74ab1:      *
1:ce74ab1:      * <p>The structure, elements, and attribute names of the required XML document
1:ce74ab1:      * are hard-coded in this class. (Of course a transform could be run if necessary
1:ce74ab1:      * to produce this format). {@code <beans>} does not need to be the root
1:ce74ab1:      * element of the XML document: this class will parse all bean definition elements
1:ce74ab1:      * in the XML file, regardless of the actual root element.
1:ce74ab1:      *
1:ce74ab1:      * @author Rod Johnson
1:ce74ab1:      * @author Juergen Hoeller
1:ce74ab1:      * @author Rob Harrop
1:ce74ab1:      * @author Erik Wiersma
1:ce74ab1:      * @since 18.12.2003
1:ce74ab1:      */
1:ce74ab1:     public static class BeanDefinitionReader {
1:ce74ab1: 
1:ce74ab1:         public static final String BEAN_ELEMENT = BeanDefinitionParserDelegate.BEAN_ELEMENT;
1:ce74ab1: 
1:ce74ab1:         public static final String NESTED_BEANS_ELEMENT = "beans";
1:ce74ab1: 
1:ce74ab1:         public static final String ALIAS_ELEMENT = "alias";
1:ce74ab1: 
1:ce74ab1:         public static final String NAME_ATTRIBUTE = "name";
1:ce74ab1: 
1:ce74ab1:         public static final String ALIAS_ATTRIBUTE = "alias";
1:ce74ab1: 
1:ce74ab1:         public static final String IMPORT_ELEMENT = "import";
1:ce74ab1: 
1:ce74ab1:         public static final String RESOURCE_ATTRIBUTE = "resource";
1:ce74ab1: 
1:ce74ab1:         public static final String PROFILE_ATTRIBUTE = "profile";
1:ce74ab1: 
1:ce74ab1:         private final XmlReaderContext readerContext;
1:ce74ab1: 
1:ce74ab1:         private BeanDefinitionParserDelegate delegate;
1:ce74ab1: 
1:ce74ab1:         public BeanDefinitionReader(XmlReaderContext readerContext) {
1:ce74ab1:             this.readerContext = readerContext;
1:e0ca2d5:         }
1:e0ca2d5: 
1:ce74ab1:         /**
1:ce74ab1:          * Return the descriptor for the XML resource that this parser works on.
1:ce74ab1:          */
1:ce74ab1:         protected final XmlReaderContext getReaderContext() {
1:ce74ab1:             return this.readerContext;
1:ce74ab1:         }
1:ce74ab1: 
1:ce74ab1:         /**
1:ce74ab1:          * Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the
1:ce74ab1:          * source metadata from the supplied {@link Element}.
1:ce74ab1:          */
1:ce74ab1:         protected Object extractSource(Element ele) {
1:ce74ab1:             return getReaderContext().extractSource(ele);
1:ce74ab1:         }
1:ce74ab1: 
1:ce74ab1: 
1:2e9d097:         public BeanDefinitionHolder parseElement(Element ele) {
1:ce74ab1:             BeanDefinitionParserDelegate parent = this.delegate;
1:ce74ab1:             this.delegate = createDelegate(getReaderContext(), ele.getOwnerDocument().getDocumentElement(), parent);
1:2e9d097:             BeanDefinitionHolder bdh = parseDefaultElement(ele, this.delegate);
1:ce74ab1:             this.delegate = parent;
1:2e9d097:             return bdh;
1:ce74ab1:         }
1:ce74ab1: 
1:ce74ab1:         /**
1:ce74ab1:          * Register each bean definition within the given root {@code <beans/>} element.
1:ce74ab1:          */
1:ce74ab1:         protected void doRegisterBeanDefinitions(Element root) {
1:ce74ab1:             // Any nested <beans> elements will cause recursion in this method. In
1:ce74ab1:             // order to propagate and preserve <beans> default-* attributes correctly,
1:ce74ab1:             // keep track of the current (parent) delegate, which may be null. Create
1:ce74ab1:             // the new (child) delegate with a reference to the parent for fallback purposes,
1:ce74ab1:             // then ultimately reset this.delegate back to its original (parent) reference.
1:ce74ab1:             // this behavior emulates a stack of delegates without actually necessitating one.
1:ce74ab1:             BeanDefinitionParserDelegate parent = this.delegate;
1:ce74ab1:             this.delegate = createDelegate(getReaderContext(), root, parent);
1:ce74ab1: 
1:ce74ab1:             if (this.delegate.isDefaultNamespace(root)) {
1:ce74ab1:                 String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);
1:ce74ab1:                 if (StringUtils.hasText(profileSpec)) {
1:ce74ab1:                     String[] specifiedProfiles = StringUtils.tokenizeToStringArray(
1:ce74ab1:                             profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);
1:ce74ab1:                     if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {
1:ce74ab1:                         return;
1:ce74ab1:                     }
1:ce74ab1:                 }
1:ce74ab1:             }
1:ce74ab1: 
1:ce74ab1:             parseBeanDefinitions(root, this.delegate);
1:ce74ab1: 
1:ce74ab1:             this.delegate = parent;
1:ce74ab1:         }
1:ce74ab1: 
1:ce74ab1:         protected BeanDefinitionParserDelegate createDelegate(
1:ce74ab1:                 XmlReaderContext readerContext, Element root, BeanDefinitionParserDelegate parentDelegate) {
1:ce74ab1: 
1:ce74ab1:             BeanDefinitionParserDelegate delegate = new BeanDefinitionParserDelegate(readerContext);
1:ce74ab1:             delegate.initDefaults(root, parentDelegate);
1:ce74ab1:             return delegate;
1:ce74ab1:         }
1:ce74ab1: 
1:ce74ab1:         /**
1:ce74ab1:          * Parse the elements at the root level in the document:
1:ce74ab1:          * "import", "alias", "bean".
1:ce74ab1:          * @param root the DOM root element of the document
1:ce74ab1:          */
1:ce74ab1:         protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {
1:ce74ab1:             if (delegate.isDefaultNamespace(root)) {
1:ce74ab1:                 NodeList nl = root.getChildNodes();
1:ce74ab1:                 for (int i = 0; i < nl.getLength(); i++) {
1:ce74ab1:                     Node node = nl.item(i);
1:ce74ab1:                     if (node instanceof Element) {
1:ce74ab1:                         Element ele = (Element) node;
1:ce74ab1:                         if (delegate.isDefaultNamespace(ele)) {
1:ce74ab1:                             parseDefaultElement(ele, delegate);
1:ce74ab1:                         }
1:ce74ab1:                         else {
1:ce74ab1:                             delegate.parseCustomElement(ele);
1:ce74ab1:                         }
1:ce74ab1:                     }
1:ce74ab1:                 }
1:ce74ab1:             }
1:ce74ab1:             else {
1:ce74ab1:                 delegate.parseCustomElement(root);
1:ce74ab1:             }
1:ce74ab1:         }
1:ce74ab1: 
1:2e9d097:         private BeanDefinitionHolder parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) {
1:2e9d097:             BeanDefinitionHolder bdh = null;
1:ce74ab1:             if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) {
1:ce74ab1:                 importBeanDefinitionResource(ele);
1:ce74ab1:             }
1:ce74ab1:             else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) {
1:ce74ab1:                 processAliasRegistration(ele);
1:ce74ab1:             }
1:ce74ab1:             else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) {
1:2e9d097:                 bdh = processBeanDefinition(ele, delegate);
1:ce74ab1:             }
1:ce74ab1:             else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) {
1:ce74ab1:                 // recurse
1:ce74ab1:                 doRegisterBeanDefinitions(ele);
1:ce74ab1:             }
1:2e9d097:             return bdh;
1:ce74ab1:         }
1:ce74ab1: 
1:ce74ab1:         /**
1:ce74ab1:          * Parse an "import" element and load the bean definitions
1:ce74ab1:          * from the given resource into the bean factory.
1:ce74ab1:          */
1:ce74ab1:         protected void importBeanDefinitionResource(Element ele) {
1:ce74ab1:             String location = ele.getAttribute(RESOURCE_ATTRIBUTE);
1:ce74ab1:             if (!StringUtils.hasText(location)) {
1:ce74ab1:                 getReaderContext().error("Resource location must not be empty", ele);
1:ce74ab1:                 return;
1:ce74ab1:             }
1:ce74ab1: 
1:ce74ab1:             // Resolve system properties: e.g. "${user.dir}"
1:ce74ab1:             location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location);
1:ce74ab1: 
1:ce74ab1:             Set<Resource> actualResources = new LinkedHashSet<Resource>(4);
1:ce74ab1: 
1:ce74ab1:             // Discover whether the location is an absolute or relative URI
1:ce74ab1:             boolean absoluteLocation = false;
1:ce74ab1:             try {
1:ce74ab1:                 absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute();
1:ce74ab1:             }
1:ce74ab1:             catch (URISyntaxException ex) {
1:ce74ab1:                 // cannot convert to an URI, considering the location relative
1:ce74ab1:                 // unless it is the well-known Spring prefix "classpath*:"
1:ce74ab1:             }
1:ce74ab1: 
1:ce74ab1:             // Absolute or relative?
1:ce74ab1:             if (absoluteLocation) {
1:ce74ab1:                 try {
1:ce74ab1:                     int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources);
1:ce74ab1: //                    if (logger.isDebugEnabled()) {
1:ce74ab1: //                        logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]");
1:ce74ab1: //                    }
1:ce74ab1:                 }
1:ce74ab1:                 catch (BeanDefinitionStoreException ex) {
1:ce74ab1:                     getReaderContext().error(
1:ce74ab1:                             "Failed to import bean definitions from URL location [" + location + "]", ele, ex);
1:ce74ab1:                 }
1:ce74ab1:             }
1:ce74ab1:             else {
1:ce74ab1:                 // No URL -> considering resource location as relative to the current file.
1:ce74ab1:                 try {
1:ce74ab1:                     int importCount;
1:ce74ab1:                     Resource relativeResource = getReaderContext().getResource().createRelative(location);
1:ce74ab1:                     if (relativeResource.exists()) {
1:ce74ab1:                         importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource);
1:ce74ab1:                         actualResources.add(relativeResource);
1:ce74ab1:                     }
1:ce74ab1:                     else {
1:ce74ab1:                         String baseLocation = getReaderContext().getResource().getURL().toString();
1:ce74ab1:                         importCount = getReaderContext().getReader().loadBeanDefinitions(
1:ce74ab1:                                 StringUtils.applyRelativePath(baseLocation, location), actualResources);
1:ce74ab1:                     }
1:ce74ab1: //                    if (logger.isDebugEnabled()) {
1:ce74ab1: //                        logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]");
1:ce74ab1: //                    }
1:ce74ab1:                 }
1:ce74ab1:                 catch (IOException ex) {
1:ce74ab1:                     getReaderContext().error("Failed to resolve current resource location", ele, ex);
1:ce74ab1:                 }
1:ce74ab1:                 catch (BeanDefinitionStoreException ex) {
1:ce74ab1:                     getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",
1:ce74ab1:                             ele, ex);
1:ce74ab1:                 }
1:ce74ab1:             }
1:ce74ab1:             Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()]);
1:ce74ab1:             getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele));
1:ce74ab1:         }
1:ce74ab1: 
1:ce74ab1:         /**
1:ce74ab1:          * Process the given alias element, registering the alias with the registry.
1:ce74ab1:          */
1:ce74ab1:         protected void processAliasRegistration(Element ele) {
1:ce74ab1:             String name = ele.getAttribute(NAME_ATTRIBUTE);
1:ce74ab1:             String alias = ele.getAttribute(ALIAS_ATTRIBUTE);
1:ce74ab1:             boolean valid = true;
1:ce74ab1:             if (!StringUtils.hasText(name)) {
1:ce74ab1:                 getReaderContext().error("Name must not be empty", ele);
1:ce74ab1:                 valid = false;
1:ce74ab1:             }
1:ce74ab1:             if (!StringUtils.hasText(alias)) {
1:ce74ab1:                 getReaderContext().error("Alias must not be empty", ele);
1:ce74ab1:                 valid = false;
1:ce74ab1:             }
1:ce74ab1:             if (valid) {
1:ce74ab1:                 try {
1:ce74ab1:                     getReaderContext().getRegistry().registerAlias(name, alias);
1:ce74ab1:                 }
1:ce74ab1:                 catch (Exception ex) {
1:ce74ab1:                     getReaderContext().error("Failed to register alias '" + alias +
1:ce74ab1:                             "' for bean with name '" + name + "'", ele, ex);
1:ce74ab1:                 }
1:ce74ab1:                 getReaderContext().fireAliasRegistered(name, alias, extractSource(ele));
1:ce74ab1:             }
1:ce74ab1:         }
1:ce74ab1: 
1:ce74ab1:         /**
1:ce74ab1:          * Process the given bean element, parsing the bean definition
1:ce74ab1:          * and registering it with the registry.
1:ce74ab1:          */
1:2e9d097:         protected BeanDefinitionHolder processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {
1:ce74ab1:             BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);
1:ce74ab1:             if (bdHolder != null) {
1:ce74ab1:                 bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);
1:ce74ab1:                 try {
1:ce74ab1:                     // Register the final decorated instance.
1:ce74ab1:                     BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());
1:ce74ab1:                 }
1:ce74ab1:                 catch (BeanDefinitionStoreException ex) {
1:ce74ab1:                     getReaderContext().error("Failed to register bean definition with name '" +
1:ce74ab1:                             bdHolder.getBeanName() + "'", ele, ex);
1:ce74ab1:                 }
1:ce74ab1:                 // Send registration event.
1:ce74ab1:                 getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));
1:ce74ab1:             }
1:2e9d097:             return bdHolder;
1:ce74ab1:         }
1:e0ca2d5:     }
1:ce74ab1: 
1:e0ca2d5: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e9d097
/////////////////////////////////////////////////////////////////////////
1:         BeanDefinitionHolder bdh = getReader(parserContext).parseElement(ele);
1:         return bdh != null ? bdh.getBeanDefinition() : null;
/////////////////////////////////////////////////////////////////////////
1:         public BeanDefinitionHolder parseElement(Element ele) {
1:             BeanDefinitionHolder bdh = parseDefaultElement(ele, this.delegate);
1:             return bdh;
/////////////////////////////////////////////////////////////////////////
1:         private BeanDefinitionHolder parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) {
1:             BeanDefinitionHolder bdh = null;
/////////////////////////////////////////////////////////////////////////
1:                 bdh = processBeanDefinition(ele, delegate);
1:             return bdh;
/////////////////////////////////////////////////////////////////////////
1:         protected BeanDefinitionHolder processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {
/////////////////////////////////////////////////////////////////////////
1:             return bdHolder;
commit:ce74ab1
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.URISyntaxException;
1: import java.util.LinkedHashSet;
1: import java.util.Set;
1: import java.util.WeakHashMap;
1: import org.springframework.beans.factory.xml.BeanDefinitionDocumentReader;
1: import org.springframework.core.io.Resource;
1: import org.springframework.core.io.support.ResourcePatternUtils;
1: import org.springframework.util.ResourceUtils;
1: import org.springframework.util.StringUtils;
1: import org.w3c.dom.NodeList;
1:     private WeakHashMap<ParserContext, BeanDefinitionReader> readers = new WeakHashMap<ParserContext, BeanDefinitionReader>();
1: 
0:         getReader(parserContext).parseElement(ele);
/////////////////////////////////////////////////////////////////////////
1:     private BeanDefinitionReader getReader(ParserContext parserContext) {
1:         BeanDefinitionReader reader = readers.get(parserContext);
1:         if (reader == null) {
1:             reader = new BeanDefinitionReader(parserContext.getReaderContext());
1:             readers.put(parserContext, reader);
1:         }
1:         return reader;
1:     }
1:     /**
1:      * Default implementation of the {@link BeanDefinitionDocumentReader} interface that
1:      * reads bean definitions according to the "spring-beans" DTD and XSD format
1:      * (Spring's default XML bean definition format).
1:      *
1:      * <p>The structure, elements, and attribute names of the required XML document
1:      * are hard-coded in this class. (Of course a transform could be run if necessary
1:      * to produce this format). {@code <beans>} does not need to be the root
1:      * element of the XML document: this class will parse all bean definition elements
1:      * in the XML file, regardless of the actual root element.
1:      *
1:      * @author Rod Johnson
1:      * @author Juergen Hoeller
1:      * @author Rob Harrop
1:      * @author Erik Wiersma
1:      * @since 18.12.2003
1:      */
1:     public static class BeanDefinitionReader {
1: 
1:         public static final String BEAN_ELEMENT = BeanDefinitionParserDelegate.BEAN_ELEMENT;
1: 
1:         public static final String NESTED_BEANS_ELEMENT = "beans";
1: 
1:         public static final String ALIAS_ELEMENT = "alias";
1: 
1:         public static final String NAME_ATTRIBUTE = "name";
1: 
1:         public static final String ALIAS_ATTRIBUTE = "alias";
1: 
1:         public static final String IMPORT_ELEMENT = "import";
1: 
1:         public static final String RESOURCE_ATTRIBUTE = "resource";
1: 
1:         public static final String PROFILE_ATTRIBUTE = "profile";
1: 
1:         private final XmlReaderContext readerContext;
1: 
1:         private BeanDefinitionParserDelegate delegate;
1: 
1:         public BeanDefinitionReader(XmlReaderContext readerContext) {
1:             this.readerContext = readerContext;
1:         /**
1:          * Return the descriptor for the XML resource that this parser works on.
1:          */
1:         protected final XmlReaderContext getReaderContext() {
1:             return this.readerContext;
1:         }
1: 
1:         /**
1:          * Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the
1:          * source metadata from the supplied {@link Element}.
1:          */
1:         protected Object extractSource(Element ele) {
1:             return getReaderContext().extractSource(ele);
1:         }
1: 
1: 
0:         public void parseElement(Element ele) {
1:             BeanDefinitionParserDelegate parent = this.delegate;
1:             this.delegate = createDelegate(getReaderContext(), ele.getOwnerDocument().getDocumentElement(), parent);
0:             parseDefaultElement(ele, this.delegate);
1:             this.delegate = parent;
1:         }
1: 
1:         /**
1:          * Register each bean definition within the given root {@code <beans/>} element.
1:          */
1:         protected void doRegisterBeanDefinitions(Element root) {
1:             // Any nested <beans> elements will cause recursion in this method. In
1:             // order to propagate and preserve <beans> default-* attributes correctly,
1:             // keep track of the current (parent) delegate, which may be null. Create
1:             // the new (child) delegate with a reference to the parent for fallback purposes,
1:             // then ultimately reset this.delegate back to its original (parent) reference.
1:             // this behavior emulates a stack of delegates without actually necessitating one.
1:             BeanDefinitionParserDelegate parent = this.delegate;
1:             this.delegate = createDelegate(getReaderContext(), root, parent);
1: 
1:             if (this.delegate.isDefaultNamespace(root)) {
1:                 String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);
1:                 if (StringUtils.hasText(profileSpec)) {
1:                     String[] specifiedProfiles = StringUtils.tokenizeToStringArray(
1:                             profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);
1:                     if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {
1:                         return;
1:                     }
1:                 }
1:             }
1: 
1:             parseBeanDefinitions(root, this.delegate);
1: 
1:             this.delegate = parent;
1:         }
1: 
1:         protected BeanDefinitionParserDelegate createDelegate(
1:                 XmlReaderContext readerContext, Element root, BeanDefinitionParserDelegate parentDelegate) {
1: 
1:             BeanDefinitionParserDelegate delegate = new BeanDefinitionParserDelegate(readerContext);
1:             delegate.initDefaults(root, parentDelegate);
1:             return delegate;
1:         }
1: 
1:         /**
1:          * Parse the elements at the root level in the document:
1:          * "import", "alias", "bean".
1:          * @param root the DOM root element of the document
1:          */
1:         protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {
1:             if (delegate.isDefaultNamespace(root)) {
1:                 NodeList nl = root.getChildNodes();
1:                 for (int i = 0; i < nl.getLength(); i++) {
1:                     Node node = nl.item(i);
1:                     if (node instanceof Element) {
1:                         Element ele = (Element) node;
1:                         if (delegate.isDefaultNamespace(ele)) {
1:                             parseDefaultElement(ele, delegate);
1:                         }
1:                         else {
1:                             delegate.parseCustomElement(ele);
1:                         }
1:                     }
1:                 }
1:             }
1:             else {
1:                 delegate.parseCustomElement(root);
1:             }
1:         }
1: 
0:         private void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) {
1:             if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) {
1:                 importBeanDefinitionResource(ele);
1:             }
1:             else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) {
1:                 processAliasRegistration(ele);
1:             }
1:             else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) {
0:                 processBeanDefinition(ele, delegate);
1:             }
1:             else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) {
1:                 // recurse
1:                 doRegisterBeanDefinitions(ele);
1:             }
1:         }
1: 
1:         /**
1:          * Parse an "import" element and load the bean definitions
1:          * from the given resource into the bean factory.
1:          */
1:         protected void importBeanDefinitionResource(Element ele) {
1:             String location = ele.getAttribute(RESOURCE_ATTRIBUTE);
1:             if (!StringUtils.hasText(location)) {
1:                 getReaderContext().error("Resource location must not be empty", ele);
1:                 return;
1:             }
1: 
1:             // Resolve system properties: e.g. "${user.dir}"
1:             location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location);
1: 
1:             Set<Resource> actualResources = new LinkedHashSet<Resource>(4);
1: 
1:             // Discover whether the location is an absolute or relative URI
1:             boolean absoluteLocation = false;
1:             try {
1:                 absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute();
1:             }
1:             catch (URISyntaxException ex) {
1:                 // cannot convert to an URI, considering the location relative
1:                 // unless it is the well-known Spring prefix "classpath*:"
1:             }
1: 
1:             // Absolute or relative?
1:             if (absoluteLocation) {
1:                 try {
1:                     int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources);
1: //                    if (logger.isDebugEnabled()) {
1: //                        logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]");
1: //                    }
1:                 }
1:                 catch (BeanDefinitionStoreException ex) {
1:                     getReaderContext().error(
1:                             "Failed to import bean definitions from URL location [" + location + "]", ele, ex);
1:                 }
1:             }
1:             else {
1:                 // No URL -> considering resource location as relative to the current file.
1:                 try {
1:                     int importCount;
1:                     Resource relativeResource = getReaderContext().getResource().createRelative(location);
1:                     if (relativeResource.exists()) {
1:                         importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource);
1:                         actualResources.add(relativeResource);
1:                     }
1:                     else {
1:                         String baseLocation = getReaderContext().getResource().getURL().toString();
1:                         importCount = getReaderContext().getReader().loadBeanDefinitions(
1:                                 StringUtils.applyRelativePath(baseLocation, location), actualResources);
1:                     }
1: //                    if (logger.isDebugEnabled()) {
1: //                        logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]");
1: //                    }
1:                 }
1:                 catch (IOException ex) {
1:                     getReaderContext().error("Failed to resolve current resource location", ele, ex);
1:                 }
1:                 catch (BeanDefinitionStoreException ex) {
1:                     getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",
1:                             ele, ex);
1:                 }
1:             }
1:             Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()]);
1:             getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele));
1:         }
1: 
1:         /**
1:          * Process the given alias element, registering the alias with the registry.
1:          */
1:         protected void processAliasRegistration(Element ele) {
1:             String name = ele.getAttribute(NAME_ATTRIBUTE);
1:             String alias = ele.getAttribute(ALIAS_ATTRIBUTE);
1:             boolean valid = true;
1:             if (!StringUtils.hasText(name)) {
1:                 getReaderContext().error("Name must not be empty", ele);
1:                 valid = false;
1:             }
1:             if (!StringUtils.hasText(alias)) {
1:                 getReaderContext().error("Alias must not be empty", ele);
1:                 valid = false;
1:             }
1:             if (valid) {
1:                 try {
1:                     getReaderContext().getRegistry().registerAlias(name, alias);
1:                 }
1:                 catch (Exception ex) {
1:                     getReaderContext().error("Failed to register alias '" + alias +
1:                             "' for bean with name '" + name + "'", ele, ex);
1:                 }
1:                 getReaderContext().fireAliasRegistered(name, alias, extractSource(ele));
1:             }
1:         }
1: 
1:         /**
1:          * Process the given bean element, parsing the bean definition
1:          * and registering it with the registry.
1:          */
0:         protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {
1:             BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);
1:             if (bdHolder != null) {
1:                 bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);
1:                 try {
1:                     // Register the final decorated instance.
1:                     BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());
1:                 }
1:                 catch (BeanDefinitionStoreException ex) {
1:                     getReaderContext().error("Failed to register bean definition with name '" +
1:                             bdHolder.getBeanName() + "'", ele, ex);
1:                 }
1:                 // Send registration event.
1:                 getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));
1:             }
1:         }
1: 
commit:e0ca2d5
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.InvocationHandler;
0: import java.lang.reflect.Method;
0: import java.lang.reflect.Proxy;
1: 
0: import org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;
1: import org.springframework.beans.factory.xml.XmlReaderContext;
0: import org.w3c.dom.Document;
/////////////////////////////////////////////////////////////////////////
0:         } else if (DefaultBeanDefinitionDocumentReader.NESTED_BEANS_ELEMENT.equals(ele.getLocalName())) {
0:             MyDefaultBeanDefinitionDocumentReader reader = new MyDefaultBeanDefinitionDocumentReader();
0:             reader.registerBeanDefinitions(ele, parserContext.getReaderContext());
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static class MyDefaultBeanDefinitionDocumentReader extends DefaultBeanDefinitionDocumentReader {
1: 
0:         public void registerBeanDefinitions(final Element ele, XmlReaderContext readerContext) {
0:             Document doc = (Document) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[]{Document.class}, new InvocationHandler() {
1:                 @Override
0:                 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
0:                     if (method.getName().equals("getDocumentElement")) {
0:                         return ele;
1:                     }
0:                     throw new UnsupportedOperationException();
1:                 }
0:             });
0:             registerBeanDefinitions(doc, readerContext);
1:         }
1: 
1:     }
commit:8d9ae6e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.spring;
1: 
1: import org.springframework.beans.factory.BeanDefinitionStoreException;
1: import org.springframework.beans.factory.config.BeanDefinition;
1: import org.springframework.beans.factory.config.BeanDefinitionHolder;
1: import org.springframework.beans.factory.parsing.BeanComponentDefinition;
1: import org.springframework.beans.factory.support.BeanDefinitionReaderUtils;
1: import org.springframework.beans.factory.xml.BeanDefinitionParserDelegate;
1: import org.springframework.beans.factory.xml.ParserContext;
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: 
1: /**
1:  * A spring namespace handler to handle spring bean elements.
1:  */
1: public class BeansNamespaceHandler implements org.springframework.beans.factory.xml.NamespaceHandler {
1: 
1:     @Override
1:     public void init() {
1:     }
1: 
1:     @Override
1:     public BeanDefinition parse(Element ele, ParserContext parserContext) {
0:         if (BeanDefinitionParserDelegate.BEAN_ELEMENT.equals(ele.getLocalName())) {
0:             BeanDefinitionParserDelegate delegate = parserContext.getDelegate();
0:             BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);
0:             if (bdHolder != null) {
0:                 bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);
0:                 try {
0:                     // Register the final decorated instance.
0:                     BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, parserContext.getReaderContext().getRegistry());
0:                 } catch (BeanDefinitionStoreException ex) {
0:                     parserContext.getReaderContext().error("Failed to register bean definition with name '" +
0:                             bdHolder.getBeanName() + "'", ele, ex);
1:                 }
0:                 // Send registration event.
0:                 parserContext.getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));
1:             }
0:         } else {
0:             throw new UnsupportedOperationException();
1:         }
0:         return null;
1:     }
1: 
1:     @Override
1:     public BeanDefinitionHolder decorate(Node source, BeanDefinitionHolder definition, ParserContext parserContext) {
1:         return definition;
1:     }
1: }
============================================================================