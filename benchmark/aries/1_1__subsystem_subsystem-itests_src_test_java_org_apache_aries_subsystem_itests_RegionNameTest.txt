1:b4099e6: /*
1:b4099e6:  * Licensed to the Apache Software Foundation (ASF) under one
1:b4099e6:  * or more contributor license agreements.  See the NOTICE file
1:b4099e6:  * distributed with this work for additional information
1:b4099e6:  * regarding copyright ownership.  The ASF licenses this file
1:b4099e6:  * to you under the Apache License, Version 2.0 (the
1:b4099e6:  * "License"); you may not use this file except in compliance
1:b4099e6:  * with the License.  You may obtain a copy of the License at
1:b4099e6:  *
1:b4099e6:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b4099e6:  *
1:b4099e6:  * Unless required by applicable law or agreed to in writing,
1:b4099e6:  * software distributed under the License is distributed on an
1:b4099e6:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b4099e6:  * KIND, either express or implied.  See the License for the
1:b4099e6:  * specific language governing permissions and limitations
1:b4099e6:  * under the License.
1:b4099e6:  */
1:b4099e6: package org.apache.aries.subsystem.itests;
1:b4099e6: 
1:b4099e6: import static org.junit.Assert.assertTrue;
1:b4099e6: 
1:b4099e6: import java.io.IOException;
1:b4099e6: import java.lang.reflect.Method;
1:b4099e6: import java.util.HashMap;
1:b4099e6: import java.util.Map;
1:b4099e6: import java.util.regex.Matcher;
1:b4099e6: import java.util.regex.Pattern;
1:b4099e6: 
1:b4099e6: import org.apache.aries.subsystem.core.archive.Grammar;
1:b4099e6: import org.eclipse.equinox.region.Region;
1:b4099e6: import org.junit.Before;
1:b4099e6: import org.junit.Test;
1:b4099e6: import org.osgi.service.subsystem.Subsystem;
1:b4099e6: import org.osgi.service.subsystem.SubsystemConstants;
1:b4099e6: 
1:b4099e6: /*
1:b4099e6:  * This test ensures that names given to subsystem regions follow a predictable
1:b4099e6:  * pattern and will not inadvertently change without a discussion. At least one
1:b4099e6:  * major Apache Aries Subsystems consumer has a business requirement relying on
1:b4099e6:  * it.
1:b4099e6:  * 
1:b4099e6:  * The current naming convention has the following pattern:
1:b4099e6:  * 
1:b4099e6:  * subsystemSymbolicName;subsystemVersion;subsystemType;subsystemId
1:b4099e6:  */
1:b4099e6: public class RegionNameTest extends SubsystemTest {
1:b4099e6: 	/*
1:b4099e6:      * Subsystem-SymbolicName: application.a.esa
1:b4099e6:      * 
1:b4099e6:      * Included In Archive
1:b4099e6:      * 		feature.a.esa
1:b4099e6:      */
1:b4099e6:     private static final String APPLICATION_A = "application.a.esa";
1:b4099e6:     /*
1:b4099e6:      * Subsystem-SymbolicName: composite.a.esa
1:b4099e6:      * Subsystem-Type: osgi.subsystem.composite
1:b4099e6:      * Subsystem-Content: feature.a.esa
1:b4099e6:      */
1:b4099e6:     private static final String COMPOSITE_A = "composite.a.esa";
1:b4099e6:     /*
1:b4099e6:      * Subsystem-SymbolicName: feature.a.esa
1:b4099e6:      * Subsystem-Type: osgi.subsystem.feature
1:b4099e6:      */
1:b4099e6:     private static final String FEATURE_A = "feature.a.esa";
1:b4099e6: 
1:b4099e6: 	private static final String regexp = Grammar.SYMBOLICNAME + ';' +
1:b4099e6: 			Grammar.VERSION + ";(?:" + 
1:b4099e6: 			SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION + '|' +
1:b4099e6: 			SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE + ");[0-9]+";
1:b4099e6: 	private static final Pattern pattern = Pattern.compile(regexp);
1:b4099e6:     
1:b4099e6: 	private static boolean createdTestFiles;
1:b4099e6: 	
1:b4099e6: 	@Before
1:b4099e6: 	public void createTestFiles() throws Exception {
1:b4099e6: 		if (createdTestFiles)
1:b4099e6: 			return;
1:2aab796: 		createFeatureA();
1:b4099e6: 		createApplicationA();
1:b4099e6: 		createCompositeA();
1:b4099e6: 		createdTestFiles = true;
1:b4099e6: 	}
1:b4099e6: 	
1:b4099e6: 	private void createApplicationA() throws IOException {
1:b4099e6:         createApplicationAManifest();
1:b4099e6:         createSubsystem(APPLICATION_A, FEATURE_A);
1:b4099e6:     }
1:b4099e6: 	
1:b4099e6: 	private void createApplicationAManifest() throws IOException {
1:b4099e6:         Map<String, String> attributes = new HashMap<String, String>();
1:b4099e6:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:b4099e6:         createManifest(APPLICATION_A + ".mf", attributes);
1:b4099e6:     }
1:b4099e6: 	
1:b4099e6: 	private void createCompositeA() throws IOException {
1:b4099e6:         createCompositeAManifest();
1:b4099e6:         createSubsystem(COMPOSITE_A, FEATURE_A);
1:b4099e6:     }
1:b4099e6: 	
1:b4099e6: 	private void createCompositeAManifest() throws IOException {
1:b4099e6:         Map<String, String> attributes = new HashMap<String, String>();
1:b4099e6:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1:b4099e6:         attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:b4099e6:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, FEATURE_A + ";version=\"[0,0]\";type=osgi.subsystem.feature");
1:b4099e6:         createManifest(COMPOSITE_A + ".mf", attributes);
1:b4099e6:     }
1:b4099e6: 	
1:b4099e6: 	private void createFeatureA() throws IOException {
1:b4099e6:         createFeatureAManifest();
1:b4099e6:         createSubsystem(FEATURE_A);
1:b4099e6:     }
1:b4099e6:     
1:b4099e6:     private void createFeatureAManifest() throws IOException {
1:b4099e6:         Map<String, String> attributes = new HashMap<String, String>();
1:b4099e6:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_A);
1:b4099e6:         attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:b4099e6:         createManifest(FEATURE_A + ".mf", attributes);
1:b4099e6:     }
1:b4099e6:     
1:b4099e6:     @Test
1:b4099e6:     public void testApplicationRegionName() throws Exception {
1:b4099e6:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:b4099e6:     	try {
1:b4099e6:     		testRegionName(applicationA);
1:b4099e6:     		Subsystem featureA = getChild(applicationA, FEATURE_A, null, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:b4099e6:     		testRegionName(featureA);
1:b4099e6:     	}
1:b4099e6:     	finally {
1:b4099e6:     		uninstallSubsystemSilently(applicationA);
1:b4099e6:     	}
1:b4099e6:     }
1:b4099e6:     
1:b4099e6:     @Test
1:b4099e6:     public void testCompositeRegionName() throws Exception {
1:b4099e6:     	Subsystem compositeA = installSubsystemFromFile(COMPOSITE_A);
1:b4099e6:     	try {
1:b4099e6:     		testRegionName(compositeA);
1:b4099e6:     		Subsystem featureA = getChild(compositeA, FEATURE_A, null, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:b4099e6:     		testRegionName(featureA);
1:b4099e6:     	}
1:b4099e6:     	finally {
1:b4099e6:     		uninstallSubsystemSilently(compositeA);
1:b4099e6:     	}
1:b4099e6:     }
1:b4099e6:     
1:b4099e6:     private void testRegionName(Subsystem subsystem) throws Exception {
1:b4099e6:     	Method getRegion = subsystem.getClass().getDeclaredMethod("getRegion");
1:b4099e6:     	getRegion.setAccessible(true);
1:b4099e6:     	Region region = (Region)getRegion.invoke(subsystem);
1:b4099e6:     	String regionName = region.getName();
1:b4099e6:     	Matcher matcher = pattern.matcher(regionName);
1:b4099e6:     	boolean matches = matcher.matches();
1:b4099e6:     	assertTrue("Invalid region name", matches);
1:b4099e6:     }
1:b4099e6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2aab796
/////////////////////////////////////////////////////////////////////////
1: 		createFeatureA();
commit:b4099e6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.lang.reflect.Method;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: import org.apache.aries.subsystem.core.archive.Grammar;
1: import org.eclipse.equinox.region.Region;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: /*
1:  * This test ensures that names given to subsystem regions follow a predictable
1:  * pattern and will not inadvertently change without a discussion. At least one
1:  * major Apache Aries Subsystems consumer has a business requirement relying on
1:  * it.
1:  * 
1:  * The current naming convention has the following pattern:
1:  * 
1:  * subsystemSymbolicName;subsystemVersion;subsystemType;subsystemId
1:  */
1: public class RegionNameTest extends SubsystemTest {
1: 	/*
1:      * Subsystem-SymbolicName: application.a.esa
1:      * 
1:      * Included In Archive
1:      * 		feature.a.esa
1:      */
1:     private static final String APPLICATION_A = "application.a.esa";
1:     /*
1:      * Subsystem-SymbolicName: composite.a.esa
1:      * Subsystem-Type: osgi.subsystem.composite
1:      * Subsystem-Content: feature.a.esa
1:      */
1:     private static final String COMPOSITE_A = "composite.a.esa";
1:     /*
1:      * Subsystem-SymbolicName: feature.a.esa
1:      * Subsystem-Type: osgi.subsystem.feature
1:      */
1:     private static final String FEATURE_A = "feature.a.esa";
1: 
1: 	private static final String regexp = Grammar.SYMBOLICNAME + ';' +
1: 			Grammar.VERSION + ";(?:" + 
1: 			SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION + '|' +
1: 			SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE + ");[0-9]+";
1: 	private static final Pattern pattern = Pattern.compile(regexp);
1:     
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createApplicationA();
1: 		createCompositeA();
0: 		createFeatureA();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	private void createApplicationA() throws IOException {
1:         createApplicationAManifest();
1:         createSubsystem(APPLICATION_A, FEATURE_A);
1:     }
1: 	
1: 	private void createApplicationAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:         createManifest(APPLICATION_A + ".mf", attributes);
1:     }
1: 	
1: 	private void createCompositeA() throws IOException {
1:         createCompositeAManifest();
1:         createSubsystem(COMPOSITE_A, FEATURE_A);
1:     }
1: 	
1: 	private void createCompositeAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, FEATURE_A + ";version=\"[0,0]\";type=osgi.subsystem.feature");
1:         createManifest(COMPOSITE_A + ".mf", attributes);
1:     }
1: 	
1: 	private void createFeatureA() throws IOException {
1:         createFeatureAManifest();
1:         createSubsystem(FEATURE_A);
1:     }
1:     
1:     private void createFeatureAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_A);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:         createManifest(FEATURE_A + ".mf", attributes);
1:     }
1:     
1:     @Test
1:     public void testApplicationRegionName() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		testRegionName(applicationA);
1:     		Subsystem featureA = getChild(applicationA, FEATURE_A, null, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:     		testRegionName(featureA);
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1:     
1:     @Test
1:     public void testCompositeRegionName() throws Exception {
1:     	Subsystem compositeA = installSubsystemFromFile(COMPOSITE_A);
1:     	try {
1:     		testRegionName(compositeA);
1:     		Subsystem featureA = getChild(compositeA, FEATURE_A, null, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:     		testRegionName(featureA);
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(compositeA);
1:     	}
1:     }
1:     
1:     private void testRegionName(Subsystem subsystem) throws Exception {
1:     	Method getRegion = subsystem.getClass().getDeclaredMethod("getRegion");
1:     	getRegion.setAccessible(true);
1:     	Region region = (Region)getRegion.invoke(subsystem);
1:     	String regionName = region.getName();
1:     	Matcher matcher = pattern.matcher(regionName);
1:     	boolean matches = matcher.matches();
1:     	assertTrue("Invalid region name", matches);
1:     }
1: }
============================================================================