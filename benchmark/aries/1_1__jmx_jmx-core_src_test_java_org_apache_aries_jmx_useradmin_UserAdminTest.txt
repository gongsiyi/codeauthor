1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.useradmin;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.Hashtable;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.codec.AuthorizationData;
1:fdf3952: import org.apache.aries.jmx.codec.GroupData;
1:fdf3952: import org.apache.aries.jmx.codec.RoleData;
1:fdf3952: import org.apache.aries.jmx.codec.UserData;
1:fdf3952: import org.junit.Assert;
1:fdf3952: import org.junit.Before;
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.mockito.Mock;
1:fdf3952: import org.mockito.Mockito;
1:fdf3952: import org.mockito.MockitoAnnotations;
1:fdf3952: import org.osgi.jmx.JmxConstants;
1:fdf3952: import org.osgi.service.useradmin.Authorization;
1:fdf3952: import org.osgi.service.useradmin.Group;
1:fdf3952: import org.osgi.service.useradmin.Role;
1:fdf3952: import org.osgi.service.useradmin.User;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * UserAdminMBean test case.
1:fdf3952:  * 
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class UserAdminTest {
1:fdf3952: 
1:fdf3952:     @Mock
1:fdf3952:     private org.osgi.service.useradmin.UserAdmin userAdmin;
1:fdf3952:     private UserAdmin mbean;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @throws java.lang.Exception
1:fdf3952:      */
1:fdf3952:     @Before
1:fdf3952:     public void setUp() throws Exception {
1:fdf3952:         MockitoAnnotations.initMocks(this);
1:fdf3952:         mbean = new UserAdmin(userAdmin);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for
1:fdf3952:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#addCredential(java.lang.String, byte[], java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testAddCredential() throws IOException {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Dictionary<String, Object> credentials = new Hashtable<String, Object>();
1:fdf3952:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getCredentials()).thenReturn(credentials);
1:fdf3952:         mbean.addCredential("password", new byte[] { 1, 2 }, "user1");
1:fdf3952:         Assert.assertArrayEquals(new byte[] { 1, 2 }, (byte[]) credentials.get("password"));
1:fdf3952: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for
1:fdf3952:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#addCredentialString(String, String, String)}
1:fdf3952:      * .
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testAddCredentialString() throws IOException {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Dictionary<String, Object> credentials = new Hashtable<String, Object>();
1:fdf3952:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getCredentials()).thenReturn(credentials);
1:fdf3952:         mbean.addCredentialString("password", "1234", "user1");
1:fdf3952:         Assert.assertEquals("1234", (String) credentials.get("password"));
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#addMember(java.lang.String, java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testAddMember() throws IOException {
1:fdf3952:         Group group1 = Mockito.mock(Group.class);
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(userAdmin.getRole("group1")).thenReturn(group1);
1:fdf3952:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:fdf3952:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:fdf3952:         Mockito.when(group1.addMember(user1)).thenReturn(true);
1:fdf3952:         boolean isAdded = mbean.addMember("group1", "user1");
1:fdf3952:         Assert.assertTrue(isAdded);
1:fdf3952:         Mockito.verify(group1).addMember(user1);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for
1:fdf3952:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#addPropertyString(String, String, String)}
1:fdf3952:      * .
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testAddPropertyString() throws IOException {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:fdf3952:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getProperties()).thenReturn(props);
1:fdf3952:         mbean.addPropertyString("key", "1234", "user1");
1:fdf3952:         Assert.assertEquals("1234", (String) props.get("key"));
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for
1:fdf3952:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#addProperty(java.lang.String, byte[], java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testAddProperty() throws IOException {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:fdf3952:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getProperties()).thenReturn(props);
1:fdf3952:         mbean.addProperty("key", new byte[] { 1, 2 }, "user1");
1:fdf3952:         Assert.assertArrayEquals(new byte[] { 1, 2 }, (byte[]) props.get("key"));
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for
1:fdf3952:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#addRequiredMember(java.lang.String, java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testAddRequiredMember() throws IOException {
1:fdf3952:         Group group1 = Mockito.mock(Group.class);
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(userAdmin.getRole("group1")).thenReturn(group1);
1:fdf3952:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:fdf3952:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:fdf3952:         Mockito.when(group1.addRequiredMember(user1)).thenReturn(true);
1:fdf3952:         boolean isAdded = mbean.addRequiredMember("group1", "user1");
1:fdf3952:         Assert.assertTrue(isAdded);
1:fdf3952:         Mockito.verify(group1).addRequiredMember(user1);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#createGroup(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testCreateGroup() throws IOException {
1:fdf3952:         mbean.createGroup("group1");
1:fdf3952:         Mockito.verify(userAdmin).createRole("group1", Role.GROUP);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#createRole(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testCreateRole() throws IOException {
1:fdf3952:         try {
1:fdf3952:             mbean.createRole("role1");
1:fdf3952:             Assert.fail("Function did not throw exception as expected");
1:fdf3952:         } catch (IOException e) {
1:fdf3952:             // expected
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#createUser(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testCreateUser() throws IOException {
1:fdf3952:         mbean.createUser("user1");
1:fdf3952:         Mockito.verify(userAdmin).createRole("user1", Role.USER);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getAuthorization(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetAuthorization() throws IOException {
1:fdf3952:         Authorization auth = Mockito.mock(Authorization.class);
1:fdf3952:         User user = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(user.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(userAdmin.getAuthorization(user)).thenReturn(auth);
1:fdf3952:         Mockito.when(userAdmin.getRole("role1")).thenReturn(user);
1:fdf3952:         Mockito.when(auth.getName()).thenReturn("auth1");
1:fdf3952:         Mockito.when(auth.getRoles()).thenReturn(new String[]{"role1"});
1:fdf3952:         CompositeData data = mbean.getAuthorization("role1");
1:fdf3952:         Assert.assertNotNull(data);
1:fdf3952:         AuthorizationData authData = AuthorizationData.from(data);
1:fdf3952:         Assert.assertNotNull(authData);
1:fdf3952:         Assert.assertEquals("auth1", authData.getName());
1:fdf3952:         Assert.assertArrayEquals(new String[] { "role1" }, authData.getRoles());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getCredentials(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetCredentials() throws IOException {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Dictionary<String, Object> properties = new Hashtable<String, Object>();
1:fdf3952:         properties.put("key", "value");
1:fdf3952:         Mockito.when(user1.getCredentials()).thenReturn(properties);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(userAdmin.getRole(Mockito.anyString())).thenReturn(user1);
1:fdf3952:         TabularData data = mbean.getCredentials("user1");
1:fdf3952:         Assert.assertNotNull(data);
1:fdf3952:         Assert.assertEquals(JmxConstants.PROPERTIES_TYPE, data.getTabularType());
1:fdf3952:         CompositeData composite = data.get(new Object[] { "key" });
1:fdf3952:         Assert.assertNotNull(composite);
1:fdf3952:         Assert.assertEquals("key", (String) composite.get(JmxConstants.KEY));
1:fdf3952:         Assert.assertEquals("value", (String) composite.get(JmxConstants.VALUE));
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getGroup(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetGroup() throws IOException {
1:fdf3952:         Group group1 = Mockito.mock(Group.class);
1:fdf3952:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:fdf3952:         Mockito.when(group1.getName()).thenReturn("group1");
1:fdf3952:         Role role1 = Mockito.mock(Role.class);
1:fdf3952:         Mockito.when(role1.getName()).thenReturn("role1");
1:fdf3952:         Role role2 = Mockito.mock(Role.class);
1:fdf3952:         Mockito.when(role2.getName()).thenReturn("role2");
1:fdf3952:         Mockito.when(group1.getRequiredMembers()).thenReturn(new Role[] { role1 });
1:fdf3952:         Mockito.when(group1.getMembers()).thenReturn(new Role[] { role2 });
1:fdf3952:         Mockito.when(userAdmin.getRole(Mockito.anyString())).thenReturn(group1);
1:fdf3952:         CompositeData data = mbean.getGroup("group1");
1:fdf3952:         Assert.assertNotNull(data);
1:fdf3952:         GroupData group = GroupData.from(data);
1:fdf3952:         Assert.assertNotNull(group);
1:fdf3952:         Assert.assertEquals("group1", group.getName());
1:fdf3952:         Assert.assertEquals(Role.GROUP, group.getType());
1:fdf3952:         Assert.assertArrayEquals(new String[] { "role2" }, group.getMembers());
1:fdf3952:         Assert.assertArrayEquals(new String[] { "role1" }, group.getRequiredMembers());
1:fdf3952:         Mockito.verify(userAdmin).getRole(Mockito.anyString());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getGroups(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws Exception
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetGroups() throws Exception {
1:fdf3952:         Group group1 = Mockito.mock(Group.class);
1:fdf3952:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:fdf3952:         Mockito.when(group1.getName()).thenReturn("group1");
1:fdf3952:         Mockito.when(userAdmin.getRoles("name=group1")).thenReturn(new Role[] { group1 });
1:fdf3952:         String[] groups = mbean.getGroups("name=group1");
1:fdf3952:         Assert.assertArrayEquals(new String[] { "group1" }, groups);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getImpliedRoles(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetImpliedRoles() throws IOException {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Authorization auth = Mockito.mock(Authorization.class);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(auth.getRoles()).thenReturn(new String[] { "role1" });
1:fdf3952:         Mockito.when(userAdmin.getRole("role1")).thenReturn(user1);
1:fdf3952:         Mockito.when(userAdmin.getAuthorization(user1)).thenReturn(auth);
1:fdf3952:         String[] roles = mbean.getImpliedRoles("role1");
1:fdf3952:         Assert.assertArrayEquals(new String[] { "role1" }, roles);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getMembers(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetMembers() throws IOException {
1:fdf3952:         Group group1 = Mockito.mock(Group.class);
1:fdf3952:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:fdf3952:         Mockito.when(group1.getName()).thenReturn("group1");
1:fdf3952:         User user1 = Mockito.mock(Group.class);
1:fdf3952:         Mockito.when(user1.getName()).thenReturn("user1");
1:fdf3952:         Mockito.when(group1.getMembers()).thenReturn(new Role[] { user1 });
1:fdf3952:         Mockito.when(userAdmin.getRole("group1")).thenReturn(group1);
1:fdf3952:         String[] members = mbean.getMembers("group1");
1:fdf3952:         Assert.assertArrayEquals(new String[] { "user1" }, members);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getProperties(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetProperties() throws IOException {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Dictionary<String, Object> properties = new Hashtable<String, Object>();
1:fdf3952:         properties.put("key", "value");
1:fdf3952:         Mockito.when(user1.getProperties()).thenReturn(properties);
1:fdf3952:         Mockito.when(userAdmin.getRole(Mockito.anyString())).thenReturn(user1);
1:fdf3952:         TabularData data = mbean.getProperties("user1");
1:fdf3952:         Assert.assertNotNull(data);
1:fdf3952:         Assert.assertEquals(JmxConstants.PROPERTIES_TYPE, data.getTabularType());
1:fdf3952:         CompositeData composite = data.get(new Object[] { "key" });
1:fdf3952:         Assert.assertNotNull(composite);
1:fdf3952:         Assert.assertEquals("key", (String) composite.get(JmxConstants.KEY));
1:fdf3952:         Assert.assertEquals("value", (String) composite.get(JmxConstants.VALUE));
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getRequiredMembers(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetRequiredMembers() throws IOException {
1:fdf3952:         Group group1 = Mockito.mock(Group.class);
1:fdf3952:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:fdf3952:         Mockito.when(group1.getName()).thenReturn("group1");
1:fdf3952:         User user1 = Mockito.mock(Group.class);
1:fdf3952:         Mockito.when(user1.getName()).thenReturn("user1");
1:fdf3952:         Mockito.when(group1.getRequiredMembers()).thenReturn(new Role[] { user1 });
1:fdf3952:         Mockito.when(userAdmin.getRole("group1")).thenReturn(group1);
1:fdf3952:         String[] members = mbean.getRequiredMembers("group1");
1:fdf3952:         Assert.assertArrayEquals(new String[] { "user1" }, members);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getRole(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetRole() throws IOException {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getName()).thenReturn("user1");
1:fdf3952:         Mockito.when(userAdmin.getRole(Mockito.anyString())).thenReturn(user1);
1:fdf3952:         CompositeData data = mbean.getRole("user1");
1:fdf3952:         Assert.assertNotNull(data);
1:fdf3952:         RoleData role = RoleData.from(data);
1:fdf3952:         Assert.assertNotNull(role);
1:fdf3952:         Assert.assertEquals("user1", role.getName());
1:fdf3952:         Assert.assertEquals(Role.USER, role.getType());
1:fdf3952:         Mockito.verify(userAdmin).getRole(Mockito.anyString());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getRoles(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws Exception
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetRoles() throws Exception {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getName()).thenReturn("user1");
1:fdf3952:         Mockito.when(userAdmin.getRoles("name=user1")).thenReturn(new Role[] { user1 });
1:fdf3952:         String[] roles = mbean.getRoles("name=user1");
1:fdf3952:         Assert.assertArrayEquals(new String[] { "user1" }, roles);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getUser(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetUser() throws IOException {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getName()).thenReturn("user1");
1:fdf3952:         Mockito.when(userAdmin.getRole(Mockito.anyString())).thenReturn(user1);
1:fdf3952:         CompositeData data = mbean.getUser("user1");
1:fdf3952:         Assert.assertNotNull(data);
1:fdf3952:         UserData user = UserData.from(data);
1:fdf3952:         Assert.assertNotNull(user);
1:fdf3952:         Assert.assertEquals("user1", user.getName());
1:fdf3952:         Assert.assertEquals(Role.USER, user.getType());
1:fdf3952:         Mockito.verify(userAdmin).getRole(Mockito.anyString());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getUserWithProperty(String, String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetUserString() throws IOException {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getName()).thenReturn("user1");
1:fdf3952:         Mockito.when(userAdmin.getUser("key", "valuetest")).thenReturn(user1);
1:fdf3952:         String username = mbean.getUserWithProperty("key", "valuetest");
1:fdf3952:         Assert.assertEquals(username, "user1");
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getUsers(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws Exception
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testGetUsers() throws Exception {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getName()).thenReturn("user1");
1:fdf3952:         Mockito.when(userAdmin.getRoles("name=user1")).thenReturn(new Role[] { user1 });
1:fdf3952:         String[] roles = mbean.getUsers("name=user1");
1:fdf3952:         Assert.assertArrayEquals(new String[] { "user1" }, roles);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#listGroups()}.
1:fdf3952:      * 
1:fdf3952:      * @throws Exception
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testListGroups() throws Exception {
1:fdf3952:         Group group1 = Mockito.mock(Group.class);
1:fdf3952:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:fdf3952:         Mockito.when(group1.getName()).thenReturn("group1");
1:fdf3952:         Group group2 = Mockito.mock(Group.class);
1:fdf3952:         Mockito.when(group2.getType()).thenReturn(Role.GROUP);
1:fdf3952:         Mockito.when(group2.getName()).thenReturn("group2");
1:fdf3952:         Mockito.when(userAdmin.getRoles(null)).thenReturn(new Role[] { group1, group2 });
1:fdf3952:         String[] groups = mbean.listGroups();
1:fdf3952:         Assert.assertArrayEquals(new String[] { "group1", "group2" }, groups);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#listRoles()}.
1:fdf3952:      * 
1:fdf3952:      * @throws Exception
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testListRoles() throws Exception {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getName()).thenReturn("user1");
1:fdf3952:         User user2 = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(user2.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user2.getName()).thenReturn("user2");
1:fdf3952:         Mockito.when(userAdmin.getRoles(null)).thenReturn(new Role[] { user1, user2 });
1:fdf3952:         String[] roles = mbean.listRoles();
1:fdf3952:         Assert.assertArrayEquals(new String[] { "user1", "user2" }, roles);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#listUsers()}.
1:fdf3952:      * 
1:fdf3952:      * @throws Exception
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testListUsers() throws Exception {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getName()).thenReturn("user1");
1:fdf3952:         User user2 = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(user2.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user2.getName()).thenReturn("user2");
1:fdf3952:         Mockito.when(userAdmin.getRoles(null)).thenReturn(new Role[] { user1, user2 });
1:fdf3952:         String[] roles = mbean.listUsers();
1:fdf3952:         Assert.assertArrayEquals(new String[] { "user1", "user2" }, roles);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for
1:fdf3952:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#removeCredential(java.lang.String, java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testRemoveCredential() throws IOException {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Dictionary<String, Object> cred = new Hashtable<String, Object>();
1:fdf3952:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getCredentials()).thenReturn(cred);
1:fdf3952:         mbean.removeCredential("key", "user1");
1:fdf3952:         Assert.assertEquals(0, cred.size());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#removeGroup(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testRemoveGroup() throws IOException {
1:fdf3952:         Mockito.when(userAdmin.removeRole("group1")).thenReturn(true);
1:fdf3952:         boolean isRemoved = mbean.removeGroup("group1");
1:fdf3952:         Assert.assertTrue(isRemoved);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#removeMember(java.lang.String, java.lang.String)}
1:fdf3952:      * .
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testRemoveMember() throws IOException {
1:fdf3952:         Group group1 = Mockito.mock(Group.class);
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Mockito.when(userAdmin.getRole("group1")).thenReturn(group1);
1:fdf3952:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:fdf3952:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:fdf3952:         Mockito.when(group1.removeMember(user1)).thenReturn(true);
1:fdf3952:         boolean isAdded = mbean.removeMember("group1", "user1");
1:fdf3952:         Assert.assertTrue(isAdded);
1:fdf3952:         Mockito.verify(group1).removeMember(user1);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for
1:fdf3952:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#removeProperty(java.lang.String, java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testRemoveProperty() throws IOException {
1:fdf3952:         User user1 = Mockito.mock(User.class);
1:fdf3952:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:fdf3952:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:fdf3952:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:fdf3952:         Mockito.when(user1.getProperties()).thenReturn(props);
1:fdf3952:         mbean.removeProperty("key", "user1");
1:fdf3952:         Assert.assertEquals(0, props.size());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#removeRole(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testRemoveRole() throws IOException {
1:fdf3952:         Mockito.when(userAdmin.removeRole("role1")).thenReturn(true);
1:fdf3952:         boolean isRemoved = mbean.removeRole("role1");
1:fdf3952:         Assert.assertTrue(isRemoved);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#removeUser(java.lang.String)}.
1:fdf3952:      * 
1:fdf3952:      * @throws IOException
1:fdf3952:      */
1:fdf3952:     @Test
1:fdf3952:     public void testRemoveUser() throws IOException {
1:fdf3952:         Mockito.when(userAdmin.removeRole("user1")).thenReturn(true);
1:fdf3952:         boolean isRemoved = mbean.removeUser("user1");
1:fdf3952:         Assert.assertTrue(isRemoved);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.useradmin;
1: 
1: import java.io.IOException;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
1: 
1: import org.apache.aries.jmx.codec.AuthorizationData;
1: import org.apache.aries.jmx.codec.GroupData;
1: import org.apache.aries.jmx.codec.RoleData;
1: import org.apache.aries.jmx.codec.UserData;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.mockito.Mock;
1: import org.mockito.Mockito;
1: import org.mockito.MockitoAnnotations;
1: import org.osgi.jmx.JmxConstants;
1: import org.osgi.service.useradmin.Authorization;
1: import org.osgi.service.useradmin.Group;
1: import org.osgi.service.useradmin.Role;
1: import org.osgi.service.useradmin.User;
1: 
1: /**
1:  * UserAdminMBean test case.
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class UserAdminTest {
1: 
1:     @Mock
1:     private org.osgi.service.useradmin.UserAdmin userAdmin;
1:     private UserAdmin mbean;
1: 
1:     /**
1:      * @throws java.lang.Exception
1:      */
1:     @Before
1:     public void setUp() throws Exception {
1:         MockitoAnnotations.initMocks(this);
1:         mbean = new UserAdmin(userAdmin);
1:     }
1: 
1:     /**
1:      * Test method for
1:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#addCredential(java.lang.String, byte[], java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testAddCredential() throws IOException {
1:         User user1 = Mockito.mock(User.class);
1:         Dictionary<String, Object> credentials = new Hashtable<String, Object>();
1:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getCredentials()).thenReturn(credentials);
1:         mbean.addCredential("password", new byte[] { 1, 2 }, "user1");
1:         Assert.assertArrayEquals(new byte[] { 1, 2 }, (byte[]) credentials.get("password"));
1: 
1:     }
1: 
1:     /**
1:      * Test method for
1:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#addCredentialString(String, String, String)}
1:      * .
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testAddCredentialString() throws IOException {
1:         User user1 = Mockito.mock(User.class);
1:         Dictionary<String, Object> credentials = new Hashtable<String, Object>();
1:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getCredentials()).thenReturn(credentials);
1:         mbean.addCredentialString("password", "1234", "user1");
1:         Assert.assertEquals("1234", (String) credentials.get("password"));
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#addMember(java.lang.String, java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testAddMember() throws IOException {
1:         Group group1 = Mockito.mock(Group.class);
1:         User user1 = Mockito.mock(User.class);
1:         Mockito.when(userAdmin.getRole("group1")).thenReturn(group1);
1:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:         Mockito.when(group1.addMember(user1)).thenReturn(true);
1:         boolean isAdded = mbean.addMember("group1", "user1");
1:         Assert.assertTrue(isAdded);
1:         Mockito.verify(group1).addMember(user1);
1:     }
1: 
1:     /**
1:      * Test method for
1:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#addPropertyString(String, String, String)}
1:      * .
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testAddPropertyString() throws IOException {
1:         User user1 = Mockito.mock(User.class);
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getProperties()).thenReturn(props);
1:         mbean.addPropertyString("key", "1234", "user1");
1:         Assert.assertEquals("1234", (String) props.get("key"));
1:     }
1: 
1:     /**
1:      * Test method for
1:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#addProperty(java.lang.String, byte[], java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testAddProperty() throws IOException {
1:         User user1 = Mockito.mock(User.class);
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getProperties()).thenReturn(props);
1:         mbean.addProperty("key", new byte[] { 1, 2 }, "user1");
1:         Assert.assertArrayEquals(new byte[] { 1, 2 }, (byte[]) props.get("key"));
1:     }
1: 
1:     /**
1:      * Test method for
1:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#addRequiredMember(java.lang.String, java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testAddRequiredMember() throws IOException {
1:         Group group1 = Mockito.mock(Group.class);
1:         User user1 = Mockito.mock(User.class);
1:         Mockito.when(userAdmin.getRole("group1")).thenReturn(group1);
1:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:         Mockito.when(group1.addRequiredMember(user1)).thenReturn(true);
1:         boolean isAdded = mbean.addRequiredMember("group1", "user1");
1:         Assert.assertTrue(isAdded);
1:         Mockito.verify(group1).addRequiredMember(user1);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#createGroup(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testCreateGroup() throws IOException {
1:         mbean.createGroup("group1");
1:         Mockito.verify(userAdmin).createRole("group1", Role.GROUP);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#createRole(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testCreateRole() throws IOException {
1:         try {
1:             mbean.createRole("role1");
1:             Assert.fail("Function did not throw exception as expected");
1:         } catch (IOException e) {
1:             // expected
1:         }
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#createUser(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testCreateUser() throws IOException {
1:         mbean.createUser("user1");
1:         Mockito.verify(userAdmin).createRole("user1", Role.USER);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getAuthorization(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testGetAuthorization() throws IOException {
1:         Authorization auth = Mockito.mock(Authorization.class);
1:         User user = Mockito.mock(User.class);
1:         Mockito.when(user.getType()).thenReturn(Role.USER);
1:         Mockito.when(userAdmin.getAuthorization(user)).thenReturn(auth);
1:         Mockito.when(userAdmin.getRole("role1")).thenReturn(user);
1:         Mockito.when(auth.getName()).thenReturn("auth1");
1:         Mockito.when(auth.getRoles()).thenReturn(new String[]{"role1"});
1:         CompositeData data = mbean.getAuthorization("role1");
1:         Assert.assertNotNull(data);
1:         AuthorizationData authData = AuthorizationData.from(data);
1:         Assert.assertNotNull(authData);
1:         Assert.assertEquals("auth1", authData.getName());
1:         Assert.assertArrayEquals(new String[] { "role1" }, authData.getRoles());
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getCredentials(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testGetCredentials() throws IOException {
1:         User user1 = Mockito.mock(User.class);
1:         Dictionary<String, Object> properties = new Hashtable<String, Object>();
1:         properties.put("key", "value");
1:         Mockito.when(user1.getCredentials()).thenReturn(properties);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(userAdmin.getRole(Mockito.anyString())).thenReturn(user1);
1:         TabularData data = mbean.getCredentials("user1");
1:         Assert.assertNotNull(data);
1:         Assert.assertEquals(JmxConstants.PROPERTIES_TYPE, data.getTabularType());
1:         CompositeData composite = data.get(new Object[] { "key" });
1:         Assert.assertNotNull(composite);
1:         Assert.assertEquals("key", (String) composite.get(JmxConstants.KEY));
1:         Assert.assertEquals("value", (String) composite.get(JmxConstants.VALUE));
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getGroup(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testGetGroup() throws IOException {
1:         Group group1 = Mockito.mock(Group.class);
1:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:         Mockito.when(group1.getName()).thenReturn("group1");
1:         Role role1 = Mockito.mock(Role.class);
1:         Mockito.when(role1.getName()).thenReturn("role1");
1:         Role role2 = Mockito.mock(Role.class);
1:         Mockito.when(role2.getName()).thenReturn("role2");
1:         Mockito.when(group1.getRequiredMembers()).thenReturn(new Role[] { role1 });
1:         Mockito.when(group1.getMembers()).thenReturn(new Role[] { role2 });
1:         Mockito.when(userAdmin.getRole(Mockito.anyString())).thenReturn(group1);
1:         CompositeData data = mbean.getGroup("group1");
1:         Assert.assertNotNull(data);
1:         GroupData group = GroupData.from(data);
1:         Assert.assertNotNull(group);
1:         Assert.assertEquals("group1", group.getName());
1:         Assert.assertEquals(Role.GROUP, group.getType());
1:         Assert.assertArrayEquals(new String[] { "role2" }, group.getMembers());
1:         Assert.assertArrayEquals(new String[] { "role1" }, group.getRequiredMembers());
1:         Mockito.verify(userAdmin).getRole(Mockito.anyString());
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getGroups(java.lang.String)}.
1:      * 
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testGetGroups() throws Exception {
1:         Group group1 = Mockito.mock(Group.class);
1:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:         Mockito.when(group1.getName()).thenReturn("group1");
1:         Mockito.when(userAdmin.getRoles("name=group1")).thenReturn(new Role[] { group1 });
1:         String[] groups = mbean.getGroups("name=group1");
1:         Assert.assertArrayEquals(new String[] { "group1" }, groups);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getImpliedRoles(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testGetImpliedRoles() throws IOException {
1:         User user1 = Mockito.mock(User.class);
1:         Authorization auth = Mockito.mock(Authorization.class);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(auth.getRoles()).thenReturn(new String[] { "role1" });
1:         Mockito.when(userAdmin.getRole("role1")).thenReturn(user1);
1:         Mockito.when(userAdmin.getAuthorization(user1)).thenReturn(auth);
1:         String[] roles = mbean.getImpliedRoles("role1");
1:         Assert.assertArrayEquals(new String[] { "role1" }, roles);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getMembers(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testGetMembers() throws IOException {
1:         Group group1 = Mockito.mock(Group.class);
1:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:         Mockito.when(group1.getName()).thenReturn("group1");
1:         User user1 = Mockito.mock(Group.class);
1:         Mockito.when(user1.getName()).thenReturn("user1");
1:         Mockito.when(group1.getMembers()).thenReturn(new Role[] { user1 });
1:         Mockito.when(userAdmin.getRole("group1")).thenReturn(group1);
1:         String[] members = mbean.getMembers("group1");
1:         Assert.assertArrayEquals(new String[] { "user1" }, members);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getProperties(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testGetProperties() throws IOException {
1:         User user1 = Mockito.mock(User.class);
1:         Dictionary<String, Object> properties = new Hashtable<String, Object>();
1:         properties.put("key", "value");
1:         Mockito.when(user1.getProperties()).thenReturn(properties);
1:         Mockito.when(userAdmin.getRole(Mockito.anyString())).thenReturn(user1);
1:         TabularData data = mbean.getProperties("user1");
1:         Assert.assertNotNull(data);
1:         Assert.assertEquals(JmxConstants.PROPERTIES_TYPE, data.getTabularType());
1:         CompositeData composite = data.get(new Object[] { "key" });
1:         Assert.assertNotNull(composite);
1:         Assert.assertEquals("key", (String) composite.get(JmxConstants.KEY));
1:         Assert.assertEquals("value", (String) composite.get(JmxConstants.VALUE));
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getRequiredMembers(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testGetRequiredMembers() throws IOException {
1:         Group group1 = Mockito.mock(Group.class);
1:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:         Mockito.when(group1.getName()).thenReturn("group1");
1:         User user1 = Mockito.mock(Group.class);
1:         Mockito.when(user1.getName()).thenReturn("user1");
1:         Mockito.when(group1.getRequiredMembers()).thenReturn(new Role[] { user1 });
1:         Mockito.when(userAdmin.getRole("group1")).thenReturn(group1);
1:         String[] members = mbean.getRequiredMembers("group1");
1:         Assert.assertArrayEquals(new String[] { "user1" }, members);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getRole(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testGetRole() throws IOException {
1:         User user1 = Mockito.mock(User.class);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getName()).thenReturn("user1");
1:         Mockito.when(userAdmin.getRole(Mockito.anyString())).thenReturn(user1);
1:         CompositeData data = mbean.getRole("user1");
1:         Assert.assertNotNull(data);
1:         RoleData role = RoleData.from(data);
1:         Assert.assertNotNull(role);
1:         Assert.assertEquals("user1", role.getName());
1:         Assert.assertEquals(Role.USER, role.getType());
1:         Mockito.verify(userAdmin).getRole(Mockito.anyString());
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getRoles(java.lang.String)}.
1:      * 
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testGetRoles() throws Exception {
1:         User user1 = Mockito.mock(User.class);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getName()).thenReturn("user1");
1:         Mockito.when(userAdmin.getRoles("name=user1")).thenReturn(new Role[] { user1 });
1:         String[] roles = mbean.getRoles("name=user1");
1:         Assert.assertArrayEquals(new String[] { "user1" }, roles);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getUser(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testGetUser() throws IOException {
1:         User user1 = Mockito.mock(User.class);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getName()).thenReturn("user1");
1:         Mockito.when(userAdmin.getRole(Mockito.anyString())).thenReturn(user1);
1:         CompositeData data = mbean.getUser("user1");
1:         Assert.assertNotNull(data);
1:         UserData user = UserData.from(data);
1:         Assert.assertNotNull(user);
1:         Assert.assertEquals("user1", user.getName());
1:         Assert.assertEquals(Role.USER, user.getType());
1:         Mockito.verify(userAdmin).getRole(Mockito.anyString());
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getUserWithProperty(String, String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testGetUserString() throws IOException {
1:         User user1 = Mockito.mock(User.class);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getName()).thenReturn("user1");
1:         Mockito.when(userAdmin.getUser("key", "valuetest")).thenReturn(user1);
1:         String username = mbean.getUserWithProperty("key", "valuetest");
1:         Assert.assertEquals(username, "user1");
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#getUsers(java.lang.String)}.
1:      * 
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testGetUsers() throws Exception {
1:         User user1 = Mockito.mock(User.class);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getName()).thenReturn("user1");
1:         Mockito.when(userAdmin.getRoles("name=user1")).thenReturn(new Role[] { user1 });
1:         String[] roles = mbean.getUsers("name=user1");
1:         Assert.assertArrayEquals(new String[] { "user1" }, roles);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#listGroups()}.
1:      * 
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testListGroups() throws Exception {
1:         Group group1 = Mockito.mock(Group.class);
1:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:         Mockito.when(group1.getName()).thenReturn("group1");
1:         Group group2 = Mockito.mock(Group.class);
1:         Mockito.when(group2.getType()).thenReturn(Role.GROUP);
1:         Mockito.when(group2.getName()).thenReturn("group2");
1:         Mockito.when(userAdmin.getRoles(null)).thenReturn(new Role[] { group1, group2 });
1:         String[] groups = mbean.listGroups();
1:         Assert.assertArrayEquals(new String[] { "group1", "group2" }, groups);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#listRoles()}.
1:      * 
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testListRoles() throws Exception {
1:         User user1 = Mockito.mock(User.class);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getName()).thenReturn("user1");
1:         User user2 = Mockito.mock(User.class);
1:         Mockito.when(user2.getType()).thenReturn(Role.USER);
1:         Mockito.when(user2.getName()).thenReturn("user2");
1:         Mockito.when(userAdmin.getRoles(null)).thenReturn(new Role[] { user1, user2 });
1:         String[] roles = mbean.listRoles();
1:         Assert.assertArrayEquals(new String[] { "user1", "user2" }, roles);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#listUsers()}.
1:      * 
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testListUsers() throws Exception {
1:         User user1 = Mockito.mock(User.class);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getName()).thenReturn("user1");
1:         User user2 = Mockito.mock(User.class);
1:         Mockito.when(user2.getType()).thenReturn(Role.USER);
1:         Mockito.when(user2.getName()).thenReturn("user2");
1:         Mockito.when(userAdmin.getRoles(null)).thenReturn(new Role[] { user1, user2 });
1:         String[] roles = mbean.listUsers();
1:         Assert.assertArrayEquals(new String[] { "user1", "user2" }, roles);
1:     }
1: 
1:     /**
1:      * Test method for
1:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#removeCredential(java.lang.String, java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testRemoveCredential() throws IOException {
1:         User user1 = Mockito.mock(User.class);
1:         Dictionary<String, Object> cred = new Hashtable<String, Object>();
1:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getCredentials()).thenReturn(cred);
1:         mbean.removeCredential("key", "user1");
1:         Assert.assertEquals(0, cred.size());
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#removeGroup(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testRemoveGroup() throws IOException {
1:         Mockito.when(userAdmin.removeRole("group1")).thenReturn(true);
1:         boolean isRemoved = mbean.removeGroup("group1");
1:         Assert.assertTrue(isRemoved);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#removeMember(java.lang.String, java.lang.String)}
1:      * .
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testRemoveMember() throws IOException {
1:         Group group1 = Mockito.mock(Group.class);
1:         User user1 = Mockito.mock(User.class);
1:         Mockito.when(userAdmin.getRole("group1")).thenReturn(group1);
1:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:         Mockito.when(group1.getType()).thenReturn(Role.GROUP);
1:         Mockito.when(group1.removeMember(user1)).thenReturn(true);
1:         boolean isAdded = mbean.removeMember("group1", "user1");
1:         Assert.assertTrue(isAdded);
1:         Mockito.verify(group1).removeMember(user1);
1:     }
1: 
1:     /**
1:      * Test method for
1:      * {@link org.apache.aries.jmx.useradmin.UserAdmin#removeProperty(java.lang.String, java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testRemoveProperty() throws IOException {
1:         User user1 = Mockito.mock(User.class);
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         Mockito.when(userAdmin.getRole("user1")).thenReturn(user1);
1:         Mockito.when(user1.getType()).thenReturn(Role.USER);
1:         Mockito.when(user1.getProperties()).thenReturn(props);
1:         mbean.removeProperty("key", "user1");
1:         Assert.assertEquals(0, props.size());
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#removeRole(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testRemoveRole() throws IOException {
1:         Mockito.when(userAdmin.removeRole("role1")).thenReturn(true);
1:         boolean isRemoved = mbean.removeRole("role1");
1:         Assert.assertTrue(isRemoved);
1:     }
1: 
1:     /**
1:      * Test method for {@link org.apache.aries.jmx.useradmin.UserAdmin#removeUser(java.lang.String)}.
1:      * 
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testRemoveUser() throws IOException {
1:         Mockito.when(userAdmin.removeRole("user1")).thenReturn(true);
1:         boolean isRemoved = mbean.removeUser("user1");
1:         Assert.assertTrue(isRemoved);
1:     }
1: 
1: }
============================================================================