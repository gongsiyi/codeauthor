1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.compendium.cm;
1:f13c6ac: 
1:f13c6ac: import java.util.Dictionary;
1:f13c6ac: import java.util.HashSet;
1:f13c6ac: import java.util.Properties;
1:f13c6ac: import java.util.Set;
1:f13c6ac: 
1:09a7647: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1:6414875: import org.apache.aries.blueprint.ServiceProcessor;
1:6414875: import org.apache.aries.blueprint.utils.JavaUtils;
1:f13c6ac: import org.osgi.framework.Bundle;
1:f13c6ac: import org.osgi.framework.Constants;
1:f13c6ac: import org.osgi.service.cm.Configuration;
1:f13c6ac: import org.osgi.service.cm.ConfigurationAdmin;
1:f13c6ac: import org.slf4j.Logger;
1:f13c6ac: import org.slf4j.LoggerFactory;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public class CmProperties implements ManagedObject, ServiceProcessor {
1:f13c6ac: 
1:f13c6ac:     private static final Logger LOGGER = LoggerFactory.getLogger(CmProperties.class);
1:f13c6ac: 
1:f13c6ac:     private ExtendedBlueprintContainer blueprintContainer;
1:f13c6ac:     private ConfigurationAdmin configAdmin;
1:f13c6ac:     private ManagedObjectManager managedObjectManager;
1:f13c6ac:     private String persistentId;
1:f13c6ac:     private boolean update;
1:f13c6ac:     private String serviceId;
1:f13c6ac: 
1:f13c6ac:     private final Object lock = new Object();
1:f13c6ac:     private final Set<ServicePropertiesUpdater> services = new HashSet<ServicePropertiesUpdater>();
1:7fc0de1:     private final Properties properties = new Properties();
1:1591a51:     private boolean initialized;
1:f13c6ac: 
1:f13c6ac:     public ExtendedBlueprintContainer getBlueprintContainer() {
1:f13c6ac:         return blueprintContainer;
3:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setBlueprintContainer(ExtendedBlueprintContainer blueprintContainer) {
1:f13c6ac:         this.blueprintContainer = blueprintContainer;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public ConfigurationAdmin getConfigAdmin() {
1:f13c6ac:         return configAdmin;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setConfigAdmin(ConfigurationAdmin configAdmin) {
1:f13c6ac:         this.configAdmin = configAdmin;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setManagedObjectManager(ManagedObjectManager managedObjectManager) {
1:f13c6ac:         this.managedObjectManager = managedObjectManager;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public ManagedObjectManager getManagedObjectManager() {
1:f13c6ac:         return managedObjectManager;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public Bundle getBundle() {
1:f13c6ac:         return blueprintContainer.getBundleContext().getBundle();
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public String getPersistentId() {
1:f13c6ac:         return persistentId;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setPersistentId(String persistentId) {
1:f13c6ac:         this.persistentId = persistentId;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public boolean getUpdate() {
1:f13c6ac:         return update;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setUpdate(boolean update) {
1:f13c6ac:         this.update = update;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getServiceId() {
1:f13c6ac:         return serviceId;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setServiceId(String serviceId) {
1:f13c6ac:         this.serviceId = serviceId;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void init() throws Exception {
1:7fc0de1:         if (serviceId != null) {
1:7fc0de1:             LOGGER.debug("Initializing CmProperties for service={} / pid={}", serviceId, persistentId);
1:7fc0de1:         } else {
1:7fc0de1:             LOGGER.debug("Initializing CmProperties for pid={}", persistentId);
1:7fc0de1:         }
1:f13c6ac:         
1:f13c6ac:         Properties props = new Properties();
1:f13c6ac:         props.put(Constants.SERVICE_PID, persistentId);
1:f13c6ac:         Bundle bundle = blueprintContainer.getBundleContext().getBundle();
1:f13c6ac:         props.put(Constants.BUNDLE_SYMBOLICNAME, bundle.getSymbolicName());
1:f13c6ac:         props.put(Constants.BUNDLE_VERSION, bundle.getHeaders().get(Constants.BUNDLE_VERSION));
1:f13c6ac:                 
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             managedObjectManager.register(this, props);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void destroy() {
1:f13c6ac:         managedObjectManager.unregister(this);
1:f13c6ac:     }
1:f13c6ac: 
1:7fc0de1:     public Properties getProperties() {
1:7fc0de1:         return properties;
1:7fc0de1:     }
1:7fc0de1: 
1:f13c6ac:     public void updated(Dictionary props) {
1:1591a51:         if (initialized) {
1:1591a51:             if (serviceId != null) {
1:1591a51:                 LOGGER.debug("Service properties updated for service={} / pid={}, {}", new Object[]{serviceId, persistentId, props});
1:1591a51:             } else {
1:1591a51:                 LOGGER.debug("Service properties updated for pid={}, {}", new Object[]{persistentId, props});
1:1591a51:             }
1:7fc0de1:         }
1:f13c6ac:         
1:f13c6ac:         synchronized (lock) {
1:7fc0de1:             properties.clear();
1:7fc0de1:             if (props != null) {
1:7fc0de1:                 JavaUtils.copy(properties, props);
1:7fc0de1:             }
1:1591a51:             if (!initialized) {
1:1591a51:                 initialized = true;
1:1591a51:             } else if (update) {
1:f13c6ac:                 for (ServicePropertiesUpdater service : services) {
1:f13c6ac:                     service.updateProperties(props);
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void updateProperties(ServicePropertiesUpdater service, Dictionary props) {
1:7fc0de1:         if (this.serviceId == null || !this.serviceId.equals(service.getId())) {
1:f13c6ac:             return;
1:f13c6ac:         }
1:f13c6ac:                 
1:f13c6ac:         LOGGER.debug("Service properties initialized for service={} / pid={}, {}", new Object[] {serviceId, persistentId, props});
1:f13c6ac:         
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             services.add(service);
1:1591a51:             JavaUtils.copy(props, properties);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1591a51
/////////////////////////////////////////////////////////////////////////
1:     private boolean initialized;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (initialized) {
1:             if (serviceId != null) {
1:                 LOGGER.debug("Service properties updated for service={} / pid={}, {}", new Object[]{serviceId, persistentId, props});
1:             } else {
1:                 LOGGER.debug("Service properties updated for pid={}, {}", new Object[]{persistentId, props});
1:             }
/////////////////////////////////////////////////////////////////////////
1:             if (!initialized) {
1:                 initialized = true;
1:             } else if (update) {
/////////////////////////////////////////////////////////////////////////
1:             JavaUtils.copy(props, properties);
commit:7fc0de1
/////////////////////////////////////////////////////////////////////////
1:     private final Properties properties = new Properties();
/////////////////////////////////////////////////////////////////////////
1:         if (serviceId != null) {
1:             LOGGER.debug("Initializing CmProperties for service={} / pid={}", serviceId, persistentId);
1:         } else {
1:             LOGGER.debug("Initializing CmProperties for pid={}", persistentId);
1:         }
/////////////////////////////////////////////////////////////////////////
1:                 properties.clear();
0:                 JavaUtils.copy(properties, config.getProperties());
/////////////////////////////////////////////////////////////////////////
1:     public Properties getProperties() {
1:         return properties;
1:     }
1: 
0:         if (serviceId != null) {
0:             LOGGER.debug("Service properties updated for service={} / pid={}, {}", new Object[] {serviceId, persistentId, props});
0:         } else {
0:             LOGGER.debug("Service properties updated for pid={}, {}", new Object[] {persistentId, props});
1:         }
0:             properties.clear();
1:             if (props != null) {
1:                 JavaUtils.copy(properties, props);
1:             }
/////////////////////////////////////////////////////////////////////////
1:         if (this.serviceId == null || !this.serviceId.equals(service.getId())) {
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.compendium.cm;
1: 
1: import java.util.Dictionary;
1: import java.util.HashSet;
1: import java.util.Properties;
1: import java.util.Set;
1: 
0: import org.apache.geronimo.blueprint.ExtendedBlueprintContainer;
0: import org.apache.geronimo.blueprint.ServiceProcessor;
0: import org.apache.geronimo.blueprint.utils.JavaUtils;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
1:  * @version $Rev$, $Date$
1:  */
1: public class CmProperties implements ManagedObject, ServiceProcessor {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(CmProperties.class);
1: 
1:     private ExtendedBlueprintContainer blueprintContainer;
1:     private ConfigurationAdmin configAdmin;
1:     private ManagedObjectManager managedObjectManager;
1:     private String persistentId;
1:     private boolean update;
1:     private String serviceId;
1: 
1:     private final Object lock = new Object();
1:     private final Set<ServicePropertiesUpdater> services = new HashSet<ServicePropertiesUpdater>();
0:     private Dictionary<String,Object> properties;
1: 
1:     public ExtendedBlueprintContainer getBlueprintContainer() {
1:         return blueprintContainer;
1:     }
1: 
1:     public void setBlueprintContainer(ExtendedBlueprintContainer blueprintContainer) {
1:         this.blueprintContainer = blueprintContainer;
1:     }
1: 
1:     public ConfigurationAdmin getConfigAdmin() {
1:         return configAdmin;
1:     }
1: 
1:     public void setConfigAdmin(ConfigurationAdmin configAdmin) {
1:         this.configAdmin = configAdmin;
1:     }
1: 
1:     public void setManagedObjectManager(ManagedObjectManager managedObjectManager) {
1:         this.managedObjectManager = managedObjectManager;
1:     }
1:     
1:     public ManagedObjectManager getManagedObjectManager() {
1:         return managedObjectManager;
1:     }
1:     
1:     public Bundle getBundle() {
1:         return blueprintContainer.getBundleContext().getBundle();
1:     }
1:     
1:     public String getPersistentId() {
1:         return persistentId;
1:     }
1: 
1:     public void setPersistentId(String persistentId) {
1:         this.persistentId = persistentId;
1:     }
1: 
1:     public boolean getUpdate() {
1:         return update;
1:     }
1: 
1:     public void setUpdate(boolean update) {
1:         this.update = update;
1:     }
1: 
1:     public String getServiceId() {
1:         return serviceId;
1:     }
1: 
1:     public void setServiceId(String serviceId) {
1:         this.serviceId = serviceId;
1:     }
1:     
1:     public void init() throws Exception {
0:         LOGGER.debug("Initializing CmProperties for service={} / pid={}", serviceId, persistentId);
1:         
1:         Properties props = new Properties();
1:         props.put(Constants.SERVICE_PID, persistentId);
1:         Bundle bundle = blueprintContainer.getBundleContext().getBundle();
1:         props.put(Constants.BUNDLE_SYMBOLICNAME, bundle.getSymbolicName());
1:         props.put(Constants.BUNDLE_VERSION, bundle.getHeaders().get(Constants.BUNDLE_VERSION));
1:                 
1:         synchronized (lock) {
1:             managedObjectManager.register(this, props);
0:             Configuration config = CmUtils.getConfiguration(configAdmin, persistentId);
0:             if (config != null) {
0:                 properties = config.getProperties();
1:             }
1:         }
1:     }
1: 
1:     public void destroy() {
1:         managedObjectManager.unregister(this);
1:     }
1: 
1:     public void updated(Dictionary props) {
0:         LOGGER.debug("Service properties updated for service={} / pid={}, {}", new Object[] {serviceId, persistentId, props});
1:         
1:         synchronized (lock) {
0:             this.properties = props;
0:             if (update) {
1:                 for (ServicePropertiesUpdater service : services) {
1:                     service.updateProperties(props);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public void updateProperties(ServicePropertiesUpdater service, Dictionary props) {
0:         if (!this.serviceId.equals(service.getId())) {
1:             return;
1:         }
1:                 
1:         LOGGER.debug("Service properties initialized for service={} / pid={}, {}", new Object[] {serviceId, persistentId, props});
1:         
1:         synchronized (lock) {
1:             services.add(service);
0:             if (properties != null) {
0:                 JavaUtils.copy(props, properties);
1:             }
1:         }
1:     }
1: 
1: }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.compendium.cm;
0: import org.apache.aries.blueprint.ExtendedBlueprintContainer;
1: import org.apache.aries.blueprint.ServiceProcessor;
1: import org.apache.aries.blueprint.utils.JavaUtils;
============================================================================