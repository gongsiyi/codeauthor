1:eb715ea: /**
1:eb715ea:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:eb715ea:  *  contributor license agreements.  See the NOTICE file distributed with
1:eb715ea:  *  this work for additional information regarding copyright ownership.
1:eb715ea:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:eb715ea:  *  (the "License"); you may not use this file except in compliance with
1:eb715ea:  *  the License.  You may obtain a copy of the License at
1:eb715ea:  *
1:eb715ea:  *     http://www.apache.org/licenses/LICENSE-2.0
1:eb715ea:  *
1:eb715ea:  *  Unless required by applicable law or agreed to in writing, software
1:eb715ea:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:eb715ea:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eb715ea:  *  See the License for the specific language governing permissions and
1:eb715ea:  *  limitations under the License.
1:eb715ea:  */
1:1f8e5bb: package org.apache.aries.samples.ariestrader.persist.jpa.cm;
3:eb715ea: 
1:eb715ea: import java.math.BigDecimal;
1:eb715ea: import java.sql.Timestamp;
1:eb715ea: import java.util.ArrayList;
1:eb715ea: import java.util.Collection;
1:eb715ea: import java.util.Iterator;
1:eb715ea: 
1:eb715ea: import javax.persistence.EntityManager;
1:eb715ea: import javax.persistence.Query;
1:eb715ea: 
1:eb715ea: import org.apache.aries.samples.ariestrader.api.TradeServices;
1:3364e3f: import org.apache.aries.samples.ariestrader.entities.AccountDataBeanImpl;
1:3364e3f: import org.apache.aries.samples.ariestrader.entities.AccountProfileDataBeanImpl;
1:3364e3f: import org.apache.aries.samples.ariestrader.entities.HoldingDataBeanImpl;
1:3364e3f: import org.apache.aries.samples.ariestrader.entities.OrderDataBeanImpl;
1:3364e3f: import org.apache.aries.samples.ariestrader.entities.QuoteDataBeanImpl;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.AccountProfileDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.MarketSummaryDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.OrderDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
1:eb715ea: import org.apache.aries.samples.ariestrader.util.FinancialUtils;
1:eb715ea: import org.apache.aries.samples.ariestrader.util.Log;
1:eb715ea: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:eb715ea: 
1:eb715ea: /**
1:eb715ea:  * TradeJpaCm uses JPA via Container Managed (CM) Entity
1:eb715ea:  * Managers to implement the business methods of the Trade
1:eb715ea:  * online broker application. These business methods represent
1:eb715ea:  * the features and operations that can be performed by
1:eb715ea:  * customers of the brokerage such as login, logout, get a stock
1:eb715ea:  * quote, buy or sell a stock, etc. and are specified in the
1:eb715ea:  * {@link org.apache.aries.samples.ariestrader.TradeServices}
1:eb715ea:  * interface
1:eb715ea:  * 
1:eb715ea:  * @see org.apache.aries.samples.ariestrader.TradeServices
1:eb715ea:  * 
1:eb715ea:  */
1:eb715ea: 
1:eb715ea: public class TradeJpaCm implements TradeServices {
1:eb715ea: 
1:eb715ea:     private EntityManager entityManager;
1:eb715ea: 
1:eb715ea:     private static boolean initialized = false;
1:eb715ea: 
1:eb715ea: //    @PersistenceContext(unitName="ariestrader-cm")
1:eb715ea:     public void setEntityManager (EntityManager em) { 
1:eb715ea:         entityManager = em;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     /**
1:eb715ea:      * Zero arg constructor for TradeJpaCm
1:eb715ea:      */
1:eb715ea:     public TradeJpaCm() {
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public void init() {
1:eb715ea:         if (initialized)
1:eb715ea:             return;
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:init -- *** initializing");
1:eb715ea: 
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:init -- +++ initialized");
1:eb715ea: 
1:eb715ea:         initialized = true;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public void destroy() {
1:eb715ea:         try {
1:eb715ea:             if (!initialized)
1:eb715ea:                 return;
1:eb715ea:             Log.trace("TradeJpaCm:destroy");
1:eb715ea:         }
1:eb715ea:         catch (Exception e) {
1:eb715ea:             Log.error("TradeJpaCm:destroy", e);
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public MarketSummaryDataBean getMarketSummary() {
1:eb715ea:         MarketSummaryDataBean marketSummaryData;
1:eb715ea: 
1:eb715ea:         try {
1:eb715ea:             if (Log.doTrace())
1:eb715ea:                 Log.trace("TradeJpaCm:getMarketSummary -- getting market summary");
1:eb715ea: 
1:eb715ea:             // Find Trade Stock Index Quotes (Top 100 quotes)
1:eb715ea:             // ordered by their change in value
1:eb715ea:             Collection<QuoteDataBean> quotes;
1:eb715ea: 
1:eb715ea:             Query query = entityManager.createNamedQuery("quoteejb.quotesByChange");
1:eb715ea:             quotes = query.getResultList();
1:eb715ea: 
1:eb715ea:             QuoteDataBean[] quoteArray = (QuoteDataBean[]) quotes.toArray(new QuoteDataBean[quotes.size()]);
1:eb715ea:             ArrayList<QuoteDataBean> topGainers = new ArrayList<QuoteDataBean>(
1:eb715ea:                                                                               5);
1:eb715ea:             ArrayList<QuoteDataBean> topLosers = new ArrayList<QuoteDataBean>(5);
1:eb715ea:             BigDecimal TSIA = FinancialUtils.ZERO;
1:eb715ea:             BigDecimal openTSIA = FinancialUtils.ZERO;
1:eb715ea:             double totalVolume = 0.0;
1:eb715ea: 
1:eb715ea:             if (quoteArray.length > 5) {
1:eb715ea:                 for (int i = 0; i < 5; i++)
1:eb715ea:                     topGainers.add(quoteArray[i]);
1:eb715ea:                 for (int i = quoteArray.length - 1; i >= quoteArray.length - 5; i--)
1:eb715ea:                     topLosers.add(quoteArray[i]);
1:eb715ea: 
1:eb715ea:                 for (QuoteDataBean quote : quoteArray) {
1:eb715ea:                     BigDecimal price = quote.getPrice();
1:eb715ea:                     BigDecimal open = quote.getOpen();
1:eb715ea:                     double volume = quote.getVolume();
1:eb715ea:                     TSIA = TSIA.add(price);
1:eb715ea:                     openTSIA = openTSIA.add(open);
1:eb715ea:                     totalVolume += volume;
1:eb715ea:                 }
1:eb715ea:                 TSIA = TSIA.divide(new BigDecimal(quoteArray.length),
1:eb715ea:                                    FinancialUtils.ROUND);
1:eb715ea:                 openTSIA = openTSIA.divide(new BigDecimal(quoteArray.length),
1:eb715ea:                                            FinancialUtils.ROUND);
1:eb715ea:             }
1:eb715ea: 
1:eb715ea:             marketSummaryData = new MarketSummaryDataBean(TSIA, openTSIA,
1:eb715ea:                                                           totalVolume, topGainers, topLosers);
1:eb715ea:         }
1:eb715ea:         catch (Exception e) {
1:eb715ea:             Log.error("TradeJpaCm:getMarketSummary", e);
1:eb715ea:             throw new RuntimeException("TradeJpaCm:getMarketSummary -- error ", e);
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:         return marketSummaryData;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public OrderDataBean buy(String userID, String symbol, double quantity, int orderProcessingMode) throws Exception {
1:eb715ea:         OrderDataBean order = null;
1:eb715ea:         BigDecimal total;
1:eb715ea: 
1:eb715ea:         try {
1:eb715ea:             if (Log.doTrace())
1:eb715ea:                 Log.trace("TradeJpaCm:buy", userID, symbol, quantity, orderProcessingMode);
1:eb715ea: 
1:eb715ea:             AccountProfileDataBeanImpl profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:eb715ea:             AccountDataBean account = profile.getAccount();
1:eb715ea: 
1:eb715ea:             QuoteDataBeanImpl quote = entityManager.find(QuoteDataBeanImpl.class, symbol);
1:eb715ea: 
1:eb715ea:             HoldingDataBeanImpl holding = null; // The holding will be created by this buy order
1:eb715ea: 
1:eb715ea:             order = createOrder( account, (QuoteDataBean) quote, (HoldingDataBean) holding, "buy", quantity);
1:eb715ea: 
1:eb715ea:             // order = createOrder(account, quote, holding, "buy", quantity);
1:eb715ea:             // UPDATE - account should be credited during completeOrder
1:eb715ea: 
1:eb715ea:             BigDecimal price = quote.getPrice();
1:eb715ea:             BigDecimal orderFee = order.getOrderFee();
1:eb715ea:             BigDecimal balance = account.getBalance();
1:eb715ea:             total = (new BigDecimal(quantity).multiply(price)).add(orderFee);
1:eb715ea:             account.setBalance(balance.subtract(total));
1:eb715ea: 
1:eb715ea:             if (orderProcessingMode == TradeConfig.SYNCH)
1:eb715ea:                 completeOrder(order.getOrderID(), false);
1:eb715ea:             else if (orderProcessingMode == TradeConfig.ASYNCH_2PHASE)
1:eb715ea:                 queueOrder(order.getOrderID(), true);
1:eb715ea:         }
1:eb715ea:         catch (Exception e) {
1:eb715ea:             Log.error("TradeJpaCm:buy(" + userID + "," + symbol + "," + quantity + ") --> failed", e);
1:eb715ea:             /* On exception - cancel the order */
1:eb715ea:             // TODO figure out how to do this with JPA
1:eb715ea:             if (order != null)
1:eb715ea:                 order.cancel();
1:eb715ea: 
1:eb715ea:             throw new RuntimeException(e);
1:eb715ea:         }
1:eb715ea: 
1:b8c0170:         // after the purchase or sale of a stock, update the stocks volume and
1:eb715ea:         // price
1:eb715ea:         updateQuotePriceVolume(symbol, TradeConfig.getRandomPriceChangeFactor(), quantity);
1:eb715ea: 
1:eb715ea:         return order;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public OrderDataBean sell(String userID, Integer holdingID, int orderProcessingMode) throws Exception {
1:eb715ea: 
1:eb715ea:         OrderDataBean order = null;
1:eb715ea:         BigDecimal total;
1:eb715ea:         try {
1:eb715ea:             if (Log.doTrace())
1:eb715ea:                 Log.trace("TradeJpaCm:sell", userID, holdingID, orderProcessingMode);
1:eb715ea: 
1:eb715ea:             AccountProfileDataBeanImpl profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:eb715ea: 
1:eb715ea:             AccountDataBean account = profile.getAccount();
1:eb715ea:             HoldingDataBeanImpl holding = entityManager.find(HoldingDataBeanImpl.class, holdingID);
1:eb715ea: 
1:eb715ea:             if (holding == null) {
1:eb715ea:                 Log.error("TradeJpaCm:sell User " + userID
1:eb715ea:                           + " attempted to sell holding " + holdingID
1:eb715ea:                           + " which has already been sold");
1:eb715ea: 
1:eb715ea:                 OrderDataBean orderData = new OrderDataBeanImpl();
1:eb715ea:                 orderData.setOrderStatus("cancelled");
1:eb715ea: 
1:eb715ea:                 entityManager.persist(orderData);
1:eb715ea: 
1:eb715ea:                 return orderData;
1:eb715ea:             }
1:eb715ea: 
1:eb715ea:             QuoteDataBean quote = holding.getQuote();
1:eb715ea:             double quantity = holding.getQuantity();
1:eb715ea: 
1:eb715ea:             order = createOrder(account, quote, holding, "sell", quantity);
1:eb715ea:             // UPDATE the holding purchase data to signify this holding is
1:eb715ea:             // "inflight" to be sold
1:eb715ea:             // -- could add a new holdingStatus attribute to holdingEJB
1:eb715ea:             holding.setPurchaseDate(new java.sql.Timestamp(0));
1:eb715ea: 
1:eb715ea:             // UPDATE - account should be credited during completeOrder
1:eb715ea:             BigDecimal price = quote.getPrice();
1:eb715ea:             BigDecimal orderFee = order.getOrderFee();
1:eb715ea:             BigDecimal balance = account.getBalance();
1:eb715ea:             total = (new BigDecimal(quantity).multiply(price)).subtract(orderFee);
1:eb715ea: 
1:eb715ea:             account.setBalance(balance.add(total));
1:eb715ea: 
1:eb715ea:             if (orderProcessingMode == TradeConfig.SYNCH)
1:eb715ea:                 completeOrder(order.getOrderID(), false);
1:eb715ea:             else if (orderProcessingMode == TradeConfig.ASYNCH_2PHASE)
1:eb715ea:                 queueOrder(order.getOrderID(), true);
1:eb715ea: 
1:eb715ea:         }
1:eb715ea:         catch (Exception e) {
1:eb715ea:             Log.error("TradeJpaCm:sell(" + userID + "," + holdingID + ") --> failed", e);
1:eb715ea:             // TODO figure out JPA cancel
1:eb715ea:             if (order != null)
1:eb715ea:                 order.cancel();
1:eb715ea: 
1:eb715ea:             throw new RuntimeException("TradeJpaCm:sell(" + userID + "," + holdingID + ")", e);
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:         if (!(order.getOrderStatus().equalsIgnoreCase("cancelled")))
1:eb715ea:             //after the purchase or sell of a stock, update the stocks volume and price
1:eb715ea:             updateQuotePriceVolume(order.getSymbol(), TradeConfig.getRandomPriceChangeFactor(), order.getQuantity());
1:eb715ea: 
1:eb715ea:         return order;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public void queueOrder(Integer orderID, boolean twoPhase) {
1:eb715ea:         Log
1:eb715ea:         .error("TradeJpaCm:queueOrder() not implemented for this runtime mode");
1:eb715ea:         throw new UnsupportedOperationException(
1:eb715ea:                                                "TradeJpaCm:queueOrder() not implemented for this runtime mode");
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public OrderDataBean completeOrder(Integer orderID, boolean twoPhase) throws Exception {
1:eb715ea: 
1:eb715ea:         OrderDataBeanImpl order = null;
1:eb715ea: 
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:completeOrder", orderID + " twoPhase=" + twoPhase);
1:eb715ea: 
1:eb715ea:         order = entityManager.find(OrderDataBeanImpl.class, orderID);
1:eb715ea:         order.getQuote();
1:eb715ea: 
1:eb715ea:         if (order == null) {
1:eb715ea:             Log.error("TradeJpaCm:completeOrder -- Unable to find Order " + orderID + " FBPK returned " + order);
1:eb715ea:             return null;
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:         if (order.isCompleted()) {
1:eb715ea:             throw new RuntimeException("Error: attempt to complete Order that is already completed\n" + order);
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:         AccountDataBean account = order.getAccount();
1:eb715ea:         QuoteDataBean quote = order.getQuote();
1:eb715ea:         HoldingDataBean holding = order.getHolding();
1:eb715ea:         BigDecimal price = order.getPrice();
1:eb715ea:         double quantity = order.getQuantity();
1:eb715ea: 
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:completeOrder--> Completing Order "
1:eb715ea:                       + order.getOrderID() + "\n\t Order info: " + order
1:eb715ea:                       + "\n\t Account info: " + account + "\n\t Quote info: "
1:eb715ea:                       + quote + "\n\t Holding info: " + holding);
1:eb715ea: 
1:eb715ea:         HoldingDataBean newHolding = null;
1:eb715ea:         if (order.isBuy()) {
1:eb715ea:             /*
1:eb715ea:              * Complete a Buy operation - create a new Holding for the Account -
1:eb715ea:              * deduct the Order cost from the Account balance
1:eb715ea:              */
1:eb715ea: 
1:eb715ea:             newHolding = createHolding(account, quote, quantity, price);
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:         try {
1:eb715ea: 
1:eb715ea:             if (newHolding != null) {
1:eb715ea:                 order.setHolding(newHolding);
1:eb715ea:             }
1:eb715ea: 
1:eb715ea:             if (order.isSell()) {
1:eb715ea:                 /*
1:eb715ea:                  * Complete a Sell operation - remove the Holding from the Account -
1:eb715ea:                  * deposit the Order proceeds to the Account balance
1:eb715ea:                  */
1:eb715ea:                 if (holding == null) {
1:eb715ea:                     Log.error("TradeJpaCm:completeOrder -- Unable to sell order " + order.getOrderID() + " holding already sold");
1:eb715ea:                     order.cancel();
1:eb715ea:                     return order;
1:eb715ea:                 }
1:eb715ea:                 else {
1:eb715ea:                     entityManager.remove(holding);
1:eb715ea:                     order.setHolding(null);
1:eb715ea:                 }
1:eb715ea:             }
1:eb715ea: 
1:eb715ea:             order.setOrderStatus("closed");
1:eb715ea: 
1:eb715ea:             order.setCompletionDate(new java.sql.Timestamp(System.currentTimeMillis()));
1:eb715ea: 
1:eb715ea:             if (Log.doTrace())
1:eb715ea:                 Log.trace("TradeJpaCm:completeOrder--> Completed Order "
1:eb715ea:                           + order.getOrderID() + "\n\t Order info: " + order
1:eb715ea:                           + "\n\t Account info: " + account + "\n\t Quote info: "
1:eb715ea:                           + quote + "\n\t Holding info: " + holding);
1:eb715ea: 
1:eb715ea:         }
1:eb715ea:         catch (Exception e) {
1:eb715ea:             e.printStackTrace();
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:         return order;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public void cancelOrder(Integer orderID, boolean twoPhase) throws Exception {
1:eb715ea: 
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:cancelOrder", orderID + " twoPhase=" + twoPhase);
1:eb715ea: 
1:eb715ea:         OrderDataBeanImpl order = entityManager.find(OrderDataBeanImpl.class, orderID);
1:eb715ea:         order.cancel();
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public void orderCompleted(String userID, Integer orderID) {
1:eb715ea:         if (Log.doActionTrace())
1:eb715ea:             Log.trace("TradeAction:orderCompleted", userID, orderID);
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("OrderCompleted", userID, orderID);
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public Collection<OrderDataBean> getOrders(String userID) {
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:getOrders", userID);
1:eb715ea:         AccountProfileDataBeanImpl profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:eb715ea:         AccountDataBean account = profile.getAccount();
1:eb715ea:         return account.getOrders();
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public Collection<OrderDataBean> getClosedOrders(String userID) throws Exception {
1:eb715ea: 
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:getClosedOrders", userID);
1:eb715ea: 
1:eb715ea:         try {
1:eb715ea: 
1:eb715ea:             // Get the primary keys for all the closed Orders for this
1:eb715ea:             // account.
1:eb715ea:             Query query = entityManager.createNamedQuery("orderejb.closedOrders");
1:eb715ea:             query.setParameter("userID", userID);
1:eb715ea: 
1:eb715ea:             Collection results = query.getResultList();
1:eb715ea:             Iterator itr = results.iterator();
1:eb715ea:             // Spin through the orders to populate the lazy quote fields
1:eb715ea:             while (itr.hasNext()) {
1:eb715ea:                 OrderDataBeanImpl thisOrder = (OrderDataBeanImpl) itr.next();
1:eb715ea:                 thisOrder.getQuote();
1:eb715ea:             }
1:eb715ea: 
1:eb715ea:             if (TradeConfig.jpaLayer == TradeConfig.OPENJPA) {
1:eb715ea:                 Query updateStatus = entityManager.createNamedQuery("orderejb.completeClosedOrders");
1:eb715ea:                 updateStatus.setParameter("userID", userID);
1:eb715ea:                 updateStatus.executeUpdate();
1:eb715ea:             }
1:eb715ea:             else if (TradeConfig.jpaLayer == TradeConfig.HIBERNATE) {
1:eb715ea:                 /*
1:eb715ea:                  * Add logic to do update orders operation, because JBoss5'
1:eb715ea:                  * Hibernate 3.3.1GA DB2Dialect and MySQL5Dialect do not work
1:eb715ea:                  * with annotated query "orderejb.completeClosedOrders" defined
1:eb715ea:                  * in OrderDatabean
1:eb715ea:                  */
1:eb715ea:                 Query findaccountid = entityManager.createNativeQuery(
1:eb715ea:                                                         "select "
1:eb715ea:                                                         + "a.ACCOUNTID, "
1:eb715ea:                                                         + "a.LOGINCOUNT, "
1:eb715ea:                                                         + "a.LOGOUTCOUNT, "
1:eb715ea:                                                         + "a.LASTLOGIN, "
1:eb715ea:                                                         + "a.CREATIONDATE, "
1:eb715ea:                                                         + "a.BALANCE, "
1:eb715ea:                                                         + "a.OPENBALANCE, "
1:eb715ea:                                                         + "a.PROFILE_USERID "
1:eb715ea:                                                         + "from accountejb a where a.profile_userid = ?",
1:3364e3f:                                                         org.apache.aries.samples.ariestrader.entities.AccountDataBeanImpl.class);
1:eb715ea:                 findaccountid.setParameter(1, userID);
1:eb715ea:                 AccountDataBeanImpl account = (AccountDataBeanImpl) findaccountid.getSingleResult();
1:eb715ea:                 Integer accountid = account.getAccountID();
1:eb715ea:                 Query updateStatus = entityManager.createNativeQuery("UPDATE orderejb o SET o.orderStatus = 'completed' WHERE "
1:eb715ea:                                                                      + "o.orderStatus = 'closed' AND o.ACCOUNT_ACCOUNTID  = ?");
1:eb715ea:                 updateStatus.setParameter(1, accountid.intValue());
1:eb715ea:                 updateStatus.executeUpdate();
1:eb715ea:             }
1:eb715ea:             return results;
1:eb715ea:         }
1:eb715ea:         catch (Exception e) {
1:eb715ea:             Log.error("TradeJpaCm.getClosedOrders", e);
1:eb715ea:             throw new RuntimeException(
1:eb715ea:                                       "TradeJpaCm.getClosedOrders - error", e);
1:eb715ea: 
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public QuoteDataBean createQuote(String symbol, String companyName, BigDecimal price) throws Exception {
1:eb715ea: 
1:eb715ea:         try {
1:eb715ea:             QuoteDataBeanImpl quote = new QuoteDataBeanImpl(symbol, companyName, 0, price, price, price, price, 0);
1:eb715ea:             entityManager.persist(quote);
1:eb715ea: 
1:eb715ea:             if (Log.doTrace())
1:eb715ea:                 Log.trace("TradeJpaCm:createQuote-->" + quote);
1:eb715ea: 
1:eb715ea:             return quote;
1:eb715ea:         }
1:eb715ea:         catch (Exception e) {
1:eb715ea:             Log.error("TradeJpaCm:createQuote -- exception creating Quote", e);
1:eb715ea:             throw new RuntimeException(e);
1:eb715ea:         }
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public QuoteDataBean getQuote(String symbol) {
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:getQuote", symbol);
1:eb715ea: 
1:eb715ea:         QuoteDataBeanImpl qdb = entityManager.find(QuoteDataBeanImpl.class, symbol);
1:eb715ea: 
1:eb715ea:         return qdb;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public Collection<QuoteDataBean> getAllQuotes() {
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:getAllQuotes");
1:eb715ea: 
1:eb715ea:         Query query = entityManager.createNamedQuery("quoteejb.allQuotes");
1:eb715ea: 
1:eb715ea:         return query.getResultList();
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public QuoteDataBean updateQuotePriceVolume(String symbol, BigDecimal changeFactor, double sharesTraded) throws Exception {
1:eb715ea:         if (!TradeConfig.getUpdateQuotePrices()) {
1:eb715ea:             return new QuoteDataBeanImpl();
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:updateQuote", symbol, changeFactor);
1:eb715ea: 
1:eb715ea:         /*
1:eb715ea:          * Add logic to determine JPA layer, because JBoss5' Hibernate 3.3.1GA
1:eb715ea:          * DB2Dialect and MySQL5Dialect do not work with annotated query
1:eb715ea:          * "quoteejb.quoteForUpdate" defined in QuoteDataBeanImpl
1:eb715ea:          */
1:eb715ea:         QuoteDataBeanImpl quote = null;
1:eb715ea:         if (TradeConfig.jpaLayer == TradeConfig.HIBERNATE) {
1:eb715ea:             quote = entityManager.find(QuoteDataBeanImpl.class, symbol);
1:eb715ea:         } else if (TradeConfig.jpaLayer == TradeConfig.OPENJPA) {
1:eb715ea:   
1:eb715ea:             Query q = entityManager.createNamedQuery("quoteejb.quoteForUpdate");
1:eb715ea:             q.setParameter(1, symbol);
1:eb715ea:   
1:eb715ea:             quote = (QuoteDataBeanImpl) q.getSingleResult();
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:         BigDecimal oldPrice = quote.getPrice();
1:eb715ea: 
1:eb715ea:         if (quote.getPrice().equals(TradeConfig.PENNY_STOCK_PRICE)) {
1:eb715ea:             changeFactor = TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER;
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:         BigDecimal newPrice = changeFactor.multiply(oldPrice).setScale(2, BigDecimal.ROUND_HALF_UP);
1:eb715ea: 
1:eb715ea:         quote.setPrice(newPrice);
1:eb715ea:         quote.setVolume(quote.getVolume() + sharesTraded);
1:eb715ea:         quote.setChange((newPrice.subtract(quote.getOpen()).doubleValue()));
1:d24b46e:         if (newPrice.compareTo(quote.getHigh()) == 1) quote.setHigh(newPrice);
1:d24b46e:         else if (newPrice.compareTo(quote.getLow()) == -1) quote.setLow(newPrice);
1:eb715ea: 
1:eb715ea:         entityManager.merge(quote);
1:eb715ea: 
1:eb715ea:         this.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
1:eb715ea: 
1:eb715ea:         return quote;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public Collection<HoldingDataBean> getHoldings(String userID) throws Exception {
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:getHoldings", userID);
1:eb715ea: 
1:eb715ea:         Collection<HoldingDataBean> holdings = null;
1:eb715ea: 
1:eb715ea:         Query query = entityManager.createNamedQuery("holdingejb.holdingsByUserID");
1:eb715ea:         query.setParameter("userID", userID);
1:eb715ea: 
1:eb715ea:         holdings = query.getResultList();
1:eb715ea:         /*
1:b8c0170:          * Inflate the lazy data members
1:eb715ea:          */
1:eb715ea:         Iterator itr = holdings.iterator();
1:eb715ea:         while (itr.hasNext()) {
1:eb715ea:             ((HoldingDataBean) itr.next()).getQuote();
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:         return holdings;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public HoldingDataBean getHolding(Integer holdingID) {
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:getHolding", holdingID);
1:eb715ea:         return entityManager.find(HoldingDataBeanImpl.class, holdingID);
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public AccountDataBean getAccountData(String userID) {
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:getAccountData", userID);
1:eb715ea: 
1:eb715ea:         AccountProfileDataBeanImpl profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:eb715ea:         /*
2:eb715ea:          * Inflate the lazy data memebers
1:eb715ea:          */
1:eb715ea:         AccountDataBean account = profile.getAccount();
1:eb715ea:         account.getProfile();
1:eb715ea: 
1:eb715ea:         // Added to populate transient field for account
1:eb715ea:         account.setProfileID(profile.getUserID());
1:eb715ea: 
1:eb715ea:         return account;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public AccountProfileDataBean getAccountProfileData(String userID) {
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:getProfileData", userID);
1:eb715ea: 
1:eb715ea:         AccountProfileDataBeanImpl apb = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:eb715ea:         return apb;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public AccountProfileDataBean updateAccountProfile( String userID, 
1:eb715ea:                                                         String password, 
1:eb715ea:                                                         String fullName, 
1:eb715ea:                                                         String address, 
1:eb715ea:                                                         String email, 
1:eb715ea:                                                         String creditcard) throws Exception {
1:eb715ea: 
1:eb715ea: 
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:updateAccountProfileData", userID);
1:eb715ea:         /*
1:eb715ea:          * // Retrieve the previous account profile in order to get account
1:eb715ea:          * data... hook it into new object AccountProfileDataBean temp =
1:eb715ea:          * entityManager.find(AccountProfileDataBean.class,
1:eb715ea:          * profileData.getUserID()); // In order for the object to merge
1:eb715ea:          * correctly, the account has to be hooked into the temp object... // -
1:eb715ea:          * may need to reverse this and obtain the full object first
1:eb715ea:          * 
1:eb715ea:          * profileData.setAccount(temp.getAccount());
1:eb715ea:          * 
1:eb715ea:          * //TODO this might not be correct temp =
1:eb715ea:          * entityManager.merge(profileData); //System.out.println(temp);
1:eb715ea:          */
1:eb715ea: 
1:eb715ea:         AccountProfileDataBeanImpl temp = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:eb715ea:         temp.setAddress(address);
1:eb715ea:         temp.setPassword(password);
1:eb715ea:         temp.setFullName(fullName);
1:eb715ea:         temp.setCreditCard(creditcard);
1:eb715ea:         temp.setEmail(email);
1:eb715ea:         entityManager.merge(temp);
1:eb715ea: 
1:eb715ea:         return temp;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public AccountDataBean login(String userID, String password)
1:eb715ea:     throws Exception {
1:eb715ea: 
1:eb715ea:         AccountProfileDataBeanImpl profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:eb715ea: 
1:eb715ea:         if (profile == null) {
1:eb715ea:             throw new RuntimeException("No such user: " + userID);
1:eb715ea:         }
1:eb715ea:         entityManager.merge(profile);
1:eb715ea: 
1:eb715ea:         AccountDataBean account = profile.getAccount();
1:eb715ea: 
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:login", userID, password);
1:eb715ea: 
1:eb715ea:         account.login(password);
1:eb715ea: 
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:login(" + userID + "," + password + ") success" + account);
1:eb715ea:         return account;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public void logout(String userID) throws Exception {
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:logout", userID);
1:eb715ea: 
1:eb715ea:         AccountProfileDataBeanImpl profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:eb715ea:         AccountDataBean account = profile.getAccount();
1:eb715ea: 
1:eb715ea:         account.logout();
1:eb715ea: 
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:logout(" + userID + ") success");
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public AccountDataBean register(String userID, 
1:eb715ea:                                     String password, 
1:eb715ea:                                     String fullname, 
1:eb715ea:                                     String address, 
1:eb715ea:                                     String email, 
1:eb715ea:                                     String creditcard,
1:eb715ea:                                     BigDecimal openBalance) throws Exception {
1:eb715ea:         AccountDataBeanImpl account = null;
1:eb715ea:         AccountProfileDataBeanImpl profile = null;
1:eb715ea: 
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:register", userID, password, fullname, address, email, creditcard, openBalance);
1:eb715ea: 
1:eb715ea:         // Check to see if a profile with the desired userID already exists
1:eb715ea: 
1:eb715ea:         profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:eb715ea: 
1:eb715ea:         if (profile != null) {
1:eb715ea:             Log.error("Failed to register new Account - AccountProfile with userID(" + userID + ") already exists");
1:eb715ea:             return null;
1:eb715ea:         }
1:eb715ea:         else {
1:eb715ea:             profile = new AccountProfileDataBeanImpl(userID, password, fullname,
1:eb715ea:                                                  address, email, creditcard);
1:eb715ea:             account = new AccountDataBeanImpl(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);
1:eb715ea:             profile.setAccount((AccountDataBean)account);
1:eb715ea:             account.setProfile((AccountProfileDataBean)profile);
1:eb715ea:             entityManager.persist(profile);
1:eb715ea:             entityManager.persist(account);
1:1447692:             // Uncomment this line to verify that datasources has been enlisted.  After rebuild attempt to register a user with
1:1447692:             // a user id "fail".  After the exception is thrown the database should not contain the user "fail" even though 
1:1447692:             // the profile and account have already been persisted.
1:1447692:             // if (userID.equals("fail")) throw new RuntimeException("**** enlisted datasource validated via rollback test ****");
1:eb715ea:         }
1:eb715ea: 
1:eb715ea:         return account;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     /*
1:eb715ea:      * NO LONGER USE
1:eb715ea:      */
1:eb715ea: 
1:eb715ea:     private void publishQuotePriceChange(QuoteDataBean quote,
1:eb715ea:                                          BigDecimal oldPrice, BigDecimal changeFactor, double sharesTraded) {
1:eb715ea:         if (!TradeConfig.getPublishQuotePriceChange())
1:eb715ea:             return;
1:eb715ea:         Log.error("TradeJpaCm:publishQuotePriceChange - is not implemented for this runtime mode");
1:eb715ea:         throw new UnsupportedOperationException("TradeJpaCm:publishQuotePriceChange - is not implemented for this runtime mode");
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     private OrderDataBean createOrder(AccountDataBean account,
1:eb715ea:                                       QuoteDataBean quote, HoldingDataBean holding, String orderType,
1:eb715ea:                                       double quantity) {
1:eb715ea:         OrderDataBeanImpl order;
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:createOrder(orderID=" + " account="
1:eb715ea:                       + ((account == null) ? null : account.getAccountID())
1:eb715ea:                       + " quote=" + ((quote == null) ? null : quote.getSymbol())
1:eb715ea:                       + " orderType=" + orderType + " quantity=" + quantity);
1:eb715ea:         try {
1:eb715ea:             order = new OrderDataBeanImpl(orderType, 
1:eb715ea:                                       "open", 
1:eb715ea:                                       new Timestamp(System.currentTimeMillis()), 
1:eb715ea:                                       null, 
1:eb715ea:                                       quantity, 
1:eb715ea:                                       quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND),
1:eb715ea:                                       TradeConfig.getOrderFee(orderType), 
1:eb715ea:                                       account, 
1:eb715ea:                                       quote, 
1:eb715ea:                                       holding);
1:eb715ea:                 entityManager.persist(order);
1:eb715ea:         }
1:eb715ea:         catch (Exception e) {
1:eb715ea:             Log.error("TradeJpaCm:createOrder -- failed to create Order", e);
1:eb715ea:             throw new RuntimeException("TradeJpaCm:createOrder -- failed to create Order", e);
1:eb715ea:         }
1:eb715ea:         return order;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     private HoldingDataBean createHolding(AccountDataBean account,
1:eb715ea:                                           QuoteDataBean quote, 
1:eb715ea:                                           double quantity, 
1:eb715ea:                                           BigDecimal purchasePrice) throws Exception {
1:eb715ea:         HoldingDataBeanImpl newHolding = new HoldingDataBeanImpl(quantity,
1:eb715ea:                                                          purchasePrice, new Timestamp(System.currentTimeMillis()),
1:eb715ea:                                                          account, quote);
1:eb715ea:         entityManager.persist(newHolding);
1:eb715ea:         return newHolding;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public double investmentReturn(double investment, double NetValue)
1:eb715ea:     throws Exception {
1:eb715ea:         if (Log.doTrace())
1:eb715ea:             Log.trace("TradeJpaCm:investmentReturn");
1:eb715ea: 
1:eb715ea:         double diff = NetValue - investment;
1:eb715ea:         double ir = diff / investment;
1:eb715ea:         return ir;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     public QuoteDataBean pingTwoPhase(String symbol) throws Exception {
1:eb715ea:         Log.error("TradeJpaCm:pingTwoPhase - is not implemented for this runtime mode");
1:eb715ea:         throw new UnsupportedOperationException("TradeJpaCm:pingTwoPhase - is not implemented for this runtime mode");
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     class quotePriceComparator implements java.util.Comparator {
1:eb715ea:         public int compare(Object quote1, Object quote2) {
1:eb715ea:             double change1 = ((QuoteDataBean) quote1).getChange();
1:eb715ea:             double change2 = ((QuoteDataBean) quote2).getChange();
1:eb715ea:             return new Double(change2).compareTo(change1);
1:eb715ea:         }
1:eb715ea:     }
1:eb715ea: 
1:eb715ea:     /**
1:eb715ea:      * Get mode - returns the persistence mode (TradeConfig.JPA)
1:eb715ea:      * 
1:8ef753d:      * @return TradeConfig.ModeType
1:eb715ea:      */
1:8ef753d:     public TradeConfig.ModeType getMode() {
1:8ef753d:         return TradeConfig.ModeType.JPA_CM;
1:eb715ea:     }
1:eb715ea: 
1:eb715ea: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:8ef753d
/////////////////////////////////////////////////////////////////////////
1:      * @return TradeConfig.ModeType
1:     public TradeConfig.ModeType getMode() {
1:         return TradeConfig.ModeType.JPA_CM;
commit:39f53f6
commit:d24b46e
/////////////////////////////////////////////////////////////////////////
1:         if (newPrice.compareTo(quote.getHigh()) == 1) quote.setHigh(newPrice);
1:         else if (newPrice.compareTo(quote.getLow()) == -1) quote.setLow(newPrice);
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // after the purchase or sale of a stock, update the stocks volume and
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:          * Inflate the lazy data members
commit:1f8e5bb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.persist.jpa.cm;
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.AccountProfileDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.MarketSummaryDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.OrderDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
commit:1447692
/////////////////////////////////////////////////////////////////////////
1:             // Uncomment this line to verify that datasources has been enlisted.  After rebuild attempt to register a user with
1:             // a user id "fail".  After the exception is thrown the database should not contain the user "fail" even though 
1:             // the profile and account have already been persisted.
1:             // if (userID.equals("fail")) throw new RuntimeException("**** enlisted datasource validated via rollback test ****");
commit:989ba4e
commit:3364e3f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.entities.AccountDataBeanImpl;
1: import org.apache.aries.samples.ariestrader.entities.AccountProfileDataBeanImpl;
1: import org.apache.aries.samples.ariestrader.entities.HoldingDataBeanImpl;
1: import org.apache.aries.samples.ariestrader.entities.OrderDataBeanImpl;
1: import org.apache.aries.samples.ariestrader.entities.QuoteDataBeanImpl;
/////////////////////////////////////////////////////////////////////////
1:                                                         org.apache.aries.samples.ariestrader.entities.AccountDataBeanImpl.class);
commit:3f58ea1
commit:64d8de3
commit:eb715ea
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.aries.samples.ariestrader.persist.jpa;
1: 
1: import java.math.BigDecimal;
1: import java.sql.Timestamp;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Iterator;
1: 
1: import javax.persistence.EntityManager;
0: import javax.persistence.PersistenceContext;
1: import javax.persistence.Query;
1: 
1: import org.apache.aries.samples.ariestrader.api.TradeServices;
0: import org.apache.aries.samples.ariestrader.beans.AccountDataBeanImpl;
0: import org.apache.aries.samples.ariestrader.beans.AccountProfileDataBeanImpl;
0: import org.apache.aries.samples.ariestrader.beans.HoldingDataBeanImpl;
0: import org.apache.aries.samples.ariestrader.beans.OrderDataBeanImpl;
0: import org.apache.aries.samples.ariestrader.beans.QuoteDataBeanImpl;
0: import org.apache.aries.samples.ariestrader.persistence.api.AccountDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.AccountProfileDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.HoldingDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.MarketSummaryDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.OrderDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.QuoteDataBean;
1: import org.apache.aries.samples.ariestrader.util.FinancialUtils;
1: import org.apache.aries.samples.ariestrader.util.Log;
1: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1: 
1: /**
1:  * TradeJpaCm uses JPA via Container Managed (CM) Entity
1:  * Managers to implement the business methods of the Trade
1:  * online broker application. These business methods represent
1:  * the features and operations that can be performed by
1:  * customers of the brokerage such as login, logout, get a stock
1:  * quote, buy or sell a stock, etc. and are specified in the
1:  * {@link org.apache.aries.samples.ariestrader.TradeServices}
1:  * interface
1:  * 
1:  * @see org.apache.aries.samples.ariestrader.TradeServices
1:  * 
1:  */
1: 
1: public class TradeJpaCm implements TradeServices {
1: 
1:     private EntityManager entityManager;
1: 
0:     private static BigDecimal ZERO = new BigDecimal(0.0);
1: 
1:     private static boolean initialized = false;
1: 
1: //    @PersistenceContext(unitName="ariestrader-cm")
1:     public void setEntityManager (EntityManager em) { 
1:         entityManager = em;
1:     }
1: 
1:     /**
1:      * Zero arg constructor for TradeJpaCm
1:      */
1:     public TradeJpaCm() {
1:     }
1: 
1:     public void init() {
1:         if (initialized)
1:             return;
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:init -- *** initializing");
1: 
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:init -- +++ initialized");
1: 
1:         initialized = true;
1:     }
1: 
1:     public void destroy() {
1:         try {
1:             if (!initialized)
1:                 return;
1:             Log.trace("TradeJpaCm:destroy");
1:         }
1:         catch (Exception e) {
1:             Log.error("TradeJpaCm:destroy", e);
1:         }
1: 
1:     }
1: 
1:     public MarketSummaryDataBean getMarketSummary() {
1:         MarketSummaryDataBean marketSummaryData;
1: 
1:         try {
1:             if (Log.doTrace())
1:                 Log.trace("TradeJpaCm:getMarketSummary -- getting market summary");
1: 
1:             // Find Trade Stock Index Quotes (Top 100 quotes)
1:             // ordered by their change in value
1:             Collection<QuoteDataBean> quotes;
1: 
1:             Query query = entityManager.createNamedQuery("quoteejb.quotesByChange");
1:             quotes = query.getResultList();
1: 
1:             QuoteDataBean[] quoteArray = (QuoteDataBean[]) quotes.toArray(new QuoteDataBean[quotes.size()]);
1:             ArrayList<QuoteDataBean> topGainers = new ArrayList<QuoteDataBean>(
1:                                                                               5);
1:             ArrayList<QuoteDataBean> topLosers = new ArrayList<QuoteDataBean>(5);
1:             BigDecimal TSIA = FinancialUtils.ZERO;
1:             BigDecimal openTSIA = FinancialUtils.ZERO;
1:             double totalVolume = 0.0;
1: 
1:             if (quoteArray.length > 5) {
1:                 for (int i = 0; i < 5; i++)
1:                     topGainers.add(quoteArray[i]);
1:                 for (int i = quoteArray.length - 1; i >= quoteArray.length - 5; i--)
1:                     topLosers.add(quoteArray[i]);
1: 
1:                 for (QuoteDataBean quote : quoteArray) {
1:                     BigDecimal price = quote.getPrice();
1:                     BigDecimal open = quote.getOpen();
1:                     double volume = quote.getVolume();
1:                     TSIA = TSIA.add(price);
1:                     openTSIA = openTSIA.add(open);
1:                     totalVolume += volume;
1:                 }
1:                 TSIA = TSIA.divide(new BigDecimal(quoteArray.length),
1:                                    FinancialUtils.ROUND);
1:                 openTSIA = openTSIA.divide(new BigDecimal(quoteArray.length),
1:                                            FinancialUtils.ROUND);
1:             }
1: 
1:             marketSummaryData = new MarketSummaryDataBean(TSIA, openTSIA,
1:                                                           totalVolume, topGainers, topLosers);
1:         }
1:         catch (Exception e) {
1:             Log.error("TradeJpaCm:getMarketSummary", e);
1:             throw new RuntimeException("TradeJpaCm:getMarketSummary -- error ", e);
1:         }
1: 
1:         return marketSummaryData;
1:     }
1: 
1:     public OrderDataBean buy(String userID, String symbol, double quantity, int orderProcessingMode) throws Exception {
1:         OrderDataBean order = null;
1:         BigDecimal total;
1: 
1:         try {
1:             if (Log.doTrace())
1:                 Log.trace("TradeJpaCm:buy", userID, symbol, quantity, orderProcessingMode);
1: 
1:             AccountProfileDataBeanImpl profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:             AccountDataBean account = profile.getAccount();
1: 
1:             QuoteDataBeanImpl quote = entityManager.find(QuoteDataBeanImpl.class, symbol);
1: 
1:             HoldingDataBeanImpl holding = null; // The holding will be created by this buy order
1: 
1:             order = createOrder( account, (QuoteDataBean) quote, (HoldingDataBean) holding, "buy", quantity);
1: 
1:             // order = createOrder(account, quote, holding, "buy", quantity);
1:             // UPDATE - account should be credited during completeOrder
1: 
1:             BigDecimal price = quote.getPrice();
1:             BigDecimal orderFee = order.getOrderFee();
1:             BigDecimal balance = account.getBalance();
1:             total = (new BigDecimal(quantity).multiply(price)).add(orderFee);
1:             account.setBalance(balance.subtract(total));
1: 
1:             if (orderProcessingMode == TradeConfig.SYNCH)
1:                 completeOrder(order.getOrderID(), false);
1:             else if (orderProcessingMode == TradeConfig.ASYNCH_2PHASE)
1:                 queueOrder(order.getOrderID(), true);
1:         }
1:         catch (Exception e) {
1:             Log.error("TradeJpaCm:buy(" + userID + "," + symbol + "," + quantity + ") --> failed", e);
1:             /* On exception - cancel the order */
1:             // TODO figure out how to do this with JPA
1:             if (order != null)
1:                 order.cancel();
1: 
1:             throw new RuntimeException(e);
1:         }
1: 
0:         // after the purchase or sell of a stock, update the stocks volume and
1:         // price
1:         updateQuotePriceVolume(symbol, TradeConfig.getRandomPriceChangeFactor(), quantity);
1: 
1:         return order;
1:     }
1: 
1:     public OrderDataBean sell(String userID, Integer holdingID, int orderProcessingMode) throws Exception {
1: 
1:         OrderDataBean order = null;
1:         BigDecimal total;
1:         try {
1:             if (Log.doTrace())
1:                 Log.trace("TradeJpaCm:sell", userID, holdingID, orderProcessingMode);
1: 
1:             AccountProfileDataBeanImpl profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1: 
1:             AccountDataBean account = profile.getAccount();
1:             HoldingDataBeanImpl holding = entityManager.find(HoldingDataBeanImpl.class, holdingID);
1: 
1:             if (holding == null) {
1:                 Log.error("TradeJpaCm:sell User " + userID
1:                           + " attempted to sell holding " + holdingID
1:                           + " which has already been sold");
1: 
1:                 OrderDataBean orderData = new OrderDataBeanImpl();
1:                 orderData.setOrderStatus("cancelled");
1: 
1:                 entityManager.persist(orderData);
1: 
1:                 return orderData;
1:             }
1: 
1:             QuoteDataBean quote = holding.getQuote();
1:             double quantity = holding.getQuantity();
1: 
1:             order = createOrder(account, quote, holding, "sell", quantity);
1:             // UPDATE the holding purchase data to signify this holding is
1:             // "inflight" to be sold
1:             // -- could add a new holdingStatus attribute to holdingEJB
1:             holding.setPurchaseDate(new java.sql.Timestamp(0));
1: 
1:             // UPDATE - account should be credited during completeOrder
1:             BigDecimal price = quote.getPrice();
1:             BigDecimal orderFee = order.getOrderFee();
1:             BigDecimal balance = account.getBalance();
1:             total = (new BigDecimal(quantity).multiply(price)).subtract(orderFee);
1: 
1:             account.setBalance(balance.add(total));
1: 
1:             if (orderProcessingMode == TradeConfig.SYNCH)
1:                 completeOrder(order.getOrderID(), false);
1:             else if (orderProcessingMode == TradeConfig.ASYNCH_2PHASE)
1:                 queueOrder(order.getOrderID(), true);
1: 
1:         }
1:         catch (Exception e) {
1:             Log.error("TradeJpaCm:sell(" + userID + "," + holdingID + ") --> failed", e);
1:             // TODO figure out JPA cancel
1:             if (order != null)
1:                 order.cancel();
1: 
1:             throw new RuntimeException("TradeJpaCm:sell(" + userID + "," + holdingID + ")", e);
1:         }
1: 
1:         if (!(order.getOrderStatus().equalsIgnoreCase("cancelled")))
1:             //after the purchase or sell of a stock, update the stocks volume and price
1:             updateQuotePriceVolume(order.getSymbol(), TradeConfig.getRandomPriceChangeFactor(), order.getQuantity());
1: 
1:         return order;
1:     }
1: 
1:     public void queueOrder(Integer orderID, boolean twoPhase) {
1:         Log
1:         .error("TradeJpaCm:queueOrder() not implemented for this runtime mode");
1:         throw new UnsupportedOperationException(
1:                                                "TradeJpaCm:queueOrder() not implemented for this runtime mode");
1:     }
1: 
1:     public OrderDataBean completeOrder(Integer orderID, boolean twoPhase) throws Exception {
1: 
1:         OrderDataBeanImpl order = null;
1: 
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:completeOrder", orderID + " twoPhase=" + twoPhase);
1: 
1:         order = entityManager.find(OrderDataBeanImpl.class, orderID);
1:         order.getQuote();
1: 
1:         if (order == null) {
1:             Log.error("TradeJpaCm:completeOrder -- Unable to find Order " + orderID + " FBPK returned " + order);
1:             return null;
1:         }
1: 
1:         if (order.isCompleted()) {
1:             throw new RuntimeException("Error: attempt to complete Order that is already completed\n" + order);
1:         }
1: 
1:         AccountDataBean account = order.getAccount();
1:         QuoteDataBean quote = order.getQuote();
1:         HoldingDataBean holding = order.getHolding();
1:         BigDecimal price = order.getPrice();
1:         double quantity = order.getQuantity();
1: 
0:         String userID = account.getProfile().getUserID();
1: 
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:completeOrder--> Completing Order "
1:                       + order.getOrderID() + "\n\t Order info: " + order
1:                       + "\n\t Account info: " + account + "\n\t Quote info: "
1:                       + quote + "\n\t Holding info: " + holding);
1: 
1:         HoldingDataBean newHolding = null;
1:         if (order.isBuy()) {
1:             /*
1:              * Complete a Buy operation - create a new Holding for the Account -
1:              * deduct the Order cost from the Account balance
1:              */
1: 
1:             newHolding = createHolding(account, quote, quantity, price);
1:         }
1: 
1:         try {
1: 
1:             if (newHolding != null) {
1:                 order.setHolding(newHolding);
1:             }
1: 
1:             if (order.isSell()) {
1:                 /*
1:                  * Complete a Sell operation - remove the Holding from the Account -
1:                  * deposit the Order proceeds to the Account balance
1:                  */
1:                 if (holding == null) {
1:                     Log.error("TradeJpaCm:completeOrder -- Unable to sell order " + order.getOrderID() + " holding already sold");
1:                     order.cancel();
1:                     return order;
1:                 }
1:                 else {
1:                     entityManager.remove(holding);
1:                     order.setHolding(null);
1:                 }
1:             }
1: 
1:             order.setOrderStatus("closed");
1: 
1:             order.setCompletionDate(new java.sql.Timestamp(System.currentTimeMillis()));
1: 
1:             if (Log.doTrace())
1:                 Log.trace("TradeJpaCm:completeOrder--> Completed Order "
1:                           + order.getOrderID() + "\n\t Order info: " + order
1:                           + "\n\t Account info: " + account + "\n\t Quote info: "
1:                           + quote + "\n\t Holding info: " + holding);
1: 
1:         }
1:         catch (Exception e) {
1:             e.printStackTrace();
1:         }
1: 
1:         return order;
1:     }
1: 
1:     public void cancelOrder(Integer orderID, boolean twoPhase) throws Exception {
1: 
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:cancelOrder", orderID + " twoPhase=" + twoPhase);
1: 
1:         OrderDataBeanImpl order = entityManager.find(OrderDataBeanImpl.class, orderID);
1:         order.cancel();
1:     }
1: 
1:     public void orderCompleted(String userID, Integer orderID) {
1:         if (Log.doActionTrace())
1:             Log.trace("TradeAction:orderCompleted", userID, orderID);
1:         if (Log.doTrace())
1:             Log.trace("OrderCompleted", userID, orderID);
1:     }
1: 
1:     public Collection<OrderDataBean> getOrders(String userID) {
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:getOrders", userID);
1:         AccountProfileDataBeanImpl profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:         AccountDataBean account = profile.getAccount();
1:         return account.getOrders();
1:     }
1: 
1:     public Collection<OrderDataBean> getClosedOrders(String userID) throws Exception {
1: 
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:getClosedOrders", userID);
1: 
1:         try {
1: 
1:             // Get the primary keys for all the closed Orders for this
1:             // account.
1:             Query query = entityManager.createNamedQuery("orderejb.closedOrders");
1:             query.setParameter("userID", userID);
1: 
1:             Collection results = query.getResultList();
1:             Iterator itr = results.iterator();
1:             // Spin through the orders to populate the lazy quote fields
1:             while (itr.hasNext()) {
1:                 OrderDataBeanImpl thisOrder = (OrderDataBeanImpl) itr.next();
1:                 thisOrder.getQuote();
1:             }
1: 
1:             if (TradeConfig.jpaLayer == TradeConfig.OPENJPA) {
1:                 Query updateStatus = entityManager.createNamedQuery("orderejb.completeClosedOrders");
1:                 updateStatus.setParameter("userID", userID);
1:                 updateStatus.executeUpdate();
1:             }
1:             else if (TradeConfig.jpaLayer == TradeConfig.HIBERNATE) {
1:                 /*
1:                  * Add logic to do update orders operation, because JBoss5'
1:                  * Hibernate 3.3.1GA DB2Dialect and MySQL5Dialect do not work
1:                  * with annotated query "orderejb.completeClosedOrders" defined
1:                  * in OrderDatabean
1:                  */
1:                 Query findaccountid = entityManager.createNativeQuery(
1:                                                         "select "
1:                                                         + "a.ACCOUNTID, "
1:                                                         + "a.LOGINCOUNT, "
1:                                                         + "a.LOGOUTCOUNT, "
1:                                                         + "a.LASTLOGIN, "
1:                                                         + "a.CREATIONDATE, "
1:                                                         + "a.BALANCE, "
1:                                                         + "a.OPENBALANCE, "
1:                                                         + "a.PROFILE_USERID "
1:                                                         + "from accountejb a where a.profile_userid = ?",
0:                                                         org.apache.aries.samples.ariestrader.beans.AccountDataBeanImpl.class);
1:                 findaccountid.setParameter(1, userID);
1:                 AccountDataBeanImpl account = (AccountDataBeanImpl) findaccountid.getSingleResult();
1:                 Integer accountid = account.getAccountID();
1:                 Query updateStatus = entityManager.createNativeQuery("UPDATE orderejb o SET o.orderStatus = 'completed' WHERE "
1:                                                                      + "o.orderStatus = 'closed' AND o.ACCOUNT_ACCOUNTID  = ?");
1:                 updateStatus.setParameter(1, accountid.intValue());
1:                 updateStatus.executeUpdate();
1:             }
1:             return results;
1:         }
1:         catch (Exception e) {
1:             Log.error("TradeJpaCm.getClosedOrders", e);
1:             throw new RuntimeException(
1:                                       "TradeJpaCm.getClosedOrders - error", e);
1: 
1:         }
1: 
1:     }
1: 
1:     public QuoteDataBean createQuote(String symbol, String companyName, BigDecimal price) throws Exception {
1: 
1:         try {
1:             QuoteDataBeanImpl quote = new QuoteDataBeanImpl(symbol, companyName, 0, price, price, price, price, 0);
1:             entityManager.persist(quote);
1: 
1:             if (Log.doTrace())
1:                 Log.trace("TradeJpaCm:createQuote-->" + quote);
1: 
1:             return quote;
1:         }
1:         catch (Exception e) {
1:             Log.error("TradeJpaCm:createQuote -- exception creating Quote", e);
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public QuoteDataBean getQuote(String symbol) {
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:getQuote", symbol);
1: 
1:         QuoteDataBeanImpl qdb = entityManager.find(QuoteDataBeanImpl.class, symbol);
1: 
1:         return qdb;
1:     }
1: 
1:     public Collection<QuoteDataBean> getAllQuotes() {
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:getAllQuotes");
1: 
1:         Query query = entityManager.createNamedQuery("quoteejb.allQuotes");
1: 
1:         return query.getResultList();
1:     }
1: 
1:     public QuoteDataBean updateQuotePriceVolume(String symbol, BigDecimal changeFactor, double sharesTraded) throws Exception {
1:         if (!TradeConfig.getUpdateQuotePrices()) {
1:             return new QuoteDataBeanImpl();
1:         }
1: 
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:updateQuote", symbol, changeFactor);
1: 
1:         /*
1:          * Add logic to determine JPA layer, because JBoss5' Hibernate 3.3.1GA
1:          * DB2Dialect and MySQL5Dialect do not work with annotated query
1:          * "quoteejb.quoteForUpdate" defined in QuoteDataBeanImpl
1:          */
1:         QuoteDataBeanImpl quote = null;
1:         if (TradeConfig.jpaLayer == TradeConfig.HIBERNATE) {
1:             quote = entityManager.find(QuoteDataBeanImpl.class, symbol);
1:         } else if (TradeConfig.jpaLayer == TradeConfig.OPENJPA) {
1:   
1:             Query q = entityManager.createNamedQuery("quoteejb.quoteForUpdate");
1:             q.setParameter(1, symbol);
1:   
1:             quote = (QuoteDataBeanImpl) q.getSingleResult();
1:         }
1: 
1:         BigDecimal oldPrice = quote.getPrice();
1: 
1:         if (quote.getPrice().equals(TradeConfig.PENNY_STOCK_PRICE)) {
1:             changeFactor = TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER;
1:         }
1: 
1:         BigDecimal newPrice = changeFactor.multiply(oldPrice).setScale(2, BigDecimal.ROUND_HALF_UP);
1: 
1:         quote.setPrice(newPrice);
1:         quote.setVolume(quote.getVolume() + sharesTraded);
1:         quote.setChange((newPrice.subtract(quote.getOpen()).doubleValue()));
1: 
1:         entityManager.merge(quote);
1: 
1:         this.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
1: 
1:         return quote;
1:     }
1: 
1:     public Collection<HoldingDataBean> getHoldings(String userID) throws Exception {
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:getHoldings", userID);
1: 
1:         Collection<HoldingDataBean> holdings = null;
1: 
1:         Query query = entityManager.createNamedQuery("holdingejb.holdingsByUserID");
1:         query.setParameter("userID", userID);
1: 
1:         holdings = query.getResultList();
1:         /*
1:          * Inflate the lazy data memebers
1:          */
1:         Iterator itr = holdings.iterator();
1:         while (itr.hasNext()) {
1:             ((HoldingDataBean) itr.next()).getQuote();
1:         }
1: 
1:         return holdings;
1:     }
1: 
1:     public HoldingDataBean getHolding(Integer holdingID) {
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:getHolding", holdingID);
1:         return entityManager.find(HoldingDataBeanImpl.class, holdingID);
1:     }
1: 
1:     public AccountDataBean getAccountData(String userID) {
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:getAccountData", userID);
1: 
1:         AccountProfileDataBeanImpl profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:         /*
1:          * Inflate the lazy data memebers
1:          */
1:         AccountDataBean account = profile.getAccount();
1:         account.getProfile();
1: 
1:         // Added to populate transient field for account
1:         account.setProfileID(profile.getUserID());
1: 
1:         return account;
1:     }
1: 
1:     public AccountProfileDataBean getAccountProfileData(String userID) {
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:getProfileData", userID);
1: 
1:         AccountProfileDataBeanImpl apb = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:         return apb;
1:     }
1: 
1:     public AccountProfileDataBean updateAccountProfile( String userID, 
1:                                                         String password, 
1:                                                         String fullName, 
1:                                                         String address, 
1:                                                         String email, 
1:                                                         String creditcard) throws Exception {
1: 
1: 
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:updateAccountProfileData", userID);
1:         /*
1:          * // Retrieve the previous account profile in order to get account
1:          * data... hook it into new object AccountProfileDataBean temp =
1:          * entityManager.find(AccountProfileDataBean.class,
1:          * profileData.getUserID()); // In order for the object to merge
1:          * correctly, the account has to be hooked into the temp object... // -
1:          * may need to reverse this and obtain the full object first
1:          * 
1:          * profileData.setAccount(temp.getAccount());
1:          * 
1:          * //TODO this might not be correct temp =
1:          * entityManager.merge(profileData); //System.out.println(temp);
1:          */
1: 
1:         AccountProfileDataBeanImpl temp = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:         temp.setAddress(address);
1:         temp.setPassword(password);
1:         temp.setFullName(fullName);
1:         temp.setCreditCard(creditcard);
1:         temp.setEmail(email);
1:         entityManager.merge(temp);
1: 
1:         return temp;
1:     }
1: 
1:     public AccountDataBean login(String userID, String password)
1:     throws Exception {
1: 
1:         AccountProfileDataBeanImpl profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1: 
1:         if (profile == null) {
1:             throw new RuntimeException("No such user: " + userID);
1:         }
1:         entityManager.merge(profile);
1: 
1:         AccountDataBean account = profile.getAccount();
1: 
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:login", userID, password);
1: 
1:         account.login(password);
1: 
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:login(" + userID + "," + password + ") success" + account);
1:         return account;
1:     }
1: 
1:     public void logout(String userID) throws Exception {
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:logout", userID);
1: 
1:         AccountProfileDataBeanImpl profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1:         AccountDataBean account = profile.getAccount();
1: 
1:         account.logout();
1: 
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:logout(" + userID + ") success");
1:     }
1: 
1:     public AccountDataBean register(String userID, 
1:                                     String password, 
1:                                     String fullname, 
1:                                     String address, 
1:                                     String email, 
1:                                     String creditcard,
1:                                     BigDecimal openBalance) throws Exception {
1:         AccountDataBeanImpl account = null;
1:         AccountProfileDataBeanImpl profile = null;
1: 
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:register", userID, password, fullname, address, email, creditcard, openBalance);
1: 
1:         // Check to see if a profile with the desired userID already exists
1: 
1:         profile = entityManager.find(AccountProfileDataBeanImpl.class, userID);
1: 
1:         if (profile != null) {
1:             Log.error("Failed to register new Account - AccountProfile with userID(" + userID + ") already exists");
1:             return null;
1:         }
1:         else {
1:             profile = new AccountProfileDataBeanImpl(userID, password, fullname,
1:                                                  address, email, creditcard);
1:             account = new AccountDataBeanImpl(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);
1:             profile.setAccount((AccountDataBean)account);
1:             account.setProfile((AccountProfileDataBean)profile);
1:             entityManager.persist(profile);
1:             entityManager.persist(account);
1:         }
1: 
1:         return account;
1:     }
1: 
1:     /*
1:      * NO LONGER USE
1:      */
1: 
1:     private void publishQuotePriceChange(QuoteDataBean quote,
1:                                          BigDecimal oldPrice, BigDecimal changeFactor, double sharesTraded) {
1:         if (!TradeConfig.getPublishQuotePriceChange())
1:             return;
1:         Log.error("TradeJpaCm:publishQuotePriceChange - is not implemented for this runtime mode");
1:         throw new UnsupportedOperationException("TradeJpaCm:publishQuotePriceChange - is not implemented for this runtime mode");
1:     }
1: 
1:     private OrderDataBean createOrder(AccountDataBean account,
1:                                       QuoteDataBean quote, HoldingDataBean holding, String orderType,
1:                                       double quantity) {
1:         OrderDataBeanImpl order;
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:createOrder(orderID=" + " account="
1:                       + ((account == null) ? null : account.getAccountID())
1:                       + " quote=" + ((quote == null) ? null : quote.getSymbol())
1:                       + " orderType=" + orderType + " quantity=" + quantity);
1:         try {
1:             order = new OrderDataBeanImpl(orderType, 
1:                                       "open", 
1:                                       new Timestamp(System.currentTimeMillis()), 
1:                                       null, 
1:                                       quantity, 
1:                                       quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND),
1:                                       TradeConfig.getOrderFee(orderType), 
1:                                       account, 
1:                                       quote, 
1:                                       holding);
1:                 entityManager.persist(order);
1:         }
1:         catch (Exception e) {
1:             Log.error("TradeJpaCm:createOrder -- failed to create Order", e);
1:             throw new RuntimeException("TradeJpaCm:createOrder -- failed to create Order", e);
1:         }
1:         return order;
1:     }
1: 
1:     private HoldingDataBean createHolding(AccountDataBean account,
1:                                           QuoteDataBean quote, 
1:                                           double quantity, 
1:                                           BigDecimal purchasePrice) throws Exception {
1:         HoldingDataBeanImpl newHolding = new HoldingDataBeanImpl(quantity,
1:                                                          purchasePrice, new Timestamp(System.currentTimeMillis()),
1:                                                          account, quote);
1:         entityManager.persist(newHolding);
1:         return newHolding;
1:     }
1: 
1:     public double investmentReturn(double investment, double NetValue)
1:     throws Exception {
1:         if (Log.doTrace())
1:             Log.trace("TradeJpaCm:investmentReturn");
1: 
1:         double diff = NetValue - investment;
1:         double ir = diff / investment;
1:         return ir;
1:     }
1: 
1:     public QuoteDataBean pingTwoPhase(String symbol) throws Exception {
1:         Log.error("TradeJpaCm:pingTwoPhase - is not implemented for this runtime mode");
1:         throw new UnsupportedOperationException("TradeJpaCm:pingTwoPhase - is not implemented for this runtime mode");
1:     }
1: 
1:     class quotePriceComparator implements java.util.Comparator {
1:         public int compare(Object quote1, Object quote2) {
1:             double change1 = ((QuoteDataBean) quote1).getChange();
1:             double change2 = ((QuoteDataBean) quote2).getChange();
1:             return new Double(change2).compareTo(change1);
1:         }
1:     }
1: 
1:     /**
1:      * Get mode - returns the persistence mode (TradeConfig.JPA)
1:      * 
0:      * @return int mode
1:      */
0:     public int getMode() {
0:         return TradeConfig.JPA_CM;
1:     }
1: 
1: }
============================================================================