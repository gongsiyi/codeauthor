1:5bd3bf6: package org.apache.aries.subsystem.itests;
3:5bd3bf6: 
1:f8a980d: import static org.junit.Assert.assertEquals;
1:4b2d185: import static org.junit.Assert.assertNotNull;
1:5bd3bf6: import static org.junit.Assert.assertSame;
1:5bd3bf6: import static org.junit.Assert.fail;
1:5bd3bf6: 
1:5bd3bf6: import java.io.File;
1:5bd3bf6: import java.io.IOException;
1:5bd3bf6: import java.util.Collections;
1:5bd3bf6: import java.util.HashMap;
1:5bd3bf6: import java.util.Map;
1:5bd3bf6: 
1:5bd3bf6: import org.apache.aries.subsystem.AriesSubsystem;
1:5bd3bf6: import org.apache.aries.subsystem.core.internal.BasicRequirement;
1:5bd3bf6: import org.apache.aries.util.filesystem.FileSystem;
1:5bd3bf6: import org.apache.aries.util.filesystem.IDirectory;
1:5bd3bf6: import org.easymock.EasyMock;
1:f8a980d: import org.eclipse.equinox.region.Region;
1:e179326: import org.eclipse.equinox.region.RegionFilter;
1:5bd3bf6: import org.junit.Test;
1:57b6627: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:57b6627: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:4b2d185: import org.osgi.framework.Constants;
1:4b2d185: import org.osgi.framework.Version;
1:4b2d185: import org.osgi.framework.namespace.IdentityNamespace;
1:5bd3bf6: import org.osgi.framework.namespace.PackageNamespace;
1:e179326: import org.osgi.resource.Namespace;
1:5bd3bf6: import org.osgi.resource.Requirement;
1:5bd3bf6: import org.osgi.resource.Resource;
1:5bd3bf6: import org.osgi.service.subsystem.Subsystem;
1:5bd3bf6: import org.osgi.service.subsystem.SubsystemConstants;
1:5bd3bf6: import org.osgi.service.subsystem.SubsystemException;
1:5bd3bf6: 
1:57b6627: @ExamReactorStrategy(PerMethod.class)
1:5bd3bf6: public class AriesSubsystemTest extends SubsystemTest {
1:4b2d185: 	/*
1:5bd3bf6: 	 * Subsystem-SymbolicName: application.a.esa
1:5bd3bf6: 	 * Subsystem-Content: bundle.a.jar
1:5bd3bf6: 	 */
1:5bd3bf6: 	private static final String APPLICATION_A = "application.a.esa";
1:5bd3bf6: 	/*
1:4b2d185: 	 * Subsystem-SymbolicName: application.b.esa
1:4b2d185: 	 * Subsystem-Content: bundle.b.jar
1:4b2d185: 	 */
1:4b2d185: 	private static final String APPLICATION_B = "application.b.esa";
1:4b2d185: 	/*
1:5bd3bf6: 	 * Bundle-SymbolicName: bundle.a.jar
1:6e97b7a: 	 * Import-Package: org.osgi.framework,org.osgi.resource
1:5bd3bf6: 	 */
1:5bd3bf6: 	private static final String BUNDLE_A = "bundle.a.jar";
1:5bd3bf6: 	/*
1:4b2d185: 	 * Bundle-SymbolicName: bundle.b.jar
1:4b2d185: 	 * Import-Package: org.osgi.resource
1:4b2d185: 	 */
1:4b2d185: 	private static final String BUNDLE_B = "bundle.b.jar";
1:4b2d185: 	/*
1:5bd3bf6: 	 * Subsystem-SymbolicName: composite.a.esa
1:5bd3bf6: 	 * Subsystem-Type: osgi.subsystem.composite
1:5bd3bf6: 	 */
1:5bd3bf6: 	private static final String COMPOSITE_A = "composite.a.esa";
1:5bd3bf6: 	
1:57b6627: 	private void createApplicationA() throws IOException {
1:5bd3bf6: 		createApplicationAManifest();
1:5bd3bf6: 		createSubsystem(APPLICATION_A, BUNDLE_A);
2:5bd3bf6: 	}
1:5bd3bf6: 	
1:57b6627: 	private void createApplicationB() throws IOException {
1:4b2d185: 		createApplicationBManifest();
1:4b2d185: 		createSubsystem(APPLICATION_B, BUNDLE_B);
1:4b2d185: 	}
1:4b2d185: 	
1:57b6627: 	private void createApplicationAManifest() throws IOException {
1:5bd3bf6: 		Map<String, String> attributes = new HashMap<String, String>();
1:5bd3bf6: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:5bd3bf6: 		createManifest(APPLICATION_A + ".mf", attributes);
1:5bd3bf6: 	}
1:5bd3bf6: 	
1:57b6627: 	private void createApplicationBManifest() throws IOException {
1:4b2d185: 		Map<String, String> attributes = new HashMap<String, String>();
1:4b2d185: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:4b2d185: 		createManifest(APPLICATION_B + ".mf", attributes);
1:4b2d185: 	}
1:4b2d185: 	
1:57b6627: 	private void createBundleA() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_A), importPackage("org.osgi.framework,org.osgi.resource"));
1:4b2d185: 	}
1:4b2d185: 	
1:57b6627: 	private void createBundleB() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_B), importPackage("org.osgi.resource"));
1:5bd3bf6: 	}
1:5bd3bf6: 	
1:57b6627: 	private void createCompositeA() throws IOException {
1:5bd3bf6: 		createCompositeAManifest();
1:4b2d185: 		createSubsystem(COMPOSITE_A, BUNDLE_B, APPLICATION_B);
1:5bd3bf6: 	}
1:5bd3bf6: 	
1:57b6627: 	private void createCompositeAManifest() throws IOException {
1:5bd3bf6: 		Map<String, String> attributes = new HashMap<String, String>();
1:5bd3bf6: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1:5bd3bf6: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:4b2d185: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, 
1:4b2d185: 				BUNDLE_B + ';' + IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE + "=\"[0,0]\","
1:4b2d185: 				+ APPLICATION_B + ';' + IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE + "=\"[0,0]\";" + IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE + '=' + SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1:6e97b7a: 		attributes.put(Constants.IMPORT_PACKAGE, "org.osgi.resource");
1:5bd3bf6: 		createManifest(COMPOSITE_A + ".mf", attributes);
1:5bd3bf6: 	}
1:5bd3bf6: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:5bd3bf6: 		createBundleA();
1:4b2d185: 		createBundleB();
1:5bd3bf6: 		createApplicationA();
1:4b2d185: 		createApplicationB();
1:5bd3bf6: 		createCompositeA();
1:5bd3bf6: 	}
1:5bd3bf6: 	
1:e179326: 	/*
1:f8a980d: 	 * The region copy process when adding additional requirements should
1:f8a980d: 	 * keep all edges, not just the ones running between parent and child. This
1:f8a980d: 	 * is of particular concern with regard to the connections all subsystem
1:f8a980d: 	 * regions have with the root region to allow the subsystem services
1:f8a980d: 	 * through. However, it may also be of concern if the region digraph is
1:f8a980d: 	 * modified outside of the subsystems API.
1:f8a980d: 	 */
1:f8a980d: 	@Test
1:f8a980d: 	public void testAddRequirementsKeepsEdgesOtherThanParentChild() throws Exception {
1:f8a980d: 		AriesSubsystem compositeA = (AriesSubsystem)installSubsystemFromFile(COMPOSITE_A);
1:2aab796: 		try {
1:2aab796: 			AriesSubsystem applicationB = (AriesSubsystem)getConstituentAsSubsystem(compositeA, APPLICATION_B, null, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1:2aab796: 			Region bRegion = getRegion(applicationB);
1:2aab796: 			// One edge to parent for import package. One edge to root for subsystem
1:2aab796: 			// service.
1:2aab796: 			assertEquals("Wrong number of edges", 2, bRegion.getEdges().size());
1:2aab796: 			Requirement requirement = new BasicRequirement.Builder()
1:2aab796: 					.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:2aab796: 					.directive(
1:2aab796: 							PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
1:2aab796: 							"(osgi.wiring.package=org.osgi.framework)")
1:2aab796: 					.resource(EasyMock.createMock(Resource.class))
1:2aab796: 					.build();
1:2aab796: 			applicationB.addRequirements(Collections.singleton(requirement));
1:2aab796: 			bRegion = getRegion(applicationB);
1:2aab796: 			// Still one edge to parent for import package. One edge to root for 
1:2aab796: 			// subsystem service.
1:2aab796: 			assertEquals("Wrong number of edges", 2, bRegion.getEdges().size());
1:2aab796: 			Region rootRegion = getRegion(getRootSubsystem());
1:2aab796: 			// The root region won't be the tail region for any connection unless
1:2aab796: 			// manually added.
1:2aab796: 			assertEquals("Wrong number of edges", 0, rootRegion.getEdges().size());
1:2aab796: 			// Manually add a connection from root to application B.
1:2aab796: 			rootRegion.connectRegion(
1:2aab796: 					bRegion, 
1:2aab796: 					rootRegion.getRegionDigraph().createRegionFilterBuilder().allow(
1:2aab796: 							"com.foo", 
1:2aab796: 							"(bar=b)").build());
1:2aab796: 			// The root region should now have an edge.
1:2aab796: 			assertEquals("Wrong number of edges", 1, rootRegion.getEdges().size());
1:2aab796: 			// Add another requirement to force a copy.
1:2aab796: 			requirement = new BasicRequirement.Builder()
1:2aab796: 					.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:2aab796: 					.directive(
1:2aab796: 							PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
1:2aab796: 							"(osgi.wiring.package=org.osgi.framework.wiring)")
1:2aab796: 					.resource(EasyMock.createMock(Resource.class))
1:2aab796: 					.build();
1:2aab796: 			applicationB.addRequirements(Collections.singleton(requirement));
1:2aab796: 			rootRegion = getRegion(getRootSubsystem());
1:2aab796: 			// The root region should still have its edge.
1:2aab796: 			assertEquals("Wrong number of edges", 1, rootRegion.getEdges().size());
1:2aab796: 			bRegion = getRegion(applicationB);
1:2aab796: 			// Still one edge to parent for import package. One edge to root for 
1:2aab796: 			// subsystem service.
1:2aab796: 			assertEquals("Wrong number of edges", 2, bRegion.getEdges().size());
1:2aab796: 		}
1:2aab796: 		finally {
1:2aab796: 			uninstallSubsystemSilently(compositeA);
1:2aab796: 		}
1:f8a980d: 	}
1:f8a980d: 	
1:f8a980d: 	/*
1:4b2d185: 	 * Test the AriesSubsystem.addRequirements(Collection<Requirement>) method.
1:4b2d185: 	 * 
1:4b2d185: 	 * There are several things to consider for this test.
1:4b2d185: 	 * 
1:4b2d185: 	 * (1) Installing a child subsystem before the requirement has been added
1:4b2d185: 	 *     should fail.
1:4b2d185: 	 * (2) Installing a child subsystem after the requirement has been added
1:4b2d185: 	 *     should succeed.
1:4b2d185: 	 * (3) The newly created region should contain all of the bundles from the
1:4b2d185: 	 *     old one.
1:4b2d185: 	 * (4) The connections between the subsystem with the added requirement and
1:4b2d185: 	 *     its parents should be reestablished.
1:4b2d185: 	 * (5) The connections between the subsystem with the added requirement and
1:4b2d185: 	 *     its children should be reestablished.
1:4b2d185: 	 */
1:5bd3bf6: 	@Test
1:5bd3bf6: 	public void testAddRequirements() throws Exception {
1:4b2d185: 		AriesSubsystem compositeA = (AriesSubsystem)installSubsystemFromFile(COMPOSITE_A);
1:5bd3bf6: 		try {
1:4b2d185: 			startSubsystem(compositeA);
1:4b2d185: 			assertCompositeABefore(compositeA);
1:4b2d185: 			// Test that the installation of applicationA fails.
1:5bd3bf6: 			try {
2:5bd3bf6: 				installSubsystemFromFile(compositeA, APPLICATION_A);
1:4b2d185: 				fail("Subsystem should not have installed due to unresolved org.osgi.framework package requirement");
1:5bd3bf6: 			} catch (SubsystemException e) {
1:5bd3bf6: 				// Okay.
1:5bd3bf6: 			}
1:4b2d185: 			// Add the org.osgi.framework package requirement.
1:f8a980d: 			Requirement requirement = new BasicRequirement.Builder()
2:f8a980d: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
2:f8a980d: 				.directive(
2:f8a980d: 					PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
1:f8a980d: 					"(osgi.wiring.package=org.osgi.framework)")
2:f8a980d: 					.resource(EasyMock.createMock(Resource.class))
2:f8a980d: 					.build();
1:4b2d185: 			compositeA.addRequirements(Collections.singleton(requirement));
1:4b2d185: 			// Test that the bundles were copied over to the newly created region.
1:4b2d185: 			assertCompositeABefore(compositeA);
1:4b2d185: 			// Test that the parent connections were reestablished.
1:4b2d185: 			assertRefreshAndResolve(Collections.singletonList(getConstituentAsBundle(compositeA, BUNDLE_B, null, null)));
1:4b2d185: 			// Test that the child connections were reestablished.
1:4b2d185: 			assertRefreshAndResolve(Collections.singletonList(getConstituentAsBundle(getConstituentAsSubsystem(compositeA, APPLICATION_B, null, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION), BUNDLE_B, null, null)));
1:4b2d185: 			// Test that the installation of applicationA succeeds.
1:4b2d185: 			AriesSubsystem applicationA;
1:5bd3bf6: 			try {
1:4b2d185: 				applicationA = (AriesSubsystem)installSubsystemFromFile(compositeA, APPLICATION_A);
1:4b2d185: 				startSubsystem(applicationA);
1:5bd3bf6: 			} catch (SubsystemException e) {
1:4b2d185: 				fail("Subsystem should have installed and started");
1:5bd3bf6: 			}
1:4b2d185: 			assertCompositeAAfter(compositeA);
1:4b2d185: 		}
1:4b2d185: 		finally {
1:4b2d185: 			stopAndUninstallSubsystemSilently(compositeA);
1:5bd3bf6: 		}
1:5bd3bf6: 	}
1:5bd3bf6: 	
1:5bd3bf6: 	/*
1:e179326: 	 * Aries Subsystems uses Equinox Region Digraph as its isolation engine.
1:e179326: 	 * Digraph has a "special" namespace value that tells the region to allow
1:e179326: 	 * everything a bundle offers. This test ensures that a correctly formatted
1:e179326: 	 * requirement in that namespace works as expected.
1:e179326: 	 */
1:e179326: 	@Test
1:e179326: 	public void testAddRequirementWithVisibleBundleNamespace() throws Exception {
1:e179326: 		Requirement requirement = new BasicRequirement.Builder()
1:e179326: 				.namespace(RegionFilter.VISIBLE_BUNDLE_NAMESPACE)
1:e179326: 				.directive(Namespace.REQUIREMENT_FILTER_DIRECTIVE, "(id=0)")
1:e179326: 				.resource(EasyMock.createMock(Resource.class)).build();
1:e179326: 		AriesSubsystem compositeA = (AriesSubsystem) installSubsystemFromFile(COMPOSITE_A);
1:e179326: 		try {
1:e179326: 			startSubsystem(compositeA);
1:e179326: 			// Test that the installation of applicationA fails.
1:e179326: 			try {
1:e179326: 				installSubsystemFromFile(compositeA, APPLICATION_A);
1:e179326: 				fail("Subsystem should not have installed due to unresolved org.osgi.framework package requirement");
1:e179326: 			} catch (SubsystemException e) {
1:e179326: 				// Okay.
1:e179326: 			}
1:e179326: 			// Add the requirement with the region digraph specific namespace.
1:e179326: 			compositeA.addRequirements(Collections.singleton(requirement));
1:e179326: 			// Test that the installation and startup of applicationA succeeds.
1:e179326: 			AriesSubsystem applicationA;
1:e179326: 			try {
1:e179326: 				applicationA = (AriesSubsystem) installSubsystemFromFile(
1:e179326: 						compositeA, APPLICATION_A);
1:e179326: 				startSubsystem(applicationA);
1:e179326: 			} catch (SubsystemException e) {
1:e179326: 				fail("Subsystem should have installed and started");
1:e179326: 			}
1:e179326: 			assertCompositeAAfter(compositeA);
1:e179326: 		} finally {
1:e179326: 			stopAndUninstallSubsystemSilently(compositeA);
1:e179326: 		}
1:e179326: 	}
1:e179326: 	
1:5bd3bf6: 	@Test
1:5bd3bf6: 	public void testInstallIDirectory() {
1:5bd3bf6: 		File file = new File(COMPOSITE_A);
1:5bd3bf6: 		IDirectory directory = FileSystem.getFSRoot(file);
1:5bd3bf6: 		try {
1:5bd3bf6: 			AriesSubsystem compositeA = getRootAriesSubsystem().install(COMPOSITE_A, directory);
2:5bd3bf6: 			uninstallSubsystemSilently(compositeA);
1:5bd3bf6: 		}
1:5bd3bf6: 		catch (Exception e) {
1:5bd3bf6: 			fail("Installation from IDirectory should have succeeded");
1:5bd3bf6: 		}
1:5bd3bf6: 	}
1:5bd3bf6: 	
1:5bd3bf6: 	@Test
1:5bd3bf6: 	public void testServiceRegistrations() {
1:5bd3bf6: 		Subsystem root1 = null;
1:5bd3bf6: 		try {
1:5bd3bf6: 			root1 = getRootSubsystem();
1:5bd3bf6: 		}
1:5bd3bf6: 		catch (Exception e) {
1:5bd3bf6: 			fail(Subsystem.class.getName() + " service not registered");
1:5bd3bf6: 		}
1:5bd3bf6: 		AriesSubsystem root2 = null;
1:5bd3bf6: 		try {
1:5bd3bf6: 			root2 = getRootAriesSubsystem();
1:5bd3bf6: 		}
1:5bd3bf6: 		catch (Exception e) {
1:5bd3bf6: 			fail(AriesSubsystem.class.getName() + " service not registered");
1:5bd3bf6: 		}
1:5bd3bf6: 		assertSame("Services should be the same instance", root1, root2);
1:5bd3bf6: 	}
1:4b2d185: 	
1:4b2d185: 	private void assertCompositeAAfter(Subsystem compositeA) {
1:4b2d185: 		// applicationA, applicationB, bundleB, region context bundle
1:4b2d185: 		assertConstituents(4, compositeA);
1:4b2d185: 		assertConstituent(compositeA, APPLICATION_A, null, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1:4b2d185: 		assertConstituent(compositeA, APPLICATION_B, null, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1:4b2d185: 		assertConstituent(compositeA, BUNDLE_B);
1:4b2d185: 		assertNotNull("Bundle not in region", getRegion(compositeA).getBundle(BUNDLE_B, Version.emptyVersion));
1:4b2d185: 		assertConstituent(compositeA, "org.osgi.service.subsystem.region.context.1", Version.parseVersion("1"));
1:4b2d185: 		// applicationA, applicationB
1:4b2d185: 		assertChildren(2, compositeA);
1:4b2d185: 		assertApplicationA(assertChild(compositeA, APPLICATION_A));
1:4b2d185: 		assertApplicationB(assertChild(compositeA, APPLICATION_B));
1:4b2d185: 	}
1:4b2d185: 	
1:4b2d185: 	private void assertCompositeABefore(Subsystem compositeA) {
1:4b2d185: 		// applicationB, bundleB, region context bundle
1:4b2d185: 		assertConstituents(3, compositeA);
1:4b2d185: 		assertConstituent(compositeA, APPLICATION_B, null, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1:4b2d185: 		assertConstituent(compositeA, BUNDLE_B);
1:4b2d185: 		assertNotNull("Bundle not in region", getRegion(compositeA).getBundle(BUNDLE_B, Version.emptyVersion));
1:4b2d185: 		assertConstituent(compositeA, "org.osgi.service.subsystem.region.context.1", Version.parseVersion("1"));
1:4b2d185: 		// applicationB
1:4b2d185: 		assertChildren(1, compositeA);
1:4b2d185: 		assertApplicationB(assertChild(compositeA, APPLICATION_B));
1:4b2d185: 	}
1:4b2d185: 	
1:4b2d185: 	private void assertApplicationA(Subsystem applicationA) {
1:4b2d185: 		// bundleA, region context bundle
1:4b2d185: 		assertConstituents(2, applicationA);
1:4b2d185: 		assertConstituent(applicationA, BUNDLE_A);
1:4b2d185: 		// The subsystem id is 4 instead of 3 due to the first installation that failed.
1:4b2d185: 		assertConstituent(applicationA, "org.osgi.service.subsystem.region.context.4", Version.parseVersion("1"));
1:4b2d185: 		assertChildren(0, applicationA);
1:4b2d185: 	}
1:4b2d185: 	
1:4b2d185: 	private void assertApplicationB(Subsystem applicationB) {
1:4b2d185: 		// bundleB, region context bundle
1:4b2d185: 		assertConstituents(2, applicationB);
1:4b2d185: 		assertConstituent(applicationB, BUNDLE_B);
1:4b2d185: 		assertConstituent(applicationB, "org.osgi.service.subsystem.region.context.2", Version.parseVersion("1"));
1:4b2d185: 		assertChildren(0, applicationB);
1:4b2d185: 	}
1:5bd3bf6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2aab796
/////////////////////////////////////////////////////////////////////////
1: 		try {
1: 			AriesSubsystem applicationB = (AriesSubsystem)getConstituentAsSubsystem(compositeA, APPLICATION_B, null, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1: 			Region bRegion = getRegion(applicationB);
1: 			// One edge to parent for import package. One edge to root for subsystem
1: 			// service.
1: 			assertEquals("Wrong number of edges", 2, bRegion.getEdges().size());
1: 			Requirement requirement = new BasicRequirement.Builder()
1: 					.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 					.directive(
1: 							PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
1: 							"(osgi.wiring.package=org.osgi.framework)")
1: 					.resource(EasyMock.createMock(Resource.class))
1: 					.build();
1: 			applicationB.addRequirements(Collections.singleton(requirement));
1: 			bRegion = getRegion(applicationB);
1: 			// Still one edge to parent for import package. One edge to root for 
1: 			// subsystem service.
1: 			assertEquals("Wrong number of edges", 2, bRegion.getEdges().size());
1: 			Region rootRegion = getRegion(getRootSubsystem());
1: 			// The root region won't be the tail region for any connection unless
1: 			// manually added.
1: 			assertEquals("Wrong number of edges", 0, rootRegion.getEdges().size());
1: 			// Manually add a connection from root to application B.
1: 			rootRegion.connectRegion(
1: 					bRegion, 
1: 					rootRegion.getRegionDigraph().createRegionFilterBuilder().allow(
1: 							"com.foo", 
1: 							"(bar=b)").build());
1: 			// The root region should now have an edge.
1: 			assertEquals("Wrong number of edges", 1, rootRegion.getEdges().size());
1: 			// Add another requirement to force a copy.
1: 			requirement = new BasicRequirement.Builder()
1: 					.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 					.directive(
1: 							PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
1: 							"(osgi.wiring.package=org.osgi.framework.wiring)")
1: 					.resource(EasyMock.createMock(Resource.class))
1: 					.build();
1: 			applicationB.addRequirements(Collections.singleton(requirement));
1: 			rootRegion = getRegion(getRootSubsystem());
1: 			// The root region should still have its edge.
1: 			assertEquals("Wrong number of edges", 1, rootRegion.getEdges().size());
1: 			bRegion = getRegion(applicationB);
1: 			// Still one edge to parent for import package. One edge to root for 
1: 			// subsystem service.
1: 			assertEquals("Wrong number of edges", 2, bRegion.getEdges().size());
1: 		}
1: 		finally {
1: 			uninstallSubsystemSilently(compositeA);
1: 		}
commit:f8a980d
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.equinox.region.Region;
/////////////////////////////////////////////////////////////////////////
1: 	 * The region copy process when adding additional requirements should
1: 	 * keep all edges, not just the ones running between parent and child. This
1: 	 * is of particular concern with regard to the connections all subsystem
1: 	 * regions have with the root region to allow the subsystem services
1: 	 * through. However, it may also be of concern if the region digraph is
1: 	 * modified outside of the subsystems API.
1: 	 */
1: 	@Test
1: 	public void testAddRequirementsKeepsEdgesOtherThanParentChild() throws Exception {
1: 		AriesSubsystem compositeA = (AriesSubsystem)installSubsystemFromFile(COMPOSITE_A);
0: 		AriesSubsystem applicationB = (AriesSubsystem)getConstituentAsSubsystem(compositeA, APPLICATION_B, null, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
0: 		Region bRegion = getRegion(applicationB);
0: 		// One edge to parent for import package. One edge to root for subsystem
0: 		// service.
0: 		assertEquals("Wrong number of edges", 2, bRegion.getEdges().size());
1: 		Requirement requirement = new BasicRequirement.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.directive(
1: 						PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
1: 						"(osgi.wiring.package=org.osgi.framework)")
1: 				.resource(EasyMock.createMock(Resource.class))
1: 				.build();
0: 		applicationB.addRequirements(Collections.singleton(requirement));
0: 		bRegion = getRegion(applicationB);
0: 		// Still one edge to parent for import package. One edge to root for 
0: 		// subsystem service.
0: 		assertEquals("Wrong number of edges", 2, bRegion.getEdges().size());
0: 		Region rootRegion = getRegion(getRootSubsystem());
0: 		// The root region won't be the tail region for any connection unless
0: 		// manually added.
0: 		assertEquals("Wrong number of edges", 0, rootRegion.getEdges().size());
0: 		// Manually add a connection from root to application B.
0: 		rootRegion.connectRegion(
0: 				bRegion, 
0: 				rootRegion.getRegionDigraph().createRegionFilterBuilder().allow(
0: 						"com.foo", 
0: 						"(bar=b)").build());
0: 		// The root region should now have an edge.
0: 		assertEquals("Wrong number of edges", 1, rootRegion.getEdges().size());
0: 		// Add another requirement to force a copy.
0: 		requirement = new BasicRequirement.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.directive(
1: 						PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
0: 						"(osgi.wiring.package=org.osgi.framework.wiring)")
1: 				.resource(EasyMock.createMock(Resource.class))
1: 				.build();
0: 		applicationB.addRequirements(Collections.singleton(requirement));
0: 		rootRegion = getRegion(getRootSubsystem());
0: 		// The root region should still have its edge.
0: 		assertEquals("Wrong number of edges", 1, rootRegion.getEdges().size());
0: 		bRegion = getRegion(applicationB);
0: 		// Still one edge to parent for import package. One edge to root for 
0: 		// subsystem service.
0: 		assertEquals("Wrong number of edges", 2, bRegion.getEdges().size());
1: 	}
1: 	
1: 	/*
commit:e179326
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.equinox.region.RegionFilter;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Namespace;
/////////////////////////////////////////////////////////////////////////
1: 	/*
1: 	 * Aries Subsystems uses Equinox Region Digraph as its isolation engine.
1: 	 * Digraph has a "special" namespace value that tells the region to allow
1: 	 * everything a bundle offers. This test ensures that a correctly formatted
1: 	 * requirement in that namespace works as expected.
1: 	 */
1: 	@Test
1: 	public void testAddRequirementWithVisibleBundleNamespace() throws Exception {
1: 		Requirement requirement = new BasicRequirement.Builder()
1: 				.namespace(RegionFilter.VISIBLE_BUNDLE_NAMESPACE)
1: 				.directive(Namespace.REQUIREMENT_FILTER_DIRECTIVE, "(id=0)")
1: 				.resource(EasyMock.createMock(Resource.class)).build();
1: 		AriesSubsystem compositeA = (AriesSubsystem) installSubsystemFromFile(COMPOSITE_A);
1: 		try {
1: 			startSubsystem(compositeA);
1: 			// Test that the installation of applicationA fails.
1: 			try {
1: 				installSubsystemFromFile(compositeA, APPLICATION_A);
1: 				fail("Subsystem should not have installed due to unresolved org.osgi.framework package requirement");
1: 			} catch (SubsystemException e) {
1: 				// Okay.
1: 			}
1: 			// Add the requirement with the region digraph specific namespace.
1: 			compositeA.addRequirements(Collections.singleton(requirement));
1: 			// Test that the installation and startup of applicationA succeeds.
1: 			AriesSubsystem applicationA;
1: 			try {
1: 				applicationA = (AriesSubsystem) installSubsystemFromFile(
1: 						compositeA, APPLICATION_A);
1: 				startSubsystem(applicationA);
1: 			} catch (SubsystemException e) {
1: 				fail("Subsystem should have installed and started");
1: 			}
1: 			assertCompositeAAfter(compositeA);
1: 		} finally {
1: 			stopAndUninstallSubsystemSilently(compositeA);
1: 		}
1: 	}
1: 	
commit:4b2d185
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.namespace.IdentityNamespace;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	 * Subsystem-SymbolicName: application.b.esa
1: 	 * Subsystem-Content: bundle.b.jar
1: 	 */
1: 	private static final String APPLICATION_B = "application.b.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Import-Package: org.osgi.resource
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	/*
/////////////////////////////////////////////////////////////////////////
0: 	private static void createApplicationB() throws IOException {
1: 		createApplicationBManifest();
1: 		createSubsystem(APPLICATION_B, BUNDLE_B);
1: 	}
1: 	
0: 	private static void createApplicationBManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1: 		createManifest(APPLICATION_B + ".mf", attributes);
1: 	}
1: 	
0: 	private static void createBundleB() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.IMPORT_PACKAGE, "org.osgi.resource");
0: 		createBundle(BUNDLE_B, headers);
1: 	}
1: 	
1: 		createSubsystem(COMPOSITE_A, BUNDLE_B, APPLICATION_B);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, 
1: 				BUNDLE_B + ';' + IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE + "=\"[0,0]\","
1: 				+ APPLICATION_B + ';' + IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE + "=\"[0,0]\";" + IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE + '=' + SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
/////////////////////////////////////////////////////////////////////////
1: 		createBundleB();
1: 		createApplicationB();
/////////////////////////////////////////////////////////////////////////
1: 	/*
1: 	 * Test the AriesSubsystem.addRequirements(Collection<Requirement>) method.
1: 	 * 
1: 	 * There are several things to consider for this test.
1: 	 * 
1: 	 * (1) Installing a child subsystem before the requirement has been added
1: 	 *     should fail.
1: 	 * (2) Installing a child subsystem after the requirement has been added
1: 	 *     should succeed.
1: 	 * (3) The newly created region should contain all of the bundles from the
1: 	 *     old one.
1: 	 * (4) The connections between the subsystem with the added requirement and
1: 	 *     its parents should be reestablished.
1: 	 * (5) The connections between the subsystem with the added requirement and
1: 	 *     its children should be reestablished.
1: 	 */
1: 		AriesSubsystem compositeA = (AriesSubsystem)installSubsystemFromFile(COMPOSITE_A);
1: 			startSubsystem(compositeA);
1: 			assertCompositeABefore(compositeA);
1: 			// Test that the installation of applicationA fails.
1: 				fail("Subsystem should not have installed due to unresolved org.osgi.framework package requirement");
1: 			// Add the org.osgi.framework package requirement.
0: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
0: 				.directive(
0: 					PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
0: 					"(osgi.wiring.package=org.osgi.framework)")
1: 			compositeA.addRequirements(Collections.singleton(requirement));
1: 			// Test that the bundles were copied over to the newly created region.
1: 			assertCompositeABefore(compositeA);
1: 			// Test that the parent connections were reestablished.
1: 			assertRefreshAndResolve(Collections.singletonList(getConstituentAsBundle(compositeA, BUNDLE_B, null, null)));
1: 			// Test that the child connections were reestablished.
1: 			assertRefreshAndResolve(Collections.singletonList(getConstituentAsBundle(getConstituentAsSubsystem(compositeA, APPLICATION_B, null, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION), BUNDLE_B, null, null)));
1: 			// Test that the installation of applicationA succeeds.
1: 			AriesSubsystem applicationA;
1: 				applicationA = (AriesSubsystem)installSubsystemFromFile(compositeA, APPLICATION_A);
1: 				startSubsystem(applicationA);
1: 				fail("Subsystem should have installed and started");
1: 			assertCompositeAAfter(compositeA);
1: 		}
1: 		finally {
1: 			stopAndUninstallSubsystemSilently(compositeA);
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	private void assertCompositeAAfter(Subsystem compositeA) {
1: 		// applicationA, applicationB, bundleB, region context bundle
1: 		assertConstituents(4, compositeA);
1: 		assertConstituent(compositeA, APPLICATION_A, null, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1: 		assertConstituent(compositeA, APPLICATION_B, null, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1: 		assertConstituent(compositeA, BUNDLE_B);
1: 		assertNotNull("Bundle not in region", getRegion(compositeA).getBundle(BUNDLE_B, Version.emptyVersion));
1: 		assertConstituent(compositeA, "org.osgi.service.subsystem.region.context.1", Version.parseVersion("1"));
1: 		// applicationA, applicationB
1: 		assertChildren(2, compositeA);
1: 		assertApplicationA(assertChild(compositeA, APPLICATION_A));
1: 		assertApplicationB(assertChild(compositeA, APPLICATION_B));
1: 	}
1: 	
1: 	private void assertCompositeABefore(Subsystem compositeA) {
1: 		// applicationB, bundleB, region context bundle
1: 		assertConstituents(3, compositeA);
1: 		assertConstituent(compositeA, APPLICATION_B, null, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1: 		assertConstituent(compositeA, BUNDLE_B);
1: 		assertNotNull("Bundle not in region", getRegion(compositeA).getBundle(BUNDLE_B, Version.emptyVersion));
1: 		assertConstituent(compositeA, "org.osgi.service.subsystem.region.context.1", Version.parseVersion("1"));
1: 		// applicationB
1: 		assertChildren(1, compositeA);
1: 		assertApplicationB(assertChild(compositeA, APPLICATION_B));
1: 	}
1: 	
1: 	private void assertApplicationA(Subsystem applicationA) {
1: 		// bundleA, region context bundle
1: 		assertConstituents(2, applicationA);
1: 		assertConstituent(applicationA, BUNDLE_A);
1: 		// The subsystem id is 4 instead of 3 due to the first installation that failed.
1: 		assertConstituent(applicationA, "org.osgi.service.subsystem.region.context.4", Version.parseVersion("1"));
1: 		assertChildren(0, applicationA);
1: 	}
1: 	
1: 	private void assertApplicationB(Subsystem applicationB) {
1: 		// bundleB, region context bundle
1: 		assertConstituents(2, applicationB);
1: 		assertConstituent(applicationB, BUNDLE_B);
1: 		assertConstituent(applicationB, "org.osgi.service.subsystem.region.context.2", Version.parseVersion("1"));
1: 		assertChildren(0, applicationB);
1: 	}
commit:6e97b7a
/////////////////////////////////////////////////////////////////////////
1: 	 * Import-Package: org.osgi.framework,org.osgi.resource
/////////////////////////////////////////////////////////////////////////
0: 		headers.put(Constants.IMPORT_PACKAGE, "org.osgi.framework,org.osgi.resource");
/////////////////////////////////////////////////////////////////////////
1: 		attributes.put(Constants.IMPORT_PACKAGE, "org.osgi.resource");
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.AriesSubsystem;
1: import org.apache.aries.subsystem.core.internal.BasicRequirement;
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.easymock.EasyMock;
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
0: import aQute.lib.osgi.Constants;
1: 
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
1: public class AriesSubsystemTest extends SubsystemTest {
1: 	/*
1: 	 * Subsystem-SymbolicName: application.a.esa
1: 	 * Subsystem-Content: bundle.a.jar
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
0: 	 * Import-Package: org.osgi.framework
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Subsystem-SymbolicName: composite.a.esa
1: 	 * Subsystem-Type: osgi.subsystem.composite
1: 	 */
1: 	private static final String COMPOSITE_A = "composite.a.esa";
1: 	
0: 	private static void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1: 	}
1: 	
0: 	private static void createApplicationAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 	}
1: 	
0: 	private static void createBundleA() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.IMPORT_PACKAGE, "org.osgi.framework");
0: 		createBundle(BUNDLE_A, headers);
1: 	}
1: 	
0: 	private static void createCompositeA() throws IOException {
1: 		createCompositeAManifest();
0: 		createSubsystem(COMPOSITE_A);
1: 	}
1: 	
0: 	private static void createCompositeAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		createManifest(COMPOSITE_A + ".mf", attributes);
1: 	}
1: 	
0: 	private static boolean createdTestFiles;
0: 	@Before
0: 	public static void createTestFiles() throws Exception {
0: 		if (createdTestFiles)
0: 			return;
1: 		createBundleA();
1: 		createApplicationA();
1: 		createCompositeA();
0: 		createdTestFiles = true;
1: 	}
1: 	
0: 	public void setUp() throws Exception {
0: 		super.setUp();
1: 	}
1: 	
1: 	@Test
1: 	public void testAddRequirements() throws Exception {
0: 		Subsystem compositeA = installSubsystemFromFile(COMPOSITE_A);
1: 		try {
1: 			try {
1: 				installSubsystemFromFile(compositeA, APPLICATION_A);
0: 				fail("Subsystem should not have installed");
1: 			} catch (SubsystemException e) {
1: 				// Okay.
1: 			}
0: 			Requirement requirement = new BasicRequirement.Builder()
0: 					.namespace(PackageNamespace.PACKAGE_NAMESPACE)
0: 					.directive(
0: 							PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
0: 							"(osgi.wiring.package=org.osgi.framework)")
0: 					.resource(EasyMock.createMock(Resource.class))
0: 					.build();
0: 			((AriesSubsystem)compositeA).addRequirements(Collections.singleton(requirement));
1: 			try {
1: 				installSubsystemFromFile(compositeA, APPLICATION_A);
1: 			} catch (SubsystemException e) {
0: 				fail("Subsystem should have installed");
1: 			}
0: 		} finally {
1: 			uninstallSubsystemSilently(compositeA);
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testInstallIDirectory() {
1: 		File file = new File(COMPOSITE_A);
1: 		IDirectory directory = FileSystem.getFSRoot(file);
1: 		try {
1: 			AriesSubsystem compositeA = getRootAriesSubsystem().install(COMPOSITE_A, directory);
1: 			uninstallSubsystemSilently(compositeA);
1: 		}
1: 		catch (Exception e) {
1: 			fail("Installation from IDirectory should have succeeded");
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testServiceRegistrations() {
1: 		Subsystem root1 = null;
1: 		try {
1: 			root1 = getRootSubsystem();
1: 		}
1: 		catch (Exception e) {
1: 			fail(Subsystem.class.getName() + " service not registered");
1: 		}
1: 		AriesSubsystem root2 = null;
1: 		try {
1: 			root2 = getRootAriesSubsystem();
1: 		}
1: 		catch (Exception e) {
1: 			fail(AriesSubsystem.class.getName() + " service not registered");
1: 		}
1: 		assertSame("Services should be the same instance", root1, root2);
1: 	}
1: }
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
/////////////////////////////////////////////////////////////////////////
1: @ExamReactorStrategy(PerMethod.class)
/////////////////////////////////////////////////////////////////////////
1: 	private void createApplicationA() throws IOException {
1: 	private void createApplicationB() throws IOException {
1: 	private void createApplicationAManifest() throws IOException {
1: 	private void createApplicationBManifest() throws IOException {
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), importPackage("org.osgi.framework,org.osgi.resource"));
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B), importPackage("org.osgi.resource"));
1: 	private void createCompositeA() throws IOException {
1: 	private void createCompositeAManifest() throws IOException {
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
============================================================================