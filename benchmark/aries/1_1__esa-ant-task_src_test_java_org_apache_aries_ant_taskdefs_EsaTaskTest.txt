1:02735d7: /**
1:02735d7:  * Licensed to the Apache Software Foundation (ASF) under one
1:02735d7:  * or more contributor license agreements.  See the NOTICE file
1:02735d7:  * distributed with this work for additional information
1:02735d7:  * regarding copyright ownership.  The ASF licenses this file
1:02735d7:  * to you under the Apache License, Version 2.0 (the
1:02735d7:  * "License"); you may not use this file except in compliance
1:02735d7:  * with the License.  You may obtain a copy of the License at
1:02735d7:  *
1:02735d7:  *  http://www.apache.org/licenses/LICENSE-2.0
1:02735d7:  *
1:02735d7:  * Unless required by applicable law or agreed to in writing,
1:02735d7:  * software distributed under the License is distributed on an
1:02735d7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:02735d7:  * KIND, either express or implied.  See the License for the
1:02735d7:  * specific language governing permissions and limitations
1:02735d7:  * under the License.
1:02735d7:  */
1:02735d7: 
1:02735d7: package org.apache.aries.ant.taskdefs;
1:02735d7: 
1:02735d7: import static org.junit.Assert.assertFalse;
1:02735d7: import static org.junit.Assert.assertNotNull;
1:02735d7: import static org.junit.Assert.assertNull;
1:02735d7: import static org.junit.Assert.assertTrue;
1:02735d7: import static org.junit.Assert.fail;
1:02735d7: 
1:02735d7: import java.io.File;
1:02735d7: import java.io.IOException;
1:02735d7: import java.util.zip.ZipEntry;
1:02735d7: import java.util.zip.ZipFile;
1:02735d7: 
1:02735d7: import org.apache.tools.ant.Project;
1:02735d7: import org.apache.tools.ant.types.FileSet;
1:02735d7: import org.junit.Test;
1:02735d7: 
1:02735d7: /**
1:02735d7:  * @version $Id: $
1:02735d7:  */
1:02735d7: public class EsaTaskTest {
1:02735d7: 
1:02735d7: 	@Test
1:02735d7: 	public void generateArchiveNoManifest() {
1:02735d7: 
1:02735d7: 		File srcDir = new File("../src/test/resources");
1:02735d7: 
1:02735d7: 		File destfile = new File("target/esa-test1.esa");
1:02735d7: 		if (destfile.exists()) {
1:02735d7: 			destfile.delete();
1:02735d7: 		}
1:02735d7: 
1:02735d7: 		assertFalse(destfile.exists());
1:02735d7: 		EsaTask esaTask = new EsaTask();
1:02735d7: 		Project testProject = new Project();
1:02735d7: 		esaTask.setProject(testProject);
1:02735d7: 		FileSet fileSet = new FileSet();
1:02735d7: 		fileSet.setDir(srcDir);
1:02735d7: 		fileSet.setIncludes("*.jar");
1:02735d7: 		esaTask.addFileset(fileSet);
1:02735d7: 		esaTask.setDestFile(destfile);
1:02735d7: 		esaTask.setSymbolicName("esatask-test");
1:02735d7: 		esaTask.setVersion("1.0.0");
1:02735d7: 		esaTask.execute();
1:02735d7: 		assertTrue(destfile.exists());
1:02735d7: 
1:02735d7: 		try {
1:02735d7: 			ZipFile esaArchive = new ZipFile(destfile);
1:02735d7: 			assertNotNull(esaArchive);
1:02735d7: 			ZipEntry subsystemManifest =
1:02735d7: 				esaArchive.getEntry("OSGI-INF/SUBSYSTEM.MF");
1:02735d7: 			assertNull(subsystemManifest);
1:02735d7: 		}
1:02735d7: 		catch (IOException e) {
1:02735d7: 			fail(e.getMessage());
1:02735d7: 		}
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	@Test
1:02735d7: 	public void generateArchiveWithFileManifest() {
1:02735d7: 
1:02735d7: 		File srcDir = new File("../src/test/resources");
1:02735d7: 
1:02735d7: 		File destfile = new File("target/esa-test2.esa");
1:02735d7: 		if (destfile.exists()) {
1:02735d7: 			destfile.delete();
1:02735d7: 		}
1:02735d7: 
1:02735d7: 		assertFalse(destfile.exists());
1:02735d7: 		EsaTask esaTask = new EsaTask();
1:02735d7: 		Project testProject = new Project();
1:02735d7: 		esaTask.setProject(testProject);
1:02735d7: 		FileSet fileSet = new FileSet();
1:02735d7: 		fileSet.setDir(srcDir);
1:02735d7: 		fileSet.setIncludes("*.jar");
1:02735d7: 		esaTask.addFileset(fileSet);
1:02735d7: 		esaTask.setDestFile(destfile);
1:02735d7: 		esaTask.setSymbolicName("esatask-test");
1:02735d7: 		esaTask.setVersion("1.0.0");
1:02735d7: 		esaTask.setManifest(new File(srcDir, "SUBSYSTEM.MF"));
1:02735d7: 		esaTask.execute();
1:02735d7: 		assertTrue(destfile.exists());
1:02735d7: 
1:02735d7: 		try {
1:02735d7: 			ZipFile esaArchive = new ZipFile(destfile);
1:02735d7: 			assertNotNull(esaArchive);
1:02735d7: 			ZipEntry subsystemManifest =
1:02735d7: 				esaArchive.getEntry("OSGI-INF/SUBSYSTEM.MF");
1:02735d7: 			assertNotNull(subsystemManifest);
1:02735d7: 		}
1:02735d7: 		catch (IOException e) {
1:02735d7: 			fail(e.getMessage());
1:02735d7: 		}
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	@Test
1:02735d7: 	public void generateArchiveWithNewManifest() {
1:02735d7: 
1:02735d7: 		File srcDir = new File("../src/test/resources");
1:02735d7: 		assertTrue(srcDir.exists());
1:02735d7: 
1:02735d7: 		File destfile = new File("target/esa-test.esa");
1:02735d7: 
1:02735d7: 		if (destfile.exists()) {
1:02735d7: 			destfile.delete();
1:02735d7: 		}
1:02735d7: 
1:02735d7: 		assertFalse(destfile.exists());
1:02735d7: 
1:02735d7: 		EsaTask esaTask = new EsaTask();
1:02735d7: 
1:02735d7: 		Project testProject = new Project();
1:02735d7: 
1:02735d7: 		esaTask.setProject(testProject);
1:02735d7: 
1:02735d7: 		FileSet fileSet = new FileSet();
1:02735d7: 		fileSet.setDir(srcDir);
1:02735d7: 		fileSet.setIncludes("*.jar");
1:02735d7: 
1:02735d7: 		esaTask.addFileset(fileSet);
1:02735d7: 		esaTask.setDestFile(destfile);
1:02735d7: 		esaTask.setSymbolicName("esatask-test");
1:02735d7: 		esaTask.setName("ESA Test Task");
1:02735d7: 		esaTask.setVersion("1.0.0");
1:02735d7: 		esaTask.setGenerateManifest(true);
1:02735d7: 		esaTask.execute();
1:02735d7: 		assertTrue(destfile.exists());
1:02735d7: 
1:02735d7: 		try {
1:02735d7: 			ZipFile esaArchive = new ZipFile(destfile);
1:02735d7: 			assertNotNull(esaArchive);
1:02735d7: 			ZipEntry subsystemManifest =
1:02735d7: 				esaArchive.getEntry("OSGI-INF/SUBSYSTEM.MF");
1:02735d7: 			assertNotNull(subsystemManifest);
1:02735d7: 		}
1:02735d7: 		catch (IOException e) {
1:02735d7: 			fail(e.getMessage());
1:02735d7: 		}
1:02735d7: 	}
1:02735d7: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:02735d7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.ant.taskdefs;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipFile;
1: 
1: import org.apache.tools.ant.Project;
1: import org.apache.tools.ant.types.FileSet;
1: import org.junit.Test;
1: 
1: /**
1:  * @version $Id: $
1:  */
1: public class EsaTaskTest {
1: 
1: 	@Test
1: 	public void generateArchiveNoManifest() {
1: 
1: 		File srcDir = new File("../src/test/resources");
1: 
1: 		File destfile = new File("target/esa-test1.esa");
1: 		if (destfile.exists()) {
1: 			destfile.delete();
1: 		}
1: 
1: 		assertFalse(destfile.exists());
1: 		EsaTask esaTask = new EsaTask();
1: 		Project testProject = new Project();
1: 		esaTask.setProject(testProject);
1: 		FileSet fileSet = new FileSet();
1: 		fileSet.setDir(srcDir);
1: 		fileSet.setIncludes("*.jar");
1: 		esaTask.addFileset(fileSet);
1: 		esaTask.setDestFile(destfile);
1: 		esaTask.setSymbolicName("esatask-test");
1: 		esaTask.setVersion("1.0.0");
1: 		esaTask.execute();
1: 		assertTrue(destfile.exists());
1: 
1: 		try {
1: 			ZipFile esaArchive = new ZipFile(destfile);
1: 			assertNotNull(esaArchive);
1: 			ZipEntry subsystemManifest =
1: 				esaArchive.getEntry("OSGI-INF/SUBSYSTEM.MF");
1: 			assertNull(subsystemManifest);
1: 		}
1: 		catch (IOException e) {
1: 			fail(e.getMessage());
1: 		}
1: 	}
1: 
1: 	@Test
1: 	public void generateArchiveWithFileManifest() {
1: 
1: 		File srcDir = new File("../src/test/resources");
1: 
1: 		File destfile = new File("target/esa-test2.esa");
1: 		if (destfile.exists()) {
1: 			destfile.delete();
1: 		}
1: 
1: 		assertFalse(destfile.exists());
1: 		EsaTask esaTask = new EsaTask();
1: 		Project testProject = new Project();
1: 		esaTask.setProject(testProject);
1: 		FileSet fileSet = new FileSet();
1: 		fileSet.setDir(srcDir);
1: 		fileSet.setIncludes("*.jar");
1: 		esaTask.addFileset(fileSet);
1: 		esaTask.setDestFile(destfile);
1: 		esaTask.setSymbolicName("esatask-test");
1: 		esaTask.setVersion("1.0.0");
1: 		esaTask.setManifest(new File(srcDir, "SUBSYSTEM.MF"));
1: 		esaTask.execute();
1: 		assertTrue(destfile.exists());
1: 
1: 		try {
1: 			ZipFile esaArchive = new ZipFile(destfile);
1: 			assertNotNull(esaArchive);
1: 			ZipEntry subsystemManifest =
1: 				esaArchive.getEntry("OSGI-INF/SUBSYSTEM.MF");
1: 			assertNotNull(subsystemManifest);
1: 		}
1: 		catch (IOException e) {
1: 			fail(e.getMessage());
1: 		}
1: 	}
1: 
1: 	@Test
1: 	public void generateArchiveWithNewManifest() {
1: 
1: 		File srcDir = new File("../src/test/resources");
1: 		assertTrue(srcDir.exists());
1: 
1: 		File destfile = new File("target/esa-test.esa");
1: 
1: 		if (destfile.exists()) {
1: 			destfile.delete();
1: 		}
1: 
1: 		assertFalse(destfile.exists());
1: 
1: 		EsaTask esaTask = new EsaTask();
1: 
1: 		Project testProject = new Project();
1: 
1: 		esaTask.setProject(testProject);
1: 
1: 		FileSet fileSet = new FileSet();
1: 		fileSet.setDir(srcDir);
1: 		fileSet.setIncludes("*.jar");
1: 
1: 		esaTask.addFileset(fileSet);
1: 		esaTask.setDestFile(destfile);
1: 		esaTask.setSymbolicName("esatask-test");
1: 		esaTask.setName("ESA Test Task");
1: 		esaTask.setVersion("1.0.0");
1: 		esaTask.setGenerateManifest(true);
1: 		esaTask.execute();
1: 		assertTrue(destfile.exists());
1: 
1: 		try {
1: 			ZipFile esaArchive = new ZipFile(destfile);
1: 			assertNotNull(esaArchive);
1: 			ZipEntry subsystemManifest =
1: 				esaArchive.getEntry("OSGI-INF/SUBSYSTEM.MF");
1: 			assertNotNull(subsystemManifest);
1: 		}
1: 		catch (IOException e) {
1: 			fail(e.getMessage());
1: 		}
1: 	}
1: }
============================================================================