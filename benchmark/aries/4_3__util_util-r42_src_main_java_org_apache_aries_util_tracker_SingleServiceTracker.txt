1:76e1d79: /*
1:76e1d79:  * Licensed to the Apache Software Foundation (ASF) under one
1:76e1d79:  * or more contributor license agreements.  See the NOTICE file
1:76e1d79:  * distributed with this work for additional information
1:76e1d79:  * regarding copyright ownership.  The ASF licenses this file
1:76e1d79:  * to you under the Apache License, Version 2.0 (the
1:76e1d79:  * "License"); you may not use this file except in compliance
1:76e1d79:  * with the License.  You may obtain a copy of the License at
1:76e1d79:  *
1:76e1d79:  *   http://www.apache.org/licenses/LICENSE-2.0
1:76e1d79:  *
1:76e1d79:  * Unless required by applicable law or agreed to in writing,
1:76e1d79:  * software distributed under the License is distributed on an
1:76e1d79:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:76e1d79:  * KIND, either express or implied.  See the License for the
1:76e1d79:  * specific language governing permissions and limitations
1:76e1d79:  * under the License.
1:76e1d79:  */
1:047a2ae: package org.apache.aries.util.tracker;
2:76e1d79: 
1:76e1d79: import java.util.concurrent.atomic.AtomicBoolean;
1:76e1d79: import java.util.concurrent.atomic.AtomicReference;
1:76e1d79: 
1:76e1d79: import org.osgi.framework.BundleContext;
1:76e1d79: import org.osgi.framework.Constants;
1:30f1ccc: import org.osgi.framework.FrameworkUtil;
1:76e1d79: import org.osgi.framework.InvalidSyntaxException;
1:76e1d79: import org.osgi.framework.ServiceEvent;
1:76e1d79: import org.osgi.framework.ServiceListener;
1:76e1d79: import org.osgi.framework.ServiceReference;
1:76e1d79: 
1:76e1d79: public final class SingleServiceTracker<T> 
1:76e1d79: {
1:76e1d79:   public static interface SingleServiceListener
1:76e1d79:   {
1:76e1d79:     public void serviceFound();
1:76e1d79:     public void serviceLost();
1:76e1d79:     public void serviceReplaced();
1:76e1d79:   }
1:76e1d79:   
1:76e1d79:   private final BundleContext ctx;
1:76e1d79:   private final String className;
1:76e1d79:   private final AtomicReference<T> service = new AtomicReference<T>();
1:76e1d79:   private final AtomicReference<ServiceReference> ref = new AtomicReference<ServiceReference>();
1:76e1d79:   private final AtomicBoolean open = new AtomicBoolean(false);
1:76e1d79:   private final SingleServiceListener serviceListener;
1:ced4cad:   private String filterString;
1:30f1ccc:   private boolean isCustomFilter;
1:ced4cad: 
1:76e1d79:   private final ServiceListener listener = new ServiceListener()
1:76e1d79:   {
1:76e1d79:     public void serviceChanged(ServiceEvent event) 
1:76e1d79:     {
1:c6fe749:       if (open.get()) {
1:c6fe749:         if (event.getType() == ServiceEvent.UNREGISTERING) {
1:76e1d79:           ServiceReference deadRef = event.getServiceReference();
1:76e1d79:           if (deadRef.equals(ref.get())) {
1:76e1d79:             findMatchingReference(deadRef);
1:76e1d79:           }
1:c6fe749:         } else if (event.getType() == ServiceEvent.REGISTERED && ref.get() == null) {
1:c6fe749:           findMatchingReference(null);
1:76e1d79:         }
1:76e1d79:       }
1:76e1d79:     }
1:76e1d79:   };
1:76e1d79:   
1:76e1d79:   public SingleServiceTracker(BundleContext context, Class<T> clazz, SingleServiceListener sl)
1:76e1d79:   {
1:76e1d79:     ctx = context;
1:76e1d79:     this.className = clazz.getName();
1:76e1d79:     serviceListener = sl;
1:30f1ccc:     this.filterString = '(' + Constants.OBJECTCLASS + '=' + className + ')';
1:76e1d79:   }
1:76e1d79:   
1:ced4cad:   public SingleServiceTracker(BundleContext context, Class<T> clazz, String filterString, SingleServiceListener sl) throws InvalidSyntaxException
1:ced4cad:   {
1:ced4cad:     this(context, clazz, sl);
1:30f1ccc:     if (filterString != null) {
1:30f1ccc:     	this.filterString = "(&" + this.filterString + filterString + ')';
1:30f1ccc:     	isCustomFilter = true;
1:30f1ccc:     }
1:30f1ccc:     FrameworkUtil.createFilter(this.filterString);
1:ced4cad:   }
1:ced4cad:   
1:76e1d79:   public T getService()
1:76e1d79:   {
1:76e1d79:     return service.get();
1:76e1d79:   }
1:76e1d79:   
1:76e1d79:   public ServiceReference getServiceReference()
1:76e1d79:   {
1:76e1d79:     return ref.get();
1:76e1d79:   }
1:76e1d79:   
1:76e1d79:   public void open()
1:76e1d79:   {
1:76e1d79:     if (open.compareAndSet(false, true)) {
1:76e1d79:       try {
1:ced4cad:         ctx.addServiceListener(listener, filterString);
1:76e1d79:         findMatchingReference(null);
1:76e1d79:       } catch (InvalidSyntaxException e) {
1:76e1d79:         // this can never happen. (famous last words :)
1:76e1d79:       }
1:76e1d79:     }
1:76e1d79:   }
1:76e1d79: 
1:76e1d79:   private void findMatchingReference(ServiceReference original) {
1:76e1d79:     boolean clear = true;
1:30f1ccc:     ServiceReference ref;
1:30f1ccc:     if(isCustomFilter) {
1:30f1ccc:       try {
1:30f1ccc:         ServiceReference[] refs = ctx.getServiceReferences(className, filterString);
1:30f1ccc:         if(refs == null || refs.length == 0) {
1:30f1ccc:           ref = null;
1:30f1ccc:         } else {
1:30f1ccc:     	  ref = refs[0];
1:30f1ccc:         }
1:30f1ccc:       } catch (InvalidSyntaxException e) {
1:30f1ccc:         //This can't happen, we'd have blown up in the constructor
1:30f1ccc:         ref = null;
1:30f1ccc:       }
1:30f1ccc:     } else {
1:30f1ccc: 	  ref = ctx.getServiceReference(className);
1:30f1ccc:     }
1:30f1ccc:     if (ref != null) {
1:76e1d79:       @SuppressWarnings("unchecked")
1:76e1d79:       T service = (T) ctx.getService(ref);
1:76e1d79:       if (service != null) {
1:76e1d79:         clear = false;
1:76e1d79:         
1:76e1d79:         // We do the unget out of the lock so we don't exit this class while holding a lock.
1:76e1d79:         if (!!!update(original, ref, service)) {
1:76e1d79:           ctx.ungetService(ref);
1:76e1d79:         }
1:76e1d79:       }
1:2f8a811:     } else if (original == null){
1:2f8a811:       clear = false;
1:2f8a811:     }
1:76e1d79:     
1:76e1d79:     if (clear) {
1:76e1d79:       update(original, null, null);
1:76e1d79:     }
1:76e1d79:   }
1:76e1d79:   
1:76e1d79:   private boolean update(ServiceReference deadRef, ServiceReference newRef, T service)
1:76e1d79:   {
1:76e1d79:     boolean result = false;
1:76e1d79:     int foundLostReplaced = -1;
1:76e1d79: 
1:b09dd90:     // Make sure we don't try to get a lock on null
1:b09dd90:     Object lock;
1:b09dd90:     
1:4ac82fd:     // we have to choose our lock.
1:b09dd90:     if (newRef != null) lock = newRef;
1:b09dd90:     else if (deadRef != null) lock = deadRef;
1:b09dd90:     else lock = this;
1:b09dd90:     
1:4ac82fd:     // This lock is here to ensure that no two threads can set the ref and service
1:4ac82fd:     // at the same time. 
1:b09dd90:     synchronized (lock) {
1:76e1d79:       if (open.get()) {
1:76e1d79:         result = this.ref.compareAndSet(deadRef, newRef);
1:76e1d79:         if (result) {
1:76e1d79:           this.service.set(service);
1:76e1d79: 
1:76e1d79:           if (deadRef == null && newRef != null) foundLostReplaced = 0;
1:76e1d79:           if (deadRef != null && newRef == null) foundLostReplaced = 1;
1:76e1d79:           if (deadRef != null && newRef != null) foundLostReplaced = 2;
1:76e1d79:         }
1:76e1d79:       }
1:76e1d79:     }
1:76e1d79: 
1:76e1d79:     if (serviceListener != null) {
1:76e1d79:       if (foundLostReplaced == 0) serviceListener.serviceFound();
1:76e1d79:       else if (foundLostReplaced == 1) serviceListener.serviceLost();
1:76e1d79:       else if (foundLostReplaced == 2) serviceListener.serviceReplaced();
1:76e1d79:     }
1:76e1d79: 
1:76e1d79:     return result;
1:76e1d79:   }
1:76e1d79: 
1:76e1d79:   public void close()
1:76e1d79:   {
1:76e1d79:     if (open.compareAndSet(true, false)) {
1:76e1d79:       ctx.removeServiceListener(listener);
1:76e1d79:       
1:76e1d79:       synchronized (this) {
1:76e1d79:         ServiceReference deadRef = ref.getAndSet(null);
1:76e1d79:         service.set(null);
1:76e1d79:         if (deadRef != null) ctx.ungetService(deadRef);
1:76e1d79:       }
1:76e1d79:     }
1:76e1d79:   }
1:76e1d79: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:30f1ccc
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.FrameworkUtil;
/////////////////////////////////////////////////////////////////////////
1:   private boolean isCustomFilter;
/////////////////////////////////////////////////////////////////////////
1:     this.filterString = '(' + Constants.OBJECTCLASS + '=' + className + ')';
1:     if (filterString != null) {
1:     	this.filterString = "(&" + this.filterString + filterString + ')';
1:     	isCustomFilter = true;
1:     }
1:     FrameworkUtil.createFilter(this.filterString);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     ServiceReference ref;
1:     if(isCustomFilter) {
1:       try {
1:         ServiceReference[] refs = ctx.getServiceReferences(className, filterString);
1:         if(refs == null || refs.length == 0) {
1:           ref = null;
1:         } else {
1:     	  ref = refs[0];
1:         }
1:       } catch (InvalidSyntaxException e) {
1:         //This can't happen, we'd have blown up in the constructor
1:         ref = null;
1:       }
1:     } else {
1: 	  ref = ctx.getServiceReference(className);
1:     }
1:     if (ref != null) {
commit:047a2ae
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.tracker;
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ced4cad
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.Filter;
/////////////////////////////////////////////////////////////////////////
1:   private String filterString;
0:   private Filter filter;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public SingleServiceTracker(BundleContext context, Class<T> clazz, String filterString, SingleServiceListener sl) throws InvalidSyntaxException
1:   {
1:     this(context, clazz, sl);
0:     this.filterString = filterString;
0:     if (filterString != null) filter = context.createFilter(filterString);
1:   }
1:   
/////////////////////////////////////////////////////////////////////////
0:         String filterString = '(' + Constants.OBJECTCLASS + '=' + className + ')';
0:         if (filter != null) filterString = "(&" + filterString + filter + ')';
1:         ctx.addServiceListener(listener, filterString);
/////////////////////////////////////////////////////////////////////////
0:     if (ref != null && (filter == null || filter.match(ref))) {
commit:c827e88
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.util;
commit:2f8a811
/////////////////////////////////////////////////////////////////////////
1:     } else if (original == null){
1:       clear = false;
1:     }
commit:4ac82fd
/////////////////////////////////////////////////////////////////////////
1:     // we have to choose our lock.
1:     // This lock is here to ensure that no two threads can set the ref and service
1:     // at the same time. 
commit:b09dd90
/////////////////////////////////////////////////////////////////////////
1:     // Make sure we don't try to get a lock on null
1:     Object lock;
1:     
1:     if (newRef != null) lock = newRef;
1:     else if (deadRef != null) lock = deadRef;
1:     else lock = this;
1:     
1:     synchronized (lock) {
commit:76e1d79
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.util;
1: 
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceEvent;
1: import org.osgi.framework.ServiceListener;
1: import org.osgi.framework.ServiceReference;
1: 
1: public final class SingleServiceTracker<T> 
1: {
1:   public static interface SingleServiceListener
1:   {
1:     public void serviceFound();
1:     public void serviceLost();
1:     public void serviceReplaced();
1:   }
1:   
1:   private final BundleContext ctx;
1:   private final String className;
1:   private final AtomicReference<T> service = new AtomicReference<T>();
1:   private final AtomicReference<ServiceReference> ref = new AtomicReference<ServiceReference>();
1:   private final AtomicBoolean open = new AtomicBoolean(false);
1:   private final SingleServiceListener serviceListener;
1:   
1:   private final ServiceListener listener = new ServiceListener()
1:   {
1:     public void serviceChanged(ServiceEvent event) 
1:     {
0:       if (open.get() && event.getType() == ServiceEvent.UNREGISTERING) {
1:         ServiceReference deadRef = event.getServiceReference();
1:         if (deadRef.equals(ref.get())) {
1:           findMatchingReference(deadRef);
1:         }
1:       }
1:     }
1:   };
1:   
1:   public SingleServiceTracker(BundleContext context, Class<T> clazz, SingleServiceListener sl)
1:   {
1:     ctx = context;
1:     this.className = clazz.getName();
1:     serviceListener = sl;
1:   }
1:   
1:   public T getService()
1:   {
1:     return service.get();
1:   }
1:   
1:   public ServiceReference getServiceReference()
1:   {
1:     return ref.get();
1:   }
1:   
1:   public void open()
1:   {
1:     if (open.compareAndSet(false, true)) {
1:       try {
0:         ctx.addServiceListener(listener, '(' + Constants.OBJECTCLASS + '=' + className + ')');
1:         findMatchingReference(null);
1:       } catch (InvalidSyntaxException e) {
1:         // this can never happen. (famous last words :)
1:       }
1:     }
1:   }
1: 
1:   private void findMatchingReference(ServiceReference original) {
1:     boolean clear = true;
0:     ServiceReference ref = ctx.getServiceReference(className);
0:     if (ref != null) {
1:       @SuppressWarnings("unchecked")
1:       T service = (T) ctx.getService(ref);
1:       if (service != null) {
1:         clear = false;
1:         
1:         // We do the unget out of the lock so we don't exit this class while holding a lock.
1:         if (!!!update(original, ref, service)) {
1:           ctx.ungetService(ref);
1:         }
1:       }
1:     } 
1:     
1:     if (clear) {
1:       update(original, null, null);
1:     }
1:   }
1:   
1:   private boolean update(ServiceReference deadRef, ServiceReference newRef, T service)
1:   {
1:     boolean result = false;
1:     int foundLostReplaced = -1;
1: 
0:     synchronized (newRef) {
1:       if (open.get()) {
1:         result = this.ref.compareAndSet(deadRef, newRef);
1:         if (result) {
1:           this.service.set(service);
1: 
1:           if (deadRef == null && newRef != null) foundLostReplaced = 0;
1:           if (deadRef != null && newRef == null) foundLostReplaced = 1;
1:           if (deadRef != null && newRef != null) foundLostReplaced = 2;
1:         }
1:       }
1:     }
1: 
1:     if (serviceListener != null) {
1:       if (foundLostReplaced == 0) serviceListener.serviceFound();
1:       else if (foundLostReplaced == 1) serviceListener.serviceLost();
1:       else if (foundLostReplaced == 2) serviceListener.serviceReplaced();
1:     }
1: 
1:     return result;
1:   }
1: 
1:   public void close()
1:   {
1:     if (open.compareAndSet(true, false)) {
1:       ctx.removeServiceListener(listener);
1:       
1:       synchronized (this) {
1:         ServiceReference deadRef = ref.getAndSet(null);
1:         service.set(null);
1:         if (deadRef != null) ctx.ungetService(deadRef);
1:       }
1:     }
1:   }
1: }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:b6c4135
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.util.tracker;
commit:c6fe749
/////////////////////////////////////////////////////////////////////////
1:       if (open.get()) {
1:         if (event.getType() == ServiceEvent.UNREGISTERING) {
0:           ServiceReference deadRef = event.getServiceReference();
0:           if (deadRef.equals(ref.get())) {
0:             findMatchingReference(deadRef);
0:           }
1:         } else if (event.getType() == ServiceEvent.REGISTERED && ref.get() == null) {
1:           findMatchingReference(null);
============================================================================