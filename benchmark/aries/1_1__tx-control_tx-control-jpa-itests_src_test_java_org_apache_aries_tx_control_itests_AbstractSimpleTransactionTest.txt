1:e7c1ea5: /*
1:e7c1ea5:  * Licensed to the Apache Software Foundation (ASF) under one
1:e7c1ea5:  * or more contributor license agreements.  See the NOTICE file
1:e7c1ea5:  * distributed with this work for additional information
1:e7c1ea5:  * regarding copyright ownership.  The ASF licenses this file
1:e7c1ea5:  * to you under the Apache License, Version 2.0 (the
1:e7c1ea5:  * "License"); you may not use this file except in compliance
1:e7c1ea5:  * with the License.  You may obtain a copy of the License at
1:e7c1ea5:  *
1:e7c1ea5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e7c1ea5:  *
1:e7c1ea5:  * Unless required by applicable law or agreed to in writing,
1:e7c1ea5:  * software distributed under the License is distributed on an
1:e7c1ea5:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:e7c1ea5:  * KIND, either express or implied.  See the License for the
1:e7c1ea5:  * specific language governing permissions and limitations
1:e7c1ea5:  * under the License.
1:e7c1ea5:  */
1:e7c1ea5: package org.apache.aries.tx.control.itests;
1:e7c1ea5: 
1:74e23ff: import static java.util.Arrays.stream;
1:e7c1ea5: import static org.junit.Assert.assertEquals;
1:e7c1ea5: 
1:e7c1ea5: import java.util.List;
1:74e23ff: import java.util.Optional;
1:e7c1ea5: 
1:e7c1ea5: import javax.persistence.criteria.CriteriaBuilder;
1:e7c1ea5: import javax.persistence.criteria.CriteriaQuery;
1:e7c1ea5: 
1:e7c1ea5: import org.apache.aries.tx.control.itests.entity.Message;
1:74e23ff: import org.junit.Assume;
1:e7c1ea5: import org.junit.Test;
1:74e23ff: import org.osgi.framework.Bundle;
1:74e23ff: import org.osgi.service.transaction.control.TransactionControl;
1:74e23ff: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
1:e7c1ea5: 
1:96a0efa: public abstract class AbstractSimpleTransactionTest extends AbstractJPATransactionTest {
1:e7c1ea5: 
1:e7c1ea5: 	@Test
1:e7c1ea5: 	public void testTx() {
1:e7c1ea5: 		
1:e7c1ea5: 		Message message = new Message();
1:e7c1ea5: 		message.message = "Hello World!";
1:e7c1ea5: 
1:e7c1ea5: 		txControl.required(() -> {
1:e7c1ea5: 				em.persist(message);
1:e7c1ea5: 				return null;
1:e7c1ea5: 			});
1:e7c1ea5: 
1:e7c1ea5: 		assertEquals("Hello World!", txControl.notSupported(() -> {
1:e7c1ea5: 			return em.find(Message.class, message.id).message;
1:e7c1ea5: 		}));
1:e7c1ea5: 	}
1:74e23ff: 
1:74e23ff: 	@Test
1:e7c1ea5: 	public void testRollback() {
1:e7c1ea5: 		
1:e7c1ea5: 		Message message = new Message();
1:e7c1ea5: 		message.message = "Hello World!";
1:e7c1ea5: 		
1:e7c1ea5: 		txControl.required(() -> {
1:e7c1ea5: 				em.persist(message);
1:e7c1ea5: 				txControl.setRollbackOnly();
1:e7c1ea5: 				return null;
1:e7c1ea5: 			});
1:e7c1ea5: 		
1:e7c1ea5: 		assertEquals(Long.valueOf(0), txControl.notSupported(() -> {
1:e7c1ea5: 			CriteriaBuilder cb = em.getCriteriaBuilder();
1:e7c1ea5: 			CriteriaQuery<Long> countQuery = cb.createQuery(Long.class);
1:e7c1ea5: 			countQuery.select(cb.count(countQuery.from(Message.class)));
1:e7c1ea5: 			
1:e7c1ea5: 			return em.createQuery(countQuery).getSingleResult();
1:e7c1ea5: 		}));
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Test
1:e7c1ea5: 	public void testNestedTx() {
1:e7c1ea5: 		Message message = new Message();
1:e7c1ea5: 		message.message = "Hello World!";
1:e7c1ea5: 		
1:e7c1ea5: 		Message message2 = new Message();
1:e7c1ea5: 		message2.message = "Hello Nested World!";
1:e7c1ea5: 		
1:e7c1ea5: 		txControl.required(() -> {
1:e7c1ea5: 			em.persist(message);
1:e7c1ea5: 			
1:e7c1ea5: 			txControl.requiresNew(() -> {
1:e7c1ea5: 				em.persist(message2);
1:e7c1ea5: 				return null;
1:e7c1ea5: 			});
1:e7c1ea5: 			
1:e7c1ea5: 			return null;
1:e7c1ea5: 		});
1:e7c1ea5: 		
1:e7c1ea5: 		List<Message> results = txControl.notSupported(() -> {
1:e7c1ea5: 				CriteriaBuilder cb = em.getCriteriaBuilder();
1:e7c1ea5: 				CriteriaQuery<Message> query = cb.createQuery(Message.class);
1:e7c1ea5: 				query.orderBy(cb.asc(query.from(Message.class).get("message")));
1:e7c1ea5: 				
1:e7c1ea5: 				return em.createQuery(query).getResultList();
1:e7c1ea5: 			});
1:e7c1ea5: 		
1:e7c1ea5: 		System.out.println(results);
1:e7c1ea5: 		
1:e7c1ea5: 		assertEquals(2, results.size());
1:e7c1ea5: 		assertEquals("Hello Nested World!", results.get(0).message);
1:e7c1ea5: 		assertEquals("Hello World!", results.get(1).message);
1:e7c1ea5: 	}
1:e7c1ea5: 	
1:e7c1ea5: 	@Test
1:e7c1ea5: 	public void testNestedTxOuterRollback() {
1:e7c1ea5: 		Message message = new Message();
1:e7c1ea5: 		message.message = "Hello World!";
1:e7c1ea5: 		
1:e7c1ea5: 		Message message2 = new Message();
1:e7c1ea5: 		message2.message = "Hello Nested World!";
1:e7c1ea5: 		
1:e7c1ea5: 		txControl.required(() -> {
1:e7c1ea5: 			// This will not end up in the database
1:e7c1ea5: 			em.persist(message);
1:e7c1ea5: 			
1:e7c1ea5: 			// This should only apply to the current transaction level
1:e7c1ea5: 			txControl.setRollbackOnly();
1:e7c1ea5: 
1:e7c1ea5: 			// This nested transaction will commit
1:e7c1ea5: 			txControl.requiresNew(() -> {
1:e7c1ea5: 				em.persist(message2);
1:e7c1ea5: 				return null;
1:e7c1ea5: 			});
1:e7c1ea5: 			
1:e7c1ea5: 			return null;
1:e7c1ea5: 		});
1:e7c1ea5: 		
1:e7c1ea5: 		List<Message> results = txControl.notSupported(() -> {
1:e7c1ea5: 				CriteriaBuilder cb = em.getCriteriaBuilder();
1:e7c1ea5: 				CriteriaQuery<Message> query = cb.createQuery(Message.class);
1:e7c1ea5: 				query.orderBy(cb.asc(query.from(Message.class).get("message")));
1:e7c1ea5: 				
1:e7c1ea5: 				return em.createQuery(query).getResultList();
1:e7c1ea5: 			});
1:e7c1ea5: 		
1:e7c1ea5: 		System.out.println(results);
1:e7c1ea5: 		
1:e7c1ea5: 		assertEquals(1, results.size());
1:e7c1ea5: 		assertEquals("Hello Nested World!", results.get(0).message);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Test
1:e7c1ea5: 	public void testNestedTxInnerRollback() {
1:e7c1ea5: 		
1:e7c1ea5: 		Message message = new Message();
1:e7c1ea5: 		message.message = "Hello World!";
1:e7c1ea5: 		
1:e7c1ea5: 		Message message2 = new Message();
1:e7c1ea5: 		message2.message = "Hello Nested World!";
1:e7c1ea5: 		
1:e7c1ea5: 		txControl.required(() -> {
1:e7c1ea5: 			// This will end up in the database
1:e7c1ea5: 			em.persist(message);
1:e7c1ea5: 
1:e7c1ea5: 			// This nested transaction will not commit
1:e7c1ea5: 			txControl.requiresNew(() -> {
1:e7c1ea5: 				em.persist(message2);
1:e7c1ea5: 				txControl.setRollbackOnly();
1:e7c1ea5: 				return null;
1:e7c1ea5: 			});
1:e7c1ea5: 			
1:e7c1ea5: 			return null;
1:e7c1ea5: 		});
1:e7c1ea5: 		
1:e7c1ea5: 		List<Message> results = txControl.notSupported(() -> {
1:e7c1ea5: 				CriteriaBuilder cb = em.getCriteriaBuilder();
1:e7c1ea5: 				CriteriaQuery<Message> query = cb.createQuery(Message.class);
1:e7c1ea5: 				query.orderBy(cb.asc(query.from(Message.class).get("message")));
1:e7c1ea5: 				
1:e7c1ea5: 				return em.createQuery(query).getResultList();
1:e7c1ea5: 			});
1:e7c1ea5: 		
1:e7c1ea5: 		System.out.println(results);
1:e7c1ea5: 		
1:e7c1ea5: 		assertEquals(1, results.size());
1:e7c1ea5: 		assertEquals("Hello World!", results.get(0).message);
1:e7c1ea5: 	}
1:e7c1ea5: 	
1:e7c1ea5: 	@Test
1:e7c1ea5: 	public void testRequiredInheritsTx() {
1:e7c1ea5: 		
1:e7c1ea5: 		Message message = new Message();
1:e7c1ea5: 		message.message = "Hello World!";
1:e7c1ea5: 		
1:e7c1ea5: 		Message message2 = new Message();
1:e7c1ea5: 		message2.message = "Hello Nested World!";
1:e7c1ea5: 		
1:e7c1ea5: 		txControl.required(() -> {
1:e7c1ea5: 			em.persist(message);
1:e7c1ea5: 
1:e7c1ea5: 			txControl.required(() -> {
1:e7c1ea5: 				em.persist(message2);
1:e7c1ea5: 				return null;
1:e7c1ea5: 			});
1:e7c1ea5: 			
1:e7c1ea5: 			return null;
1:e7c1ea5: 		});
1:e7c1ea5: 		
1:e7c1ea5: 		List<Message> results = txControl.notSupported(() -> {
1:e7c1ea5: 				CriteriaBuilder cb = em.getCriteriaBuilder();
1:e7c1ea5: 				CriteriaQuery<Message> query = cb.createQuery(Message.class);
1:e7c1ea5: 				query.orderBy(cb.asc(query.from(Message.class).get("message")));
1:e7c1ea5: 				
1:e7c1ea5: 				return em.createQuery(query).getResultList();
1:e7c1ea5: 			});
1:e7c1ea5: 		
1:e7c1ea5: 		System.out.println(results);
1:e7c1ea5: 		
1:e7c1ea5: 		assertEquals(2, results.size());
1:e7c1ea5: 		assertEquals("Hello Nested World!", results.get(0).message);
1:e7c1ea5: 		assertEquals("Hello World!", results.get(1).message);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Test
1:e7c1ea5: 	public void testSuspendedTx() {
1:e7c1ea5: 		
1:e7c1ea5: 		Message message = new Message();
1:e7c1ea5: 		message.message = "Hello World!";
1:e7c1ea5: 
1:e7c1ea5: 		txControl.required(() -> {
1:e7c1ea5: 				em.persist(message);
1:e7c1ea5: 				
1:e7c1ea5: 				assertEquals(Long.valueOf(0), txControl.notSupported(() -> {
1:e7c1ea5: 					CriteriaBuilder cb = em.getCriteriaBuilder();
1:e7c1ea5: 					CriteriaQuery<Long> countQuery = cb.createQuery(Long.class);
1:e7c1ea5: 					countQuery.select(cb.count(countQuery.from(Message.class)));
1:e7c1ea5: 					
1:e7c1ea5: 					return em.createQuery(countQuery).getSingleResult();
1:e7c1ea5: 				}));                
1:e7c1ea5: 				
1:e7c1ea5: 				return null;
1:e7c1ea5: 			});
1:e7c1ea5: 	}
1:e7c1ea5: 	
1:e7c1ea5: 	@Test
1:74e23ff: 	public void reassignTxControl() throws Exception {
1:74e23ff: 		
1:74e23ff: 		Optional<Bundle> bundle = stream(context.getBundles())
1:74e23ff: 				.filter(b -> b.getSymbolicName().equals("tx-control-provider-jpa-xa"))
1:74e23ff: 				.findAny();
1:74e23ff: 		Assume.assumeTrue(bundle.isPresent());
1:74e23ff: 		
1:74e23ff: 		bundle.get().stop();
1:74e23ff: 		bundle.get().start();
1:74e23ff: 		
1:74e23ff: 		txControl = getService(TransactionControl.class, 
1:74e23ff: 				System.getProperty(TX_CONTROL_FILTER), 5000);
1:74e23ff: 		
1:74e23ff: 		em = getService(JPAEntityManagerProvider.class, 5000).getResource(txControl); 
1:74e23ff: 		
1:74e23ff: 		testTx();
1:74e23ff: 	}
1:e7c1ea5: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:74e23ff
/////////////////////////////////////////////////////////////////////////
1: import static java.util.Arrays.stream;
1: import java.util.Optional;
1: import org.junit.Assume;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	@Test
1: 	public void reassignTxControl() throws Exception {
1: 		
1: 		Optional<Bundle> bundle = stream(context.getBundles())
1: 				.filter(b -> b.getSymbolicName().equals("tx-control-provider-jpa-xa"))
1: 				.findAny();
1: 		Assume.assumeTrue(bundle.isPresent());
1: 		
1: 		bundle.get().stop();
1: 		bundle.get().start();
1: 		
1: 		txControl = getService(TransactionControl.class, 
1: 				System.getProperty(TX_CONTROL_FILTER), 5000);
1: 		
1: 		em = getService(JPAEntityManagerProvider.class, 5000).getResource(txControl); 
1: 		
1: 		testTx();
1: 	}
commit:96a0efa
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractSimpleTransactionTest extends AbstractJPATransactionTest {
commit:e7c1ea5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.List;
1: 
1: import javax.persistence.criteria.CriteriaBuilder;
1: import javax.persistence.criteria.CriteriaQuery;
1: 
1: import org.apache.aries.tx.control.itests.entity.Message;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.PaxExam;
0: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
0: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: 
0: @RunWith(PaxExam.class)
0: @ExamReactorStrategy(PerClass.class)
0: public class SimpleTransactionTest extends AbstractJPATransactionTest {
1: 
1: 	@Test
1: 	public void testTx() {
1: 		
1: 		Message message = new Message();
1: 		message.message = "Hello World!";
1: 
1: 		txControl.required(() -> {
1: 				em.persist(message);
1: 				return null;
1: 			});
1: 
1: 		assertEquals("Hello World!", txControl.notSupported(() -> {
1: 			return em.find(Message.class, message.id).message;
1: 		}));
1: 	}
1: 
1: 	@Test
1: 	public void testRollback() {
1: 		
1: 		Message message = new Message();
1: 		message.message = "Hello World!";
1: 		
1: 		txControl.required(() -> {
1: 				em.persist(message);
1: 				txControl.setRollbackOnly();
1: 				return null;
1: 			});
1: 		
1: 		assertEquals(Long.valueOf(0), txControl.notSupported(() -> {
1: 			CriteriaBuilder cb = em.getCriteriaBuilder();
1: 			CriteriaQuery<Long> countQuery = cb.createQuery(Long.class);
1: 			countQuery.select(cb.count(countQuery.from(Message.class)));
1: 			
1: 			return em.createQuery(countQuery).getSingleResult();
1: 		}));
1: 	}
1: 
1: 	@Test
1: 	public void testNestedTx() {
1: 		Message message = new Message();
1: 		message.message = "Hello World!";
1: 		
1: 		Message message2 = new Message();
1: 		message2.message = "Hello Nested World!";
1: 		
1: 		txControl.required(() -> {
1: 			em.persist(message);
1: 			
1: 			txControl.requiresNew(() -> {
1: 				em.persist(message2);
1: 				return null;
1: 			});
1: 			
1: 			return null;
1: 		});
1: 		
1: 		List<Message> results = txControl.notSupported(() -> {
1: 				CriteriaBuilder cb = em.getCriteriaBuilder();
1: 				CriteriaQuery<Message> query = cb.createQuery(Message.class);
1: 				query.orderBy(cb.asc(query.from(Message.class).get("message")));
1: 				
1: 				return em.createQuery(query).getResultList();
1: 			});
1: 		
1: 		System.out.println(results);
1: 		
1: 		assertEquals(2, results.size());
1: 		assertEquals("Hello Nested World!", results.get(0).message);
1: 		assertEquals("Hello World!", results.get(1).message);
1: 	}
1: 	
1: 	@Test
1: 	public void testNestedTxOuterRollback() {
1: 		Message message = new Message();
1: 		message.message = "Hello World!";
1: 		
1: 		Message message2 = new Message();
1: 		message2.message = "Hello Nested World!";
1: 		
1: 		txControl.required(() -> {
1: 			// This will not end up in the database
1: 			em.persist(message);
1: 			
1: 			// This should only apply to the current transaction level
1: 			txControl.setRollbackOnly();
1: 
1: 			// This nested transaction will commit
1: 			txControl.requiresNew(() -> {
1: 				em.persist(message2);
1: 				return null;
1: 			});
1: 			
1: 			return null;
1: 		});
1: 		
1: 		List<Message> results = txControl.notSupported(() -> {
1: 				CriteriaBuilder cb = em.getCriteriaBuilder();
1: 				CriteriaQuery<Message> query = cb.createQuery(Message.class);
1: 				query.orderBy(cb.asc(query.from(Message.class).get("message")));
1: 				
1: 				return em.createQuery(query).getResultList();
1: 			});
1: 		
1: 		System.out.println(results);
1: 		
1: 		assertEquals(1, results.size());
1: 		assertEquals("Hello Nested World!", results.get(0).message);
1: 	}
1: 
1: 	@Test
1: 	public void testNestedTxInnerRollback() {
1: 		
1: 		Message message = new Message();
1: 		message.message = "Hello World!";
1: 		
1: 		Message message2 = new Message();
1: 		message2.message = "Hello Nested World!";
1: 		
1: 		txControl.required(() -> {
1: 			// This will end up in the database
1: 			em.persist(message);
1: 
1: 			// This nested transaction will not commit
1: 			txControl.requiresNew(() -> {
1: 				em.persist(message2);
1: 				txControl.setRollbackOnly();
1: 				return null;
1: 			});
1: 			
1: 			return null;
1: 		});
1: 		
1: 		List<Message> results = txControl.notSupported(() -> {
1: 				CriteriaBuilder cb = em.getCriteriaBuilder();
1: 				CriteriaQuery<Message> query = cb.createQuery(Message.class);
1: 				query.orderBy(cb.asc(query.from(Message.class).get("message")));
1: 				
1: 				return em.createQuery(query).getResultList();
1: 			});
1: 		
1: 		System.out.println(results);
1: 		
1: 		assertEquals(1, results.size());
1: 		assertEquals("Hello World!", results.get(0).message);
1: 	}
1: 	
1: 	@Test
1: 	public void testRequiredInheritsTx() {
1: 		
1: 		Message message = new Message();
1: 		message.message = "Hello World!";
1: 		
1: 		Message message2 = new Message();
1: 		message2.message = "Hello Nested World!";
1: 		
1: 		txControl.required(() -> {
1: 			em.persist(message);
1: 
1: 			txControl.required(() -> {
1: 				em.persist(message2);
1: 				return null;
1: 			});
1: 			
1: 			return null;
1: 		});
1: 		
1: 		List<Message> results = txControl.notSupported(() -> {
1: 				CriteriaBuilder cb = em.getCriteriaBuilder();
1: 				CriteriaQuery<Message> query = cb.createQuery(Message.class);
1: 				query.orderBy(cb.asc(query.from(Message.class).get("message")));
1: 				
1: 				return em.createQuery(query).getResultList();
1: 			});
1: 		
1: 		System.out.println(results);
1: 		
1: 		assertEquals(2, results.size());
1: 		assertEquals("Hello Nested World!", results.get(0).message);
1: 		assertEquals("Hello World!", results.get(1).message);
1: 	}
1: 
1: 	@Test
1: 	public void testSuspendedTx() {
1: 		
1: 		Message message = new Message();
1: 		message.message = "Hello World!";
1: 
1: 		txControl.required(() -> {
1: 				em.persist(message);
1: 				
1: 				assertEquals(Long.valueOf(0), txControl.notSupported(() -> {
1: 					CriteriaBuilder cb = em.getCriteriaBuilder();
1: 					CriteriaQuery<Long> countQuery = cb.createQuery(Long.class);
1: 					countQuery.select(cb.count(countQuery.from(Message.class)));
1: 					
1: 					return em.createQuery(countQuery).getSingleResult();
1: 				}));                
1: 				
1: 				return null;
1: 			});
1: 	}
1: }
============================================================================