1:430e8f5: /**
1:430e8f5:  * Licensed to the Apache Software Foundation (ASF) under one
1:430e8f5:  * or more contributor license agreements.  See the NOTICE file
1:430e8f5:  * distributed with this work for additional information
1:430e8f5:  * regarding copyright ownership.  The ASF licenses this file
1:430e8f5:  * to you under the Apache License, Version 2.0 (the
1:430e8f5:  * "License"); you may not use this file except in compliance
1:430e8f5:  * with the License.  You may obtain a copy of the License at
1:430e8f5:  *
1:430e8f5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:430e8f5:  *
1:430e8f5:  * Unless required by applicable law or agreed to in writing,
1:430e8f5:  * software distributed under the License is distributed on an
1:430e8f5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:430e8f5:  * KIND, either express or implied.  See the License for the
1:430e8f5:  * specific language governing permissions and limitations
1:430e8f5:  * under the License.
1:430e8f5:  */
1:430e8f5: package org.apache.aries.samples.blog.web.util;
1:430e8f5: 
1:430e8f5: import java.io.IOException;
1:430e8f5: import java.io.PrintWriter;
1:430e8f5: import java.util.ArrayList;
1:430e8f5: import java.util.Enumeration;
1:430e8f5: import java.util.List;
1:430e8f5: 
1:430e8f5: import javax.servlet.ServletException;
1:430e8f5: import javax.servlet.http.HttpServlet;
1:430e8f5: import javax.servlet.http.HttpServletRequest;
1:430e8f5: import javax.servlet.http.HttpServletResponse;
1:430e8f5: import javax.servlet.http.HttpSession;
1:430e8f5: 
1:430e8f5: 
1:430e8f5: 
1:430e8f5: public abstract class FormServlet extends HttpServlet
1:430e8f5: {
1:430e8f5:   private static final long serialVersionUID = -1019904995493434571L;
1:430e8f5:   public static final String ERROR_MESSAGES_ID = "errorMessages";
1:430e8f5:   private String id;
1:430e8f5:   
1:430e8f5:   public static void addError(HttpServletRequest req, String error)
1:430e8f5:   {
1:430e8f5:     HttpSession session = req.getSession();
1:430e8f5:     if (session != null) {
1:430e8f5:       @SuppressWarnings("unchecked")
1:430e8f5:       List<String> errors = (List<String>) session.getAttribute(ERROR_MESSAGES_ID); 
1:430e8f5:   
1:430e8f5:       if (errors == null) {
1:430e8f5:         errors = new ArrayList<String>();
1:430e8f5:         session.setAttribute(ERROR_MESSAGES_ID, errors);
1:430e8f5:       }
1:430e8f5:       
1:430e8f5:       errors.add(error);
1:430e8f5:     }
1:430e8f5:   }
1:430e8f5:   
1:430e8f5:   public static void storeParam(HttpServletRequest req, String id, String param, String value)
1:430e8f5:   {
1:430e8f5:     HttpSession session = req.getSession();
1:430e8f5:     if (session != null)
1:430e8f5:       session.setAttribute(id + ":" + param, value);
1:430e8f5:   }
1:430e8f5:   
1:430e8f5:   protected FormServlet(String id)
1:430e8f5:   {
1:430e8f5:     this.id = id;
1:430e8f5:   }
1:430e8f5:   
1:430e8f5:   protected abstract void writeCustomHeaderContent(HttpServletRequest req, PrintWriter out);
1:430e8f5:   protected abstract void writeForm(HttpServletRequest req, PrintWriter out) throws IOException;
1:430e8f5:   protected abstract String getPageTitle(HttpServletRequest req) throws IOException;
1:430e8f5:   
1:430e8f5:   protected String retrieveOrEmpty(HttpServletRequest req, String param)
1:430e8f5:   {
1:430e8f5:     HttpSession session = req.getSession();
1:430e8f5:     String value = "";
1:430e8f5:     if (session != null) { 
1:430e8f5:       value = (String) session.getAttribute(id+":"+param);
1:430e8f5:       if (value == null) {
1:430e8f5:         value = "";
1:430e8f5:       }
1:430e8f5:     }
1:430e8f5:     
1:430e8f5:     return value;
1:430e8f5:   }
1:430e8f5:   
1:430e8f5:   @Override
1:430e8f5:   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,IOException
1:430e8f5:   {
1:430e8f5:     PrintWriter out = resp.getWriter();
1:430e8f5: 
1:430e8f5:     HTMLOutput.writeHTMLHeaderPartOne(out, getPageTitle(req));
1:430e8f5:     writeCustomHeaderContent(req, out);
1:430e8f5:     
1:430e8f5:     List<String> errors = null;
1:430e8f5:     if (req.getSession() != null)
1:430e8f5:       errors = (List<String>) req.getSession().getAttribute(ERROR_MESSAGES_ID);
1:430e8f5:     
1:430e8f5:     if (errors == null) {    
1:430e8f5:       try {
1:430e8f5: 		HTMLOutput.writeHTMLHeaderPartTwo(out);
1:430e8f5: 	} catch (Exception e) {
1:430e8f5: 		// TODO Auto-generated catch block
1:430e8f5: 		e.printStackTrace();
1:430e8f5: 	}
1:430e8f5:     } else {
1:430e8f5:       try {
1:430e8f5: 		HTMLOutput.writeHTMLHeaderPartTwo(out, errors);
1:430e8f5: 	} catch (Exception e) {
1:430e8f5: 		// TODO Auto-generated catch block
1:430e8f5: 		e.printStackTrace();
1:430e8f5: 	}
1:430e8f5:     }
1:430e8f5:     
1:430e8f5:     writeForm(req, out);
1:430e8f5:     
1:430e8f5:     HTMLOutput.writeHTMLFooter(out);
1:430e8f5:     cleanupSession(req);
1:430e8f5:   }
1:430e8f5:   
1:430e8f5:   private void cleanupSession(HttpServletRequest req) 
1:430e8f5:   {
1:430e8f5:     HttpSession session = req.getSession();
1:430e8f5: 
1:430e8f5:     if (session != null) {
1:430e8f5:       @SuppressWarnings("unchecked")
1:430e8f5:       Enumeration<String> names = session.getAttributeNames();
1:430e8f5:       
1:430e8f5:       while (names.hasMoreElements()) {
1:430e8f5:         String name = names.nextElement();
1:430e8f5:         if (name.startsWith(id+":"))
1:430e8f5:           session.removeAttribute(name);
1:430e8f5:       }
1:430e8f5:       
1:430e8f5:       session.removeAttribute("errorMessages");
1:430e8f5:     }
1:430e8f5:   }  
1:430e8f5: }
============================================================================
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:afa98ec
commit:14fd487
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:430e8f5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.blog.web.util;
1: 
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.util.ArrayList;
1: import java.util.Enumeration;
1: import java.util.List;
1: 
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: import javax.servlet.http.HttpSession;
1: 
1: 
1: 
1: public abstract class FormServlet extends HttpServlet
1: {
1:   private static final long serialVersionUID = -1019904995493434571L;
1:   public static final String ERROR_MESSAGES_ID = "errorMessages";
1:   private String id;
1:   
1:   public static void addError(HttpServletRequest req, String error)
1:   {
1:     HttpSession session = req.getSession();
1:     if (session != null) {
1:       @SuppressWarnings("unchecked")
1:       List<String> errors = (List<String>) session.getAttribute(ERROR_MESSAGES_ID); 
1:   
1:       if (errors == null) {
1:         errors = new ArrayList<String>();
1:         session.setAttribute(ERROR_MESSAGES_ID, errors);
1:       }
1:       
1:       errors.add(error);
1:     }
1:   }
1:   
1:   public static void storeParam(HttpServletRequest req, String id, String param, String value)
1:   {
1:     HttpSession session = req.getSession();
1:     if (session != null)
1:       session.setAttribute(id + ":" + param, value);
1:   }
1:   
1:   protected FormServlet(String id)
1:   {
1:     this.id = id;
1:   }
1:   
1:   protected abstract void writeCustomHeaderContent(HttpServletRequest req, PrintWriter out);
1:   protected abstract void writeForm(HttpServletRequest req, PrintWriter out) throws IOException;
1:   protected abstract String getPageTitle(HttpServletRequest req) throws IOException;
1:   
1:   protected String retrieveOrEmpty(HttpServletRequest req, String param)
1:   {
1:     HttpSession session = req.getSession();
1:     String value = "";
1:     if (session != null) { 
1:       value = (String) session.getAttribute(id+":"+param);
1:       if (value == null) {
1:         value = "";
1:       }
1:     }
1:     
1:     return value;
1:   }
1:   
1:   @Override
1:   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,IOException
1:   {
1:     PrintWriter out = resp.getWriter();
1: 
1:     HTMLOutput.writeHTMLHeaderPartOne(out, getPageTitle(req));
1:     writeCustomHeaderContent(req, out);
1:     
1:     List<String> errors = null;
1:     if (req.getSession() != null)
1:       errors = (List<String>) req.getSession().getAttribute(ERROR_MESSAGES_ID);
1:     
1:     if (errors == null) {    
1:       try {
1: 		HTMLOutput.writeHTMLHeaderPartTwo(out);
1: 	} catch (Exception e) {
1: 		// TODO Auto-generated catch block
1: 		e.printStackTrace();
1: 	}
1:     } else {
1:       try {
1: 		HTMLOutput.writeHTMLHeaderPartTwo(out, errors);
1: 	} catch (Exception e) {
1: 		// TODO Auto-generated catch block
1: 		e.printStackTrace();
1: 	}
1:     }
1:     
1:     writeForm(req, out);
1:     
1:     HTMLOutput.writeHTMLFooter(out);
1:     cleanupSession(req);
1:   }
1:   
1:   private void cleanupSession(HttpServletRequest req) 
1:   {
1:     HttpSession session = req.getSession();
1: 
1:     if (session != null) {
1:       @SuppressWarnings("unchecked")
1:       Enumeration<String> names = session.getAttributeNames();
1:       
1:       while (names.hasMoreElements()) {
1:         String name = names.nextElement();
1:         if (name.startsWith(id+":"))
1:           session.removeAttribute(name);
1:       }
1:       
1:       session.removeAttribute("errorMessages");
1:     }
1:   }  
1: }
============================================================================