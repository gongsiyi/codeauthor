1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.blueprint.impl;
3:2cfdf52: 
1:2cfdf52: import java.lang.reflect.Method;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.EntityManager;
1:2cfdf52: import javax.persistence.spi.PersistenceUnitTransactionType;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.blueprint.Interceptor;
1:6d6b002: import org.osgi.service.blueprint.container.BlueprintContainer;
1:2cfdf52: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:96e072c: import org.osgi.service.coordinator.Coordination;
1:96e072c: import org.osgi.service.coordinator.Coordinator;
1:e5c89d2: import org.slf4j.Logger;
1:e5c89d2: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: public class JpaInterceptor implements Interceptor {
1:ec3ea65:     private static final Logger LOG = LoggerFactory.getLogger(JpaInterceptor.class);
1:6d6b002:     EntityManager em;
1:2cfdf52:     private Boolean cachedIsResourceLocal;
1:96e072c:     private Coordinator coordinator;
1:6d6b002:     private BlueprintContainer container;
1:6d6b002:     private String coordinatorId;
1:6d6b002:     private String emId;
1:2cfdf52: 
1:6d6b002:     public JpaInterceptor(BlueprintContainer container, String coordinatorId, String emId) {
1:6d6b002:         this.container = container;
1:6d6b002:         this.coordinatorId = coordinatorId;
1:6d6b002:         this.emId = emId;
8:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public int getRank() {
1:2cfdf52:         return 0;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public Object preCall(ComponentMetadata cm, Method m, Object... parameters) throws Throwable {
1:6d6b002:         if (coordinator == null) {
1:6d6b002:             initServices();
1:6d6b002:         }
1:e5c89d2:         try {
1:9aefd96:             LOG.debug("PreCall for bean {}, method {}", cm.getId(), m.getName());
1:96e072c:             Coordination coordination = coordinator.begin("jpa", 0);
1:2cfdf52:             boolean weControlTx = isResourceLocal(em) && !em.getTransaction().isActive();
3:2cfdf52:             if (weControlTx) {
1:c97f185:                 coordination.addParticipant(new ResourceLocalTransactionParticipant(em));
1:2cfdf52:             }
1:96e072c:             return coordination;
1:e5c89d2:         } catch (Exception e) {
1:0d59ccb:             LOG.warn("Exception from EmSupplier.preCall", e);
1:ec3ea65:             throw new RuntimeException(e); // NOSONAR
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:6d6b002:     private void initServices() {
1:6d6b002:         coordinator = (Coordinator)container.getComponentInstance(coordinatorId);
1:6d6b002:         em = (EntityManager)container.getComponentInstance(emId);
1:6d6b002:     }
1:6d6b002: 
1:ec3ea65:     @Override
1:2cfdf52:     public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) {
1:9aefd96:         LOG.debug("PostCallWithException for bean {}, method {}", cm.getId(), m.getName(), ex);
1:c0fdb93:         if (preCallToken != null) {
1:c0fdb93:             ((Coordination) preCallToken).fail(ex);
1:c0fdb93:         }
1:e5c89d2:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public void postCallWithReturn(ComponentMetadata cm, Method m, Object returnType, Object preCallToken)
1:2cfdf52:         throws Exception {
1:9aefd96:         LOG.debug("PostCallWithReturn for bean {}, method {}", cm.getId(), m.getName());
1:c0fdb93:         if (preCallToken != null) {
1:c0fdb93:             ((Coordination) preCallToken).end();
1:c0fdb93:         }
1:2cfdf52:     }
1:96e072c: 
1:2cfdf52:     private boolean isResourceLocal(EntityManager em) {
1:2cfdf52:         if (cachedIsResourceLocal == null) {
1:2cfdf52:             cachedIsResourceLocal = isResourceLocalInternal(em);
1:2cfdf52:         }
1:2cfdf52:         return cachedIsResourceLocal;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     /**
1:2cfdf52:      * @param em
1:2cfdf52:      * @return
1:2cfdf52:      */
1:2cfdf52:     private boolean isResourceLocalInternal(EntityManager em) {
1:2cfdf52:         PersistenceUnitTransactionType transactionType = (PersistenceUnitTransactionType)em.getProperties()
1:2cfdf52:             .get(PersistenceUnitTransactionType.class.getName());
1:ec3ea65:         return transactionType == PersistenceUnitTransactionType.RESOURCE_LOCAL;
1:2cfdf52:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(JpaInterceptor.class);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             throw new RuntimeException(e); // NOSONAR
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return transactionType == PersistenceUnitTransactionType.RESOURCE_LOCAL;
commit:6d6b002
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.blueprint.container.BlueprintContainer;
/////////////////////////////////////////////////////////////////////////
1:     EntityManager em;
1:     private BlueprintContainer container;
1:     private String coordinatorId;
1:     private String emId;
1:     public JpaInterceptor(BlueprintContainer container, String coordinatorId, String emId) {
1:         this.container = container;
1:         this.coordinatorId = coordinatorId;
1:         this.emId = emId;
/////////////////////////////////////////////////////////////////////////
1:         if (coordinator == null) {
1:             initServices();
1:         }
/////////////////////////////////////////////////////////////////////////
1:     private void initServices() {
1:         coordinator = (Coordinator)container.getComponentInstance(coordinatorId);
1:         em = (EntityManager)container.getComponentInstance(emId);
1:     }
1: 
commit:c97f185
/////////////////////////////////////////////////////////////////////////
1:                 coordination.addParticipant(new ResourceLocalTransactionParticipant(em));
commit:c0fdb93
/////////////////////////////////////////////////////////////////////////
1:         if (preCallToken != null) {
1:             ((Coordination) preCallToken).fail(ex);
1:         }
1:         if (preCallToken != null) {
1:             ((Coordination) preCallToken).end();
1:         }
commit:96e072c
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.coordinator.Coordinator;
0:     EmSupplier emSupplier;
1:     private Coordinator coordinator;
0:     public JpaInterceptor(EmSupplier emSupplier, Coordinator coordinator) {
0:         this.coordinator = coordinator;
/////////////////////////////////////////////////////////////////////////
1:             Coordination coordination = coordinator.begin("jpa", 0);
0:             final EntityManager em = emSupplier.get();
0:                 coordination.addParticipant(new JPAParticipant(em));
1:             return coordination;
/////////////////////////////////////////////////////////////////////////
0:         ((Coordination) preCallToken).fail(ex);
0:         ((Coordination) preCallToken).end();
1: 
commit:9aefd96
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("PreCall for bean {}, method {}", cm.getId(), m.getName());
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("PostCallWithException for bean {}, method {}", cm.getId(), m.getName(), ex);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("PostCallWithReturn for bean {}, method {}", cm.getId(), m.getName());
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("Exception from EmSupplier.preCall", e);
commit:e5c89d2
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0:     private static Logger LOG = LoggerFactory.getLogger(JpaInterceptor.class);
/////////////////////////////////////////////////////////////////////////
0:             throw new RuntimeException(e);
0:         boolean weControlTx = preCallToken == null ? false : (Boolean)preCallToken;
1:         try {
0:             emSupplier.postCall();
1:         } catch (Exception e) {
0:             LOG.warn("Exception from EmSupplier.postCall", e);
1:         }
0:         boolean weControlTx = preCallToken == null ? false : (Boolean)preCallToken;
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.blueprint.impl;
1: 
1: import java.lang.reflect.Method;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: 
1: import org.apache.aries.blueprint.Interceptor;
0: import org.apache.aries.jpa.supplier.EmSupplier;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: 
1: public class JpaInterceptor implements Interceptor {
0:     private EmSupplier emSupplier;
1:     private Boolean cachedIsResourceLocal;
1: 
0:     public JpaInterceptor(EmSupplier emSupplier) {
0:         this.emSupplier = emSupplier;
1:     }
1: 
1:     public int getRank() {
1:         return 0;
1:     }
1: 
1:     public Object preCall(ComponentMetadata cm, Method m, Object... parameters) throws Throwable {
0:         try {
0:             emSupplier.preCall();
0:             EntityManager em = emSupplier.get();
1:             boolean weControlTx = isResourceLocal(em) && !em.getTransaction().isActive();
1:             if (weControlTx) {
0:                 em.getTransaction().begin();
1:             }
0:             return weControlTx;
0:         } catch (Exception e) {
0:             e.printStackTrace();
0:             return false;
1:         }
1:     }
1: 
1:     public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) {
0:         boolean weControlTx = (Boolean)preCallToken;
1:         if (weControlTx) {
0:             safeRollback(emSupplier.get(), ex);
1:         }
0:         emSupplier.postCall();
1:     }
1: 
1:     public void postCallWithReturn(ComponentMetadata cm, Method m, Object returnType, Object preCallToken)
1:         throws Exception {
0:         boolean weControlTx = (Boolean)preCallToken;
1:         if (weControlTx) {
0:             emSupplier.get().getTransaction().commit();
1:         }
0:         emSupplier.postCall();
1:     }
1: 
0:     private void safeRollback(EntityManager em, Throwable e) {
0:         if (em != null) {
0:             try {
0:                 em.getTransaction().rollback();
0:             } catch (Exception e1) {
1:             }
1:         }
1:     }
1: 
1:     private boolean isResourceLocal(EntityManager em) {
1:         if (cachedIsResourceLocal == null) {
1:             cachedIsResourceLocal = isResourceLocalInternal(em);
1:         }
1:         return cachedIsResourceLocal;
1:     }
1: 
1:     /**
1:      * @param em
1:      * @return
1:      */
1:     private boolean isResourceLocalInternal(EntityManager em) {
1:         PersistenceUnitTransactionType transactionType = (PersistenceUnitTransactionType)em.getProperties()
1:             .get(PersistenceUnitTransactionType.class.getName());
0:         if (transactionType == PersistenceUnitTransactionType.RESOURCE_LOCAL) {
0:             return true;
0:         } else {
0:             return false;
1:         }
1:     }
1: }
============================================================================