1:f46e7d5: /*
1:f46e7d5:  * Licensed under the Apache License, Version 2.0 (the "License");
1:f46e7d5:  * you may not use this file except in compliance with the License.
1:f46e7d5:  * You may obtain a copy of the License at
1:f46e7d5:  *
1:f46e7d5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f46e7d5:  *
1:f46e7d5:  * Unless required by applicable law or agreed to in writing, software
1:f46e7d5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f46e7d5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f46e7d5:  * See the License for the specific language governing permissions and
1:f46e7d5:  * limitations under the License.
1:f46e7d5:  */
1:f46e7d5: package org.apache.aries.subsystem.core.archive;
1:f46e7d5: 
1:f46e7d5: import java.util.ArrayList;
1:f46e7d5: import java.util.Collection;
1:f46e7d5: import java.util.Collections;
1:f46e7d5: import java.util.List;
1:f46e7d5: import java.util.regex.Matcher;
1:f46e7d5: import java.util.regex.Pattern;
1:f46e7d5: 
1:f46e7d5: import org.osgi.framework.Constants;
1:f46e7d5: import org.osgi.framework.Version;
1:f46e7d5: import org.osgi.resource.Requirement;
1:f46e7d5: import org.osgi.resource.Resource;
1:f46e7d5: 
1:f46e7d5: public class BundleRequiredExecutionEnvironmentHeader implements RequirementHeader<BundleRequiredExecutionEnvironmentHeader.Clause> {
1:f46e7d5: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
1:f46e7d5: 		public static class ExecutionEnvironment {
1:f46e7d5: 			public static class Parser {
1:f46e7d5: 				private static final String BREE = "(" + Grammar.TOKEN + ")(?:-(" + Grammar.VERSION + "))?(?:/(" + Grammar.TOKEN + ")(?:-(" + Grammar.VERSION + "))?)?";
1:f46e7d5: 				private static final Pattern PATTERN = Pattern.compile(BREE);
1:f46e7d5: 				
1:f46e7d5: 				public ExecutionEnvironment parse(String clause) {
1:f46e7d5: 					Matcher matcher = PATTERN.matcher(clause);
1:f46e7d5: 					if (matcher.matches() && versionsMatch(matcher)) {
1:f46e7d5: 						return new ExecutionEnvironment(
1:f46e7d5: 								computeName(matcher),
1:f46e7d5: 								computeVersion(matcher));
1:f46e7d5: 					}
1:f46e7d5: 					else
1:f46e7d5: 						return new ExecutionEnvironment(clause);
1:f46e7d5: 				}
1:f46e7d5: 				
1:f46e7d5: 				private String computeName(Matcher matcher) {
1:f46e7d5: 					return computeName(matcher.group(1), matcher.group(3));
1:f46e7d5: 				}
1:f46e7d5: 				
1:f46e7d5: 				private String computeName(String left, String right) {
1:f46e7d5: 					if (left.equalsIgnoreCase("J2SE"))
1:f46e7d5: 						left = "JavaSE";
1:f46e7d5: 					if (right == null)
1:f46e7d5: 						return left;
1:f46e7d5: 					return new StringBuilder(left).append('/').append(right).toString();
1:f46e7d5: 				}
1:f46e7d5: 				
1:f46e7d5: 				private Version computeVersion(Matcher matcher) {
1:f46e7d5: 					String version = matcher.group(2);
1:f46e7d5: 					if (version == null)
1:f46e7d5: 						version = matcher.group(4);
1:f46e7d5: 					if (version == null)
1:f46e7d5: 						return null;
1:f46e7d5: 					return Version.parseVersion(version);
1:f46e7d5: 				}
1:f46e7d5: 				
1:f46e7d5: 				private boolean versionsMatch(Matcher matcher) {
1:f46e7d5: 					String version1 = matcher.group(2);
1:f46e7d5: 					String version2 = matcher.group(4);
1:f46e7d5: 					if (version1 == null || version2 == null)
1:f46e7d5: 						return true;
1:f46e7d5: 					return version1.equals(version2);
1:f46e7d5: 				}
1:f46e7d5: 			}
1:f46e7d5: 			
1:f46e7d5: 			private final String name;
1:f46e7d5: 			private final Version version;
1:f46e7d5: 			
1:f46e7d5: 			public ExecutionEnvironment(String name) {
1:f46e7d5: 				this(name, null);
1:f46e7d5: 			}
1:f46e7d5: 			
1:f46e7d5: 			public ExecutionEnvironment(String name, Version version) {
1:f46e7d5: 				if (name == null)
1:f46e7d5: 					throw new NullPointerException();
1:f46e7d5: 				this.name = name;
1:f46e7d5: 				this.version = version;
1:f46e7d5: 			}
1:f46e7d5: 			
1:f46e7d5: 			public String getName() {
1:f46e7d5: 				return name;
1:f46e7d5: 			}
1:f46e7d5: 			
1:f46e7d5: 			public Version getVersion() {
1:f46e7d5: 				return version;
1:f46e7d5: 			}
1:f46e7d5: 		}
1:f46e7d5: 		
1:f46e7d5: 		private final ExecutionEnvironment executionEnvironment;
1:f46e7d5: 		private final String path;
1:f46e7d5: 		
1:f46e7d5: 		public Clause(String clause) {
1:f46e7d5: 			path = clause;
1:f46e7d5: 			executionEnvironment = new ExecutionEnvironment.Parser().parse(clause);
1:f46e7d5: 		}
1:f46e7d5: 		
1:f46e7d5: 		@Override
1:f46e7d5: 		public Attribute getAttribute(String name) {
1:f46e7d5: 			return null;
1:f46e7d5: 		}
1:f46e7d5: 
1:f46e7d5: 		@Override
1:f46e7d5: 		public Collection<Attribute> getAttributes() {
1:f46e7d5: 			return Collections.emptyList();
1:f46e7d5: 		}
1:f46e7d5: 
1:f46e7d5: 		@Override
1:f46e7d5: 		public Directive getDirective(String name) {
1:f46e7d5: 			return null;
1:f46e7d5: 		}
1:f46e7d5: 
1:f46e7d5: 		@Override
1:f46e7d5: 		public Collection<Directive> getDirectives() {
1:f46e7d5: 			return Collections.emptyList();
1:f46e7d5: 		}
1:f46e7d5: 		
1:f46e7d5: 		public ExecutionEnvironment getExecutionEnvironment() {
1:f46e7d5: 			return executionEnvironment;
1:f46e7d5: 		}
1:f46e7d5: 
1:f46e7d5: 		@Override
1:f46e7d5: 		public Parameter getParameter(String name) {
1:f46e7d5: 			return null;
1:f46e7d5: 		}
1:f46e7d5: 
1:f46e7d5: 		@Override
1:f46e7d5: 		public Collection<Parameter> getParameters() {
1:f46e7d5: 			return Collections.emptyList();
1:f46e7d5: 		}
1:f46e7d5: 
1:f46e7d5: 		@Override
1:f46e7d5: 		public String getPath() {
1:f46e7d5: 			return path;
1:f46e7d5: 		}
1:f46e7d5: 		
1:f46e7d5: 		public OsgiExecutionEnvironmentRequirement toRequirement(Resource resource) {
1:f46e7d5: 			return new OsgiExecutionEnvironmentRequirement(this, resource);
1:f46e7d5: 		}
1:f46e7d5: 		
1:f46e7d5: 		@Override
1:f46e7d5: 		public String toString() {
1:f46e7d5: 			return getPath();
1:f46e7d5: 		}
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@SuppressWarnings("deprecation")
1:f46e7d5: 	public static final String NAME = Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT;
1:f46e7d5: 	
1:f46e7d5: 	private final Collection<Clause> clauses;
1:f46e7d5: 
1:f46e7d5: 	public BundleRequiredExecutionEnvironmentHeader(String value) {
1:f46e7d5: 		ClauseTokenizer tokenizer = new ClauseTokenizer(value);
1:f46e7d5: 		clauses = new ArrayList<Clause>(tokenizer.getClauses().size());
1:f46e7d5: 		for (String clause : tokenizer.getClauses())
1:f46e7d5: 			clauses.add(new Clause(clause));
1:f46e7d5: 	}
1:f46e7d5: 
1:f46e7d5: 	@Override
1:f46e7d5: 	public Collection<Clause> getClauses() {
1:f46e7d5: 		return Collections.unmodifiableCollection(clauses);
1:f46e7d5: 	}
1:f46e7d5: 
1:f46e7d5: 	@Override
1:f46e7d5: 	public String getName() {
1:f46e7d5: 		return NAME;
1:f46e7d5: 	}
1:f46e7d5: 
1:f46e7d5: 	@Override
1:f46e7d5: 	public String getValue() {
1:f46e7d5: 		StringBuilder builder = new StringBuilder();
1:f46e7d5: 		for (Clause clause : getClauses()) {
1:f46e7d5: 			builder.append(clause).append(',');
1:f46e7d5: 		}
1:f46e7d5: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
1:f46e7d5: 		builder.deleteCharAt(builder.length() - 1);
1:f46e7d5: 		return builder.toString();
1:f46e7d5: 	}
1:f46e7d5: 
1:f46e7d5: 	@Override
1:f46e7d5: 	public List<? extends Requirement> toRequirements(Resource resource) {
1:f46e7d5: 		return Collections.singletonList(new OsgiExecutionEnvironmentRequirement(getClauses(), resource));
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@Override
1:f46e7d5: 	public String toString() {
1:f46e7d5: 		return getValue();
1:f46e7d5: 	}
1:f46e7d5: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:f46e7d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: 
1: public class BundleRequiredExecutionEnvironmentHeader implements RequirementHeader<BundleRequiredExecutionEnvironmentHeader.Clause> {
1: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
1: 		public static class ExecutionEnvironment {
1: 			public static class Parser {
1: 				private static final String BREE = "(" + Grammar.TOKEN + ")(?:-(" + Grammar.VERSION + "))?(?:/(" + Grammar.TOKEN + ")(?:-(" + Grammar.VERSION + "))?)?";
1: 				private static final Pattern PATTERN = Pattern.compile(BREE);
1: 				
1: 				public ExecutionEnvironment parse(String clause) {
1: 					Matcher matcher = PATTERN.matcher(clause);
1: 					if (matcher.matches() && versionsMatch(matcher)) {
1: 						return new ExecutionEnvironment(
1: 								computeName(matcher),
1: 								computeVersion(matcher));
1: 					}
1: 					else
1: 						return new ExecutionEnvironment(clause);
1: 				}
1: 				
1: 				private String computeName(Matcher matcher) {
1: 					return computeName(matcher.group(1), matcher.group(3));
1: 				}
1: 				
1: 				private String computeName(String left, String right) {
1: 					if (left.equalsIgnoreCase("J2SE"))
1: 						left = "JavaSE";
1: 					if (right == null)
1: 						return left;
1: 					return new StringBuilder(left).append('/').append(right).toString();
1: 				}
1: 				
1: 				private Version computeVersion(Matcher matcher) {
1: 					String version = matcher.group(2);
1: 					if (version == null)
1: 						version = matcher.group(4);
1: 					if (version == null)
1: 						return null;
1: 					return Version.parseVersion(version);
1: 				}
1: 				
1: 				private boolean versionsMatch(Matcher matcher) {
1: 					String version1 = matcher.group(2);
1: 					String version2 = matcher.group(4);
1: 					if (version1 == null || version2 == null)
1: 						return true;
1: 					return version1.equals(version2);
1: 				}
1: 			}
1: 			
1: 			private final String name;
1: 			private final Version version;
1: 			
1: 			public ExecutionEnvironment(String name) {
1: 				this(name, null);
1: 			}
1: 			
1: 			public ExecutionEnvironment(String name, Version version) {
1: 				if (name == null)
1: 					throw new NullPointerException();
1: 				this.name = name;
1: 				this.version = version;
1: 			}
1: 			
1: 			public String getName() {
1: 				return name;
1: 			}
1: 			
1: 			public Version getVersion() {
1: 				return version;
1: 			}
1: 		}
1: 		
1: 		private final ExecutionEnvironment executionEnvironment;
1: 		private final String path;
1: 		
1: 		public Clause(String clause) {
1: 			path = clause;
1: 			executionEnvironment = new ExecutionEnvironment.Parser().parse(clause);
1: 		}
1: 		
1: 		@Override
1: 		public Attribute getAttribute(String name) {
1: 			return null;
1: 		}
1: 
1: 		@Override
1: 		public Collection<Attribute> getAttributes() {
1: 			return Collections.emptyList();
1: 		}
1: 
1: 		@Override
1: 		public Directive getDirective(String name) {
1: 			return null;
1: 		}
1: 
1: 		@Override
1: 		public Collection<Directive> getDirectives() {
1: 			return Collections.emptyList();
1: 		}
1: 		
1: 		public ExecutionEnvironment getExecutionEnvironment() {
1: 			return executionEnvironment;
1: 		}
1: 
1: 		@Override
1: 		public Parameter getParameter(String name) {
1: 			return null;
1: 		}
1: 
1: 		@Override
1: 		public Collection<Parameter> getParameters() {
1: 			return Collections.emptyList();
1: 		}
1: 
1: 		@Override
1: 		public String getPath() {
1: 			return path;
1: 		}
1: 		
1: 		public OsgiExecutionEnvironmentRequirement toRequirement(Resource resource) {
1: 			return new OsgiExecutionEnvironmentRequirement(this, resource);
1: 		}
1: 		
1: 		@Override
1: 		public String toString() {
1: 			return getPath();
1: 		}
1: 	}
1: 	
1: 	@SuppressWarnings("deprecation")
1: 	public static final String NAME = Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT;
1: 	
1: 	private final Collection<Clause> clauses;
1: 
1: 	public BundleRequiredExecutionEnvironmentHeader(String value) {
1: 		ClauseTokenizer tokenizer = new ClauseTokenizer(value);
1: 		clauses = new ArrayList<Clause>(tokenizer.getClauses().size());
1: 		for (String clause : tokenizer.getClauses())
1: 			clauses.add(new Clause(clause));
1: 	}
1: 
1: 	@Override
1: 	public Collection<Clause> getClauses() {
1: 		return Collections.unmodifiableCollection(clauses);
1: 	}
1: 
1: 	@Override
1: 	public String getName() {
1: 		return NAME;
1: 	}
1: 
1: 	@Override
1: 	public String getValue() {
1: 		StringBuilder builder = new StringBuilder();
1: 		for (Clause clause : getClauses()) {
1: 			builder.append(clause).append(',');
1: 		}
1: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
1: 		builder.deleteCharAt(builder.length() - 1);
1: 		return builder.toString();
1: 	}
1: 
1: 	@Override
1: 	public List<? extends Requirement> toRequirements(Resource resource) {
1: 		return Collections.singletonList(new OsgiExecutionEnvironmentRequirement(getClauses(), resource));
1: 	}
1: 	
1: 	@Override
1: 	public String toString() {
1: 		return getValue();
1: 	}
1: }
============================================================================