1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.impl;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: import java.util.Collection;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: import org.apache.aries.jmx.blueprint.codec.BPMetadata;
1:fdf3952: import org.apache.aries.jmx.blueprint.codec.Util;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.InvalidSyntaxException;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.service.blueprint.container.BlueprintContainer;
1:fdf3952: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.ServiceReferenceMetadata;
1:fdf3952: 
1:fdf3952: public class BlueprintMetadata implements BlueprintMetadataMBean {
1:fdf3952: 
1:fdf3952:     BundleContext bundleContext;
1:fdf3952: 
1:fdf3952:     public BlueprintMetadata(BundleContext bundleContext) {
1:fdf3952:         this.bundleContext = bundleContext;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /*
1:fdf3952:      * (non-Javadoc)
1:fdf3952:      * 
1:fdf3952:      * @see org.apache.aries.jmx.blueprint.BlueprintMetadataMBean#getBlueprintContainerServiceId(long)
1:fdf3952:      */
1:fdf3952:     public long getBlueprintContainerServiceId(long bundleId) throws IOException {
1:fdf3952:         Bundle bpBundle = bundleContext.getBundle(bundleId);
1:fdf3952:         if (null == bpBundle)
1:fdf3952:             throw new IllegalArgumentException("Invalid bundle id " + bundleId);
1:fdf3952: 
1:fdf3952:         String filter = "(&(osgi.blueprint.container.symbolicname=" // no similar one in interfaces
1:fdf3952:                 + bpBundle.getSymbolicName() + ")(osgi.blueprint.container.version=" + bpBundle.getVersion() + "))";
1:fdf3952:         ServiceReference[] serviceReferences = null;
1:fdf3952:         try {
1:fdf3952:             serviceReferences = bundleContext.getServiceReferences(BlueprintContainer.class.getName(), filter);
1:fdf3952:         } catch (InvalidSyntaxException e) {
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         }
1:fdf3952:         if (serviceReferences == null || serviceReferences.length < 1)
1:fdf3952:             return -1;
1:fdf3952:         else
1:fdf3952:             return (Long) serviceReferences[0].getProperty(Constants.SERVICE_ID);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long[] getBlueprintContainerServiceIds() throws IOException {
1:fdf3952:         ServiceReference[] serviceReferences = null;
1:fdf3952:         try {
1:fdf3952:             serviceReferences = bundleContext.getServiceReferences(BlueprintContainer.class.getName(), null);
1:fdf3952:         } catch (InvalidSyntaxException e) {
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         }
1:fdf3952:         if (serviceReferences == null || serviceReferences.length < 1)
1:fdf3952:             return null;
1:fdf3952:         
1:fdf3952:         long[] serviceIds = new long[serviceReferences.length];
1:fdf3952:         for (int i = 0; i < serviceReferences.length; i++) {
1:fdf3952:             serviceIds[i] = (Long) serviceReferences[i].getProperty(Constants.SERVICE_ID);
1:fdf3952:         }
1:fdf3952:         return serviceIds;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String[] getComponentIds(long containerServiceId) {
1:fdf3952:         BlueprintContainer container = getBlueprintContainer(containerServiceId);
1:fdf3952:         return (String[]) container.getComponentIds().toArray(new String[0]);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /*
1:fdf3952:      * 
1:fdf3952:      * type could be Bean, Service, serviceReference (non-Javadoc)
1:fdf3952:      * 
1:fdf3952:      * @see org.apache.aries.jmx.blueprint.BlueprintMetadataMBean#getComponentIdsByType(long, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String[] getComponentIdsByType(long containerServiceId, String type) {
1:fdf3952:         BlueprintContainer container = getBlueprintContainer(containerServiceId);
1:fdf3952:         Collection<? extends ComponentMetadata> components;
1:fdf3952:         if (type.equals(BlueprintMetadataMBean.SERVICE_METADATA)) {
1:fdf3952:             components = container.getMetadata(ServiceMetadata.class);
1:fdf3952:         } else if (type.equals(BlueprintMetadataMBean.BEAN_METADATA)) {
1:fdf3952:             components = container.getMetadata(BeanMetadata.class);
1:fdf3952:         } else if (type.equals(BlueprintMetadataMBean.SERVICE_REFERENCE_METADATA)) {
1:fdf3952:             components = container.getMetadata(ServiceReferenceMetadata.class);
1:fdf3952:         } else {
1:fdf3952:             throw new IllegalArgumentException("Unrecognized component type: " + type);
1:fdf3952:         }
1:fdf3952:         String ids[] = new String[components.size()];
1:fdf3952:         int i = 0;
1:fdf3952:         for (ComponentMetadata component : components) {
1:fdf3952:             // from compendium 121.4.8, in-line managers can not be retrieved by getMetadata, which will return null.
1:fdf3952:             // Because in-line managers are actually the object values.
1:fdf3952:             // Here we ignore it.
1:fdf3952:             if(null == component)
1:fdf3952:                 continue;
1:fdf3952:             ids[i++] = component.getId();
1:fdf3952:         }
1:fdf3952:         return ids;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public CompositeData getComponentMetadata(long containerServiceId, String componentId) {
1:fdf3952:         BlueprintContainer container = getBlueprintContainer(containerServiceId);
1:fdf3952:         ComponentMetadata componentMetadata = container.getComponentMetadata(componentId);
1:fdf3952:         BPMetadata metadata = Util.metadata2BPMetadata(componentMetadata);
1:fdf3952:         return metadata.asCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     private BlueprintContainer getBlueprintContainer(long containerServiceId) {
1:fdf3952:         String filter = "(" + Constants.SERVICE_ID + "=" + containerServiceId + ")";
1:fdf3952:         ServiceReference[] serviceReferences = null;
1:fdf3952:         try {
1:fdf3952:             serviceReferences = bundleContext.getServiceReferences(BlueprintContainer.class.getName(), filter);
1:fdf3952:         } catch (InvalidSyntaxException e) {
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         if (serviceReferences == null || serviceReferences.length <1) {
1:fdf3952:             throw new IllegalArgumentException("Invalid BlueprintContainer service id: " + containerServiceId);
1:fdf3952:         }
1:fdf3952:         return (BlueprintContainer) bundleContext.getService(serviceReferences[0]);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.impl;
1: 
1: import java.io.IOException;
1: import java.util.Collection;
1: 
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: import org.apache.aries.jmx.blueprint.codec.BPMetadata;
1: import org.apache.aries.jmx.blueprint.codec.Util;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1: import org.osgi.service.blueprint.reflect.ServiceReferenceMetadata;
1: 
1: public class BlueprintMetadata implements BlueprintMetadataMBean {
1: 
1:     BundleContext bundleContext;
1: 
1:     public BlueprintMetadata(BundleContext bundleContext) {
1:         this.bundleContext = bundleContext;
1:     }
1: 
1:     /*
1:      * (non-Javadoc)
1:      * 
1:      * @see org.apache.aries.jmx.blueprint.BlueprintMetadataMBean#getBlueprintContainerServiceId(long)
1:      */
1:     public long getBlueprintContainerServiceId(long bundleId) throws IOException {
1:         Bundle bpBundle = bundleContext.getBundle(bundleId);
1:         if (null == bpBundle)
1:             throw new IllegalArgumentException("Invalid bundle id " + bundleId);
1: 
1:         String filter = "(&(osgi.blueprint.container.symbolicname=" // no similar one in interfaces
1:                 + bpBundle.getSymbolicName() + ")(osgi.blueprint.container.version=" + bpBundle.getVersion() + "))";
1:         ServiceReference[] serviceReferences = null;
1:         try {
1:             serviceReferences = bundleContext.getServiceReferences(BlueprintContainer.class.getName(), filter);
1:         } catch (InvalidSyntaxException e) {
1:             throw new RuntimeException(e);
1:         }
1:         if (serviceReferences == null || serviceReferences.length < 1)
1:             return -1;
1:         else
1:             return (Long) serviceReferences[0].getProperty(Constants.SERVICE_ID);
1:     }
1: 
1:     public long[] getBlueprintContainerServiceIds() throws IOException {
1:         ServiceReference[] serviceReferences = null;
1:         try {
1:             serviceReferences = bundleContext.getServiceReferences(BlueprintContainer.class.getName(), null);
1:         } catch (InvalidSyntaxException e) {
1:             throw new RuntimeException(e);
1:         }
1:         if (serviceReferences == null || serviceReferences.length < 1)
1:             return null;
1:         
1:         long[] serviceIds = new long[serviceReferences.length];
1:         for (int i = 0; i < serviceReferences.length; i++) {
1:             serviceIds[i] = (Long) serviceReferences[i].getProperty(Constants.SERVICE_ID);
1:         }
1:         return serviceIds;
1:     }
1: 
1:     public String[] getComponentIds(long containerServiceId) {
1:         BlueprintContainer container = getBlueprintContainer(containerServiceId);
1:         return (String[]) container.getComponentIds().toArray(new String[0]);
1:     }
1: 
1:     /*
1:      * 
1:      * type could be Bean, Service, serviceReference (non-Javadoc)
1:      * 
1:      * @see org.apache.aries.jmx.blueprint.BlueprintMetadataMBean#getComponentIdsByType(long, java.lang.String)
1:      */
1:     public String[] getComponentIdsByType(long containerServiceId, String type) {
1:         BlueprintContainer container = getBlueprintContainer(containerServiceId);
1:         Collection<? extends ComponentMetadata> components;
1:         if (type.equals(BlueprintMetadataMBean.SERVICE_METADATA)) {
1:             components = container.getMetadata(ServiceMetadata.class);
1:         } else if (type.equals(BlueprintMetadataMBean.BEAN_METADATA)) {
1:             components = container.getMetadata(BeanMetadata.class);
1:         } else if (type.equals(BlueprintMetadataMBean.SERVICE_REFERENCE_METADATA)) {
1:             components = container.getMetadata(ServiceReferenceMetadata.class);
1:         } else {
1:             throw new IllegalArgumentException("Unrecognized component type: " + type);
1:         }
1:         String ids[] = new String[components.size()];
1:         int i = 0;
1:         for (ComponentMetadata component : components) {
1:             // from compendium 121.4.8, in-line managers can not be retrieved by getMetadata, which will return null.
1:             // Because in-line managers are actually the object values.
1:             // Here we ignore it.
1:             if(null == component)
1:                 continue;
1:             ids[i++] = component.getId();
1:         }
1:         return ids;
1:     }
1: 
1:     public CompositeData getComponentMetadata(long containerServiceId, String componentId) {
1:         BlueprintContainer container = getBlueprintContainer(containerServiceId);
1:         ComponentMetadata componentMetadata = container.getComponentMetadata(componentId);
1:         BPMetadata metadata = Util.metadata2BPMetadata(componentMetadata);
1:         return metadata.asCompositeData();
1:     }
1: 
1:     private BlueprintContainer getBlueprintContainer(long containerServiceId) {
1:         String filter = "(" + Constants.SERVICE_ID + "=" + containerServiceId + ")";
1:         ServiceReference[] serviceReferences = null;
1:         try {
1:             serviceReferences = bundleContext.getServiceReferences(BlueprintContainer.class.getName(), filter);
1:         } catch (InvalidSyntaxException e) {
1:             throw new RuntimeException(e);
1:         }
1: 
1:         if (serviceReferences == null || serviceReferences.length <1) {
1:             throw new IllegalArgumentException("Invalid BlueprintContainer service id: " + containerServiceId);
1:         }
1:         return (BlueprintContainer) bundleContext.getService(serviceReferences[0]);
1:     }
1: 
1: }
============================================================================