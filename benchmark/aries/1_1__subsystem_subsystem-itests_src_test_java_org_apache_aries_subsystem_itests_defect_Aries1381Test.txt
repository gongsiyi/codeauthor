1:9c09993: /*
1:9c09993:  * Licensed to the Apache Software Foundation (ASF) under one
1:9c09993:  * or more contributor license agreements.  See the NOTICE file
1:9c09993:  * distributed with this work for additional information
1:9c09993:  * regarding copyright ownership.  The ASF licenses this file
1:9c09993:  * to you under the Apache License, Version 2.0 (the
1:9c09993:  * "License"); you may not use this file except in compliance
1:9c09993:  * with the License.  You may obtain a copy of the License at
1:9c09993:  *
1:9c09993:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9c09993:  *
1:9c09993:  * Unless required by applicable law or agreed to in writing,
1:9c09993:  * software distributed under the License is distributed on an
1:9c09993:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9c09993:  * KIND, either express or implied.  See the License for the
1:9c09993:  * specific language governing permissions and limitations
1:9c09993:  * under the License.
1:9c09993:  */
1:9c09993: package org.apache.aries.subsystem.itests.defect;
1:9c09993: 
1:9c09993: import static org.junit.Assert.fail;
1:9c09993: 
1:9c09993: import java.io.IOException;
1:9c09993: import java.util.HashMap;
1:9c09993: import java.util.Map;
1:9c09993: 
1:9c09993: import org.apache.aries.subsystem.itests.SubsystemTest;
1:9c09993: import org.junit.Before;
1:9c09993: import org.junit.Test;
1:9c09993: import org.osgi.framework.Bundle;
1:9c09993: import org.osgi.framework.Constants;
1:9c09993: import org.osgi.service.subsystem.Subsystem;
1:9c09993: import org.osgi.service.subsystem.SubsystemConstants;
1:9c09993: import org.osgi.service.subsystem.SubsystemException;
1:9c09993: 
1:9c09993: /*
1:9c09993:  * https://issues.apache.org/jira/browse/ARIES-1368
1:9c09993:  * 
1:9c09993:  * java.lang.ClassCastException: org.apache.aries.subsystem.core.archive.GenericDirective 
1:9c09993:  * cannot be cast to org.apache.aries.subsystem.core.archive.VersionRangeAttribute
1:9c09993:  */
1:9c09993: public class Aries1381Test extends SubsystemTest {
1:9c09993:     /*
1:9c09993:      * Subsystem-SymbolicName: composite.a.esa
1:9c09993:      * Import-Package: foo;version:="[5.0,6.0)",z;version="2.3";version:="3.2"
1:9c09993:      * 
1:9c09993:      * Included in archive:
1:9c09993:      *      bundle.b.jar
1:9c09993:      *      bundle.c.jar
1:9c09993:      */
1:9c09993:     private static final String COMPOSITE_A = "composite.a.esa";
1:9c09993: 	/*
1:9c09993: 	 * Bundle-SymbolicName: bundle.a.jar
1:9c09993: 	 * Export-Package: foo,z;version=2.3"
1:9c09993: 	 */
1:9c09993: 	private static final String BUNDLE_A = "bundle.a.jar";
1:9c09993: 	/*
1:9c09993:      * Bundle-SymbolicName: bundle.b.jar
1:9c09993:      * Export-Package: x,y;version=1.5
1:9c09993:      */
1:9c09993:     private static final String BUNDLE_B = "bundle.b.jar";
1:9c09993:     /*
1:9c09993:      * Bundle-SymbolicName: bundle.c.jar
1:9c09993:      * Import-Package: x;version:="[5.0,6.0)",y;version="[1.5,2.0)";version:="[1.0,1.5)"
1:9c09993:      */
1:9c09993:     private static final String BUNDLE_C = "bundle.c.jar";
1:9c09993: 	
1:9c09993: 	private static boolean createdTestFiles;
1:9c09993: 	
1:9c09993: 	@Before
1:9c09993: 	public void createTestFiles() throws Exception {
1:9c09993: 		if (createdTestFiles)
1:9c09993: 			return;
1:9c09993: 		createBundleA();
1:9c09993: 		createBundleB();
1:9c09993: 		createBundleC();
1:9c09993: 		createCompositeA();
1:9c09993: 		createdTestFiles = true;
1:9c09993: 	}
1:9c09993: 	
1:9c09993: 	private void createBundleA() throws IOException {
1:9c09993: 		createBundle(name(BUNDLE_A), exportPackage("foo,z;version=2.3"));
1:9c09993: 	}
1:9c09993: 	
1:9c09993: 	private void createBundleB() throws IOException {
1:9c09993:         createBundle(name(BUNDLE_B), exportPackage("x,y;version=1.5"));
1:9c09993:     }
1:9c09993: 	
1:9c09993: 	private void createBundleC() throws IOException {
1:9c09993:         createBundle(name(BUNDLE_C), importPackage("x;version:=\"[5.0,6.0)\",y;version=\"[1.5,2.0)\";version:=\"[1.0,1.5)\""));
1:9c09993:     }
1:9c09993:     
1:9c09993:     private static void createCompositeA() throws IOException {
1:9c09993:         createCompositeAManifest();
1:9c09993:         createSubsystem(COMPOSITE_A, BUNDLE_B, BUNDLE_C);
1:9c09993:     }
1:9c09993:     
1:9c09993:     private static void createCompositeAManifest() throws IOException {
1:9c09993:         Map<String, String> attributes = new HashMap<String, String>();
1:9c09993:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1:9c09993:         attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:9c09993:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_B + ";version=\"[0,0]\"," + BUNDLE_C + ";version=\"[0,0]\"");
1:9c09993:         attributes.put(Constants.IMPORT_PACKAGE, "foo;version:=\"[5.0,6.0)\",z;version=\"2.3\";version:=\"3.2\"");
1:9c09993:         createManifest(COMPOSITE_A + ".mf", attributes);
1:9c09993:     }
1:9c09993:     
1:9c09993:     @Test
1:9c09993:     public void testVersionAttributeVerusVersionDirective() throws Exception {
1:9c09993:         Bundle bundleA = installBundleFromFile(BUNDLE_A);
1:9c09993:         try {
1:9c09993:             Subsystem compositeA = installSubsystemFromFile(COMPOSITE_A);
1:9c09993:             uninstallSubsystemSilently(compositeA);
1:9c09993:         }
1:9c09993:         catch (SubsystemException e) {
1:9c09993:             e.printStackTrace();
1:9c09993:             fail("Subsystem should have installed");
1:9c09993:         }
1:9c09993:         finally {
1:9c09993:             uninstallSilently(bundleA);
1:9c09993:         }
1:9c09993:     }
1:9c09993:     
1:9c09993:     @Override
1:9c09993:     public void setUp() throws Exception {
1:9c09993:         super.setUp();
1:9c09993:     }
1:9c09993: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:9c09993
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1368
1:  * 
1:  * java.lang.ClassCastException: org.apache.aries.subsystem.core.archive.GenericDirective 
1:  * cannot be cast to org.apache.aries.subsystem.core.archive.VersionRangeAttribute
1:  */
1: public class Aries1381Test extends SubsystemTest {
1:     /*
1:      * Subsystem-SymbolicName: composite.a.esa
1:      * Import-Package: foo;version:="[5.0,6.0)",z;version="2.3";version:="3.2"
1:      * 
1:      * Included in archive:
1:      *      bundle.b.jar
1:      *      bundle.c.jar
1:      */
1:     private static final String COMPOSITE_A = "composite.a.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Export-Package: foo,z;version=2.3"
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1:      * Bundle-SymbolicName: bundle.b.jar
1:      * Export-Package: x,y;version=1.5
1:      */
1:     private static final String BUNDLE_B = "bundle.b.jar";
1:     /*
1:      * Bundle-SymbolicName: bundle.c.jar
1:      * Import-Package: x;version:="[5.0,6.0)",y;version="[1.5,2.0)";version:="[1.0,1.5)"
1:      */
1:     private static final String BUNDLE_C = "bundle.c.jar";
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createBundleA();
1: 		createBundleB();
1: 		createBundleC();
1: 		createCompositeA();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), exportPackage("foo,z;version=2.3"));
1: 	}
1: 	
1: 	private void createBundleB() throws IOException {
1:         createBundle(name(BUNDLE_B), exportPackage("x,y;version=1.5"));
1:     }
1: 	
1: 	private void createBundleC() throws IOException {
1:         createBundle(name(BUNDLE_C), importPackage("x;version:=\"[5.0,6.0)\",y;version=\"[1.5,2.0)\";version:=\"[1.0,1.5)\""));
1:     }
1:     
1:     private static void createCompositeA() throws IOException {
1:         createCompositeAManifest();
1:         createSubsystem(COMPOSITE_A, BUNDLE_B, BUNDLE_C);
1:     }
1:     
1:     private static void createCompositeAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_B + ";version=\"[0,0]\"," + BUNDLE_C + ";version=\"[0,0]\"");
1:         attributes.put(Constants.IMPORT_PACKAGE, "foo;version:=\"[5.0,6.0)\",z;version=\"2.3\";version:=\"3.2\"");
1:         createManifest(COMPOSITE_A + ".mf", attributes);
1:     }
1:     
1:     @Test
1:     public void testVersionAttributeVerusVersionDirective() throws Exception {
1:         Bundle bundleA = installBundleFromFile(BUNDLE_A);
1:         try {
1:             Subsystem compositeA = installSubsystemFromFile(COMPOSITE_A);
1:             uninstallSubsystemSilently(compositeA);
1:         }
1:         catch (SubsystemException e) {
1:             e.printStackTrace();
1:             fail("Subsystem should have installed");
1:         }
1:         finally {
1:             uninstallSilently(bundleA);
1:         }
1:     }
1:     
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setUp();
1:     }
1: }
============================================================================