1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:225bcae: package org.apache.aries.subsystem.core.internal;
1:225bcae: 
1:b75f264: import org.apache.aries.subsystem.core.internal.BundleResourceInstaller.BundleConstituent;
1:225bcae: import org.osgi.framework.Bundle;
1:225bcae: import org.osgi.framework.BundleException;
1:225bcae: import org.osgi.framework.wiring.BundleRevision;
1:225bcae: import org.osgi.resource.Resource;
1:225bcae: import org.osgi.service.subsystem.SubsystemException;
1:225bcae: 
1:225bcae: public class BundleResourceUninstaller extends ResourceUninstaller {
1:5bd3bf6: 	public BundleResourceUninstaller(Resource resource, BasicSubsystem subsystem) {
1:225bcae: 		super(resource, subsystem);
1:225bcae: 	}
1:225bcae: 	
1:225bcae: 	public void uninstall() {
1:307d743: 		removeReference();
1:620fb70: 		// Always remove the bundle as a constituent of the subsystem being
1:620fb70: 		// acted upon. The bundle may or may not actually be a constituent.
1:620fb70: 		// This covers the case of unscoped subsystems with shared content
1:620fb70: 		// where the resource may not be uninstallable.
1:b75f264: 		removeConstituent(subsystem, new BundleConstituent(null, (BundleRevision)resource));
1:225bcae: 		if (!isResourceUninstallable())
1:225bcae: 			return;
1:620fb70: 		// If the resource is uninstallable, remove it from the "provisioned to"
1:620fb70: 		// subsystem in case it was a dependency. The "provisioned to" subsystem
1:620fb70: 		// may be the same subsystem as the one being acted upon. This covers
1:620fb70: 		// the case where a dependency of the subsystem being acted upon was 
1:620fb70: 		// provisioned to another subsystem but is not content of the other
1:620fb70: 		// subsystem.
1:b75f264: 		removeConstituent(provisionTo, new BundleConstituent(null, (BundleRevision)resource));
1:225bcae: 		if (isBundleUninstallable())
1:225bcae: 			uninstallBundle();
1:225bcae: 	}
1:225bcae: 	
1:225bcae: 	private Bundle getBundle() {
1:225bcae: 		return getBundleRevision().getBundle();
1:225bcae: 	}
1:225bcae: 	
1:225bcae: 	private BundleRevision getBundleRevision() {
1:225bcae: 		return (BundleRevision)resource;
1:225bcae: 	}
1:225bcae: 	
1:225bcae: 	private boolean isBundleUninstallable() {
1:225bcae: 		return getBundle().getState() != Bundle.UNINSTALLED;
1:225bcae: 	}
1:225bcae: 	
1:225bcae: 	private void uninstallBundle() {
1:225bcae: 		ThreadLocalSubsystem.set(provisionTo);
1:225bcae: 		try {
1:225bcae: 			getBundle().uninstall();
1:225bcae: 		}
1:225bcae: 		catch (BundleException e) {
1:225bcae: 			throw new SubsystemException(e);
1:225bcae: 		}
1:6ea98a2: 		finally {
1:6ea98a2: 			ThreadLocalSubsystem.remove();
1:6ea98a2: 		}
1:225bcae: 	}
1:225bcae: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:6ea98a2
/////////////////////////////////////////////////////////////////////////
1: 		finally {
1: 			ThreadLocalSubsystem.remove();
1: 		}
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	public BundleResourceUninstaller(Resource resource, BasicSubsystem subsystem) {
commit:b75f264
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.BundleResourceInstaller.BundleConstituent;
/////////////////////////////////////////////////////////////////////////
1: 		removeConstituent(subsystem, new BundleConstituent(null, (BundleRevision)resource));
/////////////////////////////////////////////////////////////////////////
1: 		removeConstituent(provisionTo, new BundleConstituent(null, (BundleRevision)resource));
commit:620fb70
/////////////////////////////////////////////////////////////////////////
1: 		// Always remove the bundle as a constituent of the subsystem being
1: 		// acted upon. The bundle may or may not actually be a constituent.
1: 		// This covers the case of unscoped subsystems with shared content
1: 		// where the resource may not be uninstallable.
0: 		removeConstituent(subsystem, resource);
1: 		// If the resource is uninstallable, remove it from the "provisioned to"
1: 		// subsystem in case it was a dependency. The "provisioned to" subsystem
1: 		// may be the same subsystem as the one being acted upon. This covers
1: 		// the case where a dependency of the subsystem being acted upon was 
1: 		// provisioned to another subsystem but is not content of the other
1: 		// subsystem.
0: 		removeConstituent(provisionTo, resource);
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:307d743
/////////////////////////////////////////////////////////////////////////
1: 		removeReference();
0: 		removeConstituent();
commit:225bcae
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public class BundleResourceUninstaller extends ResourceUninstaller {
0: 	public BundleResourceUninstaller(Resource resource, AriesSubsystem subsystem) {
1: 		super(resource, subsystem);
1: 	}
1: 	
1: 	public void uninstall() {
1: 		if (!isResourceUninstallable())
1: 			return;
1: 		if (isBundleUninstallable())
1: 			uninstallBundle();
0: 		removeReference();
0: 		removeConstituent();
1: 	}
1: 	
1: 	private Bundle getBundle() {
1: 		return getBundleRevision().getBundle();
1: 	}
1: 	
1: 	private BundleRevision getBundleRevision() {
1: 		return (BundleRevision)resource;
1: 	}
1: 	
1: 	private boolean isBundleUninstallable() {
1: 		return getBundle().getState() != Bundle.UNINSTALLED;
1: 	}
1: 	
1: 	private void uninstallBundle() {
1: 		ThreadLocalSubsystem.set(provisionTo);
1: 		try {
1: 			getBundle().uninstall();
1: 		}
1: 		catch (BundleException e) {
1: 			throw new SubsystemException(e);
1: 		}
1: 	}
1: }
============================================================================