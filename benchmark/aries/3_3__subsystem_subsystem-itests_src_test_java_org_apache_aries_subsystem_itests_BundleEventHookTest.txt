1:f59e428: /*
1:f59e428:  * Licensed to the Apache Software Foundation (ASF) under one
1:f59e428:  * or more contributor license agreements.  See the NOTICE file
1:f59e428:  * distributed with this work for additional information
1:f59e428:  * regarding copyright ownership.  The ASF licenses this file
1:f59e428:  * to you under the Apache License, Version 2.0 (the
1:f59e428:  * "License"); you may not use this file except in compliance
1:f59e428:  * with the License.  You may obtain a copy of the License at
1:f59e428:  *
1:f59e428:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f59e428:  *
1:f59e428:  * Unless required by applicable law or agreed to in writing,
1:f59e428:  * software distributed under the License is distributed on an
1:f59e428:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f59e428:  * KIND, either express or implied.  See the License for the
1:f59e428:  * specific language governing permissions and limitations
1:f59e428:  * under the License.
1:f59e428:  */
1:f59e428: package org.apache.aries.subsystem.itests;
1:f59e428: 
1:f59e428: import static org.junit.Assert.assertTrue;
1:f59e428: import static org.junit.Assert.fail;
1:f59e428: 
1:f59e428: import java.io.FileInputStream;
1:f59e428: import java.io.IOException;
1:f59e428: import java.util.concurrent.ExecutorService;
1:f59e428: import java.util.concurrent.Executors;
1:f59e428: import java.util.concurrent.Future;
1:f59e428: import java.util.concurrent.TimeUnit;
1:f59e428: import java.util.concurrent.TimeoutException;
1:f59e428: import java.util.concurrent.atomic.AtomicBoolean;
1:c49d412: import java.util.concurrent.atomic.AtomicReference;
1:f59e428: 
1:f59e428: import org.junit.Test;
1:f59e428: import org.osgi.framework.Bundle;
1:c49d412: import org.osgi.framework.BundleException;
1:f59e428: import org.osgi.framework.ServiceEvent;
1:f59e428: import org.osgi.framework.ServiceListener;
1:c49d412: import org.osgi.framework.ServiceReference;
1:c49d412: import org.osgi.service.subsystem.Subsystem;
1:f59e428: 
1:f59e428: public class BundleEventHookTest extends SubsystemTest {
1:f59e428:     /*
1:f59e428: 	 * Bundle-SymbolicName: bundle.a.jar
1:f59e428: 	 */
1:f59e428: 	private static final String BUNDLE_A = "bundle.a.jar";
1:c49d412: 	/*
1:c49d412: 	 * Bundle-SymbolicName: bundle.b.jar
1:c49d412: 	 */
1:c49d412: 	private static final String BUNDLE_B = "bundle.b.jar";
1:f59e428: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:f59e428: 		createBundleA();
1:c49d412: 		createBundleB();
2:f59e428: 	}
1:c49d412: 	
1:57b6627: 	private void createBundleA() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_A));
1:c49d412: 	}
1:f59e428: 	
1:57b6627: 	private void createBundleB() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_B));
1:f59e428: 	}
1:f59e428:     
1:f59e428:     /*
1:f59e428:      * See https://issues.apache.org/jira/browse/ARIES-982.
1:f59e428:      * 
1:f59e428:      * When activating, the subsystems bundle must initialize the root subsystem
1:f59e428:      * along with any persisted subsystems. Part of the root subsystem 
1:f59e428:      * initialization consists of adding all pre-existing bundles as 
1:f59e428:      * constituents. In order to ensure that no bundles are missed, a bundle
1:f59e428:      * event hook is registered first. The bundle event hook cannot process
1:f59e428:      * events until the initialization is complete. Another part of 
1:f59e428:      * initialization consists of registering the root subsystem service.
1:f59e428:      * Therefore, a potential deadlock exists if something reacts to the
1:f59e428:      * service registration by installing an unmanaged bundle.
1:f59e428:      */
1:f59e428:     @Test
1:f59e428:     public void testNoDeadlockWhenSubsystemsInitializing() throws Exception {
1:f59e428:     	final Bundle bundle = getSubsystemCoreBundle();
1:f59e428:     	bundle.stop();
1:f59e428:     	final AtomicBoolean completed = new AtomicBoolean(false);
1:f59e428:     	final ExecutorService executor = Executors.newFixedThreadPool(2);
1:f59e428:     	try {
1:f59e428: 	    	bundleContext.addServiceListener(new ServiceListener() {
1:f59e428: 				@Override
1:f59e428: 				public void serviceChanged(ServiceEvent event) {
1:f59e428: 					Future<?> future = executor.submit(new Runnable() {
1:f59e428: 						public void run() {
1:f59e428: 							try {
1:f59e428: 			    				Bundle a = bundle.getBundleContext().installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
1:f59e428: 			    				completed.set(true);
1:f59e428: 								a.uninstall();
1:f59e428: 			    			}
1:f59e428: 			    			catch (Exception e) {
1:f59e428: 			    				e.printStackTrace();
1:f59e428: 			    			}
1:f59e428: 						}
1:f59e428: 					});
1:f59e428: 					try {
1:f59e428: 						future.get();
1:f59e428: 						completed.set(true);
1:f59e428: 					}
1:f59e428: 					catch (Exception e) {
1:f59e428: 						e.printStackTrace();
1:f59e428: 					}
1:f59e428: 				}
1:f59e428: 	    	}, "(&(objectClass=org.osgi.service.subsystem.Subsystem)(subsystem.id=0))");
1:f59e428: 	    	Future<?> future = executor.submit(new Runnable() {
1:f59e428: 	    		public void run() {
1:f59e428: 	    			try {
1:f59e428: 	    				bundle.start();
1:f59e428: 	    			}
1:f59e428: 	    			catch (Exception e) {
1:f59e428: 	    				e.printStackTrace();
1:f59e428: 	    			}
1:f59e428: 	    		}
1:f59e428: 	    	});
1:f59e428: 	    	try {
1:f59e428: 	    		future.get(3, TimeUnit.SECONDS);
1:f59e428: 	    		assertTrue("Deadlock detected", completed.get());
1:f59e428: 	    	}
1:f59e428: 	    	catch (TimeoutException e) {
1:f59e428: 	    		fail("Deadlock detected");
1:f59e428: 	    	}
1:f59e428:     	}
1:f59e428:     	finally {
1:f59e428:     		executor.shutdownNow();
1:f59e428:     	}
1:f59e428:     }
1:c49d412:     
1:c49d412:     /*
1:c49d412:      * Because bundle events are queued for later asynchronous processing while
1:c49d412:      * the root subsystem is initializing, it is possible to see an installed
1:c49d412:      * event for a bundle that has been uninstalled (i.e. the bundle revision
1:c49d412:      * will be null). These events should be ignored.
1:c49d412:      */
1:c49d412:     @Test
1:c49d412:     public void testIgnoreUninstalledBundleInAsyncInstalledEvent() throws Exception {
1:c49d412:     	final Bundle core = getSubsystemCoreBundle();
1:c49d412:     	core.stop();
1:c49d412:     	final AtomicReference<Bundle> a = new AtomicReference<Bundle>();
1:c49d412:     	bundleContext.addServiceListener(
1:c49d412:     			new ServiceListener() {
1:57b6627: 					@SuppressWarnings("unchecked")
1:c49d412: 					@Override
1:c49d412: 					public void serviceChanged(ServiceEvent event) {
1:c49d412: 						if ((event.getType() & (ServiceEvent.REGISTERED | ServiceEvent.MODIFIED)) == 0)
1:c49d412: 							return;
1:c49d412: 						if (a.get() != null)
1:c49d412: 							// We've been here before and already done what needs doing.
1:c49d412: 							return;
1:11d09f4: 						ServiceReference sr = (ServiceReference)event.getServiceReference();
1:57b6627: 						bundleContext.getService(sr);
1:c49d412: 						try {
1:c49d412: 							// Queue up the installed event.
1:c49d412: 							a.set(core.getBundleContext().installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A)));
1:c49d412: 							// Ensure the bundle will be uninstalled before the event is processed.
1:c49d412: 							a.get().uninstall();
1:c49d412: 						}
1:c49d412: 						catch (Exception e) {
1:c49d412: 							e.printStackTrace();
1:c49d412: 						}
1:c49d412: 					}
1:c49d412:     			}, 
1:c49d412:     			"(&(objectClass=org.osgi.service.subsystem.Subsystem)(subsystem.id=0)(subsystem.state=RESOLVED))");
1:c49d412:     	try {
1:c49d412:     		// Before the fix, this would fail due to an NPE resulting from a
1:c49d412:     		// null bundle revision.
1:c49d412:     		core.start();
1:c49d412:     	}
1:c49d412:     	catch (BundleException e) {
1:c49d412:     		e.printStackTrace();
1:c49d412:     		fail("Subsystems failed to handle an asynchronous bundle installed event after the bundle was uninstalled");
1:c49d412:     	}
1:c49d412:     	assertBundleState(a.get(), Bundle.UNINSTALLED);
1:c49d412:     	Subsystem root = getRootSubsystem();
1:c49d412:     	assertState(Subsystem.State.ACTIVE, root);
1:c49d412:     	assertNotConstituent(root, a.get().getSymbolicName());
1:c49d412:     }
1:c49d412:     
1:c49d412:     /*
1:c49d412:      * Because bundle events are queued for later asynchronous processing while
1:c49d412:      * the root subsystem is initializing, it is possible to see an installed
1:c49d412:      * event whose origin bundle has been uninstalled (i.e. the origin bundle's
1:c49d412:      * revision will be null). These events should result in the installed
1:c49d412:      * bundle being associated with the root subsystem.
1:c49d412:      */
1:c49d412:     @Test
1:c49d412:     public void testIgnoreUninstalledOriginBundleInAsyncInstalledEvent() throws Exception {
1:c49d412:     	final Bundle core = getSubsystemCoreBundle();
1:c49d412:     	core.stop();
1:c49d412:     	final Bundle b = bundleContext.installBundle(BUNDLE_B, new FileInputStream(BUNDLE_B));
1:c49d412:     	// Ensure bundle B has a context.
1:c49d412:     	b.start();
1:c49d412:     	final AtomicReference<Bundle> a = new AtomicReference<Bundle>();
1:c49d412:     	bundleContext.addServiceListener(
1:c49d412:     			new ServiceListener() {
1:57b6627: 					@SuppressWarnings("unchecked")
1:c49d412: 					@Override
1:c49d412: 					public void serviceChanged(ServiceEvent event) {
1:c49d412: 						if ((event.getType() & (ServiceEvent.REGISTERED | ServiceEvent.MODIFIED)) == 0)
1:c49d412: 							return;
1:c49d412: 						if (a.get() != null)
1:c49d412: 							// We've been here before and already done what needs doing.
1:c49d412: 							return;
1:11d09f4: 						ServiceReference sr = (ServiceReference)event.getServiceReference();
1:57b6627: 						bundleContext.getService(sr);
1:c49d412: 						try {
1:c49d412: 							// Queue up the installed event for bundle A using B's context.
1:c49d412: 							a.set(b.getBundleContext().installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A)));
1:c49d412: 							// Ensure the origin bundle will be uninstalled before the event is processed.
1:c49d412: 							b.uninstall();
1:c49d412: 						}
1:c49d412: 						catch (Exception e) {
1:c49d412: 							e.printStackTrace();
1:c49d412: 						}
1:c49d412: 					}
1:c49d412:     			}, 
1:c49d412:     			"(&(objectClass=org.osgi.service.subsystem.Subsystem)(subsystem.id=0)(subsystem.state=RESOLVED))");
1:c49d412:     	try {
1:c49d412:     		// Before the fix, this would fail due to an NPE resulting from a
1:c49d412:     		// null bundle revision.
1:c49d412:     		core.start();
1:c49d412:     	}
1:c49d412:     	catch (BundleException e) {
1:c49d412:     		e.printStackTrace();
1:c49d412:     		fail("Subsystems failed to handle an asynchronous bundle installed event after the origin bundle was uninstalled");
1:c49d412:     	}
1:c49d412:     	assertBundleState(a.get(), Bundle.INSTALLED);
1:c49d412:     	assertBundleState(b, Bundle.UNINSTALLED);
1:c49d412:     	Subsystem root = getRootSubsystem();
1:c49d412:     	assertState(Subsystem.State.ACTIVE, root);
1:c49d412:     	assertConstituent(root, a.get().getSymbolicName());
1:c49d412:     }
1:f59e428: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:11d09f4
/////////////////////////////////////////////////////////////////////////
1: 						ServiceReference sr = (ServiceReference)event.getServiceReference();
/////////////////////////////////////////////////////////////////////////
1: 						ServiceReference sr = (ServiceReference)event.getServiceReference();
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A));
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B));
/////////////////////////////////////////////////////////////////////////
1: 					@SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1: 						bundleContext.getService(sr);
/////////////////////////////////////////////////////////////////////////
1: 					@SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1: 						bundleContext.getService(sr);
author:John Ross
-------------------------------------------------------------------------------
commit:f334800
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c49d412
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
0: import java.util.HashMap;
0: import java.util.Map;
1: import java.util.concurrent.atomic.AtomicReference;
0: import org.eclipse.equinox.region.RegionDigraph;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.ServiceReference;
0: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.service.subsystem.Subsystem;
0: import org.osgi.service.subsystem.SubsystemConstants;
/////////////////////////////////////////////////////////////////////////
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
/////////////////////////////////////////////////////////////////////////
1: 		createBundleB();
1: 	
0: 	private static void createBundleB() throws IOException {
0: 		createBundle(BUNDLE_B);
1: 	}
/////////////////////////////////////////////////////////////////////////
1:     
1:     /*
1:      * Because bundle events are queued for later asynchronous processing while
1:      * the root subsystem is initializing, it is possible to see an installed
1:      * event for a bundle that has been uninstalled (i.e. the bundle revision
1:      * will be null). These events should be ignored.
1:      */
1:     @Test
1:     public void testIgnoreUninstalledBundleInAsyncInstalledEvent() throws Exception {
1:     	final Bundle core = getSubsystemCoreBundle();
1:     	core.stop();
1:     	final AtomicReference<Bundle> a = new AtomicReference<Bundle>();
1:     	bundleContext.addServiceListener(
1:     			new ServiceListener() {
1: 					@Override
1: 					public void serviceChanged(ServiceEvent event) {
1: 						if ((event.getType() & (ServiceEvent.REGISTERED | ServiceEvent.MODIFIED)) == 0)
1: 							return;
1: 						if (a.get() != null)
1: 							// We've been here before and already done what needs doing.
1: 							return;
0: 						ServiceReference<Subsystem> sr = (ServiceReference<Subsystem>)event.getServiceReference();
0: 						Subsystem s = bundleContext.getService(sr);
1: 						try {
1: 							// Queue up the installed event.
1: 							a.set(core.getBundleContext().installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A)));
1: 							// Ensure the bundle will be uninstalled before the event is processed.
1: 							a.get().uninstall();
1: 						}
1: 						catch (Exception e) {
1: 							e.printStackTrace();
1: 						}
1: 					}
1:     			}, 
1:     			"(&(objectClass=org.osgi.service.subsystem.Subsystem)(subsystem.id=0)(subsystem.state=RESOLVED))");
1:     	try {
1:     		// Before the fix, this would fail due to an NPE resulting from a
1:     		// null bundle revision.
1:     		core.start();
1:     	}
1:     	catch (BundleException e) {
1:     		e.printStackTrace();
1:     		fail("Subsystems failed to handle an asynchronous bundle installed event after the bundle was uninstalled");
1:     	}
1:     	assertBundleState(a.get(), Bundle.UNINSTALLED);
1:     	Subsystem root = getRootSubsystem();
1:     	assertState(Subsystem.State.ACTIVE, root);
1:     	assertNotConstituent(root, a.get().getSymbolicName());
1:     }
1:     
1:     /*
1:      * Because bundle events are queued for later asynchronous processing while
1:      * the root subsystem is initializing, it is possible to see an installed
1:      * event whose origin bundle has been uninstalled (i.e. the origin bundle's
1:      * revision will be null). These events should result in the installed
1:      * bundle being associated with the root subsystem.
1:      */
1:     @Test
1:     public void testIgnoreUninstalledOriginBundleInAsyncInstalledEvent() throws Exception {
1:     	final Bundle core = getSubsystemCoreBundle();
1:     	core.stop();
1:     	final Bundle b = bundleContext.installBundle(BUNDLE_B, new FileInputStream(BUNDLE_B));
1:     	// Ensure bundle B has a context.
1:     	b.start();
1:     	final AtomicReference<Bundle> a = new AtomicReference<Bundle>();
1:     	bundleContext.addServiceListener(
1:     			new ServiceListener() {
1: 					@Override
1: 					public void serviceChanged(ServiceEvent event) {
1: 						if ((event.getType() & (ServiceEvent.REGISTERED | ServiceEvent.MODIFIED)) == 0)
1: 							return;
1: 						if (a.get() != null)
1: 							// We've been here before and already done what needs doing.
1: 							return;
0: 						ServiceReference<Subsystem> sr = (ServiceReference<Subsystem>)event.getServiceReference();
0: 						Subsystem s = bundleContext.getService(sr);
1: 						try {
1: 							// Queue up the installed event for bundle A using B's context.
1: 							a.set(b.getBundleContext().installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A)));
1: 							// Ensure the origin bundle will be uninstalled before the event is processed.
1: 							b.uninstall();
1: 						}
1: 						catch (Exception e) {
1: 							e.printStackTrace();
1: 						}
1: 					}
1:     			}, 
1:     			"(&(objectClass=org.osgi.service.subsystem.Subsystem)(subsystem.id=0)(subsystem.state=RESOLVED))");
1:     	try {
1:     		// Before the fix, this would fail due to an NPE resulting from a
1:     		// null bundle revision.
1:     		core.start();
1:     	}
1:     	catch (BundleException e) {
1:     		e.printStackTrace();
1:     		fail("Subsystems failed to handle an asynchronous bundle installed event after the origin bundle was uninstalled");
1:     	}
1:     	assertBundleState(a.get(), Bundle.INSTALLED);
1:     	assertBundleState(b, Bundle.UNINSTALLED);
1:     	Subsystem root = getRootSubsystem();
1:     	assertState(Subsystem.State.ACTIVE, root);
1:     	assertConstituent(root, a.get().getSymbolicName());
1:     }
commit:f59e428
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceEvent;
1: import org.osgi.framework.ServiceListener;
1: 
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
1: public class BundleEventHookTest extends SubsystemTest {
1:     /*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	
0: 	@Before
0: 	public static void createApplications() throws Exception {
0: 		if (createdApplications) {
0: 			return;
1: 		}
1: 		createBundleA();
0: 		createdApplications = true;
1: 	}
1: 	
0: 	private static void createBundleA() throws IOException {
0: 		createBundle(BUNDLE_A);
1: 	}
1:     
1:     /*
1:      * See https://issues.apache.org/jira/browse/ARIES-982.
1:      * 
1:      * When activating, the subsystems bundle must initialize the root subsystem
1:      * along with any persisted subsystems. Part of the root subsystem 
1:      * initialization consists of adding all pre-existing bundles as 
1:      * constituents. In order to ensure that no bundles are missed, a bundle
1:      * event hook is registered first. The bundle event hook cannot process
1:      * events until the initialization is complete. Another part of 
1:      * initialization consists of registering the root subsystem service.
1:      * Therefore, a potential deadlock exists if something reacts to the
1:      * service registration by installing an unmanaged bundle.
1:      */
1:     @Test
1:     public void testNoDeadlockWhenSubsystemsInitializing() throws Exception {
1:     	final Bundle bundle = getSubsystemCoreBundle();
1:     	bundle.stop();
1:     	final AtomicBoolean completed = new AtomicBoolean(false);
1:     	final ExecutorService executor = Executors.newFixedThreadPool(2);
1:     	try {
1: 	    	bundleContext.addServiceListener(new ServiceListener() {
1: 				@Override
1: 				public void serviceChanged(ServiceEvent event) {
1: 					Future<?> future = executor.submit(new Runnable() {
1: 						public void run() {
1: 							try {
1: 			    				Bundle a = bundle.getBundleContext().installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
1: 			    				completed.set(true);
1: 								a.uninstall();
1: 			    			}
1: 			    			catch (Exception e) {
1: 			    				e.printStackTrace();
1: 			    			}
1: 						}
1: 					});
1: 					try {
1: 						future.get();
1: 						completed.set(true);
1: 					}
1: 					catch (Exception e) {
1: 						e.printStackTrace();
1: 					}
1: 				}
1: 	    	}, "(&(objectClass=org.osgi.service.subsystem.Subsystem)(subsystem.id=0))");
1: 	    	Future<?> future = executor.submit(new Runnable() {
1: 	    		public void run() {
1: 	    			try {
1: 	    				bundle.start();
1: 	    			}
1: 	    			catch (Exception e) {
1: 	    				e.printStackTrace();
1: 	    			}
1: 	    		}
1: 	    	});
1: 	    	try {
1: 	    		future.get(3, TimeUnit.SECONDS);
1: 	    		assertTrue("Deadlock detected", completed.get());
1: 	    	}
1: 	    	catch (TimeoutException e) {
1: 	    		fail("Deadlock detected");
1: 	    	}
1:     	}
1:     	finally {
1:     		executor.shutdownNow();
1:     	}
1:     }
1: }
============================================================================