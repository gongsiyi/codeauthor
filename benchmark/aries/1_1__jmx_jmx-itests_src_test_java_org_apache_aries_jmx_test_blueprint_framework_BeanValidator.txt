1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.test.blueprint.framework;
1:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:fdf3952: 
1:fdf3952: import java.util.ArrayList;
1:fdf3952: import java.util.List;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: 
1:fdf3952: 
1:fdf3952: public class BeanValidator extends AbstractCompositeDataValidator implements NonNullObjectValueValidator, TargetValidator{
1:fdf3952:     
1:fdf3952:     private boolean validateArgumentsFlag = true;
1:fdf3952:     private List<BeanArgumentValidator> beanArgumentValidators = new ArrayList<BeanArgumentValidator>();
1:fdf3952:     private boolean validatePropertiesFlag = true;
1:fdf3952:     private List<BeanPropertyValidator> beanPropertyValidators = new ArrayList<BeanPropertyValidator>();
1:fdf3952:     
1:fdf3952:     public BeanValidator(String className){
1:fdf3952:         super(BlueprintMetadataMBean.BEAN_METADATA_TYPE);
1:fdf3952:         setExpectValue(BlueprintMetadataMBean.CLASS_NAME, className);
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public BeanValidator(String className, String initMethod){
1:fdf3952:         super(BlueprintMetadataMBean.BEAN_METADATA_TYPE);
1:fdf3952:         setExpectValue(BlueprintMetadataMBean.CLASS_NAME, className);
1:fdf3952:         setExpectValue(BlueprintMetadataMBean.INIT_METHOD, initMethod);
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public BeanValidator(String className, String initMethod, String destroyMethod){
1:fdf3952:         super(BlueprintMetadataMBean.BEAN_METADATA_TYPE);
1:fdf3952:         setExpectValue(BlueprintMetadataMBean.CLASS_NAME, className);
1:fdf3952:         setExpectValue(BlueprintMetadataMBean.INIT_METHOD, initMethod);
1:fdf3952:         setExpectValue(BlueprintMetadataMBean.DESTROY_METHOD, destroyMethod);
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public void setValidateArgumentsFlag(boolean flag){
1:fdf3952:         validateArgumentsFlag = flag;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public void addArgumentValidators(BeanArgumentValidator... validators){
1:fdf3952:         for (BeanArgumentValidator beanArgumentValidator : validators)
1:fdf3952:             beanArgumentValidators.add(beanArgumentValidator);
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public void setValidatePropertiesFlag(boolean flag){
1:fdf3952:         validatePropertiesFlag = flag;
1:fdf3952:     }
1:fdf3952:             
1:fdf3952:     public void addPropertyValidators(BeanPropertyValidator... validators){
1:fdf3952:         for (BeanPropertyValidator beanPropertyValidator : validators)
1:fdf3952:             beanPropertyValidators.add(beanPropertyValidator);
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public void validate(CompositeData target){
1:fdf3952:         super.validate(target);
1:fdf3952:         
1:fdf3952:         //Validate args
1:fdf3952:         if (validateArgumentsFlag){
1:fdf3952:             CompositeData[] args = (CompositeData[])target.get(BlueprintMetadataMBean.ARGUMENTS);  
1:fdf3952:             assertNotNull(args); // at least CompositeData[0]
1:fdf3952:             assertEquals("The size of arguments is not equals, expect " + beanArgumentValidators.size() + " but got " + args.length, 
1:fdf3952:                     beanArgumentValidators.size(), args.length);
1:fdf3952:             for (int i=0; i<beanArgumentValidators.size(); i++) // the order of the arg validators should be the same with the args
1:fdf3952:                 beanArgumentValidators.get(i).validate(args[i]);
1:fdf3952:         }
1:fdf3952:         
1:fdf3952:         //Validate props
1:fdf3952:         if (validatePropertiesFlag){
1:fdf3952:             CompositeData[] props = (CompositeData[])target.get(BlueprintMetadataMBean.PROPERTIES);
1:fdf3952:             assertNotNull(props);
1:fdf3952:             assertEquals("The size of properties is not equals, expect " + beanPropertyValidators.size() + " but got " + props.length, 
1:fdf3952:                     beanPropertyValidators.size(), props.length);
1:fdf3952:             for (int i=0; i<beanPropertyValidators.size(); i++)
1:fdf3952:                 beanPropertyValidators.get(i).validate(props[i]);
1:fdf3952:             
1:fdf3952:         }
1:fdf3952:         
1:fdf3952:     }
1:fdf3952:     
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.test.blueprint.framework;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: 
1: 
1: public class BeanValidator extends AbstractCompositeDataValidator implements NonNullObjectValueValidator, TargetValidator{
1:     
1:     private boolean validateArgumentsFlag = true;
1:     private List<BeanArgumentValidator> beanArgumentValidators = new ArrayList<BeanArgumentValidator>();
1:     private boolean validatePropertiesFlag = true;
1:     private List<BeanPropertyValidator> beanPropertyValidators = new ArrayList<BeanPropertyValidator>();
1:     
1:     public BeanValidator(String className){
1:         super(BlueprintMetadataMBean.BEAN_METADATA_TYPE);
1:         setExpectValue(BlueprintMetadataMBean.CLASS_NAME, className);
1:     }
1:     
1:     public BeanValidator(String className, String initMethod){
1:         super(BlueprintMetadataMBean.BEAN_METADATA_TYPE);
1:         setExpectValue(BlueprintMetadataMBean.CLASS_NAME, className);
1:         setExpectValue(BlueprintMetadataMBean.INIT_METHOD, initMethod);
1:     }
1:     
1:     public BeanValidator(String className, String initMethod, String destroyMethod){
1:         super(BlueprintMetadataMBean.BEAN_METADATA_TYPE);
1:         setExpectValue(BlueprintMetadataMBean.CLASS_NAME, className);
1:         setExpectValue(BlueprintMetadataMBean.INIT_METHOD, initMethod);
1:         setExpectValue(BlueprintMetadataMBean.DESTROY_METHOD, destroyMethod);
1:     }
1:     
1:     public void setValidateArgumentsFlag(boolean flag){
1:         validateArgumentsFlag = flag;
1:     }
1:     
1:     public void addArgumentValidators(BeanArgumentValidator... validators){
1:         for (BeanArgumentValidator beanArgumentValidator : validators)
1:             beanArgumentValidators.add(beanArgumentValidator);
1:     }
1:     
1:     public void setValidatePropertiesFlag(boolean flag){
1:         validatePropertiesFlag = flag;
1:     }
1:             
1:     public void addPropertyValidators(BeanPropertyValidator... validators){
1:         for (BeanPropertyValidator beanPropertyValidator : validators)
1:             beanPropertyValidators.add(beanPropertyValidator);
1:     }
1:     
1:     public void validate(CompositeData target){
1:         super.validate(target);
1:         
1:         //Validate args
1:         if (validateArgumentsFlag){
1:             CompositeData[] args = (CompositeData[])target.get(BlueprintMetadataMBean.ARGUMENTS);  
1:             assertNotNull(args); // at least CompositeData[0]
1:             assertEquals("The size of arguments is not equals, expect " + beanArgumentValidators.size() + " but got " + args.length, 
1:                     beanArgumentValidators.size(), args.length);
1:             for (int i=0; i<beanArgumentValidators.size(); i++) // the order of the arg validators should be the same with the args
1:                 beanArgumentValidators.get(i).validate(args[i]);
1:         }
1:         
1:         //Validate props
1:         if (validatePropertiesFlag){
1:             CompositeData[] props = (CompositeData[])target.get(BlueprintMetadataMBean.PROPERTIES);
1:             assertNotNull(props);
1:             assertEquals("The size of properties is not equals, expect " + beanPropertyValidators.size() + " but got " + props.length, 
1:                     beanPropertyValidators.size(), props.length);
1:             for (int i=0; i<beanPropertyValidators.size(); i++)
1:                 beanPropertyValidators.get(i).validate(props[i]);
1:             
1:         }
1:         
1:     }
1:     
1: }
============================================================================