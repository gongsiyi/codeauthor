1:3b4e485: /*
1:3b4e485:  * Licensed under the Apache License, Version 2.0 (the "License");
1:3b4e485:  * you may not use this file except in compliance with the License.
1:3b4e485:  * You may obtain a copy of the License at
1:3b4e485:  *
1:3b4e485:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3b4e485:  *
1:3b4e485:  * Unless required by applicable law or agreed to in writing, software
1:3b4e485:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3b4e485:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3b4e485:  * See the License for the specific language governing permissions and
1:3b4e485:  * limitations under the License.
1:3b4e485:  */
1:3b4e485: package org.apache.aries.subsystem.core.archive;
1:3b4e485: 
1:3b4e485: import static org.junit.Assert.assertEquals;
1:3b4e485: import static org.junit.Assert.assertFalse;
1:3b4e485: import static org.junit.Assert.assertTrue;
1:3b4e485: 
1:3b4e485: import java.util.Arrays;
1:3b4e485: import java.util.Collection;
1:3b4e485: import java.util.Collections;
1:3b4e485: import java.util.HashMap;
1:3b4e485: import java.util.HashSet;
1:3b4e485: import java.util.List;
1:3b4e485: import java.util.Map;
1:3b4e485: import java.util.Set;
1:3b4e485: 
1:3b4e485: import org.apache.aries.subsystem.core.internal.OsgiIdentityCapability;
1:3b4e485: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1:3b4e485: import org.junit.Test;
1:3b4e485: import org.osgi.framework.Version;
1:3b4e485: import org.osgi.framework.namespace.IdentityNamespace;
1:3b4e485: import org.osgi.resource.Capability;
1:3b4e485: import org.osgi.resource.Requirement;
1:3b4e485: import org.osgi.resource.Resource;
1:3b4e485: 
1:3b4e485: /*
1:3b4e485:  * https://issues.apache.org/jira/browse/ARIES-1425
1:3b4e485:  * 
1:3b4e485:  * Support both osgi.bundle and osgi.fragment resource types when given a 
1:3b4e485:  * Subsystem-Content header clause with an unspecified type attribute.
1:3b4e485:  */
1:3b4e485: public class Aries1425Test {
1:3b4e485: 	private static final String BUNDLE_A = "bundle.a";
1:3b4e485: 	private static final String BUNDLE_B = "bundle.b;type=osgi.bundle";
1:3b4e485: 	private static final String BUNDLE_C = "bundle.c;type=osgi.fragment";
1:3b4e485: 	private static final String BUNDLE_D = "bundle.a;type=osgi.bundle";
1:3b4e485: 	private static final String BUNDLE_E = "bundle.b";
1:3b4e485: 	
1:3b4e485: 	private static final String HEADER_1 = BUNDLE_A + ',' + BUNDLE_B + ',' + BUNDLE_C;
1:3b4e485: 	private static final String HEADER_2 = BUNDLE_C + ',' + BUNDLE_D + ',' + BUNDLE_E;
1:3b4e485: 	
1:3b4e485: 	@Test
1:3b4e485: 	public void testGetValue() {
1:3b4e485: 		SubsystemContentHeader header = new SubsystemContentHeader(HEADER_1);
1:3b4e485: 		assertEquals("Wrong value", HEADER_1, header.getValue());
1:3b4e485: 	}
1:3b4e485: 	
1:3b4e485: 	@Test
1:3b4e485: 	public void testToString() {
1:3b4e485: 		SubsystemContentHeader header = new SubsystemContentHeader(HEADER_1);
1:3b4e485: 		assertEquals("Wrong value", HEADER_1, header.toString());
1:3b4e485: 	}
1:3b4e485: 	
1:3b4e485: 	@Test
1:3b4e485: 	public void testClauseToString() {
1:3b4e485: 		Set<String> clauseStrs = new HashSet<String>(Arrays.asList(HEADER_1.split(",")));
1:3b4e485: 		SubsystemContentHeader header = new SubsystemContentHeader(HEADER_1);
1:3b4e485: 		Collection<SubsystemContentHeader.Clause> clauses = header.getClauses();
1:3b4e485: 		assertEquals("Wrong size", 3, clauses.size());
1:3b4e485: 		for (SubsystemContentHeader.Clause clause : clauses) {
1:3b4e485: 			String clauseStr = clause.toString();
1:3b4e485: 			assertTrue("Wrong clause", clauseStrs.remove(clauseStr));
1:3b4e485: 		}
1:3b4e485: 	}
1:3b4e485: 	
1:3b4e485: 	@Test
1:3b4e485: 	public void testGetType() {
1:3b4e485: 		SubsystemContentHeader header = new SubsystemContentHeader(HEADER_1);
1:3b4e485: 		Collection<SubsystemContentHeader.Clause> clauses = header.getClauses();
1:3b4e485: 		assertEquals("Wrong size", 3, clauses.size());
1:3b4e485: 		Map<String, SubsystemContentHeader.Clause> map = new HashMap<String, SubsystemContentHeader.Clause>(3);
1:3b4e485: 		for (SubsystemContentHeader.Clause clause : clauses) {
1:3b4e485: 			map.put(clause.toString(), clause);
1:3b4e485: 		}
1:3b4e485: 		SubsystemContentHeader.Clause clause = map.get(BUNDLE_A);
1:3b4e485: 		assertEquals("Wrong type", IdentityNamespace.TYPE_BUNDLE, clause.getType());
1:3b4e485: 		clause = map.get(BUNDLE_B);
1:3b4e485: 		assertEquals("Wrong type", IdentityNamespace.TYPE_BUNDLE, clause.getType());
1:3b4e485: 		clause = map.get(BUNDLE_C);
1:3b4e485: 		assertEquals("Wrong type", IdentityNamespace.TYPE_FRAGMENT, clause.getType());
1:3b4e485: 	}
1:3b4e485: 	
1:3b4e485: 	@Test
1:3b4e485: 	public void testIsTypeSpecified() {
1:3b4e485: 		SubsystemContentHeader header = new SubsystemContentHeader(HEADER_1);
1:3b4e485: 		Collection<SubsystemContentHeader.Clause> clauses = header.getClauses();
1:3b4e485: 		assertEquals("Wrong size", 3, clauses.size());
1:3b4e485: 		Map<String, SubsystemContentHeader.Clause> map = new HashMap<String, SubsystemContentHeader.Clause>(3);
1:3b4e485: 		for (SubsystemContentHeader.Clause clause : clauses) {
1:3b4e485: 			map.put(clause.toString(), clause);
1:3b4e485: 		}
1:3b4e485: 		SubsystemContentHeader.Clause clause = map.get(BUNDLE_A);
1:3b4e485: 		assertEquals("Should not be specified", Boolean.FALSE, clause.isTypeSpecified());
1:3b4e485: 		clause = map.get(BUNDLE_B);
1:3b4e485: 		assertEquals("Should be specified", Boolean.TRUE, clause.isTypeSpecified());
1:3b4e485: 		clause = map.get(BUNDLE_C);
1:3b4e485: 		assertEquals("Should be specified", Boolean.TRUE, clause.isTypeSpecified());
1:3b4e485: 	}
1:3b4e485: 	
1:3b4e485: 	@Test
1:3b4e485: 	public void testToRequirement() {
1:3b4e485: 		SubsystemContentHeader header = new SubsystemContentHeader(HEADER_1);
1:3b4e485: 		Collection<SubsystemContentHeader.Clause> clauses = header.getClauses();
1:3b4e485: 		assertEquals("Wrong size", 3, clauses.size());
1:3b4e485: 		Map<String, SubsystemContentHeader.Clause> map = new HashMap<String, SubsystemContentHeader.Clause>(3);
1:3b4e485: 		for (SubsystemContentHeader.Clause clause : clauses) {
1:3b4e485: 			map.put(clause.toString(), clause);
1:3b4e485: 		}
1:3b4e485: 		Resource resource = new Resource() {
1:3b4e485: 			@Override
1:3b4e485: 			public List<Capability> getCapabilities(String namespace) {
1:3b4e485: 				return Collections.emptyList();
1:3b4e485: 			}
1:3b4e485: 
1:3b4e485: 			@Override
1:3b4e485: 			public List<Requirement> getRequirements(String namespace) {
1:3b4e485: 				return Collections.emptyList();
1:3b4e485: 			}
1:3b4e485: 		};
1:3b4e485: 		SubsystemContentHeader.Clause clause = map.get(BUNDLE_A);
1:3b4e485: 		Requirement requirement = clause.toRequirement(resource);
1:3b4e485: 		assertTrue("Wrong requirement", ResourceHelper.matches(
1:3b4e485: 				requirement, 
1:3b4e485: 				new OsgiIdentityCapability(
1:3b4e485: 						resource,
1:3b4e485: 						BUNDLE_A,
1:3b4e485: 						Version.emptyVersion,
1:3b4e485: 						IdentityNamespace.TYPE_FRAGMENT)));
1:3b4e485: 		assertTrue("Wrong requirement", ResourceHelper.matches(
1:3b4e485: 				requirement, 
1:3b4e485: 				new OsgiIdentityCapability(
1:3b4e485: 						resource,
1:3b4e485: 						BUNDLE_A,
1:3b4e485: 						Version.emptyVersion,
1:3b4e485: 						IdentityNamespace.TYPE_BUNDLE)));
1:3b4e485: 		clause = map.get(BUNDLE_B);
1:3b4e485: 		requirement = clause.toRequirement(resource);
1:3b4e485: 		assertFalse("Wrong requirement", ResourceHelper.matches(
1:3b4e485: 				requirement, 
1:3b4e485: 				new OsgiIdentityCapability(
1:3b4e485: 						resource,
1:3b4e485: 						"bundle.b",
1:3b4e485: 						Version.emptyVersion,
1:3b4e485: 						IdentityNamespace.TYPE_FRAGMENT)));
1:3b4e485: 		assertTrue("Wrong requirement", ResourceHelper.matches(
1:3b4e485: 				requirement, 
1:3b4e485: 				new OsgiIdentityCapability(
1:3b4e485: 						resource,
1:3b4e485: 						"bundle.b",
1:3b4e485: 						Version.emptyVersion,
1:3b4e485: 						IdentityNamespace.TYPE_BUNDLE)));
1:3b4e485: 		clause = map.get(BUNDLE_C);
1:3b4e485: 		requirement = clause.toRequirement(resource);
1:3b4e485: 		assertTrue("Wrong requirement", ResourceHelper.matches(
1:3b4e485: 				requirement, 
1:3b4e485: 				new OsgiIdentityCapability(
1:3b4e485: 						resource,
1:3b4e485: 						"bundle.c",
1:3b4e485: 						Version.emptyVersion,
1:3b4e485: 						IdentityNamespace.TYPE_FRAGMENT)));
1:3b4e485: 		assertFalse("Wrong requirement", ResourceHelper.matches(
1:3b4e485: 				requirement, 
1:3b4e485: 				new OsgiIdentityCapability(
1:3b4e485: 						resource,
1:3b4e485: 						"bundle.c",
1:3b4e485: 						Version.emptyVersion,
1:3b4e485: 						IdentityNamespace.TYPE_BUNDLE)));
1:3b4e485: 	}
1:3b4e485: 	
1:3b4e485: 	@Test
1:3b4e485: 	public void testEquals() {
1:3b4e485: 		SubsystemContentHeader header1 = new SubsystemContentHeader(HEADER_1);
1:3b4e485: 		SubsystemContentHeader header2 = new SubsystemContentHeader(HEADER_2);
1:3b4e485: 		assertEquals("Headers are equal", header1, header2);
1:3b4e485: 	}
1:3b4e485: 	
1:3b4e485: 	@Test
1:3b4e485: 	public void testHashcode() {
1:3b4e485: 		SubsystemContentHeader header1 = new SubsystemContentHeader(HEADER_1);
1:3b4e485: 		SubsystemContentHeader header2 = new SubsystemContentHeader(HEADER_2);
1:3b4e485: 		assertEquals("Headers are equal", header1.hashCode(), header2.hashCode());
1:3b4e485: 	}
1:3b4e485: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:3b4e485
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.aries.subsystem.core.internal.OsgiIdentityCapability;
1: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1: import org.junit.Test;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1425
1:  * 
1:  * Support both osgi.bundle and osgi.fragment resource types when given a 
1:  * Subsystem-Content header clause with an unspecified type attribute.
1:  */
1: public class Aries1425Test {
1: 	private static final String BUNDLE_A = "bundle.a";
1: 	private static final String BUNDLE_B = "bundle.b;type=osgi.bundle";
1: 	private static final String BUNDLE_C = "bundle.c;type=osgi.fragment";
1: 	private static final String BUNDLE_D = "bundle.a;type=osgi.bundle";
1: 	private static final String BUNDLE_E = "bundle.b";
1: 	
1: 	private static final String HEADER_1 = BUNDLE_A + ',' + BUNDLE_B + ',' + BUNDLE_C;
1: 	private static final String HEADER_2 = BUNDLE_C + ',' + BUNDLE_D + ',' + BUNDLE_E;
1: 	
1: 	@Test
1: 	public void testGetValue() {
1: 		SubsystemContentHeader header = new SubsystemContentHeader(HEADER_1);
1: 		assertEquals("Wrong value", HEADER_1, header.getValue());
1: 	}
1: 	
1: 	@Test
1: 	public void testToString() {
1: 		SubsystemContentHeader header = new SubsystemContentHeader(HEADER_1);
1: 		assertEquals("Wrong value", HEADER_1, header.toString());
1: 	}
1: 	
1: 	@Test
1: 	public void testClauseToString() {
1: 		Set<String> clauseStrs = new HashSet<String>(Arrays.asList(HEADER_1.split(",")));
1: 		SubsystemContentHeader header = new SubsystemContentHeader(HEADER_1);
1: 		Collection<SubsystemContentHeader.Clause> clauses = header.getClauses();
1: 		assertEquals("Wrong size", 3, clauses.size());
1: 		for (SubsystemContentHeader.Clause clause : clauses) {
1: 			String clauseStr = clause.toString();
1: 			assertTrue("Wrong clause", clauseStrs.remove(clauseStr));
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testGetType() {
1: 		SubsystemContentHeader header = new SubsystemContentHeader(HEADER_1);
1: 		Collection<SubsystemContentHeader.Clause> clauses = header.getClauses();
1: 		assertEquals("Wrong size", 3, clauses.size());
1: 		Map<String, SubsystemContentHeader.Clause> map = new HashMap<String, SubsystemContentHeader.Clause>(3);
1: 		for (SubsystemContentHeader.Clause clause : clauses) {
1: 			map.put(clause.toString(), clause);
1: 		}
1: 		SubsystemContentHeader.Clause clause = map.get(BUNDLE_A);
1: 		assertEquals("Wrong type", IdentityNamespace.TYPE_BUNDLE, clause.getType());
1: 		clause = map.get(BUNDLE_B);
1: 		assertEquals("Wrong type", IdentityNamespace.TYPE_BUNDLE, clause.getType());
1: 		clause = map.get(BUNDLE_C);
1: 		assertEquals("Wrong type", IdentityNamespace.TYPE_FRAGMENT, clause.getType());
1: 	}
1: 	
1: 	@Test
1: 	public void testIsTypeSpecified() {
1: 		SubsystemContentHeader header = new SubsystemContentHeader(HEADER_1);
1: 		Collection<SubsystemContentHeader.Clause> clauses = header.getClauses();
1: 		assertEquals("Wrong size", 3, clauses.size());
1: 		Map<String, SubsystemContentHeader.Clause> map = new HashMap<String, SubsystemContentHeader.Clause>(3);
1: 		for (SubsystemContentHeader.Clause clause : clauses) {
1: 			map.put(clause.toString(), clause);
1: 		}
1: 		SubsystemContentHeader.Clause clause = map.get(BUNDLE_A);
1: 		assertEquals("Should not be specified", Boolean.FALSE, clause.isTypeSpecified());
1: 		clause = map.get(BUNDLE_B);
1: 		assertEquals("Should be specified", Boolean.TRUE, clause.isTypeSpecified());
1: 		clause = map.get(BUNDLE_C);
1: 		assertEquals("Should be specified", Boolean.TRUE, clause.isTypeSpecified());
1: 	}
1: 	
1: 	@Test
1: 	public void testToRequirement() {
1: 		SubsystemContentHeader header = new SubsystemContentHeader(HEADER_1);
1: 		Collection<SubsystemContentHeader.Clause> clauses = header.getClauses();
1: 		assertEquals("Wrong size", 3, clauses.size());
1: 		Map<String, SubsystemContentHeader.Clause> map = new HashMap<String, SubsystemContentHeader.Clause>(3);
1: 		for (SubsystemContentHeader.Clause clause : clauses) {
1: 			map.put(clause.toString(), clause);
1: 		}
1: 		Resource resource = new Resource() {
1: 			@Override
1: 			public List<Capability> getCapabilities(String namespace) {
1: 				return Collections.emptyList();
1: 			}
1: 
1: 			@Override
1: 			public List<Requirement> getRequirements(String namespace) {
1: 				return Collections.emptyList();
1: 			}
1: 		};
1: 		SubsystemContentHeader.Clause clause = map.get(BUNDLE_A);
1: 		Requirement requirement = clause.toRequirement(resource);
1: 		assertTrue("Wrong requirement", ResourceHelper.matches(
1: 				requirement, 
1: 				new OsgiIdentityCapability(
1: 						resource,
1: 						BUNDLE_A,
1: 						Version.emptyVersion,
1: 						IdentityNamespace.TYPE_FRAGMENT)));
1: 		assertTrue("Wrong requirement", ResourceHelper.matches(
1: 				requirement, 
1: 				new OsgiIdentityCapability(
1: 						resource,
1: 						BUNDLE_A,
1: 						Version.emptyVersion,
1: 						IdentityNamespace.TYPE_BUNDLE)));
1: 		clause = map.get(BUNDLE_B);
1: 		requirement = clause.toRequirement(resource);
1: 		assertFalse("Wrong requirement", ResourceHelper.matches(
1: 				requirement, 
1: 				new OsgiIdentityCapability(
1: 						resource,
1: 						"bundle.b",
1: 						Version.emptyVersion,
1: 						IdentityNamespace.TYPE_FRAGMENT)));
1: 		assertTrue("Wrong requirement", ResourceHelper.matches(
1: 				requirement, 
1: 				new OsgiIdentityCapability(
1: 						resource,
1: 						"bundle.b",
1: 						Version.emptyVersion,
1: 						IdentityNamespace.TYPE_BUNDLE)));
1: 		clause = map.get(BUNDLE_C);
1: 		requirement = clause.toRequirement(resource);
1: 		assertTrue("Wrong requirement", ResourceHelper.matches(
1: 				requirement, 
1: 				new OsgiIdentityCapability(
1: 						resource,
1: 						"bundle.c",
1: 						Version.emptyVersion,
1: 						IdentityNamespace.TYPE_FRAGMENT)));
1: 		assertFalse("Wrong requirement", ResourceHelper.matches(
1: 				requirement, 
1: 				new OsgiIdentityCapability(
1: 						resource,
1: 						"bundle.c",
1: 						Version.emptyVersion,
1: 						IdentityNamespace.TYPE_BUNDLE)));
1: 	}
1: 	
1: 	@Test
1: 	public void testEquals() {
1: 		SubsystemContentHeader header1 = new SubsystemContentHeader(HEADER_1);
1: 		SubsystemContentHeader header2 = new SubsystemContentHeader(HEADER_2);
1: 		assertEquals("Headers are equal", header1, header2);
1: 	}
1: 	
1: 	@Test
1: 	public void testHashcode() {
1: 		SubsystemContentHeader header1 = new SubsystemContentHeader(HEADER_1);
1: 		SubsystemContentHeader header2 = new SubsystemContentHeader(HEADER_2);
1: 		assertEquals("Headers are equal", header1.hashCode(), header2.hashCode());
1: 	}
1: }
============================================================================