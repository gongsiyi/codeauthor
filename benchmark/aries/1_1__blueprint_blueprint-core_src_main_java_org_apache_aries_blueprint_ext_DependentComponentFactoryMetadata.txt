1:1cfd24a: /*
1:1cfd24a:  * Licensed to the Apache Software Foundation (ASF) under one
1:1cfd24a:  * or more contributor license agreements.  See the NOTICE file
1:1cfd24a:  * distributed with this work for additional information
1:1cfd24a:  * regarding copyright ownership.  The ASF licenses this file
1:1cfd24a:  * to you under the Apache License, Version 2.0 (the
1:1cfd24a:  * "License"); you may not use this file except in compliance
1:1cfd24a:  * with the License.  You may obtain a copy of the License at
1:1cfd24a:  *
1:1cfd24a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1cfd24a:  *
1:1cfd24a:  * Unless required by applicable law or agreed to in writing,
1:1cfd24a:  * software distributed under the License is distributed on an
1:1cfd24a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1cfd24a:  * KIND, either express or implied.  See the License for the
1:1cfd24a:  * specific language governing permissions and limitations
1:1cfd24a:  * under the License.
1:1cfd24a:  */
1:1cfd24a: package org.apache.aries.blueprint.ext;
1:1cfd24a: 
1:1cfd24a: /**
1:1cfd24a:  * Metadata for custom components that need to plug in to the
1:1cfd24a:  * Blueprint container lifecycle for beans
1:1cfd24a:  */
1:1cfd24a: public interface DependentComponentFactoryMetadata extends ComponentFactoryMetadata {
1:1cfd24a:     /**
1:1cfd24a:      * Interface that allows to notify the container when the dependencies of the component
1:1cfd24a:      * become satisfied or unsatified.
1:1cfd24a:      */
1:1cfd24a:     interface SatisfactionCallback {
1:1cfd24a:         /**
1:1cfd24a:          * Alert the container that the satisfaction status has changed. isSatisfied() should reflect this.
1:1cfd24a:          */
1:1cfd24a:         void notifyChanged();
1:1cfd24a:     }
1:1cfd24a:     
1:1cfd24a:     /**
1:1cfd24a:      * Start tracking the dependencies for this component.
1:1cfd24a:      * @param observer The container callback for alerting the container of status changes
1:1cfd24a:      */
1:1cfd24a:     void startTracking(SatisfactionCallback observer);
1:1cfd24a:     
1:1cfd24a:     /**
1:1cfd24a:      * Stop tracking the dependencies for this component.
1:1cfd24a:      */
1:1cfd24a:     void stopTracking();
1:1cfd24a:     
1:1cfd24a:     /**
1:1cfd24a:      * Return a string representation of the dependencies of this component. This will be used
1:1cfd24a:      * in diagnostics as well as the GRACE_PERIOD event.
1:1cfd24a:      * @return
1:1cfd24a:      */
1:1cfd24a:     String getDependencyDescriptor();
1:1cfd24a: 
1:1cfd24a:     /**
1:1cfd24a:      * Are all dependencies of this component satisfied?
1:1cfd24a:      * @return
1:1cfd24a:      */
1:1cfd24a:     boolean isSatisfied();
1:1cfd24a: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:1cfd24a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.ext;
1: 
1: /**
1:  * Metadata for custom components that need to plug in to the
1:  * Blueprint container lifecycle for beans
1:  */
1: public interface DependentComponentFactoryMetadata extends ComponentFactoryMetadata {
1:     /**
1:      * Interface that allows to notify the container when the dependencies of the component
1:      * become satisfied or unsatified.
1:      */
1:     interface SatisfactionCallback {
1:         /**
1:          * Alert the container that the satisfaction status has changed. isSatisfied() should reflect this.
1:          */
1:         void notifyChanged();
1:     }
1:     
1:     /**
1:      * Start tracking the dependencies for this component.
1:      * @param observer The container callback for alerting the container of status changes
1:      */
1:     void startTracking(SatisfactionCallback observer);
1:     
1:     /**
1:      * Stop tracking the dependencies for this component.
1:      */
1:     void stopTracking();
1:     
1:     /**
1:      * Return a string representation of the dependencies of this component. This will be used
1:      * in diagnostics as well as the GRACE_PERIOD event.
1:      * @return
1:      */
1:     String getDependencyDescriptor();
1: 
1:     /**
1:      * Are all dependencies of this component satisfied?
1:      * @return
1:      */
1:     boolean isSatisfied();
1: }
============================================================================