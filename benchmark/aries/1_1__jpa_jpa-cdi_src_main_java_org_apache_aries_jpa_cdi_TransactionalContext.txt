1:5a4dcb4: /*
1:5a4dcb4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a4dcb4:  * contributor license agreements.  See the NOTICE file distributed with
1:5a4dcb4:  * this work for additional information regarding copyright ownership.
1:5a4dcb4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a4dcb4:  * (the "License"); you may not use this file except in compliance with
1:5a4dcb4:  * the License.  You may obtain a copy of the License at
1:5a4dcb4:  *
1:5a4dcb4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5a4dcb4:  *
1:5a4dcb4:  * Unless required by applicable law or agreed to in writing, software
1:5a4dcb4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a4dcb4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a4dcb4:  * See the License for the specific language governing permissions and
1:5a4dcb4:  * limitations under the License.
1:5a4dcb4:  */
1:5a4dcb4: package org.apache.aries.jpa.cdi;
1:5a4dcb4: 
1:5a4dcb4: import javax.enterprise.context.ContextNotActiveException;
1:5a4dcb4: import javax.enterprise.context.spi.Context;
1:5a4dcb4: import javax.enterprise.context.spi.Contextual;
1:5a4dcb4: import javax.enterprise.context.spi.CreationalContext;
1:5a4dcb4: import javax.enterprise.inject.spi.Bean;
1:5a4dcb4: import javax.enterprise.inject.spi.BeanManager;
1:5a4dcb4: import javax.transaction.Status;
1:5a4dcb4: import javax.transaction.Synchronization;
1:5a4dcb4: import javax.transaction.SystemException;
1:5a4dcb4: import javax.transaction.TransactionScoped;
1:5a4dcb4: import java.lang.annotation.Annotation;
1:5a4dcb4: import java.util.HashMap;
1:5a4dcb4: import java.util.Map;
1:5a4dcb4: 
1:5a4dcb4: import org.slf4j.Logger;
1:5a4dcb4: import org.slf4j.LoggerFactory;
1:5a4dcb4: 
1:5a4dcb4: public class TransactionalContext implements Context {
1:5a4dcb4: 
1:5a4dcb4:     private static final Object TRANSACTION_BEANS_KEY = TransactionalContext.class.getName() + ".TRANSACTION_BEANS";
1:5a4dcb4: 
1:5a4dcb4:     private static final Logger log = LoggerFactory.getLogger(TransactionalContext.class);
1:5a4dcb4: 
1:5a4dcb4:     private BeanManager beanManager;
1:5a4dcb4: 
1:5a4dcb4:     private volatile TransactionSupport transactionSupport;
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * Creates a new transactional context.
1:5a4dcb4:      *
1:5a4dcb4:      * @param beanManager {@link BeanManager}.
1:5a4dcb4:      */
1:5a4dcb4:     TransactionalContext(BeanManager beanManager) {
1:5a4dcb4:         this.beanManager = beanManager;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * Obtains a reference to a {@link TransactionSupport} bean.
1:5a4dcb4:      *
1:5a4dcb4:      * @return a bean that implements {@link TransactionSupport}.
1:5a4dcb4:      */
1:5a4dcb4:     private TransactionSupport getTransactionSupportReference() {
1:5a4dcb4:         @SuppressWarnings("unchecked")
1:5a4dcb4:         Bean<TransactionSupport> bean = (Bean<TransactionSupport>) beanManager
1:5a4dcb4:                 .resolve(beanManager.getBeans(TransactionSupport.class));
1:5a4dcb4:         if (bean == null) {
1:5a4dcb4:             throw new RuntimeException("TransactionSupport was not found");
1:5a4dcb4:         }
1:5a4dcb4: 
1:5a4dcb4:         CreationalContext<TransactionSupport> ctx = beanManager.createCreationalContext(bean);
1:5a4dcb4:         return (TransactionSupport) beanManager.getReference(bean,
1:5a4dcb4:                 TransactionSupport.class, ctx);
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * Lazily initialize the object field and gets a reference to a bean that
1:5a4dcb4:      * implements {@link TransactionSupport}.
1:5a4dcb4:      *
1:5a4dcb4:      * @return a bean that implements {@link TransactionSupport}.
1:5a4dcb4:      */
1:5a4dcb4:     private TransactionSupport getTransactionSupport() {
1:5a4dcb4:         if (transactionSupport == null) {
1:5a4dcb4:             synchronized (this) {
1:5a4dcb4:                 if (transactionSupport == null) {
1:5a4dcb4:                     transactionSupport = getTransactionSupportReference();
1:5a4dcb4:                 }
1:5a4dcb4:             }
1:5a4dcb4:         }
1:5a4dcb4: 
1:5a4dcb4:         return transactionSupport;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * Registers a synchronization object for the current transaction.
1:5a4dcb4:      *
1:5a4dcb4:      * @param transactionSupport a {@link TransactionSupport} bean.
1:5a4dcb4:      * @param instances          a map that contains transaction scoped beans for the
1:5a4dcb4:      *                           current transaction.
1:5a4dcb4:      */
1:5a4dcb4:     private <T> void registerSynchronization(
1:5a4dcb4:             TransactionSupport transactionSupport,
1:5a4dcb4:             Map<Contextual<T>, ContextualInstance<T>> instances) {
1:5a4dcb4:         transactionSupport.getTransactionSynchronizationRegistry()
1:5a4dcb4:                 .registerInterposedSynchronization(new TransactionSynchronization<T>(instances));
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * Retrieves the map that contains transaction scoped beans for the current
1:5a4dcb4:      * transaction.
1:5a4dcb4:      *
1:5a4dcb4:      * @param transactionSupport a bean that implements {@link TransactionSupport}.
1:5a4dcb4:      * @return instances of transaction scoped beans for the current
1:5a4dcb4:      * transaction.
1:5a4dcb4:      */
1:5a4dcb4:     private <T> Map<Contextual<T>, ContextualInstance<T>> getInstances(
1:5a4dcb4:             TransactionSupport transactionSupport) {
1:5a4dcb4:         @SuppressWarnings("unchecked")
1:5a4dcb4:         Map<Contextual<T>, ContextualInstance<T>> instances =
1:5a4dcb4:                 (Map<Contextual<T>, ContextualInstance<T>>) transactionSupport.getTransactionSynchronizationRegistry()
1:5a4dcb4:                         .getResource(TRANSACTION_BEANS_KEY);
1:5a4dcb4:         if (instances == null) {
1:5a4dcb4:             instances = new HashMap<Contextual<T>, ContextualInstance<T>>();
1:5a4dcb4:             transactionSupport
1:5a4dcb4:                     .getTransactionSynchronizationRegistry()
1:5a4dcb4:                     .putResource(TRANSACTION_BEANS_KEY, instances);
1:5a4dcb4: 
1:5a4dcb4:             registerSynchronization(transactionSupport, instances);
1:5a4dcb4:         }
1:5a4dcb4: 
1:5a4dcb4:         return instances;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * {@inheritDoc}
1:5a4dcb4:      */
1:5a4dcb4:     public <T> T get(
1:5a4dcb4:             Contextual<T> contextual) {
1:5a4dcb4:         return get(contextual, null);
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * {@inheritDoc}
1:5a4dcb4:      */
1:5a4dcb4:     public <T> T get(
1:5a4dcb4:             Contextual<T> contextual,
1:5a4dcb4:             CreationalContext<T> creationalContext) {
1:5a4dcb4:         if (!isActive()) {
1:5a4dcb4:             throw new ContextNotActiveException();
1:5a4dcb4:         }
1:5a4dcb4: 
1:5a4dcb4:         if (contextual == null) {
1:5a4dcb4:             throw new IllegalArgumentException(
1:5a4dcb4:                     "No contextual specified to retrieve");
1:5a4dcb4:         }
1:5a4dcb4: 
1:5a4dcb4:         TransactionSupport transactionSupport = getTransactionSupport();
1:5a4dcb4:         Map<Contextual<T>, ContextualInstance<T>> instances =
1:5a4dcb4:                 getInstances(transactionSupport);
1:5a4dcb4:         ContextualInstance<T> contextualInstance = instances.get(contextual);
1:5a4dcb4:         if (contextualInstance != null) {
1:5a4dcb4:             return contextualInstance.instance;
1:5a4dcb4:         } else if (creationalContext == null) {
1:5a4dcb4:             return null;
1:5a4dcb4:         } else {
1:5a4dcb4:             T instance = contextual.create(creationalContext);
1:5a4dcb4:             contextualInstance = new ContextualInstance<T>(instance,
1:5a4dcb4:                     creationalContext);
1:5a4dcb4:             instances.put(contextual, contextualInstance);
1:5a4dcb4: 
1:5a4dcb4:             if (log.isDebugEnabled()) {
1:5a4dcb4:                 log.debug("Created a new transaction scoped instance "
1:5a4dcb4:                         + contextualInstance);
1:5a4dcb4:             }
1:5a4dcb4: 
1:5a4dcb4:             return instance;
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * {@inheritDoc}
1:5a4dcb4:      */
1:5a4dcb4:     public Class<? extends Annotation> getScope() {
1:5a4dcb4:         return TransactionScoped.class;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * {@inheritDoc}
1:5a4dcb4:      */
1:5a4dcb4:     public boolean isActive() {
1:5a4dcb4:         try {
1:5a4dcb4:             return getTransactionSupport().getTransactionManager().getStatus() == Status.STATUS_ACTIVE;
1:5a4dcb4:         } catch (SystemException e) {
1:5a4dcb4:             throw new RuntimeException(e);
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * <p>
1:5a4dcb4:      * Synchronization object that destroys transaction scoped beans after the
1:5a4dcb4:      * transaction ends.
1:5a4dcb4:      * </p>
1:5a4dcb4:      *
1:5a4dcb4:      * @author Vlad Arkhipov
1:5a4dcb4:      */
1:5a4dcb4:     private static class TransactionSynchronization<T>
1:5a4dcb4:             implements Synchronization {
1:5a4dcb4:         private Map<Contextual<T>, ContextualInstance<T>> instances;
1:5a4dcb4: 
1:5a4dcb4:         /**
1:5a4dcb4:          * Creates a new synchronization.
1:5a4dcb4:          *
1:5a4dcb4:          * @param instances instances of transaction scoped beans for the
1:5a4dcb4:          *                  current transaction.
1:5a4dcb4:          */
1:5a4dcb4:         TransactionSynchronization(
1:5a4dcb4:                 Map<Contextual<T>, ContextualInstance<T>> instances) {
1:5a4dcb4:             this.instances = instances;
1:5a4dcb4:         }
1:5a4dcb4: 
1:5a4dcb4:         /**
1:5a4dcb4:          * {@inheritDoc}
1:5a4dcb4:          */
1:5a4dcb4:         public void beforeCompletion() {
1:5a4dcb4:         }
1:5a4dcb4: 
1:5a4dcb4:         /**
1:5a4dcb4:          * {@inheritDoc}
1:5a4dcb4:          */
1:5a4dcb4:         public void afterCompletion(
1:5a4dcb4:                 int status) {
1:5a4dcb4:             for (Map.Entry<Contextual<T>, ContextualInstance<T>> entry : instances.entrySet()) {
1:5a4dcb4:                 entry.getValue().destroy(entry.getKey());
1:5a4dcb4:             }
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     /**
1:5a4dcb4:      * <p>
1:5a4dcb4:      * An object that represents an instance of a bean. Contains a reference for
1:5a4dcb4:      * a bean and {@link CreationalContext}.
1:5a4dcb4:      * </p>
1:5a4dcb4:      *
1:5a4dcb4:      * @author Vlad Arkhipov
1:5a4dcb4:      */
1:5a4dcb4:     private static class ContextualInstance<T> {
1:5a4dcb4:         private T instance;
1:5a4dcb4: 
1:5a4dcb4:         private CreationalContext<T> creationalContext;
1:5a4dcb4: 
1:5a4dcb4:         /**
1:5a4dcb4:          * Creates a new object that represents an instance of a bean.
1:5a4dcb4:          *
1:5a4dcb4:          * @param instance          an instance of a bean.
1:5a4dcb4:          * @param creationalContext a {@link CreationalContext}.
1:5a4dcb4:          */
1:5a4dcb4:         public ContextualInstance(
1:5a4dcb4:                 T instance,
1:5a4dcb4:                 CreationalContext<T> creationalContext) {
1:5a4dcb4:             this.instance = instance;
1:5a4dcb4:             this.creationalContext = creationalContext;
1:5a4dcb4:         }
1:5a4dcb4: 
1:5a4dcb4:         /**
1:5a4dcb4:          * Destroys the bean.
1:5a4dcb4:          *
1:5a4dcb4:          * @param contextual a {@link Contextual}.
1:5a4dcb4:          */
1:5a4dcb4:         void destroy(
1:5a4dcb4:                 Contextual<T> contextual) {
1:5a4dcb4:             if (log.isDebugEnabled()) {
1:5a4dcb4:                 log.debug("Destroying transaction scoped bean instance "
1:5a4dcb4:                         + this);
1:5a4dcb4:             }
1:5a4dcb4: 
1:5a4dcb4:             contextual.destroy(instance, creationalContext);
1:5a4dcb4:             creationalContext.release();
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5a4dcb4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.jpa.cdi;
1: 
1: import javax.enterprise.context.ContextNotActiveException;
1: import javax.enterprise.context.spi.Context;
1: import javax.enterprise.context.spi.Contextual;
1: import javax.enterprise.context.spi.CreationalContext;
1: import javax.enterprise.inject.spi.Bean;
1: import javax.enterprise.inject.spi.BeanManager;
1: import javax.transaction.Status;
1: import javax.transaction.Synchronization;
1: import javax.transaction.SystemException;
1: import javax.transaction.TransactionScoped;
1: import java.lang.annotation.Annotation;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class TransactionalContext implements Context {
1: 
1:     private static final Object TRANSACTION_BEANS_KEY = TransactionalContext.class.getName() + ".TRANSACTION_BEANS";
1: 
1:     private static final Logger log = LoggerFactory.getLogger(TransactionalContext.class);
1: 
1:     private BeanManager beanManager;
1: 
1:     private volatile TransactionSupport transactionSupport;
1: 
1:     /**
1:      * Creates a new transactional context.
1:      *
1:      * @param beanManager {@link BeanManager}.
1:      */
1:     TransactionalContext(BeanManager beanManager) {
1:         this.beanManager = beanManager;
1:     }
1: 
1:     /**
1:      * Obtains a reference to a {@link TransactionSupport} bean.
1:      *
1:      * @return a bean that implements {@link TransactionSupport}.
1:      */
1:     private TransactionSupport getTransactionSupportReference() {
1:         @SuppressWarnings("unchecked")
1:         Bean<TransactionSupport> bean = (Bean<TransactionSupport>) beanManager
1:                 .resolve(beanManager.getBeans(TransactionSupport.class));
1:         if (bean == null) {
1:             throw new RuntimeException("TransactionSupport was not found");
1:         }
1: 
1:         CreationalContext<TransactionSupport> ctx = beanManager.createCreationalContext(bean);
1:         return (TransactionSupport) beanManager.getReference(bean,
1:                 TransactionSupport.class, ctx);
1:     }
1: 
1:     /**
1:      * Lazily initialize the object field and gets a reference to a bean that
1:      * implements {@link TransactionSupport}.
1:      *
1:      * @return a bean that implements {@link TransactionSupport}.
1:      */
1:     private TransactionSupport getTransactionSupport() {
1:         if (transactionSupport == null) {
1:             synchronized (this) {
1:                 if (transactionSupport == null) {
1:                     transactionSupport = getTransactionSupportReference();
1:                 }
1:             }
1:         }
1: 
1:         return transactionSupport;
1:     }
1: 
1:     /**
1:      * Registers a synchronization object for the current transaction.
1:      *
1:      * @param transactionSupport a {@link TransactionSupport} bean.
1:      * @param instances          a map that contains transaction scoped beans for the
1:      *                           current transaction.
1:      */
1:     private <T> void registerSynchronization(
1:             TransactionSupport transactionSupport,
1:             Map<Contextual<T>, ContextualInstance<T>> instances) {
1:         transactionSupport.getTransactionSynchronizationRegistry()
1:                 .registerInterposedSynchronization(new TransactionSynchronization<T>(instances));
1:     }
1: 
1:     /**
1:      * Retrieves the map that contains transaction scoped beans for the current
1:      * transaction.
1:      *
1:      * @param transactionSupport a bean that implements {@link TransactionSupport}.
1:      * @return instances of transaction scoped beans for the current
1:      * transaction.
1:      */
1:     private <T> Map<Contextual<T>, ContextualInstance<T>> getInstances(
1:             TransactionSupport transactionSupport) {
1:         @SuppressWarnings("unchecked")
1:         Map<Contextual<T>, ContextualInstance<T>> instances =
1:                 (Map<Contextual<T>, ContextualInstance<T>>) transactionSupport.getTransactionSynchronizationRegistry()
1:                         .getResource(TRANSACTION_BEANS_KEY);
1:         if (instances == null) {
1:             instances = new HashMap<Contextual<T>, ContextualInstance<T>>();
1:             transactionSupport
1:                     .getTransactionSynchronizationRegistry()
1:                     .putResource(TRANSACTION_BEANS_KEY, instances);
1: 
1:             registerSynchronization(transactionSupport, instances);
1:         }
1: 
1:         return instances;
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
1:     public <T> T get(
1:             Contextual<T> contextual) {
1:         return get(contextual, null);
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
1:     public <T> T get(
1:             Contextual<T> contextual,
1:             CreationalContext<T> creationalContext) {
1:         if (!isActive()) {
1:             throw new ContextNotActiveException();
1:         }
1: 
1:         if (contextual == null) {
1:             throw new IllegalArgumentException(
1:                     "No contextual specified to retrieve");
1:         }
1: 
1:         TransactionSupport transactionSupport = getTransactionSupport();
1:         Map<Contextual<T>, ContextualInstance<T>> instances =
1:                 getInstances(transactionSupport);
1:         ContextualInstance<T> contextualInstance = instances.get(contextual);
1:         if (contextualInstance != null) {
1:             return contextualInstance.instance;
1:         } else if (creationalContext == null) {
1:             return null;
1:         } else {
1:             T instance = contextual.create(creationalContext);
1:             contextualInstance = new ContextualInstance<T>(instance,
1:                     creationalContext);
1:             instances.put(contextual, contextualInstance);
1: 
1:             if (log.isDebugEnabled()) {
1:                 log.debug("Created a new transaction scoped instance "
1:                         + contextualInstance);
1:             }
1: 
1:             return instance;
1:         }
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
1:     public Class<? extends Annotation> getScope() {
1:         return TransactionScoped.class;
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
1:     public boolean isActive() {
1:         try {
1:             return getTransactionSupport().getTransactionManager().getStatus() == Status.STATUS_ACTIVE;
1:         } catch (SystemException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Synchronization object that destroys transaction scoped beans after the
1:      * transaction ends.
1:      * </p>
1:      *
1:      * @author Vlad Arkhipov
1:      */
1:     private static class TransactionSynchronization<T>
1:             implements Synchronization {
1:         private Map<Contextual<T>, ContextualInstance<T>> instances;
1: 
1:         /**
1:          * Creates a new synchronization.
1:          *
1:          * @param instances instances of transaction scoped beans for the
1:          *                  current transaction.
1:          */
1:         TransactionSynchronization(
1:                 Map<Contextual<T>, ContextualInstance<T>> instances) {
1:             this.instances = instances;
1:         }
1: 
1:         /**
1:          * {@inheritDoc}
1:          */
1:         public void beforeCompletion() {
1:         }
1: 
1:         /**
1:          * {@inheritDoc}
1:          */
1:         public void afterCompletion(
1:                 int status) {
1:             for (Map.Entry<Contextual<T>, ContextualInstance<T>> entry : instances.entrySet()) {
1:                 entry.getValue().destroy(entry.getKey());
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * An object that represents an instance of a bean. Contains a reference for
1:      * a bean and {@link CreationalContext}.
1:      * </p>
1:      *
1:      * @author Vlad Arkhipov
1:      */
1:     private static class ContextualInstance<T> {
1:         private T instance;
1: 
1:         private CreationalContext<T> creationalContext;
1: 
1:         /**
1:          * Creates a new object that represents an instance of a bean.
1:          *
1:          * @param instance          an instance of a bean.
1:          * @param creationalContext a {@link CreationalContext}.
1:          */
1:         public ContextualInstance(
1:                 T instance,
1:                 CreationalContext<T> creationalContext) {
1:             this.instance = instance;
1:             this.creationalContext = creationalContext;
1:         }
1: 
1:         /**
1:          * Destroys the bean.
1:          *
1:          * @param contextual a {@link Contextual}.
1:          */
1:         void destroy(
1:                 Contextual<T> contextual) {
1:             if (log.isDebugEnabled()) {
1:                 log.debug("Destroying transaction scoped bean instance "
1:                         + this);
1:             }
1: 
1:             contextual.destroy(instance, creationalContext);
1:             creationalContext.release();
1:         }
1:     }
1: }
============================================================================