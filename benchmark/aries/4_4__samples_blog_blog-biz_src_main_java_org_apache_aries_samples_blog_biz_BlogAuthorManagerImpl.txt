1:430e8f5: /**
1:430e8f5:  * Licensed to the Apache Software Foundation (ASF) under one
1:430e8f5:  * or more contributor license agreements.  See the NOTICE file
1:430e8f5:  * distributed with this work for additional information
1:430e8f5:  * regarding copyright ownership.  The ASF licenses this file
1:430e8f5:  * to you under the Apache License, Version 2.0 (the
1:430e8f5:  * "License"); you may not use this file except in compliance
1:430e8f5:  * with the License.  You may obtain a copy of the License at
1:430e8f5:  *
1:430e8f5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:430e8f5:  *
1:430e8f5:  * Unless required by applicable law or agreed to in writing,
1:430e8f5:  * software distributed under the License is distributed on an
1:430e8f5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:430e8f5:  * KIND, either express or implied.  See the License for the
1:430e8f5:  * specific language governing permissions and limitations
1:430e8f5:  * under the License.
1:430e8f5:  */
1:e0beeec: package org.apache.aries.samples.blog.biz;
7:430e8f5: 
1:430e8f5: import java.text.ParseException;
1:430e8f5: import java.text.SimpleDateFormat;
1:bb9ffe7: import java.util.ArrayList;
1:430e8f5: import java.util.Date;
1:bb9ffe7: import java.util.Iterator;
1:430e8f5: import java.util.List;
1:430e8f5: 
1:430e8f5: import org.apache.aries.samples.blog.api.*;
1:380a6c0: import org.apache.aries.samples.blog.api.persistence.Author;
1:380a6c0: import org.apache.aries.samples.blog.api.persistence.BlogPersistenceService;
1:430e8f5: 
1:430e8f5: 
1:430e8f5: 
1:bb9ffe7: public class BlogAuthorManagerImpl implements BlogAuthorManager
3:430e8f5: {
1:430e8f5:   private BlogPersistenceService persistenceService;
1:430e8f5: 
1:430e8f5:   // Blueprint injection used to set the persistenceService
1:430e8f5:   public void setPersistenceService(BlogPersistenceService persistenceService)
1:430e8f5:   {
1:430e8f5:     this.persistenceService = persistenceService;
4:430e8f5:   }
1:bb9ffe7:   
1:430e8f5:   public void createAuthor(String email, String dob, String name, String displayName, String bio) throws ParseException
1:430e8f5:   {
2:430e8f5:     if(email == null) throw new IllegalArgumentException("Email must not be null");
1:bb9ffe7:    
1:430e8f5:     Date dateOfBirth;
1:8ffb07f:     dateOfBirth = (dob == null || "".equals(dob)) ? null : new SimpleDateFormat("yyyy-MM-dd").parse(dob);
1:430e8f5: 	
1:430e8f5:     persistenceService.createAuthor(email, dateOfBirth, name, displayName, bio);
1:bb9ffe7:   }
1:430e8f5:   
1:bb9ffe7:   public List<? extends BlogAuthor> getAllAuthors()
1:430e8f5:   {
1:8ffb07f:     List<? extends Author> authors = persistenceService.getAllAuthors();
1:8ffb07f:     return adaptAuthor(authors);
1:430e8f5:   }
1:430e8f5:   
1:bb9ffe7:   public BlogAuthor getAuthor(String emailAddress)
1:430e8f5:   {
1:430e8f5:     if(emailAddress == null) throw new IllegalArgumentException("Email must not be null");
1:bb9ffe7:     Author a = persistenceService.getAuthor(emailAddress);
1:bb9ffe7:     if (a != null)
1:8ffb07f:       return new BlogAuthorImpl(a);
1:8ffb07f:     else
1:8ffb07f:       return null;
1:430e8f5:   }
1:430e8f5:   
1:430e8f5:   public void removeAuthor(String emailAddress)
1:430e8f5:   {
1:430e8f5:     if(emailAddress == null) throw new IllegalArgumentException("Email must not be null");
1:430e8f5:     persistenceService.removeAuthor(emailAddress);
1:430e8f5:   }
1:430e8f5:   
1:430e8f5:   public void updateAuthor(String email, String dob, String name, String displayName, String bio) throws ParseException
1:bb9ffe7:   { 
1:8ffb07f:     if(email == null) throw new IllegalArgumentException("Email must not be null");
1:8ffb07f:    
1:8ffb07f:     Date dateOfBirth;
1:8ffb07f:     dateOfBirth = (dob == null || "".equals(dob)) ? null : new SimpleDateFormat("yyyy-MM-dd").parse(dob);
1:8ffb07f: 
1:bb9ffe7:     persistenceService.updateAuthor(email, dateOfBirth, name, displayName, bio);
1:bb9ffe7:   }
1:bb9ffe7:   
1:8ffb07f:   private List<? extends BlogAuthor> adaptAuthor(List<? extends Author> authors) {
1:8ffb07f:     return new BlogListAdapter<BlogAuthor, Author>(authors, BlogAuthorImpl.class, Author.class);
1:8ffb07f:   }
1:8aedaf5:  
1:430e8f5: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8ffb07f
/////////////////////////////////////////////////////////////////////////
1:     dateOfBirth = (dob == null || "".equals(dob)) ? null : new SimpleDateFormat("yyyy-MM-dd").parse(dob);
1:     List<? extends Author> authors = persistenceService.getAllAuthors();
1:     return adaptAuthor(authors);
/////////////////////////////////////////////////////////////////////////
1:       return new BlogAuthorImpl(a);
1:     else
1:       return null;
/////////////////////////////////////////////////////////////////////////
1:     if(email == null) throw new IllegalArgumentException("Email must not be null");
1:    
1:     Date dateOfBirth;
1:     dateOfBirth = (dob == null || "".equals(dob)) ? null : new SimpleDateFormat("yyyy-MM-dd").parse(dob);
1: 
1:   private List<? extends BlogAuthor> adaptAuthor(List<? extends Author> authors) {
1:     return new BlogListAdapter<BlogAuthor, Author>(authors, BlogAuthorImpl.class, Author.class);
1:   }
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:380a6c0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.blog.api.persistence.Author;
1: import org.apache.aries.samples.blog.api.persistence.BlogPersistenceService;
commit:e0beeec
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.blog.biz;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.blog.api.persistence.api.Author;
0: import org.apache.aries.samples.blog.api.persistence.api.BlogPersistenceService;
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:8aedaf5
/////////////////////////////////////////////////////////////////////////
0: 			return new BlogListAdapter<BlogAuthor, Author>(authors, BlogAuthorImpl.class, Author.class);
1:  
commit:af353cd
/////////////////////////////////////////////////////////////////////////
0: 	dateOfBirth = (dob == null || "".equals(dob)) ? null : new SimpleDateFormat("yyyy-MM-dd").parse(dob);
commit:afa98ec
commit:607acfe
commit:bb9ffe7
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1: public class BlogAuthorManagerImpl implements BlogAuthorManager
/////////////////////////////////////////////////////////////////////////
1:   public List<? extends BlogAuthor> getAllAuthors()
0: 	  List<? extends Author> authors = persistenceService.getAllAuthors();
0: 		return adaptAuthor(authors);
1:   public BlogAuthor getAuthor(String emailAddress)
1:     Author a = persistenceService.getAuthor(emailAddress);
1:     if (a != null)
0: 		return new BlogAuthorImpl(a);
0: 	else
0: 		return null;
/////////////////////////////////////////////////////////////////////////
1:   { 
0: 	  if (email == null)
0: 			throw new IllegalArgumentException("Email must not be null");
1:     persistenceService.updateAuthor(email, dateOfBirth, name, displayName, bio);
0: 	private List<? extends BlogAuthor> adaptAuthor(
0: 			List<? extends Author> authors) {
0: 		List<BlogAuthorImpl> list = new ArrayList<BlogAuthorImpl>();
1: 
0: 		Iterator<? extends Author> a = authors.iterator();
0: 		while (a.hasNext()) {
0: 			list.add(new BlogAuthorImpl(a.next()));
1: 		}
1: 
0: 		return list;
1: 
1: 	}
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:430e8f5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.samples.blog;
1: 
1: import java.text.ParseException;
1: import java.text.SimpleDateFormat;
1: import java.util.Date;
1: import java.util.List;
1: 
1: import org.apache.aries.samples.blog.api.*;
0: import org.apache.aries.samples.blog.persistence.api.Author;
0: import org.apache.aries.samples.blog.persistence.api.BlogPersistenceService;
1: 
1: 
1: 
0: public class AuthorManagerImpl implements AuthorManager
1: {
1:   private BlogPersistenceService persistenceService;
1: 
1:   // Blueprint injection used to set the persistenceService
1:   public void setPersistenceService(BlogPersistenceService persistenceService)
1:   {
1:     this.persistenceService = persistenceService;
1:   }
1:   
1:   public void createAuthor(String email, String dob, String name, String displayName, String bio) throws ParseException
1:   {
1:     if(email == null) throw new IllegalArgumentException("Email must not be null");
1:    
1:     Date dateOfBirth;
1:     
0: 	dateOfBirth = (dob == null || "".equals(dob)) ? null : new SimpleDateFormat("dd-mm-yyyy").parse(dob);
1: 	
1:     persistenceService.createAuthor(email, dateOfBirth, name, displayName, bio);
1:   }
1:   
0:   public List<Author> getAllAuthors()
1:   {
0:     return persistenceService.getAllAuthors();
1:   }
1:   
0:   public Author getAuthor(String emailAddress)
1:   {
1:     if(emailAddress == null) throw new IllegalArgumentException("Email must not be null");
0:     return persistenceService.getAuthor(emailAddress);
1:   }
1:   
1:   public void removeAuthor(String emailAddress)
1:   {
1:     if(emailAddress == null) throw new IllegalArgumentException("Email must not be null");
1:     persistenceService.removeAuthor(emailAddress);
1:   }
1:   
1:   public void updateAuthor(String email, String dob, String name, String displayName, String bio) throws ParseException
1:   {    
0:     Date dateOfBirth = (dob == null) ? null : new SimpleDateFormat("yyyy-MM-dd").parse(dob);
0:     updateAuthor(email, dateOfBirth, name, displayName, bio);
1:   }
1:   
0:   public void updateAuthor(String email, Date dob, String name, String displayName, String bio) throws ParseException
1:   {
1:     if(email == null) throw new IllegalArgumentException("Email must not be null");   
1:     
0:     persistenceService.updateAuthor(email, dob, name, displayName, bio);
1:   }
1:   
1: }
============================================================================