1:7b2544b: /*
1:7b2544b:  * Licensed to the Apache Software Foundation (ASF) under one
1:7b2544b:  * or more contributor license agreements.  See the NOTICE file
1:7b2544b:  * distributed with this work for additional information
1:7b2544b:  * regarding copyright ownership.  The ASF licenses this file
1:7b2544b:  * to you under the Apache License, Version 2.0 (the
1:7b2544b:  * "License"); you may not use this file except in compliance
1:7b2544b:  * with the License.  You may obtain a copy of the License at
1:7b2544b:  *
1:7b2544b:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7b2544b:  *
1:7b2544b:  * Unless required by applicable law or agreed to in writing,
1:7b2544b:  * software distributed under the License is distributed on an
1:7b2544b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7b2544b:  * KIND, either express or implied.  See the License for the
1:7b2544b:  * specific language governing permissions and limitations
1:7b2544b:  * under the License.
1:7b2544b:  */
1:7b2544b: package org.apache.aries.jndi;
2:7b2544b: 
1:7b2544b: import java.security.AccessController;
1:7b2544b: import java.security.PrivilegedAction;
1:7b2544b: import java.security.PrivilegedActionException;
1:7b2544b: import java.security.PrivilegedExceptionAction;
1:7b2544b: import java.util.Comparator;
1:7b2544b: import java.util.Hashtable;
1:7b2544b: import java.util.Map;
1:7b2544b: 
1:7b2544b: import javax.naming.NamingException;
1:7b2544b: 
1:9c42dfb: import org.apache.aries.util.nls.MessageUtil;
1:141ba43: import org.osgi.framework.Bundle;
1:7b2544b: import org.osgi.framework.BundleContext;
1:141ba43: import org.osgi.framework.BundleException;
1:7b2544b: import org.osgi.framework.BundleReference;
1:e04b9ae: import org.osgi.framework.InvalidSyntaxException;
1:7b2544b: import org.osgi.framework.ServiceReference;
1:7b2544b: import org.osgi.service.jndi.JNDIConstants;
1:7b2544b: 
1:7b2544b: /**
1:7b2544b:  */
1:7b2544b: public final class Utils {
1:7b2544b: 
1:7b2544b:     public static final Comparator<ServiceReference> SERVICE_REFERENCE_COMPARATOR = 
1:7b2544b:         new ServiceReferenceComparator();
1:9c42dfb:     public static final MessageUtil MESSAGES = MessageUtil.createMessageUtil(Utils.class, "org.apache.aries.jndi.nls.jndiMessages");
1:7b2544b: 
1:7b2544b:     /** Ensure no one constructs us */
1:7b2544b:     private Utils() {
1:7b2544b:         throw new RuntimeException();
9:7b2544b:     }
1:5140ce3:      
1:7b2544b:     private static class StackFinder extends SecurityManager {
1:7b2544b:         public Class<?>[] getClassContext() {
1:7b2544b:             return super.getClassContext();
1:5140ce3:         }
1:5140ce3:     }
1:5140ce3:     
1:7b2544b:     /**
1:7b2544b:      * @param env
1:7b2544b:      * @return the bundle context for the caller.
1:7b2544b:      * @throws NamingException
1:7b2544b:      */
1:7b2544b:     public static BundleContext getBundleContext(final Map<?, ?> env, 
1:a1d48ad:                                                  final Class<?> namingClass) {
1:7b2544b:         return AccessController.doPrivileged(new PrivilegedAction<BundleContext>() {
1:7b2544b:             public BundleContext run() {
1:7b2544b:                 return doGetBundleContext(env, namingClass);
1:5140ce3:             }
1:7b2544b:         });
1:d90eeba:     }
1:e04b9ae:     
1:a1d48ad:     private static BundleContext doGetBundleContext(Map<?, ?> env, Class<?> namingClass) {
1:7b2544b:         BundleContext result = null;
1:7b2544b: 
1:7b2544b:         Object bc = (env == null) ? null : env.get(JNDIConstants.BUNDLE_CONTEXT);
1:7b2544b: 
1:7b2544b:         if (bc != null && bc instanceof BundleContext) {
1:7b2544b:             result = (BundleContext) bc;
1:7b2544b:         } else {
1:7b2544b:             ClassLoader cl = Thread.currentThread().getContextClassLoader();
1:7b2544b:             result = getBundleContext(cl);
1:5140ce3:         }
1:7b2544b: 
1:7b2544b:         if (result == null) {
1:7b2544b:             StackFinder finder = new StackFinder();
1:7b2544b:             Class<?>[] classStack = finder.getClassContext();
1:7b2544b: 
1:a1d48ad:             // working from the root of the stack look for the first instance in the stack of this class
1:a1d48ad:             int i = classStack.length - 1;
1:a1d48ad:             for (; i >= 0; i--) {
1:a1d48ad:               if (namingClass.isAssignableFrom(classStack[i])) {
1:a1d48ad:                 break;
1:a1d48ad:               }
1:5140ce3:             }
1:7b2544b:             
1:a1d48ad:             // then go to the parent of the namingClass down the stack until we find a BundleContext
1:a1d48ad:             for (i++; i < classStack.length && result == null; i++) {
1:a1d48ad:               result = getBundleContext(classStack[i].getClassLoader());
1:7b2544b:             }
1:7b2544b:         }
1:7b2544b: 
1:7b2544b:         return result;
1:7b2544b:     }
1:7b2544b: 
1:7b2544b:     private static BundleContext getBundleContext(ClassLoader cl2) {
1:7b2544b:         ClassLoader cl = cl2;
1:7b2544b:         BundleContext result = null;
1:7b2544b:         while (result == null && cl != null) {
1:7b2544b:             if (cl instanceof BundleReference) {
1:141ba43:                 Bundle b = ((BundleReference)cl).getBundle();
1:141ba43:                 result = b.getBundleContext();
1:141ba43:                 if (result == null) {
1:141ba43:                   try {
1:141ba43:                     b.start();
1:141ba43:                     result = b.getBundleContext();
1:141ba43:                   } catch (BundleException e) {
1:141ba43:                   }
1:141ba43:                   break;
1:141ba43:                 }
1:7b2544b:             } else if (cl != null) {
1:7b2544b:                 cl = cl.getParent();
1:7b2544b:             }
1:7b2544b:         }
1:7b2544b: 
1:7b2544b:         return result;
1:7b2544b:     }
1:7b2544b:     
1:7b2544b:     private static class ServiceReferenceComparator implements Comparator<ServiceReference> {        
1:7b2544b:         public int compare(ServiceReference o1, ServiceReference o2) {        
1:7b2544b:           return o2.compareTo(o1);
1:7b2544b:         }
1:7b2544b:     }
1:7b2544b:     
1:7b2544b:     public static String getSystemProperty(final String key, final String defaultValue) {
1:7b2544b:         return AccessController.doPrivileged(new PrivilegedAction<String>() {
1:7b2544b:             public String run() {
1:7b2544b:                 return System.getProperty(key, defaultValue);
1:7b2544b:             }            
1:7b2544b:         });
1:7b2544b:     }
1:7b2544b:     
1:b756d71:     public static Hashtable<?,?> toHashtable(Map<?,?> map) {
1:b756d71:         Hashtable<?,?> env;
1:b756d71:         if (map instanceof Hashtable<?,?>) {
1:b756d71:             env = (Hashtable<?,?>) map;
1:b756d71:         } else if (map == null) {
1:b756d71:             env = new Hashtable<Object,Object>();
1:7b2544b:         } else {
1:b756d71:             env = new Hashtable<Object,Object>(map);
1:7b2544b:         }
1:7b2544b:         return env;
1:7b2544b:     }
1:7b2544b:     
1:7b2544b:     public static <T> T doPrivileged(PrivilegedExceptionAction<T> action) throws Exception {
1:7b2544b:         try {
1:7b2544b:             return AccessController.doPrivileged(action);
1:7b2544b:         } catch (PrivilegedActionException e) {
1:7b2544b:             Exception cause = e.getException();
1:7b2544b:             throw cause;
1:7b2544b:         }
1:7b2544b:     }
1:7b2544b:     
1:7b2544b:     public static <T> T doPrivilegedNaming(PrivilegedExceptionAction<T> action) throws NamingException {
1:7b2544b:         try {
1:7b2544b:             return AccessController.doPrivileged(action);
1:7b2544b:         } catch (PrivilegedActionException e) {
1:7b2544b:             Exception cause = e.getException();
1:7b2544b:             if (cause instanceof NamingException) {
1:7b2544b:                 throw (NamingException) cause;
1:7b2544b:             } else {
1:7b2544b:                 NamingException ex = new NamingException(cause.getMessage());
1:7b2544b:                 ex.initCause(cause);
1:7b2544b:                 throw ex;
1:7b2544b:             }
1:7b2544b:         }
1:7b2544b:     }
1:7b2544b:     
1:e04b9ae:     public static ServiceReference[] getReferencesPrivileged(final BundleContext ctx, final Class<?> clazz) {
1:e04b9ae:     	return AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
1:e04b9ae:     		public ServiceReference[] run() {
1:e04b9ae:     			try {
1:e04b9ae:     				return ctx.getServiceReferences(clazz.getName(), null);
1:e04b9ae:     			} catch (InvalidSyntaxException ise) {
1:e04b9ae:     				// should not happen
1:9c42dfb:     				throw new RuntimeException(MESSAGES.getMessage("null.is.invalid.filter"), ise);
1:e04b9ae:     			}
1:e04b9ae:     		}    		
1:e04b9ae: 		});
1:e04b9ae:     }
1:e04b9ae:     
1:e04b9ae:     public static Object getServicePrivileged(final BundleContext ctx, final ServiceReference ref) {
1:e04b9ae:     	return AccessController.doPrivileged(new PrivilegedAction<Object>() {
1:e04b9ae:     		public Object run() {
1:e04b9ae:     			return ctx.getService(ref);
1:e04b9ae:     		}
1:e04b9ae: 		});
1:e04b9ae:     }
1:7b2544b: 
1:7b2544b: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:d90eeba
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:141ba43
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
/////////////////////////////////////////////////////////////////////////
1:                 Bundle b = ((BundleReference)cl).getBundle();
1:                 result = b.getBundleContext();
1:                 if (result == null) {
1:                   try {
1:                     b.start();
1:                     result = b.getBundleContext();
1:                   } catch (BundleException e) {
1:                   }
1:                   break;
1:                 }
commit:9c42dfb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.nls.MessageUtil;
/////////////////////////////////////////////////////////////////////////
1:     public static final MessageUtil MESSAGES = MessageUtil.createMessageUtil(Utils.class, "org.apache.aries.jndi.nls.jndiMessages");
/////////////////////////////////////////////////////////////////////////
1:     				throw new RuntimeException(MESSAGES.getMessage("null.is.invalid.filter"), ise);
commit:a1d48ad
/////////////////////////////////////////////////////////////////////////
1:                                                  final Class<?> namingClass) {
/////////////////////////////////////////////////////////////////////////
1:     private static BundleContext doGetBundleContext(Map<?, ?> env, Class<?> namingClass) {
/////////////////////////////////////////////////////////////////////////
1:             // working from the root of the stack look for the first instance in the stack of this class
1:             int i = classStack.length - 1;
1:             for (; i >= 0; i--) {
1:               if (namingClass.isAssignableFrom(classStack[i])) {
1:                 break;
1:               }
1:             // then go to the parent of the namingClass down the stack until we find a BundleContext
1:             for (i++; i < classStack.length && result == null; i++) {
1:               result = getBundleContext(classStack[i].getClassLoader());
commit:5140ce3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.jndi.spi.EnvironmentAugmentation;
0: import org.apache.aries.jndi.startup.Activator;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public static void augmentEnvironment(Hashtable<?, ?> environment) 
0:     {
0:       Object[] objects = Activator.getEnvironmentAugmentors();
1:       
0:       if (objects != null) {
0:         for (Object obj : objects) {
0:           if (obj instanceof EnvironmentAugmentation) {
0:             ((EnvironmentAugmentation)obj).augmentEnvironment(environment);
1:           }
1:         }
1:       }
1:     }
1: }
commit:b756d71
/////////////////////////////////////////////////////////////////////////
0:                 Class<?> callerClass = classStack[indexOfConstructor + 1];
/////////////////////////////////////////////////////////////////////////
1:     public static Hashtable<?,?> toHashtable(Map<?,?> map) {
1:         Hashtable<?,?> env;
1:         if (map instanceof Hashtable<?,?>) {
1:             env = (Hashtable<?,?>) map;
1:         } else if (map == null) {
1:             env = new Hashtable<Object,Object>();
1:             env = new Hashtable<Object,Object>(map);
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:e04b9ae
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.InvalidSyntaxException;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public static ServiceReference[] getReferencesPrivileged(final BundleContext ctx, final Class<?> clazz) {
1:     	return AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
1:     		public ServiceReference[] run() {
1:     			try {
1:     				return ctx.getServiceReferences(clazz.getName(), null);
1:     			} catch (InvalidSyntaxException ise) {
1:     				// should not happen
0:     				throw new RuntimeException("Invalid filter", ise);
1:     			}
1:     		}    		
1: 		});
1:     }
1:     
1:     public static Object getServicePrivileged(final BundleContext ctx, final ServiceReference ref) {
1:     	return AccessController.doPrivileged(new PrivilegedAction<Object>() {
1:     		public Object run() {
1:     			return ctx.getService(ref);
1:     		}
1: 		});
1:     }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:7b2544b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi;
1: 
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
1: import java.util.Comparator;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
1: import javax.naming.NamingException;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleReference;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.jndi.JNDIConstants;
1: 
1: /**
1:  */
1: public final class Utils {
1: 
1:     public static final Comparator<ServiceReference> SERVICE_REFERENCE_COMPARATOR = 
1:         new ServiceReferenceComparator();
1: 
1:     /** Ensure no one constructs us */
1:     private Utils() {
1:         throw new RuntimeException();
1:     }
1:      
1:     private static class StackFinder extends SecurityManager {
1:         public Class<?>[] getClassContext() {
1:             return super.getClassContext();
1:         }
1:     }
1:     
1:     /**
1:      * @param env
1:      * @return the bundle context for the caller.
1:      * @throws NamingException
1:      */
1:     public static BundleContext getBundleContext(final Map<?, ?> env, 
0:                                                  final String namingClass) {
1:         return AccessController.doPrivileged(new PrivilegedAction<BundleContext>() {
1:             public BundleContext run() {
1:                 return doGetBundleContext(env, namingClass);
1:             }
1:         });
1:     }
1:     
0:     private static BundleContext doGetBundleContext(Map<?, ?> env, String namingClass) {
1:         BundleContext result = null;
1: 
1:         Object bc = (env == null) ? null : env.get(JNDIConstants.BUNDLE_CONTEXT);
1: 
1:         if (bc != null && bc instanceof BundleContext) {
1:             result = (BundleContext) bc;
1:         } else {
1:             ClassLoader cl = Thread.currentThread().getContextClassLoader();
1:             result = getBundleContext(cl);
1:         }
1: 
1:         if (result == null) {
1:             StackFinder finder = new StackFinder();
1:             Class<?>[] classStack = finder.getClassContext();
1: 
0:             // find constructor of given naming class
0:             int indexOfConstructor = -1;
0:             for (int i = 0 ; i < classStack.length; i++) {
0:                 if (classStack[i].getName().equals(namingClass)) {
0:                     indexOfConstructor = i;
1:                 }
1:             }
1:             
0:             // get the caller of the constructor
0:             if (indexOfConstructor >= 0 && (indexOfConstructor + 1) < classStack.length) {
0:                 Class callerClass = classStack[indexOfConstructor + 1];
0:                 result = getBundleContext(callerClass.getClassLoader());
1:             }
1:         }
1: 
1:         return result;
1:     }
1: 
1:     private static BundleContext getBundleContext(ClassLoader cl2) {
1:         ClassLoader cl = cl2;
1:         BundleContext result = null;
1:         while (result == null && cl != null) {
1:             if (cl instanceof BundleReference) {
0:                 result = ((BundleReference) cl).getBundle().getBundleContext();
1:             } else if (cl != null) {
1:                 cl = cl.getParent();
1:             }
1:         }
1: 
1:         return result;
1:     }
1:     
1:     private static class ServiceReferenceComparator implements Comparator<ServiceReference> {        
1:         public int compare(ServiceReference o1, ServiceReference o2) {        
1:           return o2.compareTo(o1);
1:         }
1:     }
1:     
1:     public static String getSystemProperty(final String key, final String defaultValue) {
1:         return AccessController.doPrivileged(new PrivilegedAction<String>() {
1:             public String run() {
1:                 return System.getProperty(key, defaultValue);
1:             }            
1:         });
1:     }
1:     
0:     public static Hashtable toHashtable(Map map) {
0:         Hashtable env;
0:         if (map instanceof Hashtable) {
0:             env = (Hashtable) map;
1:         } else {
0:             env = new Hashtable();
0:             if (map != null) {
0:                 env.putAll(map);
1:             }
1:         }
1:         return env;
1:     }
1:     
1:     public static <T> T doPrivileged(PrivilegedExceptionAction<T> action) throws Exception {
1:         try {
1:             return AccessController.doPrivileged(action);
1:         } catch (PrivilegedActionException e) {
1:             Exception cause = e.getException();
1:             throw cause;
1:         }
1:     }
1:     
1:     public static <T> T doPrivilegedNaming(PrivilegedExceptionAction<T> action) throws NamingException {
1:         try {
1:             return AccessController.doPrivileged(action);
1:         } catch (PrivilegedActionException e) {
1:             Exception cause = e.getException();
1:             if (cause instanceof NamingException) {
1:                 throw (NamingException) cause;
1:             } else {
1:                 NamingException ex = new NamingException(cause.getMessage());
1:                 ex.initCause(cause);
1:                 throw ex;
1:             }
1:         }
1:     }
1: }
============================================================================