1:7fa86e8: /*
1:7fa86e8:  * Copyright (c) OSGi Alliance (2015, 2016). All Rights Reserved.
1:7fa86e8:  * 
1:7fa86e8:  * Licensed under the Apache License, Version 2.0 (the "License");
1:7fa86e8:  * you may not use this file except in compliance with the License.
1:7fa86e8:  * You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing, software
1:7fa86e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7fa86e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7fa86e8:  * See the License for the specific language governing permissions and
1:7fa86e8:  * limitations under the License.
1:7fa86e8:  */
1:7fa86e8: 
1:7fa86e8: package org.osgi.util.pushstream;
1:7fa86e8: 
1:7fa86e8: import static org.osgi.util.pushstream.PushEvent.EventType.*;
1:7fa86e8: 
1:7fa86e8: /**
1:7fa86e8:  * A PushEvent is an immutable object that is transferred through a
1:7fa86e8:  * communication channel to push information to a downstream consumer. The event
1:7fa86e8:  * has three different types:
1:7fa86e8:  * <ul>
1:7fa86e8:  * <li>{@link EventType#DATA} â€? Provides access to a typed data element in the
1:7fa86e8:  * stream.
1:7fa86e8:  * <li>{@link EventType#CLOSE} â€? The stream is closed. After receiving this
1:7fa86e8:  * event, no more events will follow.
1:7fa86e8:  * <li>{@link EventType#ERROR} â€? The stream ran into an unrecoverable problem
1:7fa86e8:  * and is sending the reason downstream. The stream is closed and no more events
1:7fa86e8:  * will follow after this event.
1:7fa86e8:  * </ul>
1:7fa86e8:  *
1:7fa86e8:  * @param <T> The payload type of the event.
1:7fa86e8:  * @Immutable
1:7fa86e8:  */
1:7fa86e8: public abstract class PushEvent<T> {
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * The type of a {@link PushEvent}.
1:7fa86e8: 	 */
1:7fa86e8: 	public static enum EventType {
1:7fa86e8: 		/**
1:7fa86e8: 		 * A data event forming part of the stream
1:7fa86e8: 		 */
1:7fa86e8: 		DATA,
1:7fa86e8: 		/**
1:7fa86e8: 		 * An error event that indicates streaming has failed and that no more
1:7fa86e8: 		 * events will arrive
1:7fa86e8: 		 */
1:7fa86e8: 		ERROR,
1:7fa86e8: 		/**
1:7fa86e8: 		 * An event that indicates that the stream has terminated normally
1:7fa86e8: 		 */
1:7fa86e8: 		CLOSE
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Package private default constructor.
1:7fa86e8: 	 */
1:7fa86e8: 	PushEvent() {}
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Get the type of this event.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @return The type of this event.
1:7fa86e8: 	 */
1:7fa86e8: 	public abstract EventType getType();
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Return the data for this event.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @return The data payload.
1:7fa86e8: 	 * @throws IllegalStateException if this event is not a
1:7fa86e8: 	 *             {@link EventType#DATA} event.
1:7fa86e8: 	 */
1:7fa86e8: 	public T getData() throws IllegalStateException {
1:7fa86e8: 		throw new IllegalStateException(
1:7fa86e8: 				"Not a DATA event, the event type is " + getType());
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Return the error that terminated the stream.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @return The error that terminated the stream.
1:7fa86e8: 	 * @throws IllegalStateException if this event is not an
1:7fa86e8: 	 *             {@link EventType#ERROR} event.
1:7fa86e8: 	 */
1:7fa86e8: 	public Exception getFailure() throws IllegalStateException {
1:7fa86e8: 		throw new IllegalStateException(
1:7fa86e8: 				"Not an ERROR event, the event type is " + getType());
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Answer if no more events will follow after this event.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @return {@code false} if this is a data event, otherwise {@code true}.
1:7fa86e8: 	 */
1:7fa86e8: 	public boolean isTerminal() {
1:7fa86e8: 		return true;
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Create a new data event.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param <T> The payload type.
1:7fa86e8: 	 * @param payload The payload.
1:7fa86e8: 	 * @return A new data event wrapping the specified payload.
1:7fa86e8: 	 */
1:7fa86e8: 	public static <T> PushEvent<T> data(T payload) {
1:7fa86e8: 		return new DataEvent<T>(payload);
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Create a new error event.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param <T> The payload type.
1:7fa86e8: 	 * @param e The error.
1:7fa86e8: 	 * @return A new error event with the specified error.
1:7fa86e8: 	 */
1:7fa86e8: 	public static <T> PushEvent<T> error(Exception e) {
1:7fa86e8: 		return new ErrorEvent<T>(e);
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Create a new close event.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param <T> The payload type.
1:7fa86e8: 	 * @return A new close event.
1:7fa86e8: 	 */
1:7fa86e8: 	public static <T> PushEvent<T> close() {
1:7fa86e8: 		return new CloseEvent<T>();
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Convenience to cast a close/error event to another payload type. Since
1:7fa86e8: 	 * the payload type is not needed for these events this is harmless. This
1:7fa86e8: 	 * therefore allows you to forward the close/error event downstream without
1:7fa86e8: 	 * creating anew event.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param <X> The new payload type.
1:7fa86e8: 	 * @return The current error or close event mapped to a new payload type.
1:7fa86e8: 	 * @throws IllegalStateException if the event is a {@link EventType#DATA}
1:7fa86e8: 	 *             event.
1:7fa86e8: 	 */
1:7fa86e8: 	public <X> PushEvent<X> nodata() throws IllegalStateException {
1:7fa86e8: 		@SuppressWarnings("unchecked")
1:7fa86e8: 		PushEvent<X> result = (PushEvent<X>) this;
1:7fa86e8: 		return result;
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	static final class DataEvent<T> extends PushEvent<T> {
1:7fa86e8: 		private final T data;
1:7fa86e8: 
1:7fa86e8: 		DataEvent(T data) {
1:7fa86e8: 			this.data = data;
1:7fa86e8: 		}
1:7fa86e8: 
1:7fa86e8: 		@Override
1:7fa86e8: 		public T getData() throws IllegalStateException {
1:7fa86e8: 			return data;
1:7fa86e8: 		}
1:7fa86e8: 
1:7fa86e8: 		@Override
1:7fa86e8: 		public EventType getType() {
1:7fa86e8: 			return DATA;
1:7fa86e8: 		}
1:7fa86e8: 
1:7fa86e8: 		@Override
1:7fa86e8: 		public boolean isTerminal() {
1:7fa86e8: 			return false;
1:7fa86e8: 		}
1:7fa86e8: 
1:7fa86e8: 		@Override
1:7fa86e8: 		public <X> PushEvent<X> nodata() throws IllegalStateException {
1:7fa86e8: 			throw new IllegalStateException("This event is a DATA event");
1:7fa86e8: 		}
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	static final class ErrorEvent<T> extends PushEvent<T> {
1:7fa86e8: 		private final Exception error;
1:7fa86e8: 
1:7fa86e8: 		ErrorEvent(Exception error) {
1:7fa86e8: 			this.error = error;
1:7fa86e8: 		}
1:7fa86e8: 
1:7fa86e8: 		@Override
1:7fa86e8: 		public Exception getFailure() {
1:7fa86e8: 			return error;
1:7fa86e8: 		}
1:7fa86e8: 
1:7fa86e8: 		@Override
1:7fa86e8: 		public EventType getType() {
1:7fa86e8: 			return ERROR;
1:7fa86e8: 		}
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	static final class CloseEvent<T> extends PushEvent<T> {
1:7fa86e8: 		@Override
1:7fa86e8: 		public EventType getType() {
1:7fa86e8: 			return CLOSE;
1:7fa86e8: 		}
1:7fa86e8: 	}
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2015, 2016). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.util.pushstream;
1: 
1: import static org.osgi.util.pushstream.PushEvent.EventType.*;
1: 
1: /**
1:  * A PushEvent is an immutable object that is transferred through a
1:  * communication channel to push information to a downstream consumer. The event
1:  * has three different types:
1:  * <ul>
1:  * <li>{@link EventType#DATA} â€? Provides access to a typed data element in the
1:  * stream.
1:  * <li>{@link EventType#CLOSE} â€? The stream is closed. After receiving this
1:  * event, no more events will follow.
1:  * <li>{@link EventType#ERROR} â€? The stream ran into an unrecoverable problem
1:  * and is sending the reason downstream. The stream is closed and no more events
1:  * will follow after this event.
1:  * </ul>
1:  *
1:  * @param <T> The payload type of the event.
1:  * @Immutable
1:  */
1: public abstract class PushEvent<T> {
1: 
1: 	/**
1: 	 * The type of a {@link PushEvent}.
1: 	 */
1: 	public static enum EventType {
1: 		/**
1: 		 * A data event forming part of the stream
1: 		 */
1: 		DATA,
1: 		/**
1: 		 * An error event that indicates streaming has failed and that no more
1: 		 * events will arrive
1: 		 */
1: 		ERROR,
1: 		/**
1: 		 * An event that indicates that the stream has terminated normally
1: 		 */
1: 		CLOSE
1: 	}
1: 
1: 	/**
1: 	 * Package private default constructor.
1: 	 */
1: 	PushEvent() {}
1: 
1: 	/**
1: 	 * Get the type of this event.
1: 	 * 
1: 	 * @return The type of this event.
1: 	 */
1: 	public abstract EventType getType();
1: 
1: 	/**
1: 	 * Return the data for this event.
1: 	 * 
1: 	 * @return The data payload.
1: 	 * @throws IllegalStateException if this event is not a
1: 	 *             {@link EventType#DATA} event.
1: 	 */
1: 	public T getData() throws IllegalStateException {
1: 		throw new IllegalStateException(
1: 				"Not a DATA event, the event type is " + getType());
1: 	}
1: 
1: 	/**
1: 	 * Return the error that terminated the stream.
1: 	 * 
1: 	 * @return The error that terminated the stream.
1: 	 * @throws IllegalStateException if this event is not an
1: 	 *             {@link EventType#ERROR} event.
1: 	 */
1: 	public Exception getFailure() throws IllegalStateException {
1: 		throw new IllegalStateException(
1: 				"Not an ERROR event, the event type is " + getType());
1: 	}
1: 
1: 	/**
1: 	 * Answer if no more events will follow after this event.
1: 	 * 
1: 	 * @return {@code false} if this is a data event, otherwise {@code true}.
1: 	 */
1: 	public boolean isTerminal() {
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * Create a new data event.
1: 	 * 
1: 	 * @param <T> The payload type.
1: 	 * @param payload The payload.
1: 	 * @return A new data event wrapping the specified payload.
1: 	 */
1: 	public static <T> PushEvent<T> data(T payload) {
1: 		return new DataEvent<T>(payload);
1: 	}
1: 
1: 	/**
1: 	 * Create a new error event.
1: 	 * 
1: 	 * @param <T> The payload type.
1: 	 * @param e The error.
1: 	 * @return A new error event with the specified error.
1: 	 */
1: 	public static <T> PushEvent<T> error(Exception e) {
1: 		return new ErrorEvent<T>(e);
1: 	}
1: 
1: 	/**
1: 	 * Create a new close event.
1: 	 * 
1: 	 * @param <T> The payload type.
1: 	 * @return A new close event.
1: 	 */
1: 	public static <T> PushEvent<T> close() {
1: 		return new CloseEvent<T>();
1: 	}
1: 
1: 	/**
1: 	 * Convenience to cast a close/error event to another payload type. Since
1: 	 * the payload type is not needed for these events this is harmless. This
1: 	 * therefore allows you to forward the close/error event downstream without
1: 	 * creating anew event.
1: 	 * 
1: 	 * @param <X> The new payload type.
1: 	 * @return The current error or close event mapped to a new payload type.
1: 	 * @throws IllegalStateException if the event is a {@link EventType#DATA}
1: 	 *             event.
1: 	 */
1: 	public <X> PushEvent<X> nodata() throws IllegalStateException {
1: 		@SuppressWarnings("unchecked")
1: 		PushEvent<X> result = (PushEvent<X>) this;
1: 		return result;
1: 	}
1: 
1: 	static final class DataEvent<T> extends PushEvent<T> {
1: 		private final T data;
1: 
1: 		DataEvent(T data) {
1: 			this.data = data;
1: 		}
1: 
1: 		@Override
1: 		public T getData() throws IllegalStateException {
1: 			return data;
1: 		}
1: 
1: 		@Override
1: 		public EventType getType() {
1: 			return DATA;
1: 		}
1: 
1: 		@Override
1: 		public boolean isTerminal() {
1: 			return false;
1: 		}
1: 
1: 		@Override
1: 		public <X> PushEvent<X> nodata() throws IllegalStateException {
1: 			throw new IllegalStateException("This event is a DATA event");
1: 		}
1: 	}
1: 
1: 	static final class ErrorEvent<T> extends PushEvent<T> {
1: 		private final Exception error;
1: 
1: 		ErrorEvent(Exception error) {
1: 			this.error = error;
1: 		}
1: 
1: 		@Override
1: 		public Exception getFailure() {
1: 			return error;
1: 		}
1: 
1: 		@Override
1: 		public EventType getType() {
1: 			return ERROR;
1: 		}
1: 	}
1: 
1: 	static final class CloseEvent<T> extends PushEvent<T> {
1: 		@Override
1: 		public EventType getType() {
1: 			return CLOSE;
1: 		}
1: 	}
1: }
============================================================================