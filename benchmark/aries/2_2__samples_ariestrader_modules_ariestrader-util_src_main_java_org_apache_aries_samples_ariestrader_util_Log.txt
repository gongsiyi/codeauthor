1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.util;
1:628add4: 
1:592304c: import org.slf4j.Logger;
1:592304c: import org.slf4j.LoggerFactory;
1:592304c: 
1:628add4: import java.util.Collection;
1:628add4: import java.util.Iterator;
1:628add4: 
1:628add4: public class Log {
1:592304c: 	private final static Logger log = LoggerFactory.getLogger(Log.class);
1:628add4: //A general purpose, high performance logging, tracing, statistic service
1:628add4: 
1:628add4: 	public static void log(String message)
1:628add4: 	{
1:56a6860:         log.debug("AriesTrader Log:" + new java.util.Date() + "------\n\t ");
1:628add4: 		log.debug(message);
1:628add4: 	}
1:628add4: 	public static void log(String msg1, String msg2)
1:628add4: 	{
1:628add4: 		log(msg1+msg2);
1:628add4: 	}
1:628add4: 	public static void log(String msg1, String msg2, String msg3)
1:628add4: 	{
1:628add4: 		log(msg1+msg2+msg3);
1:628add4: 	}
1:628add4: 	
1:628add4: 	public static void error(String message)
1:628add4: 	{
1:628add4: 		message = "Error: " + message;
1:628add4: 		log.error(message);
1:628add4: 	}
1:628add4: 	public static void error(String message, Throwable e)
1:628add4: 	{
1:628add4: 		error(message+"\n\t"+e.toString());
1:628add4: 		e.printStackTrace(System.out);
1:628add4: 	}
1:628add4: 	public static void error(String msg1, String msg2, Throwable e)
1:628add4: 	{
1:628add4: 		error(msg1+"\n"+msg2+"\n\t", e);
1:628add4: 	}
1:628add4: 	public static void error(String msg1, String msg2, String msg3, Throwable e)
1:628add4: 	{
1:628add4: 		error(msg1+"\n"+msg2+"\n"+msg3+"\n\t", e);
1:628add4: 	}
1:628add4: 	public static void error(Throwable e, String message)
1:628add4: 	{
1:628add4: 		error(message+"\n\t",e);
1:628add4: 		e.printStackTrace(System.out);
1:628add4: 	}
1:628add4: 	public static void error(Throwable e, String msg1, String msg2)
1:628add4: 	{
1:628add4: 		error(msg1+"\n"+msg2+"\n\t",e);
1:628add4: 	}
1:628add4: 	public static void error(Throwable e, String msg1, String msg2, String msg3)
1:628add4: 	{
1:628add4: 		error(msg1+"\n"+msg2+"\n"+msg3+"\n\t", e);
1:628add4: 	}
1:628add4: 	
1:628add4: 	
1:628add4: 	public static void trace(String message)
1:628add4: 	{
1:628add4: 		log.trace(message + " threadID="+ Thread.currentThread());
1:628add4: 	}
1:628add4: 
1:628add4: 	public static void trace(String message, Object parm1)
1:628add4: 	{
1:628add4: 		trace(message+"("+parm1+")");
1:628add4: 	}
1:628add4: 
1:628add4: 	public static void trace(String message, Object parm1, Object parm2)
1:628add4: 	{
1:628add4: 		trace(message+"("+parm1+", "+parm2+")");
1:628add4: 	}
1:628add4: 
1:628add4: 	public static void trace(String message, Object parm1, Object parm2, Object parm3)
1:628add4: 	{
1:628add4: 		trace(message+"("+parm1+", "+parm2+", "+parm3+")");
1:628add4: 	}
1:628add4: 	public static void trace(String message, Object parm1, Object parm2, Object parm3, Object parm4)
1:628add4: 	{
1:628add4: 		trace(message+"("+parm1+", "+parm2+", "+parm3+")"+", "+parm4);
1:628add4: 	}
1:628add4: 	public static void trace(String message, Object parm1, Object parm2, Object parm3, Object parm4, Object parm5)
1:628add4: 	{
1:628add4: 		trace(message+"("+parm1+", "+parm2+", "+parm3+")"+", "+parm4+", "+parm5);
1:628add4: 	}
1:628add4: 	public static void trace(String message, Object parm1, Object parm2, Object parm3, Object parm4, 
1:628add4: 								Object parm5, Object parm6)
1:628add4: 	{
1:628add4: 		trace(message+"("+parm1+", "+parm2+", "+parm3+")"+", "+parm4+", "+parm5+", "+parm6);
1:628add4: 	}
1:628add4: 	public static void trace(String message, Object parm1, Object parm2, Object parm3, Object parm4, 
1:628add4: 	          					Object parm5, Object parm6, Object parm7)
1:628add4: 	{
1:628add4: 		trace(message+"("+parm1+", "+parm2+", "+parm3+")"+", "+parm4+", "+parm5+", "+parm6+", "+parm7);
1:628add4: 	}
1:628add4: 	public static void traceEnter(String message)
1:628add4: 	{
1:628add4: 		log.trace("Method enter --" + message);
1:628add4: 	}
1:628add4: 	public static void traceExit(String message)
1:628add4: 	{
1:628add4: 		log.trace("Method exit  --" + message);
1:628add4: 	}
1:628add4: 	
1:628add4: 	
1:628add4: 	public static void stat(String message)
1:628add4: 	{
1:628add4: 		log(message);
1:628add4: 	}
1:628add4: 
1:628add4: 	public static void debug(String message)
1:628add4: 	{
1:628add4: 		log.debug(message);
1:628add4: 	}
1:628add4: 
1:628add4: 	public static void print(String message)
1:628add4: 	{
1:628add4: 		log(message);
1:628add4: 	}
1:628add4: 	
1:628add4: 	public static void printObject(Object o)
1:628add4: 	{
1:628add4: 		log("\t"+o.toString());
1:628add4: 	}
1:628add4: 		
1:628add4: 	public static void printCollection(Collection c)
1:628add4: 	{
1:628add4: 		log("\t---Log.printCollection -- collection size=" + c.size());
1:628add4: 		Iterator it = c.iterator();
1:628add4: 		while ( it.hasNext() )
1:628add4: 		{
1:628add4: 			log("\t\t"+it.next().toString());
1:628add4: 		}
1:628add4: 		log("\t---Log.printCollection -- complete");		
1:628add4: 	}
1:628add4: 	
1:628add4: 	public static void printCollection(String message, Collection c)
1:628add4: 	{
1:628add4: 		log(message);
1:628add4: 		printCollection(c);
1:628add4: 	}
1:628add4: 	
1:628add4: 	public static boolean doActionTrace()
1:628add4: 	{
1:628add4: 		return getTrace() || getActionTrace();
1:628add4: 	}
1:628add4: 
1:628add4: 	public static boolean doTrace()
1:628add4: 	{
1:628add4: 		return getTrace();
1:628add4: 	}
1:628add4: 	
1:628add4: 	public static boolean doDebug()
1:628add4: 	{
1:628add4: 		return true;
1:628add4: 	}
1:628add4: 	
1:628add4: 	public static boolean doStat()
1:628add4: 	{
1:628add4: 		return true;
1:628add4: 	}		
1:628add4: 	
1:628add4: 	/**
1:628add4: 	 * Gets the trace
1:628add4: 	 * @return Returns a boolean
1:628add4: 	 */
1:628add4: 	public static boolean getTrace() {
1:628add4: 		return TradeConfig.getTrace();
1:628add4: 	}
1:628add4: 	/**
1:628add4: 	 * Gets the trace value for Trade actions only
1:628add4: 	 * @return Returns a boolean
1:628add4: 	 */
1:628add4: 	public static boolean getActionTrace() {
1:628add4: 		return TradeConfig.getActionTrace();
1:628add4: 	}
1:628add4: 		
1:628add4: 	/**
1:628add4: 	 * Sets the trace
1:592304c: 	 * @param traceValue The trace to set
1:628add4: 	 */
1:628add4: 	public static void setTrace(boolean traceValue)
1:628add4: 	{
1:628add4: 		TradeConfig.setTrace(traceValue);
1:628add4: 	}
1:628add4: 	/**
1:628add4: 	 * Sets the trace value for Trade actions only
1:592304c: 	 * @param traceValue The trace to set
1:628add4: 	 */
1:628add4: 	public static void setActionTrace(boolean traceValue)
1:628add4: 	{
1:628add4: 		TradeConfig.setActionTrace(traceValue);
1:628add4: 	}
1:628add4: }
1:628add4: 
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:39f53f6
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.util;
0: import org.apache.aries.samples.ariestrader.*;
/////////////////////////////////////////////////////////////////////////
1:         log.debug("AriesTrader Log:" + new java.util.Date() + "------\n\t ");
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.util;
0: import org.apache.aries.samples.daytrader.*;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.util;
1: 
1: import java.util.Collection;
1: import java.util.Iterator;
0: import org.apache.commons.logging.*;
0: import org.apache.geronimo.samples.daytrader.*;
1: 
1: public class Log {
0: 	private final static org.apache.commons.logging.Log log = LogFactory.getLog(Log.class);
1: //A general purpose, high performance logging, tracing, statistic service
1: 
1: 	public static void log(String message)
1: 	{
0:         log.debug("DayTrader Log:" + new java.util.Date() + "------\n\t ");
1: 		log.debug(message);
1: 	}
1: 	public static void log(String msg1, String msg2)
1: 	{
1: 		log(msg1+msg2);
1: 	}
1: 	public static void log(String msg1, String msg2, String msg3)
1: 	{
1: 		log(msg1+msg2+msg3);
1: 	}
1: 	
1: 	public static void error(String message)
1: 	{
1: 		message = "Error: " + message;
1: 		log.error(message);
1: 	}
1: 	public static void error(String message, Throwable e)
1: 	{
1: 		error(message+"\n\t"+e.toString());
1: 		e.printStackTrace(System.out);
1: 	}
1: 	public static void error(String msg1, String msg2, Throwable e)
1: 	{
1: 		error(msg1+"\n"+msg2+"\n\t", e);
1: 	}
1: 	public static void error(String msg1, String msg2, String msg3, Throwable e)
1: 	{
1: 		error(msg1+"\n"+msg2+"\n"+msg3+"\n\t", e);
1: 	}
1: 	public static void error(Throwable e, String message)
1: 	{
1: 		error(message+"\n\t",e);
1: 		e.printStackTrace(System.out);
1: 	}
1: 	public static void error(Throwable e, String msg1, String msg2)
1: 	{
1: 		error(msg1+"\n"+msg2+"\n\t",e);
1: 	}
1: 	public static void error(Throwable e, String msg1, String msg2, String msg3)
1: 	{
1: 		error(msg1+"\n"+msg2+"\n"+msg3+"\n\t", e);
1: 	}
1: 	
1: 	
1: 	public static void trace(String message)
1: 	{
1: 		log.trace(message + " threadID="+ Thread.currentThread());
1: 	}
1: 
1: 	public static void trace(String message, Object parm1)
1: 	{
1: 		trace(message+"("+parm1+")");
1: 	}
1: 
1: 	public static void trace(String message, Object parm1, Object parm2)
1: 	{
1: 		trace(message+"("+parm1+", "+parm2+")");
1: 	}
1: 
1: 	public static void trace(String message, Object parm1, Object parm2, Object parm3)
1: 	{
1: 		trace(message+"("+parm1+", "+parm2+", "+parm3+")");
1: 	}
1: 	public static void trace(String message, Object parm1, Object parm2, Object parm3, Object parm4)
1: 	{
1: 		trace(message+"("+parm1+", "+parm2+", "+parm3+")"+", "+parm4);
1: 	}
1: 	public static void trace(String message, Object parm1, Object parm2, Object parm3, Object parm4, Object parm5)
1: 	{
1: 		trace(message+"("+parm1+", "+parm2+", "+parm3+")"+", "+parm4+", "+parm5);
1: 	}
1: 	public static void trace(String message, Object parm1, Object parm2, Object parm3, Object parm4, 
1: 								Object parm5, Object parm6)
1: 	{
1: 		trace(message+"("+parm1+", "+parm2+", "+parm3+")"+", "+parm4+", "+parm5+", "+parm6);
1: 	}
1: 	public static void trace(String message, Object parm1, Object parm2, Object parm3, Object parm4, 
1: 	          					Object parm5, Object parm6, Object parm7)
1: 	{
1: 		trace(message+"("+parm1+", "+parm2+", "+parm3+")"+", "+parm4+", "+parm5+", "+parm6+", "+parm7);
1: 	}
1: 	public static void traceEnter(String message)
1: 	{
1: 		log.trace("Method enter --" + message);
1: 	}
1: 	public static void traceExit(String message)
1: 	{
1: 		log.trace("Method exit  --" + message);
1: 	}
1: 	
1: 	
1: 	public static void stat(String message)
1: 	{
1: 		log(message);
1: 	}
1: 
1: 	public static void debug(String message)
1: 	{
1: 		log.debug(message);
1: 	}
1: 
1: 	public static void print(String message)
1: 	{
1: 		log(message);
1: 	}
1: 	
1: 	public static void printObject(Object o)
1: 	{
1: 		log("\t"+o.toString());
1: 	}
1: 		
1: 	public static void printCollection(Collection c)
1: 	{
1: 		log("\t---Log.printCollection -- collection size=" + c.size());
1: 		Iterator it = c.iterator();
1: 		while ( it.hasNext() )
1: 		{
1: 			log("\t\t"+it.next().toString());
1: 		}
1: 		log("\t---Log.printCollection -- complete");		
1: 	}
1: 	
1: 	public static void printCollection(String message, Collection c)
1: 	{
1: 		log(message);
1: 		printCollection(c);
1: 	}
1: 	
1: 	public static boolean doActionTrace()
1: 	{
1: 		return getTrace() || getActionTrace();
1: 	}
1: 
1: 	public static boolean doTrace()
1: 	{
1: 		return getTrace();
1: 	}
1: 	
1: 	public static boolean doDebug()
1: 	{
1: 		return true;
1: 	}
1: 	
1: 	public static boolean doStat()
1: 	{
1: 		return true;
1: 	}		
1: 	
1: 	/**
1: 	 * Gets the trace
1: 	 * @return Returns a boolean
1: 	 */
1: 	public static boolean getTrace() {
1: 		return TradeConfig.getTrace();
1: 	}
1: 	/**
1: 	 * Gets the trace value for Trade actions only
1: 	 * @return Returns a boolean
1: 	 */
1: 	public static boolean getActionTrace() {
1: 		return TradeConfig.getActionTrace();
1: 	}
1: 		
1: 	/**
1: 	 * Sets the trace
0: 	 * @param trace The trace to set
1: 	 */
1: 	public static void setTrace(boolean traceValue)
1: 	{
1: 		TradeConfig.setTrace(traceValue);
1: 	}
1: 	/**
1: 	 * Sets the trace value for Trade actions only
0: 	 * @param trace The trace to set
1: 	 */
1: 	public static void setActionTrace(boolean traceValue)
1: 	{
1: 		TradeConfig.setActionTrace(traceValue);
1: 	}
1: }
1: 
author:David Jencks
-------------------------------------------------------------------------------
commit:592304c
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 	private final static Logger log = LoggerFactory.getLogger(Log.class);
/////////////////////////////////////////////////////////////////////////
1: 	 * @param traceValue The trace to set
/////////////////////////////////////////////////////////////////////////
1: 	 * @param traceValue The trace to set
============================================================================