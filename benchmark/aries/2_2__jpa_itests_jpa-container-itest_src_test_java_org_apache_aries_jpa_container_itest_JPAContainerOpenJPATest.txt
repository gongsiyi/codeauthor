1:86224ba: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:86224ba:  *  contributor license agreements.  See the NOTICE file distributed with
1:86224ba:  *  this work for additional information regarding copyright ownership.
1:86224ba:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:86224ba:  *  (the "License"); you may not use this file except in compliance with
1:86224ba:  *  the License.  You may obtain a copy of the License at
1:86224ba:  *
1:86224ba:  *     http://www.apache.org/licenses/LICENSE-2.0
1:86224ba:  *
1:86224ba:  *  Unless required by applicable law or agreed to in writing, software
1:86224ba:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:86224ba:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:86224ba:  *  See the License for the specific language governing permissions and
1:86224ba:  *  limitations under the License.
1:86224ba:  */
1:6d497a2: package org.apache.aries.jpa.container.itest;
7:01b1fa4: 
1:01b1fa4: import static org.junit.Assert.assertTrue;
1:01b1fa4: 
1:01b1fa4: import java.util.Arrays;
1:ece43ad: 
1:e5c89d2: import org.apache.aries.jpa.container.itest.entities.Car;
1:01b1fa4: import org.apache.openjpa.enhance.PersistenceCapable;
1:01b1fa4: import org.junit.Test;
1:ece43ad: import org.ops4j.pax.exam.Configuration;
1:01b1fa4: import org.ops4j.pax.exam.Option;
1:ece43ad: 
1:6d497a2: public class JPAContainerOpenJPATest extends JPAContainerTest {
1:6d497a2:     
1:2cfdf52:     @Test
1:2cfdf52:     public void testClassIsWoven() throws Exception {
1:2cfdf52:         assertTrue("Not PersistenceCapable",
1:2cfdf52:                    Arrays.asList(Car.class.getInterfaces()).contains(PersistenceCapable.class));
1:2cfdf52:     }
1:ece43ad: 
1:6d497a2:     @Configuration
1:6d497a2:     public Option[] configuration() {
1:6d497a2:         return new Option[] {
1:6d497a2:             baseOptions(), //
1:6d497a2:             ariesJpa20(), //
1:f50875c:             jta11Bundles(), // Openjpa currently does not work with jta 1.2. See https://issues.apache.org/jira/browse/OPENJPA-2607
1:6d497a2:             openJpa(), //
1:6d497a2:             derbyDSF(), //
1:6d497a2:             testBundle()
1:6d497a2:         };
1:6d497a2: 
1:6d497a2:     }
1:6d497a2: 
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:f50875c
/////////////////////////////////////////////////////////////////////////
1:             jta11Bundles(), // Openjpa currently does not work with jta 1.2. See https://issues.apache.org/jira/browse/OPENJPA-2607
commit:6d497a2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.container.itest;
/////////////////////////////////////////////////////////////////////////
1: public class JPAContainerOpenJPATest extends JPAContainerTest {
1:     
1:     @Configuration
1:     public Option[] configuration() {
1:         return new Option[] {
1:             baseOptions(), //
1:             ariesJpa20(), //
1:             openJpa(), //
1:             derbyDSF(), //
1:             testBundle()
1:         };
1: 
1:     }
1: 
commit:e5c89d2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jpa.container.itest.entities.Car;
/////////////////////////////////////////////////////////////////////////
0:             derbyDSF(), //
0:             testBundle(), //
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     @Configuration
0:     public Option[] openjpaConfig() {
0:         return new Option[] {
0:             baseOptions(), //
0:             openJpa(), //
0:             derbyDSF(), //
0:             ariesJpa20(), //
0:             transactionWrapper(), //
0:             testBundleAdvanced(), //
0:         };
1:     }
1:     @Test
1:     public void testClassIsWoven() throws Exception {
1:         assertTrue("Not PersistenceCapable",
1:                    Arrays.asList(Car.class.getInterfaces()).contains(PersistenceCapable.class));
1:     }
commit:3b80dcd
/////////////////////////////////////////////////////////////////////////
0: 				ariesJpa20(),
commit:e175ef4
/////////////////////////////////////////////////////////////////////////
0: 				baseOptions(),
0: 				openJpa(),
0: 				derbyDataSourceFactory(),
/////////////////////////////////////////////////////////////////////////
0: 		showBundles();
commit:ece43ad
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
1: import org.ops4j.pax.exam.Configuration;
0: // TODO The Test persistence unit does not seem to be created. Reenable when this works 
0: @Ignore
0: 	@Configuration
0: 	public Option[] openjpaConfig() {
0: 		return options(
0: 				baseOptions(), 
0: 				ariesJpa(),
0: 				transactionWrapper(),
0: 				openJpa(),
1: 
0: 				testBundleAdvanced()
0: 				);
0: 	}
1: 
0: 	@Test
0: 	public void testClassIsWoven() throws Exception {
0: 		getEMF(TEST_UNIT);
0: 		assertTrue("Not PersistenceCapable", Arrays.asList(Car.class.getInterfaces())
0: 				.contains(PersistenceCapable.class));
0: 	}
1: 
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: import static org.apache.aries.itest.ExtraOptions.*;
/////////////////////////////////////////////////////////////////////////
0:       context().getService(EntityManagerFactory.class, "(&(osgi.unit.name=test-unit)(" + PersistenceUnitConstants.CONTAINER_MANAGED_PERSISTENCE_UNIT + "=true))");
commit:01b1fa4
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.jpa.advanced.features.itest;
1: 
1: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.options;
1: 
1: import java.util.Arrays;
1: 
0: import javax.persistence.EntityManagerFactory;
1: 
0: import org.apache.aries.jpa.container.PersistenceUnitConstants;
0: import org.apache.aries.jpa.container.advanced.itest.bundle.entities.Car;
1: import org.apache.openjpa.enhance.PersistenceCapable;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.Configuration;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class OpenjpaWeavingAndAnnotationScanningTest extends JPAWeavingAndAnnotationScanningTest {
1: 
0:     @Configuration
0:     public static Option[] openjpaConfig() {
0:         return options(        
0:                 mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.serp"),
0:                 mavenBundle("org.apache.openjpa", "openjpa")
0:         );
0:     }
1:     
0:     @Test
0:     public void testClassIsWoven() throws Exception {
0:       getOsgiService(bundleContext, EntityManagerFactory.class, "(&(osgi.unit.name=test-unit)(" + PersistenceUnitConstants.CONTAINER_MANAGED_PERSISTENCE_UNIT + "=true))", DEFAULT_TIMEOUT);
0:       assertTrue("Not PersistenceCapable", Arrays.asList(Car.class.getInterfaces())
0:           .contains(PersistenceCapable.class));
0:     }
1:     
0: }
============================================================================