2:f13c6ac: /**
2:f13c6ac:  *
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  * contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  * this work for additional information regarding copyright ownership.
1:f13c6ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  * (the "License"); you may not use this file except in compliance with
1:f13c6ac:  * the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  *  Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  *  See the License for the specific language governing permissions and
1:f13c6ac:  *  limitations under the License.
2:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.di;
2:f13c6ac: 
1:88a0e3f: import java.util.concurrent.Future;
1:88a0e3f: 
1:f13c6ac: import org.osgi.service.blueprint.container.ReifiedType;
1:cab8bfe: 
1:f13c6ac: public interface ExecutionContext {
1:f13c6ac: 
1:f13c6ac:     public static final class Holder {
1:f13c6ac: 
1:f13c6ac:         private static final ThreadLocal<ExecutionContext> context = new ThreadLocal<ExecutionContext>();
1:f13c6ac: 
1:f13c6ac:         private Holder() {
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public static ExecutionContext getContext() {
1:f13c6ac:             ExecutionContext executionContext = context.get();
1:f13c6ac:             if (executionContext == null) {
1:f13c6ac:                 throw new IllegalStateException("Execution container has not been set");
1:f13c6ac:             }
1:f13c6ac:             return executionContext;
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public static ExecutionContext setContext(ExecutionContext newContext) {
1:f13c6ac:             ExecutionContext oldContext = context.get();
1:f13c6ac:             context.set(newContext);
1:f13c6ac:             return oldContext;
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     /**
1:f13c6ac:      * Adds a recipe to the top of the execution stack.  If the recipe is already on
1:f13c6ac:      * the stack, a CircularDependencyException is thrown.
1:f13c6ac:      * @param recipe the recipe to add to the stack
1:f13c6ac:      * @throws CircularDependencyException if the recipe is already on the stack
1:f13c6ac:      */
1:88a0e3f:     public void push(Recipe recipe) throws CircularDependencyException;
1:f13c6ac: 
1:f13c6ac:     /**
1:f13c6ac:      * Removes the top recipe from the execution stack.
1:f13c6ac:      * @return the top recipe on the stack
1:f13c6ac:      */
1:88a0e3f:     public Recipe pop();
1:f13c6ac: 
1:f13c6ac:     /**
1:f13c6ac:      * Does this context contain a object with the specified name.
1:f13c6ac:      *
1:f13c6ac:      * @param name the unique name of the object instance
1:f13c6ac:      * @return true if this context contain a object with the specified name
1:f13c6ac:      */
1:88a0e3f:     public boolean containsObject(String name);
1:f13c6ac: 
1:f13c6ac:     /**
1:f13c6ac:      * Gets the object or recipe with the specified name from the repository.
1:f13c6ac:      *
1:f13c6ac:      * @param name the unique name of the object instance
1:f13c6ac:      * @return the object instance, a recipe to build the object or null
1:f13c6ac:      */
1:88a0e3f:     public Object getObject(String name);
1:f13c6ac: 
1:88a0e3f:     /**
1:88a0e3f:      * Try to add a full object and return the already registered future if available
1:88a0e3f:      * @param name
1:88a0e3f:      * @param object
1:88a0e3f:      * @return
1:88a0e3f:      */
1:88a0e3f:     public Future<Object> addFullObject(String name, Future<Object> object);
1:f13c6ac:     
1:88a0e3f:     public void addPartialObject(String name, Object object);
1:f13c6ac:     
1:88a0e3f:     public Object getPartialObject(String name);
1:f13c6ac:     
1:88a0e3f:     public void removePartialObject(String name);
1:f13c6ac: 
1:88a0e3f:     public Object convert(Object value, ReifiedType type) throws Exception;
1:f13c6ac:     
1:88a0e3f:     public boolean canConvert(Object value, ReifiedType type);
1:f13c6ac: 
1:88a0e3f:     public Class loadClass(String className) throws ClassNotFoundException;
1:f13c6ac: 
1:88a0e3f:     public Recipe getRecipe(String name);
1:f13c6ac:     
1:f13c6ac: }
1:f13c6ac: 
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:88a0e3f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Future;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void push(Recipe recipe) throws CircularDependencyException;
1:     public Recipe pop();
/////////////////////////////////////////////////////////////////////////
1:     public boolean containsObject(String name);
/////////////////////////////////////////////////////////////////////////
1:     public Object getObject(String name);
1:     /**
1:      * Try to add a full object and return the already registered future if available
1:      * @param name
1:      * @param object
1:      * @return
1:      */
1:     public Future<Object> addFullObject(String name, Future<Object> object);
1:     public void addPartialObject(String name, Object object);
1:     public Object getPartialObject(String name);
1:     public void removePartialObject(String name);
1:     public Object convert(Object value, ReifiedType type) throws Exception;
1:     public boolean canConvert(Object value, ReifiedType type);
1:     public Class loadClass(String className) throws ClassNotFoundException;
1:     public Recipe getRecipe(String name);
commit:cab8bfe
/////////////////////////////////////////////////////////////////////////
1:     
0:     public abstract boolean canConvert(Object value, ReifiedType type);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.di;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.blueprint.di;
1: 
1: import org.osgi.service.blueprint.container.ReifiedType;
1: 
1: public interface ExecutionContext {
1: 
1:     public static final class Holder {
1: 
1:         private static final ThreadLocal<ExecutionContext> context = new ThreadLocal<ExecutionContext>();
1: 
1:         private Holder() {
1:         }
1: 
1:         public static ExecutionContext getContext() {
1:             ExecutionContext executionContext = context.get();
1:             if (executionContext == null) {
1:                 throw new IllegalStateException("Execution container has not been set");
1:             }
1:             return executionContext;
1:         }
1: 
1:         public static ExecutionContext setContext(ExecutionContext newContext) {
1:             ExecutionContext oldContext = context.get();
1:             context.set(newContext);
1:             return oldContext;
1:         }
1: 
1:     }
1: 
1:     /**
0:      * Lock that should be used to synchronized creation of singletons
1:      * 
0:      * @return
1:      */
0:     public Object getInstanceLock();
1: 
1:     /**
1:      * Adds a recipe to the top of the execution stack.  If the recipe is already on
1:      * the stack, a CircularDependencyException is thrown.
1:      * @param recipe the recipe to add to the stack
1:      * @throws CircularDependencyException if the recipe is already on the stack
1:      */
0:     public abstract void push(Recipe recipe) throws CircularDependencyException;
1: 
1:     /**
1:      * Removes the top recipe from the execution stack.
1:      * @return the top recipe on the stack
1:      */
0:     public abstract Recipe pop();
1: 
1:     /**
1:      * Does this context contain a object with the specified name.
1:      *
1:      * @param name the unique name of the object instance
1:      * @return true if this context contain a object with the specified name
1:      */
0:     public abstract boolean containsObject(String name);
1: 
1:     /**
1:      * Gets the object or recipe with the specified name from the repository.
1:      *
1:      * @param name the unique name of the object instance
1:      * @return the object instance, a recipe to build the object or null
1:      */
0:     public abstract Object getObject(String name);
1: 
0:     public abstract void addFullObject(String name, Object object);
1:     
0:     public abstract void addPartialObject(String name, Object object);
1:     
0:     public abstract Object removePartialObject(String name);
1:     
0:     public abstract Object getPartialObject(String name);
1: 
0:     public abstract Object convert(Object value, ReifiedType type) throws Exception;
1: 
0:     public abstract Class loadClass(String className) throws ClassNotFoundException;
1: 
0:     public abstract Recipe getRecipe(String name);
1:     
1: }
1: 
============================================================================