1:79b20bc: /*
1:79b20bc:  * Licensed under the Apache License, Version 2.0 (the "License");
1:79b20bc:  * you may not use this file except in compliance with the License.
1:79b20bc:  * You may obtain a copy of the License at
1:79b20bc:  *
1:79b20bc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:79b20bc:  *
1:79b20bc:  * Unless required by applicable law or agreed to in writing, software
1:79b20bc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:79b20bc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:79b20bc:  * See the License for the specific language governing permissions and
1:79b20bc:  * limitations under the License.
1:79b20bc:  */
1:79b20bc: package org.apache.aries.subsystem;
1:79b20bc: 
1:79b20bc: import java.io.InputStream;
1:79b20bc: 
1:79b20bc: import org.osgi.service.coordinator.Coordination;
1:79b20bc: import org.osgi.service.subsystem.Subsystem;
1:79b20bc: 
1:79b20bc: /**
1:79b20bc:  * A handler for custom content in Subsystems. This handler must be registered as Whiteboard
1:79b20bc:  * services with the {@link #CONTENT_TYPE_PROPERTY} property indicating the content type this
1:79b20bc:  * handler must be invoked for. <p>
1:79b20bc:  *
1:79b20bc:  * Custom content embedded inside an subsystem archive (e.g. {@code .esa} file) must be declared
1:79b20bc:  * in the {@code Subsystem-Content} header where the {@link #EMBEDDED_RESOURCE_ATTRIBUTE} can
1:79b20bc:  * be used to associate it with the name of a file inside the archive.
1:79b20bc:  */
1:79b20bc: public interface ContentHandler {
1:79b20bc:     static final String CONTENT_TYPE_PROPERTY = "org.aries.subsystem.contenthandler.type";
1:79b20bc:     static final String EMBEDDED_RESOURCE_ATTRIBUTE = "embedded-resource";
1:79b20bc: 
1:79b20bc:     /**
1:79b20bc:      * Install this custom content.
1:79b20bc:      * @param is An input stream to the content.
1:79b20bc:      * @param symbolicName The name of the content.
1:79b20bc:      * @param contentType The type of the content.
1:79b20bc:      * @param subsystem The target subsystem.
1:79b20bc:      * @param coordination The current coordination. Can be used to register a compensation in case of
1:79b20bc:      * failure or to fail the installation action.
1:79b20bc:      */
1:79b20bc:     void install(InputStream is, String symbolicName, String contentType, Subsystem subsystem, Coordination coordination);
1:79b20bc: 
1:79b20bc:     /**
1:79b20bc:      * Start this custom content.
1:79b20bc:      * @param symbolicName The name of the content.
1:79b20bc:      * @param contentType The type of the content.
1:79b20bc:      * @param subsystem The target subsystem.
1:79b20bc:      * @param coordination The current coordination. Can be used to register a compensation in case of
1:79b20bc:      * failure or to fail the start action.
1:79b20bc:      */
1:79b20bc:     void start(String symbolicName, String contentType, Subsystem subsystem, Coordination coordination);
1:79b20bc: 
1:79b20bc:     /**
1:79b20bc:      * Stop this custom content.
1:79b20bc:      * @param symbolicName The name of the content.
1:79b20bc:      * @param contentType The type of the content.
1:79b20bc:      * @param subsystem The target subsystem.
1:79b20bc:      */
1:79b20bc:     void stop(String symbolicName, String contentType, Subsystem subsystem);
1:79b20bc: 
1:79b20bc:     /**
1:79b20bc:      * Uninstall this custom content.
1:79b20bc:      * @param symbolicName The name of the content.
1:79b20bc:      * @param contentType The type of the content.
1:79b20bc:      * @param subsystem The target subsystem.
1:79b20bc:      */
1:79b20bc:     void uninstall(String symbolicName, String contentType, Subsystem subsystem);
1:79b20bc: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:79b20bc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem;
1: 
1: import java.io.InputStream;
1: 
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.subsystem.Subsystem;
1: 
1: /**
1:  * A handler for custom content in Subsystems. This handler must be registered as Whiteboard
1:  * services with the {@link #CONTENT_TYPE_PROPERTY} property indicating the content type this
1:  * handler must be invoked for. <p>
1:  *
1:  * Custom content embedded inside an subsystem archive (e.g. {@code .esa} file) must be declared
1:  * in the {@code Subsystem-Content} header where the {@link #EMBEDDED_RESOURCE_ATTRIBUTE} can
1:  * be used to associate it with the name of a file inside the archive.
1:  */
1: public interface ContentHandler {
1:     static final String CONTENT_TYPE_PROPERTY = "org.aries.subsystem.contenthandler.type";
1:     static final String EMBEDDED_RESOURCE_ATTRIBUTE = "embedded-resource";
1: 
1:     /**
1:      * Install this custom content.
1:      * @param is An input stream to the content.
1:      * @param symbolicName The name of the content.
1:      * @param contentType The type of the content.
1:      * @param subsystem The target subsystem.
1:      * @param coordination The current coordination. Can be used to register a compensation in case of
1:      * failure or to fail the installation action.
1:      */
1:     void install(InputStream is, String symbolicName, String contentType, Subsystem subsystem, Coordination coordination);
1: 
1:     /**
1:      * Start this custom content.
1:      * @param symbolicName The name of the content.
1:      * @param contentType The type of the content.
1:      * @param subsystem The target subsystem.
1:      * @param coordination The current coordination. Can be used to register a compensation in case of
1:      * failure or to fail the start action.
1:      */
1:     void start(String symbolicName, String contentType, Subsystem subsystem, Coordination coordination);
1: 
1:     /**
1:      * Stop this custom content.
1:      * @param symbolicName The name of the content.
1:      * @param contentType The type of the content.
1:      * @param subsystem The target subsystem.
1:      */
1:     void stop(String symbolicName, String contentType, Subsystem subsystem);
1: 
1:     /**
1:      * Uninstall this custom content.
1:      * @param symbolicName The name of the content.
1:      * @param contentType The type of the content.
1:      * @param subsystem The target subsystem.
1:      */
1:     void uninstall(String symbolicName, String contentType, Subsystem subsystem);
1: }
============================================================================