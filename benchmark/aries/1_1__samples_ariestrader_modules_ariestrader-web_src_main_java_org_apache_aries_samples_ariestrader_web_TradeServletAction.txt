1:628add4: /**
1:628add4:  *  Licensed to4the Apache Software Foundation (ASF) under one
1:628add4:  *  or more contributor license agreements.  See the NOTICE file
1:628add4:  *  distributed with this work for additional information
1:628add4:  *  regarding copyright ownership. The ASF licenses this file to
1:628add4:  *  You under the Apache License, Version 2.0 (the "License");
1:628add4:  *  you may not use this file except in compliance with the
1:628add4:  *  License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.web;
3:628add4: 
1:628add4: import javax.servlet.*;
1:628add4: import javax.servlet.http.*;
1:628add4: 
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServices;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.*;
1:56a6860: import org.apache.aries.samples.ariestrader.util.*;
1:628add4: 
1:628add4: import java.io.IOException;
1:628add4: import java.util.Collection;
1:628add4: import java.util.Iterator;
1:628add4: import java.util.ArrayList;
1:628add4: import java.math.BigDecimal;
1:628add4: 
1:628add4: 
1:628add4: /**
1:628add4:  * TradeServletAction provides servlet specific client side access to each of
1:628add4:  * the Trade brokerage user operations. These include login, logout, buy, sell,
1:628add4:  * getQuote, etc. TradeServletAction manages a web interface to Trade handling
1:628add4:  * HttpRequests/HttpResponse objects and forwarding results to the appropriate
1:628add4:  * JSP page for the web interface. TradeServletAction invokes
1:628add4:  * {@link TradeServices} methods to actually perform each
1:628add4:  * trading operation.
1:628add4:  * 
1:628add4:  */
1:628add4: public class TradeServletAction {
1:628add4: 
1:628add4:     private TradeServices tradeServices = null;
1:628add4: 
1:628add4:     public TradeServletAction(TradeServices tradeServices) {
1:628add4:         this.tradeServices = tradeServices;
2:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Display User Profile information such as address, email, etc. for the
1:628add4:      * given Trader Dispatch to the Trade Account JSP for display
1:628add4:      * 
1:628add4:      * @param userID
1:628add4:      *            The User to display profile info
1:628add4:      * @param ctx
1:628add4:      *            the servlet context
1:628add4:      * @param req
1:628add4:      *            the HttpRequest object
1:628add4:      * @param resp
1:628add4:      *            the HttpResponse object
1:628add4:      * @param results
1:628add4:      *            A short description of the results/success of this web request
1:628add4:      *            provided on the web page
1:628add4:      * @exception javax.servlet.ServletException
1:628add4:      *                If a servlet specific exception is encountered
1:628add4:      * @exception javax.io.IOException
1:628add4:      *                If an exception occurs while writing results back to the
1:628add4:      *                user
1:628add4:      * 
1:628add4:      */
1:628add4:     void doAccount(ServletContext ctx, HttpServletRequest req,
1:628add4:             HttpServletResponse resp, String userID, String results)
1:628add4:             throws javax.servlet.ServletException, java.io.IOException {
1:628add4:         try {
1:628add4: 
1:628add4:             AccountDataBean accountData = tradeServices.getAccountData(userID);
1:628add4:             AccountProfileDataBean accountProfileData = tradeServices
1:628add4:                     .getAccountProfileData(userID);
1:628add4:             ArrayList orderDataBeans = (TradeConfig.getLongRun() ? new ArrayList() : (ArrayList) tradeServices.getOrders(userID));
1:628add4:             
1:628add4:             req.setAttribute("accountData", accountData);
1:628add4:             req.setAttribute("accountProfileData", accountProfileData);
1:628add4:             req.setAttribute("orderDataBeans", orderDataBeans);
1:628add4:             req.setAttribute("results", results);
1:628add4:             requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                     .getPage(TradeConfig.ACCOUNT_PAGE));
1:628add4:         } catch (java.lang.IllegalArgumentException e) { // this is a user
1:628add4:                                                             // error so I will
1:628add4:             // forward them to another page rather than throw a 500
1:628add4:             req.setAttribute("results", results
1:628add4:                     + "could not find account for userID = " + userID);
1:628add4:             requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                     .getPage(TradeConfig.HOME_PAGE));
1:628add4:             // log the exception with an error level of 3 which means, handled
1:628add4:             // exception but would invalidate a automation run
1:628add4:             Log.error("TradeServletAction.doAccount(...)",
2:628add4:                       "illegal argument, information should be in exception string",
1:628add4:                       e);
1:628add4:         } catch (Exception e) {
1:628add4:             // log the exception with error page
1:628add4:             throw new ServletException("TradeServletAction.doAccount(...)"
1:628add4:                     + " exception user =" + userID, e);
1:628add4:         }
1:628add4: 
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Update User Profile information such as address, email, etc. for the
1:628add4:      * given Trader Dispatch to the Trade Account JSP for display If any in put
1:628add4:      * is incorrect revert back to the account page w/ an appropriate message
1:628add4:      * 
1:628add4:      * @param userID
1:628add4:      *            The User to upddate profile info
1:628add4:      * @param password
1:628add4:      *            The new User password
1:628add4:      * @param cpassword
1:628add4:      *            Confirm password
1:628add4:      * @param fullname
1:628add4:      *            The new User fullname info
1:628add4:      * @param address
1:628add4:      *            The new User address info
1:628add4:      * @param cc
1:628add4:      *            The new User credit card info
1:628add4:      * @param email
1:628add4:      *            The new User email info
1:628add4:      * @param ctx
1:628add4:      *            the servlet context
1:628add4:      * @param req
1:628add4:      *            the HttpRequest object
1:628add4:      * @param resp
1:628add4:      *            the HttpResponse object
1:628add4:      * @exception javax.servlet.ServletException
1:628add4:      *                If a servlet specific exception is encountered
1:628add4:      * @exception javax.io.IOException
1:628add4:      *                If an exception occurs while writing results back to the
1:628add4:      *                user
1:628add4:      * 
1:628add4:      */
1:628add4:     void doAccountUpdate(ServletContext ctx, HttpServletRequest req,
1:628add4:             HttpServletResponse resp, String userID, String password,
1:628add4:             String cpassword, String fullName, String address,
1:628add4:             String creditcard, String email)
1:628add4:             throws javax.servlet.ServletException, java.io.IOException {
1:628add4:         String results = "";
1:628add4: 
1:628add4:         // First verify input data
1:628add4:         boolean doUpdate = true;
1:628add4:         if (password.equals(cpassword) == false) {
1:628add4:             results = "Update profile error: passwords do not match";
1:628add4:             doUpdate = false;
1:628add4:         } else if (password.length() <= 0 || fullName.length() <= 0
1:628add4:                 || address.length() <= 0 || creditcard.length() <= 0
1:628add4:                 || email.length() <= 0) {
1:628add4:             results = "Update profile error: please fill in all profile information fields";
1:628add4:             doUpdate = false;
1:628add4:         }
1:b8c0170: 
1:628add4:         try {
1:628add4:             if (doUpdate) {
1:628add4:                 tradeServices.updateAccountProfile(userID, password, fullName, address, email, creditcard);
1:628add4:                 results = "Account profile update successful";
1:628add4:             }
1:628add4: 
1:628add4:         } catch (java.lang.IllegalArgumentException e) { 
1:628add4:             // this is a user error so I will forward them to another page rather than throw a 500
1:628add4:             req.setAttribute("results",
1:628add4:                              results + "invalid argument, check userID is correct, and the database is populated" + userID);
1:628add4:             Log.error(e,
1:628add4:                       "TradeServletAction.doAccount(...)",
1:628add4:                       "illegal argument, information should be in exception string",
1:628add4:                       "treating this as a user error and forwarding on to a new page");
1:628add4:         } catch (Exception e) {
1:628add4:             // log the exception with error page
1:628add4:             throw new ServletException("TradeServletAction.doAccountUpdate(...)" + " exception user =" + userID, e);
1:628add4:         }
1:628add4:         doAccount(ctx, req, resp, userID, results);
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Buy a new holding of shares for the given trader Dispatch to the Trade
1:628add4:      * Portfolio JSP for display
1:628add4:      * 
1:628add4:      * @param userID
1:628add4:      *            The User buying shares
1:628add4:      * @param symbol
1:628add4:      *            The stock to purchase
1:628add4:      * @param amount
1:628add4:      *            The quantity of shares to purchase
1:628add4:      * @param ctx
1:628add4:      *            the servlet context
1:628add4:      * @param req
1:628add4:      *            the HttpRequest object
1:628add4:      * @param resp
1:628add4:      *            the HttpResponse object
1:628add4:      * @exception javax.servlet.ServletException
1:628add4:      *                If a servlet specific exception is encountered
1:628add4:      * @exception javax.io.IOException
1:628add4:      *                If an exception occurs while writing results back to the
1:628add4:      *                user
1:628add4:      * 
1:628add4:      */
1:628add4:     void doBuy(ServletContext ctx, HttpServletRequest req,
1:628add4:             HttpServletResponse resp, String userID, String symbol,
1:628add4:             String quantity) throws ServletException, IOException {
1:628add4: 
1:628add4:         String results = "";
1:628add4: 
1:628add4:         try {
1:628add4:             OrderDataBean orderData = tradeServices.buy(userID, symbol, new Double(
1:628add4:                     quantity).doubleValue(), TradeConfig.orderProcessingMode);
1:628add4: 
1:628add4:             req.setAttribute("orderData", orderData);
1:628add4:             req.setAttribute("results", results);
1:628add4:         } catch (java.lang.IllegalArgumentException e) { // this is a user
1:628add4:                                                             // error so I will
1:628add4:             // forward them to another page rather than throw a 500
1:628add4:             req.setAttribute("results", results + "illegal argument:");
1:628add4:             requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                     .getPage(TradeConfig.HOME_PAGE));
1:628add4:             // log the exception with an error level of 3 which means, handled
1:628add4:             // exception but would invalidate a automation run
1:628add4:             Log.error(e, "TradeServletAction.doBuy(...)",
1:628add4:                     "illegal argument. userID = " + userID, "symbol = "
1:628add4:                             + symbol);
1:628add4:         } catch (Exception e) {
1:628add4:             // log the exception with error page
1:628add4:             throw new ServletException("TradeServletAction.buy(...)"
1:628add4:                     + " exception buying stock " + symbol + " for user "
1:628add4:                     + userID, e);
1:628add4:         }
1:628add4:         requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                 .getPage(TradeConfig.ORDER_PAGE));
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Create the Trade Home page with personalized information such as the
1:628add4:      * traders account balance Dispatch to the Trade Home JSP for display
1:628add4:      * 
1:628add4:      * @param ctx
1:628add4:      *            the servlet context
1:628add4:      * @param req
1:628add4:      *            the HttpRequest object
1:628add4:      * @param resp
1:628add4:      *            the HttpResponse object
1:628add4:      * @param results
1:628add4:      *            A short description of the results/success of this web request
1:628add4:      *            provided on the web page
1:628add4:      * @exception javax.servlet.ServletException
1:628add4:      *                If a servlet specific exception is encountered
1:628add4:      * @exception javax.io.IOException
1:628add4:      *                If an exception occurs while writing results back to the
1:628add4:      *                user
1:628add4:      * 
1:628add4:      */
1:628add4:     void doHome(ServletContext ctx, HttpServletRequest req,
1:628add4:             HttpServletResponse resp, String userID, String results)
1:628add4:             throws javax.servlet.ServletException, java.io.IOException {
1:628add4:         
1:628add4:         try {
1:628add4:             AccountDataBean accountData = tradeServices.getAccountData(userID);
1:628add4:             Collection holdingDataBeans = tradeServices.getHoldings(userID);
1:628add4: 
1:628add4:             // Edge Caching:
1:628add4:             // Getting the MarketSummary has been moved to the JSP
1:628add4:             // MarketSummary.jsp. This makes the MarketSummary a
1:628add4:             // standalone "fragment", and thus is a candidate for
1:628add4:             // Edge caching.
1:628add4:             // marketSummaryData = tradeServices.getMarketSummary();
1:628add4: 
1:628add4:             req.setAttribute("accountData", accountData);
1:628add4:             req.setAttribute("holdingDataBeans", holdingDataBeans);
1:628add4:             // See Edge Caching above req.setAttribute("marketSummaryData", marketSummaryData);
1:628add4:             req.setAttribute("results", results);
1:628add4:         } catch (java.lang.IllegalArgumentException e) { 
1:628add4:             // this is a user error so I will forward them to another page rather than throw a 500
1:628add4:             req.setAttribute("results", results + "check userID = " + userID + " and that the database is populated");
1:628add4:             requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.HOME_PAGE));
1:628add4:             // log the exception with an error level of 3 which means, handled exception but would invalidate a automation run
1:628add4:             Log.error("TradeServletAction.doHome(...)"
1:628add4:                       + "illegal argument, information should be in exception string"
1:628add4:                       + "treating this as a user error and forwarding on to a new page",
1:628add4:                       e);
1:628add4:         } catch (Exception e) {
1:628add4:             throw new ServletException("TradeServletAction.doHome(...)" + " exception user =" + userID, e);
1:628add4:         }
1:628add4: 
1:628add4:         requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                 .getPage(TradeConfig.HOME_PAGE));
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Login a Trade User. Dispatch to the Trade Home JSP for display
1:628add4:      * 
1:628add4:      * @param userID
1:628add4:      *            The User to login
1:628add4:      * @param passwd
1:628add4:      *            The password supplied by the trader used to authenticate
1:628add4:      * @param ctx
1:628add4:      *            the servlet context
1:628add4:      * @param req
1:628add4:      *            the HttpRequest object
1:628add4:      * @param resp
1:628add4:      *            the HttpResponse object
1:628add4:      * @param results
1:628add4:      *            A short description of the results/success of this web request
1:628add4:      *            provided on the web page
1:628add4:      * @exception javax.servlet.ServletException
1:628add4:      *                If a servlet specific exception is encountered
1:628add4:      * @exception javax.io.IOException
1:628add4:      *                If an exception occurs while writing results back to the
1:628add4:      *                user
1:628add4:      * 
1:628add4:      */
1:628add4:     void doLogin(ServletContext ctx, HttpServletRequest req,
1:628add4:             HttpServletResponse resp, String userID, String passwd)
1:628add4:             throws javax.servlet.ServletException, java.io.IOException {
1:628add4: 
1:628add4:         String results = "";
1:628add4:         try {
1:628add4:             // Got a valid userID and passwd, attempt login
1:628add4: 
1:628add4:             AccountDataBean accountData = tradeServices.login(userID, passwd);
1:628add4: 
1:628add4:             if (accountData != null) {
1:628add4:                 HttpSession session = req.getSession(true);
1:628add4:                 session.setAttribute("uidBean", userID);
1:628add4:                 session.setAttribute("sessionCreationDate",
1:628add4:                         new java.util.Date());
1:628add4:                 results = "Ready to Trade";
1:628add4:                 doHome(ctx, req, resp, userID, results);
1:628add4:                 return;
1:628add4:             } else {
1:628add4:                 req.setAttribute("results", results
1:628add4:                         + "\nCould not find account for + " + userID);
1:628add4:                 // log the exception with an error level of 3 which means,
1:628add4:                 // handled exception but would invalidate a automation run
1:628add4:                 Log.log(
1:628add4:                                 "TradeServletAction.doLogin(...)",
1:628add4:                                 "Error finding account for user " + userID + "",
1:628add4:                                 "user entered a bad username or the database is not populated");
1:628add4:             }
1:628add4:         } catch (java.lang.IllegalArgumentException e) { // this is a user
1:628add4:                                                             // error so I will
1:628add4:             // forward them to another page rather than throw a 500
1:628add4:             req.setAttribute("results", results + "illegal argument:"
1:628add4:                     + e.getMessage());
1:628add4:             // log the exception with an error level of 3 which means, handled
1:628add4:             // exception but would invalidate a automation run
3:628add4:             Log
3:628add4:                     .error(
2:628add4:                             e,
1:628add4:                             "TradeServletAction.doLogin(...)",
1:628add4:                             "illegal argument, information should be in exception string",
1:628add4:                             "treating this as a user error and forwarding on to a new page");
1:628add4: 
1:628add4:         } catch (Exception e) {
1:628add4:             // log the exception with error page
1:628add4:             throw new ServletException("TradeServletAction.doLogin(...)"
1:628add4:                     + "Exception logging in user " + userID + "with password"
1:628add4:                     + passwd, e);
1:628add4:         }
1:628add4: 
1:628add4:         requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                 .getPage(TradeConfig.WELCOME_PAGE));
1:628add4: 
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Logout a Trade User Dispatch to the Trade Welcome JSP for display
1:628add4:      * 
1:628add4:      * @param userID
1:628add4:      *            The User to logout
1:628add4:      * @param ctx
1:628add4:      *            the servlet context
1:628add4:      * @param req
1:628add4:      *            the HttpRequest object
1:628add4:      * @param resp
1:628add4:      *            the HttpResponse object
1:628add4:      * @param results
1:628add4:      *            A short description of the results/success of this web request
1:628add4:      *            provided on the web page
1:628add4:      * @exception javax.servlet.ServletException
1:628add4:      *                If a servlet specific exception is encountered
1:628add4:      * @exception javax.io.IOException
1:628add4:      *                If an exception occurs while writing results back to the
1:628add4:      *                user
1:628add4:      * 
1:628add4:      */
1:628add4:     void doLogout(ServletContext ctx, HttpServletRequest req,
1:628add4:             HttpServletResponse resp, String userID) throws ServletException,
1:628add4:             IOException {
1:628add4:         String results = "";
1:628add4: 
1:628add4:         try {
1:628add4:             tradeServices.logout(userID);
1:628add4: 
1:628add4:         } catch (java.lang.IllegalArgumentException e) { // this is a user
1:628add4:                                                             // error so I will
1:628add4:             // forward them to another page, at the end of the page.
1:628add4:             req.setAttribute("results", results + "illegal argument:"
1:628add4:                     + e.getMessage());
1:628add4: 
1:628add4:             // log the exception with an error level of 3 which means, handled
1:628add4:             // exception but would invalidate a automation run
1:628add4:             Log
1:628add4:                     .error(
1:628add4:                             e,
1:628add4:                             "TradeServletAction.doLogout(...)",
1:628add4:                             "illegal argument, information should be in exception string",
1:628add4:                             "treating this as a user error and forwarding on to a new page");
1:628add4:         } catch (Exception e) {
1:b8c0170:             // log the exception and forward to a error page
1:628add4:             Log.error(e, "TradeServletAction.doLogout(...):",
1:628add4:                     "Error logging out" + userID, "fowarding to an error page");
1:628add4:             // set the status_code to 500
1:628add4:             throw new ServletException("TradeServletAction.doLogout(...)"
1:628add4:                     + "exception logging out user " + userID, e);
1:628add4:         }
1:628add4:         HttpSession session = req.getSession();
1:628add4:         if (session != null) {
1:628add4:             session.invalidate();
1:628add4:         }
1:628add4: 
1:628add4:         Object o = req.getAttribute("TSS-RecreateSessionInLogout");
1:628add4:         if (o != null && ((Boolean) o).equals(Boolean.TRUE)) {
1:628add4:             // Recreate Session object before writing output to the response
1:628add4:             // Once the response headers are written back to the client the
1:628add4:             // opportunity
1:628add4:             // to create a new session in this request may be lost
1:628add4:             // This is to handle only the TradeScenarioServlet case
1:628add4:             session = req.getSession(true);
1:628add4:         }
1:628add4:         requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                 .getPage(TradeConfig.WELCOME_PAGE));
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Retrieve the current portfolio of stock holdings for the given trader
1:628add4:      * Dispatch to the Trade Portfolio JSP for display
1:628add4:      * 
1:628add4:      * @param userID
1:628add4:      *            The User requesting to view their portfolio
1:628add4:      * @param ctx
1:628add4:      *            the servlet context
1:628add4:      * @param req
1:628add4:      *            the HttpRequest object
1:628add4:      * @param resp
1:628add4:      *            the HttpResponse object
1:628add4:      * @param results
1:628add4:      *            A short description of the results/success of this web request
1:628add4:      *            provided on the web page
1:628add4:      * @exception javax.servlet.ServletException
1:628add4:      *                If a servlet specific exception is encountered
1:628add4:      * @exception javax.io.IOException
1:628add4:      *                If an exception occurs while writing results back to the
1:628add4:      *                user
1:628add4:      * 
1:628add4:      */
1:628add4:     void doPortfolio(ServletContext ctx, HttpServletRequest req,
1:628add4:             HttpServletResponse resp, String userID, String results)
2:628add4:             throws ServletException, IOException {
1:628add4: 
1:628add4:         try {
1:b8c0170:             // Get the holdings for this user
1:628add4: 
1:628add4:             Collection quoteDataBeans = new ArrayList();
1:628add4:             Collection holdingDataBeans = tradeServices.getHoldings(userID);
1:628add4: 
1:628add4:             // Walk through the collection of user
1:628add4:             // holdings and creating a list of quotes
1:628add4:             if (holdingDataBeans.size() > 0) {
1:628add4: 
1:628add4:                 Iterator it = holdingDataBeans.iterator();
1:628add4:                 while (it.hasNext()) {
1:628add4:                     HoldingDataBean holdingData = (HoldingDataBean) it.next();
1:628add4:                     QuoteDataBean quoteData = tradeServices.getQuote(holdingData
1:628add4:                             .getQuoteID());
1:628add4:                     quoteDataBeans.add(quoteData);
1:628add4:                 }
1:628add4:             } else {
1:628add4:                 results = results + ".  Your portfolio is empty.";
1:628add4:             }
1:628add4:             req.setAttribute("results", results);
1:628add4:             req.setAttribute("holdingDataBeans", holdingDataBeans);
1:628add4:             req.setAttribute("quoteDataBeans", quoteDataBeans);
1:628add4:             requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                     .getPage(TradeConfig.PORTFOLIO_PAGE));
1:628add4:         } catch (java.lang.IllegalArgumentException e) { // this is a user
1:628add4:                                                             // error so I will
1:628add4:             // forward them to another page rather than throw a 500
1:628add4:             req.setAttribute("results", results + "illegal argument:"
1:628add4:                     + e.getMessage());
1:628add4:             requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                     .getPage(TradeConfig.PORTFOLIO_PAGE));
1:628add4:             // log the exception with an error level of 3 which means, handled
1:628add4:             // exception but would invalidate a automation run
1:b8c0170:             Log.error(
1:628add4:                             e,
1:628add4:                             "TradeServletAction.doPortfolio(...)",
1:628add4:                             "illegal argument, information should be in exception string",
2:628add4:                             "user error");
1:628add4:         } catch (Exception e) {
1:628add4:             // log the exception with error page
1:628add4:             throw new ServletException("TradeServletAction.doPortfolio(...)"
1:628add4:                     + " exception user =" + userID, e);
1:628add4:         }
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Retrieve the current Quote for the given stock symbol Dispatch to the
1:628add4:      * Trade Quote JSP for display
1:628add4:      * 
1:628add4:      * @param userID
1:628add4:      *            The stock symbol used to get the current quote
1:628add4:      * @param ctx
1:628add4:      *            the servlet context
1:628add4:      * @param req
1:628add4:      *            the HttpRequest object
1:628add4:      * @param resp
1:628add4:      *            the HttpResponse object
1:628add4:      * @exception javax.servlet.ServletException
1:628add4:      *                If a servlet specific exception is encountered
1:628add4:      * @exception javax.io.IOException
1:628add4:      *                If an exception occurs while writing results back to the
1:628add4:      *                user
1:628add4:      * 
1:628add4:      */
1:628add4:     void doQuotes(ServletContext ctx, HttpServletRequest req,
1:628add4:             HttpServletResponse resp, String userID, String symbols)
1:628add4:             throws ServletException, IOException {
1:628add4:         String results = "";
1:628add4: 
1:628add4:         // Edge Caching:
1:628add4:         // Getting Quotes has been moved to the JSP
1:628add4:         // Quote.jsp. This makes each Quote a
1:628add4:         // standalone "fragment", and thus is a candidate for
1:628add4:         // Edge caching.
1:628add4:         //			
1:628add4: 
1:628add4:         requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                 .getPage(TradeConfig.QUOTE_PAGE));
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Register a new trader given the provided user Profile information such as
1:628add4:      * address, email, etc. Dispatch to the Trade Home JSP for display
1:628add4:      * 
1:628add4:      * @param userID
1:628add4:      *            The User to create
1:628add4:      * @param passwd
1:628add4:      *            The User password
1:628add4:      * @param fullname
1:628add4:      *            The new User fullname info
1:628add4:      * @param ccn
1:628add4:      *            The new User credit card info
1:628add4:      * @param money
1:628add4:      *            The new User opening account balance
1:628add4:      * @param address
1:628add4:      *            The new User address info
1:628add4:      * @param email
1:628add4:      *            The new User email info
1:628add4:      * @return The userID of the new trader
1:628add4:      * @param ctx
1:628add4:      *            the servlet context
1:628add4:      * @param req
1:628add4:      *            the HttpRequest object
1:628add4:      * @param resp
1:628add4:      *            the HttpResponse object
1:628add4:      * @exception javax.servlet.ServletException
1:628add4:      *                If a servlet specific exception is encountered
1:628add4:      * @exception javax.io.IOException
1:628add4:      *                If an exception occurs while writing results back to the
1:628add4:      *                user
1:628add4:      * 
1:628add4:      */
1:628add4:     void doRegister(ServletContext ctx, HttpServletRequest req,
1:628add4:             HttpServletResponse resp, String userID, String passwd,
1:628add4:             String cpasswd, String fullname, String ccn,
1:628add4:             String openBalanceString, String email, String address)
1:628add4:             throws ServletException, IOException {
1:628add4:         String results = "";
1:628add4: 
1:628add4:         try {
1:628add4:             // Validate user passwords match and are atleast 1 char in length
1:628add4:             if ((passwd.equals(cpasswd)) && (passwd.length() >= 1)) {
1:628add4: 
1:628add4:                 AccountDataBean accountData = tradeServices.register(userID, passwd,
1:628add4:                         fullname, address, email, ccn, new BigDecimal(
1:628add4:                                 openBalanceString));
1:628add4:                 if (accountData == null) {
1:628add4:                     results = "Registration operation failed;";
1:628add4:                     System.out.println(results);
1:628add4:                     req.setAttribute("results", results);
1:628add4:                     requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                             .getPage(TradeConfig.REGISTER_PAGE));
1:628add4:                 } else {
1:628add4:                     doLogin(ctx, req, resp, userID, passwd);
1:628add4:                     results = "Registration operation succeeded;  Account "
1:628add4:                             + accountData.getAccountID() + " has been created.";
1:628add4:                     req.setAttribute("results", results);
1:628add4: 
1:628add4:                 }
1:628add4:             } else {
1:628add4:                 // Password validation failed
1:628add4:                 results = "Registration operation failed, your passwords did not match";
1:628add4:                 System.out.println(results);
1:628add4:                 req.setAttribute("results", results);
1:628add4:                 requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                         .getPage(TradeConfig.REGISTER_PAGE));
1:628add4:             }
1:628add4: 
1:628add4:         } catch (Exception e) {
1:628add4:             // log the exception with error page
1:628add4:             throw new ServletException("TradeServletAction.doRegister(...)"
1:628add4:                     + " exception user =" + userID, e);
1:628add4:         }
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Sell a current holding of stock shares for the given trader. Dispatch to
1:628add4:      * the Trade Portfolio JSP for display
1:628add4:      * 
1:628add4:      * @param userID
1:628add4:      *            The User buying shares
1:628add4:      * @param symbol
1:628add4:      *            The stock to sell
1:628add4:      * @param indx
1:628add4:      *            The unique index identifying the users holding to sell
1:628add4:      * @param ctx
1:628add4:      *            the servlet context
1:628add4:      * @param req
1:628add4:      *            the HttpRequest object
1:628add4:      * @param resp
1:628add4:      *            the HttpResponse object
1:628add4:      * @exception javax.servlet.ServletException
1:628add4:      *                If a servlet specific exception is encountered
1:628add4:      * @exception javax.io.IOException
1:628add4:      *                If an exception occurs while writing results back to the
1:628add4:      *                user
1:628add4:      * 
1:628add4:      */
1:628add4:     void doSell(ServletContext ctx, HttpServletRequest req,
1:628add4:             HttpServletResponse resp, String userID, Integer holdingID)
1:628add4:             throws ServletException, IOException {
1:628add4:         String results = "";
1:628add4:         try {
1:628add4:             OrderDataBean orderData = tradeServices.sell(userID, holdingID,
1:628add4:                     TradeConfig.orderProcessingMode);
1:628add4: 
1:628add4:             req.setAttribute("orderData", orderData);
1:628add4:             req.setAttribute("results", results);
1:628add4:         } catch (java.lang.IllegalArgumentException e) { // this is a user
1:628add4:                                                             // error so I will
1:628add4:             // just log the exception and then later on I will redisplay the
1:628add4:             // portfolio page
1:628add4:             // because this is just a user exception
1:b8c0170:             Log.error(e,
1:b8c0170:                       "TradeServletAction.doSell(...)",
1:b8c0170:                       "illegal argument, information should be in exception string",
1:b8c0170:                       "user error");
1:628add4:         } catch (Exception e) {
1:628add4:             // log the exception with error page
1:628add4:             throw new ServletException("TradeServletAction.doSell(...)"
1:628add4:                     + " exception selling holding " + holdingID + " for user ="
1:628add4:                     + userID, e);
1:628add4:         }
1:628add4:         requestDispatch(ctx, req, resp, userID, TradeConfig
1:628add4:                 .getPage(TradeConfig.ORDER_PAGE));
1:628add4:     }
1:628add4: 
1:628add4:     void doWelcome(ServletContext ctx, HttpServletRequest req,
1:628add4:             HttpServletResponse resp, String status) throws ServletException,
1:628add4:             IOException {
1:628add4: 
1:628add4:         req.setAttribute("results", status);
1:628add4:         requestDispatch(ctx, req, resp, null, TradeConfig
1:628add4:                 .getPage(TradeConfig.WELCOME_PAGE));
1:628add4:     }
1:628add4: 
1:628add4:     private void requestDispatch(ServletContext ctx, HttpServletRequest req,
1:628add4:             HttpServletResponse resp, String userID, String page)
1:628add4:             throws ServletException, IOException {
1:628add4: 
1:628add4:         ctx.getRequestDispatcher(page).include(req, resp);
1:628add4:     }
1:628add4: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             // log the exception and forward to a error page
/////////////////////////////////////////////////////////////////////////
1:             // Get the holdings for this user
/////////////////////////////////////////////////////////////////////////
1:             Log.error(
/////////////////////////////////////////////////////////////////////////
1:             Log.error(e,
1:                       "TradeServletAction.doSell(...)",
1:                       "illegal argument, information should be in exception string",
1:                       "user error");
/////////////////////////////////////////////////////////////////////////
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.*;
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.web;
0: import org.apache.aries.samples.ariestrader.api.TradeServiceUtilities;
1: import org.apache.aries.samples.ariestrader.api.TradeServices;
0: import org.apache.aries.samples.ariestrader.persistence.api.*;
1: import org.apache.aries.samples.ariestrader.util.*;
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.web;
0: import org.apache.aries.samples.daytrader.api.TradeServiceUtilities;
0: import org.apache.aries.samples.daytrader.api.TradeServices;
0: import org.apache.aries.samples.daytrader.persistence.api.*;
0: import org.apache.aries.samples.daytrader.util.*;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to4the Apache Software Foundation (ASF) under one
1:  *  or more contributor license agreements.  See the NOTICE file
1:  *  distributed with this work for additional information
1:  *  regarding copyright ownership. The ASF licenses this file to
1:  *  You under the Apache License, Version 2.0 (the "License");
1:  *  you may not use this file except in compliance with the
1:  *  License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.web;
1: 
0: import javax.naming.InitialContext;
0: import javax.naming.NamingException;
1: import javax.servlet.*;
1: import javax.servlet.http.*;
1: 
0: import org.apache.geronimo.samples.daytrader.api.TradeServiceUtilities;
0: import org.apache.geronimo.samples.daytrader.api.TradeServices;
0: import org.apache.geronimo.samples.daytrader.persistence.api.*;
0: import org.apache.geronimo.samples.daytrader.util.*;
1: 
1: import java.io.IOException;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.ArrayList;
1: import java.math.BigDecimal;
1: 
1: 
1: /**
1:  * TradeServletAction provides servlet specific client side access to each of
1:  * the Trade brokerage user operations. These include login, logout, buy, sell,
1:  * getQuote, etc. TradeServletAction manages a web interface to Trade handling
1:  * HttpRequests/HttpResponse objects and forwarding results to the appropriate
1:  * JSP page for the web interface. TradeServletAction invokes
1:  * {@link TradeServices} methods to actually perform each
1:  * trading operation.
1:  * 
1:  */
1: public class TradeServletAction {
1: 
1:     private TradeServices tradeServices = null;
1: 
1:     public TradeServletAction(TradeServices tradeServices) {
1:         this.tradeServices = tradeServices;
1:     }
1: 
1:     /**
1:      * Display User Profile information such as address, email, etc. for the
1:      * given Trader Dispatch to the Trade Account JSP for display
1:      * 
1:      * @param userID
1:      *            The User to display profile info
1:      * @param ctx
1:      *            the servlet context
1:      * @param req
1:      *            the HttpRequest object
1:      * @param resp
1:      *            the HttpResponse object
1:      * @param results
1:      *            A short description of the results/success of this web request
1:      *            provided on the web page
1:      * @exception javax.servlet.ServletException
1:      *                If a servlet specific exception is encountered
1:      * @exception javax.io.IOException
1:      *                If an exception occurs while writing results back to the
1:      *                user
1:      * 
1:      */
1:     void doAccount(ServletContext ctx, HttpServletRequest req,
1:             HttpServletResponse resp, String userID, String results)
1:             throws javax.servlet.ServletException, java.io.IOException {
1:         try {
1: 
1:             AccountDataBean accountData = tradeServices.getAccountData(userID);
1:             AccountProfileDataBean accountProfileData = tradeServices
1:                     .getAccountProfileData(userID);
1:             ArrayList orderDataBeans = (TradeConfig.getLongRun() ? new ArrayList() : (ArrayList) tradeServices.getOrders(userID));
1:             
1:             req.setAttribute("accountData", accountData);
1:             req.setAttribute("accountProfileData", accountProfileData);
1:             req.setAttribute("orderDataBeans", orderDataBeans);
1:             req.setAttribute("results", results);
1:             requestDispatch(ctx, req, resp, userID, TradeConfig
1:                     .getPage(TradeConfig.ACCOUNT_PAGE));
1:         } catch (java.lang.IllegalArgumentException e) { // this is a user
1:                                                             // error so I will
1:             // forward them to another page rather than throw a 500
1:             req.setAttribute("results", results
1:                     + "could not find account for userID = " + userID);
1:             requestDispatch(ctx, req, resp, userID, TradeConfig
1:                     .getPage(TradeConfig.HOME_PAGE));
1:             // log the exception with an error level of 3 which means, handled
1:             // exception but would invalidate a automation run
1:             Log.error("TradeServletAction.doAccount(...)",
1:                       "illegal argument, information should be in exception string",
1:                       e);
1:         } catch (Exception e) {
1:             // log the exception with error page
1:             throw new ServletException("TradeServletAction.doAccount(...)"
1:                     + " exception user =" + userID, e);
1:         }
1: 
1:     }
1: 
1:     /**
1:      * Update User Profile information such as address, email, etc. for the
1:      * given Trader Dispatch to the Trade Account JSP for display If any in put
1:      * is incorrect revert back to the account page w/ an appropriate message
1:      * 
1:      * @param userID
1:      *            The User to upddate profile info
1:      * @param password
1:      *            The new User password
1:      * @param cpassword
1:      *            Confirm password
1:      * @param fullname
1:      *            The new User fullname info
1:      * @param address
1:      *            The new User address info
1:      * @param cc
1:      *            The new User credit card info
1:      * @param email
1:      *            The new User email info
1:      * @param ctx
1:      *            the servlet context
1:      * @param req
1:      *            the HttpRequest object
1:      * @param resp
1:      *            the HttpResponse object
1:      * @exception javax.servlet.ServletException
1:      *                If a servlet specific exception is encountered
1:      * @exception javax.io.IOException
1:      *                If an exception occurs while writing results back to the
1:      *                user
1:      * 
1:      */
1:     void doAccountUpdate(ServletContext ctx, HttpServletRequest req,
1:             HttpServletResponse resp, String userID, String password,
1:             String cpassword, String fullName, String address,
1:             String creditcard, String email)
1:             throws javax.servlet.ServletException, java.io.IOException {
1:         String results = "";
1: 
1:         // First verify input data
1:         boolean doUpdate = true;
1:         if (password.equals(cpassword) == false) {
1:             results = "Update profile error: passwords do not match";
1:             doUpdate = false;
1:         } else if (password.length() <= 0 || fullName.length() <= 0
1:                 || address.length() <= 0 || creditcard.length() <= 0
1:                 || email.length() <= 0) {
1:             results = "Update profile error: please fill in all profile information fields";
1:             doUpdate = false;
1:         }
0: //        AccountProfileDataBean accountProfileData = new AccountProfileDataBean(
0: //                userID, password, fullName, address, email, creditcard);
1:         try {
1:             if (doUpdate) {
1:                 tradeServices.updateAccountProfile(userID, password, fullName, address, email, creditcard);
1:                 results = "Account profile update successful";
1:             }
1: 
1:         } catch (java.lang.IllegalArgumentException e) { 
1:             // this is a user error so I will forward them to another page rather than throw a 500
1:             req.setAttribute("results",
1:                              results + "invalid argument, check userID is correct, and the database is populated" + userID);
1:             Log.error(e,
1:                       "TradeServletAction.doAccount(...)",
1:                       "illegal argument, information should be in exception string",
1:                       "treating this as a user error and forwarding on to a new page");
1:         } catch (Exception e) {
1:             // log the exception with error page
1:             throw new ServletException("TradeServletAction.doAccountUpdate(...)" + " exception user =" + userID, e);
1:         }
1:         doAccount(ctx, req, resp, userID, results);
1:     }
1: 
1:     /**
1:      * Buy a new holding of shares for the given trader Dispatch to the Trade
1:      * Portfolio JSP for display
1:      * 
1:      * @param userID
1:      *            The User buying shares
1:      * @param symbol
1:      *            The stock to purchase
1:      * @param amount
1:      *            The quantity of shares to purchase
1:      * @param ctx
1:      *            the servlet context
1:      * @param req
1:      *            the HttpRequest object
1:      * @param resp
1:      *            the HttpResponse object
1:      * @exception javax.servlet.ServletException
1:      *                If a servlet specific exception is encountered
1:      * @exception javax.io.IOException
1:      *                If an exception occurs while writing results back to the
1:      *                user
1:      * 
1:      */
1:     void doBuy(ServletContext ctx, HttpServletRequest req,
1:             HttpServletResponse resp, String userID, String symbol,
1:             String quantity) throws ServletException, IOException {
1: 
1:         String results = "";
1: 
1:         try {
1:             OrderDataBean orderData = tradeServices.buy(userID, symbol, new Double(
1:                     quantity).doubleValue(), TradeConfig.orderProcessingMode);
1: 
1:             req.setAttribute("orderData", orderData);
1:             req.setAttribute("results", results);
1:         } catch (java.lang.IllegalArgumentException e) { // this is a user
1:                                                             // error so I will
1:             // forward them to another page rather than throw a 500
1:             req.setAttribute("results", results + "illegal argument:");
1:             requestDispatch(ctx, req, resp, userID, TradeConfig
1:                     .getPage(TradeConfig.HOME_PAGE));
1:             // log the exception with an error level of 3 which means, handled
1:             // exception but would invalidate a automation run
1:             Log.error(e, "TradeServletAction.doBuy(...)",
1:                     "illegal argument. userID = " + userID, "symbol = "
1:                             + symbol);
1:         } catch (Exception e) {
1:             // log the exception with error page
1:             throw new ServletException("TradeServletAction.buy(...)"
1:                     + " exception buying stock " + symbol + " for user "
1:                     + userID, e);
1:         }
1:         requestDispatch(ctx, req, resp, userID, TradeConfig
1:                 .getPage(TradeConfig.ORDER_PAGE));
1:     }
1: 
1:     /**
1:      * Create the Trade Home page with personalized information such as the
1:      * traders account balance Dispatch to the Trade Home JSP for display
1:      * 
1:      * @param ctx
1:      *            the servlet context
1:      * @param req
1:      *            the HttpRequest object
1:      * @param resp
1:      *            the HttpResponse object
1:      * @param results
1:      *            A short description of the results/success of this web request
1:      *            provided on the web page
1:      * @exception javax.servlet.ServletException
1:      *                If a servlet specific exception is encountered
1:      * @exception javax.io.IOException
1:      *                If an exception occurs while writing results back to the
1:      *                user
1:      * 
1:      */
1:     void doHome(ServletContext ctx, HttpServletRequest req,
1:             HttpServletResponse resp, String userID, String results)
1:             throws javax.servlet.ServletException, java.io.IOException {
1:         
0:         BigDecimal balance;
0:         String result = "";
1:         
1:         try {
1:             AccountDataBean accountData = tradeServices.getAccountData(userID);
1:             Collection holdingDataBeans = tradeServices.getHoldings(userID);
1: 
1:             // Edge Caching:
1:             // Getting the MarketSummary has been moved to the JSP
1:             // MarketSummary.jsp. This makes the MarketSummary a
1:             // standalone "fragment", and thus is a candidate for
1:             // Edge caching.
1:             // marketSummaryData = tradeServices.getMarketSummary();
1: 
1:             req.setAttribute("accountData", accountData);
1:             req.setAttribute("holdingDataBeans", holdingDataBeans);
1:             // See Edge Caching above req.setAttribute("marketSummaryData", marketSummaryData);
1:             req.setAttribute("results", results);
1:         } catch (java.lang.IllegalArgumentException e) { 
1:             // this is a user error so I will forward them to another page rather than throw a 500
1:             req.setAttribute("results", results + "check userID = " + userID + " and that the database is populated");
1:             requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.HOME_PAGE));
1:             // log the exception with an error level of 3 which means, handled exception but would invalidate a automation run
1:             Log.error("TradeServletAction.doHome(...)"
1:                       + "illegal argument, information should be in exception string"
1:                       + "treating this as a user error and forwarding on to a new page",
1:                       e);
1:         } catch (Exception e) {
0:             boolean javaee = false;
1:             throw new ServletException("TradeServletAction.doHome(...)" + " exception user =" + userID, e);
1:         }
1: 
1:         requestDispatch(ctx, req, resp, userID, TradeConfig
1:                 .getPage(TradeConfig.HOME_PAGE));
1:     }
1: 
1:     /**
1:      * Login a Trade User. Dispatch to the Trade Home JSP for display
1:      * 
1:      * @param userID
1:      *            The User to login
1:      * @param passwd
1:      *            The password supplied by the trader used to authenticate
1:      * @param ctx
1:      *            the servlet context
1:      * @param req
1:      *            the HttpRequest object
1:      * @param resp
1:      *            the HttpResponse object
1:      * @param results
1:      *            A short description of the results/success of this web request
1:      *            provided on the web page
1:      * @exception javax.servlet.ServletException
1:      *                If a servlet specific exception is encountered
1:      * @exception javax.io.IOException
1:      *                If an exception occurs while writing results back to the
1:      *                user
1:      * 
1:      */
1:     void doLogin(ServletContext ctx, HttpServletRequest req,
1:             HttpServletResponse resp, String userID, String passwd)
1:             throws javax.servlet.ServletException, java.io.IOException {
1: 
1:         String results = "";
1:         try {
1:             // Got a valid userID and passwd, attempt login
1: 
1:             AccountDataBean accountData = tradeServices.login(userID, passwd);
1: 
1:             if (accountData != null) {
1:                 HttpSession session = req.getSession(true);
1:                 session.setAttribute("uidBean", userID);
1:                 session.setAttribute("sessionCreationDate",
1:                         new java.util.Date());
1:                 results = "Ready to Trade";
1:                 doHome(ctx, req, resp, userID, results);
1:                 return;
1:             } else {
1:                 req.setAttribute("results", results
1:                         + "\nCould not find account for + " + userID);
1:                 // log the exception with an error level of 3 which means,
1:                 // handled exception but would invalidate a automation run
1:                 Log.log(
1:                                 "TradeServletAction.doLogin(...)",
1:                                 "Error finding account for user " + userID + "",
1:                                 "user entered a bad username or the database is not populated");
1:             }
1:         } catch (java.lang.IllegalArgumentException e) { // this is a user
1:                                                             // error so I will
1:             // forward them to another page rather than throw a 500
1:             req.setAttribute("results", results + "illegal argument:"
1:                     + e.getMessage());
1:             // log the exception with an error level of 3 which means, handled
1:             // exception but would invalidate a automation run
1:             Log
1:                     .error(
1:                             e,
1:                             "TradeServletAction.doLogin(...)",
1:                             "illegal argument, information should be in exception string",
1:                             "treating this as a user error and forwarding on to a new page");
1: 
1:         } catch (Exception e) {
1:             // log the exception with error page
1:             throw new ServletException("TradeServletAction.doLogin(...)"
1:                     + "Exception logging in user " + userID + "with password"
1:                     + passwd, e);
1:         }
1: 
1:         requestDispatch(ctx, req, resp, userID, TradeConfig
1:                 .getPage(TradeConfig.WELCOME_PAGE));
1: 
1:     }
1: 
1:     /**
1:      * Logout a Trade User Dispatch to the Trade Welcome JSP for display
1:      * 
1:      * @param userID
1:      *            The User to logout
1:      * @param ctx
1:      *            the servlet context
1:      * @param req
1:      *            the HttpRequest object
1:      * @param resp
1:      *            the HttpResponse object
1:      * @param results
1:      *            A short description of the results/success of this web request
1:      *            provided on the web page
1:      * @exception javax.servlet.ServletException
1:      *                If a servlet specific exception is encountered
1:      * @exception javax.io.IOException
1:      *                If an exception occurs while writing results back to the
1:      *                user
1:      * 
1:      */
1:     void doLogout(ServletContext ctx, HttpServletRequest req,
1:             HttpServletResponse resp, String userID) throws ServletException,
1:             IOException {
1:         String results = "";
1: 
1:         try {
1:             tradeServices.logout(userID);
1: 
1:         } catch (java.lang.IllegalArgumentException e) { // this is a user
1:                                                             // error so I will
1:             // forward them to another page, at the end of the page.
1:             req.setAttribute("results", results + "illegal argument:"
1:                     + e.getMessage());
1: 
1:             // log the exception with an error level of 3 which means, handled
1:             // exception but would invalidate a automation run
1:             Log
1:                     .error(
1:                             e,
1:                             "TradeServletAction.doLogout(...)",
1:                             "illegal argument, information should be in exception string",
1:                             "treating this as a user error and forwarding on to a new page");
1:         } catch (Exception e) {
0:             // log the exception and foward to a error page
1:             Log.error(e, "TradeServletAction.doLogout(...):",
1:                     "Error logging out" + userID, "fowarding to an error page");
1:             // set the status_code to 500
1:             throw new ServletException("TradeServletAction.doLogout(...)"
1:                     + "exception logging out user " + userID, e);
1:         }
1:         HttpSession session = req.getSession();
1:         if (session != null) {
1:             session.invalidate();
1:         }
1: 
1:         Object o = req.getAttribute("TSS-RecreateSessionInLogout");
1:         if (o != null && ((Boolean) o).equals(Boolean.TRUE)) {
1:             // Recreate Session object before writing output to the response
1:             // Once the response headers are written back to the client the
1:             // opportunity
1:             // to create a new session in this request may be lost
1:             // This is to handle only the TradeScenarioServlet case
1:             session = req.getSession(true);
1:         }
1:         requestDispatch(ctx, req, resp, userID, TradeConfig
1:                 .getPage(TradeConfig.WELCOME_PAGE));
1:     }
1: 
1:     /**
1:      * Retrieve the current portfolio of stock holdings for the given trader
1:      * Dispatch to the Trade Portfolio JSP for display
1:      * 
1:      * @param userID
1:      *            The User requesting to view their portfolio
1:      * @param ctx
1:      *            the servlet context
1:      * @param req
1:      *            the HttpRequest object
1:      * @param resp
1:      *            the HttpResponse object
1:      * @param results
1:      *            A short description of the results/success of this web request
1:      *            provided on the web page
1:      * @exception javax.servlet.ServletException
1:      *                If a servlet specific exception is encountered
1:      * @exception javax.io.IOException
1:      *                If an exception occurs while writing results back to the
1:      *                user
1:      * 
1:      */
1:     void doPortfolio(ServletContext ctx, HttpServletRequest req,
1:             HttpServletResponse resp, String userID, String results)
1:             throws ServletException, IOException {
1: 
1:         try {
0:             // Get the holdiings for this user
1: 
1:             Collection quoteDataBeans = new ArrayList();
1:             Collection holdingDataBeans = tradeServices.getHoldings(userID);
1: 
1:             // Walk through the collection of user
1:             // holdings and creating a list of quotes
1:             if (holdingDataBeans.size() > 0) {
1: 
1:                 Iterator it = holdingDataBeans.iterator();
1:                 while (it.hasNext()) {
1:                     HoldingDataBean holdingData = (HoldingDataBean) it.next();
1:                     QuoteDataBean quoteData = tradeServices.getQuote(holdingData
1:                             .getQuoteID());
1:                     quoteDataBeans.add(quoteData);
1:                 }
1:             } else {
1:                 results = results + ".  Your portfolio is empty.";
1:             }
1:             req.setAttribute("results", results);
1:             req.setAttribute("holdingDataBeans", holdingDataBeans);
1:             req.setAttribute("quoteDataBeans", quoteDataBeans);
1:             requestDispatch(ctx, req, resp, userID, TradeConfig
1:                     .getPage(TradeConfig.PORTFOLIO_PAGE));
1:         } catch (java.lang.IllegalArgumentException e) { // this is a user
1:                                                             // error so I will
1:             // forward them to another page rather than throw a 500
1:             req.setAttribute("results", results + "illegal argument:"
1:                     + e.getMessage());
1:             requestDispatch(ctx, req, resp, userID, TradeConfig
1:                     .getPage(TradeConfig.PORTFOLIO_PAGE));
1:             // log the exception with an error level of 3 which means, handled
1:             // exception but would invalidate a automation run
1:             Log
1:                     .error(
1:                             e,
1:                             "TradeServletAction.doPortfolio(...)",
1:                             "illegal argument, information should be in exception string",
1:                             "user error");
1:         } catch (Exception e) {
1:             // log the exception with error page
1:             throw new ServletException("TradeServletAction.doPortfolio(...)"
1:                     + " exception user =" + userID, e);
1:         }
1:     }
1: 
1:     /**
1:      * Retrieve the current Quote for the given stock symbol Dispatch to the
1:      * Trade Quote JSP for display
1:      * 
1:      * @param userID
1:      *            The stock symbol used to get the current quote
1:      * @param ctx
1:      *            the servlet context
1:      * @param req
1:      *            the HttpRequest object
1:      * @param resp
1:      *            the HttpResponse object
1:      * @exception javax.servlet.ServletException
1:      *                If a servlet specific exception is encountered
1:      * @exception javax.io.IOException
1:      *                If an exception occurs while writing results back to the
1:      *                user
1:      * 
1:      */
1:     void doQuotes(ServletContext ctx, HttpServletRequest req,
1:             HttpServletResponse resp, String userID, String symbols)
1:             throws ServletException, IOException {
1:         String results = "";
1: 
1:         // Edge Caching:
1:         // Getting Quotes has been moved to the JSP
1:         // Quote.jsp. This makes each Quote a
1:         // standalone "fragment", and thus is a candidate for
1:         // Edge caching.
1:         //			
1: 
1:         requestDispatch(ctx, req, resp, userID, TradeConfig
1:                 .getPage(TradeConfig.QUOTE_PAGE));
1:     }
1: 
1:     /**
1:      * Register a new trader given the provided user Profile information such as
1:      * address, email, etc. Dispatch to the Trade Home JSP for display
1:      * 
1:      * @param userID
1:      *            The User to create
1:      * @param passwd
1:      *            The User password
1:      * @param fullname
1:      *            The new User fullname info
1:      * @param ccn
1:      *            The new User credit card info
1:      * @param money
1:      *            The new User opening account balance
1:      * @param address
1:      *            The new User address info
1:      * @param email
1:      *            The new User email info
1:      * @return The userID of the new trader
1:      * @param ctx
1:      *            the servlet context
1:      * @param req
1:      *            the HttpRequest object
1:      * @param resp
1:      *            the HttpResponse object
1:      * @exception javax.servlet.ServletException
1:      *                If a servlet specific exception is encountered
1:      * @exception javax.io.IOException
1:      *                If an exception occurs while writing results back to the
1:      *                user
1:      * 
1:      */
1:     void doRegister(ServletContext ctx, HttpServletRequest req,
1:             HttpServletResponse resp, String userID, String passwd,
1:             String cpasswd, String fullname, String ccn,
1:             String openBalanceString, String email, String address)
1:             throws ServletException, IOException {
1:         String results = "";
1: 
1:         try {
1:             // Validate user passwords match and are atleast 1 char in length
1:             if ((passwd.equals(cpasswd)) && (passwd.length() >= 1)) {
1: 
1:                 AccountDataBean accountData = tradeServices.register(userID, passwd,
1:                         fullname, address, email, ccn, new BigDecimal(
1:                                 openBalanceString));
1:                 if (accountData == null) {
1:                     results = "Registration operation failed;";
1:                     System.out.println(results);
1:                     req.setAttribute("results", results);
1:                     requestDispatch(ctx, req, resp, userID, TradeConfig
1:                             .getPage(TradeConfig.REGISTER_PAGE));
1:                 } else {
1:                     doLogin(ctx, req, resp, userID, passwd);
1:                     results = "Registration operation succeeded;  Account "
1:                             + accountData.getAccountID() + " has been created.";
1:                     req.setAttribute("results", results);
1: 
1:                 }
1:             } else {
1:                 // Password validation failed
1:                 results = "Registration operation failed, your passwords did not match";
1:                 System.out.println(results);
1:                 req.setAttribute("results", results);
1:                 requestDispatch(ctx, req, resp, userID, TradeConfig
1:                         .getPage(TradeConfig.REGISTER_PAGE));
1:             }
1: 
1:         } catch (Exception e) {
1:             // log the exception with error page
1:             throw new ServletException("TradeServletAction.doRegister(...)"
1:                     + " exception user =" + userID, e);
1:         }
1:     }
1: 
1:     /**
1:      * Sell a current holding of stock shares for the given trader. Dispatch to
1:      * the Trade Portfolio JSP for display
1:      * 
1:      * @param userID
1:      *            The User buying shares
1:      * @param symbol
1:      *            The stock to sell
1:      * @param indx
1:      *            The unique index identifying the users holding to sell
1:      * @param ctx
1:      *            the servlet context
1:      * @param req
1:      *            the HttpRequest object
1:      * @param resp
1:      *            the HttpResponse object
1:      * @exception javax.servlet.ServletException
1:      *                If a servlet specific exception is encountered
1:      * @exception javax.io.IOException
1:      *                If an exception occurs while writing results back to the
1:      *                user
1:      * 
1:      */
1:     void doSell(ServletContext ctx, HttpServletRequest req,
1:             HttpServletResponse resp, String userID, Integer holdingID)
1:             throws ServletException, IOException {
1:         String results = "";
1:         try {
1:             OrderDataBean orderData = tradeServices.sell(userID, holdingID,
1:                     TradeConfig.orderProcessingMode);
1: 
1:             req.setAttribute("orderData", orderData);
1:             req.setAttribute("results", results);
1:         } catch (java.lang.IllegalArgumentException e) { // this is a user
1:                                                             // error so I will
1:             // just log the exception and then later on I will redisplay the
1:             // portfolio page
1:             // because this is just a user exception
1:             Log
1:                     .error(
1:                             e,
0:                             "TradeServletAction.doSell(...)",
1:                             "illegal argument, information should be in exception string",
1:                             "user error");
1:         } catch (Exception e) {
1:             // log the exception with error page
1:             throw new ServletException("TradeServletAction.doSell(...)"
1:                     + " exception selling holding " + holdingID + " for user ="
1:                     + userID, e);
1:         }
1:         requestDispatch(ctx, req, resp, userID, TradeConfig
1:                 .getPage(TradeConfig.ORDER_PAGE));
1:     }
1: 
1:     void doWelcome(ServletContext ctx, HttpServletRequest req,
1:             HttpServletResponse resp, String status) throws ServletException,
1:             IOException {
1: 
1:         req.setAttribute("results", status);
1:         requestDispatch(ctx, req, resp, null, TradeConfig
1:                 .getPage(TradeConfig.WELCOME_PAGE));
1:     }
1: 
1:     private void requestDispatch(ServletContext ctx, HttpServletRequest req,
1:             HttpServletResponse resp, String userID, String page)
1:             throws ServletException, IOException {
1: 
1:         ctx.getRequestDispatcher(page).include(req, resp);
1:     }
1: 
0:     private void sendRedirect(HttpServletResponse resp, String page)
1:             throws ServletException, IOException {
0:         resp.sendRedirect(resp.encodeRedirectURL(page));
1:     }
1: }
============================================================================