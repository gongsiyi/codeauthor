1:efb3993: /*
1:efb3993:  * Licensed to the Apache Software Foundation (ASF) under one
1:efb3993:  * or more contributor license agreements.  See the NOTICE file
1:efb3993:  * distributed with this work for additional information
1:efb3993:  * regarding copyright ownership.  The ASF licenses this file
1:efb3993:  * to you under the Apache License, Version 2.0 (the
1:efb3993:  * "License"); you may not use this file except in compliance
1:efb3993:  * with the License.  You may obtain a copy of the License at
1:efb3993:  *
1:efb3993:  *   http://www.apache.org/licenses/LICENSE-2.0
1:efb3993:  *
1:efb3993:  * Unless required by applicable law or agreed to in writing,
1:efb3993:  * software distributed under the License is distributed on an
1:efb3993:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:efb3993:  * KIND, either express or implied.  See the License for the
1:efb3993:  * specific language governing permissions and limitations
1:efb3993:  * under the License.
1:efb3993:  */
1:7c388cb: package org.apache.aries.tx.control.resource.common.impl;
1:7c388cb: 
1:7c388cb: import static org.hamcrest.CoreMatchers.both;
1:7c388cb: import static org.mockito.Matchers.any;
1:7c388cb: import static org.mockito.Matchers.argThat;
1:7c388cb: import static org.mockito.Matchers.eq;
1:7c388cb: 
1:7c388cb: import java.util.Dictionary;
1:7c388cb: import java.util.Hashtable;
1:7c388cb: 
1:7c388cb: import org.hamcrest.Description;
1:7c388cb: import org.hamcrest.Matcher;
1:7c388cb: import org.hamcrest.TypeSafeDiagnosingMatcher;
1:7c388cb: import org.junit.Test;
1:7c388cb: import org.junit.runner.RunWith;
1:7c388cb: import org.mockito.Mock;
1:7c388cb: import org.mockito.Mockito;
1:7c388cb: import org.mockito.runners.MockitoJUnitRunner;
1:7c388cb: import org.osgi.framework.BundleContext;
1:7c388cb: import org.osgi.framework.Constants;
1:7c388cb: import org.osgi.framework.ServiceRegistration;
1:7c388cb: import org.osgi.service.cm.ManagedServiceFactory;
1:7c388cb: 
1:7c388cb: @RunWith(MockitoJUnitRunner.class)
1:7c388cb: public class ResourceActivatorTest {
1:7c388cb: 
1:7c388cb: 	@Mock
1:7c388cb: 	BundleContext ctx;
1:7c388cb: 	
1:7c388cb: 	@Mock
1:7c388cb: 	ResourceProviderFactoryServiceFactory<AutoCloseable, TrackingResourceProviderFactory<AutoCloseable>> serviceFactory;
1:7c388cb: 
1:7c388cb: 	@SuppressWarnings("rawtypes")
1:7c388cb: 	@Mock
1:7c388cb: 	ServiceRegistration providerReg;
1:7c388cb: 	
1:7c388cb: 	@Mock
1:7c388cb: 	ConfigurationDefinedResourceFactory configDrivenResourceFactory;
1:7c388cb: 
1:7c388cb: 	@Mock
1:7c388cb: 	ServiceRegistration<ManagedServiceFactory> msfReg;
1:7c388cb: 	
1:7c388cb: 	@Test
1:7c388cb: 	public void testLifecycleNoServiceOrMSF() throws Exception {
1:7c388cb: 		ResourceActivator<?,?> ra = new ResourceActivator<AutoCloseable,
1:7c388cb: 				TrackingResourceProviderFactory<AutoCloseable>>() {
1:7c388cb: 		};
1:7c388cb: 		
1:7c388cb: 		ra.start(ctx);
1:7c388cb: 		ra.stop(ctx);
1:7c388cb: 		
1:7c388cb: 		Mockito.verifyNoMoreInteractions(ctx);
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	@SuppressWarnings("unchecked")
1:7c388cb: 	@Test
1:7c388cb: 	public void testLifecycleNoMSF() throws Exception {
1:7c388cb: 		
1:7c388cb: 		Mockito.when(ctx.registerService(eq(TrackingResourceProviderFactory.class.getName()), 
1:7c388cb: 				any(), argThat(both(hasKeyValue("foo", "bar")).and(hasKeyValue("fizz", 42)))))
1:7c388cb: 					.thenReturn(providerReg);
1:7c388cb: 		
1:7c388cb: 		ResourceActivator<?,?> ra = new ResourceActivator<AutoCloseable,
1:7c388cb: 				TrackingResourceProviderFactory<AutoCloseable>>() {
1:7c388cb: 					@Override
1:7c388cb: 					protected ResourceProviderFactoryServiceFactory<AutoCloseable, TrackingResourceProviderFactory<AutoCloseable>> getServiceFactory(
1:7c388cb: 							BundleContext context) {
1:7c388cb: 						return serviceFactory;
1:7c388cb: 					}
1:7c388cb: 
1:7c388cb: 					@Override
1:7c388cb: 					protected Class<? super TrackingResourceProviderFactory<AutoCloseable>> getAdvertisedInterface() {
1:7c388cb: 						return TrackingResourceProviderFactory.class;
1:7c388cb: 					}
1:7c388cb: 
1:7c388cb: 					@Override
1:7c388cb: 					protected Dictionary<String, Object> getServiceProperties() {
1:7c388cb: 						Hashtable<String, Object> table = new Hashtable<>();
1:7c388cb: 						table.put("foo", "bar");
1:7c388cb: 						table.put("fizz", 42);
1:7c388cb: 						return table;
1:7c388cb: 					}
1:7c388cb: 			};
1:7c388cb: 		
1:7c388cb: 		ra.start(ctx);
1:7c388cb: 		
1:7c388cb: 		ra.stop(ctx);
1:7c388cb: 		
1:7c388cb: 		Mockito.verify(providerReg).unregister();
1:7c388cb: 		Mockito.verify(serviceFactory).close();
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	@Test
1:7c388cb: 	public void testLifecycleNoService() throws Exception {
1:7c388cb: 		
1:7c388cb: 		Mockito.when(ctx.registerService(eq(ManagedServiceFactory.class), 
1:7c388cb: 				any(), argThat(hasKeyValue(Constants.SERVICE_PID, "foo.bar.baz"))))
1:7c388cb: 		.thenReturn(msfReg);
1:7c388cb: 		
1:7c388cb: 		ResourceActivator<?,?> ra = new ResourceActivator<AutoCloseable,
1:7c388cb: 				TrackingResourceProviderFactory<AutoCloseable>>() {
1:7c388cb: 
1:7c388cb: 					@Override
1:7c388cb: 					protected ConfigurationDefinedResourceFactory getConfigurationDefinedResourceFactory(
1:7c388cb: 							BundleContext context) {
1:7c388cb: 						return configDrivenResourceFactory;
1:7c388cb: 					}
1:7c388cb: 
1:7c388cb: 					@Override
1:7c388cb: 					protected String getMSFPid() {
1:7c388cb: 						return "foo.bar.baz";
1:7c388cb: 					}
1:7c388cb: 		};
1:7c388cb: 		
1:7c388cb: 		ra.start(ctx);
1:7c388cb: 		
1:7c388cb: 		ra.stop(ctx);
1:7c388cb: 		
1:7c388cb: 		Mockito.verify(msfReg).unregister();
1:7c388cb: 		Mockito.verify(configDrivenResourceFactory).stop();
1:7c388cb: 	}
1:7c388cb: 	
1:7c388cb: 	@SuppressWarnings("unchecked")
1:7c388cb: 	@Test
1:7c388cb: 	public void testLifecycleBothServiceAndMSF() throws Exception {
1:7c388cb: 		Mockito.when(ctx.registerService(eq(TrackingResourceProviderFactory.class.getName()), 
1:7c388cb: 				any(), argThat(both(hasKeyValue("foo", "bar")).and(hasKeyValue("fizz", 42)))))
1:7c388cb: 					.thenReturn(providerReg);
1:7c388cb: 		
1:7c388cb: 		Mockito.when(ctx.registerService(eq(ManagedServiceFactory.class), 
1:7c388cb: 				any(), argThat(hasKeyValue(Constants.SERVICE_PID, "foo.bar.baz"))))
1:7c388cb: 		.thenReturn(msfReg);
1:7c388cb: 		
1:7c388cb: 		ResourceActivator<?,?> ra = new ResourceActivator<AutoCloseable,
1:7c388cb: 				TrackingResourceProviderFactory<AutoCloseable>>() {
1:7c388cb: 					@Override
1:7c388cb: 					protected ResourceProviderFactoryServiceFactory<AutoCloseable, TrackingResourceProviderFactory<AutoCloseable>> getServiceFactory(
1:7c388cb: 							BundleContext context) {
1:7c388cb: 						return serviceFactory;
1:7c388cb: 					}
1:7c388cb: 
1:7c388cb: 					@Override
1:7c388cb: 					protected Class<? super TrackingResourceProviderFactory<AutoCloseable>> getAdvertisedInterface() {
1:7c388cb: 						return TrackingResourceProviderFactory.class;
1:7c388cb: 					}
1:7c388cb: 
1:7c388cb: 					@Override
1:7c388cb: 					protected Dictionary<String, Object> getServiceProperties() {
1:7c388cb: 						Hashtable<String, Object> table = new Hashtable<>();
1:7c388cb: 						table.put("foo", "bar");
1:7c388cb: 						table.put("fizz", 42);
1:7c388cb: 						return table;
1:7c388cb: 					}
1:7c388cb: 					
1:7c388cb: 					@Override
1:7c388cb: 					protected ConfigurationDefinedResourceFactory getConfigurationDefinedResourceFactory(
1:7c388cb: 							BundleContext context) {
1:7c388cb: 						return configDrivenResourceFactory;
1:7c388cb: 					}
1:7c388cb: 
1:7c388cb: 					@Override
1:7c388cb: 					protected String getMSFPid() {
1:7c388cb: 						return "foo.bar.baz";
1:7c388cb: 					}
1:7c388cb: 			};
1:7c388cb: 		
1:7c388cb: 		ra.start(ctx);
1:7c388cb: 		
1:7c388cb: 		ra.stop(ctx);
1:7c388cb: 		
1:7c388cb: 		Mockito.verify(providerReg).unregister();
1:7c388cb: 		Mockito.verify(serviceFactory).close();
1:7c388cb: 		
1:7c388cb: 		Mockito.verify(msfReg).unregister();
1:7c388cb: 		Mockito.verify(configDrivenResourceFactory).stop();
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 
1:7c388cb: 	static Matcher<Dictionary<String, Object>> hasKeyValue(String key, Object value) {
1:7c388cb: 		return new DictionaryMatcher(key, value);
1:7c388cb: 	}
1:7c388cb: 	
1:7c388cb: 	
1:7c388cb: 	private static class DictionaryMatcher extends TypeSafeDiagnosingMatcher<Dictionary<String, Object>> {
1:7c388cb: 
1:7c388cb: 		private final String key;
1:7c388cb: 		private final Object value;
1:7c388cb: 		
1:7c388cb: 		public DictionaryMatcher(String key, Object value) {
1:7c388cb: 			this.key = key;
1:7c388cb: 			this.value = value;
1:7c388cb: 		}
1:7c388cb: 
1:7c388cb: 		@Override
1:7c388cb: 		protected boolean matchesSafely(Dictionary<String, Object> map, Description mismatchDescription) {
1:7c388cb: 			return value.equals(map.get(key));
1:7c388cb: 		}
1:7c388cb: 
1:7c388cb: 		@Override
1:7c388cb: 		public void describeTo(Description description) {
1:7c388cb: 			description.appendText("Map entry: " + key + "=" + value);
1:7c388cb: 		}
1:7c388cb: 		
1:7c388cb: 	}
1:7c388cb: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:efb3993
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:7c388cb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.resource.common.impl;
1: 
1: import static org.hamcrest.CoreMatchers.both;
1: import static org.mockito.Matchers.any;
1: import static org.mockito.Matchers.argThat;
1: import static org.mockito.Matchers.eq;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import org.hamcrest.Description;
1: import org.hamcrest.Matcher;
1: import org.hamcrest.TypeSafeDiagnosingMatcher;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.mockito.Mock;
1: import org.mockito.Mockito;
1: import org.mockito.runners.MockitoJUnitRunner;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.cm.ManagedServiceFactory;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: public class ResourceActivatorTest {
1: 
1: 	@Mock
1: 	BundleContext ctx;
1: 	
1: 	@Mock
1: 	ResourceProviderFactoryServiceFactory<AutoCloseable, TrackingResourceProviderFactory<AutoCloseable>> serviceFactory;
1: 
1: 	@SuppressWarnings("rawtypes")
1: 	@Mock
1: 	ServiceRegistration providerReg;
1: 	
1: 	@Mock
1: 	ConfigurationDefinedResourceFactory configDrivenResourceFactory;
1: 
1: 	@Mock
1: 	ServiceRegistration<ManagedServiceFactory> msfReg;
1: 	
1: 	@Test
1: 	public void testLifecycleNoServiceOrMSF() throws Exception {
1: 		ResourceActivator<?,?> ra = new ResourceActivator<AutoCloseable,
1: 				TrackingResourceProviderFactory<AutoCloseable>>() {
1: 		};
1: 		
1: 		ra.start(ctx);
1: 		ra.stop(ctx);
1: 		
1: 		Mockito.verifyNoMoreInteractions(ctx);
1: 	}
1: 
1: 	@SuppressWarnings("unchecked")
1: 	@Test
1: 	public void testLifecycleNoMSF() throws Exception {
1: 		
1: 		Mockito.when(ctx.registerService(eq(TrackingResourceProviderFactory.class.getName()), 
1: 				any(), argThat(both(hasKeyValue("foo", "bar")).and(hasKeyValue("fizz", 42)))))
1: 					.thenReturn(providerReg);
1: 		
1: 		ResourceActivator<?,?> ra = new ResourceActivator<AutoCloseable,
1: 				TrackingResourceProviderFactory<AutoCloseable>>() {
1: 					@Override
1: 					protected ResourceProviderFactoryServiceFactory<AutoCloseable, TrackingResourceProviderFactory<AutoCloseable>> getServiceFactory(
1: 							BundleContext context) {
1: 						return serviceFactory;
1: 					}
1: 
1: 					@Override
1: 					protected Class<? super TrackingResourceProviderFactory<AutoCloseable>> getAdvertisedInterface() {
1: 						return TrackingResourceProviderFactory.class;
1: 					}
1: 
1: 					@Override
1: 					protected Dictionary<String, Object> getServiceProperties() {
1: 						Hashtable<String, Object> table = new Hashtable<>();
1: 						table.put("foo", "bar");
1: 						table.put("fizz", 42);
1: 						return table;
1: 					}
1: 			};
1: 		
1: 		ra.start(ctx);
1: 		
1: 		ra.stop(ctx);
1: 		
1: 		Mockito.verify(providerReg).unregister();
1: 		Mockito.verify(serviceFactory).close();
1: 	}
1: 
1: 	@Test
1: 	public void testLifecycleNoService() throws Exception {
1: 		
1: 		Mockito.when(ctx.registerService(eq(ManagedServiceFactory.class), 
1: 				any(), argThat(hasKeyValue(Constants.SERVICE_PID, "foo.bar.baz"))))
1: 		.thenReturn(msfReg);
1: 		
1: 		ResourceActivator<?,?> ra = new ResourceActivator<AutoCloseable,
1: 				TrackingResourceProviderFactory<AutoCloseable>>() {
1: 
1: 					@Override
1: 					protected ConfigurationDefinedResourceFactory getConfigurationDefinedResourceFactory(
1: 							BundleContext context) {
1: 						return configDrivenResourceFactory;
1: 					}
1: 
1: 					@Override
1: 					protected String getMSFPid() {
1: 						return "foo.bar.baz";
1: 					}
1: 		};
1: 		
1: 		ra.start(ctx);
1: 		
1: 		ra.stop(ctx);
1: 		
1: 		Mockito.verify(msfReg).unregister();
1: 		Mockito.verify(configDrivenResourceFactory).stop();
1: 	}
1: 	
1: 	@SuppressWarnings("unchecked")
1: 	@Test
1: 	public void testLifecycleBothServiceAndMSF() throws Exception {
1: 		Mockito.when(ctx.registerService(eq(TrackingResourceProviderFactory.class.getName()), 
1: 				any(), argThat(both(hasKeyValue("foo", "bar")).and(hasKeyValue("fizz", 42)))))
1: 					.thenReturn(providerReg);
1: 		
1: 		Mockito.when(ctx.registerService(eq(ManagedServiceFactory.class), 
1: 				any(), argThat(hasKeyValue(Constants.SERVICE_PID, "foo.bar.baz"))))
1: 		.thenReturn(msfReg);
1: 		
1: 		ResourceActivator<?,?> ra = new ResourceActivator<AutoCloseable,
1: 				TrackingResourceProviderFactory<AutoCloseable>>() {
1: 					@Override
1: 					protected ResourceProviderFactoryServiceFactory<AutoCloseable, TrackingResourceProviderFactory<AutoCloseable>> getServiceFactory(
1: 							BundleContext context) {
1: 						return serviceFactory;
1: 					}
1: 
1: 					@Override
1: 					protected Class<? super TrackingResourceProviderFactory<AutoCloseable>> getAdvertisedInterface() {
1: 						return TrackingResourceProviderFactory.class;
1: 					}
1: 
1: 					@Override
1: 					protected Dictionary<String, Object> getServiceProperties() {
1: 						Hashtable<String, Object> table = new Hashtable<>();
1: 						table.put("foo", "bar");
1: 						table.put("fizz", 42);
1: 						return table;
1: 					}
1: 					
1: 					@Override
1: 					protected ConfigurationDefinedResourceFactory getConfigurationDefinedResourceFactory(
1: 							BundleContext context) {
1: 						return configDrivenResourceFactory;
1: 					}
1: 
1: 					@Override
1: 					protected String getMSFPid() {
1: 						return "foo.bar.baz";
1: 					}
1: 			};
1: 		
1: 		ra.start(ctx);
1: 		
1: 		ra.stop(ctx);
1: 		
1: 		Mockito.verify(providerReg).unregister();
1: 		Mockito.verify(serviceFactory).close();
1: 		
1: 		Mockito.verify(msfReg).unregister();
1: 		Mockito.verify(configDrivenResourceFactory).stop();
1: 	}
1: 
1: 
1: 	static Matcher<Dictionary<String, Object>> hasKeyValue(String key, Object value) {
1: 		return new DictionaryMatcher(key, value);
1: 	}
1: 	
1: 	
1: 	private static class DictionaryMatcher extends TypeSafeDiagnosingMatcher<Dictionary<String, Object>> {
1: 
1: 		private final String key;
1: 		private final Object value;
1: 		
1: 		public DictionaryMatcher(String key, Object value) {
1: 			this.key = key;
1: 			this.value = value;
1: 		}
1: 
1: 		@Override
1: 		protected boolean matchesSafely(Dictionary<String, Object> map, Description mismatchDescription) {
1: 			return value.equals(map.get(key));
1: 		}
1: 
1: 		@Override
1: 		public void describeTo(Description description) {
1: 			description.appendText("Map entry: " + key + "=" + value);
1: 		}
1: 		
1: 	}
1: }
============================================================================