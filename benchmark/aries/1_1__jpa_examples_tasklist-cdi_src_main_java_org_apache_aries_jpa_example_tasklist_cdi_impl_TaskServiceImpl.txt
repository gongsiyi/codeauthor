1:5a4dcb4: /*
1:5a4dcb4:  * Licensed to the Apache Software Foundation (ASF) under one
1:5a4dcb4:  * or more contributor license agreements.  See the NOTICE file
1:5a4dcb4:  * distributed with this work for additional information
1:5a4dcb4:  * regarding copyright ownership.  The ASF licenses this file
1:5a4dcb4:  * to you under the Apache License, Version 2.0 (the
1:5a4dcb4:  * "License"); you may not use this file except in compliance
1:5a4dcb4:  * with the License.  You may obtain a copy of the License at
1:5a4dcb4:  *
1:5a4dcb4:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5a4dcb4:  *
1:5a4dcb4:  * Unless required by applicable law or agreed to in writing,
1:5a4dcb4:  * software distributed under the License is distributed on an
1:5a4dcb4:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:5a4dcb4:  * KIND, either express or implied.  See the License for the
1:5a4dcb4:  * specific language governing permissions and limitations
1:5a4dcb4:  * under the License.
1:5a4dcb4:  */
1:5a4dcb4: package org.apache.aries.jpa.example.tasklist.cdi.impl;
1:5a4dcb4: 
1:5a4dcb4: import javax.persistence.EntityManager;
1:5a4dcb4: import javax.persistence.PersistenceContext;
1:5a4dcb4: import javax.persistence.criteria.CriteriaQuery;
1:5a4dcb4: import javax.transaction.Transactional;
1:5a4dcb4: import javax.transaction.Transactional.TxType;
1:5a4dcb4: import java.util.Collection;
1:5a4dcb4: 
1:5a4dcb4: import org.apache.aries.jpa.example.tasklist.model.Task;
1:5a4dcb4: import org.apache.aries.jpa.example.tasklist.model.TaskService;
1:5a4dcb4: 
1:5a4dcb4: @Transactional
1:5a4dcb4: public class TaskServiceImpl implements TaskService {
1:5a4dcb4: 
1:5a4dcb4:     @PersistenceContext(unitName = "tasklist")
1:5a4dcb4:     EntityManager em;
1:5a4dcb4: 
1:5a4dcb4:     @Transactional(TxType.SUPPORTS)
1:5a4dcb4:     @Override
1:5a4dcb4:     public Task getTask(Integer id) {
1:5a4dcb4:         return em.find(Task.class, id);
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     
1:5a4dcb4:     @Override
1:5a4dcb4:     public void addTask(Task task) {
1:5a4dcb4:         em.persist(task);
1:5a4dcb4:         em.flush();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Transactional(TxType.SUPPORTS)
1:5a4dcb4:     @Override
1:5a4dcb4:     public Collection<Task> getTasks() {
1:5a4dcb4:         CriteriaQuery<Task> query = em.getCriteriaBuilder().createQuery(Task.class);
1:5a4dcb4:         return em.createQuery(query.select(query.from(Task.class))).getResultList();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public void updateTask(Task task) {
1:5a4dcb4:         em.persist(task);
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public void deleteTask(Integer id) {
1:5a4dcb4:         em.remove(getTask(id));
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5a4dcb4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.example.tasklist.cdi.impl;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.PersistenceContext;
1: import javax.persistence.criteria.CriteriaQuery;
1: import javax.transaction.Transactional;
1: import javax.transaction.Transactional.TxType;
1: import java.util.Collection;
1: 
1: import org.apache.aries.jpa.example.tasklist.model.Task;
1: import org.apache.aries.jpa.example.tasklist.model.TaskService;
1: 
1: @Transactional
1: public class TaskServiceImpl implements TaskService {
1: 
1:     @PersistenceContext(unitName = "tasklist")
1:     EntityManager em;
1: 
1:     @Transactional(TxType.SUPPORTS)
1:     @Override
1:     public Task getTask(Integer id) {
1:         return em.find(Task.class, id);
1:     }
1: 
1:     
1:     @Override
1:     public void addTask(Task task) {
1:         em.persist(task);
1:         em.flush();
1:     }
1: 
1:     @Transactional(TxType.SUPPORTS)
1:     @Override
1:     public Collection<Task> getTasks() {
1:         CriteriaQuery<Task> query = em.getCriteriaBuilder().createQuery(Task.class);
1:         return em.createQuery(query.select(query.from(Task.class))).getResultList();
1:     }
1: 
1:     @Override
1:     public void updateTask(Task task) {
1:         em.persist(task);
1:     }
1: 
1:     @Override
1:     public void deleteTask(Integer id) {
1:         em.remove(getTask(id));
1:     }
1: 
1: }
============================================================================