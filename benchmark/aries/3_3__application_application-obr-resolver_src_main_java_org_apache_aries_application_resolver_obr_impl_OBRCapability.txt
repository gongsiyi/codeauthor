1:792f3de: /*
1:792f3de:  * Licensed to the Apache Software Foundation (ASF) under one
1:792f3de:  * or more contributor license agreements.  See the NOTICE file
1:792f3de:  * distributed with this work for additional information
1:792f3de:  * regarding copyright ownership.  The ASF licenses this file
1:792f3de:  * to you under the Apache License, Version 2.0 (the
1:792f3de:  * "License"); you may not use this file except in compliance
1:792f3de:  * with the License.  You may obtain a copy of the License at
1:792f3de:  *
1:792f3de:  *  http://www.apache.org/licenses/LICENSE-2.0
1:792f3de:  *
1:792f3de:  * Unless required by applicable law or agreed to in writing,
1:792f3de:  * software distributed under the License is distributed on an
1:792f3de:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:792f3de:  * KIND, either express or implied.  See the License for the
1:792f3de:  * specific language governing permissions and limitations
1:792f3de:  * under the License.
1:792f3de:  */
1:792f3de: 
1:792f3de: package org.apache.aries.application.resolver.obr.impl;
1:792f3de: 
1:792f3de: 
1:792f3de: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:792f3de: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:792f3de: 
1:84895fd: import java.util.ArrayList;
1:84895fd: import java.util.Arrays;
1:4db0d92: import java.util.Collection;
1:792f3de: import java.util.HashMap;
1:84895fd: import java.util.List;
1:792f3de: import java.util.Map;
1:792f3de: 
1:792f3de: import org.apache.aries.application.modelling.Provider;
1:792f3de: import org.apache.felix.bundlerepository.Capability;
1:84895fd: import org.apache.felix.bundlerepository.DataModelHelper;
1:792f3de: import org.apache.felix.bundlerepository.Property;
1:792f3de: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:84895fd: import org.osgi.framework.Constants;
1:792f3de: import org.slf4j.Logger;
1:792f3de: import org.slf4j.LoggerFactory;
1:792f3de: 
1:792f3de: /**
1:792f3de:  * Common code for handling OBR Capabilities. 
1:792f3de:  */
1:792f3de: public class OBRCapability implements Capability
1:792f3de: {
1:792f3de: 
1:792f3de:   private Logger logger = LoggerFactory.getLogger(OBRCapability.class);
1:792f3de:   private final Provider _provider;
1:792f3de: 
1:792f3de:   private final RepositoryAdmin repositoryAdmin;
1:792f3de:   /**
1:792f3de:    * Property map for this Capability.
1:792f3de:    */
1:792f3de:   private final Map<String, Object> _props;
1:792f3de:   
1:792f3de:   /**
1:792f3de:    * Construct a Capability specifying the OBR name to use.
1:792f3de:    * @param type the value to be used for the Capability name in OBR.
1:792f3de:    */
1:792f3de:   public OBRCapability(Provider provider, RepositoryAdmin repositoryAdmin){
1:792f3de: 
1:792f3de:     logger.debug(LOG_ENTRY, "OBRCapability", provider);
1:792f3de:     _provider = provider;
1:792f3de:     _props = new HashMap<String, Object>(provider.getAttributes());
1:792f3de:     this.repositoryAdmin = repositoryAdmin;
1:792f3de:     logger.debug(LOG_EXIT, "OBRCapability");
1:792f3de:     
1:792f3de:   }
1:792f3de:   
1:792f3de:  
1:792f3de:   public String getName()
1:792f3de:   {
1:792f3de:     logger.debug(LOG_ENTRY, "getName");
1:792f3de:     String name = _provider.getType().toString();  
1:792f3de:     logger.debug(LOG_EXIT, "getName", name);
1:792f3de:     return name;
1:792f3de:   }
1:792f3de: 
1:792f3de:  
1:792f3de:   public Property[] getProperties()
1:792f3de:   {
1:792f3de:     logger.debug(LOG_ENTRY, "getProperties");
1:84895fd:     DataModelHelper helper = repositoryAdmin.getHelper();
1:84895fd:     
1:84895fd:     List<Property> properties = new ArrayList<Property>();
1:84895fd:     
1:84895fd:     // Felix BundleRepository doesn't appear to correctly cope with String[] value properties
1:84895fd:     // as a result we can't do multi value service properties. OBR doesn't really like implementations
1:84895fd:     // of its interfaces that it didn't generate, but it is a little weird when it does and doesn't.
1:84895fd:     // so we create a Property implemenation which we use to generate the OBR xml for a property which
1:84895fd:     // we then get OBR to parse. This is really convoluted and nasty.
1:84895fd:     for (final Map.Entry<String, Object> entry : _props.entrySet()) {
1:84895fd:       String propXML = helper.writeProperty(new Property() {
1:84895fd:         @Override
1:84895fd:         public String getValue()
1:84895fd:         {
1:84895fd:           Object value = entry.getValue();
1:84895fd:           
1:84895fd:           if (value instanceof String[]) {
1:84895fd:             String newValue = Arrays.toString((String[])value);
1:84895fd:             value = newValue.substring(1, newValue.length() - 1);
1:4db0d92:           } else if (value instanceof Collection) {
1:4db0d92:             //We can't rely on Collections having a sensible toString() as it isn't
1:4db0d92:             //part of the API (although all base Java ones do). We can use an array
1:4db0d92:             //to get consistency
1:4db0d92:             String newValue = Arrays.toString(((Collection<?>)value).toArray());
1:4db0d92:             value = newValue.substring(1, newValue.length() - 1);
1:84895fd:           }
1:84895fd:           
1:84895fd:           return String.valueOf(value);
1:84895fd:         }
1:84895fd:         
1:84895fd:         @Override
1:84895fd:         public String getType()
1:84895fd:         {
1:84895fd:           String name = entry.getKey();
1:84895fd:           String type = null;
1:84895fd:           if (Constants.VERSION_ATTRIBUTE.equals(name) || (Constants.BUNDLE_VERSION_ATTRIBUTE.equals(name))) {
1:84895fd:             type =  "version";
1:84895fd:           } else if (Constants.OBJECTCLASS.equals(name) || (Constants.MANDATORY_DIRECTIVE + ":").equals(name) ||
1:4db0d92:               entry.getValue() instanceof String[] || entry.getValue() instanceof Collection)
1:84895fd:             type = "set";
1:84895fd:           return type;
1:84895fd:         }
1:84895fd:         
1:84895fd:         @Override
1:84895fd:         public String getName()
1:84895fd:         {
1:84895fd:           return entry.getKey();
1:84895fd:         }
1:84895fd:         
1:84895fd:         @Override
1:84895fd:         public Object getConvertedValue()
1:84895fd:         {
1:84895fd:           return null;
1:84895fd:         }
1:84895fd:       });
1:84895fd:       
1:84895fd:       try {
1:84895fd:         properties.add(helper.readProperty(propXML));
1:84895fd:       } catch (Exception e) {
1:84895fd:         // Do nothing and hope it OBR doesn't generate XML it can't parse.
1:84895fd:       }
1:84895fd:     }
1:84895fd:     
1:84895fd:     
1:84895fd:     logger.debug(LOG_EXIT, "getProperties", properties);
1:84895fd:     return properties.toArray(new Property[properties.size()]);
1:792f3de:   }
1:792f3de: 
1:792f3de:   public Map getPropertiesAsMap()
1:792f3de:   {
1:792f3de:     logger.debug(LOG_ENTRY, "getPropertiesAsMap");
1:792f3de:     logger.debug(LOG_ENTRY, "getPropertiesAsMap", new Object[]{_props});
1:792f3de:     return _props;
1:792f3de:   }
1:792f3de: 
1:792f3de: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4db0d92
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1:           } else if (value instanceof Collection) {
1:             //We can't rely on Collections having a sensible toString() as it isn't
1:             //part of the API (although all base Java ones do). We can use an array
1:             //to get consistency
1:             String newValue = Arrays.toString(((Collection<?>)value).toArray());
1:             value = newValue.substring(1, newValue.length() - 1);
/////////////////////////////////////////////////////////////////////////
1:               entry.getValue() instanceof String[] || entry.getValue() instanceof Collection)
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:84895fd
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: import org.apache.felix.bundlerepository.DataModelHelper;
1: import org.osgi.framework.Constants;
/////////////////////////////////////////////////////////////////////////
1:     DataModelHelper helper = repositoryAdmin.getHelper();
1:     
1:     List<Property> properties = new ArrayList<Property>();
1:     
1:     // Felix BundleRepository doesn't appear to correctly cope with String[] value properties
1:     // as a result we can't do multi value service properties. OBR doesn't really like implementations
1:     // of its interfaces that it didn't generate, but it is a little weird when it does and doesn't.
1:     // so we create a Property implemenation which we use to generate the OBR xml for a property which
1:     // we then get OBR to parse. This is really convoluted and nasty.
1:     for (final Map.Entry<String, Object> entry : _props.entrySet()) {
1:       String propXML = helper.writeProperty(new Property() {
1:         @Override
1:         public String getValue()
1:         {
1:           Object value = entry.getValue();
1:           
1:           if (value instanceof String[]) {
1:             String newValue = Arrays.toString((String[])value);
1:             value = newValue.substring(1, newValue.length() - 1);
1:           }
1:           
1:           return String.valueOf(value);
1:         }
1:         
1:         @Override
1:         public String getType()
1:         {
1:           String name = entry.getKey();
1:           String type = null;
1:           if (Constants.VERSION_ATTRIBUTE.equals(name) || (Constants.BUNDLE_VERSION_ATTRIBUTE.equals(name))) {
1:             type =  "version";
1:           } else if (Constants.OBJECTCLASS.equals(name) || (Constants.MANDATORY_DIRECTIVE + ":").equals(name) ||
0:               entry.getValue() instanceof String[])
1:             type = "set";
1:           return type;
1:         }
1:         
1:         @Override
1:         public String getName()
1:         {
1:           return entry.getKey();
1:         }
1:         
1:         @Override
1:         public Object getConvertedValue()
1:         {
1:           return null;
1:         }
1:       });
1:       
1:       try {
1:         properties.add(helper.readProperty(propXML));
1:       } catch (Exception e) {
1:         // Do nothing and hope it OBR doesn't generate XML it can't parse.
1:       }
1:     }
1:     
1:     
1:     logger.debug(LOG_EXIT, "getProperties", properties);
1:     return properties.toArray(new Property[properties.size()]);
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:792f3de
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.application.resolver.obr.impl;
1: 
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.modelling.Provider;
1: import org.apache.felix.bundlerepository.Capability;
1: import org.apache.felix.bundlerepository.Property;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Common code for handling OBR Capabilities. 
1:  */
1: public class OBRCapability implements Capability
1: {
1: 
1:   private Logger logger = LoggerFactory.getLogger(OBRCapability.class);
1:   private final Provider _provider;
1: 
1:   private final RepositoryAdmin repositoryAdmin;
1:   /**
1:    * Property map for this Capability.
1:    */
1:   private final Map<String, Object> _props;
1:   
1:   /**
1:    * Construct a Capability specifying the OBR name to use.
1:    * @param type the value to be used for the Capability name in OBR.
1:    */
1:   public OBRCapability(Provider provider, RepositoryAdmin repositoryAdmin){
1: 
1:     logger.debug(LOG_ENTRY, "OBRCapability", provider);
1:     _provider = provider;
1:     _props = new HashMap<String, Object>(provider.getAttributes());
1:     this.repositoryAdmin = repositoryAdmin;
1:     logger.debug(LOG_EXIT, "OBRCapability");
1:     
1:   }
1:   
1:  
1:   public String getName()
1:   {
1:     logger.debug(LOG_ENTRY, "getName");
1:     String name = _provider.getType().toString();  
1:     logger.debug(LOG_EXIT, "getName", name);
1:     return name;
1:   }
1: 
1:  
1:   public Property[] getProperties()
1:   {
1:     logger.debug(LOG_ENTRY, "getProperties");
0:     Property[] props = repositoryAdmin.getHelper().capability(getName(), _props).getProperties();
0:     logger.debug(LOG_EXIT, "getProperties", props);
0:     return props;
1:   }
1: 
1:   public Map getPropertiesAsMap()
1:   {
1:     logger.debug(LOG_ENTRY, "getPropertiesAsMap");
1:     logger.debug(LOG_ENTRY, "getPropertiesAsMap", new Object[]{_props});
1:     return _props;
1:   }
1: 
1: }
============================================================================