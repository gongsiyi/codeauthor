1:d22e134: /**
1:d22e134:  * Licensed to the Apache Software Foundation (ASF) under one
1:d22e134:  * or more contributor license agreements.  See the NOTICE file
1:d22e134:  * distributed with this work for additional information
1:d22e134:  * regarding copyright ownership.  The ASF licenses this file
1:d22e134:  * to you under the Apache License, Version 2.0 (the
1:d22e134:  * "License"); you may not use this file except in compliance
1:d22e134:  * with the License.  You may obtain a copy of the License at
1:d22e134:  * <p/>
1:d22e134:  * http://www.apache.org/licenses/LICENSE-2.0
1:d22e134:  * <p/>
1:d22e134:  * Unless required by applicable law or agreed to in writing,
1:d22e134:  * software distributed under the License is distributed on an
1:d22e134:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d22e134:  * KIND, either express or implied.  See the License for the
1:d22e134:  * specific language governing permissions and limitations
1:d22e134:  * under the License.
1:d22e134:  */
1:d22e134: package org.apache.aries.blueprint.plugin.test;
2:d22e134: 
1:d22e134: import org.ops4j.pax.cdi.api.OsgiService;
1:d22e134: import org.springframework.beans.factory.annotation.Autowired;
1:d22e134: import org.springframework.beans.factory.annotation.Qualifier;
1:d22e134: import org.springframework.beans.factory.annotation.Value;
1:7583a4c: import org.springframework.context.annotation.Lazy;
1:d22e134: 
1:d22e134: import javax.inject.Inject;
1:d22e134: import javax.inject.Named;
1:d22e134: import javax.inject.Singleton;
1:d22e134: 
1:d22e134: @Singleton
1:7583a4c: @Lazy(false)
1:d22e134: public class BeanWithSetters {
1:d22e134: 
1:d22e134:     @Inject
1:d22e134:     @Named("my1")
1:d22e134:     public void setServiceA1(ServiceA serviceA1) {
1:d22e134:     }
1:d22e134: 
1:d22e134:     @Inject
1:d22e134:     @Qualifier("my2")
1:d22e134:     public void setServiceA2(ServiceA serviceA2) {
1:d22e134:     }
1:d22e134: 
1:d22e134:     @Autowired
1:d22e134:     public void setServiceB(ServiceB serviceB) {
1:d22e134:     }
1:d22e134: 
1:d22e134:     @Inject
1:d22e134:     @Named("serviceB2Id")
1:d22e134:     public void setServiceB2(ServiceB serviceB2) {
1:d22e134:     }
1:d22e134: 
1:d22e134:     public void setUseless(MyProduced myProduced) {
1:d22e134:     }
1:d22e134: 
1:d22e134:     @Inject
1:d22e134:     public void setIOnlyHaveSetPrefix() {
1:d22e134:     }
1:d22e134: 
1:d22e134:     @Inject
1:d22e134:     public void setIhaveMoreThenOneParameter(String a, String b) {
1:d22e134:     }
1:d22e134: 
1:d22e134:     @Value("test")
1:d22e134:     public void setIOnlyHaveSetPrefixValue() {
1:d22e134:     }
1:d22e134: 
1:d22e134:     @Value("test")
1:d22e134:     public void setIhaveMoreThenOneParameterValue(String a, String b) {
1:d22e134:     }
1:d22e134: 
1:d22e134:     @Value("test")
1:d22e134:     public void setMyValue(String v) {
1:d22e134:     }
1:d22e134: 
1:d22e134:     @Inject
1:868c96f:     public void setServiceBRef(@OsgiService(filter = "(type=B1Ref)") ServiceB serviceBRef) {
1:d22e134:     }
1:d22e134: 
1:d22e134:     @Inject
1:d22e134:     @Named("serviceB2IdRef")
1:d22e134:     @OsgiService(filter = "(type=B2Ref)")
1:d22e134:     public void setServiceB2Ref(ServiceB serviceB2Ref) {
1:d22e134:     }
1:d22e134: 
1:d22e134:     @Inject
1:d22e134:     @OsgiService(filter = "B3Ref")
1:d22e134:     public void setServiceB3Ref(ServiceB serviceB3Ref) {
1:d22e134:     }
1:d22e134: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:868c96f
/////////////////////////////////////////////////////////////////////////
1:     public void setServiceBRef(@OsgiService(filter = "(type=B1Ref)") ServiceB serviceBRef) {
commit:7583a4c
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.context.annotation.Lazy;
1: @Lazy(false)
commit:d22e134
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin.test;
1: 
1: import org.ops4j.pax.cdi.api.OsgiService;
1: import org.springframework.beans.factory.annotation.Autowired;
1: import org.springframework.beans.factory.annotation.Qualifier;
1: import org.springframework.beans.factory.annotation.Value;
1: 
1: import javax.inject.Inject;
1: import javax.inject.Named;
1: import javax.inject.Singleton;
1: 
1: @Singleton
1: public class BeanWithSetters {
1: 
1:     @Inject
1:     @Named("my1")
1:     public void setServiceA1(ServiceA serviceA1) {
1:     }
1: 
1:     @Inject
1:     @Qualifier("my2")
1:     public void setServiceA2(ServiceA serviceA2) {
1:     }
1: 
1:     @Autowired
1:     public void setServiceB(ServiceB serviceB) {
1:     }
1: 
1:     @Inject
1:     @Named("serviceB2Id")
1:     public void setServiceB2(ServiceB serviceB2) {
1:     }
1: 
1:     public void setUseless(MyProduced myProduced) {
1:     }
1: 
1:     @Inject
1:     public void setIOnlyHaveSetPrefix() {
1:     }
1: 
1:     @Inject
1:     public void setIhaveMoreThenOneParameter(String a, String b) {
1:     }
1: 
1:     @Value("test")
1:     public void setIOnlyHaveSetPrefixValue() {
1:     }
1: 
1:     @Value("test")
1:     public void setIhaveMoreThenOneParameterValue(String a, String b) {
1:     }
1: 
1:     @Value("test")
1:     public void setMyValue(String v) {
1:     }
1: 
1:     @Inject
0:     @OsgiService(filter = "(type=B1Ref)")
0:     public void setServiceBRef(ServiceB serviceBRef) {
1:     }
1: 
1: 
1:     @Inject
1:     @Named("serviceB2IdRef")
1:     @OsgiService(filter = "(type=B2Ref)")
1:     public void setServiceB2Ref(ServiceB serviceB2Ref) {
1:     }
1: 
1:     @Inject
1:     @OsgiService(filter = "B3Ref")
1:     public void setServiceB3Ref(ServiceB serviceB3Ref) {
1:     }
1: }
============================================================================