1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.container.parser.impl;
1:2cfdf52: 
1:ec3ea65: import java.util.ArrayDeque;
1:2cfdf52: import java.util.Collection;
1:ec3ea65: import java.util.Deque;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.SharedCacheMode;
1:2cfdf52: import javax.persistence.ValidationMode;
1:2cfdf52: import javax.persistence.spi.PersistenceUnitTransactionType;
1:2cfdf52: 
1:2cfdf52: import org.osgi.framework.Bundle;
1:2cfdf52: import org.xml.sax.Attributes;
1:2cfdf52: import org.xml.sax.SAXException;
1:2cfdf52: import org.xml.sax.SAXParseException;
1:2cfdf52: import org.xml.sax.helpers.DefaultHandler;
1:2cfdf52: 
1:2cfdf52: /**
1:2cfdf52:  * This code is responsible for parsing the persistence.xml into PersistenceUnits
1:2cfdf52:  */
1:2cfdf52: public class JPAHandler extends DefaultHandler {
1:2cfdf52:     /** The Persistence Units that we have parsed */
1:ec3ea65:     private final Deque<PersistenceUnit> persistenceUnits = new ArrayDeque<PersistenceUnit>();
1:2cfdf52:     /** The name of the current element */
1:2cfdf52:     private String elementName;
1:2cfdf52:     /** The version of the persistence.xml file */
1:2cfdf52:     /** A StringBuilder for caching the information from getCharacters */
1:2cfdf52:     private StringBuilder builder = new StringBuilder();
1:2cfdf52:     /** The bundle that contains this persistence descriptor */
1:2cfdf52:     private Bundle bundle;
1:2cfdf52: 
1:2cfdf52:     /**
1:2cfdf52:      * Create a new JPA Handler for a bundle
1:2cfdf52:      * 
1:465647f:      * @param bundle to parse
1:2cfdf52:      */
1:2cfdf52:     public JPAHandler(Bundle bundle) {
1:2cfdf52:         this.bundle = bundle;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     /**
1:2cfdf52:      * Collect up the characters, as element's characters may be split across multiple calls. Isn't SAX
1:2cfdf52:      * lovely...
1:2cfdf52:      */
1:2cfdf52:     @Override
1:2cfdf52:     public void characters(char[] ch, int start, int length) throws SAXException {
1:2cfdf52:         builder.append(ch, start, length);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void startElement(String uri, String localName, String name, Attributes attributes)
1:2cfdf52:         throws SAXException {
1:2cfdf52:         // Do this setting first as we use it later.
1:2cfdf52:         elementName = (localName == null || "".equals(localName)) ? name : localName;
1:2cfdf52: 
1:2cfdf52:         if ("persistence-unit".equals(elementName)) {
1:2cfdf52:             String tranTypeSt = attributes.getValue("transaction-type");
1:2cfdf52:             PersistenceUnitTransactionType tranType = tranTypeSt == null ? null : PersistenceUnitTransactionType.valueOf(tranTypeSt);
1:2cfdf52:             persistenceUnits.push(new PersistenceUnit(bundle, 
1:2cfdf52:                                                       attributes.getValue("name"), 
1:2cfdf52:                                                       tranType));
1:2cfdf52:         } else if ("exclude-unlisted-classes".equals(elementName))
1:2cfdf52:             persistenceUnits.peek().setExcludeUnlisted(true);
1:2cfdf52:         else if ("property".equals(elementName))
1:2cfdf52:             persistenceUnits.peek().addProperty(attributes.getValue("name"), attributes.getValue("value"));
1:2cfdf52: 
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void endElement(String uri, String localName, String name) throws SAXException {
1:2cfdf52:         String s = builder.toString().trim();
1:2cfdf52:         // This step is VERY important, otherwise we pollute subsequent
1:2cfdf52:         // elements
1:2cfdf52:         builder = new StringBuilder();
1:2cfdf52: 
1:2cfdf52:         if ("".equals(s))
1:2cfdf52:             return;
1:2cfdf52: 
1:2cfdf52:         PersistenceUnit pu = persistenceUnits.peek();
1:2cfdf52: 
1:2cfdf52:         if ("provider".equals(elementName))
1:2cfdf52:             pu.setProviderClassName(s);
1:2cfdf52:         else if ("jta-data-source".equals(elementName))
1:2cfdf52:             pu.setJtaDataSourceName(s);
1:2cfdf52:         else if ("non-jta-data-source".equals(elementName))
1:2cfdf52:             pu.setNonJtaDataSourceName(s);
1:2cfdf52:         else if ("class".equals(elementName))
1:2cfdf52:             pu.addClassName(s);
1:2cfdf52:         else if ("exclude-unlisted-classes".equals(elementName))
1:2cfdf52:             pu.setExcludeUnlisted(Boolean.parseBoolean(s));
1:2cfdf52:         else if ("shared-cache-mode".equals(elementName))
1:2cfdf52:             pu.setSharedCacheMode(SharedCacheMode.valueOf(s));
1:ec3ea65:         else if ("validation-mode".equals(elementName))
1:2cfdf52:             pu.setValidationMode(ValidationMode.valueOf(s));
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void error(SAXParseException spe) throws SAXException {
1:2cfdf52:         // We throw this exception to be caught further up and logged
1:2cfdf52:         // as an error there
1:2cfdf52:         throw spe;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     /**
1:2cfdf52:      * @return The collection of persistence units that we have parsed
1:2cfdf52:      */
1:2cfdf52:     public Collection<PersistenceUnit> getPersistenceUnits() {
1:2cfdf52:         return persistenceUnits;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:465647f
/////////////////////////////////////////////////////////////////////////
1:      * @param bundle to parse
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayDeque;
1: import java.util.Deque;
/////////////////////////////////////////////////////////////////////////
1:     private final Deque<PersistenceUnit> persistenceUnits = new ArrayDeque<PersistenceUnit>();
/////////////////////////////////////////////////////////////////////////
1:         else if ("validation-mode".equals(elementName))
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.parser.impl;
1: 
1: import java.util.Collection;
0: import java.util.Stack;
1: 
1: import javax.persistence.SharedCacheMode;
1: import javax.persistence.ValidationMode;
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: 
1: import org.osgi.framework.Bundle;
1: import org.xml.sax.Attributes;
1: import org.xml.sax.SAXException;
1: import org.xml.sax.SAXParseException;
1: import org.xml.sax.helpers.DefaultHandler;
1: 
1: /**
1:  * This code is responsible for parsing the persistence.xml into PersistenceUnits
1:  */
1: public class JPAHandler extends DefaultHandler {
1:     /** The Persistence Units that we have parsed */
0:     private final Stack<PersistenceUnit> persistenceUnits = new Stack<PersistenceUnit>();
1:     /** The name of the current element */
1:     private String elementName;
1:     /** The version of the persistence.xml file */
1:     /** A StringBuilder for caching the information from getCharacters */
1:     private StringBuilder builder = new StringBuilder();
1:     /** The bundle that contains this persistence descriptor */
1:     private Bundle bundle;
1: 
1:     /**
1:      * Create a new JPA Handler for a bundle
1:      * 
0:      * @param bundle
1:      */
1:     public JPAHandler(Bundle bundle) {
1:         this.bundle = bundle;
1:     }
1: 
1:     /**
1:      * Collect up the characters, as element's characters may be split across multiple calls. Isn't SAX
1:      * lovely...
1:      */
1:     @Override
1:     public void characters(char[] ch, int start, int length) throws SAXException {
1:         builder.append(ch, start, length);
1:     }
1: 
1:     @Override
1:     public void startElement(String uri, String localName, String name, Attributes attributes)
1:         throws SAXException {
1:         // Do this setting first as we use it later.
1:         elementName = (localName == null || "".equals(localName)) ? name : localName;
1: 
1:         if ("persistence-unit".equals(elementName)) {
1:             String tranTypeSt = attributes.getValue("transaction-type");
1:             PersistenceUnitTransactionType tranType = tranTypeSt == null ? null : PersistenceUnitTransactionType.valueOf(tranTypeSt);
1:             persistenceUnits.push(new PersistenceUnit(bundle, 
1:                                                       attributes.getValue("name"), 
1:                                                       tranType));
1:         } else if ("exclude-unlisted-classes".equals(elementName))
1:             persistenceUnits.peek().setExcludeUnlisted(true);
1:         else if ("property".equals(elementName))
1:             persistenceUnits.peek().addProperty(attributes.getValue("name"), attributes.getValue("value"));
1: 
1:     }
1: 
1:     @Override
1:     public void endElement(String uri, String localName, String name) throws SAXException {
1:         String s = builder.toString().trim();
1:         // This step is VERY important, otherwise we pollute subsequent
1:         // elements
1:         builder = new StringBuilder();
1: 
1:         if ("".equals(s))
1:             return;
1: 
1:         PersistenceUnit pu = persistenceUnits.peek();
1: 
1:         if ("provider".equals(elementName))
1:             pu.setProviderClassName(s);
1:         else if ("jta-data-source".equals(elementName))
1:             pu.setJtaDataSourceName(s);
1:         else if ("non-jta-data-source".equals(elementName))
1:             pu.setNonJtaDataSourceName(s);
1:         else if ("class".equals(elementName))
1:             pu.addClassName(s);
1:         else if ("exclude-unlisted-classes".equals(elementName))
1:             pu.setExcludeUnlisted(Boolean.parseBoolean(s));
1:         else if ("shared-cache-mode".equals(elementName))
1:             pu.setSharedCacheMode(SharedCacheMode.valueOf(s));
0:           else if ("validation-mode".equals(elementName))
1:             pu.setValidationMode(ValidationMode.valueOf(s));
1:     }
1: 
1:     @Override
1:     public void error(SAXParseException spe) throws SAXException {
1:         // We throw this exception to be caught further up and logged
1:         // as an error there
1:         throw spe;
1:     }
1: 
1:     /**
1:      * @return The collection of persistence units that we have parsed
1:      */
1:     public Collection<PersistenceUnit> getPersistenceUnits() {
1:         return persistenceUnits;
1:     }
1: 
1: }
============================================================================