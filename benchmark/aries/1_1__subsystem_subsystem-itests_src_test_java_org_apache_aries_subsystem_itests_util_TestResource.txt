1:a14f2fd: /*
1:8ad6b99:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ad6b99:  * or more contributor license agreements.  See the NOTICE file
1:8ad6b99:  * distributed with this work for additional information
1:8ad6b99:  * regarding copyright ownership.  The ASF licenses this file
1:8ad6b99:  * to you under the Apache License, Version 2.0 (the
1:8ad6b99:  * "License"); you may not use this file except in compliance
1:8ad6b99:  * with the License.  You may obtain a copy of the License at
1:a14f2fd:  *
1:8ad6b99:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:8ad6b99:  * Unless required by applicable law or agreed to in writing,
1:8ad6b99:  * software distributed under the License is distributed on an
1:8ad6b99:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8ad6b99:  * KIND, either express or implied.  See the License for the
1:8ad6b99:  * specific language governing permissions and limitations
1:8ad6b99:  * under the License.
1:a14f2fd:  */
1:fc759fb: package org.apache.aries.subsystem.itests.util;
1:fc759fb: 
1:fc759fb: import java.util.ArrayList;
1:fc759fb: import java.util.Collections;
1:fc759fb: import java.util.List;
1:fc759fb: 
1:71fe81a: import org.osgi.resource.Capability;
1:71fe81a: import org.osgi.resource.Requirement;
1:71fe81a: import org.osgi.resource.Resource;
1:fc759fb: 
1:fc759fb: public class TestResource implements Resource {
1:fc759fb: 	public static class Builder {
1:fc759fb: 		private final List<TestCapability.Builder> capabilities = new ArrayList<TestCapability.Builder>();
1:8ad6b99: 		private final List<TestRequirement.Builder> requirements = new ArrayList<TestRequirement.Builder>();
1:fc759fb: 		
1:fc759fb: 		public TestResource build() {
1:fc759fb: 			return new TestResource(capabilities, requirements);
1:fc759fb: 		}
1:fc759fb: 		
1:fc759fb: 		public Builder capability(TestCapability.Builder value) {
1:fc759fb: 			capabilities.add(value);
1:fc759fb: 			return this;
1:fc759fb: 		}
1:fc759fb: 		
1:8ad6b99: 		public Builder requirement(TestRequirement.Builder value) {
1:fc759fb: 			requirements.add(value);
1:fc759fb: 			return this;
1:fc759fb: 		}
1:fc759fb: 	}
1:fc759fb: 	
1:fc759fb: 	private final List<Capability> capabilities;
1:fc759fb: 	private final List<Requirement> requirements;
1:fc759fb: 	
1:8ad6b99: 	public TestResource(List<TestCapability.Builder> capabilities, List<TestRequirement.Builder> requirements) {
1:fc759fb: 		this.capabilities = new ArrayList<Capability>(capabilities.size());
1:fc759fb: 		for (TestCapability.Builder builder : capabilities)
1:fc759fb: 			this.capabilities.add(builder.resource(this).build());
1:8ad6b99: 		this.requirements = new ArrayList<Requirement>(requirements.size());
1:8ad6b99: 		for (TestRequirement.Builder builder : requirements)
1:8ad6b99:             this.requirements.add(builder.resource(this).build());
1:fc759fb: 	}
1:fc759fb: 
1:fc759fb: 	@Override
1:fc759fb: 	public List<Capability> getCapabilities(String namespace) {
1:fc759fb: 		if (namespace == null)
1:fc759fb: 			return Collections.unmodifiableList(capabilities);
1:fc759fb: 		ArrayList<Capability> result = new ArrayList<Capability>(capabilities.size());
1:fc759fb: 		for (Capability capability : capabilities)
1:fc759fb: 			if (namespace.equals(capability.getNamespace()))
1:fc759fb: 				result.add(capability);
1:fc759fb: 		result.trimToSize();
1:fc759fb: 		return Collections.unmodifiableList(result);
1:fc759fb: 	}
1:fc759fb: 
1:fc759fb: 	@Override
1:fc759fb: 	public List<Requirement> getRequirements(String namespace) {
1:fc759fb: 		if (namespace == null)
1:fc759fb: 			return Collections.unmodifiableList(requirements);
1:fc759fb: 		ArrayList<Requirement> result = new ArrayList<Requirement>(requirements.size());
1:fc759fb: 		for (Requirement requirement : requirements)
1:fc759fb: 			if (namespace.equals(requirement.getNamespace()))
1:fc759fb: 				result.add(requirement);
1:fc759fb: 		result.trimToSize();
1:fc759fb: 		return Collections.unmodifiableList(result);
1:fc759fb: 	}
1:fc759fb: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:8ad6b99
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
/////////////////////////////////////////////////////////////////////////
1: 		private final List<TestRequirement.Builder> requirements = new ArrayList<TestRequirement.Builder>();
/////////////////////////////////////////////////////////////////////////
1: 		public Builder requirement(TestRequirement.Builder value) {
/////////////////////////////////////////////////////////////////////////
1: 	public TestResource(List<TestCapability.Builder> capabilities, List<TestRequirement.Builder> requirements) {
1: 		this.requirements = new ArrayList<Requirement>(requirements.size());
1: 		for (TestRequirement.Builder builder : requirements)
1:             this.requirements.add(builder.resource(this).build());
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
commit:fc759fb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.itests.util;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
0: import org.osgi.framework.resource.Capability;
0: import org.osgi.framework.resource.Requirement;
0: import org.osgi.framework.resource.Resource;
1: 
1: public class TestResource implements Resource {
1: 	public static class Builder {
1: 		private final List<TestCapability.Builder> capabilities = new ArrayList<TestCapability.Builder>();
0: 		private final List<Requirement> requirements = new ArrayList<Requirement>();
1: 		
1: 		public TestResource build() {
1: 			return new TestResource(capabilities, requirements);
1: 		}
1: 		
1: 		public Builder capability(TestCapability.Builder value) {
1: 			capabilities.add(value);
1: 			return this;
1: 		}
1: 		
0: 		public Builder requirement(Requirement value) {
1: 			requirements.add(value);
1: 			return this;
1: 		}
1: 	}
1: 	
1: 	private final List<Capability> capabilities;
1: 	private final List<Requirement> requirements;
1: 	
0: 	public TestResource(List<TestCapability.Builder> capabilities, List<Requirement> requirements) {
1: 		this.capabilities = new ArrayList<Capability>(capabilities.size());
1: 		for (TestCapability.Builder builder : capabilities)
1: 			this.capabilities.add(builder.resource(this).build());
0: 		this.requirements = requirements;
1: 	}
1: 
1: 	@Override
1: 	public List<Capability> getCapabilities(String namespace) {
1: 		if (namespace == null)
1: 			return Collections.unmodifiableList(capabilities);
1: 		ArrayList<Capability> result = new ArrayList<Capability>(capabilities.size());
1: 		for (Capability capability : capabilities)
1: 			if (namespace.equals(capability.getNamespace()))
1: 				result.add(capability);
1: 		result.trimToSize();
1: 		return Collections.unmodifiableList(result);
1: 	}
1: 
1: 	@Override
1: 	public List<Requirement> getRequirements(String namespace) {
1: 		if (namespace == null)
1: 			return Collections.unmodifiableList(requirements);
1: 		ArrayList<Requirement> result = new ArrayList<Requirement>(requirements.size());
1: 		for (Requirement requirement : requirements)
1: 			if (namespace.equals(requirement.getNamespace()))
1: 				result.add(requirement);
1: 		result.trimToSize();
1: 		return Collections.unmodifiableList(result);
1: 	}
1: }
============================================================================