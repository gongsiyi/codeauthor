1:6c69a67: /*
1:6c69a67:  * Licensed under the Apache License, Version 2.0 (the "License");
1:6c69a67:  * you may not use this file except in compliance with the License.
1:6c69a67:  * You may obtain a copy of the License at
1:6c69a67:  *
1:6c69a67:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6c69a67:  *
1:6c69a67:  * Unless required by applicable law or agreed to in writing, software
1:6c69a67:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c69a67:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c69a67:  * See the License for the specific language governing permissions and
1:6c69a67:  * limitations under the License.
1:6c69a67:  */
1:7a834c3: package org.apache.aries.subsystem.util.felix;
1:6c69a67: 
1:6c69a67: import java.util.ArrayList;
1:6c69a67: import java.util.Collection;
1:6c69a67: import java.util.Collections;
1:6c69a67: import java.util.HashMap;
1:6c69a67: import java.util.HashSet;
1:6c69a67: import java.util.List;
1:6c69a67: import java.util.Map;
1:6c69a67: import java.util.regex.Matcher;
1:6c69a67: import java.util.regex.Pattern;
1:6c69a67: 
1:7a834c3: import org.apache.aries.subsystem.obr.internal.ResourceHelper;
1:6c69a67: import org.osgi.framework.Constants;
1:6c69a67: import org.osgi.framework.namespace.IdentityNamespace;
1:6c69a67: import org.osgi.resource.Capability;
1:6c69a67: import org.osgi.resource.Requirement;
1:6c69a67: import org.osgi.resource.Resource;
1:6c69a67: import org.osgi.service.repository.Repository;
1:6c69a67: import org.slf4j.Logger;
1:6c69a67: import org.slf4j.LoggerFactory;
1:6c69a67: 
1:6c69a67: public class FelixRepositoryAdapter implements Repository {
1:6c69a67: 	private static class IdentityRequirementFilter {
1:6c69a67: 		private static final String REGEX = "\\(osgi.identity=([^\\)]*)\\)";
1:6c69a67: 		private static final Pattern PATTERN = Pattern.compile(REGEX);
1:6c69a67: 		
1:6c69a67: 		private final String symbolicName;
1:6c69a67: 		
1:6c69a67: 		public IdentityRequirementFilter(String filter) {
1:6c69a67: 			Matcher matcher = PATTERN.matcher(filter);
1:6c69a67: 			if (!matcher.find())
1:6c69a67: 				throw new IllegalArgumentException("Could not find pattern '" + REGEX + "' in filter string '" + filter + "'");
1:6c69a67: 			symbolicName = matcher.group(1);
1:6c69a67: 		}
1:6c69a67: 		
1:6c69a67: 		public String getSymbolicName() {
1:6c69a67: 			return symbolicName;
1:6c69a67: 		}
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	private static final Logger logger = LoggerFactory.getLogger(FelixRepositoryAdapter.class);
1:6c69a67: 	
1:6c69a67: 	private final Map<String, Collection<Capability>> identityIndex = Collections.synchronizedMap(new HashMap<String, Collection<Capability>>());
1:6c69a67: 	private final org.apache.felix.bundlerepository.Repository repository;
1:6c69a67: 	
1:6c69a67: 	private long lastUpdated;
1:6c69a67: 	
1:6c69a67: 	public FelixRepositoryAdapter(org.apache.felix.bundlerepository.Repository repository) {
1:6c69a67: 		if (repository == null)
1:6c69a67: 			throw new NullPointerException("Missing required parameter: repository");
1:6c69a67: 		this.repository = repository;
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	public Collection<Capability> findProviders(Requirement requirement) {
1:6c69a67: 		update();
1:6c69a67: 		List<Capability> result = Collections.emptyList();
1:6c69a67: 		if (IdentityNamespace.IDENTITY_NAMESPACE.equals(requirement.getNamespace())) {
1:6c69a67: 			String symbolicName = new IdentityRequirementFilter(requirement.getDirectives().get(Constants.FILTER_DIRECTIVE)).getSymbolicName();
1:6c69a67: 			logger.debug("Looking for symbolic name {}", symbolicName);
1:6c69a67: 			Collection<Capability> capabilities = identityIndex.get(symbolicName);
1:6c69a67: 			if (capabilities != null) {
1:6c69a67: 				result = new ArrayList<Capability>(capabilities.size());
1:6c69a67: 				for (Capability capability : capabilities) {
1:6c69a67: 					if (ResourceHelper.matches(requirement, capability)) {
1:6c69a67: 						result.add(capability);
1:6c69a67: 					}
1:6c69a67: 				}
1:6c69a67: 				((ArrayList<Capability>)result).trimToSize();
1:6c69a67: 			}
1:6c69a67: 		}
1:6c69a67: 		else {
1:6c69a67: 			org.apache.felix.bundlerepository.Resource[] resources = repository.getResources();
1:6c69a67: 			if (resources != null && resources.length != 0) {
1:6c69a67: 				result = new ArrayList<Capability>(resources.length);
1:6c69a67: 				for (final org.apache.felix.bundlerepository.Resource resource : resources) {
1:6c69a67: 					Resource r = new FelixResourceAdapter(resource);
1:6c69a67: 					for (Capability capability : r.getCapabilities(requirement.getNamespace()))
1:6c69a67: 						if (ResourceHelper.matches(requirement, capability))
1:6c69a67: 							result.add(capability);
1:6c69a67: 				}
1:6c69a67: 				((ArrayList<Capability>)result).trimToSize();
1:6c69a67: 			}
1:6c69a67: 		}
1:6c69a67: 		return result;
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	@Override
1:6c69a67: 	public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:6c69a67: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>(requirements.size());
1:6c69a67: 		for (Requirement requirement : requirements)
1:6c69a67: 			result.put(requirement, findProviders(requirement));
1:6c69a67: 		return result;
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	private synchronized void update() {
1:6c69a67: 		long lastModified = repository.getLastModified();
1:6c69a67: 		logger.debug("The repository adaptor was last updated at {}. The repository was last modified at {}", lastUpdated, lastModified);
1:6c69a67: 		if (lastModified > lastUpdated) {
1:6c69a67: 			logger.debug("Updating the adapter with the modified repository contents...");
1:6c69a67: 			lastUpdated = lastModified;
1:6c69a67: 			synchronized (identityIndex) {
1:6c69a67: 				identityIndex.clear();
1:6c69a67: 				org.apache.felix.bundlerepository.Resource[] resources = repository.getResources();
1:6c69a67: 				logger.debug("There are {} resources to evaluate", resources == null ? 0 : resources.length);
1:6c69a67: 				if (resources != null && resources.length != 0) {
1:6c69a67: 					for (org.apache.felix.bundlerepository.Resource resource : resources) {
1:6c69a67: 						logger.debug("Evaluating resource {}", resource);
1:6c69a67: 						String symbolicName = resource.getSymbolicName();
1:6c69a67: 						Collection<Capability> capabilities = identityIndex.get(symbolicName);
1:6c69a67: 						if (capabilities == null) {
1:6c69a67: 							capabilities = new HashSet<Capability>();
1:6c69a67: 							identityIndex.put(symbolicName, capabilities);
1:6c69a67: 						}
1:6c69a67: 						OsgiIdentityCapability capability = 
1:6c69a67: 								new OsgiIdentityCapability(
1:6c69a67: 									new FelixResourceAdapter(resource),
1:6c69a67: 									symbolicName,
1:6c69a67: 									resource.getVersion(),
1:6c69a67: 									// TODO Assuming all resources are bundles. Need to support 
1:6c69a67: 									// type fragment as well, but how do we know?
1:6c69a67: 									IdentityNamespace.TYPE_BUNDLE);
1:6c69a67: 						logger.debug("Indexing capability {}", capability);
1:6c69a67: 						capabilities.add(capability);
1:6c69a67: 					}
1:6c69a67: 				}
1:6c69a67: 			}
1:6c69a67: 		}
1:6c69a67: 	}
1:6c69a67: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7a834c3
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.util.felix;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.obr.internal.ResourceHelper;
author:John Ross
-------------------------------------------------------------------------------
commit:9731fd6
/////////////////////////////////////////////////////////////////////////
commit:6c69a67
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.aries.subsystem.obr.internal;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
0: import org.apache.aries.subsystem.core.internal.OsgiIdentityCapability;
0: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.repository.Repository;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class FelixRepositoryAdapter implements Repository {
1: 	private static class IdentityRequirementFilter {
1: 		private static final String REGEX = "\\(osgi.identity=([^\\)]*)\\)";
1: 		private static final Pattern PATTERN = Pattern.compile(REGEX);
1: 		
1: 		private final String symbolicName;
1: 		
1: 		public IdentityRequirementFilter(String filter) {
1: 			Matcher matcher = PATTERN.matcher(filter);
1: 			if (!matcher.find())
1: 				throw new IllegalArgumentException("Could not find pattern '" + REGEX + "' in filter string '" + filter + "'");
1: 			symbolicName = matcher.group(1);
1: 		}
1: 		
1: 		public String getSymbolicName() {
1: 			return symbolicName;
1: 		}
1: 	}
1: 	
1: 	private static final Logger logger = LoggerFactory.getLogger(FelixRepositoryAdapter.class);
1: 	
1: 	private final Map<String, Collection<Capability>> identityIndex = Collections.synchronizedMap(new HashMap<String, Collection<Capability>>());
1: 	private final org.apache.felix.bundlerepository.Repository repository;
1: 	
1: 	private long lastUpdated;
1: 	
1: 	public FelixRepositoryAdapter(org.apache.felix.bundlerepository.Repository repository) {
1: 		if (repository == null)
1: 			throw new NullPointerException("Missing required parameter: repository");
1: 		this.repository = repository;
1: 	}
1: 	
1: 	public Collection<Capability> findProviders(Requirement requirement) {
1: 		update();
1: 		List<Capability> result = Collections.emptyList();
1: 		if (IdentityNamespace.IDENTITY_NAMESPACE.equals(requirement.getNamespace())) {
1: 			String symbolicName = new IdentityRequirementFilter(requirement.getDirectives().get(Constants.FILTER_DIRECTIVE)).getSymbolicName();
1: 			logger.debug("Looking for symbolic name {}", symbolicName);
1: 			Collection<Capability> capabilities = identityIndex.get(symbolicName);
1: 			if (capabilities != null) {
1: 				result = new ArrayList<Capability>(capabilities.size());
1: 				for (Capability capability : capabilities) {
1: 					if (ResourceHelper.matches(requirement, capability)) {
1: 						result.add(capability);
1: 					}
1: 				}
1: 				((ArrayList<Capability>)result).trimToSize();
1: 			}
1: 		}
1: 		else {
1: 			org.apache.felix.bundlerepository.Resource[] resources = repository.getResources();
1: 			if (resources != null && resources.length != 0) {
1: 				result = new ArrayList<Capability>(resources.length);
1: 				for (final org.apache.felix.bundlerepository.Resource resource : resources) {
1: 					Resource r = new FelixResourceAdapter(resource);
1: 					for (Capability capability : r.getCapabilities(requirement.getNamespace()))
1: 						if (ResourceHelper.matches(requirement, capability))
1: 							result.add(capability);
1: 				}
1: 				((ArrayList<Capability>)result).trimToSize();
1: 			}
1: 		}
1: 		return result;
1: 	}
1: 	
1: 	@Override
1: 	public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>(requirements.size());
1: 		for (Requirement requirement : requirements)
1: 			result.put(requirement, findProviders(requirement));
1: 		return result;
1: 	}
1: 	
1: 	private synchronized void update() {
1: 		long lastModified = repository.getLastModified();
1: 		logger.debug("The repository adaptor was last updated at {}. The repository was last modified at {}", lastUpdated, lastModified);
1: 		if (lastModified > lastUpdated) {
1: 			logger.debug("Updating the adapter with the modified repository contents...");
1: 			lastUpdated = lastModified;
1: 			synchronized (identityIndex) {
1: 				identityIndex.clear();
1: 				org.apache.felix.bundlerepository.Resource[] resources = repository.getResources();
1: 				logger.debug("There are {} resources to evaluate", resources == null ? 0 : resources.length);
1: 				if (resources != null && resources.length != 0) {
1: 					for (org.apache.felix.bundlerepository.Resource resource : resources) {
1: 						logger.debug("Evaluating resource {}", resource);
1: 						String symbolicName = resource.getSymbolicName();
1: 						Collection<Capability> capabilities = identityIndex.get(symbolicName);
1: 						if (capabilities == null) {
1: 							capabilities = new HashSet<Capability>();
1: 							identityIndex.put(symbolicName, capabilities);
1: 						}
1: 						OsgiIdentityCapability capability = 
1: 								new OsgiIdentityCapability(
1: 									new FelixResourceAdapter(resource),
1: 									symbolicName,
1: 									resource.getVersion(),
1: 									// TODO Assuming all resources are bundles. Need to support 
1: 									// type fragment as well, but how do we know?
1: 									IdentityNamespace.TYPE_BUNDLE);
1: 						logger.debug("Indexing capability {}", capability);
1: 						capabilities.add(capability);
1: 					}
1: 				}
1: 			}
1: 		}
1: 	}
1: }
============================================================================