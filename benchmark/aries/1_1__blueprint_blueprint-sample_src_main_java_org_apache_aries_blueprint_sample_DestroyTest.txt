1:d15fd00: /*
1:d15fd00:  * Licensed to the Apache Software Foundation (ASF) under one
1:d15fd00:  * or more contributor license agreements.  See the NOTICE file
1:d15fd00:  * distributed with this work for additional information
1:d15fd00:  * regarding copyright ownership.  The ASF licenses this file
1:d15fd00:  * to you under the Apache License, Version 2.0 (the
1:d15fd00:  * "License"); you may not use this file except in compliance
1:d15fd00:  * with the License.  You may obtain a copy of the License at
1:d15fd00:  *
1:d15fd00:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d15fd00:  *
1:d15fd00:  * Unless required by applicable law or agreed to in writing,
1:d15fd00:  * software distributed under the License is distributed on an
1:d15fd00:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:d15fd00:  * KIND, either express or implied.  See the License for the
1:d15fd00:  * specific language governing permissions and limitations
1:d15fd00:  * under the License.
1:d15fd00:  */
1:d15fd00: package org.apache.aries.blueprint.sample;
1:d15fd00: 
1:d15fd00: public class DestroyTest
1:d15fd00: {
1:d15fd00:   private Runnable target;
1:d15fd00:   private Exception destroyFailure;
1:d15fd00:   private boolean destroyed;
1:d15fd00:   
1:d15fd00:   public void setTarget(Runnable r)
1:d15fd00:   {
1:d15fd00:     target = r;
1:d15fd00:   }
1:d15fd00:   
1:d15fd00:   public Exception getDestroyFailure()
1:d15fd00:   {
1:d15fd00:     return destroyFailure;
1:d15fd00:   }
1:d15fd00:   
1:d15fd00:   public void destroy()
1:d15fd00:   {
1:d15fd00:     try {
1:d15fd00:       target.run();
1:d15fd00:     } catch (Exception e) {
1:d15fd00:       destroyFailure = e;
1:d15fd00:     }
1:d15fd00:     
1:d15fd00:     synchronized (this) {
1:d15fd00:       destroyed = true;
1:d15fd00:       notifyAll();
1:d15fd00:     }
1:d15fd00:   }
1:d15fd00: 
1:d15fd00:   public synchronized boolean waitForDestruction(int timeout)
1:d15fd00:   {
1:d15fd00:     long startTime = System.currentTimeMillis();
1:d15fd00:     
1:d15fd00:     while (!!!destroyed && System.currentTimeMillis() - startTime < timeout) {
1:d15fd00:       try {
1:d15fd00:         wait(100);
1:d15fd00:       } catch (InterruptedException e) {
1:d15fd00:       }
1:d15fd00:     }
1:d15fd00:     
1:d15fd00:     return destroyed;
1:d15fd00:   }
1:d15fd00: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:d15fd00
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.sample;
1: 
1: public class DestroyTest
1: {
1:   private Runnable target;
1:   private Exception destroyFailure;
1:   private boolean destroyed;
1:   
1:   public void setTarget(Runnable r)
1:   {
1:     target = r;
1:   }
1:   
1:   public Exception getDestroyFailure()
1:   {
1:     return destroyFailure;
1:   }
1:   
1:   public void destroy()
1:   {
1:     try {
1:       target.run();
1:     } catch (Exception e) {
1:       destroyFailure = e;
1:     }
1:     
1:     synchronized (this) {
1:       destroyed = true;
1:       notifyAll();
1:     }
1:   }
1: 
1:   public synchronized boolean waitForDestruction(int timeout)
1:   {
1:     long startTime = System.currentTimeMillis();
1:     
1:     while (!!!destroyed && System.currentTimeMillis() - startTime < timeout) {
1:       try {
1:         wait(100);
1:       } catch (InterruptedException e) {
1:       }
1:     }
1:     
1:     return destroyed;
1:   }
1: }
============================================================================