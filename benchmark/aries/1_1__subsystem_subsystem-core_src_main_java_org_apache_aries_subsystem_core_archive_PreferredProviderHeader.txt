1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:f1b1384: package org.apache.aries.subsystem.core.archive;
17:f1b1384: 
1:f1b1384: import java.util.ArrayList;
1:f1b1384: import java.util.Collection;
1:f1b1384: import java.util.List;
1:f1b1384: 
1:67ef08f: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1:f1b1384: import org.osgi.framework.VersionRange;
1:f1b1384: import org.osgi.resource.Resource;
1:f1b1384: import org.osgi.service.subsystem.SubsystemConstants;
1:f1b1384: 
1:2ffcfb9: public class PreferredProviderHeader extends AbstractClauseBasedHeader<PreferredProviderHeader.Clause> implements RequirementHeader<PreferredProviderHeader.Clause> {
1:2ffcfb9:     public static class Clause extends AbstractClause {
1:f1b1384: 		public static final String ATTRIBUTE_TYPE = TypeAttribute.NAME;
1:2ffcfb9: 		public static final String ATTRIBUTE_VERSION = VersionRangeAttribute.NAME_VERSION;
1:f1b1384: 		
1:f1b1384: 		public Clause(String clause) {
1:2ffcfb9: 			super(
1:2ffcfb9: 					parsePath(clause, Patterns.SYMBOLIC_NAME, false), 
1:2ffcfb9: 					parseParameters(clause, true),
1:2ffcfb9: 					generateDefaultParameters(
1:2ffcfb9: 							VersionRangeAttribute.DEFAULT_VERSION,
1:2ffcfb9: 							TypeAttribute.newInstance(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE)));
20:f1b1384: 		}
1:f1b1384: 		
1:f1b1384: 		public boolean contains(Resource resource) {
1:f1b1384: 			return getSymbolicName().equals(
1:f1b1384: 					ResourceHelper.getSymbolicNameAttribute(resource))
1:f1b1384: 					&& getVersionRange().includes(
1:f1b1384: 							ResourceHelper.getVersionAttribute(resource))
1:f1b1384: 					&& getType().equals(
1:f1b1384: 							ResourceHelper.getTypeAttribute(resource));
1:f1b1384: 		}
1:f1b1384: 		
1:f1b1384: 		public String getSymbolicName() {
2:f1b1384: 			return path;
1:f1b1384: 		}
1:f1b1384: 		
1:f1b1384: 		public String getType() {
1:f1b1384: 			return (String)getAttribute(ATTRIBUTE_TYPE).getValue();
1:f1b1384: 		}
1:f1b1384: 		
1:f1b1384: 		public VersionRange getVersionRange() {
1:f1b1384: 			Attribute attribute = getAttribute(ATTRIBUTE_VERSION);
1:f1b1384: 			if (attribute instanceof VersionRangeAttribute)
1:f1b1384: 				return ((VersionRangeAttribute)attribute).getVersionRange();
1:f1b1384: 			return new VersionRange(attribute.getValue().toString());
1:f1b1384: 		}
1:2ffcfb9:         
1:67ef08f: 		public PreferredProviderRequirement toRequirement(Resource resource) {
1:67ef08f: 			return new PreferredProviderRequirement(this, resource);
1:67ef08f: 		}
1:67ef08f: 		
10:f1b1384: 		@Override
2:f1b1384: 		public String toString() {
1:f1b1384: 			StringBuilder builder = new StringBuilder()
1:f1b1384: 					.append(getPath());
1:f1b1384: 			for (Parameter parameter : getParameters()) {
1:f1b1384: 				builder.append(';').append(parameter);
1:f1b1384: 			}
2:f1b1384: 			return builder.toString();
1:f1b1384: 		}
1:f1b1384: 	}
1:f1b1384: 	
1:f1b1384: 	public static final String NAME = SubsystemConstants.PREFERRED_PROVIDER;
1:f1b1384: 	
1:f1b1384: 	public PreferredProviderHeader(Collection<Clause> clauses) {
1:2ffcfb9: 		super(clauses);
1:f1b1384: 	}
1:f1b1384: 	
1:f1b1384: 	public PreferredProviderHeader(String value) {
1:2ffcfb9: 		super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:f1b1384: 	}
1:f1b1384: 	
1:f1b1384: 	public boolean contains(Resource resource) {
1:f1b1384: 		for (Clause clause : getClauses())
1:f1b1384: 			if (clause.contains(resource))
1:f1b1384: 				return true;
1:f1b1384: 		return false;
1:f1b1384: 	}
1:f1b1384: 	
1:f1b1384: 	@Override
1:f1b1384: 	public String getName() {
1:f1b1384: 		return NAME;
1:f1b1384: 	}
1:f1b1384: 
1:f1b1384: 	@Override
1:f1b1384: 	public String getValue() {
1:f1b1384: 		return toString();
1:f1b1384: 	}
1:f1b1384: 	
1:f1b1384: 	@Override
1:67ef08f: 	public List<PreferredProviderRequirement> toRequirements(Resource resource) {
1:67ef08f: 		List<PreferredProviderRequirement> requirements = new ArrayList<PreferredProviderRequirement>(clauses.size());
1:67ef08f: 		for (Clause clause : clauses)
1:67ef08f: 			requirements.add(clause.toRequirement(resource));
1:f1b1384: 		return requirements;
1:f1b1384: 	}
1:f1b1384: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: public class PreferredProviderHeader extends AbstractClauseBasedHeader<PreferredProviderHeader.Clause> implements RequirementHeader<PreferredProviderHeader.Clause> {
1:     public static class Clause extends AbstractClause {
1: 		public static final String ATTRIBUTE_VERSION = VersionRangeAttribute.NAME_VERSION;
1: 			super(
1: 					parsePath(clause, Patterns.SYMBOLIC_NAME, false), 
1: 					parseParameters(clause, true),
1: 					generateDefaultParameters(
1: 							VersionRangeAttribute.DEFAULT_VERSION,
1: 							TypeAttribute.newInstance(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE)));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         
/////////////////////////////////////////////////////////////////////////
1: 		super(clauses);
1: 		super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:e341c9b
/////////////////////////////////////////////////////////////////////////
0: 				if (parameter instanceof VersionAttribute)
0: 					parameter = new VersionRangeAttribute(new VersionRange(String.valueOf(parameter.getValue())));
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.ResourceHelper;
/////////////////////////////////////////////////////////////////////////
0: 				parameters.put(ATTRIBUTE_VERSION, VersionRangeAttribute.DEFAULT);
/////////////////////////////////////////////////////////////////////////
1: 		public PreferredProviderRequirement toRequirement(Resource resource) {
1: 			return new PreferredProviderRequirement(this, resource);
1: 		}
1: 		
/////////////////////////////////////////////////////////////////////////
1: 	public List<PreferredProviderRequirement> toRequirements(Resource resource) {
1: 		List<PreferredProviderRequirement> requirements = new ArrayList<PreferredProviderRequirement>(clauses.size());
1: 		for (Clause clause : clauses)
1: 			requirements.add(clause.toRequirement(resource));
commit:23d86e6
/////////////////////////////////////////////////////////////////////////
0: 	private static final Pattern PATTERN = Pattern.compile('(' + Grammar.RESOURCE + ")(?=,|\\z)");
/////////////////////////////////////////////////////////////////////////
0: 		// TODO What's going on here? Why is this commented out?
commit:f1b1384
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.HashSet;
1: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
0: import org.apache.aries.subsystem.core.ResourceHelper;
1: import org.osgi.framework.VersionRange;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
0: public class PreferredProviderHeader implements RequirementHeader<PreferredProviderHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
1: 		public static final String ATTRIBUTE_TYPE = TypeAttribute.NAME;
0: 		public static final String ATTRIBUTE_VERSION = VersionAttribute.NAME;
1: 		
0: 		private static final Pattern PATTERN_SYMBOLICNAME = Pattern.compile('(' + Grammar.SYMBOLICNAME + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PARAMETER = Pattern.compile('(' + Grammar.PARAMETER + ")(?=;|\\z)");
1: 		
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 			Parameter parameter = parameters.get(ATTRIBUTE_VERSION);
0: 			if (parameter == null)
0: 				parameters.put(ATTRIBUTE_VERSION, VersionAttribute.DEFAULT);
0: 			parameter = parameters.get(ATTRIBUTE_TYPE);
0: 			if (parameter == null)
0: 				parameters.put(ATTRIBUTE_TYPE, TypeAttribute.newInstance(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE));
1: 		}
1: 		
0: 		private final String path;
0: 		private final Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		
1: 		public Clause(String clause) {
0: 			Matcher matcher = PATTERN_SYMBOLICNAME.matcher(clause);
0: 			if (!matcher.find())
0: 				throw new IllegalArgumentException("Missing resource path: " + clause);
0: 			path = matcher.group();
0: 			matcher.usePattern(PATTERN_PARAMETER);
0: 			while (matcher.find()) {
0: 				Parameter parameter = ParameterFactory.create(matcher.group());
0: 				parameters.put(parameter.getName(), parameter);
1: 			}
0: 			fillInDefaults(parameters);
1: 		}
1: 		
1: 		public boolean contains(Resource resource) {
1: 			return getSymbolicName().equals(
1: 					ResourceHelper.getSymbolicNameAttribute(resource))
1: 					&& getVersionRange().includes(
1: 							ResourceHelper.getVersionAttribute(resource))
1: 					&& getType().equals(
1: 							ResourceHelper.getTypeAttribute(resource));
1: 		}
1: 		
1: 		@Override
0: 		public Attribute getAttribute(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Attribute) {
0: 				return (Attribute)result;
1: 			}
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Attribute> getAttributes() {
0: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
0: 			for (Parameter parameter : parameters.values()) {
0: 				if (parameter instanceof Attribute) {
0: 					attributes.add((Attribute)parameter);
1: 				}
1: 			}
0: 			attributes.trimToSize();
0: 			return attributes;
1: 		}
1: 
1: 		@Override
0: 		public Directive getDirective(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Directive) {
0: 				return (Directive)result;
1: 			}
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Directive> getDirectives() {
0: 			ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
0: 			for (Parameter parameter : parameters.values()) {
0: 				if (parameter instanceof Directive) {
0: 					directives.add((Directive)parameter);
1: 				}
1: 			}
0: 			directives.trimToSize();
0: 			return directives;
1: 		}
1: 
1: 		@Override
0: 		public Parameter getParameter(String name) {
0: 			return parameters.get(name);
1: 		}
1: 
1: 		@Override
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.unmodifiableCollection(parameters.values());
1: 		}
1: 
1: 		@Override
0: 		public String getPath() {
1: 			return path;
1: 		}
1: 		
1: 		public String getSymbolicName() {
1: 			return path;
1: 		}
1: 		
1: 		public String getType() {
1: 			return (String)getAttribute(ATTRIBUTE_TYPE).getValue();
1: 		}
1: 		
1: 		public VersionRange getVersionRange() {
1: 			Attribute attribute = getAttribute(ATTRIBUTE_VERSION);
1: 			if (attribute instanceof VersionRangeAttribute)
1: 				return ((VersionRangeAttribute)attribute).getVersionRange();
1: 			return new VersionRange(attribute.getValue().toString());
1: 		}
1: 		
1: 		@Override
1: 		public String toString() {
1: 			StringBuilder builder = new StringBuilder()
1: 					.append(getPath());
1: 			for (Parameter parameter : getParameters()) {
1: 				builder.append(';').append(parameter);
1: 			}
1: 			return builder.toString();
1: 		}
1: 	}
1: 	
1: 	public static final String NAME = SubsystemConstants.PREFERRED_PROVIDER;
1: 
0: 	private static final Pattern PATTERN = Pattern.compile('(' + Grammar.PREFERRED_PROVIDER + ")(?=,|\\z)");
1: 	
0: 	private static Collection<Clause> processHeader(String header) {
0: 		Matcher matcher = PATTERN.matcher(header);
0: 		Set<Clause> clauses = new HashSet<Clause>();
0: 		while (matcher.find())
0: 			clauses.add(new Clause(matcher.group()));
0: 		return clauses;
1: 	}
1: 	
0: 	private final Set<Clause> clauses;
1: 	
1: 	public PreferredProviderHeader(Collection<Clause> clauses) {
0: 		if (clauses.isEmpty())
0: 			throw new IllegalArgumentException("A " + NAME + " header must have at least one clause");
0: 		this.clauses = new HashSet<Clause>(clauses);
1: 	}
1: 	
1: 	public PreferredProviderHeader(String value) {
0: 		this(processHeader(value));
1: 	}
1: 	
1: 	public boolean contains(Resource resource) {
1: 		for (Clause clause : getClauses())
1: 			if (clause.contains(resource))
1: 				return true;
1: 		return false;
1: 	}
1: 	
1: 	@Override
0: 	public Collection<PreferredProviderHeader.Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
1: 	}
1: 
1: 	@Override
1: 	public String getName() {
1: 		return NAME;
1: 	}
1: 
1: 	@Override
1: 	public String getValue() {
1: 		return toString();
1: 	}
1: 	
1: 	@Override
0: 	public List<RequireBundleRequirement> toRequirements(Resource resource) {
0: 		List<RequireBundleRequirement> requirements = new ArrayList<RequireBundleRequirement>(clauses.size());
0: //		for (Clause clause : clauses)
0: //			requirements.add(clause.toRequirement(resource));
1: 		return requirements;
1: 	}
1: 	
1: 	@Override
1: 	public String toString() {
0: 		StringBuilder builder = new StringBuilder();
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause).append(',');
1: 		}
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
0: 		builder.deleteCharAt(builder.length() - 1);
1: 		return builder.toString();
1: 	}
1: }
============================================================================