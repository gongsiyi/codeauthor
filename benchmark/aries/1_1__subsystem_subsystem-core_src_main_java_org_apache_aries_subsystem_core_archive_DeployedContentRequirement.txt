1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:4b41d3d: package org.apache.aries.subsystem.core.archive;
1:4b41d3d: 
1:4b41d3d: import java.util.Collections;
1:4b41d3d: import java.util.HashMap;
1:4b41d3d: import java.util.Map;
1:4b41d3d: 
1:4b41d3d: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
1:4b41d3d: import org.osgi.framework.namespace.IdentityNamespace;
1:4b41d3d: import org.osgi.resource.Resource;
1:4b41d3d: 
1:4b41d3d: public class DeployedContentRequirement extends AbstractRequirement {
1:4b41d3d: 	public static final String DIRECTIVE_FILTER = IdentityNamespace.REQUIREMENT_FILTER_DIRECTIVE;
1:4b41d3d: 	public static final String NAMESPACE = IdentityNamespace.IDENTITY_NAMESPACE;
1:4b41d3d: 	
1:4b41d3d: 	private final Map<String, String> directives = new HashMap<String, String>();
1:4b41d3d: 	private final Resource resource;
1:4b41d3d: 	
1:4b41d3d: 	public DeployedContentRequirement(
1:4b41d3d: 			DeployedContentHeader.Clause clause, Resource resource) {
1:4b41d3d: 		StringBuilder builder = new StringBuilder("(&(")
1:4b41d3d: 				.append(NAMESPACE).append('=')
1:4b41d3d: 				.append(clause.getSymbolicName()).append(')');
1:4b41d3d: 		for (Attribute attribute : clause.getAttributes())
1:4b41d3d: 			attribute.appendToFilter(builder);
1:4b41d3d: 		directives.put(DIRECTIVE_FILTER, builder.append(')').toString());
1:4b41d3d: 		this.resource = resource;
1:4b41d3d: 	}
1:4b41d3d: 
1:4b41d3d: 	@Override
1:4b41d3d: 	public Map<String, Object> getAttributes() {
1:4b41d3d: 		return Collections.emptyMap();
1:4b41d3d: 	}
1:4b41d3d: 
1:4b41d3d: 	@Override
1:4b41d3d: 	public Map<String, String> getDirectives() {
1:4b41d3d: 		return Collections.unmodifiableMap(directives);
1:4b41d3d: 	}
1:4b41d3d: 
1:4b41d3d: 	@Override
1:4b41d3d: 	public String getNamespace() {
1:4b41d3d: 		return NAMESPACE;
1:4b41d3d: 	}
1:4b41d3d: 
1:4b41d3d: 	@Override
1:4b41d3d: 	public Resource getResource() {
1:4b41d3d: 		return resource;
1:4b41d3d: 	}
1:4b41d3d: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:4b41d3d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.resource.Resource;
1: 
1: public class DeployedContentRequirement extends AbstractRequirement {
1: 	public static final String DIRECTIVE_FILTER = IdentityNamespace.REQUIREMENT_FILTER_DIRECTIVE;
1: 	public static final String NAMESPACE = IdentityNamespace.IDENTITY_NAMESPACE;
1: 	
1: 	private final Map<String, String> directives = new HashMap<String, String>();
1: 	private final Resource resource;
1: 	
1: 	public DeployedContentRequirement(
1: 			DeployedContentHeader.Clause clause, Resource resource) {
1: 		StringBuilder builder = new StringBuilder("(&(")
1: 				.append(NAMESPACE).append('=')
1: 				.append(clause.getSymbolicName()).append(')');
1: 		for (Attribute attribute : clause.getAttributes())
1: 			attribute.appendToFilter(builder);
1: 		directives.put(DIRECTIVE_FILTER, builder.append(')').toString());
1: 		this.resource = resource;
1: 	}
1: 
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.emptyMap();
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.unmodifiableMap(directives);
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
1: 		return NAMESPACE;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================