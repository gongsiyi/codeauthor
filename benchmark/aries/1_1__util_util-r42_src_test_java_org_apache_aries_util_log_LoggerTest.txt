1:6e99237: /*
1:6e99237:  * Licensed to the Apache Software Foundation (ASF) under one
1:6e99237:  * or more contributor license agreements.  See the NOTICE file
1:6e99237:  * distributed with this work for additional information
1:6e99237:  * regarding copyright ownership.  The ASF licenses this file
1:6e99237:  * to you under the Apache License, Version 2.0 (the
1:6e99237:  * "License"); you may not use this file except in compliance
1:6e99237:  * with the License.  You may obtain a copy of the License at
1:6e99237:  *
1:6e99237:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6e99237:  *
1:6e99237:  * Unless required by applicable law or agreed to in writing,
1:6e99237:  * software distributed under the License is distributed on an
1:6e99237:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6e99237:  * KIND, either express or implied.  See the License for the
1:6e99237:  * specific language governing permissions and limitations
1:6e99237:  * under the License.
1:6e99237:  */
1:6e99237: package org.apache.aries.util.log;
1:6e99237: 
1:6e99237: import java.util.ArrayList;
1:6e99237: import java.util.Collections;
1:6e99237: import java.util.List;
1:6e99237: 
1:6e99237: import org.apache.aries.mocks.BundleContextMock;
1:6e99237: import org.apache.aries.unittest.mocks.Skeleton;
1:6e99237: import org.junit.After;
1:6e99237: import org.junit.Assert;
1:6e99237: import org.junit.Before;
1:6e99237: import org.junit.Test;
1:6e99237: import org.osgi.framework.Bundle;
1:6e99237: import org.osgi.framework.BundleContext;
1:6e99237: import org.osgi.framework.ServiceReference;
1:6e99237: import org.osgi.service.log.LogService;
1:6e99237: 
1:6e99237: public class LoggerTest {
1:6e99237:     private BundleContext ctx;
1:6e99237: 
1:6e99237:     @Before
1:6e99237:     public void setup() {
1:6e99237:         ctx = Skeleton.newMock(new BundleContextMock(), BundleContext.class);
1:6e99237:     }
1:6e99237: 
1:6e99237:     @After
1:6e99237:     public void teardown() {
1:6e99237:         BundleContextMock.clear();
1:6e99237:     }
1:6e99237: 
1:6e99237:     @Test
1:6e99237:     public void testLogger() {
1:6e99237:         Logger logger = new Logger(ctx);
1:6e99237:         logger.open();
1:6e99237: 
1:6e99237:         logger.log(LogService.LOG_INFO, "This message will disappear");
1:6e99237: 
1:6e99237:         TestLogService tls = new TestLogService();
1:6e99237:         ctx.registerService(LogService.class.getName(), tls, null);
1:6e99237: 
1:6e99237:         Assert.assertEquals("Precondition", 0, tls.logData.size());
1:6e99237:         logger.log(LogService.LOG_INFO, "Hi");
1:6e99237: 
1:6e99237:         Assert.assertEquals(1, tls.logData.size());
1:6e99237:         LogData ld = tls.logData.get(0);
1:6e99237:         Assert.assertEquals(LogService.LOG_INFO, ld.level);
1:6e99237:         Assert.assertEquals("Hi", ld.message);
1:6e99237: 
1:6e99237:         logger.close();
1:6e99237: 
1:6e99237:         logger.log(LogService.LOG_INFO, "This message will disappear too");
1:6e99237:         Assert.assertEquals("The logger was closed so log messages shouldn't appear in the LogService any more",
1:6e99237:                 1, tls.logData.size());
1:6e99237:     }
1:6e99237: 
1:6e99237:     @Test
1:6e99237:     public void testLogger2() {
1:6e99237:         Logger logger = new Logger(ctx);
1:6e99237:         logger.open();
1:6e99237:         TestLogService tls = new TestLogService();
1:6e99237:         ctx.registerService(LogService.class.getName(), tls, null);
1:6e99237: 
1:6e99237:         Assert.assertEquals("Precondition", 0, tls.logData.size());
1:6e99237:         Throwable th = new Throwable();
1:6e99237:         logger.log(LogService.LOG_INFO, "Hi", th);
1:6e99237: 
1:6e99237:         Assert.assertEquals(1, tls.logData.size());
1:6e99237:         LogData ld = tls.logData.get(0);
1:6e99237:         Assert.assertEquals(LogService.LOG_INFO, ld.level);
1:6e99237:         Assert.assertEquals("Hi", ld.message);
1:6e99237:         Assert.assertEquals(th, ld.throwable);
1:6e99237:     }
1:6e99237: 
1:6e99237:     @Test
1:6e99237:     public void testLogger3() {
1:6e99237:         Logger logger = new Logger(ctx);
1:6e99237:         logger.open();
1:6e99237:         TestLogService tls = new TestLogService();
1:6e99237:         ctx.registerService(LogService.class.getName(), tls, null);
1:6e99237: 
1:6e99237:         Assert.assertEquals("Precondition", 0, tls.logData.size());
1:6e99237:         ServiceReference sr = new MockServiceReference();
1:6e99237:         logger.log(sr, LogService.LOG_INFO, "Hi");
1:6e99237: 
1:6e99237:         Assert.assertEquals(1, tls.logData.size());
1:6e99237:         LogData ld = tls.logData.get(0);
1:6e99237:         Assert.assertSame(sr, ld.serviceReference);
1:6e99237:         Assert.assertEquals(LogService.LOG_INFO, ld.level);
1:6e99237:         Assert.assertEquals("Hi", ld.message);
1:6e99237:     }
1:6e99237: 
1:6e99237:     @Test
1:6e99237:     public void testLogger4() {
1:6e99237:         Logger logger = new Logger(ctx);
1:6e99237:         logger.open();
1:6e99237:         TestLogService tls = new TestLogService();
1:6e99237:         ctx.registerService(LogService.class.getName(), tls, null);
1:6e99237: 
1:6e99237:         Assert.assertEquals("Precondition", 0, tls.logData.size());
1:6e99237:         ServiceReference sr = new MockServiceReference();
1:6e99237:         Throwable th = new Throwable();
1:6e99237:         logger.log(sr, LogService.LOG_INFO, "Hi", th);
1:6e99237: 
1:6e99237:         Assert.assertEquals(1, tls.logData.size());
1:6e99237:         LogData ld = tls.logData.get(0);
1:6e99237:         Assert.assertSame(sr, ld.serviceReference);
1:6e99237:         Assert.assertEquals(LogService.LOG_INFO, ld.level);
1:6e99237:         Assert.assertEquals("Hi", ld.message);
1:6e99237:         Assert.assertEquals(th, ld.throwable);
1:6e99237:     }
1:6e99237: 
1:6e99237:     private class TestLogService implements LogService {
1:6e99237:         List<LogData> logData = Collections.synchronizedList(new ArrayList<LogData>());
1:6e99237: 
1:6e99237:         public void log(int level, String message) {
1:6e99237:             logData.add(new LogData(null, level, message, null));
1:6e99237:         }
1:6e99237: 
1:6e99237:         public void log(int level, String message, Throwable exception) {
1:6e99237:             logData.add(new LogData(null, level, message, exception));
1:6e99237:         }
1:6e99237: 
1:6e99237:         public void log(ServiceReference sr, int level, String message) {
1:6e99237:             logData.add(new LogData(sr, level, message, null));
1:6e99237:         }
1:6e99237: 
1:6e99237:         public void log(ServiceReference sr, int level, String message, Throwable exception) {
1:6e99237:             logData.add(new LogData(sr, level, message, exception));
1:6e99237:         }
1:6e99237:     }
1:6e99237: 
1:6e99237:     private static class LogData {
1:6e99237:         private final ServiceReference serviceReference;
1:6e99237:         private final int level;
1:6e99237:         private final String message;
1:6e99237:         private final Throwable throwable;
1:6e99237: 
1:6e99237:         private LogData(ServiceReference sr, int level, String message, Throwable th) {
1:6e99237:             this.serviceReference = sr;
1:6e99237:             this.level = level;
1:6e99237:             this.message = message;
1:6e99237:             this.throwable = th;
1:6e99237:         }
1:6e99237:     }
1:6e99237: 
1:6e99237:     private static class MockServiceReference implements ServiceReference {
1:6e99237:         public Object getProperty(String key) {
1:6e99237:             return null;
1:6e99237:         }
1:6e99237: 
1:6e99237:         public String[] getPropertyKeys() {
1:6e99237:             return null;
1:6e99237:         }
1:6e99237: 
1:6e99237:         public Bundle getBundle() {
1:6e99237:             return null;
1:6e99237:         }
1:6e99237: 
1:6e99237:         public Bundle[] getUsingBundles() {
1:6e99237:             return null;
1:6e99237:         }
1:6e99237: 
1:6e99237:         public boolean isAssignableTo(Bundle bundle, String className) {
1:6e99237:             return false;
1:6e99237:         }
1:6e99237: 
1:6e99237:         public int compareTo(Object reference) {
1:6e99237:             return 0;
1:6e99237:         }
1:6e99237:     }
1:6e99237: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:6e99237
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util.log;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import org.apache.aries.mocks.BundleContextMock;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.log.LogService;
1: 
1: public class LoggerTest {
1:     private BundleContext ctx;
1: 
1:     @Before
1:     public void setup() {
1:         ctx = Skeleton.newMock(new BundleContextMock(), BundleContext.class);
1:     }
1: 
1:     @After
1:     public void teardown() {
1:         BundleContextMock.clear();
1:     }
1: 
1:     @Test
1:     public void testLogger() {
1:         Logger logger = new Logger(ctx);
1:         logger.open();
1: 
1:         logger.log(LogService.LOG_INFO, "This message will disappear");
1: 
1:         TestLogService tls = new TestLogService();
1:         ctx.registerService(LogService.class.getName(), tls, null);
1: 
1:         Assert.assertEquals("Precondition", 0, tls.logData.size());
1:         logger.log(LogService.LOG_INFO, "Hi");
1: 
1:         Assert.assertEquals(1, tls.logData.size());
1:         LogData ld = tls.logData.get(0);
1:         Assert.assertEquals(LogService.LOG_INFO, ld.level);
1:         Assert.assertEquals("Hi", ld.message);
1: 
1:         logger.close();
1: 
1:         logger.log(LogService.LOG_INFO, "This message will disappear too");
1:         Assert.assertEquals("The logger was closed so log messages shouldn't appear in the LogService any more",
1:                 1, tls.logData.size());
1:     }
1: 
1:     @Test
1:     public void testLogger2() {
1:         Logger logger = new Logger(ctx);
1:         logger.open();
1:         TestLogService tls = new TestLogService();
1:         ctx.registerService(LogService.class.getName(), tls, null);
1: 
1:         Assert.assertEquals("Precondition", 0, tls.logData.size());
1:         Throwable th = new Throwable();
1:         logger.log(LogService.LOG_INFO, "Hi", th);
1: 
1:         Assert.assertEquals(1, tls.logData.size());
1:         LogData ld = tls.logData.get(0);
1:         Assert.assertEquals(LogService.LOG_INFO, ld.level);
1:         Assert.assertEquals("Hi", ld.message);
1:         Assert.assertEquals(th, ld.throwable);
1:     }
1: 
1:     @Test
1:     public void testLogger3() {
1:         Logger logger = new Logger(ctx);
1:         logger.open();
1:         TestLogService tls = new TestLogService();
1:         ctx.registerService(LogService.class.getName(), tls, null);
1: 
1:         Assert.assertEquals("Precondition", 0, tls.logData.size());
1:         ServiceReference sr = new MockServiceReference();
1:         logger.log(sr, LogService.LOG_INFO, "Hi");
1: 
1:         Assert.assertEquals(1, tls.logData.size());
1:         LogData ld = tls.logData.get(0);
1:         Assert.assertSame(sr, ld.serviceReference);
1:         Assert.assertEquals(LogService.LOG_INFO, ld.level);
1:         Assert.assertEquals("Hi", ld.message);
1:     }
1: 
1:     @Test
1:     public void testLogger4() {
1:         Logger logger = new Logger(ctx);
1:         logger.open();
1:         TestLogService tls = new TestLogService();
1:         ctx.registerService(LogService.class.getName(), tls, null);
1: 
1:         Assert.assertEquals("Precondition", 0, tls.logData.size());
1:         ServiceReference sr = new MockServiceReference();
1:         Throwable th = new Throwable();
1:         logger.log(sr, LogService.LOG_INFO, "Hi", th);
1: 
1:         Assert.assertEquals(1, tls.logData.size());
1:         LogData ld = tls.logData.get(0);
1:         Assert.assertSame(sr, ld.serviceReference);
1:         Assert.assertEquals(LogService.LOG_INFO, ld.level);
1:         Assert.assertEquals("Hi", ld.message);
1:         Assert.assertEquals(th, ld.throwable);
1:     }
1: 
1:     private class TestLogService implements LogService {
1:         List<LogData> logData = Collections.synchronizedList(new ArrayList<LogData>());
1: 
1:         public void log(int level, String message) {
1:             logData.add(new LogData(null, level, message, null));
1:         }
1: 
1:         public void log(int level, String message, Throwable exception) {
1:             logData.add(new LogData(null, level, message, exception));
1:         }
1: 
1:         public void log(ServiceReference sr, int level, String message) {
1:             logData.add(new LogData(sr, level, message, null));
1:         }
1: 
1:         public void log(ServiceReference sr, int level, String message, Throwable exception) {
1:             logData.add(new LogData(sr, level, message, exception));
1:         }
1:     }
1: 
1:     private static class LogData {
1:         private final ServiceReference serviceReference;
1:         private final int level;
1:         private final String message;
1:         private final Throwable throwable;
1: 
1:         private LogData(ServiceReference sr, int level, String message, Throwable th) {
1:             this.serviceReference = sr;
1:             this.level = level;
1:             this.message = message;
1:             this.throwable = th;
1:         }
1:     }
1: 
1:     private static class MockServiceReference implements ServiceReference {
1:         public Object getProperty(String key) {
1:             return null;
1:         }
1: 
1:         public String[] getPropertyKeys() {
1:             return null;
1:         }
1: 
1:         public Bundle getBundle() {
1:             return null;
1:         }
1: 
1:         public Bundle[] getUsingBundles() {
1:             return null;
1:         }
1: 
1:         public boolean isAssignableTo(Bundle bundle, String className) {
1:             return false;
1:         }
1: 
1:         public int compareTo(Object reference) {
1:             return 0;
1:         }
1:     }
1: }
============================================================================