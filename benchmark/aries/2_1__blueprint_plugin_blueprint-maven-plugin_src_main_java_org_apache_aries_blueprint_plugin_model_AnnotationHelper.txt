1:c201f83: /**
1:c201f83:  * Licensed to the Apache Software Foundation (ASF) under one
1:c201f83:  * or more contributor license agreements.  See the NOTICE file
1:c201f83:  * distributed with this work for additional information
1:c201f83:  * regarding copyright ownership.  The ASF licenses this file
1:c201f83:  * to you under the Apache License, Version 2.0 (the
1:c201f83:  * "License"); you may not use this file except in compliance
1:c201f83:  * with the License.  You may obtain a copy of the License at
1:c201f83:  *
1:c201f83:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c201f83:  *
1:c201f83:  * Unless required by applicable law or agreed to in writing,
1:c201f83:  * software distributed under the License is distributed on an
1:c201f83:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c201f83:  * KIND, either express or implied.  See the License for the
1:c201f83:  * specific language governing permissions and limitations
1:c201f83:  * under the License.
1:c201f83:  */
1:c201f83: package org.apache.aries.blueprint.plugin.model;
1:c201f83: 
1:c201f83: import org.apache.aries.blueprint.plugin.Extensions;
1:c201f83: import org.apache.aries.blueprint.plugin.spi.InjectLikeHandler;
1:c201f83: import org.apache.aries.blueprint.plugin.spi.NamedLikeHandler;
1:c201f83: import org.apache.aries.blueprint.plugin.spi.ValueInjectionHandler;
1:c201f83: 
1:c201f83: import java.lang.annotation.Annotation;
1:c201f83: import java.util.ArrayList;
1:c201f83: import java.util.List;
1:c201f83: 
1:c201f83: public class AnnotationHelper {
1:c201f83:     public static Class<? extends Annotation>[] injectDependencyAnnotations = findInjectDependencyAnnotations();
1:c201f83: 
1:c201f83:     private static Class<? extends Annotation>[] findInjectDependencyAnnotations() {
1:c201f83:         List<Class<? extends Annotation>> classes = new ArrayList<>();
1:c201f83:         for (InjectLikeHandler<? extends Annotation> injectLikeHandler : Extensions.beanInjectLikeHandlers) {
1:c201f83:             classes.add(injectLikeHandler.getAnnotation());
1:c201f83:         }
1:c201f83:         for (ValueInjectionHandler<? extends Annotation> valueInjectionHandler : Extensions.valueInjectionHandlers) {
1:c201f83:             classes.add(valueInjectionHandler.getAnnotation());
1:c201f83:         }
1:c201f83:         return classes.toArray(new Class[classes.size()]);
1:c201f83:     }
1:c201f83: 
1:c201f83:     public static String findValue(Annotation[] annotations) {
1:c201f83:         for (ValueInjectionHandler valueInjectionHandler : Extensions.valueInjectionHandlers) {
1:c201f83:             Object annotation = findAnnotation(annotations, valueInjectionHandler.getAnnotation());
1:c201f83:             if (annotation != null) {
1:c201f83:                 String value = valueInjectionHandler.getValue(annotation);
1:c201f83:                 if (value != null) {
1:c201f83:                     return value;
1:c201f83:                 }
1:c201f83:             }
1:c201f83:         }
1:c201f83:         return null;
1:c201f83:     }
1:c201f83: 
1:c201f83:     public static String findName(Annotation[] annotations) {
1:c201f83:         for (NamedLikeHandler namedLikeHandler : Extensions.namedLikeHandlers) {
1:c201f83:             Object annotation = findAnnotation(annotations, namedLikeHandler.getAnnotation());
1:c201f83:             if (annotation != null) {
1:c201f83:                 String value = namedLikeHandler.getName(annotation);
1:c201f83:                 if (value != null) {
1:c201f83:                     return value;
1:c201f83:                 }
1:c201f83:             }
1:c201f83:         }
1:c201f83:         return null;
1:c201f83:     }
1:c201f83: 
1:c201f83:     public static <T> T findAnnotation(Annotation[] annotations, Class<T> annotation) {
1:c201f83:         for (Annotation a : annotations) {
1:c201f83:             if (a.annotationType() == annotation) {
1:c201f83:                 return annotation.cast(a);
1:c201f83:             }
1:c201f83:         }
1:c201f83:         return null;
1:c201f83:     }
1:c201f83: 
1:c201f83:     public static boolean findSingletons(Annotation[] annotations) {
1:c201f83:         for (Class<? extends Annotation> singletonAnnotation : Extensions.singletons) {
1:c201f83:             Object annotation = findAnnotation(annotations, singletonAnnotation);
1:c201f83:             if (annotation != null) {
1:c201f83:                 return true;
1:c201f83:             }
1:c201f83:         }
1:c201f83:         return false;
1:c201f83:     }
1:c201f83: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:c201f83
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin.model;
1: 
1: import org.apache.aries.blueprint.plugin.Extensions;
1: import org.apache.aries.blueprint.plugin.spi.InjectLikeHandler;
1: import org.apache.aries.blueprint.plugin.spi.NamedLikeHandler;
1: import org.apache.aries.blueprint.plugin.spi.ValueInjectionHandler;
1: 
1: import java.lang.annotation.Annotation;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: public class AnnotationHelper {
1:     public static Class<? extends Annotation>[] injectDependencyAnnotations = findInjectDependencyAnnotations();
1: 
1:     private static Class<? extends Annotation>[] findInjectDependencyAnnotations() {
1:         List<Class<? extends Annotation>> classes = new ArrayList<>();
1:         for (InjectLikeHandler<? extends Annotation> injectLikeHandler : Extensions.beanInjectLikeHandlers) {
1:             classes.add(injectLikeHandler.getAnnotation());
1:         }
1:         for (ValueInjectionHandler<? extends Annotation> valueInjectionHandler : Extensions.valueInjectionHandlers) {
1:             classes.add(valueInjectionHandler.getAnnotation());
1:         }
1:         return classes.toArray(new Class[classes.size()]);
1:     }
1: 
1:     public static String findValue(Annotation[] annotations) {
1:         for (ValueInjectionHandler valueInjectionHandler : Extensions.valueInjectionHandlers) {
1:             Object annotation = findAnnotation(annotations, valueInjectionHandler.getAnnotation());
1:             if (annotation != null) {
1:                 String value = valueInjectionHandler.getValue(annotation);
1:                 if (value != null) {
1:                     return value;
1:                 }
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     public static String findName(Annotation[] annotations) {
1:         for (NamedLikeHandler namedLikeHandler : Extensions.namedLikeHandlers) {
1:             Object annotation = findAnnotation(annotations, namedLikeHandler.getAnnotation());
1:             if (annotation != null) {
1:                 String value = namedLikeHandler.getName(annotation);
1:                 if (value != null) {
1:                     return value;
1:                 }
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     public static <T> T findAnnotation(Annotation[] annotations, Class<T> annotation) {
1:         for (Annotation a : annotations) {
1:             if (a.annotationType() == annotation) {
1:                 return annotation.cast(a);
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     public static boolean findSingletons(Annotation[] annotations) {
1:         for (Class<? extends Annotation> singletonAnnotation : Extensions.singletons) {
1:             Object annotation = findAnnotation(annotations, singletonAnnotation);
1:             if (annotation != null) {
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
1: }
============================================================================