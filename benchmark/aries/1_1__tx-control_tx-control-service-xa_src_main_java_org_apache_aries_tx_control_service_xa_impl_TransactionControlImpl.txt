1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:78dd69f: package org.apache.aries.tx.control.service.xa.impl;
2:78dd69f: 
1:7f1e7ab: import static org.apache.aries.tx.control.service.xa.impl.Activator.ChangeType.RECREATE;
1:7f1e7ab: import static org.apache.aries.tx.control.service.xa.impl.Activator.ChangeType.SERVICE_PROPS;
1:80b5875: import static org.apache.aries.tx.control.service.xa.impl.LocalResourceSupport.DISABLED;
1:cc2f539: import static org.apache.aries.tx.control.service.xa.impl.LocalResourceSupport.ENFORCE_SINGLE;
1:7f1e7ab: 
1:7f1e7ab: import java.io.File;
1:3bca813: import java.lang.reflect.Field;
1:7f1e7ab: import java.util.Dictionary;
1:7f1e7ab: import java.util.HashMap;
1:7f1e7ab: import java.util.Hashtable;
1:7f1e7ab: import java.util.Map;
1:7f1e7ab: 
1:47a70d3: import javax.resource.spi.IllegalStateException;
1:47a70d3: import javax.transaction.SystemException;
1:47a70d3: import javax.transaction.xa.XAResource;
1:47a70d3: 
1:78dd69f: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionContextImpl;
1:78dd69f: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionControlImpl;
1:7f1e7ab: import org.apache.aries.tx.control.service.xa.impl.Activator.ChangeType;
1:7f1e7ab: import org.apache.geronimo.transaction.log.HOWLLog;
1:47a70d3: import org.apache.geronimo.transaction.manager.NamedXAResource;
1:47a70d3: import org.apache.geronimo.transaction.manager.NamedXAResourceFactory;
1:47a70d3: import org.apache.geronimo.transaction.manager.RecoveryWorkAroundTransactionManager;
1:7f1e7ab: import org.apache.geronimo.transaction.manager.XidFactory;
1:7f1e7ab: import org.apache.geronimo.transaction.manager.XidFactoryImpl;
1:7f1e7ab: import org.osgi.framework.BundleContext;
1:7f1e7ab: import org.osgi.framework.Constants;
1:47a70d3: import org.osgi.framework.ServiceReference;
1:47a70d3: import org.osgi.service.transaction.control.recovery.RecoverableXAResource;
1:47a70d3: import org.osgi.util.tracker.ServiceTracker;
1:47a70d3: import org.slf4j.Logger;
1:47a70d3: import org.slf4j.LoggerFactory;
1:78dd69f: 
1:78dd69f: public class TransactionControlImpl extends AbstractTransactionControlImpl {
1:78dd69f: 
1:47a70d3: 	private static final Logger logger = LoggerFactory.getLogger(TransactionControlImpl.class);
1:47a70d3: 	
1:7f1e7ab: 	private Map<String, Object> config;
1:7f1e7ab: 	private final XidFactory xidFactory;
1:7f1e7ab: 	private final HOWLLog log;
1:47a70d3: 	private final RecoveryWorkAroundTransactionManager transactionManager;
1:cc2f539: 	private final LocalResourceSupport localResourceSupport;
1:47a70d3: 	private final ServiceTracker<RecoverableXAResource, RecoverableXAResource> recoverableResources;
1:7f1e7ab: 
1:7f1e7ab: 	public TransactionControlImpl(BundleContext ctx, Map<String, Object> config) throws Exception {
1:7f1e7ab: 		
2:7f1e7ab: 		try {
1:7f1e7ab: 			this.config = config;
1:cc2f539: 			this.localResourceSupport = getLocalResourceSupport();
1:7f1e7ab: 			xidFactory = new XidFactoryImpl();
1:7f1e7ab: 			log = getLog(ctx);
1:7f1e7ab: 			
2:7f1e7ab: 			if(log != null) {
1:7f1e7ab: 				log.doStart();
1:7f1e7ab: 			}
1:7f1e7ab: 			
1:47a70d3: 			transactionManager = new RecoveryWorkAroundTransactionManager(getTimeout(),
1:7f1e7ab: 					xidFactory, log);
1:47a70d3: 			
1:47a70d3: 			if(log != null) {
1:47a70d3: 				recoverableResources = 
1:47a70d3: 						new ServiceTracker<RecoverableXAResource, RecoverableXAResource>(
1:47a70d3: 								ctx, RecoverableXAResource.class, null) {
1:47a70d3: 
1:47a70d3: 									@Override
1:47a70d3: 									public RecoverableXAResource addingService(
1:47a70d3: 											ServiceReference<RecoverableXAResource> reference) {
1:47a70d3: 										RecoverableXAResource resource = super.addingService(reference);
1:47a70d3: 										
1:47a70d3: 										if(resource.getId() == null) {
1:47a70d3: 											logger.warn("The RecoverableXAResource service with id {} does not have a name and will be ignored", 
1:47a70d3: 													reference.getProperty("service.id"));
1:47a70d3: 											return null;
1:47a70d3: 										}
1:47a70d3: 										
1:47a70d3: 										if(log == null) {
1:47a70d3: 											logger.warn("A RecoverableXAResource with id {} has been registered, but recovery logging is disabled for this Transaction Control service. No recovery will be availble in the event of a Transaction Manager failure.", resource.getId());
1:47a70d3: 										}
1:47a70d3: 										
1:47a70d3: 										transactionManager.registerNamedXAResourceFactory(new NamedXAResourceFactory() {
1:47a70d3: 											
1:47a70d3: 											@Override
1:47a70d3: 											public void returnNamedXAResource(NamedXAResource namedXAResource) {
1:47a70d3: 												resource.releaseXAResource(((NamedXAResourceImpl)namedXAResource).xaResource);
1:47a70d3: 											}
1:47a70d3: 											
1:47a70d3: 											@Override
1:47a70d3: 											public NamedXAResource getNamedXAResource() throws SystemException {
1:47a70d3: 												try {
1:47a70d3: 													XAResource xaResource = resource.getXAResource();
1:47a70d3: 													if(xaResource == null) {
1:47a70d3: 														throw new IllegalStateException("The recoverable resource " + resource.getId() 
1:47a70d3: 														+ " is currently unavailable");
1:47a70d3: 													}
1:47a70d3: 													return new NamedXAResourceImpl(resource.getId(), xaResource,
1:47a70d3: 															transactionManager, false);
1:47a70d3: 												} catch (Exception e) {
1:47a70d3: 													throw new SystemException("Unable to get recoverable resource " + 
1:47a70d3: 															resource.getId() + ": " + e.getMessage());
1:47a70d3: 												}
1:47a70d3: 											}
1:47a70d3: 											
1:47a70d3: 											@Override
1:47a70d3: 											public String getName() {
1:47a70d3: 												return resource.getId();
1:47a70d3: 											}
1:47a70d3: 										});
1:47a70d3: 										
1:47a70d3: 										return resource;
1:47a70d3: 									}
1:47a70d3: 
1:47a70d3: 									@Override
1:47a70d3: 									public void removedService(ServiceReference<RecoverableXAResource> reference,
1:47a70d3: 											RecoverableXAResource service) {
1:47a70d3: 										transactionManager.unregisterNamedXAResourceFactory(service.getId());
1:47a70d3: 									}
1:47a70d3: 					
1:47a70d3: 								};
1:47a70d3: 				recoverableResources.open();
1:47a70d3: 			} else {
1:47a70d3: 				recoverableResources = null;
1:47a70d3: 			}
2:7f1e7ab: 		} catch (Exception e) {
1:2906477: 			close();
1:7f1e7ab: 			throw e;
1:47a70d3: 		}
1:7f1e7ab: 	}
1:78dd69f: 
1:cc2f539: 	private LocalResourceSupport getLocalResourceSupport() {
1:cc2f539: 		Object o = config.getOrDefault("local.resources", ENFORCE_SINGLE);
1:cc2f539: 		return o instanceof LocalResourceSupport ? (LocalResourceSupport) o : 
1:cc2f539: 			LocalResourceSupport.valueOf(o.toString());
1:cc2f539: 	}
1:cc2f539: 
1:7f1e7ab: 	private HOWLLog getLog(BundleContext ctx) throws Exception {
1:47a70d3: 		Object recovery = config.getOrDefault("recovery.log.enabled", false);
1:7f1e7ab: 		
1:7f1e7ab: 		if (recovery instanceof Boolean ? (Boolean) recovery : Boolean.valueOf(recovery.toString())) {
1:7f1e7ab: 			String logFileExt = "log";
1:7f1e7ab:             String logFileName = "transaction";
1:7f1e7ab:             
1:7f1e7ab:             String logFileDir;
1:7f1e7ab: 
1:7f1e7ab:             Object o = config.get("recovery.log.dir");
1:7f1e7ab:             if(o == null) {
1:7f1e7ab:             	logFileDir = ctx.getDataFile("recoveryLog").getAbsolutePath();
1:7f1e7ab:             } else {
1:7f1e7ab:             	logFileDir = o.toString();
1:7f1e7ab:             }
1:7f1e7ab:             
1:7f1e7ab:             File f = new File(logFileDir);
1:7f1e7ab:             if(f.exists() && !f.isDirectory()) {
1:7f1e7ab:             	throw new IllegalArgumentException("The recovery log directory " + logFileDir + 
1:7f1e7ab:             			" is not a directory.");
1:7f1e7ab:             }
1:7f1e7ab:             
1:7f1e7ab:             HOWLLog log = new HOWLLog("org.objectweb.howl.log.BlockLogBuffer",
1:7f1e7ab:                                              4,
1:7f1e7ab:                                              true,
1:7f1e7ab:                                              true,
1:7f1e7ab:                                              50,
1:7f1e7ab:                                              logFileDir,
1:7f1e7ab:                                              logFileExt,
1:7f1e7ab:                                              logFileName,
1:7f1e7ab:                                              -1,
1:7f1e7ab:                                              0,
1:7f1e7ab:                                              2,
1:7f1e7ab:                                              4,
1:7f1e7ab:                                              -1,
1:7f1e7ab:                                              true,
1:7f1e7ab:                                              xidFactory,
1:7f1e7ab:                                              null);
1:7f1e7ab: 			return log;
1:7f1e7ab: 		}
1:7f1e7ab: 		// null means a non-recoverable log
1:7f1e7ab: 		return null;
1:7f1e7ab: 	}
1:7f1e7ab: 	
1:cc2f539: 	private int getTimeout() {
1:cc2f539: 		Object o = config.getOrDefault("transaction.timeout", 300);
1:7f1e7ab: 		return o instanceof Integer ? (Integer) o : Integer.valueOf(o.toString());
1:7f1e7ab: 	}
1:7f1e7ab: 	
1:2906477: 	@Override
1:2906477: 	public void close() {
1:3bca813: 		try {
1:3bca813: 			super.close();
1:3bca813: 			if(recoverableResources != null) {
1:3bca813: 				recoverableResources.close();
1:3bca813: 			}
1:3bca813: 		} finally {
1:3bca813: 			if(log != null) {
1:3bca813: 				try {
1:3bca813: 					log.doStop();
1:3bca813: 				} catch (Exception e) {
1:3bca813: 					// TODO Auto-generated catch block
1:3bca813: 					e.printStackTrace();
1:3bca813: 				}
1:3bca813: 				// The HOWL log does not reliably close the FlushManager
1:3bca813: 				// and the project hasn't been updated in ten years...
1:3bca813: 				// Do some horrible reflection to force it closed so that
1:3bca813: 				// we don't leak classloaders and memory.
1:3bca813: 				// Note that the thread is daemon, so it won't stop shutdown
1:3bca813: 				try {
1:3bca813: 					Field f = HOWLLog.class.getDeclaredField("logger");
1:3bca813: 					f.setAccessible(true);
1:3bca813: 					org.objectweb.howl.log.Logger howlLogger = (org.objectweb.howl.log.Logger) f.get(log);
1:3bca813: 					
1:3bca813: 					f = org.objectweb.howl.log.Logger.class.getDeclaredField("bmgr");
1:3bca813: 					f.setAccessible(true);
1:3bca813: 					Object logBufferManager = f.get(howlLogger);
1:3bca813: 					
1:3bca813: 					f = logBufferManager.getClass().getDeclaredField("flushManager");
1:3bca813: 					f.setAccessible(true);
1:3bca813: 					Thread flushThread = (Thread) f.get(logBufferManager);
1:3bca813: 					
1:3bca813: 					if(flushThread.isAlive()) {
1:3bca813: 						// Briefly Join this thread in case it is going to stop properly.
1:3bca813: 						// Pick the shorter of 250 milliseconds or twice the flush interval.
1:3bca813: 						int toWait = Math.min(250, 2* log.getFlushSleepTimeMilliseconds());
1:3bca813: 						flushThread.join(toWait);
1:3bca813: 
1:3bca813: 						if(flushThread.isAlive()) {
1:3bca813: 							// Still alive after waiting, time to pull the trigger ourselves
1:3bca813: 							flushThread.interrupt();
1:3bca813: 							
1:3bca813: 							// Let the thread react to interruption
1:3bca813: 							flushThread.join(toWait);
1:3bca813: 						}
1:3bca813: 					}
1:3bca813: 				} catch (Exception e) {
1:3bca813: 					logger.error("An error ocurred while trying to close the HOWL flush thread.", e);
1:3bca813: 				}
1:7f1e7ab: 			}
1:7f1e7ab: 		}
1:7f1e7ab: 	}
1:7f1e7ab: 	
1:7f1e7ab: 	public synchronized Dictionary<String, ?> getProperties() {
1:7f1e7ab: 		Dictionary<String, Object> props = new Hashtable<>();
1:7f1e7ab: 
1:7f1e7ab: 		config.entrySet().stream()
1:7f1e7ab: 			.filter(e -> !e.getKey().startsWith("."))
1:7f1e7ab: 			.forEach(e -> props.put(e.getKey(), e.getValue()));
1:7f1e7ab: 		
1:7f1e7ab: 		props.put("osgi.xa.enabled", Boolean.TRUE);
1:80b5875: 		props.put("osgi.local.enabled", getLocalResourceSupport() != DISABLED);
1:7f1e7ab: 		props.put(Constants.SERVICE_DESCRIPTION, "The Apache Aries Transaction Control Service for XA Transactions");
1:7f1e7ab: 		props.put(Constants.SERVICE_VENDOR, "Apache Aries");
1:7f1e7ab: 		
1:7f1e7ab: 		return props;
1:7f1e7ab: 	}
1:7f1e7ab: 	
1:7f1e7ab: 	/**
1:7f1e7ab: 	 * This method can be used to define config changes that should not trigger
1:7f1e7ab: 	 * the service to be unregistered and recreated
1:7f1e7ab: 	 * 
1:efb3993: 	 * @param updated - the updated config
1:efb3993: 	 * @param isRegistered true if the service is currently registered
1:7f1e7ab: 	 * @return
1:7f1e7ab: 	 */
1:7f1e7ab: 	public synchronized ChangeType changed(Map<String, Object> updated, boolean isRegistered) {
1:80b5875: 		Map<String, Object> current = filterFixedProps(config);
1:7f1e7ab: 		Map<String, Object> replacement = filterFixedProps(updated);
1:7f1e7ab: 		
1:7f1e7ab: 		// If our configuration is unchanged then just issue a service property update
1:7f1e7ab: 		if(current.equals(replacement)) {
1:7f1e7ab: 			config = updated; 
1:7f1e7ab: 			return SERVICE_PROPS;
1:7f1e7ab: 		}
1:7f1e7ab: 		
1:7f1e7ab: 		return RECREATE;
1:7f1e7ab: 	}
1:7f1e7ab: 	
1:7f1e7ab: 	private Map<String, Object> filterFixedProps(Map<String, Object> raw) {
1:7f1e7ab: 		Map<String, Object> filtered = new HashMap<>();
1:7f1e7ab: 		
1:7f1e7ab: 		copy(raw, filtered, "transaction.timeout");
1:47a70d3: 		copy(raw, filtered, "recovery.log.enabled");
1:7f1e7ab: 		copy(raw, filtered, "recovery.log.dir");
1:cc2f539: 		copy(raw, filtered, "local.resources");
1:7f1e7ab: 		
1:7f1e7ab: 		return filtered;
1:7f1e7ab: 	}
1:7f1e7ab: 
1:7f1e7ab: 	private void copy(Map<String, Object> raw, Map<String, Object> filtered, String key) {
1:7f1e7ab: 		if(raw.containsKey(key)) {
1:7f1e7ab: 			filtered.put(key, raw.get(key));
1:7f1e7ab: 		}
1:7f1e7ab: 	}
1:7f1e7ab: 	
1:78dd69f: 	@Override
1:f87416c: 	protected AbstractTransactionContextImpl startTransaction(boolean readOnly) {
1:cc2f539: 		return new TransactionContextImpl(transactionManager, readOnly, localResourceSupport);
2:78dd69f: 	}
1:78dd69f: 	
1:78dd69f: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:efb3993
/////////////////////////////////////////////////////////////////////////
1: 	 * @param updated - the updated config
1: 	 * @param isRegistered true if the service is currently registered
commit:3bca813
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Field;
/////////////////////////////////////////////////////////////////////////
1: 		try {
1: 			super.close();
1: 			if(recoverableResources != null) {
1: 				recoverableResources.close();
1: 			}
1: 		} finally {
1: 			if(log != null) {
1: 				try {
1: 					log.doStop();
1: 				} catch (Exception e) {
1: 					// TODO Auto-generated catch block
1: 					e.printStackTrace();
1: 				}
1: 				// The HOWL log does not reliably close the FlushManager
1: 				// and the project hasn't been updated in ten years...
1: 				// Do some horrible reflection to force it closed so that
1: 				// we don't leak classloaders and memory.
1: 				// Note that the thread is daemon, so it won't stop shutdown
1: 				try {
1: 					Field f = HOWLLog.class.getDeclaredField("logger");
1: 					f.setAccessible(true);
1: 					org.objectweb.howl.log.Logger howlLogger = (org.objectweb.howl.log.Logger) f.get(log);
1: 					
1: 					f = org.objectweb.howl.log.Logger.class.getDeclaredField("bmgr");
1: 					f.setAccessible(true);
1: 					Object logBufferManager = f.get(howlLogger);
1: 					
1: 					f = logBufferManager.getClass().getDeclaredField("flushManager");
1: 					f.setAccessible(true);
1: 					Thread flushThread = (Thread) f.get(logBufferManager);
1: 					
1: 					if(flushThread.isAlive()) {
1: 						// Briefly Join this thread in case it is going to stop properly.
1: 						// Pick the shorter of 250 milliseconds or twice the flush interval.
1: 						int toWait = Math.min(250, 2* log.getFlushSleepTimeMilliseconds());
1: 						flushThread.join(toWait);
1: 
1: 						if(flushThread.isAlive()) {
1: 							// Still alive after waiting, time to pull the trigger ourselves
1: 							flushThread.interrupt();
1: 							
1: 							// Let the thread react to interruption
1: 							flushThread.join(toWait);
1: 						}
1: 					}
1: 				} catch (Exception e) {
1: 					logger.error("An error ocurred while trying to close the HOWL flush thread.", e);
1: 				}
commit:2906477
/////////////////////////////////////////////////////////////////////////
1: 			close();
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void close() {
0: 		super.close();
commit:80b5875
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.tx.control.service.xa.impl.LocalResourceSupport.DISABLED;
/////////////////////////////////////////////////////////////////////////
1: 		props.put("osgi.local.enabled", getLocalResourceSupport() != DISABLED);
/////////////////////////////////////////////////////////////////////////
1: 		Map<String, Object> current = filterFixedProps(config);
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: import javax.resource.spi.IllegalStateException;
1: import javax.transaction.SystemException;
1: import javax.transaction.xa.XAResource;
1: 
1: import org.apache.geronimo.transaction.manager.NamedXAResource;
1: import org.apache.geronimo.transaction.manager.NamedXAResourceFactory;
1: import org.apache.geronimo.transaction.manager.RecoveryWorkAroundTransactionManager;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.transaction.control.recovery.RecoverableXAResource;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 	private static final Logger logger = LoggerFactory.getLogger(TransactionControlImpl.class);
1: 	
1: 	private final RecoveryWorkAroundTransactionManager transactionManager;
1: 	private final ServiceTracker<RecoverableXAResource, RecoverableXAResource> recoverableResources;
/////////////////////////////////////////////////////////////////////////
1: 			transactionManager = new RecoveryWorkAroundTransactionManager(getTimeout(),
1: 			
1: 			if(log != null) {
1: 				recoverableResources = 
1: 						new ServiceTracker<RecoverableXAResource, RecoverableXAResource>(
1: 								ctx, RecoverableXAResource.class, null) {
1: 
1: 									@Override
1: 									public RecoverableXAResource addingService(
1: 											ServiceReference<RecoverableXAResource> reference) {
1: 										RecoverableXAResource resource = super.addingService(reference);
1: 										
1: 										if(resource.getId() == null) {
1: 											logger.warn("The RecoverableXAResource service with id {} does not have a name and will be ignored", 
1: 													reference.getProperty("service.id"));
1: 											return null;
1: 										}
1: 										
1: 										if(log == null) {
1: 											logger.warn("A RecoverableXAResource with id {} has been registered, but recovery logging is disabled for this Transaction Control service. No recovery will be availble in the event of a Transaction Manager failure.", resource.getId());
1: 										}
1: 										
1: 										transactionManager.registerNamedXAResourceFactory(new NamedXAResourceFactory() {
1: 											
1: 											@Override
1: 											public void returnNamedXAResource(NamedXAResource namedXAResource) {
1: 												resource.releaseXAResource(((NamedXAResourceImpl)namedXAResource).xaResource);
1: 											}
1: 											
1: 											@Override
1: 											public NamedXAResource getNamedXAResource() throws SystemException {
1: 												try {
1: 													XAResource xaResource = resource.getXAResource();
1: 													if(xaResource == null) {
1: 														throw new IllegalStateException("The recoverable resource " + resource.getId() 
1: 														+ " is currently unavailable");
1: 													}
1: 													return new NamedXAResourceImpl(resource.getId(), xaResource,
1: 															transactionManager, false);
1: 												} catch (Exception e) {
1: 													throw new SystemException("Unable to get recoverable resource " + 
1: 															resource.getId() + ": " + e.getMessage());
1: 												}
1: 											}
1: 											
1: 											@Override
1: 											public String getName() {
1: 												return resource.getId();
1: 											}
1: 										});
1: 										
1: 										return resource;
1: 									}
1: 
1: 									@Override
1: 									public void removedService(ServiceReference<RecoverableXAResource> reference,
1: 											RecoverableXAResource service) {
1: 										transactionManager.unregisterNamedXAResourceFactory(service.getId());
1: 									}
1: 					
1: 								};
1: 				recoverableResources.open();
1: 			} else {
1: 				recoverableResources = null;
1: 			}
/////////////////////////////////////////////////////////////////////////
1: 		Object recovery = config.getOrDefault("recovery.log.enabled", false);
/////////////////////////////////////////////////////////////////////////
0: 		if(recoverableResources != null) {
0: 			recoverableResources.close();
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 		copy(raw, filtered, "recovery.log.enabled");
commit:cc2f539
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.tx.control.service.xa.impl.LocalResourceSupport.ENFORCE_SINGLE;
/////////////////////////////////////////////////////////////////////////
1: 	private final LocalResourceSupport localResourceSupport;
1: 			this.localResourceSupport = getLocalResourceSupport();
/////////////////////////////////////////////////////////////////////////
0: 			transactionManager = new GeronimoTransactionManager(getTimeout(),
/////////////////////////////////////////////////////////////////////////
1: 	private LocalResourceSupport getLocalResourceSupport() {
1: 		Object o = config.getOrDefault("local.resources", ENFORCE_SINGLE);
1: 		return o instanceof LocalResourceSupport ? (LocalResourceSupport) o : 
1: 			LocalResourceSupport.valueOf(o.toString());
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 	private int getTimeout() {
1: 		Object o = config.getOrDefault("transaction.timeout", 300);
/////////////////////////////////////////////////////////////////////////
1: 		copy(raw, filtered, "local.resources");
/////////////////////////////////////////////////////////////////////////
1: 		return new TransactionContextImpl(transactionManager, readOnly, localResourceSupport);
commit:7f1e7ab
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.tx.control.service.xa.impl.Activator.ChangeType.RECREATE;
1: import static org.apache.aries.tx.control.service.xa.impl.Activator.ChangeType.SERVICE_PROPS;
1: 
1: import java.io.File;
1: import java.util.Dictionary;
1: import java.util.HashMap;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
1: import org.apache.aries.tx.control.service.xa.impl.Activator.ChangeType;
1: import org.apache.geronimo.transaction.log.HOWLLog;
1: import org.apache.geronimo.transaction.manager.XidFactory;
1: import org.apache.geronimo.transaction.manager.XidFactoryImpl;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: 	private Map<String, Object> config;
1: 	private final XidFactory xidFactory;
1: 	private final HOWLLog log;
0: 	private final GeronimoTransactionManager transactionManager;
1: 
1: 	public TransactionControlImpl(BundleContext ctx, Map<String, Object> config) throws Exception {
1: 		
1: 		try {
1: 			this.config = config;
1: 			xidFactory = new XidFactoryImpl();
1: 			log = getLog(ctx);
1: 			
1: 			if(log != null) {
1: 				log.doStart();
1: 			}
1: 			
0: 			transactionManager = new GeronimoTransactionManager(getTimeout(config),
1: 					xidFactory, log);
1: 		} catch (Exception e) {
0: 			destroy();
1: 			throw e;
1: 		}
1: 	private HOWLLog getLog(BundleContext ctx) throws Exception {
0: 		Object recovery = config.getOrDefault("recovery.enabled", false);
1: 		
1: 		if (recovery instanceof Boolean ? (Boolean) recovery : Boolean.valueOf(recovery.toString())) {
1: 			String logFileExt = "log";
1:             String logFileName = "transaction";
1:             
1:             String logFileDir;
1: 
1:             Object o = config.get("recovery.log.dir");
1:             if(o == null) {
1:             	logFileDir = ctx.getDataFile("recoveryLog").getAbsolutePath();
1:             } else {
1:             	logFileDir = o.toString();
1:             }
1:             
1:             File f = new File(logFileDir);
1:             if(f.exists() && !f.isDirectory()) {
1:             	throw new IllegalArgumentException("The recovery log directory " + logFileDir + 
1:             			" is not a directory.");
1:             }
1:             
1:             HOWLLog log = new HOWLLog("org.objectweb.howl.log.BlockLogBuffer",
1:                                              4,
1:                                              true,
1:                                              true,
1:                                              50,
1:                                              logFileDir,
1:                                              logFileExt,
1:                                              logFileName,
1:                                              -1,
1:                                              0,
1:                                              2,
1:                                              4,
1:                                              -1,
1:                                              true,
1:                                              xidFactory,
1:                                              null);
1: 			return log;
1: 		}
1: 		// null means a non-recoverable log
1: 		return null;
1: 	}
1: 	
0: 	private int getTimeout(Map<String, Object> newConfig) {
0: 		Object o = newConfig.getOrDefault("transaction.timeout", 300);
1: 		return o instanceof Integer ? (Integer) o : Integer.valueOf(o.toString());
1: 	}
1: 	
0: 	public void destroy() {
1: 		if(log != null) {
1: 			try {
0: 				log.doStop();
1: 			} catch (Exception e) {
0: 				// TODO Auto-generated catch block
0: 				e.printStackTrace();
1: 			}
1: 		}
1: 	}
1: 	
1: 	public synchronized Dictionary<String, ?> getProperties() {
1: 		Dictionary<String, Object> props = new Hashtable<>();
1: 
1: 		config.entrySet().stream()
1: 			.filter(e -> !e.getKey().startsWith("."))
1: 			.forEach(e -> props.put(e.getKey(), e.getValue()));
1: 		
1: 		props.put("osgi.xa.enabled", Boolean.TRUE);
0: 		props.put("osgi.local.enabled", Boolean.TRUE);
1: 		props.put(Constants.SERVICE_DESCRIPTION, "The Apache Aries Transaction Control Service for XA Transactions");
1: 		props.put(Constants.SERVICE_VENDOR, "Apache Aries");
1: 		
1: 		return props;
1: 	}
1: 	
1: 	/**
1: 	 * This method can be used to define config changes that should not trigger
1: 	 * the service to be unregistered and recreated
1: 	 * 
0: 	 * @param original
0: 	 * @param isRegistered
1: 	 * @return
1: 	 */
1: 	public synchronized ChangeType changed(Map<String, Object> updated, boolean isRegistered) {
0: 		Map<String, Object> current = filterFixedProps(updated);
1: 		Map<String, Object> replacement = filterFixedProps(updated);
1: 		
1: 		// If our configuration is unchanged then just issue a service property update
1: 		if(current.equals(replacement)) {
1: 			config = updated; 
1: 			return SERVICE_PROPS;
1: 		}
1: 		
1: 		return RECREATE;
1: 	}
1: 	
1: 	private Map<String, Object> filterFixedProps(Map<String, Object> raw) {
1: 		Map<String, Object> filtered = new HashMap<>();
1: 		
1: 		copy(raw, filtered, "transaction.timeout");
0: 		copy(raw, filtered, "recovery.enabled");
1: 		copy(raw, filtered, "recovery.log.dir");
1: 		
1: 		return filtered;
1: 	}
1: 
1: 	private void copy(Map<String, Object> raw, Map<String, Object> filtered, String key) {
1: 		if(raw.containsKey(key)) {
1: 			filtered.put(key, raw.get(key));
1: 		}
1: 	}
1: 	
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
0: 	public TransactionControlImpl(GeronimoTransactionManager tm) {
1: 	protected AbstractTransactionContextImpl startTransaction(boolean readOnly) {
0: 		return new TransactionContextImpl(transactionManager, readOnly);
commit:661c406
/////////////////////////////////////////////////////////////////////////
0: 	protected AbstractTransactionContextImpl startTransaction(Coordination currentCoord, boolean readOnly) {
0: 		return new TransactionContextImpl(transactionManager, currentCoord, readOnly);
commit:78dd69f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.xa.impl;
1: 
1: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionContextImpl;
1: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionControlImpl;
0: import org.apache.geronimo.transaction.manager.GeronimoTransactionManager;
0: import org.osgi.service.coordinator.Coordination;
0: import org.osgi.service.coordinator.Coordinator;
1: 
1: public class TransactionControlImpl extends AbstractTransactionControlImpl {
1: 	
0: 	GeronimoTransactionManager transactionManager;
1: 
0: 	public TransactionControlImpl(GeronimoTransactionManager tm, Coordinator c) {
0: 		super(c);
0: 		this.transactionManager = tm;
1: 	}
1: 
1: 	@Override
0: 	protected AbstractTransactionContextImpl startTransaction(Coordination currentCoord) {
0: 		return new TransactionContextImpl(transactionManager, currentCoord);
1: 	}
1: 	
1: }
============================================================================