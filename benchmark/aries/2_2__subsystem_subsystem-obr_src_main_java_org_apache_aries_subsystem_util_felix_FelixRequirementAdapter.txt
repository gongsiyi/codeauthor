1:6c69a67: /*
1:6c69a67:  * Licensed under the Apache License, Version 2.0 (the "License");
1:6c69a67:  * you may not use this file except in compliance with the License.
1:6c69a67:  * You may obtain a copy of the License at
1:6c69a67:  *
1:6c69a67:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6c69a67:  *
1:6c69a67:  * Unless required by applicable law or agreed to in writing, software
1:6c69a67:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c69a67:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c69a67:  * See the License for the specific language governing permissions and
1:6c69a67:  * limitations under the License.
2:6c69a67:  */
1:7a834c3: package org.apache.aries.subsystem.util.felix;
1:6c69a67: 
1:6c69a67: import java.util.Collections;
1:6c69a67: import java.util.HashMap;
1:6c69a67: import java.util.Map;
1:6c69a67: 
1:7a834c3: import org.apache.aries.subsystem.obr.internal.AbstractRequirement;
1:7a834c3: import org.apache.aries.subsystem.obr.internal.NamespaceTranslator;
1:d2f2d7d: import org.osgi.framework.namespace.BundleNamespace;
1:6c69a67: import org.osgi.resource.Capability;
1:47b961c: import org.osgi.resource.Namespace;
1:6c69a67: import org.osgi.resource.Resource;
1:6c69a67: 
1:6c69a67: public class FelixRequirementAdapter extends AbstractRequirement {
1:47b961c: 	private final Map<String, String> directives;
1:6c69a67: 	private final org.apache.felix.bundlerepository.Requirement requirement;
1:6c69a67: 	private final Resource resource;
1:6c69a67: 	
1:6c69a67: 	public FelixRequirementAdapter(org.apache.felix.bundlerepository.Requirement requirement, Resource resource) {
1:6c69a67: 		if (requirement == null)
1:6c69a67: 			throw new NullPointerException("Missing required parameter: requirement");
1:6c69a67: 		if (resource == null)
1:6c69a67: 			throw new NullPointerException("Missing required parameter: resource");
1:6c69a67: 		this.requirement = requirement;
1:6c69a67: 		this.resource = resource;
1:47b961c: 		directives = computeDirectives();
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public Map<String, Object> getAttributes() {
1:6c69a67: 		return Collections.emptyMap();
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public Map<String, String> getDirectives() {
1:47b961c: 		return directives;
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public String getNamespace() {
1:6c69a67: 		return NamespaceTranslator.translate(requirement.getName());
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public Resource getResource() {
1:6c69a67: 		return resource;
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public boolean matches(Capability capability) {
1:6c69a67: 		return requirement.isSatisfied(new OsgiCapabilityAdapter(capability));
1:6c69a67: 	}
1:47b961c: 	
1:47b961c: 	private Map<String, String> computeDirectives() {
1:47b961c: 		Map<String, String> result = new HashMap<String, String>(3);
1:47b961c: 		/* (1) The Felix OBR specific "mandatory:<*" syntax must be stripped out of the filter.
1:47b961c: 		 * (2) The namespace must be translated.
1:47b961c: 		 */
1:d2f2d7d: 		String namespace = getNamespace();
1:d2f2d7d: 		String filter = requirement.getFilter()
1:47b961c: 				.replaceAll("\\(mandatory\\:\\<\\*[^\\)]*\\)", "")
1:47b961c: 				.replaceAll("\\(service\\=[^\\)]*\\)", "")
1:47b961c: 				.replaceAll("objectclass", "objectClass")
1:d2f2d7d: 				.replaceAll(requirement.getName() + '=', namespace + '=');
1:d2f2d7d: 		if (BundleNamespace.BUNDLE_NAMESPACE.equals(namespace)) {
1:d2f2d7d: 			filter = filter.replaceAll("symbolicname", namespace)
1:d2f2d7d: 					.replaceAll("version", BundleNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE);
1:d2f2d7d: 		}
1:d2f2d7d: 		result.put(Namespace.REQUIREMENT_FILTER_DIRECTIVE, filter);
1:47b961c: 		result.put(Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE, requirement.isOptional() ? Namespace.RESOLUTION_OPTIONAL : Namespace.RESOLUTION_MANDATORY);
1:47b961c: 		result.put(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE, requirement.isMultiple() ? Namespace.CARDINALITY_MULTIPLE : Namespace.CARDINALITY_SINGLE);
1:47b961c: 		return Collections.unmodifiableMap(result);
1:47b961c: 	}
1:6c69a67: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:d2f2d7d
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.BundleNamespace;
/////////////////////////////////////////////////////////////////////////
1: 		String namespace = getNamespace();
1: 		String filter = requirement.getFilter()
1: 				.replaceAll(requirement.getName() + '=', namespace + '=');
1: 		if (BundleNamespace.BUNDLE_NAMESPACE.equals(namespace)) {
1: 			filter = filter.replaceAll("symbolicname", namespace)
1: 					.replaceAll("version", BundleNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE);
1: 		}
1: 		result.put(Namespace.REQUIREMENT_FILTER_DIRECTIVE, filter);
commit:47b961c
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Namespace;
1: 	private final Map<String, String> directives;
/////////////////////////////////////////////////////////////////////////
1: 		directives = computeDirectives();
/////////////////////////////////////////////////////////////////////////
1: 		return directives;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	private Map<String, String> computeDirectives() {
1: 		Map<String, String> result = new HashMap<String, String>(3);
1: 		/* (1) The Felix OBR specific "mandatory:<*" syntax must be stripped out of the filter.
1: 		 * (2) The namespace must be translated.
1: 		 */
0: 		result.put(Namespace.REQUIREMENT_FILTER_DIRECTIVE, requirement.getFilter()
1: 				.replaceAll("\\(mandatory\\:\\<\\*[^\\)]*\\)", "")
1: 				.replaceAll("\\(service\\=[^\\)]*\\)", "")
1: 				.replaceAll("objectclass", "objectClass")
0: 				.replaceAll(requirement.getName() + '=', getNamespace() + '='));
1: 		result.put(Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE, requirement.isOptional() ? Namespace.RESOLUTION_OPTIONAL : Namespace.RESOLUTION_MANDATORY);
1: 		result.put(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE, requirement.isMultiple() ? Namespace.CARDINALITY_MULTIPLE : Namespace.CARDINALITY_SINGLE);
1: 		return Collections.unmodifiableMap(result);
1: 	}
commit:9731fd6
/////////////////////////////////////////////////////////////////////////
commit:6c69a67
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.aries.subsystem.obr.internal;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
0: import org.osgi.framework.Constants;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Resource;
1: 
1: public class FelixRequirementAdapter extends AbstractRequirement {
1: 	private final org.apache.felix.bundlerepository.Requirement requirement;
1: 	private final Resource resource;
1: 	
1: 	public FelixRequirementAdapter(org.apache.felix.bundlerepository.Requirement requirement, Resource resource) {
1: 		if (requirement == null)
1: 			throw new NullPointerException("Missing required parameter: requirement");
1: 		if (resource == null)
1: 			throw new NullPointerException("Missing required parameter: resource");
1: 		this.requirement = requirement;
1: 		this.resource = resource;
1: 	}
1: 
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.emptyMap();
1: 	}
1: 
1: 	public Map<String, String> getDirectives() {
0: 		Map<String, String> result = new HashMap<String, String>(1);
0: 		/* (1) The Felix OBR specific "mandatory:<*" syntax must be stripped out of the filter.
0: 		 * (2) The namespace must be translated.
1: 		 */
0: 		result.put(Constants.FILTER_DIRECTIVE, requirement.getFilter()
0: 				.replaceAll("\\(mandatory\\:\\<\\*[^\\)]*\\)", "")
0: 				.replaceAll("\\(service\\=[^\\)]*\\)", "")
0: 				.replaceAll("objectclass", "objectClass")
0: 				.replaceAll(requirement.getName() + '=', getNamespace() + '='));
0: 		return result;
1: 	}
1: 
1: 	public String getNamespace() {
1: 		return NamespaceTranslator.translate(requirement.getName());
1: 	}
1: 
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: 
1: 	public boolean matches(Capability capability) {
1: 		return requirement.isSatisfied(new OsgiCapabilityAdapter(capability));
1: 	}
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7a834c3
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.util.felix;
1: import org.apache.aries.subsystem.obr.internal.AbstractRequirement;
1: import org.apache.aries.subsystem.obr.internal.NamespaceTranslator;
============================================================================