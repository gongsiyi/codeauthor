1:4fec049: /*
1:4fec049:  * Licensed to the Apache Software Foundation (ASF) under one
1:4fec049:  * or more contributor license agreements.  See the NOTICE file
1:4fec049:  * distributed with this work for additional information
1:4fec049:  * regarding copyright ownership.  The ASF licenses this file
1:4fec049:  * to you under the Apache License, Version 2.0 (the
1:4fec049:  * "License"); you may not use this file except in compliance
1:4fec049:  * with the License.  You may obtain a copy of the License at
1:4fec049:  *
1:4fec049:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4fec049:  *
1:4fec049:  * Unless required by applicable law or agreed to in writing,
1:4fec049:  * software distributed under the License is distributed on an
1:4fec049:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4fec049:  * KIND, either express or implied.  See the License for the
1:4fec049:  * specific language governing permissions and limitations
1:4fec049:  * under the License.
3:4fec049:  */
1:58f55bd: package org.apache.aries.application.modelling.utils.impl;
4:4fec049: 
1:58f55bd: import static org.apache.aries.application.modelling.ModellingConstants.OPTIONAL_KEY;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:4fec049: import static org.osgi.framework.Constants.BUNDLE_VERSION_ATTRIBUTE;
1:4fec049: import static org.osgi.framework.Constants.VERSION_ATTRIBUTE;
1:4fec049: 
1:58f55bd: import java.util.Collection;
1:4fec049: import java.util.HashMap;
1:4fec049: import java.util.List;
1:4fec049: import java.util.Map;
1:4fec049: 
1:89f804e: import org.apache.aries.application.InvalidAttributeException;
1:58f55bd: import org.apache.aries.application.modelling.DeployedBundles;
1:4fec049: import org.apache.aries.application.modelling.ImportedBundle;
1:4fec049: import org.apache.aries.application.modelling.ImportedPackage;
1:58f55bd: import org.apache.aries.application.modelling.ModelledResource;
1:58f55bd: import org.apache.aries.application.modelling.ModellingConstants;
1:4fec049: import org.apache.aries.application.modelling.Provider;
1:58f55bd: import org.apache.aries.application.modelling.impl.DeployedBundlesImpl;
1:4fec049: import org.apache.aries.application.modelling.impl.ImportedBundleImpl;
1:4fec049: import org.apache.aries.application.modelling.impl.ImportedPackageImpl;
1:4fec049: import org.apache.aries.application.modelling.internal.MessageUtil;
1:58f55bd: import org.apache.aries.application.modelling.utils.ModellingHelper;
1:910fec0: import org.apache.aries.util.VersionRange;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:4fec049: import org.osgi.framework.Constants;
1:4fec049: import org.slf4j.Logger;
1:4fec049: import org.slf4j.LoggerFactory;
1:58f55bd: 
1:58f55bd: 
1:58f55bd: public class ModellingHelperImpl implements ModellingHelper
1:4fec049: {
1:58f55bd:   private static final  Logger logger = LoggerFactory.getLogger(ModellingHelperImpl.class);
1:58f55bd: 
1:58f55bd:   
1:58f55bd:   public boolean areMandatoryAttributesPresent(
1:58f55bd:       Map<String, String> consumerAttributes, Provider p) {
1:58f55bd:     return areMandatoryAttributesPresent_(consumerAttributes, p);
1:58f55bd:   }
1:58f55bd: 
1:58f55bd:   public ImportedBundle buildFragmentHost(String fragmentHostHeader)
1:58f55bd:       throws InvalidAttributeException {
1:58f55bd:     return buildFragmentHost_(fragmentHostHeader);
1:58f55bd:   }
1:58f55bd: 
1:58f55bd:   public ImportedPackage intersectPackage(ImportedPackage p1, ImportedPackage p2) {
1:58f55bd:     return intersectPackage_(p1, p2);
1:58f55bd:   }
1:58f55bd:   
1:58f55bd:   public DeployedBundles createDeployedBundles(String assetName,
1:58f55bd:       Collection<ImportedBundle> appContentNames,
1:58f55bd:       Collection<ImportedBundle> appUseBundleNames,
1:58f55bd:       Collection<ModelledResource> fakeServiceProvidingBundles) 
1:58f55bd:   {
1:58f55bd:     logger.debug(LOG_ENTRY, "createDeployedBundles", new Object[]{assetName, 
1:58f55bd:         appContentNames, appUseBundleNames, fakeServiceProvidingBundles});  
1:58f55bd:     DeployedBundles result = new DeployedBundlesImpl (assetName, 
1:58f55bd:         appContentNames, appUseBundleNames, fakeServiceProvidingBundles);
1:58f55bd:     logger.debug(LOG_EXIT, "createDeployedBundles", result);
1:58f55bd:     return result;
1:58f55bd:   }
1:58f55bd:   
1:58f55bd:   // These underlying static methods are directly accessible 
1:58f55bd:   // from other classes within the bundle
1:58f55bd:   public static boolean areMandatoryAttributesPresent_(Map<String,String> consumerAttributes, Provider p) {
1:58f55bd:     logger.debug(LOG_ENTRY, "areMandatoryAttributesPresent_", new Object[]{consumerAttributes, p});
1:4fec049:     boolean allPresent = true;
1:4fec049:     String mandatory = (String) p.getAttributes().get(Constants.MANDATORY_DIRECTIVE + ":");
1:4fec049:     
1:4fec049:     if(mandatory != null && !mandatory.equals("")) {
1:4fec049:       List<String> attributeNames = ManifestHeaderProcessor.split(mandatory, ",");
1:4fec049:       
1:4fec049:       for(String name : attributeNames) {
1:4fec049:         allPresent = consumerAttributes.containsKey(name);
1:4fec049:         if(!allPresent)
1:4fec049:           break;
1:4fec049:       }
1:4fec049:     }
1:58f55bd:     logger.debug(LOG_EXIT, "areMandatoryAttributesPresent_", allPresent);
1:4fec049:     return allPresent;
1:4fec049:   }
1:4fec049:   
1:4fec049:   
1:4fec049:   
1:58f55bd:   public static ImportedBundle buildFragmentHost_(String fragmentHostHeader) throws InvalidAttributeException {
1:58f55bd:     logger.debug(LOG_ENTRY, "buildFragmentHost_", new Object[]{fragmentHostHeader});
1:4fec049:     if(fragmentHostHeader == null) { 
1:4fec049:       
1:4fec049:       return null;
1:4fec049:     }
1:de5b346:     Map<String, Map<String, String>> parsedFragHost = ManifestHeaderProcessor.parseImportString(fragmentHostHeader);
1:4fec049:     if(parsedFragHost.size() != 1)
1:0a977a8:       throw new InvalidAttributeException(MessageUtil.getMessage("MORE_THAN_ONE_FRAG_HOST",
1:4fec049:           new Object[] {fragmentHostHeader}, 
1:4fec049:           "An internal error occurred. A bundle fragment manifest must define exactly one Fragment-Host entry. The following entry was found" + fragmentHostHeader + "."));
1:4fec049:     
1:4fec049:     String hostName = parsedFragHost.keySet().iterator().next();
1:4fec049:     Map<String, String> attribs = parsedFragHost.get(hostName);
1:4fec049:     
1:4fec049:     String bundleVersion = attribs.remove(BUNDLE_VERSION_ATTRIBUTE);
1:4fec049:     if (bundleVersion != null && attribs.get(VERSION_ATTRIBUTE) == null) { 
1:4fec049:       attribs.put (VERSION_ATTRIBUTE, bundleVersion);
1:4fec049:     }
1:4fec049:     attribs.put(ModellingConstants.OBR_SYMBOLIC_NAME, hostName);  
1:4fec049:     
1:4fec049:     String filter = ManifestHeaderProcessor.generateFilter(attribs);
1:4fec049:     
1:4fec049:     ImportedBundle result = new ImportedBundleImpl(filter, attribs);
1:58f55bd:     logger.debug(LOG_EXIT, "buildFragmentHost_", result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:58f55bd:   public static ImportedPackage intersectPackage_ (ImportedPackage p1, ImportedPackage p2) { 
1:4fec049:     
1:58f55bd:     logger.debug(LOG_ENTRY, "intersectPackage_", new Object[]{p1, p2});
1:4fec049:     ImportedPackage result = null;
1:4fec049:     if (p1.getPackageName().equals(p2.getPackageName()))
1:4fec049:     {
1:4fec049:       Map<String,String> att1 = new HashMap<String, String>(p1.getAttributes());
1:4fec049:       Map<String,String> att2 = new HashMap<String, String>(p2.getAttributes());
1:4fec049:       
1:4fec049:       // Get the versions, we remove them so that the remaining attributes can be matched.
1:4fec049:       String rangeStr1 = att1.remove(Constants.VERSION_ATTRIBUTE);
1:4fec049:       String rangeStr2 = att2.remove(Constants.VERSION_ATTRIBUTE);
1:4fec049: 
1:4fec049:       //Also remove the optional directive as we don't care about that either
1:4fec049:       att1.remove(OPTIONAL_KEY);
1:4fec049:       att2.remove(OPTIONAL_KEY);
1:4fec049:       
1:4fec049:       //If identical take either, otherwise null!
1:4fec049:       Map<String, String> mergedAttribs = (att1.equals(att2) ? att1 : null);
1:4fec049:       if (mergedAttribs == null)
1:4fec049:       {
1:4fec049:         // Cannot intersect requirements if attributes are not identical.
1:4fec049:         result = null;
1:4fec049:       }
1:4fec049:       else
1:4fec049:       {
1:4fec049:         boolean isIntersectSuccessful = true;
1:4fec049:         
1:4fec049:         if (rangeStr1 != null && rangeStr2 != null)
1:4fec049:         {
1:4fec049:           // Both requirements have a version constraint so check for an intersection between them.
1:4fec049:           VersionRange range1 = ManifestHeaderProcessor.parseVersionRange(rangeStr1);
1:4fec049:           VersionRange range2 = ManifestHeaderProcessor.parseVersionRange(rangeStr2);
1:4fec049:           VersionRange intersectRange = range1.intersect(range2);
1:4fec049:           
1:4fec049:           if (intersectRange == null)
1:4fec049:           {
1:4fec049:             // No intersection possible.
1:4fec049:             isIntersectSuccessful = false;
1:4fec049:           }
1:4fec049:           else
1:4fec049:           {
1:4fec049:             // Use the intersected version range.
1:4fec049:             mergedAttribs.put(Constants.VERSION_ATTRIBUTE, intersectRange.toString());
1:4fec049:           }
1:4fec049:         }
1:4fec049:         else if (rangeStr1 != null)
1:4fec049:         {
1:4fec049:           mergedAttribs.put(Constants.VERSION_ATTRIBUTE, rangeStr1);
1:4fec049:         }
1:4fec049:         else if (rangeStr2 != null)
1:4fec049:         {
1:4fec049:           mergedAttribs.put(Constants.VERSION_ATTRIBUTE, rangeStr2);
1:4fec049:         }
1:4fec049:         
1:4fec049:         //If both optional, we are optional, otherwise use the default
1:4fec049:         if(p1.isOptional() && p2.isOptional()) 
1:4fec049:         {
1:4fec049:           mergedAttribs.put(OPTIONAL_KEY, Constants.RESOLUTION_OPTIONAL);
1:4fec049:         } 
1:4fec049:         
1:4fec049:         try { 
1:4fec049:           result = (isIntersectSuccessful ? new ImportedPackageImpl(p1.getPackageName(), mergedAttribs) : null);
1:4fec049:         } catch (InvalidAttributeException iax) { 
1:4fec049:           logger.error(iax.getMessage());
1:4fec049:         }
1:4fec049:       }
1:4fec049:     } 
1:58f55bd:     logger.debug(LOG_EXIT, "intersectPackage_", result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:4fec049: }
============================================================================
author:J. Daniel Kulp
-------------------------------------------------------------------------------
commit:3d7f5b3
/////////////////////////////////////////////////////////////////////////
author:Emily Jiang
-------------------------------------------------------------------------------
commit:0a977a8
/////////////////////////////////////////////////////////////////////////
1:       throw new InvalidAttributeException(MessageUtil.getMessage("MORE_THAN_ONE_FRAG_HOST",
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:de5b346
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Map<String, Map<String, String>> parsedFragHost = ManifestHeaderProcessor.parseImportString(fragmentHostHeader);
commit:910fec0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.VersionRange;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValueMap;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.InvalidAttributeException;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.modelling.utils.impl;
1: import static org.apache.aries.application.modelling.ModellingConstants.OPTIONAL_KEY;
1: import java.util.Collection;
1: import org.apache.aries.application.modelling.DeployedBundles;
1: import org.apache.aries.application.modelling.ModelledResource;
1: import org.apache.aries.application.modelling.ModellingConstants;
1: import org.apache.aries.application.modelling.impl.DeployedBundlesImpl;
1: import org.apache.aries.application.modelling.utils.ModellingHelper;
/////////////////////////////////////////////////////////////////////////
1: public class ModellingHelperImpl implements ModellingHelper
1:   private static final  Logger logger = LoggerFactory.getLogger(ModellingHelperImpl.class);
1: 
1:   
0:   @Override
1:   public boolean areMandatoryAttributesPresent(
1:       Map<String, String> consumerAttributes, Provider p) {
1:     return areMandatoryAttributesPresent_(consumerAttributes, p);
1:   }
1: 
1: 
0:   @Override
1:   public ImportedBundle buildFragmentHost(String fragmentHostHeader)
1:       throws InvalidAttributeException {
1:     return buildFragmentHost_(fragmentHostHeader);
1:   }
1: 
1: 
0:   @Override
1:   public ImportedPackage intersectPackage(ImportedPackage p1, ImportedPackage p2) {
1:     return intersectPackage_(p1, p2);
1:   }
1:   
0:   @Override
1:   public DeployedBundles createDeployedBundles(String assetName,
1:       Collection<ImportedBundle> appContentNames,
1:       Collection<ImportedBundle> appUseBundleNames,
1:       Collection<ModelledResource> fakeServiceProvidingBundles) 
1:   {
1:     logger.debug(LOG_ENTRY, "createDeployedBundles", new Object[]{assetName, 
1:         appContentNames, appUseBundleNames, fakeServiceProvidingBundles});  
1:     DeployedBundles result = new DeployedBundlesImpl (assetName, 
1:         appContentNames, appUseBundleNames, fakeServiceProvidingBundles);
1:     logger.debug(LOG_EXIT, "createDeployedBundles", result);
1:     return result;
1:   }
1:   
1:   // These underlying static methods are directly accessible 
1:   // from other classes within the bundle
1:   public static boolean areMandatoryAttributesPresent_(Map<String,String> consumerAttributes, Provider p) {
1:     logger.debug(LOG_ENTRY, "areMandatoryAttributesPresent_", new Object[]{consumerAttributes, p});
/////////////////////////////////////////////////////////////////////////
1:     logger.debug(LOG_EXIT, "areMandatoryAttributesPresent_", allPresent);
1:   public static ImportedBundle buildFragmentHost_(String fragmentHostHeader) throws InvalidAttributeException {
1:     logger.debug(LOG_ENTRY, "buildFragmentHost_", new Object[]{fragmentHostHeader});
/////////////////////////////////////////////////////////////////////////
1:     logger.debug(LOG_EXIT, "buildFragmentHost_", result);
1:   public static ImportedPackage intersectPackage_ (ImportedPackage p1, ImportedPackage p2) { 
1:     logger.debug(LOG_ENTRY, "intersectPackage_", new Object[]{p1, p2});
/////////////////////////////////////////////////////////////////////////
1:     logger.debug(LOG_EXIT, "intersectPackage_", result);
commit:4fec049
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.application.modelling.utils;
1: 
0: import static org.apache.aries.application.modelling.utils.ModellingConstants.OPTIONAL_KEY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: import static org.osgi.framework.Constants.BUNDLE_VERSION_ATTRIBUTE;
1: import static org.osgi.framework.Constants.VERSION_ATTRIBUTE;
1: 
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.aries.application.VersionRange;
0: import org.apache.aries.application.management.InvalidAttributeException;
1: import org.apache.aries.application.modelling.ImportedBundle;
1: import org.apache.aries.application.modelling.ImportedPackage;
1: import org.apache.aries.application.modelling.Provider;
1: import org.apache.aries.application.modelling.impl.ImportedBundleImpl;
1: import org.apache.aries.application.modelling.impl.ImportedPackageImpl;
1: import org.apache.aries.application.modelling.internal.MessageUtil;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
1: import org.osgi.framework.Constants;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0: public class ModellingUtils
1: {
0:   private static final  Logger logger = LoggerFactory.getLogger(ModellingUtils.class);
0:   /**
0:    * Check that all mandatory attributes from a Provider are specified by the consumer's attributes
0:    * @param consumerAttributes
0:    * @param p
0:    * @return true if all mandatory attributes are present, or no attributes are mandatory
1:    */
0:   public static boolean areMandatoryAttributesPresent(Map<String,String> consumerAttributes, Provider p) {
0:     logger.debug(LOG_ENTRY, "areMandatoryAttributesPresent", new Object[]{consumerAttributes, p});
1:     boolean allPresent = true;
1:     String mandatory = (String) p.getAttributes().get(Constants.MANDATORY_DIRECTIVE + ":");
1:     
1:     if(mandatory != null && !mandatory.equals("")) {
1:       List<String> attributeNames = ManifestHeaderProcessor.split(mandatory, ",");
1:       
1:       for(String name : attributeNames) {
1:         allPresent = consumerAttributes.containsKey(name);
1:         if(!allPresent)
1:           break;
1:       }
1:     }
0:     logger.debug(LOG_EXIT, "areMandatoryAttributesPresent", allPresent);
1:     return allPresent;
1:   }
1:   
1:   
1:   
0:   public static ImportedBundle buildFragmentHost(String fragmentHostHeader) throws InvalidAttributeException {
0:     logger.debug(LOG_ENTRY, "buildFragmentHost", new Object[]{fragmentHostHeader});
1:     if(fragmentHostHeader == null) { 
1:       
1:       return null;
1:     }
0:     Map<String, NameValueMap<String, String>> parsedFragHost = ManifestHeaderProcessor.parseImportString(fragmentHostHeader);
1:     if(parsedFragHost.size() != 1)
0:       throw new InvalidAttributeException(MessageUtil.getMessage("APPUTILS0001W",
1:           new Object[] {fragmentHostHeader}, 
1:           "An internal error occurred. A bundle fragment manifest must define exactly one Fragment-Host entry. The following entry was found" + fragmentHostHeader + "."));
1:     
1:     String hostName = parsedFragHost.keySet().iterator().next();
1:     Map<String, String> attribs = parsedFragHost.get(hostName);
1:     
1:     String bundleVersion = attribs.remove(BUNDLE_VERSION_ATTRIBUTE);
1:     if (bundleVersion != null && attribs.get(VERSION_ATTRIBUTE) == null) { 
1:       attribs.put (VERSION_ATTRIBUTE, bundleVersion);
1:     }
1:     attribs.put(ModellingConstants.OBR_SYMBOLIC_NAME, hostName);  
1:     
1:     String filter = ManifestHeaderProcessor.generateFilter(attribs);
1:     
1:     ImportedBundle result = new ImportedBundleImpl(filter, attribs);
0:     logger.debug(LOG_EXIT, "buildFragmentHost", result);
1:     return result;
1:   }
1:   
0:   /**
0:    * Create a new ImnportedPackage that is the intersection of the two supplied imports.
0:    * @param p1
0:    * @param p2
0:    * @return ImportedPackageImpl representing the intersection, or null. All attributes must match exactly.
1:    */
0:   public static ImportedPackage intersectPackage (ImportedPackage p1, ImportedPackage p2) { 
1:     
0:     logger.debug(LOG_ENTRY, "intersectPackage", new Object[]{p1, p2});
1:     ImportedPackage result = null;
1:     if (p1.getPackageName().equals(p2.getPackageName()))
1:     {
1:       Map<String,String> att1 = new HashMap<String, String>(p1.getAttributes());
1:       Map<String,String> att2 = new HashMap<String, String>(p2.getAttributes());
1:       
1:       // Get the versions, we remove them so that the remaining attributes can be matched.
1:       String rangeStr1 = att1.remove(Constants.VERSION_ATTRIBUTE);
1:       String rangeStr2 = att2.remove(Constants.VERSION_ATTRIBUTE);
1: 
1:       //Also remove the optional directive as we don't care about that either
1:       att1.remove(OPTIONAL_KEY);
1:       att2.remove(OPTIONAL_KEY);
1:       
1:       //If identical take either, otherwise null!
1:       Map<String, String> mergedAttribs = (att1.equals(att2) ? att1 : null);
1:       if (mergedAttribs == null)
1:       {
1:         // Cannot intersect requirements if attributes are not identical.
1:         result = null;
1:       }
1:       else
1:       {
1:         boolean isIntersectSuccessful = true;
1:         
1:         if (rangeStr1 != null && rangeStr2 != null)
1:         {
1:           // Both requirements have a version constraint so check for an intersection between them.
1:           VersionRange range1 = ManifestHeaderProcessor.parseVersionRange(rangeStr1);
1:           VersionRange range2 = ManifestHeaderProcessor.parseVersionRange(rangeStr2);
1:           VersionRange intersectRange = range1.intersect(range2);
1:           
1:           if (intersectRange == null)
1:           {
1:             // No intersection possible.
1:             isIntersectSuccessful = false;
1:           }
1:           else
1:           {
1:             // Use the intersected version range.
1:             mergedAttribs.put(Constants.VERSION_ATTRIBUTE, intersectRange.toString());
1:           }
1:         }
1:         else if (rangeStr1 != null)
1:         {
1:           mergedAttribs.put(Constants.VERSION_ATTRIBUTE, rangeStr1);
1:         }
1:         else if (rangeStr2 != null)
1:         {
1:           mergedAttribs.put(Constants.VERSION_ATTRIBUTE, rangeStr2);
1:         }
1:         
1:         //If both optional, we are optional, otherwise use the default
1:         if(p1.isOptional() && p2.isOptional()) 
1:         {
1:           mergedAttribs.put(OPTIONAL_KEY, Constants.RESOLUTION_OPTIONAL);
1:         } 
1:         
1:         try { 
1:           result = (isIntersectSuccessful ? new ImportedPackageImpl(p1.getPackageName(), mergedAttribs) : null);
1:         } catch (InvalidAttributeException iax) { 
1:           logger.error(iax.getMessage());
1:         }
1:       }
1:     } 
0:     logger.debug(LOG_EXIT, "intersectPackage", result);
1:     return result;
1:   }
1:   
1:   
1: }
============================================================================