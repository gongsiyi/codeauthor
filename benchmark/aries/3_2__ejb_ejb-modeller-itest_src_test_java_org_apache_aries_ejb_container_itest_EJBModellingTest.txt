1:92d0499: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:92d0499:  *  contributor license agreements.  See the NOTICE file distributed with
1:92d0499:  *  this work for additional information regarding copyright ownership.
1:92d0499:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:92d0499:  *  (the "License"); you may not use this file except in compliance with
1:92d0499:  *  the License.  You may obtain a copy of the License at
1:92d0499:  *
1:92d0499:  *     http://www.apache.org/licenses/LICENSE-2.0
1:92d0499:  *
1:92d0499:  *  Unless required by applicable law or agreed to in writing, software
1:92d0499:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:92d0499:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92d0499:  *  See the License for the specific language governing permissions and
1:92d0499:  *  limitations under the License.
1:92d0499:  */
1:92d0499: package org.apache.aries.ejb.container.itest;
84:92d0499: 
1:d4370f3: import static org.ops4j.pax.exam.CoreOptions.composite;
1:d4370f3: import static org.ops4j.pax.exam.CoreOptions.frameworkProperty;
1:d4370f3: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:d4370f3: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:d4370f3: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:d4370f3: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1:d4370f3: import static org.ops4j.pax.exam.CoreOptions.when;
1:92d0499: 
1:92d0499: import org.apache.aries.application.modelling.ModelledResourceManager;
1:92d0499: import org.apache.aries.application.modelling.ModellingManager;
1:92d0499: import org.apache.aries.application.modelling.ServiceModeller;
1:92d0499: import org.junit.Before;
1:92d0499: import org.junit.runner.RunWith;
1:d4370f3: import org.ops4j.pax.exam.Configuration;
1:d4370f3: import org.ops4j.pax.exam.CoreOptions;
1:92d0499: import org.ops4j.pax.exam.Option;
1:d4370f3: import org.ops4j.pax.exam.junit.PaxExam;
1:d4370f3: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:d4370f3: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:d4370f3: import org.osgi.framework.BundleException;
1:92d0499: 
1:d4370f3: @RunWith(PaxExam.class)
1:d4370f3: @ExamReactorStrategy(PerClass.class)
1:44c8d62: public class EJBModellingTest extends AbstractEJBModellerTest {
1:92d0499: 
1:d4370f3: 	@Before
1:d4370f3: 	public void setup() throws BundleException {
1:d4370f3: 		resolveBundles();
1:d4370f3: 		mrm = context().getService(ModelledResourceManager.class);
1:d4370f3: 		mm = context().getService(ModellingManager.class);
1:d4370f3: 		context().getService(ServiceModeller.class);
1:d4370f3: 	}
1:92d0499: 
1:d4370f3: 	protected Option baseOptions() {
1:d4370f3: 		String localRepo = System.getProperty("maven.repo.local");
1:92d0499: 
1:d4370f3: 		if (localRepo == null) {
1:d4370f3: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:d4370f3: 		}
1:d4370f3: 		return composite(
1:d4370f3: 				junitBundles(),
1:d4370f3: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
1:d4370f3: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"),
1:d4370f3: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:d4370f3: 				// this is how you set the default log level when using pax
1:d4370f3: 				// logging (logProfile)
1:d4370f3: 				systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:d4370f3: 				when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:d4370f3: 				);
1:d4370f3: 	}
1:d4370f3: 
1:d4370f3: 	@Configuration
1:d4370f3: 	public Option[] configuration() {
1:d4370f3: 		return CoreOptions.options(
1:d4370f3: 				baseOptions(),
1:d4370f3: 				frameworkProperty("org.osgi.framework.system.packages.extra").value("sun.misc,javax.xml.namespace;version=1.1"),
1:d4370f3: 				frameworkProperty("org.osgi.framework.system.packages")
1:d4370f3: 				.value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
1:d4370f3: 
1:d4370f3: 				// Specs
1:d4370f3: 				mavenBundle("org.osgi", "org.osgi.compendium"),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-annotation_1.1_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-ejb_3.1_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jcdi_1.0_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-el_2.2_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jaxrpc_1.1_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-servlet_3.0_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jsp_2.2_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-interceptor_1.1_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-saaj_1.3_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-activation_1.1_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-management_1.1_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-connector_1.6_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jacc_1.4_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-validation_1.0_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jaxrs_1.1_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-ws-metadata_2.0_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jaspic_1.0_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jaxb_2.2_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-stax-api_1.2_spec").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jaxws_2.2_spec").versionAsInProject(),
1:d4370f3: 				
1:d4370f3: 				mavenBundle("commons-cli", "commons-cli").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.commons", "commons-lang3").versionAsInProject(),
1:d4370f3: 				mavenBundle("commons-lang", "commons-lang").versionAsInProject(),
1:d4370f3: 				mavenBundle("commons-beanutils", "commons-beanutils").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.commons-collections").versionAsInProject(),
1:d4370f3: 				
1:d4370f3: 				mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1:d4370f3: 
1:d4370f3: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.aries.ejb", "org.apache.aries.ejb.modeller").versionAsInProject(),
1:d4370f3: 
1:d4370f3: 				mavenBundle("org.apache.openejb", "openejb-core").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.openejb", "openejb-api").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.openejb", "openejb-javaagent").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.openejb", "openejb-jee").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.openejb", "openejb-loader").versionAsInProject(),
1:d4370f3: 				
1:d4370f3: 				mavenBundle("org.apache.openwebbeans", "openwebbeans-impl").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.openwebbeans", "openwebbeans-spi").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.openwebbeans", "openwebbeans-ee").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.openwebbeans", "openwebbeans-ejb").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.openwebbeans", "openwebbeans-web").versionAsInProject(),
1:d4370f3: 
1:d4370f3: 				mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.javassist").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.wsdl4j-1.6.1").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.jaxb-impl").versionAsInProject(),
1:d4370f3: 				
1:d4370f3: 				
1:d4370f3: 				mavenBundle("org.apache.geronimo.components", "geronimo-connector").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.components", "geronimo-transaction").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.geronimo.bundles", "scannotation").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.xbean", "xbean-asm-shaded").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.xbean", "xbean-finder-shaded").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.xbean", "xbean-naming").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.apache.xbean", "xbean-reflect").versionAsInProject(),
1:d4370f3: 				mavenBundle("org.hsqldb", "hsqldb").versionAsInProject()
1:d4370f3: 				);
1:d4370f3: 		//        vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"),
1:d4370f3: 		//        waitForFrameworkStartup(),
1:d4370f3: 	}
1:92d0499: 
20:92d0499: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:d4370f3
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.frameworkProperty;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1: import static org.ops4j.pax.exam.CoreOptions.when;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.osgi.framework.BundleException;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: 	@Before
1: 	public void setup() throws BundleException {
1: 		resolveBundles();
1: 		mrm = context().getService(ModelledResourceManager.class);
1: 		mm = context().getService(ModellingManager.class);
1: 		context().getService(ServiceModeller.class);
1: 	}
1: 	protected Option baseOptions() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		return composite(
1: 				junitBundles(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"),
1: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				// this is how you set the default log level when using pax
1: 				// logging (logProfile)
1: 				systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1: 				);
1: 	}
1: 
1: 	@Configuration
1: 	public Option[] configuration() {
1: 		return CoreOptions.options(
1: 				baseOptions(),
1: 				frameworkProperty("org.osgi.framework.system.packages.extra").value("sun.misc,javax.xml.namespace;version=1.1"),
1: 				frameworkProperty("org.osgi.framework.system.packages")
1: 				.value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
1: 
1: 				// Specs
1: 				mavenBundle("org.osgi", "org.osgi.compendium"),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-annotation_1.1_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-ejb_3.1_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jcdi_1.0_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-el_2.2_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jaxrpc_1.1_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-servlet_3.0_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jsp_2.2_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-interceptor_1.1_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-saaj_1.3_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-activation_1.1_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-management_1.1_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-connector_1.6_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jacc_1.4_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-validation_1.0_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jaxrs_1.1_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-ws-metadata_2.0_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jaspic_1.0_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jaxb_2.2_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-stax-api_1.2_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jaxws_2.2_spec").versionAsInProject(),
1: 				
1: 				mavenBundle("commons-cli", "commons-cli").versionAsInProject(),
1: 				mavenBundle("org.apache.commons", "commons-lang3").versionAsInProject(),
1: 				mavenBundle("commons-lang", "commons-lang").versionAsInProject(),
1: 				mavenBundle("commons-beanutils", "commons-beanutils").versionAsInProject(),
1: 				mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.commons-collections").versionAsInProject(),
1: 				
1: 				mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1: 				mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1: 
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.ejb", "org.apache.aries.ejb.modeller").versionAsInProject(),
1: 
1: 				mavenBundle("org.apache.openejb", "openejb-core").versionAsInProject(),
1: 				mavenBundle("org.apache.openejb", "openejb-api").versionAsInProject(),
1: 				mavenBundle("org.apache.openejb", "openejb-javaagent").versionAsInProject(),
1: 				mavenBundle("org.apache.openejb", "openejb-jee").versionAsInProject(),
1: 				mavenBundle("org.apache.openejb", "openejb-loader").versionAsInProject(),
1: 				
1: 				mavenBundle("org.apache.openwebbeans", "openwebbeans-impl").versionAsInProject(),
1: 				mavenBundle("org.apache.openwebbeans", "openwebbeans-spi").versionAsInProject(),
1: 				mavenBundle("org.apache.openwebbeans", "openwebbeans-ee").versionAsInProject(),
1: 				mavenBundle("org.apache.openwebbeans", "openwebbeans-ejb").versionAsInProject(),
1: 				mavenBundle("org.apache.openwebbeans", "openwebbeans-web").versionAsInProject(),
1: 
1: 				mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.javassist").versionAsInProject(),
1: 				mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.wsdl4j-1.6.1").versionAsInProject(),
1: 				mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.jaxb-impl").versionAsInProject(),
1: 				
1: 				
1: 				mavenBundle("org.apache.geronimo.components", "geronimo-connector").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.components", "geronimo-transaction").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.bundles", "scannotation").versionAsInProject(),
1: 				mavenBundle("org.apache.xbean", "xbean-asm-shaded").versionAsInProject(),
1: 				mavenBundle("org.apache.xbean", "xbean-finder-shaded").versionAsInProject(),
1: 				mavenBundle("org.apache.xbean", "xbean-naming").versionAsInProject(),
1: 				mavenBundle("org.apache.xbean", "xbean-reflect").versionAsInProject(),
1: 				mavenBundle("org.hsqldb", "hsqldb").versionAsInProject()
1: 				);
1: 		//        vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"),
1: 		//        waitForFrameworkStartup(),
1: 	}
author:Emily Jiang
-------------------------------------------------------------------------------
commit:88297e2
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.ow2.asm", "asm-all"),
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:44c8d62
/////////////////////////////////////////////////////////////////////////
1: public class EJBModellingTest extends AbstractEJBModellerTest {
commit:4115fb2
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.hsqldb", "hsqldb"),
commit:541fd79
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
/////////////////////////////////////////////////////////////////////////
0:         vmOption("-Dorg.osgi.framework.system.packages.extra=sun.misc,javax.xml.namespace;version=1.1"),
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.jaxb-impl"),
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-ws-metadata_2.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jaspic_1.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jaxb_2.2_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-stax-api_1.2_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jaxws_2.2_spec"),
commit:0b933ec
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("commons-beanutils", "commons-beanutils"),
0:         mavenBundle("commons-collections", "commons-collections"),
commit:92d0499
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.container.itest;
1: 
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
0: import static org.apache.aries.itest.ExtraOptions.transactionBootDelegation;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
0: import java.io.IOException;
0: import java.util.Arrays;
0: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.Map;
0: import java.util.zip.ZipEntry;
0: import java.util.zip.ZipOutputStream;
1: 
0: import org.apache.aries.application.modelling.ExportedService;
0: import org.apache.aries.application.modelling.ModelledResource;
1: import org.apache.aries.application.modelling.ModelledResourceManager;
0: import org.apache.aries.application.modelling.ModellerException;
1: import org.apache.aries.application.modelling.ModellingManager;
1: import org.apache.aries.application.modelling.ServiceModeller;
0: import org.apache.aries.itest.AbstractIntegrationTest;
0: import org.apache.aries.util.filesystem.FileSystem;
0: import org.apache.aries.util.filesystem.ICloseableDirectory;
0: import org.apache.aries.util.io.IOUtils;
1: import org.junit.Before;
0: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class EJBModellingTest extends AbstractIntegrationTest {
1: 
0:   private ModelledResourceManager mrm;
0:   private ModellingManager mm;
1: 
0:   @Before
0:   public void setup() {
0:     mrm = context().getService(ModelledResourceManager.class);
0:     mm = context().getService(ModellingManager.class);
1:   }
1:   
0:   @Test
0:   public void modelBasicEJBBundleWithXML() throws Exception {
0:     context().getService(ServiceModeller.class);
0:     ModelledResource mr = null;
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
0:     zos.close();
0:     mr = model(baos.toByteArray());
1: 
0:     Collection<? extends ExportedService> services = 
0:       mr.getExportedServices(); 
1:     
0:     assertEquals("Wrong number of services", 2, services.size());
1:         
0:     assertTrue(services.containsAll(getXMLservices()));
0:     assertTrue(Collections.disjoint(services, getAnnotatedservices()));
1:   }
1:   
0:   @Test
0:   public void testEJBJARAndAnnotatedInZip() throws Exception {
0:     context().getService(ServiceModeller.class);
0:     ModelledResource mr = null;
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     mr = model(baos.toByteArray());
1: 
0:     Collection<? extends ExportedService> services = 
0:       mr.getExportedServices(); 
1:     
0:     assertEquals("Wrong number of services", 3, services.size());
1: 
0:     assertTrue(services.containsAll(getXMLservices()));
0:     assertTrue(services.containsAll(getAnnotatedservices()));
1:   }
1:   
0:   @Test
0:   public void testAnnotatedOnlyInZip() throws Exception {
0:     context().getService(ServiceModeller.class);
0:     ModelledResource mr = null;
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     mr = model(baos.toByteArray());
1: 
0:     Collection<? extends ExportedService> services = 
0:       mr.getExportedServices(); 
1:     
0:     assertEquals("Wrong number of services", 1, services.size());
1:     
0:     assertTrue(Collections.disjoint(services, getXMLservices()));
0:     assertTrue(services.containsAll(getAnnotatedservices()));
1:   }
1:   
0:   @Test
0:   public void testEJBJARAndAnnotatedNotOnClasspathInZip() throws Exception {
1: 
0:     context().getService(ServiceModeller.class);
0:     ModelledResource mr = null;
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_2.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/StatelessSessionBean.class", "no/beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class", "no/beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     mr = model(baos.toByteArray());
1: 
0:     Collection<? extends ExportedService> services = 
0:       mr.getExportedServices(); 
1:     
0:     assertEquals("Wrong number of services", 2, services.size());
1:     
0:     assertTrue(services.containsAll(getXMLservices()));
0:     assertTrue(Collections.disjoint(services, getAnnotatedservices()));
1:   }
1: 
0:   @Test
0:   public void testEJBJARAndAnnotatedOnClasspathInZip() throws Exception {
1: 
0:     context().getService(ServiceModeller.class);
0:     ModelledResource mr = null;
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_2.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/StatelessSessionBean.class", "yes/beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class", "yes/beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     mr = model(baos.toByteArray());
1: 
0:     Collection<? extends ExportedService> services = 
0:       mr.getExportedServices(); 
1:     
0:     assertEquals("Wrong number of services", 3, services.size());
1:     
0:     assertTrue(services.containsAll(getXMLservices()));
0:     assertTrue(services.containsAll(getAnnotatedservices()));
1:   }
1:   
0:   @Test
0:   public void testEJBJARInWebZip() throws Exception {
1: 
0:     context().getService(ServiceModeller.class);
0:     ModelledResource mr = null;
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
0:     zos.close();
1:     
0:     mr = model(baos.toByteArray());
1: 
0:     Collection<? extends ExportedService> services = 
0:       mr.getExportedServices(); 
1:     
0:     assertEquals("Wrong number of services", 2, services.size());
1:     
0:     assertTrue(services.containsAll(getXMLservices()));
0:     assertTrue(Collections.disjoint(services, getAnnotatedservices()));
1:   }
1: 
0:   @Test
0:   public void testEJBJARInWrongPlaceWebZip() throws Exception {
1: 
0:     context().getService(ServiceModeller.class);
0:     ModelledResource mr = null;
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
0:     zos.close();
1:     
0:     mr = model(baos.toByteArray());
1: 
0:     Collection<? extends ExportedService> services = 
0:       mr.getExportedServices(); 
1:     
0:     assertEquals("Wrong number of services", 0, services.size());
1:   }
1:   
0:   @Test
0:   public void testEJBJARAndAnnotatedInWebZip() throws Exception {
1: 
0:     context().getService(ServiceModeller.class);
0:     ModelledResource mr = null;
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     mr = model(baos.toByteArray());
1: 
0:     Collection<? extends ExportedService> services = 
0:       mr.getExportedServices(); 
1:     
0:     assertEquals("Wrong number of services", 3, services.size());
1:     
0:     assertTrue(services.containsAll(getXMLservices()));
0:     assertTrue(services.containsAll(getAnnotatedservices()));
1:   }
1:   
0:   @Test
0:   public void testAnnotatedOnlyInWebZip() throws Exception {
1: 
0:     context().getService(ServiceModeller.class);
0:     ModelledResource mr = null;
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     mr = model(baos.toByteArray());
1: 
0:     Collection<? extends ExportedService> services = 
0:       mr.getExportedServices(); 
1:     
0:     assertEquals("Wrong number of services", 1, services.size());
1:     
0:     assertTrue(Collections.disjoint(services, getXMLservices()));
0:     assertTrue(services.containsAll(getAnnotatedservices()));
1:   }
1:   
0:   @Test
0:   public void testEJBJARAndAnnotatedNotOnClasspathInWebZip() throws Exception {
1: 
0:     context().getService(ServiceModeller.class);
0:     ModelledResource mr = null;
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_4.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/StatelessSessionBean.class", "no/beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class", "no/beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     mr = model(baos.toByteArray());
1: 
0:     Collection<? extends ExportedService> services = 
0:       mr.getExportedServices(); 
1:     
0:     assertEquals("Wrong number of services", 2, services.size());
1:     
0:     assertTrue(services.containsAll(getXMLservices()));
0:     assertTrue(Collections.disjoint(services, getAnnotatedservices()));
1:   }
1:   
0:   @Test
0:   public void testEJBJARAndAnnotatedOnClasspathInWebZip() throws Exception {
1: 
0:     context().getService(ServiceModeller.class);
0:     ModelledResource mr = null;
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_4.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/StatelessSessionBean.class", "yes/beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class", "yes/beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     mr = model(baos.toByteArray());
1: 
0:     Collection<? extends ExportedService> services = 
0:       mr.getExportedServices(); 
1:     
0:     assertEquals("Wrong number of services", 3, services.size());
1:     
0:     assertTrue(services.containsAll(getXMLservices()));
0:     assertTrue(services.containsAll(getAnnotatedservices()));
1:   }
1: 
0:   private ModelledResource model(byte[] bytes) throws ModellerException {
0:     ICloseableDirectory dir = null;
0:     try {
0:       dir = FileSystem.getFSRoot(
0:            new ByteArrayInputStream(bytes));
0:       return mrm.getModelledResource(dir);
0:     } finally {
0:       IOUtils.close(dir);
1:     }
1:   }
1:   
0:   private Collection<ExportedService> getXMLservices() {
0:     Map<String, Object> serviceProperties = new HashMap<String, Object>();
0:     serviceProperties.put("ejb.name", "XML");
0:     serviceProperties.put("ejb.type", "Singleton");
0:     serviceProperties.put("service.exported.interfaces", "remote.Iface");
1:     
0:     Map<String, Object> serviceProperties2 = new HashMap<String, Object>();
0:     serviceProperties2.put("ejb.name", "XML");
0:     serviceProperties2.put("ejb.type", "Singleton");
1:     
0:     return Arrays.asList(mm.getExportedService("XML", 0, 
0:         Arrays.asList("remote.Iface"), serviceProperties), mm.getExportedService(
0:             "XML", 0, Arrays.asList("local.Iface"), serviceProperties2));
1:   }
1:   
0:   private Collection<ExportedService> getAnnotatedservices() {
0:     Map<String, Object> serviceProperties = new HashMap<String, Object>();
0:     serviceProperties.put("ejb.name", "Annotated");
0:     serviceProperties.put("ejb.type", "Stateless");
1:     
0:     return Arrays.asList(mm.getExportedService("Annotated", 0, 
0:         Arrays.asList("beans.StatelessSessionBean"), serviceProperties));
1:   }
1:   
0:   private void addToZip(ZipOutputStream zos, String src) throws IOException {
0:     addToZip(zos, src, src);
1:   }
1:   
0:   private void addToZip(ZipOutputStream zos, String src, String outLocation) throws IOException {
0:     zos.putNextEntry(new ZipEntry(outLocation));
0:     IOUtils.copy(getClass().getClassLoader().
0:         getResourceAsStream(src), zos);
0:     zos.closeEntry();
1:   }
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     return testOptions(
0:         paxLogging("DEBUG"),
0:         transactionBootDelegation(),
0:         vmOption("-Dorg.osgi.framework.system.packages.extra=sun.misc"),
0:         // Bundles
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:         mavenBundle("asm", "asm-all"),
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
0:         mavenBundle("org.apache.aries.ejb", "org.apache.aries.ejb.modeller"),
0:         mavenBundle("org.apache.openejb", "openejb-core"),
0:         mavenBundle("org.apache.openejb", "openejb-api"),
0:         mavenBundle("org.apache.openejb", "openejb-javaagent"),
0:         mavenBundle("org.apache.openejb", "openejb-jee"),
0:         mavenBundle("org.apache.openejb", "openejb-loader"),
0:         mavenBundle("org.apache.openwebbeans", "openwebbeans-impl"),
0:         mavenBundle("org.apache.openwebbeans", "openwebbeans-spi"),
0:         mavenBundle("org.apache.openwebbeans", "openwebbeans-ee"),
0:         mavenBundle("org.apache.openwebbeans", "openwebbeans-ejb"),
0:         mavenBundle("org.apache.openwebbeans", "openwebbeans-web"),
0:         mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.javassist"),
0:         mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.wsdl4j-1.6.1"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-annotation_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-ejb_3.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jcdi_1.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-el_2.2_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jaxrpc_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-atinject_1.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-servlet_3.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jsp_2.2_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-interceptor_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-saaj_1.3_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-activation_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-management_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-connector_1.6_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jacc_1.4_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-validation_1.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jaxrs_1.1_spec"),
0:         mavenBundle("commons-cli", "commons-cli"),
0:         mavenBundle("commons-lang", "commons-lang"),
0:         mavenBundle("org.apache.geronimo.components", "geronimo-connector"),
0:         mavenBundle("org.apache.geronimo.components", "geronimo-transaction"),
0:         mavenBundle("org.apache.geronimo.bundles", "scannotation"),
0:         mavenBundle("org.apache.xbean", "xbean-asm-shaded"),
0:         mavenBundle("org.apache.xbean", "xbean-finder-shaded"),
0:         mavenBundle("org.apache.xbean", "xbean-naming"),
0:         mavenBundle("org.apache.xbean", "xbean-reflect"),
0: //        vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"),
0: //        waitForFrameworkStartup(),
1:         
1: 
0:         equinox().version("3.5.0"));
1:   }
1: 
1: }
============================================================================