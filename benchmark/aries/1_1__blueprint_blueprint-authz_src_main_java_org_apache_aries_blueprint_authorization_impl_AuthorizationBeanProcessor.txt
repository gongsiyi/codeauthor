2:01524e7: /**
1:01524e7:  * Licensed to the Apache Software Foundation (ASF) under one
1:01524e7:  * or more contributor license agreements.  See the NOTICE file
1:01524e7:  * distributed with this work for additional information
1:01524e7:  * regarding copyright ownership.  The ASF licenses this file
1:01524e7:  * to you under the Apache License, Version 2.0 (the
1:01524e7:  * "License"); you may not use this file except in compliance
1:01524e7:  * with the License.  You may obtain a copy of the License at
2:01524e7:  *
1:01524e7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:01524e7:  *
1:01524e7:  * Unless required by applicable law or agreed to in writing,
1:01524e7:  * software distributed under the License is distributed on an
1:01524e7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:01524e7:  * KIND, either express or implied.  See the License for the
1:01524e7:  * specific language governing permissions and limitations
1:01524e7:  * under the License.
2:01524e7:  */
1:01524e7: package org.apache.aries.blueprint.authorization.impl;
5:01524e7: 
1:01524e7: import org.slf4j.Logger;
1:01524e7: import org.slf4j.LoggerFactory;
1:01524e7: import org.apache.aries.blueprint.BeanProcessor;
1:01524e7: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:95766a2: import org.apache.aries.blueprint.Processor;
1:01524e7: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:01524e7: 
1:3f62ee0: public class AuthorizationBeanProcessor implements BeanProcessor {
1:01524e7:     private static final Logger LOGGER = LoggerFactory.getLogger(AuthorizationInterceptor.class);
1:3f62ee0:     public static final String AUTH_PROCESSOR_BEAN_NAME = "org_apache_aries_authz_annotations";
1:01524e7:     private ComponentDefinitionRegistry cdr;
1:01524e7: 
1:3f62ee0:     public AuthorizationBeanProcessor() {
7:01524e7:     }
1:01524e7: 
1:01524e7:     public void setCdr(ComponentDefinitionRegistry cdr) {
1:01524e7:         this.cdr = cdr;
1:01524e7:     }
1:01524e7: 
1:01524e7:     public void afterDestroy(Object arg0, String arg1) {
1:01524e7:     }
1:01524e7: 
1:01524e7:     public Object afterInit(Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanData) {
1:01524e7:         return bean;
1:01524e7:     }
1:01524e7: 
1:01524e7:     public void beforeDestroy(Object arg0, String arg1) {
1:01524e7:     }
1:01524e7: 
1:01524e7:     public Object beforeInit(Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanData) {
1:95766a2:         if (bean instanceof Processor) {
1:95766a2:             // Never enhance other processors
1:95766a2:             return bean;
1:95766a2:         }
1:01524e7:         Class<?> c = bean.getClass();
1:3f62ee0:         if (new SecurityAnotationParser().isSecured(c)) {
1:01524e7:             LOGGER.debug("Adding annotation based authorization interceptor for bean {} with class {}", beanName, c);
1:ed14de6:             cdr.registerInterceptorWithComponent(beanData, new AuthorizationInterceptor(bean.getClass()));
1:01524e7:         }
1:01524e7:         return bean;
1:01524e7:     }
1:01524e7: 
1:01524e7: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:95766a2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.Processor;
/////////////////////////////////////////////////////////////////////////
1:         if (bean instanceof Processor) {
1:             // Never enhance other processors
1:             return bean;
1:         }
commit:ed14de6
/////////////////////////////////////////////////////////////////////////
1:             cdr.registerInterceptorWithComponent(beanData, new AuthorizationInterceptor(bean.getClass()));
commit:3f62ee0
/////////////////////////////////////////////////////////////////////////
1: public class AuthorizationBeanProcessor implements BeanProcessor {
1:     public static final String AUTH_PROCESSOR_BEAN_NAME = "org_apache_aries_authz_annotations";
1:     public AuthorizationBeanProcessor() {
/////////////////////////////////////////////////////////////////////////
1:         if (new SecurityAnotationParser().isSecured(c)) {
commit:01524e7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.authorization.impl;
1: 
0: import java.lang.reflect.Method;
1: 
0: import javax.annotation.security.DenyAll;
0: import javax.annotation.security.RolesAllowed;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.apache.aries.blueprint.BeanProcessor;
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: 
0: public class AnnotationParser implements BeanProcessor {
1:     private static final Logger LOGGER = LoggerFactory.getLogger(AuthorizationInterceptor.class);
1:     private ComponentDefinitionRegistry cdr;
0:     public static final String ANNOTATION_PARSER_BEAN_NAME = "org_apache_aries_authz_annotations";
1: 
0:     public AnnotationParser() {
1:     }
1: 
1:     public void setCdr(ComponentDefinitionRegistry cdr) {
1:         this.cdr = cdr;
1:     }
1: 
1:     public void afterDestroy(Object arg0, String arg1) {
1:     }
1: 
1:     public Object afterInit(Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanData) {
1:         return bean;
1:     }
1: 
1:     public void beforeDestroy(Object arg0, String arg1) {
1:     }
1: 
1:     public Object beforeInit(Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanData) {
1:         Class<?> c = bean.getClass();
0:         if (isSecured(c)) {
1:             LOGGER.debug("Adding annotation based authorization interceptor for bean {} with class {}", beanName, c);
0:             cdr.registerInterceptorWithComponent(beanData, new AuthorizationInterceptor());
1:         }
1:         return bean;
1:     }
1: 
1:     /**
0:      * A class is secured if @RolesAllowed is used on class or method level of the class or its hierarchy.
1:      * 
0:      * @param clazz
0:      * @return
1:      */
0:     private boolean isSecured(Class<?> clazz) {
0:         if (clazz == Object.class) {
0:             return false;
1:         }
0:         if (clazz.getAnnotation(RolesAllowed.class) != null || clazz.getAnnotation(DenyAll.class) != null) {
0:             return true;
1:         }
0:         for (Method m : clazz.getMethods()) {
0:             if (m.getAnnotation(RolesAllowed.class) != null) {
0:                 return true;
1:             }
0:             if (m.getAnnotation(DenyAll.class) != null) {
0:                 return true;
1:             }
1: 
1:         }
0:         return false;
1:     }
1: 
1: }
============================================================================