1:6c69a67: /*
1:6c69a67:  * Licensed under the Apache License, Version 2.0 (the "License");
1:6c69a67:  * you may not use this file except in compliance with the License.
1:6c69a67:  * You may obtain a copy of the License at
1:6c69a67:  *
1:6c69a67:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6c69a67:  *
1:6c69a67:  * Unless required by applicable law or agreed to in writing, software
1:6c69a67:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c69a67:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c69a67:  * See the License for the specific language governing permissions and
1:6c69a67:  * limitations under the License.
1:6c69a67:  */
1:7a834c3: package org.apache.aries.subsystem.util.felix;
1:6c69a67: 
1:6c69a67: import java.util.Collections;
1:6c69a67: import java.util.Map;
1:6c69a67: 
1:7a834c3: import org.apache.aries.subsystem.obr.internal.AbstractCapability;
1:7a834c3: import org.apache.aries.subsystem.obr.internal.NamespaceTranslator;
1:40e70c5: import org.osgi.framework.namespace.BundleNamespace;
1:6c69a67: import org.osgi.namespace.service.ServiceNamespace;
1:6c69a67: import org.osgi.resource.Resource;
1:6c69a67: 
1:6c69a67: public class FelixCapabilityAdapter extends AbstractCapability {
1:6c69a67: 	private final org.apache.felix.bundlerepository.Capability capability;
1:6c69a67: 	private final Resource resource;
1:6c69a67: 	
1:6c69a67: 	public FelixCapabilityAdapter(org.apache.felix.bundlerepository.Capability capability, Resource resource) {
1:6c69a67: 		if (capability == null)
1:6c69a67: 			throw new NullPointerException("Missing required parameter: capability");
1:6c69a67: 		this.capability = capability;
1:6c69a67: 		this.resource = resource;
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public Map<String, Object> getAttributes() {
1:6c69a67: 		Map<String, Object> result = capability.getPropertiesAsMap();
1:6c69a67: 		String namespace = getNamespace();
1:6c69a67: 		if (ServiceNamespace.SERVICE_NAMESPACE.equals(namespace))
1:40e70c5: 			result.put(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE, result.get(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE.toLowerCase()));
1:330bc7e: 		else if (BundleNamespace.BUNDLE_NAMESPACE.equals(namespace)) {
1:40e70c5: 			result.put(BundleNamespace.BUNDLE_NAMESPACE, result.get(org.apache.felix.bundlerepository.Resource.SYMBOLIC_NAME));
1:330bc7e: 			result.put(BundleNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE, result.get(org.apache.felix.bundlerepository.Resource.VERSION));
1:330bc7e: 		}
1:6c69a67: 		else
1:6c69a67: 			result.put(namespace, result.get(capability.getName()));
1:6c69a67: 		return result;
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public Map<String, String> getDirectives() {
1:6c69a67: 		return Collections.emptyMap();
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public String getNamespace() {
1:6c69a67: 		return NamespaceTranslator.translate(capability.getName());
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public Resource getResource() {
1:6c69a67: 		return resource;
1:6c69a67: 	}
1:6c69a67: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:330bc7e
/////////////////////////////////////////////////////////////////////////
1: 		else if (BundleNamespace.BUNDLE_NAMESPACE.equals(namespace)) {
1: 			result.put(BundleNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE, result.get(org.apache.felix.bundlerepository.Resource.VERSION));
1: 		}
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7a834c3
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.util.felix;
1: import org.apache.aries.subsystem.obr.internal.AbstractCapability;
1: import org.apache.aries.subsystem.obr.internal.NamespaceTranslator;
author:John Ross
-------------------------------------------------------------------------------
commit:40e70c5
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.BundleNamespace;
/////////////////////////////////////////////////////////////////////////
1: 			result.put(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE, result.get(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE.toLowerCase()));
0: 		else if (BundleNamespace.BUNDLE_NAMESPACE.equals(namespace))
1: 			result.put(BundleNamespace.BUNDLE_NAMESPACE, result.get(org.apache.felix.bundlerepository.Resource.SYMBOLIC_NAME));
commit:9731fd6
/////////////////////////////////////////////////////////////////////////
commit:6c69a67
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.aries.subsystem.obr.internal;
1: 
1: import java.util.Collections;
1: import java.util.Map;
1: 
0: import org.apache.aries.subsystem.core.internal.AbstractCapability;
1: import org.osgi.namespace.service.ServiceNamespace;
1: import org.osgi.resource.Resource;
1: 
1: public class FelixCapabilityAdapter extends AbstractCapability {
1: 	private final org.apache.felix.bundlerepository.Capability capability;
1: 	private final Resource resource;
1: 	
1: 	public FelixCapabilityAdapter(org.apache.felix.bundlerepository.Capability capability, Resource resource) {
1: 		if (capability == null)
1: 			throw new NullPointerException("Missing required parameter: capability");
1: 		this.capability = capability;
1: 		this.resource = resource;
1: 	}
1: 
1: 	public Map<String, Object> getAttributes() {
1: 		Map<String, Object> result = capability.getPropertiesAsMap();
1: 		String namespace = getNamespace();
1: 		if (ServiceNamespace.SERVICE_NAMESPACE.equals(namespace))
0: 			result.put(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE, result.get("objectclass"));
1: 		else
1: 			result.put(namespace, result.get(capability.getName()));
1: 		return result;
1: 	}
1: 
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.emptyMap();
1: 	}
1: 
1: 	public String getNamespace() {
1: 		return NamespaceTranslator.translate(capability.getName());
1: 	}
1: 
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================