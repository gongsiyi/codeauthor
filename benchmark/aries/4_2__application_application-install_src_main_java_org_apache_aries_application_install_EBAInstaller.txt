1:694eb45: /*
1:694eb45:  * Licensed to the Apache Software Foundation (ASF) under one
1:694eb45:  * or more contributor license agreements.  See the NOTICE file
1:694eb45:  * distributed with this work for additional information
1:694eb45:  * regarding copyright ownership.  The ASF licenses this file
1:694eb45:  * to you under the Apache License, Version 2.0 (the
1:694eb45:  * "License"); you may not use this file except in compliance
1:694eb45:  * with the License.  You may obtain a copy of the License at
1:694eb45:  *
1:694eb45:  *   http://www.apache.org/licenses/LICENSE-2.0
1:694eb45:  *
1:694eb45:  * Unless required by applicable law or agreed to in writing,
1:694eb45:  * software distributed under the License is distributed on an
1:694eb45:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:694eb45:  * KIND, either express or implied.  See the License for the
1:694eb45:  * specific language governing permissions and limitations
1:694eb45:  * under the License.
1:694eb45:  */
1:694eb45: 
1:694eb45: package org.apache.aries.application.install;
1:694eb45: 
1:694eb45: import java.io.File;
1:694eb45: import java.util.HashMap;
1:694eb45: import java.util.Map;
1:694eb45: 
1:694eb45: import org.apache.aries.application.management.AriesApplication;
1:694eb45: import org.apache.aries.application.management.AriesApplicationContext;
1:694eb45: import org.apache.aries.application.management.AriesApplicationManager;
1:910fec0: import org.apache.aries.util.filesystem.FileSystem;
1:694eb45: import org.apache.felix.fileinstall.ArtifactInstaller;
1:694eb45: import org.osgi.framework.Version;
1:694eb45: import org.slf4j.Logger;
1:694eb45: import org.slf4j.LoggerFactory;
1:694eb45: 
1:694eb45: public class EBAInstaller implements ArtifactInstaller
1:694eb45: {
1:694eb45: 
1:694eb45:   private static final Logger LOGGER = LoggerFactory.getLogger(EBAInstaller.class);
1:694eb45: 
1:694eb45:   private Map<File, AriesApplicationContext> appContexts = new HashMap<File, AriesApplicationContext>();
1:694eb45: 
1:694eb45:   private AriesApplicationManager applicationManager;
1:694eb45: 
1:694eb45:   public AriesApplicationManager getApplicationManager()
1:694eb45:   {
1:694eb45:     return applicationManager;
1:694eb45:   }
1:694eb45: 
1:694eb45:   public void setApplicationManager(AriesApplicationManager applicationManager)
1:694eb45:   {
1:694eb45:     this.applicationManager = applicationManager;
1:694eb45:   }
1:694eb45: 
1:694eb45:   public boolean canHandle(File fileToHandlerLocation)
1:694eb45:   {
1:694eb45:     return fileToHandlerLocation.getName().toLowerCase().endsWith(".eba");
1:694eb45:   }
1:694eb45: 
1:694eb45:   public void install(File applicationLocation) throws Exception
1:694eb45:   {
1:694eb45:     AriesApplication app = applicationManager
1:694eb45:         .createApplication(FileSystem.getFSRoot(applicationLocation));
1:694eb45:     
1:694eb45:     String appSymName = app.getApplicationMetadata().getApplicationSymbolicName();
1:694eb45:     Version appVersion = app.getApplicationMetadata().getApplicationVersion();
1:694eb45: 
1:694eb45:     LOGGER.debug("created app from {} : {} {} with contents {}", new Object[] {
1:694eb45:         applicationLocation.getName(), appSymName, appVersion,
1:694eb45:         app.getApplicationMetadata().getApplicationContents() });
1:694eb45: 
1:694eb45:     AriesApplicationContext context = applicationManager.install(app);
1:694eb45: 
1:694eb45:     LOGGER.debug("installed app {} {} state: {}", new Object[] {
1:694eb45:         appSymName, appVersion,
1:694eb45:         context.getApplicationState() });
1:694eb45:     
1:694eb45:     context.start();
1:694eb45: 
1:694eb45:     LOGGER.debug("started app {} {} state: {}", new Object[] {
1:694eb45:         appSymName, appVersion,
1:694eb45:         context.getApplicationState() });
1:694eb45:     
1:694eb45:     // Store the application context away because it is the application context we need
1:694eb45:     // to pass to the application manager if we're later asked to uninstall the application
1:694eb45:     appContexts.put(applicationLocation, context);
1:694eb45:   }
1:694eb45: 
1:694eb45:   public void uninstall(File applicationLocation) throws Exception
1:694eb45:   {
1:694eb45:     AriesApplicationContext context = appContexts.get(applicationLocation);
1:694eb45:     
1:694eb45:     String appSymName = context.getApplication().getApplicationMetadata().getApplicationSymbolicName();
1:694eb45:     Version appVersion = context.getApplication().getApplicationMetadata().getApplicationVersion();
1:694eb45: 
1:694eb45:     LOGGER.debug("uninstalling {} {} ", new Object[] {
1:694eb45:         appSymName, appVersion });
1:694eb45: 
1:694eb45:     if (context != null) {
1:694eb45:       context.stop();
1:694eb45:       applicationManager.uninstall(context);
1:694eb45:     }
1:694eb45: 
1:694eb45:     appContexts.remove(applicationLocation);
1:694eb45:     
1:694eb45:     LOGGER.debug("uninstalled {} {} state: {}", new Object[] {
1:694eb45:         appSymName, appVersion,
1:694eb45:         context.getApplicationState() });
1:694eb45:   }
1:694eb45: 
1:694eb45:   public void update(File arg0) throws Exception
1:694eb45:   {
1:694eb45:     throw new UnsupportedOperationException("Updating .eba file is not supported");
1:694eb45:   }
1:694eb45: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.FileSystem;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:694eb45
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.application.install;
1: 
1: import java.io.File;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.AriesApplicationContext;
1: import org.apache.aries.application.management.AriesApplicationManager;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
1: import org.apache.felix.fileinstall.ArtifactInstaller;
1: import org.osgi.framework.Version;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class EBAInstaller implements ArtifactInstaller
1: {
1: 
1:   private static final Logger LOGGER = LoggerFactory.getLogger(EBAInstaller.class);
1: 
1:   private Map<File, AriesApplicationContext> appContexts = new HashMap<File, AriesApplicationContext>();
1: 
1:   private AriesApplicationManager applicationManager;
1: 
1:   public AriesApplicationManager getApplicationManager()
1:   {
1:     return applicationManager;
1:   }
1: 
1:   public void setApplicationManager(AriesApplicationManager applicationManager)
1:   {
1:     this.applicationManager = applicationManager;
1:   }
1: 
1:   public boolean canHandle(File fileToHandlerLocation)
1:   {
1:     return fileToHandlerLocation.getName().toLowerCase().endsWith(".eba");
1:   }
1: 
1:   public void install(File applicationLocation) throws Exception
1:   {
1:     AriesApplication app = applicationManager
1:         .createApplication(FileSystem.getFSRoot(applicationLocation));
1:     
1:     String appSymName = app.getApplicationMetadata().getApplicationSymbolicName();
1:     Version appVersion = app.getApplicationMetadata().getApplicationVersion();
1: 
1:     LOGGER.debug("created app from {} : {} {} with contents {}", new Object[] {
1:         applicationLocation.getName(), appSymName, appVersion,
1:         app.getApplicationMetadata().getApplicationContents() });
1: 
1:     AriesApplicationContext context = applicationManager.install(app);
1: 
1:     LOGGER.debug("installed app {} {} state: {}", new Object[] {
1:         appSymName, appVersion,
1:         context.getApplicationState() });
1:     
1:     context.start();
1: 
1:     LOGGER.debug("started app {} {} state: {}", new Object[] {
1:         appSymName, appVersion,
1:         context.getApplicationState() });
1:     
1:     // Store the application context away because it is the application context we need
1:     // to pass to the application manager if we're later asked to uninstall the application
1:     appContexts.put(applicationLocation, context);
1:   }
1: 
1:   public void uninstall(File applicationLocation) throws Exception
1:   {
1:     AriesApplicationContext context = appContexts.get(applicationLocation);
1:     
1:     String appSymName = context.getApplication().getApplicationMetadata().getApplicationSymbolicName();
1:     Version appVersion = context.getApplication().getApplicationMetadata().getApplicationVersion();
1: 
1:     LOGGER.debug("uninstalling {} {} ", new Object[] {
1:         appSymName, appVersion });
1: 
1:     if (context != null) {
1:       context.stop();
1:       applicationManager.uninstall(context);
1:     }
1: 
1:     appContexts.remove(applicationLocation);
1:     
1:     LOGGER.debug("uninstalled {} {} state: {}", new Object[] {
1:         appSymName, appVersion,
1:         context.getApplicationState() });
1:   }
1: 
1:   public void update(File arg0) throws Exception
1:   {
1:     throw new UnsupportedOperationException("Updating .eba file is not supported");
1:   }
1: }
commit:948b72b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.AriesApplicationContext;
/////////////////////////////////////////////////////////////////////////
0:   private Map<File, AriesApplicationContext> appContexts = new HashMap<File, AriesApplicationContext>();
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationContext context = applicationManager.install(app);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationContext context = appContexts.get(applicationLocation);
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:3d40314
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.utils.filesystem.FileSystem;
/////////////////////////////////////////////////////////////////////////
0:         .createApplication(FileSystem.getFSRoot(applicationLocation));
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:d0fe3fc
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.install;
0: 
0: import java.io.File;
0: import java.util.HashMap;
0: import java.util.Map;
0: 
0: import org.apache.aries.application.management.ApplicationContext;
0: import org.apache.aries.application.management.AriesApplication;
0: import org.apache.aries.application.management.AriesApplicationManager;
0: import org.apache.felix.fileinstall.ArtifactInstaller;
0: import org.osgi.framework.Version;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: public class EBAInstaller implements ArtifactInstaller
0: {
0: 
0:   private static final Logger LOGGER = LoggerFactory.getLogger(EBAInstaller.class);
0: 
0:   private Map<File, ApplicationContext> appContexts = new HashMap<File, ApplicationContext>();
0: 
0:   private AriesApplicationManager applicationManager;
0: 
0:   public AriesApplicationManager getApplicationManager()
0:   {
0:     return applicationManager;
0:   }
0: 
0:   public void setApplicationManager(AriesApplicationManager applicationManager)
0:   {
0:     this.applicationManager = applicationManager;
0:   }
0: 
0:   public boolean canHandle(File fileToHandlerLocation)
0:   {
0:     return fileToHandlerLocation.getName().toLowerCase().endsWith(".eba");
0:   }
0: 
0:   public void install(File applicationLocation) throws Exception
0:   {
0:     AriesApplication app = applicationManager
0:         .createApplication(applicationLocation.toURI().toURL());
0:     
0:     String appSymName = app.getApplicationMetadata().getApplicationSymbolicName();
0:     Version appVersion = app.getApplicationMetadata().getApplicationVersion();
0: 
0:     LOGGER.debug("created app from {} : {} {} with contents {}", new Object[] {
0:         applicationLocation.getName(), appSymName, appVersion,
0:         app.getApplicationMetadata().getApplicationContents() });
0: 
0:     ApplicationContext context = applicationManager.install(app);
0: 
0:     LOGGER.debug("installed app {} {} state: {}", new Object[] {
0:         appSymName, appVersion,
0:         context.getApplicationState() });
0:     
0:     context.start();
0: 
0:     LOGGER.debug("started app {} {} state: {}", new Object[] {
0:         appSymName, appVersion,
0:         context.getApplicationState() });
0:     
0:     // Store the application context away because it is the application context we need
0:     // to pass to the application manager if we're later asked to uninstall the application
0:     appContexts.put(applicationLocation, context);
0:   }
0: 
0:   public void uninstall(File applicationLocation) throws Exception
0:   {
0:     ApplicationContext context = appContexts.get(applicationLocation);
0:     
0:     String appSymName = context.getApplication().getApplicationMetadata().getApplicationSymbolicName();
0:     Version appVersion = context.getApplication().getApplicationMetadata().getApplicationVersion();
0: 
0:     LOGGER.debug("uninstalling {} {} ", new Object[] {
0:         appSymName, appVersion });
0: 
0:     if (context != null) {
0:       context.stop();
0:       applicationManager.uninstall(context);
0:     }
0: 
0:     appContexts.remove(applicationLocation);
0:     
0:     LOGGER.debug("uninstalled {} {} state: {}", new Object[] {
0:         appSymName, appVersion,
0:         context.getApplicationState() });
0:   }
0: 
0:   public void update(File arg0) throws Exception
0:   {
0:     throw new UnsupportedOperationException("Updating .eba file is not supported");
0:   }
0: }
============================================================================