1:798ba3b: /*
1:798ba3b:  * Licensed to the Apache Software Foundation (ASF) under one
1:798ba3b:  * or more contributor license agreements.  See the NOTICE file
1:798ba3b:  * distributed with this work for additional information
1:798ba3b:  * regarding copyright ownership.  The ASF licenses this file
1:798ba3b:  * to you under the Apache License, Version 2.0 (the
1:798ba3b:  * "License"); you may not use this file except in compliance
1:798ba3b:  * with the License.  You may obtain a copy of the License at
1:798ba3b:  *
1:798ba3b:  *   http://www.apache.org/licenses/LICENSE-2.0
1:798ba3b:  *
1:798ba3b:  * Unless required by applicable law or agreed to in writing,
1:798ba3b:  * software distributed under the License is distributed on an
1:798ba3b:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:798ba3b:  * KIND, either express or implied.  See the License for the
1:798ba3b:  * specific language governing permissions and limitations
1:798ba3b:  * under the License.
1:798ba3b:  */
1:798ba3b: package org.apache.aries.jpa.support.osgi.impl;
1:798ba3b: 
1:798ba3b: import org.osgi.framework.BundleContext;
1:798ba3b: import org.osgi.framework.ServiceReference;
1:798ba3b: import org.osgi.service.coordinator.Coordinator;
1:798ba3b: import org.osgi.util.tracker.ServiceTracker;
1:798ba3b: 
1:798ba3b: public class CoordinatorTracker extends ServiceTracker<Coordinator, EMFTracker> {
1:798ba3b: 
1:798ba3b:     public CoordinatorTracker(BundleContext context) {
1:798ba3b:         super(context, Coordinator.class, null);
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public EMFTracker addingService(ServiceReference<Coordinator> ref) {
1:798ba3b:         Coordinator coordinator = context.getService(ref);
1:798ba3b:         EMFTracker emfTracker = new EMFTracker(context, coordinator);
1:798ba3b:         emfTracker.open();
1:798ba3b:         return emfTracker;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public void removedService(ServiceReference<Coordinator> ref, EMFTracker emfTracker) {
1:798ba3b:         emfTracker.close();
1:798ba3b:         super.removedService(ref, emfTracker);
1:798ba3b:     }
1:798ba3b: 
1:798ba3b: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:798ba3b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.support.osgi.impl;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.coordinator.Coordinator;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: public class CoordinatorTracker extends ServiceTracker<Coordinator, EMFTracker> {
1: 
1:     public CoordinatorTracker(BundleContext context) {
1:         super(context, Coordinator.class, null);
1:     }
1: 
1:     @Override
1:     public EMFTracker addingService(ServiceReference<Coordinator> ref) {
1:         Coordinator coordinator = context.getService(ref);
1:         EMFTracker emfTracker = new EMFTracker(context, coordinator);
1:         emfTracker.open();
1:         return emfTracker;
1:     }
1: 
1:     @Override
1:     public void removedService(ServiceReference<Coordinator> ref, EMFTracker emfTracker) {
1:         emfTracker.close();
1:         super.removedService(ref, emfTracker);
1:     }
1: 
1: }
============================================================================