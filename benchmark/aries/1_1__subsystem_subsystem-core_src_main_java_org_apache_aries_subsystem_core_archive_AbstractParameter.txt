1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
1:1129914: 
1:1129914: public abstract class AbstractParameter implements Parameter {
1:2ffcfb9: 	protected final String name;
1:2ffcfb9: 	protected final Object value;
1:1129914: 	
1:26123d8: 	public AbstractParameter(String name, Object value) {
1:2ffcfb9: 		if (name == null || value == null) {
1:2ffcfb9: 			throw new NullPointerException();
1:2ffcfb9: 		}
1:2ffcfb9: 		this.name = name;
1:2ffcfb9: 		this.value = value;
1:1129914: 	}
1:1129914: 	
1:2ffcfb9: 	@Override
1:2ffcfb9:     public String getName() {
1:2ffcfb9: 		return name;
1:1129914: 	}
1:1129914: 	
1:2ffcfb9: 	@Override
1:2ffcfb9:     public Object getValue() {
1:2ffcfb9: 		return value;
1:2ffcfb9: 	}
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public int hashCode() {
1:2ffcfb9:         int result = 17;
1:2ffcfb9:         result = 31 * result + name.hashCode();
1:2ffcfb9:         result = 31 * result + value.hashCode();
1:2ffcfb9:         return result;
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9: 	public boolean equals(Object o) {
1:2ffcfb9: 		if (o == this) {
1:2ffcfb9:     		return true;
1:2ffcfb9:     	}
1:2ffcfb9:     	if (!(o instanceof AbstractParameter)) {
1:2ffcfb9:     		return false;
1:2ffcfb9:     	}
1:2ffcfb9:     	AbstractParameter that = (AbstractParameter)o;
1:2ffcfb9:     	return that.name.equals(this.name)
1:2ffcfb9:     			&& that.value.equals(this.value);
1:1129914: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: 	protected final String name;
1: 	protected final Object value;
1: 		if (name == null || value == null) {
1: 			throw new NullPointerException();
1: 		}
1: 		this.name = name;
1: 		this.value = value;
1: 	@Override
1:     public String getName() {
1: 		return name;
1: 	@Override
1:     public Object getValue() {
1: 		return value;
1: 	}
1: 
1:     @Override
1:     public int hashCode() {
1:         int result = 17;
1:         result = 31 * result + name.hashCode();
1:         result = 31 * result + value.hashCode();
1:         return result;
1:     }
1: 
1:     @Override
1: 	public boolean equals(Object o) {
1: 		if (o == this) {
1:     		return true;
1:     	}
1:     	if (!(o instanceof AbstractParameter)) {
1:     		return false;
1:     	}
1:     	AbstractParameter that = (AbstractParameter)o;
1:     	return that.name.equals(this.name)
1:     			&& that.value.equals(this.value);
commit:26123d8
/////////////////////////////////////////////////////////////////////////
0: 	private final Object myValue;
1: 	public AbstractParameter(String name, Object value) {
/////////////////////////////////////////////////////////////////////////
0: 	public Object getValue() {
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: public abstract class AbstractParameter implements Parameter {
0: 	private final String myName;
0: 	private final String myValue;
1: 	
0: 	public AbstractParameter(String name, String value) {
0: 		myName = name;
0: 		myValue = value;
1: 	}
1: 	
0: 	public String getName() {
0: 		return myName;
1: 	}
1: 	
0: 	public String getValue() {
0: 		return myValue;
1: 	}
1: }
============================================================================