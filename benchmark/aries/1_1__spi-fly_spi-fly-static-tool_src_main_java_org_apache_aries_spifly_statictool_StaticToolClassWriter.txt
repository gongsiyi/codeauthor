1:805ec38: /*
1:805ec38:  * Licensed to the Apache Software Foundation (ASF) under one
1:805ec38:  * or more contributor license agreements.  See the NOTICE file
1:805ec38:  * distributed with this work for additional information
1:805ec38:  * regarding copyright ownership.  The ASF licenses this file
1:805ec38:  * to you under the Apache License, Version 2.0 (the
1:805ec38:  * "License"); you may not use this file except in compliance
1:805ec38:  * with the License.  You may obtain a copy of the License at
1:805ec38:  *
1:805ec38:  *   http://www.apache.org/licenses/LICENSE-2.0
1:805ec38:  *
1:805ec38:  * Unless required by applicable law or agreed to in writing,
1:805ec38:  * software distributed under the License is distributed on an
1:805ec38:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:805ec38:  * KIND, either express or implied.  See the License for the
1:805ec38:  * specific language governing permissions and limitations
1:805ec38:  * under the License.
1:805ec38:  */
1:805ec38: package org.apache.aries.spifly.statictool;
1:805ec38: 
1:805ec38: import org.objectweb.asm.ClassWriter;
1:805ec38: 
1:805ec38: /**
1:805ec38:  * We need to override ASM's default behaviour in
1:805ec38:  * {@link #getCommonSuperClass(String, String)} so that it accepts a custom
1:805ec38:  * classloader that can also see the jar that is being processed.
1:805ec38:  */
1:805ec38: public final class StaticToolClassWriter extends ClassWriter {
1:805ec38: 
1:805ec38:     private static final String OBJECT_INTERNAL_NAME = "java/lang/Object";
1:805ec38:     private final ClassLoader loader;
1:805ec38: 
1:805ec38:     public StaticToolClassWriter(int flags, ClassLoader loader) {
1:805ec38:         super(flags);
1:805ec38: 
1:805ec38:         this.loader = loader;
1:805ec38:     }
1:805ec38: 
1:805ec38:     /**
1:805ec38:      * The implementation uses the classloader provided using the Constructor.
1:805ec38:      *
1:805ec38:      * This is a slight variation on ASM's default behaviour as that obtains the
1:805ec38:      * classloader to use ASMs classloader.
1:805ec38:      */
1:805ec38:     @Override
1:805ec38:     protected String getCommonSuperClass(final String type1, final String type2) {
1:805ec38:         Class<?> c, d;
1:805ec38:         try {
1:805ec38:             c = Class.forName(type1.replace('/', '.'), false, loader);
1:805ec38:             d = Class.forName(type2.replace('/', '.'), false, loader);
1:805ec38:         } catch (Exception e) {
1:805ec38:             throw new RuntimeException(e);
1:805ec38:         }
1:805ec38: 
1:805ec38:         if (c.isAssignableFrom(d)) {
1:805ec38:             return type1;
1:805ec38:         }
1:805ec38:         if (d.isAssignableFrom(c)) {
1:805ec38:             return type2;
1:805ec38:         }
1:805ec38: 
1:805ec38:         if (c.isInterface() || d.isInterface()) {
1:805ec38:             return OBJECT_INTERNAL_NAME;
1:805ec38:         }
1:805ec38: 
1:805ec38:         do {
1:805ec38:             c = c.getSuperclass();
1:805ec38:         } while (!c.isAssignableFrom(d));
1:805ec38: 
1:805ec38:         return c.getName().replace('.', '/');
1:805ec38:     }
1:805ec38: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:805ec38
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly.statictool;
1: 
1: import org.objectweb.asm.ClassWriter;
1: 
1: /**
1:  * We need to override ASM's default behaviour in
1:  * {@link #getCommonSuperClass(String, String)} so that it accepts a custom
1:  * classloader that can also see the jar that is being processed.
1:  */
1: public final class StaticToolClassWriter extends ClassWriter {
1: 
1:     private static final String OBJECT_INTERNAL_NAME = "java/lang/Object";
1:     private final ClassLoader loader;
1: 
1:     public StaticToolClassWriter(int flags, ClassLoader loader) {
1:         super(flags);
1: 
1:         this.loader = loader;
1:     }
1: 
1:     /**
1:      * The implementation uses the classloader provided using the Constructor.
1:      *
1:      * This is a slight variation on ASM's default behaviour as that obtains the
1:      * classloader to use ASMs classloader.
1:      */
1:     @Override
1:     protected String getCommonSuperClass(final String type1, final String type2) {
1:         Class<?> c, d;
1:         try {
1:             c = Class.forName(type1.replace('/', '.'), false, loader);
1:             d = Class.forName(type2.replace('/', '.'), false, loader);
1:         } catch (Exception e) {
1:             throw new RuntimeException(e);
1:         }
1: 
1:         if (c.isAssignableFrom(d)) {
1:             return type1;
1:         }
1:         if (d.isAssignableFrom(c)) {
1:             return type2;
1:         }
1: 
1:         if (c.isInterface() || d.isInterface()) {
1:             return OBJECT_INTERNAL_NAME;
1:         }
1: 
1:         do {
1:             c = c.getSuperclass();
1:         } while (!c.isAssignableFrom(d));
1: 
1:         return c.getName().replace('.', '/');
1:     }
1: }
============================================================================