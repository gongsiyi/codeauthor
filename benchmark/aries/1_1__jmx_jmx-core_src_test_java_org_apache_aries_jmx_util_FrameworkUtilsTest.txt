1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.util;
1:fdf3952: 
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleDependencies;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleExportedPackages;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleIds;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleImportedPackages;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getRegisteredServiceIds;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getServiceIds;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getServicesInUseByBundle;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.isBundlePendingRemoval;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.isBundleRequiredByOthers;
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.resolveService;
1:fdf3952: import static org.junit.Assert.assertArrayEquals;
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertFalse;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:fdf3952: import static org.junit.Assert.assertTrue;
1:fdf3952: import static org.mockito.Matchers.anyString;
1:fdf3952: import static org.mockito.Mockito.mock;
1:fdf3952: import static org.mockito.Mockito.when;
1:fdf3952: 
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.HashSet;
1:fdf3952: import java.util.Hashtable;
1:fdf3952: import java.util.Set;
1:fdf3952: 
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.framework.Version;
1:fdf3952: import org.osgi.service.packageadmin.ExportedPackage;
1:fdf3952: import org.osgi.service.packageadmin.PackageAdmin;
1:fdf3952: import org.osgi.service.packageadmin.RequiredBundle;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * 
1:fdf3952:  * 
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class FrameworkUtilsTest {
1:fdf3952: 
1:fdf3952:    
1:fdf3952:     @Test
1:fdf3952:     public void testGetBundleIds() throws Exception {
1:fdf3952: 
1:fdf3952:         assertEquals(0, getBundleIds((Bundle[])null).length);
1:fdf3952:         assertEquals(0, getBundleIds(new Bundle[0]).length);
1:fdf3952:         
1:fdf3952:         Bundle b1 = mock(Bundle.class);
1:fdf3952:         when(b1.getBundleId()).thenReturn(new Long(47));
1:fdf3952:         Bundle b2 = mock(Bundle.class);
1:fdf3952:         when(b2.getBundleId()).thenReturn(new Long(23));
1:fdf3952:         
1:fdf3952:         assertArrayEquals(new long[] { 47 , 23 }, getBundleIds(new Bundle[] { b1, b2 }));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testResolveService() throws Exception {
1:fdf3952:         
1:fdf3952:         BundleContext context = mock(BundleContext.class);
1:fdf3952:         ServiceReference reference = mock(ServiceReference.class);
1:fdf3952:         when(context.getAllServiceReferences(anyString(), anyString())).thenReturn(new ServiceReference[] { reference });        
1:fdf3952:         ServiceReference result = resolveService(context, 998);
1:fdf3952:         assertNotNull(result);
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testGetServiceIds() throws Exception {
1:fdf3952:         
1:fdf3952:         assertEquals(0, getServiceIds(null).length);
1:fdf3952:         assertEquals(0, getServiceIds(new ServiceReference[0]).length);
1:fdf3952:         
1:fdf3952:         ServiceReference s1 = mock(ServiceReference.class);
1:fdf3952:         when(s1.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(15));
1:fdf3952:         ServiceReference s2 = mock(ServiceReference.class);
1:fdf3952:         when(s2.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(5));
1:fdf3952:         ServiceReference s3 = mock(ServiceReference.class);
1:fdf3952:         when(s3.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(25));
1:fdf3952:         
1:fdf3952:         assertArrayEquals(new long[] { 15, 5, 25 }, 
1:fdf3952:                 getServiceIds(new ServiceReference[] {s1, s2, s3} ) );
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testGetBundleExportedPackages() throws Exception {
1:fdf3952:         
1:fdf3952:         Bundle bundle = mock(Bundle.class);
1:fdf3952:         PackageAdmin admin = mock(PackageAdmin.class);
1:fdf3952:         
1:fdf3952:         assertEquals(0, getBundleExportedPackages(bundle, admin).length);
1:fdf3952:         
1:fdf3952:         ExportedPackage exported = mock(ExportedPackage.class);
1:fdf3952:         when(exported.getName()).thenReturn("org.apache.aries.jmx");
1:fdf3952:         when(exported.getVersion()).thenReturn(new Version("1.0.0"));
1:fdf3952:         when(admin.getExportedPackages(bundle)).thenReturn(new ExportedPackage[] { exported });
1:fdf3952:         
1:fdf3952:         assertArrayEquals(new String[] { "org.apache.aries.jmx;1.0.0"} , getBundleExportedPackages(bundle, admin));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testGetBundleImportedPackages() throws Exception {
1:fdf3952:         
1:fdf3952:         Bundle bundle = mock(Bundle.class);
1:fdf3952:         BundleContext context = mock(BundleContext.class);
1:fdf3952:         
1:fdf3952:         Bundle b1 = mock(Bundle.class);
1:fdf3952:         Bundle b2 = mock(Bundle.class);
1:fdf3952:         Bundle b3 = mock(Bundle.class);
1:fdf3952:         when(context.getBundles()).thenReturn(new Bundle[] { bundle, b1, b2, b3 });
1:fdf3952:         
1:fdf3952:         ExportedPackage ep1 = mock(ExportedPackage.class);
1:fdf3952:         when(ep1.getImportingBundles()).thenReturn(new Bundle[] { bundle, b2, b3 });
1:fdf3952:         when(ep1.getName()).thenReturn("org.apache.aries.jmx.b1");
1:fdf3952:         when(ep1.getVersion()).thenReturn(Version.emptyVersion);
1:fdf3952:         ExportedPackage ep2 = mock(ExportedPackage.class);
1:fdf3952:         when(ep2.getImportingBundles()).thenReturn(new Bundle[] { bundle, b3 });
1:fdf3952:         when(ep2.getName()).thenReturn("org.apache.aries.jmx.b2");
1:fdf3952:         when(ep2.getVersion()).thenReturn(Version.parseVersion("2.0.1"));
1:fdf3952:         
1:fdf3952:         PackageAdmin admin = mock(PackageAdmin.class);
1:fdf3952:         when(admin.getExportedPackages(b1)).thenReturn(new ExportedPackage[] { ep1 });
1:fdf3952:         when(admin.getExportedPackages(b2)).thenReturn(new ExportedPackage[] { ep2 });
1:fdf3952:         when(admin.getExportedPackages(b3)).thenReturn(null);
1:fdf3952:         
1:fdf3952:         //check first with DynamicImport
1:fdf3952:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:fdf3952:         headers.put(Constants.DYNAMICIMPORT_PACKAGE, "*");
1:fdf3952:         when(bundle.getHeaders()).thenReturn(headers);
1:fdf3952:         assertArrayEquals(new String[] { "org.apache.aries.jmx.b1;0.0.0" , "org.apache.aries.jmx.b2;2.0.1"} 
1:fdf3952:                     , getBundleImportedPackages(context, bundle, admin));
1:fdf3952:         
1:fdf3952:         //check with ImportPackage statement
1:fdf3952:         headers.remove(Constants.DYNAMICIMPORT_PACKAGE);
1:fdf3952:         String importPackageStatement = "org.apache.aries.jmx.b1;version=0.0.0;resolution:=optional,org.apache.aries.jmx.b2;attribute:=value;version=\"[2.0, 3.0)\""; 
1:fdf3952:         headers.put(Constants.IMPORT_PACKAGE, importPackageStatement);
1:fdf3952:         when(admin.getExportedPackages("org.apache.aries.jmx.b1")).thenReturn(new ExportedPackage[] { ep1 });
1:fdf3952:         when(admin.getExportedPackages("org.apache.aries.jmx.b2")).thenReturn(new ExportedPackage[] { ep2 });
1:fdf3952:         
1:fdf3952:         assertArrayEquals(new String[] { "org.apache.aries.jmx.b1;0.0.0" , "org.apache.aries.jmx.b2;2.0.1"} 
1:fdf3952:                     , getBundleImportedPackages(context, bundle, admin));
1:fdf3952:         
1:fdf3952:         
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testGetRegisteredServiceIds() throws Exception {
1:fdf3952:         
1:fdf3952:         Bundle bundle = mock(Bundle.class);
1:fdf3952:         
1:fdf3952:         ServiceReference s1 = mock(ServiceReference.class);
1:fdf3952:         when(s1.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(56));
1:fdf3952:         ServiceReference s2 = mock(ServiceReference.class);
1:fdf3952:         when(s2.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(5));
1:fdf3952:         ServiceReference s3 = mock(ServiceReference.class);
1:fdf3952:         when(s3.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(34));
1:fdf3952:         
1:fdf3952:         when(bundle.getRegisteredServices()).thenReturn(new ServiceReference[] { s1, s2, s3 });
1:fdf3952:         
1:fdf3952:         assertArrayEquals(new long[] { 56, 5, 34}, getRegisteredServiceIds(bundle));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testGetServicesInUseByBundle() throws Exception {
1:fdf3952:         
1:fdf3952:         Bundle bundle = mock(Bundle.class);
1:fdf3952:         
1:fdf3952:         ServiceReference s1 = mock(ServiceReference.class);
1:fdf3952:         when(s1.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(15));
1:fdf3952:         ServiceReference s2 = mock(ServiceReference.class);
1:fdf3952:         when(s2.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(16));
1:fdf3952:         ServiceReference s3 = mock(ServiceReference.class);
1:fdf3952:         when(s3.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(17));
1:fdf3952:         
1:fdf3952:         when(bundle.getServicesInUse()).thenReturn(new ServiceReference[] { s1, s2, s3 });
1:fdf3952:         
1:fdf3952:         assertArrayEquals(new long[] { 15, 16, 17 }, getServicesInUseByBundle(bundle));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testIsBundlePendingRemoval() throws Exception {
1:fdf3952:         
1:fdf3952:         Bundle bundle = mock(Bundle.class);
1:fdf3952:         when(bundle.getSymbolicName()).thenReturn("org.apache.testb");
1:fdf3952:         
1:fdf3952:         RequiredBundle reqBundle = mock(RequiredBundle.class);
1:fdf3952:         when(reqBundle.getBundle()).thenReturn(bundle);
1:fdf3952:         when(reqBundle.isRemovalPending()).thenReturn(true);
1:fdf3952:         
1:fdf3952:         PackageAdmin admin = mock(PackageAdmin.class);
1:fdf3952:         when(admin.getRequiredBundles("org.apache.testb")).thenReturn(new RequiredBundle[] { reqBundle });
1:fdf3952:         
1:fdf3952:         assertTrue(isBundlePendingRemoval(bundle, admin));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testIsBundleRequiredByOthers() throws Exception {
1:fdf3952:         
1:fdf3952:         Bundle bundle = mock(Bundle.class);
1:fdf3952:         when(bundle.getSymbolicName()).thenReturn("org.apache.testb");
1:fdf3952:         
1:fdf3952:         RequiredBundle reqBundle = mock(RequiredBundle.class);
1:fdf3952:         when(reqBundle.getBundle()).thenReturn(bundle);
1:fdf3952:         when(reqBundle.getRequiringBundles()).thenReturn(new Bundle[0]);
1:fdf3952:         
1:fdf3952:         PackageAdmin admin = mock(PackageAdmin.class);
1:fdf3952:         when(admin.getRequiredBundles("org.apache.testb")).thenReturn(new RequiredBundle[] { reqBundle });
1:fdf3952:         
1:fdf3952:         assertFalse(isBundleRequiredByOthers(bundle, admin));
1:fdf3952:         
1:fdf3952:         Bundle user = mock(Bundle.class);
1:fdf3952:         when(reqBundle.getRequiringBundles()).thenReturn(new Bundle[] { user });
1:fdf3952:         
1:fdf3952:         assertTrue(isBundleRequiredByOthers(bundle, admin));
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testGetBundleDependencies() throws Exception {
1:fdf3952:         
1:fdf3952:         Bundle bundle = mock(Bundle.class);
1:fdf3952:         BundleContext context = mock(BundleContext.class);
1:fdf3952:        
1:fdf3952:         Bundle b1 = mock(Bundle.class);
1:fdf3952:         when(b1.getSymbolicName()).thenReturn("b1");
1:fdf3952:         when(b1.getBundleId()).thenReturn(new Long(44));
1:fdf3952:         Bundle b2 = mock(Bundle.class);
1:fdf3952:         when(b2.getSymbolicName()).thenReturn("b2");
1:fdf3952:         when(b2.getBundleId()).thenReturn(new Long(55));
1:fdf3952:         Bundle b3 = mock(Bundle.class);
1:fdf3952:         when(b3.getSymbolicName()).thenReturn("b3");
1:fdf3952:         when(b3.getBundleId()).thenReturn(new Long(66));
1:fdf3952:         
1:fdf3952:         when(context.getBundles()).thenReturn(new Bundle[] { bundle, b1, b2, b3 });
1:fdf3952:         
1:fdf3952:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:fdf3952:         when(bundle.getHeaders()).thenReturn(headers);
1:fdf3952:         
1:fdf3952:         PackageAdmin admin = mock(PackageAdmin.class);
1:fdf3952:         assertEquals(0, getBundleDependencies(context, bundle, admin).length);
1:fdf3952:         
1:fdf3952:         RequiredBundle rb1 = mock(RequiredBundle.class);
1:fdf3952:         when(rb1.getBundle()).thenReturn(b1);
1:fdf3952:         when(rb1.getRequiringBundles()).thenReturn(new Bundle[] { bundle, b2 });
1:fdf3952:         RequiredBundle rb2 = mock(RequiredBundle.class);
1:fdf3952:         when(rb2.getBundle()).thenReturn(b2);
1:fdf3952:         when(rb2.getRequiringBundles()).thenReturn(new Bundle[] { b1 });
1:fdf3952:         RequiredBundle rb3 = mock(RequiredBundle.class);
1:fdf3952:         when(rb3.getBundle()).thenReturn(b3);
1:fdf3952:         when(rb3.getRequiringBundles()).thenReturn(new Bundle[] { bundle, b1, b2 });
1:fdf3952:         
1:fdf3952:         headers.put(Constants.REQUIRE_BUNDLE, "b1;bundle-version=\"1.0.0\",b3;bundle-version=\"2.0.0\"");
1:fdf3952:         
1:fdf3952:         when(admin.getRequiredBundles("b1")).thenReturn(new RequiredBundle[] { rb1 });
1:fdf3952:         when(admin.getRequiredBundles("b2")).thenReturn(new RequiredBundle[] { rb2 });
1:fdf3952:         when(admin.getRequiredBundles("b3")).thenReturn(new RequiredBundle[] { rb3 });
1:fdf3952:         
1:fdf3952:         assertEquals(toSet(new long[] { 44, 66 }), toSet(getBundleDependencies(context, bundle, admin)));
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     private static Set<Long> toSet(long[] array) {
1:fdf3952:         Set<Long> set = new HashSet<Long>();
1:fdf3952:         for (long value : array) {
1:fdf3952:             set.add(value);
1:fdf3952:         }
1:fdf3952:         return set;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.util;
1: 
1: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleDependencies;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleExportedPackages;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleIds;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleImportedPackages;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getRegisteredServiceIds;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getServiceIds;
1: import static org.apache.aries.jmx.util.FrameworkUtils.getServicesInUseByBundle;
1: import static org.apache.aries.jmx.util.FrameworkUtils.isBundlePendingRemoval;
1: import static org.apache.aries.jmx.util.FrameworkUtils.isBundleRequiredByOthers;
1: import static org.apache.aries.jmx.util.FrameworkUtils.resolveService;
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.mockito.Matchers.anyString;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.when;
1: 
1: import java.util.Dictionary;
1: import java.util.HashSet;
1: import java.util.Hashtable;
1: import java.util.Set;
1: 
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.Version;
1: import org.osgi.service.packageadmin.ExportedPackage;
1: import org.osgi.service.packageadmin.PackageAdmin;
1: import org.osgi.service.packageadmin.RequiredBundle;
1: 
1: /**
1:  * 
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class FrameworkUtilsTest {
1: 
1:    
1:     @Test
1:     public void testGetBundleIds() throws Exception {
1: 
1:         assertEquals(0, getBundleIds((Bundle[])null).length);
1:         assertEquals(0, getBundleIds(new Bundle[0]).length);
1:         
1:         Bundle b1 = mock(Bundle.class);
1:         when(b1.getBundleId()).thenReturn(new Long(47));
1:         Bundle b2 = mock(Bundle.class);
1:         when(b2.getBundleId()).thenReturn(new Long(23));
1:         
1:         assertArrayEquals(new long[] { 47 , 23 }, getBundleIds(new Bundle[] { b1, b2 }));
1:         
1:     }
1:     
1:     @Test
1:     public void testResolveService() throws Exception {
1:         
1:         BundleContext context = mock(BundleContext.class);
1:         ServiceReference reference = mock(ServiceReference.class);
1:         when(context.getAllServiceReferences(anyString(), anyString())).thenReturn(new ServiceReference[] { reference });        
1:         ServiceReference result = resolveService(context, 998);
1:         assertNotNull(result);
1:         
1:     }
1: 
1:     @Test
1:     public void testGetServiceIds() throws Exception {
1:         
1:         assertEquals(0, getServiceIds(null).length);
1:         assertEquals(0, getServiceIds(new ServiceReference[0]).length);
1:         
1:         ServiceReference s1 = mock(ServiceReference.class);
1:         when(s1.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(15));
1:         ServiceReference s2 = mock(ServiceReference.class);
1:         when(s2.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(5));
1:         ServiceReference s3 = mock(ServiceReference.class);
1:         when(s3.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(25));
1:         
1:         assertArrayEquals(new long[] { 15, 5, 25 }, 
1:                 getServiceIds(new ServiceReference[] {s1, s2, s3} ) );
1:     }
1:     
1:     @Test
1:     public void testGetBundleExportedPackages() throws Exception {
1:         
1:         Bundle bundle = mock(Bundle.class);
1:         PackageAdmin admin = mock(PackageAdmin.class);
1:         
1:         assertEquals(0, getBundleExportedPackages(bundle, admin).length);
1:         
1:         ExportedPackage exported = mock(ExportedPackage.class);
1:         when(exported.getName()).thenReturn("org.apache.aries.jmx");
1:         when(exported.getVersion()).thenReturn(new Version("1.0.0"));
1:         when(admin.getExportedPackages(bundle)).thenReturn(new ExportedPackage[] { exported });
1:         
1:         assertArrayEquals(new String[] { "org.apache.aries.jmx;1.0.0"} , getBundleExportedPackages(bundle, admin));
1:         
1:     }
1:     
1:     
1:     @Test
1:     public void testGetBundleImportedPackages() throws Exception {
1:         
1:         Bundle bundle = mock(Bundle.class);
1:         BundleContext context = mock(BundleContext.class);
1:         
1:         Bundle b1 = mock(Bundle.class);
1:         Bundle b2 = mock(Bundle.class);
1:         Bundle b3 = mock(Bundle.class);
1:         when(context.getBundles()).thenReturn(new Bundle[] { bundle, b1, b2, b3 });
1:         
1:         ExportedPackage ep1 = mock(ExportedPackage.class);
1:         when(ep1.getImportingBundles()).thenReturn(new Bundle[] { bundle, b2, b3 });
1:         when(ep1.getName()).thenReturn("org.apache.aries.jmx.b1");
1:         when(ep1.getVersion()).thenReturn(Version.emptyVersion);
1:         ExportedPackage ep2 = mock(ExportedPackage.class);
1:         when(ep2.getImportingBundles()).thenReturn(new Bundle[] { bundle, b3 });
1:         when(ep2.getName()).thenReturn("org.apache.aries.jmx.b2");
1:         when(ep2.getVersion()).thenReturn(Version.parseVersion("2.0.1"));
1:         
1:         PackageAdmin admin = mock(PackageAdmin.class);
1:         when(admin.getExportedPackages(b1)).thenReturn(new ExportedPackage[] { ep1 });
1:         when(admin.getExportedPackages(b2)).thenReturn(new ExportedPackage[] { ep2 });
1:         when(admin.getExportedPackages(b3)).thenReturn(null);
1:         
1:         //check first with DynamicImport
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:         headers.put(Constants.DYNAMICIMPORT_PACKAGE, "*");
1:         when(bundle.getHeaders()).thenReturn(headers);
1:         assertArrayEquals(new String[] { "org.apache.aries.jmx.b1;0.0.0" , "org.apache.aries.jmx.b2;2.0.1"} 
1:                     , getBundleImportedPackages(context, bundle, admin));
1:         
1:         //check with ImportPackage statement
1:         headers.remove(Constants.DYNAMICIMPORT_PACKAGE);
1:         String importPackageStatement = "org.apache.aries.jmx.b1;version=0.0.0;resolution:=optional,org.apache.aries.jmx.b2;attribute:=value;version=\"[2.0, 3.0)\""; 
1:         headers.put(Constants.IMPORT_PACKAGE, importPackageStatement);
1:         when(admin.getExportedPackages("org.apache.aries.jmx.b1")).thenReturn(new ExportedPackage[] { ep1 });
1:         when(admin.getExportedPackages("org.apache.aries.jmx.b2")).thenReturn(new ExportedPackage[] { ep2 });
1:         
1:         assertArrayEquals(new String[] { "org.apache.aries.jmx.b1;0.0.0" , "org.apache.aries.jmx.b2;2.0.1"} 
1:                     , getBundleImportedPackages(context, bundle, admin));
1:         
1:         
1:     }
1:     
1:     @Test
1:     public void testGetRegisteredServiceIds() throws Exception {
1:         
1:         Bundle bundle = mock(Bundle.class);
1:         
1:         ServiceReference s1 = mock(ServiceReference.class);
1:         when(s1.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(56));
1:         ServiceReference s2 = mock(ServiceReference.class);
1:         when(s2.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(5));
1:         ServiceReference s3 = mock(ServiceReference.class);
1:         when(s3.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(34));
1:         
1:         when(bundle.getRegisteredServices()).thenReturn(new ServiceReference[] { s1, s2, s3 });
1:         
1:         assertArrayEquals(new long[] { 56, 5, 34}, getRegisteredServiceIds(bundle));
1:         
1:     }
1:     
1:     @Test
1:     public void testGetServicesInUseByBundle() throws Exception {
1:         
1:         Bundle bundle = mock(Bundle.class);
1:         
1:         ServiceReference s1 = mock(ServiceReference.class);
1:         when(s1.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(15));
1:         ServiceReference s2 = mock(ServiceReference.class);
1:         when(s2.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(16));
1:         ServiceReference s3 = mock(ServiceReference.class);
1:         when(s3.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(17));
1:         
1:         when(bundle.getServicesInUse()).thenReturn(new ServiceReference[] { s1, s2, s3 });
1:         
1:         assertArrayEquals(new long[] { 15, 16, 17 }, getServicesInUseByBundle(bundle));
1:         
1:     }
1:     
1:     @Test
1:     public void testIsBundlePendingRemoval() throws Exception {
1:         
1:         Bundle bundle = mock(Bundle.class);
1:         when(bundle.getSymbolicName()).thenReturn("org.apache.testb");
1:         
1:         RequiredBundle reqBundle = mock(RequiredBundle.class);
1:         when(reqBundle.getBundle()).thenReturn(bundle);
1:         when(reqBundle.isRemovalPending()).thenReturn(true);
1:         
1:         PackageAdmin admin = mock(PackageAdmin.class);
1:         when(admin.getRequiredBundles("org.apache.testb")).thenReturn(new RequiredBundle[] { reqBundle });
1:         
1:         assertTrue(isBundlePendingRemoval(bundle, admin));
1:         
1:     }
1:     
1:     @Test
1:     public void testIsBundleRequiredByOthers() throws Exception {
1:         
1:         Bundle bundle = mock(Bundle.class);
1:         when(bundle.getSymbolicName()).thenReturn("org.apache.testb");
1:         
1:         RequiredBundle reqBundle = mock(RequiredBundle.class);
1:         when(reqBundle.getBundle()).thenReturn(bundle);
1:         when(reqBundle.getRequiringBundles()).thenReturn(new Bundle[0]);
1:         
1:         PackageAdmin admin = mock(PackageAdmin.class);
1:         when(admin.getRequiredBundles("org.apache.testb")).thenReturn(new RequiredBundle[] { reqBundle });
1:         
1:         assertFalse(isBundleRequiredByOthers(bundle, admin));
1:         
1:         Bundle user = mock(Bundle.class);
1:         when(reqBundle.getRequiringBundles()).thenReturn(new Bundle[] { user });
1:         
1:         assertTrue(isBundleRequiredByOthers(bundle, admin));
1:     }
1:     
1:     
1:     @Test
1:     public void testGetBundleDependencies() throws Exception {
1:         
1:         Bundle bundle = mock(Bundle.class);
1:         BundleContext context = mock(BundleContext.class);
1:        
1:         Bundle b1 = mock(Bundle.class);
1:         when(b1.getSymbolicName()).thenReturn("b1");
1:         when(b1.getBundleId()).thenReturn(new Long(44));
1:         Bundle b2 = mock(Bundle.class);
1:         when(b2.getSymbolicName()).thenReturn("b2");
1:         when(b2.getBundleId()).thenReturn(new Long(55));
1:         Bundle b3 = mock(Bundle.class);
1:         when(b3.getSymbolicName()).thenReturn("b3");
1:         when(b3.getBundleId()).thenReturn(new Long(66));
1:         
1:         when(context.getBundles()).thenReturn(new Bundle[] { bundle, b1, b2, b3 });
1:         
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:         when(bundle.getHeaders()).thenReturn(headers);
1:         
1:         PackageAdmin admin = mock(PackageAdmin.class);
1:         assertEquals(0, getBundleDependencies(context, bundle, admin).length);
1:         
1:         RequiredBundle rb1 = mock(RequiredBundle.class);
1:         when(rb1.getBundle()).thenReturn(b1);
1:         when(rb1.getRequiringBundles()).thenReturn(new Bundle[] { bundle, b2 });
1:         RequiredBundle rb2 = mock(RequiredBundle.class);
1:         when(rb2.getBundle()).thenReturn(b2);
1:         when(rb2.getRequiringBundles()).thenReturn(new Bundle[] { b1 });
1:         RequiredBundle rb3 = mock(RequiredBundle.class);
1:         when(rb3.getBundle()).thenReturn(b3);
1:         when(rb3.getRequiringBundles()).thenReturn(new Bundle[] { bundle, b1, b2 });
1:         
1:         headers.put(Constants.REQUIRE_BUNDLE, "b1;bundle-version=\"1.0.0\",b3;bundle-version=\"2.0.0\"");
1:         
1:         when(admin.getRequiredBundles("b1")).thenReturn(new RequiredBundle[] { rb1 });
1:         when(admin.getRequiredBundles("b2")).thenReturn(new RequiredBundle[] { rb2 });
1:         when(admin.getRequiredBundles("b3")).thenReturn(new RequiredBundle[] { rb3 });
1:         
1:         assertEquals(toSet(new long[] { 44, 66 }), toSet(getBundleDependencies(context, bundle, admin)));
1:     }
1:     
1:     private static Set<Long> toSet(long[] array) {
1:         Set<Long> set = new HashSet<Long>();
1:         for (long value : array) {
1:             set.add(value);
1:         }
1:         return set;
1:     }
1:     
1: }
============================================================================