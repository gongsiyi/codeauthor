1:e073d9e: /*
1:e073d9e:  * Licensed to the Apache Software Foundation (ASF) under one
1:e073d9e:  * or more contributor license agreements.  See the NOTICE file
1:e073d9e:  * distributed with this work for additional information
1:e073d9e:  * regarding copyright ownership.  The ASF licenses this file
1:e073d9e:  * to you under the Apache License, Version 2.0 (the
1:e073d9e:  * "License"); you may not use this file except in compliance
1:e073d9e:  * with the License.  You may obtain a copy of the License at
1:e073d9e:  *
1:e073d9e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e073d9e:  *
1:e073d9e:  * Unless required by applicable law or agreed to in writing,
1:e073d9e:  * software distributed under the License is distributed on an
1:e073d9e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e073d9e:  * KIND, either express or implied.  See the License for the
1:e073d9e:  * specific language governing permissions and limitations
1:e073d9e:  * under the License.
1:e073d9e:  */
1:aa20c34: package org.apache.aries.transaction.jdbc.internal;
1:aa20c34: 
1:db3b209: import org.apache.aries.blueprint.NamespaceHandler;
1:db3b209: import org.apache.aries.transaction.AriesTransactionManager;
1:38d4a18: import org.apache.aries.util.tracker.SingleServiceTracker;
1:db3b209: import org.apache.xbean.blueprint.context.impl.XBeanNamespaceHandler;
1:e073d9e: import org.osgi.framework.BundleActivator;
1:e073d9e: import org.osgi.framework.BundleContext;
1:dac41bf: import org.osgi.framework.Filter;
1:e073d9e: import org.osgi.framework.InvalidSyntaxException;
1:e073d9e: import org.osgi.framework.ServiceReference;
1:e073d9e: import org.osgi.framework.ServiceRegistration;
1:e073d9e: import org.osgi.util.tracker.ServiceTracker;
1:e073d9e: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1:db3b209: import org.slf4j.Logger;
1:db3b209: import org.slf4j.LoggerFactory;
1:db3b209: 
1:dac41bf: import javax.sql.CommonDataSource;
1:8047ebe: 
1:db3b209: import java.util.Hashtable;
1:38d4a18: 
1:8047ebe: @SuppressWarnings("rawtypes")
1:dac41bf: public class Activator implements BundleActivator,
1:dac41bf:                                   ServiceTrackerCustomizer<CommonDataSource, ManagedDataSourceFactory>,
1:38d4a18:                                   SingleServiceTracker.SingleServiceListener
1:38d4a18: {
1:db3b209: 
1:db3b209:     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class);
1:db3b209: 
1:38d4a18:     private ServiceTracker<CommonDataSource, ManagedDataSourceFactory> t;
1:38d4a18:     private SingleServiceTracker<AriesTransactionManager> tm;
1:db3b209:     private BundleContext context;
1:acafa58:     private ServiceRegistration[] nshReg;
1:db3b209: 
1:db3b209:     public void start(BundleContext ctx) {
1:db3b209:         context = ctx;
1:db3b209: 
1:db3b209:         // Expose blueprint namespace handler if xbean is present
2:db3b209:         try {
1:db3b209:             nshReg = JdbcNamespaceHandler.register(ctx);
1:db3b209:         } catch (NoClassDefFoundError e) {
1:db3b209:             LOGGER.warn("Unable to register JDBC blueprint namespace handler (xbean-blueprint not available).");
1:db3b209:         } catch (Exception e) {
1:db3b209:             LOGGER.error("Unable to register JDBC blueprint namespace handler", e);
1:db3b209:         }
1:db3b209: 
1:dac41bf:         Filter filter;
1:dac41bf:         String flt = "(&(|(objectClass=javax.sql.XADataSource)(objectClass=javax.sql.DataSource))(!(aries.managed=true)))";
1:dac41bf:         try {
1:dac41bf:             filter = context.createFilter(flt);
1:dac41bf:         } catch (InvalidSyntaxException e) {
1:dac41bf:             throw new IllegalStateException(e);
1:dac41bf:         }
1:dac41bf:         t = new ServiceTracker<CommonDataSource, ManagedDataSourceFactory>(ctx, filter, this);
1:db3b209: 
1:38d4a18:         tm = new SingleServiceTracker<AriesTransactionManager>(ctx, AriesTransactionManager.class, this);
1:38d4a18:         tm.open();
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void stop(BundleContext ctx) {
1:38d4a18:         tm.close();
1:38d4a18:         t.close();
1:db3b209:         if (nshReg != null) {
1:acafa58:             for (ServiceRegistration reg : nshReg) {
1:38d4a18:                 safeUnregisterService(reg);
1:db3b209:             }
1:db3b209:         }
1:db3b209:     }
1:db3b209: 
1:dac41bf:     public ManagedDataSourceFactory addingService(ServiceReference<CommonDataSource> ref) {
1:db3b209:         try {
1:dac41bf:             LOGGER.info("Wrapping DataSource " + ref);
1:38d4a18:             ManagedDataSourceFactory mdsf = new ManagedDataSourceFactory(ref, tm.getService());
1:dac41bf:             mdsf.register();
1:dac41bf:             return mdsf;
1:db3b209:         } catch (Exception e) {
1:dac41bf:             LOGGER.warn("Error wrapping DataSource " + ref, e);
1:db3b209:             return null;
1:db3b209:         }
1:db3b209:     }
1:db3b209: 
1:dac41bf:     public void modifiedService(ServiceReference<CommonDataSource> ref, ManagedDataSourceFactory service) {
1:dac41bf:         try {
1:dac41bf:             service.unregister();
1:dac41bf:         } catch (Exception e) {
1:dac41bf:             LOGGER.warn("Error closing DataSource " + ref, e);
1:db3b209:         }
1:dac41bf:         try {
1:dac41bf:             service.register();
1:dac41bf:         } catch (Exception e) {
1:dac41bf:             LOGGER.warn("Error wrapping DataSource " + ref, e);
1:dac41bf:         }
1:db3b209:     }
1:aa20c34: 
1:dac41bf:     public void removedService(ServiceReference<CommonDataSource> ref, ManagedDataSourceFactory service) {
1:dac41bf:         try {
1:dac41bf:             service.unregister();
1:dac41bf:         } catch (Exception e) {
1:dac41bf:             LOGGER.warn("Error closing DataSource " + ref, e);
1:dac41bf:         }
1:db3b209:     }
4:4538461: 
1:db3b209:     static void safeUnregisterService(ServiceRegistration reg) {
1:db3b209:         if (reg != null) {
1:db3b209:             try {
1:acafa58:                 reg.unregister();
1:db3b209:             } catch (IllegalStateException e) {
1:db3b209:                 //This can be safely ignored
1:acafa58:             }
1:db3b209:         }
1:db3b209:     }
1:db3b209: 
1:38d4a18:     @Override
1:38d4a18:     public void serviceFound()
1:38d4a18:     {
1:38d4a18:         t.open();
1:38d4a18:     }
1:38d4a18: 
1:38d4a18:     @Override
1:38d4a18:     public void serviceLost()
1:38d4a18:     {
1:38d4a18:         t.close();
1:38d4a18:     }
1:38d4a18: 
1:38d4a18:     @Override
1:38d4a18:     public void serviceReplaced()
1:38d4a18:     {
1:38d4a18:         t.close();
1:38d4a18:         t.open();
1:38d4a18:     }
1:38d4a18: 
1:db3b209:     static class JdbcNamespaceHandler {
1:db3b209: 
1:acafa58:         public static ServiceRegistration[] register(BundleContext context) throws Exception {
1:acafa58:             XBeanNamespaceHandler nsh20 = new XBeanNamespaceHandler(
1:db3b209:                     "http://aries.apache.org/xmlns/transaction-jdbc/2.0",
1:acafa58:                     "org.apache.aries.transaction.jdbc-2.0.xsd",
1:db3b209:                     context.getBundle(),
1:db3b209:                     "META-INF/services/org/apache/xbean/spring/http/aries.apache.org/xmlns/transaction-jdbc/2.0"
1:db3b209:             );
1:acafa58:             Hashtable<String, Object> props20 = new Hashtable<String, Object>();
1:acafa58:             props20.put("osgi.service.blueprint.namespace", "http://aries.apache.org/xmlns/transaction-jdbc/2.0");
1:acafa58:             ServiceRegistration reg20 = context.registerService(NamespaceHandler.class.getName(), nsh20, props20);
1:acafa58: 
1:acafa58:             XBeanNamespaceHandler nsh21 = new XBeanNamespaceHandler(
1:acafa58:                     "http://aries.apache.org/xmlns/transaction-jdbc/2.1",
1:acafa58:                     "org.apache.aries.transaction.jdbc.xsd",
1:acafa58:                     context.getBundle(),
1:acafa58:                     "META-INF/services/org/apache/xbean/spring/http/aries.apache.org/xmlns/transaction-jdbc/2.1"
1:acafa58:             );
1:acafa58:             Hashtable<String, Object> props21 = new Hashtable<String, Object>();
1:acafa58:             props21.put("osgi.service.blueprint.namespace", "http://aries.apache.org/xmlns/transaction-jdbc/2.1");
1:acafa58:             ServiceRegistration reg21 = context.registerService(NamespaceHandler.class.getName(), nsh21, props21);
1:acafa58: 
1:acafa58:             return new ServiceRegistration[] { reg20, reg21 };
1:db3b209:         }
1:db3b209: 
1:db3b209:     }
1:db3b209: 
3:aa20c34: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:8047ebe
/////////////////////////////////////////////////////////////////////////
1: 
1: @SuppressWarnings("rawtypes")
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:38d4a18
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.tracker.SingleServiceTracker;
/////////////////////////////////////////////////////////////////////////
1: 
1:                                   SingleServiceTracker.SingleServiceListener
1: {
1:     private ServiceTracker<CommonDataSource, ManagedDataSourceFactory> t;
1:     private SingleServiceTracker<AriesTransactionManager> tm;
/////////////////////////////////////////////////////////////////////////
1:         tm = new SingleServiceTracker<AriesTransactionManager>(ctx, AriesTransactionManager.class, this);
1:         tm.open();
1:         tm.close();
1:         t.close();
1:                 safeUnregisterService(reg);
/////////////////////////////////////////////////////////////////////////
1:             ManagedDataSourceFactory mdsf = new ManagedDataSourceFactory(ref, tm.getService());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void serviceFound()
1:     {
1:         t.open();
1:     }
1: 
1:     @Override
1:     public void serviceLost()
1:     {
1:         t.close();
1:     }
1: 
1:     @Override
1:     public void serviceReplaced()
1:     {
1:         t.close();
1:         t.open();
1:     }
1: 
commit:acafa58
/////////////////////////////////////////////////////////////////////////
1:     private ServiceRegistration[] nshReg;
/////////////////////////////////////////////////////////////////////////
1:             for (ServiceRegistration reg : nshReg) {
1:                 reg.unregister();
1:             }
/////////////////////////////////////////////////////////////////////////
1:         public static ServiceRegistration[] register(BundleContext context) throws Exception {
1:             XBeanNamespaceHandler nsh20 = new XBeanNamespaceHandler(
1:                     "org.apache.aries.transaction.jdbc-2.0.xsd",
1:             Hashtable<String, Object> props20 = new Hashtable<String, Object>();
1:             props20.put("osgi.service.blueprint.namespace", "http://aries.apache.org/xmlns/transaction-jdbc/2.0");
1:             ServiceRegistration reg20 = context.registerService(NamespaceHandler.class.getName(), nsh20, props20);
1: 
1:             XBeanNamespaceHandler nsh21 = new XBeanNamespaceHandler(
1:                     "http://aries.apache.org/xmlns/transaction-jdbc/2.1",
1:                     "org.apache.aries.transaction.jdbc.xsd",
1:                     context.getBundle(),
1:                     "META-INF/services/org/apache/xbean/spring/http/aries.apache.org/xmlns/transaction-jdbc/2.1"
1:             );
1:             Hashtable<String, Object> props21 = new Hashtable<String, Object>();
1:             props21.put("osgi.service.blueprint.namespace", "http://aries.apache.org/xmlns/transaction-jdbc/2.1");
1:             ServiceRegistration reg21 = context.registerService(NamespaceHandler.class.getName(), nsh21, props21);
1: 
1:             return new ServiceRegistration[] { reg20, reg21 };
commit:dac41bf
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Filter;
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.CommonDataSource;
1: public class Activator implements BundleActivator,
1:                                   ServiceTrackerCustomizer<CommonDataSource, ManagedDataSourceFactory>,
0:                                   ServiceListener {
/////////////////////////////////////////////////////////////////////////
1:         Filter filter;
1:         String flt = "(&(|(objectClass=javax.sql.XADataSource)(objectClass=javax.sql.DataSource))(!(aries.managed=true)))";
1:         try {
1:             filter = context.createFilter(flt);
1:         } catch (InvalidSyntaxException e) {
1:             throw new IllegalStateException(e);
1:         }
1:         t = new ServiceTracker<CommonDataSource, ManagedDataSourceFactory>(ctx, filter, this);
/////////////////////////////////////////////////////////////////////////
1:     public ManagedDataSourceFactory addingService(ServiceReference<CommonDataSource> ref) {
1:             LOGGER.info("Wrapping DataSource " + ref);
1:             mdsf.register();
1:             return mdsf;
1:             LOGGER.warn("Error wrapping DataSource " + ref, e);
1:     public void modifiedService(ServiceReference<CommonDataSource> ref, ManagedDataSourceFactory service) {
1:         try {
1:             service.unregister();
1:         } catch (Exception e) {
1:             LOGGER.warn("Error closing DataSource " + ref, e);
1:         try {
1:             service.register();
1:         } catch (Exception e) {
1:             LOGGER.warn("Error wrapping DataSource " + ref, e);
1:         }
1:     public void removedService(ServiceReference<CommonDataSource> ref, ManagedDataSourceFactory service) {
1:         try {
1:             service.unregister();
1:         } catch (Exception e) {
1:             LOGGER.warn("Error closing DataSource " + ref, e);
1:         }
commit:db3b209
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.aries.transaction.AriesTransactionManager;
1: import org.apache.xbean.blueprint.context.impl.XBeanNamespaceHandler;
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: import javax.transaction.TransactionManager;
1: import java.util.Hashtable;
1: 
0: public class Activator implements BundleActivator, ServiceTrackerCustomizer, ServiceListener {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class);
1: 
0:     private AriesTransactionManager tm;
0:     private ServiceTracker t;
0:     private ServiceReference ref;
1:     private BundleContext context;
0:     private ServiceRegistration nshReg;
1: 
1:     public void start(BundleContext ctx) {
1:         context = ctx;
1: 
1:         // Expose blueprint namespace handler if xbean is present
1:         try {
1:             nshReg = JdbcNamespaceHandler.register(ctx);
1:         } catch (NoClassDefFoundError e) {
1:             LOGGER.warn("Unable to register JDBC blueprint namespace handler (xbean-blueprint not available).");
1:         } catch (Exception e) {
1:             LOGGER.error("Unable to register JDBC blueprint namespace handler", e);
1:         }
1: 
0:         t = new ServiceTracker(ctx, javax.sql.XADataSource.class.getName(), this);
1: 
1:         try {
0:             ctx.addServiceListener(this, "(objectClass=" + AriesTransactionManager.class.getName() + ")");
0:         } catch (InvalidSyntaxException e) {
1:         }
0:         ref = ctx.getServiceReference(TransactionManager.class.getName());
0:         if (ref != null) {
0:             tm = (AriesTransactionManager) ctx.getService(ref);
1:         }
1: 
0:         if (tm != null) {
0:             t.open();
1:         }
1: 
1:     public void stop(BundleContext ctx) {
0:         // it is possible these are not cleaned by serviceChanged method when the
0:         // tm service is still active
0:         if (t != null) {
0:             t.close();
1:         }
0:         if (ref != null) {
0:             context.ungetService(ref);
1:         }
1:         if (nshReg != null) {
0:             nshReg.unregister();
1:         }
1: 
0:     public Object addingService(ServiceReference ref) {
1:         try {
0:             LOGGER.info("Wrapping XADataSource " + ref);
0:             ManagedDataSourceFactory mdsf = new ManagedDataSourceFactory(ref, tm);
0:             return mdsf.register();
1:         } catch (Exception e) {
0:             LOGGER.warn("Error wrapping XADataSource " + ref, e);
1:             return null;
1:         }
0:     public void modifiedService(ServiceReference ref, Object service) {
0:         ServiceRegistration reg = (ServiceRegistration) service;
0:         Hashtable<String, Object> map = new Hashtable<String, Object>();
0:         for (String key : ref.getPropertyKeys()) {
0:             map.put(key, ref.getProperty(key));
1:         }
0:         map.put("aries.xa.aware", "true");
0:         reg.setProperties(map);
0:     public void removedService(ServiceReference ref, Object service) {
0:         safeUnregisterService((ServiceRegistration) service);
0:     public void serviceChanged(ServiceEvent event) {
0:         if (event.getType() == ServiceEvent.REGISTERED && tm == null) {
0:             ref = event.getServiceReference();
0:             tm = (AriesTransactionManager) context.getService(ref);
0:             if (tm == null) ref = null;
0:             else t.open();
0:         } else if (event.getType() == ServiceEvent.UNREGISTERING && tm != null &&
0:                 ref.getProperty("service.id").equals(event.getServiceReference().getProperty("service.id"))) {
0:             t.close();
0:             context.ungetService(ref);
0:             ref = null;
0:             tm = null;
1:         }
1:     static void safeUnregisterService(ServiceRegistration reg) {
1:         if (reg != null) {
1:             try {
0:                 reg.unregister();
1:             } catch (IllegalStateException e) {
1:                 //This can be safely ignored
1:             }
1:         }
1: 
1:     static class JdbcNamespaceHandler {
1: 
0:         public static ServiceRegistration register(BundleContext context) throws Exception {
0:             XBeanNamespaceHandler nsh = new XBeanNamespaceHandler(
1:                     "http://aries.apache.org/xmlns/transaction-jdbc/2.0",
0:                     "org.apache.aries.transaction.jdbc.xsd",
1:                     context.getBundle(),
1:                     "META-INF/services/org/apache/xbean/spring/http/aries.apache.org/xmlns/transaction-jdbc/2.0"
1:             );
0:             Hashtable<String, Object> props = new Hashtable<String, Object>();
0:             props.put("osgi.service.blueprint.namespace", "http://aries.apache.org/xmlns/transaction-jdbc/2.0");
0:             return context.registerService(NamespaceHandler.class.getName(), nsh, props);
1:         }
1: 
1:     }
1: 
commit:aa20c34
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.transaction.jdbc.internal;
0: import java.util.Hashtable;
0: import javax.sql.DataSource;
0: import javax.sql.XADataSource;
0: import javax.transaction.TransactionManager;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     wrapper.setTransactionManager(tm);
/////////////////////////////////////////////////////////////////////////
0:     safeUnregisterService((ServiceRegistration)service);
/////////////////////////////////////////////////////////////////////////
1: 
0:   static void safeUnregisterService(ServiceRegistration reg)
0:   {
0:     if(reg != null) {
0:       try {
0:         reg.unregister();
0:       } catch (IllegalStateException e) {
0:         //This can be safely ignored
1:       }
1:     }
1:   }
commit:4824f0a
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:4538461
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.Constants;
/////////////////////////////////////////////////////////////////////////
1:     
0:     // make the ranking for our new better wrappered data source higher so
0:     // it is the default object looked up using osgi.service.jndi.name.
0:     Object rankingProp = map.get(Constants.SERVICE_RANKING);
1:     
0:     int ranking = 1000;
1:     
0:     if (rankingProp != null) ranking = ((Integer)rankingProp) + 1000;
1:     
0:     map.put(Constants.SERVICE_RANKING, ranking);
commit:e073d9e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.transaction.jdbc;
0: 
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
0: import org.osgi.framework.ServiceEvent;
0: import org.osgi.framework.ServiceListener;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.osgi.util.tracker.ServiceTrackerCustomizer;
0: import java.util.Hashtable;
0: import javax.sql.DataSource;
0: import javax.sql.XADataSource;
0: import javax.transaction.TransactionManager;
0: 
0: public class Activator implements BundleActivator, ServiceTrackerCustomizer, ServiceListener
0: {
0:   private TransactionManager tm;
0:   private ServiceTracker t;
0:   private ServiceReference ref;
0:   private BundleContext context;
0:   
0:   public void start(BundleContext ctx)
0:   {
0:     context = ctx;
0:     
0:     t = new ServiceTracker(ctx, javax.sql.XADataSource.class.getName(), this);
0:     
0:     try {
0:       ctx.addServiceListener(this, "(objectClass=javax.transaction.TransactionManager)");
0:     } catch (InvalidSyntaxException e) {
0:     }
0:     ref = ctx.getServiceReference(TransactionManager.class.getName());
0:     if (ref != null) {
0:       tm = (TransactionManager) ctx.getService(ref);
0:     }
0:     
0:     if (tm != null) {
0:       t.open();
0:     }
0:   }
0: 
0:   public void stop(BundleContext ctx)
0:   {
0:   }
0: 
0:   public Object addingService(ServiceReference ref)
0:   {
0:     BundleContext ctx = ref.getBundle().getBundleContext();
0: 
0:     Hashtable<String, Object> map = new Hashtable<String, Object>();
0:     for (String key : ref.getPropertyKeys()) {
0:       map.put(key, ref.getProperty(key));
0:     }
0:     map.put("aries.xa.aware", "true");
0: 
0:     XADatasourceEnlistingWrapper wrapper = new XADatasourceEnlistingWrapper();
0:     wrapper.setTxManager(tm);
0:     wrapper.setDataSource((XADataSource) ctx.getService(ref));
0: 
0:     ServiceRegistration reg = ctx.registerService(DataSource.class.getName(), wrapper, map); 
0: 
0:     return reg;
0:   }
0:  
0:   public void modifiedService(ServiceReference ref, Object service)
0:   {
0:     ServiceRegistration reg = (ServiceRegistration) service;
0:     
0:     Hashtable<String, Object> map = new Hashtable<String, Object>();
0:     for (String key : ref.getPropertyKeys()) {
0:       map.put(key, ref.getProperty(key));
0:     }
0:     map.put("aries.xa.aware", "true");
0: 
0:     reg.setProperties(map);
0:   }
0: 
0:   public void removedService(ServiceReference ref, Object service)
0:   {
0:     ((ServiceRegistration)service).unregister();
0:   }
0: 
0:   public void serviceChanged(ServiceEvent event)
0:   {
0:     if (event.getType() == ServiceEvent.REGISTERED && tm == null) {
0:       ref = event.getServiceReference();
0:       tm = (TransactionManager) context.getService(ref);
0:       
0:       if (tm == null) ref = null;
0:       else t.open();
0:     } else if (event.getType() == ServiceEvent.UNREGISTERING && tm != null &&
0:         ref.getProperty("service.id").equals(event.getServiceReference().getProperty("service.id"))) {
0:       t.close();
0:       context.ungetService(ref);
0:       ref = null;
0:       tm = null;
0:     }
0:   }
0: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:047a2ae
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.AriesFrameworkUtil;
/////////////////////////////////////////////////////////////////////////
0:     AriesFrameworkUtil.safeUnregisterService((ServiceRegistration)service);
author:Lin Sun
-------------------------------------------------------------------------------
commit:d4a88fc
/////////////////////////////////////////////////////////////////////////
0:       // it is possible these are not cleaned by serviceChanged method when the
0:       // tm service is still active
0:       if (t != null) {
0:           t.close();
0:       }
0:       if (ref != null) {
0:           context.ungetService(ref);
0:       }
============================================================================