1:a5517f3: /**
1:a5517f3:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:a5517f3:  *  contributor license agreements.  See the NOTICE file distributed with
1:a5517f3:  *  this work for additional information regarding copyright ownership.
1:a5517f3:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:a5517f3:  *  (the "License"); you may not use this file except in compliance with
1:a5517f3:  *  the License.  You may obtain a copy of the License at
1:a5517f3:  *
1:a5517f3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a5517f3:  *
1:a5517f3:  *  Unless required by applicable law or agreed to in writing, software
1:a5517f3:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:a5517f3:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a5517f3:  *  See the License for the specific language governing permissions and
1:a5517f3:  *  limitations under the License.
1:a5517f3:  */
1:4115fb2: package org.apache.aries.ejb.openejb.extender;
1:4115fb2: 
1:4115fb2: import java.util.Map;
1:4115fb2: import java.util.concurrent.atomic.AtomicReference;
1:4115fb2: 
1:4115fb2: import javax.persistence.EntityManager;
1:4115fb2: import javax.persistence.EntityManagerFactory;
1:4115fb2: 
1:4115fb2: import org.apache.aries.jpa.container.context.JTAPersistenceContextManager;
1:4115fb2: import org.apache.aries.util.tracker.SingleServiceTracker;
1:4115fb2: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
1:4115fb2: import org.apache.openejb.persistence.EntityManagerTxKey;
1:4115fb2: import org.apache.openejb.persistence.JtaEntityManagerRegistry;
1:4115fb2: import org.osgi.framework.BundleContext;
1:4115fb2: 
1:4115fb2: public class AriesPersistenceContextIntegration extends
1:4115fb2:     JtaEntityManagerRegistry {
1:4115fb2:   
1:4115fb2:   private static final AtomicReference<AriesPersistenceContextIntegration> INSTANCE =
1:4115fb2:     new AtomicReference<AriesPersistenceContextIntegration>();
1:4115fb2:   
1:4115fb2:   private final SingleServiceTracker<JTAPersistenceContextManager> ariesJTARegistry;
1:4115fb2:   
1:4115fb2:   private AriesPersistenceContextIntegration(BundleContext ctx) {
1:4115fb2:     super(OSGiTransactionManager.get());
1:4115fb2:     ariesJTARegistry = new SingleServiceTracker<JTAPersistenceContextManager>
1:4115fb2:         (ctx, JTAPersistenceContextManager.class, new DummySingleServiceListener());
1:4115fb2:     ariesJTARegistry.open();
1:4115fb2:   }
1:4115fb2:   
1:4115fb2:   public static void init(BundleContext ctx) {
1:4115fb2:     AriesPersistenceContextIntegration apci = new AriesPersistenceContextIntegration(ctx);
1:4115fb2:     if(!!!INSTANCE.compareAndSet(null, apci))
1:4115fb2:       apci.destroy();
1:4115fb2:   }
1:4115fb2:   
1:4115fb2:   public static AriesPersistenceContextIntegration get() {
1:4115fb2:     return INSTANCE.get();
1:4115fb2:   }
1:4115fb2:   
1:4115fb2:   public void destroy() {
1:4115fb2:     INSTANCE.set(null);
1:4115fb2:     ariesJTARegistry.close();
1:4115fb2:   }
1:4115fb2:   
1:4115fb2:   @Override
1:4115fb2:   public EntityManager getEntityManager(EntityManagerFactory emf, Map props,
1:4115fb2:       boolean extended, String unitName) throws IllegalStateException {
1:4115fb2: 
1:4115fb2:     if(!!!isTransactionActive())
1:4115fb2:       return super.getEntityManager(emf, props, extended, unitName);
1:4115fb2:     
1:4115fb2:     JTAPersistenceContextManager mgr = ariesJTARegistry.getService();
1:4115fb2:     
1:4115fb2:     if(mgr == null)
1:4115fb2:       throw new IllegalStateException("No JTAPersistenceContextManager service available");
1:4115fb2:     
1:4115fb2:     //Check if we, or OpenEJB, already have a context
1:4115fb2:     EntityManager ariesEM = mgr.getExistingPersistenceContext(emf);
1:4115fb2:     EntityManager openEjbEM = (EntityManager) OSGiTransactionManager.get().
1:4115fb2:                                   getResource(new EntityManagerTxKey(emf));
1:4115fb2:     
1:4115fb2:     if(ariesEM == null) {
1:4115fb2:       if(openEjbEM == null) {
1:4115fb2:         //If both are null then it's easier to let OpenEJB win and push the PC into Aries
1:4115fb2:         openEjbEM = super.getEntityManager(emf, props, extended, unitName);
1:4115fb2:       }
1:4115fb2:       mgr.manageExistingPersistenceContext(emf, openEjbEM);
1:4115fb2:       ariesEM = openEjbEM;
1:4115fb2:     } else {
1:4115fb2:       //We have an Aries EM, if OpenEJB doesn't then sort it out, if it does they should be the same
1:4115fb2:       if(openEjbEM == null){
1:4115fb2:         if(extended) {
1:4115fb2:           throw new IllegalStateException("We already have an active TX scope PersistenceContext, so we can't" +
1:4115fb2:             "create an extended one");
1:4115fb2:         } else {
1:4115fb2:           OSGiTransactionManager.get().putResource(new EntityManagerTxKey(emf), ariesEM);
1:4115fb2:           openEjbEM = ariesEM;
1:4115fb2:         }
1:4115fb2:       } else {
1:4115fb2:         //If both non null and not equal then something bad has happened
1:4115fb2:         if(openEjbEM != ariesEM) {
1:4115fb2:           throw new IllegalStateException("OpenEJB has been cheating. They have a different EntityManager to Aries");
1:4115fb2:         }
1:4115fb2:       }
1:4115fb2:     }
1:4115fb2:     
1:4115fb2:     //We could return either ariesEM or openEjbEM at this point
1:4115fb2:     return ariesEM;
1:4115fb2:   }
1:4115fb2: 
1:4115fb2:   private static final class DummySingleServiceListener implements SingleServiceListener {
1:4115fb2: 
1:4115fb2:     public void serviceFound() {}
1:4115fb2: 
1:4115fb2:     public void serviceLost() {}
1:4115fb2: 
1:4115fb2:     public void serviceReplaced() {}
1:4115fb2:   }
1:4115fb2: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:a5517f3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
commit:4115fb2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.ejb.openejb.extender;
1: 
1: import java.util.Map;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: 
1: import org.apache.aries.jpa.container.context.JTAPersistenceContextManager;
1: import org.apache.aries.util.tracker.SingleServiceTracker;
1: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
1: import org.apache.openejb.persistence.EntityManagerTxKey;
1: import org.apache.openejb.persistence.JtaEntityManagerRegistry;
1: import org.osgi.framework.BundleContext;
1: 
1: public class AriesPersistenceContextIntegration extends
1:     JtaEntityManagerRegistry {
1:   
1:   private static final AtomicReference<AriesPersistenceContextIntegration> INSTANCE =
1:     new AtomicReference<AriesPersistenceContextIntegration>();
1:   
1:   private final SingleServiceTracker<JTAPersistenceContextManager> ariesJTARegistry;
1:   
1:   private AriesPersistenceContextIntegration(BundleContext ctx) {
1:     super(OSGiTransactionManager.get());
1:     ariesJTARegistry = new SingleServiceTracker<JTAPersistenceContextManager>
1:         (ctx, JTAPersistenceContextManager.class, new DummySingleServiceListener());
1:     ariesJTARegistry.open();
1:   }
1:   
1:   public static void init(BundleContext ctx) {
1:     AriesPersistenceContextIntegration apci = new AriesPersistenceContextIntegration(ctx);
1:     if(!!!INSTANCE.compareAndSet(null, apci))
1:       apci.destroy();
1:   }
1:   
1:   public static AriesPersistenceContextIntegration get() {
1:     return INSTANCE.get();
1:   }
1:   
1:   public void destroy() {
1:     INSTANCE.set(null);
1:     ariesJTARegistry.close();
1:   }
1:   
1:   @Override
1:   public EntityManager getEntityManager(EntityManagerFactory emf, Map props,
1:       boolean extended, String unitName) throws IllegalStateException {
1: 
1:     if(!!!isTransactionActive())
1:       return super.getEntityManager(emf, props, extended, unitName);
1:     
1:     JTAPersistenceContextManager mgr = ariesJTARegistry.getService();
1:     
1:     if(mgr == null)
1:       throw new IllegalStateException("No JTAPersistenceContextManager service available");
1:     
1:     //Check if we, or OpenEJB, already have a context
1:     EntityManager ariesEM = mgr.getExistingPersistenceContext(emf);
1:     EntityManager openEjbEM = (EntityManager) OSGiTransactionManager.get().
1:                                   getResource(new EntityManagerTxKey(emf));
1:     
1:     if(ariesEM == null) {
1:       if(openEjbEM == null) {
1:         //If both are null then it's easier to let OpenEJB win and push the PC into Aries
1:         openEjbEM = super.getEntityManager(emf, props, extended, unitName);
1:       }
1:       mgr.manageExistingPersistenceContext(emf, openEjbEM);
1:       ariesEM = openEjbEM;
1:     } else {
1:       //We have an Aries EM, if OpenEJB doesn't then sort it out, if it does they should be the same
1:       if(openEjbEM == null){
1:         if(extended) {
1:           throw new IllegalStateException("We already have an active TX scope PersistenceContext, so we can't" +
1:             "create an extended one");
1:         } else {
1:           OSGiTransactionManager.get().putResource(new EntityManagerTxKey(emf), ariesEM);
1:           openEjbEM = ariesEM;
1:         }
1:       } else {
1:         //If both non null and not equal then something bad has happened
1:         if(openEjbEM != ariesEM) {
1:           throw new IllegalStateException("OpenEJB has been cheating. They have a different EntityManager to Aries");
1:         }
1:       }
1:     }
1:     
1:     //We could return either ariesEM or openEjbEM at this point
1:     return ariesEM;
1:   }
1: 
1:   private static final class DummySingleServiceListener implements SingleServiceListener {
1: 
1:     public void serviceFound() {}
1: 
1:     public void serviceLost() {}
1: 
1:     public void serviceReplaced() {}
1:   }
1: }
============================================================================