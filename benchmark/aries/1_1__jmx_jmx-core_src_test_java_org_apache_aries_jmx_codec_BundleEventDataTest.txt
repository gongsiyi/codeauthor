1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
1:fdf3952: 
1:fdf3952: import static org.junit.Assert.*;
1:fdf3952: import static org.mockito.Mockito.*;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.BUNDLE_EVENT_TYPE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.EVENT;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.LOCATION;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME;
1:fdf3952: 
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: 
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleEvent;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * 
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class BundleEventDataTest {
1:fdf3952: 
1:fdf3952:    
1:fdf3952:     @Test
1:fdf3952:     public void testToCompositeData() throws Exception {
1:fdf3952: 
1:fdf3952:         BundleEvent event = mock(BundleEvent.class);
1:fdf3952:         Bundle bundle = mock(Bundle.class);
1:fdf3952:         when(event.getBundle()).thenReturn(bundle);
1:fdf3952:         when(bundle.getSymbolicName()).thenReturn("test");
1:fdf3952:         when(bundle.getBundleId()).thenReturn(new Long(4));
1:fdf3952:         when(bundle.getLocation()).thenReturn("location");
1:fdf3952:         when(event.getType()).thenReturn(BundleEvent.INSTALLED);
1:fdf3952:         
1:fdf3952:         BundleEventData eventData = new BundleEventData(event);
1:fdf3952:         CompositeData eventCompositeData = eventData.toCompositeData();
1:fdf3952:         
1:fdf3952:         assertEquals(new Long(4), (Long) eventCompositeData.get(IDENTIFIER));
1:fdf3952:         assertEquals("test", (String) eventCompositeData.get(SYMBOLIC_NAME));
1:fdf3952:         assertEquals(new Integer(BundleEvent.INSTALLED),  (Integer) eventCompositeData.get(EVENT));
1:fdf3952:         assertEquals("location",  (String) eventCompositeData.get(LOCATION));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testFrom() throws Exception {
1:fdf3952: 
1:fdf3952:         Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(IDENTIFIER, new Long(7));
1:fdf3952:         items.put(SYMBOLIC_NAME, "t");
1:fdf3952:         items.put(LOCATION, "l");
1:fdf3952:         items.put(EVENT, BundleEvent.RESOLVED);
1:fdf3952: 
1:fdf3952:         CompositeData compositeData = new CompositeDataSupport(BUNDLE_EVENT_TYPE, items);
1:fdf3952:         BundleEventData event = BundleEventData.from(compositeData);
1:fdf3952:         
1:fdf3952:         assertEquals(7, event.getBundleId());
1:fdf3952:         assertEquals("t", event.getBundleSymbolicName());
1:fdf3952:         assertEquals("l", event.getLocation());
1:fdf3952:         assertEquals(BundleEvent.RESOLVED, event.getEventType());
1:fdf3952:             
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import static org.junit.Assert.*;
1: import static org.mockito.Mockito.*;
1: import static org.osgi.jmx.framework.BundleStateMBean.BUNDLE_EVENT_TYPE;
1: import static org.osgi.jmx.framework.BundleStateMBean.EVENT;
1: import static org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER;
1: import static org.osgi.jmx.framework.BundleStateMBean.LOCATION;
1: import static org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: 
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleEvent;
1: 
1: /**
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class BundleEventDataTest {
1: 
1:    
1:     @Test
1:     public void testToCompositeData() throws Exception {
1: 
1:         BundleEvent event = mock(BundleEvent.class);
1:         Bundle bundle = mock(Bundle.class);
1:         when(event.getBundle()).thenReturn(bundle);
1:         when(bundle.getSymbolicName()).thenReturn("test");
1:         when(bundle.getBundleId()).thenReturn(new Long(4));
1:         when(bundle.getLocation()).thenReturn("location");
1:         when(event.getType()).thenReturn(BundleEvent.INSTALLED);
1:         
1:         BundleEventData eventData = new BundleEventData(event);
1:         CompositeData eventCompositeData = eventData.toCompositeData();
1:         
1:         assertEquals(new Long(4), (Long) eventCompositeData.get(IDENTIFIER));
1:         assertEquals("test", (String) eventCompositeData.get(SYMBOLIC_NAME));
1:         assertEquals(new Integer(BundleEvent.INSTALLED),  (Integer) eventCompositeData.get(EVENT));
1:         assertEquals("location",  (String) eventCompositeData.get(LOCATION));
1:         
1:     }
1: 
1:     
1:     @Test
1:     public void testFrom() throws Exception {
1: 
1:         Map<String, Object> items = new HashMap<String, Object>();
1:         items.put(IDENTIFIER, new Long(7));
1:         items.put(SYMBOLIC_NAME, "t");
1:         items.put(LOCATION, "l");
1:         items.put(EVENT, BundleEvent.RESOLVED);
1: 
1:         CompositeData compositeData = new CompositeDataSupport(BUNDLE_EVENT_TYPE, items);
1:         BundleEventData event = BundleEventData.from(compositeData);
1:         
1:         assertEquals(7, event.getBundleId());
1:         assertEquals("t", event.getBundleSymbolicName());
1:         assertEquals("l", event.getLocation());
1:         assertEquals(BundleEvent.RESOLVED, event.getEventType());
1:             
1:     }
1: 
1: }
============================================================================