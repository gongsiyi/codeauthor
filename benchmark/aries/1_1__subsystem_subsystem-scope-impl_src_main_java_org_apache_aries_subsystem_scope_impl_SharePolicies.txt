1:6f4b079: package org.apache.aries.subsystem.scope.impl;
1:6f4b079: 
1:6f4b079: import java.util.ArrayList;
1:6f4b079: import java.util.Collections;
1:6f4b079: import java.util.HashMap;
1:6f4b079: import java.util.List;
1:6f4b079: import java.util.Map;
1:6f4b079: 
1:6f4b079: import org.apache.aries.subsystem.scope.SharePolicy;
1:6f4b079: 
1:6f4b079: public class SharePolicies {
1:6f4b079: 	private final Map<String, Map<String, List<SharePolicy>>> typeToSharePolicies = Collections.synchronizedMap(new HashMap<String, Map<String, List<SharePolicy>>>());
1:6f4b079: 	
1:6f4b079: 	public SharePolicies() {
1:6f4b079: 		init();
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public SharePolicies(SharePolicies sharePolicies) {
1:6f4b079: 		replaceAll(sharePolicies);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized void addSharePolicy(SharePolicy sharePolicy) {
1:6f4b079: 		String type = sharePolicy.getType();
1:6f4b079: 		Map<String, List<SharePolicy>> namespaceToSharePolicies = typeToSharePolicies.get(type);
1:6f4b079: 		if (namespaceToSharePolicies == null) {
1:6f4b079: 			namespaceToSharePolicies = Collections.synchronizedMap(new HashMap<String, List<SharePolicy>>());
1:6f4b079: 			typeToSharePolicies.put(type, namespaceToSharePolicies);
1:6f4b079: 		}
1:6f4b079: 		String namespace = sharePolicy.getNamespace();
1:6f4b079: 		List<SharePolicy> sharePolicies = namespaceToSharePolicies.get(namespace);
1:6f4b079: 		if (sharePolicies == null) {
1:6f4b079: 			sharePolicies = Collections.synchronizedList(new ArrayList<SharePolicy>());
1:6f4b079: 			namespaceToSharePolicies.put(namespace, sharePolicies);
1:6f4b079: 		}
1:6f4b079: 		sharePolicies.add(sharePolicy);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized Map<String, List<SharePolicy>> getSharePolicies(String type) {
1:6f4b079: 		if (!(SharePolicy.TYPE_EXPORT.equals(type) || SharePolicy.TYPE_IMPORT.equals(type))) {
1:6f4b079: 			throw new IllegalArgumentException(type);
1:6f4b079: 		}
1:6f4b079: 		return typeToSharePolicies.get(type);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized void removeSharePolicy(SharePolicy sharePolicy) {
1:6f4b079: 		String type = sharePolicy.getType();
1:6f4b079: 		Map<String, List<SharePolicy>> namespaceToSharePolicies = typeToSharePolicies.get(type);
1:6f4b079: 		if (namespaceToSharePolicies == null) {
1:6f4b079: 			return;
1:6f4b079: 		}
1:6f4b079: 		String namespace = sharePolicy.getNamespace();
1:6f4b079: 		List<SharePolicy> sharePolicies = namespaceToSharePolicies.get(namespace);
1:6f4b079: 		if (sharePolicies == null) {
1:6f4b079: 			return;
1:6f4b079: 		}
1:6f4b079: 		sharePolicies.remove(sharePolicy);
1:6f4b079: 		if (sharePolicies.isEmpty()) {
1:6f4b079: 			namespaceToSharePolicies.remove(namespace);
1:6f4b079: 		}
1:6f4b079: 		if (namespaceToSharePolicies.isEmpty()) {
1:6f4b079: 			typeToSharePolicies.remove(type);
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized void replaceAll(SharePolicies sharePolicies) {
1:6f4b079: 		init();
1:6f4b079: 		synchronized (sharePolicies) {
1:6f4b079: 			synchronized (sharePolicies.typeToSharePolicies) {
1:6f4b079: 				for (String type : sharePolicies.typeToSharePolicies.keySet()) {
1:6f4b079: 					Map<String, List<SharePolicy>> namespaceToSharePolicies = sharePolicies.typeToSharePolicies.get(type);
1:6f4b079: 					synchronized (namespaceToSharePolicies) {
1:6f4b079: 						for (String namespace : namespaceToSharePolicies.keySet()) {
1:6f4b079: 							List<SharePolicy> policies = namespaceToSharePolicies.get(namespace);
1:6f4b079: 							synchronized (policies) {
1:6f4b079: 								for (SharePolicy policy : policies) {
1:6f4b079: 									addSharePolicy(policy);
1:6f4b079: 								}
1:6f4b079: 							}
1:6f4b079: 						}
1:6f4b079: 					}
1:6f4b079: 				}
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private void init() {
1:6f4b079: 		typeToSharePolicies.put(SharePolicy.TYPE_EXPORT, Collections.synchronizedMap(new HashMap<String, List<SharePolicy>>()));
1:6f4b079: 		typeToSharePolicies.put(SharePolicy.TYPE_IMPORT, Collections.synchronizedMap(new HashMap<String, List<SharePolicy>>()));
1:6f4b079: 	}
1:6f4b079:  }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.scope.impl;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.scope.SharePolicy;
1: 
1: public class SharePolicies {
1: 	private final Map<String, Map<String, List<SharePolicy>>> typeToSharePolicies = Collections.synchronizedMap(new HashMap<String, Map<String, List<SharePolicy>>>());
1: 	
1: 	public SharePolicies() {
1: 		init();
1: 	}
1: 	
1: 	public SharePolicies(SharePolicies sharePolicies) {
1: 		replaceAll(sharePolicies);
1: 	}
1: 	
1: 	public synchronized void addSharePolicy(SharePolicy sharePolicy) {
1: 		String type = sharePolicy.getType();
1: 		Map<String, List<SharePolicy>> namespaceToSharePolicies = typeToSharePolicies.get(type);
1: 		if (namespaceToSharePolicies == null) {
1: 			namespaceToSharePolicies = Collections.synchronizedMap(new HashMap<String, List<SharePolicy>>());
1: 			typeToSharePolicies.put(type, namespaceToSharePolicies);
1: 		}
1: 		String namespace = sharePolicy.getNamespace();
1: 		List<SharePolicy> sharePolicies = namespaceToSharePolicies.get(namespace);
1: 		if (sharePolicies == null) {
1: 			sharePolicies = Collections.synchronizedList(new ArrayList<SharePolicy>());
1: 			namespaceToSharePolicies.put(namespace, sharePolicies);
1: 		}
1: 		sharePolicies.add(sharePolicy);
1: 	}
1: 	
1: 	public synchronized Map<String, List<SharePolicy>> getSharePolicies(String type) {
1: 		if (!(SharePolicy.TYPE_EXPORT.equals(type) || SharePolicy.TYPE_IMPORT.equals(type))) {
1: 			throw new IllegalArgumentException(type);
1: 		}
1: 		return typeToSharePolicies.get(type);
1: 	}
1: 	
1: 	public synchronized void removeSharePolicy(SharePolicy sharePolicy) {
1: 		String type = sharePolicy.getType();
1: 		Map<String, List<SharePolicy>> namespaceToSharePolicies = typeToSharePolicies.get(type);
1: 		if (namespaceToSharePolicies == null) {
1: 			return;
1: 		}
1: 		String namespace = sharePolicy.getNamespace();
1: 		List<SharePolicy> sharePolicies = namespaceToSharePolicies.get(namespace);
1: 		if (sharePolicies == null) {
1: 			return;
1: 		}
1: 		sharePolicies.remove(sharePolicy);
1: 		if (sharePolicies.isEmpty()) {
1: 			namespaceToSharePolicies.remove(namespace);
1: 		}
1: 		if (namespaceToSharePolicies.isEmpty()) {
1: 			typeToSharePolicies.remove(type);
1: 		}
1: 	}
1: 	
1: 	public synchronized void replaceAll(SharePolicies sharePolicies) {
1: 		init();
1: 		synchronized (sharePolicies) {
1: 			synchronized (sharePolicies.typeToSharePolicies) {
1: 				for (String type : sharePolicies.typeToSharePolicies.keySet()) {
1: 					Map<String, List<SharePolicy>> namespaceToSharePolicies = sharePolicies.typeToSharePolicies.get(type);
1: 					synchronized (namespaceToSharePolicies) {
1: 						for (String namespace : namespaceToSharePolicies.keySet()) {
1: 							List<SharePolicy> policies = namespaceToSharePolicies.get(namespace);
1: 							synchronized (policies) {
1: 								for (SharePolicy policy : policies) {
1: 									addSharePolicy(policy);
1: 								}
1: 							}
1: 						}
1: 					}
1: 				}
1: 			}
1: 		}
1: 	}
1: 	
1: 	private void init() {
1: 		typeToSharePolicies.put(SharePolicy.TYPE_EXPORT, Collections.synchronizedMap(new HashMap<String, List<SharePolicy>>()));
1: 		typeToSharePolicies.put(SharePolicy.TYPE_IMPORT, Collections.synchronizedMap(new HashMap<String, List<SharePolicy>>()));
1: 	}
1:  }
============================================================================