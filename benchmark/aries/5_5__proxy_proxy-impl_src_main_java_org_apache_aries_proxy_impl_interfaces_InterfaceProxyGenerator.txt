1:475ef33: /*
1:475ef33:  * Licensed to the Apache Software Foundation (ASF) under one
1:475ef33:  * or more contributor license agreements.  See the NOTICE file
1:475ef33:  * distributed with this work for additional information
1:475ef33:  * regarding copyright ownership.  The ASF licenses this file
1:475ef33:  * to you under the Apache License, Version 2.0 (the
1:475ef33:  * "License"); you may not use this file except in compliance
1:475ef33:  * with the License.  You may obtain a copy of the License at
1:475ef33:  *
1:475ef33:  *   http://www.apache.org/licenses/LICENSE-2.0
1:475ef33:  *
1:475ef33:  * Unless required by applicable law or agreed to in writing,
1:475ef33:  * software distributed under the License is distributed on an
1:475ef33:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:475ef33:  * KIND, either express or implied.  See the License for the
1:475ef33:  * specific language governing permissions and limitations
1:475ef33:  * under the License.
1:475ef33:  */
1:475ef33: package org.apache.aries.proxy.impl.interfaces;
1:475ef33: 
1:475ef33: import java.lang.ref.WeakReference;
1:475ef33: import java.lang.reflect.Constructor;
1:8f852b6: import java.lang.reflect.Modifier;
1:475ef33: import java.util.Arrays;
1:475ef33: import java.util.Collection;
1:d014a6c: import java.util.Comparator;
1:475ef33: import java.util.Map;
1:d014a6c: import java.util.SortedSet;
1:d014a6c: import java.util.TreeSet;
1:475ef33: import java.util.WeakHashMap;
1:475ef33: import java.util.concurrent.Callable;
1:475ef33: 
1:8f852b6: import org.apache.aries.proxy.FinalModifierException;
1:475ef33: import org.apache.aries.proxy.InvocationListener;
1:475ef33: import org.apache.aries.proxy.UnableToProxyException;
1:322f373: import org.objectweb.asm.ClassVisitor;
1:475ef33: import org.objectweb.asm.Opcodes;
1:475ef33: import org.osgi.framework.Bundle;
1:760dac8: import org.osgi.framework.wiring.BundleWiring;
1:475ef33: 
1:475ef33: /**
1:475ef33:  * This class is used to aggregate several interfaces into a real class which implements all of them
1:d014a6c:  * It also allows you specify a superclass that the class should implement - this will add delegating
1:d014a6c:  * method overrides for any abstract methods in the hierarchy, but not override any non-abstract methods.
1:d014a6c:  * To be safely used as a supertype the superclass should be a WovenProxy.
1:475ef33:  */
1:322f373: public final class InterfaceProxyGenerator extends ClassVisitor implements Opcodes {
1:9a9631e: 
1:9a9631e:   public InterfaceProxyGenerator()
1:9a9631e:   {
1:9a9631e:     super(Opcodes.ASM5);
1:9a9631e:     
1:9a9631e:   }
1:9a9631e: 
1:760dac8:   private static final Map<BundleWiring, WeakReference<ProxyClassLoader>> cache =
1:760dac8:             new WeakHashMap<BundleWiring, WeakReference<ProxyClassLoader>>(128);
1:475ef33:   
1:475ef33:   /**
1:475ef33:    * Generate a new proxy instance implementing the supplied interfaces and using the supplied
1:475ef33:    * dispatcher and listener
1:d014a6c:    * @param client the bundle that is trying to generate this proxy (can be null)
1:d014a6c:    * @param superclass The superclass to use (or null for Object)
1:d014a6c:    * @param ifaces The set of interfaces to implement (may be empty if superclass is non null)
1:475ef33:    * @param dispatcher
1:475ef33:    * @param listener
1:475ef33:    * @return
1:475ef33:    * @throws UnableToProxyException
1:475ef33:    */
1:760dac8:   public static Object getProxyInstance(Bundle client, Class<?> superclass,
1:d014a6c:       Collection<Class<?>> ifaces, Callable<Object> dispatcher, InvocationListener listener) throws UnableToProxyException{
1:475ef33:     
1:8f852b6:     if(superclass != null && (superclass.getModifiers() & Modifier.FINAL) != 0)
1:8f852b6:       throw new FinalModifierException(superclass);
1:8f852b6:     
1:475ef33:     ProxyClassLoader pcl = null;
1:475ef33:     
1:d014a6c:     SortedSet<Class<?>> interfaces = createSet(ifaces);
1:475ef33:     
1:475ef33:     synchronized (cache) {
1:760dac8:       BundleWiring wiring = client == null ? null : (BundleWiring)client.adapt(BundleWiring.class);
1:760dac8:       WeakReference<ProxyClassLoader> ref = cache.get(wiring);
1:475ef33:       
1:475ef33:       if(ref != null)
1:475ef33:         pcl = ref.get();
1:475ef33:       
1:d014a6c:       if (pcl != null && pcl.isInvalid(interfaces)) {
1:23a140b:           pcl = null;
1:760dac8:           cache.remove(wiring);
1:e6518d7:       }
1:475ef33:       
1:475ef33:       if(pcl == null) {
1:475ef33:         pcl = new ProxyClassLoader(client);
1:760dac8:         cache.put(wiring, new WeakReference<ProxyClassLoader>(pcl));
1:475ef33:       }
1:475ef33:     }
1:760dac8: 
1:d014a6c:     Class<?> c = pcl.createProxyClass(superclass, interfaces);
1:760dac8: 
1:475ef33:     try {
1:475ef33:       Constructor<?> con = c.getDeclaredConstructor(Callable.class, InvocationListener.class);
1:475ef33:       con.setAccessible(true);
1:475ef33:       return con.newInstance(dispatcher, listener);
1:475ef33:     } catch (Exception e) {
1:475ef33:       throw new UnableToProxyException(ifaces.iterator().next(), e);
1:475ef33:     }
1:475ef33:   }
1:475ef33: 
1:475ef33:   /**
1:475ef33:    * Get the set of interfaces we need to process. This will return a HashSet 
1:475ef33:    * that includes includes the supplied collection and any super-interfaces of 
1:475ef33:    * those classes 
2:475ef33:    * @param ifaces
1:475ef33:    * @return
1:475ef33:    */
1:d014a6c:   private static SortedSet<Class<?>> createSet(Collection<Class<?>> ifaces) {
1:d014a6c:     SortedSet<Class<?>> classes = new TreeSet<Class<?>>(new Comparator<Class<?>>() {
1:d014a6c:       public int compare(Class<?> object1, Class<?> object2) {
1:69db9d9:         if (object1.getName().equals(object2.getName())) {
1:69db9d9:           return 0;
1:69db9d9:         } else if (object1.isAssignableFrom(object2)) {
1:69db9d9:           // first class is parent of second, it occurs earlier in type hierarchy
1:69db9d9:           return -1;
1:69db9d9:         } else if (object2.isAssignableFrom(object1)) {
1:69db9d9:           // second class is subclass of first one, it occurs later in hierarchy
1:69db9d9:           return 1;
1:69db9d9:         }
1:69db9d9:         // types have separate inheritance trees, so it doesn't mater which one is first or second,
1:69db9d9:         // however we can't mark them as equal cause one of them will be removed
1:69db9d9:         return 1;
1:d014a6c:       }
1:d014a6c:     });
1:475ef33:     for(Class<?> c : ifaces) {
1:475ef33:       //If we already have a class contained then we have already covered its hierarchy
1:475ef33:       if(classes.add(c))
1:475ef33:         classes.addAll(createSet(Arrays.asList(c.getInterfaces())));
1:475ef33:     }
1:475ef33:     return classes;
1:475ef33:   }
1:475ef33: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:69db9d9
/////////////////////////////////////////////////////////////////////////
1:         if (object1.getName().equals(object2.getName())) {
1:           return 0;
1:         } else if (object1.isAssignableFrom(object2)) {
1:           // first class is parent of second, it occurs earlier in type hierarchy
1:           return -1;
1:         } else if (object2.isAssignableFrom(object1)) {
1:           // second class is subclass of first one, it occurs later in hierarchy
1:           return 1;
1:         }
1:         // types have separate inheritance trees, so it doesn't mater which one is first or second,
1:         // however we can't mark them as equal cause one of them will be removed
1:         return 1;
commit:760dac8
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleWiring;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<BundleWiring, WeakReference<ProxyClassLoader>> cache =
1:             new WeakHashMap<BundleWiring, WeakReference<ProxyClassLoader>>(128);
/////////////////////////////////////////////////////////////////////////
1:   public static Object getProxyInstance(Bundle client, Class<?> superclass,
/////////////////////////////////////////////////////////////////////////
1:       BundleWiring wiring = client == null ? null : (BundleWiring)client.adapt(BundleWiring.class);
1:       WeakReference<ProxyClassLoader> ref = cache.get(wiring);
1:           cache.remove(wiring);
1:         cache.put(wiring, new WeakReference<ProxyClassLoader>(pcl));
1: 
1: 
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9a9631e
/////////////////////////////////////////////////////////////////////////
1: 
1:   public InterfaceProxyGenerator()
1:   {
1:     super(Opcodes.ASM5);
1:     
1:   }
1: 
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8f852b6
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Modifier;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.FinalModifierException;
/////////////////////////////////////////////////////////////////////////
0:   public static final Object getProxyInstance(Bundle client, Class<?> superclass,
1:     if(superclass != null && (superclass.getModifiers() & Modifier.FINAL) != 0)
1:       throw new FinalModifierException(superclass);
1:     
commit:d014a6c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Comparator;
1: import java.util.SortedSet;
1: import java.util.TreeSet;
0: import org.apache.aries.proxy.weaving.WovenProxy;
1:  * It also allows you specify a superclass that the class should implement - this will add delegating
1:  * method overrides for any abstract methods in the hierarchy, but not override any non-abstract methods.
1:  * To be safely used as a supertype the superclass should be a WovenProxy.
/////////////////////////////////////////////////////////////////////////
1:    * @param client the bundle that is trying to generate this proxy (can be null)
1:    * @param superclass The superclass to use (or null for Object)
1:    * @param ifaces The set of interfaces to implement (may be empty if superclass is non null)
0:   public static final Object getProxyInstance(Bundle client, Class<? extends WovenProxy> superclass,
1:       Collection<Class<?>> ifaces, Callable<Object> dispatcher, InvocationListener listener) throws UnableToProxyException{
1:     SortedSet<Class<?>> interfaces = createSet(ifaces);
/////////////////////////////////////////////////////////////////////////
1:       if (pcl != null && pcl.isInvalid(interfaces)) {
/////////////////////////////////////////////////////////////////////////
1:     Class<?> c = pcl.createProxyClass(superclass, interfaces);
/////////////////////////////////////////////////////////////////////////
1:   private static SortedSet<Class<?>> createSet(Collection<Class<?>> ifaces) {
1:     SortedSet<Class<?>> classes = new TreeSet<Class<?>>(new Comparator<Class<?>>() {
1:       public int compare(Class<?> object1, Class<?> object2) {
0:         return object1.getName().compareTo(object2.getName());
1:       }
1:     });
commit:451a003
/////////////////////////////////////////////////////////////////////////
0: import java.util.LinkedHashSet;
/////////////////////////////////////////////////////////////////////////
0:     LinkedHashSet<Class<?>> classSet = createSet(ifaces);
/////////////////////////////////////////////////////////////////////////
0:   private static LinkedHashSet<Class<?>> createSet(Collection<Class<?>> ifaces) {
0:     LinkedHashSet<Class<?>> classes = new LinkedHashSet<Class<?>>();
commit:475ef33
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl.interfaces;
1: 
1: import java.lang.ref.WeakReference;
1: import java.lang.reflect.Constructor;
1: import java.util.Arrays;
1: import java.util.Collection;
0: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.WeakHashMap;
1: import java.util.concurrent.Callable;
1: 
1: import org.apache.aries.proxy.InvocationListener;
1: import org.apache.aries.proxy.UnableToProxyException;
1: import org.objectweb.asm.Opcodes;
0: import org.objectweb.asm.commons.EmptyVisitor;
1: import org.osgi.framework.Bundle;
1: 
1: /**
1:  * This class is used to aggregate several interfaces into a real class which implements all of them
1:  */
0: public final class InterfaceProxyGenerator extends EmptyVisitor implements Opcodes {
1: 
0:   private static final Map<Bundle, WeakReference<ProxyClassLoader>> cache = 
0:             new WeakHashMap<Bundle, WeakReference<ProxyClassLoader>>(128);
1:   
1:   /**
1:    * Generate a new proxy instance implementing the supplied interfaces and using the supplied
1:    * dispatcher and listener
1:    * @param ifaces
1:    * @param dispatcher
1:    * @param listener
1:    * @return
1:    * @throws UnableToProxyException
1:    */
0:   public static final Object getProxyInstance(Bundle client, Collection<Class<?>> ifaces, 
0:       Callable<Object> dispatcher, InvocationListener listener) throws UnableToProxyException{
1:     
1:     ProxyClassLoader pcl = null;
1:     
1:     synchronized (cache) {
0:       WeakReference<ProxyClassLoader> ref = cache.get(client);
1:       
1:       if(ref != null)
1:         pcl = ref.get();
1:       if(pcl == null) {
1:         pcl = new ProxyClassLoader(client);
0:         cache.put(client, new WeakReference<ProxyClassLoader>(pcl));
1:       }
1:     }
1:     
0:     Class<?> c = pcl.createProxyClass(createSet(ifaces));
1:         
1:     try {
1:       Constructor<?> con = c.getDeclaredConstructor(Callable.class, InvocationListener.class);
1:       con.setAccessible(true);
1:       return con.newInstance(dispatcher, listener);
1:     } catch (Exception e) {
1:       throw new UnableToProxyException(ifaces.iterator().next(), e);
1:     }
1:   }
1: 
1:   /**
1:    * Get the set of interfaces we need to process. This will return a HashSet 
1:    * that includes includes the supplied collection and any super-interfaces of 
1:    * those classes 
1:    * @param ifaces
1:    * @return
1:    */
0:   private static HashSet<Class<?>> createSet(Collection<Class<?>> ifaces) {
0:     HashSet<Class<?>> classes = new HashSet<Class<?>>();
1:     for(Class<?> c : ifaces) {
1:       //If we already have a class contained then we have already covered its hierarchy
1:       if(classes.add(c))
1:         classes.addAll(createSet(Arrays.asList(c.getInterfaces())));
1:     }
1:     return classes;
1:   }
1: }
author:Emily Jiang
-------------------------------------------------------------------------------
commit:322f373
/////////////////////////////////////////////////////////////////////////
1: import org.objectweb.asm.ClassVisitor;
/////////////////////////////////////////////////////////////////////////
1: public final class InterfaceProxyGenerator extends ClassVisitor implements Opcodes {
0:     super(Opcodes.ASM4);
commit:e6518d7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.proxy.impl.gen.Constants;
0: import org.apache.aries.proxy.impl.weaving.EmptyVisitor;
/////////////////////////////////////////////////////////////////////////
0:   public InterfaceProxyGenerator()
0:   {
0:     super(Constants.ASM4);
0:     
1:   }
0: 
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:23a140b
/////////////////////////////////////////////////////////////////////////
0:     HashSet<Class<?>> classSet = createSet(ifaces);
0:     
0:       
0:       if (pcl != null && pcl.isInvalid(classSet)) {
1:           pcl = null;
0:           cache.remove(client);
0:       }
0:       
0:     Class<?> c = pcl.createProxyClass(classSet);
============================================================================