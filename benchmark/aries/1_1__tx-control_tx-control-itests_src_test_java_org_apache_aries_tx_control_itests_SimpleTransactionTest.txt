2:08d0d7a: /*
1:08d0d7a:  * Licensed to the Apache Software Foundation (ASF) under one
1:08d0d7a:  * or more contributor license agreements.  See the NOTICE file
1:08d0d7a:  * distributed with this work for additional information
1:08d0d7a:  * regarding copyright ownership.  The ASF licenses this file
1:08d0d7a:  * to you under the Apache License, Version 2.0 (the
1:08d0d7a:  * "License"); you may not use this file except in compliance
1:08d0d7a:  * with the License.  You may obtain a copy of the License at
1:08d0d7a:  *
1:08d0d7a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:08d0d7a:  *
1:08d0d7a:  * Unless required by applicable law or agreed to in writing,
1:08d0d7a:  * software distributed under the License is distributed on an
1:08d0d7a:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:08d0d7a:  * KIND, either express or implied.  See the License for the
1:08d0d7a:  * specific language governing permissions and limitations
1:08d0d7a:  * under the License.
2:08d0d7a:  */
1:08d0d7a: package org.apache.aries.tx.control.itests;
16:08d0d7a: 
1:08d0d7a: import static org.junit.Assert.assertEquals;
1:08d0d7a: 
1:08d0d7a: import java.sql.ResultSet;
1:08d0d7a: import java.sql.Statement;
1:e6b0ac1: import java.util.Arrays;
1:08d0d7a: 
1:08d0d7a: import org.junit.Test;
1:08d0d7a: import org.junit.runner.RunWith;
1:08d0d7a: import org.ops4j.pax.exam.junit.PaxExam;
1:08d0d7a: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:08d0d7a: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:08d0d7a: 
1:08d0d7a: @RunWith(PaxExam.class)
1:08d0d7a: @ExamReactorStrategy(PerClass.class)
1:d7c375c: public class SimpleTransactionTest extends AbstractTransactionTest {
1:08d0d7a: 
1:08d0d7a: 	@Test
1:08d0d7a: 	public void testTx() {
2:08d0d7a: 		txControl.required(() -> connection.createStatement()
1:08d0d7a: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1:08d0d7a: 
1:08d0d7a: 		assertEquals("Hello World!", txControl.notSupported(() -> {
1:08d0d7a: 			ResultSet rs = connection.createStatement()
1:08d0d7a: 					.executeQuery("Select * from TEST_TABLE");
1:08d0d7a: 			rs.next();
1:08d0d7a: 			return rs.getString(1);
1:08d0d7a: 		}));
5:08d0d7a: 	}
1:08d0d7a: 
1:04788bf: 	@Test
1:08d0d7a: 	public void testRollback() {
2:08d0d7a: 		txControl.required(() -> {
1:08d0d7a: 			connection.createStatement().execute(
1:08d0d7a: 					"Insert into TEST_TABLE values ( 'Hello World!' )");
1:08d0d7a: 			txControl.setRollbackOnly();
2:08d0d7a: 			return null;
2:08d0d7a: 		});
1:e6b0ac1: 
1:08d0d7a: 		assertEquals(Integer.valueOf(0), txControl.notSupported(() -> {
1:08d0d7a: 			ResultSet rs = connection.createStatement()
1:08d0d7a: 					.executeQuery("Select count(*) from TEST_TABLE");
1:08d0d7a: 			rs.next();
1:08d0d7a: 			return rs.getInt(1);
1:08d0d7a: 		}));
1:08d0d7a: 	}
1:e6b0ac1: 
1:e6b0ac1: 	@Test
1:e6b0ac1: 	public void testNestedTx() {
1:e6b0ac1: 		txControl.required(() -> {
1:e6b0ac1: 			connection.createStatement()
1:e6b0ac1: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:04788bf: 			
1:e6b0ac1: 			txControl.requiresNew(() -> connection.createStatement()
1:e6b0ac1: 					.execute("Insert into TEST_TABLE values ( 'Hello Nested World!' )"));
1:e6b0ac1: 			
1:e6b0ac1: 			return null;
1:e6b0ac1: 		});
1:e6b0ac1: 		
1:e6b0ac1: 		String[] results = txControl.notSupported(() -> {
1:e6b0ac1: 				Statement s = connection.createStatement();
1:e6b0ac1: 				
1:e6b0ac1: 				ResultSet rs = s.executeQuery("Select count(*) from TEST_TABLE");
1:e6b0ac1: 				rs.next();
1:e6b0ac1: 				int count = rs.getInt(1);
1:e6b0ac1: 				
1:e6b0ac1: 				rs = s.executeQuery("Select message from TEST_TABLE ORDER BY message");
1:e6b0ac1: 				
1:e6b0ac1: 				String[] result = new String[2];
1:e6b0ac1: 				rs.next();
1:e6b0ac1: 				result[0] = "" + count + ": " + rs.getString(1);
1:e6b0ac1: 				rs.next();
1:e6b0ac1: 				result[1] = "" + count + ": " + rs.getString(1);
1:e6b0ac1: 				return result;
1:e6b0ac1: 			});
1:e6b0ac1: 		
1:e6b0ac1: 		System.out.println(Arrays.toString(results));
1:e6b0ac1: 		
1:e6b0ac1: 		assertEquals("2: Hello Nested World!", results[0]);
1:e6b0ac1: 		assertEquals("2: Hello World!", results[1]);
1:e6b0ac1: 	}
1:4dcd48b: 	
1:4dcd48b: 	@Test
1:e6b0ac1: 	public void testNestedTxOuterRollback() {
1:e6b0ac1: 		txControl.required(() -> {
1:e6b0ac1: 				// This will not end up in the database
1:e6b0ac1: 				connection.createStatement()
1:e6b0ac1: 					.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:4dcd48b: 				
1:e6b0ac1: 				// This should only apply to the current transaction level
1:e6b0ac1: 				txControl.setRollbackOnly();
1:e6b0ac1: 			
1:e6b0ac1: 				// This nested transaction will commit
1:e6b0ac1: 				txControl.requiresNew(() -> connection.createStatement()
1:e6b0ac1: 						.execute("Insert into TEST_TABLE values ( 'Hello Nested World!' )"));
1:e6b0ac1: 			
1:e6b0ac1: 				return null;
1:e6b0ac1: 			});
1:e6b0ac1: 		
1:e6b0ac1: 		assertEquals("1: Hello Nested World!", txControl.notSupported(() -> {
1:e6b0ac1: 				Statement s = connection.createStatement();
1:e6b0ac1: 				
1:e6b0ac1: 				ResultSet rs = s.executeQuery("Select count(*) from TEST_TABLE");
1:e6b0ac1: 				rs.next();
1:e6b0ac1: 				int count = rs.getInt(1);
1:e6b0ac1: 				
1:e6b0ac1: 				rs = s.executeQuery("Select message from TEST_TABLE ORDER BY message");
1:e6b0ac1: 				
1:e6b0ac1: 				rs.next();
1:e6b0ac1: 				return "" + count + ": " + rs.getString(1);
1:e6b0ac1: 			}));
1:e6b0ac1: 	}
1:d7c375c: 
1:e6b0ac1: 	@Test
1:e6b0ac1: 	public void testNestedTxInnerRollback() {
1:e6b0ac1: 		txControl.required(() -> {
1:e6b0ac1: 			// This will end up in the database
1:e6b0ac1: 			connection.createStatement()
1:e6b0ac1: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:e6b0ac1: 			
1:e6b0ac1: 						
1:e6b0ac1: 			// This nested transaction not commit
1:e6b0ac1: 			txControl.requiresNew(() -> {
1:e6b0ac1: 					connection.createStatement()
1:e6b0ac1: 						.execute("Insert into TEST_TABLE values ( 'Hello Nested World!' )");
1:e6b0ac1: 					txControl.setRollbackOnly();
1:e6b0ac1: 					return null;
1:04788bf: 				});
1:e6b0ac1: 			
1:e6b0ac1: 			return null;
1:e6b0ac1: 		});
1:e6b0ac1: 		
1:e6b0ac1: 		assertEquals("1: Hello World!", txControl.notSupported(() -> {
1:e6b0ac1: 				Statement s = connection.createStatement();
1:e6b0ac1: 				
1:e6b0ac1: 				ResultSet rs = s.executeQuery("Select count(*) from TEST_TABLE");
1:e6b0ac1: 				rs.next();
1:e6b0ac1: 				int count = rs.getInt(1);
1:e6b0ac1: 				
1:e6b0ac1: 				rs = s.executeQuery("Select message from TEST_TABLE ORDER BY message");
1:e6b0ac1: 				
1:e6b0ac1: 				rs.next();
1:e6b0ac1: 				return "" + count + ": " + rs.getString(1);
1:e6b0ac1: 			}));
1:e6b0ac1: 	}
1:e6b0ac1: 	
1:e6b0ac1: 	@Test
1:04788bf: 	public void testRequiredInheritsTx() {
1:04788bf: 		txControl.required(() -> {
1:04788bf: 			Object key = txControl.getCurrentContext().getTransactionKey();
1:04788bf: 			
1:04788bf: 			connection.createStatement()
1:04788bf: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:04788bf: 			
1:04788bf: 			return txControl.required(() -> {
1:04788bf: 					assertEquals(key , txControl.getCurrentContext().getTransactionKey());
1:04788bf: 					return connection.createStatement()
1:04788bf: 							.execute("Insert into TEST_TABLE values ( 'Hello Nested World!' )");
1:04788bf: 				});
1:04788bf: 		});
1:04788bf: 		
1:04788bf: 		String[] results = txControl.notSupported(() -> {
1:04788bf: 				Statement s = connection.createStatement();
1:04788bf: 				
1:04788bf: 				ResultSet rs = s.executeQuery("Select count(*) from TEST_TABLE");
1:04788bf: 				rs.next();
1:04788bf: 				int count = rs.getInt(1);
1:04788bf: 				
1:04788bf: 				rs = s.executeQuery("Select message from TEST_TABLE ORDER BY message");
1:04788bf: 				
1:04788bf: 				String[] result = new String[2];
1:04788bf: 				rs.next();
1:04788bf: 				result[0] = "" + count + ": " + rs.getString(1);
1:04788bf: 				rs.next();
1:04788bf: 				result[1] = "" + count + ": " + rs.getString(1);
1:04788bf: 				return result;
1:e6b0ac1: 			});
1:04788bf: 		
1:04788bf: 		System.out.println(Arrays.toString(results));
1:e6b0ac1: 		
1:04788bf: 		assertEquals("2: Hello Nested World!", results[0]);
1:04788bf: 		assertEquals("2: Hello World!", results[1]);
1:04788bf: 	}
1:e6b0ac1: 
1:08d0d7a: 	@Test
1:4dcd48b: 	public void testSuspendedTx() {
1:4dcd48b: 		txControl.required(() -> {        
1:4dcd48b: 			
1:4dcd48b: 			connection.createStatement()
1:4dcd48b: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:4dcd48b: 			
1:4dcd48b: 			assertEquals(Integer.valueOf(0), txControl.notSupported(() -> {
1:4dcd48b: 				ResultSet rs = connection.createStatement()
1:4dcd48b: 						.executeQuery("Select count(*) from TEST_TABLE");
1:4dcd48b: 				rs.next();
1:4dcd48b: 				return rs.getInt(1);
1:4dcd48b: 			}));                
1:4dcd48b: 			
1:4dcd48b: 			return null;            
1:08d0d7a: 			
1:4dcd48b: 		});   
1:4dcd48b: 	}
1:08d0d7a: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4dcd48b
/////////////////////////////////////////////////////////////////////////
1: 
1: 	@Test
1: 	public void testSuspendedTx() {
1: 		txControl.required(() -> {        
1: 			
1: 			connection.createStatement()
1: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 			
1: 			assertEquals(Integer.valueOf(0), txControl.notSupported(() -> {
1: 				ResultSet rs = connection.createStatement()
1: 						.executeQuery("Select count(*) from TEST_TABLE");
1: 				rs.next();
1: 				return rs.getInt(1);
1: 			}));                
1: 			
1: 			return null;            
1: 			
1: 		});   
1: 	}
commit:04788bf
/////////////////////////////////////////////////////////////////////////
1: 	@Test
1: 	public void testRequiredInheritsTx() {
1: 		txControl.required(() -> {
1: 			Object key = txControl.getCurrentContext().getTransactionKey();
1: 			
1: 			connection.createStatement()
1: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 			
1: 			return txControl.required(() -> {
1: 					assertEquals(key , txControl.getCurrentContext().getTransactionKey());
1: 					return connection.createStatement()
1: 							.execute("Insert into TEST_TABLE values ( 'Hello Nested World!' )");
1: 				});
1: 		});
1: 		
1: 		String[] results = txControl.notSupported(() -> {
1: 				Statement s = connection.createStatement();
1: 				
1: 				ResultSet rs = s.executeQuery("Select count(*) from TEST_TABLE");
1: 				rs.next();
1: 				int count = rs.getInt(1);
1: 				
1: 				rs = s.executeQuery("Select message from TEST_TABLE ORDER BY message");
1: 				
1: 				String[] result = new String[2];
1: 				rs.next();
1: 				result[0] = "" + count + ": " + rs.getString(1);
1: 				rs.next();
1: 				result[1] = "" + count + ": " + rs.getString(1);
1: 				return result;
1: 			});
1: 		
1: 		System.out.println(Arrays.toString(results));
1: 		
1: 		assertEquals("2: Hello Nested World!", results[0]);
1: 		assertEquals("2: Hello World!", results[1]);
1: 	}
commit:d7c375c
/////////////////////////////////////////////////////////////////////////
1: public class SimpleTransactionTest extends AbstractTransactionTest {
/////////////////////////////////////////////////////////////////////////
1: 	
commit:e6b0ac1
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: 	@Test
1: 	public void testNestedTx() {
1: 		txControl.required(() -> {
1: 			connection.createStatement()
1: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 			
1: 			txControl.requiresNew(() -> connection.createStatement()
1: 					.execute("Insert into TEST_TABLE values ( 'Hello Nested World!' )"));
1: 			
1: 			return null;
1: 		});
1: 		
1: 		String[] results = txControl.notSupported(() -> {
1: 				Statement s = connection.createStatement();
1: 				
1: 				ResultSet rs = s.executeQuery("Select count(*) from TEST_TABLE");
1: 				rs.next();
1: 				int count = rs.getInt(1);
1: 				
1: 				rs = s.executeQuery("Select message from TEST_TABLE ORDER BY message");
1: 				
1: 				String[] result = new String[2];
1: 				rs.next();
1: 				result[0] = "" + count + ": " + rs.getString(1);
1: 				rs.next();
1: 				result[1] = "" + count + ": " + rs.getString(1);
1: 				return result;
1: 			});
1: 		
1: 		System.out.println(Arrays.toString(results));
1: 		
1: 		assertEquals("2: Hello Nested World!", results[0]);
1: 		assertEquals("2: Hello World!", results[1]);
1: 	}
1: 	
1: 	@Test
1: 	public void testNestedTxOuterRollback() {
1: 		txControl.required(() -> {
1: 				// This will not end up in the database
1: 				connection.createStatement()
1: 					.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 				
1: 				// This should only apply to the current transaction level
1: 				txControl.setRollbackOnly();
1: 			
1: 				// This nested transaction will commit
1: 				txControl.requiresNew(() -> connection.createStatement()
1: 						.execute("Insert into TEST_TABLE values ( 'Hello Nested World!' )"));
1: 			
1: 				return null;
1: 			});
1: 		
1: 		assertEquals("1: Hello Nested World!", txControl.notSupported(() -> {
1: 				Statement s = connection.createStatement();
1: 				
1: 				ResultSet rs = s.executeQuery("Select count(*) from TEST_TABLE");
1: 				rs.next();
1: 				int count = rs.getInt(1);
1: 				
1: 				rs = s.executeQuery("Select message from TEST_TABLE ORDER BY message");
1: 				
1: 				rs.next();
1: 				return "" + count + ": " + rs.getString(1);
1: 			}));
1: 	}
1: 
1: 	@Test
1: 	public void testNestedTxInnerRollback() {
1: 		txControl.required(() -> {
1: 			// This will end up in the database
1: 			connection.createStatement()
1: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 			
1: 						
1: 			// This nested transaction not commit
1: 			txControl.requiresNew(() -> {
1: 					connection.createStatement()
1: 						.execute("Insert into TEST_TABLE values ( 'Hello Nested World!' )");
1: 					txControl.setRollbackOnly();
1: 					return null;
1: 				});
1: 			
1: 			return null;
1: 		});
1: 		
1: 		assertEquals("1: Hello World!", txControl.notSupported(() -> {
1: 				Statement s = connection.createStatement();
1: 				
1: 				ResultSet rs = s.executeQuery("Select count(*) from TEST_TABLE");
1: 				rs.next();
1: 				int count = rs.getInt(1);
1: 				
1: 				rs = s.executeQuery("Select message from TEST_TABLE ORDER BY message");
1: 				
1: 				rs.next();
1: 				return "" + count + ": " + rs.getString(1);
1: 			}));
1: 	}
1: 
commit:08d0d7a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.itests;
1: 
1: import static org.junit.Assert.assertEquals;
0: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
0: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.CoreOptions.when;
1: 
0: import java.sql.Connection;
1: import java.sql.ResultSet;
0: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.util.Properties;
1: 
0: import javax.inject.Inject;
1: 
0: import org.apache.aries.itest.AbstractIntegrationTest;
0: import org.junit.After;
0: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Configuration;
0: import org.ops4j.pax.exam.CoreOptions;
0: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
0: import org.osgi.service.jdbc.DataSourceFactory;
0: import org.osgi.service.transaction.control.TransactionControl;
0: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
0: public class SimpleTransactionTest extends AbstractIntegrationTest {
1: 
0: 	@Inject
0: 	TransactionControl txControl;
1: 
0: 	@Inject
0: 	JDBCConnectionProviderFactory resourceProviderFactory;
1: 	
0: 	@Inject
0: 	DataSourceFactory dsf;
1: 	
0: 	Connection connection;
1: 
0: 	@Before
0: 	public void setUp() {
0: 		Properties jdbc = new Properties();
1: 		
0: 		jdbc.setProperty(DataSourceFactory.JDBC_URL, "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
1: 		
0: 		connection = resourceProviderFactory.getProviderFor(dsf, jdbc, null).getResource(txControl);
1: 		
1: 		
1: 		txControl.required(() -> {
0: 				Statement s = connection.createStatement();
0: 				try {
0: 					s.execute("DROP TABLE TEST_TABLE");
0: 				} catch (SQLException sqle) {}
0: 					s.execute("CREATE TABLE TEST_TABLE ( message varchar(255) )");
1: 					return null;
1: 			});
1: 	}
1: 	
0: 	@After
0: 	public void tearDown() {
1: 
1: 		txControl.required(() -> connection.createStatement()
0: 				.execute("DROP TABLE TEST_TABLE"));
1: 
1: 	}
1: 	
1: 	@Test
1: 	public void testTx() {
1: 		txControl.required(() -> connection.createStatement()
1: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1: 
1: 		assertEquals("Hello World!", txControl.notSupported(() -> {
1: 			ResultSet rs = connection.createStatement()
1: 					.executeQuery("Select * from TEST_TABLE");
1: 			rs.next();
1: 			return rs.getString(1);
1: 		}));
1: 	}
1: 
1: 	@Test
1: 	public void testRollback() {
1: 		txControl.required(() -> {
1: 			connection.createStatement().execute(
1: 					"Insert into TEST_TABLE values ( 'Hello World!' )");
1: 			txControl.setRollbackOnly();
1: 			return null;
1: 		});
1: 
1: 		assertEquals(Integer.valueOf(0), txControl.notSupported(() -> {
1: 			ResultSet rs = connection.createStatement()
1: 					.executeQuery("Select count(*) from TEST_TABLE");
1: 			rs.next();
1: 			return rs.getInt(1);
1: 		}));
1: 	}
1: 
0: 	@Configuration
0: 	public Option[] configuration() {
0: 		String localRepo = System.getProperty("maven.repo.local");
0: 		if (localRepo == null) {
0: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
0: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
0: 				when(localRepo != null)
0: 						.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
0: 				mavenBundle("org.apache.felix", "org.apache.felix.coordinator").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-local").versionAsInProject(),
0: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jdbc-local").versionAsInProject(),
0: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
0: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 		/*
0: 		 * vmOption
0: 		 * ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0: 		 * waitForFrameworkStartup(),
1: 		 */
0: 		);
1: 	}
1: 
1: }
============================================================================