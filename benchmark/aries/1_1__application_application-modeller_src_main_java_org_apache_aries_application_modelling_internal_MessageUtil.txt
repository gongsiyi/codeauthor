1:4fec049: /*
1:4fec049:  * Licensed to the Apache Software Foundation (ASF) under one
1:4fec049:  * or more contributor license agreements.  See the NOTICE file
1:4fec049:  * distributed with this work for additional information
1:4fec049:  * regarding copyright ownership.  The ASF licenses this file
1:4fec049:  * to you under the Apache License, Version 2.0 (the
1:4fec049:  * "License"); you may not use this file except in compliance
1:4fec049:  * with the License.  You may obtain a copy of the License at
1:4fec049:  *
1:4fec049:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4fec049:  *
1:4fec049:  * Unless required by applicable law or agreed to in writing,
1:4fec049:  * software distributed under the License is distributed on an
1:4fec049:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4fec049:  * KIND, either express or implied.  See the License for the
1:4fec049:  * specific language governing permissions and limitations
1:4fec049:  * under the License.
1:4fec049:  */
1:4fec049: 
1:4fec049: package org.apache.aries.application.modelling.internal;
1:4fec049: 
1:4fec049: import java.text.MessageFormat;
1:4fec049: import java.util.ResourceBundle;
1:4fec049: 
1:4fec049: public class MessageUtil
1:4fec049: {
1:4fec049:   /** The resource bundle for blueprint messages */
1:4fec049:   private final static ResourceBundle messages = ResourceBundle.getBundle("org.apache.aries.application.modelling.messages.APPModellingMessages");
1:4fec049: 
1:4fec049:   /**
1:4fec049:    * Resolve a message from the bundle, including any necessary formatting.
1:4fec049:    * 
1:4fec049:    * @param key     the message key.
1:4fec049:    * @param inserts any required message inserts.
1:4fec049:    * @return        the message translated into the server local.
1:4fec049:    */
1:4fec049:   public static final String getMessage(String key, Object ... inserts)
1:4fec049:   {
1:4fec049:     String msg = messages.getString(key);
1:4fec049:     
1:4fec049:     if (inserts.length > 0)
1:4fec049:       msg = MessageFormat.format(msg, inserts);
1:4fec049:     
1:4fec049:     return msg;
1:4fec049:   }
1:4fec049: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:4fec049
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.application.modelling.internal;
1: 
1: import java.text.MessageFormat;
1: import java.util.ResourceBundle;
1: 
1: public class MessageUtil
1: {
1:   /** The resource bundle for blueprint messages */
1:   private final static ResourceBundle messages = ResourceBundle.getBundle("org.apache.aries.application.modelling.messages.APPModellingMessages");
1: 
1:   /**
1:    * Resolve a message from the bundle, including any necessary formatting.
1:    * 
1:    * @param key     the message key.
1:    * @param inserts any required message inserts.
1:    * @return        the message translated into the server local.
1:    */
1:   public static final String getMessage(String key, Object ... inserts)
1:   {
1:     String msg = messages.getString(key);
1:     
1:     if (inserts.length > 0)
1:       msg = MessageFormat.format(msg, inserts);
1:     
1:     return msg;
1:   }
1: }
============================================================================