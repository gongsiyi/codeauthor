1:09b7171: /**
1:09b7171:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:09b7171:  *  contributor license agreements.  See the NOTICE file distributed with
1:09b7171:  *  this work for additional information regarding copyright ownership.
1:09b7171:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:09b7171:  *  (the "License"); you may not use this file except in compliance with
1:09b7171:  *  the License.  You may obtain a copy of the License at
1:09b7171:  *
1:09b7171:  *     http://www.apache.org/licenses/LICENSE-2.0
1:09b7171:  *
1:09b7171:  *  Unless required by applicable law or agreed to in writing, software
1:09b7171:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:09b7171:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:09b7171:  *  See the License for the specific language governing permissions and
1:09b7171:  *  limitations under the License.
1:09b7171:  */
1:09b7171: package org.apache.aries.blueprint.spring.extender;
1:09b7171: 
1:09b7171: import java.util.Hashtable;
1:09b7171: 
1:09b7171: import org.apache.aries.blueprint.NamespaceHandler;
1:09b7171: import org.apache.aries.blueprint.services.BlueprintExtenderService;
1:09b7171: import org.osgi.framework.BundleActivator;
1:09b7171: import org.osgi.framework.BundleContext;
1:09b7171: import org.osgi.framework.ServiceReference;
1:09b7171: import org.osgi.framework.ServiceRegistration;
1:09b7171: import org.osgi.util.tracker.ServiceTracker;
1:09b7171: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1:09b7171: import org.slf4j.Logger;
1:09b7171: import org.slf4j.LoggerFactory;
1:09b7171: 
1:09b7171: public class Activator implements BundleActivator,
1:09b7171:         ServiceTrackerCustomizer<BlueprintExtenderService, SpringOsgiExtender> {
1:09b7171: 
1:09b7171:     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class);
1:09b7171: 
1:09b7171:     BundleContext bundleContext;
1:09b7171:     ServiceTracker<BlueprintExtenderService, SpringOsgiExtender> tracker;
1:09b7171:     ServiceRegistration<NamespaceHandler> osgiNamespaceRegistration;
1:09b7171:     ServiceRegistration<NamespaceHandler> compendiumNamespaceRegistration;
1:09b7171: 
1:09b7171:     @Override
1:09b7171:     public void start(BundleContext context) throws Exception {
1:09b7171:         this.bundleContext = context;
1:09b7171:         tracker = new ServiceTracker<BlueprintExtenderService, SpringOsgiExtender>(
1:09b7171:                 bundleContext, BlueprintExtenderService.class, this
1:09b7171:         );
1:09b7171:         tracker.open();
1:09b7171:         Hashtable<String, String> props = new Hashtable<String, String>();
1:09b7171:         props.put("osgi.service.blueprint.namespace", "http://www.springframework.org/schema/osgi");
1:09b7171:         osgiNamespaceRegistration = bundleContext.registerService(
1:09b7171:                 NamespaceHandler.class, new SpringOsgiNamespaceHandler(), props);
1:09b7171:         props = new Hashtable<String, String>();
1:09b7171:         props.put("osgi.service.blueprint.namespace", "http://www.springframework.org/schema/osgi-compendium");
1:09b7171:         compendiumNamespaceRegistration = bundleContext.registerService(
1:09b7171:                 NamespaceHandler.class, new SpringOsgiCompendiumNamespaceHandler(), props);
1:09b7171:     }
1:09b7171: 
1:09b7171:     @Override
1:09b7171:     public void stop(BundleContext context) throws Exception {
1:09b7171:         tracker.close();
1:09b7171:         osgiNamespaceRegistration.unregister();
1:09b7171:         compendiumNamespaceRegistration.unregister();
1:09b7171:     }
1:09b7171: 
1:09b7171:     @Override
1:09b7171:     public SpringOsgiExtender addingService(ServiceReference<BlueprintExtenderService> reference) {
1:09b7171:         BlueprintExtenderService blueprintExtenderService = bundleContext.getService(reference);
1:09b7171:         SpringOsgiExtender extender = new SpringOsgiExtender(blueprintExtenderService);
1:09b7171:         try {
1:09b7171:             extender.start(bundleContext);
1:09b7171:         } catch (Exception e) {
1:09b7171:             LOGGER.error("Error starting SpringOsgiExtender", e);
1:09b7171:         }
1:09b7171:         return extender;
1:09b7171:     }
1:09b7171: 
1:09b7171:     @Override
1:09b7171:     public void modifiedService(ServiceReference<BlueprintExtenderService> reference, SpringOsgiExtender service) {
1:09b7171:     }
1:09b7171: 
1:09b7171:     @Override
1:09b7171:     public void removedService(ServiceReference<BlueprintExtenderService> reference, SpringOsgiExtender service) {
1:09b7171:         try {
1:09b7171:             service.stop(bundleContext);
1:09b7171:         } catch (Exception e) {
1:09b7171:             LOGGER.error("Error stopping SpringOsgiExtender", e);
1:09b7171:         }
1:09b7171:         bundleContext.ungetService(reference);
1:09b7171:     }
1:09b7171: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:09b7171
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.spring.extender;
1: 
1: import java.util.Hashtable;
1: 
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.aries.blueprint.services.BlueprintExtenderService;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class Activator implements BundleActivator,
1:         ServiceTrackerCustomizer<BlueprintExtenderService, SpringOsgiExtender> {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class);
1: 
1:     BundleContext bundleContext;
1:     ServiceTracker<BlueprintExtenderService, SpringOsgiExtender> tracker;
1:     ServiceRegistration<NamespaceHandler> osgiNamespaceRegistration;
1:     ServiceRegistration<NamespaceHandler> compendiumNamespaceRegistration;
1: 
1:     @Override
1:     public void start(BundleContext context) throws Exception {
1:         this.bundleContext = context;
1:         tracker = new ServiceTracker<BlueprintExtenderService, SpringOsgiExtender>(
1:                 bundleContext, BlueprintExtenderService.class, this
1:         );
1:         tracker.open();
1:         Hashtable<String, String> props = new Hashtable<String, String>();
1:         props.put("osgi.service.blueprint.namespace", "http://www.springframework.org/schema/osgi");
1:         osgiNamespaceRegistration = bundleContext.registerService(
1:                 NamespaceHandler.class, new SpringOsgiNamespaceHandler(), props);
1:         props = new Hashtable<String, String>();
1:         props.put("osgi.service.blueprint.namespace", "http://www.springframework.org/schema/osgi-compendium");
1:         compendiumNamespaceRegistration = bundleContext.registerService(
1:                 NamespaceHandler.class, new SpringOsgiCompendiumNamespaceHandler(), props);
1:     }
1: 
1:     @Override
1:     public void stop(BundleContext context) throws Exception {
1:         tracker.close();
1:         osgiNamespaceRegistration.unregister();
1:         compendiumNamespaceRegistration.unregister();
1:     }
1: 
1:     @Override
1:     public SpringOsgiExtender addingService(ServiceReference<BlueprintExtenderService> reference) {
1:         BlueprintExtenderService blueprintExtenderService = bundleContext.getService(reference);
1:         SpringOsgiExtender extender = new SpringOsgiExtender(blueprintExtenderService);
1:         try {
1:             extender.start(bundleContext);
1:         } catch (Exception e) {
1:             LOGGER.error("Error starting SpringOsgiExtender", e);
1:         }
1:         return extender;
1:     }
1: 
1:     @Override
1:     public void modifiedService(ServiceReference<BlueprintExtenderService> reference, SpringOsgiExtender service) {
1:     }
1: 
1:     @Override
1:     public void removedService(ServiceReference<BlueprintExtenderService> reference, SpringOsgiExtender service) {
1:         try {
1:             service.stop(bundleContext);
1:         } catch (Exception e) {
1:             LOGGER.error("Error stopping SpringOsgiExtender", e);
1:         }
1:         bundleContext.ungetService(reference);
1:     }
1: }
============================================================================