1:c9a84c5: /**
1:c9a84c5:  * Licensed to the Apache Software Foundation (ASF) under one
1:c9a84c5:  * or more contributor license agreements.  See the NOTICE file
1:c9a84c5:  * distributed with this work for additional information
1:c9a84c5:  * regarding copyright ownership.  The ASF licenses this file
1:c9a84c5:  * to you under the Apache License, Version 2.0 (the
1:c9a84c5:  * "License"); you may not use this file except in compliance
1:c9a84c5:  * with the License.  You may obtain a copy of the License at
1:c9a84c5:  *
1:c9a84c5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c9a84c5:  *
1:c9a84c5:  * Unless required by applicable law or agreed to in writing,
1:c9a84c5:  * software distributed under the License is distributed on an
1:c9a84c5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c9a84c5:  * KIND, either express or implied.  See the License for the
1:c9a84c5:  * specific language governing permissions and limitations
1:c9a84c5:  * under the License.
1:c9a84c5:  */
1:c9a84c5: package org.apache.aries.spifly.statictool;
1:c9a84c5: 
1:c9a84c5: import java.io.File;
1:c9a84c5: import java.io.FileOutputStream;
1:c9a84c5: import java.net.URL;
1:c9a84c5: import java.util.Arrays;
1:c9a84c5: import java.util.jar.Attributes;
1:c9a84c5: import java.util.jar.JarFile;
1:c9a84c5: import java.util.jar.JarOutputStream;
1:c9a84c5: import java.util.jar.Manifest;
1:c9a84c5: import java.util.zip.ZipEntry;
1:c9a84c5: 
1:c9a84c5: import org.apache.aries.spifly.SpiFlyConstants;
1:c9a84c5: import org.apache.aries.spifly.Streams;
1:c9a84c5: import org.apache.aries.spifly.statictool.bundle.Test2Class;
1:c9a84c5: import org.apache.aries.spifly.statictool.bundle.Test3Class;
1:c9a84c5: import org.apache.aries.spifly.statictool.bundle.TestClass;
1:c9a84c5: import org.junit.Assert;
1:c9a84c5: import org.junit.Test;
1:c9a84c5: 
1:c9a84c5: public class RequirementTest {
1:c9a84c5:     @Test
1:c9a84c5:     public void testConsumerBundle() throws Exception {
1:c9a84c5:         String testClassFileName = TestClass.class.getName().replace('.', '/') + ".class";
1:c9a84c5:         URL testClassURL = getClass().getResource("/" + testClassFileName);
1:c9a84c5:         String test2ClassFileName = Test2Class.class.getName().replace('.', '/') + ".class";
1:c9a84c5:         URL test2ClassURL = getClass().getResource("/" + test2ClassFileName);
1:c9a84c5:         String test3ClassFileName = Test3Class.class.getName().replace('.', '/') + ".class";
1:c9a84c5:         URL test3ClassURL = getClass().getResource("/" + test3ClassFileName);
1:c9a84c5: 
1:c9a84c5:         File jarFile = new File(System.getProperty("java.io.tmpdir") + "/testjar_" + System.currentTimeMillis() + ".jar");
1:c9a84c5:         File expectedFile = null;
1:c9a84c5:         try {
1:c9a84c5:             // Create the jarfile to be used for testing
1:c9a84c5:             Manifest mf = new Manifest();
1:c9a84c5:             Attributes mainAttributes = mf.getMainAttributes();
1:c9a84c5:             mainAttributes.putValue("Manifest-Version", "1.0");
1:c9a84c5:             mainAttributes.putValue("Bundle-ManifestVersion", "2.0");
1:c9a84c5:             mainAttributes.putValue("Bundle-SymbolicName", "testbundle");
1:c9a84c5:             mainAttributes.putValue("Foo", "Bar Bar");
1:c9a84c5:             mainAttributes.putValue("Import-Package", "org.foo.bar");
1:c9a84c5:             mainAttributes.putValue(SpiFlyConstants.REQUIRE_CAPABILITY,
1:80f5c0a:                     "osgi.serviceloader; filter:=\"(osgi.serviceloader=org.apache.aries.spifly.mysvc.SPIProvider)\";cardinality:=multiple, " +
1:c9a84c5:                     "osgi.extender; filter:=\"(osgi.extender=osgi.serviceloader.processor)\"");
1:c9a84c5: 
1:c9a84c5:             JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile), mf);
1:c9a84c5:             jos.putNextEntry(new ZipEntry(testClassFileName));
1:c9a84c5:             Streams.pump(testClassURL.openStream(), jos);
1:c9a84c5:             jos.putNextEntry(new ZipEntry(test2ClassFileName));
1:c9a84c5:             Streams.pump(test2ClassURL.openStream(), jos);
1:c9a84c5:             jos.putNextEntry(new ZipEntry(test3ClassFileName));
1:c9a84c5:             Streams.pump(test3ClassURL.openStream(), jos);
1:c9a84c5:             jos.close();
1:c9a84c5: 
1:c9a84c5:             Main.main(jarFile.getCanonicalPath());
1:c9a84c5: 
1:c9a84c5:             expectedFile = new File(jarFile.getParent(), jarFile.getName().replaceAll("[.]jar", "_spifly.jar"));
1:c9a84c5:             Assert.assertTrue("A processed separate bundle should have been created", expectedFile.exists());
1:c9a84c5:             // Check manifest in generated bundle.
1:c9a84c5:             JarFile transformedJarFile = new JarFile(expectedFile);
1:80f5c0a:             Manifest actualMF = transformedJarFile.getManifest();
1:80f5c0a:             Assert.assertEquals("1.0", actualMF.getMainAttributes().getValue("Manifest-Version"));
1:80f5c0a:             Assert.assertEquals("2.0", actualMF.getMainAttributes().getValue("Bundle-ManifestVersion"));
1:80f5c0a:             Assert.assertEquals("testbundle", actualMF.getMainAttributes().getValue("Bundle-SymbolicName"));
1:80f5c0a:             Assert.assertEquals("Bar Bar", actualMF.getMainAttributes().getValue("Foo"));
1:8c32fc9:             Assert.assertEquals("osgi.serviceloader; filter:=\"(osgi.serviceloader=org.apache.aries.spifly.mysvc.SPIProvider)\";cardinality:=multiple",
1:80f5c0a:                     actualMF.getMainAttributes().getValue(SpiFlyConstants.REQUIRE_CAPABILITY));
1:80f5c0a:             Assert.assertNull("Should not generate this header when processing Require-Capability",
1:80f5c0a:                     actualMF.getMainAttributes().getValue(SpiFlyConstants.PROCESSED_SPI_CONSUMER_HEADER));
1:80f5c0a:             String importPackage = actualMF.getMainAttributes().getValue("Import-Package");
1:c9a84c5:             Assert.assertTrue(
1:c9a84c5:                 "org.foo.bar,org.apache.aries.spifly;version=\"[1.0.0,1.1.0)\"".equals(importPackage) ||
1:c9a84c5:                 "org.apache.aries.spifly;version=\"[1.0.0,1.1.0)\",org.foo.bar".equals(importPackage));
1:c9a84c5: 
1:c9a84c5:             JarFile initialJarFile = new JarFile(jarFile);
1:c9a84c5:             byte[] orgBytes = Streams.suck(initialJarFile.getInputStream(new ZipEntry(testClassFileName)));
1:c9a84c5:             byte[] nonTransBytes = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(testClassFileName)));
1:c9a84c5:             Assert.assertArrayEquals(orgBytes, nonTransBytes);
1:c9a84c5: 
1:c9a84c5:             byte[] orgBytes2 = Streams.suck(initialJarFile.getInputStream(new ZipEntry(test2ClassFileName)));
1:c9a84c5:             byte[] nonTransBytes2 = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(test2ClassFileName)));
1:c9a84c5:             Assert.assertArrayEquals(orgBytes2, nonTransBytes2);
1:c9a84c5: 
1:c9a84c5:             byte[] orgBytes3 = Streams.suck(initialJarFile.getInputStream(new ZipEntry(test3ClassFileName)));
1:c9a84c5:             byte[] transBytes3 = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(test3ClassFileName)));
1:c9a84c5:             Assert.assertFalse("The transformed class should be different", Arrays.equals(orgBytes3, transBytes3));
1:c9a84c5: 
1:c9a84c5:             initialJarFile.close();
1:c9a84c5:             transformedJarFile.close();
1:c9a84c5:         } finally {
1:c9a84c5:             jarFile.delete();
1:c9a84c5: 
1:c9a84c5:             if (expectedFile != null)
1:c9a84c5:                 expectedFile.delete();
1:c9a84c5:         }
1:c9a84c5:     }
1:c9a84c5: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:80f5c0a
/////////////////////////////////////////////////////////////////////////
1:                     "osgi.serviceloader; filter:=\"(osgi.serviceloader=org.apache.aries.spifly.mysvc.SPIProvider)\";cardinality:=multiple, " +
/////////////////////////////////////////////////////////////////////////
1:             Manifest actualMF = transformedJarFile.getManifest();
1:             Assert.assertEquals("1.0", actualMF.getMainAttributes().getValue("Manifest-Version"));
1:             Assert.assertEquals("2.0", actualMF.getMainAttributes().getValue("Bundle-ManifestVersion"));
1:             Assert.assertEquals("testbundle", actualMF.getMainAttributes().getValue("Bundle-SymbolicName"));
1:             Assert.assertEquals("Bar Bar", actualMF.getMainAttributes().getValue("Foo"));
1:                     actualMF.getMainAttributes().getValue(SpiFlyConstants.REQUIRE_CAPABILITY));
1:             Assert.assertNull("Should not generate this header when processing Require-Capability",
1:                     actualMF.getMainAttributes().getValue(SpiFlyConstants.PROCESSED_SPI_CONSUMER_HEADER));
1:             String importPackage = actualMF.getMainAttributes().getValue("Import-Package");
commit:8c32fc9
/////////////////////////////////////////////////////////////////////////
1:             Assert.assertEquals("osgi.serviceloader; filter:=\"(osgi.serviceloader=org.apache.aries.spifly.mysvc.SPIProvider)\";cardinality:=multiple",
commit:c9a84c5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly.statictool;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.net.URL;
1: import java.util.Arrays;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarFile;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: import java.util.zip.ZipEntry;
1: 
1: import org.apache.aries.spifly.SpiFlyConstants;
1: import org.apache.aries.spifly.Streams;
1: import org.apache.aries.spifly.statictool.bundle.Test2Class;
1: import org.apache.aries.spifly.statictool.bundle.Test3Class;
1: import org.apache.aries.spifly.statictool.bundle.TestClass;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class RequirementTest {
1:     @Test
1:     public void testConsumerBundle() throws Exception {
1:         String testClassFileName = TestClass.class.getName().replace('.', '/') + ".class";
1:         URL testClassURL = getClass().getResource("/" + testClassFileName);
1:         String test2ClassFileName = Test2Class.class.getName().replace('.', '/') + ".class";
1:         URL test2ClassURL = getClass().getResource("/" + test2ClassFileName);
1:         String test3ClassFileName = Test3Class.class.getName().replace('.', '/') + ".class";
1:         URL test3ClassURL = getClass().getResource("/" + test3ClassFileName);
1: 
1:         File jarFile = new File(System.getProperty("java.io.tmpdir") + "/testjar_" + System.currentTimeMillis() + ".jar");
1:         File expectedFile = null;
1:         try {
1:             // Create the jarfile to be used for testing
1:             Manifest mf = new Manifest();
1:             Attributes mainAttributes = mf.getMainAttributes();
1:             mainAttributes.putValue("Manifest-Version", "1.0");
1:             mainAttributes.putValue("Bundle-ManifestVersion", "2.0");
1:             mainAttributes.putValue("Bundle-SymbolicName", "testbundle");
1:             mainAttributes.putValue("Foo", "Bar Bar");
1:             mainAttributes.putValue("Import-Package", "org.foo.bar");
1:             mainAttributes.putValue(SpiFlyConstants.REQUIRE_CAPABILITY,
0:                     "osgi.serviceloader; filter:=\"(osgi.serviceloader=org.apache.aries.spifly.mysvc.SPIProvider)\";cardinality:=multiple," +
1:                     "osgi.extender; filter:=\"(osgi.extender=osgi.serviceloader.processor)\"");
1: 
1:             JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile), mf);
1:             jos.putNextEntry(new ZipEntry(testClassFileName));
1:             Streams.pump(testClassURL.openStream(), jos);
1:             jos.putNextEntry(new ZipEntry(test2ClassFileName));
1:             Streams.pump(test2ClassURL.openStream(), jos);
1:             jos.putNextEntry(new ZipEntry(test3ClassFileName));
1:             Streams.pump(test3ClassURL.openStream(), jos);
1:             jos.close();
1: 
1:             Main.main(jarFile.getCanonicalPath());
1: 
1:             expectedFile = new File(jarFile.getParent(), jarFile.getName().replaceAll("[.]jar", "_spifly.jar"));
1:             Assert.assertTrue("A processed separate bundle should have been created", expectedFile.exists());
1:             // Check manifest in generated bundle.
1:             JarFile transformedJarFile = new JarFile(expectedFile);
0:             Manifest expectedMF = transformedJarFile.getManifest();
0:             Assert.assertEquals("1.0", expectedMF.getMainAttributes().getValue("Manifest-Version"));
0:             Assert.assertEquals("2.0", expectedMF.getMainAttributes().getValue("Bundle-ManifestVersion"));
0:             Assert.assertEquals("testbundle", expectedMF.getMainAttributes().getValue("Bundle-SymbolicName"));
0:             Assert.assertEquals("Bar Bar", expectedMF.getMainAttributes().getValue("Foo"));
0:             Assert.assertEquals("osgi.serviceloader; filter:=\"(osgi.serviceloader=org.apache.aries.spifly.mysvc.SPIProvider)\";cardinality:=multiple,",
0:                     expectedMF.getMainAttributes().getValue(SpiFlyConstants.REQUIRE_CAPABILITY));
0:             String importPackage = expectedMF.getMainAttributes().getValue("Import-Package");
1:             Assert.assertTrue(
1:                 "org.foo.bar,org.apache.aries.spifly;version=\"[1.0.0,1.1.0)\"".equals(importPackage) ||
1:                 "org.apache.aries.spifly;version=\"[1.0.0,1.1.0)\",org.foo.bar".equals(importPackage));
1: 
1:             JarFile initialJarFile = new JarFile(jarFile);
1:             byte[] orgBytes = Streams.suck(initialJarFile.getInputStream(new ZipEntry(testClassFileName)));
1:             byte[] nonTransBytes = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(testClassFileName)));
1:             Assert.assertArrayEquals(orgBytes, nonTransBytes);
1: 
1:             byte[] orgBytes2 = Streams.suck(initialJarFile.getInputStream(new ZipEntry(test2ClassFileName)));
1:             byte[] nonTransBytes2 = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(test2ClassFileName)));
1:             Assert.assertArrayEquals(orgBytes2, nonTransBytes2);
1: 
1:             byte[] orgBytes3 = Streams.suck(initialJarFile.getInputStream(new ZipEntry(test3ClassFileName)));
1:             byte[] transBytes3 = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(test3ClassFileName)));
1:             Assert.assertFalse("The transformed class should be different", Arrays.equals(orgBytes3, transBytes3));
1: 
1:             initialJarFile.close();
1:             transformedJarFile.close();
1:         } finally {
1:             jarFile.delete();
1: 
1:             if (expectedFile != null)
1:                 expectedFile.delete();
1:         }
1:     }
1: }
============================================================================