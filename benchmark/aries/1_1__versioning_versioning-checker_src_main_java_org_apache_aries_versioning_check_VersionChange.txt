1:1ad65cc: /*
1:1ad65cc:  * Licensed to the Apache Software Foundation (ASF) under one
1:1ad65cc:  * or more contributor license agreements.  See the NOTICE file
1:1ad65cc:  * distributed with this work for additional information
1:1ad65cc:  * regarding copyright ownership.  The ASF licenses this file
1:1ad65cc:  * to you under the Apache License, Version 2.0 (the
1:1ad65cc:  * "License"); you may not use this file except in compliance
1:1ad65cc:  * with the License.  You may obtain a copy of the License at
1:1ad65cc:  *
1:1ad65cc:  *  http://www.apache.org/licenses/LICENSE-2.0
1:1ad65cc:  *
1:1ad65cc:  * Unless required by applicable law or agreed to in writing,
1:1ad65cc:  * software distributed under the License is distributed on an
1:1ad65cc:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1ad65cc:  * KIND, either express or implied.  See the License for the
1:1ad65cc:  * specific language governing permissions and limitations
1:1ad65cc:  * under the License.
2:1ad65cc:  */
1:1ad65cc: 
1:1ad65cc: 
1:1ad65cc: package org.apache.aries.versioning.check;
1:1ad65cc: 
1:1ad65cc: import org.osgi.framework.Version;
1:1ad65cc: 
1:1ad65cc: /**
1:cee3393:  * @version $Rev:$ $Date:$
1:cee3393:  */
1:c3c5192: public class VersionChange {
1:1ad65cc:     private BundleCompatibility.VERSION_CHANGE_TYPE changeType;
1:1ad65cc:     private Version oldVersion;
1:1ad65cc:     private Version newVersion;
1:1ad65cc:     private Version recommendedNewVersion;
1:1ad65cc:     private boolean correct;
1:1ad65cc: 
1:1ad65cc:     VersionChange(BundleCompatibility.VERSION_CHANGE_TYPE status, String oldVersionStr, String newVersionStr) {
1:1ad65cc:         oldVersion = Version.parseVersion(oldVersionStr);
1:1ad65cc:         newVersion = Version.parseVersion(newVersionStr);
1:1ad65cc:         if (status == BundleCompatibility.VERSION_CHANGE_TYPE.MAJOR_CHANGE) {
1:1ad65cc:             recommendedNewVersion = new Version(oldVersion.getMajor() + 1, 0, 0);
1:1ad65cc:         } else if (status == BundleCompatibility.VERSION_CHANGE_TYPE.MINOR_CHANGE) {
1:1ad65cc:             recommendedNewVersion = new Version(oldVersion.getMajor(), oldVersion.getMinor() + 1, 0);
1:1ad65cc:         } else {
1:1ad65cc:             recommendedNewVersion = oldVersion;
1:1ad65cc:         }
1:1ad65cc:         correct = BundleCompatibility.isVersionCorrect(status, oldVersionStr, newVersionStr);
1:1ad65cc:     }
1:1ad65cc: 
1:1ad65cc:     VersionChange(BundleCompatibility.VERSION_CHANGE_TYPE changeType, Version newVersion, Version oldVersion, Version recommendedNewVersion, boolean correct) {
1:1ad65cc:         this.changeType = changeType;
1:1ad65cc:         this.newVersion = newVersion;
1:1ad65cc:         this.oldVersion = oldVersion;
1:1ad65cc:         this.recommendedNewVersion = recommendedNewVersion;
1:1ad65cc:         this.correct = correct;
1:1ad65cc:     }
1:1ad65cc: 
1:1ad65cc:     public BundleCompatibility.VERSION_CHANGE_TYPE getChangeType() {
1:1ad65cc:         return changeType;
1:1ad65cc:     }
1:1ad65cc: 
1:1ad65cc:     public Version getNewVersion() {
1:1ad65cc:         return newVersion;
1:1ad65cc:     }
1:1ad65cc: 
1:1ad65cc:     public Version getOldVersion() {
1:1ad65cc:         return oldVersion;
1:1ad65cc:     }
1:1ad65cc: 
1:1ad65cc:     public Version getRecommendedNewVersion() {
1:1ad65cc:         return recommendedNewVersion;
1:1ad65cc:     }
1:1ad65cc: 
1:1ad65cc:     public boolean isCorrect() {
1:1ad65cc:         return correct;
1:1ad65cc:     }
1:cee3393: 
1:cee3393:     @Override
1:cee3393:     public String toString() {
1:cee3393:         return " oldVersion=\"" + getOldVersion()
1:cee3393:                 + "\" currentVersion=\"" + getNewVersion() +
1:cee3393:                 "\" recommendedVersion=\"" + getRecommendedNewVersion() + "\" correct=\"" + isCorrect();
1:cee3393:     }
1:1ad65cc: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:c3c5192
/////////////////////////////////////////////////////////////////////////
1: public class VersionChange {
commit:cee3393
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev:$ $Date:$
1:  */
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString() {
1:         return " oldVersion=\"" + getOldVersion()
1:                 + "\" currentVersion=\"" + getNewVersion() +
1:                 "\" recommendedVersion=\"" + getRecommendedNewVersion() + "\" correct=\"" + isCorrect();
1:     }
commit:1ad65cc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: 
1: package org.apache.aries.versioning.check;
1: 
1: import org.osgi.framework.Version;
1: 
1: /**
0: * @version $Rev:$ $Date:$
1: */
0: class VersionChange {
1:     private BundleCompatibility.VERSION_CHANGE_TYPE changeType;
1:     private Version oldVersion;
1:     private Version newVersion;
1:     private Version recommendedNewVersion;
1:     private boolean correct;
1: 
1:     VersionChange(BundleCompatibility.VERSION_CHANGE_TYPE status, String oldVersionStr, String newVersionStr) {
1:         oldVersion = Version.parseVersion(oldVersionStr);
1:         newVersion = Version.parseVersion(newVersionStr);
1:         if (status == BundleCompatibility.VERSION_CHANGE_TYPE.MAJOR_CHANGE) {
1:             recommendedNewVersion = new Version(oldVersion.getMajor() + 1, 0, 0);
1:         } else if (status == BundleCompatibility.VERSION_CHANGE_TYPE.MINOR_CHANGE) {
1:             recommendedNewVersion = new Version(oldVersion.getMajor(), oldVersion.getMinor() + 1, 0);
1:         } else {
1:             recommendedNewVersion = oldVersion;
1:         }
1:         correct = BundleCompatibility.isVersionCorrect(status, oldVersionStr, newVersionStr);
1:     }
1: 
1:     VersionChange(BundleCompatibility.VERSION_CHANGE_TYPE changeType, Version newVersion, Version oldVersion, Version recommendedNewVersion, boolean correct) {
1:         this.changeType = changeType;
1:         this.newVersion = newVersion;
1:         this.oldVersion = oldVersion;
1:         this.recommendedNewVersion = recommendedNewVersion;
1:         this.correct = correct;
1:     }
1: 
1:     public BundleCompatibility.VERSION_CHANGE_TYPE getChangeType() {
1:         return changeType;
1:     }
1: 
1:     public Version getNewVersion() {
1:         return newVersion;
1:     }
1: 
1:     public Version getOldVersion() {
1:         return oldVersion;
1:     }
1: 
1:     public Version getRecommendedNewVersion() {
1:         return recommendedNewVersion;
1:     }
1: 
1:     public boolean isCorrect() {
1:         return correct;
1:     }
1: }
============================================================================