1:96d4e06: /*
1:96d4e06:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d4e06:  * or more contributor license agreements.  See the NOTICE file
1:96d4e06:  * distributed with this work for additional information
1:96d4e06:  * regarding copyright ownership.  The ASF licenses this file
1:96d4e06:  * to you under the Apache License, Version 2.0 (the
1:96d4e06:  * "License"); you may not use this file except in compliance
1:96d4e06:  * with the License.  You may obtain a copy of the License at
1:96d4e06:  *
1:96d4e06:  *   http://www.apache.org/licenses/LICENSE-2.0
1:96d4e06:  *
1:96d4e06:  * Unless required by applicable law or agreed to in writing,
1:96d4e06:  * software distributed under the License is distributed on an
1:96d4e06:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:96d4e06:  * KIND, either express or implied.  See the License for the
1:96d4e06:  * specific language governing permissions and limitations
1:96d4e06:  * under the License.
1:96d4e06:  */
1:96d4e06: package org.apache.aries.proxy.impl.weaving;
1:475ef33: 
1:475ef33: import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
1:8f852b6: import org.apache.aries.proxy.impl.common.WovenProxyConcreteMethodAdapter;
1:96d4e06: import org.objectweb.asm.ClassVisitor;
1:0ac1890: import org.objectweb.asm.FieldVisitor;
1:96d4e06: import org.objectweb.asm.MethodVisitor;
1:96d4e06: import org.objectweb.asm.Type;
1:96d4e06: import org.objectweb.asm.commons.Method;
1:475ef33: 
1:96d4e06: /**
1:96d4e06:  * Used to weave classes processed by the {@link ProxyWeavingHook}
1:96d4e06:  */
1:0ac1890: final class WovenProxyAdapter extends AbstractWovenProxyAdapter {
1:0ac1890: 
1:0ac1890:   private boolean sVUIDGenerated = false;
4:96d4e06: 
1:96d4e06:   public WovenProxyAdapter(ClassVisitor writer, String className,
1:96d4e06:       ClassLoader loader) {
1:96d4e06:     super(writer, className, loader);
1:475ef33:   }
1:0ac1890: 
1:96d4e06:   /**
1:8f852b6:    * Get the weaving visitor used to weave instance methods, or just copy abstract ones
1:96d4e06:    */
1:96d4e06:   protected final MethodVisitor getWeavingMethodVisitor(int access, String name,
1:96d4e06:       String desc, String signature, String[] exceptions, Method currentMethod,
1:8f852b6:       String methodStaticFieldName, Type currentMethodDeclaringType,
1:8f852b6:       boolean currentMethodDeclaringTypeIsInterface) {
1:96d4e06:     MethodVisitor methodVisitorToReturn;
1:8f852b6:     if((access & ACC_ABSTRACT) == 0) {
1:8f852b6:       methodVisitorToReturn = new WovenProxyConcreteMethodAdapter(cv.visitMethod(
1:8f852b6:           access, name, desc, signature, exceptions), access, name, desc,
1:8f852b6:           exceptions, methodStaticFieldName, currentMethod, typeBeingWoven,
1:051eadf:           currentMethodDeclaringType, currentMethodDeclaringTypeIsInterface);
1:8f852b6:     } else {
1:8f852b6:       methodVisitorToReturn = cv.visitMethod(access, name, desc, signature, exceptions);
1:8f852b6:     }
1:96d4e06:     return methodVisitorToReturn;
1:475ef33:   }
1:8f852b6: 
1:475ef33: 
1:0ac1890:   @Override
1:0ac1890:   public FieldVisitor visitField(int access, String name, String arg2,
1:0ac1890:       String arg3, Object arg4) {
1:f43b433:     
1:0ac1890:     //If this sVUID is generated then make it synthetic
1:f43b433:     if(sVUIDGenerated && "serialVersionUID".equals(name)) {
1:f43b433:       
1:f43b433:       //If we aren't a serializable class then don't add a generated sVUID
1:f43b433:       if(!!!isSerializable) {
1:f43b433:         return null;
1:f43b433:       }
1:f43b433:       
1:0ac1890:       access |= ACC_SYNTHETIC;
1:f43b433:     }
1:0ac1890:     return super.visitField(access, name, arg2, arg3, arg4);
1:0ac1890:   }
1:0ac1890: 
1:0ac1890:   public void setSVUIDGenerated(boolean b) {
1:0ac1890:     sVUIDGenerated  = b;
1:0ac1890:   }
1:475ef33:   
1:96d4e06:   
1:475ef33: }
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:051eadf
/////////////////////////////////////////////////////////////////////////
1:           currentMethodDeclaringType, currentMethodDeclaringTypeIsInterface);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8f852b6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.impl.common.WovenProxyConcreteMethodAdapter;
/////////////////////////////////////////////////////////////////////////
1:    * Get the weaving visitor used to weave instance methods, or just copy abstract ones
1:       String methodStaticFieldName, Type currentMethodDeclaringType,
1:       boolean currentMethodDeclaringTypeIsInterface) {
1:     if((access & ACC_ABSTRACT) == 0) {
1:       methodVisitorToReturn = new WovenProxyConcreteMethodAdapter(cv.visitMethod(
1:           access, name, desc, signature, exceptions), access, name, desc,
1:           exceptions, methodStaticFieldName, currentMethod, typeBeingWoven,
0:           currentMethodDeclaringType);
1:     } else {
1:       methodVisitorToReturn = cv.visitMethod(access, name, desc, signature, exceptions);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:f43b433
/////////////////////////////////////////////////////////////////////////
1:     
1:     if(sVUIDGenerated && "serialVersionUID".equals(name)) {
1:       
1:       //If we aren't a serializable class then don't add a generated sVUID
1:       if(!!!isSerializable) {
1:         return null;
1:       }
1:       
1:     }
commit:0ac1890
/////////////////////////////////////////////////////////////////////////
1: import org.objectweb.asm.FieldVisitor;
/////////////////////////////////////////////////////////////////////////
1: final class WovenProxyAdapter extends AbstractWovenProxyAdapter {
1: 
1:   private boolean sVUIDGenerated = false;
/////////////////////////////////////////////////////////////////////////
1:   public FieldVisitor visitField(int access, String name, String arg2,
1:       String arg3, Object arg4) {
1:     //If this sVUID is generated then make it synthetic
0:     if(sVUIDGenerated && "serialVersionUID".equals(name)) 
1:       access |= ACC_SYNTHETIC;
1:     return super.visitField(access, name, arg2, arg3, arg4);
1:   }
1: 
1:   @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:   public void setSVUIDGenerated(boolean b) {
1:     sVUIDGenerated  = b;
1:   }
commit:475ef33
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: 
0: import org.apache.aries.proxy.impl.NLS;
1: import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
0: import org.objectweb.asm.ClassReader;
/////////////////////////////////////////////////////////////////////////
1: 
0:   @Override
0:   public void visitEnd() {
0:     //first we need to override all the methods that were on non-object parents
0:     for(Class<?> c : nonObjectSupers) {
0:       try {
0:         readClass(c, new MethodCopyingClassAdapter(cv, 
0:             c, typeBeingWoven, getKnownMethods(), transformedMethods));
0:       } catch (IOException e) {
0:         // This should never happen! <= famous last words (not)
0:         throw new RuntimeException(NLS.MESSAGES.getMessage("unexpected.error.processing.class", c.getName(), typeBeingWoven.getClassName()), e);
1:       }
1:     }
0:     //Now run the normal visitEnd
0:     super.visitEnd();
1:   }
1:   
1:   
commit:2d7219c
/////////////////////////////////////////////////////////////////////////
0:         exceptions, methodStaticFieldName, currentMethod, typeBeingWoven);
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl.weaving;
1: 
1: import org.objectweb.asm.ClassVisitor;
1: import org.objectweb.asm.MethodVisitor;
1: import org.objectweb.asm.Type;
1: import org.objectweb.asm.commons.Method;
1: 
1: /**
1:  * Used to weave classes processed by the {@link ProxyWeavingHook}
1:  */
0: public final class WovenProxyAdapter extends AbstractWovenProxyAdapter {
1: 
1:   public WovenProxyAdapter(ClassVisitor writer, String className,
1:       ClassLoader loader) {
1:     super(writer, className, loader);
0:   }
1: 
1:   /**
0:    * Get the weaving visitor used to weave instance methods
1:    */
1:   protected final MethodVisitor getWeavingMethodVisitor(int access, String name,
1:       String desc, String signature, String[] exceptions, Method currentMethod,
0:       String methodStaticFieldName) {
1:     MethodVisitor methodVisitorToReturn;
0:     methodVisitorToReturn = new WovenProxyMethodAdapter(cv.visitMethod(
0:         access, name, desc, signature, exceptions), access, name, desc,
0:         methodStaticFieldName, currentMethod, typeBeingWoven);
1:     return methodVisitorToReturn;
0:   }
1:   
0:   @Override
0:   protected final Type getDeclaringTypeForCurrentMethod() {
0:     return typeBeingWoven;
0:   }
0: }
============================================================================