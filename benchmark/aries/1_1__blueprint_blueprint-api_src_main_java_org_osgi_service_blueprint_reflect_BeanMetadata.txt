1:f13c6ac: /*
1:f13c6ac:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:f13c6ac:  *
1:f13c6ac:  * Licensed under the Apache License, Version 2.0 (the "License");
1:f13c6ac:  * you may not use this file except in compliance with the License.
1:f13c6ac:  * You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  * See the License for the specific language governing permissions and
1:f13c6ac:  * limitations under the License.
1:f13c6ac:  */
1:f13c6ac: package org.osgi.service.blueprint.reflect;
1:f13c6ac: 
1:f13c6ac: import java.util.List;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Metadata for a Bean component.
1:f13c6ac:  * 
1:f13c6ac:  * <p>
1:f13c6ac:  * This is specified by the <code>bean</code> element.
1:f13c6ac:  * 
1:f13c6ac:  * @ThreadSafe
1:f13c6ac:  * @version $Revision$
1:f13c6ac:  */
1:f13c6ac: public interface BeanMetadata extends Target, ComponentMetadata {
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * The bean has <code>singleton</code> scope.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @see #getScope()
1:f13c6ac: 	 */
1:f13c6ac: 	static final String	SCOPE_SINGLETON	= "singleton";
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * The bean has <code>prototype</code> scope.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @see #getScope()
1:f13c6ac: 	 */
1:f13c6ac: 	static final String	SCOPE_PROTOTYPE	= "prototype";
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the name of the class specified for the bean.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the <code>class</code> attribute of the bean
1:f13c6ac: 	 * definition.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The name of the class specified for the bean. If no class is
1:f13c6ac: 	 *         specified in the bean definition, because the a factory component
1:f13c6ac: 	 *         is used instead, then this method will return <code>null</code>.
1:f13c6ac: 	 */
1:f13c6ac: 	String getClassName();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the name of the init method specified for the bean.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the <code>init-method</code> attribute of the bean
1:f13c6ac: 	 * definition.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The name of the init method specified for the bean, or
1:f13c6ac: 	 *         <code>null</code> if no init method is specified.
1:f13c6ac: 	 */
1:f13c6ac: 	String getInitMethod();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the name of the destroy method specified for the bean.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the <code>destroy-method</code> attribute of the
1:f13c6ac: 	 * bean definition.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The name of the destroy method specified for the bean, or
1:f13c6ac: 	 *         <code>null</code> if no destroy method is specified.
1:f13c6ac: 	 */
1:f13c6ac: 	String getDestroyMethod();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the arguments for the factory method or constructor of the bean.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the child <code>argument<code> elements.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return An immutable List of {@link BeanArgument} objects for the factory
1:f13c6ac: 	 *         method or constructor of the bean. The List is empty if no
1:f13c6ac: 	 *         arguments are specified for the bean.
1:f13c6ac: 	 */
1:f13c6ac: 	List<BeanArgument> getArguments();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the properties for the bean.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the child <code>property</code> elements.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return An immutable List of {@link BeanProperty} objects, with one entry
1:f13c6ac: 	 *         for each property to be injected in the bean. The List is empty
1:f13c6ac: 	 *         if no property injection is specified for the bean.
1:f13c6ac: 	 * 
1:f13c6ac: 	 */
1:f13c6ac: 	List<BeanProperty> getProperties();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the name of the factory method for the bean.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the <code>factory-method</code> attribute of the
1:f13c6ac: 	 * bean.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The name of the factory method of the bean or <code>null</code>
1:f13c6ac: 	 *         if no factory method is specified for the bean.
1:f13c6ac: 	 */
1:f13c6ac: 	String getFactoryMethod();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the Metadata for the factory component on which to invoke the
1:f13c6ac: 	 * factory method for the bean.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the <code>factory-ref</code> attribute of the bean.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * <p>
1:f13c6ac: 	 * When a factory method and factory component have been specified for the
1:f13c6ac: 	 * bean, this method returns the factory component on which to invoke the
1:f13c6ac: 	 * factory method for the bean. When no factory component has been specified
1:f13c6ac: 	 * this method will return <code>null</code>.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * When a factory method has been specified for the bean but a factory
1:f13c6ac: 	 * component has not been specified, the factory method must be invoked as a
1:f13c6ac: 	 * static method on the bean's class.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The Metadata for the factory component on which to invoke the
1:f13c6ac: 	 *         factory method for the bean or <code>null</code> if no factory
1:f13c6ac: 	 *         component is specified.
1:f13c6ac: 	 */
1:f13c6ac: 	Target getFactoryComponent();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the scope for the bean.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The scope for the bean.
1:f13c6ac: 	 * @see #SCOPE_SINGLETON
1:f13c6ac: 	 * @see #SCOPE_PROTOTYPE
1:f13c6ac: 	 */
1:f13c6ac: 	String getScope();
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.blueprint.reflect;
1: 
1: import java.util.List;
1: 
1: /**
1:  * Metadata for a Bean component.
1:  * 
1:  * <p>
1:  * This is specified by the <code>bean</code> element.
1:  * 
1:  * @ThreadSafe
1:  * @version $Revision$
1:  */
1: public interface BeanMetadata extends Target, ComponentMetadata {
1: 
1: 	/**
1: 	 * The bean has <code>singleton</code> scope.
1: 	 * 
1: 	 * @see #getScope()
1: 	 */
1: 	static final String	SCOPE_SINGLETON	= "singleton";
1: 
1: 	/**
1: 	 * The bean has <code>prototype</code> scope.
1: 	 * 
1: 	 * @see #getScope()
1: 	 */
1: 	static final String	SCOPE_PROTOTYPE	= "prototype";
1: 
1: 	/**
1: 	 * Return the name of the class specified for the bean.
1: 	 * 
1: 	 * This is specified by the <code>class</code> attribute of the bean
1: 	 * definition.
1: 	 * 
1: 	 * @return The name of the class specified for the bean. If no class is
1: 	 *         specified in the bean definition, because the a factory component
1: 	 *         is used instead, then this method will return <code>null</code>.
1: 	 */
1: 	String getClassName();
1: 
1: 	/**
1: 	 * Return the name of the init method specified for the bean.
1: 	 * 
1: 	 * This is specified by the <code>init-method</code> attribute of the bean
1: 	 * definition.
1: 	 * 
1: 	 * @return The name of the init method specified for the bean, or
1: 	 *         <code>null</code> if no init method is specified.
1: 	 */
1: 	String getInitMethod();
1: 
1: 	/**
1: 	 * Return the name of the destroy method specified for the bean.
1: 	 * 
1: 	 * This is specified by the <code>destroy-method</code> attribute of the
1: 	 * bean definition.
1: 	 * 
1: 	 * @return The name of the destroy method specified for the bean, or
1: 	 *         <code>null</code> if no destroy method is specified.
1: 	 */
1: 	String getDestroyMethod();
1: 
1: 	/**
1: 	 * Return the arguments for the factory method or constructor of the bean.
1: 	 * 
1: 	 * This is specified by the child <code>argument<code> elements.
1: 	 * 
1: 	 * @return An immutable List of {@link BeanArgument} objects for the factory
1: 	 *         method or constructor of the bean. The List is empty if no
1: 	 *         arguments are specified for the bean.
1: 	 */
1: 	List<BeanArgument> getArguments();
1: 
1: 	/**
1: 	 * Return the properties for the bean.
1: 	 * 
1: 	 * This is specified by the child <code>property</code> elements.
1: 	 * 
1: 	 * @return An immutable List of {@link BeanProperty} objects, with one entry
1: 	 *         for each property to be injected in the bean. The List is empty
1: 	 *         if no property injection is specified for the bean.
1: 	 * 
1: 	 */
1: 	List<BeanProperty> getProperties();
1: 
1: 	/**
1: 	 * Return the name of the factory method for the bean.
1: 	 * 
1: 	 * This is specified by the <code>factory-method</code> attribute of the
1: 	 * bean.
1: 	 * 
1: 	 * @return The name of the factory method of the bean or <code>null</code>
1: 	 *         if no factory method is specified for the bean.
1: 	 */
1: 	String getFactoryMethod();
1: 
1: 	/**
1: 	 * Return the Metadata for the factory component on which to invoke the
1: 	 * factory method for the bean.
1: 	 * 
1: 	 * This is specified by the <code>factory-ref</code> attribute of the bean.
1: 	 * 
1: 	 * <p>
1: 	 * When a factory method and factory component have been specified for the
1: 	 * bean, this method returns the factory component on which to invoke the
1: 	 * factory method for the bean. When no factory component has been specified
1: 	 * this method will return <code>null</code>.
1: 	 * 
1: 	 * When a factory method has been specified for the bean but a factory
1: 	 * component has not been specified, the factory method must be invoked as a
1: 	 * static method on the bean's class.
1: 	 * 
1: 	 * @return The Metadata for the factory component on which to invoke the
1: 	 *         factory method for the bean or <code>null</code> if no factory
1: 	 *         component is specified.
1: 	 */
1: 	Target getFactoryComponent();
1: 
1: 	/**
1: 	 * Return the scope for the bean.
1: 	 * 
1: 	 * @return The scope for the bean.
1: 	 * @see #SCOPE_SINGLETON
1: 	 * @see #SCOPE_PROTOTYPE
1: 	 */
1: 	String getScope();
1: }
============================================================================