1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.container.impl;
1:2cfdf52: 
1:2cfdf52: import java.sql.SQLException;
1:2cfdf52: import java.util.Properties;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.spi.PersistenceProvider;
1:2cfdf52: import javax.persistence.spi.PersistenceUnitTransactionType;
1:2cfdf52: import javax.sql.DataSource;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.container.parser.impl.PersistenceUnit;
1:2cfdf52: import org.osgi.framework.BundleContext;
1:2cfdf52: import org.osgi.framework.Filter;
1:2cfdf52: import org.osgi.framework.FrameworkUtil;
1:2cfdf52: import org.osgi.framework.InvalidSyntaxException;
1:2cfdf52: import org.osgi.framework.ServiceReference;
1:2cfdf52: import org.osgi.service.jdbc.DataSourceFactory;
1:2cfdf52: import org.osgi.util.tracker.ServiceTracker;
1:2cfdf52: import org.slf4j.Logger;
1:2cfdf52: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: public class DSFTracker extends ServiceTracker<DataSourceFactory, ManagedEMF>{
1:2cfdf52:     private static final String JDBC_DRIVER = "javax.persistence.jdbc.driver";
1:2cfdf52:     private static final String JDBC_URL = "javax.persistence.jdbc.url";
1:2cfdf52:     private static final String JDBC_USER = "javax.persistence.jdbc.user";
1:ec3ea65:     private static final String JDBC_PASSWORD = "javax.persistence.jdbc.password"; // NOSONAR
1:2cfdf52: 
1:2cfdf52:     private static final Logger LOGGER = LoggerFactory.getLogger(DSFTracker.class);
1:2cfdf52: 
1:2cfdf52: 
1:2cfdf52:     private PersistenceProvider provider;
1:2cfdf52:     private PersistenceUnit punit;
1:2cfdf52: 
1:2cfdf52:     public DSFTracker(BundleContext context, PersistenceProvider provider, PersistenceUnit punit) {
1:2cfdf52:         super(context, createFilter(context, punit), null);
1:2cfdf52:         this.provider = provider;
1:2cfdf52:         this.punit = punit;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     static Filter createFilter(BundleContext context, PersistenceUnit punit) {
1:2cfdf52:         String driverName = getDriverName(punit);
1:2cfdf52:         if (driverName == null) {
1:2cfdf52:             throw new IllegalArgumentException("No javax.persistence.jdbc.driver supplied in persistence.xml");
1:2cfdf52:         }
1:2cfdf52:         String filter = String.format("(&(objectClass=%s)(%s=%s))",
1:2cfdf52:                                       DataSourceFactory.class.getName(),
1:2cfdf52:                                       DataSourceFactory.OSGI_JDBC_DRIVER_CLASS,
1:2cfdf52:                                       driverName);
1:2cfdf52:         LOGGER.info("Tracking DataSourceFactory for punit " + punit.getPersistenceUnitName() + " with filter " + filter);
1:2cfdf52:         try {
1:2cfdf52:             return context.createFilter(filter);
1:2cfdf52:         } catch (InvalidSyntaxException e) {
1:2cfdf52:             throw new IllegalArgumentException(e);
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public static String getDriverName(PersistenceUnit punit) {
1:2cfdf52:         return (String)punit.getProperties().get(JDBC_DRIVER);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public ManagedEMF addingService(ServiceReference<DataSourceFactory> reference) {
1:2cfdf52:         LOGGER.info("Found DataSourceFactory for " + punit.getPersistenceUnitName() + " "
1:2cfdf52:                     + getDriverName(punit));
1:2cfdf52:         try {
1:2cfdf52:             DataSourceFactory dsf = context.getService(reference);
1:2cfdf52:             DataSource ds = createDataSource(dsf);
1:2cfdf52:             if (punit.getTransactionType() == PersistenceUnitTransactionType.JTA) {
1:2cfdf52:                 punit.setJtaDataSource(ds);
1:2cfdf52:             } else {
1:2cfdf52:                 punit.setNonJtaDataSource(ds);
1:2cfdf52:             }
1:2cfdf52:             BundleContext containerContext = FrameworkUtil.getBundle(this.getClass()).getBundleContext();
1:2cfdf52:             return new ManagedEMF(containerContext, punit.getBundle(), provider, punit);
1:2cfdf52:         } catch (Exception e) {
1:2cfdf52:             LOGGER.error("Error creating DataSource for punit " + punit.getPersistenceUnitName(), e);
1:2cfdf52:             return null;
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private DataSource createDataSource(DataSourceFactory dsf) {
1:2cfdf52:         try {
1:2cfdf52:             Properties props = new Properties();
1:2cfdf52:             put(props, DataSourceFactory.JDBC_URL, punit, JDBC_URL);
1:2cfdf52:             put(props, DataSourceFactory.JDBC_USER, punit, JDBC_USER);
1:2cfdf52:             put(props, DataSourceFactory.JDBC_PASSWORD, punit, JDBC_PASSWORD);
1:ec3ea65:             return dsf.createDataSource(props);
1:2cfdf52:         } catch (SQLException e) {
1:ec3ea65:             String msg = "Error creating DataSource for persistence unit " + punit + "." + e.getMessage();
1:ec3ea65:             throw new RuntimeException(msg, e); // NOSONAR
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private static void put(Properties props, String destKey, PersistenceUnit punit, String sourceKey) {
1:2cfdf52:         Object value = punit.getProperties().get(sourceKey);
1:2cfdf52:         if (value != null) {
1:2cfdf52:             props.put(destKey, value);
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void removedService(ServiceReference<DataSourceFactory> reference, ManagedEMF managedEMF) {
1:2cfdf52:         LOGGER.info("Lost DataSourceFactory for " + punit.getPersistenceUnitName() + " " + getDriverName(punit));
1:2cfdf52:         managedEMF.close();
1:2cfdf52:         super.removedService(reference, managedEMF);
1:2cfdf52:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     private static final String JDBC_PASSWORD = "javax.persistence.jdbc.password"; // NOSONAR
/////////////////////////////////////////////////////////////////////////
1:             return dsf.createDataSource(props);
1:             String msg = "Error creating DataSource for persistence unit " + punit + "." + e.getMessage();
1:             throw new RuntimeException(msg, e); // NOSONAR
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.impl;
1: 
1: import java.sql.SQLException;
1: import java.util.Properties;
1: 
1: import javax.persistence.spi.PersistenceProvider;
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: import javax.sql.DataSource;
1: 
1: import org.apache.aries.jpa.container.parser.impl.PersistenceUnit;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class DSFTracker extends ServiceTracker<DataSourceFactory, ManagedEMF>{
1:     private static final String JDBC_DRIVER = "javax.persistence.jdbc.driver";
1:     private static final String JDBC_URL = "javax.persistence.jdbc.url";
1:     private static final String JDBC_USER = "javax.persistence.jdbc.user";
0:     private static final String JDBC_PASSWORD = "javax.persistence.jdbc.password";
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(DSFTracker.class);
1: 
1: 
1:     private PersistenceProvider provider;
1:     private PersistenceUnit punit;
1: 
1:     public DSFTracker(BundleContext context, PersistenceProvider provider, PersistenceUnit punit) {
1:         super(context, createFilter(context, punit), null);
1:         this.provider = provider;
1:         this.punit = punit;
1:     }
1: 
1:     static Filter createFilter(BundleContext context, PersistenceUnit punit) {
1:         String driverName = getDriverName(punit);
1:         if (driverName == null) {
1:             throw new IllegalArgumentException("No javax.persistence.jdbc.driver supplied in persistence.xml");
1:         }
1:         String filter = String.format("(&(objectClass=%s)(%s=%s))",
1:                                       DataSourceFactory.class.getName(),
1:                                       DataSourceFactory.OSGI_JDBC_DRIVER_CLASS,
1:                                       driverName);
1:         LOGGER.info("Tracking DataSourceFactory for punit " + punit.getPersistenceUnitName() + " with filter " + filter);
1:         try {
1:             return context.createFilter(filter);
1:         } catch (InvalidSyntaxException e) {
1:             throw new IllegalArgumentException(e);
1:         }
1:     }
1: 
1:     public static String getDriverName(PersistenceUnit punit) {
1:         return (String)punit.getProperties().get(JDBC_DRIVER);
1:     }
1: 
1:     @Override
1:     public ManagedEMF addingService(ServiceReference<DataSourceFactory> reference) {
1:         LOGGER.info("Found DataSourceFactory for " + punit.getPersistenceUnitName() + " "
1:                     + getDriverName(punit));
1:         try {
1:             DataSourceFactory dsf = context.getService(reference);
1:             DataSource ds = createDataSource(dsf);
1:             if (punit.getTransactionType() == PersistenceUnitTransactionType.JTA) {
1:                 punit.setJtaDataSource(ds);
1:             } else {
1:                 punit.setNonJtaDataSource(ds);
1:             }
1:             BundleContext containerContext = FrameworkUtil.getBundle(this.getClass()).getBundleContext();
1:             return new ManagedEMF(containerContext, punit.getBundle(), provider, punit);
1:         } catch (Exception e) {
1:             LOGGER.error("Error creating DataSource for punit " + punit.getPersistenceUnitName(), e);
1:             return null;
1:         }
1:     }
1: 
1:     private DataSource createDataSource(DataSourceFactory dsf) {
1:         try {
1:             Properties props = new Properties();
1:             put(props, DataSourceFactory.JDBC_URL, punit, JDBC_URL);
1:             put(props, DataSourceFactory.JDBC_USER, punit, JDBC_USER);
1:             put(props, DataSourceFactory.JDBC_PASSWORD, punit, JDBC_PASSWORD);
0:             DataSource ds = dsf.createDataSource(props);
0:             return ds;
1:         } catch (SQLException e) {
0:             throw new RuntimeException("Error creating DataSource for persistence unit " + punit + "."
0:                                        + e.getMessage(), e);
1:         }
1:     }
1: 
1:     private static void put(Properties props, String destKey, PersistenceUnit punit, String sourceKey) {
1:         Object value = punit.getProperties().get(sourceKey);
1:         if (value != null) {
1:             props.put(destKey, value);
1:         }
1:     }
1: 
1:     @Override
1:     public void removedService(ServiceReference<DataSourceFactory> reference, ManagedEMF managedEMF) {
1:         LOGGER.info("Lost DataSourceFactory for " + punit.getPersistenceUnitName() + " " + getDriverName(punit));
1:         managedEMF.close();
1:         super.removedService(reference, managedEMF);
1:     }
1: }
============================================================================