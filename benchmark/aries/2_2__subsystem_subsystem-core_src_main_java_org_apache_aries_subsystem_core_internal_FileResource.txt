1:79b20bc: /*
1:79b20bc:  * Licensed under the Apache License, Version 2.0 (the "License");
1:79b20bc:  * you may not use this file except in compliance with the License.
1:79b20bc:  * You may obtain a copy of the License at
1:79b20bc:  *
1:79b20bc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:79b20bc:  *
1:79b20bc:  * Unless required by applicable law or agreed to in writing, software
1:79b20bc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:79b20bc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:79b20bc:  * See the License for the specific language governing permissions and
1:79b20bc:  * limitations under the License.
1:79b20bc:  */
1:79b20bc: package org.apache.aries.subsystem.core.internal;
1:79b20bc: 
1:79b20bc: import java.io.IOException;
1:79b20bc: import java.io.InputStream;
1:79b20bc: import java.util.ArrayList;
1:79b20bc: import java.util.Collections;
1:79b20bc: import java.util.HashMap;
1:79b20bc: import java.util.List;
1:79b20bc: import java.util.Map;
1:79b20bc: 
1:79b20bc: import org.apache.aries.util.filesystem.IFile;
1:79b20bc: import org.osgi.resource.Capability;
1:79b20bc: import org.osgi.resource.Requirement;
1:79b20bc: import org.osgi.resource.Resource;
1:79b20bc: import org.osgi.service.repository.RepositoryContent;
1:79b20bc: 
1:79b20bc: public class FileResource implements Resource, RepositoryContent {
1:79b20bc:     private final IFile file;
1:3f524ae:     private volatile Map<String, List<Capability>> capabilities       ;
1:79b20bc: 
1:79b20bc:     public FileResource(IFile file) {
1:79b20bc:         this.file = file;
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Override
1:79b20bc:     public List<Capability> getCapabilities(String namespace) {
1:3f524ae:         Map<String, List<Capability>> namespace2capabilities = capabilities;
1:3f524ae:         if (namespace2capabilities == null) {
1:3f524ae:             return Collections.emptyList();
1:3f524ae:         }
1:3f524ae:         List<Capability> caps;
1:3f524ae:         if (namespace == null) {
1:3f524ae:             caps = new ArrayList<Capability>();
1:3f524ae:             for (List<Capability> l : capabilities.values()) {
1:3f524ae:                 caps.addAll(l);
1:3f524ae:             }
1:3f524ae:             return Collections.unmodifiableList(caps);
1:3f524ae:         }
1:3f524ae:         caps = namespace2capabilities.get(namespace);
1:79b20bc:         if (caps != null)
1:3f524ae:             return Collections.unmodifiableList(caps);
1:79b20bc:         else
1:79b20bc:             return Collections.emptyList();
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Override
1:79b20bc:     public List<Requirement> getRequirements(String namespace) {
1:79b20bc:         return Collections.emptyList();
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     public void setCapabilities(List<Capability> capabilities) {
1:79b20bc:         Map<String, List<Capability>> m = new HashMap<String, List<Capability>>();
1:79b20bc:         for (Capability c : capabilities) {
1:79b20bc:             List<Capability> l = m.get(c.getNamespace());
1:79b20bc:             if (l == null) {
1:79b20bc:                 l = new ArrayList<Capability>();
1:79b20bc:                 m.put(c.getNamespace(), l);
1:79b20bc:             }
1:79b20bc:             l.add(c);
1:79b20bc:         }
1:79b20bc:         this.capabilities = m;
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Override
1:79b20bc:     public InputStream getContent() {
1:79b20bc:         try {
1:79b20bc:             return file.open();
1:79b20bc:         } catch (IOException e) {
1:79b20bc:             throw new RuntimeException(e);
1:79b20bc:         }
1:79b20bc:     }
1:79b20bc: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:3f524ae
/////////////////////////////////////////////////////////////////////////
1:     private volatile Map<String, List<Capability>> capabilities       ;
/////////////////////////////////////////////////////////////////////////
1:         Map<String, List<Capability>> namespace2capabilities = capabilities;
1:         if (namespace2capabilities == null) {
1:             return Collections.emptyList();
1:         }
1:         List<Capability> caps;
1:         if (namespace == null) {
1:             caps = new ArrayList<Capability>();
1:             for (List<Capability> l : capabilities.values()) {
1:                 caps.addAll(l);
1:             }
1:             return Collections.unmodifiableList(caps);
1:         }
1:         caps = namespace2capabilities.get(namespace);
1:             return Collections.unmodifiableList(caps);
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:79b20bc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.util.filesystem.IFile;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.repository.RepositoryContent;
1: 
1: public class FileResource implements Resource, RepositoryContent {
1:     private final IFile file;
0:     private volatile Map<String, List<Capability>> capabilities;
1: 
1:     public FileResource(IFile file) {
1:         this.file = file;
1:     }
1: 
1:     @Override
1:     public List<Capability> getCapabilities(String namespace) {
0:         List<Capability> caps = capabilities.get(namespace);
1:         if (caps != null)
0:             return caps;
1:         else
1:             return Collections.emptyList();
1:     }
1: 
1:     @Override
1:     public List<Requirement> getRequirements(String namespace) {
1:         return Collections.emptyList();
1:     }
1: 
1:     public void setCapabilities(List<Capability> capabilities) {
1:         Map<String, List<Capability>> m = new HashMap<String, List<Capability>>();
1:         for (Capability c : capabilities) {
1:             List<Capability> l = m.get(c.getNamespace());
1:             if (l == null) {
1:                 l = new ArrayList<Capability>();
1:                 m.put(c.getNamespace(), l);
1:             }
1:             l.add(c);
1:         }
1:         this.capabilities = m;
1:     }
1: 
1:     @Override
1:     public InputStream getContent() {
1:         try {
1:             return file.open();
1:         } catch (IOException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: }
============================================================================