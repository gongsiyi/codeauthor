1:df2a53a: /*
1:c888d16:  * Licensed to the Apache Software Foundation (ASF) under one
1:c888d16:  * or more contributor license agreements.  See the NOTICE file
1:c888d16:  * distributed with this work for additional information
1:c888d16:  * regarding copyright ownership.  The ASF licenses this file
1:c888d16:  * to you under the Apache License, Version 2.0 (the
1:c888d16:  * "License"); you may not use this file except in compliance
1:c888d16:  * with the License.  You may obtain a copy of the License at
1:df2a53a:  *
1:c888d16:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c888d16:  *
1:c888d16:  * Unless required by applicable law or agreed to in writing,
1:c888d16:  * software distributed under the License is distributed on an
1:c888d16:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c888d16:  * KIND, either express or implied.  See the License for the
1:c888d16:  * specific language governing permissions and limitations
1:c888d16:  * under the License.
1:df2a53a:  */
1:df2a53a: package org.apache.aries.samples.blog.persistence.jdbc;
1:df2a53a: 
1:df2a53a: public class Statements {
1:df2a53a: 
1:df2a53a:     private static final String I_THR_TRY_ELEMENT = "I_THR_TRY_ELEMENT";
1:df2a53a: 
1:df2a53a:     private static final String I_THR_TRY_AUTHOR_EMAIL = "I_THR_TRY_AUTHOR_EMAIL";
1:df2a53a: 
1:df2a53a:     public static final String I_BLGNTRY_AUTHOR = "I_BLGNTRY_AUTHOR";
1:df2a53a: 
1:df2a53a:     public static final String AUTHOR_TABLE_NAME = "AUTHOR";
1:df2a53a: 
1:df2a53a:     public static final String AUTHOR_BLOG_ENTRY_TABLE_NAME = "AUTHOR_BLOGENTRY";
1:df2a53a: 
1:df2a53a:     public static final String BLOG_ENTRY_TABLE_NAME = "BLOGENTRY";
1:df2a53a: 
1:df2a53a:     public static final String COMMENT_ENTRY_TABLE_NAME = "COMMENT";
1:df2a53a: 
1:df2a53a:     private String[] dropSchemaStatements;
1:df2a53a: 
1:df2a53a:     private String[] createSchemaStatements;
1:df2a53a: 
1:df2a53a:     public synchronized String[] getCreateSchemaStatements() {
1:df2a53a:         if (createSchemaStatements == null) {
1:df2a53a:             createSchemaStatements = new String[] {
1:df2a53a:                     "CREATE TABLE "
1:df2a53a:                             + AUTHOR_TABLE_NAME
1:df2a53a:                             + " (email VARCHAR(255) NOT NULL, "
1:df2a53a:                             + "bio VARCHAR(255), displayName VARCHAR(255), "
1:df2a53a:                             + "dob TIMESTAMP, name VARCHAR(255), PRIMARY KEY (email))",
1:df2a53a:                     "CREATE TABLE " + AUTHOR_BLOG_ENTRY_TABLE_NAME
1:df2a53a:                             + " (AUTHOR_EMAIL VARCHAR(255), POSTS_ID BIGINT)",
1:df2a53a:                     "CREATE TABLE "
1:df2a53a:                             + BLOG_ENTRY_TABLE_NAME
1:df2a53a:                             + " (id BIGINT NOT NULL, blogText VARCHAR(10000), "
1:df2a53a:                             + "publishDate TIMESTAMP, title VARCHAR(255), updatedDate TIMESTAMP, "
1:df2a53a:                             + "AUTHOR_EMAIL VARCHAR(255), PRIMARY KEY (id))",
1:df2a53a:                     "CREATE TABLE "
1:df2a53a:                             + COMMENT_ENTRY_TABLE_NAME
1:df2a53a:                             + " (id BIGINT NOT NULL, comment VARCHAR(255), creationDate TIMESTAMP, "
1:df2a53a:                             + "AUTHOR_EMAIL VARCHAR(255), BLOGENTRY_ID BIGINT)",
1:df2a53a:                     "CREATE INDEX " + I_THR_TRY_AUTHOR_EMAIL + " ON "
1:df2a53a:                             + AUTHOR_BLOG_ENTRY_TABLE_NAME + " (AUTHOR_EMAIL)",
1:df2a53a:                     "CREATE INDEX " + I_THR_TRY_ELEMENT + " ON "
1:df2a53a:                             + AUTHOR_BLOG_ENTRY_TABLE_NAME + " (POSTS_ID)",
1:df2a53a:                     "CREATE INDEX " + I_BLGNTRY_AUTHOR + " ON "
1:df2a53a:                             + BLOG_ENTRY_TABLE_NAME + " (AUTHOR_EMAIL)",
1:df2a53a:                     "DELETE FROM " + AUTHOR_TABLE_NAME,
1:df2a53a:                     "DELETE FROM " + AUTHOR_BLOG_ENTRY_TABLE_NAME,
1:df2a53a:                     "DELETE FROM " + BLOG_ENTRY_TABLE_NAME,
1:df2a53a:                     "DELETE FROM " + COMMENT_ENTRY_TABLE_NAME };
1:df2a53a:         }
1:df2a53a:         return createSchemaStatements;
1:df2a53a:     }
1:df2a53a: 
1:df2a53a:     public synchronized String[] getDropSchemaStatements() {
1:df2a53a:         if (dropSchemaStatements == null) {
1:df2a53a:             dropSchemaStatements = new String[] {
1:df2a53a:                     "DROP INDEX " + I_THR_TRY_ELEMENT,
1:df2a53a:                     "DROP INDEX " + I_BLGNTRY_AUTHOR,
1:df2a53a:                     "DROP INDEX " + I_THR_TRY_AUTHOR_EMAIL,
1:df2a53a:                     "DROP TABLE " + COMMENT_ENTRY_TABLE_NAME,
1:df2a53a:                     "DROP TABLE " + BLOG_ENTRY_TABLE_NAME,
1:df2a53a:                     "DROP TABLE " + AUTHOR_BLOG_ENTRY_TABLE_NAME,
1:df2a53a:                     "DROP TABLE " + AUTHOR_TABLE_NAME };
1:df2a53a:         }
1:df2a53a:         return dropSchemaStatements;
1:df2a53a:     }
1:df2a53a: 
1:df2a53a: }
============================================================================
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:c888d16
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
commit:df2a53a
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Statements
1:  *
0:  * Copyright (c) 2010 Sabre Holdings, Inc. All Rights Reserved.
1:  */
1: package org.apache.aries.samples.blog.persistence.jdbc;
1: 
1: public class Statements {
1: 
1:     private static final String I_THR_TRY_ELEMENT = "I_THR_TRY_ELEMENT";
1: 
1:     private static final String I_THR_TRY_AUTHOR_EMAIL = "I_THR_TRY_AUTHOR_EMAIL";
1: 
1:     public static final String I_BLGNTRY_AUTHOR = "I_BLGNTRY_AUTHOR";
1: 
1:     public static final String AUTHOR_TABLE_NAME = "AUTHOR";
1: 
1:     public static final String AUTHOR_BLOG_ENTRY_TABLE_NAME = "AUTHOR_BLOGENTRY";
1: 
1:     public static final String BLOG_ENTRY_TABLE_NAME = "BLOGENTRY";
1: 
1:     public static final String COMMENT_ENTRY_TABLE_NAME = "COMMENT";
1: 
1:     private String[] dropSchemaStatements;
1: 
1:     private String[] createSchemaStatements;
1: 
1:     public synchronized String[] getCreateSchemaStatements() {
1:         if (createSchemaStatements == null) {
1:             createSchemaStatements = new String[] {
1:                     "CREATE TABLE "
1:                             + AUTHOR_TABLE_NAME
1:                             + " (email VARCHAR(255) NOT NULL, "
1:                             + "bio VARCHAR(255), displayName VARCHAR(255), "
1:                             + "dob TIMESTAMP, name VARCHAR(255), PRIMARY KEY (email))",
1:                     "CREATE TABLE " + AUTHOR_BLOG_ENTRY_TABLE_NAME
1:                             + " (AUTHOR_EMAIL VARCHAR(255), POSTS_ID BIGINT)",
1:                     "CREATE TABLE "
1:                             + BLOG_ENTRY_TABLE_NAME
1:                             + " (id BIGINT NOT NULL, blogText VARCHAR(10000), "
1:                             + "publishDate TIMESTAMP, title VARCHAR(255), updatedDate TIMESTAMP, "
1:                             + "AUTHOR_EMAIL VARCHAR(255), PRIMARY KEY (id))",
1:                     "CREATE TABLE "
1:                             + COMMENT_ENTRY_TABLE_NAME
1:                             + " (id BIGINT NOT NULL, comment VARCHAR(255), creationDate TIMESTAMP, "
1:                             + "AUTHOR_EMAIL VARCHAR(255), BLOGENTRY_ID BIGINT)",
1:                     "CREATE INDEX " + I_THR_TRY_AUTHOR_EMAIL + " ON "
1:                             + AUTHOR_BLOG_ENTRY_TABLE_NAME + " (AUTHOR_EMAIL)",
1:                     "CREATE INDEX " + I_THR_TRY_ELEMENT + " ON "
1:                             + AUTHOR_BLOG_ENTRY_TABLE_NAME + " (POSTS_ID)",
1:                     "CREATE INDEX " + I_BLGNTRY_AUTHOR + " ON "
1:                             + BLOG_ENTRY_TABLE_NAME + " (AUTHOR_EMAIL)",
1:                     "DELETE FROM " + AUTHOR_TABLE_NAME,
1:                     "DELETE FROM " + AUTHOR_BLOG_ENTRY_TABLE_NAME,
1:                     "DELETE FROM " + BLOG_ENTRY_TABLE_NAME,
1:                     "DELETE FROM " + COMMENT_ENTRY_TABLE_NAME };
1:         }
1:         return createSchemaStatements;
1:     }
1: 
1:     public synchronized String[] getDropSchemaStatements() {
1:         if (dropSchemaStatements == null) {
1:             dropSchemaStatements = new String[] {
1:                     "DROP INDEX " + I_THR_TRY_ELEMENT,
1:                     "DROP INDEX " + I_BLGNTRY_AUTHOR,
1:                     "DROP INDEX " + I_THR_TRY_AUTHOR_EMAIL,
1:                     "DROP TABLE " + COMMENT_ENTRY_TABLE_NAME,
1:                     "DROP TABLE " + BLOG_ENTRY_TABLE_NAME,
1:                     "DROP TABLE " + AUTHOR_BLOG_ENTRY_TABLE_NAME,
1:                     "DROP TABLE " + AUTHOR_TABLE_NAME };
1:         }
1:         return dropSchemaStatements;
1:     }
1: 
1: }
============================================================================