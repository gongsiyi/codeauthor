1:7fa86e8: /*
1:7fa86e8:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:7fa86e8:  * 
1:7fa86e8:  * Licensed under the Apache License, Version 2.0 (the "License");
1:7fa86e8:  * you may not use this file except in compliance with the License.
1:7fa86e8:  * You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing, software
1:7fa86e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7fa86e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7fa86e8:  * See the License for the specific language governing permissions and
1:7fa86e8:  * limitations under the License.
1:7fa86e8:  */
1:7fa86e8: 
1:7fa86e8: package org.osgi.util.pushstream;
1:7fa86e8: 
1:7fa86e8: import java.util.concurrent.BlockingQueue;
1:7fa86e8: import java.util.concurrent.atomic.AtomicInteger;
1:7fa86e8: 
1:7fa86e8: /**
1:7fa86e8:  * {@link PushbackPolicyOption} provides a standard set of simple
1:7fa86e8:  * {@link PushbackPolicy} implementations.
1:7fa86e8:  * 
1:7fa86e8:  * @see PushbackPolicy
1:7fa86e8:  */
1:7fa86e8: public enum PushbackPolicyOption {
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Returns a fixed amount of back pressure, independent of how full the
1:7fa86e8: 	 * buffer is
1:7fa86e8: 	 */
1:7fa86e8: 	FIXED {
1:7fa86e8: 		@Override
1:7fa86e8: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> PushbackPolicy<T, U> getPolicy(long value) {
1:7fa86e8: 			return q -> value;
1:7fa86e8: 		}
1:7fa86e8: 	},
1:7fa86e8: 	/**
1:7fa86e8: 	 * Returns zero back pressure until the buffer is full, then it returns a
1:7fa86e8: 	 * fixed value
1:7fa86e8: 	 */
1:7fa86e8: 	ON_FULL_FIXED {
1:7fa86e8: 		@Override
1:7fa86e8: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> PushbackPolicy<T, U> getPolicy(long value) {
1:7fa86e8: 			return q -> q.remainingCapacity() == 0 ? value : 0;
1:7fa86e8: 		}
1:7fa86e8: 	},
1:7fa86e8: 	/**
1:7fa86e8: 	 * Returns zero back pressure until the buffer is full, then it returns an
1:7fa86e8: 	 * exponentially increasing amount, starting with the supplied value and
1:7fa86e8: 	 * doubling it each time. Once the buffer is no longer full the back
1:7fa86e8: 	 * pressure returns to zero.
1:7fa86e8: 	 */
1:7fa86e8: 	ON_FULL_EXPONENTIAL {
1:7fa86e8: 		@Override
1:7fa86e8: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> PushbackPolicy<T, U> getPolicy(long value) {
1:7fa86e8: 			AtomicInteger backoffCount = new AtomicInteger(0);
1:7fa86e8: 			return q -> {
1:7fa86e8: 				if (q.remainingCapacity() == 0) {
1:7fa86e8: 					return value << backoffCount.getAndIncrement();
1:7fa86e8: 				}
1:7fa86e8: 				backoffCount.set(0);
1:7fa86e8: 				return 0;
1:7fa86e8: 			};
1:7fa86e8: 
1:7fa86e8: 		}
1:7fa86e8: 	},
1:7fa86e8: 	/**
1:7fa86e8: 	 * Returns zero back pressure when the buffer is empty, then it returns a
1:7fa86e8: 	 * linearly increasing amount of back pressure based on how full the buffer
1:7fa86e8: 	 * is. The maximum value will be returned when the buffer is full.
1:7fa86e8: 	 */
1:7fa86e8: 	LINEAR {
1:7fa86e8: 		@Override
1:7fa86e8: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> PushbackPolicy<T, U> getPolicy(long value) {
1:7fa86e8: 			return q -> {
1:7fa86e8: 				long remainingCapacity = q.remainingCapacity();
1:7fa86e8: 				long used = q.size();
1:7fa86e8: 				return (value * used) / (used + remainingCapacity);
1:7fa86e8: 			};
1:7fa86e8: 		}
1:7fa86e8: 	};
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Create a {@link PushbackPolicy} instance configured with a base back
1:7fa86e8: 	 * pressure time in nanoseconds
1:7fa86e8: 	 * 
1:7fa86e8: 	 * The actual backpressure returned will vary based on the selected
1:7fa86e8: 	 * implementation, the base value, and the state of the buffer.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param value
1:7fa86e8: 	 * @return A {@link PushbackPolicy} to use
1:7fa86e8: 	 */
1:7fa86e8: 	public abstract <T, U extends BlockingQueue<PushEvent<? extends T>>> PushbackPolicy<T, U> getPolicy(long value);
1:7fa86e8: 
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.util.pushstream;
1: 
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: /**
1:  * {@link PushbackPolicyOption} provides a standard set of simple
1:  * {@link PushbackPolicy} implementations.
1:  * 
1:  * @see PushbackPolicy
1:  */
1: public enum PushbackPolicyOption {
1: 
1: 	/**
1: 	 * Returns a fixed amount of back pressure, independent of how full the
1: 	 * buffer is
1: 	 */
1: 	FIXED {
1: 		@Override
1: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> PushbackPolicy<T, U> getPolicy(long value) {
1: 			return q -> value;
1: 		}
1: 	},
1: 	/**
1: 	 * Returns zero back pressure until the buffer is full, then it returns a
1: 	 * fixed value
1: 	 */
1: 	ON_FULL_FIXED {
1: 		@Override
1: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> PushbackPolicy<T, U> getPolicy(long value) {
1: 			return q -> q.remainingCapacity() == 0 ? value : 0;
1: 		}
1: 	},
1: 	/**
1: 	 * Returns zero back pressure until the buffer is full, then it returns an
1: 	 * exponentially increasing amount, starting with the supplied value and
1: 	 * doubling it each time. Once the buffer is no longer full the back
1: 	 * pressure returns to zero.
1: 	 */
1: 	ON_FULL_EXPONENTIAL {
1: 		@Override
1: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> PushbackPolicy<T, U> getPolicy(long value) {
1: 			AtomicInteger backoffCount = new AtomicInteger(0);
1: 			return q -> {
1: 				if (q.remainingCapacity() == 0) {
1: 					return value << backoffCount.getAndIncrement();
1: 				}
1: 				backoffCount.set(0);
1: 				return 0;
1: 			};
1: 
1: 		}
1: 	},
1: 	/**
1: 	 * Returns zero back pressure when the buffer is empty, then it returns a
1: 	 * linearly increasing amount of back pressure based on how full the buffer
1: 	 * is. The maximum value will be returned when the buffer is full.
1: 	 */
1: 	LINEAR {
1: 		@Override
1: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> PushbackPolicy<T, U> getPolicy(long value) {
1: 			return q -> {
1: 				long remainingCapacity = q.remainingCapacity();
1: 				long used = q.size();
1: 				return (value * used) / (used + remainingCapacity);
1: 			};
1: 		}
1: 	};
1: 
1: 	/**
1: 	 * Create a {@link PushbackPolicy} instance configured with a base back
1: 	 * pressure time in nanoseconds
1: 	 * 
1: 	 * The actual backpressure returned will vary based on the selected
1: 	 * implementation, the base value, and the state of the buffer.
1: 	 * 
1: 	 * @param value
1: 	 * @return A {@link PushbackPolicy} to use
1: 	 */
1: 	public abstract <T, U extends BlockingQueue<PushEvent<? extends T>>> PushbackPolicy<T, U> getPolicy(long value);
1: 
1: }
============================================================================