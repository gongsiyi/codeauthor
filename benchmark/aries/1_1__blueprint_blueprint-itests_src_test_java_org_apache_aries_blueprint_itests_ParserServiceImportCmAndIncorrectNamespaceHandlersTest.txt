1:3746469: /**
1:3746469:  * Licensed to the Apache Software Foundation (ASF) under one
1:3746469:  * or more contributor license agreements.  See the NOTICE file
1:3746469:  * distributed with this work for additional information
1:3746469:  * regarding copyright ownership.  The ASF licenses this file
1:3746469:  * to you under the Apache License, Version 2.0 (the
1:3746469:  * "License"); you may not use this file except in compliance
1:3746469:  * with the License.  You may obtain a copy of the License at
1:3746469:  *
1:3746469:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3746469:  *
1:3746469:  * Unless required by applicable law or agreed to in writing,
1:3746469:  * software distributed under the License is distributed on an
1:3746469:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3746469:  * KIND, either express or implied.  See the License for the
1:3746469:  * specific language governing permissions and limitations
1:3746469:  * under the License.
1:3746469:  */
1:3746469: package org.apache.aries.blueprint.itests;
1:3746469: 
1:3746469: import java.io.InputStream;
1:3746469: import java.net.URL;
1:3746469: import java.util.concurrent.CountDownLatch;
1:3746469: import java.util.concurrent.TimeUnit;
1:3746469: import java.util.concurrent.atomic.AtomicBoolean;
1:3746469: 
1:3746469: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:3746469: import org.apache.aries.blueprint.itests.cm.handler.IncorrectNamespaceHandler;
1:3746469: import org.apache.aries.blueprint.services.ParserService;
1:3746469: import org.junit.Test;
1:3746469: import org.ops4j.pax.exam.Option;
1:3746469: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:3746469: import org.osgi.framework.Constants;
1:3746469: import org.osgi.framework.ServiceRegistration;
1:3746469: import org.osgi.service.blueprint.container.BlueprintEvent;
1:3746469: import org.osgi.service.blueprint.container.BlueprintListener;
1:3746469: 
1:3746469: import static org.apache.aries.blueprint.itests.Helper.blueprintBundles;
1:3746469: import static org.junit.Assert.assertFalse;
1:3746469: import static org.junit.Assert.assertNotNull;
1:3746469: import static org.junit.Assert.assertTrue;
1:3746469: import static org.ops4j.pax.exam.CoreOptions.*;
1:3746469: 
1:3746469: public class ParserServiceImportCmAndIncorrectNamespaceHandlersTest extends AbstractBlueprintIntegrationTest {
1:3746469: 
1:3746469:     private static final String NS_HANDLER_BUNDLE = "org.apache.aries.blueprint.incorrect";
1:3746469:     private static final String TEST_BUNDLE = "org.apache.aries.blueprint.aries1503.test";
1:3746469: 
1:3746469:     @org.ops4j.pax.exam.Configuration
1:3746469:     public Option[] config() {
1:3746469:         return new Option[] {
1:3746469:                 baseOptions(),
1:3746469:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:3746469:                 blueprintBundles(),
1:3746469:                 keepCaches(),
1:3746469:                 streamBundle(createIncorrectNamespaceHandlerBundle()),
1:3746469:                 streamBundle(createTestBundle())
1:3746469:         };
1:3746469:     }
1:3746469: 
1:3746469:     private InputStream createIncorrectNamespaceHandlerBundle() {
1:3746469:         return TinyBundles.bundle()
1:3746469:                 .add(IncorrectNamespaceHandler.class)
1:3746469:                 .add("OSGI-INF/blueprint/incorrect.xml", getResource("incorrect.xml"))
1:3746469:                 .add("incorrect-1.0.0.xsd", getResource("incorrect-1.0.0.xsd"))
1:3746469:                 .add("incorrect-1.1.0.xsd", getResource("incorrect-1.1.0.xsd"))
1:3746469:                 .set(Constants.BUNDLE_SYMBOLICNAME, NS_HANDLER_BUNDLE)
1:3746469:                 .set(Constants.EXPORT_PACKAGE, IncorrectNamespaceHandler.class.getPackage().getName())
1:3746469:                 .set(Constants.IMPORT_PACKAGE, "org.apache.aries.blueprint,org.apache.aries.blueprint.ext," +
1:3746469:                         "org.apache.aries.blueprint.mutable," +
1:3746469:                         "org.apache.aries.blueprint.compendium.cm," +
1:3746469:                         "org.osgi.service.blueprint.reflect,org.w3c.dom")
1:3746469:                 .build(TinyBundles.withBnd());
1:3746469:     }
1:3746469: 
1:3746469:     private InputStream createTestBundle() {
1:3746469:         return TinyBundles.bundle()
1:3746469:                 .add("OSGI-INF/blueprint/ImportIncorrectAndCmNamespacesTest.xml", getResource("ImportIncorrectAndCmNamespacesTest.xml"))
1:3746469:                 .set(Constants.BUNDLE_SYMBOLICNAME, TEST_BUNDLE)
1:3746469:                 .set(Constants.IMPORT_PACKAGE, IncorrectNamespaceHandler.class.getPackage().getName()
1:3746469:                         + ",org.apache.aries.blueprint,org.apache.aries.blueprint.ext," +
1:3746469:                         "org.apache.aries.blueprint.mutable," +
1:3746469:                         "org.osgi.service.blueprint.reflect,org.w3c.dom")
1:3746469:                 .build(TinyBundles.withBnd());
1:3746469:     }
1:3746469: 
1:3746469:     @Test
1:3746469:     public void testXSDImports() throws Exception {
1:3746469:         waitForConfig();
1:3746469:         ParserService parserService = context().getService(ParserService.class);
1:3746469:         URL blueprintXML = context().getBundleByName(TEST_BUNDLE).getEntry("OSGI-INF/blueprint/ImportIncorrectAndCmNamespacesTest.xml");
1:3746469:         ComponentDefinitionRegistry cdr = parserService.parse(blueprintXML, context().getBundleByName(TEST_BUNDLE));
1:3746469:         assertNotNull(cdr.getComponentDefinition("aries-1503"));
1:3746469:     }
1:3746469: 
1:3746469:     private void waitForConfig() throws InterruptedException {
1:3746469:         final CountDownLatch ready = new CountDownLatch(2);
1:3746469:         final AtomicBoolean failure = new AtomicBoolean(false);
1:3746469:         @SuppressWarnings("rawtypes")
1:3746469:         ServiceRegistration reg = context().registerService(
1:3746469:                 BlueprintListener.class,
1:3746469:                 new BlueprintListener() {
1:3746469:                     @Override
1:3746469:                     public void blueprintEvent(BlueprintEvent event) {
1:3746469:                         if (NS_HANDLER_BUNDLE.equals(event.getBundle().getSymbolicName())
1:3746469:                                 && BlueprintEvent.CREATED == event.getType()) {
1:3746469:                             ready.countDown();
1:3746469:                         } else if (TEST_BUNDLE.equals(event.getBundle().getSymbolicName())
1:3746469:                                 && (BlueprintEvent.CREATED == event.getType() || BlueprintEvent.FAILURE == event.getType())) {
1:3746469:                             ready.countDown();
1:3746469:                             if (BlueprintEvent.FAILURE == event.getType()) {
1:3746469:                                 failure.set(true);
1:3746469:                             }
1:3746469:                         }
1:3746469:                     }
1:3746469:                 },
1:3746469:                 null);
1:3746469:         try {
1:3746469:             assertTrue(ready.await(3000, TimeUnit.MILLISECONDS));
1:3746469:             assertFalse("org.apache.aries.blueprint.aries1503.test bundle should successfully start Blueprint container",
1:3746469:                     failure.get());
1:3746469:         } finally {
1:3746469:             reg.unregister();
1:3746469:         }
1:3746469:     }
1:3746469: 
1:3746469: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:3746469
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.apache.aries.blueprint.itests.cm.handler.IncorrectNamespaceHandler;
1: import org.apache.aries.blueprint.services.ParserService;
1: import org.junit.Test;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.blueprint.container.BlueprintEvent;
1: import org.osgi.service.blueprint.container.BlueprintListener;
1: 
1: import static org.apache.aries.blueprint.itests.Helper.blueprintBundles;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.ops4j.pax.exam.CoreOptions.*;
1: 
1: public class ParserServiceImportCmAndIncorrectNamespaceHandlersTest extends AbstractBlueprintIntegrationTest {
1: 
1:     private static final String NS_HANDLER_BUNDLE = "org.apache.aries.blueprint.incorrect";
1:     private static final String TEST_BUNDLE = "org.apache.aries.blueprint.aries1503.test";
1: 
1:     @org.ops4j.pax.exam.Configuration
1:     public Option[] config() {
1:         return new Option[] {
1:                 baseOptions(),
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:                 blueprintBundles(),
1:                 keepCaches(),
1:                 streamBundle(createIncorrectNamespaceHandlerBundle()),
1:                 streamBundle(createTestBundle())
1:         };
1:     }
1: 
1:     private InputStream createIncorrectNamespaceHandlerBundle() {
1:         return TinyBundles.bundle()
1:                 .add(IncorrectNamespaceHandler.class)
1:                 .add("OSGI-INF/blueprint/incorrect.xml", getResource("incorrect.xml"))
1:                 .add("incorrect-1.0.0.xsd", getResource("incorrect-1.0.0.xsd"))
1:                 .add("incorrect-1.1.0.xsd", getResource("incorrect-1.1.0.xsd"))
1:                 .set(Constants.BUNDLE_SYMBOLICNAME, NS_HANDLER_BUNDLE)
1:                 .set(Constants.EXPORT_PACKAGE, IncorrectNamespaceHandler.class.getPackage().getName())
1:                 .set(Constants.IMPORT_PACKAGE, "org.apache.aries.blueprint,org.apache.aries.blueprint.ext," +
1:                         "org.apache.aries.blueprint.mutable," +
1:                         "org.apache.aries.blueprint.compendium.cm," +
1:                         "org.osgi.service.blueprint.reflect,org.w3c.dom")
1:                 .build(TinyBundles.withBnd());
1:     }
1: 
1:     private InputStream createTestBundle() {
1:         return TinyBundles.bundle()
1:                 .add("OSGI-INF/blueprint/ImportIncorrectAndCmNamespacesTest.xml", getResource("ImportIncorrectAndCmNamespacesTest.xml"))
1:                 .set(Constants.BUNDLE_SYMBOLICNAME, TEST_BUNDLE)
1:                 .set(Constants.IMPORT_PACKAGE, IncorrectNamespaceHandler.class.getPackage().getName()
1:                         + ",org.apache.aries.blueprint,org.apache.aries.blueprint.ext," +
1:                         "org.apache.aries.blueprint.mutable," +
1:                         "org.osgi.service.blueprint.reflect,org.w3c.dom")
1:                 .build(TinyBundles.withBnd());
1:     }
1: 
1:     @Test
1:     public void testXSDImports() throws Exception {
1:         waitForConfig();
1:         ParserService parserService = context().getService(ParserService.class);
1:         URL blueprintXML = context().getBundleByName(TEST_BUNDLE).getEntry("OSGI-INF/blueprint/ImportIncorrectAndCmNamespacesTest.xml");
1:         ComponentDefinitionRegistry cdr = parserService.parse(blueprintXML, context().getBundleByName(TEST_BUNDLE));
1:         assertNotNull(cdr.getComponentDefinition("aries-1503"));
1:     }
1: 
1:     private void waitForConfig() throws InterruptedException {
1:         final CountDownLatch ready = new CountDownLatch(2);
1:         final AtomicBoolean failure = new AtomicBoolean(false);
1:         @SuppressWarnings("rawtypes")
1:         ServiceRegistration reg = context().registerService(
1:                 BlueprintListener.class,
1:                 new BlueprintListener() {
1:                     @Override
1:                     public void blueprintEvent(BlueprintEvent event) {
1:                         if (NS_HANDLER_BUNDLE.equals(event.getBundle().getSymbolicName())
1:                                 && BlueprintEvent.CREATED == event.getType()) {
1:                             ready.countDown();
1:                         } else if (TEST_BUNDLE.equals(event.getBundle().getSymbolicName())
1:                                 && (BlueprintEvent.CREATED == event.getType() || BlueprintEvent.FAILURE == event.getType())) {
1:                             ready.countDown();
1:                             if (BlueprintEvent.FAILURE == event.getType()) {
1:                                 failure.set(true);
1:                             }
1:                         }
1:                     }
1:                 },
1:                 null);
1:         try {
1:             assertTrue(ready.await(3000, TimeUnit.MILLISECONDS));
1:             assertFalse("org.apache.aries.blueprint.aries1503.test bundle should successfully start Blueprint container",
1:                     failure.get());
1:         } finally {
1:             reg.unregister();
1:         }
1:     }
1: 
1: }
============================================================================