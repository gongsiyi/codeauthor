1:b5b836a: /*
1:b5b836a:  * Licensed to the Apache Software Foundation (ASF) under one
1:b5b836a:  * or more contributor license agreements.  See the NOTICE file
1:b5b836a:  * distributed with this work for additional information
1:b5b836a:  * regarding copyright ownership.  The ASF licenses this file
1:b5b836a:  * to you under the Apache License, Version 2.0 (the
1:b5b836a:  * "License"); you may not use this file except in compliance
1:b5b836a:  * with the License.  You may obtain a copy of the License at
1:b5b836a:  *
1:b5b836a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b5b836a:  *
1:b5b836a:  * Unless required by applicable law or agreed to in writing,
1:b5b836a:  * software distributed under the License is distributed on an
1:b5b836a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b5b836a:  * KIND, either express or implied.  See the License for the
1:b5b836a:  * specific language governing permissions and limitations
1:b5b836a:  * under the License.
2:b5b836a:  */
1:b5b836a: package org.apache.aries.proxy.impl;
1:2e1b190: 
1:b5b836a: import java.math.BigDecimal;
3:b5b836a: 
1:b5b836a: import org.objectweb.asm.Opcodes;
1:b5b836a: import org.slf4j.Logger;
1:b5b836a: import org.slf4j.LoggerFactory;
1:b5b836a: 
1:b5b836a: public class ProxyUtils
1:b5b836a: {
1:9a9631e:   private static Logger LOGGER = LoggerFactory.getLogger(ProxyUtils.class);
1:9a9631e:   public static final int JAVA_CLASS_VERSION = new BigDecimal(System.getProperty("java.class.version")).intValue();
1:9a9631e:   private static int weavingJavaVersion = -1; // initialise an invalid number
1:9a9631e:   
1:9a9631e:   /**
1:9a9631e:    * Get the java version to be woven at.
1:9a9631e:    * @return
1:9a9631e:    */
1:9a9631e:   public static int getWeavingJavaVersion() {
1:9a9631e:     if (weavingJavaVersion == -1 ) {
1:9a9631e:     	//In order to avoid an inconsistent stack error the version of the woven byte code needs to match
1:9a9631e:     	//the level of byte codes in the original class
1:9a9631e:     	switch(JAVA_CLASS_VERSION) {
1:0737543: 			case Opcodes.V1_9:
1:0737543: 				LOGGER.debug("Weaving to Java 9");
1:0737543: 				weavingJavaVersion = Opcodes.V1_9;
1:0737543: 				break;
1:9a9631e:     		case Opcodes.V1_8:
1:9a9631e:     			LOGGER.debug("Weaving to Java 8");
1:9a9631e:     			weavingJavaVersion = Opcodes.V1_8;
1:9a9631e:     			break;
1:9a9631e:     		case Opcodes.V1_7:
1:9a9631e:     			LOGGER.debug("Weaving to Java 7");
1:9a9631e:     			weavingJavaVersion = Opcodes.V1_7;
1:9a9631e:     			break;
1:9a9631e:     		case Opcodes.V1_6:
1:9a9631e:     			LOGGER.debug("Weaving to Java 6");
1:9a9631e:     			weavingJavaVersion = Opcodes.V1_6;
1:9a9631e:     			break;
1:9a9631e:     		case Opcodes.V1_5:
1:9a9631e:     			LOGGER.debug("Weaving to Java 5");
1:9a9631e:     			weavingJavaVersion = Opcodes.V1_5;
1:9a9631e:     			break;
1:9a9631e:     		default:
1:9a9631e:     			//aries should work with Java 5 or above - also will highlight when a higher level (and unsupported) level of Java is released
1:9a9631e:     			throw new IllegalArgumentException("Invalid Java version " + JAVA_CLASS_VERSION);
1:9a9631e:     	}
1:9a9631e:     } 
1:9a9631e:     return weavingJavaVersion;
1:9a9631e:   } 
3:bd6c4a0: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0737543
/////////////////////////////////////////////////////////////////////////
1: 			case Opcodes.V1_9:
1: 				LOGGER.debug("Weaving to Java 9");
1: 				weavingJavaVersion = Opcodes.V1_9;
1: 				break;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9a9631e
/////////////////////////////////////////////////////////////////////////
1:   private static Logger LOGGER = LoggerFactory.getLogger(ProxyUtils.class);
1:   public static final int JAVA_CLASS_VERSION = new BigDecimal(System.getProperty("java.class.version")).intValue();
1:   private static int weavingJavaVersion = -1; // initialise an invalid number
1:   
1:   /**
1:    * Get the java version to be woven at.
1:    * @return
1:    */
1:   public static int getWeavingJavaVersion() {
1:     if (weavingJavaVersion == -1 ) {
1:     	//In order to avoid an inconsistent stack error the version of the woven byte code needs to match
1:     	//the level of byte codes in the original class
1:     	switch(JAVA_CLASS_VERSION) {
1:     		case Opcodes.V1_8:
1:     			LOGGER.debug("Weaving to Java 8");
1:     			weavingJavaVersion = Opcodes.V1_8;
1:     			break;
1:     		case Opcodes.V1_7:
1:     			LOGGER.debug("Weaving to Java 7");
1:     			weavingJavaVersion = Opcodes.V1_7;
1:     			break;
1:     		case Opcodes.V1_6:
1:     			LOGGER.debug("Weaving to Java 6");
1:     			weavingJavaVersion = Opcodes.V1_6;
1:     			break;
1:     		case Opcodes.V1_5:
1:     			LOGGER.debug("Weaving to Java 5");
1:     			weavingJavaVersion = Opcodes.V1_5;
1:     			break;
1:     		default:
1:     			//aries should work with Java 5 or above - also will highlight when a higher level (and unsupported) level of Java is released
1:     			throw new IllegalArgumentException("Invalid Java version " + JAVA_CLASS_VERSION);
1:     	}
1:     } 
1:     return weavingJavaVersion;
1:   } 
author:Emily Jiang
-------------------------------------------------------------------------------
commit:8fc6c7b
/////////////////////////////////////////////////////////////////////////
0:   public static final int JAVA_CLASS_VERSION = new BigDecimal(System.getProperty("java.class.version")).intValue();
/////////////////////////////////////////////////////////////////////////
0:       if (JAVA_CLASS_VERSION >= Opcodes.V1_7) {
0:       } else if (JAVA_CLASS_VERSION == Opcodes.V1_6){
0:       } else if (JAVA_CLASS_VERSION == Opcodes.V1_5) {
commit:df27618
/////////////////////////////////////////////////////////////////////////
0:       } else if (javaClassVersion == Opcodes.V1_6){
0:       } else if (javaClassVersion == Opcodes.V1_5) {
0:         LOGGER.debug("Weaving to Java 5");
0:         weavingJavaVersion = Opcodes.V1_5;
0:       } // no need to list all Opcodes as Aries should only work with java5 or above.
commit:bd6c4a0
/////////////////////////////////////////////////////////////////////////
0:   private static int weavingJavaVersion = -1; // initialise an invalid number
0:     if (weavingJavaVersion == -1 ) {
0:       if (javaClassVersion >= Opcodes.V1_7) {
0:         LOGGER.debug("Weaving to Java 7");
0:         weavingJavaVersion = Opcodes.V1_7;
0:       } else {
0:         LOGGER.debug("Weaving to Java 6");
0:         weavingJavaVersion = Opcodes.V1_6;
1:       }
1:     } 
0:     return weavingJavaVersion;
1:   } 
commit:2e1b190
/////////////////////////////////////////////////////////////////////////
0:   public static int javaClassVersion = new BigDecimal(System.getProperty("java.class.version")).intValue();
1:     
commit:b5b836a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl;
1: 
1: import java.math.BigDecimal;
1: 
1: import org.objectweb.asm.Opcodes;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class ProxyUtils
1: {
0:   private static Logger LOGGER = LoggerFactory.getLogger(ProxyUtils.class);
0:   /**
0:    * Get the java version to be woven at.
0:    * @return
1:    */
0:   public static int getWeavingJavaVersion() {
0:     int javaClassVersion = new BigDecimal(System.getProperty("java.class.version")).intValue();
0:     if (javaClassVersion >= Opcodes.V1_7) {
0:       LOGGER.debug("Weaving to Java 7");
0:       return Opcodes.V1_7;
0:     } else {
0:       LOGGER.debug("Weaving to Java 6");
0:       return Opcodes.V1_6;
0:     }
1:     
0:   }
0: }
============================================================================