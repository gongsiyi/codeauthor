1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.support.impl;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.EntityManager;
1:f29759b: import javax.transaction.Status;
1:2cfdf52: import javax.transaction.Transaction;
1:2cfdf52: import javax.transaction.TransactionManager;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.supplier.EmSupplier;
1:2cfdf52: import org.apache.aries.jpa.support.xa.impl.TransactionAttribute;
1:2cfdf52: import org.apache.aries.jpa.support.xa.impl.TransactionToken;
1:2cfdf52: import org.apache.aries.jpa.template.EmFunction;
1:2cfdf52: import org.apache.aries.jpa.template.TransactionType;
1:0d59ccb: import org.osgi.service.coordinator.Coordination;
1:0d59ccb: import org.osgi.service.coordinator.Coordinator;
1:2cfdf52: import org.slf4j.Logger;
1:2cfdf52: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: public class XAJpaTemplate extends AbstractJpaTemplate {
1:2cfdf52:     private static final Logger LOGGER = LoggerFactory.getLogger(XAJpaTemplate.class);
1:2cfdf52:     protected EmSupplier emSupplier;
1:2cfdf52:     protected TransactionManager tm;
1:0d59ccb:     private Coordinator coordinator;
1:2cfdf52: 
1:0d59ccb:     public XAJpaTemplate(EmSupplier emSupplier, TransactionManager tm, Coordinator coordinator) {
1:2cfdf52:         this.emSupplier = emSupplier;
1:2cfdf52:         this.tm = tm;
1:0d59ccb:         this.coordinator = coordinator;
1:da68ac2:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public <R> R txExpr(TransactionType type, EmFunction<R> code) {
1:2cfdf52:         EntityManager em = null;
1:2cfdf52:         TransactionToken tranToken = null;
1:2cfdf52:         TransactionAttribute ta = TransactionAttribute.fromType(type);
1:0d59ccb:         Coordination coord = null;
2:2cfdf52:         try {
1:2cfdf52:             tranToken = ta.begin(tm);
1:0d59ccb:             coord = coordinator.begin(this.getClass().getName(), 0);
1:2cfdf52:             em = emSupplier.get();
1:f29759b:             if (tm.getStatus() != Status.STATUS_NO_TRANSACTION) {
1:f29759b:                 em.joinTransaction();
1:f29759b:             }
1:2cfdf52:             R result = (R)code.apply(em);
1:ec3ea65:             safeFinish(tranToken, ta, coord);
1:2cfdf52:             return result;
1:ec3ea65:         } catch (Exception ex) {
1:ec3ea65:             safeRollback(tranToken, ta, coord, ex);
1:da68ac2:             throw wrapThrowable(ex, "Exception occured in transactional code");
1:ec3ea65:         } catch (Error ex) { // NOSONAR
1:ec3ea65:             safeRollback(tranToken, ta, coord, ex);
1:ec3ea65:             throw ex;
4:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     private static void close(Coordination coord) {
1:ec3ea65:         if (coord != null) {
1:ec3ea65:             coord.end();
1:ec3ea65:         }
1:ec3ea65:     }
1:ec3ea65: 
1:ec3ea65:     private void safeFinish(TransactionToken tranToken, TransactionAttribute ta, Coordination coord) {
1:ec3ea65:         try {
1:ec3ea65:             ta.finish(tm, tranToken);
1:ec3ea65:         } catch (Exception e) {
1:ec3ea65:             // We are throwing an exception, so we don't error it out
1:ec3ea65:             LOGGER.debug("Exception during finish of transaction", e);
1:ec3ea65:             throw wrapThrowable(e, "Exception during finish of transaction");
1:ec3ea65:         }
1:ec3ea65:         close(coord);
1:ec3ea65:     }
1:ec3ea65: 
1:ec3ea65:     private void safeRollback(TransactionToken token, TransactionAttribute ta, Coordination coord, Throwable ex) {
1:2cfdf52:         try {
1:2cfdf52:             Transaction tran = token.getActiveTransaction();
1:ec3ea65:             if (tran != null && shouldRollback(ex)) {
1:ec3ea65:                 tran.setRollbackOnly();
1:2cfdf52:             }
2:2cfdf52:         } catch (Exception e) {
1:2cfdf52:             // we do not throw the exception since there already is one, but we
1:2cfdf52:             // need to log it
1:c845cbf:             LOGGER.warn("Exception during transaction rollback", e);
1:2cfdf52:         }
1:ec3ea65:         safeFinish(token, ta, coord);
1:ec3ea65:     }
1:ec3ea65: 
1:ec3ea65:     private static boolean shouldRollback(Throwable ex) {
1:ec3ea65:         return ex instanceof RuntimeException || ex instanceof Error;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:             safeFinish(tranToken, ta, coord);
1:         } catch (Exception ex) {
1:             safeRollback(tranToken, ta, coord, ex);
1:         } catch (Error ex) { // NOSONAR
1:             safeRollback(tranToken, ta, coord, ex);
1:             throw ex;
1:     private static void close(Coordination coord) {
1:         if (coord != null) {
1:             coord.end();
1:         }
1:     }
1: 
1:     private void safeFinish(TransactionToken tranToken, TransactionAttribute ta, Coordination coord) {
1:         try {
1:             ta.finish(tm, tranToken);
1:         } catch (Exception e) {
1:             // We are throwing an exception, so we don't error it out
1:             LOGGER.debug("Exception during finish of transaction", e);
1:             throw wrapThrowable(e, "Exception during finish of transaction");
1:         }
1:         close(coord);
1:     }
1: 
1:     private void safeRollback(TransactionToken token, TransactionAttribute ta, Coordination coord, Throwable ex) {
1:             if (tran != null && shouldRollback(ex)) {
1:                 tran.setRollbackOnly();
1:         safeFinish(token, ta, coord);
1:     }
1: 
1:     private static boolean shouldRollback(Throwable ex) {
1:         return ex instanceof RuntimeException || ex instanceof Error;
commit:253404e
/////////////////////////////////////////////////////////////////////////
0:                 if (coord != null)
0:                     coord.end();
commit:da68ac2
/////////////////////////////////////////////////////////////////////////
0:             if (ex instanceof Error) {
0:                 throw (Error)ex;
1:             }
1:             throw wrapThrowable(ex, "Exception occured in transactional code");
0:                 throw wrapThrowable(e, "Exception during finish of transaction");
commit:c845cbf
/////////////////////////////////////////////////////////////////////////
0:                 LOGGER.debug("Exception during finish of transaction", e);
0:             } finally {
0:                 coord.end();
/////////////////////////////////////////////////////////////////////////
1:             LOGGER.warn("Exception during transaction rollback", e);
commit:65669d0
/////////////////////////////////////////////////////////////////////////
0:             throw wrapThrowable(ex);
commit:f29759b
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.Status;
/////////////////////////////////////////////////////////////////////////
1:             if (tm.getStatus() != Status.STATUS_NO_TRANSACTION) {
1:                 em.joinTransaction();
1:             }
commit:96e072c
/////////////////////////////////////////////////////////////////////////
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.coordinator.Coordinator;
/////////////////////////////////////////////////////////////////////////
1:     private Coordinator coordinator;
1:     public XAJpaTemplate(EmSupplier emSupplier, TransactionManager tm, Coordinator coordinator) {
1:         this.coordinator = coordinator;
/////////////////////////////////////////////////////////////////////////
1:         Coordination coord = null;
1:             coord = coordinator.begin(this.getClass().getName(), 0);
/////////////////////////////////////////////////////////////////////////
0:                 coord.end();
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.support.impl;
1: 
1: import javax.persistence.EntityManager;
1: import javax.transaction.Transaction;
1: import javax.transaction.TransactionManager;
1: 
1: import org.apache.aries.jpa.supplier.EmSupplier;
1: import org.apache.aries.jpa.support.xa.impl.TransactionAttribute;
1: import org.apache.aries.jpa.support.xa.impl.TransactionToken;
1: import org.apache.aries.jpa.template.EmFunction;
1: import org.apache.aries.jpa.template.TransactionType;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class XAJpaTemplate extends AbstractJpaTemplate {
1:     private static final Logger LOGGER = LoggerFactory.getLogger(XAJpaTemplate.class);
1:     protected EmSupplier emSupplier;
1:     protected TransactionManager tm;
1: 
0:     public XAJpaTemplate(EmSupplier emSupplier, TransactionManager tm) {
1:         this.emSupplier = emSupplier;
1:         this.tm = tm;
1:     }
1: 
1:     @Override
1:     public <R> R txExpr(TransactionType type, EmFunction<R> code) {
1:         EntityManager em = null;
1:         TransactionToken tranToken = null;
1:         TransactionAttribute ta = TransactionAttribute.fromType(type);
1:         try {
1:             tranToken = ta.begin(tm);
0:             emSupplier.preCall();
1:             em = emSupplier.get();
0:             em.joinTransaction();
1:             R result = (R)code.apply(em);
1:             return result;
0:         } catch (Throwable ex) {
0:             safeRollback(tranToken, ex);
0:             throw new RuntimeException(ex);
0:         } finally {
1:             try {
0:                 ta.finish(tm, tranToken);
0:                 emSupplier.postCall();
1:             } catch (Exception e) {
0:                 // We are throwing an exception, so we don't error it out
0:                 LOGGER.debug("exception.during.tx.finish", e);
0:                 throw new RuntimeException("Exception during finish of transaction", e);
1:             }
1:         }
1:     }
1: 
0:     private void safeRollback(TransactionToken token, Throwable ex) {
1:         try {
1:             Transaction tran = token.getActiveTransaction();
0:             if (tran != null) {
0:                 if (ex instanceof RuntimeException || ex instanceof Error) {
0:                     tran.setRollbackOnly();
0:                 } else {
0:                     // declared exception, we don't set rollback
1:                 }
1:             }
1:         } catch (Exception e) {
1:             // we do not throw the exception since there already is one, but we
1:             // need to log it
0:             LOGGER.warn("exception.during.tx.cleanup", e);
1:         }
1:     }
1: 
1: }
============================================================================