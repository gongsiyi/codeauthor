1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.whiteboard.integration;
1:fdf3952: 
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: import javax.management.ObjectName;
1:fdf3952: 
1:fdf3952: import junit.framework.TestCase;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.whiteboard.integration.helper.IntegrationTestBase;
1:fdf3952: import org.apache.aries.jmx.whiteboard.integration.helper.TestClass;
1:fdf3952: import org.apache.aries.jmx.whiteboard.integration.helper.TestClassMBean;
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.junit.runner.RunWith;
1:29dd67e: import org.ops4j.pax.exam.junit.PaxExam;
1:29dd67e: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:29dd67e: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:fdf3952: import org.osgi.framework.ServiceRegistration;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * The <code>MBeanTest</code> tests MBean registration with MBean Servers
1:fdf3952:  */
1:29dd67e: @RunWith(PaxExam.class)
1:29dd67e: @ExamReactorStrategy(PerClass.class)
1:fdf3952: public class MBeanServerTest extends IntegrationTestBase {
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void test_MServerBean() throws Exception {
1:fdf3952:         final String instanceName = "simple.test.instance";
1:fdf3952:         final String objectNameString = "domain:instance=" + instanceName;
1:fdf3952:         final ObjectName objectName = new ObjectName(objectNameString);
1:fdf3952:         final TestClass testInstance = new TestClass(instanceName);
1:fdf3952: 
1:fdf3952:         // get or create the dynamic MBean Server
1:fdf3952:         final MBeanServer server = getOrCreateMBeanServer();
1:fdf3952: 
1:fdf3952:         // MBean server not registered as service, unknown object
1:fdf3952:         assertNotRegistered(server, objectName);
1:fdf3952: 
1:fdf3952:         // expect the MBean to be registered with the static server
1:fdf3952:         final ServiceRegistration mBeanReg = registerService(
1:fdf3952:             TestClassMBean.class.getName(), testInstance, objectNameString);
1:fdf3952: 
1:fdf3952:         // MBean server not registered, expect object to not be known
1:fdf3952:         assertNotRegistered(server, objectName);
1:fdf3952: 
1:fdf3952:         // register MBean server, expect MBean registered
1:fdf3952:         ServiceRegistration mBeanServerReg = registerMBeanServer(server);
1:fdf3952:         assertRegistered(server, objectName);
1:fdf3952: 
1:fdf3952:         // expect MBean to return expected value
1:fdf3952:         TestCase.assertEquals(instanceName,
1:fdf3952:             server.getAttribute(objectName, "InstanceName"));
1:fdf3952: 
1:fdf3952:         // unregister MBean server, expect MBean to be unregistered
1:fdf3952:         mBeanServerReg.unregister();
1:fdf3952:         assertNotRegistered(server, objectName);
1:fdf3952: 
1:fdf3952:         // unregister MBean, expect to not be registered any more
1:fdf3952:         mBeanReg.unregister();
1:fdf3952:         assertNotRegistered(server, objectName);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:29dd67e
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.whiteboard.integration;
1: 
1: import javax.management.MBeanServer;
1: import javax.management.ObjectName;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.aries.jmx.whiteboard.integration.helper.IntegrationTestBase;
1: import org.apache.aries.jmx.whiteboard.integration.helper.TestClass;
1: import org.apache.aries.jmx.whiteboard.integration.helper.TestClassMBean;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.ServiceRegistration;
1: 
1: /**
1:  * The <code>MBeanTest</code> tests MBean registration with MBean Servers
1:  */
0: @RunWith(JUnit4TestRunner.class)
1: public class MBeanServerTest extends IntegrationTestBase {
1: 
1:     @Test
1:     public void test_MServerBean() throws Exception {
1:         final String instanceName = "simple.test.instance";
1:         final String objectNameString = "domain:instance=" + instanceName;
1:         final ObjectName objectName = new ObjectName(objectNameString);
1:         final TestClass testInstance = new TestClass(instanceName);
1: 
1:         // get or create the dynamic MBean Server
1:         final MBeanServer server = getOrCreateMBeanServer();
1: 
1:         // MBean server not registered as service, unknown object
1:         assertNotRegistered(server, objectName);
1: 
1:         // expect the MBean to be registered with the static server
1:         final ServiceRegistration mBeanReg = registerService(
1:             TestClassMBean.class.getName(), testInstance, objectNameString);
1: 
1:         // MBean server not registered, expect object to not be known
1:         assertNotRegistered(server, objectName);
1: 
1:         // register MBean server, expect MBean registered
1:         ServiceRegistration mBeanServerReg = registerMBeanServer(server);
1:         assertRegistered(server, objectName);
1: 
1:         // expect MBean to return expected value
1:         TestCase.assertEquals(instanceName,
1:             server.getAttribute(objectName, "InstanceName"));
1: 
1:         // unregister MBean server, expect MBean to be unregistered
1:         mBeanServerReg.unregister();
1:         assertNotRegistered(server, objectName);
1: 
1:         // unregister MBean, expect to not be registered any more
1:         mBeanReg.unregister();
1:         assertNotRegistered(server, objectName);
1:     }
1: 
1: }
============================================================================