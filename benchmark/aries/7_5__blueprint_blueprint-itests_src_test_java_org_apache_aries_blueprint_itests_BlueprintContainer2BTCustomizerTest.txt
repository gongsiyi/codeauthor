1:2d9e4c5: /*
1:2d9e4c5:  * Licensed to the Apache Software Foundation (ASF) under one
1:2d9e4c5:  * or more contributor license agreements.  See the NOTICE file
1:2d9e4c5:  * distributed with this work for additional information
1:2d9e4c5:  * regarding copyright ownership.  The ASF licenses this file
1:2d9e4c5:  * to you under the Apache License, Version 2.0 (the
1:2d9e4c5:  * "License"); you may not use this file except in compliance
1:2d9e4c5:  * with the License.  You may obtain a copy of the License at
1:2d9e4c5:  *
1:2d9e4c5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2d9e4c5:  *
1:2d9e4c5:  * Unless required by applicable law or agreed to in writing,
1:2d9e4c5:  * software distributed under the License is distributed on an
1:2d9e4c5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2d9e4c5:  * KIND, either express or implied.  See the License for the
1:2d9e4c5:  * specific language governing permissions and limitations
1:2d9e4c5:  * under the License.
1:2d9e4c5:  */
1:2d9e4c5: package org.apache.aries.blueprint.itests;
4:d251156: 
1:86224ba: import org.apache.aries.itest.RichBundleContext;
1:d251156: import org.junit.Ignore;
1:2d9e4c5: import org.junit.Test;
1:2d9e4c5: import org.junit.runner.RunWith;
1:d251156: import org.ops4j.pax.exam.Configuration;
1:2d9e4c5: import org.ops4j.pax.exam.Option;
1:d251156: import org.ops4j.pax.exam.junit.PaxExam;
1:2d9e4c5: import org.osgi.framework.Bundle;
1:2d9e4c5: import org.osgi.framework.BundleContext;
1:2d9e4c5: import org.osgi.service.framework.CompositeBundle;
1:d251156: 
1:2d9e4c5: /**
1:2d9e4c5:  * This test is based on the BlueprintContainerBTCustomizerTest.  but this test starts the
1:2d9e4c5:  * blueprint sample before the blueprint bundle is started so going a slightly 
1:2d9e4c5:  * different code path
1:2d9e4c5:  *
1:2d9e4c5:  */
1:d251156: @SuppressWarnings("deprecation")
1:d251156: @RunWith(PaxExam.class)
1:370ce47: public class BlueprintContainer2BTCustomizerTest extends BaseBlueprintContainerBTCustomizerTest {
1:d251156: 
1:354f309: 	@Test
1:d251156:     @Ignore // This test crashes the vm when run from maven. It works fine when run from eclipse
1:2d9e4c5:     public void test() throws Exception {
1:354f309:         CompositeBundle cb = createCompositeBundle();
1:d251156:         BundleContext compositeBundleContext = cb.getCompositeFramework().getBundleContext();
1:bc2c036:         Bundle testBundle = installBundle(compositeBundleContext, sampleBundleOption().getURL());
1:354f309:         Bundle configAdminBundle = installBundle(compositeBundleContext, configAdminOption().getURL());
1:d251156:         
1:d251156:         // start the composite bundle, config admin then the blueprint sample
1:d251156:         cb.start();
1:d251156:         configAdminBundle.start();
1:d251156:         // create a config to check the property placeholder
1:d251156:         applyCommonConfiguration(compositeBundleContext);
1:bc2c036:         testBundle.start();
1:d251156: 
1:d251156:         startBlueprintBundles();
1:d251156: 
1:d251156:         // do the test
1:bc2c036:         Helper.testBlueprintContainer(new RichBundleContext(compositeBundleContext), testBundle);
1:d251156:     }
1:d251156: 
1:d251156:     @Configuration
1:d251156:     public Option[] configuration() {
1:d251156:         return new Option[] {
1:d251156:             baseOptions(),
1:d251156:             Helper.blueprintBundles(false)
1:d251156:         };
3:2d9e4c5:     }
1:d251156: 
1:2d9e4c5: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:bc2c036
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Bundle testBundle = installBundle(compositeBundleContext, sampleBundleOption().getURL());
/////////////////////////////////////////////////////////////////////////
1:         testBundle.start();
1:         Helper.testBlueprintContainer(new RichBundleContext(compositeBundleContext), testBundle);
commit:354f309
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	@Test
1:         CompositeBundle cb = createCompositeBundle();
0:         Bundle bundle = installBundle(compositeBundleContext, testBundleOption().getURL());
1:         Bundle configAdminBundle = installBundle(compositeBundleContext, configAdminOption().getURL());
/////////////////////////////////////////////////////////////////////////
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.junit.Ignore;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
0: import org.osgi.framework.BundleException;
1: @SuppressWarnings("deprecation")
1: @RunWith(PaxExam.class)
0:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:     @Ignore // This test crashes the vm when run from maven. It works fine when run from eclipse
0:         if (sr == null) {
0:             return;
1: 
0:         // install blueprint.sample into the composite context
0:         CompositeBundleFactory cbf = (CompositeBundleFactory)bundleContext.getService(sr);
1:         
0:         Map<String, String> frameworkConfig = new HashMap<String, String>();
0:         // turn on the line below to enable telnet localhost 10000 to the child framework osgi console
0:         // frameworkConfig.put("osgi.console", "10000");
1:         
0:         // construct composite bundle information
0:         Map<String, String> compositeManifest = getCompositeManifest();
1:         
0:         CompositeBundle cb = cbf.installCompositeBundle(frameworkConfig, "test-composite", compositeManifest);
1: 
1:         BundleContext compositeBundleContext = cb.getCompositeFramework().getBundleContext();
0:         Bundle bundle = installTestBundle(compositeBundleContext);
0:         assertNotNull(bundle);
0:         // install and start the cfg admin bundle in the isolated framework
0:         Bundle configAdminBundle = installConfigurationAdmin(compositeBundleContext);
0:         assertNotNull(configAdminBundle);
1:         
1:         // start the composite bundle, config admin then the blueprint sample
1:         cb.start();
1:         configAdminBundle.start();
1:         // create a config to check the property placeholder
1:         applyCommonConfiguration(compositeBundleContext);
0:         bundle.start();
1: 
1:         startBlueprintBundles();
1: 
1:         // do the test
0:         Helper.testBlueprintContainer(new RichBundleContext(compositeBundleContext), bundle);
1:         
0:         // unget the service
0:         bundleContext.ungetService(sr);
0:     // start the blueprint bundle and it should detect the previously started blueprint sample
0:     private void startBlueprintBundles() throws BundleException, InterruptedException {
0:         context().getBundleByName("org.apache.aries.blueprint.core").start();
0:         context().getBundleByName("org.apache.aries.blueprint.cm").start();
0:         Thread.sleep(2000);
1:     }
1: 
1:     @Configuration
1:     public Option[] configuration() {
1:         return new Option[] {
1:             baseOptions(),
1:             Helper.blueprintBundles(false)
1:         };
commit:7647010
/////////////////////////////////////////////////////////////////////////
0:             Bundle blueprintBundle = context().getBundleByName("org.apache.aries.blueprint.core");
0:             Bundle blueprintCMBundle = context().getBundleByName("org.apache.aries.blueprint.cm");
0:             blueprintCMBundle.start();
0:             
0:             
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:370ce47
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class BlueprintContainer2BTCustomizerTest extends BaseBlueprintContainerBTCustomizerTest {
/////////////////////////////////////////////////////////////////////////
0:             Map<String, String> compositeManifest = getCompositeManifest();
/////////////////////////////////////////////////////////////////////////
0:             // install and start the cfg admin bundle in the isolated framework
0:             Bundle cfgAdminBundle = installConfigurationAdmin(compositeBundleContext);
0:             assertNotNull(cfgAdminBundle);            
0:             // start the composite bundle, the config admin then the blueprint sample
0:             cfgAdminBundle.start();         
0:             // create a config to check the property placeholder
0:             applyCommonConfiguration(compositeBundleContext);
/////////////////////////////////////////////////////////////////////////
0:             //vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"),
commit:b13e703
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
/////////////////////////////////////////////////////////////////////////
0: //            vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"),
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.itest.AbstractIntegrationTest;
1: import org.apache.aries.itest.RichBundleContext;
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
0: 
/////////////////////////////////////////////////////////////////////////
0:         ConfigurationAdmin ca = context().getService(ConfigurationAdmin.class);        
/////////////////////////////////////////////////////////////////////////
0:             MavenArtifactProvisionOption mapo = mavenBundleInTest(getClass().getClassLoader(), "org.apache.aries.blueprint", "org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
0:             Bundle blueprintBundle = context().getBundleByName("org.apache.aries.blueprint");
0:             Helper.testBlueprintContainer(new RichBundleContext(compositeBundleContext), bundle);
/////////////////////////////////////////////////////////////////////////
0:         return testOptions(
0:             paxLogging("DEBUG"),
0:             Helper.blueprintBundles(false),
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:             mavenBundle("asm", "asm-all"),
commit:ed33b7d
/////////////////////////////////////////////////////////////////////////
0:             compositeManifest.put(Constants.IMPORT_PACKAGE, "org.osgi.service.blueprint;version=\"[1.0.0,2.0.0)\", org.osgi.service.blueprint.container;version=1.0");
author:David Jencks
-------------------------------------------------------------------------------
commit:c9ad131
/////////////////////////////////////////////////////////////////////////
0:             MavenArtifactProvisionOption mapo = mavenBundleInTest("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
0: //            org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0: 
author:Lin Sun
-------------------------------------------------------------------------------
commit:019f23c
/////////////////////////////////////////////////////////////////////////
0:             Thread.sleep(2000);
commit:2fe4508
/////////////////////////////////////////////////////////////////////////
0:             // unget the service
0:             bundleContext.ungetService(sr);
commit:2d9e4c5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
0: 
0: import static org.junit.Assert.assertNotNull;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: 
0: import java.io.InputStream;
0: import java.net.URL;
0: import java.util.HashMap;
0: import java.util.Hashtable;
0: import java.util.Map;
0: 
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.Constants;
0: import org.osgi.framework.ServiceReference;
0: import org.osgi.service.cm.Configuration;
0: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.osgi.service.framework.CompositeBundle;
0: import org.osgi.service.framework.CompositeBundleFactory;
0: 
1: /**
1:  * This test is based on the BlueprintContainerBTCustomizerTest.  but this test starts the
1:  * blueprint sample before the blueprint bundle is started so going a slightly 
1:  * different code path
1:  *
1:  */
0: @RunWith(JUnit4TestRunner.class)
0: public class BlueprintContainer2BTCustomizerTest extends AbstractIntegrationTest {
0: 
0:     @Test
1:     public void test() throws Exception {
0:         // Create a config to check the property placeholder
0:         ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
0:         Configuration cf = ca.getConfiguration("blueprint-sample-placeholder", null);
0:         Hashtable props = new Hashtable();
0:         props.put("key.b", "10");
0:         cf.update(props);
0: 
0:         
0:         ServiceReference sr = bundleContext.getServiceReference("org.osgi.service.framework.CompositeBundleFactory");
0:         if (sr != null) {
0:              // install blueprint.sample into the composite context
0:             CompositeBundleFactory cbf = (CompositeBundleFactory)bundleContext.getService(sr);
0:             
0:             Map<String, String> frameworkConfig = new HashMap<String, String>();
0:             // turn on the line below to enable telnet localhost 10000 to the child framework osgi console
0:             // frameworkConfig.put("osgi.console", "10000");
0:             
0:             // construct composite bundle information
0:             Map<String, String> compositeManifest = new HashMap<String, String>();
0:             compositeManifest.put(Constants.BUNDLE_SYMBOLICNAME, "test-composite");
0:             compositeManifest.put(Constants.BUNDLE_VERSION, "1.0.0");
0:             // this import-package is used by the blueprint.sample
0:             compositeManifest.put(Constants.IMPORT_PACKAGE, "org.osgi.service.blueprint.container");
0:             // this export-package is used by pax junit runner as it needs to see the blueprint sample package 
0:             // for the test after the blueprint sample is started.
0:             compositeManifest.put(Constants.EXPORT_PACKAGE, "org.apache.aries.blueprint.sample");
0:             
0:             CompositeBundle cb = cbf.installCompositeBundle(frameworkConfig, "test-composite", compositeManifest);
0: 
0:             BundleContext compositeBundleContext = cb.getCompositeFramework().getBundleContext();
0:             // install the blueprint sample onto the framework associated with the composite bundle
0:             MavenArtifactProvisionOption mapo = CoreOptions.mavenBundle().groupId("org.apache.aries.blueprint").artifactId("org.apache.aries.blueprint.sample").version( "1.0.0-incubating-SNAPSHOT");
0:             // let's use input stream to avoid invoking mvn url handler which isn't avail in the child framework.
0:             InputStream is = new URL(mapo.getURL()).openStream();
0:             Bundle bundle = compositeBundleContext.installBundle(mapo.getURL(), is);
0:             assertNotNull(bundle);
0:             
0:             // start the composite bundle then the blueprint sample
0:             cb.start();
0:             bundle.start();
0:             
0:             // start the blueprint bundle and it should detect the previously started blueprint sample
0:             Bundle blueprintBundle = getInstalledBundle("org.apache.aries.blueprint");
0:             blueprintBundle.start();
0:             //Thread.sleep(5000);
0: 
0:             // do the test
0:             testBlueprintContainer(compositeBundleContext, bundle);
0:             
1:         }
1:     }
0: 
0:     @org.ops4j.pax.exam.junit.Configuration
0:     public static Option[] configuration() {
0:         Option[] options = options(
0:             // Log
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:             // Felix Config Admin
0:             mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:             // Felix mvn url handler
0:             mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
0: 
0: 
0:             // this is how you set the default log level when using pax logging (logProfile)
0:             systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
0: 
0:             // Bundles
0:             mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").noStart(),
0:             // don't install the blueprint sample here as it will be installed onto the same framework as the blueprint core bundle
0:             // mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart(),
0:             mavenBundle("org.osgi", "org.osgi.compendium"),
0:             // org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0: 
0:             equinox().version("3.5.0")
0:         );
0:         options = updateOptions(options);
0:         return options;
1:     }
0: 
1: }
============================================================================