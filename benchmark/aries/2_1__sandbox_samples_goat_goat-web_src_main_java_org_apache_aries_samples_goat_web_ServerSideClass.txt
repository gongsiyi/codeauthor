2:f2b0038: /**
1:f2b0038:  * Licensed to the Apache Software Foundation (ASF) under one
1:f2b0038:  * or more contributor license agreements.  See the NOTICE file
1:f2b0038:  * distributed with this work for additional information
1:f2b0038:  * regarding copyright ownership.  The ASF licenses this file
1:f2b0038:  * to you under the Apache License, Version 2.0 (the
1:f2b0038:  * "License"); you may not use this file except in compliance
1:f2b0038:  * with the License.  You may obtain a copy of the License at
1:f2b0038:  *
1:f2b0038:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f2b0038:  *
1:f2b0038:  * Unless required by applicable law or agreed to in writing,
1:f2b0038:  * software distributed under the License is distributed on an
1:f2b0038:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f2b0038:  * KIND, either express or implied.  See the License for the
1:f2b0038:  * specific language governing permissions and limitations
1:f2b0038:  * under the License.
2:f2b0038:  */
1:f2b0038: package org.apache.aries.samples.goat.web;
27:f2b0038: 
1:f2b0038: import java.util.ArrayList;
1:9439520: import java.util.Collection;
1:f2b0038: import java.util.HashMap;
1:f2b0038: import java.util.Map;
1:f2b0038: 
1:f2b0038: import javax.servlet.ServletContext;
1:f2b0038: 
1:35c9dd5: import org.apache.aries.samples.goat.info.ComponentInfoImpl;
1:35c9dd5: import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
1:35c9dd5: 
1:9439520: import org.apache.aries.samples.goat.api.ComponentInfo;
1:9439520: import org.apache.aries.samples.goat.api.ComponentInfoProvider;
1:9439520: import org.apache.aries.samples.goat.api.ModelInfoService;
1:9439520: import org.apache.aries.samples.goat.api.RelationshipInfo;
1:ac58ed9: import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
1:35c9dd5: 
1:f2b0038: import org.directwebremoting.Browser;
1:9439520: import org.directwebremoting.ScriptBuffer;
1:9439520: import org.directwebremoting.ScriptSession;
1:f2b0038: import org.directwebremoting.ServerContextFactory;
1:f2b0038: import org.osgi.framework.Bundle;
1:f2b0038: import org.osgi.framework.BundleContext;
1:f2b0038: import org.osgi.framework.InvalidSyntaxException;
1:f2b0038: import org.osgi.framework.ServiceReference;
1:f2b0038: 
1:f2b0038: public class ServerSideClass {
1:f2b0038: 
1:9439520: 	private String modelInfoServiceHint = "";
1:f2b0038: 
1:9439520: 	private ModelInfoService ModelInfoService = null;
1:9439520: 
1:ac58ed9: 	private Map<ModelInfoService, ComponentInfoProvider.ComponentInfoListener> clisteners = new HashMap<ModelInfoService, ComponentInfoProvider.ComponentInfoListener>();
1:ac58ed9: 	private Map<ModelInfoService, RelationshipInfoProvider.RelationshipInfoListener> rlisteners = new HashMap<ModelInfoService, RelationshipInfoProvider.RelationshipInfoListener>();
1:f2b0038: 
1:ac58ed9: 	private class ComponentInfoListenerImpl implements
1:9439520: 			ComponentInfoProvider.ComponentInfoListener {
1:9439520: 		String server;
1:9439520: 
1:ac58ed9: 		public ComponentInfoListenerImpl(String server) {
1:9439520: 			this.server = server;
1:9439520: 		}
1:9439520: 
1:9439520: 		public void updateComponent(ComponentInfo b) {
1:9439520: 			if (this.server.equals(modelInfoServiceHint)) {
1:9439520: 				// todo: only issue the add for the new bundle, and affected
1:9439520: 				// other bundles.
1:b8b1c5a: 				//getInitialComponents(modelInfoServiceHint);
1:b8b1c5a: 				//System.out.println("State is: " + b.getComponentProperties().get("State"));
1:b8b1c5a: 				addFunctionCall("addComponent", b);
1:9439520: 			}
1:9439520: 		}
1:9439520: 
1:9439520: 		public void removeComponent(ComponentInfo b) {
1:9439520: 			// todo
1:9439520: 		}
1:9439520: 	}
1:ac58ed9: 	private class RelationshipInfoListenerImpl implements
1:ac58ed9: 			RelationshipInfoProvider.RelationshipInfoListener {
1:ac58ed9: 		String server;
1:ac58ed9: 
1:ac58ed9: 		public RelationshipInfoListenerImpl(String server) {
1:ac58ed9: 			this.server = server;
1:ac58ed9: 		}
1:ac58ed9: 
1:ac58ed9: 		public void updateRelationship(RelationshipInfo r) {
1:ac58ed9: 			if (this.server.equals(modelInfoServiceHint)) {
1:ac58ed9: 				addFunctionCall("addRelationship", r);
1:ac58ed9: 			}
1:ac58ed9: 		}
1:ac58ed9: 
1:ac58ed9: 		public void removeRelationship(RelationshipInfo r) {
1:ac58ed9: 			// todo
1:ac58ed9: 		}
1:ac58ed9: 	}
1:9439520: 
1:f2b0038: 	public ServerSideClass() {
1:f2b0038: 		System.err.println("SSC Built!");
1:9439520: 
1:9439520: 	}
1:f2b0038: 
1:9439520: 	@SuppressWarnings("unused")
1:9439520: 	private String bundleStateToString(int bundleState) {
1:9439520: 		switch (bundleState) {
1:9439520: 		case Bundle.UNINSTALLED:
1:9439520: 			return "UNINSTALLED";
1:9439520: 		case Bundle.INSTALLED:
1:9439520: 			return "INSTALLED";
1:9439520: 		case Bundle.RESOLVED:
1:9439520: 			return "RESOLVED";
1:9439520: 		case Bundle.STARTING:
1:9439520: 			return "STARTING";
1:9439520: 		case Bundle.STOPPING:
1:9439520: 			return "STOPPING";
1:9439520: 		case Bundle.ACTIVE:
1:9439520: 			return "ACTIVE";
1:9439520: 		default:
1:9439520: 			return "UNKNOWN[" + bundleState + "]";
1:9439520: 		}
1:9439520: 	}
1:9439520: 
1:9439520: 	/**
1:9439520: 	 * this is invoked by a page onload.. so until it's invoked.. we dont care
1:9439520: 	 * about components
1:9439520: 	 */
1:9439520: 	public void getInitialComponents(String dataProvider) {
1:9439520: 
1:9439520: 		System.err.println("GET INITIAL BUNDLES ASKED TO USE DATAPROVIDER "
1:9439520: 				+ dataProvider);
1:9439520: 
1:9439520: 		if (dataProvider == null)
1:9439520: 			throw new IllegalArgumentException(
1:9439520: 					"Unable to accept 'null' as a dataProvider");
1:9439520: 
1:9439520: 		// do we need to update?
1:9439520: 		if (!this.modelInfoServiceHint.equals(dataProvider)) {
1:9439520: 
1:9439520: 			this.modelInfoServiceHint = dataProvider;
1:9439520: 
1:9439520: 			if (!(this.ModelInfoService == null)) {
1:9439520: 				// we already had a provider.. we need to shut down the existing
1:9439520: 				// components & relationships in the browsers..
1:e53f374: 				addFunctionCall("forgetAboutEverything");
1:9439520: 			}
1:9439520: 
1:9439520: 			ServletContext context = org.directwebremoting.ServerContextFactory
1:9439520: 					.get().getServletContext();
1:9439520: 			Object o = context.getAttribute("osgi-bundlecontext");
1:9439520: 			if (o != null) {
1:9439520: 				if (o instanceof BundleContext) {
1:9439520: 					BundleContext b_ctx = (BundleContext) o;
1:9439520: 
1:9439520: 					System.err.println("Looking up bcip");
1:9439520: 					try {
1:9439520: 						ServiceReference sr[] = b_ctx.getServiceReferences(
1:9439520: 								ModelInfoService.class.getName(),
1:9439520: 								"(displayName=" + this.modelInfoServiceHint
1:9439520: 										+ ")");
1:9439520: 						if (sr != null) {
1:9439520: 							System.err.println("Getting bcip");
1:9439520: 							this.ModelInfoService = (ModelInfoService) b_ctx
1:9439520: 									.getService(sr[0]);
1:9439520: 							System.err.println("Got bcip "
1:9439520: 									+ this.ModelInfoService);
1:9439520: 						} else {
1:9439520: 							System.err.println("UNABLE TO FIND BCIP!!");
1:9439520: 							System.err.println("UNABLE TO FIND BCIP!!");
1:9439520: 							System.err.println("UNABLE TO FIND BCIP!!");
1:9439520: 						}
1:9439520: 					} catch (InvalidSyntaxException ise) {
1:9439520: 
27:f2b0038: 					}
1:9439520: 
1:9439520: 					if (this.ModelInfoService != null) {
1:ac58ed9: 						if (!rlisteners.containsKey(this.ModelInfoService)) {
1:ac58ed9: 							RelationshipInfoProvider.RelationshipInfoListener rl = new RelationshipInfoListenerImpl(
1:9439520: 									this.modelInfoServiceHint);
1:ac58ed9: 							rlisteners.put(this.ModelInfoService, rl);
1:ac58ed9: 							this.ModelInfoService.getRelationshipInfoProvider()
1:ac58ed9: 									.registerRelationshipInfoListener(rl);
1:ac58ed9: 						}
1:ac58ed9: 
1:ac58ed9: 						if (!clisteners.containsKey(this.ModelInfoService)) {
1:ac58ed9: 							ComponentInfoProvider.ComponentInfoListener cl = new ComponentInfoListenerImpl(
1:ac58ed9: 									this.modelInfoServiceHint);
1:ac58ed9: 							clisteners.put(this.ModelInfoService, cl);
1:9439520: 							this.ModelInfoService.getComponentInfoProvider()
1:ac58ed9: 									.registerComponentInfoListener(cl);
1:9439520: 						}
1:9439520: 					}
1:9439520: 				}
1:f2b0038: 			}
1:9439520: 
1:f2b0038: 		}
1:9439520: 
1:9439520: 		Collection<ComponentInfo> bis = this.ModelInfoService
1:9439520: 				.getComponentInfoProvider().getComponents();
1:9439520: 		System.err.println("Got " + (bis == null ? "null" : bis.size())
1:9439520: 				+ " components back from the provider ");
1:9439520: 		if (bis != null) {
1:9439520: 			for (ComponentInfo b : bis) {
1:9439520: 
1:9439520: 				System.err.println("Adding Component .. " + b.getId());
1:9439520: 
1:9439520: 				addFunctionCall("addComponent", b);
1:9439520: 			}
1:9439520: 		}
1:9439520: 
1:9439520: 		Collection<RelationshipInfo> ris = this.ModelInfoService
1:9439520: 				.getRelationshipInfoProvider().getRelationships();
1:9439520: 		System.err.println("Got " + (ris == null ? "null" : ris.size())
1:9439520: 				+ " relationships back from the provider ");
1:9439520: 		if (ris != null) {
1:9439520: 			for (RelationshipInfo r : ris) {
1:9439520: 				System.err.println("Adding relationship type " + r.getType()
1:9439520: 						+ " called " + r.getName() + " from "
1:9439520: 						+ r.getProvidedBy().getId());
1:9439520: 
1:9439520: 				addFunctionCall("addRelationship", r);
1:9439520: 			}
1:9439520: 		}
1:9439520: 
1:9439520: 	}
1:9439520: 
1:9439520: 	private void addFunctionCall(String name, Object... params) {
1:9439520: 		final ScriptBuffer script = new ScriptBuffer();
1:9439520: 		script.appendScript(name).appendScript("(");
1:9439520: 		for (int i = 0; i < params.length; i++) {
1:9439520: 			if (i != 0)
1:9439520: 				script.appendScript(",");
1:9439520: 			script.appendData(params[i]);
1:9439520: 		}
1:9439520: 		script.appendScript(");");
1:9439520: 		Browser.withAllSessions(new Runnable() {
1:9439520: 			public void run() {
1:9439520: 				for (ScriptSession s : Browser.getTargetSessions()) {
1:9439520: 					s.addScript(script);
1:9439520: 				}
1:9439520: 			}
1:9439520: 		});
1:9439520: 	}
1:9439520: 
1:9439520: 	public String[] getProviders() {
1:9439520: 		System.err.println("Getting providers...");
1:9439520: 		ArrayList<String> result = new ArrayList<String>();
1:9439520: 		ServletContext context = ServerContextFactory.get().getServletContext();
1:9439520: 		Object o = context.getAttribute("osgi-bundlecontext");
1:9439520: 		if (o != null) {
1:9439520: 			if (o instanceof BundleContext) {
1:9439520: 				BundleContext b_ctx = (BundleContext) o;
1:9439520: 				try {
1:9439520: 					System.err.println("Getting providers [2]...");
1:9439520: 					ServiceReference[] srs = b_ctx.getServiceReferences(
1:9439520: 							ModelInfoService.class.getName(), null);
1:9439520: 					System.err.println("Got.. " + srs);
1:9439520: 					if (srs == null || srs.length == 0) {
1:9439520: 						System.err.println("NO DATA PROVIDERS");
1:9439520: 						throw new RuntimeException(
1:9439520: 								"Unable to find any data providers");
1:9439520: 					}
1:9439520: 					System.err.println("Processing srs as loop.");
1:9439520: 					for (ServiceReference sr : srs) {
1:9439520: 						System.err.println("Processing srs entry...");
1:9439520: 
1:9439520: 						String name = (String.valueOf(sr
1:9439520: 								.getProperty("displayName")));
1:9439520: 
1:9439520: 						result.add(name);
1:9439520: 					}
1:9439520: 					System.err.println("Processed srs as loop.");
1:9439520: 				} catch (InvalidSyntaxException e) {
1:9439520: 					// wont happen, the exception relates to the filter, (2nd
1:9439520: 					// arg above), which is constant null.
1:9439520: 				}
1:9439520: 			}
1:9439520: 		}
1:9439520: 		System.err.println("Returning " + result.size());
1:f2b0038: 		String[] arr = new String[result.size()];
1:f2b0038: 		arr = result.toArray(arr);
1:9439520: 		for (String x : arr) {
1:9439520: 			System.err.println(" - " + x);
1:f2b0038: 		}
1:f2b0038: 		return arr;
1:f2b0038: 	}
1:f2b0038: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:50bd22c
commit:35c9dd5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.goat.info.ComponentInfoImpl;
1: import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
1: 
1: 
commit:31b81a2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.goat.api.ComponentInfoImpl;
0: import org.apache.aries.samples.goat.api.RelationshipInfoImpl;
commit:ac58ed9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
/////////////////////////////////////////////////////////////////////////
1: 	private Map<ModelInfoService, ComponentInfoProvider.ComponentInfoListener> clisteners = new HashMap<ModelInfoService, ComponentInfoProvider.ComponentInfoListener>();
1: 	private Map<ModelInfoService, RelationshipInfoProvider.RelationshipInfoListener> rlisteners = new HashMap<ModelInfoService, RelationshipInfoProvider.RelationshipInfoListener>();
1: 	private class ComponentInfoListenerImpl implements
1: 		public ComponentInfoListenerImpl(String server) {
/////////////////////////////////////////////////////////////////////////
1: 	private class RelationshipInfoListenerImpl implements
1: 			RelationshipInfoProvider.RelationshipInfoListener {
1: 		String server;
1: 
1: 		public RelationshipInfoListenerImpl(String server) {
1: 			this.server = server;
1: 		}
1: 
1: 		public void updateRelationship(RelationshipInfo r) {
1: 			if (this.server.equals(modelInfoServiceHint)) {
1: 				addFunctionCall("addRelationship", r);
1: 			}
1: 		}
1: 
1: 		public void removeRelationship(RelationshipInfo r) {
1: 			// todo
1: 		}
1: 	}
/////////////////////////////////////////////////////////////////////////
1: 						if (!rlisteners.containsKey(this.ModelInfoService)) {
1: 							RelationshipInfoProvider.RelationshipInfoListener rl = new RelationshipInfoListenerImpl(
1: 							rlisteners.put(this.ModelInfoService, rl);
1: 							this.ModelInfoService.getRelationshipInfoProvider()
1: 									.registerRelationshipInfoListener(rl);
1: 						}
1: 
1: 						if (!clisteners.containsKey(this.ModelInfoService)) {
1: 							ComponentInfoProvider.ComponentInfoListener cl = new ComponentInfoListenerImpl(
1: 									this.modelInfoServiceHint);
1: 							clisteners.put(this.ModelInfoService, cl);
1: 									.registerComponentInfoListener(cl);
commit:b8b1c5a
/////////////////////////////////////////////////////////////////////////
1: 				//getInitialComponents(modelInfoServiceHint);
1: 				//System.out.println("State is: " + b.getComponentProperties().get("State"));
1: 				addFunctionCall("addComponent", b);
commit:e53f374
/////////////////////////////////////////////////////////////////////////
1: 				addFunctionCall("forgetAboutEverything");
commit:9439520
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import org.apache.aries.samples.goat.api.ComponentInfo;
1: import org.apache.aries.samples.goat.api.ComponentInfoProvider;
1: import org.apache.aries.samples.goat.api.ModelInfoService;
1: import org.apache.aries.samples.goat.api.RelationshipInfo;
1: import org.directwebremoting.ScriptBuffer;
1: import org.directwebremoting.ScriptSession;
1: 	private String modelInfoServiceHint = "";
1: 	private ModelInfoService ModelInfoService = null;
0: 	private Map<ModelInfoService, ComponentInfoProvider.ComponentInfoListener> listeners = new HashMap<ModelInfoService, ComponentInfoProvider.ComponentInfoListener>();
1: 
0: 	private class ListenerImpl implements
1: 			ComponentInfoProvider.ComponentInfoListener {
1: 		String server;
1: 
0: 		public ListenerImpl(String server) {
1: 			this.server = server;
1: 		}
1: 
1: 		public void updateComponent(ComponentInfo b) {
1: 			if (this.server.equals(modelInfoServiceHint)) {
1: 				// todo: only issue the add for the new bundle, and affected
1: 				// other bundles.
0: 				getInitialComponents(modelInfoServiceHint);
1: 			}
1: 		}
1: 
1: 		public void removeComponent(ComponentInfo b) {
1: 			// todo
1: 		}
1: 	}
1: 
1: 	}
1: 
1: 	@SuppressWarnings("unused")
1: 	private String bundleStateToString(int bundleState) {
1: 		switch (bundleState) {
1: 		case Bundle.UNINSTALLED:
1: 			return "UNINSTALLED";
1: 		case Bundle.INSTALLED:
1: 			return "INSTALLED";
1: 		case Bundle.RESOLVED:
1: 			return "RESOLVED";
1: 		case Bundle.STARTING:
1: 			return "STARTING";
1: 		case Bundle.STOPPING:
1: 			return "STOPPING";
1: 		case Bundle.ACTIVE:
1: 			return "ACTIVE";
1: 		default:
1: 			return "UNKNOWN[" + bundleState + "]";
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * this is invoked by a page onload.. so until it's invoked.. we dont care
1: 	 * about components
1: 	 */
1: 	public void getInitialComponents(String dataProvider) {
1: 
1: 		System.err.println("GET INITIAL BUNDLES ASKED TO USE DATAPROVIDER "
1: 				+ dataProvider);
1: 
1: 		if (dataProvider == null)
1: 			throw new IllegalArgumentException(
1: 					"Unable to accept 'null' as a dataProvider");
1: 
1: 		// do we need to update?
1: 		if (!this.modelInfoServiceHint.equals(dataProvider)) {
1: 
1: 			this.modelInfoServiceHint = dataProvider;
1: 
1: 			if (!(this.ModelInfoService == null)) {
1: 				// we already had a provider.. we need to shut down the existing
1: 				// components & relationships in the browsers..
0: 				addFunctionCall("forgetAboutAllEverything");
1: 			}
1: 
1: 			ServletContext context = org.directwebremoting.ServerContextFactory
1: 					.get().getServletContext();
1: 			Object o = context.getAttribute("osgi-bundlecontext");
1: 			if (o != null) {
1: 				if (o instanceof BundleContext) {
1: 					BundleContext b_ctx = (BundleContext) o;
1: 
1: 					System.err.println("Looking up bcip");
1: 					try {
1: 						ServiceReference sr[] = b_ctx.getServiceReferences(
1: 								ModelInfoService.class.getName(),
1: 								"(displayName=" + this.modelInfoServiceHint
1: 										+ ")");
1: 						if (sr != null) {
1: 							System.err.println("Getting bcip");
1: 							this.ModelInfoService = (ModelInfoService) b_ctx
1: 									.getService(sr[0]);
1: 							System.err.println("Got bcip "
1: 									+ this.ModelInfoService);
1: 						} else {
1: 							System.err.println("UNABLE TO FIND BCIP!!");
1: 							System.err.println("UNABLE TO FIND BCIP!!");
1: 							System.err.println("UNABLE TO FIND BCIP!!");
1: 						}
1: 					} catch (InvalidSyntaxException ise) {
1: 
1: 
1: 					if (this.ModelInfoService != null) {
0: 						if (!listeners.containsKey(this.ModelInfoService)) {
0: 							ComponentInfoProvider.ComponentInfoListener l = new ListenerImpl(
1: 									this.modelInfoServiceHint);
0: 							listeners.put(this.ModelInfoService, l);
1: 							this.ModelInfoService.getComponentInfoProvider()
0: 									.registerComponentInfoListener(l);
1: 						}
1: 					}
1: 
1: 		}
1: 
1: 		Collection<ComponentInfo> bis = this.ModelInfoService
1: 				.getComponentInfoProvider().getComponents();
1: 		System.err.println("Got " + (bis == null ? "null" : bis.size())
1: 				+ " components back from the provider ");
1: 		if (bis != null) {
1: 			for (ComponentInfo b : bis) {
1: 
1: 				System.err.println("Adding Component .. " + b.getId());
1: 
1: 				addFunctionCall("addComponent", b);
1: 			}
1: 		}
1: 
1: 		Collection<RelationshipInfo> ris = this.ModelInfoService
1: 				.getRelationshipInfoProvider().getRelationships();
1: 		System.err.println("Got " + (ris == null ? "null" : ris.size())
1: 				+ " relationships back from the provider ");
1: 		if (ris != null) {
1: 			for (RelationshipInfo r : ris) {
1: 				System.err.println("Adding relationship type " + r.getType()
1: 						+ " called " + r.getName() + " from "
1: 						+ r.getProvidedBy().getId());
1: 
1: 				addFunctionCall("addRelationship", r);
1: 			}
1: 		}
1: 
1: 	}
1: 
1: 	private void addFunctionCall(String name, Object... params) {
1: 		final ScriptBuffer script = new ScriptBuffer();
1: 		script.appendScript(name).appendScript("(");
1: 		for (int i = 0; i < params.length; i++) {
1: 			if (i != 0)
1: 				script.appendScript(",");
1: 			script.appendData(params[i]);
1: 		}
1: 		script.appendScript(");");
1: 		Browser.withAllSessions(new Runnable() {
1: 			public void run() {
1: 				for (ScriptSession s : Browser.getTargetSessions()) {
1: 					s.addScript(script);
1: 				}
1: 			}
1: 		});
1: 	}
1: 
1: 	public String[] getProviders() {
1: 		System.err.println("Getting providers...");
1: 		ArrayList<String> result = new ArrayList<String>();
1: 		ServletContext context = ServerContextFactory.get().getServletContext();
1: 		Object o = context.getAttribute("osgi-bundlecontext");
1: 		if (o != null) {
1: 			if (o instanceof BundleContext) {
1: 				BundleContext b_ctx = (BundleContext) o;
1: 				try {
1: 					System.err.println("Getting providers [2]...");
1: 					ServiceReference[] srs = b_ctx.getServiceReferences(
1: 							ModelInfoService.class.getName(), null);
1: 					System.err.println("Got.. " + srs);
1: 					if (srs == null || srs.length == 0) {
1: 						System.err.println("NO DATA PROVIDERS");
1: 						throw new RuntimeException(
1: 								"Unable to find any data providers");
1: 					}
1: 					System.err.println("Processing srs as loop.");
1: 					for (ServiceReference sr : srs) {
1: 						System.err.println("Processing srs entry...");
1: 
1: 						String name = (String.valueOf(sr
1: 								.getProperty("displayName")));
1: 
1: 						result.add(name);
1: 					}
1: 					System.err.println("Processed srs as loop.");
1: 				} catch (InvalidSyntaxException e) {
1: 					// wont happen, the exception relates to the filter, (2nd
1: 					// arg above), which is constant null.
1: 				}
1: 			}
1: 		}
1: 		System.err.println("Returning " + result.size());
1: 		for (String x : arr) {
1: 			System.err.println(" - " + x);
commit:f2b0038
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.goat.web;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
0: import java.util.List;
1: import java.util.Map;
1: 
1: import javax.servlet.ServletContext;
1: 
0: import org.directwebremoting.ScriptSession;
0: import org.directwebremoting.ScriptBuffer;
1: import org.directwebremoting.Browser;
1: import org.directwebremoting.ServerContextFactory;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: 
0: import org.apache.aries.samples.goat.api.ComponentInfo;
0: import org.apache.aries.samples.goat.api.ComponentInfoProvider;
0: import org.apache.aries.samples.goat.api.ModelInfoService;
0: import org.apache.aries.samples.goat.api.RelationshipInfo;
1: 
1: public class ServerSideClass {
1: 
0: 	private String modelInfoServiceHint="";
1: 	
0: 	private ModelInfoService ModelInfoService=null;
1: 	
0: 	private Map<ModelInfoService, ComponentInfoProvider.ComponentInfoListener>listeners=new HashMap<ModelInfoService,ComponentInfoProvider.ComponentInfoListener>();
1: 
1: 
0:     private class ListenerImpl implements ComponentInfoProvider.ComponentInfoListener{
0:     	String server;
0:     	public ListenerImpl(String server){
0:     		this.server=server;
1:     	}
0:     	public void updateComponent(ComponentInfo b) {
0:     		if(this.server.equals(modelInfoServiceHint)){
0:  			   //todo: only issue the add for the new bundle, and affected other bundles.
0:  			   getInitialComponents(modelInfoServiceHint);
1:  		   }
1:     	}
0:     	public void removeComponent(ComponentInfo b) {
0:     		//todo
1:     	}
1:     }
1:     
1: 	public ServerSideClass() {
1: 		System.err.println("SSC Built!");
1:        	
1:     }
1:     
0: 	@SuppressWarnings("unused")
0: 	private String bundleStateToString(int bundleState){
0: 		switch(bundleState){
0: 		case Bundle.UNINSTALLED : return "UNINSTALLED";
0: 		case Bundle.INSTALLED : return "INSTALLED";
0: 		case Bundle.RESOLVED : return "RESOLVED";
0: 		case Bundle.STARTING : return "STARTING";
0: 		case Bundle.STOPPING : return "STOPPING";
0: 		case Bundle.ACTIVE : return "ACTIVE";
0: 		default : return "UNKNOWN["+bundleState+"]";
1: 		}
1: 	}    
1:     
1:     /**
0:      * this is invoked by a page onload.. so until it's invoked.. we dont care about components
1:      */
0:     public void getInitialComponents(String dataProvider){
1:     	
0:     	System.err.println("GET INITIAL BUNDLES ASKED TO USE DATAPROVIDER "+dataProvider);
1:     	
0:     	if(dataProvider==null)
0:     		throw new IllegalArgumentException("Unable to accept 'null' as a dataProvider");
1:     	
0:     	//do we need to update?
0:     	if( !this.modelInfoServiceHint.equals(dataProvider)){
1:     		    		
0:     		this.modelInfoServiceHint = dataProvider;
1: 		    		
1:     		
0:     		if(!(this.ModelInfoService==null)){
0:     			//we already had a provider.. we need to shut down the existing components & relationships in the browsers..
0:     			addFunctionCall("forgetAboutAllEverything");
1:     		}
1:     		
0:         	ServletContext context = org.directwebremoting.ServerContextFactory.get().getServletContext();
0:     		Object o = context.getAttribute("osgi-bundlecontext");
0:     		if(o!=null){
0:     			if(o instanceof BundleContext){
0:     				BundleContext b_ctx = (BundleContext)o;
1:     				
0:     				System.err.println("Looking up bcip");
0:     				try{
0:     				ServiceReference sr[] = b_ctx.getServiceReferences(ModelInfoService.class.getName(), "(displayName="+this.modelInfoServiceHint+")");
0:     				if(sr!=null){
0:     					System.err.println("Getting bcip");
0:     					this.ModelInfoService = (ModelInfoService)b_ctx.getService(sr[0]);
0:     					System.err.println("Got bcip "+this.ModelInfoService);
0:     				}else{
0:     					System.err.println("UNABLE TO FIND BCIP!!");
0:     					System.err.println("UNABLE TO FIND BCIP!!");
0:     					System.err.println("UNABLE TO FIND BCIP!!");
1:     				}
0:     				}catch(InvalidSyntaxException ise){
1:     					
1:     				}
1:   				
0:     				if(this.ModelInfoService!=null){
0:     					if(!listeners.containsKey(this.ModelInfoService)){    
0:     						ComponentInfoProvider.ComponentInfoListener l = new ListenerImpl(this.modelInfoServiceHint);
0:     						listeners.put(this.ModelInfoService, l);
0:     						this.ModelInfoService.getComponentInfoProvider().registerComponentInfoListener(l);
1:     					}
1:     				}
1:     			}
1:     		}
1:     		
1:     	}
1:     	    	
0:     	List<ComponentInfo> bis = this.ModelInfoService.getComponentInfoProvider().getComponents();
0:     	System.err.println("Got "+(bis==null?"null":bis.size())+" components back from the provider ");
0:     	if(bis!=null){
0:     		for(ComponentInfo b: bis){
1:     	
0:     			System.err.println("Adding Component .. "+b.getId());
1: 	
0:     			addFunctionCall("addComponent",  b);    			   			
1:     		}
1:     	} 
1:     	
0:     	List<RelationshipInfo> ris = this.ModelInfoService.getRelationshipInfoProvider().getRelationships();
0:     	System.err.println("Got "+(ris==null?"null":ris.size())+" relationships back from the provider ");
0:     	if(ris!=null){
0:     		for(RelationshipInfo r: ris){
0:     			System.err.println("Adding relationship type "+r.getType()+" called "+r.getName()+" from "+r.getProvidedBy().getId());
1:     			
0:     			addFunctionCall("addRelationship",  r);
1:     		}
1:     	}
1:     	 	
1:     }
0: 	private void addFunctionCall(String name, Object... params){
0:         final ScriptBuffer script = new ScriptBuffer();
0:         script.appendScript(name).appendScript("(");
0:         for(int i = 0; i < params.length; i++)
0:         {
0:             if(i != 0)script.appendScript(",");
0:             script.appendData(params[i]);
1:         }
0:         script.appendScript(");");
0:         Browser.withAllSessions(new Runnable(){ public void run(){
0:             for(ScriptSession s: Browser.getTargetSessions()){
0:                 s.addScript(script);
1:             }
0:         }});
1:     }
1: 
0: 	public String[] getProviders(){
0: 		System.err.println("Getting providers...");
0: 		ArrayList<String> result=new ArrayList<String>();
0:     	ServletContext context = ServerContextFactory.get().getServletContext();
0: 		Object o = context.getAttribute("osgi-bundlecontext");
0: 		if(o!=null){
0: 			if(o instanceof BundleContext){
0: 				BundleContext b_ctx = (BundleContext)o;
0: 				try{
0: 					System.err.println("Getting providers [2]...");
0: 					ServiceReference[] srs = b_ctx.getServiceReferences(ModelInfoService.class.getName(), null);
0: 					System.err.println("Got.. "+srs);
0: 					if(srs==null || srs.length==0){
0: 						System.err.println("NO DATA PROVIDERS");
0: 						throw new RuntimeException("Unable to find any data providers");
1: 					}
0: 					System.err.println("Processing srs as loop.");
0: 					for(ServiceReference sr : srs){
0: 						System.err.println("Processing srs entry...");
1: 						
0: 						String name = (String.valueOf(sr.getProperty("displayName")));
1: 						
0: 						result.add(name);
1: 					}	
0: 					System.err.println("Processed srs as loop.");
0: 				}catch(InvalidSyntaxException e){
0: 					//wont happen, the exception relates to the filter, (2nd arg above), which is constant null.
1: 				}
1: 			}
1: 		}	
0: 		System.err.println("Returning "+result.size());
1: 		String[] arr = new String[result.size()];
1: 		arr = result.toArray(arr);
0: 		for(String x: arr){
0: 			System.err.println(" - "+x);
1: 		}
1: 		return arr;
1: 	}
1: }
============================================================================