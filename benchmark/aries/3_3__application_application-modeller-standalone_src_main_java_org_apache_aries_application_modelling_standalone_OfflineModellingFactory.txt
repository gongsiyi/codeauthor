1:d9dfe2c: /**
1:d9dfe2c:  * Licensed to the Apache Software Foundation (ASF) under one
1:d9dfe2c:  * or more contributor license agreements.  See the NOTICE file
1:d9dfe2c:  * distributed with this work for additional information
1:d9dfe2c:  * regarding copyright ownership.  The ASF licenses this file
1:d9dfe2c:  * to you under the Apache License, Version 2.0 (the
1:d9dfe2c:  * "License"); you may not use this file except in compliance
1:d9dfe2c:  * with the License.  You may obtain a copy of the License at
1:d9dfe2c:  *
1:d9dfe2c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d9dfe2c:  *
1:d9dfe2c:  * Unless required by applicable law or agreed to in writing,
1:d9dfe2c:  * software distributed under the License is distributed on an
1:d9dfe2c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d9dfe2c:  * KIND, either express or implied.  See the License for the
1:d9dfe2c:  * specific language governing permissions and limitations
1:d9dfe2c:  * under the License.
1:d9dfe2c:  */
1:6bd0f94: package org.apache.aries.application.modelling.standalone;
2:6bd0f94: 
1:4a9fa6c: import java.io.BufferedReader;
1:6bd0f94: import java.io.IOException;
1:6bd0f94: import java.io.InputStream;
1:4a9fa6c: import java.io.InputStreamReader;
1:6bd0f94: import java.net.URI;
1:6bd0f94: import java.net.URL;
1:4a9fa6c: import java.util.ArrayList;
1:6bd0f94: import java.util.Collections;
1:4a9fa6c: import java.util.Enumeration;
1:6bd0f94: import java.util.List;
1:6bd0f94: import java.util.Set;
1:6bd0f94: 
1:6bd0f94: import javax.xml.validation.Schema;
1:6bd0f94: 
1:6bd0f94: import org.apache.aries.application.modelling.ModelledResourceManager;
1:26ae47b: import org.apache.aries.application.modelling.ParserProxy;
1:4a9fa6c: import org.apache.aries.application.modelling.ServiceModeller;
1:6bd0f94: import org.apache.aries.application.modelling.impl.AbstractParserProxy;
1:6bd0f94: import org.apache.aries.application.modelling.impl.ModelledResourceManagerImpl;
1:6bd0f94: import org.apache.aries.application.modelling.impl.ModellingManagerImpl;
1:6bd0f94: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:6bd0f94: import org.apache.aries.blueprint.NamespaceHandler;
1:6bd0f94: import org.apache.aries.blueprint.ParserContext;
1:6bd0f94: import org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl;
1:6bd0f94: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
1:6bd0f94: import org.apache.aries.blueprint.parser.Parser;
1:6bd0f94: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:6bd0f94: import org.osgi.service.blueprint.reflect.Metadata;
1:6bd0f94: import org.osgi.service.blueprint.reflect.NullMetadata;
1:6bd0f94: import org.w3c.dom.Element;
1:6bd0f94: import org.w3c.dom.Node;
1:6bd0f94: import org.xml.sax.SAXException;
1:6bd0f94: 
1:6bd0f94: public class OfflineModellingFactory {
1:6bd0f94: 	private static final NamespaceHandlerSet DUMMY_HANDLER_SET = new NamespaceHandlerSet() {
1:6bd0f94: 		public NamespaceHandler getNamespaceHandler(URI arg0) {
1:6bd0f94: 			return new NamespaceHandler() {
1:6bd0f94: 				
1:6bd0f94: 				public Metadata parse(Element arg0, ParserContext arg1) {
1:6bd0f94: 					return NullMetadata.NULL;
1:6bd0f94: 				}
1:6bd0f94: 				
1:6bd0f94: 				public URL getSchemaLocation(String arg0) {
1:6bd0f94: 					return null;
1:6bd0f94: 				}
1:6bd0f94: 				
1:6bd0f94: 				public Set<Class> getManagedClasses() {
1:6bd0f94: 					return Collections.emptySet();
1:6bd0f94: 				}
1:6bd0f94: 				
1:6bd0f94: 				public ComponentMetadata decorate(Node arg0, ComponentMetadata arg1, ParserContext arg2) {
1:6bd0f94: 					return arg1;
1:6bd0f94: 				}
1:6bd0f94: 			};
1:6bd0f94: 		}
1:6bd0f94: 
1:6bd0f94: 		public Set<URI> getNamespaces() {
1:6bd0f94: 			return Collections.emptySet();
1:6bd0f94: 		}
1:6bd0f94: 
1:6bd0f94: 		public Schema getSchema() throws SAXException, IOException {
1:6bd0f94: 			return null;
1:6bd0f94: 		}
1:6bd0f94: 
1:6bd0f94: 		public boolean isComplete() {
1:6bd0f94: 			return true;
1:6bd0f94: 		}
1:6bd0f94: 
1:6bd0f94: 		public void addListener(Listener arg0) {}
1:6bd0f94: 		public void removeListener(Listener arg0) {}
1:6bd0f94: 		public void destroy() {}
1:6bd0f94: 	};
1:6bd0f94: 	
1:6bd0f94: 	
1:6bd0f94: 	private static class OfflineParserProxy extends AbstractParserProxy {
1:6bd0f94: 		protected ComponentDefinitionRegistry parseCDR(List<URL> blueprintsToParse) throws Exception {
1:26ae47b: 			Parser parser = new Parser();
1:6bd0f94: 			parser.parse(blueprintsToParse);
1:26ae47b: 			return getCDR(parser);
1:6bd0f94: 		}
1:6bd0f94: 			
1:6bd0f94: 		protected ComponentDefinitionRegistry parseCDR(InputStream blueprintToParse) throws Exception {
1:26ae47b: 			Parser parser = new Parser();
1:6bd0f94: 			parser.parse(blueprintToParse);
1:26ae47b: 			return getCDR(parser);
1:6bd0f94: 		}
1:6bd0f94: 		
1:26ae47b: 		private ComponentDefinitionRegistry getCDR(Parser parser) {
1:6bd0f94: 			ComponentDefinitionRegistry cdr = new ComponentDefinitionRegistryImpl();
1:6bd0f94: 			parser.populate(DUMMY_HANDLER_SET, cdr);
1:6bd0f94: 			return cdr;			
1:6bd0f94: 		}
1:6bd0f94: 	};
1:6bd0f94: 	
1:26ae47b: 	public static ParserProxy getOfflineParserProxy() {
1:26ae47b: 		ModellingManagerImpl modellingManager = new ModellingManagerImpl();
1:26ae47b: 		
1:26ae47b: 		OfflineParserProxy parserProxy = new OfflineParserProxy();
1:26ae47b: 		parserProxy.setModellingManager(modellingManager);
1:26ae47b: 		
1:26ae47b: 		return parserProxy;
1:26ae47b: 	}
1:26ae47b: 	
1:6bd0f94: 	public static ModelledResourceManager getModelledResourceManager() {
1:6bd0f94: 		ModellingManagerImpl modellingManager = new ModellingManagerImpl();
1:6bd0f94: 		
1:6bd0f94: 		OfflineParserProxy parserProxy = new OfflineParserProxy();
1:6bd0f94: 		parserProxy.setModellingManager(modellingManager);
1:6bd0f94: 		
1:6bd0f94: 		ModelledResourceManagerImpl result = new ModelledResourceManagerImpl();
1:6bd0f94: 		result.setModellingManager(modellingManager);
1:6bd0f94: 		result.setParserProxy(parserProxy);
1:6bd0f94: 		
1:4a9fa6c: 		List<ServiceModeller> plugins = new ArrayList<ServiceModeller>();
1:4a9fa6c: 		
1:4a9fa6c:     ClassLoader cl = OfflineModellingFactory.class.getClassLoader();
1:4a9fa6c: 		try {
1:4a9fa6c:       Enumeration<URL> e = cl.getResources(
1:4a9fa6c:           "META-INF/services/" + ServiceModeller.class.getName());
1:4a9fa6c:       
1:4a9fa6c:       while(e.hasMoreElements()) {
1:4a9fa6c:         BufferedReader reader = new BufferedReader(new InputStreamReader(
1:4a9fa6c:                 e.nextElement().openStream()));
1:4a9fa6c:         try {
1:4a9fa6c:           plugins.add((ServiceModeller) Class.forName(reader.readLine(), true, cl).newInstance());
1:4a9fa6c:         } catch (Exception e1) {
1:4a9fa6c:           e1.printStackTrace(System.err);
1:4a9fa6c:         }
1:4a9fa6c:       }
1:4a9fa6c:     } catch (IOException e) {
1:4a9fa6c:       e.printStackTrace(System.err);
1:4a9fa6c:     }
1:4a9fa6c: 
1:4a9fa6c:     result.setModellingPlugins(plugins);
1:6bd0f94: 		return result;
1:6bd0f94: 	}
1:6bd0f94: }
============================================================================
author:Holly Cummins
-------------------------------------------------------------------------------
commit:d9dfe2c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4a9fa6c
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedReader;
1: import java.io.InputStreamReader;
1: import java.util.ArrayList;
1: import java.util.Enumeration;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ServiceModeller;
/////////////////////////////////////////////////////////////////////////
1: 		List<ServiceModeller> plugins = new ArrayList<ServiceModeller>();
1: 		
1:     ClassLoader cl = OfflineModellingFactory.class.getClassLoader();
1: 		try {
1:       Enumeration<URL> e = cl.getResources(
1:           "META-INF/services/" + ServiceModeller.class.getName());
1:       
1:       while(e.hasMoreElements()) {
1:         BufferedReader reader = new BufferedReader(new InputStreamReader(
1:                 e.nextElement().openStream()));
1:         try {
1:           plugins.add((ServiceModeller) Class.forName(reader.readLine(), true, cl).newInstance());
1:         } catch (Exception e1) {
1:           e1.printStackTrace(System.err);
1:         }
1:       }
1:     } catch (IOException e) {
1:       e.printStackTrace(System.err);
1:     }
1: 
1:     result.setModellingPlugins(plugins);
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:26ae47b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ParserProxy;
/////////////////////////////////////////////////////////////////////////
1: 			Parser parser = new Parser();
1: 			return getCDR(parser);
1: 			Parser parser = new Parser();
1: 			return getCDR(parser);
1: 		private ComponentDefinitionRegistry getCDR(Parser parser) {
1: 	public static ParserProxy getOfflineParserProxy() {
1: 		ModellingManagerImpl modellingManager = new ModellingManagerImpl();
1: 		
1: 		OfflineParserProxy parserProxy = new OfflineParserProxy();
1: 		parserProxy.setModellingManager(modellingManager);
1: 		
1: 		return parserProxy;
1: 	}
1: 	
commit:6bd0f94
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.modelling.standalone;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URI;
1: import java.net.URL;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import javax.xml.validation.Schema;
1: 
1: import org.apache.aries.application.modelling.ModelledResourceManager;
1: import org.apache.aries.application.modelling.impl.AbstractParserProxy;
1: import org.apache.aries.application.modelling.impl.ModelledResourceManagerImpl;
1: import org.apache.aries.application.modelling.impl.ModellingManagerImpl;
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.aries.blueprint.ParserContext;
1: import org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl;
1: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
1: import org.apache.aries.blueprint.parser.Parser;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: import org.osgi.service.blueprint.reflect.NullMetadata;
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: import org.xml.sax.SAXException;
1: 
1: public class OfflineModellingFactory {
1: 	private static final NamespaceHandlerSet DUMMY_HANDLER_SET = new NamespaceHandlerSet() {
1: 		public NamespaceHandler getNamespaceHandler(URI arg0) {
1: 			return new NamespaceHandler() {
1: 				
1: 				public Metadata parse(Element arg0, ParserContext arg1) {
1: 					return NullMetadata.NULL;
1: 				}
1: 				
1: 				public URL getSchemaLocation(String arg0) {
1: 					return null;
1: 				}
1: 				
1: 				public Set<Class> getManagedClasses() {
1: 					return Collections.emptySet();
1: 				}
1: 				
1: 				public ComponentMetadata decorate(Node arg0, ComponentMetadata arg1, ParserContext arg2) {
1: 					return arg1;
1: 				}
1: 			};
1: 		}
1: 
1: 		public Set<URI> getNamespaces() {
1: 			return Collections.emptySet();
1: 		}
1: 
1: 		public Schema getSchema() throws SAXException, IOException {
1: 			return null;
1: 		}
1: 
1: 		public boolean isComplete() {
1: 			return true;
1: 		}
1: 
1: 		public void addListener(Listener arg0) {}
1: 		public void removeListener(Listener arg0) {}
1: 		public void destroy() {}
1: 	};
1: 	
1: 	
1: 	private static class OfflineParserProxy extends AbstractParserProxy {
0: 		private final Parser parser = new Parser();
1: 		
1: 		protected ComponentDefinitionRegistry parseCDR(List<URL> blueprintsToParse) throws Exception {
1: 			parser.parse(blueprintsToParse);
0: 			return getCDR();
1: 		}
1: 			
1: 		protected ComponentDefinitionRegistry parseCDR(InputStream blueprintToParse) throws Exception {
1: 			parser.parse(blueprintToParse);
0: 			return getCDR();
1: 		}
1: 		
0: 		private ComponentDefinitionRegistry getCDR() {
1: 			ComponentDefinitionRegistry cdr = new ComponentDefinitionRegistryImpl();
1: 			parser.populate(DUMMY_HANDLER_SET, cdr);
1: 			return cdr;			
1: 		}
1: 	};
1: 	
1: 	public static ModelledResourceManager getModelledResourceManager() {
1: 		ModellingManagerImpl modellingManager = new ModellingManagerImpl();
1: 		
1: 		OfflineParserProxy parserProxy = new OfflineParserProxy();
1: 		parserProxy.setModellingManager(modellingManager);
1: 		
1: 		ModelledResourceManagerImpl result = new ModelledResourceManagerImpl();
1: 		result.setModellingManager(modellingManager);
1: 		result.setParserProxy(parserProxy);
1: 		
1: 		return result;
1: 	}
1: }
============================================================================