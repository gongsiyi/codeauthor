1:48ad380: /*
1:48ad380:  * Licensed to the Apache Software Foundation (ASF) under one
1:48ad380:  * or more contributor license agreements.  See the NOTICE file
1:48ad380:  * distributed with this work for additional information
1:48ad380:  * regarding copyright ownership.  The ASF licenses this file
1:48ad380:  * to you under the Apache License, Version 2.0 (the
1:48ad380:  * "License"); you may not use this file except in compliance
1:48ad380:  * with the License.  You may obtain a copy of the License at
1:48ad380:  *
1:48ad380:  *   http://www.apache.org/licenses/LICENSE-2.0
1:48ad380:  *
1:48ad380:  * Unless required by applicable law or agreed to in writing,
1:48ad380:  * software distributed under the License is distributed on an
1:48ad380:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:48ad380:  * KIND, either express or implied.  See the License for the
1:48ad380:  * specific language governing permissions and limitations
1:48ad380:  * under the License.
1:48ad380:  */
1:48ad380: package org.apache.aries.transaction.jdbc.internal;
1:48ad380: 
1:48ad380: import org.slf4j.Logger;
1:48ad380: import org.slf4j.LoggerFactory;
1:48ad380: import org.tranql.connector.AbstractManagedConnection;
1:48ad380: import org.tranql.connector.ManagedConnectionHandle;
1:48ad380: import org.tranql.connector.UserPasswordManagedConnectionFactory;
1:48ad380: import org.tranql.connector.jdbc.ConnectionHandle;
1:48ad380: import org.tranql.connector.jdbc.TranqlDataSource;
1:48ad380: 
1:48ad380: import javax.resource.NotSupportedException;
1:48ad380: import javax.resource.ResourceException;
1:48ad380: import javax.resource.spi.ConnectionManager;
1:48ad380: import javax.resource.spi.ConnectionRequestInfo;
1:48ad380: import javax.resource.spi.ManagedConnection;
1:48ad380: import javax.resource.spi.ManagedConnectionFactory;
1:48ad380: import javax.resource.spi.TransactionSupport;
1:48ad380: import javax.resource.spi.ValidatingManagedConnectionFactory;
1:48ad380: import javax.security.auth.Subject;
1:48ad380: 
1:48ad380: import java.io.PrintWriter;
1:48ad380: import java.sql.Connection;
1:48ad380: import java.sql.SQLException;
1:48ad380: import java.util.HashSet;
1:48ad380: import java.util.Set;
1:48ad380: 
1:8047ebe: @SuppressWarnings({
1:8047ebe:     "rawtypes", "serial", "unchecked"
1:8047ebe: })
1:48ad380: public final class ValidatingDelegatingManagedConnectionFactory implements UserPasswordManagedConnectionFactory, ValidatingManagedConnectionFactory, TransactionSupport {
1:48ad380: 
1:48ad380:     private static final Logger LOG = LoggerFactory.getLogger(ValidatingDelegatingManagedConnectionFactory.class);
1:48ad380:     private final ManagedConnectionFactory delegate;
1:48ad380: 
1:48ad380:     public ValidatingDelegatingManagedConnectionFactory(ManagedConnectionFactory managedConnectionFactory) {
1:48ad380:         this.delegate = managedConnectionFactory;
1:48ad380:     }
1:48ad380: 
1:48ad380:     private boolean isValidConnection(Connection c) {
1:48ad380:         try {
1:48ad380:             if (c.isValid(0)) {
1:48ad380:                 LOG.debug("Connection validation succeeded for managed connection {}.", c);
1:48ad380:                 return true;
1:48ad380:             } else {
1:48ad380:                 LOG.debug("Connection validation failed for managed connection {}.", c);
1:48ad380:             }
1:48ad380:         } catch (SQLException e) {
1:48ad380:             // no-op
1:48ad380:         }
1:48ad380:         return false;
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public TransactionSupportLevel getTransactionSupport() {
1:48ad380:         return TransactionSupport.class.cast(delegate).getTransactionSupport();
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public Set getInvalidConnections(Set connectionSet) throws ResourceException {
1:48ad380:         Set<ManagedConnection> invalid = new HashSet<ManagedConnection>();
1:48ad380: 
1:48ad380:         for (Object o : connectionSet) {
1:48ad380:             if (o instanceof AbstractManagedConnection) {
1:48ad380:                 AbstractManagedConnection<Connection, ConnectionHandle> amc = AbstractManagedConnection.class.cast(o);
1:48ad380: 
1:48ad380:                 if (!isValidConnection(amc.getPhysicalConnection())) {
1:48ad380:                     invalid.add(amc);
1:48ad380:                 }
1:48ad380:             }
1:48ad380:         }
1:48ad380: 
1:48ad380:         return invalid;
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public String getUserName() {
1:48ad380:         return UserPasswordManagedConnectionFactory.class.cast(delegate).getUserName();
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public String getPassword() {
1:48ad380:         return UserPasswordManagedConnectionFactory.class.cast(delegate).getPassword();
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public Object createConnectionFactory(ConnectionManager cxManager) throws ResourceException {
1:48ad380:         return new TranqlDataSource(this, cxManager);
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public Object createConnectionFactory() throws ResourceException {
1:48ad380:         throw new NotSupportedException("ConnectionManager is required");
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public ManagedConnection createManagedConnection(Subject subject, ConnectionRequestInfo cxRequestInfo) throws ResourceException {
1:48ad380:         return delegate.createManagedConnection(subject, cxRequestInfo);
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public ManagedConnection matchManagedConnections(Set connectionSet, Subject subject, ConnectionRequestInfo cxRequestInfo) throws ResourceException {
1:48ad380:         for (Object o : connectionSet) {
1:48ad380:             if (o instanceof ManagedConnectionHandle) {
1:48ad380:                 ManagedConnectionHandle mch = ManagedConnectionHandle.class.cast(o);
1:48ad380:                 if (mch.matches(this, subject, cxRequestInfo)) {
1:48ad380:                     if (mch instanceof AbstractManagedConnection) {
1:48ad380:                         AbstractManagedConnection<Connection, ConnectionHandle> amc = AbstractManagedConnection.class.cast(mch);
1:48ad380:                         if (isValidConnection(amc.getPhysicalConnection())) {
1:48ad380:                             return amc;
1:48ad380:                         }
1:48ad380:                     } else {
1:48ad380:                         return mch;
1:48ad380:                     }
1:48ad380:                 }
1:48ad380:             }
1:48ad380:         }
1:48ad380: 
1:48ad380:         return null;
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public void setLogWriter(PrintWriter out) throws ResourceException {
1:48ad380:         delegate.setLogWriter(out);
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public PrintWriter getLogWriter() throws ResourceException {
1:48ad380:         return delegate.getLogWriter();
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public int hashCode() {
1:48ad380:         return delegate.hashCode();
1:48ad380:     }
1:48ad380: 
1:48ad380:     @Override
1:48ad380:     public boolean equals(Object other) {
1:48ad380:         return delegate.equals(other);
1:48ad380:     }
1:48ad380: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:8047ebe
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings({
1:     "rawtypes", "serial", "unchecked"
1: })
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:48ad380
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.jdbc.internal;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.tranql.connector.AbstractManagedConnection;
1: import org.tranql.connector.ManagedConnectionHandle;
1: import org.tranql.connector.UserPasswordManagedConnectionFactory;
1: import org.tranql.connector.jdbc.ConnectionHandle;
1: import org.tranql.connector.jdbc.TranqlDataSource;
1: 
1: import javax.resource.NotSupportedException;
1: import javax.resource.ResourceException;
1: import javax.resource.spi.ConnectionManager;
1: import javax.resource.spi.ConnectionRequestInfo;
1: import javax.resource.spi.ManagedConnection;
1: import javax.resource.spi.ManagedConnectionFactory;
1: import javax.resource.spi.TransactionSupport;
1: import javax.resource.spi.ValidatingManagedConnectionFactory;
1: import javax.security.auth.Subject;
1: 
1: import java.io.PrintWriter;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
1: public final class ValidatingDelegatingManagedConnectionFactory implements UserPasswordManagedConnectionFactory, ValidatingManagedConnectionFactory, TransactionSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ValidatingDelegatingManagedConnectionFactory.class);
1:     private final ManagedConnectionFactory delegate;
1: 
1:     public ValidatingDelegatingManagedConnectionFactory(ManagedConnectionFactory managedConnectionFactory) {
1:         this.delegate = managedConnectionFactory;
1:     }
1: 
1:     private boolean isValidConnection(Connection c) {
1:         try {
1:             if (c.isValid(0)) {
1:                 LOG.debug("Connection validation succeeded for managed connection {}.", c);
1:                 return true;
1:             } else {
1:                 LOG.debug("Connection validation failed for managed connection {}.", c);
1:             }
1:         } catch (SQLException e) {
1:             // no-op
1:         }
1:         return false;
1:     }
1: 
1:     @Override
1:     public TransactionSupportLevel getTransactionSupport() {
1:         return TransactionSupport.class.cast(delegate).getTransactionSupport();
1:     }
1: 
1:     @Override
1:     public Set getInvalidConnections(Set connectionSet) throws ResourceException {
1:         Set<ManagedConnection> invalid = new HashSet<ManagedConnection>();
1: 
1:         for (Object o : connectionSet) {
1:             if (o instanceof AbstractManagedConnection) {
1:                 AbstractManagedConnection<Connection, ConnectionHandle> amc = AbstractManagedConnection.class.cast(o);
1: 
1:                 if (!isValidConnection(amc.getPhysicalConnection())) {
1:                     invalid.add(amc);
1:                 }
1:             }
1:         }
1: 
1:         return invalid;
1:     }
1: 
1:     @Override
1:     public String getUserName() {
1:         return UserPasswordManagedConnectionFactory.class.cast(delegate).getUserName();
1:     }
1: 
1:     @Override
1:     public String getPassword() {
1:         return UserPasswordManagedConnectionFactory.class.cast(delegate).getPassword();
1:     }
1: 
1:     @Override
1:     public Object createConnectionFactory(ConnectionManager cxManager) throws ResourceException {
1:         return new TranqlDataSource(this, cxManager);
1:     }
1: 
1:     @Override
1:     public Object createConnectionFactory() throws ResourceException {
1:         throw new NotSupportedException("ConnectionManager is required");
1:     }
1: 
1:     @Override
1:     public ManagedConnection createManagedConnection(Subject subject, ConnectionRequestInfo cxRequestInfo) throws ResourceException {
1:         return delegate.createManagedConnection(subject, cxRequestInfo);
1:     }
1: 
1:     @Override
1:     public ManagedConnection matchManagedConnections(Set connectionSet, Subject subject, ConnectionRequestInfo cxRequestInfo) throws ResourceException {
1:         for (Object o : connectionSet) {
1:             if (o instanceof ManagedConnectionHandle) {
1:                 ManagedConnectionHandle mch = ManagedConnectionHandle.class.cast(o);
1:                 if (mch.matches(this, subject, cxRequestInfo)) {
1:                     if (mch instanceof AbstractManagedConnection) {
1:                         AbstractManagedConnection<Connection, ConnectionHandle> amc = AbstractManagedConnection.class.cast(mch);
1:                         if (isValidConnection(amc.getPhysicalConnection())) {
1:                             return amc;
1:                         }
1:                     } else {
1:                         return mch;
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         return null;
1:     }
1: 
1:     @Override
1:     public void setLogWriter(PrintWriter out) throws ResourceException {
1:         delegate.setLogWriter(out);
1:     }
1: 
1:     @Override
1:     public PrintWriter getLogWriter() throws ResourceException {
1:         return delegate.getLogWriter();
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         return delegate.hashCode();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object other) {
1:         return delegate.equals(other);
1:     }
1: }
============================================================================