1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.codec;
1:fdf3952: 
1:fdf3952: import java.util.HashMap;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: import org.osgi.service.blueprint.reflect.ReferenceListener;
1:fdf3952: 
1:fdf3952: public class BPReferenceListener implements TransferObject {
1:fdf3952:     private String bindMethod;
1:fdf3952: 
1:fdf3952:     private String unbindMethod;
1:fdf3952: 
1:fdf3952:     private BPTarget listenerComponent;
1:fdf3952: 
1:fdf3952:     public BPReferenceListener(CompositeData listener) {
1:fdf3952:         bindMethod = (String) listener.get(BlueprintMetadataMBean.BIND_METHOD);
1:fdf3952:         unbindMethod = (String) listener.get(BlueprintMetadataMBean.UNBIND_METHOD);
1:fdf3952: 
1:fdf3952:         Byte[] buf = (Byte[]) listener.get(BlueprintMetadataMBean.LISTENER_COMPONENT);
1:fdf3952:         listenerComponent = (BPTarget) Util.boxedBinary2BPMetadata(buf);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPReferenceListener(ReferenceListener listener) {
1:fdf3952:         bindMethod = listener.getBindMethod();
1:fdf3952:         unbindMethod = listener.getUnbindMethod();
1:fdf3952: 
1:fdf3952:         listenerComponent = (BPTarget) Util.metadata2BPMetadata(listener.getListenerComponent());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public CompositeData asCompositeData() {
1:fdf3952:         HashMap<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(BlueprintMetadataMBean.BIND_METHOD, bindMethod);
1:fdf3952:         items.put(BlueprintMetadataMBean.UNBIND_METHOD, unbindMethod);
1:fdf3952: 
1:fdf3952:         items.put(BlueprintMetadataMBean.LISTENER_COMPONENT, Util.bpMetadata2BoxedBinary(listenerComponent));
1:fdf3952: 
1:fdf3952:         try {
1:fdf3952:             return new CompositeDataSupport(BlueprintMetadataMBean.REFERENCE_LISTENER_TYPE, items);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getBindMethod() {
1:fdf3952:         return bindMethod;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPTarget getListenerComponent() {
1:fdf3952:         return listenerComponent;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getUnbindMethod() {
1:fdf3952:         return unbindMethod;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.codec;
1: 
1: import java.util.HashMap;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: import org.osgi.service.blueprint.reflect.ReferenceListener;
1: 
1: public class BPReferenceListener implements TransferObject {
1:     private String bindMethod;
1: 
1:     private String unbindMethod;
1: 
1:     private BPTarget listenerComponent;
1: 
1:     public BPReferenceListener(CompositeData listener) {
1:         bindMethod = (String) listener.get(BlueprintMetadataMBean.BIND_METHOD);
1:         unbindMethod = (String) listener.get(BlueprintMetadataMBean.UNBIND_METHOD);
1: 
1:         Byte[] buf = (Byte[]) listener.get(BlueprintMetadataMBean.LISTENER_COMPONENT);
1:         listenerComponent = (BPTarget) Util.boxedBinary2BPMetadata(buf);
1:     }
1: 
1:     public BPReferenceListener(ReferenceListener listener) {
1:         bindMethod = listener.getBindMethod();
1:         unbindMethod = listener.getUnbindMethod();
1: 
1:         listenerComponent = (BPTarget) Util.metadata2BPMetadata(listener.getListenerComponent());
1:     }
1: 
1:     public CompositeData asCompositeData() {
1:         HashMap<String, Object> items = new HashMap<String, Object>();
1:         items.put(BlueprintMetadataMBean.BIND_METHOD, bindMethod);
1:         items.put(BlueprintMetadataMBean.UNBIND_METHOD, unbindMethod);
1: 
1:         items.put(BlueprintMetadataMBean.LISTENER_COMPONENT, Util.bpMetadata2BoxedBinary(listenerComponent));
1: 
1:         try {
1:             return new CompositeDataSupport(BlueprintMetadataMBean.REFERENCE_LISTENER_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public String getBindMethod() {
1:         return bindMethod;
1:     }
1: 
1:     public BPTarget getListenerComponent() {
1:         return listenerComponent;
1:     }
1: 
1:     public String getUnbindMethod() {
1:         return unbindMethod;
1:     }
1: }
============================================================================