1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:225bcae: package org.apache.aries.subsystem.core.internal;
2:225bcae: 
1:f615d56: import java.io.InputStream;
1:7689d87: import java.lang.reflect.Method;
1:b75f264: import java.util.ArrayList;
1:b75f264: import java.util.Collections;
1:b75f264: import java.util.List;
1:f615d56: 
1:f615d56: import org.apache.aries.util.io.IOUtils;
1:225bcae: import org.osgi.framework.Bundle;
1:b75f264: import org.osgi.framework.Version;
1:5b9ff63: import org.osgi.framework.startlevel.BundleStartLevel;
1:b75f264: import org.osgi.framework.wiring.BundleCapability;
1:b75f264: import org.osgi.framework.wiring.BundleRequirement;
1:225bcae: import org.osgi.framework.wiring.BundleRevision;
1:b75f264: import org.osgi.framework.wiring.BundleWiring;
1:b75f264: import org.osgi.namespace.service.ServiceNamespace;
1:b75f264: import org.osgi.resource.Capability;
1:b75f264: import org.osgi.resource.Requirement;
1:225bcae: import org.osgi.resource.Resource;
1:225bcae: import org.osgi.service.coordinator.Coordination;
1:225bcae: import org.osgi.service.subsystem.SubsystemException;
1:225bcae: 
1:225bcae: public class BundleResourceInstaller extends ResourceInstaller {
1:b75f264: 	/*
1:b75f264: 	 * Maps a BundleResource to a BundleRevision for the purpose of tracking
1:b75f264: 	 * any service requirements or capabilities. The instance is given to the
1:b75f264: 	 * Subsystems data structure as the constituent object.
1:b75f264: 	 * 
1:b75f264: 	 * The resource variable is allowed to be null so this class can be used
1:b75f264: 	 * when removing constituents from the data structure; however, note that
1:b75f264: 	 * service capabilities and requirements will not be available.
1:b75f264: 	 */
1:b75f264: 	static class BundleConstituent implements BundleRevision {
1:b75f264: 		private final Resource resource;
1:b75f264: 		private final BundleRevision revision;
1:b75f264: 		
1:b75f264: 		public BundleConstituent(Resource resource, BundleRevision revision) {
1:5f81379: 			if (resource instanceof BundleRevision) {
1:5f81379: 				try {
1:5f81379: 					this.resource = new BundleRevisionResource((BundleRevision)resource);
1:5f81379: 				}
1:5f81379: 				catch (SubsystemException e) {
1:5f81379: 					throw e;
1:5f81379: 				}
1:5f81379: 				catch (Exception e) {
1:5f81379: 					throw new SubsystemException(e);
1:5f81379: 				}
1:5f81379: 			}
1:5f81379: 			else
1:5f81379: 				this.resource = resource;
1:b75f264: 			this.revision = revision;
1:b75f264: 		}
1:b75f264: 
1:b75f264: 		@Override
1:b75f264: 		public List<Capability> getCapabilities(String namespace) {
1:b75f264: 			List<Capability> result = new ArrayList<Capability>(revision.getCapabilities(namespace));
1:b75f264: 			if (resource != null && (namespace == null || ServiceNamespace.SERVICE_NAMESPACE.equals(namespace)))
1:b75f264: 				for (Capability capability : resource.getCapabilities(ServiceNamespace.SERVICE_NAMESPACE))
1:b75f264: 					result.add(new BasicCapability.Builder()
1:b75f264: 								.namespace(capability.getNamespace())
1:b75f264: 								.attributes(capability.getAttributes())
1:b75f264: 								.directives(capability.getDirectives())
1:b75f264: 								// Use the BundleRevision as the resource so it can be identified as a
1:b75f264: 								// runtime resource within the system repository.
1:b75f264: 								.resource(revision)
1:b75f264: 								.build());
1:b75f264: 			return Collections.unmodifiableList(result);
1:b75f264: 		}
1:b75f264: 
1:b75f264: 		@Override
1:b75f264: 		public List<Requirement> getRequirements(String namespace) {
1:b75f264: 			List<Requirement> result = new ArrayList<Requirement>(revision.getRequirements(namespace));
1:b75f264: 			if (resource != null && (namespace == null || ServiceNamespace.SERVICE_NAMESPACE.equals(namespace)))
1:b75f264: 				for (Requirement requiremnet : resource.getRequirements(ServiceNamespace.SERVICE_NAMESPACE))
1:b75f264: 					result.add(new BasicRequirement.Builder()
1:b75f264: 								.namespace(requiremnet.getNamespace())
1:b75f264: 								.attributes(requiremnet.getAttributes())
1:b75f264: 								.directives(requiremnet.getDirectives())
1:b75f264: 								// Use the BundleRevision as the resource so it can be identified as a
1:b75f264: 								// runtime resource within the system repository.
1:b75f264: 								.resource(revision)
1:b75f264: 								.build());
1:b75f264: 			return Collections.unmodifiableList(result);
1:b75f264: 		}
1:b75f264: 		
1:b75f264: 		@Override
1:b75f264: 		public boolean equals(Object o) {
1:b75f264: 			if (o == this)
1:b75f264: 				return true;
1:b75f264: 			if (!(o instanceof BundleConstituent))
1:b75f264: 				return false;
1:b75f264: 			BundleConstituent that = (BundleConstituent)o;
1:b75f264: 			return revision.equals(that.revision);
1:b75f264: 		}
1:b75f264: 		
1:b75f264: 		@Override
1:b75f264: 		public int hashCode() {
1:b75f264: 			int result = 17;
1:b75f264: 			result = 31 * result + revision.hashCode();
1:b75f264: 			return result;
1:b75f264: 		}
1:b75f264: 
1:b75f264: 		@Override
1:b75f264: 		public Bundle getBundle() {
1:b75f264: 			return revision.getBundle();
1:b75f264: 		}
1:5c35e50: 		
1:5c35e50: 		public Resource getResource() {
1:5c35e50: 			return resource;
1:5c35e50: 		}
1:5c35e50: 		
1:5c35e50: 		public BundleRevision getRevision() {
1:5c35e50: 			return revision;
1:5c35e50: 		}
1:b75f264: 
1:b75f264: 		@Override
1:b75f264: 		public String getSymbolicName() {
1:b75f264: 			return revision.getSymbolicName();
1:b75f264: 		}
1:b75f264: 
1:b75f264: 		@Override
1:b75f264: 		public Version getVersion() {
1:b75f264: 			return revision.getVersion();
1:b75f264: 		}
1:b75f264: 
1:b75f264: 		@Override
1:b75f264: 		public List<BundleCapability> getDeclaredCapabilities(String namespace) {
1:b75f264: 			return revision.getDeclaredCapabilities(namespace);
1:b75f264: 		}
1:b75f264: 
1:b75f264: 		@Override
1:b75f264: 		public List<BundleRequirement> getDeclaredRequirements(String namespace) {
1:b75f264: 			return revision.getDeclaredRequirements(namespace);
1:b75f264: 		}
1:b75f264: 
1:b75f264: 		@Override
1:b75f264: 		public int getTypes() {
1:b75f264: 			return revision.getTypes();
1:b75f264: 		}
1:b75f264: 
1:b75f264: 		@Override
1:b75f264: 		public BundleWiring getWiring() {
1:b75f264: 			return revision.getWiring();
1:b75f264: 		}
1:b75f264: 		
1:b75f264: 		@Override
1:b75f264: 		public String toString() {
1:b75f264: 			return revision.toString();
1:b75f264: 		}
1:b75f264: 	}
1:b75f264: 	
1:5bd3bf6: 	public BundleResourceInstaller(Coordination coordination, Resource resource, BasicSubsystem subsystem) {
1:307d743: 		super(coordination, resource, subsystem);
2:225bcae: 	}
1:225bcae: 	
1:777b216: 	public Resource install() {
1:225bcae: 		BundleRevision revision;
1:9df8274: 		if (resource instanceof BundleRevision) {
1:225bcae: 			revision = (BundleRevision)resource;
1:9df8274: 		}
1:9df8274: 		else if (resource instanceof BundleRevisionResource) {
1:9df8274: 		    revision = ((BundleRevisionResource)resource).getRevision();
1:9df8274: 		}
1:225bcae: 		else {
1:d6eb080: 			try {
1:225bcae: 				revision = installBundle();
1:225bcae: 			}
1:d6eb080: 			catch (Exception e) {
1:225bcae: 				throw new SubsystemException(e);
1:225bcae: 			}
1:225bcae: 		}
1:225bcae: 		addReference(revision);
1:b75f264: 		addConstituent(new BundleConstituent(resource, revision));
1:777b216: 		return revision;
1:225bcae: 	}
1:225bcae: 	
1:d6eb080: 	private BundleRevision installBundle() throws Exception {
1:225bcae: 		final Bundle bundle;
1:7689d87: 		Method getContent = resource.getClass().getMethod("getContent");
1:7689d87: 		getContent.setAccessible(true);
1:7689d87: 		InputStream is = (InputStream)getContent.invoke(resource);
1:6ea98a2: 		ThreadLocalSubsystem.set(provisionTo);
1:225bcae: 		try {
1:47cea41: 			bundle = provisionTo.getRegion().installBundleAtLocation(getLocation(), is);
1:225bcae: 		}
1:f615d56: 		finally {
1:6ea98a2: 			ThreadLocalSubsystem.remove();
1:f615d56: 			// Although Region.installBundle ultimately calls BundleContext.install,
1:f615d56: 			// which closes the input stream, an exception may occur before this
1:f615d56: 			// happens. Also, the Region API does not guarantee the stream will
1:f615d56: 			// be closed.
1:f615d56: 			IOUtils.close(is);
1:f615d56: 		}
1:5b9ff63: 		// Set the start level of all bundles managed (i.e. installed) by the
1:5b9ff63: 		// subsystems implementation to 1 in case the framework's default bundle
1:5b9ff63: 		// start level has been changed. Otherwise, start failures will occur
1:5b9ff63: 		// if a subsystem is started at a lower start level than the default.
1:5b9ff63: 		// Setting the start level does no harm since all managed bundles are 
1:5b9ff63: 		// started transiently anyway.
1:5b9ff63: 		bundle.adapt(BundleStartLevel.class).setStartLevel(1);
1:225bcae: 		return bundle.adapt(BundleRevision.class);
1:225bcae: 	}
1:225bcae: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7689d87
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
1: 		Method getContent = resource.getClass().getMethod("getContent");
1: 		getContent.setAccessible(true);
1: 		InputStream is = (InputStream)getContent.invoke(resource);
commit:6ea98a2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		ThreadLocalSubsystem.set(provisionTo);
/////////////////////////////////////////////////////////////////////////
1: 			ThreadLocalSubsystem.remove();
commit:9df8274
/////////////////////////////////////////////////////////////////////////
1: 		if (resource instanceof BundleRevision) {
1: 		}
1: 		else if (resource instanceof BundleRevisionResource) {
1: 		    revision = ((BundleRevisionResource)resource).getRevision();
1: 		}
commit:d6bcc03
/////////////////////////////////////////////////////////////////////////
0: 				bundle.uninstall();
commit:5f81379
/////////////////////////////////////////////////////////////////////////
1: 			if (resource instanceof BundleRevision) {
1: 				try {
1: 					this.resource = new BundleRevisionResource((BundleRevision)resource);
1: 				}
1: 				catch (SubsystemException e) {
1: 					throw e;
1: 				}
1: 				catch (Exception e) {
1: 					throw new SubsystemException(e);
1: 				}
1: 			}
1: 			else
1: 				this.resource = resource;
commit:5c35e50
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		public Resource getResource() {
1: 			return resource;
1: 		}
1: 		
1: 		public BundleRevision getRevision() {
1: 			return revision;
1: 		}
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	public BundleResourceInstaller(Coordination coordination, Resource resource, BasicSubsystem subsystem) {
commit:47cea41
/////////////////////////////////////////////////////////////////////////
1: 			bundle = provisionTo.getRegion().installBundleAtLocation(getLocation(), is);
commit:5b9ff63
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.startlevel.BundleStartLevel;
/////////////////////////////////////////////////////////////////////////
1: 		// Set the start level of all bundles managed (i.e. installed) by the
1: 		// subsystems implementation to 1 in case the framework's default bundle
1: 		// start level has been changed. Otherwise, start failures will occur
1: 		// if a subsystem is started at a lower start level than the default.
1: 		// Setting the start level does no harm since all managed bundles are 
1: 		// started transiently anyway.
1: 		bundle.adapt(BundleStartLevel.class).setStartLevel(1);
commit:b75f264
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.wiring.BundleCapability;
1: import org.osgi.framework.wiring.BundleRequirement;
1: import org.osgi.framework.wiring.BundleWiring;
1: import org.osgi.namespace.service.ServiceNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
/////////////////////////////////////////////////////////////////////////
1: 	/*
1: 	 * Maps a BundleResource to a BundleRevision for the purpose of tracking
1: 	 * any service requirements or capabilities. The instance is given to the
1: 	 * Subsystems data structure as the constituent object.
1: 	 * 
1: 	 * The resource variable is allowed to be null so this class can be used
1: 	 * when removing constituents from the data structure; however, note that
1: 	 * service capabilities and requirements will not be available.
1: 	 */
1: 	static class BundleConstituent implements BundleRevision {
1: 		private final Resource resource;
1: 		private final BundleRevision revision;
1: 		
1: 		public BundleConstituent(Resource resource, BundleRevision revision) {
0: 			this.resource = resource;
1: 			this.revision = revision;
1: 		}
1: 
1: 		@Override
1: 		public List<Capability> getCapabilities(String namespace) {
1: 			List<Capability> result = new ArrayList<Capability>(revision.getCapabilities(namespace));
1: 			if (resource != null && (namespace == null || ServiceNamespace.SERVICE_NAMESPACE.equals(namespace)))
1: 				for (Capability capability : resource.getCapabilities(ServiceNamespace.SERVICE_NAMESPACE))
1: 					result.add(new BasicCapability.Builder()
1: 								.namespace(capability.getNamespace())
1: 								.attributes(capability.getAttributes())
1: 								.directives(capability.getDirectives())
1: 								// Use the BundleRevision as the resource so it can be identified as a
1: 								// runtime resource within the system repository.
1: 								.resource(revision)
1: 								.build());
1: 			return Collections.unmodifiableList(result);
1: 		}
1: 
1: 		@Override
1: 		public List<Requirement> getRequirements(String namespace) {
1: 			List<Requirement> result = new ArrayList<Requirement>(revision.getRequirements(namespace));
1: 			if (resource != null && (namespace == null || ServiceNamespace.SERVICE_NAMESPACE.equals(namespace)))
1: 				for (Requirement requiremnet : resource.getRequirements(ServiceNamespace.SERVICE_NAMESPACE))
1: 					result.add(new BasicRequirement.Builder()
1: 								.namespace(requiremnet.getNamespace())
1: 								.attributes(requiremnet.getAttributes())
1: 								.directives(requiremnet.getDirectives())
1: 								// Use the BundleRevision as the resource so it can be identified as a
1: 								// runtime resource within the system repository.
1: 								.resource(revision)
1: 								.build());
1: 			return Collections.unmodifiableList(result);
1: 		}
1: 		
1: 		@Override
1: 		public boolean equals(Object o) {
1: 			if (o == this)
1: 				return true;
1: 			if (!(o instanceof BundleConstituent))
1: 				return false;
1: 			BundleConstituent that = (BundleConstituent)o;
1: 			return revision.equals(that.revision);
1: 		}
1: 		
1: 		@Override
1: 		public int hashCode() {
1: 			int result = 17;
1: 			result = 31 * result + revision.hashCode();
1: 			return result;
1: 		}
1: 
1: 		@Override
1: 		public Bundle getBundle() {
1: 			return revision.getBundle();
1: 		}
1: 
1: 		@Override
1: 		public String getSymbolicName() {
1: 			return revision.getSymbolicName();
1: 		}
1: 
1: 		@Override
1: 		public Version getVersion() {
1: 			return revision.getVersion();
1: 		}
1: 
1: 		@Override
1: 		public List<BundleCapability> getDeclaredCapabilities(String namespace) {
1: 			return revision.getDeclaredCapabilities(namespace);
1: 		}
1: 
1: 		@Override
1: 		public List<BundleRequirement> getDeclaredRequirements(String namespace) {
1: 			return revision.getDeclaredRequirements(namespace);
1: 		}
1: 
1: 		@Override
1: 		public int getTypes() {
1: 			return revision.getTypes();
1: 		}
1: 
1: 		@Override
1: 		public BundleWiring getWiring() {
1: 			return revision.getWiring();
1: 		}
1: 		
1: 		@Override
1: 		public String toString() {
1: 			return revision.toString();
1: 		}
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		addConstituent(new BundleConstituent(resource, revision));
commit:f615d56
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: 
1: import org.apache.aries.util.io.IOUtils;
/////////////////////////////////////////////////////////////////////////
0: 		InputStream is = ((RepositoryContent)resource).getContent();
0: 			bundle = provisionTo.getRegion().installBundle(getLocation(), is);
1: 		finally {
1: 			// Although Region.installBundle ultimately calls BundleContext.install,
1: 			// which closes the input stream, an exception may occur before this
1: 			// happens. Also, the Region API does not guarantee the stream will
1: 			// be closed.
1: 			IOUtils.close(is);
1: 		}
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
0: 		addConstituent(revision);
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:307d743
/////////////////////////////////////////////////////////////////////////
0: 	public BundleResourceInstaller(Coordination coordination, Resource resource, AriesSubsystem subsystem) {
1: 		super(coordination, resource, subsystem);
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: 	public Resource install() {
/////////////////////////////////////////////////////////////////////////
1: 		return revision;
commit:225bcae
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleException;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.coordinator.Coordination;
0: import org.osgi.service.coordinator.Participant;
0: import org.osgi.service.repository.RepositoryContent;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public class BundleResourceInstaller extends ResourceInstaller {
0: 	public BundleResourceInstaller(Coordination coordination, Resource resource, AriesSubsystem subsystem, boolean transitive) {
0: 		super(coordination, resource, subsystem, transitive);
1: 	}
1: 	
0: 	public void install() {
1: 		BundleRevision revision;
0: 		if (resource instanceof BundleRevision)
1: 			revision = (BundleRevision)resource;
1: 		else {
0: 			ThreadLocalSubsystem.set(provisionTo);
1: 			revision = installBundle();
1: 		}
0: 		addConstituent(revision);
1: 		addReference(revision);
1: 	}
1: 	
0: 	private BundleRevision installBundle() {
1: 		final Bundle bundle;
1: 		try {
0: 			bundle = provisionTo.getRegion().installBundle(getLocation(), ((RepositoryContent)resource).getContent());
1: 		}
0: 		catch (BundleException e) {
1: 			throw new SubsystemException(e);
1: 		}
0: 		coordination.addParticipant(new Participant() {
0: 			public void ended(Coordination coordination) throws Exception {
0: 				// Nothing
1: 			}
1: 
0: 			public void failed(Coordination coordination) throws Exception {
0: 				provisionTo.getRegion().removeBundle(bundle);
1: 			}
0: 		});
1: 		return bundle.adapt(BundleRevision.class);
1: 	}
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			try {
0: 				revision = installBundle();
0: 			}
1: 			catch (Exception e) {
0: 				throw new SubsystemException(e);
0: 			}
1: 	private BundleRevision installBundle() throws Exception {
0: 		InputStream is = (InputStream)resource.getClass().getMethod("getContent").invoke(resource);
============================================================================