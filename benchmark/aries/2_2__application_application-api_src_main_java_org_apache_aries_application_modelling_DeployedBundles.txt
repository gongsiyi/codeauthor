1:58f55bd: 
1:58f55bd: /*
1:58f55bd:  * Licensed to the Apache Software Foundation (ASF) under one
1:58f55bd:  * or more contributor license agreements.  See the NOTICE file
1:58f55bd:  * distributed with this work for additional information
1:58f55bd:  * regarding copyright ownership.  The ASF licenses this file
1:58f55bd:  * to you under the Apache License, Version 2.0 (the
1:58f55bd:  * "License"); you may not use this file except in compliance
1:58f55bd:  * with the License.  You may obtain a copy of the License at
1:58f55bd:  *
1:58f55bd:  *   http://www.apache.org/licenses/LICENSE-2.0
1:58f55bd:  *
1:58f55bd:  * Unless required by applicable law or agreed to in writing,
1:58f55bd:  * software distributed under the License is distributed on an
1:58f55bd:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:58f55bd:  * KIND, either express or implied.  See the License for the
1:58f55bd:  * specific language governing permissions and limitations
1:58f55bd:  * under the License.
1:58f55bd:  */
1:58f55bd: 
1:58f55bd: package org.apache.aries.application.modelling;
1:58f55bd: 
1:58f55bd: import java.util.Collection;
1:6fe82e7: import java.util.Map;
1:58f55bd: 
1:58f55bd: import org.apache.aries.application.management.ResolverException;
1:58f55bd: 
1:58f55bd: /** A model of a collection of bundles and similar resources */
1:58f55bd: public interface DeployedBundles {
1:58f55bd: 
1:58f55bd:   /** Add a modelled resource */
1:58f55bd:   void addBundle(ModelledResource modelledBundle);
1:58f55bd:     
1:58f55bd:   /**
1:58f55bd:    * Get the value corresponding to the Deployed-Content header in the deployment.mf.
1:58f55bd:    * @return a manifest entry, or an empty string if there is no content.
1:58f55bd:    */
1:58f55bd:   String getContent();
1:58f55bd:   
1:58f55bd:   /**
1:58f55bd:    * Get the value corresponding to the Deployed-Use-Bundle header in the deployment.mf.
1:58f55bd:    * @return a manifest entry, or an empty string if there is no content.
1:58f55bd:    */
1:58f55bd:   String getUseBundle();
1:58f55bd:   
1:58f55bd:   /**
1:58f55bd:    * Get the value corresponding to the Provision-Bundle header in the deployment.mf.
1:58f55bd:    * @return a manifest entry, or an empty string if there is no content.
1:58f55bd:    */
1:58f55bd:   String getProvisionBundle();
1:58f55bd:   
1:58f55bd:   /**
1:58f55bd:    * Get the value corresponding to the Import-Package header in the deployment.mf. 
1:58f55bd:    * @return a manifest entry, or an empty string if there is no content.
1:58f55bd:    * @throws ResolverException if the requirements could not be resolved.
1:58f55bd:    */
1:58f55bd:   String getImportPackage() throws ResolverException;
1:58f55bd:   
1:58f55bd:   /**
1:58f55bd:    * Get the Deployed-ImportService header. 
1:58f55bd:    * this.deployedImportService contains all the service import filters for every 
1:58f55bd:    * blueprint component within the application. We will only write an entry
1:58f55bd:    * to Deployed-ImportService if
1:58f55bd:    *   a) the reference isMultiple(), or
1:58f55bd:    *   b) the service was not available internally when the app was first deployed
1:58f55bd:    *   
1:58f55bd:    */
1:58f55bd:   String getDeployedImportService(); 
1:58f55bd: 
1:58f55bd:   String toString();
1:58f55bd:   
1:58f55bd:   /**
1:58f55bd:    * Get the set of bundles that are going to be deployed into an isolated framework
1:58f55bd:    * @return a set of bundle metadata
1:58f55bd:    */
1:58f55bd:   Collection<ModelledResource> getDeployedContent();
1:58f55bd:   
1:58f55bd:   /**
1:58f55bd:    * Get the set of bundles that map to Provision-Bundle: these plus 
1:58f55bd:    * getRequiredUseBundle combined give the bundles that will be provisioned
1:58f55bd:    * into the shared bundle space
1:58f55bd:    * 'getProvisionBundle' returns the manifest header string, so this method 
1:58f55bd:    * needs to be called something else. 
1:58f55bd:    *
1:58f55bd:    */
1:58f55bd:   Collection<ModelledResource> getDeployedProvisionBundle (); 
1:58f55bd:   
1:58f55bd:   /**
1:58f55bd:    * Get the subset of bundles specified in use-bundle that are actually required to
1:58f55bd:    * satisfy direct requirements of deployed content.
1:58f55bd:    * @return a set of bundle metadata.
1:58f55bd:    * @throws ResolverException if the requirements could not be resolved.
1:58f55bd:    */
1:58f55bd:   Collection<ModelledResource> getRequiredUseBundle() throws ResolverException;
1:6fe82e7: 
1:6fe82e7:   /**
1:6fe82e7:    * A local environment extension to Apache Aries may manipulate a DeployedBundles object. 
1:6fe82e7:    * This method returns the extra headers and their values. 
1:7ceb4ac:    * @return the extra headers
1:6fe82e7:    */
1:6fe82e7:   Map<String, String> getExtraHeaders();
1:58f55bd: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:7ceb4ac
/////////////////////////////////////////////////////////////////////////
1:    * @return the extra headers
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:6fe82e7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * A local environment extension to Apache Aries may manipulate a DeployedBundles object. 
1:    * This method returns the extra headers and their values. 
0:    * @return
1:    */
1:   Map<String, String> getExtraHeaders();
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: 
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.application.modelling;
1: 
1: import java.util.Collection;
1: 
1: import org.apache.aries.application.management.ResolverException;
1: 
1: /** A model of a collection of bundles and similar resources */
1: public interface DeployedBundles {
1: 
1:   /** Add a modelled resource */
1:   void addBundle(ModelledResource modelledBundle);
1:     
1:   /**
1:    * Get the value corresponding to the Deployed-Content header in the deployment.mf.
1:    * @return a manifest entry, or an empty string if there is no content.
1:    */
1:   String getContent();
1:   
1:   /**
1:    * Get the value corresponding to the Deployed-Use-Bundle header in the deployment.mf.
1:    * @return a manifest entry, or an empty string if there is no content.
1:    */
1:   String getUseBundle();
1:   
1:   /**
1:    * Get the value corresponding to the Provision-Bundle header in the deployment.mf.
1:    * @return a manifest entry, or an empty string if there is no content.
1:    */
1:   String getProvisionBundle();
1:   
1:   /**
1:    * Get the value corresponding to the Import-Package header in the deployment.mf. 
1:    * @return a manifest entry, or an empty string if there is no content.
1:    * @throws ResolverException if the requirements could not be resolved.
1:    */
1:   String getImportPackage() throws ResolverException;
1:   
1:   /**
1:    * Get the Deployed-ImportService header. 
1:    * this.deployedImportService contains all the service import filters for every 
1:    * blueprint component within the application. We will only write an entry
1:    * to Deployed-ImportService if
1:    *   a) the reference isMultiple(), or
1:    *   b) the service was not available internally when the app was first deployed
1:    *   
1:    */
1:   String getDeployedImportService(); 
1: 
1:   String toString();
1:   
1:   /**
1:    * Get the set of bundles that are going to be deployed into an isolated framework
1:    * @return a set of bundle metadata
1:    */
1:   Collection<ModelledResource> getDeployedContent();
1:   
1:   /**
1:    * Get the set of bundles that map to Provision-Bundle: these plus 
1:    * getRequiredUseBundle combined give the bundles that will be provisioned
1:    * into the shared bundle space
1:    * 'getProvisionBundle' returns the manifest header string, so this method 
1:    * needs to be called something else. 
1:    *
1:    */
1:   Collection<ModelledResource> getDeployedProvisionBundle (); 
1:   
1:   /**
1:    * Get the subset of bundles specified in use-bundle that are actually required to
1:    * satisfy direct requirements of deployed content.
1:    * @return a set of bundle metadata.
1:    * @throws ResolverException if the requirements could not be resolved.
1:    */
1:   Collection<ModelledResource> getRequiredUseBundle() throws ResolverException;
1: }
============================================================================